
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00028038  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000320  20000000  0003a038  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000057cc  20000320  0003a360  00030320  2**4
                  ALLOC
  3 .stack        00002004  20005aec  0003fb2c  00030320  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030320  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030348  2**0
                  CONTENTS, READONLY
  6 .debug_info   00124383  00000000  00000000  000303a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0001052f  00000000  00000000  00154724  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000165cd  00000000  00000000  00164c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003be0  00000000  00000000  0017b220  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003878  00000000  00000000  0017ee00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028df8  00000000  00000000  00182678  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005ab7f  00000000  00000000  001ab470  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c3831  00000000  00000000  00205fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000e29c  00000000  00000000  002c9820  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	f0 7a 00 20 f9 ab 02 00 f1 ac 02 00 f1 ac 02 00     .z. ............
	...
   1202c:	8d 9d 01 00 00 00 00 00 00 00 00 00 b1 9e 01 00     ................
   1203c:	f9 9e 01 00 f1 ac 02 00 f1 ac 02 00 f1 ac 02 00     ................
   1204c:	49 6d 02 00 75 62 02 00 f1 ac 02 00 61 24 01 00     Im..ub......a$..
   1205c:	f1 ac 02 00 a5 25 01 00 ed 73 02 00 05 74 02 00     .....%...s...t..
   1206c:	1d 74 02 00 35 74 02 00 4d 74 02 00 65 74 02 00     .t..5t..Mt..et..
   1207c:	41 ab 02 00 55 ab 02 00 69 ab 02 00 79 7a 01 00     A...U...i...yz..
   1208c:	8d 7a 01 00 a1 7a 01 00 00 00 00 00 00 00 00 00     .z...z..........
   1209c:	e9 22 01 00 f1 ac 02 00 25 24 01 00 f1 ac 02 00     ."......%$......
   120ac:	f1 ac 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000320 	.word	0x20000320
   120d4:	00000000 	.word	0x00000000
   120d8:	0003a038 	.word	0x0003a038

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000324 	.word	0x20000324
   12108:	0003a038 	.word	0x0003a038
   1210c:	0003a038 	.word	0x0003a038
   12110:	00000000 	.word	0x00000000

00012114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	7e5b      	ldrb	r3, [r3, #25]
   12126:	b2db      	uxtb	r3, r3
   12128:	b25b      	sxtb	r3, r3
   1212a:	2b00      	cmp	r3, #0
   1212c:	da01      	bge.n	12132 <adc_is_syncing+0x1e>
		return true;
   1212e:	2301      	movs	r3, #1
   12130:	e000      	b.n	12134 <adc_is_syncing+0x20>
	}

	return false;
   12132:	2300      	movs	r3, #0
}
   12134:	0018      	movs	r0, r3
   12136:	46bd      	mov	sp, r7
   12138:	b004      	add	sp, #16
   1213a:	bd80      	pop	{r7, pc}

0001213c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1213c:	b580      	push	{r7, lr}
   1213e:	b084      	sub	sp, #16
   12140:	af00      	add	r7, sp, #0
   12142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	681b      	ldr	r3, [r3, #0]
   12148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1214a:	46c0      	nop			; (mov r8, r8)
   1214c:	687b      	ldr	r3, [r7, #4]
   1214e:	0018      	movs	r0, r3
   12150:	4b0b      	ldr	r3, [pc, #44]	; (12180 <adc_start_conversion+0x44>)
   12152:	4798      	blx	r3
   12154:	1e03      	subs	r3, r0, #0
   12156:	d1f9      	bne.n	1214c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12158:	68fb      	ldr	r3, [r7, #12]
   1215a:	7b1b      	ldrb	r3, [r3, #12]
   1215c:	b2db      	uxtb	r3, r3
   1215e:	2202      	movs	r2, #2
   12160:	4313      	orrs	r3, r2
   12162:	b2da      	uxtb	r2, r3
   12164:	68fb      	ldr	r3, [r7, #12]
   12166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12168:	46c0      	nop			; (mov r8, r8)
   1216a:	687b      	ldr	r3, [r7, #4]
   1216c:	0018      	movs	r0, r3
   1216e:	4b04      	ldr	r3, [pc, #16]	; (12180 <adc_start_conversion+0x44>)
   12170:	4798      	blx	r3
   12172:	1e03      	subs	r3, r0, #0
   12174:	d1f9      	bne.n	1216a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12176:	46c0      	nop			; (mov r8, r8)
   12178:	46bd      	mov	sp, r7
   1217a:	b004      	add	sp, #16
   1217c:	bd80      	pop	{r7, pc}
   1217e:	46c0      	nop			; (mov r8, r8)
   12180:	00012115 	.word	0x00012115

00012184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12184:	b580      	push	{r7, lr}
   12186:	b084      	sub	sp, #16
   12188:	af00      	add	r7, sp, #0
   1218a:	6078      	str	r0, [r7, #4]
   1218c:	000a      	movs	r2, r1
   1218e:	1cfb      	adds	r3, r7, #3
   12190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12192:	687b      	ldr	r3, [r7, #4]
   12194:	681b      	ldr	r3, [r3, #0]
   12196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12198:	68fb      	ldr	r3, [r7, #12]
   1219a:	1cfa      	adds	r2, r7, #3
   1219c:	7812      	ldrb	r2, [r2, #0]
   1219e:	759a      	strb	r2, [r3, #22]
}
   121a0:	46c0      	nop			; (mov r8, r8)
   121a2:	46bd      	mov	sp, r7
   121a4:	b004      	add	sp, #16
   121a6:	bd80      	pop	{r7, pc}

000121a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   121a8:	b580      	push	{r7, lr}
   121aa:	b084      	sub	sp, #16
   121ac:	af00      	add	r7, sp, #0
   121ae:	0002      	movs	r2, r0
   121b0:	1dfb      	adds	r3, r7, #7
   121b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   121b4:	1dfb      	adds	r3, r7, #7
   121b6:	781a      	ldrb	r2, [r3, #0]
   121b8:	4b47      	ldr	r3, [pc, #284]	; (122d8 <_adc_interrupt_handler+0x130>)
   121ba:	0092      	lsls	r2, r2, #2
   121bc:	58d3      	ldr	r3, [r2, r3]
   121be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   121c0:	68fb      	ldr	r3, [r7, #12]
   121c2:	681b      	ldr	r3, [r3, #0]
   121c4:	7e1b      	ldrb	r3, [r3, #24]
   121c6:	b2da      	uxtb	r2, r3
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	681b      	ldr	r3, [r3, #0]
   121cc:	7ddb      	ldrb	r3, [r3, #23]
   121ce:	b2db      	uxtb	r3, r3
   121d0:	4013      	ands	r3, r2
   121d2:	b2db      	uxtb	r3, r3
   121d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   121d6:	68bb      	ldr	r3, [r7, #8]
   121d8:	2201      	movs	r2, #1
   121da:	4013      	ands	r3, r2
   121dc:	d045      	beq.n	1226a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   121de:	68fb      	ldr	r3, [r7, #12]
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	2201      	movs	r2, #1
   121e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   121e6:	46c0      	nop			; (mov r8, r8)
   121e8:	68fb      	ldr	r3, [r7, #12]
   121ea:	0018      	movs	r0, r3
   121ec:	4b3b      	ldr	r3, [pc, #236]	; (122dc <_adc_interrupt_handler+0x134>)
   121ee:	4798      	blx	r3
   121f0:	1e03      	subs	r3, r0, #0
   121f2:	d1f9      	bne.n	121e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	695b      	ldr	r3, [r3, #20]
   121f8:	1c99      	adds	r1, r3, #2
   121fa:	68fa      	ldr	r2, [r7, #12]
   121fc:	6151      	str	r1, [r2, #20]
   121fe:	68fa      	ldr	r2, [r7, #12]
   12200:	6812      	ldr	r2, [r2, #0]
   12202:	8b52      	ldrh	r2, [r2, #26]
   12204:	b292      	uxth	r2, r2
   12206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	8b1b      	ldrh	r3, [r3, #24]
   1220c:	b29b      	uxth	r3, r3
   1220e:	3b01      	subs	r3, #1
   12210:	b29b      	uxth	r3, r3
   12212:	68fa      	ldr	r2, [r7, #12]
   12214:	1c19      	adds	r1, r3, #0
   12216:	8311      	strh	r1, [r2, #24]
   12218:	2b00      	cmp	r3, #0
   1221a:	d008      	beq.n	1222e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	7f5b      	ldrb	r3, [r3, #29]
   12220:	2b00      	cmp	r3, #0
   12222:	d022      	beq.n	1226a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12224:	68fb      	ldr	r3, [r7, #12]
   12226:	0018      	movs	r0, r3
   12228:	4b2d      	ldr	r3, [pc, #180]	; (122e0 <_adc_interrupt_handler+0x138>)
   1222a:	4798      	blx	r3
   1222c:	e01d      	b.n	1226a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1222e:	68fb      	ldr	r3, [r7, #12]
   12230:	2101      	movs	r1, #1
   12232:	0018      	movs	r0, r3
   12234:	4b2b      	ldr	r3, [pc, #172]	; (122e4 <_adc_interrupt_handler+0x13c>)
   12236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12238:	68fb      	ldr	r3, [r7, #12]
   1223a:	7f1b      	ldrb	r3, [r3, #28]
   1223c:	b2db      	uxtb	r3, r3
   1223e:	2b05      	cmp	r3, #5
   12240:	d113      	bne.n	1226a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12242:	68fb      	ldr	r3, [r7, #12]
   12244:	2200      	movs	r2, #0
   12246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12248:	68fb      	ldr	r3, [r7, #12]
   1224a:	7edb      	ldrb	r3, [r3, #27]
   1224c:	001a      	movs	r2, r3
   1224e:	2301      	movs	r3, #1
   12250:	4013      	ands	r3, r2
   12252:	d00a      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12254:	68fb      	ldr	r3, [r7, #12]
   12256:	7e9b      	ldrb	r3, [r3, #26]
   12258:	001a      	movs	r2, r3
   1225a:	2301      	movs	r3, #1
   1225c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1225e:	d004      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12260:	68fb      	ldr	r3, [r7, #12]
   12262:	689b      	ldr	r3, [r3, #8]
   12264:	68fa      	ldr	r2, [r7, #12]
   12266:	0010      	movs	r0, r2
   12268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	2204      	movs	r2, #4
   1226e:	4013      	ands	r3, r2
   12270:	d014      	beq.n	1229c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12272:	68fb      	ldr	r3, [r7, #12]
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	2204      	movs	r2, #4
   12278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1227a:	68fb      	ldr	r3, [r7, #12]
   1227c:	7edb      	ldrb	r3, [r3, #27]
   1227e:	001a      	movs	r2, r3
   12280:	2302      	movs	r3, #2
   12282:	4013      	ands	r3, r2
   12284:	d00a      	beq.n	1229c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12286:	68fb      	ldr	r3, [r7, #12]
   12288:	7e9b      	ldrb	r3, [r3, #26]
   1228a:	001a      	movs	r2, r3
   1228c:	2302      	movs	r3, #2
   1228e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12290:	d004      	beq.n	1229c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12292:	68fb      	ldr	r3, [r7, #12]
   12294:	68db      	ldr	r3, [r3, #12]
   12296:	68fa      	ldr	r2, [r7, #12]
   12298:	0010      	movs	r0, r2
   1229a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1229c:	68bb      	ldr	r3, [r7, #8]
   1229e:	2202      	movs	r2, #2
   122a0:	4013      	ands	r3, r2
   122a2:	d014      	beq.n	122ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   122a4:	68fb      	ldr	r3, [r7, #12]
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	2202      	movs	r2, #2
   122aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122ac:	68fb      	ldr	r3, [r7, #12]
   122ae:	7edb      	ldrb	r3, [r3, #27]
   122b0:	001a      	movs	r2, r3
   122b2:	2304      	movs	r3, #4
   122b4:	4013      	ands	r3, r2
   122b6:	d00a      	beq.n	122ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   122b8:	68fb      	ldr	r3, [r7, #12]
   122ba:	7e9b      	ldrb	r3, [r3, #26]
   122bc:	001a      	movs	r2, r3
   122be:	2304      	movs	r3, #4
   122c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122c2:	d004      	beq.n	122ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   122c4:	68fb      	ldr	r3, [r7, #12]
   122c6:	691b      	ldr	r3, [r3, #16]
   122c8:	68fa      	ldr	r2, [r7, #12]
   122ca:	0010      	movs	r0, r2
   122cc:	4798      	blx	r3
		}
	}
}
   122ce:	46c0      	nop			; (mov r8, r8)
   122d0:	46bd      	mov	sp, r7
   122d2:	b004      	add	sp, #16
   122d4:	bd80      	pop	{r7, pc}
   122d6:	46c0      	nop			; (mov r8, r8)
   122d8:	200045d4 	.word	0x200045d4
   122dc:	00012115 	.word	0x00012115
   122e0:	0001213d 	.word	0x0001213d
   122e4:	00012185 	.word	0x00012185

000122e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   122e8:	b580      	push	{r7, lr}
   122ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   122ec:	2000      	movs	r0, #0
   122ee:	4b02      	ldr	r3, [pc, #8]	; (122f8 <ADC_Handler+0x10>)
   122f0:	4798      	blx	r3
}
   122f2:	46c0      	nop			; (mov r8, r8)
   122f4:	46bd      	mov	sp, r7
   122f6:	bd80      	pop	{r7, pc}
   122f8:	000121a9 	.word	0x000121a9

000122fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b082      	sub	sp, #8
   12300:	af00      	add	r7, sp, #0
   12302:	0002      	movs	r2, r0
   12304:	1dfb      	adds	r3, r7, #7
   12306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12308:	4a07      	ldr	r2, [pc, #28]	; (12328 <system_interrupt_disable+0x2c>)
   1230a:	1dfb      	adds	r3, r7, #7
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	0019      	movs	r1, r3
   12310:	231f      	movs	r3, #31
   12312:	400b      	ands	r3, r1
   12314:	2101      	movs	r1, #1
   12316:	4099      	lsls	r1, r3
   12318:	000b      	movs	r3, r1
   1231a:	0019      	movs	r1, r3
   1231c:	2380      	movs	r3, #128	; 0x80
   1231e:	50d1      	str	r1, [r2, r3]
}
   12320:	46c0      	nop			; (mov r8, r8)
   12322:	46bd      	mov	sp, r7
   12324:	b002      	add	sp, #8
   12326:	bd80      	pop	{r7, pc}
   12328:	e000e100 	.word	0xe000e100

0001232c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1232c:	b580      	push	{r7, lr}
   1232e:	b084      	sub	sp, #16
   12330:	af00      	add	r7, sp, #0
   12332:	0002      	movs	r2, r0
   12334:	1dfb      	adds	r3, r7, #7
   12336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12338:	1dfb      	adds	r3, r7, #7
   1233a:	781a      	ldrb	r2, [r3, #0]
   1233c:	4b37      	ldr	r3, [pc, #220]	; (1241c <_dac_interrupt_handler+0xf0>)
   1233e:	0092      	lsls	r2, r2, #2
   12340:	58d3      	ldr	r3, [r2, r3]
   12342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12344:	68fb      	ldr	r3, [r7, #12]
   12346:	681b      	ldr	r3, [r3, #0]
   12348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1234a:	68bb      	ldr	r3, [r7, #8]
   1234c:	799b      	ldrb	r3, [r3, #6]
   1234e:	b2db      	uxtb	r3, r3
   12350:	001a      	movs	r2, r3
   12352:	2301      	movs	r3, #1
   12354:	4013      	ands	r3, r2
   12356:	d00e      	beq.n	12376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12358:	68bb      	ldr	r3, [r7, #8]
   1235a:	2201      	movs	r2, #1
   1235c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1235e:	68fb      	ldr	r3, [r7, #12]
   12360:	3314      	adds	r3, #20
   12362:	2b00      	cmp	r3, #0
   12364:	d007      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12366:	68fb      	ldr	r3, [r7, #12]
   12368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1236a:	2b00      	cmp	r3, #0
   1236c:	d003      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1236e:	68fb      	ldr	r3, [r7, #12]
   12370:	699b      	ldr	r3, [r3, #24]
   12372:	2000      	movs	r0, #0
   12374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12376:	68bb      	ldr	r3, [r7, #8]
   12378:	799b      	ldrb	r3, [r3, #6]
   1237a:	b2db      	uxtb	r3, r3
   1237c:	001a      	movs	r2, r3
   1237e:	2302      	movs	r3, #2
   12380:	4013      	ands	r3, r2
   12382:	d047      	beq.n	12414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12384:	68bb      	ldr	r3, [r7, #8]
   12386:	2202      	movs	r2, #2
   12388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	899b      	ldrh	r3, [r3, #12]
   1238e:	b29b      	uxth	r3, r3
   12390:	2b00      	cmp	r3, #0
   12392:	d033      	beq.n	123fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12394:	68fb      	ldr	r3, [r7, #12]
   12396:	689a      	ldr	r2, [r3, #8]
   12398:	68fb      	ldr	r3, [r7, #12]
   1239a:	89db      	ldrh	r3, [r3, #14]
   1239c:	b29b      	uxth	r3, r3
   1239e:	1c59      	adds	r1, r3, #1
   123a0:	b288      	uxth	r0, r1
   123a2:	68f9      	ldr	r1, [r7, #12]
   123a4:	81c8      	strh	r0, [r1, #14]
   123a6:	005b      	lsls	r3, r3, #1
   123a8:	18d3      	adds	r3, r2, r3
   123aa:	881b      	ldrh	r3, [r3, #0]
   123ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   123ae:	68bb      	ldr	r3, [r7, #8]
   123b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   123b2:	68fb      	ldr	r3, [r7, #12]
   123b4:	899b      	ldrh	r3, [r3, #12]
   123b6:	b29b      	uxth	r3, r3
   123b8:	3b01      	subs	r3, #1
   123ba:	b29a      	uxth	r2, r3
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   123c0:	68fb      	ldr	r3, [r7, #12]
   123c2:	899b      	ldrh	r3, [r3, #12]
   123c4:	b29b      	uxth	r3, r3
   123c6:	2b00      	cmp	r3, #0
   123c8:	d118      	bne.n	123fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   123ca:	68fb      	ldr	r3, [r7, #12]
   123cc:	2220      	movs	r2, #32
   123ce:	2100      	movs	r1, #0
   123d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   123d2:	68bb      	ldr	r3, [r7, #8]
   123d4:	2202      	movs	r2, #2
   123d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   123d8:	68bb      	ldr	r3, [r7, #8]
   123da:	2202      	movs	r2, #2
   123dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   123de:	2019      	movs	r0, #25
   123e0:	4b0f      	ldr	r3, [pc, #60]	; (12420 <_dac_interrupt_handler+0xf4>)
   123e2:	4798      	blx	r3

				if ((module->callback) &&
   123e4:	68fb      	ldr	r3, [r7, #12]
   123e6:	3314      	adds	r3, #20
   123e8:	2b00      	cmp	r3, #0
   123ea:	d007      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   123ec:	68fb      	ldr	r3, [r7, #12]
   123ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   123f0:	2b00      	cmp	r3, #0
   123f2:	d003      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	69db      	ldr	r3, [r3, #28]
   123f8:	2000      	movs	r0, #0
   123fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	3314      	adds	r3, #20
   12400:	2b00      	cmp	r3, #0
   12402:	d007      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12404:	68fb      	ldr	r3, [r7, #12]
   12406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12408:	2b00      	cmp	r3, #0
   1240a:	d003      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1240c:	68fb      	ldr	r3, [r7, #12]
   1240e:	695b      	ldr	r3, [r3, #20]
   12410:	2000      	movs	r0, #0
   12412:	4798      	blx	r3
		}
	}
}
   12414:	46c0      	nop			; (mov r8, r8)
   12416:	46bd      	mov	sp, r7
   12418:	b004      	add	sp, #16
   1241a:	bd80      	pop	{r7, pc}
   1241c:	200045d8 	.word	0x200045d8
   12420:	000122fd 	.word	0x000122fd

00012424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12424:	b580      	push	{r7, lr}
   12426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12428:	2000      	movs	r0, #0
   1242a:	4b02      	ldr	r3, [pc, #8]	; (12434 <DAC_Handler+0x10>)
   1242c:	4798      	blx	r3
}
   1242e:	46c0      	nop			; (mov r8, r8)
   12430:	46bd      	mov	sp, r7
   12432:	bd80      	pop	{r7, pc}
   12434:	0001232d 	.word	0x0001232d

00012438 <system_interrupt_enter_critical_section>:
{
   12438:	b580      	push	{r7, lr}
   1243a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1243c:	4b02      	ldr	r3, [pc, #8]	; (12448 <system_interrupt_enter_critical_section+0x10>)
   1243e:	4798      	blx	r3
}
   12440:	46c0      	nop			; (mov r8, r8)
   12442:	46bd      	mov	sp, r7
   12444:	bd80      	pop	{r7, pc}
   12446:	46c0      	nop			; (mov r8, r8)
   12448:	00025ed5 	.word	0x00025ed5

0001244c <system_interrupt_leave_critical_section>:
{
   1244c:	b580      	push	{r7, lr}
   1244e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <system_interrupt_leave_critical_section+0x10>)
   12452:	4798      	blx	r3
}
   12454:	46c0      	nop			; (mov r8, r8)
   12456:	46bd      	mov	sp, r7
   12458:	bd80      	pop	{r7, pc}
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	00025f29 	.word	0x00025f29

00012460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12460:	b580      	push	{r7, lr}
   12462:	b086      	sub	sp, #24
   12464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12466:	4b49      	ldr	r3, [pc, #292]	; (1258c <DMAC_Handler+0x12c>)
   12468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1246a:	4b49      	ldr	r3, [pc, #292]	; (12590 <DMAC_Handler+0x130>)
   1246c:	8c1b      	ldrh	r3, [r3, #32]
   1246e:	b29b      	uxth	r3, r3
   12470:	b2da      	uxtb	r2, r3
   12472:	2317      	movs	r3, #23
   12474:	18fb      	adds	r3, r7, r3
   12476:	210f      	movs	r1, #15
   12478:	400a      	ands	r2, r1
   1247a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1247c:	2317      	movs	r3, #23
   1247e:	18fb      	adds	r3, r7, r3
   12480:	781a      	ldrb	r2, [r3, #0]
   12482:	4b44      	ldr	r3, [pc, #272]	; (12594 <DMAC_Handler+0x134>)
   12484:	0092      	lsls	r2, r2, #2
   12486:	58d3      	ldr	r3, [r2, r3]
   12488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1248a:	4a41      	ldr	r2, [pc, #260]	; (12590 <DMAC_Handler+0x130>)
   1248c:	693b      	ldr	r3, [r7, #16]
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	210f      	movs	r1, #15
   12492:	400b      	ands	r3, r1
   12494:	b2d9      	uxtb	r1, r3
   12496:	233f      	movs	r3, #63	; 0x3f
   12498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1249a:	493d      	ldr	r1, [pc, #244]	; (12590 <DMAC_Handler+0x130>)
   1249c:	230f      	movs	r3, #15
   1249e:	18fb      	adds	r3, r7, r3
   124a0:	224e      	movs	r2, #78	; 0x4e
   124a2:	5c8a      	ldrb	r2, [r1, r2]
   124a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   124a6:	693b      	ldr	r3, [r7, #16]
   124a8:	781b      	ldrb	r3, [r3, #0]
   124aa:	4a3b      	ldr	r2, [pc, #236]	; (12598 <DMAC_Handler+0x138>)
   124ac:	011b      	lsls	r3, r3, #4
   124ae:	18d3      	adds	r3, r2, r3
   124b0:	3302      	adds	r3, #2
   124b2:	881b      	ldrh	r3, [r3, #0]
   124b4:	b29b      	uxth	r3, r3
   124b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   124b8:	693b      	ldr	r3, [r7, #16]
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	4a37      	ldr	r2, [pc, #220]	; (1259c <DMAC_Handler+0x13c>)
   124be:	011b      	lsls	r3, r3, #4
   124c0:	18d3      	adds	r3, r2, r3
   124c2:	3302      	adds	r3, #2
   124c4:	881b      	ldrh	r3, [r3, #0]
   124c6:	b29b      	uxth	r3, r3
   124c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   124ca:	68ba      	ldr	r2, [r7, #8]
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	1ad2      	subs	r2, r2, r3
   124d0:	693b      	ldr	r3, [r7, #16]
   124d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   124d4:	230f      	movs	r3, #15
   124d6:	18fb      	adds	r3, r7, r3
   124d8:	781b      	ldrb	r3, [r3, #0]
   124da:	2201      	movs	r2, #1
   124dc:	4013      	ands	r3, r2
   124de:	d016      	beq.n	1250e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   124e0:	4a2b      	ldr	r2, [pc, #172]	; (12590 <DMAC_Handler+0x130>)
   124e2:	234e      	movs	r3, #78	; 0x4e
   124e4:	2101      	movs	r1, #1
   124e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   124e8:	693b      	ldr	r3, [r7, #16]
   124ea:	2210      	movs	r2, #16
   124ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124ee:	693b      	ldr	r3, [r7, #16]
   124f0:	7c1b      	ldrb	r3, [r3, #16]
   124f2:	001a      	movs	r2, r3
   124f4:	2301      	movs	r3, #1
   124f6:	4013      	ands	r3, r2
   124f8:	d042      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   124fa:	693b      	ldr	r3, [r7, #16]
   124fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124fe:	2b00      	cmp	r3, #0
   12500:	d03e      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12502:	693b      	ldr	r3, [r7, #16]
   12504:	685b      	ldr	r3, [r3, #4]
   12506:	693a      	ldr	r2, [r7, #16]
   12508:	0010      	movs	r0, r2
   1250a:	4798      	blx	r3
   1250c:	e038      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1250e:	230f      	movs	r3, #15
   12510:	18fb      	adds	r3, r7, r3
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	2202      	movs	r2, #2
   12516:	4013      	ands	r3, r2
   12518:	d016      	beq.n	12548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1251a:	4a1d      	ldr	r2, [pc, #116]	; (12590 <DMAC_Handler+0x130>)
   1251c:	234e      	movs	r3, #78	; 0x4e
   1251e:	2102      	movs	r1, #2
   12520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12522:	693b      	ldr	r3, [r7, #16]
   12524:	2200      	movs	r2, #0
   12526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12528:	693b      	ldr	r3, [r7, #16]
   1252a:	7c1b      	ldrb	r3, [r3, #16]
   1252c:	001a      	movs	r2, r3
   1252e:	2302      	movs	r3, #2
   12530:	4013      	ands	r3, r2
   12532:	d025      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12534:	693b      	ldr	r3, [r7, #16]
   12536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12538:	2b00      	cmp	r3, #0
   1253a:	d021      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1253c:	693b      	ldr	r3, [r7, #16]
   1253e:	689b      	ldr	r3, [r3, #8]
   12540:	693a      	ldr	r2, [r7, #16]
   12542:	0010      	movs	r0, r2
   12544:	4798      	blx	r3
   12546:	e01b      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12548:	230f      	movs	r3, #15
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2204      	movs	r2, #4
   12550:	4013      	ands	r3, r2
   12552:	d015      	beq.n	12580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12554:	4a0e      	ldr	r2, [pc, #56]	; (12590 <DMAC_Handler+0x130>)
   12556:	234e      	movs	r3, #78	; 0x4e
   12558:	2104      	movs	r1, #4
   1255a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1255c:	693b      	ldr	r3, [r7, #16]
   1255e:	2206      	movs	r2, #6
   12560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12562:	693b      	ldr	r3, [r7, #16]
   12564:	7c1b      	ldrb	r3, [r3, #16]
   12566:	001a      	movs	r2, r3
   12568:	2304      	movs	r3, #4
   1256a:	4013      	ands	r3, r2
   1256c:	d008      	beq.n	12580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1256e:	693b      	ldr	r3, [r7, #16]
   12570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12572:	2b00      	cmp	r3, #0
   12574:	d004      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12576:	693b      	ldr	r3, [r7, #16]
   12578:	68db      	ldr	r3, [r3, #12]
   1257a:	693a      	ldr	r2, [r7, #16]
   1257c:	0010      	movs	r0, r2
   1257e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12580:	4b07      	ldr	r3, [pc, #28]	; (125a0 <DMAC_Handler+0x140>)
   12582:	4798      	blx	r3
}
   12584:	46c0      	nop			; (mov r8, r8)
   12586:	46bd      	mov	sp, r7
   12588:	b006      	add	sp, #24
   1258a:	bd80      	pop	{r7, pc}
   1258c:	00012439 	.word	0x00012439
   12590:	41004800 	.word	0x41004800
   12594:	20000390 	.word	0x20000390
   12598:	200045e0 	.word	0x200045e0
   1259c:	20000340 	.word	0x20000340
   125a0:	0001244d 	.word	0x0001244d

000125a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   125a4:	b580      	push	{r7, lr}
   125a6:	b082      	sub	sp, #8
   125a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   125aa:	4b15      	ldr	r3, [pc, #84]	; (12600 <EVSYS_Handler+0x5c>)
   125ac:	691b      	ldr	r3, [r3, #16]
   125ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   125b0:	4b14      	ldr	r3, [pc, #80]	; (12604 <EVSYS_Handler+0x60>)
   125b2:	699b      	ldr	r3, [r3, #24]
   125b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   125b6:	4b12      	ldr	r3, [pc, #72]	; (12600 <EVSYS_Handler+0x5c>)
   125b8:	689a      	ldr	r2, [r3, #8]
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	431a      	orrs	r2, r3
   125be:	4b10      	ldr	r3, [pc, #64]	; (12600 <EVSYS_Handler+0x5c>)
   125c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   125c2:	4b10      	ldr	r3, [pc, #64]	; (12604 <EVSYS_Handler+0x60>)
   125c4:	4a10      	ldr	r2, [pc, #64]	; (12608 <EVSYS_Handler+0x64>)
   125c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   125c8:	e008      	b.n	125dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   125ca:	687b      	ldr	r3, [r7, #4]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	0018      	movs	r0, r3
   125d4:	4790      	blx	r2
		current_hook = current_hook->next;
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	689b      	ldr	r3, [r3, #8]
   125da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	2b00      	cmp	r3, #0
   125e0:	d1f3      	bne.n	125ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   125e2:	4b07      	ldr	r3, [pc, #28]	; (12600 <EVSYS_Handler+0x5c>)
   125e4:	68db      	ldr	r3, [r3, #12]
   125e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   125e8:	4b05      	ldr	r3, [pc, #20]	; (12600 <EVSYS_Handler+0x5c>)
   125ea:	689b      	ldr	r3, [r3, #8]
   125ec:	683a      	ldr	r2, [r7, #0]
   125ee:	43d2      	mvns	r2, r2
   125f0:	401a      	ands	r2, r3
   125f2:	4b03      	ldr	r3, [pc, #12]	; (12600 <EVSYS_Handler+0x5c>)
   125f4:	609a      	str	r2, [r3, #8]
}
   125f6:	46c0      	nop			; (mov r8, r8)
   125f8:	46bd      	mov	sp, r7
   125fa:	b002      	add	sp, #8
   125fc:	bd80      	pop	{r7, pc}
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	20000000 	.word	0x20000000
   12604:	42000400 	.word	0x42000400
   12608:	0f0fffff 	.word	0x0f0fffff

0001260c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
   12612:	0002      	movs	r2, r0
   12614:	6039      	str	r1, [r7, #0]
   12616:	1dfb      	adds	r3, r7, #7
   12618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1261a:	1dfb      	adds	r3, r7, #7
   1261c:	781b      	ldrb	r3, [r3, #0]
   1261e:	2b01      	cmp	r3, #1
   12620:	d00a      	beq.n	12638 <system_apb_clock_set_mask+0x2c>
   12622:	2b02      	cmp	r3, #2
   12624:	d00f      	beq.n	12646 <system_apb_clock_set_mask+0x3a>
   12626:	2b00      	cmp	r3, #0
   12628:	d114      	bne.n	12654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1262a:	4b0e      	ldr	r3, [pc, #56]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262c:	4a0d      	ldr	r2, [pc, #52]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262e:	6991      	ldr	r1, [r2, #24]
   12630:	683a      	ldr	r2, [r7, #0]
   12632:	430a      	orrs	r2, r1
   12634:	619a      	str	r2, [r3, #24]
			break;
   12636:	e00f      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12638:	4b0a      	ldr	r3, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263a:	4a0a      	ldr	r2, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263c:	69d1      	ldr	r1, [r2, #28]
   1263e:	683a      	ldr	r2, [r7, #0]
   12640:	430a      	orrs	r2, r1
   12642:	61da      	str	r2, [r3, #28]
			break;
   12644:	e008      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12646:	4b07      	ldr	r3, [pc, #28]	; (12664 <system_apb_clock_set_mask+0x58>)
   12648:	4a06      	ldr	r2, [pc, #24]	; (12664 <system_apb_clock_set_mask+0x58>)
   1264a:	6a11      	ldr	r1, [r2, #32]
   1264c:	683a      	ldr	r2, [r7, #0]
   1264e:	430a      	orrs	r2, r1
   12650:	621a      	str	r2, [r3, #32]
			break;
   12652:	e001      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12654:	2317      	movs	r3, #23
   12656:	e000      	b.n	1265a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12658:	2300      	movs	r3, #0
}
   1265a:	0018      	movs	r0, r3
   1265c:	46bd      	mov	sp, r7
   1265e:	b002      	add	sp, #8
   12660:	bd80      	pop	{r7, pc}
   12662:	46c0      	nop			; (mov r8, r8)
   12664:	40000400 	.word	0x40000400

00012668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12668:	b580      	push	{r7, lr}
   1266a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1266c:	2102      	movs	r1, #2
   1266e:	2002      	movs	r0, #2
   12670:	4b07      	ldr	r3, [pc, #28]	; (12690 <_system_events_init+0x28>)
   12672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12674:	4b07      	ldr	r3, [pc, #28]	; (12694 <_system_events_init+0x2c>)
   12676:	2201      	movs	r2, #1
   12678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   1267a:	46c0      	nop			; (mov r8, r8)
   1267c:	4b05      	ldr	r3, [pc, #20]	; (12694 <_system_events_init+0x2c>)
   1267e:	781b      	ldrb	r3, [r3, #0]
   12680:	b2db      	uxtb	r3, r3
   12682:	001a      	movs	r2, r3
   12684:	2301      	movs	r3, #1
   12686:	4013      	ands	r3, r2
   12688:	d1f8      	bne.n	1267c <_system_events_init+0x14>
	}
}
   1268a:	46c0      	nop			; (mov r8, r8)
   1268c:	46bd      	mov	sp, r7
   1268e:	bd80      	pop	{r7, pc}
   12690:	0001260d 	.word	0x0001260d
   12694:	42000400 	.word	0x42000400

00012698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12698:	b580      	push	{r7, lr}
   1269a:	b084      	sub	sp, #16
   1269c:	af00      	add	r7, sp, #0
   1269e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   126a0:	687b      	ldr	r3, [r7, #4]
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   126a6:	68fb      	ldr	r3, [r7, #12]
   126a8:	69db      	ldr	r3, [r3, #28]
   126aa:	2207      	movs	r2, #7
   126ac:	4013      	ands	r3, r2
   126ae:	1e5a      	subs	r2, r3, #1
   126b0:	4193      	sbcs	r3, r2
   126b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   126b4:	0018      	movs	r0, r3
   126b6:	46bd      	mov	sp, r7
   126b8:	b004      	add	sp, #16
   126ba:	bd80      	pop	{r7, pc}

000126bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   126bc:	b580      	push	{r7, lr}
   126be:	b082      	sub	sp, #8
   126c0:	af00      	add	r7, sp, #0
   126c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   126c4:	46c0      	nop			; (mov r8, r8)
   126c6:	687b      	ldr	r3, [r7, #4]
   126c8:	0018      	movs	r0, r3
   126ca:	4b04      	ldr	r3, [pc, #16]	; (126dc <_i2c_master_wait_for_sync+0x20>)
   126cc:	4798      	blx	r3
   126ce:	1e03      	subs	r3, r0, #0
   126d0:	d1f9      	bne.n	126c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   126d2:	46c0      	nop			; (mov r8, r8)
   126d4:	46bd      	mov	sp, r7
   126d6:	b002      	add	sp, #8
   126d8:	bd80      	pop	{r7, pc}
   126da:	46c0      	nop			; (mov r8, r8)
   126dc:	00012699 	.word	0x00012699

000126e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   126e0:	b580      	push	{r7, lr}
   126e2:	b084      	sub	sp, #16
   126e4:	af00      	add	r7, sp, #0
   126e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	681b      	ldr	r3, [r3, #0]
   126ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   126ee:	68fb      	ldr	r3, [r7, #12]
   126f0:	681b      	ldr	r3, [r3, #0]
   126f2:	011b      	lsls	r3, r3, #4
   126f4:	0fdb      	lsrs	r3, r3, #31
   126f6:	b2db      	uxtb	r3, r3
   126f8:	001a      	movs	r2, r3
   126fa:	230b      	movs	r3, #11
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	1e51      	subs	r1, r2, #1
   12700:	418a      	sbcs	r2, r1
   12702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12704:	2308      	movs	r3, #8
   12706:	18fb      	adds	r3, r7, r3
   12708:	687a      	ldr	r2, [r7, #4]
   1270a:	8b52      	ldrh	r2, [r2, #26]
   1270c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1270e:	687b      	ldr	r3, [r7, #4]
   12710:	8b9b      	ldrh	r3, [r3, #28]
   12712:	b29a      	uxth	r2, r3
   12714:	2308      	movs	r3, #8
   12716:	18fb      	adds	r3, r7, r3
   12718:	2108      	movs	r1, #8
   1271a:	1879      	adds	r1, r7, r1
   1271c:	8809      	ldrh	r1, [r1, #0]
   1271e:	1a8a      	subs	r2, r1, r2
   12720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	8b9b      	ldrh	r3, [r3, #28]
   12726:	b29b      	uxth	r3, r3
   12728:	3b01      	subs	r3, #1
   1272a:	b29a      	uxth	r2, r3
   1272c:	687b      	ldr	r3, [r7, #4]
   1272e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12730:	230b      	movs	r3, #11
   12732:	18fb      	adds	r3, r7, r3
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	2b00      	cmp	r3, #0
   12738:	d010      	beq.n	1275c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1273a:	687b      	ldr	r3, [r7, #4]
   1273c:	7adb      	ldrb	r3, [r3, #11]
   1273e:	2b00      	cmp	r3, #0
   12740:	d01c      	beq.n	1277c <_i2c_master_read+0x9c>
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	8b9b      	ldrh	r3, [r3, #28]
   12746:	b29b      	uxth	r3, r3
   12748:	2b01      	cmp	r3, #1
   1274a:	d117      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1274c:	68fb      	ldr	r3, [r7, #12]
   1274e:	685b      	ldr	r3, [r3, #4]
   12750:	2280      	movs	r2, #128	; 0x80
   12752:	02d2      	lsls	r2, r2, #11
   12754:	431a      	orrs	r2, r3
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	605a      	str	r2, [r3, #4]
   1275a:	e00f      	b.n	1277c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1275c:	687b      	ldr	r3, [r7, #4]
   1275e:	7adb      	ldrb	r3, [r3, #11]
   12760:	2b00      	cmp	r3, #0
   12762:	d00b      	beq.n	1277c <_i2c_master_read+0x9c>
   12764:	687b      	ldr	r3, [r7, #4]
   12766:	8b9b      	ldrh	r3, [r3, #28]
   12768:	b29b      	uxth	r3, r3
   1276a:	2b00      	cmp	r3, #0
   1276c:	d106      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1276e:	68fb      	ldr	r3, [r7, #12]
   12770:	685b      	ldr	r3, [r3, #4]
   12772:	2280      	movs	r2, #128	; 0x80
   12774:	02d2      	lsls	r2, r2, #11
   12776:	431a      	orrs	r2, r3
   12778:	68fb      	ldr	r3, [r7, #12]
   1277a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   1277c:	687b      	ldr	r3, [r7, #4]
   1277e:	8b9b      	ldrh	r3, [r3, #28]
   12780:	b29b      	uxth	r3, r3
   12782:	2b00      	cmp	r3, #0
   12784:	d10e      	bne.n	127a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12786:	687b      	ldr	r3, [r7, #4]
   12788:	7a9b      	ldrb	r3, [r3, #10]
   1278a:	2b00      	cmp	r3, #0
   1278c:	d00a      	beq.n	127a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	0018      	movs	r0, r3
   12792:	4b0e      	ldr	r3, [pc, #56]	; (127cc <_i2c_master_read+0xec>)
   12794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12796:	68fb      	ldr	r3, [r7, #12]
   12798:	685b      	ldr	r3, [r3, #4]
   1279a:	22c0      	movs	r2, #192	; 0xc0
   1279c:	0292      	lsls	r2, r2, #10
   1279e:	431a      	orrs	r2, r3
   127a0:	68fb      	ldr	r3, [r7, #12]
   127a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   127a4:	687b      	ldr	r3, [r7, #4]
   127a6:	0018      	movs	r0, r3
   127a8:	4b08      	ldr	r3, [pc, #32]	; (127cc <_i2c_master_read+0xec>)
   127aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   127ac:	687b      	ldr	r3, [r7, #4]
   127ae:	6a1a      	ldr	r2, [r3, #32]
   127b0:	2308      	movs	r3, #8
   127b2:	18fb      	adds	r3, r7, r3
   127b4:	881b      	ldrh	r3, [r3, #0]
   127b6:	18d3      	adds	r3, r2, r3
   127b8:	68fa      	ldr	r2, [r7, #12]
   127ba:	2128      	movs	r1, #40	; 0x28
   127bc:	5c52      	ldrb	r2, [r2, r1]
   127be:	b2d2      	uxtb	r2, r2
   127c0:	701a      	strb	r2, [r3, #0]
}
   127c2:	46c0      	nop			; (mov r8, r8)
   127c4:	46bd      	mov	sp, r7
   127c6:	b004      	add	sp, #16
   127c8:	bd80      	pop	{r7, pc}
   127ca:	46c0      	nop			; (mov r8, r8)
   127cc:	000126bd 	.word	0x000126bd

000127d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   127d0:	b580      	push	{r7, lr}
   127d2:	b084      	sub	sp, #16
   127d4:	af00      	add	r7, sp, #0
   127d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127d8:	687b      	ldr	r3, [r7, #4]
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   127de:	68fb      	ldr	r3, [r7, #12]
   127e0:	8b5b      	ldrh	r3, [r3, #26]
   127e2:	b29b      	uxth	r3, r3
   127e4:	001a      	movs	r2, r3
   127e6:	2304      	movs	r3, #4
   127e8:	4013      	ands	r3, r2
   127ea:	d004      	beq.n	127f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	2225      	movs	r2, #37	; 0x25
   127f0:	211e      	movs	r1, #30
   127f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   127f4:	e024      	b.n	12840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   127f6:	230a      	movs	r3, #10
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	687a      	ldr	r2, [r7, #4]
   127fc:	8b52      	ldrh	r2, [r2, #26]
   127fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12800:	687b      	ldr	r3, [r7, #4]
   12802:	8b9b      	ldrh	r3, [r3, #28]
   12804:	b29a      	uxth	r2, r3
   12806:	230a      	movs	r3, #10
   12808:	18fb      	adds	r3, r7, r3
   1280a:	210a      	movs	r1, #10
   1280c:	1879      	adds	r1, r7, r1
   1280e:	8809      	ldrh	r1, [r1, #0]
   12810:	1a8a      	subs	r2, r1, r2
   12812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	8b9b      	ldrh	r3, [r3, #28]
   12818:	b29b      	uxth	r3, r3
   1281a:	3b01      	subs	r3, #1
   1281c:	b29a      	uxth	r2, r3
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   12822:	687b      	ldr	r3, [r7, #4]
   12824:	0018      	movs	r0, r3
   12826:	4b08      	ldr	r3, [pc, #32]	; (12848 <_i2c_master_write+0x78>)
   12828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1282a:	687b      	ldr	r3, [r7, #4]
   1282c:	6a1a      	ldr	r2, [r3, #32]
   1282e:	230a      	movs	r3, #10
   12830:	18fb      	adds	r3, r7, r3
   12832:	881b      	ldrh	r3, [r3, #0]
   12834:	18d3      	adds	r3, r2, r3
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	b2d9      	uxtb	r1, r3
   1283a:	68fb      	ldr	r3, [r7, #12]
   1283c:	2228      	movs	r2, #40	; 0x28
   1283e:	5499      	strb	r1, [r3, r2]
}
   12840:	46bd      	mov	sp, r7
   12842:	b004      	add	sp, #16
   12844:	bd80      	pop	{r7, pc}
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	000126bd 	.word	0x000126bd

0001284c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   1284c:	b580      	push	{r7, lr}
   1284e:	b084      	sub	sp, #16
   12850:	af00      	add	r7, sp, #0
   12852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	681b      	ldr	r3, [r3, #0]
   12858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   1285a:	68fb      	ldr	r3, [r7, #12]
   1285c:	7e1b      	ldrb	r3, [r3, #24]
   1285e:	b2db      	uxtb	r3, r3
   12860:	001a      	movs	r2, r3
   12862:	2301      	movs	r3, #1
   12864:	4013      	ands	r3, r2
   12866:	d02b      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   12868:	68fb      	ldr	r3, [r7, #12]
   1286a:	2201      	movs	r2, #1
   1286c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	8b5b      	ldrh	r3, [r3, #26]
   12872:	b29b      	uxth	r3, r3
   12874:	001a      	movs	r2, r3
   12876:	2302      	movs	r3, #2
   12878:	4013      	ands	r3, r2
   1287a:	d004      	beq.n	12886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   1287c:	687b      	ldr	r3, [r7, #4]
   1287e:	2225      	movs	r2, #37	; 0x25
   12880:	2141      	movs	r1, #65	; 0x41
   12882:	5499      	strb	r1, [r3, r2]
   12884:	e01c      	b.n	128c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12886:	68fb      	ldr	r3, [r7, #12]
   12888:	8b5b      	ldrh	r3, [r3, #26]
   1288a:	b29b      	uxth	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2304      	movs	r3, #4
   12890:	4013      	ands	r3, r2
   12892:	d015      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	2225      	movs	r2, #37	; 0x25
   12898:	2118      	movs	r1, #24
   1289a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	2200      	movs	r2, #0
   128a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   128a2:	687b      	ldr	r3, [r7, #4]
   128a4:	7a9b      	ldrb	r3, [r3, #10]
   128a6:	2b00      	cmp	r3, #0
   128a8:	d00a      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	0018      	movs	r0, r3
   128ae:	4b13      	ldr	r3, [pc, #76]	; (128fc <_i2c_master_async_address_response+0xb0>)
   128b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	685b      	ldr	r3, [r3, #4]
   128b6:	22c0      	movs	r2, #192	; 0xc0
   128b8:	0292      	lsls	r2, r2, #10
   128ba:	431a      	orrs	r2, r3
   128bc:	68fb      	ldr	r3, [r7, #12]
   128be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	8b9b      	ldrh	r3, [r3, #28]
   128c4:	b29a      	uxth	r2, r3
   128c6:	687b      	ldr	r3, [r7, #4]
   128c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   128ca:	687b      	ldr	r3, [r7, #4]
   128cc:	2225      	movs	r2, #37	; 0x25
   128ce:	5c9b      	ldrb	r3, [r3, r2]
   128d0:	b2db      	uxtb	r3, r3
   128d2:	2b05      	cmp	r3, #5
   128d4:	d10e      	bne.n	128f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   128d6:	687b      	ldr	r3, [r7, #4]
   128d8:	2224      	movs	r2, #36	; 0x24
   128da:	5c9b      	ldrb	r3, [r3, r2]
   128dc:	b2db      	uxtb	r3, r3
   128de:	2b00      	cmp	r3, #0
   128e0:	d104      	bne.n	128ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   128e2:	687b      	ldr	r3, [r7, #4]
   128e4:	0018      	movs	r0, r3
   128e6:	4b06      	ldr	r3, [pc, #24]	; (12900 <_i2c_master_async_address_response+0xb4>)
   128e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   128ea:	e003      	b.n	128f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	0018      	movs	r0, r3
   128f0:	4b04      	ldr	r3, [pc, #16]	; (12904 <_i2c_master_async_address_response+0xb8>)
   128f2:	4798      	blx	r3
}
   128f4:	46c0      	nop			; (mov r8, r8)
   128f6:	46bd      	mov	sp, r7
   128f8:	b004      	add	sp, #16
   128fa:	bd80      	pop	{r7, pc}
   128fc:	000126bd 	.word	0x000126bd
   12900:	000127d1 	.word	0x000127d1
   12904:	000126e1 	.word	0x000126e1

00012908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   12908:	b580      	push	{r7, lr}
   1290a:	b084      	sub	sp, #16
   1290c:	af00      	add	r7, sp, #0
   1290e:	60f8      	str	r0, [r7, #12]
   12910:	60b9      	str	r1, [r7, #8]
   12912:	1dfb      	adds	r3, r7, #7
   12914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	68fa      	ldr	r2, [r7, #12]
   1291c:	3302      	adds	r3, #2
   1291e:	009b      	lsls	r3, r3, #2
   12920:	18d3      	adds	r3, r2, r3
   12922:	3304      	adds	r3, #4
   12924:	68ba      	ldr	r2, [r7, #8]
   12926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	7e1b      	ldrb	r3, [r3, #24]
   1292c:	b2db      	uxtb	r3, r3
   1292e:	b25a      	sxtb	r2, r3
   12930:	1dfb      	adds	r3, r7, #7
   12932:	781b      	ldrb	r3, [r3, #0]
   12934:	2101      	movs	r1, #1
   12936:	4099      	lsls	r1, r3
   12938:	000b      	movs	r3, r1
   1293a:	b25b      	sxtb	r3, r3
   1293c:	4313      	orrs	r3, r2
   1293e:	b25b      	sxtb	r3, r3
   12940:	b2da      	uxtb	r2, r3
   12942:	68fb      	ldr	r3, [r7, #12]
   12944:	761a      	strb	r2, [r3, #24]
}
   12946:	46c0      	nop			; (mov r8, r8)
   12948:	46bd      	mov	sp, r7
   1294a:	b004      	add	sp, #16
   1294c:	bd80      	pop	{r7, pc}
	...

00012950 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12950:	b590      	push	{r4, r7, lr}
   12952:	b087      	sub	sp, #28
   12954:	af00      	add	r7, sp, #0
   12956:	6078      	str	r0, [r7, #4]
   12958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1295a:	687b      	ldr	r3, [r7, #4]
   1295c:	681b      	ldr	r3, [r3, #0]
   1295e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   12960:	683b      	ldr	r3, [r7, #0]
   12962:	685a      	ldr	r2, [r3, #4]
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12968:	683b      	ldr	r3, [r7, #0]
   1296a:	885a      	ldrh	r2, [r3, #2]
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12970:	687b      	ldr	r3, [r7, #4]
   12972:	2224      	movs	r2, #36	; 0x24
   12974:	2101      	movs	r1, #1
   12976:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	2225      	movs	r2, #37	; 0x25
   1297c:	2105      	movs	r1, #5
   1297e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12980:	693b      	ldr	r3, [r7, #16]
   12982:	681b      	ldr	r3, [r3, #0]
   12984:	011b      	lsls	r3, r3, #4
   12986:	0fdb      	lsrs	r3, r3, #31
   12988:	b2db      	uxtb	r3, r3
   1298a:	001a      	movs	r2, r3
   1298c:	230f      	movs	r3, #15
   1298e:	18fb      	adds	r3, r7, r3
   12990:	1e51      	subs	r1, r2, #1
   12992:	418a      	sbcs	r2, r1
   12994:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12996:	683b      	ldr	r3, [r7, #0]
   12998:	7a5b      	ldrb	r3, [r3, #9]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d006      	beq.n	129ac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1299e:	683b      	ldr	r3, [r7, #0]
   129a0:	7a9a      	ldrb	r2, [r3, #10]
   129a2:	687b      	ldr	r3, [r7, #4]
   129a4:	0011      	movs	r1, r2
   129a6:	0018      	movs	r0, r3
   129a8:	4b3b      	ldr	r3, [pc, #236]	; (12a98 <_i2c_master_read_packet+0x148>)
   129aa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d00b      	beq.n	129ce <_i2c_master_read_packet+0x7e>
   129b6:	683b      	ldr	r3, [r7, #0]
   129b8:	885b      	ldrh	r3, [r3, #2]
   129ba:	2b01      	cmp	r3, #1
   129bc:	d107      	bne.n	129ce <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   129be:	693b      	ldr	r3, [r7, #16]
   129c0:	685b      	ldr	r3, [r3, #4]
   129c2:	2280      	movs	r2, #128	; 0x80
   129c4:	02d2      	lsls	r2, r2, #11
   129c6:	431a      	orrs	r2, r3
   129c8:	693b      	ldr	r3, [r7, #16]
   129ca:	605a      	str	r2, [r3, #4]
   129cc:	e005      	b.n	129da <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   129ce:	693b      	ldr	r3, [r7, #16]
   129d0:	685b      	ldr	r3, [r3, #4]
   129d2:	4a32      	ldr	r2, [pc, #200]	; (12a9c <_i2c_master_read_packet+0x14c>)
   129d4:	401a      	ands	r2, r3
   129d6:	693b      	ldr	r3, [r7, #16]
   129d8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   129da:	683b      	ldr	r3, [r7, #0]
   129dc:	7a1b      	ldrb	r3, [r3, #8]
   129de:	2b00      	cmp	r3, #0
   129e0:	d045      	beq.n	12a6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   129e2:	683b      	ldr	r3, [r7, #0]
   129e4:	881b      	ldrh	r3, [r3, #0]
   129e6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129e8:	683b      	ldr	r3, [r7, #0]
   129ea:	7a5b      	ldrb	r3, [r3, #9]
   129ec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   129ee:	4313      	orrs	r3, r2
   129f0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129f2:	2380      	movs	r3, #128	; 0x80
   129f4:	021b      	lsls	r3, r3, #8
   129f6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   129f8:	693b      	ldr	r3, [r7, #16]
   129fa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   129fc:	2317      	movs	r3, #23
   129fe:	18fc      	adds	r4, r7, r3
   12a00:	687b      	ldr	r3, [r7, #4]
   12a02:	0018      	movs	r0, r3
   12a04:	4b26      	ldr	r3, [pc, #152]	; (12aa0 <_i2c_master_read_packet+0x150>)
   12a06:	4798      	blx	r3
   12a08:	0003      	movs	r3, r0
   12a0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12a0c:	693b      	ldr	r3, [r7, #16]
   12a0e:	685b      	ldr	r3, [r3, #4]
   12a10:	4a22      	ldr	r2, [pc, #136]	; (12a9c <_i2c_master_read_packet+0x14c>)
   12a12:	401a      	ands	r2, r3
   12a14:	693b      	ldr	r3, [r7, #16]
   12a16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   12a18:	2317      	movs	r3, #23
   12a1a:	18fb      	adds	r3, r7, r3
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d107      	bne.n	12a32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   12a22:	2317      	movs	r3, #23
   12a24:	18fc      	adds	r4, r7, r3
   12a26:	687b      	ldr	r3, [r7, #4]
   12a28:	0018      	movs	r0, r3
   12a2a:	4b1e      	ldr	r3, [pc, #120]	; (12aa4 <_i2c_master_read_packet+0x154>)
   12a2c:	4798      	blx	r3
   12a2e:	0003      	movs	r3, r0
   12a30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   12a32:	2317      	movs	r3, #23
   12a34:	18fb      	adds	r3, r7, r3
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d114      	bne.n	12a66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   12a3c:	693b      	ldr	r3, [r7, #16]
   12a3e:	2203      	movs	r2, #3
   12a40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a42:	683b      	ldr	r3, [r7, #0]
   12a44:	881b      	ldrh	r3, [r3, #0]
   12a46:	0a1b      	lsrs	r3, r3, #8
   12a48:	b29b      	uxth	r3, r3
   12a4a:	2278      	movs	r2, #120	; 0x78
   12a4c:	4313      	orrs	r3, r2
   12a4e:	b29b      	uxth	r3, r3
   12a50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a52:	683b      	ldr	r3, [r7, #0]
   12a54:	7a5b      	ldrb	r3, [r3, #9]
   12a56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a5a:	2201      	movs	r2, #1
   12a5c:	4313      	orrs	r3, r2
   12a5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a60:	693b      	ldr	r3, [r7, #16]
   12a62:	625a      	str	r2, [r3, #36]	; 0x24
   12a64:	e012      	b.n	12a8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   12a66:	2317      	movs	r3, #23
   12a68:	18fb      	adds	r3, r7, r3
   12a6a:	781b      	ldrb	r3, [r3, #0]
   12a6c:	e00f      	b.n	12a8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   12a6e:	693b      	ldr	r3, [r7, #16]
   12a70:	2203      	movs	r2, #3
   12a72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a74:	683b      	ldr	r3, [r7, #0]
   12a76:	881b      	ldrh	r3, [r3, #0]
   12a78:	005b      	lsls	r3, r3, #1
   12a7a:	2201      	movs	r2, #1
   12a7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12a7e:	683b      	ldr	r3, [r7, #0]
   12a80:	7a5b      	ldrb	r3, [r3, #9]
   12a82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a84:	4313      	orrs	r3, r2
   12a86:	001a      	movs	r2, r3
   12a88:	693b      	ldr	r3, [r7, #16]
   12a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12a8c:	2300      	movs	r3, #0
}
   12a8e:	0018      	movs	r0, r3
   12a90:	46bd      	mov	sp, r7
   12a92:	b007      	add	sp, #28
   12a94:	bd90      	pop	{r4, r7, pc}
   12a96:	46c0      	nop			; (mov r8, r8)
   12a98:	00017a25 	.word	0x00017a25
   12a9c:	fffbffff 	.word	0xfffbffff
   12aa0:	000179c7 	.word	0x000179c7
   12aa4:	00017969 	.word	0x00017969

00012aa8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12aa8:	b580      	push	{r7, lr}
   12aaa:	b082      	sub	sp, #8
   12aac:	af00      	add	r7, sp, #0
   12aae:	6078      	str	r0, [r7, #4]
   12ab0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   12ab2:	687b      	ldr	r3, [r7, #4]
   12ab4:	8b9b      	ldrh	r3, [r3, #28]
   12ab6:	b29b      	uxth	r3, r3
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d001      	beq.n	12ac0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   12abc:	2305      	movs	r3, #5
   12abe:	e00c      	b.n	12ada <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   12ac0:	687b      	ldr	r3, [r7, #4]
   12ac2:	2201      	movs	r2, #1
   12ac4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	2201      	movs	r2, #1
   12aca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   12acc:	683a      	ldr	r2, [r7, #0]
   12ace:	687b      	ldr	r3, [r7, #4]
   12ad0:	0011      	movs	r1, r2
   12ad2:	0018      	movs	r0, r3
   12ad4:	4b03      	ldr	r3, [pc, #12]	; (12ae4 <i2c_master_read_packet_job+0x3c>)
   12ad6:	4798      	blx	r3
   12ad8:	0003      	movs	r3, r0
}
   12ada:	0018      	movs	r0, r3
   12adc:	46bd      	mov	sp, r7
   12ade:	b002      	add	sp, #8
   12ae0:	bd80      	pop	{r7, pc}
   12ae2:	46c0      	nop			; (mov r8, r8)
   12ae4:	00012951 	.word	0x00012951

00012ae8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12ae8:	b580      	push	{r7, lr}
   12aea:	b084      	sub	sp, #16
   12aec:	af00      	add	r7, sp, #0
   12aee:	6078      	str	r0, [r7, #4]
   12af0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12af8:	683b      	ldr	r3, [r7, #0]
   12afa:	7a5b      	ldrb	r3, [r3, #9]
   12afc:	2b00      	cmp	r3, #0
   12afe:	d006      	beq.n	12b0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12b00:	683b      	ldr	r3, [r7, #0]
   12b02:	7a9a      	ldrb	r2, [r3, #10]
   12b04:	687b      	ldr	r3, [r7, #4]
   12b06:	0011      	movs	r1, r2
   12b08:	0018      	movs	r0, r3
   12b0a:	4b1e      	ldr	r3, [pc, #120]	; (12b84 <_i2c_master_write_packet+0x9c>)
   12b0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12b0e:	68fb      	ldr	r3, [r7, #12]
   12b10:	685b      	ldr	r3, [r3, #4]
   12b12:	4a1d      	ldr	r2, [pc, #116]	; (12b88 <_i2c_master_write_packet+0xa0>)
   12b14:	401a      	ands	r2, r3
   12b16:	68fb      	ldr	r3, [r7, #12]
   12b18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   12b1a:	683b      	ldr	r3, [r7, #0]
   12b1c:	685a      	ldr	r2, [r3, #4]
   12b1e:	687b      	ldr	r3, [r7, #4]
   12b20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12b22:	683b      	ldr	r3, [r7, #0]
   12b24:	885a      	ldrh	r2, [r3, #2]
   12b26:	687b      	ldr	r3, [r7, #4]
   12b28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   12b2a:	687b      	ldr	r3, [r7, #4]
   12b2c:	2224      	movs	r2, #36	; 0x24
   12b2e:	2100      	movs	r1, #0
   12b30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12b32:	687b      	ldr	r3, [r7, #4]
   12b34:	2225      	movs	r2, #37	; 0x25
   12b36:	2105      	movs	r1, #5
   12b38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12b3a:	68fb      	ldr	r3, [r7, #12]
   12b3c:	2203      	movs	r2, #3
   12b3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12b40:	683b      	ldr	r3, [r7, #0]
   12b42:	7a1b      	ldrb	r3, [r3, #8]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d00d      	beq.n	12b64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b48:	683b      	ldr	r3, [r7, #0]
   12b4a:	881b      	ldrh	r3, [r3, #0]
   12b4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b4e:	683b      	ldr	r3, [r7, #0]
   12b50:	7a5b      	ldrb	r3, [r3, #9]
   12b52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b54:	4313      	orrs	r3, r2
   12b56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b58:	2380      	movs	r3, #128	; 0x80
   12b5a:	021b      	lsls	r3, r3, #8
   12b5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b5e:	68fb      	ldr	r3, [r7, #12]
   12b60:	625a      	str	r2, [r3, #36]	; 0x24
   12b62:	e009      	b.n	12b78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b64:	683b      	ldr	r3, [r7, #0]
   12b66:	881b      	ldrh	r3, [r3, #0]
   12b68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12b6a:	683b      	ldr	r3, [r7, #0]
   12b6c:	7a5b      	ldrb	r3, [r3, #9]
   12b6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b70:	4313      	orrs	r3, r2
   12b72:	001a      	movs	r2, r3
   12b74:	68fb      	ldr	r3, [r7, #12]
   12b76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12b78:	2300      	movs	r3, #0
}
   12b7a:	0018      	movs	r0, r3
   12b7c:	46bd      	mov	sp, r7
   12b7e:	b004      	add	sp, #16
   12b80:	bd80      	pop	{r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	00017a25 	.word	0x00017a25
   12b88:	fffbffff 	.word	0xfffbffff

00012b8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12b8c:	b580      	push	{r7, lr}
   12b8e:	b082      	sub	sp, #8
   12b90:	af00      	add	r7, sp, #0
   12b92:	6078      	str	r0, [r7, #4]
   12b94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12b96:	687b      	ldr	r3, [r7, #4]
   12b98:	8b9b      	ldrh	r3, [r3, #28]
   12b9a:	b29b      	uxth	r3, r3
   12b9c:	2b00      	cmp	r3, #0
   12b9e:	d001      	beq.n	12ba4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   12ba0:	2305      	movs	r3, #5
   12ba2:	e00c      	b.n	12bbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12ba4:	687b      	ldr	r3, [r7, #4]
   12ba6:	2201      	movs	r2, #1
   12ba8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	2201      	movs	r2, #1
   12bae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   12bb0:	683a      	ldr	r2, [r7, #0]
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	0011      	movs	r1, r2
   12bb6:	0018      	movs	r0, r3
   12bb8:	4b03      	ldr	r3, [pc, #12]	; (12bc8 <i2c_master_write_packet_job+0x3c>)
   12bba:	4798      	blx	r3
   12bbc:	0003      	movs	r3, r0
}
   12bbe:	0018      	movs	r0, r3
   12bc0:	46bd      	mov	sp, r7
   12bc2:	b002      	add	sp, #8
   12bc4:	bd80      	pop	{r7, pc}
   12bc6:	46c0      	nop			; (mov r8, r8)
   12bc8:	00012ae9 	.word	0x00012ae9

00012bcc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12bcc:	b580      	push	{r7, lr}
   12bce:	b086      	sub	sp, #24
   12bd0:	af00      	add	r7, sp, #0
   12bd2:	0002      	movs	r2, r0
   12bd4:	1dfb      	adds	r3, r7, #7
   12bd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   12bd8:	1dfb      	adds	r3, r7, #7
   12bda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   12bdc:	4b93      	ldr	r3, [pc, #588]	; (12e2c <_i2c_master_interrupt_handler+0x260>)
   12bde:	0092      	lsls	r2, r2, #2
   12be0:	58d3      	ldr	r3, [r2, r3]
   12be2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12be4:	697b      	ldr	r3, [r7, #20]
   12be6:	681b      	ldr	r3, [r3, #0]
   12be8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12bea:	693b      	ldr	r3, [r7, #16]
   12bec:	681b      	ldr	r3, [r3, #0]
   12bee:	011b      	lsls	r3, r3, #4
   12bf0:	0fdb      	lsrs	r3, r3, #31
   12bf2:	b2db      	uxtb	r3, r3
   12bf4:	001a      	movs	r2, r3
   12bf6:	230f      	movs	r3, #15
   12bf8:	18fb      	adds	r3, r7, r3
   12bfa:	1e51      	subs	r1, r2, #1
   12bfc:	418a      	sbcs	r2, r1
   12bfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12c00:	230e      	movs	r3, #14
   12c02:	18fb      	adds	r3, r7, r3
   12c04:	697a      	ldr	r2, [r7, #20]
   12c06:	7e52      	ldrb	r2, [r2, #25]
   12c08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   12c0a:	697b      	ldr	r3, [r7, #20]
   12c0c:	7e1b      	ldrb	r3, [r3, #24]
   12c0e:	b2da      	uxtb	r2, r3
   12c10:	230e      	movs	r3, #14
   12c12:	18fb      	adds	r3, r7, r3
   12c14:	210e      	movs	r1, #14
   12c16:	1879      	adds	r1, r7, r1
   12c18:	7809      	ldrb	r1, [r1, #0]
   12c1a:	400a      	ands	r2, r1
   12c1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   12c1e:	697b      	ldr	r3, [r7, #20]
   12c20:	8b5b      	ldrh	r3, [r3, #26]
   12c22:	b29b      	uxth	r3, r3
   12c24:	2b00      	cmp	r3, #0
   12c26:	d109      	bne.n	12c3c <_i2c_master_interrupt_handler+0x70>
   12c28:	697b      	ldr	r3, [r7, #20]
   12c2a:	8b9b      	ldrh	r3, [r3, #28]
   12c2c:	b29b      	uxth	r3, r3
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d004      	beq.n	12c3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   12c32:	697b      	ldr	r3, [r7, #20]
   12c34:	0018      	movs	r0, r3
   12c36:	4b7e      	ldr	r3, [pc, #504]	; (12e30 <_i2c_master_interrupt_handler+0x264>)
   12c38:	4798      	blx	r3
   12c3a:	e070      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c3c:	697b      	ldr	r3, [r7, #20]
   12c3e:	8b5b      	ldrh	r3, [r3, #26]
   12c40:	b29b      	uxth	r3, r3
   12c42:	2b00      	cmp	r3, #0
   12c44:	d039      	beq.n	12cba <_i2c_master_interrupt_handler+0xee>
   12c46:	697b      	ldr	r3, [r7, #20]
   12c48:	8b9b      	ldrh	r3, [r3, #28]
   12c4a:	b29b      	uxth	r3, r3
   12c4c:	2b00      	cmp	r3, #0
   12c4e:	d134      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   12c50:	697b      	ldr	r3, [r7, #20]
   12c52:	2225      	movs	r2, #37	; 0x25
   12c54:	5c9b      	ldrb	r3, [r3, r2]
   12c56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c58:	2b05      	cmp	r3, #5
   12c5a:	d12e      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12c5c:	697b      	ldr	r3, [r7, #20]
   12c5e:	2224      	movs	r2, #36	; 0x24
   12c60:	5c9b      	ldrb	r3, [r3, r2]
   12c62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12c64:	2b00      	cmp	r3, #0
   12c66:	d128      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12c68:	693b      	ldr	r3, [r7, #16]
   12c6a:	2203      	movs	r2, #3
   12c6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12c6e:	697b      	ldr	r3, [r7, #20]
   12c70:	2200      	movs	r2, #0
   12c72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12c74:	697b      	ldr	r3, [r7, #20]
   12c76:	2225      	movs	r2, #37	; 0x25
   12c78:	2100      	movs	r1, #0
   12c7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   12c7c:	697b      	ldr	r3, [r7, #20]
   12c7e:	7a9b      	ldrb	r3, [r3, #10]
   12c80:	2b00      	cmp	r3, #0
   12c82:	d00b      	beq.n	12c9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12c84:	697b      	ldr	r3, [r7, #20]
   12c86:	0018      	movs	r0, r3
   12c88:	4b6a      	ldr	r3, [pc, #424]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12c8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12c8c:	693b      	ldr	r3, [r7, #16]
   12c8e:	685b      	ldr	r3, [r3, #4]
   12c90:	22c0      	movs	r2, #192	; 0xc0
   12c92:	0292      	lsls	r2, r2, #10
   12c94:	431a      	orrs	r2, r3
   12c96:	693b      	ldr	r3, [r7, #16]
   12c98:	605a      	str	r2, [r3, #4]
   12c9a:	e002      	b.n	12ca2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12c9c:	693b      	ldr	r3, [r7, #16]
   12c9e:	2201      	movs	r2, #1
   12ca0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12ca2:	230e      	movs	r3, #14
   12ca4:	18fb      	adds	r3, r7, r3
   12ca6:	781b      	ldrb	r3, [r3, #0]
   12ca8:	2201      	movs	r2, #1
   12caa:	4013      	ands	r3, r2
   12cac:	d037      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12cae:	697b      	ldr	r3, [r7, #20]
   12cb0:	68db      	ldr	r3, [r3, #12]
   12cb2:	697a      	ldr	r2, [r7, #20]
   12cb4:	0010      	movs	r0, r2
   12cb6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12cb8:	e031      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12cba:	697b      	ldr	r3, [r7, #20]
   12cbc:	8b5b      	ldrh	r3, [r3, #26]
   12cbe:	b29b      	uxth	r3, r3
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	d02c      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
   12cc4:	697b      	ldr	r3, [r7, #20]
   12cc6:	8b9b      	ldrh	r3, [r3, #28]
   12cc8:	b29b      	uxth	r3, r3
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d027      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12cce:	693b      	ldr	r3, [r7, #16]
   12cd0:	8b5b      	ldrh	r3, [r3, #26]
   12cd2:	b29b      	uxth	r3, r3
   12cd4:	001a      	movs	r2, r3
   12cd6:	2320      	movs	r3, #32
   12cd8:	4013      	ands	r3, r2
   12cda:	d111      	bne.n	12d00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cdc:	230f      	movs	r3, #15
   12cde:	18fb      	adds	r3, r7, r3
   12ce0:	781b      	ldrb	r3, [r3, #0]
   12ce2:	2201      	movs	r2, #1
   12ce4:	4053      	eors	r3, r2
   12ce6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d104      	bne.n	12cf6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cec:	697b      	ldr	r3, [r7, #20]
   12cee:	8b9b      	ldrh	r3, [r3, #28]
   12cf0:	b29b      	uxth	r3, r3
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d004      	beq.n	12d00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   12cf6:	697b      	ldr	r3, [r7, #20]
   12cf8:	2225      	movs	r2, #37	; 0x25
   12cfa:	2141      	movs	r1, #65	; 0x41
   12cfc:	5499      	strb	r1, [r3, r2]
   12cfe:	e00e      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12d00:	697b      	ldr	r3, [r7, #20]
   12d02:	2224      	movs	r2, #36	; 0x24
   12d04:	5c9b      	ldrb	r3, [r3, r2]
   12d06:	b2db      	uxtb	r3, r3
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d104      	bne.n	12d16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   12d0c:	697b      	ldr	r3, [r7, #20]
   12d0e:	0018      	movs	r0, r3
   12d10:	4b49      	ldr	r3, [pc, #292]	; (12e38 <_i2c_master_interrupt_handler+0x26c>)
   12d12:	4798      	blx	r3
   12d14:	e003      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   12d16:	697b      	ldr	r3, [r7, #20]
   12d18:	0018      	movs	r0, r3
   12d1a:	4b48      	ldr	r3, [pc, #288]	; (12e3c <_i2c_master_interrupt_handler+0x270>)
   12d1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d1e:	697b      	ldr	r3, [r7, #20]
   12d20:	8b5b      	ldrh	r3, [r3, #26]
   12d22:	b29b      	uxth	r3, r3
   12d24:	2b00      	cmp	r3, #0
   12d26:	d047      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
   12d28:	697b      	ldr	r3, [r7, #20]
   12d2a:	8b9b      	ldrh	r3, [r3, #28]
   12d2c:	b29b      	uxth	r3, r3
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d142      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   12d32:	697b      	ldr	r3, [r7, #20]
   12d34:	2225      	movs	r2, #37	; 0x25
   12d36:	5c9b      	ldrb	r3, [r3, r2]
   12d38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d3a:	2b05      	cmp	r3, #5
   12d3c:	d13c      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12d3e:	697b      	ldr	r3, [r7, #20]
   12d40:	2224      	movs	r2, #36	; 0x24
   12d42:	5c9b      	ldrb	r3, [r3, r2]
   12d44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12d46:	2b01      	cmp	r3, #1
   12d48:	d136      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12d4a:	693b      	ldr	r3, [r7, #16]
   12d4c:	7e1b      	ldrb	r3, [r3, #24]
   12d4e:	b2db      	uxtb	r3, r3
   12d50:	001a      	movs	r2, r3
   12d52:	2302      	movs	r3, #2
   12d54:	4013      	ands	r3, r2
   12d56:	d002      	beq.n	12d5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12d58:	693b      	ldr	r3, [r7, #16]
   12d5a:	2202      	movs	r2, #2
   12d5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12d5e:	693b      	ldr	r3, [r7, #16]
   12d60:	2203      	movs	r2, #3
   12d62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   12d64:	697b      	ldr	r3, [r7, #20]
   12d66:	2200      	movs	r2, #0
   12d68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12d6a:	697b      	ldr	r3, [r7, #20]
   12d6c:	2225      	movs	r2, #37	; 0x25
   12d6e:	2100      	movs	r1, #0
   12d70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12d72:	230e      	movs	r3, #14
   12d74:	18fb      	adds	r3, r7, r3
   12d76:	781b      	ldrb	r3, [r3, #0]
   12d78:	2202      	movs	r2, #2
   12d7a:	4013      	ands	r3, r2
   12d7c:	d00b      	beq.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12d7e:	697b      	ldr	r3, [r7, #20]
   12d80:	2224      	movs	r2, #36	; 0x24
   12d82:	5c9b      	ldrb	r3, [r3, r2]
   12d84:	b2db      	uxtb	r3, r3
   12d86:	2b01      	cmp	r3, #1
   12d88:	d105      	bne.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12d8a:	697b      	ldr	r3, [r7, #20]
   12d8c:	691b      	ldr	r3, [r3, #16]
   12d8e:	697a      	ldr	r2, [r7, #20]
   12d90:	0010      	movs	r0, r2
   12d92:	4798      	blx	r3
   12d94:	e010      	b.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12d96:	230e      	movs	r3, #14
   12d98:	18fb      	adds	r3, r7, r3
   12d9a:	781b      	ldrb	r3, [r3, #0]
   12d9c:	2201      	movs	r2, #1
   12d9e:	4013      	ands	r3, r2
   12da0:	d00a      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12da2:	697b      	ldr	r3, [r7, #20]
   12da4:	2224      	movs	r2, #36	; 0x24
   12da6:	5c9b      	ldrb	r3, [r3, r2]
   12da8:	b2db      	uxtb	r3, r3
   12daa:	2b00      	cmp	r3, #0
   12dac:	d104      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12dae:	697b      	ldr	r3, [r7, #20]
   12db0:	68db      	ldr	r3, [r3, #12]
   12db2:	697a      	ldr	r2, [r7, #20]
   12db4:	0010      	movs	r0, r2
   12db6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12db8:	697b      	ldr	r3, [r7, #20]
   12dba:	2225      	movs	r2, #37	; 0x25
   12dbc:	5c9b      	ldrb	r3, [r3, r2]
   12dbe:	b2db      	uxtb	r3, r3
   12dc0:	2b05      	cmp	r3, #5
   12dc2:	d02e      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
   12dc4:	697b      	ldr	r3, [r7, #20]
   12dc6:	2225      	movs	r2, #37	; 0x25
   12dc8:	5c9b      	ldrb	r3, [r3, r2]
   12dca:	b2db      	uxtb	r3, r3
   12dcc:	2b00      	cmp	r3, #0
   12dce:	d028      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   12dd0:	693b      	ldr	r3, [r7, #16]
   12dd2:	2203      	movs	r2, #3
   12dd4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12dd6:	697b      	ldr	r3, [r7, #20]
   12dd8:	2200      	movs	r2, #0
   12dda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   12ddc:	697b      	ldr	r3, [r7, #20]
   12dde:	2200      	movs	r2, #0
   12de0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12de2:	697b      	ldr	r3, [r7, #20]
   12de4:	2225      	movs	r2, #37	; 0x25
   12de6:	5c9b      	ldrb	r3, [r3, r2]
   12de8:	b2db      	uxtb	r3, r3
   12dea:	2b41      	cmp	r3, #65	; 0x41
   12dec:	d00e      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   12dee:	697b      	ldr	r3, [r7, #20]
   12df0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12df2:	2b00      	cmp	r3, #0
   12df4:	d00a      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   12df6:	697b      	ldr	r3, [r7, #20]
   12df8:	0018      	movs	r0, r3
   12dfa:	4b0e      	ldr	r3, [pc, #56]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12dfc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   12dfe:	693b      	ldr	r3, [r7, #16]
   12e00:	685b      	ldr	r3, [r3, #4]
   12e02:	22e0      	movs	r2, #224	; 0xe0
   12e04:	02d2      	lsls	r2, r2, #11
   12e06:	431a      	orrs	r2, r3
   12e08:	693b      	ldr	r3, [r7, #16]
   12e0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12e0c:	230e      	movs	r3, #14
   12e0e:	18fb      	adds	r3, r7, r3
   12e10:	781b      	ldrb	r3, [r3, #0]
   12e12:	2204      	movs	r2, #4
   12e14:	4013      	ands	r3, r2
   12e16:	d004      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12e18:	697b      	ldr	r3, [r7, #20]
   12e1a:	695b      	ldr	r3, [r3, #20]
   12e1c:	697a      	ldr	r2, [r7, #20]
   12e1e:	0010      	movs	r0, r2
   12e20:	4798      	blx	r3
		}
	}
}
   12e22:	46c0      	nop			; (mov r8, r8)
   12e24:	46bd      	mov	sp, r7
   12e26:	b006      	add	sp, #24
   12e28:	bd80      	pop	{r7, pc}
   12e2a:	46c0      	nop			; (mov r8, r8)
   12e2c:	20005a60 	.word	0x20005a60
   12e30:	0001284d 	.word	0x0001284d
   12e34:	000126bd 	.word	0x000126bd
   12e38:	000127d1 	.word	0x000127d1
   12e3c:	000126e1 	.word	0x000126e1

00012e40 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   12e40:	b580      	push	{r7, lr}
   12e42:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   12e44:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   12e48:	4b02      	ldr	r3, [pc, #8]	; (12e54 <NVIC_SystemReset+0x14>)
   12e4a:	4a03      	ldr	r2, [pc, #12]	; (12e58 <NVIC_SystemReset+0x18>)
   12e4c:	60da      	str	r2, [r3, #12]
   12e4e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   12e52:	e7fe      	b.n	12e52 <NVIC_SystemReset+0x12>
   12e54:	e000ed00 	.word	0xe000ed00
   12e58:	05fa0004 	.word	0x05fa0004

00012e5c <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   12e5c:	b580      	push	{r7, lr}
   12e5e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   12e60:	4b02      	ldr	r3, [pc, #8]	; (12e6c <system_reset+0x10>)
   12e62:	4798      	blx	r3
}
   12e64:	46c0      	nop			; (mov r8, r8)
   12e66:	46bd      	mov	sp, r7
   12e68:	bd80      	pop	{r7, pc}
   12e6a:	46c0      	nop			; (mov r8, r8)
   12e6c:	00012e41 	.word	0x00012e41

00012e70 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   12e70:	b580      	push	{r7, lr}
   12e72:	b086      	sub	sp, #24
   12e74:	af00      	add	r7, sp, #0
   12e76:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   12e78:	4b9e      	ldr	r3, [pc, #632]	; (130f4 <vCommandConsoleTask+0x284>)
   12e7a:	0018      	movs	r0, r3
   12e7c:	4b9e      	ldr	r3, [pc, #632]	; (130f8 <vCommandConsoleTask+0x288>)
   12e7e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   12e80:	4b9e      	ldr	r3, [pc, #632]	; (130fc <vCommandConsoleTask+0x28c>)
   12e82:	0018      	movs	r0, r3
   12e84:	4b9c      	ldr	r3, [pc, #624]	; (130f8 <vCommandConsoleTask+0x288>)
   12e86:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSHTCGetCommand);
   12e88:	4b9d      	ldr	r3, [pc, #628]	; (13100 <vCommandConsoleTask+0x290>)
   12e8a:	0018      	movs	r0, r3
   12e8c:	4b9a      	ldr	r3, [pc, #616]	; (130f8 <vCommandConsoleTask+0x288>)
   12e8e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   12e90:	4b9c      	ldr	r3, [pc, #624]	; (13104 <vCommandConsoleTask+0x294>)
   12e92:	0018      	movs	r0, r3
   12e94:	4b98      	ldr	r3, [pc, #608]	; (130f8 <vCommandConsoleTask+0x288>)
   12e96:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   12e98:	4b9b      	ldr	r3, [pc, #620]	; (13108 <vCommandConsoleTask+0x298>)
   12e9a:	0018      	movs	r0, r3
   12e9c:	4b96      	ldr	r3, [pc, #600]	; (130f8 <vCommandConsoleTask+0x288>)
   12e9e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   12ea0:	4b9a      	ldr	r3, [pc, #616]	; (1310c <vCommandConsoleTask+0x29c>)
   12ea2:	0018      	movs	r0, r3
   12ea4:	4b94      	ldr	r3, [pc, #592]	; (130f8 <vCommandConsoleTask+0x288>)
   12ea6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
   12ea8:	4b99      	ldr	r3, [pc, #612]	; (13110 <vCommandConsoleTask+0x2a0>)
   12eaa:	0018      	movs	r0, r3
   12eac:	4b92      	ldr	r3, [pc, #584]	; (130f8 <vCommandConsoleTask+0x288>)
   12eae:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
   12eb0:	4b98      	ldr	r3, [pc, #608]	; (13114 <vCommandConsoleTask+0x2a4>)
   12eb2:	0018      	movs	r0, r3
   12eb4:	4b90      	ldr	r3, [pc, #576]	; (130f8 <vCommandConsoleTask+0x288>)
   12eb6:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   12eb8:	4b97      	ldr	r3, [pc, #604]	; (13118 <vCommandConsoleTask+0x2a8>)
   12eba:	0018      	movs	r0, r3
   12ebc:	4b8e      	ldr	r3, [pc, #568]	; (130f8 <vCommandConsoleTask+0x288>)
   12ebe:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   12ec0:	2317      	movs	r3, #23
   12ec2:	18fb      	adds	r3, r7, r3
   12ec4:	2200      	movs	r2, #0
   12ec6:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   12ec8:	4b94      	ldr	r3, [pc, #592]	; (1311c <vCommandConsoleTask+0x2ac>)
   12eca:	0018      	movs	r0, r3
   12ecc:	4b94      	ldr	r3, [pc, #592]	; (13120 <vCommandConsoleTask+0x2b0>)
   12ece:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   12ed0:	2203      	movs	r2, #3
   12ed2:	2100      	movs	r1, #0
   12ed4:	2001      	movs	r0, #1
   12ed6:	4b93      	ldr	r3, [pc, #588]	; (13124 <vCommandConsoleTask+0x2b4>)
   12ed8:	4798      	blx	r3
   12eda:	0002      	movs	r2, r0
   12edc:	4b92      	ldr	r3, [pc, #584]	; (13128 <vCommandConsoleTask+0x2b8>)
   12ede:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   12ee0:	4b91      	ldr	r3, [pc, #580]	; (13128 <vCommandConsoleTask+0x2b8>)
   12ee2:	681b      	ldr	r3, [r3, #0]
   12ee4:	2b00      	cmp	r3, #0
   12ee6:	d107      	bne.n	12ef8 <vCommandConsoleTask+0x88>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   12ee8:	4b90      	ldr	r3, [pc, #576]	; (1312c <vCommandConsoleTask+0x2bc>)
   12eea:	0019      	movs	r1, r3
   12eec:	2003      	movs	r0, #3
   12eee:	4b90      	ldr	r3, [pc, #576]	; (13130 <vCommandConsoleTask+0x2c0>)
   12ef0:	4798      	blx	r3
        vTaskSuspend(NULL);
   12ef2:	2000      	movs	r0, #0
   12ef4:	4b8f      	ldr	r3, [pc, #572]	; (13134 <vCommandConsoleTask+0x2c4>)
   12ef6:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   12ef8:	230c      	movs	r3, #12
   12efa:	18fb      	adds	r3, r7, r3
   12efc:	0018      	movs	r0, r3
   12efe:	4b8e      	ldr	r3, [pc, #568]	; (13138 <vCommandConsoleTask+0x2c8>)
   12f00:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   12f02:	230c      	movs	r3, #12
   12f04:	18fb      	adds	r3, r7, r3
   12f06:	781b      	ldrb	r3, [r3, #0]
   12f08:	2b0a      	cmp	r3, #10
   12f0a:	d004      	beq.n	12f16 <vCommandConsoleTask+0xa6>
   12f0c:	230c      	movs	r3, #12
   12f0e:	18fb      	adds	r3, r7, r3
   12f10:	781b      	ldrb	r3, [r3, #0]
   12f12:	2b0d      	cmp	r3, #13
   12f14:	d137      	bne.n	12f86 <vCommandConsoleTask+0x116>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   12f16:	4b89      	ldr	r3, [pc, #548]	; (1313c <vCommandConsoleTask+0x2cc>)
   12f18:	0018      	movs	r0, r3
   12f1a:	4b81      	ldr	r3, [pc, #516]	; (13120 <vCommandConsoleTask+0x2b0>)
   12f1c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   12f1e:	4b88      	ldr	r3, [pc, #544]	; (13140 <vCommandConsoleTask+0x2d0>)
   12f20:	2200      	movs	r2, #0
   12f22:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   12f24:	4b87      	ldr	r3, [pc, #540]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f26:	2200      	movs	r2, #0
   12f28:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   12f2a:	4987      	ldr	r1, [pc, #540]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f2c:	4b87      	ldr	r3, [pc, #540]	; (1314c <vCommandConsoleTask+0x2dc>)
   12f2e:	2231      	movs	r2, #49	; 0x31
   12f30:	0018      	movs	r0, r3
   12f32:	4b87      	ldr	r3, [pc, #540]	; (13150 <vCommandConsoleTask+0x2e0>)
   12f34:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   12f36:	4b85      	ldr	r3, [pc, #532]	; (1314c <vCommandConsoleTask+0x2dc>)
   12f38:	2231      	movs	r2, #49	; 0x31
   12f3a:	2100      	movs	r1, #0
   12f3c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   12f3e:	4985      	ldr	r1, [pc, #532]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f40:	4b81      	ldr	r3, [pc, #516]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f42:	2264      	movs	r2, #100	; 0x64
   12f44:	0018      	movs	r0, r3
   12f46:	4b84      	ldr	r3, [pc, #528]	; (13158 <vCommandConsoleTask+0x2e8>)
   12f48:	4798      	blx	r3
   12f4a:	0003      	movs	r3, r0
   12f4c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12f4e:	4b81      	ldr	r3, [pc, #516]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f50:	2263      	movs	r2, #99	; 0x63
   12f52:	2100      	movs	r1, #0
   12f54:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   12f56:	4b7f      	ldr	r3, [pc, #508]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f58:	0018      	movs	r0, r3
   12f5a:	4b71      	ldr	r3, [pc, #452]	; (13120 <vCommandConsoleTask+0x2b0>)
   12f5c:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   12f5e:	693b      	ldr	r3, [r7, #16]
   12f60:	2b00      	cmp	r3, #0
   12f62:	d1ec      	bne.n	12f3e <vCommandConsoleTask+0xce>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   12f64:	2317      	movs	r3, #23
   12f66:	18fb      	adds	r3, r7, r3
   12f68:	2200      	movs	r2, #0
   12f6a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12f6c:	4b76      	ldr	r3, [pc, #472]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f6e:	2232      	movs	r2, #50	; 0x32
   12f70:	2100      	movs	r1, #0
   12f72:	0018      	movs	r0, r3
   12f74:	4b79      	ldr	r3, [pc, #484]	; (1315c <vCommandConsoleTask+0x2ec>)
   12f76:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   12f78:	4b76      	ldr	r3, [pc, #472]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f7a:	2264      	movs	r2, #100	; 0x64
   12f7c:	2100      	movs	r1, #0
   12f7e:	0018      	movs	r0, r3
   12f80:	4b76      	ldr	r3, [pc, #472]	; (1315c <vCommandConsoleTask+0x2ec>)
   12f82:	4798      	blx	r3
   12f84:	e0b5      	b.n	130f2 <vCommandConsoleTask+0x282>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   12f86:	4b6e      	ldr	r3, [pc, #440]	; (13140 <vCommandConsoleTask+0x2d0>)
   12f88:	781b      	ldrb	r3, [r3, #0]
   12f8a:	2b00      	cmp	r3, #0
   12f8c:	d059      	beq.n	13042 <vCommandConsoleTask+0x1d2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   12f8e:	4b6d      	ldr	r3, [pc, #436]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f90:	781b      	ldrb	r3, [r3, #0]
   12f92:	2b03      	cmp	r3, #3
   12f94:	d80c      	bhi.n	12fb0 <vCommandConsoleTask+0x140>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   12f96:	4b6b      	ldr	r3, [pc, #428]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f98:	781b      	ldrb	r3, [r3, #0]
   12f9a:	1c5a      	adds	r2, r3, #1
   12f9c:	b2d1      	uxtb	r1, r2
   12f9e:	4a69      	ldr	r2, [pc, #420]	; (13144 <vCommandConsoleTask+0x2d4>)
   12fa0:	7011      	strb	r1, [r2, #0]
   12fa2:	001a      	movs	r2, r3
   12fa4:	230c      	movs	r3, #12
   12fa6:	18fb      	adds	r3, r7, r3
   12fa8:	7819      	ldrb	r1, [r3, #0]
   12faa:	4b6d      	ldr	r3, [pc, #436]	; (13160 <vCommandConsoleTask+0x2f0>)
   12fac:	5499      	strb	r1, [r3, r2]
   12fae:	e005      	b.n	12fbc <vCommandConsoleTask+0x14c>
                } else {
                    isEscapeCode = false;
   12fb0:	4b63      	ldr	r3, [pc, #396]	; (13140 <vCommandConsoleTask+0x2d0>)
   12fb2:	2200      	movs	r2, #0
   12fb4:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   12fb6:	4b63      	ldr	r3, [pc, #396]	; (13144 <vCommandConsoleTask+0x2d4>)
   12fb8:	2200      	movs	r2, #0
   12fba:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   12fbc:	4b61      	ldr	r3, [pc, #388]	; (13144 <vCommandConsoleTask+0x2d4>)
   12fbe:	781b      	ldrb	r3, [r3, #0]
   12fc0:	2b01      	cmp	r3, #1
   12fc2:	d999      	bls.n	12ef8 <vCommandConsoleTask+0x88>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   12fc4:	4a67      	ldr	r2, [pc, #412]	; (13164 <vCommandConsoleTask+0x2f4>)
   12fc6:	4b66      	ldr	r3, [pc, #408]	; (13160 <vCommandConsoleTask+0x2f0>)
   12fc8:	0011      	movs	r1, r2
   12fca:	0018      	movs	r0, r3
   12fcc:	4b66      	ldr	r3, [pc, #408]	; (13168 <vCommandConsoleTask+0x2f8>)
   12fce:	4798      	blx	r3
   12fd0:	1e03      	subs	r3, r0, #0
   12fd2:	d02f      	beq.n	13034 <vCommandConsoleTask+0x1c4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   12fd4:	4965      	ldr	r1, [pc, #404]	; (1316c <vCommandConsoleTask+0x2fc>)
   12fd6:	4b5c      	ldr	r3, [pc, #368]	; (13148 <vCommandConsoleTask+0x2d8>)
   12fd8:	221b      	movs	r2, #27
   12fda:	0018      	movs	r0, r3
   12fdc:	4b64      	ldr	r3, [pc, #400]	; (13170 <vCommandConsoleTask+0x300>)
   12fde:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   12fe0:	4b59      	ldr	r3, [pc, #356]	; (13148 <vCommandConsoleTask+0x2d8>)
   12fe2:	0018      	movs	r0, r3
   12fe4:	4b4e      	ldr	r3, [pc, #312]	; (13120 <vCommandConsoleTask+0x2b0>)
   12fe6:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   12fe8:	2317      	movs	r3, #23
   12fea:	18fb      	adds	r3, r7, r3
   12fec:	2200      	movs	r2, #0
   12fee:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12ff0:	4b55      	ldr	r3, [pc, #340]	; (13148 <vCommandConsoleTask+0x2d8>)
   12ff2:	2232      	movs	r2, #50	; 0x32
   12ff4:	2100      	movs	r1, #0
   12ff6:	0018      	movs	r0, r3
   12ff8:	4b58      	ldr	r3, [pc, #352]	; (1315c <vCommandConsoleTask+0x2ec>)
   12ffa:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   12ffc:	4953      	ldr	r1, [pc, #332]	; (1314c <vCommandConsoleTask+0x2dc>)
   12ffe:	4b52      	ldr	r3, [pc, #328]	; (13148 <vCommandConsoleTask+0x2d8>)
   13000:	2231      	movs	r2, #49	; 0x31
   13002:	0018      	movs	r0, r3
   13004:	4b52      	ldr	r3, [pc, #328]	; (13150 <vCommandConsoleTask+0x2e0>)
   13006:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   13008:	4b4f      	ldr	r3, [pc, #316]	; (13148 <vCommandConsoleTask+0x2d8>)
   1300a:	0018      	movs	r0, r3
   1300c:	4b59      	ldr	r3, [pc, #356]	; (13174 <vCommandConsoleTask+0x304>)
   1300e:	4798      	blx	r3
   13010:	0003      	movs	r3, r0
   13012:	2b30      	cmp	r3, #48	; 0x30
   13014:	d806      	bhi.n	13024 <vCommandConsoleTask+0x1b4>
   13016:	4b4d      	ldr	r3, [pc, #308]	; (1314c <vCommandConsoleTask+0x2dc>)
   13018:	0018      	movs	r0, r3
   1301a:	4b56      	ldr	r3, [pc, #344]	; (13174 <vCommandConsoleTask+0x304>)
   1301c:	4798      	blx	r3
   1301e:	0003      	movs	r3, r0
   13020:	b2da      	uxtb	r2, r3
   13022:	e000      	b.n	13026 <vCommandConsoleTask+0x1b6>
   13024:	2231      	movs	r2, #49	; 0x31
   13026:	2317      	movs	r3, #23
   13028:	18fb      	adds	r3, r7, r3
   1302a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   1302c:	4b46      	ldr	r3, [pc, #280]	; (13148 <vCommandConsoleTask+0x2d8>)
   1302e:	0018      	movs	r0, r3
   13030:	4b3b      	ldr	r3, [pc, #236]	; (13120 <vCommandConsoleTask+0x2b0>)
   13032:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   13034:	4b42      	ldr	r3, [pc, #264]	; (13140 <vCommandConsoleTask+0x2d0>)
   13036:	2200      	movs	r2, #0
   13038:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1303a:	4b42      	ldr	r3, [pc, #264]	; (13144 <vCommandConsoleTask+0x2d4>)
   1303c:	2200      	movs	r2, #0
   1303e:	701a      	strb	r2, [r3, #0]
   13040:	e75a      	b.n	12ef8 <vCommandConsoleTask+0x88>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   13042:	230c      	movs	r3, #12
   13044:	18fb      	adds	r3, r7, r3
   13046:	781b      	ldrb	r3, [r3, #0]
   13048:	2b0d      	cmp	r3, #13
   1304a:	d100      	bne.n	1304e <vCommandConsoleTask+0x1de>
   1304c:	e754      	b.n	12ef8 <vCommandConsoleTask+0x88>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1304e:	230c      	movs	r3, #12
   13050:	18fb      	adds	r3, r7, r3
   13052:	781b      	ldrb	r3, [r3, #0]
   13054:	2b08      	cmp	r3, #8
   13056:	d004      	beq.n	13062 <vCommandConsoleTask+0x1f2>
   13058:	230c      	movs	r3, #12
   1305a:	18fb      	adds	r3, r7, r3
   1305c:	781b      	ldrb	r3, [r3, #0]
   1305e:	2b7f      	cmp	r3, #127	; 0x7f
   13060:	d11c      	bne.n	1309c <vCommandConsoleTask+0x22c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13062:	2308      	movs	r3, #8
   13064:	18fb      	adds	r3, r7, r3
   13066:	4a44      	ldr	r2, [pc, #272]	; (13178 <vCommandConsoleTask+0x308>)
   13068:	6812      	ldr	r2, [r2, #0]
   1306a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   1306c:	2308      	movs	r3, #8
   1306e:	18fb      	adds	r3, r7, r3
   13070:	0018      	movs	r0, r3
   13072:	4b2b      	ldr	r3, [pc, #172]	; (13120 <vCommandConsoleTask+0x2b0>)
   13074:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13076:	2317      	movs	r3, #23
   13078:	18fb      	adds	r3, r7, r3
   1307a:	781b      	ldrb	r3, [r3, #0]
   1307c:	2b00      	cmp	r3, #0
   1307e:	d037      	beq.n	130f0 <vCommandConsoleTask+0x280>
                    cInputIndex--;
   13080:	2317      	movs	r3, #23
   13082:	18fb      	adds	r3, r7, r3
   13084:	781a      	ldrb	r2, [r3, #0]
   13086:	2317      	movs	r3, #23
   13088:	18fb      	adds	r3, r7, r3
   1308a:	3a01      	subs	r2, #1
   1308c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   1308e:	2317      	movs	r3, #23
   13090:	18fb      	adds	r3, r7, r3
   13092:	781b      	ldrb	r3, [r3, #0]
   13094:	4a2c      	ldr	r2, [pc, #176]	; (13148 <vCommandConsoleTask+0x2d8>)
   13096:	2100      	movs	r1, #0
   13098:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1309a:	e029      	b.n	130f0 <vCommandConsoleTask+0x280>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   1309c:	230c      	movs	r3, #12
   1309e:	18fb      	adds	r3, r7, r3
   130a0:	781b      	ldrb	r3, [r3, #0]
   130a2:	2b1b      	cmp	r3, #27
   130a4:	d106      	bne.n	130b4 <vCommandConsoleTask+0x244>
                isEscapeCode = true;  // Next characters will be code arguments
   130a6:	4b26      	ldr	r3, [pc, #152]	; (13140 <vCommandConsoleTask+0x2d0>)
   130a8:	2201      	movs	r2, #1
   130aa:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   130ac:	4b25      	ldr	r3, [pc, #148]	; (13144 <vCommandConsoleTask+0x2d4>)
   130ae:	2200      	movs	r2, #0
   130b0:	701a      	strb	r2, [r3, #0]
   130b2:	e721      	b.n	12ef8 <vCommandConsoleTask+0x88>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   130b4:	2317      	movs	r3, #23
   130b6:	18fb      	adds	r3, r7, r3
   130b8:	781b      	ldrb	r3, [r3, #0]
   130ba:	2b31      	cmp	r3, #49	; 0x31
   130bc:	d80e      	bhi.n	130dc <vCommandConsoleTask+0x26c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   130be:	2317      	movs	r3, #23
   130c0:	18fb      	adds	r3, r7, r3
   130c2:	781b      	ldrb	r3, [r3, #0]
   130c4:	220c      	movs	r2, #12
   130c6:	18ba      	adds	r2, r7, r2
   130c8:	7811      	ldrb	r1, [r2, #0]
   130ca:	4a1f      	ldr	r2, [pc, #124]	; (13148 <vCommandConsoleTask+0x2d8>)
   130cc:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   130ce:	2317      	movs	r3, #23
   130d0:	18fb      	adds	r3, r7, r3
   130d2:	781a      	ldrb	r2, [r3, #0]
   130d4:	2317      	movs	r3, #23
   130d6:	18fb      	adds	r3, r7, r3
   130d8:	3201      	adds	r2, #1
   130da:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   130dc:	230c      	movs	r3, #12
   130de:	18fb      	adds	r3, r7, r3
   130e0:	2200      	movs	r2, #0
   130e2:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   130e4:	230c      	movs	r3, #12
   130e6:	18fb      	adds	r3, r7, r3
   130e8:	0018      	movs	r0, r3
   130ea:	4b0d      	ldr	r3, [pc, #52]	; (13120 <vCommandConsoleTask+0x2b0>)
   130ec:	4798      	blx	r3
   130ee:	e703      	b.n	12ef8 <vCommandConsoleTask+0x88>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   130f0:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   130f2:	e701      	b.n	12ef8 <vCommandConsoleTask+0x88>
   130f4:	00035e2c 	.word	0x00035e2c
   130f8:	00017b6d 	.word	0x00017b6d
   130fc:	00035e1c 	.word	0x00035e1c
   13100:	00035e6c 	.word	0x00035e6c
   13104:	00035e9c 	.word	0x00035e9c
   13108:	00035e3c 	.word	0x00035e3c
   1310c:	00035e4c 	.word	0x00035e4c
   13110:	00035e5c 	.word	0x00035e5c
   13114:	00035e7c 	.word	0x00035e7c
   13118:	00035e8c 	.word	0x00035e8c
   1311c:	00035abc 	.word	0x00035abc
   13120:	0001da95 	.word	0x0001da95
   13124:	0001a135 	.word	0x0001a135
   13128:	20004630 	.word	0x20004630
   1312c:	00035cb8 	.word	0x00035cb8
   13130:	0001db81 	.word	0x0001db81
   13134:	0001bf21 	.word	0x0001bf21
   13138:	0001317d 	.word	0x0001317d
   1313c:	00035cd8 	.word	0x00035cd8
   13140:	200003b4 	.word	0x200003b4
   13144:	200003b5 	.word	0x200003b5
   13148:	200003ec 	.word	0x200003ec
   1314c:	200003b8 	.word	0x200003b8
   13150:	00034ac7 	.word	0x00034ac7
   13154:	20000420 	.word	0x20000420
   13158:	00017bdd 	.word	0x00017bdd
   1315c:	000346df 	.word	0x000346df
   13160:	20000484 	.word	0x20000484
   13164:	00035cdc 	.word	0x00035cdc
   13168:	000349e1 	.word	0x000349e1
   1316c:	00035ce0 	.word	0x00035ce0
   13170:	0003499d 	.word	0x0003499d
   13174:	00034a97 	.word	0x00034a97
   13178:	00035ce8 	.word	0x00035ce8

0001317c <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   1317c:	b580      	push	{r7, lr}
   1317e:	b084      	sub	sp, #16
   13180:	af00      	add	r7, sp, #0
   13182:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13184:	687b      	ldr	r3, [r7, #4]
   13186:	0018      	movs	r0, r3
   13188:	4b0c      	ldr	r3, [pc, #48]	; (131bc <FreeRTOS_read+0x40>)
   1318a:	4798      	blx	r3
   1318c:	0003      	movs	r3, r0
   1318e:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13190:	e00d      	b.n	131ae <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13192:	4b0b      	ldr	r3, [pc, #44]	; (131c0 <FreeRTOS_read+0x44>)
   13194:	681a      	ldr	r2, [r3, #0]
   13196:	2301      	movs	r3, #1
   13198:	425b      	negs	r3, r3
   1319a:	0019      	movs	r1, r3
   1319c:	0010      	movs	r0, r2
   1319e:	4b09      	ldr	r3, [pc, #36]	; (131c4 <FreeRTOS_read+0x48>)
   131a0:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   131a2:	687b      	ldr	r3, [r7, #4]
   131a4:	0018      	movs	r0, r3
   131a6:	4b05      	ldr	r3, [pc, #20]	; (131bc <FreeRTOS_read+0x40>)
   131a8:	4798      	blx	r3
   131aa:	0003      	movs	r3, r0
   131ac:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   131ae:	68fb      	ldr	r3, [r7, #12]
   131b0:	3301      	adds	r3, #1
   131b2:	d0ee      	beq.n	13192 <FreeRTOS_read+0x16>
    }
}
   131b4:	46c0      	nop			; (mov r8, r8)
   131b6:	46bd      	mov	sp, r7
   131b8:	b004      	add	sp, #16
   131ba:	bd80      	pop	{r7, pc}
   131bc:	0001db31 	.word	0x0001db31
   131c0:	20004630 	.word	0x20004630
   131c4:	0001b0ed 	.word	0x0001b0ed

000131c8 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   131c8:	b580      	push	{r7, lr}
   131ca:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   131cc:	4b0a      	ldr	r3, [pc, #40]	; (131f8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   131ce:	2200      	movs	r2, #0
   131d0:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   131d2:	4b0a      	ldr	r3, [pc, #40]	; (131fc <CliCharReadySemaphoreGiveFromISR+0x34>)
   131d4:	681b      	ldr	r3, [r3, #0]
   131d6:	4a08      	ldr	r2, [pc, #32]	; (131f8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   131d8:	0011      	movs	r1, r2
   131da:	0018      	movs	r0, r3
   131dc:	4b08      	ldr	r3, [pc, #32]	; (13200 <CliCharReadySemaphoreGiveFromISR+0x38>)
   131de:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   131e0:	4b05      	ldr	r3, [pc, #20]	; (131f8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   131e2:	681b      	ldr	r3, [r3, #0]
   131e4:	2b00      	cmp	r3, #0
   131e6:	d003      	beq.n	131f0 <CliCharReadySemaphoreGiveFromISR+0x28>
   131e8:	4b06      	ldr	r3, [pc, #24]	; (13204 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   131ea:	2280      	movs	r2, #128	; 0x80
   131ec:	0552      	lsls	r2, r2, #21
   131ee:	601a      	str	r2, [r3, #0]
}
   131f0:	46c0      	nop			; (mov r8, r8)
   131f2:	46bd      	mov	sp, r7
   131f4:	bd80      	pop	{r7, pc}
   131f6:	46c0      	nop			; (mov r8, r8)
   131f8:	20000488 	.word	0x20000488
   131fc:	20004630 	.word	0x20004630
   13200:	0001aa65 	.word	0x0001aa65
   13204:	e000ed04 	.word	0xe000ed04

00013208 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13208:	b5b0      	push	{r4, r5, r7, lr}
   1320a:	b08a      	sub	sp, #40	; 0x28
   1320c:	af02      	add	r7, sp, #8
   1320e:	60f8      	str	r0, [r7, #12]
   13210:	60b9      	str	r1, [r7, #8]
   13212:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   13214:	4b44      	ldr	r3, [pc, #272]	; (13328 <CLI_GetImuData+0x120>)
   13216:	4798      	blx	r3
   13218:	0003      	movs	r3, r0
   1321a:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   1321c:	231b      	movs	r3, #27
   1321e:	18fa      	adds	r2, r7, r3
   13220:	69fb      	ldr	r3, [r7, #28]
   13222:	0011      	movs	r1, r2
   13224:	0018      	movs	r0, r3
   13226:	4b41      	ldr	r3, [pc, #260]	; (1332c <CLI_GetImuData+0x124>)
   13228:	4798      	blx	r3

    if (reg) {
   1322a:	231b      	movs	r3, #27
   1322c:	18fb      	adds	r3, r7, r3
   1322e:	781b      	ldrb	r3, [r3, #0]
   13230:	2b00      	cmp	r3, #0
   13232:	d05f      	beq.n	132f4 <CLI_GetImuData+0xec>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   13234:	4b3e      	ldr	r3, [pc, #248]	; (13330 <CLI_GetImuData+0x128>)
   13236:	2206      	movs	r2, #6
   13238:	2100      	movs	r1, #0
   1323a:	0018      	movs	r0, r3
   1323c:	4b3d      	ldr	r3, [pc, #244]	; (13334 <CLI_GetImuData+0x12c>)
   1323e:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13240:	4a3b      	ldr	r2, [pc, #236]	; (13330 <CLI_GetImuData+0x128>)
   13242:	69fb      	ldr	r3, [r7, #28]
   13244:	0011      	movs	r1, r2
   13246:	0018      	movs	r0, r3
   13248:	4b3b      	ldr	r3, [pc, #236]	; (13338 <CLI_GetImuData+0x130>)
   1324a:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   1324c:	4b38      	ldr	r3, [pc, #224]	; (13330 <CLI_GetImuData+0x128>)
   1324e:	2200      	movs	r2, #0
   13250:	5e9b      	ldrsh	r3, [r3, r2]
   13252:	0018      	movs	r0, r3
   13254:	4b39      	ldr	r3, [pc, #228]	; (1333c <CLI_GetImuData+0x134>)
   13256:	4798      	blx	r3
   13258:	1c02      	adds	r2, r0, #0
   1325a:	4b39      	ldr	r3, [pc, #228]	; (13340 <CLI_GetImuData+0x138>)
   1325c:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   1325e:	4b34      	ldr	r3, [pc, #208]	; (13330 <CLI_GetImuData+0x128>)
   13260:	2202      	movs	r2, #2
   13262:	5e9b      	ldrsh	r3, [r3, r2]
   13264:	0018      	movs	r0, r3
   13266:	4b35      	ldr	r3, [pc, #212]	; (1333c <CLI_GetImuData+0x134>)
   13268:	4798      	blx	r3
   1326a:	1c02      	adds	r2, r0, #0
   1326c:	4b34      	ldr	r3, [pc, #208]	; (13340 <CLI_GetImuData+0x138>)
   1326e:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13270:	4b2f      	ldr	r3, [pc, #188]	; (13330 <CLI_GetImuData+0x128>)
   13272:	2204      	movs	r2, #4
   13274:	5e9b      	ldrsh	r3, [r3, r2]
   13276:	0018      	movs	r0, r3
   13278:	4b30      	ldr	r3, [pc, #192]	; (1333c <CLI_GetImuData+0x134>)
   1327a:	4798      	blx	r3
   1327c:	1c02      	adds	r2, r0, #0
   1327e:	4b30      	ldr	r3, [pc, #192]	; (13340 <CLI_GetImuData+0x138>)
   13280:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   13282:	4b2f      	ldr	r3, [pc, #188]	; (13340 <CLI_GetImuData+0x138>)
   13284:	681a      	ldr	r2, [r3, #0]
   13286:	4b2f      	ldr	r3, [pc, #188]	; (13344 <CLI_GetImuData+0x13c>)
   13288:	1c10      	adds	r0, r2, #0
   1328a:	4798      	blx	r3
   1328c:	0005      	movs	r5, r0
   1328e:	4b2c      	ldr	r3, [pc, #176]	; (13340 <CLI_GetImuData+0x138>)
   13290:	685a      	ldr	r2, [r3, #4]
   13292:	4b2c      	ldr	r3, [pc, #176]	; (13344 <CLI_GetImuData+0x13c>)
   13294:	1c10      	adds	r0, r2, #0
   13296:	4798      	blx	r3
   13298:	0004      	movs	r4, r0
   1329a:	4b29      	ldr	r3, [pc, #164]	; (13340 <CLI_GetImuData+0x138>)
   1329c:	689a      	ldr	r2, [r3, #8]
   1329e:	4b29      	ldr	r3, [pc, #164]	; (13344 <CLI_GetImuData+0x13c>)
   132a0:	1c10      	adds	r0, r2, #0
   132a2:	4798      	blx	r3
   132a4:	0003      	movs	r3, r0
   132a6:	4a28      	ldr	r2, [pc, #160]	; (13348 <CLI_GetImuData+0x140>)
   132a8:	68b9      	ldr	r1, [r7, #8]
   132aa:	68f8      	ldr	r0, [r7, #12]
   132ac:	9301      	str	r3, [sp, #4]
   132ae:	9400      	str	r4, [sp, #0]
   132b0:	002b      	movs	r3, r5
   132b2:	4c26      	ldr	r4, [pc, #152]	; (1334c <CLI_GetImuData+0x144>)
   132b4:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   132b6:	4b22      	ldr	r3, [pc, #136]	; (13340 <CLI_GetImuData+0x138>)
   132b8:	681a      	ldr	r2, [r3, #0]
   132ba:	4b22      	ldr	r3, [pc, #136]	; (13344 <CLI_GetImuData+0x13c>)
   132bc:	1c10      	adds	r0, r2, #0
   132be:	4798      	blx	r3
   132c0:	0003      	movs	r3, r0
   132c2:	b21a      	sxth	r2, r3
   132c4:	2314      	movs	r3, #20
   132c6:	18fb      	adds	r3, r7, r3
   132c8:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   132ca:	4b1d      	ldr	r3, [pc, #116]	; (13340 <CLI_GetImuData+0x138>)
   132cc:	685a      	ldr	r2, [r3, #4]
   132ce:	4b1d      	ldr	r3, [pc, #116]	; (13344 <CLI_GetImuData+0x13c>)
   132d0:	1c10      	adds	r0, r2, #0
   132d2:	4798      	blx	r3
   132d4:	0003      	movs	r3, r0
   132d6:	b21a      	sxth	r2, r3
   132d8:	2314      	movs	r3, #20
   132da:	18fb      	adds	r3, r7, r3
   132dc:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   132de:	4b18      	ldr	r3, [pc, #96]	; (13340 <CLI_GetImuData+0x138>)
   132e0:	689a      	ldr	r2, [r3, #8]
   132e2:	4b18      	ldr	r3, [pc, #96]	; (13344 <CLI_GetImuData+0x13c>)
   132e4:	1c10      	adds	r0, r2, #0
   132e6:	4798      	blx	r3
   132e8:	0003      	movs	r3, r0
   132ea:	b21a      	sxth	r2, r3
   132ec:	2314      	movs	r3, #20
   132ee:	18fb      	adds	r3, r7, r3
   132f0:	809a      	strh	r2, [r3, #4]
   132f2:	e014      	b.n	1331e <CLI_GetImuData+0x116>
		//WifiAddImuDataToQueue(&imuPacket);
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   132f4:	4a16      	ldr	r2, [pc, #88]	; (13350 <CLI_GetImuData+0x148>)
   132f6:	68b9      	ldr	r1, [r7, #8]
   132f8:	68fb      	ldr	r3, [r7, #12]
   132fa:	0018      	movs	r0, r3
   132fc:	4b13      	ldr	r3, [pc, #76]	; (1334c <CLI_GetImuData+0x144>)
   132fe:	4798      	blx	r3
		imuPacket.xmg = -1;
   13300:	2314      	movs	r3, #20
   13302:	18fb      	adds	r3, r7, r3
   13304:	2201      	movs	r2, #1
   13306:	4252      	negs	r2, r2
   13308:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   1330a:	2314      	movs	r3, #20
   1330c:	18fb      	adds	r3, r7, r3
   1330e:	2202      	movs	r2, #2
   13310:	4252      	negs	r2, r2
   13312:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   13314:	2314      	movs	r3, #20
   13316:	18fb      	adds	r3, r7, r3
   13318:	2203      	movs	r2, #3
   1331a:	4252      	negs	r2, r2
   1331c:	809a      	strh	r2, [r3, #4]
		//WifiAddImuDataToQueue(&imuPacket);
    }
    return pdFALSE;
   1331e:	2300      	movs	r3, #0
}
   13320:	0018      	movs	r0, r3
   13322:	46bd      	mov	sp, r7
   13324:	b008      	add	sp, #32
   13326:	bdb0      	pop	{r4, r5, r7, pc}
   13328:	00014e71 	.word	0x00014e71
   1332c:	0001486d 	.word	0x0001486d
   13330:	2000048c 	.word	0x2000048c
   13334:	000346df 	.word	0x000346df
   13338:	000148a9 	.word	0x000148a9
   1333c:	000140fd 	.word	0x000140fd
   13340:	20000494 	.word	0x20000494
   13344:	00032c85 	.word	0x00032c85
   13348:	00035cec 	.word	0x00035cec
   1334c:	00034939 	.word	0x00034939
   13350:	00035d10 	.word	0x00035d10

00013354 <CLI_GetSHTC>:


BaseType_t CLI_GetSHTC(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   13354:	b590      	push	{r4, r7, lr}
   13356:	b087      	sub	sp, #28
   13358:	af02      	add	r7, sp, #8
   1335a:	60f8      	str	r0, [r7, #12]
   1335c:	60b9      	str	r1, [r7, #8]
   1335e:	607a      	str	r2, [r7, #4]
	static int16_t ht[2];
	if( !shtc_get(ht) ){
   13360:	4b12      	ldr	r3, [pc, #72]	; (133ac <CLI_GetSHTC+0x58>)
   13362:	0018      	movs	r0, r3
   13364:	4b12      	ldr	r3, [pc, #72]	; (133b0 <CLI_GetSHTC+0x5c>)
   13366:	4798      	blx	r3
   13368:	0003      	movs	r3, r0
   1336a:	001a      	movs	r2, r3
   1336c:	2301      	movs	r3, #1
   1336e:	4053      	eors	r3, r2
   13370:	b2db      	uxtb	r3, r3
   13372:	2b00      	cmp	r3, #0
   13374:	d007      	beq.n	13386 <CLI_GetSHTC+0x32>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "SHTC error!\r\n");
   13376:	4a0f      	ldr	r2, [pc, #60]	; (133b4 <CLI_GetSHTC+0x60>)
   13378:	68b9      	ldr	r1, [r7, #8]
   1337a:	68fb      	ldr	r3, [r7, #12]
   1337c:	0018      	movs	r0, r3
   1337e:	4b0e      	ldr	r3, [pc, #56]	; (133b8 <CLI_GetSHTC+0x64>)
   13380:	4798      	blx	r3
		return pdFALSE;
   13382:	2300      	movs	r3, #0
   13384:	e00e      	b.n	133a4 <CLI_GetSHTC+0x50>
	}
	
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "humidity = %d , temp = %d \r\n", (int)ht[0], (int)ht[1]);
   13386:	4b09      	ldr	r3, [pc, #36]	; (133ac <CLI_GetSHTC+0x58>)
   13388:	2200      	movs	r2, #0
   1338a:	5e9b      	ldrsh	r3, [r3, r2]
   1338c:	001c      	movs	r4, r3
   1338e:	4b07      	ldr	r3, [pc, #28]	; (133ac <CLI_GetSHTC+0x58>)
   13390:	2202      	movs	r2, #2
   13392:	5e9b      	ldrsh	r3, [r3, r2]
   13394:	4a09      	ldr	r2, [pc, #36]	; (133bc <CLI_GetSHTC+0x68>)
   13396:	68b9      	ldr	r1, [r7, #8]
   13398:	68f8      	ldr	r0, [r7, #12]
   1339a:	9300      	str	r3, [sp, #0]
   1339c:	0023      	movs	r3, r4
   1339e:	4c06      	ldr	r4, [pc, #24]	; (133b8 <CLI_GetSHTC+0x64>)
   133a0:	47a0      	blx	r4
	return pdFALSE;
   133a2:	2300      	movs	r3, #0
}
   133a4:	0018      	movs	r0, r3
   133a6:	46bd      	mov	sp, r7
   133a8:	b005      	add	sp, #20
   133aa:	bd90      	pop	{r4, r7, pc}
   133ac:	200004a0 	.word	0x200004a0
   133b0:	000154ed 	.word	0x000154ed
   133b4:	00035d38 	.word	0x00035d38
   133b8:	00034939 	.word	0x00034939
   133bc:	00035d48 	.word	0x00035d48

000133c0 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   133c0:	b590      	push	{r4, r7, lr}
   133c2:	b087      	sub	sp, #28
   133c4:	af00      	add	r7, sp, #0
   133c6:	60f8      	str	r0, [r7, #12]
   133c8:	60b9      	str	r1, [r7, #8]
   133ca:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   133cc:	2317      	movs	r3, #23
   133ce:	18fb      	adds	r3, r7, r3
   133d0:	221b      	movs	r2, #27
   133d2:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   133d4:	2317      	movs	r3, #23
   133d6:	18fb      	adds	r3, r7, r3
   133d8:	781b      	ldrb	r3, [r3, #0]
   133da:	4a08      	ldr	r2, [pc, #32]	; (133fc <xCliClearTerminalScreen+0x3c>)
   133dc:	4808      	ldr	r0, [pc, #32]	; (13400 <xCliClearTerminalScreen+0x40>)
   133de:	210f      	movs	r1, #15
   133e0:	4c08      	ldr	r4, [pc, #32]	; (13404 <xCliClearTerminalScreen+0x44>)
   133e2:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   133e4:	4a06      	ldr	r2, [pc, #24]	; (13400 <xCliClearTerminalScreen+0x40>)
   133e6:	68b9      	ldr	r1, [r7, #8]
   133e8:	68fb      	ldr	r3, [r7, #12]
   133ea:	0018      	movs	r0, r3
   133ec:	4b05      	ldr	r3, [pc, #20]	; (13404 <xCliClearTerminalScreen+0x44>)
   133ee:	4798      	blx	r3
    return pdFALSE;
   133f0:	2300      	movs	r3, #0
}
   133f2:	0018      	movs	r0, r3
   133f4:	46bd      	mov	sp, r7
   133f6:	b007      	add	sp, #28
   133f8:	bd90      	pop	{r4, r7, pc}
   133fa:	46c0      	nop			; (mov r8, r8)
   133fc:	00035d68 	.word	0x00035d68
   13400:	200003a4 	.word	0x200003a4
   13404:	00034939 	.word	0x00034939

00013408 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13408:	b580      	push	{r7, lr}
   1340a:	b084      	sub	sp, #16
   1340c:	af00      	add	r7, sp, #0
   1340e:	60f8      	str	r0, [r7, #12]
   13410:	60b9      	str	r1, [r7, #8]
   13412:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13414:	2002      	movs	r0, #2
   13416:	4b03      	ldr	r3, [pc, #12]	; (13424 <CLI_OTAU+0x1c>)
   13418:	4798      	blx	r3

    return pdFALSE;
   1341a:	2300      	movs	r3, #0
}
   1341c:	0018      	movs	r0, r3
   1341e:	46bd      	mov	sp, r7
   13420:	b004      	add	sp, #16
   13422:	bd80      	pop	{r7, pc}
   13424:	000171a9 	.word	0x000171a9

00013428 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13428:	b580      	push	{r7, lr}
   1342a:	b084      	sub	sp, #16
   1342c:	af00      	add	r7, sp, #0
   1342e:	60f8      	str	r0, [r7, #12]
   13430:	60b9      	str	r1, [r7, #8]
   13432:	607a      	str	r2, [r7, #4]
    system_reset();
   13434:	4b03      	ldr	r3, [pc, #12]	; (13444 <CLI_ResetDevice+0x1c>)
   13436:	4798      	blx	r3
    return pdFALSE;
   13438:	2300      	movs	r3, #0
}
   1343a:	0018      	movs	r0, r3
   1343c:	46bd      	mov	sp, r7
   1343e:	b004      	add	sp, #16
   13440:	bd80      	pop	{r7, pc}
   13442:	46c0      	nop			; (mov r8, r8)
   13444:	00012e5d 	.word	0x00012e5d

00013448 <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13448:	b580      	push	{r7, lr}
   1344a:	b084      	sub	sp, #16
   1344c:	af00      	add	r7, sp, #0
   1344e:	60f8      	str	r0, [r7, #12]
   13450:	60b9      	str	r1, [r7, #8]
   13452:	607a      	str	r2, [r7, #4]
    snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Students to fill out!");
   13454:	4a05      	ldr	r2, [pc, #20]	; (1346c <CLI_NeotrellisSetLed+0x24>)
   13456:	68b9      	ldr	r1, [r7, #8]
   13458:	68fb      	ldr	r3, [r7, #12]
   1345a:	0018      	movs	r0, r3
   1345c:	4b04      	ldr	r3, [pc, #16]	; (13470 <CLI_NeotrellisSetLed+0x28>)
   1345e:	4798      	blx	r3
    // Check code SeesawSetLed and SeesawSetLed
    // How do you get parameters? Checl link in comments!
    // Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
    // return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
    // This function expects 4 arguments inside pcCommandString: key, R, G, B.
    return pdFALSE;
   13460:	2300      	movs	r3, #0
}
   13462:	0018      	movs	r0, r3
   13464:	46bd      	mov	sp, r7
   13466:	b004      	add	sp, #16
   13468:	bd80      	pop	{r7, pc}
   1346a:	46c0      	nop			; (mov r8, r8)
   1346c:	00035d70 	.word	0x00035d70
   13470:	00034939 	.word	0x00034939

00013474 <CLI_NeotrellProcessButtonBuffer>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellProcessButtonBuffer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13474:	b590      	push	{r4, r7, lr}
   13476:	b099      	sub	sp, #100	; 0x64
   13478:	af00      	add	r7, sp, #0
   1347a:	60f8      	str	r0, [r7, #12]
   1347c:	60b9      	str	r1, [r7, #8]
   1347e:	607a      	str	r2, [r7, #4]
    // snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
    // Print to pcWriteBuffer in order.
    // If the string is too long to print, print what you can.
    // The function you write will be useful in the future.
    uint8_t buffer[64];
    uint8_t count = SeesawGetKeypadCount();
   13480:	235f      	movs	r3, #95	; 0x5f
   13482:	18fc      	adds	r4, r7, r3
   13484:	4b36      	ldr	r3, [pc, #216]	; (13560 <CLI_NeotrellProcessButtonBuffer+0xec>)
   13486:	4798      	blx	r3
   13488:	0003      	movs	r3, r0
   1348a:	7023      	strb	r3, [r4, #0]
    if (count >= 1) {
   1348c:	235f      	movs	r3, #95	; 0x5f
   1348e:	18fb      	adds	r3, r7, r3
   13490:	781b      	ldrb	r3, [r3, #0]
   13492:	2b00      	cmp	r3, #0
   13494:	d05d      	beq.n	13552 <CLI_NeotrellProcessButtonBuffer+0xde>
        int32_t res = SeesawReadKeypad(buffer, 1);
   13496:	2310      	movs	r3, #16
   13498:	18fb      	adds	r3, r7, r3
   1349a:	2101      	movs	r1, #1
   1349c:	0018      	movs	r0, r3
   1349e:	4b31      	ldr	r3, [pc, #196]	; (13564 <CLI_NeotrellProcessButtonBuffer+0xf0>)
   134a0:	4798      	blx	r3
   134a2:	0003      	movs	r3, r0
   134a4:	65bb      	str	r3, [r7, #88]	; 0x58
        if (res == 0) {
   134a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   134a8:	2b00      	cmp	r3, #0
   134aa:	d150      	bne.n	1354e <CLI_NeotrellProcessButtonBuffer+0xda>
            uint8_t pos, press;
            press = buffer[0] & 0x3;
   134ac:	2310      	movs	r3, #16
   134ae:	18fb      	adds	r3, r7, r3
   134b0:	781a      	ldrb	r2, [r3, #0]
   134b2:	2357      	movs	r3, #87	; 0x57
   134b4:	18fb      	adds	r3, r7, r3
   134b6:	2103      	movs	r1, #3
   134b8:	400a      	ands	r2, r1
   134ba:	701a      	strb	r2, [r3, #0]
            pos = buffer[0] >> 2;
   134bc:	2310      	movs	r3, #16
   134be:	18fb      	adds	r3, r7, r3
   134c0:	781a      	ldrb	r2, [r3, #0]
   134c2:	2356      	movs	r3, #86	; 0x56
   134c4:	18fb      	adds	r3, r7, r3
   134c6:	0892      	lsrs	r2, r2, #2
   134c8:	701a      	strb	r2, [r3, #0]
            int num = NEO_TRELLIS_SEESAW_KEY(pos);
   134ca:	2356      	movs	r3, #86	; 0x56
   134cc:	18fb      	adds	r3, r7, r3
   134ce:	781b      	ldrb	r3, [r3, #0]
   134d0:	08db      	lsrs	r3, r3, #3
   134d2:	b2db      	uxtb	r3, r3
   134d4:	009a      	lsls	r2, r3, #2
   134d6:	2356      	movs	r3, #86	; 0x56
   134d8:	18fb      	adds	r3, r7, r3
   134da:	781b      	ldrb	r3, [r3, #0]
   134dc:	2107      	movs	r1, #7
   134de:	400b      	ands	r3, r1
   134e0:	18d3      	adds	r3, r2, r3
   134e2:	653b      	str	r3, [r7, #80]	; 0x50
            if (press == 0x2) {
   134e4:	2357      	movs	r3, #87	; 0x57
   134e6:	18fb      	adds	r3, r7, r3
   134e8:	781b      	ldrb	r3, [r3, #0]
   134ea:	2b02      	cmp	r3, #2
   134ec:	d115      	bne.n	1351a <CLI_NeotrellProcessButtonBuffer+0xa6>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   134ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   134f0:	2b00      	cmp	r3, #0
   134f2:	da00      	bge.n	134f6 <CLI_NeotrellProcessButtonBuffer+0x82>
   134f4:	3307      	adds	r3, #7
   134f6:	10db      	asrs	r3, r3, #3
   134f8:	009a      	lsls	r2, r3, #2
   134fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   134fc:	491a      	ldr	r1, [pc, #104]	; (13568 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   134fe:	400b      	ands	r3, r1
   13500:	d504      	bpl.n	1350c <CLI_NeotrellProcessButtonBuffer+0x98>
   13502:	3b01      	subs	r3, #1
   13504:	2108      	movs	r1, #8
   13506:	4249      	negs	r1, r1
   13508:	430b      	orrs	r3, r1
   1350a:	3301      	adds	r3, #1
   1350c:	18d3      	adds	r3, r2, r3
   1350e:	4a17      	ldr	r2, [pc, #92]	; (1356c <CLI_NeotrellProcessButtonBuffer+0xf8>)
   13510:	68b9      	ldr	r1, [r7, #8]
   13512:	68f8      	ldr	r0, [r7, #12]
   13514:	4c16      	ldr	r4, [pc, #88]	; (13570 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13516:	47a0      	blx	r4
   13518:	e019      	b.n	1354e <CLI_NeotrellProcessButtonBuffer+0xda>
            } else if (press == 0x3) {
   1351a:	2357      	movs	r3, #87	; 0x57
   1351c:	18fb      	adds	r3, r7, r3
   1351e:	781b      	ldrb	r3, [r3, #0]
   13520:	2b03      	cmp	r3, #3
   13522:	d114      	bne.n	1354e <CLI_NeotrellProcessButtonBuffer+0xda>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   13524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13526:	2b00      	cmp	r3, #0
   13528:	da00      	bge.n	1352c <CLI_NeotrellProcessButtonBuffer+0xb8>
   1352a:	3307      	adds	r3, #7
   1352c:	10db      	asrs	r3, r3, #3
   1352e:	009a      	lsls	r2, r3, #2
   13530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13532:	490d      	ldr	r1, [pc, #52]	; (13568 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13534:	400b      	ands	r3, r1
   13536:	d504      	bpl.n	13542 <CLI_NeotrellProcessButtonBuffer+0xce>
   13538:	3b01      	subs	r3, #1
   1353a:	2108      	movs	r1, #8
   1353c:	4249      	negs	r1, r1
   1353e:	430b      	orrs	r3, r1
   13540:	3301      	adds	r3, #1
   13542:	18d3      	adds	r3, r2, r3
   13544:	4a0b      	ldr	r2, [pc, #44]	; (13574 <CLI_NeotrellProcessButtonBuffer+0x100>)
   13546:	68b9      	ldr	r1, [r7, #8]
   13548:	68f8      	ldr	r0, [r7, #12]
   1354a:	4c09      	ldr	r4, [pc, #36]	; (13570 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   1354c:	47a0      	blx	r4
            }
        }
        return pdTRUE;
   1354e:	2301      	movs	r3, #1
   13550:	e002      	b.n	13558 <CLI_NeotrellProcessButtonBuffer+0xe4>
    } else {
        pcWriteBuffer = 0;
   13552:	2300      	movs	r3, #0
   13554:	60fb      	str	r3, [r7, #12]
        return pdFALSE;
   13556:	2300      	movs	r3, #0
    }
}
   13558:	0018      	movs	r0, r3
   1355a:	46bd      	mov	sp, r7
   1355c:	b019      	add	sp, #100	; 0x64
   1355e:	bd90      	pop	{r4, r7, pc}
   13560:	00015071 	.word	0x00015071
   13564:	000150d9 	.word	0x000150d9
   13568:	80000007 	.word	0x80000007
   1356c:	00035d88 	.word	0x00035d88
   13570:	00034939 	.word	0x00034939
   13574:	00035da4 	.word	0x00035da4

00013578 <CLI_SendDummyGameData>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_SendDummyGameData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13578:	b580      	push	{r7, lr}
   1357a:	b08a      	sub	sp, #40	; 0x28
   1357c:	af00      	add	r7, sp, #0
   1357e:	60f8      	str	r0, [r7, #12]
   13580:	60b9      	str	r1, [r7, #8]
   13582:	607a      	str	r2, [r7, #4]
    struct GameDataPacket gamevar;

    gamevar.game[0] = 0;
   13584:	2310      	movs	r3, #16
   13586:	18fb      	adds	r3, r7, r3
   13588:	2200      	movs	r2, #0
   1358a:	701a      	strb	r2, [r3, #0]
    gamevar.game[1] = 1;
   1358c:	2310      	movs	r3, #16
   1358e:	18fb      	adds	r3, r7, r3
   13590:	2201      	movs	r2, #1
   13592:	705a      	strb	r2, [r3, #1]
    gamevar.game[2] = 2;
   13594:	2310      	movs	r3, #16
   13596:	18fb      	adds	r3, r7, r3
   13598:	2202      	movs	r2, #2
   1359a:	709a      	strb	r2, [r3, #2]
    gamevar.game[3] = 3;
   1359c:	2310      	movs	r3, #16
   1359e:	18fb      	adds	r3, r7, r3
   135a0:	2203      	movs	r2, #3
   135a2:	70da      	strb	r2, [r3, #3]
    gamevar.game[4] = 4;
   135a4:	2310      	movs	r3, #16
   135a6:	18fb      	adds	r3, r7, r3
   135a8:	2204      	movs	r2, #4
   135aa:	711a      	strb	r2, [r3, #4]
    gamevar.game[5] = 5;
   135ac:	2310      	movs	r3, #16
   135ae:	18fb      	adds	r3, r7, r3
   135b0:	2205      	movs	r2, #5
   135b2:	715a      	strb	r2, [r3, #5]
    gamevar.game[6] = 6;
   135b4:	2310      	movs	r3, #16
   135b6:	18fb      	adds	r3, r7, r3
   135b8:	2206      	movs	r2, #6
   135ba:	719a      	strb	r2, [r3, #6]
    gamevar.game[7] = 7;
   135bc:	2310      	movs	r3, #16
   135be:	18fb      	adds	r3, r7, r3
   135c0:	2207      	movs	r2, #7
   135c2:	71da      	strb	r2, [r3, #7]
    gamevar.game[8] = 8;
   135c4:	2310      	movs	r3, #16
   135c6:	18fb      	adds	r3, r7, r3
   135c8:	2208      	movs	r2, #8
   135ca:	721a      	strb	r2, [r3, #8]
    gamevar.game[9] = 9;
   135cc:	2310      	movs	r3, #16
   135ce:	18fb      	adds	r3, r7, r3
   135d0:	2209      	movs	r2, #9
   135d2:	725a      	strb	r2, [r3, #9]
    gamevar.game[10] = 0xFF;
   135d4:	2310      	movs	r3, #16
   135d6:	18fb      	adds	r3, r7, r3
   135d8:	22ff      	movs	r2, #255	; 0xff
   135da:	729a      	strb	r2, [r3, #10]

    int error = WifiAddGameDataToQueue(&gamevar);
   135dc:	2310      	movs	r3, #16
   135de:	18fb      	adds	r3, r7, r3
   135e0:	0018      	movs	r0, r3
   135e2:	4b09      	ldr	r3, [pc, #36]	; (13608 <CLI_SendDummyGameData+0x90>)
   135e4:	4798      	blx	r3
   135e6:	0003      	movs	r3, r0
   135e8:	627b      	str	r3, [r7, #36]	; 0x24
    if (error == pdTRUE) {
   135ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   135ec:	2b01      	cmp	r3, #1
   135ee:	d105      	bne.n	135fc <CLI_SendDummyGameData+0x84>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
   135f0:	4a06      	ldr	r2, [pc, #24]	; (1360c <CLI_SendDummyGameData+0x94>)
   135f2:	68b9      	ldr	r1, [r7, #8]
   135f4:	68fb      	ldr	r3, [r7, #12]
   135f6:	0018      	movs	r0, r3
   135f8:	4b05      	ldr	r3, [pc, #20]	; (13610 <CLI_SendDummyGameData+0x98>)
   135fa:	4798      	blx	r3
    }
    return pdFALSE;
   135fc:	2300      	movs	r3, #0
}
   135fe:	0018      	movs	r0, r3
   13600:	46bd      	mov	sp, r7
   13602:	b00a      	add	sp, #40	; 0x28
   13604:	bd80      	pop	{r7, pc}
   13606:	46c0      	nop			; (mov r8, r8)
   13608:	000171dd 	.word	0x000171dd
   1360c:	00035dbc 	.word	0x00035dbc
   13610:	00034939 	.word	0x00034939

00013614 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13614:	b590      	push	{r4, r7, lr}
   13616:	b08f      	sub	sp, #60	; 0x3c
   13618:	af00      	add	r7, sp, #0
   1361a:	60f8      	str	r0, [r7, #12]
   1361c:	60b9      	str	r1, [r7, #8]
   1361e:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   13620:	2318      	movs	r3, #24
   13622:	18fb      	adds	r3, r7, r3
   13624:	2200      	movs	r2, #0
   13626:	701a      	strb	r2, [r3, #0]
   13628:	2318      	movs	r3, #24
   1362a:	18fb      	adds	r3, r7, r3
   1362c:	2200      	movs	r2, #0
   1362e:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   13630:	2318      	movs	r3, #24
   13632:	18fb      	adds	r3, r7, r3
   13634:	2200      	movs	r2, #0
   13636:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   13638:	2318      	movs	r3, #24
   1363a:	18fb      	adds	r3, r7, r3
   1363c:	2200      	movs	r2, #0
   1363e:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   13640:	231c      	movs	r3, #28
   13642:	18fb      	adds	r3, r7, r3
   13644:	2200      	movs	r2, #0
   13646:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   13648:	231c      	movs	r3, #28
   1364a:	18fb      	adds	r3, r7, r3
   1364c:	2214      	movs	r2, #20
   1364e:	18ba      	adds	r2, r7, r2
   13650:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   13652:	231c      	movs	r3, #28
   13654:	18fb      	adds	r3, r7, r3
   13656:	2201      	movs	r2, #1
   13658:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   1365a:	231c      	movs	r3, #28
   1365c:	18fb      	adds	r3, r7, r3
   1365e:	2218      	movs	r2, #24
   13660:	18ba      	adds	r2, r7, r2
   13662:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   13664:	231c      	movs	r3, #28
   13666:	18fb      	adds	r3, r7, r3
   13668:	2201      	movs	r2, #1
   1366a:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   1366c:	4b2a      	ldr	r3, [pc, #168]	; (13718 <CLI_i2cScan+0x104>)
   1366e:	0018      	movs	r0, r3
   13670:	4b2a      	ldr	r3, [pc, #168]	; (1371c <CLI_i2cScan+0x108>)
   13672:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13674:	2300      	movs	r3, #0
   13676:	637b      	str	r3, [r7, #52]	; 0x34
   13678:	e042      	b.n	13700 <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   1367a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1367c:	4a28      	ldr	r2, [pc, #160]	; (13720 <CLI_i2cScan+0x10c>)
   1367e:	4829      	ldr	r0, [pc, #164]	; (13724 <CLI_i2cScan+0x110>)
   13680:	210f      	movs	r1, #15
   13682:	4c29      	ldr	r4, [pc, #164]	; (13728 <CLI_i2cScan+0x114>)
   13684:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   13686:	4b27      	ldr	r3, [pc, #156]	; (13724 <CLI_i2cScan+0x110>)
   13688:	0018      	movs	r0, r3
   1368a:	4b24      	ldr	r3, [pc, #144]	; (1371c <CLI_i2cScan+0x108>)
   1368c:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   1368e:	2300      	movs	r3, #0
   13690:	633b      	str	r3, [r7, #48]	; 0x30
   13692:	e02b      	b.n	136ec <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   13694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13696:	b2da      	uxtb	r2, r3
   13698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1369a:	b2db      	uxtb	r3, r3
   1369c:	18d3      	adds	r3, r2, r3
   1369e:	b2da      	uxtb	r2, r3
   136a0:	231c      	movs	r3, #28
   136a2:	18fb      	adds	r3, r7, r3
   136a4:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cReadDataWait(&i2cOled, 100, 100);
   136a6:	231c      	movs	r3, #28
   136a8:	18fb      	adds	r3, r7, r3
   136aa:	2264      	movs	r2, #100	; 0x64
   136ac:	2164      	movs	r1, #100	; 0x64
   136ae:	0018      	movs	r0, r3
   136b0:	4b1e      	ldr	r3, [pc, #120]	; (1372c <CLI_i2cScan+0x118>)
   136b2:	4798      	blx	r3
   136b4:	0003      	movs	r3, r0
   136b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   136b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   136ba:	2b00      	cmp	r3, #0
   136bc:	d10c      	bne.n	136d8 <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   136be:	231c      	movs	r3, #28
   136c0:	18fb      	adds	r3, r7, r3
   136c2:	781b      	ldrb	r3, [r3, #0]
   136c4:	4a1a      	ldr	r2, [pc, #104]	; (13730 <CLI_i2cScan+0x11c>)
   136c6:	4817      	ldr	r0, [pc, #92]	; (13724 <CLI_i2cScan+0x110>)
   136c8:	210f      	movs	r1, #15
   136ca:	4c17      	ldr	r4, [pc, #92]	; (13728 <CLI_i2cScan+0x114>)
   136cc:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   136ce:	4b15      	ldr	r3, [pc, #84]	; (13724 <CLI_i2cScan+0x110>)
   136d0:	0018      	movs	r0, r3
   136d2:	4b12      	ldr	r3, [pc, #72]	; (1371c <CLI_i2cScan+0x108>)
   136d4:	4798      	blx	r3
   136d6:	e006      	b.n	136e6 <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   136d8:	4b12      	ldr	r3, [pc, #72]	; (13724 <CLI_i2cScan+0x110>)
   136da:	4a16      	ldr	r2, [pc, #88]	; (13734 <CLI_i2cScan+0x120>)
   136dc:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   136de:	4b11      	ldr	r3, [pc, #68]	; (13724 <CLI_i2cScan+0x110>)
   136e0:	0018      	movs	r0, r3
   136e2:	4b0e      	ldr	r3, [pc, #56]	; (1371c <CLI_i2cScan+0x108>)
   136e4:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   136e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   136e8:	3301      	adds	r3, #1
   136ea:	633b      	str	r3, [r7, #48]	; 0x30
   136ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   136ee:	2b0f      	cmp	r3, #15
   136f0:	ddd0      	ble.n	13694 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   136f2:	4b11      	ldr	r3, [pc, #68]	; (13738 <CLI_i2cScan+0x124>)
   136f4:	0018      	movs	r0, r3
   136f6:	4b09      	ldr	r3, [pc, #36]	; (1371c <CLI_i2cScan+0x108>)
   136f8:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   136fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   136fc:	3310      	adds	r3, #16
   136fe:	637b      	str	r3, [r7, #52]	; 0x34
   13700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13702:	2b7f      	cmp	r3, #127	; 0x7f
   13704:	ddb9      	ble.n	1367a <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   13706:	4b0c      	ldr	r3, [pc, #48]	; (13738 <CLI_i2cScan+0x124>)
   13708:	0018      	movs	r0, r3
   1370a:	4b04      	ldr	r3, [pc, #16]	; (1371c <CLI_i2cScan+0x108>)
   1370c:	4798      	blx	r3
			return pdFALSE;
   1370e:	2300      	movs	r3, #0

}
   13710:	0018      	movs	r0, r3
   13712:	46bd      	mov	sp, r7
   13714:	b00f      	add	sp, #60	; 0x3c
   13716:	bd90      	pop	{r4, r7, pc}
   13718:	00035dd8 	.word	0x00035dd8
   1371c:	0001da95 	.word	0x0001da95
   13720:	00035e0c 	.word	0x00035e0c
   13724:	200003a4 	.word	0x200003a4
   13728:	00034939 	.word	0x00034939
   1372c:	00013f4d 	.word	0x00013f4d
   13730:	00035e14 	.word	0x00035e14
   13734:	00202058 	.word	0x00202058
   13738:	00035cd8 	.word	0x00035cd8

0001373c <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   1373c:	b580      	push	{r7, lr}
   1373e:	b088      	sub	sp, #32
   13740:	af00      	add	r7, sp, #0
   13742:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   13744:	4b33      	ldr	r3, [pc, #204]	; (13814 <vControlHandlerTask+0xd8>)
   13746:	0018      	movs	r0, r3
   13748:	4b33      	ldr	r3, [pc, #204]	; (13818 <vControlHandlerTask+0xdc>)
   1374a:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   1374c:	2200      	movs	r2, #0
   1374e:	2114      	movs	r1, #20
   13750:	2002      	movs	r0, #2
   13752:	4b32      	ldr	r3, [pc, #200]	; (1381c <vControlHandlerTask+0xe0>)
   13754:	4798      	blx	r3
   13756:	0002      	movs	r2, r0
   13758:	4b31      	ldr	r3, [pc, #196]	; (13820 <vControlHandlerTask+0xe4>)
   1375a:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   1375c:	2200      	movs	r2, #0
   1375e:	2103      	movs	r1, #3
   13760:	2002      	movs	r0, #2
   13762:	4b2e      	ldr	r3, [pc, #184]	; (1381c <vControlHandlerTask+0xe0>)
   13764:	4798      	blx	r3
   13766:	0002      	movs	r2, r0
   13768:	4b2e      	ldr	r3, [pc, #184]	; (13824 <vControlHandlerTask+0xe8>)
   1376a:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   1376c:	4b2c      	ldr	r3, [pc, #176]	; (13820 <vControlHandlerTask+0xe4>)
   1376e:	681b      	ldr	r3, [r3, #0]
   13770:	2b00      	cmp	r3, #0
   13772:	d003      	beq.n	1377c <vControlHandlerTask+0x40>
   13774:	4b2b      	ldr	r3, [pc, #172]	; (13824 <vControlHandlerTask+0xe8>)
   13776:	681b      	ldr	r3, [r3, #0]
   13778:	2b00      	cmp	r3, #0
   1377a:	d103      	bne.n	13784 <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   1377c:	4b2a      	ldr	r3, [pc, #168]	; (13828 <vControlHandlerTask+0xec>)
   1377e:	0018      	movs	r0, r3
   13780:	4b25      	ldr	r3, [pc, #148]	; (13818 <vControlHandlerTask+0xdc>)
   13782:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   13784:	4b29      	ldr	r3, [pc, #164]	; (1382c <vControlHandlerTask+0xf0>)
   13786:	2200      	movs	r2, #0
   13788:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   1378a:	4b28      	ldr	r3, [pc, #160]	; (1382c <vControlHandlerTask+0xf0>)
   1378c:	781b      	ldrb	r3, [r3, #0]
   1378e:	2b01      	cmp	r3, #1
   13790:	d01d      	beq.n	137ce <vControlHandlerTask+0x92>
   13792:	2b02      	cmp	r3, #2
   13794:	d035      	beq.n	13802 <vControlHandlerTask+0xc6>
   13796:	2b00      	cmp	r3, #0
   13798:	d12f      	bne.n	137fa <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   1379a:	4b21      	ldr	r3, [pc, #132]	; (13820 <vControlHandlerTask+0xe4>)
   1379c:	681b      	ldr	r3, [r3, #0]
   1379e:	220c      	movs	r2, #12
   137a0:	18b9      	adds	r1, r7, r2
   137a2:	2200      	movs	r2, #0
   137a4:	0018      	movs	r0, r3
   137a6:	4b22      	ldr	r3, [pc, #136]	; (13830 <vControlHandlerTask+0xf4>)
   137a8:	4798      	blx	r3
   137aa:	0003      	movs	r3, r0
   137ac:	2b01      	cmp	r3, #1
   137ae:	d12a      	bne.n	13806 <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   137b0:	4b20      	ldr	r3, [pc, #128]	; (13834 <vControlHandlerTask+0xf8>)
   137b2:	0019      	movs	r1, r3
   137b4:	2001      	movs	r0, #1
   137b6:	4b20      	ldr	r3, [pc, #128]	; (13838 <vControlHandlerTask+0xfc>)
   137b8:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   137ba:	230c      	movs	r3, #12
   137bc:	18fb      	adds	r3, r7, r3
   137be:	0018      	movs	r0, r3
   137c0:	4b1e      	ldr	r3, [pc, #120]	; (1383c <vControlHandlerTask+0x100>)
   137c2:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   137c4:	4b19      	ldr	r3, [pc, #100]	; (1382c <vControlHandlerTask+0xf0>)
   137c6:	2201      	movs	r2, #1
   137c8:	701a      	strb	r2, [r3, #0]
                }

                break;
   137ca:	46c0      	nop			; (mov r8, r8)
   137cc:	e01b      	b.n	13806 <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   137ce:	4b1c      	ldr	r3, [pc, #112]	; (13840 <vControlHandlerTask+0x104>)
   137d0:	4798      	blx	r3
   137d2:	1e03      	subs	r3, r0, #0
   137d4:	d019      	beq.n	1380a <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   137d6:	4b1b      	ldr	r3, [pc, #108]	; (13844 <vControlHandlerTask+0x108>)
   137d8:	4798      	blx	r3
   137da:	0003      	movs	r3, r0
   137dc:	0018      	movs	r0, r3
   137de:	4b1a      	ldr	r3, [pc, #104]	; (13848 <vControlHandlerTask+0x10c>)
   137e0:	4798      	blx	r3
   137e2:	0003      	movs	r3, r0
   137e4:	2b01      	cmp	r3, #1
   137e6:	d004      	beq.n	137f2 <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   137e8:	4b18      	ldr	r3, [pc, #96]	; (1384c <vControlHandlerTask+0x110>)
   137ea:	0019      	movs	r1, r3
   137ec:	2001      	movs	r0, #1
   137ee:	4b12      	ldr	r3, [pc, #72]	; (13838 <vControlHandlerTask+0xfc>)
   137f0:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
   137f2:	4b0e      	ldr	r3, [pc, #56]	; (1382c <vControlHandlerTask+0xf0>)
   137f4:	2200      	movs	r2, #0
   137f6:	701a      	strb	r2, [r3, #0]
                }

                break;
   137f8:	e007      	b.n	1380a <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   137fa:	4b0c      	ldr	r3, [pc, #48]	; (1382c <vControlHandlerTask+0xf0>)
   137fc:	2200      	movs	r2, #0
   137fe:	701a      	strb	r2, [r3, #0]
                break;
   13800:	e004      	b.n	1380c <vControlHandlerTask+0xd0>
                break;
   13802:	46c0      	nop			; (mov r8, r8)
   13804:	e002      	b.n	1380c <vControlHandlerTask+0xd0>
                break;
   13806:	46c0      	nop			; (mov r8, r8)
   13808:	e000      	b.n	1380c <vControlHandlerTask+0xd0>
                break;
   1380a:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   1380c:	2028      	movs	r0, #40	; 0x28
   1380e:	4b10      	ldr	r3, [pc, #64]	; (13850 <vControlHandlerTask+0x114>)
   13810:	4798      	blx	r3
        switch (controlState) {
   13812:	e7ba      	b.n	1378a <vControlHandlerTask+0x4e>
   13814:	00035eac 	.word	0x00035eac
   13818:	0001da95 	.word	0x0001da95
   1381c:	0001a135 	.word	0x0001a135
   13820:	200004a4 	.word	0x200004a4
   13824:	200004a8 	.word	0x200004a8
   13828:	00035ecc 	.word	0x00035ecc
   1382c:	20004634 	.word	0x20004634
   13830:	0001ac95 	.word	0x0001ac95
   13834:	00035ef8 	.word	0x00035ef8
   13838:	0001db81 	.word	0x0001db81
   1383c:	00015861 	.word	0x00015861
   13840:	0001589d 	.word	0x0001589d
   13844:	000158b1 	.word	0x000158b1
   13848:	000171dd 	.word	0x000171dd
   1384c:	00035f20 	.word	0x00035f20
   13850:	0001be41 	.word	0x0001be41

00013854 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   13854:	b590      	push	{r4, r7, lr}
   13856:	b085      	sub	sp, #20
   13858:	af00      	add	r7, sp, #0
   1385a:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   1385c:	4b06      	ldr	r3, [pc, #24]	; (13878 <ControlAddGameData+0x24>)
   1385e:	6818      	ldr	r0, [r3, #0]
   13860:	6879      	ldr	r1, [r7, #4]
   13862:	2300      	movs	r3, #0
   13864:	220a      	movs	r2, #10
   13866:	4c05      	ldr	r4, [pc, #20]	; (1387c <ControlAddGameData+0x28>)
   13868:	47a0      	blx	r4
   1386a:	0003      	movs	r3, r0
   1386c:	60fb      	str	r3, [r7, #12]
    return error;
   1386e:	68fb      	ldr	r3, [r7, #12]
}
   13870:	0018      	movs	r0, r3
   13872:	46bd      	mov	sp, r7
   13874:	b005      	add	sp, #20
   13876:	bd90      	pop	{r4, r7, pc}
   13878:	200004a4 	.word	0x200004a4
   1387c:	0001a3dd 	.word	0x0001a3dd

00013880 <system_interrupt_enable>:
{
   13880:	b580      	push	{r7, lr}
   13882:	b082      	sub	sp, #8
   13884:	af00      	add	r7, sp, #0
   13886:	0002      	movs	r2, r0
   13888:	1dfb      	adds	r3, r7, #7
   1388a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1388c:	4b06      	ldr	r3, [pc, #24]	; (138a8 <system_interrupt_enable+0x28>)
   1388e:	1dfa      	adds	r2, r7, #7
   13890:	7812      	ldrb	r2, [r2, #0]
   13892:	0011      	movs	r1, r2
   13894:	221f      	movs	r2, #31
   13896:	400a      	ands	r2, r1
   13898:	2101      	movs	r1, #1
   1389a:	4091      	lsls	r1, r2
   1389c:	000a      	movs	r2, r1
   1389e:	601a      	str	r2, [r3, #0]
}
   138a0:	46c0      	nop			; (mov r8, r8)
   138a2:	46bd      	mov	sp, r7
   138a4:	b002      	add	sp, #8
   138a6:	bd80      	pop	{r7, pc}
   138a8:	e000e100 	.word	0xe000e100

000138ac <i2c_master_is_syncing>:
{
   138ac:	b580      	push	{r7, lr}
   138ae:	b084      	sub	sp, #16
   138b0:	af00      	add	r7, sp, #0
   138b2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   138b4:	687b      	ldr	r3, [r7, #4]
   138b6:	681b      	ldr	r3, [r3, #0]
   138b8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   138ba:	68fb      	ldr	r3, [r7, #12]
   138bc:	69db      	ldr	r3, [r3, #28]
   138be:	2207      	movs	r2, #7
   138c0:	4013      	ands	r3, r2
   138c2:	1e5a      	subs	r2, r3, #1
   138c4:	4193      	sbcs	r3, r2
   138c6:	b2db      	uxtb	r3, r3
}
   138c8:	0018      	movs	r0, r3
   138ca:	46bd      	mov	sp, r7
   138cc:	b004      	add	sp, #16
   138ce:	bd80      	pop	{r7, pc}

000138d0 <_i2c_master_wait_for_sync>:
{
   138d0:	b580      	push	{r7, lr}
   138d2:	b082      	sub	sp, #8
   138d4:	af00      	add	r7, sp, #0
   138d6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   138d8:	46c0      	nop			; (mov r8, r8)
   138da:	687b      	ldr	r3, [r7, #4]
   138dc:	0018      	movs	r0, r3
   138de:	4b04      	ldr	r3, [pc, #16]	; (138f0 <_i2c_master_wait_for_sync+0x20>)
   138e0:	4798      	blx	r3
   138e2:	1e03      	subs	r3, r0, #0
   138e4:	d1f9      	bne.n	138da <_i2c_master_wait_for_sync+0xa>
}
   138e6:	46c0      	nop			; (mov r8, r8)
   138e8:	46bd      	mov	sp, r7
   138ea:	b002      	add	sp, #8
   138ec:	bd80      	pop	{r7, pc}
   138ee:	46c0      	nop			; (mov r8, r8)
   138f0:	000138ad 	.word	0x000138ad

000138f4 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   138f4:	b580      	push	{r7, lr}
   138f6:	b082      	sub	sp, #8
   138f8:	af00      	add	r7, sp, #0
   138fa:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   138fc:	687b      	ldr	r3, [r7, #4]
   138fe:	2264      	movs	r2, #100	; 0x64
   13900:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   13902:	687b      	ldr	r3, [r7, #4]
   13904:	4a1b      	ldr	r2, [pc, #108]	; (13974 <i2c_master_get_config_defaults+0x80>)
   13906:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   13908:	687b      	ldr	r3, [r7, #4]
   1390a:	2200      	movs	r2, #0
   1390c:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   1390e:	687b      	ldr	r3, [r7, #4]
   13910:	2200      	movs	r2, #0
   13912:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   13914:	687b      	ldr	r3, [r7, #4]
   13916:	2200      	movs	r2, #0
   13918:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   1391a:	687b      	ldr	r3, [r7, #4]
   1391c:	2280      	movs	r2, #128	; 0x80
   1391e:	0392      	lsls	r2, r2, #14
   13920:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   13922:	687b      	ldr	r3, [r7, #4]
   13924:	2201      	movs	r2, #1
   13926:	4252      	negs	r2, r2
   13928:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   1392a:	687b      	ldr	r3, [r7, #4]
   1392c:	2201      	movs	r2, #1
   1392e:	4252      	negs	r2, r2
   13930:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   13932:	687b      	ldr	r3, [r7, #4]
   13934:	2200      	movs	r2, #0
   13936:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   13938:	687b      	ldr	r3, [r7, #4]
   1393a:	2200      	movs	r2, #0
   1393c:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   1393e:	687b      	ldr	r3, [r7, #4]
   13940:	2224      	movs	r2, #36	; 0x24
   13942:	2100      	movs	r1, #0
   13944:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   13946:	687b      	ldr	r3, [r7, #4]
   13948:	2200      	movs	r2, #0
   1394a:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   1394c:	687b      	ldr	r3, [r7, #4]
   1394e:	222c      	movs	r2, #44	; 0x2c
   13950:	2100      	movs	r1, #0
   13952:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   13954:	687b      	ldr	r3, [r7, #4]
   13956:	222d      	movs	r2, #45	; 0x2d
   13958:	2100      	movs	r1, #0
   1395a:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   1395c:	687b      	ldr	r3, [r7, #4]
   1395e:	222e      	movs	r2, #46	; 0x2e
   13960:	2100      	movs	r1, #0
   13962:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13964:	687b      	ldr	r3, [r7, #4]
   13966:	22d7      	movs	r2, #215	; 0xd7
   13968:	861a      	strh	r2, [r3, #48]	; 0x30
}
   1396a:	46c0      	nop			; (mov r8, r8)
   1396c:	46bd      	mov	sp, r7
   1396e:	b002      	add	sp, #8
   13970:	bd80      	pop	{r7, pc}
   13972:	46c0      	nop			; (mov r8, r8)
   13974:	00000d48 	.word	0x00000d48

00013978 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   13978:	b580      	push	{r7, lr}
   1397a:	b084      	sub	sp, #16
   1397c:	af00      	add	r7, sp, #0
   1397e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13980:	687b      	ldr	r3, [r7, #4]
   13982:	681b      	ldr	r3, [r3, #0]
   13984:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   13986:	2300      	movs	r3, #0
   13988:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   1398a:	687b      	ldr	r3, [r7, #4]
   1398c:	0018      	movs	r0, r3
   1398e:	4b14      	ldr	r3, [pc, #80]	; (139e0 <i2c_master_enable+0x68>)
   13990:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   13992:	68bb      	ldr	r3, [r7, #8]
   13994:	681b      	ldr	r3, [r3, #0]
   13996:	2202      	movs	r2, #2
   13998:	431a      	orrs	r2, r3
   1399a:	68bb      	ldr	r3, [r7, #8]
   1399c:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1399e:	687b      	ldr	r3, [r7, #4]
   139a0:	681b      	ldr	r3, [r3, #0]
   139a2:	0018      	movs	r0, r3
   139a4:	4b0f      	ldr	r3, [pc, #60]	; (139e4 <i2c_master_enable+0x6c>)
   139a6:	4798      	blx	r3
   139a8:	0003      	movs	r3, r0
   139aa:	0018      	movs	r0, r3
   139ac:	4b0e      	ldr	r3, [pc, #56]	; (139e8 <i2c_master_enable+0x70>)
   139ae:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   139b0:	e00c      	b.n	139cc <i2c_master_enable+0x54>
		timeout_counter++;
   139b2:	68fb      	ldr	r3, [r7, #12]
   139b4:	3301      	adds	r3, #1
   139b6:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   139b8:	687b      	ldr	r3, [r7, #4]
   139ba:	88db      	ldrh	r3, [r3, #6]
   139bc:	001a      	movs	r2, r3
   139be:	68fb      	ldr	r3, [r7, #12]
   139c0:	429a      	cmp	r2, r3
   139c2:	d803      	bhi.n	139cc <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   139c4:	68bb      	ldr	r3, [r7, #8]
   139c6:	2210      	movs	r2, #16
   139c8:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   139ca:	e006      	b.n	139da <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   139cc:	68bb      	ldr	r3, [r7, #8]
   139ce:	8b5b      	ldrh	r3, [r3, #26]
   139d0:	b29b      	uxth	r3, r3
   139d2:	001a      	movs	r2, r3
   139d4:	2310      	movs	r3, #16
   139d6:	4013      	ands	r3, r2
   139d8:	d0eb      	beq.n	139b2 <i2c_master_enable+0x3a>
		}
	}
}
   139da:	46bd      	mov	sp, r7
   139dc:	b004      	add	sp, #16
   139de:	bd80      	pop	{r7, pc}
   139e0:	000138d1 	.word	0x000138d1
   139e4:	000273a9 	.word	0x000273a9
   139e8:	00013881 	.word	0x00013881

000139ec <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   139ec:	b580      	push	{r7, lr}
   139ee:	b082      	sub	sp, #8
   139f0:	af00      	add	r7, sp, #0
   139f2:	6078      	str	r0, [r7, #4]
   139f4:	000a      	movs	r2, r1
   139f6:	1cfb      	adds	r3, r7, #3
   139f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   139fa:	687b      	ldr	r3, [r7, #4]
   139fc:	7e5b      	ldrb	r3, [r3, #25]
   139fe:	b2db      	uxtb	r3, r3
   13a00:	b25a      	sxtb	r2, r3
   13a02:	1cfb      	adds	r3, r7, #3
   13a04:	781b      	ldrb	r3, [r3, #0]
   13a06:	2101      	movs	r1, #1
   13a08:	4099      	lsls	r1, r3
   13a0a:	000b      	movs	r3, r1
   13a0c:	b25b      	sxtb	r3, r3
   13a0e:	4313      	orrs	r3, r2
   13a10:	b25b      	sxtb	r3, r3
   13a12:	b2da      	uxtb	r2, r3
   13a14:	687b      	ldr	r3, [r7, #4]
   13a16:	765a      	strb	r2, [r3, #25]
}
   13a18:	46c0      	nop			; (mov r8, r8)
   13a1a:	46bd      	mov	sp, r7
   13a1c:	b002      	add	sp, #8
   13a1e:	bd80      	pop	{r7, pc}

00013a20 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   13a20:	b590      	push	{r4, r7, lr}
   13a22:	b091      	sub	sp, #68	; 0x44
   13a24:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13a26:	2300      	movs	r3, #0
   13a28:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   13a2a:	233a      	movs	r3, #58	; 0x3a
   13a2c:	18fb      	adds	r3, r7, r3
   13a2e:	2200      	movs	r2, #0
   13a30:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   13a32:	1d3b      	adds	r3, r7, #4
   13a34:	0018      	movs	r0, r3
   13a36:	4b21      	ldr	r3, [pc, #132]	; (13abc <I2cDriverConfigureSensorBus+0x9c>)
   13a38:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   13a3a:	1d3b      	adds	r3, r7, #4
   13a3c:	4a20      	ldr	r2, [pc, #128]	; (13ac0 <I2cDriverConfigureSensorBus+0xa0>)
   13a3e:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   13a40:	1d3b      	adds	r3, r7, #4
   13a42:	4a20      	ldr	r2, [pc, #128]	; (13ac4 <I2cDriverConfigureSensorBus+0xa4>)
   13a44:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   13a46:	1d3b      	adds	r3, r7, #4
   13a48:	22fa      	movs	r2, #250	; 0xfa
   13a4a:	0092      	lsls	r2, r2, #2
   13a4c:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13a4e:	233b      	movs	r3, #59	; 0x3b
   13a50:	18fb      	adds	r3, r7, r3
   13a52:	2203      	movs	r2, #3
   13a54:	701a      	strb	r2, [r3, #0]
   13a56:	e01e      	b.n	13a96 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   13a58:	233a      	movs	r3, #58	; 0x3a
   13a5a:	18fc      	adds	r4, r7, r3
   13a5c:	1d3a      	adds	r2, r7, #4
   13a5e:	491a      	ldr	r1, [pc, #104]	; (13ac8 <I2cDriverConfigureSensorBus+0xa8>)
   13a60:	4b1a      	ldr	r3, [pc, #104]	; (13acc <I2cDriverConfigureSensorBus+0xac>)
   13a62:	0018      	movs	r0, r3
   13a64:	4b1a      	ldr	r3, [pc, #104]	; (13ad0 <I2cDriverConfigureSensorBus+0xb0>)
   13a66:	4798      	blx	r3
   13a68:	0003      	movs	r3, r0
   13a6a:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   13a6c:	233a      	movs	r3, #58	; 0x3a
   13a6e:	18fb      	adds	r3, r7, r3
   13a70:	781b      	ldrb	r3, [r3, #0]
   13a72:	2b00      	cmp	r3, #0
   13a74:	d104      	bne.n	13a80 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   13a76:	233a      	movs	r3, #58	; 0x3a
   13a78:	18fb      	adds	r3, r7, r3
   13a7a:	781b      	ldrb	r3, [r3, #0]
   13a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   13a7e:	e00f      	b.n	13aa0 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   13a80:	4b12      	ldr	r3, [pc, #72]	; (13acc <I2cDriverConfigureSensorBus+0xac>)
   13a82:	0018      	movs	r0, r3
   13a84:	4b13      	ldr	r3, [pc, #76]	; (13ad4 <I2cDriverConfigureSensorBus+0xb4>)
   13a86:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13a88:	233b      	movs	r3, #59	; 0x3b
   13a8a:	18fb      	adds	r3, r7, r3
   13a8c:	781a      	ldrb	r2, [r3, #0]
   13a8e:	233b      	movs	r3, #59	; 0x3b
   13a90:	18fb      	adds	r3, r7, r3
   13a92:	3a01      	subs	r2, #1
   13a94:	701a      	strb	r2, [r3, #0]
   13a96:	233b      	movs	r3, #59	; 0x3b
   13a98:	18fb      	adds	r3, r7, r3
   13a9a:	781b      	ldrb	r3, [r3, #0]
   13a9c:	2b00      	cmp	r3, #0
   13a9e:	d1db      	bne.n	13a58 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   13aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13aa2:	2b00      	cmp	r3, #0
   13aa4:	d104      	bne.n	13ab0 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   13aa6:	4b09      	ldr	r3, [pc, #36]	; (13acc <I2cDriverConfigureSensorBus+0xac>)
   13aa8:	0018      	movs	r0, r3
   13aaa:	4b0b      	ldr	r3, [pc, #44]	; (13ad8 <I2cDriverConfigureSensorBus+0xb8>)
   13aac:	4798      	blx	r3
   13aae:	e000      	b.n	13ab2 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   13ab0:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   13ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   13ab4:	0018      	movs	r0, r3
   13ab6:	46bd      	mov	sp, r7
   13ab8:	b011      	add	sp, #68	; 0x44
   13aba:	bd90      	pop	{r4, r7, pc}
   13abc:	000138f5 	.word	0x000138f5
   13ac0:	00080002 	.word	0x00080002
   13ac4:	00090002 	.word	0x00090002
   13ac8:	42000800 	.word	0x42000800
   13acc:	2000463c 	.word	0x2000463c
   13ad0:	000177cd 	.word	0x000177cd
   13ad4:	00017901 	.word	0x00017901
   13ad8:	00013979 	.word	0x00013979

00013adc <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   13adc:	b580      	push	{r7, lr}
   13ade:	b084      	sub	sp, #16
   13ae0:	af00      	add	r7, sp, #0
   13ae2:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13ae4:	4b0e      	ldr	r3, [pc, #56]	; (13b20 <I2cSensorsTxComplete+0x44>)
   13ae6:	2200      	movs	r2, #0
   13ae8:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13aea:	4b0d      	ldr	r3, [pc, #52]	; (13b20 <I2cSensorsTxComplete+0x44>)
   13aec:	2201      	movs	r2, #1
   13aee:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13af0:	2300      	movs	r3, #0
   13af2:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13af4:	4b0b      	ldr	r3, [pc, #44]	; (13b24 <I2cSensorsTxComplete+0x48>)
   13af6:	681b      	ldr	r3, [r3, #0]
   13af8:	220c      	movs	r2, #12
   13afa:	18ba      	adds	r2, r7, r2
   13afc:	0011      	movs	r1, r2
   13afe:	0018      	movs	r0, r3
   13b00:	4b09      	ldr	r3, [pc, #36]	; (13b28 <I2cSensorsTxComplete+0x4c>)
   13b02:	4798      	blx	r3
    sensorTransmitError = false;
   13b04:	4b09      	ldr	r3, [pc, #36]	; (13b2c <I2cSensorsTxComplete+0x50>)
   13b06:	2200      	movs	r2, #0
   13b08:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13b0a:	68fb      	ldr	r3, [r7, #12]
   13b0c:	2b00      	cmp	r3, #0
   13b0e:	d003      	beq.n	13b18 <I2cSensorsTxComplete+0x3c>
   13b10:	4b07      	ldr	r3, [pc, #28]	; (13b30 <I2cSensorsTxComplete+0x54>)
   13b12:	2280      	movs	r2, #128	; 0x80
   13b14:	0552      	lsls	r2, r2, #21
   13b16:	601a      	str	r2, [r3, #0]
}
   13b18:	46c0      	nop			; (mov r8, r8)
   13b1a:	46bd      	mov	sp, r7
   13b1c:	b004      	add	sp, #16
   13b1e:	bd80      	pop	{r7, pc}
   13b20:	200004b0 	.word	0x200004b0
   13b24:	20004664 	.word	0x20004664
   13b28:	0001aa65 	.word	0x0001aa65
   13b2c:	200004ac 	.word	0x200004ac
   13b30:	e000ed04 	.word	0xe000ed04

00013b34 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   13b34:	b580      	push	{r7, lr}
   13b36:	b084      	sub	sp, #16
   13b38:	af00      	add	r7, sp, #0
   13b3a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13b3c:	4b0e      	ldr	r3, [pc, #56]	; (13b78 <I2cSensorsRxComplete+0x44>)
   13b3e:	2200      	movs	r2, #0
   13b40:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13b42:	4b0d      	ldr	r3, [pc, #52]	; (13b78 <I2cSensorsRxComplete+0x44>)
   13b44:	2201      	movs	r2, #1
   13b46:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13b48:	2300      	movs	r3, #0
   13b4a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13b4c:	4b0b      	ldr	r3, [pc, #44]	; (13b7c <I2cSensorsRxComplete+0x48>)
   13b4e:	681b      	ldr	r3, [r3, #0]
   13b50:	220c      	movs	r2, #12
   13b52:	18ba      	adds	r2, r7, r2
   13b54:	0011      	movs	r1, r2
   13b56:	0018      	movs	r0, r3
   13b58:	4b09      	ldr	r3, [pc, #36]	; (13b80 <I2cSensorsRxComplete+0x4c>)
   13b5a:	4798      	blx	r3
    sensorTransmitError = false;
   13b5c:	4b09      	ldr	r3, [pc, #36]	; (13b84 <I2cSensorsRxComplete+0x50>)
   13b5e:	2200      	movs	r2, #0
   13b60:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13b62:	68fb      	ldr	r3, [r7, #12]
   13b64:	2b00      	cmp	r3, #0
   13b66:	d003      	beq.n	13b70 <I2cSensorsRxComplete+0x3c>
   13b68:	4b07      	ldr	r3, [pc, #28]	; (13b88 <I2cSensorsRxComplete+0x54>)
   13b6a:	2280      	movs	r2, #128	; 0x80
   13b6c:	0552      	lsls	r2, r2, #21
   13b6e:	601a      	str	r2, [r3, #0]
}
   13b70:	46c0      	nop			; (mov r8, r8)
   13b72:	46bd      	mov	sp, r7
   13b74:	b004      	add	sp, #16
   13b76:	bd80      	pop	{r7, pc}
   13b78:	200004b0 	.word	0x200004b0
   13b7c:	20004664 	.word	0x20004664
   13b80:	0001aa65 	.word	0x0001aa65
   13b84:	200004ac 	.word	0x200004ac
   13b88:	e000ed04 	.word	0xe000ed04

00013b8c <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   13b8c:	b580      	push	{r7, lr}
   13b8e:	b084      	sub	sp, #16
   13b90:	af00      	add	r7, sp, #0
   13b92:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13b94:	4b0e      	ldr	r3, [pc, #56]	; (13bd0 <I2cSensorsError+0x44>)
   13b96:	2200      	movs	r2, #0
   13b98:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   13b9a:	4b0d      	ldr	r3, [pc, #52]	; (13bd0 <I2cSensorsError+0x44>)
   13b9c:	2201      	movs	r2, #1
   13b9e:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13ba0:	2300      	movs	r3, #0
   13ba2:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13ba4:	4b0b      	ldr	r3, [pc, #44]	; (13bd4 <I2cSensorsError+0x48>)
   13ba6:	681b      	ldr	r3, [r3, #0]
   13ba8:	220c      	movs	r2, #12
   13baa:	18ba      	adds	r2, r7, r2
   13bac:	0011      	movs	r1, r2
   13bae:	0018      	movs	r0, r3
   13bb0:	4b09      	ldr	r3, [pc, #36]	; (13bd8 <I2cSensorsError+0x4c>)
   13bb2:	4798      	blx	r3
    sensorTransmitError = true;
   13bb4:	4b09      	ldr	r3, [pc, #36]	; (13bdc <I2cSensorsError+0x50>)
   13bb6:	2201      	movs	r2, #1
   13bb8:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13bba:	68fb      	ldr	r3, [r7, #12]
   13bbc:	2b00      	cmp	r3, #0
   13bbe:	d003      	beq.n	13bc8 <I2cSensorsError+0x3c>
   13bc0:	4b07      	ldr	r3, [pc, #28]	; (13be0 <I2cSensorsError+0x54>)
   13bc2:	2280      	movs	r2, #128	; 0x80
   13bc4:	0552      	lsls	r2, r2, #21
   13bc6:	601a      	str	r2, [r3, #0]
}
   13bc8:	46c0      	nop			; (mov r8, r8)
   13bca:	46bd      	mov	sp, r7
   13bcc:	b004      	add	sp, #16
   13bce:	bd80      	pop	{r7, pc}
   13bd0:	200004b0 	.word	0x200004b0
   13bd4:	20004664 	.word	0x20004664
   13bd8:	0001aa65 	.word	0x0001aa65
   13bdc:	200004ac 	.word	0x200004ac
   13be0:	e000ed04 	.word	0xe000ed04

00013be4 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   13be4:	b580      	push	{r7, lr}
   13be6:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13be8:	4911      	ldr	r1, [pc, #68]	; (13c30 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   13bea:	4b12      	ldr	r3, [pc, #72]	; (13c34 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13bec:	2200      	movs	r2, #0
   13bee:	0018      	movs	r0, r3
   13bf0:	4b11      	ldr	r3, [pc, #68]	; (13c38 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13bf2:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13bf4:	4b0f      	ldr	r3, [pc, #60]	; (13c34 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13bf6:	2100      	movs	r1, #0
   13bf8:	0018      	movs	r0, r3
   13bfa:	4b10      	ldr	r3, [pc, #64]	; (13c3c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13bfc:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13bfe:	4910      	ldr	r1, [pc, #64]	; (13c40 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   13c00:	4b0c      	ldr	r3, [pc, #48]	; (13c34 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13c02:	2201      	movs	r2, #1
   13c04:	0018      	movs	r0, r3
   13c06:	4b0c      	ldr	r3, [pc, #48]	; (13c38 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13c08:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13c0a:	4b0a      	ldr	r3, [pc, #40]	; (13c34 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13c0c:	2101      	movs	r1, #1
   13c0e:	0018      	movs	r0, r3
   13c10:	4b0a      	ldr	r3, [pc, #40]	; (13c3c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13c12:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   13c14:	490b      	ldr	r1, [pc, #44]	; (13c44 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   13c16:	4b07      	ldr	r3, [pc, #28]	; (13c34 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13c18:	2202      	movs	r2, #2
   13c1a:	0018      	movs	r0, r3
   13c1c:	4b06      	ldr	r3, [pc, #24]	; (13c38 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13c1e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   13c20:	4b04      	ldr	r3, [pc, #16]	; (13c34 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13c22:	2102      	movs	r1, #2
   13c24:	0018      	movs	r0, r3
   13c26:	4b05      	ldr	r3, [pc, #20]	; (13c3c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13c28:	4798      	blx	r3
}
   13c2a:	46c0      	nop			; (mov r8, r8)
   13c2c:	46bd      	mov	sp, r7
   13c2e:	bd80      	pop	{r7, pc}
   13c30:	00013add 	.word	0x00013add
   13c34:	2000463c 	.word	0x2000463c
   13c38:	00012909 	.word	0x00012909
   13c3c:	000139ed 	.word	0x000139ed
   13c40:	00013b35 	.word	0x00013b35
   13c44:	00013b8d 	.word	0x00013b8d

00013c48 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   13c48:	b580      	push	{r7, lr}
   13c4a:	b082      	sub	sp, #8
   13c4c:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13c4e:	2300      	movs	r3, #0
   13c50:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   13c52:	4b14      	ldr	r3, [pc, #80]	; (13ca4 <I2cInitializeDriver+0x5c>)
   13c54:	4798      	blx	r3
   13c56:	0003      	movs	r3, r0
   13c58:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   13c5a:	687b      	ldr	r3, [r7, #4]
   13c5c:	2b00      	cmp	r3, #0
   13c5e:	d11a      	bne.n	13c96 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   13c60:	4b11      	ldr	r3, [pc, #68]	; (13ca8 <I2cInitializeDriver+0x60>)
   13c62:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   13c64:	2001      	movs	r0, #1
   13c66:	4b11      	ldr	r3, [pc, #68]	; (13cac <I2cInitializeDriver+0x64>)
   13c68:	4798      	blx	r3
   13c6a:	0002      	movs	r2, r0
   13c6c:	4b10      	ldr	r3, [pc, #64]	; (13cb0 <I2cInitializeDriver+0x68>)
   13c6e:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   13c70:	2203      	movs	r2, #3
   13c72:	2100      	movs	r1, #0
   13c74:	2001      	movs	r0, #1
   13c76:	4b0f      	ldr	r3, [pc, #60]	; (13cb4 <I2cInitializeDriver+0x6c>)
   13c78:	4798      	blx	r3
   13c7a:	0002      	movs	r2, r0
   13c7c:	4b0e      	ldr	r3, [pc, #56]	; (13cb8 <I2cInitializeDriver+0x70>)
   13c7e:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   13c80:	4b0b      	ldr	r3, [pc, #44]	; (13cb0 <I2cInitializeDriver+0x68>)
   13c82:	681b      	ldr	r3, [r3, #0]
   13c84:	2b00      	cmp	r3, #0
   13c86:	d003      	beq.n	13c90 <I2cInitializeDriver+0x48>
   13c88:	4b0b      	ldr	r3, [pc, #44]	; (13cb8 <I2cInitializeDriver+0x70>)
   13c8a:	681b      	ldr	r3, [r3, #0]
   13c8c:	2b00      	cmp	r3, #0
   13c8e:	d103      	bne.n	13c98 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   13c90:	2306      	movs	r3, #6
   13c92:	607b      	str	r3, [r7, #4]
        goto exit;
   13c94:	e000      	b.n	13c98 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   13c96:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13c98:	687b      	ldr	r3, [r7, #4]
}
   13c9a:	0018      	movs	r0, r3
   13c9c:	46bd      	mov	sp, r7
   13c9e:	b002      	add	sp, #8
   13ca0:	bd80      	pop	{r7, pc}
   13ca2:	46c0      	nop			; (mov r8, r8)
   13ca4:	00013a21 	.word	0x00013a21
   13ca8:	00013be5 	.word	0x00013be5
   13cac:	0001a39d 	.word	0x0001a39d
   13cb0:	20004638 	.word	0x20004638
   13cb4:	0001a135 	.word	0x0001a135
   13cb8:	20004664 	.word	0x20004664

00013cbc <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   13cbc:	b590      	push	{r4, r7, lr}
   13cbe:	b085      	sub	sp, #20
   13cc0:	af00      	add	r7, sp, #0
   13cc2:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13cc4:	2300      	movs	r3, #0
   13cc6:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   13cc8:	687b      	ldr	r3, [r7, #4]
   13cca:	2b00      	cmp	r3, #0
   13ccc:	d003      	beq.n	13cd6 <I2cWriteData+0x1a>
   13cce:	687b      	ldr	r3, [r7, #4]
   13cd0:	685b      	ldr	r3, [r3, #4]
   13cd2:	2b00      	cmp	r3, #0
   13cd4:	d103      	bne.n	13cde <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   13cd6:	2308      	movs	r3, #8
   13cd8:	425b      	negs	r3, r3
   13cda:	60fb      	str	r3, [r7, #12]
        goto exit;
   13cdc:	e01f      	b.n	13d1e <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   13cde:	687b      	ldr	r3, [r7, #4]
   13ce0:	781b      	ldrb	r3, [r3, #0]
   13ce2:	b29a      	uxth	r2, r3
   13ce4:	4b10      	ldr	r3, [pc, #64]	; (13d28 <I2cWriteData+0x6c>)
   13ce6:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   13ce8:	687b      	ldr	r3, [r7, #4]
   13cea:	685a      	ldr	r2, [r3, #4]
   13cec:	4b0e      	ldr	r3, [pc, #56]	; (13d28 <I2cWriteData+0x6c>)
   13cee:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   13cf0:	687b      	ldr	r3, [r7, #4]
   13cf2:	89da      	ldrh	r2, [r3, #14]
   13cf4:	4b0c      	ldr	r3, [pc, #48]	; (13d28 <I2cWriteData+0x6c>)
   13cf6:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13cf8:	230b      	movs	r3, #11
   13cfa:	18fc      	adds	r4, r7, r3
   13cfc:	4a0a      	ldr	r2, [pc, #40]	; (13d28 <I2cWriteData+0x6c>)
   13cfe:	4b0b      	ldr	r3, [pc, #44]	; (13d2c <I2cWriteData+0x70>)
   13d00:	0011      	movs	r1, r2
   13d02:	0018      	movs	r0, r3
   13d04:	4b0a      	ldr	r3, [pc, #40]	; (13d30 <I2cWriteData+0x74>)
   13d06:	4798      	blx	r3
   13d08:	0003      	movs	r3, r0
   13d0a:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13d0c:	230b      	movs	r3, #11
   13d0e:	18fb      	adds	r3, r7, r3
   13d10:	781b      	ldrb	r3, [r3, #0]
   13d12:	2b00      	cmp	r3, #0
   13d14:	d003      	beq.n	13d1e <I2cWriteData+0x62>
        error = ERROR_IO;
   13d16:	2306      	movs	r3, #6
   13d18:	425b      	negs	r3, r3
   13d1a:	60fb      	str	r3, [r7, #12]
        goto exit;
   13d1c:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13d1e:	68fb      	ldr	r3, [r7, #12]
}
   13d20:	0018      	movs	r0, r3
   13d22:	46bd      	mov	sp, r7
   13d24:	b005      	add	sp, #20
   13d26:	bd90      	pop	{r4, r7, pc}
   13d28:	20004668 	.word	0x20004668
   13d2c:	2000463c 	.word	0x2000463c
   13d30:	00012b8d 	.word	0x00012b8d

00013d34 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   13d34:	b590      	push	{r4, r7, lr}
   13d36:	b085      	sub	sp, #20
   13d38:	af00      	add	r7, sp, #0
   13d3a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13d3c:	2300      	movs	r3, #0
   13d3e:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgIn == NULL) {
   13d40:	687b      	ldr	r3, [r7, #4]
   13d42:	2b00      	cmp	r3, #0
   13d44:	d003      	beq.n	13d4e <I2cReadData+0x1a>
   13d46:	687b      	ldr	r3, [r7, #4]
   13d48:	689b      	ldr	r3, [r3, #8]
   13d4a:	2b00      	cmp	r3, #0
   13d4c:	d103      	bne.n	13d56 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   13d4e:	2308      	movs	r3, #8
   13d50:	425b      	negs	r3, r3
   13d52:	60fb      	str	r3, [r7, #12]
        goto exit;
   13d54:	e01f      	b.n	13d96 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   13d56:	687b      	ldr	r3, [r7, #4]
   13d58:	781b      	ldrb	r3, [r3, #0]
   13d5a:	b29a      	uxth	r2, r3
   13d5c:	4b10      	ldr	r3, [pc, #64]	; (13da0 <I2cReadData+0x6c>)
   13d5e:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   13d60:	687b      	ldr	r3, [r7, #4]
   13d62:	689a      	ldr	r2, [r3, #8]
   13d64:	4b0e      	ldr	r3, [pc, #56]	; (13da0 <I2cReadData+0x6c>)
   13d66:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   13d68:	687b      	ldr	r3, [r7, #4]
   13d6a:	899a      	ldrh	r2, [r3, #12]
   13d6c:	4b0c      	ldr	r3, [pc, #48]	; (13da0 <I2cReadData+0x6c>)
   13d6e:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13d70:	230b      	movs	r3, #11
   13d72:	18fc      	adds	r4, r7, r3
   13d74:	4a0a      	ldr	r2, [pc, #40]	; (13da0 <I2cReadData+0x6c>)
   13d76:	4b0b      	ldr	r3, [pc, #44]	; (13da4 <I2cReadData+0x70>)
   13d78:	0011      	movs	r1, r2
   13d7a:	0018      	movs	r0, r3
   13d7c:	4b0a      	ldr	r3, [pc, #40]	; (13da8 <I2cReadData+0x74>)
   13d7e:	4798      	blx	r3
   13d80:	0003      	movs	r3, r0
   13d82:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13d84:	230b      	movs	r3, #11
   13d86:	18fb      	adds	r3, r7, r3
   13d88:	781b      	ldrb	r3, [r3, #0]
   13d8a:	2b00      	cmp	r3, #0
   13d8c:	d003      	beq.n	13d96 <I2cReadData+0x62>
        error = ERROR_IO;
   13d8e:	2306      	movs	r3, #6
   13d90:	425b      	negs	r3, r3
   13d92:	60fb      	str	r3, [r7, #12]
        goto exit;
   13d94:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13d96:	68fb      	ldr	r3, [r7, #12]
}
   13d98:	0018      	movs	r0, r3
   13d9a:	46bd      	mov	sp, r7
   13d9c:	b005      	add	sp, #20
   13d9e:	bd90      	pop	{r4, r7, pc}
   13da0:	20004668 	.word	0x20004668
   13da4:	2000463c 	.word	0x2000463c
   13da8:	00012aa9 	.word	0x00012aa9

00013dac <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   13dac:	b590      	push	{r4, r7, lr}
   13dae:	b083      	sub	sp, #12
   13db0:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   13db2:	2300      	movs	r3, #0
   13db4:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   13db6:	4b09      	ldr	r3, [pc, #36]	; (13ddc <I2cFreeMutex+0x30>)
   13db8:	6818      	ldr	r0, [r3, #0]
   13dba:	2300      	movs	r3, #0
   13dbc:	2200      	movs	r2, #0
   13dbe:	2100      	movs	r1, #0
   13dc0:	4c07      	ldr	r4, [pc, #28]	; (13de0 <I2cFreeMutex+0x34>)
   13dc2:	47a0      	blx	r4
   13dc4:	0003      	movs	r3, r0
   13dc6:	2b01      	cmp	r3, #1
   13dc8:	d002      	beq.n	13dd0 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   13dca:	2314      	movs	r3, #20
   13dcc:	425b      	negs	r3, r3
   13dce:	607b      	str	r3, [r7, #4]
    }
    return error;
   13dd0:	687b      	ldr	r3, [r7, #4]
}
   13dd2:	0018      	movs	r0, r3
   13dd4:	46bd      	mov	sp, r7
   13dd6:	b003      	add	sp, #12
   13dd8:	bd90      	pop	{r4, r7, pc}
   13dda:	46c0      	nop			; (mov r8, r8)
   13ddc:	20004638 	.word	0x20004638
   13de0:	0001a3dd 	.word	0x0001a3dd

00013de4 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   13de4:	b580      	push	{r7, lr}
   13de6:	b084      	sub	sp, #16
   13de8:	af00      	add	r7, sp, #0
   13dea:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13dec:	2300      	movs	r3, #0
   13dee:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   13df0:	4b08      	ldr	r3, [pc, #32]	; (13e14 <I2cGetMutex+0x30>)
   13df2:	681b      	ldr	r3, [r3, #0]
   13df4:	687a      	ldr	r2, [r7, #4]
   13df6:	0011      	movs	r1, r2
   13df8:	0018      	movs	r0, r3
   13dfa:	4b07      	ldr	r3, [pc, #28]	; (13e18 <I2cGetMutex+0x34>)
   13dfc:	4798      	blx	r3
   13dfe:	0003      	movs	r3, r0
   13e00:	2b01      	cmp	r3, #1
   13e02:	d002      	beq.n	13e0a <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   13e04:	231d      	movs	r3, #29
   13e06:	425b      	negs	r3, r3
   13e08:	60fb      	str	r3, [r7, #12]
    }
    return error;
   13e0a:	68fb      	ldr	r3, [r7, #12]
}
   13e0c:	0018      	movs	r0, r3
   13e0e:	46bd      	mov	sp, r7
   13e10:	b004      	add	sp, #16
   13e12:	bd80      	pop	{r7, pc}
   13e14:	20004638 	.word	0x20004638
   13e18:	0001b0ed 	.word	0x0001b0ed

00013e1c <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   13e1c:	b580      	push	{r7, lr}
   13e1e:	b084      	sub	sp, #16
   13e20:	af00      	add	r7, sp, #0
   13e22:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13e24:	2300      	movs	r3, #0
   13e26:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   13e28:	4b04      	ldr	r3, [pc, #16]	; (13e3c <I2cGetSemaphoreHandle+0x20>)
   13e2a:	681a      	ldr	r2, [r3, #0]
   13e2c:	687b      	ldr	r3, [r7, #4]
   13e2e:	601a      	str	r2, [r3, #0]
    return error;
   13e30:	68fb      	ldr	r3, [r7, #12]
}
   13e32:	0018      	movs	r0, r3
   13e34:	46bd      	mov	sp, r7
   13e36:	b004      	add	sp, #16
   13e38:	bd80      	pop	{r7, pc}
   13e3a:	46c0      	nop			; (mov r8, r8)
   13e3c:	20004664 	.word	0x20004664

00013e40 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   13e40:	b580      	push	{r7, lr}
   13e42:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   13e44:	4b02      	ldr	r3, [pc, #8]	; (13e50 <I2cGetTaskErrorStatus+0x10>)
   13e46:	781b      	ldrb	r3, [r3, #0]
}
   13e48:	0018      	movs	r0, r3
   13e4a:	46bd      	mov	sp, r7
   13e4c:	bd80      	pop	{r7, pc}
   13e4e:	46c0      	nop			; (mov r8, r8)
   13e50:	200004ac 	.word	0x200004ac

00013e54 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   13e54:	b580      	push	{r7, lr}
   13e56:	b082      	sub	sp, #8
   13e58:	af00      	add	r7, sp, #0
   13e5a:	0002      	movs	r2, r0
   13e5c:	1dfb      	adds	r3, r7, #7
   13e5e:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   13e60:	4b03      	ldr	r3, [pc, #12]	; (13e70 <I2cSetTaskErrorStatus+0x1c>)
   13e62:	1dfa      	adds	r2, r7, #7
   13e64:	7812      	ldrb	r2, [r2, #0]
   13e66:	701a      	strb	r2, [r3, #0]
}
   13e68:	46c0      	nop			; (mov r8, r8)
   13e6a:	46bd      	mov	sp, r7
   13e6c:	b002      	add	sp, #8
   13e6e:	bd80      	pop	{r7, pc}
   13e70:	200004ac 	.word	0x200004ac

00013e74 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   13e74:	b580      	push	{r7, lr}
   13e76:	b084      	sub	sp, #16
   13e78:	af00      	add	r7, sp, #0
   13e7a:	6078      	str	r0, [r7, #4]
   13e7c:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   13e7e:	2300      	movs	r3, #0
   13e80:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   13e82:	2300      	movs	r3, #0
   13e84:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   13e86:	2396      	movs	r3, #150	; 0x96
   13e88:	005b      	lsls	r3, r3, #1
   13e8a:	0018      	movs	r0, r3
   13e8c:	4b28      	ldr	r3, [pc, #160]	; (13f30 <I2cWriteDataWait+0xbc>)
   13e8e:	4798      	blx	r3
   13e90:	0003      	movs	r3, r0
   13e92:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   13e94:	68fb      	ldr	r3, [r7, #12]
   13e96:	2b00      	cmp	r3, #0
   13e98:	d138      	bne.n	13f0c <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   13e9a:	2308      	movs	r3, #8
   13e9c:	18fb      	adds	r3, r7, r3
   13e9e:	0018      	movs	r0, r3
   13ea0:	4b24      	ldr	r3, [pc, #144]	; (13f34 <I2cWriteDataWait+0xc0>)
   13ea2:	4798      	blx	r3
   13ea4:	0003      	movs	r3, r0
   13ea6:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   13ea8:	68fb      	ldr	r3, [r7, #12]
   13eaa:	2b00      	cmp	r3, #0
   13eac:	d130      	bne.n	13f10 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   13eae:	687b      	ldr	r3, [r7, #4]
   13eb0:	0018      	movs	r0, r3
   13eb2:	4b21      	ldr	r3, [pc, #132]	; (13f38 <I2cWriteDataWait+0xc4>)
   13eb4:	4798      	blx	r3
   13eb6:	0003      	movs	r3, r0
   13eb8:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   13eba:	68fb      	ldr	r3, [r7, #12]
   13ebc:	2b00      	cmp	r3, #0
   13ebe:	d12a      	bne.n	13f16 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13ec0:	68bb      	ldr	r3, [r7, #8]
   13ec2:	683a      	ldr	r2, [r7, #0]
   13ec4:	0011      	movs	r1, r2
   13ec6:	0018      	movs	r0, r3
   13ec8:	4b1c      	ldr	r3, [pc, #112]	; (13f3c <I2cWriteDataWait+0xc8>)
   13eca:	4798      	blx	r3
   13ecc:	0003      	movs	r3, r0
   13ece:	2b01      	cmp	r3, #1
   13ed0:	d111      	bne.n	13ef6 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   13ed2:	4b1b      	ldr	r3, [pc, #108]	; (13f40 <I2cWriteDataWait+0xcc>)
   13ed4:	4798      	blx	r3
   13ed6:	1e03      	subs	r3, r0, #0
   13ed8:	d011      	beq.n	13efe <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   13eda:	2000      	movs	r0, #0
   13edc:	4b19      	ldr	r3, [pc, #100]	; (13f44 <I2cWriteDataWait+0xd0>)
   13ede:	4798      	blx	r3
            if (error != ERROR_NONE) {
   13ee0:	68fb      	ldr	r3, [r7, #12]
   13ee2:	2b00      	cmp	r3, #0
   13ee4:	d003      	beq.n	13eee <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   13ee6:	2321      	movs	r3, #33	; 0x21
   13ee8:	425b      	negs	r3, r3
   13eea:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   13eec:	e014      	b.n	13f18 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   13eee:	2303      	movs	r3, #3
   13ef0:	425b      	negs	r3, r3
   13ef2:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   13ef4:	e010      	b.n	13f18 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   13ef6:	2303      	movs	r3, #3
   13ef8:	425b      	negs	r3, r3
   13efa:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   13efc:	e00c      	b.n	13f18 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   13efe:	4b12      	ldr	r3, [pc, #72]	; (13f48 <I2cWriteDataWait+0xd4>)
   13f00:	4798      	blx	r3
   13f02:	0002      	movs	r2, r0
   13f04:	68fb      	ldr	r3, [r7, #12]
   13f06:	4313      	orrs	r3, r2
   13f08:	60fb      	str	r3, [r7, #12]
   13f0a:	e002      	b.n	13f12 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   13f0c:	46c0      	nop			; (mov r8, r8)
   13f0e:	e000      	b.n	13f12 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   13f10:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   13f12:	68fb      	ldr	r3, [r7, #12]
   13f14:	e007      	b.n	13f26 <I2cWriteDataWait+0xb2>
        goto exitError0;
   13f16:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   13f18:	4b0b      	ldr	r3, [pc, #44]	; (13f48 <I2cWriteDataWait+0xd4>)
   13f1a:	4798      	blx	r3
   13f1c:	0002      	movs	r2, r0
   13f1e:	68fb      	ldr	r3, [r7, #12]
   13f20:	4313      	orrs	r3, r2
   13f22:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   13f24:	68fb      	ldr	r3, [r7, #12]
}
   13f26:	0018      	movs	r0, r3
   13f28:	46bd      	mov	sp, r7
   13f2a:	b004      	add	sp, #16
   13f2c:	bd80      	pop	{r7, pc}
   13f2e:	46c0      	nop			; (mov r8, r8)
   13f30:	00013de5 	.word	0x00013de5
   13f34:	00013e1d 	.word	0x00013e1d
   13f38:	00013cbd 	.word	0x00013cbd
   13f3c:	0001b0ed 	.word	0x0001b0ed
   13f40:	00013e41 	.word	0x00013e41
   13f44:	00013e55 	.word	0x00013e55
   13f48:	00013dad 	.word	0x00013dad

00013f4c <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   13f4c:	b580      	push	{r7, lr}
   13f4e:	b086      	sub	sp, #24
   13f50:	af00      	add	r7, sp, #0
   13f52:	60f8      	str	r0, [r7, #12]
   13f54:	60b9      	str	r1, [r7, #8]
   13f56:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   13f58:	2300      	movs	r3, #0
   13f5a:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   13f5c:	2300      	movs	r3, #0
   13f5e:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   13f60:	2396      	movs	r3, #150	; 0x96
   13f62:	005b      	lsls	r3, r3, #1
   13f64:	0018      	movs	r0, r3
   13f66:	4b39      	ldr	r3, [pc, #228]	; (1404c <I2cReadDataWait+0x100>)
   13f68:	4798      	blx	r3
   13f6a:	0003      	movs	r3, r0
   13f6c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   13f6e:	697b      	ldr	r3, [r7, #20]
   13f70:	2b00      	cmp	r3, #0
   13f72:	d15c      	bne.n	1402e <I2cReadDataWait+0xe2>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   13f74:	2310      	movs	r3, #16
   13f76:	18fb      	adds	r3, r7, r3
   13f78:	0018      	movs	r0, r3
   13f7a:	4b35      	ldr	r3, [pc, #212]	; (14050 <I2cReadDataWait+0x104>)
   13f7c:	4798      	blx	r3
   13f7e:	0003      	movs	r3, r0
   13f80:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   13f82:	697b      	ldr	r3, [r7, #20]
   13f84:	2b00      	cmp	r3, #0
   13f86:	d154      	bne.n	14032 <I2cReadDataWait+0xe6>

	if(data->msgOut != NULL && data->lenOut != 0 ){
   13f88:	68fb      	ldr	r3, [r7, #12]
   13f8a:	685b      	ldr	r3, [r3, #4]
   13f8c:	2b00      	cmp	r3, #0
   13f8e:	d024      	beq.n	13fda <I2cReadDataWait+0x8e>
   13f90:	68fb      	ldr	r3, [r7, #12]
   13f92:	89db      	ldrh	r3, [r3, #14]
   13f94:	2b00      	cmp	r3, #0
   13f96:	d020      	beq.n	13fda <I2cReadDataWait+0x8e>
		//---2. Initiate sending data
		error = I2cWriteData(data);
   13f98:	68fb      	ldr	r3, [r7, #12]
   13f9a:	0018      	movs	r0, r3
   13f9c:	4b2d      	ldr	r3, [pc, #180]	; (14054 <I2cReadDataWait+0x108>)
   13f9e:	4798      	blx	r3
   13fa0:	0003      	movs	r3, r0
   13fa2:	617b      	str	r3, [r7, #20]
		if (ERROR_NONE != error) {
   13fa4:	697b      	ldr	r3, [r7, #20]
   13fa6:	2b00      	cmp	r3, #0
   13fa8:	d146      	bne.n	14038 <I2cReadDataWait+0xec>
			goto exitError0;
		}

		//---2. Wait for binary semaphore to tell us that we are done!
		if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13faa:	693b      	ldr	r3, [r7, #16]
   13fac:	687a      	ldr	r2, [r7, #4]
   13fae:	0011      	movs	r1, r2
   13fb0:	0018      	movs	r0, r3
   13fb2:	4b29      	ldr	r3, [pc, #164]	; (14058 <I2cReadDataWait+0x10c>)
   13fb4:	4798      	blx	r3
   13fb6:	0003      	movs	r3, r0
   13fb8:	2b01      	cmp	r3, #1
   13fba:	d10a      	bne.n	13fd2 <I2cReadDataWait+0x86>
			/* The transmission ended as expected. We now delay until the I2C sensor is finished */
			if (I2cGetTaskErrorStatus()) {
   13fbc:	4b27      	ldr	r3, [pc, #156]	; (1405c <I2cReadDataWait+0x110>)
   13fbe:	4798      	blx	r3
   13fc0:	1e03      	subs	r3, r0, #0
   13fc2:	d00a      	beq.n	13fda <I2cReadDataWait+0x8e>
				I2cSetTaskErrorStatus(false);
   13fc4:	2000      	movs	r0, #0
   13fc6:	4b26      	ldr	r3, [pc, #152]	; (14060 <I2cReadDataWait+0x114>)
   13fc8:	4798      	blx	r3
				error = ERROR_ABORTED;
   13fca:	2303      	movs	r3, #3
   13fcc:	425b      	negs	r3, r3
   13fce:	617b      	str	r3, [r7, #20]
				goto exitError0;
   13fd0:	e035      	b.n	1403e <I2cReadDataWait+0xf2>
			}
		} else {
			/* The call to ulTaskNotifyTake() timed out. */
			error = ERR_TIMEOUT;
   13fd2:	2303      	movs	r3, #3
   13fd4:	425b      	negs	r3, r3
   13fd6:	617b      	str	r3, [r7, #20]
			goto exitError0;
   13fd8:	e031      	b.n	1403e <I2cReadDataWait+0xf2>
		}
	}
	
	vTaskDelay(delay);
   13fda:	68bb      	ldr	r3, [r7, #8]
   13fdc:	0018      	movs	r0, r3
   13fde:	4b21      	ldr	r3, [pc, #132]	; (14064 <I2cReadDataWait+0x118>)
   13fe0:	4798      	blx	r3
	
    //---6. Initiate Read data
    error = I2cReadData(data);
   13fe2:	68fb      	ldr	r3, [r7, #12]
   13fe4:	0018      	movs	r0, r3
   13fe6:	4b20      	ldr	r3, [pc, #128]	; (14068 <I2cReadDataWait+0x11c>)
   13fe8:	4798      	blx	r3
   13fea:	0003      	movs	r3, r0
   13fec:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   13fee:	697b      	ldr	r3, [r7, #20]
   13ff0:	2b00      	cmp	r3, #0
   13ff2:	d123      	bne.n	1403c <I2cReadDataWait+0xf0>
        goto exitError0;
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13ff4:	693b      	ldr	r3, [r7, #16]
   13ff6:	687a      	ldr	r2, [r7, #4]
   13ff8:	0011      	movs	r1, r2
   13ffa:	0018      	movs	r0, r3
   13ffc:	4b16      	ldr	r3, [pc, #88]	; (14058 <I2cReadDataWait+0x10c>)
   13ffe:	4798      	blx	r3
   14000:	0003      	movs	r3, r0
   14002:	2b01      	cmp	r3, #1
   14004:	d10a      	bne.n	1401c <I2cReadDataWait+0xd0>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14006:	4b15      	ldr	r3, [pc, #84]	; (1405c <I2cReadDataWait+0x110>)
   14008:	4798      	blx	r3
   1400a:	1e03      	subs	r3, r0, #0
   1400c:	d00a      	beq.n	14024 <I2cReadDataWait+0xd8>
            I2cSetTaskErrorStatus(false);
   1400e:	2000      	movs	r0, #0
   14010:	4b13      	ldr	r3, [pc, #76]	; (14060 <I2cReadDataWait+0x114>)
   14012:	4798      	blx	r3
            error = ERROR_ABORTED;
   14014:	2303      	movs	r3, #3
   14016:	425b      	negs	r3, r3
   14018:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1401a:	e010      	b.n	1403e <I2cReadDataWait+0xf2>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1401c:	2303      	movs	r3, #3
   1401e:	425b      	negs	r3, r3
   14020:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14022:	e00c      	b.n	1403e <I2cReadDataWait+0xf2>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   14024:	4b11      	ldr	r3, [pc, #68]	; (1406c <I2cReadDataWait+0x120>)
   14026:	4798      	blx	r3
   14028:	0003      	movs	r3, r0
   1402a:	617b      	str	r3, [r7, #20]
   1402c:	e002      	b.n	14034 <I2cReadDataWait+0xe8>
    if (ERROR_NONE != error) goto exit;
   1402e:	46c0      	nop			; (mov r8, r8)
   14030:	e000      	b.n	14034 <I2cReadDataWait+0xe8>
    if (ERROR_NONE != error) goto exit;
   14032:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14034:	697b      	ldr	r3, [r7, #20]
   14036:	e005      	b.n	14044 <I2cReadDataWait+0xf8>
			goto exitError0;
   14038:	46c0      	nop			; (mov r8, r8)
   1403a:	e000      	b.n	1403e <I2cReadDataWait+0xf2>
        goto exitError0;
   1403c:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   1403e:	4b0b      	ldr	r3, [pc, #44]	; (1406c <I2cReadDataWait+0x120>)
   14040:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   14042:	697b      	ldr	r3, [r7, #20]
}
   14044:	0018      	movs	r0, r3
   14046:	46bd      	mov	sp, r7
   14048:	b006      	add	sp, #24
   1404a:	bd80      	pop	{r7, pc}
   1404c:	00013de5 	.word	0x00013de5
   14050:	00013e1d 	.word	0x00013e1d
   14054:	00013cbd 	.word	0x00013cbd
   14058:	0001b0ed 	.word	0x0001b0ed
   1405c:	00013e41 	.word	0x00013e41
   14060:	00013e55 	.word	0x00013e55
   14064:	0001be41 	.word	0x0001be41
   14068:	00013d35 	.word	0x00013d35
   1406c:	00013dad 	.word	0x00013dad

00014070 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   14070:	b5b0      	push	{r4, r5, r7, lr}
   14072:	b086      	sub	sp, #24
   14074:	af00      	add	r7, sp, #0
   14076:	60f8      	str	r0, [r7, #12]
   14078:	0008      	movs	r0, r1
   1407a:	607a      	str	r2, [r7, #4]
   1407c:	0019      	movs	r1, r3
   1407e:	230b      	movs	r3, #11
   14080:	18fb      	adds	r3, r7, r3
   14082:	1c02      	adds	r2, r0, #0
   14084:	701a      	strb	r2, [r3, #0]
   14086:	2308      	movs	r3, #8
   14088:	18fb      	adds	r3, r7, r3
   1408a:	1c0a      	adds	r2, r1, #0
   1408c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   1408e:	68fb      	ldr	r3, [r7, #12]
   14090:	685c      	ldr	r4, [r3, #4]
   14092:	68fb      	ldr	r3, [r7, #12]
   14094:	6898      	ldr	r0, [r3, #8]
   14096:	2308      	movs	r3, #8
   14098:	18fb      	adds	r3, r7, r3
   1409a:	881d      	ldrh	r5, [r3, #0]
   1409c:	687a      	ldr	r2, [r7, #4]
   1409e:	230b      	movs	r3, #11
   140a0:	18fb      	adds	r3, r7, r3
   140a2:	7819      	ldrb	r1, [r3, #0]
   140a4:	002b      	movs	r3, r5
   140a6:	47a0      	blx	r4
   140a8:	0003      	movs	r3, r0
   140aa:	617b      	str	r3, [r7, #20]

  return ret;
   140ac:	697b      	ldr	r3, [r7, #20]
}
   140ae:	0018      	movs	r0, r3
   140b0:	46bd      	mov	sp, r7
   140b2:	b006      	add	sp, #24
   140b4:	bdb0      	pop	{r4, r5, r7, pc}

000140b6 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   140b6:	b5b0      	push	{r4, r5, r7, lr}
   140b8:	b086      	sub	sp, #24
   140ba:	af00      	add	r7, sp, #0
   140bc:	60f8      	str	r0, [r7, #12]
   140be:	0008      	movs	r0, r1
   140c0:	607a      	str	r2, [r7, #4]
   140c2:	0019      	movs	r1, r3
   140c4:	230b      	movs	r3, #11
   140c6:	18fb      	adds	r3, r7, r3
   140c8:	1c02      	adds	r2, r0, #0
   140ca:	701a      	strb	r2, [r3, #0]
   140cc:	2308      	movs	r3, #8
   140ce:	18fb      	adds	r3, r7, r3
   140d0:	1c0a      	adds	r2, r1, #0
   140d2:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   140d4:	68fb      	ldr	r3, [r7, #12]
   140d6:	681c      	ldr	r4, [r3, #0]
   140d8:	68fb      	ldr	r3, [r7, #12]
   140da:	6898      	ldr	r0, [r3, #8]
   140dc:	2308      	movs	r3, #8
   140de:	18fb      	adds	r3, r7, r3
   140e0:	881d      	ldrh	r5, [r3, #0]
   140e2:	687a      	ldr	r2, [r7, #4]
   140e4:	230b      	movs	r3, #11
   140e6:	18fb      	adds	r3, r7, r3
   140e8:	7819      	ldrb	r1, [r3, #0]
   140ea:	002b      	movs	r3, r5
   140ec:	47a0      	blx	r4
   140ee:	0003      	movs	r3, r0
   140f0:	617b      	str	r3, [r7, #20]

  return ret;
   140f2:	697b      	ldr	r3, [r7, #20]
}
   140f4:	0018      	movs	r0, r3
   140f6:	46bd      	mov	sp, r7
   140f8:	b006      	add	sp, #24
   140fa:	bdb0      	pop	{r4, r5, r7, pc}

000140fc <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   140fc:	b580      	push	{r7, lr}
   140fe:	b082      	sub	sp, #8
   14100:	af00      	add	r7, sp, #0
   14102:	0002      	movs	r2, r0
   14104:	1dbb      	adds	r3, r7, #6
   14106:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   14108:	1dbb      	adds	r3, r7, #6
   1410a:	2200      	movs	r2, #0
   1410c:	5e9a      	ldrsh	r2, [r3, r2]
   1410e:	4b06      	ldr	r3, [pc, #24]	; (14128 <lsm6dso_from_fs2_to_mg+0x2c>)
   14110:	0010      	movs	r0, r2
   14112:	4798      	blx	r3
   14114:	1c02      	adds	r2, r0, #0
   14116:	4b05      	ldr	r3, [pc, #20]	; (1412c <lsm6dso_from_fs2_to_mg+0x30>)
   14118:	4905      	ldr	r1, [pc, #20]	; (14130 <lsm6dso_from_fs2_to_mg+0x34>)
   1411a:	1c10      	adds	r0, r2, #0
   1411c:	4798      	blx	r3
   1411e:	1c03      	adds	r3, r0, #0
}
   14120:	1c18      	adds	r0, r3, #0
   14122:	46bd      	mov	sp, r7
   14124:	b002      	add	sp, #8
   14126:	bd80      	pop	{r7, pc}
   14128:	00032cc5 	.word	0x00032cc5
   1412c:	00032a45 	.word	0x00032a45
   14130:	3d79db23 	.word	0x3d79db23

00014134 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   14134:	b590      	push	{r4, r7, lr}
   14136:	b085      	sub	sp, #20
   14138:	af00      	add	r7, sp, #0
   1413a:	6078      	str	r0, [r7, #4]
   1413c:	000a      	movs	r2, r1
   1413e:	1cfb      	adds	r3, r7, #3
   14140:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14142:	2308      	movs	r3, #8
   14144:	18fa      	adds	r2, r7, r3
   14146:	6878      	ldr	r0, [r7, #4]
   14148:	2301      	movs	r3, #1
   1414a:	2110      	movs	r1, #16
   1414c:	4c12      	ldr	r4, [pc, #72]	; (14198 <lsm6dso_xl_full_scale_set+0x64>)
   1414e:	47a0      	blx	r4
   14150:	0003      	movs	r3, r0
   14152:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14154:	68fb      	ldr	r3, [r7, #12]
   14156:	2b00      	cmp	r3, #0
   14158:	d119      	bne.n	1418e <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   1415a:	1cfb      	adds	r3, r7, #3
   1415c:	781b      	ldrb	r3, [r3, #0]
   1415e:	2203      	movs	r2, #3
   14160:	4013      	ands	r3, r2
   14162:	b2da      	uxtb	r2, r3
   14164:	2308      	movs	r3, #8
   14166:	18fb      	adds	r3, r7, r3
   14168:	2103      	movs	r1, #3
   1416a:	400a      	ands	r2, r1
   1416c:	0090      	lsls	r0, r2, #2
   1416e:	781a      	ldrb	r2, [r3, #0]
   14170:	210c      	movs	r1, #12
   14172:	438a      	bics	r2, r1
   14174:	1c11      	adds	r1, r2, #0
   14176:	1c02      	adds	r2, r0, #0
   14178:	430a      	orrs	r2, r1
   1417a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   1417c:	2308      	movs	r3, #8
   1417e:	18fa      	adds	r2, r7, r3
   14180:	6878      	ldr	r0, [r7, #4]
   14182:	2301      	movs	r3, #1
   14184:	2110      	movs	r1, #16
   14186:	4c05      	ldr	r4, [pc, #20]	; (1419c <lsm6dso_xl_full_scale_set+0x68>)
   14188:	47a0      	blx	r4
   1418a:	0003      	movs	r3, r0
   1418c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1418e:	68fb      	ldr	r3, [r7, #12]
}
   14190:	0018      	movs	r0, r3
   14192:	46bd      	mov	sp, r7
   14194:	b005      	add	sp, #20
   14196:	bd90      	pop	{r4, r7, pc}
   14198:	00014071 	.word	0x00014071
   1419c:	000140b7 	.word	0x000140b7

000141a0 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   141a0:	b590      	push	{r4, r7, lr}
   141a2:	b087      	sub	sp, #28
   141a4:	af00      	add	r7, sp, #0
   141a6:	6078      	str	r0, [r7, #4]
   141a8:	000a      	movs	r2, r1
   141aa:	1cfb      	adds	r3, r7, #3
   141ac:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   141ae:	2317      	movs	r3, #23
   141b0:	18fb      	adds	r3, r7, r3
   141b2:	1cfa      	adds	r2, r7, #3
   141b4:	7812      	ldrb	r2, [r2, #0]
   141b6:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   141b8:	230c      	movs	r3, #12
   141ba:	18fa      	adds	r2, r7, r3
   141bc:	687b      	ldr	r3, [r7, #4]
   141be:	0011      	movs	r1, r2
   141c0:	0018      	movs	r0, r3
   141c2:	4ba4      	ldr	r3, [pc, #656]	; (14454 <lsm6dso_xl_data_rate_set+0x2b4>)
   141c4:	4798      	blx	r3
   141c6:	0003      	movs	r3, r0
   141c8:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   141ca:	693b      	ldr	r3, [r7, #16]
   141cc:	2b00      	cmp	r3, #0
   141ce:	d000      	beq.n	141d2 <lsm6dso_xl_data_rate_set+0x32>
   141d0:	e113      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   141d2:	230c      	movs	r3, #12
   141d4:	18fb      	adds	r3, r7, r3
   141d6:	781b      	ldrb	r3, [r3, #0]
   141d8:	07db      	lsls	r3, r3, #31
   141da:	0fdb      	lsrs	r3, r3, #31
   141dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   141de:	230c      	movs	r3, #12
   141e0:	18fb      	adds	r3, r7, r3
   141e2:	781b      	ldrb	r3, [r3, #0]
   141e4:	079b      	lsls	r3, r3, #30
   141e6:	0fdb      	lsrs	r3, r3, #31
   141e8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   141ea:	4313      	orrs	r3, r2
   141ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   141ee:	230c      	movs	r3, #12
   141f0:	18fb      	adds	r3, r7, r3
   141f2:	781b      	ldrb	r3, [r3, #0]
   141f4:	075b      	lsls	r3, r3, #29
   141f6:	0fdb      	lsrs	r3, r3, #31
   141f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   141fa:	4313      	orrs	r3, r2
   141fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   141fe:	230c      	movs	r3, #12
   14200:	18fb      	adds	r3, r7, r3
   14202:	781b      	ldrb	r3, [r3, #0]
   14204:	071b      	lsls	r3, r3, #28
   14206:	0fdb      	lsrs	r3, r3, #31
   14208:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1420a:	4313      	orrs	r3, r2
   1420c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1420e:	230c      	movs	r3, #12
   14210:	18fb      	adds	r3, r7, r3
   14212:	781b      	ldrb	r3, [r3, #0]
   14214:	06db      	lsls	r3, r3, #27
   14216:	0fdb      	lsrs	r3, r3, #31
   14218:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1421a:	4313      	orrs	r3, r2
   1421c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1421e:	230c      	movs	r3, #12
   14220:	18fb      	adds	r3, r7, r3
   14222:	781b      	ldrb	r3, [r3, #0]
   14224:	069b      	lsls	r3, r3, #26
   14226:	0fdb      	lsrs	r3, r3, #31
   14228:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1422a:	4313      	orrs	r3, r2
   1422c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1422e:	230c      	movs	r3, #12
   14230:	18fb      	adds	r3, r7, r3
   14232:	781b      	ldrb	r3, [r3, #0]
   14234:	065b      	lsls	r3, r3, #25
   14236:	0fdb      	lsrs	r3, r3, #31
   14238:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1423a:	4313      	orrs	r3, r2
   1423c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1423e:	230c      	movs	r3, #12
   14240:	18fb      	adds	r3, r7, r3
   14242:	781b      	ldrb	r3, [r3, #0]
   14244:	061b      	lsls	r3, r3, #24
   14246:	0fdb      	lsrs	r3, r3, #31
   14248:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1424a:	4313      	orrs	r3, r2
   1424c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1424e:	230c      	movs	r3, #12
   14250:	18fb      	adds	r3, r7, r3
   14252:	785b      	ldrb	r3, [r3, #1]
   14254:	07db      	lsls	r3, r3, #31
   14256:	0fdb      	lsrs	r3, r3, #31
   14258:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1425a:	4313      	orrs	r3, r2
   1425c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1425e:	230c      	movs	r3, #12
   14260:	18fb      	adds	r3, r7, r3
   14262:	785b      	ldrb	r3, [r3, #1]
   14264:	079b      	lsls	r3, r3, #30
   14266:	0fdb      	lsrs	r3, r3, #31
   14268:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1426a:	4313      	orrs	r3, r2
   1426c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1426e:	230c      	movs	r3, #12
   14270:	18fb      	adds	r3, r7, r3
   14272:	785b      	ldrb	r3, [r3, #1]
   14274:	075b      	lsls	r3, r3, #29
   14276:	0fdb      	lsrs	r3, r3, #31
   14278:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1427a:	4313      	orrs	r3, r2
   1427c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1427e:	230c      	movs	r3, #12
   14280:	18fb      	adds	r3, r7, r3
   14282:	785b      	ldrb	r3, [r3, #1]
   14284:	071b      	lsls	r3, r3, #28
   14286:	0fdb      	lsrs	r3, r3, #31
   14288:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1428a:	4313      	orrs	r3, r2
   1428c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1428e:	230c      	movs	r3, #12
   14290:	18fb      	adds	r3, r7, r3
   14292:	785b      	ldrb	r3, [r3, #1]
   14294:	06db      	lsls	r3, r3, #27
   14296:	0fdb      	lsrs	r3, r3, #31
   14298:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1429a:	4313      	orrs	r3, r2
   1429c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1429e:	230c      	movs	r3, #12
   142a0:	18fb      	adds	r3, r7, r3
   142a2:	785b      	ldrb	r3, [r3, #1]
   142a4:	069b      	lsls	r3, r3, #26
   142a6:	0fdb      	lsrs	r3, r3, #31
   142a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   142aa:	4313      	orrs	r3, r2
   142ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   142ae:	230c      	movs	r3, #12
   142b0:	18fb      	adds	r3, r7, r3
   142b2:	785b      	ldrb	r3, [r3, #1]
   142b4:	065b      	lsls	r3, r3, #25
   142b6:	0fdb      	lsrs	r3, r3, #31
   142b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   142ba:	4313      	orrs	r3, r2
   142bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   142be:	230c      	movs	r3, #12
   142c0:	18fb      	adds	r3, r7, r3
   142c2:	785b      	ldrb	r3, [r3, #1]
   142c4:	061b      	lsls	r3, r3, #24
   142c6:	0fdb      	lsrs	r3, r3, #31
   142c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   142ca:	4313      	orrs	r3, r2
   142cc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   142ce:	2b01      	cmp	r3, #1
   142d0:	d000      	beq.n	142d4 <lsm6dso_xl_data_rate_set+0x134>
   142d2:	e092      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   142d4:	230b      	movs	r3, #11
   142d6:	18fa      	adds	r2, r7, r3
   142d8:	687b      	ldr	r3, [r7, #4]
   142da:	0011      	movs	r1, r2
   142dc:	0018      	movs	r0, r3
   142de:	4b5e      	ldr	r3, [pc, #376]	; (14458 <lsm6dso_xl_data_rate_set+0x2b8>)
   142e0:	4798      	blx	r3
   142e2:	0003      	movs	r3, r0
   142e4:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   142e6:	693b      	ldr	r3, [r7, #16]
   142e8:	2b00      	cmp	r3, #0
   142ea:	d000      	beq.n	142ee <lsm6dso_xl_data_rate_set+0x14e>
   142ec:	e085      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   142ee:	230b      	movs	r3, #11
   142f0:	18fb      	adds	r3, r7, r3
   142f2:	781b      	ldrb	r3, [r3, #0]
   142f4:	2b01      	cmp	r3, #1
   142f6:	d017      	beq.n	14328 <lsm6dso_xl_data_rate_set+0x188>
   142f8:	dc02      	bgt.n	14300 <lsm6dso_xl_data_rate_set+0x160>
   142fa:	2b00      	cmp	r3, #0
   142fc:	d005      	beq.n	1430a <lsm6dso_xl_data_rate_set+0x16a>
   142fe:	e076      	b.n	143ee <lsm6dso_xl_data_rate_set+0x24e>
   14300:	2b02      	cmp	r3, #2
   14302:	d029      	beq.n	14358 <lsm6dso_xl_data_rate_set+0x1b8>
   14304:	2b03      	cmp	r3, #3
   14306:	d048      	beq.n	1439a <lsm6dso_xl_data_rate_set+0x1fa>
   14308:	e071      	b.n	143ee <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   1430a:	1cfb      	adds	r3, r7, #3
   1430c:	781b      	ldrb	r3, [r3, #0]
   1430e:	2b00      	cmp	r3, #0
   14310:	d104      	bne.n	1431c <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   14312:	2317      	movs	r3, #23
   14314:	18fb      	adds	r3, r7, r3
   14316:	2201      	movs	r2, #1
   14318:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1431a:	e06e      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1431c:	2317      	movs	r3, #23
   1431e:	18fb      	adds	r3, r7, r3
   14320:	1cfa      	adds	r2, r7, #3
   14322:	7812      	ldrb	r2, [r2, #0]
   14324:	701a      	strb	r2, [r3, #0]
            break;
   14326:	e068      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14328:	1cfb      	adds	r3, r7, #3
   1432a:	781b      	ldrb	r3, [r3, #0]
   1432c:	2b00      	cmp	r3, #0
   1432e:	d104      	bne.n	1433a <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14330:	2317      	movs	r3, #23
   14332:	18fb      	adds	r3, r7, r3
   14334:	2202      	movs	r2, #2
   14336:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14338:	e05f      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   1433a:	1cfb      	adds	r3, r7, #3
   1433c:	781b      	ldrb	r3, [r3, #0]
   1433e:	2b01      	cmp	r3, #1
   14340:	d104      	bne.n	1434c <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14342:	2317      	movs	r3, #23
   14344:	18fb      	adds	r3, r7, r3
   14346:	2202      	movs	r2, #2
   14348:	701a      	strb	r2, [r3, #0]
            break;
   1434a:	e056      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1434c:	2317      	movs	r3, #23
   1434e:	18fb      	adds	r3, r7, r3
   14350:	1cfa      	adds	r2, r7, #3
   14352:	7812      	ldrb	r2, [r2, #0]
   14354:	701a      	strb	r2, [r3, #0]
            break;
   14356:	e050      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14358:	1cfb      	adds	r3, r7, #3
   1435a:	781b      	ldrb	r3, [r3, #0]
   1435c:	2b00      	cmp	r3, #0
   1435e:	d104      	bne.n	1436a <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14360:	2317      	movs	r3, #23
   14362:	18fb      	adds	r3, r7, r3
   14364:	2203      	movs	r2, #3
   14366:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14368:	e047      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   1436a:	1cfb      	adds	r3, r7, #3
   1436c:	781b      	ldrb	r3, [r3, #0]
   1436e:	2b01      	cmp	r3, #1
   14370:	d104      	bne.n	1437c <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14372:	2317      	movs	r3, #23
   14374:	18fb      	adds	r3, r7, r3
   14376:	2203      	movs	r2, #3
   14378:	701a      	strb	r2, [r3, #0]
            break;
   1437a:	e03e      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   1437c:	1cfb      	adds	r3, r7, #3
   1437e:	781b      	ldrb	r3, [r3, #0]
   14380:	2b02      	cmp	r3, #2
   14382:	d104      	bne.n	1438e <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14384:	2317      	movs	r3, #23
   14386:	18fb      	adds	r3, r7, r3
   14388:	2203      	movs	r2, #3
   1438a:	701a      	strb	r2, [r3, #0]
            break;
   1438c:	e035      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1438e:	2317      	movs	r3, #23
   14390:	18fb      	adds	r3, r7, r3
   14392:	1cfa      	adds	r2, r7, #3
   14394:	7812      	ldrb	r2, [r2, #0]
   14396:	701a      	strb	r2, [r3, #0]
            break;
   14398:	e02f      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   1439a:	1cfb      	adds	r3, r7, #3
   1439c:	781b      	ldrb	r3, [r3, #0]
   1439e:	2b00      	cmp	r3, #0
   143a0:	d104      	bne.n	143ac <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   143a2:	2317      	movs	r3, #23
   143a4:	18fb      	adds	r3, r7, r3
   143a6:	2204      	movs	r2, #4
   143a8:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   143aa:	e026      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   143ac:	1cfb      	adds	r3, r7, #3
   143ae:	781b      	ldrb	r3, [r3, #0]
   143b0:	2b01      	cmp	r3, #1
   143b2:	d104      	bne.n	143be <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   143b4:	2317      	movs	r3, #23
   143b6:	18fb      	adds	r3, r7, r3
   143b8:	2204      	movs	r2, #4
   143ba:	701a      	strb	r2, [r3, #0]
            break;
   143bc:	e01d      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   143be:	1cfb      	adds	r3, r7, #3
   143c0:	781b      	ldrb	r3, [r3, #0]
   143c2:	2b02      	cmp	r3, #2
   143c4:	d104      	bne.n	143d0 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   143c6:	2317      	movs	r3, #23
   143c8:	18fb      	adds	r3, r7, r3
   143ca:	2204      	movs	r2, #4
   143cc:	701a      	strb	r2, [r3, #0]
            break;
   143ce:	e014      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   143d0:	1cfb      	adds	r3, r7, #3
   143d2:	781b      	ldrb	r3, [r3, #0]
   143d4:	2b03      	cmp	r3, #3
   143d6:	d104      	bne.n	143e2 <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   143d8:	2317      	movs	r3, #23
   143da:	18fb      	adds	r3, r7, r3
   143dc:	2204      	movs	r2, #4
   143de:	701a      	strb	r2, [r3, #0]
            break;
   143e0:	e00b      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   143e2:	2317      	movs	r3, #23
   143e4:	18fb      	adds	r3, r7, r3
   143e6:	1cfa      	adds	r2, r7, #3
   143e8:	7812      	ldrb	r2, [r2, #0]
   143ea:	701a      	strb	r2, [r3, #0]
            break;
   143ec:	e005      	b.n	143fa <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   143ee:	2317      	movs	r3, #23
   143f0:	18fb      	adds	r3, r7, r3
   143f2:	1cfa      	adds	r2, r7, #3
   143f4:	7812      	ldrb	r2, [r2, #0]
   143f6:	701a      	strb	r2, [r3, #0]
            break;
   143f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   143fa:	693b      	ldr	r3, [r7, #16]
   143fc:	2b00      	cmp	r3, #0
   143fe:	d108      	bne.n	14412 <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14400:	2308      	movs	r3, #8
   14402:	18fa      	adds	r2, r7, r3
   14404:	6878      	ldr	r0, [r7, #4]
   14406:	2301      	movs	r3, #1
   14408:	2110      	movs	r1, #16
   1440a:	4c14      	ldr	r4, [pc, #80]	; (1445c <lsm6dso_xl_data_rate_set+0x2bc>)
   1440c:	47a0      	blx	r4
   1440e:	0003      	movs	r3, r0
   14410:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   14412:	693b      	ldr	r3, [r7, #16]
   14414:	2b00      	cmp	r3, #0
   14416:	d118      	bne.n	1444a <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   14418:	2317      	movs	r3, #23
   1441a:	18fb      	adds	r3, r7, r3
   1441c:	781b      	ldrb	r3, [r3, #0]
   1441e:	220f      	movs	r2, #15
   14420:	4013      	ands	r3, r2
   14422:	b2da      	uxtb	r2, r3
   14424:	2308      	movs	r3, #8
   14426:	18fb      	adds	r3, r7, r3
   14428:	0110      	lsls	r0, r2, #4
   1442a:	781a      	ldrb	r2, [r3, #0]
   1442c:	210f      	movs	r1, #15
   1442e:	400a      	ands	r2, r1
   14430:	1c11      	adds	r1, r2, #0
   14432:	1c02      	adds	r2, r0, #0
   14434:	430a      	orrs	r2, r1
   14436:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14438:	2308      	movs	r3, #8
   1443a:	18fa      	adds	r2, r7, r3
   1443c:	6878      	ldr	r0, [r7, #4]
   1443e:	2301      	movs	r3, #1
   14440:	2110      	movs	r1, #16
   14442:	4c07      	ldr	r4, [pc, #28]	; (14460 <lsm6dso_xl_data_rate_set+0x2c0>)
   14444:	47a0      	blx	r4
   14446:	0003      	movs	r3, r0
   14448:	613b      	str	r3, [r7, #16]
  }

  return ret;
   1444a:	693b      	ldr	r3, [r7, #16]
}
   1444c:	0018      	movs	r0, r3
   1444e:	46bd      	mov	sp, r7
   14450:	b007      	add	sp, #28
   14452:	bd90      	pop	{r4, r7, pc}
   14454:	00014c7d 	.word	0x00014c7d
   14458:	00014cd1 	.word	0x00014cd1
   1445c:	00014071 	.word	0x00014071
   14460:	000140b7 	.word	0x000140b7

00014464 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   14464:	b590      	push	{r4, r7, lr}
   14466:	b085      	sub	sp, #20
   14468:	af00      	add	r7, sp, #0
   1446a:	6078      	str	r0, [r7, #4]
   1446c:	000a      	movs	r2, r1
   1446e:	1cfb      	adds	r3, r7, #3
   14470:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14472:	2308      	movs	r3, #8
   14474:	18fa      	adds	r2, r7, r3
   14476:	6878      	ldr	r0, [r7, #4]
   14478:	2301      	movs	r3, #1
   1447a:	2111      	movs	r1, #17
   1447c:	4c12      	ldr	r4, [pc, #72]	; (144c8 <lsm6dso_gy_full_scale_set+0x64>)
   1447e:	47a0      	blx	r4
   14480:	0003      	movs	r3, r0
   14482:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14484:	68fb      	ldr	r3, [r7, #12]
   14486:	2b00      	cmp	r3, #0
   14488:	d119      	bne.n	144be <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   1448a:	1cfb      	adds	r3, r7, #3
   1448c:	781b      	ldrb	r3, [r3, #0]
   1448e:	2207      	movs	r2, #7
   14490:	4013      	ands	r3, r2
   14492:	b2da      	uxtb	r2, r3
   14494:	2308      	movs	r3, #8
   14496:	18fb      	adds	r3, r7, r3
   14498:	2107      	movs	r1, #7
   1449a:	400a      	ands	r2, r1
   1449c:	1890      	adds	r0, r2, r2
   1449e:	781a      	ldrb	r2, [r3, #0]
   144a0:	210e      	movs	r1, #14
   144a2:	438a      	bics	r2, r1
   144a4:	1c11      	adds	r1, r2, #0
   144a6:	1c02      	adds	r2, r0, #0
   144a8:	430a      	orrs	r2, r1
   144aa:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   144ac:	2308      	movs	r3, #8
   144ae:	18fa      	adds	r2, r7, r3
   144b0:	6878      	ldr	r0, [r7, #4]
   144b2:	2301      	movs	r3, #1
   144b4:	2111      	movs	r1, #17
   144b6:	4c05      	ldr	r4, [pc, #20]	; (144cc <lsm6dso_gy_full_scale_set+0x68>)
   144b8:	47a0      	blx	r4
   144ba:	0003      	movs	r3, r0
   144bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   144be:	68fb      	ldr	r3, [r7, #12]
}
   144c0:	0018      	movs	r0, r3
   144c2:	46bd      	mov	sp, r7
   144c4:	b005      	add	sp, #20
   144c6:	bd90      	pop	{r4, r7, pc}
   144c8:	00014071 	.word	0x00014071
   144cc:	000140b7 	.word	0x000140b7

000144d0 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   144d0:	b590      	push	{r4, r7, lr}
   144d2:	b087      	sub	sp, #28
   144d4:	af00      	add	r7, sp, #0
   144d6:	6078      	str	r0, [r7, #4]
   144d8:	000a      	movs	r2, r1
   144da:	1cfb      	adds	r3, r7, #3
   144dc:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   144de:	2317      	movs	r3, #23
   144e0:	18fb      	adds	r3, r7, r3
   144e2:	1cfa      	adds	r2, r7, #3
   144e4:	7812      	ldrb	r2, [r2, #0]
   144e6:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   144e8:	230c      	movs	r3, #12
   144ea:	18fa      	adds	r2, r7, r3
   144ec:	687b      	ldr	r3, [r7, #4]
   144ee:	0011      	movs	r1, r2
   144f0:	0018      	movs	r0, r3
   144f2:	4ba4      	ldr	r3, [pc, #656]	; (14784 <lsm6dso_gy_data_rate_set+0x2b4>)
   144f4:	4798      	blx	r3
   144f6:	0003      	movs	r3, r0
   144f8:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   144fa:	693b      	ldr	r3, [r7, #16]
   144fc:	2b00      	cmp	r3, #0
   144fe:	d000      	beq.n	14502 <lsm6dso_gy_data_rate_set+0x32>
   14500:	e113      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14502:	230c      	movs	r3, #12
   14504:	18fb      	adds	r3, r7, r3
   14506:	781b      	ldrb	r3, [r3, #0]
   14508:	07db      	lsls	r3, r3, #31
   1450a:	0fdb      	lsrs	r3, r3, #31
   1450c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1450e:	230c      	movs	r3, #12
   14510:	18fb      	adds	r3, r7, r3
   14512:	781b      	ldrb	r3, [r3, #0]
   14514:	079b      	lsls	r3, r3, #30
   14516:	0fdb      	lsrs	r3, r3, #31
   14518:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1451a:	4313      	orrs	r3, r2
   1451c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1451e:	230c      	movs	r3, #12
   14520:	18fb      	adds	r3, r7, r3
   14522:	781b      	ldrb	r3, [r3, #0]
   14524:	075b      	lsls	r3, r3, #29
   14526:	0fdb      	lsrs	r3, r3, #31
   14528:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1452a:	4313      	orrs	r3, r2
   1452c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1452e:	230c      	movs	r3, #12
   14530:	18fb      	adds	r3, r7, r3
   14532:	781b      	ldrb	r3, [r3, #0]
   14534:	071b      	lsls	r3, r3, #28
   14536:	0fdb      	lsrs	r3, r3, #31
   14538:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1453a:	4313      	orrs	r3, r2
   1453c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1453e:	230c      	movs	r3, #12
   14540:	18fb      	adds	r3, r7, r3
   14542:	781b      	ldrb	r3, [r3, #0]
   14544:	06db      	lsls	r3, r3, #27
   14546:	0fdb      	lsrs	r3, r3, #31
   14548:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1454a:	4313      	orrs	r3, r2
   1454c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1454e:	230c      	movs	r3, #12
   14550:	18fb      	adds	r3, r7, r3
   14552:	781b      	ldrb	r3, [r3, #0]
   14554:	069b      	lsls	r3, r3, #26
   14556:	0fdb      	lsrs	r3, r3, #31
   14558:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1455a:	4313      	orrs	r3, r2
   1455c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1455e:	230c      	movs	r3, #12
   14560:	18fb      	adds	r3, r7, r3
   14562:	781b      	ldrb	r3, [r3, #0]
   14564:	065b      	lsls	r3, r3, #25
   14566:	0fdb      	lsrs	r3, r3, #31
   14568:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1456a:	4313      	orrs	r3, r2
   1456c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1456e:	230c      	movs	r3, #12
   14570:	18fb      	adds	r3, r7, r3
   14572:	781b      	ldrb	r3, [r3, #0]
   14574:	061b      	lsls	r3, r3, #24
   14576:	0fdb      	lsrs	r3, r3, #31
   14578:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1457a:	4313      	orrs	r3, r2
   1457c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1457e:	230c      	movs	r3, #12
   14580:	18fb      	adds	r3, r7, r3
   14582:	785b      	ldrb	r3, [r3, #1]
   14584:	07db      	lsls	r3, r3, #31
   14586:	0fdb      	lsrs	r3, r3, #31
   14588:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1458a:	4313      	orrs	r3, r2
   1458c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1458e:	230c      	movs	r3, #12
   14590:	18fb      	adds	r3, r7, r3
   14592:	785b      	ldrb	r3, [r3, #1]
   14594:	079b      	lsls	r3, r3, #30
   14596:	0fdb      	lsrs	r3, r3, #31
   14598:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1459a:	4313      	orrs	r3, r2
   1459c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1459e:	230c      	movs	r3, #12
   145a0:	18fb      	adds	r3, r7, r3
   145a2:	785b      	ldrb	r3, [r3, #1]
   145a4:	075b      	lsls	r3, r3, #29
   145a6:	0fdb      	lsrs	r3, r3, #31
   145a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   145aa:	4313      	orrs	r3, r2
   145ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   145ae:	230c      	movs	r3, #12
   145b0:	18fb      	adds	r3, r7, r3
   145b2:	785b      	ldrb	r3, [r3, #1]
   145b4:	071b      	lsls	r3, r3, #28
   145b6:	0fdb      	lsrs	r3, r3, #31
   145b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   145ba:	4313      	orrs	r3, r2
   145bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   145be:	230c      	movs	r3, #12
   145c0:	18fb      	adds	r3, r7, r3
   145c2:	785b      	ldrb	r3, [r3, #1]
   145c4:	06db      	lsls	r3, r3, #27
   145c6:	0fdb      	lsrs	r3, r3, #31
   145c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   145ca:	4313      	orrs	r3, r2
   145cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   145ce:	230c      	movs	r3, #12
   145d0:	18fb      	adds	r3, r7, r3
   145d2:	785b      	ldrb	r3, [r3, #1]
   145d4:	069b      	lsls	r3, r3, #26
   145d6:	0fdb      	lsrs	r3, r3, #31
   145d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   145da:	4313      	orrs	r3, r2
   145dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   145de:	230c      	movs	r3, #12
   145e0:	18fb      	adds	r3, r7, r3
   145e2:	785b      	ldrb	r3, [r3, #1]
   145e4:	065b      	lsls	r3, r3, #25
   145e6:	0fdb      	lsrs	r3, r3, #31
   145e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   145ea:	4313      	orrs	r3, r2
   145ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   145ee:	230c      	movs	r3, #12
   145f0:	18fb      	adds	r3, r7, r3
   145f2:	785b      	ldrb	r3, [r3, #1]
   145f4:	061b      	lsls	r3, r3, #24
   145f6:	0fdb      	lsrs	r3, r3, #31
   145f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   145fa:	4313      	orrs	r3, r2
   145fc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   145fe:	2b01      	cmp	r3, #1
   14600:	d000      	beq.n	14604 <lsm6dso_gy_data_rate_set+0x134>
   14602:	e092      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   14604:	230b      	movs	r3, #11
   14606:	18fa      	adds	r2, r7, r3
   14608:	687b      	ldr	r3, [r7, #4]
   1460a:	0011      	movs	r1, r2
   1460c:	0018      	movs	r0, r3
   1460e:	4b5e      	ldr	r3, [pc, #376]	; (14788 <lsm6dso_gy_data_rate_set+0x2b8>)
   14610:	4798      	blx	r3
   14612:	0003      	movs	r3, r0
   14614:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   14616:	693b      	ldr	r3, [r7, #16]
   14618:	2b00      	cmp	r3, #0
   1461a:	d000      	beq.n	1461e <lsm6dso_gy_data_rate_set+0x14e>
   1461c:	e085      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   1461e:	230b      	movs	r3, #11
   14620:	18fb      	adds	r3, r7, r3
   14622:	781b      	ldrb	r3, [r3, #0]
   14624:	2b01      	cmp	r3, #1
   14626:	d017      	beq.n	14658 <lsm6dso_gy_data_rate_set+0x188>
   14628:	dc02      	bgt.n	14630 <lsm6dso_gy_data_rate_set+0x160>
   1462a:	2b00      	cmp	r3, #0
   1462c:	d005      	beq.n	1463a <lsm6dso_gy_data_rate_set+0x16a>
   1462e:	e076      	b.n	1471e <lsm6dso_gy_data_rate_set+0x24e>
   14630:	2b02      	cmp	r3, #2
   14632:	d029      	beq.n	14688 <lsm6dso_gy_data_rate_set+0x1b8>
   14634:	2b03      	cmp	r3, #3
   14636:	d048      	beq.n	146ca <lsm6dso_gy_data_rate_set+0x1fa>
   14638:	e071      	b.n	1471e <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   1463a:	1cfb      	adds	r3, r7, #3
   1463c:	781b      	ldrb	r3, [r3, #0]
   1463e:	2b00      	cmp	r3, #0
   14640:	d104      	bne.n	1464c <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   14642:	2317      	movs	r3, #23
   14644:	18fb      	adds	r3, r7, r3
   14646:	2201      	movs	r2, #1
   14648:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1464a:	e06e      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   1464c:	2317      	movs	r3, #23
   1464e:	18fb      	adds	r3, r7, r3
   14650:	1cfa      	adds	r2, r7, #3
   14652:	7812      	ldrb	r2, [r2, #0]
   14654:	701a      	strb	r2, [r3, #0]
            break;
   14656:	e068      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   14658:	1cfb      	adds	r3, r7, #3
   1465a:	781b      	ldrb	r3, [r3, #0]
   1465c:	2b00      	cmp	r3, #0
   1465e:	d104      	bne.n	1466a <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   14660:	2317      	movs	r3, #23
   14662:	18fb      	adds	r3, r7, r3
   14664:	2202      	movs	r2, #2
   14666:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   14668:	e05f      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1466a:	1cfb      	adds	r3, r7, #3
   1466c:	781b      	ldrb	r3, [r3, #0]
   1466e:	2b01      	cmp	r3, #1
   14670:	d104      	bne.n	1467c <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   14672:	2317      	movs	r3, #23
   14674:	18fb      	adds	r3, r7, r3
   14676:	2202      	movs	r2, #2
   14678:	701a      	strb	r2, [r3, #0]
            break;
   1467a:	e056      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   1467c:	2317      	movs	r3, #23
   1467e:	18fb      	adds	r3, r7, r3
   14680:	1cfa      	adds	r2, r7, #3
   14682:	7812      	ldrb	r2, [r2, #0]
   14684:	701a      	strb	r2, [r3, #0]
            break;
   14686:	e050      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   14688:	1cfb      	adds	r3, r7, #3
   1468a:	781b      	ldrb	r3, [r3, #0]
   1468c:	2b00      	cmp	r3, #0
   1468e:	d104      	bne.n	1469a <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   14690:	2317      	movs	r3, #23
   14692:	18fb      	adds	r3, r7, r3
   14694:	2203      	movs	r2, #3
   14696:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   14698:	e047      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1469a:	1cfb      	adds	r3, r7, #3
   1469c:	781b      	ldrb	r3, [r3, #0]
   1469e:	2b01      	cmp	r3, #1
   146a0:	d104      	bne.n	146ac <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   146a2:	2317      	movs	r3, #23
   146a4:	18fb      	adds	r3, r7, r3
   146a6:	2203      	movs	r2, #3
   146a8:	701a      	strb	r2, [r3, #0]
            break;
   146aa:	e03e      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   146ac:	1cfb      	adds	r3, r7, #3
   146ae:	781b      	ldrb	r3, [r3, #0]
   146b0:	2b02      	cmp	r3, #2
   146b2:	d104      	bne.n	146be <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   146b4:	2317      	movs	r3, #23
   146b6:	18fb      	adds	r3, r7, r3
   146b8:	2203      	movs	r2, #3
   146ba:	701a      	strb	r2, [r3, #0]
            break;
   146bc:	e035      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   146be:	2317      	movs	r3, #23
   146c0:	18fb      	adds	r3, r7, r3
   146c2:	1cfa      	adds	r2, r7, #3
   146c4:	7812      	ldrb	r2, [r2, #0]
   146c6:	701a      	strb	r2, [r3, #0]
            break;
   146c8:	e02f      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   146ca:	1cfb      	adds	r3, r7, #3
   146cc:	781b      	ldrb	r3, [r3, #0]
   146ce:	2b00      	cmp	r3, #0
   146d0:	d104      	bne.n	146dc <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   146d2:	2317      	movs	r3, #23
   146d4:	18fb      	adds	r3, r7, r3
   146d6:	2204      	movs	r2, #4
   146d8:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   146da:	e026      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   146dc:	1cfb      	adds	r3, r7, #3
   146de:	781b      	ldrb	r3, [r3, #0]
   146e0:	2b01      	cmp	r3, #1
   146e2:	d104      	bne.n	146ee <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   146e4:	2317      	movs	r3, #23
   146e6:	18fb      	adds	r3, r7, r3
   146e8:	2204      	movs	r2, #4
   146ea:	701a      	strb	r2, [r3, #0]
            break;
   146ec:	e01d      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   146ee:	1cfb      	adds	r3, r7, #3
   146f0:	781b      	ldrb	r3, [r3, #0]
   146f2:	2b02      	cmp	r3, #2
   146f4:	d104      	bne.n	14700 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   146f6:	2317      	movs	r3, #23
   146f8:	18fb      	adds	r3, r7, r3
   146fa:	2204      	movs	r2, #4
   146fc:	701a      	strb	r2, [r3, #0]
            break;
   146fe:	e014      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   14700:	1cfb      	adds	r3, r7, #3
   14702:	781b      	ldrb	r3, [r3, #0]
   14704:	2b03      	cmp	r3, #3
   14706:	d104      	bne.n	14712 <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   14708:	2317      	movs	r3, #23
   1470a:	18fb      	adds	r3, r7, r3
   1470c:	2204      	movs	r2, #4
   1470e:	701a      	strb	r2, [r3, #0]
            break;
   14710:	e00b      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   14712:	2317      	movs	r3, #23
   14714:	18fb      	adds	r3, r7, r3
   14716:	1cfa      	adds	r2, r7, #3
   14718:	7812      	ldrb	r2, [r2, #0]
   1471a:	701a      	strb	r2, [r3, #0]
            break;
   1471c:	e005      	b.n	1472a <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   1471e:	2317      	movs	r3, #23
   14720:	18fb      	adds	r3, r7, r3
   14722:	1cfa      	adds	r2, r7, #3
   14724:	7812      	ldrb	r2, [r2, #0]
   14726:	701a      	strb	r2, [r3, #0]
            break;
   14728:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   1472a:	693b      	ldr	r3, [r7, #16]
   1472c:	2b00      	cmp	r3, #0
   1472e:	d108      	bne.n	14742 <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14730:	2308      	movs	r3, #8
   14732:	18fa      	adds	r2, r7, r3
   14734:	6878      	ldr	r0, [r7, #4]
   14736:	2301      	movs	r3, #1
   14738:	2111      	movs	r1, #17
   1473a:	4c14      	ldr	r4, [pc, #80]	; (1478c <lsm6dso_gy_data_rate_set+0x2bc>)
   1473c:	47a0      	blx	r4
   1473e:	0003      	movs	r3, r0
   14740:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   14742:	693b      	ldr	r3, [r7, #16]
   14744:	2b00      	cmp	r3, #0
   14746:	d118      	bne.n	1477a <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   14748:	2317      	movs	r3, #23
   1474a:	18fb      	adds	r3, r7, r3
   1474c:	781b      	ldrb	r3, [r3, #0]
   1474e:	220f      	movs	r2, #15
   14750:	4013      	ands	r3, r2
   14752:	b2da      	uxtb	r2, r3
   14754:	2308      	movs	r3, #8
   14756:	18fb      	adds	r3, r7, r3
   14758:	0110      	lsls	r0, r2, #4
   1475a:	781a      	ldrb	r2, [r3, #0]
   1475c:	210f      	movs	r1, #15
   1475e:	400a      	ands	r2, r1
   14760:	1c11      	adds	r1, r2, #0
   14762:	1c02      	adds	r2, r0, #0
   14764:	430a      	orrs	r2, r1
   14766:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14768:	2308      	movs	r3, #8
   1476a:	18fa      	adds	r2, r7, r3
   1476c:	6878      	ldr	r0, [r7, #4]
   1476e:	2301      	movs	r3, #1
   14770:	2111      	movs	r1, #17
   14772:	4c07      	ldr	r4, [pc, #28]	; (14790 <lsm6dso_gy_data_rate_set+0x2c0>)
   14774:	47a0      	blx	r4
   14776:	0003      	movs	r3, r0
   14778:	613b      	str	r3, [r7, #16]
  }

  return ret;
   1477a:	693b      	ldr	r3, [r7, #16]
}
   1477c:	0018      	movs	r0, r3
   1477e:	46bd      	mov	sp, r7
   14780:	b007      	add	sp, #28
   14782:	bd90      	pop	{r4, r7, pc}
   14784:	00014c7d 	.word	0x00014c7d
   14788:	00014cd1 	.word	0x00014cd1
   1478c:	00014071 	.word	0x00014071
   14790:	000140b7 	.word	0x000140b7

00014794 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   14794:	b590      	push	{r4, r7, lr}
   14796:	b085      	sub	sp, #20
   14798:	af00      	add	r7, sp, #0
   1479a:	6078      	str	r0, [r7, #4]
   1479c:	000a      	movs	r2, r1
   1479e:	1cfb      	adds	r3, r7, #3
   147a0:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   147a2:	2308      	movs	r3, #8
   147a4:	18fa      	adds	r2, r7, r3
   147a6:	6878      	ldr	r0, [r7, #4]
   147a8:	2301      	movs	r3, #1
   147aa:	2112      	movs	r1, #18
   147ac:	4c12      	ldr	r4, [pc, #72]	; (147f8 <lsm6dso_block_data_update_set+0x64>)
   147ae:	47a0      	blx	r4
   147b0:	0003      	movs	r3, r0
   147b2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   147b4:	68fb      	ldr	r3, [r7, #12]
   147b6:	2b00      	cmp	r3, #0
   147b8:	d119      	bne.n	147ee <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   147ba:	1cfb      	adds	r3, r7, #3
   147bc:	781b      	ldrb	r3, [r3, #0]
   147be:	2201      	movs	r2, #1
   147c0:	4013      	ands	r3, r2
   147c2:	b2da      	uxtb	r2, r3
   147c4:	2308      	movs	r3, #8
   147c6:	18fb      	adds	r3, r7, r3
   147c8:	2101      	movs	r1, #1
   147ca:	400a      	ands	r2, r1
   147cc:	0190      	lsls	r0, r2, #6
   147ce:	781a      	ldrb	r2, [r3, #0]
   147d0:	2140      	movs	r1, #64	; 0x40
   147d2:	438a      	bics	r2, r1
   147d4:	1c11      	adds	r1, r2, #0
   147d6:	1c02      	adds	r2, r0, #0
   147d8:	430a      	orrs	r2, r1
   147da:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   147dc:	2308      	movs	r3, #8
   147de:	18fa      	adds	r2, r7, r3
   147e0:	6878      	ldr	r0, [r7, #4]
   147e2:	2301      	movs	r3, #1
   147e4:	2112      	movs	r1, #18
   147e6:	4c05      	ldr	r4, [pc, #20]	; (147fc <lsm6dso_block_data_update_set+0x68>)
   147e8:	47a0      	blx	r4
   147ea:	0003      	movs	r3, r0
   147ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   147ee:	68fb      	ldr	r3, [r7, #12]
}
   147f0:	0018      	movs	r0, r3
   147f2:	46bd      	mov	sp, r7
   147f4:	b005      	add	sp, #20
   147f6:	bd90      	pop	{r4, r7, pc}
   147f8:	00014071 	.word	0x00014071
   147fc:	000140b7 	.word	0x000140b7

00014800 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   14800:	b590      	push	{r4, r7, lr}
   14802:	b085      	sub	sp, #20
   14804:	af00      	add	r7, sp, #0
   14806:	6078      	str	r0, [r7, #4]
   14808:	000a      	movs	r2, r1
   1480a:	1cfb      	adds	r3, r7, #3
   1480c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   1480e:	2308      	movs	r3, #8
   14810:	18fa      	adds	r2, r7, r3
   14812:	6878      	ldr	r0, [r7, #4]
   14814:	2301      	movs	r3, #1
   14816:	2115      	movs	r1, #21
   14818:	4c12      	ldr	r4, [pc, #72]	; (14864 <lsm6dso_xl_offset_weight_set+0x64>)
   1481a:	47a0      	blx	r4
   1481c:	0003      	movs	r3, r0
   1481e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14820:	68fb      	ldr	r3, [r7, #12]
   14822:	2b00      	cmp	r3, #0
   14824:	d119      	bne.n	1485a <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   14826:	1cfb      	adds	r3, r7, #3
   14828:	781b      	ldrb	r3, [r3, #0]
   1482a:	2201      	movs	r2, #1
   1482c:	4013      	ands	r3, r2
   1482e:	b2da      	uxtb	r2, r3
   14830:	2308      	movs	r3, #8
   14832:	18fb      	adds	r3, r7, r3
   14834:	2101      	movs	r1, #1
   14836:	400a      	ands	r2, r1
   14838:	00d0      	lsls	r0, r2, #3
   1483a:	781a      	ldrb	r2, [r3, #0]
   1483c:	2108      	movs	r1, #8
   1483e:	438a      	bics	r2, r1
   14840:	1c11      	adds	r1, r2, #0
   14842:	1c02      	adds	r2, r0, #0
   14844:	430a      	orrs	r2, r1
   14846:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   14848:	2308      	movs	r3, #8
   1484a:	18fa      	adds	r2, r7, r3
   1484c:	6878      	ldr	r0, [r7, #4]
   1484e:	2301      	movs	r3, #1
   14850:	2115      	movs	r1, #21
   14852:	4c05      	ldr	r4, [pc, #20]	; (14868 <lsm6dso_xl_offset_weight_set+0x68>)
   14854:	47a0      	blx	r4
   14856:	0003      	movs	r3, r0
   14858:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1485a:	68fb      	ldr	r3, [r7, #12]
}
   1485c:	0018      	movs	r0, r3
   1485e:	46bd      	mov	sp, r7
   14860:	b005      	add	sp, #20
   14862:	bd90      	pop	{r4, r7, pc}
   14864:	00014071 	.word	0x00014071
   14868:	000140b7 	.word	0x000140b7

0001486c <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   1486c:	b590      	push	{r4, r7, lr}
   1486e:	b085      	sub	sp, #20
   14870:	af00      	add	r7, sp, #0
   14872:	6078      	str	r0, [r7, #4]
   14874:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   14876:	2308      	movs	r3, #8
   14878:	18fa      	adds	r2, r7, r3
   1487a:	6878      	ldr	r0, [r7, #4]
   1487c:	2301      	movs	r3, #1
   1487e:	211e      	movs	r1, #30
   14880:	4c08      	ldr	r4, [pc, #32]	; (148a4 <lsm6dso_xl_flag_data_ready_get+0x38>)
   14882:	47a0      	blx	r4
   14884:	0003      	movs	r3, r0
   14886:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   14888:	2308      	movs	r3, #8
   1488a:	18fb      	adds	r3, r7, r3
   1488c:	781b      	ldrb	r3, [r3, #0]
   1488e:	07db      	lsls	r3, r3, #31
   14890:	0fdb      	lsrs	r3, r3, #31
   14892:	b2db      	uxtb	r3, r3
   14894:	001a      	movs	r2, r3
   14896:	683b      	ldr	r3, [r7, #0]
   14898:	701a      	strb	r2, [r3, #0]

  return ret;
   1489a:	68fb      	ldr	r3, [r7, #12]
}
   1489c:	0018      	movs	r0, r3
   1489e:	46bd      	mov	sp, r7
   148a0:	b005      	add	sp, #20
   148a2:	bd90      	pop	{r4, r7, pc}
   148a4:	00014071 	.word	0x00014071

000148a8 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   148a8:	b590      	push	{r4, r7, lr}
   148aa:	b087      	sub	sp, #28
   148ac:	af00      	add	r7, sp, #0
   148ae:	6078      	str	r0, [r7, #4]
   148b0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   148b2:	230c      	movs	r3, #12
   148b4:	18fa      	adds	r2, r7, r3
   148b6:	6878      	ldr	r0, [r7, #4]
   148b8:	2306      	movs	r3, #6
   148ba:	2128      	movs	r1, #40	; 0x28
   148bc:	4c26      	ldr	r4, [pc, #152]	; (14958 <lsm6dso_acceleration_raw_get+0xb0>)
   148be:	47a0      	blx	r4
   148c0:	0003      	movs	r3, r0
   148c2:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   148c4:	230c      	movs	r3, #12
   148c6:	18fb      	adds	r3, r7, r3
   148c8:	785b      	ldrb	r3, [r3, #1]
   148ca:	b21a      	sxth	r2, r3
   148cc:	683b      	ldr	r3, [r7, #0]
   148ce:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   148d0:	683b      	ldr	r3, [r7, #0]
   148d2:	2200      	movs	r2, #0
   148d4:	5e9b      	ldrsh	r3, [r3, r2]
   148d6:	b29b      	uxth	r3, r3
   148d8:	021b      	lsls	r3, r3, #8
   148da:	b29a      	uxth	r2, r3
   148dc:	230c      	movs	r3, #12
   148de:	18fb      	adds	r3, r7, r3
   148e0:	781b      	ldrb	r3, [r3, #0]
   148e2:	b29b      	uxth	r3, r3
   148e4:	18d3      	adds	r3, r2, r3
   148e6:	b29b      	uxth	r3, r3
   148e8:	b21a      	sxth	r2, r3
   148ea:	683b      	ldr	r3, [r7, #0]
   148ec:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   148ee:	683b      	ldr	r3, [r7, #0]
   148f0:	3302      	adds	r3, #2
   148f2:	220c      	movs	r2, #12
   148f4:	18ba      	adds	r2, r7, r2
   148f6:	78d2      	ldrb	r2, [r2, #3]
   148f8:	b212      	sxth	r2, r2
   148fa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   148fc:	683b      	ldr	r3, [r7, #0]
   148fe:	3302      	adds	r3, #2
   14900:	683a      	ldr	r2, [r7, #0]
   14902:	3202      	adds	r2, #2
   14904:	2100      	movs	r1, #0
   14906:	5e52      	ldrsh	r2, [r2, r1]
   14908:	b292      	uxth	r2, r2
   1490a:	0212      	lsls	r2, r2, #8
   1490c:	b291      	uxth	r1, r2
   1490e:	220c      	movs	r2, #12
   14910:	18ba      	adds	r2, r7, r2
   14912:	7892      	ldrb	r2, [r2, #2]
   14914:	b292      	uxth	r2, r2
   14916:	188a      	adds	r2, r1, r2
   14918:	b292      	uxth	r2, r2
   1491a:	b212      	sxth	r2, r2
   1491c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   1491e:	683b      	ldr	r3, [r7, #0]
   14920:	3304      	adds	r3, #4
   14922:	220c      	movs	r2, #12
   14924:	18ba      	adds	r2, r7, r2
   14926:	7952      	ldrb	r2, [r2, #5]
   14928:	b212      	sxth	r2, r2
   1492a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   1492c:	683b      	ldr	r3, [r7, #0]
   1492e:	3304      	adds	r3, #4
   14930:	683a      	ldr	r2, [r7, #0]
   14932:	3204      	adds	r2, #4
   14934:	2100      	movs	r1, #0
   14936:	5e52      	ldrsh	r2, [r2, r1]
   14938:	b292      	uxth	r2, r2
   1493a:	0212      	lsls	r2, r2, #8
   1493c:	b291      	uxth	r1, r2
   1493e:	220c      	movs	r2, #12
   14940:	18ba      	adds	r2, r7, r2
   14942:	7912      	ldrb	r2, [r2, #4]
   14944:	b292      	uxth	r2, r2
   14946:	188a      	adds	r2, r1, r2
   14948:	b292      	uxth	r2, r2
   1494a:	b212      	sxth	r2, r2
   1494c:	801a      	strh	r2, [r3, #0]

  return ret;
   1494e:	697b      	ldr	r3, [r7, #20]
}
   14950:	0018      	movs	r0, r3
   14952:	46bd      	mov	sp, r7
   14954:	b007      	add	sp, #28
   14956:	bd90      	pop	{r4, r7, pc}
   14958:	00014071 	.word	0x00014071

0001495c <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   1495c:	b590      	push	{r4, r7, lr}
   1495e:	b085      	sub	sp, #20
   14960:	af00      	add	r7, sp, #0
   14962:	6078      	str	r0, [r7, #4]
   14964:	000a      	movs	r2, r1
   14966:	1cfb      	adds	r3, r7, #3
   14968:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   1496a:	2308      	movs	r3, #8
   1496c:	18fa      	adds	r2, r7, r3
   1496e:	6878      	ldr	r0, [r7, #4]
   14970:	2301      	movs	r3, #1
   14972:	2101      	movs	r1, #1
   14974:	4c11      	ldr	r4, [pc, #68]	; (149bc <lsm6dso_mem_bank_set+0x60>)
   14976:	47a0      	blx	r4
   14978:	0003      	movs	r3, r0
   1497a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1497c:	68fb      	ldr	r3, [r7, #12]
   1497e:	2b00      	cmp	r3, #0
   14980:	d117      	bne.n	149b2 <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   14982:	1cfb      	adds	r3, r7, #3
   14984:	781b      	ldrb	r3, [r3, #0]
   14986:	2203      	movs	r2, #3
   14988:	4013      	ands	r3, r2
   1498a:	b2da      	uxtb	r2, r3
   1498c:	2308      	movs	r3, #8
   1498e:	18fb      	adds	r3, r7, r3
   14990:	0190      	lsls	r0, r2, #6
   14992:	781a      	ldrb	r2, [r3, #0]
   14994:	213f      	movs	r1, #63	; 0x3f
   14996:	400a      	ands	r2, r1
   14998:	1c11      	adds	r1, r2, #0
   1499a:	1c02      	adds	r2, r0, #0
   1499c:	430a      	orrs	r2, r1
   1499e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   149a0:	2308      	movs	r3, #8
   149a2:	18fa      	adds	r2, r7, r3
   149a4:	6878      	ldr	r0, [r7, #4]
   149a6:	2301      	movs	r3, #1
   149a8:	2101      	movs	r1, #1
   149aa:	4c05      	ldr	r4, [pc, #20]	; (149c0 <lsm6dso_mem_bank_set+0x64>)
   149ac:	47a0      	blx	r4
   149ae:	0003      	movs	r3, r0
   149b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   149b2:	68fb      	ldr	r3, [r7, #12]
}
   149b4:	0018      	movs	r0, r3
   149b6:	46bd      	mov	sp, r7
   149b8:	b005      	add	sp, #20
   149ba:	bd90      	pop	{r4, r7, pc}
   149bc:	00014071 	.word	0x00014071
   149c0:	000140b7 	.word	0x000140b7

000149c4 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   149c4:	b590      	push	{r4, r7, lr}
   149c6:	b085      	sub	sp, #20
   149c8:	af00      	add	r7, sp, #0
   149ca:	6078      	str	r0, [r7, #4]
   149cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   149ce:	683a      	ldr	r2, [r7, #0]
   149d0:	6878      	ldr	r0, [r7, #4]
   149d2:	2301      	movs	r3, #1
   149d4:	210f      	movs	r1, #15
   149d6:	4c04      	ldr	r4, [pc, #16]	; (149e8 <lsm6dso_device_id_get+0x24>)
   149d8:	47a0      	blx	r4
   149da:	0003      	movs	r3, r0
   149dc:	60fb      	str	r3, [r7, #12]

  return ret;
   149de:	68fb      	ldr	r3, [r7, #12]
}
   149e0:	0018      	movs	r0, r3
   149e2:	46bd      	mov	sp, r7
   149e4:	b005      	add	sp, #20
   149e6:	bd90      	pop	{r4, r7, pc}
   149e8:	00014071 	.word	0x00014071

000149ec <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   149ec:	b590      	push	{r4, r7, lr}
   149ee:	b085      	sub	sp, #20
   149f0:	af00      	add	r7, sp, #0
   149f2:	6078      	str	r0, [r7, #4]
   149f4:	000a      	movs	r2, r1
   149f6:	1cfb      	adds	r3, r7, #3
   149f8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   149fa:	2308      	movs	r3, #8
   149fc:	18fa      	adds	r2, r7, r3
   149fe:	6878      	ldr	r0, [r7, #4]
   14a00:	2301      	movs	r3, #1
   14a02:	2112      	movs	r1, #18
   14a04:	4c12      	ldr	r4, [pc, #72]	; (14a50 <lsm6dso_reset_set+0x64>)
   14a06:	47a0      	blx	r4
   14a08:	0003      	movs	r3, r0
   14a0a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14a0c:	68fb      	ldr	r3, [r7, #12]
   14a0e:	2b00      	cmp	r3, #0
   14a10:	d119      	bne.n	14a46 <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   14a12:	1cfb      	adds	r3, r7, #3
   14a14:	781b      	ldrb	r3, [r3, #0]
   14a16:	2201      	movs	r2, #1
   14a18:	4013      	ands	r3, r2
   14a1a:	b2da      	uxtb	r2, r3
   14a1c:	2308      	movs	r3, #8
   14a1e:	18fb      	adds	r3, r7, r3
   14a20:	2101      	movs	r1, #1
   14a22:	400a      	ands	r2, r1
   14a24:	0010      	movs	r0, r2
   14a26:	781a      	ldrb	r2, [r3, #0]
   14a28:	2101      	movs	r1, #1
   14a2a:	438a      	bics	r2, r1
   14a2c:	1c11      	adds	r1, r2, #0
   14a2e:	1c02      	adds	r2, r0, #0
   14a30:	430a      	orrs	r2, r1
   14a32:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14a34:	2308      	movs	r3, #8
   14a36:	18fa      	adds	r2, r7, r3
   14a38:	6878      	ldr	r0, [r7, #4]
   14a3a:	2301      	movs	r3, #1
   14a3c:	2112      	movs	r1, #18
   14a3e:	4c05      	ldr	r4, [pc, #20]	; (14a54 <lsm6dso_reset_set+0x68>)
   14a40:	47a0      	blx	r4
   14a42:	0003      	movs	r3, r0
   14a44:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14a46:	68fb      	ldr	r3, [r7, #12]
}
   14a48:	0018      	movs	r0, r3
   14a4a:	46bd      	mov	sp, r7
   14a4c:	b005      	add	sp, #20
   14a4e:	bd90      	pop	{r4, r7, pc}
   14a50:	00014071 	.word	0x00014071
   14a54:	000140b7 	.word	0x000140b7

00014a58 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   14a58:	b590      	push	{r4, r7, lr}
   14a5a:	b085      	sub	sp, #20
   14a5c:	af00      	add	r7, sp, #0
   14a5e:	6078      	str	r0, [r7, #4]
   14a60:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14a62:	2308      	movs	r3, #8
   14a64:	18fa      	adds	r2, r7, r3
   14a66:	6878      	ldr	r0, [r7, #4]
   14a68:	2301      	movs	r3, #1
   14a6a:	2112      	movs	r1, #18
   14a6c:	4c08      	ldr	r4, [pc, #32]	; (14a90 <lsm6dso_reset_get+0x38>)
   14a6e:	47a0      	blx	r4
   14a70:	0003      	movs	r3, r0
   14a72:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   14a74:	2308      	movs	r3, #8
   14a76:	18fb      	adds	r3, r7, r3
   14a78:	781b      	ldrb	r3, [r3, #0]
   14a7a:	07db      	lsls	r3, r3, #31
   14a7c:	0fdb      	lsrs	r3, r3, #31
   14a7e:	b2db      	uxtb	r3, r3
   14a80:	001a      	movs	r2, r3
   14a82:	683b      	ldr	r3, [r7, #0]
   14a84:	701a      	strb	r2, [r3, #0]

  return ret;
   14a86:	68fb      	ldr	r3, [r7, #12]
}
   14a88:	0018      	movs	r0, r3
   14a8a:	46bd      	mov	sp, r7
   14a8c:	b005      	add	sp, #20
   14a8e:	bd90      	pop	{r4, r7, pc}
   14a90:	00014071 	.word	0x00014071

00014a94 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   14a94:	b590      	push	{r4, r7, lr}
   14a96:	b085      	sub	sp, #20
   14a98:	af00      	add	r7, sp, #0
   14a9a:	6078      	str	r0, [r7, #4]
   14a9c:	000a      	movs	r2, r1
   14a9e:	1cfb      	adds	r3, r7, #3
   14aa0:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14aa2:	2308      	movs	r3, #8
   14aa4:	18fa      	adds	r2, r7, r3
   14aa6:	6878      	ldr	r0, [r7, #4]
   14aa8:	2301      	movs	r3, #1
   14aaa:	2110      	movs	r1, #16
   14aac:	4c12      	ldr	r4, [pc, #72]	; (14af8 <lsm6dso_xl_filter_lp2_set+0x64>)
   14aae:	47a0      	blx	r4
   14ab0:	0003      	movs	r3, r0
   14ab2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14ab4:	68fb      	ldr	r3, [r7, #12]
   14ab6:	2b00      	cmp	r3, #0
   14ab8:	d119      	bne.n	14aee <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   14aba:	1cfb      	adds	r3, r7, #3
   14abc:	781b      	ldrb	r3, [r3, #0]
   14abe:	2201      	movs	r2, #1
   14ac0:	4013      	ands	r3, r2
   14ac2:	b2da      	uxtb	r2, r3
   14ac4:	2308      	movs	r3, #8
   14ac6:	18fb      	adds	r3, r7, r3
   14ac8:	2101      	movs	r1, #1
   14aca:	400a      	ands	r2, r1
   14acc:	1890      	adds	r0, r2, r2
   14ace:	781a      	ldrb	r2, [r3, #0]
   14ad0:	2102      	movs	r1, #2
   14ad2:	438a      	bics	r2, r1
   14ad4:	1c11      	adds	r1, r2, #0
   14ad6:	1c02      	adds	r2, r0, #0
   14ad8:	430a      	orrs	r2, r1
   14ada:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14adc:	2308      	movs	r3, #8
   14ade:	18fa      	adds	r2, r7, r3
   14ae0:	6878      	ldr	r0, [r7, #4]
   14ae2:	2301      	movs	r3, #1
   14ae4:	2110      	movs	r1, #16
   14ae6:	4c05      	ldr	r4, [pc, #20]	; (14afc <lsm6dso_xl_filter_lp2_set+0x68>)
   14ae8:	47a0      	blx	r4
   14aea:	0003      	movs	r3, r0
   14aec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14aee:	68fb      	ldr	r3, [r7, #12]
}
   14af0:	0018      	movs	r0, r3
   14af2:	46bd      	mov	sp, r7
   14af4:	b005      	add	sp, #20
   14af6:	bd90      	pop	{r4, r7, pc}
   14af8:	00014071 	.word	0x00014071
   14afc:	000140b7 	.word	0x000140b7

00014b00 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   14b00:	b590      	push	{r4, r7, lr}
   14b02:	b085      	sub	sp, #20
   14b04:	af00      	add	r7, sp, #0
   14b06:	6078      	str	r0, [r7, #4]
   14b08:	000a      	movs	r2, r1
   14b0a:	1cfb      	adds	r3, r7, #3
   14b0c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   14b0e:	2308      	movs	r3, #8
   14b10:	18fa      	adds	r2, r7, r3
   14b12:	6878      	ldr	r0, [r7, #4]
   14b14:	2301      	movs	r3, #1
   14b16:	2117      	movs	r1, #23
   14b18:	4c25      	ldr	r4, [pc, #148]	; (14bb0 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   14b1a:	47a0      	blx	r4
   14b1c:	0003      	movs	r3, r0
   14b1e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14b20:	68fb      	ldr	r3, [r7, #12]
   14b22:	2b00      	cmp	r3, #0
   14b24:	d13f      	bne.n	14ba6 <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   14b26:	1cfb      	adds	r3, r7, #3
   14b28:	781b      	ldrb	r3, [r3, #0]
   14b2a:	091b      	lsrs	r3, r3, #4
   14b2c:	b2db      	uxtb	r3, r3
   14b2e:	1c1a      	adds	r2, r3, #0
   14b30:	2301      	movs	r3, #1
   14b32:	4013      	ands	r3, r2
   14b34:	b2da      	uxtb	r2, r3
   14b36:	2308      	movs	r3, #8
   14b38:	18fb      	adds	r3, r7, r3
   14b3a:	2101      	movs	r1, #1
   14b3c:	400a      	ands	r2, r1
   14b3e:	0090      	lsls	r0, r2, #2
   14b40:	781a      	ldrb	r2, [r3, #0]
   14b42:	2104      	movs	r1, #4
   14b44:	438a      	bics	r2, r1
   14b46:	1c11      	adds	r1, r2, #0
   14b48:	1c02      	adds	r2, r0, #0
   14b4a:	430a      	orrs	r2, r1
   14b4c:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   14b4e:	1cfb      	adds	r3, r7, #3
   14b50:	781b      	ldrb	r3, [r3, #0]
   14b52:	095b      	lsrs	r3, r3, #5
   14b54:	b2db      	uxtb	r3, r3
   14b56:	1c1a      	adds	r2, r3, #0
   14b58:	2301      	movs	r3, #1
   14b5a:	4013      	ands	r3, r2
   14b5c:	b2da      	uxtb	r2, r3
   14b5e:	2308      	movs	r3, #8
   14b60:	18fb      	adds	r3, r7, r3
   14b62:	2101      	movs	r1, #1
   14b64:	400a      	ands	r2, r1
   14b66:	0110      	lsls	r0, r2, #4
   14b68:	781a      	ldrb	r2, [r3, #0]
   14b6a:	2110      	movs	r1, #16
   14b6c:	438a      	bics	r2, r1
   14b6e:	1c11      	adds	r1, r2, #0
   14b70:	1c02      	adds	r2, r0, #0
   14b72:	430a      	orrs	r2, r1
   14b74:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   14b76:	1cfb      	adds	r3, r7, #3
   14b78:	781b      	ldrb	r3, [r3, #0]
   14b7a:	2207      	movs	r2, #7
   14b7c:	4013      	ands	r3, r2
   14b7e:	b2da      	uxtb	r2, r3
   14b80:	2308      	movs	r3, #8
   14b82:	18fb      	adds	r3, r7, r3
   14b84:	0150      	lsls	r0, r2, #5
   14b86:	781a      	ldrb	r2, [r3, #0]
   14b88:	211f      	movs	r1, #31
   14b8a:	400a      	ands	r2, r1
   14b8c:	1c11      	adds	r1, r2, #0
   14b8e:	1c02      	adds	r2, r0, #0
   14b90:	430a      	orrs	r2, r1
   14b92:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   14b94:	2308      	movs	r3, #8
   14b96:	18fa      	adds	r2, r7, r3
   14b98:	6878      	ldr	r0, [r7, #4]
   14b9a:	2301      	movs	r3, #1
   14b9c:	2117      	movs	r1, #23
   14b9e:	4c05      	ldr	r4, [pc, #20]	; (14bb4 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   14ba0:	47a0      	blx	r4
   14ba2:	0003      	movs	r3, r0
   14ba4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14ba6:	68fb      	ldr	r3, [r7, #12]
}
   14ba8:	0018      	movs	r0, r3
   14baa:	46bd      	mov	sp, r7
   14bac:	b005      	add	sp, #20
   14bae:	bd90      	pop	{r4, r7, pc}
   14bb0:	00014071 	.word	0x00014071
   14bb4:	000140b7 	.word	0x000140b7

00014bb8 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   14bb8:	b590      	push	{r4, r7, lr}
   14bba:	b087      	sub	sp, #28
   14bbc:	af00      	add	r7, sp, #0
   14bbe:	6078      	str	r0, [r7, #4]
   14bc0:	000a      	movs	r2, r1
   14bc2:	1cfb      	adds	r3, r7, #3
   14bc4:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   14bc6:	230c      	movs	r3, #12
   14bc8:	18fa      	adds	r2, r7, r3
   14bca:	6878      	ldr	r0, [r7, #4]
   14bcc:	2301      	movs	r3, #1
   14bce:	2118      	movs	r1, #24
   14bd0:	4c28      	ldr	r4, [pc, #160]	; (14c74 <lsm6dso_i3c_disable_set+0xbc>)
   14bd2:	47a0      	blx	r4
   14bd4:	0003      	movs	r3, r0
   14bd6:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   14bd8:	697b      	ldr	r3, [r7, #20]
   14bda:	2b00      	cmp	r3, #0
   14bdc:	d11c      	bne.n	14c18 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   14bde:	1cfb      	adds	r3, r7, #3
   14be0:	781b      	ldrb	r3, [r3, #0]
   14be2:	09db      	lsrs	r3, r3, #7
   14be4:	b2db      	uxtb	r3, r3
   14be6:	1c1a      	adds	r2, r3, #0
   14be8:	2301      	movs	r3, #1
   14bea:	4013      	ands	r3, r2
   14bec:	b2da      	uxtb	r2, r3
   14bee:	230c      	movs	r3, #12
   14bf0:	18fb      	adds	r3, r7, r3
   14bf2:	2101      	movs	r1, #1
   14bf4:	400a      	ands	r2, r1
   14bf6:	1890      	adds	r0, r2, r2
   14bf8:	781a      	ldrb	r2, [r3, #0]
   14bfa:	2102      	movs	r1, #2
   14bfc:	438a      	bics	r2, r1
   14bfe:	1c11      	adds	r1, r2, #0
   14c00:	1c02      	adds	r2, r0, #0
   14c02:	430a      	orrs	r2, r1
   14c04:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   14c06:	230c      	movs	r3, #12
   14c08:	18fa      	adds	r2, r7, r3
   14c0a:	6878      	ldr	r0, [r7, #4]
   14c0c:	2301      	movs	r3, #1
   14c0e:	2118      	movs	r1, #24
   14c10:	4c19      	ldr	r4, [pc, #100]	; (14c78 <lsm6dso_i3c_disable_set+0xc0>)
   14c12:	47a0      	blx	r4
   14c14:	0003      	movs	r3, r0
   14c16:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   14c18:	697b      	ldr	r3, [r7, #20]
   14c1a:	2b00      	cmp	r3, #0
   14c1c:	d108      	bne.n	14c30 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   14c1e:	2310      	movs	r3, #16
   14c20:	18fa      	adds	r2, r7, r3
   14c22:	6878      	ldr	r0, [r7, #4]
   14c24:	2301      	movs	r3, #1
   14c26:	2162      	movs	r1, #98	; 0x62
   14c28:	4c12      	ldr	r4, [pc, #72]	; (14c74 <lsm6dso_i3c_disable_set+0xbc>)
   14c2a:	47a0      	blx	r4
   14c2c:	0003      	movs	r3, r0
   14c2e:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   14c30:	697b      	ldr	r3, [r7, #20]
   14c32:	2b00      	cmp	r3, #0
   14c34:	d119      	bne.n	14c6a <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   14c36:	1cfb      	adds	r3, r7, #3
   14c38:	781b      	ldrb	r3, [r3, #0]
   14c3a:	2203      	movs	r2, #3
   14c3c:	4013      	ands	r3, r2
   14c3e:	b2da      	uxtb	r2, r3
   14c40:	2310      	movs	r3, #16
   14c42:	18fb      	adds	r3, r7, r3
   14c44:	2103      	movs	r1, #3
   14c46:	400a      	ands	r2, r1
   14c48:	00d0      	lsls	r0, r2, #3
   14c4a:	781a      	ldrb	r2, [r3, #0]
   14c4c:	2118      	movs	r1, #24
   14c4e:	438a      	bics	r2, r1
   14c50:	1c11      	adds	r1, r2, #0
   14c52:	1c02      	adds	r2, r0, #0
   14c54:	430a      	orrs	r2, r1
   14c56:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   14c58:	2310      	movs	r3, #16
   14c5a:	18fa      	adds	r2, r7, r3
   14c5c:	6878      	ldr	r0, [r7, #4]
   14c5e:	2301      	movs	r3, #1
   14c60:	2162      	movs	r1, #98	; 0x62
   14c62:	4c05      	ldr	r4, [pc, #20]	; (14c78 <lsm6dso_i3c_disable_set+0xc0>)
   14c64:	47a0      	blx	r4
   14c66:	0003      	movs	r3, r0
   14c68:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   14c6a:	697b      	ldr	r3, [r7, #20]
}
   14c6c:	0018      	movs	r0, r3
   14c6e:	46bd      	mov	sp, r7
   14c70:	b007      	add	sp, #28
   14c72:	bd90      	pop	{r4, r7, pc}
   14c74:	00014071 	.word	0x00014071
   14c78:	000140b7 	.word	0x000140b7

00014c7c <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   14c7c:	b590      	push	{r4, r7, lr}
   14c7e:	b085      	sub	sp, #20
   14c80:	af00      	add	r7, sp, #0
   14c82:	6078      	str	r0, [r7, #4]
   14c84:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   14c86:	687b      	ldr	r3, [r7, #4]
   14c88:	2102      	movs	r1, #2
   14c8a:	0018      	movs	r0, r3
   14c8c:	4b0e      	ldr	r3, [pc, #56]	; (14cc8 <lsm6dso_fsm_enable_get+0x4c>)
   14c8e:	4798      	blx	r3
   14c90:	0003      	movs	r3, r0
   14c92:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14c94:	68fb      	ldr	r3, [r7, #12]
   14c96:	2b00      	cmp	r3, #0
   14c98:	d107      	bne.n	14caa <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   14c9a:	683a      	ldr	r2, [r7, #0]
   14c9c:	6878      	ldr	r0, [r7, #4]
   14c9e:	2302      	movs	r3, #2
   14ca0:	2146      	movs	r1, #70	; 0x46
   14ca2:	4c0a      	ldr	r4, [pc, #40]	; (14ccc <lsm6dso_fsm_enable_get+0x50>)
   14ca4:	47a0      	blx	r4
   14ca6:	0003      	movs	r3, r0
   14ca8:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   14caa:	68fb      	ldr	r3, [r7, #12]
   14cac:	2b00      	cmp	r3, #0
   14cae:	d106      	bne.n	14cbe <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   14cb0:	687b      	ldr	r3, [r7, #4]
   14cb2:	2100      	movs	r1, #0
   14cb4:	0018      	movs	r0, r3
   14cb6:	4b04      	ldr	r3, [pc, #16]	; (14cc8 <lsm6dso_fsm_enable_get+0x4c>)
   14cb8:	4798      	blx	r3
   14cba:	0003      	movs	r3, r0
   14cbc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14cbe:	68fb      	ldr	r3, [r7, #12]
}
   14cc0:	0018      	movs	r0, r3
   14cc2:	46bd      	mov	sp, r7
   14cc4:	b005      	add	sp, #20
   14cc6:	bd90      	pop	{r4, r7, pc}
   14cc8:	0001495d 	.word	0x0001495d
   14ccc:	00014071 	.word	0x00014071

00014cd0 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   14cd0:	b590      	push	{r4, r7, lr}
   14cd2:	b085      	sub	sp, #20
   14cd4:	af00      	add	r7, sp, #0
   14cd6:	6078      	str	r0, [r7, #4]
   14cd8:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   14cda:	687b      	ldr	r3, [r7, #4]
   14cdc:	2102      	movs	r1, #2
   14cde:	0018      	movs	r0, r3
   14ce0:	4b21      	ldr	r3, [pc, #132]	; (14d68 <lsm6dso_fsm_data_rate_get+0x98>)
   14ce2:	4798      	blx	r3
   14ce4:	0003      	movs	r3, r0
   14ce6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14ce8:	68fb      	ldr	r3, [r7, #12]
   14cea:	2b00      	cmp	r3, #0
   14cec:	d108      	bne.n	14d00 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   14cee:	2308      	movs	r3, #8
   14cf0:	18fa      	adds	r2, r7, r3
   14cf2:	6878      	ldr	r0, [r7, #4]
   14cf4:	2301      	movs	r3, #1
   14cf6:	215f      	movs	r1, #95	; 0x5f
   14cf8:	4c1c      	ldr	r4, [pc, #112]	; (14d6c <lsm6dso_fsm_data_rate_get+0x9c>)
   14cfa:	47a0      	blx	r4
   14cfc:	0003      	movs	r3, r0
   14cfe:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   14d00:	68fb      	ldr	r3, [r7, #12]
   14d02:	2b00      	cmp	r3, #0
   14d04:	d12b      	bne.n	14d5e <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   14d06:	2308      	movs	r3, #8
   14d08:	18fb      	adds	r3, r7, r3
   14d0a:	781b      	ldrb	r3, [r3, #0]
   14d0c:	06db      	lsls	r3, r3, #27
   14d0e:	0f9b      	lsrs	r3, r3, #30
   14d10:	b2db      	uxtb	r3, r3
   14d12:	2b01      	cmp	r3, #1
   14d14:	d00c      	beq.n	14d30 <lsm6dso_fsm_data_rate_get+0x60>
   14d16:	dc02      	bgt.n	14d1e <lsm6dso_fsm_data_rate_get+0x4e>
   14d18:	2b00      	cmp	r3, #0
   14d1a:	d005      	beq.n	14d28 <lsm6dso_fsm_data_rate_get+0x58>
   14d1c:	e014      	b.n	14d48 <lsm6dso_fsm_data_rate_get+0x78>
   14d1e:	2b02      	cmp	r3, #2
   14d20:	d00a      	beq.n	14d38 <lsm6dso_fsm_data_rate_get+0x68>
   14d22:	2b03      	cmp	r3, #3
   14d24:	d00c      	beq.n	14d40 <lsm6dso_fsm_data_rate_get+0x70>
   14d26:	e00f      	b.n	14d48 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   14d28:	683b      	ldr	r3, [r7, #0]
   14d2a:	2200      	movs	r2, #0
   14d2c:	701a      	strb	r2, [r3, #0]
        break;
   14d2e:	e00f      	b.n	14d50 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   14d30:	683b      	ldr	r3, [r7, #0]
   14d32:	2201      	movs	r2, #1
   14d34:	701a      	strb	r2, [r3, #0]
        break;
   14d36:	e00b      	b.n	14d50 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   14d38:	683b      	ldr	r3, [r7, #0]
   14d3a:	2202      	movs	r2, #2
   14d3c:	701a      	strb	r2, [r3, #0]
        break;
   14d3e:	e007      	b.n	14d50 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   14d40:	683b      	ldr	r3, [r7, #0]
   14d42:	2203      	movs	r2, #3
   14d44:	701a      	strb	r2, [r3, #0]
        break;
   14d46:	e003      	b.n	14d50 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   14d48:	683b      	ldr	r3, [r7, #0]
   14d4a:	2200      	movs	r2, #0
   14d4c:	701a      	strb	r2, [r3, #0]
        break;
   14d4e:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   14d50:	687b      	ldr	r3, [r7, #4]
   14d52:	2100      	movs	r1, #0
   14d54:	0018      	movs	r0, r3
   14d56:	4b04      	ldr	r3, [pc, #16]	; (14d68 <lsm6dso_fsm_data_rate_get+0x98>)
   14d58:	4798      	blx	r3
   14d5a:	0003      	movs	r3, r0
   14d5c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14d5e:	68fb      	ldr	r3, [r7, #12]
}
   14d60:	0018      	movs	r0, r3
   14d62:	46bd      	mov	sp, r7
   14d64:	b005      	add	sp, #20
   14d66:	bd90      	pop	{r4, r7, pc}
   14d68:	0001495d 	.word	0x0001495d
   14d6c:	00014071 	.word	0x00014071

00014d70 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   14d70:	b580      	push	{r7, lr}
   14d72:	b086      	sub	sp, #24
   14d74:	af00      	add	r7, sp, #0
   14d76:	60f8      	str	r0, [r7, #12]
   14d78:	0008      	movs	r0, r1
   14d7a:	607a      	str	r2, [r7, #4]
   14d7c:	0019      	movs	r1, r3
   14d7e:	230b      	movs	r3, #11
   14d80:	18fb      	adds	r3, r7, r3
   14d82:	1c02      	adds	r2, r0, #0
   14d84:	701a      	strb	r2, [r3, #0]
   14d86:	2308      	movs	r3, #8
   14d88:	18fb      	adds	r3, r7, r3
   14d8a:	1c0a      	adds	r2, r1, #0
   14d8c:	801a      	strh	r2, [r3, #0]
	if( len > 63){
   14d8e:	2308      	movs	r3, #8
   14d90:	18fb      	adds	r3, r7, r3
   14d92:	881b      	ldrh	r3, [r3, #0]
   14d94:	2b3f      	cmp	r3, #63	; 0x3f
   14d96:	d902      	bls.n	14d9e <platform_write+0x2e>
		return ERROR_INVALID_DATA;
   14d98:	2301      	movs	r3, #1
   14d9a:	425b      	negs	r3, r3
   14d9c:	e030      	b.n	14e00 <platform_write+0x90>
	}
	
	msgOutImu[0] = reg;
   14d9e:	4b1a      	ldr	r3, [pc, #104]	; (14e08 <platform_write+0x98>)
   14da0:	220b      	movs	r2, #11
   14da2:	18ba      	adds	r2, r7, r2
   14da4:	7812      	ldrb	r2, [r2, #0]
   14da6:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= len; i++) {
   14da8:	2301      	movs	r3, #1
   14daa:	617b      	str	r3, [r7, #20]
   14dac:	e00c      	b.n	14dc8 <platform_write+0x58>
		msgOutImu[i] = bufp[i-1];
   14dae:	697b      	ldr	r3, [r7, #20]
   14db0:	3b01      	subs	r3, #1
   14db2:	687a      	ldr	r2, [r7, #4]
   14db4:	18d3      	adds	r3, r2, r3
   14db6:	7819      	ldrb	r1, [r3, #0]
   14db8:	4a13      	ldr	r2, [pc, #76]	; (14e08 <platform_write+0x98>)
   14dba:	697b      	ldr	r3, [r7, #20]
   14dbc:	18d3      	adds	r3, r2, r3
   14dbe:	1c0a      	adds	r2, r1, #0
   14dc0:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= len; i++) {
   14dc2:	697b      	ldr	r3, [r7, #20]
   14dc4:	3301      	adds	r3, #1
   14dc6:	617b      	str	r3, [r7, #20]
   14dc8:	2308      	movs	r3, #8
   14dca:	18fb      	adds	r3, r7, r3
   14dcc:	881a      	ldrh	r2, [r3, #0]
   14dce:	697b      	ldr	r3, [r7, #20]
   14dd0:	429a      	cmp	r2, r3
   14dd2:	daec      	bge.n	14dae <platform_write+0x3e>
	}
	
	imuData.lenOut = len +1;
   14dd4:	2308      	movs	r3, #8
   14dd6:	18fb      	adds	r3, r7, r3
   14dd8:	881b      	ldrh	r3, [r3, #0]
   14dda:	3301      	adds	r3, #1
   14ddc:	b29a      	uxth	r2, r3
   14dde:	4b0b      	ldr	r3, [pc, #44]	; (14e0c <platform_write+0x9c>)
   14de0:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = msgOutImu;
   14de2:	4b0a      	ldr	r3, [pc, #40]	; (14e0c <platform_write+0x9c>)
   14de4:	4a08      	ldr	r2, [pc, #32]	; (14e08 <platform_write+0x98>)
   14de6:	605a      	str	r2, [r3, #4]
	imuData.msgIn = NULL;
   14de8:	4b08      	ldr	r3, [pc, #32]	; (14e0c <platform_write+0x9c>)
   14dea:	2200      	movs	r2, #0
   14dec:	609a      	str	r2, [r3, #8]
	imuData.lenIn = 0;
   14dee:	4b07      	ldr	r3, [pc, #28]	; (14e0c <platform_write+0x9c>)
   14df0:	2200      	movs	r2, #0
   14df2:	819a      	strh	r2, [r3, #12]
	
	return I2cWriteDataWait(&imuData, LSM6DSO_timeout);
   14df4:	4b05      	ldr	r3, [pc, #20]	; (14e0c <platform_write+0x9c>)
   14df6:	21c8      	movs	r1, #200	; 0xc8
   14df8:	0018      	movs	r0, r3
   14dfa:	4b05      	ldr	r3, [pc, #20]	; (14e10 <platform_write+0xa0>)
   14dfc:	4798      	blx	r3
   14dfe:	0003      	movs	r3, r0

}
   14e00:	0018      	movs	r0, r3
   14e02:	46bd      	mov	sp, r7
   14e04:	b006      	add	sp, #24
   14e06:	bd80      	pop	{r7, pc}
   14e08:	20004674 	.word	0x20004674
   14e0c:	20000020 	.word	0x20000020
   14e10:	00013e75 	.word	0x00013e75

00014e14 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   14e14:	b580      	push	{r7, lr}
   14e16:	b084      	sub	sp, #16
   14e18:	af00      	add	r7, sp, #0
   14e1a:	60f8      	str	r0, [r7, #12]
   14e1c:	0008      	movs	r0, r1
   14e1e:	607a      	str	r2, [r7, #4]
   14e20:	0019      	movs	r1, r3
   14e22:	230b      	movs	r3, #11
   14e24:	18fb      	adds	r3, r7, r3
   14e26:	1c02      	adds	r2, r0, #0
   14e28:	701a      	strb	r2, [r3, #0]
   14e2a:	2308      	movs	r3, #8
   14e2c:	18fb      	adds	r3, r7, r3
   14e2e:	1c0a      	adds	r2, r1, #0
   14e30:	801a      	strh	r2, [r3, #0]
	imuData.lenIn = len;
   14e32:	4b0d      	ldr	r3, [pc, #52]	; (14e68 <platform_read+0x54>)
   14e34:	2208      	movs	r2, #8
   14e36:	18ba      	adds	r2, r7, r2
   14e38:	8812      	ldrh	r2, [r2, #0]
   14e3a:	819a      	strh	r2, [r3, #12]
	imuData.msgIn = bufp;
   14e3c:	4b0a      	ldr	r3, [pc, #40]	; (14e68 <platform_read+0x54>)
   14e3e:	687a      	ldr	r2, [r7, #4]
   14e40:	609a      	str	r2, [r3, #8]
	imuData.lenOut = 1;
   14e42:	4b09      	ldr	r3, [pc, #36]	; (14e68 <platform_read+0x54>)
   14e44:	2201      	movs	r2, #1
   14e46:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = &reg;
   14e48:	4b07      	ldr	r3, [pc, #28]	; (14e68 <platform_read+0x54>)
   14e4a:	220b      	movs	r2, #11
   14e4c:	18ba      	adds	r2, r7, r2
   14e4e:	605a      	str	r2, [r3, #4]
	
	return I2cReadDataWait(&imuData,LSM6DSO_readtime,LSM6DSO_timeout);
   14e50:	4b05      	ldr	r3, [pc, #20]	; (14e68 <platform_read+0x54>)
   14e52:	22c8      	movs	r2, #200	; 0xc8
   14e54:	2105      	movs	r1, #5
   14e56:	0018      	movs	r0, r3
   14e58:	4b04      	ldr	r3, [pc, #16]	; (14e6c <platform_read+0x58>)
   14e5a:	4798      	blx	r3
   14e5c:	0003      	movs	r3, r0


}
   14e5e:	0018      	movs	r0, r3
   14e60:	46bd      	mov	sp, r7
   14e62:	b004      	add	sp, #16
   14e64:	bd80      	pop	{r7, pc}
   14e66:	46c0      	nop			; (mov r8, r8)
   14e68:	20000020 	.word	0x20000020
   14e6c:	00013f4d 	.word	0x00013f4d

00014e70 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   14e70:	b580      	push	{r7, lr}
   14e72:	af00      	add	r7, sp, #0
return &dev_ctx;
   14e74:	4b01      	ldr	r3, [pc, #4]	; (14e7c <GetImuStruct+0xc>)
}
   14e76:	0018      	movs	r0, r3
   14e78:	46bd      	mov	sp, r7
   14e7a:	bd80      	pop	{r7, pc}
   14e7c:	20000014 	.word	0x20000014

00014e80 <InitImu>:



int32_t InitImu(void)
{
   14e80:	b580      	push	{r7, lr}
   14e82:	b082      	sub	sp, #8
   14e84:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   14e86:	2300      	movs	r3, #0
   14e88:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   14e8a:	4b23      	ldr	r3, [pc, #140]	; (14f18 <InitImu+0x98>)
   14e8c:	2101      	movs	r1, #1
   14e8e:	0018      	movs	r0, r3
   14e90:	4b22      	ldr	r3, [pc, #136]	; (14f1c <InitImu+0x9c>)
   14e92:	4798      	blx	r3
   14e94:	0003      	movs	r3, r0
   14e96:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   14e98:	1cfa      	adds	r2, r7, #3
   14e9a:	4b1f      	ldr	r3, [pc, #124]	; (14f18 <InitImu+0x98>)
   14e9c:	0011      	movs	r1, r2
   14e9e:	0018      	movs	r0, r3
   14ea0:	4b1f      	ldr	r3, [pc, #124]	; (14f20 <InitImu+0xa0>)
   14ea2:	4798      	blx	r3
   14ea4:	0002      	movs	r2, r0
   14ea6:	687b      	ldr	r3, [r7, #4]
   14ea8:	4313      	orrs	r3, r2
   14eaa:	607b      	str	r3, [r7, #4]
  } while (rst);
   14eac:	1cfb      	adds	r3, r7, #3
   14eae:	781b      	ldrb	r3, [r3, #0]
   14eb0:	2b00      	cmp	r3, #0
   14eb2:	d1f1      	bne.n	14e98 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   14eb4:	4b18      	ldr	r3, [pc, #96]	; (14f18 <InitImu+0x98>)
   14eb6:	2180      	movs	r1, #128	; 0x80
   14eb8:	0018      	movs	r0, r3
   14eba:	4b1a      	ldr	r3, [pc, #104]	; (14f24 <InitImu+0xa4>)
   14ebc:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   14ebe:	4b16      	ldr	r3, [pc, #88]	; (14f18 <InitImu+0x98>)
   14ec0:	2101      	movs	r1, #1
   14ec2:	0018      	movs	r0, r3
   14ec4:	4b18      	ldr	r3, [pc, #96]	; (14f28 <InitImu+0xa8>)
   14ec6:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   14ec8:	4b13      	ldr	r3, [pc, #76]	; (14f18 <InitImu+0x98>)
   14eca:	2100      	movs	r1, #0
   14ecc:	0018      	movs	r0, r3
   14ece:	4b17      	ldr	r3, [pc, #92]	; (14f2c <InitImu+0xac>)
   14ed0:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   14ed2:	4b11      	ldr	r3, [pc, #68]	; (14f18 <InitImu+0x98>)
   14ed4:	2101      	movs	r1, #1
   14ed6:	0018      	movs	r0, r3
   14ed8:	4b15      	ldr	r3, [pc, #84]	; (14f30 <InitImu+0xb0>)
   14eda:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   14edc:	4b0e      	ldr	r3, [pc, #56]	; (14f18 <InitImu+0x98>)
   14ede:	2101      	movs	r1, #1
   14ee0:	0018      	movs	r0, r3
   14ee2:	4b14      	ldr	r3, [pc, #80]	; (14f34 <InitImu+0xb4>)
   14ee4:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   14ee6:	4b0c      	ldr	r3, [pc, #48]	; (14f18 <InitImu+0x98>)
   14ee8:	2100      	movs	r1, #0
   14eea:	0018      	movs	r0, r3
   14eec:	4b12      	ldr	r3, [pc, #72]	; (14f38 <InitImu+0xb8>)
   14eee:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   14ef0:	4b09      	ldr	r3, [pc, #36]	; (14f18 <InitImu+0x98>)
   14ef2:	2106      	movs	r1, #6
   14ef4:	0018      	movs	r0, r3
   14ef6:	4b11      	ldr	r3, [pc, #68]	; (14f3c <InitImu+0xbc>)
   14ef8:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   14efa:	4b07      	ldr	r3, [pc, #28]	; (14f18 <InitImu+0x98>)
   14efc:	2104      	movs	r1, #4
   14efe:	0018      	movs	r0, r3
   14f00:	4b0f      	ldr	r3, [pc, #60]	; (14f40 <InitImu+0xc0>)
   14f02:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   14f04:	4b04      	ldr	r3, [pc, #16]	; (14f18 <InitImu+0x98>)
   14f06:	2101      	movs	r1, #1
   14f08:	0018      	movs	r0, r3
   14f0a:	4b0e      	ldr	r3, [pc, #56]	; (14f44 <InitImu+0xc4>)
   14f0c:	4798      	blx	r3

  return error;
   14f0e:	687b      	ldr	r3, [r7, #4]
}
   14f10:	0018      	movs	r0, r3
   14f12:	46bd      	mov	sp, r7
   14f14:	b002      	add	sp, #8
   14f16:	bd80      	pop	{r7, pc}
   14f18:	20000014 	.word	0x20000014
   14f1c:	000149ed 	.word	0x000149ed
   14f20:	00014a59 	.word	0x00014a59
   14f24:	00014bb9 	.word	0x00014bb9
   14f28:	00014795 	.word	0x00014795
   14f2c:	00014801 	.word	0x00014801
   14f30:	000141a1 	.word	0x000141a1
   14f34:	000144d1 	.word	0x000144d1
   14f38:	00014135 	.word	0x00014135
   14f3c:	00014465 	.word	0x00014465
   14f40:	00014b01 	.word	0x00014b01
   14f44:	00014a95 	.word	0x00014a95

00014f48 <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(void)
{
   14f48:	b580      	push	{r7, lr}
   14f4a:	b082      	sub	sp, #8
   14f4c:	af00      	add	r7, sp, #0
    uint8_t readData[2];
    seesawData.address = NEO_TRELLIS_ADDR;
   14f4e:	4b38      	ldr	r3, [pc, #224]	; (15030 <InitializeSeesaw+0xe8>)
   14f50:	222e      	movs	r2, #46	; 0x2e
   14f52:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
   14f54:	4b36      	ldr	r3, [pc, #216]	; (15030 <InitializeSeesaw+0xe8>)
   14f56:	4a37      	ldr	r2, [pc, #220]	; (15034 <InitializeSeesaw+0xec>)
   14f58:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
   14f5a:	4b35      	ldr	r3, [pc, #212]	; (15030 <InitializeSeesaw+0xe8>)
   14f5c:	2202      	movs	r2, #2
   14f5e:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
   14f60:	4b33      	ldr	r3, [pc, #204]	; (15030 <InitializeSeesaw+0xe8>)
   14f62:	003a      	movs	r2, r7
   14f64:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   14f66:	4b32      	ldr	r3, [pc, #200]	; (15030 <InitializeSeesaw+0xe8>)
   14f68:	2201      	movs	r2, #1
   14f6a:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
   14f6c:	4b30      	ldr	r3, [pc, #192]	; (15030 <InitializeSeesaw+0xe8>)
   14f6e:	2264      	movs	r2, #100	; 0x64
   14f70:	2100      	movs	r1, #0
   14f72:	0018      	movs	r0, r3
   14f74:	4b30      	ldr	r3, [pc, #192]	; (15038 <InitializeSeesaw+0xf0>)
   14f76:	4798      	blx	r3
   14f78:	0003      	movs	r3, r0
   14f7a:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   14f7c:	687b      	ldr	r3, [r7, #4]
   14f7e:	2b00      	cmp	r3, #0
   14f80:	d004      	beq.n	14f8c <InitializeSeesaw+0x44>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   14f82:	4b2e      	ldr	r3, [pc, #184]	; (1503c <InitializeSeesaw+0xf4>)
   14f84:	0018      	movs	r0, r3
   14f86:	4b2e      	ldr	r3, [pc, #184]	; (15040 <InitializeSeesaw+0xf8>)
   14f88:	4798      	blx	r3
   14f8a:	e00c      	b.n	14fa6 <InitializeSeesaw+0x5e>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
   14f8c:	003b      	movs	r3, r7
   14f8e:	781b      	ldrb	r3, [r3, #0]
   14f90:	2b55      	cmp	r3, #85	; 0x55
   14f92:	d004      	beq.n	14f9e <InitializeSeesaw+0x56>
            SerialConsoleWriteString("Error/r/n");
   14f94:	4b2b      	ldr	r3, [pc, #172]	; (15044 <InitializeSeesaw+0xfc>)
   14f96:	0018      	movs	r0, r3
   14f98:	4b29      	ldr	r3, [pc, #164]	; (15040 <InitializeSeesaw+0xf8>)
   14f9a:	4798      	blx	r3
   14f9c:	e003      	b.n	14fa6 <InitializeSeesaw+0x5e>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
   14f9e:	4b2a      	ldr	r3, [pc, #168]	; (15048 <InitializeSeesaw+0x100>)
   14fa0:	0018      	movs	r0, r3
   14fa2:	4b27      	ldr	r3, [pc, #156]	; (15040 <InitializeSeesaw+0xf8>)
   14fa4:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
   14fa6:	4b22      	ldr	r3, [pc, #136]	; (15030 <InitializeSeesaw+0xe8>)
   14fa8:	4a28      	ldr	r2, [pc, #160]	; (1504c <InitializeSeesaw+0x104>)
   14faa:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
   14fac:	4b20      	ldr	r3, [pc, #128]	; (15030 <InitializeSeesaw+0xe8>)
   14fae:	2203      	movs	r2, #3
   14fb0:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   14fb2:	4b1f      	ldr	r3, [pc, #124]	; (15030 <InitializeSeesaw+0xe8>)
   14fb4:	2164      	movs	r1, #100	; 0x64
   14fb6:	0018      	movs	r0, r3
   14fb8:	4b25      	ldr	r3, [pc, #148]	; (15050 <InitializeSeesaw+0x108>)
   14fba:	4798      	blx	r3
   14fbc:	0003      	movs	r3, r0
   14fbe:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   14fc0:	687b      	ldr	r3, [r7, #4]
   14fc2:	2b00      	cmp	r3, #0
   14fc4:	d003      	beq.n	14fce <InitializeSeesaw+0x86>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   14fc6:	4b23      	ldr	r3, [pc, #140]	; (15054 <InitializeSeesaw+0x10c>)
   14fc8:	0018      	movs	r0, r3
   14fca:	4b1d      	ldr	r3, [pc, #116]	; (15040 <InitializeSeesaw+0xf8>)
   14fcc:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
   14fce:	4b18      	ldr	r3, [pc, #96]	; (15030 <InitializeSeesaw+0xe8>)
   14fd0:	4a21      	ldr	r2, [pc, #132]	; (15058 <InitializeSeesaw+0x110>)
   14fd2:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
   14fd4:	4b16      	ldr	r3, [pc, #88]	; (15030 <InitializeSeesaw+0xe8>)
   14fd6:	2203      	movs	r2, #3
   14fd8:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   14fda:	4b15      	ldr	r3, [pc, #84]	; (15030 <InitializeSeesaw+0xe8>)
   14fdc:	2164      	movs	r1, #100	; 0x64
   14fde:	0018      	movs	r0, r3
   14fe0:	4b1b      	ldr	r3, [pc, #108]	; (15050 <InitializeSeesaw+0x108>)
   14fe2:	4798      	blx	r3
   14fe4:	0003      	movs	r3, r0
   14fe6:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   14fe8:	687b      	ldr	r3, [r7, #4]
   14fea:	2b00      	cmp	r3, #0
   14fec:	d003      	beq.n	14ff6 <InitializeSeesaw+0xae>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   14fee:	4b1b      	ldr	r3, [pc, #108]	; (1505c <InitializeSeesaw+0x114>)
   14ff0:	0018      	movs	r0, r3
   14ff2:	4b13      	ldr	r3, [pc, #76]	; (15040 <InitializeSeesaw+0xf8>)
   14ff4:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
   14ff6:	4b0e      	ldr	r3, [pc, #56]	; (15030 <InitializeSeesaw+0xe8>)
   14ff8:	4a19      	ldr	r2, [pc, #100]	; (15060 <InitializeSeesaw+0x118>)
   14ffa:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
   14ffc:	4b0c      	ldr	r3, [pc, #48]	; (15030 <InitializeSeesaw+0xe8>)
   14ffe:	2204      	movs	r2, #4
   15000:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15002:	4b0b      	ldr	r3, [pc, #44]	; (15030 <InitializeSeesaw+0xe8>)
   15004:	2164      	movs	r1, #100	; 0x64
   15006:	0018      	movs	r0, r3
   15008:	4b11      	ldr	r3, [pc, #68]	; (15050 <InitializeSeesaw+0x108>)
   1500a:	4798      	blx	r3
   1500c:	0003      	movs	r3, r0
   1500e:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   15010:	687b      	ldr	r3, [r7, #4]
   15012:	2b00      	cmp	r3, #0
   15014:	d003      	beq.n	1501e <InitializeSeesaw+0xd6>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   15016:	4b13      	ldr	r3, [pc, #76]	; (15064 <InitializeSeesaw+0x11c>)
   15018:	0018      	movs	r0, r3
   1501a:	4b09      	ldr	r3, [pc, #36]	; (15040 <InitializeSeesaw+0xf8>)
   1501c:	4798      	blx	r3
    }

    SeesawTurnOnLedTest();
   1501e:	4b12      	ldr	r3, [pc, #72]	; (15068 <InitializeSeesaw+0x120>)
   15020:	4798      	blx	r3

    SeesawInitializeKeypad();
   15022:	4b12      	ldr	r3, [pc, #72]	; (1506c <InitializeSeesaw+0x124>)
   15024:	4798      	blx	r3
    return error;
   15026:	687b      	ldr	r3, [r7, #4]
}
   15028:	0018      	movs	r0, r3
   1502a:	46bd      	mov	sp, r7
   1502c:	b002      	add	sp, #8
   1502e:	bd80      	pop	{r7, pc}
   15030:	200046b4 	.word	0x200046b4
   15034:	00035f50 	.word	0x00035f50
   15038:	00013f4d 	.word	0x00013f4d
   1503c:	00035f68 	.word	0x00035f68
   15040:	0001da95 	.word	0x0001da95
   15044:	00035f88 	.word	0x00035f88
   15048:	00035f94 	.word	0x00035f94
   1504c:	00035f54 	.word	0x00035f54
   15050:	00013e75 	.word	0x00013e75
   15054:	00035fa8 	.word	0x00035fa8
   15058:	00035f58 	.word	0x00035f58
   1505c:	00035fc8 	.word	0x00035fc8
   15060:	00035f5c 	.word	0x00035f5c
   15064:	00035ff4 	.word	0x00035ff4
   15068:	0001541d 	.word	0x0001541d
   1506c:	0001532d 	.word	0x0001532d

00015070 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   15070:	b580      	push	{r7, lr}
   15072:	b082      	sub	sp, #8
   15074:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   15076:	1cfb      	adds	r3, r7, #3
   15078:	2200      	movs	r2, #0
   1507a:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   1507c:	4b11      	ldr	r3, [pc, #68]	; (150c4 <SeesawGetKeypadCount+0x54>)
   1507e:	222e      	movs	r2, #46	; 0x2e
   15080:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   15082:	4b10      	ldr	r3, [pc, #64]	; (150c4 <SeesawGetKeypadCount+0x54>)
   15084:	4a10      	ldr	r2, [pc, #64]	; (150c8 <SeesawGetKeypadCount+0x58>)
   15086:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   15088:	4b0e      	ldr	r3, [pc, #56]	; (150c4 <SeesawGetKeypadCount+0x54>)
   1508a:	2202      	movs	r2, #2
   1508c:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   1508e:	4b0d      	ldr	r3, [pc, #52]	; (150c4 <SeesawGetKeypadCount+0x54>)
   15090:	1cfa      	adds	r2, r7, #3
   15092:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15094:	4b0b      	ldr	r3, [pc, #44]	; (150c4 <SeesawGetKeypadCount+0x54>)
   15096:	2201      	movs	r2, #1
   15098:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   1509a:	4b0a      	ldr	r3, [pc, #40]	; (150c4 <SeesawGetKeypadCount+0x54>)
   1509c:	2264      	movs	r2, #100	; 0x64
   1509e:	2100      	movs	r1, #0
   150a0:	0018      	movs	r0, r3
   150a2:	4b0a      	ldr	r3, [pc, #40]	; (150cc <SeesawGetKeypadCount+0x5c>)
   150a4:	4798      	blx	r3
   150a6:	0003      	movs	r3, r0
   150a8:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   150aa:	687b      	ldr	r3, [r7, #4]
   150ac:	2b00      	cmp	r3, #0
   150ae:	d003      	beq.n	150b8 <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   150b0:	4b07      	ldr	r3, [pc, #28]	; (150d0 <SeesawGetKeypadCount+0x60>)
   150b2:	0018      	movs	r0, r3
   150b4:	4b07      	ldr	r3, [pc, #28]	; (150d4 <SeesawGetKeypadCount+0x64>)
   150b6:	4798      	blx	r3
    }
    return count;
   150b8:	1cfb      	adds	r3, r7, #3
   150ba:	781b      	ldrb	r3, [r3, #0]
}
   150bc:	0018      	movs	r0, r3
   150be:	46bd      	mov	sp, r7
   150c0:	b002      	add	sp, #8
   150c2:	bd80      	pop	{r7, pc}
   150c4:	200046b4 	.word	0x200046b4
   150c8:	00035f64 	.word	0x00035f64
   150cc:	00013f4d 	.word	0x00013f4d
   150d0:	00036028 	.word	0x00036028
   150d4:	0001da95 	.word	0x0001da95

000150d8 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   150d8:	b580      	push	{r7, lr}
   150da:	b084      	sub	sp, #16
   150dc:	af00      	add	r7, sp, #0
   150de:	6078      	str	r0, [r7, #4]
   150e0:	000a      	movs	r2, r1
   150e2:	1cfb      	adds	r3, r7, #3
   150e4:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   150e6:	1cfb      	adds	r3, r7, #3
   150e8:	781b      	ldrb	r3, [r3, #0]
   150ea:	2b00      	cmp	r3, #0
   150ec:	d101      	bne.n	150f2 <SeesawReadKeypad+0x1a>
   150ee:	2300      	movs	r3, #0
   150f0:	e026      	b.n	15140 <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   150f2:	2308      	movs	r3, #8
   150f4:	18fb      	adds	r3, r7, r3
   150f6:	4a14      	ldr	r2, [pc, #80]	; (15148 <SeesawReadKeypad+0x70>)
   150f8:	8812      	ldrh	r2, [r2, #0]
   150fa:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   150fc:	4b13      	ldr	r3, [pc, #76]	; (1514c <SeesawReadKeypad+0x74>)
   150fe:	222e      	movs	r2, #46	; 0x2e
   15100:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   15102:	4b12      	ldr	r3, [pc, #72]	; (1514c <SeesawReadKeypad+0x74>)
   15104:	2208      	movs	r2, #8
   15106:	18ba      	adds	r2, r7, r2
   15108:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   1510a:	4b10      	ldr	r3, [pc, #64]	; (1514c <SeesawReadKeypad+0x74>)
   1510c:	2202      	movs	r2, #2
   1510e:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   15110:	4b0e      	ldr	r3, [pc, #56]	; (1514c <SeesawReadKeypad+0x74>)
   15112:	687a      	ldr	r2, [r7, #4]
   15114:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   15116:	1cfb      	adds	r3, r7, #3
   15118:	781b      	ldrb	r3, [r3, #0]
   1511a:	b29a      	uxth	r2, r3
   1511c:	4b0b      	ldr	r3, [pc, #44]	; (1514c <SeesawReadKeypad+0x74>)
   1511e:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15120:	4b0a      	ldr	r3, [pc, #40]	; (1514c <SeesawReadKeypad+0x74>)
   15122:	2264      	movs	r2, #100	; 0x64
   15124:	2100      	movs	r1, #0
   15126:	0018      	movs	r0, r3
   15128:	4b09      	ldr	r3, [pc, #36]	; (15150 <SeesawReadKeypad+0x78>)
   1512a:	4798      	blx	r3
   1512c:	0003      	movs	r3, r0
   1512e:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   15130:	68fb      	ldr	r3, [r7, #12]
   15132:	2b00      	cmp	r3, #0
   15134:	d003      	beq.n	1513e <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   15136:	4b07      	ldr	r3, [pc, #28]	; (15154 <SeesawReadKeypad+0x7c>)
   15138:	0018      	movs	r0, r3
   1513a:	4b07      	ldr	r3, [pc, #28]	; (15158 <SeesawReadKeypad+0x80>)
   1513c:	4798      	blx	r3
    }
    return error;
   1513e:	68fb      	ldr	r3, [r7, #12]
}
   15140:	0018      	movs	r0, r3
   15142:	46bd      	mov	sp, r7
   15144:	b004      	add	sp, #16
   15146:	bd80      	pop	{r7, pc}
   15148:	0003604c 	.word	0x0003604c
   1514c:	200046b4 	.word	0x200046b4
   15150:	00013f4d 	.word	0x00013f4d
   15154:	00036028 	.word	0x00036028
   15158:	0001da95 	.word	0x0001da95

0001515c <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
{
   1515c:	b590      	push	{r4, r7, lr}
   1515e:	b087      	sub	sp, #28
   15160:	af00      	add	r7, sp, #0
   15162:	0004      	movs	r4, r0
   15164:	0008      	movs	r0, r1
   15166:	0011      	movs	r1, r2
   15168:	1dfb      	adds	r3, r7, #7
   1516a:	1c22      	adds	r2, r4, #0
   1516c:	701a      	strb	r2, [r3, #0]
   1516e:	1dbb      	adds	r3, r7, #6
   15170:	1c02      	adds	r2, r0, #0
   15172:	701a      	strb	r2, [r3, #0]
   15174:	1d7b      	adds	r3, r7, #5
   15176:	1c0a      	adds	r2, r1, #0
   15178:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
   1517a:	2310      	movs	r3, #16
   1517c:	18fb      	adds	r3, r7, r3
   1517e:	1d7a      	adds	r2, r7, #5
   15180:	7812      	ldrb	r2, [r2, #0]
   15182:	2101      	movs	r1, #1
   15184:	0010      	movs	r0, r2
   15186:	4008      	ands	r0, r1
   15188:	781a      	ldrb	r2, [r3, #0]
   1518a:	2101      	movs	r1, #1
   1518c:	438a      	bics	r2, r1
   1518e:	1c11      	adds	r1, r2, #0
   15190:	1c02      	adds	r2, r0, #0
   15192:	430a      	orrs	r2, r1
   15194:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
   15196:	1dbb      	adds	r3, r7, #6
   15198:	781b      	ldrb	r3, [r3, #0]
   1519a:	2201      	movs	r2, #1
   1519c:	409a      	lsls	r2, r3
   1519e:	0013      	movs	r3, r2
   151a0:	b2db      	uxtb	r3, r3
   151a2:	1c1a      	adds	r2, r3, #0
   151a4:	230f      	movs	r3, #15
   151a6:	4013      	ands	r3, r2
   151a8:	b2da      	uxtb	r2, r3
   151aa:	2310      	movs	r3, #16
   151ac:	18fb      	adds	r3, r7, r3
   151ae:	210f      	movs	r1, #15
   151b0:	400a      	ands	r2, r1
   151b2:	1890      	adds	r0, r2, r2
   151b4:	781a      	ldrb	r2, [r3, #0]
   151b6:	211e      	movs	r1, #30
   151b8:	438a      	bics	r2, r1
   151ba:	1c11      	adds	r1, r2, #0
   151bc:	1c02      	adds	r2, r0, #0
   151be:	430a      	orrs	r2, r1
   151c0:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   151c2:	230c      	movs	r3, #12
   151c4:	18fb      	adds	r3, r7, r3
   151c6:	2210      	movs	r2, #16
   151c8:	701a      	strb	r2, [r3, #0]
   151ca:	230c      	movs	r3, #12
   151cc:	18fb      	adds	r3, r7, r3
   151ce:	2201      	movs	r2, #1
   151d0:	705a      	strb	r2, [r3, #1]
   151d2:	230c      	movs	r3, #12
   151d4:	18fb      	adds	r3, r7, r3
   151d6:	1dfa      	adds	r2, r7, #7
   151d8:	7812      	ldrb	r2, [r2, #0]
   151da:	709a      	strb	r2, [r3, #2]
   151dc:	2310      	movs	r3, #16
   151de:	18fb      	adds	r3, r7, r3
   151e0:	781a      	ldrb	r2, [r3, #0]
   151e2:	230c      	movs	r3, #12
   151e4:	18fb      	adds	r3, r7, r3
   151e6:	70da      	strb	r2, [r3, #3]

    seesawData.address = NEO_TRELLIS_ADDR;
   151e8:	4b0c      	ldr	r3, [pc, #48]	; (1521c <SeesawActivateKey+0xc0>)
   151ea:	222e      	movs	r2, #46	; 0x2e
   151ec:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &cmd[0];
   151ee:	4b0b      	ldr	r3, [pc, #44]	; (1521c <SeesawActivateKey+0xc0>)
   151f0:	220c      	movs	r2, #12
   151f2:	18ba      	adds	r2, r7, r2
   151f4:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   151f6:	4b09      	ldr	r3, [pc, #36]	; (1521c <SeesawActivateKey+0xc0>)
   151f8:	2204      	movs	r2, #4
   151fa:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   151fc:	4b07      	ldr	r3, [pc, #28]	; (1521c <SeesawActivateKey+0xc0>)
   151fe:	2200      	movs	r2, #0
   15200:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
   15202:	4b06      	ldr	r3, [pc, #24]	; (1521c <SeesawActivateKey+0xc0>)
   15204:	2164      	movs	r1, #100	; 0x64
   15206:	0018      	movs	r0, r3
   15208:	4b05      	ldr	r3, [pc, #20]	; (15220 <SeesawActivateKey+0xc4>)
   1520a:	4798      	blx	r3
   1520c:	0003      	movs	r3, r0
   1520e:	617b      	str	r3, [r7, #20]
    return error;
   15210:	697b      	ldr	r3, [r7, #20]
}
   15212:	0018      	movs	r0, r3
   15214:	46bd      	mov	sp, r7
   15216:	b007      	add	sp, #28
   15218:	bd90      	pop	{r4, r7, pc}
   1521a:	46c0      	nop			; (mov r8, r8)
   1521c:	200046b4 	.word	0x200046b4
   15220:	00013e75 	.word	0x00013e75

00015224 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   15224:	b5b0      	push	{r4, r5, r7, lr}
   15226:	b086      	sub	sp, #24
   15228:	af00      	add	r7, sp, #0
   1522a:	0005      	movs	r5, r0
   1522c:	000c      	movs	r4, r1
   1522e:	0010      	movs	r0, r2
   15230:	0019      	movs	r1, r3
   15232:	1dfb      	adds	r3, r7, #7
   15234:	1c2a      	adds	r2, r5, #0
   15236:	701a      	strb	r2, [r3, #0]
   15238:	1dbb      	adds	r3, r7, #6
   1523a:	1c22      	adds	r2, r4, #0
   1523c:	701a      	strb	r2, [r3, #0]
   1523e:	1d7b      	adds	r3, r7, #5
   15240:	1c02      	adds	r2, r0, #0
   15242:	701a      	strb	r2, [r3, #0]
   15244:	1d3b      	adds	r3, r7, #4
   15246:	1c0a      	adds	r2, r1, #0
   15248:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   1524a:	2308      	movs	r3, #8
   1524c:	18fb      	adds	r3, r7, r3
   1524e:	220e      	movs	r2, #14
   15250:	701a      	strb	r2, [r3, #0]
   15252:	2308      	movs	r3, #8
   15254:	18fb      	adds	r3, r7, r3
   15256:	2204      	movs	r2, #4
   15258:	705a      	strb	r2, [r3, #1]
   1525a:	2308      	movs	r3, #8
   1525c:	18fb      	adds	r3, r7, r3
   1525e:	2200      	movs	r2, #0
   15260:	709a      	strb	r2, [r3, #2]
   15262:	2308      	movs	r3, #8
   15264:	18fb      	adds	r3, r7, r3
   15266:	2200      	movs	r2, #0
   15268:	70da      	strb	r2, [r3, #3]
   1526a:	2308      	movs	r3, #8
   1526c:	18fb      	adds	r3, r7, r3
   1526e:	1d7a      	adds	r2, r7, #5
   15270:	7812      	ldrb	r2, [r2, #0]
   15272:	711a      	strb	r2, [r3, #4]
   15274:	2308      	movs	r3, #8
   15276:	18fb      	adds	r3, r7, r3
   15278:	1dba      	adds	r2, r7, #6
   1527a:	7812      	ldrb	r2, [r2, #0]
   1527c:	715a      	strb	r2, [r3, #5]
   1527e:	2308      	movs	r3, #8
   15280:	18fb      	adds	r3, r7, r3
   15282:	1d3a      	adds	r2, r7, #4
   15284:	7812      	ldrb	r2, [r2, #0]
   15286:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   15288:	1dfb      	adds	r3, r7, #7
   1528a:	781b      	ldrb	r3, [r3, #0]
   1528c:	b29b      	uxth	r3, r3
   1528e:	2216      	movs	r2, #22
   15290:	18ba      	adds	r2, r7, r2
   15292:	1c19      	adds	r1, r3, #0
   15294:	1c0b      	adds	r3, r1, #0
   15296:	18db      	adds	r3, r3, r3
   15298:	185b      	adds	r3, r3, r1
   1529a:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   1529c:	2316      	movs	r3, #22
   1529e:	18fb      	adds	r3, r7, r3
   152a0:	881b      	ldrh	r3, [r3, #0]
   152a2:	0a1b      	lsrs	r3, r3, #8
   152a4:	b29b      	uxth	r3, r3
   152a6:	b2da      	uxtb	r2, r3
   152a8:	2308      	movs	r3, #8
   152aa:	18fb      	adds	r3, r7, r3
   152ac:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   152ae:	2316      	movs	r3, #22
   152b0:	18fb      	adds	r3, r7, r3
   152b2:	881b      	ldrh	r3, [r3, #0]
   152b4:	b2da      	uxtb	r2, r3
   152b6:	2308      	movs	r3, #8
   152b8:	18fb      	adds	r3, r7, r3
   152ba:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   152bc:	4b09      	ldr	r3, [pc, #36]	; (152e4 <SeesawSetLed+0xc0>)
   152be:	2208      	movs	r2, #8
   152c0:	18ba      	adds	r2, r7, r2
   152c2:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   152c4:	4b07      	ldr	r3, [pc, #28]	; (152e4 <SeesawSetLed+0xc0>)
   152c6:	2207      	movs	r2, #7
   152c8:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   152ca:	4b06      	ldr	r3, [pc, #24]	; (152e4 <SeesawSetLed+0xc0>)
   152cc:	2164      	movs	r1, #100	; 0x64
   152ce:	0018      	movs	r0, r3
   152d0:	4b05      	ldr	r3, [pc, #20]	; (152e8 <SeesawSetLed+0xc4>)
   152d2:	4798      	blx	r3
   152d4:	0003      	movs	r3, r0
   152d6:	613b      	str	r3, [r7, #16]
    return error;
   152d8:	693b      	ldr	r3, [r7, #16]
}
   152da:	0018      	movs	r0, r3
   152dc:	46bd      	mov	sp, r7
   152de:	b006      	add	sp, #24
   152e0:	bdb0      	pop	{r4, r5, r7, pc}
   152e2:	46c0      	nop			; (mov r8, r8)
   152e4:	200046b4 	.word	0x200046b4
   152e8:	00013e75 	.word	0x00013e75

000152ec <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   152ec:	b580      	push	{r7, lr}
   152ee:	b082      	sub	sp, #8
   152f0:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   152f2:	003b      	movs	r3, r7
   152f4:	4a0a      	ldr	r2, [pc, #40]	; (15320 <SeesawOrderLedUpdate+0x34>)
   152f6:	8812      	ldrh	r2, [r2, #0]
   152f8:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   152fa:	4b0a      	ldr	r3, [pc, #40]	; (15324 <SeesawOrderLedUpdate+0x38>)
   152fc:	003a      	movs	r2, r7
   152fe:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   15300:	4b08      	ldr	r3, [pc, #32]	; (15324 <SeesawOrderLedUpdate+0x38>)
   15302:	2202      	movs	r2, #2
   15304:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   15306:	4b07      	ldr	r3, [pc, #28]	; (15324 <SeesawOrderLedUpdate+0x38>)
   15308:	2164      	movs	r1, #100	; 0x64
   1530a:	0018      	movs	r0, r3
   1530c:	4b06      	ldr	r3, [pc, #24]	; (15328 <SeesawOrderLedUpdate+0x3c>)
   1530e:	4798      	blx	r3
   15310:	0003      	movs	r3, r0
   15312:	607b      	str	r3, [r7, #4]
    return error;
   15314:	687b      	ldr	r3, [r7, #4]
}
   15316:	0018      	movs	r0, r3
   15318:	46bd      	mov	sp, r7
   1531a:	b002      	add	sp, #8
   1531c:	bd80      	pop	{r7, pc}
   1531e:	46c0      	nop			; (mov r8, r8)
   15320:	00036050 	.word	0x00036050
   15324:	200046b4 	.word	0x200046b4
   15328:	00013e75 	.word	0x00013e75

0001532c <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
   1532c:	b580      	push	{r7, lr}
   1532e:	b082      	sub	sp, #8
   15330:	af00      	add	r7, sp, #0
    seesawData.address = NEO_TRELLIS_ADDR;
   15332:	4b33      	ldr	r3, [pc, #204]	; (15400 <SeesawInitializeKeypad+0xd4>)
   15334:	222e      	movs	r2, #46	; 0x2e
   15336:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
   15338:	4b31      	ldr	r3, [pc, #196]	; (15400 <SeesawInitializeKeypad+0xd4>)
   1533a:	4a32      	ldr	r2, [pc, #200]	; (15404 <SeesawInitializeKeypad+0xd8>)
   1533c:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
   1533e:	4b30      	ldr	r3, [pc, #192]	; (15400 <SeesawInitializeKeypad+0xd4>)
   15340:	2203      	movs	r2, #3
   15342:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   15344:	4b2e      	ldr	r3, [pc, #184]	; (15400 <SeesawInitializeKeypad+0xd4>)
   15346:	2200      	movs	r2, #0
   15348:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
   1534a:	4b2d      	ldr	r3, [pc, #180]	; (15400 <SeesawInitializeKeypad+0xd4>)
   1534c:	2164      	movs	r1, #100	; 0x64
   1534e:	0018      	movs	r0, r3
   15350:	4b2d      	ldr	r3, [pc, #180]	; (15408 <SeesawInitializeKeypad+0xdc>)
   15352:	4798      	blx	r3
   15354:	0003      	movs	r3, r0
   15356:	603b      	str	r3, [r7, #0]
    if (ERROR_NONE != error) {
   15358:	683b      	ldr	r3, [r7, #0]
   1535a:	2b00      	cmp	r3, #0
   1535c:	d003      	beq.n	15366 <SeesawInitializeKeypad+0x3a>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   1535e:	4b2b      	ldr	r3, [pc, #172]	; (1540c <SeesawInitializeKeypad+0xe0>)
   15360:	0018      	movs	r0, r3
   15362:	4b2b      	ldr	r3, [pc, #172]	; (15410 <SeesawInitializeKeypad+0xe4>)
   15364:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
   15366:	2300      	movs	r3, #0
   15368:	607b      	str	r3, [r7, #4]
   1536a:	e041      	b.n	153f0 <SeesawInitializeKeypad+0xc4>
        error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   1536c:	687b      	ldr	r3, [r7, #4]
   1536e:	2b00      	cmp	r3, #0
   15370:	da00      	bge.n	15374 <SeesawInitializeKeypad+0x48>
   15372:	3303      	adds	r3, #3
   15374:	109b      	asrs	r3, r3, #2
   15376:	b2db      	uxtb	r3, r3
   15378:	00db      	lsls	r3, r3, #3
   1537a:	b2da      	uxtb	r2, r3
   1537c:	687b      	ldr	r3, [r7, #4]
   1537e:	4925      	ldr	r1, [pc, #148]	; (15414 <SeesawInitializeKeypad+0xe8>)
   15380:	400b      	ands	r3, r1
   15382:	d504      	bpl.n	1538e <SeesawInitializeKeypad+0x62>
   15384:	3b01      	subs	r3, #1
   15386:	2104      	movs	r1, #4
   15388:	4249      	negs	r1, r1
   1538a:	430b      	orrs	r3, r1
   1538c:	3301      	adds	r3, #1
   1538e:	b2db      	uxtb	r3, r3
   15390:	18d3      	adds	r3, r2, r3
   15392:	b2db      	uxtb	r3, r3
   15394:	2201      	movs	r2, #1
   15396:	2103      	movs	r1, #3
   15398:	0018      	movs	r0, r3
   1539a:	4b1f      	ldr	r3, [pc, #124]	; (15418 <SeesawInitializeKeypad+0xec>)
   1539c:	4798      	blx	r3
   1539e:	0003      	movs	r3, r0
   153a0:	603b      	str	r3, [r7, #0]
        error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   153a2:	687b      	ldr	r3, [r7, #4]
   153a4:	2b00      	cmp	r3, #0
   153a6:	da00      	bge.n	153aa <SeesawInitializeKeypad+0x7e>
   153a8:	3303      	adds	r3, #3
   153aa:	109b      	asrs	r3, r3, #2
   153ac:	b2db      	uxtb	r3, r3
   153ae:	00db      	lsls	r3, r3, #3
   153b0:	b2da      	uxtb	r2, r3
   153b2:	687b      	ldr	r3, [r7, #4]
   153b4:	4917      	ldr	r1, [pc, #92]	; (15414 <SeesawInitializeKeypad+0xe8>)
   153b6:	400b      	ands	r3, r1
   153b8:	d504      	bpl.n	153c4 <SeesawInitializeKeypad+0x98>
   153ba:	3b01      	subs	r3, #1
   153bc:	2104      	movs	r1, #4
   153be:	4249      	negs	r1, r1
   153c0:	430b      	orrs	r3, r1
   153c2:	3301      	adds	r3, #1
   153c4:	b2db      	uxtb	r3, r3
   153c6:	18d3      	adds	r3, r2, r3
   153c8:	b2db      	uxtb	r3, r3
   153ca:	2201      	movs	r2, #1
   153cc:	2102      	movs	r1, #2
   153ce:	0018      	movs	r0, r3
   153d0:	4b11      	ldr	r3, [pc, #68]	; (15418 <SeesawInitializeKeypad+0xec>)
   153d2:	4798      	blx	r3
   153d4:	0002      	movs	r2, r0
   153d6:	683b      	ldr	r3, [r7, #0]
   153d8:	4313      	orrs	r3, r2
   153da:	603b      	str	r3, [r7, #0]
        if (ERROR_NONE != error) {
   153dc:	683b      	ldr	r3, [r7, #0]
   153de:	2b00      	cmp	r3, #0
   153e0:	d003      	beq.n	153ea <SeesawInitializeKeypad+0xbe>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   153e2:	4b0a      	ldr	r3, [pc, #40]	; (1540c <SeesawInitializeKeypad+0xe0>)
   153e4:	0018      	movs	r0, r3
   153e6:	4b0a      	ldr	r3, [pc, #40]	; (15410 <SeesawInitializeKeypad+0xe4>)
   153e8:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
   153ea:	687b      	ldr	r3, [r7, #4]
   153ec:	3301      	adds	r3, #1
   153ee:	607b      	str	r3, [r7, #4]
   153f0:	687b      	ldr	r3, [r7, #4]
   153f2:	2b0f      	cmp	r3, #15
   153f4:	ddba      	ble.n	1536c <SeesawInitializeKeypad+0x40>
        }
    }
}
   153f6:	46c0      	nop			; (mov r8, r8)
   153f8:	46bd      	mov	sp, r7
   153fa:	b002      	add	sp, #8
   153fc:	bd80      	pop	{r7, pc}
   153fe:	46c0      	nop			; (mov r8, r8)
   15400:	200046b4 	.word	0x200046b4
   15404:	00035f60 	.word	0x00035f60
   15408:	00013e75 	.word	0x00013e75
   1540c:	00036054 	.word	0x00036054
   15410:	0001da95 	.word	0x0001da95
   15414:	80000003 	.word	0x80000003
   15418:	0001515d 	.word	0x0001515d

0001541c <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(void)
{
   1541c:	b5b0      	push	{r4, r5, r7, lr}
   1541e:	af00      	add	r7, sp, #0
    SeesawSetLed(15, 255, 255, 255);
   15420:	23ff      	movs	r3, #255	; 0xff
   15422:	22ff      	movs	r2, #255	; 0xff
   15424:	21ff      	movs	r1, #255	; 0xff
   15426:	200f      	movs	r0, #15
   15428:	4c09      	ldr	r4, [pc, #36]	; (15450 <SeesawTurnOnLedTest+0x34>)
   1542a:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   1542c:	4b09      	ldr	r3, [pc, #36]	; (15454 <SeesawTurnOnLedTest+0x38>)
   1542e:	4798      	blx	r3
    vTaskDelay(400);
   15430:	23c8      	movs	r3, #200	; 0xc8
   15432:	005b      	lsls	r3, r3, #1
   15434:	0018      	movs	r0, r3
   15436:	4b08      	ldr	r3, [pc, #32]	; (15458 <SeesawTurnOnLedTest+0x3c>)
   15438:	4798      	blx	r3

    SeesawSetLed(15, 0, 0, 0);
   1543a:	2300      	movs	r3, #0
   1543c:	2200      	movs	r2, #0
   1543e:	2100      	movs	r1, #0
   15440:	200f      	movs	r0, #15
   15442:	4c03      	ldr	r4, [pc, #12]	; (15450 <SeesawTurnOnLedTest+0x34>)
   15444:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   15446:	4b03      	ldr	r3, [pc, #12]	; (15454 <SeesawTurnOnLedTest+0x38>)
   15448:	4798      	blx	r3
   1544a:	46c0      	nop			; (mov r8, r8)
   1544c:	46bd      	mov	sp, r7
   1544e:	bdb0      	pop	{r4, r5, r7, pc}
   15450:	00015225 	.word	0x00015225
   15454:	000152ed 	.word	0x000152ed
   15458:	0001be41 	.word	0x0001be41

0001545c <shtc_write>:
	.address = SHTC3_ADDRESS
};


static int32_t shtc_write(uint8_t *bufp, uint16_t len)
{
   1545c:	b580      	push	{r7, lr}
   1545e:	b082      	sub	sp, #8
   15460:	af00      	add	r7, sp, #0
   15462:	6078      	str	r0, [r7, #4]
   15464:	000a      	movs	r2, r1
   15466:	1cbb      	adds	r3, r7, #2
   15468:	801a      	strh	r2, [r3, #0]
	shtcData.lenOut = len;
   1546a:	4b0b      	ldr	r3, [pc, #44]	; (15498 <shtc_write+0x3c>)
   1546c:	1cba      	adds	r2, r7, #2
   1546e:	8812      	ldrh	r2, [r2, #0]
   15470:	81da      	strh	r2, [r3, #14]
	shtcData.msgOut = bufp;
   15472:	4b09      	ldr	r3, [pc, #36]	; (15498 <shtc_write+0x3c>)
   15474:	687a      	ldr	r2, [r7, #4]
   15476:	605a      	str	r2, [r3, #4]
	shtcData.msgIn = NULL;
   15478:	4b07      	ldr	r3, [pc, #28]	; (15498 <shtc_write+0x3c>)
   1547a:	2200      	movs	r2, #0
   1547c:	609a      	str	r2, [r3, #8]
	shtcData.lenIn = 0;
   1547e:	4b06      	ldr	r3, [pc, #24]	; (15498 <shtc_write+0x3c>)
   15480:	2200      	movs	r2, #0
   15482:	819a      	strh	r2, [r3, #12]
	return I2cWriteDataWait(&shtcData, SHTC3_TIMEOUT);
   15484:	4b04      	ldr	r3, [pc, #16]	; (15498 <shtc_write+0x3c>)
   15486:	210a      	movs	r1, #10
   15488:	0018      	movs	r0, r3
   1548a:	4b04      	ldr	r3, [pc, #16]	; (1549c <shtc_write+0x40>)
   1548c:	4798      	blx	r3
   1548e:	0003      	movs	r3, r0
} 
   15490:	0018      	movs	r0, r3
   15492:	46bd      	mov	sp, r7
   15494:	b002      	add	sp, #8
   15496:	bd80      	pop	{r7, pc}
   15498:	2000003c 	.word	0x2000003c
   1549c:	00013e75 	.word	0x00013e75

000154a0 <shtc_read>:

static int32_t shtc_read(uint8_t *bufp, uint16_t len)
{
   154a0:	b580      	push	{r7, lr}
   154a2:	b082      	sub	sp, #8
   154a4:	af00      	add	r7, sp, #0
   154a6:	6078      	str	r0, [r7, #4]
   154a8:	000a      	movs	r2, r1
   154aa:	1cbb      	adds	r3, r7, #2
   154ac:	801a      	strh	r2, [r3, #0]
	shtcData.lenOut = len;
   154ae:	4b0c      	ldr	r3, [pc, #48]	; (154e0 <shtc_read+0x40>)
   154b0:	1cba      	adds	r2, r7, #2
   154b2:	8812      	ldrh	r2, [r2, #0]
   154b4:	81da      	strh	r2, [r3, #14]
	shtcData.msgOut = bufp;
   154b6:	4b0a      	ldr	r3, [pc, #40]	; (154e0 <shtc_read+0x40>)
   154b8:	687a      	ldr	r2, [r7, #4]
   154ba:	605a      	str	r2, [r3, #4]
	shtcData.msgIn = read_buffer;
   154bc:	4b08      	ldr	r3, [pc, #32]	; (154e0 <shtc_read+0x40>)
   154be:	4a09      	ldr	r2, [pc, #36]	; (154e4 <shtc_read+0x44>)
   154c0:	609a      	str	r2, [r3, #8]
	shtcData.lenIn = READ_BUFFER_LEN;
   154c2:	4b07      	ldr	r3, [pc, #28]	; (154e0 <shtc_read+0x40>)
   154c4:	2206      	movs	r2, #6
   154c6:	819a      	strh	r2, [r3, #12]
	return I2cReadDataWait(&shtcData,SHTC3_delay, SHTC3_TIMEOUT);
   154c8:	4b05      	ldr	r3, [pc, #20]	; (154e0 <shtc_read+0x40>)
   154ca:	220a      	movs	r2, #10
   154cc:	21d2      	movs	r1, #210	; 0xd2
   154ce:	0018      	movs	r0, r3
   154d0:	4b05      	ldr	r3, [pc, #20]	; (154e8 <shtc_read+0x48>)
   154d2:	4798      	blx	r3
   154d4:	0003      	movs	r3, r0
}
   154d6:	0018      	movs	r0, r3
   154d8:	46bd      	mov	sp, r7
   154da:	b002      	add	sp, #8
   154dc:	bd80      	pop	{r7, pc}
   154de:	46c0      	nop			; (mov r8, r8)
   154e0:	2000003c 	.word	0x2000003c
   154e4:	200046c4 	.word	0x200046c4
   154e8:	00013f4d 	.word	0x00013f4d

000154ec <shtc_get>:


bool shtc_get(uint16_t *buf){
   154ec:	b580      	push	{r7, lr}
   154ee:	b084      	sub	sp, #16
   154f0:	af00      	add	r7, sp, #0
   154f2:	6078      	str	r0, [r7, #4]
	int32_t err_ = ERROR_NONE;
   154f4:	2300      	movs	r3, #0
   154f6:	60fb      	str	r3, [r7, #12]
	
	err_ = shtc_write(wake_write_buffer, WAKE_WRITE_BUFFER_LEN);
   154f8:	4b31      	ldr	r3, [pc, #196]	; (155c0 <shtc_get+0xd4>)
   154fa:	2102      	movs	r1, #2
   154fc:	0018      	movs	r0, r3
   154fe:	4b31      	ldr	r3, [pc, #196]	; (155c4 <shtc_get+0xd8>)
   15500:	4798      	blx	r3
   15502:	0003      	movs	r3, r0
   15504:	60fb      	str	r3, [r7, #12]
	if(err_ != ERROR_NONE) {goto exit_error;}
   15506:	68fb      	ldr	r3, [r7, #12]
   15508:	2b00      	cmp	r3, #0
   1550a:	d149      	bne.n	155a0 <shtc_get+0xb4>
		
	err_ = shtc_read(meas_write_buffer, MEAS_WRITE_BUFFER_LEN);
   1550c:	4b2e      	ldr	r3, [pc, #184]	; (155c8 <shtc_get+0xdc>)
   1550e:	2102      	movs	r1, #2
   15510:	0018      	movs	r0, r3
   15512:	4b2e      	ldr	r3, [pc, #184]	; (155cc <shtc_get+0xe0>)
   15514:	4798      	blx	r3
   15516:	0003      	movs	r3, r0
   15518:	60fb      	str	r3, [r7, #12]
	if(err_ != ERROR_NONE) {goto exit_error;}
   1551a:	68fb      	ldr	r3, [r7, #12]
   1551c:	2b00      	cmp	r3, #0
   1551e:	d141      	bne.n	155a4 <shtc_get+0xb8>
		
	shtc_write(sleep_write_buffer, SLEEP_WRITE_BUFFER_LEN);
   15520:	4b2b      	ldr	r3, [pc, #172]	; (155d0 <shtc_get+0xe4>)
   15522:	2102      	movs	r1, #2
   15524:	0018      	movs	r0, r3
   15526:	4b27      	ldr	r3, [pc, #156]	; (155c4 <shtc_get+0xd8>)
   15528:	4798      	blx	r3
	
	buf[0] = (read_buffer[0] << 8) | read_buffer[1] ;
   1552a:	4b2a      	ldr	r3, [pc, #168]	; (155d4 <shtc_get+0xe8>)
   1552c:	781b      	ldrb	r3, [r3, #0]
   1552e:	021b      	lsls	r3, r3, #8
   15530:	b21a      	sxth	r2, r3
   15532:	4b28      	ldr	r3, [pc, #160]	; (155d4 <shtc_get+0xe8>)
   15534:	785b      	ldrb	r3, [r3, #1]
   15536:	b21b      	sxth	r3, r3
   15538:	4313      	orrs	r3, r2
   1553a:	b21b      	sxth	r3, r3
   1553c:	b29a      	uxth	r2, r3
   1553e:	687b      	ldr	r3, [r7, #4]
   15540:	801a      	strh	r2, [r3, #0]
	buf[1] = (read_buffer[3] << 8) | read_buffer[4] ;
   15542:	687b      	ldr	r3, [r7, #4]
   15544:	3302      	adds	r3, #2
   15546:	4a23      	ldr	r2, [pc, #140]	; (155d4 <shtc_get+0xe8>)
   15548:	78d2      	ldrb	r2, [r2, #3]
   1554a:	0212      	lsls	r2, r2, #8
   1554c:	b211      	sxth	r1, r2
   1554e:	4a21      	ldr	r2, [pc, #132]	; (155d4 <shtc_get+0xe8>)
   15550:	7912      	ldrb	r2, [r2, #4]
   15552:	b212      	sxth	r2, r2
   15554:	430a      	orrs	r2, r1
   15556:	b212      	sxth	r2, r2
   15558:	b292      	uxth	r2, r2
   1555a:	801a      	strh	r2, [r3, #0]
		
	buf[0] = 100 * buf[0]/65536;
   1555c:	687b      	ldr	r3, [r7, #4]
   1555e:	881b      	ldrh	r3, [r3, #0]
   15560:	001a      	movs	r2, r3
   15562:	2364      	movs	r3, #100	; 0x64
   15564:	4353      	muls	r3, r2
   15566:	2b00      	cmp	r3, #0
   15568:	da02      	bge.n	15570 <shtc_get+0x84>
   1556a:	4a1b      	ldr	r2, [pc, #108]	; (155d8 <shtc_get+0xec>)
   1556c:	4694      	mov	ip, r2
   1556e:	4463      	add	r3, ip
   15570:	141b      	asrs	r3, r3, #16
   15572:	b29a      	uxth	r2, r3
   15574:	687b      	ldr	r3, [r7, #4]
   15576:	801a      	strh	r2, [r3, #0]
	buf[1] = -45 +175 * buf[1]/65536;
   15578:	687b      	ldr	r3, [r7, #4]
   1557a:	1c9a      	adds	r2, r3, #2
   1557c:	687b      	ldr	r3, [r7, #4]
   1557e:	3302      	adds	r3, #2
   15580:	881b      	ldrh	r3, [r3, #0]
   15582:	0019      	movs	r1, r3
   15584:	23af      	movs	r3, #175	; 0xaf
   15586:	434b      	muls	r3, r1
   15588:	2b00      	cmp	r3, #0
   1558a:	da02      	bge.n	15592 <shtc_get+0xa6>
   1558c:	4912      	ldr	r1, [pc, #72]	; (155d8 <shtc_get+0xec>)
   1558e:	468c      	mov	ip, r1
   15590:	4463      	add	r3, ip
   15592:	141b      	asrs	r3, r3, #16
   15594:	b29b      	uxth	r3, r3
   15596:	3b2d      	subs	r3, #45	; 0x2d
   15598:	b29b      	uxth	r3, r3
   1559a:	8013      	strh	r3, [r2, #0]
	
	return true;
   1559c:	2301      	movs	r3, #1
   1559e:	e00a      	b.n	155b6 <shtc_get+0xca>
	if(err_ != ERROR_NONE) {goto exit_error;}
   155a0:	46c0      	nop			; (mov r8, r8)
   155a2:	e000      	b.n	155a6 <shtc_get+0xba>
	if(err_ != ERROR_NONE) {goto exit_error;}
   155a4:	46c0      	nop			; (mov r8, r8)
	
	exit_error:
		buf[0] = 0;
   155a6:	687b      	ldr	r3, [r7, #4]
   155a8:	2200      	movs	r2, #0
   155aa:	801a      	strh	r2, [r3, #0]
		buf[1] = 0;
   155ac:	687b      	ldr	r3, [r7, #4]
   155ae:	3302      	adds	r3, #2
   155b0:	2200      	movs	r2, #0
   155b2:	801a      	strh	r2, [r3, #0]
		return false;
   155b4:	2300      	movs	r3, #0
}
   155b6:	0018      	movs	r0, r3
   155b8:	46bd      	mov	sp, r7
   155ba:	b004      	add	sp, #16
   155bc:	bd80      	pop	{r7, pc}
   155be:	46c0      	nop			; (mov r8, r8)
   155c0:	20000030 	.word	0x20000030
   155c4:	0001545d 	.word	0x0001545d
   155c8:	20000034 	.word	0x20000034
   155cc:	000154a1 	.word	0x000154a1
   155d0:	20000038 	.word	0x20000038
   155d4:	200046c4 	.word	0x200046c4
   155d8:	0000ffff 	.word	0x0000ffff

000155dc <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   155dc:	b590      	push	{r4, r7, lr}
   155de:	b087      	sub	sp, #28
   155e0:	af00      	add	r7, sp, #0
   155e2:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   155e4:	4b8d      	ldr	r3, [pc, #564]	; (1581c <vUiHandlerTask+0x240>)
   155e6:	0018      	movs	r0, r3
   155e8:	4b8d      	ldr	r3, [pc, #564]	; (15820 <vUiHandlerTask+0x244>)
   155ea:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   155ec:	4b8d      	ldr	r3, [pc, #564]	; (15824 <vUiHandlerTask+0x248>)
   155ee:	2201      	movs	r2, #1
   155f0:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_string("ESE516",0,0, &sysfont);
	*/

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   155f2:	4b8c      	ldr	r3, [pc, #560]	; (15824 <vUiHandlerTask+0x248>)
   155f4:	781b      	ldrb	r3, [r3, #0]
   155f6:	2b01      	cmp	r3, #1
   155f8:	d100      	bne.n	155fc <vUiHandlerTask+0x20>
   155fa:	e107      	b.n	1580c <vUiHandlerTask+0x230>
   155fc:	2b02      	cmp	r3, #2
   155fe:	d002      	beq.n	15606 <vUiHandlerTask+0x2a>
   15600:	2b00      	cmp	r3, #0
   15602:	d06e      	beq.n	156e2 <vUiHandlerTask+0x106>
   15604:	e0fe      	b.n	15804 <vUiHandlerTask+0x228>
            }

            case (UI_STATE_SHOW_MOVES): {
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
   15606:	4b88      	ldr	r3, [pc, #544]	; (15828 <vUiHandlerTask+0x24c>)
   15608:	2200      	movs	r2, #0
   1560a:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
   1560c:	4b87      	ldr	r3, [pc, #540]	; (1582c <vUiHandlerTask+0x250>)
   1560e:	2201      	movs	r2, #1
   15610:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
   15612:	4b87      	ldr	r3, [pc, #540]	; (15830 <vUiHandlerTask+0x254>)
   15614:	2214      	movs	r2, #20
   15616:	21ff      	movs	r1, #255	; 0xff
   15618:	0018      	movs	r0, r3
   1561a:	4b86      	ldr	r3, [pc, #536]	; (15834 <vUiHandlerTask+0x258>)
   1561c:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
   1561e:	4b86      	ldr	r3, [pc, #536]	; (15838 <vUiHandlerTask+0x25c>)
   15620:	2200      	movs	r2, #0
   15622:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
   15624:	2317      	movs	r3, #23
   15626:	18fc      	adds	r4, r7, r3
   15628:	4b84      	ldr	r3, [pc, #528]	; (1583c <vUiHandlerTask+0x260>)
   1562a:	4798      	blx	r3
   1562c:	0003      	movs	r3, r0
   1562e:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   15630:	2317      	movs	r3, #23
   15632:	18fb      	adds	r3, r7, r3
   15634:	781b      	ldrb	r3, [r3, #0]
   15636:	2b0f      	cmp	r3, #15
   15638:	d903      	bls.n	15642 <vUiHandlerTask+0x66>
   1563a:	2317      	movs	r3, #23
   1563c:	18fb      	adds	r3, r7, r3
   1563e:	2210      	movs	r2, #16
   15640:	701a      	strb	r2, [r3, #0]
                if (presses != 0)
   15642:	2317      	movs	r3, #23
   15644:	18fb      	adds	r3, r7, r3
   15646:	781b      	ldrb	r3, [r3, #0]
   15648:	2b00      	cmp	r3, #0
   1564a:	d007      	beq.n	1565c <vUiHandlerTask+0x80>
                    SeesawReadKeypad(buttons,
   1564c:	2317      	movs	r3, #23
   1564e:	18fb      	adds	r3, r7, r3
   15650:	781a      	ldrb	r2, [r3, #0]
   15652:	4b7b      	ldr	r3, [pc, #492]	; (15840 <vUiHandlerTask+0x264>)
   15654:	0011      	movs	r1, r2
   15656:	0018      	movs	r0, r3
   15658:	4b7a      	ldr	r3, [pc, #488]	; (15844 <vUiHandlerTask+0x268>)
   1565a:	4798      	blx	r3
                                     presses);  // Empty Seesaw buffer just in case
                                                // it has latent presses on it!
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   1565c:	4b78      	ldr	r3, [pc, #480]	; (15840 <vUiHandlerTask+0x264>)
   1565e:	2210      	movs	r2, #16
   15660:	2100      	movs	r1, #0
   15662:	0018      	movs	r0, r3
   15664:	4b73      	ldr	r3, [pc, #460]	; (15834 <vUiHandlerTask+0x258>)
   15666:	4798      	blx	r3
                // the message gets longer might be more fun! After you finish showing
                // the move should go to state UI_STATE_HANDLE_BUTTONS

                // In the beginner example we turn LED0 and LED15 will turn on for 500
                // ms then we go to UI_STATE_HANDLE_BUTTONS
                SeesawSetLed(0, red, green, blue);  // Turn button 1 on
   15668:	4b77      	ldr	r3, [pc, #476]	; (15848 <vUiHandlerTask+0x26c>)
   1566a:	781b      	ldrb	r3, [r3, #0]
   1566c:	b2d9      	uxtb	r1, r3
   1566e:	4b77      	ldr	r3, [pc, #476]	; (1584c <vUiHandlerTask+0x270>)
   15670:	781b      	ldrb	r3, [r3, #0]
   15672:	b2da      	uxtb	r2, r3
   15674:	4b76      	ldr	r3, [pc, #472]	; (15850 <vUiHandlerTask+0x274>)
   15676:	781b      	ldrb	r3, [r3, #0]
   15678:	b2db      	uxtb	r3, r3
   1567a:	2000      	movs	r0, #0
   1567c:	4c75      	ldr	r4, [pc, #468]	; (15854 <vUiHandlerTask+0x278>)
   1567e:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   15680:	4b75      	ldr	r3, [pc, #468]	; (15858 <vUiHandlerTask+0x27c>)
   15682:	4798      	blx	r3
                vTaskDelay(1000);
   15684:	23fa      	movs	r3, #250	; 0xfa
   15686:	009b      	lsls	r3, r3, #2
   15688:	0018      	movs	r0, r3
   1568a:	4b74      	ldr	r3, [pc, #464]	; (1585c <vUiHandlerTask+0x280>)
   1568c:	4798      	blx	r3
                SeesawSetLed(0, 0, 0, 0);            // Turn button 0 off
   1568e:	2300      	movs	r3, #0
   15690:	2200      	movs	r2, #0
   15692:	2100      	movs	r1, #0
   15694:	2000      	movs	r0, #0
   15696:	4c6f      	ldr	r4, [pc, #444]	; (15854 <vUiHandlerTask+0x278>)
   15698:	47a0      	blx	r4
                SeesawSetLed(15, red, green, blue);  // Turn button 15 on
   1569a:	4b6b      	ldr	r3, [pc, #428]	; (15848 <vUiHandlerTask+0x26c>)
   1569c:	781b      	ldrb	r3, [r3, #0]
   1569e:	b2d9      	uxtb	r1, r3
   156a0:	4b6a      	ldr	r3, [pc, #424]	; (1584c <vUiHandlerTask+0x270>)
   156a2:	781b      	ldrb	r3, [r3, #0]
   156a4:	b2da      	uxtb	r2, r3
   156a6:	4b6a      	ldr	r3, [pc, #424]	; (15850 <vUiHandlerTask+0x274>)
   156a8:	781b      	ldrb	r3, [r3, #0]
   156aa:	b2db      	uxtb	r3, r3
   156ac:	200f      	movs	r0, #15
   156ae:	4c69      	ldr	r4, [pc, #420]	; (15854 <vUiHandlerTask+0x278>)
   156b0:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   156b2:	4b69      	ldr	r3, [pc, #420]	; (15858 <vUiHandlerTask+0x27c>)
   156b4:	4798      	blx	r3
                vTaskDelay(1000);
   156b6:	23fa      	movs	r3, #250	; 0xfa
   156b8:	009b      	lsls	r3, r3, #2
   156ba:	0018      	movs	r0, r3
   156bc:	4b67      	ldr	r3, [pc, #412]	; (1585c <vUiHandlerTask+0x280>)
   156be:	4798      	blx	r3
                SeesawSetLed(15, 0, 0, 0);  // Turn button 15 off
   156c0:	2300      	movs	r3, #0
   156c2:	2200      	movs	r2, #0
   156c4:	2100      	movs	r1, #0
   156c6:	200f      	movs	r0, #15
   156c8:	4c62      	ldr	r4, [pc, #392]	; (15854 <vUiHandlerTask+0x278>)
   156ca:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   156cc:	4b62      	ldr	r3, [pc, #392]	; (15858 <vUiHandlerTask+0x27c>)
   156ce:	4798      	blx	r3
                vTaskDelay(1000);
   156d0:	23fa      	movs	r3, #250	; 0xfa
   156d2:	009b      	lsls	r3, r3, #2
   156d4:	0018      	movs	r0, r3
   156d6:	4b61      	ldr	r3, [pc, #388]	; (1585c <vUiHandlerTask+0x280>)
   156d8:	4798      	blx	r3
                uiState = UI_STATE_HANDLE_BUTTONS;
   156da:	4b52      	ldr	r3, [pc, #328]	; (15824 <vUiHandlerTask+0x248>)
   156dc:	2200      	movs	r2, #0
   156de:	701a      	strb	r2, [r3, #0]

                break;
   156e0:	e097      	b.n	15812 <vUiHandlerTask+0x236>
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
   156e2:	2316      	movs	r3, #22
   156e4:	18fc      	adds	r4, r7, r3
   156e6:	4b55      	ldr	r3, [pc, #340]	; (1583c <vUiHandlerTask+0x260>)
   156e8:	4798      	blx	r3
   156ea:	0003      	movs	r3, r0
   156ec:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   156ee:	4b54      	ldr	r3, [pc, #336]	; (15840 <vUiHandlerTask+0x264>)
   156f0:	2210      	movs	r2, #16
   156f2:	2100      	movs	r1, #0
   156f4:	0018      	movs	r0, r3
   156f6:	4b4f      	ldr	r3, [pc, #316]	; (15834 <vUiHandlerTask+0x258>)
   156f8:	4798      	blx	r3

                if (numPresses >= BUTTON_PRESSES_MAX) {
   156fa:	2316      	movs	r3, #22
   156fc:	18fb      	adds	r3, r7, r3
   156fe:	781b      	ldrb	r3, [r3, #0]
   15700:	2b0f      	cmp	r3, #15
   15702:	d903      	bls.n	1570c <vUiHandlerTask+0x130>
                    numPresses = BUTTON_PRESSES_MAX;
   15704:	2316      	movs	r3, #22
   15706:	18fb      	adds	r3, r7, r3
   15708:	2210      	movs	r2, #16
   1570a:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
   1570c:	2316      	movs	r3, #22
   1570e:	18fb      	adds	r3, r7, r3
   15710:	781b      	ldrb	r3, [r3, #0]
   15712:	2b00      	cmp	r3, #0
   15714:	d065      	beq.n	157e2 <vUiHandlerTask+0x206>
   15716:	2316      	movs	r3, #22
   15718:	18fb      	adds	r3, r7, r3
   1571a:	781a      	ldrb	r2, [r3, #0]
   1571c:	4b48      	ldr	r3, [pc, #288]	; (15840 <vUiHandlerTask+0x264>)
   1571e:	0011      	movs	r1, r2
   15720:	0018      	movs	r0, r3
   15722:	4b48      	ldr	r3, [pc, #288]	; (15844 <vUiHandlerTask+0x268>)
   15724:	4798      	blx	r3
   15726:	1e03      	subs	r3, r0, #0
   15728:	d15b      	bne.n	157e2 <vUiHandlerTask+0x206>
                    // Process Buttons
                    for (int iter = 0; iter < numPresses; iter++) {
   1572a:	2300      	movs	r3, #0
   1572c:	613b      	str	r3, [r7, #16]
   1572e:	e050      	b.n	157d2 <vUiHandlerTask+0x1f6>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   15730:	4a43      	ldr	r2, [pc, #268]	; (15840 <vUiHandlerTask+0x264>)
   15732:	693b      	ldr	r3, [r7, #16]
   15734:	18d3      	adds	r3, r2, r3
   15736:	781b      	ldrb	r3, [r3, #0]
   15738:	089b      	lsrs	r3, r3, #2
   1573a:	b2db      	uxtb	r3, r3
   1573c:	2b00      	cmp	r3, #0
   1573e:	da00      	bge.n	15742 <vUiHandlerTask+0x166>
   15740:	3307      	adds	r3, #7
   15742:	10db      	asrs	r3, r3, #3
   15744:	b2db      	uxtb	r3, r3
   15746:	009b      	lsls	r3, r3, #2
   15748:	b2d9      	uxtb	r1, r3
   1574a:	4a3d      	ldr	r2, [pc, #244]	; (15840 <vUiHandlerTask+0x264>)
   1574c:	693b      	ldr	r3, [r7, #16]
   1574e:	18d3      	adds	r3, r2, r3
   15750:	781b      	ldrb	r3, [r3, #0]
   15752:	089b      	lsrs	r3, r3, #2
   15754:	b2db      	uxtb	r3, r3
   15756:	2207      	movs	r2, #7
   15758:	4013      	ands	r3, r2
   1575a:	b2da      	uxtb	r2, r3
   1575c:	230f      	movs	r3, #15
   1575e:	18fb      	adds	r3, r7, r3
   15760:	188a      	adds	r2, r1, r2
   15762:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
   15764:	4a36      	ldr	r2, [pc, #216]	; (15840 <vUiHandlerTask+0x264>)
   15766:	693b      	ldr	r3, [r7, #16]
   15768:	18d3      	adds	r3, r2, r3
   1576a:	781a      	ldrb	r2, [r3, #0]
   1576c:	230e      	movs	r3, #14
   1576e:	18fb      	adds	r3, r7, r3
   15770:	2103      	movs	r1, #3
   15772:	400a      	ands	r2, r1
   15774:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
   15776:	230e      	movs	r3, #14
   15778:	18fb      	adds	r3, r7, r3
   1577a:	781b      	ldrb	r3, [r3, #0]
   1577c:	2b03      	cmp	r3, #3
   1577e:	d10f      	bne.n	157a0 <vUiHandlerTask+0x1c4>
                            SeesawSetLed(keynum, red, green, blue);
   15780:	4b31      	ldr	r3, [pc, #196]	; (15848 <vUiHandlerTask+0x26c>)
   15782:	781b      	ldrb	r3, [r3, #0]
   15784:	b2d9      	uxtb	r1, r3
   15786:	4b31      	ldr	r3, [pc, #196]	; (1584c <vUiHandlerTask+0x270>)
   15788:	781b      	ldrb	r3, [r3, #0]
   1578a:	b2da      	uxtb	r2, r3
   1578c:	4b30      	ldr	r3, [pc, #192]	; (15850 <vUiHandlerTask+0x274>)
   1578e:	781b      	ldrb	r3, [r3, #0]
   15790:	b2dc      	uxtb	r4, r3
   15792:	230f      	movs	r3, #15
   15794:	18fb      	adds	r3, r7, r3
   15796:	7818      	ldrb	r0, [r3, #0]
   15798:	0023      	movs	r3, r4
   1579a:	4c2e      	ldr	r4, [pc, #184]	; (15854 <vUiHandlerTask+0x278>)
   1579c:	47a0      	blx	r4
   1579e:	e015      	b.n	157cc <vUiHandlerTask+0x1f0>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
   157a0:	230f      	movs	r3, #15
   157a2:	18fb      	adds	r3, r7, r3
   157a4:	7818      	ldrb	r0, [r3, #0]
   157a6:	2300      	movs	r3, #0
   157a8:	2200      	movs	r2, #0
   157aa:	2100      	movs	r1, #0
   157ac:	4c29      	ldr	r4, [pc, #164]	; (15854 <vUiHandlerTask+0x278>)
   157ae:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
                            gamePacketOut.game[pressedKeys] = keynum;
   157b0:	4b1d      	ldr	r3, [pc, #116]	; (15828 <vUiHandlerTask+0x24c>)
   157b2:	781b      	ldrb	r3, [r3, #0]
   157b4:	0019      	movs	r1, r3
   157b6:	4b1e      	ldr	r3, [pc, #120]	; (15830 <vUiHandlerTask+0x254>)
   157b8:	220f      	movs	r2, #15
   157ba:	18ba      	adds	r2, r7, r2
   157bc:	7812      	ldrb	r2, [r2, #0]
   157be:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
   157c0:	4b19      	ldr	r3, [pc, #100]	; (15828 <vUiHandlerTask+0x24c>)
   157c2:	781b      	ldrb	r3, [r3, #0]
   157c4:	3301      	adds	r3, #1
   157c6:	b2da      	uxtb	r2, r3
   157c8:	4b17      	ldr	r3, [pc, #92]	; (15828 <vUiHandlerTask+0x24c>)
   157ca:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
   157cc:	693b      	ldr	r3, [r7, #16]
   157ce:	3301      	adds	r3, #1
   157d0:	613b      	str	r3, [r7, #16]
   157d2:	2316      	movs	r3, #22
   157d4:	18fb      	adds	r3, r7, r3
   157d6:	781a      	ldrb	r2, [r3, #0]
   157d8:	693b      	ldr	r3, [r7, #16]
   157da:	429a      	cmp	r2, r3
   157dc:	dca8      	bgt.n	15730 <vUiHandlerTask+0x154>
                        }
                    }
                    SeesawOrderLedUpdate();
   157de:	4b1e      	ldr	r3, [pc, #120]	; (15858 <vUiHandlerTask+0x27c>)
   157e0:	4798      	blx	r3
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
   157e2:	4b11      	ldr	r3, [pc, #68]	; (15828 <vUiHandlerTask+0x24c>)
   157e4:	781a      	ldrb	r2, [r3, #0]
   157e6:	4b11      	ldr	r3, [pc, #68]	; (1582c <vUiHandlerTask+0x250>)
   157e8:	781b      	ldrb	r3, [r3, #0]
   157ea:	429a      	cmp	r2, r3
   157ec:	d203      	bcs.n	157f6 <vUiHandlerTask+0x21a>
   157ee:	4b0e      	ldr	r3, [pc, #56]	; (15828 <vUiHandlerTask+0x24c>)
   157f0:	781b      	ldrb	r3, [r3, #0]
   157f2:	2b13      	cmp	r3, #19
   157f4:	d90c      	bls.n	15810 <vUiHandlerTask+0x234>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
   157f6:	4b10      	ldr	r3, [pc, #64]	; (15838 <vUiHandlerTask+0x25c>)
   157f8:	2201      	movs	r2, #1
   157fa:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
   157fc:	4b09      	ldr	r3, [pc, #36]	; (15824 <vUiHandlerTask+0x248>)
   157fe:	2201      	movs	r2, #1
   15800:	701a      	strb	r2, [r3, #0]
                }

                break;
   15802:	e005      	b.n	15810 <vUiHandlerTask+0x234>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   15804:	4b07      	ldr	r3, [pc, #28]	; (15824 <vUiHandlerTask+0x248>)
   15806:	2200      	movs	r2, #0
   15808:	701a      	strb	r2, [r3, #0]
                break;
   1580a:	e002      	b.n	15812 <vUiHandlerTask+0x236>
                break;
   1580c:	46c0      	nop			; (mov r8, r8)
   1580e:	e000      	b.n	15812 <vUiHandlerTask+0x236>
                break;
   15810:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   15812:	2032      	movs	r0, #50	; 0x32
   15814:	4b11      	ldr	r3, [pc, #68]	; (1585c <vUiHandlerTask+0x280>)
   15816:	4798      	blx	r3
        switch (uiState) {
   15818:	e6eb      	b.n	155f2 <vUiHandlerTask+0x16>
   1581a:	46c0      	nop			; (mov r8, r8)
   1581c:	00036078 	.word	0x00036078
   15820:	0001da95 	.word	0x0001da95
   15824:	20004704 	.word	0x20004704
   15828:	200004c5 	.word	0x200004c5
   1582c:	200004c6 	.word	0x200004c6
   15830:	200046cc 	.word	0x200046cc
   15834:	000346df 	.word	0x000346df
   15838:	200004c7 	.word	0x200004c7
   1583c:	00015071 	.word	0x00015071
   15840:	200046f4 	.word	0x200046f4
   15844:	000150d9 	.word	0x000150d9
   15848:	200004c4 	.word	0x200004c4
   1584c:	2000004c 	.word	0x2000004c
   15850:	2000004d 	.word	0x2000004d
   15854:	00015225 	.word	0x00015225
   15858:	000152ed 	.word	0x000152ed
   1585c:	0001be41 	.word	0x0001be41

00015860 <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   15860:	b580      	push	{r7, lr}
   15862:	b082      	sub	sp, #8
   15864:	af00      	add	r7, sp, #0
   15866:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   15868:	4a08      	ldr	r2, [pc, #32]	; (1588c <UiOrderShowMoves+0x2c>)
   1586a:	687b      	ldr	r3, [r7, #4]
   1586c:	0010      	movs	r0, r2
   1586e:	0019      	movs	r1, r3
   15870:	2314      	movs	r3, #20
   15872:	001a      	movs	r2, r3
   15874:	4b06      	ldr	r3, [pc, #24]	; (15890 <UiOrderShowMoves+0x30>)
   15876:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   15878:	4b06      	ldr	r3, [pc, #24]	; (15894 <UiOrderShowMoves+0x34>)
   1587a:	2202      	movs	r2, #2
   1587c:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   1587e:	4b06      	ldr	r3, [pc, #24]	; (15898 <UiOrderShowMoves+0x38>)
   15880:	2200      	movs	r2, #0
   15882:	701a      	strb	r2, [r3, #0]
}
   15884:	46c0      	nop			; (mov r8, r8)
   15886:	46bd      	mov	sp, r7
   15888:	b002      	add	sp, #8
   1588a:	bd80      	pop	{r7, pc}
   1588c:	200046e0 	.word	0x200046e0
   15890:	000346a9 	.word	0x000346a9
   15894:	20004704 	.word	0x20004704
   15898:	200004c7 	.word	0x200004c7

0001589c <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   1589c:	b580      	push	{r7, lr}
   1589e:	af00      	add	r7, sp, #0
    return playIsDone;
   158a0:	4b02      	ldr	r3, [pc, #8]	; (158ac <UiPlayIsDone+0x10>)
   158a2:	781b      	ldrb	r3, [r3, #0]
}
   158a4:	0018      	movs	r0, r3
   158a6:	46bd      	mov	sp, r7
   158a8:	bd80      	pop	{r7, pc}
   158aa:	46c0      	nop			; (mov r8, r8)
   158ac:	200004c7 	.word	0x200004c7

000158b0 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   158b0:	b580      	push	{r7, lr}
   158b2:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   158b4:	4b01      	ldr	r3, [pc, #4]	; (158bc <UiGetGamePacketOut+0xc>)
}
   158b6:	0018      	movs	r0, r3
   158b8:	46bd      	mov	sp, r7
   158ba:	bd80      	pop	{r7, pc}
   158bc:	200046cc 	.word	0x200046cc

000158c0 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   158c0:	b590      	push	{r4, r7, lr}
   158c2:	b083      	sub	sp, #12
   158c4:	af00      	add	r7, sp, #0
   158c6:	0004      	movs	r4, r0
   158c8:	0008      	movs	r0, r1
   158ca:	0011      	movs	r1, r2
   158cc:	1dfb      	adds	r3, r7, #7
   158ce:	1c22      	adds	r2, r4, #0
   158d0:	701a      	strb	r2, [r3, #0]
   158d2:	1dbb      	adds	r3, r7, #6
   158d4:	1c02      	adds	r2, r0, #0
   158d6:	701a      	strb	r2, [r3, #0]
   158d8:	1d7b      	adds	r3, r7, #5
   158da:	1c0a      	adds	r2, r1, #0
   158dc:	701a      	strb	r2, [r3, #0]
    red = r;
   158de:	4b08      	ldr	r3, [pc, #32]	; (15900 <UIChangeColors+0x40>)
   158e0:	1dfa      	adds	r2, r7, #7
   158e2:	7812      	ldrb	r2, [r2, #0]
   158e4:	701a      	strb	r2, [r3, #0]
    green = g;
   158e6:	4b07      	ldr	r3, [pc, #28]	; (15904 <UIChangeColors+0x44>)
   158e8:	1dba      	adds	r2, r7, #6
   158ea:	7812      	ldrb	r2, [r2, #0]
   158ec:	701a      	strb	r2, [r3, #0]
    blue = b;
   158ee:	4b06      	ldr	r3, [pc, #24]	; (15908 <UIChangeColors+0x48>)
   158f0:	1d7a      	adds	r2, r7, #5
   158f2:	7812      	ldrb	r2, [r2, #0]
   158f4:	701a      	strb	r2, [r3, #0]
}
   158f6:	46c0      	nop			; (mov r8, r8)
   158f8:	46bd      	mov	sp, r7
   158fa:	b003      	add	sp, #12
   158fc:	bd90      	pop	{r4, r7, pc}
   158fe:	46c0      	nop			; (mov r8, r8)
   15900:	200004c4 	.word	0x200004c4
   15904:	2000004c 	.word	0x2000004c
   15908:	2000004d 	.word	0x2000004d

0001590c <NVIC_SystemReset>:
{
   1590c:	b580      	push	{r7, lr}
   1590e:	af00      	add	r7, sp, #0
   15910:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   15914:	4b02      	ldr	r3, [pc, #8]	; (15920 <NVIC_SystemReset+0x14>)
   15916:	4a03      	ldr	r2, [pc, #12]	; (15924 <NVIC_SystemReset+0x18>)
   15918:	60da      	str	r2, [r3, #12]
   1591a:	f3bf 8f4f 	dsb	sy
  while(1);                                                    /* wait until reset */
   1591e:	e7fe      	b.n	1591e <NVIC_SystemReset+0x12>
   15920:	e000ed00 	.word	0xe000ed00
   15924:	05fa0004 	.word	0x05fa0004

00015928 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   15928:	b580      	push	{r7, lr}
   1592a:	b084      	sub	sp, #16
   1592c:	af00      	add	r7, sp, #0
   1592e:	0002      	movs	r2, r0
   15930:	1dfb      	adds	r3, r7, #7
   15932:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   15934:	230f      	movs	r3, #15
   15936:	18fb      	adds	r3, r7, r3
   15938:	1dfa      	adds	r2, r7, #7
   1593a:	7812      	ldrb	r2, [r2, #0]
   1593c:	09d2      	lsrs	r2, r2, #7
   1593e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   15940:	230e      	movs	r3, #14
   15942:	18fb      	adds	r3, r7, r3
   15944:	1dfa      	adds	r2, r7, #7
   15946:	7812      	ldrb	r2, [r2, #0]
   15948:	0952      	lsrs	r2, r2, #5
   1594a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1594c:	4b0d      	ldr	r3, [pc, #52]	; (15984 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1594e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   15950:	230f      	movs	r3, #15
   15952:	18fb      	adds	r3, r7, r3
   15954:	781b      	ldrb	r3, [r3, #0]
   15956:	2b00      	cmp	r3, #0
   15958:	d10f      	bne.n	1597a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1595a:	230f      	movs	r3, #15
   1595c:	18fb      	adds	r3, r7, r3
   1595e:	781b      	ldrb	r3, [r3, #0]
   15960:	009b      	lsls	r3, r3, #2
   15962:	2210      	movs	r2, #16
   15964:	4694      	mov	ip, r2
   15966:	44bc      	add	ip, r7
   15968:	4463      	add	r3, ip
   1596a:	3b08      	subs	r3, #8
   1596c:	681a      	ldr	r2, [r3, #0]
   1596e:	230e      	movs	r3, #14
   15970:	18fb      	adds	r3, r7, r3
   15972:	781b      	ldrb	r3, [r3, #0]
   15974:	01db      	lsls	r3, r3, #7
   15976:	18d3      	adds	r3, r2, r3
   15978:	e000      	b.n	1597c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   1597a:	2300      	movs	r3, #0
	}
}
   1597c:	0018      	movs	r0, r3
   1597e:	46bd      	mov	sp, r7
   15980:	b004      	add	sp, #16
   15982:	bd80      	pop	{r7, pc}
   15984:	41004400 	.word	0x41004400

00015988 <system_reset>:
{
   15988:	b580      	push	{r7, lr}
   1598a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   1598c:	4b02      	ldr	r3, [pc, #8]	; (15998 <system_reset+0x10>)
   1598e:	4798      	blx	r3
}
   15990:	46c0      	nop			; (mov r8, r8)
   15992:	46bd      	mov	sp, r7
   15994:	bd80      	pop	{r7, pc}
   15996:	46c0      	nop			; (mov r8, r8)
   15998:	0001590d 	.word	0x0001590d

0001599c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1599c:	b580      	push	{r7, lr}
   1599e:	b082      	sub	sp, #8
   159a0:	af00      	add	r7, sp, #0
   159a2:	0002      	movs	r2, r0
   159a4:	1dfb      	adds	r3, r7, #7
   159a6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   159a8:	1dfb      	adds	r3, r7, #7
   159aa:	781b      	ldrb	r3, [r3, #0]
   159ac:	0018      	movs	r0, r3
   159ae:	4b03      	ldr	r3, [pc, #12]	; (159bc <port_get_group_from_gpio_pin+0x20>)
   159b0:	4798      	blx	r3
   159b2:	0003      	movs	r3, r0
}
   159b4:	0018      	movs	r0, r3
   159b6:	46bd      	mov	sp, r7
   159b8:	b002      	add	sp, #8
   159ba:	bd80      	pop	{r7, pc}
   159bc:	00015929 	.word	0x00015929

000159c0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   159c0:	b580      	push	{r7, lr}
   159c2:	b084      	sub	sp, #16
   159c4:	af00      	add	r7, sp, #0
   159c6:	0002      	movs	r2, r0
   159c8:	1dfb      	adds	r3, r7, #7
   159ca:	701a      	strb	r2, [r3, #0]
   159cc:	1dbb      	adds	r3, r7, #6
   159ce:	1c0a      	adds	r2, r1, #0
   159d0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   159d2:	1dfb      	adds	r3, r7, #7
   159d4:	781b      	ldrb	r3, [r3, #0]
   159d6:	0018      	movs	r0, r3
   159d8:	4b0d      	ldr	r3, [pc, #52]	; (15a10 <port_pin_set_output_level+0x50>)
   159da:	4798      	blx	r3
   159dc:	0003      	movs	r3, r0
   159de:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   159e0:	1dfb      	adds	r3, r7, #7
   159e2:	781b      	ldrb	r3, [r3, #0]
   159e4:	221f      	movs	r2, #31
   159e6:	4013      	ands	r3, r2
   159e8:	2201      	movs	r2, #1
   159ea:	409a      	lsls	r2, r3
   159ec:	0013      	movs	r3, r2
   159ee:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   159f0:	1dbb      	adds	r3, r7, #6
   159f2:	781b      	ldrb	r3, [r3, #0]
   159f4:	2b00      	cmp	r3, #0
   159f6:	d003      	beq.n	15a00 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   159f8:	68fb      	ldr	r3, [r7, #12]
   159fa:	68ba      	ldr	r2, [r7, #8]
   159fc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   159fe:	e002      	b.n	15a06 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   15a00:	68fb      	ldr	r3, [r7, #12]
   15a02:	68ba      	ldr	r2, [r7, #8]
   15a04:	615a      	str	r2, [r3, #20]
}
   15a06:	46c0      	nop			; (mov r8, r8)
   15a08:	46bd      	mov	sp, r7
   15a0a:	b004      	add	sp, #16
   15a0c:	bd80      	pop	{r7, pc}
   15a0e:	46c0      	nop			; (mov r8, r8)
   15a10:	0001599d 	.word	0x0001599d

00015a14 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   15a14:	b580      	push	{r7, lr}
   15a16:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   15a18:	4b02      	ldr	r3, [pc, #8]	; (15a24 <init_state+0x10>)
   15a1a:	2200      	movs	r2, #0
   15a1c:	701a      	strb	r2, [r3, #0]
}
   15a1e:	46c0      	nop			; (mov r8, r8)
   15a20:	46bd      	mov	sp, r7
   15a22:	bd80      	pop	{r7, pc}
   15a24:	200004dd 	.word	0x200004dd

00015a28 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   15a28:	b580      	push	{r7, lr}
   15a2a:	b082      	sub	sp, #8
   15a2c:	af00      	add	r7, sp, #0
   15a2e:	0002      	movs	r2, r0
   15a30:	1dfb      	adds	r3, r7, #7
   15a32:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   15a34:	1dfb      	adds	r3, r7, #7
   15a36:	781b      	ldrb	r3, [r3, #0]
   15a38:	b25b      	sxtb	r3, r3
   15a3a:	43db      	mvns	r3, r3
   15a3c:	b25b      	sxtb	r3, r3
   15a3e:	4a06      	ldr	r2, [pc, #24]	; (15a58 <clear_state+0x30>)
   15a40:	7812      	ldrb	r2, [r2, #0]
   15a42:	b252      	sxtb	r2, r2
   15a44:	4013      	ands	r3, r2
   15a46:	b25b      	sxtb	r3, r3
   15a48:	b2da      	uxtb	r2, r3
   15a4a:	4b03      	ldr	r3, [pc, #12]	; (15a58 <clear_state+0x30>)
   15a4c:	701a      	strb	r2, [r3, #0]
}
   15a4e:	46c0      	nop			; (mov r8, r8)
   15a50:	46bd      	mov	sp, r7
   15a52:	b002      	add	sp, #8
   15a54:	bd80      	pop	{r7, pc}
   15a56:	46c0      	nop			; (mov r8, r8)
   15a58:	200004dd 	.word	0x200004dd

00015a5c <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   15a5c:	b580      	push	{r7, lr}
   15a5e:	b082      	sub	sp, #8
   15a60:	af00      	add	r7, sp, #0
   15a62:	0002      	movs	r2, r0
   15a64:	1dfb      	adds	r3, r7, #7
   15a66:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   15a68:	4b05      	ldr	r3, [pc, #20]	; (15a80 <add_state+0x24>)
   15a6a:	781a      	ldrb	r2, [r3, #0]
   15a6c:	1dfb      	adds	r3, r7, #7
   15a6e:	781b      	ldrb	r3, [r3, #0]
   15a70:	4313      	orrs	r3, r2
   15a72:	b2da      	uxtb	r2, r3
   15a74:	4b02      	ldr	r3, [pc, #8]	; (15a80 <add_state+0x24>)
   15a76:	701a      	strb	r2, [r3, #0]
}
   15a78:	46c0      	nop			; (mov r8, r8)
   15a7a:	46bd      	mov	sp, r7
   15a7c:	b002      	add	sp, #8
   15a7e:	bd80      	pop	{r7, pc}
   15a80:	200004dd 	.word	0x200004dd

00015a84 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   15a84:	b580      	push	{r7, lr}
   15a86:	b082      	sub	sp, #8
   15a88:	af00      	add	r7, sp, #0
   15a8a:	0002      	movs	r2, r0
   15a8c:	1dfb      	adds	r3, r7, #7
   15a8e:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   15a90:	4b06      	ldr	r3, [pc, #24]	; (15aac <is_state_set+0x28>)
   15a92:	781b      	ldrb	r3, [r3, #0]
   15a94:	1dfa      	adds	r2, r7, #7
   15a96:	7812      	ldrb	r2, [r2, #0]
   15a98:	4013      	ands	r3, r2
   15a9a:	b2db      	uxtb	r3, r3
   15a9c:	1e5a      	subs	r2, r3, #1
   15a9e:	4193      	sbcs	r3, r2
   15aa0:	b2db      	uxtb	r3, r3
}
   15aa2:	0018      	movs	r0, r3
   15aa4:	46bd      	mov	sp, r7
   15aa6:	b002      	add	sp, #8
   15aa8:	bd80      	pop	{r7, pc}
   15aaa:	46c0      	nop			; (mov r8, r8)
   15aac:	200004dd 	.word	0x200004dd

00015ab0 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   15ab0:	b590      	push	{r4, r7, lr}
   15ab2:	b085      	sub	sp, #20
   15ab4:	af00      	add	r7, sp, #0
   15ab6:	6078      	str	r0, [r7, #4]
   15ab8:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   15aba:	687b      	ldr	r3, [r7, #4]
   15abc:	2b00      	cmp	r3, #0
   15abe:	d002      	beq.n	15ac6 <is_exist_file+0x16>
   15ac0:	683b      	ldr	r3, [r7, #0]
   15ac2:	2b00      	cmp	r3, #0
   15ac4:	d101      	bne.n	15aca <is_exist_file+0x1a>
        return false;
   15ac6:	2300      	movs	r3, #0
   15ac8:	e013      	b.n	15af2 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   15aca:	230f      	movs	r3, #15
   15acc:	18fc      	adds	r4, r7, r3
   15ace:	6839      	ldr	r1, [r7, #0]
   15ad0:	4b0a      	ldr	r3, [pc, #40]	; (15afc <is_exist_file+0x4c>)
   15ad2:	2200      	movs	r2, #0
   15ad4:	0018      	movs	r0, r3
   15ad6:	4b0a      	ldr	r3, [pc, #40]	; (15b00 <is_exist_file+0x50>)
   15ad8:	4798      	blx	r3
   15ada:	0003      	movs	r3, r0
   15adc:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   15ade:	4b07      	ldr	r3, [pc, #28]	; (15afc <is_exist_file+0x4c>)
   15ae0:	0018      	movs	r0, r3
   15ae2:	4b08      	ldr	r3, [pc, #32]	; (15b04 <is_exist_file+0x54>)
   15ae4:	4798      	blx	r3
    return (ret == FR_OK);
   15ae6:	230f      	movs	r3, #15
   15ae8:	18fb      	adds	r3, r7, r3
   15aea:	781b      	ldrb	r3, [r3, #0]
   15aec:	425a      	negs	r2, r3
   15aee:	4153      	adcs	r3, r2
   15af0:	b2db      	uxtb	r3, r3
}
   15af2:	0018      	movs	r0, r3
   15af4:	46bd      	mov	sp, r7
   15af6:	b005      	add	sp, #20
   15af8:	bd90      	pop	{r4, r7, pc}
   15afa:	46c0      	nop			; (mov r8, r8)
   15afc:	20000710 	.word	0x20000710
   15b00:	0002d62d 	.word	0x0002d62d
   15b04:	0002e02d 	.word	0x0002e02d

00015b08 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   15b08:	b580      	push	{r7, lr}
   15b0a:	b09e      	sub	sp, #120	; 0x78
   15b0c:	af00      	add	r7, sp, #0
   15b0e:	60f8      	str	r0, [r7, #12]
   15b10:	60b9      	str	r1, [r7, #8]
   15b12:	1dfb      	adds	r3, r7, #7
   15b14:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   15b16:	2376      	movs	r3, #118	; 0x76
   15b18:	18fb      	adds	r3, r7, r3
   15b1a:	2201      	movs	r2, #1
   15b1c:	801a      	strh	r2, [r3, #0]
   15b1e:	2374      	movs	r3, #116	; 0x74
   15b20:	18fb      	adds	r3, r7, r3
   15b22:	2200      	movs	r2, #0
   15b24:	801a      	strh	r2, [r3, #0]
   15b26:	236e      	movs	r3, #110	; 0x6e
   15b28:	18fb      	adds	r3, r7, r3
   15b2a:	2200      	movs	r2, #0
   15b2c:	801a      	strh	r2, [r3, #0]
   15b2e:	2372      	movs	r3, #114	; 0x72
   15b30:	18fb      	adds	r3, r7, r3
   15b32:	2200      	movs	r2, #0
   15b34:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   15b36:	2324      	movs	r3, #36	; 0x24
   15b38:	18fb      	adds	r3, r7, r3
   15b3a:	0018      	movs	r0, r3
   15b3c:	2341      	movs	r3, #65	; 0x41
   15b3e:	001a      	movs	r2, r3
   15b40:	2100      	movs	r1, #0
   15b42:	4b92      	ldr	r3, [pc, #584]	; (15d8c <rename_to_unique+0x284>)
   15b44:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   15b46:	2318      	movs	r3, #24
   15b48:	18fb      	adds	r3, r7, r3
   15b4a:	0018      	movs	r0, r3
   15b4c:	2309      	movs	r3, #9
   15b4e:	001a      	movs	r2, r3
   15b50:	2100      	movs	r1, #0
   15b52:	4b8e      	ldr	r3, [pc, #568]	; (15d8c <rename_to_unique+0x284>)
   15b54:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   15b56:	2314      	movs	r3, #20
   15b58:	18fb      	adds	r3, r7, r3
   15b5a:	2200      	movs	r2, #0
   15b5c:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   15b5e:	2300      	movs	r3, #0
   15b60:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   15b62:	2371      	movs	r3, #113	; 0x71
   15b64:	18fb      	adds	r3, r7, r3
   15b66:	2200      	movs	r2, #0
   15b68:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   15b6a:	68bb      	ldr	r3, [r7, #8]
   15b6c:	2b00      	cmp	r3, #0
   15b6e:	d101      	bne.n	15b74 <rename_to_unique+0x6c>
        return false;
   15b70:	2300      	movs	r3, #0
   15b72:	e106      	b.n	15d82 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   15b74:	68ba      	ldr	r2, [r7, #8]
   15b76:	68fb      	ldr	r3, [r7, #12]
   15b78:	0011      	movs	r1, r2
   15b7a:	0018      	movs	r0, r3
   15b7c:	4b84      	ldr	r3, [pc, #528]	; (15d90 <rename_to_unique+0x288>)
   15b7e:	4798      	blx	r3
   15b80:	0003      	movs	r3, r0
   15b82:	001a      	movs	r2, r3
   15b84:	2301      	movs	r3, #1
   15b86:	4053      	eors	r3, r2
   15b88:	b2db      	uxtb	r3, r3
   15b8a:	2b00      	cmp	r3, #0
   15b8c:	d001      	beq.n	15b92 <rename_to_unique+0x8a>
        return true;
   15b8e:	2301      	movs	r3, #1
   15b90:	e0f7      	b.n	15d82 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   15b92:	68bb      	ldr	r3, [r7, #8]
   15b94:	0018      	movs	r0, r3
   15b96:	4b7f      	ldr	r3, [pc, #508]	; (15d94 <rename_to_unique+0x28c>)
   15b98:	4798      	blx	r3
   15b9a:	0003      	movs	r3, r0
   15b9c:	2b40      	cmp	r3, #64	; 0x40
   15b9e:	d901      	bls.n	15ba4 <rename_to_unique+0x9c>
        return false;
   15ba0:	2300      	movs	r3, #0
   15ba2:	e0ee      	b.n	15d82 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   15ba4:	68bb      	ldr	r3, [r7, #8]
   15ba6:	212e      	movs	r1, #46	; 0x2e
   15ba8:	0018      	movs	r0, r3
   15baa:	4b7b      	ldr	r3, [pc, #492]	; (15d98 <rename_to_unique+0x290>)
   15bac:	4798      	blx	r3
   15bae:	0003      	movs	r3, r0
   15bb0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   15bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   15bb4:	2b00      	cmp	r3, #0
   15bb6:	d052      	beq.n	15c5e <rename_to_unique+0x156>
        ext_len = strlen(p);
   15bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   15bba:	0018      	movs	r0, r3
   15bbc:	4b75      	ldr	r3, [pc, #468]	; (15d94 <rename_to_unique+0x28c>)
   15bbe:	4798      	blx	r3
   15bc0:	0002      	movs	r2, r0
   15bc2:	236e      	movs	r3, #110	; 0x6e
   15bc4:	18fb      	adds	r3, r7, r3
   15bc6:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   15bc8:	236e      	movs	r3, #110	; 0x6e
   15bca:	18fb      	adds	r3, r7, r3
   15bcc:	881b      	ldrh	r3, [r3, #0]
   15bce:	2b07      	cmp	r3, #7
   15bd0:	d837      	bhi.n	15c42 <rename_to_unique+0x13a>
            valid_ext = true;
   15bd2:	2371      	movs	r3, #113	; 0x71
   15bd4:	18fb      	adds	r3, r7, r3
   15bd6:	2201      	movs	r2, #1
   15bd8:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   15bda:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15bdc:	2318      	movs	r3, #24
   15bde:	18fb      	adds	r3, r7, r3
   15be0:	0011      	movs	r1, r2
   15be2:	0018      	movs	r0, r3
   15be4:	4b6d      	ldr	r3, [pc, #436]	; (15d9c <rename_to_unique+0x294>)
   15be6:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   15be8:	68bb      	ldr	r3, [r7, #8]
   15bea:	0018      	movs	r0, r3
   15bec:	4b69      	ldr	r3, [pc, #420]	; (15d94 <rename_to_unique+0x28c>)
   15bee:	4798      	blx	r3
   15bf0:	0002      	movs	r2, r0
   15bf2:	236e      	movs	r3, #110	; 0x6e
   15bf4:	18fb      	adds	r3, r7, r3
   15bf6:	881b      	ldrh	r3, [r3, #0]
   15bf8:	1ad3      	subs	r3, r2, r3
   15bfa:	2b3c      	cmp	r3, #60	; 0x3c
   15bfc:	d911      	bls.n	15c22 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   15bfe:	2374      	movs	r3, #116	; 0x74
   15c00:	18fb      	adds	r3, r7, r3
   15c02:	226e      	movs	r2, #110	; 0x6e
   15c04:	18ba      	adds	r2, r7, r2
   15c06:	8812      	ldrh	r2, [r2, #0]
   15c08:	213c      	movs	r1, #60	; 0x3c
   15c0a:	1a8a      	subs	r2, r1, r2
   15c0c:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   15c0e:	2374      	movs	r3, #116	; 0x74
   15c10:	18fb      	adds	r3, r7, r3
   15c12:	881a      	ldrh	r2, [r3, #0]
   15c14:	68b9      	ldr	r1, [r7, #8]
   15c16:	2324      	movs	r3, #36	; 0x24
   15c18:	18fb      	adds	r3, r7, r3
   15c1a:	0018      	movs	r0, r3
   15c1c:	4b60      	ldr	r3, [pc, #384]	; (15da0 <rename_to_unique+0x298>)
   15c1e:	4798      	blx	r3
   15c20:	e02a      	b.n	15c78 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   15c22:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15c24:	68bb      	ldr	r3, [r7, #8]
   15c26:	1ad2      	subs	r2, r2, r3
   15c28:	2374      	movs	r3, #116	; 0x74
   15c2a:	18fb      	adds	r3, r7, r3
   15c2c:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   15c2e:	2374      	movs	r3, #116	; 0x74
   15c30:	18fb      	adds	r3, r7, r3
   15c32:	881a      	ldrh	r2, [r3, #0]
   15c34:	68b9      	ldr	r1, [r7, #8]
   15c36:	2324      	movs	r3, #36	; 0x24
   15c38:	18fb      	adds	r3, r7, r3
   15c3a:	0018      	movs	r0, r3
   15c3c:	4b58      	ldr	r3, [pc, #352]	; (15da0 <rename_to_unique+0x298>)
   15c3e:	4798      	blx	r3
   15c40:	e01a      	b.n	15c78 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   15c42:	2374      	movs	r3, #116	; 0x74
   15c44:	18fb      	adds	r3, r7, r3
   15c46:	223c      	movs	r2, #60	; 0x3c
   15c48:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   15c4a:	2374      	movs	r3, #116	; 0x74
   15c4c:	18fb      	adds	r3, r7, r3
   15c4e:	881a      	ldrh	r2, [r3, #0]
   15c50:	68b9      	ldr	r1, [r7, #8]
   15c52:	2324      	movs	r3, #36	; 0x24
   15c54:	18fb      	adds	r3, r7, r3
   15c56:	0018      	movs	r0, r3
   15c58:	4b51      	ldr	r3, [pc, #324]	; (15da0 <rename_to_unique+0x298>)
   15c5a:	4798      	blx	r3
   15c5c:	e00c      	b.n	15c78 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   15c5e:	2374      	movs	r3, #116	; 0x74
   15c60:	18fb      	adds	r3, r7, r3
   15c62:	223c      	movs	r2, #60	; 0x3c
   15c64:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   15c66:	2374      	movs	r3, #116	; 0x74
   15c68:	18fb      	adds	r3, r7, r3
   15c6a:	881a      	ldrh	r2, [r3, #0]
   15c6c:	68b9      	ldr	r1, [r7, #8]
   15c6e:	2324      	movs	r3, #36	; 0x24
   15c70:	18fb      	adds	r3, r7, r3
   15c72:	0018      	movs	r0, r3
   15c74:	4b4a      	ldr	r3, [pc, #296]	; (15da0 <rename_to_unique+0x298>)
   15c76:	4798      	blx	r3
    }

    name[name_len++] = '-';
   15c78:	2374      	movs	r3, #116	; 0x74
   15c7a:	18fb      	adds	r3, r7, r3
   15c7c:	881b      	ldrh	r3, [r3, #0]
   15c7e:	2274      	movs	r2, #116	; 0x74
   15c80:	18ba      	adds	r2, r7, r2
   15c82:	1c59      	adds	r1, r3, #1
   15c84:	8011      	strh	r1, [r2, #0]
   15c86:	001a      	movs	r2, r3
   15c88:	2324      	movs	r3, #36	; 0x24
   15c8a:	18fb      	adds	r3, r7, r3
   15c8c:	212d      	movs	r1, #45	; 0x2d
   15c8e:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   15c90:	2376      	movs	r3, #118	; 0x76
   15c92:	18fb      	adds	r3, r7, r3
   15c94:	2200      	movs	r2, #0
   15c96:	801a      	strh	r2, [r3, #0]
   15c98:	2372      	movs	r3, #114	; 0x72
   15c9a:	18fb      	adds	r3, r7, r3
   15c9c:	2201      	movs	r2, #1
   15c9e:	801a      	strh	r2, [r3, #0]
   15ca0:	e010      	b.n	15cc4 <rename_to_unique+0x1bc>
        count *= 10;
   15ca2:	2372      	movs	r3, #114	; 0x72
   15ca4:	18fa      	adds	r2, r7, r3
   15ca6:	2372      	movs	r3, #114	; 0x72
   15ca8:	18fb      	adds	r3, r7, r3
   15caa:	881b      	ldrh	r3, [r3, #0]
   15cac:	1c19      	adds	r1, r3, #0
   15cae:	0089      	lsls	r1, r1, #2
   15cb0:	18cb      	adds	r3, r1, r3
   15cb2:	18db      	adds	r3, r3, r3
   15cb4:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   15cb6:	2376      	movs	r3, #118	; 0x76
   15cb8:	18fb      	adds	r3, r7, r3
   15cba:	881a      	ldrh	r2, [r3, #0]
   15cbc:	2376      	movs	r3, #118	; 0x76
   15cbe:	18fb      	adds	r3, r7, r3
   15cc0:	3201      	adds	r2, #1
   15cc2:	801a      	strh	r2, [r3, #0]
   15cc4:	2376      	movs	r3, #118	; 0x76
   15cc6:	18fb      	adds	r3, r7, r3
   15cc8:	881b      	ldrh	r3, [r3, #0]
   15cca:	2b02      	cmp	r3, #2
   15ccc:	d9e9      	bls.n	15ca2 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   15cce:	2376      	movs	r3, #118	; 0x76
   15cd0:	18fb      	adds	r3, r7, r3
   15cd2:	2201      	movs	r2, #1
   15cd4:	801a      	strh	r2, [r3, #0]
   15cd6:	e04b      	b.n	15d70 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   15cd8:	2376      	movs	r3, #118	; 0x76
   15cda:	18fb      	adds	r3, r7, r3
   15cdc:	881a      	ldrh	r2, [r3, #0]
   15cde:	4931      	ldr	r1, [pc, #196]	; (15da4 <rename_to_unique+0x29c>)
   15ce0:	2314      	movs	r3, #20
   15ce2:	18fb      	adds	r3, r7, r3
   15ce4:	0018      	movs	r0, r3
   15ce6:	4b30      	ldr	r3, [pc, #192]	; (15da8 <rename_to_unique+0x2a0>)
   15ce8:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   15cea:	2374      	movs	r3, #116	; 0x74
   15cec:	18fb      	adds	r3, r7, r3
   15cee:	881b      	ldrh	r3, [r3, #0]
   15cf0:	2224      	movs	r2, #36	; 0x24
   15cf2:	18ba      	adds	r2, r7, r2
   15cf4:	18d3      	adds	r3, r2, r3
   15cf6:	2214      	movs	r2, #20
   15cf8:	18b9      	adds	r1, r7, r2
   15cfa:	2203      	movs	r2, #3
   15cfc:	0018      	movs	r0, r3
   15cfe:	4b28      	ldr	r3, [pc, #160]	; (15da0 <rename_to_unique+0x298>)
   15d00:	4798      	blx	r3
        if (valid_ext) {
   15d02:	2371      	movs	r3, #113	; 0x71
   15d04:	18fb      	adds	r3, r7, r3
   15d06:	781b      	ldrb	r3, [r3, #0]
   15d08:	2b00      	cmp	r3, #0
   15d0a:	d00c      	beq.n	15d26 <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   15d0c:	2374      	movs	r3, #116	; 0x74
   15d0e:	18fb      	adds	r3, r7, r3
   15d10:	881b      	ldrh	r3, [r3, #0]
   15d12:	3303      	adds	r3, #3
   15d14:	2224      	movs	r2, #36	; 0x24
   15d16:	18ba      	adds	r2, r7, r2
   15d18:	18d3      	adds	r3, r2, r3
   15d1a:	2218      	movs	r2, #24
   15d1c:	18ba      	adds	r2, r7, r2
   15d1e:	0011      	movs	r1, r2
   15d20:	0018      	movs	r0, r3
   15d22:	4b1e      	ldr	r3, [pc, #120]	; (15d9c <rename_to_unique+0x294>)
   15d24:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   15d26:	2324      	movs	r3, #36	; 0x24
   15d28:	18fa      	adds	r2, r7, r3
   15d2a:	68fb      	ldr	r3, [r7, #12]
   15d2c:	0011      	movs	r1, r2
   15d2e:	0018      	movs	r0, r3
   15d30:	4b17      	ldr	r3, [pc, #92]	; (15d90 <rename_to_unique+0x288>)
   15d32:	4798      	blx	r3
   15d34:	0003      	movs	r3, r0
   15d36:	001a      	movs	r2, r3
   15d38:	2301      	movs	r3, #1
   15d3a:	4053      	eors	r3, r2
   15d3c:	b2db      	uxtb	r3, r3
   15d3e:	2b00      	cmp	r3, #0
   15d40:	d00f      	beq.n	15d62 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   15d42:	1dfb      	adds	r3, r7, #7
   15d44:	781a      	ldrb	r2, [r3, #0]
   15d46:	68bb      	ldr	r3, [r7, #8]
   15d48:	2100      	movs	r1, #0
   15d4a:	0018      	movs	r0, r3
   15d4c:	4b0f      	ldr	r3, [pc, #60]	; (15d8c <rename_to_unique+0x284>)
   15d4e:	4798      	blx	r3
            strcpy(file_path_name, name);
   15d50:	2324      	movs	r3, #36	; 0x24
   15d52:	18fa      	adds	r2, r7, r3
   15d54:	68bb      	ldr	r3, [r7, #8]
   15d56:	0011      	movs	r1, r2
   15d58:	0018      	movs	r0, r3
   15d5a:	4b10      	ldr	r3, [pc, #64]	; (15d9c <rename_to_unique+0x294>)
   15d5c:	4798      	blx	r3
            return true;
   15d5e:	2301      	movs	r3, #1
   15d60:	e00f      	b.n	15d82 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   15d62:	2376      	movs	r3, #118	; 0x76
   15d64:	18fb      	adds	r3, r7, r3
   15d66:	881a      	ldrh	r2, [r3, #0]
   15d68:	2376      	movs	r3, #118	; 0x76
   15d6a:	18fb      	adds	r3, r7, r3
   15d6c:	3201      	adds	r2, #1
   15d6e:	801a      	strh	r2, [r3, #0]
   15d70:	2376      	movs	r3, #118	; 0x76
   15d72:	18fa      	adds	r2, r7, r3
   15d74:	2372      	movs	r3, #114	; 0x72
   15d76:	18fb      	adds	r3, r7, r3
   15d78:	8812      	ldrh	r2, [r2, #0]
   15d7a:	881b      	ldrh	r3, [r3, #0]
   15d7c:	429a      	cmp	r2, r3
   15d7e:	d3ab      	bcc.n	15cd8 <rename_to_unique+0x1d0>
        }
    }
    return false;
   15d80:	2300      	movs	r3, #0
}
   15d82:	0018      	movs	r0, r3
   15d84:	46bd      	mov	sp, r7
   15d86:	b01e      	add	sp, #120	; 0x78
   15d88:	bd80      	pop	{r7, pc}
   15d8a:	46c0      	nop			; (mov r8, r8)
   15d8c:	000346df 	.word	0x000346df
   15d90:	00015ab1 	.word	0x00015ab1
   15d94:	00034a97 	.word	0x00034a97
   15d98:	00034af1 	.word	0x00034af1
   15d9c:	00034a4b 	.word	0x00034a4b
   15da0:	00034ac7 	.word	0x00034ac7
   15da4:	000360a0 	.word	0x000360a0
   15da8:	0003499d 	.word	0x0003499d

00015dac <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   15dac:	b590      	push	{r4, r7, lr}
   15dae:	b083      	sub	sp, #12
   15db0:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   15db2:	2001      	movs	r0, #1
   15db4:	4b22      	ldr	r3, [pc, #136]	; (15e40 <start_download+0x94>)
   15db6:	4798      	blx	r3
   15db8:	0003      	movs	r3, r0
   15dba:	001a      	movs	r2, r3
   15dbc:	2301      	movs	r3, #1
   15dbe:	4053      	eors	r3, r2
   15dc0:	b2db      	uxtb	r3, r3
   15dc2:	2b00      	cmp	r3, #0
   15dc4:	d005      	beq.n	15dd2 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   15dc6:	4b1f      	ldr	r3, [pc, #124]	; (15e44 <start_download+0x98>)
   15dc8:	0019      	movs	r1, r3
   15dca:	2001      	movs	r0, #1
   15dcc:	4b1e      	ldr	r3, [pc, #120]	; (15e48 <start_download+0x9c>)
   15dce:	4798      	blx	r3
        return;
   15dd0:	e032      	b.n	15e38 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   15dd2:	2002      	movs	r0, #2
   15dd4:	4b1a      	ldr	r3, [pc, #104]	; (15e40 <start_download+0x94>)
   15dd6:	4798      	blx	r3
   15dd8:	0003      	movs	r3, r0
   15dda:	001a      	movs	r2, r3
   15ddc:	2301      	movs	r3, #1
   15dde:	4053      	eors	r3, r2
   15de0:	b2db      	uxtb	r3, r3
   15de2:	2b00      	cmp	r3, #0
   15de4:	d005      	beq.n	15df2 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   15de6:	4b19      	ldr	r3, [pc, #100]	; (15e4c <start_download+0xa0>)
   15de8:	0019      	movs	r1, r3
   15dea:	2001      	movs	r0, #1
   15dec:	4b16      	ldr	r3, [pc, #88]	; (15e48 <start_download+0x9c>)
   15dee:	4798      	blx	r3
        return;
   15df0:	e022      	b.n	15e38 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   15df2:	2004      	movs	r0, #4
   15df4:	4b12      	ldr	r3, [pc, #72]	; (15e40 <start_download+0x94>)
   15df6:	4798      	blx	r3
   15df8:	1e03      	subs	r3, r0, #0
   15dfa:	d005      	beq.n	15e08 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   15dfc:	4b14      	ldr	r3, [pc, #80]	; (15e50 <start_download+0xa4>)
   15dfe:	0019      	movs	r1, r3
   15e00:	2001      	movs	r0, #1
   15e02:	4b11      	ldr	r3, [pc, #68]	; (15e48 <start_download+0x9c>)
   15e04:	4798      	blx	r3
        return;
   15e06:	e017      	b.n	15e38 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   15e08:	2008      	movs	r0, #8
   15e0a:	4b0d      	ldr	r3, [pc, #52]	; (15e40 <start_download+0x94>)
   15e0c:	4798      	blx	r3
   15e0e:	1e03      	subs	r3, r0, #0
   15e10:	d005      	beq.n	15e1e <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   15e12:	4b10      	ldr	r3, [pc, #64]	; (15e54 <start_download+0xa8>)
   15e14:	0019      	movs	r1, r3
   15e16:	2001      	movs	r0, #1
   15e18:	4b0b      	ldr	r3, [pc, #44]	; (15e48 <start_download+0x9c>)
   15e1a:	4798      	blx	r3
        return;
   15e1c:	e00c      	b.n	15e38 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   15e1e:	4b0e      	ldr	r3, [pc, #56]	; (15e58 <start_download+0xac>)
   15e20:	0019      	movs	r1, r3
   15e22:	2001      	movs	r0, #1
   15e24:	4b08      	ldr	r3, [pc, #32]	; (15e48 <start_download+0x9c>)
   15e26:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   15e28:	490c      	ldr	r1, [pc, #48]	; (15e5c <start_download+0xb0>)
   15e2a:	480d      	ldr	r0, [pc, #52]	; (15e60 <start_download+0xb4>)
   15e2c:	2300      	movs	r3, #0
   15e2e:	9300      	str	r3, [sp, #0]
   15e30:	2300      	movs	r3, #0
   15e32:	2201      	movs	r2, #1
   15e34:	4c0b      	ldr	r4, [pc, #44]	; (15e64 <start_download+0xb8>)
   15e36:	47a0      	blx	r4
}
   15e38:	46bd      	mov	sp, r7
   15e3a:	b001      	add	sp, #4
   15e3c:	bd90      	pop	{r4, r7, pc}
   15e3e:	46c0      	nop			; (mov r8, r8)
   15e40:	00015a85 	.word	0x00015a85
   15e44:	000360a8 	.word	0x000360a8
   15e48:	0001db81 	.word	0x0001db81
   15e4c:	000360d4 	.word	0x000360d4
   15e50:	00036100 	.word	0x00036100
   15e54:	0003612c 	.word	0x0003612c
   15e58:	00036158 	.word	0x00036158
   15e5c:	00036184 	.word	0x00036184
   15e60:	20004760 	.word	0x20004760
   15e64:	00030c81 	.word	0x00030c81

00015e68 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   15e68:	b5b0      	push	{r4, r5, r7, lr}
   15e6a:	b086      	sub	sp, #24
   15e6c:	af00      	add	r7, sp, #0
   15e6e:	6078      	str	r0, [r7, #4]
   15e70:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   15e72:	687b      	ldr	r3, [r7, #4]
   15e74:	2b00      	cmp	r3, #0
   15e76:	d002      	beq.n	15e7e <store_file_packet+0x16>
   15e78:	683b      	ldr	r3, [r7, #0]
   15e7a:	2b00      	cmp	r3, #0
   15e7c:	d105      	bne.n	15e8a <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   15e7e:	4b58      	ldr	r3, [pc, #352]	; (15fe0 <store_file_packet+0x178>)
   15e80:	0019      	movs	r1, r3
   15e82:	2001      	movs	r0, #1
   15e84:	4b57      	ldr	r3, [pc, #348]	; (15fe4 <store_file_packet+0x17c>)
   15e86:	4798      	blx	r3
        return;
   15e88:	e0a6      	b.n	15fd8 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   15e8a:	2008      	movs	r0, #8
   15e8c:	4b56      	ldr	r3, [pc, #344]	; (15fe8 <store_file_packet+0x180>)
   15e8e:	4798      	blx	r3
   15e90:	0003      	movs	r3, r0
   15e92:	001a      	movs	r2, r3
   15e94:	2301      	movs	r3, #1
   15e96:	4053      	eors	r3, r2
   15e98:	b2db      	uxtb	r3, r3
   15e9a:	2b00      	cmp	r3, #0
   15e9c:	d055      	beq.n	15f4a <store_file_packet+0xe2>
        char *cp = NULL;
   15e9e:	2300      	movs	r3, #0
   15ea0:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15ea2:	4b52      	ldr	r3, [pc, #328]	; (15fec <store_file_packet+0x184>)
   15ea4:	2230      	movs	r2, #48	; 0x30
   15ea6:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   15ea8:	4b50      	ldr	r3, [pc, #320]	; (15fec <store_file_packet+0x184>)
   15eaa:	223a      	movs	r2, #58	; 0x3a
   15eac:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   15eae:	4b50      	ldr	r3, [pc, #320]	; (15ff0 <store_file_packet+0x188>)
   15eb0:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   15eb2:	e002      	b.n	15eba <store_file_packet+0x52>
            cp--;
   15eb4:	697b      	ldr	r3, [r7, #20]
   15eb6:	3b01      	subs	r3, #1
   15eb8:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   15eba:	697b      	ldr	r3, [r7, #20]
   15ebc:	781b      	ldrb	r3, [r3, #0]
   15ebe:	2b2f      	cmp	r3, #47	; 0x2f
   15ec0:	d1f8      	bne.n	15eb4 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   15ec2:	697b      	ldr	r3, [r7, #20]
   15ec4:	0018      	movs	r0, r3
   15ec6:	4b4b      	ldr	r3, [pc, #300]	; (15ff4 <store_file_packet+0x18c>)
   15ec8:	4798      	blx	r3
   15eca:	0003      	movs	r3, r0
   15ecc:	2b01      	cmp	r3, #1
   15ece:	d924      	bls.n	15f1a <store_file_packet+0xb2>
            cp++;
   15ed0:	697b      	ldr	r3, [r7, #20]
   15ed2:	3301      	adds	r3, #1
   15ed4:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   15ed6:	697a      	ldr	r2, [r7, #20]
   15ed8:	4b47      	ldr	r3, [pc, #284]	; (15ff8 <store_file_packet+0x190>)
   15eda:	0011      	movs	r1, r2
   15edc:	0018      	movs	r0, r3
   15ede:	4b47      	ldr	r3, [pc, #284]	; (15ffc <store_file_packet+0x194>)
   15ee0:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   15ee2:	4942      	ldr	r1, [pc, #264]	; (15fec <store_file_packet+0x184>)
   15ee4:	4b46      	ldr	r3, [pc, #280]	; (16000 <store_file_packet+0x198>)
   15ee6:	2240      	movs	r2, #64	; 0x40
   15ee8:	0018      	movs	r0, r3
   15eea:	4b46      	ldr	r3, [pc, #280]	; (16004 <store_file_packet+0x19c>)
   15eec:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   15eee:	4a3f      	ldr	r2, [pc, #252]	; (15fec <store_file_packet+0x184>)
   15ef0:	4b45      	ldr	r3, [pc, #276]	; (16008 <store_file_packet+0x1a0>)
   15ef2:	0019      	movs	r1, r3
   15ef4:	2001      	movs	r0, #1
   15ef6:	4b3b      	ldr	r3, [pc, #236]	; (15fe4 <store_file_packet+0x17c>)
   15ef8:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   15efa:	2313      	movs	r3, #19
   15efc:	18fc      	adds	r4, r7, r3
   15efe:	493b      	ldr	r1, [pc, #236]	; (15fec <store_file_packet+0x184>)
   15f00:	4b3f      	ldr	r3, [pc, #252]	; (16000 <store_file_packet+0x198>)
   15f02:	220a      	movs	r2, #10
   15f04:	0018      	movs	r0, r3
   15f06:	4b41      	ldr	r3, [pc, #260]	; (1600c <store_file_packet+0x1a4>)
   15f08:	4798      	blx	r3
   15f0a:	0003      	movs	r3, r0
   15f0c:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   15f0e:	2313      	movs	r3, #19
   15f10:	18fb      	adds	r3, r7, r3
   15f12:	781b      	ldrb	r3, [r3, #0]
   15f14:	2b00      	cmp	r3, #0
   15f16:	d012      	beq.n	15f3e <store_file_packet+0xd6>
   15f18:	e008      	b.n	15f2c <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   15f1a:	4b3d      	ldr	r3, [pc, #244]	; (16010 <store_file_packet+0x1a8>)
   15f1c:	0019      	movs	r1, r3
   15f1e:	2001      	movs	r0, #1
   15f20:	4b30      	ldr	r3, [pc, #192]	; (15fe4 <store_file_packet+0x17c>)
   15f22:	4798      	blx	r3
            add_state(CANCELED);
   15f24:	2020      	movs	r0, #32
   15f26:	4b3b      	ldr	r3, [pc, #236]	; (16014 <store_file_packet+0x1ac>)
   15f28:	4798      	blx	r3
            return;
   15f2a:	e055      	b.n	15fd8 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   15f2c:	2313      	movs	r3, #19
   15f2e:	18fb      	adds	r3, r7, r3
   15f30:	781a      	ldrb	r2, [r3, #0]
   15f32:	4b39      	ldr	r3, [pc, #228]	; (16018 <store_file_packet+0x1b0>)
   15f34:	0019      	movs	r1, r3
   15f36:	2001      	movs	r0, #1
   15f38:	4b2a      	ldr	r3, [pc, #168]	; (15fe4 <store_file_packet+0x17c>)
   15f3a:	4798      	blx	r3
            return;
   15f3c:	e04c      	b.n	15fd8 <store_file_packet+0x170>
        }

        received_file_size = 0;
   15f3e:	4b37      	ldr	r3, [pc, #220]	; (1601c <store_file_packet+0x1b4>)
   15f40:	2200      	movs	r2, #0
   15f42:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   15f44:	2008      	movs	r0, #8
   15f46:	4b33      	ldr	r3, [pc, #204]	; (16014 <store_file_packet+0x1ac>)
   15f48:	4798      	blx	r3
    }

    if (data != NULL) {
   15f4a:	687b      	ldr	r3, [r7, #4]
   15f4c:	2b00      	cmp	r3, #0
   15f4e:	d043      	beq.n	15fd8 <store_file_packet+0x170>
        UINT wsize = 0;
   15f50:	2300      	movs	r3, #0
   15f52:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   15f54:	2313      	movs	r3, #19
   15f56:	18fc      	adds	r4, r7, r3
   15f58:	230c      	movs	r3, #12
   15f5a:	18fb      	adds	r3, r7, r3
   15f5c:	683a      	ldr	r2, [r7, #0]
   15f5e:	6879      	ldr	r1, [r7, #4]
   15f60:	4827      	ldr	r0, [pc, #156]	; (16000 <store_file_packet+0x198>)
   15f62:	4d2f      	ldr	r5, [pc, #188]	; (16020 <store_file_packet+0x1b8>)
   15f64:	47a8      	blx	r5
   15f66:	0003      	movs	r3, r0
   15f68:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   15f6a:	2313      	movs	r3, #19
   15f6c:	18fb      	adds	r3, r7, r3
   15f6e:	781b      	ldrb	r3, [r3, #0]
   15f70:	2b00      	cmp	r3, #0
   15f72:	d00c      	beq.n	15f8e <store_file_packet+0x126>
            f_close(&file_object);
   15f74:	4b22      	ldr	r3, [pc, #136]	; (16000 <store_file_packet+0x198>)
   15f76:	0018      	movs	r0, r3
   15f78:	4b2a      	ldr	r3, [pc, #168]	; (16024 <store_file_packet+0x1bc>)
   15f7a:	4798      	blx	r3
            add_state(CANCELED);
   15f7c:	2020      	movs	r0, #32
   15f7e:	4b25      	ldr	r3, [pc, #148]	; (16014 <store_file_packet+0x1ac>)
   15f80:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   15f82:	4b29      	ldr	r3, [pc, #164]	; (16028 <store_file_packet+0x1c0>)
   15f84:	0019      	movs	r1, r3
   15f86:	2001      	movs	r0, #1
   15f88:	4b16      	ldr	r3, [pc, #88]	; (15fe4 <store_file_packet+0x17c>)
   15f8a:	4798      	blx	r3
            return;
   15f8c:	e024      	b.n	15fd8 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   15f8e:	4b23      	ldr	r3, [pc, #140]	; (1601c <store_file_packet+0x1b4>)
   15f90:	681a      	ldr	r2, [r3, #0]
   15f92:	68fb      	ldr	r3, [r7, #12]
   15f94:	18d2      	adds	r2, r2, r3
   15f96:	4b21      	ldr	r3, [pc, #132]	; (1601c <store_file_packet+0x1b4>)
   15f98:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   15f9a:	4b20      	ldr	r3, [pc, #128]	; (1601c <store_file_packet+0x1b4>)
   15f9c:	681a      	ldr	r2, [r3, #0]
   15f9e:	4b23      	ldr	r3, [pc, #140]	; (1602c <store_file_packet+0x1c4>)
   15fa0:	681b      	ldr	r3, [r3, #0]
   15fa2:	4923      	ldr	r1, [pc, #140]	; (16030 <store_file_packet+0x1c8>)
   15fa4:	2001      	movs	r0, #1
   15fa6:	4c0f      	ldr	r4, [pc, #60]	; (15fe4 <store_file_packet+0x17c>)
   15fa8:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   15faa:	4b1c      	ldr	r3, [pc, #112]	; (1601c <store_file_packet+0x1b4>)
   15fac:	681a      	ldr	r2, [r3, #0]
   15fae:	4b1f      	ldr	r3, [pc, #124]	; (1602c <store_file_packet+0x1c4>)
   15fb0:	681b      	ldr	r3, [r3, #0]
   15fb2:	429a      	cmp	r2, r3
   15fb4:	d310      	bcc.n	15fd8 <store_file_packet+0x170>
            f_close(&file_object);
   15fb6:	4b12      	ldr	r3, [pc, #72]	; (16000 <store_file_packet+0x198>)
   15fb8:	0018      	movs	r0, r3
   15fba:	4b1a      	ldr	r3, [pc, #104]	; (16024 <store_file_packet+0x1bc>)
   15fbc:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   15fbe:	4b1d      	ldr	r3, [pc, #116]	; (16034 <store_file_packet+0x1cc>)
   15fc0:	0019      	movs	r1, r3
   15fc2:	2001      	movs	r0, #1
   15fc4:	4b07      	ldr	r3, [pc, #28]	; (15fe4 <store_file_packet+0x17c>)
   15fc6:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   15fc8:	2100      	movs	r1, #0
   15fca:	2017      	movs	r0, #23
   15fcc:	4b1a      	ldr	r3, [pc, #104]	; (16038 <store_file_packet+0x1d0>)
   15fce:	4798      	blx	r3
            add_state(COMPLETED);
   15fd0:	2010      	movs	r0, #16
   15fd2:	4b10      	ldr	r3, [pc, #64]	; (16014 <store_file_packet+0x1ac>)
   15fd4:	4798      	blx	r3
            return;
   15fd6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   15fd8:	46bd      	mov	sp, r7
   15fda:	b006      	add	sp, #24
   15fdc:	bdb0      	pop	{r4, r5, r7, pc}
   15fde:	46c0      	nop			; (mov r8, r8)
   15fe0:	000361b0 	.word	0x000361b0
   15fe4:	0001db81 	.word	0x0001db81
   15fe8:	00015a85 	.word	0x00015a85
   15fec:	200000d4 	.word	0x200000d4
   15ff0:	000361ae 	.word	0x000361ae
   15ff4:	00034a97 	.word	0x00034a97
   15ff8:	200000d6 	.word	0x200000d6
   15ffc:	00034a4b 	.word	0x00034a4b
   16000:	20000710 	.word	0x20000710
   16004:	00015b09 	.word	0x00015b09
   16008:	00036214 	.word	0x00036214
   1600c:	0002d62d 	.word	0x0002d62d
   16010:	000361d4 	.word	0x000361d4
   16014:	00015a5d 	.word	0x00015a5d
   16018:	0003623c 	.word	0x0003623c
   1601c:	20000738 	.word	0x20000738
   16020:	0002db5d 	.word	0x0002db5d
   16024:	0002e02d 	.word	0x0002e02d
   16028:	00036270 	.word	0x00036270
   1602c:	20000734 	.word	0x20000734
   16030:	000362ac 	.word	0x000362ac
   16034:	000362e0 	.word	0x000362e0
   16038:	000159c1 	.word	0x000159c1

0001603c <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   1603c:	b590      	push	{r4, r7, lr}
   1603e:	b085      	sub	sp, #20
   16040:	af00      	add	r7, sp, #0
   16042:	60f8      	str	r0, [r7, #12]
   16044:	60b9      	str	r1, [r7, #8]
   16046:	607a      	str	r2, [r7, #4]
    switch (type) {
   16048:	68bb      	ldr	r3, [r7, #8]
   1604a:	2b04      	cmp	r3, #4
   1604c:	d900      	bls.n	16050 <http_client_callback+0x14>
   1604e:	e077      	b.n	16140 <http_client_callback+0x104>
   16050:	68bb      	ldr	r3, [r7, #8]
   16052:	009a      	lsls	r2, r3, #2
   16054:	4b3c      	ldr	r3, [pc, #240]	; (16148 <http_client_callback+0x10c>)
   16056:	18d3      	adds	r3, r2, r3
   16058:	681b      	ldr	r3, [r3, #0]
   1605a:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   1605c:	4b3b      	ldr	r3, [pc, #236]	; (1614c <http_client_callback+0x110>)
   1605e:	0019      	movs	r1, r3
   16060:	2001      	movs	r0, #1
   16062:	4b3b      	ldr	r3, [pc, #236]	; (16150 <http_client_callback+0x114>)
   16064:	4798      	blx	r3
            break;
   16066:	e06b      	b.n	16140 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   16068:	4b3a      	ldr	r3, [pc, #232]	; (16154 <http_client_callback+0x118>)
   1606a:	0019      	movs	r1, r3
   1606c:	2001      	movs	r0, #1
   1606e:	4b38      	ldr	r3, [pc, #224]	; (16150 <http_client_callback+0x114>)
   16070:	4798      	blx	r3
            add_state(GET_REQUESTED);
   16072:	2004      	movs	r0, #4
   16074:	4b38      	ldr	r3, [pc, #224]	; (16158 <http_client_callback+0x11c>)
   16076:	4798      	blx	r3
            break;
   16078:	e062      	b.n	16140 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   1607a:	687b      	ldr	r3, [r7, #4]
   1607c:	881b      	ldrh	r3, [r3, #0]
   1607e:	001a      	movs	r2, r3
   16080:	687b      	ldr	r3, [r7, #4]
   16082:	685b      	ldr	r3, [r3, #4]
   16084:	4935      	ldr	r1, [pc, #212]	; (1615c <http_client_callback+0x120>)
   16086:	2001      	movs	r0, #1
   16088:	4c31      	ldr	r4, [pc, #196]	; (16150 <http_client_callback+0x114>)
   1608a:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   1608c:	687b      	ldr	r3, [r7, #4]
   1608e:	881b      	ldrh	r3, [r3, #0]
   16090:	2bc8      	cmp	r3, #200	; 0xc8
   16092:	d10d      	bne.n	160b0 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   16094:	687b      	ldr	r3, [r7, #4]
   16096:	685a      	ldr	r2, [r3, #4]
   16098:	4b31      	ldr	r3, [pc, #196]	; (16160 <http_client_callback+0x124>)
   1609a:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   1609c:	4b31      	ldr	r3, [pc, #196]	; (16164 <http_client_callback+0x128>)
   1609e:	2200      	movs	r2, #0
   160a0:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   160a2:	687b      	ldr	r3, [r7, #4]
   160a4:	685a      	ldr	r2, [r3, #4]
   160a6:	2380      	movs	r3, #128	; 0x80
   160a8:	009b      	lsls	r3, r3, #2
   160aa:	429a      	cmp	r2, r3
   160ac:	d843      	bhi.n	16136 <http_client_callback+0xfa>
   160ae:	e003      	b.n	160b8 <http_client_callback+0x7c>
                add_state(CANCELED);
   160b0:	2020      	movs	r0, #32
   160b2:	4b29      	ldr	r3, [pc, #164]	; (16158 <http_client_callback+0x11c>)
   160b4:	4798      	blx	r3
                return;
   160b6:	e043      	b.n	16140 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   160b8:	687b      	ldr	r3, [r7, #4]
   160ba:	689a      	ldr	r2, [r3, #8]
   160bc:	687b      	ldr	r3, [r7, #4]
   160be:	685b      	ldr	r3, [r3, #4]
   160c0:	0019      	movs	r1, r3
   160c2:	0010      	movs	r0, r2
   160c4:	4b28      	ldr	r3, [pc, #160]	; (16168 <http_client_callback+0x12c>)
   160c6:	4798      	blx	r3
                add_state(COMPLETED);
   160c8:	2010      	movs	r0, #16
   160ca:	4b23      	ldr	r3, [pc, #140]	; (16158 <http_client_callback+0x11c>)
   160cc:	4798      	blx	r3
            }
            break;
   160ce:	e032      	b.n	16136 <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   160d0:	687b      	ldr	r3, [r7, #4]
   160d2:	685a      	ldr	r2, [r3, #4]
   160d4:	687b      	ldr	r3, [r7, #4]
   160d6:	681b      	ldr	r3, [r3, #0]
   160d8:	0019      	movs	r1, r3
   160da:	0010      	movs	r0, r2
   160dc:	4b22      	ldr	r3, [pc, #136]	; (16168 <http_client_callback+0x12c>)
   160de:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   160e0:	687b      	ldr	r3, [r7, #4]
   160e2:	7a1b      	ldrb	r3, [r3, #8]
   160e4:	2b00      	cmp	r3, #0
   160e6:	d028      	beq.n	1613a <http_client_callback+0xfe>
                add_state(COMPLETED);
   160e8:	2010      	movs	r0, #16
   160ea:	4b1b      	ldr	r3, [pc, #108]	; (16158 <http_client_callback+0x11c>)
   160ec:	4798      	blx	r3
            }

            break;
   160ee:	e024      	b.n	1613a <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   160f0:	687b      	ldr	r3, [r7, #4]
   160f2:	681a      	ldr	r2, [r3, #0]
   160f4:	4b1d      	ldr	r3, [pc, #116]	; (1616c <http_client_callback+0x130>)
   160f6:	0019      	movs	r1, r3
   160f8:	2001      	movs	r0, #1
   160fa:	4b15      	ldr	r3, [pc, #84]	; (16150 <http_client_callback+0x114>)
   160fc:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   160fe:	687b      	ldr	r3, [r7, #4]
   16100:	681b      	ldr	r3, [r3, #0]
   16102:	330b      	adds	r3, #11
   16104:	d11b      	bne.n	1613e <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   16106:	2008      	movs	r0, #8
   16108:	4b19      	ldr	r3, [pc, #100]	; (16170 <http_client_callback+0x134>)
   1610a:	4798      	blx	r3
   1610c:	1e03      	subs	r3, r0, #0
   1610e:	d006      	beq.n	1611e <http_client_callback+0xe2>
                    f_close(&file_object);
   16110:	4b18      	ldr	r3, [pc, #96]	; (16174 <http_client_callback+0x138>)
   16112:	0018      	movs	r0, r3
   16114:	4b18      	ldr	r3, [pc, #96]	; (16178 <http_client_callback+0x13c>)
   16116:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   16118:	2008      	movs	r0, #8
   1611a:	4b18      	ldr	r3, [pc, #96]	; (1617c <http_client_callback+0x140>)
   1611c:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   1611e:	2004      	movs	r0, #4
   16120:	4b13      	ldr	r3, [pc, #76]	; (16170 <http_client_callback+0x134>)
   16122:	4798      	blx	r3
   16124:	1e03      	subs	r3, r0, #0
   16126:	d002      	beq.n	1612e <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   16128:	2004      	movs	r0, #4
   1612a:	4b14      	ldr	r3, [pc, #80]	; (1617c <http_client_callback+0x140>)
   1612c:	4798      	blx	r3
                }

                start_download();
   1612e:	4b14      	ldr	r3, [pc, #80]	; (16180 <http_client_callback+0x144>)
   16130:	4798      	blx	r3
            }

            break;
   16132:	46c0      	nop			; (mov r8, r8)
   16134:	e003      	b.n	1613e <http_client_callback+0x102>
            break;
   16136:	46c0      	nop			; (mov r8, r8)
   16138:	e002      	b.n	16140 <http_client_callback+0x104>
            break;
   1613a:	46c0      	nop			; (mov r8, r8)
   1613c:	e000      	b.n	16140 <http_client_callback+0x104>
            break;
   1613e:	46c0      	nop			; (mov r8, r8)
    }
}
   16140:	46bd      	mov	sp, r7
   16142:	b005      	add	sp, #20
   16144:	bd90      	pop	{r4, r7, pc}
   16146:	46c0      	nop			; (mov r8, r8)
   16148:	00036a34 	.word	0x00036a34
   1614c:	00036314 	.word	0x00036314
   16150:	0001db81 	.word	0x0001db81
   16154:	0003634c 	.word	0x0003634c
   16158:	00015a5d 	.word	0x00015a5d
   1615c:	00036378 	.word	0x00036378
   16160:	20000734 	.word	0x20000734
   16164:	20000738 	.word	0x20000738
   16168:	00015e69 	.word	0x00015e69
   1616c:	000363b4 	.word	0x000363b4
   16170:	00015a85 	.word	0x00015a85
   16174:	20000710 	.word	0x20000710
   16178:	0002e02d 	.word	0x0002e02d
   1617c:	00015a29 	.word	0x00015a29
   16180:	00015dad 	.word	0x00015dad

00016184 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   16184:	b580      	push	{r7, lr}
   16186:	b082      	sub	sp, #8
   16188:	af00      	add	r7, sp, #0
   1618a:	603a      	str	r2, [r7, #0]
   1618c:	1dfb      	adds	r3, r7, #7
   1618e:	1c02      	adds	r2, r0, #0
   16190:	701a      	strb	r2, [r3, #0]
   16192:	1dbb      	adds	r3, r7, #6
   16194:	1c0a      	adds	r2, r1, #0
   16196:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   16198:	683a      	ldr	r2, [r7, #0]
   1619a:	1dbb      	adds	r3, r7, #6
   1619c:	7819      	ldrb	r1, [r3, #0]
   1619e:	1dfb      	adds	r3, r7, #7
   161a0:	781b      	ldrb	r3, [r3, #0]
   161a2:	b25b      	sxtb	r3, r3
   161a4:	0018      	movs	r0, r3
   161a6:	4b03      	ldr	r3, [pc, #12]	; (161b4 <socket_cb+0x30>)
   161a8:	4798      	blx	r3
}
   161aa:	46c0      	nop			; (mov r8, r8)
   161ac:	46bd      	mov	sp, r7
   161ae:	b002      	add	sp, #8
   161b0:	bd80      	pop	{r7, pc}
   161b2:	46c0      	nop			; (mov r8, r8)
   161b4:	00030991 	.word	0x00030991

000161b8 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   161b8:	b5b0      	push	{r4, r5, r7, lr}
   161ba:	b086      	sub	sp, #24
   161bc:	af04      	add	r7, sp, #16
   161be:	6078      	str	r0, [r7, #4]
   161c0:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   161c2:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   161c4:	22ff      	movs	r2, #255	; 0xff
   161c6:	4013      	ands	r3, r2
   161c8:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   161ca:	683b      	ldr	r3, [r7, #0]
   161cc:	0a1b      	lsrs	r3, r3, #8
   161ce:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   161d0:	23ff      	movs	r3, #255	; 0xff
   161d2:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   161d4:	683a      	ldr	r2, [r7, #0]
   161d6:	0c12      	lsrs	r2, r2, #16
   161d8:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   161da:	22ff      	movs	r2, #255	; 0xff
   161dc:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   161de:	6839      	ldr	r1, [r7, #0]
   161e0:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   161e2:	000d      	movs	r5, r1
   161e4:	6878      	ldr	r0, [r7, #4]
   161e6:	4909      	ldr	r1, [pc, #36]	; (1620c <resolve_cb+0x54>)
   161e8:	9502      	str	r5, [sp, #8]
   161ea:	9201      	str	r2, [sp, #4]
   161ec:	9300      	str	r3, [sp, #0]
   161ee:	0023      	movs	r3, r4
   161f0:	0002      	movs	r2, r0
   161f2:	2001      	movs	r0, #1
   161f4:	4c06      	ldr	r4, [pc, #24]	; (16210 <resolve_cb+0x58>)
   161f6:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   161f8:	683a      	ldr	r2, [r7, #0]
   161fa:	687b      	ldr	r3, [r7, #4]
   161fc:	0011      	movs	r1, r2
   161fe:	0018      	movs	r0, r3
   16200:	4b04      	ldr	r3, [pc, #16]	; (16214 <resolve_cb+0x5c>)
   16202:	4798      	blx	r3
}
   16204:	46c0      	nop			; (mov r8, r8)
   16206:	46bd      	mov	sp, r7
   16208:	b002      	add	sp, #8
   1620a:	bdb0      	pop	{r4, r5, r7, pc}
   1620c:	000363e4 	.word	0x000363e4
   16210:	0001db81 	.word	0x0001db81
   16214:	00030af5 	.word	0x00030af5

00016218 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   16218:	b590      	push	{r4, r7, lr}
   1621a:	b087      	sub	sp, #28
   1621c:	af02      	add	r7, sp, #8
   1621e:	0002      	movs	r2, r0
   16220:	6039      	str	r1, [r7, #0]
   16222:	1dfb      	adds	r3, r7, #7
   16224:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   16226:	1dfb      	adds	r3, r7, #7
   16228:	781b      	ldrb	r3, [r3, #0]
   1622a:	2b2c      	cmp	r3, #44	; 0x2c
   1622c:	d002      	beq.n	16234 <wifi_cb+0x1c>
   1622e:	2b32      	cmp	r3, #50	; 0x32
   16230:	d03d      	beq.n	162ae <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   16232:	e06f      	b.n	16314 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   16234:	683b      	ldr	r3, [r7, #0]
   16236:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16238:	68fb      	ldr	r3, [r7, #12]
   1623a:	781b      	ldrb	r3, [r3, #0]
   1623c:	2b01      	cmp	r3, #1
   1623e:	d107      	bne.n	16250 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   16240:	4b36      	ldr	r3, [pc, #216]	; (1631c <wifi_cb+0x104>)
   16242:	0019      	movs	r1, r3
   16244:	2001      	movs	r0, #1
   16246:	4b36      	ldr	r3, [pc, #216]	; (16320 <wifi_cb+0x108>)
   16248:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   1624a:	4b36      	ldr	r3, [pc, #216]	; (16324 <wifi_cb+0x10c>)
   1624c:	4798      	blx	r3
            break;
   1624e:	e05e      	b.n	1630e <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   16250:	68fb      	ldr	r3, [r7, #12]
   16252:	781b      	ldrb	r3, [r3, #0]
   16254:	2b00      	cmp	r3, #0
   16256:	d15a      	bne.n	1630e <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   16258:	4b33      	ldr	r3, [pc, #204]	; (16328 <wifi_cb+0x110>)
   1625a:	0019      	movs	r1, r3
   1625c:	2001      	movs	r0, #1
   1625e:	4b30      	ldr	r3, [pc, #192]	; (16320 <wifi_cb+0x108>)
   16260:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   16262:	2002      	movs	r0, #2
   16264:	4b31      	ldr	r3, [pc, #196]	; (1632c <wifi_cb+0x114>)
   16266:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   16268:	2008      	movs	r0, #8
   1626a:	4b31      	ldr	r3, [pc, #196]	; (16330 <wifi_cb+0x118>)
   1626c:	4798      	blx	r3
   1626e:	1e03      	subs	r3, r0, #0
   16270:	d006      	beq.n	16280 <wifi_cb+0x68>
                    f_close(&file_object);
   16272:	4b30      	ldr	r3, [pc, #192]	; (16334 <wifi_cb+0x11c>)
   16274:	0018      	movs	r0, r3
   16276:	4b30      	ldr	r3, [pc, #192]	; (16338 <wifi_cb+0x120>)
   16278:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1627a:	2008      	movs	r0, #8
   1627c:	4b2b      	ldr	r3, [pc, #172]	; (1632c <wifi_cb+0x114>)
   1627e:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   16280:	2004      	movs	r0, #4
   16282:	4b2b      	ldr	r3, [pc, #172]	; (16330 <wifi_cb+0x118>)
   16284:	4798      	blx	r3
   16286:	1e03      	subs	r3, r0, #0
   16288:	d002      	beq.n	16290 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   1628a:	2004      	movs	r0, #4
   1628c:	4b27      	ldr	r3, [pc, #156]	; (1632c <wifi_cb+0x114>)
   1628e:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   16290:	4b2a      	ldr	r3, [pc, #168]	; (1633c <wifi_cb+0x124>)
   16292:	2101      	movs	r1, #1
   16294:	0018      	movs	r0, r3
   16296:	4b2a      	ldr	r3, [pc, #168]	; (16340 <wifi_cb+0x128>)
   16298:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   1629a:	4a2a      	ldr	r2, [pc, #168]	; (16344 <wifi_cb+0x12c>)
   1629c:	482a      	ldr	r0, [pc, #168]	; (16348 <wifi_cb+0x130>)
   1629e:	23ff      	movs	r3, #255	; 0xff
   162a0:	9300      	str	r3, [sp, #0]
   162a2:	0013      	movs	r3, r2
   162a4:	2202      	movs	r2, #2
   162a6:	210b      	movs	r1, #11
   162a8:	4c28      	ldr	r4, [pc, #160]	; (1634c <wifi_cb+0x134>)
   162aa:	47a0      	blx	r4
            break;
   162ac:	e02f      	b.n	1630e <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   162ae:	683b      	ldr	r3, [r7, #0]
   162b0:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   162b2:	68bb      	ldr	r3, [r7, #8]
   162b4:	781b      	ldrb	r3, [r3, #0]
   162b6:	0018      	movs	r0, r3
   162b8:	68bb      	ldr	r3, [r7, #8]
   162ba:	3301      	adds	r3, #1
   162bc:	781b      	ldrb	r3, [r3, #0]
   162be:	001c      	movs	r4, r3
   162c0:	68bb      	ldr	r3, [r7, #8]
   162c2:	3302      	adds	r3, #2
   162c4:	781b      	ldrb	r3, [r3, #0]
   162c6:	001a      	movs	r2, r3
   162c8:	68bb      	ldr	r3, [r7, #8]
   162ca:	3303      	adds	r3, #3
   162cc:	781b      	ldrb	r3, [r3, #0]
   162ce:	4920      	ldr	r1, [pc, #128]	; (16350 <wifi_cb+0x138>)
   162d0:	9301      	str	r3, [sp, #4]
   162d2:	9200      	str	r2, [sp, #0]
   162d4:	0023      	movs	r3, r4
   162d6:	0002      	movs	r2, r0
   162d8:	2001      	movs	r0, #1
   162da:	4c11      	ldr	r4, [pc, #68]	; (16320 <wifi_cb+0x108>)
   162dc:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   162de:	2002      	movs	r0, #2
   162e0:	4b1c      	ldr	r3, [pc, #112]	; (16354 <wifi_cb+0x13c>)
   162e2:	4798      	blx	r3
            if (do_download_flag == 1) {
   162e4:	4b1c      	ldr	r3, [pc, #112]	; (16358 <wifi_cb+0x140>)
   162e6:	781b      	ldrb	r3, [r3, #0]
   162e8:	2b01      	cmp	r3, #1
   162ea:	d102      	bne.n	162f2 <wifi_cb+0xda>
                start_download();
   162ec:	4b1b      	ldr	r3, [pc, #108]	; (1635c <wifi_cb+0x144>)
   162ee:	4798      	blx	r3
        } break;
   162f0:	e00f      	b.n	16312 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   162f2:	4a1b      	ldr	r2, [pc, #108]	; (16360 <wifi_cb+0x148>)
   162f4:	4b11      	ldr	r3, [pc, #68]	; (1633c <wifi_cb+0x124>)
   162f6:	0011      	movs	r1, r2
   162f8:	0018      	movs	r0, r3
   162fa:	4b1a      	ldr	r3, [pc, #104]	; (16364 <wifi_cb+0x14c>)
   162fc:	4798      	blx	r3
   162fe:	1e03      	subs	r3, r0, #0
   16300:	d007      	beq.n	16312 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16302:	4b19      	ldr	r3, [pc, #100]	; (16368 <wifi_cb+0x150>)
   16304:	0019      	movs	r1, r3
   16306:	2001      	movs	r0, #1
   16308:	4b05      	ldr	r3, [pc, #20]	; (16320 <wifi_cb+0x108>)
   1630a:	4798      	blx	r3
        } break;
   1630c:	e001      	b.n	16312 <wifi_cb+0xfa>
            break;
   1630e:	46c0      	nop			; (mov r8, r8)
   16310:	e000      	b.n	16314 <wifi_cb+0xfc>
        } break;
   16312:	46c0      	nop			; (mov r8, r8)
    }
}
   16314:	46c0      	nop			; (mov r8, r8)
   16316:	46bd      	mov	sp, r7
   16318:	b005      	add	sp, #20
   1631a:	bd90      	pop	{r4, r7, pc}
   1631c:	00036414 	.word	0x00036414
   16320:	0001db81 	.word	0x0001db81
   16324:	00022161 	.word	0x00022161
   16328:	00036434 	.word	0x00036434
   1632c:	00015a29 	.word	0x00015a29
   16330:	00015a85 	.word	0x00015a85
   16334:	20000710 	.word	0x20000710
   16338:	0002e02d 	.word	0x0002e02d
   1633c:	2000073c 	.word	0x2000073c
   16340:	0002f63d 	.word	0x0002f63d
   16344:	00036458 	.word	0x00036458
   16348:	00036464 	.word	0x00036464
   1634c:	00021c8d 	.word	0x00021c8d
   16350:	00036470 	.word	0x00036470
   16354:	00015a5d 	.word	0x00015a5d
   16358:	200004dc 	.word	0x200004dc
   1635c:	00015dad 	.word	0x00015dad
   16360:	0003608c 	.word	0x0003608c
   16364:	0002f509 	.word	0x0002f509
   16368:	00036498 	.word	0x00036498

0001636c <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   1636c:	b590      	push	{r4, r7, lr}
   1636e:	b083      	sub	sp, #12
   16370:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   16372:	4b29      	ldr	r3, [pc, #164]	; (16418 <init_storage+0xac>)
   16374:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   16376:	4b29      	ldr	r3, [pc, #164]	; (1641c <init_storage+0xb0>)
   16378:	0019      	movs	r1, r3
   1637a:	2001      	movs	r0, #1
   1637c:	4b28      	ldr	r3, [pc, #160]	; (16420 <init_storage+0xb4>)
   1637e:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   16380:	1dfc      	adds	r4, r7, #7
   16382:	2000      	movs	r0, #0
   16384:	4b27      	ldr	r3, [pc, #156]	; (16424 <init_storage+0xb8>)
   16386:	4798      	blx	r3
   16388:	0003      	movs	r3, r0
   1638a:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   1638c:	1dfb      	adds	r3, r7, #7
   1638e:	781b      	ldrb	r3, [r3, #0]
   16390:	2b01      	cmp	r3, #1
   16392:	d110      	bne.n	163b6 <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   16394:	4b24      	ldr	r3, [pc, #144]	; (16428 <init_storage+0xbc>)
   16396:	0019      	movs	r1, r3
   16398:	2001      	movs	r0, #1
   1639a:	4b21      	ldr	r3, [pc, #132]	; (16420 <init_storage+0xb4>)
   1639c:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   1639e:	4b23      	ldr	r3, [pc, #140]	; (1642c <init_storage+0xc0>)
   163a0:	0019      	movs	r1, r3
   163a2:	2001      	movs	r0, #1
   163a4:	4b1e      	ldr	r3, [pc, #120]	; (16420 <init_storage+0xb4>)
   163a6:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   163a8:	46c0      	nop			; (mov r8, r8)
   163aa:	2000      	movs	r0, #0
   163ac:	4b20      	ldr	r3, [pc, #128]	; (16430 <init_storage+0xc4>)
   163ae:	4798      	blx	r3
   163b0:	0003      	movs	r3, r0
   163b2:	2b02      	cmp	r3, #2
   163b4:	d1f9      	bne.n	163aa <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   163b6:	1dfb      	adds	r3, r7, #7
   163b8:	781b      	ldrb	r3, [r3, #0]
   163ba:	2b00      	cmp	r3, #0
   163bc:	d1e0      	bne.n	16380 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   163be:	4b1d      	ldr	r3, [pc, #116]	; (16434 <init_storage+0xc8>)
   163c0:	0019      	movs	r1, r3
   163c2:	2001      	movs	r0, #1
   163c4:	4b16      	ldr	r3, [pc, #88]	; (16420 <init_storage+0xb4>)
   163c6:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   163c8:	238c      	movs	r3, #140	; 0x8c
   163ca:	009a      	lsls	r2, r3, #2
   163cc:	4b1a      	ldr	r3, [pc, #104]	; (16438 <init_storage+0xcc>)
   163ce:	2100      	movs	r1, #0
   163d0:	0018      	movs	r0, r3
   163d2:	4b1a      	ldr	r3, [pc, #104]	; (1643c <init_storage+0xd0>)
   163d4:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   163d6:	1dbc      	adds	r4, r7, #6
   163d8:	4b17      	ldr	r3, [pc, #92]	; (16438 <init_storage+0xcc>)
   163da:	0019      	movs	r1, r3
   163dc:	2000      	movs	r0, #0
   163de:	4b18      	ldr	r3, [pc, #96]	; (16440 <init_storage+0xd4>)
   163e0:	4798      	blx	r3
   163e2:	0003      	movs	r3, r0
   163e4:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   163e6:	1dbb      	adds	r3, r7, #6
   163e8:	781b      	ldrb	r3, [r3, #0]
   163ea:	2b0b      	cmp	r3, #11
   163ec:	d107      	bne.n	163fe <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   163ee:	1dbb      	adds	r3, r7, #6
   163f0:	781a      	ldrb	r2, [r3, #0]
   163f2:	4b14      	ldr	r3, [pc, #80]	; (16444 <init_storage+0xd8>)
   163f4:	0019      	movs	r1, r3
   163f6:	2001      	movs	r0, #1
   163f8:	4b09      	ldr	r3, [pc, #36]	; (16420 <init_storage+0xb4>)
   163fa:	4798      	blx	r3
            return;
   163fc:	e008      	b.n	16410 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   163fe:	4b12      	ldr	r3, [pc, #72]	; (16448 <init_storage+0xdc>)
   16400:	0019      	movs	r1, r3
   16402:	2001      	movs	r0, #1
   16404:	4b06      	ldr	r3, [pc, #24]	; (16420 <init_storage+0xb4>)
   16406:	4798      	blx	r3
        add_state(STORAGE_READY);
   16408:	2001      	movs	r0, #1
   1640a:	4b10      	ldr	r3, [pc, #64]	; (1644c <init_storage+0xe0>)
   1640c:	4798      	blx	r3
        return;
   1640e:	46c0      	nop			; (mov r8, r8)
    }
}
   16410:	46bd      	mov	sp, r7
   16412:	b003      	add	sp, #12
   16414:	bd90      	pop	{r4, r7, pc}
   16416:	46c0      	nop			; (mov r8, r8)
   16418:	0001e999 	.word	0x0001e999
   1641c:	000364bc 	.word	0x000364bc
   16420:	0001db81 	.word	0x0001db81
   16424:	0001ee75 	.word	0x0001ee75
   16428:	000364f4 	.word	0x000364f4
   1642c:	0003651c 	.word	0x0003651c
   16430:	0001e9e9 	.word	0x0001e9e9
   16434:	00036550 	.word	0x00036550
   16438:	200004e0 	.word	0x200004e0
   1643c:	000346df 	.word	0x000346df
   16440:	0002d5d5 	.word	0x0002d5d5
   16444:	00036574 	.word	0x00036574
   16448:	000365a4 	.word	0x000365a4
   1644c:	00015a5d 	.word	0x00015a5d

00016450 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   16450:	b580      	push	{r7, lr}
   16452:	b082      	sub	sp, #8
   16454:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   16456:	1d3b      	adds	r3, r7, #4
   16458:	0018      	movs	r0, r3
   1645a:	4b08      	ldr	r3, [pc, #32]	; (1647c <configure_timer+0x2c>)
   1645c:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   1645e:	1d3a      	adds	r2, r7, #4
   16460:	4b07      	ldr	r3, [pc, #28]	; (16480 <configure_timer+0x30>)
   16462:	0011      	movs	r1, r2
   16464:	0018      	movs	r0, r3
   16466:	4b07      	ldr	r3, [pc, #28]	; (16484 <configure_timer+0x34>)
   16468:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   1646a:	4b05      	ldr	r3, [pc, #20]	; (16480 <configure_timer+0x30>)
   1646c:	0018      	movs	r0, r3
   1646e:	4b06      	ldr	r3, [pc, #24]	; (16488 <configure_timer+0x38>)
   16470:	4798      	blx	r3
}
   16472:	46c0      	nop			; (mov r8, r8)
   16474:	46bd      	mov	sp, r7
   16476:	b002      	add	sp, #8
   16478:	bd80      	pop	{r7, pc}
   1647a:	46c0      	nop			; (mov r8, r8)
   1647c:	00032125 	.word	0x00032125
   16480:	20004708 	.word	0x20004708
   16484:	00032149 	.word	0x00032149
   16488:	00032235 	.word	0x00032235

0001648c <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   1648c:	b580      	push	{r7, lr}
   1648e:	b088      	sub	sp, #32
   16490:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   16492:	003b      	movs	r3, r7
   16494:	0018      	movs	r0, r3
   16496:	4b16      	ldr	r3, [pc, #88]	; (164f0 <configure_http_client+0x64>)
   16498:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   1649a:	003b      	movs	r3, r7
   1649c:	2280      	movs	r2, #128	; 0x80
   1649e:	0092      	lsls	r2, r2, #2
   164a0:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   164a2:	003b      	movs	r3, r7
   164a4:	4a13      	ldr	r2, [pc, #76]	; (164f4 <configure_http_client+0x68>)
   164a6:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   164a8:	003b      	movs	r3, r7
   164aa:	22bc      	movs	r2, #188	; 0xbc
   164ac:	32ff      	adds	r2, #255	; 0xff
   164ae:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   164b0:	003b      	movs	r3, r7
   164b2:	2201      	movs	r2, #1
   164b4:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   164b6:	003a      	movs	r2, r7
   164b8:	4b0f      	ldr	r3, [pc, #60]	; (164f8 <configure_http_client+0x6c>)
   164ba:	0011      	movs	r1, r2
   164bc:	0018      	movs	r0, r3
   164be:	4b0f      	ldr	r3, [pc, #60]	; (164fc <configure_http_client+0x70>)
   164c0:	4798      	blx	r3
   164c2:	0003      	movs	r3, r0
   164c4:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   164c6:	69fb      	ldr	r3, [r7, #28]
   164c8:	2b00      	cmp	r3, #0
   164ca:	da06      	bge.n	164da <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   164cc:	69fa      	ldr	r2, [r7, #28]
   164ce:	4b0c      	ldr	r3, [pc, #48]	; (16500 <configure_http_client+0x74>)
   164d0:	0019      	movs	r1, r3
   164d2:	2001      	movs	r0, #1
   164d4:	4b0b      	ldr	r3, [pc, #44]	; (16504 <configure_http_client+0x78>)
   164d6:	4798      	blx	r3
        while (1) {
   164d8:	e7fe      	b.n	164d8 <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   164da:	4a0b      	ldr	r2, [pc, #44]	; (16508 <configure_http_client+0x7c>)
   164dc:	4b06      	ldr	r3, [pc, #24]	; (164f8 <configure_http_client+0x6c>)
   164de:	0011      	movs	r1, r2
   164e0:	0018      	movs	r0, r3
   164e2:	4b0a      	ldr	r3, [pc, #40]	; (1650c <configure_http_client+0x80>)
   164e4:	4798      	blx	r3
}
   164e6:	46c0      	nop			; (mov r8, r8)
   164e8:	46bd      	mov	sp, r7
   164ea:	b008      	add	sp, #32
   164ec:	bd80      	pop	{r7, pc}
   164ee:	46c0      	nop			; (mov r8, r8)
   164f0:	000307b9 	.word	0x000307b9
   164f4:	20004708 	.word	0x20004708
   164f8:	20004760 	.word	0x20004760
   164fc:	00030805 	.word	0x00030805
   16500:	000365c8 	.word	0x000365c8
   16504:	0001db81 	.word	0x0001db81
   16508:	0001603d 	.word	0x0001603d
   1650c:	000308f1 	.word	0x000308f1

00016510 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   16510:	b580      	push	{r7, lr}
   16512:	b082      	sub	sp, #8
   16514:	af00      	add	r7, sp, #0
   16516:	603a      	str	r2, [r7, #0]
   16518:	1dfb      	adds	r3, r7, #7
   1651a:	1c02      	adds	r2, r0, #0
   1651c:	701a      	strb	r2, [r3, #0]
   1651e:	1dbb      	adds	r3, r7, #6
   16520:	1c0a      	adds	r2, r1, #0
   16522:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   16524:	683a      	ldr	r2, [r7, #0]
   16526:	1dbb      	adds	r3, r7, #6
   16528:	7819      	ldrb	r1, [r3, #0]
   1652a:	1dfb      	adds	r3, r7, #7
   1652c:	781b      	ldrb	r3, [r3, #0]
   1652e:	b25b      	sxtb	r3, r3
   16530:	0018      	movs	r0, r3
   16532:	4b03      	ldr	r3, [pc, #12]	; (16540 <socket_event_handler+0x30>)
   16534:	4798      	blx	r3
}
   16536:	46c0      	nop			; (mov r8, r8)
   16538:	46bd      	mov	sp, r7
   1653a:	b002      	add	sp, #8
   1653c:	bd80      	pop	{r7, pc}
   1653e:	46c0      	nop			; (mov r8, r8)
   16540:	0002f4b1 	.word	0x0002f4b1

00016544 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   16544:	b580      	push	{r7, lr}
   16546:	b082      	sub	sp, #8
   16548:	af00      	add	r7, sp, #0
   1654a:	6078      	str	r0, [r7, #4]
   1654c:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   1654e:	683a      	ldr	r2, [r7, #0]
   16550:	687b      	ldr	r3, [r7, #4]
   16552:	0011      	movs	r1, r2
   16554:	0018      	movs	r0, r3
   16556:	4b03      	ldr	r3, [pc, #12]	; (16564 <socket_resolve_handler+0x20>)
   16558:	4798      	blx	r3
}
   1655a:	46c0      	nop			; (mov r8, r8)
   1655c:	46bd      	mov	sp, r7
   1655e:	b002      	add	sp, #8
   16560:	bd80      	pop	{r7, pc}
   16562:	46c0      	nop			; (mov r8, r8)
   16564:	0002f4e5 	.word	0x0002f4e5

00016568 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   16568:	b590      	push	{r4, r7, lr}
   1656a:	b089      	sub	sp, #36	; 0x24
   1656c:	af02      	add	r7, sp, #8
   1656e:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   16570:	2310      	movs	r3, #16
   16572:	18fb      	adds	r3, r7, r3
   16574:	2200      	movs	r2, #0
   16576:	701a      	strb	r2, [r3, #0]
   16578:	2310      	movs	r3, #16
   1657a:	18fb      	adds	r3, r7, r3
   1657c:	2200      	movs	r2, #0
   1657e:	705a      	strb	r2, [r3, #1]
   16580:	2310      	movs	r3, #16
   16582:	18fb      	adds	r3, r7, r3
   16584:	2200      	movs	r2, #0
   16586:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16588:	687b      	ldr	r3, [r7, #4]
   1658a:	685b      	ldr	r3, [r3, #4]
   1658c:	685a      	ldr	r2, [r3, #4]
   1658e:	687b      	ldr	r3, [r7, #4]
   16590:	685b      	ldr	r3, [r3, #4]
   16592:	689b      	ldr	r3, [r3, #8]
   16594:	492a      	ldr	r1, [pc, #168]	; (16640 <SubscribeHandlerLedTopic+0xd8>)
   16596:	2001      	movs	r0, #1
   16598:	4c2a      	ldr	r4, [pc, #168]	; (16644 <SubscribeHandlerLedTopic+0xdc>)
   1659a:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   1659c:	687b      	ldr	r3, [r7, #4]
   1659e:	681b      	ldr	r3, [r3, #0]
   165a0:	689b      	ldr	r3, [r3, #8]
   165a2:	4929      	ldr	r1, [pc, #164]	; (16648 <SubscribeHandlerLedTopic+0xe0>)
   165a4:	2204      	movs	r2, #4
   165a6:	0018      	movs	r0, r3
   165a8:	4b28      	ldr	r3, [pc, #160]	; (1664c <SubscribeHandlerLedTopic+0xe4>)
   165aa:	4798      	blx	r3
   165ac:	1e03      	subs	r3, r0, #0
   165ae:	d143      	bne.n	16638 <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   165b0:	687b      	ldr	r3, [r7, #4]
   165b2:	681b      	ldr	r3, [r3, #0]
   165b4:	689b      	ldr	r3, [r3, #8]
   165b6:	3304      	adds	r3, #4
   165b8:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   165ba:	2300      	movs	r3, #0
   165bc:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   165be:	e015      	b.n	165ec <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   165c0:	697c      	ldr	r4, [r7, #20]
   165c2:	1c63      	adds	r3, r4, #1
   165c4:	617b      	str	r3, [r7, #20]
   165c6:	68fb      	ldr	r3, [r7, #12]
   165c8:	220c      	movs	r2, #12
   165ca:	18b9      	adds	r1, r7, r2
   165cc:	220a      	movs	r2, #10
   165ce:	0018      	movs	r0, r3
   165d0:	4b1f      	ldr	r3, [pc, #124]	; (16650 <SubscribeHandlerLedTopic+0xe8>)
   165d2:	4798      	blx	r3
   165d4:	0003      	movs	r3, r0
   165d6:	b2da      	uxtb	r2, r3
   165d8:	2310      	movs	r3, #16
   165da:	18fb      	adds	r3, r7, r3
   165dc:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   165de:	68fb      	ldr	r3, [r7, #12]
   165e0:	781b      	ldrb	r3, [r3, #0]
   165e2:	2b2c      	cmp	r3, #44	; 0x2c
   165e4:	d10a      	bne.n	165fc <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   165e6:	68fb      	ldr	r3, [r7, #12]
   165e8:	3301      	adds	r3, #1
   165ea:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   165ec:	697b      	ldr	r3, [r7, #20]
   165ee:	2b02      	cmp	r3, #2
   165f0:	dc05      	bgt.n	165fe <SubscribeHandlerLedTopic+0x96>
   165f2:	68fb      	ldr	r3, [r7, #12]
   165f4:	781b      	ldrb	r3, [r3, #0]
   165f6:	2b00      	cmp	r3, #0
   165f8:	d1e2      	bne.n	165c0 <SubscribeHandlerLedTopic+0x58>
   165fa:	e000      	b.n	165fe <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   165fc:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   165fe:	2310      	movs	r3, #16
   16600:	18fb      	adds	r3, r7, r3
   16602:	781b      	ldrb	r3, [r3, #0]
   16604:	001a      	movs	r2, r3
   16606:	2310      	movs	r3, #16
   16608:	18fb      	adds	r3, r7, r3
   1660a:	785b      	ldrb	r3, [r3, #1]
   1660c:	0018      	movs	r0, r3
   1660e:	2310      	movs	r3, #16
   16610:	18fb      	adds	r3, r7, r3
   16612:	789b      	ldrb	r3, [r3, #2]
   16614:	490f      	ldr	r1, [pc, #60]	; (16654 <SubscribeHandlerLedTopic+0xec>)
   16616:	9300      	str	r3, [sp, #0]
   16618:	0003      	movs	r3, r0
   1661a:	2001      	movs	r0, #1
   1661c:	4c09      	ldr	r4, [pc, #36]	; (16644 <SubscribeHandlerLedTopic+0xdc>)
   1661e:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   16620:	2310      	movs	r3, #16
   16622:	18fb      	adds	r3, r7, r3
   16624:	7818      	ldrb	r0, [r3, #0]
   16626:	2310      	movs	r3, #16
   16628:	18fb      	adds	r3, r7, r3
   1662a:	7859      	ldrb	r1, [r3, #1]
   1662c:	2310      	movs	r3, #16
   1662e:	18fb      	adds	r3, r7, r3
   16630:	789b      	ldrb	r3, [r3, #2]
   16632:	001a      	movs	r2, r3
   16634:	4b08      	ldr	r3, [pc, #32]	; (16658 <SubscribeHandlerLedTopic+0xf0>)
   16636:	4798      	blx	r3
    }
}
   16638:	46c0      	nop			; (mov r8, r8)
   1663a:	46bd      	mov	sp, r7
   1663c:	b007      	add	sp, #28
   1663e:	bd90      	pop	{r4, r7, pc}
   16640:	00036610 	.word	0x00036610
   16644:	0001db81 	.word	0x0001db81
   16648:	00036618 	.word	0x00036618
   1664c:	00034aa5 	.word	0x00034aa5
   16650:	00034c51 	.word	0x00034c51
   16654:	00036620 	.word	0x00036620
   16658:	000158c1 	.word	0x000158c1

0001665c <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   1665c:	b590      	push	{r4, r7, lr}
   1665e:	b08b      	sub	sp, #44	; 0x2c
   16660:	af00      	add	r7, sp, #0
   16662:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   16664:	230c      	movs	r3, #12
   16666:	18fb      	adds	r3, r7, r3
   16668:	2214      	movs	r2, #20
   1666a:	21ff      	movs	r1, #255	; 0xff
   1666c:	0018      	movs	r0, r3
   1666e:	4b48      	ldr	r3, [pc, #288]	; (16790 <SubscribeHandlerGameTopic+0x134>)
   16670:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   16672:	687b      	ldr	r3, [r7, #4]
   16674:	681b      	ldr	r3, [r3, #0]
   16676:	689b      	ldr	r3, [r3, #8]
   16678:	4946      	ldr	r1, [pc, #280]	; (16794 <SubscribeHandlerGameTopic+0x138>)
   1667a:	2209      	movs	r2, #9
   1667c:	0018      	movs	r0, r3
   1667e:	4b46      	ldr	r3, [pc, #280]	; (16798 <SubscribeHandlerGameTopic+0x13c>)
   16680:	4798      	blx	r3
   16682:	1e03      	subs	r3, r0, #0
   16684:	d166      	bne.n	16754 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   16686:	4b45      	ldr	r3, [pc, #276]	; (1679c <SubscribeHandlerGameTopic+0x140>)
   16688:	0019      	movs	r1, r3
   1668a:	2001      	movs	r0, #1
   1668c:	4b44      	ldr	r3, [pc, #272]	; (167a0 <SubscribeHandlerGameTopic+0x144>)
   1668e:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16690:	687b      	ldr	r3, [r7, #4]
   16692:	685b      	ldr	r3, [r3, #4]
   16694:	685a      	ldr	r2, [r3, #4]
   16696:	687b      	ldr	r3, [r7, #4]
   16698:	685b      	ldr	r3, [r3, #4]
   1669a:	689b      	ldr	r3, [r3, #8]
   1669c:	4941      	ldr	r1, [pc, #260]	; (167a4 <SubscribeHandlerGameTopic+0x148>)
   1669e:	2001      	movs	r0, #1
   166a0:	4c3f      	ldr	r4, [pc, #252]	; (167a0 <SubscribeHandlerGameTopic+0x144>)
   166a2:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   166a4:	687b      	ldr	r3, [r7, #4]
   166a6:	681b      	ldr	r3, [r3, #0]
   166a8:	68da      	ldr	r2, [r3, #12]
   166aa:	687b      	ldr	r3, [r7, #4]
   166ac:	681b      	ldr	r3, [r3, #0]
   166ae:	689b      	ldr	r3, [r3, #8]
   166b0:	493d      	ldr	r1, [pc, #244]	; (167a8 <SubscribeHandlerGameTopic+0x14c>)
   166b2:	2001      	movs	r0, #1
   166b4:	4c3a      	ldr	r4, [pc, #232]	; (167a0 <SubscribeHandlerGameTopic+0x144>)
   166b6:	47a0      	blx	r4

        int nb = 0;
   166b8:	2300      	movs	r3, #0
   166ba:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   166bc:	687b      	ldr	r3, [r7, #4]
   166be:	681b      	ldr	r3, [r3, #0]
   166c0:	689b      	ldr	r3, [r3, #8]
   166c2:	3309      	adds	r3, #9
   166c4:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   166c6:	e015      	b.n	166f4 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   166c8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   166ca:	1c63      	adds	r3, r4, #1
   166cc:	627b      	str	r3, [r7, #36]	; 0x24
   166ce:	68bb      	ldr	r3, [r7, #8]
   166d0:	2208      	movs	r2, #8
   166d2:	18b9      	adds	r1, r7, r2
   166d4:	220a      	movs	r2, #10
   166d6:	0018      	movs	r0, r3
   166d8:	4b34      	ldr	r3, [pc, #208]	; (167ac <SubscribeHandlerGameTopic+0x150>)
   166da:	4798      	blx	r3
   166dc:	0003      	movs	r3, r0
   166de:	b2da      	uxtb	r2, r3
   166e0:	230c      	movs	r3, #12
   166e2:	18fb      	adds	r3, r7, r3
   166e4:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   166e6:	68bb      	ldr	r3, [r7, #8]
   166e8:	781b      	ldrb	r3, [r3, #0]
   166ea:	2b2c      	cmp	r3, #44	; 0x2c
   166ec:	d10a      	bne.n	16704 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   166ee:	68bb      	ldr	r3, [r7, #8]
   166f0:	3301      	adds	r3, #1
   166f2:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   166f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   166f6:	2b13      	cmp	r3, #19
   166f8:	dc05      	bgt.n	16706 <SubscribeHandlerGameTopic+0xaa>
   166fa:	68bb      	ldr	r3, [r7, #8]
   166fc:	781b      	ldrb	r3, [r3, #0]
   166fe:	2b00      	cmp	r3, #0
   16700:	d1e2      	bne.n	166c8 <SubscribeHandlerGameTopic+0x6c>
   16702:	e000      	b.n	16706 <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   16704:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   16706:	4b2a      	ldr	r3, [pc, #168]	; (167b0 <SubscribeHandlerGameTopic+0x154>)
   16708:	0019      	movs	r1, r3
   1670a:	2001      	movs	r0, #1
   1670c:	4b24      	ldr	r3, [pc, #144]	; (167a0 <SubscribeHandlerGameTopic+0x144>)
   1670e:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   16710:	2300      	movs	r3, #0
   16712:	623b      	str	r3, [r7, #32]
   16714:	e00d      	b.n	16732 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   16716:	230c      	movs	r3, #12
   16718:	18fa      	adds	r2, r7, r3
   1671a:	6a3b      	ldr	r3, [r7, #32]
   1671c:	18d3      	adds	r3, r2, r3
   1671e:	781b      	ldrb	r3, [r3, #0]
   16720:	001a      	movs	r2, r3
   16722:	4b24      	ldr	r3, [pc, #144]	; (167b4 <SubscribeHandlerGameTopic+0x158>)
   16724:	0019      	movs	r1, r3
   16726:	2001      	movs	r0, #1
   16728:	4b1d      	ldr	r3, [pc, #116]	; (167a0 <SubscribeHandlerGameTopic+0x144>)
   1672a:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   1672c:	6a3b      	ldr	r3, [r7, #32]
   1672e:	3301      	adds	r3, #1
   16730:	623b      	str	r3, [r7, #32]
   16732:	6a3b      	ldr	r3, [r7, #32]
   16734:	2b13      	cmp	r3, #19
   16736:	ddee      	ble.n	16716 <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   16738:	230c      	movs	r3, #12
   1673a:	18fb      	adds	r3, r7, r3
   1673c:	0018      	movs	r0, r3
   1673e:	4b1e      	ldr	r3, [pc, #120]	; (167b8 <SubscribeHandlerGameTopic+0x15c>)
   16740:	4798      	blx	r3
   16742:	0003      	movs	r3, r0
   16744:	2b01      	cmp	r3, #1
   16746:	d11e      	bne.n	16786 <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   16748:	4b1c      	ldr	r3, [pc, #112]	; (167bc <SubscribeHandlerGameTopic+0x160>)
   1674a:	0019      	movs	r1, r3
   1674c:	2001      	movs	r0, #1
   1674e:	4b14      	ldr	r3, [pc, #80]	; (167a0 <SubscribeHandlerGameTopic+0x144>)
   16750:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   16752:	e018      	b.n	16786 <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   16754:	4b1a      	ldr	r3, [pc, #104]	; (167c0 <SubscribeHandlerGameTopic+0x164>)
   16756:	0019      	movs	r1, r3
   16758:	2001      	movs	r0, #1
   1675a:	4b11      	ldr	r3, [pc, #68]	; (167a0 <SubscribeHandlerGameTopic+0x144>)
   1675c:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1675e:	687b      	ldr	r3, [r7, #4]
   16760:	685b      	ldr	r3, [r3, #4]
   16762:	685a      	ldr	r2, [r3, #4]
   16764:	687b      	ldr	r3, [r7, #4]
   16766:	685b      	ldr	r3, [r3, #4]
   16768:	689b      	ldr	r3, [r3, #8]
   1676a:	490e      	ldr	r1, [pc, #56]	; (167a4 <SubscribeHandlerGameTopic+0x148>)
   1676c:	2001      	movs	r0, #1
   1676e:	4c0c      	ldr	r4, [pc, #48]	; (167a0 <SubscribeHandlerGameTopic+0x144>)
   16770:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   16772:	687b      	ldr	r3, [r7, #4]
   16774:	681b      	ldr	r3, [r3, #0]
   16776:	68da      	ldr	r2, [r3, #12]
   16778:	687b      	ldr	r3, [r7, #4]
   1677a:	681b      	ldr	r3, [r3, #0]
   1677c:	689b      	ldr	r3, [r3, #8]
   1677e:	490a      	ldr	r1, [pc, #40]	; (167a8 <SubscribeHandlerGameTopic+0x14c>)
   16780:	2001      	movs	r0, #1
   16782:	4c07      	ldr	r4, [pc, #28]	; (167a0 <SubscribeHandlerGameTopic+0x144>)
   16784:	47a0      	blx	r4
}
   16786:	46c0      	nop			; (mov r8, r8)
   16788:	46bd      	mov	sp, r7
   1678a:	b00b      	add	sp, #44	; 0x2c
   1678c:	bd90      	pop	{r4, r7, pc}
   1678e:	46c0      	nop			; (mov r8, r8)
   16790:	000346df 	.word	0x000346df
   16794:	00036634 	.word	0x00036634
   16798:	00034aa5 	.word	0x00034aa5
   1679c:	00036640 	.word	0x00036640
   167a0:	0001db81 	.word	0x0001db81
   167a4:	00036610 	.word	0x00036610
   167a8:	0003665c 	.word	0x0003665c
   167ac:	00034c51 	.word	0x00034c51
   167b0:	00036664 	.word	0x00036664
   167b4:	00036678 	.word	0x00036678
   167b8:	00013855 	.word	0x00013855
   167bc:	0003667c 	.word	0x0003667c
   167c0:	00036698 	.word	0x00036698

000167c4 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   167c4:	b590      	push	{r4, r7, lr}
   167c6:	b083      	sub	sp, #12
   167c8:	af00      	add	r7, sp, #0
   167ca:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
   167cc:	4b09      	ldr	r3, [pc, #36]	; (167f4 <SubscribeHandlerImuTopic+0x30>)
   167ce:	0019      	movs	r1, r3
   167d0:	2001      	movs	r0, #1
   167d2:	4b09      	ldr	r3, [pc, #36]	; (167f8 <SubscribeHandlerImuTopic+0x34>)
   167d4:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   167d6:	687b      	ldr	r3, [r7, #4]
   167d8:	685b      	ldr	r3, [r3, #4]
   167da:	685a      	ldr	r2, [r3, #4]
   167dc:	687b      	ldr	r3, [r7, #4]
   167de:	685b      	ldr	r3, [r3, #4]
   167e0:	689b      	ldr	r3, [r3, #8]
   167e2:	4906      	ldr	r1, [pc, #24]	; (167fc <SubscribeHandlerImuTopic+0x38>)
   167e4:	2001      	movs	r0, #1
   167e6:	4c04      	ldr	r4, [pc, #16]	; (167f8 <SubscribeHandlerImuTopic+0x34>)
   167e8:	47a0      	blx	r4
}
   167ea:	46c0      	nop			; (mov r8, r8)
   167ec:	46bd      	mov	sp, r7
   167ee:	b003      	add	sp, #12
   167f0:	bd90      	pop	{r4, r7, pc}
   167f2:	46c0      	nop			; (mov r8, r8)
   167f4:	000366c8 	.word	0x000366c8
   167f8:	0001db81 	.word	0x0001db81
   167fc:	00036610 	.word	0x00036610

00016800 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   16800:	b590      	push	{r4, r7, lr}
   16802:	b08b      	sub	sp, #44	; 0x2c
   16804:	af06      	add	r7, sp, #24
   16806:	60f8      	str	r0, [r7, #12]
   16808:	60b9      	str	r1, [r7, #8]
   1680a:	607a      	str	r2, [r7, #4]
    switch (type) {
   1680c:	68bb      	ldr	r3, [r7, #8]
   1680e:	2b01      	cmp	r3, #1
   16810:	d03b      	beq.n	1688a <mqtt_callback+0x8a>
   16812:	2b05      	cmp	r3, #5
   16814:	d05e      	beq.n	168d4 <mqtt_callback+0xd4>
   16816:	2b00      	cmp	r3, #0
   16818:	d000      	beq.n	1681c <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   1681a:	e061      	b.n	168e0 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
   1681c:	687b      	ldr	r3, [r7, #4]
   1681e:	681b      	ldr	r3, [r3, #0]
   16820:	2b00      	cmp	r3, #0
   16822:	db25      	blt.n	16870 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   16824:	4b30      	ldr	r3, [pc, #192]	; (168e8 <mqtt_callback+0xe8>)
   16826:	0019      	movs	r1, r3
   16828:	2001      	movs	r0, #1
   1682a:	4b30      	ldr	r3, [pc, #192]	; (168ec <mqtt_callback+0xec>)
   1682c:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   1682e:	4930      	ldr	r1, [pc, #192]	; (168f0 <mqtt_callback+0xf0>)
   16830:	4a30      	ldr	r2, [pc, #192]	; (168f4 <mqtt_callback+0xf4>)
   16832:	68f8      	ldr	r0, [r7, #12]
   16834:	2300      	movs	r3, #0
   16836:	9305      	str	r3, [sp, #20]
   16838:	2300      	movs	r3, #0
   1683a:	9304      	str	r3, [sp, #16]
   1683c:	2300      	movs	r3, #0
   1683e:	9303      	str	r3, [sp, #12]
   16840:	2300      	movs	r3, #0
   16842:	9302      	str	r3, [sp, #8]
   16844:	2300      	movs	r3, #0
   16846:	9301      	str	r3, [sp, #4]
   16848:	4b2a      	ldr	r3, [pc, #168]	; (168f4 <mqtt_callback+0xf4>)
   1684a:	9300      	str	r3, [sp, #0]
   1684c:	000b      	movs	r3, r1
   1684e:	2101      	movs	r1, #1
   16850:	4c29      	ldr	r4, [pc, #164]	; (168f8 <mqtt_callback+0xf8>)
   16852:	47a0      	blx	r4
   16854:	1e03      	subs	r3, r0, #0
   16856:	d005      	beq.n	16864 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   16858:	4b28      	ldr	r3, [pc, #160]	; (168fc <mqtt_callback+0xfc>)
   1685a:	0019      	movs	r1, r3
   1685c:	2001      	movs	r0, #1
   1685e:	4b23      	ldr	r3, [pc, #140]	; (168ec <mqtt_callback+0xec>)
   16860:	4798      	blx	r3
        } break;
   16862:	e03d      	b.n	168e0 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   16864:	4b26      	ldr	r3, [pc, #152]	; (16900 <mqtt_callback+0x100>)
   16866:	0019      	movs	r1, r3
   16868:	2001      	movs	r0, #1
   1686a:	4b20      	ldr	r3, [pc, #128]	; (168ec <mqtt_callback+0xec>)
   1686c:	4798      	blx	r3
        } break;
   1686e:	e037      	b.n	168e0 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   16870:	4a24      	ldr	r2, [pc, #144]	; (16904 <mqtt_callback+0x104>)
   16872:	4b25      	ldr	r3, [pc, #148]	; (16908 <mqtt_callback+0x108>)
   16874:	0019      	movs	r1, r3
   16876:	2001      	movs	r0, #1
   16878:	4b1c      	ldr	r3, [pc, #112]	; (168ec <mqtt_callback+0xec>)
   1687a:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   1687c:	4a21      	ldr	r2, [pc, #132]	; (16904 <mqtt_callback+0x104>)
   1687e:	68fb      	ldr	r3, [r7, #12]
   16880:	0011      	movs	r1, r2
   16882:	0018      	movs	r0, r3
   16884:	4b21      	ldr	r3, [pc, #132]	; (1690c <mqtt_callback+0x10c>)
   16886:	4798      	blx	r3
        } break;
   16888:	e02a      	b.n	168e0 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   1688a:	687b      	ldr	r3, [r7, #4]
   1688c:	781b      	ldrb	r3, [r3, #0]
   1688e:	2b00      	cmp	r3, #0
   16890:	d117      	bne.n	168c2 <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   16892:	4b1f      	ldr	r3, [pc, #124]	; (16910 <mqtt_callback+0x110>)
   16894:	491f      	ldr	r1, [pc, #124]	; (16914 <mqtt_callback+0x114>)
   16896:	68f8      	ldr	r0, [r7, #12]
   16898:	2202      	movs	r2, #2
   1689a:	4c1f      	ldr	r4, [pc, #124]	; (16918 <mqtt_callback+0x118>)
   1689c:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   1689e:	4b1f      	ldr	r3, [pc, #124]	; (1691c <mqtt_callback+0x11c>)
   168a0:	491f      	ldr	r1, [pc, #124]	; (16920 <mqtt_callback+0x120>)
   168a2:	68f8      	ldr	r0, [r7, #12]
   168a4:	2202      	movs	r2, #2
   168a6:	4c1c      	ldr	r4, [pc, #112]	; (16918 <mqtt_callback+0x118>)
   168a8:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   168aa:	4b1e      	ldr	r3, [pc, #120]	; (16924 <mqtt_callback+0x124>)
   168ac:	491e      	ldr	r1, [pc, #120]	; (16928 <mqtt_callback+0x128>)
   168ae:	68f8      	ldr	r0, [r7, #12]
   168b0:	2202      	movs	r2, #2
   168b2:	4c19      	ldr	r4, [pc, #100]	; (16918 <mqtt_callback+0x118>)
   168b4:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   168b6:	4b1d      	ldr	r3, [pc, #116]	; (1692c <mqtt_callback+0x12c>)
   168b8:	0019      	movs	r1, r3
   168ba:	2001      	movs	r0, #1
   168bc:	4b0b      	ldr	r3, [pc, #44]	; (168ec <mqtt_callback+0xec>)
   168be:	4798      	blx	r3
            break;
   168c0:	e00e      	b.n	168e0 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   168c2:	687b      	ldr	r3, [r7, #4]
   168c4:	781b      	ldrb	r3, [r3, #0]
   168c6:	001a      	movs	r2, r3
   168c8:	4b19      	ldr	r3, [pc, #100]	; (16930 <mqtt_callback+0x130>)
   168ca:	0019      	movs	r1, r3
   168cc:	2001      	movs	r0, #1
   168ce:	4b07      	ldr	r3, [pc, #28]	; (168ec <mqtt_callback+0xec>)
   168d0:	4798      	blx	r3
            break;
   168d2:	e005      	b.n	168e0 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   168d4:	4b17      	ldr	r3, [pc, #92]	; (16934 <mqtt_callback+0x134>)
   168d6:	0019      	movs	r1, r3
   168d8:	2001      	movs	r0, #1
   168da:	4b04      	ldr	r3, [pc, #16]	; (168ec <mqtt_callback+0xec>)
   168dc:	4798      	blx	r3
            break;
   168de:	46c0      	nop			; (mov r8, r8)
}
   168e0:	46c0      	nop			; (mov r8, r8)
   168e2:	46bd      	mov	sp, r7
   168e4:	b005      	add	sp, #20
   168e6:	bd90      	pop	{r4, r7, pc}
   168e8:	0003672c 	.word	0x0003672c
   168ec:	0001db81 	.word	0x0001db81
   168f0:	00036748 	.word	0x00036748
   168f4:	00036758 	.word	0x00036758
   168f8:	0002f551 	.word	0x0002f551
   168fc:	00036764 	.word	0x00036764
   16900:	0003678c 	.word	0x0003678c
   16904:	0003608c 	.word	0x0003608c
   16908:	000367a8 	.word	0x000367a8
   1690c:	0002f509 	.word	0x0002f509
   16910:	0001665d 	.word	0x0001665d
   16914:	000367e0 	.word	0x000367e0
   16918:	0002f6f1 	.word	0x0002f6f1
   1691c:	00016569 	.word	0x00016569
   16920:	00036708 	.word	0x00036708
   16924:	000167c5 	.word	0x000167c5
   16928:	000367f4 	.word	0x000367f4
   1692c:	00036808 	.word	0x00036808
   16930:	0003681c 	.word	0x0003681c
   16934:	00036850 	.word	0x00036850

00016938 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   16938:	b580      	push	{r7, lr}
   1693a:	b088      	sub	sp, #32
   1693c:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   1693e:	1d3b      	adds	r3, r7, #4
   16940:	0018      	movs	r0, r3
   16942:	4b1f      	ldr	r3, [pc, #124]	; (169c0 <configure_mqtt+0x88>)
   16944:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   16946:	1d3b      	adds	r3, r7, #4
   16948:	4a1e      	ldr	r2, [pc, #120]	; (169c4 <configure_mqtt+0x8c>)
   1694a:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1694c:	1d3b      	adds	r3, r7, #4
   1694e:	2280      	movs	r2, #128	; 0x80
   16950:	0092      	lsls	r2, r2, #2
   16952:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   16954:	1d3b      	adds	r3, r7, #4
   16956:	4a1c      	ldr	r2, [pc, #112]	; (169c8 <configure_mqtt+0x90>)
   16958:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1695a:	1d3b      	adds	r3, r7, #4
   1695c:	2280      	movs	r2, #128	; 0x80
   1695e:	0092      	lsls	r2, r2, #2
   16960:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   16962:	1d3b      	adds	r3, r7, #4
   16964:	4a19      	ldr	r2, [pc, #100]	; (169cc <configure_mqtt+0x94>)
   16966:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   16968:	1d3b      	adds	r3, r7, #4
   1696a:	4a19      	ldr	r2, [pc, #100]	; (169d0 <configure_mqtt+0x98>)
   1696c:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   1696e:	1d3a      	adds	r2, r7, #4
   16970:	4b18      	ldr	r3, [pc, #96]	; (169d4 <configure_mqtt+0x9c>)
   16972:	0011      	movs	r1, r2
   16974:	0018      	movs	r0, r3
   16976:	4b18      	ldr	r3, [pc, #96]	; (169d8 <configure_mqtt+0xa0>)
   16978:	4798      	blx	r3
   1697a:	0003      	movs	r3, r0
   1697c:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   1697e:	69fb      	ldr	r3, [r7, #28]
   16980:	2b00      	cmp	r3, #0
   16982:	da06      	bge.n	16992 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   16984:	69fa      	ldr	r2, [r7, #28]
   16986:	4b15      	ldr	r3, [pc, #84]	; (169dc <configure_mqtt+0xa4>)
   16988:	0019      	movs	r1, r3
   1698a:	2001      	movs	r0, #1
   1698c:	4b14      	ldr	r3, [pc, #80]	; (169e0 <configure_mqtt+0xa8>)
   1698e:	4798      	blx	r3
        while (1) {
   16990:	e7fe      	b.n	16990 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   16992:	4a14      	ldr	r2, [pc, #80]	; (169e4 <configure_mqtt+0xac>)
   16994:	4b0f      	ldr	r3, [pc, #60]	; (169d4 <configure_mqtt+0x9c>)
   16996:	0011      	movs	r1, r2
   16998:	0018      	movs	r0, r3
   1699a:	4b13      	ldr	r3, [pc, #76]	; (169e8 <configure_mqtt+0xb0>)
   1699c:	4798      	blx	r3
   1699e:	0003      	movs	r3, r0
   169a0:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   169a2:	69fb      	ldr	r3, [r7, #28]
   169a4:	2b00      	cmp	r3, #0
   169a6:	da06      	bge.n	169b6 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   169a8:	69fa      	ldr	r2, [r7, #28]
   169aa:	4b10      	ldr	r3, [pc, #64]	; (169ec <configure_mqtt+0xb4>)
   169ac:	0019      	movs	r1, r3
   169ae:	2001      	movs	r0, #1
   169b0:	4b0b      	ldr	r3, [pc, #44]	; (169e0 <configure_mqtt+0xa8>)
   169b2:	4798      	blx	r3
        while (1) {
   169b4:	e7fe      	b.n	169b4 <configure_mqtt+0x7c>
        }
    }
}
   169b6:	46c0      	nop			; (mov r8, r8)
   169b8:	46bd      	mov	sp, r7
   169ba:	b008      	add	sp, #32
   169bc:	bd80      	pop	{r7, pc}
   169be:	46c0      	nop			; (mov r8, r8)
   169c0:	0002f449 	.word	0x0002f449
   169c4:	20000774 	.word	0x20000774
   169c8:	20000974 	.word	0x20000974
   169cc:	0000075b 	.word	0x0000075b
   169d0:	00001770 	.word	0x00001770
   169d4:	2000073c 	.word	0x2000073c
   169d8:	0002f399 	.word	0x0002f399
   169dc:	00036864 	.word	0x00036864
   169e0:	0001db81 	.word	0x0001db81
   169e4:	00016801 	.word	0x00016801
   169e8:	0002f489 	.word	0x0002f489
   169ec:	00036898 	.word	0x00036898

000169f0 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   169f0:	b580      	push	{r7, lr}
   169f2:	b084      	sub	sp, #16
   169f4:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   169f6:	1d3b      	adds	r3, r7, #4
   169f8:	0018      	movs	r0, r3
   169fa:	4b0b      	ldr	r3, [pc, #44]	; (16a28 <configure_extint_channel+0x38>)
   169fc:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   169fe:	1d3b      	adds	r3, r7, #4
   16a00:	2237      	movs	r2, #55	; 0x37
   16a02:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   16a04:	1d3b      	adds	r3, r7, #4
   16a06:	2200      	movs	r2, #0
   16a08:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   16a0a:	1d3b      	adds	r3, r7, #4
   16a0c:	2201      	movs	r2, #1
   16a0e:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   16a10:	1d3b      	adds	r3, r7, #4
   16a12:	2202      	movs	r2, #2
   16a14:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   16a16:	1d3b      	adds	r3, r7, #4
   16a18:	0019      	movs	r1, r3
   16a1a:	2007      	movs	r0, #7
   16a1c:	4b03      	ldr	r3, [pc, #12]	; (16a2c <configure_extint_channel+0x3c>)
   16a1e:	4798      	blx	r3
}
   16a20:	46c0      	nop			; (mov r8, r8)
   16a22:	46bd      	mov	sp, r7
   16a24:	b004      	add	sp, #16
   16a26:	bd80      	pop	{r7, pc}
   16a28:	00026581 	.word	0x00026581
   16a2c:	000265b5 	.word	0x000265b5

00016a30 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   16a30:	b580      	push	{r7, lr}
   16a32:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   16a34:	4b06      	ldr	r3, [pc, #24]	; (16a50 <configure_extint_callbacks+0x20>)
   16a36:	2200      	movs	r2, #0
   16a38:	2107      	movs	r1, #7
   16a3a:	0018      	movs	r0, r3
   16a3c:	4b05      	ldr	r3, [pc, #20]	; (16a54 <configure_extint_callbacks+0x24>)
   16a3e:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   16a40:	2100      	movs	r1, #0
   16a42:	2007      	movs	r0, #7
   16a44:	4b04      	ldr	r3, [pc, #16]	; (16a58 <configure_extint_callbacks+0x28>)
   16a46:	4798      	blx	r3
}
   16a48:	46c0      	nop			; (mov r8, r8)
   16a4a:	46bd      	mov	sp, r7
   16a4c:	bd80      	pop	{r7, pc}
   16a4e:	46c0      	nop			; (mov r8, r8)
   16a50:	00016a5d 	.word	0x00016a5d
   16a54:	00026181 	.word	0x00026181
   16a58:	000261e5 	.word	0x000261e5

00016a5c <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   16a5c:	b5b0      	push	{r4, r5, r7, lr}
   16a5e:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   16a60:	4b0c      	ldr	r3, [pc, #48]	; (16a94 <extint_detection_callback+0x38>)
   16a62:	681b      	ldr	r3, [r3, #0]
   16a64:	1c5a      	adds	r2, r3, #1
   16a66:	4b0b      	ldr	r3, [pc, #44]	; (16a94 <extint_detection_callback+0x38>)
   16a68:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   16a6a:	4b0a      	ldr	r3, [pc, #40]	; (16a94 <extint_detection_callback+0x38>)
   16a6c:	681b      	ldr	r3, [r3, #0]
   16a6e:	2b28      	cmp	r3, #40	; 0x28
   16a70:	d902      	bls.n	16a78 <extint_detection_callback+0x1c>
   16a72:	4b08      	ldr	r3, [pc, #32]	; (16a94 <extint_detection_callback+0x38>)
   16a74:	2201      	movs	r2, #1
   16a76:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   16a78:	4b06      	ldr	r3, [pc, #24]	; (16a94 <extint_detection_callback+0x38>)
   16a7a:	681b      	ldr	r3, [r3, #0]
   16a7c:	4a06      	ldr	r2, [pc, #24]	; (16a98 <extint_detection_callback+0x3c>)
   16a7e:	4807      	ldr	r0, [pc, #28]	; (16a9c <extint_detection_callback+0x40>)
   16a80:	213f      	movs	r1, #63	; 0x3f
   16a82:	4c07      	ldr	r4, [pc, #28]	; (16aa0 <extint_detection_callback+0x44>)
   16a84:	47a0      	blx	r4
    isPressed = true;
   16a86:	4b07      	ldr	r3, [pc, #28]	; (16aa4 <extint_detection_callback+0x48>)
   16a88:	2201      	movs	r2, #1
   16a8a:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   16a8c:	46c0      	nop			; (mov r8, r8)
   16a8e:	46bd      	mov	sp, r7
   16a90:	bdb0      	pop	{r4, r5, r7, pc}
   16a92:	46c0      	nop			; (mov r8, r8)
   16a94:	200000d0 	.word	0x200000d0
   16a98:	000368cc 	.word	0x000368cc
   16a9c:	20000090 	.word	0x20000090
   16aa0:	00034939 	.word	0x00034939
   16aa4:	20000b74 	.word	0x20000b74

00016aa8 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   16aa8:	b580      	push	{r7, lr}
   16aaa:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   16aac:	4a15      	ldr	r2, [pc, #84]	; (16b04 <HTTP_DownloadFileInit+0x5c>)
   16aae:	4b16      	ldr	r3, [pc, #88]	; (16b08 <HTTP_DownloadFileInit+0x60>)
   16ab0:	0011      	movs	r1, r2
   16ab2:	0018      	movs	r0, r3
   16ab4:	4b15      	ldr	r3, [pc, #84]	; (16b0c <HTTP_DownloadFileInit+0x64>)
   16ab6:	4798      	blx	r3
   16ab8:	1e03      	subs	r3, r0, #0
   16aba:	d008      	beq.n	16ace <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16abc:	4b14      	ldr	r3, [pc, #80]	; (16b10 <HTTP_DownloadFileInit+0x68>)
   16abe:	0019      	movs	r1, r3
   16ac0:	2001      	movs	r0, #1
   16ac2:	4b14      	ldr	r3, [pc, #80]	; (16b14 <HTTP_DownloadFileInit+0x6c>)
   16ac4:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   16ac6:	e002      	b.n	16ace <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   16ac8:	2000      	movs	r0, #0
   16aca:	4b13      	ldr	r3, [pc, #76]	; (16b18 <HTTP_DownloadFileInit+0x70>)
   16acc:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   16ace:	4b0e      	ldr	r3, [pc, #56]	; (16b08 <HTTP_DownloadFileInit+0x60>)
   16ad0:	2234      	movs	r2, #52	; 0x34
   16ad2:	5c9b      	ldrb	r3, [r3, r2]
   16ad4:	2b00      	cmp	r3, #0
   16ad6:	d1f7      	bne.n	16ac8 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   16ad8:	4b10      	ldr	r3, [pc, #64]	; (16b1c <HTTP_DownloadFileInit+0x74>)
   16ada:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   16adc:	4b10      	ldr	r3, [pc, #64]	; (16b20 <HTTP_DownloadFileInit+0x78>)
   16ade:	2201      	movs	r2, #1
   16ae0:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   16ae2:	4a10      	ldr	r2, [pc, #64]	; (16b24 <HTTP_DownloadFileInit+0x7c>)
   16ae4:	4b10      	ldr	r3, [pc, #64]	; (16b28 <HTTP_DownloadFileInit+0x80>)
   16ae6:	0011      	movs	r1, r2
   16ae8:	0018      	movs	r0, r3
   16aea:	4b10      	ldr	r3, [pc, #64]	; (16b2c <HTTP_DownloadFileInit+0x84>)
   16aec:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   16aee:	4b10      	ldr	r3, [pc, #64]	; (16b30 <HTTP_DownloadFileInit+0x88>)
   16af0:	4798      	blx	r3

    start_download();
   16af2:	4b10      	ldr	r3, [pc, #64]	; (16b34 <HTTP_DownloadFileInit+0x8c>)
   16af4:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   16af6:	4b10      	ldr	r3, [pc, #64]	; (16b38 <HTTP_DownloadFileInit+0x90>)
   16af8:	2203      	movs	r2, #3
   16afa:	701a      	strb	r2, [r3, #0]
}
   16afc:	46c0      	nop			; (mov r8, r8)
   16afe:	46bd      	mov	sp, r7
   16b00:	bd80      	pop	{r7, pc}
   16b02:	46c0      	nop			; (mov r8, r8)
   16b04:	0003608c 	.word	0x0003608c
   16b08:	2000073c 	.word	0x2000073c
   16b0c:	0002f63d 	.word	0x0002f63d
   16b10:	00036498 	.word	0x00036498
   16b14:	0001db81 	.word	0x0001db81
   16b18:	00021c71 	.word	0x00021c71
   16b1c:	0002522d 	.word	0x0002522d
   16b20:	200004dc 	.word	0x200004dc
   16b24:	000161b9 	.word	0x000161b9
   16b28:	00016185 	.word	0x00016185
   16b2c:	00025275 	.word	0x00025275
   16b30:	000251dd 	.word	0x000251dd
   16b34:	00015dad 	.word	0x00015dad
   16b38:	200004c8 	.word	0x200004c8

00016b3c <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   16b3c:	b580      	push	{r7, lr}
   16b3e:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16b40:	e009      	b.n	16b56 <HTTP_DownloadFileTransaction+0x1a>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   16b42:	2000      	movs	r0, #0
   16b44:	4b16      	ldr	r3, [pc, #88]	; (16ba0 <HTTP_DownloadFileTransaction+0x64>)
   16b46:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   16b48:	4b16      	ldr	r3, [pc, #88]	; (16ba4 <HTTP_DownloadFileTransaction+0x68>)
   16b4a:	0018      	movs	r0, r3
   16b4c:	4b16      	ldr	r3, [pc, #88]	; (16ba8 <HTTP_DownloadFileTransaction+0x6c>)
   16b4e:	4798      	blx	r3
        vTaskDelay(5);
   16b50:	2005      	movs	r0, #5
   16b52:	4b16      	ldr	r3, [pc, #88]	; (16bac <HTTP_DownloadFileTransaction+0x70>)
   16b54:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16b56:	2010      	movs	r0, #16
   16b58:	4b15      	ldr	r3, [pc, #84]	; (16bb0 <HTTP_DownloadFileTransaction+0x74>)
   16b5a:	4798      	blx	r3
   16b5c:	0003      	movs	r3, r0
   16b5e:	001a      	movs	r2, r3
   16b60:	2301      	movs	r3, #1
   16b62:	4053      	eors	r3, r2
   16b64:	b2db      	uxtb	r3, r3
   16b66:	2b00      	cmp	r3, #0
   16b68:	d009      	beq.n	16b7e <HTTP_DownloadFileTransaction+0x42>
   16b6a:	2020      	movs	r0, #32
   16b6c:	4b10      	ldr	r3, [pc, #64]	; (16bb0 <HTTP_DownloadFileTransaction+0x74>)
   16b6e:	4798      	blx	r3
   16b70:	0003      	movs	r3, r0
   16b72:	001a      	movs	r2, r3
   16b74:	2301      	movs	r3, #1
   16b76:	4053      	eors	r3, r2
   16b78:	b2db      	uxtb	r3, r3
   16b7a:	2b00      	cmp	r3, #0
   16b7c:	d1e1      	bne.n	16b42 <HTTP_DownloadFileTransaction+0x6>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   16b7e:	4b0d      	ldr	r3, [pc, #52]	; (16bb4 <HTTP_DownloadFileTransaction+0x78>)
   16b80:	4798      	blx	r3
    vTaskDelay(1000);
   16b82:	23fa      	movs	r3, #250	; 0xfa
   16b84:	009b      	lsls	r3, r3, #2
   16b86:	0018      	movs	r0, r3
   16b88:	4b08      	ldr	r3, [pc, #32]	; (16bac <HTTP_DownloadFileTransaction+0x70>)
   16b8a:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   16b8c:	4b0a      	ldr	r3, [pc, #40]	; (16bb8 <HTTP_DownloadFileTransaction+0x7c>)
   16b8e:	2200      	movs	r2, #0
   16b90:	701a      	strb	r2, [r3, #0]
    wifiStateMachine = WIFI_MQTT_INIT;
   16b92:	4b0a      	ldr	r3, [pc, #40]	; (16bbc <HTTP_DownloadFileTransaction+0x80>)
   16b94:	2200      	movs	r2, #0
   16b96:	701a      	strb	r2, [r3, #0]
}
   16b98:	46c0      	nop			; (mov r8, r8)
   16b9a:	46bd      	mov	sp, r7
   16b9c:	bd80      	pop	{r7, pc}
   16b9e:	46c0      	nop			; (mov r8, r8)
   16ba0:	00021c71 	.word	0x00021c71
   16ba4:	20004708 	.word	0x20004708
   16ba8:	00032365 	.word	0x00032365
   16bac:	0001be41 	.word	0x0001be41
   16bb0:	00015a85 	.word	0x00015a85
   16bb4:	0002522d 	.word	0x0002522d
   16bb8:	200004dc 	.word	0x200004dc
   16bbc:	200004c8 	.word	0x200004c8

00016bc0 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   16bc0:	b580      	push	{r7, lr}
   16bc2:	af00      	add	r7, sp, #0
    socketDeinit();
   16bc4:	4b18      	ldr	r3, [pc, #96]	; (16c28 <MQTT_InitRoutine+0x68>)
   16bc6:	4798      	blx	r3
    configure_mqtt();
   16bc8:	4b18      	ldr	r3, [pc, #96]	; (16c2c <MQTT_InitRoutine+0x6c>)
   16bca:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   16bcc:	4a18      	ldr	r2, [pc, #96]	; (16c30 <MQTT_InitRoutine+0x70>)
   16bce:	4b19      	ldr	r3, [pc, #100]	; (16c34 <MQTT_InitRoutine+0x74>)
   16bd0:	0011      	movs	r1, r2
   16bd2:	0018      	movs	r0, r3
   16bd4:	4b18      	ldr	r3, [pc, #96]	; (16c38 <MQTT_InitRoutine+0x78>)
   16bd6:	4798      	blx	r3
    socketInit();
   16bd8:	4b18      	ldr	r3, [pc, #96]	; (16c3c <MQTT_InitRoutine+0x7c>)
   16bda:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   16bdc:	4b18      	ldr	r3, [pc, #96]	; (16c40 <MQTT_InitRoutine+0x80>)
   16bde:	2234      	movs	r2, #52	; 0x34
   16be0:	5c9b      	ldrb	r3, [r3, r2]
   16be2:	2201      	movs	r2, #1
   16be4:	4053      	eors	r3, r2
   16be6:	b2db      	uxtb	r3, r3
   16be8:	2b00      	cmp	r3, #0
   16bea:	d00c      	beq.n	16c06 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   16bec:	4a15      	ldr	r2, [pc, #84]	; (16c44 <MQTT_InitRoutine+0x84>)
   16bee:	4b14      	ldr	r3, [pc, #80]	; (16c40 <MQTT_InitRoutine+0x80>)
   16bf0:	0011      	movs	r1, r2
   16bf2:	0018      	movs	r0, r3
   16bf4:	4b14      	ldr	r3, [pc, #80]	; (16c48 <MQTT_InitRoutine+0x88>)
   16bf6:	4798      	blx	r3
   16bf8:	1e03      	subs	r3, r0, #0
   16bfa:	d004      	beq.n	16c06 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16bfc:	4b13      	ldr	r3, [pc, #76]	; (16c4c <MQTT_InitRoutine+0x8c>)
   16bfe:	0019      	movs	r1, r3
   16c00:	2001      	movs	r0, #1
   16c02:	4b13      	ldr	r3, [pc, #76]	; (16c50 <MQTT_InitRoutine+0x90>)
   16c04:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   16c06:	4b0e      	ldr	r3, [pc, #56]	; (16c40 <MQTT_InitRoutine+0x80>)
   16c08:	2234      	movs	r2, #52	; 0x34
   16c0a:	5c9b      	ldrb	r3, [r3, r2]
   16c0c:	2b00      	cmp	r3, #0
   16c0e:	d004      	beq.n	16c1a <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   16c10:	4b10      	ldr	r3, [pc, #64]	; (16c54 <MQTT_InitRoutine+0x94>)
   16c12:	0019      	movs	r1, r3
   16c14:	2001      	movs	r0, #1
   16c16:	4b0e      	ldr	r3, [pc, #56]	; (16c50 <MQTT_InitRoutine+0x90>)
   16c18:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   16c1a:	4b0f      	ldr	r3, [pc, #60]	; (16c58 <MQTT_InitRoutine+0x98>)
   16c1c:	2201      	movs	r2, #1
   16c1e:	701a      	strb	r2, [r3, #0]
}
   16c20:	46c0      	nop			; (mov r8, r8)
   16c22:	46bd      	mov	sp, r7
   16c24:	bd80      	pop	{r7, pc}
   16c26:	46c0      	nop			; (mov r8, r8)
   16c28:	0002522d 	.word	0x0002522d
   16c2c:	00016939 	.word	0x00016939
   16c30:	00016545 	.word	0x00016545
   16c34:	00016511 	.word	0x00016511
   16c38:	00025275 	.word	0x00025275
   16c3c:	000251dd 	.word	0x000251dd
   16c40:	2000073c 	.word	0x2000073c
   16c44:	0003608c 	.word	0x0003608c
   16c48:	0002f509 	.word	0x0002f509
   16c4c:	00036498 	.word	0x00036498
   16c50:	0001db81 	.word	0x0001db81
   16c54:	000368e0 	.word	0x000368e0
   16c58:	200004c8 	.word	0x200004c8

00016c5c <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   16c5c:	b580      	push	{r7, lr}
   16c5e:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   16c60:	2000      	movs	r0, #0
   16c62:	4b0b      	ldr	r3, [pc, #44]	; (16c90 <MQTT_HandleTransactions+0x34>)
   16c64:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   16c66:	4b0b      	ldr	r3, [pc, #44]	; (16c94 <MQTT_HandleTransactions+0x38>)
   16c68:	0018      	movs	r0, r3
   16c6a:	4b0b      	ldr	r3, [pc, #44]	; (16c98 <MQTT_HandleTransactions+0x3c>)
   16c6c:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   16c6e:	4b0b      	ldr	r3, [pc, #44]	; (16c9c <MQTT_HandleTransactions+0x40>)
   16c70:	4798      	blx	r3
    MQTT_HandleImuMessages();
   16c72:	4b0b      	ldr	r3, [pc, #44]	; (16ca0 <MQTT_HandleTransactions+0x44>)
   16c74:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   16c76:	4b0b      	ldr	r3, [pc, #44]	; (16ca4 <MQTT_HandleTransactions+0x48>)
   16c78:	2234      	movs	r2, #52	; 0x34
   16c7a:	5c9b      	ldrb	r3, [r3, r2]
   16c7c:	2b00      	cmp	r3, #0
   16c7e:	d004      	beq.n	16c8a <MQTT_HandleTransactions+0x2e>
   16c80:	4b08      	ldr	r3, [pc, #32]	; (16ca4 <MQTT_HandleTransactions+0x48>)
   16c82:	2164      	movs	r1, #100	; 0x64
   16c84:	0018      	movs	r0, r3
   16c86:	4b08      	ldr	r3, [pc, #32]	; (16ca8 <MQTT_HandleTransactions+0x4c>)
   16c88:	4798      	blx	r3
}
   16c8a:	46c0      	nop			; (mov r8, r8)
   16c8c:	46bd      	mov	sp, r7
   16c8e:	bd80      	pop	{r7, pc}
   16c90:	00021c71 	.word	0x00021c71
   16c94:	20004708 	.word	0x20004708
   16c98:	00032365 	.word	0x00032365
   16c9c:	00016d39 	.word	0x00016d39
   16ca0:	00016cad 	.word	0x00016cad
   16ca4:	2000073c 	.word	0x2000073c
   16ca8:	0002f739 	.word	0x0002f739

00016cac <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   16cac:	b590      	push	{r4, r7, lr}
   16cae:	b085      	sub	sp, #20
   16cb0:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   16cb2:	4b18      	ldr	r3, [pc, #96]	; (16d14 <MQTT_HandleImuMessages+0x68>)
   16cb4:	681b      	ldr	r3, [r3, #0]
   16cb6:	0039      	movs	r1, r7
   16cb8:	2200      	movs	r2, #0
   16cba:	0018      	movs	r0, r3
   16cbc:	4b16      	ldr	r3, [pc, #88]	; (16d18 <MQTT_HandleImuMessages+0x6c>)
   16cbe:	4798      	blx	r3
   16cc0:	0003      	movs	r3, r0
   16cc2:	2b01      	cmp	r3, #1
   16cc4:	d121      	bne.n	16d0a <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   16cc6:	003b      	movs	r3, r7
   16cc8:	2200      	movs	r2, #0
   16cca:	5e9b      	ldrsh	r3, [r3, r2]
   16ccc:	001c      	movs	r4, r3
   16cce:	003b      	movs	r3, r7
   16cd0:	2202      	movs	r2, #2
   16cd2:	5e9b      	ldrsh	r3, [r3, r2]
   16cd4:	0019      	movs	r1, r3
   16cd6:	003b      	movs	r3, r7
   16cd8:	2204      	movs	r2, #4
   16cda:	5e9b      	ldrsh	r3, [r3, r2]
   16cdc:	4a0f      	ldr	r2, [pc, #60]	; (16d1c <MQTT_HandleImuMessages+0x70>)
   16cde:	4810      	ldr	r0, [pc, #64]	; (16d20 <MQTT_HandleImuMessages+0x74>)
   16ce0:	9301      	str	r3, [sp, #4]
   16ce2:	9100      	str	r1, [sp, #0]
   16ce4:	0023      	movs	r3, r4
   16ce6:	213f      	movs	r1, #63	; 0x3f
   16ce8:	4c0e      	ldr	r4, [pc, #56]	; (16d24 <MQTT_HandleImuMessages+0x78>)
   16cea:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   16cec:	4b0c      	ldr	r3, [pc, #48]	; (16d20 <MQTT_HandleImuMessages+0x74>)
   16cee:	0018      	movs	r0, r3
   16cf0:	4b0d      	ldr	r3, [pc, #52]	; (16d28 <MQTT_HandleImuMessages+0x7c>)
   16cf2:	4798      	blx	r3
   16cf4:	0004      	movs	r4, r0
   16cf6:	4a0a      	ldr	r2, [pc, #40]	; (16d20 <MQTT_HandleImuMessages+0x74>)
   16cf8:	490c      	ldr	r1, [pc, #48]	; (16d2c <MQTT_HandleImuMessages+0x80>)
   16cfa:	480d      	ldr	r0, [pc, #52]	; (16d30 <MQTT_HandleImuMessages+0x84>)
   16cfc:	2300      	movs	r3, #0
   16cfe:	9301      	str	r3, [sp, #4]
   16d00:	2301      	movs	r3, #1
   16d02:	9300      	str	r3, [sp, #0]
   16d04:	0023      	movs	r3, r4
   16d06:	4c0b      	ldr	r4, [pc, #44]	; (16d34 <MQTT_HandleImuMessages+0x88>)
   16d08:	47a0      	blx	r4
    }
}
   16d0a:	46c0      	nop			; (mov r8, r8)
   16d0c:	46bd      	mov	sp, r7
   16d0e:	b003      	add	sp, #12
   16d10:	bd90      	pop	{r4, r7, pc}
   16d12:	46c0      	nop			; (mov r8, r8)
   16d14:	200004d4 	.word	0x200004d4
   16d18:	0001ac95 	.word	0x0001ac95
   16d1c:	000368fc 	.word	0x000368fc
   16d20:	20000050 	.word	0x20000050
   16d24:	00034939 	.word	0x00034939
   16d28:	00034a97 	.word	0x00034a97
   16d2c:	000367f4 	.word	0x000367f4
   16d30:	2000073c 	.word	0x2000073c
   16d34:	0002f685 	.word	0x0002f685

00016d38 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   16d38:	b590      	push	{r4, r7, lr}
   16d3a:	b08b      	sub	sp, #44	; 0x2c
   16d3c:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   16d3e:	4b39      	ldr	r3, [pc, #228]	; (16e24 <MQTT_HandleGameMessages+0xec>)
   16d40:	681b      	ldr	r3, [r3, #0]
   16d42:	2208      	movs	r2, #8
   16d44:	18b9      	adds	r1, r7, r2
   16d46:	2200      	movs	r2, #0
   16d48:	0018      	movs	r0, r3
   16d4a:	4b37      	ldr	r3, [pc, #220]	; (16e28 <MQTT_HandleGameMessages+0xf0>)
   16d4c:	4798      	blx	r3
   16d4e:	0003      	movs	r3, r0
   16d50:	2b01      	cmp	r3, #1
   16d52:	d163      	bne.n	16e1c <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   16d54:	4b35      	ldr	r3, [pc, #212]	; (16e2c <MQTT_HandleGameMessages+0xf4>)
   16d56:	4a36      	ldr	r2, [pc, #216]	; (16e30 <MQTT_HandleGameMessages+0xf8>)
   16d58:	ca03      	ldmia	r2!, {r0, r1}
   16d5a:	c303      	stmia	r3!, {r0, r1}
   16d5c:	8812      	ldrh	r2, [r2, #0]
   16d5e:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   16d60:	2300      	movs	r3, #0
   16d62:	61fb      	str	r3, [r7, #28]
   16d64:	e02d      	b.n	16dc2 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   16d66:	2308      	movs	r3, #8
   16d68:	18fa      	adds	r2, r7, r3
   16d6a:	69fb      	ldr	r3, [r7, #28]
   16d6c:	18d3      	adds	r3, r2, r3
   16d6e:	781b      	ldrb	r3, [r3, #0]
   16d70:	2bff      	cmp	r3, #255	; 0xff
   16d72:	d02a      	beq.n	16dca <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   16d74:	2308      	movs	r3, #8
   16d76:	18fa      	adds	r2, r7, r3
   16d78:	69fb      	ldr	r3, [r7, #28]
   16d7a:	18d3      	adds	r3, r2, r3
   16d7c:	781b      	ldrb	r3, [r3, #0]
   16d7e:	4a2d      	ldr	r2, [pc, #180]	; (16e34 <MQTT_HandleGameMessages+0xfc>)
   16d80:	0038      	movs	r0, r7
   16d82:	2103      	movs	r1, #3
   16d84:	4c2c      	ldr	r4, [pc, #176]	; (16e38 <MQTT_HandleGameMessages+0x100>)
   16d86:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   16d88:	003a      	movs	r2, r7
   16d8a:	4b28      	ldr	r3, [pc, #160]	; (16e2c <MQTT_HandleGameMessages+0xf4>)
   16d8c:	0011      	movs	r1, r2
   16d8e:	0018      	movs	r0, r3
   16d90:	4b2a      	ldr	r3, [pc, #168]	; (16e3c <MQTT_HandleGameMessages+0x104>)
   16d92:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   16d94:	69fb      	ldr	r3, [r7, #28]
   16d96:	3301      	adds	r3, #1
   16d98:	2208      	movs	r2, #8
   16d9a:	18ba      	adds	r2, r7, r2
   16d9c:	5cd3      	ldrb	r3, [r2, r3]
   16d9e:	2bff      	cmp	r3, #255	; 0xff
   16da0:	d00c      	beq.n	16dbc <MQTT_HandleGameMessages+0x84>
   16da2:	69fb      	ldr	r3, [r7, #28]
   16da4:	3301      	adds	r3, #1
   16da6:	2b13      	cmp	r3, #19
   16da8:	dc08      	bgt.n	16dbc <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   16daa:	003b      	movs	r3, r7
   16dac:	222c      	movs	r2, #44	; 0x2c
   16dae:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   16db0:	003a      	movs	r2, r7
   16db2:	4b1e      	ldr	r3, [pc, #120]	; (16e2c <MQTT_HandleGameMessages+0xf4>)
   16db4:	0011      	movs	r1, r2
   16db6:	0018      	movs	r0, r3
   16db8:	4b20      	ldr	r3, [pc, #128]	; (16e3c <MQTT_HandleGameMessages+0x104>)
   16dba:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   16dbc:	69fb      	ldr	r3, [r7, #28]
   16dbe:	3301      	adds	r3, #1
   16dc0:	61fb      	str	r3, [r7, #28]
   16dc2:	69fb      	ldr	r3, [r7, #28]
   16dc4:	2b13      	cmp	r3, #19
   16dc6:	ddce      	ble.n	16d66 <MQTT_HandleGameMessages+0x2e>
   16dc8:	e000      	b.n	16dcc <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   16dca:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   16dcc:	4b17      	ldr	r3, [pc, #92]	; (16e2c <MQTT_HandleGameMessages+0xf4>)
   16dce:	0018      	movs	r0, r3
   16dd0:	4b1b      	ldr	r3, [pc, #108]	; (16e40 <MQTT_HandleGameMessages+0x108>)
   16dd2:	4798      	blx	r3
   16dd4:	0003      	movs	r3, r0
   16dd6:	001a      	movs	r2, r3
   16dd8:	4b14      	ldr	r3, [pc, #80]	; (16e2c <MQTT_HandleGameMessages+0xf4>)
   16dda:	18d2      	adds	r2, r2, r3
   16ddc:	4b19      	ldr	r3, [pc, #100]	; (16e44 <MQTT_HandleGameMessages+0x10c>)
   16dde:	0010      	movs	r0, r2
   16de0:	0019      	movs	r1, r3
   16de2:	2303      	movs	r3, #3
   16de4:	001a      	movs	r2, r3
   16de6:	4b18      	ldr	r3, [pc, #96]	; (16e48 <MQTT_HandleGameMessages+0x110>)
   16de8:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   16dea:	4b10      	ldr	r3, [pc, #64]	; (16e2c <MQTT_HandleGameMessages+0xf4>)
   16dec:	0019      	movs	r1, r3
   16dee:	2001      	movs	r0, #1
   16df0:	4b16      	ldr	r3, [pc, #88]	; (16e4c <MQTT_HandleGameMessages+0x114>)
   16df2:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   16df4:	4b16      	ldr	r3, [pc, #88]	; (16e50 <MQTT_HandleGameMessages+0x118>)
   16df6:	0019      	movs	r1, r3
   16df8:	2001      	movs	r0, #1
   16dfa:	4b14      	ldr	r3, [pc, #80]	; (16e4c <MQTT_HandleGameMessages+0x114>)
   16dfc:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   16dfe:	4b0b      	ldr	r3, [pc, #44]	; (16e2c <MQTT_HandleGameMessages+0xf4>)
   16e00:	0018      	movs	r0, r3
   16e02:	4b0f      	ldr	r3, [pc, #60]	; (16e40 <MQTT_HandleGameMessages+0x108>)
   16e04:	4798      	blx	r3
   16e06:	0004      	movs	r4, r0
   16e08:	4a08      	ldr	r2, [pc, #32]	; (16e2c <MQTT_HandleGameMessages+0xf4>)
   16e0a:	4912      	ldr	r1, [pc, #72]	; (16e54 <MQTT_HandleGameMessages+0x11c>)
   16e0c:	4812      	ldr	r0, [pc, #72]	; (16e58 <MQTT_HandleGameMessages+0x120>)
   16e0e:	2300      	movs	r3, #0
   16e10:	9301      	str	r3, [sp, #4]
   16e12:	2301      	movs	r3, #1
   16e14:	9300      	str	r3, [sp, #0]
   16e16:	0023      	movs	r3, r4
   16e18:	4c10      	ldr	r4, [pc, #64]	; (16e5c <MQTT_HandleGameMessages+0x124>)
   16e1a:	47a0      	blx	r4
    }
}
   16e1c:	46c0      	nop			; (mov r8, r8)
   16e1e:	46bd      	mov	sp, r7
   16e20:	b009      	add	sp, #36	; 0x24
   16e22:	bd90      	pop	{r4, r7, pc}
   16e24:	200004d0 	.word	0x200004d0
   16e28:	0001ac95 	.word	0x0001ac95
   16e2c:	20000050 	.word	0x20000050
   16e30:	00036634 	.word	0x00036634
   16e34:	00036920 	.word	0x00036920
   16e38:	00034939 	.word	0x00034939
   16e3c:	00034a1d 	.word	0x00034a1d
   16e40:	00034a97 	.word	0x00034a97
   16e44:	00036924 	.word	0x00036924
   16e48:	000346a9 	.word	0x000346a9
   16e4c:	0001db81 	.word	0x0001db81
   16e50:	00036928 	.word	0x00036928
   16e54:	0003692c 	.word	0x0003692c
   16e58:	2000073c 	.word	0x2000073c
   16e5c:	0002f685 	.word	0x0002f685

00016e60 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   16e60:	b590      	push	{r4, r7, lr}
   16e62:	b08d      	sub	sp, #52	; 0x34
   16e64:	af02      	add	r7, sp, #8
   16e66:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   16e68:	2064      	movs	r0, #100	; 0x64
   16e6a:	4b7e      	ldr	r3, [pc, #504]	; (17064 <vWifiTask+0x204>)
   16e6c:	4798      	blx	r3
    init_state();
   16e6e:	4b7e      	ldr	r3, [pc, #504]	; (17068 <vWifiTask+0x208>)
   16e70:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   16e72:	2200      	movs	r2, #0
   16e74:	2104      	movs	r1, #4
   16e76:	2005      	movs	r0, #5
   16e78:	4b7c      	ldr	r3, [pc, #496]	; (1706c <vWifiTask+0x20c>)
   16e7a:	4798      	blx	r3
   16e7c:	0002      	movs	r2, r0
   16e7e:	4b7c      	ldr	r3, [pc, #496]	; (17070 <vWifiTask+0x210>)
   16e80:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   16e82:	2200      	movs	r2, #0
   16e84:	2106      	movs	r1, #6
   16e86:	2005      	movs	r0, #5
   16e88:	4b78      	ldr	r3, [pc, #480]	; (1706c <vWifiTask+0x20c>)
   16e8a:	4798      	blx	r3
   16e8c:	0002      	movs	r2, r0
   16e8e:	4b79      	ldr	r3, [pc, #484]	; (17074 <vWifiTask+0x214>)
   16e90:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   16e92:	2200      	movs	r2, #0
   16e94:	2114      	movs	r1, #20
   16e96:	2002      	movs	r0, #2
   16e98:	4b74      	ldr	r3, [pc, #464]	; (1706c <vWifiTask+0x20c>)
   16e9a:	4798      	blx	r3
   16e9c:	0002      	movs	r2, r0
   16e9e:	4b76      	ldr	r3, [pc, #472]	; (17078 <vWifiTask+0x218>)
   16ea0:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   16ea2:	2200      	movs	r2, #0
   16ea4:	2102      	movs	r1, #2
   16ea6:	2005      	movs	r0, #5
   16ea8:	4b70      	ldr	r3, [pc, #448]	; (1706c <vWifiTask+0x20c>)
   16eaa:	4798      	blx	r3
   16eac:	0002      	movs	r2, r0
   16eae:	4b73      	ldr	r3, [pc, #460]	; (1707c <vWifiTask+0x21c>)
   16eb0:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   16eb2:	4b6f      	ldr	r3, [pc, #444]	; (17070 <vWifiTask+0x210>)
   16eb4:	681b      	ldr	r3, [r3, #0]
   16eb6:	2b00      	cmp	r3, #0
   16eb8:	d00b      	beq.n	16ed2 <vWifiTask+0x72>
   16eba:	4b6e      	ldr	r3, [pc, #440]	; (17074 <vWifiTask+0x214>)
   16ebc:	681b      	ldr	r3, [r3, #0]
   16ebe:	2b00      	cmp	r3, #0
   16ec0:	d007      	beq.n	16ed2 <vWifiTask+0x72>
   16ec2:	4b6d      	ldr	r3, [pc, #436]	; (17078 <vWifiTask+0x218>)
   16ec4:	681b      	ldr	r3, [r3, #0]
   16ec6:	2b00      	cmp	r3, #0
   16ec8:	d003      	beq.n	16ed2 <vWifiTask+0x72>
   16eca:	4b6c      	ldr	r3, [pc, #432]	; (1707c <vWifiTask+0x21c>)
   16ecc:	681b      	ldr	r3, [r3, #0]
   16ece:	2b00      	cmp	r3, #0
   16ed0:	d103      	bne.n	16eda <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   16ed2:	4b6b      	ldr	r3, [pc, #428]	; (17080 <vWifiTask+0x220>)
   16ed4:	0018      	movs	r0, r3
   16ed6:	4b6b      	ldr	r3, [pc, #428]	; (17084 <vWifiTask+0x224>)
   16ed8:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   16eda:	4b6b      	ldr	r3, [pc, #428]	; (17088 <vWifiTask+0x228>)
   16edc:	0018      	movs	r0, r3
   16ede:	4b69      	ldr	r3, [pc, #420]	; (17084 <vWifiTask+0x224>)
   16ee0:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   16ee2:	4b6a      	ldr	r3, [pc, #424]	; (1708c <vWifiTask+0x22c>)
   16ee4:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   16ee6:	4b6a      	ldr	r3, [pc, #424]	; (17090 <vWifiTask+0x230>)
   16ee8:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   16eea:	4b6a      	ldr	r3, [pc, #424]	; (17094 <vWifiTask+0x234>)
   16eec:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   16eee:	4b6a      	ldr	r3, [pc, #424]	; (17098 <vWifiTask+0x238>)
   16ef0:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   16ef2:	4b6a      	ldr	r3, [pc, #424]	; (1709c <vWifiTask+0x23c>)
   16ef4:	4798      	blx	r3
    configure_extint_callbacks();
   16ef6:	4b6a      	ldr	r3, [pc, #424]	; (170a0 <vWifiTask+0x240>)
   16ef8:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   16efa:	230c      	movs	r3, #12
   16efc:	18fb      	adds	r3, r7, r3
   16efe:	2218      	movs	r2, #24
   16f00:	2100      	movs	r1, #0
   16f02:	0018      	movs	r0, r3
   16f04:	4b67      	ldr	r3, [pc, #412]	; (170a4 <vWifiTask+0x244>)
   16f06:	4798      	blx	r3

    nm_bsp_init();
   16f08:	4b67      	ldr	r3, [pc, #412]	; (170a8 <vWifiTask+0x248>)
   16f0a:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   16f0c:	230c      	movs	r3, #12
   16f0e:	18fb      	adds	r3, r7, r3
   16f10:	4a66      	ldr	r2, [pc, #408]	; (170ac <vWifiTask+0x24c>)
   16f12:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   16f14:	2327      	movs	r3, #39	; 0x27
   16f16:	18fc      	adds	r4, r7, r3
   16f18:	230c      	movs	r3, #12
   16f1a:	18fb      	adds	r3, r7, r3
   16f1c:	0018      	movs	r0, r3
   16f1e:	4b64      	ldr	r3, [pc, #400]	; (170b0 <vWifiTask+0x250>)
   16f20:	4798      	blx	r3
   16f22:	0003      	movs	r3, r0
   16f24:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   16f26:	2327      	movs	r3, #39	; 0x27
   16f28:	18fb      	adds	r3, r7, r3
   16f2a:	781b      	ldrb	r3, [r3, #0]
   16f2c:	b25b      	sxtb	r3, r3
   16f2e:	2b00      	cmp	r3, #0
   16f30:	d009      	beq.n	16f46 <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   16f32:	2327      	movs	r3, #39	; 0x27
   16f34:	18fb      	adds	r3, r7, r3
   16f36:	2200      	movs	r2, #0
   16f38:	569a      	ldrsb	r2, [r3, r2]
   16f3a:	4b5e      	ldr	r3, [pc, #376]	; (170b4 <vWifiTask+0x254>)
   16f3c:	0019      	movs	r1, r3
   16f3e:	2001      	movs	r0, #1
   16f40:	4b5d      	ldr	r3, [pc, #372]	; (170b8 <vWifiTask+0x258>)
   16f42:	4798      	blx	r3
        while (1) {
   16f44:	e7fe      	b.n	16f44 <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   16f46:	4a5d      	ldr	r2, [pc, #372]	; (170bc <vWifiTask+0x25c>)
   16f48:	4b5d      	ldr	r3, [pc, #372]	; (170c0 <vWifiTask+0x260>)
   16f4a:	0019      	movs	r1, r3
   16f4c:	2001      	movs	r0, #1
   16f4e:	4b5a      	ldr	r3, [pc, #360]	; (170b8 <vWifiTask+0x258>)
   16f50:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   16f52:	4b5c      	ldr	r3, [pc, #368]	; (170c4 <vWifiTask+0x264>)
   16f54:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   16f56:	4a5c      	ldr	r2, [pc, #368]	; (170c8 <vWifiTask+0x268>)
   16f58:	4b5c      	ldr	r3, [pc, #368]	; (170cc <vWifiTask+0x26c>)
   16f5a:	0011      	movs	r1, r2
   16f5c:	0018      	movs	r0, r3
   16f5e:	4b5c      	ldr	r3, [pc, #368]	; (170d0 <vWifiTask+0x270>)
   16f60:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   16f62:	4a5c      	ldr	r2, [pc, #368]	; (170d4 <vWifiTask+0x274>)
   16f64:	4855      	ldr	r0, [pc, #340]	; (170bc <vWifiTask+0x25c>)
   16f66:	23ff      	movs	r3, #255	; 0xff
   16f68:	9300      	str	r3, [sp, #0]
   16f6a:	0013      	movs	r3, r2
   16f6c:	2202      	movs	r2, #2
   16f6e:	210b      	movs	r1, #11
   16f70:	4c59      	ldr	r4, [pc, #356]	; (170d8 <vWifiTask+0x278>)
   16f72:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   16f74:	e006      	b.n	16f84 <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   16f76:	2000      	movs	r0, #0
   16f78:	4b58      	ldr	r3, [pc, #352]	; (170dc <vWifiTask+0x27c>)
   16f7a:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   16f7c:	4b58      	ldr	r3, [pc, #352]	; (170e0 <vWifiTask+0x280>)
   16f7e:	0018      	movs	r0, r3
   16f80:	4b58      	ldr	r3, [pc, #352]	; (170e4 <vWifiTask+0x284>)
   16f82:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   16f84:	2002      	movs	r0, #2
   16f86:	4b58      	ldr	r3, [pc, #352]	; (170e8 <vWifiTask+0x288>)
   16f88:	4798      	blx	r3
   16f8a:	0003      	movs	r3, r0
   16f8c:	001a      	movs	r2, r3
   16f8e:	2301      	movs	r3, #1
   16f90:	4053      	eors	r3, r2
   16f92:	b2db      	uxtb	r3, r3
   16f94:	2b00      	cmp	r3, #0
   16f96:	d1ee      	bne.n	16f76 <vWifiTask+0x116>
    }

    vTaskDelay(1000);
   16f98:	23fa      	movs	r3, #250	; 0xfa
   16f9a:	009b      	lsls	r3, r3, #2
   16f9c:	0018      	movs	r0, r3
   16f9e:	4b31      	ldr	r3, [pc, #196]	; (17064 <vWifiTask+0x204>)
   16fa0:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   16fa2:	4b52      	ldr	r3, [pc, #328]	; (170ec <vWifiTask+0x28c>)
   16fa4:	2201      	movs	r2, #1
   16fa6:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   16fa8:	4b50      	ldr	r3, [pc, #320]	; (170ec <vWifiTask+0x28c>)
   16faa:	781b      	ldrb	r3, [r3, #0]
   16fac:	b25b      	sxtb	r3, r3
   16fae:	2b01      	cmp	r3, #1
   16fb0:	d00b      	beq.n	16fca <vWifiTask+0x16a>
   16fb2:	dc02      	bgt.n	16fba <vWifiTask+0x15a>
   16fb4:	2b00      	cmp	r3, #0
   16fb6:	d005      	beq.n	16fc4 <vWifiTask+0x164>
   16fb8:	e019      	b.n	16fee <vWifiTask+0x18e>
   16fba:	2b02      	cmp	r3, #2
   16fbc:	d008      	beq.n	16fd0 <vWifiTask+0x170>
   16fbe:	2b03      	cmp	r3, #3
   16fc0:	d009      	beq.n	16fd6 <vWifiTask+0x176>
   16fc2:	e014      	b.n	16fee <vWifiTask+0x18e>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   16fc4:	4b4a      	ldr	r3, [pc, #296]	; (170f0 <vWifiTask+0x290>)
   16fc6:	4798      	blx	r3

                break;
   16fc8:	e015      	b.n	16ff6 <vWifiTask+0x196>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   16fca:	4b4a      	ldr	r3, [pc, #296]	; (170f4 <vWifiTask+0x294>)
   16fcc:	4798      	blx	r3
                break;
   16fce:	e012      	b.n	16ff6 <vWifiTask+0x196>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   16fd0:	4b49      	ldr	r3, [pc, #292]	; (170f8 <vWifiTask+0x298>)
   16fd2:	4798      	blx	r3
                break;
   16fd4:	e00f      	b.n	16ff6 <vWifiTask+0x196>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   16fd6:	4b49      	ldr	r3, [pc, #292]	; (170fc <vWifiTask+0x29c>)
   16fd8:	4798      	blx	r3
				set_update_flag();
   16fda:	4b49      	ldr	r3, [pc, #292]	; (17100 <vWifiTask+0x2a0>)
   16fdc:	4798      	blx	r3
				vTaskDelay(2000);
   16fde:	23fa      	movs	r3, #250	; 0xfa
   16fe0:	00db      	lsls	r3, r3, #3
   16fe2:	0018      	movs	r0, r3
   16fe4:	4b1f      	ldr	r3, [pc, #124]	; (17064 <vWifiTask+0x204>)
   16fe6:	4798      	blx	r3
				system_reset();
   16fe8:	4b46      	ldr	r3, [pc, #280]	; (17104 <vWifiTask+0x2a4>)
   16fea:	4798      	blx	r3
                break;
   16fec:	e003      	b.n	16ff6 <vWifiTask+0x196>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   16fee:	4b3f      	ldr	r3, [pc, #252]	; (170ec <vWifiTask+0x28c>)
   16ff0:	2200      	movs	r2, #0
   16ff2:	701a      	strb	r2, [r3, #0]
                break;
   16ff4:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   16ff6:	230b      	movs	r3, #11
   16ff8:	18fb      	adds	r3, r7, r3
   16ffa:	2200      	movs	r2, #0
   16ffc:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   16ffe:	4b1c      	ldr	r3, [pc, #112]	; (17070 <vWifiTask+0x210>)
   17000:	681b      	ldr	r3, [r3, #0]
   17002:	220b      	movs	r2, #11
   17004:	18b9      	adds	r1, r7, r2
   17006:	2200      	movs	r2, #0
   17008:	0018      	movs	r0, r3
   1700a:	4b3f      	ldr	r3, [pc, #252]	; (17108 <vWifiTask+0x2a8>)
   1700c:	4798      	blx	r3
   1700e:	0003      	movs	r3, r0
   17010:	2b01      	cmp	r3, #1
   17012:	d105      	bne.n	17020 <vWifiTask+0x1c0>
            wifiStateMachine = DataToReceive;  // Update new state
   17014:	230b      	movs	r3, #11
   17016:	18fb      	adds	r3, r7, r3
   17018:	781b      	ldrb	r3, [r3, #0]
   1701a:	b25a      	sxtb	r2, r3
   1701c:	4b33      	ldr	r3, [pc, #204]	; (170ec <vWifiTask+0x28c>)
   1701e:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   17020:	4b3a      	ldr	r3, [pc, #232]	; (1710c <vWifiTask+0x2ac>)
   17022:	781b      	ldrb	r3, [r3, #0]
   17024:	b2db      	uxtb	r3, r3
   17026:	2b00      	cmp	r3, #0
   17028:	d017      	beq.n	1705a <vWifiTask+0x1fa>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   1702a:	4b39      	ldr	r3, [pc, #228]	; (17110 <vWifiTask+0x2b0>)
   1702c:	0018      	movs	r0, r3
   1702e:	4b39      	ldr	r3, [pc, #228]	; (17114 <vWifiTask+0x2b4>)
   17030:	4798      	blx	r3
   17032:	0004      	movs	r4, r0
   17034:	4a36      	ldr	r2, [pc, #216]	; (17110 <vWifiTask+0x2b0>)
   17036:	4938      	ldr	r1, [pc, #224]	; (17118 <vWifiTask+0x2b8>)
   17038:	4838      	ldr	r0, [pc, #224]	; (1711c <vWifiTask+0x2bc>)
   1703a:	2300      	movs	r3, #0
   1703c:	9301      	str	r3, [sp, #4]
   1703e:	2301      	movs	r3, #1
   17040:	9300      	str	r3, [sp, #0]
   17042:	0023      	movs	r3, r4
   17044:	4c36      	ldr	r4, [pc, #216]	; (17120 <vWifiTask+0x2c0>)
   17046:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   17048:	4a31      	ldr	r2, [pc, #196]	; (17110 <vWifiTask+0x2b0>)
   1704a:	4b36      	ldr	r3, [pc, #216]	; (17124 <vWifiTask+0x2c4>)
   1704c:	0019      	movs	r1, r3
   1704e:	2001      	movs	r0, #1
   17050:	4b19      	ldr	r3, [pc, #100]	; (170b8 <vWifiTask+0x258>)
   17052:	4798      	blx	r3
            isPressed = false;
   17054:	4b2d      	ldr	r3, [pc, #180]	; (1710c <vWifiTask+0x2ac>)
   17056:	2200      	movs	r2, #0
   17058:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   1705a:	2064      	movs	r0, #100	; 0x64
   1705c:	4b01      	ldr	r3, [pc, #4]	; (17064 <vWifiTask+0x204>)
   1705e:	4798      	blx	r3
    while (1) {
   17060:	e7a2      	b.n	16fa8 <vWifiTask+0x148>
   17062:	46c0      	nop			; (mov r8, r8)
   17064:	0001be41 	.word	0x0001be41
   17068:	00015a15 	.word	0x00015a15
   1706c:	0001a135 	.word	0x0001a135
   17070:	200004cc 	.word	0x200004cc
   17074:	200004d4 	.word	0x200004d4
   17078:	200004d0 	.word	0x200004d0
   1707c:	200004d8 	.word	0x200004d8
   17080:	00036940 	.word	0x00036940
   17084:	0001da95 	.word	0x0001da95
   17088:	00036968 	.word	0x00036968
   1708c:	00016451 	.word	0x00016451
   17090:	0001648d 	.word	0x0001648d
   17094:	00016939 	.word	0x00016939
   17098:	0001636d 	.word	0x0001636d
   1709c:	000169f1 	.word	0x000169f1
   170a0:	00016a31 	.word	0x00016a31
   170a4:	000346df 	.word	0x000346df
   170a8:	0001ffa5 	.word	0x0001ffa5
   170ac:	00016219 	.word	0x00016219
   170b0:	00021a7d 	.word	0x00021a7d
   170b4:	00036984 	.word	0x00036984
   170b8:	0001db81 	.word	0x0001db81
   170bc:	00036464 	.word	0x00036464
   170c0:	000369b0 	.word	0x000369b0
   170c4:	000251dd 	.word	0x000251dd
   170c8:	00016545 	.word	0x00016545
   170cc:	00016511 	.word	0x00016511
   170d0:	00025275 	.word	0x00025275
   170d4:	00036458 	.word	0x00036458
   170d8:	00021c8d 	.word	0x00021c8d
   170dc:	00021c71 	.word	0x00021c71
   170e0:	20004708 	.word	0x20004708
   170e4:	00032365 	.word	0x00032365
   170e8:	00015a85 	.word	0x00015a85
   170ec:	200004c8 	.word	0x200004c8
   170f0:	00016bc1 	.word	0x00016bc1
   170f4:	00016c5d 	.word	0x00016c5d
   170f8:	00016aa9 	.word	0x00016aa9
   170fc:	00016b3d 	.word	0x00016b3d
   17100:	00017129 	.word	0x00017129
   17104:	00015989 	.word	0x00015989
   17108:	0001ac95 	.word	0x0001ac95
   1710c:	20000b74 	.word	0x20000b74
   17110:	20000090 	.word	0x20000090
   17114:	00034a97 	.word	0x00034a97
   17118:	000369d4 	.word	0x000369d4
   1711c:	2000073c 	.word	0x2000073c
   17120:	0002f685 	.word	0x0002f685
   17124:	000369f0 	.word	0x000369f0

00017128 <set_update_flag>:
/**
 static void set_update_flag(void)
 * @brief	Set up the update flag
 * @note
*/
 static void set_update_flag(void){
   17128:	b590      	push	{r4, r7, lr}
   1712a:	b08f      	sub	sp, #60	; 0x3c
   1712c:	af00      	add	r7, sp, #0
	 // Write Flag
	 FIL f_obj;
	 char update_file_name[] = "0:update.txt";
   1712e:	003b      	movs	r3, r7
   17130:	4a16      	ldr	r2, [pc, #88]	; (1718c <set_update_flag+0x64>)
   17132:	ca13      	ldmia	r2!, {r0, r1, r4}
   17134:	c313      	stmia	r3!, {r0, r1, r4}
   17136:	7812      	ldrb	r2, [r2, #0]
   17138:	701a      	strb	r2, [r3, #0]
	 update_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   1713a:	003b      	movs	r3, r7
   1713c:	2230      	movs	r2, #48	; 0x30
   1713e:	701a      	strb	r2, [r3, #0]
	 FRESULT res = f_open(&f_obj, (char const *)update_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   17140:	2337      	movs	r3, #55	; 0x37
   17142:	18fc      	adds	r4, r7, r3
   17144:	0039      	movs	r1, r7
   17146:	2310      	movs	r3, #16
   17148:	18fb      	adds	r3, r7, r3
   1714a:	220a      	movs	r2, #10
   1714c:	0018      	movs	r0, r3
   1714e:	4b10      	ldr	r3, [pc, #64]	; (17190 <set_update_flag+0x68>)
   17150:	4798      	blx	r3
   17152:	0003      	movs	r3, r0
   17154:	7023      	strb	r3, [r4, #0]
	 f_close(&f_obj);
   17156:	2310      	movs	r3, #16
   17158:	18fb      	adds	r3, r7, r3
   1715a:	0018      	movs	r0, r3
   1715c:	4b0d      	ldr	r3, [pc, #52]	; (17194 <set_update_flag+0x6c>)
   1715e:	4798      	blx	r3
	 if (res != FR_OK) {
   17160:	2337      	movs	r3, #55	; 0x37
   17162:	18fb      	adds	r3, r7, r3
   17164:	781b      	ldrb	r3, [r3, #0]
   17166:	2b00      	cmp	r3, #0
   17168:	d008      	beq.n	1717c <set_update_flag+0x54>
		 LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   1716a:	2337      	movs	r3, #55	; 0x37
   1716c:	18fb      	adds	r3, r7, r3
   1716e:	781a      	ldrb	r2, [r3, #0]
   17170:	4b09      	ldr	r3, [pc, #36]	; (17198 <set_update_flag+0x70>)
   17172:	0019      	movs	r1, r3
   17174:	2000      	movs	r0, #0
   17176:	4b09      	ldr	r3, [pc, #36]	; (1719c <set_update_flag+0x74>)
   17178:	4798      	blx	r3
		 } else {
		 SerialConsoleWriteString("update.txt added!\r\n");
	}
 }
   1717a:	e003      	b.n	17184 <set_update_flag+0x5c>
		 SerialConsoleWriteString("update.txt added!\r\n");
   1717c:	4b08      	ldr	r3, [pc, #32]	; (171a0 <set_update_flag+0x78>)
   1717e:	0018      	movs	r0, r3
   17180:	4b08      	ldr	r3, [pc, #32]	; (171a4 <set_update_flag+0x7c>)
   17182:	4798      	blx	r3
 }
   17184:	46c0      	nop			; (mov r8, r8)
   17186:	46bd      	mov	sp, r7
   17188:	b00f      	add	sp, #60	; 0x3c
   1718a:	bd90      	pop	{r4, r7, pc}
   1718c:	00036a24 	.word	0x00036a24
   17190:	0002d62d 	.word	0x0002d62d
   17194:	0002e02d 	.word	0x0002e02d
   17198:	00036a00 	.word	0x00036a00
   1719c:	0001db81 	.word	0x0001db81
   171a0:	00036a10 	.word	0x00036a10
   171a4:	0001da95 	.word	0x0001da95

000171a8 <WifiHandlerSetState>:
 

void WifiHandlerSetState(uint8_t state)
{
   171a8:	b590      	push	{r4, r7, lr}
   171aa:	b083      	sub	sp, #12
   171ac:	af00      	add	r7, sp, #0
   171ae:	0002      	movs	r2, r0
   171b0:	1dfb      	adds	r3, r7, #7
   171b2:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   171b4:	1dfb      	adds	r3, r7, #7
   171b6:	781b      	ldrb	r3, [r3, #0]
   171b8:	2b03      	cmp	r3, #3
   171ba:	d806      	bhi.n	171ca <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   171bc:	4b05      	ldr	r3, [pc, #20]	; (171d4 <WifiHandlerSetState+0x2c>)
   171be:	6818      	ldr	r0, [r3, #0]
   171c0:	1df9      	adds	r1, r7, #7
   171c2:	2300      	movs	r3, #0
   171c4:	220a      	movs	r2, #10
   171c6:	4c04      	ldr	r4, [pc, #16]	; (171d8 <WifiHandlerSetState+0x30>)
   171c8:	47a0      	blx	r4
    }
}
   171ca:	46c0      	nop			; (mov r8, r8)
   171cc:	46bd      	mov	sp, r7
   171ce:	b003      	add	sp, #12
   171d0:	bd90      	pop	{r4, r7, pc}
   171d2:	46c0      	nop			; (mov r8, r8)
   171d4:	200004cc 	.word	0x200004cc
   171d8:	0001a3dd 	.word	0x0001a3dd

000171dc <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   171dc:	b590      	push	{r4, r7, lr}
   171de:	b085      	sub	sp, #20
   171e0:	af00      	add	r7, sp, #0
   171e2:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   171e4:	4b06      	ldr	r3, [pc, #24]	; (17200 <WifiAddGameDataToQueue+0x24>)
   171e6:	6818      	ldr	r0, [r3, #0]
   171e8:	6879      	ldr	r1, [r7, #4]
   171ea:	2300      	movs	r3, #0
   171ec:	220a      	movs	r2, #10
   171ee:	4c05      	ldr	r4, [pc, #20]	; (17204 <WifiAddGameDataToQueue+0x28>)
   171f0:	47a0      	blx	r4
   171f2:	0003      	movs	r3, r0
   171f4:	60fb      	str	r3, [r7, #12]
    return error;
   171f6:	68fb      	ldr	r3, [r7, #12]
}
   171f8:	0018      	movs	r0, r3
   171fa:	46bd      	mov	sp, r7
   171fc:	b005      	add	sp, #20
   171fe:	bd90      	pop	{r4, r7, pc}
   17200:	200004d0 	.word	0x200004d0
   17204:	0001a3dd 	.word	0x0001a3dd

00017208 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   17208:	b580      	push	{r7, lr}
   1720a:	b082      	sub	sp, #8
   1720c:	af00      	add	r7, sp, #0
   1720e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   17210:	687b      	ldr	r3, [r7, #4]
   17212:	2200      	movs	r2, #0
   17214:	701a      	strb	r2, [r3, #0]
}
   17216:	46c0      	nop			; (mov r8, r8)
   17218:	46bd      	mov	sp, r7
   1721a:	b002      	add	sp, #8
   1721c:	bd80      	pop	{r7, pc}
	...

00017220 <system_apb_clock_set_mask>:
{
   17220:	b580      	push	{r7, lr}
   17222:	b082      	sub	sp, #8
   17224:	af00      	add	r7, sp, #0
   17226:	0002      	movs	r2, r0
   17228:	6039      	str	r1, [r7, #0]
   1722a:	1dfb      	adds	r3, r7, #7
   1722c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1722e:	1dfb      	adds	r3, r7, #7
   17230:	781b      	ldrb	r3, [r3, #0]
   17232:	2b01      	cmp	r3, #1
   17234:	d00a      	beq.n	1724c <system_apb_clock_set_mask+0x2c>
   17236:	2b02      	cmp	r3, #2
   17238:	d00f      	beq.n	1725a <system_apb_clock_set_mask+0x3a>
   1723a:	2b00      	cmp	r3, #0
   1723c:	d114      	bne.n	17268 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1723e:	4b0e      	ldr	r3, [pc, #56]	; (17278 <system_apb_clock_set_mask+0x58>)
   17240:	4a0d      	ldr	r2, [pc, #52]	; (17278 <system_apb_clock_set_mask+0x58>)
   17242:	6991      	ldr	r1, [r2, #24]
   17244:	683a      	ldr	r2, [r7, #0]
   17246:	430a      	orrs	r2, r1
   17248:	619a      	str	r2, [r3, #24]
			break;
   1724a:	e00f      	b.n	1726c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1724c:	4b0a      	ldr	r3, [pc, #40]	; (17278 <system_apb_clock_set_mask+0x58>)
   1724e:	4a0a      	ldr	r2, [pc, #40]	; (17278 <system_apb_clock_set_mask+0x58>)
   17250:	69d1      	ldr	r1, [r2, #28]
   17252:	683a      	ldr	r2, [r7, #0]
   17254:	430a      	orrs	r2, r1
   17256:	61da      	str	r2, [r3, #28]
			break;
   17258:	e008      	b.n	1726c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1725a:	4b07      	ldr	r3, [pc, #28]	; (17278 <system_apb_clock_set_mask+0x58>)
   1725c:	4a06      	ldr	r2, [pc, #24]	; (17278 <system_apb_clock_set_mask+0x58>)
   1725e:	6a11      	ldr	r1, [r2, #32]
   17260:	683a      	ldr	r2, [r7, #0]
   17262:	430a      	orrs	r2, r1
   17264:	621a      	str	r2, [r3, #32]
			break;
   17266:	e001      	b.n	1726c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   17268:	2317      	movs	r3, #23
   1726a:	e000      	b.n	1726e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1726c:	2300      	movs	r3, #0
}
   1726e:	0018      	movs	r0, r3
   17270:	46bd      	mov	sp, r7
   17272:	b002      	add	sp, #8
   17274:	bd80      	pop	{r7, pc}
   17276:	46c0      	nop			; (mov r8, r8)
   17278:	40000400 	.word	0x40000400

0001727c <system_pinmux_get_config_defaults>:
{
   1727c:	b580      	push	{r7, lr}
   1727e:	b082      	sub	sp, #8
   17280:	af00      	add	r7, sp, #0
   17282:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   17284:	687b      	ldr	r3, [r7, #4]
   17286:	2280      	movs	r2, #128	; 0x80
   17288:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1728a:	687b      	ldr	r3, [r7, #4]
   1728c:	2200      	movs	r2, #0
   1728e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   17290:	687b      	ldr	r3, [r7, #4]
   17292:	2201      	movs	r2, #1
   17294:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   17296:	687b      	ldr	r3, [r7, #4]
   17298:	2200      	movs	r2, #0
   1729a:	70da      	strb	r2, [r3, #3]
}
   1729c:	46c0      	nop			; (mov r8, r8)
   1729e:	46bd      	mov	sp, r7
   172a0:	b002      	add	sp, #8
   172a2:	bd80      	pop	{r7, pc}

000172a4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   172a4:	b580      	push	{r7, lr}
   172a6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   172a8:	4b05      	ldr	r3, [pc, #20]	; (172c0 <system_is_debugger_present+0x1c>)
   172aa:	789b      	ldrb	r3, [r3, #2]
   172ac:	b2db      	uxtb	r3, r3
   172ae:	001a      	movs	r2, r3
   172b0:	2302      	movs	r3, #2
   172b2:	4013      	ands	r3, r2
   172b4:	1e5a      	subs	r2, r3, #1
   172b6:	4193      	sbcs	r3, r2
   172b8:	b2db      	uxtb	r3, r3
}
   172ba:	0018      	movs	r0, r3
   172bc:	46bd      	mov	sp, r7
   172be:	bd80      	pop	{r7, pc}
   172c0:	41002000 	.word	0x41002000

000172c4 <system_interrupt_enter_critical_section>:
{
   172c4:	b580      	push	{r7, lr}
   172c6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   172c8:	4b02      	ldr	r3, [pc, #8]	; (172d4 <system_interrupt_enter_critical_section+0x10>)
   172ca:	4798      	blx	r3
}
   172cc:	46c0      	nop			; (mov r8, r8)
   172ce:	46bd      	mov	sp, r7
   172d0:	bd80      	pop	{r7, pc}
   172d2:	46c0      	nop			; (mov r8, r8)
   172d4:	00025ed5 	.word	0x00025ed5

000172d8 <system_interrupt_leave_critical_section>:
{
   172d8:	b580      	push	{r7, lr}
   172da:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   172dc:	4b02      	ldr	r3, [pc, #8]	; (172e8 <system_interrupt_leave_critical_section+0x10>)
   172de:	4798      	blx	r3
}
   172e0:	46c0      	nop			; (mov r8, r8)
   172e2:	46bd      	mov	sp, r7
   172e4:	bd80      	pop	{r7, pc}
   172e6:	46c0      	nop			; (mov r8, r8)
   172e8:	00025f29 	.word	0x00025f29

000172ec <system_interrupt_disable>:
{
   172ec:	b580      	push	{r7, lr}
   172ee:	b082      	sub	sp, #8
   172f0:	af00      	add	r7, sp, #0
   172f2:	0002      	movs	r2, r0
   172f4:	1dfb      	adds	r3, r7, #7
   172f6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   172f8:	4a07      	ldr	r2, [pc, #28]	; (17318 <system_interrupt_disable+0x2c>)
   172fa:	1dfb      	adds	r3, r7, #7
   172fc:	781b      	ldrb	r3, [r3, #0]
   172fe:	0019      	movs	r1, r3
   17300:	231f      	movs	r3, #31
   17302:	400b      	ands	r3, r1
   17304:	2101      	movs	r1, #1
   17306:	4099      	lsls	r1, r3
   17308:	000b      	movs	r3, r1
   1730a:	0019      	movs	r1, r3
   1730c:	2380      	movs	r3, #128	; 0x80
   1730e:	50d1      	str	r1, [r2, r3]
}
   17310:	46c0      	nop			; (mov r8, r8)
   17312:	46bd      	mov	sp, r7
   17314:	b002      	add	sp, #8
   17316:	bd80      	pop	{r7, pc}
   17318:	e000e100 	.word	0xe000e100

0001731c <i2c_master_is_syncing>:
{
   1731c:	b580      	push	{r7, lr}
   1731e:	b084      	sub	sp, #16
   17320:	af00      	add	r7, sp, #0
   17322:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   17324:	687b      	ldr	r3, [r7, #4]
   17326:	681b      	ldr	r3, [r3, #0]
   17328:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1732a:	68fb      	ldr	r3, [r7, #12]
   1732c:	69db      	ldr	r3, [r3, #28]
   1732e:	2207      	movs	r2, #7
   17330:	4013      	ands	r3, r2
   17332:	1e5a      	subs	r2, r3, #1
   17334:	4193      	sbcs	r3, r2
   17336:	b2db      	uxtb	r3, r3
}
   17338:	0018      	movs	r0, r3
   1733a:	46bd      	mov	sp, r7
   1733c:	b004      	add	sp, #16
   1733e:	bd80      	pop	{r7, pc}

00017340 <_i2c_master_wait_for_sync>:
{
   17340:	b580      	push	{r7, lr}
   17342:	b082      	sub	sp, #8
   17344:	af00      	add	r7, sp, #0
   17346:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   17348:	46c0      	nop			; (mov r8, r8)
   1734a:	687b      	ldr	r3, [r7, #4]
   1734c:	0018      	movs	r0, r3
   1734e:	4b04      	ldr	r3, [pc, #16]	; (17360 <_i2c_master_wait_for_sync+0x20>)
   17350:	4798      	blx	r3
   17352:	1e03      	subs	r3, r0, #0
   17354:	d1f9      	bne.n	1734a <_i2c_master_wait_for_sync+0xa>
}
   17356:	46c0      	nop			; (mov r8, r8)
   17358:	46bd      	mov	sp, r7
   1735a:	b002      	add	sp, #8
   1735c:	bd80      	pop	{r7, pc}
   1735e:	46c0      	nop			; (mov r8, r8)
   17360:	0001731d 	.word	0x0001731d

00017364 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   17364:	b580      	push	{r7, lr}
   17366:	b084      	sub	sp, #16
   17368:	af00      	add	r7, sp, #0
   1736a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1736c:	687b      	ldr	r3, [r7, #4]
   1736e:	681b      	ldr	r3, [r3, #0]
   17370:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   17372:	687b      	ldr	r3, [r7, #4]
   17374:	681b      	ldr	r3, [r3, #0]
   17376:	0018      	movs	r0, r3
   17378:	4b0d      	ldr	r3, [pc, #52]	; (173b0 <i2c_master_disable+0x4c>)
   1737a:	4798      	blx	r3
   1737c:	0003      	movs	r3, r0
   1737e:	0018      	movs	r0, r3
   17380:	4b0c      	ldr	r3, [pc, #48]	; (173b4 <i2c_master_disable+0x50>)
   17382:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   17384:	687b      	ldr	r3, [r7, #4]
   17386:	0018      	movs	r0, r3
   17388:	4b0b      	ldr	r3, [pc, #44]	; (173b8 <i2c_master_disable+0x54>)
   1738a:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   1738c:	68fb      	ldr	r3, [r7, #12]
   1738e:	2283      	movs	r2, #131	; 0x83
   17390:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   17392:	68fb      	ldr	r3, [r7, #12]
   17394:	2283      	movs	r2, #131	; 0x83
   17396:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   17398:	68fb      	ldr	r3, [r7, #12]
   1739a:	681b      	ldr	r3, [r3, #0]
   1739c:	2202      	movs	r2, #2
   1739e:	4393      	bics	r3, r2
   173a0:	001a      	movs	r2, r3
   173a2:	68fb      	ldr	r3, [r7, #12]
   173a4:	601a      	str	r2, [r3, #0]

}
   173a6:	46c0      	nop			; (mov r8, r8)
   173a8:	46bd      	mov	sp, r7
   173aa:	b004      	add	sp, #16
   173ac:	bd80      	pop	{r7, pc}
   173ae:	46c0      	nop			; (mov r8, r8)
   173b0:	000273a9 	.word	0x000273a9
   173b4:	000172ed 	.word	0x000172ed
   173b8:	00017341 	.word	0x00017341

000173bc <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   173bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   173be:	b097      	sub	sp, #92	; 0x5c
   173c0:	af00      	add	r7, sp, #0
   173c2:	6178      	str	r0, [r7, #20]
   173c4:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   173c6:	2300      	movs	r3, #0
   173c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   173ca:	2300      	movs	r3, #0
   173cc:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   173ce:	2300      	movs	r3, #0
   173d0:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   173d2:	233b      	movs	r3, #59	; 0x3b
   173d4:	2210      	movs	r2, #16
   173d6:	4694      	mov	ip, r2
   173d8:	44bc      	add	ip, r7
   173da:	4463      	add	r3, ip
   173dc:	2200      	movs	r2, #0
   173de:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   173e0:	697b      	ldr	r3, [r7, #20]
   173e2:	681b      	ldr	r3, [r3, #0]
   173e4:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   173e6:	697b      	ldr	r3, [r7, #20]
   173e8:	681b      	ldr	r3, [r3, #0]
   173ea:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   173ec:	2323      	movs	r3, #35	; 0x23
   173ee:	2210      	movs	r2, #16
   173f0:	18ba      	adds	r2, r7, r2
   173f2:	18d4      	adds	r4, r2, r3
   173f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   173f6:	0018      	movs	r0, r3
   173f8:	4bc0      	ldr	r3, [pc, #768]	; (176fc <_i2c_master_set_config+0x340>)
   173fa:	4798      	blx	r3
   173fc:	0003      	movs	r3, r0
   173fe:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   17400:	230c      	movs	r3, #12
   17402:	2210      	movs	r2, #16
   17404:	4694      	mov	ip, r2
   17406:	44bc      	add	ip, r7
   17408:	4463      	add	r3, ip
   1740a:	0018      	movs	r0, r3
   1740c:	4bbc      	ldr	r3, [pc, #752]	; (17700 <_i2c_master_set_config+0x344>)
   1740e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   17410:	693b      	ldr	r3, [r7, #16]
   17412:	69db      	ldr	r3, [r3, #28]
   17414:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   17416:	693b      	ldr	r3, [r7, #16]
   17418:	6a1b      	ldr	r3, [r3, #32]
   1741a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   1741c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1741e:	2b00      	cmp	r3, #0
   17420:	d106      	bne.n	17430 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   17422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17424:	2100      	movs	r1, #0
   17426:	0018      	movs	r0, r3
   17428:	4bb6      	ldr	r3, [pc, #728]	; (17704 <_i2c_master_set_config+0x348>)
   1742a:	4798      	blx	r3
   1742c:	0003      	movs	r3, r0
   1742e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   17430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17432:	b2da      	uxtb	r2, r3
   17434:	230c      	movs	r3, #12
   17436:	2110      	movs	r1, #16
   17438:	468c      	mov	ip, r1
   1743a:	44bc      	add	ip, r7
   1743c:	4463      	add	r3, ip
   1743e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17440:	230c      	movs	r3, #12
   17442:	2210      	movs	r2, #16
   17444:	4694      	mov	ip, r2
   17446:	44bc      	add	ip, r7
   17448:	4463      	add	r3, ip
   1744a:	2202      	movs	r2, #2
   1744c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   1744e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17450:	0c1b      	lsrs	r3, r3, #16
   17452:	b2db      	uxtb	r3, r3
   17454:	220c      	movs	r2, #12
   17456:	2110      	movs	r1, #16
   17458:	468c      	mov	ip, r1
   1745a:	44bc      	add	ip, r7
   1745c:	4462      	add	r2, ip
   1745e:	0011      	movs	r1, r2
   17460:	0018      	movs	r0, r3
   17462:	4ba9      	ldr	r3, [pc, #676]	; (17708 <_i2c_master_set_config+0x34c>)
   17464:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   17466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17468:	2b00      	cmp	r3, #0
   1746a:	d106      	bne.n	1747a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   1746c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1746e:	2101      	movs	r1, #1
   17470:	0018      	movs	r0, r3
   17472:	4ba4      	ldr	r3, [pc, #656]	; (17704 <_i2c_master_set_config+0x348>)
   17474:	4798      	blx	r3
   17476:	0003      	movs	r3, r0
   17478:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   1747a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1747c:	b2da      	uxtb	r2, r3
   1747e:	230c      	movs	r3, #12
   17480:	2110      	movs	r1, #16
   17482:	468c      	mov	ip, r1
   17484:	44bc      	add	ip, r7
   17486:	4463      	add	r3, ip
   17488:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1748a:	230c      	movs	r3, #12
   1748c:	2210      	movs	r2, #16
   1748e:	4694      	mov	ip, r2
   17490:	44bc      	add	ip, r7
   17492:	4463      	add	r3, ip
   17494:	2202      	movs	r2, #2
   17496:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   17498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1749a:	0c1b      	lsrs	r3, r3, #16
   1749c:	b2db      	uxtb	r3, r3
   1749e:	220c      	movs	r2, #12
   174a0:	2110      	movs	r1, #16
   174a2:	468c      	mov	ip, r1
   174a4:	44bc      	add	ip, r7
   174a6:	4462      	add	r2, ip
   174a8:	0011      	movs	r1, r2
   174aa:	0018      	movs	r0, r3
   174ac:	4b96      	ldr	r3, [pc, #600]	; (17708 <_i2c_master_set_config+0x34c>)
   174ae:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   174b0:	693b      	ldr	r3, [r7, #16]
   174b2:	8a9a      	ldrh	r2, [r3, #20]
   174b4:	697b      	ldr	r3, [r7, #20]
   174b6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   174b8:	693b      	ldr	r3, [r7, #16]
   174ba:	8ada      	ldrh	r2, [r3, #22]
   174bc:	697b      	ldr	r3, [r7, #20]
   174be:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   174c0:	693b      	ldr	r3, [r7, #16]
   174c2:	7e1b      	ldrb	r3, [r3, #24]
   174c4:	2b00      	cmp	r3, #0
   174c6:	d103      	bne.n	174d0 <_i2c_master_set_config+0x114>
   174c8:	4b90      	ldr	r3, [pc, #576]	; (1770c <_i2c_master_set_config+0x350>)
   174ca:	4798      	blx	r3
   174cc:	1e03      	subs	r3, r0, #0
   174ce:	d002      	beq.n	174d6 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   174d0:	2380      	movs	r3, #128	; 0x80
   174d2:	657b      	str	r3, [r7, #84]	; 0x54
   174d4:	e001      	b.n	174da <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   174d6:	2300      	movs	r3, #0
   174d8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   174da:	693b      	ldr	r3, [r7, #16]
   174dc:	691b      	ldr	r3, [r3, #16]
   174de:	2b00      	cmp	r3, #0
   174e0:	d004      	beq.n	174ec <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   174e2:	693b      	ldr	r3, [r7, #16]
   174e4:	691b      	ldr	r3, [r3, #16]
   174e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   174e8:	4313      	orrs	r3, r2
   174ea:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   174ec:	693b      	ldr	r3, [r7, #16]
   174ee:	689b      	ldr	r3, [r3, #8]
   174f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   174f2:	4313      	orrs	r3, r2
   174f4:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   174f6:	693b      	ldr	r3, [r7, #16]
   174f8:	2224      	movs	r2, #36	; 0x24
   174fa:	5c9b      	ldrb	r3, [r3, r2]
   174fc:	2b00      	cmp	r3, #0
   174fe:	d004      	beq.n	1750a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   17500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17502:	2280      	movs	r2, #128	; 0x80
   17504:	05d2      	lsls	r2, r2, #23
   17506:	4313      	orrs	r3, r2
   17508:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   1750a:	693b      	ldr	r3, [r7, #16]
   1750c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1750e:	2b00      	cmp	r3, #0
   17510:	d004      	beq.n	1751c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   17512:	693b      	ldr	r3, [r7, #16]
   17514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17516:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17518:	4313      	orrs	r3, r2
   1751a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   1751c:	693b      	ldr	r3, [r7, #16]
   1751e:	222c      	movs	r2, #44	; 0x2c
   17520:	5c9b      	ldrb	r3, [r3, r2]
   17522:	2b00      	cmp	r3, #0
   17524:	d105      	bne.n	17532 <_i2c_master_set_config+0x176>
   17526:	693b      	ldr	r3, [r7, #16]
   17528:	689a      	ldr	r2, [r3, #8]
   1752a:	2380      	movs	r3, #128	; 0x80
   1752c:	049b      	lsls	r3, r3, #18
   1752e:	429a      	cmp	r2, r3
   17530:	d104      	bne.n	1753c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   17532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17534:	2280      	movs	r2, #128	; 0x80
   17536:	0512      	lsls	r2, r2, #20
   17538:	4313      	orrs	r3, r2
   1753a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   1753c:	693b      	ldr	r3, [r7, #16]
   1753e:	222d      	movs	r2, #45	; 0x2d
   17540:	5c9b      	ldrb	r3, [r3, r2]
   17542:	2b00      	cmp	r3, #0
   17544:	d004      	beq.n	17550 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   17546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17548:	2280      	movs	r2, #128	; 0x80
   1754a:	0412      	lsls	r2, r2, #16
   1754c:	4313      	orrs	r3, r2
   1754e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   17550:	693b      	ldr	r3, [r7, #16]
   17552:	222e      	movs	r2, #46	; 0x2e
   17554:	5c9b      	ldrb	r3, [r3, r2]
   17556:	2b00      	cmp	r3, #0
   17558:	d004      	beq.n	17564 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   1755a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1755c:	2280      	movs	r2, #128	; 0x80
   1755e:	03d2      	lsls	r2, r2, #15
   17560:	4313      	orrs	r3, r2
   17562:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   17564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17566:	681a      	ldr	r2, [r3, #0]
   17568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1756a:	431a      	orrs	r2, r3
   1756c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1756e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   17570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17572:	2280      	movs	r2, #128	; 0x80
   17574:	0052      	lsls	r2, r2, #1
   17576:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   17578:	2323      	movs	r3, #35	; 0x23
   1757a:	2210      	movs	r2, #16
   1757c:	4694      	mov	ip, r2
   1757e:	44bc      	add	ip, r7
   17580:	4463      	add	r3, ip
   17582:	781b      	ldrb	r3, [r3, #0]
   17584:	3314      	adds	r3, #20
   17586:	b2db      	uxtb	r3, r3
   17588:	0018      	movs	r0, r3
   1758a:	4b61      	ldr	r3, [pc, #388]	; (17710 <_i2c_master_set_config+0x354>)
   1758c:	4798      	blx	r3
   1758e:	0003      	movs	r3, r0
   17590:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   17592:	693b      	ldr	r3, [r7, #16]
   17594:	681b      	ldr	r3, [r3, #0]
   17596:	22fa      	movs	r2, #250	; 0xfa
   17598:	0092      	lsls	r2, r2, #2
   1759a:	4353      	muls	r3, r2
   1759c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   1759e:	693b      	ldr	r3, [r7, #16]
   175a0:	685b      	ldr	r3, [r3, #4]
   175a2:	22fa      	movs	r2, #250	; 0xfa
   175a4:	0092      	lsls	r2, r2, #2
   175a6:	4353      	muls	r3, r2
   175a8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   175aa:	693b      	ldr	r3, [r7, #16]
   175ac:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   175ae:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   175b0:	4b58      	ldr	r3, [pc, #352]	; (17714 <_i2c_master_set_config+0x358>)
   175b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   175b4:	4798      	blx	r3
   175b6:	0005      	movs	r5, r0
   175b8:	000e      	movs	r6, r1
   175ba:	4b56      	ldr	r3, [pc, #344]	; (17714 <_i2c_master_set_config+0x358>)
   175bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   175be:	4798      	blx	r3
   175c0:	60b8      	str	r0, [r7, #8]
   175c2:	60f9      	str	r1, [r7, #12]
   175c4:	4b53      	ldr	r3, [pc, #332]	; (17714 <_i2c_master_set_config+0x358>)
   175c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   175c8:	4798      	blx	r3
   175ca:	4c53      	ldr	r4, [pc, #332]	; (17718 <_i2c_master_set_config+0x35c>)
   175cc:	4a53      	ldr	r2, [pc, #332]	; (1771c <_i2c_master_set_config+0x360>)
   175ce:	4b54      	ldr	r3, [pc, #336]	; (17720 <_i2c_master_set_config+0x364>)
   175d0:	47a0      	blx	r4
   175d2:	0003      	movs	r3, r0
   175d4:	000c      	movs	r4, r1
   175d6:	603b      	str	r3, [r7, #0]
   175d8:	607c      	str	r4, [r7, #4]
   175da:	4b4e      	ldr	r3, [pc, #312]	; (17714 <_i2c_master_set_config+0x358>)
   175dc:	6a38      	ldr	r0, [r7, #32]
   175de:	4798      	blx	r3
   175e0:	0002      	movs	r2, r0
   175e2:	000b      	movs	r3, r1
   175e4:	4c4c      	ldr	r4, [pc, #304]	; (17718 <_i2c_master_set_config+0x35c>)
   175e6:	6838      	ldr	r0, [r7, #0]
   175e8:	6879      	ldr	r1, [r7, #4]
   175ea:	47a0      	blx	r4
   175ec:	0003      	movs	r3, r0
   175ee:	000c      	movs	r4, r1
   175f0:	0018      	movs	r0, r3
   175f2:	0021      	movs	r1, r4
   175f4:	4c4b      	ldr	r4, [pc, #300]	; (17724 <_i2c_master_set_config+0x368>)
   175f6:	2200      	movs	r2, #0
   175f8:	4b4b      	ldr	r3, [pc, #300]	; (17728 <_i2c_master_set_config+0x36c>)
   175fa:	47a0      	blx	r4
   175fc:	0003      	movs	r3, r0
   175fe:	000c      	movs	r4, r1
   17600:	001a      	movs	r2, r3
   17602:	0023      	movs	r3, r4
   17604:	4c44      	ldr	r4, [pc, #272]	; (17718 <_i2c_master_set_config+0x35c>)
   17606:	68b8      	ldr	r0, [r7, #8]
   17608:	68f9      	ldr	r1, [r7, #12]
   1760a:	47a0      	blx	r4
   1760c:	0003      	movs	r3, r0
   1760e:	000c      	movs	r4, r1
   17610:	001a      	movs	r2, r3
   17612:	0023      	movs	r3, r4
   17614:	4c45      	ldr	r4, [pc, #276]	; (1772c <_i2c_master_set_config+0x370>)
   17616:	0028      	movs	r0, r5
   17618:	0031      	movs	r1, r6
   1761a:	47a0      	blx	r4
   1761c:	0003      	movs	r3, r0
   1761e:	000c      	movs	r4, r1
   17620:	001d      	movs	r5, r3
   17622:	0026      	movs	r6, r4
   17624:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17626:	005a      	lsls	r2, r3, #1
   17628:	4b3a      	ldr	r3, [pc, #232]	; (17714 <_i2c_master_set_config+0x358>)
   1762a:	0010      	movs	r0, r2
   1762c:	4798      	blx	r3
   1762e:	0002      	movs	r2, r0
   17630:	000b      	movs	r3, r1
   17632:	4c3c      	ldr	r4, [pc, #240]	; (17724 <_i2c_master_set_config+0x368>)
   17634:	0028      	movs	r0, r5
   17636:	0031      	movs	r1, r6
   17638:	47a0      	blx	r4
   1763a:	0003      	movs	r3, r0
   1763c:	000c      	movs	r4, r1
   1763e:	0018      	movs	r0, r3
   17640:	0021      	movs	r1, r4
   17642:	4c3a      	ldr	r4, [pc, #232]	; (1772c <_i2c_master_set_config+0x370>)
   17644:	2200      	movs	r2, #0
   17646:	4b3a      	ldr	r3, [pc, #232]	; (17730 <_i2c_master_set_config+0x374>)
   17648:	47a0      	blx	r4
   1764a:	0003      	movs	r3, r0
   1764c:	000c      	movs	r4, r1
   1764e:	001d      	movs	r5, r3
   17650:	0026      	movs	r6, r4
   17652:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17654:	005a      	lsls	r2, r3, #1
   17656:	4b2f      	ldr	r3, [pc, #188]	; (17714 <_i2c_master_set_config+0x358>)
   17658:	0010      	movs	r0, r2
   1765a:	4798      	blx	r3
   1765c:	0002      	movs	r2, r0
   1765e:	000b      	movs	r3, r1
   17660:	4c34      	ldr	r4, [pc, #208]	; (17734 <_i2c_master_set_config+0x378>)
   17662:	0028      	movs	r0, r5
   17664:	0031      	movs	r1, r6
   17666:	47a0      	blx	r4
   17668:	0003      	movs	r3, r0
   1766a:	000c      	movs	r4, r1
   1766c:	0019      	movs	r1, r3
   1766e:	0022      	movs	r2, r4
   17670:	4b31      	ldr	r3, [pc, #196]	; (17738 <_i2c_master_set_config+0x37c>)
   17672:	0008      	movs	r0, r1
   17674:	0011      	movs	r1, r2
   17676:	4798      	blx	r3
   17678:	0003      	movs	r3, r0
   1767a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   1767c:	693b      	ldr	r3, [r7, #16]
   1767e:	689a      	ldr	r2, [r3, #8]
   17680:	2380      	movs	r3, #128	; 0x80
   17682:	049b      	lsls	r3, r3, #18
   17684:	429a      	cmp	r2, r3
   17686:	d16a      	bne.n	1775e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   17688:	4b22      	ldr	r3, [pc, #136]	; (17714 <_i2c_master_set_config+0x358>)
   1768a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1768c:	4798      	blx	r3
   1768e:	4c25      	ldr	r4, [pc, #148]	; (17724 <_i2c_master_set_config+0x368>)
   17690:	0002      	movs	r2, r0
   17692:	000b      	movs	r3, r1
   17694:	47a0      	blx	r4
   17696:	0003      	movs	r3, r0
   17698:	000c      	movs	r4, r1
   1769a:	001d      	movs	r5, r3
   1769c:	0026      	movs	r6, r4
   1769e:	4b1d      	ldr	r3, [pc, #116]	; (17714 <_i2c_master_set_config+0x358>)
   176a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   176a2:	4798      	blx	r3
   176a4:	4c1c      	ldr	r4, [pc, #112]	; (17718 <_i2c_master_set_config+0x35c>)
   176a6:	2200      	movs	r2, #0
   176a8:	4b24      	ldr	r3, [pc, #144]	; (1773c <_i2c_master_set_config+0x380>)
   176aa:	47a0      	blx	r4
   176ac:	0003      	movs	r3, r0
   176ae:	000c      	movs	r4, r1
   176b0:	001a      	movs	r2, r3
   176b2:	0023      	movs	r3, r4
   176b4:	4c1f      	ldr	r4, [pc, #124]	; (17734 <_i2c_master_set_config+0x378>)
   176b6:	0028      	movs	r0, r5
   176b8:	0031      	movs	r1, r6
   176ba:	47a0      	blx	r4
   176bc:	0003      	movs	r3, r0
   176be:	000c      	movs	r4, r1
   176c0:	0018      	movs	r0, r3
   176c2:	0021      	movs	r1, r4
   176c4:	4c19      	ldr	r4, [pc, #100]	; (1772c <_i2c_master_set_config+0x370>)
   176c6:	2200      	movs	r2, #0
   176c8:	4b19      	ldr	r3, [pc, #100]	; (17730 <_i2c_master_set_config+0x374>)
   176ca:	47a0      	blx	r4
   176cc:	0003      	movs	r3, r0
   176ce:	000c      	movs	r4, r1
   176d0:	0019      	movs	r1, r3
   176d2:	0022      	movs	r2, r4
   176d4:	4b18      	ldr	r3, [pc, #96]	; (17738 <_i2c_master_set_config+0x37c>)
   176d6:	0008      	movs	r0, r1
   176d8:	0011      	movs	r1, r2
   176da:	4798      	blx	r3
   176dc:	0003      	movs	r3, r0
   176de:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   176e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   176e2:	2b00      	cmp	r3, #0
   176e4:	d02e      	beq.n	17744 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   176e6:	4b16      	ldr	r3, [pc, #88]	; (17740 <_i2c_master_set_config+0x384>)
   176e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   176ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   176ec:	4798      	blx	r3
   176ee:	0003      	movs	r3, r0
   176f0:	1e9a      	subs	r2, r3, #2
   176f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   176f4:	1ad3      	subs	r3, r2, r3
   176f6:	653b      	str	r3, [r7, #80]	; 0x50
   176f8:	e031      	b.n	1775e <_i2c_master_set_config+0x3a2>
   176fa:	46c0      	nop			; (mov r8, r8)
   176fc:	000272d9 	.word	0x000272d9
   17700:	0001727d 	.word	0x0001727d
   17704:	0002711d 	.word	0x0002711d
   17708:	00029ec9 	.word	0x00029ec9
   1770c:	000172a5 	.word	0x000172a5
   17710:	00029c8d 	.word	0x00029c8d
   17714:	00034581 	.word	0x00034581
   17718:	000339ed 	.word	0x000339ed
   1771c:	e826d695 	.word	0xe826d695
   17720:	3e112e0b 	.word	0x3e112e0b
   17724:	00032d65 	.word	0x00032d65
   17728:	40240000 	.word	0x40240000
   1772c:	00033eed 	.word	0x00033eed
   17730:	3ff00000 	.word	0x3ff00000
   17734:	00033385 	.word	0x00033385
   17738:	00034519 	.word	0x00034519
   1773c:	40080000 	.word	0x40080000
   17740:	00032705 	.word	0x00032705
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   17744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17746:	005a      	lsls	r2, r3, #1
   17748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1774a:	18d3      	adds	r3, r2, r3
   1774c:	1e5a      	subs	r2, r3, #1
   1774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17750:	0059      	lsls	r1, r3, #1
   17752:	4b1d      	ldr	r3, [pc, #116]	; (177c8 <_i2c_master_set_config+0x40c>)
   17754:	0010      	movs	r0, r2
   17756:	4798      	blx	r3
   17758:	0003      	movs	r3, r0
   1775a:	3b01      	subs	r3, #1
   1775c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   1775e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17760:	2bff      	cmp	r3, #255	; 0xff
   17762:	dc08      	bgt.n	17776 <_i2c_master_set_config+0x3ba>
   17764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17766:	2b00      	cmp	r3, #0
   17768:	db05      	blt.n	17776 <_i2c_master_set_config+0x3ba>
   1776a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1776c:	2bff      	cmp	r3, #255	; 0xff
   1776e:	dc02      	bgt.n	17776 <_i2c_master_set_config+0x3ba>
   17770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17772:	2b00      	cmp	r3, #0
   17774:	da06      	bge.n	17784 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   17776:	233b      	movs	r3, #59	; 0x3b
   17778:	2210      	movs	r2, #16
   1777a:	4694      	mov	ip, r2
   1777c:	44bc      	add	ip, r7
   1777e:	4463      	add	r3, ip
   17780:	2240      	movs	r2, #64	; 0x40
   17782:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   17784:	233b      	movs	r3, #59	; 0x3b
   17786:	2210      	movs	r2, #16
   17788:	4694      	mov	ip, r2
   1778a:	44bc      	add	ip, r7
   1778c:	4463      	add	r3, ip
   1778e:	781b      	ldrb	r3, [r3, #0]
   17790:	2b40      	cmp	r3, #64	; 0x40
   17792:	d00e      	beq.n	177b2 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17796:	22ff      	movs	r2, #255	; 0xff
   17798:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   1779a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1779c:	041b      	lsls	r3, r3, #16
   1779e:	0019      	movs	r1, r3
   177a0:	23ff      	movs	r3, #255	; 0xff
   177a2:	041b      	lsls	r3, r3, #16
   177a4:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   177a6:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   177a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   177aa:	0612      	lsls	r2, r2, #24
   177ac:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   177ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   177b0:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   177b2:	233b      	movs	r3, #59	; 0x3b
   177b4:	2210      	movs	r2, #16
   177b6:	4694      	mov	ip, r2
   177b8:	44bc      	add	ip, r7
   177ba:	4463      	add	r3, ip
   177bc:	781b      	ldrb	r3, [r3, #0]
}
   177be:	0018      	movs	r0, r3
   177c0:	46bd      	mov	sp, r7
   177c2:	b017      	add	sp, #92	; 0x5c
   177c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   177c6:	46c0      	nop			; (mov r8, r8)
   177c8:	00032705 	.word	0x00032705

000177cc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   177cc:	b590      	push	{r4, r7, lr}
   177ce:	b08b      	sub	sp, #44	; 0x2c
   177d0:	af00      	add	r7, sp, #0
   177d2:	60f8      	str	r0, [r7, #12]
   177d4:	60b9      	str	r1, [r7, #8]
   177d6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   177d8:	68fb      	ldr	r3, [r7, #12]
   177da:	68ba      	ldr	r2, [r7, #8]
   177dc:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   177de:	68fb      	ldr	r3, [r7, #12]
   177e0:	681b      	ldr	r3, [r3, #0]
   177e2:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   177e4:	68fb      	ldr	r3, [r7, #12]
   177e6:	681b      	ldr	r3, [r3, #0]
   177e8:	0018      	movs	r0, r3
   177ea:	4b3b      	ldr	r3, [pc, #236]	; (178d8 <i2c_master_init+0x10c>)
   177ec:	4798      	blx	r3
   177ee:	0003      	movs	r3, r0
   177f0:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   177f2:	6a3b      	ldr	r3, [r7, #32]
   177f4:	3302      	adds	r3, #2
   177f6:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   177f8:	6a3b      	ldr	r3, [r7, #32]
   177fa:	3314      	adds	r3, #20
   177fc:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   177fe:	2201      	movs	r2, #1
   17800:	69fb      	ldr	r3, [r7, #28]
   17802:	409a      	lsls	r2, r3
   17804:	0013      	movs	r3, r2
   17806:	0019      	movs	r1, r3
   17808:	2002      	movs	r0, #2
   1780a:	4b34      	ldr	r3, [pc, #208]	; (178dc <i2c_master_init+0x110>)
   1780c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1780e:	2314      	movs	r3, #20
   17810:	18fb      	adds	r3, r7, r3
   17812:	0018      	movs	r0, r3
   17814:	4b32      	ldr	r3, [pc, #200]	; (178e0 <i2c_master_init+0x114>)
   17816:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   17818:	687b      	ldr	r3, [r7, #4]
   1781a:	7b1a      	ldrb	r2, [r3, #12]
   1781c:	2314      	movs	r3, #20
   1781e:	18fb      	adds	r3, r7, r3
   17820:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   17822:	69bb      	ldr	r3, [r7, #24]
   17824:	b2db      	uxtb	r3, r3
   17826:	2214      	movs	r2, #20
   17828:	18ba      	adds	r2, r7, r2
   1782a:	0011      	movs	r1, r2
   1782c:	0018      	movs	r0, r3
   1782e:	4b2d      	ldr	r3, [pc, #180]	; (178e4 <i2c_master_init+0x118>)
   17830:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   17832:	69bb      	ldr	r3, [r7, #24]
   17834:	b2db      	uxtb	r3, r3
   17836:	0018      	movs	r0, r3
   17838:	4b2b      	ldr	r3, [pc, #172]	; (178e8 <i2c_master_init+0x11c>)
   1783a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1783c:	687b      	ldr	r3, [r7, #4]
   1783e:	7b1b      	ldrb	r3, [r3, #12]
   17840:	2100      	movs	r1, #0
   17842:	0018      	movs	r0, r3
   17844:	4b29      	ldr	r3, [pc, #164]	; (178ec <i2c_master_init+0x120>)
   17846:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   17848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1784a:	681b      	ldr	r3, [r3, #0]
   1784c:	2202      	movs	r2, #2
   1784e:	4013      	ands	r3, r2
   17850:	d001      	beq.n	17856 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   17852:	231c      	movs	r3, #28
   17854:	e03b      	b.n	178ce <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   17856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17858:	681b      	ldr	r3, [r3, #0]
   1785a:	2201      	movs	r2, #1
   1785c:	4013      	ands	r3, r2
   1785e:	d001      	beq.n	17864 <i2c_master_init+0x98>
		return STATUS_BUSY;
   17860:	2305      	movs	r3, #5
   17862:	e034      	b.n	178ce <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   17864:	68fb      	ldr	r3, [r7, #12]
   17866:	681b      	ldr	r3, [r3, #0]
   17868:	2217      	movs	r2, #23
   1786a:	18bc      	adds	r4, r7, r2
   1786c:	0018      	movs	r0, r3
   1786e:	4b1a      	ldr	r3, [pc, #104]	; (178d8 <i2c_master_init+0x10c>)
   17870:	4798      	blx	r3
   17872:	0003      	movs	r3, r0
   17874:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   17876:	4a1e      	ldr	r2, [pc, #120]	; (178f0 <i2c_master_init+0x124>)
   17878:	2317      	movs	r3, #23
   1787a:	18fb      	adds	r3, r7, r3
   1787c:	781b      	ldrb	r3, [r3, #0]
   1787e:	0011      	movs	r1, r2
   17880:	0018      	movs	r0, r3
   17882:	4b1c      	ldr	r3, [pc, #112]	; (178f4 <i2c_master_init+0x128>)
   17884:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   17886:	2317      	movs	r3, #23
   17888:	18fb      	adds	r3, r7, r3
   1788a:	781a      	ldrb	r2, [r3, #0]
   1788c:	4b1a      	ldr	r3, [pc, #104]	; (178f8 <i2c_master_init+0x12c>)
   1788e:	0092      	lsls	r2, r2, #2
   17890:	68f9      	ldr	r1, [r7, #12]
   17892:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   17894:	68fb      	ldr	r3, [r7, #12]
   17896:	2200      	movs	r2, #0
   17898:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   1789a:	68fb      	ldr	r3, [r7, #12]
   1789c:	2200      	movs	r2, #0
   1789e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   178a0:	68fb      	ldr	r3, [r7, #12]
   178a2:	2200      	movs	r2, #0
   178a4:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   178a6:	68fb      	ldr	r3, [r7, #12]
   178a8:	2200      	movs	r2, #0
   178aa:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   178ac:	68fb      	ldr	r3, [r7, #12]
   178ae:	2225      	movs	r2, #37	; 0x25
   178b0:	2100      	movs	r1, #0
   178b2:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   178b4:	68fb      	ldr	r3, [r7, #12]
   178b6:	2200      	movs	r2, #0
   178b8:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   178ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   178bc:	2214      	movs	r2, #20
   178be:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   178c0:	687a      	ldr	r2, [r7, #4]
   178c2:	68fb      	ldr	r3, [r7, #12]
   178c4:	0011      	movs	r1, r2
   178c6:	0018      	movs	r0, r3
   178c8:	4b0c      	ldr	r3, [pc, #48]	; (178fc <i2c_master_init+0x130>)
   178ca:	4798      	blx	r3
   178cc:	0003      	movs	r3, r0
}
   178ce:	0018      	movs	r0, r3
   178d0:	46bd      	mov	sp, r7
   178d2:	b00b      	add	sp, #44	; 0x2c
   178d4:	bd90      	pop	{r4, r7, pc}
   178d6:	46c0      	nop			; (mov r8, r8)
   178d8:	000272d9 	.word	0x000272d9
   178dc:	00017221 	.word	0x00017221
   178e0:	00017209 	.word	0x00017209
   178e4:	00029b69 	.word	0x00029b69
   178e8:	00029bad 	.word	0x00029bad
   178ec:	00027091 	.word	0x00027091
   178f0:	00012bcd 	.word	0x00012bcd
   178f4:	0002733d 	.word	0x0002733d
   178f8:	20005a60 	.word	0x20005a60
   178fc:	000173bd 	.word	0x000173bd

00017900 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   17900:	b580      	push	{r7, lr}
   17902:	b084      	sub	sp, #16
   17904:	af00      	add	r7, sp, #0
   17906:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17908:	687b      	ldr	r3, [r7, #4]
   1790a:	681b      	ldr	r3, [r3, #0]
   1790c:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1790e:	687b      	ldr	r3, [r7, #4]
   17910:	0018      	movs	r0, r3
   17912:	4b0f      	ldr	r3, [pc, #60]	; (17950 <i2c_master_reset+0x50>)
   17914:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   17916:	687b      	ldr	r3, [r7, #4]
   17918:	0018      	movs	r0, r3
   1791a:	4b0e      	ldr	r3, [pc, #56]	; (17954 <i2c_master_reset+0x54>)
   1791c:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   1791e:	4b0e      	ldr	r3, [pc, #56]	; (17958 <i2c_master_reset+0x58>)
   17920:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   17922:	687b      	ldr	r3, [r7, #4]
   17924:	681b      	ldr	r3, [r3, #0]
   17926:	0018      	movs	r0, r3
   17928:	4b0c      	ldr	r3, [pc, #48]	; (1795c <i2c_master_reset+0x5c>)
   1792a:	4798      	blx	r3
   1792c:	0003      	movs	r3, r0
   1792e:	0018      	movs	r0, r3
   17930:	4b0b      	ldr	r3, [pc, #44]	; (17960 <i2c_master_reset+0x60>)
   17932:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   17934:	4b0b      	ldr	r3, [pc, #44]	; (17964 <i2c_master_reset+0x64>)
   17936:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   17938:	687b      	ldr	r3, [r7, #4]
   1793a:	0018      	movs	r0, r3
   1793c:	4b04      	ldr	r3, [pc, #16]	; (17950 <i2c_master_reset+0x50>)
   1793e:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   17940:	68fb      	ldr	r3, [r7, #12]
   17942:	2201      	movs	r2, #1
   17944:	601a      	str	r2, [r3, #0]
}
   17946:	46c0      	nop			; (mov r8, r8)
   17948:	46bd      	mov	sp, r7
   1794a:	b004      	add	sp, #16
   1794c:	bd80      	pop	{r7, pc}
   1794e:	46c0      	nop			; (mov r8, r8)
   17950:	00017341 	.word	0x00017341
   17954:	00017365 	.word	0x00017365
   17958:	000172c5 	.word	0x000172c5
   1795c:	000273a9 	.word	0x000273a9
   17960:	00029ce5 	.word	0x00029ce5
   17964:	000172d9 	.word	0x000172d9

00017968 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   17968:	b580      	push	{r7, lr}
   1796a:	b084      	sub	sp, #16
   1796c:	af00      	add	r7, sp, #0
   1796e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17970:	687b      	ldr	r3, [r7, #4]
   17972:	681b      	ldr	r3, [r3, #0]
   17974:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   17976:	68fb      	ldr	r3, [r7, #12]
   17978:	7e1b      	ldrb	r3, [r3, #24]
   1797a:	b2db      	uxtb	r3, r3
   1797c:	001a      	movs	r2, r3
   1797e:	2302      	movs	r3, #2
   17980:	4013      	ands	r3, r2
   17982:	d00b      	beq.n	1799c <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   17984:	68fb      	ldr	r3, [r7, #12]
   17986:	2202      	movs	r2, #2
   17988:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1798a:	68fb      	ldr	r3, [r7, #12]
   1798c:	8b5b      	ldrh	r3, [r3, #26]
   1798e:	b29b      	uxth	r3, r3
   17990:	001a      	movs	r2, r3
   17992:	2302      	movs	r3, #2
   17994:	4013      	ands	r3, r2
   17996:	d011      	beq.n	179bc <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   17998:	2341      	movs	r3, #65	; 0x41
   1799a:	e010      	b.n	179be <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1799c:	68fb      	ldr	r3, [r7, #12]
   1799e:	8b5b      	ldrh	r3, [r3, #26]
   179a0:	b29b      	uxth	r3, r3
   179a2:	001a      	movs	r2, r3
   179a4:	2304      	movs	r3, #4
   179a6:	4013      	ands	r3, r2
   179a8:	d008      	beq.n	179bc <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   179aa:	68fb      	ldr	r3, [r7, #12]
   179ac:	685b      	ldr	r3, [r3, #4]
   179ae:	22c0      	movs	r2, #192	; 0xc0
   179b0:	0292      	lsls	r2, r2, #10
   179b2:	431a      	orrs	r2, r3
   179b4:	68fb      	ldr	r3, [r7, #12]
   179b6:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   179b8:	2318      	movs	r3, #24
   179ba:	e000      	b.n	179be <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   179bc:	2300      	movs	r3, #0
}
   179be:	0018      	movs	r0, r3
   179c0:	46bd      	mov	sp, r7
   179c2:	b004      	add	sp, #16
   179c4:	bd80      	pop	{r7, pc}

000179c6 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   179c6:	b580      	push	{r7, lr}
   179c8:	b084      	sub	sp, #16
   179ca:	af00      	add	r7, sp, #0
   179cc:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   179ce:	687b      	ldr	r3, [r7, #4]
   179d0:	681b      	ldr	r3, [r3, #0]
   179d2:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   179d4:	230e      	movs	r3, #14
   179d6:	18fb      	adds	r3, r7, r3
   179d8:	2200      	movs	r2, #0
   179da:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   179dc:	e00f      	b.n	179fe <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   179de:	230e      	movs	r3, #14
   179e0:	18fb      	adds	r3, r7, r3
   179e2:	220e      	movs	r2, #14
   179e4:	18ba      	adds	r2, r7, r2
   179e6:	8812      	ldrh	r2, [r2, #0]
   179e8:	3201      	adds	r2, #1
   179ea:	801a      	strh	r2, [r3, #0]
   179ec:	687b      	ldr	r3, [r7, #4]
   179ee:	891b      	ldrh	r3, [r3, #8]
   179f0:	220e      	movs	r2, #14
   179f2:	18ba      	adds	r2, r7, r2
   179f4:	8812      	ldrh	r2, [r2, #0]
   179f6:	429a      	cmp	r2, r3
   179f8:	d301      	bcc.n	179fe <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   179fa:	2312      	movs	r3, #18
   179fc:	e00e      	b.n	17a1c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   179fe:	68bb      	ldr	r3, [r7, #8]
   17a00:	7e1b      	ldrb	r3, [r3, #24]
   17a02:	b2db      	uxtb	r3, r3
   17a04:	001a      	movs	r2, r3
   17a06:	2301      	movs	r3, #1
   17a08:	4013      	ands	r3, r2
   17a0a:	d106      	bne.n	17a1a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   17a0c:	68bb      	ldr	r3, [r7, #8]
   17a0e:	7e1b      	ldrb	r3, [r3, #24]
   17a10:	b2db      	uxtb	r3, r3
   17a12:	001a      	movs	r2, r3
   17a14:	2302      	movs	r3, #2
   17a16:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17a18:	d0e1      	beq.n	179de <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   17a1a:	2300      	movs	r3, #0
}
   17a1c:	0018      	movs	r0, r3
   17a1e:	46bd      	mov	sp, r7
   17a20:	b004      	add	sp, #16
   17a22:	bd80      	pop	{r7, pc}

00017a24 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   17a24:	b590      	push	{r4, r7, lr}
   17a26:	b085      	sub	sp, #20
   17a28:	af00      	add	r7, sp, #0
   17a2a:	6078      	str	r0, [r7, #4]
   17a2c:	000a      	movs	r2, r1
   17a2e:	1cfb      	adds	r3, r7, #3
   17a30:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17a32:	687b      	ldr	r3, [r7, #4]
   17a34:	681b      	ldr	r3, [r3, #0]
   17a36:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   17a38:	68fb      	ldr	r3, [r7, #12]
   17a3a:	685b      	ldr	r3, [r3, #4]
   17a3c:	2280      	movs	r2, #128	; 0x80
   17a3e:	02d2      	lsls	r2, r2, #11
   17a40:	431a      	orrs	r2, r3
   17a42:	68fb      	ldr	r3, [r7, #12]
   17a44:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   17a46:	1cfb      	adds	r3, r7, #3
   17a48:	781a      	ldrb	r2, [r3, #0]
   17a4a:	68fb      	ldr	r3, [r7, #12]
   17a4c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   17a4e:	230b      	movs	r3, #11
   17a50:	18fc      	adds	r4, r7, r3
   17a52:	687b      	ldr	r3, [r7, #4]
   17a54:	0018      	movs	r0, r3
   17a56:	4b07      	ldr	r3, [pc, #28]	; (17a74 <_i2c_master_send_hs_master_code+0x50>)
   17a58:	4798      	blx	r3
   17a5a:	0003      	movs	r3, r0
   17a5c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   17a5e:	68fb      	ldr	r3, [r7, #12]
   17a60:	2201      	movs	r2, #1
   17a62:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   17a64:	230b      	movs	r3, #11
   17a66:	18fb      	adds	r3, r7, r3
   17a68:	781b      	ldrb	r3, [r3, #0]
}
   17a6a:	0018      	movs	r0, r3
   17a6c:	46bd      	mov	sp, r7
   17a6e:	b005      	add	sp, #20
   17a70:	bd90      	pop	{r4, r7, pc}
   17a72:	46c0      	nop			; (mov r8, r8)
   17a74:	000179c7 	.word	0x000179c7

00017a78 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   17a78:	b580      	push	{r7, lr}
   17a7a:	af00      	add	r7, sp, #0
   17a7c:	2000      	movs	r0, #0
   17a7e:	4b02      	ldr	r3, [pc, #8]	; (17a88 <TC3_Handler+0x10>)
   17a80:	4798      	blx	r3
   17a82:	46c0      	nop			; (mov r8, r8)
   17a84:	46bd      	mov	sp, r7
   17a86:	bd80      	pop	{r7, pc}
   17a88:	00017ab5 	.word	0x00017ab5

00017a8c <TC4_Handler>:
   17a8c:	b580      	push	{r7, lr}
   17a8e:	af00      	add	r7, sp, #0
   17a90:	2001      	movs	r0, #1
   17a92:	4b02      	ldr	r3, [pc, #8]	; (17a9c <TC4_Handler+0x10>)
   17a94:	4798      	blx	r3
   17a96:	46c0      	nop			; (mov r8, r8)
   17a98:	46bd      	mov	sp, r7
   17a9a:	bd80      	pop	{r7, pc}
   17a9c:	00017ab5 	.word	0x00017ab5

00017aa0 <TC5_Handler>:
   17aa0:	b580      	push	{r7, lr}
   17aa2:	af00      	add	r7, sp, #0
   17aa4:	2002      	movs	r0, #2
   17aa6:	4b02      	ldr	r3, [pc, #8]	; (17ab0 <TC5_Handler+0x10>)
   17aa8:	4798      	blx	r3
   17aaa:	46c0      	nop			; (mov r8, r8)
   17aac:	46bd      	mov	sp, r7
   17aae:	bd80      	pop	{r7, pc}
   17ab0:	00017ab5 	.word	0x00017ab5

00017ab4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   17ab4:	b580      	push	{r7, lr}
   17ab6:	b084      	sub	sp, #16
   17ab8:	af00      	add	r7, sp, #0
   17aba:	0002      	movs	r2, r0
   17abc:	1dfb      	adds	r3, r7, #7
   17abe:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   17ac0:	1dfb      	adds	r3, r7, #7
   17ac2:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   17ac4:	4b28      	ldr	r3, [pc, #160]	; (17b68 <_tc_interrupt_handler+0xb4>)
   17ac6:	0092      	lsls	r2, r2, #2
   17ac8:	58d3      	ldr	r3, [r2, r3]
   17aca:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17acc:	68fb      	ldr	r3, [r7, #12]
   17ace:	681b      	ldr	r3, [r3, #0]
   17ad0:	7b9b      	ldrb	r3, [r3, #14]
   17ad2:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   17ad4:	68fa      	ldr	r2, [r7, #12]
   17ad6:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17ad8:	4013      	ands	r3, r2
   17ada:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   17adc:	68fb      	ldr	r3, [r7, #12]
   17ade:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17ae0:	230b      	movs	r3, #11
   17ae2:	18fb      	adds	r3, r7, r3
   17ae4:	400a      	ands	r2, r1
   17ae6:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   17ae8:	230b      	movs	r3, #11
   17aea:	18fb      	adds	r3, r7, r3
   17aec:	781b      	ldrb	r3, [r3, #0]
   17aee:	2201      	movs	r2, #1
   17af0:	4013      	ands	r3, r2
   17af2:	d008      	beq.n	17b06 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   17af4:	68fb      	ldr	r3, [r7, #12]
   17af6:	689b      	ldr	r3, [r3, #8]
   17af8:	68fa      	ldr	r2, [r7, #12]
   17afa:	0010      	movs	r0, r2
   17afc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   17afe:	68fb      	ldr	r3, [r7, #12]
   17b00:	681b      	ldr	r3, [r3, #0]
   17b02:	2201      	movs	r2, #1
   17b04:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   17b06:	230b      	movs	r3, #11
   17b08:	18fb      	adds	r3, r7, r3
   17b0a:	781b      	ldrb	r3, [r3, #0]
   17b0c:	2202      	movs	r2, #2
   17b0e:	4013      	ands	r3, r2
   17b10:	d008      	beq.n	17b24 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   17b12:	68fb      	ldr	r3, [r7, #12]
   17b14:	68db      	ldr	r3, [r3, #12]
   17b16:	68fa      	ldr	r2, [r7, #12]
   17b18:	0010      	movs	r0, r2
   17b1a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   17b1c:	68fb      	ldr	r3, [r7, #12]
   17b1e:	681b      	ldr	r3, [r3, #0]
   17b20:	2202      	movs	r2, #2
   17b22:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   17b24:	230b      	movs	r3, #11
   17b26:	18fb      	adds	r3, r7, r3
   17b28:	781b      	ldrb	r3, [r3, #0]
   17b2a:	2210      	movs	r2, #16
   17b2c:	4013      	ands	r3, r2
   17b2e:	d008      	beq.n	17b42 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   17b30:	68fb      	ldr	r3, [r7, #12]
   17b32:	691b      	ldr	r3, [r3, #16]
   17b34:	68fa      	ldr	r2, [r7, #12]
   17b36:	0010      	movs	r0, r2
   17b38:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   17b3a:	68fb      	ldr	r3, [r7, #12]
   17b3c:	681b      	ldr	r3, [r3, #0]
   17b3e:	2210      	movs	r2, #16
   17b40:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   17b42:	230b      	movs	r3, #11
   17b44:	18fb      	adds	r3, r7, r3
   17b46:	781b      	ldrb	r3, [r3, #0]
   17b48:	2220      	movs	r2, #32
   17b4a:	4013      	ands	r3, r2
   17b4c:	d008      	beq.n	17b60 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   17b4e:	68fb      	ldr	r3, [r7, #12]
   17b50:	695b      	ldr	r3, [r3, #20]
   17b52:	68fa      	ldr	r2, [r7, #12]
   17b54:	0010      	movs	r0, r2
   17b56:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   17b58:	68fb      	ldr	r3, [r7, #12]
   17b5a:	681b      	ldr	r3, [r3, #0]
   17b5c:	2220      	movs	r2, #32
   17b5e:	739a      	strb	r2, [r3, #14]
	}
}
   17b60:	46c0      	nop			; (mov r8, r8)
   17b62:	46bd      	mov	sp, r7
   17b64:	b004      	add	sp, #16
   17b66:	bd80      	pop	{r7, pc}
   17b68:	20004848 	.word	0x20004848

00017b6c <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   17b6c:	b580      	push	{r7, lr}
   17b6e:	b084      	sub	sp, #16
   17b70:	af00      	add	r7, sp, #0
   17b72:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   17b74:	2300      	movs	r3, #0
   17b76:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   17b78:	687b      	ldr	r3, [r7, #4]
   17b7a:	2b00      	cmp	r3, #0
   17b7c:	d101      	bne.n	17b82 <FreeRTOS_CLIRegisterCommand+0x16>
   17b7e:	b672      	cpsid	i
   17b80:	e7fe      	b.n	17b80 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   17b82:	2008      	movs	r0, #8
   17b84:	4b11      	ldr	r3, [pc, #68]	; (17bcc <FreeRTOS_CLIRegisterCommand+0x60>)
   17b86:	4798      	blx	r3
   17b88:	0003      	movs	r3, r0
   17b8a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   17b8c:	68bb      	ldr	r3, [r7, #8]
   17b8e:	2b00      	cmp	r3, #0
   17b90:	d101      	bne.n	17b96 <FreeRTOS_CLIRegisterCommand+0x2a>
   17b92:	b672      	cpsid	i
   17b94:	e7fe      	b.n	17b94 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   17b96:	68bb      	ldr	r3, [r7, #8]
   17b98:	2b00      	cmp	r3, #0
   17b9a:	d012      	beq.n	17bc2 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   17b9c:	4b0c      	ldr	r3, [pc, #48]	; (17bd0 <FreeRTOS_CLIRegisterCommand+0x64>)
   17b9e:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   17ba0:	68bb      	ldr	r3, [r7, #8]
   17ba2:	687a      	ldr	r2, [r7, #4]
   17ba4:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   17ba6:	68bb      	ldr	r3, [r7, #8]
   17ba8:	2200      	movs	r2, #0
   17baa:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   17bac:	4b09      	ldr	r3, [pc, #36]	; (17bd4 <FreeRTOS_CLIRegisterCommand+0x68>)
   17bae:	681b      	ldr	r3, [r3, #0]
   17bb0:	68ba      	ldr	r2, [r7, #8]
   17bb2:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   17bb4:	4b07      	ldr	r3, [pc, #28]	; (17bd4 <FreeRTOS_CLIRegisterCommand+0x68>)
   17bb6:	68ba      	ldr	r2, [r7, #8]
   17bb8:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   17bba:	4b07      	ldr	r3, [pc, #28]	; (17bd8 <FreeRTOS_CLIRegisterCommand+0x6c>)
   17bbc:	4798      	blx	r3

		xReturn = pdPASS;
   17bbe:	2301      	movs	r3, #1
   17bc0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   17bc2:	68fb      	ldr	r3, [r7, #12]
}
   17bc4:	0018      	movs	r0, r3
   17bc6:	46bd      	mov	sp, r7
   17bc8:	b004      	add	sp, #16
   17bca:	bd80      	pop	{r7, pc}
   17bcc:	00019f81 	.word	0x00019f81
   17bd0:	00019e49 	.word	0x00019e49
   17bd4:	20000120 	.word	0x20000120
   17bd8:	00019e6d 	.word	0x00019e6d

00017bdc <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   17bdc:	b580      	push	{r7, lr}
   17bde:	b088      	sub	sp, #32
   17be0:	af00      	add	r7, sp, #0
   17be2:	60f8      	str	r0, [r7, #12]
   17be4:	60b9      	str	r1, [r7, #8]
   17be6:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   17be8:	2301      	movs	r3, #1
   17bea:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   17bec:	4b3d      	ldr	r3, [pc, #244]	; (17ce4 <FreeRTOS_CLIProcessCommand+0x108>)
   17bee:	681b      	ldr	r3, [r3, #0]
   17bf0:	2b00      	cmp	r3, #0
   17bf2:	d144      	bne.n	17c7e <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17bf4:	4b3b      	ldr	r3, [pc, #236]	; (17ce4 <FreeRTOS_CLIProcessCommand+0x108>)
   17bf6:	4a3c      	ldr	r2, [pc, #240]	; (17ce8 <FreeRTOS_CLIProcessCommand+0x10c>)
   17bf8:	601a      	str	r2, [r3, #0]
   17bfa:	e03a      	b.n	17c72 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   17bfc:	4b39      	ldr	r3, [pc, #228]	; (17ce4 <FreeRTOS_CLIProcessCommand+0x108>)
   17bfe:	681b      	ldr	r3, [r3, #0]
   17c00:	681b      	ldr	r3, [r3, #0]
   17c02:	681b      	ldr	r3, [r3, #0]
   17c04:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   17c06:	69bb      	ldr	r3, [r7, #24]
   17c08:	0018      	movs	r0, r3
   17c0a:	4b38      	ldr	r3, [pc, #224]	; (17cec <FreeRTOS_CLIProcessCommand+0x110>)
   17c0c:	4798      	blx	r3
   17c0e:	0003      	movs	r3, r0
   17c10:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   17c12:	68fa      	ldr	r2, [r7, #12]
   17c14:	697b      	ldr	r3, [r7, #20]
   17c16:	18d3      	adds	r3, r2, r3
   17c18:	781b      	ldrb	r3, [r3, #0]
   17c1a:	2b20      	cmp	r3, #32
   17c1c:	d005      	beq.n	17c2a <FreeRTOS_CLIProcessCommand+0x4e>
   17c1e:	68fa      	ldr	r2, [r7, #12]
   17c20:	697b      	ldr	r3, [r7, #20]
   17c22:	18d3      	adds	r3, r2, r3
   17c24:	781b      	ldrb	r3, [r3, #0]
   17c26:	2b00      	cmp	r3, #0
   17c28:	d11e      	bne.n	17c68 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   17c2a:	697a      	ldr	r2, [r7, #20]
   17c2c:	69b9      	ldr	r1, [r7, #24]
   17c2e:	68fb      	ldr	r3, [r7, #12]
   17c30:	0018      	movs	r0, r3
   17c32:	4b2f      	ldr	r3, [pc, #188]	; (17cf0 <FreeRTOS_CLIProcessCommand+0x114>)
   17c34:	4798      	blx	r3
   17c36:	1e03      	subs	r3, r0, #0
   17c38:	d116      	bne.n	17c68 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   17c3a:	4b2a      	ldr	r3, [pc, #168]	; (17ce4 <FreeRTOS_CLIProcessCommand+0x108>)
   17c3c:	681b      	ldr	r3, [r3, #0]
   17c3e:	681b      	ldr	r3, [r3, #0]
   17c40:	7b1b      	ldrb	r3, [r3, #12]
   17c42:	b25b      	sxtb	r3, r3
   17c44:	2b00      	cmp	r3, #0
   17c46:	db19      	blt.n	17c7c <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   17c48:	68fb      	ldr	r3, [r7, #12]
   17c4a:	0018      	movs	r0, r3
   17c4c:	4b29      	ldr	r3, [pc, #164]	; (17cf4 <FreeRTOS_CLIProcessCommand+0x118>)
   17c4e:	4798      	blx	r3
   17c50:	0003      	movs	r3, r0
   17c52:	001a      	movs	r2, r3
   17c54:	4b23      	ldr	r3, [pc, #140]	; (17ce4 <FreeRTOS_CLIProcessCommand+0x108>)
   17c56:	681b      	ldr	r3, [r3, #0]
   17c58:	681b      	ldr	r3, [r3, #0]
   17c5a:	7b1b      	ldrb	r3, [r3, #12]
   17c5c:	b25b      	sxtb	r3, r3
   17c5e:	429a      	cmp	r2, r3
   17c60:	d00c      	beq.n	17c7c <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   17c62:	2300      	movs	r3, #0
   17c64:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   17c66:	e009      	b.n	17c7c <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17c68:	4b1e      	ldr	r3, [pc, #120]	; (17ce4 <FreeRTOS_CLIProcessCommand+0x108>)
   17c6a:	681b      	ldr	r3, [r3, #0]
   17c6c:	685a      	ldr	r2, [r3, #4]
   17c6e:	4b1d      	ldr	r3, [pc, #116]	; (17ce4 <FreeRTOS_CLIProcessCommand+0x108>)
   17c70:	601a      	str	r2, [r3, #0]
   17c72:	4b1c      	ldr	r3, [pc, #112]	; (17ce4 <FreeRTOS_CLIProcessCommand+0x108>)
   17c74:	681b      	ldr	r3, [r3, #0]
   17c76:	2b00      	cmp	r3, #0
   17c78:	d1c0      	bne.n	17bfc <FreeRTOS_CLIProcessCommand+0x20>
   17c7a:	e000      	b.n	17c7e <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   17c7c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   17c7e:	4b19      	ldr	r3, [pc, #100]	; (17ce4 <FreeRTOS_CLIProcessCommand+0x108>)
   17c80:	681b      	ldr	r3, [r3, #0]
   17c82:	2b00      	cmp	r3, #0
   17c84:	d00c      	beq.n	17ca0 <FreeRTOS_CLIProcessCommand+0xc4>
   17c86:	69fb      	ldr	r3, [r7, #28]
   17c88:	2b00      	cmp	r3, #0
   17c8a:	d109      	bne.n	17ca0 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17c8c:	687a      	ldr	r2, [r7, #4]
   17c8e:	491a      	ldr	r1, [pc, #104]	; (17cf8 <FreeRTOS_CLIProcessCommand+0x11c>)
   17c90:	68bb      	ldr	r3, [r7, #8]
   17c92:	0018      	movs	r0, r3
   17c94:	4b19      	ldr	r3, [pc, #100]	; (17cfc <FreeRTOS_CLIProcessCommand+0x120>)
   17c96:	4798      	blx	r3
		pxCommand = NULL;
   17c98:	4b12      	ldr	r3, [pc, #72]	; (17ce4 <FreeRTOS_CLIProcessCommand+0x108>)
   17c9a:	2200      	movs	r2, #0
   17c9c:	601a      	str	r2, [r3, #0]
   17c9e:	e01c      	b.n	17cda <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   17ca0:	4b10      	ldr	r3, [pc, #64]	; (17ce4 <FreeRTOS_CLIProcessCommand+0x108>)
   17ca2:	681b      	ldr	r3, [r3, #0]
   17ca4:	2b00      	cmp	r3, #0
   17ca6:	d010      	beq.n	17cca <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   17ca8:	4b0e      	ldr	r3, [pc, #56]	; (17ce4 <FreeRTOS_CLIProcessCommand+0x108>)
   17caa:	681b      	ldr	r3, [r3, #0]
   17cac:	681b      	ldr	r3, [r3, #0]
   17cae:	689b      	ldr	r3, [r3, #8]
   17cb0:	68fa      	ldr	r2, [r7, #12]
   17cb2:	6879      	ldr	r1, [r7, #4]
   17cb4:	68b8      	ldr	r0, [r7, #8]
   17cb6:	4798      	blx	r3
   17cb8:	0003      	movs	r3, r0
   17cba:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   17cbc:	69fb      	ldr	r3, [r7, #28]
   17cbe:	2b00      	cmp	r3, #0
   17cc0:	d10b      	bne.n	17cda <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   17cc2:	4b08      	ldr	r3, [pc, #32]	; (17ce4 <FreeRTOS_CLIProcessCommand+0x108>)
   17cc4:	2200      	movs	r2, #0
   17cc6:	601a      	str	r2, [r3, #0]
   17cc8:	e007      	b.n	17cda <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17cca:	687a      	ldr	r2, [r7, #4]
   17ccc:	490c      	ldr	r1, [pc, #48]	; (17d00 <FreeRTOS_CLIProcessCommand+0x124>)
   17cce:	68bb      	ldr	r3, [r7, #8]
   17cd0:	0018      	movs	r0, r3
   17cd2:	4b0a      	ldr	r3, [pc, #40]	; (17cfc <FreeRTOS_CLIProcessCommand+0x120>)
   17cd4:	4798      	blx	r3
		xReturn = pdFALSE;
   17cd6:	2300      	movs	r3, #0
   17cd8:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   17cda:	69fb      	ldr	r3, [r7, #28]
}
   17cdc:	0018      	movs	r0, r3
   17cde:	46bd      	mov	sp, r7
   17ce0:	b008      	add	sp, #32
   17ce2:	bd80      	pop	{r7, pc}
   17ce4:	20000b78 	.word	0x20000b78
   17ce8:	20000118 	.word	0x20000118
   17cec:	00034a97 	.word	0x00034a97
   17cf0:	00034aa5 	.word	0x00034aa5
   17cf4:	00017d65 	.word	0x00017d65
   17cf8:	00036a80 	.word	0x00036a80
   17cfc:	00034ac7 	.word	0x00034ac7
   17d00:	00036ad8 	.word	0x00036ad8

00017d04 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   17d04:	b580      	push	{r7, lr}
   17d06:	b086      	sub	sp, #24
   17d08:	af00      	add	r7, sp, #0
   17d0a:	60f8      	str	r0, [r7, #12]
   17d0c:	60b9      	str	r1, [r7, #8]
   17d0e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   17d10:	4b11      	ldr	r3, [pc, #68]	; (17d58 <prvHelpCommand+0x54>)
   17d12:	681b      	ldr	r3, [r3, #0]
   17d14:	2b00      	cmp	r3, #0
   17d16:	d102      	bne.n	17d1e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   17d18:	4b0f      	ldr	r3, [pc, #60]	; (17d58 <prvHelpCommand+0x54>)
   17d1a:	4a10      	ldr	r2, [pc, #64]	; (17d5c <prvHelpCommand+0x58>)
   17d1c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   17d1e:	4b0e      	ldr	r3, [pc, #56]	; (17d58 <prvHelpCommand+0x54>)
   17d20:	681b      	ldr	r3, [r3, #0]
   17d22:	681b      	ldr	r3, [r3, #0]
   17d24:	6859      	ldr	r1, [r3, #4]
   17d26:	68ba      	ldr	r2, [r7, #8]
   17d28:	68fb      	ldr	r3, [r7, #12]
   17d2a:	0018      	movs	r0, r3
   17d2c:	4b0c      	ldr	r3, [pc, #48]	; (17d60 <prvHelpCommand+0x5c>)
   17d2e:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   17d30:	4b09      	ldr	r3, [pc, #36]	; (17d58 <prvHelpCommand+0x54>)
   17d32:	681b      	ldr	r3, [r3, #0]
   17d34:	685a      	ldr	r2, [r3, #4]
   17d36:	4b08      	ldr	r3, [pc, #32]	; (17d58 <prvHelpCommand+0x54>)
   17d38:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   17d3a:	4b07      	ldr	r3, [pc, #28]	; (17d58 <prvHelpCommand+0x54>)
   17d3c:	681b      	ldr	r3, [r3, #0]
   17d3e:	2b00      	cmp	r3, #0
   17d40:	d102      	bne.n	17d48 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   17d42:	2300      	movs	r3, #0
   17d44:	617b      	str	r3, [r7, #20]
   17d46:	e001      	b.n	17d4c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   17d48:	2301      	movs	r3, #1
   17d4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   17d4c:	697b      	ldr	r3, [r7, #20]
}
   17d4e:	0018      	movs	r0, r3
   17d50:	46bd      	mov	sp, r7
   17d52:	b006      	add	sp, #24
   17d54:	bd80      	pop	{r7, pc}
   17d56:	46c0      	nop			; (mov r8, r8)
   17d58:	20000b7c 	.word	0x20000b7c
   17d5c:	20000118 	.word	0x20000118
   17d60:	00034ac7 	.word	0x00034ac7

00017d64 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   17d64:	b580      	push	{r7, lr}
   17d66:	b084      	sub	sp, #16
   17d68:	af00      	add	r7, sp, #0
   17d6a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   17d6c:	230f      	movs	r3, #15
   17d6e:	18fb      	adds	r3, r7, r3
   17d70:	2200      	movs	r2, #0
   17d72:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   17d74:	2300      	movs	r3, #0
   17d76:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   17d78:	e018      	b.n	17dac <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   17d7a:	687b      	ldr	r3, [r7, #4]
   17d7c:	781b      	ldrb	r3, [r3, #0]
   17d7e:	2b20      	cmp	r3, #32
   17d80:	d10f      	bne.n	17da2 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   17d82:	68bb      	ldr	r3, [r7, #8]
   17d84:	2b01      	cmp	r3, #1
   17d86:	d00e      	beq.n	17da6 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   17d88:	230f      	movs	r3, #15
   17d8a:	18fb      	adds	r3, r7, r3
   17d8c:	781b      	ldrb	r3, [r3, #0]
   17d8e:	b25b      	sxtb	r3, r3
   17d90:	b2db      	uxtb	r3, r3
   17d92:	3301      	adds	r3, #1
   17d94:	b2da      	uxtb	r2, r3
   17d96:	230f      	movs	r3, #15
   17d98:	18fb      	adds	r3, r7, r3
   17d9a:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   17d9c:	2301      	movs	r3, #1
   17d9e:	60bb      	str	r3, [r7, #8]
   17da0:	e001      	b.n	17da6 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   17da2:	2300      	movs	r3, #0
   17da4:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   17da6:	687b      	ldr	r3, [r7, #4]
   17da8:	3301      	adds	r3, #1
   17daa:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   17dac:	687b      	ldr	r3, [r7, #4]
   17dae:	781b      	ldrb	r3, [r3, #0]
   17db0:	2b00      	cmp	r3, #0
   17db2:	d1e2      	bne.n	17d7a <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   17db4:	68bb      	ldr	r3, [r7, #8]
   17db6:	2b01      	cmp	r3, #1
   17db8:	d109      	bne.n	17dce <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   17dba:	230f      	movs	r3, #15
   17dbc:	18fb      	adds	r3, r7, r3
   17dbe:	781b      	ldrb	r3, [r3, #0]
   17dc0:	b25b      	sxtb	r3, r3
   17dc2:	b2db      	uxtb	r3, r3
   17dc4:	3b01      	subs	r3, #1
   17dc6:	b2da      	uxtb	r2, r3
   17dc8:	230f      	movs	r3, #15
   17dca:	18fb      	adds	r3, r7, r3
   17dcc:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   17dce:	230f      	movs	r3, #15
   17dd0:	18fb      	adds	r3, r7, r3
   17dd2:	781b      	ldrb	r3, [r3, #0]
   17dd4:	b25b      	sxtb	r3, r3
}
   17dd6:	0018      	movs	r0, r3
   17dd8:	46bd      	mov	sp, r7
   17dda:	b004      	add	sp, #16
   17ddc:	bd80      	pop	{r7, pc}
	...

00017de0 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   17de0:	b580      	push	{r7, lr}
   17de2:	b082      	sub	sp, #8
   17de4:	af00      	add	r7, sp, #0
   17de6:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   17de8:	687b      	ldr	r3, [r7, #4]
   17dea:	0018      	movs	r0, r3
   17dec:	4b03      	ldr	r3, [pc, #12]	; (17dfc <prvTraceGetQueueNumber+0x1c>)
   17dee:	4798      	blx	r3
   17df0:	0003      	movs	r3, r0
}
   17df2:	0018      	movs	r0, r3
   17df4:	46bd      	mov	sp, r7
   17df6:	b002      	add	sp, #8
   17df8:	bd80      	pop	{r7, pc}
   17dfa:	46c0      	nop			; (mov r8, r8)
   17dfc:	0001b5a5 	.word	0x0001b5a5

00017e00 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   17e00:	b580      	push	{r7, lr}
   17e02:	b082      	sub	sp, #8
   17e04:	af00      	add	r7, sp, #0
   17e06:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   17e08:	687b      	ldr	r3, [r7, #4]
   17e0a:	0018      	movs	r0, r3
   17e0c:	4b03      	ldr	r3, [pc, #12]	; (17e1c <prvTraceGetQueueType+0x1c>)
   17e0e:	4798      	blx	r3
   17e10:	0003      	movs	r3, r0
}
   17e12:	0018      	movs	r0, r3
   17e14:	46bd      	mov	sp, r7
   17e16:	b002      	add	sp, #8
   17e18:	bd80      	pop	{r7, pc}
   17e1a:	46c0      	nop			; (mov r8, r8)
   17e1c:	0001b5d1 	.word	0x0001b5d1

00017e20 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   17e20:	b580      	push	{r7, lr}
   17e22:	b082      	sub	sp, #8
   17e24:	af00      	add	r7, sp, #0
   17e26:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   17e28:	687b      	ldr	r3, [r7, #4]
   17e2a:	0018      	movs	r0, r3
   17e2c:	4b03      	ldr	r3, [pc, #12]	; (17e3c <prvTraceGetTaskNumberLow16+0x1c>)
   17e2e:	4798      	blx	r3
   17e30:	0003      	movs	r3, r0
   17e32:	b29b      	uxth	r3, r3
}
   17e34:	0018      	movs	r0, r3
   17e36:	46bd      	mov	sp, r7
   17e38:	b002      	add	sp, #8
   17e3a:	bd80      	pop	{r7, pc}
   17e3c:	0001c901 	.word	0x0001c901

00017e40 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   17e40:	b580      	push	{r7, lr}
   17e42:	b082      	sub	sp, #8
   17e44:	af00      	add	r7, sp, #0
   17e46:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   17e48:	687b      	ldr	r3, [r7, #4]
   17e4a:	0018      	movs	r0, r3
   17e4c:	4b04      	ldr	r3, [pc, #16]	; (17e60 <prvTraceGetTaskNumberHigh16+0x20>)
   17e4e:	4798      	blx	r3
   17e50:	0003      	movs	r3, r0
   17e52:	0c1b      	lsrs	r3, r3, #16
   17e54:	b29b      	uxth	r3, r3
}
   17e56:	0018      	movs	r0, r3
   17e58:	46bd      	mov	sp, r7
   17e5a:	b002      	add	sp, #8
   17e5c:	bd80      	pop	{r7, pc}
   17e5e:	46c0      	nop			; (mov r8, r8)
   17e60:	0001c901 	.word	0x0001c901

00017e64 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   17e64:	b580      	push	{r7, lr}
   17e66:	b082      	sub	sp, #8
   17e68:	af00      	add	r7, sp, #0
   17e6a:	6078      	str	r0, [r7, #4]
   17e6c:	000a      	movs	r2, r1
   17e6e:	1cbb      	adds	r3, r7, #2
   17e70:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   17e72:	687b      	ldr	r3, [r7, #4]
   17e74:	0018      	movs	r0, r3
   17e76:	4b08      	ldr	r3, [pc, #32]	; (17e98 <prvTraceSetTaskNumberLow16+0x34>)
   17e78:	4798      	blx	r3
   17e7a:	0003      	movs	r3, r0
   17e7c:	0c1b      	lsrs	r3, r3, #16
   17e7e:	041a      	lsls	r2, r3, #16
   17e80:	1cbb      	adds	r3, r7, #2
   17e82:	881b      	ldrh	r3, [r3, #0]
   17e84:	431a      	orrs	r2, r3
   17e86:	687b      	ldr	r3, [r7, #4]
   17e88:	0011      	movs	r1, r2
   17e8a:	0018      	movs	r0, r3
   17e8c:	4b03      	ldr	r3, [pc, #12]	; (17e9c <prvTraceSetTaskNumberLow16+0x38>)
   17e8e:	4798      	blx	r3
}
   17e90:	46c0      	nop			; (mov r8, r8)
   17e92:	46bd      	mov	sp, r7
   17e94:	b002      	add	sp, #8
   17e96:	bd80      	pop	{r7, pc}
   17e98:	0001c901 	.word	0x0001c901
   17e9c:	0001c929 	.word	0x0001c929

00017ea0 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   17ea0:	b580      	push	{r7, lr}
   17ea2:	b082      	sub	sp, #8
   17ea4:	af00      	add	r7, sp, #0
   17ea6:	6078      	str	r0, [r7, #4]
   17ea8:	000a      	movs	r2, r1
   17eaa:	1cbb      	adds	r3, r7, #2
   17eac:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   17eae:	687b      	ldr	r3, [r7, #4]
   17eb0:	0018      	movs	r0, r3
   17eb2:	4b09      	ldr	r3, [pc, #36]	; (17ed8 <prvTraceSetTaskNumberHigh16+0x38>)
   17eb4:	4798      	blx	r3
   17eb6:	0003      	movs	r3, r0
   17eb8:	041b      	lsls	r3, r3, #16
   17eba:	0c1a      	lsrs	r2, r3, #16
   17ebc:	1cbb      	adds	r3, r7, #2
   17ebe:	881b      	ldrh	r3, [r3, #0]
   17ec0:	041b      	lsls	r3, r3, #16
   17ec2:	431a      	orrs	r2, r3
   17ec4:	687b      	ldr	r3, [r7, #4]
   17ec6:	0011      	movs	r1, r2
   17ec8:	0018      	movs	r0, r3
   17eca:	4b04      	ldr	r3, [pc, #16]	; (17edc <prvTraceSetTaskNumberHigh16+0x3c>)
   17ecc:	4798      	blx	r3
}
   17ece:	46c0      	nop			; (mov r8, r8)
   17ed0:	46bd      	mov	sp, r7
   17ed2:	b002      	add	sp, #8
   17ed4:	bd80      	pop	{r7, pc}
   17ed6:	46c0      	nop			; (mov r8, r8)
   17ed8:	0001c901 	.word	0x0001c901
   17edc:	0001c929 	.word	0x0001c929

00017ee0 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   17ee0:	b580      	push	{r7, lr}
   17ee2:	b082      	sub	sp, #8
   17ee4:	af00      	add	r7, sp, #0
   17ee6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   17ee8:	687b      	ldr	r3, [r7, #4]
   17eea:	0018      	movs	r0, r3
   17eec:	4b03      	ldr	r3, [pc, #12]	; (17efc <prvTraceGetQueueNumberLow16+0x1c>)
   17eee:	4798      	blx	r3
   17ef0:	0003      	movs	r3, r0
   17ef2:	b29b      	uxth	r3, r3
}
   17ef4:	0018      	movs	r0, r3
   17ef6:	46bd      	mov	sp, r7
   17ef8:	b002      	add	sp, #8
   17efa:	bd80      	pop	{r7, pc}
   17efc:	00017de1 	.word	0x00017de1

00017f00 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   17f00:	b580      	push	{r7, lr}
   17f02:	b082      	sub	sp, #8
   17f04:	af00      	add	r7, sp, #0
   17f06:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   17f08:	687b      	ldr	r3, [r7, #4]
   17f0a:	0018      	movs	r0, r3
   17f0c:	4b04      	ldr	r3, [pc, #16]	; (17f20 <prvTraceGetQueueNumberHigh16+0x20>)
   17f0e:	4798      	blx	r3
   17f10:	0003      	movs	r3, r0
   17f12:	0c1b      	lsrs	r3, r3, #16
   17f14:	b29b      	uxth	r3, r3
}
   17f16:	0018      	movs	r0, r3
   17f18:	46bd      	mov	sp, r7
   17f1a:	b002      	add	sp, #8
   17f1c:	bd80      	pop	{r7, pc}
   17f1e:	46c0      	nop			; (mov r8, r8)
   17f20:	00017de1 	.word	0x00017de1

00017f24 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   17f24:	b580      	push	{r7, lr}
   17f26:	b082      	sub	sp, #8
   17f28:	af00      	add	r7, sp, #0
   17f2a:	6078      	str	r0, [r7, #4]
   17f2c:	000a      	movs	r2, r1
   17f2e:	1cbb      	adds	r3, r7, #2
   17f30:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   17f32:	687b      	ldr	r3, [r7, #4]
   17f34:	0018      	movs	r0, r3
   17f36:	4b08      	ldr	r3, [pc, #32]	; (17f58 <prvTraceSetQueueNumberLow16+0x34>)
   17f38:	4798      	blx	r3
   17f3a:	0003      	movs	r3, r0
   17f3c:	0c1b      	lsrs	r3, r3, #16
   17f3e:	041a      	lsls	r2, r3, #16
   17f40:	1cbb      	adds	r3, r7, #2
   17f42:	881b      	ldrh	r3, [r3, #0]
   17f44:	431a      	orrs	r2, r3
   17f46:	687b      	ldr	r3, [r7, #4]
   17f48:	0011      	movs	r1, r2
   17f4a:	0018      	movs	r0, r3
   17f4c:	4b03      	ldr	r3, [pc, #12]	; (17f5c <prvTraceSetQueueNumberLow16+0x38>)
   17f4e:	4798      	blx	r3
}
   17f50:	46c0      	nop			; (mov r8, r8)
   17f52:	46bd      	mov	sp, r7
   17f54:	b002      	add	sp, #8
   17f56:	bd80      	pop	{r7, pc}
   17f58:	00017de1 	.word	0x00017de1
   17f5c:	0001b5b9 	.word	0x0001b5b9

00017f60 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   17f60:	b580      	push	{r7, lr}
   17f62:	b082      	sub	sp, #8
   17f64:	af00      	add	r7, sp, #0
   17f66:	6078      	str	r0, [r7, #4]
   17f68:	000a      	movs	r2, r1
   17f6a:	1cbb      	adds	r3, r7, #2
   17f6c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   17f6e:	687b      	ldr	r3, [r7, #4]
   17f70:	0018      	movs	r0, r3
   17f72:	4b09      	ldr	r3, [pc, #36]	; (17f98 <prvTraceSetQueueNumberHigh16+0x38>)
   17f74:	4798      	blx	r3
   17f76:	0003      	movs	r3, r0
   17f78:	041b      	lsls	r3, r3, #16
   17f7a:	0c1a      	lsrs	r2, r3, #16
   17f7c:	1cbb      	adds	r3, r7, #2
   17f7e:	881b      	ldrh	r3, [r3, #0]
   17f80:	041b      	lsls	r3, r3, #16
   17f82:	431a      	orrs	r2, r3
   17f84:	687b      	ldr	r3, [r7, #4]
   17f86:	0011      	movs	r1, r2
   17f88:	0018      	movs	r0, r3
   17f8a:	4b04      	ldr	r3, [pc, #16]	; (17f9c <prvTraceSetQueueNumberHigh16+0x3c>)
   17f8c:	4798      	blx	r3
}
   17f8e:	46c0      	nop			; (mov r8, r8)
   17f90:	46bd      	mov	sp, r7
   17f92:	b002      	add	sp, #8
   17f94:	bd80      	pop	{r7, pc}
   17f96:	46c0      	nop			; (mov r8, r8)
   17f98:	00017de1 	.word	0x00017de1
   17f9c:	0001b5b9 	.word	0x0001b5b9

00017fa0 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   17fa0:	b580      	push	{r7, lr}
   17fa2:	b084      	sub	sp, #16
   17fa4:	af00      	add	r7, sp, #0
   17fa6:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   17fa8:	2300      	movs	r3, #0
   17faa:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   17fac:	2300      	movs	r3, #0
   17fae:	60bb      	str	r3, [r7, #8]
   17fb0:	e018      	b.n	17fe4 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   17fb2:	4b14      	ldr	r3, [pc, #80]	; (18004 <prvAddTaskToStackMonitor+0x64>)
   17fb4:	68ba      	ldr	r2, [r7, #8]
   17fb6:	00d2      	lsls	r2, r2, #3
   17fb8:	58d3      	ldr	r3, [r2, r3]
   17fba:	2b00      	cmp	r3, #0
   17fbc:	d10f      	bne.n	17fde <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   17fbe:	4b11      	ldr	r3, [pc, #68]	; (18004 <prvAddTaskToStackMonitor+0x64>)
   17fc0:	68ba      	ldr	r2, [r7, #8]
   17fc2:	00d2      	lsls	r2, r2, #3
   17fc4:	6879      	ldr	r1, [r7, #4]
   17fc6:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   17fc8:	4a0e      	ldr	r2, [pc, #56]	; (18004 <prvAddTaskToStackMonitor+0x64>)
   17fca:	68bb      	ldr	r3, [r7, #8]
   17fcc:	00db      	lsls	r3, r3, #3
   17fce:	18d3      	adds	r3, r2, r3
   17fd0:	3304      	adds	r3, #4
   17fd2:	2201      	movs	r2, #1
   17fd4:	4252      	negs	r2, r2
   17fd6:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   17fd8:	2301      	movs	r3, #1
   17fda:	60fb      	str	r3, [r7, #12]
			break;
   17fdc:	e005      	b.n	17fea <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   17fde:	68bb      	ldr	r3, [r7, #8]
   17fe0:	3301      	adds	r3, #1
   17fe2:	60bb      	str	r3, [r7, #8]
   17fe4:	68bb      	ldr	r3, [r7, #8]
   17fe6:	2b09      	cmp	r3, #9
   17fe8:	dde3      	ble.n	17fb2 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   17fea:	68fb      	ldr	r3, [r7, #12]
   17fec:	2b00      	cmp	r3, #0
   17fee:	d104      	bne.n	17ffa <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   17ff0:	4b05      	ldr	r3, [pc, #20]	; (18008 <prvAddTaskToStackMonitor+0x68>)
   17ff2:	681b      	ldr	r3, [r3, #0]
   17ff4:	1c5a      	adds	r2, r3, #1
   17ff6:	4b04      	ldr	r3, [pc, #16]	; (18008 <prvAddTaskToStackMonitor+0x68>)
   17ff8:	601a      	str	r2, [r3, #0]
	}
}
   17ffa:	46c0      	nop			; (mov r8, r8)
   17ffc:	46bd      	mov	sp, r7
   17ffe:	b004      	add	sp, #16
   18000:	bd80      	pop	{r7, pc}
   18002:	46c0      	nop			; (mov r8, r8)
   18004:	20000b84 	.word	0x20000b84
   18008:	20000bd4 	.word	0x20000bd4

0001800c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   1800c:	b590      	push	{r4, r7, lr}
   1800e:	b085      	sub	sp, #20
   18010:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   18012:	2300      	movs	r3, #0
   18014:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   18016:	4b2b      	ldr	r3, [pc, #172]	; (180c4 <prvReportStackUsage+0xb8>)
   18018:	681b      	ldr	r3, [r3, #0]
   1801a:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   1801c:	4b29      	ldr	r3, [pc, #164]	; (180c4 <prvReportStackUsage+0xb8>)
   1801e:	681a      	ldr	r2, [r3, #0]
   18020:	4b29      	ldr	r3, [pc, #164]	; (180c8 <prvReportStackUsage+0xbc>)
   18022:	00d2      	lsls	r2, r2, #3
   18024:	58d3      	ldr	r3, [r2, r3]
   18026:	2b00      	cmp	r3, #0
   18028:	d035      	beq.n	18096 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   1802a:	4b26      	ldr	r3, [pc, #152]	; (180c4 <prvReportStackUsage+0xb8>)
   1802c:	681a      	ldr	r2, [r3, #0]
   1802e:	4b26      	ldr	r3, [pc, #152]	; (180c8 <prvReportStackUsage+0xbc>)
   18030:	00d2      	lsls	r2, r2, #3
   18032:	58d3      	ldr	r3, [r2, r3]
   18034:	0018      	movs	r0, r3
   18036:	4b25      	ldr	r3, [pc, #148]	; (180cc <prvReportStackUsage+0xc0>)
   18038:	4798      	blx	r3
   1803a:	0003      	movs	r3, r0
   1803c:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   1803e:	4b21      	ldr	r3, [pc, #132]	; (180c4 <prvReportStackUsage+0xb8>)
   18040:	681b      	ldr	r3, [r3, #0]
   18042:	4a21      	ldr	r2, [pc, #132]	; (180c8 <prvReportStackUsage+0xbc>)
   18044:	00db      	lsls	r3, r3, #3
   18046:	18d3      	adds	r3, r2, r3
   18048:	3304      	adds	r3, #4
   1804a:	681a      	ldr	r2, [r3, #0]
   1804c:	687b      	ldr	r3, [r7, #4]
   1804e:	429a      	cmp	r2, r3
   18050:	d907      	bls.n	18062 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   18052:	4b1c      	ldr	r3, [pc, #112]	; (180c4 <prvReportStackUsage+0xb8>)
   18054:	681b      	ldr	r3, [r3, #0]
   18056:	4a1c      	ldr	r2, [pc, #112]	; (180c8 <prvReportStackUsage+0xbc>)
   18058:	00db      	lsls	r3, r3, #3
   1805a:	18d3      	adds	r3, r2, r3
   1805c:	3304      	adds	r3, #4
   1805e:	687a      	ldr	r2, [r7, #4]
   18060:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   18062:	4b18      	ldr	r3, [pc, #96]	; (180c4 <prvReportStackUsage+0xb8>)
   18064:	681a      	ldr	r2, [r3, #0]
   18066:	4b18      	ldr	r3, [pc, #96]	; (180c8 <prvReportStackUsage+0xbc>)
   18068:	00d2      	lsls	r2, r2, #3
   1806a:	58d3      	ldr	r3, [r2, r3]
   1806c:	0018      	movs	r0, r3
   1806e:	4b18      	ldr	r3, [pc, #96]	; (180d0 <prvReportStackUsage+0xc4>)
   18070:	4798      	blx	r3
   18072:	0003      	movs	r3, r0
   18074:	b2db      	uxtb	r3, r3
   18076:	0019      	movs	r1, r3
   18078:	4b12      	ldr	r3, [pc, #72]	; (180c4 <prvReportStackUsage+0xb8>)
   1807a:	681b      	ldr	r3, [r3, #0]
   1807c:	4a12      	ldr	r2, [pc, #72]	; (180c8 <prvReportStackUsage+0xbc>)
   1807e:	00db      	lsls	r3, r3, #3
   18080:	18d3      	adds	r3, r2, r3
   18082:	3304      	adds	r3, #4
   18084:	681b      	ldr	r3, [r3, #0]
   18086:	000a      	movs	r2, r1
   18088:	2103      	movs	r1, #3
   1808a:	20ea      	movs	r0, #234	; 0xea
   1808c:	4c11      	ldr	r4, [pc, #68]	; (180d4 <prvReportStackUsage+0xc8>)
   1808e:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   18090:	68fb      	ldr	r3, [r7, #12]
   18092:	3301      	adds	r3, #1
   18094:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   18096:	4b0b      	ldr	r3, [pc, #44]	; (180c4 <prvReportStackUsage+0xb8>)
   18098:	681b      	ldr	r3, [r3, #0]
   1809a:	1c5a      	adds	r2, r3, #1
   1809c:	4b0e      	ldr	r3, [pc, #56]	; (180d8 <prvReportStackUsage+0xcc>)
   1809e:	210a      	movs	r1, #10
   180a0:	0010      	movs	r0, r2
   180a2:	4798      	blx	r3
   180a4:	000b      	movs	r3, r1
   180a6:	001a      	movs	r2, r3
   180a8:	4b06      	ldr	r3, [pc, #24]	; (180c4 <prvReportStackUsage+0xb8>)
   180aa:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   180ac:	68fb      	ldr	r3, [r7, #12]
   180ae:	2b00      	cmp	r3, #0
   180b0:	dc04      	bgt.n	180bc <prvReportStackUsage+0xb0>
   180b2:	4b04      	ldr	r3, [pc, #16]	; (180c4 <prvReportStackUsage+0xb8>)
   180b4:	681a      	ldr	r2, [r3, #0]
   180b6:	68bb      	ldr	r3, [r7, #8]
   180b8:	429a      	cmp	r2, r3
   180ba:	d1af      	bne.n	1801c <prvReportStackUsage+0x10>
}
   180bc:	46c0      	nop			; (mov r8, r8)
   180be:	46bd      	mov	sp, r7
   180c0:	b005      	add	sp, #20
   180c2:	bd90      	pop	{r4, r7, pc}
   180c4:	20000bd8 	.word	0x20000bd8
   180c8:	20000b84 	.word	0x20000b84
   180cc:	0001caa1 	.word	0x0001caa1
   180d0:	00017e21 	.word	0x00017e21
   180d4:	00018969 	.word	0x00018969
   180d8:	000329e5 	.word	0x000329e5

000180dc <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   180dc:	b580      	push	{r7, lr}
   180de:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   180e0:	4b02      	ldr	r3, [pc, #8]	; (180ec <prvTraceGetCurrentTaskHandle+0x10>)
   180e2:	4798      	blx	r3
   180e4:	0003      	movs	r3, r0
}
   180e6:	0018      	movs	r0, r3
   180e8:	46bd      	mov	sp, r7
   180ea:	bd80      	pop	{r7, pc}
   180ec:	0001cb4d 	.word	0x0001cb4d

000180f0 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   180f0:	b590      	push	{r4, r7, lr}
   180f2:	b085      	sub	sp, #20
   180f4:	af02      	add	r7, sp, #8
   180f6:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   180f8:	4b14      	ldr	r3, [pc, #80]	; (1814c <vTraceEnable+0x5c>)
   180fa:	4798      	blx	r3

	if (startOption == TRC_START)
   180fc:	687b      	ldr	r3, [r7, #4]
   180fe:	2b01      	cmp	r3, #1
   18100:	d102      	bne.n	18108 <vTraceEnable+0x18>
	{
		vTraceStart();
   18102:	4b13      	ldr	r3, [pc, #76]	; (18150 <vTraceEnable+0x60>)
   18104:	4798      	blx	r3
   18106:	e00e      	b.n	18126 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   18108:	687b      	ldr	r3, [r7, #4]
   1810a:	2b02      	cmp	r3, #2
   1810c:	d104      	bne.n	18118 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1810e:	4b11      	ldr	r3, [pc, #68]	; (18154 <vTraceEnable+0x64>)
   18110:	0018      	movs	r0, r3
   18112:	4b11      	ldr	r3, [pc, #68]	; (18158 <vTraceEnable+0x68>)
   18114:	4798      	blx	r3
   18116:	e006      	b.n	18126 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   18118:	687b      	ldr	r3, [r7, #4]
   1811a:	2b00      	cmp	r3, #0
   1811c:	d003      	beq.n	18126 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   1811e:	4b0f      	ldr	r3, [pc, #60]	; (1815c <vTraceEnable+0x6c>)
   18120:	0018      	movs	r0, r3
   18122:	4b0d      	ldr	r3, [pc, #52]	; (18158 <vTraceEnable+0x68>)
   18124:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   18126:	4b0e      	ldr	r3, [pc, #56]	; (18160 <vTraceEnable+0x70>)
   18128:	681b      	ldr	r3, [r3, #0]
   1812a:	2b00      	cmp	r3, #0
   1812c:	d10a      	bne.n	18144 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   1812e:	2396      	movs	r3, #150	; 0x96
   18130:	005a      	lsls	r2, r3, #1
   18132:	490c      	ldr	r1, [pc, #48]	; (18164 <vTraceEnable+0x74>)
   18134:	480c      	ldr	r0, [pc, #48]	; (18168 <vTraceEnable+0x78>)
   18136:	4b0a      	ldr	r3, [pc, #40]	; (18160 <vTraceEnable+0x70>)
   18138:	9301      	str	r3, [sp, #4]
   1813a:	2304      	movs	r3, #4
   1813c:	9300      	str	r3, [sp, #0]
   1813e:	2300      	movs	r3, #0
   18140:	4c0a      	ldr	r4, [pc, #40]	; (1816c <vTraceEnable+0x7c>)
   18142:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   18144:	46c0      	nop			; (mov r8, r8)
   18146:	46bd      	mov	sp, r7
   18148:	b003      	add	sp, #12
   1814a:	bd90      	pop	{r4, r7, pc}
   1814c:	00019035 	.word	0x00019035
   18150:	0001858d 	.word	0x0001858d
   18154:	00036b38 	.word	0x00036b38
   18158:	000196dd 	.word	0x000196dd
   1815c:	00036b78 	.word	0x00036b78
   18160:	20000b80 	.word	0x20000b80
   18164:	00036bac 	.word	0x00036bac
   18168:	00018171 	.word	0x00018171
   1816c:	0001baa5 	.word	0x0001baa5

00018170 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   18170:	b580      	push	{r7, lr}
   18172:	b082      	sub	sp, #8
   18174:	af00      	add	r7, sp, #0
   18176:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   18178:	4b04      	ldr	r3, [pc, #16]	; (1818c <TzCtrl+0x1c>)
   1817a:	4798      	blx	r3
   1817c:	1e03      	subs	r3, r0, #0
   1817e:	d001      	beq.n	18184 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   18180:	4b03      	ldr	r3, [pc, #12]	; (18190 <TzCtrl+0x20>)
   18182:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   18184:	2004      	movs	r0, #4
   18186:	4b03      	ldr	r3, [pc, #12]	; (18194 <TzCtrl+0x24>)
   18188:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   1818a:	e7f5      	b.n	18178 <TzCtrl+0x8>
   1818c:	000185d1 	.word	0x000185d1
   18190:	0001800d 	.word	0x0001800d
   18194:	0001be41 	.word	0x0001be41

00018198 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   18198:	b580      	push	{r7, lr}
   1819a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1819c:	4b60      	ldr	r3, [pc, #384]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   1819e:	681b      	ldr	r3, [r3, #0]
   181a0:	2209      	movs	r2, #9
   181a2:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   181a4:	4b5e      	ldr	r3, [pc, #376]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   181a6:	681b      	ldr	r3, [r3, #0]
   181a8:	2264      	movs	r2, #100	; 0x64
   181aa:	210a      	movs	r1, #10
   181ac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   181ae:	4b5c      	ldr	r3, [pc, #368]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   181b0:	681b      	ldr	r3, [r3, #0]
   181b2:	2265      	movs	r2, #101	; 0x65
   181b4:	210a      	movs	r1, #10
   181b6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   181b8:	4b59      	ldr	r3, [pc, #356]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   181ba:	681b      	ldr	r3, [r3, #0]
   181bc:	2266      	movs	r2, #102	; 0x66
   181be:	210a      	movs	r1, #10
   181c0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   181c2:	4b57      	ldr	r3, [pc, #348]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   181c4:	681b      	ldr	r3, [r3, #0]
   181c6:	2267      	movs	r2, #103	; 0x67
   181c8:	210f      	movs	r1, #15
   181ca:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   181cc:	4b54      	ldr	r3, [pc, #336]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   181ce:	681b      	ldr	r3, [r3, #0]
   181d0:	2268      	movs	r2, #104	; 0x68
   181d2:	2105      	movs	r1, #5
   181d4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   181d6:	4b52      	ldr	r3, [pc, #328]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   181d8:	681b      	ldr	r3, [r3, #0]
   181da:	2269      	movs	r2, #105	; 0x69
   181dc:	2105      	movs	r1, #5
   181de:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   181e0:	4b4f      	ldr	r3, [pc, #316]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   181e2:	681b      	ldr	r3, [r3, #0]
   181e4:	226a      	movs	r2, #106	; 0x6a
   181e6:	2105      	movs	r1, #5
   181e8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   181ea:	4b4d      	ldr	r3, [pc, #308]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   181ec:	681b      	ldr	r3, [r3, #0]
   181ee:	226b      	movs	r2, #107	; 0x6b
   181f0:	2105      	movs	r1, #5
   181f2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   181f4:	4b4a      	ldr	r3, [pc, #296]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   181f6:	681b      	ldr	r3, [r3, #0]
   181f8:	226c      	movs	r2, #108	; 0x6c
   181fa:	2105      	movs	r1, #5
   181fc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   181fe:	4b48      	ldr	r3, [pc, #288]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   18200:	681b      	ldr	r3, [r3, #0]
   18202:	2270      	movs	r2, #112	; 0x70
   18204:	210f      	movs	r1, #15
   18206:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   18208:	4b45      	ldr	r3, [pc, #276]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   1820a:	681b      	ldr	r3, [r3, #0]
   1820c:	2271      	movs	r2, #113	; 0x71
   1820e:	210f      	movs	r1, #15
   18210:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   18212:	4b43      	ldr	r3, [pc, #268]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   18214:	681b      	ldr	r3, [r3, #0]
   18216:	2272      	movs	r2, #114	; 0x72
   18218:	210f      	movs	r1, #15
   1821a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   1821c:	4b40      	ldr	r3, [pc, #256]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   1821e:	681b      	ldr	r3, [r3, #0]
   18220:	2273      	movs	r2, #115	; 0x73
   18222:	210f      	movs	r1, #15
   18224:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   18226:	4b3e      	ldr	r3, [pc, #248]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   18228:	681b      	ldr	r3, [r3, #0]
   1822a:	2274      	movs	r2, #116	; 0x74
   1822c:	210f      	movs	r1, #15
   1822e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   18230:	4b3b      	ldr	r3, [pc, #236]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   18232:	681b      	ldr	r3, [r3, #0]
   18234:	2275      	movs	r2, #117	; 0x75
   18236:	210f      	movs	r1, #15
   18238:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   1823a:	4b39      	ldr	r3, [pc, #228]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   1823c:	681b      	ldr	r3, [r3, #0]
   1823e:	2276      	movs	r2, #118	; 0x76
   18240:	210f      	movs	r1, #15
   18242:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   18244:	4b36      	ldr	r3, [pc, #216]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   18246:	681b      	ldr	r3, [r3, #0]
   18248:	2277      	movs	r2, #119	; 0x77
   1824a:	210f      	movs	r1, #15
   1824c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1824e:	4b34      	ldr	r3, [pc, #208]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   18250:	681b      	ldr	r3, [r3, #0]
   18252:	2278      	movs	r2, #120	; 0x78
   18254:	210f      	movs	r1, #15
   18256:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   18258:	4b31      	ldr	r3, [pc, #196]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   1825a:	681b      	ldr	r3, [r3, #0]
   1825c:	227c      	movs	r2, #124	; 0x7c
   1825e:	2110      	movs	r1, #16
   18260:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   18262:	4b2f      	ldr	r3, [pc, #188]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   18264:	681b      	ldr	r3, [r3, #0]
   18266:	227d      	movs	r2, #125	; 0x7d
   18268:	2110      	movs	r1, #16
   1826a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   1826c:	4b2c      	ldr	r3, [pc, #176]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   1826e:	681b      	ldr	r3, [r3, #0]
   18270:	227e      	movs	r2, #126	; 0x7e
   18272:	2110      	movs	r1, #16
   18274:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   18276:	4b2a      	ldr	r3, [pc, #168]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   18278:	681b      	ldr	r3, [r3, #0]
   1827a:	227f      	movs	r2, #127	; 0x7f
   1827c:	2113      	movs	r1, #19
   1827e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   18280:	4b27      	ldr	r3, [pc, #156]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   18282:	681b      	ldr	r3, [r3, #0]
   18284:	2280      	movs	r2, #128	; 0x80
   18286:	2111      	movs	r1, #17
   18288:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   1828a:	4b25      	ldr	r3, [pc, #148]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   1828c:	681b      	ldr	r3, [r3, #0]
   1828e:	2281      	movs	r2, #129	; 0x81
   18290:	2110      	movs	r1, #16
   18292:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   18294:	4b22      	ldr	r3, [pc, #136]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   18296:	681b      	ldr	r3, [r3, #0]
   18298:	2282      	movs	r2, #130	; 0x82
   1829a:	2113      	movs	r1, #19
   1829c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   1829e:	4b20      	ldr	r3, [pc, #128]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   182a0:	681b      	ldr	r3, [r3, #0]
   182a2:	2283      	movs	r2, #131	; 0x83
   182a4:	2113      	movs	r1, #19
   182a6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   182a8:	4b1d      	ldr	r3, [pc, #116]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   182aa:	681b      	ldr	r3, [r3, #0]
   182ac:	2284      	movs	r2, #132	; 0x84
   182ae:	2113      	movs	r1, #19
   182b0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   182b2:	4b1b      	ldr	r3, [pc, #108]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   182b4:	681b      	ldr	r3, [r3, #0]
   182b6:	2288      	movs	r2, #136	; 0x88
   182b8:	2100      	movs	r1, #0
   182ba:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   182bc:	4b18      	ldr	r3, [pc, #96]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   182be:	681b      	ldr	r3, [r3, #0]
   182c0:	228a      	movs	r2, #138	; 0x8a
   182c2:	21a0      	movs	r1, #160	; 0xa0
   182c4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   182c6:	4b16      	ldr	r3, [pc, #88]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   182c8:	681b      	ldr	r3, [r3, #0]
   182ca:	228c      	movs	r2, #140	; 0x8c
   182cc:	21a0      	movs	r1, #160	; 0xa0
   182ce:	0049      	lsls	r1, r1, #1
   182d0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   182d2:	4b13      	ldr	r3, [pc, #76]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   182d4:	681b      	ldr	r3, [r3, #0]
   182d6:	228e      	movs	r2, #142	; 0x8e
   182d8:	21f0      	movs	r1, #240	; 0xf0
   182da:	0049      	lsls	r1, r1, #1
   182dc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   182de:	4b10      	ldr	r3, [pc, #64]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   182e0:	681b      	ldr	r3, [r3, #0]
   182e2:	2290      	movs	r2, #144	; 0x90
   182e4:	490f      	ldr	r1, [pc, #60]	; (18324 <vTraceInitObjectPropertyTable+0x18c>)
   182e6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   182e8:	4b0d      	ldr	r3, [pc, #52]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   182ea:	681b      	ldr	r3, [r3, #0]
   182ec:	2292      	movs	r2, #146	; 0x92
   182ee:	490e      	ldr	r1, [pc, #56]	; (18328 <vTraceInitObjectPropertyTable+0x190>)
   182f0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   182f2:	4b0b      	ldr	r3, [pc, #44]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   182f4:	681b      	ldr	r3, [r3, #0]
   182f6:	2294      	movs	r2, #148	; 0x94
   182f8:	490c      	ldr	r1, [pc, #48]	; (1832c <vTraceInitObjectPropertyTable+0x194>)
   182fa:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   182fc:	4b08      	ldr	r3, [pc, #32]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   182fe:	681b      	ldr	r3, [r3, #0]
   18300:	2296      	movs	r2, #150	; 0x96
   18302:	490b      	ldr	r1, [pc, #44]	; (18330 <vTraceInitObjectPropertyTable+0x198>)
   18304:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   18306:	4b06      	ldr	r3, [pc, #24]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   18308:	681b      	ldr	r3, [r3, #0]
   1830a:	2298      	movs	r2, #152	; 0x98
   1830c:	218c      	movs	r1, #140	; 0x8c
   1830e:	00c9      	lsls	r1, r1, #3
   18310:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   18312:	4b03      	ldr	r3, [pc, #12]	; (18320 <vTraceInitObjectPropertyTable+0x188>)
   18314:	681b      	ldr	r3, [r3, #0]
   18316:	4a07      	ldr	r2, [pc, #28]	; (18334 <vTraceInitObjectPropertyTable+0x19c>)
   18318:	661a      	str	r2, [r3, #96]	; 0x60
}
   1831a:	46c0      	nop			; (mov r8, r8)
   1831c:	46bd      	mov	sp, r7
   1831e:	bd80      	pop	{r7, pc}
   18320:	20000c98 	.word	0x20000c98
   18324:	000002fd 	.word	0x000002fd
   18328:	00000352 	.word	0x00000352
   1832c:	000003a2 	.word	0x000003a2
   18330:	00000401 	.word	0x00000401
   18334:	000004bf 	.word	0x000004bf

00018338 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   18338:	b580      	push	{r7, lr}
   1833a:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   1833c:	4b2e      	ldr	r3, [pc, #184]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   1833e:	2200      	movs	r2, #0
   18340:	825a      	strh	r2, [r3, #18]
   18342:	4b2d      	ldr	r3, [pc, #180]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   18344:	8a5a      	ldrh	r2, [r3, #18]
   18346:	4b2c      	ldr	r3, [pc, #176]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   18348:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   1834a:	4b2b      	ldr	r3, [pc, #172]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   1834c:	220a      	movs	r2, #10
   1834e:	829a      	strh	r2, [r3, #20]
   18350:	4b29      	ldr	r3, [pc, #164]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   18352:	8a9a      	ldrh	r2, [r3, #20]
   18354:	4b28      	ldr	r3, [pc, #160]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   18356:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   18358:	4b27      	ldr	r3, [pc, #156]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   1835a:	2214      	movs	r2, #20
   1835c:	82da      	strh	r2, [r3, #22]
   1835e:	4b26      	ldr	r3, [pc, #152]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   18360:	8ada      	ldrh	r2, [r3, #22]
   18362:	4b25      	ldr	r3, [pc, #148]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   18364:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   18366:	4b24      	ldr	r3, [pc, #144]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   18368:	221e      	movs	r2, #30
   1836a:	831a      	strh	r2, [r3, #24]
   1836c:	4b22      	ldr	r3, [pc, #136]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   1836e:	8b1a      	ldrh	r2, [r3, #24]
   18370:	4b21      	ldr	r3, [pc, #132]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   18372:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   18374:	4b20      	ldr	r3, [pc, #128]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   18376:	222d      	movs	r2, #45	; 0x2d
   18378:	835a      	strh	r2, [r3, #26]
   1837a:	4b1f      	ldr	r3, [pc, #124]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   1837c:	8b5a      	ldrh	r2, [r3, #26]
   1837e:	4b1e      	ldr	r3, [pc, #120]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   18380:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   18382:	4b1d      	ldr	r3, [pc, #116]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   18384:	2232      	movs	r2, #50	; 0x32
   18386:	839a      	strh	r2, [r3, #28]
   18388:	4b1b      	ldr	r3, [pc, #108]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   1838a:	8b9a      	ldrh	r2, [r3, #28]
   1838c:	4b1a      	ldr	r3, [pc, #104]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   1838e:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   18390:	4b19      	ldr	r3, [pc, #100]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   18392:	2237      	movs	r2, #55	; 0x37
   18394:	83da      	strh	r2, [r3, #30]
   18396:	4b18      	ldr	r3, [pc, #96]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   18398:	8bda      	ldrh	r2, [r3, #30]
   1839a:	4b17      	ldr	r3, [pc, #92]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   1839c:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1839e:	4b16      	ldr	r3, [pc, #88]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   183a0:	223c      	movs	r2, #60	; 0x3c
   183a2:	841a      	strh	r2, [r3, #32]
   183a4:	4b14      	ldr	r3, [pc, #80]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   183a6:	8c1a      	ldrh	r2, [r3, #32]
   183a8:	4b13      	ldr	r3, [pc, #76]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   183aa:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   183ac:	4b12      	ldr	r3, [pc, #72]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   183ae:	2241      	movs	r2, #65	; 0x41
   183b0:	845a      	strh	r2, [r3, #34]	; 0x22
   183b2:	4b11      	ldr	r3, [pc, #68]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   183b4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   183b6:	4b10      	ldr	r3, [pc, #64]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   183b8:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   183ba:	4b0f      	ldr	r3, [pc, #60]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   183bc:	2209      	movs	r2, #9
   183be:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   183c0:	4b0d      	ldr	r3, [pc, #52]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   183c2:	2213      	movs	r2, #19
   183c4:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   183c6:	4b0c      	ldr	r3, [pc, #48]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   183c8:	221d      	movs	r2, #29
   183ca:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   183cc:	4b0a      	ldr	r3, [pc, #40]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   183ce:	222c      	movs	r2, #44	; 0x2c
   183d0:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   183d2:	4b09      	ldr	r3, [pc, #36]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   183d4:	2231      	movs	r2, #49	; 0x31
   183d6:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   183d8:	4b07      	ldr	r3, [pc, #28]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   183da:	2236      	movs	r2, #54	; 0x36
   183dc:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   183de:	4b06      	ldr	r3, [pc, #24]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   183e0:	223b      	movs	r2, #59	; 0x3b
   183e2:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   183e4:	4b04      	ldr	r3, [pc, #16]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   183e6:	2240      	movs	r2, #64	; 0x40
   183e8:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   183ea:	4b03      	ldr	r3, [pc, #12]	; (183f8 <vTraceInitObjectHandleStack+0xc0>)
   183ec:	2245      	movs	r2, #69	; 0x45
   183ee:	869a      	strh	r2, [r3, #52]	; 0x34
}
   183f0:	46c0      	nop			; (mov r8, r8)
   183f2:	46bd      	mov	sp, r7
   183f4:	bd80      	pop	{r7, pc}
   183f6:	46c0      	nop			; (mov r8, r8)
   183f8:	20000c08 	.word	0x20000c08

000183fc <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   183fc:	b580      	push	{r7, lr}
   183fe:	b082      	sub	sp, #8
   18400:	af00      	add	r7, sp, #0
   18402:	0002      	movs	r2, r0
   18404:	1dfb      	adds	r3, r7, #7
   18406:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   18408:	1dfb      	adds	r3, r7, #7
   1840a:	781b      	ldrb	r3, [r3, #0]
   1840c:	2b08      	cmp	r3, #8
   1840e:	d816      	bhi.n	1843e <pszTraceGetErrorNotEnoughHandles+0x42>
   18410:	009a      	lsls	r2, r3, #2
   18412:	4b0d      	ldr	r3, [pc, #52]	; (18448 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   18414:	18d3      	adds	r3, r2, r3
   18416:	681b      	ldr	r3, [r3, #0]
   18418:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1841a:	4b0c      	ldr	r3, [pc, #48]	; (1844c <pszTraceGetErrorNotEnoughHandles+0x50>)
   1841c:	e010      	b.n	18440 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1841e:	4b0c      	ldr	r3, [pc, #48]	; (18450 <pszTraceGetErrorNotEnoughHandles+0x54>)
   18420:	e00e      	b.n	18440 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   18422:	4b0c      	ldr	r3, [pc, #48]	; (18454 <pszTraceGetErrorNotEnoughHandles+0x58>)
   18424:	e00c      	b.n	18440 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   18426:	4b0c      	ldr	r3, [pc, #48]	; (18458 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   18428:	e00a      	b.n	18440 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   1842a:	4b0c      	ldr	r3, [pc, #48]	; (1845c <pszTraceGetErrorNotEnoughHandles+0x60>)
   1842c:	e008      	b.n	18440 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   1842e:	4b0c      	ldr	r3, [pc, #48]	; (18460 <pszTraceGetErrorNotEnoughHandles+0x64>)
   18430:	e006      	b.n	18440 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   18432:	4b0c      	ldr	r3, [pc, #48]	; (18464 <pszTraceGetErrorNotEnoughHandles+0x68>)
   18434:	e004      	b.n	18440 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   18436:	4b0c      	ldr	r3, [pc, #48]	; (18468 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   18438:	e002      	b.n	18440 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1843a:	4b0c      	ldr	r3, [pc, #48]	; (1846c <pszTraceGetErrorNotEnoughHandles+0x70>)
   1843c:	e000      	b.n	18440 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   1843e:	4b0c      	ldr	r3, [pc, #48]	; (18470 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   18440:	0018      	movs	r0, r3
   18442:	46bd      	mov	sp, r7
   18444:	b002      	add	sp, #8
   18446:	bd80      	pop	{r7, pc}
   18448:	00036eb4 	.word	0x00036eb4
   1844c:	00036bb4 	.word	0x00036bb4
   18450:	00036bfc 	.word	0x00036bfc
   18454:	00036c44 	.word	0x00036c44
   18458:	00036c98 	.word	0x00036c98
   1845c:	00036ce4 	.word	0x00036ce4
   18460:	00036d30 	.word	0x00036d30
   18464:	00036d7c 	.word	0x00036d7c
   18468:	00036dd0 	.word	0x00036dd0
   1846c:	00036e28 	.word	0x00036e28
   18470:	00036e84 	.word	0x00036e84

00018474 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   18474:	b590      	push	{r4, r7, lr}
   18476:	b087      	sub	sp, #28
   18478:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   1847a:	2317      	movs	r3, #23
   1847c:	18fb      	adds	r3, r7, r3
   1847e:	2200      	movs	r2, #0
   18480:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   18482:	4b36      	ldr	r3, [pc, #216]	; (1855c <uiTraceStart+0xe8>)
   18484:	681b      	ldr	r3, [r3, #0]
   18486:	2b00      	cmp	r3, #0
   18488:	d10b      	bne.n	184a2 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1848a:	4b34      	ldr	r3, [pc, #208]	; (1855c <uiTraceStart+0xe8>)
   1848c:	681b      	ldr	r3, [r3, #0]
   1848e:	2b00      	cmp	r3, #0
   18490:	d105      	bne.n	1849e <uiTraceStart+0x2a>
   18492:	4b33      	ldr	r3, [pc, #204]	; (18560 <uiTraceStart+0xec>)
   18494:	0018      	movs	r0, r3
   18496:	4b33      	ldr	r3, [pc, #204]	; (18564 <uiTraceStart+0xf0>)
   18498:	4798      	blx	r3
   1849a:	2300      	movs	r3, #0
   1849c:	e059      	b.n	18552 <uiTraceStart+0xde>
		return 0;
   1849e:	2300      	movs	r3, #0
   184a0:	e057      	b.n	18552 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   184a2:	4b2e      	ldr	r3, [pc, #184]	; (1855c <uiTraceStart+0xe8>)
   184a4:	681b      	ldr	r3, [r3, #0]
   184a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   184a8:	2b01      	cmp	r3, #1
   184aa:	d101      	bne.n	184b0 <uiTraceStart+0x3c>
		return 1; /* Already running */
   184ac:	2301      	movs	r3, #1
   184ae:	e050      	b.n	18552 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   184b0:	4b2d      	ldr	r3, [pc, #180]	; (18568 <uiTraceStart+0xf4>)
   184b2:	681b      	ldr	r3, [r3, #0]
   184b4:	2b00      	cmp	r3, #0
   184b6:	d149      	bne.n	1854c <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   184b8:	f3ef 8310 	mrs	r3, PRIMASK
   184bc:	60bb      	str	r3, [r7, #8]
  return(result);
   184be:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   184c0:	613b      	str	r3, [r7, #16]
   184c2:	2301      	movs	r3, #1
   184c4:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   184c6:	68fb      	ldr	r3, [r7, #12]
   184c8:	f383 8810 	msr	PRIMASK, r3
   184cc:	4b27      	ldr	r3, [pc, #156]	; (1856c <uiTraceStart+0xf8>)
   184ce:	681b      	ldr	r3, [r3, #0]
   184d0:	1c5a      	adds	r2, r3, #1
   184d2:	4b26      	ldr	r3, [pc, #152]	; (1856c <uiTraceStart+0xf8>)
   184d4:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   184d6:	4b21      	ldr	r3, [pc, #132]	; (1855c <uiTraceStart+0xe8>)
   184d8:	681b      	ldr	r3, [r3, #0]
   184da:	2201      	movs	r2, #1
   184dc:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   184de:	4b24      	ldr	r3, [pc, #144]	; (18570 <uiTraceStart+0xfc>)
   184e0:	4798      	blx	r3
   184e2:	0003      	movs	r3, r0
   184e4:	0018      	movs	r0, r3
   184e6:	4b23      	ldr	r3, [pc, #140]	; (18574 <uiTraceStart+0x100>)
   184e8:	4798      	blx	r3
   184ea:	0003      	movs	r3, r0
   184ec:	001a      	movs	r2, r3
   184ee:	2317      	movs	r3, #23
   184f0:	18fb      	adds	r3, r7, r3
   184f2:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   184f4:	2317      	movs	r3, #23
   184f6:	18fb      	adds	r3, r7, r3
   184f8:	781b      	ldrb	r3, [r3, #0]
   184fa:	2b00      	cmp	r3, #0
   184fc:	d116      	bne.n	1852c <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   184fe:	2317      	movs	r3, #23
   18500:	18fc      	adds	r4, r7, r3
   18502:	2003      	movs	r0, #3
   18504:	4b1c      	ldr	r3, [pc, #112]	; (18578 <uiTraceStart+0x104>)
   18506:	4798      	blx	r3
   18508:	0003      	movs	r3, r0
   1850a:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   1850c:	4a1b      	ldr	r2, [pc, #108]	; (1857c <uiTraceStart+0x108>)
   1850e:	2317      	movs	r3, #23
   18510:	18fb      	adds	r3, r7, r3
   18512:	781b      	ldrb	r3, [r3, #0]
   18514:	0019      	movs	r1, r3
   18516:	2003      	movs	r0, #3
   18518:	4b19      	ldr	r3, [pc, #100]	; (18580 <uiTraceStart+0x10c>)
   1851a:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   1851c:	2317      	movs	r3, #23
   1851e:	18fb      	adds	r3, r7, r3
   18520:	781b      	ldrb	r3, [r3, #0]
   18522:	2200      	movs	r2, #0
   18524:	0019      	movs	r1, r3
   18526:	2003      	movs	r0, #3
   18528:	4b16      	ldr	r3, [pc, #88]	; (18584 <uiTraceStart+0x110>)
   1852a:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   1852c:	2317      	movs	r3, #23
   1852e:	18fb      	adds	r3, r7, r3
   18530:	781b      	ldrb	r3, [r3, #0]
   18532:	0018      	movs	r0, r3
   18534:	4b14      	ldr	r3, [pc, #80]	; (18588 <uiTraceStart+0x114>)
   18536:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   18538:	4b0c      	ldr	r3, [pc, #48]	; (1856c <uiTraceStart+0xf8>)
   1853a:	681b      	ldr	r3, [r3, #0]
   1853c:	1e5a      	subs	r2, r3, #1
   1853e:	4b0b      	ldr	r3, [pc, #44]	; (1856c <uiTraceStart+0xf8>)
   18540:	601a      	str	r2, [r3, #0]
   18542:	693b      	ldr	r3, [r7, #16]
   18544:	607b      	str	r3, [r7, #4]
   18546:	687b      	ldr	r3, [r7, #4]
   18548:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   1854c:	4b03      	ldr	r3, [pc, #12]	; (1855c <uiTraceStart+0xe8>)
   1854e:	681b      	ldr	r3, [r3, #0]
   18550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   18552:	0018      	movs	r0, r3
   18554:	46bd      	mov	sp, r7
   18556:	b007      	add	sp, #28
   18558:	bd90      	pop	{r4, r7, pc}
   1855a:	46c0      	nop			; (mov r8, r8)
   1855c:	20000c98 	.word	0x20000c98
   18560:	00036ed8 	.word	0x00036ed8
   18564:	000196dd 	.word	0x000196dd
   18568:	20000bf8 	.word	0x20000bf8
   1856c:	20000bf0 	.word	0x20000bf0
   18570:	000180dd 	.word	0x000180dd
   18574:	00017e21 	.word	0x00017e21
   18578:	000193c1 	.word	0x000193c1
   1857c:	00036f1c 	.word	0x00036f1c
   18580:	000195f1 	.word	0x000195f1
   18584:	00018d55 	.word	0x00018d55
   18588:	00018c3d 	.word	0x00018c3d

0001858c <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1858c:	b580      	push	{r7, lr}
   1858e:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   18590:	4b02      	ldr	r3, [pc, #8]	; (1859c <vTraceStart+0x10>)
   18592:	4798      	blx	r3
}
   18594:	46c0      	nop			; (mov r8, r8)
   18596:	46bd      	mov	sp, r7
   18598:	bd80      	pop	{r7, pc}
   1859a:	46c0      	nop			; (mov r8, r8)
   1859c:	00018475 	.word	0x00018475

000185a0 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   185a0:	b580      	push	{r7, lr}
   185a2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   185a4:	4b08      	ldr	r3, [pc, #32]	; (185c8 <vTraceStop+0x28>)
   185a6:	681b      	ldr	r3, [r3, #0]
   185a8:	2b00      	cmp	r3, #0
   185aa:	d003      	beq.n	185b4 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   185ac:	4b06      	ldr	r3, [pc, #24]	; (185c8 <vTraceStop+0x28>)
   185ae:	681b      	ldr	r3, [r3, #0]
   185b0:	2200      	movs	r2, #0
   185b2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   185b4:	4b05      	ldr	r3, [pc, #20]	; (185cc <vTraceStop+0x2c>)
   185b6:	681b      	ldr	r3, [r3, #0]
   185b8:	2b00      	cmp	r3, #0
   185ba:	d002      	beq.n	185c2 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   185bc:	4b03      	ldr	r3, [pc, #12]	; (185cc <vTraceStop+0x2c>)
   185be:	681b      	ldr	r3, [r3, #0]
   185c0:	4798      	blx	r3
	}
}
   185c2:	46c0      	nop			; (mov r8, r8)
   185c4:	46bd      	mov	sp, r7
   185c6:	bd80      	pop	{r7, pc}
   185c8:	20000c98 	.word	0x20000c98
   185cc:	20000c00 	.word	0x20000c00

000185d0 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   185d0:	b580      	push	{r7, lr}
   185d2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   185d4:	4b05      	ldr	r3, [pc, #20]	; (185ec <xTraceIsRecordingEnabled+0x1c>)
   185d6:	681b      	ldr	r3, [r3, #0]
   185d8:	2b00      	cmp	r3, #0
   185da:	d003      	beq.n	185e4 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   185dc:	4b03      	ldr	r3, [pc, #12]	; (185ec <xTraceIsRecordingEnabled+0x1c>)
   185de:	681b      	ldr	r3, [r3, #0]
   185e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   185e2:	e000      	b.n	185e6 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   185e4:	2300      	movs	r3, #0
	}
}
   185e6:	0018      	movs	r0, r3
   185e8:	46bd      	mov	sp, r7
   185ea:	bd80      	pop	{r7, pc}
   185ec:	20000c98 	.word	0x20000c98

000185f0 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   185f0:	b590      	push	{r4, r7, lr}
   185f2:	b089      	sub	sp, #36	; 0x24
   185f4:	af00      	add	r7, sp, #0
   185f6:	0002      	movs	r2, r0
   185f8:	1dfb      	adds	r3, r7, #7
   185fa:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   185fc:	1dfb      	adds	r3, r7, #7
   185fe:	781b      	ldrb	r3, [r3, #0]
   18600:	2b00      	cmp	r3, #0
   18602:	d057      	beq.n	186b4 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   18604:	4b2e      	ldr	r3, [pc, #184]	; (186c0 <prvTraceStoreTaskReady+0xd0>)
   18606:	681b      	ldr	r3, [r3, #0]
   18608:	2b00      	cmp	r3, #0
   1860a:	d055      	beq.n	186b8 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   1860c:	1dfb      	adds	r3, r7, #7
   1860e:	781b      	ldrb	r3, [r3, #0]
   18610:	2b0f      	cmp	r3, #15
   18612:	d904      	bls.n	1861e <prvTraceStoreTaskReady+0x2e>
   18614:	4b2b      	ldr	r3, [pc, #172]	; (186c4 <prvTraceStoreTaskReady+0xd4>)
   18616:	0018      	movs	r0, r3
   18618:	4b2b      	ldr	r3, [pc, #172]	; (186c8 <prvTraceStoreTaskReady+0xd8>)
   1861a:	4798      	blx	r3
   1861c:	e04d      	b.n	186ba <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1861e:	4b2b      	ldr	r3, [pc, #172]	; (186cc <prvTraceStoreTaskReady+0xdc>)
   18620:	681b      	ldr	r3, [r3, #0]
   18622:	2b00      	cmp	r3, #0
   18624:	d004      	beq.n	18630 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   18626:	4b2a      	ldr	r3, [pc, #168]	; (186d0 <prvTraceStoreTaskReady+0xe0>)
   18628:	0018      	movs	r0, r3
   1862a:	4b27      	ldr	r3, [pc, #156]	; (186c8 <prvTraceStoreTaskReady+0xd8>)
   1862c:	4798      	blx	r3
		return;
   1862e:	e044      	b.n	186ba <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18630:	f3ef 8310 	mrs	r3, PRIMASK
   18634:	60fb      	str	r3, [r7, #12]
  return(result);
   18636:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   18638:	61fb      	str	r3, [r7, #28]
   1863a:	2301      	movs	r3, #1
   1863c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1863e:	693b      	ldr	r3, [r7, #16]
   18640:	f383 8810 	msr	PRIMASK, r3
   18644:	4b21      	ldr	r3, [pc, #132]	; (186cc <prvTraceStoreTaskReady+0xdc>)
   18646:	681b      	ldr	r3, [r3, #0]
   18648:	1c5a      	adds	r2, r3, #1
   1864a:	4b20      	ldr	r3, [pc, #128]	; (186cc <prvTraceStoreTaskReady+0xdc>)
   1864c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1864e:	4b21      	ldr	r3, [pc, #132]	; (186d4 <prvTraceStoreTaskReady+0xe4>)
   18650:	681b      	ldr	r3, [r3, #0]
   18652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18654:	2b00      	cmp	r3, #0
   18656:	d022      	beq.n	1869e <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18658:	231a      	movs	r3, #26
   1865a:	18fc      	adds	r4, r7, r3
   1865c:	4b1e      	ldr	r3, [pc, #120]	; (186d8 <prvTraceStoreTaskReady+0xe8>)
   1865e:	0018      	movs	r0, r3
   18660:	4b1e      	ldr	r3, [pc, #120]	; (186dc <prvTraceStoreTaskReady+0xec>)
   18662:	4798      	blx	r3
   18664:	0003      	movs	r3, r0
   18666:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   18668:	2319      	movs	r3, #25
   1866a:	18fb      	adds	r3, r7, r3
   1866c:	1dfa      	adds	r2, r7, #7
   1866e:	7812      	ldrb	r2, [r2, #0]
   18670:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   18672:	4b1b      	ldr	r3, [pc, #108]	; (186e0 <prvTraceStoreTaskReady+0xf0>)
   18674:	4798      	blx	r3
   18676:	0003      	movs	r3, r0
   18678:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   1867a:	697b      	ldr	r3, [r7, #20]
   1867c:	2b00      	cmp	r3, #0
   1867e:	d00e      	beq.n	1869e <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   18680:	697b      	ldr	r3, [r7, #20]
   18682:	2202      	movs	r2, #2
   18684:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   18686:	697b      	ldr	r3, [r7, #20]
   18688:	221a      	movs	r2, #26
   1868a:	18ba      	adds	r2, r7, r2
   1868c:	8812      	ldrh	r2, [r2, #0]
   1868e:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   18690:	697b      	ldr	r3, [r7, #20]
   18692:	2219      	movs	r2, #25
   18694:	18ba      	adds	r2, r7, r2
   18696:	7812      	ldrb	r2, [r2, #0]
   18698:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1869a:	4b12      	ldr	r3, [pc, #72]	; (186e4 <prvTraceStoreTaskReady+0xf4>)
   1869c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1869e:	4b0b      	ldr	r3, [pc, #44]	; (186cc <prvTraceStoreTaskReady+0xdc>)
   186a0:	681b      	ldr	r3, [r3, #0]
   186a2:	1e5a      	subs	r2, r3, #1
   186a4:	4b09      	ldr	r3, [pc, #36]	; (186cc <prvTraceStoreTaskReady+0xdc>)
   186a6:	601a      	str	r2, [r3, #0]
   186a8:	69fb      	ldr	r3, [r7, #28]
   186aa:	60bb      	str	r3, [r7, #8]
   186ac:	68bb      	ldr	r3, [r7, #8]
   186ae:	f383 8810 	msr	PRIMASK, r3
   186b2:	e002      	b.n	186ba <prvTraceStoreTaskReady+0xca>
		return;
   186b4:	46c0      	nop			; (mov r8, r8)
   186b6:	e000      	b.n	186ba <prvTraceStoreTaskReady+0xca>
		return;
   186b8:	46c0      	nop			; (mov r8, r8)
}
   186ba:	46bd      	mov	sp, r7
   186bc:	b009      	add	sp, #36	; 0x24
   186be:	bd90      	pop	{r4, r7, pc}
   186c0:	2000012c 	.word	0x2000012c
   186c4:	00037284 	.word	0x00037284
   186c8:	000196dd 	.word	0x000196dd
   186cc:	20000bf0 	.word	0x20000bf0
   186d0:	000372c4 	.word	0x000372c4
   186d4:	20000c98 	.word	0x20000c98
   186d8:	0000ffff 	.word	0x0000ffff
   186dc:	000198f1 	.word	0x000198f1
   186e0:	00019295 	.word	0x00019295
   186e4:	00019899 	.word	0x00019899

000186e8 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   186e8:	b580      	push	{r7, lr}
   186ea:	b08e      	sub	sp, #56	; 0x38
   186ec:	af00      	add	r7, sp, #0
   186ee:	60f8      	str	r0, [r7, #12]
   186f0:	60b9      	str	r1, [r7, #8]
   186f2:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   186f4:	4b48      	ldr	r3, [pc, #288]	; (18818 <vTraceStoreMemMangEvent+0x130>)
   186f6:	681b      	ldr	r3, [r3, #0]
   186f8:	2b00      	cmp	r3, #0
   186fa:	d100      	bne.n	186fe <vTraceStoreMemMangEvent+0x16>
   186fc:	e088      	b.n	18810 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   186fe:	687b      	ldr	r3, [r7, #4]
   18700:	2b00      	cmp	r3, #0
   18702:	da03      	bge.n	1870c <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   18704:	687b      	ldr	r3, [r7, #4]
   18706:	425b      	negs	r3, r3
   18708:	637b      	str	r3, [r7, #52]	; 0x34
   1870a:	e001      	b.n	18710 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   1870c:	687b      	ldr	r3, [r7, #4]
   1870e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18710:	f3ef 8310 	mrs	r3, PRIMASK
   18714:	61bb      	str	r3, [r7, #24]
  return(result);
   18716:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   18718:	633b      	str	r3, [r7, #48]	; 0x30
   1871a:	2301      	movs	r3, #1
   1871c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1871e:	69fb      	ldr	r3, [r7, #28]
   18720:	f383 8810 	msr	PRIMASK, r3
   18724:	4b3d      	ldr	r3, [pc, #244]	; (1881c <vTraceStoreMemMangEvent+0x134>)
   18726:	681b      	ldr	r3, [r3, #0]
   18728:	1c5a      	adds	r2, r3, #1
   1872a:	4b3c      	ldr	r3, [pc, #240]	; (1881c <vTraceStoreMemMangEvent+0x134>)
   1872c:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   1872e:	68bb      	ldr	r3, [r7, #8]
   18730:	2b00      	cmp	r3, #0
   18732:	d005      	beq.n	18740 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   18734:	4b3a      	ldr	r3, [pc, #232]	; (18820 <vTraceStoreMemMangEvent+0x138>)
   18736:	681a      	ldr	r2, [r3, #0]
   18738:	687b      	ldr	r3, [r7, #4]
   1873a:	18d2      	adds	r2, r2, r3
   1873c:	4b38      	ldr	r3, [pc, #224]	; (18820 <vTraceStoreMemMangEvent+0x138>)
   1873e:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   18740:	4b35      	ldr	r3, [pc, #212]	; (18818 <vTraceStoreMemMangEvent+0x130>)
   18742:	681b      	ldr	r3, [r3, #0]
   18744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18746:	2b00      	cmp	r3, #0
   18748:	d057      	beq.n	187fa <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1874a:	20ff      	movs	r0, #255	; 0xff
   1874c:	4b35      	ldr	r3, [pc, #212]	; (18824 <vTraceStoreMemMangEvent+0x13c>)
   1874e:	4798      	blx	r3
   18750:	0003      	movs	r3, r0
   18752:	001a      	movs	r2, r3
   18754:	232f      	movs	r3, #47	; 0x2f
   18756:	18fb      	adds	r3, r7, r3
   18758:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1875a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1875c:	4a32      	ldr	r2, [pc, #200]	; (18828 <vTraceStoreMemMangEvent+0x140>)
   1875e:	0019      	movs	r1, r3
   18760:	0010      	movs	r0, r2
   18762:	4b32      	ldr	r3, [pc, #200]	; (1882c <vTraceStoreMemMangEvent+0x144>)
   18764:	4798      	blx	r3
   18766:	0002      	movs	r2, r0
   18768:	232c      	movs	r3, #44	; 0x2c
   1876a:	18fb      	adds	r3, r7, r3
   1876c:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   1876e:	4b30      	ldr	r3, [pc, #192]	; (18830 <vTraceStoreMemMangEvent+0x148>)
   18770:	4798      	blx	r3
   18772:	0003      	movs	r3, r0
   18774:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   18776:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18778:	2b00      	cmp	r3, #0
   1877a:	d03e      	beq.n	187fa <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   1877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1877e:	222f      	movs	r2, #47	; 0x2f
   18780:	18ba      	adds	r2, r7, r2
   18782:	7812      	ldrb	r2, [r2, #0]
   18784:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   18786:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18788:	2200      	movs	r2, #0
   1878a:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   1878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1878e:	222c      	movs	r2, #44	; 0x2c
   18790:	18ba      	adds	r2, r7, r2
   18792:	8812      	ldrh	r2, [r2, #0]
   18794:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18796:	4b27      	ldr	r3, [pc, #156]	; (18834 <vTraceStoreMemMangEvent+0x14c>)
   18798:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1879a:	68bb      	ldr	r3, [r7, #8]
   1879c:	4a22      	ldr	r2, [pc, #136]	; (18828 <vTraceStoreMemMangEvent+0x140>)
   1879e:	0019      	movs	r1, r3
   187a0:	0010      	movs	r0, r2
   187a2:	4b22      	ldr	r3, [pc, #136]	; (1882c <vTraceStoreMemMangEvent+0x144>)
   187a4:	4798      	blx	r3
   187a6:	0002      	movs	r2, r0
   187a8:	2326      	movs	r3, #38	; 0x26
   187aa:	18fb      	adds	r3, r7, r3
   187ac:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   187ae:	2325      	movs	r3, #37	; 0x25
   187b0:	18fb      	adds	r3, r7, r3
   187b2:	2200      	movs	r2, #0
   187b4:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   187b6:	4b1e      	ldr	r3, [pc, #120]	; (18830 <vTraceStoreMemMangEvent+0x148>)
   187b8:	4798      	blx	r3
   187ba:	0003      	movs	r3, r0
   187bc:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   187be:	6a3b      	ldr	r3, [r7, #32]
   187c0:	2b00      	cmp	r3, #0
   187c2:	d01a      	beq.n	187fa <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   187c4:	6a3b      	ldr	r3, [r7, #32]
   187c6:	2226      	movs	r2, #38	; 0x26
   187c8:	18ba      	adds	r2, r7, r2
   187ca:	8812      	ldrh	r2, [r2, #0]
   187cc:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   187ce:	6a3b      	ldr	r3, [r7, #32]
   187d0:	2225      	movs	r2, #37	; 0x25
   187d2:	18ba      	adds	r2, r7, r2
   187d4:	7812      	ldrb	r2, [r2, #0]
   187d6:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   187d8:	68fb      	ldr	r3, [r7, #12]
   187da:	b2db      	uxtb	r3, r3
   187dc:	3301      	adds	r3, #1
   187de:	b2da      	uxtb	r2, r3
   187e0:	6a3b      	ldr	r3, [r7, #32]
   187e2:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   187e4:	68fb      	ldr	r3, [r7, #12]
   187e6:	b2da      	uxtb	r2, r3
   187e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187ea:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   187ec:	4b11      	ldr	r3, [pc, #68]	; (18834 <vTraceStoreMemMangEvent+0x14c>)
   187ee:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   187f0:	4b09      	ldr	r3, [pc, #36]	; (18818 <vTraceStoreMemMangEvent+0x130>)
   187f2:	681b      	ldr	r3, [r3, #0]
   187f4:	4a0a      	ldr	r2, [pc, #40]	; (18820 <vTraceStoreMemMangEvent+0x138>)
   187f6:	6812      	ldr	r2, [r2, #0]
   187f8:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   187fa:	4b08      	ldr	r3, [pc, #32]	; (1881c <vTraceStoreMemMangEvent+0x134>)
   187fc:	681b      	ldr	r3, [r3, #0]
   187fe:	1e5a      	subs	r2, r3, #1
   18800:	4b06      	ldr	r3, [pc, #24]	; (1881c <vTraceStoreMemMangEvent+0x134>)
   18802:	601a      	str	r2, [r3, #0]
   18804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18806:	617b      	str	r3, [r7, #20]
   18808:	697b      	ldr	r3, [r7, #20]
   1880a:	f383 8810 	msr	PRIMASK, r3
   1880e:	e000      	b.n	18812 <vTraceStoreMemMangEvent+0x12a>
		return;
   18810:	46c0      	nop			; (mov r8, r8)
}
   18812:	46bd      	mov	sp, r7
   18814:	b00e      	add	sp, #56	; 0x38
   18816:	bd80      	pop	{r7, pc}
   18818:	20000c98 	.word	0x20000c98
   1881c:	20000bf0 	.word	0x20000bf0
   18820:	20000c04 	.word	0x20000c04
   18824:	000198f1 	.word	0x000198f1
   18828:	0000ffff 	.word	0x0000ffff
   1882c:	00018ab5 	.word	0x00018ab5
   18830:	00019295 	.word	0x00019295
   18834:	00019899 	.word	0x00019899

00018838 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   18838:	b590      	push	{r4, r7, lr}
   1883a:	b08b      	sub	sp, #44	; 0x2c
   1883c:	af00      	add	r7, sp, #0
   1883e:	60f8      	str	r0, [r7, #12]
   18840:	607a      	str	r2, [r7, #4]
   18842:	230b      	movs	r3, #11
   18844:	18fb      	adds	r3, r7, r3
   18846:	1c0a      	adds	r2, r1, #0
   18848:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1884a:	68fb      	ldr	r3, [r7, #12]
   1884c:	2bfe      	cmp	r3, #254	; 0xfe
   1884e:	d904      	bls.n	1885a <prvTraceStoreKernelCall+0x22>
   18850:	4b39      	ldr	r3, [pc, #228]	; (18938 <prvTraceStoreKernelCall+0x100>)
   18852:	0018      	movs	r0, r3
   18854:	4b39      	ldr	r3, [pc, #228]	; (1893c <prvTraceStoreKernelCall+0x104>)
   18856:	4798      	blx	r3
   18858:	e06b      	b.n	18932 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1885a:	230b      	movs	r3, #11
   1885c:	18fb      	adds	r3, r7, r3
   1885e:	781b      	ldrb	r3, [r3, #0]
   18860:	2b08      	cmp	r3, #8
   18862:	d904      	bls.n	1886e <prvTraceStoreKernelCall+0x36>
   18864:	4b36      	ldr	r3, [pc, #216]	; (18940 <prvTraceStoreKernelCall+0x108>)
   18866:	0018      	movs	r0, r3
   18868:	4b34      	ldr	r3, [pc, #208]	; (1893c <prvTraceStoreKernelCall+0x104>)
   1886a:	4798      	blx	r3
   1886c:	e061      	b.n	18932 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1886e:	4b35      	ldr	r3, [pc, #212]	; (18944 <prvTraceStoreKernelCall+0x10c>)
   18870:	681a      	ldr	r2, [r3, #0]
   18872:	230b      	movs	r3, #11
   18874:	18fb      	adds	r3, r7, r3
   18876:	781b      	ldrb	r3, [r3, #0]
   18878:	2164      	movs	r1, #100	; 0x64
   1887a:	18d3      	adds	r3, r2, r3
   1887c:	185b      	adds	r3, r3, r1
   1887e:	781b      	ldrb	r3, [r3, #0]
   18880:	001a      	movs	r2, r3
   18882:	687b      	ldr	r3, [r7, #4]
   18884:	429a      	cmp	r2, r3
   18886:	d204      	bcs.n	18892 <prvTraceStoreKernelCall+0x5a>
   18888:	4b2f      	ldr	r3, [pc, #188]	; (18948 <prvTraceStoreKernelCall+0x110>)
   1888a:	0018      	movs	r0, r3
   1888c:	4b2b      	ldr	r3, [pc, #172]	; (1893c <prvTraceStoreKernelCall+0x104>)
   1888e:	4798      	blx	r3
   18890:	e04f      	b.n	18932 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   18892:	4b2e      	ldr	r3, [pc, #184]	; (1894c <prvTraceStoreKernelCall+0x114>)
   18894:	681b      	ldr	r3, [r3, #0]
   18896:	2b00      	cmp	r3, #0
   18898:	d004      	beq.n	188a4 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1889a:	4b2d      	ldr	r3, [pc, #180]	; (18950 <prvTraceStoreKernelCall+0x118>)
   1889c:	0018      	movs	r0, r3
   1889e:	4b27      	ldr	r3, [pc, #156]	; (1893c <prvTraceStoreKernelCall+0x104>)
   188a0:	4798      	blx	r3
		return;
   188a2:	e046      	b.n	18932 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   188a4:	4b2b      	ldr	r3, [pc, #172]	; (18954 <prvTraceStoreKernelCall+0x11c>)
   188a6:	781b      	ldrb	r3, [r3, #0]
   188a8:	2b00      	cmp	r3, #0
   188aa:	d041      	beq.n	18930 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   188ac:	f3ef 8310 	mrs	r3, PRIMASK
   188b0:	617b      	str	r3, [r7, #20]
  return(result);
   188b2:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   188b4:	627b      	str	r3, [r7, #36]	; 0x24
   188b6:	2301      	movs	r3, #1
   188b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   188ba:	69bb      	ldr	r3, [r7, #24]
   188bc:	f383 8810 	msr	PRIMASK, r3
   188c0:	4b22      	ldr	r3, [pc, #136]	; (1894c <prvTraceStoreKernelCall+0x114>)
   188c2:	681b      	ldr	r3, [r3, #0]
   188c4:	1c5a      	adds	r2, r3, #1
   188c6:	4b21      	ldr	r3, [pc, #132]	; (1894c <prvTraceStoreKernelCall+0x114>)
   188c8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   188ca:	4b1e      	ldr	r3, [pc, #120]	; (18944 <prvTraceStoreKernelCall+0x10c>)
   188cc:	681b      	ldr	r3, [r3, #0]
   188ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   188d0:	2b00      	cmp	r3, #0
   188d2:	d022      	beq.n	1891a <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   188d4:	2322      	movs	r3, #34	; 0x22
   188d6:	18fc      	adds	r4, r7, r3
   188d8:	4b1f      	ldr	r3, [pc, #124]	; (18958 <prvTraceStoreKernelCall+0x120>)
   188da:	0018      	movs	r0, r3
   188dc:	4b1f      	ldr	r3, [pc, #124]	; (1895c <prvTraceStoreKernelCall+0x124>)
   188de:	4798      	blx	r3
   188e0:	0003      	movs	r3, r0
   188e2:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   188e4:	2321      	movs	r3, #33	; 0x21
   188e6:	18fb      	adds	r3, r7, r3
   188e8:	687a      	ldr	r2, [r7, #4]
   188ea:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   188ec:	4b1c      	ldr	r3, [pc, #112]	; (18960 <prvTraceStoreKernelCall+0x128>)
   188ee:	4798      	blx	r3
   188f0:	0003      	movs	r3, r0
   188f2:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   188f4:	69fb      	ldr	r3, [r7, #28]
   188f6:	2b00      	cmp	r3, #0
   188f8:	d00f      	beq.n	1891a <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   188fa:	69fb      	ldr	r3, [r7, #28]
   188fc:	2222      	movs	r2, #34	; 0x22
   188fe:	18ba      	adds	r2, r7, r2
   18900:	8812      	ldrh	r2, [r2, #0]
   18902:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   18904:	68fb      	ldr	r3, [r7, #12]
   18906:	b2da      	uxtb	r2, r3
   18908:	69fb      	ldr	r3, [r7, #28]
   1890a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1890c:	69fb      	ldr	r3, [r7, #28]
   1890e:	2221      	movs	r2, #33	; 0x21
   18910:	18ba      	adds	r2, r7, r2
   18912:	7812      	ldrb	r2, [r2, #0]
   18914:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   18916:	4b13      	ldr	r3, [pc, #76]	; (18964 <prvTraceStoreKernelCall+0x12c>)
   18918:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1891a:	4b0c      	ldr	r3, [pc, #48]	; (1894c <prvTraceStoreKernelCall+0x114>)
   1891c:	681b      	ldr	r3, [r3, #0]
   1891e:	1e5a      	subs	r2, r3, #1
   18920:	4b0a      	ldr	r3, [pc, #40]	; (1894c <prvTraceStoreKernelCall+0x114>)
   18922:	601a      	str	r2, [r3, #0]
   18924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18926:	613b      	str	r3, [r7, #16]
   18928:	693b      	ldr	r3, [r7, #16]
   1892a:	f383 8810 	msr	PRIMASK, r3
   1892e:	e000      	b.n	18932 <prvTraceStoreKernelCall+0xfa>
		return;
   18930:	46c0      	nop			; (mov r8, r8)
}
   18932:	46bd      	mov	sp, r7
   18934:	b00b      	add	sp, #44	; 0x2c
   18936:	bd90      	pop	{r4, r7, pc}
   18938:	00037334 	.word	0x00037334
   1893c:	000196dd 	.word	0x000196dd
   18940:	0003736c 	.word	0x0003736c
   18944:	20000c98 	.word	0x20000c98
   18948:	000373b4 	.word	0x000373b4
   1894c:	20000bf0 	.word	0x20000bf0
   18950:	000373fc 	.word	0x000373fc
   18954:	20000bfc 	.word	0x20000bfc
   18958:	0000ffff 	.word	0x0000ffff
   1895c:	000198f1 	.word	0x000198f1
   18960:	00019295 	.word	0x00019295
   18964:	00019899 	.word	0x00019899

00018968 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   18968:	b580      	push	{r7, lr}
   1896a:	b08a      	sub	sp, #40	; 0x28
   1896c:	af00      	add	r7, sp, #0
   1896e:	60f8      	str	r0, [r7, #12]
   18970:	607a      	str	r2, [r7, #4]
   18972:	603b      	str	r3, [r7, #0]
   18974:	230b      	movs	r3, #11
   18976:	18fb      	adds	r3, r7, r3
   18978:	1c0a      	adds	r2, r1, #0
   1897a:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   1897c:	68fb      	ldr	r3, [r7, #12]
   1897e:	2bfe      	cmp	r3, #254	; 0xfe
   18980:	d904      	bls.n	1898c <prvTraceStoreKernelCallWithParam+0x24>
   18982:	4b40      	ldr	r3, [pc, #256]	; (18a84 <prvTraceStoreKernelCallWithParam+0x11c>)
   18984:	0018      	movs	r0, r3
   18986:	4b40      	ldr	r3, [pc, #256]	; (18a88 <prvTraceStoreKernelCallWithParam+0x120>)
   18988:	4798      	blx	r3
   1898a:	e077      	b.n	18a7c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1898c:	230b      	movs	r3, #11
   1898e:	18fb      	adds	r3, r7, r3
   18990:	781b      	ldrb	r3, [r3, #0]
   18992:	2b08      	cmp	r3, #8
   18994:	d904      	bls.n	189a0 <prvTraceStoreKernelCallWithParam+0x38>
   18996:	4b3d      	ldr	r3, [pc, #244]	; (18a8c <prvTraceStoreKernelCallWithParam+0x124>)
   18998:	0018      	movs	r0, r3
   1899a:	4b3b      	ldr	r3, [pc, #236]	; (18a88 <prvTraceStoreKernelCallWithParam+0x120>)
   1899c:	4798      	blx	r3
   1899e:	e06d      	b.n	18a7c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   189a0:	4b3b      	ldr	r3, [pc, #236]	; (18a90 <prvTraceStoreKernelCallWithParam+0x128>)
   189a2:	681a      	ldr	r2, [r3, #0]
   189a4:	230b      	movs	r3, #11
   189a6:	18fb      	adds	r3, r7, r3
   189a8:	781b      	ldrb	r3, [r3, #0]
   189aa:	2164      	movs	r1, #100	; 0x64
   189ac:	18d3      	adds	r3, r2, r3
   189ae:	185b      	adds	r3, r3, r1
   189b0:	781b      	ldrb	r3, [r3, #0]
   189b2:	001a      	movs	r2, r3
   189b4:	687b      	ldr	r3, [r7, #4]
   189b6:	429a      	cmp	r2, r3
   189b8:	d204      	bcs.n	189c4 <prvTraceStoreKernelCallWithParam+0x5c>
   189ba:	4b36      	ldr	r3, [pc, #216]	; (18a94 <prvTraceStoreKernelCallWithParam+0x12c>)
   189bc:	0018      	movs	r0, r3
   189be:	4b32      	ldr	r3, [pc, #200]	; (18a88 <prvTraceStoreKernelCallWithParam+0x120>)
   189c0:	4798      	blx	r3
   189c2:	e05b      	b.n	18a7c <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   189c4:	4b34      	ldr	r3, [pc, #208]	; (18a98 <prvTraceStoreKernelCallWithParam+0x130>)
   189c6:	681b      	ldr	r3, [r3, #0]
   189c8:	2b00      	cmp	r3, #0
   189ca:	d004      	beq.n	189d6 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   189cc:	4b33      	ldr	r3, [pc, #204]	; (18a9c <prvTraceStoreKernelCallWithParam+0x134>)
   189ce:	0018      	movs	r0, r3
   189d0:	4b2d      	ldr	r3, [pc, #180]	; (18a88 <prvTraceStoreKernelCallWithParam+0x120>)
   189d2:	4798      	blx	r3
		return;
   189d4:	e052      	b.n	18a7c <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   189d6:	f3ef 8310 	mrs	r3, PRIMASK
   189da:	617b      	str	r3, [r7, #20]
  return(result);
   189dc:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   189de:	627b      	str	r3, [r7, #36]	; 0x24
   189e0:	2301      	movs	r3, #1
   189e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   189e4:	69bb      	ldr	r3, [r7, #24]
   189e6:	f383 8810 	msr	PRIMASK, r3
   189ea:	4b2b      	ldr	r3, [pc, #172]	; (18a98 <prvTraceStoreKernelCallWithParam+0x130>)
   189ec:	681b      	ldr	r3, [r3, #0]
   189ee:	1c5a      	adds	r2, r3, #1
   189f0:	4b29      	ldr	r3, [pc, #164]	; (18a98 <prvTraceStoreKernelCallWithParam+0x130>)
   189f2:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   189f4:	4b26      	ldr	r3, [pc, #152]	; (18a90 <prvTraceStoreKernelCallWithParam+0x128>)
   189f6:	681b      	ldr	r3, [r3, #0]
   189f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   189fa:	2b00      	cmp	r3, #0
   189fc:	d034      	beq.n	18a68 <prvTraceStoreKernelCallWithParam+0x100>
   189fe:	4b28      	ldr	r3, [pc, #160]	; (18aa0 <prvTraceStoreKernelCallWithParam+0x138>)
   18a00:	781b      	ldrb	r3, [r3, #0]
   18a02:	2b00      	cmp	r3, #0
   18a04:	d030      	beq.n	18a68 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   18a06:	20ff      	movs	r0, #255	; 0xff
   18a08:	4b26      	ldr	r3, [pc, #152]	; (18aa4 <prvTraceStoreKernelCallWithParam+0x13c>)
   18a0a:	4798      	blx	r3
   18a0c:	0003      	movs	r3, r0
   18a0e:	001a      	movs	r2, r3
   18a10:	2323      	movs	r3, #35	; 0x23
   18a12:	18fb      	adds	r3, r7, r3
   18a14:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   18a16:	683b      	ldr	r3, [r7, #0]
   18a18:	0019      	movs	r1, r3
   18a1a:	20ff      	movs	r0, #255	; 0xff
   18a1c:	4b22      	ldr	r3, [pc, #136]	; (18aa8 <prvTraceStoreKernelCallWithParam+0x140>)
   18a1e:	4798      	blx	r3
   18a20:	0002      	movs	r2, r0
   18a22:	2322      	movs	r3, #34	; 0x22
   18a24:	18fb      	adds	r3, r7, r3
   18a26:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   18a28:	2321      	movs	r3, #33	; 0x21
   18a2a:	18fb      	adds	r3, r7, r3
   18a2c:	687a      	ldr	r2, [r7, #4]
   18a2e:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   18a30:	4b1e      	ldr	r3, [pc, #120]	; (18aac <prvTraceStoreKernelCallWithParam+0x144>)
   18a32:	4798      	blx	r3
   18a34:	0003      	movs	r3, r0
   18a36:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   18a38:	69fb      	ldr	r3, [r7, #28]
   18a3a:	2b00      	cmp	r3, #0
   18a3c:	d014      	beq.n	18a68 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   18a3e:	69fb      	ldr	r3, [r7, #28]
   18a40:	2223      	movs	r2, #35	; 0x23
   18a42:	18ba      	adds	r2, r7, r2
   18a44:	7812      	ldrb	r2, [r2, #0]
   18a46:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   18a48:	68fb      	ldr	r3, [r7, #12]
   18a4a:	b2da      	uxtb	r2, r3
   18a4c:	69fb      	ldr	r3, [r7, #28]
   18a4e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   18a50:	69fb      	ldr	r3, [r7, #28]
   18a52:	2221      	movs	r2, #33	; 0x21
   18a54:	18ba      	adds	r2, r7, r2
   18a56:	7812      	ldrb	r2, [r2, #0]
   18a58:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   18a5a:	69fb      	ldr	r3, [r7, #28]
   18a5c:	2222      	movs	r2, #34	; 0x22
   18a5e:	18ba      	adds	r2, r7, r2
   18a60:	7812      	ldrb	r2, [r2, #0]
   18a62:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   18a64:	4b12      	ldr	r3, [pc, #72]	; (18ab0 <prvTraceStoreKernelCallWithParam+0x148>)
   18a66:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18a68:	4b0b      	ldr	r3, [pc, #44]	; (18a98 <prvTraceStoreKernelCallWithParam+0x130>)
   18a6a:	681b      	ldr	r3, [r3, #0]
   18a6c:	1e5a      	subs	r2, r3, #1
   18a6e:	4b0a      	ldr	r3, [pc, #40]	; (18a98 <prvTraceStoreKernelCallWithParam+0x130>)
   18a70:	601a      	str	r2, [r3, #0]
   18a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18a74:	613b      	str	r3, [r7, #16]
   18a76:	693b      	ldr	r3, [r7, #16]
   18a78:	f383 8810 	msr	PRIMASK, r3
}
   18a7c:	46bd      	mov	sp, r7
   18a7e:	b00a      	add	sp, #40	; 0x28
   18a80:	bd80      	pop	{r7, pc}
   18a82:	46c0      	nop			; (mov r8, r8)
   18a84:	00037434 	.word	0x00037434
   18a88:	000196dd 	.word	0x000196dd
   18a8c:	00037474 	.word	0x00037474
   18a90:	20000c98 	.word	0x20000c98
   18a94:	000374c4 	.word	0x000374c4
   18a98:	20000bf0 	.word	0x20000bf0
   18a9c:	00037514 	.word	0x00037514
   18aa0:	20000bfc 	.word	0x20000bfc
   18aa4:	000198f1 	.word	0x000198f1
   18aa8:	00018ab5 	.word	0x00018ab5
   18aac:	00019295 	.word	0x00019295
   18ab0:	00019899 	.word	0x00019899

00018ab4 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   18ab4:	b580      	push	{r7, lr}
   18ab6:	b084      	sub	sp, #16
   18ab8:	af00      	add	r7, sp, #0
   18aba:	6078      	str	r0, [r7, #4]
   18abc:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   18abe:	687b      	ldr	r3, [r7, #4]
   18ac0:	2bff      	cmp	r3, #255	; 0xff
   18ac2:	d009      	beq.n	18ad8 <prvTraceGetParam+0x24>
   18ac4:	687b      	ldr	r3, [r7, #4]
   18ac6:	4a19      	ldr	r2, [pc, #100]	; (18b2c <prvTraceGetParam+0x78>)
   18ac8:	4293      	cmp	r3, r2
   18aca:	d005      	beq.n	18ad8 <prvTraceGetParam+0x24>
   18acc:	4b18      	ldr	r3, [pc, #96]	; (18b30 <prvTraceGetParam+0x7c>)
   18ace:	0018      	movs	r0, r3
   18ad0:	4b18      	ldr	r3, [pc, #96]	; (18b34 <prvTraceGetParam+0x80>)
   18ad2:	4798      	blx	r3
   18ad4:	683b      	ldr	r3, [r7, #0]
   18ad6:	e024      	b.n	18b22 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   18ad8:	683a      	ldr	r2, [r7, #0]
   18ada:	687b      	ldr	r3, [r7, #4]
   18adc:	429a      	cmp	r2, r3
   18ade:	d801      	bhi.n	18ae4 <prvTraceGetParam+0x30>
	{
		return param;
   18ae0:	683b      	ldr	r3, [r7, #0]
   18ae2:	e01e      	b.n	18b22 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   18ae4:	4b14      	ldr	r3, [pc, #80]	; (18b38 <prvTraceGetParam+0x84>)
   18ae6:	4798      	blx	r3
   18ae8:	0003      	movs	r3, r0
   18aea:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   18aec:	68fb      	ldr	r3, [r7, #12]
   18aee:	2b00      	cmp	r3, #0
   18af0:	d014      	beq.n	18b1c <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   18af2:	68fb      	ldr	r3, [r7, #12]
   18af4:	2201      	movs	r2, #1
   18af6:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   18af8:	687b      	ldr	r3, [r7, #4]
   18afa:	43db      	mvns	r3, r3
   18afc:	683a      	ldr	r2, [r7, #0]
   18afe:	4013      	ands	r3, r2
   18b00:	0a1b      	lsrs	r3, r3, #8
   18b02:	b2da      	uxtb	r2, r3
   18b04:	68fb      	ldr	r3, [r7, #12]
   18b06:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   18b08:	687b      	ldr	r3, [r7, #4]
   18b0a:	43db      	mvns	r3, r3
   18b0c:	683a      	ldr	r2, [r7, #0]
   18b0e:	4013      	ands	r3, r2
   18b10:	0c1b      	lsrs	r3, r3, #16
   18b12:	b29a      	uxth	r2, r3
   18b14:	68fb      	ldr	r3, [r7, #12]
   18b16:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18b18:	4b08      	ldr	r3, [pc, #32]	; (18b3c <prvTraceGetParam+0x88>)
   18b1a:	4798      	blx	r3
		}

		return param & param_max;
   18b1c:	683b      	ldr	r3, [r7, #0]
   18b1e:	687a      	ldr	r2, [r7, #4]
   18b20:	4013      	ands	r3, r2
	}
}
   18b22:	0018      	movs	r0, r3
   18b24:	46bd      	mov	sp, r7
   18b26:	b004      	add	sp, #16
   18b28:	bd80      	pop	{r7, pc}
   18b2a:	46c0      	nop			; (mov r8, r8)
   18b2c:	0000ffff 	.word	0x0000ffff
   18b30:	0003754c 	.word	0x0003754c
   18b34:	000196dd 	.word	0x000196dd
   18b38:	00019295 	.word	0x00019295
   18b3c:	00019899 	.word	0x00019899

00018b40 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   18b40:	b580      	push	{r7, lr}
   18b42:	b08a      	sub	sp, #40	; 0x28
   18b44:	af00      	add	r7, sp, #0
   18b46:	6078      	str	r0, [r7, #4]
   18b48:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   18b4a:	2326      	movs	r3, #38	; 0x26
   18b4c:	18fb      	adds	r3, r7, r3
   18b4e:	2200      	movs	r2, #0
   18b50:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   18b52:	687b      	ldr	r3, [r7, #4]
   18b54:	2bfe      	cmp	r3, #254	; 0xfe
   18b56:	d904      	bls.n	18b62 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   18b58:	4b2d      	ldr	r3, [pc, #180]	; (18c10 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   18b5a:	0018      	movs	r0, r3
   18b5c:	4b2d      	ldr	r3, [pc, #180]	; (18c14 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18b5e:	4798      	blx	r3
   18b60:	e053      	b.n	18c0a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   18b62:	4b2d      	ldr	r3, [pc, #180]	; (18c18 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18b64:	681b      	ldr	r3, [r3, #0]
   18b66:	2b00      	cmp	r3, #0
   18b68:	d004      	beq.n	18b74 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   18b6a:	4b2c      	ldr	r3, [pc, #176]	; (18c1c <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   18b6c:	0018      	movs	r0, r3
   18b6e:	4b29      	ldr	r3, [pc, #164]	; (18c14 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18b70:	4798      	blx	r3
		return;
   18b72:	e04a      	b.n	18c0a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18b74:	f3ef 8310 	mrs	r3, PRIMASK
   18b78:	613b      	str	r3, [r7, #16]
  return(result);
   18b7a:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   18b7c:	623b      	str	r3, [r7, #32]
   18b7e:	2301      	movs	r3, #1
   18b80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18b82:	697b      	ldr	r3, [r7, #20]
   18b84:	f383 8810 	msr	PRIMASK, r3
   18b88:	4b23      	ldr	r3, [pc, #140]	; (18c18 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18b8a:	681b      	ldr	r3, [r3, #0]
   18b8c:	1c5a      	adds	r2, r3, #1
   18b8e:	4b22      	ldr	r3, [pc, #136]	; (18c18 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18b90:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18b92:	4b23      	ldr	r3, [pc, #140]	; (18c20 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   18b94:	681b      	ldr	r3, [r3, #0]
   18b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18b98:	2b00      	cmp	r3, #0
   18b9a:	d02c      	beq.n	18bf6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   18b9c:	4b21      	ldr	r3, [pc, #132]	; (18c24 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   18b9e:	781b      	ldrb	r3, [r3, #0]
   18ba0:	2b00      	cmp	r3, #0
   18ba2:	d028      	beq.n	18bf6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   18ba4:	20ff      	movs	r0, #255	; 0xff
   18ba6:	4b20      	ldr	r3, [pc, #128]	; (18c28 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   18ba8:	4798      	blx	r3
   18baa:	0003      	movs	r3, r0
   18bac:	001a      	movs	r2, r3
   18bae:	231f      	movs	r3, #31
   18bb0:	18fb      	adds	r3, r7, r3
   18bb2:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   18bb4:	683b      	ldr	r3, [r7, #0]
   18bb6:	4a1d      	ldr	r2, [pc, #116]	; (18c2c <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   18bb8:	0019      	movs	r1, r3
   18bba:	0010      	movs	r0, r2
   18bbc:	4b1c      	ldr	r3, [pc, #112]	; (18c30 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   18bbe:	4798      	blx	r3
   18bc0:	0002      	movs	r2, r0
   18bc2:	2326      	movs	r3, #38	; 0x26
   18bc4:	18fb      	adds	r3, r7, r3
   18bc6:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   18bc8:	4b1a      	ldr	r3, [pc, #104]	; (18c34 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   18bca:	4798      	blx	r3
   18bcc:	0003      	movs	r3, r0
   18bce:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   18bd0:	69bb      	ldr	r3, [r7, #24]
   18bd2:	2b00      	cmp	r3, #0
   18bd4:	d00f      	beq.n	18bf6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   18bd6:	69bb      	ldr	r3, [r7, #24]
   18bd8:	221f      	movs	r2, #31
   18bda:	18ba      	adds	r2, r7, r2
   18bdc:	7812      	ldrb	r2, [r2, #0]
   18bde:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   18be0:	687b      	ldr	r3, [r7, #4]
   18be2:	b2da      	uxtb	r2, r3
   18be4:	69bb      	ldr	r3, [r7, #24]
   18be6:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   18be8:	69bb      	ldr	r3, [r7, #24]
   18bea:	2226      	movs	r2, #38	; 0x26
   18bec:	18ba      	adds	r2, r7, r2
   18bee:	8812      	ldrh	r2, [r2, #0]
   18bf0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18bf2:	4b11      	ldr	r3, [pc, #68]	; (18c38 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   18bf4:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18bf6:	4b08      	ldr	r3, [pc, #32]	; (18c18 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18bf8:	681b      	ldr	r3, [r3, #0]
   18bfa:	1e5a      	subs	r2, r3, #1
   18bfc:	4b06      	ldr	r3, [pc, #24]	; (18c18 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18bfe:	601a      	str	r2, [r3, #0]
   18c00:	6a3b      	ldr	r3, [r7, #32]
   18c02:	60fb      	str	r3, [r7, #12]
   18c04:	68fb      	ldr	r3, [r7, #12]
   18c06:	f383 8810 	msr	PRIMASK, r3
}
   18c0a:	46bd      	mov	sp, r7
   18c0c:	b00a      	add	sp, #40	; 0x28
   18c0e:	bd80      	pop	{r7, pc}
   18c10:	00037588 	.word	0x00037588
   18c14:	000196dd 	.word	0x000196dd
   18c18:	20000bf0 	.word	0x20000bf0
   18c1c:	000375e0 	.word	0x000375e0
   18c20:	20000c98 	.word	0x20000c98
   18c24:	20000bfc 	.word	0x20000bfc
   18c28:	000198f1 	.word	0x000198f1
   18c2c:	0000ffff 	.word	0x0000ffff
   18c30:	00018ab5 	.word	0x00018ab5
   18c34:	00019295 	.word	0x00019295
   18c38:	00019899 	.word	0x00019899

00018c3c <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   18c3c:	b590      	push	{r4, r7, lr}
   18c3e:	b089      	sub	sp, #36	; 0x24
   18c40:	af00      	add	r7, sp, #0
   18c42:	0002      	movs	r2, r0
   18c44:	1dfb      	adds	r3, r7, #7
   18c46:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   18c48:	1dfb      	adds	r3, r7, #7
   18c4a:	781b      	ldrb	r3, [r3, #0]
   18c4c:	2b0f      	cmp	r3, #15
   18c4e:	d904      	bls.n	18c5a <prvTraceStoreTaskswitch+0x1e>
   18c50:	4b34      	ldr	r3, [pc, #208]	; (18d24 <prvTraceStoreTaskswitch+0xe8>)
   18c52:	0018      	movs	r0, r3
   18c54:	4b34      	ldr	r3, [pc, #208]	; (18d28 <prvTraceStoreTaskswitch+0xec>)
   18c56:	4798      	blx	r3
   18c58:	e061      	b.n	18d1e <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18c5a:	f3ef 8310 	mrs	r3, PRIMASK
   18c5e:	60fb      	str	r3, [r7, #12]
  return(result);
   18c60:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   18c62:	61fb      	str	r3, [r7, #28]
   18c64:	2301      	movs	r3, #1
   18c66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18c68:	693b      	ldr	r3, [r7, #16]
   18c6a:	f383 8810 	msr	PRIMASK, r3
   18c6e:	4b2f      	ldr	r3, [pc, #188]	; (18d2c <prvTraceStoreTaskswitch+0xf0>)
   18c70:	681b      	ldr	r3, [r3, #0]
   18c72:	1c5a      	adds	r2, r3, #1
   18c74:	4b2d      	ldr	r3, [pc, #180]	; (18d2c <prvTraceStoreTaskswitch+0xf0>)
   18c76:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   18c78:	4b2d      	ldr	r3, [pc, #180]	; (18d30 <prvTraceStoreTaskswitch+0xf4>)
   18c7a:	781b      	ldrb	r3, [r3, #0]
   18c7c:	1dfa      	adds	r2, r7, #7
   18c7e:	7812      	ldrb	r2, [r2, #0]
   18c80:	429a      	cmp	r2, r3
   18c82:	d042      	beq.n	18d0a <prvTraceStoreTaskswitch+0xce>
   18c84:	4b2b      	ldr	r3, [pc, #172]	; (18d34 <prvTraceStoreTaskswitch+0xf8>)
   18c86:	681b      	ldr	r3, [r3, #0]
   18c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18c8a:	2b00      	cmp	r3, #0
   18c8c:	d03d      	beq.n	18d0a <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   18c8e:	4b2a      	ldr	r3, [pc, #168]	; (18d38 <prvTraceStoreTaskswitch+0xfc>)
   18c90:	2200      	movs	r2, #0
   18c92:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18c94:	231a      	movs	r3, #26
   18c96:	18fc      	adds	r4, r7, r3
   18c98:	4b28      	ldr	r3, [pc, #160]	; (18d3c <prvTraceStoreTaskswitch+0x100>)
   18c9a:	0018      	movs	r0, r3
   18c9c:	4b28      	ldr	r3, [pc, #160]	; (18d40 <prvTraceStoreTaskswitch+0x104>)
   18c9e:	4798      	blx	r3
   18ca0:	0003      	movs	r3, r0
   18ca2:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   18ca4:	4b22      	ldr	r3, [pc, #136]	; (18d30 <prvTraceStoreTaskswitch+0xf4>)
   18ca6:	1dfa      	adds	r2, r7, #7
   18ca8:	7812      	ldrb	r2, [r2, #0]
   18caa:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   18cac:	2319      	movs	r3, #25
   18cae:	18fb      	adds	r3, r7, r3
   18cb0:	4a1f      	ldr	r2, [pc, #124]	; (18d30 <prvTraceStoreTaskswitch+0xf4>)
   18cb2:	7812      	ldrb	r2, [r2, #0]
   18cb4:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   18cb6:	4b23      	ldr	r3, [pc, #140]	; (18d44 <prvTraceStoreTaskswitch+0x108>)
   18cb8:	4798      	blx	r3
   18cba:	0003      	movs	r3, r0
   18cbc:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   18cbe:	697b      	ldr	r3, [r7, #20]
   18cc0:	2b00      	cmp	r3, #0
   18cc2:	d022      	beq.n	18d0a <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   18cc4:	4b1a      	ldr	r3, [pc, #104]	; (18d30 <prvTraceStoreTaskswitch+0xf4>)
   18cc6:	781b      	ldrb	r3, [r3, #0]
   18cc8:	0019      	movs	r1, r3
   18cca:	2003      	movs	r0, #3
   18ccc:	4b1e      	ldr	r3, [pc, #120]	; (18d48 <prvTraceStoreTaskswitch+0x10c>)
   18cce:	4798      	blx	r3
   18cd0:	0003      	movs	r3, r0
   18cd2:	2b01      	cmp	r3, #1
   18cd4:	d103      	bne.n	18cde <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   18cd6:	697b      	ldr	r3, [r7, #20]
   18cd8:	2207      	movs	r2, #7
   18cda:	701a      	strb	r2, [r3, #0]
   18cdc:	e002      	b.n	18ce4 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   18cde:	697b      	ldr	r3, [r7, #20]
   18ce0:	2206      	movs	r2, #6
   18ce2:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   18ce4:	697b      	ldr	r3, [r7, #20]
   18ce6:	221a      	movs	r2, #26
   18ce8:	18ba      	adds	r2, r7, r2
   18cea:	8812      	ldrh	r2, [r2, #0]
   18cec:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   18cee:	697b      	ldr	r3, [r7, #20]
   18cf0:	2219      	movs	r2, #25
   18cf2:	18ba      	adds	r2, r7, r2
   18cf4:	7812      	ldrb	r2, [r2, #0]
   18cf6:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   18cf8:	4b0d      	ldr	r3, [pc, #52]	; (18d30 <prvTraceStoreTaskswitch+0xf4>)
   18cfa:	781b      	ldrb	r3, [r3, #0]
   18cfc:	2201      	movs	r2, #1
   18cfe:	0019      	movs	r1, r3
   18d00:	2003      	movs	r0, #3
   18d02:	4b12      	ldr	r3, [pc, #72]	; (18d4c <prvTraceStoreTaskswitch+0x110>)
   18d04:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   18d06:	4b12      	ldr	r3, [pc, #72]	; (18d50 <prvTraceStoreTaskswitch+0x114>)
   18d08:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   18d0a:	4b08      	ldr	r3, [pc, #32]	; (18d2c <prvTraceStoreTaskswitch+0xf0>)
   18d0c:	681b      	ldr	r3, [r3, #0]
   18d0e:	1e5a      	subs	r2, r3, #1
   18d10:	4b06      	ldr	r3, [pc, #24]	; (18d2c <prvTraceStoreTaskswitch+0xf0>)
   18d12:	601a      	str	r2, [r3, #0]
   18d14:	69fb      	ldr	r3, [r7, #28]
   18d16:	60bb      	str	r3, [r7, #8]
   18d18:	68bb      	ldr	r3, [r7, #8]
   18d1a:	f383 8810 	msr	PRIMASK, r3
}
   18d1e:	46bd      	mov	sp, r7
   18d20:	b009      	add	sp, #36	; 0x24
   18d22:	bd90      	pop	{r4, r7, pc}
   18d24:	00037618 	.word	0x00037618
   18d28:	000196dd 	.word	0x000196dd
   18d2c:	20000bf0 	.word	0x20000bf0
   18d30:	20000bfc 	.word	0x20000bfc
   18d34:	20000c98 	.word	0x20000c98
   18d38:	20000bdc 	.word	0x20000bdc
   18d3c:	0000ffff 	.word	0x0000ffff
   18d40:	000198f1 	.word	0x000198f1
   18d44:	00019295 	.word	0x00019295
   18d48:	00018f39 	.word	0x00018f39
   18d4c:	00018e95 	.word	0x00018e95
   18d50:	00019899 	.word	0x00019899

00018d54 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18d54:	b590      	push	{r4, r7, lr}
   18d56:	b083      	sub	sp, #12
   18d58:	af00      	add	r7, sp, #0
   18d5a:	0004      	movs	r4, r0
   18d5c:	0008      	movs	r0, r1
   18d5e:	0011      	movs	r1, r2
   18d60:	1dfb      	adds	r3, r7, #7
   18d62:	1c22      	adds	r2, r4, #0
   18d64:	701a      	strb	r2, [r3, #0]
   18d66:	1dbb      	adds	r3, r7, #6
   18d68:	1c02      	adds	r2, r0, #0
   18d6a:	701a      	strb	r2, [r3, #0]
   18d6c:	1d7b      	adds	r3, r7, #5
   18d6e:	1c0a      	adds	r2, r1, #0
   18d70:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18d72:	1dfb      	adds	r3, r7, #7
   18d74:	781b      	ldrb	r3, [r3, #0]
   18d76:	2b08      	cmp	r3, #8
   18d78:	d904      	bls.n	18d84 <prvTraceSetPriorityProperty+0x30>
   18d7a:	4b1a      	ldr	r3, [pc, #104]	; (18de4 <prvTraceSetPriorityProperty+0x90>)
   18d7c:	0018      	movs	r0, r3
   18d7e:	4b1a      	ldr	r3, [pc, #104]	; (18de8 <prvTraceSetPriorityProperty+0x94>)
   18d80:	4798      	blx	r3
   18d82:	e02c      	b.n	18dde <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18d84:	4b19      	ldr	r3, [pc, #100]	; (18dec <prvTraceSetPriorityProperty+0x98>)
   18d86:	681a      	ldr	r2, [r3, #0]
   18d88:	1dfb      	adds	r3, r7, #7
   18d8a:	781b      	ldrb	r3, [r3, #0]
   18d8c:	2164      	movs	r1, #100	; 0x64
   18d8e:	18d3      	adds	r3, r2, r3
   18d90:	185b      	adds	r3, r3, r1
   18d92:	781b      	ldrb	r3, [r3, #0]
   18d94:	1dba      	adds	r2, r7, #6
   18d96:	7812      	ldrb	r2, [r2, #0]
   18d98:	429a      	cmp	r2, r3
   18d9a:	d904      	bls.n	18da6 <prvTraceSetPriorityProperty+0x52>
   18d9c:	4b14      	ldr	r3, [pc, #80]	; (18df0 <prvTraceSetPriorityProperty+0x9c>)
   18d9e:	0018      	movs	r0, r3
   18da0:	4b11      	ldr	r3, [pc, #68]	; (18de8 <prvTraceSetPriorityProperty+0x94>)
   18da2:	4798      	blx	r3
   18da4:	e01b      	b.n	18dde <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   18da6:	4b11      	ldr	r3, [pc, #68]	; (18dec <prvTraceSetPriorityProperty+0x98>)
   18da8:	681c      	ldr	r4, [r3, #0]
   18daa:	1dfb      	adds	r3, r7, #7
   18dac:	781a      	ldrb	r2, [r3, #0]
   18dae:	1dbb      	adds	r3, r7, #6
   18db0:	781b      	ldrb	r3, [r3, #0]
   18db2:	0011      	movs	r1, r2
   18db4:	0018      	movs	r0, r3
   18db6:	4b0f      	ldr	r3, [pc, #60]	; (18df4 <prvTraceSetPriorityProperty+0xa0>)
   18db8:	4798      	blx	r3
   18dba:	0003      	movs	r3, r0
   18dbc:	0018      	movs	r0, r3
   18dbe:	4b0b      	ldr	r3, [pc, #44]	; (18dec <prvTraceSetPriorityProperty+0x98>)
   18dc0:	681a      	ldr	r2, [r3, #0]
   18dc2:	1dfb      	adds	r3, r7, #7
   18dc4:	781b      	ldrb	r3, [r3, #0]
   18dc6:	2170      	movs	r1, #112	; 0x70
   18dc8:	18d3      	adds	r3, r2, r3
   18dca:	185b      	adds	r3, r3, r1
   18dcc:	781b      	ldrb	r3, [r3, #0]
   18dce:	18c3      	adds	r3, r0, r3
   18dd0:	3301      	adds	r3, #1
   18dd2:	229c      	movs	r2, #156	; 0x9c
   18dd4:	18e3      	adds	r3, r4, r3
   18dd6:	189b      	adds	r3, r3, r2
   18dd8:	1d7a      	adds	r2, r7, #5
   18dda:	7812      	ldrb	r2, [r2, #0]
   18ddc:	701a      	strb	r2, [r3, #0]
}
   18dde:	46bd      	mov	sp, r7
   18de0:	b003      	add	sp, #12
   18de2:	bd90      	pop	{r4, r7, pc}
   18de4:	000377ac 	.word	0x000377ac
   18de8:	000196dd 	.word	0x000196dd
   18dec:	20000c98 	.word	0x20000c98
   18df0:	000377f8 	.word	0x000377f8
   18df4:	000192e9 	.word	0x000192e9

00018df8 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   18df8:	b590      	push	{r4, r7, lr}
   18dfa:	b083      	sub	sp, #12
   18dfc:	af00      	add	r7, sp, #0
   18dfe:	0002      	movs	r2, r0
   18e00:	1dfb      	adds	r3, r7, #7
   18e02:	701a      	strb	r2, [r3, #0]
   18e04:	1dbb      	adds	r3, r7, #6
   18e06:	1c0a      	adds	r2, r1, #0
   18e08:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18e0a:	1dfb      	adds	r3, r7, #7
   18e0c:	781b      	ldrb	r3, [r3, #0]
   18e0e:	2b08      	cmp	r3, #8
   18e10:	d905      	bls.n	18e1e <prvTraceGetPriorityProperty+0x26>
   18e12:	4b1b      	ldr	r3, [pc, #108]	; (18e80 <prvTraceGetPriorityProperty+0x88>)
   18e14:	0018      	movs	r0, r3
   18e16:	4b1b      	ldr	r3, [pc, #108]	; (18e84 <prvTraceGetPriorityProperty+0x8c>)
   18e18:	4798      	blx	r3
   18e1a:	2300      	movs	r3, #0
   18e1c:	e02b      	b.n	18e76 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18e1e:	4b1a      	ldr	r3, [pc, #104]	; (18e88 <prvTraceGetPriorityProperty+0x90>)
   18e20:	681a      	ldr	r2, [r3, #0]
   18e22:	1dfb      	adds	r3, r7, #7
   18e24:	781b      	ldrb	r3, [r3, #0]
   18e26:	2164      	movs	r1, #100	; 0x64
   18e28:	18d3      	adds	r3, r2, r3
   18e2a:	185b      	adds	r3, r3, r1
   18e2c:	781b      	ldrb	r3, [r3, #0]
   18e2e:	1dba      	adds	r2, r7, #6
   18e30:	7812      	ldrb	r2, [r2, #0]
   18e32:	429a      	cmp	r2, r3
   18e34:	d905      	bls.n	18e42 <prvTraceGetPriorityProperty+0x4a>
   18e36:	4b15      	ldr	r3, [pc, #84]	; (18e8c <prvTraceGetPriorityProperty+0x94>)
   18e38:	0018      	movs	r0, r3
   18e3a:	4b12      	ldr	r3, [pc, #72]	; (18e84 <prvTraceGetPriorityProperty+0x8c>)
   18e3c:	4798      	blx	r3
   18e3e:	2300      	movs	r3, #0
   18e40:	e019      	b.n	18e76 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   18e42:	4b11      	ldr	r3, [pc, #68]	; (18e88 <prvTraceGetPriorityProperty+0x90>)
   18e44:	681c      	ldr	r4, [r3, #0]
   18e46:	1dfb      	adds	r3, r7, #7
   18e48:	781a      	ldrb	r2, [r3, #0]
   18e4a:	1dbb      	adds	r3, r7, #6
   18e4c:	781b      	ldrb	r3, [r3, #0]
   18e4e:	0011      	movs	r1, r2
   18e50:	0018      	movs	r0, r3
   18e52:	4b0f      	ldr	r3, [pc, #60]	; (18e90 <prvTraceGetPriorityProperty+0x98>)
   18e54:	4798      	blx	r3
   18e56:	0003      	movs	r3, r0
   18e58:	0018      	movs	r0, r3
   18e5a:	4b0b      	ldr	r3, [pc, #44]	; (18e88 <prvTraceGetPriorityProperty+0x90>)
   18e5c:	681a      	ldr	r2, [r3, #0]
   18e5e:	1dfb      	adds	r3, r7, #7
   18e60:	781b      	ldrb	r3, [r3, #0]
   18e62:	2170      	movs	r1, #112	; 0x70
   18e64:	18d3      	adds	r3, r2, r3
   18e66:	185b      	adds	r3, r3, r1
   18e68:	781b      	ldrb	r3, [r3, #0]
   18e6a:	18c3      	adds	r3, r0, r3
   18e6c:	3301      	adds	r3, #1
   18e6e:	229c      	movs	r2, #156	; 0x9c
   18e70:	18e3      	adds	r3, r4, r3
   18e72:	189b      	adds	r3, r3, r2
   18e74:	781b      	ldrb	r3, [r3, #0]
}
   18e76:	0018      	movs	r0, r3
   18e78:	46bd      	mov	sp, r7
   18e7a:	b003      	add	sp, #12
   18e7c:	bd90      	pop	{r4, r7, pc}
   18e7e:	46c0      	nop			; (mov r8, r8)
   18e80:	00037838 	.word	0x00037838
   18e84:	000196dd 	.word	0x000196dd
   18e88:	20000c98 	.word	0x20000c98
   18e8c:	00037884 	.word	0x00037884
   18e90:	000192e9 	.word	0x000192e9

00018e94 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18e94:	b590      	push	{r4, r7, lr}
   18e96:	b083      	sub	sp, #12
   18e98:	af00      	add	r7, sp, #0
   18e9a:	0004      	movs	r4, r0
   18e9c:	0008      	movs	r0, r1
   18e9e:	0011      	movs	r1, r2
   18ea0:	1dfb      	adds	r3, r7, #7
   18ea2:	1c22      	adds	r2, r4, #0
   18ea4:	701a      	strb	r2, [r3, #0]
   18ea6:	1dbb      	adds	r3, r7, #6
   18ea8:	1c02      	adds	r2, r0, #0
   18eaa:	701a      	strb	r2, [r3, #0]
   18eac:	1d7b      	adds	r3, r7, #5
   18eae:	1c0a      	adds	r2, r1, #0
   18eb0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18eb2:	1dfb      	adds	r3, r7, #7
   18eb4:	781b      	ldrb	r3, [r3, #0]
   18eb6:	2b08      	cmp	r3, #8
   18eb8:	d904      	bls.n	18ec4 <prvTraceSetObjectState+0x30>
   18eba:	4b1a      	ldr	r3, [pc, #104]	; (18f24 <prvTraceSetObjectState+0x90>)
   18ebc:	0018      	movs	r0, r3
   18ebe:	4b1a      	ldr	r3, [pc, #104]	; (18f28 <prvTraceSetObjectState+0x94>)
   18ec0:	4798      	blx	r3
   18ec2:	e02b      	b.n	18f1c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18ec4:	4b19      	ldr	r3, [pc, #100]	; (18f2c <prvTraceSetObjectState+0x98>)
   18ec6:	681a      	ldr	r2, [r3, #0]
   18ec8:	1dfb      	adds	r3, r7, #7
   18eca:	781b      	ldrb	r3, [r3, #0]
   18ecc:	2164      	movs	r1, #100	; 0x64
   18ece:	18d3      	adds	r3, r2, r3
   18ed0:	185b      	adds	r3, r3, r1
   18ed2:	781b      	ldrb	r3, [r3, #0]
   18ed4:	1dba      	adds	r2, r7, #6
   18ed6:	7812      	ldrb	r2, [r2, #0]
   18ed8:	429a      	cmp	r2, r3
   18eda:	d904      	bls.n	18ee6 <prvTraceSetObjectState+0x52>
   18edc:	4b14      	ldr	r3, [pc, #80]	; (18f30 <prvTraceSetObjectState+0x9c>)
   18ede:	0018      	movs	r0, r3
   18ee0:	4b11      	ldr	r3, [pc, #68]	; (18f28 <prvTraceSetObjectState+0x94>)
   18ee2:	4798      	blx	r3
   18ee4:	e01a      	b.n	18f1c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   18ee6:	4b11      	ldr	r3, [pc, #68]	; (18f2c <prvTraceSetObjectState+0x98>)
   18ee8:	681c      	ldr	r4, [r3, #0]
   18eea:	1dfb      	adds	r3, r7, #7
   18eec:	781a      	ldrb	r2, [r3, #0]
   18eee:	1dbb      	adds	r3, r7, #6
   18ef0:	781b      	ldrb	r3, [r3, #0]
   18ef2:	0011      	movs	r1, r2
   18ef4:	0018      	movs	r0, r3
   18ef6:	4b0f      	ldr	r3, [pc, #60]	; (18f34 <prvTraceSetObjectState+0xa0>)
   18ef8:	4798      	blx	r3
   18efa:	0003      	movs	r3, r0
   18efc:	0018      	movs	r0, r3
   18efe:	4b0b      	ldr	r3, [pc, #44]	; (18f2c <prvTraceSetObjectState+0x98>)
   18f00:	681a      	ldr	r2, [r3, #0]
   18f02:	1dfb      	adds	r3, r7, #7
   18f04:	781b      	ldrb	r3, [r3, #0]
   18f06:	2170      	movs	r1, #112	; 0x70
   18f08:	18d3      	adds	r3, r2, r3
   18f0a:	185b      	adds	r3, r3, r1
   18f0c:	781b      	ldrb	r3, [r3, #0]
   18f0e:	18c3      	adds	r3, r0, r3
   18f10:	229c      	movs	r2, #156	; 0x9c
   18f12:	18e3      	adds	r3, r4, r3
   18f14:	189b      	adds	r3, r3, r2
   18f16:	1d7a      	adds	r2, r7, #5
   18f18:	7812      	ldrb	r2, [r2, #0]
   18f1a:	701a      	strb	r2, [r3, #0]
}
   18f1c:	46bd      	mov	sp, r7
   18f1e:	b003      	add	sp, #12
   18f20:	bd90      	pop	{r4, r7, pc}
   18f22:	46c0      	nop			; (mov r8, r8)
   18f24:	000378c4 	.word	0x000378c4
   18f28:	000196dd 	.word	0x000196dd
   18f2c:	20000c98 	.word	0x20000c98
   18f30:	00037908 	.word	0x00037908
   18f34:	000192e9 	.word	0x000192e9

00018f38 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   18f38:	b590      	push	{r4, r7, lr}
   18f3a:	b083      	sub	sp, #12
   18f3c:	af00      	add	r7, sp, #0
   18f3e:	0002      	movs	r2, r0
   18f40:	1dfb      	adds	r3, r7, #7
   18f42:	701a      	strb	r2, [r3, #0]
   18f44:	1dbb      	adds	r3, r7, #6
   18f46:	1c0a      	adds	r2, r1, #0
   18f48:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18f4a:	1dfb      	adds	r3, r7, #7
   18f4c:	781b      	ldrb	r3, [r3, #0]
   18f4e:	2b08      	cmp	r3, #8
   18f50:	d905      	bls.n	18f5e <prvTraceGetObjectState+0x26>
   18f52:	4b1a      	ldr	r3, [pc, #104]	; (18fbc <prvTraceGetObjectState+0x84>)
   18f54:	0018      	movs	r0, r3
   18f56:	4b1a      	ldr	r3, [pc, #104]	; (18fc0 <prvTraceGetObjectState+0x88>)
   18f58:	4798      	blx	r3
   18f5a:	2300      	movs	r3, #0
   18f5c:	e02a      	b.n	18fb4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18f5e:	4b19      	ldr	r3, [pc, #100]	; (18fc4 <prvTraceGetObjectState+0x8c>)
   18f60:	681a      	ldr	r2, [r3, #0]
   18f62:	1dfb      	adds	r3, r7, #7
   18f64:	781b      	ldrb	r3, [r3, #0]
   18f66:	2164      	movs	r1, #100	; 0x64
   18f68:	18d3      	adds	r3, r2, r3
   18f6a:	185b      	adds	r3, r3, r1
   18f6c:	781b      	ldrb	r3, [r3, #0]
   18f6e:	1dba      	adds	r2, r7, #6
   18f70:	7812      	ldrb	r2, [r2, #0]
   18f72:	429a      	cmp	r2, r3
   18f74:	d905      	bls.n	18f82 <prvTraceGetObjectState+0x4a>
   18f76:	4b14      	ldr	r3, [pc, #80]	; (18fc8 <prvTraceGetObjectState+0x90>)
   18f78:	0018      	movs	r0, r3
   18f7a:	4b11      	ldr	r3, [pc, #68]	; (18fc0 <prvTraceGetObjectState+0x88>)
   18f7c:	4798      	blx	r3
   18f7e:	2300      	movs	r3, #0
   18f80:	e018      	b.n	18fb4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   18f82:	4b10      	ldr	r3, [pc, #64]	; (18fc4 <prvTraceGetObjectState+0x8c>)
   18f84:	681c      	ldr	r4, [r3, #0]
   18f86:	1dfb      	adds	r3, r7, #7
   18f88:	781a      	ldrb	r2, [r3, #0]
   18f8a:	1dbb      	adds	r3, r7, #6
   18f8c:	781b      	ldrb	r3, [r3, #0]
   18f8e:	0011      	movs	r1, r2
   18f90:	0018      	movs	r0, r3
   18f92:	4b0e      	ldr	r3, [pc, #56]	; (18fcc <prvTraceGetObjectState+0x94>)
   18f94:	4798      	blx	r3
   18f96:	0003      	movs	r3, r0
   18f98:	0018      	movs	r0, r3
   18f9a:	4b0a      	ldr	r3, [pc, #40]	; (18fc4 <prvTraceGetObjectState+0x8c>)
   18f9c:	681a      	ldr	r2, [r3, #0]
   18f9e:	1dfb      	adds	r3, r7, #7
   18fa0:	781b      	ldrb	r3, [r3, #0]
   18fa2:	2170      	movs	r1, #112	; 0x70
   18fa4:	18d3      	adds	r3, r2, r3
   18fa6:	185b      	adds	r3, r3, r1
   18fa8:	781b      	ldrb	r3, [r3, #0]
   18faa:	18c3      	adds	r3, r0, r3
   18fac:	229c      	movs	r2, #156	; 0x9c
   18fae:	18e3      	adds	r3, r4, r3
   18fb0:	189b      	adds	r3, r3, r2
   18fb2:	781b      	ldrb	r3, [r3, #0]
}
   18fb4:	0018      	movs	r0, r3
   18fb6:	46bd      	mov	sp, r7
   18fb8:	b003      	add	sp, #12
   18fba:	bd90      	pop	{r4, r7, pc}
   18fbc:	00037944 	.word	0x00037944
   18fc0:	000196dd 	.word	0x000196dd
   18fc4:	20000c98 	.word	0x20000c98
   18fc8:	00037988 	.word	0x00037988
   18fcc:	000192e9 	.word	0x000192e9

00018fd0 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   18fd0:	b590      	push	{r4, r7, lr}
   18fd2:	b083      	sub	sp, #12
   18fd4:	af00      	add	r7, sp, #0
   18fd6:	0002      	movs	r2, r0
   18fd8:	1dfb      	adds	r3, r7, #7
   18fda:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   18fdc:	4b11      	ldr	r3, [pc, #68]	; (19024 <prvTraceSetTaskInstanceFinished+0x54>)
   18fde:	681b      	ldr	r3, [r3, #0]
   18fe0:	2267      	movs	r2, #103	; 0x67
   18fe2:	5c9b      	ldrb	r3, [r3, r2]
   18fe4:	1dfa      	adds	r2, r7, #7
   18fe6:	7812      	ldrb	r2, [r2, #0]
   18fe8:	429a      	cmp	r2, r3
   18fea:	d904      	bls.n	18ff6 <prvTraceSetTaskInstanceFinished+0x26>
   18fec:	4b0e      	ldr	r3, [pc, #56]	; (19028 <prvTraceSetTaskInstanceFinished+0x58>)
   18fee:	0018      	movs	r0, r3
   18ff0:	4b0e      	ldr	r3, [pc, #56]	; (1902c <prvTraceSetTaskInstanceFinished+0x5c>)
   18ff2:	4798      	blx	r3
   18ff4:	e013      	b.n	1901e <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   18ff6:	4b0b      	ldr	r3, [pc, #44]	; (19024 <prvTraceSetTaskInstanceFinished+0x54>)
   18ff8:	681c      	ldr	r4, [r3, #0]
   18ffa:	1dfb      	adds	r3, r7, #7
   18ffc:	781b      	ldrb	r3, [r3, #0]
   18ffe:	2103      	movs	r1, #3
   19000:	0018      	movs	r0, r3
   19002:	4b0b      	ldr	r3, [pc, #44]	; (19030 <prvTraceSetTaskInstanceFinished+0x60>)
   19004:	4798      	blx	r3
   19006:	0003      	movs	r3, r0
   19008:	0019      	movs	r1, r3
   1900a:	4b06      	ldr	r3, [pc, #24]	; (19024 <prvTraceSetTaskInstanceFinished+0x54>)
   1900c:	681b      	ldr	r3, [r3, #0]
   1900e:	2273      	movs	r2, #115	; 0x73
   19010:	5c9b      	ldrb	r3, [r3, r2]
   19012:	18cb      	adds	r3, r1, r3
   19014:	229c      	movs	r2, #156	; 0x9c
   19016:	18e3      	adds	r3, r4, r3
   19018:	189b      	adds	r3, r3, r2
   1901a:	2200      	movs	r2, #0
   1901c:	701a      	strb	r2, [r3, #0]
#endif
}
   1901e:	46bd      	mov	sp, r7
   19020:	b003      	add	sp, #12
   19022:	bd90      	pop	{r4, r7, pc}
   19024:	20000c98 	.word	0x20000c98
   19028:	000379c4 	.word	0x000379c4
   1902c:	000196dd 	.word	0x000196dd
   19030:	000192e9 	.word	0x000192e9

00019034 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   19034:	b580      	push	{r7, lr}
   19036:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   19038:	4b75      	ldr	r3, [pc, #468]	; (19210 <prvTraceInitTraceData+0x1dc>)
   1903a:	681b      	ldr	r3, [r3, #0]
   1903c:	2b00      	cmp	r3, #0
   1903e:	d103      	bne.n	19048 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   19040:	4b73      	ldr	r3, [pc, #460]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19042:	4a74      	ldr	r2, [pc, #464]	; (19214 <prvTraceInitTraceData+0x1e0>)
   19044:	601a      	str	r2, [r3, #0]
   19046:	e006      	b.n	19056 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   19048:	4b71      	ldr	r3, [pc, #452]	; (19210 <prvTraceInitTraceData+0x1dc>)
   1904a:	681b      	ldr	r3, [r3, #0]
   1904c:	781b      	ldrb	r3, [r3, #0]
   1904e:	b2db      	uxtb	r3, r3
   19050:	2b01      	cmp	r3, #1
   19052:	d100      	bne.n	19056 <prvTraceInitTraceData+0x22>
   19054:	e0d8      	b.n	19208 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   19056:	4b70      	ldr	r3, [pc, #448]	; (19218 <prvTraceInitTraceData+0x1e4>)
   19058:	681a      	ldr	r2, [r3, #0]
   1905a:	4b70      	ldr	r3, [pc, #448]	; (1921c <prvTraceInitTraceData+0x1e8>)
   1905c:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1905e:	4b6c      	ldr	r3, [pc, #432]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19060:	6818      	ldr	r0, [r3, #0]
   19062:	23bd      	movs	r3, #189	; 0xbd
   19064:	011b      	lsls	r3, r3, #4
   19066:	001a      	movs	r2, r3
   19068:	2100      	movs	r1, #0
   1906a:	4b6d      	ldr	r3, [pc, #436]	; (19220 <prvTraceInitTraceData+0x1ec>)
   1906c:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1906e:	4b68      	ldr	r3, [pc, #416]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19070:	681b      	ldr	r3, [r3, #0]
   19072:	4a6c      	ldr	r2, [pc, #432]	; (19224 <prvTraceInitTraceData+0x1f0>)
   19074:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   19076:	4b66      	ldr	r3, [pc, #408]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19078:	681b      	ldr	r3, [r3, #0]
   1907a:	2205      	movs	r2, #5
   1907c:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1907e:	4b64      	ldr	r3, [pc, #400]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19080:	681b      	ldr	r3, [r3, #0]
   19082:	2200      	movs	r2, #0
   19084:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   19086:	4b62      	ldr	r3, [pc, #392]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19088:	681b      	ldr	r3, [r3, #0]
   1908a:	22bd      	movs	r2, #189	; 0xbd
   1908c:	0112      	lsls	r2, r2, #4
   1908e:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   19090:	4b5f      	ldr	r3, [pc, #380]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19092:	681b      	ldr	r3, [r3, #0]
   19094:	2296      	movs	r2, #150	; 0x96
   19096:	0052      	lsls	r2, r2, #1
   19098:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1909a:	4b5d      	ldr	r3, [pc, #372]	; (19210 <prvTraceInitTraceData+0x1dc>)
   1909c:	681b      	ldr	r3, [r3, #0]
   1909e:	4a62      	ldr	r2, [pc, #392]	; (19228 <prvTraceInitTraceData+0x1f4>)
   190a0:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   190a2:	4b5b      	ldr	r3, [pc, #364]	; (19210 <prvTraceInitTraceData+0x1dc>)
   190a4:	681b      	ldr	r3, [r3, #0]
   190a6:	2200      	movs	r2, #0
   190a8:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   190aa:	4b59      	ldr	r3, [pc, #356]	; (19210 <prvTraceInitTraceData+0x1dc>)
   190ac:	681b      	ldr	r3, [r3, #0]
   190ae:	2200      	movs	r2, #0
   190b0:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   190b2:	4b5e      	ldr	r3, [pc, #376]	; (1922c <prvTraceInitTraceData+0x1f8>)
   190b4:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   190b6:	4b56      	ldr	r3, [pc, #344]	; (19210 <prvTraceInitTraceData+0x1dc>)
   190b8:	681b      	ldr	r3, [r3, #0]
   190ba:	4a5d      	ldr	r2, [pc, #372]	; (19230 <prvTraceInitTraceData+0x1fc>)
   190bc:	495d      	ldr	r1, [pc, #372]	; (19234 <prvTraceInitTraceData+0x200>)
   190be:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   190c0:	4b53      	ldr	r3, [pc, #332]	; (19210 <prvTraceInitTraceData+0x1dc>)
   190c2:	681a      	ldr	r2, [r3, #0]
   190c4:	23ac      	movs	r3, #172	; 0xac
   190c6:	00db      	lsls	r3, r3, #3
   190c8:	21c8      	movs	r1, #200	; 0xc8
   190ca:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   190cc:	4b50      	ldr	r3, [pc, #320]	; (19210 <prvTraceInitTraceData+0x1dc>)
   190ce:	681b      	ldr	r3, [r3, #0]
   190d0:	4a59      	ldr	r2, [pc, #356]	; (19238 <prvTraceInitTraceData+0x204>)
   190d2:	2101      	movs	r1, #1
   190d4:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   190d6:	4b4e      	ldr	r3, [pc, #312]	; (19210 <prvTraceInitTraceData+0x1dc>)
   190d8:	681a      	ldr	r2, [r3, #0]
   190da:	23d7      	movs	r3, #215	; 0xd7
   190dc:	00db      	lsls	r3, r3, #3
   190de:	4957      	ldr	r1, [pc, #348]	; (1923c <prvTraceInitTraceData+0x208>)
   190e0:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   190e2:	4b4b      	ldr	r3, [pc, #300]	; (19210 <prvTraceInitTraceData+0x1dc>)
   190e4:	681b      	ldr	r3, [r3, #0]
   190e6:	4a56      	ldr	r2, [pc, #344]	; (19240 <prvTraceInitTraceData+0x20c>)
   190e8:	4694      	mov	ip, r2
   190ea:	4463      	add	r3, ip
   190ec:	4955      	ldr	r1, [pc, #340]	; (19244 <prvTraceInitTraceData+0x210>)
   190ee:	2250      	movs	r2, #80	; 0x50
   190f0:	0018      	movs	r0, r3
   190f2:	4b55      	ldr	r3, [pc, #340]	; (19248 <prvTraceInitTraceData+0x214>)
   190f4:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   190f6:	4b46      	ldr	r3, [pc, #280]	; (19210 <prvTraceInitTraceData+0x1dc>)
   190f8:	681b      	ldr	r3, [r3, #0]
   190fa:	4a54      	ldr	r2, [pc, #336]	; (1924c <prvTraceInitTraceData+0x218>)
   190fc:	4954      	ldr	r1, [pc, #336]	; (19250 <prvTraceInitTraceData+0x21c>)
   190fe:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   19100:	4b43      	ldr	r3, [pc, #268]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19102:	681b      	ldr	r3, [r3, #0]
   19104:	4a53      	ldr	r2, [pc, #332]	; (19254 <prvTraceInitTraceData+0x220>)
   19106:	210a      	movs	r1, #10
   19108:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   1910a:	4b41      	ldr	r3, [pc, #260]	; (19210 <prvTraceInitTraceData+0x1dc>)
   1910c:	681b      	ldr	r3, [r3, #0]
   1910e:	4a52      	ldr	r2, [pc, #328]	; (19258 <prvTraceInitTraceData+0x224>)
   19110:	210b      	movs	r1, #11
   19112:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   19114:	4b3e      	ldr	r3, [pc, #248]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19116:	681b      	ldr	r3, [r3, #0]
   19118:	4a50      	ldr	r2, [pc, #320]	; (1925c <prvTraceInitTraceData+0x228>)
   1911a:	210c      	movs	r1, #12
   1911c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1911e:	4b3c      	ldr	r3, [pc, #240]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19120:	681b      	ldr	r3, [r3, #0]
   19122:	4a4f      	ldr	r2, [pc, #316]	; (19260 <prvTraceInitTraceData+0x22c>)
   19124:	210d      	movs	r1, #13
   19126:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   19128:	4b39      	ldr	r3, [pc, #228]	; (19210 <prvTraceInitTraceData+0x1dc>)
   1912a:	681b      	ldr	r3, [r3, #0]
   1912c:	4a4d      	ldr	r2, [pc, #308]	; (19264 <prvTraceInitTraceData+0x230>)
   1912e:	2171      	movs	r1, #113	; 0x71
   19130:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   19132:	4b37      	ldr	r3, [pc, #220]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19134:	681b      	ldr	r3, [r3, #0]
   19136:	4a4c      	ldr	r2, [pc, #304]	; (19268 <prvTraceInitTraceData+0x234>)
   19138:	2172      	movs	r1, #114	; 0x72
   1913a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   1913c:	4b34      	ldr	r3, [pc, #208]	; (19210 <prvTraceInitTraceData+0x1dc>)
   1913e:	681b      	ldr	r3, [r3, #0]
   19140:	4a4a      	ldr	r2, [pc, #296]	; (1926c <prvTraceInitTraceData+0x238>)
   19142:	2173      	movs	r1, #115	; 0x73
   19144:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   19146:	4b32      	ldr	r3, [pc, #200]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19148:	681b      	ldr	r3, [r3, #0]
   1914a:	4a49      	ldr	r2, [pc, #292]	; (19270 <prvTraceInitTraceData+0x23c>)
   1914c:	2174      	movs	r1, #116	; 0x74
   1914e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   19150:	4b2f      	ldr	r3, [pc, #188]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19152:	681b      	ldr	r3, [r3, #0]
   19154:	4a47      	ldr	r2, [pc, #284]	; (19274 <prvTraceInitTraceData+0x240>)
   19156:	21f1      	movs	r1, #241	; 0xf1
   19158:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   1915a:	4b2d      	ldr	r3, [pc, #180]	; (19210 <prvTraceInitTraceData+0x1dc>)
   1915c:	681b      	ldr	r3, [r3, #0]
   1915e:	4a46      	ldr	r2, [pc, #280]	; (19278 <prvTraceInitTraceData+0x244>)
   19160:	21f2      	movs	r1, #242	; 0xf2
   19162:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   19164:	4b2a      	ldr	r3, [pc, #168]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19166:	681b      	ldr	r3, [r3, #0]
   19168:	4a44      	ldr	r2, [pc, #272]	; (1927c <prvTraceInitTraceData+0x248>)
   1916a:	21f3      	movs	r1, #243	; 0xf3
   1916c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1916e:	4b28      	ldr	r3, [pc, #160]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19170:	681b      	ldr	r3, [r3, #0]
   19172:	4a43      	ldr	r2, [pc, #268]	; (19280 <prvTraceInitTraceData+0x24c>)
   19174:	21f4      	movs	r1, #244	; 0xf4
   19176:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   19178:	4b42      	ldr	r3, [pc, #264]	; (19284 <prvTraceInitTraceData+0x250>)
   1917a:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1917c:	4b24      	ldr	r3, [pc, #144]	; (19210 <prvTraceInitTraceData+0x1dc>)
   1917e:	681b      	ldr	r3, [r3, #0]
   19180:	22f4      	movs	r2, #244	; 0xf4
   19182:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   19184:	4b22      	ldr	r3, [pc, #136]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19186:	681b      	ldr	r3, [r3, #0]
   19188:	22f3      	movs	r2, #243	; 0xf3
   1918a:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1918c:	4b20      	ldr	r3, [pc, #128]	; (19210 <prvTraceInitTraceData+0x1dc>)
   1918e:	681b      	ldr	r3, [r3, #0]
   19190:	22f2      	movs	r2, #242	; 0xf2
   19192:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   19194:	4b1e      	ldr	r3, [pc, #120]	; (19210 <prvTraceInitTraceData+0x1dc>)
   19196:	681b      	ldr	r3, [r3, #0]
   19198:	22f1      	movs	r2, #241	; 0xf1
   1919a:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1919c:	4b1c      	ldr	r3, [pc, #112]	; (19210 <prvTraceInitTraceData+0x1dc>)
   1919e:	681b      	ldr	r3, [r3, #0]
   191a0:	2274      	movs	r2, #116	; 0x74
   191a2:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   191a4:	4b1a      	ldr	r3, [pc, #104]	; (19210 <prvTraceInitTraceData+0x1dc>)
   191a6:	681b      	ldr	r3, [r3, #0]
   191a8:	2273      	movs	r2, #115	; 0x73
   191aa:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   191ac:	4b18      	ldr	r3, [pc, #96]	; (19210 <prvTraceInitTraceData+0x1dc>)
   191ae:	681b      	ldr	r3, [r3, #0]
   191b0:	2272      	movs	r2, #114	; 0x72
   191b2:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   191b4:	4b16      	ldr	r3, [pc, #88]	; (19210 <prvTraceInitTraceData+0x1dc>)
   191b6:	681b      	ldr	r3, [r3, #0]
   191b8:	2271      	movs	r2, #113	; 0x71
   191ba:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   191bc:	4b14      	ldr	r3, [pc, #80]	; (19210 <prvTraceInitTraceData+0x1dc>)
   191be:	681b      	ldr	r3, [r3, #0]
   191c0:	2204      	movs	r2, #4
   191c2:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   191c4:	4b12      	ldr	r3, [pc, #72]	; (19210 <prvTraceInitTraceData+0x1dc>)
   191c6:	681b      	ldr	r3, [r3, #0]
   191c8:	2203      	movs	r2, #3
   191ca:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   191cc:	4b10      	ldr	r3, [pc, #64]	; (19210 <prvTraceInitTraceData+0x1dc>)
   191ce:	681b      	ldr	r3, [r3, #0]
   191d0:	2202      	movs	r2, #2
   191d2:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   191d4:	4b0e      	ldr	r3, [pc, #56]	; (19210 <prvTraceInitTraceData+0x1dc>)
   191d6:	681b      	ldr	r3, [r3, #0]
   191d8:	2201      	movs	r2, #1
   191da:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   191dc:	4b2a      	ldr	r3, [pc, #168]	; (19288 <prvTraceInitTraceData+0x254>)
   191de:	681b      	ldr	r3, [r3, #0]
   191e0:	2b00      	cmp	r3, #0
   191e2:	d012      	beq.n	1920a <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   191e4:	4b0a      	ldr	r3, [pc, #40]	; (19210 <prvTraceInitTraceData+0x1dc>)
   191e6:	681b      	ldr	r3, [r3, #0]
   191e8:	4a15      	ldr	r2, [pc, #84]	; (19240 <prvTraceInitTraceData+0x20c>)
   191ea:	1898      	adds	r0, r3, r2
   191ec:	4b26      	ldr	r3, [pc, #152]	; (19288 <prvTraceInitTraceData+0x254>)
   191ee:	681b      	ldr	r3, [r3, #0]
   191f0:	2250      	movs	r2, #80	; 0x50
   191f2:	0019      	movs	r1, r3
   191f4:	4b14      	ldr	r3, [pc, #80]	; (19248 <prvTraceInitTraceData+0x214>)
   191f6:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   191f8:	4b05      	ldr	r3, [pc, #20]	; (19210 <prvTraceInitTraceData+0x1dc>)
   191fa:	681b      	ldr	r3, [r3, #0]
   191fc:	4a23      	ldr	r2, [pc, #140]	; (1928c <prvTraceInitTraceData+0x258>)
   191fe:	2101      	movs	r1, #1
   19200:	5099      	str	r1, [r3, r2]
		vTraceStop();
   19202:	4b23      	ldr	r3, [pc, #140]	; (19290 <prvTraceInitTraceData+0x25c>)
   19204:	4798      	blx	r3
   19206:	e000      	b.n	1920a <prvTraceInitTraceData+0x1d6>
			return;
   19208:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   1920a:	46bd      	mov	sp, r7
   1920c:	bd80      	pop	{r7, pc}
   1920e:	46c0      	nop			; (mov r8, r8)
   19210:	20000c98 	.word	0x20000c98
   19214:	20004854 	.word	0x20004854
   19218:	e000e018 	.word	0xe000e018
   1921c:	20005424 	.word	0x20005424
   19220:	000346df 	.word	0x000346df
   19224:	00001aa1 	.word	0x00001aa1
   19228:	f0f0f0f0 	.word	0xf0f0f0f0
   1922c:	00018199 	.word	0x00018199
   19230:	0000055c 	.word	0x0000055c
   19234:	f1f1f1f1 	.word	0xf1f1f1f1
   19238:	00000564 	.word	0x00000564
   1923c:	f2f2f2f2 	.word	0xf2f2f2f2
   19240:	000006bc 	.word	0x000006bc
   19244:	00037a0c 	.word	0x00037a0c
   19248:	000195a9 	.word	0x000195a9
   1924c:	0000070c 	.word	0x0000070c
   19250:	f3f3f3f3 	.word	0xf3f3f3f3
   19254:	00000bc4 	.word	0x00000bc4
   19258:	00000bc5 	.word	0x00000bc5
   1925c:	00000bc6 	.word	0x00000bc6
   19260:	00000bc7 	.word	0x00000bc7
   19264:	00000bc8 	.word	0x00000bc8
   19268:	00000bc9 	.word	0x00000bc9
   1926c:	00000bca 	.word	0x00000bca
   19270:	00000bcb 	.word	0x00000bcb
   19274:	00000bcc 	.word	0x00000bcc
   19278:	00000bcd 	.word	0x00000bcd
   1927c:	00000bce 	.word	0x00000bce
   19280:	00000bcf 	.word	0x00000bcf
   19284:	00018339 	.word	0x00018339
   19288:	20000bf8 	.word	0x20000bf8
   1928c:	000006b4 	.word	0x000006b4
   19290:	000185a1 	.word	0x000185a1

00019294 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   19294:	b580      	push	{r7, lr}
   19296:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   19298:	4b10      	ldr	r3, [pc, #64]	; (192dc <prvTraceNextFreeEventBufferSlot+0x48>)
   1929a:	681b      	ldr	r3, [r3, #0]
   1929c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1929e:	2b00      	cmp	r3, #0
   192a0:	d101      	bne.n	192a6 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   192a2:	2300      	movs	r3, #0
   192a4:	e017      	b.n	192d6 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   192a6:	4b0d      	ldr	r3, [pc, #52]	; (192dc <prvTraceNextFreeEventBufferSlot+0x48>)
   192a8:	681b      	ldr	r3, [r3, #0]
   192aa:	69da      	ldr	r2, [r3, #28]
   192ac:	232c      	movs	r3, #44	; 0x2c
   192ae:	33ff      	adds	r3, #255	; 0xff
   192b0:	429a      	cmp	r2, r3
   192b2:	d905      	bls.n	192c0 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   192b4:	4b0a      	ldr	r3, [pc, #40]	; (192e0 <prvTraceNextFreeEventBufferSlot+0x4c>)
   192b6:	0018      	movs	r0, r3
   192b8:	4b0a      	ldr	r3, [pc, #40]	; (192e4 <prvTraceNextFreeEventBufferSlot+0x50>)
   192ba:	4798      	blx	r3
		return NULL;
   192bc:	2300      	movs	r3, #0
   192be:	e00a      	b.n	192d6 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   192c0:	4b06      	ldr	r3, [pc, #24]	; (192dc <prvTraceNextFreeEventBufferSlot+0x48>)
   192c2:	681a      	ldr	r2, [r3, #0]
   192c4:	4b05      	ldr	r3, [pc, #20]	; (192dc <prvTraceNextFreeEventBufferSlot+0x48>)
   192c6:	681b      	ldr	r3, [r3, #0]
   192c8:	69db      	ldr	r3, [r3, #28]
   192ca:	009b      	lsls	r3, r3, #2
   192cc:	21e2      	movs	r1, #226	; 0xe2
   192ce:	00c9      	lsls	r1, r1, #3
   192d0:	468c      	mov	ip, r1
   192d2:	4463      	add	r3, ip
   192d4:	18d3      	adds	r3, r2, r3
}
   192d6:	0018      	movs	r0, r3
   192d8:	46bd      	mov	sp, r7
   192da:	bd80      	pop	{r7, pc}
   192dc:	20000c98 	.word	0x20000c98
   192e0:	00037a20 	.word	0x00037a20
   192e4:	000196dd 	.word	0x000196dd

000192e8 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   192e8:	b580      	push	{r7, lr}
   192ea:	b082      	sub	sp, #8
   192ec:	af00      	add	r7, sp, #0
   192ee:	0002      	movs	r2, r0
   192f0:	1dfb      	adds	r3, r7, #7
   192f2:	701a      	strb	r2, [r3, #0]
   192f4:	1dbb      	adds	r3, r7, #6
   192f6:	1c0a      	adds	r2, r1, #0
   192f8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   192fa:	1dbb      	adds	r3, r7, #6
   192fc:	781b      	ldrb	r3, [r3, #0]
   192fe:	2b08      	cmp	r3, #8
   19300:	d905      	bls.n	1930e <uiIndexOfObject+0x26>
   19302:	4b2a      	ldr	r3, [pc, #168]	; (193ac <uiIndexOfObject+0xc4>)
   19304:	0018      	movs	r0, r3
   19306:	4b2a      	ldr	r3, [pc, #168]	; (193b0 <uiIndexOfObject+0xc8>)
   19308:	4798      	blx	r3
   1930a:	2300      	movs	r3, #0
   1930c:	e049      	b.n	193a2 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1930e:	1dfb      	adds	r3, r7, #7
   19310:	781b      	ldrb	r3, [r3, #0]
   19312:	2b00      	cmp	r3, #0
   19314:	d00b      	beq.n	1932e <uiIndexOfObject+0x46>
   19316:	4b27      	ldr	r3, [pc, #156]	; (193b4 <uiIndexOfObject+0xcc>)
   19318:	681a      	ldr	r2, [r3, #0]
   1931a:	1dbb      	adds	r3, r7, #6
   1931c:	781b      	ldrb	r3, [r3, #0]
   1931e:	2164      	movs	r1, #100	; 0x64
   19320:	18d3      	adds	r3, r2, r3
   19322:	185b      	adds	r3, r3, r1
   19324:	781b      	ldrb	r3, [r3, #0]
   19326:	1dfa      	adds	r2, r7, #7
   19328:	7812      	ldrb	r2, [r2, #0]
   1932a:	429a      	cmp	r2, r3
   1932c:	d905      	bls.n	1933a <uiIndexOfObject+0x52>
   1932e:	4b22      	ldr	r3, [pc, #136]	; (193b8 <uiIndexOfObject+0xd0>)
   19330:	0018      	movs	r0, r3
   19332:	4b1f      	ldr	r3, [pc, #124]	; (193b0 <uiIndexOfObject+0xc8>)
   19334:	4798      	blx	r3
   19336:	2300      	movs	r3, #0
   19338:	e033      	b.n	193a2 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1933a:	1dbb      	adds	r3, r7, #6
   1933c:	781b      	ldrb	r3, [r3, #0]
   1933e:	2b08      	cmp	r3, #8
   19340:	d82a      	bhi.n	19398 <uiIndexOfObject+0xb0>
   19342:	1dfb      	adds	r3, r7, #7
   19344:	781b      	ldrb	r3, [r3, #0]
   19346:	2b00      	cmp	r3, #0
   19348:	d026      	beq.n	19398 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1934a:	4b1a      	ldr	r3, [pc, #104]	; (193b4 <uiIndexOfObject+0xcc>)
   1934c:	681a      	ldr	r2, [r3, #0]
   1934e:	1dbb      	adds	r3, r7, #6
   19350:	781b      	ldrb	r3, [r3, #0]
   19352:	2164      	movs	r1, #100	; 0x64
   19354:	18d3      	adds	r3, r2, r3
   19356:	185b      	adds	r3, r3, r1
   19358:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1935a:	1dfa      	adds	r2, r7, #7
   1935c:	7812      	ldrb	r2, [r2, #0]
   1935e:	429a      	cmp	r2, r3
   19360:	d81a      	bhi.n	19398 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19362:	4b14      	ldr	r3, [pc, #80]	; (193b4 <uiIndexOfObject+0xcc>)
   19364:	681a      	ldr	r2, [r3, #0]
   19366:	1dbb      	adds	r3, r7, #6
   19368:	781b      	ldrb	r3, [r3, #0]
   1936a:	3340      	adds	r3, #64	; 0x40
   1936c:	005b      	lsls	r3, r3, #1
   1936e:	18d3      	adds	r3, r2, r3
   19370:	3308      	adds	r3, #8
   19372:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19374:	4b0f      	ldr	r3, [pc, #60]	; (193b4 <uiIndexOfObject+0xcc>)
   19376:	6819      	ldr	r1, [r3, #0]
   19378:	1dbb      	adds	r3, r7, #6
   1937a:	781b      	ldrb	r3, [r3, #0]
   1937c:	207c      	movs	r0, #124	; 0x7c
   1937e:	18cb      	adds	r3, r1, r3
   19380:	181b      	adds	r3, r3, r0
   19382:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19384:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19386:	1df9      	adds	r1, r7, #7
   19388:	7809      	ldrb	r1, [r1, #0]
   1938a:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1938c:	b289      	uxth	r1, r1
   1938e:	434b      	muls	r3, r1
   19390:	b29b      	uxth	r3, r3
   19392:	18d3      	adds	r3, r2, r3
   19394:	b29b      	uxth	r3, r3
   19396:	e004      	b.n	193a2 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   19398:	4b08      	ldr	r3, [pc, #32]	; (193bc <uiIndexOfObject+0xd4>)
   1939a:	0018      	movs	r0, r3
   1939c:	4b04      	ldr	r3, [pc, #16]	; (193b0 <uiIndexOfObject+0xc8>)
   1939e:	4798      	blx	r3
	return 0;
   193a0:	2300      	movs	r3, #0
}
   193a2:	0018      	movs	r0, r3
   193a4:	46bd      	mov	sp, r7
   193a6:	b002      	add	sp, #8
   193a8:	bd80      	pop	{r7, pc}
   193aa:	46c0      	nop			; (mov r8, r8)
   193ac:	00037a48 	.word	0x00037a48
   193b0:	000196dd 	.word	0x000196dd
   193b4:	20000c98 	.word	0x20000c98
   193b8:	00037a88 	.word	0x00037a88
   193bc:	00037ac8 	.word	0x00037ac8

000193c0 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   193c0:	b580      	push	{r7, lr}
   193c2:	b088      	sub	sp, #32
   193c4:	af00      	add	r7, sp, #0
   193c6:	0002      	movs	r2, r0
   193c8:	1dfb      	adds	r3, r7, #7
   193ca:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   193cc:	4b5a      	ldr	r3, [pc, #360]	; (19538 <prvTraceGetObjectHandle+0x178>)
   193ce:	681b      	ldr	r3, [r3, #0]
   193d0:	2b00      	cmp	r3, #0
   193d2:	d105      	bne.n	193e0 <prvTraceGetObjectHandle+0x20>
   193d4:	4b59      	ldr	r3, [pc, #356]	; (1953c <prvTraceGetObjectHandle+0x17c>)
   193d6:	0018      	movs	r0, r3
   193d8:	4b59      	ldr	r3, [pc, #356]	; (19540 <prvTraceGetObjectHandle+0x180>)
   193da:	4798      	blx	r3
   193dc:	2300      	movs	r3, #0
   193de:	e0a7      	b.n	19530 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   193e0:	1dfb      	adds	r3, r7, #7
   193e2:	781b      	ldrb	r3, [r3, #0]
   193e4:	2b08      	cmp	r3, #8
   193e6:	d905      	bls.n	193f4 <prvTraceGetObjectHandle+0x34>
   193e8:	4b56      	ldr	r3, [pc, #344]	; (19544 <prvTraceGetObjectHandle+0x184>)
   193ea:	0018      	movs	r0, r3
   193ec:	4b54      	ldr	r3, [pc, #336]	; (19540 <prvTraceGetObjectHandle+0x180>)
   193ee:	4798      	blx	r3
   193f0:	2300      	movs	r3, #0
   193f2:	e09d      	b.n	19530 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   193f4:	f3ef 8310 	mrs	r3, PRIMASK
   193f8:	60fb      	str	r3, [r7, #12]
  return(result);
   193fa:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   193fc:	61bb      	str	r3, [r7, #24]
   193fe:	2301      	movs	r3, #1
   19400:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19402:	693b      	ldr	r3, [r7, #16]
   19404:	f383 8810 	msr	PRIMASK, r3
   19408:	4b4f      	ldr	r3, [pc, #316]	; (19548 <prvTraceGetObjectHandle+0x188>)
   1940a:	681b      	ldr	r3, [r3, #0]
   1940c:	1c5a      	adds	r2, r3, #1
   1940e:	4b4e      	ldr	r3, [pc, #312]	; (19548 <prvTraceGetObjectHandle+0x188>)
   19410:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   19412:	1dfb      	adds	r3, r7, #7
   19414:	781a      	ldrb	r2, [r3, #0]
   19416:	4b4d      	ldr	r3, [pc, #308]	; (1954c <prvTraceGetObjectHandle+0x18c>)
   19418:	0052      	lsls	r2, r2, #1
   1941a:	5ad3      	ldrh	r3, [r2, r3]
   1941c:	001a      	movs	r2, r3
   1941e:	4b4c      	ldr	r3, [pc, #304]	; (19550 <prvTraceGetObjectHandle+0x190>)
   19420:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   19422:	4b4b      	ldr	r3, [pc, #300]	; (19550 <prvTraceGetObjectHandle+0x190>)
   19424:	681b      	ldr	r3, [r3, #0]
   19426:	4a49      	ldr	r2, [pc, #292]	; (1954c <prvTraceGetObjectHandle+0x18c>)
   19428:	2148      	movs	r1, #72	; 0x48
   1942a:	18d3      	adds	r3, r2, r3
   1942c:	185b      	adds	r3, r3, r1
   1942e:	781b      	ldrb	r3, [r3, #0]
   19430:	2b00      	cmp	r3, #0
   19432:	d117      	bne.n	19464 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   19434:	4b46      	ldr	r3, [pc, #280]	; (19550 <prvTraceGetObjectHandle+0x190>)
   19436:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   19438:	4b45      	ldr	r3, [pc, #276]	; (19550 <prvTraceGetObjectHandle+0x190>)
   1943a:	681b      	ldr	r3, [r3, #0]
   1943c:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1943e:	1dfb      	adds	r3, r7, #7
   19440:	781b      	ldrb	r3, [r3, #0]
   19442:	4842      	ldr	r0, [pc, #264]	; (1954c <prvTraceGetObjectHandle+0x18c>)
   19444:	3308      	adds	r3, #8
   19446:	005b      	lsls	r3, r3, #1
   19448:	18c3      	adds	r3, r0, r3
   1944a:	3302      	adds	r3, #2
   1944c:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1944e:	b2db      	uxtb	r3, r3
   19450:	1acb      	subs	r3, r1, r3
   19452:	b2db      	uxtb	r3, r3
   19454:	3301      	adds	r3, #1
   19456:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   19458:	4b3c      	ldr	r3, [pc, #240]	; (1954c <prvTraceGetObjectHandle+0x18c>)
   1945a:	2148      	movs	r1, #72	; 0x48
   1945c:	189b      	adds	r3, r3, r2
   1945e:	185b      	adds	r3, r3, r1
   19460:	1c02      	adds	r2, r0, #0
   19462:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   19464:	4b3a      	ldr	r3, [pc, #232]	; (19550 <prvTraceGetObjectHandle+0x190>)
   19466:	681a      	ldr	r2, [r3, #0]
   19468:	231f      	movs	r3, #31
   1946a:	18fb      	adds	r3, r7, r3
   1946c:	4937      	ldr	r1, [pc, #220]	; (1954c <prvTraceGetObjectHandle+0x18c>)
   1946e:	2048      	movs	r0, #72	; 0x48
   19470:	188a      	adds	r2, r1, r2
   19472:	1812      	adds	r2, r2, r0
   19474:	7812      	ldrb	r2, [r2, #0]
   19476:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19478:	1dfb      	adds	r3, r7, #7
   1947a:	781a      	ldrb	r2, [r3, #0]
   1947c:	4b33      	ldr	r3, [pc, #204]	; (1954c <prvTraceGetObjectHandle+0x18c>)
   1947e:	0052      	lsls	r2, r2, #1
   19480:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   19482:	1dfb      	adds	r3, r7, #7
   19484:	781b      	ldrb	r3, [r3, #0]
   19486:	4931      	ldr	r1, [pc, #196]	; (1954c <prvTraceGetObjectHandle+0x18c>)
   19488:	3310      	adds	r3, #16
   1948a:	005b      	lsls	r3, r3, #1
   1948c:	18cb      	adds	r3, r1, r3
   1948e:	3304      	adds	r3, #4
   19490:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19492:	429a      	cmp	r2, r3
   19494:	d90d      	bls.n	194b2 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19496:	1dfb      	adds	r3, r7, #7
   19498:	781b      	ldrb	r3, [r3, #0]
   1949a:	0018      	movs	r0, r3
   1949c:	4b2d      	ldr	r3, [pc, #180]	; (19554 <prvTraceGetObjectHandle+0x194>)
   1949e:	4798      	blx	r3
   194a0:	0003      	movs	r3, r0
   194a2:	0018      	movs	r0, r3
   194a4:	4b26      	ldr	r3, [pc, #152]	; (19540 <prvTraceGetObjectHandle+0x180>)
   194a6:	4798      	blx	r3
		handle = 0;
   194a8:	231f      	movs	r3, #31
   194aa:	18fb      	adds	r3, r7, r3
   194ac:	2200      	movs	r2, #0
   194ae:	701a      	strb	r2, [r3, #0]
   194b0:	e031      	b.n	19516 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   194b2:	1dfb      	adds	r3, r7, #7
   194b4:	781b      	ldrb	r3, [r3, #0]
   194b6:	4a25      	ldr	r2, [pc, #148]	; (1954c <prvTraceGetObjectHandle+0x18c>)
   194b8:	0059      	lsls	r1, r3, #1
   194ba:	5a8a      	ldrh	r2, [r1, r2]
   194bc:	3201      	adds	r2, #1
   194be:	b291      	uxth	r1, r2
   194c0:	4a22      	ldr	r2, [pc, #136]	; (1954c <prvTraceGetObjectHandle+0x18c>)
   194c2:	005b      	lsls	r3, r3, #1
   194c4:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   194c6:	1dfb      	adds	r3, r7, #7
   194c8:	781a      	ldrb	r2, [r3, #0]
   194ca:	4b20      	ldr	r3, [pc, #128]	; (1954c <prvTraceGetObjectHandle+0x18c>)
   194cc:	0052      	lsls	r2, r2, #1
   194ce:	5ad3      	ldrh	r3, [r2, r3]
   194d0:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   194d2:	1dfb      	adds	r3, r7, #7
   194d4:	781b      	ldrb	r3, [r3, #0]
   194d6:	4a1d      	ldr	r2, [pc, #116]	; (1954c <prvTraceGetObjectHandle+0x18c>)
   194d8:	3308      	adds	r3, #8
   194da:	005b      	lsls	r3, r3, #1
   194dc:	18d3      	adds	r3, r2, r3
   194de:	3302      	adds	r3, #2
   194e0:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   194e2:	1acb      	subs	r3, r1, r3
   194e4:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   194e6:	1dfb      	adds	r3, r7, #7
   194e8:	781b      	ldrb	r3, [r3, #0]
   194ea:	4a18      	ldr	r2, [pc, #96]	; (1954c <prvTraceGetObjectHandle+0x18c>)
   194ec:	3318      	adds	r3, #24
   194ee:	005b      	lsls	r3, r3, #1
   194f0:	18d3      	adds	r3, r2, r3
   194f2:	3306      	adds	r3, #6
   194f4:	881b      	ldrh	r3, [r3, #0]
   194f6:	001a      	movs	r2, r3
		if (hndCount >
   194f8:	697b      	ldr	r3, [r7, #20]
   194fa:	429a      	cmp	r2, r3
   194fc:	da0b      	bge.n	19516 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   194fe:	1dfb      	adds	r3, r7, #7
   19500:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   19502:	697a      	ldr	r2, [r7, #20]
   19504:	b2d2      	uxtb	r2, r2
   19506:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19508:	4a10      	ldr	r2, [pc, #64]	; (1954c <prvTraceGetObjectHandle+0x18c>)
   1950a:	3318      	adds	r3, #24
   1950c:	005b      	lsls	r3, r3, #1
   1950e:	18d3      	adds	r3, r2, r3
   19510:	3306      	adds	r3, #6
   19512:	1c0a      	adds	r2, r1, #0
   19514:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   19516:	4b0c      	ldr	r3, [pc, #48]	; (19548 <prvTraceGetObjectHandle+0x188>)
   19518:	681b      	ldr	r3, [r3, #0]
   1951a:	1e5a      	subs	r2, r3, #1
   1951c:	4b0a      	ldr	r3, [pc, #40]	; (19548 <prvTraceGetObjectHandle+0x188>)
   1951e:	601a      	str	r2, [r3, #0]
   19520:	69bb      	ldr	r3, [r7, #24]
   19522:	60bb      	str	r3, [r7, #8]
   19524:	68bb      	ldr	r3, [r7, #8]
   19526:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1952a:	231f      	movs	r3, #31
   1952c:	18fb      	adds	r3, r7, r3
   1952e:	781b      	ldrb	r3, [r3, #0]
}
   19530:	0018      	movs	r0, r3
   19532:	46bd      	mov	sp, r7
   19534:	b008      	add	sp, #32
   19536:	bd80      	pop	{r7, pc}
   19538:	20000c98 	.word	0x20000c98
   1953c:	00036f28 	.word	0x00036f28
   19540:	000196dd 	.word	0x000196dd
   19544:	00037b08 	.word	0x00037b08
   19548:	20000bf0 	.word	0x20000bf0
   1954c:	20000c08 	.word	0x20000c08
   19550:	20000c9c 	.word	0x20000c9c
   19554:	000183fd 	.word	0x000183fd

00019558 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   19558:	b590      	push	{r4, r7, lr}
   1955a:	b085      	sub	sp, #20
   1955c:	af00      	add	r7, sp, #0
   1955e:	0002      	movs	r2, r0
   19560:	1dfb      	adds	r3, r7, #7
   19562:	701a      	strb	r2, [r3, #0]
   19564:	1dbb      	adds	r3, r7, #6
   19566:	1c0a      	adds	r2, r1, #0
   19568:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1956a:	230e      	movs	r3, #14
   1956c:	18fc      	adds	r4, r7, r3
   1956e:	1dfb      	adds	r3, r7, #7
   19570:	781a      	ldrb	r2, [r3, #0]
   19572:	1dbb      	adds	r3, r7, #6
   19574:	781b      	ldrb	r3, [r3, #0]
   19576:	0011      	movs	r1, r2
   19578:	0018      	movs	r0, r3
   1957a:	4b09      	ldr	r3, [pc, #36]	; (195a0 <prvMarkObjectAsUsed+0x48>)
   1957c:	4798      	blx	r3
   1957e:	0003      	movs	r3, r0
   19580:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   19582:	4b08      	ldr	r3, [pc, #32]	; (195a4 <prvMarkObjectAsUsed+0x4c>)
   19584:	681a      	ldr	r2, [r3, #0]
   19586:	230e      	movs	r3, #14
   19588:	18fb      	adds	r3, r7, r3
   1958a:	881b      	ldrh	r3, [r3, #0]
   1958c:	219c      	movs	r1, #156	; 0x9c
   1958e:	18d3      	adds	r3, r2, r3
   19590:	185b      	adds	r3, r3, r1
   19592:	2201      	movs	r2, #1
   19594:	701a      	strb	r2, [r3, #0]
}
   19596:	46c0      	nop			; (mov r8, r8)
   19598:	46bd      	mov	sp, r7
   1959a:	b005      	add	sp, #20
   1959c:	bd90      	pop	{r4, r7, pc}
   1959e:	46c0      	nop			; (mov r8, r8)
   195a0:	000192e9 	.word	0x000192e9
   195a4:	20000c98 	.word	0x20000c98

000195a8 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   195a8:	b580      	push	{r7, lr}
   195aa:	b086      	sub	sp, #24
   195ac:	af00      	add	r7, sp, #0
   195ae:	60f8      	str	r0, [r7, #12]
   195b0:	60b9      	str	r1, [r7, #8]
   195b2:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   195b4:	2300      	movs	r3, #0
   195b6:	617b      	str	r3, [r7, #20]
   195b8:	e010      	b.n	195dc <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   195ba:	68fa      	ldr	r2, [r7, #12]
   195bc:	697b      	ldr	r3, [r7, #20]
   195be:	18d3      	adds	r3, r2, r3
   195c0:	68b9      	ldr	r1, [r7, #8]
   195c2:	697a      	ldr	r2, [r7, #20]
   195c4:	188a      	adds	r2, r1, r2
   195c6:	7812      	ldrb	r2, [r2, #0]
   195c8:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   195ca:	68ba      	ldr	r2, [r7, #8]
   195cc:	697b      	ldr	r3, [r7, #20]
   195ce:	18d3      	adds	r3, r2, r3
   195d0:	781b      	ldrb	r3, [r3, #0]
   195d2:	2b00      	cmp	r3, #0
   195d4:	d007      	beq.n	195e6 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   195d6:	697b      	ldr	r3, [r7, #20]
   195d8:	3301      	adds	r3, #1
   195da:	617b      	str	r3, [r7, #20]
   195dc:	697a      	ldr	r2, [r7, #20]
   195de:	687b      	ldr	r3, [r7, #4]
   195e0:	429a      	cmp	r2, r3
   195e2:	d3ea      	bcc.n	195ba <prvStrncpy+0x12>
			break;
	}
}
   195e4:	e000      	b.n	195e8 <prvStrncpy+0x40>
			break;
   195e6:	46c0      	nop			; (mov r8, r8)
}
   195e8:	46c0      	nop			; (mov r8, r8)
   195ea:	46bd      	mov	sp, r7
   195ec:	b006      	add	sp, #24
   195ee:	bd80      	pop	{r7, pc}

000195f0 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   195f0:	b580      	push	{r7, lr}
   195f2:	b082      	sub	sp, #8
   195f4:	af00      	add	r7, sp, #0
   195f6:	603a      	str	r2, [r7, #0]
   195f8:	1dfb      	adds	r3, r7, #7
   195fa:	1c02      	adds	r2, r0, #0
   195fc:	701a      	strb	r2, [r3, #0]
   195fe:	1dbb      	adds	r3, r7, #6
   19600:	1c0a      	adds	r2, r1, #0
   19602:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   19604:	683b      	ldr	r3, [r7, #0]
   19606:	2b00      	cmp	r3, #0
   19608:	d104      	bne.n	19614 <prvTraceSetObjectName+0x24>
   1960a:	4b2a      	ldr	r3, [pc, #168]	; (196b4 <prvTraceSetObjectName+0xc4>)
   1960c:	0018      	movs	r0, r3
   1960e:	4b2a      	ldr	r3, [pc, #168]	; (196b8 <prvTraceSetObjectName+0xc8>)
   19610:	4798      	blx	r3
   19612:	e04b      	b.n	196ac <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   19614:	1dfb      	adds	r3, r7, #7
   19616:	781b      	ldrb	r3, [r3, #0]
   19618:	2b08      	cmp	r3, #8
   1961a:	d904      	bls.n	19626 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1961c:	4b27      	ldr	r3, [pc, #156]	; (196bc <prvTraceSetObjectName+0xcc>)
   1961e:	0018      	movs	r0, r3
   19620:	4b25      	ldr	r3, [pc, #148]	; (196b8 <prvTraceSetObjectName+0xc8>)
   19622:	4798      	blx	r3
		return;
   19624:	e042      	b.n	196ac <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   19626:	1dbb      	adds	r3, r7, #6
   19628:	781b      	ldrb	r3, [r3, #0]
   1962a:	2b00      	cmp	r3, #0
   1962c:	d104      	bne.n	19638 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1962e:	4b24      	ldr	r3, [pc, #144]	; (196c0 <prvTraceSetObjectName+0xd0>)
   19630:	0018      	movs	r0, r3
   19632:	4b21      	ldr	r3, [pc, #132]	; (196b8 <prvTraceSetObjectName+0xc8>)
   19634:	4798      	blx	r3
		return;
   19636:	e039      	b.n	196ac <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   19638:	4b22      	ldr	r3, [pc, #136]	; (196c4 <prvTraceSetObjectName+0xd4>)
   1963a:	681a      	ldr	r2, [r3, #0]
   1963c:	1dfb      	adds	r3, r7, #7
   1963e:	781b      	ldrb	r3, [r3, #0]
   19640:	2164      	movs	r1, #100	; 0x64
   19642:	18d3      	adds	r3, r2, r3
   19644:	185b      	adds	r3, r3, r1
   19646:	781b      	ldrb	r3, [r3, #0]
   19648:	1dba      	adds	r2, r7, #6
   1964a:	7812      	ldrb	r2, [r2, #0]
   1964c:	429a      	cmp	r2, r3
   1964e:	d909      	bls.n	19664 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19650:	1dfb      	adds	r3, r7, #7
   19652:	781b      	ldrb	r3, [r3, #0]
   19654:	0018      	movs	r0, r3
   19656:	4b1c      	ldr	r3, [pc, #112]	; (196c8 <prvTraceSetObjectName+0xd8>)
   19658:	4798      	blx	r3
   1965a:	0003      	movs	r3, r0
   1965c:	0018      	movs	r0, r3
   1965e:	4b16      	ldr	r3, [pc, #88]	; (196b8 <prvTraceSetObjectName+0xc8>)
   19660:	4798      	blx	r3
   19662:	e023      	b.n	196ac <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   19664:	1dfb      	adds	r3, r7, #7
   19666:	781a      	ldrb	r2, [r3, #0]
   19668:	1dbb      	adds	r3, r7, #6
   1966a:	781b      	ldrb	r3, [r3, #0]
   1966c:	0011      	movs	r1, r2
   1966e:	0018      	movs	r0, r3
   19670:	4b16      	ldr	r3, [pc, #88]	; (196cc <prvTraceSetObjectName+0xdc>)
   19672:	4798      	blx	r3
   19674:	0003      	movs	r3, r0
   19676:	001a      	movs	r2, r3
   19678:	4b15      	ldr	r3, [pc, #84]	; (196d0 <prvTraceSetObjectName+0xe0>)
   1967a:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1967c:	4b15      	ldr	r3, [pc, #84]	; (196d4 <prvTraceSetObjectName+0xe4>)
   1967e:	681b      	ldr	r3, [r3, #0]
   19680:	2b00      	cmp	r3, #0
   19682:	d113      	bne.n	196ac <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19684:	4b0f      	ldr	r3, [pc, #60]	; (196c4 <prvTraceSetObjectName+0xd4>)
   19686:	681a      	ldr	r2, [r3, #0]
   19688:	4b11      	ldr	r3, [pc, #68]	; (196d0 <prvTraceSetObjectName+0xe0>)
   1968a:	881b      	ldrh	r3, [r3, #0]
   1968c:	3398      	adds	r3, #152	; 0x98
   1968e:	18d3      	adds	r3, r2, r3
   19690:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   19692:	4b0c      	ldr	r3, [pc, #48]	; (196c4 <prvTraceSetObjectName+0xd4>)
   19694:	681a      	ldr	r2, [r3, #0]
   19696:	1dfb      	adds	r3, r7, #7
   19698:	781b      	ldrb	r3, [r3, #0]
   1969a:	2170      	movs	r1, #112	; 0x70
   1969c:	18d3      	adds	r3, r2, r3
   1969e:	185b      	adds	r3, r3, r1
   196a0:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   196a2:	001a      	movs	r2, r3
   196a4:	683b      	ldr	r3, [r7, #0]
   196a6:	0019      	movs	r1, r3
   196a8:	4b0b      	ldr	r3, [pc, #44]	; (196d8 <prvTraceSetObjectName+0xe8>)
   196aa:	4798      	blx	r3
		}
	}
}
   196ac:	46bd      	mov	sp, r7
   196ae:	b002      	add	sp, #8
   196b0:	bd80      	pop	{r7, pc}
   196b2:	46c0      	nop			; (mov r8, r8)
   196b4:	00037c0c 	.word	0x00037c0c
   196b8:	000196dd 	.word	0x000196dd
   196bc:	00037c40 	.word	0x00037c40
   196c0:	00037c70 	.word	0x00037c70
   196c4:	20000c98 	.word	0x20000c98
   196c8:	000183fd 	.word	0x000183fd
   196cc:	000192e9 	.word	0x000192e9
   196d0:	20000ca0 	.word	0x20000ca0
   196d4:	20000bf8 	.word	0x20000bf8
   196d8:	000195a9 	.word	0x000195a9

000196dc <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   196dc:	b580      	push	{r7, lr}
   196de:	b082      	sub	sp, #8
   196e0:	af00      	add	r7, sp, #0
   196e2:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   196e4:	4b11      	ldr	r3, [pc, #68]	; (1972c <prvTraceError+0x50>)
   196e6:	681b      	ldr	r3, [r3, #0]
   196e8:	2b00      	cmp	r3, #0
   196ea:	d001      	beq.n	196f0 <prvTraceError+0x14>
	{
		vTraceStop();
   196ec:	4b10      	ldr	r3, [pc, #64]	; (19730 <prvTraceError+0x54>)
   196ee:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   196f0:	4b10      	ldr	r3, [pc, #64]	; (19734 <prvTraceError+0x58>)
   196f2:	681b      	ldr	r3, [r3, #0]
   196f4:	2b00      	cmp	r3, #0
   196f6:	d115      	bne.n	19724 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   196f8:	4b0e      	ldr	r3, [pc, #56]	; (19734 <prvTraceError+0x58>)
   196fa:	687a      	ldr	r2, [r7, #4]
   196fc:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   196fe:	4b0b      	ldr	r3, [pc, #44]	; (1972c <prvTraceError+0x50>)
   19700:	681b      	ldr	r3, [r3, #0]
   19702:	2b00      	cmp	r3, #0
   19704:	d00e      	beq.n	19724 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   19706:	4b09      	ldr	r3, [pc, #36]	; (1972c <prvTraceError+0x50>)
   19708:	681b      	ldr	r3, [r3, #0]
   1970a:	4a0b      	ldr	r2, [pc, #44]	; (19738 <prvTraceError+0x5c>)
   1970c:	1898      	adds	r0, r3, r2
   1970e:	4b09      	ldr	r3, [pc, #36]	; (19734 <prvTraceError+0x58>)
   19710:	681b      	ldr	r3, [r3, #0]
   19712:	2250      	movs	r2, #80	; 0x50
   19714:	0019      	movs	r1, r3
   19716:	4b09      	ldr	r3, [pc, #36]	; (1973c <prvTraceError+0x60>)
   19718:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1971a:	4b04      	ldr	r3, [pc, #16]	; (1972c <prvTraceError+0x50>)
   1971c:	681b      	ldr	r3, [r3, #0]
   1971e:	4a08      	ldr	r2, [pc, #32]	; (19740 <prvTraceError+0x64>)
   19720:	2101      	movs	r1, #1
   19722:	5099      	str	r1, [r3, r2]
		}
	}
}
   19724:	46c0      	nop			; (mov r8, r8)
   19726:	46bd      	mov	sp, r7
   19728:	b002      	add	sp, #8
   1972a:	bd80      	pop	{r7, pc}
   1972c:	20000c98 	.word	0x20000c98
   19730:	000185a1 	.word	0x000185a1
   19734:	20000bf8 	.word	0x20000bf8
   19738:	000006bc 	.word	0x000006bc
   1973c:	000195a9 	.word	0x000195a9
   19740:	000006b4 	.word	0x000006b4

00019744 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   19744:	b580      	push	{r7, lr}
   19746:	b086      	sub	sp, #24
   19748:	af00      	add	r7, sp, #0
   1974a:	0002      	movs	r2, r0
   1974c:	1dfb      	adds	r3, r7, #7
   1974e:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   19750:	2300      	movs	r3, #0
   19752:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   19754:	2300      	movs	r3, #0
   19756:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   19758:	1dfb      	adds	r3, r7, #7
   1975a:	781b      	ldrb	r3, [r3, #0]
   1975c:	2b00      	cmp	r3, #0
   1975e:	d000      	beq.n	19762 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   19760:	e089      	b.n	19876 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   19762:	4b49      	ldr	r3, [pc, #292]	; (19888 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   19764:	0018      	movs	r0, r3
   19766:	4b49      	ldr	r3, [pc, #292]	; (1988c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   19768:	4798      	blx	r3
   1976a:	e08a      	b.n	19882 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1976c:	4b48      	ldr	r3, [pc, #288]	; (19890 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1976e:	681b      	ldr	r3, [r3, #0]
   19770:	69da      	ldr	r2, [r3, #28]
   19772:	697b      	ldr	r3, [r7, #20]
   19774:	18d3      	adds	r3, r2, r3
   19776:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   19778:	4b45      	ldr	r3, [pc, #276]	; (19890 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1977a:	6819      	ldr	r1, [r3, #0]
   1977c:	693b      	ldr	r3, [r7, #16]
   1977e:	009a      	lsls	r2, r3, #2
   19780:	23e2      	movs	r3, #226	; 0xe2
   19782:	00db      	lsls	r3, r3, #3
   19784:	188a      	adds	r2, r1, r2
   19786:	18d3      	adds	r3, r2, r3
   19788:	781b      	ldrb	r3, [r3, #0]
   1978a:	2b98      	cmp	r3, #152	; 0x98
   1978c:	d934      	bls.n	197f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1978e:	4b40      	ldr	r3, [pc, #256]	; (19890 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19790:	6819      	ldr	r1, [r3, #0]
   19792:	693b      	ldr	r3, [r7, #16]
   19794:	009a      	lsls	r2, r3, #2
   19796:	23e2      	movs	r3, #226	; 0xe2
   19798:	00db      	lsls	r3, r3, #3
   1979a:	188a      	adds	r2, r1, r2
   1979c:	18d3      	adds	r3, r2, r3
   1979e:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   197a0:	2ba7      	cmp	r3, #167	; 0xa7
   197a2:	d829      	bhi.n	197f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   197a4:	4b3a      	ldr	r3, [pc, #232]	; (19890 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   197a6:	6819      	ldr	r1, [r3, #0]
   197a8:	693b      	ldr	r3, [r7, #16]
   197aa:	009a      	lsls	r2, r3, #2
   197ac:	23e2      	movs	r3, #226	; 0xe2
   197ae:	00db      	lsls	r3, r3, #3
   197b0:	188a      	adds	r2, r1, r2
   197b2:	18d3      	adds	r3, r2, r3
   197b4:	781a      	ldrb	r2, [r3, #0]
   197b6:	230f      	movs	r3, #15
   197b8:	18fb      	adds	r3, r7, r3
   197ba:	3268      	adds	r2, #104	; 0x68
   197bc:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   197be:	230f      	movs	r3, #15
   197c0:	18fb      	adds	r3, r7, r3
   197c2:	781a      	ldrb	r2, [r3, #0]
   197c4:	693b      	ldr	r3, [r7, #16]
   197c6:	18d2      	adds	r2, r2, r3
   197c8:	4b31      	ldr	r3, [pc, #196]	; (19890 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   197ca:	681b      	ldr	r3, [r3, #0]
   197cc:	699b      	ldr	r3, [r3, #24]
   197ce:	429a      	cmp	r2, r3
   197d0:	d24d      	bcs.n	1986e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   197d2:	4b2f      	ldr	r3, [pc, #188]	; (19890 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   197d4:	681a      	ldr	r2, [r3, #0]
   197d6:	693b      	ldr	r3, [r7, #16]
   197d8:	009b      	lsls	r3, r3, #2
   197da:	21e2      	movs	r1, #226	; 0xe2
   197dc:	00c9      	lsls	r1, r1, #3
   197de:	468c      	mov	ip, r1
   197e0:	4463      	add	r3, ip
   197e2:	18d0      	adds	r0, r2, r3
   197e4:	230f      	movs	r3, #15
   197e6:	18fb      	adds	r3, r7, r3
   197e8:	781b      	ldrb	r3, [r3, #0]
   197ea:	3301      	adds	r3, #1
   197ec:	009b      	lsls	r3, r3, #2
   197ee:	001a      	movs	r2, r3
   197f0:	2100      	movs	r1, #0
   197f2:	4b28      	ldr	r3, [pc, #160]	; (19894 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   197f4:	4798      	blx	r3
		{
   197f6:	e03a      	b.n	1986e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   197f8:	4b25      	ldr	r3, [pc, #148]	; (19890 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   197fa:	6819      	ldr	r1, [r3, #0]
   197fc:	693b      	ldr	r3, [r7, #16]
   197fe:	009a      	lsls	r2, r3, #2
   19800:	23e2      	movs	r3, #226	; 0xe2
   19802:	00db      	lsls	r3, r3, #3
   19804:	188a      	adds	r2, r1, r2
   19806:	18d3      	adds	r3, r2, r3
   19808:	781b      	ldrb	r3, [r3, #0]
   1980a:	2b01      	cmp	r3, #1
   1980c:	d130      	bne.n	19870 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1980e:	693b      	ldr	r3, [r7, #16]
   19810:	1c5a      	adds	r2, r3, #1
   19812:	4b1f      	ldr	r3, [pc, #124]	; (19890 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19814:	681b      	ldr	r3, [r3, #0]
   19816:	699b      	ldr	r3, [r3, #24]
   19818:	429a      	cmp	r2, r3
   1981a:	d20e      	bcs.n	1983a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1981c:	4b1c      	ldr	r3, [pc, #112]	; (19890 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1981e:	681a      	ldr	r2, [r3, #0]
   19820:	693b      	ldr	r3, [r7, #16]
   19822:	009b      	lsls	r3, r3, #2
   19824:	21e2      	movs	r1, #226	; 0xe2
   19826:	00c9      	lsls	r1, r1, #3
   19828:	468c      	mov	ip, r1
   1982a:	4463      	add	r3, ip
   1982c:	18d3      	adds	r3, r2, r3
   1982e:	2208      	movs	r2, #8
   19830:	2100      	movs	r1, #0
   19832:	0018      	movs	r0, r3
   19834:	4b17      	ldr	r3, [pc, #92]	; (19894 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19836:	4798      	blx	r3
   19838:	e01a      	b.n	19870 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1983a:	4b15      	ldr	r3, [pc, #84]	; (19890 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1983c:	681b      	ldr	r3, [r3, #0]
   1983e:	22e2      	movs	r2, #226	; 0xe2
   19840:	00d2      	lsls	r2, r2, #3
   19842:	4694      	mov	ip, r2
   19844:	4463      	add	r3, ip
   19846:	2204      	movs	r2, #4
   19848:	2100      	movs	r1, #0
   1984a:	0018      	movs	r0, r3
   1984c:	4b11      	ldr	r3, [pc, #68]	; (19894 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1984e:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   19850:	4b0f      	ldr	r3, [pc, #60]	; (19890 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19852:	681a      	ldr	r2, [r3, #0]
   19854:	693b      	ldr	r3, [r7, #16]
   19856:	009b      	lsls	r3, r3, #2
   19858:	21e2      	movs	r1, #226	; 0xe2
   1985a:	00c9      	lsls	r1, r1, #3
   1985c:	468c      	mov	ip, r1
   1985e:	4463      	add	r3, ip
   19860:	18d3      	adds	r3, r2, r3
   19862:	2204      	movs	r2, #4
   19864:	2100      	movs	r1, #0
   19866:	0018      	movs	r0, r3
   19868:	4b0a      	ldr	r3, [pc, #40]	; (19894 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1986a:	4798      	blx	r3
   1986c:	e000      	b.n	19870 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1986e:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   19870:	697b      	ldr	r3, [r7, #20]
   19872:	3301      	adds	r3, #1
   19874:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   19876:	1dfb      	adds	r3, r7, #7
   19878:	781a      	ldrb	r2, [r3, #0]
   1987a:	697b      	ldr	r3, [r7, #20]
   1987c:	429a      	cmp	r2, r3
   1987e:	d900      	bls.n	19882 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   19880:	e774      	b.n	1976c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   19882:	46bd      	mov	sp, r7
   19884:	b006      	add	sp, #24
   19886:	bd80      	pop	{r7, pc}
   19888:	00037cd0 	.word	0x00037cd0
   1988c:	000196dd 	.word	0x000196dd
   19890:	20000c98 	.word	0x20000c98
   19894:	000346df 	.word	0x000346df

00019898 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   19898:	b580      	push	{r7, lr}
   1989a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1989c:	4b12      	ldr	r3, [pc, #72]	; (198e8 <prvTraceUpdateCounters+0x50>)
   1989e:	681b      	ldr	r3, [r3, #0]
   198a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   198a2:	2b00      	cmp	r3, #0
   198a4:	d01c      	beq.n	198e0 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   198a6:	4b10      	ldr	r3, [pc, #64]	; (198e8 <prvTraceUpdateCounters+0x50>)
   198a8:	681b      	ldr	r3, [r3, #0]
   198aa:	695a      	ldr	r2, [r3, #20]
   198ac:	3201      	adds	r2, #1
   198ae:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   198b0:	4b0d      	ldr	r3, [pc, #52]	; (198e8 <prvTraceUpdateCounters+0x50>)
   198b2:	681b      	ldr	r3, [r3, #0]
   198b4:	69da      	ldr	r2, [r3, #28]
   198b6:	3201      	adds	r2, #1
   198b8:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   198ba:	4b0b      	ldr	r3, [pc, #44]	; (198e8 <prvTraceUpdateCounters+0x50>)
   198bc:	681b      	ldr	r3, [r3, #0]
   198be:	69da      	ldr	r2, [r3, #28]
   198c0:	232c      	movs	r3, #44	; 0x2c
   198c2:	33ff      	adds	r3, #255	; 0xff
   198c4:	429a      	cmp	r2, r3
   198c6:	d907      	bls.n	198d8 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   198c8:	4b07      	ldr	r3, [pc, #28]	; (198e8 <prvTraceUpdateCounters+0x50>)
   198ca:	681b      	ldr	r3, [r3, #0]
   198cc:	2201      	movs	r2, #1
   198ce:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   198d0:	4b05      	ldr	r3, [pc, #20]	; (198e8 <prvTraceUpdateCounters+0x50>)
   198d2:	681b      	ldr	r3, [r3, #0]
   198d4:	2200      	movs	r2, #0
   198d6:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   198d8:	2001      	movs	r0, #1
   198da:	4b04      	ldr	r3, [pc, #16]	; (198ec <prvTraceUpdateCounters+0x54>)
   198dc:	4798      	blx	r3
   198de:	e000      	b.n	198e2 <prvTraceUpdateCounters+0x4a>
		return;
   198e0:	46c0      	nop			; (mov r8, r8)
#endif
}
   198e2:	46bd      	mov	sp, r7
   198e4:	bd80      	pop	{r7, pc}
   198e6:	46c0      	nop			; (mov r8, r8)
   198e8:	20000c98 	.word	0x20000c98
   198ec:	00019745 	.word	0x00019745

000198f0 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   198f0:	b5b0      	push	{r4, r5, r7, lr}
   198f2:	b086      	sub	sp, #24
   198f4:	af00      	add	r7, sp, #0
   198f6:	0002      	movs	r2, r0
   198f8:	1dbb      	adds	r3, r7, #6
   198fa:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   198fc:	2300      	movs	r3, #0
   198fe:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   19900:	2300      	movs	r3, #0
   19902:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   19904:	2300      	movs	r3, #0
   19906:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   19908:	1dbb      	adds	r3, r7, #6
   1990a:	881b      	ldrh	r3, [r3, #0]
   1990c:	2bff      	cmp	r3, #255	; 0xff
   1990e:	d00a      	beq.n	19926 <prvTraceGetDTS+0x36>
   19910:	1dbb      	adds	r3, r7, #6
   19912:	881b      	ldrh	r3, [r3, #0]
   19914:	4a60      	ldr	r2, [pc, #384]	; (19a98 <prvTraceGetDTS+0x1a8>)
   19916:	4293      	cmp	r3, r2
   19918:	d005      	beq.n	19926 <prvTraceGetDTS+0x36>
   1991a:	4b60      	ldr	r3, [pc, #384]	; (19a9c <prvTraceGetDTS+0x1ac>)
   1991c:	0018      	movs	r0, r3
   1991e:	4b60      	ldr	r3, [pc, #384]	; (19aa0 <prvTraceGetDTS+0x1b0>)
   19920:	4798      	blx	r3
   19922:	2300      	movs	r3, #0
   19924:	e0b3      	b.n	19a8e <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   19926:	4b5f      	ldr	r3, [pc, #380]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   19928:	681b      	ldr	r3, [r3, #0]
   1992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1992c:	2b00      	cmp	r3, #0
   1992e:	d118      	bne.n	19962 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   19930:	4b5d      	ldr	r3, [pc, #372]	; (19aa8 <prvTraceGetDTS+0x1b8>)
   19932:	681b      	ldr	r3, [r3, #0]
   19934:	2b00      	cmp	r3, #0
   19936:	d006      	beq.n	19946 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   19938:	4b5a      	ldr	r3, [pc, #360]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   1993a:	681b      	ldr	r3, [r3, #0]
   1993c:	4a5a      	ldr	r2, [pc, #360]	; (19aa8 <prvTraceGetDTS+0x1b8>)
   1993e:	6812      	ldr	r2, [r2, #0]
   19940:	0892      	lsrs	r2, r2, #2
   19942:	625a      	str	r2, [r3, #36]	; 0x24
   19944:	e00d      	b.n	19962 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   19946:	4b59      	ldr	r3, [pc, #356]	; (19aac <prvTraceGetDTS+0x1bc>)
   19948:	681a      	ldr	r2, [r3, #0]
   1994a:	4b59      	ldr	r3, [pc, #356]	; (19ab0 <prvTraceGetDTS+0x1c0>)
   1994c:	681b      	ldr	r3, [r3, #0]
   1994e:	429a      	cmp	r2, r3
   19950:	d007      	beq.n	19962 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   19952:	4b54      	ldr	r3, [pc, #336]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   19954:	681c      	ldr	r4, [r3, #0]
   19956:	2000      	movs	r0, #0
   19958:	4b56      	ldr	r3, [pc, #344]	; (19ab4 <prvTraceGetDTS+0x1c4>)
   1995a:	4798      	blx	r3
   1995c:	0003      	movs	r3, r0
   1995e:	089b      	lsrs	r3, r3, #2
   19960:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   19962:	230c      	movs	r3, #12
   19964:	18fb      	adds	r3, r7, r3
   19966:	0018      	movs	r0, r3
   19968:	4b53      	ldr	r3, [pc, #332]	; (19ab8 <prvTraceGetDTS+0x1c8>)
   1996a:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1996c:	68fa      	ldr	r2, [r7, #12]
   1996e:	4b53      	ldr	r3, [pc, #332]	; (19abc <prvTraceGetDTS+0x1cc>)
   19970:	681b      	ldr	r3, [r3, #0]
   19972:	1ad3      	subs	r3, r2, r3
   19974:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   19976:	68fa      	ldr	r2, [r7, #12]
   19978:	4b50      	ldr	r3, [pc, #320]	; (19abc <prvTraceGetDTS+0x1cc>)
   1997a:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1997c:	4b49      	ldr	r3, [pc, #292]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   1997e:	681b      	ldr	r3, [r3, #0]
   19980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19982:	2b00      	cmp	r3, #0
   19984:	d044      	beq.n	19a10 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   19986:	4b47      	ldr	r3, [pc, #284]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   19988:	681b      	ldr	r3, [r3, #0]
   1998a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1998c:	693b      	ldr	r3, [r7, #16]
   1998e:	429a      	cmp	r2, r3
   19990:	d21e      	bcs.n	199d0 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   19992:	4b44      	ldr	r3, [pc, #272]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   19994:	681c      	ldr	r4, [r3, #0]
   19996:	4b43      	ldr	r3, [pc, #268]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   19998:	681b      	ldr	r3, [r3, #0]
   1999a:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1999c:	4b41      	ldr	r3, [pc, #260]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   1999e:	681b      	ldr	r3, [r3, #0]
   199a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   199a2:	4b47      	ldr	r3, [pc, #284]	; (19ac0 <prvTraceGetDTS+0x1d0>)
   199a4:	0011      	movs	r1, r2
   199a6:	6938      	ldr	r0, [r7, #16]
   199a8:	4798      	blx	r3
   199aa:	0003      	movs	r3, r0
   199ac:	18eb      	adds	r3, r5, r3
   199ae:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   199b0:	4b3c      	ldr	r3, [pc, #240]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   199b2:	681c      	ldr	r4, [r3, #0]
   199b4:	4b3b      	ldr	r3, [pc, #236]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   199b6:	681b      	ldr	r3, [r3, #0]
   199b8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   199ba:	4b3a      	ldr	r3, [pc, #232]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   199bc:	681b      	ldr	r3, [r3, #0]
   199be:	6a59      	ldr	r1, [r3, #36]	; 0x24
   199c0:	693a      	ldr	r2, [r7, #16]
   199c2:	4b40      	ldr	r3, [pc, #256]	; (19ac4 <prvTraceGetDTS+0x1d4>)
   199c4:	0010      	movs	r0, r2
   199c6:	4798      	blx	r3
   199c8:	000b      	movs	r3, r1
   199ca:	18eb      	adds	r3, r5, r3
   199cc:	62a3      	str	r3, [r4, #40]	; 0x28
   199ce:	e007      	b.n	199e0 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   199d0:	4b34      	ldr	r3, [pc, #208]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   199d2:	681b      	ldr	r3, [r3, #0]
   199d4:	4a33      	ldr	r2, [pc, #204]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   199d6:	6812      	ldr	r2, [r2, #0]
   199d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
   199da:	693a      	ldr	r2, [r7, #16]
   199dc:	188a      	adds	r2, r1, r2
   199de:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   199e0:	4b30      	ldr	r3, [pc, #192]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   199e2:	681b      	ldr	r3, [r3, #0]
   199e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   199e6:	4b2f      	ldr	r3, [pc, #188]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   199e8:	681b      	ldr	r3, [r3, #0]
   199ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   199ec:	429a      	cmp	r2, r3
   199ee:	d313      	bcc.n	19a18 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   199f0:	4b2c      	ldr	r3, [pc, #176]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   199f2:	681b      	ldr	r3, [r3, #0]
   199f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   199f6:	3201      	adds	r2, #1
   199f8:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   199fa:	4b2a      	ldr	r3, [pc, #168]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   199fc:	681b      	ldr	r3, [r3, #0]
   199fe:	4a29      	ldr	r2, [pc, #164]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   19a00:	6812      	ldr	r2, [r2, #0]
   19a02:	6a91      	ldr	r1, [r2, #40]	; 0x28
   19a04:	4a27      	ldr	r2, [pc, #156]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   19a06:	6812      	ldr	r2, [r2, #0]
   19a08:	6a52      	ldr	r2, [r2, #36]	; 0x24
   19a0a:	1a8a      	subs	r2, r1, r2
   19a0c:	629a      	str	r2, [r3, #40]	; 0x28
   19a0e:	e003      	b.n	19a18 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   19a10:	4b24      	ldr	r3, [pc, #144]	; (19aa4 <prvTraceGetDTS+0x1b4>)
   19a12:	681b      	ldr	r3, [r3, #0]
   19a14:	68fa      	ldr	r2, [r7, #12]
   19a16:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   19a18:	1dbb      	adds	r3, r7, #6
   19a1a:	881a      	ldrh	r2, [r3, #0]
   19a1c:	693b      	ldr	r3, [r7, #16]
   19a1e:	429a      	cmp	r2, r3
   19a20:	d22f      	bcs.n	19a82 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   19a22:	4b29      	ldr	r3, [pc, #164]	; (19ac8 <prvTraceGetDTS+0x1d8>)
   19a24:	4798      	blx	r3
   19a26:	0003      	movs	r3, r0
   19a28:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   19a2a:	697b      	ldr	r3, [r7, #20]
   19a2c:	2b00      	cmp	r3, #0
   19a2e:	d028      	beq.n	19a82 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   19a30:	1dbb      	adds	r3, r7, #6
   19a32:	881b      	ldrh	r3, [r3, #0]
   19a34:	4a18      	ldr	r2, [pc, #96]	; (19a98 <prvTraceGetDTS+0x1a8>)
   19a36:	4293      	cmp	r3, r2
   19a38:	d10b      	bne.n	19a52 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   19a3a:	697b      	ldr	r3, [r7, #20]
   19a3c:	22a9      	movs	r2, #169	; 0xa9
   19a3e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   19a40:	693b      	ldr	r3, [r7, #16]
   19a42:	0c1b      	lsrs	r3, r3, #16
   19a44:	b29a      	uxth	r2, r3
   19a46:	697b      	ldr	r3, [r7, #20]
   19a48:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   19a4a:	697b      	ldr	r3, [r7, #20]
   19a4c:	2200      	movs	r2, #0
   19a4e:	705a      	strb	r2, [r3, #1]
   19a50:	e015      	b.n	19a7e <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   19a52:	1dbb      	adds	r3, r7, #6
   19a54:	881b      	ldrh	r3, [r3, #0]
   19a56:	2bff      	cmp	r3, #255	; 0xff
   19a58:	d10d      	bne.n	19a76 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   19a5a:	697b      	ldr	r3, [r7, #20]
   19a5c:	22a8      	movs	r2, #168	; 0xa8
   19a5e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   19a60:	693b      	ldr	r3, [r7, #16]
   19a62:	0a1b      	lsrs	r3, r3, #8
   19a64:	b29a      	uxth	r2, r3
   19a66:	697b      	ldr	r3, [r7, #20]
   19a68:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   19a6a:	693b      	ldr	r3, [r7, #16]
   19a6c:	0e1b      	lsrs	r3, r3, #24
   19a6e:	b2da      	uxtb	r2, r3
   19a70:	697b      	ldr	r3, [r7, #20]
   19a72:	705a      	strb	r2, [r3, #1]
   19a74:	e003      	b.n	19a7e <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   19a76:	4b15      	ldr	r3, [pc, #84]	; (19acc <prvTraceGetDTS+0x1dc>)
   19a78:	0018      	movs	r0, r3
   19a7a:	4b09      	ldr	r3, [pc, #36]	; (19aa0 <prvTraceGetDTS+0x1b0>)
   19a7c:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   19a7e:	4b14      	ldr	r3, [pc, #80]	; (19ad0 <prvTraceGetDTS+0x1e0>)
   19a80:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   19a82:	693b      	ldr	r3, [r7, #16]
   19a84:	b29b      	uxth	r3, r3
   19a86:	1dba      	adds	r2, r7, #6
   19a88:	8812      	ldrh	r2, [r2, #0]
   19a8a:	4013      	ands	r3, r2
   19a8c:	b29b      	uxth	r3, r3
}
   19a8e:	0018      	movs	r0, r3
   19a90:	46bd      	mov	sp, r7
   19a92:	b006      	add	sp, #24
   19a94:	bdb0      	pop	{r4, r5, r7, pc}
   19a96:	46c0      	nop			; (mov r8, r8)
   19a98:	0000ffff 	.word	0x0000ffff
   19a9c:	00037d28 	.word	0x00037d28
   19aa0:	000196dd 	.word	0x000196dd
   19aa4:	20000c98 	.word	0x20000c98
   19aa8:	20000bf4 	.word	0x20000bf4
   19aac:	e000e018 	.word	0xe000e018
   19ab0:	20005424 	.word	0x20005424
   19ab4:	00029a91 	.word	0x00029a91
   19ab8:	00019ad5 	.word	0x00019ad5
   19abc:	20000ca4 	.word	0x20000ca4
   19ac0:	00032705 	.word	0x00032705
   19ac4:	00032811 	.word	0x00032811
   19ac8:	00019295 	.word	0x00019295
   19acc:	00037d68 	.word	0x00037d68
   19ad0:	00019899 	.word	0x00019899

00019ad4 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   19ad4:	b580      	push	{r7, lr}
   19ad6:	b084      	sub	sp, #16
   19ad8:	af00      	add	r7, sp, #0
   19ada:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   19adc:	2300      	movs	r3, #0
   19ade:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   19ae0:	2300      	movs	r3, #0
   19ae2:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   19ae4:	4b2d      	ldr	r3, [pc, #180]	; (19b9c <prvTracePortGetTimeStamp+0xc8>)
   19ae6:	681b      	ldr	r3, [r3, #0]
   19ae8:	2b01      	cmp	r3, #1
   19aea:	d107      	bne.n	19afc <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   19aec:	687b      	ldr	r3, [r7, #4]
   19aee:	2b00      	cmp	r3, #0
   19af0:	d04f      	beq.n	19b92 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   19af2:	4b2b      	ldr	r3, [pc, #172]	; (19ba0 <prvTracePortGetTimeStamp+0xcc>)
   19af4:	681a      	ldr	r2, [r3, #0]
   19af6:	687b      	ldr	r3, [r7, #4]
   19af8:	601a      	str	r2, [r3, #0]
		return;
   19afa:	e04a      	b.n	19b92 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   19afc:	4b29      	ldr	r3, [pc, #164]	; (19ba4 <prvTracePortGetTimeStamp+0xd0>)
   19afe:	681a      	ldr	r2, [r3, #0]
   19b00:	4b29      	ldr	r3, [pc, #164]	; (19ba8 <prvTracePortGetTimeStamp+0xd4>)
   19b02:	681b      	ldr	r3, [r3, #0]
   19b04:	1ad3      	subs	r3, r2, r3
   19b06:	3301      	adds	r3, #1
   19b08:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   19b0a:	4b28      	ldr	r3, [pc, #160]	; (19bac <prvTracePortGetTimeStamp+0xd8>)
   19b0c:	681a      	ldr	r2, [r3, #0]
   19b0e:	4b28      	ldr	r3, [pc, #160]	; (19bb0 <prvTracePortGetTimeStamp+0xdc>)
   19b10:	681b      	ldr	r3, [r3, #0]
   19b12:	1ad3      	subs	r3, r2, r3
   19b14:	3b01      	subs	r3, #1
   19b16:	2b00      	cmp	r3, #0
   19b18:	db03      	blt.n	19b22 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   19b1a:	4b24      	ldr	r3, [pc, #144]	; (19bac <prvTracePortGetTimeStamp+0xd8>)
   19b1c:	681b      	ldr	r3, [r3, #0]
   19b1e:	60fb      	str	r3, [r7, #12]
   19b20:	e002      	b.n	19b28 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   19b22:	4b23      	ldr	r3, [pc, #140]	; (19bb0 <prvTracePortGetTimeStamp+0xdc>)
   19b24:	681b      	ldr	r3, [r3, #0]
   19b26:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   19b28:	4b20      	ldr	r3, [pc, #128]	; (19bac <prvTracePortGetTimeStamp+0xd8>)
   19b2a:	681b      	ldr	r3, [r3, #0]
   19b2c:	68fa      	ldr	r2, [r7, #12]
   19b2e:	429a      	cmp	r2, r3
   19b30:	d107      	bne.n	19b42 <prvTracePortGetTimeStamp+0x6e>
   19b32:	4b20      	ldr	r3, [pc, #128]	; (19bb4 <prvTracePortGetTimeStamp+0xe0>)
   19b34:	681b      	ldr	r3, [r3, #0]
   19b36:	68ba      	ldr	r2, [r7, #8]
   19b38:	429a      	cmp	r2, r3
   19b3a:	d202      	bcs.n	19b42 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   19b3c:	68fb      	ldr	r3, [r7, #12]
   19b3e:	3301      	adds	r3, #1
   19b40:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   19b42:	687b      	ldr	r3, [r7, #4]
   19b44:	2b00      	cmp	r3, #0
   19b46:	d016      	beq.n	19b76 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   19b48:	4b16      	ldr	r3, [pc, #88]	; (19ba4 <prvTracePortGetTimeStamp+0xd0>)
   19b4a:	681b      	ldr	r3, [r3, #0]
   19b4c:	3301      	adds	r3, #1
   19b4e:	089b      	lsrs	r3, r3, #2
   19b50:	68fa      	ldr	r2, [r7, #12]
   19b52:	435a      	muls	r2, r3
   19b54:	4b12      	ldr	r3, [pc, #72]	; (19ba0 <prvTracePortGetTimeStamp+0xcc>)
   19b56:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   19b58:	4b12      	ldr	r3, [pc, #72]	; (19ba4 <prvTracePortGetTimeStamp+0xd0>)
   19b5a:	681b      	ldr	r3, [r3, #0]
   19b5c:	3301      	adds	r3, #1
   19b5e:	2203      	movs	r2, #3
   19b60:	4013      	ands	r3, r2
   19b62:	68fa      	ldr	r2, [r7, #12]
   19b64:	435a      	muls	r2, r3
   19b66:	68bb      	ldr	r3, [r7, #8]
   19b68:	18d3      	adds	r3, r2, r3
   19b6a:	089a      	lsrs	r2, r3, #2
   19b6c:	4b0c      	ldr	r3, [pc, #48]	; (19ba0 <prvTracePortGetTimeStamp+0xcc>)
   19b6e:	681b      	ldr	r3, [r3, #0]
   19b70:	18d2      	adds	r2, r2, r3
   19b72:	4b0b      	ldr	r3, [pc, #44]	; (19ba0 <prvTracePortGetTimeStamp+0xcc>)
   19b74:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   19b76:	4b0d      	ldr	r3, [pc, #52]	; (19bac <prvTracePortGetTimeStamp+0xd8>)
   19b78:	68fa      	ldr	r2, [r7, #12]
   19b7a:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   19b7c:	687b      	ldr	r3, [r7, #4]
   19b7e:	2b00      	cmp	r3, #0
   19b80:	d003      	beq.n	19b8a <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   19b82:	4b07      	ldr	r3, [pc, #28]	; (19ba0 <prvTracePortGetTimeStamp+0xcc>)
   19b84:	681a      	ldr	r2, [r3, #0]
   19b86:	687b      	ldr	r3, [r7, #4]
   19b88:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   19b8a:	4b0a      	ldr	r3, [pc, #40]	; (19bb4 <prvTracePortGetTimeStamp+0xe0>)
   19b8c:	68ba      	ldr	r2, [r7, #8]
   19b8e:	601a      	str	r2, [r3, #0]
   19b90:	e000      	b.n	19b94 <prvTracePortGetTimeStamp+0xc0>
		return;
   19b92:	46c0      	nop			; (mov r8, r8)
}
   19b94:	46bd      	mov	sp, r7
   19b96:	b004      	add	sp, #16
   19b98:	bd80      	pop	{r7, pc}
   19b9a:	46c0      	nop			; (mov r8, r8)
   19b9c:	20000be4 	.word	0x20000be4
   19ba0:	20000be8 	.word	0x20000be8
   19ba4:	e000e014 	.word	0xe000e014
   19ba8:	e000e018 	.word	0xe000e018
   19bac:	20000ca8 	.word	0x20000ca8
   19bb0:	20000be0 	.word	0x20000be0
   19bb4:	20000cac 	.word	0x20000cac

00019bb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   19bb8:	b580      	push	{r7, lr}
   19bba:	b082      	sub	sp, #8
   19bbc:	af00      	add	r7, sp, #0
   19bbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19bc0:	687b      	ldr	r3, [r7, #4]
   19bc2:	3308      	adds	r3, #8
   19bc4:	001a      	movs	r2, r3
   19bc6:	687b      	ldr	r3, [r7, #4]
   19bc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   19bca:	687b      	ldr	r3, [r7, #4]
   19bcc:	2201      	movs	r2, #1
   19bce:	4252      	negs	r2, r2
   19bd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19bd2:	687b      	ldr	r3, [r7, #4]
   19bd4:	3308      	adds	r3, #8
   19bd6:	001a      	movs	r2, r3
   19bd8:	687b      	ldr	r3, [r7, #4]
   19bda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19bdc:	687b      	ldr	r3, [r7, #4]
   19bde:	3308      	adds	r3, #8
   19be0:	001a      	movs	r2, r3
   19be2:	687b      	ldr	r3, [r7, #4]
   19be4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   19be6:	687b      	ldr	r3, [r7, #4]
   19be8:	2200      	movs	r2, #0
   19bea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   19bec:	46c0      	nop			; (mov r8, r8)
   19bee:	46bd      	mov	sp, r7
   19bf0:	b002      	add	sp, #8
   19bf2:	bd80      	pop	{r7, pc}

00019bf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   19bf4:	b580      	push	{r7, lr}
   19bf6:	b082      	sub	sp, #8
   19bf8:	af00      	add	r7, sp, #0
   19bfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   19bfc:	687b      	ldr	r3, [r7, #4]
   19bfe:	2200      	movs	r2, #0
   19c00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   19c02:	46c0      	nop			; (mov r8, r8)
   19c04:	46bd      	mov	sp, r7
   19c06:	b002      	add	sp, #8
   19c08:	bd80      	pop	{r7, pc}

00019c0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   19c0a:	b580      	push	{r7, lr}
   19c0c:	b084      	sub	sp, #16
   19c0e:	af00      	add	r7, sp, #0
   19c10:	6078      	str	r0, [r7, #4]
   19c12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   19c14:	687b      	ldr	r3, [r7, #4]
   19c16:	685b      	ldr	r3, [r3, #4]
   19c18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   19c1a:	683b      	ldr	r3, [r7, #0]
   19c1c:	68fa      	ldr	r2, [r7, #12]
   19c1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   19c20:	68fb      	ldr	r3, [r7, #12]
   19c22:	689a      	ldr	r2, [r3, #8]
   19c24:	683b      	ldr	r3, [r7, #0]
   19c26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   19c28:	68fb      	ldr	r3, [r7, #12]
   19c2a:	689b      	ldr	r3, [r3, #8]
   19c2c:	683a      	ldr	r2, [r7, #0]
   19c2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   19c30:	68fb      	ldr	r3, [r7, #12]
   19c32:	683a      	ldr	r2, [r7, #0]
   19c34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19c36:	683b      	ldr	r3, [r7, #0]
   19c38:	687a      	ldr	r2, [r7, #4]
   19c3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19c3c:	687b      	ldr	r3, [r7, #4]
   19c3e:	681b      	ldr	r3, [r3, #0]
   19c40:	1c5a      	adds	r2, r3, #1
   19c42:	687b      	ldr	r3, [r7, #4]
   19c44:	601a      	str	r2, [r3, #0]
}
   19c46:	46c0      	nop			; (mov r8, r8)
   19c48:	46bd      	mov	sp, r7
   19c4a:	b004      	add	sp, #16
   19c4c:	bd80      	pop	{r7, pc}

00019c4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   19c4e:	b580      	push	{r7, lr}
   19c50:	b084      	sub	sp, #16
   19c52:	af00      	add	r7, sp, #0
   19c54:	6078      	str	r0, [r7, #4]
   19c56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   19c58:	683b      	ldr	r3, [r7, #0]
   19c5a:	681b      	ldr	r3, [r3, #0]
   19c5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   19c5e:	68bb      	ldr	r3, [r7, #8]
   19c60:	3301      	adds	r3, #1
   19c62:	d103      	bne.n	19c6c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   19c64:	687b      	ldr	r3, [r7, #4]
   19c66:	691b      	ldr	r3, [r3, #16]
   19c68:	60fb      	str	r3, [r7, #12]
   19c6a:	e00c      	b.n	19c86 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19c6c:	687b      	ldr	r3, [r7, #4]
   19c6e:	3308      	adds	r3, #8
   19c70:	60fb      	str	r3, [r7, #12]
   19c72:	e002      	b.n	19c7a <vListInsert+0x2c>
   19c74:	68fb      	ldr	r3, [r7, #12]
   19c76:	685b      	ldr	r3, [r3, #4]
   19c78:	60fb      	str	r3, [r7, #12]
   19c7a:	68fb      	ldr	r3, [r7, #12]
   19c7c:	685b      	ldr	r3, [r3, #4]
   19c7e:	681a      	ldr	r2, [r3, #0]
   19c80:	68bb      	ldr	r3, [r7, #8]
   19c82:	429a      	cmp	r2, r3
   19c84:	d9f6      	bls.n	19c74 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   19c86:	68fb      	ldr	r3, [r7, #12]
   19c88:	685a      	ldr	r2, [r3, #4]
   19c8a:	683b      	ldr	r3, [r7, #0]
   19c8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   19c8e:	683b      	ldr	r3, [r7, #0]
   19c90:	685b      	ldr	r3, [r3, #4]
   19c92:	683a      	ldr	r2, [r7, #0]
   19c94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   19c96:	683b      	ldr	r3, [r7, #0]
   19c98:	68fa      	ldr	r2, [r7, #12]
   19c9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   19c9c:	68fb      	ldr	r3, [r7, #12]
   19c9e:	683a      	ldr	r2, [r7, #0]
   19ca0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19ca2:	683b      	ldr	r3, [r7, #0]
   19ca4:	687a      	ldr	r2, [r7, #4]
   19ca6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19ca8:	687b      	ldr	r3, [r7, #4]
   19caa:	681b      	ldr	r3, [r3, #0]
   19cac:	1c5a      	adds	r2, r3, #1
   19cae:	687b      	ldr	r3, [r7, #4]
   19cb0:	601a      	str	r2, [r3, #0]
}
   19cb2:	46c0      	nop			; (mov r8, r8)
   19cb4:	46bd      	mov	sp, r7
   19cb6:	b004      	add	sp, #16
   19cb8:	bd80      	pop	{r7, pc}

00019cba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   19cba:	b580      	push	{r7, lr}
   19cbc:	b084      	sub	sp, #16
   19cbe:	af00      	add	r7, sp, #0
   19cc0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   19cc2:	687b      	ldr	r3, [r7, #4]
   19cc4:	691b      	ldr	r3, [r3, #16]
   19cc6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   19cc8:	687b      	ldr	r3, [r7, #4]
   19cca:	685b      	ldr	r3, [r3, #4]
   19ccc:	687a      	ldr	r2, [r7, #4]
   19cce:	6892      	ldr	r2, [r2, #8]
   19cd0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   19cd2:	687b      	ldr	r3, [r7, #4]
   19cd4:	689b      	ldr	r3, [r3, #8]
   19cd6:	687a      	ldr	r2, [r7, #4]
   19cd8:	6852      	ldr	r2, [r2, #4]
   19cda:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   19cdc:	68fb      	ldr	r3, [r7, #12]
   19cde:	685a      	ldr	r2, [r3, #4]
   19ce0:	687b      	ldr	r3, [r7, #4]
   19ce2:	429a      	cmp	r2, r3
   19ce4:	d103      	bne.n	19cee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   19ce6:	687b      	ldr	r3, [r7, #4]
   19ce8:	689a      	ldr	r2, [r3, #8]
   19cea:	68fb      	ldr	r3, [r7, #12]
   19cec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   19cee:	687b      	ldr	r3, [r7, #4]
   19cf0:	2200      	movs	r2, #0
   19cf2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   19cf4:	68fb      	ldr	r3, [r7, #12]
   19cf6:	681b      	ldr	r3, [r3, #0]
   19cf8:	1e5a      	subs	r2, r3, #1
   19cfa:	68fb      	ldr	r3, [r7, #12]
   19cfc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   19cfe:	68fb      	ldr	r3, [r7, #12]
   19d00:	681b      	ldr	r3, [r3, #0]
}
   19d02:	0018      	movs	r0, r3
   19d04:	46bd      	mov	sp, r7
   19d06:	b004      	add	sp, #16
   19d08:	bd80      	pop	{r7, pc}
	...

00019d0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   19d0c:	b580      	push	{r7, lr}
   19d0e:	b084      	sub	sp, #16
   19d10:	af00      	add	r7, sp, #0
   19d12:	60f8      	str	r0, [r7, #12]
   19d14:	60b9      	str	r1, [r7, #8]
   19d16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   19d18:	68fb      	ldr	r3, [r7, #12]
   19d1a:	3b04      	subs	r3, #4
   19d1c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   19d1e:	68fb      	ldr	r3, [r7, #12]
   19d20:	2280      	movs	r2, #128	; 0x80
   19d22:	0452      	lsls	r2, r2, #17
   19d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19d26:	68fb      	ldr	r3, [r7, #12]
   19d28:	3b04      	subs	r3, #4
   19d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   19d2c:	68ba      	ldr	r2, [r7, #8]
   19d2e:	68fb      	ldr	r3, [r7, #12]
   19d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19d32:	68fb      	ldr	r3, [r7, #12]
   19d34:	3b04      	subs	r3, #4
   19d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   19d38:	4a08      	ldr	r2, [pc, #32]	; (19d5c <pxPortInitialiseStack+0x50>)
   19d3a:	68fb      	ldr	r3, [r7, #12]
   19d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   19d3e:	68fb      	ldr	r3, [r7, #12]
   19d40:	3b14      	subs	r3, #20
   19d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   19d44:	687a      	ldr	r2, [r7, #4]
   19d46:	68fb      	ldr	r3, [r7, #12]
   19d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   19d4a:	68fb      	ldr	r3, [r7, #12]
   19d4c:	3b20      	subs	r3, #32
   19d4e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   19d50:	68fb      	ldr	r3, [r7, #12]
}
   19d52:	0018      	movs	r0, r3
   19d54:	46bd      	mov	sp, r7
   19d56:	b004      	add	sp, #16
   19d58:	bd80      	pop	{r7, pc}
   19d5a:	46c0      	nop			; (mov r8, r8)
   19d5c:	00019d61 	.word	0x00019d61

00019d60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   19d60:	b580      	push	{r7, lr}
   19d62:	b082      	sub	sp, #8
   19d64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   19d66:	2300      	movs	r3, #0
   19d68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   19d6a:	4b07      	ldr	r3, [pc, #28]	; (19d88 <prvTaskExitError+0x28>)
   19d6c:	681b      	ldr	r3, [r3, #0]
   19d6e:	3301      	adds	r3, #1
   19d70:	d001      	beq.n	19d76 <prvTaskExitError+0x16>
   19d72:	b672      	cpsid	i
   19d74:	e7fe      	b.n	19d74 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   19d76:	b672      	cpsid	i
	while( ulDummy == 0 )
   19d78:	46c0      	nop			; (mov r8, r8)
   19d7a:	687b      	ldr	r3, [r7, #4]
   19d7c:	2b00      	cmp	r3, #0
   19d7e:	d0fc      	beq.n	19d7a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   19d80:	46c0      	nop			; (mov r8, r8)
   19d82:	46bd      	mov	sp, r7
   19d84:	b002      	add	sp, #8
   19d86:	bd80      	pop	{r7, pc}
   19d88:	20000134 	.word	0x20000134

00019d8c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   19d8c:	b580      	push	{r7, lr}
   19d8e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   19d90:	46c0      	nop			; (mov r8, r8)
   19d92:	46bd      	mov	sp, r7
   19d94:	bd80      	pop	{r7, pc}
	...

00019da0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   19da0:	4a0b      	ldr	r2, [pc, #44]	; (19dd0 <pxCurrentTCBConst2>)
   19da2:	6813      	ldr	r3, [r2, #0]
   19da4:	6818      	ldr	r0, [r3, #0]
   19da6:	3020      	adds	r0, #32
   19da8:	f380 8809 	msr	PSP, r0
   19dac:	2002      	movs	r0, #2
   19dae:	f380 8814 	msr	CONTROL, r0
   19db2:	f3bf 8f6f 	isb	sy
   19db6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   19db8:	46ae      	mov	lr, r5
   19dba:	bc08      	pop	{r3}
   19dbc:	bc04      	pop	{r2}
   19dbe:	b662      	cpsie	i
   19dc0:	4718      	bx	r3
   19dc2:	46c0      	nop			; (mov r8, r8)
   19dc4:	46c0      	nop			; (mov r8, r8)
   19dc6:	46c0      	nop			; (mov r8, r8)
   19dc8:	46c0      	nop			; (mov r8, r8)
   19dca:	46c0      	nop			; (mov r8, r8)
   19dcc:	46c0      	nop			; (mov r8, r8)
   19dce:	46c0      	nop			; (mov r8, r8)

00019dd0 <pxCurrentTCBConst2>:
   19dd0:	20003f80 	.word	0x20003f80
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   19dd4:	46c0      	nop			; (mov r8, r8)
   19dd6:	46c0      	nop			; (mov r8, r8)

00019dd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   19dd8:	b580      	push	{r7, lr}
   19dda:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   19ddc:	4b0e      	ldr	r3, [pc, #56]	; (19e18 <xPortStartScheduler+0x40>)
   19dde:	4a0e      	ldr	r2, [pc, #56]	; (19e18 <xPortStartScheduler+0x40>)
   19de0:	6812      	ldr	r2, [r2, #0]
   19de2:	21ff      	movs	r1, #255	; 0xff
   19de4:	0409      	lsls	r1, r1, #16
   19de6:	430a      	orrs	r2, r1
   19de8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   19dea:	4b0b      	ldr	r3, [pc, #44]	; (19e18 <xPortStartScheduler+0x40>)
   19dec:	4a0a      	ldr	r2, [pc, #40]	; (19e18 <xPortStartScheduler+0x40>)
   19dee:	6812      	ldr	r2, [r2, #0]
   19df0:	21ff      	movs	r1, #255	; 0xff
   19df2:	0609      	lsls	r1, r1, #24
   19df4:	430a      	orrs	r2, r1
   19df6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   19df8:	4b08      	ldr	r3, [pc, #32]	; (19e1c <xPortStartScheduler+0x44>)
   19dfa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   19dfc:	4b08      	ldr	r3, [pc, #32]	; (19e20 <xPortStartScheduler+0x48>)
   19dfe:	2200      	movs	r2, #0
   19e00:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   19e02:	4b08      	ldr	r3, [pc, #32]	; (19e24 <xPortStartScheduler+0x4c>)
   19e04:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   19e06:	4b08      	ldr	r3, [pc, #32]	; (19e28 <xPortStartScheduler+0x50>)
   19e08:	4798      	blx	r3
	prvTaskExitError();
   19e0a:	4b08      	ldr	r3, [pc, #32]	; (19e2c <xPortStartScheduler+0x54>)
   19e0c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   19e0e:	2300      	movs	r3, #0
}
   19e10:	0018      	movs	r0, r3
   19e12:	46bd      	mov	sp, r7
   19e14:	bd80      	pop	{r7, pc}
   19e16:	46c0      	nop			; (mov r8, r8)
   19e18:	e000ed20 	.word	0xe000ed20
   19e1c:	00019f39 	.word	0x00019f39
   19e20:	20000134 	.word	0x20000134
   19e24:	00019da1 	.word	0x00019da1
   19e28:	0001c495 	.word	0x0001c495
   19e2c:	00019d61 	.word	0x00019d61

00019e30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   19e30:	b580      	push	{r7, lr}
   19e32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   19e34:	4b03      	ldr	r3, [pc, #12]	; (19e44 <vPortYield+0x14>)
   19e36:	2280      	movs	r2, #128	; 0x80
   19e38:	0552      	lsls	r2, r2, #21
   19e3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   19e3c:	46c0      	nop			; (mov r8, r8)
   19e3e:	46bd      	mov	sp, r7
   19e40:	bd80      	pop	{r7, pc}
   19e42:	46c0      	nop			; (mov r8, r8)
   19e44:	e000ed04 	.word	0xe000ed04

00019e48 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   19e48:	b580      	push	{r7, lr}
   19e4a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   19e4c:	b672      	cpsid	i
    uxCriticalNesting++;
   19e4e:	4b06      	ldr	r3, [pc, #24]	; (19e68 <vPortEnterCritical+0x20>)
   19e50:	681b      	ldr	r3, [r3, #0]
   19e52:	1c5a      	adds	r2, r3, #1
   19e54:	4b04      	ldr	r3, [pc, #16]	; (19e68 <vPortEnterCritical+0x20>)
   19e56:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   19e58:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   19e5c:	f3bf 8f6f 	isb	sy
}
   19e60:	46c0      	nop			; (mov r8, r8)
   19e62:	46bd      	mov	sp, r7
   19e64:	bd80      	pop	{r7, pc}
   19e66:	46c0      	nop			; (mov r8, r8)
   19e68:	20000134 	.word	0x20000134

00019e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   19e6c:	b580      	push	{r7, lr}
   19e6e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   19e70:	4b09      	ldr	r3, [pc, #36]	; (19e98 <vPortExitCritical+0x2c>)
   19e72:	681b      	ldr	r3, [r3, #0]
   19e74:	2b00      	cmp	r3, #0
   19e76:	d101      	bne.n	19e7c <vPortExitCritical+0x10>
   19e78:	b672      	cpsid	i
   19e7a:	e7fe      	b.n	19e7a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   19e7c:	4b06      	ldr	r3, [pc, #24]	; (19e98 <vPortExitCritical+0x2c>)
   19e7e:	681b      	ldr	r3, [r3, #0]
   19e80:	1e5a      	subs	r2, r3, #1
   19e82:	4b05      	ldr	r3, [pc, #20]	; (19e98 <vPortExitCritical+0x2c>)
   19e84:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   19e86:	4b04      	ldr	r3, [pc, #16]	; (19e98 <vPortExitCritical+0x2c>)
   19e88:	681b      	ldr	r3, [r3, #0]
   19e8a:	2b00      	cmp	r3, #0
   19e8c:	d100      	bne.n	19e90 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   19e8e:	b662      	cpsie	i
    }
}
   19e90:	46c0      	nop			; (mov r8, r8)
   19e92:	46bd      	mov	sp, r7
   19e94:	bd80      	pop	{r7, pc}
   19e96:	46c0      	nop			; (mov r8, r8)
   19e98:	20000134 	.word	0x20000134

00019e9c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   19e9c:	f3ef 8010 	mrs	r0, PRIMASK
   19ea0:	b672      	cpsid	i
   19ea2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   19ea4:	46c0      	nop			; (mov r8, r8)
   19ea6:	0018      	movs	r0, r3

00019ea8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   19ea8:	f380 8810 	msr	PRIMASK, r0
   19eac:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   19eae:	46c0      	nop			; (mov r8, r8)

00019eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   19eb0:	f3ef 8009 	mrs	r0, PSP
   19eb4:	4b0e      	ldr	r3, [pc, #56]	; (19ef0 <pxCurrentTCBConst>)
   19eb6:	681a      	ldr	r2, [r3, #0]
   19eb8:	3820      	subs	r0, #32
   19eba:	6010      	str	r0, [r2, #0]
   19ebc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   19ebe:	4644      	mov	r4, r8
   19ec0:	464d      	mov	r5, r9
   19ec2:	4656      	mov	r6, sl
   19ec4:	465f      	mov	r7, fp
   19ec6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   19ec8:	b508      	push	{r3, lr}
   19eca:	b672      	cpsid	i
   19ecc:	f002 fae2 	bl	1c494 <vTaskSwitchContext>
   19ed0:	b662      	cpsie	i
   19ed2:	bc0c      	pop	{r2, r3}
   19ed4:	6811      	ldr	r1, [r2, #0]
   19ed6:	6808      	ldr	r0, [r1, #0]
   19ed8:	3010      	adds	r0, #16
   19eda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   19edc:	46a0      	mov	r8, r4
   19ede:	46a9      	mov	r9, r5
   19ee0:	46b2      	mov	sl, r6
   19ee2:	46bb      	mov	fp, r7
   19ee4:	f380 8809 	msr	PSP, r0
   19ee8:	3820      	subs	r0, #32
   19eea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   19eec:	4718      	bx	r3
   19eee:	46c0      	nop			; (mov r8, r8)

00019ef0 <pxCurrentTCBConst>:
   19ef0:	20003f80 	.word	0x20003f80
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   19ef4:	46c0      	nop			; (mov r8, r8)
   19ef6:	46c0      	nop			; (mov r8, r8)

00019ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   19ef8:	b580      	push	{r7, lr}
   19efa:	b082      	sub	sp, #8
   19efc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   19efe:	4b0a      	ldr	r3, [pc, #40]	; (19f28 <SysTick_Handler+0x30>)
   19f00:	4798      	blx	r3
   19f02:	0003      	movs	r3, r0
   19f04:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   19f06:	4b09      	ldr	r3, [pc, #36]	; (19f2c <SysTick_Handler+0x34>)
   19f08:	4798      	blx	r3
   19f0a:	1e03      	subs	r3, r0, #0
   19f0c:	d003      	beq.n	19f16 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   19f0e:	4b08      	ldr	r3, [pc, #32]	; (19f30 <SysTick_Handler+0x38>)
   19f10:	2280      	movs	r2, #128	; 0x80
   19f12:	0552      	lsls	r2, r2, #21
   19f14:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   19f16:	687b      	ldr	r3, [r7, #4]
   19f18:	0018      	movs	r0, r3
   19f1a:	4b06      	ldr	r3, [pc, #24]	; (19f34 <SysTick_Handler+0x3c>)
   19f1c:	4798      	blx	r3
}
   19f1e:	46c0      	nop			; (mov r8, r8)
   19f20:	46bd      	mov	sp, r7
   19f22:	b002      	add	sp, #8
   19f24:	bd80      	pop	{r7, pc}
   19f26:	46c0      	nop			; (mov r8, r8)
   19f28:	00019e9d 	.word	0x00019e9d
   19f2c:	0001c2a5 	.word	0x0001c2a5
   19f30:	e000ed04 	.word	0xe000ed04
   19f34:	00019ea9 	.word	0x00019ea9

00019f38 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   19f38:	b5b0      	push	{r4, r5, r7, lr}
   19f3a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   19f3c:	4b0b      	ldr	r3, [pc, #44]	; (19f6c <prvSetupTimerInterrupt+0x34>)
   19f3e:	2200      	movs	r2, #0
   19f40:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   19f42:	4b0b      	ldr	r3, [pc, #44]	; (19f70 <prvSetupTimerInterrupt+0x38>)
   19f44:	2200      	movs	r2, #0
   19f46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   19f48:	4c0a      	ldr	r4, [pc, #40]	; (19f74 <prvSetupTimerInterrupt+0x3c>)
   19f4a:	2000      	movs	r0, #0
   19f4c:	4b0a      	ldr	r3, [pc, #40]	; (19f78 <prvSetupTimerInterrupt+0x40>)
   19f4e:	4798      	blx	r3
   19f50:	4b0a      	ldr	r3, [pc, #40]	; (19f7c <prvSetupTimerInterrupt+0x44>)
   19f52:	22fa      	movs	r2, #250	; 0xfa
   19f54:	0091      	lsls	r1, r2, #2
   19f56:	4798      	blx	r3
   19f58:	0003      	movs	r3, r0
   19f5a:	3b01      	subs	r3, #1
   19f5c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   19f5e:	4b03      	ldr	r3, [pc, #12]	; (19f6c <prvSetupTimerInterrupt+0x34>)
   19f60:	2207      	movs	r2, #7
   19f62:	601a      	str	r2, [r3, #0]
}
   19f64:	46c0      	nop			; (mov r8, r8)
   19f66:	46bd      	mov	sp, r7
   19f68:	bdb0      	pop	{r4, r5, r7, pc}
   19f6a:	46c0      	nop			; (mov r8, r8)
   19f6c:	e000e010 	.word	0xe000e010
   19f70:	e000e018 	.word	0xe000e018
   19f74:	e000e014 	.word	0xe000e014
   19f78:	00029a91 	.word	0x00029a91
   19f7c:	00032705 	.word	0x00032705

00019f80 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   19f80:	b580      	push	{r7, lr}
   19f82:	b084      	sub	sp, #16
   19f84:	af00      	add	r7, sp, #0
   19f86:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   19f88:	2300      	movs	r3, #0
   19f8a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   19f8c:	687b      	ldr	r3, [r7, #4]
   19f8e:	2207      	movs	r2, #7
   19f90:	4013      	ands	r3, r2
   19f92:	d004      	beq.n	19f9e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   19f94:	687b      	ldr	r3, [r7, #4]
   19f96:	2207      	movs	r2, #7
   19f98:	4393      	bics	r3, r2
   19f9a:	3308      	adds	r3, #8
   19f9c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   19f9e:	4b21      	ldr	r3, [pc, #132]	; (1a024 <pvPortMalloc+0xa4>)
   19fa0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   19fa2:	4b21      	ldr	r3, [pc, #132]	; (1a028 <pvPortMalloc+0xa8>)
   19fa4:	681b      	ldr	r3, [r3, #0]
   19fa6:	2b00      	cmp	r3, #0
   19fa8:	d105      	bne.n	19fb6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   19faa:	4b20      	ldr	r3, [pc, #128]	; (1a02c <pvPortMalloc+0xac>)
   19fac:	2207      	movs	r2, #7
   19fae:	4393      	bics	r3, r2
   19fb0:	001a      	movs	r2, r3
   19fb2:	4b1d      	ldr	r3, [pc, #116]	; (1a028 <pvPortMalloc+0xa8>)
   19fb4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   19fb6:	4b1e      	ldr	r3, [pc, #120]	; (1a030 <pvPortMalloc+0xb0>)
   19fb8:	681a      	ldr	r2, [r3, #0]
   19fba:	687b      	ldr	r3, [r7, #4]
   19fbc:	18d3      	adds	r3, r2, r3
   19fbe:	4a1d      	ldr	r2, [pc, #116]	; (1a034 <pvPortMalloc+0xb4>)
   19fc0:	4293      	cmp	r3, r2
   19fc2:	d813      	bhi.n	19fec <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   19fc4:	4b1a      	ldr	r3, [pc, #104]	; (1a030 <pvPortMalloc+0xb0>)
   19fc6:	681a      	ldr	r2, [r3, #0]
   19fc8:	687b      	ldr	r3, [r7, #4]
   19fca:	18d2      	adds	r2, r2, r3
   19fcc:	4b18      	ldr	r3, [pc, #96]	; (1a030 <pvPortMalloc+0xb0>)
   19fce:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   19fd0:	429a      	cmp	r2, r3
   19fd2:	d90b      	bls.n	19fec <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   19fd4:	4b14      	ldr	r3, [pc, #80]	; (1a028 <pvPortMalloc+0xa8>)
   19fd6:	681a      	ldr	r2, [r3, #0]
   19fd8:	4b15      	ldr	r3, [pc, #84]	; (1a030 <pvPortMalloc+0xb0>)
   19fda:	681b      	ldr	r3, [r3, #0]
   19fdc:	18d3      	adds	r3, r2, r3
   19fde:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   19fe0:	4b13      	ldr	r3, [pc, #76]	; (1a030 <pvPortMalloc+0xb0>)
   19fe2:	681a      	ldr	r2, [r3, #0]
   19fe4:	687b      	ldr	r3, [r7, #4]
   19fe6:	18d2      	adds	r2, r2, r3
   19fe8:	4b11      	ldr	r3, [pc, #68]	; (1a030 <pvPortMalloc+0xb0>)
   19fea:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   19fec:	68fb      	ldr	r3, [r7, #12]
   19fee:	2b00      	cmp	r3, #0
   19ff0:	d006      	beq.n	1a000 <pvPortMalloc+0x80>
   19ff2:	68fb      	ldr	r3, [r7, #12]
   19ff4:	687a      	ldr	r2, [r7, #4]
   19ff6:	0019      	movs	r1, r3
   19ff8:	2094      	movs	r0, #148	; 0x94
   19ffa:	4b0f      	ldr	r3, [pc, #60]	; (1a038 <pvPortMalloc+0xb8>)
   19ffc:	4798      	blx	r3
   19ffe:	e005      	b.n	1a00c <pvPortMalloc+0x8c>
   1a000:	68fb      	ldr	r3, [r7, #12]
   1a002:	687a      	ldr	r2, [r7, #4]
   1a004:	0019      	movs	r1, r3
   1a006:	20e8      	movs	r0, #232	; 0xe8
   1a008:	4b0b      	ldr	r3, [pc, #44]	; (1a038 <pvPortMalloc+0xb8>)
   1a00a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1a00c:	4b0b      	ldr	r3, [pc, #44]	; (1a03c <pvPortMalloc+0xbc>)
   1a00e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1a010:	68fb      	ldr	r3, [r7, #12]
   1a012:	2b00      	cmp	r3, #0
   1a014:	d101      	bne.n	1a01a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1a016:	4b0a      	ldr	r3, [pc, #40]	; (1a040 <pvPortMalloc+0xc0>)
   1a018:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1a01a:	68fb      	ldr	r3, [r7, #12]
}
   1a01c:	0018      	movs	r0, r3
   1a01e:	46bd      	mov	sp, r7
   1a020:	b004      	add	sp, #16
   1a022:	bd80      	pop	{r7, pc}
   1a024:	0001c101 	.word	0x0001c101
   1a028:	20003f7c 	.word	0x20003f7c
   1a02c:	20000cb8 	.word	0x20000cb8
   1a030:	20003f78 	.word	0x20003f78
   1a034:	000032bf 	.word	0x000032bf
   1a038:	000186e9 	.word	0x000186e9
   1a03c:	0001c119 	.word	0x0001c119
   1a040:	000326d5 	.word	0x000326d5

0001a044 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1a044:	b580      	push	{r7, lr}
   1a046:	b082      	sub	sp, #8
   1a048:	af00      	add	r7, sp, #0
   1a04a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1a04c:	687b      	ldr	r3, [r7, #4]
   1a04e:	2b00      	cmp	r3, #0
   1a050:	d001      	beq.n	1a056 <vPortFree+0x12>
   1a052:	b672      	cpsid	i
   1a054:	e7fe      	b.n	1a054 <vPortFree+0x10>
}
   1a056:	46c0      	nop			; (mov r8, r8)
   1a058:	46bd      	mov	sp, r7
   1a05a:	b002      	add	sp, #8
   1a05c:	bd80      	pop	{r7, pc}
	...

0001a060 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1a060:	b580      	push	{r7, lr}
   1a062:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1a064:	4b03      	ldr	r3, [pc, #12]	; (1a074 <xPortGetFreeHeapSize+0x14>)
   1a066:	681b      	ldr	r3, [r3, #0]
   1a068:	22cb      	movs	r2, #203	; 0xcb
   1a06a:	0192      	lsls	r2, r2, #6
   1a06c:	1ad3      	subs	r3, r2, r3
}
   1a06e:	0018      	movs	r0, r3
   1a070:	46bd      	mov	sp, r7
   1a072:	bd80      	pop	{r7, pc}
   1a074:	20003f78 	.word	0x20003f78

0001a078 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1a078:	b580      	push	{r7, lr}
   1a07a:	b084      	sub	sp, #16
   1a07c:	af00      	add	r7, sp, #0
   1a07e:	6078      	str	r0, [r7, #4]
   1a080:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a082:	687b      	ldr	r3, [r7, #4]
   1a084:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1a086:	68fb      	ldr	r3, [r7, #12]
   1a088:	2b00      	cmp	r3, #0
   1a08a:	d101      	bne.n	1a090 <xQueueGenericReset+0x18>
   1a08c:	b672      	cpsid	i
   1a08e:	e7fe      	b.n	1a08e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1a090:	4b23      	ldr	r3, [pc, #140]	; (1a120 <xQueueGenericReset+0xa8>)
   1a092:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1a094:	68fb      	ldr	r3, [r7, #12]
   1a096:	681a      	ldr	r2, [r3, #0]
   1a098:	68fb      	ldr	r3, [r7, #12]
   1a09a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1a09c:	68fb      	ldr	r3, [r7, #12]
   1a09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a0a0:	434b      	muls	r3, r1
   1a0a2:	18d2      	adds	r2, r2, r3
   1a0a4:	68fb      	ldr	r3, [r7, #12]
   1a0a6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1a0a8:	68fb      	ldr	r3, [r7, #12]
   1a0aa:	2200      	movs	r2, #0
   1a0ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1a0ae:	68fb      	ldr	r3, [r7, #12]
   1a0b0:	681a      	ldr	r2, [r3, #0]
   1a0b2:	68fb      	ldr	r3, [r7, #12]
   1a0b4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1a0b6:	68fb      	ldr	r3, [r7, #12]
   1a0b8:	681a      	ldr	r2, [r3, #0]
   1a0ba:	68fb      	ldr	r3, [r7, #12]
   1a0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a0be:	1e59      	subs	r1, r3, #1
   1a0c0:	68fb      	ldr	r3, [r7, #12]
   1a0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a0c4:	434b      	muls	r3, r1
   1a0c6:	18d2      	adds	r2, r2, r3
   1a0c8:	68fb      	ldr	r3, [r7, #12]
   1a0ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1a0cc:	68fb      	ldr	r3, [r7, #12]
   1a0ce:	2244      	movs	r2, #68	; 0x44
   1a0d0:	21ff      	movs	r1, #255	; 0xff
   1a0d2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1a0d4:	68fb      	ldr	r3, [r7, #12]
   1a0d6:	2245      	movs	r2, #69	; 0x45
   1a0d8:	21ff      	movs	r1, #255	; 0xff
   1a0da:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1a0dc:	683b      	ldr	r3, [r7, #0]
   1a0de:	2b00      	cmp	r3, #0
   1a0e0:	d10d      	bne.n	1a0fe <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a0e2:	68fb      	ldr	r3, [r7, #12]
   1a0e4:	691b      	ldr	r3, [r3, #16]
   1a0e6:	2b00      	cmp	r3, #0
   1a0e8:	d013      	beq.n	1a112 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a0ea:	68fb      	ldr	r3, [r7, #12]
   1a0ec:	3310      	adds	r3, #16
   1a0ee:	0018      	movs	r0, r3
   1a0f0:	4b0c      	ldr	r3, [pc, #48]	; (1a124 <xQueueGenericReset+0xac>)
   1a0f2:	4798      	blx	r3
   1a0f4:	1e03      	subs	r3, r0, #0
   1a0f6:	d00c      	beq.n	1a112 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1a0f8:	4b0b      	ldr	r3, [pc, #44]	; (1a128 <xQueueGenericReset+0xb0>)
   1a0fa:	4798      	blx	r3
   1a0fc:	e009      	b.n	1a112 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1a0fe:	68fb      	ldr	r3, [r7, #12]
   1a100:	3310      	adds	r3, #16
   1a102:	0018      	movs	r0, r3
   1a104:	4b09      	ldr	r3, [pc, #36]	; (1a12c <xQueueGenericReset+0xb4>)
   1a106:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1a108:	68fb      	ldr	r3, [r7, #12]
   1a10a:	3324      	adds	r3, #36	; 0x24
   1a10c:	0018      	movs	r0, r3
   1a10e:	4b07      	ldr	r3, [pc, #28]	; (1a12c <xQueueGenericReset+0xb4>)
   1a110:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1a112:	4b07      	ldr	r3, [pc, #28]	; (1a130 <xQueueGenericReset+0xb8>)
   1a114:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1a116:	2301      	movs	r3, #1
}
   1a118:	0018      	movs	r0, r3
   1a11a:	46bd      	mov	sp, r7
   1a11c:	b004      	add	sp, #16
   1a11e:	bd80      	pop	{r7, pc}
   1a120:	00019e49 	.word	0x00019e49
   1a124:	0001c6d9 	.word	0x0001c6d9
   1a128:	00019e31 	.word	0x00019e31
   1a12c:	00019bb9 	.word	0x00019bb9
   1a130:	00019e6d 	.word	0x00019e6d

0001a134 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1a134:	b590      	push	{r4, r7, lr}
   1a136:	b08b      	sub	sp, #44	; 0x2c
   1a138:	af02      	add	r7, sp, #8
   1a13a:	60f8      	str	r0, [r7, #12]
   1a13c:	60b9      	str	r1, [r7, #8]
   1a13e:	1dfb      	adds	r3, r7, #7
   1a140:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1a142:	68fb      	ldr	r3, [r7, #12]
   1a144:	2b00      	cmp	r3, #0
   1a146:	d101      	bne.n	1a14c <xQueueGenericCreate+0x18>
   1a148:	b672      	cpsid	i
   1a14a:	e7fe      	b.n	1a14a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1a14c:	68bb      	ldr	r3, [r7, #8]
   1a14e:	2b00      	cmp	r3, #0
   1a150:	d102      	bne.n	1a158 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1a152:	2300      	movs	r3, #0
   1a154:	61fb      	str	r3, [r7, #28]
   1a156:	e003      	b.n	1a160 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a158:	68fb      	ldr	r3, [r7, #12]
   1a15a:	68ba      	ldr	r2, [r7, #8]
   1a15c:	4353      	muls	r3, r2
   1a15e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1a160:	69fb      	ldr	r3, [r7, #28]
   1a162:	3354      	adds	r3, #84	; 0x54
   1a164:	0018      	movs	r0, r3
   1a166:	4b19      	ldr	r3, [pc, #100]	; (1a1cc <xQueueGenericCreate+0x98>)
   1a168:	4798      	blx	r3
   1a16a:	0003      	movs	r3, r0
   1a16c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1a16e:	69bb      	ldr	r3, [r7, #24]
   1a170:	2b00      	cmp	r3, #0
   1a172:	d00d      	beq.n	1a190 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1a174:	69bb      	ldr	r3, [r7, #24]
   1a176:	3354      	adds	r3, #84	; 0x54
   1a178:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1a17a:	1dfb      	adds	r3, r7, #7
   1a17c:	781c      	ldrb	r4, [r3, #0]
   1a17e:	697a      	ldr	r2, [r7, #20]
   1a180:	68b9      	ldr	r1, [r7, #8]
   1a182:	68f8      	ldr	r0, [r7, #12]
   1a184:	69bb      	ldr	r3, [r7, #24]
   1a186:	9300      	str	r3, [sp, #0]
   1a188:	0023      	movs	r3, r4
   1a18a:	4c11      	ldr	r4, [pc, #68]	; (1a1d0 <xQueueGenericCreate+0x9c>)
   1a18c:	47a0      	blx	r4
   1a18e:	e017      	b.n	1a1c0 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1a190:	4b10      	ldr	r3, [pc, #64]	; (1a1d4 <xQueueGenericCreate+0xa0>)
   1a192:	4798      	blx	r3
   1a194:	0003      	movs	r3, r0
   1a196:	0018      	movs	r0, r3
   1a198:	4b0f      	ldr	r3, [pc, #60]	; (1a1d8 <xQueueGenericCreate+0xa4>)
   1a19a:	4798      	blx	r3
   1a19c:	0003      	movs	r3, r0
   1a19e:	001a      	movs	r2, r3
   1a1a0:	4b0e      	ldr	r3, [pc, #56]	; (1a1dc <xQueueGenericCreate+0xa8>)
   1a1a2:	881b      	ldrh	r3, [r3, #0]
   1a1a4:	4013      	ands	r3, r2
   1a1a6:	b29b      	uxth	r3, r3
   1a1a8:	2b00      	cmp	r3, #0
   1a1aa:	d009      	beq.n	1a1c0 <xQueueGenericCreate+0x8c>
   1a1ac:	1dfb      	adds	r3, r7, #7
   1a1ae:	781b      	ldrb	r3, [r3, #0]
   1a1b0:	4a0b      	ldr	r2, [pc, #44]	; (1a1e0 <xQueueGenericCreate+0xac>)
   1a1b2:	5cd3      	ldrb	r3, [r2, r3]
   1a1b4:	3340      	adds	r3, #64	; 0x40
   1a1b6:	b2db      	uxtb	r3, r3
   1a1b8:	2100      	movs	r1, #0
   1a1ba:	0018      	movs	r0, r3
   1a1bc:	4b09      	ldr	r3, [pc, #36]	; (1a1e4 <xQueueGenericCreate+0xb0>)
   1a1be:	4798      	blx	r3
		}

		return pxNewQueue;
   1a1c0:	69bb      	ldr	r3, [r7, #24]
	}
   1a1c2:	0018      	movs	r0, r3
   1a1c4:	46bd      	mov	sp, r7
   1a1c6:	b009      	add	sp, #36	; 0x24
   1a1c8:	bd90      	pop	{r4, r7, pc}
   1a1ca:	46c0      	nop			; (mov r8, r8)
   1a1cc:	00019f81 	.word	0x00019f81
   1a1d0:	0001a1e9 	.word	0x0001a1e9
   1a1d4:	000180dd 	.word	0x000180dd
   1a1d8:	00017e41 	.word	0x00017e41
   1a1dc:	20000130 	.word	0x20000130
   1a1e0:	20000124 	.word	0x20000124
   1a1e4:	00018b41 	.word	0x00018b41

0001a1e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1a1e8:	b5b0      	push	{r4, r5, r7, lr}
   1a1ea:	b084      	sub	sp, #16
   1a1ec:	af00      	add	r7, sp, #0
   1a1ee:	60f8      	str	r0, [r7, #12]
   1a1f0:	60b9      	str	r1, [r7, #8]
   1a1f2:	607a      	str	r2, [r7, #4]
   1a1f4:	001a      	movs	r2, r3
   1a1f6:	1cfb      	adds	r3, r7, #3
   1a1f8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1a1fa:	68bb      	ldr	r3, [r7, #8]
   1a1fc:	2b00      	cmp	r3, #0
   1a1fe:	d103      	bne.n	1a208 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1a200:	6a3b      	ldr	r3, [r7, #32]
   1a202:	6a3a      	ldr	r2, [r7, #32]
   1a204:	601a      	str	r2, [r3, #0]
   1a206:	e002      	b.n	1a20e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1a208:	6a3b      	ldr	r3, [r7, #32]
   1a20a:	687a      	ldr	r2, [r7, #4]
   1a20c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1a20e:	6a3b      	ldr	r3, [r7, #32]
   1a210:	68fa      	ldr	r2, [r7, #12]
   1a212:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1a214:	6a3b      	ldr	r3, [r7, #32]
   1a216:	68ba      	ldr	r2, [r7, #8]
   1a218:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1a21a:	6a3b      	ldr	r3, [r7, #32]
   1a21c:	2101      	movs	r1, #1
   1a21e:	0018      	movs	r0, r3
   1a220:	4b41      	ldr	r3, [pc, #260]	; (1a328 <prvInitialiseNewQueue+0x140>)
   1a222:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1a224:	6a3b      	ldr	r3, [r7, #32]
   1a226:	1cfa      	adds	r2, r7, #3
   1a228:	2150      	movs	r1, #80	; 0x50
   1a22a:	7812      	ldrb	r2, [r2, #0]
   1a22c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1a22e:	6a3b      	ldr	r3, [r7, #32]
   1a230:	2200      	movs	r2, #0
   1a232:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1a234:	6a3b      	ldr	r3, [r7, #32]
   1a236:	0018      	movs	r0, r3
   1a238:	4b3c      	ldr	r3, [pc, #240]	; (1a32c <prvInitialiseNewQueue+0x144>)
   1a23a:	4798      	blx	r3
   1a23c:	0003      	movs	r3, r0
   1a23e:	001a      	movs	r2, r3
   1a240:	4b3b      	ldr	r3, [pc, #236]	; (1a330 <prvInitialiseNewQueue+0x148>)
   1a242:	5c9b      	ldrb	r3, [r3, r2]
   1a244:	0018      	movs	r0, r3
   1a246:	4b3b      	ldr	r3, [pc, #236]	; (1a334 <prvInitialiseNewQueue+0x14c>)
   1a248:	4798      	blx	r3
   1a24a:	0003      	movs	r3, r0
   1a24c:	b29a      	uxth	r2, r3
   1a24e:	6a3b      	ldr	r3, [r7, #32]
   1a250:	0011      	movs	r1, r2
   1a252:	0018      	movs	r0, r3
   1a254:	4b38      	ldr	r3, [pc, #224]	; (1a338 <prvInitialiseNewQueue+0x150>)
   1a256:	4798      	blx	r3
   1a258:	4b38      	ldr	r3, [pc, #224]	; (1a33c <prvInitialiseNewQueue+0x154>)
   1a25a:	881a      	ldrh	r2, [r3, #0]
   1a25c:	6a3b      	ldr	r3, [r7, #32]
   1a25e:	0011      	movs	r1, r2
   1a260:	0018      	movs	r0, r3
   1a262:	4b37      	ldr	r3, [pc, #220]	; (1a340 <prvInitialiseNewQueue+0x158>)
   1a264:	4798      	blx	r3
   1a266:	6a3b      	ldr	r3, [r7, #32]
   1a268:	0018      	movs	r0, r3
   1a26a:	4b30      	ldr	r3, [pc, #192]	; (1a32c <prvInitialiseNewQueue+0x144>)
   1a26c:	4798      	blx	r3
   1a26e:	0003      	movs	r3, r0
   1a270:	001a      	movs	r2, r3
   1a272:	4b2f      	ldr	r3, [pc, #188]	; (1a330 <prvInitialiseNewQueue+0x148>)
   1a274:	5c9c      	ldrb	r4, [r3, r2]
   1a276:	6a3b      	ldr	r3, [r7, #32]
   1a278:	0018      	movs	r0, r3
   1a27a:	4b32      	ldr	r3, [pc, #200]	; (1a344 <prvInitialiseNewQueue+0x15c>)
   1a27c:	4798      	blx	r3
   1a27e:	0003      	movs	r3, r0
   1a280:	b2db      	uxtb	r3, r3
   1a282:	0019      	movs	r1, r3
   1a284:	0020      	movs	r0, r4
   1a286:	4b30      	ldr	r3, [pc, #192]	; (1a348 <prvInitialiseNewQueue+0x160>)
   1a288:	4798      	blx	r3
   1a28a:	4b30      	ldr	r3, [pc, #192]	; (1a34c <prvInitialiseNewQueue+0x164>)
   1a28c:	4798      	blx	r3
   1a28e:	0003      	movs	r3, r0
   1a290:	0018      	movs	r0, r3
   1a292:	4b2f      	ldr	r3, [pc, #188]	; (1a350 <prvInitialiseNewQueue+0x168>)
   1a294:	4798      	blx	r3
   1a296:	0003      	movs	r3, r0
   1a298:	001a      	movs	r2, r3
   1a29a:	4b2e      	ldr	r3, [pc, #184]	; (1a354 <prvInitialiseNewQueue+0x16c>)
   1a29c:	881b      	ldrh	r3, [r3, #0]
   1a29e:	4013      	ands	r3, r2
   1a2a0:	b29b      	uxth	r3, r3
   1a2a2:	2b00      	cmp	r3, #0
   1a2a4:	d029      	beq.n	1a2fa <prvInitialiseNewQueue+0x112>
   1a2a6:	6a3b      	ldr	r3, [r7, #32]
   1a2a8:	0018      	movs	r0, r3
   1a2aa:	4b2b      	ldr	r3, [pc, #172]	; (1a358 <prvInitialiseNewQueue+0x170>)
   1a2ac:	4798      	blx	r3
   1a2ae:	0003      	movs	r3, r0
   1a2b0:	001a      	movs	r2, r3
   1a2b2:	4b28      	ldr	r3, [pc, #160]	; (1a354 <prvInitialiseNewQueue+0x16c>)
   1a2b4:	881b      	ldrh	r3, [r3, #0]
   1a2b6:	4013      	ands	r3, r2
   1a2b8:	b29b      	uxth	r3, r3
   1a2ba:	2b00      	cmp	r3, #0
   1a2bc:	d01d      	beq.n	1a2fa <prvInitialiseNewQueue+0x112>
   1a2be:	6a3b      	ldr	r3, [r7, #32]
   1a2c0:	0018      	movs	r0, r3
   1a2c2:	4b1a      	ldr	r3, [pc, #104]	; (1a32c <prvInitialiseNewQueue+0x144>)
   1a2c4:	4798      	blx	r3
   1a2c6:	0003      	movs	r3, r0
   1a2c8:	001a      	movs	r2, r3
   1a2ca:	4b19      	ldr	r3, [pc, #100]	; (1a330 <prvInitialiseNewQueue+0x148>)
   1a2cc:	5c9b      	ldrb	r3, [r3, r2]
   1a2ce:	3318      	adds	r3, #24
   1a2d0:	b2db      	uxtb	r3, r3
   1a2d2:	001d      	movs	r5, r3
   1a2d4:	6a3b      	ldr	r3, [r7, #32]
   1a2d6:	0018      	movs	r0, r3
   1a2d8:	4b14      	ldr	r3, [pc, #80]	; (1a32c <prvInitialiseNewQueue+0x144>)
   1a2da:	4798      	blx	r3
   1a2dc:	0003      	movs	r3, r0
   1a2de:	001a      	movs	r2, r3
   1a2e0:	4b13      	ldr	r3, [pc, #76]	; (1a330 <prvInitialiseNewQueue+0x148>)
   1a2e2:	5c9c      	ldrb	r4, [r3, r2]
   1a2e4:	6a3b      	ldr	r3, [r7, #32]
   1a2e6:	0018      	movs	r0, r3
   1a2e8:	4b16      	ldr	r3, [pc, #88]	; (1a344 <prvInitialiseNewQueue+0x15c>)
   1a2ea:	4798      	blx	r3
   1a2ec:	0003      	movs	r3, r0
   1a2ee:	b2db      	uxtb	r3, r3
   1a2f0:	001a      	movs	r2, r3
   1a2f2:	0021      	movs	r1, r4
   1a2f4:	0028      	movs	r0, r5
   1a2f6:	4b19      	ldr	r3, [pc, #100]	; (1a35c <prvInitialiseNewQueue+0x174>)
   1a2f8:	4798      	blx	r3
   1a2fa:	6a3b      	ldr	r3, [r7, #32]
   1a2fc:	0018      	movs	r0, r3
   1a2fe:	4b0b      	ldr	r3, [pc, #44]	; (1a32c <prvInitialiseNewQueue+0x144>)
   1a300:	4798      	blx	r3
   1a302:	0003      	movs	r3, r0
   1a304:	001a      	movs	r2, r3
   1a306:	4b0a      	ldr	r3, [pc, #40]	; (1a330 <prvInitialiseNewQueue+0x148>)
   1a308:	5c9c      	ldrb	r4, [r3, r2]
   1a30a:	6a3b      	ldr	r3, [r7, #32]
   1a30c:	0018      	movs	r0, r3
   1a30e:	4b0d      	ldr	r3, [pc, #52]	; (1a344 <prvInitialiseNewQueue+0x15c>)
   1a310:	4798      	blx	r3
   1a312:	0003      	movs	r3, r0
   1a314:	b2db      	uxtb	r3, r3
   1a316:	2200      	movs	r2, #0
   1a318:	0019      	movs	r1, r3
   1a31a:	0020      	movs	r0, r4
   1a31c:	4b10      	ldr	r3, [pc, #64]	; (1a360 <prvInitialiseNewQueue+0x178>)
   1a31e:	4798      	blx	r3
}
   1a320:	46c0      	nop			; (mov r8, r8)
   1a322:	46bd      	mov	sp, r7
   1a324:	b004      	add	sp, #16
   1a326:	bdb0      	pop	{r4, r5, r7, pc}
   1a328:	0001a079 	.word	0x0001a079
   1a32c:	00017e01 	.word	0x00017e01
   1a330:	20000124 	.word	0x20000124
   1a334:	000193c1 	.word	0x000193c1
   1a338:	00017f25 	.word	0x00017f25
   1a33c:	20000132 	.word	0x20000132
   1a340:	00017f61 	.word	0x00017f61
   1a344:	00017ee1 	.word	0x00017ee1
   1a348:	00019559 	.word	0x00019559
   1a34c:	000180dd 	.word	0x000180dd
   1a350:	00017e41 	.word	0x00017e41
   1a354:	20000130 	.word	0x20000130
   1a358:	00017f01 	.word	0x00017f01
   1a35c:	00018839 	.word	0x00018839
   1a360:	00018e95 	.word	0x00018e95

0001a364 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1a364:	b590      	push	{r4, r7, lr}
   1a366:	b083      	sub	sp, #12
   1a368:	af00      	add	r7, sp, #0
   1a36a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1a36c:	687b      	ldr	r3, [r7, #4]
   1a36e:	2b00      	cmp	r3, #0
   1a370:	d00e      	beq.n	1a390 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1a372:	687b      	ldr	r3, [r7, #4]
   1a374:	2200      	movs	r2, #0
   1a376:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1a378:	687b      	ldr	r3, [r7, #4]
   1a37a:	2200      	movs	r2, #0
   1a37c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1a37e:	687b      	ldr	r3, [r7, #4]
   1a380:	2200      	movs	r2, #0
   1a382:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1a384:	6878      	ldr	r0, [r7, #4]
   1a386:	2300      	movs	r3, #0
   1a388:	2200      	movs	r2, #0
   1a38a:	2100      	movs	r1, #0
   1a38c:	4c02      	ldr	r4, [pc, #8]	; (1a398 <prvInitialiseMutex+0x34>)
   1a38e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1a390:	46c0      	nop			; (mov r8, r8)
   1a392:	46bd      	mov	sp, r7
   1a394:	b003      	add	sp, #12
   1a396:	bd90      	pop	{r4, r7, pc}
   1a398:	0001a3dd 	.word	0x0001a3dd

0001a39c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1a39c:	b580      	push	{r7, lr}
   1a39e:	b086      	sub	sp, #24
   1a3a0:	af00      	add	r7, sp, #0
   1a3a2:	0002      	movs	r2, r0
   1a3a4:	1dfb      	adds	r3, r7, #7
   1a3a6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1a3a8:	2301      	movs	r3, #1
   1a3aa:	617b      	str	r3, [r7, #20]
   1a3ac:	2300      	movs	r3, #0
   1a3ae:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1a3b0:	1dfb      	adds	r3, r7, #7
   1a3b2:	781a      	ldrb	r2, [r3, #0]
   1a3b4:	6939      	ldr	r1, [r7, #16]
   1a3b6:	697b      	ldr	r3, [r7, #20]
   1a3b8:	0018      	movs	r0, r3
   1a3ba:	4b06      	ldr	r3, [pc, #24]	; (1a3d4 <xQueueCreateMutex+0x38>)
   1a3bc:	4798      	blx	r3
   1a3be:	0003      	movs	r3, r0
   1a3c0:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1a3c2:	68fb      	ldr	r3, [r7, #12]
   1a3c4:	0018      	movs	r0, r3
   1a3c6:	4b04      	ldr	r3, [pc, #16]	; (1a3d8 <xQueueCreateMutex+0x3c>)
   1a3c8:	4798      	blx	r3

		return pxNewQueue;
   1a3ca:	68fb      	ldr	r3, [r7, #12]
	}
   1a3cc:	0018      	movs	r0, r3
   1a3ce:	46bd      	mov	sp, r7
   1a3d0:	b006      	add	sp, #24
   1a3d2:	bd80      	pop	{r7, pc}
   1a3d4:	0001a135 	.word	0x0001a135
   1a3d8:	0001a365 	.word	0x0001a365

0001a3dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1a3dc:	b5b0      	push	{r4, r5, r7, lr}
   1a3de:	b08a      	sub	sp, #40	; 0x28
   1a3e0:	af00      	add	r7, sp, #0
   1a3e2:	60f8      	str	r0, [r7, #12]
   1a3e4:	60b9      	str	r1, [r7, #8]
   1a3e6:	607a      	str	r2, [r7, #4]
   1a3e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1a3ea:	2300      	movs	r3, #0
   1a3ec:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a3ee:	68fb      	ldr	r3, [r7, #12]
   1a3f0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1a3f2:	6a3b      	ldr	r3, [r7, #32]
   1a3f4:	2b00      	cmp	r3, #0
   1a3f6:	d101      	bne.n	1a3fc <xQueueGenericSend+0x20>
   1a3f8:	b672      	cpsid	i
   1a3fa:	e7fe      	b.n	1a3fa <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a3fc:	68bb      	ldr	r3, [r7, #8]
   1a3fe:	2b00      	cmp	r3, #0
   1a400:	d103      	bne.n	1a40a <xQueueGenericSend+0x2e>
   1a402:	6a3b      	ldr	r3, [r7, #32]
   1a404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a406:	2b00      	cmp	r3, #0
   1a408:	d101      	bne.n	1a40e <xQueueGenericSend+0x32>
   1a40a:	2301      	movs	r3, #1
   1a40c:	e000      	b.n	1a410 <xQueueGenericSend+0x34>
   1a40e:	2300      	movs	r3, #0
   1a410:	2b00      	cmp	r3, #0
   1a412:	d101      	bne.n	1a418 <xQueueGenericSend+0x3c>
   1a414:	b672      	cpsid	i
   1a416:	e7fe      	b.n	1a416 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a418:	683b      	ldr	r3, [r7, #0]
   1a41a:	2b02      	cmp	r3, #2
   1a41c:	d103      	bne.n	1a426 <xQueueGenericSend+0x4a>
   1a41e:	6a3b      	ldr	r3, [r7, #32]
   1a420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a422:	2b01      	cmp	r3, #1
   1a424:	d101      	bne.n	1a42a <xQueueGenericSend+0x4e>
   1a426:	2301      	movs	r3, #1
   1a428:	e000      	b.n	1a42c <xQueueGenericSend+0x50>
   1a42a:	2300      	movs	r3, #0
   1a42c:	2b00      	cmp	r3, #0
   1a42e:	d101      	bne.n	1a434 <xQueueGenericSend+0x58>
   1a430:	b672      	cpsid	i
   1a432:	e7fe      	b.n	1a432 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a434:	4bbc      	ldr	r3, [pc, #752]	; (1a728 <xQueueGenericSend+0x34c>)
   1a436:	4798      	blx	r3
   1a438:	1e03      	subs	r3, r0, #0
   1a43a:	d102      	bne.n	1a442 <xQueueGenericSend+0x66>
   1a43c:	687b      	ldr	r3, [r7, #4]
   1a43e:	2b00      	cmp	r3, #0
   1a440:	d101      	bne.n	1a446 <xQueueGenericSend+0x6a>
   1a442:	2301      	movs	r3, #1
   1a444:	e000      	b.n	1a448 <xQueueGenericSend+0x6c>
   1a446:	2300      	movs	r3, #0
   1a448:	2b00      	cmp	r3, #0
   1a44a:	d101      	bne.n	1a450 <xQueueGenericSend+0x74>
   1a44c:	b672      	cpsid	i
   1a44e:	e7fe      	b.n	1a44e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1a450:	4bb6      	ldr	r3, [pc, #728]	; (1a72c <xQueueGenericSend+0x350>)
   1a452:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a454:	6a3b      	ldr	r3, [r7, #32]
   1a456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a458:	6a3b      	ldr	r3, [r7, #32]
   1a45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a45c:	429a      	cmp	r2, r3
   1a45e:	d303      	bcc.n	1a468 <xQueueGenericSend+0x8c>
   1a460:	683b      	ldr	r3, [r7, #0]
   1a462:	2b02      	cmp	r3, #2
   1a464:	d000      	beq.n	1a468 <xQueueGenericSend+0x8c>
   1a466:	e08e      	b.n	1a586 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1a468:	4bb1      	ldr	r3, [pc, #708]	; (1a730 <xQueueGenericSend+0x354>)
   1a46a:	4798      	blx	r3
   1a46c:	0003      	movs	r3, r0
   1a46e:	0018      	movs	r0, r3
   1a470:	4bb0      	ldr	r3, [pc, #704]	; (1a734 <xQueueGenericSend+0x358>)
   1a472:	4798      	blx	r3
   1a474:	0003      	movs	r3, r0
   1a476:	001a      	movs	r2, r3
   1a478:	4baf      	ldr	r3, [pc, #700]	; (1a738 <xQueueGenericSend+0x35c>)
   1a47a:	881b      	ldrh	r3, [r3, #0]
   1a47c:	4013      	ands	r3, r2
   1a47e:	b29b      	uxth	r3, r3
   1a480:	2b00      	cmp	r3, #0
   1a482:	d02e      	beq.n	1a4e2 <xQueueGenericSend+0x106>
   1a484:	6a3b      	ldr	r3, [r7, #32]
   1a486:	0018      	movs	r0, r3
   1a488:	4bac      	ldr	r3, [pc, #688]	; (1a73c <xQueueGenericSend+0x360>)
   1a48a:	4798      	blx	r3
   1a48c:	0003      	movs	r3, r0
   1a48e:	001a      	movs	r2, r3
   1a490:	4ba9      	ldr	r3, [pc, #676]	; (1a738 <xQueueGenericSend+0x35c>)
   1a492:	881b      	ldrh	r3, [r3, #0]
   1a494:	4013      	ands	r3, r2
   1a496:	b29b      	uxth	r3, r3
   1a498:	2b00      	cmp	r3, #0
   1a49a:	d022      	beq.n	1a4e2 <xQueueGenericSend+0x106>
   1a49c:	683b      	ldr	r3, [r7, #0]
   1a49e:	2b00      	cmp	r3, #0
   1a4a0:	d10b      	bne.n	1a4ba <xQueueGenericSend+0xde>
   1a4a2:	6a3b      	ldr	r3, [r7, #32]
   1a4a4:	0018      	movs	r0, r3
   1a4a6:	4ba6      	ldr	r3, [pc, #664]	; (1a740 <xQueueGenericSend+0x364>)
   1a4a8:	4798      	blx	r3
   1a4aa:	0003      	movs	r3, r0
   1a4ac:	001a      	movs	r2, r3
   1a4ae:	4ba5      	ldr	r3, [pc, #660]	; (1a744 <xQueueGenericSend+0x368>)
   1a4b0:	5c9b      	ldrb	r3, [r3, r2]
   1a4b2:	3320      	adds	r3, #32
   1a4b4:	b2db      	uxtb	r3, r3
   1a4b6:	001d      	movs	r5, r3
   1a4b8:	e000      	b.n	1a4bc <xQueueGenericSend+0xe0>
   1a4ba:	2525      	movs	r5, #37	; 0x25
   1a4bc:	6a3b      	ldr	r3, [r7, #32]
   1a4be:	0018      	movs	r0, r3
   1a4c0:	4b9f      	ldr	r3, [pc, #636]	; (1a740 <xQueueGenericSend+0x364>)
   1a4c2:	4798      	blx	r3
   1a4c4:	0003      	movs	r3, r0
   1a4c6:	001a      	movs	r2, r3
   1a4c8:	4b9e      	ldr	r3, [pc, #632]	; (1a744 <xQueueGenericSend+0x368>)
   1a4ca:	5c9c      	ldrb	r4, [r3, r2]
   1a4cc:	6a3b      	ldr	r3, [r7, #32]
   1a4ce:	0018      	movs	r0, r3
   1a4d0:	4b9d      	ldr	r3, [pc, #628]	; (1a748 <xQueueGenericSend+0x36c>)
   1a4d2:	4798      	blx	r3
   1a4d4:	0003      	movs	r3, r0
   1a4d6:	b2db      	uxtb	r3, r3
   1a4d8:	001a      	movs	r2, r3
   1a4da:	0021      	movs	r1, r4
   1a4dc:	0028      	movs	r0, r5
   1a4de:	4b9b      	ldr	r3, [pc, #620]	; (1a74c <xQueueGenericSend+0x370>)
   1a4e0:	4798      	blx	r3
   1a4e2:	6a3b      	ldr	r3, [r7, #32]
   1a4e4:	0018      	movs	r0, r3
   1a4e6:	4b96      	ldr	r3, [pc, #600]	; (1a740 <xQueueGenericSend+0x364>)
   1a4e8:	4798      	blx	r3
   1a4ea:	0003      	movs	r3, r0
   1a4ec:	001a      	movs	r2, r3
   1a4ee:	4b95      	ldr	r3, [pc, #596]	; (1a744 <xQueueGenericSend+0x368>)
   1a4f0:	5c9c      	ldrb	r4, [r3, r2]
   1a4f2:	6a3b      	ldr	r3, [r7, #32]
   1a4f4:	0018      	movs	r0, r3
   1a4f6:	4b94      	ldr	r3, [pc, #592]	; (1a748 <xQueueGenericSend+0x36c>)
   1a4f8:	4798      	blx	r3
   1a4fa:	0003      	movs	r3, r0
   1a4fc:	b2dd      	uxtb	r5, r3
   1a4fe:	6a3b      	ldr	r3, [r7, #32]
   1a500:	0018      	movs	r0, r3
   1a502:	4b8f      	ldr	r3, [pc, #572]	; (1a740 <xQueueGenericSend+0x364>)
   1a504:	4798      	blx	r3
   1a506:	0003      	movs	r3, r0
   1a508:	001a      	movs	r2, r3
   1a50a:	4b8e      	ldr	r3, [pc, #568]	; (1a744 <xQueueGenericSend+0x368>)
   1a50c:	5c9b      	ldrb	r3, [r3, r2]
   1a50e:	2b02      	cmp	r3, #2
   1a510:	d005      	beq.n	1a51e <xQueueGenericSend+0x142>
   1a512:	6a3b      	ldr	r3, [r7, #32]
   1a514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a516:	b2db      	uxtb	r3, r3
   1a518:	3301      	adds	r3, #1
   1a51a:	b2db      	uxtb	r3, r3
   1a51c:	e000      	b.n	1a520 <xQueueGenericSend+0x144>
   1a51e:	2300      	movs	r3, #0
   1a520:	001a      	movs	r2, r3
   1a522:	0029      	movs	r1, r5
   1a524:	0020      	movs	r0, r4
   1a526:	4b8a      	ldr	r3, [pc, #552]	; (1a750 <xQueueGenericSend+0x374>)
   1a528:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1a52a:	683a      	ldr	r2, [r7, #0]
   1a52c:	68b9      	ldr	r1, [r7, #8]
   1a52e:	6a3b      	ldr	r3, [r7, #32]
   1a530:	0018      	movs	r0, r3
   1a532:	4b88      	ldr	r3, [pc, #544]	; (1a754 <xQueueGenericSend+0x378>)
   1a534:	4798      	blx	r3
   1a536:	0003      	movs	r3, r0
   1a538:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a53a:	6a3b      	ldr	r3, [r7, #32]
   1a53c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a53e:	2b00      	cmp	r3, #0
   1a540:	d00a      	beq.n	1a558 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1a542:	683a      	ldr	r2, [r7, #0]
   1a544:	6a3b      	ldr	r3, [r7, #32]
   1a546:	0011      	movs	r1, r2
   1a548:	0018      	movs	r0, r3
   1a54a:	4b83      	ldr	r3, [pc, #524]	; (1a758 <xQueueGenericSend+0x37c>)
   1a54c:	4798      	blx	r3
   1a54e:	1e03      	subs	r3, r0, #0
   1a550:	d015      	beq.n	1a57e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1a552:	4b82      	ldr	r3, [pc, #520]	; (1a75c <xQueueGenericSend+0x380>)
   1a554:	4798      	blx	r3
   1a556:	e012      	b.n	1a57e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a558:	6a3b      	ldr	r3, [r7, #32]
   1a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a55c:	2b00      	cmp	r3, #0
   1a55e:	d009      	beq.n	1a574 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a560:	6a3b      	ldr	r3, [r7, #32]
   1a562:	3324      	adds	r3, #36	; 0x24
   1a564:	0018      	movs	r0, r3
   1a566:	4b7e      	ldr	r3, [pc, #504]	; (1a760 <xQueueGenericSend+0x384>)
   1a568:	4798      	blx	r3
   1a56a:	1e03      	subs	r3, r0, #0
   1a56c:	d007      	beq.n	1a57e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1a56e:	4b7b      	ldr	r3, [pc, #492]	; (1a75c <xQueueGenericSend+0x380>)
   1a570:	4798      	blx	r3
   1a572:	e004      	b.n	1a57e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1a574:	69fb      	ldr	r3, [r7, #28]
   1a576:	2b00      	cmp	r3, #0
   1a578:	d001      	beq.n	1a57e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1a57a:	4b78      	ldr	r3, [pc, #480]	; (1a75c <xQueueGenericSend+0x380>)
   1a57c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1a57e:	4b79      	ldr	r3, [pc, #484]	; (1a764 <xQueueGenericSend+0x388>)
   1a580:	4798      	blx	r3
				return pdPASS;
   1a582:	2301      	movs	r3, #1
   1a584:	e142      	b.n	1a80c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a586:	687b      	ldr	r3, [r7, #4]
   1a588:	2b00      	cmp	r3, #0
   1a58a:	d140      	bne.n	1a60e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1a58c:	4b75      	ldr	r3, [pc, #468]	; (1a764 <xQueueGenericSend+0x388>)
   1a58e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1a590:	4b67      	ldr	r3, [pc, #412]	; (1a730 <xQueueGenericSend+0x354>)
   1a592:	4798      	blx	r3
   1a594:	0003      	movs	r3, r0
   1a596:	0018      	movs	r0, r3
   1a598:	4b66      	ldr	r3, [pc, #408]	; (1a734 <xQueueGenericSend+0x358>)
   1a59a:	4798      	blx	r3
   1a59c:	0003      	movs	r3, r0
   1a59e:	001a      	movs	r2, r3
   1a5a0:	4b65      	ldr	r3, [pc, #404]	; (1a738 <xQueueGenericSend+0x35c>)
   1a5a2:	881b      	ldrh	r3, [r3, #0]
   1a5a4:	4013      	ands	r3, r2
   1a5a6:	b29b      	uxth	r3, r3
   1a5a8:	2b00      	cmp	r3, #0
   1a5aa:	d02e      	beq.n	1a60a <xQueueGenericSend+0x22e>
   1a5ac:	6a3b      	ldr	r3, [r7, #32]
   1a5ae:	0018      	movs	r0, r3
   1a5b0:	4b62      	ldr	r3, [pc, #392]	; (1a73c <xQueueGenericSend+0x360>)
   1a5b2:	4798      	blx	r3
   1a5b4:	0003      	movs	r3, r0
   1a5b6:	001a      	movs	r2, r3
   1a5b8:	4b5f      	ldr	r3, [pc, #380]	; (1a738 <xQueueGenericSend+0x35c>)
   1a5ba:	881b      	ldrh	r3, [r3, #0]
   1a5bc:	4013      	ands	r3, r2
   1a5be:	b29b      	uxth	r3, r3
   1a5c0:	2b00      	cmp	r3, #0
   1a5c2:	d022      	beq.n	1a60a <xQueueGenericSend+0x22e>
   1a5c4:	683b      	ldr	r3, [r7, #0]
   1a5c6:	2b00      	cmp	r3, #0
   1a5c8:	d10b      	bne.n	1a5e2 <xQueueGenericSend+0x206>
   1a5ca:	6a3b      	ldr	r3, [r7, #32]
   1a5cc:	0018      	movs	r0, r3
   1a5ce:	4b5c      	ldr	r3, [pc, #368]	; (1a740 <xQueueGenericSend+0x364>)
   1a5d0:	4798      	blx	r3
   1a5d2:	0003      	movs	r3, r0
   1a5d4:	001a      	movs	r2, r3
   1a5d6:	4b5b      	ldr	r3, [pc, #364]	; (1a744 <xQueueGenericSend+0x368>)
   1a5d8:	5c9b      	ldrb	r3, [r3, r2]
   1a5da:	3348      	adds	r3, #72	; 0x48
   1a5dc:	b2db      	uxtb	r3, r3
   1a5de:	001d      	movs	r5, r3
   1a5e0:	e000      	b.n	1a5e4 <xQueueGenericSend+0x208>
   1a5e2:	254d      	movs	r5, #77	; 0x4d
   1a5e4:	6a3b      	ldr	r3, [r7, #32]
   1a5e6:	0018      	movs	r0, r3
   1a5e8:	4b55      	ldr	r3, [pc, #340]	; (1a740 <xQueueGenericSend+0x364>)
   1a5ea:	4798      	blx	r3
   1a5ec:	0003      	movs	r3, r0
   1a5ee:	001a      	movs	r2, r3
   1a5f0:	4b54      	ldr	r3, [pc, #336]	; (1a744 <xQueueGenericSend+0x368>)
   1a5f2:	5c9c      	ldrb	r4, [r3, r2]
   1a5f4:	6a3b      	ldr	r3, [r7, #32]
   1a5f6:	0018      	movs	r0, r3
   1a5f8:	4b53      	ldr	r3, [pc, #332]	; (1a748 <xQueueGenericSend+0x36c>)
   1a5fa:	4798      	blx	r3
   1a5fc:	0003      	movs	r3, r0
   1a5fe:	b2db      	uxtb	r3, r3
   1a600:	001a      	movs	r2, r3
   1a602:	0021      	movs	r1, r4
   1a604:	0028      	movs	r0, r5
   1a606:	4b51      	ldr	r3, [pc, #324]	; (1a74c <xQueueGenericSend+0x370>)
   1a608:	4798      	blx	r3
					return errQUEUE_FULL;
   1a60a:	2300      	movs	r3, #0
   1a60c:	e0fe      	b.n	1a80c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a610:	2b00      	cmp	r3, #0
   1a612:	d106      	bne.n	1a622 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a614:	2314      	movs	r3, #20
   1a616:	18fb      	adds	r3, r7, r3
   1a618:	0018      	movs	r0, r3
   1a61a:	4b53      	ldr	r3, [pc, #332]	; (1a768 <xQueueGenericSend+0x38c>)
   1a61c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a61e:	2301      	movs	r3, #1
   1a620:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a622:	4b50      	ldr	r3, [pc, #320]	; (1a764 <xQueueGenericSend+0x388>)
   1a624:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a626:	4b51      	ldr	r3, [pc, #324]	; (1a76c <xQueueGenericSend+0x390>)
   1a628:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a62a:	4b40      	ldr	r3, [pc, #256]	; (1a72c <xQueueGenericSend+0x350>)
   1a62c:	4798      	blx	r3
   1a62e:	6a3b      	ldr	r3, [r7, #32]
   1a630:	2244      	movs	r2, #68	; 0x44
   1a632:	5c9b      	ldrb	r3, [r3, r2]
   1a634:	b25b      	sxtb	r3, r3
   1a636:	3301      	adds	r3, #1
   1a638:	d103      	bne.n	1a642 <xQueueGenericSend+0x266>
   1a63a:	6a3b      	ldr	r3, [r7, #32]
   1a63c:	2244      	movs	r2, #68	; 0x44
   1a63e:	2100      	movs	r1, #0
   1a640:	5499      	strb	r1, [r3, r2]
   1a642:	6a3b      	ldr	r3, [r7, #32]
   1a644:	2245      	movs	r2, #69	; 0x45
   1a646:	5c9b      	ldrb	r3, [r3, r2]
   1a648:	b25b      	sxtb	r3, r3
   1a64a:	3301      	adds	r3, #1
   1a64c:	d103      	bne.n	1a656 <xQueueGenericSend+0x27a>
   1a64e:	6a3b      	ldr	r3, [r7, #32]
   1a650:	2245      	movs	r2, #69	; 0x45
   1a652:	2100      	movs	r1, #0
   1a654:	5499      	strb	r1, [r3, r2]
   1a656:	4b43      	ldr	r3, [pc, #268]	; (1a764 <xQueueGenericSend+0x388>)
   1a658:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a65a:	1d3a      	adds	r2, r7, #4
   1a65c:	2314      	movs	r3, #20
   1a65e:	18fb      	adds	r3, r7, r3
   1a660:	0011      	movs	r1, r2
   1a662:	0018      	movs	r0, r3
   1a664:	4b42      	ldr	r3, [pc, #264]	; (1a770 <xQueueGenericSend+0x394>)
   1a666:	4798      	blx	r3
   1a668:	1e03      	subs	r3, r0, #0
   1a66a:	d000      	beq.n	1a66e <xQueueGenericSend+0x292>
   1a66c:	e08a      	b.n	1a784 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1a66e:	6a3b      	ldr	r3, [r7, #32]
   1a670:	0018      	movs	r0, r3
   1a672:	4b40      	ldr	r3, [pc, #256]	; (1a774 <xQueueGenericSend+0x398>)
   1a674:	4798      	blx	r3
   1a676:	1e03      	subs	r3, r0, #0
   1a678:	d04f      	beq.n	1a71a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1a67a:	4b2d      	ldr	r3, [pc, #180]	; (1a730 <xQueueGenericSend+0x354>)
   1a67c:	4798      	blx	r3
   1a67e:	0003      	movs	r3, r0
   1a680:	0018      	movs	r0, r3
   1a682:	4b2c      	ldr	r3, [pc, #176]	; (1a734 <xQueueGenericSend+0x358>)
   1a684:	4798      	blx	r3
   1a686:	0003      	movs	r3, r0
   1a688:	001a      	movs	r2, r3
   1a68a:	4b2b      	ldr	r3, [pc, #172]	; (1a738 <xQueueGenericSend+0x35c>)
   1a68c:	881b      	ldrh	r3, [r3, #0]
   1a68e:	4013      	ands	r3, r2
   1a690:	b29b      	uxth	r3, r3
   1a692:	2b00      	cmp	r3, #0
   1a694:	d02e      	beq.n	1a6f4 <xQueueGenericSend+0x318>
   1a696:	6a3b      	ldr	r3, [r7, #32]
   1a698:	0018      	movs	r0, r3
   1a69a:	4b28      	ldr	r3, [pc, #160]	; (1a73c <xQueueGenericSend+0x360>)
   1a69c:	4798      	blx	r3
   1a69e:	0003      	movs	r3, r0
   1a6a0:	001a      	movs	r2, r3
   1a6a2:	4b25      	ldr	r3, [pc, #148]	; (1a738 <xQueueGenericSend+0x35c>)
   1a6a4:	881b      	ldrh	r3, [r3, #0]
   1a6a6:	4013      	ands	r3, r2
   1a6a8:	b29b      	uxth	r3, r3
   1a6aa:	2b00      	cmp	r3, #0
   1a6ac:	d022      	beq.n	1a6f4 <xQueueGenericSend+0x318>
   1a6ae:	683b      	ldr	r3, [r7, #0]
   1a6b0:	2b00      	cmp	r3, #0
   1a6b2:	d10b      	bne.n	1a6cc <xQueueGenericSend+0x2f0>
   1a6b4:	6a3b      	ldr	r3, [r7, #32]
   1a6b6:	0018      	movs	r0, r3
   1a6b8:	4b21      	ldr	r3, [pc, #132]	; (1a740 <xQueueGenericSend+0x364>)
   1a6ba:	4798      	blx	r3
   1a6bc:	0003      	movs	r3, r0
   1a6be:	001a      	movs	r2, r3
   1a6c0:	4b20      	ldr	r3, [pc, #128]	; (1a744 <xQueueGenericSend+0x368>)
   1a6c2:	5c9b      	ldrb	r3, [r3, r2]
   1a6c4:	3370      	adds	r3, #112	; 0x70
   1a6c6:	b2db      	uxtb	r3, r3
   1a6c8:	001d      	movs	r5, r3
   1a6ca:	e000      	b.n	1a6ce <xQueueGenericSend+0x2f2>
   1a6cc:	2575      	movs	r5, #117	; 0x75
   1a6ce:	6a3b      	ldr	r3, [r7, #32]
   1a6d0:	0018      	movs	r0, r3
   1a6d2:	4b1b      	ldr	r3, [pc, #108]	; (1a740 <xQueueGenericSend+0x364>)
   1a6d4:	4798      	blx	r3
   1a6d6:	0003      	movs	r3, r0
   1a6d8:	001a      	movs	r2, r3
   1a6da:	4b1a      	ldr	r3, [pc, #104]	; (1a744 <xQueueGenericSend+0x368>)
   1a6dc:	5c9c      	ldrb	r4, [r3, r2]
   1a6de:	6a3b      	ldr	r3, [r7, #32]
   1a6e0:	0018      	movs	r0, r3
   1a6e2:	4b19      	ldr	r3, [pc, #100]	; (1a748 <xQueueGenericSend+0x36c>)
   1a6e4:	4798      	blx	r3
   1a6e6:	0003      	movs	r3, r0
   1a6e8:	b2db      	uxtb	r3, r3
   1a6ea:	001a      	movs	r2, r3
   1a6ec:	0021      	movs	r1, r4
   1a6ee:	0028      	movs	r0, r5
   1a6f0:	4b16      	ldr	r3, [pc, #88]	; (1a74c <xQueueGenericSend+0x370>)
   1a6f2:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1a6f4:	6a3b      	ldr	r3, [r7, #32]
   1a6f6:	3310      	adds	r3, #16
   1a6f8:	687a      	ldr	r2, [r7, #4]
   1a6fa:	0011      	movs	r1, r2
   1a6fc:	0018      	movs	r0, r3
   1a6fe:	4b1e      	ldr	r3, [pc, #120]	; (1a778 <xQueueGenericSend+0x39c>)
   1a700:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1a702:	6a3b      	ldr	r3, [r7, #32]
   1a704:	0018      	movs	r0, r3
   1a706:	4b1d      	ldr	r3, [pc, #116]	; (1a77c <xQueueGenericSend+0x3a0>)
   1a708:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1a70a:	4b1d      	ldr	r3, [pc, #116]	; (1a780 <xQueueGenericSend+0x3a4>)
   1a70c:	4798      	blx	r3
   1a70e:	1e03      	subs	r3, r0, #0
   1a710:	d000      	beq.n	1a714 <xQueueGenericSend+0x338>
   1a712:	e69d      	b.n	1a450 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1a714:	4b11      	ldr	r3, [pc, #68]	; (1a75c <xQueueGenericSend+0x380>)
   1a716:	4798      	blx	r3
   1a718:	e69a      	b.n	1a450 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1a71a:	6a3b      	ldr	r3, [r7, #32]
   1a71c:	0018      	movs	r0, r3
   1a71e:	4b17      	ldr	r3, [pc, #92]	; (1a77c <xQueueGenericSend+0x3a0>)
   1a720:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a722:	4b17      	ldr	r3, [pc, #92]	; (1a780 <xQueueGenericSend+0x3a4>)
   1a724:	4798      	blx	r3
   1a726:	e693      	b.n	1a450 <xQueueGenericSend+0x74>
   1a728:	0001cb69 	.word	0x0001cb69
   1a72c:	00019e49 	.word	0x00019e49
   1a730:	000180dd 	.word	0x000180dd
   1a734:	00017e41 	.word	0x00017e41
   1a738:	20000130 	.word	0x20000130
   1a73c:	00017f01 	.word	0x00017f01
   1a740:	00017e01 	.word	0x00017e01
   1a744:	20000124 	.word	0x20000124
   1a748:	00017ee1 	.word	0x00017ee1
   1a74c:	00018839 	.word	0x00018839
   1a750:	00018e95 	.word	0x00018e95
   1a754:	0001b615 	.word	0x0001b615
   1a758:	0001b919 	.word	0x0001b919
   1a75c:	00019e31 	.word	0x00019e31
   1a760:	0001c6d9 	.word	0x0001c6d9
   1a764:	00019e6d 	.word	0x00019e6d
   1a768:	0001c819 	.word	0x0001c819
   1a76c:	0001c101 	.word	0x0001c101
   1a770:	0001c841 	.word	0x0001c841
   1a774:	0001b869 	.word	0x0001b869
   1a778:	0001c5b5 	.word	0x0001c5b5
   1a77c:	0001b745 	.word	0x0001b745
   1a780:	0001c119 	.word	0x0001c119
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1a784:	6a3b      	ldr	r3, [r7, #32]
   1a786:	0018      	movs	r0, r3
   1a788:	4b22      	ldr	r3, [pc, #136]	; (1a814 <xQueueGenericSend+0x438>)
   1a78a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a78c:	4b22      	ldr	r3, [pc, #136]	; (1a818 <xQueueGenericSend+0x43c>)
   1a78e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1a790:	4b22      	ldr	r3, [pc, #136]	; (1a81c <xQueueGenericSend+0x440>)
   1a792:	4798      	blx	r3
   1a794:	0003      	movs	r3, r0
   1a796:	0018      	movs	r0, r3
   1a798:	4b21      	ldr	r3, [pc, #132]	; (1a820 <xQueueGenericSend+0x444>)
   1a79a:	4798      	blx	r3
   1a79c:	0003      	movs	r3, r0
   1a79e:	001a      	movs	r2, r3
   1a7a0:	4b20      	ldr	r3, [pc, #128]	; (1a824 <xQueueGenericSend+0x448>)
   1a7a2:	881b      	ldrh	r3, [r3, #0]
   1a7a4:	4013      	ands	r3, r2
   1a7a6:	b29b      	uxth	r3, r3
   1a7a8:	2b00      	cmp	r3, #0
   1a7aa:	d02e      	beq.n	1a80a <xQueueGenericSend+0x42e>
   1a7ac:	6a3b      	ldr	r3, [r7, #32]
   1a7ae:	0018      	movs	r0, r3
   1a7b0:	4b1d      	ldr	r3, [pc, #116]	; (1a828 <xQueueGenericSend+0x44c>)
   1a7b2:	4798      	blx	r3
   1a7b4:	0003      	movs	r3, r0
   1a7b6:	001a      	movs	r2, r3
   1a7b8:	4b1a      	ldr	r3, [pc, #104]	; (1a824 <xQueueGenericSend+0x448>)
   1a7ba:	881b      	ldrh	r3, [r3, #0]
   1a7bc:	4013      	ands	r3, r2
   1a7be:	b29b      	uxth	r3, r3
   1a7c0:	2b00      	cmp	r3, #0
   1a7c2:	d022      	beq.n	1a80a <xQueueGenericSend+0x42e>
   1a7c4:	683b      	ldr	r3, [r7, #0]
   1a7c6:	2b00      	cmp	r3, #0
   1a7c8:	d10b      	bne.n	1a7e2 <xQueueGenericSend+0x406>
   1a7ca:	6a3b      	ldr	r3, [r7, #32]
   1a7cc:	0018      	movs	r0, r3
   1a7ce:	4b17      	ldr	r3, [pc, #92]	; (1a82c <xQueueGenericSend+0x450>)
   1a7d0:	4798      	blx	r3
   1a7d2:	0003      	movs	r3, r0
   1a7d4:	001a      	movs	r2, r3
   1a7d6:	4b16      	ldr	r3, [pc, #88]	; (1a830 <xQueueGenericSend+0x454>)
   1a7d8:	5c9b      	ldrb	r3, [r3, r2]
   1a7da:	3348      	adds	r3, #72	; 0x48
   1a7dc:	b2db      	uxtb	r3, r3
   1a7de:	001d      	movs	r5, r3
   1a7e0:	e000      	b.n	1a7e4 <xQueueGenericSend+0x408>
   1a7e2:	254d      	movs	r5, #77	; 0x4d
   1a7e4:	6a3b      	ldr	r3, [r7, #32]
   1a7e6:	0018      	movs	r0, r3
   1a7e8:	4b10      	ldr	r3, [pc, #64]	; (1a82c <xQueueGenericSend+0x450>)
   1a7ea:	4798      	blx	r3
   1a7ec:	0003      	movs	r3, r0
   1a7ee:	001a      	movs	r2, r3
   1a7f0:	4b0f      	ldr	r3, [pc, #60]	; (1a830 <xQueueGenericSend+0x454>)
   1a7f2:	5c9c      	ldrb	r4, [r3, r2]
   1a7f4:	6a3b      	ldr	r3, [r7, #32]
   1a7f6:	0018      	movs	r0, r3
   1a7f8:	4b0e      	ldr	r3, [pc, #56]	; (1a834 <xQueueGenericSend+0x458>)
   1a7fa:	4798      	blx	r3
   1a7fc:	0003      	movs	r3, r0
   1a7fe:	b2db      	uxtb	r3, r3
   1a800:	001a      	movs	r2, r3
   1a802:	0021      	movs	r1, r4
   1a804:	0028      	movs	r0, r5
   1a806:	4b0c      	ldr	r3, [pc, #48]	; (1a838 <xQueueGenericSend+0x45c>)
   1a808:	4798      	blx	r3
			return errQUEUE_FULL;
   1a80a:	2300      	movs	r3, #0
		}
	}
}
   1a80c:	0018      	movs	r0, r3
   1a80e:	46bd      	mov	sp, r7
   1a810:	b00a      	add	sp, #40	; 0x28
   1a812:	bdb0      	pop	{r4, r5, r7, pc}
   1a814:	0001b745 	.word	0x0001b745
   1a818:	0001c119 	.word	0x0001c119
   1a81c:	000180dd 	.word	0x000180dd
   1a820:	00017e41 	.word	0x00017e41
   1a824:	20000130 	.word	0x20000130
   1a828:	00017f01 	.word	0x00017f01
   1a82c:	00017e01 	.word	0x00017e01
   1a830:	20000124 	.word	0x20000124
   1a834:	00017ee1 	.word	0x00017ee1
   1a838:	00018839 	.word	0x00018839

0001a83c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1a83c:	b5b0      	push	{r4, r5, r7, lr}
   1a83e:	b088      	sub	sp, #32
   1a840:	af00      	add	r7, sp, #0
   1a842:	60f8      	str	r0, [r7, #12]
   1a844:	60b9      	str	r1, [r7, #8]
   1a846:	607a      	str	r2, [r7, #4]
   1a848:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a84a:	68fb      	ldr	r3, [r7, #12]
   1a84c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1a84e:	69bb      	ldr	r3, [r7, #24]
   1a850:	2b00      	cmp	r3, #0
   1a852:	d101      	bne.n	1a858 <xQueueGenericSendFromISR+0x1c>
   1a854:	b672      	cpsid	i
   1a856:	e7fe      	b.n	1a856 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a858:	68bb      	ldr	r3, [r7, #8]
   1a85a:	2b00      	cmp	r3, #0
   1a85c:	d103      	bne.n	1a866 <xQueueGenericSendFromISR+0x2a>
   1a85e:	69bb      	ldr	r3, [r7, #24]
   1a860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a862:	2b00      	cmp	r3, #0
   1a864:	d101      	bne.n	1a86a <xQueueGenericSendFromISR+0x2e>
   1a866:	2301      	movs	r3, #1
   1a868:	e000      	b.n	1a86c <xQueueGenericSendFromISR+0x30>
   1a86a:	2300      	movs	r3, #0
   1a86c:	2b00      	cmp	r3, #0
   1a86e:	d101      	bne.n	1a874 <xQueueGenericSendFromISR+0x38>
   1a870:	b672      	cpsid	i
   1a872:	e7fe      	b.n	1a872 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a874:	683b      	ldr	r3, [r7, #0]
   1a876:	2b02      	cmp	r3, #2
   1a878:	d103      	bne.n	1a882 <xQueueGenericSendFromISR+0x46>
   1a87a:	69bb      	ldr	r3, [r7, #24]
   1a87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a87e:	2b01      	cmp	r3, #1
   1a880:	d101      	bne.n	1a886 <xQueueGenericSendFromISR+0x4a>
   1a882:	2301      	movs	r3, #1
   1a884:	e000      	b.n	1a888 <xQueueGenericSendFromISR+0x4c>
   1a886:	2300      	movs	r3, #0
   1a888:	2b00      	cmp	r3, #0
   1a88a:	d101      	bne.n	1a890 <xQueueGenericSendFromISR+0x54>
   1a88c:	b672      	cpsid	i
   1a88e:	e7fe      	b.n	1a88e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1a890:	4b68      	ldr	r3, [pc, #416]	; (1aa34 <xQueueGenericSendFromISR+0x1f8>)
   1a892:	4798      	blx	r3
   1a894:	0003      	movs	r3, r0
   1a896:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a898:	69bb      	ldr	r3, [r7, #24]
   1a89a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a89c:	69bb      	ldr	r3, [r7, #24]
   1a89e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a8a0:	429a      	cmp	r2, r3
   1a8a2:	d303      	bcc.n	1a8ac <xQueueGenericSendFromISR+0x70>
   1a8a4:	683b      	ldr	r3, [r7, #0]
   1a8a6:	2b02      	cmp	r3, #2
   1a8a8:	d000      	beq.n	1a8ac <xQueueGenericSendFromISR+0x70>
   1a8aa:	e088      	b.n	1a9be <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1a8ac:	2313      	movs	r3, #19
   1a8ae:	18fb      	adds	r3, r7, r3
   1a8b0:	69ba      	ldr	r2, [r7, #24]
   1a8b2:	2145      	movs	r1, #69	; 0x45
   1a8b4:	5c52      	ldrb	r2, [r2, r1]
   1a8b6:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1a8b8:	69bb      	ldr	r3, [r7, #24]
   1a8ba:	0018      	movs	r0, r3
   1a8bc:	4b5e      	ldr	r3, [pc, #376]	; (1aa38 <xQueueGenericSendFromISR+0x1fc>)
   1a8be:	4798      	blx	r3
   1a8c0:	0003      	movs	r3, r0
   1a8c2:	001a      	movs	r2, r3
   1a8c4:	4b5d      	ldr	r3, [pc, #372]	; (1aa3c <xQueueGenericSendFromISR+0x200>)
   1a8c6:	881b      	ldrh	r3, [r3, #0]
   1a8c8:	4013      	ands	r3, r2
   1a8ca:	b29b      	uxth	r3, r3
   1a8cc:	2b00      	cmp	r3, #0
   1a8ce:	d022      	beq.n	1a916 <xQueueGenericSendFromISR+0xda>
   1a8d0:	683b      	ldr	r3, [r7, #0]
   1a8d2:	2b00      	cmp	r3, #0
   1a8d4:	d10b      	bne.n	1a8ee <xQueueGenericSendFromISR+0xb2>
   1a8d6:	69bb      	ldr	r3, [r7, #24]
   1a8d8:	0018      	movs	r0, r3
   1a8da:	4b59      	ldr	r3, [pc, #356]	; (1aa40 <xQueueGenericSendFromISR+0x204>)
   1a8dc:	4798      	blx	r3
   1a8de:	0003      	movs	r3, r0
   1a8e0:	001a      	movs	r2, r3
   1a8e2:	4b58      	ldr	r3, [pc, #352]	; (1aa44 <xQueueGenericSendFromISR+0x208>)
   1a8e4:	5c9b      	ldrb	r3, [r3, r2]
   1a8e6:	3330      	adds	r3, #48	; 0x30
   1a8e8:	b2db      	uxtb	r3, r3
   1a8ea:	001d      	movs	r5, r3
   1a8ec:	e000      	b.n	1a8f0 <xQueueGenericSendFromISR+0xb4>
   1a8ee:	2535      	movs	r5, #53	; 0x35
   1a8f0:	69bb      	ldr	r3, [r7, #24]
   1a8f2:	0018      	movs	r0, r3
   1a8f4:	4b52      	ldr	r3, [pc, #328]	; (1aa40 <xQueueGenericSendFromISR+0x204>)
   1a8f6:	4798      	blx	r3
   1a8f8:	0003      	movs	r3, r0
   1a8fa:	001a      	movs	r2, r3
   1a8fc:	4b51      	ldr	r3, [pc, #324]	; (1aa44 <xQueueGenericSendFromISR+0x208>)
   1a8fe:	5c9c      	ldrb	r4, [r3, r2]
   1a900:	69bb      	ldr	r3, [r7, #24]
   1a902:	0018      	movs	r0, r3
   1a904:	4b50      	ldr	r3, [pc, #320]	; (1aa48 <xQueueGenericSendFromISR+0x20c>)
   1a906:	4798      	blx	r3
   1a908:	0003      	movs	r3, r0
   1a90a:	b2db      	uxtb	r3, r3
   1a90c:	001a      	movs	r2, r3
   1a90e:	0021      	movs	r1, r4
   1a910:	0028      	movs	r0, r5
   1a912:	4b4e      	ldr	r3, [pc, #312]	; (1aa4c <xQueueGenericSendFromISR+0x210>)
   1a914:	4798      	blx	r3
   1a916:	69bb      	ldr	r3, [r7, #24]
   1a918:	0018      	movs	r0, r3
   1a91a:	4b49      	ldr	r3, [pc, #292]	; (1aa40 <xQueueGenericSendFromISR+0x204>)
   1a91c:	4798      	blx	r3
   1a91e:	0003      	movs	r3, r0
   1a920:	001a      	movs	r2, r3
   1a922:	4b48      	ldr	r3, [pc, #288]	; (1aa44 <xQueueGenericSendFromISR+0x208>)
   1a924:	5c9c      	ldrb	r4, [r3, r2]
   1a926:	69bb      	ldr	r3, [r7, #24]
   1a928:	0018      	movs	r0, r3
   1a92a:	4b47      	ldr	r3, [pc, #284]	; (1aa48 <xQueueGenericSendFromISR+0x20c>)
   1a92c:	4798      	blx	r3
   1a92e:	0003      	movs	r3, r0
   1a930:	b2d9      	uxtb	r1, r3
   1a932:	69bb      	ldr	r3, [r7, #24]
   1a934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a936:	b2db      	uxtb	r3, r3
   1a938:	3301      	adds	r3, #1
   1a93a:	b2db      	uxtb	r3, r3
   1a93c:	001a      	movs	r2, r3
   1a93e:	0020      	movs	r0, r4
   1a940:	4b43      	ldr	r3, [pc, #268]	; (1aa50 <xQueueGenericSendFromISR+0x214>)
   1a942:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1a944:	683a      	ldr	r2, [r7, #0]
   1a946:	68b9      	ldr	r1, [r7, #8]
   1a948:	69bb      	ldr	r3, [r7, #24]
   1a94a:	0018      	movs	r0, r3
   1a94c:	4b41      	ldr	r3, [pc, #260]	; (1aa54 <xQueueGenericSendFromISR+0x218>)
   1a94e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1a950:	2313      	movs	r3, #19
   1a952:	18fb      	adds	r3, r7, r3
   1a954:	781b      	ldrb	r3, [r3, #0]
   1a956:	b25b      	sxtb	r3, r3
   1a958:	3301      	adds	r3, #1
   1a95a:	d124      	bne.n	1a9a6 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a95c:	69bb      	ldr	r3, [r7, #24]
   1a95e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a960:	2b00      	cmp	r3, #0
   1a962:	d00e      	beq.n	1a982 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1a964:	683a      	ldr	r2, [r7, #0]
   1a966:	69bb      	ldr	r3, [r7, #24]
   1a968:	0011      	movs	r1, r2
   1a96a:	0018      	movs	r0, r3
   1a96c:	4b3a      	ldr	r3, [pc, #232]	; (1aa58 <xQueueGenericSendFromISR+0x21c>)
   1a96e:	4798      	blx	r3
   1a970:	1e03      	subs	r3, r0, #0
   1a972:	d021      	beq.n	1a9b8 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1a974:	687b      	ldr	r3, [r7, #4]
   1a976:	2b00      	cmp	r3, #0
   1a978:	d01e      	beq.n	1a9b8 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1a97a:	687b      	ldr	r3, [r7, #4]
   1a97c:	2201      	movs	r2, #1
   1a97e:	601a      	str	r2, [r3, #0]
   1a980:	e01a      	b.n	1a9b8 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a982:	69bb      	ldr	r3, [r7, #24]
   1a984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a986:	2b00      	cmp	r3, #0
   1a988:	d016      	beq.n	1a9b8 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a98a:	69bb      	ldr	r3, [r7, #24]
   1a98c:	3324      	adds	r3, #36	; 0x24
   1a98e:	0018      	movs	r0, r3
   1a990:	4b32      	ldr	r3, [pc, #200]	; (1aa5c <xQueueGenericSendFromISR+0x220>)
   1a992:	4798      	blx	r3
   1a994:	1e03      	subs	r3, r0, #0
   1a996:	d00f      	beq.n	1a9b8 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1a998:	687b      	ldr	r3, [r7, #4]
   1a99a:	2b00      	cmp	r3, #0
   1a99c:	d00c      	beq.n	1a9b8 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1a99e:	687b      	ldr	r3, [r7, #4]
   1a9a0:	2201      	movs	r2, #1
   1a9a2:	601a      	str	r2, [r3, #0]
   1a9a4:	e008      	b.n	1a9b8 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1a9a6:	2313      	movs	r3, #19
   1a9a8:	18fb      	adds	r3, r7, r3
   1a9aa:	781b      	ldrb	r3, [r3, #0]
   1a9ac:	3301      	adds	r3, #1
   1a9ae:	b2db      	uxtb	r3, r3
   1a9b0:	b259      	sxtb	r1, r3
   1a9b2:	69bb      	ldr	r3, [r7, #24]
   1a9b4:	2245      	movs	r2, #69	; 0x45
   1a9b6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1a9b8:	2301      	movs	r3, #1
   1a9ba:	61fb      	str	r3, [r7, #28]
		{
   1a9bc:	e030      	b.n	1aa20 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1a9be:	69bb      	ldr	r3, [r7, #24]
   1a9c0:	0018      	movs	r0, r3
   1a9c2:	4b1d      	ldr	r3, [pc, #116]	; (1aa38 <xQueueGenericSendFromISR+0x1fc>)
   1a9c4:	4798      	blx	r3
   1a9c6:	0003      	movs	r3, r0
   1a9c8:	001a      	movs	r2, r3
   1a9ca:	4b1c      	ldr	r3, [pc, #112]	; (1aa3c <xQueueGenericSendFromISR+0x200>)
   1a9cc:	881b      	ldrh	r3, [r3, #0]
   1a9ce:	4013      	ands	r3, r2
   1a9d0:	b29b      	uxth	r3, r3
   1a9d2:	2b00      	cmp	r3, #0
   1a9d4:	d022      	beq.n	1aa1c <xQueueGenericSendFromISR+0x1e0>
   1a9d6:	683b      	ldr	r3, [r7, #0]
   1a9d8:	2b00      	cmp	r3, #0
   1a9da:	d10b      	bne.n	1a9f4 <xQueueGenericSendFromISR+0x1b8>
   1a9dc:	69bb      	ldr	r3, [r7, #24]
   1a9de:	0018      	movs	r0, r3
   1a9e0:	4b17      	ldr	r3, [pc, #92]	; (1aa40 <xQueueGenericSendFromISR+0x204>)
   1a9e2:	4798      	blx	r3
   1a9e4:	0003      	movs	r3, r0
   1a9e6:	001a      	movs	r2, r3
   1a9e8:	4b16      	ldr	r3, [pc, #88]	; (1aa44 <xQueueGenericSendFromISR+0x208>)
   1a9ea:	5c9b      	ldrb	r3, [r3, r2]
   1a9ec:	3358      	adds	r3, #88	; 0x58
   1a9ee:	b2db      	uxtb	r3, r3
   1a9f0:	001d      	movs	r5, r3
   1a9f2:	e000      	b.n	1a9f6 <xQueueGenericSendFromISR+0x1ba>
   1a9f4:	255d      	movs	r5, #93	; 0x5d
   1a9f6:	69bb      	ldr	r3, [r7, #24]
   1a9f8:	0018      	movs	r0, r3
   1a9fa:	4b11      	ldr	r3, [pc, #68]	; (1aa40 <xQueueGenericSendFromISR+0x204>)
   1a9fc:	4798      	blx	r3
   1a9fe:	0003      	movs	r3, r0
   1aa00:	001a      	movs	r2, r3
   1aa02:	4b10      	ldr	r3, [pc, #64]	; (1aa44 <xQueueGenericSendFromISR+0x208>)
   1aa04:	5c9c      	ldrb	r4, [r3, r2]
   1aa06:	69bb      	ldr	r3, [r7, #24]
   1aa08:	0018      	movs	r0, r3
   1aa0a:	4b0f      	ldr	r3, [pc, #60]	; (1aa48 <xQueueGenericSendFromISR+0x20c>)
   1aa0c:	4798      	blx	r3
   1aa0e:	0003      	movs	r3, r0
   1aa10:	b2db      	uxtb	r3, r3
   1aa12:	001a      	movs	r2, r3
   1aa14:	0021      	movs	r1, r4
   1aa16:	0028      	movs	r0, r5
   1aa18:	4b0c      	ldr	r3, [pc, #48]	; (1aa4c <xQueueGenericSendFromISR+0x210>)
   1aa1a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1aa1c:	2300      	movs	r3, #0
   1aa1e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1aa20:	697b      	ldr	r3, [r7, #20]
   1aa22:	0018      	movs	r0, r3
   1aa24:	4b0e      	ldr	r3, [pc, #56]	; (1aa60 <xQueueGenericSendFromISR+0x224>)
   1aa26:	4798      	blx	r3

	return xReturn;
   1aa28:	69fb      	ldr	r3, [r7, #28]
}
   1aa2a:	0018      	movs	r0, r3
   1aa2c:	46bd      	mov	sp, r7
   1aa2e:	b008      	add	sp, #32
   1aa30:	bdb0      	pop	{r4, r5, r7, pc}
   1aa32:	46c0      	nop			; (mov r8, r8)
   1aa34:	00019e9d 	.word	0x00019e9d
   1aa38:	00017f01 	.word	0x00017f01
   1aa3c:	20000130 	.word	0x20000130
   1aa40:	00017e01 	.word	0x00017e01
   1aa44:	20000124 	.word	0x20000124
   1aa48:	00017ee1 	.word	0x00017ee1
   1aa4c:	00018839 	.word	0x00018839
   1aa50:	00018e95 	.word	0x00018e95
   1aa54:	0001b615 	.word	0x0001b615
   1aa58:	0001b919 	.word	0x0001b919
   1aa5c:	0001c6d9 	.word	0x0001c6d9
   1aa60:	00019ea9 	.word	0x00019ea9

0001aa64 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1aa64:	b580      	push	{r7, lr}
   1aa66:	b082      	sub	sp, #8
   1aa68:	af00      	add	r7, sp, #0
   1aa6a:	6078      	str	r0, [r7, #4]
   1aa6c:	6039      	str	r1, [r7, #0]
   1aa6e:	6839      	ldr	r1, [r7, #0]
   1aa70:	687b      	ldr	r3, [r7, #4]
   1aa72:	2200      	movs	r2, #0
   1aa74:	0018      	movs	r0, r3
   1aa76:	4b03      	ldr	r3, [pc, #12]	; (1aa84 <xQueueGiveFromISR+0x20>)
   1aa78:	4798      	blx	r3
   1aa7a:	0003      	movs	r3, r0
   1aa7c:	0018      	movs	r0, r3
   1aa7e:	46bd      	mov	sp, r7
   1aa80:	b002      	add	sp, #8
   1aa82:	bd80      	pop	{r7, pc}
   1aa84:	0001aa89 	.word	0x0001aa89

0001aa88 <MyWrapper>:
{
   1aa88:	b5b0      	push	{r4, r5, r7, lr}
   1aa8a:	b08a      	sub	sp, #40	; 0x28
   1aa8c:	af00      	add	r7, sp, #0
   1aa8e:	60f8      	str	r0, [r7, #12]
   1aa90:	60b9      	str	r1, [r7, #8]
   1aa92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1aa94:	68fb      	ldr	r3, [r7, #12]
   1aa96:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1aa98:	6a3b      	ldr	r3, [r7, #32]
   1aa9a:	2b00      	cmp	r3, #0
   1aa9c:	d101      	bne.n	1aaa2 <MyWrapper+0x1a>
   1aa9e:	b672      	cpsid	i
   1aaa0:	e7fe      	b.n	1aaa0 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1aaa2:	6a3b      	ldr	r3, [r7, #32]
   1aaa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aaa6:	2b00      	cmp	r3, #0
   1aaa8:	d001      	beq.n	1aaae <MyWrapper+0x26>
   1aaaa:	b672      	cpsid	i
   1aaac:	e7fe      	b.n	1aaac <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1aaae:	6a3b      	ldr	r3, [r7, #32]
   1aab0:	681b      	ldr	r3, [r3, #0]
   1aab2:	2b00      	cmp	r3, #0
   1aab4:	d103      	bne.n	1aabe <MyWrapper+0x36>
   1aab6:	6a3b      	ldr	r3, [r7, #32]
   1aab8:	685b      	ldr	r3, [r3, #4]
   1aaba:	2b00      	cmp	r3, #0
   1aabc:	d101      	bne.n	1aac2 <MyWrapper+0x3a>
   1aabe:	2301      	movs	r3, #1
   1aac0:	e000      	b.n	1aac4 <MyWrapper+0x3c>
   1aac2:	2300      	movs	r3, #0
   1aac4:	2b00      	cmp	r3, #0
   1aac6:	d101      	bne.n	1aacc <MyWrapper+0x44>
   1aac8:	b672      	cpsid	i
   1aaca:	e7fe      	b.n	1aaca <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1aacc:	4b66      	ldr	r3, [pc, #408]	; (1ac68 <MyWrapper+0x1e0>)
   1aace:	4798      	blx	r3
   1aad0:	0003      	movs	r3, r0
   1aad2:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1aad4:	6a3b      	ldr	r3, [r7, #32]
   1aad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1aad8:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1aada:	6a3b      	ldr	r3, [r7, #32]
   1aadc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1aade:	69bb      	ldr	r3, [r7, #24]
   1aae0:	429a      	cmp	r2, r3
   1aae2:	d800      	bhi.n	1aae6 <MyWrapper+0x5e>
   1aae4:	e085      	b.n	1abf2 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1aae6:	2317      	movs	r3, #23
   1aae8:	18fb      	adds	r3, r7, r3
   1aaea:	6a3a      	ldr	r2, [r7, #32]
   1aaec:	2145      	movs	r1, #69	; 0x45
   1aaee:	5c52      	ldrb	r2, [r2, r1]
   1aaf0:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1aaf2:	6a3b      	ldr	r3, [r7, #32]
   1aaf4:	0018      	movs	r0, r3
   1aaf6:	4b5d      	ldr	r3, [pc, #372]	; (1ac6c <MyWrapper+0x1e4>)
   1aaf8:	4798      	blx	r3
   1aafa:	0003      	movs	r3, r0
   1aafc:	001a      	movs	r2, r3
   1aafe:	4b5c      	ldr	r3, [pc, #368]	; (1ac70 <MyWrapper+0x1e8>)
   1ab00:	881b      	ldrh	r3, [r3, #0]
   1ab02:	4013      	ands	r3, r2
   1ab04:	b29b      	uxth	r3, r3
   1ab06:	2b00      	cmp	r3, #0
   1ab08:	d022      	beq.n	1ab50 <MyWrapper+0xc8>
   1ab0a:	687b      	ldr	r3, [r7, #4]
   1ab0c:	2b00      	cmp	r3, #0
   1ab0e:	d10b      	bne.n	1ab28 <MyWrapper+0xa0>
   1ab10:	6a3b      	ldr	r3, [r7, #32]
   1ab12:	0018      	movs	r0, r3
   1ab14:	4b57      	ldr	r3, [pc, #348]	; (1ac74 <MyWrapper+0x1ec>)
   1ab16:	4798      	blx	r3
   1ab18:	0003      	movs	r3, r0
   1ab1a:	001a      	movs	r2, r3
   1ab1c:	4b56      	ldr	r3, [pc, #344]	; (1ac78 <MyWrapper+0x1f0>)
   1ab1e:	5c9b      	ldrb	r3, [r3, r2]
   1ab20:	3330      	adds	r3, #48	; 0x30
   1ab22:	b2db      	uxtb	r3, r3
   1ab24:	001d      	movs	r5, r3
   1ab26:	e000      	b.n	1ab2a <MyWrapper+0xa2>
   1ab28:	2535      	movs	r5, #53	; 0x35
   1ab2a:	6a3b      	ldr	r3, [r7, #32]
   1ab2c:	0018      	movs	r0, r3
   1ab2e:	4b51      	ldr	r3, [pc, #324]	; (1ac74 <MyWrapper+0x1ec>)
   1ab30:	4798      	blx	r3
   1ab32:	0003      	movs	r3, r0
   1ab34:	001a      	movs	r2, r3
   1ab36:	4b50      	ldr	r3, [pc, #320]	; (1ac78 <MyWrapper+0x1f0>)
   1ab38:	5c9c      	ldrb	r4, [r3, r2]
   1ab3a:	6a3b      	ldr	r3, [r7, #32]
   1ab3c:	0018      	movs	r0, r3
   1ab3e:	4b4f      	ldr	r3, [pc, #316]	; (1ac7c <MyWrapper+0x1f4>)
   1ab40:	4798      	blx	r3
   1ab42:	0003      	movs	r3, r0
   1ab44:	b2db      	uxtb	r3, r3
   1ab46:	001a      	movs	r2, r3
   1ab48:	0021      	movs	r1, r4
   1ab4a:	0028      	movs	r0, r5
   1ab4c:	4b4c      	ldr	r3, [pc, #304]	; (1ac80 <MyWrapper+0x1f8>)
   1ab4e:	4798      	blx	r3
   1ab50:	6a3b      	ldr	r3, [r7, #32]
   1ab52:	0018      	movs	r0, r3
   1ab54:	4b47      	ldr	r3, [pc, #284]	; (1ac74 <MyWrapper+0x1ec>)
   1ab56:	4798      	blx	r3
   1ab58:	0003      	movs	r3, r0
   1ab5a:	001a      	movs	r2, r3
   1ab5c:	4b46      	ldr	r3, [pc, #280]	; (1ac78 <MyWrapper+0x1f0>)
   1ab5e:	5c9c      	ldrb	r4, [r3, r2]
   1ab60:	6a3b      	ldr	r3, [r7, #32]
   1ab62:	0018      	movs	r0, r3
   1ab64:	4b45      	ldr	r3, [pc, #276]	; (1ac7c <MyWrapper+0x1f4>)
   1ab66:	4798      	blx	r3
   1ab68:	0003      	movs	r3, r0
   1ab6a:	b2d9      	uxtb	r1, r3
   1ab6c:	6a3b      	ldr	r3, [r7, #32]
   1ab6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ab70:	b2db      	uxtb	r3, r3
   1ab72:	3301      	adds	r3, #1
   1ab74:	b2db      	uxtb	r3, r3
   1ab76:	001a      	movs	r2, r3
   1ab78:	0020      	movs	r0, r4
   1ab7a:	4b42      	ldr	r3, [pc, #264]	; (1ac84 <MyWrapper+0x1fc>)
   1ab7c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1ab7e:	69bb      	ldr	r3, [r7, #24]
   1ab80:	1c5a      	adds	r2, r3, #1
   1ab82:	6a3b      	ldr	r3, [r7, #32]
   1ab84:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1ab86:	2317      	movs	r3, #23
   1ab88:	18fb      	adds	r3, r7, r3
   1ab8a:	781b      	ldrb	r3, [r3, #0]
   1ab8c:	b25b      	sxtb	r3, r3
   1ab8e:	3301      	adds	r3, #1
   1ab90:	d123      	bne.n	1abda <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1ab92:	6a3b      	ldr	r3, [r7, #32]
   1ab94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ab96:	2b00      	cmp	r3, #0
   1ab98:	d00d      	beq.n	1abb6 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1ab9a:	6a3b      	ldr	r3, [r7, #32]
   1ab9c:	2100      	movs	r1, #0
   1ab9e:	0018      	movs	r0, r3
   1aba0:	4b39      	ldr	r3, [pc, #228]	; (1ac88 <MyWrapper+0x200>)
   1aba2:	4798      	blx	r3
   1aba4:	1e03      	subs	r3, r0, #0
   1aba6:	d021      	beq.n	1abec <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1aba8:	68bb      	ldr	r3, [r7, #8]
   1abaa:	2b00      	cmp	r3, #0
   1abac:	d01e      	beq.n	1abec <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1abae:	68bb      	ldr	r3, [r7, #8]
   1abb0:	2201      	movs	r2, #1
   1abb2:	601a      	str	r2, [r3, #0]
   1abb4:	e01a      	b.n	1abec <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1abb6:	6a3b      	ldr	r3, [r7, #32]
   1abb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1abba:	2b00      	cmp	r3, #0
   1abbc:	d016      	beq.n	1abec <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1abbe:	6a3b      	ldr	r3, [r7, #32]
   1abc0:	3324      	adds	r3, #36	; 0x24
   1abc2:	0018      	movs	r0, r3
   1abc4:	4b31      	ldr	r3, [pc, #196]	; (1ac8c <MyWrapper+0x204>)
   1abc6:	4798      	blx	r3
   1abc8:	1e03      	subs	r3, r0, #0
   1abca:	d00f      	beq.n	1abec <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1abcc:	68bb      	ldr	r3, [r7, #8]
   1abce:	2b00      	cmp	r3, #0
   1abd0:	d00c      	beq.n	1abec <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1abd2:	68bb      	ldr	r3, [r7, #8]
   1abd4:	2201      	movs	r2, #1
   1abd6:	601a      	str	r2, [r3, #0]
   1abd8:	e008      	b.n	1abec <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1abda:	2317      	movs	r3, #23
   1abdc:	18fb      	adds	r3, r7, r3
   1abde:	781b      	ldrb	r3, [r3, #0]
   1abe0:	3301      	adds	r3, #1
   1abe2:	b2db      	uxtb	r3, r3
   1abe4:	b259      	sxtb	r1, r3
   1abe6:	6a3b      	ldr	r3, [r7, #32]
   1abe8:	2245      	movs	r2, #69	; 0x45
   1abea:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1abec:	2301      	movs	r3, #1
   1abee:	627b      	str	r3, [r7, #36]	; 0x24
   1abf0:	e030      	b.n	1ac54 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1abf2:	6a3b      	ldr	r3, [r7, #32]
   1abf4:	0018      	movs	r0, r3
   1abf6:	4b1d      	ldr	r3, [pc, #116]	; (1ac6c <MyWrapper+0x1e4>)
   1abf8:	4798      	blx	r3
   1abfa:	0003      	movs	r3, r0
   1abfc:	001a      	movs	r2, r3
   1abfe:	4b1c      	ldr	r3, [pc, #112]	; (1ac70 <MyWrapper+0x1e8>)
   1ac00:	881b      	ldrh	r3, [r3, #0]
   1ac02:	4013      	ands	r3, r2
   1ac04:	b29b      	uxth	r3, r3
   1ac06:	2b00      	cmp	r3, #0
   1ac08:	d022      	beq.n	1ac50 <MyWrapper+0x1c8>
   1ac0a:	687b      	ldr	r3, [r7, #4]
   1ac0c:	2b00      	cmp	r3, #0
   1ac0e:	d10b      	bne.n	1ac28 <MyWrapper+0x1a0>
   1ac10:	6a3b      	ldr	r3, [r7, #32]
   1ac12:	0018      	movs	r0, r3
   1ac14:	4b17      	ldr	r3, [pc, #92]	; (1ac74 <MyWrapper+0x1ec>)
   1ac16:	4798      	blx	r3
   1ac18:	0003      	movs	r3, r0
   1ac1a:	001a      	movs	r2, r3
   1ac1c:	4b16      	ldr	r3, [pc, #88]	; (1ac78 <MyWrapper+0x1f0>)
   1ac1e:	5c9b      	ldrb	r3, [r3, r2]
   1ac20:	3358      	adds	r3, #88	; 0x58
   1ac22:	b2db      	uxtb	r3, r3
   1ac24:	001d      	movs	r5, r3
   1ac26:	e000      	b.n	1ac2a <MyWrapper+0x1a2>
   1ac28:	255d      	movs	r5, #93	; 0x5d
   1ac2a:	6a3b      	ldr	r3, [r7, #32]
   1ac2c:	0018      	movs	r0, r3
   1ac2e:	4b11      	ldr	r3, [pc, #68]	; (1ac74 <MyWrapper+0x1ec>)
   1ac30:	4798      	blx	r3
   1ac32:	0003      	movs	r3, r0
   1ac34:	001a      	movs	r2, r3
   1ac36:	4b10      	ldr	r3, [pc, #64]	; (1ac78 <MyWrapper+0x1f0>)
   1ac38:	5c9c      	ldrb	r4, [r3, r2]
   1ac3a:	6a3b      	ldr	r3, [r7, #32]
   1ac3c:	0018      	movs	r0, r3
   1ac3e:	4b0f      	ldr	r3, [pc, #60]	; (1ac7c <MyWrapper+0x1f4>)
   1ac40:	4798      	blx	r3
   1ac42:	0003      	movs	r3, r0
   1ac44:	b2db      	uxtb	r3, r3
   1ac46:	001a      	movs	r2, r3
   1ac48:	0021      	movs	r1, r4
   1ac4a:	0028      	movs	r0, r5
   1ac4c:	4b0c      	ldr	r3, [pc, #48]	; (1ac80 <MyWrapper+0x1f8>)
   1ac4e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1ac50:	2300      	movs	r3, #0
   1ac52:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1ac54:	69fb      	ldr	r3, [r7, #28]
   1ac56:	0018      	movs	r0, r3
   1ac58:	4b0d      	ldr	r3, [pc, #52]	; (1ac90 <MyWrapper+0x208>)
   1ac5a:	4798      	blx	r3

	return xReturn;
   1ac5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1ac5e:	0018      	movs	r0, r3
   1ac60:	46bd      	mov	sp, r7
   1ac62:	b00a      	add	sp, #40	; 0x28
   1ac64:	bdb0      	pop	{r4, r5, r7, pc}
   1ac66:	46c0      	nop			; (mov r8, r8)
   1ac68:	00019e9d 	.word	0x00019e9d
   1ac6c:	00017f01 	.word	0x00017f01
   1ac70:	20000130 	.word	0x20000130
   1ac74:	00017e01 	.word	0x00017e01
   1ac78:	20000124 	.word	0x20000124
   1ac7c:	00017ee1 	.word	0x00017ee1
   1ac80:	00018839 	.word	0x00018839
   1ac84:	00018e95 	.word	0x00018e95
   1ac88:	0001b919 	.word	0x0001b919
   1ac8c:	0001c6d9 	.word	0x0001c6d9
   1ac90:	00019ea9 	.word	0x00019ea9

0001ac94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1ac94:	b5b0      	push	{r4, r5, r7, lr}
   1ac96:	b08a      	sub	sp, #40	; 0x28
   1ac98:	af00      	add	r7, sp, #0
   1ac9a:	60f8      	str	r0, [r7, #12]
   1ac9c:	60b9      	str	r1, [r7, #8]
   1ac9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1aca0:	2300      	movs	r3, #0
   1aca2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1aca4:	68fb      	ldr	r3, [r7, #12]
   1aca6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1aca8:	6a3b      	ldr	r3, [r7, #32]
   1acaa:	2b00      	cmp	r3, #0
   1acac:	d101      	bne.n	1acb2 <xQueueReceive+0x1e>
   1acae:	b672      	cpsid	i
   1acb0:	e7fe      	b.n	1acb0 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1acb2:	68bb      	ldr	r3, [r7, #8]
   1acb4:	2b00      	cmp	r3, #0
   1acb6:	d103      	bne.n	1acc0 <xQueueReceive+0x2c>
   1acb8:	6a3b      	ldr	r3, [r7, #32]
   1acba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1acbc:	2b00      	cmp	r3, #0
   1acbe:	d101      	bne.n	1acc4 <xQueueReceive+0x30>
   1acc0:	2301      	movs	r3, #1
   1acc2:	e000      	b.n	1acc6 <xQueueReceive+0x32>
   1acc4:	2300      	movs	r3, #0
   1acc6:	2b00      	cmp	r3, #0
   1acc8:	d101      	bne.n	1acce <xQueueReceive+0x3a>
   1acca:	b672      	cpsid	i
   1accc:	e7fe      	b.n	1accc <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1acce:	4bbf      	ldr	r3, [pc, #764]	; (1afcc <xQueueReceive+0x338>)
   1acd0:	4798      	blx	r3
   1acd2:	1e03      	subs	r3, r0, #0
   1acd4:	d102      	bne.n	1acdc <xQueueReceive+0x48>
   1acd6:	687b      	ldr	r3, [r7, #4]
   1acd8:	2b00      	cmp	r3, #0
   1acda:	d101      	bne.n	1ace0 <xQueueReceive+0x4c>
   1acdc:	2301      	movs	r3, #1
   1acde:	e000      	b.n	1ace2 <xQueueReceive+0x4e>
   1ace0:	2300      	movs	r3, #0
   1ace2:	2b00      	cmp	r3, #0
   1ace4:	d101      	bne.n	1acea <xQueueReceive+0x56>
   1ace6:	b672      	cpsid	i
   1ace8:	e7fe      	b.n	1ace8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1acea:	4bb9      	ldr	r3, [pc, #740]	; (1afd0 <xQueueReceive+0x33c>)
   1acec:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1acee:	6a3b      	ldr	r3, [r7, #32]
   1acf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1acf2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1acf4:	69fb      	ldr	r3, [r7, #28]
   1acf6:	2b00      	cmp	r3, #0
   1acf8:	d100      	bne.n	1acfc <xQueueReceive+0x68>
   1acfa:	e07d      	b.n	1adf8 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1acfc:	68ba      	ldr	r2, [r7, #8]
   1acfe:	6a3b      	ldr	r3, [r7, #32]
   1ad00:	0011      	movs	r1, r2
   1ad02:	0018      	movs	r0, r3
   1ad04:	4bb3      	ldr	r3, [pc, #716]	; (1afd4 <xQueueReceive+0x340>)
   1ad06:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1ad08:	4bb3      	ldr	r3, [pc, #716]	; (1afd8 <xQueueReceive+0x344>)
   1ad0a:	4798      	blx	r3
   1ad0c:	0003      	movs	r3, r0
   1ad0e:	0018      	movs	r0, r3
   1ad10:	4bb2      	ldr	r3, [pc, #712]	; (1afdc <xQueueReceive+0x348>)
   1ad12:	4798      	blx	r3
   1ad14:	0003      	movs	r3, r0
   1ad16:	001a      	movs	r2, r3
   1ad18:	4bb1      	ldr	r3, [pc, #708]	; (1afe0 <xQueueReceive+0x34c>)
   1ad1a:	881b      	ldrh	r3, [r3, #0]
   1ad1c:	4013      	ands	r3, r2
   1ad1e:	b29b      	uxth	r3, r3
   1ad20:	2b00      	cmp	r3, #0
   1ad22:	d029      	beq.n	1ad78 <xQueueReceive+0xe4>
   1ad24:	6a3b      	ldr	r3, [r7, #32]
   1ad26:	0018      	movs	r0, r3
   1ad28:	4bae      	ldr	r3, [pc, #696]	; (1afe4 <xQueueReceive+0x350>)
   1ad2a:	4798      	blx	r3
   1ad2c:	0003      	movs	r3, r0
   1ad2e:	001a      	movs	r2, r3
   1ad30:	4bab      	ldr	r3, [pc, #684]	; (1afe0 <xQueueReceive+0x34c>)
   1ad32:	881b      	ldrh	r3, [r3, #0]
   1ad34:	4013      	ands	r3, r2
   1ad36:	b29b      	uxth	r3, r3
   1ad38:	2b00      	cmp	r3, #0
   1ad3a:	d01d      	beq.n	1ad78 <xQueueReceive+0xe4>
   1ad3c:	6a3b      	ldr	r3, [r7, #32]
   1ad3e:	0018      	movs	r0, r3
   1ad40:	4ba9      	ldr	r3, [pc, #676]	; (1afe8 <xQueueReceive+0x354>)
   1ad42:	4798      	blx	r3
   1ad44:	0003      	movs	r3, r0
   1ad46:	001a      	movs	r2, r3
   1ad48:	4ba8      	ldr	r3, [pc, #672]	; (1afec <xQueueReceive+0x358>)
   1ad4a:	5c9b      	ldrb	r3, [r3, r2]
   1ad4c:	3328      	adds	r3, #40	; 0x28
   1ad4e:	b2db      	uxtb	r3, r3
   1ad50:	001d      	movs	r5, r3
   1ad52:	6a3b      	ldr	r3, [r7, #32]
   1ad54:	0018      	movs	r0, r3
   1ad56:	4ba4      	ldr	r3, [pc, #656]	; (1afe8 <xQueueReceive+0x354>)
   1ad58:	4798      	blx	r3
   1ad5a:	0003      	movs	r3, r0
   1ad5c:	001a      	movs	r2, r3
   1ad5e:	4ba3      	ldr	r3, [pc, #652]	; (1afec <xQueueReceive+0x358>)
   1ad60:	5c9c      	ldrb	r4, [r3, r2]
   1ad62:	6a3b      	ldr	r3, [r7, #32]
   1ad64:	0018      	movs	r0, r3
   1ad66:	4ba2      	ldr	r3, [pc, #648]	; (1aff0 <xQueueReceive+0x35c>)
   1ad68:	4798      	blx	r3
   1ad6a:	0003      	movs	r3, r0
   1ad6c:	b2db      	uxtb	r3, r3
   1ad6e:	001a      	movs	r2, r3
   1ad70:	0021      	movs	r1, r4
   1ad72:	0028      	movs	r0, r5
   1ad74:	4b9f      	ldr	r3, [pc, #636]	; (1aff4 <xQueueReceive+0x360>)
   1ad76:	4798      	blx	r3
   1ad78:	6a3b      	ldr	r3, [r7, #32]
   1ad7a:	0018      	movs	r0, r3
   1ad7c:	4b9a      	ldr	r3, [pc, #616]	; (1afe8 <xQueueReceive+0x354>)
   1ad7e:	4798      	blx	r3
   1ad80:	0003      	movs	r3, r0
   1ad82:	001a      	movs	r2, r3
   1ad84:	4b99      	ldr	r3, [pc, #612]	; (1afec <xQueueReceive+0x358>)
   1ad86:	5c9c      	ldrb	r4, [r3, r2]
   1ad88:	6a3b      	ldr	r3, [r7, #32]
   1ad8a:	0018      	movs	r0, r3
   1ad8c:	4b98      	ldr	r3, [pc, #608]	; (1aff0 <xQueueReceive+0x35c>)
   1ad8e:	4798      	blx	r3
   1ad90:	0003      	movs	r3, r0
   1ad92:	b2dd      	uxtb	r5, r3
   1ad94:	6a3b      	ldr	r3, [r7, #32]
   1ad96:	0018      	movs	r0, r3
   1ad98:	4b93      	ldr	r3, [pc, #588]	; (1afe8 <xQueueReceive+0x354>)
   1ad9a:	4798      	blx	r3
   1ad9c:	0003      	movs	r3, r0
   1ad9e:	001a      	movs	r2, r3
   1ada0:	4b92      	ldr	r3, [pc, #584]	; (1afec <xQueueReceive+0x358>)
   1ada2:	5c9b      	ldrb	r3, [r3, r2]
   1ada4:	2b02      	cmp	r3, #2
   1ada6:	d108      	bne.n	1adba <xQueueReceive+0x126>
   1ada8:	4b8b      	ldr	r3, [pc, #556]	; (1afd8 <xQueueReceive+0x344>)
   1adaa:	4798      	blx	r3
   1adac:	0003      	movs	r3, r0
   1adae:	0018      	movs	r0, r3
   1adb0:	4b91      	ldr	r3, [pc, #580]	; (1aff8 <xQueueReceive+0x364>)
   1adb2:	4798      	blx	r3
   1adb4:	0003      	movs	r3, r0
   1adb6:	b2db      	uxtb	r3, r3
   1adb8:	e004      	b.n	1adc4 <xQueueReceive+0x130>
   1adba:	6a3b      	ldr	r3, [r7, #32]
   1adbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1adbe:	b2db      	uxtb	r3, r3
   1adc0:	3b01      	subs	r3, #1
   1adc2:	b2db      	uxtb	r3, r3
   1adc4:	001a      	movs	r2, r3
   1adc6:	0029      	movs	r1, r5
   1adc8:	0020      	movs	r0, r4
   1adca:	4b8c      	ldr	r3, [pc, #560]	; (1affc <xQueueReceive+0x368>)
   1adcc:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1adce:	69fb      	ldr	r3, [r7, #28]
   1add0:	1e5a      	subs	r2, r3, #1
   1add2:	6a3b      	ldr	r3, [r7, #32]
   1add4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1add6:	6a3b      	ldr	r3, [r7, #32]
   1add8:	691b      	ldr	r3, [r3, #16]
   1adda:	2b00      	cmp	r3, #0
   1addc:	d008      	beq.n	1adf0 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1adde:	6a3b      	ldr	r3, [r7, #32]
   1ade0:	3310      	adds	r3, #16
   1ade2:	0018      	movs	r0, r3
   1ade4:	4b86      	ldr	r3, [pc, #536]	; (1b000 <xQueueReceive+0x36c>)
   1ade6:	4798      	blx	r3
   1ade8:	1e03      	subs	r3, r0, #0
   1adea:	d001      	beq.n	1adf0 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1adec:	4b85      	ldr	r3, [pc, #532]	; (1b004 <xQueueReceive+0x370>)
   1adee:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1adf0:	4b85      	ldr	r3, [pc, #532]	; (1b008 <xQueueReceive+0x374>)
   1adf2:	4798      	blx	r3
				return pdPASS;
   1adf4:	2301      	movs	r3, #1
   1adf6:	e15f      	b.n	1b0b8 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1adf8:	687b      	ldr	r3, [r7, #4]
   1adfa:	2b00      	cmp	r3, #0
   1adfc:	d13b      	bne.n	1ae76 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1adfe:	4b82      	ldr	r3, [pc, #520]	; (1b008 <xQueueReceive+0x374>)
   1ae00:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1ae02:	4b75      	ldr	r3, [pc, #468]	; (1afd8 <xQueueReceive+0x344>)
   1ae04:	4798      	blx	r3
   1ae06:	0003      	movs	r3, r0
   1ae08:	0018      	movs	r0, r3
   1ae0a:	4b74      	ldr	r3, [pc, #464]	; (1afdc <xQueueReceive+0x348>)
   1ae0c:	4798      	blx	r3
   1ae0e:	0003      	movs	r3, r0
   1ae10:	001a      	movs	r2, r3
   1ae12:	4b73      	ldr	r3, [pc, #460]	; (1afe0 <xQueueReceive+0x34c>)
   1ae14:	881b      	ldrh	r3, [r3, #0]
   1ae16:	4013      	ands	r3, r2
   1ae18:	b29b      	uxth	r3, r3
   1ae1a:	2b00      	cmp	r3, #0
   1ae1c:	d029      	beq.n	1ae72 <xQueueReceive+0x1de>
   1ae1e:	6a3b      	ldr	r3, [r7, #32]
   1ae20:	0018      	movs	r0, r3
   1ae22:	4b70      	ldr	r3, [pc, #448]	; (1afe4 <xQueueReceive+0x350>)
   1ae24:	4798      	blx	r3
   1ae26:	0003      	movs	r3, r0
   1ae28:	001a      	movs	r2, r3
   1ae2a:	4b6d      	ldr	r3, [pc, #436]	; (1afe0 <xQueueReceive+0x34c>)
   1ae2c:	881b      	ldrh	r3, [r3, #0]
   1ae2e:	4013      	ands	r3, r2
   1ae30:	b29b      	uxth	r3, r3
   1ae32:	2b00      	cmp	r3, #0
   1ae34:	d01d      	beq.n	1ae72 <xQueueReceive+0x1de>
   1ae36:	6a3b      	ldr	r3, [r7, #32]
   1ae38:	0018      	movs	r0, r3
   1ae3a:	4b6b      	ldr	r3, [pc, #428]	; (1afe8 <xQueueReceive+0x354>)
   1ae3c:	4798      	blx	r3
   1ae3e:	0003      	movs	r3, r0
   1ae40:	001a      	movs	r2, r3
   1ae42:	4b6a      	ldr	r3, [pc, #424]	; (1afec <xQueueReceive+0x358>)
   1ae44:	5c9b      	ldrb	r3, [r3, r2]
   1ae46:	3350      	adds	r3, #80	; 0x50
   1ae48:	b2db      	uxtb	r3, r3
   1ae4a:	001d      	movs	r5, r3
   1ae4c:	6a3b      	ldr	r3, [r7, #32]
   1ae4e:	0018      	movs	r0, r3
   1ae50:	4b65      	ldr	r3, [pc, #404]	; (1afe8 <xQueueReceive+0x354>)
   1ae52:	4798      	blx	r3
   1ae54:	0003      	movs	r3, r0
   1ae56:	001a      	movs	r2, r3
   1ae58:	4b64      	ldr	r3, [pc, #400]	; (1afec <xQueueReceive+0x358>)
   1ae5a:	5c9c      	ldrb	r4, [r3, r2]
   1ae5c:	6a3b      	ldr	r3, [r7, #32]
   1ae5e:	0018      	movs	r0, r3
   1ae60:	4b63      	ldr	r3, [pc, #396]	; (1aff0 <xQueueReceive+0x35c>)
   1ae62:	4798      	blx	r3
   1ae64:	0003      	movs	r3, r0
   1ae66:	b2db      	uxtb	r3, r3
   1ae68:	001a      	movs	r2, r3
   1ae6a:	0021      	movs	r1, r4
   1ae6c:	0028      	movs	r0, r5
   1ae6e:	4b61      	ldr	r3, [pc, #388]	; (1aff4 <xQueueReceive+0x360>)
   1ae70:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1ae72:	2300      	movs	r3, #0
   1ae74:	e120      	b.n	1b0b8 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1ae76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae78:	2b00      	cmp	r3, #0
   1ae7a:	d106      	bne.n	1ae8a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1ae7c:	2314      	movs	r3, #20
   1ae7e:	18fb      	adds	r3, r7, r3
   1ae80:	0018      	movs	r0, r3
   1ae82:	4b62      	ldr	r3, [pc, #392]	; (1b00c <xQueueReceive+0x378>)
   1ae84:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1ae86:	2301      	movs	r3, #1
   1ae88:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1ae8a:	4b5f      	ldr	r3, [pc, #380]	; (1b008 <xQueueReceive+0x374>)
   1ae8c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1ae8e:	4b60      	ldr	r3, [pc, #384]	; (1b010 <xQueueReceive+0x37c>)
   1ae90:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1ae92:	4b4f      	ldr	r3, [pc, #316]	; (1afd0 <xQueueReceive+0x33c>)
   1ae94:	4798      	blx	r3
   1ae96:	6a3b      	ldr	r3, [r7, #32]
   1ae98:	2244      	movs	r2, #68	; 0x44
   1ae9a:	5c9b      	ldrb	r3, [r3, r2]
   1ae9c:	b25b      	sxtb	r3, r3
   1ae9e:	3301      	adds	r3, #1
   1aea0:	d103      	bne.n	1aeaa <xQueueReceive+0x216>
   1aea2:	6a3b      	ldr	r3, [r7, #32]
   1aea4:	2244      	movs	r2, #68	; 0x44
   1aea6:	2100      	movs	r1, #0
   1aea8:	5499      	strb	r1, [r3, r2]
   1aeaa:	6a3b      	ldr	r3, [r7, #32]
   1aeac:	2245      	movs	r2, #69	; 0x45
   1aeae:	5c9b      	ldrb	r3, [r3, r2]
   1aeb0:	b25b      	sxtb	r3, r3
   1aeb2:	3301      	adds	r3, #1
   1aeb4:	d103      	bne.n	1aebe <xQueueReceive+0x22a>
   1aeb6:	6a3b      	ldr	r3, [r7, #32]
   1aeb8:	2245      	movs	r2, #69	; 0x45
   1aeba:	2100      	movs	r1, #0
   1aebc:	5499      	strb	r1, [r3, r2]
   1aebe:	4b52      	ldr	r3, [pc, #328]	; (1b008 <xQueueReceive+0x374>)
   1aec0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1aec2:	1d3a      	adds	r2, r7, #4
   1aec4:	2314      	movs	r3, #20
   1aec6:	18fb      	adds	r3, r7, r3
   1aec8:	0011      	movs	r1, r2
   1aeca:	0018      	movs	r0, r3
   1aecc:	4b51      	ldr	r3, [pc, #324]	; (1b014 <xQueueReceive+0x380>)
   1aece:	4798      	blx	r3
   1aed0:	1e03      	subs	r3, r0, #0
   1aed2:	d000      	beq.n	1aed6 <xQueueReceive+0x242>
   1aed4:	e0aa      	b.n	1b02c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1aed6:	6a3b      	ldr	r3, [r7, #32]
   1aed8:	0018      	movs	r0, r3
   1aeda:	4b4f      	ldr	r3, [pc, #316]	; (1b018 <xQueueReceive+0x384>)
   1aedc:	4798      	blx	r3
   1aede:	1e03      	subs	r3, r0, #0
   1aee0:	d06d      	beq.n	1afbe <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1aee2:	4b3d      	ldr	r3, [pc, #244]	; (1afd8 <xQueueReceive+0x344>)
   1aee4:	4798      	blx	r3
   1aee6:	0003      	movs	r3, r0
   1aee8:	0018      	movs	r0, r3
   1aeea:	4b3c      	ldr	r3, [pc, #240]	; (1afdc <xQueueReceive+0x348>)
   1aeec:	4798      	blx	r3
   1aeee:	0003      	movs	r3, r0
   1aef0:	001a      	movs	r2, r3
   1aef2:	4b3b      	ldr	r3, [pc, #236]	; (1afe0 <xQueueReceive+0x34c>)
   1aef4:	881b      	ldrh	r3, [r3, #0]
   1aef6:	4013      	ands	r3, r2
   1aef8:	b29b      	uxth	r3, r3
   1aefa:	2b00      	cmp	r3, #0
   1aefc:	d029      	beq.n	1af52 <xQueueReceive+0x2be>
   1aefe:	6a3b      	ldr	r3, [r7, #32]
   1af00:	0018      	movs	r0, r3
   1af02:	4b38      	ldr	r3, [pc, #224]	; (1afe4 <xQueueReceive+0x350>)
   1af04:	4798      	blx	r3
   1af06:	0003      	movs	r3, r0
   1af08:	001a      	movs	r2, r3
   1af0a:	4b35      	ldr	r3, [pc, #212]	; (1afe0 <xQueueReceive+0x34c>)
   1af0c:	881b      	ldrh	r3, [r3, #0]
   1af0e:	4013      	ands	r3, r2
   1af10:	b29b      	uxth	r3, r3
   1af12:	2b00      	cmp	r3, #0
   1af14:	d01d      	beq.n	1af52 <xQueueReceive+0x2be>
   1af16:	6a3b      	ldr	r3, [r7, #32]
   1af18:	0018      	movs	r0, r3
   1af1a:	4b33      	ldr	r3, [pc, #204]	; (1afe8 <xQueueReceive+0x354>)
   1af1c:	4798      	blx	r3
   1af1e:	0003      	movs	r3, r0
   1af20:	001a      	movs	r2, r3
   1af22:	4b32      	ldr	r3, [pc, #200]	; (1afec <xQueueReceive+0x358>)
   1af24:	5c9b      	ldrb	r3, [r3, r2]
   1af26:	3368      	adds	r3, #104	; 0x68
   1af28:	b2db      	uxtb	r3, r3
   1af2a:	001d      	movs	r5, r3
   1af2c:	6a3b      	ldr	r3, [r7, #32]
   1af2e:	0018      	movs	r0, r3
   1af30:	4b2d      	ldr	r3, [pc, #180]	; (1afe8 <xQueueReceive+0x354>)
   1af32:	4798      	blx	r3
   1af34:	0003      	movs	r3, r0
   1af36:	001a      	movs	r2, r3
   1af38:	4b2c      	ldr	r3, [pc, #176]	; (1afec <xQueueReceive+0x358>)
   1af3a:	5c9c      	ldrb	r4, [r3, r2]
   1af3c:	6a3b      	ldr	r3, [r7, #32]
   1af3e:	0018      	movs	r0, r3
   1af40:	4b2b      	ldr	r3, [pc, #172]	; (1aff0 <xQueueReceive+0x35c>)
   1af42:	4798      	blx	r3
   1af44:	0003      	movs	r3, r0
   1af46:	b2db      	uxtb	r3, r3
   1af48:	001a      	movs	r2, r3
   1af4a:	0021      	movs	r1, r4
   1af4c:	0028      	movs	r0, r5
   1af4e:	4b29      	ldr	r3, [pc, #164]	; (1aff4 <xQueueReceive+0x360>)
   1af50:	4798      	blx	r3
   1af52:	6a3b      	ldr	r3, [r7, #32]
   1af54:	0018      	movs	r0, r3
   1af56:	4b24      	ldr	r3, [pc, #144]	; (1afe8 <xQueueReceive+0x354>)
   1af58:	4798      	blx	r3
   1af5a:	0003      	movs	r3, r0
   1af5c:	001a      	movs	r2, r3
   1af5e:	4b23      	ldr	r3, [pc, #140]	; (1afec <xQueueReceive+0x358>)
   1af60:	5c9b      	ldrb	r3, [r3, r2]
   1af62:	2b02      	cmp	r3, #2
   1af64:	d018      	beq.n	1af98 <xQueueReceive+0x304>
   1af66:	4b1c      	ldr	r3, [pc, #112]	; (1afd8 <xQueueReceive+0x344>)
   1af68:	4798      	blx	r3
   1af6a:	0003      	movs	r3, r0
   1af6c:	0018      	movs	r0, r3
   1af6e:	4b1b      	ldr	r3, [pc, #108]	; (1afdc <xQueueReceive+0x348>)
   1af70:	4798      	blx	r3
   1af72:	0003      	movs	r3, r0
   1af74:	001a      	movs	r2, r3
   1af76:	4b1a      	ldr	r3, [pc, #104]	; (1afe0 <xQueueReceive+0x34c>)
   1af78:	881b      	ldrh	r3, [r3, #0]
   1af7a:	4013      	ands	r3, r2
   1af7c:	b29b      	uxth	r3, r3
   1af7e:	2b00      	cmp	r3, #0
   1af80:	d00a      	beq.n	1af98 <xQueueReceive+0x304>
   1af82:	4b15      	ldr	r3, [pc, #84]	; (1afd8 <xQueueReceive+0x344>)
   1af84:	4798      	blx	r3
   1af86:	0003      	movs	r3, r0
   1af88:	0018      	movs	r0, r3
   1af8a:	4b1b      	ldr	r3, [pc, #108]	; (1aff8 <xQueueReceive+0x364>)
   1af8c:	4798      	blx	r3
   1af8e:	0003      	movs	r3, r0
   1af90:	b2db      	uxtb	r3, r3
   1af92:	0018      	movs	r0, r3
   1af94:	4b21      	ldr	r3, [pc, #132]	; (1b01c <xQueueReceive+0x388>)
   1af96:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1af98:	6a3b      	ldr	r3, [r7, #32]
   1af9a:	3324      	adds	r3, #36	; 0x24
   1af9c:	687a      	ldr	r2, [r7, #4]
   1af9e:	0011      	movs	r1, r2
   1afa0:	0018      	movs	r0, r3
   1afa2:	4b1f      	ldr	r3, [pc, #124]	; (1b020 <xQueueReceive+0x38c>)
   1afa4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1afa6:	6a3b      	ldr	r3, [r7, #32]
   1afa8:	0018      	movs	r0, r3
   1afaa:	4b1e      	ldr	r3, [pc, #120]	; (1b024 <xQueueReceive+0x390>)
   1afac:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1afae:	4b1e      	ldr	r3, [pc, #120]	; (1b028 <xQueueReceive+0x394>)
   1afb0:	4798      	blx	r3
   1afb2:	1e03      	subs	r3, r0, #0
   1afb4:	d000      	beq.n	1afb8 <xQueueReceive+0x324>
   1afb6:	e698      	b.n	1acea <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1afb8:	4b12      	ldr	r3, [pc, #72]	; (1b004 <xQueueReceive+0x370>)
   1afba:	4798      	blx	r3
   1afbc:	e695      	b.n	1acea <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1afbe:	6a3b      	ldr	r3, [r7, #32]
   1afc0:	0018      	movs	r0, r3
   1afc2:	4b18      	ldr	r3, [pc, #96]	; (1b024 <xQueueReceive+0x390>)
   1afc4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1afc6:	4b18      	ldr	r3, [pc, #96]	; (1b028 <xQueueReceive+0x394>)
   1afc8:	4798      	blx	r3
   1afca:	e68e      	b.n	1acea <xQueueReceive+0x56>
   1afcc:	0001cb69 	.word	0x0001cb69
   1afd0:	00019e49 	.word	0x00019e49
   1afd4:	0001b6f5 	.word	0x0001b6f5
   1afd8:	000180dd 	.word	0x000180dd
   1afdc:	00017e41 	.word	0x00017e41
   1afe0:	20000130 	.word	0x20000130
   1afe4:	00017f01 	.word	0x00017f01
   1afe8:	00017e01 	.word	0x00017e01
   1afec:	20000124 	.word	0x20000124
   1aff0:	00017ee1 	.word	0x00017ee1
   1aff4:	00018839 	.word	0x00018839
   1aff8:	00017e21 	.word	0x00017e21
   1affc:	00018e95 	.word	0x00018e95
   1b000:	0001c6d9 	.word	0x0001c6d9
   1b004:	00019e31 	.word	0x00019e31
   1b008:	00019e6d 	.word	0x00019e6d
   1b00c:	0001c819 	.word	0x0001c819
   1b010:	0001c101 	.word	0x0001c101
   1b014:	0001c841 	.word	0x0001c841
   1b018:	0001b835 	.word	0x0001b835
   1b01c:	00018fd1 	.word	0x00018fd1
   1b020:	0001c5b5 	.word	0x0001c5b5
   1b024:	0001b745 	.word	0x0001b745
   1b028:	0001c119 	.word	0x0001c119
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1b02c:	6a3b      	ldr	r3, [r7, #32]
   1b02e:	0018      	movs	r0, r3
   1b030:	4b23      	ldr	r3, [pc, #140]	; (1b0c0 <xQueueReceive+0x42c>)
   1b032:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b034:	4b23      	ldr	r3, [pc, #140]	; (1b0c4 <xQueueReceive+0x430>)
   1b036:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b038:	6a3b      	ldr	r3, [r7, #32]
   1b03a:	0018      	movs	r0, r3
   1b03c:	4b22      	ldr	r3, [pc, #136]	; (1b0c8 <xQueueReceive+0x434>)
   1b03e:	4798      	blx	r3
   1b040:	1e03      	subs	r3, r0, #0
   1b042:	d100      	bne.n	1b046 <xQueueReceive+0x3b2>
   1b044:	e651      	b.n	1acea <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b046:	4b21      	ldr	r3, [pc, #132]	; (1b0cc <xQueueReceive+0x438>)
   1b048:	4798      	blx	r3
   1b04a:	0003      	movs	r3, r0
   1b04c:	0018      	movs	r0, r3
   1b04e:	4b20      	ldr	r3, [pc, #128]	; (1b0d0 <xQueueReceive+0x43c>)
   1b050:	4798      	blx	r3
   1b052:	0003      	movs	r3, r0
   1b054:	001a      	movs	r2, r3
   1b056:	4b1f      	ldr	r3, [pc, #124]	; (1b0d4 <xQueueReceive+0x440>)
   1b058:	881b      	ldrh	r3, [r3, #0]
   1b05a:	4013      	ands	r3, r2
   1b05c:	b29b      	uxth	r3, r3
   1b05e:	2b00      	cmp	r3, #0
   1b060:	d029      	beq.n	1b0b6 <xQueueReceive+0x422>
   1b062:	6a3b      	ldr	r3, [r7, #32]
   1b064:	0018      	movs	r0, r3
   1b066:	4b1c      	ldr	r3, [pc, #112]	; (1b0d8 <xQueueReceive+0x444>)
   1b068:	4798      	blx	r3
   1b06a:	0003      	movs	r3, r0
   1b06c:	001a      	movs	r2, r3
   1b06e:	4b19      	ldr	r3, [pc, #100]	; (1b0d4 <xQueueReceive+0x440>)
   1b070:	881b      	ldrh	r3, [r3, #0]
   1b072:	4013      	ands	r3, r2
   1b074:	b29b      	uxth	r3, r3
   1b076:	2b00      	cmp	r3, #0
   1b078:	d01d      	beq.n	1b0b6 <xQueueReceive+0x422>
   1b07a:	6a3b      	ldr	r3, [r7, #32]
   1b07c:	0018      	movs	r0, r3
   1b07e:	4b17      	ldr	r3, [pc, #92]	; (1b0dc <xQueueReceive+0x448>)
   1b080:	4798      	blx	r3
   1b082:	0003      	movs	r3, r0
   1b084:	001a      	movs	r2, r3
   1b086:	4b16      	ldr	r3, [pc, #88]	; (1b0e0 <xQueueReceive+0x44c>)
   1b088:	5c9b      	ldrb	r3, [r3, r2]
   1b08a:	3350      	adds	r3, #80	; 0x50
   1b08c:	b2db      	uxtb	r3, r3
   1b08e:	001d      	movs	r5, r3
   1b090:	6a3b      	ldr	r3, [r7, #32]
   1b092:	0018      	movs	r0, r3
   1b094:	4b11      	ldr	r3, [pc, #68]	; (1b0dc <xQueueReceive+0x448>)
   1b096:	4798      	blx	r3
   1b098:	0003      	movs	r3, r0
   1b09a:	001a      	movs	r2, r3
   1b09c:	4b10      	ldr	r3, [pc, #64]	; (1b0e0 <xQueueReceive+0x44c>)
   1b09e:	5c9c      	ldrb	r4, [r3, r2]
   1b0a0:	6a3b      	ldr	r3, [r7, #32]
   1b0a2:	0018      	movs	r0, r3
   1b0a4:	4b0f      	ldr	r3, [pc, #60]	; (1b0e4 <xQueueReceive+0x450>)
   1b0a6:	4798      	blx	r3
   1b0a8:	0003      	movs	r3, r0
   1b0aa:	b2db      	uxtb	r3, r3
   1b0ac:	001a      	movs	r2, r3
   1b0ae:	0021      	movs	r1, r4
   1b0b0:	0028      	movs	r0, r5
   1b0b2:	4b0d      	ldr	r3, [pc, #52]	; (1b0e8 <xQueueReceive+0x454>)
   1b0b4:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b0b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b0b8:	0018      	movs	r0, r3
   1b0ba:	46bd      	mov	sp, r7
   1b0bc:	b00a      	add	sp, #40	; 0x28
   1b0be:	bdb0      	pop	{r4, r5, r7, pc}
   1b0c0:	0001b745 	.word	0x0001b745
   1b0c4:	0001c119 	.word	0x0001c119
   1b0c8:	0001b835 	.word	0x0001b835
   1b0cc:	000180dd 	.word	0x000180dd
   1b0d0:	00017e41 	.word	0x00017e41
   1b0d4:	20000130 	.word	0x20000130
   1b0d8:	00017f01 	.word	0x00017f01
   1b0dc:	00017e01 	.word	0x00017e01
   1b0e0:	20000124 	.word	0x20000124
   1b0e4:	00017ee1 	.word	0x00017ee1
   1b0e8:	00018839 	.word	0x00018839

0001b0ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1b0ec:	b5b0      	push	{r4, r5, r7, lr}
   1b0ee:	b08a      	sub	sp, #40	; 0x28
   1b0f0:	af00      	add	r7, sp, #0
   1b0f2:	6078      	str	r0, [r7, #4]
   1b0f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1b0f6:	2300      	movs	r3, #0
   1b0f8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b0fa:	687b      	ldr	r3, [r7, #4]
   1b0fc:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1b0fe:	2300      	movs	r3, #0
   1b100:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b102:	69fb      	ldr	r3, [r7, #28]
   1b104:	2b00      	cmp	r3, #0
   1b106:	d101      	bne.n	1b10c <xQueueSemaphoreTake+0x20>
   1b108:	b672      	cpsid	i
   1b10a:	e7fe      	b.n	1b10a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b10c:	69fb      	ldr	r3, [r7, #28]
   1b10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b110:	2b00      	cmp	r3, #0
   1b112:	d001      	beq.n	1b118 <xQueueSemaphoreTake+0x2c>
   1b114:	b672      	cpsid	i
   1b116:	e7fe      	b.n	1b116 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b118:	4bcb      	ldr	r3, [pc, #812]	; (1b448 <xQueueSemaphoreTake+0x35c>)
   1b11a:	4798      	blx	r3
   1b11c:	1e03      	subs	r3, r0, #0
   1b11e:	d102      	bne.n	1b126 <xQueueSemaphoreTake+0x3a>
   1b120:	683b      	ldr	r3, [r7, #0]
   1b122:	2b00      	cmp	r3, #0
   1b124:	d101      	bne.n	1b12a <xQueueSemaphoreTake+0x3e>
   1b126:	2301      	movs	r3, #1
   1b128:	e000      	b.n	1b12c <xQueueSemaphoreTake+0x40>
   1b12a:	2300      	movs	r3, #0
   1b12c:	2b00      	cmp	r3, #0
   1b12e:	d101      	bne.n	1b134 <xQueueSemaphoreTake+0x48>
   1b130:	b672      	cpsid	i
   1b132:	e7fe      	b.n	1b132 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1b134:	4bc5      	ldr	r3, [pc, #788]	; (1b44c <xQueueSemaphoreTake+0x360>)
   1b136:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1b138:	69fb      	ldr	r3, [r7, #28]
   1b13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b13c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1b13e:	69bb      	ldr	r3, [r7, #24]
   1b140:	2b00      	cmp	r3, #0
   1b142:	d100      	bne.n	1b146 <xQueueSemaphoreTake+0x5a>
   1b144:	e080      	b.n	1b248 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1b146:	4bc2      	ldr	r3, [pc, #776]	; (1b450 <xQueueSemaphoreTake+0x364>)
   1b148:	4798      	blx	r3
   1b14a:	0003      	movs	r3, r0
   1b14c:	0018      	movs	r0, r3
   1b14e:	4bc1      	ldr	r3, [pc, #772]	; (1b454 <xQueueSemaphoreTake+0x368>)
   1b150:	4798      	blx	r3
   1b152:	0003      	movs	r3, r0
   1b154:	001a      	movs	r2, r3
   1b156:	4bc0      	ldr	r3, [pc, #768]	; (1b458 <xQueueSemaphoreTake+0x36c>)
   1b158:	881b      	ldrh	r3, [r3, #0]
   1b15a:	4013      	ands	r3, r2
   1b15c:	b29b      	uxth	r3, r3
   1b15e:	2b00      	cmp	r3, #0
   1b160:	d029      	beq.n	1b1b6 <xQueueSemaphoreTake+0xca>
   1b162:	69fb      	ldr	r3, [r7, #28]
   1b164:	0018      	movs	r0, r3
   1b166:	4bbd      	ldr	r3, [pc, #756]	; (1b45c <xQueueSemaphoreTake+0x370>)
   1b168:	4798      	blx	r3
   1b16a:	0003      	movs	r3, r0
   1b16c:	001a      	movs	r2, r3
   1b16e:	4bba      	ldr	r3, [pc, #744]	; (1b458 <xQueueSemaphoreTake+0x36c>)
   1b170:	881b      	ldrh	r3, [r3, #0]
   1b172:	4013      	ands	r3, r2
   1b174:	b29b      	uxth	r3, r3
   1b176:	2b00      	cmp	r3, #0
   1b178:	d01d      	beq.n	1b1b6 <xQueueSemaphoreTake+0xca>
   1b17a:	69fb      	ldr	r3, [r7, #28]
   1b17c:	0018      	movs	r0, r3
   1b17e:	4bb8      	ldr	r3, [pc, #736]	; (1b460 <xQueueSemaphoreTake+0x374>)
   1b180:	4798      	blx	r3
   1b182:	0003      	movs	r3, r0
   1b184:	001a      	movs	r2, r3
   1b186:	4bb7      	ldr	r3, [pc, #732]	; (1b464 <xQueueSemaphoreTake+0x378>)
   1b188:	5c9b      	ldrb	r3, [r3, r2]
   1b18a:	3328      	adds	r3, #40	; 0x28
   1b18c:	b2db      	uxtb	r3, r3
   1b18e:	001d      	movs	r5, r3
   1b190:	69fb      	ldr	r3, [r7, #28]
   1b192:	0018      	movs	r0, r3
   1b194:	4bb2      	ldr	r3, [pc, #712]	; (1b460 <xQueueSemaphoreTake+0x374>)
   1b196:	4798      	blx	r3
   1b198:	0003      	movs	r3, r0
   1b19a:	001a      	movs	r2, r3
   1b19c:	4bb1      	ldr	r3, [pc, #708]	; (1b464 <xQueueSemaphoreTake+0x378>)
   1b19e:	5c9c      	ldrb	r4, [r3, r2]
   1b1a0:	69fb      	ldr	r3, [r7, #28]
   1b1a2:	0018      	movs	r0, r3
   1b1a4:	4bb0      	ldr	r3, [pc, #704]	; (1b468 <xQueueSemaphoreTake+0x37c>)
   1b1a6:	4798      	blx	r3
   1b1a8:	0003      	movs	r3, r0
   1b1aa:	b2db      	uxtb	r3, r3
   1b1ac:	001a      	movs	r2, r3
   1b1ae:	0021      	movs	r1, r4
   1b1b0:	0028      	movs	r0, r5
   1b1b2:	4bae      	ldr	r3, [pc, #696]	; (1b46c <xQueueSemaphoreTake+0x380>)
   1b1b4:	4798      	blx	r3
   1b1b6:	69fb      	ldr	r3, [r7, #28]
   1b1b8:	0018      	movs	r0, r3
   1b1ba:	4ba9      	ldr	r3, [pc, #676]	; (1b460 <xQueueSemaphoreTake+0x374>)
   1b1bc:	4798      	blx	r3
   1b1be:	0003      	movs	r3, r0
   1b1c0:	001a      	movs	r2, r3
   1b1c2:	4ba8      	ldr	r3, [pc, #672]	; (1b464 <xQueueSemaphoreTake+0x378>)
   1b1c4:	5c9c      	ldrb	r4, [r3, r2]
   1b1c6:	69fb      	ldr	r3, [r7, #28]
   1b1c8:	0018      	movs	r0, r3
   1b1ca:	4ba7      	ldr	r3, [pc, #668]	; (1b468 <xQueueSemaphoreTake+0x37c>)
   1b1cc:	4798      	blx	r3
   1b1ce:	0003      	movs	r3, r0
   1b1d0:	b2dd      	uxtb	r5, r3
   1b1d2:	69fb      	ldr	r3, [r7, #28]
   1b1d4:	0018      	movs	r0, r3
   1b1d6:	4ba2      	ldr	r3, [pc, #648]	; (1b460 <xQueueSemaphoreTake+0x374>)
   1b1d8:	4798      	blx	r3
   1b1da:	0003      	movs	r3, r0
   1b1dc:	001a      	movs	r2, r3
   1b1de:	4ba1      	ldr	r3, [pc, #644]	; (1b464 <xQueueSemaphoreTake+0x378>)
   1b1e0:	5c9b      	ldrb	r3, [r3, r2]
   1b1e2:	2b02      	cmp	r3, #2
   1b1e4:	d108      	bne.n	1b1f8 <xQueueSemaphoreTake+0x10c>
   1b1e6:	4b9a      	ldr	r3, [pc, #616]	; (1b450 <xQueueSemaphoreTake+0x364>)
   1b1e8:	4798      	blx	r3
   1b1ea:	0003      	movs	r3, r0
   1b1ec:	0018      	movs	r0, r3
   1b1ee:	4ba0      	ldr	r3, [pc, #640]	; (1b470 <xQueueSemaphoreTake+0x384>)
   1b1f0:	4798      	blx	r3
   1b1f2:	0003      	movs	r3, r0
   1b1f4:	b2db      	uxtb	r3, r3
   1b1f6:	e004      	b.n	1b202 <xQueueSemaphoreTake+0x116>
   1b1f8:	69fb      	ldr	r3, [r7, #28]
   1b1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b1fc:	b2db      	uxtb	r3, r3
   1b1fe:	3b01      	subs	r3, #1
   1b200:	b2db      	uxtb	r3, r3
   1b202:	001a      	movs	r2, r3
   1b204:	0029      	movs	r1, r5
   1b206:	0020      	movs	r0, r4
   1b208:	4b9a      	ldr	r3, [pc, #616]	; (1b474 <xQueueSemaphoreTake+0x388>)
   1b20a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1b20c:	69bb      	ldr	r3, [r7, #24]
   1b20e:	1e5a      	subs	r2, r3, #1
   1b210:	69fb      	ldr	r3, [r7, #28]
   1b212:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b214:	69fb      	ldr	r3, [r7, #28]
   1b216:	681b      	ldr	r3, [r3, #0]
   1b218:	2b00      	cmp	r3, #0
   1b21a:	d104      	bne.n	1b226 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1b21c:	4b96      	ldr	r3, [pc, #600]	; (1b478 <xQueueSemaphoreTake+0x38c>)
   1b21e:	4798      	blx	r3
   1b220:	0002      	movs	r2, r0
   1b222:	69fb      	ldr	r3, [r7, #28]
   1b224:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b226:	69fb      	ldr	r3, [r7, #28]
   1b228:	691b      	ldr	r3, [r3, #16]
   1b22a:	2b00      	cmp	r3, #0
   1b22c:	d008      	beq.n	1b240 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b22e:	69fb      	ldr	r3, [r7, #28]
   1b230:	3310      	adds	r3, #16
   1b232:	0018      	movs	r0, r3
   1b234:	4b91      	ldr	r3, [pc, #580]	; (1b47c <xQueueSemaphoreTake+0x390>)
   1b236:	4798      	blx	r3
   1b238:	1e03      	subs	r3, r0, #0
   1b23a:	d001      	beq.n	1b240 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b23c:	4b90      	ldr	r3, [pc, #576]	; (1b480 <xQueueSemaphoreTake+0x394>)
   1b23e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1b240:	4b90      	ldr	r3, [pc, #576]	; (1b484 <xQueueSemaphoreTake+0x398>)
   1b242:	4798      	blx	r3
				return pdPASS;
   1b244:	2301      	movs	r3, #1
   1b246:	e18b      	b.n	1b560 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b248:	683b      	ldr	r3, [r7, #0]
   1b24a:	2b00      	cmp	r3, #0
   1b24c:	d140      	bne.n	1b2d0 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1b24e:	6a3b      	ldr	r3, [r7, #32]
   1b250:	2b00      	cmp	r3, #0
   1b252:	d001      	beq.n	1b258 <xQueueSemaphoreTake+0x16c>
   1b254:	b672      	cpsid	i
   1b256:	e7fe      	b.n	1b256 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1b258:	4b8a      	ldr	r3, [pc, #552]	; (1b484 <xQueueSemaphoreTake+0x398>)
   1b25a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b25c:	4b7c      	ldr	r3, [pc, #496]	; (1b450 <xQueueSemaphoreTake+0x364>)
   1b25e:	4798      	blx	r3
   1b260:	0003      	movs	r3, r0
   1b262:	0018      	movs	r0, r3
   1b264:	4b7b      	ldr	r3, [pc, #492]	; (1b454 <xQueueSemaphoreTake+0x368>)
   1b266:	4798      	blx	r3
   1b268:	0003      	movs	r3, r0
   1b26a:	001a      	movs	r2, r3
   1b26c:	4b7a      	ldr	r3, [pc, #488]	; (1b458 <xQueueSemaphoreTake+0x36c>)
   1b26e:	881b      	ldrh	r3, [r3, #0]
   1b270:	4013      	ands	r3, r2
   1b272:	b29b      	uxth	r3, r3
   1b274:	2b00      	cmp	r3, #0
   1b276:	d029      	beq.n	1b2cc <xQueueSemaphoreTake+0x1e0>
   1b278:	69fb      	ldr	r3, [r7, #28]
   1b27a:	0018      	movs	r0, r3
   1b27c:	4b77      	ldr	r3, [pc, #476]	; (1b45c <xQueueSemaphoreTake+0x370>)
   1b27e:	4798      	blx	r3
   1b280:	0003      	movs	r3, r0
   1b282:	001a      	movs	r2, r3
   1b284:	4b74      	ldr	r3, [pc, #464]	; (1b458 <xQueueSemaphoreTake+0x36c>)
   1b286:	881b      	ldrh	r3, [r3, #0]
   1b288:	4013      	ands	r3, r2
   1b28a:	b29b      	uxth	r3, r3
   1b28c:	2b00      	cmp	r3, #0
   1b28e:	d01d      	beq.n	1b2cc <xQueueSemaphoreTake+0x1e0>
   1b290:	69fb      	ldr	r3, [r7, #28]
   1b292:	0018      	movs	r0, r3
   1b294:	4b72      	ldr	r3, [pc, #456]	; (1b460 <xQueueSemaphoreTake+0x374>)
   1b296:	4798      	blx	r3
   1b298:	0003      	movs	r3, r0
   1b29a:	001a      	movs	r2, r3
   1b29c:	4b71      	ldr	r3, [pc, #452]	; (1b464 <xQueueSemaphoreTake+0x378>)
   1b29e:	5c9b      	ldrb	r3, [r3, r2]
   1b2a0:	3350      	adds	r3, #80	; 0x50
   1b2a2:	b2db      	uxtb	r3, r3
   1b2a4:	001d      	movs	r5, r3
   1b2a6:	69fb      	ldr	r3, [r7, #28]
   1b2a8:	0018      	movs	r0, r3
   1b2aa:	4b6d      	ldr	r3, [pc, #436]	; (1b460 <xQueueSemaphoreTake+0x374>)
   1b2ac:	4798      	blx	r3
   1b2ae:	0003      	movs	r3, r0
   1b2b0:	001a      	movs	r2, r3
   1b2b2:	4b6c      	ldr	r3, [pc, #432]	; (1b464 <xQueueSemaphoreTake+0x378>)
   1b2b4:	5c9c      	ldrb	r4, [r3, r2]
   1b2b6:	69fb      	ldr	r3, [r7, #28]
   1b2b8:	0018      	movs	r0, r3
   1b2ba:	4b6b      	ldr	r3, [pc, #428]	; (1b468 <xQueueSemaphoreTake+0x37c>)
   1b2bc:	4798      	blx	r3
   1b2be:	0003      	movs	r3, r0
   1b2c0:	b2db      	uxtb	r3, r3
   1b2c2:	001a      	movs	r2, r3
   1b2c4:	0021      	movs	r1, r4
   1b2c6:	0028      	movs	r0, r5
   1b2c8:	4b68      	ldr	r3, [pc, #416]	; (1b46c <xQueueSemaphoreTake+0x380>)
   1b2ca:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1b2cc:	2300      	movs	r3, #0
   1b2ce:	e147      	b.n	1b560 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b2d2:	2b00      	cmp	r3, #0
   1b2d4:	d106      	bne.n	1b2e4 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b2d6:	230c      	movs	r3, #12
   1b2d8:	18fb      	adds	r3, r7, r3
   1b2da:	0018      	movs	r0, r3
   1b2dc:	4b6a      	ldr	r3, [pc, #424]	; (1b488 <xQueueSemaphoreTake+0x39c>)
   1b2de:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b2e0:	2301      	movs	r3, #1
   1b2e2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b2e4:	4b67      	ldr	r3, [pc, #412]	; (1b484 <xQueueSemaphoreTake+0x398>)
   1b2e6:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b2e8:	4b68      	ldr	r3, [pc, #416]	; (1b48c <xQueueSemaphoreTake+0x3a0>)
   1b2ea:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b2ec:	4b57      	ldr	r3, [pc, #348]	; (1b44c <xQueueSemaphoreTake+0x360>)
   1b2ee:	4798      	blx	r3
   1b2f0:	69fb      	ldr	r3, [r7, #28]
   1b2f2:	2244      	movs	r2, #68	; 0x44
   1b2f4:	5c9b      	ldrb	r3, [r3, r2]
   1b2f6:	b25b      	sxtb	r3, r3
   1b2f8:	3301      	adds	r3, #1
   1b2fa:	d103      	bne.n	1b304 <xQueueSemaphoreTake+0x218>
   1b2fc:	69fb      	ldr	r3, [r7, #28]
   1b2fe:	2244      	movs	r2, #68	; 0x44
   1b300:	2100      	movs	r1, #0
   1b302:	5499      	strb	r1, [r3, r2]
   1b304:	69fb      	ldr	r3, [r7, #28]
   1b306:	2245      	movs	r2, #69	; 0x45
   1b308:	5c9b      	ldrb	r3, [r3, r2]
   1b30a:	b25b      	sxtb	r3, r3
   1b30c:	3301      	adds	r3, #1
   1b30e:	d103      	bne.n	1b318 <xQueueSemaphoreTake+0x22c>
   1b310:	69fb      	ldr	r3, [r7, #28]
   1b312:	2245      	movs	r2, #69	; 0x45
   1b314:	2100      	movs	r1, #0
   1b316:	5499      	strb	r1, [r3, r2]
   1b318:	4b5a      	ldr	r3, [pc, #360]	; (1b484 <xQueueSemaphoreTake+0x398>)
   1b31a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b31c:	003a      	movs	r2, r7
   1b31e:	230c      	movs	r3, #12
   1b320:	18fb      	adds	r3, r7, r3
   1b322:	0011      	movs	r1, r2
   1b324:	0018      	movs	r0, r3
   1b326:	4b5a      	ldr	r3, [pc, #360]	; (1b490 <xQueueSemaphoreTake+0x3a4>)
   1b328:	4798      	blx	r3
   1b32a:	1e03      	subs	r3, r0, #0
   1b32c:	d000      	beq.n	1b330 <xQueueSemaphoreTake+0x244>
   1b32e:	e0bd      	b.n	1b4ac <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b330:	69fb      	ldr	r3, [r7, #28]
   1b332:	0018      	movs	r0, r3
   1b334:	4b57      	ldr	r3, [pc, #348]	; (1b494 <xQueueSemaphoreTake+0x3a8>)
   1b336:	4798      	blx	r3
   1b338:	1e03      	subs	r3, r0, #0
   1b33a:	d100      	bne.n	1b33e <xQueueSemaphoreTake+0x252>
   1b33c:	e07c      	b.n	1b438 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1b33e:	4b44      	ldr	r3, [pc, #272]	; (1b450 <xQueueSemaphoreTake+0x364>)
   1b340:	4798      	blx	r3
   1b342:	0003      	movs	r3, r0
   1b344:	0018      	movs	r0, r3
   1b346:	4b43      	ldr	r3, [pc, #268]	; (1b454 <xQueueSemaphoreTake+0x368>)
   1b348:	4798      	blx	r3
   1b34a:	0003      	movs	r3, r0
   1b34c:	001a      	movs	r2, r3
   1b34e:	4b42      	ldr	r3, [pc, #264]	; (1b458 <xQueueSemaphoreTake+0x36c>)
   1b350:	881b      	ldrh	r3, [r3, #0]
   1b352:	4013      	ands	r3, r2
   1b354:	b29b      	uxth	r3, r3
   1b356:	2b00      	cmp	r3, #0
   1b358:	d029      	beq.n	1b3ae <xQueueSemaphoreTake+0x2c2>
   1b35a:	69fb      	ldr	r3, [r7, #28]
   1b35c:	0018      	movs	r0, r3
   1b35e:	4b3f      	ldr	r3, [pc, #252]	; (1b45c <xQueueSemaphoreTake+0x370>)
   1b360:	4798      	blx	r3
   1b362:	0003      	movs	r3, r0
   1b364:	001a      	movs	r2, r3
   1b366:	4b3c      	ldr	r3, [pc, #240]	; (1b458 <xQueueSemaphoreTake+0x36c>)
   1b368:	881b      	ldrh	r3, [r3, #0]
   1b36a:	4013      	ands	r3, r2
   1b36c:	b29b      	uxth	r3, r3
   1b36e:	2b00      	cmp	r3, #0
   1b370:	d01d      	beq.n	1b3ae <xQueueSemaphoreTake+0x2c2>
   1b372:	69fb      	ldr	r3, [r7, #28]
   1b374:	0018      	movs	r0, r3
   1b376:	4b3a      	ldr	r3, [pc, #232]	; (1b460 <xQueueSemaphoreTake+0x374>)
   1b378:	4798      	blx	r3
   1b37a:	0003      	movs	r3, r0
   1b37c:	001a      	movs	r2, r3
   1b37e:	4b39      	ldr	r3, [pc, #228]	; (1b464 <xQueueSemaphoreTake+0x378>)
   1b380:	5c9b      	ldrb	r3, [r3, r2]
   1b382:	3368      	adds	r3, #104	; 0x68
   1b384:	b2db      	uxtb	r3, r3
   1b386:	001d      	movs	r5, r3
   1b388:	69fb      	ldr	r3, [r7, #28]
   1b38a:	0018      	movs	r0, r3
   1b38c:	4b34      	ldr	r3, [pc, #208]	; (1b460 <xQueueSemaphoreTake+0x374>)
   1b38e:	4798      	blx	r3
   1b390:	0003      	movs	r3, r0
   1b392:	001a      	movs	r2, r3
   1b394:	4b33      	ldr	r3, [pc, #204]	; (1b464 <xQueueSemaphoreTake+0x378>)
   1b396:	5c9c      	ldrb	r4, [r3, r2]
   1b398:	69fb      	ldr	r3, [r7, #28]
   1b39a:	0018      	movs	r0, r3
   1b39c:	4b32      	ldr	r3, [pc, #200]	; (1b468 <xQueueSemaphoreTake+0x37c>)
   1b39e:	4798      	blx	r3
   1b3a0:	0003      	movs	r3, r0
   1b3a2:	b2db      	uxtb	r3, r3
   1b3a4:	001a      	movs	r2, r3
   1b3a6:	0021      	movs	r1, r4
   1b3a8:	0028      	movs	r0, r5
   1b3aa:	4b30      	ldr	r3, [pc, #192]	; (1b46c <xQueueSemaphoreTake+0x380>)
   1b3ac:	4798      	blx	r3
   1b3ae:	69fb      	ldr	r3, [r7, #28]
   1b3b0:	0018      	movs	r0, r3
   1b3b2:	4b2b      	ldr	r3, [pc, #172]	; (1b460 <xQueueSemaphoreTake+0x374>)
   1b3b4:	4798      	blx	r3
   1b3b6:	0003      	movs	r3, r0
   1b3b8:	001a      	movs	r2, r3
   1b3ba:	4b2a      	ldr	r3, [pc, #168]	; (1b464 <xQueueSemaphoreTake+0x378>)
   1b3bc:	5c9b      	ldrb	r3, [r3, r2]
   1b3be:	2b02      	cmp	r3, #2
   1b3c0:	d018      	beq.n	1b3f4 <xQueueSemaphoreTake+0x308>
   1b3c2:	4b23      	ldr	r3, [pc, #140]	; (1b450 <xQueueSemaphoreTake+0x364>)
   1b3c4:	4798      	blx	r3
   1b3c6:	0003      	movs	r3, r0
   1b3c8:	0018      	movs	r0, r3
   1b3ca:	4b22      	ldr	r3, [pc, #136]	; (1b454 <xQueueSemaphoreTake+0x368>)
   1b3cc:	4798      	blx	r3
   1b3ce:	0003      	movs	r3, r0
   1b3d0:	001a      	movs	r2, r3
   1b3d2:	4b21      	ldr	r3, [pc, #132]	; (1b458 <xQueueSemaphoreTake+0x36c>)
   1b3d4:	881b      	ldrh	r3, [r3, #0]
   1b3d6:	4013      	ands	r3, r2
   1b3d8:	b29b      	uxth	r3, r3
   1b3da:	2b00      	cmp	r3, #0
   1b3dc:	d00a      	beq.n	1b3f4 <xQueueSemaphoreTake+0x308>
   1b3de:	4b1c      	ldr	r3, [pc, #112]	; (1b450 <xQueueSemaphoreTake+0x364>)
   1b3e0:	4798      	blx	r3
   1b3e2:	0003      	movs	r3, r0
   1b3e4:	0018      	movs	r0, r3
   1b3e6:	4b22      	ldr	r3, [pc, #136]	; (1b470 <xQueueSemaphoreTake+0x384>)
   1b3e8:	4798      	blx	r3
   1b3ea:	0003      	movs	r3, r0
   1b3ec:	b2db      	uxtb	r3, r3
   1b3ee:	0018      	movs	r0, r3
   1b3f0:	4b29      	ldr	r3, [pc, #164]	; (1b498 <xQueueSemaphoreTake+0x3ac>)
   1b3f2:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b3f4:	69fb      	ldr	r3, [r7, #28]
   1b3f6:	681b      	ldr	r3, [r3, #0]
   1b3f8:	2b00      	cmp	r3, #0
   1b3fa:	d10a      	bne.n	1b412 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1b3fc:	4b13      	ldr	r3, [pc, #76]	; (1b44c <xQueueSemaphoreTake+0x360>)
   1b3fe:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1b400:	69fb      	ldr	r3, [r7, #28]
   1b402:	685b      	ldr	r3, [r3, #4]
   1b404:	0018      	movs	r0, r3
   1b406:	4b25      	ldr	r3, [pc, #148]	; (1b49c <xQueueSemaphoreTake+0x3b0>)
   1b408:	4798      	blx	r3
   1b40a:	0003      	movs	r3, r0
   1b40c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1b40e:	4b1d      	ldr	r3, [pc, #116]	; (1b484 <xQueueSemaphoreTake+0x398>)
   1b410:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b412:	69fb      	ldr	r3, [r7, #28]
   1b414:	3324      	adds	r3, #36	; 0x24
   1b416:	683a      	ldr	r2, [r7, #0]
   1b418:	0011      	movs	r1, r2
   1b41a:	0018      	movs	r0, r3
   1b41c:	4b20      	ldr	r3, [pc, #128]	; (1b4a0 <xQueueSemaphoreTake+0x3b4>)
   1b41e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b420:	69fb      	ldr	r3, [r7, #28]
   1b422:	0018      	movs	r0, r3
   1b424:	4b1f      	ldr	r3, [pc, #124]	; (1b4a4 <xQueueSemaphoreTake+0x3b8>)
   1b426:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b428:	4b1f      	ldr	r3, [pc, #124]	; (1b4a8 <xQueueSemaphoreTake+0x3bc>)
   1b42a:	4798      	blx	r3
   1b42c:	1e03      	subs	r3, r0, #0
   1b42e:	d000      	beq.n	1b432 <xQueueSemaphoreTake+0x346>
   1b430:	e680      	b.n	1b134 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1b432:	4b13      	ldr	r3, [pc, #76]	; (1b480 <xQueueSemaphoreTake+0x394>)
   1b434:	4798      	blx	r3
   1b436:	e67d      	b.n	1b134 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1b438:	69fb      	ldr	r3, [r7, #28]
   1b43a:	0018      	movs	r0, r3
   1b43c:	4b19      	ldr	r3, [pc, #100]	; (1b4a4 <xQueueSemaphoreTake+0x3b8>)
   1b43e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b440:	4b19      	ldr	r3, [pc, #100]	; (1b4a8 <xQueueSemaphoreTake+0x3bc>)
   1b442:	4798      	blx	r3
   1b444:	e676      	b.n	1b134 <xQueueSemaphoreTake+0x48>
   1b446:	46c0      	nop			; (mov r8, r8)
   1b448:	0001cb69 	.word	0x0001cb69
   1b44c:	00019e49 	.word	0x00019e49
   1b450:	000180dd 	.word	0x000180dd
   1b454:	00017e41 	.word	0x00017e41
   1b458:	20000130 	.word	0x20000130
   1b45c:	00017f01 	.word	0x00017f01
   1b460:	00017e01 	.word	0x00017e01
   1b464:	20000124 	.word	0x20000124
   1b468:	00017ee1 	.word	0x00017ee1
   1b46c:	00018839 	.word	0x00018839
   1b470:	00017e21 	.word	0x00017e21
   1b474:	00018e95 	.word	0x00018e95
   1b478:	0001d035 	.word	0x0001d035
   1b47c:	0001c6d9 	.word	0x0001c6d9
   1b480:	00019e31 	.word	0x00019e31
   1b484:	00019e6d 	.word	0x00019e6d
   1b488:	0001c819 	.word	0x0001c819
   1b48c:	0001c101 	.word	0x0001c101
   1b490:	0001c841 	.word	0x0001c841
   1b494:	0001b835 	.word	0x0001b835
   1b498:	00018fd1 	.word	0x00018fd1
   1b49c:	0001cba1 	.word	0x0001cba1
   1b4a0:	0001c5b5 	.word	0x0001c5b5
   1b4a4:	0001b745 	.word	0x0001b745
   1b4a8:	0001c119 	.word	0x0001c119
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1b4ac:	69fb      	ldr	r3, [r7, #28]
   1b4ae:	0018      	movs	r0, r3
   1b4b0:	4b2d      	ldr	r3, [pc, #180]	; (1b568 <xQueueSemaphoreTake+0x47c>)
   1b4b2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b4b4:	4b2d      	ldr	r3, [pc, #180]	; (1b56c <xQueueSemaphoreTake+0x480>)
   1b4b6:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b4b8:	69fb      	ldr	r3, [r7, #28]
   1b4ba:	0018      	movs	r0, r3
   1b4bc:	4b2c      	ldr	r3, [pc, #176]	; (1b570 <xQueueSemaphoreTake+0x484>)
   1b4be:	4798      	blx	r3
   1b4c0:	1e03      	subs	r3, r0, #0
   1b4c2:	d100      	bne.n	1b4c6 <xQueueSemaphoreTake+0x3da>
   1b4c4:	e636      	b.n	1b134 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1b4c6:	6a3b      	ldr	r3, [r7, #32]
   1b4c8:	2b00      	cmp	r3, #0
   1b4ca:	d010      	beq.n	1b4ee <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1b4cc:	4b29      	ldr	r3, [pc, #164]	; (1b574 <xQueueSemaphoreTake+0x488>)
   1b4ce:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1b4d0:	69fb      	ldr	r3, [r7, #28]
   1b4d2:	0018      	movs	r0, r3
   1b4d4:	4b28      	ldr	r3, [pc, #160]	; (1b578 <xQueueSemaphoreTake+0x48c>)
   1b4d6:	4798      	blx	r3
   1b4d8:	0003      	movs	r3, r0
   1b4da:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1b4dc:	69fb      	ldr	r3, [r7, #28]
   1b4de:	685b      	ldr	r3, [r3, #4]
   1b4e0:	697a      	ldr	r2, [r7, #20]
   1b4e2:	0011      	movs	r1, r2
   1b4e4:	0018      	movs	r0, r3
   1b4e6:	4b25      	ldr	r3, [pc, #148]	; (1b57c <xQueueSemaphoreTake+0x490>)
   1b4e8:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1b4ea:	4b25      	ldr	r3, [pc, #148]	; (1b580 <xQueueSemaphoreTake+0x494>)
   1b4ec:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b4ee:	4b25      	ldr	r3, [pc, #148]	; (1b584 <xQueueSemaphoreTake+0x498>)
   1b4f0:	4798      	blx	r3
   1b4f2:	0003      	movs	r3, r0
   1b4f4:	0018      	movs	r0, r3
   1b4f6:	4b24      	ldr	r3, [pc, #144]	; (1b588 <xQueueSemaphoreTake+0x49c>)
   1b4f8:	4798      	blx	r3
   1b4fa:	0003      	movs	r3, r0
   1b4fc:	001a      	movs	r2, r3
   1b4fe:	4b23      	ldr	r3, [pc, #140]	; (1b58c <xQueueSemaphoreTake+0x4a0>)
   1b500:	881b      	ldrh	r3, [r3, #0]
   1b502:	4013      	ands	r3, r2
   1b504:	b29b      	uxth	r3, r3
   1b506:	2b00      	cmp	r3, #0
   1b508:	d029      	beq.n	1b55e <xQueueSemaphoreTake+0x472>
   1b50a:	69fb      	ldr	r3, [r7, #28]
   1b50c:	0018      	movs	r0, r3
   1b50e:	4b20      	ldr	r3, [pc, #128]	; (1b590 <xQueueSemaphoreTake+0x4a4>)
   1b510:	4798      	blx	r3
   1b512:	0003      	movs	r3, r0
   1b514:	001a      	movs	r2, r3
   1b516:	4b1d      	ldr	r3, [pc, #116]	; (1b58c <xQueueSemaphoreTake+0x4a0>)
   1b518:	881b      	ldrh	r3, [r3, #0]
   1b51a:	4013      	ands	r3, r2
   1b51c:	b29b      	uxth	r3, r3
   1b51e:	2b00      	cmp	r3, #0
   1b520:	d01d      	beq.n	1b55e <xQueueSemaphoreTake+0x472>
   1b522:	69fb      	ldr	r3, [r7, #28]
   1b524:	0018      	movs	r0, r3
   1b526:	4b1b      	ldr	r3, [pc, #108]	; (1b594 <xQueueSemaphoreTake+0x4a8>)
   1b528:	4798      	blx	r3
   1b52a:	0003      	movs	r3, r0
   1b52c:	001a      	movs	r2, r3
   1b52e:	4b1a      	ldr	r3, [pc, #104]	; (1b598 <xQueueSemaphoreTake+0x4ac>)
   1b530:	5c9b      	ldrb	r3, [r3, r2]
   1b532:	3350      	adds	r3, #80	; 0x50
   1b534:	b2db      	uxtb	r3, r3
   1b536:	001d      	movs	r5, r3
   1b538:	69fb      	ldr	r3, [r7, #28]
   1b53a:	0018      	movs	r0, r3
   1b53c:	4b15      	ldr	r3, [pc, #84]	; (1b594 <xQueueSemaphoreTake+0x4a8>)
   1b53e:	4798      	blx	r3
   1b540:	0003      	movs	r3, r0
   1b542:	001a      	movs	r2, r3
   1b544:	4b14      	ldr	r3, [pc, #80]	; (1b598 <xQueueSemaphoreTake+0x4ac>)
   1b546:	5c9c      	ldrb	r4, [r3, r2]
   1b548:	69fb      	ldr	r3, [r7, #28]
   1b54a:	0018      	movs	r0, r3
   1b54c:	4b13      	ldr	r3, [pc, #76]	; (1b59c <xQueueSemaphoreTake+0x4b0>)
   1b54e:	4798      	blx	r3
   1b550:	0003      	movs	r3, r0
   1b552:	b2db      	uxtb	r3, r3
   1b554:	001a      	movs	r2, r3
   1b556:	0021      	movs	r1, r4
   1b558:	0028      	movs	r0, r5
   1b55a:	4b11      	ldr	r3, [pc, #68]	; (1b5a0 <xQueueSemaphoreTake+0x4b4>)
   1b55c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b55e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b560:	0018      	movs	r0, r3
   1b562:	46bd      	mov	sp, r7
   1b564:	b00a      	add	sp, #40	; 0x28
   1b566:	bdb0      	pop	{r4, r5, r7, pc}
   1b568:	0001b745 	.word	0x0001b745
   1b56c:	0001c119 	.word	0x0001c119
   1b570:	0001b835 	.word	0x0001b835
   1b574:	00019e49 	.word	0x00019e49
   1b578:	0001b5e7 	.word	0x0001b5e7
   1b57c:	0001ce99 	.word	0x0001ce99
   1b580:	00019e6d 	.word	0x00019e6d
   1b584:	000180dd 	.word	0x000180dd
   1b588:	00017e41 	.word	0x00017e41
   1b58c:	20000130 	.word	0x20000130
   1b590:	00017f01 	.word	0x00017f01
   1b594:	00017e01 	.word	0x00017e01
   1b598:	20000124 	.word	0x20000124
   1b59c:	00017ee1 	.word	0x00017ee1
   1b5a0:	00018839 	.word	0x00018839

0001b5a4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1b5a4:	b580      	push	{r7, lr}
   1b5a6:	b082      	sub	sp, #8
   1b5a8:	af00      	add	r7, sp, #0
   1b5aa:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1b5ac:	687b      	ldr	r3, [r7, #4]
   1b5ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1b5b0:	0018      	movs	r0, r3
   1b5b2:	46bd      	mov	sp, r7
   1b5b4:	b002      	add	sp, #8
   1b5b6:	bd80      	pop	{r7, pc}

0001b5b8 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1b5b8:	b580      	push	{r7, lr}
   1b5ba:	b082      	sub	sp, #8
   1b5bc:	af00      	add	r7, sp, #0
   1b5be:	6078      	str	r0, [r7, #4]
   1b5c0:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1b5c2:	687b      	ldr	r3, [r7, #4]
   1b5c4:	683a      	ldr	r2, [r7, #0]
   1b5c6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1b5c8:	46c0      	nop			; (mov r8, r8)
   1b5ca:	46bd      	mov	sp, r7
   1b5cc:	b002      	add	sp, #8
   1b5ce:	bd80      	pop	{r7, pc}

0001b5d0 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1b5d0:	b580      	push	{r7, lr}
   1b5d2:	b082      	sub	sp, #8
   1b5d4:	af00      	add	r7, sp, #0
   1b5d6:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1b5d8:	687b      	ldr	r3, [r7, #4]
   1b5da:	2250      	movs	r2, #80	; 0x50
   1b5dc:	5c9b      	ldrb	r3, [r3, r2]
	}
   1b5de:	0018      	movs	r0, r3
   1b5e0:	46bd      	mov	sp, r7
   1b5e2:	b002      	add	sp, #8
   1b5e4:	bd80      	pop	{r7, pc}

0001b5e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1b5e6:	b580      	push	{r7, lr}
   1b5e8:	b084      	sub	sp, #16
   1b5ea:	af00      	add	r7, sp, #0
   1b5ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1b5ee:	687b      	ldr	r3, [r7, #4]
   1b5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b5f2:	2b00      	cmp	r3, #0
   1b5f4:	d006      	beq.n	1b604 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1b5f6:	687b      	ldr	r3, [r7, #4]
   1b5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b5fa:	681b      	ldr	r3, [r3, #0]
   1b5fc:	2205      	movs	r2, #5
   1b5fe:	1ad3      	subs	r3, r2, r3
   1b600:	60fb      	str	r3, [r7, #12]
   1b602:	e001      	b.n	1b608 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1b604:	2300      	movs	r3, #0
   1b606:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1b608:	68fb      	ldr	r3, [r7, #12]
	}
   1b60a:	0018      	movs	r0, r3
   1b60c:	46bd      	mov	sp, r7
   1b60e:	b004      	add	sp, #16
   1b610:	bd80      	pop	{r7, pc}
	...

0001b614 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1b614:	b580      	push	{r7, lr}
   1b616:	b086      	sub	sp, #24
   1b618:	af00      	add	r7, sp, #0
   1b61a:	60f8      	str	r0, [r7, #12]
   1b61c:	60b9      	str	r1, [r7, #8]
   1b61e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1b620:	2300      	movs	r3, #0
   1b622:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b624:	68fb      	ldr	r3, [r7, #12]
   1b626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b628:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1b62a:	68fb      	ldr	r3, [r7, #12]
   1b62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b62e:	2b00      	cmp	r3, #0
   1b630:	d10e      	bne.n	1b650 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b632:	68fb      	ldr	r3, [r7, #12]
   1b634:	681b      	ldr	r3, [r3, #0]
   1b636:	2b00      	cmp	r3, #0
   1b638:	d14e      	bne.n	1b6d8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1b63a:	68fb      	ldr	r3, [r7, #12]
   1b63c:	685b      	ldr	r3, [r3, #4]
   1b63e:	0018      	movs	r0, r3
   1b640:	4b2a      	ldr	r3, [pc, #168]	; (1b6ec <prvCopyDataToQueue+0xd8>)
   1b642:	4798      	blx	r3
   1b644:	0003      	movs	r3, r0
   1b646:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1b648:	68fb      	ldr	r3, [r7, #12]
   1b64a:	2200      	movs	r2, #0
   1b64c:	605a      	str	r2, [r3, #4]
   1b64e:	e043      	b.n	1b6d8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1b650:	687b      	ldr	r3, [r7, #4]
   1b652:	2b00      	cmp	r3, #0
   1b654:	d119      	bne.n	1b68a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1b656:	68fb      	ldr	r3, [r7, #12]
   1b658:	6898      	ldr	r0, [r3, #8]
   1b65a:	68fb      	ldr	r3, [r7, #12]
   1b65c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b65e:	68bb      	ldr	r3, [r7, #8]
   1b660:	0019      	movs	r1, r3
   1b662:	4b23      	ldr	r3, [pc, #140]	; (1b6f0 <prvCopyDataToQueue+0xdc>)
   1b664:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1b666:	68fb      	ldr	r3, [r7, #12]
   1b668:	689a      	ldr	r2, [r3, #8]
   1b66a:	68fb      	ldr	r3, [r7, #12]
   1b66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b66e:	18d2      	adds	r2, r2, r3
   1b670:	68fb      	ldr	r3, [r7, #12]
   1b672:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b674:	68fb      	ldr	r3, [r7, #12]
   1b676:	689a      	ldr	r2, [r3, #8]
   1b678:	68fb      	ldr	r3, [r7, #12]
   1b67a:	685b      	ldr	r3, [r3, #4]
   1b67c:	429a      	cmp	r2, r3
   1b67e:	d32b      	bcc.n	1b6d8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1b680:	68fb      	ldr	r3, [r7, #12]
   1b682:	681a      	ldr	r2, [r3, #0]
   1b684:	68fb      	ldr	r3, [r7, #12]
   1b686:	609a      	str	r2, [r3, #8]
   1b688:	e026      	b.n	1b6d8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b68a:	68fb      	ldr	r3, [r7, #12]
   1b68c:	68d8      	ldr	r0, [r3, #12]
   1b68e:	68fb      	ldr	r3, [r7, #12]
   1b690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b692:	68bb      	ldr	r3, [r7, #8]
   1b694:	0019      	movs	r1, r3
   1b696:	4b16      	ldr	r3, [pc, #88]	; (1b6f0 <prvCopyDataToQueue+0xdc>)
   1b698:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1b69a:	68fb      	ldr	r3, [r7, #12]
   1b69c:	68da      	ldr	r2, [r3, #12]
   1b69e:	68fb      	ldr	r3, [r7, #12]
   1b6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b6a2:	425b      	negs	r3, r3
   1b6a4:	18d2      	adds	r2, r2, r3
   1b6a6:	68fb      	ldr	r3, [r7, #12]
   1b6a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b6aa:	68fb      	ldr	r3, [r7, #12]
   1b6ac:	68da      	ldr	r2, [r3, #12]
   1b6ae:	68fb      	ldr	r3, [r7, #12]
   1b6b0:	681b      	ldr	r3, [r3, #0]
   1b6b2:	429a      	cmp	r2, r3
   1b6b4:	d207      	bcs.n	1b6c6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1b6b6:	68fb      	ldr	r3, [r7, #12]
   1b6b8:	685a      	ldr	r2, [r3, #4]
   1b6ba:	68fb      	ldr	r3, [r7, #12]
   1b6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b6be:	425b      	negs	r3, r3
   1b6c0:	18d2      	adds	r2, r2, r3
   1b6c2:	68fb      	ldr	r3, [r7, #12]
   1b6c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1b6c6:	687b      	ldr	r3, [r7, #4]
   1b6c8:	2b02      	cmp	r3, #2
   1b6ca:	d105      	bne.n	1b6d8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1b6cc:	693b      	ldr	r3, [r7, #16]
   1b6ce:	2b00      	cmp	r3, #0
   1b6d0:	d002      	beq.n	1b6d8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1b6d2:	693b      	ldr	r3, [r7, #16]
   1b6d4:	3b01      	subs	r3, #1
   1b6d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b6d8:	693b      	ldr	r3, [r7, #16]
   1b6da:	1c5a      	adds	r2, r3, #1
   1b6dc:	68fb      	ldr	r3, [r7, #12]
   1b6de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1b6e0:	697b      	ldr	r3, [r7, #20]
}
   1b6e2:	0018      	movs	r0, r3
   1b6e4:	46bd      	mov	sp, r7
   1b6e6:	b006      	add	sp, #24
   1b6e8:	bd80      	pop	{r7, pc}
   1b6ea:	46c0      	nop			; (mov r8, r8)
   1b6ec:	0001cd31 	.word	0x0001cd31
   1b6f0:	000346a9 	.word	0x000346a9

0001b6f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1b6f4:	b580      	push	{r7, lr}
   1b6f6:	b082      	sub	sp, #8
   1b6f8:	af00      	add	r7, sp, #0
   1b6fa:	6078      	str	r0, [r7, #4]
   1b6fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1b6fe:	687b      	ldr	r3, [r7, #4]
   1b700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b702:	2b00      	cmp	r3, #0
   1b704:	d018      	beq.n	1b738 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1b706:	687b      	ldr	r3, [r7, #4]
   1b708:	68da      	ldr	r2, [r3, #12]
   1b70a:	687b      	ldr	r3, [r7, #4]
   1b70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b70e:	18d2      	adds	r2, r2, r3
   1b710:	687b      	ldr	r3, [r7, #4]
   1b712:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1b714:	687b      	ldr	r3, [r7, #4]
   1b716:	68da      	ldr	r2, [r3, #12]
   1b718:	687b      	ldr	r3, [r7, #4]
   1b71a:	685b      	ldr	r3, [r3, #4]
   1b71c:	429a      	cmp	r2, r3
   1b71e:	d303      	bcc.n	1b728 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1b720:	687b      	ldr	r3, [r7, #4]
   1b722:	681a      	ldr	r2, [r3, #0]
   1b724:	687b      	ldr	r3, [r7, #4]
   1b726:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1b728:	687b      	ldr	r3, [r7, #4]
   1b72a:	68d9      	ldr	r1, [r3, #12]
   1b72c:	687b      	ldr	r3, [r7, #4]
   1b72e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b730:	683b      	ldr	r3, [r7, #0]
   1b732:	0018      	movs	r0, r3
   1b734:	4b02      	ldr	r3, [pc, #8]	; (1b740 <prvCopyDataFromQueue+0x4c>)
   1b736:	4798      	blx	r3
	}
}
   1b738:	46c0      	nop			; (mov r8, r8)
   1b73a:	46bd      	mov	sp, r7
   1b73c:	b002      	add	sp, #8
   1b73e:	bd80      	pop	{r7, pc}
   1b740:	000346a9 	.word	0x000346a9

0001b744 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1b744:	b580      	push	{r7, lr}
   1b746:	b084      	sub	sp, #16
   1b748:	af00      	add	r7, sp, #0
   1b74a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1b74c:	4b34      	ldr	r3, [pc, #208]	; (1b820 <prvUnlockQueue+0xdc>)
   1b74e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1b750:	230f      	movs	r3, #15
   1b752:	18fb      	adds	r3, r7, r3
   1b754:	687a      	ldr	r2, [r7, #4]
   1b756:	2145      	movs	r1, #69	; 0x45
   1b758:	5c52      	ldrb	r2, [r2, r1]
   1b75a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b75c:	e022      	b.n	1b7a4 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1b75e:	687b      	ldr	r3, [r7, #4]
   1b760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b762:	2b00      	cmp	r3, #0
   1b764:	d009      	beq.n	1b77a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1b766:	687b      	ldr	r3, [r7, #4]
   1b768:	2100      	movs	r1, #0
   1b76a:	0018      	movs	r0, r3
   1b76c:	4b2d      	ldr	r3, [pc, #180]	; (1b824 <prvUnlockQueue+0xe0>)
   1b76e:	4798      	blx	r3
   1b770:	1e03      	subs	r3, r0, #0
   1b772:	d00f      	beq.n	1b794 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1b774:	4b2c      	ldr	r3, [pc, #176]	; (1b828 <prvUnlockQueue+0xe4>)
   1b776:	4798      	blx	r3
   1b778:	e00c      	b.n	1b794 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b77a:	687b      	ldr	r3, [r7, #4]
   1b77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b77e:	2b00      	cmp	r3, #0
   1b780:	d017      	beq.n	1b7b2 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b782:	687b      	ldr	r3, [r7, #4]
   1b784:	3324      	adds	r3, #36	; 0x24
   1b786:	0018      	movs	r0, r3
   1b788:	4b28      	ldr	r3, [pc, #160]	; (1b82c <prvUnlockQueue+0xe8>)
   1b78a:	4798      	blx	r3
   1b78c:	1e03      	subs	r3, r0, #0
   1b78e:	d001      	beq.n	1b794 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1b790:	4b25      	ldr	r3, [pc, #148]	; (1b828 <prvUnlockQueue+0xe4>)
   1b792:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1b794:	230f      	movs	r3, #15
   1b796:	18fb      	adds	r3, r7, r3
   1b798:	781b      	ldrb	r3, [r3, #0]
   1b79a:	3b01      	subs	r3, #1
   1b79c:	b2da      	uxtb	r2, r3
   1b79e:	230f      	movs	r3, #15
   1b7a0:	18fb      	adds	r3, r7, r3
   1b7a2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b7a4:	230f      	movs	r3, #15
   1b7a6:	18fb      	adds	r3, r7, r3
   1b7a8:	781b      	ldrb	r3, [r3, #0]
   1b7aa:	b25b      	sxtb	r3, r3
   1b7ac:	2b00      	cmp	r3, #0
   1b7ae:	dcd6      	bgt.n	1b75e <prvUnlockQueue+0x1a>
   1b7b0:	e000      	b.n	1b7b4 <prvUnlockQueue+0x70>
						break;
   1b7b2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1b7b4:	687b      	ldr	r3, [r7, #4]
   1b7b6:	2245      	movs	r2, #69	; 0x45
   1b7b8:	21ff      	movs	r1, #255	; 0xff
   1b7ba:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1b7bc:	4b1c      	ldr	r3, [pc, #112]	; (1b830 <prvUnlockQueue+0xec>)
   1b7be:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1b7c0:	4b17      	ldr	r3, [pc, #92]	; (1b820 <prvUnlockQueue+0xdc>)
   1b7c2:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1b7c4:	230e      	movs	r3, #14
   1b7c6:	18fb      	adds	r3, r7, r3
   1b7c8:	687a      	ldr	r2, [r7, #4]
   1b7ca:	2144      	movs	r1, #68	; 0x44
   1b7cc:	5c52      	ldrb	r2, [r2, r1]
   1b7ce:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1b7d0:	e014      	b.n	1b7fc <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b7d2:	687b      	ldr	r3, [r7, #4]
   1b7d4:	691b      	ldr	r3, [r3, #16]
   1b7d6:	2b00      	cmp	r3, #0
   1b7d8:	d017      	beq.n	1b80a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b7da:	687b      	ldr	r3, [r7, #4]
   1b7dc:	3310      	adds	r3, #16
   1b7de:	0018      	movs	r0, r3
   1b7e0:	4b12      	ldr	r3, [pc, #72]	; (1b82c <prvUnlockQueue+0xe8>)
   1b7e2:	4798      	blx	r3
   1b7e4:	1e03      	subs	r3, r0, #0
   1b7e6:	d001      	beq.n	1b7ec <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1b7e8:	4b0f      	ldr	r3, [pc, #60]	; (1b828 <prvUnlockQueue+0xe4>)
   1b7ea:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1b7ec:	230e      	movs	r3, #14
   1b7ee:	18fb      	adds	r3, r7, r3
   1b7f0:	781b      	ldrb	r3, [r3, #0]
   1b7f2:	3b01      	subs	r3, #1
   1b7f4:	b2da      	uxtb	r2, r3
   1b7f6:	230e      	movs	r3, #14
   1b7f8:	18fb      	adds	r3, r7, r3
   1b7fa:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1b7fc:	230e      	movs	r3, #14
   1b7fe:	18fb      	adds	r3, r7, r3
   1b800:	781b      	ldrb	r3, [r3, #0]
   1b802:	b25b      	sxtb	r3, r3
   1b804:	2b00      	cmp	r3, #0
   1b806:	dce4      	bgt.n	1b7d2 <prvUnlockQueue+0x8e>
   1b808:	e000      	b.n	1b80c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1b80a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1b80c:	687b      	ldr	r3, [r7, #4]
   1b80e:	2244      	movs	r2, #68	; 0x44
   1b810:	21ff      	movs	r1, #255	; 0xff
   1b812:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1b814:	4b06      	ldr	r3, [pc, #24]	; (1b830 <prvUnlockQueue+0xec>)
   1b816:	4798      	blx	r3
}
   1b818:	46c0      	nop			; (mov r8, r8)
   1b81a:	46bd      	mov	sp, r7
   1b81c:	b004      	add	sp, #16
   1b81e:	bd80      	pop	{r7, pc}
   1b820:	00019e49 	.word	0x00019e49
   1b824:	0001b919 	.word	0x0001b919
   1b828:	0001c8ed 	.word	0x0001c8ed
   1b82c:	0001c6d9 	.word	0x0001c6d9
   1b830:	00019e6d 	.word	0x00019e6d

0001b834 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1b834:	b580      	push	{r7, lr}
   1b836:	b084      	sub	sp, #16
   1b838:	af00      	add	r7, sp, #0
   1b83a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1b83c:	4b08      	ldr	r3, [pc, #32]	; (1b860 <prvIsQueueEmpty+0x2c>)
   1b83e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1b840:	687b      	ldr	r3, [r7, #4]
   1b842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b844:	2b00      	cmp	r3, #0
   1b846:	d102      	bne.n	1b84e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1b848:	2301      	movs	r3, #1
   1b84a:	60fb      	str	r3, [r7, #12]
   1b84c:	e001      	b.n	1b852 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1b84e:	2300      	movs	r3, #0
   1b850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1b852:	4b04      	ldr	r3, [pc, #16]	; (1b864 <prvIsQueueEmpty+0x30>)
   1b854:	4798      	blx	r3

	return xReturn;
   1b856:	68fb      	ldr	r3, [r7, #12]
}
   1b858:	0018      	movs	r0, r3
   1b85a:	46bd      	mov	sp, r7
   1b85c:	b004      	add	sp, #16
   1b85e:	bd80      	pop	{r7, pc}
   1b860:	00019e49 	.word	0x00019e49
   1b864:	00019e6d 	.word	0x00019e6d

0001b868 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1b868:	b580      	push	{r7, lr}
   1b86a:	b084      	sub	sp, #16
   1b86c:	af00      	add	r7, sp, #0
   1b86e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1b870:	4b09      	ldr	r3, [pc, #36]	; (1b898 <prvIsQueueFull+0x30>)
   1b872:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1b874:	687b      	ldr	r3, [r7, #4]
   1b876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b878:	687b      	ldr	r3, [r7, #4]
   1b87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b87c:	429a      	cmp	r2, r3
   1b87e:	d102      	bne.n	1b886 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1b880:	2301      	movs	r3, #1
   1b882:	60fb      	str	r3, [r7, #12]
   1b884:	e001      	b.n	1b88a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1b886:	2300      	movs	r3, #0
   1b888:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1b88a:	4b04      	ldr	r3, [pc, #16]	; (1b89c <prvIsQueueFull+0x34>)
   1b88c:	4798      	blx	r3

	return xReturn;
   1b88e:	68fb      	ldr	r3, [r7, #12]
}
   1b890:	0018      	movs	r0, r3
   1b892:	46bd      	mov	sp, r7
   1b894:	b004      	add	sp, #16
   1b896:	bd80      	pop	{r7, pc}
   1b898:	00019e49 	.word	0x00019e49
   1b89c:	00019e6d 	.word	0x00019e6d

0001b8a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1b8a0:	b580      	push	{r7, lr}
   1b8a2:	b086      	sub	sp, #24
   1b8a4:	af00      	add	r7, sp, #0
   1b8a6:	60f8      	str	r0, [r7, #12]
   1b8a8:	60b9      	str	r1, [r7, #8]
   1b8aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b8ac:	68fb      	ldr	r3, [r7, #12]
   1b8ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1b8b0:	4b15      	ldr	r3, [pc, #84]	; (1b908 <vQueueWaitForMessageRestricted+0x68>)
   1b8b2:	4798      	blx	r3
   1b8b4:	697b      	ldr	r3, [r7, #20]
   1b8b6:	2244      	movs	r2, #68	; 0x44
   1b8b8:	5c9b      	ldrb	r3, [r3, r2]
   1b8ba:	b25b      	sxtb	r3, r3
   1b8bc:	3301      	adds	r3, #1
   1b8be:	d103      	bne.n	1b8c8 <vQueueWaitForMessageRestricted+0x28>
   1b8c0:	697b      	ldr	r3, [r7, #20]
   1b8c2:	2244      	movs	r2, #68	; 0x44
   1b8c4:	2100      	movs	r1, #0
   1b8c6:	5499      	strb	r1, [r3, r2]
   1b8c8:	697b      	ldr	r3, [r7, #20]
   1b8ca:	2245      	movs	r2, #69	; 0x45
   1b8cc:	5c9b      	ldrb	r3, [r3, r2]
   1b8ce:	b25b      	sxtb	r3, r3
   1b8d0:	3301      	adds	r3, #1
   1b8d2:	d103      	bne.n	1b8dc <vQueueWaitForMessageRestricted+0x3c>
   1b8d4:	697b      	ldr	r3, [r7, #20]
   1b8d6:	2245      	movs	r2, #69	; 0x45
   1b8d8:	2100      	movs	r1, #0
   1b8da:	5499      	strb	r1, [r3, r2]
   1b8dc:	4b0b      	ldr	r3, [pc, #44]	; (1b90c <vQueueWaitForMessageRestricted+0x6c>)
   1b8de:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1b8e0:	697b      	ldr	r3, [r7, #20]
   1b8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b8e4:	2b00      	cmp	r3, #0
   1b8e6:	d106      	bne.n	1b8f6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1b8e8:	697b      	ldr	r3, [r7, #20]
   1b8ea:	3324      	adds	r3, #36	; 0x24
   1b8ec:	687a      	ldr	r2, [r7, #4]
   1b8ee:	68b9      	ldr	r1, [r7, #8]
   1b8f0:	0018      	movs	r0, r3
   1b8f2:	4b07      	ldr	r3, [pc, #28]	; (1b910 <vQueueWaitForMessageRestricted+0x70>)
   1b8f4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1b8f6:	697b      	ldr	r3, [r7, #20]
   1b8f8:	0018      	movs	r0, r3
   1b8fa:	4b06      	ldr	r3, [pc, #24]	; (1b914 <vQueueWaitForMessageRestricted+0x74>)
   1b8fc:	4798      	blx	r3
	}
   1b8fe:	46c0      	nop			; (mov r8, r8)
   1b900:	46bd      	mov	sp, r7
   1b902:	b006      	add	sp, #24
   1b904:	bd80      	pop	{r7, pc}
   1b906:	46c0      	nop			; (mov r8, r8)
   1b908:	00019e49 	.word	0x00019e49
   1b90c:	00019e6d 	.word	0x00019e6d
   1b910:	0001c5f9 	.word	0x0001c5f9
   1b914:	0001b745 	.word	0x0001b745

0001b918 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1b918:	b5b0      	push	{r4, r5, r7, lr}
   1b91a:	b086      	sub	sp, #24
   1b91c:	af00      	add	r7, sp, #0
   1b91e:	6078      	str	r0, [r7, #4]
   1b920:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1b922:	687b      	ldr	r3, [r7, #4]
   1b924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b926:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1b928:	2300      	movs	r3, #0
   1b92a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1b92c:	693b      	ldr	r3, [r7, #16]
   1b92e:	2b00      	cmp	r3, #0
   1b930:	d101      	bne.n	1b936 <prvNotifyQueueSetContainer+0x1e>
   1b932:	b672      	cpsid	i
   1b934:	e7fe      	b.n	1b934 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1b936:	693b      	ldr	r3, [r7, #16]
   1b938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b93a:	693b      	ldr	r3, [r7, #16]
   1b93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b93e:	429a      	cmp	r2, r3
   1b940:	d301      	bcc.n	1b946 <prvNotifyQueueSetContainer+0x2e>
   1b942:	b672      	cpsid	i
   1b944:	e7fe      	b.n	1b944 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1b946:	693b      	ldr	r3, [r7, #16]
   1b948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b94a:	693b      	ldr	r3, [r7, #16]
   1b94c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b94e:	429a      	cmp	r2, r3
   1b950:	d300      	bcc.n	1b954 <prvNotifyQueueSetContainer+0x3c>
   1b952:	e08b      	b.n	1ba6c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1b954:	230f      	movs	r3, #15
   1b956:	18fb      	adds	r3, r7, r3
   1b958:	693a      	ldr	r2, [r7, #16]
   1b95a:	2145      	movs	r1, #69	; 0x45
   1b95c:	5c52      	ldrb	r2, [r2, r1]
   1b95e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1b960:	4b45      	ldr	r3, [pc, #276]	; (1ba78 <prvNotifyQueueSetContainer+0x160>)
   1b962:	4798      	blx	r3
   1b964:	0003      	movs	r3, r0
   1b966:	0018      	movs	r0, r3
   1b968:	4b44      	ldr	r3, [pc, #272]	; (1ba7c <prvNotifyQueueSetContainer+0x164>)
   1b96a:	4798      	blx	r3
   1b96c:	0003      	movs	r3, r0
   1b96e:	001a      	movs	r2, r3
   1b970:	4b43      	ldr	r3, [pc, #268]	; (1ba80 <prvNotifyQueueSetContainer+0x168>)
   1b972:	881b      	ldrh	r3, [r3, #0]
   1b974:	4013      	ands	r3, r2
   1b976:	b29b      	uxth	r3, r3
   1b978:	2b00      	cmp	r3, #0
   1b97a:	d02e      	beq.n	1b9da <prvNotifyQueueSetContainer+0xc2>
   1b97c:	693b      	ldr	r3, [r7, #16]
   1b97e:	0018      	movs	r0, r3
   1b980:	4b40      	ldr	r3, [pc, #256]	; (1ba84 <prvNotifyQueueSetContainer+0x16c>)
   1b982:	4798      	blx	r3
   1b984:	0003      	movs	r3, r0
   1b986:	001a      	movs	r2, r3
   1b988:	4b3d      	ldr	r3, [pc, #244]	; (1ba80 <prvNotifyQueueSetContainer+0x168>)
   1b98a:	881b      	ldrh	r3, [r3, #0]
   1b98c:	4013      	ands	r3, r2
   1b98e:	b29b      	uxth	r3, r3
   1b990:	2b00      	cmp	r3, #0
   1b992:	d022      	beq.n	1b9da <prvNotifyQueueSetContainer+0xc2>
   1b994:	683b      	ldr	r3, [r7, #0]
   1b996:	2b00      	cmp	r3, #0
   1b998:	d10b      	bne.n	1b9b2 <prvNotifyQueueSetContainer+0x9a>
   1b99a:	693b      	ldr	r3, [r7, #16]
   1b99c:	0018      	movs	r0, r3
   1b99e:	4b3a      	ldr	r3, [pc, #232]	; (1ba88 <prvNotifyQueueSetContainer+0x170>)
   1b9a0:	4798      	blx	r3
   1b9a2:	0003      	movs	r3, r0
   1b9a4:	001a      	movs	r2, r3
   1b9a6:	4b39      	ldr	r3, [pc, #228]	; (1ba8c <prvNotifyQueueSetContainer+0x174>)
   1b9a8:	5c9b      	ldrb	r3, [r3, r2]
   1b9aa:	3320      	adds	r3, #32
   1b9ac:	b2db      	uxtb	r3, r3
   1b9ae:	001d      	movs	r5, r3
   1b9b0:	e000      	b.n	1b9b4 <prvNotifyQueueSetContainer+0x9c>
   1b9b2:	2525      	movs	r5, #37	; 0x25
   1b9b4:	693b      	ldr	r3, [r7, #16]
   1b9b6:	0018      	movs	r0, r3
   1b9b8:	4b33      	ldr	r3, [pc, #204]	; (1ba88 <prvNotifyQueueSetContainer+0x170>)
   1b9ba:	4798      	blx	r3
   1b9bc:	0003      	movs	r3, r0
   1b9be:	001a      	movs	r2, r3
   1b9c0:	4b32      	ldr	r3, [pc, #200]	; (1ba8c <prvNotifyQueueSetContainer+0x174>)
   1b9c2:	5c9c      	ldrb	r4, [r3, r2]
   1b9c4:	693b      	ldr	r3, [r7, #16]
   1b9c6:	0018      	movs	r0, r3
   1b9c8:	4b31      	ldr	r3, [pc, #196]	; (1ba90 <prvNotifyQueueSetContainer+0x178>)
   1b9ca:	4798      	blx	r3
   1b9cc:	0003      	movs	r3, r0
   1b9ce:	b2db      	uxtb	r3, r3
   1b9d0:	001a      	movs	r2, r3
   1b9d2:	0021      	movs	r1, r4
   1b9d4:	0028      	movs	r0, r5
   1b9d6:	4b2f      	ldr	r3, [pc, #188]	; (1ba94 <prvNotifyQueueSetContainer+0x17c>)
   1b9d8:	4798      	blx	r3
   1b9da:	693b      	ldr	r3, [r7, #16]
   1b9dc:	0018      	movs	r0, r3
   1b9de:	4b2a      	ldr	r3, [pc, #168]	; (1ba88 <prvNotifyQueueSetContainer+0x170>)
   1b9e0:	4798      	blx	r3
   1b9e2:	0003      	movs	r3, r0
   1b9e4:	001a      	movs	r2, r3
   1b9e6:	4b29      	ldr	r3, [pc, #164]	; (1ba8c <prvNotifyQueueSetContainer+0x174>)
   1b9e8:	5c9c      	ldrb	r4, [r3, r2]
   1b9ea:	693b      	ldr	r3, [r7, #16]
   1b9ec:	0018      	movs	r0, r3
   1b9ee:	4b28      	ldr	r3, [pc, #160]	; (1ba90 <prvNotifyQueueSetContainer+0x178>)
   1b9f0:	4798      	blx	r3
   1b9f2:	0003      	movs	r3, r0
   1b9f4:	b2dd      	uxtb	r5, r3
   1b9f6:	693b      	ldr	r3, [r7, #16]
   1b9f8:	0018      	movs	r0, r3
   1b9fa:	4b23      	ldr	r3, [pc, #140]	; (1ba88 <prvNotifyQueueSetContainer+0x170>)
   1b9fc:	4798      	blx	r3
   1b9fe:	0003      	movs	r3, r0
   1ba00:	001a      	movs	r2, r3
   1ba02:	4b22      	ldr	r3, [pc, #136]	; (1ba8c <prvNotifyQueueSetContainer+0x174>)
   1ba04:	5c9b      	ldrb	r3, [r3, r2]
   1ba06:	2b02      	cmp	r3, #2
   1ba08:	d005      	beq.n	1ba16 <prvNotifyQueueSetContainer+0xfe>
   1ba0a:	693b      	ldr	r3, [r7, #16]
   1ba0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ba0e:	b2db      	uxtb	r3, r3
   1ba10:	3301      	adds	r3, #1
   1ba12:	b2db      	uxtb	r3, r3
   1ba14:	e000      	b.n	1ba18 <prvNotifyQueueSetContainer+0x100>
   1ba16:	2300      	movs	r3, #0
   1ba18:	001a      	movs	r2, r3
   1ba1a:	0029      	movs	r1, r5
   1ba1c:	0020      	movs	r0, r4
   1ba1e:	4b1e      	ldr	r3, [pc, #120]	; (1ba98 <prvNotifyQueueSetContainer+0x180>)
   1ba20:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1ba22:	683a      	ldr	r2, [r7, #0]
   1ba24:	1d39      	adds	r1, r7, #4
   1ba26:	693b      	ldr	r3, [r7, #16]
   1ba28:	0018      	movs	r0, r3
   1ba2a:	4b1c      	ldr	r3, [pc, #112]	; (1ba9c <prvNotifyQueueSetContainer+0x184>)
   1ba2c:	4798      	blx	r3
   1ba2e:	0003      	movs	r3, r0
   1ba30:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1ba32:	230f      	movs	r3, #15
   1ba34:	18fb      	adds	r3, r7, r3
   1ba36:	781b      	ldrb	r3, [r3, #0]
   1ba38:	b25b      	sxtb	r3, r3
   1ba3a:	3301      	adds	r3, #1
   1ba3c:	d10d      	bne.n	1ba5a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1ba3e:	693b      	ldr	r3, [r7, #16]
   1ba40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ba42:	2b00      	cmp	r3, #0
   1ba44:	d012      	beq.n	1ba6c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1ba46:	693b      	ldr	r3, [r7, #16]
   1ba48:	3324      	adds	r3, #36	; 0x24
   1ba4a:	0018      	movs	r0, r3
   1ba4c:	4b14      	ldr	r3, [pc, #80]	; (1baa0 <prvNotifyQueueSetContainer+0x188>)
   1ba4e:	4798      	blx	r3
   1ba50:	1e03      	subs	r3, r0, #0
   1ba52:	d00b      	beq.n	1ba6c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1ba54:	2301      	movs	r3, #1
   1ba56:	617b      	str	r3, [r7, #20]
   1ba58:	e008      	b.n	1ba6c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1ba5a:	230f      	movs	r3, #15
   1ba5c:	18fb      	adds	r3, r7, r3
   1ba5e:	781b      	ldrb	r3, [r3, #0]
   1ba60:	3301      	adds	r3, #1
   1ba62:	b2db      	uxtb	r3, r3
   1ba64:	b259      	sxtb	r1, r3
   1ba66:	693b      	ldr	r3, [r7, #16]
   1ba68:	2245      	movs	r2, #69	; 0x45
   1ba6a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1ba6c:	697b      	ldr	r3, [r7, #20]
	}
   1ba6e:	0018      	movs	r0, r3
   1ba70:	46bd      	mov	sp, r7
   1ba72:	b006      	add	sp, #24
   1ba74:	bdb0      	pop	{r4, r5, r7, pc}
   1ba76:	46c0      	nop			; (mov r8, r8)
   1ba78:	000180dd 	.word	0x000180dd
   1ba7c:	00017e41 	.word	0x00017e41
   1ba80:	20000130 	.word	0x20000130
   1ba84:	00017f01 	.word	0x00017f01
   1ba88:	00017e01 	.word	0x00017e01
   1ba8c:	20000124 	.word	0x20000124
   1ba90:	00017ee1 	.word	0x00017ee1
   1ba94:	00018839 	.word	0x00018839
   1ba98:	00018e95 	.word	0x00018e95
   1ba9c:	0001b615 	.word	0x0001b615
   1baa0:	0001c6d9 	.word	0x0001c6d9

0001baa4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1baa4:	b590      	push	{r4, r7, lr}
   1baa6:	b08d      	sub	sp, #52	; 0x34
   1baa8:	af04      	add	r7, sp, #16
   1baaa:	60f8      	str	r0, [r7, #12]
   1baac:	60b9      	str	r1, [r7, #8]
   1baae:	603b      	str	r3, [r7, #0]
   1bab0:	1dbb      	adds	r3, r7, #6
   1bab2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bab4:	1dbb      	adds	r3, r7, #6
   1bab6:	881b      	ldrh	r3, [r3, #0]
   1bab8:	009b      	lsls	r3, r3, #2
   1baba:	0018      	movs	r0, r3
   1babc:	4b1d      	ldr	r3, [pc, #116]	; (1bb34 <xTaskCreate+0x90>)
   1babe:	4798      	blx	r3
   1bac0:	0003      	movs	r3, r0
   1bac2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1bac4:	697b      	ldr	r3, [r7, #20]
   1bac6:	2b00      	cmp	r3, #0
   1bac8:	d010      	beq.n	1baec <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1baca:	2054      	movs	r0, #84	; 0x54
   1bacc:	4b19      	ldr	r3, [pc, #100]	; (1bb34 <xTaskCreate+0x90>)
   1bace:	4798      	blx	r3
   1bad0:	0003      	movs	r3, r0
   1bad2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1bad4:	69fb      	ldr	r3, [r7, #28]
   1bad6:	2b00      	cmp	r3, #0
   1bad8:	d003      	beq.n	1bae2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1bada:	69fb      	ldr	r3, [r7, #28]
   1badc:	697a      	ldr	r2, [r7, #20]
   1bade:	631a      	str	r2, [r3, #48]	; 0x30
   1bae0:	e006      	b.n	1baf0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1bae2:	697b      	ldr	r3, [r7, #20]
   1bae4:	0018      	movs	r0, r3
   1bae6:	4b14      	ldr	r3, [pc, #80]	; (1bb38 <xTaskCreate+0x94>)
   1bae8:	4798      	blx	r3
   1baea:	e001      	b.n	1baf0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1baec:	2300      	movs	r3, #0
   1baee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1baf0:	69fb      	ldr	r3, [r7, #28]
   1baf2:	2b00      	cmp	r3, #0
   1baf4:	d016      	beq.n	1bb24 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1baf6:	1dbb      	adds	r3, r7, #6
   1baf8:	881a      	ldrh	r2, [r3, #0]
   1bafa:	683c      	ldr	r4, [r7, #0]
   1bafc:	68b9      	ldr	r1, [r7, #8]
   1bafe:	68f8      	ldr	r0, [r7, #12]
   1bb00:	2300      	movs	r3, #0
   1bb02:	9303      	str	r3, [sp, #12]
   1bb04:	69fb      	ldr	r3, [r7, #28]
   1bb06:	9302      	str	r3, [sp, #8]
   1bb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bb0a:	9301      	str	r3, [sp, #4]
   1bb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bb0e:	9300      	str	r3, [sp, #0]
   1bb10:	0023      	movs	r3, r4
   1bb12:	4c0a      	ldr	r4, [pc, #40]	; (1bb3c <xTaskCreate+0x98>)
   1bb14:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1bb16:	69fb      	ldr	r3, [r7, #28]
   1bb18:	0018      	movs	r0, r3
   1bb1a:	4b09      	ldr	r3, [pc, #36]	; (1bb40 <xTaskCreate+0x9c>)
   1bb1c:	4798      	blx	r3
			xReturn = pdPASS;
   1bb1e:	2301      	movs	r3, #1
   1bb20:	61bb      	str	r3, [r7, #24]
   1bb22:	e002      	b.n	1bb2a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1bb24:	2301      	movs	r3, #1
   1bb26:	425b      	negs	r3, r3
   1bb28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1bb2a:	69bb      	ldr	r3, [r7, #24]
	}
   1bb2c:	0018      	movs	r0, r3
   1bb2e:	46bd      	mov	sp, r7
   1bb30:	b009      	add	sp, #36	; 0x24
   1bb32:	bd90      	pop	{r4, r7, pc}
   1bb34:	00019f81 	.word	0x00019f81
   1bb38:	0001a045 	.word	0x0001a045
   1bb3c:	0001bb45 	.word	0x0001bb45
   1bb40:	0001bc55 	.word	0x0001bc55

0001bb44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1bb44:	b580      	push	{r7, lr}
   1bb46:	b086      	sub	sp, #24
   1bb48:	af00      	add	r7, sp, #0
   1bb4a:	60f8      	str	r0, [r7, #12]
   1bb4c:	60b9      	str	r1, [r7, #8]
   1bb4e:	607a      	str	r2, [r7, #4]
   1bb50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1bb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb54:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1bb56:	687b      	ldr	r3, [r7, #4]
   1bb58:	009b      	lsls	r3, r3, #2
   1bb5a:	001a      	movs	r2, r3
   1bb5c:	21a5      	movs	r1, #165	; 0xa5
   1bb5e:	4b39      	ldr	r3, [pc, #228]	; (1bc44 <prvInitialiseNewTask+0x100>)
   1bb60:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1bb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1bb66:	687b      	ldr	r3, [r7, #4]
   1bb68:	4937      	ldr	r1, [pc, #220]	; (1bc48 <prvInitialiseNewTask+0x104>)
   1bb6a:	468c      	mov	ip, r1
   1bb6c:	4463      	add	r3, ip
   1bb6e:	009b      	lsls	r3, r3, #2
   1bb70:	18d3      	adds	r3, r2, r3
   1bb72:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1bb74:	693b      	ldr	r3, [r7, #16]
   1bb76:	2207      	movs	r2, #7
   1bb78:	4393      	bics	r3, r2
   1bb7a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1bb7c:	693b      	ldr	r3, [r7, #16]
   1bb7e:	2207      	movs	r2, #7
   1bb80:	4013      	ands	r3, r2
   1bb82:	d001      	beq.n	1bb88 <prvInitialiseNewTask+0x44>
   1bb84:	b672      	cpsid	i
   1bb86:	e7fe      	b.n	1bb86 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1bb88:	2300      	movs	r3, #0
   1bb8a:	617b      	str	r3, [r7, #20]
   1bb8c:	e013      	b.n	1bbb6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1bb8e:	68ba      	ldr	r2, [r7, #8]
   1bb90:	697b      	ldr	r3, [r7, #20]
   1bb92:	18d3      	adds	r3, r2, r3
   1bb94:	7818      	ldrb	r0, [r3, #0]
   1bb96:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bb98:	2134      	movs	r1, #52	; 0x34
   1bb9a:	697b      	ldr	r3, [r7, #20]
   1bb9c:	18d3      	adds	r3, r2, r3
   1bb9e:	185b      	adds	r3, r3, r1
   1bba0:	1c02      	adds	r2, r0, #0
   1bba2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1bba4:	68ba      	ldr	r2, [r7, #8]
   1bba6:	697b      	ldr	r3, [r7, #20]
   1bba8:	18d3      	adds	r3, r2, r3
   1bbaa:	781b      	ldrb	r3, [r3, #0]
   1bbac:	2b00      	cmp	r3, #0
   1bbae:	d006      	beq.n	1bbbe <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1bbb0:	697b      	ldr	r3, [r7, #20]
   1bbb2:	3301      	adds	r3, #1
   1bbb4:	617b      	str	r3, [r7, #20]
   1bbb6:	697b      	ldr	r3, [r7, #20]
   1bbb8:	2b07      	cmp	r3, #7
   1bbba:	d9e8      	bls.n	1bb8e <prvInitialiseNewTask+0x4a>
   1bbbc:	e000      	b.n	1bbc0 <prvInitialiseNewTask+0x7c>
		{
			break;
   1bbbe:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1bbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bbc2:	223b      	movs	r2, #59	; 0x3b
   1bbc4:	2100      	movs	r1, #0
   1bbc6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1bbc8:	6a3b      	ldr	r3, [r7, #32]
   1bbca:	2b04      	cmp	r3, #4
   1bbcc:	d901      	bls.n	1bbd2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1bbce:	2304      	movs	r3, #4
   1bbd0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1bbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bbd4:	6a3a      	ldr	r2, [r7, #32]
   1bbd6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1bbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bbda:	6a3a      	ldr	r2, [r7, #32]
   1bbdc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1bbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bbe0:	2200      	movs	r2, #0
   1bbe2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1bbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bbe6:	3304      	adds	r3, #4
   1bbe8:	0018      	movs	r0, r3
   1bbea:	4b18      	ldr	r3, [pc, #96]	; (1bc4c <prvInitialiseNewTask+0x108>)
   1bbec:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1bbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bbf0:	3318      	adds	r3, #24
   1bbf2:	0018      	movs	r0, r3
   1bbf4:	4b15      	ldr	r3, [pc, #84]	; (1bc4c <prvInitialiseNewTask+0x108>)
   1bbf6:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1bbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bbfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bbfc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bbfe:	6a3b      	ldr	r3, [r7, #32]
   1bc00:	2205      	movs	r2, #5
   1bc02:	1ad2      	subs	r2, r2, r3
   1bc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bc0c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1bc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc10:	2200      	movs	r2, #0
   1bc12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc16:	2250      	movs	r2, #80	; 0x50
   1bc18:	2100      	movs	r1, #0
   1bc1a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1bc1c:	683a      	ldr	r2, [r7, #0]
   1bc1e:	68f9      	ldr	r1, [r7, #12]
   1bc20:	693b      	ldr	r3, [r7, #16]
   1bc22:	0018      	movs	r0, r3
   1bc24:	4b0a      	ldr	r3, [pc, #40]	; (1bc50 <prvInitialiseNewTask+0x10c>)
   1bc26:	4798      	blx	r3
   1bc28:	0002      	movs	r2, r0
   1bc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc2c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1bc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bc30:	2b00      	cmp	r3, #0
   1bc32:	d002      	beq.n	1bc3a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1bc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bc36:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bc38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1bc3a:	46c0      	nop			; (mov r8, r8)
   1bc3c:	46bd      	mov	sp, r7
   1bc3e:	b006      	add	sp, #24
   1bc40:	bd80      	pop	{r7, pc}
   1bc42:	46c0      	nop			; (mov r8, r8)
   1bc44:	000346df 	.word	0x000346df
   1bc48:	3fffffff 	.word	0x3fffffff
   1bc4c:	00019bf5 	.word	0x00019bf5
   1bc50:	00019d0d 	.word	0x00019d0d

0001bc54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1bc54:	b580      	push	{r7, lr}
   1bc56:	b082      	sub	sp, #8
   1bc58:	af00      	add	r7, sp, #0
   1bc5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1bc5c:	4b60      	ldr	r3, [pc, #384]	; (1bde0 <prvAddNewTaskToReadyList+0x18c>)
   1bc5e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1bc60:	4b60      	ldr	r3, [pc, #384]	; (1bde4 <prvAddNewTaskToReadyList+0x190>)
   1bc62:	681b      	ldr	r3, [r3, #0]
   1bc64:	1c5a      	adds	r2, r3, #1
   1bc66:	4b5f      	ldr	r3, [pc, #380]	; (1bde4 <prvAddNewTaskToReadyList+0x190>)
   1bc68:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1bc6a:	4b5f      	ldr	r3, [pc, #380]	; (1bde8 <prvAddNewTaskToReadyList+0x194>)
   1bc6c:	681b      	ldr	r3, [r3, #0]
   1bc6e:	2b00      	cmp	r3, #0
   1bc70:	d109      	bne.n	1bc86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1bc72:	4b5d      	ldr	r3, [pc, #372]	; (1bde8 <prvAddNewTaskToReadyList+0x194>)
   1bc74:	687a      	ldr	r2, [r7, #4]
   1bc76:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1bc78:	4b5a      	ldr	r3, [pc, #360]	; (1bde4 <prvAddNewTaskToReadyList+0x190>)
   1bc7a:	681b      	ldr	r3, [r3, #0]
   1bc7c:	2b01      	cmp	r3, #1
   1bc7e:	d110      	bne.n	1bca2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1bc80:	4b5a      	ldr	r3, [pc, #360]	; (1bdec <prvAddNewTaskToReadyList+0x198>)
   1bc82:	4798      	blx	r3
   1bc84:	e00d      	b.n	1bca2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1bc86:	4b5a      	ldr	r3, [pc, #360]	; (1bdf0 <prvAddNewTaskToReadyList+0x19c>)
   1bc88:	681b      	ldr	r3, [r3, #0]
   1bc8a:	2b00      	cmp	r3, #0
   1bc8c:	d109      	bne.n	1bca2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1bc8e:	4b56      	ldr	r3, [pc, #344]	; (1bde8 <prvAddNewTaskToReadyList+0x194>)
   1bc90:	681b      	ldr	r3, [r3, #0]
   1bc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bc94:	687b      	ldr	r3, [r7, #4]
   1bc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bc98:	429a      	cmp	r2, r3
   1bc9a:	d802      	bhi.n	1bca2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1bc9c:	4b52      	ldr	r3, [pc, #328]	; (1bde8 <prvAddNewTaskToReadyList+0x194>)
   1bc9e:	687a      	ldr	r2, [r7, #4]
   1bca0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1bca2:	4b54      	ldr	r3, [pc, #336]	; (1bdf4 <prvAddNewTaskToReadyList+0x1a0>)
   1bca4:	681b      	ldr	r3, [r3, #0]
   1bca6:	1c5a      	adds	r2, r3, #1
   1bca8:	4b52      	ldr	r3, [pc, #328]	; (1bdf4 <prvAddNewTaskToReadyList+0x1a0>)
   1bcaa:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1bcac:	4b51      	ldr	r3, [pc, #324]	; (1bdf4 <prvAddNewTaskToReadyList+0x1a0>)
   1bcae:	681a      	ldr	r2, [r3, #0]
   1bcb0:	687b      	ldr	r3, [r7, #4]
   1bcb2:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1bcb4:	687b      	ldr	r3, [r7, #4]
   1bcb6:	2b00      	cmp	r3, #0
   1bcb8:	d052      	beq.n	1bd60 <prvAddNewTaskToReadyList+0x10c>
   1bcba:	2003      	movs	r0, #3
   1bcbc:	4b4e      	ldr	r3, [pc, #312]	; (1bdf8 <prvAddNewTaskToReadyList+0x1a4>)
   1bcbe:	4798      	blx	r3
   1bcc0:	0003      	movs	r3, r0
   1bcc2:	b29a      	uxth	r2, r3
   1bcc4:	687b      	ldr	r3, [r7, #4]
   1bcc6:	0011      	movs	r1, r2
   1bcc8:	0018      	movs	r0, r3
   1bcca:	4b4c      	ldr	r3, [pc, #304]	; (1bdfc <prvAddNewTaskToReadyList+0x1a8>)
   1bccc:	4798      	blx	r3
   1bcce:	4b4c      	ldr	r3, [pc, #304]	; (1be00 <prvAddNewTaskToReadyList+0x1ac>)
   1bcd0:	881a      	ldrh	r2, [r3, #0]
   1bcd2:	687b      	ldr	r3, [r7, #4]
   1bcd4:	0011      	movs	r1, r2
   1bcd6:	0018      	movs	r0, r3
   1bcd8:	4b4a      	ldr	r3, [pc, #296]	; (1be04 <prvAddNewTaskToReadyList+0x1b0>)
   1bcda:	4798      	blx	r3
   1bcdc:	687b      	ldr	r3, [r7, #4]
   1bcde:	0018      	movs	r0, r3
   1bce0:	4b49      	ldr	r3, [pc, #292]	; (1be08 <prvAddNewTaskToReadyList+0x1b4>)
   1bce2:	4798      	blx	r3
   1bce4:	0003      	movs	r3, r0
   1bce6:	b2d9      	uxtb	r1, r3
   1bce8:	687b      	ldr	r3, [r7, #4]
   1bcea:	3334      	adds	r3, #52	; 0x34
   1bcec:	001a      	movs	r2, r3
   1bcee:	2003      	movs	r0, #3
   1bcf0:	4b46      	ldr	r3, [pc, #280]	; (1be0c <prvAddNewTaskToReadyList+0x1b8>)
   1bcf2:	4798      	blx	r3
   1bcf4:	687b      	ldr	r3, [r7, #4]
   1bcf6:	0018      	movs	r0, r3
   1bcf8:	4b43      	ldr	r3, [pc, #268]	; (1be08 <prvAddNewTaskToReadyList+0x1b4>)
   1bcfa:	4798      	blx	r3
   1bcfc:	0003      	movs	r3, r0
   1bcfe:	b2d9      	uxtb	r1, r3
   1bd00:	687b      	ldr	r3, [r7, #4]
   1bd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bd04:	b2db      	uxtb	r3, r3
   1bd06:	001a      	movs	r2, r3
   1bd08:	2003      	movs	r0, #3
   1bd0a:	4b41      	ldr	r3, [pc, #260]	; (1be10 <prvAddNewTaskToReadyList+0x1bc>)
   1bd0c:	4798      	blx	r3
   1bd0e:	4b41      	ldr	r3, [pc, #260]	; (1be14 <prvAddNewTaskToReadyList+0x1c0>)
   1bd10:	4798      	blx	r3
   1bd12:	0003      	movs	r3, r0
   1bd14:	0018      	movs	r0, r3
   1bd16:	4b40      	ldr	r3, [pc, #256]	; (1be18 <prvAddNewTaskToReadyList+0x1c4>)
   1bd18:	4798      	blx	r3
   1bd1a:	0003      	movs	r3, r0
   1bd1c:	001a      	movs	r2, r3
   1bd1e:	4b3f      	ldr	r3, [pc, #252]	; (1be1c <prvAddNewTaskToReadyList+0x1c8>)
   1bd20:	881b      	ldrh	r3, [r3, #0]
   1bd22:	4013      	ands	r3, r2
   1bd24:	b29b      	uxth	r3, r3
   1bd26:	2b00      	cmp	r3, #0
   1bd28:	d016      	beq.n	1bd58 <prvAddNewTaskToReadyList+0x104>
   1bd2a:	687b      	ldr	r3, [r7, #4]
   1bd2c:	0018      	movs	r0, r3
   1bd2e:	4b3a      	ldr	r3, [pc, #232]	; (1be18 <prvAddNewTaskToReadyList+0x1c4>)
   1bd30:	4798      	blx	r3
   1bd32:	0003      	movs	r3, r0
   1bd34:	001a      	movs	r2, r3
   1bd36:	4b39      	ldr	r3, [pc, #228]	; (1be1c <prvAddNewTaskToReadyList+0x1c8>)
   1bd38:	881b      	ldrh	r3, [r3, #0]
   1bd3a:	4013      	ands	r3, r2
   1bd3c:	b29b      	uxth	r3, r3
   1bd3e:	2b00      	cmp	r3, #0
   1bd40:	d00a      	beq.n	1bd58 <prvAddNewTaskToReadyList+0x104>
   1bd42:	687b      	ldr	r3, [r7, #4]
   1bd44:	0018      	movs	r0, r3
   1bd46:	4b30      	ldr	r3, [pc, #192]	; (1be08 <prvAddNewTaskToReadyList+0x1b4>)
   1bd48:	4798      	blx	r3
   1bd4a:	0003      	movs	r3, r0
   1bd4c:	b2db      	uxtb	r3, r3
   1bd4e:	001a      	movs	r2, r3
   1bd50:	2103      	movs	r1, #3
   1bd52:	201b      	movs	r0, #27
   1bd54:	4b32      	ldr	r3, [pc, #200]	; (1be20 <prvAddNewTaskToReadyList+0x1cc>)
   1bd56:	4798      	blx	r3
   1bd58:	687b      	ldr	r3, [r7, #4]
   1bd5a:	0018      	movs	r0, r3
   1bd5c:	4b31      	ldr	r3, [pc, #196]	; (1be24 <prvAddNewTaskToReadyList+0x1d0>)
   1bd5e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1bd60:	687b      	ldr	r3, [r7, #4]
   1bd62:	0018      	movs	r0, r3
   1bd64:	4b2c      	ldr	r3, [pc, #176]	; (1be18 <prvAddNewTaskToReadyList+0x1c4>)
   1bd66:	4798      	blx	r3
   1bd68:	0003      	movs	r3, r0
   1bd6a:	001a      	movs	r2, r3
   1bd6c:	4b2b      	ldr	r3, [pc, #172]	; (1be1c <prvAddNewTaskToReadyList+0x1c8>)
   1bd6e:	881b      	ldrh	r3, [r3, #0]
   1bd70:	4013      	ands	r3, r2
   1bd72:	b29b      	uxth	r3, r3
   1bd74:	2b00      	cmp	r3, #0
   1bd76:	d008      	beq.n	1bd8a <prvAddNewTaskToReadyList+0x136>
   1bd78:	687b      	ldr	r3, [r7, #4]
   1bd7a:	0018      	movs	r0, r3
   1bd7c:	4b22      	ldr	r3, [pc, #136]	; (1be08 <prvAddNewTaskToReadyList+0x1b4>)
   1bd7e:	4798      	blx	r3
   1bd80:	0003      	movs	r3, r0
   1bd82:	b2db      	uxtb	r3, r3
   1bd84:	0018      	movs	r0, r3
   1bd86:	4b28      	ldr	r3, [pc, #160]	; (1be28 <prvAddNewTaskToReadyList+0x1d4>)
   1bd88:	4798      	blx	r3
   1bd8a:	687b      	ldr	r3, [r7, #4]
   1bd8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bd8e:	4b27      	ldr	r3, [pc, #156]	; (1be2c <prvAddNewTaskToReadyList+0x1d8>)
   1bd90:	681b      	ldr	r3, [r3, #0]
   1bd92:	429a      	cmp	r2, r3
   1bd94:	d903      	bls.n	1bd9e <prvAddNewTaskToReadyList+0x14a>
   1bd96:	687b      	ldr	r3, [r7, #4]
   1bd98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bd9a:	4b24      	ldr	r3, [pc, #144]	; (1be2c <prvAddNewTaskToReadyList+0x1d8>)
   1bd9c:	601a      	str	r2, [r3, #0]
   1bd9e:	687b      	ldr	r3, [r7, #4]
   1bda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bda2:	0013      	movs	r3, r2
   1bda4:	009b      	lsls	r3, r3, #2
   1bda6:	189b      	adds	r3, r3, r2
   1bda8:	009b      	lsls	r3, r3, #2
   1bdaa:	4a21      	ldr	r2, [pc, #132]	; (1be30 <prvAddNewTaskToReadyList+0x1dc>)
   1bdac:	189a      	adds	r2, r3, r2
   1bdae:	687b      	ldr	r3, [r7, #4]
   1bdb0:	3304      	adds	r3, #4
   1bdb2:	0019      	movs	r1, r3
   1bdb4:	0010      	movs	r0, r2
   1bdb6:	4b1f      	ldr	r3, [pc, #124]	; (1be34 <prvAddNewTaskToReadyList+0x1e0>)
   1bdb8:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1bdba:	4b1f      	ldr	r3, [pc, #124]	; (1be38 <prvAddNewTaskToReadyList+0x1e4>)
   1bdbc:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1bdbe:	4b0c      	ldr	r3, [pc, #48]	; (1bdf0 <prvAddNewTaskToReadyList+0x19c>)
   1bdc0:	681b      	ldr	r3, [r3, #0]
   1bdc2:	2b00      	cmp	r3, #0
   1bdc4:	d008      	beq.n	1bdd8 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1bdc6:	4b08      	ldr	r3, [pc, #32]	; (1bde8 <prvAddNewTaskToReadyList+0x194>)
   1bdc8:	681b      	ldr	r3, [r3, #0]
   1bdca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bdcc:	687b      	ldr	r3, [r7, #4]
   1bdce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bdd0:	429a      	cmp	r2, r3
   1bdd2:	d201      	bcs.n	1bdd8 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1bdd4:	4b19      	ldr	r3, [pc, #100]	; (1be3c <prvAddNewTaskToReadyList+0x1e8>)
   1bdd6:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1bdd8:	46c0      	nop			; (mov r8, r8)
   1bdda:	46bd      	mov	sp, r7
   1bddc:	b002      	add	sp, #8
   1bdde:	bd80      	pop	{r7, pc}
   1bde0:	00019e49 	.word	0x00019e49
   1bde4:	20004058 	.word	0x20004058
   1bde8:	20003f80 	.word	0x20003f80
   1bdec:	0001c975 	.word	0x0001c975
   1bdf0:	20004064 	.word	0x20004064
   1bdf4:	20004074 	.word	0x20004074
   1bdf8:	000193c1 	.word	0x000193c1
   1bdfc:	00017e65 	.word	0x00017e65
   1be00:	20000132 	.word	0x20000132
   1be04:	00017ea1 	.word	0x00017ea1
   1be08:	00017e21 	.word	0x00017e21
   1be0c:	000195f1 	.word	0x000195f1
   1be10:	00018d55 	.word	0x00018d55
   1be14:	000180dd 	.word	0x000180dd
   1be18:	00017e41 	.word	0x00017e41
   1be1c:	20000130 	.word	0x20000130
   1be20:	00018839 	.word	0x00018839
   1be24:	00017fa1 	.word	0x00017fa1
   1be28:	000185f1 	.word	0x000185f1
   1be2c:	20004060 	.word	0x20004060
   1be30:	20003f84 	.word	0x20003f84
   1be34:	00019c0b 	.word	0x00019c0b
   1be38:	00019e6d 	.word	0x00019e6d
   1be3c:	00019e31 	.word	0x00019e31

0001be40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1be40:	b580      	push	{r7, lr}
   1be42:	b084      	sub	sp, #16
   1be44:	af00      	add	r7, sp, #0
   1be46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1be48:	2300      	movs	r3, #0
   1be4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1be4c:	687b      	ldr	r3, [r7, #4]
   1be4e:	2b00      	cmp	r3, #0
   1be50:	d045      	beq.n	1bede <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1be52:	4b27      	ldr	r3, [pc, #156]	; (1bef0 <vTaskDelay+0xb0>)
   1be54:	681b      	ldr	r3, [r3, #0]
   1be56:	2b00      	cmp	r3, #0
   1be58:	d001      	beq.n	1be5e <vTaskDelay+0x1e>
   1be5a:	b672      	cpsid	i
   1be5c:	e7fe      	b.n	1be5c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1be5e:	4b25      	ldr	r3, [pc, #148]	; (1bef4 <vTaskDelay+0xb4>)
   1be60:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1be62:	4b25      	ldr	r3, [pc, #148]	; (1bef8 <vTaskDelay+0xb8>)
   1be64:	681b      	ldr	r3, [r3, #0]
   1be66:	0018      	movs	r0, r3
   1be68:	4b24      	ldr	r3, [pc, #144]	; (1befc <vTaskDelay+0xbc>)
   1be6a:	4798      	blx	r3
   1be6c:	0003      	movs	r3, r0
   1be6e:	001a      	movs	r2, r3
   1be70:	4b23      	ldr	r3, [pc, #140]	; (1bf00 <vTaskDelay+0xc0>)
   1be72:	881b      	ldrh	r3, [r3, #0]
   1be74:	4013      	ands	r3, r2
   1be76:	b29b      	uxth	r3, r3
   1be78:	2b00      	cmp	r3, #0
   1be7a:	d00e      	beq.n	1be9a <vTaskDelay+0x5a>
   1be7c:	687b      	ldr	r3, [r7, #4]
   1be7e:	0019      	movs	r1, r3
   1be80:	2089      	movs	r0, #137	; 0x89
   1be82:	4b20      	ldr	r3, [pc, #128]	; (1bf04 <vTaskDelay+0xc4>)
   1be84:	4798      	blx	r3
   1be86:	4b1c      	ldr	r3, [pc, #112]	; (1bef8 <vTaskDelay+0xb8>)
   1be88:	681b      	ldr	r3, [r3, #0]
   1be8a:	0018      	movs	r0, r3
   1be8c:	4b1e      	ldr	r3, [pc, #120]	; (1bf08 <vTaskDelay+0xc8>)
   1be8e:	4798      	blx	r3
   1be90:	0003      	movs	r3, r0
   1be92:	b2db      	uxtb	r3, r3
   1be94:	0018      	movs	r0, r3
   1be96:	4b1d      	ldr	r3, [pc, #116]	; (1bf0c <vTaskDelay+0xcc>)
   1be98:	4798      	blx	r3
   1be9a:	4b1d      	ldr	r3, [pc, #116]	; (1bf10 <vTaskDelay+0xd0>)
   1be9c:	4798      	blx	r3
   1be9e:	0003      	movs	r3, r0
   1bea0:	0018      	movs	r0, r3
   1bea2:	4b16      	ldr	r3, [pc, #88]	; (1befc <vTaskDelay+0xbc>)
   1bea4:	4798      	blx	r3
   1bea6:	0003      	movs	r3, r0
   1bea8:	001a      	movs	r2, r3
   1beaa:	4b15      	ldr	r3, [pc, #84]	; (1bf00 <vTaskDelay+0xc0>)
   1beac:	881b      	ldrh	r3, [r3, #0]
   1beae:	4013      	ands	r3, r2
   1beb0:	b29b      	uxth	r3, r3
   1beb2:	2b00      	cmp	r3, #0
   1beb4:	d00a      	beq.n	1becc <vTaskDelay+0x8c>
   1beb6:	4b16      	ldr	r3, [pc, #88]	; (1bf10 <vTaskDelay+0xd0>)
   1beb8:	4798      	blx	r3
   1beba:	0003      	movs	r3, r0
   1bebc:	0018      	movs	r0, r3
   1bebe:	4b12      	ldr	r3, [pc, #72]	; (1bf08 <vTaskDelay+0xc8>)
   1bec0:	4798      	blx	r3
   1bec2:	0003      	movs	r3, r0
   1bec4:	b2db      	uxtb	r3, r3
   1bec6:	0018      	movs	r0, r3
   1bec8:	4b10      	ldr	r3, [pc, #64]	; (1bf0c <vTaskDelay+0xcc>)
   1beca:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1becc:	687b      	ldr	r3, [r7, #4]
   1bece:	2100      	movs	r1, #0
   1bed0:	0018      	movs	r0, r3
   1bed2:	4b10      	ldr	r3, [pc, #64]	; (1bf14 <vTaskDelay+0xd4>)
   1bed4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1bed6:	4b10      	ldr	r3, [pc, #64]	; (1bf18 <vTaskDelay+0xd8>)
   1bed8:	4798      	blx	r3
   1beda:	0003      	movs	r3, r0
   1bedc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1bede:	68fb      	ldr	r3, [r7, #12]
   1bee0:	2b00      	cmp	r3, #0
   1bee2:	d101      	bne.n	1bee8 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1bee4:	4b0d      	ldr	r3, [pc, #52]	; (1bf1c <vTaskDelay+0xdc>)
   1bee6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1bee8:	46c0      	nop			; (mov r8, r8)
   1beea:	46bd      	mov	sp, r7
   1beec:	b004      	add	sp, #16
   1beee:	bd80      	pop	{r7, pc}
   1bef0:	20004080 	.word	0x20004080
   1bef4:	0001c101 	.word	0x0001c101
   1bef8:	20003f80 	.word	0x20003f80
   1befc:	00017e41 	.word	0x00017e41
   1bf00:	20000130 	.word	0x20000130
   1bf04:	00018b41 	.word	0x00018b41
   1bf08:	00017e21 	.word	0x00017e21
   1bf0c:	00018fd1 	.word	0x00018fd1
   1bf10:	000180dd 	.word	0x000180dd
   1bf14:	0001d059 	.word	0x0001d059
   1bf18:	0001c119 	.word	0x0001c119
   1bf1c:	00019e31 	.word	0x00019e31

0001bf20 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1bf20:	b580      	push	{r7, lr}
   1bf22:	b084      	sub	sp, #16
   1bf24:	af00      	add	r7, sp, #0
   1bf26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1bf28:	4b42      	ldr	r3, [pc, #264]	; (1c034 <vTaskSuspend+0x114>)
   1bf2a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1bf2c:	687b      	ldr	r3, [r7, #4]
   1bf2e:	2b00      	cmp	r3, #0
   1bf30:	d102      	bne.n	1bf38 <vTaskSuspend+0x18>
   1bf32:	4b41      	ldr	r3, [pc, #260]	; (1c038 <vTaskSuspend+0x118>)
   1bf34:	681b      	ldr	r3, [r3, #0]
   1bf36:	e000      	b.n	1bf3a <vTaskSuspend+0x1a>
   1bf38:	687b      	ldr	r3, [r7, #4]
   1bf3a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1bf3c:	4b3f      	ldr	r3, [pc, #252]	; (1c03c <vTaskSuspend+0x11c>)
   1bf3e:	4798      	blx	r3
   1bf40:	0003      	movs	r3, r0
   1bf42:	0018      	movs	r0, r3
   1bf44:	4b3e      	ldr	r3, [pc, #248]	; (1c040 <vTaskSuspend+0x120>)
   1bf46:	4798      	blx	r3
   1bf48:	0003      	movs	r3, r0
   1bf4a:	001a      	movs	r2, r3
   1bf4c:	4b3d      	ldr	r3, [pc, #244]	; (1c044 <vTaskSuspend+0x124>)
   1bf4e:	881b      	ldrh	r3, [r3, #0]
   1bf50:	4013      	ands	r3, r2
   1bf52:	b29b      	uxth	r3, r3
   1bf54:	2b00      	cmp	r3, #0
   1bf56:	d016      	beq.n	1bf86 <vTaskSuspend+0x66>
   1bf58:	68fb      	ldr	r3, [r7, #12]
   1bf5a:	0018      	movs	r0, r3
   1bf5c:	4b38      	ldr	r3, [pc, #224]	; (1c040 <vTaskSuspend+0x120>)
   1bf5e:	4798      	blx	r3
   1bf60:	0003      	movs	r3, r0
   1bf62:	001a      	movs	r2, r3
   1bf64:	4b37      	ldr	r3, [pc, #220]	; (1c044 <vTaskSuspend+0x124>)
   1bf66:	881b      	ldrh	r3, [r3, #0]
   1bf68:	4013      	ands	r3, r2
   1bf6a:	b29b      	uxth	r3, r3
   1bf6c:	2b00      	cmp	r3, #0
   1bf6e:	d00a      	beq.n	1bf86 <vTaskSuspend+0x66>
   1bf70:	68fb      	ldr	r3, [r7, #12]
   1bf72:	0018      	movs	r0, r3
   1bf74:	4b34      	ldr	r3, [pc, #208]	; (1c048 <vTaskSuspend+0x128>)
   1bf76:	4798      	blx	r3
   1bf78:	0003      	movs	r3, r0
   1bf7a:	b2db      	uxtb	r3, r3
   1bf7c:	001a      	movs	r2, r3
   1bf7e:	2103      	movs	r1, #3
   1bf80:	208a      	movs	r0, #138	; 0x8a
   1bf82:	4b32      	ldr	r3, [pc, #200]	; (1c04c <vTaskSuspend+0x12c>)
   1bf84:	4798      	blx	r3
   1bf86:	68fb      	ldr	r3, [r7, #12]
   1bf88:	0018      	movs	r0, r3
   1bf8a:	4b2f      	ldr	r3, [pc, #188]	; (1c048 <vTaskSuspend+0x128>)
   1bf8c:	4798      	blx	r3
   1bf8e:	0003      	movs	r3, r0
   1bf90:	b2db      	uxtb	r3, r3
   1bf92:	0018      	movs	r0, r3
   1bf94:	4b2e      	ldr	r3, [pc, #184]	; (1c050 <vTaskSuspend+0x130>)
   1bf96:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1bf98:	68fb      	ldr	r3, [r7, #12]
   1bf9a:	3304      	adds	r3, #4
   1bf9c:	0018      	movs	r0, r3
   1bf9e:	4b2d      	ldr	r3, [pc, #180]	; (1c054 <vTaskSuspend+0x134>)
   1bfa0:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1bfa2:	68fb      	ldr	r3, [r7, #12]
   1bfa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bfa6:	2b00      	cmp	r3, #0
   1bfa8:	d004      	beq.n	1bfb4 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1bfaa:	68fb      	ldr	r3, [r7, #12]
   1bfac:	3318      	adds	r3, #24
   1bfae:	0018      	movs	r0, r3
   1bfb0:	4b28      	ldr	r3, [pc, #160]	; (1c054 <vTaskSuspend+0x134>)
   1bfb2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1bfb4:	68fb      	ldr	r3, [r7, #12]
   1bfb6:	1d1a      	adds	r2, r3, #4
   1bfb8:	4b27      	ldr	r3, [pc, #156]	; (1c058 <vTaskSuspend+0x138>)
   1bfba:	0011      	movs	r1, r2
   1bfbc:	0018      	movs	r0, r3
   1bfbe:	4b27      	ldr	r3, [pc, #156]	; (1c05c <vTaskSuspend+0x13c>)
   1bfc0:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1bfc2:	68fb      	ldr	r3, [r7, #12]
   1bfc4:	2250      	movs	r2, #80	; 0x50
   1bfc6:	5c9b      	ldrb	r3, [r3, r2]
   1bfc8:	b2db      	uxtb	r3, r3
   1bfca:	2b01      	cmp	r3, #1
   1bfcc:	d103      	bne.n	1bfd6 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1bfce:	68fb      	ldr	r3, [r7, #12]
   1bfd0:	2250      	movs	r2, #80	; 0x50
   1bfd2:	2100      	movs	r1, #0
   1bfd4:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1bfd6:	4b22      	ldr	r3, [pc, #136]	; (1c060 <vTaskSuspend+0x140>)
   1bfd8:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1bfda:	4b22      	ldr	r3, [pc, #136]	; (1c064 <vTaskSuspend+0x144>)
   1bfdc:	681b      	ldr	r3, [r3, #0]
   1bfde:	2b00      	cmp	r3, #0
   1bfe0:	d005      	beq.n	1bfee <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1bfe2:	4b14      	ldr	r3, [pc, #80]	; (1c034 <vTaskSuspend+0x114>)
   1bfe4:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1bfe6:	4b20      	ldr	r3, [pc, #128]	; (1c068 <vTaskSuspend+0x148>)
   1bfe8:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1bfea:	4b1d      	ldr	r3, [pc, #116]	; (1c060 <vTaskSuspend+0x140>)
   1bfec:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1bfee:	4b12      	ldr	r3, [pc, #72]	; (1c038 <vTaskSuspend+0x118>)
   1bff0:	681b      	ldr	r3, [r3, #0]
   1bff2:	68fa      	ldr	r2, [r7, #12]
   1bff4:	429a      	cmp	r2, r3
   1bff6:	d118      	bne.n	1c02a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1bff8:	4b1a      	ldr	r3, [pc, #104]	; (1c064 <vTaskSuspend+0x144>)
   1bffa:	681b      	ldr	r3, [r3, #0]
   1bffc:	2b00      	cmp	r3, #0
   1bffe:	d008      	beq.n	1c012 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1c000:	4b1a      	ldr	r3, [pc, #104]	; (1c06c <vTaskSuspend+0x14c>)
   1c002:	681b      	ldr	r3, [r3, #0]
   1c004:	2b00      	cmp	r3, #0
   1c006:	d001      	beq.n	1c00c <vTaskSuspend+0xec>
   1c008:	b672      	cpsid	i
   1c00a:	e7fe      	b.n	1c00a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1c00c:	4b18      	ldr	r3, [pc, #96]	; (1c070 <vTaskSuspend+0x150>)
   1c00e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c010:	e00b      	b.n	1c02a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1c012:	4b11      	ldr	r3, [pc, #68]	; (1c058 <vTaskSuspend+0x138>)
   1c014:	681a      	ldr	r2, [r3, #0]
   1c016:	4b17      	ldr	r3, [pc, #92]	; (1c074 <vTaskSuspend+0x154>)
   1c018:	681b      	ldr	r3, [r3, #0]
   1c01a:	429a      	cmp	r2, r3
   1c01c:	d103      	bne.n	1c026 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1c01e:	4b06      	ldr	r3, [pc, #24]	; (1c038 <vTaskSuspend+0x118>)
   1c020:	2200      	movs	r2, #0
   1c022:	601a      	str	r2, [r3, #0]
	}
   1c024:	e001      	b.n	1c02a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1c026:	4b14      	ldr	r3, [pc, #80]	; (1c078 <vTaskSuspend+0x158>)
   1c028:	4798      	blx	r3
	}
   1c02a:	46c0      	nop			; (mov r8, r8)
   1c02c:	46bd      	mov	sp, r7
   1c02e:	b004      	add	sp, #16
   1c030:	bd80      	pop	{r7, pc}
   1c032:	46c0      	nop			; (mov r8, r8)
   1c034:	00019e49 	.word	0x00019e49
   1c038:	20003f80 	.word	0x20003f80
   1c03c:	000180dd 	.word	0x000180dd
   1c040:	00017e41 	.word	0x00017e41
   1c044:	20000130 	.word	0x20000130
   1c048:	00017e21 	.word	0x00017e21
   1c04c:	00018839 	.word	0x00018839
   1c050:	00018fd1 	.word	0x00018fd1
   1c054:	00019cbb 	.word	0x00019cbb
   1c058:	20004044 	.word	0x20004044
   1c05c:	00019c0b 	.word	0x00019c0b
   1c060:	00019e6d 	.word	0x00019e6d
   1c064:	20004064 	.word	0x20004064
   1c068:	0001cb05 	.word	0x0001cb05
   1c06c:	20004080 	.word	0x20004080
   1c070:	00019e31 	.word	0x00019e31
   1c074:	20004058 	.word	0x20004058
   1c078:	0001c495 	.word	0x0001c495

0001c07c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1c07c:	b590      	push	{r4, r7, lr}
   1c07e:	b085      	sub	sp, #20
   1c080:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1c082:	4916      	ldr	r1, [pc, #88]	; (1c0dc <vTaskStartScheduler+0x60>)
   1c084:	4816      	ldr	r0, [pc, #88]	; (1c0e0 <vTaskStartScheduler+0x64>)
   1c086:	4b17      	ldr	r3, [pc, #92]	; (1c0e4 <vTaskStartScheduler+0x68>)
   1c088:	9301      	str	r3, [sp, #4]
   1c08a:	2300      	movs	r3, #0
   1c08c:	9300      	str	r3, [sp, #0]
   1c08e:	2300      	movs	r3, #0
   1c090:	2296      	movs	r2, #150	; 0x96
   1c092:	4c15      	ldr	r4, [pc, #84]	; (1c0e8 <vTaskStartScheduler+0x6c>)
   1c094:	47a0      	blx	r4
   1c096:	0003      	movs	r3, r0
   1c098:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1c09a:	687b      	ldr	r3, [r7, #4]
   1c09c:	2b01      	cmp	r3, #1
   1c09e:	d103      	bne.n	1c0a8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1c0a0:	4b12      	ldr	r3, [pc, #72]	; (1c0ec <vTaskStartScheduler+0x70>)
   1c0a2:	4798      	blx	r3
   1c0a4:	0003      	movs	r3, r0
   1c0a6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1c0a8:	687b      	ldr	r3, [r7, #4]
   1c0aa:	2b01      	cmp	r3, #1
   1c0ac:	d10d      	bne.n	1c0ca <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1c0ae:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1c0b0:	4b0f      	ldr	r3, [pc, #60]	; (1c0f0 <vTaskStartScheduler+0x74>)
   1c0b2:	2201      	movs	r2, #1
   1c0b4:	4252      	negs	r2, r2
   1c0b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1c0b8:	4b0e      	ldr	r3, [pc, #56]	; (1c0f4 <vTaskStartScheduler+0x78>)
   1c0ba:	2201      	movs	r2, #1
   1c0bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1c0be:	4b0e      	ldr	r3, [pc, #56]	; (1c0f8 <vTaskStartScheduler+0x7c>)
   1c0c0:	2200      	movs	r2, #0
   1c0c2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1c0c4:	4b0d      	ldr	r3, [pc, #52]	; (1c0fc <vTaskStartScheduler+0x80>)
   1c0c6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1c0c8:	e004      	b.n	1c0d4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1c0ca:	687b      	ldr	r3, [r7, #4]
   1c0cc:	3301      	adds	r3, #1
   1c0ce:	d101      	bne.n	1c0d4 <vTaskStartScheduler+0x58>
   1c0d0:	b672      	cpsid	i
   1c0d2:	e7fe      	b.n	1c0d2 <vTaskStartScheduler+0x56>
}
   1c0d4:	46c0      	nop			; (mov r8, r8)
   1c0d6:	46bd      	mov	sp, r7
   1c0d8:	b003      	add	sp, #12
   1c0da:	bd90      	pop	{r4, r7, pc}
   1c0dc:	00037f54 	.word	0x00037f54
   1c0e0:	0001c94d 	.word	0x0001c94d
   1c0e4:	2000407c 	.word	0x2000407c
   1c0e8:	0001baa5 	.word	0x0001baa5
   1c0ec:	0001d10d 	.word	0x0001d10d
   1c0f0:	20004078 	.word	0x20004078
   1c0f4:	20004064 	.word	0x20004064
   1c0f8:	2000405c 	.word	0x2000405c
   1c0fc:	00019dd9 	.word	0x00019dd9

0001c100 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1c100:	b580      	push	{r7, lr}
   1c102:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1c104:	4b03      	ldr	r3, [pc, #12]	; (1c114 <vTaskSuspendAll+0x14>)
   1c106:	681b      	ldr	r3, [r3, #0]
   1c108:	1c5a      	adds	r2, r3, #1
   1c10a:	4b02      	ldr	r3, [pc, #8]	; (1c114 <vTaskSuspendAll+0x14>)
   1c10c:	601a      	str	r2, [r3, #0]
}
   1c10e:	46c0      	nop			; (mov r8, r8)
   1c110:	46bd      	mov	sp, r7
   1c112:	bd80      	pop	{r7, pc}
   1c114:	20004080 	.word	0x20004080

0001c118 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1c118:	b580      	push	{r7, lr}
   1c11a:	b084      	sub	sp, #16
   1c11c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1c11e:	2300      	movs	r3, #0
   1c120:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1c122:	2300      	movs	r3, #0
   1c124:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1c126:	4b45      	ldr	r3, [pc, #276]	; (1c23c <xTaskResumeAll+0x124>)
   1c128:	681b      	ldr	r3, [r3, #0]
   1c12a:	2b00      	cmp	r3, #0
   1c12c:	d101      	bne.n	1c132 <xTaskResumeAll+0x1a>
   1c12e:	b672      	cpsid	i
   1c130:	e7fe      	b.n	1c130 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1c132:	4b43      	ldr	r3, [pc, #268]	; (1c240 <xTaskResumeAll+0x128>)
   1c134:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1c136:	4b41      	ldr	r3, [pc, #260]	; (1c23c <xTaskResumeAll+0x124>)
   1c138:	681b      	ldr	r3, [r3, #0]
   1c13a:	1e5a      	subs	r2, r3, #1
   1c13c:	4b3f      	ldr	r3, [pc, #252]	; (1c23c <xTaskResumeAll+0x124>)
   1c13e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c140:	4b3e      	ldr	r3, [pc, #248]	; (1c23c <xTaskResumeAll+0x124>)
   1c142:	681b      	ldr	r3, [r3, #0]
   1c144:	2b00      	cmp	r3, #0
   1c146:	d000      	beq.n	1c14a <xTaskResumeAll+0x32>
   1c148:	e071      	b.n	1c22e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1c14a:	4b3e      	ldr	r3, [pc, #248]	; (1c244 <xTaskResumeAll+0x12c>)
   1c14c:	681b      	ldr	r3, [r3, #0]
   1c14e:	2b00      	cmp	r3, #0
   1c150:	d100      	bne.n	1c154 <xTaskResumeAll+0x3c>
   1c152:	e06c      	b.n	1c22e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c154:	e044      	b.n	1c1e0 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1c156:	4b3c      	ldr	r3, [pc, #240]	; (1c248 <xTaskResumeAll+0x130>)
   1c158:	68db      	ldr	r3, [r3, #12]
   1c15a:	68db      	ldr	r3, [r3, #12]
   1c15c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c15e:	68fb      	ldr	r3, [r7, #12]
   1c160:	3318      	adds	r3, #24
   1c162:	0018      	movs	r0, r3
   1c164:	4b39      	ldr	r3, [pc, #228]	; (1c24c <xTaskResumeAll+0x134>)
   1c166:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c168:	68fb      	ldr	r3, [r7, #12]
   1c16a:	3304      	adds	r3, #4
   1c16c:	0018      	movs	r0, r3
   1c16e:	4b37      	ldr	r3, [pc, #220]	; (1c24c <xTaskResumeAll+0x134>)
   1c170:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1c172:	68fb      	ldr	r3, [r7, #12]
   1c174:	0018      	movs	r0, r3
   1c176:	4b36      	ldr	r3, [pc, #216]	; (1c250 <xTaskResumeAll+0x138>)
   1c178:	4798      	blx	r3
   1c17a:	0003      	movs	r3, r0
   1c17c:	001a      	movs	r2, r3
   1c17e:	4b35      	ldr	r3, [pc, #212]	; (1c254 <xTaskResumeAll+0x13c>)
   1c180:	881b      	ldrh	r3, [r3, #0]
   1c182:	4013      	ands	r3, r2
   1c184:	b29b      	uxth	r3, r3
   1c186:	2b00      	cmp	r3, #0
   1c188:	d008      	beq.n	1c19c <xTaskResumeAll+0x84>
   1c18a:	68fb      	ldr	r3, [r7, #12]
   1c18c:	0018      	movs	r0, r3
   1c18e:	4b32      	ldr	r3, [pc, #200]	; (1c258 <xTaskResumeAll+0x140>)
   1c190:	4798      	blx	r3
   1c192:	0003      	movs	r3, r0
   1c194:	b2db      	uxtb	r3, r3
   1c196:	0018      	movs	r0, r3
   1c198:	4b30      	ldr	r3, [pc, #192]	; (1c25c <xTaskResumeAll+0x144>)
   1c19a:	4798      	blx	r3
   1c19c:	68fb      	ldr	r3, [r7, #12]
   1c19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c1a0:	4b2f      	ldr	r3, [pc, #188]	; (1c260 <xTaskResumeAll+0x148>)
   1c1a2:	681b      	ldr	r3, [r3, #0]
   1c1a4:	429a      	cmp	r2, r3
   1c1a6:	d903      	bls.n	1c1b0 <xTaskResumeAll+0x98>
   1c1a8:	68fb      	ldr	r3, [r7, #12]
   1c1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c1ac:	4b2c      	ldr	r3, [pc, #176]	; (1c260 <xTaskResumeAll+0x148>)
   1c1ae:	601a      	str	r2, [r3, #0]
   1c1b0:	68fb      	ldr	r3, [r7, #12]
   1c1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c1b4:	0013      	movs	r3, r2
   1c1b6:	009b      	lsls	r3, r3, #2
   1c1b8:	189b      	adds	r3, r3, r2
   1c1ba:	009b      	lsls	r3, r3, #2
   1c1bc:	4a29      	ldr	r2, [pc, #164]	; (1c264 <xTaskResumeAll+0x14c>)
   1c1be:	189a      	adds	r2, r3, r2
   1c1c0:	68fb      	ldr	r3, [r7, #12]
   1c1c2:	3304      	adds	r3, #4
   1c1c4:	0019      	movs	r1, r3
   1c1c6:	0010      	movs	r0, r2
   1c1c8:	4b27      	ldr	r3, [pc, #156]	; (1c268 <xTaskResumeAll+0x150>)
   1c1ca:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c1cc:	68fb      	ldr	r3, [r7, #12]
   1c1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c1d0:	4b26      	ldr	r3, [pc, #152]	; (1c26c <xTaskResumeAll+0x154>)
   1c1d2:	681b      	ldr	r3, [r3, #0]
   1c1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c1d6:	429a      	cmp	r2, r3
   1c1d8:	d302      	bcc.n	1c1e0 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1c1da:	4b25      	ldr	r3, [pc, #148]	; (1c270 <xTaskResumeAll+0x158>)
   1c1dc:	2201      	movs	r2, #1
   1c1de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c1e0:	4b19      	ldr	r3, [pc, #100]	; (1c248 <xTaskResumeAll+0x130>)
   1c1e2:	681b      	ldr	r3, [r3, #0]
   1c1e4:	2b00      	cmp	r3, #0
   1c1e6:	d1b6      	bne.n	1c156 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1c1e8:	68fb      	ldr	r3, [r7, #12]
   1c1ea:	2b00      	cmp	r3, #0
   1c1ec:	d001      	beq.n	1c1f2 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1c1ee:	4b21      	ldr	r3, [pc, #132]	; (1c274 <xTaskResumeAll+0x15c>)
   1c1f0:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1c1f2:	4b21      	ldr	r3, [pc, #132]	; (1c278 <xTaskResumeAll+0x160>)
   1c1f4:	681b      	ldr	r3, [r3, #0]
   1c1f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1c1f8:	687b      	ldr	r3, [r7, #4]
   1c1fa:	2b00      	cmp	r3, #0
   1c1fc:	d00f      	beq.n	1c21e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1c1fe:	4b1f      	ldr	r3, [pc, #124]	; (1c27c <xTaskResumeAll+0x164>)
   1c200:	4798      	blx	r3
   1c202:	1e03      	subs	r3, r0, #0
   1c204:	d002      	beq.n	1c20c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1c206:	4b1a      	ldr	r3, [pc, #104]	; (1c270 <xTaskResumeAll+0x158>)
   1c208:	2201      	movs	r2, #1
   1c20a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1c20c:	687b      	ldr	r3, [r7, #4]
   1c20e:	3b01      	subs	r3, #1
   1c210:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1c212:	687b      	ldr	r3, [r7, #4]
   1c214:	2b00      	cmp	r3, #0
   1c216:	d1f2      	bne.n	1c1fe <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1c218:	4b17      	ldr	r3, [pc, #92]	; (1c278 <xTaskResumeAll+0x160>)
   1c21a:	2200      	movs	r2, #0
   1c21c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1c21e:	4b14      	ldr	r3, [pc, #80]	; (1c270 <xTaskResumeAll+0x158>)
   1c220:	681b      	ldr	r3, [r3, #0]
   1c222:	2b00      	cmp	r3, #0
   1c224:	d003      	beq.n	1c22e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1c226:	2301      	movs	r3, #1
   1c228:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1c22a:	4b15      	ldr	r3, [pc, #84]	; (1c280 <xTaskResumeAll+0x168>)
   1c22c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1c22e:	4b15      	ldr	r3, [pc, #84]	; (1c284 <xTaskResumeAll+0x16c>)
   1c230:	4798      	blx	r3

	return xAlreadyYielded;
   1c232:	68bb      	ldr	r3, [r7, #8]
}
   1c234:	0018      	movs	r0, r3
   1c236:	46bd      	mov	sp, r7
   1c238:	b004      	add	sp, #16
   1c23a:	bd80      	pop	{r7, pc}
   1c23c:	20004080 	.word	0x20004080
   1c240:	00019e49 	.word	0x00019e49
   1c244:	20004058 	.word	0x20004058
   1c248:	20004018 	.word	0x20004018
   1c24c:	00019cbb 	.word	0x00019cbb
   1c250:	00017e41 	.word	0x00017e41
   1c254:	20000130 	.word	0x20000130
   1c258:	00017e21 	.word	0x00017e21
   1c25c:	000185f1 	.word	0x000185f1
   1c260:	20004060 	.word	0x20004060
   1c264:	20003f84 	.word	0x20003f84
   1c268:	00019c0b 	.word	0x00019c0b
   1c26c:	20003f80 	.word	0x20003f80
   1c270:	2000406c 	.word	0x2000406c
   1c274:	0001cb05 	.word	0x0001cb05
   1c278:	20004068 	.word	0x20004068
   1c27c:	0001c2a5 	.word	0x0001c2a5
   1c280:	00019e31 	.word	0x00019e31
   1c284:	00019e6d 	.word	0x00019e6d

0001c288 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1c288:	b580      	push	{r7, lr}
   1c28a:	b082      	sub	sp, #8
   1c28c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1c28e:	4b04      	ldr	r3, [pc, #16]	; (1c2a0 <xTaskGetTickCount+0x18>)
   1c290:	681b      	ldr	r3, [r3, #0]
   1c292:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1c294:	687b      	ldr	r3, [r7, #4]
}
   1c296:	0018      	movs	r0, r3
   1c298:	46bd      	mov	sp, r7
   1c29a:	b002      	add	sp, #8
   1c29c:	bd80      	pop	{r7, pc}
   1c29e:	46c0      	nop			; (mov r8, r8)
   1c2a0:	2000405c 	.word	0x2000405c

0001c2a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1c2a4:	b580      	push	{r7, lr}
   1c2a6:	b086      	sub	sp, #24
   1c2a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1c2aa:	2300      	movs	r3, #0
   1c2ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1c2ae:	4b64      	ldr	r3, [pc, #400]	; (1c440 <xTaskIncrementTick+0x19c>)
   1c2b0:	681b      	ldr	r3, [r3, #0]
   1c2b2:	2b01      	cmp	r3, #1
   1c2b4:	d003      	beq.n	1c2be <xTaskIncrementTick+0x1a>
   1c2b6:	4b63      	ldr	r3, [pc, #396]	; (1c444 <xTaskIncrementTick+0x1a0>)
   1c2b8:	681b      	ldr	r3, [r3, #0]
   1c2ba:	2b00      	cmp	r3, #0
   1c2bc:	d107      	bne.n	1c2ce <xTaskIncrementTick+0x2a>
   1c2be:	4b62      	ldr	r3, [pc, #392]	; (1c448 <xTaskIncrementTick+0x1a4>)
   1c2c0:	681b      	ldr	r3, [r3, #0]
   1c2c2:	1c5a      	adds	r2, r3, #1
   1c2c4:	4b60      	ldr	r3, [pc, #384]	; (1c448 <xTaskIncrementTick+0x1a4>)
   1c2c6:	601a      	str	r2, [r3, #0]
   1c2c8:	2000      	movs	r0, #0
   1c2ca:	4b60      	ldr	r3, [pc, #384]	; (1c44c <xTaskIncrementTick+0x1a8>)
   1c2cc:	4798      	blx	r3
   1c2ce:	4b5c      	ldr	r3, [pc, #368]	; (1c440 <xTaskIncrementTick+0x19c>)
   1c2d0:	681b      	ldr	r3, [r3, #0]
   1c2d2:	2b00      	cmp	r3, #0
   1c2d4:	d106      	bne.n	1c2e4 <xTaskIncrementTick+0x40>
   1c2d6:	4b5e      	ldr	r3, [pc, #376]	; (1c450 <xTaskIncrementTick+0x1ac>)
   1c2d8:	681b      	ldr	r3, [r3, #0]
   1c2da:	3301      	adds	r3, #1
   1c2dc:	0019      	movs	r1, r3
   1c2de:	2003      	movs	r0, #3
   1c2e0:	4b5c      	ldr	r3, [pc, #368]	; (1c454 <xTaskIncrementTick+0x1b0>)
   1c2e2:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c2e4:	4b56      	ldr	r3, [pc, #344]	; (1c440 <xTaskIncrementTick+0x19c>)
   1c2e6:	681b      	ldr	r3, [r3, #0]
   1c2e8:	2b00      	cmp	r3, #0
   1c2ea:	d000      	beq.n	1c2ee <xTaskIncrementTick+0x4a>
   1c2ec:	e098      	b.n	1c420 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1c2ee:	4b58      	ldr	r3, [pc, #352]	; (1c450 <xTaskIncrementTick+0x1ac>)
   1c2f0:	681b      	ldr	r3, [r3, #0]
   1c2f2:	3301      	adds	r3, #1
   1c2f4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1c2f6:	4b56      	ldr	r3, [pc, #344]	; (1c450 <xTaskIncrementTick+0x1ac>)
   1c2f8:	693a      	ldr	r2, [r7, #16]
   1c2fa:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1c2fc:	693b      	ldr	r3, [r7, #16]
   1c2fe:	2b00      	cmp	r3, #0
   1c300:	d117      	bne.n	1c332 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1c302:	4b55      	ldr	r3, [pc, #340]	; (1c458 <xTaskIncrementTick+0x1b4>)
   1c304:	681b      	ldr	r3, [r3, #0]
   1c306:	681b      	ldr	r3, [r3, #0]
   1c308:	2b00      	cmp	r3, #0
   1c30a:	d001      	beq.n	1c310 <xTaskIncrementTick+0x6c>
   1c30c:	b672      	cpsid	i
   1c30e:	e7fe      	b.n	1c30e <xTaskIncrementTick+0x6a>
   1c310:	4b51      	ldr	r3, [pc, #324]	; (1c458 <xTaskIncrementTick+0x1b4>)
   1c312:	681b      	ldr	r3, [r3, #0]
   1c314:	60fb      	str	r3, [r7, #12]
   1c316:	4b51      	ldr	r3, [pc, #324]	; (1c45c <xTaskIncrementTick+0x1b8>)
   1c318:	681a      	ldr	r2, [r3, #0]
   1c31a:	4b4f      	ldr	r3, [pc, #316]	; (1c458 <xTaskIncrementTick+0x1b4>)
   1c31c:	601a      	str	r2, [r3, #0]
   1c31e:	4b4f      	ldr	r3, [pc, #316]	; (1c45c <xTaskIncrementTick+0x1b8>)
   1c320:	68fa      	ldr	r2, [r7, #12]
   1c322:	601a      	str	r2, [r3, #0]
   1c324:	4b4e      	ldr	r3, [pc, #312]	; (1c460 <xTaskIncrementTick+0x1bc>)
   1c326:	681b      	ldr	r3, [r3, #0]
   1c328:	1c5a      	adds	r2, r3, #1
   1c32a:	4b4d      	ldr	r3, [pc, #308]	; (1c460 <xTaskIncrementTick+0x1bc>)
   1c32c:	601a      	str	r2, [r3, #0]
   1c32e:	4b4d      	ldr	r3, [pc, #308]	; (1c464 <xTaskIncrementTick+0x1c0>)
   1c330:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1c332:	4b4d      	ldr	r3, [pc, #308]	; (1c468 <xTaskIncrementTick+0x1c4>)
   1c334:	681b      	ldr	r3, [r3, #0]
   1c336:	693a      	ldr	r2, [r7, #16]
   1c338:	429a      	cmp	r2, r3
   1c33a:	d363      	bcc.n	1c404 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c33c:	4b46      	ldr	r3, [pc, #280]	; (1c458 <xTaskIncrementTick+0x1b4>)
   1c33e:	681b      	ldr	r3, [r3, #0]
   1c340:	681b      	ldr	r3, [r3, #0]
   1c342:	2b00      	cmp	r3, #0
   1c344:	d101      	bne.n	1c34a <xTaskIncrementTick+0xa6>
   1c346:	2301      	movs	r3, #1
   1c348:	e000      	b.n	1c34c <xTaskIncrementTick+0xa8>
   1c34a:	2300      	movs	r3, #0
   1c34c:	2b00      	cmp	r3, #0
   1c34e:	d004      	beq.n	1c35a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c350:	4b45      	ldr	r3, [pc, #276]	; (1c468 <xTaskIncrementTick+0x1c4>)
   1c352:	2201      	movs	r2, #1
   1c354:	4252      	negs	r2, r2
   1c356:	601a      	str	r2, [r3, #0]
					break;
   1c358:	e054      	b.n	1c404 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1c35a:	4b3f      	ldr	r3, [pc, #252]	; (1c458 <xTaskIncrementTick+0x1b4>)
   1c35c:	681b      	ldr	r3, [r3, #0]
   1c35e:	68db      	ldr	r3, [r3, #12]
   1c360:	68db      	ldr	r3, [r3, #12]
   1c362:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1c364:	68bb      	ldr	r3, [r7, #8]
   1c366:	685b      	ldr	r3, [r3, #4]
   1c368:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1c36a:	693a      	ldr	r2, [r7, #16]
   1c36c:	687b      	ldr	r3, [r7, #4]
   1c36e:	429a      	cmp	r2, r3
   1c370:	d203      	bcs.n	1c37a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1c372:	4b3d      	ldr	r3, [pc, #244]	; (1c468 <xTaskIncrementTick+0x1c4>)
   1c374:	687a      	ldr	r2, [r7, #4]
   1c376:	601a      	str	r2, [r3, #0]
						break;
   1c378:	e044      	b.n	1c404 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c37a:	68bb      	ldr	r3, [r7, #8]
   1c37c:	3304      	adds	r3, #4
   1c37e:	0018      	movs	r0, r3
   1c380:	4b3a      	ldr	r3, [pc, #232]	; (1c46c <xTaskIncrementTick+0x1c8>)
   1c382:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c384:	68bb      	ldr	r3, [r7, #8]
   1c386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c388:	2b00      	cmp	r3, #0
   1c38a:	d004      	beq.n	1c396 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c38c:	68bb      	ldr	r3, [r7, #8]
   1c38e:	3318      	adds	r3, #24
   1c390:	0018      	movs	r0, r3
   1c392:	4b36      	ldr	r3, [pc, #216]	; (1c46c <xTaskIncrementTick+0x1c8>)
   1c394:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1c396:	68bb      	ldr	r3, [r7, #8]
   1c398:	0018      	movs	r0, r3
   1c39a:	4b35      	ldr	r3, [pc, #212]	; (1c470 <xTaskIncrementTick+0x1cc>)
   1c39c:	4798      	blx	r3
   1c39e:	0003      	movs	r3, r0
   1c3a0:	001a      	movs	r2, r3
   1c3a2:	4b34      	ldr	r3, [pc, #208]	; (1c474 <xTaskIncrementTick+0x1d0>)
   1c3a4:	881b      	ldrh	r3, [r3, #0]
   1c3a6:	4013      	ands	r3, r2
   1c3a8:	b29b      	uxth	r3, r3
   1c3aa:	2b00      	cmp	r3, #0
   1c3ac:	d008      	beq.n	1c3c0 <xTaskIncrementTick+0x11c>
   1c3ae:	68bb      	ldr	r3, [r7, #8]
   1c3b0:	0018      	movs	r0, r3
   1c3b2:	4b31      	ldr	r3, [pc, #196]	; (1c478 <xTaskIncrementTick+0x1d4>)
   1c3b4:	4798      	blx	r3
   1c3b6:	0003      	movs	r3, r0
   1c3b8:	b2db      	uxtb	r3, r3
   1c3ba:	0018      	movs	r0, r3
   1c3bc:	4b2f      	ldr	r3, [pc, #188]	; (1c47c <xTaskIncrementTick+0x1d8>)
   1c3be:	4798      	blx	r3
   1c3c0:	68bb      	ldr	r3, [r7, #8]
   1c3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c3c4:	4b2e      	ldr	r3, [pc, #184]	; (1c480 <xTaskIncrementTick+0x1dc>)
   1c3c6:	681b      	ldr	r3, [r3, #0]
   1c3c8:	429a      	cmp	r2, r3
   1c3ca:	d903      	bls.n	1c3d4 <xTaskIncrementTick+0x130>
   1c3cc:	68bb      	ldr	r3, [r7, #8]
   1c3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c3d0:	4b2b      	ldr	r3, [pc, #172]	; (1c480 <xTaskIncrementTick+0x1dc>)
   1c3d2:	601a      	str	r2, [r3, #0]
   1c3d4:	68bb      	ldr	r3, [r7, #8]
   1c3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c3d8:	0013      	movs	r3, r2
   1c3da:	009b      	lsls	r3, r3, #2
   1c3dc:	189b      	adds	r3, r3, r2
   1c3de:	009b      	lsls	r3, r3, #2
   1c3e0:	4a28      	ldr	r2, [pc, #160]	; (1c484 <xTaskIncrementTick+0x1e0>)
   1c3e2:	189a      	adds	r2, r3, r2
   1c3e4:	68bb      	ldr	r3, [r7, #8]
   1c3e6:	3304      	adds	r3, #4
   1c3e8:	0019      	movs	r1, r3
   1c3ea:	0010      	movs	r0, r2
   1c3ec:	4b26      	ldr	r3, [pc, #152]	; (1c488 <xTaskIncrementTick+0x1e4>)
   1c3ee:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c3f0:	68bb      	ldr	r3, [r7, #8]
   1c3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c3f4:	4b25      	ldr	r3, [pc, #148]	; (1c48c <xTaskIncrementTick+0x1e8>)
   1c3f6:	681b      	ldr	r3, [r3, #0]
   1c3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c3fa:	429a      	cmp	r2, r3
   1c3fc:	d39e      	bcc.n	1c33c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1c3fe:	2301      	movs	r3, #1
   1c400:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c402:	e79b      	b.n	1c33c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1c404:	4b21      	ldr	r3, [pc, #132]	; (1c48c <xTaskIncrementTick+0x1e8>)
   1c406:	681b      	ldr	r3, [r3, #0]
   1c408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c40a:	491e      	ldr	r1, [pc, #120]	; (1c484 <xTaskIncrementTick+0x1e0>)
   1c40c:	0013      	movs	r3, r2
   1c40e:	009b      	lsls	r3, r3, #2
   1c410:	189b      	adds	r3, r3, r2
   1c412:	009b      	lsls	r3, r3, #2
   1c414:	585b      	ldr	r3, [r3, r1]
   1c416:	2b01      	cmp	r3, #1
   1c418:	d907      	bls.n	1c42a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1c41a:	2301      	movs	r3, #1
   1c41c:	617b      	str	r3, [r7, #20]
   1c41e:	e004      	b.n	1c42a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1c420:	4b08      	ldr	r3, [pc, #32]	; (1c444 <xTaskIncrementTick+0x1a0>)
   1c422:	681b      	ldr	r3, [r3, #0]
   1c424:	1c5a      	adds	r2, r3, #1
   1c426:	4b07      	ldr	r3, [pc, #28]	; (1c444 <xTaskIncrementTick+0x1a0>)
   1c428:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1c42a:	4b19      	ldr	r3, [pc, #100]	; (1c490 <xTaskIncrementTick+0x1ec>)
   1c42c:	681b      	ldr	r3, [r3, #0]
   1c42e:	2b00      	cmp	r3, #0
   1c430:	d001      	beq.n	1c436 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1c432:	2301      	movs	r3, #1
   1c434:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1c436:	697b      	ldr	r3, [r7, #20]
}
   1c438:	0018      	movs	r0, r3
   1c43a:	46bd      	mov	sp, r7
   1c43c:	b006      	add	sp, #24
   1c43e:	bd80      	pop	{r7, pc}
   1c440:	20004080 	.word	0x20004080
   1c444:	20004068 	.word	0x20004068
   1c448:	20000be0 	.word	0x20000be0
   1c44c:	00019ad5 	.word	0x00019ad5
   1c450:	2000405c 	.word	0x2000405c
   1c454:	00018b41 	.word	0x00018b41
   1c458:	20004010 	.word	0x20004010
   1c45c:	20004014 	.word	0x20004014
   1c460:	20004070 	.word	0x20004070
   1c464:	0001cb05 	.word	0x0001cb05
   1c468:	20004078 	.word	0x20004078
   1c46c:	00019cbb 	.word	0x00019cbb
   1c470:	00017e41 	.word	0x00017e41
   1c474:	20000130 	.word	0x20000130
   1c478:	00017e21 	.word	0x00017e21
   1c47c:	000185f1 	.word	0x000185f1
   1c480:	20004060 	.word	0x20004060
   1c484:	20003f84 	.word	0x20003f84
   1c488:	00019c0b 	.word	0x00019c0b
   1c48c:	20003f80 	.word	0x20003f80
   1c490:	2000406c 	.word	0x2000406c

0001c494 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1c494:	b580      	push	{r7, lr}
   1c496:	b082      	sub	sp, #8
   1c498:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1c49a:	4b3a      	ldr	r3, [pc, #232]	; (1c584 <vTaskSwitchContext+0xf0>)
   1c49c:	681b      	ldr	r3, [r3, #0]
   1c49e:	2b00      	cmp	r3, #0
   1c4a0:	d003      	beq.n	1c4aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1c4a2:	4b39      	ldr	r3, [pc, #228]	; (1c588 <vTaskSwitchContext+0xf4>)
   1c4a4:	2201      	movs	r2, #1
   1c4a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1c4a8:	e067      	b.n	1c57a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1c4aa:	4b37      	ldr	r3, [pc, #220]	; (1c588 <vTaskSwitchContext+0xf4>)
   1c4ac:	2200      	movs	r2, #0
   1c4ae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1c4b0:	4b36      	ldr	r3, [pc, #216]	; (1c58c <vTaskSwitchContext+0xf8>)
   1c4b2:	681b      	ldr	r3, [r3, #0]
   1c4b4:	681a      	ldr	r2, [r3, #0]
   1c4b6:	4b35      	ldr	r3, [pc, #212]	; (1c58c <vTaskSwitchContext+0xf8>)
   1c4b8:	681b      	ldr	r3, [r3, #0]
   1c4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c4bc:	429a      	cmp	r2, r3
   1c4be:	d808      	bhi.n	1c4d2 <vTaskSwitchContext+0x3e>
   1c4c0:	4b32      	ldr	r3, [pc, #200]	; (1c58c <vTaskSwitchContext+0xf8>)
   1c4c2:	681a      	ldr	r2, [r3, #0]
   1c4c4:	4b31      	ldr	r3, [pc, #196]	; (1c58c <vTaskSwitchContext+0xf8>)
   1c4c6:	681b      	ldr	r3, [r3, #0]
   1c4c8:	3334      	adds	r3, #52	; 0x34
   1c4ca:	0019      	movs	r1, r3
   1c4cc:	0010      	movs	r0, r2
   1c4ce:	4b30      	ldr	r3, [pc, #192]	; (1c590 <vTaskSwitchContext+0xfc>)
   1c4d0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1c4d2:	4b30      	ldr	r3, [pc, #192]	; (1c594 <vTaskSwitchContext+0x100>)
   1c4d4:	681b      	ldr	r3, [r3, #0]
   1c4d6:	607b      	str	r3, [r7, #4]
   1c4d8:	e007      	b.n	1c4ea <vTaskSwitchContext+0x56>
   1c4da:	687b      	ldr	r3, [r7, #4]
   1c4dc:	2b00      	cmp	r3, #0
   1c4de:	d101      	bne.n	1c4e4 <vTaskSwitchContext+0x50>
   1c4e0:	b672      	cpsid	i
   1c4e2:	e7fe      	b.n	1c4e2 <vTaskSwitchContext+0x4e>
   1c4e4:	687b      	ldr	r3, [r7, #4]
   1c4e6:	3b01      	subs	r3, #1
   1c4e8:	607b      	str	r3, [r7, #4]
   1c4ea:	492b      	ldr	r1, [pc, #172]	; (1c598 <vTaskSwitchContext+0x104>)
   1c4ec:	687a      	ldr	r2, [r7, #4]
   1c4ee:	0013      	movs	r3, r2
   1c4f0:	009b      	lsls	r3, r3, #2
   1c4f2:	189b      	adds	r3, r3, r2
   1c4f4:	009b      	lsls	r3, r3, #2
   1c4f6:	585b      	ldr	r3, [r3, r1]
   1c4f8:	2b00      	cmp	r3, #0
   1c4fa:	d0ee      	beq.n	1c4da <vTaskSwitchContext+0x46>
   1c4fc:	687a      	ldr	r2, [r7, #4]
   1c4fe:	0013      	movs	r3, r2
   1c500:	009b      	lsls	r3, r3, #2
   1c502:	189b      	adds	r3, r3, r2
   1c504:	009b      	lsls	r3, r3, #2
   1c506:	4a24      	ldr	r2, [pc, #144]	; (1c598 <vTaskSwitchContext+0x104>)
   1c508:	189b      	adds	r3, r3, r2
   1c50a:	603b      	str	r3, [r7, #0]
   1c50c:	683b      	ldr	r3, [r7, #0]
   1c50e:	685b      	ldr	r3, [r3, #4]
   1c510:	685a      	ldr	r2, [r3, #4]
   1c512:	683b      	ldr	r3, [r7, #0]
   1c514:	605a      	str	r2, [r3, #4]
   1c516:	683b      	ldr	r3, [r7, #0]
   1c518:	685a      	ldr	r2, [r3, #4]
   1c51a:	683b      	ldr	r3, [r7, #0]
   1c51c:	3308      	adds	r3, #8
   1c51e:	429a      	cmp	r2, r3
   1c520:	d104      	bne.n	1c52c <vTaskSwitchContext+0x98>
   1c522:	683b      	ldr	r3, [r7, #0]
   1c524:	685b      	ldr	r3, [r3, #4]
   1c526:	685a      	ldr	r2, [r3, #4]
   1c528:	683b      	ldr	r3, [r7, #0]
   1c52a:	605a      	str	r2, [r3, #4]
   1c52c:	683b      	ldr	r3, [r7, #0]
   1c52e:	685b      	ldr	r3, [r3, #4]
   1c530:	68da      	ldr	r2, [r3, #12]
   1c532:	4b16      	ldr	r3, [pc, #88]	; (1c58c <vTaskSwitchContext+0xf8>)
   1c534:	601a      	str	r2, [r3, #0]
   1c536:	4b17      	ldr	r3, [pc, #92]	; (1c594 <vTaskSwitchContext+0x100>)
   1c538:	687a      	ldr	r2, [r7, #4]
   1c53a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1c53c:	4b17      	ldr	r3, [pc, #92]	; (1c59c <vTaskSwitchContext+0x108>)
   1c53e:	2201      	movs	r2, #1
   1c540:	601a      	str	r2, [r3, #0]
   1c542:	4b17      	ldr	r3, [pc, #92]	; (1c5a0 <vTaskSwitchContext+0x10c>)
   1c544:	4798      	blx	r3
   1c546:	0003      	movs	r3, r0
   1c548:	0018      	movs	r0, r3
   1c54a:	4b16      	ldr	r3, [pc, #88]	; (1c5a4 <vTaskSwitchContext+0x110>)
   1c54c:	4798      	blx	r3
   1c54e:	0003      	movs	r3, r0
   1c550:	001a      	movs	r2, r3
   1c552:	4b15      	ldr	r3, [pc, #84]	; (1c5a8 <vTaskSwitchContext+0x114>)
   1c554:	881b      	ldrh	r3, [r3, #0]
   1c556:	4013      	ands	r3, r2
   1c558:	b29b      	uxth	r3, r3
   1c55a:	2b00      	cmp	r3, #0
   1c55c:	d00a      	beq.n	1c574 <vTaskSwitchContext+0xe0>
   1c55e:	4b10      	ldr	r3, [pc, #64]	; (1c5a0 <vTaskSwitchContext+0x10c>)
   1c560:	4798      	blx	r3
   1c562:	0003      	movs	r3, r0
   1c564:	0018      	movs	r0, r3
   1c566:	4b11      	ldr	r3, [pc, #68]	; (1c5ac <vTaskSwitchContext+0x118>)
   1c568:	4798      	blx	r3
   1c56a:	0003      	movs	r3, r0
   1c56c:	b2db      	uxtb	r3, r3
   1c56e:	0018      	movs	r0, r3
   1c570:	4b0f      	ldr	r3, [pc, #60]	; (1c5b0 <vTaskSwitchContext+0x11c>)
   1c572:	4798      	blx	r3
   1c574:	4b09      	ldr	r3, [pc, #36]	; (1c59c <vTaskSwitchContext+0x108>)
   1c576:	2202      	movs	r2, #2
   1c578:	601a      	str	r2, [r3, #0]
}
   1c57a:	46c0      	nop			; (mov r8, r8)
   1c57c:	46bd      	mov	sp, r7
   1c57e:	b002      	add	sp, #8
   1c580:	bd80      	pop	{r7, pc}
   1c582:	46c0      	nop			; (mov r8, r8)
   1c584:	20004080 	.word	0x20004080
   1c588:	2000406c 	.word	0x2000406c
   1c58c:	20003f80 	.word	0x20003f80
   1c590:	000326ed 	.word	0x000326ed
   1c594:	20004060 	.word	0x20004060
   1c598:	20003f84 	.word	0x20003f84
   1c59c:	20000bec 	.word	0x20000bec
   1c5a0:	000180dd 	.word	0x000180dd
   1c5a4:	00017e41 	.word	0x00017e41
   1c5a8:	20000130 	.word	0x20000130
   1c5ac:	00017e21 	.word	0x00017e21
   1c5b0:	00018c3d 	.word	0x00018c3d

0001c5b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1c5b4:	b580      	push	{r7, lr}
   1c5b6:	b082      	sub	sp, #8
   1c5b8:	af00      	add	r7, sp, #0
   1c5ba:	6078      	str	r0, [r7, #4]
   1c5bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1c5be:	687b      	ldr	r3, [r7, #4]
   1c5c0:	2b00      	cmp	r3, #0
   1c5c2:	d101      	bne.n	1c5c8 <vTaskPlaceOnEventList+0x14>
   1c5c4:	b672      	cpsid	i
   1c5c6:	e7fe      	b.n	1c5c6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c5c8:	4b08      	ldr	r3, [pc, #32]	; (1c5ec <vTaskPlaceOnEventList+0x38>)
   1c5ca:	681b      	ldr	r3, [r3, #0]
   1c5cc:	3318      	adds	r3, #24
   1c5ce:	001a      	movs	r2, r3
   1c5d0:	687b      	ldr	r3, [r7, #4]
   1c5d2:	0011      	movs	r1, r2
   1c5d4:	0018      	movs	r0, r3
   1c5d6:	4b06      	ldr	r3, [pc, #24]	; (1c5f0 <vTaskPlaceOnEventList+0x3c>)
   1c5d8:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1c5da:	683b      	ldr	r3, [r7, #0]
   1c5dc:	2101      	movs	r1, #1
   1c5de:	0018      	movs	r0, r3
   1c5e0:	4b04      	ldr	r3, [pc, #16]	; (1c5f4 <vTaskPlaceOnEventList+0x40>)
   1c5e2:	4798      	blx	r3
}
   1c5e4:	46c0      	nop			; (mov r8, r8)
   1c5e6:	46bd      	mov	sp, r7
   1c5e8:	b002      	add	sp, #8
   1c5ea:	bd80      	pop	{r7, pc}
   1c5ec:	20003f80 	.word	0x20003f80
   1c5f0:	00019c4f 	.word	0x00019c4f
   1c5f4:	0001d059 	.word	0x0001d059

0001c5f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c5f8:	b580      	push	{r7, lr}
   1c5fa:	b084      	sub	sp, #16
   1c5fc:	af00      	add	r7, sp, #0
   1c5fe:	60f8      	str	r0, [r7, #12]
   1c600:	60b9      	str	r1, [r7, #8]
   1c602:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1c604:	68fb      	ldr	r3, [r7, #12]
   1c606:	2b00      	cmp	r3, #0
   1c608:	d101      	bne.n	1c60e <vTaskPlaceOnEventListRestricted+0x16>
   1c60a:	b672      	cpsid	i
   1c60c:	e7fe      	b.n	1c60c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c60e:	4b28      	ldr	r3, [pc, #160]	; (1c6b0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c610:	681b      	ldr	r3, [r3, #0]
   1c612:	3318      	adds	r3, #24
   1c614:	001a      	movs	r2, r3
   1c616:	68fb      	ldr	r3, [r7, #12]
   1c618:	0011      	movs	r1, r2
   1c61a:	0018      	movs	r0, r3
   1c61c:	4b25      	ldr	r3, [pc, #148]	; (1c6b4 <vTaskPlaceOnEventListRestricted+0xbc>)
   1c61e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1c620:	687b      	ldr	r3, [r7, #4]
   1c622:	2b00      	cmp	r3, #0
   1c624:	d002      	beq.n	1c62c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1c626:	2301      	movs	r3, #1
   1c628:	425b      	negs	r3, r3
   1c62a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1c62c:	4b20      	ldr	r3, [pc, #128]	; (1c6b0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c62e:	681b      	ldr	r3, [r3, #0]
   1c630:	0018      	movs	r0, r3
   1c632:	4b21      	ldr	r3, [pc, #132]	; (1c6b8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1c634:	4798      	blx	r3
   1c636:	0003      	movs	r3, r0
   1c638:	001a      	movs	r2, r3
   1c63a:	4b20      	ldr	r3, [pc, #128]	; (1c6bc <vTaskPlaceOnEventListRestricted+0xc4>)
   1c63c:	881b      	ldrh	r3, [r3, #0]
   1c63e:	4013      	ands	r3, r2
   1c640:	b29b      	uxth	r3, r3
   1c642:	2b00      	cmp	r3, #0
   1c644:	d011      	beq.n	1c66a <vTaskPlaceOnEventListRestricted+0x72>
   1c646:	4b1e      	ldr	r3, [pc, #120]	; (1c6c0 <vTaskPlaceOnEventListRestricted+0xc8>)
   1c648:	681a      	ldr	r2, [r3, #0]
   1c64a:	68bb      	ldr	r3, [r7, #8]
   1c64c:	18d3      	adds	r3, r2, r3
   1c64e:	0019      	movs	r1, r3
   1c650:	2088      	movs	r0, #136	; 0x88
   1c652:	4b1c      	ldr	r3, [pc, #112]	; (1c6c4 <vTaskPlaceOnEventListRestricted+0xcc>)
   1c654:	4798      	blx	r3
   1c656:	4b16      	ldr	r3, [pc, #88]	; (1c6b0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c658:	681b      	ldr	r3, [r3, #0]
   1c65a:	0018      	movs	r0, r3
   1c65c:	4b1a      	ldr	r3, [pc, #104]	; (1c6c8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1c65e:	4798      	blx	r3
   1c660:	0003      	movs	r3, r0
   1c662:	b2db      	uxtb	r3, r3
   1c664:	0018      	movs	r0, r3
   1c666:	4b19      	ldr	r3, [pc, #100]	; (1c6cc <vTaskPlaceOnEventListRestricted+0xd4>)
   1c668:	4798      	blx	r3
   1c66a:	4b19      	ldr	r3, [pc, #100]	; (1c6d0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1c66c:	4798      	blx	r3
   1c66e:	0003      	movs	r3, r0
   1c670:	0018      	movs	r0, r3
   1c672:	4b11      	ldr	r3, [pc, #68]	; (1c6b8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1c674:	4798      	blx	r3
   1c676:	0003      	movs	r3, r0
   1c678:	001a      	movs	r2, r3
   1c67a:	4b10      	ldr	r3, [pc, #64]	; (1c6bc <vTaskPlaceOnEventListRestricted+0xc4>)
   1c67c:	881b      	ldrh	r3, [r3, #0]
   1c67e:	4013      	ands	r3, r2
   1c680:	b29b      	uxth	r3, r3
   1c682:	2b00      	cmp	r3, #0
   1c684:	d00a      	beq.n	1c69c <vTaskPlaceOnEventListRestricted+0xa4>
   1c686:	4b12      	ldr	r3, [pc, #72]	; (1c6d0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1c688:	4798      	blx	r3
   1c68a:	0003      	movs	r3, r0
   1c68c:	0018      	movs	r0, r3
   1c68e:	4b0e      	ldr	r3, [pc, #56]	; (1c6c8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1c690:	4798      	blx	r3
   1c692:	0003      	movs	r3, r0
   1c694:	b2db      	uxtb	r3, r3
   1c696:	0018      	movs	r0, r3
   1c698:	4b0c      	ldr	r3, [pc, #48]	; (1c6cc <vTaskPlaceOnEventListRestricted+0xd4>)
   1c69a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1c69c:	687a      	ldr	r2, [r7, #4]
   1c69e:	68bb      	ldr	r3, [r7, #8]
   1c6a0:	0011      	movs	r1, r2
   1c6a2:	0018      	movs	r0, r3
   1c6a4:	4b0b      	ldr	r3, [pc, #44]	; (1c6d4 <vTaskPlaceOnEventListRestricted+0xdc>)
   1c6a6:	4798      	blx	r3
	}
   1c6a8:	46c0      	nop			; (mov r8, r8)
   1c6aa:	46bd      	mov	sp, r7
   1c6ac:	b004      	add	sp, #16
   1c6ae:	bd80      	pop	{r7, pc}
   1c6b0:	20003f80 	.word	0x20003f80
   1c6b4:	00019c0b 	.word	0x00019c0b
   1c6b8:	00017e41 	.word	0x00017e41
   1c6bc:	20000130 	.word	0x20000130
   1c6c0:	2000405c 	.word	0x2000405c
   1c6c4:	00018b41 	.word	0x00018b41
   1c6c8:	00017e21 	.word	0x00017e21
   1c6cc:	00018fd1 	.word	0x00018fd1
   1c6d0:	000180dd 	.word	0x000180dd
   1c6d4:	0001d059 	.word	0x0001d059

0001c6d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1c6d8:	b580      	push	{r7, lr}
   1c6da:	b084      	sub	sp, #16
   1c6dc:	af00      	add	r7, sp, #0
   1c6de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1c6e0:	687b      	ldr	r3, [r7, #4]
   1c6e2:	68db      	ldr	r3, [r3, #12]
   1c6e4:	68db      	ldr	r3, [r3, #12]
   1c6e6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1c6e8:	68bb      	ldr	r3, [r7, #8]
   1c6ea:	2b00      	cmp	r3, #0
   1c6ec:	d101      	bne.n	1c6f2 <xTaskRemoveFromEventList+0x1a>
   1c6ee:	b672      	cpsid	i
   1c6f0:	e7fe      	b.n	1c6f0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1c6f2:	68bb      	ldr	r3, [r7, #8]
   1c6f4:	3318      	adds	r3, #24
   1c6f6:	0018      	movs	r0, r3
   1c6f8:	4b2a      	ldr	r3, [pc, #168]	; (1c7a4 <xTaskRemoveFromEventList+0xcc>)
   1c6fa:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c6fc:	4b2a      	ldr	r3, [pc, #168]	; (1c7a8 <xTaskRemoveFromEventList+0xd0>)
   1c6fe:	681b      	ldr	r3, [r3, #0]
   1c700:	2b00      	cmp	r3, #0
   1c702:	d132      	bne.n	1c76a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1c704:	68bb      	ldr	r3, [r7, #8]
   1c706:	3304      	adds	r3, #4
   1c708:	0018      	movs	r0, r3
   1c70a:	4b26      	ldr	r3, [pc, #152]	; (1c7a4 <xTaskRemoveFromEventList+0xcc>)
   1c70c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1c70e:	68bb      	ldr	r3, [r7, #8]
   1c710:	0018      	movs	r0, r3
   1c712:	4b26      	ldr	r3, [pc, #152]	; (1c7ac <xTaskRemoveFromEventList+0xd4>)
   1c714:	4798      	blx	r3
   1c716:	0003      	movs	r3, r0
   1c718:	001a      	movs	r2, r3
   1c71a:	4b25      	ldr	r3, [pc, #148]	; (1c7b0 <xTaskRemoveFromEventList+0xd8>)
   1c71c:	881b      	ldrh	r3, [r3, #0]
   1c71e:	4013      	ands	r3, r2
   1c720:	b29b      	uxth	r3, r3
   1c722:	2b00      	cmp	r3, #0
   1c724:	d008      	beq.n	1c738 <xTaskRemoveFromEventList+0x60>
   1c726:	68bb      	ldr	r3, [r7, #8]
   1c728:	0018      	movs	r0, r3
   1c72a:	4b22      	ldr	r3, [pc, #136]	; (1c7b4 <xTaskRemoveFromEventList+0xdc>)
   1c72c:	4798      	blx	r3
   1c72e:	0003      	movs	r3, r0
   1c730:	b2db      	uxtb	r3, r3
   1c732:	0018      	movs	r0, r3
   1c734:	4b20      	ldr	r3, [pc, #128]	; (1c7b8 <xTaskRemoveFromEventList+0xe0>)
   1c736:	4798      	blx	r3
   1c738:	68bb      	ldr	r3, [r7, #8]
   1c73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c73c:	4b1f      	ldr	r3, [pc, #124]	; (1c7bc <xTaskRemoveFromEventList+0xe4>)
   1c73e:	681b      	ldr	r3, [r3, #0]
   1c740:	429a      	cmp	r2, r3
   1c742:	d903      	bls.n	1c74c <xTaskRemoveFromEventList+0x74>
   1c744:	68bb      	ldr	r3, [r7, #8]
   1c746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c748:	4b1c      	ldr	r3, [pc, #112]	; (1c7bc <xTaskRemoveFromEventList+0xe4>)
   1c74a:	601a      	str	r2, [r3, #0]
   1c74c:	68bb      	ldr	r3, [r7, #8]
   1c74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c750:	0013      	movs	r3, r2
   1c752:	009b      	lsls	r3, r3, #2
   1c754:	189b      	adds	r3, r3, r2
   1c756:	009b      	lsls	r3, r3, #2
   1c758:	4a19      	ldr	r2, [pc, #100]	; (1c7c0 <xTaskRemoveFromEventList+0xe8>)
   1c75a:	189a      	adds	r2, r3, r2
   1c75c:	68bb      	ldr	r3, [r7, #8]
   1c75e:	3304      	adds	r3, #4
   1c760:	0019      	movs	r1, r3
   1c762:	0010      	movs	r0, r2
   1c764:	4b17      	ldr	r3, [pc, #92]	; (1c7c4 <xTaskRemoveFromEventList+0xec>)
   1c766:	4798      	blx	r3
   1c768:	e007      	b.n	1c77a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1c76a:	68bb      	ldr	r3, [r7, #8]
   1c76c:	3318      	adds	r3, #24
   1c76e:	001a      	movs	r2, r3
   1c770:	4b15      	ldr	r3, [pc, #84]	; (1c7c8 <xTaskRemoveFromEventList+0xf0>)
   1c772:	0011      	movs	r1, r2
   1c774:	0018      	movs	r0, r3
   1c776:	4b13      	ldr	r3, [pc, #76]	; (1c7c4 <xTaskRemoveFromEventList+0xec>)
   1c778:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1c77a:	68bb      	ldr	r3, [r7, #8]
   1c77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c77e:	4b13      	ldr	r3, [pc, #76]	; (1c7cc <xTaskRemoveFromEventList+0xf4>)
   1c780:	681b      	ldr	r3, [r3, #0]
   1c782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c784:	429a      	cmp	r2, r3
   1c786:	d905      	bls.n	1c794 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1c788:	2301      	movs	r3, #1
   1c78a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1c78c:	4b10      	ldr	r3, [pc, #64]	; (1c7d0 <xTaskRemoveFromEventList+0xf8>)
   1c78e:	2201      	movs	r2, #1
   1c790:	601a      	str	r2, [r3, #0]
   1c792:	e001      	b.n	1c798 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1c794:	2300      	movs	r3, #0
   1c796:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1c798:	68fb      	ldr	r3, [r7, #12]
}
   1c79a:	0018      	movs	r0, r3
   1c79c:	46bd      	mov	sp, r7
   1c79e:	b004      	add	sp, #16
   1c7a0:	bd80      	pop	{r7, pc}
   1c7a2:	46c0      	nop			; (mov r8, r8)
   1c7a4:	00019cbb 	.word	0x00019cbb
   1c7a8:	20004080 	.word	0x20004080
   1c7ac:	00017e41 	.word	0x00017e41
   1c7b0:	20000130 	.word	0x20000130
   1c7b4:	00017e21 	.word	0x00017e21
   1c7b8:	000185f1 	.word	0x000185f1
   1c7bc:	20004060 	.word	0x20004060
   1c7c0:	20003f84 	.word	0x20003f84
   1c7c4:	00019c0b 	.word	0x00019c0b
   1c7c8:	20004018 	.word	0x20004018
   1c7cc:	20003f80 	.word	0x20003f80
   1c7d0:	2000406c 	.word	0x2000406c

0001c7d4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1c7d4:	b580      	push	{r7, lr}
   1c7d6:	b082      	sub	sp, #8
   1c7d8:	af00      	add	r7, sp, #0
   1c7da:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1c7dc:	687b      	ldr	r3, [r7, #4]
   1c7de:	2b00      	cmp	r3, #0
   1c7e0:	d101      	bne.n	1c7e6 <vTaskSetTimeOutState+0x12>
   1c7e2:	b672      	cpsid	i
   1c7e4:	e7fe      	b.n	1c7e4 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1c7e6:	4b08      	ldr	r3, [pc, #32]	; (1c808 <vTaskSetTimeOutState+0x34>)
   1c7e8:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1c7ea:	4b08      	ldr	r3, [pc, #32]	; (1c80c <vTaskSetTimeOutState+0x38>)
   1c7ec:	681a      	ldr	r2, [r3, #0]
   1c7ee:	687b      	ldr	r3, [r7, #4]
   1c7f0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1c7f2:	4b07      	ldr	r3, [pc, #28]	; (1c810 <vTaskSetTimeOutState+0x3c>)
   1c7f4:	681a      	ldr	r2, [r3, #0]
   1c7f6:	687b      	ldr	r3, [r7, #4]
   1c7f8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1c7fa:	4b06      	ldr	r3, [pc, #24]	; (1c814 <vTaskSetTimeOutState+0x40>)
   1c7fc:	4798      	blx	r3
}
   1c7fe:	46c0      	nop			; (mov r8, r8)
   1c800:	46bd      	mov	sp, r7
   1c802:	b002      	add	sp, #8
   1c804:	bd80      	pop	{r7, pc}
   1c806:	46c0      	nop			; (mov r8, r8)
   1c808:	00019e49 	.word	0x00019e49
   1c80c:	20004070 	.word	0x20004070
   1c810:	2000405c 	.word	0x2000405c
   1c814:	00019e6d 	.word	0x00019e6d

0001c818 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1c818:	b580      	push	{r7, lr}
   1c81a:	b082      	sub	sp, #8
   1c81c:	af00      	add	r7, sp, #0
   1c81e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1c820:	4b05      	ldr	r3, [pc, #20]	; (1c838 <vTaskInternalSetTimeOutState+0x20>)
   1c822:	681a      	ldr	r2, [r3, #0]
   1c824:	687b      	ldr	r3, [r7, #4]
   1c826:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1c828:	4b04      	ldr	r3, [pc, #16]	; (1c83c <vTaskInternalSetTimeOutState+0x24>)
   1c82a:	681a      	ldr	r2, [r3, #0]
   1c82c:	687b      	ldr	r3, [r7, #4]
   1c82e:	605a      	str	r2, [r3, #4]
}
   1c830:	46c0      	nop			; (mov r8, r8)
   1c832:	46bd      	mov	sp, r7
   1c834:	b002      	add	sp, #8
   1c836:	bd80      	pop	{r7, pc}
   1c838:	20004070 	.word	0x20004070
   1c83c:	2000405c 	.word	0x2000405c

0001c840 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1c840:	b580      	push	{r7, lr}
   1c842:	b086      	sub	sp, #24
   1c844:	af00      	add	r7, sp, #0
   1c846:	6078      	str	r0, [r7, #4]
   1c848:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1c84a:	687b      	ldr	r3, [r7, #4]
   1c84c:	2b00      	cmp	r3, #0
   1c84e:	d101      	bne.n	1c854 <xTaskCheckForTimeOut+0x14>
   1c850:	b672      	cpsid	i
   1c852:	e7fe      	b.n	1c852 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1c854:	683b      	ldr	r3, [r7, #0]
   1c856:	2b00      	cmp	r3, #0
   1c858:	d101      	bne.n	1c85e <xTaskCheckForTimeOut+0x1e>
   1c85a:	b672      	cpsid	i
   1c85c:	e7fe      	b.n	1c85c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1c85e:	4b1e      	ldr	r3, [pc, #120]	; (1c8d8 <xTaskCheckForTimeOut+0x98>)
   1c860:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1c862:	4b1e      	ldr	r3, [pc, #120]	; (1c8dc <xTaskCheckForTimeOut+0x9c>)
   1c864:	681b      	ldr	r3, [r3, #0]
   1c866:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1c868:	687b      	ldr	r3, [r7, #4]
   1c86a:	685b      	ldr	r3, [r3, #4]
   1c86c:	693a      	ldr	r2, [r7, #16]
   1c86e:	1ad3      	subs	r3, r2, r3
   1c870:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1c872:	683b      	ldr	r3, [r7, #0]
   1c874:	681b      	ldr	r3, [r3, #0]
   1c876:	3301      	adds	r3, #1
   1c878:	d102      	bne.n	1c880 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1c87a:	2300      	movs	r3, #0
   1c87c:	617b      	str	r3, [r7, #20]
   1c87e:	e024      	b.n	1c8ca <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1c880:	687b      	ldr	r3, [r7, #4]
   1c882:	681a      	ldr	r2, [r3, #0]
   1c884:	4b16      	ldr	r3, [pc, #88]	; (1c8e0 <xTaskCheckForTimeOut+0xa0>)
   1c886:	681b      	ldr	r3, [r3, #0]
   1c888:	429a      	cmp	r2, r3
   1c88a:	d007      	beq.n	1c89c <xTaskCheckForTimeOut+0x5c>
   1c88c:	687b      	ldr	r3, [r7, #4]
   1c88e:	685a      	ldr	r2, [r3, #4]
   1c890:	693b      	ldr	r3, [r7, #16]
   1c892:	429a      	cmp	r2, r3
   1c894:	d802      	bhi.n	1c89c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1c896:	2301      	movs	r3, #1
   1c898:	617b      	str	r3, [r7, #20]
   1c89a:	e016      	b.n	1c8ca <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1c89c:	683b      	ldr	r3, [r7, #0]
   1c89e:	681a      	ldr	r2, [r3, #0]
   1c8a0:	68fb      	ldr	r3, [r7, #12]
   1c8a2:	429a      	cmp	r2, r3
   1c8a4:	d90c      	bls.n	1c8c0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1c8a6:	683b      	ldr	r3, [r7, #0]
   1c8a8:	681a      	ldr	r2, [r3, #0]
   1c8aa:	68fb      	ldr	r3, [r7, #12]
   1c8ac:	1ad2      	subs	r2, r2, r3
   1c8ae:	683b      	ldr	r3, [r7, #0]
   1c8b0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1c8b2:	687b      	ldr	r3, [r7, #4]
   1c8b4:	0018      	movs	r0, r3
   1c8b6:	4b0b      	ldr	r3, [pc, #44]	; (1c8e4 <xTaskCheckForTimeOut+0xa4>)
   1c8b8:	4798      	blx	r3
			xReturn = pdFALSE;
   1c8ba:	2300      	movs	r3, #0
   1c8bc:	617b      	str	r3, [r7, #20]
   1c8be:	e004      	b.n	1c8ca <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1c8c0:	683b      	ldr	r3, [r7, #0]
   1c8c2:	2200      	movs	r2, #0
   1c8c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1c8c6:	2301      	movs	r3, #1
   1c8c8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1c8ca:	4b07      	ldr	r3, [pc, #28]	; (1c8e8 <xTaskCheckForTimeOut+0xa8>)
   1c8cc:	4798      	blx	r3

	return xReturn;
   1c8ce:	697b      	ldr	r3, [r7, #20]
}
   1c8d0:	0018      	movs	r0, r3
   1c8d2:	46bd      	mov	sp, r7
   1c8d4:	b006      	add	sp, #24
   1c8d6:	bd80      	pop	{r7, pc}
   1c8d8:	00019e49 	.word	0x00019e49
   1c8dc:	2000405c 	.word	0x2000405c
   1c8e0:	20004070 	.word	0x20004070
   1c8e4:	0001c819 	.word	0x0001c819
   1c8e8:	00019e6d 	.word	0x00019e6d

0001c8ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1c8ec:	b580      	push	{r7, lr}
   1c8ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1c8f0:	4b02      	ldr	r3, [pc, #8]	; (1c8fc <vTaskMissedYield+0x10>)
   1c8f2:	2201      	movs	r2, #1
   1c8f4:	601a      	str	r2, [r3, #0]
}
   1c8f6:	46c0      	nop			; (mov r8, r8)
   1c8f8:	46bd      	mov	sp, r7
   1c8fa:	bd80      	pop	{r7, pc}
   1c8fc:	2000406c 	.word	0x2000406c

0001c900 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1c900:	b580      	push	{r7, lr}
   1c902:	b084      	sub	sp, #16
   1c904:	af00      	add	r7, sp, #0
   1c906:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1c908:	687b      	ldr	r3, [r7, #4]
   1c90a:	2b00      	cmp	r3, #0
   1c90c:	d005      	beq.n	1c91a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1c90e:	687b      	ldr	r3, [r7, #4]
   1c910:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1c912:	68bb      	ldr	r3, [r7, #8]
   1c914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c916:	60fb      	str	r3, [r7, #12]
   1c918:	e001      	b.n	1c91e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1c91a:	2300      	movs	r3, #0
   1c91c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1c91e:	68fb      	ldr	r3, [r7, #12]
	}
   1c920:	0018      	movs	r0, r3
   1c922:	46bd      	mov	sp, r7
   1c924:	b004      	add	sp, #16
   1c926:	bd80      	pop	{r7, pc}

0001c928 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1c928:	b580      	push	{r7, lr}
   1c92a:	b084      	sub	sp, #16
   1c92c:	af00      	add	r7, sp, #0
   1c92e:	6078      	str	r0, [r7, #4]
   1c930:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1c932:	687b      	ldr	r3, [r7, #4]
   1c934:	2b00      	cmp	r3, #0
   1c936:	d004      	beq.n	1c942 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1c938:	687b      	ldr	r3, [r7, #4]
   1c93a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1c93c:	68fb      	ldr	r3, [r7, #12]
   1c93e:	683a      	ldr	r2, [r7, #0]
   1c940:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1c942:	46c0      	nop			; (mov r8, r8)
   1c944:	46bd      	mov	sp, r7
   1c946:	b004      	add	sp, #16
   1c948:	bd80      	pop	{r7, pc}
	...

0001c94c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1c94c:	b580      	push	{r7, lr}
   1c94e:	b082      	sub	sp, #8
   1c950:	af00      	add	r7, sp, #0
   1c952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1c954:	4b04      	ldr	r3, [pc, #16]	; (1c968 <prvIdleTask+0x1c>)
   1c956:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1c958:	4b04      	ldr	r3, [pc, #16]	; (1c96c <prvIdleTask+0x20>)
   1c95a:	681b      	ldr	r3, [r3, #0]
   1c95c:	2b01      	cmp	r3, #1
   1c95e:	d9f9      	bls.n	1c954 <prvIdleTask+0x8>
			{
				taskYIELD();
   1c960:	4b03      	ldr	r3, [pc, #12]	; (1c970 <prvIdleTask+0x24>)
   1c962:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1c964:	e7f6      	b.n	1c954 <prvIdleTask+0x8>
   1c966:	46c0      	nop			; (mov r8, r8)
   1c968:	0001ca01 	.word	0x0001ca01
   1c96c:	20003f84 	.word	0x20003f84
   1c970:	00019e31 	.word	0x00019e31

0001c974 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1c974:	b580      	push	{r7, lr}
   1c976:	b082      	sub	sp, #8
   1c978:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1c97a:	2300      	movs	r3, #0
   1c97c:	607b      	str	r3, [r7, #4]
   1c97e:	e00c      	b.n	1c99a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1c980:	687a      	ldr	r2, [r7, #4]
   1c982:	0013      	movs	r3, r2
   1c984:	009b      	lsls	r3, r3, #2
   1c986:	189b      	adds	r3, r3, r2
   1c988:	009b      	lsls	r3, r3, #2
   1c98a:	4a14      	ldr	r2, [pc, #80]	; (1c9dc <prvInitialiseTaskLists+0x68>)
   1c98c:	189b      	adds	r3, r3, r2
   1c98e:	0018      	movs	r0, r3
   1c990:	4b13      	ldr	r3, [pc, #76]	; (1c9e0 <prvInitialiseTaskLists+0x6c>)
   1c992:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1c994:	687b      	ldr	r3, [r7, #4]
   1c996:	3301      	adds	r3, #1
   1c998:	607b      	str	r3, [r7, #4]
   1c99a:	687b      	ldr	r3, [r7, #4]
   1c99c:	2b04      	cmp	r3, #4
   1c99e:	d9ef      	bls.n	1c980 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1c9a0:	4b10      	ldr	r3, [pc, #64]	; (1c9e4 <prvInitialiseTaskLists+0x70>)
   1c9a2:	0018      	movs	r0, r3
   1c9a4:	4b0e      	ldr	r3, [pc, #56]	; (1c9e0 <prvInitialiseTaskLists+0x6c>)
   1c9a6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1c9a8:	4b0f      	ldr	r3, [pc, #60]	; (1c9e8 <prvInitialiseTaskLists+0x74>)
   1c9aa:	0018      	movs	r0, r3
   1c9ac:	4b0c      	ldr	r3, [pc, #48]	; (1c9e0 <prvInitialiseTaskLists+0x6c>)
   1c9ae:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1c9b0:	4b0e      	ldr	r3, [pc, #56]	; (1c9ec <prvInitialiseTaskLists+0x78>)
   1c9b2:	0018      	movs	r0, r3
   1c9b4:	4b0a      	ldr	r3, [pc, #40]	; (1c9e0 <prvInitialiseTaskLists+0x6c>)
   1c9b6:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1c9b8:	4b0d      	ldr	r3, [pc, #52]	; (1c9f0 <prvInitialiseTaskLists+0x7c>)
   1c9ba:	0018      	movs	r0, r3
   1c9bc:	4b08      	ldr	r3, [pc, #32]	; (1c9e0 <prvInitialiseTaskLists+0x6c>)
   1c9be:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1c9c0:	4b0c      	ldr	r3, [pc, #48]	; (1c9f4 <prvInitialiseTaskLists+0x80>)
   1c9c2:	0018      	movs	r0, r3
   1c9c4:	4b06      	ldr	r3, [pc, #24]	; (1c9e0 <prvInitialiseTaskLists+0x6c>)
   1c9c6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1c9c8:	4b0b      	ldr	r3, [pc, #44]	; (1c9f8 <prvInitialiseTaskLists+0x84>)
   1c9ca:	4a06      	ldr	r2, [pc, #24]	; (1c9e4 <prvInitialiseTaskLists+0x70>)
   1c9cc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1c9ce:	4b0b      	ldr	r3, [pc, #44]	; (1c9fc <prvInitialiseTaskLists+0x88>)
   1c9d0:	4a05      	ldr	r2, [pc, #20]	; (1c9e8 <prvInitialiseTaskLists+0x74>)
   1c9d2:	601a      	str	r2, [r3, #0]
}
   1c9d4:	46c0      	nop			; (mov r8, r8)
   1c9d6:	46bd      	mov	sp, r7
   1c9d8:	b002      	add	sp, #8
   1c9da:	bd80      	pop	{r7, pc}
   1c9dc:	20003f84 	.word	0x20003f84
   1c9e0:	00019bb9 	.word	0x00019bb9
   1c9e4:	20003fe8 	.word	0x20003fe8
   1c9e8:	20003ffc 	.word	0x20003ffc
   1c9ec:	20004018 	.word	0x20004018
   1c9f0:	2000402c 	.word	0x2000402c
   1c9f4:	20004044 	.word	0x20004044
   1c9f8:	20004010 	.word	0x20004010
   1c9fc:	20004014 	.word	0x20004014

0001ca00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1ca00:	b580      	push	{r7, lr}
   1ca02:	b082      	sub	sp, #8
   1ca04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1ca06:	e01a      	b.n	1ca3e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1ca08:	4b11      	ldr	r3, [pc, #68]	; (1ca50 <prvCheckTasksWaitingTermination+0x50>)
   1ca0a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1ca0c:	4b11      	ldr	r3, [pc, #68]	; (1ca54 <prvCheckTasksWaitingTermination+0x54>)
   1ca0e:	68db      	ldr	r3, [r3, #12]
   1ca10:	68db      	ldr	r3, [r3, #12]
   1ca12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1ca14:	687b      	ldr	r3, [r7, #4]
   1ca16:	3304      	adds	r3, #4
   1ca18:	0018      	movs	r0, r3
   1ca1a:	4b0f      	ldr	r3, [pc, #60]	; (1ca58 <prvCheckTasksWaitingTermination+0x58>)
   1ca1c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1ca1e:	4b0f      	ldr	r3, [pc, #60]	; (1ca5c <prvCheckTasksWaitingTermination+0x5c>)
   1ca20:	681b      	ldr	r3, [r3, #0]
   1ca22:	1e5a      	subs	r2, r3, #1
   1ca24:	4b0d      	ldr	r3, [pc, #52]	; (1ca5c <prvCheckTasksWaitingTermination+0x5c>)
   1ca26:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1ca28:	4b0d      	ldr	r3, [pc, #52]	; (1ca60 <prvCheckTasksWaitingTermination+0x60>)
   1ca2a:	681b      	ldr	r3, [r3, #0]
   1ca2c:	1e5a      	subs	r2, r3, #1
   1ca2e:	4b0c      	ldr	r3, [pc, #48]	; (1ca60 <prvCheckTasksWaitingTermination+0x60>)
   1ca30:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1ca32:	4b0c      	ldr	r3, [pc, #48]	; (1ca64 <prvCheckTasksWaitingTermination+0x64>)
   1ca34:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1ca36:	687b      	ldr	r3, [r7, #4]
   1ca38:	0018      	movs	r0, r3
   1ca3a:	4b0b      	ldr	r3, [pc, #44]	; (1ca68 <prvCheckTasksWaitingTermination+0x68>)
   1ca3c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1ca3e:	4b08      	ldr	r3, [pc, #32]	; (1ca60 <prvCheckTasksWaitingTermination+0x60>)
   1ca40:	681b      	ldr	r3, [r3, #0]
   1ca42:	2b00      	cmp	r3, #0
   1ca44:	d1e0      	bne.n	1ca08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1ca46:	46c0      	nop			; (mov r8, r8)
   1ca48:	46bd      	mov	sp, r7
   1ca4a:	b002      	add	sp, #8
   1ca4c:	bd80      	pop	{r7, pc}
   1ca4e:	46c0      	nop			; (mov r8, r8)
   1ca50:	00019e49 	.word	0x00019e49
   1ca54:	2000402c 	.word	0x2000402c
   1ca58:	00019cbb 	.word	0x00019cbb
   1ca5c:	20004058 	.word	0x20004058
   1ca60:	20004040 	.word	0x20004040
   1ca64:	00019e6d 	.word	0x00019e6d
   1ca68:	0001cadd 	.word	0x0001cadd

0001ca6c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1ca6c:	b580      	push	{r7, lr}
   1ca6e:	b084      	sub	sp, #16
   1ca70:	af00      	add	r7, sp, #0
   1ca72:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1ca74:	2300      	movs	r3, #0
   1ca76:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1ca78:	e005      	b.n	1ca86 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1ca7a:	687b      	ldr	r3, [r7, #4]
   1ca7c:	3301      	adds	r3, #1
   1ca7e:	607b      	str	r3, [r7, #4]
			ulCount++;
   1ca80:	68fb      	ldr	r3, [r7, #12]
   1ca82:	3301      	adds	r3, #1
   1ca84:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1ca86:	687b      	ldr	r3, [r7, #4]
   1ca88:	781b      	ldrb	r3, [r3, #0]
   1ca8a:	2ba5      	cmp	r3, #165	; 0xa5
   1ca8c:	d0f5      	beq.n	1ca7a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1ca8e:	68fb      	ldr	r3, [r7, #12]
   1ca90:	089b      	lsrs	r3, r3, #2
   1ca92:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1ca94:	68fb      	ldr	r3, [r7, #12]
   1ca96:	b29b      	uxth	r3, r3
	}
   1ca98:	0018      	movs	r0, r3
   1ca9a:	46bd      	mov	sp, r7
   1ca9c:	b004      	add	sp, #16
   1ca9e:	bd80      	pop	{r7, pc}

0001caa0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1caa0:	b580      	push	{r7, lr}
   1caa2:	b086      	sub	sp, #24
   1caa4:	af00      	add	r7, sp, #0
   1caa6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1caa8:	687b      	ldr	r3, [r7, #4]
   1caaa:	2b00      	cmp	r3, #0
   1caac:	d102      	bne.n	1cab4 <uxTaskGetStackHighWaterMark+0x14>
   1caae:	4b09      	ldr	r3, [pc, #36]	; (1cad4 <uxTaskGetStackHighWaterMark+0x34>)
   1cab0:	681b      	ldr	r3, [r3, #0]
   1cab2:	e000      	b.n	1cab6 <uxTaskGetStackHighWaterMark+0x16>
   1cab4:	687b      	ldr	r3, [r7, #4]
   1cab6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1cab8:	697b      	ldr	r3, [r7, #20]
   1caba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1cabc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1cabe:	693b      	ldr	r3, [r7, #16]
   1cac0:	0018      	movs	r0, r3
   1cac2:	4b05      	ldr	r3, [pc, #20]	; (1cad8 <uxTaskGetStackHighWaterMark+0x38>)
   1cac4:	4798      	blx	r3
   1cac6:	0003      	movs	r3, r0
   1cac8:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1caca:	68fb      	ldr	r3, [r7, #12]
	}
   1cacc:	0018      	movs	r0, r3
   1cace:	46bd      	mov	sp, r7
   1cad0:	b006      	add	sp, #24
   1cad2:	bd80      	pop	{r7, pc}
   1cad4:	20003f80 	.word	0x20003f80
   1cad8:	0001ca6d 	.word	0x0001ca6d

0001cadc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1cadc:	b580      	push	{r7, lr}
   1cade:	b082      	sub	sp, #8
   1cae0:	af00      	add	r7, sp, #0
   1cae2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1cae4:	687b      	ldr	r3, [r7, #4]
   1cae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1cae8:	0018      	movs	r0, r3
   1caea:	4b05      	ldr	r3, [pc, #20]	; (1cb00 <prvDeleteTCB+0x24>)
   1caec:	4798      	blx	r3
			vPortFree( pxTCB );
   1caee:	687b      	ldr	r3, [r7, #4]
   1caf0:	0018      	movs	r0, r3
   1caf2:	4b03      	ldr	r3, [pc, #12]	; (1cb00 <prvDeleteTCB+0x24>)
   1caf4:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1caf6:	46c0      	nop			; (mov r8, r8)
   1caf8:	46bd      	mov	sp, r7
   1cafa:	b002      	add	sp, #8
   1cafc:	bd80      	pop	{r7, pc}
   1cafe:	46c0      	nop			; (mov r8, r8)
   1cb00:	0001a045 	.word	0x0001a045

0001cb04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1cb04:	b580      	push	{r7, lr}
   1cb06:	b082      	sub	sp, #8
   1cb08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1cb0a:	4b0e      	ldr	r3, [pc, #56]	; (1cb44 <prvResetNextTaskUnblockTime+0x40>)
   1cb0c:	681b      	ldr	r3, [r3, #0]
   1cb0e:	681b      	ldr	r3, [r3, #0]
   1cb10:	2b00      	cmp	r3, #0
   1cb12:	d101      	bne.n	1cb18 <prvResetNextTaskUnblockTime+0x14>
   1cb14:	2301      	movs	r3, #1
   1cb16:	e000      	b.n	1cb1a <prvResetNextTaskUnblockTime+0x16>
   1cb18:	2300      	movs	r3, #0
   1cb1a:	2b00      	cmp	r3, #0
   1cb1c:	d004      	beq.n	1cb28 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1cb1e:	4b0a      	ldr	r3, [pc, #40]	; (1cb48 <prvResetNextTaskUnblockTime+0x44>)
   1cb20:	2201      	movs	r2, #1
   1cb22:	4252      	negs	r2, r2
   1cb24:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1cb26:	e008      	b.n	1cb3a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1cb28:	4b06      	ldr	r3, [pc, #24]	; (1cb44 <prvResetNextTaskUnblockTime+0x40>)
   1cb2a:	681b      	ldr	r3, [r3, #0]
   1cb2c:	68db      	ldr	r3, [r3, #12]
   1cb2e:	68db      	ldr	r3, [r3, #12]
   1cb30:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1cb32:	687b      	ldr	r3, [r7, #4]
   1cb34:	685a      	ldr	r2, [r3, #4]
   1cb36:	4b04      	ldr	r3, [pc, #16]	; (1cb48 <prvResetNextTaskUnblockTime+0x44>)
   1cb38:	601a      	str	r2, [r3, #0]
}
   1cb3a:	46c0      	nop			; (mov r8, r8)
   1cb3c:	46bd      	mov	sp, r7
   1cb3e:	b002      	add	sp, #8
   1cb40:	bd80      	pop	{r7, pc}
   1cb42:	46c0      	nop			; (mov r8, r8)
   1cb44:	20004010 	.word	0x20004010
   1cb48:	20004078 	.word	0x20004078

0001cb4c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1cb4c:	b580      	push	{r7, lr}
   1cb4e:	b082      	sub	sp, #8
   1cb50:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1cb52:	4b04      	ldr	r3, [pc, #16]	; (1cb64 <xTaskGetCurrentTaskHandle+0x18>)
   1cb54:	681b      	ldr	r3, [r3, #0]
   1cb56:	607b      	str	r3, [r7, #4]

		return xReturn;
   1cb58:	687b      	ldr	r3, [r7, #4]
	}
   1cb5a:	0018      	movs	r0, r3
   1cb5c:	46bd      	mov	sp, r7
   1cb5e:	b002      	add	sp, #8
   1cb60:	bd80      	pop	{r7, pc}
   1cb62:	46c0      	nop			; (mov r8, r8)
   1cb64:	20003f80 	.word	0x20003f80

0001cb68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1cb68:	b580      	push	{r7, lr}
   1cb6a:	b082      	sub	sp, #8
   1cb6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1cb6e:	4b0a      	ldr	r3, [pc, #40]	; (1cb98 <xTaskGetSchedulerState+0x30>)
   1cb70:	681b      	ldr	r3, [r3, #0]
   1cb72:	2b00      	cmp	r3, #0
   1cb74:	d102      	bne.n	1cb7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1cb76:	2301      	movs	r3, #1
   1cb78:	607b      	str	r3, [r7, #4]
   1cb7a:	e008      	b.n	1cb8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cb7c:	4b07      	ldr	r3, [pc, #28]	; (1cb9c <xTaskGetSchedulerState+0x34>)
   1cb7e:	681b      	ldr	r3, [r3, #0]
   1cb80:	2b00      	cmp	r3, #0
   1cb82:	d102      	bne.n	1cb8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1cb84:	2302      	movs	r3, #2
   1cb86:	607b      	str	r3, [r7, #4]
   1cb88:	e001      	b.n	1cb8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1cb8a:	2300      	movs	r3, #0
   1cb8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1cb8e:	687b      	ldr	r3, [r7, #4]
	}
   1cb90:	0018      	movs	r0, r3
   1cb92:	46bd      	mov	sp, r7
   1cb94:	b002      	add	sp, #8
   1cb96:	bd80      	pop	{r7, pc}
   1cb98:	20004064 	.word	0x20004064
   1cb9c:	20004080 	.word	0x20004080

0001cba0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1cba0:	b590      	push	{r4, r7, lr}
   1cba2:	b085      	sub	sp, #20
   1cba4:	af00      	add	r7, sp, #0
   1cba6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1cba8:	687b      	ldr	r3, [r7, #4]
   1cbaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1cbac:	2300      	movs	r3, #0
   1cbae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1cbb0:	687b      	ldr	r3, [r7, #4]
   1cbb2:	2b00      	cmp	r3, #0
   1cbb4:	d100      	bne.n	1cbb8 <xTaskPriorityInherit+0x18>
   1cbb6:	e09d      	b.n	1ccf4 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1cbb8:	68bb      	ldr	r3, [r7, #8]
   1cbba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbbc:	4b50      	ldr	r3, [pc, #320]	; (1cd00 <xTaskPriorityInherit+0x160>)
   1cbbe:	681b      	ldr	r3, [r3, #0]
   1cbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cbc2:	429a      	cmp	r2, r3
   1cbc4:	d300      	bcc.n	1cbc8 <xTaskPriorityInherit+0x28>
   1cbc6:	e08c      	b.n	1cce2 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1cbc8:	68bb      	ldr	r3, [r7, #8]
   1cbca:	699b      	ldr	r3, [r3, #24]
   1cbcc:	2b00      	cmp	r3, #0
   1cbce:	db06      	blt.n	1cbde <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cbd0:	4b4b      	ldr	r3, [pc, #300]	; (1cd00 <xTaskPriorityInherit+0x160>)
   1cbd2:	681b      	ldr	r3, [r3, #0]
   1cbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cbd6:	2205      	movs	r2, #5
   1cbd8:	1ad2      	subs	r2, r2, r3
   1cbda:	68bb      	ldr	r3, [r7, #8]
   1cbdc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1cbde:	68bb      	ldr	r3, [r7, #8]
   1cbe0:	6959      	ldr	r1, [r3, #20]
   1cbe2:	68bb      	ldr	r3, [r7, #8]
   1cbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbe6:	0013      	movs	r3, r2
   1cbe8:	009b      	lsls	r3, r3, #2
   1cbea:	189b      	adds	r3, r3, r2
   1cbec:	009b      	lsls	r3, r3, #2
   1cbee:	4a45      	ldr	r2, [pc, #276]	; (1cd04 <xTaskPriorityInherit+0x164>)
   1cbf0:	189b      	adds	r3, r3, r2
   1cbf2:	4299      	cmp	r1, r3
   1cbf4:	d101      	bne.n	1cbfa <xTaskPriorityInherit+0x5a>
   1cbf6:	2301      	movs	r3, #1
   1cbf8:	e000      	b.n	1cbfc <xTaskPriorityInherit+0x5c>
   1cbfa:	2300      	movs	r3, #0
   1cbfc:	2b00      	cmp	r3, #0
   1cbfe:	d037      	beq.n	1cc70 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cc00:	68bb      	ldr	r3, [r7, #8]
   1cc02:	3304      	adds	r3, #4
   1cc04:	0018      	movs	r0, r3
   1cc06:	4b40      	ldr	r3, [pc, #256]	; (1cd08 <xTaskPriorityInherit+0x168>)
   1cc08:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1cc0a:	4b3d      	ldr	r3, [pc, #244]	; (1cd00 <xTaskPriorityInherit+0x160>)
   1cc0c:	681b      	ldr	r3, [r3, #0]
   1cc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc10:	68bb      	ldr	r3, [r7, #8]
   1cc12:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1cc14:	68bb      	ldr	r3, [r7, #8]
   1cc16:	0018      	movs	r0, r3
   1cc18:	4b3c      	ldr	r3, [pc, #240]	; (1cd0c <xTaskPriorityInherit+0x16c>)
   1cc1a:	4798      	blx	r3
   1cc1c:	0003      	movs	r3, r0
   1cc1e:	001a      	movs	r2, r3
   1cc20:	4b3b      	ldr	r3, [pc, #236]	; (1cd10 <xTaskPriorityInherit+0x170>)
   1cc22:	881b      	ldrh	r3, [r3, #0]
   1cc24:	4013      	ands	r3, r2
   1cc26:	b29b      	uxth	r3, r3
   1cc28:	2b00      	cmp	r3, #0
   1cc2a:	d008      	beq.n	1cc3e <xTaskPriorityInherit+0x9e>
   1cc2c:	68bb      	ldr	r3, [r7, #8]
   1cc2e:	0018      	movs	r0, r3
   1cc30:	4b38      	ldr	r3, [pc, #224]	; (1cd14 <xTaskPriorityInherit+0x174>)
   1cc32:	4798      	blx	r3
   1cc34:	0003      	movs	r3, r0
   1cc36:	b2db      	uxtb	r3, r3
   1cc38:	0018      	movs	r0, r3
   1cc3a:	4b37      	ldr	r3, [pc, #220]	; (1cd18 <xTaskPriorityInherit+0x178>)
   1cc3c:	4798      	blx	r3
   1cc3e:	68bb      	ldr	r3, [r7, #8]
   1cc40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc42:	4b36      	ldr	r3, [pc, #216]	; (1cd1c <xTaskPriorityInherit+0x17c>)
   1cc44:	681b      	ldr	r3, [r3, #0]
   1cc46:	429a      	cmp	r2, r3
   1cc48:	d903      	bls.n	1cc52 <xTaskPriorityInherit+0xb2>
   1cc4a:	68bb      	ldr	r3, [r7, #8]
   1cc4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc4e:	4b33      	ldr	r3, [pc, #204]	; (1cd1c <xTaskPriorityInherit+0x17c>)
   1cc50:	601a      	str	r2, [r3, #0]
   1cc52:	68bb      	ldr	r3, [r7, #8]
   1cc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc56:	0013      	movs	r3, r2
   1cc58:	009b      	lsls	r3, r3, #2
   1cc5a:	189b      	adds	r3, r3, r2
   1cc5c:	009b      	lsls	r3, r3, #2
   1cc5e:	4a29      	ldr	r2, [pc, #164]	; (1cd04 <xTaskPriorityInherit+0x164>)
   1cc60:	189a      	adds	r2, r3, r2
   1cc62:	68bb      	ldr	r3, [r7, #8]
   1cc64:	3304      	adds	r3, #4
   1cc66:	0019      	movs	r1, r3
   1cc68:	0010      	movs	r0, r2
   1cc6a:	4b2d      	ldr	r3, [pc, #180]	; (1cd20 <xTaskPriorityInherit+0x180>)
   1cc6c:	4798      	blx	r3
   1cc6e:	e004      	b.n	1cc7a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1cc70:	4b23      	ldr	r3, [pc, #140]	; (1cd00 <xTaskPriorityInherit+0x160>)
   1cc72:	681b      	ldr	r3, [r3, #0]
   1cc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc76:	68bb      	ldr	r3, [r7, #8]
   1cc78:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1cc7a:	68bb      	ldr	r3, [r7, #8]
   1cc7c:	0018      	movs	r0, r3
   1cc7e:	4b23      	ldr	r3, [pc, #140]	; (1cd0c <xTaskPriorityInherit+0x16c>)
   1cc80:	4798      	blx	r3
   1cc82:	0003      	movs	r3, r0
   1cc84:	001a      	movs	r2, r3
   1cc86:	4b22      	ldr	r3, [pc, #136]	; (1cd10 <xTaskPriorityInherit+0x170>)
   1cc88:	881b      	ldrh	r3, [r3, #0]
   1cc8a:	4013      	ands	r3, r2
   1cc8c:	b29b      	uxth	r3, r3
   1cc8e:	2b00      	cmp	r3, #0
   1cc90:	d024      	beq.n	1ccdc <xTaskPriorityInherit+0x13c>
   1cc92:	68bb      	ldr	r3, [r7, #8]
   1cc94:	0018      	movs	r0, r3
   1cc96:	4b1f      	ldr	r3, [pc, #124]	; (1cd14 <xTaskPriorityInherit+0x174>)
   1cc98:	4798      	blx	r3
   1cc9a:	0003      	movs	r3, r0
   1cc9c:	b2db      	uxtb	r3, r3
   1cc9e:	001c      	movs	r4, r3
   1cca0:	68bb      	ldr	r3, [r7, #8]
   1cca2:	0018      	movs	r0, r3
   1cca4:	4b1b      	ldr	r3, [pc, #108]	; (1cd14 <xTaskPriorityInherit+0x174>)
   1cca6:	4798      	blx	r3
   1cca8:	0003      	movs	r3, r0
   1ccaa:	b2db      	uxtb	r3, r3
   1ccac:	0019      	movs	r1, r3
   1ccae:	2003      	movs	r0, #3
   1ccb0:	4b1c      	ldr	r3, [pc, #112]	; (1cd24 <xTaskPriorityInherit+0x184>)
   1ccb2:	4798      	blx	r3
   1ccb4:	0003      	movs	r3, r0
   1ccb6:	0022      	movs	r2, r4
   1ccb8:	2103      	movs	r1, #3
   1ccba:	208e      	movs	r0, #142	; 0x8e
   1ccbc:	4c1a      	ldr	r4, [pc, #104]	; (1cd28 <xTaskPriorityInherit+0x188>)
   1ccbe:	47a0      	blx	r4
   1ccc0:	68bb      	ldr	r3, [r7, #8]
   1ccc2:	0018      	movs	r0, r3
   1ccc4:	4b13      	ldr	r3, [pc, #76]	; (1cd14 <xTaskPriorityInherit+0x174>)
   1ccc6:	4798      	blx	r3
   1ccc8:	0003      	movs	r3, r0
   1ccca:	b2d9      	uxtb	r1, r3
   1cccc:	4b0c      	ldr	r3, [pc, #48]	; (1cd00 <xTaskPriorityInherit+0x160>)
   1ccce:	681b      	ldr	r3, [r3, #0]
   1ccd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ccd2:	b2db      	uxtb	r3, r3
   1ccd4:	001a      	movs	r2, r3
   1ccd6:	2003      	movs	r0, #3
   1ccd8:	4b14      	ldr	r3, [pc, #80]	; (1cd2c <xTaskPriorityInherit+0x18c>)
   1ccda:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1ccdc:	2301      	movs	r3, #1
   1ccde:	60fb      	str	r3, [r7, #12]
   1cce0:	e008      	b.n	1ccf4 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1cce2:	68bb      	ldr	r3, [r7, #8]
   1cce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1cce6:	4b06      	ldr	r3, [pc, #24]	; (1cd00 <xTaskPriorityInherit+0x160>)
   1cce8:	681b      	ldr	r3, [r3, #0]
   1ccea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ccec:	429a      	cmp	r2, r3
   1ccee:	d201      	bcs.n	1ccf4 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1ccf0:	2301      	movs	r3, #1
   1ccf2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1ccf4:	68fb      	ldr	r3, [r7, #12]
	}
   1ccf6:	0018      	movs	r0, r3
   1ccf8:	46bd      	mov	sp, r7
   1ccfa:	b005      	add	sp, #20
   1ccfc:	bd90      	pop	{r4, r7, pc}
   1ccfe:	46c0      	nop			; (mov r8, r8)
   1cd00:	20003f80 	.word	0x20003f80
   1cd04:	20003f84 	.word	0x20003f84
   1cd08:	00019cbb 	.word	0x00019cbb
   1cd0c:	00017e41 	.word	0x00017e41
   1cd10:	20000130 	.word	0x20000130
   1cd14:	00017e21 	.word	0x00017e21
   1cd18:	000185f1 	.word	0x000185f1
   1cd1c:	20004060 	.word	0x20004060
   1cd20:	00019c0b 	.word	0x00019c0b
   1cd24:	00018df9 	.word	0x00018df9
   1cd28:	00018969 	.word	0x00018969
   1cd2c:	00018d55 	.word	0x00018d55

0001cd30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1cd30:	b590      	push	{r4, r7, lr}
   1cd32:	b085      	sub	sp, #20
   1cd34:	af00      	add	r7, sp, #0
   1cd36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1cd38:	687b      	ldr	r3, [r7, #4]
   1cd3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1cd3c:	2300      	movs	r3, #0
   1cd3e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1cd40:	687b      	ldr	r3, [r7, #4]
   1cd42:	2b00      	cmp	r3, #0
   1cd44:	d100      	bne.n	1cd48 <xTaskPriorityDisinherit+0x18>
   1cd46:	e089      	b.n	1ce5c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1cd48:	4b47      	ldr	r3, [pc, #284]	; (1ce68 <xTaskPriorityDisinherit+0x138>)
   1cd4a:	681b      	ldr	r3, [r3, #0]
   1cd4c:	68ba      	ldr	r2, [r7, #8]
   1cd4e:	429a      	cmp	r2, r3
   1cd50:	d001      	beq.n	1cd56 <xTaskPriorityDisinherit+0x26>
   1cd52:	b672      	cpsid	i
   1cd54:	e7fe      	b.n	1cd54 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1cd56:	68bb      	ldr	r3, [r7, #8]
   1cd58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cd5a:	2b00      	cmp	r3, #0
   1cd5c:	d101      	bne.n	1cd62 <xTaskPriorityDisinherit+0x32>
   1cd5e:	b672      	cpsid	i
   1cd60:	e7fe      	b.n	1cd60 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1cd62:	68bb      	ldr	r3, [r7, #8]
   1cd64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cd66:	1e5a      	subs	r2, r3, #1
   1cd68:	68bb      	ldr	r3, [r7, #8]
   1cd6a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1cd6c:	68bb      	ldr	r3, [r7, #8]
   1cd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd70:	68bb      	ldr	r3, [r7, #8]
   1cd72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cd74:	429a      	cmp	r2, r3
   1cd76:	d071      	beq.n	1ce5c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1cd78:	68bb      	ldr	r3, [r7, #8]
   1cd7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cd7c:	2b00      	cmp	r3, #0
   1cd7e:	d16d      	bne.n	1ce5c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cd80:	68bb      	ldr	r3, [r7, #8]
   1cd82:	3304      	adds	r3, #4
   1cd84:	0018      	movs	r0, r3
   1cd86:	4b39      	ldr	r3, [pc, #228]	; (1ce6c <xTaskPriorityDisinherit+0x13c>)
   1cd88:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1cd8a:	68bb      	ldr	r3, [r7, #8]
   1cd8c:	0018      	movs	r0, r3
   1cd8e:	4b38      	ldr	r3, [pc, #224]	; (1ce70 <xTaskPriorityDisinherit+0x140>)
   1cd90:	4798      	blx	r3
   1cd92:	0003      	movs	r3, r0
   1cd94:	001a      	movs	r2, r3
   1cd96:	4b37      	ldr	r3, [pc, #220]	; (1ce74 <xTaskPriorityDisinherit+0x144>)
   1cd98:	881b      	ldrh	r3, [r3, #0]
   1cd9a:	4013      	ands	r3, r2
   1cd9c:	b29b      	uxth	r3, r3
   1cd9e:	2b00      	cmp	r3, #0
   1cda0:	d023      	beq.n	1cdea <xTaskPriorityDisinherit+0xba>
   1cda2:	68bb      	ldr	r3, [r7, #8]
   1cda4:	0018      	movs	r0, r3
   1cda6:	4b34      	ldr	r3, [pc, #208]	; (1ce78 <xTaskPriorityDisinherit+0x148>)
   1cda8:	4798      	blx	r3
   1cdaa:	0003      	movs	r3, r0
   1cdac:	b2db      	uxtb	r3, r3
   1cdae:	001c      	movs	r4, r3
   1cdb0:	68bb      	ldr	r3, [r7, #8]
   1cdb2:	0018      	movs	r0, r3
   1cdb4:	4b30      	ldr	r3, [pc, #192]	; (1ce78 <xTaskPriorityDisinherit+0x148>)
   1cdb6:	4798      	blx	r3
   1cdb8:	0003      	movs	r3, r0
   1cdba:	b2db      	uxtb	r3, r3
   1cdbc:	0019      	movs	r1, r3
   1cdbe:	2003      	movs	r0, #3
   1cdc0:	4b2e      	ldr	r3, [pc, #184]	; (1ce7c <xTaskPriorityDisinherit+0x14c>)
   1cdc2:	4798      	blx	r3
   1cdc4:	0003      	movs	r3, r0
   1cdc6:	0022      	movs	r2, r4
   1cdc8:	2103      	movs	r1, #3
   1cdca:	208f      	movs	r0, #143	; 0x8f
   1cdcc:	4c2c      	ldr	r4, [pc, #176]	; (1ce80 <xTaskPriorityDisinherit+0x150>)
   1cdce:	47a0      	blx	r4
   1cdd0:	68bb      	ldr	r3, [r7, #8]
   1cdd2:	0018      	movs	r0, r3
   1cdd4:	4b28      	ldr	r3, [pc, #160]	; (1ce78 <xTaskPriorityDisinherit+0x148>)
   1cdd6:	4798      	blx	r3
   1cdd8:	0003      	movs	r3, r0
   1cdda:	b2d9      	uxtb	r1, r3
   1cddc:	68bb      	ldr	r3, [r7, #8]
   1cdde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cde0:	b2db      	uxtb	r3, r3
   1cde2:	001a      	movs	r2, r3
   1cde4:	2003      	movs	r0, #3
   1cde6:	4b27      	ldr	r3, [pc, #156]	; (1ce84 <xTaskPriorityDisinherit+0x154>)
   1cde8:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1cdea:	68bb      	ldr	r3, [r7, #8]
   1cdec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1cdee:	68bb      	ldr	r3, [r7, #8]
   1cdf0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cdf2:	68bb      	ldr	r3, [r7, #8]
   1cdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cdf6:	2205      	movs	r2, #5
   1cdf8:	1ad2      	subs	r2, r2, r3
   1cdfa:	68bb      	ldr	r3, [r7, #8]
   1cdfc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1cdfe:	68bb      	ldr	r3, [r7, #8]
   1ce00:	0018      	movs	r0, r3
   1ce02:	4b1b      	ldr	r3, [pc, #108]	; (1ce70 <xTaskPriorityDisinherit+0x140>)
   1ce04:	4798      	blx	r3
   1ce06:	0003      	movs	r3, r0
   1ce08:	001a      	movs	r2, r3
   1ce0a:	4b1a      	ldr	r3, [pc, #104]	; (1ce74 <xTaskPriorityDisinherit+0x144>)
   1ce0c:	881b      	ldrh	r3, [r3, #0]
   1ce0e:	4013      	ands	r3, r2
   1ce10:	b29b      	uxth	r3, r3
   1ce12:	2b00      	cmp	r3, #0
   1ce14:	d008      	beq.n	1ce28 <xTaskPriorityDisinherit+0xf8>
   1ce16:	68bb      	ldr	r3, [r7, #8]
   1ce18:	0018      	movs	r0, r3
   1ce1a:	4b17      	ldr	r3, [pc, #92]	; (1ce78 <xTaskPriorityDisinherit+0x148>)
   1ce1c:	4798      	blx	r3
   1ce1e:	0003      	movs	r3, r0
   1ce20:	b2db      	uxtb	r3, r3
   1ce22:	0018      	movs	r0, r3
   1ce24:	4b18      	ldr	r3, [pc, #96]	; (1ce88 <xTaskPriorityDisinherit+0x158>)
   1ce26:	4798      	blx	r3
   1ce28:	68bb      	ldr	r3, [r7, #8]
   1ce2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce2c:	4b17      	ldr	r3, [pc, #92]	; (1ce8c <xTaskPriorityDisinherit+0x15c>)
   1ce2e:	681b      	ldr	r3, [r3, #0]
   1ce30:	429a      	cmp	r2, r3
   1ce32:	d903      	bls.n	1ce3c <xTaskPriorityDisinherit+0x10c>
   1ce34:	68bb      	ldr	r3, [r7, #8]
   1ce36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce38:	4b14      	ldr	r3, [pc, #80]	; (1ce8c <xTaskPriorityDisinherit+0x15c>)
   1ce3a:	601a      	str	r2, [r3, #0]
   1ce3c:	68bb      	ldr	r3, [r7, #8]
   1ce3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce40:	0013      	movs	r3, r2
   1ce42:	009b      	lsls	r3, r3, #2
   1ce44:	189b      	adds	r3, r3, r2
   1ce46:	009b      	lsls	r3, r3, #2
   1ce48:	4a11      	ldr	r2, [pc, #68]	; (1ce90 <xTaskPriorityDisinherit+0x160>)
   1ce4a:	189a      	adds	r2, r3, r2
   1ce4c:	68bb      	ldr	r3, [r7, #8]
   1ce4e:	3304      	adds	r3, #4
   1ce50:	0019      	movs	r1, r3
   1ce52:	0010      	movs	r0, r2
   1ce54:	4b0f      	ldr	r3, [pc, #60]	; (1ce94 <xTaskPriorityDisinherit+0x164>)
   1ce56:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1ce58:	2301      	movs	r3, #1
   1ce5a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1ce5c:	68fb      	ldr	r3, [r7, #12]
	}
   1ce5e:	0018      	movs	r0, r3
   1ce60:	46bd      	mov	sp, r7
   1ce62:	b005      	add	sp, #20
   1ce64:	bd90      	pop	{r4, r7, pc}
   1ce66:	46c0      	nop			; (mov r8, r8)
   1ce68:	20003f80 	.word	0x20003f80
   1ce6c:	00019cbb 	.word	0x00019cbb
   1ce70:	00017e41 	.word	0x00017e41
   1ce74:	20000130 	.word	0x20000130
   1ce78:	00017e21 	.word	0x00017e21
   1ce7c:	00018df9 	.word	0x00018df9
   1ce80:	00018969 	.word	0x00018969
   1ce84:	00018d55 	.word	0x00018d55
   1ce88:	000185f1 	.word	0x000185f1
   1ce8c:	20004060 	.word	0x20004060
   1ce90:	20003f84 	.word	0x20003f84
   1ce94:	00019c0b 	.word	0x00019c0b

0001ce98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1ce98:	b590      	push	{r4, r7, lr}
   1ce9a:	b087      	sub	sp, #28
   1ce9c:	af00      	add	r7, sp, #0
   1ce9e:	6078      	str	r0, [r7, #4]
   1cea0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1cea2:	687b      	ldr	r3, [r7, #4]
   1cea4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1cea6:	2301      	movs	r3, #1
   1cea8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1ceaa:	687b      	ldr	r3, [r7, #4]
   1ceac:	2b00      	cmp	r3, #0
   1ceae:	d100      	bne.n	1ceb2 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1ceb0:	e0a4      	b.n	1cffc <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1ceb2:	693b      	ldr	r3, [r7, #16]
   1ceb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ceb6:	2b00      	cmp	r3, #0
   1ceb8:	d101      	bne.n	1cebe <vTaskPriorityDisinheritAfterTimeout+0x26>
   1ceba:	b672      	cpsid	i
   1cebc:	e7fe      	b.n	1cebc <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1cebe:	693b      	ldr	r3, [r7, #16]
   1cec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1cec2:	683b      	ldr	r3, [r7, #0]
   1cec4:	429a      	cmp	r2, r3
   1cec6:	d202      	bcs.n	1cece <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1cec8:	683b      	ldr	r3, [r7, #0]
   1ceca:	617b      	str	r3, [r7, #20]
   1cecc:	e002      	b.n	1ced4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1cece:	693b      	ldr	r3, [r7, #16]
   1ced0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ced2:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1ced4:	693b      	ldr	r3, [r7, #16]
   1ced6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ced8:	697b      	ldr	r3, [r7, #20]
   1ceda:	429a      	cmp	r2, r3
   1cedc:	d100      	bne.n	1cee0 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1cede:	e08d      	b.n	1cffc <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1cee0:	693b      	ldr	r3, [r7, #16]
   1cee2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1cee4:	68fb      	ldr	r3, [r7, #12]
   1cee6:	429a      	cmp	r2, r3
   1cee8:	d000      	beq.n	1ceec <vTaskPriorityDisinheritAfterTimeout+0x54>
   1ceea:	e087      	b.n	1cffc <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1ceec:	4b45      	ldr	r3, [pc, #276]	; (1d004 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1ceee:	681b      	ldr	r3, [r3, #0]
   1cef0:	693a      	ldr	r2, [r7, #16]
   1cef2:	429a      	cmp	r2, r3
   1cef4:	d101      	bne.n	1cefa <vTaskPriorityDisinheritAfterTimeout+0x62>
   1cef6:	b672      	cpsid	i
   1cef8:	e7fe      	b.n	1cef8 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1cefa:	693b      	ldr	r3, [r7, #16]
   1cefc:	0018      	movs	r0, r3
   1cefe:	4b42      	ldr	r3, [pc, #264]	; (1d008 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1cf00:	4798      	blx	r3
   1cf02:	0003      	movs	r3, r0
   1cf04:	001a      	movs	r2, r3
   1cf06:	4b41      	ldr	r3, [pc, #260]	; (1d00c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1cf08:	881b      	ldrh	r3, [r3, #0]
   1cf0a:	4013      	ands	r3, r2
   1cf0c:	b29b      	uxth	r3, r3
   1cf0e:	2b00      	cmp	r3, #0
   1cf10:	d023      	beq.n	1cf5a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1cf12:	693b      	ldr	r3, [r7, #16]
   1cf14:	0018      	movs	r0, r3
   1cf16:	4b3e      	ldr	r3, [pc, #248]	; (1d010 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cf18:	4798      	blx	r3
   1cf1a:	0003      	movs	r3, r0
   1cf1c:	b2db      	uxtb	r3, r3
   1cf1e:	001c      	movs	r4, r3
   1cf20:	693b      	ldr	r3, [r7, #16]
   1cf22:	0018      	movs	r0, r3
   1cf24:	4b3a      	ldr	r3, [pc, #232]	; (1d010 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cf26:	4798      	blx	r3
   1cf28:	0003      	movs	r3, r0
   1cf2a:	b2db      	uxtb	r3, r3
   1cf2c:	0019      	movs	r1, r3
   1cf2e:	2003      	movs	r0, #3
   1cf30:	4b38      	ldr	r3, [pc, #224]	; (1d014 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1cf32:	4798      	blx	r3
   1cf34:	0003      	movs	r3, r0
   1cf36:	0022      	movs	r2, r4
   1cf38:	2103      	movs	r1, #3
   1cf3a:	208f      	movs	r0, #143	; 0x8f
   1cf3c:	4c36      	ldr	r4, [pc, #216]	; (1d018 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1cf3e:	47a0      	blx	r4
   1cf40:	693b      	ldr	r3, [r7, #16]
   1cf42:	0018      	movs	r0, r3
   1cf44:	4b32      	ldr	r3, [pc, #200]	; (1d010 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cf46:	4798      	blx	r3
   1cf48:	0003      	movs	r3, r0
   1cf4a:	b2d9      	uxtb	r1, r3
   1cf4c:	693b      	ldr	r3, [r7, #16]
   1cf4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cf50:	b2db      	uxtb	r3, r3
   1cf52:	001a      	movs	r2, r3
   1cf54:	2003      	movs	r0, #3
   1cf56:	4b31      	ldr	r3, [pc, #196]	; (1d01c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1cf58:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1cf5a:	693b      	ldr	r3, [r7, #16]
   1cf5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cf5e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1cf60:	693b      	ldr	r3, [r7, #16]
   1cf62:	697a      	ldr	r2, [r7, #20]
   1cf64:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1cf66:	693b      	ldr	r3, [r7, #16]
   1cf68:	699b      	ldr	r3, [r3, #24]
   1cf6a:	2b00      	cmp	r3, #0
   1cf6c:	db04      	blt.n	1cf78 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cf6e:	697b      	ldr	r3, [r7, #20]
   1cf70:	2205      	movs	r2, #5
   1cf72:	1ad2      	subs	r2, r2, r3
   1cf74:	693b      	ldr	r3, [r7, #16]
   1cf76:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1cf78:	693b      	ldr	r3, [r7, #16]
   1cf7a:	6959      	ldr	r1, [r3, #20]
   1cf7c:	68ba      	ldr	r2, [r7, #8]
   1cf7e:	0013      	movs	r3, r2
   1cf80:	009b      	lsls	r3, r3, #2
   1cf82:	189b      	adds	r3, r3, r2
   1cf84:	009b      	lsls	r3, r3, #2
   1cf86:	4a26      	ldr	r2, [pc, #152]	; (1d020 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1cf88:	189b      	adds	r3, r3, r2
   1cf8a:	4299      	cmp	r1, r3
   1cf8c:	d101      	bne.n	1cf92 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1cf8e:	2301      	movs	r3, #1
   1cf90:	e000      	b.n	1cf94 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1cf92:	2300      	movs	r3, #0
   1cf94:	2b00      	cmp	r3, #0
   1cf96:	d031      	beq.n	1cffc <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cf98:	693b      	ldr	r3, [r7, #16]
   1cf9a:	3304      	adds	r3, #4
   1cf9c:	0018      	movs	r0, r3
   1cf9e:	4b21      	ldr	r3, [pc, #132]	; (1d024 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1cfa0:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1cfa2:	693b      	ldr	r3, [r7, #16]
   1cfa4:	0018      	movs	r0, r3
   1cfa6:	4b18      	ldr	r3, [pc, #96]	; (1d008 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1cfa8:	4798      	blx	r3
   1cfaa:	0003      	movs	r3, r0
   1cfac:	001a      	movs	r2, r3
   1cfae:	4b17      	ldr	r3, [pc, #92]	; (1d00c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1cfb0:	881b      	ldrh	r3, [r3, #0]
   1cfb2:	4013      	ands	r3, r2
   1cfb4:	b29b      	uxth	r3, r3
   1cfb6:	2b00      	cmp	r3, #0
   1cfb8:	d008      	beq.n	1cfcc <vTaskPriorityDisinheritAfterTimeout+0x134>
   1cfba:	693b      	ldr	r3, [r7, #16]
   1cfbc:	0018      	movs	r0, r3
   1cfbe:	4b14      	ldr	r3, [pc, #80]	; (1d010 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cfc0:	4798      	blx	r3
   1cfc2:	0003      	movs	r3, r0
   1cfc4:	b2db      	uxtb	r3, r3
   1cfc6:	0018      	movs	r0, r3
   1cfc8:	4b17      	ldr	r3, [pc, #92]	; (1d028 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1cfca:	4798      	blx	r3
   1cfcc:	693b      	ldr	r3, [r7, #16]
   1cfce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cfd0:	4b16      	ldr	r3, [pc, #88]	; (1d02c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1cfd2:	681b      	ldr	r3, [r3, #0]
   1cfd4:	429a      	cmp	r2, r3
   1cfd6:	d903      	bls.n	1cfe0 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1cfd8:	693b      	ldr	r3, [r7, #16]
   1cfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cfdc:	4b13      	ldr	r3, [pc, #76]	; (1d02c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1cfde:	601a      	str	r2, [r3, #0]
   1cfe0:	693b      	ldr	r3, [r7, #16]
   1cfe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cfe4:	0013      	movs	r3, r2
   1cfe6:	009b      	lsls	r3, r3, #2
   1cfe8:	189b      	adds	r3, r3, r2
   1cfea:	009b      	lsls	r3, r3, #2
   1cfec:	4a0c      	ldr	r2, [pc, #48]	; (1d020 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1cfee:	189a      	adds	r2, r3, r2
   1cff0:	693b      	ldr	r3, [r7, #16]
   1cff2:	3304      	adds	r3, #4
   1cff4:	0019      	movs	r1, r3
   1cff6:	0010      	movs	r0, r2
   1cff8:	4b0d      	ldr	r3, [pc, #52]	; (1d030 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1cffa:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1cffc:	46c0      	nop			; (mov r8, r8)
   1cffe:	46bd      	mov	sp, r7
   1d000:	b007      	add	sp, #28
   1d002:	bd90      	pop	{r4, r7, pc}
   1d004:	20003f80 	.word	0x20003f80
   1d008:	00017e41 	.word	0x00017e41
   1d00c:	20000130 	.word	0x20000130
   1d010:	00017e21 	.word	0x00017e21
   1d014:	00018df9 	.word	0x00018df9
   1d018:	00018969 	.word	0x00018969
   1d01c:	00018d55 	.word	0x00018d55
   1d020:	20003f84 	.word	0x20003f84
   1d024:	00019cbb 	.word	0x00019cbb
   1d028:	000185f1 	.word	0x000185f1
   1d02c:	20004060 	.word	0x20004060
   1d030:	00019c0b 	.word	0x00019c0b

0001d034 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1d034:	b580      	push	{r7, lr}
   1d036:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1d038:	4b06      	ldr	r3, [pc, #24]	; (1d054 <pvTaskIncrementMutexHeldCount+0x20>)
   1d03a:	681b      	ldr	r3, [r3, #0]
   1d03c:	2b00      	cmp	r3, #0
   1d03e:	d004      	beq.n	1d04a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1d040:	4b04      	ldr	r3, [pc, #16]	; (1d054 <pvTaskIncrementMutexHeldCount+0x20>)
   1d042:	681b      	ldr	r3, [r3, #0]
   1d044:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d046:	3201      	adds	r2, #1
   1d048:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1d04a:	4b02      	ldr	r3, [pc, #8]	; (1d054 <pvTaskIncrementMutexHeldCount+0x20>)
   1d04c:	681b      	ldr	r3, [r3, #0]
	}
   1d04e:	0018      	movs	r0, r3
   1d050:	46bd      	mov	sp, r7
   1d052:	bd80      	pop	{r7, pc}
   1d054:	20003f80 	.word	0x20003f80

0001d058 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1d058:	b580      	push	{r7, lr}
   1d05a:	b084      	sub	sp, #16
   1d05c:	af00      	add	r7, sp, #0
   1d05e:	6078      	str	r0, [r7, #4]
   1d060:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1d062:	4b21      	ldr	r3, [pc, #132]	; (1d0e8 <prvAddCurrentTaskToDelayedList+0x90>)
   1d064:	681b      	ldr	r3, [r3, #0]
   1d066:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d068:	4b20      	ldr	r3, [pc, #128]	; (1d0ec <prvAddCurrentTaskToDelayedList+0x94>)
   1d06a:	681b      	ldr	r3, [r3, #0]
   1d06c:	3304      	adds	r3, #4
   1d06e:	0018      	movs	r0, r3
   1d070:	4b1f      	ldr	r3, [pc, #124]	; (1d0f0 <prvAddCurrentTaskToDelayedList+0x98>)
   1d072:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1d074:	687b      	ldr	r3, [r7, #4]
   1d076:	3301      	adds	r3, #1
   1d078:	d10b      	bne.n	1d092 <prvAddCurrentTaskToDelayedList+0x3a>
   1d07a:	683b      	ldr	r3, [r7, #0]
   1d07c:	2b00      	cmp	r3, #0
   1d07e:	d008      	beq.n	1d092 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d080:	4b1a      	ldr	r3, [pc, #104]	; (1d0ec <prvAddCurrentTaskToDelayedList+0x94>)
   1d082:	681b      	ldr	r3, [r3, #0]
   1d084:	1d1a      	adds	r2, r3, #4
   1d086:	4b1b      	ldr	r3, [pc, #108]	; (1d0f4 <prvAddCurrentTaskToDelayedList+0x9c>)
   1d088:	0011      	movs	r1, r2
   1d08a:	0018      	movs	r0, r3
   1d08c:	4b1a      	ldr	r3, [pc, #104]	; (1d0f8 <prvAddCurrentTaskToDelayedList+0xa0>)
   1d08e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1d090:	e026      	b.n	1d0e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1d092:	68fa      	ldr	r2, [r7, #12]
   1d094:	687b      	ldr	r3, [r7, #4]
   1d096:	18d3      	adds	r3, r2, r3
   1d098:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1d09a:	4b14      	ldr	r3, [pc, #80]	; (1d0ec <prvAddCurrentTaskToDelayedList+0x94>)
   1d09c:	681b      	ldr	r3, [r3, #0]
   1d09e:	68ba      	ldr	r2, [r7, #8]
   1d0a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1d0a2:	68ba      	ldr	r2, [r7, #8]
   1d0a4:	68fb      	ldr	r3, [r7, #12]
   1d0a6:	429a      	cmp	r2, r3
   1d0a8:	d209      	bcs.n	1d0be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d0aa:	4b14      	ldr	r3, [pc, #80]	; (1d0fc <prvAddCurrentTaskToDelayedList+0xa4>)
   1d0ac:	681a      	ldr	r2, [r3, #0]
   1d0ae:	4b0f      	ldr	r3, [pc, #60]	; (1d0ec <prvAddCurrentTaskToDelayedList+0x94>)
   1d0b0:	681b      	ldr	r3, [r3, #0]
   1d0b2:	3304      	adds	r3, #4
   1d0b4:	0019      	movs	r1, r3
   1d0b6:	0010      	movs	r0, r2
   1d0b8:	4b11      	ldr	r3, [pc, #68]	; (1d100 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d0ba:	4798      	blx	r3
}
   1d0bc:	e010      	b.n	1d0e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d0be:	4b11      	ldr	r3, [pc, #68]	; (1d104 <prvAddCurrentTaskToDelayedList+0xac>)
   1d0c0:	681a      	ldr	r2, [r3, #0]
   1d0c2:	4b0a      	ldr	r3, [pc, #40]	; (1d0ec <prvAddCurrentTaskToDelayedList+0x94>)
   1d0c4:	681b      	ldr	r3, [r3, #0]
   1d0c6:	3304      	adds	r3, #4
   1d0c8:	0019      	movs	r1, r3
   1d0ca:	0010      	movs	r0, r2
   1d0cc:	4b0c      	ldr	r3, [pc, #48]	; (1d100 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d0ce:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1d0d0:	4b0d      	ldr	r3, [pc, #52]	; (1d108 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d0d2:	681b      	ldr	r3, [r3, #0]
   1d0d4:	68ba      	ldr	r2, [r7, #8]
   1d0d6:	429a      	cmp	r2, r3
   1d0d8:	d202      	bcs.n	1d0e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1d0da:	4b0b      	ldr	r3, [pc, #44]	; (1d108 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d0dc:	68ba      	ldr	r2, [r7, #8]
   1d0de:	601a      	str	r2, [r3, #0]
}
   1d0e0:	46c0      	nop			; (mov r8, r8)
   1d0e2:	46bd      	mov	sp, r7
   1d0e4:	b004      	add	sp, #16
   1d0e6:	bd80      	pop	{r7, pc}
   1d0e8:	2000405c 	.word	0x2000405c
   1d0ec:	20003f80 	.word	0x20003f80
   1d0f0:	00019cbb 	.word	0x00019cbb
   1d0f4:	20004044 	.word	0x20004044
   1d0f8:	00019c0b 	.word	0x00019c0b
   1d0fc:	20004014 	.word	0x20004014
   1d100:	00019c4f 	.word	0x00019c4f
   1d104:	20004010 	.word	0x20004010
   1d108:	20004078 	.word	0x20004078

0001d10c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1d10c:	b590      	push	{r4, r7, lr}
   1d10e:	b085      	sub	sp, #20
   1d110:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1d112:	2300      	movs	r3, #0
   1d114:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1d116:	4b0e      	ldr	r3, [pc, #56]	; (1d150 <xTimerCreateTimerTask+0x44>)
   1d118:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1d11a:	4b0e      	ldr	r3, [pc, #56]	; (1d154 <xTimerCreateTimerTask+0x48>)
   1d11c:	681b      	ldr	r3, [r3, #0]
   1d11e:	2b00      	cmp	r3, #0
   1d120:	d00b      	beq.n	1d13a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1d122:	490d      	ldr	r1, [pc, #52]	; (1d158 <xTimerCreateTimerTask+0x4c>)
   1d124:	480d      	ldr	r0, [pc, #52]	; (1d15c <xTimerCreateTimerTask+0x50>)
   1d126:	4b0e      	ldr	r3, [pc, #56]	; (1d160 <xTimerCreateTimerTask+0x54>)
   1d128:	9301      	str	r3, [sp, #4]
   1d12a:	2302      	movs	r3, #2
   1d12c:	9300      	str	r3, [sp, #0]
   1d12e:	2300      	movs	r3, #0
   1d130:	2280      	movs	r2, #128	; 0x80
   1d132:	4c0c      	ldr	r4, [pc, #48]	; (1d164 <xTimerCreateTimerTask+0x58>)
   1d134:	47a0      	blx	r4
   1d136:	0003      	movs	r3, r0
   1d138:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1d13a:	687b      	ldr	r3, [r7, #4]
   1d13c:	2b00      	cmp	r3, #0
   1d13e:	d101      	bne.n	1d144 <xTimerCreateTimerTask+0x38>
   1d140:	b672      	cpsid	i
   1d142:	e7fe      	b.n	1d142 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1d144:	687b      	ldr	r3, [r7, #4]
}
   1d146:	0018      	movs	r0, r3
   1d148:	46bd      	mov	sp, r7
   1d14a:	b003      	add	sp, #12
   1d14c:	bd90      	pop	{r4, r7, pc}
   1d14e:	46c0      	nop			; (mov r8, r8)
   1d150:	0001d655 	.word	0x0001d655
   1d154:	200040b4 	.word	0x200040b4
   1d158:	00037f5c 	.word	0x00037f5c
   1d15c:	0001d28d 	.word	0x0001d28d
   1d160:	200040b8 	.word	0x200040b8
   1d164:	0001baa5 	.word	0x0001baa5

0001d168 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1d168:	b590      	push	{r4, r7, lr}
   1d16a:	b089      	sub	sp, #36	; 0x24
   1d16c:	af00      	add	r7, sp, #0
   1d16e:	60f8      	str	r0, [r7, #12]
   1d170:	60b9      	str	r1, [r7, #8]
   1d172:	607a      	str	r2, [r7, #4]
   1d174:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1d176:	2300      	movs	r3, #0
   1d178:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1d17a:	68fb      	ldr	r3, [r7, #12]
   1d17c:	2b00      	cmp	r3, #0
   1d17e:	d101      	bne.n	1d184 <xTimerGenericCommand+0x1c>
   1d180:	b672      	cpsid	i
   1d182:	e7fe      	b.n	1d182 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1d184:	4b1e      	ldr	r3, [pc, #120]	; (1d200 <xTimerGenericCommand+0x98>)
   1d186:	681b      	ldr	r3, [r3, #0]
   1d188:	2b00      	cmp	r3, #0
   1d18a:	d033      	beq.n	1d1f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1d18c:	2310      	movs	r3, #16
   1d18e:	18fb      	adds	r3, r7, r3
   1d190:	68ba      	ldr	r2, [r7, #8]
   1d192:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1d194:	2310      	movs	r3, #16
   1d196:	18fb      	adds	r3, r7, r3
   1d198:	687a      	ldr	r2, [r7, #4]
   1d19a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1d19c:	2310      	movs	r3, #16
   1d19e:	18fb      	adds	r3, r7, r3
   1d1a0:	68fa      	ldr	r2, [r7, #12]
   1d1a2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1d1a4:	68bb      	ldr	r3, [r7, #8]
   1d1a6:	2b05      	cmp	r3, #5
   1d1a8:	dc1a      	bgt.n	1d1e0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1d1aa:	4b16      	ldr	r3, [pc, #88]	; (1d204 <xTimerGenericCommand+0x9c>)
   1d1ac:	4798      	blx	r3
   1d1ae:	0003      	movs	r3, r0
   1d1b0:	2b02      	cmp	r3, #2
   1d1b2:	d10a      	bne.n	1d1ca <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1d1b4:	4b12      	ldr	r3, [pc, #72]	; (1d200 <xTimerGenericCommand+0x98>)
   1d1b6:	6818      	ldr	r0, [r3, #0]
   1d1b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d1ba:	2310      	movs	r3, #16
   1d1bc:	18f9      	adds	r1, r7, r3
   1d1be:	2300      	movs	r3, #0
   1d1c0:	4c11      	ldr	r4, [pc, #68]	; (1d208 <xTimerGenericCommand+0xa0>)
   1d1c2:	47a0      	blx	r4
   1d1c4:	0003      	movs	r3, r0
   1d1c6:	61fb      	str	r3, [r7, #28]
   1d1c8:	e014      	b.n	1d1f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1d1ca:	4b0d      	ldr	r3, [pc, #52]	; (1d200 <xTimerGenericCommand+0x98>)
   1d1cc:	6818      	ldr	r0, [r3, #0]
   1d1ce:	2310      	movs	r3, #16
   1d1d0:	18f9      	adds	r1, r7, r3
   1d1d2:	2300      	movs	r3, #0
   1d1d4:	2200      	movs	r2, #0
   1d1d6:	4c0c      	ldr	r4, [pc, #48]	; (1d208 <xTimerGenericCommand+0xa0>)
   1d1d8:	47a0      	blx	r4
   1d1da:	0003      	movs	r3, r0
   1d1dc:	61fb      	str	r3, [r7, #28]
   1d1de:	e009      	b.n	1d1f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1d1e0:	4b07      	ldr	r3, [pc, #28]	; (1d200 <xTimerGenericCommand+0x98>)
   1d1e2:	6818      	ldr	r0, [r3, #0]
   1d1e4:	683a      	ldr	r2, [r7, #0]
   1d1e6:	2310      	movs	r3, #16
   1d1e8:	18f9      	adds	r1, r7, r3
   1d1ea:	2300      	movs	r3, #0
   1d1ec:	4c07      	ldr	r4, [pc, #28]	; (1d20c <xTimerGenericCommand+0xa4>)
   1d1ee:	47a0      	blx	r4
   1d1f0:	0003      	movs	r3, r0
   1d1f2:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1d1f4:	69fb      	ldr	r3, [r7, #28]
}
   1d1f6:	0018      	movs	r0, r3
   1d1f8:	46bd      	mov	sp, r7
   1d1fa:	b009      	add	sp, #36	; 0x24
   1d1fc:	bd90      	pop	{r4, r7, pc}
   1d1fe:	46c0      	nop			; (mov r8, r8)
   1d200:	200040b4 	.word	0x200040b4
   1d204:	0001cb69 	.word	0x0001cb69
   1d208:	0001a3dd 	.word	0x0001a3dd
   1d20c:	0001a83d 	.word	0x0001a83d

0001d210 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1d210:	b590      	push	{r4, r7, lr}
   1d212:	b087      	sub	sp, #28
   1d214:	af02      	add	r7, sp, #8
   1d216:	6078      	str	r0, [r7, #4]
   1d218:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d21a:	4b18      	ldr	r3, [pc, #96]	; (1d27c <prvProcessExpiredTimer+0x6c>)
   1d21c:	681b      	ldr	r3, [r3, #0]
   1d21e:	68db      	ldr	r3, [r3, #12]
   1d220:	68db      	ldr	r3, [r3, #12]
   1d222:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d224:	68fb      	ldr	r3, [r7, #12]
   1d226:	3304      	adds	r3, #4
   1d228:	0018      	movs	r0, r3
   1d22a:	4b15      	ldr	r3, [pc, #84]	; (1d280 <prvProcessExpiredTimer+0x70>)
   1d22c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d22e:	68fb      	ldr	r3, [r7, #12]
   1d230:	69db      	ldr	r3, [r3, #28]
   1d232:	2b01      	cmp	r3, #1
   1d234:	d119      	bne.n	1d26a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1d236:	68fb      	ldr	r3, [r7, #12]
   1d238:	699a      	ldr	r2, [r3, #24]
   1d23a:	687b      	ldr	r3, [r7, #4]
   1d23c:	18d1      	adds	r1, r2, r3
   1d23e:	687b      	ldr	r3, [r7, #4]
   1d240:	683a      	ldr	r2, [r7, #0]
   1d242:	68f8      	ldr	r0, [r7, #12]
   1d244:	4c0f      	ldr	r4, [pc, #60]	; (1d284 <prvProcessExpiredTimer+0x74>)
   1d246:	47a0      	blx	r4
   1d248:	1e03      	subs	r3, r0, #0
   1d24a:	d00e      	beq.n	1d26a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d24c:	687a      	ldr	r2, [r7, #4]
   1d24e:	68f8      	ldr	r0, [r7, #12]
   1d250:	2300      	movs	r3, #0
   1d252:	9300      	str	r3, [sp, #0]
   1d254:	2300      	movs	r3, #0
   1d256:	2100      	movs	r1, #0
   1d258:	4c0b      	ldr	r4, [pc, #44]	; (1d288 <prvProcessExpiredTimer+0x78>)
   1d25a:	47a0      	blx	r4
   1d25c:	0003      	movs	r3, r0
   1d25e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1d260:	68bb      	ldr	r3, [r7, #8]
   1d262:	2b00      	cmp	r3, #0
   1d264:	d101      	bne.n	1d26a <prvProcessExpiredTimer+0x5a>
   1d266:	b672      	cpsid	i
   1d268:	e7fe      	b.n	1d268 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d26a:	68fb      	ldr	r3, [r7, #12]
   1d26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d26e:	68fa      	ldr	r2, [r7, #12]
   1d270:	0010      	movs	r0, r2
   1d272:	4798      	blx	r3
}
   1d274:	46c0      	nop			; (mov r8, r8)
   1d276:	46bd      	mov	sp, r7
   1d278:	b005      	add	sp, #20
   1d27a:	bd90      	pop	{r4, r7, pc}
   1d27c:	200040ac 	.word	0x200040ac
   1d280:	00019cbb 	.word	0x00019cbb
   1d284:	0001d3f5 	.word	0x0001d3f5
   1d288:	0001d169 	.word	0x0001d169

0001d28c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1d28c:	b580      	push	{r7, lr}
   1d28e:	b084      	sub	sp, #16
   1d290:	af00      	add	r7, sp, #0
   1d292:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1d294:	4b08      	ldr	r3, [pc, #32]	; (1d2b8 <prvTimerTask+0x2c>)
   1d296:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d298:	2308      	movs	r3, #8
   1d29a:	18fb      	adds	r3, r7, r3
   1d29c:	0018      	movs	r0, r3
   1d29e:	4b07      	ldr	r3, [pc, #28]	; (1d2bc <prvTimerTask+0x30>)
   1d2a0:	4798      	blx	r3
   1d2a2:	0003      	movs	r3, r0
   1d2a4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1d2a6:	68ba      	ldr	r2, [r7, #8]
   1d2a8:	68fb      	ldr	r3, [r7, #12]
   1d2aa:	0011      	movs	r1, r2
   1d2ac:	0018      	movs	r0, r3
   1d2ae:	4b04      	ldr	r3, [pc, #16]	; (1d2c0 <prvTimerTask+0x34>)
   1d2b0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1d2b2:	4b04      	ldr	r3, [pc, #16]	; (1d2c4 <prvTimerTask+0x38>)
   1d2b4:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d2b6:	e7ef      	b.n	1d298 <prvTimerTask+0xc>
   1d2b8:	0003245d 	.word	0x0003245d
   1d2bc:	0001d36d 	.word	0x0001d36d
   1d2c0:	0001d2c9 	.word	0x0001d2c9
   1d2c4:	0001d47d 	.word	0x0001d47d

0001d2c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1d2c8:	b580      	push	{r7, lr}
   1d2ca:	b084      	sub	sp, #16
   1d2cc:	af00      	add	r7, sp, #0
   1d2ce:	6078      	str	r0, [r7, #4]
   1d2d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1d2d2:	4b1e      	ldr	r3, [pc, #120]	; (1d34c <prvProcessTimerOrBlockTask+0x84>)
   1d2d4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d2d6:	2308      	movs	r3, #8
   1d2d8:	18fb      	adds	r3, r7, r3
   1d2da:	0018      	movs	r0, r3
   1d2dc:	4b1c      	ldr	r3, [pc, #112]	; (1d350 <prvProcessTimerOrBlockTask+0x88>)
   1d2de:	4798      	blx	r3
   1d2e0:	0003      	movs	r3, r0
   1d2e2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1d2e4:	68bb      	ldr	r3, [r7, #8]
   1d2e6:	2b00      	cmp	r3, #0
   1d2e8:	d129      	bne.n	1d33e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1d2ea:	683b      	ldr	r3, [r7, #0]
   1d2ec:	2b00      	cmp	r3, #0
   1d2ee:	d10c      	bne.n	1d30a <prvProcessTimerOrBlockTask+0x42>
   1d2f0:	687a      	ldr	r2, [r7, #4]
   1d2f2:	68fb      	ldr	r3, [r7, #12]
   1d2f4:	429a      	cmp	r2, r3
   1d2f6:	d808      	bhi.n	1d30a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1d2f8:	4b16      	ldr	r3, [pc, #88]	; (1d354 <prvProcessTimerOrBlockTask+0x8c>)
   1d2fa:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1d2fc:	68fa      	ldr	r2, [r7, #12]
   1d2fe:	687b      	ldr	r3, [r7, #4]
   1d300:	0011      	movs	r1, r2
   1d302:	0018      	movs	r0, r3
   1d304:	4b14      	ldr	r3, [pc, #80]	; (1d358 <prvProcessTimerOrBlockTask+0x90>)
   1d306:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1d308:	e01b      	b.n	1d342 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1d30a:	683b      	ldr	r3, [r7, #0]
   1d30c:	2b00      	cmp	r3, #0
   1d30e:	d006      	beq.n	1d31e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1d310:	4b12      	ldr	r3, [pc, #72]	; (1d35c <prvProcessTimerOrBlockTask+0x94>)
   1d312:	681b      	ldr	r3, [r3, #0]
   1d314:	681b      	ldr	r3, [r3, #0]
   1d316:	425a      	negs	r2, r3
   1d318:	4153      	adcs	r3, r2
   1d31a:	b2db      	uxtb	r3, r3
   1d31c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1d31e:	4b10      	ldr	r3, [pc, #64]	; (1d360 <prvProcessTimerOrBlockTask+0x98>)
   1d320:	6818      	ldr	r0, [r3, #0]
   1d322:	687a      	ldr	r2, [r7, #4]
   1d324:	68fb      	ldr	r3, [r7, #12]
   1d326:	1ad3      	subs	r3, r2, r3
   1d328:	683a      	ldr	r2, [r7, #0]
   1d32a:	0019      	movs	r1, r3
   1d32c:	4b0d      	ldr	r3, [pc, #52]	; (1d364 <prvProcessTimerOrBlockTask+0x9c>)
   1d32e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1d330:	4b08      	ldr	r3, [pc, #32]	; (1d354 <prvProcessTimerOrBlockTask+0x8c>)
   1d332:	4798      	blx	r3
   1d334:	1e03      	subs	r3, r0, #0
   1d336:	d104      	bne.n	1d342 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1d338:	4b0b      	ldr	r3, [pc, #44]	; (1d368 <prvProcessTimerOrBlockTask+0xa0>)
   1d33a:	4798      	blx	r3
}
   1d33c:	e001      	b.n	1d342 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1d33e:	4b05      	ldr	r3, [pc, #20]	; (1d354 <prvProcessTimerOrBlockTask+0x8c>)
   1d340:	4798      	blx	r3
}
   1d342:	46c0      	nop			; (mov r8, r8)
   1d344:	46bd      	mov	sp, r7
   1d346:	b004      	add	sp, #16
   1d348:	bd80      	pop	{r7, pc}
   1d34a:	46c0      	nop			; (mov r8, r8)
   1d34c:	0001c101 	.word	0x0001c101
   1d350:	0001d3ad 	.word	0x0001d3ad
   1d354:	0001c119 	.word	0x0001c119
   1d358:	0001d211 	.word	0x0001d211
   1d35c:	200040b0 	.word	0x200040b0
   1d360:	200040b4 	.word	0x200040b4
   1d364:	0001b8a1 	.word	0x0001b8a1
   1d368:	00019e31 	.word	0x00019e31

0001d36c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1d36c:	b580      	push	{r7, lr}
   1d36e:	b084      	sub	sp, #16
   1d370:	af00      	add	r7, sp, #0
   1d372:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1d374:	4b0c      	ldr	r3, [pc, #48]	; (1d3a8 <prvGetNextExpireTime+0x3c>)
   1d376:	681b      	ldr	r3, [r3, #0]
   1d378:	681b      	ldr	r3, [r3, #0]
   1d37a:	425a      	negs	r2, r3
   1d37c:	4153      	adcs	r3, r2
   1d37e:	b2db      	uxtb	r3, r3
   1d380:	001a      	movs	r2, r3
   1d382:	687b      	ldr	r3, [r7, #4]
   1d384:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1d386:	687b      	ldr	r3, [r7, #4]
   1d388:	681b      	ldr	r3, [r3, #0]
   1d38a:	2b00      	cmp	r3, #0
   1d38c:	d105      	bne.n	1d39a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d38e:	4b06      	ldr	r3, [pc, #24]	; (1d3a8 <prvGetNextExpireTime+0x3c>)
   1d390:	681b      	ldr	r3, [r3, #0]
   1d392:	68db      	ldr	r3, [r3, #12]
   1d394:	681b      	ldr	r3, [r3, #0]
   1d396:	60fb      	str	r3, [r7, #12]
   1d398:	e001      	b.n	1d39e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1d39a:	2300      	movs	r3, #0
   1d39c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1d39e:	68fb      	ldr	r3, [r7, #12]
}
   1d3a0:	0018      	movs	r0, r3
   1d3a2:	46bd      	mov	sp, r7
   1d3a4:	b004      	add	sp, #16
   1d3a6:	bd80      	pop	{r7, pc}
   1d3a8:	200040ac 	.word	0x200040ac

0001d3ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1d3ac:	b580      	push	{r7, lr}
   1d3ae:	b084      	sub	sp, #16
   1d3b0:	af00      	add	r7, sp, #0
   1d3b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1d3b4:	4b0c      	ldr	r3, [pc, #48]	; (1d3e8 <prvSampleTimeNow+0x3c>)
   1d3b6:	4798      	blx	r3
   1d3b8:	0003      	movs	r3, r0
   1d3ba:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1d3bc:	4b0b      	ldr	r3, [pc, #44]	; (1d3ec <prvSampleTimeNow+0x40>)
   1d3be:	681b      	ldr	r3, [r3, #0]
   1d3c0:	68fa      	ldr	r2, [r7, #12]
   1d3c2:	429a      	cmp	r2, r3
   1d3c4:	d205      	bcs.n	1d3d2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1d3c6:	4b0a      	ldr	r3, [pc, #40]	; (1d3f0 <prvSampleTimeNow+0x44>)
   1d3c8:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1d3ca:	687b      	ldr	r3, [r7, #4]
   1d3cc:	2201      	movs	r2, #1
   1d3ce:	601a      	str	r2, [r3, #0]
   1d3d0:	e002      	b.n	1d3d8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1d3d2:	687b      	ldr	r3, [r7, #4]
   1d3d4:	2200      	movs	r2, #0
   1d3d6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1d3d8:	4b04      	ldr	r3, [pc, #16]	; (1d3ec <prvSampleTimeNow+0x40>)
   1d3da:	68fa      	ldr	r2, [r7, #12]
   1d3dc:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1d3de:	68fb      	ldr	r3, [r7, #12]
}
   1d3e0:	0018      	movs	r0, r3
   1d3e2:	46bd      	mov	sp, r7
   1d3e4:	b004      	add	sp, #16
   1d3e6:	bd80      	pop	{r7, pc}
   1d3e8:	0001c289 	.word	0x0001c289
   1d3ec:	200040bc 	.word	0x200040bc
   1d3f0:	0001d595 	.word	0x0001d595

0001d3f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1d3f4:	b580      	push	{r7, lr}
   1d3f6:	b086      	sub	sp, #24
   1d3f8:	af00      	add	r7, sp, #0
   1d3fa:	60f8      	str	r0, [r7, #12]
   1d3fc:	60b9      	str	r1, [r7, #8]
   1d3fe:	607a      	str	r2, [r7, #4]
   1d400:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1d402:	2300      	movs	r3, #0
   1d404:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1d406:	68fb      	ldr	r3, [r7, #12]
   1d408:	68ba      	ldr	r2, [r7, #8]
   1d40a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d40c:	68fb      	ldr	r3, [r7, #12]
   1d40e:	68fa      	ldr	r2, [r7, #12]
   1d410:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1d412:	68ba      	ldr	r2, [r7, #8]
   1d414:	687b      	ldr	r3, [r7, #4]
   1d416:	429a      	cmp	r2, r3
   1d418:	d812      	bhi.n	1d440 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d41a:	687a      	ldr	r2, [r7, #4]
   1d41c:	683b      	ldr	r3, [r7, #0]
   1d41e:	1ad2      	subs	r2, r2, r3
   1d420:	68fb      	ldr	r3, [r7, #12]
   1d422:	699b      	ldr	r3, [r3, #24]
   1d424:	429a      	cmp	r2, r3
   1d426:	d302      	bcc.n	1d42e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1d428:	2301      	movs	r3, #1
   1d42a:	617b      	str	r3, [r7, #20]
   1d42c:	e01b      	b.n	1d466 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1d42e:	4b10      	ldr	r3, [pc, #64]	; (1d470 <prvInsertTimerInActiveList+0x7c>)
   1d430:	681a      	ldr	r2, [r3, #0]
   1d432:	68fb      	ldr	r3, [r7, #12]
   1d434:	3304      	adds	r3, #4
   1d436:	0019      	movs	r1, r3
   1d438:	0010      	movs	r0, r2
   1d43a:	4b0e      	ldr	r3, [pc, #56]	; (1d474 <prvInsertTimerInActiveList+0x80>)
   1d43c:	4798      	blx	r3
   1d43e:	e012      	b.n	1d466 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1d440:	687a      	ldr	r2, [r7, #4]
   1d442:	683b      	ldr	r3, [r7, #0]
   1d444:	429a      	cmp	r2, r3
   1d446:	d206      	bcs.n	1d456 <prvInsertTimerInActiveList+0x62>
   1d448:	68ba      	ldr	r2, [r7, #8]
   1d44a:	683b      	ldr	r3, [r7, #0]
   1d44c:	429a      	cmp	r2, r3
   1d44e:	d302      	bcc.n	1d456 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1d450:	2301      	movs	r3, #1
   1d452:	617b      	str	r3, [r7, #20]
   1d454:	e007      	b.n	1d466 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d456:	4b08      	ldr	r3, [pc, #32]	; (1d478 <prvInsertTimerInActiveList+0x84>)
   1d458:	681a      	ldr	r2, [r3, #0]
   1d45a:	68fb      	ldr	r3, [r7, #12]
   1d45c:	3304      	adds	r3, #4
   1d45e:	0019      	movs	r1, r3
   1d460:	0010      	movs	r0, r2
   1d462:	4b04      	ldr	r3, [pc, #16]	; (1d474 <prvInsertTimerInActiveList+0x80>)
   1d464:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1d466:	697b      	ldr	r3, [r7, #20]
}
   1d468:	0018      	movs	r0, r3
   1d46a:	46bd      	mov	sp, r7
   1d46c:	b006      	add	sp, #24
   1d46e:	bd80      	pop	{r7, pc}
   1d470:	200040b0 	.word	0x200040b0
   1d474:	00019c4f 	.word	0x00019c4f
   1d478:	200040ac 	.word	0x200040ac

0001d47c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1d47c:	b590      	push	{r4, r7, lr}
   1d47e:	b08b      	sub	sp, #44	; 0x2c
   1d480:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d482:	e068      	b.n	1d556 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1d484:	2308      	movs	r3, #8
   1d486:	18fb      	adds	r3, r7, r3
   1d488:	681b      	ldr	r3, [r3, #0]
   1d48a:	2b00      	cmp	r3, #0
   1d48c:	db63      	blt.n	1d556 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1d48e:	2308      	movs	r3, #8
   1d490:	18fb      	adds	r3, r7, r3
   1d492:	689b      	ldr	r3, [r3, #8]
   1d494:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1d496:	69fb      	ldr	r3, [r7, #28]
   1d498:	695b      	ldr	r3, [r3, #20]
   1d49a:	2b00      	cmp	r3, #0
   1d49c:	d004      	beq.n	1d4a8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d49e:	69fb      	ldr	r3, [r7, #28]
   1d4a0:	3304      	adds	r3, #4
   1d4a2:	0018      	movs	r0, r3
   1d4a4:	4b33      	ldr	r3, [pc, #204]	; (1d574 <prvProcessReceivedCommands+0xf8>)
   1d4a6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d4a8:	1d3b      	adds	r3, r7, #4
   1d4aa:	0018      	movs	r0, r3
   1d4ac:	4b32      	ldr	r3, [pc, #200]	; (1d578 <prvProcessReceivedCommands+0xfc>)
   1d4ae:	4798      	blx	r3
   1d4b0:	0003      	movs	r3, r0
   1d4b2:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1d4b4:	2308      	movs	r3, #8
   1d4b6:	18fb      	adds	r3, r7, r3
   1d4b8:	681b      	ldr	r3, [r3, #0]
   1d4ba:	2b09      	cmp	r3, #9
   1d4bc:	d84a      	bhi.n	1d554 <prvProcessReceivedCommands+0xd8>
   1d4be:	009a      	lsls	r2, r3, #2
   1d4c0:	4b2e      	ldr	r3, [pc, #184]	; (1d57c <prvProcessReceivedCommands+0x100>)
   1d4c2:	18d3      	adds	r3, r2, r3
   1d4c4:	681b      	ldr	r3, [r3, #0]
   1d4c6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1d4c8:	2308      	movs	r3, #8
   1d4ca:	18fb      	adds	r3, r7, r3
   1d4cc:	685a      	ldr	r2, [r3, #4]
   1d4ce:	69fb      	ldr	r3, [r7, #28]
   1d4d0:	699b      	ldr	r3, [r3, #24]
   1d4d2:	18d1      	adds	r1, r2, r3
   1d4d4:	2308      	movs	r3, #8
   1d4d6:	18fb      	adds	r3, r7, r3
   1d4d8:	685b      	ldr	r3, [r3, #4]
   1d4da:	69ba      	ldr	r2, [r7, #24]
   1d4dc:	69f8      	ldr	r0, [r7, #28]
   1d4de:	4c28      	ldr	r4, [pc, #160]	; (1d580 <prvProcessReceivedCommands+0x104>)
   1d4e0:	47a0      	blx	r4
   1d4e2:	1e03      	subs	r3, r0, #0
   1d4e4:	d037      	beq.n	1d556 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d4e6:	69fb      	ldr	r3, [r7, #28]
   1d4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d4ea:	69fa      	ldr	r2, [r7, #28]
   1d4ec:	0010      	movs	r0, r2
   1d4ee:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d4f0:	69fb      	ldr	r3, [r7, #28]
   1d4f2:	69db      	ldr	r3, [r3, #28]
   1d4f4:	2b01      	cmp	r3, #1
   1d4f6:	d12e      	bne.n	1d556 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1d4f8:	2308      	movs	r3, #8
   1d4fa:	18fb      	adds	r3, r7, r3
   1d4fc:	685a      	ldr	r2, [r3, #4]
   1d4fe:	69fb      	ldr	r3, [r7, #28]
   1d500:	699b      	ldr	r3, [r3, #24]
   1d502:	18d2      	adds	r2, r2, r3
   1d504:	69f8      	ldr	r0, [r7, #28]
   1d506:	2300      	movs	r3, #0
   1d508:	9300      	str	r3, [sp, #0]
   1d50a:	2300      	movs	r3, #0
   1d50c:	2100      	movs	r1, #0
   1d50e:	4c1d      	ldr	r4, [pc, #116]	; (1d584 <prvProcessReceivedCommands+0x108>)
   1d510:	47a0      	blx	r4
   1d512:	0003      	movs	r3, r0
   1d514:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1d516:	697b      	ldr	r3, [r7, #20]
   1d518:	2b00      	cmp	r3, #0
   1d51a:	d11c      	bne.n	1d556 <prvProcessReceivedCommands+0xda>
   1d51c:	b672      	cpsid	i
   1d51e:	e7fe      	b.n	1d51e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1d520:	2308      	movs	r3, #8
   1d522:	18fb      	adds	r3, r7, r3
   1d524:	685a      	ldr	r2, [r3, #4]
   1d526:	69fb      	ldr	r3, [r7, #28]
   1d528:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1d52a:	69fb      	ldr	r3, [r7, #28]
   1d52c:	699b      	ldr	r3, [r3, #24]
   1d52e:	2b00      	cmp	r3, #0
   1d530:	d101      	bne.n	1d536 <prvProcessReceivedCommands+0xba>
   1d532:	b672      	cpsid	i
   1d534:	e7fe      	b.n	1d534 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1d536:	69fb      	ldr	r3, [r7, #28]
   1d538:	699a      	ldr	r2, [r3, #24]
   1d53a:	69bb      	ldr	r3, [r7, #24]
   1d53c:	18d1      	adds	r1, r2, r3
   1d53e:	69bb      	ldr	r3, [r7, #24]
   1d540:	69ba      	ldr	r2, [r7, #24]
   1d542:	69f8      	ldr	r0, [r7, #28]
   1d544:	4c0e      	ldr	r4, [pc, #56]	; (1d580 <prvProcessReceivedCommands+0x104>)
   1d546:	47a0      	blx	r4
					break;
   1d548:	e005      	b.n	1d556 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1d54a:	69fb      	ldr	r3, [r7, #28]
   1d54c:	0018      	movs	r0, r3
   1d54e:	4b0e      	ldr	r3, [pc, #56]	; (1d588 <prvProcessReceivedCommands+0x10c>)
   1d550:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1d552:	e000      	b.n	1d556 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1d554:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d556:	4b0d      	ldr	r3, [pc, #52]	; (1d58c <prvProcessReceivedCommands+0x110>)
   1d558:	681b      	ldr	r3, [r3, #0]
   1d55a:	2208      	movs	r2, #8
   1d55c:	18b9      	adds	r1, r7, r2
   1d55e:	2200      	movs	r2, #0
   1d560:	0018      	movs	r0, r3
   1d562:	4b0b      	ldr	r3, [pc, #44]	; (1d590 <prvProcessReceivedCommands+0x114>)
   1d564:	4798      	blx	r3
   1d566:	1e03      	subs	r3, r0, #0
   1d568:	d18c      	bne.n	1d484 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1d56a:	46c0      	nop			; (mov r8, r8)
   1d56c:	46bd      	mov	sp, r7
   1d56e:	b009      	add	sp, #36	; 0x24
   1d570:	bd90      	pop	{r4, r7, pc}
   1d572:	46c0      	nop			; (mov r8, r8)
   1d574:	00019cbb 	.word	0x00019cbb
   1d578:	0001d3ad 	.word	0x0001d3ad
   1d57c:	00037f64 	.word	0x00037f64
   1d580:	0001d3f5 	.word	0x0001d3f5
   1d584:	0001d169 	.word	0x0001d169
   1d588:	0001a045 	.word	0x0001a045
   1d58c:	200040b4 	.word	0x200040b4
   1d590:	0001ac95 	.word	0x0001ac95

0001d594 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1d594:	b590      	push	{r4, r7, lr}
   1d596:	b089      	sub	sp, #36	; 0x24
   1d598:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d59a:	e03e      	b.n	1d61a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d59c:	4b28      	ldr	r3, [pc, #160]	; (1d640 <prvSwitchTimerLists+0xac>)
   1d59e:	681b      	ldr	r3, [r3, #0]
   1d5a0:	68db      	ldr	r3, [r3, #12]
   1d5a2:	681b      	ldr	r3, [r3, #0]
   1d5a4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d5a6:	4b26      	ldr	r3, [pc, #152]	; (1d640 <prvSwitchTimerLists+0xac>)
   1d5a8:	681b      	ldr	r3, [r3, #0]
   1d5aa:	68db      	ldr	r3, [r3, #12]
   1d5ac:	68db      	ldr	r3, [r3, #12]
   1d5ae:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d5b0:	693b      	ldr	r3, [r7, #16]
   1d5b2:	3304      	adds	r3, #4
   1d5b4:	0018      	movs	r0, r3
   1d5b6:	4b23      	ldr	r3, [pc, #140]	; (1d644 <prvSwitchTimerLists+0xb0>)
   1d5b8:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d5ba:	693b      	ldr	r3, [r7, #16]
   1d5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d5be:	693a      	ldr	r2, [r7, #16]
   1d5c0:	0010      	movs	r0, r2
   1d5c2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d5c4:	693b      	ldr	r3, [r7, #16]
   1d5c6:	69db      	ldr	r3, [r3, #28]
   1d5c8:	2b01      	cmp	r3, #1
   1d5ca:	d126      	bne.n	1d61a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1d5cc:	693b      	ldr	r3, [r7, #16]
   1d5ce:	699a      	ldr	r2, [r3, #24]
   1d5d0:	697b      	ldr	r3, [r7, #20]
   1d5d2:	18d3      	adds	r3, r2, r3
   1d5d4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1d5d6:	68fa      	ldr	r2, [r7, #12]
   1d5d8:	697b      	ldr	r3, [r7, #20]
   1d5da:	429a      	cmp	r2, r3
   1d5dc:	d90e      	bls.n	1d5fc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1d5de:	693b      	ldr	r3, [r7, #16]
   1d5e0:	68fa      	ldr	r2, [r7, #12]
   1d5e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d5e4:	693b      	ldr	r3, [r7, #16]
   1d5e6:	693a      	ldr	r2, [r7, #16]
   1d5e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d5ea:	4b15      	ldr	r3, [pc, #84]	; (1d640 <prvSwitchTimerLists+0xac>)
   1d5ec:	681a      	ldr	r2, [r3, #0]
   1d5ee:	693b      	ldr	r3, [r7, #16]
   1d5f0:	3304      	adds	r3, #4
   1d5f2:	0019      	movs	r1, r3
   1d5f4:	0010      	movs	r0, r2
   1d5f6:	4b14      	ldr	r3, [pc, #80]	; (1d648 <prvSwitchTimerLists+0xb4>)
   1d5f8:	4798      	blx	r3
   1d5fa:	e00e      	b.n	1d61a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d5fc:	697a      	ldr	r2, [r7, #20]
   1d5fe:	6938      	ldr	r0, [r7, #16]
   1d600:	2300      	movs	r3, #0
   1d602:	9300      	str	r3, [sp, #0]
   1d604:	2300      	movs	r3, #0
   1d606:	2100      	movs	r1, #0
   1d608:	4c10      	ldr	r4, [pc, #64]	; (1d64c <prvSwitchTimerLists+0xb8>)
   1d60a:	47a0      	blx	r4
   1d60c:	0003      	movs	r3, r0
   1d60e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1d610:	68bb      	ldr	r3, [r7, #8]
   1d612:	2b00      	cmp	r3, #0
   1d614:	d101      	bne.n	1d61a <prvSwitchTimerLists+0x86>
   1d616:	b672      	cpsid	i
   1d618:	e7fe      	b.n	1d618 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d61a:	4b09      	ldr	r3, [pc, #36]	; (1d640 <prvSwitchTimerLists+0xac>)
   1d61c:	681b      	ldr	r3, [r3, #0]
   1d61e:	681b      	ldr	r3, [r3, #0]
   1d620:	2b00      	cmp	r3, #0
   1d622:	d1bb      	bne.n	1d59c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1d624:	4b06      	ldr	r3, [pc, #24]	; (1d640 <prvSwitchTimerLists+0xac>)
   1d626:	681b      	ldr	r3, [r3, #0]
   1d628:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1d62a:	4b09      	ldr	r3, [pc, #36]	; (1d650 <prvSwitchTimerLists+0xbc>)
   1d62c:	681a      	ldr	r2, [r3, #0]
   1d62e:	4b04      	ldr	r3, [pc, #16]	; (1d640 <prvSwitchTimerLists+0xac>)
   1d630:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1d632:	4b07      	ldr	r3, [pc, #28]	; (1d650 <prvSwitchTimerLists+0xbc>)
   1d634:	687a      	ldr	r2, [r7, #4]
   1d636:	601a      	str	r2, [r3, #0]
}
   1d638:	46c0      	nop			; (mov r8, r8)
   1d63a:	46bd      	mov	sp, r7
   1d63c:	b007      	add	sp, #28
   1d63e:	bd90      	pop	{r4, r7, pc}
   1d640:	200040ac 	.word	0x200040ac
   1d644:	00019cbb 	.word	0x00019cbb
   1d648:	00019c4f 	.word	0x00019c4f
   1d64c:	0001d169 	.word	0x0001d169
   1d650:	200040b0 	.word	0x200040b0

0001d654 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1d654:	b580      	push	{r7, lr}
   1d656:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1d658:	4b10      	ldr	r3, [pc, #64]	; (1d69c <prvCheckForValidListAndQueue+0x48>)
   1d65a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1d65c:	4b10      	ldr	r3, [pc, #64]	; (1d6a0 <prvCheckForValidListAndQueue+0x4c>)
   1d65e:	681b      	ldr	r3, [r3, #0]
   1d660:	2b00      	cmp	r3, #0
   1d662:	d115      	bne.n	1d690 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1d664:	4b0f      	ldr	r3, [pc, #60]	; (1d6a4 <prvCheckForValidListAndQueue+0x50>)
   1d666:	0018      	movs	r0, r3
   1d668:	4b0f      	ldr	r3, [pc, #60]	; (1d6a8 <prvCheckForValidListAndQueue+0x54>)
   1d66a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1d66c:	4b0f      	ldr	r3, [pc, #60]	; (1d6ac <prvCheckForValidListAndQueue+0x58>)
   1d66e:	0018      	movs	r0, r3
   1d670:	4b0d      	ldr	r3, [pc, #52]	; (1d6a8 <prvCheckForValidListAndQueue+0x54>)
   1d672:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1d674:	4b0e      	ldr	r3, [pc, #56]	; (1d6b0 <prvCheckForValidListAndQueue+0x5c>)
   1d676:	4a0b      	ldr	r2, [pc, #44]	; (1d6a4 <prvCheckForValidListAndQueue+0x50>)
   1d678:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1d67a:	4b0e      	ldr	r3, [pc, #56]	; (1d6b4 <prvCheckForValidListAndQueue+0x60>)
   1d67c:	4a0b      	ldr	r2, [pc, #44]	; (1d6ac <prvCheckForValidListAndQueue+0x58>)
   1d67e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1d680:	2200      	movs	r2, #0
   1d682:	210c      	movs	r1, #12
   1d684:	2005      	movs	r0, #5
   1d686:	4b0c      	ldr	r3, [pc, #48]	; (1d6b8 <prvCheckForValidListAndQueue+0x64>)
   1d688:	4798      	blx	r3
   1d68a:	0002      	movs	r2, r0
   1d68c:	4b04      	ldr	r3, [pc, #16]	; (1d6a0 <prvCheckForValidListAndQueue+0x4c>)
   1d68e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d690:	4b0a      	ldr	r3, [pc, #40]	; (1d6bc <prvCheckForValidListAndQueue+0x68>)
   1d692:	4798      	blx	r3
}
   1d694:	46c0      	nop			; (mov r8, r8)
   1d696:	46bd      	mov	sp, r7
   1d698:	bd80      	pop	{r7, pc}
   1d69a:	46c0      	nop			; (mov r8, r8)
   1d69c:	00019e49 	.word	0x00019e49
   1d6a0:	200040b4 	.word	0x200040b4
   1d6a4:	20004084 	.word	0x20004084
   1d6a8:	00019bb9 	.word	0x00019bb9
   1d6ac:	20004098 	.word	0x20004098
   1d6b0:	200040ac 	.word	0x200040ac
   1d6b4:	200040b0 	.word	0x200040b0
   1d6b8:	0001a135 	.word	0x0001a135
   1d6bc:	00019e6d 	.word	0x00019e6d

0001d6c0 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1d6c0:	b580      	push	{r7, lr}
   1d6c2:	b082      	sub	sp, #8
   1d6c4:	af00      	add	r7, sp, #0
   1d6c6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1d6c8:	687b      	ldr	r3, [r7, #4]
   1d6ca:	7c1b      	ldrb	r3, [r3, #16]
   1d6cc:	2b00      	cmp	r3, #0
   1d6ce:	d00b      	beq.n	1d6e8 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1d6d0:	687b      	ldr	r3, [r7, #4]
   1d6d2:	689b      	ldr	r3, [r3, #8]
   1d6d4:	1c5a      	adds	r2, r3, #1
   1d6d6:	687b      	ldr	r3, [r7, #4]
   1d6d8:	68d9      	ldr	r1, [r3, #12]
   1d6da:	4b10      	ldr	r3, [pc, #64]	; (1d71c <advance_pointer+0x5c>)
   1d6dc:	0010      	movs	r0, r2
   1d6de:	4798      	blx	r3
   1d6e0:	000b      	movs	r3, r1
   1d6e2:	001a      	movs	r2, r3
   1d6e4:	687b      	ldr	r3, [r7, #4]
   1d6e6:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1d6e8:	687b      	ldr	r3, [r7, #4]
   1d6ea:	685b      	ldr	r3, [r3, #4]
   1d6ec:	1c5a      	adds	r2, r3, #1
   1d6ee:	687b      	ldr	r3, [r7, #4]
   1d6f0:	68d9      	ldr	r1, [r3, #12]
   1d6f2:	4b0a      	ldr	r3, [pc, #40]	; (1d71c <advance_pointer+0x5c>)
   1d6f4:	0010      	movs	r0, r2
   1d6f6:	4798      	blx	r3
   1d6f8:	000b      	movs	r3, r1
   1d6fa:	001a      	movs	r2, r3
   1d6fc:	687b      	ldr	r3, [r7, #4]
   1d6fe:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1d700:	687b      	ldr	r3, [r7, #4]
   1d702:	685a      	ldr	r2, [r3, #4]
   1d704:	687b      	ldr	r3, [r7, #4]
   1d706:	689b      	ldr	r3, [r3, #8]
   1d708:	1ad3      	subs	r3, r2, r3
   1d70a:	425a      	negs	r2, r3
   1d70c:	4153      	adcs	r3, r2
   1d70e:	b2da      	uxtb	r2, r3
   1d710:	687b      	ldr	r3, [r7, #4]
   1d712:	741a      	strb	r2, [r3, #16]
 }
   1d714:	46c0      	nop			; (mov r8, r8)
   1d716:	46bd      	mov	sp, r7
   1d718:	b002      	add	sp, #8
   1d71a:	bd80      	pop	{r7, pc}
   1d71c:	00032811 	.word	0x00032811

0001d720 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1d720:	b580      	push	{r7, lr}
   1d722:	b082      	sub	sp, #8
   1d724:	af00      	add	r7, sp, #0
   1d726:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1d728:	687b      	ldr	r3, [r7, #4]
   1d72a:	2200      	movs	r2, #0
   1d72c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1d72e:	687b      	ldr	r3, [r7, #4]
   1d730:	689b      	ldr	r3, [r3, #8]
   1d732:	1c5a      	adds	r2, r3, #1
   1d734:	687b      	ldr	r3, [r7, #4]
   1d736:	68d9      	ldr	r1, [r3, #12]
   1d738:	4b05      	ldr	r3, [pc, #20]	; (1d750 <retreat_pointer+0x30>)
   1d73a:	0010      	movs	r0, r2
   1d73c:	4798      	blx	r3
   1d73e:	000b      	movs	r3, r1
   1d740:	001a      	movs	r2, r3
   1d742:	687b      	ldr	r3, [r7, #4]
   1d744:	609a      	str	r2, [r3, #8]
 }
   1d746:	46c0      	nop			; (mov r8, r8)
   1d748:	46bd      	mov	sp, r7
   1d74a:	b002      	add	sp, #8
   1d74c:	bd80      	pop	{r7, pc}
   1d74e:	46c0      	nop			; (mov r8, r8)
   1d750:	00032811 	.word	0x00032811

0001d754 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1d754:	b580      	push	{r7, lr}
   1d756:	b084      	sub	sp, #16
   1d758:	af00      	add	r7, sp, #0
   1d75a:	6078      	str	r0, [r7, #4]
   1d75c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1d75e:	2014      	movs	r0, #20
   1d760:	4b09      	ldr	r3, [pc, #36]	; (1d788 <circular_buf_init+0x34>)
   1d762:	4798      	blx	r3
   1d764:	0003      	movs	r3, r0
   1d766:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1d768:	68fb      	ldr	r3, [r7, #12]
   1d76a:	687a      	ldr	r2, [r7, #4]
   1d76c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1d76e:	68fb      	ldr	r3, [r7, #12]
   1d770:	683a      	ldr	r2, [r7, #0]
   1d772:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1d774:	68fb      	ldr	r3, [r7, #12]
   1d776:	0018      	movs	r0, r3
   1d778:	4b04      	ldr	r3, [pc, #16]	; (1d78c <circular_buf_init+0x38>)
   1d77a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1d77c:	68fb      	ldr	r3, [r7, #12]
 }
   1d77e:	0018      	movs	r0, r3
   1d780:	46bd      	mov	sp, r7
   1d782:	b004      	add	sp, #16
   1d784:	bd80      	pop	{r7, pc}
   1d786:	46c0      	nop			; (mov r8, r8)
   1d788:	00034681 	.word	0x00034681
   1d78c:	0001d791 	.word	0x0001d791

0001d790 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1d790:	b580      	push	{r7, lr}
   1d792:	b082      	sub	sp, #8
   1d794:	af00      	add	r7, sp, #0
   1d796:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1d798:	687b      	ldr	r3, [r7, #4]
   1d79a:	2200      	movs	r2, #0
   1d79c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1d79e:	687b      	ldr	r3, [r7, #4]
   1d7a0:	2200      	movs	r2, #0
   1d7a2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1d7a4:	687b      	ldr	r3, [r7, #4]
   1d7a6:	2200      	movs	r2, #0
   1d7a8:	741a      	strb	r2, [r3, #16]
 }
   1d7aa:	46c0      	nop			; (mov r8, r8)
   1d7ac:	46bd      	mov	sp, r7
   1d7ae:	b002      	add	sp, #8
   1d7b0:	bd80      	pop	{r7, pc}
	...

0001d7b4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1d7b4:	b580      	push	{r7, lr}
   1d7b6:	b082      	sub	sp, #8
   1d7b8:	af00      	add	r7, sp, #0
   1d7ba:	6078      	str	r0, [r7, #4]
   1d7bc:	000a      	movs	r2, r1
   1d7be:	1cfb      	adds	r3, r7, #3
   1d7c0:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1d7c2:	687b      	ldr	r3, [r7, #4]
   1d7c4:	681a      	ldr	r2, [r3, #0]
   1d7c6:	687b      	ldr	r3, [r7, #4]
   1d7c8:	685b      	ldr	r3, [r3, #4]
   1d7ca:	18d3      	adds	r3, r2, r3
   1d7cc:	1cfa      	adds	r2, r7, #3
   1d7ce:	7812      	ldrb	r2, [r2, #0]
   1d7d0:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1d7d2:	687b      	ldr	r3, [r7, #4]
   1d7d4:	0018      	movs	r0, r3
   1d7d6:	4b03      	ldr	r3, [pc, #12]	; (1d7e4 <circular_buf_put+0x30>)
   1d7d8:	4798      	blx	r3
 }
   1d7da:	46c0      	nop			; (mov r8, r8)
   1d7dc:	46bd      	mov	sp, r7
   1d7de:	b002      	add	sp, #8
   1d7e0:	bd80      	pop	{r7, pc}
   1d7e2:	46c0      	nop			; (mov r8, r8)
   1d7e4:	0001d6c1 	.word	0x0001d6c1

0001d7e8 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1d7e8:	b580      	push	{r7, lr}
   1d7ea:	b084      	sub	sp, #16
   1d7ec:	af00      	add	r7, sp, #0
   1d7ee:	6078      	str	r0, [r7, #4]
   1d7f0:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1d7f2:	2301      	movs	r3, #1
   1d7f4:	425b      	negs	r3, r3
   1d7f6:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1d7f8:	687b      	ldr	r3, [r7, #4]
   1d7fa:	0018      	movs	r0, r3
   1d7fc:	4b0d      	ldr	r3, [pc, #52]	; (1d834 <circular_buf_get+0x4c>)
   1d7fe:	4798      	blx	r3
   1d800:	0003      	movs	r3, r0
   1d802:	001a      	movs	r2, r3
   1d804:	2301      	movs	r3, #1
   1d806:	4053      	eors	r3, r2
   1d808:	b2db      	uxtb	r3, r3
   1d80a:	2b00      	cmp	r3, #0
   1d80c:	d00d      	beq.n	1d82a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1d80e:	687b      	ldr	r3, [r7, #4]
   1d810:	681a      	ldr	r2, [r3, #0]
   1d812:	687b      	ldr	r3, [r7, #4]
   1d814:	689b      	ldr	r3, [r3, #8]
   1d816:	18d3      	adds	r3, r2, r3
   1d818:	781a      	ldrb	r2, [r3, #0]
   1d81a:	683b      	ldr	r3, [r7, #0]
   1d81c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1d81e:	687b      	ldr	r3, [r7, #4]
   1d820:	0018      	movs	r0, r3
   1d822:	4b05      	ldr	r3, [pc, #20]	; (1d838 <circular_buf_get+0x50>)
   1d824:	4798      	blx	r3

		 r = 0;
   1d826:	2300      	movs	r3, #0
   1d828:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1d82a:	68fb      	ldr	r3, [r7, #12]
 }
   1d82c:	0018      	movs	r0, r3
   1d82e:	46bd      	mov	sp, r7
   1d830:	b004      	add	sp, #16
   1d832:	bd80      	pop	{r7, pc}
   1d834:	0001d83d 	.word	0x0001d83d
   1d838:	0001d721 	.word	0x0001d721

0001d83c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1d83c:	b580      	push	{r7, lr}
   1d83e:	b082      	sub	sp, #8
   1d840:	af00      	add	r7, sp, #0
   1d842:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1d844:	687b      	ldr	r3, [r7, #4]
   1d846:	7c1b      	ldrb	r3, [r3, #16]
   1d848:	2201      	movs	r2, #1
   1d84a:	4053      	eors	r3, r2
   1d84c:	b2db      	uxtb	r3, r3
   1d84e:	2b00      	cmp	r3, #0
   1d850:	d007      	beq.n	1d862 <circular_buf_empty+0x26>
   1d852:	687b      	ldr	r3, [r7, #4]
   1d854:	685a      	ldr	r2, [r3, #4]
   1d856:	687b      	ldr	r3, [r7, #4]
   1d858:	689b      	ldr	r3, [r3, #8]
   1d85a:	429a      	cmp	r2, r3
   1d85c:	d101      	bne.n	1d862 <circular_buf_empty+0x26>
   1d85e:	2301      	movs	r3, #1
   1d860:	e000      	b.n	1d864 <circular_buf_empty+0x28>
   1d862:	2300      	movs	r3, #0
   1d864:	1c1a      	adds	r2, r3, #0
   1d866:	2301      	movs	r3, #1
   1d868:	4013      	ands	r3, r2
   1d86a:	b2db      	uxtb	r3, r3
 }
   1d86c:	0018      	movs	r0, r3
   1d86e:	46bd      	mov	sp, r7
   1d870:	b002      	add	sp, #8
   1d872:	bd80      	pop	{r7, pc}

0001d874 <system_interrupt_enable>:
{
   1d874:	b580      	push	{r7, lr}
   1d876:	b082      	sub	sp, #8
   1d878:	af00      	add	r7, sp, #0
   1d87a:	0002      	movs	r2, r0
   1d87c:	1dfb      	adds	r3, r7, #7
   1d87e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d880:	4b06      	ldr	r3, [pc, #24]	; (1d89c <system_interrupt_enable+0x28>)
   1d882:	1dfa      	adds	r2, r7, #7
   1d884:	7812      	ldrb	r2, [r2, #0]
   1d886:	0011      	movs	r1, r2
   1d888:	221f      	movs	r2, #31
   1d88a:	400a      	ands	r2, r1
   1d88c:	2101      	movs	r1, #1
   1d88e:	4091      	lsls	r1, r2
   1d890:	000a      	movs	r2, r1
   1d892:	601a      	str	r2, [r3, #0]
}
   1d894:	46c0      	nop			; (mov r8, r8)
   1d896:	46bd      	mov	sp, r7
   1d898:	b002      	add	sp, #8
   1d89a:	bd80      	pop	{r7, pc}
   1d89c:	e000e100 	.word	0xe000e100

0001d8a0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1d8a0:	b580      	push	{r7, lr}
   1d8a2:	b084      	sub	sp, #16
   1d8a4:	af00      	add	r7, sp, #0
   1d8a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1d8a8:	687b      	ldr	r3, [r7, #4]
   1d8aa:	681b      	ldr	r3, [r3, #0]
   1d8ac:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1d8ae:	68fb      	ldr	r3, [r7, #12]
   1d8b0:	69db      	ldr	r3, [r3, #28]
   1d8b2:	1e5a      	subs	r2, r3, #1
   1d8b4:	4193      	sbcs	r3, r2
   1d8b6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1d8b8:	0018      	movs	r0, r3
   1d8ba:	46bd      	mov	sp, r7
   1d8bc:	b004      	add	sp, #16
   1d8be:	bd80      	pop	{r7, pc}

0001d8c0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1d8c0:	b580      	push	{r7, lr}
   1d8c2:	b082      	sub	sp, #8
   1d8c4:	af00      	add	r7, sp, #0
   1d8c6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1d8c8:	46c0      	nop			; (mov r8, r8)
   1d8ca:	687b      	ldr	r3, [r7, #4]
   1d8cc:	0018      	movs	r0, r3
   1d8ce:	4b04      	ldr	r3, [pc, #16]	; (1d8e0 <_usart_wait_for_sync+0x20>)
   1d8d0:	4798      	blx	r3
   1d8d2:	1e03      	subs	r3, r0, #0
   1d8d4:	d1f9      	bne.n	1d8ca <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1d8d6:	46c0      	nop			; (mov r8, r8)
   1d8d8:	46bd      	mov	sp, r7
   1d8da:	b002      	add	sp, #8
   1d8dc:	bd80      	pop	{r7, pc}
   1d8de:	46c0      	nop			; (mov r8, r8)
   1d8e0:	0001d8a1 	.word	0x0001d8a1

0001d8e4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1d8e4:	b580      	push	{r7, lr}
   1d8e6:	b082      	sub	sp, #8
   1d8e8:	af00      	add	r7, sp, #0
   1d8ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1d8ec:	687b      	ldr	r3, [r7, #4]
   1d8ee:	2280      	movs	r2, #128	; 0x80
   1d8f0:	05d2      	lsls	r2, r2, #23
   1d8f2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1d8f4:	687b      	ldr	r3, [r7, #4]
   1d8f6:	2200      	movs	r2, #0
   1d8f8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1d8fa:	687b      	ldr	r3, [r7, #4]
   1d8fc:	22ff      	movs	r2, #255	; 0xff
   1d8fe:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1d900:	687b      	ldr	r3, [r7, #4]
   1d902:	2200      	movs	r2, #0
   1d904:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1d906:	687b      	ldr	r3, [r7, #4]
   1d908:	2200      	movs	r2, #0
   1d90a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1d90c:	687b      	ldr	r3, [r7, #4]
   1d90e:	2296      	movs	r2, #150	; 0x96
   1d910:	0192      	lsls	r2, r2, #6
   1d912:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1d914:	687b      	ldr	r3, [r7, #4]
   1d916:	2224      	movs	r2, #36	; 0x24
   1d918:	2101      	movs	r1, #1
   1d91a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1d91c:	687b      	ldr	r3, [r7, #4]
   1d91e:	2225      	movs	r2, #37	; 0x25
   1d920:	2101      	movs	r1, #1
   1d922:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1d924:	687b      	ldr	r3, [r7, #4]
   1d926:	2226      	movs	r2, #38	; 0x26
   1d928:	2100      	movs	r1, #0
   1d92a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1d92c:	687b      	ldr	r3, [r7, #4]
   1d92e:	2227      	movs	r2, #39	; 0x27
   1d930:	2100      	movs	r1, #0
   1d932:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1d934:	687b      	ldr	r3, [r7, #4]
   1d936:	2200      	movs	r2, #0
   1d938:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1d93a:	687b      	ldr	r3, [r7, #4]
   1d93c:	2288      	movs	r2, #136	; 0x88
   1d93e:	0352      	lsls	r2, r2, #13
   1d940:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1d942:	687b      	ldr	r3, [r7, #4]
   1d944:	222c      	movs	r2, #44	; 0x2c
   1d946:	2100      	movs	r1, #0
   1d948:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1d94a:	687b      	ldr	r3, [r7, #4]
   1d94c:	222d      	movs	r2, #45	; 0x2d
   1d94e:	2100      	movs	r1, #0
   1d950:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1d952:	687b      	ldr	r3, [r7, #4]
   1d954:	2200      	movs	r2, #0
   1d956:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1d958:	687b      	ldr	r3, [r7, #4]
   1d95a:	2200      	movs	r2, #0
   1d95c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1d95e:	687b      	ldr	r3, [r7, #4]
   1d960:	2200      	movs	r2, #0
   1d962:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1d964:	687b      	ldr	r3, [r7, #4]
   1d966:	2200      	movs	r2, #0
   1d968:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1d96a:	687b      	ldr	r3, [r7, #4]
   1d96c:	2200      	movs	r2, #0
   1d96e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1d970:	687b      	ldr	r3, [r7, #4]
   1d972:	2200      	movs	r2, #0
   1d974:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1d976:	687b      	ldr	r3, [r7, #4]
   1d978:	2200      	movs	r2, #0
   1d97a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1d97c:	687b      	ldr	r3, [r7, #4]
   1d97e:	2200      	movs	r2, #0
   1d980:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1d982:	687b      	ldr	r3, [r7, #4]
   1d984:	2200      	movs	r2, #0
   1d986:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1d988:	687b      	ldr	r3, [r7, #4]
   1d98a:	2200      	movs	r2, #0
   1d98c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1d98e:	687b      	ldr	r3, [r7, #4]
   1d990:	2213      	movs	r2, #19
   1d992:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1d994:	687b      	ldr	r3, [r7, #4]
   1d996:	2200      	movs	r2, #0
   1d998:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1d99a:	46c0      	nop			; (mov r8, r8)
   1d99c:	46bd      	mov	sp, r7
   1d99e:	b002      	add	sp, #8
   1d9a0:	bd80      	pop	{r7, pc}
	...

0001d9a4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1d9a4:	b580      	push	{r7, lr}
   1d9a6:	b084      	sub	sp, #16
   1d9a8:	af00      	add	r7, sp, #0
   1d9aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1d9ac:	687b      	ldr	r3, [r7, #4]
   1d9ae:	681b      	ldr	r3, [r3, #0]
   1d9b0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1d9b2:	687b      	ldr	r3, [r7, #4]
   1d9b4:	681b      	ldr	r3, [r3, #0]
   1d9b6:	0018      	movs	r0, r3
   1d9b8:	4b09      	ldr	r3, [pc, #36]	; (1d9e0 <usart_enable+0x3c>)
   1d9ba:	4798      	blx	r3
   1d9bc:	0003      	movs	r3, r0
   1d9be:	0018      	movs	r0, r3
   1d9c0:	4b08      	ldr	r3, [pc, #32]	; (1d9e4 <usart_enable+0x40>)
   1d9c2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1d9c4:	687b      	ldr	r3, [r7, #4]
   1d9c6:	0018      	movs	r0, r3
   1d9c8:	4b07      	ldr	r3, [pc, #28]	; (1d9e8 <usart_enable+0x44>)
   1d9ca:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1d9cc:	68fb      	ldr	r3, [r7, #12]
   1d9ce:	681b      	ldr	r3, [r3, #0]
   1d9d0:	2202      	movs	r2, #2
   1d9d2:	431a      	orrs	r2, r3
   1d9d4:	68fb      	ldr	r3, [r7, #12]
   1d9d6:	601a      	str	r2, [r3, #0]
}
   1d9d8:	46c0      	nop			; (mov r8, r8)
   1d9da:	46bd      	mov	sp, r7
   1d9dc:	b004      	add	sp, #16
   1d9de:	bd80      	pop	{r7, pc}
   1d9e0:	000273a9 	.word	0x000273a9
   1d9e4:	0001d875 	.word	0x0001d875
   1d9e8:	0001d8c1 	.word	0x0001d8c1

0001d9ec <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1d9ec:	b580      	push	{r7, lr}
   1d9ee:	b082      	sub	sp, #8
   1d9f0:	af00      	add	r7, sp, #0
   1d9f2:	6078      	str	r0, [r7, #4]
   1d9f4:	000a      	movs	r2, r1
   1d9f6:	1cfb      	adds	r3, r7, #3
   1d9f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1d9fa:	687b      	ldr	r3, [r7, #4]
   1d9fc:	2231      	movs	r2, #49	; 0x31
   1d9fe:	5c9b      	ldrb	r3, [r3, r2]
   1da00:	b25a      	sxtb	r2, r3
   1da02:	1cfb      	adds	r3, r7, #3
   1da04:	781b      	ldrb	r3, [r3, #0]
   1da06:	2101      	movs	r1, #1
   1da08:	4099      	lsls	r1, r3
   1da0a:	000b      	movs	r3, r1
   1da0c:	b25b      	sxtb	r3, r3
   1da0e:	4313      	orrs	r3, r2
   1da10:	b25b      	sxtb	r3, r3
   1da12:	b2d9      	uxtb	r1, r3
   1da14:	687b      	ldr	r3, [r7, #4]
   1da16:	2231      	movs	r2, #49	; 0x31
   1da18:	5499      	strb	r1, [r3, r2]

}
   1da1a:	46c0      	nop			; (mov r8, r8)
   1da1c:	46bd      	mov	sp, r7
   1da1e:	b002      	add	sp, #8
   1da20:	bd80      	pop	{r7, pc}
	...

0001da24 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1da24:	b580      	push	{r7, lr}
   1da26:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1da28:	2380      	movs	r3, #128	; 0x80
   1da2a:	009a      	lsls	r2, r3, #2
   1da2c:	4b0f      	ldr	r3, [pc, #60]	; (1da6c <InitializeSerialConsole+0x48>)
   1da2e:	0011      	movs	r1, r2
   1da30:	0018      	movs	r0, r3
   1da32:	4b0f      	ldr	r3, [pc, #60]	; (1da70 <InitializeSerialConsole+0x4c>)
   1da34:	4798      	blx	r3
   1da36:	0002      	movs	r2, r0
   1da38:	4b0e      	ldr	r3, [pc, #56]	; (1da74 <InitializeSerialConsole+0x50>)
   1da3a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1da3c:	2380      	movs	r3, #128	; 0x80
   1da3e:	009a      	lsls	r2, r3, #2
   1da40:	4b0d      	ldr	r3, [pc, #52]	; (1da78 <InitializeSerialConsole+0x54>)
   1da42:	0011      	movs	r1, r2
   1da44:	0018      	movs	r0, r3
   1da46:	4b0a      	ldr	r3, [pc, #40]	; (1da70 <InitializeSerialConsole+0x4c>)
   1da48:	4798      	blx	r3
   1da4a:	0002      	movs	r2, r0
   1da4c:	4b0b      	ldr	r3, [pc, #44]	; (1da7c <InitializeSerialConsole+0x58>)
   1da4e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1da50:	4b0b      	ldr	r3, [pc, #44]	; (1da80 <InitializeSerialConsole+0x5c>)
   1da52:	4798      	blx	r3
    configure_usart_callbacks();
   1da54:	4b0b      	ldr	r3, [pc, #44]	; (1da84 <InitializeSerialConsole+0x60>)
   1da56:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1da58:	490b      	ldr	r1, [pc, #44]	; (1da88 <InitializeSerialConsole+0x64>)
   1da5a:	4b0c      	ldr	r3, [pc, #48]	; (1da8c <InitializeSerialConsole+0x68>)
   1da5c:	2201      	movs	r2, #1
   1da5e:	0018      	movs	r0, r3
   1da60:	4b0b      	ldr	r3, [pc, #44]	; (1da90 <InitializeSerialConsole+0x6c>)
   1da62:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1da64:	46c0      	nop			; (mov r8, r8)
   1da66:	46bd      	mov	sp, r7
   1da68:	bd80      	pop	{r7, pc}
   1da6a:	46c0      	nop			; (mov r8, r8)
   1da6c:	200056e4 	.word	0x200056e4
   1da70:	0001d755 	.word	0x0001d755
   1da74:	200054dc 	.word	0x200054dc
   1da78:	200054e4 	.word	0x200054e4
   1da7c:	200058e8 	.word	0x200058e8
   1da80:	0001dbf9 	.word	0x0001dbf9
   1da84:	0001dc71 	.word	0x0001dc71
   1da88:	200054e0 	.word	0x200054e0
   1da8c:	200054a8 	.word	0x200054a8
   1da90:	00028c51 	.word	0x00028c51

0001da94 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1da94:	b580      	push	{r7, lr}
   1da96:	b084      	sub	sp, #16
   1da98:	af00      	add	r7, sp, #0
   1da9a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1da9c:	4b1a      	ldr	r3, [pc, #104]	; (1db08 <SerialConsoleWriteString+0x74>)
   1da9e:	4798      	blx	r3
    if (string != NULL) {
   1daa0:	687b      	ldr	r3, [r7, #4]
   1daa2:	2b00      	cmp	r3, #0
   1daa4:	d02a      	beq.n	1dafc <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1daa6:	2300      	movs	r3, #0
   1daa8:	60fb      	str	r3, [r7, #12]
   1daaa:	e00b      	b.n	1dac4 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1daac:	4b17      	ldr	r3, [pc, #92]	; (1db0c <SerialConsoleWriteString+0x78>)
   1daae:	6818      	ldr	r0, [r3, #0]
   1dab0:	687a      	ldr	r2, [r7, #4]
   1dab2:	68fb      	ldr	r3, [r7, #12]
   1dab4:	18d3      	adds	r3, r2, r3
   1dab6:	781b      	ldrb	r3, [r3, #0]
   1dab8:	0019      	movs	r1, r3
   1daba:	4b15      	ldr	r3, [pc, #84]	; (1db10 <SerialConsoleWriteString+0x7c>)
   1dabc:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1dabe:	68fb      	ldr	r3, [r7, #12]
   1dac0:	3301      	adds	r3, #1
   1dac2:	60fb      	str	r3, [r7, #12]
   1dac4:	687b      	ldr	r3, [r7, #4]
   1dac6:	0018      	movs	r0, r3
   1dac8:	4b12      	ldr	r3, [pc, #72]	; (1db14 <SerialConsoleWriteString+0x80>)
   1daca:	4798      	blx	r3
   1dacc:	0002      	movs	r2, r0
   1dace:	68fb      	ldr	r3, [r7, #12]
   1dad0:	429a      	cmp	r2, r3
   1dad2:	d8eb      	bhi.n	1daac <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1dad4:	4b10      	ldr	r3, [pc, #64]	; (1db18 <SerialConsoleWriteString+0x84>)
   1dad6:	2101      	movs	r1, #1
   1dad8:	0018      	movs	r0, r3
   1dada:	4b10      	ldr	r3, [pc, #64]	; (1db1c <SerialConsoleWriteString+0x88>)
   1dadc:	4798      	blx	r3
   1dade:	1e03      	subs	r3, r0, #0
   1dae0:	d10c      	bne.n	1dafc <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1dae2:	4b0a      	ldr	r3, [pc, #40]	; (1db0c <SerialConsoleWriteString+0x78>)
   1dae4:	681b      	ldr	r3, [r3, #0]
   1dae6:	4a0e      	ldr	r2, [pc, #56]	; (1db20 <SerialConsoleWriteString+0x8c>)
   1dae8:	0011      	movs	r1, r2
   1daea:	0018      	movs	r0, r3
   1daec:	4b0d      	ldr	r3, [pc, #52]	; (1db24 <SerialConsoleWriteString+0x90>)
   1daee:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1daf0:	490b      	ldr	r1, [pc, #44]	; (1db20 <SerialConsoleWriteString+0x8c>)
   1daf2:	4b09      	ldr	r3, [pc, #36]	; (1db18 <SerialConsoleWriteString+0x84>)
   1daf4:	2201      	movs	r2, #1
   1daf6:	0018      	movs	r0, r3
   1daf8:	4b0b      	ldr	r3, [pc, #44]	; (1db28 <SerialConsoleWriteString+0x94>)
   1dafa:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1dafc:	4b0b      	ldr	r3, [pc, #44]	; (1db2c <SerialConsoleWriteString+0x98>)
   1dafe:	4798      	blx	r3
}
   1db00:	46c0      	nop			; (mov r8, r8)
   1db02:	46bd      	mov	sp, r7
   1db04:	b004      	add	sp, #16
   1db06:	bd80      	pop	{r7, pc}
   1db08:	0001c101 	.word	0x0001c101
   1db0c:	200058e8 	.word	0x200058e8
   1db10:	0001d7b5 	.word	0x0001d7b5
   1db14:	00034a97 	.word	0x00034a97
   1db18:	200054a8 	.word	0x200054a8
   1db1c:	00028c99 	.word	0x00028c99
   1db20:	200058e4 	.word	0x200058e4
   1db24:	0001d7e9 	.word	0x0001d7e9
   1db28:	00028c09 	.word	0x00028c09
   1db2c:	0001c119 	.word	0x0001c119

0001db30 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1db30:	b580      	push	{r7, lr}
   1db32:	b084      	sub	sp, #16
   1db34:	af00      	add	r7, sp, #0
   1db36:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1db38:	4b08      	ldr	r3, [pc, #32]	; (1db5c <SerialConsoleReadCharacter+0x2c>)
   1db3a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1db3c:	4b08      	ldr	r3, [pc, #32]	; (1db60 <SerialConsoleReadCharacter+0x30>)
   1db3e:	681b      	ldr	r3, [r3, #0]
   1db40:	687a      	ldr	r2, [r7, #4]
   1db42:	0011      	movs	r1, r2
   1db44:	0018      	movs	r0, r3
   1db46:	4b07      	ldr	r3, [pc, #28]	; (1db64 <SerialConsoleReadCharacter+0x34>)
   1db48:	4798      	blx	r3
   1db4a:	0003      	movs	r3, r0
   1db4c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1db4e:	4b06      	ldr	r3, [pc, #24]	; (1db68 <SerialConsoleReadCharacter+0x38>)
   1db50:	4798      	blx	r3
    return a;
   1db52:	68fb      	ldr	r3, [r7, #12]
}
   1db54:	0018      	movs	r0, r3
   1db56:	46bd      	mov	sp, r7
   1db58:	b004      	add	sp, #16
   1db5a:	bd80      	pop	{r7, pc}
   1db5c:	0001c101 	.word	0x0001c101
   1db60:	200054dc 	.word	0x200054dc
   1db64:	0001d7e9 	.word	0x0001d7e9
   1db68:	0001c119 	.word	0x0001c119

0001db6c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1db6c:	b580      	push	{r7, lr}
   1db6e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1db70:	4b02      	ldr	r3, [pc, #8]	; (1db7c <getLogLevel+0x10>)
   1db72:	781b      	ldrb	r3, [r3, #0]
}
   1db74:	0018      	movs	r0, r3
   1db76:	46bd      	mov	sp, r7
   1db78:	bd80      	pop	{r7, pc}
   1db7a:	46c0      	nop			; (mov r8, r8)
   1db7c:	200040c0 	.word	0x200040c0

0001db80 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1db80:	b40e      	push	{r1, r2, r3}
   1db82:	b590      	push	{r4, r7, lr}
   1db84:	b084      	sub	sp, #16
   1db86:	af00      	add	r7, sp, #0
   1db88:	0002      	movs	r2, r0
   1db8a:	1dfb      	adds	r3, r7, #7
   1db8c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1db8e:	4b0e      	ldr	r3, [pc, #56]	; (1dbc8 <LogMessage+0x48>)
   1db90:	4798      	blx	r3
   1db92:	0003      	movs	r3, r0
   1db94:	001a      	movs	r2, r3
   1db96:	1dfb      	adds	r3, r7, #7
   1db98:	781b      	ldrb	r3, [r3, #0]
   1db9a:	4293      	cmp	r3, r2
   1db9c:	d30c      	bcc.n	1dbb8 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1db9e:	2320      	movs	r3, #32
   1dba0:	18fb      	adds	r3, r7, r3
   1dba2:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1dba4:	68fb      	ldr	r3, [r7, #12]
   1dba6:	69fa      	ldr	r2, [r7, #28]
   1dba8:	4808      	ldr	r0, [pc, #32]	; (1dbcc <LogMessage+0x4c>)
   1dbaa:	217f      	movs	r1, #127	; 0x7f
   1dbac:	4c08      	ldr	r4, [pc, #32]	; (1dbd0 <LogMessage+0x50>)
   1dbae:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1dbb0:	4b06      	ldr	r3, [pc, #24]	; (1dbcc <LogMessage+0x4c>)
   1dbb2:	0018      	movs	r0, r3
   1dbb4:	4b07      	ldr	r3, [pc, #28]	; (1dbd4 <LogMessage+0x54>)
   1dbb6:	4798      	blx	r3
        va_end(ap);
    }
};
   1dbb8:	46c0      	nop			; (mov r8, r8)
   1dbba:	46bd      	mov	sp, r7
   1dbbc:	b004      	add	sp, #16
   1dbbe:	bc90      	pop	{r4, r7}
   1dbc0:	bc08      	pop	{r3}
   1dbc2:	b003      	add	sp, #12
   1dbc4:	4718      	bx	r3
   1dbc6:	46c0      	nop			; (mov r8, r8)
   1dbc8:	0001db6d 	.word	0x0001db6d
   1dbcc:	20005428 	.word	0x20005428
   1dbd0:	00034cd1 	.word	0x00034cd1
   1dbd4:	0001da95 	.word	0x0001da95

0001dbd8 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1dbd8:	b40f      	push	{r0, r1, r2, r3}
   1dbda:	b580      	push	{r7, lr}
   1dbdc:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1dbde:	68bb      	ldr	r3, [r7, #8]
   1dbe0:	0019      	movs	r1, r3
   1dbe2:	2001      	movs	r0, #1
   1dbe4:	4b03      	ldr	r3, [pc, #12]	; (1dbf4 <LogMessageDebug+0x1c>)
   1dbe6:	4798      	blx	r3
};
   1dbe8:	46c0      	nop			; (mov r8, r8)
   1dbea:	46bd      	mov	sp, r7
   1dbec:	bc80      	pop	{r7}
   1dbee:	bc08      	pop	{r3}
   1dbf0:	b004      	add	sp, #16
   1dbf2:	4718      	bx	r3
   1dbf4:	0001db81 	.word	0x0001db81

0001dbf8 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1dbf8:	b580      	push	{r7, lr}
   1dbfa:	b090      	sub	sp, #64	; 0x40
   1dbfc:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1dbfe:	003b      	movs	r3, r7
   1dc00:	0018      	movs	r0, r3
   1dc02:	4b14      	ldr	r3, [pc, #80]	; (1dc54 <configure_usart+0x5c>)
   1dc04:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1dc06:	003b      	movs	r3, r7
   1dc08:	22e1      	movs	r2, #225	; 0xe1
   1dc0a:	0252      	lsls	r2, r2, #9
   1dc0c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1dc0e:	003b      	movs	r3, r7
   1dc10:	22c4      	movs	r2, #196	; 0xc4
   1dc12:	0392      	lsls	r2, r2, #14
   1dc14:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1dc16:	003b      	movs	r3, r7
   1dc18:	2201      	movs	r2, #1
   1dc1a:	4252      	negs	r2, r2
   1dc1c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1dc1e:	003b      	movs	r3, r7
   1dc20:	2201      	movs	r2, #1
   1dc22:	4252      	negs	r2, r2
   1dc24:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1dc26:	003b      	movs	r3, r7
   1dc28:	4a0b      	ldr	r2, [pc, #44]	; (1dc58 <configure_usart+0x60>)
   1dc2a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1dc2c:	003b      	movs	r3, r7
   1dc2e:	4a0b      	ldr	r2, [pc, #44]	; (1dc5c <configure_usart+0x64>)
   1dc30:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1dc32:	46c0      	nop			; (mov r8, r8)
   1dc34:	003a      	movs	r2, r7
   1dc36:	490a      	ldr	r1, [pc, #40]	; (1dc60 <configure_usart+0x68>)
   1dc38:	4b0a      	ldr	r3, [pc, #40]	; (1dc64 <configure_usart+0x6c>)
   1dc3a:	0018      	movs	r0, r3
   1dc3c:	4b0a      	ldr	r3, [pc, #40]	; (1dc68 <configure_usart+0x70>)
   1dc3e:	4798      	blx	r3
   1dc40:	1e03      	subs	r3, r0, #0
   1dc42:	d1f7      	bne.n	1dc34 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1dc44:	4b07      	ldr	r3, [pc, #28]	; (1dc64 <configure_usart+0x6c>)
   1dc46:	0018      	movs	r0, r3
   1dc48:	4b08      	ldr	r3, [pc, #32]	; (1dc6c <configure_usart+0x74>)
   1dc4a:	4798      	blx	r3
}
   1dc4c:	46c0      	nop			; (mov r8, r8)
   1dc4e:	46bd      	mov	sp, r7
   1dc50:	b010      	add	sp, #64	; 0x40
   1dc52:	bd80      	pop	{r7, pc}
   1dc54:	0001d8e5 	.word	0x0001d8e5
   1dc58:	002a0003 	.word	0x002a0003
   1dc5c:	002b0003 	.word	0x002b0003
   1dc60:	42001800 	.word	0x42001800
   1dc64:	200054a8 	.word	0x200054a8
   1dc68:	0002880d 	.word	0x0002880d
   1dc6c:	0001d9a5 	.word	0x0001d9a5

0001dc70 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1dc70:	b580      	push	{r7, lr}
   1dc72:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1dc74:	490c      	ldr	r1, [pc, #48]	; (1dca8 <configure_usart_callbacks+0x38>)
   1dc76:	4b0d      	ldr	r3, [pc, #52]	; (1dcac <configure_usart_callbacks+0x3c>)
   1dc78:	2200      	movs	r2, #0
   1dc7a:	0018      	movs	r0, r3
   1dc7c:	4b0c      	ldr	r3, [pc, #48]	; (1dcb0 <configure_usart_callbacks+0x40>)
   1dc7e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1dc80:	490c      	ldr	r1, [pc, #48]	; (1dcb4 <configure_usart_callbacks+0x44>)
   1dc82:	4b0a      	ldr	r3, [pc, #40]	; (1dcac <configure_usart_callbacks+0x3c>)
   1dc84:	2201      	movs	r2, #1
   1dc86:	0018      	movs	r0, r3
   1dc88:	4b09      	ldr	r3, [pc, #36]	; (1dcb0 <configure_usart_callbacks+0x40>)
   1dc8a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1dc8c:	4b07      	ldr	r3, [pc, #28]	; (1dcac <configure_usart_callbacks+0x3c>)
   1dc8e:	2100      	movs	r1, #0
   1dc90:	0018      	movs	r0, r3
   1dc92:	4b09      	ldr	r3, [pc, #36]	; (1dcb8 <configure_usart_callbacks+0x48>)
   1dc94:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1dc96:	4b05      	ldr	r3, [pc, #20]	; (1dcac <configure_usart_callbacks+0x3c>)
   1dc98:	2101      	movs	r1, #1
   1dc9a:	0018      	movs	r0, r3
   1dc9c:	4b06      	ldr	r3, [pc, #24]	; (1dcb8 <configure_usart_callbacks+0x48>)
   1dc9e:	4798      	blx	r3
}
   1dca0:	46c0      	nop			; (mov r8, r8)
   1dca2:	46bd      	mov	sp, r7
   1dca4:	bd80      	pop	{r7, pc}
   1dca6:	46c0      	nop			; (mov r8, r8)
   1dca8:	0001dd05 	.word	0x0001dd05
   1dcac:	200054a8 	.word	0x200054a8
   1dcb0:	00028bc1 	.word	0x00028bc1
   1dcb4:	0001dcbd 	.word	0x0001dcbd
   1dcb8:	0001d9ed 	.word	0x0001d9ed

0001dcbc <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1dcbc:	b580      	push	{r7, lr}
   1dcbe:	b082      	sub	sp, #8
   1dcc0:	af00      	add	r7, sp, #0
   1dcc2:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1dcc4:	4b09      	ldr	r3, [pc, #36]	; (1dcec <usart_read_callback+0x30>)
   1dcc6:	681a      	ldr	r2, [r3, #0]
   1dcc8:	4b09      	ldr	r3, [pc, #36]	; (1dcf0 <usart_read_callback+0x34>)
   1dcca:	781b      	ldrb	r3, [r3, #0]
   1dccc:	0019      	movs	r1, r3
   1dcce:	0010      	movs	r0, r2
   1dcd0:	4b08      	ldr	r3, [pc, #32]	; (1dcf4 <usart_read_callback+0x38>)
   1dcd2:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1dcd4:	4906      	ldr	r1, [pc, #24]	; (1dcf0 <usart_read_callback+0x34>)
   1dcd6:	4b08      	ldr	r3, [pc, #32]	; (1dcf8 <usart_read_callback+0x3c>)
   1dcd8:	2201      	movs	r2, #1
   1dcda:	0018      	movs	r0, r3
   1dcdc:	4b07      	ldr	r3, [pc, #28]	; (1dcfc <usart_read_callback+0x40>)
   1dcde:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1dce0:	4b07      	ldr	r3, [pc, #28]	; (1dd00 <usart_read_callback+0x44>)
   1dce2:	4798      	blx	r3
}
   1dce4:	46c0      	nop			; (mov r8, r8)
   1dce6:	46bd      	mov	sp, r7
   1dce8:	b002      	add	sp, #8
   1dcea:	bd80      	pop	{r7, pc}
   1dcec:	200054dc 	.word	0x200054dc
   1dcf0:	200054e0 	.word	0x200054e0
   1dcf4:	0001d7b5 	.word	0x0001d7b5
   1dcf8:	200054a8 	.word	0x200054a8
   1dcfc:	00028c51 	.word	0x00028c51
   1dd00:	000131c9 	.word	0x000131c9

0001dd04 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1dd04:	b580      	push	{r7, lr}
   1dd06:	b082      	sub	sp, #8
   1dd08:	af00      	add	r7, sp, #0
   1dd0a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1dd0c:	4b09      	ldr	r3, [pc, #36]	; (1dd34 <usart_write_callback+0x30>)
   1dd0e:	681b      	ldr	r3, [r3, #0]
   1dd10:	4a09      	ldr	r2, [pc, #36]	; (1dd38 <usart_write_callback+0x34>)
   1dd12:	0011      	movs	r1, r2
   1dd14:	0018      	movs	r0, r3
   1dd16:	4b09      	ldr	r3, [pc, #36]	; (1dd3c <usart_write_callback+0x38>)
   1dd18:	4798      	blx	r3
   1dd1a:	0003      	movs	r3, r0
   1dd1c:	3301      	adds	r3, #1
   1dd1e:	d005      	beq.n	1dd2c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1dd20:	4905      	ldr	r1, [pc, #20]	; (1dd38 <usart_write_callback+0x34>)
   1dd22:	4b07      	ldr	r3, [pc, #28]	; (1dd40 <usart_write_callback+0x3c>)
   1dd24:	2201      	movs	r2, #1
   1dd26:	0018      	movs	r0, r3
   1dd28:	4b06      	ldr	r3, [pc, #24]	; (1dd44 <usart_write_callback+0x40>)
   1dd2a:	4798      	blx	r3
    }
}
   1dd2c:	46c0      	nop			; (mov r8, r8)
   1dd2e:	46bd      	mov	sp, r7
   1dd30:	b002      	add	sp, #8
   1dd32:	bd80      	pop	{r7, pc}
   1dd34:	200058e8 	.word	0x200058e8
   1dd38:	200058e4 	.word	0x200058e4
   1dd3c:	0001d7e9 	.word	0x0001d7e9
   1dd40:	200054a8 	.word	0x200054a8
   1dd44:	00028c09 	.word	0x00028c09

0001dd48 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1dd48:	b590      	push	{r4, r7, lr}
   1dd4a:	b087      	sub	sp, #28
   1dd4c:	af00      	add	r7, sp, #0
   1dd4e:	60f8      	str	r0, [r7, #12]
   1dd50:	000c      	movs	r4, r1
   1dd52:	0010      	movs	r0, r2
   1dd54:	0019      	movs	r1, r3
   1dd56:	230a      	movs	r3, #10
   1dd58:	18fb      	adds	r3, r7, r3
   1dd5a:	1c22      	adds	r2, r4, #0
   1dd5c:	801a      	strh	r2, [r3, #0]
   1dd5e:	2308      	movs	r3, #8
   1dd60:	18fb      	adds	r3, r7, r3
   1dd62:	1c02      	adds	r2, r0, #0
   1dd64:	801a      	strh	r2, [r3, #0]
   1dd66:	1dfb      	adds	r3, r7, #7
   1dd68:	1c0a      	adds	r2, r1, #0
   1dd6a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1dd6c:	230a      	movs	r3, #10
   1dd6e:	18fb      	adds	r3, r7, r3
   1dd70:	881a      	ldrh	r2, [r3, #0]
   1dd72:	2308      	movs	r3, #8
   1dd74:	18fb      	adds	r3, r7, r3
   1dd76:	881b      	ldrh	r3, [r3, #0]
   1dd78:	1ad3      	subs	r3, r2, r3
   1dd7a:	3307      	adds	r3, #7
   1dd7c:	2b00      	cmp	r3, #0
   1dd7e:	da00      	bge.n	1dd82 <SDMMC_UNSTUFF_BITS+0x3a>
   1dd80:	3307      	adds	r3, #7
   1dd82:	10db      	asrs	r3, r3, #3
   1dd84:	3b01      	subs	r3, #1
   1dd86:	68fa      	ldr	r2, [r7, #12]
   1dd88:	18d3      	adds	r3, r2, r3
   1dd8a:	781b      	ldrb	r3, [r3, #0]
   1dd8c:	0019      	movs	r1, r3
   1dd8e:	2308      	movs	r3, #8
   1dd90:	18fb      	adds	r3, r7, r3
   1dd92:	881b      	ldrh	r3, [r3, #0]
   1dd94:	2207      	movs	r2, #7
   1dd96:	4013      	ands	r3, r2
   1dd98:	4119      	asrs	r1, r3
   1dd9a:	000b      	movs	r3, r1
   1dd9c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1dd9e:	2308      	movs	r3, #8
   1dda0:	18fb      	adds	r3, r7, r3
   1dda2:	881b      	ldrh	r3, [r3, #0]
   1dda4:	2207      	movs	r2, #7
   1dda6:	401a      	ands	r2, r3
   1dda8:	1dfb      	adds	r3, r7, #7
   1ddaa:	781b      	ldrb	r3, [r3, #0]
   1ddac:	18d3      	adds	r3, r2, r3
   1ddae:	2b08      	cmp	r3, #8
   1ddb0:	dd1c      	ble.n	1ddec <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1ddb2:	230a      	movs	r3, #10
   1ddb4:	18fb      	adds	r3, r7, r3
   1ddb6:	881a      	ldrh	r2, [r3, #0]
   1ddb8:	2308      	movs	r3, #8
   1ddba:	18fb      	adds	r3, r7, r3
   1ddbc:	881b      	ldrh	r3, [r3, #0]
   1ddbe:	1ad3      	subs	r3, r2, r3
   1ddc0:	3307      	adds	r3, #7
   1ddc2:	2b00      	cmp	r3, #0
   1ddc4:	da00      	bge.n	1ddc8 <SDMMC_UNSTUFF_BITS+0x80>
   1ddc6:	3307      	adds	r3, #7
   1ddc8:	10db      	asrs	r3, r3, #3
   1ddca:	3b02      	subs	r3, #2
   1ddcc:	68fa      	ldr	r2, [r7, #12]
   1ddce:	18d3      	adds	r3, r2, r3
   1ddd0:	781b      	ldrb	r3, [r3, #0]
   1ddd2:	0019      	movs	r1, r3
   1ddd4:	2308      	movs	r3, #8
   1ddd6:	18fb      	adds	r3, r7, r3
   1ddd8:	881b      	ldrh	r3, [r3, #0]
   1ddda:	2207      	movs	r2, #7
   1dddc:	4013      	ands	r3, r2
   1ddde:	2208      	movs	r2, #8
   1dde0:	1ad3      	subs	r3, r2, r3
   1dde2:	4099      	lsls	r1, r3
   1dde4:	000b      	movs	r3, r1
   1dde6:	697a      	ldr	r2, [r7, #20]
   1dde8:	4313      	orrs	r3, r2
   1ddea:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1ddec:	2308      	movs	r3, #8
   1ddee:	18fb      	adds	r3, r7, r3
   1ddf0:	881b      	ldrh	r3, [r3, #0]
   1ddf2:	2207      	movs	r2, #7
   1ddf4:	401a      	ands	r2, r3
   1ddf6:	1dfb      	adds	r3, r7, #7
   1ddf8:	781b      	ldrb	r3, [r3, #0]
   1ddfa:	18d3      	adds	r3, r2, r3
   1ddfc:	2b10      	cmp	r3, #16
   1ddfe:	dd1c      	ble.n	1de3a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1de00:	230a      	movs	r3, #10
   1de02:	18fb      	adds	r3, r7, r3
   1de04:	881a      	ldrh	r2, [r3, #0]
   1de06:	2308      	movs	r3, #8
   1de08:	18fb      	adds	r3, r7, r3
   1de0a:	881b      	ldrh	r3, [r3, #0]
   1de0c:	1ad3      	subs	r3, r2, r3
   1de0e:	3307      	adds	r3, #7
   1de10:	2b00      	cmp	r3, #0
   1de12:	da00      	bge.n	1de16 <SDMMC_UNSTUFF_BITS+0xce>
   1de14:	3307      	adds	r3, #7
   1de16:	10db      	asrs	r3, r3, #3
   1de18:	3b03      	subs	r3, #3
   1de1a:	68fa      	ldr	r2, [r7, #12]
   1de1c:	18d3      	adds	r3, r2, r3
   1de1e:	781b      	ldrb	r3, [r3, #0]
   1de20:	0019      	movs	r1, r3
   1de22:	2308      	movs	r3, #8
   1de24:	18fb      	adds	r3, r7, r3
   1de26:	881b      	ldrh	r3, [r3, #0]
   1de28:	2207      	movs	r2, #7
   1de2a:	4013      	ands	r3, r2
   1de2c:	2210      	movs	r2, #16
   1de2e:	1ad3      	subs	r3, r2, r3
   1de30:	4099      	lsls	r1, r3
   1de32:	000b      	movs	r3, r1
   1de34:	697a      	ldr	r2, [r7, #20]
   1de36:	4313      	orrs	r3, r2
   1de38:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1de3a:	2308      	movs	r3, #8
   1de3c:	18fb      	adds	r3, r7, r3
   1de3e:	881b      	ldrh	r3, [r3, #0]
   1de40:	2207      	movs	r2, #7
   1de42:	401a      	ands	r2, r3
   1de44:	1dfb      	adds	r3, r7, #7
   1de46:	781b      	ldrb	r3, [r3, #0]
   1de48:	18d3      	adds	r3, r2, r3
   1de4a:	2b10      	cmp	r3, #16
   1de4c:	dd1c      	ble.n	1de88 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1de4e:	230a      	movs	r3, #10
   1de50:	18fb      	adds	r3, r7, r3
   1de52:	881a      	ldrh	r2, [r3, #0]
   1de54:	2308      	movs	r3, #8
   1de56:	18fb      	adds	r3, r7, r3
   1de58:	881b      	ldrh	r3, [r3, #0]
   1de5a:	1ad3      	subs	r3, r2, r3
   1de5c:	3307      	adds	r3, #7
   1de5e:	2b00      	cmp	r3, #0
   1de60:	da00      	bge.n	1de64 <SDMMC_UNSTUFF_BITS+0x11c>
   1de62:	3307      	adds	r3, #7
   1de64:	10db      	asrs	r3, r3, #3
   1de66:	3b03      	subs	r3, #3
   1de68:	68fa      	ldr	r2, [r7, #12]
   1de6a:	18d3      	adds	r3, r2, r3
   1de6c:	781b      	ldrb	r3, [r3, #0]
   1de6e:	0019      	movs	r1, r3
   1de70:	2308      	movs	r3, #8
   1de72:	18fb      	adds	r3, r7, r3
   1de74:	881b      	ldrh	r3, [r3, #0]
   1de76:	2207      	movs	r2, #7
   1de78:	4013      	ands	r3, r2
   1de7a:	2210      	movs	r2, #16
   1de7c:	1ad3      	subs	r3, r2, r3
   1de7e:	4099      	lsls	r1, r3
   1de80:	000b      	movs	r3, r1
   1de82:	697a      	ldr	r2, [r7, #20]
   1de84:	4313      	orrs	r3, r2
   1de86:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1de88:	1dfb      	adds	r3, r7, #7
   1de8a:	781b      	ldrb	r3, [r3, #0]
   1de8c:	2201      	movs	r2, #1
   1de8e:	409a      	lsls	r2, r3
   1de90:	0013      	movs	r3, r2
   1de92:	1e5a      	subs	r2, r3, #1
   1de94:	697b      	ldr	r3, [r7, #20]
   1de96:	4013      	ands	r3, r2
   1de98:	617b      	str	r3, [r7, #20]
	return value;
   1de9a:	697b      	ldr	r3, [r7, #20]
}
   1de9c:	0018      	movs	r0, r3
   1de9e:	46bd      	mov	sp, r7
   1dea0:	b007      	add	sp, #28
   1dea2:	bd90      	pop	{r4, r7, pc}

0001dea4 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1dea4:	b580      	push	{r7, lr}
   1dea6:	b082      	sub	sp, #8
   1dea8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1deaa:	4b23      	ldr	r3, [pc, #140]	; (1df38 <mmc_spi_op_cond+0x94>)
   1deac:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1deae:	4b23      	ldr	r3, [pc, #140]	; (1df3c <mmc_spi_op_cond+0x98>)
   1deb0:	2100      	movs	r1, #0
   1deb2:	0018      	movs	r0, r3
   1deb4:	4b22      	ldr	r3, [pc, #136]	; (1df40 <mmc_spi_op_cond+0x9c>)
   1deb6:	4798      	blx	r3
   1deb8:	0003      	movs	r3, r0
   1deba:	001a      	movs	r2, r3
   1debc:	2301      	movs	r3, #1
   1debe:	4053      	eors	r3, r2
   1dec0:	b2db      	uxtb	r3, r3
   1dec2:	2b00      	cmp	r3, #0
   1dec4:	d001      	beq.n	1deca <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1dec6:	2300      	movs	r3, #0
   1dec8:	e031      	b.n	1df2e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1deca:	4b1e      	ldr	r3, [pc, #120]	; (1df44 <mmc_spi_op_cond+0xa0>)
   1decc:	4798      	blx	r3
   1dece:	0003      	movs	r3, r0
   1ded0:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1ded2:	683b      	ldr	r3, [r7, #0]
   1ded4:	2201      	movs	r2, #1
   1ded6:	4013      	ands	r3, r2
   1ded8:	d006      	beq.n	1dee8 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1deda:	687b      	ldr	r3, [r7, #4]
   1dedc:	1e5a      	subs	r2, r3, #1
   1dede:	607a      	str	r2, [r7, #4]
   1dee0:	2b00      	cmp	r3, #0
   1dee2:	d1e4      	bne.n	1deae <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1dee4:	2300      	movs	r3, #0
   1dee6:	e022      	b.n	1df2e <mmc_spi_op_cond+0x8a>
			break;
   1dee8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1deea:	4b17      	ldr	r3, [pc, #92]	; (1df48 <mmc_spi_op_cond+0xa4>)
   1deec:	2100      	movs	r1, #0
   1deee:	0018      	movs	r0, r3
   1def0:	4b13      	ldr	r3, [pc, #76]	; (1df40 <mmc_spi_op_cond+0x9c>)
   1def2:	4798      	blx	r3
   1def4:	0003      	movs	r3, r0
   1def6:	001a      	movs	r2, r3
   1def8:	2301      	movs	r3, #1
   1defa:	4053      	eors	r3, r2
   1defc:	b2db      	uxtb	r3, r3
   1defe:	2b00      	cmp	r3, #0
   1df00:	d001      	beq.n	1df06 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1df02:	2300      	movs	r3, #0
   1df04:	e013      	b.n	1df2e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1df06:	4b0f      	ldr	r3, [pc, #60]	; (1df44 <mmc_spi_op_cond+0xa0>)
   1df08:	4798      	blx	r3
   1df0a:	0002      	movs	r2, r0
   1df0c:	23c0      	movs	r3, #192	; 0xc0
   1df0e:	05db      	lsls	r3, r3, #23
   1df10:	401a      	ands	r2, r3
   1df12:	2380      	movs	r3, #128	; 0x80
   1df14:	05db      	lsls	r3, r3, #23
   1df16:	429a      	cmp	r2, r3
   1df18:	d108      	bne.n	1df2c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1df1a:	4b0c      	ldr	r3, [pc, #48]	; (1df4c <mmc_spi_op_cond+0xa8>)
   1df1c:	681a      	ldr	r2, [r3, #0]
   1df1e:	4b0b      	ldr	r3, [pc, #44]	; (1df4c <mmc_spi_op_cond+0xa8>)
   1df20:	681b      	ldr	r3, [r3, #0]
   1df22:	7adb      	ldrb	r3, [r3, #11]
   1df24:	2108      	movs	r1, #8
   1df26:	430b      	orrs	r3, r1
   1df28:	b2db      	uxtb	r3, r3
   1df2a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1df2c:	2301      	movs	r3, #1
}
   1df2e:	0018      	movs	r0, r3
   1df30:	46bd      	mov	sp, r7
   1df32:	b002      	add	sp, #8
   1df34:	bd80      	pop	{r7, pc}
   1df36:	46c0      	nop			; (mov r8, r8)
   1df38:	00001bee 	.word	0x00001bee
   1df3c:	00001101 	.word	0x00001101
   1df40:	0001f921 	.word	0x0001f921
   1df44:	0001fb61 	.word	0x0001fb61
   1df48:	0000053a 	.word	0x0000053a
   1df4c:	200040e8 	.word	0x200040e8

0001df50 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1df50:	b580      	push	{r7, lr}
   1df52:	b086      	sub	sp, #24
   1df54:	af00      	add	r7, sp, #0
   1df56:	0002      	movs	r2, r0
   1df58:	1dfb      	adds	r3, r7, #7
   1df5a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1df5c:	4b2e      	ldr	r3, [pc, #184]	; (1e018 <sd_spi_op_cond+0xc8>)
   1df5e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1df60:	4b2e      	ldr	r3, [pc, #184]	; (1e01c <sd_spi_op_cond+0xcc>)
   1df62:	2100      	movs	r1, #0
   1df64:	0018      	movs	r0, r3
   1df66:	4b2e      	ldr	r3, [pc, #184]	; (1e020 <sd_spi_op_cond+0xd0>)
   1df68:	4798      	blx	r3
   1df6a:	0003      	movs	r3, r0
   1df6c:	001a      	movs	r2, r3
   1df6e:	2301      	movs	r3, #1
   1df70:	4053      	eors	r3, r2
   1df72:	b2db      	uxtb	r3, r3
   1df74:	2b00      	cmp	r3, #0
   1df76:	d001      	beq.n	1df7c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1df78:	2300      	movs	r3, #0
   1df7a:	e048      	b.n	1e00e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1df7c:	2300      	movs	r3, #0
   1df7e:	617b      	str	r3, [r7, #20]
		if (v2) {
   1df80:	1dfb      	adds	r3, r7, #7
   1df82:	781b      	ldrb	r3, [r3, #0]
   1df84:	2b00      	cmp	r3, #0
   1df86:	d004      	beq.n	1df92 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1df88:	697b      	ldr	r3, [r7, #20]
   1df8a:	2280      	movs	r2, #128	; 0x80
   1df8c:	05d2      	lsls	r2, r2, #23
   1df8e:	4313      	orrs	r3, r2
   1df90:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1df92:	697b      	ldr	r3, [r7, #20]
   1df94:	4a23      	ldr	r2, [pc, #140]	; (1e024 <sd_spi_op_cond+0xd4>)
   1df96:	0019      	movs	r1, r3
   1df98:	0010      	movs	r0, r2
   1df9a:	4b21      	ldr	r3, [pc, #132]	; (1e020 <sd_spi_op_cond+0xd0>)
   1df9c:	4798      	blx	r3
   1df9e:	0003      	movs	r3, r0
   1dfa0:	001a      	movs	r2, r3
   1dfa2:	2301      	movs	r3, #1
   1dfa4:	4053      	eors	r3, r2
   1dfa6:	b2db      	uxtb	r3, r3
   1dfa8:	2b00      	cmp	r3, #0
   1dfaa:	d001      	beq.n	1dfb0 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1dfac:	2300      	movs	r3, #0
   1dfae:	e02e      	b.n	1e00e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1dfb0:	4b1d      	ldr	r3, [pc, #116]	; (1e028 <sd_spi_op_cond+0xd8>)
   1dfb2:	4798      	blx	r3
   1dfb4:	0003      	movs	r3, r0
   1dfb6:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1dfb8:	68fb      	ldr	r3, [r7, #12]
   1dfba:	2201      	movs	r2, #1
   1dfbc:	4013      	ands	r3, r2
   1dfbe:	d006      	beq.n	1dfce <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1dfc0:	693b      	ldr	r3, [r7, #16]
   1dfc2:	1e5a      	subs	r2, r3, #1
   1dfc4:	613a      	str	r2, [r7, #16]
   1dfc6:	2b00      	cmp	r3, #0
   1dfc8:	d1ca      	bne.n	1df60 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1dfca:	2300      	movs	r3, #0
   1dfcc:	e01f      	b.n	1e00e <sd_spi_op_cond+0xbe>
			break;
   1dfce:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1dfd0:	4b16      	ldr	r3, [pc, #88]	; (1e02c <sd_spi_op_cond+0xdc>)
   1dfd2:	2100      	movs	r1, #0
   1dfd4:	0018      	movs	r0, r3
   1dfd6:	4b12      	ldr	r3, [pc, #72]	; (1e020 <sd_spi_op_cond+0xd0>)
   1dfd8:	4798      	blx	r3
   1dfda:	0003      	movs	r3, r0
   1dfdc:	001a      	movs	r2, r3
   1dfde:	2301      	movs	r3, #1
   1dfe0:	4053      	eors	r3, r2
   1dfe2:	b2db      	uxtb	r3, r3
   1dfe4:	2b00      	cmp	r3, #0
   1dfe6:	d001      	beq.n	1dfec <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1dfe8:	2300      	movs	r3, #0
   1dfea:	e010      	b.n	1e00e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1dfec:	4b0e      	ldr	r3, [pc, #56]	; (1e028 <sd_spi_op_cond+0xd8>)
   1dfee:	4798      	blx	r3
   1dff0:	0002      	movs	r2, r0
   1dff2:	2380      	movs	r3, #128	; 0x80
   1dff4:	05db      	lsls	r3, r3, #23
   1dff6:	4013      	ands	r3, r2
   1dff8:	d008      	beq.n	1e00c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1dffa:	4b0d      	ldr	r3, [pc, #52]	; (1e030 <sd_spi_op_cond+0xe0>)
   1dffc:	681a      	ldr	r2, [r3, #0]
   1dffe:	4b0c      	ldr	r3, [pc, #48]	; (1e030 <sd_spi_op_cond+0xe0>)
   1e000:	681b      	ldr	r3, [r3, #0]
   1e002:	7adb      	ldrb	r3, [r3, #11]
   1e004:	2108      	movs	r1, #8
   1e006:	430b      	orrs	r3, r1
   1e008:	b2db      	uxtb	r3, r3
   1e00a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e00c:	2301      	movs	r3, #1
}
   1e00e:	0018      	movs	r0, r3
   1e010:	46bd      	mov	sp, r7
   1e012:	b006      	add	sp, #24
   1e014:	bd80      	pop	{r7, pc}
   1e016:	46c0      	nop			; (mov r8, r8)
   1e018:	00001bee 	.word	0x00001bee
   1e01c:	00001137 	.word	0x00001137
   1e020:	0001f921 	.word	0x0001f921
   1e024:	00001129 	.word	0x00001129
   1e028:	0001fb61 	.word	0x0001fb61
   1e02c:	0000053a 	.word	0x0000053a
   1e030:	200040e8 	.word	0x200040e8

0001e034 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1e034:	b580      	push	{r7, lr}
   1e036:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1e038:	2301      	movs	r3, #1
}
   1e03a:	0018      	movs	r0, r3
   1e03c:	46bd      	mov	sp, r7
   1e03e:	bd80      	pop	{r7, pc}

0001e040 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1e040:	b580      	push	{r7, lr}
   1e042:	b084      	sub	sp, #16
   1e044:	af00      	add	r7, sp, #0
   1e046:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1e048:	687b      	ldr	r3, [r7, #4]
   1e04a:	2200      	movs	r2, #0
   1e04c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1e04e:	23d5      	movs	r3, #213	; 0xd5
   1e050:	005b      	lsls	r3, r3, #1
   1e052:	4a14      	ldr	r2, [pc, #80]	; (1e0a4 <sd_cmd8+0x64>)
   1e054:	0019      	movs	r1, r3
   1e056:	0010      	movs	r0, r2
   1e058:	4b13      	ldr	r3, [pc, #76]	; (1e0a8 <sd_cmd8+0x68>)
   1e05a:	4798      	blx	r3
   1e05c:	0003      	movs	r3, r0
   1e05e:	001a      	movs	r2, r3
   1e060:	2301      	movs	r3, #1
   1e062:	4053      	eors	r3, r2
   1e064:	b2db      	uxtb	r3, r3
   1e066:	2b00      	cmp	r3, #0
   1e068:	d001      	beq.n	1e06e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1e06a:	2301      	movs	r3, #1
   1e06c:	e015      	b.n	1e09a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1e06e:	4b0f      	ldr	r3, [pc, #60]	; (1e0ac <sd_cmd8+0x6c>)
   1e070:	4798      	blx	r3
   1e072:	0003      	movs	r3, r0
   1e074:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1e076:	68fb      	ldr	r3, [r7, #12]
   1e078:	3301      	adds	r3, #1
   1e07a:	d101      	bne.n	1e080 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1e07c:	2301      	movs	r3, #1
   1e07e:	e00c      	b.n	1e09a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1e080:	68fb      	ldr	r3, [r7, #12]
   1e082:	051b      	lsls	r3, r3, #20
   1e084:	0d1a      	lsrs	r2, r3, #20
   1e086:	23d5      	movs	r3, #213	; 0xd5
   1e088:	005b      	lsls	r3, r3, #1
   1e08a:	429a      	cmp	r2, r3
   1e08c:	d001      	beq.n	1e092 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1e08e:	2300      	movs	r3, #0
   1e090:	e003      	b.n	1e09a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1e092:	687b      	ldr	r3, [r7, #4]
   1e094:	2201      	movs	r2, #1
   1e096:	701a      	strb	r2, [r3, #0]
	return true;
   1e098:	2301      	movs	r3, #1
}
   1e09a:	0018      	movs	r0, r3
   1e09c:	46bd      	mov	sp, r7
   1e09e:	b004      	add	sp, #16
   1e0a0:	bd80      	pop	{r7, pc}
   1e0a2:	46c0      	nop			; (mov r8, r8)
   1e0a4:	00005508 	.word	0x00005508
   1e0a8:	0001f921 	.word	0x0001f921
   1e0ac:	0001fb61 	.word	0x0001fb61

0001e0b0 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1e0b0:	b590      	push	{r4, r7, lr}
   1e0b2:	b089      	sub	sp, #36	; 0x24
   1e0b4:	af02      	add	r7, sp, #8
   1e0b6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1e0b8:	2380      	movs	r3, #128	; 0x80
   1e0ba:	009a      	lsls	r2, r3, #2
   1e0bc:	4841      	ldr	r0, [pc, #260]	; (1e1c4 <mmc_cmd8+0x114>)
   1e0be:	2300      	movs	r3, #0
   1e0c0:	9300      	str	r3, [sp, #0]
   1e0c2:	2301      	movs	r3, #1
   1e0c4:	2100      	movs	r1, #0
   1e0c6:	4c40      	ldr	r4, [pc, #256]	; (1e1c8 <mmc_cmd8+0x118>)
   1e0c8:	47a0      	blx	r4
   1e0ca:	0003      	movs	r3, r0
   1e0cc:	001a      	movs	r2, r3
   1e0ce:	2301      	movs	r3, #1
   1e0d0:	4053      	eors	r3, r2
   1e0d2:	b2db      	uxtb	r3, r3
   1e0d4:	2b00      	cmp	r3, #0
   1e0d6:	d001      	beq.n	1e0dc <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1e0d8:	2300      	movs	r3, #0
   1e0da:	e06e      	b.n	1e1ba <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e0dc:	2316      	movs	r3, #22
   1e0de:	18fb      	adds	r3, r7, r3
   1e0e0:	2200      	movs	r2, #0
   1e0e2:	801a      	strh	r2, [r3, #0]
   1e0e4:	e014      	b.n	1e110 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1e0e6:	2310      	movs	r3, #16
   1e0e8:	18fb      	adds	r3, r7, r3
   1e0ea:	0018      	movs	r0, r3
   1e0ec:	4b37      	ldr	r3, [pc, #220]	; (1e1cc <mmc_cmd8+0x11c>)
   1e0ee:	4798      	blx	r3
   1e0f0:	0003      	movs	r3, r0
   1e0f2:	001a      	movs	r2, r3
   1e0f4:	2301      	movs	r3, #1
   1e0f6:	4053      	eors	r3, r2
   1e0f8:	b2db      	uxtb	r3, r3
   1e0fa:	2b00      	cmp	r3, #0
   1e0fc:	d001      	beq.n	1e102 <mmc_cmd8+0x52>
			return false;
   1e0fe:	2300      	movs	r3, #0
   1e100:	e05b      	b.n	1e1ba <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e102:	2316      	movs	r3, #22
   1e104:	18fb      	adds	r3, r7, r3
   1e106:	881a      	ldrh	r2, [r3, #0]
   1e108:	2316      	movs	r3, #22
   1e10a:	18fb      	adds	r3, r7, r3
   1e10c:	3201      	adds	r2, #1
   1e10e:	801a      	strh	r2, [r3, #0]
   1e110:	2316      	movs	r3, #22
   1e112:	18fb      	adds	r3, r7, r3
   1e114:	881b      	ldrh	r3, [r3, #0]
   1e116:	2b31      	cmp	r3, #49	; 0x31
   1e118:	d9e5      	bls.n	1e0e6 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1e11a:	693b      	ldr	r3, [r7, #16]
   1e11c:	b2db      	uxtb	r3, r3
   1e11e:	2202      	movs	r2, #2
   1e120:	4013      	ands	r3, r2
   1e122:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1e124:	687b      	ldr	r3, [r7, #4]
   1e126:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1e128:	4b29      	ldr	r3, [pc, #164]	; (1e1d0 <mmc_cmd8+0x120>)
   1e12a:	681b      	ldr	r3, [r3, #0]
   1e12c:	330e      	adds	r3, #14
   1e12e:	0018      	movs	r0, r3
   1e130:	230c      	movs	r3, #12
   1e132:	223e      	movs	r2, #62	; 0x3e
   1e134:	2180      	movs	r1, #128	; 0x80
   1e136:	4c27      	ldr	r4, [pc, #156]	; (1e1d4 <mmc_cmd8+0x124>)
   1e138:	47a0      	blx	r4
   1e13a:	0002      	movs	r2, r0
   1e13c:	4b26      	ldr	r3, [pc, #152]	; (1e1d8 <mmc_cmd8+0x128>)
   1e13e:	429a      	cmp	r2, r3
   1e140:	d135      	bne.n	1e1ae <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e142:	e014      	b.n	1e16e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1e144:	230c      	movs	r3, #12
   1e146:	18fb      	adds	r3, r7, r3
   1e148:	0018      	movs	r0, r3
   1e14a:	4b20      	ldr	r3, [pc, #128]	; (1e1cc <mmc_cmd8+0x11c>)
   1e14c:	4798      	blx	r3
   1e14e:	0003      	movs	r3, r0
   1e150:	001a      	movs	r2, r3
   1e152:	2301      	movs	r3, #1
   1e154:	4053      	eors	r3, r2
   1e156:	b2db      	uxtb	r3, r3
   1e158:	2b00      	cmp	r3, #0
   1e15a:	d001      	beq.n	1e160 <mmc_cmd8+0xb0>
				return false;
   1e15c:	2300      	movs	r3, #0
   1e15e:	e02c      	b.n	1e1ba <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e160:	2316      	movs	r3, #22
   1e162:	18fb      	adds	r3, r7, r3
   1e164:	881a      	ldrh	r2, [r3, #0]
   1e166:	2316      	movs	r3, #22
   1e168:	18fb      	adds	r3, r7, r3
   1e16a:	3201      	adds	r2, #1
   1e16c:	801a      	strh	r2, [r3, #0]
   1e16e:	2316      	movs	r3, #22
   1e170:	18fb      	adds	r3, r7, r3
   1e172:	881b      	ldrh	r3, [r3, #0]
   1e174:	2b35      	cmp	r3, #53	; 0x35
   1e176:	d9e5      	bls.n	1e144 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1e178:	4b15      	ldr	r3, [pc, #84]	; (1e1d0 <mmc_cmd8+0x120>)
   1e17a:	681b      	ldr	r3, [r3, #0]
   1e17c:	68fa      	ldr	r2, [r7, #12]
   1e17e:	0852      	lsrs	r2, r2, #1
   1e180:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e182:	e014      	b.n	1e1ae <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1e184:	230c      	movs	r3, #12
   1e186:	18fb      	adds	r3, r7, r3
   1e188:	0018      	movs	r0, r3
   1e18a:	4b10      	ldr	r3, [pc, #64]	; (1e1cc <mmc_cmd8+0x11c>)
   1e18c:	4798      	blx	r3
   1e18e:	0003      	movs	r3, r0
   1e190:	001a      	movs	r2, r3
   1e192:	2301      	movs	r3, #1
   1e194:	4053      	eors	r3, r2
   1e196:	b2db      	uxtb	r3, r3
   1e198:	2b00      	cmp	r3, #0
   1e19a:	d001      	beq.n	1e1a0 <mmc_cmd8+0xf0>
			return false;
   1e19c:	2300      	movs	r3, #0
   1e19e:	e00c      	b.n	1e1ba <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e1a0:	2316      	movs	r3, #22
   1e1a2:	18fb      	adds	r3, r7, r3
   1e1a4:	881a      	ldrh	r2, [r3, #0]
   1e1a6:	2316      	movs	r3, #22
   1e1a8:	18fb      	adds	r3, r7, r3
   1e1aa:	3201      	adds	r2, #1
   1e1ac:	801a      	strh	r2, [r3, #0]
   1e1ae:	2316      	movs	r3, #22
   1e1b0:	18fb      	adds	r3, r7, r3
   1e1b2:	881b      	ldrh	r3, [r3, #0]
   1e1b4:	2b7f      	cmp	r3, #127	; 0x7f
   1e1b6:	d9e5      	bls.n	1e184 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1e1b8:	2301      	movs	r3, #1
}
   1e1ba:	0018      	movs	r0, r3
   1e1bc:	46bd      	mov	sp, r7
   1e1be:	b007      	add	sp, #28
   1e1c0:	bd90      	pop	{r4, r7, pc}
   1e1c2:	46c0      	nop			; (mov r8, r8)
   1e1c4:	00081108 	.word	0x00081108
   1e1c8:	0001f949 	.word	0x0001f949
   1e1cc:	0001fb75 	.word	0x0001fb75
   1e1d0:	200040e8 	.word	0x200040e8
   1e1d4:	0001dd49 	.word	0x0001dd49
   1e1d8:	00000fff 	.word	0x00000fff

0001e1dc <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1e1dc:	b590      	push	{r4, r7, lr}
   1e1de:	b083      	sub	sp, #12
   1e1e0:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1e1e2:	4b15      	ldr	r3, [pc, #84]	; (1e238 <sd_mmc_cmd9_spi+0x5c>)
   1e1e4:	681b      	ldr	r3, [r3, #0]
   1e1e6:	891b      	ldrh	r3, [r3, #8]
   1e1e8:	0419      	lsls	r1, r3, #16
   1e1ea:	4814      	ldr	r0, [pc, #80]	; (1e23c <sd_mmc_cmd9_spi+0x60>)
   1e1ec:	2301      	movs	r3, #1
   1e1ee:	9300      	str	r3, [sp, #0]
   1e1f0:	2301      	movs	r3, #1
   1e1f2:	2210      	movs	r2, #16
   1e1f4:	4c12      	ldr	r4, [pc, #72]	; (1e240 <sd_mmc_cmd9_spi+0x64>)
   1e1f6:	47a0      	blx	r4
   1e1f8:	0003      	movs	r3, r0
   1e1fa:	001a      	movs	r2, r3
   1e1fc:	2301      	movs	r3, #1
   1e1fe:	4053      	eors	r3, r2
   1e200:	b2db      	uxtb	r3, r3
   1e202:	2b00      	cmp	r3, #0
   1e204:	d001      	beq.n	1e20a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1e206:	2300      	movs	r3, #0
   1e208:	e012      	b.n	1e230 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1e20a:	4b0b      	ldr	r3, [pc, #44]	; (1e238 <sd_mmc_cmd9_spi+0x5c>)
   1e20c:	681b      	ldr	r3, [r3, #0]
   1e20e:	330e      	adds	r3, #14
   1e210:	2101      	movs	r1, #1
   1e212:	0018      	movs	r0, r3
   1e214:	4b0b      	ldr	r3, [pc, #44]	; (1e244 <sd_mmc_cmd9_spi+0x68>)
   1e216:	4798      	blx	r3
   1e218:	0003      	movs	r3, r0
   1e21a:	001a      	movs	r2, r3
   1e21c:	2301      	movs	r3, #1
   1e21e:	4053      	eors	r3, r2
   1e220:	b2db      	uxtb	r3, r3
   1e222:	2b00      	cmp	r3, #0
   1e224:	d001      	beq.n	1e22a <sd_mmc_cmd9_spi+0x4e>
		return false;
   1e226:	2300      	movs	r3, #0
   1e228:	e002      	b.n	1e230 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1e22a:	4b07      	ldr	r3, [pc, #28]	; (1e248 <sd_mmc_cmd9_spi+0x6c>)
   1e22c:	4798      	blx	r3
   1e22e:	0003      	movs	r3, r0
}
   1e230:	0018      	movs	r0, r3
   1e232:	46bd      	mov	sp, r7
   1e234:	b001      	add	sp, #4
   1e236:	bd90      	pop	{r4, r7, pc}
   1e238:	200040e8 	.word	0x200040e8
   1e23c:	00081109 	.word	0x00081109
   1e240:	0001f949 	.word	0x0001f949
   1e244:	0001fc19 	.word	0x0001fc19
   1e248:	0001fcbd 	.word	0x0001fcbd

0001e24c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1e24c:	b5b0      	push	{r4, r5, r7, lr}
   1e24e:	b084      	sub	sp, #16
   1e250:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1e252:	4b45      	ldr	r3, [pc, #276]	; (1e368 <mmc_decode_csd+0x11c>)
   1e254:	681b      	ldr	r3, [r3, #0]
   1e256:	330e      	adds	r3, #14
   1e258:	0018      	movs	r0, r3
   1e25a:	2304      	movs	r3, #4
   1e25c:	227a      	movs	r2, #122	; 0x7a
   1e25e:	2180      	movs	r1, #128	; 0x80
   1e260:	4c42      	ldr	r4, [pc, #264]	; (1e36c <mmc_decode_csd+0x120>)
   1e262:	47a0      	blx	r4
   1e264:	0003      	movs	r3, r0
   1e266:	2b02      	cmp	r3, #2
   1e268:	d011      	beq.n	1e28e <mmc_decode_csd+0x42>
   1e26a:	d802      	bhi.n	1e272 <mmc_decode_csd+0x26>
   1e26c:	2b01      	cmp	r3, #1
   1e26e:	d009      	beq.n	1e284 <mmc_decode_csd+0x38>
   1e270:	e003      	b.n	1e27a <mmc_decode_csd+0x2e>
   1e272:	2b03      	cmp	r3, #3
   1e274:	d010      	beq.n	1e298 <mmc_decode_csd+0x4c>
   1e276:	2b04      	cmp	r3, #4
   1e278:	d013      	beq.n	1e2a2 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1e27a:	4b3b      	ldr	r3, [pc, #236]	; (1e368 <mmc_decode_csd+0x11c>)
   1e27c:	681b      	ldr	r3, [r3, #0]
   1e27e:	2212      	movs	r2, #18
   1e280:	731a      	strb	r2, [r3, #12]
		break;
   1e282:	e013      	b.n	1e2ac <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1e284:	4b38      	ldr	r3, [pc, #224]	; (1e368 <mmc_decode_csd+0x11c>)
   1e286:	681b      	ldr	r3, [r3, #0]
   1e288:	2214      	movs	r2, #20
   1e28a:	731a      	strb	r2, [r3, #12]
		break;
   1e28c:	e00e      	b.n	1e2ac <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1e28e:	4b36      	ldr	r3, [pc, #216]	; (1e368 <mmc_decode_csd+0x11c>)
   1e290:	681b      	ldr	r3, [r3, #0]
   1e292:	2222      	movs	r2, #34	; 0x22
   1e294:	731a      	strb	r2, [r3, #12]
		break;
   1e296:	e009      	b.n	1e2ac <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1e298:	4b33      	ldr	r3, [pc, #204]	; (1e368 <mmc_decode_csd+0x11c>)
   1e29a:	681b      	ldr	r3, [r3, #0]
   1e29c:	2230      	movs	r2, #48	; 0x30
   1e29e:	731a      	strb	r2, [r3, #12]
		break;
   1e2a0:	e004      	b.n	1e2ac <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1e2a2:	4b31      	ldr	r3, [pc, #196]	; (1e368 <mmc_decode_csd+0x11c>)
   1e2a4:	681b      	ldr	r3, [r3, #0]
   1e2a6:	2240      	movs	r2, #64	; 0x40
   1e2a8:	731a      	strb	r2, [r3, #12]
		break;
   1e2aa:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1e2ac:	4b2e      	ldr	r3, [pc, #184]	; (1e368 <mmc_decode_csd+0x11c>)
   1e2ae:	681b      	ldr	r3, [r3, #0]
   1e2b0:	330e      	adds	r3, #14
   1e2b2:	0018      	movs	r0, r3
   1e2b4:	2308      	movs	r3, #8
   1e2b6:	2260      	movs	r2, #96	; 0x60
   1e2b8:	2180      	movs	r1, #128	; 0x80
   1e2ba:	4c2c      	ldr	r4, [pc, #176]	; (1e36c <mmc_decode_csd+0x120>)
   1e2bc:	47a0      	blx	r4
   1e2be:	0003      	movs	r3, r0
   1e2c0:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1e2c2:	68fb      	ldr	r3, [r7, #12]
   1e2c4:	2207      	movs	r2, #7
   1e2c6:	401a      	ands	r2, r3
   1e2c8:	4b29      	ldr	r3, [pc, #164]	; (1e370 <mmc_decode_csd+0x124>)
   1e2ca:	0092      	lsls	r2, r2, #2
   1e2cc:	58d3      	ldr	r3, [r2, r3]
   1e2ce:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1e2d0:	68fb      	ldr	r3, [r7, #12]
   1e2d2:	08db      	lsrs	r3, r3, #3
   1e2d4:	220f      	movs	r2, #15
   1e2d6:	401a      	ands	r2, r3
   1e2d8:	4b26      	ldr	r3, [pc, #152]	; (1e374 <mmc_decode_csd+0x128>)
   1e2da:	0092      	lsls	r2, r2, #2
   1e2dc:	58d3      	ldr	r3, [r2, r3]
   1e2de:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1e2e0:	4b21      	ldr	r3, [pc, #132]	; (1e368 <mmc_decode_csd+0x11c>)
   1e2e2:	681b      	ldr	r3, [r3, #0]
   1e2e4:	68ba      	ldr	r2, [r7, #8]
   1e2e6:	6879      	ldr	r1, [r7, #4]
   1e2e8:	434a      	muls	r2, r1
   1e2ea:	21fa      	movs	r1, #250	; 0xfa
   1e2ec:	0089      	lsls	r1, r1, #2
   1e2ee:	434a      	muls	r2, r1
   1e2f0:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1e2f2:	4b1d      	ldr	r3, [pc, #116]	; (1e368 <mmc_decode_csd+0x11c>)
   1e2f4:	681b      	ldr	r3, [r3, #0]
   1e2f6:	330e      	adds	r3, #14
   1e2f8:	0018      	movs	r0, r3
   1e2fa:	230c      	movs	r3, #12
   1e2fc:	223e      	movs	r2, #62	; 0x3e
   1e2fe:	2180      	movs	r1, #128	; 0x80
   1e300:	4c1a      	ldr	r4, [pc, #104]	; (1e36c <mmc_decode_csd+0x120>)
   1e302:	47a0      	blx	r4
   1e304:	0002      	movs	r2, r0
   1e306:	4b1c      	ldr	r3, [pc, #112]	; (1e378 <mmc_decode_csd+0x12c>)
   1e308:	429a      	cmp	r2, r3
   1e30a:	d028      	beq.n	1e35e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1e30c:	4b16      	ldr	r3, [pc, #88]	; (1e368 <mmc_decode_csd+0x11c>)
   1e30e:	681b      	ldr	r3, [r3, #0]
   1e310:	330e      	adds	r3, #14
   1e312:	0018      	movs	r0, r3
   1e314:	230c      	movs	r3, #12
   1e316:	223e      	movs	r2, #62	; 0x3e
   1e318:	2180      	movs	r1, #128	; 0x80
   1e31a:	4c14      	ldr	r4, [pc, #80]	; (1e36c <mmc_decode_csd+0x120>)
   1e31c:	47a0      	blx	r4
   1e31e:	0003      	movs	r3, r0
   1e320:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1e322:	4b11      	ldr	r3, [pc, #68]	; (1e368 <mmc_decode_csd+0x11c>)
   1e324:	681b      	ldr	r3, [r3, #0]
   1e326:	330e      	adds	r3, #14
   1e328:	0018      	movs	r0, r3
   1e32a:	2303      	movs	r3, #3
   1e32c:	222f      	movs	r2, #47	; 0x2f
   1e32e:	2180      	movs	r1, #128	; 0x80
   1e330:	4d0e      	ldr	r5, [pc, #56]	; (1e36c <mmc_decode_csd+0x120>)
   1e332:	47a8      	blx	r5
   1e334:	0003      	movs	r3, r0
   1e336:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1e338:	409c      	lsls	r4, r3
   1e33a:	0023      	movs	r3, r4
   1e33c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e33e:	4b0a      	ldr	r3, [pc, #40]	; (1e368 <mmc_decode_csd+0x11c>)
   1e340:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e342:	4b09      	ldr	r3, [pc, #36]	; (1e368 <mmc_decode_csd+0x11c>)
   1e344:	681b      	ldr	r3, [r3, #0]
   1e346:	330e      	adds	r3, #14
   1e348:	0018      	movs	r0, r3
   1e34a:	2304      	movs	r3, #4
   1e34c:	2250      	movs	r2, #80	; 0x50
   1e34e:	2180      	movs	r1, #128	; 0x80
   1e350:	4d06      	ldr	r5, [pc, #24]	; (1e36c <mmc_decode_csd+0x120>)
   1e352:	47a8      	blx	r5
   1e354:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e356:	683b      	ldr	r3, [r7, #0]
   1e358:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e35a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e35c:	6063      	str	r3, [r4, #4]
	}
}
   1e35e:	46c0      	nop			; (mov r8, r8)
   1e360:	46bd      	mov	sp, r7
   1e362:	b004      	add	sp, #16
   1e364:	bdb0      	pop	{r4, r5, r7, pc}
   1e366:	46c0      	nop			; (mov r8, r8)
   1e368:	200040e8 	.word	0x200040e8
   1e36c:	0001dd49 	.word	0x0001dd49
   1e370:	00037f8c 	.word	0x00037f8c
   1e374:	00037fe8 	.word	0x00037fe8
   1e378:	00000fff 	.word	0x00000fff

0001e37c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1e37c:	b5b0      	push	{r4, r5, r7, lr}
   1e37e:	b084      	sub	sp, #16
   1e380:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1e382:	4b35      	ldr	r3, [pc, #212]	; (1e458 <sd_decode_csd+0xdc>)
   1e384:	681b      	ldr	r3, [r3, #0]
   1e386:	330e      	adds	r3, #14
   1e388:	0018      	movs	r0, r3
   1e38a:	2308      	movs	r3, #8
   1e38c:	2260      	movs	r2, #96	; 0x60
   1e38e:	2180      	movs	r1, #128	; 0x80
   1e390:	4c32      	ldr	r4, [pc, #200]	; (1e45c <sd_decode_csd+0xe0>)
   1e392:	47a0      	blx	r4
   1e394:	0003      	movs	r3, r0
   1e396:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1e398:	68fb      	ldr	r3, [r7, #12]
   1e39a:	2207      	movs	r2, #7
   1e39c:	401a      	ands	r2, r3
   1e39e:	4b30      	ldr	r3, [pc, #192]	; (1e460 <sd_decode_csd+0xe4>)
   1e3a0:	0092      	lsls	r2, r2, #2
   1e3a2:	58d3      	ldr	r3, [r2, r3]
   1e3a4:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1e3a6:	68fb      	ldr	r3, [r7, #12]
   1e3a8:	08db      	lsrs	r3, r3, #3
   1e3aa:	220f      	movs	r2, #15
   1e3ac:	401a      	ands	r2, r3
   1e3ae:	4b2d      	ldr	r3, [pc, #180]	; (1e464 <sd_decode_csd+0xe8>)
   1e3b0:	0092      	lsls	r2, r2, #2
   1e3b2:	58d3      	ldr	r3, [r2, r3]
   1e3b4:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1e3b6:	4b28      	ldr	r3, [pc, #160]	; (1e458 <sd_decode_csd+0xdc>)
   1e3b8:	681b      	ldr	r3, [r3, #0]
   1e3ba:	68ba      	ldr	r2, [r7, #8]
   1e3bc:	6879      	ldr	r1, [r7, #4]
   1e3be:	434a      	muls	r2, r1
   1e3c0:	21fa      	movs	r1, #250	; 0xfa
   1e3c2:	0089      	lsls	r1, r1, #2
   1e3c4:	434a      	muls	r2, r1
   1e3c6:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1e3c8:	4b23      	ldr	r3, [pc, #140]	; (1e458 <sd_decode_csd+0xdc>)
   1e3ca:	681b      	ldr	r3, [r3, #0]
   1e3cc:	330e      	adds	r3, #14
   1e3ce:	0018      	movs	r0, r3
   1e3d0:	2302      	movs	r3, #2
   1e3d2:	227e      	movs	r2, #126	; 0x7e
   1e3d4:	2180      	movs	r1, #128	; 0x80
   1e3d6:	4c21      	ldr	r4, [pc, #132]	; (1e45c <sd_decode_csd+0xe0>)
   1e3d8:	47a0      	blx	r4
   1e3da:	1e03      	subs	r3, r0, #0
   1e3dc:	d00f      	beq.n	1e3fe <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1e3de:	4b1e      	ldr	r3, [pc, #120]	; (1e458 <sd_decode_csd+0xdc>)
   1e3e0:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1e3e2:	4b1d      	ldr	r3, [pc, #116]	; (1e458 <sd_decode_csd+0xdc>)
   1e3e4:	681b      	ldr	r3, [r3, #0]
   1e3e6:	330e      	adds	r3, #14
   1e3e8:	0018      	movs	r0, r3
   1e3ea:	2316      	movs	r3, #22
   1e3ec:	2230      	movs	r2, #48	; 0x30
   1e3ee:	2180      	movs	r1, #128	; 0x80
   1e3f0:	4d1a      	ldr	r5, [pc, #104]	; (1e45c <sd_decode_csd+0xe0>)
   1e3f2:	47a8      	blx	r5
   1e3f4:	0003      	movs	r3, r0
				* 512;
   1e3f6:	3301      	adds	r3, #1
   1e3f8:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1e3fa:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1e3fc:	e028      	b.n	1e450 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e3fe:	4b16      	ldr	r3, [pc, #88]	; (1e458 <sd_decode_csd+0xdc>)
   1e400:	681b      	ldr	r3, [r3, #0]
   1e402:	330e      	adds	r3, #14
   1e404:	0018      	movs	r0, r3
   1e406:	230c      	movs	r3, #12
   1e408:	223e      	movs	r2, #62	; 0x3e
   1e40a:	2180      	movs	r1, #128	; 0x80
   1e40c:	4c13      	ldr	r4, [pc, #76]	; (1e45c <sd_decode_csd+0xe0>)
   1e40e:	47a0      	blx	r4
   1e410:	0003      	movs	r3, r0
   1e412:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1e414:	4b10      	ldr	r3, [pc, #64]	; (1e458 <sd_decode_csd+0xdc>)
   1e416:	681b      	ldr	r3, [r3, #0]
   1e418:	330e      	adds	r3, #14
   1e41a:	0018      	movs	r0, r3
   1e41c:	2303      	movs	r3, #3
   1e41e:	222f      	movs	r2, #47	; 0x2f
   1e420:	2180      	movs	r1, #128	; 0x80
   1e422:	4d0e      	ldr	r5, [pc, #56]	; (1e45c <sd_decode_csd+0xe0>)
   1e424:	47a8      	blx	r5
   1e426:	0003      	movs	r3, r0
   1e428:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e42a:	409c      	lsls	r4, r3
   1e42c:	0023      	movs	r3, r4
   1e42e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e430:	4b09      	ldr	r3, [pc, #36]	; (1e458 <sd_decode_csd+0xdc>)
   1e432:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1e434:	4b08      	ldr	r3, [pc, #32]	; (1e458 <sd_decode_csd+0xdc>)
   1e436:	681b      	ldr	r3, [r3, #0]
   1e438:	330e      	adds	r3, #14
   1e43a:	0018      	movs	r0, r3
   1e43c:	2304      	movs	r3, #4
   1e43e:	2250      	movs	r2, #80	; 0x50
   1e440:	2180      	movs	r1, #128	; 0x80
   1e442:	4d06      	ldr	r5, [pc, #24]	; (1e45c <sd_decode_csd+0xe0>)
   1e444:	47a8      	blx	r5
   1e446:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e448:	683b      	ldr	r3, [r7, #0]
   1e44a:	4093      	lsls	r3, r2
				/ 1024;
   1e44c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e44e:	6063      	str	r3, [r4, #4]
}
   1e450:	46c0      	nop			; (mov r8, r8)
   1e452:	46bd      	mov	sp, r7
   1e454:	b004      	add	sp, #16
   1e456:	bdb0      	pop	{r4, r5, r7, pc}
   1e458:	200040e8 	.word	0x200040e8
   1e45c:	0001dd49 	.word	0x0001dd49
   1e460:	00037f8c 	.word	0x00037f8c
   1e464:	00037fa8 	.word	0x00037fa8

0001e468 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1e468:	b580      	push	{r7, lr}
   1e46a:	b082      	sub	sp, #8
   1e46c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1e46e:	4b11      	ldr	r3, [pc, #68]	; (1e4b4 <sd_mmc_cmd13+0x4c>)
   1e470:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1e472:	4b11      	ldr	r3, [pc, #68]	; (1e4b8 <sd_mmc_cmd13+0x50>)
   1e474:	2100      	movs	r1, #0
   1e476:	0018      	movs	r0, r3
   1e478:	4b10      	ldr	r3, [pc, #64]	; (1e4bc <sd_mmc_cmd13+0x54>)
   1e47a:	4798      	blx	r3
   1e47c:	0003      	movs	r3, r0
   1e47e:	001a      	movs	r2, r3
   1e480:	2301      	movs	r3, #1
   1e482:	4053      	eors	r3, r2
   1e484:	b2db      	uxtb	r3, r3
   1e486:	2b00      	cmp	r3, #0
   1e488:	d001      	beq.n	1e48e <sd_mmc_cmd13+0x26>
				return false;
   1e48a:	2300      	movs	r3, #0
   1e48c:	e00e      	b.n	1e4ac <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1e48e:	4b0c      	ldr	r3, [pc, #48]	; (1e4c0 <sd_mmc_cmd13+0x58>)
   1e490:	4798      	blx	r3
   1e492:	0002      	movs	r2, r0
   1e494:	23ff      	movs	r3, #255	; 0xff
   1e496:	4013      	ands	r3, r2
   1e498:	d006      	beq.n	1e4a8 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1e49a:	687b      	ldr	r3, [r7, #4]
   1e49c:	1e5a      	subs	r2, r3, #1
   1e49e:	607a      	str	r2, [r7, #4]
   1e4a0:	2b00      	cmp	r3, #0
   1e4a2:	d1e6      	bne.n	1e472 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1e4a4:	2300      	movs	r3, #0
   1e4a6:	e001      	b.n	1e4ac <sd_mmc_cmd13+0x44>
				break;
   1e4a8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1e4aa:	2301      	movs	r3, #1
}
   1e4ac:	0018      	movs	r0, r3
   1e4ae:	46bd      	mov	sp, r7
   1e4b0:	b002      	add	sp, #8
   1e4b2:	bd80      	pop	{r7, pc}
   1e4b4:	00030d40 	.word	0x00030d40
   1e4b8:	00001b0d 	.word	0x00001b0d
   1e4bc:	0001f921 	.word	0x0001f921
   1e4c0:	0001fb61 	.word	0x0001fb61

0001e4c4 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1e4c4:	b590      	push	{r4, r7, lr}
   1e4c6:	b085      	sub	sp, #20
   1e4c8:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1e4ca:	4b38      	ldr	r3, [pc, #224]	; (1e5ac <sd_acmd51+0xe8>)
   1e4cc:	681b      	ldr	r3, [r3, #0]
   1e4ce:	891b      	ldrh	r3, [r3, #8]
   1e4d0:	041b      	lsls	r3, r3, #16
   1e4d2:	4a37      	ldr	r2, [pc, #220]	; (1e5b0 <sd_acmd51+0xec>)
   1e4d4:	0019      	movs	r1, r3
   1e4d6:	0010      	movs	r0, r2
   1e4d8:	4b36      	ldr	r3, [pc, #216]	; (1e5b4 <sd_acmd51+0xf0>)
   1e4da:	4798      	blx	r3
   1e4dc:	0003      	movs	r3, r0
   1e4de:	001a      	movs	r2, r3
   1e4e0:	2301      	movs	r3, #1
   1e4e2:	4053      	eors	r3, r2
   1e4e4:	b2db      	uxtb	r3, r3
   1e4e6:	2b00      	cmp	r3, #0
   1e4e8:	d001      	beq.n	1e4ee <sd_acmd51+0x2a>
		return false;
   1e4ea:	2300      	movs	r3, #0
   1e4ec:	e059      	b.n	1e5a2 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1e4ee:	4832      	ldr	r0, [pc, #200]	; (1e5b8 <sd_acmd51+0xf4>)
   1e4f0:	2301      	movs	r3, #1
   1e4f2:	9300      	str	r3, [sp, #0]
   1e4f4:	2301      	movs	r3, #1
   1e4f6:	2208      	movs	r2, #8
   1e4f8:	2100      	movs	r1, #0
   1e4fa:	4c30      	ldr	r4, [pc, #192]	; (1e5bc <sd_acmd51+0xf8>)
   1e4fc:	47a0      	blx	r4
   1e4fe:	0003      	movs	r3, r0
   1e500:	001a      	movs	r2, r3
   1e502:	2301      	movs	r3, #1
   1e504:	4053      	eors	r3, r2
   1e506:	b2db      	uxtb	r3, r3
   1e508:	2b00      	cmp	r3, #0
   1e50a:	d001      	beq.n	1e510 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1e50c:	2300      	movs	r3, #0
   1e50e:	e048      	b.n	1e5a2 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1e510:	003b      	movs	r3, r7
   1e512:	2101      	movs	r1, #1
   1e514:	0018      	movs	r0, r3
   1e516:	4b2a      	ldr	r3, [pc, #168]	; (1e5c0 <sd_acmd51+0xfc>)
   1e518:	4798      	blx	r3
   1e51a:	0003      	movs	r3, r0
   1e51c:	001a      	movs	r2, r3
   1e51e:	2301      	movs	r3, #1
   1e520:	4053      	eors	r3, r2
   1e522:	b2db      	uxtb	r3, r3
   1e524:	2b00      	cmp	r3, #0
   1e526:	d001      	beq.n	1e52c <sd_acmd51+0x68>
		return false;
   1e528:	2300      	movs	r3, #0
   1e52a:	e03a      	b.n	1e5a2 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1e52c:	4b25      	ldr	r3, [pc, #148]	; (1e5c4 <sd_acmd51+0x100>)
   1e52e:	4798      	blx	r3
   1e530:	0003      	movs	r3, r0
   1e532:	001a      	movs	r2, r3
   1e534:	2301      	movs	r3, #1
   1e536:	4053      	eors	r3, r2
   1e538:	b2db      	uxtb	r3, r3
   1e53a:	2b00      	cmp	r3, #0
   1e53c:	d001      	beq.n	1e542 <sd_acmd51+0x7e>
		return false;
   1e53e:	2300      	movs	r3, #0
   1e540:	e02f      	b.n	1e5a2 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1e542:	0038      	movs	r0, r7
   1e544:	2304      	movs	r3, #4
   1e546:	2238      	movs	r2, #56	; 0x38
   1e548:	2140      	movs	r1, #64	; 0x40
   1e54a:	4c1f      	ldr	r4, [pc, #124]	; (1e5c8 <sd_acmd51+0x104>)
   1e54c:	47a0      	blx	r4
   1e54e:	0003      	movs	r3, r0
   1e550:	2b01      	cmp	r3, #1
   1e552:	d008      	beq.n	1e566 <sd_acmd51+0xa2>
   1e554:	d302      	bcc.n	1e55c <sd_acmd51+0x98>
   1e556:	2b02      	cmp	r3, #2
   1e558:	d00a      	beq.n	1e570 <sd_acmd51+0xac>
   1e55a:	e01c      	b.n	1e596 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e55c:	4b13      	ldr	r3, [pc, #76]	; (1e5ac <sd_acmd51+0xe8>)
   1e55e:	681b      	ldr	r3, [r3, #0]
   1e560:	2210      	movs	r2, #16
   1e562:	731a      	strb	r2, [r3, #12]
		break;
   1e564:	e01c      	b.n	1e5a0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1e566:	4b11      	ldr	r3, [pc, #68]	; (1e5ac <sd_acmd51+0xe8>)
   1e568:	681b      	ldr	r3, [r3, #0]
   1e56a:	221a      	movs	r2, #26
   1e56c:	731a      	strb	r2, [r3, #12]
		break;
   1e56e:	e017      	b.n	1e5a0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1e570:	0038      	movs	r0, r7
   1e572:	2301      	movs	r3, #1
   1e574:	222f      	movs	r2, #47	; 0x2f
   1e576:	2140      	movs	r1, #64	; 0x40
   1e578:	4c13      	ldr	r4, [pc, #76]	; (1e5c8 <sd_acmd51+0x104>)
   1e57a:	47a0      	blx	r4
   1e57c:	0003      	movs	r3, r0
   1e57e:	2b01      	cmp	r3, #1
   1e580:	d104      	bne.n	1e58c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1e582:	4b0a      	ldr	r3, [pc, #40]	; (1e5ac <sd_acmd51+0xe8>)
   1e584:	681b      	ldr	r3, [r3, #0]
   1e586:	2230      	movs	r2, #48	; 0x30
   1e588:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1e58a:	e009      	b.n	1e5a0 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1e58c:	4b07      	ldr	r3, [pc, #28]	; (1e5ac <sd_acmd51+0xe8>)
   1e58e:	681b      	ldr	r3, [r3, #0]
   1e590:	2220      	movs	r2, #32
   1e592:	731a      	strb	r2, [r3, #12]
		break;
   1e594:	e004      	b.n	1e5a0 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e596:	4b05      	ldr	r3, [pc, #20]	; (1e5ac <sd_acmd51+0xe8>)
   1e598:	681b      	ldr	r3, [r3, #0]
   1e59a:	2210      	movs	r2, #16
   1e59c:	731a      	strb	r2, [r3, #12]
		break;
   1e59e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1e5a0:	2301      	movs	r3, #1
}
   1e5a2:	0018      	movs	r0, r3
   1e5a4:	46bd      	mov	sp, r7
   1e5a6:	b003      	add	sp, #12
   1e5a8:	bd90      	pop	{r4, r7, pc}
   1e5aa:	46c0      	nop			; (mov r8, r8)
   1e5ac:	200040e8 	.word	0x200040e8
   1e5b0:	00001137 	.word	0x00001137
   1e5b4:	0001f921 	.word	0x0001f921
   1e5b8:	00081133 	.word	0x00081133
   1e5bc:	0001f949 	.word	0x0001f949
   1e5c0:	0001fc19 	.word	0x0001fc19
   1e5c4:	0001fcbd 	.word	0x0001fcbd
   1e5c8:	0001dd49 	.word	0x0001dd49

0001e5cc <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1e5cc:	b580      	push	{r7, lr}
   1e5ce:	b082      	sub	sp, #8
   1e5d0:	af00      	add	r7, sp, #0
   1e5d2:	0002      	movs	r2, r0
   1e5d4:	1dfb      	adds	r3, r7, #7
   1e5d6:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1e5d8:	1dfb      	adds	r3, r7, #7
   1e5da:	781b      	ldrb	r3, [r3, #0]
   1e5dc:	2b00      	cmp	r3, #0
   1e5de:	d001      	beq.n	1e5e4 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1e5e0:	2304      	movs	r3, #4
   1e5e2:	e047      	b.n	1e674 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1e5e4:	1dfb      	adds	r3, r7, #7
   1e5e6:	781b      	ldrb	r3, [r3, #0]
   1e5e8:	4a24      	ldr	r2, [pc, #144]	; (1e67c <sd_mmc_select_slot+0xb0>)
   1e5ea:	015b      	lsls	r3, r3, #5
   1e5ec:	18d3      	adds	r3, r2, r3
   1e5ee:	330a      	adds	r3, #10
   1e5f0:	781b      	ldrb	r3, [r3, #0]
   1e5f2:	2b04      	cmp	r3, #4
   1e5f4:	d008      	beq.n	1e608 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1e5f6:	1dfb      	adds	r3, r7, #7
   1e5f8:	781b      	ldrb	r3, [r3, #0]
   1e5fa:	4a20      	ldr	r2, [pc, #128]	; (1e67c <sd_mmc_select_slot+0xb0>)
   1e5fc:	015b      	lsls	r3, r3, #5
   1e5fe:	18d3      	adds	r3, r2, r3
   1e600:	330a      	adds	r3, #10
   1e602:	781b      	ldrb	r3, [r3, #0]
   1e604:	2b03      	cmp	r3, #3
   1e606:	d11d      	bne.n	1e644 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1e608:	1dfb      	adds	r3, r7, #7
   1e60a:	781b      	ldrb	r3, [r3, #0]
   1e60c:	4a1b      	ldr	r2, [pc, #108]	; (1e67c <sd_mmc_select_slot+0xb0>)
   1e60e:	015b      	lsls	r3, r3, #5
   1e610:	18d3      	adds	r3, r2, r3
   1e612:	330a      	adds	r3, #10
   1e614:	2202      	movs	r2, #2
   1e616:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1e618:	1dfb      	adds	r3, r7, #7
   1e61a:	781a      	ldrb	r2, [r3, #0]
   1e61c:	4b17      	ldr	r3, [pc, #92]	; (1e67c <sd_mmc_select_slot+0xb0>)
   1e61e:	0152      	lsls	r2, r2, #5
   1e620:	4917      	ldr	r1, [pc, #92]	; (1e680 <sd_mmc_select_slot+0xb4>)
   1e622:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1e624:	1dfb      	adds	r3, r7, #7
   1e626:	781b      	ldrb	r3, [r3, #0]
   1e628:	4a14      	ldr	r2, [pc, #80]	; (1e67c <sd_mmc_select_slot+0xb0>)
   1e62a:	015b      	lsls	r3, r3, #5
   1e62c:	18d3      	adds	r3, r2, r3
   1e62e:	330d      	adds	r3, #13
   1e630:	2201      	movs	r2, #1
   1e632:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1e634:	1dfb      	adds	r3, r7, #7
   1e636:	781b      	ldrb	r3, [r3, #0]
   1e638:	4a10      	ldr	r2, [pc, #64]	; (1e67c <sd_mmc_select_slot+0xb0>)
   1e63a:	015b      	lsls	r3, r3, #5
   1e63c:	18d3      	adds	r3, r2, r3
   1e63e:	331e      	adds	r3, #30
   1e640:	2200      	movs	r2, #0
   1e642:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1e644:	4b0f      	ldr	r3, [pc, #60]	; (1e684 <sd_mmc_select_slot+0xb8>)
   1e646:	1dfa      	adds	r2, r7, #7
   1e648:	7812      	ldrb	r2, [r2, #0]
   1e64a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1e64c:	1dfb      	adds	r3, r7, #7
   1e64e:	781b      	ldrb	r3, [r3, #0]
   1e650:	015a      	lsls	r2, r3, #5
   1e652:	4b0a      	ldr	r3, [pc, #40]	; (1e67c <sd_mmc_select_slot+0xb0>)
   1e654:	18d2      	adds	r2, r2, r3
   1e656:	4b0c      	ldr	r3, [pc, #48]	; (1e688 <sd_mmc_select_slot+0xbc>)
   1e658:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1e65a:	4b0c      	ldr	r3, [pc, #48]	; (1e68c <sd_mmc_select_slot+0xc0>)
   1e65c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1e65e:	1dfb      	adds	r3, r7, #7
   1e660:	781b      	ldrb	r3, [r3, #0]
   1e662:	4a06      	ldr	r2, [pc, #24]	; (1e67c <sd_mmc_select_slot+0xb0>)
   1e664:	015b      	lsls	r3, r3, #5
   1e666:	18d3      	adds	r3, r2, r3
   1e668:	330a      	adds	r3, #10
   1e66a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1e66c:	3b02      	subs	r3, #2
   1e66e:	425a      	negs	r2, r3
   1e670:	4153      	adcs	r3, r2
   1e672:	b2db      	uxtb	r3, r3
}
   1e674:	0018      	movs	r0, r3
   1e676:	46bd      	mov	sp, r7
   1e678:	b002      	add	sp, #8
   1e67a:	bd80      	pop	{r7, pc}
   1e67c:	200040c4 	.word	0x200040c4
   1e680:	00061a80 	.word	0x00061a80
   1e684:	200040e4 	.word	0x200040e4
   1e688:	200040e8 	.word	0x200040e8
   1e68c:	0001e691 	.word	0x0001e691

0001e690 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1e690:	b5b0      	push	{r4, r5, r7, lr}
   1e692:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e694:	4b09      	ldr	r3, [pc, #36]	; (1e6bc <sd_mmc_configure_slot+0x2c>)
   1e696:	7818      	ldrb	r0, [r3, #0]
   1e698:	4b09      	ldr	r3, [pc, #36]	; (1e6c0 <sd_mmc_configure_slot+0x30>)
   1e69a:	681b      	ldr	r3, [r3, #0]
   1e69c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1e69e:	4b08      	ldr	r3, [pc, #32]	; (1e6c0 <sd_mmc_configure_slot+0x30>)
   1e6a0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e6a2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1e6a4:	4b06      	ldr	r3, [pc, #24]	; (1e6c0 <sd_mmc_configure_slot+0x30>)
   1e6a6:	681b      	ldr	r3, [r3, #0]
   1e6a8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e6aa:	1e5c      	subs	r4, r3, #1
   1e6ac:	41a3      	sbcs	r3, r4
   1e6ae:	b2db      	uxtb	r3, r3
   1e6b0:	4c04      	ldr	r4, [pc, #16]	; (1e6c4 <sd_mmc_configure_slot+0x34>)
   1e6b2:	47a0      	blx	r4
}
   1e6b4:	46c0      	nop			; (mov r8, r8)
   1e6b6:	46bd      	mov	sp, r7
   1e6b8:	bdb0      	pop	{r4, r5, r7, pc}
   1e6ba:	46c0      	nop			; (mov r8, r8)
   1e6bc:	200040e4 	.word	0x200040e4
   1e6c0:	200040e8 	.word	0x200040e8
   1e6c4:	0001f809 	.word	0x0001f809

0001e6c8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1e6c8:	b580      	push	{r7, lr}
   1e6ca:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1e6cc:	4b05      	ldr	r3, [pc, #20]	; (1e6e4 <sd_mmc_deselect_slot+0x1c>)
   1e6ce:	781b      	ldrb	r3, [r3, #0]
   1e6d0:	2b00      	cmp	r3, #0
   1e6d2:	d104      	bne.n	1e6de <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1e6d4:	4b03      	ldr	r3, [pc, #12]	; (1e6e4 <sd_mmc_deselect_slot+0x1c>)
   1e6d6:	781b      	ldrb	r3, [r3, #0]
   1e6d8:	0018      	movs	r0, r3
   1e6da:	4b03      	ldr	r3, [pc, #12]	; (1e6e8 <sd_mmc_deselect_slot+0x20>)
   1e6dc:	4798      	blx	r3
	}
}
   1e6de:	46c0      	nop			; (mov r8, r8)
   1e6e0:	46bd      	mov	sp, r7
   1e6e2:	bd80      	pop	{r7, pc}
   1e6e4:	200040e4 	.word	0x200040e4
   1e6e8:	0001f891 	.word	0x0001f891

0001e6ec <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1e6ec:	b580      	push	{r7, lr}
   1e6ee:	b082      	sub	sp, #8
   1e6f0:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1e6f2:	1dfb      	adds	r3, r7, #7
   1e6f4:	2200      	movs	r2, #0
   1e6f6:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1e6f8:	4b59      	ldr	r3, [pc, #356]	; (1e860 <sd_mmc_spi_card_init+0x174>)
   1e6fa:	681b      	ldr	r3, [r3, #0]
   1e6fc:	2201      	movs	r2, #1
   1e6fe:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1e700:	4b57      	ldr	r3, [pc, #348]	; (1e860 <sd_mmc_spi_card_init+0x174>)
   1e702:	681b      	ldr	r3, [r3, #0]
   1e704:	2200      	movs	r2, #0
   1e706:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1e708:	4b55      	ldr	r3, [pc, #340]	; (1e860 <sd_mmc_spi_card_init+0x174>)
   1e70a:	681b      	ldr	r3, [r3, #0]
   1e70c:	2200      	movs	r2, #0
   1e70e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1e710:	4b54      	ldr	r3, [pc, #336]	; (1e864 <sd_mmc_spi_card_init+0x178>)
   1e712:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1e714:	2388      	movs	r3, #136	; 0x88
   1e716:	015b      	lsls	r3, r3, #5
   1e718:	2100      	movs	r1, #0
   1e71a:	0018      	movs	r0, r3
   1e71c:	4b52      	ldr	r3, [pc, #328]	; (1e868 <sd_mmc_spi_card_init+0x17c>)
   1e71e:	4798      	blx	r3
   1e720:	0003      	movs	r3, r0
   1e722:	001a      	movs	r2, r3
   1e724:	2301      	movs	r3, #1
   1e726:	4053      	eors	r3, r2
   1e728:	b2db      	uxtb	r3, r3
   1e72a:	2b00      	cmp	r3, #0
   1e72c:	d001      	beq.n	1e732 <sd_mmc_spi_card_init+0x46>
		return false;
   1e72e:	2300      	movs	r3, #0
   1e730:	e092      	b.n	1e858 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1e732:	1dfb      	adds	r3, r7, #7
   1e734:	0018      	movs	r0, r3
   1e736:	4b4d      	ldr	r3, [pc, #308]	; (1e86c <sd_mmc_spi_card_init+0x180>)
   1e738:	4798      	blx	r3
   1e73a:	0003      	movs	r3, r0
   1e73c:	001a      	movs	r2, r3
   1e73e:	2301      	movs	r3, #1
   1e740:	4053      	eors	r3, r2
   1e742:	b2db      	uxtb	r3, r3
   1e744:	2b00      	cmp	r3, #0
   1e746:	d001      	beq.n	1e74c <sd_mmc_spi_card_init+0x60>
		return false;
   1e748:	2300      	movs	r3, #0
   1e74a:	e085      	b.n	1e858 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1e74c:	4b48      	ldr	r3, [pc, #288]	; (1e870 <sd_mmc_spi_card_init+0x184>)
   1e74e:	4798      	blx	r3
   1e750:	0003      	movs	r3, r0
   1e752:	001a      	movs	r2, r3
   1e754:	2301      	movs	r3, #1
   1e756:	4053      	eors	r3, r2
   1e758:	b2db      	uxtb	r3, r3
   1e75a:	2b00      	cmp	r3, #0
   1e75c:	d001      	beq.n	1e762 <sd_mmc_spi_card_init+0x76>
		return false;
   1e75e:	2300      	movs	r3, #0
   1e760:	e07a      	b.n	1e858 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e762:	4b3f      	ldr	r3, [pc, #252]	; (1e860 <sd_mmc_spi_card_init+0x174>)
   1e764:	681b      	ldr	r3, [r3, #0]
   1e766:	7adb      	ldrb	r3, [r3, #11]
   1e768:	001a      	movs	r2, r3
   1e76a:	2301      	movs	r3, #1
   1e76c:	4013      	ands	r3, r2
   1e76e:	d021      	beq.n	1e7b4 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1e770:	1dfb      	adds	r3, r7, #7
   1e772:	781b      	ldrb	r3, [r3, #0]
   1e774:	0018      	movs	r0, r3
   1e776:	4b3f      	ldr	r3, [pc, #252]	; (1e874 <sd_mmc_spi_card_init+0x188>)
   1e778:	4798      	blx	r3
   1e77a:	0003      	movs	r3, r0
   1e77c:	001a      	movs	r2, r3
   1e77e:	2301      	movs	r3, #1
   1e780:	4053      	eors	r3, r2
   1e782:	b2db      	uxtb	r3, r3
   1e784:	2b00      	cmp	r3, #0
   1e786:	d007      	beq.n	1e798 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1e788:	4b35      	ldr	r3, [pc, #212]	; (1e860 <sd_mmc_spi_card_init+0x174>)
   1e78a:	681b      	ldr	r3, [r3, #0]
   1e78c:	2202      	movs	r2, #2
   1e78e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1e790:	4b39      	ldr	r3, [pc, #228]	; (1e878 <sd_mmc_spi_card_init+0x18c>)
   1e792:	4798      	blx	r3
   1e794:	0003      	movs	r3, r0
   1e796:	e05f      	b.n	1e858 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1e798:	4b38      	ldr	r3, [pc, #224]	; (1e87c <sd_mmc_spi_card_init+0x190>)
   1e79a:	2100      	movs	r1, #0
   1e79c:	0018      	movs	r0, r3
   1e79e:	4b32      	ldr	r3, [pc, #200]	; (1e868 <sd_mmc_spi_card_init+0x17c>)
   1e7a0:	4798      	blx	r3
   1e7a2:	0003      	movs	r3, r0
   1e7a4:	001a      	movs	r2, r3
   1e7a6:	2301      	movs	r3, #1
   1e7a8:	4053      	eors	r3, r2
   1e7aa:	b2db      	uxtb	r3, r3
   1e7ac:	2b00      	cmp	r3, #0
   1e7ae:	d001      	beq.n	1e7b4 <sd_mmc_spi_card_init+0xc8>
			return false;
   1e7b0:	2300      	movs	r3, #0
   1e7b2:	e051      	b.n	1e858 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e7b4:	4b2a      	ldr	r3, [pc, #168]	; (1e860 <sd_mmc_spi_card_init+0x174>)
   1e7b6:	681b      	ldr	r3, [r3, #0]
   1e7b8:	7adb      	ldrb	r3, [r3, #11]
   1e7ba:	001a      	movs	r2, r3
   1e7bc:	2301      	movs	r3, #1
   1e7be:	4013      	ands	r3, r2
   1e7c0:	d017      	beq.n	1e7f2 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1e7c2:	4b2f      	ldr	r3, [pc, #188]	; (1e880 <sd_mmc_spi_card_init+0x194>)
   1e7c4:	4798      	blx	r3
   1e7c6:	0003      	movs	r3, r0
   1e7c8:	001a      	movs	r2, r3
   1e7ca:	2301      	movs	r3, #1
   1e7cc:	4053      	eors	r3, r2
   1e7ce:	b2db      	uxtb	r3, r3
   1e7d0:	2b00      	cmp	r3, #0
   1e7d2:	d001      	beq.n	1e7d8 <sd_mmc_spi_card_init+0xec>
			return false;
   1e7d4:	2300      	movs	r3, #0
   1e7d6:	e03f      	b.n	1e858 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1e7d8:	4b2a      	ldr	r3, [pc, #168]	; (1e884 <sd_mmc_spi_card_init+0x198>)
   1e7da:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1e7dc:	4b2a      	ldr	r3, [pc, #168]	; (1e888 <sd_mmc_spi_card_init+0x19c>)
   1e7de:	4798      	blx	r3
   1e7e0:	0003      	movs	r3, r0
   1e7e2:	001a      	movs	r2, r3
   1e7e4:	2301      	movs	r3, #1
   1e7e6:	4053      	eors	r3, r2
   1e7e8:	b2db      	uxtb	r3, r3
   1e7ea:	2b00      	cmp	r3, #0
   1e7ec:	d001      	beq.n	1e7f2 <sd_mmc_spi_card_init+0x106>
			return false;
   1e7ee:	2300      	movs	r3, #0
   1e7f0:	e032      	b.n	1e858 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1e7f2:	4b1b      	ldr	r3, [pc, #108]	; (1e860 <sd_mmc_spi_card_init+0x174>)
   1e7f4:	681b      	ldr	r3, [r3, #0]
   1e7f6:	7adb      	ldrb	r3, [r3, #11]
   1e7f8:	001a      	movs	r2, r3
   1e7fa:	2301      	movs	r3, #1
   1e7fc:	4013      	ands	r3, r2
   1e7fe:	d016      	beq.n	1e82e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1e800:	4b17      	ldr	r3, [pc, #92]	; (1e860 <sd_mmc_spi_card_init+0x174>)
   1e802:	681b      	ldr	r3, [r3, #0]
   1e804:	7adb      	ldrb	r3, [r3, #11]
   1e806:	001a      	movs	r2, r3
   1e808:	2308      	movs	r3, #8
   1e80a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1e80c:	d10f      	bne.n	1e82e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1e80e:	2380      	movs	r3, #128	; 0x80
   1e810:	009b      	lsls	r3, r3, #2
   1e812:	4a1e      	ldr	r2, [pc, #120]	; (1e88c <sd_mmc_spi_card_init+0x1a0>)
   1e814:	0019      	movs	r1, r3
   1e816:	0010      	movs	r0, r2
   1e818:	4b13      	ldr	r3, [pc, #76]	; (1e868 <sd_mmc_spi_card_init+0x17c>)
   1e81a:	4798      	blx	r3
   1e81c:	0003      	movs	r3, r0
   1e81e:	001a      	movs	r2, r3
   1e820:	2301      	movs	r3, #1
   1e822:	4053      	eors	r3, r2
   1e824:	b2db      	uxtb	r3, r3
   1e826:	2b00      	cmp	r3, #0
   1e828:	d001      	beq.n	1e82e <sd_mmc_spi_card_init+0x142>
			return false;
   1e82a:	2300      	movs	r3, #0
   1e82c:	e014      	b.n	1e858 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e82e:	4b0c      	ldr	r3, [pc, #48]	; (1e860 <sd_mmc_spi_card_init+0x174>)
   1e830:	681b      	ldr	r3, [r3, #0]
   1e832:	7adb      	ldrb	r3, [r3, #11]
   1e834:	001a      	movs	r2, r3
   1e836:	2301      	movs	r3, #1
   1e838:	4013      	ands	r3, r2
   1e83a:	d00a      	beq.n	1e852 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1e83c:	4b14      	ldr	r3, [pc, #80]	; (1e890 <sd_mmc_spi_card_init+0x1a4>)
   1e83e:	4798      	blx	r3
   1e840:	0003      	movs	r3, r0
   1e842:	001a      	movs	r2, r3
   1e844:	2301      	movs	r3, #1
   1e846:	4053      	eors	r3, r2
   1e848:	b2db      	uxtb	r3, r3
   1e84a:	2b00      	cmp	r3, #0
   1e84c:	d001      	beq.n	1e852 <sd_mmc_spi_card_init+0x166>
			return false;
   1e84e:	2300      	movs	r3, #0
   1e850:	e002      	b.n	1e858 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1e852:	4b10      	ldr	r3, [pc, #64]	; (1e894 <sd_mmc_spi_card_init+0x1a8>)
   1e854:	4798      	blx	r3
	return true;
   1e856:	2301      	movs	r3, #1
}
   1e858:	0018      	movs	r0, r3
   1e85a:	46bd      	mov	sp, r7
   1e85c:	b002      	add	sp, #8
   1e85e:	bd80      	pop	{r7, pc}
   1e860:	200040e8 	.word	0x200040e8
   1e864:	0001f8d5 	.word	0x0001f8d5
   1e868:	0001f921 	.word	0x0001f921
   1e86c:	0001e041 	.word	0x0001e041
   1e870:	0001e035 	.word	0x0001e035
   1e874:	0001df51 	.word	0x0001df51
   1e878:	0001e899 	.word	0x0001e899
   1e87c:	0000113b 	.word	0x0000113b
   1e880:	0001e1dd 	.word	0x0001e1dd
   1e884:	0001e37d 	.word	0x0001e37d
   1e888:	0001e4c5 	.word	0x0001e4c5
   1e88c:	00001110 	.word	0x00001110
   1e890:	0001e469 	.word	0x0001e469
   1e894:	0001e691 	.word	0x0001e691

0001e898 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1e898:	b580      	push	{r7, lr}
   1e89a:	b082      	sub	sp, #8
   1e89c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1e89e:	2388      	movs	r3, #136	; 0x88
   1e8a0:	015b      	lsls	r3, r3, #5
   1e8a2:	2100      	movs	r1, #0
   1e8a4:	0018      	movs	r0, r3
   1e8a6:	4b32      	ldr	r3, [pc, #200]	; (1e970 <sd_mmc_spi_install_mmc+0xd8>)
   1e8a8:	4798      	blx	r3
   1e8aa:	0003      	movs	r3, r0
   1e8ac:	001a      	movs	r2, r3
   1e8ae:	2301      	movs	r3, #1
   1e8b0:	4053      	eors	r3, r2
   1e8b2:	b2db      	uxtb	r3, r3
   1e8b4:	2b00      	cmp	r3, #0
   1e8b6:	d001      	beq.n	1e8bc <sd_mmc_spi_install_mmc+0x24>
		return false;
   1e8b8:	2300      	movs	r3, #0
   1e8ba:	e055      	b.n	1e968 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1e8bc:	4b2d      	ldr	r3, [pc, #180]	; (1e974 <sd_mmc_spi_install_mmc+0xdc>)
   1e8be:	4798      	blx	r3
   1e8c0:	0003      	movs	r3, r0
   1e8c2:	001a      	movs	r2, r3
   1e8c4:	2301      	movs	r3, #1
   1e8c6:	4053      	eors	r3, r2
   1e8c8:	b2db      	uxtb	r3, r3
   1e8ca:	2b00      	cmp	r3, #0
   1e8cc:	d001      	beq.n	1e8d2 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1e8ce:	2300      	movs	r3, #0
   1e8d0:	e04a      	b.n	1e968 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1e8d2:	4b29      	ldr	r3, [pc, #164]	; (1e978 <sd_mmc_spi_install_mmc+0xe0>)
   1e8d4:	2100      	movs	r1, #0
   1e8d6:	0018      	movs	r0, r3
   1e8d8:	4b25      	ldr	r3, [pc, #148]	; (1e970 <sd_mmc_spi_install_mmc+0xd8>)
   1e8da:	4798      	blx	r3
   1e8dc:	0003      	movs	r3, r0
   1e8de:	001a      	movs	r2, r3
   1e8e0:	2301      	movs	r3, #1
   1e8e2:	4053      	eors	r3, r2
   1e8e4:	b2db      	uxtb	r3, r3
   1e8e6:	2b00      	cmp	r3, #0
   1e8e8:	d001      	beq.n	1e8ee <sd_mmc_spi_install_mmc+0x56>
		return false;
   1e8ea:	2300      	movs	r3, #0
   1e8ec:	e03c      	b.n	1e968 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1e8ee:	4b23      	ldr	r3, [pc, #140]	; (1e97c <sd_mmc_spi_install_mmc+0xe4>)
   1e8f0:	4798      	blx	r3
   1e8f2:	0003      	movs	r3, r0
   1e8f4:	001a      	movs	r2, r3
   1e8f6:	2301      	movs	r3, #1
   1e8f8:	4053      	eors	r3, r2
   1e8fa:	b2db      	uxtb	r3, r3
   1e8fc:	2b00      	cmp	r3, #0
   1e8fe:	d001      	beq.n	1e904 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1e900:	2300      	movs	r3, #0
   1e902:	e031      	b.n	1e968 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1e904:	4b1e      	ldr	r3, [pc, #120]	; (1e980 <sd_mmc_spi_install_mmc+0xe8>)
   1e906:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1e908:	4b1e      	ldr	r3, [pc, #120]	; (1e984 <sd_mmc_spi_install_mmc+0xec>)
   1e90a:	681b      	ldr	r3, [r3, #0]
   1e90c:	7b1b      	ldrb	r3, [r3, #12]
   1e90e:	2b3f      	cmp	r3, #63	; 0x3f
   1e910:	d90c      	bls.n	1e92c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1e912:	1dfb      	adds	r3, r7, #7
   1e914:	0018      	movs	r0, r3
   1e916:	4b1c      	ldr	r3, [pc, #112]	; (1e988 <sd_mmc_spi_install_mmc+0xf0>)
   1e918:	4798      	blx	r3
   1e91a:	0003      	movs	r3, r0
   1e91c:	001a      	movs	r2, r3
   1e91e:	2301      	movs	r3, #1
   1e920:	4053      	eors	r3, r2
   1e922:	b2db      	uxtb	r3, r3
   1e924:	2b00      	cmp	r3, #0
   1e926:	d001      	beq.n	1e92c <sd_mmc_spi_install_mmc+0x94>
			return false;
   1e928:	2300      	movs	r3, #0
   1e92a:	e01d      	b.n	1e968 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1e92c:	2380      	movs	r3, #128	; 0x80
   1e92e:	009b      	lsls	r3, r3, #2
   1e930:	4a16      	ldr	r2, [pc, #88]	; (1e98c <sd_mmc_spi_install_mmc+0xf4>)
   1e932:	0019      	movs	r1, r3
   1e934:	0010      	movs	r0, r2
   1e936:	4b0e      	ldr	r3, [pc, #56]	; (1e970 <sd_mmc_spi_install_mmc+0xd8>)
   1e938:	4798      	blx	r3
   1e93a:	0003      	movs	r3, r0
   1e93c:	001a      	movs	r2, r3
   1e93e:	2301      	movs	r3, #1
   1e940:	4053      	eors	r3, r2
   1e942:	b2db      	uxtb	r3, r3
   1e944:	2b00      	cmp	r3, #0
   1e946:	d001      	beq.n	1e94c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1e948:	2300      	movs	r3, #0
   1e94a:	e00d      	b.n	1e968 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1e94c:	4b10      	ldr	r3, [pc, #64]	; (1e990 <sd_mmc_spi_install_mmc+0xf8>)
   1e94e:	4798      	blx	r3
   1e950:	0003      	movs	r3, r0
   1e952:	001a      	movs	r2, r3
   1e954:	2301      	movs	r3, #1
   1e956:	4053      	eors	r3, r2
   1e958:	b2db      	uxtb	r3, r3
   1e95a:	2b00      	cmp	r3, #0
   1e95c:	d001      	beq.n	1e962 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1e95e:	2300      	movs	r3, #0
   1e960:	e002      	b.n	1e968 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1e962:	4b0c      	ldr	r3, [pc, #48]	; (1e994 <sd_mmc_spi_install_mmc+0xfc>)
   1e964:	4798      	blx	r3
	return true;
   1e966:	2301      	movs	r3, #1
}
   1e968:	0018      	movs	r0, r3
   1e96a:	46bd      	mov	sp, r7
   1e96c:	b002      	add	sp, #8
   1e96e:	bd80      	pop	{r7, pc}
   1e970:	0001f921 	.word	0x0001f921
   1e974:	0001dea5 	.word	0x0001dea5
   1e978:	0000113b 	.word	0x0000113b
   1e97c:	0001e1dd 	.word	0x0001e1dd
   1e980:	0001e24d 	.word	0x0001e24d
   1e984:	200040e8 	.word	0x200040e8
   1e988:	0001e0b1 	.word	0x0001e0b1
   1e98c:	00001110 	.word	0x00001110
   1e990:	0001e469 	.word	0x0001e469
   1e994:	0001e691 	.word	0x0001e691

0001e998 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1e998:	b580      	push	{r7, lr}
   1e99a:	b082      	sub	sp, #8
   1e99c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1e99e:	1dfb      	adds	r3, r7, #7
   1e9a0:	2200      	movs	r2, #0
   1e9a2:	701a      	strb	r2, [r3, #0]
   1e9a4:	e00c      	b.n	1e9c0 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1e9a6:	1dfb      	adds	r3, r7, #7
   1e9a8:	781b      	ldrb	r3, [r3, #0]
   1e9aa:	4a0c      	ldr	r2, [pc, #48]	; (1e9dc <sd_mmc_init+0x44>)
   1e9ac:	015b      	lsls	r3, r3, #5
   1e9ae:	18d3      	adds	r3, r2, r3
   1e9b0:	330a      	adds	r3, #10
   1e9b2:	2204      	movs	r2, #4
   1e9b4:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1e9b6:	1dfb      	adds	r3, r7, #7
   1e9b8:	781a      	ldrb	r2, [r3, #0]
   1e9ba:	1dfb      	adds	r3, r7, #7
   1e9bc:	3201      	adds	r2, #1
   1e9be:	701a      	strb	r2, [r3, #0]
   1e9c0:	1dfb      	adds	r3, r7, #7
   1e9c2:	781b      	ldrb	r3, [r3, #0]
   1e9c4:	2b00      	cmp	r3, #0
   1e9c6:	d0ee      	beq.n	1e9a6 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1e9c8:	4b05      	ldr	r3, [pc, #20]	; (1e9e0 <sd_mmc_init+0x48>)
   1e9ca:	22ff      	movs	r2, #255	; 0xff
   1e9cc:	701a      	strb	r2, [r3, #0]
	driver_init();
   1e9ce:	4b05      	ldr	r3, [pc, #20]	; (1e9e4 <sd_mmc_init+0x4c>)
   1e9d0:	4798      	blx	r3
}
   1e9d2:	46c0      	nop			; (mov r8, r8)
   1e9d4:	46bd      	mov	sp, r7
   1e9d6:	b002      	add	sp, #8
   1e9d8:	bd80      	pop	{r7, pc}
   1e9da:	46c0      	nop			; (mov r8, r8)
   1e9dc:	200040c4 	.word	0x200040c4
   1e9e0:	200040e4 	.word	0x200040e4
   1e9e4:	0001f741 	.word	0x0001f741

0001e9e8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1e9e8:	b590      	push	{r4, r7, lr}
   1e9ea:	b085      	sub	sp, #20
   1e9ec:	af00      	add	r7, sp, #0
   1e9ee:	0002      	movs	r2, r0
   1e9f0:	1dfb      	adds	r3, r7, #7
   1e9f2:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e9f4:	230f      	movs	r3, #15
   1e9f6:	18fc      	adds	r4, r7, r3
   1e9f8:	1dfb      	adds	r3, r7, #7
   1e9fa:	781b      	ldrb	r3, [r3, #0]
   1e9fc:	0018      	movs	r0, r3
   1e9fe:	4b13      	ldr	r3, [pc, #76]	; (1ea4c <sd_mmc_check+0x64>)
   1ea00:	4798      	blx	r3
   1ea02:	0003      	movs	r3, r0
   1ea04:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1ea06:	230f      	movs	r3, #15
   1ea08:	18fb      	adds	r3, r7, r3
   1ea0a:	781b      	ldrb	r3, [r3, #0]
   1ea0c:	2b01      	cmp	r3, #1
   1ea0e:	d005      	beq.n	1ea1c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1ea10:	4b0f      	ldr	r3, [pc, #60]	; (1ea50 <sd_mmc_check+0x68>)
   1ea12:	4798      	blx	r3
		return sd_mmc_err;
   1ea14:	230f      	movs	r3, #15
   1ea16:	18fb      	adds	r3, r7, r3
   1ea18:	781b      	ldrb	r3, [r3, #0]
   1ea1a:	e012      	b.n	1ea42 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1ea1c:	4b0d      	ldr	r3, [pc, #52]	; (1ea54 <sd_mmc_check+0x6c>)
   1ea1e:	4798      	blx	r3
   1ea20:	1e03      	subs	r3, r0, #0
   1ea22:	d007      	beq.n	1ea34 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1ea24:	4b0c      	ldr	r3, [pc, #48]	; (1ea58 <sd_mmc_check+0x70>)
   1ea26:	681b      	ldr	r3, [r3, #0]
   1ea28:	2200      	movs	r2, #0
   1ea2a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1ea2c:	4b08      	ldr	r3, [pc, #32]	; (1ea50 <sd_mmc_check+0x68>)
   1ea2e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1ea30:	2301      	movs	r3, #1
   1ea32:	e006      	b.n	1ea42 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1ea34:	4b08      	ldr	r3, [pc, #32]	; (1ea58 <sd_mmc_check+0x70>)
   1ea36:	681b      	ldr	r3, [r3, #0]
   1ea38:	2203      	movs	r2, #3
   1ea3a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1ea3c:	4b04      	ldr	r3, [pc, #16]	; (1ea50 <sd_mmc_check+0x68>)
   1ea3e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1ea40:	2303      	movs	r3, #3
}
   1ea42:	0018      	movs	r0, r3
   1ea44:	46bd      	mov	sp, r7
   1ea46:	b005      	add	sp, #20
   1ea48:	bd90      	pop	{r4, r7, pc}
   1ea4a:	46c0      	nop			; (mov r8, r8)
   1ea4c:	0001e5cd 	.word	0x0001e5cd
   1ea50:	0001e6c9 	.word	0x0001e6c9
   1ea54:	0001e6ed 	.word	0x0001e6ed
   1ea58:	200040e8 	.word	0x200040e8

0001ea5c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1ea5c:	b580      	push	{r7, lr}
   1ea5e:	b082      	sub	sp, #8
   1ea60:	af00      	add	r7, sp, #0
   1ea62:	0002      	movs	r2, r0
   1ea64:	1dfb      	adds	r3, r7, #7
   1ea66:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1ea68:	1dfb      	adds	r3, r7, #7
   1ea6a:	781b      	ldrb	r3, [r3, #0]
   1ea6c:	0018      	movs	r0, r3
   1ea6e:	4b07      	ldr	r3, [pc, #28]	; (1ea8c <sd_mmc_get_type+0x30>)
   1ea70:	4798      	blx	r3
   1ea72:	1e03      	subs	r3, r0, #0
   1ea74:	d001      	beq.n	1ea7a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1ea76:	2300      	movs	r3, #0
   1ea78:	e004      	b.n	1ea84 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1ea7a:	4b05      	ldr	r3, [pc, #20]	; (1ea90 <sd_mmc_get_type+0x34>)
   1ea7c:	4798      	blx	r3
	return sd_mmc_card->type;
   1ea7e:	4b05      	ldr	r3, [pc, #20]	; (1ea94 <sd_mmc_get_type+0x38>)
   1ea80:	681b      	ldr	r3, [r3, #0]
   1ea82:	7adb      	ldrb	r3, [r3, #11]
}
   1ea84:	0018      	movs	r0, r3
   1ea86:	46bd      	mov	sp, r7
   1ea88:	b002      	add	sp, #8
   1ea8a:	bd80      	pop	{r7, pc}
   1ea8c:	0001e5cd 	.word	0x0001e5cd
   1ea90:	0001e6c9 	.word	0x0001e6c9
   1ea94:	200040e8 	.word	0x200040e8

0001ea98 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1ea98:	b580      	push	{r7, lr}
   1ea9a:	b082      	sub	sp, #8
   1ea9c:	af00      	add	r7, sp, #0
   1ea9e:	0002      	movs	r2, r0
   1eaa0:	1dfb      	adds	r3, r7, #7
   1eaa2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1eaa4:	1dfb      	adds	r3, r7, #7
   1eaa6:	781b      	ldrb	r3, [r3, #0]
   1eaa8:	0018      	movs	r0, r3
   1eaaa:	4b07      	ldr	r3, [pc, #28]	; (1eac8 <sd_mmc_get_capacity+0x30>)
   1eaac:	4798      	blx	r3
   1eaae:	1e03      	subs	r3, r0, #0
   1eab0:	d001      	beq.n	1eab6 <sd_mmc_get_capacity+0x1e>
		return 0;
   1eab2:	2300      	movs	r3, #0
   1eab4:	e004      	b.n	1eac0 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1eab6:	4b05      	ldr	r3, [pc, #20]	; (1eacc <sd_mmc_get_capacity+0x34>)
   1eab8:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1eaba:	4b05      	ldr	r3, [pc, #20]	; (1ead0 <sd_mmc_get_capacity+0x38>)
   1eabc:	681b      	ldr	r3, [r3, #0]
   1eabe:	685b      	ldr	r3, [r3, #4]
}
   1eac0:	0018      	movs	r0, r3
   1eac2:	46bd      	mov	sp, r7
   1eac4:	b002      	add	sp, #8
   1eac6:	bd80      	pop	{r7, pc}
   1eac8:	0001e5cd 	.word	0x0001e5cd
   1eacc:	0001e6c9 	.word	0x0001e6c9
   1ead0:	200040e8 	.word	0x200040e8

0001ead4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1ead4:	b580      	push	{r7, lr}
   1ead6:	b082      	sub	sp, #8
   1ead8:	af00      	add	r7, sp, #0
   1eada:	0002      	movs	r2, r0
   1eadc:	1dfb      	adds	r3, r7, #7
   1eade:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1eae0:	2300      	movs	r3, #0
}
   1eae2:	0018      	movs	r0, r3
   1eae4:	46bd      	mov	sp, r7
   1eae6:	b002      	add	sp, #8
   1eae8:	bd80      	pop	{r7, pc}
	...

0001eaec <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1eaec:	b590      	push	{r4, r7, lr}
   1eaee:	b089      	sub	sp, #36	; 0x24
   1eaf0:	af02      	add	r7, sp, #8
   1eaf2:	6039      	str	r1, [r7, #0]
   1eaf4:	0011      	movs	r1, r2
   1eaf6:	1dfb      	adds	r3, r7, #7
   1eaf8:	1c02      	adds	r2, r0, #0
   1eafa:	701a      	strb	r2, [r3, #0]
   1eafc:	1d3b      	adds	r3, r7, #4
   1eafe:	1c0a      	adds	r2, r1, #0
   1eb00:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1eb02:	230f      	movs	r3, #15
   1eb04:	18fc      	adds	r4, r7, r3
   1eb06:	1dfb      	adds	r3, r7, #7
   1eb08:	781b      	ldrb	r3, [r3, #0]
   1eb0a:	0018      	movs	r0, r3
   1eb0c:	4b29      	ldr	r3, [pc, #164]	; (1ebb4 <sd_mmc_init_read_blocks+0xc8>)
   1eb0e:	4798      	blx	r3
   1eb10:	0003      	movs	r3, r0
   1eb12:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1eb14:	230f      	movs	r3, #15
   1eb16:	18fb      	adds	r3, r7, r3
   1eb18:	781b      	ldrb	r3, [r3, #0]
   1eb1a:	2b00      	cmp	r3, #0
   1eb1c:	d003      	beq.n	1eb26 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1eb1e:	230f      	movs	r3, #15
   1eb20:	18fb      	adds	r3, r7, r3
   1eb22:	781b      	ldrb	r3, [r3, #0]
   1eb24:	e041      	b.n	1ebaa <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1eb26:	4b24      	ldr	r3, [pc, #144]	; (1ebb8 <sd_mmc_init_read_blocks+0xcc>)
   1eb28:	4798      	blx	r3
   1eb2a:	0003      	movs	r3, r0
   1eb2c:	001a      	movs	r2, r3
   1eb2e:	2301      	movs	r3, #1
   1eb30:	4053      	eors	r3, r2
   1eb32:	b2db      	uxtb	r3, r3
   1eb34:	2b00      	cmp	r3, #0
   1eb36:	d003      	beq.n	1eb40 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1eb38:	4b20      	ldr	r3, [pc, #128]	; (1ebbc <sd_mmc_init_read_blocks+0xd0>)
   1eb3a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1eb3c:	2305      	movs	r3, #5
   1eb3e:	e034      	b.n	1ebaa <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1eb40:	1d3b      	adds	r3, r7, #4
   1eb42:	881b      	ldrh	r3, [r3, #0]
   1eb44:	2b01      	cmp	r3, #1
   1eb46:	d902      	bls.n	1eb4e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1eb48:	4b1d      	ldr	r3, [pc, #116]	; (1ebc0 <sd_mmc_init_read_blocks+0xd4>)
   1eb4a:	617b      	str	r3, [r7, #20]
   1eb4c:	e001      	b.n	1eb52 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1eb4e:	4b1d      	ldr	r3, [pc, #116]	; (1ebc4 <sd_mmc_init_read_blocks+0xd8>)
   1eb50:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1eb52:	4b1d      	ldr	r3, [pc, #116]	; (1ebc8 <sd_mmc_init_read_blocks+0xdc>)
   1eb54:	681b      	ldr	r3, [r3, #0]
   1eb56:	7adb      	ldrb	r3, [r3, #11]
   1eb58:	001a      	movs	r2, r3
   1eb5a:	2308      	movs	r3, #8
   1eb5c:	4013      	ands	r3, r2
   1eb5e:	d002      	beq.n	1eb66 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1eb60:	683b      	ldr	r3, [r7, #0]
   1eb62:	613b      	str	r3, [r7, #16]
   1eb64:	e002      	b.n	1eb6c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1eb66:	683b      	ldr	r3, [r7, #0]
   1eb68:	025b      	lsls	r3, r3, #9
   1eb6a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1eb6c:	1d3b      	adds	r3, r7, #4
   1eb6e:	881c      	ldrh	r4, [r3, #0]
   1eb70:	2380      	movs	r3, #128	; 0x80
   1eb72:	009a      	lsls	r2, r3, #2
   1eb74:	6939      	ldr	r1, [r7, #16]
   1eb76:	6978      	ldr	r0, [r7, #20]
   1eb78:	2301      	movs	r3, #1
   1eb7a:	9300      	str	r3, [sp, #0]
   1eb7c:	0023      	movs	r3, r4
   1eb7e:	4c13      	ldr	r4, [pc, #76]	; (1ebcc <sd_mmc_init_read_blocks+0xe0>)
   1eb80:	47a0      	blx	r4
   1eb82:	0003      	movs	r3, r0
   1eb84:	001a      	movs	r2, r3
   1eb86:	2301      	movs	r3, #1
   1eb88:	4053      	eors	r3, r2
   1eb8a:	b2db      	uxtb	r3, r3
   1eb8c:	2b00      	cmp	r3, #0
   1eb8e:	d003      	beq.n	1eb98 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1eb90:	4b0a      	ldr	r3, [pc, #40]	; (1ebbc <sd_mmc_init_read_blocks+0xd0>)
   1eb92:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1eb94:	2305      	movs	r3, #5
   1eb96:	e008      	b.n	1ebaa <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1eb98:	4b0d      	ldr	r3, [pc, #52]	; (1ebd0 <sd_mmc_init_read_blocks+0xe4>)
   1eb9a:	1d3a      	adds	r2, r7, #4
   1eb9c:	8812      	ldrh	r2, [r2, #0]
   1eb9e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1eba0:	4b0c      	ldr	r3, [pc, #48]	; (1ebd4 <sd_mmc_init_read_blocks+0xe8>)
   1eba2:	1d3a      	adds	r2, r7, #4
   1eba4:	8812      	ldrh	r2, [r2, #0]
   1eba6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1eba8:	2300      	movs	r3, #0
}
   1ebaa:	0018      	movs	r0, r3
   1ebac:	46bd      	mov	sp, r7
   1ebae:	b007      	add	sp, #28
   1ebb0:	bd90      	pop	{r4, r7, pc}
   1ebb2:	46c0      	nop			; (mov r8, r8)
   1ebb4:	0001e5cd 	.word	0x0001e5cd
   1ebb8:	0001e469 	.word	0x0001e469
   1ebbc:	0001e6c9 	.word	0x0001e6c9
   1ebc0:	00101112 	.word	0x00101112
   1ebc4:	00081111 	.word	0x00081111
   1ebc8:	200040e8 	.word	0x200040e8
   1ebcc:	0001f949 	.word	0x0001f949
   1ebd0:	200040ee 	.word	0x200040ee
   1ebd4:	200040ec 	.word	0x200040ec

0001ebd8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1ebd8:	b580      	push	{r7, lr}
   1ebda:	b082      	sub	sp, #8
   1ebdc:	af00      	add	r7, sp, #0
   1ebde:	6078      	str	r0, [r7, #4]
   1ebe0:	000a      	movs	r2, r1
   1ebe2:	1cbb      	adds	r3, r7, #2
   1ebe4:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1ebe6:	1cbb      	adds	r3, r7, #2
   1ebe8:	881a      	ldrh	r2, [r3, #0]
   1ebea:	687b      	ldr	r3, [r7, #4]
   1ebec:	0011      	movs	r1, r2
   1ebee:	0018      	movs	r0, r3
   1ebf0:	4b0d      	ldr	r3, [pc, #52]	; (1ec28 <sd_mmc_start_read_blocks+0x50>)
   1ebf2:	4798      	blx	r3
   1ebf4:	0003      	movs	r3, r0
   1ebf6:	001a      	movs	r2, r3
   1ebf8:	2301      	movs	r3, #1
   1ebfa:	4053      	eors	r3, r2
   1ebfc:	b2db      	uxtb	r3, r3
   1ebfe:	2b00      	cmp	r3, #0
   1ec00:	d004      	beq.n	1ec0c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1ec02:	4b0a      	ldr	r3, [pc, #40]	; (1ec2c <sd_mmc_start_read_blocks+0x54>)
   1ec04:	2200      	movs	r2, #0
   1ec06:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1ec08:	2305      	movs	r3, #5
   1ec0a:	e008      	b.n	1ec1e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1ec0c:	4b07      	ldr	r3, [pc, #28]	; (1ec2c <sd_mmc_start_read_blocks+0x54>)
   1ec0e:	881a      	ldrh	r2, [r3, #0]
   1ec10:	1cbb      	adds	r3, r7, #2
   1ec12:	881b      	ldrh	r3, [r3, #0]
   1ec14:	1ad3      	subs	r3, r2, r3
   1ec16:	b29a      	uxth	r2, r3
   1ec18:	4b04      	ldr	r3, [pc, #16]	; (1ec2c <sd_mmc_start_read_blocks+0x54>)
   1ec1a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ec1c:	2300      	movs	r3, #0
}
   1ec1e:	0018      	movs	r0, r3
   1ec20:	46bd      	mov	sp, r7
   1ec22:	b002      	add	sp, #8
   1ec24:	bd80      	pop	{r7, pc}
   1ec26:	46c0      	nop			; (mov r8, r8)
   1ec28:	0001fc19 	.word	0x0001fc19
   1ec2c:	200040ee 	.word	0x200040ee

0001ec30 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1ec30:	b580      	push	{r7, lr}
   1ec32:	b082      	sub	sp, #8
   1ec34:	af00      	add	r7, sp, #0
   1ec36:	0002      	movs	r2, r0
   1ec38:	1dfb      	adds	r3, r7, #7
   1ec3a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1ec3c:	4b1c      	ldr	r3, [pc, #112]	; (1ecb0 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1ec3e:	4798      	blx	r3
   1ec40:	0003      	movs	r3, r0
   1ec42:	001a      	movs	r2, r3
   1ec44:	2301      	movs	r3, #1
   1ec46:	4053      	eors	r3, r2
   1ec48:	b2db      	uxtb	r3, r3
   1ec4a:	2b00      	cmp	r3, #0
   1ec4c:	d001      	beq.n	1ec52 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1ec4e:	2305      	movs	r3, #5
   1ec50:	e029      	b.n	1eca6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1ec52:	1dfb      	adds	r3, r7, #7
   1ec54:	781b      	ldrb	r3, [r3, #0]
   1ec56:	2b00      	cmp	r3, #0
   1ec58:	d003      	beq.n	1ec62 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1ec5a:	4b16      	ldr	r3, [pc, #88]	; (1ecb4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1ec5c:	2200      	movs	r2, #0
   1ec5e:	801a      	strh	r2, [r3, #0]
   1ec60:	e005      	b.n	1ec6e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1ec62:	4b14      	ldr	r3, [pc, #80]	; (1ecb4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1ec64:	881b      	ldrh	r3, [r3, #0]
   1ec66:	2b00      	cmp	r3, #0
   1ec68:	d001      	beq.n	1ec6e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1ec6a:	2300      	movs	r3, #0
   1ec6c:	e01b      	b.n	1eca6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1ec6e:	4b12      	ldr	r3, [pc, #72]	; (1ecb8 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1ec70:	881b      	ldrh	r3, [r3, #0]
   1ec72:	2b01      	cmp	r3, #1
   1ec74:	d103      	bne.n	1ec7e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1ec76:	4b11      	ldr	r3, [pc, #68]	; (1ecbc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1ec78:	4798      	blx	r3
		return SD_MMC_OK;
   1ec7a:	2300      	movs	r3, #0
   1ec7c:	e013      	b.n	1eca6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1ec7e:	4b10      	ldr	r3, [pc, #64]	; (1ecc0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1ec80:	2100      	movs	r1, #0
   1ec82:	0018      	movs	r0, r3
   1ec84:	4b0f      	ldr	r3, [pc, #60]	; (1ecc4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1ec86:	4798      	blx	r3
   1ec88:	0003      	movs	r3, r0
   1ec8a:	001a      	movs	r2, r3
   1ec8c:	2301      	movs	r3, #1
   1ec8e:	4053      	eors	r3, r2
   1ec90:	b2db      	uxtb	r3, r3
   1ec92:	2b00      	cmp	r3, #0
   1ec94:	d004      	beq.n	1eca0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1ec96:	4b0a      	ldr	r3, [pc, #40]	; (1ecc0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1ec98:	2100      	movs	r1, #0
   1ec9a:	0018      	movs	r0, r3
   1ec9c:	4b09      	ldr	r3, [pc, #36]	; (1ecc4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1ec9e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1eca0:	4b06      	ldr	r3, [pc, #24]	; (1ecbc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1eca2:	4798      	blx	r3
	return SD_MMC_OK;
   1eca4:	2300      	movs	r3, #0
}
   1eca6:	0018      	movs	r0, r3
   1eca8:	46bd      	mov	sp, r7
   1ecaa:	b002      	add	sp, #8
   1ecac:	bd80      	pop	{r7, pc}
   1ecae:	46c0      	nop			; (mov r8, r8)
   1ecb0:	0001fcbd 	.word	0x0001fcbd
   1ecb4:	200040ee 	.word	0x200040ee
   1ecb8:	200040ec 	.word	0x200040ec
   1ecbc:	0001e6c9 	.word	0x0001e6c9
   1ecc0:	0000310c 	.word	0x0000310c
   1ecc4:	0001f921 	.word	0x0001f921

0001ecc8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1ecc8:	b590      	push	{r4, r7, lr}
   1ecca:	b089      	sub	sp, #36	; 0x24
   1eccc:	af02      	add	r7, sp, #8
   1ecce:	6039      	str	r1, [r7, #0]
   1ecd0:	0011      	movs	r1, r2
   1ecd2:	1dfb      	adds	r3, r7, #7
   1ecd4:	1c02      	adds	r2, r0, #0
   1ecd6:	701a      	strb	r2, [r3, #0]
   1ecd8:	1d3b      	adds	r3, r7, #4
   1ecda:	1c0a      	adds	r2, r1, #0
   1ecdc:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ecde:	230f      	movs	r3, #15
   1ece0:	18fc      	adds	r4, r7, r3
   1ece2:	1dfb      	adds	r3, r7, #7
   1ece4:	781b      	ldrb	r3, [r3, #0]
   1ece6:	0018      	movs	r0, r3
   1ece8:	4b28      	ldr	r3, [pc, #160]	; (1ed8c <sd_mmc_init_write_blocks+0xc4>)
   1ecea:	4798      	blx	r3
   1ecec:	0003      	movs	r3, r0
   1ecee:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1ecf0:	230f      	movs	r3, #15
   1ecf2:	18fb      	adds	r3, r7, r3
   1ecf4:	781b      	ldrb	r3, [r3, #0]
   1ecf6:	2b00      	cmp	r3, #0
   1ecf8:	d003      	beq.n	1ed02 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1ecfa:	230f      	movs	r3, #15
   1ecfc:	18fb      	adds	r3, r7, r3
   1ecfe:	781b      	ldrb	r3, [r3, #0]
   1ed00:	e03f      	b.n	1ed82 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1ed02:	1dfb      	adds	r3, r7, #7
   1ed04:	781b      	ldrb	r3, [r3, #0]
   1ed06:	0018      	movs	r0, r3
   1ed08:	4b21      	ldr	r3, [pc, #132]	; (1ed90 <sd_mmc_init_write_blocks+0xc8>)
   1ed0a:	4798      	blx	r3
   1ed0c:	1e03      	subs	r3, r0, #0
   1ed0e:	d003      	beq.n	1ed18 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1ed10:	4b20      	ldr	r3, [pc, #128]	; (1ed94 <sd_mmc_init_write_blocks+0xcc>)
   1ed12:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1ed14:	2307      	movs	r3, #7
   1ed16:	e034      	b.n	1ed82 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1ed18:	1d3b      	adds	r3, r7, #4
   1ed1a:	881b      	ldrh	r3, [r3, #0]
   1ed1c:	2b01      	cmp	r3, #1
   1ed1e:	d902      	bls.n	1ed26 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1ed20:	4b1d      	ldr	r3, [pc, #116]	; (1ed98 <sd_mmc_init_write_blocks+0xd0>)
   1ed22:	617b      	str	r3, [r7, #20]
   1ed24:	e001      	b.n	1ed2a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1ed26:	4b1d      	ldr	r3, [pc, #116]	; (1ed9c <sd_mmc_init_write_blocks+0xd4>)
   1ed28:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1ed2a:	4b1d      	ldr	r3, [pc, #116]	; (1eda0 <sd_mmc_init_write_blocks+0xd8>)
   1ed2c:	681b      	ldr	r3, [r3, #0]
   1ed2e:	7adb      	ldrb	r3, [r3, #11]
   1ed30:	001a      	movs	r2, r3
   1ed32:	2308      	movs	r3, #8
   1ed34:	4013      	ands	r3, r2
   1ed36:	d002      	beq.n	1ed3e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1ed38:	683b      	ldr	r3, [r7, #0]
   1ed3a:	613b      	str	r3, [r7, #16]
   1ed3c:	e002      	b.n	1ed44 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1ed3e:	683b      	ldr	r3, [r7, #0]
   1ed40:	025b      	lsls	r3, r3, #9
   1ed42:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1ed44:	1d3b      	adds	r3, r7, #4
   1ed46:	881c      	ldrh	r4, [r3, #0]
   1ed48:	2380      	movs	r3, #128	; 0x80
   1ed4a:	009a      	lsls	r2, r3, #2
   1ed4c:	6939      	ldr	r1, [r7, #16]
   1ed4e:	6978      	ldr	r0, [r7, #20]
   1ed50:	2301      	movs	r3, #1
   1ed52:	9300      	str	r3, [sp, #0]
   1ed54:	0023      	movs	r3, r4
   1ed56:	4c13      	ldr	r4, [pc, #76]	; (1eda4 <sd_mmc_init_write_blocks+0xdc>)
   1ed58:	47a0      	blx	r4
   1ed5a:	0003      	movs	r3, r0
   1ed5c:	001a      	movs	r2, r3
   1ed5e:	2301      	movs	r3, #1
   1ed60:	4053      	eors	r3, r2
   1ed62:	b2db      	uxtb	r3, r3
   1ed64:	2b00      	cmp	r3, #0
   1ed66:	d003      	beq.n	1ed70 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1ed68:	4b0a      	ldr	r3, [pc, #40]	; (1ed94 <sd_mmc_init_write_blocks+0xcc>)
   1ed6a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1ed6c:	2305      	movs	r3, #5
   1ed6e:	e008      	b.n	1ed82 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1ed70:	4b0d      	ldr	r3, [pc, #52]	; (1eda8 <sd_mmc_init_write_blocks+0xe0>)
   1ed72:	1d3a      	adds	r2, r7, #4
   1ed74:	8812      	ldrh	r2, [r2, #0]
   1ed76:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1ed78:	4b0c      	ldr	r3, [pc, #48]	; (1edac <sd_mmc_init_write_blocks+0xe4>)
   1ed7a:	1d3a      	adds	r2, r7, #4
   1ed7c:	8812      	ldrh	r2, [r2, #0]
   1ed7e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ed80:	2300      	movs	r3, #0
}
   1ed82:	0018      	movs	r0, r3
   1ed84:	46bd      	mov	sp, r7
   1ed86:	b007      	add	sp, #28
   1ed88:	bd90      	pop	{r4, r7, pc}
   1ed8a:	46c0      	nop			; (mov r8, r8)
   1ed8c:	0001e5cd 	.word	0x0001e5cd
   1ed90:	0001ead5 	.word	0x0001ead5
   1ed94:	0001e6c9 	.word	0x0001e6c9
   1ed98:	00109119 	.word	0x00109119
   1ed9c:	00089118 	.word	0x00089118
   1eda0:	200040e8 	.word	0x200040e8
   1eda4:	0001f949 	.word	0x0001f949
   1eda8:	200040ee 	.word	0x200040ee
   1edac:	200040ec 	.word	0x200040ec

0001edb0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1edb0:	b580      	push	{r7, lr}
   1edb2:	b082      	sub	sp, #8
   1edb4:	af00      	add	r7, sp, #0
   1edb6:	6078      	str	r0, [r7, #4]
   1edb8:	000a      	movs	r2, r1
   1edba:	1cbb      	adds	r3, r7, #2
   1edbc:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1edbe:	1cbb      	adds	r3, r7, #2
   1edc0:	881a      	ldrh	r2, [r3, #0]
   1edc2:	687b      	ldr	r3, [r7, #4]
   1edc4:	0011      	movs	r1, r2
   1edc6:	0018      	movs	r0, r3
   1edc8:	4b0d      	ldr	r3, [pc, #52]	; (1ee00 <sd_mmc_start_write_blocks+0x50>)
   1edca:	4798      	blx	r3
   1edcc:	0003      	movs	r3, r0
   1edce:	001a      	movs	r2, r3
   1edd0:	2301      	movs	r3, #1
   1edd2:	4053      	eors	r3, r2
   1edd4:	b2db      	uxtb	r3, r3
   1edd6:	2b00      	cmp	r3, #0
   1edd8:	d004      	beq.n	1ede4 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1edda:	4b0a      	ldr	r3, [pc, #40]	; (1ee04 <sd_mmc_start_write_blocks+0x54>)
   1eddc:	2200      	movs	r2, #0
   1edde:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1ede0:	2305      	movs	r3, #5
   1ede2:	e008      	b.n	1edf6 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1ede4:	4b07      	ldr	r3, [pc, #28]	; (1ee04 <sd_mmc_start_write_blocks+0x54>)
   1ede6:	881a      	ldrh	r2, [r3, #0]
   1ede8:	1cbb      	adds	r3, r7, #2
   1edea:	881b      	ldrh	r3, [r3, #0]
   1edec:	1ad3      	subs	r3, r2, r3
   1edee:	b29a      	uxth	r2, r3
   1edf0:	4b04      	ldr	r3, [pc, #16]	; (1ee04 <sd_mmc_start_write_blocks+0x54>)
   1edf2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1edf4:	2300      	movs	r3, #0
}
   1edf6:	0018      	movs	r0, r3
   1edf8:	46bd      	mov	sp, r7
   1edfa:	b002      	add	sp, #8
   1edfc:	bd80      	pop	{r7, pc}
   1edfe:	46c0      	nop			; (mov r8, r8)
   1ee00:	0001fcc9 	.word	0x0001fcc9
   1ee04:	200040ee 	.word	0x200040ee

0001ee08 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1ee08:	b580      	push	{r7, lr}
   1ee0a:	b082      	sub	sp, #8
   1ee0c:	af00      	add	r7, sp, #0
   1ee0e:	0002      	movs	r2, r0
   1ee10:	1dfb      	adds	r3, r7, #7
   1ee12:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1ee14:	4b13      	ldr	r3, [pc, #76]	; (1ee64 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1ee16:	4798      	blx	r3
   1ee18:	0003      	movs	r3, r0
   1ee1a:	001a      	movs	r2, r3
   1ee1c:	2301      	movs	r3, #1
   1ee1e:	4053      	eors	r3, r2
   1ee20:	b2db      	uxtb	r3, r3
   1ee22:	2b00      	cmp	r3, #0
   1ee24:	d001      	beq.n	1ee2a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1ee26:	2305      	movs	r3, #5
   1ee28:	e018      	b.n	1ee5c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1ee2a:	1dfb      	adds	r3, r7, #7
   1ee2c:	781b      	ldrb	r3, [r3, #0]
   1ee2e:	2b00      	cmp	r3, #0
   1ee30:	d003      	beq.n	1ee3a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1ee32:	4b0d      	ldr	r3, [pc, #52]	; (1ee68 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1ee34:	2200      	movs	r2, #0
   1ee36:	801a      	strh	r2, [r3, #0]
   1ee38:	e005      	b.n	1ee46 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1ee3a:	4b0b      	ldr	r3, [pc, #44]	; (1ee68 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1ee3c:	881b      	ldrh	r3, [r3, #0]
   1ee3e:	2b00      	cmp	r3, #0
   1ee40:	d001      	beq.n	1ee46 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1ee42:	2300      	movs	r3, #0
   1ee44:	e00a      	b.n	1ee5c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1ee46:	4b09      	ldr	r3, [pc, #36]	; (1ee6c <sd_mmc_wait_end_of_write_blocks+0x64>)
   1ee48:	881b      	ldrh	r3, [r3, #0]
   1ee4a:	2b01      	cmp	r3, #1
   1ee4c:	d103      	bne.n	1ee56 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1ee4e:	4b08      	ldr	r3, [pc, #32]	; (1ee70 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1ee50:	4798      	blx	r3
		return SD_MMC_OK;
   1ee52:	2300      	movs	r3, #0
   1ee54:	e002      	b.n	1ee5c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1ee56:	4b06      	ldr	r3, [pc, #24]	; (1ee70 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1ee58:	4798      	blx	r3
	return SD_MMC_OK;
   1ee5a:	2300      	movs	r3, #0
}
   1ee5c:	0018      	movs	r0, r3
   1ee5e:	46bd      	mov	sp, r7
   1ee60:	b002      	add	sp, #8
   1ee62:	bd80      	pop	{r7, pc}
   1ee64:	0001fd89 	.word	0x0001fd89
   1ee68:	200040ee 	.word	0x200040ee
   1ee6c:	200040ec 	.word	0x200040ec
   1ee70:	0001e6c9 	.word	0x0001e6c9

0001ee74 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1ee74:	b580      	push	{r7, lr}
   1ee76:	b082      	sub	sp, #8
   1ee78:	af00      	add	r7, sp, #0
   1ee7a:	0002      	movs	r2, r0
   1ee7c:	1dfb      	adds	r3, r7, #7
   1ee7e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1ee80:	1dfb      	adds	r3, r7, #7
   1ee82:	781b      	ldrb	r3, [r3, #0]
   1ee84:	0018      	movs	r0, r3
   1ee86:	4b16      	ldr	r3, [pc, #88]	; (1eee0 <sd_mmc_test_unit_ready+0x6c>)
   1ee88:	4798      	blx	r3
   1ee8a:	0003      	movs	r3, r0
   1ee8c:	2b01      	cmp	r3, #1
   1ee8e:	d019      	beq.n	1eec4 <sd_mmc_test_unit_ready+0x50>
   1ee90:	2b02      	cmp	r3, #2
   1ee92:	d019      	beq.n	1eec8 <sd_mmc_test_unit_ready+0x54>
   1ee94:	2b00      	cmp	r3, #0
   1ee96:	d11e      	bne.n	1eed6 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1ee98:	1dfb      	adds	r3, r7, #7
   1ee9a:	781b      	ldrb	r3, [r3, #0]
   1ee9c:	4a11      	ldr	r2, [pc, #68]	; (1eee4 <sd_mmc_test_unit_ready+0x70>)
   1ee9e:	5cd3      	ldrb	r3, [r2, r3]
   1eea0:	2b00      	cmp	r3, #0
   1eea2:	d001      	beq.n	1eea8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1eea4:	2302      	movs	r3, #2
   1eea6:	e017      	b.n	1eed8 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1eea8:	1dfb      	adds	r3, r7, #7
   1eeaa:	781b      	ldrb	r3, [r3, #0]
   1eeac:	0018      	movs	r0, r3
   1eeae:	4b0e      	ldr	r3, [pc, #56]	; (1eee8 <sd_mmc_test_unit_ready+0x74>)
   1eeb0:	4798      	blx	r3
   1eeb2:	0003      	movs	r3, r0
   1eeb4:	001a      	movs	r2, r3
   1eeb6:	2303      	movs	r3, #3
   1eeb8:	4013      	ands	r3, r2
   1eeba:	d001      	beq.n	1eec0 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1eebc:	2300      	movs	r3, #0
   1eebe:	e00b      	b.n	1eed8 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1eec0:	2302      	movs	r3, #2
   1eec2:	e009      	b.n	1eed8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1eec4:	2303      	movs	r3, #3
   1eec6:	e007      	b.n	1eed8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1eec8:	1dfb      	adds	r3, r7, #7
   1eeca:	781b      	ldrb	r3, [r3, #0]
   1eecc:	4a05      	ldr	r2, [pc, #20]	; (1eee4 <sd_mmc_test_unit_ready+0x70>)
   1eece:	2100      	movs	r1, #0
   1eed0:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1eed2:	2302      	movs	r3, #2
   1eed4:	e000      	b.n	1eed8 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1eed6:	2301      	movs	r3, #1
	}
}
   1eed8:	0018      	movs	r0, r3
   1eeda:	46bd      	mov	sp, r7
   1eedc:	b002      	add	sp, #8
   1eede:	bd80      	pop	{r7, pc}
   1eee0:	0001e9e9 	.word	0x0001e9e9
   1eee4:	200040f0 	.word	0x200040f0
   1eee8:	0001ea5d 	.word	0x0001ea5d

0001eeec <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1eeec:	b580      	push	{r7, lr}
   1eeee:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1eef0:	2000      	movs	r0, #0
   1eef2:	4b03      	ldr	r3, [pc, #12]	; (1ef00 <sd_mmc_test_unit_ready_0+0x14>)
   1eef4:	4798      	blx	r3
   1eef6:	0003      	movs	r3, r0
}
   1eef8:	0018      	movs	r0, r3
   1eefa:	46bd      	mov	sp, r7
   1eefc:	bd80      	pop	{r7, pc}
   1eefe:	46c0      	nop			; (mov r8, r8)
   1ef00:	0001ee75 	.word	0x0001ee75

0001ef04 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1ef04:	b580      	push	{r7, lr}
   1ef06:	b082      	sub	sp, #8
   1ef08:	af00      	add	r7, sp, #0
   1ef0a:	0002      	movs	r2, r0
   1ef0c:	6039      	str	r1, [r7, #0]
   1ef0e:	1dfb      	adds	r3, r7, #7
   1ef10:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1ef12:	1dfb      	adds	r3, r7, #7
   1ef14:	781b      	ldrb	r3, [r3, #0]
   1ef16:	0018      	movs	r0, r3
   1ef18:	4b08      	ldr	r3, [pc, #32]	; (1ef3c <sd_mmc_read_capacity+0x38>)
   1ef1a:	4798      	blx	r3
   1ef1c:	0003      	movs	r3, r0
   1ef1e:	005b      	lsls	r3, r3, #1
   1ef20:	1e5a      	subs	r2, r3, #1
   1ef22:	683b      	ldr	r3, [r7, #0]
   1ef24:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1ef26:	1dfb      	adds	r3, r7, #7
   1ef28:	781b      	ldrb	r3, [r3, #0]
   1ef2a:	0018      	movs	r0, r3
   1ef2c:	4b04      	ldr	r3, [pc, #16]	; (1ef40 <sd_mmc_read_capacity+0x3c>)
   1ef2e:	4798      	blx	r3
   1ef30:	0003      	movs	r3, r0
}
   1ef32:	0018      	movs	r0, r3
   1ef34:	46bd      	mov	sp, r7
   1ef36:	b002      	add	sp, #8
   1ef38:	bd80      	pop	{r7, pc}
   1ef3a:	46c0      	nop			; (mov r8, r8)
   1ef3c:	0001ea99 	.word	0x0001ea99
   1ef40:	0001ee75 	.word	0x0001ee75

0001ef44 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1ef44:	b580      	push	{r7, lr}
   1ef46:	b082      	sub	sp, #8
   1ef48:	af00      	add	r7, sp, #0
   1ef4a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1ef4c:	687b      	ldr	r3, [r7, #4]
   1ef4e:	0019      	movs	r1, r3
   1ef50:	2000      	movs	r0, #0
   1ef52:	4b03      	ldr	r3, [pc, #12]	; (1ef60 <sd_mmc_read_capacity_0+0x1c>)
   1ef54:	4798      	blx	r3
   1ef56:	0003      	movs	r3, r0
}
   1ef58:	0018      	movs	r0, r3
   1ef5a:	46bd      	mov	sp, r7
   1ef5c:	b002      	add	sp, #8
   1ef5e:	bd80      	pop	{r7, pc}
   1ef60:	0001ef05 	.word	0x0001ef05

0001ef64 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1ef64:	b580      	push	{r7, lr}
   1ef66:	b082      	sub	sp, #8
   1ef68:	af00      	add	r7, sp, #0
   1ef6a:	0002      	movs	r2, r0
   1ef6c:	1dfb      	adds	r3, r7, #7
   1ef6e:	701a      	strb	r2, [r3, #0]
   1ef70:	1dbb      	adds	r3, r7, #6
   1ef72:	1c0a      	adds	r2, r1, #0
   1ef74:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1ef76:	1dfb      	adds	r3, r7, #7
   1ef78:	781b      	ldrb	r3, [r3, #0]
   1ef7a:	4a04      	ldr	r2, [pc, #16]	; (1ef8c <sd_mmc_unload+0x28>)
   1ef7c:	1db9      	adds	r1, r7, #6
   1ef7e:	7809      	ldrb	r1, [r1, #0]
   1ef80:	54d1      	strb	r1, [r2, r3]
	return true;
   1ef82:	2301      	movs	r3, #1
}
   1ef84:	0018      	movs	r0, r3
   1ef86:	46bd      	mov	sp, r7
   1ef88:	b002      	add	sp, #8
   1ef8a:	bd80      	pop	{r7, pc}
   1ef8c:	200040f0 	.word	0x200040f0

0001ef90 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1ef90:	b580      	push	{r7, lr}
   1ef92:	b082      	sub	sp, #8
   1ef94:	af00      	add	r7, sp, #0
   1ef96:	0002      	movs	r2, r0
   1ef98:	1dfb      	adds	r3, r7, #7
   1ef9a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1ef9c:	1dfb      	adds	r3, r7, #7
   1ef9e:	781b      	ldrb	r3, [r3, #0]
   1efa0:	0019      	movs	r1, r3
   1efa2:	2000      	movs	r0, #0
   1efa4:	4b03      	ldr	r3, [pc, #12]	; (1efb4 <sd_mmc_unload_0+0x24>)
   1efa6:	4798      	blx	r3
   1efa8:	0003      	movs	r3, r0
}
   1efaa:	0018      	movs	r0, r3
   1efac:	46bd      	mov	sp, r7
   1efae:	b002      	add	sp, #8
   1efb0:	bd80      	pop	{r7, pc}
   1efb2:	46c0      	nop			; (mov r8, r8)
   1efb4:	0001ef65 	.word	0x0001ef65

0001efb8 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1efb8:	b580      	push	{r7, lr}
   1efba:	b082      	sub	sp, #8
   1efbc:	af00      	add	r7, sp, #0
   1efbe:	0002      	movs	r2, r0
   1efc0:	1dfb      	adds	r3, r7, #7
   1efc2:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1efc4:	1dfb      	adds	r3, r7, #7
   1efc6:	781b      	ldrb	r3, [r3, #0]
   1efc8:	0018      	movs	r0, r3
   1efca:	4b03      	ldr	r3, [pc, #12]	; (1efd8 <sd_mmc_wr_protect+0x20>)
   1efcc:	4798      	blx	r3
   1efce:	0003      	movs	r3, r0
}
   1efd0:	0018      	movs	r0, r3
   1efd2:	46bd      	mov	sp, r7
   1efd4:	b002      	add	sp, #8
   1efd6:	bd80      	pop	{r7, pc}
   1efd8:	0001ead5 	.word	0x0001ead5

0001efdc <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1efdc:	b580      	push	{r7, lr}
   1efde:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1efe0:	2000      	movs	r0, #0
   1efe2:	4b03      	ldr	r3, [pc, #12]	; (1eff0 <sd_mmc_wr_protect_0+0x14>)
   1efe4:	4798      	blx	r3
   1efe6:	0003      	movs	r3, r0
}
   1efe8:	0018      	movs	r0, r3
   1efea:	46bd      	mov	sp, r7
   1efec:	bd80      	pop	{r7, pc}
   1efee:	46c0      	nop			; (mov r8, r8)
   1eff0:	0001efb9 	.word	0x0001efb9

0001eff4 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1eff4:	b580      	push	{r7, lr}
   1eff6:	b082      	sub	sp, #8
   1eff8:	af00      	add	r7, sp, #0
   1effa:	0002      	movs	r2, r0
   1effc:	1dfb      	adds	r3, r7, #7
   1effe:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1f000:	2301      	movs	r3, #1
}
   1f002:	0018      	movs	r0, r3
   1f004:	46bd      	mov	sp, r7
   1f006:	b002      	add	sp, #8
   1f008:	bd80      	pop	{r7, pc}
	...

0001f00c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1f00c:	b580      	push	{r7, lr}
   1f00e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1f010:	2000      	movs	r0, #0
   1f012:	4b03      	ldr	r3, [pc, #12]	; (1f020 <sd_mmc_removal_0+0x14>)
   1f014:	4798      	blx	r3
   1f016:	0003      	movs	r3, r0
}
   1f018:	0018      	movs	r0, r3
   1f01a:	46bd      	mov	sp, r7
   1f01c:	bd80      	pop	{r7, pc}
   1f01e:	46c0      	nop			; (mov r8, r8)
   1f020:	0001eff5 	.word	0x0001eff5

0001f024 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1f024:	b580      	push	{r7, lr}
   1f026:	b084      	sub	sp, #16
   1f028:	af00      	add	r7, sp, #0
   1f02a:	60b9      	str	r1, [r7, #8]
   1f02c:	607a      	str	r2, [r7, #4]
   1f02e:	230f      	movs	r3, #15
   1f030:	18fb      	adds	r3, r7, r3
   1f032:	1c02      	adds	r2, r0, #0
   1f034:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1f036:	68b9      	ldr	r1, [r7, #8]
   1f038:	230f      	movs	r3, #15
   1f03a:	18fb      	adds	r3, r7, r3
   1f03c:	781b      	ldrb	r3, [r3, #0]
   1f03e:	2201      	movs	r2, #1
   1f040:	0018      	movs	r0, r3
   1f042:	4b10      	ldr	r3, [pc, #64]	; (1f084 <sd_mmc_mem_2_ram+0x60>)
   1f044:	4798      	blx	r3
   1f046:	1e03      	subs	r3, r0, #0
   1f048:	d005      	beq.n	1f056 <sd_mmc_mem_2_ram+0x32>
   1f04a:	2b02      	cmp	r3, #2
   1f04c:	d101      	bne.n	1f052 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f04e:	2302      	movs	r3, #2
   1f050:	e013      	b.n	1f07a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1f052:	2301      	movs	r3, #1
   1f054:	e011      	b.n	1f07a <sd_mmc_mem_2_ram+0x56>
		break;
   1f056:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1f058:	687b      	ldr	r3, [r7, #4]
   1f05a:	2101      	movs	r1, #1
   1f05c:	0018      	movs	r0, r3
   1f05e:	4b0a      	ldr	r3, [pc, #40]	; (1f088 <sd_mmc_mem_2_ram+0x64>)
   1f060:	4798      	blx	r3
   1f062:	1e03      	subs	r3, r0, #0
   1f064:	d001      	beq.n	1f06a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1f066:	2301      	movs	r3, #1
   1f068:	e007      	b.n	1f07a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1f06a:	2000      	movs	r0, #0
   1f06c:	4b07      	ldr	r3, [pc, #28]	; (1f08c <sd_mmc_mem_2_ram+0x68>)
   1f06e:	4798      	blx	r3
   1f070:	1e03      	subs	r3, r0, #0
   1f072:	d001      	beq.n	1f078 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1f074:	2301      	movs	r3, #1
   1f076:	e000      	b.n	1f07a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1f078:	2300      	movs	r3, #0
}
   1f07a:	0018      	movs	r0, r3
   1f07c:	46bd      	mov	sp, r7
   1f07e:	b004      	add	sp, #16
   1f080:	bd80      	pop	{r7, pc}
   1f082:	46c0      	nop			; (mov r8, r8)
   1f084:	0001eaed 	.word	0x0001eaed
   1f088:	0001ebd9 	.word	0x0001ebd9
   1f08c:	0001ec31 	.word	0x0001ec31

0001f090 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1f090:	b580      	push	{r7, lr}
   1f092:	b082      	sub	sp, #8
   1f094:	af00      	add	r7, sp, #0
   1f096:	6078      	str	r0, [r7, #4]
   1f098:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1f09a:	683a      	ldr	r2, [r7, #0]
   1f09c:	687b      	ldr	r3, [r7, #4]
   1f09e:	0019      	movs	r1, r3
   1f0a0:	2000      	movs	r0, #0
   1f0a2:	4b03      	ldr	r3, [pc, #12]	; (1f0b0 <sd_mmc_mem_2_ram_0+0x20>)
   1f0a4:	4798      	blx	r3
   1f0a6:	0003      	movs	r3, r0
}
   1f0a8:	0018      	movs	r0, r3
   1f0aa:	46bd      	mov	sp, r7
   1f0ac:	b002      	add	sp, #8
   1f0ae:	bd80      	pop	{r7, pc}
   1f0b0:	0001f025 	.word	0x0001f025

0001f0b4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1f0b4:	b580      	push	{r7, lr}
   1f0b6:	b084      	sub	sp, #16
   1f0b8:	af00      	add	r7, sp, #0
   1f0ba:	60b9      	str	r1, [r7, #8]
   1f0bc:	607a      	str	r2, [r7, #4]
   1f0be:	230f      	movs	r3, #15
   1f0c0:	18fb      	adds	r3, r7, r3
   1f0c2:	1c02      	adds	r2, r0, #0
   1f0c4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1f0c6:	68b9      	ldr	r1, [r7, #8]
   1f0c8:	230f      	movs	r3, #15
   1f0ca:	18fb      	adds	r3, r7, r3
   1f0cc:	781b      	ldrb	r3, [r3, #0]
   1f0ce:	2201      	movs	r2, #1
   1f0d0:	0018      	movs	r0, r3
   1f0d2:	4b10      	ldr	r3, [pc, #64]	; (1f114 <sd_mmc_ram_2_mem+0x60>)
   1f0d4:	4798      	blx	r3
   1f0d6:	1e03      	subs	r3, r0, #0
   1f0d8:	d005      	beq.n	1f0e6 <sd_mmc_ram_2_mem+0x32>
   1f0da:	2b02      	cmp	r3, #2
   1f0dc:	d101      	bne.n	1f0e2 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f0de:	2302      	movs	r3, #2
   1f0e0:	e013      	b.n	1f10a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1f0e2:	2301      	movs	r3, #1
   1f0e4:	e011      	b.n	1f10a <sd_mmc_ram_2_mem+0x56>
		break;
   1f0e6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1f0e8:	687b      	ldr	r3, [r7, #4]
   1f0ea:	2101      	movs	r1, #1
   1f0ec:	0018      	movs	r0, r3
   1f0ee:	4b0a      	ldr	r3, [pc, #40]	; (1f118 <sd_mmc_ram_2_mem+0x64>)
   1f0f0:	4798      	blx	r3
   1f0f2:	1e03      	subs	r3, r0, #0
   1f0f4:	d001      	beq.n	1f0fa <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1f0f6:	2301      	movs	r3, #1
   1f0f8:	e007      	b.n	1f10a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1f0fa:	2000      	movs	r0, #0
   1f0fc:	4b07      	ldr	r3, [pc, #28]	; (1f11c <sd_mmc_ram_2_mem+0x68>)
   1f0fe:	4798      	blx	r3
   1f100:	1e03      	subs	r3, r0, #0
   1f102:	d001      	beq.n	1f108 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1f104:	2301      	movs	r3, #1
   1f106:	e000      	b.n	1f10a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1f108:	2300      	movs	r3, #0
}
   1f10a:	0018      	movs	r0, r3
   1f10c:	46bd      	mov	sp, r7
   1f10e:	b004      	add	sp, #16
   1f110:	bd80      	pop	{r7, pc}
   1f112:	46c0      	nop			; (mov r8, r8)
   1f114:	0001ecc9 	.word	0x0001ecc9
   1f118:	0001edb1 	.word	0x0001edb1
   1f11c:	0001ee09 	.word	0x0001ee09

0001f120 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1f120:	b580      	push	{r7, lr}
   1f122:	b082      	sub	sp, #8
   1f124:	af00      	add	r7, sp, #0
   1f126:	6078      	str	r0, [r7, #4]
   1f128:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1f12a:	683a      	ldr	r2, [r7, #0]
   1f12c:	687b      	ldr	r3, [r7, #4]
   1f12e:	0019      	movs	r1, r3
   1f130:	2000      	movs	r0, #0
   1f132:	4b03      	ldr	r3, [pc, #12]	; (1f140 <sd_mmc_ram_2_mem_0+0x20>)
   1f134:	4798      	blx	r3
   1f136:	0003      	movs	r3, r0
}
   1f138:	0018      	movs	r0, r3
   1f13a:	46bd      	mov	sp, r7
   1f13c:	b002      	add	sp, #8
   1f13e:	bd80      	pop	{r7, pc}
   1f140:	0001f0b5 	.word	0x0001f0b5

0001f144 <system_pinmux_get_group_from_gpio_pin>:
{
   1f144:	b580      	push	{r7, lr}
   1f146:	b084      	sub	sp, #16
   1f148:	af00      	add	r7, sp, #0
   1f14a:	0002      	movs	r2, r0
   1f14c:	1dfb      	adds	r3, r7, #7
   1f14e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f150:	230f      	movs	r3, #15
   1f152:	18fb      	adds	r3, r7, r3
   1f154:	1dfa      	adds	r2, r7, #7
   1f156:	7812      	ldrb	r2, [r2, #0]
   1f158:	09d2      	lsrs	r2, r2, #7
   1f15a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f15c:	230e      	movs	r3, #14
   1f15e:	18fb      	adds	r3, r7, r3
   1f160:	1dfa      	adds	r2, r7, #7
   1f162:	7812      	ldrb	r2, [r2, #0]
   1f164:	0952      	lsrs	r2, r2, #5
   1f166:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f168:	4b0d      	ldr	r3, [pc, #52]	; (1f1a0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f16a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f16c:	230f      	movs	r3, #15
   1f16e:	18fb      	adds	r3, r7, r3
   1f170:	781b      	ldrb	r3, [r3, #0]
   1f172:	2b00      	cmp	r3, #0
   1f174:	d10f      	bne.n	1f196 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f176:	230f      	movs	r3, #15
   1f178:	18fb      	adds	r3, r7, r3
   1f17a:	781b      	ldrb	r3, [r3, #0]
   1f17c:	009b      	lsls	r3, r3, #2
   1f17e:	2210      	movs	r2, #16
   1f180:	4694      	mov	ip, r2
   1f182:	44bc      	add	ip, r7
   1f184:	4463      	add	r3, ip
   1f186:	3b08      	subs	r3, #8
   1f188:	681a      	ldr	r2, [r3, #0]
   1f18a:	230e      	movs	r3, #14
   1f18c:	18fb      	adds	r3, r7, r3
   1f18e:	781b      	ldrb	r3, [r3, #0]
   1f190:	01db      	lsls	r3, r3, #7
   1f192:	18d3      	adds	r3, r2, r3
   1f194:	e000      	b.n	1f198 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f196:	2300      	movs	r3, #0
}
   1f198:	0018      	movs	r0, r3
   1f19a:	46bd      	mov	sp, r7
   1f19c:	b004      	add	sp, #16
   1f19e:	bd80      	pop	{r7, pc}
   1f1a0:	41004400 	.word	0x41004400

0001f1a4 <system_interrupt_enable>:
{
   1f1a4:	b580      	push	{r7, lr}
   1f1a6:	b082      	sub	sp, #8
   1f1a8:	af00      	add	r7, sp, #0
   1f1aa:	0002      	movs	r2, r0
   1f1ac:	1dfb      	adds	r3, r7, #7
   1f1ae:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f1b0:	4b06      	ldr	r3, [pc, #24]	; (1f1cc <system_interrupt_enable+0x28>)
   1f1b2:	1dfa      	adds	r2, r7, #7
   1f1b4:	7812      	ldrb	r2, [r2, #0]
   1f1b6:	0011      	movs	r1, r2
   1f1b8:	221f      	movs	r2, #31
   1f1ba:	400a      	ands	r2, r1
   1f1bc:	2101      	movs	r1, #1
   1f1be:	4091      	lsls	r1, r2
   1f1c0:	000a      	movs	r2, r1
   1f1c2:	601a      	str	r2, [r3, #0]
}
   1f1c4:	46c0      	nop			; (mov r8, r8)
   1f1c6:	46bd      	mov	sp, r7
   1f1c8:	b002      	add	sp, #8
   1f1ca:	bd80      	pop	{r7, pc}
   1f1cc:	e000e100 	.word	0xe000e100

0001f1d0 <port_get_group_from_gpio_pin>:
{
   1f1d0:	b580      	push	{r7, lr}
   1f1d2:	b082      	sub	sp, #8
   1f1d4:	af00      	add	r7, sp, #0
   1f1d6:	0002      	movs	r2, r0
   1f1d8:	1dfb      	adds	r3, r7, #7
   1f1da:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f1dc:	1dfb      	adds	r3, r7, #7
   1f1de:	781b      	ldrb	r3, [r3, #0]
   1f1e0:	0018      	movs	r0, r3
   1f1e2:	4b03      	ldr	r3, [pc, #12]	; (1f1f0 <port_get_group_from_gpio_pin+0x20>)
   1f1e4:	4798      	blx	r3
   1f1e6:	0003      	movs	r3, r0
}
   1f1e8:	0018      	movs	r0, r3
   1f1ea:	46bd      	mov	sp, r7
   1f1ec:	b002      	add	sp, #8
   1f1ee:	bd80      	pop	{r7, pc}
   1f1f0:	0001f145 	.word	0x0001f145

0001f1f4 <port_get_config_defaults>:
{
   1f1f4:	b580      	push	{r7, lr}
   1f1f6:	b082      	sub	sp, #8
   1f1f8:	af00      	add	r7, sp, #0
   1f1fa:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1f1fc:	687b      	ldr	r3, [r7, #4]
   1f1fe:	2200      	movs	r2, #0
   1f200:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1f202:	687b      	ldr	r3, [r7, #4]
   1f204:	2201      	movs	r2, #1
   1f206:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1f208:	687b      	ldr	r3, [r7, #4]
   1f20a:	2200      	movs	r2, #0
   1f20c:	709a      	strb	r2, [r3, #2]
}
   1f20e:	46c0      	nop			; (mov r8, r8)
   1f210:	46bd      	mov	sp, r7
   1f212:	b002      	add	sp, #8
   1f214:	bd80      	pop	{r7, pc}
	...

0001f218 <port_pin_set_output_level>:
{
   1f218:	b580      	push	{r7, lr}
   1f21a:	b084      	sub	sp, #16
   1f21c:	af00      	add	r7, sp, #0
   1f21e:	0002      	movs	r2, r0
   1f220:	1dfb      	adds	r3, r7, #7
   1f222:	701a      	strb	r2, [r3, #0]
   1f224:	1dbb      	adds	r3, r7, #6
   1f226:	1c0a      	adds	r2, r1, #0
   1f228:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1f22a:	1dfb      	adds	r3, r7, #7
   1f22c:	781b      	ldrb	r3, [r3, #0]
   1f22e:	0018      	movs	r0, r3
   1f230:	4b0d      	ldr	r3, [pc, #52]	; (1f268 <port_pin_set_output_level+0x50>)
   1f232:	4798      	blx	r3
   1f234:	0003      	movs	r3, r0
   1f236:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1f238:	1dfb      	adds	r3, r7, #7
   1f23a:	781b      	ldrb	r3, [r3, #0]
   1f23c:	221f      	movs	r2, #31
   1f23e:	4013      	ands	r3, r2
   1f240:	2201      	movs	r2, #1
   1f242:	409a      	lsls	r2, r3
   1f244:	0013      	movs	r3, r2
   1f246:	60bb      	str	r3, [r7, #8]
	if (level) {
   1f248:	1dbb      	adds	r3, r7, #6
   1f24a:	781b      	ldrb	r3, [r3, #0]
   1f24c:	2b00      	cmp	r3, #0
   1f24e:	d003      	beq.n	1f258 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1f250:	68fb      	ldr	r3, [r7, #12]
   1f252:	68ba      	ldr	r2, [r7, #8]
   1f254:	619a      	str	r2, [r3, #24]
}
   1f256:	e002      	b.n	1f25e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1f258:	68fb      	ldr	r3, [r7, #12]
   1f25a:	68ba      	ldr	r2, [r7, #8]
   1f25c:	615a      	str	r2, [r3, #20]
}
   1f25e:	46c0      	nop			; (mov r8, r8)
   1f260:	46bd      	mov	sp, r7
   1f262:	b004      	add	sp, #16
   1f264:	bd80      	pop	{r7, pc}
   1f266:	46c0      	nop			; (mov r8, r8)
   1f268:	0001f1d1 	.word	0x0001f1d1

0001f26c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1f26c:	b580      	push	{r7, lr}
   1f26e:	b084      	sub	sp, #16
   1f270:	af00      	add	r7, sp, #0
   1f272:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f274:	687b      	ldr	r3, [r7, #4]
   1f276:	681b      	ldr	r3, [r3, #0]
   1f278:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1f27a:	68fb      	ldr	r3, [r7, #12]
   1f27c:	69db      	ldr	r3, [r3, #28]
   1f27e:	1e5a      	subs	r2, r3, #1
   1f280:	4193      	sbcs	r3, r2
   1f282:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1f284:	0018      	movs	r0, r3
   1f286:	46bd      	mov	sp, r7
   1f288:	b004      	add	sp, #16
   1f28a:	bd80      	pop	{r7, pc}

0001f28c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1f28c:	b580      	push	{r7, lr}
   1f28e:	b082      	sub	sp, #8
   1f290:	af00      	add	r7, sp, #0
   1f292:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1f294:	687b      	ldr	r3, [r7, #4]
   1f296:	2201      	movs	r2, #1
   1f298:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1f29a:	687b      	ldr	r3, [r7, #4]
   1f29c:	2200      	movs	r2, #0
   1f29e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1f2a0:	687b      	ldr	r3, [r7, #4]
   1f2a2:	2200      	movs	r2, #0
   1f2a4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1f2a6:	687b      	ldr	r3, [r7, #4]
   1f2a8:	22c0      	movs	r2, #192	; 0xc0
   1f2aa:	0392      	lsls	r2, r2, #14
   1f2ac:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1f2ae:	687b      	ldr	r3, [r7, #4]
   1f2b0:	2200      	movs	r2, #0
   1f2b2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1f2b4:	687b      	ldr	r3, [r7, #4]
   1f2b6:	2200      	movs	r2, #0
   1f2b8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1f2ba:	687b      	ldr	r3, [r7, #4]
   1f2bc:	2201      	movs	r2, #1
   1f2be:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1f2c0:	687b      	ldr	r3, [r7, #4]
   1f2c2:	2201      	movs	r2, #1
   1f2c4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1f2c6:	687b      	ldr	r3, [r7, #4]
   1f2c8:	2200      	movs	r2, #0
   1f2ca:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1f2cc:	687b      	ldr	r3, [r7, #4]
   1f2ce:	2224      	movs	r2, #36	; 0x24
   1f2d0:	2100      	movs	r1, #0
   1f2d2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1f2d4:	687b      	ldr	r3, [r7, #4]
   1f2d6:	3318      	adds	r3, #24
   1f2d8:	220c      	movs	r2, #12
   1f2da:	2100      	movs	r1, #0
   1f2dc:	0018      	movs	r0, r3
   1f2de:	4b0a      	ldr	r3, [pc, #40]	; (1f308 <spi_get_config_defaults+0x7c>)
   1f2e0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1f2e2:	687b      	ldr	r3, [r7, #4]
   1f2e4:	4a09      	ldr	r2, [pc, #36]	; (1f30c <spi_get_config_defaults+0x80>)
   1f2e6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1f2e8:	687b      	ldr	r3, [r7, #4]
   1f2ea:	2200      	movs	r2, #0
   1f2ec:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1f2ee:	687b      	ldr	r3, [r7, #4]
   1f2f0:	2200      	movs	r2, #0
   1f2f2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1f2f4:	687b      	ldr	r3, [r7, #4]
   1f2f6:	2200      	movs	r2, #0
   1f2f8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1f2fa:	687b      	ldr	r3, [r7, #4]
   1f2fc:	2200      	movs	r2, #0
   1f2fe:	635a      	str	r2, [r3, #52]	; 0x34

};
   1f300:	46c0      	nop			; (mov r8, r8)
   1f302:	46bd      	mov	sp, r7
   1f304:	b002      	add	sp, #8
   1f306:	bd80      	pop	{r7, pc}
   1f308:	000346df 	.word	0x000346df
   1f30c:	000186a0 	.word	0x000186a0

0001f310 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1f310:	b580      	push	{r7, lr}
   1f312:	b082      	sub	sp, #8
   1f314:	af00      	add	r7, sp, #0
   1f316:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1f318:	687b      	ldr	r3, [r7, #4]
   1f31a:	220a      	movs	r2, #10
   1f31c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1f31e:	687b      	ldr	r3, [r7, #4]
   1f320:	2200      	movs	r2, #0
   1f322:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1f324:	687b      	ldr	r3, [r7, #4]
   1f326:	2200      	movs	r2, #0
   1f328:	709a      	strb	r2, [r3, #2]
}
   1f32a:	46c0      	nop			; (mov r8, r8)
   1f32c:	46bd      	mov	sp, r7
   1f32e:	b002      	add	sp, #8
   1f330:	bd80      	pop	{r7, pc}
	...

0001f334 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1f334:	b580      	push	{r7, lr}
   1f336:	b084      	sub	sp, #16
   1f338:	af00      	add	r7, sp, #0
   1f33a:	6078      	str	r0, [r7, #4]
   1f33c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1f33e:	683b      	ldr	r3, [r7, #0]
   1f340:	781a      	ldrb	r2, [r3, #0]
   1f342:	687b      	ldr	r3, [r7, #4]
   1f344:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1f346:	683b      	ldr	r3, [r7, #0]
   1f348:	785a      	ldrb	r2, [r3, #1]
   1f34a:	687b      	ldr	r3, [r7, #4]
   1f34c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1f34e:	683b      	ldr	r3, [r7, #0]
   1f350:	789a      	ldrb	r2, [r3, #2]
   1f352:	687b      	ldr	r3, [r7, #4]
   1f354:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1f356:	230c      	movs	r3, #12
   1f358:	18fb      	adds	r3, r7, r3
   1f35a:	0018      	movs	r0, r3
   1f35c:	4b0b      	ldr	r3, [pc, #44]	; (1f38c <spi_attach_slave+0x58>)
   1f35e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1f360:	230c      	movs	r3, #12
   1f362:	18fb      	adds	r3, r7, r3
   1f364:	2201      	movs	r2, #1
   1f366:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1f368:	687b      	ldr	r3, [r7, #4]
   1f36a:	781b      	ldrb	r3, [r3, #0]
   1f36c:	220c      	movs	r2, #12
   1f36e:	18ba      	adds	r2, r7, r2
   1f370:	0011      	movs	r1, r2
   1f372:	0018      	movs	r0, r3
   1f374:	4b06      	ldr	r3, [pc, #24]	; (1f390 <spi_attach_slave+0x5c>)
   1f376:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1f378:	687b      	ldr	r3, [r7, #4]
   1f37a:	781b      	ldrb	r3, [r3, #0]
   1f37c:	2101      	movs	r1, #1
   1f37e:	0018      	movs	r0, r3
   1f380:	4b04      	ldr	r3, [pc, #16]	; (1f394 <spi_attach_slave+0x60>)
   1f382:	4798      	blx	r3
}
   1f384:	46c0      	nop			; (mov r8, r8)
   1f386:	46bd      	mov	sp, r7
   1f388:	b004      	add	sp, #16
   1f38a:	bd80      	pop	{r7, pc}
   1f38c:	0001f1f5 	.word	0x0001f1f5
   1f390:	000266d9 	.word	0x000266d9
   1f394:	0001f219 	.word	0x0001f219

0001f398 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1f398:	b580      	push	{r7, lr}
   1f39a:	b084      	sub	sp, #16
   1f39c:	af00      	add	r7, sp, #0
   1f39e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f3a0:	687b      	ldr	r3, [r7, #4]
   1f3a2:	681b      	ldr	r3, [r3, #0]
   1f3a4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1f3a6:	687b      	ldr	r3, [r7, #4]
   1f3a8:	681b      	ldr	r3, [r3, #0]
   1f3aa:	0018      	movs	r0, r3
   1f3ac:	4b0b      	ldr	r3, [pc, #44]	; (1f3dc <spi_enable+0x44>)
   1f3ae:	4798      	blx	r3
   1f3b0:	0003      	movs	r3, r0
   1f3b2:	0018      	movs	r0, r3
   1f3b4:	4b0a      	ldr	r3, [pc, #40]	; (1f3e0 <spi_enable+0x48>)
   1f3b6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1f3b8:	46c0      	nop			; (mov r8, r8)
   1f3ba:	687b      	ldr	r3, [r7, #4]
   1f3bc:	0018      	movs	r0, r3
   1f3be:	4b09      	ldr	r3, [pc, #36]	; (1f3e4 <spi_enable+0x4c>)
   1f3c0:	4798      	blx	r3
   1f3c2:	1e03      	subs	r3, r0, #0
   1f3c4:	d1f9      	bne.n	1f3ba <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1f3c6:	68fb      	ldr	r3, [r7, #12]
   1f3c8:	681b      	ldr	r3, [r3, #0]
   1f3ca:	2202      	movs	r2, #2
   1f3cc:	431a      	orrs	r2, r3
   1f3ce:	68fb      	ldr	r3, [r7, #12]
   1f3d0:	601a      	str	r2, [r3, #0]
}
   1f3d2:	46c0      	nop			; (mov r8, r8)
   1f3d4:	46bd      	mov	sp, r7
   1f3d6:	b004      	add	sp, #16
   1f3d8:	bd80      	pop	{r7, pc}
   1f3da:	46c0      	nop			; (mov r8, r8)
   1f3dc:	000273a9 	.word	0x000273a9
   1f3e0:	0001f1a5 	.word	0x0001f1a5
   1f3e4:	0001f26d 	.word	0x0001f26d

0001f3e8 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1f3e8:	b580      	push	{r7, lr}
   1f3ea:	b084      	sub	sp, #16
   1f3ec:	af00      	add	r7, sp, #0
   1f3ee:	6078      	str	r0, [r7, #4]
   1f3f0:	000a      	movs	r2, r1
   1f3f2:	1cfb      	adds	r3, r7, #3
   1f3f4:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1f3f6:	230f      	movs	r3, #15
   1f3f8:	18fb      	adds	r3, r7, r3
   1f3fa:	2200      	movs	r2, #0
   1f3fc:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1f3fe:	e038      	b.n	1f472 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1f400:	687b      	ldr	r3, [r7, #4]
   1f402:	1c5a      	adds	r2, r3, #1
   1f404:	607a      	str	r2, [r7, #4]
   1f406:	220e      	movs	r2, #14
   1f408:	18ba      	adds	r2, r7, r2
   1f40a:	781b      	ldrb	r3, [r3, #0]
   1f40c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f40e:	230d      	movs	r3, #13
   1f410:	18fb      	adds	r3, r7, r3
   1f412:	2200      	movs	r2, #0
   1f414:	701a      	strb	r2, [r3, #0]
   1f416:	e027      	b.n	1f468 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1f418:	230f      	movs	r3, #15
   1f41a:	18fa      	adds	r2, r7, r3
   1f41c:	230f      	movs	r3, #15
   1f41e:	18fb      	adds	r3, r7, r3
   1f420:	781b      	ldrb	r3, [r3, #0]
   1f422:	18db      	adds	r3, r3, r3
   1f424:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1f426:	230e      	movs	r3, #14
   1f428:	18fa      	adds	r2, r7, r3
   1f42a:	230f      	movs	r3, #15
   1f42c:	18fb      	adds	r3, r7, r3
   1f42e:	7812      	ldrb	r2, [r2, #0]
   1f430:	781b      	ldrb	r3, [r3, #0]
   1f432:	4053      	eors	r3, r2
   1f434:	b2db      	uxtb	r3, r3
   1f436:	b25b      	sxtb	r3, r3
   1f438:	2b00      	cmp	r3, #0
   1f43a:	da07      	bge.n	1f44c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1f43c:	230f      	movs	r3, #15
   1f43e:	18fb      	adds	r3, r7, r3
   1f440:	220f      	movs	r2, #15
   1f442:	18ba      	adds	r2, r7, r2
   1f444:	7812      	ldrb	r2, [r2, #0]
   1f446:	2109      	movs	r1, #9
   1f448:	404a      	eors	r2, r1
   1f44a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1f44c:	230e      	movs	r3, #14
   1f44e:	18fa      	adds	r2, r7, r3
   1f450:	230e      	movs	r3, #14
   1f452:	18fb      	adds	r3, r7, r3
   1f454:	781b      	ldrb	r3, [r3, #0]
   1f456:	18db      	adds	r3, r3, r3
   1f458:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f45a:	230d      	movs	r3, #13
   1f45c:	18fb      	adds	r3, r7, r3
   1f45e:	781a      	ldrb	r2, [r3, #0]
   1f460:	230d      	movs	r3, #13
   1f462:	18fb      	adds	r3, r7, r3
   1f464:	3201      	adds	r2, #1
   1f466:	701a      	strb	r2, [r3, #0]
   1f468:	230d      	movs	r3, #13
   1f46a:	18fb      	adds	r3, r7, r3
   1f46c:	781b      	ldrb	r3, [r3, #0]
   1f46e:	2b07      	cmp	r3, #7
   1f470:	d9d2      	bls.n	1f418 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1f472:	1cfb      	adds	r3, r7, #3
   1f474:	781b      	ldrb	r3, [r3, #0]
   1f476:	1cfa      	adds	r2, r7, #3
   1f478:	1e59      	subs	r1, r3, #1
   1f47a:	7011      	strb	r1, [r2, #0]
   1f47c:	2b00      	cmp	r3, #0
   1f47e:	d1bf      	bne.n	1f400 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1f480:	230f      	movs	r3, #15
   1f482:	18fb      	adds	r3, r7, r3
   1f484:	781b      	ldrb	r3, [r3, #0]
   1f486:	005b      	lsls	r3, r3, #1
   1f488:	b25b      	sxtb	r3, r3
   1f48a:	2201      	movs	r2, #1
   1f48c:	4313      	orrs	r3, r2
   1f48e:	b25a      	sxtb	r2, r3
   1f490:	230f      	movs	r3, #15
   1f492:	18fb      	adds	r3, r7, r3
   1f494:	701a      	strb	r2, [r3, #0]
	return crc;
   1f496:	230f      	movs	r3, #15
   1f498:	18fb      	adds	r3, r7, r3
   1f49a:	781b      	ldrb	r3, [r3, #0]
}
   1f49c:	0018      	movs	r0, r3
   1f49e:	46bd      	mov	sp, r7
   1f4a0:	b004      	add	sp, #16
   1f4a2:	bd80      	pop	{r7, pc}

0001f4a4 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1f4a4:	b590      	push	{r4, r7, lr}
   1f4a6:	b083      	sub	sp, #12
   1f4a8:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1f4aa:	1c7b      	adds	r3, r7, #1
   1f4ac:	22ff      	movs	r2, #255	; 0xff
   1f4ae:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1f4b0:	1cbb      	adds	r3, r7, #2
   1f4b2:	22ff      	movs	r2, #255	; 0xff
   1f4b4:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f4b6:	1cbb      	adds	r3, r7, #2
   1f4b8:	881b      	ldrh	r3, [r3, #0]
   1f4ba:	1c79      	adds	r1, r7, #1
   1f4bc:	4811      	ldr	r0, [pc, #68]	; (1f504 <sd_mmc_spi_wait_busy+0x60>)
   1f4be:	2201      	movs	r2, #1
   1f4c0:	4c11      	ldr	r4, [pc, #68]	; (1f508 <sd_mmc_spi_wait_busy+0x64>)
   1f4c2:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1f4c4:	4b11      	ldr	r3, [pc, #68]	; (1f50c <sd_mmc_spi_wait_busy+0x68>)
   1f4c6:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f4c8:	1cbb      	adds	r3, r7, #2
   1f4ca:	881b      	ldrh	r3, [r3, #0]
   1f4cc:	1c79      	adds	r1, r7, #1
   1f4ce:	480d      	ldr	r0, [pc, #52]	; (1f504 <sd_mmc_spi_wait_busy+0x60>)
   1f4d0:	2201      	movs	r2, #1
   1f4d2:	4c0d      	ldr	r4, [pc, #52]	; (1f508 <sd_mmc_spi_wait_busy+0x64>)
   1f4d4:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f4d6:	1cbb      	adds	r3, r7, #2
   1f4d8:	881b      	ldrh	r3, [r3, #0]
   1f4da:	1c79      	adds	r1, r7, #1
   1f4dc:	4809      	ldr	r0, [pc, #36]	; (1f504 <sd_mmc_spi_wait_busy+0x60>)
   1f4de:	2201      	movs	r2, #1
   1f4e0:	4c09      	ldr	r4, [pc, #36]	; (1f508 <sd_mmc_spi_wait_busy+0x64>)
   1f4e2:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1f4e4:	687b      	ldr	r3, [r7, #4]
   1f4e6:	1e5a      	subs	r2, r3, #1
   1f4e8:	607a      	str	r2, [r7, #4]
   1f4ea:	2b00      	cmp	r3, #0
   1f4ec:	d101      	bne.n	1f4f2 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1f4ee:	2300      	movs	r3, #0
   1f4f0:	e004      	b.n	1f4fc <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1f4f2:	1c7b      	adds	r3, r7, #1
   1f4f4:	781b      	ldrb	r3, [r3, #0]
   1f4f6:	2bff      	cmp	r3, #255	; 0xff
   1f4f8:	d1ed      	bne.n	1f4d6 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1f4fa:	2301      	movs	r3, #1
}
   1f4fc:	0018      	movs	r0, r3
   1f4fe:	46bd      	mov	sp, r7
   1f500:	b003      	add	sp, #12
   1f502:	bd90      	pop	{r4, r7, pc}
   1f504:	200040f4 	.word	0x200040f4
   1f508:	00027ce9 	.word	0x00027ce9
   1f50c:	00030d40 	.word	0x00030d40

0001f510 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1f510:	b590      	push	{r4, r7, lr}
   1f512:	b083      	sub	sp, #12
   1f514:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1f516:	1cbb      	adds	r3, r7, #2
   1f518:	22ff      	movs	r2, #255	; 0xff
   1f51a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1f51c:	1c7b      	adds	r3, r7, #1
   1f51e:	2200      	movs	r2, #0
   1f520:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1f522:	4b18      	ldr	r3, [pc, #96]	; (1f584 <sd_mmc_spi_start_read_block+0x74>)
   1f524:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1f526:	687b      	ldr	r3, [r7, #4]
   1f528:	1e5a      	subs	r2, r3, #1
   1f52a:	607a      	str	r2, [r7, #4]
   1f52c:	2b00      	cmp	r3, #0
   1f52e:	d104      	bne.n	1f53a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1f530:	4b15      	ldr	r3, [pc, #84]	; (1f588 <sd_mmc_spi_start_read_block+0x78>)
   1f532:	2204      	movs	r2, #4
   1f534:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1f536:	2300      	movs	r3, #0
   1f538:	e020      	b.n	1f57c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1f53a:	1cbb      	adds	r3, r7, #2
   1f53c:	881b      	ldrh	r3, [r3, #0]
   1f53e:	1c79      	adds	r1, r7, #1
   1f540:	4812      	ldr	r0, [pc, #72]	; (1f58c <sd_mmc_spi_start_read_block+0x7c>)
   1f542:	2201      	movs	r2, #1
   1f544:	4c12      	ldr	r4, [pc, #72]	; (1f590 <sd_mmc_spi_start_read_block+0x80>)
   1f546:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1f548:	1c7b      	adds	r3, r7, #1
   1f54a:	781b      	ldrb	r3, [r3, #0]
   1f54c:	001a      	movs	r2, r3
   1f54e:	23f0      	movs	r3, #240	; 0xf0
   1f550:	4013      	ands	r3, r2
   1f552:	d10e      	bne.n	1f572 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1f554:	1c7b      	adds	r3, r7, #1
   1f556:	781b      	ldrb	r3, [r3, #0]
   1f558:	001a      	movs	r2, r3
   1f55a:	2307      	movs	r3, #7
   1f55c:	4013      	ands	r3, r2
   1f55e:	d003      	beq.n	1f568 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1f560:	4b09      	ldr	r3, [pc, #36]	; (1f588 <sd_mmc_spi_start_read_block+0x78>)
   1f562:	2207      	movs	r2, #7
   1f564:	701a      	strb	r2, [r3, #0]
   1f566:	e002      	b.n	1f56e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1f568:	4b07      	ldr	r3, [pc, #28]	; (1f588 <sd_mmc_spi_start_read_block+0x78>)
   1f56a:	220b      	movs	r2, #11
   1f56c:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1f56e:	2300      	movs	r3, #0
   1f570:	e004      	b.n	1f57c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1f572:	1c7b      	adds	r3, r7, #1
   1f574:	781b      	ldrb	r3, [r3, #0]
   1f576:	2bfe      	cmp	r3, #254	; 0xfe
   1f578:	d1d5      	bne.n	1f526 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1f57a:	2301      	movs	r3, #1
}
   1f57c:	0018      	movs	r0, r3
   1f57e:	46bd      	mov	sp, r7
   1f580:	b003      	add	sp, #12
   1f582:	bd90      	pop	{r4, r7, pc}
   1f584:	0007a120 	.word	0x0007a120
   1f588:	20004137 	.word	0x20004137
   1f58c:	200040f4 	.word	0x200040f4
   1f590:	00027ce9 	.word	0x00027ce9

0001f594 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1f594:	b590      	push	{r4, r7, lr}
   1f596:	b083      	sub	sp, #12
   1f598:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1f59a:	1dbb      	adds	r3, r7, #6
   1f59c:	22ff      	movs	r2, #255	; 0xff
   1f59e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1f5a0:	1dbb      	adds	r3, r7, #6
   1f5a2:	881b      	ldrh	r3, [r3, #0]
   1f5a4:	1d39      	adds	r1, r7, #4
   1f5a6:	4804      	ldr	r0, [pc, #16]	; (1f5b8 <sd_mmc_spi_stop_read_block+0x24>)
   1f5a8:	2202      	movs	r2, #2
   1f5aa:	4c04      	ldr	r4, [pc, #16]	; (1f5bc <sd_mmc_spi_stop_read_block+0x28>)
   1f5ac:	47a0      	blx	r4
			dummy);
}
   1f5ae:	46c0      	nop			; (mov r8, r8)
   1f5b0:	46bd      	mov	sp, r7
   1f5b2:	b003      	add	sp, #12
   1f5b4:	bd90      	pop	{r4, r7, pc}
   1f5b6:	46c0      	nop			; (mov r8, r8)
   1f5b8:	200040f4 	.word	0x200040f4
   1f5bc:	00027ce9 	.word	0x00027ce9

0001f5c0 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1f5c0:	b580      	push	{r7, lr}
   1f5c2:	b082      	sub	sp, #8
   1f5c4:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1f5c6:	1dfb      	adds	r3, r7, #7
   1f5c8:	22ff      	movs	r2, #255	; 0xff
   1f5ca:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1f5cc:	1df9      	adds	r1, r7, #7
   1f5ce:	4b0d      	ldr	r3, [pc, #52]	; (1f604 <sd_mmc_spi_start_write_block+0x44>)
   1f5d0:	2201      	movs	r2, #1
   1f5d2:	0018      	movs	r0, r3
   1f5d4:	4b0c      	ldr	r3, [pc, #48]	; (1f608 <sd_mmc_spi_start_write_block+0x48>)
   1f5d6:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1f5d8:	4b0c      	ldr	r3, [pc, #48]	; (1f60c <sd_mmc_spi_start_write_block+0x4c>)
   1f5da:	881b      	ldrh	r3, [r3, #0]
   1f5dc:	2b01      	cmp	r3, #1
   1f5de:	d103      	bne.n	1f5e8 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1f5e0:	1dbb      	adds	r3, r7, #6
   1f5e2:	22fe      	movs	r2, #254	; 0xfe
   1f5e4:	701a      	strb	r2, [r3, #0]
   1f5e6:	e002      	b.n	1f5ee <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1f5e8:	1dbb      	adds	r3, r7, #6
   1f5ea:	22fc      	movs	r2, #252	; 0xfc
   1f5ec:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1f5ee:	1db9      	adds	r1, r7, #6
   1f5f0:	4b04      	ldr	r3, [pc, #16]	; (1f604 <sd_mmc_spi_start_write_block+0x44>)
   1f5f2:	2201      	movs	r2, #1
   1f5f4:	0018      	movs	r0, r3
   1f5f6:	4b04      	ldr	r3, [pc, #16]	; (1f608 <sd_mmc_spi_start_write_block+0x48>)
   1f5f8:	4798      	blx	r3
}
   1f5fa:	46c0      	nop			; (mov r8, r8)
   1f5fc:	46bd      	mov	sp, r7
   1f5fe:	b002      	add	sp, #8
   1f600:	bd80      	pop	{r7, pc}
   1f602:	46c0      	nop			; (mov r8, r8)
   1f604:	200040f4 	.word	0x200040f4
   1f608:	00027f0d 	.word	0x00027f0d
   1f60c:	20004142 	.word	0x20004142

0001f610 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1f610:	b590      	push	{r4, r7, lr}
   1f612:	b083      	sub	sp, #12
   1f614:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1f616:	1dbb      	adds	r3, r7, #6
   1f618:	22ff      	movs	r2, #255	; 0xff
   1f61a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1f61c:	1cbb      	adds	r3, r7, #2
   1f61e:	2201      	movs	r2, #1
   1f620:	4252      	negs	r2, r2
   1f622:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1f624:	1cb9      	adds	r1, r7, #2
   1f626:	4b1b      	ldr	r3, [pc, #108]	; (1f694 <sd_mmc_spi_stop_write_block+0x84>)
   1f628:	2202      	movs	r2, #2
   1f62a:	0018      	movs	r0, r3
   1f62c:	4b1a      	ldr	r3, [pc, #104]	; (1f698 <sd_mmc_spi_stop_write_block+0x88>)
   1f62e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1f630:	1dbb      	adds	r3, r7, #6
   1f632:	881b      	ldrh	r3, [r3, #0]
   1f634:	1d79      	adds	r1, r7, #5
   1f636:	4817      	ldr	r0, [pc, #92]	; (1f694 <sd_mmc_spi_stop_write_block+0x84>)
   1f638:	2201      	movs	r2, #1
   1f63a:	4c18      	ldr	r4, [pc, #96]	; (1f69c <sd_mmc_spi_stop_write_block+0x8c>)
   1f63c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1f63e:	1d7b      	adds	r3, r7, #5
   1f640:	781b      	ldrb	r3, [r3, #0]
   1f642:	001a      	movs	r2, r3
   1f644:	2310      	movs	r3, #16
   1f646:	4013      	ands	r3, r2
   1f648:	d105      	bne.n	1f656 <sd_mmc_spi_stop_write_block+0x46>
   1f64a:	1d7b      	adds	r3, r7, #5
   1f64c:	781b      	ldrb	r3, [r3, #0]
   1f64e:	001a      	movs	r2, r3
   1f650:	2301      	movs	r3, #1
   1f652:	4013      	ands	r3, r2
   1f654:	d104      	bne.n	1f660 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f656:	4b12      	ldr	r3, [pc, #72]	; (1f6a0 <sd_mmc_spi_stop_write_block+0x90>)
   1f658:	2201      	movs	r2, #1
   1f65a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1f65c:	2300      	movs	r3, #0
   1f65e:	e014      	b.n	1f68a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1f660:	1d7b      	adds	r3, r7, #5
   1f662:	781b      	ldrb	r3, [r3, #0]
   1f664:	001a      	movs	r2, r3
   1f666:	231e      	movs	r3, #30
   1f668:	4013      	ands	r3, r2
   1f66a:	2b04      	cmp	r3, #4
   1f66c:	d00b      	beq.n	1f686 <sd_mmc_spi_stop_write_block+0x76>
   1f66e:	2b0a      	cmp	r3, #10
   1f670:	d104      	bne.n	1f67c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1f672:	4b0b      	ldr	r3, [pc, #44]	; (1f6a0 <sd_mmc_spi_stop_write_block+0x90>)
   1f674:	2208      	movs	r2, #8
   1f676:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f678:	2300      	movs	r3, #0
   1f67a:	e006      	b.n	1f68a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1f67c:	4b08      	ldr	r3, [pc, #32]	; (1f6a0 <sd_mmc_spi_stop_write_block+0x90>)
   1f67e:	220a      	movs	r2, #10
   1f680:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f682:	2300      	movs	r3, #0
   1f684:	e001      	b.n	1f68a <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1f686:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f688:	2301      	movs	r3, #1
}
   1f68a:	0018      	movs	r0, r3
   1f68c:	46bd      	mov	sp, r7
   1f68e:	b003      	add	sp, #12
   1f690:	bd90      	pop	{r4, r7, pc}
   1f692:	46c0      	nop			; (mov r8, r8)
   1f694:	200040f4 	.word	0x200040f4
   1f698:	00027f0d 	.word	0x00027f0d
   1f69c:	00027ce9 	.word	0x00027ce9
   1f6a0:	20004137 	.word	0x20004137

0001f6a4 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1f6a4:	b590      	push	{r4, r7, lr}
   1f6a6:	b083      	sub	sp, #12
   1f6a8:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1f6aa:	4b1d      	ldr	r3, [pc, #116]	; (1f720 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f6ac:	881b      	ldrh	r3, [r3, #0]
   1f6ae:	2b01      	cmp	r3, #1
   1f6b0:	d101      	bne.n	1f6b6 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1f6b2:	2301      	movs	r3, #1
   1f6b4:	e030      	b.n	1f718 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1f6b6:	4b1a      	ldr	r3, [pc, #104]	; (1f720 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f6b8:	881b      	ldrh	r3, [r3, #0]
   1f6ba:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1f6bc:	4b19      	ldr	r3, [pc, #100]	; (1f724 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1f6be:	681a      	ldr	r2, [r3, #0]
   1f6c0:	4b19      	ldr	r3, [pc, #100]	; (1f728 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1f6c2:	881b      	ldrh	r3, [r3, #0]
   1f6c4:	0019      	movs	r1, r3
   1f6c6:	4b19      	ldr	r3, [pc, #100]	; (1f72c <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1f6c8:	0010      	movs	r0, r2
   1f6ca:	4798      	blx	r3
   1f6cc:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1f6ce:	429c      	cmp	r4, r3
   1f6d0:	d901      	bls.n	1f6d6 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1f6d2:	2301      	movs	r3, #1
   1f6d4:	e020      	b.n	1f718 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1f6d6:	1dfb      	adds	r3, r7, #7
   1f6d8:	22ff      	movs	r2, #255	; 0xff
   1f6da:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f6dc:	1df9      	adds	r1, r7, #7
   1f6de:	4b14      	ldr	r3, [pc, #80]	; (1f730 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f6e0:	2201      	movs	r2, #1
   1f6e2:	0018      	movs	r0, r3
   1f6e4:	4b13      	ldr	r3, [pc, #76]	; (1f734 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f6e6:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1f6e8:	1dfb      	adds	r3, r7, #7
   1f6ea:	22fd      	movs	r2, #253	; 0xfd
   1f6ec:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f6ee:	1df9      	adds	r1, r7, #7
   1f6f0:	4b0f      	ldr	r3, [pc, #60]	; (1f730 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f6f2:	2201      	movs	r2, #1
   1f6f4:	0018      	movs	r0, r3
   1f6f6:	4b0f      	ldr	r3, [pc, #60]	; (1f734 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f6f8:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1f6fa:	4b0f      	ldr	r3, [pc, #60]	; (1f738 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1f6fc:	4798      	blx	r3
   1f6fe:	0003      	movs	r3, r0
   1f700:	001a      	movs	r2, r3
   1f702:	2301      	movs	r3, #1
   1f704:	4053      	eors	r3, r2
   1f706:	b2db      	uxtb	r3, r3
   1f708:	2b00      	cmp	r3, #0
   1f70a:	d004      	beq.n	1f716 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f70c:	4b0b      	ldr	r3, [pc, #44]	; (1f73c <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1f70e:	2205      	movs	r2, #5
   1f710:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1f712:	2300      	movs	r3, #0
   1f714:	e000      	b.n	1f718 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1f716:	2301      	movs	r3, #1
}
   1f718:	0018      	movs	r0, r3
   1f71a:	46bd      	mov	sp, r7
   1f71c:	b003      	add	sp, #12
   1f71e:	bd90      	pop	{r4, r7, pc}
   1f720:	20004142 	.word	0x20004142
   1f724:	2000413c 	.word	0x2000413c
   1f728:	20004140 	.word	0x20004140
   1f72c:	00032705 	.word	0x00032705
   1f730:	200040f4 	.word	0x200040f4
   1f734:	00027f0d 	.word	0x00027f0d
   1f738:	0001f4a5 	.word	0x0001f4a5
   1f73c:	20004137 	.word	0x20004137

0001f740 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1f740:	b580      	push	{r7, lr}
   1f742:	b090      	sub	sp, #64	; 0x40
   1f744:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f746:	4b1f      	ldr	r3, [pc, #124]	; (1f7c4 <sd_mmc_spi_init+0x84>)
   1f748:	2200      	movs	r2, #0
   1f74a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1f74c:	233c      	movs	r3, #60	; 0x3c
   1f74e:	18fb      	adds	r3, r7, r3
   1f750:	0018      	movs	r0, r3
   1f752:	4b1d      	ldr	r3, [pc, #116]	; (1f7c8 <sd_mmc_spi_init+0x88>)
   1f754:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1f756:	1d3b      	adds	r3, r7, #4
   1f758:	0018      	movs	r0, r3
   1f75a:	4b1c      	ldr	r3, [pc, #112]	; (1f7cc <sd_mmc_spi_init+0x8c>)
   1f75c:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1f75e:	1d3b      	adds	r3, r7, #4
   1f760:	2280      	movs	r2, #128	; 0x80
   1f762:	0252      	lsls	r2, r2, #9
   1f764:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1f766:	1d3b      	adds	r3, r7, #4
   1f768:	4a19      	ldr	r2, [pc, #100]	; (1f7d0 <sd_mmc_spi_init+0x90>)
   1f76a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1f76c:	1d3b      	adds	r3, r7, #4
   1f76e:	4a19      	ldr	r2, [pc, #100]	; (1f7d4 <sd_mmc_spi_init+0x94>)
   1f770:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1f772:	1d3b      	adds	r3, r7, #4
   1f774:	4a18      	ldr	r2, [pc, #96]	; (1f7d8 <sd_mmc_spi_init+0x98>)
   1f776:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1f778:	1d3b      	adds	r3, r7, #4
   1f77a:	4a18      	ldr	r2, [pc, #96]	; (1f7dc <sd_mmc_spi_init+0x9c>)
   1f77c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1f77e:	1d3b      	adds	r3, r7, #4
   1f780:	2224      	movs	r2, #36	; 0x24
   1f782:	2100      	movs	r1, #0
   1f784:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1f786:	1d3b      	adds	r3, r7, #4
   1f788:	4a15      	ldr	r2, [pc, #84]	; (1f7e0 <sd_mmc_spi_init+0xa0>)
   1f78a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1f78c:	1d3a      	adds	r2, r7, #4
   1f78e:	4915      	ldr	r1, [pc, #84]	; (1f7e4 <sd_mmc_spi_init+0xa4>)
   1f790:	4b15      	ldr	r3, [pc, #84]	; (1f7e8 <sd_mmc_spi_init+0xa8>)
   1f792:	0018      	movs	r0, r3
   1f794:	4b15      	ldr	r3, [pc, #84]	; (1f7ec <sd_mmc_spi_init+0xac>)
   1f796:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1f798:	4b13      	ldr	r3, [pc, #76]	; (1f7e8 <sd_mmc_spi_init+0xa8>)
   1f79a:	0018      	movs	r0, r3
   1f79c:	4b14      	ldr	r3, [pc, #80]	; (1f7f0 <sd_mmc_spi_init+0xb0>)
   1f79e:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1f7a0:	4b14      	ldr	r3, [pc, #80]	; (1f7f4 <sd_mmc_spi_init+0xb4>)
   1f7a2:	0018      	movs	r0, r3
   1f7a4:	4b14      	ldr	r3, [pc, #80]	; (1f7f8 <sd_mmc_spi_init+0xb8>)
   1f7a6:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1f7a8:	4b14      	ldr	r3, [pc, #80]	; (1f7fc <sd_mmc_spi_init+0xbc>)
   1f7aa:	781a      	ldrb	r2, [r3, #0]
   1f7ac:	4b11      	ldr	r3, [pc, #68]	; (1f7f4 <sd_mmc_spi_init+0xb4>)
   1f7ae:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1f7b0:	4a10      	ldr	r2, [pc, #64]	; (1f7f4 <sd_mmc_spi_init+0xb4>)
   1f7b2:	4b13      	ldr	r3, [pc, #76]	; (1f800 <sd_mmc_spi_init+0xc0>)
   1f7b4:	0011      	movs	r1, r2
   1f7b6:	0018      	movs	r0, r3
   1f7b8:	4b12      	ldr	r3, [pc, #72]	; (1f804 <sd_mmc_spi_init+0xc4>)
   1f7ba:	4798      	blx	r3
}
   1f7bc:	46c0      	nop			; (mov r8, r8)
   1f7be:	46bd      	mov	sp, r7
   1f7c0:	b010      	add	sp, #64	; 0x40
   1f7c2:	bd80      	pop	{r7, pc}
   1f7c4:	20004137 	.word	0x20004137
   1f7c8:	0001f1f5 	.word	0x0001f1f5
   1f7cc:	0001f28d 	.word	0x0001f28d
   1f7d0:	00100002 	.word	0x00100002
   1f7d4:	00110002 	.word	0x00110002
   1f7d8:	00120002 	.word	0x00120002
   1f7dc:	00130002 	.word	0x00130002
   1f7e0:	00061a80 	.word	0x00061a80
   1f7e4:	42000c00 	.word	0x42000c00
   1f7e8:	200040f4 	.word	0x200040f4
   1f7ec:	00027b59 	.word	0x00027b59
   1f7f0:	0001f399 	.word	0x0001f399
   1f7f4:	20004134 	.word	0x20004134
   1f7f8:	0001f311 	.word	0x0001f311
   1f7fc:	20000138 	.word	0x20000138
   1f800:	20004130 	.word	0x20004130
   1f804:	0001f335 	.word	0x0001f335

0001f808 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1f808:	b590      	push	{r4, r7, lr}
   1f80a:	b083      	sub	sp, #12
   1f80c:	af00      	add	r7, sp, #0
   1f80e:	0004      	movs	r4, r0
   1f810:	6039      	str	r1, [r7, #0]
   1f812:	0010      	movs	r0, r2
   1f814:	0019      	movs	r1, r3
   1f816:	1dfb      	adds	r3, r7, #7
   1f818:	1c22      	adds	r2, r4, #0
   1f81a:	701a      	strb	r2, [r3, #0]
   1f81c:	1dbb      	adds	r3, r7, #6
   1f81e:	1c02      	adds	r2, r0, #0
   1f820:	701a      	strb	r2, [r3, #0]
   1f822:	1d7b      	adds	r3, r7, #5
   1f824:	1c0a      	adds	r2, r1, #0
   1f826:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f828:	4b13      	ldr	r3, [pc, #76]	; (1f878 <sd_mmc_spi_select_device+0x70>)
   1f82a:	2200      	movs	r2, #0
   1f82c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1f82e:	683b      	ldr	r3, [r7, #0]
   1f830:	4a12      	ldr	r2, [pc, #72]	; (1f87c <sd_mmc_spi_select_device+0x74>)
   1f832:	4293      	cmp	r3, r2
   1f834:	d907      	bls.n	1f846 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1f836:	4b11      	ldr	r3, [pc, #68]	; (1f87c <sd_mmc_spi_select_device+0x74>)
   1f838:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1f83a:	e004      	b.n	1f846 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1f83c:	683b      	ldr	r3, [r7, #0]
   1f83e:	08db      	lsrs	r3, r3, #3
   1f840:	683a      	ldr	r2, [r7, #0]
   1f842:	1ad3      	subs	r3, r2, r3
   1f844:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1f846:	683a      	ldr	r2, [r7, #0]
   1f848:	4b0d      	ldr	r3, [pc, #52]	; (1f880 <sd_mmc_spi_select_device+0x78>)
   1f84a:	0011      	movs	r1, r2
   1f84c:	0018      	movs	r0, r3
   1f84e:	4b0d      	ldr	r3, [pc, #52]	; (1f884 <sd_mmc_spi_select_device+0x7c>)
   1f850:	4798      	blx	r3
   1f852:	0003      	movs	r3, r0
   1f854:	2b17      	cmp	r3, #23
   1f856:	d0f1      	beq.n	1f83c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1f858:	1dfb      	adds	r3, r7, #7
   1f85a:	781a      	ldrb	r2, [r3, #0]
   1f85c:	0013      	movs	r3, r2
   1f85e:	005b      	lsls	r3, r3, #1
   1f860:	189b      	adds	r3, r3, r2
   1f862:	4a09      	ldr	r2, [pc, #36]	; (1f888 <sd_mmc_spi_select_device+0x80>)
   1f864:	1899      	adds	r1, r3, r2
   1f866:	4b06      	ldr	r3, [pc, #24]	; (1f880 <sd_mmc_spi_select_device+0x78>)
   1f868:	2201      	movs	r2, #1
   1f86a:	0018      	movs	r0, r3
   1f86c:	4b07      	ldr	r3, [pc, #28]	; (1f88c <sd_mmc_spi_select_device+0x84>)
   1f86e:	4798      	blx	r3
}
   1f870:	46c0      	nop			; (mov r8, r8)
   1f872:	46bd      	mov	sp, r7
   1f874:	b003      	add	sp, #12
   1f876:	bd90      	pop	{r4, r7, pc}
   1f878:	20004137 	.word	0x20004137
   1f87c:	00989680 	.word	0x00989680
   1f880:	200040f4 	.word	0x200040f4
   1f884:	00027881 	.word	0x00027881
   1f888:	20004130 	.word	0x20004130
   1f88c:	00027e1d 	.word	0x00027e1d

0001f890 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1f890:	b580      	push	{r7, lr}
   1f892:	b082      	sub	sp, #8
   1f894:	af00      	add	r7, sp, #0
   1f896:	0002      	movs	r2, r0
   1f898:	1dfb      	adds	r3, r7, #7
   1f89a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f89c:	4b09      	ldr	r3, [pc, #36]	; (1f8c4 <sd_mmc_spi_deselect_device+0x34>)
   1f89e:	2200      	movs	r2, #0
   1f8a0:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1f8a2:	1dfb      	adds	r3, r7, #7
   1f8a4:	781a      	ldrb	r2, [r3, #0]
   1f8a6:	0013      	movs	r3, r2
   1f8a8:	005b      	lsls	r3, r3, #1
   1f8aa:	189b      	adds	r3, r3, r2
   1f8ac:	4a06      	ldr	r2, [pc, #24]	; (1f8c8 <sd_mmc_spi_deselect_device+0x38>)
   1f8ae:	1899      	adds	r1, r3, r2
   1f8b0:	4b06      	ldr	r3, [pc, #24]	; (1f8cc <sd_mmc_spi_deselect_device+0x3c>)
   1f8b2:	2200      	movs	r2, #0
   1f8b4:	0018      	movs	r0, r3
   1f8b6:	4b06      	ldr	r3, [pc, #24]	; (1f8d0 <sd_mmc_spi_deselect_device+0x40>)
   1f8b8:	4798      	blx	r3
}
   1f8ba:	46c0      	nop			; (mov r8, r8)
   1f8bc:	46bd      	mov	sp, r7
   1f8be:	b002      	add	sp, #8
   1f8c0:	bd80      	pop	{r7, pc}
   1f8c2:	46c0      	nop			; (mov r8, r8)
   1f8c4:	20004137 	.word	0x20004137
   1f8c8:	20004130 	.word	0x20004130
   1f8cc:	200040f4 	.word	0x200040f4
   1f8d0:	00027e1d 	.word	0x00027e1d

0001f8d4 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1f8d4:	b580      	push	{r7, lr}
   1f8d6:	b082      	sub	sp, #8
   1f8d8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1f8da:	1dbb      	adds	r3, r7, #6
   1f8dc:	22ff      	movs	r2, #255	; 0xff
   1f8de:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f8e0:	4b0c      	ldr	r3, [pc, #48]	; (1f914 <sd_mmc_spi_send_clock+0x40>)
   1f8e2:	2200      	movs	r2, #0
   1f8e4:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1f8e6:	1dfb      	adds	r3, r7, #7
   1f8e8:	2200      	movs	r2, #0
   1f8ea:	701a      	strb	r2, [r3, #0]
   1f8ec:	e00a      	b.n	1f904 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1f8ee:	1db9      	adds	r1, r7, #6
   1f8f0:	4b09      	ldr	r3, [pc, #36]	; (1f918 <sd_mmc_spi_send_clock+0x44>)
   1f8f2:	2201      	movs	r2, #1
   1f8f4:	0018      	movs	r0, r3
   1f8f6:	4b09      	ldr	r3, [pc, #36]	; (1f91c <sd_mmc_spi_send_clock+0x48>)
   1f8f8:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1f8fa:	1dfb      	adds	r3, r7, #7
   1f8fc:	781a      	ldrb	r2, [r3, #0]
   1f8fe:	1dfb      	adds	r3, r7, #7
   1f900:	3201      	adds	r2, #1
   1f902:	701a      	strb	r2, [r3, #0]
   1f904:	1dfb      	adds	r3, r7, #7
   1f906:	781b      	ldrb	r3, [r3, #0]
   1f908:	2b09      	cmp	r3, #9
   1f90a:	d9f0      	bls.n	1f8ee <sd_mmc_spi_send_clock+0x1a>
	}
}
   1f90c:	46c0      	nop			; (mov r8, r8)
   1f90e:	46bd      	mov	sp, r7
   1f910:	b002      	add	sp, #8
   1f912:	bd80      	pop	{r7, pc}
   1f914:	20004137 	.word	0x20004137
   1f918:	200040f4 	.word	0x200040f4
   1f91c:	00027f0d 	.word	0x00027f0d

0001f920 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1f920:	b590      	push	{r4, r7, lr}
   1f922:	b085      	sub	sp, #20
   1f924:	af02      	add	r7, sp, #8
   1f926:	6078      	str	r0, [r7, #4]
   1f928:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1f92a:	6839      	ldr	r1, [r7, #0]
   1f92c:	6878      	ldr	r0, [r7, #4]
   1f92e:	2300      	movs	r3, #0
   1f930:	9300      	str	r3, [sp, #0]
   1f932:	2300      	movs	r3, #0
   1f934:	2200      	movs	r2, #0
   1f936:	4c03      	ldr	r4, [pc, #12]	; (1f944 <sd_mmc_spi_send_cmd+0x24>)
   1f938:	47a0      	blx	r4
   1f93a:	0003      	movs	r3, r0
}
   1f93c:	0018      	movs	r0, r3
   1f93e:	46bd      	mov	sp, r7
   1f940:	b003      	add	sp, #12
   1f942:	bd90      	pop	{r4, r7, pc}
   1f944:	0001f949 	.word	0x0001f949

0001f948 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1f948:	b590      	push	{r4, r7, lr}
   1f94a:	b089      	sub	sp, #36	; 0x24
   1f94c:	af00      	add	r7, sp, #0
   1f94e:	60f8      	str	r0, [r7, #12]
   1f950:	60b9      	str	r1, [r7, #8]
   1f952:	0019      	movs	r1, r3
   1f954:	1dbb      	adds	r3, r7, #6
   1f956:	801a      	strh	r2, [r3, #0]
   1f958:	1d3b      	adds	r3, r7, #4
   1f95a:	1c0a      	adds	r2, r1, #0
   1f95c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1f95e:	231b      	movs	r3, #27
   1f960:	18fb      	adds	r3, r7, r3
   1f962:	22ff      	movs	r2, #255	; 0xff
   1f964:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1f966:	231c      	movs	r3, #28
   1f968:	18fb      	adds	r3, r7, r3
   1f96a:	22ff      	movs	r2, #255	; 0xff
   1f96c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f96e:	4b72      	ldr	r3, [pc, #456]	; (1fb38 <sd_mmc_spi_adtc_start+0x1f0>)
   1f970:	2200      	movs	r2, #0
   1f972:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1f974:	68fb      	ldr	r3, [r7, #12]
   1f976:	b2db      	uxtb	r3, r3
   1f978:	223f      	movs	r2, #63	; 0x3f
   1f97a:	4013      	ands	r3, r2
   1f97c:	b2db      	uxtb	r3, r3
   1f97e:	2240      	movs	r2, #64	; 0x40
   1f980:	4313      	orrs	r3, r2
   1f982:	b2da      	uxtb	r2, r3
   1f984:	2314      	movs	r3, #20
   1f986:	18fb      	adds	r3, r7, r3
   1f988:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1f98a:	68bb      	ldr	r3, [r7, #8]
   1f98c:	0e1b      	lsrs	r3, r3, #24
   1f98e:	b2da      	uxtb	r2, r3
   1f990:	2314      	movs	r3, #20
   1f992:	18fb      	adds	r3, r7, r3
   1f994:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1f996:	68bb      	ldr	r3, [r7, #8]
   1f998:	0c1b      	lsrs	r3, r3, #16
   1f99a:	b2da      	uxtb	r2, r3
   1f99c:	2314      	movs	r3, #20
   1f99e:	18fb      	adds	r3, r7, r3
   1f9a0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1f9a2:	68bb      	ldr	r3, [r7, #8]
   1f9a4:	0a1b      	lsrs	r3, r3, #8
   1f9a6:	b2da      	uxtb	r2, r3
   1f9a8:	2314      	movs	r3, #20
   1f9aa:	18fb      	adds	r3, r7, r3
   1f9ac:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1f9ae:	68bb      	ldr	r3, [r7, #8]
   1f9b0:	b2da      	uxtb	r2, r3
   1f9b2:	2314      	movs	r3, #20
   1f9b4:	18fb      	adds	r3, r7, r3
   1f9b6:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1f9b8:	2314      	movs	r3, #20
   1f9ba:	18fb      	adds	r3, r7, r3
   1f9bc:	2105      	movs	r1, #5
   1f9be:	0018      	movs	r0, r3
   1f9c0:	4b5e      	ldr	r3, [pc, #376]	; (1fb3c <sd_mmc_spi_adtc_start+0x1f4>)
   1f9c2:	4798      	blx	r3
   1f9c4:	0003      	movs	r3, r0
   1f9c6:	001a      	movs	r2, r3
   1f9c8:	2314      	movs	r3, #20
   1f9ca:	18fb      	adds	r3, r7, r3
   1f9cc:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1f9ce:	231b      	movs	r3, #27
   1f9d0:	18f9      	adds	r1, r7, r3
   1f9d2:	4b5b      	ldr	r3, [pc, #364]	; (1fb40 <sd_mmc_spi_adtc_start+0x1f8>)
   1f9d4:	2201      	movs	r2, #1
   1f9d6:	0018      	movs	r0, r3
   1f9d8:	4b5a      	ldr	r3, [pc, #360]	; (1fb44 <sd_mmc_spi_adtc_start+0x1fc>)
   1f9da:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1f9dc:	2314      	movs	r3, #20
   1f9de:	18f9      	adds	r1, r7, r3
   1f9e0:	4b57      	ldr	r3, [pc, #348]	; (1fb40 <sd_mmc_spi_adtc_start+0x1f8>)
   1f9e2:	2206      	movs	r2, #6
   1f9e4:	0018      	movs	r0, r3
   1f9e6:	4b57      	ldr	r3, [pc, #348]	; (1fb44 <sd_mmc_spi_adtc_start+0x1fc>)
   1f9e8:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1f9ea:	2313      	movs	r3, #19
   1f9ec:	18fb      	adds	r3, r7, r3
   1f9ee:	22ff      	movs	r2, #255	; 0xff
   1f9f0:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1f9f2:	231c      	movs	r3, #28
   1f9f4:	18fb      	adds	r3, r7, r3
   1f9f6:	881b      	ldrh	r3, [r3, #0]
   1f9f8:	2213      	movs	r2, #19
   1f9fa:	18b9      	adds	r1, r7, r2
   1f9fc:	4850      	ldr	r0, [pc, #320]	; (1fb40 <sd_mmc_spi_adtc_start+0x1f8>)
   1f9fe:	2201      	movs	r2, #1
   1fa00:	4c51      	ldr	r4, [pc, #324]	; (1fb48 <sd_mmc_spi_adtc_start+0x200>)
   1fa02:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1fa04:	231f      	movs	r3, #31
   1fa06:	18fb      	adds	r3, r7, r3
   1fa08:	2207      	movs	r2, #7
   1fa0a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1fa0c:	231c      	movs	r3, #28
   1fa0e:	18fb      	adds	r3, r7, r3
   1fa10:	881b      	ldrh	r3, [r3, #0]
   1fa12:	2213      	movs	r2, #19
   1fa14:	18b9      	adds	r1, r7, r2
   1fa16:	484a      	ldr	r0, [pc, #296]	; (1fb40 <sd_mmc_spi_adtc_start+0x1f8>)
   1fa18:	2201      	movs	r2, #1
   1fa1a:	4c4b      	ldr	r4, [pc, #300]	; (1fb48 <sd_mmc_spi_adtc_start+0x200>)
   1fa1c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1fa1e:	2313      	movs	r3, #19
   1fa20:	18fb      	adds	r3, r7, r3
   1fa22:	781b      	ldrb	r3, [r3, #0]
   1fa24:	b25b      	sxtb	r3, r3
   1fa26:	2b00      	cmp	r3, #0
   1fa28:	da10      	bge.n	1fa4c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1fa2a:	231f      	movs	r3, #31
   1fa2c:	18fb      	adds	r3, r7, r3
   1fa2e:	221f      	movs	r2, #31
   1fa30:	18ba      	adds	r2, r7, r2
   1fa32:	7812      	ldrb	r2, [r2, #0]
   1fa34:	3a01      	subs	r2, #1
   1fa36:	701a      	strb	r2, [r3, #0]
   1fa38:	231f      	movs	r3, #31
   1fa3a:	18fb      	adds	r3, r7, r3
   1fa3c:	781b      	ldrb	r3, [r3, #0]
   1fa3e:	2b00      	cmp	r3, #0
   1fa40:	d1e4      	bne.n	1fa0c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1fa42:	4b3d      	ldr	r3, [pc, #244]	; (1fb38 <sd_mmc_spi_adtc_start+0x1f0>)
   1fa44:	2202      	movs	r2, #2
   1fa46:	701a      	strb	r2, [r3, #0]
			return false;
   1fa48:	2300      	movs	r3, #0
   1fa4a:	e070      	b.n	1fb2e <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1fa4c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1fa4e:	2313      	movs	r3, #19
   1fa50:	18fb      	adds	r3, r7, r3
   1fa52:	781b      	ldrb	r3, [r3, #0]
   1fa54:	001a      	movs	r2, r3
   1fa56:	4b3d      	ldr	r3, [pc, #244]	; (1fb4c <sd_mmc_spi_adtc_start+0x204>)
   1fa58:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1fa5a:	2313      	movs	r3, #19
   1fa5c:	18fb      	adds	r3, r7, r3
   1fa5e:	781b      	ldrb	r3, [r3, #0]
   1fa60:	001a      	movs	r2, r3
   1fa62:	2308      	movs	r3, #8
   1fa64:	4013      	ands	r3, r2
   1fa66:	d004      	beq.n	1fa72 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1fa68:	4b33      	ldr	r3, [pc, #204]	; (1fb38 <sd_mmc_spi_adtc_start+0x1f0>)
   1fa6a:	2206      	movs	r2, #6
   1fa6c:	701a      	strb	r2, [r3, #0]
		return false;
   1fa6e:	2300      	movs	r3, #0
   1fa70:	e05d      	b.n	1fb2e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1fa72:	2313      	movs	r3, #19
   1fa74:	18fb      	adds	r3, r7, r3
   1fa76:	781b      	ldrb	r3, [r3, #0]
   1fa78:	001a      	movs	r2, r3
   1fa7a:	2304      	movs	r3, #4
   1fa7c:	4013      	ands	r3, r2
   1fa7e:	d004      	beq.n	1fa8a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1fa80:	4b2d      	ldr	r3, [pc, #180]	; (1fb38 <sd_mmc_spi_adtc_start+0x1f0>)
   1fa82:	2209      	movs	r2, #9
   1fa84:	701a      	strb	r2, [r3, #0]
		return false;
   1fa86:	2300      	movs	r3, #0
   1fa88:	e051      	b.n	1fb2e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1fa8a:	2313      	movs	r3, #19
   1fa8c:	18fb      	adds	r3, r7, r3
   1fa8e:	781b      	ldrb	r3, [r3, #0]
   1fa90:	001a      	movs	r2, r3
   1fa92:	2301      	movs	r3, #1
   1fa94:	439a      	bics	r2, r3
   1fa96:	1e13      	subs	r3, r2, #0
   1fa98:	d004      	beq.n	1faa4 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1fa9a:	4b27      	ldr	r3, [pc, #156]	; (1fb38 <sd_mmc_spi_adtc_start+0x1f0>)
   1fa9c:	2201      	movs	r2, #1
   1fa9e:	701a      	strb	r2, [r3, #0]
		return false;
   1faa0:	2300      	movs	r3, #0
   1faa2:	e044      	b.n	1fb2e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1faa4:	68fa      	ldr	r2, [r7, #12]
   1faa6:	2380      	movs	r3, #128	; 0x80
   1faa8:	019b      	lsls	r3, r3, #6
   1faaa:	4013      	ands	r3, r2
   1faac:	d00d      	beq.n	1faca <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1faae:	4b28      	ldr	r3, [pc, #160]	; (1fb50 <sd_mmc_spi_adtc_start+0x208>)
   1fab0:	4798      	blx	r3
   1fab2:	0003      	movs	r3, r0
   1fab4:	001a      	movs	r2, r3
   1fab6:	2301      	movs	r3, #1
   1fab8:	4053      	eors	r3, r2
   1faba:	b2db      	uxtb	r3, r3
   1fabc:	2b00      	cmp	r3, #0
   1fabe:	d004      	beq.n	1faca <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1fac0:	4b1d      	ldr	r3, [pc, #116]	; (1fb38 <sd_mmc_spi_adtc_start+0x1f0>)
   1fac2:	2203      	movs	r2, #3
   1fac4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1fac6:	2300      	movs	r3, #0
   1fac8:	e031      	b.n	1fb2e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1faca:	68fa      	ldr	r2, [r7, #12]
   1facc:	2380      	movs	r3, #128	; 0x80
   1face:	009b      	lsls	r3, r3, #2
   1fad0:	4013      	ands	r3, r2
   1fad2:	d00e      	beq.n	1faf2 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1fad4:	4b1d      	ldr	r3, [pc, #116]	; (1fb4c <sd_mmc_spi_adtc_start+0x204>)
   1fad6:	2200      	movs	r2, #0
   1fad8:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1fada:	231c      	movs	r3, #28
   1fadc:	18fb      	adds	r3, r7, r3
   1fade:	881b      	ldrh	r3, [r3, #0]
   1fae0:	491a      	ldr	r1, [pc, #104]	; (1fb4c <sd_mmc_spi_adtc_start+0x204>)
   1fae2:	4817      	ldr	r0, [pc, #92]	; (1fb40 <sd_mmc_spi_adtc_start+0x1f8>)
   1fae4:	2201      	movs	r2, #1
   1fae6:	4c18      	ldr	r4, [pc, #96]	; (1fb48 <sd_mmc_spi_adtc_start+0x200>)
   1fae8:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1faea:	4b18      	ldr	r3, [pc, #96]	; (1fb4c <sd_mmc_spi_adtc_start+0x204>)
   1faec:	681a      	ldr	r2, [r3, #0]
   1faee:	4b17      	ldr	r3, [pc, #92]	; (1fb4c <sd_mmc_spi_adtc_start+0x204>)
   1faf0:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1faf2:	68fa      	ldr	r2, [r7, #12]
   1faf4:	2380      	movs	r3, #128	; 0x80
   1faf6:	00db      	lsls	r3, r3, #3
   1faf8:	4013      	ands	r3, r2
   1fafa:	d00c      	beq.n	1fb16 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1fafc:	231c      	movs	r3, #28
   1fafe:	18fb      	adds	r3, r7, r3
   1fb00:	881b      	ldrh	r3, [r3, #0]
   1fb02:	4912      	ldr	r1, [pc, #72]	; (1fb4c <sd_mmc_spi_adtc_start+0x204>)
   1fb04:	480e      	ldr	r0, [pc, #56]	; (1fb40 <sd_mmc_spi_adtc_start+0x1f8>)
   1fb06:	2204      	movs	r2, #4
   1fb08:	4c0f      	ldr	r4, [pc, #60]	; (1fb48 <sd_mmc_spi_adtc_start+0x200>)
   1fb0a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1fb0c:	4b0f      	ldr	r3, [pc, #60]	; (1fb4c <sd_mmc_spi_adtc_start+0x204>)
   1fb0e:	681b      	ldr	r3, [r3, #0]
   1fb10:	ba1a      	rev	r2, r3
   1fb12:	4b0e      	ldr	r3, [pc, #56]	; (1fb4c <sd_mmc_spi_adtc_start+0x204>)
   1fb14:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1fb16:	4b0f      	ldr	r3, [pc, #60]	; (1fb54 <sd_mmc_spi_adtc_start+0x20c>)
   1fb18:	1dba      	adds	r2, r7, #6
   1fb1a:	8812      	ldrh	r2, [r2, #0]
   1fb1c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1fb1e:	4b0e      	ldr	r3, [pc, #56]	; (1fb58 <sd_mmc_spi_adtc_start+0x210>)
   1fb20:	1d3a      	adds	r2, r7, #4
   1fb22:	8812      	ldrh	r2, [r2, #0]
   1fb24:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1fb26:	4b0d      	ldr	r3, [pc, #52]	; (1fb5c <sd_mmc_spi_adtc_start+0x214>)
   1fb28:	2200      	movs	r2, #0
   1fb2a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1fb2c:	2301      	movs	r3, #1
}
   1fb2e:	0018      	movs	r0, r3
   1fb30:	46bd      	mov	sp, r7
   1fb32:	b009      	add	sp, #36	; 0x24
   1fb34:	bd90      	pop	{r4, r7, pc}
   1fb36:	46c0      	nop			; (mov r8, r8)
   1fb38:	20004137 	.word	0x20004137
   1fb3c:	0001f3e9 	.word	0x0001f3e9
   1fb40:	200040f4 	.word	0x200040f4
   1fb44:	00027f0d 	.word	0x00027f0d
   1fb48:	00027ce9 	.word	0x00027ce9
   1fb4c:	20004138 	.word	0x20004138
   1fb50:	0001f4a5 	.word	0x0001f4a5
   1fb54:	20004140 	.word	0x20004140
   1fb58:	20004142 	.word	0x20004142
   1fb5c:	2000413c 	.word	0x2000413c

0001fb60 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1fb60:	b580      	push	{r7, lr}
   1fb62:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1fb64:	4b02      	ldr	r3, [pc, #8]	; (1fb70 <sd_mmc_spi_get_response+0x10>)
   1fb66:	681b      	ldr	r3, [r3, #0]
}
   1fb68:	0018      	movs	r0, r3
   1fb6a:	46bd      	mov	sp, r7
   1fb6c:	bd80      	pop	{r7, pc}
   1fb6e:	46c0      	nop			; (mov r8, r8)
   1fb70:	20004138 	.word	0x20004138

0001fb74 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1fb74:	b590      	push	{r4, r7, lr}
   1fb76:	b085      	sub	sp, #20
   1fb78:	af00      	add	r7, sp, #0
   1fb7a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1fb7c:	230e      	movs	r3, #14
   1fb7e:	18fb      	adds	r3, r7, r3
   1fb80:	22ff      	movs	r2, #255	; 0xff
   1fb82:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fb84:	4b1c      	ldr	r3, [pc, #112]	; (1fbf8 <sd_mmc_spi_read_word+0x84>)
   1fb86:	2200      	movs	r2, #0
   1fb88:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1fb8a:	4b1c      	ldr	r3, [pc, #112]	; (1fbfc <sd_mmc_spi_read_word+0x88>)
   1fb8c:	681a      	ldr	r2, [r3, #0]
   1fb8e:	4b1c      	ldr	r3, [pc, #112]	; (1fc00 <sd_mmc_spi_read_word+0x8c>)
   1fb90:	881b      	ldrh	r3, [r3, #0]
   1fb92:	0019      	movs	r1, r3
   1fb94:	4b1b      	ldr	r3, [pc, #108]	; (1fc04 <sd_mmc_spi_read_word+0x90>)
   1fb96:	0010      	movs	r0, r2
   1fb98:	4798      	blx	r3
   1fb9a:	1e0b      	subs	r3, r1, #0
   1fb9c:	d10a      	bne.n	1fbb4 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1fb9e:	4b1a      	ldr	r3, [pc, #104]	; (1fc08 <sd_mmc_spi_read_word+0x94>)
   1fba0:	4798      	blx	r3
   1fba2:	0003      	movs	r3, r0
   1fba4:	001a      	movs	r2, r3
   1fba6:	2301      	movs	r3, #1
   1fba8:	4053      	eors	r3, r2
   1fbaa:	b2db      	uxtb	r3, r3
   1fbac:	2b00      	cmp	r3, #0
   1fbae:	d001      	beq.n	1fbb4 <sd_mmc_spi_read_word+0x40>
			return false;
   1fbb0:	2300      	movs	r3, #0
   1fbb2:	e01d      	b.n	1fbf0 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1fbb4:	230e      	movs	r3, #14
   1fbb6:	18fb      	adds	r3, r7, r3
   1fbb8:	881b      	ldrh	r3, [r3, #0]
   1fbba:	1d39      	adds	r1, r7, #4
   1fbbc:	4813      	ldr	r0, [pc, #76]	; (1fc0c <sd_mmc_spi_read_word+0x98>)
   1fbbe:	2204      	movs	r2, #4
   1fbc0:	4c13      	ldr	r4, [pc, #76]	; (1fc10 <sd_mmc_spi_read_word+0x9c>)
   1fbc2:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1fbc4:	687b      	ldr	r3, [r7, #4]
   1fbc6:	687a      	ldr	r2, [r7, #4]
   1fbc8:	6812      	ldr	r2, [r2, #0]
   1fbca:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1fbcc:	4b0b      	ldr	r3, [pc, #44]	; (1fbfc <sd_mmc_spi_read_word+0x88>)
   1fbce:	681b      	ldr	r3, [r3, #0]
   1fbd0:	1d1a      	adds	r2, r3, #4
   1fbd2:	4b0a      	ldr	r3, [pc, #40]	; (1fbfc <sd_mmc_spi_read_word+0x88>)
   1fbd4:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1fbd6:	4b09      	ldr	r3, [pc, #36]	; (1fbfc <sd_mmc_spi_read_word+0x88>)
   1fbd8:	681a      	ldr	r2, [r3, #0]
   1fbda:	4b09      	ldr	r3, [pc, #36]	; (1fc00 <sd_mmc_spi_read_word+0x8c>)
   1fbdc:	881b      	ldrh	r3, [r3, #0]
   1fbde:	0019      	movs	r1, r3
   1fbe0:	4b08      	ldr	r3, [pc, #32]	; (1fc04 <sd_mmc_spi_read_word+0x90>)
   1fbe2:	0010      	movs	r0, r2
   1fbe4:	4798      	blx	r3
   1fbe6:	1e0b      	subs	r3, r1, #0
   1fbe8:	d101      	bne.n	1fbee <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1fbea:	4b0a      	ldr	r3, [pc, #40]	; (1fc14 <sd_mmc_spi_read_word+0xa0>)
   1fbec:	4798      	blx	r3
	}
	return true;
   1fbee:	2301      	movs	r3, #1
}
   1fbf0:	0018      	movs	r0, r3
   1fbf2:	46bd      	mov	sp, r7
   1fbf4:	b005      	add	sp, #20
   1fbf6:	bd90      	pop	{r4, r7, pc}
   1fbf8:	20004137 	.word	0x20004137
   1fbfc:	2000413c 	.word	0x2000413c
   1fc00:	20004140 	.word	0x20004140
   1fc04:	00032811 	.word	0x00032811
   1fc08:	0001f511 	.word	0x0001f511
   1fc0c:	200040f4 	.word	0x200040f4
   1fc10:	00027ce9 	.word	0x00027ce9
   1fc14:	0001f595 	.word	0x0001f595

0001fc18 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1fc18:	b590      	push	{r4, r7, lr}
   1fc1a:	b085      	sub	sp, #20
   1fc1c:	af00      	add	r7, sp, #0
   1fc1e:	6078      	str	r0, [r7, #4]
   1fc20:	000a      	movs	r2, r1
   1fc22:	1cbb      	adds	r3, r7, #2
   1fc24:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1fc26:	230a      	movs	r3, #10
   1fc28:	18fb      	adds	r3, r7, r3
   1fc2a:	22ff      	movs	r2, #255	; 0xff
   1fc2c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fc2e:	4b1c      	ldr	r3, [pc, #112]	; (1fca0 <sd_mmc_spi_start_read_blocks+0x88>)
   1fc30:	2200      	movs	r2, #0
   1fc32:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1fc34:	2300      	movs	r3, #0
   1fc36:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1fc38:	e025      	b.n	1fc86 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1fc3a:	4b1a      	ldr	r3, [pc, #104]	; (1fca4 <sd_mmc_spi_start_read_blocks+0x8c>)
   1fc3c:	4798      	blx	r3
   1fc3e:	0003      	movs	r3, r0
   1fc40:	001a      	movs	r2, r3
   1fc42:	2301      	movs	r3, #1
   1fc44:	4053      	eors	r3, r2
   1fc46:	b2db      	uxtb	r3, r3
   1fc48:	2b00      	cmp	r3, #0
   1fc4a:	d001      	beq.n	1fc50 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1fc4c:	2300      	movs	r3, #0
   1fc4e:	e022      	b.n	1fc96 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1fc50:	687a      	ldr	r2, [r7, #4]
   1fc52:	68fb      	ldr	r3, [r7, #12]
   1fc54:	18d1      	adds	r1, r2, r3
   1fc56:	4b14      	ldr	r3, [pc, #80]	; (1fca8 <sd_mmc_spi_start_read_blocks+0x90>)
   1fc58:	881a      	ldrh	r2, [r3, #0]
   1fc5a:	230a      	movs	r3, #10
   1fc5c:	18fb      	adds	r3, r7, r3
   1fc5e:	881b      	ldrh	r3, [r3, #0]
   1fc60:	4812      	ldr	r0, [pc, #72]	; (1fcac <sd_mmc_spi_start_read_blocks+0x94>)
   1fc62:	4c13      	ldr	r4, [pc, #76]	; (1fcb0 <sd_mmc_spi_start_read_blocks+0x98>)
   1fc64:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1fc66:	4b10      	ldr	r3, [pc, #64]	; (1fca8 <sd_mmc_spi_start_read_blocks+0x90>)
   1fc68:	881b      	ldrh	r3, [r3, #0]
   1fc6a:	001a      	movs	r2, r3
   1fc6c:	68fb      	ldr	r3, [r7, #12]
   1fc6e:	189b      	adds	r3, r3, r2
   1fc70:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1fc72:	4b0d      	ldr	r3, [pc, #52]	; (1fca8 <sd_mmc_spi_start_read_blocks+0x90>)
   1fc74:	881b      	ldrh	r3, [r3, #0]
   1fc76:	001a      	movs	r2, r3
   1fc78:	4b0e      	ldr	r3, [pc, #56]	; (1fcb4 <sd_mmc_spi_start_read_blocks+0x9c>)
   1fc7a:	681b      	ldr	r3, [r3, #0]
   1fc7c:	18d2      	adds	r2, r2, r3
   1fc7e:	4b0d      	ldr	r3, [pc, #52]	; (1fcb4 <sd_mmc_spi_start_read_blocks+0x9c>)
   1fc80:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1fc82:	4b0d      	ldr	r3, [pc, #52]	; (1fcb8 <sd_mmc_spi_start_read_blocks+0xa0>)
   1fc84:	4798      	blx	r3
	while (nb_block--) {
   1fc86:	1cbb      	adds	r3, r7, #2
   1fc88:	881b      	ldrh	r3, [r3, #0]
   1fc8a:	1cba      	adds	r2, r7, #2
   1fc8c:	1e59      	subs	r1, r3, #1
   1fc8e:	8011      	strh	r1, [r2, #0]
   1fc90:	2b00      	cmp	r3, #0
   1fc92:	d1d2      	bne.n	1fc3a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1fc94:	2301      	movs	r3, #1
}
   1fc96:	0018      	movs	r0, r3
   1fc98:	46bd      	mov	sp, r7
   1fc9a:	b005      	add	sp, #20
   1fc9c:	bd90      	pop	{r4, r7, pc}
   1fc9e:	46c0      	nop			; (mov r8, r8)
   1fca0:	20004137 	.word	0x20004137
   1fca4:	0001f511 	.word	0x0001f511
   1fca8:	20004140 	.word	0x20004140
   1fcac:	200040f4 	.word	0x200040f4
   1fcb0:	00027ce9 	.word	0x00027ce9
   1fcb4:	2000413c 	.word	0x2000413c
   1fcb8:	0001f595 	.word	0x0001f595

0001fcbc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1fcbc:	b580      	push	{r7, lr}
   1fcbe:	af00      	add	r7, sp, #0
	return true;
   1fcc0:	2301      	movs	r3, #1
}
   1fcc2:	0018      	movs	r0, r3
   1fcc4:	46bd      	mov	sp, r7
   1fcc6:	bd80      	pop	{r7, pc}

0001fcc8 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1fcc8:	b580      	push	{r7, lr}
   1fcca:	b084      	sub	sp, #16
   1fccc:	af00      	add	r7, sp, #0
   1fcce:	6078      	str	r0, [r7, #4]
   1fcd0:	000a      	movs	r2, r1
   1fcd2:	1cbb      	adds	r3, r7, #2
   1fcd4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fcd6:	4b24      	ldr	r3, [pc, #144]	; (1fd68 <sd_mmc_spi_start_write_blocks+0xa0>)
   1fcd8:	2200      	movs	r2, #0
   1fcda:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1fcdc:	2300      	movs	r3, #0
   1fcde:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1fce0:	e035      	b.n	1fd4e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1fce2:	4b22      	ldr	r3, [pc, #136]	; (1fd6c <sd_mmc_spi_start_write_blocks+0xa4>)
   1fce4:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1fce6:	687a      	ldr	r2, [r7, #4]
   1fce8:	68fb      	ldr	r3, [r7, #12]
   1fcea:	18d1      	adds	r1, r2, r3
   1fcec:	4b20      	ldr	r3, [pc, #128]	; (1fd70 <sd_mmc_spi_start_write_blocks+0xa8>)
   1fcee:	881a      	ldrh	r2, [r3, #0]
   1fcf0:	4b20      	ldr	r3, [pc, #128]	; (1fd74 <sd_mmc_spi_start_write_blocks+0xac>)
   1fcf2:	0018      	movs	r0, r3
   1fcf4:	4b20      	ldr	r3, [pc, #128]	; (1fd78 <sd_mmc_spi_start_write_blocks+0xb0>)
   1fcf6:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1fcf8:	4b1d      	ldr	r3, [pc, #116]	; (1fd70 <sd_mmc_spi_start_write_blocks+0xa8>)
   1fcfa:	881b      	ldrh	r3, [r3, #0]
   1fcfc:	001a      	movs	r2, r3
   1fcfe:	68fb      	ldr	r3, [r7, #12]
   1fd00:	189b      	adds	r3, r3, r2
   1fd02:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1fd04:	4b1a      	ldr	r3, [pc, #104]	; (1fd70 <sd_mmc_spi_start_write_blocks+0xa8>)
   1fd06:	881b      	ldrh	r3, [r3, #0]
   1fd08:	001a      	movs	r2, r3
   1fd0a:	4b1c      	ldr	r3, [pc, #112]	; (1fd7c <sd_mmc_spi_start_write_blocks+0xb4>)
   1fd0c:	681b      	ldr	r3, [r3, #0]
   1fd0e:	18d2      	adds	r2, r2, r3
   1fd10:	4b1a      	ldr	r3, [pc, #104]	; (1fd7c <sd_mmc_spi_start_write_blocks+0xb4>)
   1fd12:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1fd14:	4b1a      	ldr	r3, [pc, #104]	; (1fd80 <sd_mmc_spi_start_write_blocks+0xb8>)
   1fd16:	4798      	blx	r3
   1fd18:	0003      	movs	r3, r0
   1fd1a:	001a      	movs	r2, r3
   1fd1c:	2301      	movs	r3, #1
   1fd1e:	4053      	eors	r3, r2
   1fd20:	b2db      	uxtb	r3, r3
   1fd22:	2b00      	cmp	r3, #0
   1fd24:	d001      	beq.n	1fd2a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1fd26:	2300      	movs	r3, #0
   1fd28:	e019      	b.n	1fd5e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1fd2a:	1cbb      	adds	r3, r7, #2
   1fd2c:	881b      	ldrh	r3, [r3, #0]
   1fd2e:	2b00      	cmp	r3, #0
   1fd30:	d00d      	beq.n	1fd4e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1fd32:	4b14      	ldr	r3, [pc, #80]	; (1fd84 <sd_mmc_spi_start_write_blocks+0xbc>)
   1fd34:	4798      	blx	r3
   1fd36:	0003      	movs	r3, r0
   1fd38:	001a      	movs	r2, r3
   1fd3a:	2301      	movs	r3, #1
   1fd3c:	4053      	eors	r3, r2
   1fd3e:	b2db      	uxtb	r3, r3
   1fd40:	2b00      	cmp	r3, #0
   1fd42:	d004      	beq.n	1fd4e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1fd44:	4b08      	ldr	r3, [pc, #32]	; (1fd68 <sd_mmc_spi_start_write_blocks+0xa0>)
   1fd46:	2205      	movs	r2, #5
   1fd48:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1fd4a:	2300      	movs	r3, #0
   1fd4c:	e007      	b.n	1fd5e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1fd4e:	1cbb      	adds	r3, r7, #2
   1fd50:	881b      	ldrh	r3, [r3, #0]
   1fd52:	1cba      	adds	r2, r7, #2
   1fd54:	1e59      	subs	r1, r3, #1
   1fd56:	8011      	strh	r1, [r2, #0]
   1fd58:	2b00      	cmp	r3, #0
   1fd5a:	d1c2      	bne.n	1fce2 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1fd5c:	2301      	movs	r3, #1
}
   1fd5e:	0018      	movs	r0, r3
   1fd60:	46bd      	mov	sp, r7
   1fd62:	b004      	add	sp, #16
   1fd64:	bd80      	pop	{r7, pc}
   1fd66:	46c0      	nop			; (mov r8, r8)
   1fd68:	20004137 	.word	0x20004137
   1fd6c:	0001f5c1 	.word	0x0001f5c1
   1fd70:	20004140 	.word	0x20004140
   1fd74:	200040f4 	.word	0x200040f4
   1fd78:	00027f0d 	.word	0x00027f0d
   1fd7c:	2000413c 	.word	0x2000413c
   1fd80:	0001f611 	.word	0x0001f611
   1fd84:	0001f4a5 	.word	0x0001f4a5

0001fd88 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1fd88:	b580      	push	{r7, lr}
   1fd8a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1fd8c:	4b09      	ldr	r3, [pc, #36]	; (1fdb4 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1fd8e:	4798      	blx	r3
   1fd90:	0003      	movs	r3, r0
   1fd92:	001a      	movs	r2, r3
   1fd94:	2301      	movs	r3, #1
   1fd96:	4053      	eors	r3, r2
   1fd98:	b2db      	uxtb	r3, r3
   1fd9a:	2b00      	cmp	r3, #0
   1fd9c:	d004      	beq.n	1fda8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1fd9e:	4b06      	ldr	r3, [pc, #24]	; (1fdb8 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1fda0:	2205      	movs	r2, #5
   1fda2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1fda4:	2300      	movs	r3, #0
   1fda6:	e002      	b.n	1fdae <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1fda8:	4b04      	ldr	r3, [pc, #16]	; (1fdbc <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1fdaa:	4798      	blx	r3
   1fdac:	0003      	movs	r3, r0
}
   1fdae:	0018      	movs	r0, r3
   1fdb0:	46bd      	mov	sp, r7
   1fdb2:	bd80      	pop	{r7, pc}
   1fdb4:	0001f4a5 	.word	0x0001f4a5
   1fdb8:	20004137 	.word	0x20004137
   1fdbc:	0001f6a5 	.word	0x0001f6a5

0001fdc0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1fdc0:	b580      	push	{r7, lr}
   1fdc2:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1fdc4:	2000      	movs	r0, #0
   1fdc6:	4b0f      	ldr	r3, [pc, #60]	; (1fe04 <delay_init+0x44>)
   1fdc8:	4798      	blx	r3
   1fdca:	0002      	movs	r2, r0
   1fdcc:	4b0e      	ldr	r3, [pc, #56]	; (1fe08 <delay_init+0x48>)
   1fdce:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1fdd0:	4b0d      	ldr	r3, [pc, #52]	; (1fe08 <delay_init+0x48>)
   1fdd2:	6818      	ldr	r0, [r3, #0]
   1fdd4:	4b0d      	ldr	r3, [pc, #52]	; (1fe0c <delay_init+0x4c>)
   1fdd6:	22fa      	movs	r2, #250	; 0xfa
   1fdd8:	0091      	lsls	r1, r2, #2
   1fdda:	4798      	blx	r3
   1fddc:	0003      	movs	r3, r0
   1fdde:	001a      	movs	r2, r3
   1fde0:	4b09      	ldr	r3, [pc, #36]	; (1fe08 <delay_init+0x48>)
   1fde2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1fde4:	4b08      	ldr	r3, [pc, #32]	; (1fe08 <delay_init+0x48>)
   1fde6:	6818      	ldr	r0, [r3, #0]
   1fde8:	4b08      	ldr	r3, [pc, #32]	; (1fe0c <delay_init+0x4c>)
   1fdea:	22fa      	movs	r2, #250	; 0xfa
   1fdec:	0091      	lsls	r1, r2, #2
   1fdee:	4798      	blx	r3
   1fdf0:	0003      	movs	r3, r0
   1fdf2:	001a      	movs	r2, r3
   1fdf4:	4b06      	ldr	r3, [pc, #24]	; (1fe10 <delay_init+0x50>)
   1fdf6:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1fdf8:	4b06      	ldr	r3, [pc, #24]	; (1fe14 <delay_init+0x54>)
   1fdfa:	2205      	movs	r2, #5
   1fdfc:	601a      	str	r2, [r3, #0]
}
   1fdfe:	46c0      	nop			; (mov r8, r8)
   1fe00:	46bd      	mov	sp, r7
   1fe02:	bd80      	pop	{r7, pc}
   1fe04:	00029a91 	.word	0x00029a91
   1fe08:	2000013c 	.word	0x2000013c
   1fe0c:	00032705 	.word	0x00032705
   1fe10:	20000140 	.word	0x20000140
   1fe14:	e000e010 	.word	0xe000e010

0001fe18 <system_pinmux_get_group_from_gpio_pin>:
{
   1fe18:	b580      	push	{r7, lr}
   1fe1a:	b084      	sub	sp, #16
   1fe1c:	af00      	add	r7, sp, #0
   1fe1e:	0002      	movs	r2, r0
   1fe20:	1dfb      	adds	r3, r7, #7
   1fe22:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1fe24:	230f      	movs	r3, #15
   1fe26:	18fb      	adds	r3, r7, r3
   1fe28:	1dfa      	adds	r2, r7, #7
   1fe2a:	7812      	ldrb	r2, [r2, #0]
   1fe2c:	09d2      	lsrs	r2, r2, #7
   1fe2e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1fe30:	230e      	movs	r3, #14
   1fe32:	18fb      	adds	r3, r7, r3
   1fe34:	1dfa      	adds	r2, r7, #7
   1fe36:	7812      	ldrb	r2, [r2, #0]
   1fe38:	0952      	lsrs	r2, r2, #5
   1fe3a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1fe3c:	4b0d      	ldr	r3, [pc, #52]	; (1fe74 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1fe3e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1fe40:	230f      	movs	r3, #15
   1fe42:	18fb      	adds	r3, r7, r3
   1fe44:	781b      	ldrb	r3, [r3, #0]
   1fe46:	2b00      	cmp	r3, #0
   1fe48:	d10f      	bne.n	1fe6a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1fe4a:	230f      	movs	r3, #15
   1fe4c:	18fb      	adds	r3, r7, r3
   1fe4e:	781b      	ldrb	r3, [r3, #0]
   1fe50:	009b      	lsls	r3, r3, #2
   1fe52:	2210      	movs	r2, #16
   1fe54:	4694      	mov	ip, r2
   1fe56:	44bc      	add	ip, r7
   1fe58:	4463      	add	r3, ip
   1fe5a:	3b08      	subs	r3, #8
   1fe5c:	681a      	ldr	r2, [r3, #0]
   1fe5e:	230e      	movs	r3, #14
   1fe60:	18fb      	adds	r3, r7, r3
   1fe62:	781b      	ldrb	r3, [r3, #0]
   1fe64:	01db      	lsls	r3, r3, #7
   1fe66:	18d3      	adds	r3, r2, r3
   1fe68:	e000      	b.n	1fe6c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1fe6a:	2300      	movs	r3, #0
}
   1fe6c:	0018      	movs	r0, r3
   1fe6e:	46bd      	mov	sp, r7
   1fe70:	b004      	add	sp, #16
   1fe72:	bd80      	pop	{r7, pc}
   1fe74:	41004400 	.word	0x41004400

0001fe78 <system_interrupt_enable_global>:
{
   1fe78:	b580      	push	{r7, lr}
   1fe7a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1fe7c:	4b04      	ldr	r3, [pc, #16]	; (1fe90 <system_interrupt_enable_global+0x18>)
   1fe7e:	2201      	movs	r2, #1
   1fe80:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1fe82:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1fe86:	b662      	cpsie	i
}
   1fe88:	46c0      	nop			; (mov r8, r8)
   1fe8a:	46bd      	mov	sp, r7
   1fe8c:	bd80      	pop	{r7, pc}
   1fe8e:	46c0      	nop			; (mov r8, r8)
   1fe90:	20000146 	.word	0x20000146

0001fe94 <port_get_group_from_gpio_pin>:
{
   1fe94:	b580      	push	{r7, lr}
   1fe96:	b082      	sub	sp, #8
   1fe98:	af00      	add	r7, sp, #0
   1fe9a:	0002      	movs	r2, r0
   1fe9c:	1dfb      	adds	r3, r7, #7
   1fe9e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1fea0:	1dfb      	adds	r3, r7, #7
   1fea2:	781b      	ldrb	r3, [r3, #0]
   1fea4:	0018      	movs	r0, r3
   1fea6:	4b03      	ldr	r3, [pc, #12]	; (1feb4 <port_get_group_from_gpio_pin+0x20>)
   1fea8:	4798      	blx	r3
   1feaa:	0003      	movs	r3, r0
}
   1feac:	0018      	movs	r0, r3
   1feae:	46bd      	mov	sp, r7
   1feb0:	b002      	add	sp, #8
   1feb2:	bd80      	pop	{r7, pc}
   1feb4:	0001fe19 	.word	0x0001fe19

0001feb8 <port_get_config_defaults>:
{
   1feb8:	b580      	push	{r7, lr}
   1feba:	b082      	sub	sp, #8
   1febc:	af00      	add	r7, sp, #0
   1febe:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1fec0:	687b      	ldr	r3, [r7, #4]
   1fec2:	2200      	movs	r2, #0
   1fec4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1fec6:	687b      	ldr	r3, [r7, #4]
   1fec8:	2201      	movs	r2, #1
   1feca:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1fecc:	687b      	ldr	r3, [r7, #4]
   1fece:	2200      	movs	r2, #0
   1fed0:	709a      	strb	r2, [r3, #2]
}
   1fed2:	46c0      	nop			; (mov r8, r8)
   1fed4:	46bd      	mov	sp, r7
   1fed6:	b002      	add	sp, #8
   1fed8:	bd80      	pop	{r7, pc}
	...

0001fedc <port_pin_set_output_level>:
{
   1fedc:	b580      	push	{r7, lr}
   1fede:	b084      	sub	sp, #16
   1fee0:	af00      	add	r7, sp, #0
   1fee2:	0002      	movs	r2, r0
   1fee4:	1dfb      	adds	r3, r7, #7
   1fee6:	701a      	strb	r2, [r3, #0]
   1fee8:	1dbb      	adds	r3, r7, #6
   1feea:	1c0a      	adds	r2, r1, #0
   1feec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1feee:	1dfb      	adds	r3, r7, #7
   1fef0:	781b      	ldrb	r3, [r3, #0]
   1fef2:	0018      	movs	r0, r3
   1fef4:	4b0d      	ldr	r3, [pc, #52]	; (1ff2c <port_pin_set_output_level+0x50>)
   1fef6:	4798      	blx	r3
   1fef8:	0003      	movs	r3, r0
   1fefa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1fefc:	1dfb      	adds	r3, r7, #7
   1fefe:	781b      	ldrb	r3, [r3, #0]
   1ff00:	221f      	movs	r2, #31
   1ff02:	4013      	ands	r3, r2
   1ff04:	2201      	movs	r2, #1
   1ff06:	409a      	lsls	r2, r3
   1ff08:	0013      	movs	r3, r2
   1ff0a:	60bb      	str	r3, [r7, #8]
	if (level) {
   1ff0c:	1dbb      	adds	r3, r7, #6
   1ff0e:	781b      	ldrb	r3, [r3, #0]
   1ff10:	2b00      	cmp	r3, #0
   1ff12:	d003      	beq.n	1ff1c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1ff14:	68fb      	ldr	r3, [r7, #12]
   1ff16:	68ba      	ldr	r2, [r7, #8]
   1ff18:	619a      	str	r2, [r3, #24]
}
   1ff1a:	e002      	b.n	1ff22 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1ff1c:	68fb      	ldr	r3, [r7, #12]
   1ff1e:	68ba      	ldr	r2, [r7, #8]
   1ff20:	615a      	str	r2, [r3, #20]
}
   1ff22:	46c0      	nop			; (mov r8, r8)
   1ff24:	46bd      	mov	sp, r7
   1ff26:	b004      	add	sp, #16
   1ff28:	bd80      	pop	{r7, pc}
   1ff2a:	46c0      	nop			; (mov r8, r8)
   1ff2c:	0001fe95 	.word	0x0001fe95

0001ff30 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1ff30:	b580      	push	{r7, lr}
   1ff32:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1ff34:	4b04      	ldr	r3, [pc, #16]	; (1ff48 <chip_isr+0x18>)
   1ff36:	681b      	ldr	r3, [r3, #0]
   1ff38:	2b00      	cmp	r3, #0
   1ff3a:	d002      	beq.n	1ff42 <chip_isr+0x12>
		gpfIsr();
   1ff3c:	4b02      	ldr	r3, [pc, #8]	; (1ff48 <chip_isr+0x18>)
   1ff3e:	681b      	ldr	r3, [r3, #0]
   1ff40:	4798      	blx	r3
	}
}
   1ff42:	46c0      	nop			; (mov r8, r8)
   1ff44:	46bd      	mov	sp, r7
   1ff46:	bd80      	pop	{r7, pc}
   1ff48:	20004144 	.word	0x20004144

0001ff4c <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1ff4c:	b580      	push	{r7, lr}
   1ff4e:	b082      	sub	sp, #8
   1ff50:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1ff52:	1d3b      	adds	r3, r7, #4
   1ff54:	0018      	movs	r0, r3
   1ff56:	4b10      	ldr	r3, [pc, #64]	; (1ff98 <init_chip_pins+0x4c>)
   1ff58:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1ff5a:	1d3b      	adds	r3, r7, #4
   1ff5c:	2201      	movs	r2, #1
   1ff5e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1ff60:	1d3b      	adds	r3, r7, #4
   1ff62:	0019      	movs	r1, r3
   1ff64:	201b      	movs	r0, #27
   1ff66:	4b0d      	ldr	r3, [pc, #52]	; (1ff9c <init_chip_pins+0x50>)
   1ff68:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1ff6a:	1d3b      	adds	r3, r7, #4
   1ff6c:	0019      	movs	r1, r3
   1ff6e:	201c      	movs	r0, #28
   1ff70:	4b0a      	ldr	r3, [pc, #40]	; (1ff9c <init_chip_pins+0x50>)
   1ff72:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1ff74:	1d3b      	adds	r3, r7, #4
   1ff76:	0019      	movs	r1, r3
   1ff78:	2028      	movs	r0, #40	; 0x28
   1ff7a:	4b08      	ldr	r3, [pc, #32]	; (1ff9c <init_chip_pins+0x50>)
   1ff7c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1ff7e:	2100      	movs	r1, #0
   1ff80:	201c      	movs	r0, #28
   1ff82:	4b07      	ldr	r3, [pc, #28]	; (1ffa0 <init_chip_pins+0x54>)
   1ff84:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1ff86:	2100      	movs	r1, #0
   1ff88:	201b      	movs	r0, #27
   1ff8a:	4b05      	ldr	r3, [pc, #20]	; (1ffa0 <init_chip_pins+0x54>)
   1ff8c:	4798      	blx	r3
}
   1ff8e:	46c0      	nop			; (mov r8, r8)
   1ff90:	46bd      	mov	sp, r7
   1ff92:	b002      	add	sp, #8
   1ff94:	bd80      	pop	{r7, pc}
   1ff96:	46c0      	nop			; (mov r8, r8)
   1ff98:	0001feb9 	.word	0x0001feb9
   1ff9c:	000266d9 	.word	0x000266d9
   1ffa0:	0001fedd 	.word	0x0001fedd

0001ffa4 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1ffa4:	b580      	push	{r7, lr}
   1ffa6:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1ffa8:	4b0b      	ldr	r3, [pc, #44]	; (1ffd8 <nm_bsp_init+0x34>)
   1ffaa:	2200      	movs	r2, #0
   1ffac:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1ffae:	4b0b      	ldr	r3, [pc, #44]	; (1ffdc <nm_bsp_init+0x38>)
   1ffb0:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1ffb2:	4b0b      	ldr	r3, [pc, #44]	; (1ffe0 <nm_bsp_init+0x3c>)
   1ffb4:	681b      	ldr	r3, [r3, #0]
   1ffb6:	2201      	movs	r2, #1
   1ffb8:	4013      	ands	r3, r2
   1ffba:	d004      	beq.n	1ffc6 <nm_bsp_init+0x22>
   1ffbc:	4b08      	ldr	r3, [pc, #32]	; (1ffe0 <nm_bsp_init+0x3c>)
   1ffbe:	681b      	ldr	r3, [r3, #0]
   1ffc0:	2202      	movs	r2, #2
   1ffc2:	4013      	ands	r3, r2
   1ffc4:	d101      	bne.n	1ffca <nm_bsp_init+0x26>
	    delay_init();
   1ffc6:	4b07      	ldr	r3, [pc, #28]	; (1ffe4 <nm_bsp_init+0x40>)
   1ffc8:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1ffca:	4b07      	ldr	r3, [pc, #28]	; (1ffe8 <nm_bsp_init+0x44>)
   1ffcc:	4798      	blx	r3

	return M2M_SUCCESS;
   1ffce:	2300      	movs	r3, #0
}
   1ffd0:	0018      	movs	r0, r3
   1ffd2:	46bd      	mov	sp, r7
   1ffd4:	bd80      	pop	{r7, pc}
   1ffd6:	46c0      	nop			; (mov r8, r8)
   1ffd8:	20004144 	.word	0x20004144
   1ffdc:	0001ff4d 	.word	0x0001ff4d
   1ffe0:	e000e010 	.word	0xe000e010
   1ffe4:	0001fdc1 	.word	0x0001fdc1
   1ffe8:	0001fe79 	.word	0x0001fe79

0001ffec <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1ffec:	b580      	push	{r7, lr}
   1ffee:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1fff0:	2100      	movs	r1, #0
   1fff2:	201c      	movs	r0, #28
   1fff4:	4b0b      	ldr	r3, [pc, #44]	; (20024 <nm_bsp_reset+0x38>)
   1fff6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1fff8:	2100      	movs	r1, #0
   1fffa:	201b      	movs	r0, #27
   1fffc:	4b09      	ldr	r3, [pc, #36]	; (20024 <nm_bsp_reset+0x38>)
   1fffe:	4798      	blx	r3
	nm_bsp_sleep(1);
   20000:	2001      	movs	r0, #1
   20002:	4b09      	ldr	r3, [pc, #36]	; (20028 <nm_bsp_reset+0x3c>)
   20004:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   20006:	2101      	movs	r1, #1
   20008:	201c      	movs	r0, #28
   2000a:	4b06      	ldr	r3, [pc, #24]	; (20024 <nm_bsp_reset+0x38>)
   2000c:	4798      	blx	r3
	nm_bsp_sleep(10);
   2000e:	200a      	movs	r0, #10
   20010:	4b05      	ldr	r3, [pc, #20]	; (20028 <nm_bsp_reset+0x3c>)
   20012:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   20014:	2101      	movs	r1, #1
   20016:	201b      	movs	r0, #27
   20018:	4b02      	ldr	r3, [pc, #8]	; (20024 <nm_bsp_reset+0x38>)
   2001a:	4798      	blx	r3
}
   2001c:	46c0      	nop			; (mov r8, r8)
   2001e:	46bd      	mov	sp, r7
   20020:	bd80      	pop	{r7, pc}
   20022:	46c0      	nop			; (mov r8, r8)
   20024:	0001fedd 	.word	0x0001fedd
   20028:	0002002d 	.word	0x0002002d

0002002c <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   2002c:	b580      	push	{r7, lr}
   2002e:	b082      	sub	sp, #8
   20030:	af00      	add	r7, sp, #0
   20032:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   20034:	687b      	ldr	r3, [r7, #4]
   20036:	0018      	movs	r0, r3
   20038:	4b02      	ldr	r3, [pc, #8]	; (20044 <nm_bsp_sleep+0x18>)
   2003a:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   2003c:	46c0      	nop			; (mov r8, r8)
   2003e:	46bd      	mov	sp, r7
   20040:	b002      	add	sp, #8
   20042:	bd80      	pop	{r7, pc}
   20044:	0001be41 	.word	0x0001be41

00020048 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   20048:	b580      	push	{r7, lr}
   2004a:	b086      	sub	sp, #24
   2004c:	af00      	add	r7, sp, #0
   2004e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   20050:	4b15      	ldr	r3, [pc, #84]	; (200a8 <nm_bsp_register_isr+0x60>)
   20052:	687a      	ldr	r2, [r7, #4]
   20054:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   20056:	230c      	movs	r3, #12
   20058:	18fb      	adds	r3, r7, r3
   2005a:	0018      	movs	r0, r3
   2005c:	4b13      	ldr	r3, [pc, #76]	; (200ac <nm_bsp_register_isr+0x64>)
   2005e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   20060:	230c      	movs	r3, #12
   20062:	18fb      	adds	r3, r7, r3
   20064:	2229      	movs	r2, #41	; 0x29
   20066:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   20068:	230c      	movs	r3, #12
   2006a:	18fb      	adds	r3, r7, r3
   2006c:	2200      	movs	r2, #0
   2006e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   20070:	230c      	movs	r3, #12
   20072:	18fb      	adds	r3, r7, r3
   20074:	2201      	movs	r2, #1
   20076:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   20078:	230c      	movs	r3, #12
   2007a:	18fb      	adds	r3, r7, r3
   2007c:	2202      	movs	r2, #2
   2007e:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   20080:	230c      	movs	r3, #12
   20082:	18fb      	adds	r3, r7, r3
   20084:	0019      	movs	r1, r3
   20086:	2009      	movs	r0, #9
   20088:	4b09      	ldr	r3, [pc, #36]	; (200b0 <nm_bsp_register_isr+0x68>)
   2008a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   2008c:	4b09      	ldr	r3, [pc, #36]	; (200b4 <nm_bsp_register_isr+0x6c>)
   2008e:	2200      	movs	r2, #0
   20090:	2109      	movs	r1, #9
   20092:	0018      	movs	r0, r3
   20094:	4b08      	ldr	r3, [pc, #32]	; (200b8 <nm_bsp_register_isr+0x70>)
   20096:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20098:	2100      	movs	r1, #0
   2009a:	2009      	movs	r0, #9
   2009c:	4b07      	ldr	r3, [pc, #28]	; (200bc <nm_bsp_register_isr+0x74>)
   2009e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   200a0:	46c0      	nop			; (mov r8, r8)
   200a2:	46bd      	mov	sp, r7
   200a4:	b006      	add	sp, #24
   200a6:	bd80      	pop	{r7, pc}
   200a8:	20004144 	.word	0x20004144
   200ac:	00026581 	.word	0x00026581
   200b0:	000265b5 	.word	0x000265b5
   200b4:	0001ff31 	.word	0x0001ff31
   200b8:	00026181 	.word	0x00026181
   200bc:	000261e5 	.word	0x000261e5

000200c0 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   200c0:	b580      	push	{r7, lr}
   200c2:	b082      	sub	sp, #8
   200c4:	af00      	add	r7, sp, #0
   200c6:	0002      	movs	r2, r0
   200c8:	1dfb      	adds	r3, r7, #7
   200ca:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   200cc:	1dfb      	adds	r3, r7, #7
   200ce:	781b      	ldrb	r3, [r3, #0]
   200d0:	2b00      	cmp	r3, #0
   200d2:	d004      	beq.n	200de <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   200d4:	2100      	movs	r1, #0
   200d6:	2009      	movs	r0, #9
   200d8:	4b05      	ldr	r3, [pc, #20]	; (200f0 <nm_bsp_interrupt_ctrl+0x30>)
   200da:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   200dc:	e003      	b.n	200e6 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   200de:	2100      	movs	r1, #0
   200e0:	2009      	movs	r0, #9
   200e2:	4b04      	ldr	r3, [pc, #16]	; (200f4 <nm_bsp_interrupt_ctrl+0x34>)
   200e4:	4798      	blx	r3
}
   200e6:	46c0      	nop			; (mov r8, r8)
   200e8:	46bd      	mov	sp, r7
   200ea:	b002      	add	sp, #8
   200ec:	bd80      	pop	{r7, pc}
   200ee:	46c0      	nop			; (mov r8, r8)
   200f0:	000261e5 	.word	0x000261e5
   200f4:	0002622d 	.word	0x0002622d

000200f8 <system_pinmux_get_group_from_gpio_pin>:
{
   200f8:	b580      	push	{r7, lr}
   200fa:	b084      	sub	sp, #16
   200fc:	af00      	add	r7, sp, #0
   200fe:	0002      	movs	r2, r0
   20100:	1dfb      	adds	r3, r7, #7
   20102:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20104:	230f      	movs	r3, #15
   20106:	18fb      	adds	r3, r7, r3
   20108:	1dfa      	adds	r2, r7, #7
   2010a:	7812      	ldrb	r2, [r2, #0]
   2010c:	09d2      	lsrs	r2, r2, #7
   2010e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20110:	230e      	movs	r3, #14
   20112:	18fb      	adds	r3, r7, r3
   20114:	1dfa      	adds	r2, r7, #7
   20116:	7812      	ldrb	r2, [r2, #0]
   20118:	0952      	lsrs	r2, r2, #5
   2011a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2011c:	4b0d      	ldr	r3, [pc, #52]	; (20154 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2011e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20120:	230f      	movs	r3, #15
   20122:	18fb      	adds	r3, r7, r3
   20124:	781b      	ldrb	r3, [r3, #0]
   20126:	2b00      	cmp	r3, #0
   20128:	d10f      	bne.n	2014a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2012a:	230f      	movs	r3, #15
   2012c:	18fb      	adds	r3, r7, r3
   2012e:	781b      	ldrb	r3, [r3, #0]
   20130:	009b      	lsls	r3, r3, #2
   20132:	2210      	movs	r2, #16
   20134:	4694      	mov	ip, r2
   20136:	44bc      	add	ip, r7
   20138:	4463      	add	r3, ip
   2013a:	3b08      	subs	r3, #8
   2013c:	681a      	ldr	r2, [r3, #0]
   2013e:	230e      	movs	r3, #14
   20140:	18fb      	adds	r3, r7, r3
   20142:	781b      	ldrb	r3, [r3, #0]
   20144:	01db      	lsls	r3, r3, #7
   20146:	18d3      	adds	r3, r2, r3
   20148:	e000      	b.n	2014c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2014a:	2300      	movs	r3, #0
}
   2014c:	0018      	movs	r0, r3
   2014e:	46bd      	mov	sp, r7
   20150:	b004      	add	sp, #16
   20152:	bd80      	pop	{r7, pc}
   20154:	41004400 	.word	0x41004400

00020158 <system_interrupt_enable>:
{
   20158:	b580      	push	{r7, lr}
   2015a:	b082      	sub	sp, #8
   2015c:	af00      	add	r7, sp, #0
   2015e:	0002      	movs	r2, r0
   20160:	1dfb      	adds	r3, r7, #7
   20162:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20164:	4b06      	ldr	r3, [pc, #24]	; (20180 <system_interrupt_enable+0x28>)
   20166:	1dfa      	adds	r2, r7, #7
   20168:	7812      	ldrb	r2, [r2, #0]
   2016a:	0011      	movs	r1, r2
   2016c:	221f      	movs	r2, #31
   2016e:	400a      	ands	r2, r1
   20170:	2101      	movs	r1, #1
   20172:	4091      	lsls	r1, r2
   20174:	000a      	movs	r2, r1
   20176:	601a      	str	r2, [r3, #0]
}
   20178:	46c0      	nop			; (mov r8, r8)
   2017a:	46bd      	mov	sp, r7
   2017c:	b002      	add	sp, #8
   2017e:	bd80      	pop	{r7, pc}
   20180:	e000e100 	.word	0xe000e100

00020184 <system_interrupt_disable>:
{
   20184:	b580      	push	{r7, lr}
   20186:	b082      	sub	sp, #8
   20188:	af00      	add	r7, sp, #0
   2018a:	0002      	movs	r2, r0
   2018c:	1dfb      	adds	r3, r7, #7
   2018e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20190:	4a07      	ldr	r2, [pc, #28]	; (201b0 <system_interrupt_disable+0x2c>)
   20192:	1dfb      	adds	r3, r7, #7
   20194:	781b      	ldrb	r3, [r3, #0]
   20196:	0019      	movs	r1, r3
   20198:	231f      	movs	r3, #31
   2019a:	400b      	ands	r3, r1
   2019c:	2101      	movs	r1, #1
   2019e:	4099      	lsls	r1, r3
   201a0:	000b      	movs	r3, r1
   201a2:	0019      	movs	r1, r3
   201a4:	2380      	movs	r3, #128	; 0x80
   201a6:	50d1      	str	r1, [r2, r3]
}
   201a8:	46c0      	nop			; (mov r8, r8)
   201aa:	46bd      	mov	sp, r7
   201ac:	b002      	add	sp, #8
   201ae:	bd80      	pop	{r7, pc}
   201b0:	e000e100 	.word	0xe000e100

000201b4 <port_get_group_from_gpio_pin>:
{
   201b4:	b580      	push	{r7, lr}
   201b6:	b082      	sub	sp, #8
   201b8:	af00      	add	r7, sp, #0
   201ba:	0002      	movs	r2, r0
   201bc:	1dfb      	adds	r3, r7, #7
   201be:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   201c0:	1dfb      	adds	r3, r7, #7
   201c2:	781b      	ldrb	r3, [r3, #0]
   201c4:	0018      	movs	r0, r3
   201c6:	4b03      	ldr	r3, [pc, #12]	; (201d4 <port_get_group_from_gpio_pin+0x20>)
   201c8:	4798      	blx	r3
   201ca:	0003      	movs	r3, r0
}
   201cc:	0018      	movs	r0, r3
   201ce:	46bd      	mov	sp, r7
   201d0:	b002      	add	sp, #8
   201d2:	bd80      	pop	{r7, pc}
   201d4:	000200f9 	.word	0x000200f9

000201d8 <port_get_config_defaults>:
{
   201d8:	b580      	push	{r7, lr}
   201da:	b082      	sub	sp, #8
   201dc:	af00      	add	r7, sp, #0
   201de:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   201e0:	687b      	ldr	r3, [r7, #4]
   201e2:	2200      	movs	r2, #0
   201e4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   201e6:	687b      	ldr	r3, [r7, #4]
   201e8:	2201      	movs	r2, #1
   201ea:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   201ec:	687b      	ldr	r3, [r7, #4]
   201ee:	2200      	movs	r2, #0
   201f0:	709a      	strb	r2, [r3, #2]
}
   201f2:	46c0      	nop			; (mov r8, r8)
   201f4:	46bd      	mov	sp, r7
   201f6:	b002      	add	sp, #8
   201f8:	bd80      	pop	{r7, pc}
	...

000201fc <port_pin_set_output_level>:
{
   201fc:	b580      	push	{r7, lr}
   201fe:	b084      	sub	sp, #16
   20200:	af00      	add	r7, sp, #0
   20202:	0002      	movs	r2, r0
   20204:	1dfb      	adds	r3, r7, #7
   20206:	701a      	strb	r2, [r3, #0]
   20208:	1dbb      	adds	r3, r7, #6
   2020a:	1c0a      	adds	r2, r1, #0
   2020c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2020e:	1dfb      	adds	r3, r7, #7
   20210:	781b      	ldrb	r3, [r3, #0]
   20212:	0018      	movs	r0, r3
   20214:	4b0d      	ldr	r3, [pc, #52]	; (2024c <port_pin_set_output_level+0x50>)
   20216:	4798      	blx	r3
   20218:	0003      	movs	r3, r0
   2021a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2021c:	1dfb      	adds	r3, r7, #7
   2021e:	781b      	ldrb	r3, [r3, #0]
   20220:	221f      	movs	r2, #31
   20222:	4013      	ands	r3, r2
   20224:	2201      	movs	r2, #1
   20226:	409a      	lsls	r2, r3
   20228:	0013      	movs	r3, r2
   2022a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2022c:	1dbb      	adds	r3, r7, #6
   2022e:	781b      	ldrb	r3, [r3, #0]
   20230:	2b00      	cmp	r3, #0
   20232:	d003      	beq.n	2023c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20234:	68fb      	ldr	r3, [r7, #12]
   20236:	68ba      	ldr	r2, [r7, #8]
   20238:	619a      	str	r2, [r3, #24]
}
   2023a:	e002      	b.n	20242 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2023c:	68fb      	ldr	r3, [r7, #12]
   2023e:	68ba      	ldr	r2, [r7, #8]
   20240:	615a      	str	r2, [r3, #20]
}
   20242:	46c0      	nop			; (mov r8, r8)
   20244:	46bd      	mov	sp, r7
   20246:	b004      	add	sp, #16
   20248:	bd80      	pop	{r7, pc}
   2024a:	46c0      	nop			; (mov r8, r8)
   2024c:	000201b5 	.word	0x000201b5

00020250 <spi_is_syncing>:
{
   20250:	b580      	push	{r7, lr}
   20252:	b084      	sub	sp, #16
   20254:	af00      	add	r7, sp, #0
   20256:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   20258:	687b      	ldr	r3, [r7, #4]
   2025a:	681b      	ldr	r3, [r3, #0]
   2025c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2025e:	68fb      	ldr	r3, [r7, #12]
   20260:	69db      	ldr	r3, [r3, #28]
   20262:	1e5a      	subs	r2, r3, #1
   20264:	4193      	sbcs	r3, r2
   20266:	b2db      	uxtb	r3, r3
}
   20268:	0018      	movs	r0, r3
   2026a:	46bd      	mov	sp, r7
   2026c:	b004      	add	sp, #16
   2026e:	bd80      	pop	{r7, pc}

00020270 <spi_get_config_defaults>:
{
   20270:	b580      	push	{r7, lr}
   20272:	b082      	sub	sp, #8
   20274:	af00      	add	r7, sp, #0
   20276:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   20278:	687b      	ldr	r3, [r7, #4]
   2027a:	2201      	movs	r2, #1
   2027c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   2027e:	687b      	ldr	r3, [r7, #4]
   20280:	2200      	movs	r2, #0
   20282:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   20284:	687b      	ldr	r3, [r7, #4]
   20286:	2200      	movs	r2, #0
   20288:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   2028a:	687b      	ldr	r3, [r7, #4]
   2028c:	22c0      	movs	r2, #192	; 0xc0
   2028e:	0392      	lsls	r2, r2, #14
   20290:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   20292:	687b      	ldr	r3, [r7, #4]
   20294:	2200      	movs	r2, #0
   20296:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   20298:	687b      	ldr	r3, [r7, #4]
   2029a:	2200      	movs	r2, #0
   2029c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   2029e:	687b      	ldr	r3, [r7, #4]
   202a0:	2201      	movs	r2, #1
   202a2:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   202a4:	687b      	ldr	r3, [r7, #4]
   202a6:	2201      	movs	r2, #1
   202a8:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   202aa:	687b      	ldr	r3, [r7, #4]
   202ac:	2200      	movs	r2, #0
   202ae:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   202b0:	687b      	ldr	r3, [r7, #4]
   202b2:	2224      	movs	r2, #36	; 0x24
   202b4:	2100      	movs	r1, #0
   202b6:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   202b8:	687b      	ldr	r3, [r7, #4]
   202ba:	3318      	adds	r3, #24
   202bc:	220c      	movs	r2, #12
   202be:	2100      	movs	r1, #0
   202c0:	0018      	movs	r0, r3
   202c2:	4b0a      	ldr	r3, [pc, #40]	; (202ec <spi_get_config_defaults+0x7c>)
   202c4:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   202c6:	687b      	ldr	r3, [r7, #4]
   202c8:	4a09      	ldr	r2, [pc, #36]	; (202f0 <spi_get_config_defaults+0x80>)
   202ca:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   202cc:	687b      	ldr	r3, [r7, #4]
   202ce:	2200      	movs	r2, #0
   202d0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   202d2:	687b      	ldr	r3, [r7, #4]
   202d4:	2200      	movs	r2, #0
   202d6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   202d8:	687b      	ldr	r3, [r7, #4]
   202da:	2200      	movs	r2, #0
   202dc:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   202de:	687b      	ldr	r3, [r7, #4]
   202e0:	2200      	movs	r2, #0
   202e2:	635a      	str	r2, [r3, #52]	; 0x34
};
   202e4:	46c0      	nop			; (mov r8, r8)
   202e6:	46bd      	mov	sp, r7
   202e8:	b002      	add	sp, #8
   202ea:	bd80      	pop	{r7, pc}
   202ec:	000346df 	.word	0x000346df
   202f0:	000186a0 	.word	0x000186a0

000202f4 <spi_slave_inst_get_config_defaults>:
{
   202f4:	b580      	push	{r7, lr}
   202f6:	b082      	sub	sp, #8
   202f8:	af00      	add	r7, sp, #0
   202fa:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   202fc:	687b      	ldr	r3, [r7, #4]
   202fe:	220a      	movs	r2, #10
   20300:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   20302:	687b      	ldr	r3, [r7, #4]
   20304:	2200      	movs	r2, #0
   20306:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   20308:	687b      	ldr	r3, [r7, #4]
   2030a:	2200      	movs	r2, #0
   2030c:	709a      	strb	r2, [r3, #2]
}
   2030e:	46c0      	nop			; (mov r8, r8)
   20310:	46bd      	mov	sp, r7
   20312:	b002      	add	sp, #8
   20314:	bd80      	pop	{r7, pc}
	...

00020318 <spi_attach_slave>:
{
   20318:	b580      	push	{r7, lr}
   2031a:	b084      	sub	sp, #16
   2031c:	af00      	add	r7, sp, #0
   2031e:	6078      	str	r0, [r7, #4]
   20320:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   20322:	683b      	ldr	r3, [r7, #0]
   20324:	781a      	ldrb	r2, [r3, #0]
   20326:	687b      	ldr	r3, [r7, #4]
   20328:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2032a:	683b      	ldr	r3, [r7, #0]
   2032c:	785a      	ldrb	r2, [r3, #1]
   2032e:	687b      	ldr	r3, [r7, #4]
   20330:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   20332:	683b      	ldr	r3, [r7, #0]
   20334:	789a      	ldrb	r2, [r3, #2]
   20336:	687b      	ldr	r3, [r7, #4]
   20338:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   2033a:	230c      	movs	r3, #12
   2033c:	18fb      	adds	r3, r7, r3
   2033e:	0018      	movs	r0, r3
   20340:	4b0b      	ldr	r3, [pc, #44]	; (20370 <spi_attach_slave+0x58>)
   20342:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   20344:	230c      	movs	r3, #12
   20346:	18fb      	adds	r3, r7, r3
   20348:	2201      	movs	r2, #1
   2034a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   2034c:	687b      	ldr	r3, [r7, #4]
   2034e:	781b      	ldrb	r3, [r3, #0]
   20350:	220c      	movs	r2, #12
   20352:	18ba      	adds	r2, r7, r2
   20354:	0011      	movs	r1, r2
   20356:	0018      	movs	r0, r3
   20358:	4b06      	ldr	r3, [pc, #24]	; (20374 <spi_attach_slave+0x5c>)
   2035a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   2035c:	687b      	ldr	r3, [r7, #4]
   2035e:	781b      	ldrb	r3, [r3, #0]
   20360:	2101      	movs	r1, #1
   20362:	0018      	movs	r0, r3
   20364:	4b04      	ldr	r3, [pc, #16]	; (20378 <spi_attach_slave+0x60>)
   20366:	4798      	blx	r3
}
   20368:	46c0      	nop			; (mov r8, r8)
   2036a:	46bd      	mov	sp, r7
   2036c:	b004      	add	sp, #16
   2036e:	bd80      	pop	{r7, pc}
   20370:	000201d9 	.word	0x000201d9
   20374:	000266d9 	.word	0x000266d9
   20378:	000201fd 	.word	0x000201fd

0002037c <spi_enable>:
{
   2037c:	b580      	push	{r7, lr}
   2037e:	b084      	sub	sp, #16
   20380:	af00      	add	r7, sp, #0
   20382:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   20384:	687b      	ldr	r3, [r7, #4]
   20386:	681b      	ldr	r3, [r3, #0]
   20388:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2038a:	687b      	ldr	r3, [r7, #4]
   2038c:	681b      	ldr	r3, [r3, #0]
   2038e:	0018      	movs	r0, r3
   20390:	4b0b      	ldr	r3, [pc, #44]	; (203c0 <spi_enable+0x44>)
   20392:	4798      	blx	r3
   20394:	0003      	movs	r3, r0
   20396:	0018      	movs	r0, r3
   20398:	4b0a      	ldr	r3, [pc, #40]	; (203c4 <spi_enable+0x48>)
   2039a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   2039c:	46c0      	nop			; (mov r8, r8)
   2039e:	687b      	ldr	r3, [r7, #4]
   203a0:	0018      	movs	r0, r3
   203a2:	4b09      	ldr	r3, [pc, #36]	; (203c8 <spi_enable+0x4c>)
   203a4:	4798      	blx	r3
   203a6:	1e03      	subs	r3, r0, #0
   203a8:	d1f9      	bne.n	2039e <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   203aa:	68fb      	ldr	r3, [r7, #12]
   203ac:	681b      	ldr	r3, [r3, #0]
   203ae:	2202      	movs	r2, #2
   203b0:	431a      	orrs	r2, r3
   203b2:	68fb      	ldr	r3, [r7, #12]
   203b4:	601a      	str	r2, [r3, #0]
}
   203b6:	46c0      	nop			; (mov r8, r8)
   203b8:	46bd      	mov	sp, r7
   203ba:	b004      	add	sp, #16
   203bc:	bd80      	pop	{r7, pc}
   203be:	46c0      	nop			; (mov r8, r8)
   203c0:	000273a9 	.word	0x000273a9
   203c4:	00020159 	.word	0x00020159
   203c8:	00020251 	.word	0x00020251

000203cc <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   203cc:	b580      	push	{r7, lr}
   203ce:	b084      	sub	sp, #16
   203d0:	af00      	add	r7, sp, #0
   203d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   203d4:	687b      	ldr	r3, [r7, #4]
   203d6:	681b      	ldr	r3, [r3, #0]
   203d8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   203da:	687b      	ldr	r3, [r7, #4]
   203dc:	681b      	ldr	r3, [r3, #0]
   203de:	0018      	movs	r0, r3
   203e0:	4b0e      	ldr	r3, [pc, #56]	; (2041c <spi_disable+0x50>)
   203e2:	4798      	blx	r3
   203e4:	0003      	movs	r3, r0
   203e6:	0018      	movs	r0, r3
   203e8:	4b0d      	ldr	r3, [pc, #52]	; (20420 <spi_disable+0x54>)
   203ea:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   203ec:	46c0      	nop			; (mov r8, r8)
   203ee:	687b      	ldr	r3, [r7, #4]
   203f0:	0018      	movs	r0, r3
   203f2:	4b0c      	ldr	r3, [pc, #48]	; (20424 <spi_disable+0x58>)
   203f4:	4798      	blx	r3
   203f6:	1e03      	subs	r3, r0, #0
   203f8:	d1f9      	bne.n	203ee <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   203fa:	68fb      	ldr	r3, [r7, #12]
   203fc:	228f      	movs	r2, #143	; 0x8f
   203fe:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   20400:	68fb      	ldr	r3, [r7, #12]
   20402:	228f      	movs	r2, #143	; 0x8f
   20404:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   20406:	68fb      	ldr	r3, [r7, #12]
   20408:	681b      	ldr	r3, [r3, #0]
   2040a:	2202      	movs	r2, #2
   2040c:	4393      	bics	r3, r2
   2040e:	001a      	movs	r2, r3
   20410:	68fb      	ldr	r3, [r7, #12]
   20412:	601a      	str	r2, [r3, #0]
}
   20414:	46c0      	nop			; (mov r8, r8)
   20416:	46bd      	mov	sp, r7
   20418:	b004      	add	sp, #16
   2041a:	bd80      	pop	{r7, pc}
   2041c:	000273a9 	.word	0x000273a9
   20420:	00020185 	.word	0x00020185
   20424:	00020251 	.word	0x00020251

00020428 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   20428:	b580      	push	{r7, lr}
   2042a:	b084      	sub	sp, #16
   2042c:	af00      	add	r7, sp, #0
   2042e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20430:	687b      	ldr	r3, [r7, #4]
   20432:	681b      	ldr	r3, [r3, #0]
   20434:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   20436:	68fb      	ldr	r3, [r7, #12]
   20438:	7e1b      	ldrb	r3, [r3, #24]
   2043a:	b2db      	uxtb	r3, r3
   2043c:	001a      	movs	r2, r3
   2043e:	2302      	movs	r3, #2
   20440:	4013      	ands	r3, r2
   20442:	1e5a      	subs	r2, r3, #1
   20444:	4193      	sbcs	r3, r2
   20446:	b2db      	uxtb	r3, r3
}
   20448:	0018      	movs	r0, r3
   2044a:	46bd      	mov	sp, r7
   2044c:	b004      	add	sp, #16
   2044e:	bd80      	pop	{r7, pc}

00020450 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   20450:	b580      	push	{r7, lr}
   20452:	b084      	sub	sp, #16
   20454:	af00      	add	r7, sp, #0
   20456:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20458:	687b      	ldr	r3, [r7, #4]
   2045a:	681b      	ldr	r3, [r3, #0]
   2045c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   2045e:	68fb      	ldr	r3, [r7, #12]
   20460:	7e1b      	ldrb	r3, [r3, #24]
   20462:	b2db      	uxtb	r3, r3
   20464:	001a      	movs	r2, r3
   20466:	2301      	movs	r3, #1
   20468:	4013      	ands	r3, r2
   2046a:	1e5a      	subs	r2, r3, #1
   2046c:	4193      	sbcs	r3, r2
   2046e:	b2db      	uxtb	r3, r3
}
   20470:	0018      	movs	r0, r3
   20472:	46bd      	mov	sp, r7
   20474:	b004      	add	sp, #16
   20476:	bd80      	pop	{r7, pc}

00020478 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   20478:	b580      	push	{r7, lr}
   2047a:	b084      	sub	sp, #16
   2047c:	af00      	add	r7, sp, #0
   2047e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20480:	687b      	ldr	r3, [r7, #4]
   20482:	681b      	ldr	r3, [r3, #0]
   20484:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   20486:	68fb      	ldr	r3, [r7, #12]
   20488:	7e1b      	ldrb	r3, [r3, #24]
   2048a:	b2db      	uxtb	r3, r3
   2048c:	001a      	movs	r2, r3
   2048e:	2304      	movs	r3, #4
   20490:	4013      	ands	r3, r2
   20492:	1e5a      	subs	r2, r3, #1
   20494:	4193      	sbcs	r3, r2
   20496:	b2db      	uxtb	r3, r3
}
   20498:	0018      	movs	r0, r3
   2049a:	46bd      	mov	sp, r7
   2049c:	b004      	add	sp, #16
   2049e:	bd80      	pop	{r7, pc}

000204a0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   204a0:	b580      	push	{r7, lr}
   204a2:	b084      	sub	sp, #16
   204a4:	af00      	add	r7, sp, #0
   204a6:	6078      	str	r0, [r7, #4]
   204a8:	000a      	movs	r2, r1
   204aa:	1cbb      	adds	r3, r7, #2
   204ac:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   204ae:	687b      	ldr	r3, [r7, #4]
   204b0:	681b      	ldr	r3, [r3, #0]
   204b2:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   204b4:	687b      	ldr	r3, [r7, #4]
   204b6:	0018      	movs	r0, r3
   204b8:	4b0a      	ldr	r3, [pc, #40]	; (204e4 <spi_write+0x44>)
   204ba:	4798      	blx	r3
   204bc:	0003      	movs	r3, r0
   204be:	001a      	movs	r2, r3
   204c0:	2301      	movs	r3, #1
   204c2:	4053      	eors	r3, r2
   204c4:	b2db      	uxtb	r3, r3
   204c6:	2b00      	cmp	r3, #0
   204c8:	d001      	beq.n	204ce <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   204ca:	2305      	movs	r3, #5
   204cc:	e006      	b.n	204dc <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   204ce:	1cbb      	adds	r3, r7, #2
   204d0:	881b      	ldrh	r3, [r3, #0]
   204d2:	05db      	lsls	r3, r3, #23
   204d4:	0dda      	lsrs	r2, r3, #23
   204d6:	68fb      	ldr	r3, [r7, #12]
   204d8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   204da:	2300      	movs	r3, #0
}
   204dc:	0018      	movs	r0, r3
   204de:	46bd      	mov	sp, r7
   204e0:	b004      	add	sp, #16
   204e2:	bd80      	pop	{r7, pc}
   204e4:	00020451 	.word	0x00020451

000204e8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   204e8:	b580      	push	{r7, lr}
   204ea:	b084      	sub	sp, #16
   204ec:	af00      	add	r7, sp, #0
   204ee:	6078      	str	r0, [r7, #4]
   204f0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   204f2:	687b      	ldr	r3, [r7, #4]
   204f4:	681b      	ldr	r3, [r3, #0]
   204f6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   204f8:	687b      	ldr	r3, [r7, #4]
   204fa:	0018      	movs	r0, r3
   204fc:	4b1b      	ldr	r3, [pc, #108]	; (2056c <spi_read+0x84>)
   204fe:	4798      	blx	r3
   20500:	0003      	movs	r3, r0
   20502:	001a      	movs	r2, r3
   20504:	2301      	movs	r3, #1
   20506:	4053      	eors	r3, r2
   20508:	b2db      	uxtb	r3, r3
   2050a:	2b00      	cmp	r3, #0
   2050c:	d001      	beq.n	20512 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   2050e:	2310      	movs	r3, #16
   20510:	e027      	b.n	20562 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   20512:	230f      	movs	r3, #15
   20514:	18fb      	adds	r3, r7, r3
   20516:	2200      	movs	r2, #0
   20518:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2051a:	68bb      	ldr	r3, [r7, #8]
   2051c:	8b5b      	ldrh	r3, [r3, #26]
   2051e:	b29b      	uxth	r3, r3
   20520:	001a      	movs	r2, r3
   20522:	2304      	movs	r3, #4
   20524:	4013      	ands	r3, r2
   20526:	d006      	beq.n	20536 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   20528:	230f      	movs	r3, #15
   2052a:	18fb      	adds	r3, r7, r3
   2052c:	221e      	movs	r2, #30
   2052e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   20530:	68bb      	ldr	r3, [r7, #8]
   20532:	2204      	movs	r2, #4
   20534:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   20536:	687b      	ldr	r3, [r7, #4]
   20538:	799b      	ldrb	r3, [r3, #6]
   2053a:	2b01      	cmp	r3, #1
   2053c:	d108      	bne.n	20550 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   2053e:	68bb      	ldr	r3, [r7, #8]
   20540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20542:	b29b      	uxth	r3, r3
   20544:	05db      	lsls	r3, r3, #23
   20546:	0ddb      	lsrs	r3, r3, #23
   20548:	b29a      	uxth	r2, r3
   2054a:	683b      	ldr	r3, [r7, #0]
   2054c:	801a      	strh	r2, [r3, #0]
   2054e:	e005      	b.n	2055c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   20550:	68bb      	ldr	r3, [r7, #8]
   20552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20554:	b2db      	uxtb	r3, r3
   20556:	b29a      	uxth	r2, r3
   20558:	683b      	ldr	r3, [r7, #0]
   2055a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   2055c:	230f      	movs	r3, #15
   2055e:	18fb      	adds	r3, r7, r3
   20560:	781b      	ldrb	r3, [r3, #0]
}
   20562:	0018      	movs	r0, r3
   20564:	46bd      	mov	sp, r7
   20566:	b004      	add	sp, #16
   20568:	bd80      	pop	{r7, pc}
   2056a:	46c0      	nop			; (mov r8, r8)
   2056c:	00020479 	.word	0x00020479

00020570 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   20570:	b580      	push	{r7, lr}
   20572:	b086      	sub	sp, #24
   20574:	af00      	add	r7, sp, #0
   20576:	60f8      	str	r0, [r7, #12]
   20578:	60b9      	str	r1, [r7, #8]
   2057a:	1dbb      	adds	r3, r7, #6
   2057c:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   2057e:	2313      	movs	r3, #19
   20580:	18fb      	adds	r3, r7, r3
   20582:	22ff      	movs	r2, #255	; 0xff
   20584:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   20586:	2317      	movs	r3, #23
   20588:	18fb      	adds	r3, r7, r3
   2058a:	2200      	movs	r2, #0
   2058c:	701a      	strb	r2, [r3, #0]
   2058e:	2316      	movs	r3, #22
   20590:	18fb      	adds	r3, r7, r3
   20592:	2200      	movs	r2, #0
   20594:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   20596:	2314      	movs	r3, #20
   20598:	18fb      	adds	r3, r7, r3
   2059a:	2200      	movs	r2, #0
   2059c:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   2059e:	2310      	movs	r3, #16
   205a0:	18fb      	adds	r3, r7, r3
   205a2:	2200      	movs	r2, #0
   205a4:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   205a6:	68bb      	ldr	r3, [r7, #8]
   205a8:	2b00      	cmp	r3, #0
   205aa:	d102      	bne.n	205b2 <spi_rw+0x42>
   205ac:	68fb      	ldr	r3, [r7, #12]
   205ae:	2b00      	cmp	r3, #0
   205b0:	d003      	beq.n	205ba <spi_rw+0x4a>
   205b2:	1dbb      	adds	r3, r7, #6
   205b4:	881b      	ldrh	r3, [r3, #0]
   205b6:	2b00      	cmp	r3, #0
   205b8:	d102      	bne.n	205c0 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   205ba:	230f      	movs	r3, #15
   205bc:	425b      	negs	r3, r3
   205be:	e07e      	b.n	206be <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   205c0:	68fb      	ldr	r3, [r7, #12]
   205c2:	2b00      	cmp	r3, #0
   205c4:	d106      	bne.n	205d4 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   205c6:	2313      	movs	r3, #19
   205c8:	18fb      	adds	r3, r7, r3
   205ca:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   205cc:	2317      	movs	r3, #23
   205ce:	18fb      	adds	r3, r7, r3
   205d0:	2201      	movs	r2, #1
   205d2:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   205d4:	68bb      	ldr	r3, [r7, #8]
   205d6:	2b00      	cmp	r3, #0
   205d8:	d106      	bne.n	205e8 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   205da:	2313      	movs	r3, #19
   205dc:	18fb      	adds	r3, r7, r3
   205de:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   205e0:	2316      	movs	r3, #22
   205e2:	18fb      	adds	r3, r7, r3
   205e4:	2201      	movs	r2, #1
   205e6:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   205e8:	4937      	ldr	r1, [pc, #220]	; (206c8 <spi_rw+0x158>)
   205ea:	4b38      	ldr	r3, [pc, #224]	; (206cc <spi_rw+0x15c>)
   205ec:	2201      	movs	r2, #1
   205ee:	0018      	movs	r0, r3
   205f0:	4b37      	ldr	r3, [pc, #220]	; (206d0 <spi_rw+0x160>)
   205f2:	4798      	blx	r3

	while (u16Sz) {
   205f4:	e04c      	b.n	20690 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   205f6:	68fb      	ldr	r3, [r7, #12]
   205f8:	781a      	ldrb	r2, [r3, #0]
   205fa:	2314      	movs	r3, #20
   205fc:	18fb      	adds	r3, r7, r3
   205fe:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   20600:	46c0      	nop			; (mov r8, r8)
   20602:	4b32      	ldr	r3, [pc, #200]	; (206cc <spi_rw+0x15c>)
   20604:	0018      	movs	r0, r3
   20606:	4b33      	ldr	r3, [pc, #204]	; (206d4 <spi_rw+0x164>)
   20608:	4798      	blx	r3
   2060a:	0003      	movs	r3, r0
   2060c:	001a      	movs	r2, r3
   2060e:	2301      	movs	r3, #1
   20610:	4053      	eors	r3, r2
   20612:	b2db      	uxtb	r3, r3
   20614:	2b00      	cmp	r3, #0
   20616:	d1f4      	bne.n	20602 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   20618:	46c0      	nop			; (mov r8, r8)
   2061a:	2314      	movs	r3, #20
   2061c:	18fb      	adds	r3, r7, r3
   2061e:	881a      	ldrh	r2, [r3, #0]
   20620:	4b2a      	ldr	r3, [pc, #168]	; (206cc <spi_rw+0x15c>)
   20622:	0011      	movs	r1, r2
   20624:	0018      	movs	r0, r3
   20626:	4b2c      	ldr	r3, [pc, #176]	; (206d8 <spi_rw+0x168>)
   20628:	4798      	blx	r3
   2062a:	1e03      	subs	r3, r0, #0
   2062c:	d1f5      	bne.n	2061a <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   2062e:	46c0      	nop			; (mov r8, r8)
   20630:	4b26      	ldr	r3, [pc, #152]	; (206cc <spi_rw+0x15c>)
   20632:	0018      	movs	r0, r3
   20634:	4b29      	ldr	r3, [pc, #164]	; (206dc <spi_rw+0x16c>)
   20636:	4798      	blx	r3
   20638:	0003      	movs	r3, r0
   2063a:	001a      	movs	r2, r3
   2063c:	2301      	movs	r3, #1
   2063e:	4053      	eors	r3, r2
   20640:	b2db      	uxtb	r3, r3
   20642:	2b00      	cmp	r3, #0
   20644:	d1f4      	bne.n	20630 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   20646:	46c0      	nop			; (mov r8, r8)
   20648:	2310      	movs	r3, #16
   2064a:	18fa      	adds	r2, r7, r3
   2064c:	4b1f      	ldr	r3, [pc, #124]	; (206cc <spi_rw+0x15c>)
   2064e:	0011      	movs	r1, r2
   20650:	0018      	movs	r0, r3
   20652:	4b23      	ldr	r3, [pc, #140]	; (206e0 <spi_rw+0x170>)
   20654:	4798      	blx	r3
   20656:	1e03      	subs	r3, r0, #0
   20658:	d1f6      	bne.n	20648 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   2065a:	2310      	movs	r3, #16
   2065c:	18fb      	adds	r3, r7, r3
   2065e:	881b      	ldrh	r3, [r3, #0]
   20660:	b2da      	uxtb	r2, r3
   20662:	68bb      	ldr	r3, [r7, #8]
   20664:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   20666:	1dbb      	adds	r3, r7, #6
   20668:	881a      	ldrh	r2, [r3, #0]
   2066a:	1dbb      	adds	r3, r7, #6
   2066c:	3a01      	subs	r2, #1
   2066e:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   20670:	2316      	movs	r3, #22
   20672:	18fb      	adds	r3, r7, r3
   20674:	781b      	ldrb	r3, [r3, #0]
   20676:	2b00      	cmp	r3, #0
   20678:	d102      	bne.n	20680 <spi_rw+0x110>
			pu8Miso++;
   2067a:	68bb      	ldr	r3, [r7, #8]
   2067c:	3301      	adds	r3, #1
   2067e:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   20680:	2317      	movs	r3, #23
   20682:	18fb      	adds	r3, r7, r3
   20684:	781b      	ldrb	r3, [r3, #0]
   20686:	2b00      	cmp	r3, #0
   20688:	d102      	bne.n	20690 <spi_rw+0x120>
			pu8Mosi++;
   2068a:	68fb      	ldr	r3, [r7, #12]
   2068c:	3301      	adds	r3, #1
   2068e:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   20690:	1dbb      	adds	r3, r7, #6
   20692:	881b      	ldrh	r3, [r3, #0]
   20694:	2b00      	cmp	r3, #0
   20696:	d1ae      	bne.n	205f6 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   20698:	46c0      	nop			; (mov r8, r8)
   2069a:	4b0c      	ldr	r3, [pc, #48]	; (206cc <spi_rw+0x15c>)
   2069c:	0018      	movs	r0, r3
   2069e:	4b11      	ldr	r3, [pc, #68]	; (206e4 <spi_rw+0x174>)
   206a0:	4798      	blx	r3
   206a2:	0003      	movs	r3, r0
   206a4:	001a      	movs	r2, r3
   206a6:	2301      	movs	r3, #1
   206a8:	4053      	eors	r3, r2
   206aa:	b2db      	uxtb	r3, r3
   206ac:	2b00      	cmp	r3, #0
   206ae:	d1f4      	bne.n	2069a <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   206b0:	4905      	ldr	r1, [pc, #20]	; (206c8 <spi_rw+0x158>)
   206b2:	4b06      	ldr	r3, [pc, #24]	; (206cc <spi_rw+0x15c>)
   206b4:	2200      	movs	r2, #0
   206b6:	0018      	movs	r0, r3
   206b8:	4b05      	ldr	r3, [pc, #20]	; (206d0 <spi_rw+0x160>)
   206ba:	4798      	blx	r3

	return M2M_SUCCESS;
   206bc:	2300      	movs	r3, #0
}
   206be:	0018      	movs	r0, r3
   206c0:	46bd      	mov	sp, r7
   206c2:	b006      	add	sp, #24
   206c4:	bd80      	pop	{r7, pc}
   206c6:	46c0      	nop			; (mov r8, r8)
   206c8:	200058ec 	.word	0x200058ec
   206cc:	200058f0 	.word	0x200058f0
   206d0:	00027e1d 	.word	0x00027e1d
   206d4:	00020451 	.word	0x00020451
   206d8:	000204a1 	.word	0x000204a1
   206dc:	00020479 	.word	0x00020479
   206e0:	000204e9 	.word	0x000204e9
   206e4:	00020429 	.word	0x00020429

000206e8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   206e8:	b580      	push	{r7, lr}
   206ea:	b092      	sub	sp, #72	; 0x48
   206ec:	af00      	add	r7, sp, #0
   206ee:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   206f0:	2347      	movs	r3, #71	; 0x47
   206f2:	18fb      	adds	r3, r7, r3
   206f4:	2200      	movs	r2, #0
   206f6:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   206f8:	2308      	movs	r3, #8
   206fa:	18fb      	adds	r3, r7, r3
   206fc:	0018      	movs	r0, r3
   206fe:	4b26      	ldr	r3, [pc, #152]	; (20798 <nm_bus_init+0xb0>)
   20700:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   20702:	2308      	movs	r3, #8
   20704:	18fb      	adds	r3, r7, r3
   20706:	220e      	movs	r2, #14
   20708:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   2070a:	2308      	movs	r3, #8
   2070c:	18fa      	adds	r2, r7, r3
   2070e:	4b23      	ldr	r3, [pc, #140]	; (2079c <nm_bus_init+0xb4>)
   20710:	0011      	movs	r1, r2
   20712:	0018      	movs	r0, r3
   20714:	4b22      	ldr	r3, [pc, #136]	; (207a0 <nm_bus_init+0xb8>)
   20716:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   20718:	230c      	movs	r3, #12
   2071a:	18fb      	adds	r3, r7, r3
   2071c:	0018      	movs	r0, r3
   2071e:	4b21      	ldr	r3, [pc, #132]	; (207a4 <nm_bus_init+0xbc>)
   20720:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   20722:	230c      	movs	r3, #12
   20724:	18fb      	adds	r3, r7, r3
   20726:	22c0      	movs	r2, #192	; 0xc0
   20728:	0392      	lsls	r2, r2, #14
   2072a:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   2072c:	230c      	movs	r3, #12
   2072e:	18fb      	adds	r3, r7, r3
   20730:	4a1d      	ldr	r2, [pc, #116]	; (207a8 <nm_bus_init+0xc0>)
   20732:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   20734:	230c      	movs	r3, #12
   20736:	18fb      	adds	r3, r7, r3
   20738:	4a1c      	ldr	r2, [pc, #112]	; (207ac <nm_bus_init+0xc4>)
   2073a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   2073c:	230c      	movs	r3, #12
   2073e:	18fb      	adds	r3, r7, r3
   20740:	2201      	movs	r2, #1
   20742:	4252      	negs	r2, r2
   20744:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   20746:	230c      	movs	r3, #12
   20748:	18fb      	adds	r3, r7, r3
   2074a:	4a19      	ldr	r2, [pc, #100]	; (207b0 <nm_bus_init+0xc8>)
   2074c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   2074e:	230c      	movs	r3, #12
   20750:	18fb      	adds	r3, r7, r3
   20752:	2200      	movs	r2, #0
   20754:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   20756:	230c      	movs	r3, #12
   20758:	18fb      	adds	r3, r7, r3
   2075a:	4a16      	ldr	r2, [pc, #88]	; (207b4 <nm_bus_init+0xcc>)
   2075c:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   2075e:	230c      	movs	r3, #12
   20760:	18fa      	adds	r2, r7, r3
   20762:	4915      	ldr	r1, [pc, #84]	; (207b8 <nm_bus_init+0xd0>)
   20764:	4b15      	ldr	r3, [pc, #84]	; (207bc <nm_bus_init+0xd4>)
   20766:	0018      	movs	r0, r3
   20768:	4b15      	ldr	r3, [pc, #84]	; (207c0 <nm_bus_init+0xd8>)
   2076a:	4798      	blx	r3
   2076c:	1e03      	subs	r3, r0, #0
   2076e:	d002      	beq.n	20776 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   20770:	2306      	movs	r3, #6
   20772:	425b      	negs	r3, r3
   20774:	e00c      	b.n	20790 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   20776:	4b11      	ldr	r3, [pc, #68]	; (207bc <nm_bus_init+0xd4>)
   20778:	0018      	movs	r0, r3
   2077a:	4b12      	ldr	r3, [pc, #72]	; (207c4 <nm_bus_init+0xdc>)
   2077c:	4798      	blx	r3

	nm_bsp_reset();
   2077e:	4b12      	ldr	r3, [pc, #72]	; (207c8 <nm_bus_init+0xe0>)
   20780:	4798      	blx	r3
	nm_bsp_sleep(1);
   20782:	2001      	movs	r0, #1
   20784:	4b11      	ldr	r3, [pc, #68]	; (207cc <nm_bus_init+0xe4>)
   20786:	4798      	blx	r3
#endif
	return result;
   20788:	2347      	movs	r3, #71	; 0x47
   2078a:	18fb      	adds	r3, r7, r3
   2078c:	781b      	ldrb	r3, [r3, #0]
   2078e:	b25b      	sxtb	r3, r3
}
   20790:	0018      	movs	r0, r3
   20792:	46bd      	mov	sp, r7
   20794:	b012      	add	sp, #72	; 0x48
   20796:	bd80      	pop	{r7, pc}
   20798:	000202f5 	.word	0x000202f5
   2079c:	200058ec 	.word	0x200058ec
   207a0:	00020319 	.word	0x00020319
   207a4:	00020271 	.word	0x00020271
   207a8:	000c0002 	.word	0x000c0002
   207ac:	000d0002 	.word	0x000d0002
   207b0:	000f0002 	.word	0x000f0002
   207b4:	00124f80 	.word	0x00124f80
   207b8:	42001000 	.word	0x42001000
   207bc:	200058f0 	.word	0x200058f0
   207c0:	00027b59 	.word	0x00027b59
   207c4:	0002037d 	.word	0x0002037d
   207c8:	0001ffed 	.word	0x0001ffed
   207cc:	0002002d 	.word	0x0002002d

000207d0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   207d0:	b590      	push	{r4, r7, lr}
   207d2:	b085      	sub	sp, #20
   207d4:	af00      	add	r7, sp, #0
   207d6:	0002      	movs	r2, r0
   207d8:	6039      	str	r1, [r7, #0]
   207da:	1dfb      	adds	r3, r7, #7
   207dc:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   207de:	230f      	movs	r3, #15
   207e0:	18fb      	adds	r3, r7, r3
   207e2:	2200      	movs	r2, #0
   207e4:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   207e6:	1dfb      	adds	r3, r7, #7
   207e8:	781b      	ldrb	r3, [r3, #0]
   207ea:	2b03      	cmp	r3, #3
   207ec:	d10f      	bne.n	2080e <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   207ee:	683b      	ldr	r3, [r7, #0]
   207f0:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   207f2:	68bb      	ldr	r3, [r7, #8]
   207f4:	6818      	ldr	r0, [r3, #0]
   207f6:	68bb      	ldr	r3, [r7, #8]
   207f8:	6859      	ldr	r1, [r3, #4]
   207fa:	68bb      	ldr	r3, [r7, #8]
   207fc:	891b      	ldrh	r3, [r3, #8]
   207fe:	220f      	movs	r2, #15
   20800:	18bc      	adds	r4, r7, r2
   20802:	001a      	movs	r2, r3
   20804:	4b10      	ldr	r3, [pc, #64]	; (20848 <nm_bus_ioctl+0x78>)
   20806:	4798      	blx	r3
   20808:	0003      	movs	r3, r0
   2080a:	7023      	strb	r3, [r4, #0]
		}
		break;
   2080c:	e013      	b.n	20836 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   2080e:	230f      	movs	r3, #15
   20810:	18fb      	adds	r3, r7, r3
   20812:	22ff      	movs	r2, #255	; 0xff
   20814:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   20816:	2383      	movs	r3, #131	; 0x83
   20818:	005a      	lsls	r2, r3, #1
   2081a:	490c      	ldr	r1, [pc, #48]	; (2084c <nm_bus_ioctl+0x7c>)
   2081c:	4b0c      	ldr	r3, [pc, #48]	; (20850 <nm_bus_ioctl+0x80>)
   2081e:	0018      	movs	r0, r3
   20820:	4b0c      	ldr	r3, [pc, #48]	; (20854 <nm_bus_ioctl+0x84>)
   20822:	4798      	blx	r3
   20824:	4b0c      	ldr	r3, [pc, #48]	; (20858 <nm_bus_ioctl+0x88>)
   20826:	0018      	movs	r0, r3
   20828:	4b0a      	ldr	r3, [pc, #40]	; (20854 <nm_bus_ioctl+0x84>)
   2082a:	4798      	blx	r3
   2082c:	4b0b      	ldr	r3, [pc, #44]	; (2085c <nm_bus_ioctl+0x8c>)
   2082e:	0018      	movs	r0, r3
   20830:	4b08      	ldr	r3, [pc, #32]	; (20854 <nm_bus_ioctl+0x84>)
   20832:	4798      	blx	r3
			break;
   20834:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   20836:	230f      	movs	r3, #15
   20838:	18fb      	adds	r3, r7, r3
   2083a:	781b      	ldrb	r3, [r3, #0]
   2083c:	b25b      	sxtb	r3, r3
}
   2083e:	0018      	movs	r0, r3
   20840:	46bd      	mov	sp, r7
   20842:	b005      	add	sp, #20
   20844:	bd90      	pop	{r4, r7, pc}
   20846:	46c0      	nop			; (mov r8, r8)
   20848:	00020571 	.word	0x00020571
   2084c:	00038054 	.word	0x00038054
   20850:	00038028 	.word	0x00038028
   20854:	0001dbd9 	.word	0x0001dbd9
   20858:	0003803c 	.word	0x0003803c
   2085c:	00038050 	.word	0x00038050

00020860 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   20860:	b580      	push	{r7, lr}
   20862:	b082      	sub	sp, #8
   20864:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   20866:	1dfb      	adds	r3, r7, #7
   20868:	2200      	movs	r2, #0
   2086a:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   2086c:	1d3b      	adds	r3, r7, #4
   2086e:	0018      	movs	r0, r3
   20870:	4b13      	ldr	r3, [pc, #76]	; (208c0 <nm_bus_deinit+0x60>)
   20872:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   20874:	1d3b      	adds	r3, r7, #4
   20876:	2200      	movs	r2, #0
   20878:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   2087a:	1d3b      	adds	r3, r7, #4
   2087c:	2200      	movs	r2, #0
   2087e:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   20880:	4b10      	ldr	r3, [pc, #64]	; (208c4 <nm_bus_deinit+0x64>)
   20882:	0018      	movs	r0, r3
   20884:	4b10      	ldr	r3, [pc, #64]	; (208c8 <nm_bus_deinit+0x68>)
   20886:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   20888:	1d3b      	adds	r3, r7, #4
   2088a:	0019      	movs	r1, r3
   2088c:	200c      	movs	r0, #12
   2088e:	4b0f      	ldr	r3, [pc, #60]	; (208cc <nm_bus_deinit+0x6c>)
   20890:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   20892:	1d3b      	adds	r3, r7, #4
   20894:	0019      	movs	r1, r3
   20896:	200f      	movs	r0, #15
   20898:	4b0c      	ldr	r3, [pc, #48]	; (208cc <nm_bus_deinit+0x6c>)
   2089a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   2089c:	1d3b      	adds	r3, r7, #4
   2089e:	0019      	movs	r1, r3
   208a0:	200d      	movs	r0, #13
   208a2:	4b0a      	ldr	r3, [pc, #40]	; (208cc <nm_bus_deinit+0x6c>)
   208a4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   208a6:	1d3b      	adds	r3, r7, #4
   208a8:	0019      	movs	r1, r3
   208aa:	200e      	movs	r0, #14
   208ac:	4b07      	ldr	r3, [pc, #28]	; (208cc <nm_bus_deinit+0x6c>)
   208ae:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   208b0:	1dfb      	adds	r3, r7, #7
   208b2:	781b      	ldrb	r3, [r3, #0]
   208b4:	b25b      	sxtb	r3, r3
}
   208b6:	0018      	movs	r0, r3
   208b8:	46bd      	mov	sp, r7
   208ba:	b002      	add	sp, #8
   208bc:	bd80      	pop	{r7, pc}
   208be:	46c0      	nop			; (mov r8, r8)
   208c0:	000201d9 	.word	0x000201d9
   208c4:	200058f0 	.word	0x200058f0
   208c8:	000203cd 	.word	0x000203cd
   208cc:	000266d9 	.word	0x000266d9

000208d0 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   208d0:	b580      	push	{r7, lr}
   208d2:	b084      	sub	sp, #16
   208d4:	af00      	add	r7, sp, #0
   208d6:	60f8      	str	r0, [r7, #12]
   208d8:	60b9      	str	r1, [r7, #8]
   208da:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   208dc:	687b      	ldr	r3, [r7, #4]
   208de:	2b00      	cmp	r3, #0
   208e0:	d010      	beq.n	20904 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   208e2:	68bb      	ldr	r3, [r7, #8]
   208e4:	781a      	ldrb	r2, [r3, #0]
   208e6:	68fb      	ldr	r3, [r7, #12]
   208e8:	701a      	strb	r2, [r3, #0]
		pDst++;
   208ea:	68fb      	ldr	r3, [r7, #12]
   208ec:	3301      	adds	r3, #1
   208ee:	60fb      	str	r3, [r7, #12]
		pSrc++;
   208f0:	68bb      	ldr	r3, [r7, #8]
   208f2:	3301      	adds	r3, #1
   208f4:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   208f6:	687b      	ldr	r3, [r7, #4]
   208f8:	3b01      	subs	r3, #1
   208fa:	607b      	str	r3, [r7, #4]
   208fc:	687b      	ldr	r3, [r7, #4]
   208fe:	2b00      	cmp	r3, #0
   20900:	d1ef      	bne.n	208e2 <m2m_memcpy+0x12>
   20902:	e000      	b.n	20906 <m2m_memcpy+0x36>
	if(sz == 0) return;
   20904:	46c0      	nop			; (mov r8, r8)
}
   20906:	46bd      	mov	sp, r7
   20908:	b004      	add	sp, #16
   2090a:	bd80      	pop	{r7, pc}

0002090c <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   2090c:	b580      	push	{r7, lr}
   2090e:	b084      	sub	sp, #16
   20910:	af00      	add	r7, sp, #0
   20912:	60f8      	str	r0, [r7, #12]
   20914:	607a      	str	r2, [r7, #4]
   20916:	230b      	movs	r3, #11
   20918:	18fb      	adds	r3, r7, r3
   2091a:	1c0a      	adds	r2, r1, #0
   2091c:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   2091e:	687b      	ldr	r3, [r7, #4]
   20920:	2b00      	cmp	r3, #0
   20922:	d00e      	beq.n	20942 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   20924:	68fb      	ldr	r3, [r7, #12]
   20926:	220b      	movs	r2, #11
   20928:	18ba      	adds	r2, r7, r2
   2092a:	7812      	ldrb	r2, [r2, #0]
   2092c:	701a      	strb	r2, [r3, #0]
		pBuf++;
   2092e:	68fb      	ldr	r3, [r7, #12]
   20930:	3301      	adds	r3, #1
   20932:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   20934:	687b      	ldr	r3, [r7, #4]
   20936:	3b01      	subs	r3, #1
   20938:	607b      	str	r3, [r7, #4]
   2093a:	687b      	ldr	r3, [r7, #4]
   2093c:	2b00      	cmp	r3, #0
   2093e:	d1f1      	bne.n	20924 <m2m_memset+0x18>
   20940:	e000      	b.n	20944 <m2m_memset+0x38>
	if(sz == 0) return;
   20942:	46c0      	nop			; (mov r8, r8)
}
   20944:	46bd      	mov	sp, r7
   20946:	b004      	add	sp, #16
   20948:	bd80      	pop	{r7, pc}

0002094a <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   2094a:	b580      	push	{r7, lr}
   2094c:	b084      	sub	sp, #16
   2094e:	af00      	add	r7, sp, #0
   20950:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   20952:	230e      	movs	r3, #14
   20954:	18fb      	adds	r3, r7, r3
   20956:	2200      	movs	r2, #0
   20958:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   2095a:	e009      	b.n	20970 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   2095c:	230e      	movs	r3, #14
   2095e:	18fb      	adds	r3, r7, r3
   20960:	881a      	ldrh	r2, [r3, #0]
   20962:	230e      	movs	r3, #14
   20964:	18fb      	adds	r3, r7, r3
   20966:	3201      	adds	r2, #1
   20968:	801a      	strh	r2, [r3, #0]
		pcStr++;
   2096a:	687b      	ldr	r3, [r7, #4]
   2096c:	3301      	adds	r3, #1
   2096e:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   20970:	687b      	ldr	r3, [r7, #4]
   20972:	781b      	ldrb	r3, [r3, #0]
   20974:	2b00      	cmp	r3, #0
   20976:	d1f1      	bne.n	2095c <m2m_strlen+0x12>
	}
	return u16StrLen;
   20978:	230e      	movs	r3, #14
   2097a:	18fb      	adds	r3, r7, r3
   2097c:	881b      	ldrh	r3, [r3, #0]
}
   2097e:	0018      	movs	r0, r3
   20980:	46bd      	mov	sp, r7
   20982:	b004      	add	sp, #16
   20984:	bd80      	pop	{r7, pc}
	...

00020988 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   20988:	b580      	push	{r7, lr}
   2098a:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   2098c:	4b04      	ldr	r3, [pc, #16]	; (209a0 <isr+0x18>)
   2098e:	78db      	ldrb	r3, [r3, #3]
   20990:	b2db      	uxtb	r3, r3
   20992:	3301      	adds	r3, #1
   20994:	b2da      	uxtb	r2, r3
   20996:	4b02      	ldr	r3, [pc, #8]	; (209a0 <isr+0x18>)
   20998:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   2099a:	46c0      	nop			; (mov r8, r8)
   2099c:	46bd      	mov	sp, r7
   2099e:	bd80      	pop	{r7, pc}
   209a0:	2000592c 	.word	0x2000592c

000209a4 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   209a4:	b590      	push	{r4, r7, lr}
   209a6:	b083      	sub	sp, #12
   209a8:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   209aa:	1dfb      	adds	r3, r7, #7
   209ac:	2200      	movs	r2, #0
   209ae:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   209b0:	4b14      	ldr	r3, [pc, #80]	; (20a04 <hif_set_rx_done+0x60>)
   209b2:	2200      	movs	r2, #0
   209b4:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   209b6:	2001      	movs	r0, #1
   209b8:	4b13      	ldr	r3, [pc, #76]	; (20a08 <hif_set_rx_done+0x64>)
   209ba:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   209bc:	1dfc      	adds	r4, r7, #7
   209be:	003b      	movs	r3, r7
   209c0:	4a12      	ldr	r2, [pc, #72]	; (20a0c <hif_set_rx_done+0x68>)
   209c2:	0019      	movs	r1, r3
   209c4:	0010      	movs	r0, r2
   209c6:	4b12      	ldr	r3, [pc, #72]	; (20a10 <hif_set_rx_done+0x6c>)
   209c8:	4798      	blx	r3
   209ca:	0003      	movs	r3, r0
   209cc:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   209ce:	1dfb      	adds	r3, r7, #7
   209d0:	781b      	ldrb	r3, [r3, #0]
   209d2:	b25b      	sxtb	r3, r3
   209d4:	2b00      	cmp	r3, #0
   209d6:	d10d      	bne.n	209f4 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   209d8:	683b      	ldr	r3, [r7, #0]
   209da:	2202      	movs	r2, #2
   209dc:	4313      	orrs	r3, r2
   209de:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   209e0:	683b      	ldr	r3, [r7, #0]
   209e2:	1dfc      	adds	r4, r7, #7
   209e4:	4a09      	ldr	r2, [pc, #36]	; (20a0c <hif_set_rx_done+0x68>)
   209e6:	0019      	movs	r1, r3
   209e8:	0010      	movs	r0, r2
   209ea:	4b0a      	ldr	r3, [pc, #40]	; (20a14 <hif_set_rx_done+0x70>)
   209ec:	4798      	blx	r3
   209ee:	0003      	movs	r3, r0
   209f0:	7023      	strb	r3, [r4, #0]
   209f2:	e000      	b.n	209f6 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   209f4:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   209f6:	1dfb      	adds	r3, r7, #7
   209f8:	781b      	ldrb	r3, [r3, #0]
   209fa:	b25b      	sxtb	r3, r3

}
   209fc:	0018      	movs	r0, r3
   209fe:	46bd      	mov	sp, r7
   20a00:	b003      	add	sp, #12
   20a02:	bd90      	pop	{r4, r7, pc}
   20a04:	2000592c 	.word	0x2000592c
   20a08:	000200c1 	.word	0x000200c1
   20a0c:	00001070 	.word	0x00001070
   20a10:	0002299d 	.word	0x0002299d
   20a14:	000229c1 	.word	0x000229c1

00020a18 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   20a18:	b580      	push	{r7, lr}
   20a1a:	b082      	sub	sp, #8
   20a1c:	af00      	add	r7, sp, #0
   20a1e:	603a      	str	r2, [r7, #0]
   20a20:	1dfb      	adds	r3, r7, #7
   20a22:	1c02      	adds	r2, r0, #0
   20a24:	701a      	strb	r2, [r3, #0]
   20a26:	1d3b      	adds	r3, r7, #4
   20a28:	1c0a      	adds	r2, r1, #0
   20a2a:	801a      	strh	r2, [r3, #0]


}
   20a2c:	46c0      	nop			; (mov r8, r8)
   20a2e:	46bd      	mov	sp, r7
   20a30:	b002      	add	sp, #8
   20a32:	bd80      	pop	{r7, pc}

00020a34 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   20a34:	b590      	push	{r4, r7, lr}
   20a36:	b083      	sub	sp, #12
   20a38:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   20a3a:	1dfb      	adds	r3, r7, #7
   20a3c:	2200      	movs	r2, #0
   20a3e:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   20a40:	4b16      	ldr	r3, [pc, #88]	; (20a9c <hif_chip_wake+0x68>)
   20a42:	789b      	ldrb	r3, [r3, #2]
   20a44:	b2db      	uxtb	r3, r3
   20a46:	2b00      	cmp	r3, #0
   20a48:	d003      	beq.n	20a52 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   20a4a:	1dfb      	adds	r3, r7, #7
   20a4c:	781b      	ldrb	r3, [r3, #0]
   20a4e:	b25b      	sxtb	r3, r3
   20a50:	e01f      	b.n	20a92 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   20a52:	4b12      	ldr	r3, [pc, #72]	; (20a9c <hif_chip_wake+0x68>)
   20a54:	785b      	ldrb	r3, [r3, #1]
   20a56:	b2db      	uxtb	r3, r3
   20a58:	2b00      	cmp	r3, #0
   20a5a:	d10e      	bne.n	20a7a <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   20a5c:	4b0f      	ldr	r3, [pc, #60]	; (20a9c <hif_chip_wake+0x68>)
   20a5e:	781b      	ldrb	r3, [r3, #0]
   20a60:	b2db      	uxtb	r3, r3
   20a62:	2b00      	cmp	r3, #0
   20a64:	d009      	beq.n	20a7a <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   20a66:	1dfc      	adds	r4, r7, #7
   20a68:	4b0d      	ldr	r3, [pc, #52]	; (20aa0 <hif_chip_wake+0x6c>)
   20a6a:	4798      	blx	r3
   20a6c:	0003      	movs	r3, r0
   20a6e:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20a70:	1dfb      	adds	r3, r7, #7
   20a72:	781b      	ldrb	r3, [r3, #0]
   20a74:	b25b      	sxtb	r3, r3
   20a76:	2b00      	cmp	r3, #0
   20a78:	d107      	bne.n	20a8a <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   20a7a:	4b08      	ldr	r3, [pc, #32]	; (20a9c <hif_chip_wake+0x68>)
   20a7c:	785b      	ldrb	r3, [r3, #1]
   20a7e:	b2db      	uxtb	r3, r3
   20a80:	3301      	adds	r3, #1
   20a82:	b2da      	uxtb	r2, r3
   20a84:	4b05      	ldr	r3, [pc, #20]	; (20a9c <hif_chip_wake+0x68>)
   20a86:	705a      	strb	r2, [r3, #1]
   20a88:	e000      	b.n	20a8c <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   20a8a:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   20a8c:	1dfb      	adds	r3, r7, #7
   20a8e:	781b      	ldrb	r3, [r3, #0]
   20a90:	b25b      	sxtb	r3, r3
}
   20a92:	0018      	movs	r0, r3
   20a94:	46bd      	mov	sp, r7
   20a96:	b003      	add	sp, #12
   20a98:	bd90      	pop	{r4, r7, pc}
   20a9a:	46c0      	nop			; (mov r8, r8)
   20a9c:	2000592c 	.word	0x2000592c
   20aa0:	0002246d 	.word	0x0002246d

00020aa4 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   20aa4:	b580      	push	{r7, lr}
   20aa6:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   20aa8:	4b07      	ldr	r3, [pc, #28]	; (20ac8 <hif_chip_sleep_sc+0x24>)
   20aaa:	785b      	ldrb	r3, [r3, #1]
   20aac:	b2db      	uxtb	r3, r3
   20aae:	2b00      	cmp	r3, #0
   20ab0:	d006      	beq.n	20ac0 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   20ab2:	4b05      	ldr	r3, [pc, #20]	; (20ac8 <hif_chip_sleep_sc+0x24>)
   20ab4:	785b      	ldrb	r3, [r3, #1]
   20ab6:	b2db      	uxtb	r3, r3
   20ab8:	3b01      	subs	r3, #1
   20aba:	b2da      	uxtb	r2, r3
   20abc:	4b02      	ldr	r3, [pc, #8]	; (20ac8 <hif_chip_sleep_sc+0x24>)
   20abe:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   20ac0:	2300      	movs	r3, #0
}
   20ac2:	0018      	movs	r0, r3
   20ac4:	46bd      	mov	sp, r7
   20ac6:	bd80      	pop	{r7, pc}
   20ac8:	2000592c 	.word	0x2000592c

00020acc <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   20acc:	b590      	push	{r4, r7, lr}
   20ace:	b083      	sub	sp, #12
   20ad0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   20ad2:	1dfb      	adds	r3, r7, #7
   20ad4:	2200      	movs	r2, #0
   20ad6:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   20ad8:	4b10      	ldr	r3, [pc, #64]	; (20b1c <hif_chip_sleep+0x50>)
   20ada:	785b      	ldrb	r3, [r3, #1]
   20adc:	b2db      	uxtb	r3, r3
   20ade:	2b00      	cmp	r3, #0
   20ae0:	d006      	beq.n	20af0 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   20ae2:	4b0e      	ldr	r3, [pc, #56]	; (20b1c <hif_chip_sleep+0x50>)
   20ae4:	785b      	ldrb	r3, [r3, #1]
   20ae6:	b2db      	uxtb	r3, r3
   20ae8:	3b01      	subs	r3, #1
   20aea:	b2da      	uxtb	r2, r3
   20aec:	4b0b      	ldr	r3, [pc, #44]	; (20b1c <hif_chip_sleep+0x50>)
   20aee:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   20af0:	4b0a      	ldr	r3, [pc, #40]	; (20b1c <hif_chip_sleep+0x50>)
   20af2:	785b      	ldrb	r3, [r3, #1]
   20af4:	b2db      	uxtb	r3, r3
   20af6:	2b00      	cmp	r3, #0
   20af8:	d109      	bne.n	20b0e <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   20afa:	4b08      	ldr	r3, [pc, #32]	; (20b1c <hif_chip_sleep+0x50>)
   20afc:	781b      	ldrb	r3, [r3, #0]
   20afe:	b2db      	uxtb	r3, r3
   20b00:	2b00      	cmp	r3, #0
   20b02:	d004      	beq.n	20b0e <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   20b04:	1dfc      	adds	r4, r7, #7
   20b06:	4b06      	ldr	r3, [pc, #24]	; (20b20 <hif_chip_sleep+0x54>)
   20b08:	4798      	blx	r3
   20b0a:	0003      	movs	r3, r0
   20b0c:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   20b0e:	1dfb      	adds	r3, r7, #7
   20b10:	781b      	ldrb	r3, [r3, #0]
   20b12:	b25b      	sxtb	r3, r3
}
   20b14:	0018      	movs	r0, r3
   20b16:	46bd      	mov	sp, r7
   20b18:	b003      	add	sp, #12
   20b1a:	bd90      	pop	{r4, r7, pc}
   20b1c:	2000592c 	.word	0x2000592c
   20b20:	00022395 	.word	0x00022395

00020b24 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   20b24:	b580      	push	{r7, lr}
   20b26:	b082      	sub	sp, #8
   20b28:	af00      	add	r7, sp, #0
   20b2a:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   20b2c:	4b09      	ldr	r3, [pc, #36]	; (20b54 <hif_init+0x30>)
   20b2e:	222c      	movs	r2, #44	; 0x2c
   20b30:	2100      	movs	r1, #0
   20b32:	0018      	movs	r0, r3
   20b34:	4b08      	ldr	r3, [pc, #32]	; (20b58 <hif_init+0x34>)
   20b36:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   20b38:	4b08      	ldr	r3, [pc, #32]	; (20b5c <hif_init+0x38>)
   20b3a:	0018      	movs	r0, r3
   20b3c:	4b08      	ldr	r3, [pc, #32]	; (20b60 <hif_init+0x3c>)
   20b3e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   20b40:	4b08      	ldr	r3, [pc, #32]	; (20b64 <hif_init+0x40>)
   20b42:	0019      	movs	r1, r3
   20b44:	2003      	movs	r0, #3
   20b46:	4b08      	ldr	r3, [pc, #32]	; (20b68 <hif_init+0x44>)
   20b48:	4798      	blx	r3
	return M2M_SUCCESS;
   20b4a:	2300      	movs	r3, #0
}
   20b4c:	0018      	movs	r0, r3
   20b4e:	46bd      	mov	sp, r7
   20b50:	b002      	add	sp, #8
   20b52:	bd80      	pop	{r7, pc}
   20b54:	2000592c 	.word	0x2000592c
   20b58:	0002090d 	.word	0x0002090d
   20b5c:	00020989 	.word	0x00020989
   20b60:	00020049 	.word	0x00020049
   20b64:	00020a19 	.word	0x00020a19
   20b68:	00021609 	.word	0x00021609

00020b6c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   20b6c:	b590      	push	{r4, r7, lr}
   20b6e:	b089      	sub	sp, #36	; 0x24
   20b70:	af00      	add	r7, sp, #0
   20b72:	0004      	movs	r4, r0
   20b74:	0008      	movs	r0, r1
   20b76:	603a      	str	r2, [r7, #0]
   20b78:	0019      	movs	r1, r3
   20b7a:	1dfb      	adds	r3, r7, #7
   20b7c:	1c22      	adds	r2, r4, #0
   20b7e:	701a      	strb	r2, [r3, #0]
   20b80:	1dbb      	adds	r3, r7, #6
   20b82:	1c02      	adds	r2, r0, #0
   20b84:	701a      	strb	r2, [r3, #0]
   20b86:	1d3b      	adds	r3, r7, #4
   20b88:	1c0a      	adds	r2, r1, #0
   20b8a:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   20b8c:	231f      	movs	r3, #31
   20b8e:	18fb      	adds	r3, r7, r3
   20b90:	22ff      	movs	r2, #255	; 0xff
   20b92:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   20b94:	1dbb      	adds	r3, r7, #6
   20b96:	781b      	ldrb	r3, [r3, #0]
   20b98:	227f      	movs	r2, #127	; 0x7f
   20b9a:	4013      	ands	r3, r2
   20b9c:	b2da      	uxtb	r2, r3
   20b9e:	2318      	movs	r3, #24
   20ba0:	18fb      	adds	r3, r7, r3
   20ba2:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   20ba4:	2318      	movs	r3, #24
   20ba6:	18fb      	adds	r3, r7, r3
   20ba8:	1dfa      	adds	r2, r7, #7
   20baa:	7812      	ldrb	r2, [r2, #0]
   20bac:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   20bae:	2318      	movs	r3, #24
   20bb0:	18fb      	adds	r3, r7, r3
   20bb2:	2208      	movs	r2, #8
   20bb4:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   20bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20bb8:	2b00      	cmp	r3, #0
   20bba:	d011      	beq.n	20be0 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   20bbc:	2318      	movs	r3, #24
   20bbe:	18fb      	adds	r3, r7, r3
   20bc0:	885b      	ldrh	r3, [r3, #2]
   20bc2:	b29a      	uxth	r2, r3
   20bc4:	2338      	movs	r3, #56	; 0x38
   20bc6:	18f9      	adds	r1, r7, r3
   20bc8:	2334      	movs	r3, #52	; 0x34
   20bca:	18fb      	adds	r3, r7, r3
   20bcc:	8809      	ldrh	r1, [r1, #0]
   20bce:	881b      	ldrh	r3, [r3, #0]
   20bd0:	18cb      	adds	r3, r1, r3
   20bd2:	b29b      	uxth	r3, r3
   20bd4:	18d3      	adds	r3, r2, r3
   20bd6:	b29a      	uxth	r2, r3
   20bd8:	2318      	movs	r3, #24
   20bda:	18fb      	adds	r3, r7, r3
   20bdc:	805a      	strh	r2, [r3, #2]
   20bde:	e00a      	b.n	20bf6 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   20be0:	2318      	movs	r3, #24
   20be2:	18fb      	adds	r3, r7, r3
   20be4:	885b      	ldrh	r3, [r3, #2]
   20be6:	b29a      	uxth	r2, r3
   20be8:	1d3b      	adds	r3, r7, #4
   20bea:	881b      	ldrh	r3, [r3, #0]
   20bec:	18d3      	adds	r3, r2, r3
   20bee:	b29a      	uxth	r2, r3
   20bf0:	2318      	movs	r3, #24
   20bf2:	18fb      	adds	r3, r7, r3
   20bf4:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   20bf6:	231f      	movs	r3, #31
   20bf8:	18fc      	adds	r4, r7, r3
   20bfa:	4bb2      	ldr	r3, [pc, #712]	; (20ec4 <hif_send+0x358>)
   20bfc:	4798      	blx	r3
   20bfe:	0003      	movs	r3, r0
   20c00:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   20c02:	231f      	movs	r3, #31
   20c04:	18fb      	adds	r3, r7, r3
   20c06:	781b      	ldrb	r3, [r3, #0]
   20c08:	b25b      	sxtb	r3, r3
   20c0a:	2b00      	cmp	r3, #0
   20c0c:	d000      	beq.n	20c10 <hif_send+0xa4>
   20c0e:	e129      	b.n	20e64 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   20c10:	2300      	movs	r3, #0
   20c12:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   20c14:	230e      	movs	r3, #14
   20c16:	18fb      	adds	r3, r7, r3
   20c18:	2200      	movs	r2, #0
   20c1a:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   20c1c:	2300      	movs	r3, #0
   20c1e:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   20c20:	1dfb      	adds	r3, r7, #7
   20c22:	781a      	ldrb	r2, [r3, #0]
   20c24:	697b      	ldr	r3, [r7, #20]
   20c26:	4313      	orrs	r3, r2
   20c28:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   20c2a:	1dbb      	adds	r3, r7, #6
   20c2c:	781b      	ldrb	r3, [r3, #0]
   20c2e:	021a      	lsls	r2, r3, #8
   20c30:	697b      	ldr	r3, [r7, #20]
   20c32:	4313      	orrs	r3, r2
   20c34:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   20c36:	2318      	movs	r3, #24
   20c38:	18fb      	adds	r3, r7, r3
   20c3a:	885b      	ldrh	r3, [r3, #2]
   20c3c:	b29b      	uxth	r3, r3
   20c3e:	041a      	lsls	r2, r3, #16
   20c40:	697b      	ldr	r3, [r7, #20]
   20c42:	4313      	orrs	r3, r2
   20c44:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   20c46:	697b      	ldr	r3, [r7, #20]
   20c48:	221f      	movs	r2, #31
   20c4a:	18bc      	adds	r4, r7, r2
   20c4c:	4a9e      	ldr	r2, [pc, #632]	; (20ec8 <hif_send+0x35c>)
   20c4e:	0019      	movs	r1, r3
   20c50:	0010      	movs	r0, r2
   20c52:	4b9e      	ldr	r3, [pc, #632]	; (20ecc <hif_send+0x360>)
   20c54:	4798      	blx	r3
   20c56:	0003      	movs	r3, r0
   20c58:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   20c5a:	231f      	movs	r3, #31
   20c5c:	18fb      	adds	r3, r7, r3
   20c5e:	781b      	ldrb	r3, [r3, #0]
   20c60:	b25b      	sxtb	r3, r3
   20c62:	2b00      	cmp	r3, #0
   20c64:	d000      	beq.n	20c68 <hif_send+0xfc>
   20c66:	e119      	b.n	20e9c <hif_send+0x330>

		reg = 0UL;
   20c68:	2300      	movs	r3, #0
   20c6a:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   20c6c:	697b      	ldr	r3, [r7, #20]
   20c6e:	2202      	movs	r2, #2
   20c70:	4313      	orrs	r3, r2
   20c72:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   20c74:	697b      	ldr	r3, [r7, #20]
   20c76:	221f      	movs	r2, #31
   20c78:	18bc      	adds	r4, r7, r2
   20c7a:	4a95      	ldr	r2, [pc, #596]	; (20ed0 <hif_send+0x364>)
   20c7c:	0019      	movs	r1, r3
   20c7e:	0010      	movs	r0, r2
   20c80:	4b92      	ldr	r3, [pc, #584]	; (20ecc <hif_send+0x360>)
   20c82:	4798      	blx	r3
   20c84:	0003      	movs	r3, r0
   20c86:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   20c88:	231f      	movs	r3, #31
   20c8a:	18fb      	adds	r3, r7, r3
   20c8c:	781b      	ldrb	r3, [r3, #0]
   20c8e:	b25b      	sxtb	r3, r3
   20c90:	2b00      	cmp	r3, #0
   20c92:	d000      	beq.n	20c96 <hif_send+0x12a>
   20c94:	e104      	b.n	20ea0 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   20c96:	2300      	movs	r3, #0
   20c98:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   20c9a:	230e      	movs	r3, #14
   20c9c:	18fb      	adds	r3, r7, r3
   20c9e:	2200      	movs	r2, #0
   20ca0:	801a      	strh	r2, [r3, #0]
   20ca2:	e050      	b.n	20d46 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   20ca4:	231f      	movs	r3, #31
   20ca6:	18fc      	adds	r4, r7, r3
   20ca8:	2314      	movs	r3, #20
   20caa:	18fb      	adds	r3, r7, r3
   20cac:	4a88      	ldr	r2, [pc, #544]	; (20ed0 <hif_send+0x364>)
   20cae:	0019      	movs	r1, r3
   20cb0:	0010      	movs	r0, r2
   20cb2:	4b88      	ldr	r3, [pc, #544]	; (20ed4 <hif_send+0x368>)
   20cb4:	4798      	blx	r3
   20cb6:	0003      	movs	r3, r0
   20cb8:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   20cba:	231f      	movs	r3, #31
   20cbc:	18fb      	adds	r3, r7, r3
   20cbe:	781b      	ldrb	r3, [r3, #0]
   20cc0:	b25b      	sxtb	r3, r3
   20cc2:	2b00      	cmp	r3, #0
   20cc4:	d147      	bne.n	20d56 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   20cc6:	230e      	movs	r3, #14
   20cc8:	18fb      	adds	r3, r7, r3
   20cca:	881b      	ldrh	r3, [r3, #0]
   20ccc:	b29a      	uxth	r2, r3
   20cce:	23f4      	movs	r3, #244	; 0xf4
   20cd0:	33ff      	adds	r3, #255	; 0xff
   20cd2:	429a      	cmp	r2, r3
   20cd4:	d916      	bls.n	20d04 <hif_send+0x198>
				if(cnt < 501) {
   20cd6:	230e      	movs	r3, #14
   20cd8:	18fb      	adds	r3, r7, r3
   20cda:	881b      	ldrh	r3, [r3, #0]
   20cdc:	b29a      	uxth	r2, r3
   20cde:	23fa      	movs	r3, #250	; 0xfa
   20ce0:	005b      	lsls	r3, r3, #1
   20ce2:	429a      	cmp	r2, r3
   20ce4:	d80b      	bhi.n	20cfe <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   20ce6:	4b7c      	ldr	r3, [pc, #496]	; (20ed8 <hif_send+0x36c>)
   20ce8:	0018      	movs	r0, r3
   20cea:	4b7c      	ldr	r3, [pc, #496]	; (20edc <hif_send+0x370>)
   20cec:	4798      	blx	r3
   20cee:	4b7c      	ldr	r3, [pc, #496]	; (20ee0 <hif_send+0x374>)
   20cf0:	0018      	movs	r0, r3
   20cf2:	4b7a      	ldr	r3, [pc, #488]	; (20edc <hif_send+0x370>)
   20cf4:	4798      	blx	r3
   20cf6:	4b7b      	ldr	r3, [pc, #492]	; (20ee4 <hif_send+0x378>)
   20cf8:	0018      	movs	r0, r3
   20cfa:	4b78      	ldr	r3, [pc, #480]	; (20edc <hif_send+0x370>)
   20cfc:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   20cfe:	2001      	movs	r0, #1
   20d00:	4b79      	ldr	r3, [pc, #484]	; (20ee8 <hif_send+0x37c>)
   20d02:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   20d04:	697b      	ldr	r3, [r7, #20]
   20d06:	2202      	movs	r2, #2
   20d08:	4013      	ands	r3, r2
   20d0a:	d113      	bne.n	20d34 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   20d0c:	231f      	movs	r3, #31
   20d0e:	18fc      	adds	r4, r7, r3
   20d10:	2310      	movs	r3, #16
   20d12:	18fb      	adds	r3, r7, r3
   20d14:	4a75      	ldr	r2, [pc, #468]	; (20eec <hif_send+0x380>)
   20d16:	0019      	movs	r1, r3
   20d18:	0010      	movs	r0, r2
   20d1a:	4b6e      	ldr	r3, [pc, #440]	; (20ed4 <hif_send+0x368>)
   20d1c:	4798      	blx	r3
   20d1e:	0003      	movs	r3, r0
   20d20:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   20d22:	231f      	movs	r3, #31
   20d24:	18fb      	adds	r3, r7, r3
   20d26:	781b      	ldrb	r3, [r3, #0]
   20d28:	b25b      	sxtb	r3, r3
   20d2a:	2b00      	cmp	r3, #0
   20d2c:	d015      	beq.n	20d5a <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   20d2e:	2300      	movs	r3, #0
   20d30:	613b      	str	r3, [r7, #16]
					goto ERR1;
   20d32:	e0bc      	b.n	20eae <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   20d34:	230e      	movs	r3, #14
   20d36:	18fb      	adds	r3, r7, r3
   20d38:	881b      	ldrh	r3, [r3, #0]
   20d3a:	b29b      	uxth	r3, r3
   20d3c:	3301      	adds	r3, #1
   20d3e:	b29a      	uxth	r2, r3
   20d40:	230e      	movs	r3, #14
   20d42:	18fb      	adds	r3, r7, r3
   20d44:	801a      	strh	r2, [r3, #0]
   20d46:	230e      	movs	r3, #14
   20d48:	18fb      	adds	r3, r7, r3
   20d4a:	881b      	ldrh	r3, [r3, #0]
   20d4c:	b29b      	uxth	r3, r3
   20d4e:	4a68      	ldr	r2, [pc, #416]	; (20ef0 <hif_send+0x384>)
   20d50:	4293      	cmp	r3, r2
   20d52:	d9a7      	bls.n	20ca4 <hif_send+0x138>
   20d54:	e002      	b.n	20d5c <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   20d56:	46c0      	nop			; (mov r8, r8)
   20d58:	e000      	b.n	20d5c <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   20d5a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   20d5c:	693b      	ldr	r3, [r7, #16]
   20d5e:	2b00      	cmp	r3, #0
   20d60:	d100      	bne.n	20d64 <hif_send+0x1f8>
   20d62:	e074      	b.n	20e4e <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   20d64:	693b      	ldr	r3, [r7, #16]
   20d66:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   20d68:	2318      	movs	r3, #24
   20d6a:	18fb      	adds	r3, r7, r3
   20d6c:	885b      	ldrh	r3, [r3, #2]
   20d6e:	b29a      	uxth	r2, r3
   20d70:	2318      	movs	r3, #24
   20d72:	18fb      	adds	r3, r7, r3
   20d74:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   20d76:	68bb      	ldr	r3, [r7, #8]
   20d78:	221f      	movs	r2, #31
   20d7a:	18bc      	adds	r4, r7, r2
   20d7c:	2218      	movs	r2, #24
   20d7e:	18b9      	adds	r1, r7, r2
   20d80:	2208      	movs	r2, #8
   20d82:	0018      	movs	r0, r3
   20d84:	4b5b      	ldr	r3, [pc, #364]	; (20ef4 <hif_send+0x388>)
   20d86:	4798      	blx	r3
   20d88:	0003      	movs	r3, r0
   20d8a:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20d8c:	231f      	movs	r3, #31
   20d8e:	18fb      	adds	r3, r7, r3
   20d90:	781b      	ldrb	r3, [r3, #0]
   20d92:	b25b      	sxtb	r3, r3
   20d94:	2b00      	cmp	r3, #0
   20d96:	d000      	beq.n	20d9a <hif_send+0x22e>
   20d98:	e084      	b.n	20ea4 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   20d9a:	68bb      	ldr	r3, [r7, #8]
   20d9c:	3308      	adds	r3, #8
   20d9e:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   20da0:	683b      	ldr	r3, [r7, #0]
   20da2:	2b00      	cmp	r3, #0
   20da4:	d016      	beq.n	20dd4 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   20da6:	68b8      	ldr	r0, [r7, #8]
   20da8:	1d3b      	adds	r3, r7, #4
   20daa:	881a      	ldrh	r2, [r3, #0]
   20dac:	231f      	movs	r3, #31
   20dae:	18fc      	adds	r4, r7, r3
   20db0:	683b      	ldr	r3, [r7, #0]
   20db2:	0019      	movs	r1, r3
   20db4:	4b4f      	ldr	r3, [pc, #316]	; (20ef4 <hif_send+0x388>)
   20db6:	4798      	blx	r3
   20db8:	0003      	movs	r3, r0
   20dba:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20dbc:	231f      	movs	r3, #31
   20dbe:	18fb      	adds	r3, r7, r3
   20dc0:	781b      	ldrb	r3, [r3, #0]
   20dc2:	b25b      	sxtb	r3, r3
   20dc4:	2b00      	cmp	r3, #0
   20dc6:	d000      	beq.n	20dca <hif_send+0x25e>
   20dc8:	e06e      	b.n	20ea8 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   20dca:	1d3b      	adds	r3, r7, #4
   20dcc:	881a      	ldrh	r2, [r3, #0]
   20dce:	68bb      	ldr	r3, [r7, #8]
   20dd0:	18d3      	adds	r3, r2, r3
   20dd2:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   20dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20dd6:	2b00      	cmp	r3, #0
   20dd8:	d021      	beq.n	20e1e <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   20dda:	2338      	movs	r3, #56	; 0x38
   20ddc:	18fb      	adds	r3, r7, r3
   20dde:	881a      	ldrh	r2, [r3, #0]
   20de0:	1d3b      	adds	r3, r7, #4
   20de2:	881b      	ldrh	r3, [r3, #0]
   20de4:	1ad3      	subs	r3, r2, r3
   20de6:	001a      	movs	r2, r3
   20de8:	68bb      	ldr	r3, [r7, #8]
   20dea:	18d3      	adds	r3, r2, r3
   20dec:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   20dee:	68b8      	ldr	r0, [r7, #8]
   20df0:	2334      	movs	r3, #52	; 0x34
   20df2:	18fb      	adds	r3, r7, r3
   20df4:	881a      	ldrh	r2, [r3, #0]
   20df6:	231f      	movs	r3, #31
   20df8:	18fc      	adds	r4, r7, r3
   20dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20dfc:	0019      	movs	r1, r3
   20dfe:	4b3d      	ldr	r3, [pc, #244]	; (20ef4 <hif_send+0x388>)
   20e00:	4798      	blx	r3
   20e02:	0003      	movs	r3, r0
   20e04:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20e06:	231f      	movs	r3, #31
   20e08:	18fb      	adds	r3, r7, r3
   20e0a:	781b      	ldrb	r3, [r3, #0]
   20e0c:	b25b      	sxtb	r3, r3
   20e0e:	2b00      	cmp	r3, #0
   20e10:	d14c      	bne.n	20eac <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   20e12:	2334      	movs	r3, #52	; 0x34
   20e14:	18fb      	adds	r3, r7, r3
   20e16:	881a      	ldrh	r2, [r3, #0]
   20e18:	68bb      	ldr	r3, [r7, #8]
   20e1a:	18d3      	adds	r3, r2, r3
   20e1c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   20e1e:	693b      	ldr	r3, [r7, #16]
   20e20:	009b      	lsls	r3, r3, #2
   20e22:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   20e24:	697b      	ldr	r3, [r7, #20]
   20e26:	2202      	movs	r2, #2
   20e28:	4313      	orrs	r3, r2
   20e2a:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   20e2c:	697b      	ldr	r3, [r7, #20]
   20e2e:	221f      	movs	r2, #31
   20e30:	18bc      	adds	r4, r7, r2
   20e32:	4a31      	ldr	r2, [pc, #196]	; (20ef8 <hif_send+0x38c>)
   20e34:	0019      	movs	r1, r3
   20e36:	0010      	movs	r0, r2
   20e38:	4b24      	ldr	r3, [pc, #144]	; (20ecc <hif_send+0x360>)
   20e3a:	4798      	blx	r3
   20e3c:	0003      	movs	r3, r0
   20e3e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20e40:	231f      	movs	r3, #31
   20e42:	18fb      	adds	r3, r7, r3
   20e44:	781b      	ldrb	r3, [r3, #0]
   20e46:	b25b      	sxtb	r3, r3
   20e48:	2b00      	cmp	r3, #0
   20e4a:	d01c      	beq.n	20e86 <hif_send+0x31a>
   20e4c:	e02f      	b.n	20eae <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   20e4e:	231f      	movs	r3, #31
   20e50:	18fc      	adds	r4, r7, r3
   20e52:	4b2a      	ldr	r3, [pc, #168]	; (20efc <hif_send+0x390>)
   20e54:	4798      	blx	r3
   20e56:	0003      	movs	r3, r0
   20e58:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   20e5a:	231f      	movs	r3, #31
   20e5c:	18fb      	adds	r3, r7, r3
   20e5e:	22fd      	movs	r2, #253	; 0xfd
   20e60:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   20e62:	e026      	b.n	20eb2 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   20e64:	2398      	movs	r3, #152	; 0x98
   20e66:	33ff      	adds	r3, #255	; 0xff
   20e68:	001a      	movs	r2, r3
   20e6a:	4925      	ldr	r1, [pc, #148]	; (20f00 <hif_send+0x394>)
   20e6c:	4b25      	ldr	r3, [pc, #148]	; (20f04 <hif_send+0x398>)
   20e6e:	0018      	movs	r0, r3
   20e70:	4b1a      	ldr	r3, [pc, #104]	; (20edc <hif_send+0x370>)
   20e72:	4798      	blx	r3
   20e74:	4b24      	ldr	r3, [pc, #144]	; (20f08 <hif_send+0x39c>)
   20e76:	0018      	movs	r0, r3
   20e78:	4b18      	ldr	r3, [pc, #96]	; (20edc <hif_send+0x370>)
   20e7a:	4798      	blx	r3
   20e7c:	4b19      	ldr	r3, [pc, #100]	; (20ee4 <hif_send+0x378>)
   20e7e:	0018      	movs	r0, r3
   20e80:	4b16      	ldr	r3, [pc, #88]	; (20edc <hif_send+0x370>)
   20e82:	4798      	blx	r3
		goto ERR2;
   20e84:	e015      	b.n	20eb2 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   20e86:	231f      	movs	r3, #31
   20e88:	18fc      	adds	r4, r7, r3
   20e8a:	4b1c      	ldr	r3, [pc, #112]	; (20efc <hif_send+0x390>)
   20e8c:	4798      	blx	r3
   20e8e:	0003      	movs	r3, r0
   20e90:	7023      	strb	r3, [r4, #0]
	return ret;
   20e92:	231f      	movs	r3, #31
   20e94:	18fb      	adds	r3, r7, r3
   20e96:	781b      	ldrb	r3, [r3, #0]
   20e98:	b25b      	sxtb	r3, r3
   20e9a:	e00e      	b.n	20eba <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   20e9c:	46c0      	nop			; (mov r8, r8)
   20e9e:	e006      	b.n	20eae <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   20ea0:	46c0      	nop			; (mov r8, r8)
   20ea2:	e004      	b.n	20eae <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   20ea4:	46c0      	nop			; (mov r8, r8)
   20ea6:	e002      	b.n	20eae <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20ea8:	46c0      	nop			; (mov r8, r8)
   20eaa:	e000      	b.n	20eae <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20eac:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   20eae:	4b17      	ldr	r3, [pc, #92]	; (20f0c <hif_send+0x3a0>)
   20eb0:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   20eb2:	231f      	movs	r3, #31
   20eb4:	18fb      	adds	r3, r7, r3
   20eb6:	781b      	ldrb	r3, [r3, #0]
   20eb8:	b25b      	sxtb	r3, r3
}
   20eba:	0018      	movs	r0, r3
   20ebc:	46bd      	mov	sp, r7
   20ebe:	b009      	add	sp, #36	; 0x24
   20ec0:	bd90      	pop	{r4, r7, pc}
   20ec2:	46c0      	nop			; (mov r8, r8)
   20ec4:	00020a35 	.word	0x00020a35
   20ec8:	0000108c 	.word	0x0000108c
   20ecc:	000229c1 	.word	0x000229c1
   20ed0:	00001078 	.word	0x00001078
   20ed4:	0002299d 	.word	0x0002299d
   20ed8:	00038064 	.word	0x00038064
   20edc:	0001dbd9 	.word	0x0001dbd9
   20ee0:	00038070 	.word	0x00038070
   20ee4:	00038084 	.word	0x00038084
   20ee8:	0002002d 	.word	0x0002002d
   20eec:	00150400 	.word	0x00150400
   20ef0:	000003e7 	.word	0x000003e7
   20ef4:	00022b09 	.word	0x00022b09
   20ef8:	0000106c 	.word	0x0000106c
   20efc:	00020acd 	.word	0x00020acd
   20f00:	0003838c 	.word	0x0003838c
   20f04:	00038088 	.word	0x00038088
   20f08:	0003809c 	.word	0x0003809c
   20f0c:	00020aa5 	.word	0x00020aa5

00020f10 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   20f10:	b590      	push	{r4, r7, lr}
   20f12:	b087      	sub	sp, #28
   20f14:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   20f16:	230f      	movs	r3, #15
   20f18:	18fb      	adds	r3, r7, r3
   20f1a:	2200      	movs	r2, #0
   20f1c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   20f1e:	230f      	movs	r3, #15
   20f20:	18fc      	adds	r4, r7, r3
   20f22:	2308      	movs	r3, #8
   20f24:	18fb      	adds	r3, r7, r3
   20f26:	4adc      	ldr	r2, [pc, #880]	; (21298 <hif_isr+0x388>)
   20f28:	0019      	movs	r1, r3
   20f2a:	0010      	movs	r0, r2
   20f2c:	4bdb      	ldr	r3, [pc, #876]	; (2129c <hif_isr+0x38c>)
   20f2e:	4798      	blx	r3
   20f30:	0003      	movs	r3, r0
   20f32:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   20f34:	230f      	movs	r3, #15
   20f36:	18fb      	adds	r3, r7, r3
   20f38:	781b      	ldrb	r3, [r3, #0]
   20f3a:	b25b      	sxtb	r3, r3
   20f3c:	2b00      	cmp	r3, #0
   20f3e:	d000      	beq.n	20f42 <hif_isr+0x32>
   20f40:	e21e      	b.n	21380 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   20f42:	68bb      	ldr	r3, [r7, #8]
   20f44:	2201      	movs	r2, #1
   20f46:	4013      	ands	r3, r2
   20f48:	d100      	bne.n	20f4c <hif_isr+0x3c>
   20f4a:	e204      	b.n	21356 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   20f4c:	2000      	movs	r0, #0
   20f4e:	4bd4      	ldr	r3, [pc, #848]	; (212a0 <hif_isr+0x390>)
   20f50:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   20f52:	68bb      	ldr	r3, [r7, #8]
   20f54:	2201      	movs	r2, #1
   20f56:	4393      	bics	r3, r2
   20f58:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   20f5a:	68bb      	ldr	r3, [r7, #8]
   20f5c:	220f      	movs	r2, #15
   20f5e:	18bc      	adds	r4, r7, r2
   20f60:	4acd      	ldr	r2, [pc, #820]	; (21298 <hif_isr+0x388>)
   20f62:	0019      	movs	r1, r3
   20f64:	0010      	movs	r0, r2
   20f66:	4bcf      	ldr	r3, [pc, #828]	; (212a4 <hif_isr+0x394>)
   20f68:	4798      	blx	r3
   20f6a:	0003      	movs	r3, r0
   20f6c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20f6e:	230f      	movs	r3, #15
   20f70:	18fb      	adds	r3, r7, r3
   20f72:	781b      	ldrb	r3, [r3, #0]
   20f74:	b25b      	sxtb	r3, r3
   20f76:	2b00      	cmp	r3, #0
   20f78:	d000      	beq.n	20f7c <hif_isr+0x6c>
   20f7a:	e210      	b.n	2139e <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   20f7c:	4bca      	ldr	r3, [pc, #808]	; (212a8 <hif_isr+0x398>)
   20f7e:	2201      	movs	r2, #1
   20f80:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   20f82:	68bb      	ldr	r3, [r7, #8]
   20f84:	089b      	lsrs	r3, r3, #2
   20f86:	b29a      	uxth	r2, r3
   20f88:	230c      	movs	r3, #12
   20f8a:	18fb      	adds	r3, r7, r3
   20f8c:	0512      	lsls	r2, r2, #20
   20f8e:	0d12      	lsrs	r2, r2, #20
   20f90:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   20f92:	230c      	movs	r3, #12
   20f94:	18fb      	adds	r3, r7, r3
   20f96:	881b      	ldrh	r3, [r3, #0]
   20f98:	2b00      	cmp	r3, #0
   20f9a:	d100      	bne.n	20f9e <hif_isr+0x8e>
   20f9c:	e1c8      	b.n	21330 <hif_isr+0x420>
				uint32 address = 0;
   20f9e:	2300      	movs	r3, #0
   20fa0:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   20fa2:	230f      	movs	r3, #15
   20fa4:	18fc      	adds	r4, r7, r3
   20fa6:	003b      	movs	r3, r7
   20fa8:	4ac0      	ldr	r2, [pc, #768]	; (212ac <hif_isr+0x39c>)
   20faa:	0019      	movs	r1, r3
   20fac:	0010      	movs	r0, r2
   20fae:	4bbb      	ldr	r3, [pc, #748]	; (2129c <hif_isr+0x38c>)
   20fb0:	4798      	blx	r3
   20fb2:	0003      	movs	r3, r0
   20fb4:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   20fb6:	230f      	movs	r3, #15
   20fb8:	18fb      	adds	r3, r7, r3
   20fba:	781b      	ldrb	r3, [r3, #0]
   20fbc:	b25b      	sxtb	r3, r3
   20fbe:	2b00      	cmp	r3, #0
   20fc0:	d012      	beq.n	20fe8 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   20fc2:	23e4      	movs	r3, #228	; 0xe4
   20fc4:	005a      	lsls	r2, r3, #1
   20fc6:	49ba      	ldr	r1, [pc, #744]	; (212b0 <hif_isr+0x3a0>)
   20fc8:	4bba      	ldr	r3, [pc, #744]	; (212b4 <hif_isr+0x3a4>)
   20fca:	0018      	movs	r0, r3
   20fcc:	4bba      	ldr	r3, [pc, #744]	; (212b8 <hif_isr+0x3a8>)
   20fce:	4798      	blx	r3
   20fd0:	4bba      	ldr	r3, [pc, #744]	; (212bc <hif_isr+0x3ac>)
   20fd2:	0018      	movs	r0, r3
   20fd4:	4bb8      	ldr	r3, [pc, #736]	; (212b8 <hif_isr+0x3a8>)
   20fd6:	4798      	blx	r3
   20fd8:	4bb9      	ldr	r3, [pc, #740]	; (212c0 <hif_isr+0x3b0>)
   20fda:	0018      	movs	r0, r3
   20fdc:	4bb6      	ldr	r3, [pc, #728]	; (212b8 <hif_isr+0x3a8>)
   20fde:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   20fe0:	2001      	movs	r0, #1
   20fe2:	4baf      	ldr	r3, [pc, #700]	; (212a0 <hif_isr+0x390>)
   20fe4:	4798      	blx	r3
					goto ERR1;
   20fe6:	e1db      	b.n	213a0 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   20fe8:	683a      	ldr	r2, [r7, #0]
   20fea:	4baf      	ldr	r3, [pc, #700]	; (212a8 <hif_isr+0x398>)
   20fec:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   20fee:	230c      	movs	r3, #12
   20ff0:	18fb      	adds	r3, r7, r3
   20ff2:	881a      	ldrh	r2, [r3, #0]
   20ff4:	4bac      	ldr	r3, [pc, #688]	; (212a8 <hif_isr+0x398>)
   20ff6:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   20ff8:	683b      	ldr	r3, [r7, #0]
   20ffa:	220f      	movs	r2, #15
   20ffc:	18bc      	adds	r4, r7, r2
   20ffe:	1d39      	adds	r1, r7, #4
   21000:	2204      	movs	r2, #4
   21002:	0018      	movs	r0, r3
   21004:	4baf      	ldr	r3, [pc, #700]	; (212c4 <hif_isr+0x3b4>)
   21006:	4798      	blx	r3
   21008:	0003      	movs	r3, r0
   2100a:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   2100c:	1d3b      	adds	r3, r7, #4
   2100e:	885b      	ldrh	r3, [r3, #2]
   21010:	b29a      	uxth	r2, r3
   21012:	1d3b      	adds	r3, r7, #4
   21014:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   21016:	230f      	movs	r3, #15
   21018:	18fb      	adds	r3, r7, r3
   2101a:	781b      	ldrb	r3, [r3, #0]
   2101c:	b25b      	sxtb	r3, r3
   2101e:	2b00      	cmp	r3, #0
   21020:	d012      	beq.n	21048 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   21022:	23e9      	movs	r3, #233	; 0xe9
   21024:	005a      	lsls	r2, r3, #1
   21026:	49a2      	ldr	r1, [pc, #648]	; (212b0 <hif_isr+0x3a0>)
   21028:	4ba2      	ldr	r3, [pc, #648]	; (212b4 <hif_isr+0x3a4>)
   2102a:	0018      	movs	r0, r3
   2102c:	4ba2      	ldr	r3, [pc, #648]	; (212b8 <hif_isr+0x3a8>)
   2102e:	4798      	blx	r3
   21030:	4ba5      	ldr	r3, [pc, #660]	; (212c8 <hif_isr+0x3b8>)
   21032:	0018      	movs	r0, r3
   21034:	4ba0      	ldr	r3, [pc, #640]	; (212b8 <hif_isr+0x3a8>)
   21036:	4798      	blx	r3
   21038:	4ba1      	ldr	r3, [pc, #644]	; (212c0 <hif_isr+0x3b0>)
   2103a:	0018      	movs	r0, r3
   2103c:	4b9e      	ldr	r3, [pc, #632]	; (212b8 <hif_isr+0x3a8>)
   2103e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21040:	2001      	movs	r0, #1
   21042:	4b97      	ldr	r3, [pc, #604]	; (212a0 <hif_isr+0x390>)
   21044:	4798      	blx	r3
					goto ERR1;
   21046:	e1ab      	b.n	213a0 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   21048:	1d3b      	adds	r3, r7, #4
   2104a:	885b      	ldrh	r3, [r3, #2]
   2104c:	b29b      	uxth	r3, r3
   2104e:	220c      	movs	r2, #12
   21050:	18ba      	adds	r2, r7, r2
   21052:	8812      	ldrh	r2, [r2, #0]
   21054:	429a      	cmp	r2, r3
   21056:	d02f      	beq.n	210b8 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   21058:	230c      	movs	r3, #12
   2105a:	18fb      	adds	r3, r7, r3
   2105c:	881b      	ldrh	r3, [r3, #0]
   2105e:	1d3a      	adds	r2, r7, #4
   21060:	8852      	ldrh	r2, [r2, #2]
   21062:	b292      	uxth	r2, r2
   21064:	1a9b      	subs	r3, r3, r2
   21066:	2b04      	cmp	r3, #4
   21068:	dd26      	ble.n	210b8 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   2106a:	23dc      	movs	r3, #220	; 0xdc
   2106c:	33ff      	adds	r3, #255	; 0xff
   2106e:	001a      	movs	r2, r3
   21070:	498f      	ldr	r1, [pc, #572]	; (212b0 <hif_isr+0x3a0>)
   21072:	4b90      	ldr	r3, [pc, #576]	; (212b4 <hif_isr+0x3a4>)
   21074:	0018      	movs	r0, r3
   21076:	4b90      	ldr	r3, [pc, #576]	; (212b8 <hif_isr+0x3a8>)
   21078:	4798      	blx	r3
   2107a:	230c      	movs	r3, #12
   2107c:	18fb      	adds	r3, r7, r3
   2107e:	8819      	ldrh	r1, [r3, #0]
   21080:	1d3b      	adds	r3, r7, #4
   21082:	885b      	ldrh	r3, [r3, #2]
   21084:	b29b      	uxth	r3, r3
   21086:	001a      	movs	r2, r3
   21088:	1d3b      	adds	r3, r7, #4
   2108a:	781b      	ldrb	r3, [r3, #0]
   2108c:	b2db      	uxtb	r3, r3
   2108e:	001c      	movs	r4, r3
   21090:	1d3b      	adds	r3, r7, #4
   21092:	785b      	ldrb	r3, [r3, #1]
   21094:	b2db      	uxtb	r3, r3
   21096:	488d      	ldr	r0, [pc, #564]	; (212cc <hif_isr+0x3bc>)
   21098:	9300      	str	r3, [sp, #0]
   2109a:	0023      	movs	r3, r4
   2109c:	4c86      	ldr	r4, [pc, #536]	; (212b8 <hif_isr+0x3a8>)
   2109e:	47a0      	blx	r4
   210a0:	4b87      	ldr	r3, [pc, #540]	; (212c0 <hif_isr+0x3b0>)
   210a2:	0018      	movs	r0, r3
   210a4:	4b84      	ldr	r3, [pc, #528]	; (212b8 <hif_isr+0x3a8>)
   210a6:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   210a8:	2001      	movs	r0, #1
   210aa:	4b7d      	ldr	r3, [pc, #500]	; (212a0 <hif_isr+0x390>)
   210ac:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   210ae:	230f      	movs	r3, #15
   210b0:	18fb      	adds	r3, r7, r3
   210b2:	22fa      	movs	r2, #250	; 0xfa
   210b4:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   210b6:	e173      	b.n	213a0 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   210b8:	1d3b      	adds	r3, r7, #4
   210ba:	781b      	ldrb	r3, [r3, #0]
   210bc:	b2db      	uxtb	r3, r3
   210be:	2b01      	cmp	r3, #1
   210c0:	d122      	bne.n	21108 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   210c2:	4b79      	ldr	r3, [pc, #484]	; (212a8 <hif_isr+0x398>)
   210c4:	691b      	ldr	r3, [r3, #16]
   210c6:	2b00      	cmp	r3, #0
   210c8:	d00d      	beq.n	210e6 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   210ca:	4b77      	ldr	r3, [pc, #476]	; (212a8 <hif_isr+0x398>)
   210cc:	691b      	ldr	r3, [r3, #16]
   210ce:	1d3a      	adds	r2, r7, #4
   210d0:	7852      	ldrb	r2, [r2, #1]
   210d2:	b2d0      	uxtb	r0, r2
   210d4:	1d3a      	adds	r2, r7, #4
   210d6:	8852      	ldrh	r2, [r2, #2]
   210d8:	b292      	uxth	r2, r2
   210da:	3a08      	subs	r2, #8
   210dc:	b291      	uxth	r1, r2
   210de:	683a      	ldr	r2, [r7, #0]
   210e0:	3208      	adds	r2, #8
   210e2:	4798      	blx	r3
   210e4:	e102      	b.n	212ec <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   210e6:	23e8      	movs	r3, #232	; 0xe8
   210e8:	33ff      	adds	r3, #255	; 0xff
   210ea:	001a      	movs	r2, r3
   210ec:	4970      	ldr	r1, [pc, #448]	; (212b0 <hif_isr+0x3a0>)
   210ee:	4b71      	ldr	r3, [pc, #452]	; (212b4 <hif_isr+0x3a4>)
   210f0:	0018      	movs	r0, r3
   210f2:	4b71      	ldr	r3, [pc, #452]	; (212b8 <hif_isr+0x3a8>)
   210f4:	4798      	blx	r3
   210f6:	4b76      	ldr	r3, [pc, #472]	; (212d0 <hif_isr+0x3c0>)
   210f8:	0018      	movs	r0, r3
   210fa:	4b6f      	ldr	r3, [pc, #444]	; (212b8 <hif_isr+0x3a8>)
   210fc:	4798      	blx	r3
   210fe:	4b70      	ldr	r3, [pc, #448]	; (212c0 <hif_isr+0x3b0>)
   21100:	0018      	movs	r0, r3
   21102:	4b6d      	ldr	r3, [pc, #436]	; (212b8 <hif_isr+0x3a8>)
   21104:	4798      	blx	r3
   21106:	e0f1      	b.n	212ec <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   21108:	1d3b      	adds	r3, r7, #4
   2110a:	781b      	ldrb	r3, [r3, #0]
   2110c:	b2db      	uxtb	r3, r3
   2110e:	2b02      	cmp	r3, #2
   21110:	d122      	bne.n	21158 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   21112:	4b65      	ldr	r3, [pc, #404]	; (212a8 <hif_isr+0x398>)
   21114:	695b      	ldr	r3, [r3, #20]
   21116:	2b00      	cmp	r3, #0
   21118:	d00d      	beq.n	21136 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2111a:	4b63      	ldr	r3, [pc, #396]	; (212a8 <hif_isr+0x398>)
   2111c:	695b      	ldr	r3, [r3, #20]
   2111e:	1d3a      	adds	r2, r7, #4
   21120:	7852      	ldrb	r2, [r2, #1]
   21122:	b2d0      	uxtb	r0, r2
   21124:	1d3a      	adds	r2, r7, #4
   21126:	8852      	ldrh	r2, [r2, #2]
   21128:	b292      	uxth	r2, r2
   2112a:	3a08      	subs	r2, #8
   2112c:	b291      	uxth	r1, r2
   2112e:	683a      	ldr	r2, [r7, #0]
   21130:	3208      	adds	r2, #8
   21132:	4798      	blx	r3
   21134:	e0da      	b.n	212ec <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   21136:	23f0      	movs	r3, #240	; 0xf0
   21138:	33ff      	adds	r3, #255	; 0xff
   2113a:	001a      	movs	r2, r3
   2113c:	495c      	ldr	r1, [pc, #368]	; (212b0 <hif_isr+0x3a0>)
   2113e:	4b5d      	ldr	r3, [pc, #372]	; (212b4 <hif_isr+0x3a4>)
   21140:	0018      	movs	r0, r3
   21142:	4b5d      	ldr	r3, [pc, #372]	; (212b8 <hif_isr+0x3a8>)
   21144:	4798      	blx	r3
   21146:	4b63      	ldr	r3, [pc, #396]	; (212d4 <hif_isr+0x3c4>)
   21148:	0018      	movs	r0, r3
   2114a:	4b5b      	ldr	r3, [pc, #364]	; (212b8 <hif_isr+0x3a8>)
   2114c:	4798      	blx	r3
   2114e:	4b5c      	ldr	r3, [pc, #368]	; (212c0 <hif_isr+0x3b0>)
   21150:	0018      	movs	r0, r3
   21152:	4b59      	ldr	r3, [pc, #356]	; (212b8 <hif_isr+0x3a8>)
   21154:	4798      	blx	r3
   21156:	e0c9      	b.n	212ec <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   21158:	1d3b      	adds	r3, r7, #4
   2115a:	781b      	ldrb	r3, [r3, #0]
   2115c:	b2db      	uxtb	r3, r3
   2115e:	2b04      	cmp	r3, #4
   21160:	d122      	bne.n	211a8 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   21162:	4b51      	ldr	r3, [pc, #324]	; (212a8 <hif_isr+0x398>)
   21164:	699b      	ldr	r3, [r3, #24]
   21166:	2b00      	cmp	r3, #0
   21168:	d00d      	beq.n	21186 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2116a:	4b4f      	ldr	r3, [pc, #316]	; (212a8 <hif_isr+0x398>)
   2116c:	699b      	ldr	r3, [r3, #24]
   2116e:	1d3a      	adds	r2, r7, #4
   21170:	7852      	ldrb	r2, [r2, #1]
   21172:	b2d0      	uxtb	r0, r2
   21174:	1d3a      	adds	r2, r7, #4
   21176:	8852      	ldrh	r2, [r2, #2]
   21178:	b292      	uxth	r2, r2
   2117a:	3a08      	subs	r2, #8
   2117c:	b291      	uxth	r1, r2
   2117e:	683a      	ldr	r2, [r7, #0]
   21180:	3208      	adds	r2, #8
   21182:	4798      	blx	r3
   21184:	e0b2      	b.n	212ec <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   21186:	23f8      	movs	r3, #248	; 0xf8
   21188:	33ff      	adds	r3, #255	; 0xff
   2118a:	001a      	movs	r2, r3
   2118c:	4948      	ldr	r1, [pc, #288]	; (212b0 <hif_isr+0x3a0>)
   2118e:	4b49      	ldr	r3, [pc, #292]	; (212b4 <hif_isr+0x3a4>)
   21190:	0018      	movs	r0, r3
   21192:	4b49      	ldr	r3, [pc, #292]	; (212b8 <hif_isr+0x3a8>)
   21194:	4798      	blx	r3
   21196:	4b50      	ldr	r3, [pc, #320]	; (212d8 <hif_isr+0x3c8>)
   21198:	0018      	movs	r0, r3
   2119a:	4b47      	ldr	r3, [pc, #284]	; (212b8 <hif_isr+0x3a8>)
   2119c:	4798      	blx	r3
   2119e:	4b48      	ldr	r3, [pc, #288]	; (212c0 <hif_isr+0x3b0>)
   211a0:	0018      	movs	r0, r3
   211a2:	4b45      	ldr	r3, [pc, #276]	; (212b8 <hif_isr+0x3a8>)
   211a4:	4798      	blx	r3
   211a6:	e0a1      	b.n	212ec <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   211a8:	1d3b      	adds	r3, r7, #4
   211aa:	781b      	ldrb	r3, [r3, #0]
   211ac:	b2db      	uxtb	r3, r3
   211ae:	2b06      	cmp	r3, #6
   211b0:	d121      	bne.n	211f6 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   211b2:	4b3d      	ldr	r3, [pc, #244]	; (212a8 <hif_isr+0x398>)
   211b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   211b6:	2b00      	cmp	r3, #0
   211b8:	d00d      	beq.n	211d6 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   211ba:	4b3b      	ldr	r3, [pc, #236]	; (212a8 <hif_isr+0x398>)
   211bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   211be:	1d3a      	adds	r2, r7, #4
   211c0:	7852      	ldrb	r2, [r2, #1]
   211c2:	b2d0      	uxtb	r0, r2
   211c4:	1d3a      	adds	r2, r7, #4
   211c6:	8852      	ldrh	r2, [r2, #2]
   211c8:	b292      	uxth	r2, r2
   211ca:	3a08      	subs	r2, #8
   211cc:	b291      	uxth	r1, r2
   211ce:	683a      	ldr	r2, [r7, #0]
   211d0:	3208      	adds	r2, #8
   211d2:	4798      	blx	r3
   211d4:	e08a      	b.n	212ec <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   211d6:	2380      	movs	r3, #128	; 0x80
   211d8:	009a      	lsls	r2, r3, #2
   211da:	4935      	ldr	r1, [pc, #212]	; (212b0 <hif_isr+0x3a0>)
   211dc:	4b35      	ldr	r3, [pc, #212]	; (212b4 <hif_isr+0x3a4>)
   211de:	0018      	movs	r0, r3
   211e0:	4b35      	ldr	r3, [pc, #212]	; (212b8 <hif_isr+0x3a8>)
   211e2:	4798      	blx	r3
   211e4:	4b3d      	ldr	r3, [pc, #244]	; (212dc <hif_isr+0x3cc>)
   211e6:	0018      	movs	r0, r3
   211e8:	4b33      	ldr	r3, [pc, #204]	; (212b8 <hif_isr+0x3a8>)
   211ea:	4798      	blx	r3
   211ec:	4b34      	ldr	r3, [pc, #208]	; (212c0 <hif_isr+0x3b0>)
   211ee:	0018      	movs	r0, r3
   211f0:	4b31      	ldr	r3, [pc, #196]	; (212b8 <hif_isr+0x3a8>)
   211f2:	4798      	blx	r3
   211f4:	e07a      	b.n	212ec <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   211f6:	1d3b      	adds	r3, r7, #4
   211f8:	781b      	ldrb	r3, [r3, #0]
   211fa:	b2db      	uxtb	r3, r3
   211fc:	2b07      	cmp	r3, #7
   211fe:	d120      	bne.n	21242 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   21200:	4b29      	ldr	r3, [pc, #164]	; (212a8 <hif_isr+0x398>)
   21202:	69db      	ldr	r3, [r3, #28]
   21204:	2b00      	cmp	r3, #0
   21206:	d00d      	beq.n	21224 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21208:	4b27      	ldr	r3, [pc, #156]	; (212a8 <hif_isr+0x398>)
   2120a:	69db      	ldr	r3, [r3, #28]
   2120c:	1d3a      	adds	r2, r7, #4
   2120e:	7852      	ldrb	r2, [r2, #1]
   21210:	b2d0      	uxtb	r0, r2
   21212:	1d3a      	adds	r2, r7, #4
   21214:	8852      	ldrh	r2, [r2, #2]
   21216:	b292      	uxth	r2, r2
   21218:	3a08      	subs	r2, #8
   2121a:	b291      	uxth	r1, r2
   2121c:	683a      	ldr	r2, [r7, #0]
   2121e:	3208      	adds	r2, #8
   21220:	4798      	blx	r3
   21222:	e063      	b.n	212ec <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   21224:	4a2e      	ldr	r2, [pc, #184]	; (212e0 <hif_isr+0x3d0>)
   21226:	4922      	ldr	r1, [pc, #136]	; (212b0 <hif_isr+0x3a0>)
   21228:	4b22      	ldr	r3, [pc, #136]	; (212b4 <hif_isr+0x3a4>)
   2122a:	0018      	movs	r0, r3
   2122c:	4b22      	ldr	r3, [pc, #136]	; (212b8 <hif_isr+0x3a8>)
   2122e:	4798      	blx	r3
   21230:	4b2c      	ldr	r3, [pc, #176]	; (212e4 <hif_isr+0x3d4>)
   21232:	0018      	movs	r0, r3
   21234:	4b20      	ldr	r3, [pc, #128]	; (212b8 <hif_isr+0x3a8>)
   21236:	4798      	blx	r3
   21238:	4b21      	ldr	r3, [pc, #132]	; (212c0 <hif_isr+0x3b0>)
   2123a:	0018      	movs	r0, r3
   2123c:	4b1e      	ldr	r3, [pc, #120]	; (212b8 <hif_isr+0x3a8>)
   2123e:	4798      	blx	r3
   21240:	e054      	b.n	212ec <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   21242:	1d3b      	adds	r3, r7, #4
   21244:	781b      	ldrb	r3, [r3, #0]
   21246:	b2db      	uxtb	r3, r3
   21248:	2b05      	cmp	r3, #5
   2124a:	d111      	bne.n	21270 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   2124c:	4b16      	ldr	r3, [pc, #88]	; (212a8 <hif_isr+0x398>)
   2124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21250:	2b00      	cmp	r3, #0
   21252:	d04b      	beq.n	212ec <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21254:	4b14      	ldr	r3, [pc, #80]	; (212a8 <hif_isr+0x398>)
   21256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21258:	1d3a      	adds	r2, r7, #4
   2125a:	7852      	ldrb	r2, [r2, #1]
   2125c:	b2d0      	uxtb	r0, r2
   2125e:	1d3a      	adds	r2, r7, #4
   21260:	8852      	ldrh	r2, [r2, #2]
   21262:	b292      	uxth	r2, r2
   21264:	3a08      	subs	r2, #8
   21266:	b291      	uxth	r1, r2
   21268:	683a      	ldr	r2, [r7, #0]
   2126a:	3208      	adds	r2, #8
   2126c:	4798      	blx	r3
   2126e:	e03d      	b.n	212ec <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   21270:	2384      	movs	r3, #132	; 0x84
   21272:	009a      	lsls	r2, r3, #2
   21274:	490e      	ldr	r1, [pc, #56]	; (212b0 <hif_isr+0x3a0>)
   21276:	4b0f      	ldr	r3, [pc, #60]	; (212b4 <hif_isr+0x3a4>)
   21278:	0018      	movs	r0, r3
   2127a:	4b0f      	ldr	r3, [pc, #60]	; (212b8 <hif_isr+0x3a8>)
   2127c:	4798      	blx	r3
   2127e:	4b1a      	ldr	r3, [pc, #104]	; (212e8 <hif_isr+0x3d8>)
   21280:	0018      	movs	r0, r3
   21282:	4b0d      	ldr	r3, [pc, #52]	; (212b8 <hif_isr+0x3a8>)
   21284:	4798      	blx	r3
   21286:	4b0e      	ldr	r3, [pc, #56]	; (212c0 <hif_isr+0x3b0>)
   21288:	0018      	movs	r0, r3
   2128a:	4b0b      	ldr	r3, [pc, #44]	; (212b8 <hif_isr+0x3a8>)
   2128c:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   2128e:	230f      	movs	r3, #15
   21290:	18fb      	adds	r3, r7, r3
   21292:	22fa      	movs	r2, #250	; 0xfa
   21294:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   21296:	e083      	b.n	213a0 <hif_isr+0x490>
   21298:	00001070 	.word	0x00001070
   2129c:	0002299d 	.word	0x0002299d
   212a0:	000200c1 	.word	0x000200c1
   212a4:	000229c1 	.word	0x000229c1
   212a8:	2000592c 	.word	0x2000592c
   212ac:	00001084 	.word	0x00001084
   212b0:	00038398 	.word	0x00038398
   212b4:	00038088 	.word	0x00038088
   212b8:	0001dbd9 	.word	0x0001dbd9
   212bc:	000380bc 	.word	0x000380bc
   212c0:	00038084 	.word	0x00038084
   212c4:	00022a11 	.word	0x00022a11
   212c8:	000380e4 	.word	0x000380e4
   212cc:	000380fc 	.word	0x000380fc
   212d0:	0003813c 	.word	0x0003813c
   212d4:	00038160 	.word	0x00038160
   212d8:	00038184 	.word	0x00038184
   212dc:	000381a4 	.word	0x000381a4
   212e0:	00000207 	.word	0x00000207
   212e4:	000381c8 	.word	0x000381c8
   212e8:	000381ec 	.word	0x000381ec
				}
				if(gstrHifCxt.u8HifRXDone)
   212ec:	4b30      	ldr	r3, [pc, #192]	; (213b0 <hif_isr+0x4a0>)
   212ee:	789b      	ldrb	r3, [r3, #2]
   212f0:	b2db      	uxtb	r3, r3
   212f2:	2b00      	cmp	r3, #0
   212f4:	d054      	beq.n	213a0 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   212f6:	4a2f      	ldr	r2, [pc, #188]	; (213b4 <hif_isr+0x4a4>)
   212f8:	492f      	ldr	r1, [pc, #188]	; (213b8 <hif_isr+0x4a8>)
   212fa:	4b30      	ldr	r3, [pc, #192]	; (213bc <hif_isr+0x4ac>)
   212fc:	0018      	movs	r0, r3
   212fe:	4b30      	ldr	r3, [pc, #192]	; (213c0 <hif_isr+0x4b0>)
   21300:	4798      	blx	r3
   21302:	1d3b      	adds	r3, r7, #4
   21304:	781b      	ldrb	r3, [r3, #0]
   21306:	b2db      	uxtb	r3, r3
   21308:	0019      	movs	r1, r3
   2130a:	1d3b      	adds	r3, r7, #4
   2130c:	785b      	ldrb	r3, [r3, #1]
   2130e:	b2db      	uxtb	r3, r3
   21310:	001a      	movs	r2, r3
   21312:	4b2c      	ldr	r3, [pc, #176]	; (213c4 <hif_isr+0x4b4>)
   21314:	0018      	movs	r0, r3
   21316:	4b2a      	ldr	r3, [pc, #168]	; (213c0 <hif_isr+0x4b0>)
   21318:	4798      	blx	r3
   2131a:	4b2b      	ldr	r3, [pc, #172]	; (213c8 <hif_isr+0x4b8>)
   2131c:	0018      	movs	r0, r3
   2131e:	4b28      	ldr	r3, [pc, #160]	; (213c0 <hif_isr+0x4b0>)
   21320:	4798      	blx	r3
					ret = hif_set_rx_done();
   21322:	230f      	movs	r3, #15
   21324:	18fc      	adds	r4, r7, r3
   21326:	4b29      	ldr	r3, [pc, #164]	; (213cc <hif_isr+0x4bc>)
   21328:	4798      	blx	r3
   2132a:	0003      	movs	r3, r0
   2132c:	7023      	strb	r3, [r4, #0]
   2132e:	e037      	b.n	213a0 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   21330:	4a27      	ldr	r2, [pc, #156]	; (213d0 <hif_isr+0x4c0>)
   21332:	4921      	ldr	r1, [pc, #132]	; (213b8 <hif_isr+0x4a8>)
   21334:	4b21      	ldr	r3, [pc, #132]	; (213bc <hif_isr+0x4ac>)
   21336:	0018      	movs	r0, r3
   21338:	4b21      	ldr	r3, [pc, #132]	; (213c0 <hif_isr+0x4b0>)
   2133a:	4798      	blx	r3
   2133c:	4b25      	ldr	r3, [pc, #148]	; (213d4 <hif_isr+0x4c4>)
   2133e:	0018      	movs	r0, r3
   21340:	4b1f      	ldr	r3, [pc, #124]	; (213c0 <hif_isr+0x4b0>)
   21342:	4798      	blx	r3
   21344:	4b20      	ldr	r3, [pc, #128]	; (213c8 <hif_isr+0x4b8>)
   21346:	0018      	movs	r0, r3
   21348:	4b1d      	ldr	r3, [pc, #116]	; (213c0 <hif_isr+0x4b0>)
   2134a:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   2134c:	230f      	movs	r3, #15
   2134e:	18fb      	adds	r3, r7, r3
   21350:	22fe      	movs	r2, #254	; 0xfe
   21352:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   21354:	e024      	b.n	213a0 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   21356:	4a20      	ldr	r2, [pc, #128]	; (213d8 <hif_isr+0x4c8>)
   21358:	4917      	ldr	r1, [pc, #92]	; (213b8 <hif_isr+0x4a8>)
   2135a:	4b18      	ldr	r3, [pc, #96]	; (213bc <hif_isr+0x4ac>)
   2135c:	0018      	movs	r0, r3
   2135e:	4b18      	ldr	r3, [pc, #96]	; (213c0 <hif_isr+0x4b0>)
   21360:	4798      	blx	r3
   21362:	68ba      	ldr	r2, [r7, #8]
   21364:	4b1d      	ldr	r3, [pc, #116]	; (213dc <hif_isr+0x4cc>)
   21366:	0011      	movs	r1, r2
   21368:	0018      	movs	r0, r3
   2136a:	4b15      	ldr	r3, [pc, #84]	; (213c0 <hif_isr+0x4b0>)
   2136c:	4798      	blx	r3
   2136e:	4b16      	ldr	r3, [pc, #88]	; (213c8 <hif_isr+0x4b8>)
   21370:	0018      	movs	r0, r3
   21372:	4b13      	ldr	r3, [pc, #76]	; (213c0 <hif_isr+0x4b0>)
   21374:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21376:	230f      	movs	r3, #15
   21378:	18fb      	adds	r3, r7, r3
   2137a:	22f4      	movs	r2, #244	; 0xf4
   2137c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2137e:	e00f      	b.n	213a0 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   21380:	4a17      	ldr	r2, [pc, #92]	; (213e0 <hif_isr+0x4d0>)
   21382:	490d      	ldr	r1, [pc, #52]	; (213b8 <hif_isr+0x4a8>)
   21384:	4b0d      	ldr	r3, [pc, #52]	; (213bc <hif_isr+0x4ac>)
   21386:	0018      	movs	r0, r3
   21388:	4b0d      	ldr	r3, [pc, #52]	; (213c0 <hif_isr+0x4b0>)
   2138a:	4798      	blx	r3
   2138c:	4b15      	ldr	r3, [pc, #84]	; (213e4 <hif_isr+0x4d4>)
   2138e:	0018      	movs	r0, r3
   21390:	4b0b      	ldr	r3, [pc, #44]	; (213c0 <hif_isr+0x4b0>)
   21392:	4798      	blx	r3
   21394:	4b0c      	ldr	r3, [pc, #48]	; (213c8 <hif_isr+0x4b8>)
   21396:	0018      	movs	r0, r3
   21398:	4b09      	ldr	r3, [pc, #36]	; (213c0 <hif_isr+0x4b0>)
   2139a:	4798      	blx	r3
		goto ERR1;
   2139c:	e000      	b.n	213a0 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   2139e:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   213a0:	230f      	movs	r3, #15
   213a2:	18fb      	adds	r3, r7, r3
   213a4:	781b      	ldrb	r3, [r3, #0]
   213a6:	b25b      	sxtb	r3, r3
}
   213a8:	0018      	movs	r0, r3
   213aa:	46bd      	mov	sp, r7
   213ac:	b005      	add	sp, #20
   213ae:	bd90      	pop	{r4, r7, pc}
   213b0:	2000592c 	.word	0x2000592c
   213b4:	00000216 	.word	0x00000216
   213b8:	00038398 	.word	0x00038398
   213bc:	00038088 	.word	0x00038088
   213c0:	0001dbd9 	.word	0x0001dbd9
   213c4:	00038204 	.word	0x00038204
   213c8:	00038084 	.word	0x00038084
   213cc:	000209a5 	.word	0x000209a5
   213d0:	0000021d 	.word	0x0000021d
   213d4:	00038230 	.word	0x00038230
   213d8:	00000225 	.word	0x00000225
   213dc:	00038244 	.word	0x00038244
   213e0:	0000022e 	.word	0x0000022e
   213e4:	00038260 	.word	0x00038260

000213e8 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   213e8:	b590      	push	{r4, r7, lr}
   213ea:	b083      	sub	sp, #12
   213ec:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   213ee:	1dfb      	adds	r3, r7, #7
   213f0:	2200      	movs	r2, #0
   213f2:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   213f4:	4b1c      	ldr	r3, [pc, #112]	; (21468 <hif_handle_isr+0x80>)
   213f6:	2200      	movs	r2, #0
   213f8:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   213fa:	e024      	b.n	21446 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   213fc:	4b1a      	ldr	r3, [pc, #104]	; (21468 <hif_handle_isr+0x80>)
   213fe:	78db      	ldrb	r3, [r3, #3]
   21400:	b2db      	uxtb	r3, r3
   21402:	3b01      	subs	r3, #1
   21404:	b2da      	uxtb	r2, r3
   21406:	4b18      	ldr	r3, [pc, #96]	; (21468 <hif_handle_isr+0x80>)
   21408:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2140a:	1dfc      	adds	r4, r7, #7
   2140c:	4b17      	ldr	r3, [pc, #92]	; (2146c <hif_handle_isr+0x84>)
   2140e:	4798      	blx	r3
   21410:	0003      	movs	r3, r0
   21412:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   21414:	1dfb      	adds	r3, r7, #7
   21416:	781b      	ldrb	r3, [r3, #0]
   21418:	b25b      	sxtb	r3, r3
   2141a:	2b00      	cmp	r3, #0
   2141c:	d100      	bne.n	21420 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   2141e:	e012      	b.n	21446 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   21420:	4a13      	ldr	r2, [pc, #76]	; (21470 <hif_handle_isr+0x88>)
   21422:	4914      	ldr	r1, [pc, #80]	; (21474 <hif_handle_isr+0x8c>)
   21424:	4b14      	ldr	r3, [pc, #80]	; (21478 <hif_handle_isr+0x90>)
   21426:	0018      	movs	r0, r3
   21428:	4b14      	ldr	r3, [pc, #80]	; (2147c <hif_handle_isr+0x94>)
   2142a:	4798      	blx	r3
   2142c:	1dfb      	adds	r3, r7, #7
   2142e:	2200      	movs	r2, #0
   21430:	569a      	ldrsb	r2, [r3, r2]
   21432:	4b13      	ldr	r3, [pc, #76]	; (21480 <hif_handle_isr+0x98>)
   21434:	0011      	movs	r1, r2
   21436:	0018      	movs	r0, r3
   21438:	4b10      	ldr	r3, [pc, #64]	; (2147c <hif_handle_isr+0x94>)
   2143a:	4798      	blx	r3
   2143c:	4b11      	ldr	r3, [pc, #68]	; (21484 <hif_handle_isr+0x9c>)
   2143e:	0018      	movs	r0, r3
   21440:	4b0e      	ldr	r3, [pc, #56]	; (2147c <hif_handle_isr+0x94>)
   21442:	4798      	blx	r3
			ret = hif_isr();
   21444:	e7e1      	b.n	2140a <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   21446:	4b08      	ldr	r3, [pc, #32]	; (21468 <hif_handle_isr+0x80>)
   21448:	78db      	ldrb	r3, [r3, #3]
   2144a:	b2db      	uxtb	r3, r3
   2144c:	2b00      	cmp	r3, #0
   2144e:	d004      	beq.n	2145a <hif_handle_isr+0x72>
   21450:	4b05      	ldr	r3, [pc, #20]	; (21468 <hif_handle_isr+0x80>)
   21452:	791b      	ldrb	r3, [r3, #4]
   21454:	b2db      	uxtb	r3, r3
   21456:	2b00      	cmp	r3, #0
   21458:	d0d0      	beq.n	213fc <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   2145a:	1dfb      	adds	r3, r7, #7
   2145c:	781b      	ldrb	r3, [r3, #0]
   2145e:	b25b      	sxtb	r3, r3
}
   21460:	0018      	movs	r0, r3
   21462:	46bd      	mov	sp, r7
   21464:	b003      	add	sp, #12
   21466:	bd90      	pop	{r4, r7, pc}
   21468:	2000592c 	.word	0x2000592c
   2146c:	00020f11 	.word	0x00020f11
   21470:	00000257 	.word	0x00000257
   21474:	000383a0 	.word	0x000383a0
   21478:	00038088 	.word	0x00038088
   2147c:	0001dbd9 	.word	0x0001dbd9
   21480:	00038284 	.word	0x00038284
   21484:	00038084 	.word	0x00038084

00021488 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   21488:	b590      	push	{r4, r7, lr}
   2148a:	b087      	sub	sp, #28
   2148c:	af00      	add	r7, sp, #0
   2148e:	60f8      	str	r0, [r7, #12]
   21490:	60b9      	str	r1, [r7, #8]
   21492:	0019      	movs	r1, r3
   21494:	1dbb      	adds	r3, r7, #6
   21496:	801a      	strh	r2, [r3, #0]
   21498:	1d7b      	adds	r3, r7, #5
   2149a:	1c0a      	adds	r2, r1, #0
   2149c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2149e:	2317      	movs	r3, #23
   214a0:	18fb      	adds	r3, r7, r3
   214a2:	2200      	movs	r2, #0
   214a4:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   214a6:	68fb      	ldr	r3, [r7, #12]
   214a8:	2b00      	cmp	r3, #0
   214aa:	d006      	beq.n	214ba <hif_receive+0x32>
   214ac:	68bb      	ldr	r3, [r7, #8]
   214ae:	2b00      	cmp	r3, #0
   214b0:	d003      	beq.n	214ba <hif_receive+0x32>
   214b2:	1dbb      	adds	r3, r7, #6
   214b4:	881b      	ldrh	r3, [r3, #0]
   214b6:	2b00      	cmp	r3, #0
   214b8:	d11e      	bne.n	214f8 <hif_receive+0x70>
	{
		if(isDone)
   214ba:	1d7b      	adds	r3, r7, #5
   214bc:	781b      	ldrb	r3, [r3, #0]
   214be:	2b00      	cmp	r3, #0
   214c0:	d006      	beq.n	214d0 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   214c2:	2317      	movs	r3, #23
   214c4:	18fc      	adds	r4, r7, r3
   214c6:	4b45      	ldr	r3, [pc, #276]	; (215dc <hif_receive+0x154>)
   214c8:	4798      	blx	r3
   214ca:	0003      	movs	r3, r0
   214cc:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   214ce:	e07c      	b.n	215ca <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   214d0:	2317      	movs	r3, #23
   214d2:	18fb      	adds	r3, r7, r3
   214d4:	22f4      	movs	r2, #244	; 0xf4
   214d6:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   214d8:	239e      	movs	r3, #158	; 0x9e
   214da:	009a      	lsls	r2, r3, #2
   214dc:	4940      	ldr	r1, [pc, #256]	; (215e0 <hif_receive+0x158>)
   214de:	4b41      	ldr	r3, [pc, #260]	; (215e4 <hif_receive+0x15c>)
   214e0:	0018      	movs	r0, r3
   214e2:	4b41      	ldr	r3, [pc, #260]	; (215e8 <hif_receive+0x160>)
   214e4:	4798      	blx	r3
   214e6:	4b41      	ldr	r3, [pc, #260]	; (215ec <hif_receive+0x164>)
   214e8:	0018      	movs	r0, r3
   214ea:	4b3f      	ldr	r3, [pc, #252]	; (215e8 <hif_receive+0x160>)
   214ec:	4798      	blx	r3
   214ee:	4b40      	ldr	r3, [pc, #256]	; (215f0 <hif_receive+0x168>)
   214f0:	0018      	movs	r0, r3
   214f2:	4b3d      	ldr	r3, [pc, #244]	; (215e8 <hif_receive+0x160>)
   214f4:	4798      	blx	r3
		goto ERR1;
   214f6:	e068      	b.n	215ca <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   214f8:	1dbb      	adds	r3, r7, #6
   214fa:	881a      	ldrh	r2, [r3, #0]
   214fc:	4b3d      	ldr	r3, [pc, #244]	; (215f4 <hif_receive+0x16c>)
   214fe:	68db      	ldr	r3, [r3, #12]
   21500:	429a      	cmp	r2, r3
   21502:	d917      	bls.n	21534 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   21504:	2317      	movs	r3, #23
   21506:	18fb      	adds	r3, r7, r3
   21508:	22f4      	movs	r2, #244	; 0xf4
   2150a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   2150c:	23a0      	movs	r3, #160	; 0xa0
   2150e:	009a      	lsls	r2, r3, #2
   21510:	4933      	ldr	r1, [pc, #204]	; (215e0 <hif_receive+0x158>)
   21512:	4b34      	ldr	r3, [pc, #208]	; (215e4 <hif_receive+0x15c>)
   21514:	0018      	movs	r0, r3
   21516:	4b34      	ldr	r3, [pc, #208]	; (215e8 <hif_receive+0x160>)
   21518:	4798      	blx	r3
   2151a:	1dbb      	adds	r3, r7, #6
   2151c:	8819      	ldrh	r1, [r3, #0]
   2151e:	4b35      	ldr	r3, [pc, #212]	; (215f4 <hif_receive+0x16c>)
   21520:	68da      	ldr	r2, [r3, #12]
   21522:	4b35      	ldr	r3, [pc, #212]	; (215f8 <hif_receive+0x170>)
   21524:	0018      	movs	r0, r3
   21526:	4b30      	ldr	r3, [pc, #192]	; (215e8 <hif_receive+0x160>)
   21528:	4798      	blx	r3
   2152a:	4b31      	ldr	r3, [pc, #196]	; (215f0 <hif_receive+0x168>)
   2152c:	0018      	movs	r0, r3
   2152e:	4b2e      	ldr	r3, [pc, #184]	; (215e8 <hif_receive+0x160>)
   21530:	4798      	blx	r3
		goto ERR1;
   21532:	e04a      	b.n	215ca <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   21534:	4b2f      	ldr	r3, [pc, #188]	; (215f4 <hif_receive+0x16c>)
   21536:	689a      	ldr	r2, [r3, #8]
   21538:	68fb      	ldr	r3, [r7, #12]
   2153a:	429a      	cmp	r2, r3
   2153c:	d80a      	bhi.n	21554 <hif_receive+0xcc>
   2153e:	1dbb      	adds	r3, r7, #6
   21540:	881a      	ldrh	r2, [r3, #0]
   21542:	68fb      	ldr	r3, [r7, #12]
   21544:	18d2      	adds	r2, r2, r3
   21546:	4b2b      	ldr	r3, [pc, #172]	; (215f4 <hif_receive+0x16c>)
   21548:	6899      	ldr	r1, [r3, #8]
   2154a:	4b2a      	ldr	r3, [pc, #168]	; (215f4 <hif_receive+0x16c>)
   2154c:	68db      	ldr	r3, [r3, #12]
   2154e:	18cb      	adds	r3, r1, r3
   21550:	429a      	cmp	r2, r3
   21552:	d912      	bls.n	2157a <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   21554:	2317      	movs	r3, #23
   21556:	18fb      	adds	r3, r7, r3
   21558:	22f4      	movs	r2, #244	; 0xf4
   2155a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   2155c:	4a27      	ldr	r2, [pc, #156]	; (215fc <hif_receive+0x174>)
   2155e:	4920      	ldr	r1, [pc, #128]	; (215e0 <hif_receive+0x158>)
   21560:	4b20      	ldr	r3, [pc, #128]	; (215e4 <hif_receive+0x15c>)
   21562:	0018      	movs	r0, r3
   21564:	4b20      	ldr	r3, [pc, #128]	; (215e8 <hif_receive+0x160>)
   21566:	4798      	blx	r3
   21568:	4b25      	ldr	r3, [pc, #148]	; (21600 <hif_receive+0x178>)
   2156a:	0018      	movs	r0, r3
   2156c:	4b1e      	ldr	r3, [pc, #120]	; (215e8 <hif_receive+0x160>)
   2156e:	4798      	blx	r3
   21570:	4b1f      	ldr	r3, [pc, #124]	; (215f0 <hif_receive+0x168>)
   21572:	0018      	movs	r0, r3
   21574:	4b1c      	ldr	r3, [pc, #112]	; (215e8 <hif_receive+0x160>)
   21576:	4798      	blx	r3
		goto ERR1;
   21578:	e027      	b.n	215ca <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   2157a:	1dbb      	adds	r3, r7, #6
   2157c:	881a      	ldrh	r2, [r3, #0]
   2157e:	2317      	movs	r3, #23
   21580:	18fc      	adds	r4, r7, r3
   21582:	68b9      	ldr	r1, [r7, #8]
   21584:	68fb      	ldr	r3, [r7, #12]
   21586:	0018      	movs	r0, r3
   21588:	4b1e      	ldr	r3, [pc, #120]	; (21604 <hif_receive+0x17c>)
   2158a:	4798      	blx	r3
   2158c:	0003      	movs	r3, r0
   2158e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21590:	2317      	movs	r3, #23
   21592:	18fb      	adds	r3, r7, r3
   21594:	781b      	ldrb	r3, [r3, #0]
   21596:	b25b      	sxtb	r3, r3
   21598:	2b00      	cmp	r3, #0
   2159a:	d115      	bne.n	215c8 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   2159c:	4b15      	ldr	r3, [pc, #84]	; (215f4 <hif_receive+0x16c>)
   2159e:	689a      	ldr	r2, [r3, #8]
   215a0:	4b14      	ldr	r3, [pc, #80]	; (215f4 <hif_receive+0x16c>)
   215a2:	68db      	ldr	r3, [r3, #12]
   215a4:	18d2      	adds	r2, r2, r3
   215a6:	1dbb      	adds	r3, r7, #6
   215a8:	8819      	ldrh	r1, [r3, #0]
   215aa:	68fb      	ldr	r3, [r7, #12]
   215ac:	18cb      	adds	r3, r1, r3
   215ae:	429a      	cmp	r2, r3
   215b0:	d003      	beq.n	215ba <hif_receive+0x132>
   215b2:	1d7b      	adds	r3, r7, #5
   215b4:	781b      	ldrb	r3, [r3, #0]
   215b6:	2b00      	cmp	r3, #0
   215b8:	d007      	beq.n	215ca <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   215ba:	2317      	movs	r3, #23
   215bc:	18fc      	adds	r4, r7, r3
   215be:	4b07      	ldr	r3, [pc, #28]	; (215dc <hif_receive+0x154>)
   215c0:	4798      	blx	r3
   215c2:	0003      	movs	r3, r0
   215c4:	7023      	strb	r3, [r4, #0]
   215c6:	e000      	b.n	215ca <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   215c8:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   215ca:	2317      	movs	r3, #23
   215cc:	18fb      	adds	r3, r7, r3
   215ce:	781b      	ldrb	r3, [r3, #0]
   215d0:	b25b      	sxtb	r3, r3
}
   215d2:	0018      	movs	r0, r3
   215d4:	46bd      	mov	sp, r7
   215d6:	b007      	add	sp, #28
   215d8:	bd90      	pop	{r4, r7, pc}
   215da:	46c0      	nop			; (mov r8, r8)
   215dc:	000209a5 	.word	0x000209a5
   215e0:	000383b0 	.word	0x000383b0
   215e4:	00038088 	.word	0x00038088
   215e8:	0001dbd9 	.word	0x0001dbd9
   215ec:	000382b4 	.word	0x000382b4
   215f0:	00038084 	.word	0x00038084
   215f4:	2000592c 	.word	0x2000592c
   215f8:	000382d4 	.word	0x000382d4
   215fc:	00000286 	.word	0x00000286
   21600:	0003831c 	.word	0x0003831c
   21604:	00022a11 	.word	0x00022a11

00021608 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   21608:	b580      	push	{r7, lr}
   2160a:	b084      	sub	sp, #16
   2160c:	af00      	add	r7, sp, #0
   2160e:	0002      	movs	r2, r0
   21610:	6039      	str	r1, [r7, #0]
   21612:	1dfb      	adds	r3, r7, #7
   21614:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21616:	230f      	movs	r3, #15
   21618:	18fb      	adds	r3, r7, r3
   2161a:	2200      	movs	r2, #0
   2161c:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   2161e:	1dfb      	adds	r3, r7, #7
   21620:	781b      	ldrb	r3, [r3, #0]
   21622:	2b07      	cmp	r3, #7
   21624:	d820      	bhi.n	21668 <hif_register_cb+0x60>
   21626:	009a      	lsls	r2, r3, #2
   21628:	4b1e      	ldr	r3, [pc, #120]	; (216a4 <hif_register_cb+0x9c>)
   2162a:	18d3      	adds	r3, r2, r3
   2162c:	681b      	ldr	r3, [r3, #0]
   2162e:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   21630:	4b1d      	ldr	r3, [pc, #116]	; (216a8 <hif_register_cb+0xa0>)
   21632:	683a      	ldr	r2, [r7, #0]
   21634:	615a      	str	r2, [r3, #20]
			break;
   21636:	e02d      	b.n	21694 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   21638:	4b1b      	ldr	r3, [pc, #108]	; (216a8 <hif_register_cb+0xa0>)
   2163a:	683a      	ldr	r2, [r7, #0]
   2163c:	611a      	str	r2, [r3, #16]
			break;
   2163e:	e029      	b.n	21694 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   21640:	4b19      	ldr	r3, [pc, #100]	; (216a8 <hif_register_cb+0xa0>)
   21642:	683a      	ldr	r2, [r7, #0]
   21644:	619a      	str	r2, [r3, #24]
			break;
   21646:	e025      	b.n	21694 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   21648:	4b17      	ldr	r3, [pc, #92]	; (216a8 <hif_register_cb+0xa0>)
   2164a:	683a      	ldr	r2, [r7, #0]
   2164c:	621a      	str	r2, [r3, #32]
			break;
   2164e:	e021      	b.n	21694 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   21650:	4b15      	ldr	r3, [pc, #84]	; (216a8 <hif_register_cb+0xa0>)
   21652:	683a      	ldr	r2, [r7, #0]
   21654:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   21656:	e01d      	b.n	21694 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   21658:	4b13      	ldr	r3, [pc, #76]	; (216a8 <hif_register_cb+0xa0>)
   2165a:	683a      	ldr	r2, [r7, #0]
   2165c:	61da      	str	r2, [r3, #28]
			break;
   2165e:	e019      	b.n	21694 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   21660:	4b11      	ldr	r3, [pc, #68]	; (216a8 <hif_register_cb+0xa0>)
   21662:	683a      	ldr	r2, [r7, #0]
   21664:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   21666:	e015      	b.n	21694 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   21668:	4a10      	ldr	r2, [pc, #64]	; (216ac <hif_register_cb+0xa4>)
   2166a:	4911      	ldr	r1, [pc, #68]	; (216b0 <hif_register_cb+0xa8>)
   2166c:	4b11      	ldr	r3, [pc, #68]	; (216b4 <hif_register_cb+0xac>)
   2166e:	0018      	movs	r0, r3
   21670:	4b11      	ldr	r3, [pc, #68]	; (216b8 <hif_register_cb+0xb0>)
   21672:	4798      	blx	r3
   21674:	1dfb      	adds	r3, r7, #7
   21676:	781a      	ldrb	r2, [r3, #0]
   21678:	4b10      	ldr	r3, [pc, #64]	; (216bc <hif_register_cb+0xb4>)
   2167a:	0011      	movs	r1, r2
   2167c:	0018      	movs	r0, r3
   2167e:	4b0e      	ldr	r3, [pc, #56]	; (216b8 <hif_register_cb+0xb0>)
   21680:	4798      	blx	r3
   21682:	4b0f      	ldr	r3, [pc, #60]	; (216c0 <hif_register_cb+0xb8>)
   21684:	0018      	movs	r0, r3
   21686:	4b0c      	ldr	r3, [pc, #48]	; (216b8 <hif_register_cb+0xb0>)
   21688:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2168a:	230f      	movs	r3, #15
   2168c:	18fb      	adds	r3, r7, r3
   2168e:	22f4      	movs	r2, #244	; 0xf4
   21690:	701a      	strb	r2, [r3, #0]
			break;
   21692:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   21694:	230f      	movs	r3, #15
   21696:	18fb      	adds	r3, r7, r3
   21698:	781b      	ldrb	r3, [r3, #0]
   2169a:	b25b      	sxtb	r3, r3
}
   2169c:	0018      	movs	r0, r3
   2169e:	46bd      	mov	sp, r7
   216a0:	b004      	add	sp, #16
   216a2:	bd80      	pop	{r7, pc}
   216a4:	0003836c 	.word	0x0003836c
   216a8:	2000592c 	.word	0x2000592c
   216ac:	000002be 	.word	0x000002be
   216b0:	000383bc 	.word	0x000383bc
   216b4:	00038088 	.word	0x00038088
   216b8:	0001dbd9 	.word	0x0001dbd9
   216bc:	00038360 	.word	0x00038360
   216c0:	00038084 	.word	0x00038084

000216c4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   216c4:	b590      	push	{r4, r7, lr}
   216c6:	b0af      	sub	sp, #188	; 0xbc
   216c8:	af02      	add	r7, sp, #8
   216ca:	603a      	str	r2, [r7, #0]
   216cc:	1dfb      	adds	r3, r7, #7
   216ce:	1c02      	adds	r2, r0, #0
   216d0:	701a      	strb	r2, [r3, #0]
   216d2:	1d3b      	adds	r3, r7, #4
   216d4:	1c0a      	adds	r2, r1, #0
   216d6:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   216d8:	1dfb      	adds	r3, r7, #7
   216da:	781b      	ldrb	r3, [r3, #0]
   216dc:	2b2c      	cmp	r3, #44	; 0x2c
   216de:	d116      	bne.n	2170e <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   216e0:	23a4      	movs	r3, #164	; 0xa4
   216e2:	18f9      	adds	r1, r7, r3
   216e4:	6838      	ldr	r0, [r7, #0]
   216e6:	2300      	movs	r3, #0
   216e8:	2204      	movs	r2, #4
   216ea:	4cca      	ldr	r4, [pc, #808]	; (21a14 <m2m_wifi_cb+0x350>)
   216ec:	47a0      	blx	r4
   216ee:	1e03      	subs	r3, r0, #0
   216f0:	d000      	beq.n	216f4 <m2m_wifi_cb+0x30>
   216f2:	e1b4      	b.n	21a5e <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   216f4:	4bc8      	ldr	r3, [pc, #800]	; (21a18 <m2m_wifi_cb+0x354>)
   216f6:	681b      	ldr	r3, [r3, #0]
   216f8:	2b00      	cmp	r3, #0
   216fa:	d100      	bne.n	216fe <m2m_wifi_cb+0x3a>
   216fc:	e1af      	b.n	21a5e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   216fe:	4bc6      	ldr	r3, [pc, #792]	; (21a18 <m2m_wifi_cb+0x354>)
   21700:	681b      	ldr	r3, [r3, #0]
   21702:	22a4      	movs	r2, #164	; 0xa4
   21704:	18ba      	adds	r2, r7, r2
   21706:	0011      	movs	r1, r2
   21708:	202c      	movs	r0, #44	; 0x2c
   2170a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   2170c:	e1a7      	b.n	21a5e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   2170e:	1dfb      	adds	r3, r7, #7
   21710:	781b      	ldrb	r3, [r3, #0]
   21712:	2b1b      	cmp	r3, #27
   21714:	d116      	bne.n	21744 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   21716:	239c      	movs	r3, #156	; 0x9c
   21718:	18f9      	adds	r1, r7, r3
   2171a:	6838      	ldr	r0, [r7, #0]
   2171c:	2300      	movs	r3, #0
   2171e:	2208      	movs	r2, #8
   21720:	4cbc      	ldr	r4, [pc, #752]	; (21a14 <m2m_wifi_cb+0x350>)
   21722:	47a0      	blx	r4
   21724:	1e03      	subs	r3, r0, #0
   21726:	d000      	beq.n	2172a <m2m_wifi_cb+0x66>
   21728:	e199      	b.n	21a5e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2172a:	4bbb      	ldr	r3, [pc, #748]	; (21a18 <m2m_wifi_cb+0x354>)
   2172c:	681b      	ldr	r3, [r3, #0]
   2172e:	2b00      	cmp	r3, #0
   21730:	d100      	bne.n	21734 <m2m_wifi_cb+0x70>
   21732:	e194      	b.n	21a5e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   21734:	4bb8      	ldr	r3, [pc, #736]	; (21a18 <m2m_wifi_cb+0x354>)
   21736:	681b      	ldr	r3, [r3, #0]
   21738:	229c      	movs	r2, #156	; 0x9c
   2173a:	18ba      	adds	r2, r7, r2
   2173c:	0011      	movs	r1, r2
   2173e:	201b      	movs	r0, #27
   21740:	4798      	blx	r3
}
   21742:	e18c      	b.n	21a5e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   21744:	1dfb      	adds	r3, r7, #7
   21746:	781b      	ldrb	r3, [r3, #0]
   21748:	2b06      	cmp	r3, #6
   2174a:	d116      	bne.n	2177a <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   2174c:	230c      	movs	r3, #12
   2174e:	18f9      	adds	r1, r7, r3
   21750:	6838      	ldr	r0, [r7, #0]
   21752:	2301      	movs	r3, #1
   21754:	2230      	movs	r2, #48	; 0x30
   21756:	4caf      	ldr	r4, [pc, #700]	; (21a14 <m2m_wifi_cb+0x350>)
   21758:	47a0      	blx	r4
   2175a:	1e03      	subs	r3, r0, #0
   2175c:	d000      	beq.n	21760 <m2m_wifi_cb+0x9c>
   2175e:	e17e      	b.n	21a5e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21760:	4bad      	ldr	r3, [pc, #692]	; (21a18 <m2m_wifi_cb+0x354>)
   21762:	681b      	ldr	r3, [r3, #0]
   21764:	2b00      	cmp	r3, #0
   21766:	d100      	bne.n	2176a <m2m_wifi_cb+0xa6>
   21768:	e179      	b.n	21a5e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   2176a:	4bab      	ldr	r3, [pc, #684]	; (21a18 <m2m_wifi_cb+0x354>)
   2176c:	681b      	ldr	r3, [r3, #0]
   2176e:	220c      	movs	r2, #12
   21770:	18ba      	adds	r2, r7, r2
   21772:	0011      	movs	r1, r2
   21774:	2006      	movs	r0, #6
   21776:	4798      	blx	r3
}
   21778:	e171      	b.n	21a5e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   2177a:	1dfb      	adds	r3, r7, #7
   2177c:	781b      	ldrb	r3, [r3, #0]
   2177e:	2b0e      	cmp	r3, #14
   21780:	d100      	bne.n	21784 <m2m_wifi_cb+0xc0>
   21782:	e16c      	b.n	21a5e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   21784:	1dfb      	adds	r3, r7, #7
   21786:	781b      	ldrb	r3, [r3, #0]
   21788:	2b32      	cmp	r3, #50	; 0x32
   2178a:	d116      	bne.n	217ba <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   2178c:	2384      	movs	r3, #132	; 0x84
   2178e:	18f9      	adds	r1, r7, r3
   21790:	6838      	ldr	r0, [r7, #0]
   21792:	2300      	movs	r3, #0
   21794:	2218      	movs	r2, #24
   21796:	4c9f      	ldr	r4, [pc, #636]	; (21a14 <m2m_wifi_cb+0x350>)
   21798:	47a0      	blx	r4
   2179a:	1e03      	subs	r3, r0, #0
   2179c:	d000      	beq.n	217a0 <m2m_wifi_cb+0xdc>
   2179e:	e15e      	b.n	21a5e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   217a0:	4b9d      	ldr	r3, [pc, #628]	; (21a18 <m2m_wifi_cb+0x354>)
   217a2:	681b      	ldr	r3, [r3, #0]
   217a4:	2b00      	cmp	r3, #0
   217a6:	d100      	bne.n	217aa <m2m_wifi_cb+0xe6>
   217a8:	e159      	b.n	21a5e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   217aa:	4b9b      	ldr	r3, [pc, #620]	; (21a18 <m2m_wifi_cb+0x354>)
   217ac:	681b      	ldr	r3, [r3, #0]
   217ae:	2284      	movs	r2, #132	; 0x84
   217b0:	18ba      	adds	r2, r7, r2
   217b2:	0011      	movs	r1, r2
   217b4:	2032      	movs	r0, #50	; 0x32
   217b6:	4798      	blx	r3
}
   217b8:	e151      	b.n	21a5e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   217ba:	1dfb      	adds	r3, r7, #7
   217bc:	781b      	ldrb	r3, [r3, #0]
   217be:	2b2f      	cmp	r3, #47	; 0x2f
   217c0:	d11d      	bne.n	217fe <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   217c2:	230c      	movs	r3, #12
   217c4:	18fb      	adds	r3, r7, r3
   217c6:	2264      	movs	r2, #100	; 0x64
   217c8:	2100      	movs	r1, #0
   217ca:	0018      	movs	r0, r3
   217cc:	4b93      	ldr	r3, [pc, #588]	; (21a1c <m2m_wifi_cb+0x358>)
   217ce:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   217d0:	230c      	movs	r3, #12
   217d2:	18f9      	adds	r1, r7, r3
   217d4:	6838      	ldr	r0, [r7, #0]
   217d6:	2300      	movs	r3, #0
   217d8:	2264      	movs	r2, #100	; 0x64
   217da:	4c8e      	ldr	r4, [pc, #568]	; (21a14 <m2m_wifi_cb+0x350>)
   217dc:	47a0      	blx	r4
   217de:	1e03      	subs	r3, r0, #0
   217e0:	d000      	beq.n	217e4 <m2m_wifi_cb+0x120>
   217e2:	e13c      	b.n	21a5e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   217e4:	4b8c      	ldr	r3, [pc, #560]	; (21a18 <m2m_wifi_cb+0x354>)
   217e6:	681b      	ldr	r3, [r3, #0]
   217e8:	2b00      	cmp	r3, #0
   217ea:	d100      	bne.n	217ee <m2m_wifi_cb+0x12a>
   217ec:	e137      	b.n	21a5e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   217ee:	4b8a      	ldr	r3, [pc, #552]	; (21a18 <m2m_wifi_cb+0x354>)
   217f0:	681b      	ldr	r3, [r3, #0]
   217f2:	220c      	movs	r2, #12
   217f4:	18ba      	adds	r2, r7, r2
   217f6:	0011      	movs	r1, r2
   217f8:	202f      	movs	r0, #47	; 0x2f
   217fa:	4798      	blx	r3
}
   217fc:	e12f      	b.n	21a5e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   217fe:	1dfb      	adds	r3, r7, #7
   21800:	781b      	ldrb	r3, [r3, #0]
   21802:	2b34      	cmp	r3, #52	; 0x34
   21804:	d137      	bne.n	21876 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   21806:	2380      	movs	r3, #128	; 0x80
   21808:	18f9      	adds	r1, r7, r3
   2180a:	6838      	ldr	r0, [r7, #0]
   2180c:	2300      	movs	r3, #0
   2180e:	2204      	movs	r2, #4
   21810:	4c80      	ldr	r4, [pc, #512]	; (21a14 <m2m_wifi_cb+0x350>)
   21812:	47a0      	blx	r4
   21814:	1e03      	subs	r3, r0, #0
   21816:	d000      	beq.n	2181a <m2m_wifi_cb+0x156>
   21818:	e121      	b.n	21a5e <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   2181a:	4b81      	ldr	r3, [pc, #516]	; (21a20 <m2m_wifi_cb+0x35c>)
   2181c:	0018      	movs	r0, r3
   2181e:	4b81      	ldr	r3, [pc, #516]	; (21a24 <m2m_wifi_cb+0x360>)
   21820:	4798      	blx	r3
   21822:	2380      	movs	r3, #128	; 0x80
   21824:	18fb      	adds	r3, r7, r3
   21826:	681b      	ldr	r3, [r3, #0]
   21828:	0e1b      	lsrs	r3, r3, #24
   2182a:	b2db      	uxtb	r3, r3
   2182c:	0019      	movs	r1, r3
   2182e:	2380      	movs	r3, #128	; 0x80
   21830:	18fb      	adds	r3, r7, r3
   21832:	681b      	ldr	r3, [r3, #0]
   21834:	0c1b      	lsrs	r3, r3, #16
   21836:	b2db      	uxtb	r3, r3
   21838:	001a      	movs	r2, r3
   2183a:	2380      	movs	r3, #128	; 0x80
   2183c:	18fb      	adds	r3, r7, r3
   2183e:	681b      	ldr	r3, [r3, #0]
   21840:	0a1b      	lsrs	r3, r3, #8
   21842:	b2db      	uxtb	r3, r3
   21844:	001c      	movs	r4, r3
   21846:	2380      	movs	r3, #128	; 0x80
   21848:	18fb      	adds	r3, r7, r3
   2184a:	681b      	ldr	r3, [r3, #0]
   2184c:	b2db      	uxtb	r3, r3
   2184e:	4876      	ldr	r0, [pc, #472]	; (21a28 <m2m_wifi_cb+0x364>)
   21850:	9300      	str	r3, [sp, #0]
   21852:	0023      	movs	r3, r4
   21854:	4c73      	ldr	r4, [pc, #460]	; (21a24 <m2m_wifi_cb+0x360>)
   21856:	47a0      	blx	r4
   21858:	4b74      	ldr	r3, [pc, #464]	; (21a2c <m2m_wifi_cb+0x368>)
   2185a:	0018      	movs	r0, r3
   2185c:	4b71      	ldr	r3, [pc, #452]	; (21a24 <m2m_wifi_cb+0x360>)
   2185e:	4798      	blx	r3
			if (gpfAppWifiCb)
   21860:	4b6d      	ldr	r3, [pc, #436]	; (21a18 <m2m_wifi_cb+0x354>)
   21862:	681b      	ldr	r3, [r3, #0]
   21864:	2b00      	cmp	r3, #0
   21866:	d100      	bne.n	2186a <m2m_wifi_cb+0x1a6>
   21868:	e0f9      	b.n	21a5e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   2186a:	4b6b      	ldr	r3, [pc, #428]	; (21a18 <m2m_wifi_cb+0x354>)
   2186c:	681b      	ldr	r3, [r3, #0]
   2186e:	2100      	movs	r1, #0
   21870:	2034      	movs	r0, #52	; 0x34
   21872:	4798      	blx	r3
}
   21874:	e0f3      	b.n	21a5e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   21876:	1dfb      	adds	r3, r7, #7
   21878:	781b      	ldrb	r3, [r3, #0]
   2187a:	2b11      	cmp	r3, #17
   2187c:	d11e      	bne.n	218bc <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   2187e:	4b6c      	ldr	r3, [pc, #432]	; (21a30 <m2m_wifi_cb+0x36c>)
   21880:	2200      	movs	r2, #0
   21882:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   21884:	237c      	movs	r3, #124	; 0x7c
   21886:	18f9      	adds	r1, r7, r3
   21888:	6838      	ldr	r0, [r7, #0]
   2188a:	2300      	movs	r3, #0
   2188c:	2204      	movs	r2, #4
   2188e:	4c61      	ldr	r4, [pc, #388]	; (21a14 <m2m_wifi_cb+0x350>)
   21890:	47a0      	blx	r4
   21892:	1e03      	subs	r3, r0, #0
   21894:	d000      	beq.n	21898 <m2m_wifi_cb+0x1d4>
   21896:	e0e2      	b.n	21a5e <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   21898:	237c      	movs	r3, #124	; 0x7c
   2189a:	18fb      	adds	r3, r7, r3
   2189c:	781a      	ldrb	r2, [r3, #0]
   2189e:	4b65      	ldr	r3, [pc, #404]	; (21a34 <m2m_wifi_cb+0x370>)
   218a0:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   218a2:	4b5d      	ldr	r3, [pc, #372]	; (21a18 <m2m_wifi_cb+0x354>)
   218a4:	681b      	ldr	r3, [r3, #0]
   218a6:	2b00      	cmp	r3, #0
   218a8:	d100      	bne.n	218ac <m2m_wifi_cb+0x1e8>
   218aa:	e0d8      	b.n	21a5e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   218ac:	4b5a      	ldr	r3, [pc, #360]	; (21a18 <m2m_wifi_cb+0x354>)
   218ae:	681b      	ldr	r3, [r3, #0]
   218b0:	227c      	movs	r2, #124	; 0x7c
   218b2:	18ba      	adds	r2, r7, r2
   218b4:	0011      	movs	r1, r2
   218b6:	2011      	movs	r0, #17
   218b8:	4798      	blx	r3
}
   218ba:	e0d0      	b.n	21a5e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   218bc:	1dfb      	adds	r3, r7, #7
   218be:	781b      	ldrb	r3, [r3, #0]
   218c0:	2b13      	cmp	r3, #19
   218c2:	d116      	bne.n	218f2 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   218c4:	230c      	movs	r3, #12
   218c6:	18f9      	adds	r1, r7, r3
   218c8:	6838      	ldr	r0, [r7, #0]
   218ca:	2300      	movs	r3, #0
   218cc:	222c      	movs	r2, #44	; 0x2c
   218ce:	4c51      	ldr	r4, [pc, #324]	; (21a14 <m2m_wifi_cb+0x350>)
   218d0:	47a0      	blx	r4
   218d2:	1e03      	subs	r3, r0, #0
   218d4:	d000      	beq.n	218d8 <m2m_wifi_cb+0x214>
   218d6:	e0c2      	b.n	21a5e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   218d8:	4b4f      	ldr	r3, [pc, #316]	; (21a18 <m2m_wifi_cb+0x354>)
   218da:	681b      	ldr	r3, [r3, #0]
   218dc:	2b00      	cmp	r3, #0
   218de:	d100      	bne.n	218e2 <m2m_wifi_cb+0x21e>
   218e0:	e0bd      	b.n	21a5e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   218e2:	4b4d      	ldr	r3, [pc, #308]	; (21a18 <m2m_wifi_cb+0x354>)
   218e4:	681b      	ldr	r3, [r3, #0]
   218e6:	220c      	movs	r2, #12
   218e8:	18ba      	adds	r2, r7, r2
   218ea:	0011      	movs	r1, r2
   218ec:	2013      	movs	r0, #19
   218ee:	4798      	blx	r3
}
   218f0:	e0b5      	b.n	21a5e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   218f2:	1dfb      	adds	r3, r7, #7
   218f4:	781b      	ldrb	r3, [r3, #0]
   218f6:	2b04      	cmp	r3, #4
   218f8:	d116      	bne.n	21928 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   218fa:	23a8      	movs	r3, #168	; 0xa8
   218fc:	18f9      	adds	r1, r7, r3
   218fe:	6838      	ldr	r0, [r7, #0]
   21900:	2300      	movs	r3, #0
   21902:	2204      	movs	r2, #4
   21904:	4c43      	ldr	r4, [pc, #268]	; (21a14 <m2m_wifi_cb+0x350>)
   21906:	47a0      	blx	r4
   21908:	1e03      	subs	r3, r0, #0
   2190a:	d000      	beq.n	2190e <m2m_wifi_cb+0x24a>
   2190c:	e0a7      	b.n	21a5e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2190e:	4b42      	ldr	r3, [pc, #264]	; (21a18 <m2m_wifi_cb+0x354>)
   21910:	681b      	ldr	r3, [r3, #0]
   21912:	2b00      	cmp	r3, #0
   21914:	d100      	bne.n	21918 <m2m_wifi_cb+0x254>
   21916:	e0a2      	b.n	21a5e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   21918:	4b3f      	ldr	r3, [pc, #252]	; (21a18 <m2m_wifi_cb+0x354>)
   2191a:	681b      	ldr	r3, [r3, #0]
   2191c:	22a8      	movs	r2, #168	; 0xa8
   2191e:	18ba      	adds	r2, r7, r2
   21920:	0011      	movs	r1, r2
   21922:	2004      	movs	r0, #4
   21924:	4798      	blx	r3
}
   21926:	e09a      	b.n	21a5e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   21928:	1dfb      	adds	r3, r7, #7
   2192a:	781b      	ldrb	r3, [r3, #0]
   2192c:	2b65      	cmp	r3, #101	; 0x65
   2192e:	d116      	bne.n	2195e <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   21930:	23a8      	movs	r3, #168	; 0xa8
   21932:	18f9      	adds	r1, r7, r3
   21934:	6838      	ldr	r0, [r7, #0]
   21936:	2300      	movs	r3, #0
   21938:	2204      	movs	r2, #4
   2193a:	4c36      	ldr	r4, [pc, #216]	; (21a14 <m2m_wifi_cb+0x350>)
   2193c:	47a0      	blx	r4
   2193e:	1e03      	subs	r3, r0, #0
   21940:	d000      	beq.n	21944 <m2m_wifi_cb+0x280>
   21942:	e08c      	b.n	21a5e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21944:	4b34      	ldr	r3, [pc, #208]	; (21a18 <m2m_wifi_cb+0x354>)
   21946:	681b      	ldr	r3, [r3, #0]
   21948:	2b00      	cmp	r3, #0
   2194a:	d100      	bne.n	2194e <m2m_wifi_cb+0x28a>
   2194c:	e087      	b.n	21a5e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   2194e:	4b32      	ldr	r3, [pc, #200]	; (21a18 <m2m_wifi_cb+0x354>)
   21950:	681b      	ldr	r3, [r3, #0]
   21952:	22a8      	movs	r2, #168	; 0xa8
   21954:	18ba      	adds	r2, r7, r2
   21956:	0011      	movs	r1, r2
   21958:	2065      	movs	r0, #101	; 0x65
   2195a:	4798      	blx	r3
}
   2195c:	e07f      	b.n	21a5e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   2195e:	1dfb      	adds	r3, r7, #7
   21960:	781b      	ldrb	r3, [r3, #0]
   21962:	2b09      	cmp	r3, #9
   21964:	d116      	bne.n	21994 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   21966:	230c      	movs	r3, #12
   21968:	18f9      	adds	r1, r7, r3
   2196a:	6838      	ldr	r0, [r7, #0]
   2196c:	2301      	movs	r3, #1
   2196e:	2264      	movs	r2, #100	; 0x64
   21970:	4c28      	ldr	r4, [pc, #160]	; (21a14 <m2m_wifi_cb+0x350>)
   21972:	47a0      	blx	r4
   21974:	1e03      	subs	r3, r0, #0
   21976:	d000      	beq.n	2197a <m2m_wifi_cb+0x2b6>
   21978:	e071      	b.n	21a5e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2197a:	4b27      	ldr	r3, [pc, #156]	; (21a18 <m2m_wifi_cb+0x354>)
   2197c:	681b      	ldr	r3, [r3, #0]
   2197e:	2b00      	cmp	r3, #0
   21980:	d100      	bne.n	21984 <m2m_wifi_cb+0x2c0>
   21982:	e06c      	b.n	21a5e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   21984:	4b24      	ldr	r3, [pc, #144]	; (21a18 <m2m_wifi_cb+0x354>)
   21986:	681b      	ldr	r3, [r3, #0]
   21988:	220c      	movs	r2, #12
   2198a:	18ba      	adds	r2, r7, r2
   2198c:	0011      	movs	r1, r2
   2198e:	2009      	movs	r0, #9
   21990:	4798      	blx	r3
}
   21992:	e064      	b.n	21a5e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   21994:	1dfb      	adds	r3, r7, #7
   21996:	781b      	ldrb	r3, [r3, #0]
   21998:	2b2a      	cmp	r3, #42	; 0x2a
   2199a:	d114      	bne.n	219c6 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   2199c:	2378      	movs	r3, #120	; 0x78
   2199e:	18f9      	adds	r1, r7, r3
   219a0:	6838      	ldr	r0, [r7, #0]
   219a2:	2301      	movs	r3, #1
   219a4:	2204      	movs	r2, #4
   219a6:	4c1b      	ldr	r4, [pc, #108]	; (21a14 <m2m_wifi_cb+0x350>)
   219a8:	47a0      	blx	r4
   219aa:	1e03      	subs	r3, r0, #0
   219ac:	d157      	bne.n	21a5e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   219ae:	4b1a      	ldr	r3, [pc, #104]	; (21a18 <m2m_wifi_cb+0x354>)
   219b0:	681b      	ldr	r3, [r3, #0]
   219b2:	2b00      	cmp	r3, #0
   219b4:	d053      	beq.n	21a5e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   219b6:	4b18      	ldr	r3, [pc, #96]	; (21a18 <m2m_wifi_cb+0x354>)
   219b8:	681b      	ldr	r3, [r3, #0]
   219ba:	2278      	movs	r2, #120	; 0x78
   219bc:	18ba      	adds	r2, r7, r2
   219be:	0011      	movs	r1, r2
   219c0:	202a      	movs	r0, #42	; 0x2a
   219c2:	4798      	blx	r3
}
   219c4:	e04b      	b.n	21a5e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   219c6:	1dfb      	adds	r3, r7, #7
   219c8:	781b      	ldrb	r3, [r3, #0]
   219ca:	2b20      	cmp	r3, #32
   219cc:	d134      	bne.n	21a38 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   219ce:	2370      	movs	r3, #112	; 0x70
   219d0:	18f9      	adds	r1, r7, r3
   219d2:	6838      	ldr	r0, [r7, #0]
   219d4:	2300      	movs	r3, #0
   219d6:	2208      	movs	r2, #8
   219d8:	4c0e      	ldr	r4, [pc, #56]	; (21a14 <m2m_wifi_cb+0x350>)
   219da:	47a0      	blx	r4
   219dc:	1e03      	subs	r3, r0, #0
   219de:	d13e      	bne.n	21a5e <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   219e0:	683b      	ldr	r3, [r7, #0]
   219e2:	3308      	adds	r3, #8
   219e4:	0018      	movs	r0, r3
   219e6:	2370      	movs	r3, #112	; 0x70
   219e8:	18fb      	adds	r3, r7, r3
   219ea:	6819      	ldr	r1, [r3, #0]
   219ec:	2370      	movs	r3, #112	; 0x70
   219ee:	18fb      	adds	r3, r7, r3
   219f0:	889a      	ldrh	r2, [r3, #4]
   219f2:	2301      	movs	r3, #1
   219f4:	4c07      	ldr	r4, [pc, #28]	; (21a14 <m2m_wifi_cb+0x350>)
   219f6:	47a0      	blx	r4
   219f8:	1e03      	subs	r3, r0, #0
   219fa:	d130      	bne.n	21a5e <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   219fc:	4b06      	ldr	r3, [pc, #24]	; (21a18 <m2m_wifi_cb+0x354>)
   219fe:	681b      	ldr	r3, [r3, #0]
   21a00:	2b00      	cmp	r3, #0
   21a02:	d02c      	beq.n	21a5e <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   21a04:	4b04      	ldr	r3, [pc, #16]	; (21a18 <m2m_wifi_cb+0x354>)
   21a06:	681b      	ldr	r3, [r3, #0]
   21a08:	2270      	movs	r2, #112	; 0x70
   21a0a:	18ba      	adds	r2, r7, r2
   21a0c:	0011      	movs	r1, r2
   21a0e:	2020      	movs	r0, #32
   21a10:	4798      	blx	r3
}
   21a12:	e024      	b.n	21a5e <m2m_wifi_cb+0x39a>
   21a14:	00021489 	.word	0x00021489
   21a18:	2000414c 	.word	0x2000414c
   21a1c:	0002090d 	.word	0x0002090d
   21a20:	000383cc 	.word	0x000383cc
   21a24:	0001dbd9 	.word	0x0001dbd9
   21a28:	000383d8 	.word	0x000383d8
   21a2c:	000383f8 	.word	0x000383f8
   21a30:	20004149 	.word	0x20004149
   21a34:	20004148 	.word	0x20004148
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   21a38:	2324      	movs	r3, #36	; 0x24
   21a3a:	33ff      	adds	r3, #255	; 0xff
   21a3c:	001a      	movs	r2, r3
   21a3e:	490a      	ldr	r1, [pc, #40]	; (21a68 <m2m_wifi_cb+0x3a4>)
   21a40:	4b0a      	ldr	r3, [pc, #40]	; (21a6c <m2m_wifi_cb+0x3a8>)
   21a42:	0018      	movs	r0, r3
   21a44:	4b0a      	ldr	r3, [pc, #40]	; (21a70 <m2m_wifi_cb+0x3ac>)
   21a46:	4798      	blx	r3
   21a48:	1dfb      	adds	r3, r7, #7
   21a4a:	781a      	ldrb	r2, [r3, #0]
   21a4c:	4b09      	ldr	r3, [pc, #36]	; (21a74 <m2m_wifi_cb+0x3b0>)
   21a4e:	0011      	movs	r1, r2
   21a50:	0018      	movs	r0, r3
   21a52:	4b07      	ldr	r3, [pc, #28]	; (21a70 <m2m_wifi_cb+0x3ac>)
   21a54:	4798      	blx	r3
   21a56:	4b08      	ldr	r3, [pc, #32]	; (21a78 <m2m_wifi_cb+0x3b4>)
   21a58:	0018      	movs	r0, r3
   21a5a:	4b05      	ldr	r3, [pc, #20]	; (21a70 <m2m_wifi_cb+0x3ac>)
   21a5c:	4798      	blx	r3
}
   21a5e:	46c0      	nop			; (mov r8, r8)
   21a60:	46bd      	mov	sp, r7
   21a62:	b02d      	add	sp, #180	; 0xb4
   21a64:	bd90      	pop	{r4, r7, pc}
   21a66:	46c0      	nop			; (mov r8, r8)
   21a68:	00038798 	.word	0x00038798
   21a6c:	000383fc 	.word	0x000383fc
   21a70:	0001dbd9 	.word	0x0001dbd9
   21a74:	00038410 	.word	0x00038410
   21a78:	000383f8 	.word	0x000383f8

00021a7c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   21a7c:	b590      	push	{r4, r7, lr}
   21a7e:	b091      	sub	sp, #68	; 0x44
   21a80:	af02      	add	r7, sp, #8
   21a82:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   21a84:	2337      	movs	r3, #55	; 0x37
   21a86:	18fb      	adds	r3, r7, r3
   21a88:	2200      	movs	r2, #0
   21a8a:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   21a8c:	230b      	movs	r3, #11
   21a8e:	18fb      	adds	r3, r7, r3
   21a90:	2201      	movs	r2, #1
   21a92:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   21a94:	687b      	ldr	r3, [r7, #4]
   21a96:	2b00      	cmp	r3, #0
   21a98:	d104      	bne.n	21aa4 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   21a9a:	2337      	movs	r3, #55	; 0x37
   21a9c:	18fb      	adds	r3, r7, r3
   21a9e:	22f4      	movs	r2, #244	; 0xf4
   21aa0:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   21aa2:	e0b3      	b.n	21c0c <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   21aa4:	687b      	ldr	r3, [r7, #4]
   21aa6:	681a      	ldr	r2, [r3, #0]
   21aa8:	4b5c      	ldr	r3, [pc, #368]	; (21c1c <m2m_wifi_init+0x1a0>)
   21aaa:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   21aac:	4b5c      	ldr	r3, [pc, #368]	; (21c20 <m2m_wifi_init+0x1a4>)
   21aae:	2200      	movs	r2, #0
   21ab0:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   21ab2:	2337      	movs	r3, #55	; 0x37
   21ab4:	18fc      	adds	r4, r7, r3
   21ab6:	230b      	movs	r3, #11
   21ab8:	18fb      	adds	r3, r7, r3
   21aba:	0018      	movs	r0, r3
   21abc:	4b59      	ldr	r3, [pc, #356]	; (21c24 <m2m_wifi_init+0x1a8>)
   21abe:	4798      	blx	r3
   21ac0:	0003      	movs	r3, r0
   21ac2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   21ac4:	2337      	movs	r3, #55	; 0x37
   21ac6:	18fb      	adds	r3, r7, r3
   21ac8:	781b      	ldrb	r3, [r3, #0]
   21aca:	b25b      	sxtb	r3, r3
   21acc:	2b00      	cmp	r3, #0
   21ace:	d000      	beq.n	21ad2 <m2m_wifi_init+0x56>
   21ad0:	e099      	b.n	21c06 <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   21ad2:	2337      	movs	r3, #55	; 0x37
   21ad4:	18fc      	adds	r4, r7, r3
   21ad6:	2000      	movs	r0, #0
   21ad8:	4b53      	ldr	r3, [pc, #332]	; (21c28 <m2m_wifi_init+0x1ac>)
   21ada:	4798      	blx	r3
   21adc:	0003      	movs	r3, r0
   21ade:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   21ae0:	2337      	movs	r3, #55	; 0x37
   21ae2:	18fb      	adds	r3, r7, r3
   21ae4:	781b      	ldrb	r3, [r3, #0]
   21ae6:	b25b      	sxtb	r3, r3
   21ae8:	2b00      	cmp	r3, #0
   21aea:	d000      	beq.n	21aee <m2m_wifi_init+0x72>
   21aec:	e086      	b.n	21bfc <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   21aee:	4b4f      	ldr	r3, [pc, #316]	; (21c2c <m2m_wifi_init+0x1b0>)
   21af0:	0019      	movs	r1, r3
   21af2:	2001      	movs	r0, #1
   21af4:	4b4e      	ldr	r3, [pc, #312]	; (21c30 <m2m_wifi_init+0x1b4>)
   21af6:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   21af8:	2337      	movs	r3, #55	; 0x37
   21afa:	18fc      	adds	r4, r7, r3
   21afc:	230c      	movs	r3, #12
   21afe:	18fb      	adds	r3, r7, r3
   21b00:	0018      	movs	r0, r3
   21b02:	4b4c      	ldr	r3, [pc, #304]	; (21c34 <m2m_wifi_init+0x1b8>)
   21b04:	4798      	blx	r3
   21b06:	0003      	movs	r3, r0
   21b08:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   21b0a:	4b4b      	ldr	r3, [pc, #300]	; (21c38 <m2m_wifi_init+0x1bc>)
   21b0c:	0018      	movs	r0, r3
   21b0e:	4b4b      	ldr	r3, [pc, #300]	; (21c3c <m2m_wifi_init+0x1c0>)
   21b10:	4798      	blx	r3
   21b12:	230c      	movs	r3, #12
   21b14:	18fb      	adds	r3, r7, r3
   21b16:	791b      	ldrb	r3, [r3, #4]
   21b18:	0019      	movs	r1, r3
   21b1a:	230c      	movs	r3, #12
   21b1c:	18fb      	adds	r3, r7, r3
   21b1e:	795b      	ldrb	r3, [r3, #5]
   21b20:	001a      	movs	r2, r3
   21b22:	230c      	movs	r3, #12
   21b24:	18fb      	adds	r3, r7, r3
   21b26:	799b      	ldrb	r3, [r3, #6]
   21b28:	001c      	movs	r4, r3
   21b2a:	230c      	movs	r3, #12
   21b2c:	18fb      	adds	r3, r7, r3
   21b2e:	8c1b      	ldrh	r3, [r3, #32]
   21b30:	4843      	ldr	r0, [pc, #268]	; (21c40 <m2m_wifi_init+0x1c4>)
   21b32:	9300      	str	r3, [sp, #0]
   21b34:	0023      	movs	r3, r4
   21b36:	4c41      	ldr	r4, [pc, #260]	; (21c3c <m2m_wifi_init+0x1c0>)
   21b38:	47a0      	blx	r4
   21b3a:	4b42      	ldr	r3, [pc, #264]	; (21c44 <m2m_wifi_init+0x1c8>)
   21b3c:	0018      	movs	r0, r3
   21b3e:	4b3f      	ldr	r3, [pc, #252]	; (21c3c <m2m_wifi_init+0x1c0>)
   21b40:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   21b42:	4b3d      	ldr	r3, [pc, #244]	; (21c38 <m2m_wifi_init+0x1bc>)
   21b44:	0018      	movs	r0, r3
   21b46:	4b3d      	ldr	r3, [pc, #244]	; (21c3c <m2m_wifi_init+0x1c0>)
   21b48:	4798      	blx	r3
   21b4a:	230c      	movs	r3, #12
   21b4c:	18fb      	adds	r3, r7, r3
   21b4e:	3316      	adds	r3, #22
   21b50:	001a      	movs	r2, r3
   21b52:	230c      	movs	r3, #12
   21b54:	18fb      	adds	r3, r7, r3
   21b56:	330a      	adds	r3, #10
   21b58:	0019      	movs	r1, r3
   21b5a:	4b3b      	ldr	r3, [pc, #236]	; (21c48 <m2m_wifi_init+0x1cc>)
   21b5c:	0018      	movs	r0, r3
   21b5e:	4b37      	ldr	r3, [pc, #220]	; (21c3c <m2m_wifi_init+0x1c0>)
   21b60:	4798      	blx	r3
   21b62:	4b38      	ldr	r3, [pc, #224]	; (21c44 <m2m_wifi_init+0x1c8>)
   21b64:	0018      	movs	r0, r3
   21b66:	4b35      	ldr	r3, [pc, #212]	; (21c3c <m2m_wifi_init+0x1c0>)
   21b68:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   21b6a:	4b33      	ldr	r3, [pc, #204]	; (21c38 <m2m_wifi_init+0x1bc>)
   21b6c:	0018      	movs	r0, r3
   21b6e:	4b33      	ldr	r3, [pc, #204]	; (21c3c <m2m_wifi_init+0x1c0>)
   21b70:	4798      	blx	r3
   21b72:	230c      	movs	r3, #12
   21b74:	18fb      	adds	r3, r7, r3
   21b76:	79db      	ldrb	r3, [r3, #7]
   21b78:	0019      	movs	r1, r3
   21b7a:	230c      	movs	r3, #12
   21b7c:	18fb      	adds	r3, r7, r3
   21b7e:	7a1b      	ldrb	r3, [r3, #8]
   21b80:	001a      	movs	r2, r3
   21b82:	230c      	movs	r3, #12
   21b84:	18fb      	adds	r3, r7, r3
   21b86:	7a5b      	ldrb	r3, [r3, #9]
   21b88:	4830      	ldr	r0, [pc, #192]	; (21c4c <m2m_wifi_init+0x1d0>)
   21b8a:	4c2c      	ldr	r4, [pc, #176]	; (21c3c <m2m_wifi_init+0x1c0>)
   21b8c:	47a0      	blx	r4
   21b8e:	4b2d      	ldr	r3, [pc, #180]	; (21c44 <m2m_wifi_init+0x1c8>)
   21b90:	0018      	movs	r0, r3
   21b92:	4b2a      	ldr	r3, [pc, #168]	; (21c3c <m2m_wifi_init+0x1c0>)
   21b94:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   21b96:	4b28      	ldr	r3, [pc, #160]	; (21c38 <m2m_wifi_init+0x1bc>)
   21b98:	0018      	movs	r0, r3
   21b9a:	4b28      	ldr	r3, [pc, #160]	; (21c3c <m2m_wifi_init+0x1c0>)
   21b9c:	4798      	blx	r3
   21b9e:	482c      	ldr	r0, [pc, #176]	; (21c50 <m2m_wifi_init+0x1d4>)
   21ba0:	2304      	movs	r3, #4
   21ba2:	2205      	movs	r2, #5
   21ba4:	2113      	movs	r1, #19
   21ba6:	4c25      	ldr	r4, [pc, #148]	; (21c3c <m2m_wifi_init+0x1c0>)
   21ba8:	47a0      	blx	r4
   21baa:	4b26      	ldr	r3, [pc, #152]	; (21c44 <m2m_wifi_init+0x1c8>)
   21bac:	0018      	movs	r0, r3
   21bae:	4b23      	ldr	r3, [pc, #140]	; (21c3c <m2m_wifi_init+0x1c0>)
   21bb0:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   21bb2:	4b21      	ldr	r3, [pc, #132]	; (21c38 <m2m_wifi_init+0x1bc>)
   21bb4:	0018      	movs	r0, r3
   21bb6:	4b21      	ldr	r3, [pc, #132]	; (21c3c <m2m_wifi_init+0x1c0>)
   21bb8:	4798      	blx	r3
   21bba:	4a26      	ldr	r2, [pc, #152]	; (21c54 <m2m_wifi_init+0x1d8>)
   21bbc:	4926      	ldr	r1, [pc, #152]	; (21c58 <m2m_wifi_init+0x1dc>)
   21bbe:	4b27      	ldr	r3, [pc, #156]	; (21c5c <m2m_wifi_init+0x1e0>)
   21bc0:	0018      	movs	r0, r3
   21bc2:	4b1e      	ldr	r3, [pc, #120]	; (21c3c <m2m_wifi_init+0x1c0>)
   21bc4:	4798      	blx	r3
   21bc6:	4b1f      	ldr	r3, [pc, #124]	; (21c44 <m2m_wifi_init+0x1c8>)
   21bc8:	0018      	movs	r0, r3
   21bca:	4b1c      	ldr	r3, [pc, #112]	; (21c3c <m2m_wifi_init+0x1c0>)
   21bcc:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   21bce:	2337      	movs	r3, #55	; 0x37
   21bd0:	18fb      	adds	r3, r7, r3
   21bd2:	781b      	ldrb	r3, [r3, #0]
   21bd4:	b25b      	sxtb	r3, r3
   21bd6:	330d      	adds	r3, #13
   21bd8:	d117      	bne.n	21c0a <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   21bda:	23e8      	movs	r3, #232	; 0xe8
   21bdc:	33ff      	adds	r3, #255	; 0xff
   21bde:	001a      	movs	r2, r3
   21be0:	491f      	ldr	r1, [pc, #124]	; (21c60 <m2m_wifi_init+0x1e4>)
   21be2:	4b20      	ldr	r3, [pc, #128]	; (21c64 <m2m_wifi_init+0x1e8>)
   21be4:	0018      	movs	r0, r3
   21be6:	4b15      	ldr	r3, [pc, #84]	; (21c3c <m2m_wifi_init+0x1c0>)
   21be8:	4798      	blx	r3
   21bea:	4b1f      	ldr	r3, [pc, #124]	; (21c68 <m2m_wifi_init+0x1ec>)
   21bec:	0018      	movs	r0, r3
   21bee:	4b13      	ldr	r3, [pc, #76]	; (21c3c <m2m_wifi_init+0x1c0>)
   21bf0:	4798      	blx	r3
   21bf2:	4b14      	ldr	r3, [pc, #80]	; (21c44 <m2m_wifi_init+0x1c8>)
   21bf4:	0018      	movs	r0, r3
   21bf6:	4b11      	ldr	r3, [pc, #68]	; (21c3c <m2m_wifi_init+0x1c0>)
   21bf8:	4798      	blx	r3
	}

	goto _EXIT0;
   21bfa:	e006      	b.n	21c0a <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   21bfc:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   21bfe:	2000      	movs	r0, #0
   21c00:	4b1a      	ldr	r3, [pc, #104]	; (21c6c <m2m_wifi_init+0x1f0>)
   21c02:	4798      	blx	r3
   21c04:	e002      	b.n	21c0c <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   21c06:	46c0      	nop			; (mov r8, r8)
   21c08:	e000      	b.n	21c0c <m2m_wifi_init+0x190>
	goto _EXIT0;
   21c0a:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   21c0c:	2337      	movs	r3, #55	; 0x37
   21c0e:	18fb      	adds	r3, r7, r3
   21c10:	781b      	ldrb	r3, [r3, #0]
   21c12:	b25b      	sxtb	r3, r3
}
   21c14:	0018      	movs	r0, r3
   21c16:	46bd      	mov	sp, r7
   21c18:	b00f      	add	sp, #60	; 0x3c
   21c1a:	bd90      	pop	{r4, r7, pc}
   21c1c:	2000414c 	.word	0x2000414c
   21c20:	20004149 	.word	0x20004149
   21c24:	00022da1 	.word	0x00022da1
   21c28:	00020b25 	.word	0x00020b25
   21c2c:	000216c5 	.word	0x000216c5
   21c30:	00021609 	.word	0x00021609
   21c34:	00022bd5 	.word	0x00022bd5
   21c38:	000383cc 	.word	0x000383cc
   21c3c:	0001dbd9 	.word	0x0001dbd9
   21c40:	00038570 	.word	0x00038570
   21c44:	000383f8 	.word	0x000383f8
   21c48:	00038598 	.word	0x00038598
   21c4c:	000385b4 	.word	0x000385b4
   21c50:	000385d8 	.word	0x000385d8
   21c54:	000385f0 	.word	0x000385f0
   21c58:	000385fc 	.word	0x000385fc
   21c5c:	00038608 	.word	0x00038608
   21c60:	000387a4 	.word	0x000387a4
   21c64:	000383fc 	.word	0x000383fc
   21c68:	00038620 	.word	0x00038620
   21c6c:	00022f31 	.word	0x00022f31

00021c70 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   21c70:	b580      	push	{r7, lr}
   21c72:	b082      	sub	sp, #8
   21c74:	af00      	add	r7, sp, #0
   21c76:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   21c78:	4b03      	ldr	r3, [pc, #12]	; (21c88 <m2m_wifi_handle_events+0x18>)
   21c7a:	4798      	blx	r3
   21c7c:	0003      	movs	r3, r0
}
   21c7e:	0018      	movs	r0, r3
   21c80:	46bd      	mov	sp, r7
   21c82:	b002      	add	sp, #8
   21c84:	bd80      	pop	{r7, pc}
   21c86:	46c0      	nop			; (mov r8, r8)
   21c88:	000213e9 	.word	0x000213e9

00021c8c <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   21c8c:	b590      	push	{r4, r7, lr}
   21c8e:	b087      	sub	sp, #28
   21c90:	af02      	add	r7, sp, #8
   21c92:	60f8      	str	r0, [r7, #12]
   21c94:	0008      	movs	r0, r1
   21c96:	0011      	movs	r1, r2
   21c98:	607b      	str	r3, [r7, #4]
   21c9a:	230b      	movs	r3, #11
   21c9c:	18fb      	adds	r3, r7, r3
   21c9e:	1c02      	adds	r2, r0, #0
   21ca0:	701a      	strb	r2, [r3, #0]
   21ca2:	230a      	movs	r3, #10
   21ca4:	18fb      	adds	r3, r7, r3
   21ca6:	1c0a      	adds	r2, r1, #0
   21ca8:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   21caa:	687c      	ldr	r4, [r7, #4]
   21cac:	230a      	movs	r3, #10
   21cae:	18fb      	adds	r3, r7, r3
   21cb0:	781a      	ldrb	r2, [r3, #0]
   21cb2:	230b      	movs	r3, #11
   21cb4:	18fb      	adds	r3, r7, r3
   21cb6:	7819      	ldrb	r1, [r3, #0]
   21cb8:	68f8      	ldr	r0, [r7, #12]
   21cba:	2300      	movs	r3, #0
   21cbc:	9301      	str	r3, [sp, #4]
   21cbe:	2320      	movs	r3, #32
   21cc0:	18fb      	adds	r3, r7, r3
   21cc2:	881b      	ldrh	r3, [r3, #0]
   21cc4:	9300      	str	r3, [sp, #0]
   21cc6:	0023      	movs	r3, r4
   21cc8:	4c03      	ldr	r4, [pc, #12]	; (21cd8 <m2m_wifi_connect+0x4c>)
   21cca:	47a0      	blx	r4
   21ccc:	0003      	movs	r3, r0
}
   21cce:	0018      	movs	r0, r3
   21cd0:	46bd      	mov	sp, r7
   21cd2:	b005      	add	sp, #20
   21cd4:	bd90      	pop	{r4, r7, pc}
   21cd6:	46c0      	nop			; (mov r8, r8)
   21cd8:	00021cdd 	.word	0x00021cdd

00021cdc <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   21cdc:	b5b0      	push	{r4, r5, r7, lr}
   21cde:	b0aa      	sub	sp, #168	; 0xa8
   21ce0:	af04      	add	r7, sp, #16
   21ce2:	60f8      	str	r0, [r7, #12]
   21ce4:	0008      	movs	r0, r1
   21ce6:	0011      	movs	r1, r2
   21ce8:	607b      	str	r3, [r7, #4]
   21cea:	230b      	movs	r3, #11
   21cec:	18fb      	adds	r3, r7, r3
   21cee:	1c02      	adds	r2, r0, #0
   21cf0:	701a      	strb	r2, [r3, #0]
   21cf2:	230a      	movs	r3, #10
   21cf4:	18fb      	adds	r3, r7, r3
   21cf6:	1c0a      	adds	r2, r1, #0
   21cf8:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   21cfa:	2397      	movs	r3, #151	; 0x97
   21cfc:	18fb      	adds	r3, r7, r3
   21cfe:	2200      	movs	r2, #0
   21d00:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   21d02:	230a      	movs	r3, #10
   21d04:	18fb      	adds	r3, r7, r3
   21d06:	781b      	ldrb	r3, [r3, #0]
   21d08:	2b01      	cmp	r3, #1
   21d0a:	d100      	bne.n	21d0e <m2m_wifi_connect_sc+0x32>
   21d0c:	e085      	b.n	21e1a <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   21d0e:	687b      	ldr	r3, [r7, #4]
   21d10:	2b00      	cmp	r3, #0
   21d12:	d112      	bne.n	21d3a <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   21d14:	4ad8      	ldr	r2, [pc, #864]	; (22078 <m2m_wifi_connect_sc+0x39c>)
   21d16:	49d9      	ldr	r1, [pc, #868]	; (2207c <m2m_wifi_connect_sc+0x3a0>)
   21d18:	4bd9      	ldr	r3, [pc, #868]	; (22080 <m2m_wifi_connect_sc+0x3a4>)
   21d1a:	0018      	movs	r0, r3
   21d1c:	4bd9      	ldr	r3, [pc, #868]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21d1e:	4798      	blx	r3
   21d20:	4bd9      	ldr	r3, [pc, #868]	; (22088 <m2m_wifi_connect_sc+0x3ac>)
   21d22:	0018      	movs	r0, r3
   21d24:	4bd7      	ldr	r3, [pc, #860]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21d26:	4798      	blx	r3
   21d28:	4bd8      	ldr	r3, [pc, #864]	; (2208c <m2m_wifi_connect_sc+0x3b0>)
   21d2a:	0018      	movs	r0, r3
   21d2c:	4bd5      	ldr	r3, [pc, #852]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21d2e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21d30:	2397      	movs	r3, #151	; 0x97
   21d32:	18fb      	adds	r3, r7, r3
   21d34:	22f4      	movs	r2, #244	; 0xf4
   21d36:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21d38:	e1f9      	b.n	2212e <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   21d3a:	230a      	movs	r3, #10
   21d3c:	18fb      	adds	r3, r7, r3
   21d3e:	781b      	ldrb	r3, [r3, #0]
   21d40:	2b02      	cmp	r3, #2
   21d42:	d16a      	bne.n	21e1a <m2m_wifi_connect_sc+0x13e>
   21d44:	687b      	ldr	r3, [r7, #4]
   21d46:	0018      	movs	r0, r3
   21d48:	4bd1      	ldr	r3, [pc, #836]	; (22090 <m2m_wifi_connect_sc+0x3b4>)
   21d4a:	4798      	blx	r3
   21d4c:	0003      	movs	r3, r0
   21d4e:	2b40      	cmp	r3, #64	; 0x40
   21d50:	d163      	bne.n	21e1a <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   21d52:	2396      	movs	r3, #150	; 0x96
   21d54:	18fb      	adds	r3, r7, r3
   21d56:	2200      	movs	r2, #0
   21d58:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   21d5a:	687b      	ldr	r3, [r7, #4]
   21d5c:	2290      	movs	r2, #144	; 0x90
   21d5e:	18ba      	adds	r2, r7, r2
   21d60:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21d62:	e055      	b.n	21e10 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   21d64:	2396      	movs	r3, #150	; 0x96
   21d66:	18fb      	adds	r3, r7, r3
   21d68:	781b      	ldrb	r3, [r3, #0]
   21d6a:	2290      	movs	r2, #144	; 0x90
   21d6c:	18ba      	adds	r2, r7, r2
   21d6e:	6812      	ldr	r2, [r2, #0]
   21d70:	18d3      	adds	r3, r2, r3
   21d72:	781b      	ldrb	r3, [r3, #0]
   21d74:	2b2f      	cmp	r3, #47	; 0x2f
   21d76:	d931      	bls.n	21ddc <m2m_wifi_connect_sc+0x100>
   21d78:	2396      	movs	r3, #150	; 0x96
   21d7a:	18fb      	adds	r3, r7, r3
   21d7c:	781b      	ldrb	r3, [r3, #0]
   21d7e:	2290      	movs	r2, #144	; 0x90
   21d80:	18ba      	adds	r2, r7, r2
   21d82:	6812      	ldr	r2, [r2, #0]
   21d84:	18d3      	adds	r3, r2, r3
   21d86:	781b      	ldrb	r3, [r3, #0]
   21d88:	2b39      	cmp	r3, #57	; 0x39
   21d8a:	d909      	bls.n	21da0 <m2m_wifi_connect_sc+0xc4>
   21d8c:	2396      	movs	r3, #150	; 0x96
   21d8e:	18fb      	adds	r3, r7, r3
   21d90:	781b      	ldrb	r3, [r3, #0]
   21d92:	2290      	movs	r2, #144	; 0x90
   21d94:	18ba      	adds	r2, r7, r2
   21d96:	6812      	ldr	r2, [r2, #0]
   21d98:	18d3      	adds	r3, r2, r3
   21d9a:	781b      	ldrb	r3, [r3, #0]
   21d9c:	2b40      	cmp	r3, #64	; 0x40
   21d9e:	d91d      	bls.n	21ddc <m2m_wifi_connect_sc+0x100>
   21da0:	2396      	movs	r3, #150	; 0x96
   21da2:	18fb      	adds	r3, r7, r3
   21da4:	781b      	ldrb	r3, [r3, #0]
   21da6:	2290      	movs	r2, #144	; 0x90
   21da8:	18ba      	adds	r2, r7, r2
   21daa:	6812      	ldr	r2, [r2, #0]
   21dac:	18d3      	adds	r3, r2, r3
   21dae:	781b      	ldrb	r3, [r3, #0]
   21db0:	2b46      	cmp	r3, #70	; 0x46
   21db2:	d909      	bls.n	21dc8 <m2m_wifi_connect_sc+0xec>
   21db4:	2396      	movs	r3, #150	; 0x96
   21db6:	18fb      	adds	r3, r7, r3
   21db8:	781b      	ldrb	r3, [r3, #0]
   21dba:	2290      	movs	r2, #144	; 0x90
   21dbc:	18ba      	adds	r2, r7, r2
   21dbe:	6812      	ldr	r2, [r2, #0]
   21dc0:	18d3      	adds	r3, r2, r3
   21dc2:	781b      	ldrb	r3, [r3, #0]
   21dc4:	2b60      	cmp	r3, #96	; 0x60
   21dc6:	d909      	bls.n	21ddc <m2m_wifi_connect_sc+0x100>
   21dc8:	2396      	movs	r3, #150	; 0x96
   21dca:	18fb      	adds	r3, r7, r3
   21dcc:	781b      	ldrb	r3, [r3, #0]
   21dce:	2290      	movs	r2, #144	; 0x90
   21dd0:	18ba      	adds	r2, r7, r2
   21dd2:	6812      	ldr	r2, [r2, #0]
   21dd4:	18d3      	adds	r3, r2, r3
   21dd6:	781b      	ldrb	r3, [r3, #0]
   21dd8:	2b66      	cmp	r3, #102	; 0x66
   21dda:	d912      	bls.n	21e02 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   21ddc:	4aad      	ldr	r2, [pc, #692]	; (22094 <m2m_wifi_connect_sc+0x3b8>)
   21dde:	49a7      	ldr	r1, [pc, #668]	; (2207c <m2m_wifi_connect_sc+0x3a0>)
   21de0:	4ba7      	ldr	r3, [pc, #668]	; (22080 <m2m_wifi_connect_sc+0x3a4>)
   21de2:	0018      	movs	r0, r3
   21de4:	4ba7      	ldr	r3, [pc, #668]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21de6:	4798      	blx	r3
   21de8:	4bab      	ldr	r3, [pc, #684]	; (22098 <m2m_wifi_connect_sc+0x3bc>)
   21dea:	0018      	movs	r0, r3
   21dec:	4ba5      	ldr	r3, [pc, #660]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21dee:	4798      	blx	r3
   21df0:	4ba6      	ldr	r3, [pc, #664]	; (2208c <m2m_wifi_connect_sc+0x3b0>)
   21df2:	0018      	movs	r0, r3
   21df4:	4ba3      	ldr	r3, [pc, #652]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21df6:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   21df8:	2397      	movs	r3, #151	; 0x97
   21dfa:	18fb      	adds	r3, r7, r3
   21dfc:	22f4      	movs	r2, #244	; 0xf4
   21dfe:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   21e00:	e195      	b.n	2212e <m2m_wifi_connect_sc+0x452>
				}
				i++;
   21e02:	2396      	movs	r3, #150	; 0x96
   21e04:	18fb      	adds	r3, r7, r3
   21e06:	781a      	ldrb	r2, [r3, #0]
   21e08:	2396      	movs	r3, #150	; 0x96
   21e0a:	18fb      	adds	r3, r7, r3
   21e0c:	3201      	adds	r2, #1
   21e0e:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21e10:	2396      	movs	r3, #150	; 0x96
   21e12:	18fb      	adds	r3, r7, r3
   21e14:	781b      	ldrb	r3, [r3, #0]
   21e16:	2b3f      	cmp	r3, #63	; 0x3f
   21e18:	d9a4      	bls.n	21d64 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   21e1a:	230b      	movs	r3, #11
   21e1c:	18fb      	adds	r3, r7, r3
   21e1e:	781b      	ldrb	r3, [r3, #0]
   21e20:	2b00      	cmp	r3, #0
   21e22:	d004      	beq.n	21e2e <m2m_wifi_connect_sc+0x152>
   21e24:	230b      	movs	r3, #11
   21e26:	18fb      	adds	r3, r7, r3
   21e28:	781b      	ldrb	r3, [r3, #0]
   21e2a:	2b20      	cmp	r3, #32
   21e2c:	d913      	bls.n	21e56 <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   21e2e:	238c      	movs	r3, #140	; 0x8c
   21e30:	009a      	lsls	r2, r3, #2
   21e32:	4992      	ldr	r1, [pc, #584]	; (2207c <m2m_wifi_connect_sc+0x3a0>)
   21e34:	4b92      	ldr	r3, [pc, #584]	; (22080 <m2m_wifi_connect_sc+0x3a4>)
   21e36:	0018      	movs	r0, r3
   21e38:	4b92      	ldr	r3, [pc, #584]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21e3a:	4798      	blx	r3
   21e3c:	4b97      	ldr	r3, [pc, #604]	; (2209c <m2m_wifi_connect_sc+0x3c0>)
   21e3e:	0018      	movs	r0, r3
   21e40:	4b90      	ldr	r3, [pc, #576]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21e42:	4798      	blx	r3
   21e44:	4b91      	ldr	r3, [pc, #580]	; (2208c <m2m_wifi_connect_sc+0x3b0>)
   21e46:	0018      	movs	r0, r3
   21e48:	4b8e      	ldr	r3, [pc, #568]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21e4a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21e4c:	2397      	movs	r3, #151	; 0x97
   21e4e:	18fb      	adds	r3, r7, r3
   21e50:	22f4      	movs	r2, #244	; 0xf4
   21e52:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   21e54:	e16b      	b.n	2212e <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   21e56:	23a8      	movs	r3, #168	; 0xa8
   21e58:	18fb      	adds	r3, r7, r3
   21e5a:	881b      	ldrh	r3, [r3, #0]
   21e5c:	2b00      	cmp	r3, #0
   21e5e:	d004      	beq.n	21e6a <m2m_wifi_connect_sc+0x18e>
   21e60:	23a8      	movs	r3, #168	; 0xa8
   21e62:	18fb      	adds	r3, r7, r3
   21e64:	881b      	ldrh	r3, [r3, #0]
   21e66:	2b0e      	cmp	r3, #14
   21e68:	d917      	bls.n	21e9a <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   21e6a:	23a8      	movs	r3, #168	; 0xa8
   21e6c:	18fb      	adds	r3, r7, r3
   21e6e:	881b      	ldrh	r3, [r3, #0]
   21e70:	2bff      	cmp	r3, #255	; 0xff
   21e72:	d012      	beq.n	21e9a <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   21e74:	4a8a      	ldr	r2, [pc, #552]	; (220a0 <m2m_wifi_connect_sc+0x3c4>)
   21e76:	4981      	ldr	r1, [pc, #516]	; (2207c <m2m_wifi_connect_sc+0x3a0>)
   21e78:	4b81      	ldr	r3, [pc, #516]	; (22080 <m2m_wifi_connect_sc+0x3a4>)
   21e7a:	0018      	movs	r0, r3
   21e7c:	4b81      	ldr	r3, [pc, #516]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21e7e:	4798      	blx	r3
   21e80:	4b88      	ldr	r3, [pc, #544]	; (220a4 <m2m_wifi_connect_sc+0x3c8>)
   21e82:	0018      	movs	r0, r3
   21e84:	4b7f      	ldr	r3, [pc, #508]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21e86:	4798      	blx	r3
   21e88:	4b80      	ldr	r3, [pc, #512]	; (2208c <m2m_wifi_connect_sc+0x3b0>)
   21e8a:	0018      	movs	r0, r3
   21e8c:	4b7d      	ldr	r3, [pc, #500]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21e8e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21e90:	2397      	movs	r3, #151	; 0x97
   21e92:	18fb      	adds	r3, r7, r3
   21e94:	22f4      	movs	r2, #244	; 0xf4
   21e96:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21e98:	e149      	b.n	2212e <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   21e9a:	230b      	movs	r3, #11
   21e9c:	18fb      	adds	r3, r7, r3
   21e9e:	781a      	ldrb	r2, [r3, #0]
   21ea0:	68f9      	ldr	r1, [r7, #12]
   21ea2:	2314      	movs	r3, #20
   21ea4:	18fb      	adds	r3, r7, r3
   21ea6:	3346      	adds	r3, #70	; 0x46
   21ea8:	0018      	movs	r0, r3
   21eaa:	4b7f      	ldr	r3, [pc, #508]	; (220a8 <m2m_wifi_connect_sc+0x3cc>)
   21eac:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   21eae:	230b      	movs	r3, #11
   21eb0:	18fb      	adds	r3, r7, r3
   21eb2:	781b      	ldrb	r3, [r3, #0]
   21eb4:	2214      	movs	r2, #20
   21eb6:	18ba      	adds	r2, r7, r2
   21eb8:	2146      	movs	r1, #70	; 0x46
   21eba:	18d3      	adds	r3, r2, r3
   21ebc:	185b      	adds	r3, r3, r1
   21ebe:	2200      	movs	r2, #0
   21ec0:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   21ec2:	2314      	movs	r3, #20
   21ec4:	18fb      	adds	r3, r7, r3
   21ec6:	22a8      	movs	r2, #168	; 0xa8
   21ec8:	18ba      	adds	r2, r7, r2
   21eca:	2144      	movs	r1, #68	; 0x44
   21ecc:	8812      	ldrh	r2, [r2, #0]
   21ece:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   21ed0:	23ac      	movs	r3, #172	; 0xac
   21ed2:	18fb      	adds	r3, r7, r3
   21ed4:	781b      	ldrb	r3, [r3, #0]
   21ed6:	1e5a      	subs	r2, r3, #1
   21ed8:	4193      	sbcs	r3, r2
   21eda:	b2db      	uxtb	r3, r3
   21edc:	0019      	movs	r1, r3
   21ede:	2314      	movs	r3, #20
   21ee0:	18fb      	adds	r3, r7, r3
   21ee2:	2267      	movs	r2, #103	; 0x67
   21ee4:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   21ee6:	2314      	movs	r3, #20
   21ee8:	18fb      	adds	r3, r7, r3
   21eea:	228c      	movs	r2, #140	; 0x8c
   21eec:	18ba      	adds	r2, r7, r2
   21eee:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   21ef0:	238c      	movs	r3, #140	; 0x8c
   21ef2:	18fb      	adds	r3, r7, r3
   21ef4:	681b      	ldr	r3, [r3, #0]
   21ef6:	220a      	movs	r2, #10
   21ef8:	18ba      	adds	r2, r7, r2
   21efa:	2141      	movs	r1, #65	; 0x41
   21efc:	7812      	ldrb	r2, [r2, #0]
   21efe:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   21f00:	230a      	movs	r3, #10
   21f02:	18fb      	adds	r3, r7, r3
   21f04:	781b      	ldrb	r3, [r3, #0]
   21f06:	2b03      	cmp	r3, #3
   21f08:	d000      	beq.n	21f0c <m2m_wifi_connect_sc+0x230>
   21f0a:	e07d      	b.n	22008 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   21f0c:	687b      	ldr	r3, [r7, #4]
   21f0e:	2288      	movs	r2, #136	; 0x88
   21f10:	18ba      	adds	r2, r7, r2
   21f12:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   21f14:	238c      	movs	r3, #140	; 0x8c
   21f16:	18fb      	adds	r3, r7, r3
   21f18:	681b      	ldr	r3, [r3, #0]
   21f1a:	2284      	movs	r2, #132	; 0x84
   21f1c:	18ba      	adds	r2, r7, r2
   21f1e:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   21f20:	2388      	movs	r3, #136	; 0x88
   21f22:	18fb      	adds	r3, r7, r3
   21f24:	681b      	ldr	r3, [r3, #0]
   21f26:	781b      	ldrb	r3, [r3, #0]
   21f28:	3b01      	subs	r3, #1
   21f2a:	b2da      	uxtb	r2, r3
   21f2c:	2384      	movs	r3, #132	; 0x84
   21f2e:	18fb      	adds	r3, r7, r3
   21f30:	681b      	ldr	r3, [r3, #0]
   21f32:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   21f34:	2384      	movs	r3, #132	; 0x84
   21f36:	18fb      	adds	r3, r7, r3
   21f38:	681b      	ldr	r3, [r3, #0]
   21f3a:	781b      	ldrb	r3, [r3, #0]
   21f3c:	2b03      	cmp	r3, #3
   21f3e:	d919      	bls.n	21f74 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   21f40:	2394      	movs	r3, #148	; 0x94
   21f42:	009a      	lsls	r2, r3, #2
   21f44:	494d      	ldr	r1, [pc, #308]	; (2207c <m2m_wifi_connect_sc+0x3a0>)
   21f46:	4b4e      	ldr	r3, [pc, #312]	; (22080 <m2m_wifi_connect_sc+0x3a4>)
   21f48:	0018      	movs	r0, r3
   21f4a:	4b4e      	ldr	r3, [pc, #312]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21f4c:	4798      	blx	r3
   21f4e:	2384      	movs	r3, #132	; 0x84
   21f50:	18fb      	adds	r3, r7, r3
   21f52:	681b      	ldr	r3, [r3, #0]
   21f54:	781b      	ldrb	r3, [r3, #0]
   21f56:	001a      	movs	r2, r3
   21f58:	4b54      	ldr	r3, [pc, #336]	; (220ac <m2m_wifi_connect_sc+0x3d0>)
   21f5a:	0011      	movs	r1, r2
   21f5c:	0018      	movs	r0, r3
   21f5e:	4b49      	ldr	r3, [pc, #292]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21f60:	4798      	blx	r3
   21f62:	4b4a      	ldr	r3, [pc, #296]	; (2208c <m2m_wifi_connect_sc+0x3b0>)
   21f64:	0018      	movs	r0, r3
   21f66:	4b47      	ldr	r3, [pc, #284]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21f68:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21f6a:	2397      	movs	r3, #151	; 0x97
   21f6c:	18fb      	adds	r3, r7, r3
   21f6e:	22f4      	movs	r2, #244	; 0xf4
   21f70:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21f72:	e0dc      	b.n	2212e <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   21f74:	2388      	movs	r3, #136	; 0x88
   21f76:	18fb      	adds	r3, r7, r3
   21f78:	681b      	ldr	r3, [r3, #0]
   21f7a:	785b      	ldrb	r3, [r3, #1]
   21f7c:	3b01      	subs	r3, #1
   21f7e:	b2da      	uxtb	r2, r3
   21f80:	2384      	movs	r3, #132	; 0x84
   21f82:	18fb      	adds	r3, r7, r3
   21f84:	681b      	ldr	r3, [r3, #0]
   21f86:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   21f88:	2384      	movs	r3, #132	; 0x84
   21f8a:	18fb      	adds	r3, r7, r3
   21f8c:	681b      	ldr	r3, [r3, #0]
   21f8e:	785b      	ldrb	r3, [r3, #1]
   21f90:	2b0a      	cmp	r3, #10
   21f92:	d01e      	beq.n	21fd2 <m2m_wifi_connect_sc+0x2f6>
   21f94:	2384      	movs	r3, #132	; 0x84
   21f96:	18fb      	adds	r3, r7, r3
   21f98:	681b      	ldr	r3, [r3, #0]
   21f9a:	785b      	ldrb	r3, [r3, #1]
   21f9c:	2b1a      	cmp	r3, #26
   21f9e:	d018      	beq.n	21fd2 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   21fa0:	4a43      	ldr	r2, [pc, #268]	; (220b0 <m2m_wifi_connect_sc+0x3d4>)
   21fa2:	4936      	ldr	r1, [pc, #216]	; (2207c <m2m_wifi_connect_sc+0x3a0>)
   21fa4:	4b36      	ldr	r3, [pc, #216]	; (22080 <m2m_wifi_connect_sc+0x3a4>)
   21fa6:	0018      	movs	r0, r3
   21fa8:	4b36      	ldr	r3, [pc, #216]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21faa:	4798      	blx	r3
   21fac:	2384      	movs	r3, #132	; 0x84
   21fae:	18fb      	adds	r3, r7, r3
   21fb0:	681b      	ldr	r3, [r3, #0]
   21fb2:	785b      	ldrb	r3, [r3, #1]
   21fb4:	001a      	movs	r2, r3
   21fb6:	4b3f      	ldr	r3, [pc, #252]	; (220b4 <m2m_wifi_connect_sc+0x3d8>)
   21fb8:	0011      	movs	r1, r2
   21fba:	0018      	movs	r0, r3
   21fbc:	4b31      	ldr	r3, [pc, #196]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21fbe:	4798      	blx	r3
   21fc0:	4b32      	ldr	r3, [pc, #200]	; (2208c <m2m_wifi_connect_sc+0x3b0>)
   21fc2:	0018      	movs	r0, r3
   21fc4:	4b2f      	ldr	r3, [pc, #188]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   21fc6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21fc8:	2397      	movs	r3, #151	; 0x97
   21fca:	18fb      	adds	r3, r7, r3
   21fcc:	22f4      	movs	r2, #244	; 0xf4
   21fce:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21fd0:	e0ad      	b.n	2212e <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   21fd2:	2384      	movs	r3, #132	; 0x84
   21fd4:	18fb      	adds	r3, r7, r3
   21fd6:	681b      	ldr	r3, [r3, #0]
   21fd8:	1c98      	adds	r0, r3, #2
   21fda:	2388      	movs	r3, #136	; 0x88
   21fdc:	18fb      	adds	r3, r7, r3
   21fde:	681b      	ldr	r3, [r3, #0]
   21fe0:	1c99      	adds	r1, r3, #2
   21fe2:	2388      	movs	r3, #136	; 0x88
   21fe4:	18fb      	adds	r3, r7, r3
   21fe6:	681b      	ldr	r3, [r3, #0]
   21fe8:	785b      	ldrb	r3, [r3, #1]
   21fea:	001a      	movs	r2, r3
   21fec:	4b2e      	ldr	r3, [pc, #184]	; (220a8 <m2m_wifi_connect_sc+0x3cc>)
   21fee:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   21ff0:	2388      	movs	r3, #136	; 0x88
   21ff2:	18fb      	adds	r3, r7, r3
   21ff4:	681b      	ldr	r3, [r3, #0]
   21ff6:	785b      	ldrb	r3, [r3, #1]
   21ff8:	001a      	movs	r2, r3
   21ffa:	2384      	movs	r3, #132	; 0x84
   21ffc:	18fb      	adds	r3, r7, r3
   21ffe:	681b      	ldr	r3, [r3, #0]
   22000:	189b      	adds	r3, r3, r2
   22002:	2200      	movs	r2, #0
   22004:	709a      	strb	r2, [r3, #2]
   22006:	e081      	b.n	2210c <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   22008:	230a      	movs	r3, #10
   2200a:	18fb      	adds	r3, r7, r3
   2200c:	781b      	ldrb	r3, [r3, #0]
   2200e:	2b02      	cmp	r3, #2
   22010:	d156      	bne.n	220c0 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   22012:	2382      	movs	r3, #130	; 0x82
   22014:	18fc      	adds	r4, r7, r3
   22016:	687b      	ldr	r3, [r7, #4]
   22018:	0018      	movs	r0, r3
   2201a:	4b1d      	ldr	r3, [pc, #116]	; (22090 <m2m_wifi_connect_sc+0x3b4>)
   2201c:	4798      	blx	r3
   2201e:	0003      	movs	r3, r0
   22020:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   22022:	2382      	movs	r3, #130	; 0x82
   22024:	18fb      	adds	r3, r7, r3
   22026:	881b      	ldrh	r3, [r3, #0]
   22028:	2b00      	cmp	r3, #0
   2202a:	d004      	beq.n	22036 <m2m_wifi_connect_sc+0x35a>
   2202c:	2382      	movs	r3, #130	; 0x82
   2202e:	18fb      	adds	r3, r7, r3
   22030:	881b      	ldrh	r3, [r3, #0]
   22032:	2b40      	cmp	r3, #64	; 0x40
   22034:	d912      	bls.n	2205c <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   22036:	4a20      	ldr	r2, [pc, #128]	; (220b8 <m2m_wifi_connect_sc+0x3dc>)
   22038:	4910      	ldr	r1, [pc, #64]	; (2207c <m2m_wifi_connect_sc+0x3a0>)
   2203a:	4b11      	ldr	r3, [pc, #68]	; (22080 <m2m_wifi_connect_sc+0x3a4>)
   2203c:	0018      	movs	r0, r3
   2203e:	4b11      	ldr	r3, [pc, #68]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   22040:	4798      	blx	r3
   22042:	4b1e      	ldr	r3, [pc, #120]	; (220bc <m2m_wifi_connect_sc+0x3e0>)
   22044:	0018      	movs	r0, r3
   22046:	4b0f      	ldr	r3, [pc, #60]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   22048:	4798      	blx	r3
   2204a:	4b10      	ldr	r3, [pc, #64]	; (2208c <m2m_wifi_connect_sc+0x3b0>)
   2204c:	0018      	movs	r0, r3
   2204e:	4b0d      	ldr	r3, [pc, #52]	; (22084 <m2m_wifi_connect_sc+0x3a8>)
   22050:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22052:	2397      	movs	r3, #151	; 0x97
   22054:	18fb      	adds	r3, r7, r3
   22056:	22f4      	movs	r2, #244	; 0xf4
   22058:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2205a:	e068      	b.n	2212e <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   2205c:	238c      	movs	r3, #140	; 0x8c
   2205e:	18fb      	adds	r3, r7, r3
   22060:	6818      	ldr	r0, [r3, #0]
   22062:	2382      	movs	r3, #130	; 0x82
   22064:	18fb      	adds	r3, r7, r3
   22066:	881b      	ldrh	r3, [r3, #0]
   22068:	3301      	adds	r3, #1
   2206a:	001a      	movs	r2, r3
   2206c:	687b      	ldr	r3, [r7, #4]
   2206e:	0019      	movs	r1, r3
   22070:	4b0d      	ldr	r3, [pc, #52]	; (220a8 <m2m_wifi_connect_sc+0x3cc>)
   22072:	4798      	blx	r3
   22074:	e04a      	b.n	2210c <m2m_wifi_connect_sc+0x430>
   22076:	46c0      	nop			; (mov r8, r8)
   22078:	0000021a 	.word	0x0000021a
   2207c:	000387b4 	.word	0x000387b4
   22080:	000383fc 	.word	0x000383fc
   22084:	0001dbd9 	.word	0x0001dbd9
   22088:	0003863c 	.word	0x0003863c
   2208c:	000383f8 	.word	0x000383f8
   22090:	0002094b 	.word	0x0002094b
   22094:	00000226 	.word	0x00000226
   22098:	00038650 	.word	0x00038650
   2209c:	00038660 	.word	0x00038660
   220a0:	00000239 	.word	0x00000239
   220a4:	00038674 	.word	0x00038674
   220a8:	000208d1 	.word	0x000208d1
   220ac:	00038680 	.word	0x00038680
   220b0:	00000257 	.word	0x00000257
   220b4:	0003869c 	.word	0x0003869c
   220b8:	00000266 	.word	0x00000266
   220bc:	000386b8 	.word	0x000386b8
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   220c0:	230a      	movs	r3, #10
   220c2:	18fb      	adds	r3, r7, r3
   220c4:	781b      	ldrb	r3, [r3, #0]
   220c6:	2b04      	cmp	r3, #4
   220c8:	d108      	bne.n	220dc <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   220ca:	238c      	movs	r3, #140	; 0x8c
   220cc:	18fb      	adds	r3, r7, r3
   220ce:	681b      	ldr	r3, [r3, #0]
   220d0:	6879      	ldr	r1, [r7, #4]
   220d2:	223e      	movs	r2, #62	; 0x3e
   220d4:	0018      	movs	r0, r3
   220d6:	4b1a      	ldr	r3, [pc, #104]	; (22140 <m2m_wifi_connect_sc+0x464>)
   220d8:	4798      	blx	r3
   220da:	e017      	b.n	2210c <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   220dc:	230a      	movs	r3, #10
   220de:	18fb      	adds	r3, r7, r3
   220e0:	781b      	ldrb	r3, [r3, #0]
   220e2:	2b01      	cmp	r3, #1
   220e4:	d012      	beq.n	2210c <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   220e6:	4a17      	ldr	r2, [pc, #92]	; (22144 <m2m_wifi_connect_sc+0x468>)
   220e8:	4917      	ldr	r1, [pc, #92]	; (22148 <m2m_wifi_connect_sc+0x46c>)
   220ea:	4b18      	ldr	r3, [pc, #96]	; (2214c <m2m_wifi_connect_sc+0x470>)
   220ec:	0018      	movs	r0, r3
   220ee:	4b18      	ldr	r3, [pc, #96]	; (22150 <m2m_wifi_connect_sc+0x474>)
   220f0:	4798      	blx	r3
   220f2:	4b18      	ldr	r3, [pc, #96]	; (22154 <m2m_wifi_connect_sc+0x478>)
   220f4:	0018      	movs	r0, r3
   220f6:	4b16      	ldr	r3, [pc, #88]	; (22150 <m2m_wifi_connect_sc+0x474>)
   220f8:	4798      	blx	r3
   220fa:	4b17      	ldr	r3, [pc, #92]	; (22158 <m2m_wifi_connect_sc+0x47c>)
   220fc:	0018      	movs	r0, r3
   220fe:	4b14      	ldr	r3, [pc, #80]	; (22150 <m2m_wifi_connect_sc+0x474>)
   22100:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22102:	2397      	movs	r3, #151	; 0x97
   22104:	18fb      	adds	r3, r7, r3
   22106:	22f4      	movs	r2, #244	; 0xf4
   22108:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   2210a:	e010      	b.n	2212e <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   2210c:	2397      	movs	r3, #151	; 0x97
   2210e:	18fc      	adds	r4, r7, r3
   22110:	2314      	movs	r3, #20
   22112:	18fa      	adds	r2, r7, r3
   22114:	2300      	movs	r3, #0
   22116:	9302      	str	r3, [sp, #8]
   22118:	2300      	movs	r3, #0
   2211a:	9301      	str	r3, [sp, #4]
   2211c:	2300      	movs	r3, #0
   2211e:	9300      	str	r3, [sp, #0]
   22120:	236c      	movs	r3, #108	; 0x6c
   22122:	2128      	movs	r1, #40	; 0x28
   22124:	2001      	movs	r0, #1
   22126:	4d0d      	ldr	r5, [pc, #52]	; (2215c <m2m_wifi_connect_sc+0x480>)
   22128:	47a8      	blx	r5
   2212a:	0003      	movs	r3, r0
   2212c:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   2212e:	2397      	movs	r3, #151	; 0x97
   22130:	18fb      	adds	r3, r7, r3
   22132:	781b      	ldrb	r3, [r3, #0]
   22134:	b25b      	sxtb	r3, r3
}
   22136:	0018      	movs	r0, r3
   22138:	46bd      	mov	sp, r7
   2213a:	b026      	add	sp, #152	; 0x98
   2213c:	bdb0      	pop	{r4, r5, r7, pc}
   2213e:	46c0      	nop			; (mov r8, r8)
   22140:	000208d1 	.word	0x000208d1
   22144:	00000276 	.word	0x00000276
   22148:	000387b4 	.word	0x000387b4
   2214c:	000383fc 	.word	0x000383fc
   22150:	0001dbd9 	.word	0x0001dbd9
   22154:	000386d4 	.word	0x000386d4
   22158:	000383f8 	.word	0x000383f8
   2215c:	00020b6d 	.word	0x00020b6d

00022160 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   22160:	b580      	push	{r7, lr}
   22162:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   22164:	2300      	movs	r3, #0
}
   22166:	0018      	movs	r0, r3
   22168:	46bd      	mov	sp, r7
   2216a:	bd80      	pop	{r7, pc}

0002216c <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   2216c:	b590      	push	{r4, r7, lr}
   2216e:	b087      	sub	sp, #28
   22170:	af00      	add	r7, sp, #0
   22172:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22174:	2317      	movs	r3, #23
   22176:	18fb      	adds	r3, r7, r3
   22178:	2200      	movs	r2, #0
   2217a:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   2217c:	687b      	ldr	r3, [r7, #4]
   2217e:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   22180:	693b      	ldr	r3, [r7, #16]
   22182:	2280      	movs	r2, #128	; 0x80
   22184:	0052      	lsls	r2, r2, #1
   22186:	4313      	orrs	r3, r2
   22188:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   2218a:	693a      	ldr	r2, [r7, #16]
   2218c:	23a5      	movs	r3, #165	; 0xa5
   2218e:	015b      	lsls	r3, r3, #5
   22190:	0011      	movs	r1, r2
   22192:	0018      	movs	r0, r3
   22194:	4b12      	ldr	r3, [pc, #72]	; (221e0 <chip_apply_conf+0x74>)
   22196:	4798      	blx	r3
		if(val32 != 0) {		
   22198:	693b      	ldr	r3, [r7, #16]
   2219a:	2b00      	cmp	r3, #0
   2219c:	d018      	beq.n	221d0 <chip_apply_conf+0x64>
			uint32 reg = 0;
   2219e:	2300      	movs	r3, #0
   221a0:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   221a2:	2317      	movs	r3, #23
   221a4:	18fc      	adds	r4, r7, r3
   221a6:	230c      	movs	r3, #12
   221a8:	18fa      	adds	r2, r7, r3
   221aa:	23a5      	movs	r3, #165	; 0xa5
   221ac:	015b      	lsls	r3, r3, #5
   221ae:	0011      	movs	r1, r2
   221b0:	0018      	movs	r0, r3
   221b2:	4b0c      	ldr	r3, [pc, #48]	; (221e4 <chip_apply_conf+0x78>)
   221b4:	4798      	blx	r3
   221b6:	0003      	movs	r3, r0
   221b8:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   221ba:	2317      	movs	r3, #23
   221bc:	18fb      	adds	r3, r7, r3
   221be:	781b      	ldrb	r3, [r3, #0]
   221c0:	b25b      	sxtb	r3, r3
   221c2:	2b00      	cmp	r3, #0
   221c4:	d1e1      	bne.n	2218a <chip_apply_conf+0x1e>
				if(reg == val32)
   221c6:	68fa      	ldr	r2, [r7, #12]
   221c8:	693b      	ldr	r3, [r7, #16]
   221ca:	429a      	cmp	r2, r3
   221cc:	d002      	beq.n	221d4 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   221ce:	e7dc      	b.n	2218a <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   221d0:	46c0      	nop			; (mov r8, r8)
   221d2:	e000      	b.n	221d6 <chip_apply_conf+0x6a>
					break;
   221d4:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   221d6:	2300      	movs	r3, #0
}
   221d8:	0018      	movs	r0, r3
   221da:	46bd      	mov	sp, r7
   221dc:	b007      	add	sp, #28
   221de:	bd90      	pop	{r4, r7, pc}
   221e0:	000229c1 	.word	0x000229c1
   221e4:	0002299d 	.word	0x0002299d

000221e8 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   221e8:	b590      	push	{r4, r7, lr}
   221ea:	b083      	sub	sp, #12
   221ec:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   221ee:	2300      	movs	r3, #0
   221f0:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   221f2:	1dfb      	adds	r3, r7, #7
   221f4:	2200      	movs	r2, #0
   221f6:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   221f8:	1dfc      	adds	r4, r7, #7
   221fa:	003b      	movs	r3, r7
   221fc:	4a24      	ldr	r2, [pc, #144]	; (22290 <enable_interrupts+0xa8>)
   221fe:	0019      	movs	r1, r3
   22200:	0010      	movs	r0, r2
   22202:	4b24      	ldr	r3, [pc, #144]	; (22294 <enable_interrupts+0xac>)
   22204:	4798      	blx	r3
   22206:	0003      	movs	r3, r0
   22208:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2220a:	1dfb      	adds	r3, r7, #7
   2220c:	781b      	ldrb	r3, [r3, #0]
   2220e:	b25b      	sxtb	r3, r3
   22210:	2b00      	cmp	r3, #0
   22212:	d131      	bne.n	22278 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   22214:	683b      	ldr	r3, [r7, #0]
   22216:	2280      	movs	r2, #128	; 0x80
   22218:	0052      	lsls	r2, r2, #1
   2221a:	4313      	orrs	r3, r2
   2221c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   2221e:	683b      	ldr	r3, [r7, #0]
   22220:	1dfc      	adds	r4, r7, #7
   22222:	4a1b      	ldr	r2, [pc, #108]	; (22290 <enable_interrupts+0xa8>)
   22224:	0019      	movs	r1, r3
   22226:	0010      	movs	r0, r2
   22228:	4b1b      	ldr	r3, [pc, #108]	; (22298 <enable_interrupts+0xb0>)
   2222a:	4798      	blx	r3
   2222c:	0003      	movs	r3, r0
   2222e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   22230:	1dfb      	adds	r3, r7, #7
   22232:	781b      	ldrb	r3, [r3, #0]
   22234:	b25b      	sxtb	r3, r3
   22236:	2b00      	cmp	r3, #0
   22238:	d120      	bne.n	2227c <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   2223a:	1dfc      	adds	r4, r7, #7
   2223c:	003a      	movs	r2, r7
   2223e:	23d0      	movs	r3, #208	; 0xd0
   22240:	015b      	lsls	r3, r3, #5
   22242:	0011      	movs	r1, r2
   22244:	0018      	movs	r0, r3
   22246:	4b13      	ldr	r3, [pc, #76]	; (22294 <enable_interrupts+0xac>)
   22248:	4798      	blx	r3
   2224a:	0003      	movs	r3, r0
   2224c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2224e:	1dfb      	adds	r3, r7, #7
   22250:	781b      	ldrb	r3, [r3, #0]
   22252:	b25b      	sxtb	r3, r3
   22254:	2b00      	cmp	r3, #0
   22256:	d113      	bne.n	22280 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   22258:	683b      	ldr	r3, [r7, #0]
   2225a:	2280      	movs	r2, #128	; 0x80
   2225c:	0252      	lsls	r2, r2, #9
   2225e:	4313      	orrs	r3, r2
   22260:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   22262:	683a      	ldr	r2, [r7, #0]
   22264:	1dfc      	adds	r4, r7, #7
   22266:	23d0      	movs	r3, #208	; 0xd0
   22268:	015b      	lsls	r3, r3, #5
   2226a:	0011      	movs	r1, r2
   2226c:	0018      	movs	r0, r3
   2226e:	4b0a      	ldr	r3, [pc, #40]	; (22298 <enable_interrupts+0xb0>)
   22270:	4798      	blx	r3
   22272:	0003      	movs	r3, r0
   22274:	7023      	strb	r3, [r4, #0]
   22276:	e004      	b.n	22282 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22278:	46c0      	nop			; (mov r8, r8)
   2227a:	e002      	b.n	22282 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   2227c:	46c0      	nop			; (mov r8, r8)
   2227e:	e000      	b.n	22282 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22280:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   22282:	1dfb      	adds	r3, r7, #7
   22284:	781b      	ldrb	r3, [r3, #0]
   22286:	b25b      	sxtb	r3, r3
}
   22288:	0018      	movs	r0, r3
   2228a:	46bd      	mov	sp, r7
   2228c:	b003      	add	sp, #12
   2228e:	bd90      	pop	{r4, r7, pc}
   22290:	00001408 	.word	0x00001408
   22294:	0002299d 	.word	0x0002299d
   22298:	000229c1 	.word	0x000229c1

0002229c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   2229c:	b580      	push	{r7, lr}
   2229e:	b082      	sub	sp, #8
   222a0:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   222a2:	4b32      	ldr	r3, [pc, #200]	; (2236c <nmi_get_chipid+0xd0>)
   222a4:	681b      	ldr	r3, [r3, #0]
   222a6:	2b00      	cmp	r3, #0
   222a8:	d159      	bne.n	2235e <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   222aa:	4a30      	ldr	r2, [pc, #192]	; (2236c <nmi_get_chipid+0xd0>)
   222ac:	2380      	movs	r3, #128	; 0x80
   222ae:	015b      	lsls	r3, r3, #5
   222b0:	0011      	movs	r1, r2
   222b2:	0018      	movs	r0, r3
   222b4:	4b2e      	ldr	r3, [pc, #184]	; (22370 <nmi_get_chipid+0xd4>)
   222b6:	4798      	blx	r3
   222b8:	1e03      	subs	r3, r0, #0
   222ba:	d004      	beq.n	222c6 <nmi_get_chipid+0x2a>
			chipid = 0;
   222bc:	4b2b      	ldr	r3, [pc, #172]	; (2236c <nmi_get_chipid+0xd0>)
   222be:	2200      	movs	r2, #0
   222c0:	601a      	str	r2, [r3, #0]
			return 0;
   222c2:	2300      	movs	r3, #0
   222c4:	e04d      	b.n	22362 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   222c6:	1d3b      	adds	r3, r7, #4
   222c8:	4a2a      	ldr	r2, [pc, #168]	; (22374 <nmi_get_chipid+0xd8>)
   222ca:	0019      	movs	r1, r3
   222cc:	0010      	movs	r0, r2
   222ce:	4b28      	ldr	r3, [pc, #160]	; (22370 <nmi_get_chipid+0xd4>)
   222d0:	4798      	blx	r3
   222d2:	1e03      	subs	r3, r0, #0
   222d4:	d004      	beq.n	222e0 <nmi_get_chipid+0x44>
			chipid = 0;
   222d6:	4b25      	ldr	r3, [pc, #148]	; (2236c <nmi_get_chipid+0xd0>)
   222d8:	2200      	movs	r2, #0
   222da:	601a      	str	r2, [r3, #0]
			return 0;
   222dc:	2300      	movs	r3, #0
   222de:	e040      	b.n	22362 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   222e0:	4b22      	ldr	r3, [pc, #136]	; (2236c <nmi_get_chipid+0xd0>)
   222e2:	681b      	ldr	r3, [r3, #0]
   222e4:	4a24      	ldr	r2, [pc, #144]	; (22378 <nmi_get_chipid+0xdc>)
   222e6:	4293      	cmp	r3, r2
   222e8:	d106      	bne.n	222f8 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   222ea:	687b      	ldr	r3, [r7, #4]
   222ec:	2b01      	cmp	r3, #1
   222ee:	d029      	beq.n	22344 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   222f0:	4b1e      	ldr	r3, [pc, #120]	; (2236c <nmi_get_chipid+0xd0>)
   222f2:	4a22      	ldr	r2, [pc, #136]	; (2237c <nmi_get_chipid+0xe0>)
   222f4:	601a      	str	r2, [r3, #0]
   222f6:	e025      	b.n	22344 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   222f8:	4b1c      	ldr	r3, [pc, #112]	; (2236c <nmi_get_chipid+0xd0>)
   222fa:	681b      	ldr	r3, [r3, #0]
   222fc:	4a20      	ldr	r2, [pc, #128]	; (22380 <nmi_get_chipid+0xe4>)
   222fe:	4293      	cmp	r3, r2
   22300:	d10d      	bne.n	2231e <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   22302:	687b      	ldr	r3, [r7, #4]
   22304:	2b03      	cmp	r3, #3
   22306:	d01d      	beq.n	22344 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   22308:	687b      	ldr	r3, [r7, #4]
   2230a:	2b04      	cmp	r3, #4
   2230c:	d103      	bne.n	22316 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   2230e:	4b17      	ldr	r3, [pc, #92]	; (2236c <nmi_get_chipid+0xd0>)
   22310:	4a1c      	ldr	r2, [pc, #112]	; (22384 <nmi_get_chipid+0xe8>)
   22312:	601a      	str	r2, [r3, #0]
   22314:	e016      	b.n	22344 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   22316:	4b15      	ldr	r3, [pc, #84]	; (2236c <nmi_get_chipid+0xd0>)
   22318:	4a1b      	ldr	r2, [pc, #108]	; (22388 <nmi_get_chipid+0xec>)
   2231a:	601a      	str	r2, [r3, #0]
   2231c:	e012      	b.n	22344 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   2231e:	4b13      	ldr	r3, [pc, #76]	; (2236c <nmi_get_chipid+0xd0>)
   22320:	681b      	ldr	r3, [r3, #0]
   22322:	4a1a      	ldr	r2, [pc, #104]	; (2238c <nmi_get_chipid+0xf0>)
   22324:	4293      	cmp	r3, r2
   22326:	d10d      	bne.n	22344 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   22328:	4a10      	ldr	r2, [pc, #64]	; (2236c <nmi_get_chipid+0xd0>)
   2232a:	23ec      	movs	r3, #236	; 0xec
   2232c:	039b      	lsls	r3, r3, #14
   2232e:	0011      	movs	r1, r2
   22330:	0018      	movs	r0, r3
   22332:	4b0f      	ldr	r3, [pc, #60]	; (22370 <nmi_get_chipid+0xd4>)
   22334:	4798      	blx	r3
   22336:	1e03      	subs	r3, r0, #0
   22338:	d004      	beq.n	22344 <nmi_get_chipid+0xa8>
			chipid = 0;
   2233a:	4b0c      	ldr	r3, [pc, #48]	; (2236c <nmi_get_chipid+0xd0>)
   2233c:	2200      	movs	r2, #0
   2233e:	601a      	str	r2, [r3, #0]
			return 0;
   22340:	2300      	movs	r3, #0
   22342:	e00e      	b.n	22362 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   22344:	4b09      	ldr	r3, [pc, #36]	; (2236c <nmi_get_chipid+0xd0>)
   22346:	681b      	ldr	r3, [r3, #0]
   22348:	4a11      	ldr	r2, [pc, #68]	; (22390 <nmi_get_chipid+0xf4>)
   2234a:	401a      	ands	r2, r3
   2234c:	4b07      	ldr	r3, [pc, #28]	; (2236c <nmi_get_chipid+0xd0>)
   2234e:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   22350:	4b06      	ldr	r3, [pc, #24]	; (2236c <nmi_get_chipid+0xd0>)
   22352:	681b      	ldr	r3, [r3, #0]
   22354:	22a0      	movs	r2, #160	; 0xa0
   22356:	02d2      	lsls	r2, r2, #11
   22358:	431a      	orrs	r2, r3
   2235a:	4b04      	ldr	r3, [pc, #16]	; (2236c <nmi_get_chipid+0xd0>)
   2235c:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   2235e:	4b03      	ldr	r3, [pc, #12]	; (2236c <nmi_get_chipid+0xd0>)
   22360:	681b      	ldr	r3, [r3, #0]
}
   22362:	0018      	movs	r0, r3
   22364:	46bd      	mov	sp, r7
   22366:	b002      	add	sp, #8
   22368:	bd80      	pop	{r7, pc}
   2236a:	46c0      	nop			; (mov r8, r8)
   2236c:	20004150 	.word	0x20004150
   22370:	0002299d 	.word	0x0002299d
   22374:	000013f4 	.word	0x000013f4
   22378:	001002a0 	.word	0x001002a0
   2237c:	001002a1 	.word	0x001002a1
   22380:	001002b0 	.word	0x001002b0
   22384:	001002b1 	.word	0x001002b1
   22388:	001002b2 	.word	0x001002b2
   2238c:	001000f0 	.word	0x001000f0
   22390:	fff0ffff 	.word	0xfff0ffff

00022394 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   22394:	b590      	push	{r4, r7, lr}
   22396:	b083      	sub	sp, #12
   22398:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2239a:	1dfb      	adds	r3, r7, #7
   2239c:	2200      	movs	r2, #0
   2239e:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   223a0:	1dfc      	adds	r4, r7, #7
   223a2:	003b      	movs	r3, r7
   223a4:	0019      	movs	r1, r3
   223a6:	2010      	movs	r0, #16
   223a8:	4b2e      	ldr	r3, [pc, #184]	; (22464 <chip_sleep+0xd0>)
   223aa:	4798      	blx	r3
   223ac:	0003      	movs	r3, r0
   223ae:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   223b0:	1dfb      	adds	r3, r7, #7
   223b2:	781b      	ldrb	r3, [r3, #0]
   223b4:	b25b      	sxtb	r3, r3
   223b6:	2b00      	cmp	r3, #0
   223b8:	d145      	bne.n	22446 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   223ba:	683b      	ldr	r3, [r7, #0]
   223bc:	2201      	movs	r2, #1
   223be:	4013      	ands	r3, r2
   223c0:	d000      	beq.n	223c4 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   223c2:	e7ed      	b.n	223a0 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   223c4:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   223c6:	1dfc      	adds	r4, r7, #7
   223c8:	003b      	movs	r3, r7
   223ca:	0019      	movs	r1, r3
   223cc:	2001      	movs	r0, #1
   223ce:	4b25      	ldr	r3, [pc, #148]	; (22464 <chip_sleep+0xd0>)
   223d0:	4798      	blx	r3
   223d2:	0003      	movs	r3, r0
   223d4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   223d6:	1dfb      	adds	r3, r7, #7
   223d8:	781b      	ldrb	r3, [r3, #0]
   223da:	b25b      	sxtb	r3, r3
   223dc:	2b00      	cmp	r3, #0
   223de:	d134      	bne.n	2244a <chip_sleep+0xb6>
	if(reg & NBIT1)
   223e0:	683b      	ldr	r3, [r7, #0]
   223e2:	2202      	movs	r2, #2
   223e4:	4013      	ands	r3, r2
   223e6:	d010      	beq.n	2240a <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   223e8:	683b      	ldr	r3, [r7, #0]
   223ea:	2202      	movs	r2, #2
   223ec:	4393      	bics	r3, r2
   223ee:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   223f0:	683b      	ldr	r3, [r7, #0]
   223f2:	1dfc      	adds	r4, r7, #7
   223f4:	0019      	movs	r1, r3
   223f6:	2001      	movs	r0, #1
   223f8:	4b1b      	ldr	r3, [pc, #108]	; (22468 <chip_sleep+0xd4>)
   223fa:	4798      	blx	r3
   223fc:	0003      	movs	r3, r0
   223fe:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   22400:	1dfb      	adds	r3, r7, #7
   22402:	781b      	ldrb	r3, [r3, #0]
   22404:	b25b      	sxtb	r3, r3
   22406:	2b00      	cmp	r3, #0
   22408:	d121      	bne.n	2244e <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2240a:	1dfc      	adds	r4, r7, #7
   2240c:	003b      	movs	r3, r7
   2240e:	0019      	movs	r1, r3
   22410:	200b      	movs	r0, #11
   22412:	4b14      	ldr	r3, [pc, #80]	; (22464 <chip_sleep+0xd0>)
   22414:	4798      	blx	r3
   22416:	0003      	movs	r3, r0
   22418:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2241a:	1dfb      	adds	r3, r7, #7
   2241c:	781b      	ldrb	r3, [r3, #0]
   2241e:	b25b      	sxtb	r3, r3
   22420:	2b00      	cmp	r3, #0
   22422:	d116      	bne.n	22452 <chip_sleep+0xbe>
	if(reg & NBIT0)
   22424:	683b      	ldr	r3, [r7, #0]
   22426:	2201      	movs	r2, #1
   22428:	4013      	ands	r3, r2
   2242a:	d013      	beq.n	22454 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   2242c:	683b      	ldr	r3, [r7, #0]
   2242e:	2201      	movs	r2, #1
   22430:	4393      	bics	r3, r2
   22432:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   22434:	683b      	ldr	r3, [r7, #0]
   22436:	1dfc      	adds	r4, r7, #7
   22438:	0019      	movs	r1, r3
   2243a:	200b      	movs	r0, #11
   2243c:	4b0a      	ldr	r3, [pc, #40]	; (22468 <chip_sleep+0xd4>)
   2243e:	4798      	blx	r3
   22440:	0003      	movs	r3, r0
   22442:	7023      	strb	r3, [r4, #0]
   22444:	e006      	b.n	22454 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   22446:	46c0      	nop			; (mov r8, r8)
   22448:	e004      	b.n	22454 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2244a:	46c0      	nop			; (mov r8, r8)
   2244c:	e002      	b.n	22454 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   2244e:	46c0      	nop			; (mov r8, r8)
   22450:	e000      	b.n	22454 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   22452:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   22454:	1dfb      	adds	r3, r7, #7
   22456:	781b      	ldrb	r3, [r3, #0]
   22458:	b25b      	sxtb	r3, r3
}
   2245a:	0018      	movs	r0, r3
   2245c:	46bd      	mov	sp, r7
   2245e:	b003      	add	sp, #12
   22460:	bd90      	pop	{r4, r7, pc}
   22462:	46c0      	nop			; (mov r8, r8)
   22464:	0002299d 	.word	0x0002299d
   22468:	000229c1 	.word	0x000229c1

0002246c <chip_wake>:
sint8 chip_wake(void)
{
   2246c:	b590      	push	{r4, r7, lr}
   2246e:	b085      	sub	sp, #20
   22470:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22472:	230f      	movs	r3, #15
   22474:	18fb      	adds	r3, r7, r3
   22476:	2200      	movs	r2, #0
   22478:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   2247a:	2300      	movs	r3, #0
   2247c:	607b      	str	r3, [r7, #4]
   2247e:	2300      	movs	r3, #0
   22480:	603b      	str	r3, [r7, #0]
   22482:	2300      	movs	r3, #0
   22484:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   22486:	230f      	movs	r3, #15
   22488:	18fc      	adds	r4, r7, r3
   2248a:	1d3b      	adds	r3, r7, #4
   2248c:	0019      	movs	r1, r3
   2248e:	200b      	movs	r0, #11
   22490:	4b4e      	ldr	r3, [pc, #312]	; (225cc <chip_wake+0x160>)
   22492:	4798      	blx	r3
   22494:	0003      	movs	r3, r0
   22496:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22498:	230f      	movs	r3, #15
   2249a:	18fb      	adds	r3, r7, r3
   2249c:	781b      	ldrb	r3, [r3, #0]
   2249e:	b25b      	sxtb	r3, r3
   224a0:	2b00      	cmp	r3, #0
   224a2:	d000      	beq.n	224a6 <chip_wake+0x3a>
   224a4:	e082      	b.n	225ac <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   224a6:	687b      	ldr	r3, [r7, #4]
   224a8:	2201      	movs	r2, #1
   224aa:	4013      	ands	r3, r2
   224ac:	d111      	bne.n	224d2 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   224ae:	687b      	ldr	r3, [r7, #4]
   224b0:	2201      	movs	r2, #1
   224b2:	4313      	orrs	r3, r2
   224b4:	220f      	movs	r2, #15
   224b6:	18bc      	adds	r4, r7, r2
   224b8:	0019      	movs	r1, r3
   224ba:	200b      	movs	r0, #11
   224bc:	4b44      	ldr	r3, [pc, #272]	; (225d0 <chip_wake+0x164>)
   224be:	4798      	blx	r3
   224c0:	0003      	movs	r3, r0
   224c2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   224c4:	230f      	movs	r3, #15
   224c6:	18fb      	adds	r3, r7, r3
   224c8:	781b      	ldrb	r3, [r3, #0]
   224ca:	b25b      	sxtb	r3, r3
   224cc:	2b00      	cmp	r3, #0
   224ce:	d000      	beq.n	224d2 <chip_wake+0x66>
   224d0:	e06e      	b.n	225b0 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   224d2:	230f      	movs	r3, #15
   224d4:	18fc      	adds	r4, r7, r3
   224d6:	1d3b      	adds	r3, r7, #4
   224d8:	0019      	movs	r1, r3
   224da:	2001      	movs	r0, #1
   224dc:	4b3b      	ldr	r3, [pc, #236]	; (225cc <chip_wake+0x160>)
   224de:	4798      	blx	r3
   224e0:	0003      	movs	r3, r0
   224e2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   224e4:	230f      	movs	r3, #15
   224e6:	18fb      	adds	r3, r7, r3
   224e8:	781b      	ldrb	r3, [r3, #0]
   224ea:	b25b      	sxtb	r3, r3
   224ec:	2b00      	cmp	r3, #0
   224ee:	d161      	bne.n	225b4 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   224f0:	687b      	ldr	r3, [r7, #4]
   224f2:	2202      	movs	r2, #2
   224f4:	4013      	ands	r3, r2
   224f6:	d110      	bne.n	2251a <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   224f8:	687b      	ldr	r3, [r7, #4]
   224fa:	2202      	movs	r2, #2
   224fc:	4313      	orrs	r3, r2
   224fe:	220f      	movs	r2, #15
   22500:	18bc      	adds	r4, r7, r2
   22502:	0019      	movs	r1, r3
   22504:	2001      	movs	r0, #1
   22506:	4b32      	ldr	r3, [pc, #200]	; (225d0 <chip_wake+0x164>)
   22508:	4798      	blx	r3
   2250a:	0003      	movs	r3, r0
   2250c:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   2250e:	230f      	movs	r3, #15
   22510:	18fb      	adds	r3, r7, r3
   22512:	781b      	ldrb	r3, [r3, #0]
   22514:	b25b      	sxtb	r3, r3
   22516:	2b00      	cmp	r3, #0
   22518:	d14e      	bne.n	225b8 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2251a:	230f      	movs	r3, #15
   2251c:	18fc      	adds	r4, r7, r3
   2251e:	003b      	movs	r3, r7
   22520:	0019      	movs	r1, r3
   22522:	200f      	movs	r0, #15
   22524:	4b29      	ldr	r3, [pc, #164]	; (225cc <chip_wake+0x160>)
   22526:	4798      	blx	r3
   22528:	0003      	movs	r3, r0
   2252a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   2252c:	230f      	movs	r3, #15
   2252e:	18fb      	adds	r3, r7, r3
   22530:	781b      	ldrb	r3, [r3, #0]
   22532:	b25b      	sxtb	r3, r3
   22534:	2b00      	cmp	r3, #0
   22536:	d014      	beq.n	22562 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   22538:	23a8      	movs	r3, #168	; 0xa8
   2253a:	005a      	lsls	r2, r3, #1
   2253c:	4925      	ldr	r1, [pc, #148]	; (225d4 <chip_wake+0x168>)
   2253e:	4b26      	ldr	r3, [pc, #152]	; (225d8 <chip_wake+0x16c>)
   22540:	0018      	movs	r0, r3
   22542:	4b26      	ldr	r3, [pc, #152]	; (225dc <chip_wake+0x170>)
   22544:	4798      	blx	r3
   22546:	230f      	movs	r3, #15
   22548:	18fb      	adds	r3, r7, r3
   2254a:	2100      	movs	r1, #0
   2254c:	5659      	ldrsb	r1, [r3, r1]
   2254e:	683a      	ldr	r2, [r7, #0]
   22550:	4b23      	ldr	r3, [pc, #140]	; (225e0 <chip_wake+0x174>)
   22552:	0018      	movs	r0, r3
   22554:	4b21      	ldr	r3, [pc, #132]	; (225dc <chip_wake+0x170>)
   22556:	4798      	blx	r3
   22558:	4b22      	ldr	r3, [pc, #136]	; (225e4 <chip_wake+0x178>)
   2255a:	0018      	movs	r0, r3
   2255c:	4b1f      	ldr	r3, [pc, #124]	; (225dc <chip_wake+0x170>)
   2255e:	4798      	blx	r3
			goto _WAKE_EXIT;
   22560:	e02b      	b.n	225ba <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   22562:	683b      	ldr	r3, [r7, #0]
   22564:	2204      	movs	r2, #4
   22566:	4013      	ands	r3, r2
   22568:	d11c      	bne.n	225a4 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   2256a:	2002      	movs	r0, #2
   2256c:	4b1e      	ldr	r3, [pc, #120]	; (225e8 <chip_wake+0x17c>)
   2256e:	4798      	blx	r3
		trials++;
   22570:	68bb      	ldr	r3, [r7, #8]
   22572:	3301      	adds	r3, #1
   22574:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   22576:	68bb      	ldr	r3, [r7, #8]
   22578:	2b04      	cmp	r3, #4
   2257a:	d9ce      	bls.n	2251a <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   2257c:	23ad      	movs	r3, #173	; 0xad
   2257e:	005a      	lsls	r2, r3, #1
   22580:	4914      	ldr	r1, [pc, #80]	; (225d4 <chip_wake+0x168>)
   22582:	4b15      	ldr	r3, [pc, #84]	; (225d8 <chip_wake+0x16c>)
   22584:	0018      	movs	r0, r3
   22586:	4b15      	ldr	r3, [pc, #84]	; (225dc <chip_wake+0x170>)
   22588:	4798      	blx	r3
   2258a:	4b18      	ldr	r3, [pc, #96]	; (225ec <chip_wake+0x180>)
   2258c:	0018      	movs	r0, r3
   2258e:	4b13      	ldr	r3, [pc, #76]	; (225dc <chip_wake+0x170>)
   22590:	4798      	blx	r3
   22592:	4b14      	ldr	r3, [pc, #80]	; (225e4 <chip_wake+0x178>)
   22594:	0018      	movs	r0, r3
   22596:	4b11      	ldr	r3, [pc, #68]	; (225dc <chip_wake+0x170>)
   22598:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   2259a:	230f      	movs	r3, #15
   2259c:	18fb      	adds	r3, r7, r3
   2259e:	22fc      	movs	r2, #252	; 0xfc
   225a0:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   225a2:	e00a      	b.n	225ba <chip_wake+0x14e>
			break;
   225a4:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   225a6:	4b12      	ldr	r3, [pc, #72]	; (225f0 <chip_wake+0x184>)
   225a8:	4798      	blx	r3
   225aa:	e006      	b.n	225ba <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   225ac:	46c0      	nop			; (mov r8, r8)
   225ae:	e004      	b.n	225ba <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   225b0:	46c0      	nop			; (mov r8, r8)
   225b2:	e002      	b.n	225ba <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   225b4:	46c0      	nop			; (mov r8, r8)
   225b6:	e000      	b.n	225ba <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   225b8:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   225ba:	230f      	movs	r3, #15
   225bc:	18fb      	adds	r3, r7, r3
   225be:	781b      	ldrb	r3, [r3, #0]
   225c0:	b25b      	sxtb	r3, r3
}
   225c2:	0018      	movs	r0, r3
   225c4:	46bd      	mov	sp, r7
   225c6:	b005      	add	sp, #20
   225c8:	bd90      	pop	{r4, r7, pc}
   225ca:	46c0      	nop			; (mov r8, r8)
   225cc:	0002299d 	.word	0x0002299d
   225d0:	000229c1 	.word	0x000229c1
   225d4:	00038854 	.word	0x00038854
   225d8:	000387c8 	.word	0x000387c8
   225dc:	0001dbd9 	.word	0x0001dbd9
   225e0:	000387dc 	.word	0x000387dc
   225e4:	000387f4 	.word	0x000387f4
   225e8:	0002002d 	.word	0x0002002d
   225ec:	000387f8 	.word	0x000387f8
   225f0:	0002295d 	.word	0x0002295d

000225f4 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   225f4:	b580      	push	{r7, lr}
   225f6:	b088      	sub	sp, #32
   225f8:	af00      	add	r7, sp, #0
   225fa:	0002      	movs	r2, r0
   225fc:	1dfb      	adds	r3, r7, #7
   225fe:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22600:	2313      	movs	r3, #19
   22602:	18fb      	adds	r3, r7, r3
   22604:	2200      	movs	r2, #0
   22606:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   22608:	2300      	movs	r3, #0
   2260a:	61fb      	str	r3, [r7, #28]
   2260c:	2300      	movs	r3, #0
   2260e:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   22610:	2300      	movs	r3, #0
   22612:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   22614:	4b4a      	ldr	r3, [pc, #296]	; (22740 <wait_for_bootrom+0x14c>)
   22616:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   22618:	2300      	movs	r3, #0
   2261a:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   2261c:	4b49      	ldr	r3, [pc, #292]	; (22744 <wait_for_bootrom+0x150>)
   2261e:	0018      	movs	r0, r3
   22620:	4b49      	ldr	r3, [pc, #292]	; (22748 <wait_for_bootrom+0x154>)
   22622:	4798      	blx	r3
   22624:	0003      	movs	r3, r0
   22626:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   22628:	69fb      	ldr	r3, [r7, #28]
   2262a:	2b00      	cmp	r3, #0
   2262c:	db03      	blt.n	22636 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   2262e:	2001      	movs	r0, #1
   22630:	4b46      	ldr	r3, [pc, #280]	; (2274c <wait_for_bootrom+0x158>)
   22632:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22634:	e7f2      	b.n	2261c <wait_for_bootrom+0x28>
			break;
   22636:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   22638:	4b45      	ldr	r3, [pc, #276]	; (22750 <wait_for_bootrom+0x15c>)
   2263a:	0018      	movs	r0, r3
   2263c:	4b42      	ldr	r3, [pc, #264]	; (22748 <wait_for_bootrom+0x154>)
   2263e:	4798      	blx	r3
   22640:	0003      	movs	r3, r0
   22642:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   22644:	69fb      	ldr	r3, [r7, #28]
   22646:	2201      	movs	r2, #1
   22648:	4013      	ands	r3, r2
   2264a:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   2264c:	69fb      	ldr	r3, [r7, #28]
   2264e:	2b00      	cmp	r3, #0
   22650:	d112      	bne.n	22678 <wait_for_bootrom+0x84>
	{
		reg = 0;
   22652:	2300      	movs	r3, #0
   22654:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   22656:	e00b      	b.n	22670 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   22658:	2001      	movs	r0, #1
   2265a:	4b3c      	ldr	r3, [pc, #240]	; (2274c <wait_for_bootrom+0x158>)
   2265c:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   2265e:	4b3d      	ldr	r3, [pc, #244]	; (22754 <wait_for_bootrom+0x160>)
   22660:	0018      	movs	r0, r3
   22662:	4b39      	ldr	r3, [pc, #228]	; (22748 <wait_for_bootrom+0x154>)
   22664:	4798      	blx	r3
   22666:	0003      	movs	r3, r0
   22668:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   2266a:	69bb      	ldr	r3, [r7, #24]
   2266c:	3301      	adds	r3, #1
   2266e:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   22670:	69fb      	ldr	r3, [r7, #28]
   22672:	4a39      	ldr	r2, [pc, #228]	; (22758 <wait_for_bootrom+0x164>)
   22674:	4293      	cmp	r3, r2
   22676:	d1ef      	bne.n	22658 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   22678:	1dfb      	adds	r3, r7, #7
   2267a:	781b      	ldrb	r3, [r3, #0]
   2267c:	2b02      	cmp	r3, #2
   2267e:	d10d      	bne.n	2269c <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22680:	4a36      	ldr	r2, [pc, #216]	; (2275c <wait_for_bootrom+0x168>)
   22682:	4b37      	ldr	r3, [pc, #220]	; (22760 <wait_for_bootrom+0x16c>)
   22684:	0011      	movs	r1, r2
   22686:	0018      	movs	r0, r3
   22688:	4b36      	ldr	r3, [pc, #216]	; (22764 <wait_for_bootrom+0x170>)
   2268a:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   2268c:	2380      	movs	r3, #128	; 0x80
   2268e:	035b      	lsls	r3, r3, #13
   22690:	4a35      	ldr	r2, [pc, #212]	; (22768 <wait_for_bootrom+0x174>)
   22692:	0019      	movs	r1, r3
   22694:	0010      	movs	r0, r2
   22696:	4b33      	ldr	r3, [pc, #204]	; (22764 <wait_for_bootrom+0x170>)
   22698:	4798      	blx	r3
   2269a:	e022      	b.n	226e2 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   2269c:	1dfb      	adds	r3, r7, #7
   2269e:	781b      	ldrb	r3, [r3, #0]
   226a0:	2b03      	cmp	r3, #3
   226a2:	d10b      	bne.n	226bc <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   226a4:	4a2d      	ldr	r2, [pc, #180]	; (2275c <wait_for_bootrom+0x168>)
   226a6:	4b2e      	ldr	r3, [pc, #184]	; (22760 <wait_for_bootrom+0x16c>)
   226a8:	0011      	movs	r1, r2
   226aa:	0018      	movs	r0, r3
   226ac:	4b2d      	ldr	r3, [pc, #180]	; (22764 <wait_for_bootrom+0x170>)
   226ae:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   226b0:	4b2d      	ldr	r3, [pc, #180]	; (22768 <wait_for_bootrom+0x174>)
   226b2:	2100      	movs	r1, #0
   226b4:	0018      	movs	r0, r3
   226b6:	4b2b      	ldr	r3, [pc, #172]	; (22764 <wait_for_bootrom+0x170>)
   226b8:	4798      	blx	r3
   226ba:	e012      	b.n	226e2 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   226bc:	1dfb      	adds	r3, r7, #7
   226be:	781b      	ldrb	r3, [r3, #0]
   226c0:	2b04      	cmp	r3, #4
   226c2:	d108      	bne.n	226d6 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   226c4:	2380      	movs	r3, #128	; 0x80
   226c6:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   226c8:	68fb      	ldr	r3, [r7, #12]
   226ca:	4a27      	ldr	r2, [pc, #156]	; (22768 <wait_for_bootrom+0x174>)
   226cc:	0019      	movs	r1, r3
   226ce:	0010      	movs	r0, r2
   226d0:	4b24      	ldr	r3, [pc, #144]	; (22764 <wait_for_bootrom+0x170>)
   226d2:	4798      	blx	r3
   226d4:	e005      	b.n	226e2 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   226d6:	68fb      	ldr	r3, [r7, #12]
   226d8:	4a23      	ldr	r2, [pc, #140]	; (22768 <wait_for_bootrom+0x174>)
   226da:	0019      	movs	r1, r3
   226dc:	0010      	movs	r0, r2
   226de:	4b21      	ldr	r3, [pc, #132]	; (22764 <wait_for_bootrom+0x170>)
   226e0:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   226e2:	4b22      	ldr	r3, [pc, #136]	; (2276c <wait_for_bootrom+0x178>)
   226e4:	4798      	blx	r3
   226e6:	0003      	movs	r3, r0
   226e8:	051b      	lsls	r3, r3, #20
   226ea:	0d1b      	lsrs	r3, r3, #20
   226ec:	4a20      	ldr	r2, [pc, #128]	; (22770 <wait_for_bootrom+0x17c>)
   226ee:	4293      	cmp	r3, r2
   226f0:	d906      	bls.n	22700 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   226f2:	697b      	ldr	r3, [r7, #20]
   226f4:	2202      	movs	r2, #2
   226f6:	4313      	orrs	r3, r2
   226f8:	0018      	movs	r0, r3
   226fa:	4b1e      	ldr	r3, [pc, #120]	; (22774 <wait_for_bootrom+0x180>)
   226fc:	4798      	blx	r3
   226fe:	e003      	b.n	22708 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   22700:	697b      	ldr	r3, [r7, #20]
   22702:	0018      	movs	r0, r3
   22704:	4b1b      	ldr	r3, [pc, #108]	; (22774 <wait_for_bootrom+0x180>)
   22706:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   22708:	4b1b      	ldr	r3, [pc, #108]	; (22778 <wait_for_bootrom+0x184>)
   2270a:	0018      	movs	r0, r3
   2270c:	4b1b      	ldr	r3, [pc, #108]	; (2277c <wait_for_bootrom+0x188>)
   2270e:	4798      	blx	r3
   22710:	68fa      	ldr	r2, [r7, #12]
   22712:	4b1b      	ldr	r3, [pc, #108]	; (22780 <wait_for_bootrom+0x18c>)
   22714:	0011      	movs	r1, r2
   22716:	0018      	movs	r0, r3
   22718:	4b18      	ldr	r3, [pc, #96]	; (2277c <wait_for_bootrom+0x188>)
   2271a:	4798      	blx	r3
   2271c:	4b19      	ldr	r3, [pc, #100]	; (22784 <wait_for_bootrom+0x190>)
   2271e:	0018      	movs	r0, r3
   22720:	4b16      	ldr	r3, [pc, #88]	; (2277c <wait_for_bootrom+0x188>)
   22722:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   22724:	4a18      	ldr	r2, [pc, #96]	; (22788 <wait_for_bootrom+0x194>)
   22726:	4b0b      	ldr	r3, [pc, #44]	; (22754 <wait_for_bootrom+0x160>)
   22728:	0011      	movs	r1, r2
   2272a:	0018      	movs	r0, r3
   2272c:	4b0d      	ldr	r3, [pc, #52]	; (22764 <wait_for_bootrom+0x170>)
   2272e:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   22730:	2313      	movs	r3, #19
   22732:	18fb      	adds	r3, r7, r3
   22734:	781b      	ldrb	r3, [r3, #0]
   22736:	b25b      	sxtb	r3, r3
}
   22738:	0018      	movs	r0, r3
   2273a:	46bd      	mov	sp, r7
   2273c:	b008      	add	sp, #32
   2273e:	bd80      	pop	{r7, pc}
   22740:	13301354 	.word	0x13301354
   22744:	00001014 	.word	0x00001014
   22748:	0002297d 	.word	0x0002297d
   2274c:	0002002d 	.word	0x0002002d
   22750:	000207bc 	.word	0x000207bc
   22754:	000c000c 	.word	0x000c000c
   22758:	10add09e 	.word	0x10add09e
   2275c:	3c1cd57d 	.word	0x3c1cd57d
   22760:	000207ac 	.word	0x000207ac
   22764:	000229c1 	.word	0x000229c1
   22768:	0000108c 	.word	0x0000108c
   2276c:	0002229d 	.word	0x0002229d
   22770:	0000039f 	.word	0x0000039f
   22774:	0002216d 	.word	0x0002216d
   22778:	00038814 	.word	0x00038814
   2277c:	0001dbd9 	.word	0x0001dbd9
   22780:	00038820 	.word	0x00038820
   22784:	000387f4 	.word	0x000387f4
   22788:	ef522f61 	.word	0xef522f61

0002278c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   2278c:	b580      	push	{r7, lr}
   2278e:	b088      	sub	sp, #32
   22790:	af00      	add	r7, sp, #0
   22792:	0002      	movs	r2, r0
   22794:	1dfb      	adds	r3, r7, #7
   22796:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22798:	231f      	movs	r3, #31
   2279a:	18fb      	adds	r3, r7, r3
   2279c:	2200      	movs	r2, #0
   2279e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   227a0:	2300      	movs	r3, #0
   227a2:	61bb      	str	r3, [r7, #24]
   227a4:	2300      	movs	r3, #0
   227a6:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   227a8:	2301      	movs	r3, #1
   227aa:	425b      	negs	r3, r3
   227ac:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   227ae:	4b1d      	ldr	r3, [pc, #116]	; (22824 <wait_for_firmware_start+0x98>)
   227b0:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   227b2:	4b1d      	ldr	r3, [pc, #116]	; (22828 <wait_for_firmware_start+0x9c>)
   227b4:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   227b6:	1dfb      	adds	r3, r7, #7
   227b8:	781b      	ldrb	r3, [r3, #0]
   227ba:	2b02      	cmp	r3, #2
   227bc:	d003      	beq.n	227c6 <wait_for_firmware_start+0x3a>
   227be:	1dfb      	adds	r3, r7, #7
   227c0:	781b      	ldrb	r3, [r3, #0]
   227c2:	2b03      	cmp	r3, #3
   227c4:	d119      	bne.n	227fa <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   227c6:	4b19      	ldr	r3, [pc, #100]	; (2282c <wait_for_firmware_start+0xa0>)
   227c8:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   227ca:	4b19      	ldr	r3, [pc, #100]	; (22830 <wait_for_firmware_start+0xa4>)
   227cc:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   227ce:	e014      	b.n	227fa <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   227d0:	2002      	movs	r0, #2
   227d2:	4b18      	ldr	r3, [pc, #96]	; (22834 <wait_for_firmware_start+0xa8>)
   227d4:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   227d6:	68fb      	ldr	r3, [r7, #12]
   227d8:	0018      	movs	r0, r3
   227da:	4b17      	ldr	r3, [pc, #92]	; (22838 <wait_for_firmware_start+0xac>)
   227dc:	4798      	blx	r3
   227de:	0003      	movs	r3, r0
   227e0:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   227e2:	697b      	ldr	r3, [r7, #20]
   227e4:	3301      	adds	r3, #1
   227e6:	617b      	str	r3, [r7, #20]
   227e8:	697a      	ldr	r2, [r7, #20]
   227ea:	693b      	ldr	r3, [r7, #16]
   227ec:	429a      	cmp	r2, r3
   227ee:	d304      	bcc.n	227fa <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   227f0:	231f      	movs	r3, #31
   227f2:	18fb      	adds	r3, r7, r3
   227f4:	22fb      	movs	r2, #251	; 0xfb
   227f6:	701a      	strb	r2, [r3, #0]
			goto ERR;
   227f8:	e00c      	b.n	22814 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   227fa:	68ba      	ldr	r2, [r7, #8]
   227fc:	69bb      	ldr	r3, [r7, #24]
   227fe:	429a      	cmp	r2, r3
   22800:	d1e6      	bne.n	227d0 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   22802:	68bb      	ldr	r3, [r7, #8]
   22804:	4a08      	ldr	r2, [pc, #32]	; (22828 <wait_for_firmware_start+0x9c>)
   22806:	4293      	cmp	r3, r2
   22808:	d104      	bne.n	22814 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   2280a:	4b06      	ldr	r3, [pc, #24]	; (22824 <wait_for_firmware_start+0x98>)
   2280c:	2100      	movs	r1, #0
   2280e:	0018      	movs	r0, r3
   22810:	4b0a      	ldr	r3, [pc, #40]	; (2283c <wait_for_firmware_start+0xb0>)
   22812:	4798      	blx	r3
	}
ERR:
	return ret;
   22814:	231f      	movs	r3, #31
   22816:	18fb      	adds	r3, r7, r3
   22818:	781b      	ldrb	r3, [r3, #0]
   2281a:	b25b      	sxtb	r3, r3
}
   2281c:	0018      	movs	r0, r3
   2281e:	46bd      	mov	sp, r7
   22820:	b008      	add	sp, #32
   22822:	bd80      	pop	{r7, pc}
   22824:	0000108c 	.word	0x0000108c
   22828:	02532636 	.word	0x02532636
   2282c:	000207ac 	.word	0x000207ac
   22830:	d75dc1c3 	.word	0xd75dc1c3
   22834:	0002002d 	.word	0x0002002d
   22838:	0002297d 	.word	0x0002297d
   2283c:	000229c1 	.word	0x000229c1

00022840 <chip_deinit>:

sint8 chip_deinit(void)
{
   22840:	b590      	push	{r4, r7, lr}
   22842:	b083      	sub	sp, #12
   22844:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   22846:	2300      	movs	r3, #0
   22848:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   2284a:	1dfc      	adds	r4, r7, #7
   2284c:	003a      	movs	r2, r7
   2284e:	23a0      	movs	r3, #160	; 0xa0
   22850:	015b      	lsls	r3, r3, #5
   22852:	0011      	movs	r1, r2
   22854:	0018      	movs	r0, r3
   22856:	4b20      	ldr	r3, [pc, #128]	; (228d8 <chip_deinit+0x98>)
   22858:	4798      	blx	r3
   2285a:	0003      	movs	r3, r0
   2285c:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   2285e:	1dfb      	adds	r3, r7, #7
   22860:	781b      	ldrb	r3, [r3, #0]
   22862:	b25b      	sxtb	r3, r3
   22864:	2b00      	cmp	r3, #0
   22866:	d00e      	beq.n	22886 <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   22868:	4a1c      	ldr	r2, [pc, #112]	; (228dc <chip_deinit+0x9c>)
   2286a:	491d      	ldr	r1, [pc, #116]	; (228e0 <chip_deinit+0xa0>)
   2286c:	4b1d      	ldr	r3, [pc, #116]	; (228e4 <chip_deinit+0xa4>)
   2286e:	0018      	movs	r0, r3
   22870:	4b1d      	ldr	r3, [pc, #116]	; (228e8 <chip_deinit+0xa8>)
   22872:	4798      	blx	r3
   22874:	4b1d      	ldr	r3, [pc, #116]	; (228ec <chip_deinit+0xac>)
   22876:	0018      	movs	r0, r3
   22878:	4b1b      	ldr	r3, [pc, #108]	; (228e8 <chip_deinit+0xa8>)
   2287a:	4798      	blx	r3
   2287c:	4b1c      	ldr	r3, [pc, #112]	; (228f0 <chip_deinit+0xb0>)
   2287e:	0018      	movs	r0, r3
   22880:	4b19      	ldr	r3, [pc, #100]	; (228e8 <chip_deinit+0xa8>)
   22882:	4798      	blx	r3
		goto ERR1;
   22884:	e021      	b.n	228ca <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   22886:	683b      	ldr	r3, [r7, #0]
   22888:	4a1a      	ldr	r2, [pc, #104]	; (228f4 <chip_deinit+0xb4>)
   2288a:	4013      	ands	r3, r2
   2288c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   2288e:	683a      	ldr	r2, [r7, #0]
   22890:	1dfc      	adds	r4, r7, #7
   22892:	23a0      	movs	r3, #160	; 0xa0
   22894:	015b      	lsls	r3, r3, #5
   22896:	0011      	movs	r1, r2
   22898:	0018      	movs	r0, r3
   2289a:	4b17      	ldr	r3, [pc, #92]	; (228f8 <chip_deinit+0xb8>)
   2289c:	4798      	blx	r3
   2289e:	0003      	movs	r3, r0
   228a0:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   228a2:	1dfb      	adds	r3, r7, #7
   228a4:	781b      	ldrb	r3, [r3, #0]
   228a6:	b25b      	sxtb	r3, r3
   228a8:	2b00      	cmp	r3, #0
   228aa:	d00e      	beq.n	228ca <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   228ac:	4a13      	ldr	r2, [pc, #76]	; (228fc <chip_deinit+0xbc>)
   228ae:	490c      	ldr	r1, [pc, #48]	; (228e0 <chip_deinit+0xa0>)
   228b0:	4b0c      	ldr	r3, [pc, #48]	; (228e4 <chip_deinit+0xa4>)
   228b2:	0018      	movs	r0, r3
   228b4:	4b0c      	ldr	r3, [pc, #48]	; (228e8 <chip_deinit+0xa8>)
   228b6:	4798      	blx	r3
   228b8:	4b0c      	ldr	r3, [pc, #48]	; (228ec <chip_deinit+0xac>)
   228ba:	0018      	movs	r0, r3
   228bc:	4b0a      	ldr	r3, [pc, #40]	; (228e8 <chip_deinit+0xa8>)
   228be:	4798      	blx	r3
   228c0:	4b0b      	ldr	r3, [pc, #44]	; (228f0 <chip_deinit+0xb0>)
   228c2:	0018      	movs	r0, r3
   228c4:	4b08      	ldr	r3, [pc, #32]	; (228e8 <chip_deinit+0xa8>)
   228c6:	4798      	blx	r3
		goto ERR1;
   228c8:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   228ca:	1dfb      	adds	r3, r7, #7
   228cc:	781b      	ldrb	r3, [r3, #0]
   228ce:	b25b      	sxtb	r3, r3
}
   228d0:	0018      	movs	r0, r3
   228d2:	46bd      	mov	sp, r7
   228d4:	b003      	add	sp, #12
   228d6:	bd90      	pop	{r4, r7, pc}
   228d8:	0002299d 	.word	0x0002299d
   228dc:	00000201 	.word	0x00000201
   228e0:	00038860 	.word	0x00038860
   228e4:	000387c8 	.word	0x000387c8
   228e8:	0001dbd9 	.word	0x0001dbd9
   228ec:	00038838 	.word	0x00038838
   228f0:	000387f4 	.word	0x000387f4
   228f4:	fffffbff 	.word	0xfffffbff
   228f8:	000229c1 	.word	0x000229c1
   228fc:	00000207 	.word	0x00000207

00022900 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   22900:	b590      	push	{r4, r7, lr}
   22902:	b085      	sub	sp, #20
   22904:	af00      	add	r7, sp, #0
   22906:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22908:	230f      	movs	r3, #15
   2290a:	18fb      	adds	r3, r7, r3
   2290c:	2200      	movs	r2, #0
   2290e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   22910:	230f      	movs	r3, #15
   22912:	18fc      	adds	r4, r7, r3
   22914:	687b      	ldr	r3, [r7, #4]
   22916:	0018      	movs	r0, r3
   22918:	4b05      	ldr	r3, [pc, #20]	; (22930 <nm_bus_iface_init+0x30>)
   2291a:	4798      	blx	r3
   2291c:	0003      	movs	r3, r0
   2291e:	7023      	strb	r3, [r4, #0]
	return ret;
   22920:	230f      	movs	r3, #15
   22922:	18fb      	adds	r3, r7, r3
   22924:	781b      	ldrb	r3, [r3, #0]
   22926:	b25b      	sxtb	r3, r3
}
   22928:	0018      	movs	r0, r3
   2292a:	46bd      	mov	sp, r7
   2292c:	b005      	add	sp, #20
   2292e:	bd90      	pop	{r4, r7, pc}
   22930:	000206e9 	.word	0x000206e9

00022934 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   22934:	b590      	push	{r4, r7, lr}
   22936:	b083      	sub	sp, #12
   22938:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2293a:	1dfb      	adds	r3, r7, #7
   2293c:	2200      	movs	r2, #0
   2293e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   22940:	1dfc      	adds	r4, r7, #7
   22942:	4b05      	ldr	r3, [pc, #20]	; (22958 <nm_bus_iface_deinit+0x24>)
   22944:	4798      	blx	r3
   22946:	0003      	movs	r3, r0
   22948:	7023      	strb	r3, [r4, #0]

	return ret;
   2294a:	1dfb      	adds	r3, r7, #7
   2294c:	781b      	ldrb	r3, [r3, #0]
   2294e:	b25b      	sxtb	r3, r3
}
   22950:	0018      	movs	r0, r3
   22952:	46bd      	mov	sp, r7
   22954:	b003      	add	sp, #12
   22956:	bd90      	pop	{r4, r7, pc}
   22958:	00020861 	.word	0x00020861

0002295c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   2295c:	b580      	push	{r7, lr}
   2295e:	b082      	sub	sp, #8
   22960:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22962:	1dfb      	adds	r3, r7, #7
   22964:	2200      	movs	r2, #0
   22966:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   22968:	4b03      	ldr	r3, [pc, #12]	; (22978 <nm_bus_reset+0x1c>)
   2296a:	4798      	blx	r3
   2296c:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   2296e:	0018      	movs	r0, r3
   22970:	46bd      	mov	sp, r7
   22972:	b002      	add	sp, #8
   22974:	bd80      	pop	{r7, pc}
   22976:	46c0      	nop			; (mov r8, r8)
   22978:	00024789 	.word	0x00024789

0002297c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   2297c:	b580      	push	{r7, lr}
   2297e:	b082      	sub	sp, #8
   22980:	af00      	add	r7, sp, #0
   22982:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   22984:	687b      	ldr	r3, [r7, #4]
   22986:	0018      	movs	r0, r3
   22988:	4b03      	ldr	r3, [pc, #12]	; (22998 <nm_read_reg+0x1c>)
   2298a:	4798      	blx	r3
   2298c:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   2298e:	0018      	movs	r0, r3
   22990:	46bd      	mov	sp, r7
   22992:	b002      	add	sp, #8
   22994:	bd80      	pop	{r7, pc}
   22996:	46c0      	nop			; (mov r8, r8)
   22998:	0002491d 	.word	0x0002491d

0002299c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   2299c:	b580      	push	{r7, lr}
   2299e:	b082      	sub	sp, #8
   229a0:	af00      	add	r7, sp, #0
   229a2:	6078      	str	r0, [r7, #4]
   229a4:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   229a6:	683a      	ldr	r2, [r7, #0]
   229a8:	687b      	ldr	r3, [r7, #4]
   229aa:	0011      	movs	r1, r2
   229ac:	0018      	movs	r0, r3
   229ae:	4b03      	ldr	r3, [pc, #12]	; (229bc <nm_read_reg_with_ret+0x20>)
   229b0:	4798      	blx	r3
   229b2:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   229b4:	0018      	movs	r0, r3
   229b6:	46bd      	mov	sp, r7
   229b8:	b002      	add	sp, #8
   229ba:	bd80      	pop	{r7, pc}
   229bc:	00024941 	.word	0x00024941

000229c0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   229c0:	b580      	push	{r7, lr}
   229c2:	b082      	sub	sp, #8
   229c4:	af00      	add	r7, sp, #0
   229c6:	6078      	str	r0, [r7, #4]
   229c8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   229ca:	683a      	ldr	r2, [r7, #0]
   229cc:	687b      	ldr	r3, [r7, #4]
   229ce:	0011      	movs	r1, r2
   229d0:	0018      	movs	r0, r3
   229d2:	4b03      	ldr	r3, [pc, #12]	; (229e0 <nm_write_reg+0x20>)
   229d4:	4798      	blx	r3
   229d6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   229d8:	0018      	movs	r0, r3
   229da:	46bd      	mov	sp, r7
   229dc:	b002      	add	sp, #8
   229de:	bd80      	pop	{r7, pc}
   229e0:	00024991 	.word	0x00024991

000229e4 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   229e4:	b580      	push	{r7, lr}
   229e6:	b084      	sub	sp, #16
   229e8:	af00      	add	r7, sp, #0
   229ea:	60f8      	str	r0, [r7, #12]
   229ec:	60b9      	str	r1, [r7, #8]
   229ee:	1dbb      	adds	r3, r7, #6
   229f0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   229f2:	1dbb      	adds	r3, r7, #6
   229f4:	881a      	ldrh	r2, [r3, #0]
   229f6:	68b9      	ldr	r1, [r7, #8]
   229f8:	68fb      	ldr	r3, [r7, #12]
   229fa:	0018      	movs	r0, r3
   229fc:	4b03      	ldr	r3, [pc, #12]	; (22a0c <p_nm_read_block+0x28>)
   229fe:	4798      	blx	r3
   22a00:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   22a02:	0018      	movs	r0, r3
   22a04:	46bd      	mov	sp, r7
   22a06:	b004      	add	sp, #16
   22a08:	bd80      	pop	{r7, pc}
   22a0a:	46c0      	nop			; (mov r8, r8)
   22a0c:	000249e1 	.word	0x000249e1

00022a10 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   22a10:	b580      	push	{r7, lr}
   22a12:	b086      	sub	sp, #24
   22a14:	af00      	add	r7, sp, #0
   22a16:	60f8      	str	r0, [r7, #12]
   22a18:	60b9      	str	r1, [r7, #8]
   22a1a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   22a1c:	4b2d      	ldr	r3, [pc, #180]	; (22ad4 <nm_read_block+0xc4>)
   22a1e:	881a      	ldrh	r2, [r3, #0]
   22a20:	2310      	movs	r3, #16
   22a22:	18fb      	adds	r3, r7, r3
   22a24:	3a08      	subs	r2, #8
   22a26:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   22a28:	2300      	movs	r3, #0
   22a2a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   22a2c:	2313      	movs	r3, #19
   22a2e:	18fb      	adds	r3, r7, r3
   22a30:	2200      	movs	r2, #0
   22a32:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22a34:	2310      	movs	r3, #16
   22a36:	18fb      	adds	r3, r7, r3
   22a38:	881a      	ldrh	r2, [r3, #0]
   22a3a:	687b      	ldr	r3, [r7, #4]
   22a3c:	429a      	cmp	r2, r3
   22a3e:	d313      	bcc.n	22a68 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22a40:	68ba      	ldr	r2, [r7, #8]
   22a42:	697b      	ldr	r3, [r7, #20]
   22a44:	18d1      	adds	r1, r2, r3
   22a46:	687b      	ldr	r3, [r7, #4]
   22a48:	b29a      	uxth	r2, r3
   22a4a:	68fb      	ldr	r3, [r7, #12]
   22a4c:	0018      	movs	r0, r3
   22a4e:	4b22      	ldr	r3, [pc, #136]	; (22ad8 <nm_read_block+0xc8>)
   22a50:	4798      	blx	r3
   22a52:	0003      	movs	r3, r0
   22a54:	b2da      	uxtb	r2, r3
   22a56:	2313      	movs	r3, #19
   22a58:	18fb      	adds	r3, r7, r3
   22a5a:	781b      	ldrb	r3, [r3, #0]
   22a5c:	18d3      	adds	r3, r2, r3
   22a5e:	b2da      	uxtb	r2, r3
   22a60:	2313      	movs	r3, #19
   22a62:	18fb      	adds	r3, r7, r3
   22a64:	701a      	strb	r2, [r3, #0]
			break;
   22a66:	e02d      	b.n	22ac4 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22a68:	68ba      	ldr	r2, [r7, #8]
   22a6a:	697b      	ldr	r3, [r7, #20]
   22a6c:	18d1      	adds	r1, r2, r3
   22a6e:	2310      	movs	r3, #16
   22a70:	18fb      	adds	r3, r7, r3
   22a72:	881a      	ldrh	r2, [r3, #0]
   22a74:	68fb      	ldr	r3, [r7, #12]
   22a76:	0018      	movs	r0, r3
   22a78:	4b17      	ldr	r3, [pc, #92]	; (22ad8 <nm_read_block+0xc8>)
   22a7a:	4798      	blx	r3
   22a7c:	0003      	movs	r3, r0
   22a7e:	b2da      	uxtb	r2, r3
   22a80:	2313      	movs	r3, #19
   22a82:	18fb      	adds	r3, r7, r3
   22a84:	781b      	ldrb	r3, [r3, #0]
   22a86:	18d3      	adds	r3, r2, r3
   22a88:	b2da      	uxtb	r2, r3
   22a8a:	2313      	movs	r3, #19
   22a8c:	18fb      	adds	r3, r7, r3
   22a8e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22a90:	2313      	movs	r3, #19
   22a92:	18fb      	adds	r3, r7, r3
   22a94:	781b      	ldrb	r3, [r3, #0]
   22a96:	b25b      	sxtb	r3, r3
   22a98:	2b00      	cmp	r3, #0
   22a9a:	d112      	bne.n	22ac2 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   22a9c:	2310      	movs	r3, #16
   22a9e:	18fb      	adds	r3, r7, r3
   22aa0:	881b      	ldrh	r3, [r3, #0]
   22aa2:	687a      	ldr	r2, [r7, #4]
   22aa4:	1ad3      	subs	r3, r2, r3
   22aa6:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   22aa8:	2310      	movs	r3, #16
   22aaa:	18fb      	adds	r3, r7, r3
   22aac:	881b      	ldrh	r3, [r3, #0]
   22aae:	697a      	ldr	r2, [r7, #20]
   22ab0:	18d3      	adds	r3, r2, r3
   22ab2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   22ab4:	2310      	movs	r3, #16
   22ab6:	18fb      	adds	r3, r7, r3
   22ab8:	881b      	ldrh	r3, [r3, #0]
   22aba:	68fa      	ldr	r2, [r7, #12]
   22abc:	18d3      	adds	r3, r2, r3
   22abe:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   22ac0:	e7b8      	b.n	22a34 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   22ac2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   22ac4:	2313      	movs	r3, #19
   22ac6:	18fb      	adds	r3, r7, r3
   22ac8:	781b      	ldrb	r3, [r3, #0]
   22aca:	b25b      	sxtb	r3, r3
}
   22acc:	0018      	movs	r0, r3
   22ace:	46bd      	mov	sp, r7
   22ad0:	b006      	add	sp, #24
   22ad2:	bd80      	pop	{r7, pc}
   22ad4:	20000144 	.word	0x20000144
   22ad8:	000229e5 	.word	0x000229e5

00022adc <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   22adc:	b580      	push	{r7, lr}
   22ade:	b084      	sub	sp, #16
   22ae0:	af00      	add	r7, sp, #0
   22ae2:	60f8      	str	r0, [r7, #12]
   22ae4:	60b9      	str	r1, [r7, #8]
   22ae6:	1dbb      	adds	r3, r7, #6
   22ae8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   22aea:	1dbb      	adds	r3, r7, #6
   22aec:	881a      	ldrh	r2, [r3, #0]
   22aee:	68b9      	ldr	r1, [r7, #8]
   22af0:	68fb      	ldr	r3, [r7, #12]
   22af2:	0018      	movs	r0, r3
   22af4:	4b03      	ldr	r3, [pc, #12]	; (22b04 <p_nm_write_block+0x28>)
   22af6:	4798      	blx	r3
   22af8:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   22afa:	0018      	movs	r0, r3
   22afc:	46bd      	mov	sp, r7
   22afe:	b004      	add	sp, #16
   22b00:	bd80      	pop	{r7, pc}
   22b02:	46c0      	nop			; (mov r8, r8)
   22b04:	00024a39 	.word	0x00024a39

00022b08 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   22b08:	b580      	push	{r7, lr}
   22b0a:	b086      	sub	sp, #24
   22b0c:	af00      	add	r7, sp, #0
   22b0e:	60f8      	str	r0, [r7, #12]
   22b10:	60b9      	str	r1, [r7, #8]
   22b12:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   22b14:	4b2d      	ldr	r3, [pc, #180]	; (22bcc <nm_write_block+0xc4>)
   22b16:	881a      	ldrh	r2, [r3, #0]
   22b18:	2310      	movs	r3, #16
   22b1a:	18fb      	adds	r3, r7, r3
   22b1c:	3a08      	subs	r2, #8
   22b1e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   22b20:	2300      	movs	r3, #0
   22b22:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   22b24:	2313      	movs	r3, #19
   22b26:	18fb      	adds	r3, r7, r3
   22b28:	2200      	movs	r2, #0
   22b2a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22b2c:	2310      	movs	r3, #16
   22b2e:	18fb      	adds	r3, r7, r3
   22b30:	881a      	ldrh	r2, [r3, #0]
   22b32:	687b      	ldr	r3, [r7, #4]
   22b34:	429a      	cmp	r2, r3
   22b36:	d313      	bcc.n	22b60 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22b38:	68ba      	ldr	r2, [r7, #8]
   22b3a:	697b      	ldr	r3, [r7, #20]
   22b3c:	18d1      	adds	r1, r2, r3
   22b3e:	687b      	ldr	r3, [r7, #4]
   22b40:	b29a      	uxth	r2, r3
   22b42:	68fb      	ldr	r3, [r7, #12]
   22b44:	0018      	movs	r0, r3
   22b46:	4b22      	ldr	r3, [pc, #136]	; (22bd0 <nm_write_block+0xc8>)
   22b48:	4798      	blx	r3
   22b4a:	0003      	movs	r3, r0
   22b4c:	b2da      	uxtb	r2, r3
   22b4e:	2313      	movs	r3, #19
   22b50:	18fb      	adds	r3, r7, r3
   22b52:	781b      	ldrb	r3, [r3, #0]
   22b54:	18d3      	adds	r3, r2, r3
   22b56:	b2da      	uxtb	r2, r3
   22b58:	2313      	movs	r3, #19
   22b5a:	18fb      	adds	r3, r7, r3
   22b5c:	701a      	strb	r2, [r3, #0]
			break;
   22b5e:	e02d      	b.n	22bbc <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22b60:	68ba      	ldr	r2, [r7, #8]
   22b62:	697b      	ldr	r3, [r7, #20]
   22b64:	18d1      	adds	r1, r2, r3
   22b66:	2310      	movs	r3, #16
   22b68:	18fb      	adds	r3, r7, r3
   22b6a:	881a      	ldrh	r2, [r3, #0]
   22b6c:	68fb      	ldr	r3, [r7, #12]
   22b6e:	0018      	movs	r0, r3
   22b70:	4b17      	ldr	r3, [pc, #92]	; (22bd0 <nm_write_block+0xc8>)
   22b72:	4798      	blx	r3
   22b74:	0003      	movs	r3, r0
   22b76:	b2da      	uxtb	r2, r3
   22b78:	2313      	movs	r3, #19
   22b7a:	18fb      	adds	r3, r7, r3
   22b7c:	781b      	ldrb	r3, [r3, #0]
   22b7e:	18d3      	adds	r3, r2, r3
   22b80:	b2da      	uxtb	r2, r3
   22b82:	2313      	movs	r3, #19
   22b84:	18fb      	adds	r3, r7, r3
   22b86:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22b88:	2313      	movs	r3, #19
   22b8a:	18fb      	adds	r3, r7, r3
   22b8c:	781b      	ldrb	r3, [r3, #0]
   22b8e:	b25b      	sxtb	r3, r3
   22b90:	2b00      	cmp	r3, #0
   22b92:	d112      	bne.n	22bba <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   22b94:	2310      	movs	r3, #16
   22b96:	18fb      	adds	r3, r7, r3
   22b98:	881b      	ldrh	r3, [r3, #0]
   22b9a:	687a      	ldr	r2, [r7, #4]
   22b9c:	1ad3      	subs	r3, r2, r3
   22b9e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   22ba0:	2310      	movs	r3, #16
   22ba2:	18fb      	adds	r3, r7, r3
   22ba4:	881b      	ldrh	r3, [r3, #0]
   22ba6:	697a      	ldr	r2, [r7, #20]
   22ba8:	18d3      	adds	r3, r2, r3
   22baa:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   22bac:	2310      	movs	r3, #16
   22bae:	18fb      	adds	r3, r7, r3
   22bb0:	881b      	ldrh	r3, [r3, #0]
   22bb2:	68fa      	ldr	r2, [r7, #12]
   22bb4:	18d3      	adds	r3, r2, r3
   22bb6:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   22bb8:	e7b8      	b.n	22b2c <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   22bba:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   22bbc:	2313      	movs	r3, #19
   22bbe:	18fb      	adds	r3, r7, r3
   22bc0:	781b      	ldrb	r3, [r3, #0]
   22bc2:	b25b      	sxtb	r3, r3
}
   22bc4:	0018      	movs	r0, r3
   22bc6:	46bd      	mov	sp, r7
   22bc8:	b006      	add	sp, #24
   22bca:	bd80      	pop	{r7, pc}
   22bcc:	20000144 	.word	0x20000144
   22bd0:	00022add 	.word	0x00022add

00022bd4 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   22bd4:	b590      	push	{r4, r7, lr}
   22bd6:	b089      	sub	sp, #36	; 0x24
   22bd8:	af00      	add	r7, sp, #0
   22bda:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   22bdc:	2300      	movs	r3, #0
   22bde:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   22be0:	231f      	movs	r3, #31
   22be2:	18fb      	adds	r3, r7, r3
   22be4:	2200      	movs	r2, #0
   22be6:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   22be8:	230c      	movs	r3, #12
   22bea:	18fb      	adds	r3, r7, r3
   22bec:	0018      	movs	r0, r3
   22bee:	2308      	movs	r3, #8
   22bf0:	001a      	movs	r2, r3
   22bf2:	2100      	movs	r1, #0
   22bf4:	4b64      	ldr	r3, [pc, #400]	; (22d88 <nm_get_firmware_full_info+0x1b4>)
   22bf6:	4798      	blx	r3
	if (pstrRev != NULL)
   22bf8:	687b      	ldr	r3, [r7, #4]
   22bfa:	2b00      	cmp	r3, #0
   22bfc:	d100      	bne.n	22c00 <nm_get_firmware_full_info+0x2c>
   22bfe:	e0ba      	b.n	22d76 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   22c00:	687b      	ldr	r3, [r7, #4]
   22c02:	2228      	movs	r2, #40	; 0x28
   22c04:	2100      	movs	r1, #0
   22c06:	0018      	movs	r0, r3
   22c08:	4b60      	ldr	r3, [pc, #384]	; (22d8c <nm_get_firmware_full_info+0x1b8>)
   22c0a:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   22c0c:	231f      	movs	r3, #31
   22c0e:	18fc      	adds	r4, r7, r3
   22c10:	2314      	movs	r3, #20
   22c12:	18fb      	adds	r3, r7, r3
   22c14:	4a5e      	ldr	r2, [pc, #376]	; (22d90 <nm_get_firmware_full_info+0x1bc>)
   22c16:	0019      	movs	r1, r3
   22c18:	0010      	movs	r0, r2
   22c1a:	4b5e      	ldr	r3, [pc, #376]	; (22d94 <nm_get_firmware_full_info+0x1c0>)
   22c1c:	4798      	blx	r3
   22c1e:	0003      	movs	r3, r0
   22c20:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   22c22:	231f      	movs	r3, #31
   22c24:	18fb      	adds	r3, r7, r3
   22c26:	781b      	ldrb	r3, [r3, #0]
   22c28:	b25b      	sxtb	r3, r3
   22c2a:	2b00      	cmp	r3, #0
   22c2c:	d000      	beq.n	22c30 <nm_get_firmware_full_info+0x5c>
   22c2e:	e0a2      	b.n	22d76 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   22c30:	697b      	ldr	r3, [r7, #20]
   22c32:	2b00      	cmp	r3, #0
   22c34:	d100      	bne.n	22c38 <nm_get_firmware_full_info+0x64>
   22c36:	e09a      	b.n	22d6e <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   22c38:	697b      	ldr	r3, [r7, #20]
   22c3a:	22c0      	movs	r2, #192	; 0xc0
   22c3c:	0292      	lsls	r2, r2, #10
   22c3e:	4313      	orrs	r3, r2
   22c40:	221f      	movs	r2, #31
   22c42:	18bc      	adds	r4, r7, r2
   22c44:	220c      	movs	r2, #12
   22c46:	18b9      	adds	r1, r7, r2
   22c48:	2208      	movs	r2, #8
   22c4a:	0018      	movs	r0, r3
   22c4c:	4b52      	ldr	r3, [pc, #328]	; (22d98 <nm_get_firmware_full_info+0x1c4>)
   22c4e:	4798      	blx	r3
   22c50:	0003      	movs	r3, r0
   22c52:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   22c54:	231f      	movs	r3, #31
   22c56:	18fb      	adds	r3, r7, r3
   22c58:	781b      	ldrb	r3, [r3, #0]
   22c5a:	b25b      	sxtb	r3, r3
   22c5c:	2b00      	cmp	r3, #0
   22c5e:	d000      	beq.n	22c62 <nm_get_firmware_full_info+0x8e>
   22c60:	e089      	b.n	22d76 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   22c62:	230c      	movs	r3, #12
   22c64:	18fb      	adds	r3, r7, r3
   22c66:	685b      	ldr	r3, [r3, #4]
   22c68:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   22c6a:	697b      	ldr	r3, [r7, #20]
   22c6c:	041b      	lsls	r3, r3, #16
   22c6e:	0c1b      	lsrs	r3, r3, #16
   22c70:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   22c72:	697b      	ldr	r3, [r7, #20]
   22c74:	2b00      	cmp	r3, #0
   22c76:	d100      	bne.n	22c7a <nm_get_firmware_full_info+0xa6>
   22c78:	e074      	b.n	22d64 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   22c7a:	697b      	ldr	r3, [r7, #20]
   22c7c:	22c0      	movs	r2, #192	; 0xc0
   22c7e:	0292      	lsls	r2, r2, #10
   22c80:	4313      	orrs	r3, r2
   22c82:	221f      	movs	r2, #31
   22c84:	18bc      	adds	r4, r7, r2
   22c86:	6879      	ldr	r1, [r7, #4]
   22c88:	2228      	movs	r2, #40	; 0x28
   22c8a:	0018      	movs	r0, r3
   22c8c:	4b42      	ldr	r3, [pc, #264]	; (22d98 <nm_get_firmware_full_info+0x1c4>)
   22c8e:	4798      	blx	r3
   22c90:	0003      	movs	r3, r0
   22c92:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   22c94:	231f      	movs	r3, #31
   22c96:	18fb      	adds	r3, r7, r3
   22c98:	781b      	ldrb	r3, [r3, #0]
   22c9a:	b25b      	sxtb	r3, r3
   22c9c:	2b00      	cmp	r3, #0
   22c9e:	d16a      	bne.n	22d76 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   22ca0:	687b      	ldr	r3, [r7, #4]
   22ca2:	791b      	ldrb	r3, [r3, #4]
   22ca4:	021b      	lsls	r3, r3, #8
   22ca6:	b21a      	sxth	r2, r3
   22ca8:	687b      	ldr	r3, [r7, #4]
   22caa:	795b      	ldrb	r3, [r3, #5]
   22cac:	011b      	lsls	r3, r3, #4
   22cae:	b21b      	sxth	r3, r3
   22cb0:	21ff      	movs	r1, #255	; 0xff
   22cb2:	400b      	ands	r3, r1
   22cb4:	b21b      	sxth	r3, r3
   22cb6:	4313      	orrs	r3, r2
   22cb8:	b21a      	sxth	r2, r3
   22cba:	687b      	ldr	r3, [r7, #4]
   22cbc:	799b      	ldrb	r3, [r3, #6]
   22cbe:	b21b      	sxth	r3, r3
   22cc0:	210f      	movs	r1, #15
   22cc2:	400b      	ands	r3, r1
   22cc4:	b21b      	sxth	r3, r3
   22cc6:	4313      	orrs	r3, r2
   22cc8:	b21a      	sxth	r2, r3
   22cca:	231c      	movs	r3, #28
   22ccc:	18fb      	adds	r3, r7, r3
   22cce:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   22cd0:	231a      	movs	r3, #26
   22cd2:	18fb      	adds	r3, r7, r3
   22cd4:	4a31      	ldr	r2, [pc, #196]	; (22d9c <nm_get_firmware_full_info+0x1c8>)
   22cd6:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   22cd8:	687b      	ldr	r3, [r7, #4]
   22cda:	79db      	ldrb	r3, [r3, #7]
   22cdc:	021b      	lsls	r3, r3, #8
   22cde:	b21a      	sxth	r2, r3
   22ce0:	687b      	ldr	r3, [r7, #4]
   22ce2:	7a1b      	ldrb	r3, [r3, #8]
   22ce4:	011b      	lsls	r3, r3, #4
   22ce6:	b21b      	sxth	r3, r3
   22ce8:	21ff      	movs	r1, #255	; 0xff
   22cea:	400b      	ands	r3, r1
   22cec:	b21b      	sxth	r3, r3
   22cee:	4313      	orrs	r3, r2
   22cf0:	b21a      	sxth	r2, r3
   22cf2:	687b      	ldr	r3, [r7, #4]
   22cf4:	7a5b      	ldrb	r3, [r3, #9]
   22cf6:	b21b      	sxth	r3, r3
   22cf8:	210f      	movs	r1, #15
   22cfa:	400b      	ands	r3, r1
   22cfc:	b21b      	sxth	r3, r3
   22cfe:	4313      	orrs	r3, r2
   22d00:	b21a      	sxth	r2, r3
   22d02:	2318      	movs	r3, #24
   22d04:	18fb      	adds	r3, r7, r3
   22d06:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   22d08:	231c      	movs	r3, #28
   22d0a:	18fb      	adds	r3, r7, r3
   22d0c:	881b      	ldrh	r3, [r3, #0]
   22d0e:	2b00      	cmp	r3, #0
   22d10:	d009      	beq.n	22d26 <nm_get_firmware_full_info+0x152>
   22d12:	2318      	movs	r3, #24
   22d14:	18fb      	adds	r3, r7, r3
   22d16:	881b      	ldrh	r3, [r3, #0]
   22d18:	2b00      	cmp	r3, #0
   22d1a:	d004      	beq.n	22d26 <nm_get_firmware_full_info+0x152>
   22d1c:	2318      	movs	r3, #24
   22d1e:	18fb      	adds	r3, r7, r3
   22d20:	881b      	ldrh	r3, [r3, #0]
   22d22:	2b00      	cmp	r3, #0
   22d24:	d104      	bne.n	22d30 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   22d26:	231f      	movs	r3, #31
   22d28:	18fb      	adds	r3, r7, r3
   22d2a:	22f4      	movs	r2, #244	; 0xf4
   22d2c:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22d2e:	e022      	b.n	22d76 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   22d30:	231a      	movs	r3, #26
   22d32:	18fa      	adds	r2, r7, r3
   22d34:	2318      	movs	r3, #24
   22d36:	18fb      	adds	r3, r7, r3
   22d38:	8812      	ldrh	r2, [r2, #0]
   22d3a:	881b      	ldrh	r3, [r3, #0]
   22d3c:	429a      	cmp	r2, r3
   22d3e:	d204      	bcs.n	22d4a <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   22d40:	231f      	movs	r3, #31
   22d42:	18fb      	adds	r3, r7, r3
   22d44:	22f3      	movs	r2, #243	; 0xf3
   22d46:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22d48:	e015      	b.n	22d76 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   22d4a:	231a      	movs	r3, #26
   22d4c:	18fa      	adds	r2, r7, r3
   22d4e:	231c      	movs	r3, #28
   22d50:	18fb      	adds	r3, r7, r3
   22d52:	8812      	ldrh	r2, [r2, #0]
   22d54:	881b      	ldrh	r3, [r3, #0]
   22d56:	429a      	cmp	r2, r3
   22d58:	d90d      	bls.n	22d76 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   22d5a:	231f      	movs	r3, #31
   22d5c:	18fb      	adds	r3, r7, r3
   22d5e:	22f3      	movs	r2, #243	; 0xf3
   22d60:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22d62:	e008      	b.n	22d76 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   22d64:	231f      	movs	r3, #31
   22d66:	18fb      	adds	r3, r7, r3
   22d68:	22f4      	movs	r2, #244	; 0xf4
   22d6a:	701a      	strb	r2, [r3, #0]
   22d6c:	e003      	b.n	22d76 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   22d6e:	231f      	movs	r3, #31
   22d70:	18fb      	adds	r3, r7, r3
   22d72:	22f4      	movs	r2, #244	; 0xf4
   22d74:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   22d76:	231f      	movs	r3, #31
   22d78:	18fb      	adds	r3, r7, r3
   22d7a:	781b      	ldrb	r3, [r3, #0]
   22d7c:	b25b      	sxtb	r3, r3
}
   22d7e:	0018      	movs	r0, r3
   22d80:	46bd      	mov	sp, r7
   22d82:	b009      	add	sp, #36	; 0x24
   22d84:	bd90      	pop	{r4, r7, pc}
   22d86:	46c0      	nop			; (mov r8, r8)
   22d88:	000346df 	.word	0x000346df
   22d8c:	0002090d 	.word	0x0002090d
   22d90:	000c0008 	.word	0x000c0008
   22d94:	0002299d 	.word	0x0002299d
   22d98:	00022a11 	.word	0x00022a11
   22d9c:	00001354 	.word	0x00001354

00022da0 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   22da0:	b590      	push	{r4, r7, lr}
   22da2:	b085      	sub	sp, #20
   22da4:	af00      	add	r7, sp, #0
   22da6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22da8:	230f      	movs	r3, #15
   22daa:	18fb      	adds	r3, r7, r3
   22dac:	2200      	movs	r2, #0
   22dae:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   22db0:	687b      	ldr	r3, [r7, #4]
   22db2:	2b00      	cmp	r3, #0
   22db4:	d013      	beq.n	22dde <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   22db6:	230e      	movs	r3, #14
   22db8:	18fb      	adds	r3, r7, r3
   22dba:	687a      	ldr	r2, [r7, #4]
   22dbc:	7812      	ldrb	r2, [r2, #0]
   22dbe:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   22dc0:	230e      	movs	r3, #14
   22dc2:	18fb      	adds	r3, r7, r3
   22dc4:	781b      	ldrb	r3, [r3, #0]
   22dc6:	2b00      	cmp	r3, #0
   22dc8:	d004      	beq.n	22dd4 <nm_drv_init+0x34>
   22dca:	230e      	movs	r3, #14
   22dcc:	18fb      	adds	r3, r7, r3
   22dce:	781b      	ldrb	r3, [r3, #0]
   22dd0:	2b04      	cmp	r3, #4
   22dd2:	d908      	bls.n	22de6 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   22dd4:	230e      	movs	r3, #14
   22dd6:	18fb      	adds	r3, r7, r3
   22dd8:	2201      	movs	r2, #1
   22dda:	701a      	strb	r2, [r3, #0]
   22ddc:	e003      	b.n	22de6 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   22dde:	230e      	movs	r3, #14
   22de0:	18fb      	adds	r3, r7, r3
   22de2:	2201      	movs	r2, #1
   22de4:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   22de6:	230f      	movs	r3, #15
   22de8:	18fc      	adds	r4, r7, r3
   22dea:	2000      	movs	r0, #0
   22dec:	4b41      	ldr	r3, [pc, #260]	; (22ef4 <nm_drv_init+0x154>)
   22dee:	4798      	blx	r3
   22df0:	0003      	movs	r3, r0
   22df2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22df4:	230f      	movs	r3, #15
   22df6:	18fb      	adds	r3, r7, r3
   22df8:	781b      	ldrb	r3, [r3, #0]
   22dfa:	b25b      	sxtb	r3, r3
   22dfc:	2b00      	cmp	r3, #0
   22dfe:	d00f      	beq.n	22e20 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   22e00:	2390      	movs	r3, #144	; 0x90
   22e02:	005a      	lsls	r2, r3, #1
   22e04:	493c      	ldr	r1, [pc, #240]	; (22ef8 <nm_drv_init+0x158>)
   22e06:	4b3d      	ldr	r3, [pc, #244]	; (22efc <nm_drv_init+0x15c>)
   22e08:	0018      	movs	r0, r3
   22e0a:	4b3d      	ldr	r3, [pc, #244]	; (22f00 <nm_drv_init+0x160>)
   22e0c:	4798      	blx	r3
   22e0e:	4b3d      	ldr	r3, [pc, #244]	; (22f04 <nm_drv_init+0x164>)
   22e10:	0018      	movs	r0, r3
   22e12:	4b3b      	ldr	r3, [pc, #236]	; (22f00 <nm_drv_init+0x160>)
   22e14:	4798      	blx	r3
   22e16:	4b3c      	ldr	r3, [pc, #240]	; (22f08 <nm_drv_init+0x168>)
   22e18:	0018      	movs	r0, r3
   22e1a:	4b39      	ldr	r3, [pc, #228]	; (22f00 <nm_drv_init+0x160>)
   22e1c:	4798      	blx	r3
		goto ERR1;
   22e1e:	e061      	b.n	22ee4 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   22e20:	4b3a      	ldr	r3, [pc, #232]	; (22f0c <nm_drv_init+0x16c>)
   22e22:	0018      	movs	r0, r3
   22e24:	4b36      	ldr	r3, [pc, #216]	; (22f00 <nm_drv_init+0x160>)
   22e26:	4798      	blx	r3
   22e28:	4b39      	ldr	r3, [pc, #228]	; (22f10 <nm_drv_init+0x170>)
   22e2a:	4798      	blx	r3
   22e2c:	0002      	movs	r2, r0
   22e2e:	4b39      	ldr	r3, [pc, #228]	; (22f14 <nm_drv_init+0x174>)
   22e30:	0011      	movs	r1, r2
   22e32:	0018      	movs	r0, r3
   22e34:	4b32      	ldr	r3, [pc, #200]	; (22f00 <nm_drv_init+0x160>)
   22e36:	4798      	blx	r3
   22e38:	4b33      	ldr	r3, [pc, #204]	; (22f08 <nm_drv_init+0x168>)
   22e3a:	0018      	movs	r0, r3
   22e3c:	4b30      	ldr	r3, [pc, #192]	; (22f00 <nm_drv_init+0x160>)
   22e3e:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   22e40:	4b35      	ldr	r3, [pc, #212]	; (22f18 <nm_drv_init+0x178>)
   22e42:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   22e44:	230f      	movs	r3, #15
   22e46:	18fc      	adds	r4, r7, r3
   22e48:	230e      	movs	r3, #14
   22e4a:	18fb      	adds	r3, r7, r3
   22e4c:	781b      	ldrb	r3, [r3, #0]
   22e4e:	0018      	movs	r0, r3
   22e50:	4b32      	ldr	r3, [pc, #200]	; (22f1c <nm_drv_init+0x17c>)
   22e52:	4798      	blx	r3
   22e54:	0003      	movs	r3, r0
   22e56:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22e58:	230f      	movs	r3, #15
   22e5a:	18fb      	adds	r3, r7, r3
   22e5c:	781b      	ldrb	r3, [r3, #0]
   22e5e:	b25b      	sxtb	r3, r3
   22e60:	2b00      	cmp	r3, #0
   22e62:	d13a      	bne.n	22eda <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   22e64:	230f      	movs	r3, #15
   22e66:	18fc      	adds	r4, r7, r3
   22e68:	230e      	movs	r3, #14
   22e6a:	18fb      	adds	r3, r7, r3
   22e6c:	781b      	ldrb	r3, [r3, #0]
   22e6e:	0018      	movs	r0, r3
   22e70:	4b2b      	ldr	r3, [pc, #172]	; (22f20 <nm_drv_init+0x180>)
   22e72:	4798      	blx	r3
   22e74:	0003      	movs	r3, r0
   22e76:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22e78:	230f      	movs	r3, #15
   22e7a:	18fb      	adds	r3, r7, r3
   22e7c:	781b      	ldrb	r3, [r3, #0]
   22e7e:	b25b      	sxtb	r3, r3
   22e80:	2b00      	cmp	r3, #0
   22e82:	d12c      	bne.n	22ede <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   22e84:	230e      	movs	r3, #14
   22e86:	18fb      	adds	r3, r7, r3
   22e88:	781b      	ldrb	r3, [r3, #0]
   22e8a:	2b02      	cmp	r3, #2
   22e8c:	d02a      	beq.n	22ee4 <nm_drv_init+0x144>
   22e8e:	230e      	movs	r3, #14
   22e90:	18fb      	adds	r3, r7, r3
   22e92:	781b      	ldrb	r3, [r3, #0]
   22e94:	2b03      	cmp	r3, #3
   22e96:	d025      	beq.n	22ee4 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   22e98:	230f      	movs	r3, #15
   22e9a:	18fc      	adds	r4, r7, r3
   22e9c:	4b21      	ldr	r3, [pc, #132]	; (22f24 <nm_drv_init+0x184>)
   22e9e:	4798      	blx	r3
   22ea0:	0003      	movs	r3, r0
   22ea2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22ea4:	230f      	movs	r3, #15
   22ea6:	18fb      	adds	r3, r7, r3
   22ea8:	781b      	ldrb	r3, [r3, #0]
   22eaa:	b25b      	sxtb	r3, r3
   22eac:	2b00      	cmp	r3, #0
   22eae:	d00f      	beq.n	22ed0 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   22eb0:	23a7      	movs	r3, #167	; 0xa7
   22eb2:	005a      	lsls	r2, r3, #1
   22eb4:	4910      	ldr	r1, [pc, #64]	; (22ef8 <nm_drv_init+0x158>)
   22eb6:	4b11      	ldr	r3, [pc, #68]	; (22efc <nm_drv_init+0x15c>)
   22eb8:	0018      	movs	r0, r3
   22eba:	4b11      	ldr	r3, [pc, #68]	; (22f00 <nm_drv_init+0x160>)
   22ebc:	4798      	blx	r3
   22ebe:	4b1a      	ldr	r3, [pc, #104]	; (22f28 <nm_drv_init+0x188>)
   22ec0:	0018      	movs	r0, r3
   22ec2:	4b0f      	ldr	r3, [pc, #60]	; (22f00 <nm_drv_init+0x160>)
   22ec4:	4798      	blx	r3
   22ec6:	4b10      	ldr	r3, [pc, #64]	; (22f08 <nm_drv_init+0x168>)
   22ec8:	0018      	movs	r0, r3
   22eca:	4b0d      	ldr	r3, [pc, #52]	; (22f00 <nm_drv_init+0x160>)
   22ecc:	4798      	blx	r3
		goto ERR2;
   22ece:	e007      	b.n	22ee0 <nm_drv_init+0x140>
	}
	return ret;
   22ed0:	230f      	movs	r3, #15
   22ed2:	18fb      	adds	r3, r7, r3
   22ed4:	781b      	ldrb	r3, [r3, #0]
   22ed6:	b25b      	sxtb	r3, r3
   22ed8:	e008      	b.n	22eec <nm_drv_init+0x14c>
		goto ERR2;
   22eda:	46c0      	nop			; (mov r8, r8)
   22edc:	e000      	b.n	22ee0 <nm_drv_init+0x140>
		goto ERR2;
   22ede:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   22ee0:	4b12      	ldr	r3, [pc, #72]	; (22f2c <nm_drv_init+0x18c>)
   22ee2:	4798      	blx	r3
ERR1:
	return ret;
   22ee4:	230f      	movs	r3, #15
   22ee6:	18fb      	adds	r3, r7, r3
   22ee8:	781b      	ldrb	r3, [r3, #0]
   22eea:	b25b      	sxtb	r3, r3
}
   22eec:	0018      	movs	r0, r3
   22eee:	46bd      	mov	sp, r7
   22ef0:	b005      	add	sp, #20
   22ef2:	bd90      	pop	{r4, r7, pc}
   22ef4:	00022901 	.word	0x00022901
   22ef8:	0003893c 	.word	0x0003893c
   22efc:	0003886c 	.word	0x0003886c
   22f00:	0001dbd9 	.word	0x0001dbd9
   22f04:	00038880 	.word	0x00038880
   22f08:	0003889c 	.word	0x0003889c
   22f0c:	000388a0 	.word	0x000388a0
   22f10:	0002229d 	.word	0x0002229d
   22f14:	000388ac 	.word	0x000388ac
   22f18:	000247b9 	.word	0x000247b9
   22f1c:	000225f5 	.word	0x000225f5
   22f20:	0002278d 	.word	0x0002278d
   22f24:	000221e9 	.word	0x000221e9
   22f28:	000388bc 	.word	0x000388bc
   22f2c:	00022935 	.word	0x00022935

00022f30 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   22f30:	b590      	push	{r4, r7, lr}
   22f32:	b085      	sub	sp, #20
   22f34:	af00      	add	r7, sp, #0
   22f36:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   22f38:	230f      	movs	r3, #15
   22f3a:	18fc      	adds	r4, r7, r3
   22f3c:	4b2e      	ldr	r3, [pc, #184]	; (22ff8 <nm_drv_deinit+0xc8>)
   22f3e:	4798      	blx	r3
   22f40:	0003      	movs	r3, r0
   22f42:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22f44:	230f      	movs	r3, #15
   22f46:	18fb      	adds	r3, r7, r3
   22f48:	781b      	ldrb	r3, [r3, #0]
   22f4a:	b25b      	sxtb	r3, r3
   22f4c:	2b00      	cmp	r3, #0
   22f4e:	d010      	beq.n	22f72 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   22f50:	2366      	movs	r3, #102	; 0x66
   22f52:	33ff      	adds	r3, #255	; 0xff
   22f54:	001a      	movs	r2, r3
   22f56:	4929      	ldr	r1, [pc, #164]	; (22ffc <nm_drv_deinit+0xcc>)
   22f58:	4b29      	ldr	r3, [pc, #164]	; (23000 <nm_drv_deinit+0xd0>)
   22f5a:	0018      	movs	r0, r3
   22f5c:	4b29      	ldr	r3, [pc, #164]	; (23004 <nm_drv_deinit+0xd4>)
   22f5e:	4798      	blx	r3
   22f60:	4b29      	ldr	r3, [pc, #164]	; (23008 <nm_drv_deinit+0xd8>)
   22f62:	0018      	movs	r0, r3
   22f64:	4b27      	ldr	r3, [pc, #156]	; (23004 <nm_drv_deinit+0xd4>)
   22f66:	4798      	blx	r3
   22f68:	4b28      	ldr	r3, [pc, #160]	; (2300c <nm_drv_deinit+0xdc>)
   22f6a:	0018      	movs	r0, r3
   22f6c:	4b25      	ldr	r3, [pc, #148]	; (23004 <nm_drv_deinit+0xd4>)
   22f6e:	4798      	blx	r3
		goto ERR1;
   22f70:	e03a      	b.n	22fe8 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   22f72:	230f      	movs	r3, #15
   22f74:	18fc      	adds	r4, r7, r3
   22f76:	2000      	movs	r0, #0
   22f78:	4b25      	ldr	r3, [pc, #148]	; (23010 <nm_drv_deinit+0xe0>)
   22f7a:	4798      	blx	r3
   22f7c:	0003      	movs	r3, r0
   22f7e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22f80:	230f      	movs	r3, #15
   22f82:	18fb      	adds	r3, r7, r3
   22f84:	781b      	ldrb	r3, [r3, #0]
   22f86:	b25b      	sxtb	r3, r3
   22f88:	2b00      	cmp	r3, #0
   22f8a:	d00f      	beq.n	22fac <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   22f8c:	23b6      	movs	r3, #182	; 0xb6
   22f8e:	005a      	lsls	r2, r3, #1
   22f90:	491a      	ldr	r1, [pc, #104]	; (22ffc <nm_drv_deinit+0xcc>)
   22f92:	4b1b      	ldr	r3, [pc, #108]	; (23000 <nm_drv_deinit+0xd0>)
   22f94:	0018      	movs	r0, r3
   22f96:	4b1b      	ldr	r3, [pc, #108]	; (23004 <nm_drv_deinit+0xd4>)
   22f98:	4798      	blx	r3
   22f9a:	4b1e      	ldr	r3, [pc, #120]	; (23014 <nm_drv_deinit+0xe4>)
   22f9c:	0018      	movs	r0, r3
   22f9e:	4b19      	ldr	r3, [pc, #100]	; (23004 <nm_drv_deinit+0xd4>)
   22fa0:	4798      	blx	r3
   22fa2:	4b1a      	ldr	r3, [pc, #104]	; (2300c <nm_drv_deinit+0xdc>)
   22fa4:	0018      	movs	r0, r3
   22fa6:	4b17      	ldr	r3, [pc, #92]	; (23004 <nm_drv_deinit+0xd4>)
   22fa8:	4798      	blx	r3
		goto ERR1;
   22faa:	e01d      	b.n	22fe8 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   22fac:	230f      	movs	r3, #15
   22fae:	18fc      	adds	r4, r7, r3
   22fb0:	4b19      	ldr	r3, [pc, #100]	; (23018 <nm_drv_deinit+0xe8>)
   22fb2:	4798      	blx	r3
   22fb4:	0003      	movs	r3, r0
   22fb6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22fb8:	230f      	movs	r3, #15
   22fba:	18fb      	adds	r3, r7, r3
   22fbc:	781b      	ldrb	r3, [r3, #0]
   22fbe:	b25b      	sxtb	r3, r3
   22fc0:	2b00      	cmp	r3, #0
   22fc2:	d00f      	beq.n	22fe4 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   22fc4:	23b9      	movs	r3, #185	; 0xb9
   22fc6:	005a      	lsls	r2, r3, #1
   22fc8:	490c      	ldr	r1, [pc, #48]	; (22ffc <nm_drv_deinit+0xcc>)
   22fca:	4b0d      	ldr	r3, [pc, #52]	; (23000 <nm_drv_deinit+0xd0>)
   22fcc:	0018      	movs	r0, r3
   22fce:	4b0d      	ldr	r3, [pc, #52]	; (23004 <nm_drv_deinit+0xd4>)
   22fd0:	4798      	blx	r3
   22fd2:	4b12      	ldr	r3, [pc, #72]	; (2301c <nm_drv_deinit+0xec>)
   22fd4:	0018      	movs	r0, r3
   22fd6:	4b0b      	ldr	r3, [pc, #44]	; (23004 <nm_drv_deinit+0xd4>)
   22fd8:	4798      	blx	r3
   22fda:	4b0c      	ldr	r3, [pc, #48]	; (2300c <nm_drv_deinit+0xdc>)
   22fdc:	0018      	movs	r0, r3
   22fde:	4b09      	ldr	r3, [pc, #36]	; (23004 <nm_drv_deinit+0xd4>)
   22fe0:	4798      	blx	r3
		goto ERR1;
   22fe2:	e001      	b.n	22fe8 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   22fe4:	4b0e      	ldr	r3, [pc, #56]	; (23020 <nm_drv_deinit+0xf0>)
   22fe6:	4798      	blx	r3
#endif

ERR1:
	return ret;
   22fe8:	230f      	movs	r3, #15
   22fea:	18fb      	adds	r3, r7, r3
   22fec:	781b      	ldrb	r3, [r3, #0]
   22fee:	b25b      	sxtb	r3, r3
}
   22ff0:	0018      	movs	r0, r3
   22ff2:	46bd      	mov	sp, r7
   22ff4:	b005      	add	sp, #20
   22ff6:	bd90      	pop	{r4, r7, pc}
   22ff8:	00022841 	.word	0x00022841
   22ffc:	00038948 	.word	0x00038948
   23000:	0003886c 	.word	0x0003886c
   23004:	0001dbd9 	.word	0x0001dbd9
   23008:	000388dc 	.word	0x000388dc
   2300c:	0003889c 	.word	0x0003889c
   23010:	00025c61 	.word	0x00025c61
   23014:	000388fc 	.word	0x000388fc
   23018:	00022935 	.word	0x00022935
   2301c:	00038920 	.word	0x00038920
   23020:	00024905 	.word	0x00024905

00023024 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   23024:	b580      	push	{r7, lr}
   23026:	b086      	sub	sp, #24
   23028:	af00      	add	r7, sp, #0
   2302a:	6078      	str	r0, [r7, #4]
   2302c:	000a      	movs	r2, r1
   2302e:	1cbb      	adds	r3, r7, #2
   23030:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   23032:	230c      	movs	r3, #12
   23034:	18fb      	adds	r3, r7, r3
   23036:	2200      	movs	r2, #0
   23038:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   2303a:	230c      	movs	r3, #12
   2303c:	18fb      	adds	r3, r7, r3
   2303e:	687a      	ldr	r2, [r7, #4]
   23040:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23042:	230c      	movs	r3, #12
   23044:	18fb      	adds	r3, r7, r3
   23046:	1cba      	adds	r2, r7, #2
   23048:	8812      	ldrh	r2, [r2, #0]
   2304a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   2304c:	230c      	movs	r3, #12
   2304e:	18fb      	adds	r3, r7, r3
   23050:	0019      	movs	r1, r3
   23052:	2003      	movs	r0, #3
   23054:	4b03      	ldr	r3, [pc, #12]	; (23064 <nmi_spi_read+0x40>)
   23056:	4798      	blx	r3
   23058:	0003      	movs	r3, r0
}
   2305a:	0018      	movs	r0, r3
   2305c:	46bd      	mov	sp, r7
   2305e:	b006      	add	sp, #24
   23060:	bd80      	pop	{r7, pc}
   23062:	46c0      	nop			; (mov r8, r8)
   23064:	000207d1 	.word	0x000207d1

00023068 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   23068:	b580      	push	{r7, lr}
   2306a:	b086      	sub	sp, #24
   2306c:	af00      	add	r7, sp, #0
   2306e:	6078      	str	r0, [r7, #4]
   23070:	000a      	movs	r2, r1
   23072:	1cbb      	adds	r3, r7, #2
   23074:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   23076:	230c      	movs	r3, #12
   23078:	18fb      	adds	r3, r7, r3
   2307a:	687a      	ldr	r2, [r7, #4]
   2307c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   2307e:	230c      	movs	r3, #12
   23080:	18fb      	adds	r3, r7, r3
   23082:	2200      	movs	r2, #0
   23084:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23086:	230c      	movs	r3, #12
   23088:	18fb      	adds	r3, r7, r3
   2308a:	1cba      	adds	r2, r7, #2
   2308c:	8812      	ldrh	r2, [r2, #0]
   2308e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23090:	230c      	movs	r3, #12
   23092:	18fb      	adds	r3, r7, r3
   23094:	0019      	movs	r1, r3
   23096:	2003      	movs	r0, #3
   23098:	4b03      	ldr	r3, [pc, #12]	; (230a8 <nmi_spi_write+0x40>)
   2309a:	4798      	blx	r3
   2309c:	0003      	movs	r3, r0
}
   2309e:	0018      	movs	r0, r3
   230a0:	46bd      	mov	sp, r7
   230a2:	b006      	add	sp, #24
   230a4:	bd80      	pop	{r7, pc}
   230a6:	46c0      	nop			; (mov r8, r8)
   230a8:	000207d1 	.word	0x000207d1

000230ac <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   230ac:	b580      	push	{r7, lr}
   230ae:	b088      	sub	sp, #32
   230b0:	af00      	add	r7, sp, #0
   230b2:	60f8      	str	r0, [r7, #12]
   230b4:	60b9      	str	r1, [r7, #8]
   230b6:	1dbb      	adds	r3, r7, #6
   230b8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   230ba:	2314      	movs	r3, #20
   230bc:	18fb      	adds	r3, r7, r3
   230be:	68fa      	ldr	r2, [r7, #12]
   230c0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   230c2:	2314      	movs	r3, #20
   230c4:	18fb      	adds	r3, r7, r3
   230c6:	68ba      	ldr	r2, [r7, #8]
   230c8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   230ca:	2314      	movs	r3, #20
   230cc:	18fb      	adds	r3, r7, r3
   230ce:	1dba      	adds	r2, r7, #6
   230d0:	8812      	ldrh	r2, [r2, #0]
   230d2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   230d4:	2314      	movs	r3, #20
   230d6:	18fb      	adds	r3, r7, r3
   230d8:	0019      	movs	r1, r3
   230da:	2003      	movs	r0, #3
   230dc:	4b03      	ldr	r3, [pc, #12]	; (230ec <nmi_spi_rw+0x40>)
   230de:	4798      	blx	r3
   230e0:	0003      	movs	r3, r0
}
   230e2:	0018      	movs	r0, r3
   230e4:	46bd      	mov	sp, r7
   230e6:	b008      	add	sp, #32
   230e8:	bd80      	pop	{r7, pc}
   230ea:	46c0      	nop			; (mov r8, r8)
   230ec:	000207d1 	.word	0x000207d1

000230f0 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   230f0:	b580      	push	{r7, lr}
   230f2:	b082      	sub	sp, #8
   230f4:	af00      	add	r7, sp, #0
   230f6:	0002      	movs	r2, r0
   230f8:	1dfb      	adds	r3, r7, #7
   230fa:	701a      	strb	r2, [r3, #0]
   230fc:	1dbb      	adds	r3, r7, #6
   230fe:	1c0a      	adds	r2, r1, #0
   23100:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   23102:	1dfb      	adds	r3, r7, #7
   23104:	781b      	ldrb	r3, [r3, #0]
   23106:	005a      	lsls	r2, r3, #1
   23108:	1dbb      	adds	r3, r7, #6
   2310a:	781b      	ldrb	r3, [r3, #0]
   2310c:	4053      	eors	r3, r2
   2310e:	4a03      	ldr	r2, [pc, #12]	; (2311c <crc7_byte+0x2c>)
   23110:	5cd3      	ldrb	r3, [r2, r3]
}
   23112:	0018      	movs	r0, r3
   23114:	46bd      	mov	sp, r7
   23116:	b002      	add	sp, #8
   23118:	bd80      	pop	{r7, pc}
   2311a:	46c0      	nop			; (mov r8, r8)
   2311c:	00038958 	.word	0x00038958

00023120 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   23120:	b590      	push	{r4, r7, lr}
   23122:	b085      	sub	sp, #20
   23124:	af00      	add	r7, sp, #0
   23126:	60b9      	str	r1, [r7, #8]
   23128:	607a      	str	r2, [r7, #4]
   2312a:	230f      	movs	r3, #15
   2312c:	18fb      	adds	r3, r7, r3
   2312e:	1c02      	adds	r2, r0, #0
   23130:	701a      	strb	r2, [r3, #0]
	while (len--)
   23132:	e00e      	b.n	23152 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   23134:	68bb      	ldr	r3, [r7, #8]
   23136:	1c5a      	adds	r2, r3, #1
   23138:	60ba      	str	r2, [r7, #8]
   2313a:	781a      	ldrb	r2, [r3, #0]
   2313c:	230f      	movs	r3, #15
   2313e:	18fc      	adds	r4, r7, r3
   23140:	230f      	movs	r3, #15
   23142:	18fb      	adds	r3, r7, r3
   23144:	781b      	ldrb	r3, [r3, #0]
   23146:	0011      	movs	r1, r2
   23148:	0018      	movs	r0, r3
   2314a:	4b08      	ldr	r3, [pc, #32]	; (2316c <crc7+0x4c>)
   2314c:	4798      	blx	r3
   2314e:	0003      	movs	r3, r0
   23150:	7023      	strb	r3, [r4, #0]
	while (len--)
   23152:	687b      	ldr	r3, [r7, #4]
   23154:	1e5a      	subs	r2, r3, #1
   23156:	607a      	str	r2, [r7, #4]
   23158:	2b00      	cmp	r3, #0
   2315a:	d1eb      	bne.n	23134 <crc7+0x14>
	return crc;
   2315c:	230f      	movs	r3, #15
   2315e:	18fb      	adds	r3, r7, r3
   23160:	781b      	ldrb	r3, [r3, #0]
}
   23162:	0018      	movs	r0, r3
   23164:	46bd      	mov	sp, r7
   23166:	b005      	add	sp, #20
   23168:	bd90      	pop	{r4, r7, pc}
   2316a:	46c0      	nop			; (mov r8, r8)
   2316c:	000230f1 	.word	0x000230f1

00023170 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   23170:	b590      	push	{r4, r7, lr}
   23172:	b089      	sub	sp, #36	; 0x24
   23174:	af00      	add	r7, sp, #0
   23176:	60b9      	str	r1, [r7, #8]
   23178:	607a      	str	r2, [r7, #4]
   2317a:	603b      	str	r3, [r7, #0]
   2317c:	230f      	movs	r3, #15
   2317e:	18fb      	adds	r3, r7, r3
   23180:	1c02      	adds	r2, r0, #0
   23182:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   23184:	231f      	movs	r3, #31
   23186:	18fb      	adds	r3, r7, r3
   23188:	2205      	movs	r2, #5
   2318a:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2318c:	231e      	movs	r3, #30
   2318e:	18fb      	adds	r3, r7, r3
   23190:	2201      	movs	r2, #1
   23192:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   23194:	2314      	movs	r3, #20
   23196:	18fb      	adds	r3, r7, r3
   23198:	220f      	movs	r2, #15
   2319a:	18ba      	adds	r2, r7, r2
   2319c:	7812      	ldrb	r2, [r2, #0]
   2319e:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   231a0:	230f      	movs	r3, #15
   231a2:	18fb      	adds	r3, r7, r3
   231a4:	781b      	ldrb	r3, [r3, #0]
   231a6:	3bc1      	subs	r3, #193	; 0xc1
   231a8:	2b0e      	cmp	r3, #14
   231aa:	d900      	bls.n	231ae <spi_cmd+0x3e>
   231ac:	e11b      	b.n	233e6 <spi_cmd+0x276>
   231ae:	009a      	lsls	r2, r3, #2
   231b0:	4bb6      	ldr	r3, [pc, #728]	; (2348c <spi_cmd+0x31c>)
   231b2:	18d3      	adds	r3, r2, r3
   231b4:	681b      	ldr	r3, [r3, #0]
   231b6:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   231b8:	68bb      	ldr	r3, [r7, #8]
   231ba:	0c1b      	lsrs	r3, r3, #16
   231bc:	b2da      	uxtb	r2, r3
   231be:	2314      	movs	r3, #20
   231c0:	18fb      	adds	r3, r7, r3
   231c2:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   231c4:	68bb      	ldr	r3, [r7, #8]
   231c6:	0a1b      	lsrs	r3, r3, #8
   231c8:	b2da      	uxtb	r2, r3
   231ca:	2314      	movs	r3, #20
   231cc:	18fb      	adds	r3, r7, r3
   231ce:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   231d0:	68bb      	ldr	r3, [r7, #8]
   231d2:	b2da      	uxtb	r2, r3
   231d4:	2314      	movs	r3, #20
   231d6:	18fb      	adds	r3, r7, r3
   231d8:	70da      	strb	r2, [r3, #3]
		len = 5;
   231da:	231f      	movs	r3, #31
   231dc:	18fb      	adds	r3, r7, r3
   231de:	2205      	movs	r2, #5
   231e0:	701a      	strb	r2, [r3, #0]
		break;
   231e2:	e105      	b.n	233f0 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   231e4:	68bb      	ldr	r3, [r7, #8]
   231e6:	0a1b      	lsrs	r3, r3, #8
   231e8:	b2da      	uxtb	r2, r3
   231ea:	2314      	movs	r3, #20
   231ec:	18fb      	adds	r3, r7, r3
   231ee:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   231f0:	2330      	movs	r3, #48	; 0x30
   231f2:	18fb      	adds	r3, r7, r3
   231f4:	781b      	ldrb	r3, [r3, #0]
   231f6:	2b00      	cmp	r3, #0
   231f8:	d009      	beq.n	2320e <spi_cmd+0x9e>
   231fa:	2314      	movs	r3, #20
   231fc:	18fb      	adds	r3, r7, r3
   231fe:	785b      	ldrb	r3, [r3, #1]
   23200:	2280      	movs	r2, #128	; 0x80
   23202:	4252      	negs	r2, r2
   23204:	4313      	orrs	r3, r2
   23206:	b2da      	uxtb	r2, r3
   23208:	2314      	movs	r3, #20
   2320a:	18fb      	adds	r3, r7, r3
   2320c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   2320e:	68bb      	ldr	r3, [r7, #8]
   23210:	b2da      	uxtb	r2, r3
   23212:	2314      	movs	r3, #20
   23214:	18fb      	adds	r3, r7, r3
   23216:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   23218:	2314      	movs	r3, #20
   2321a:	18fb      	adds	r3, r7, r3
   2321c:	2200      	movs	r2, #0
   2321e:	70da      	strb	r2, [r3, #3]
		len = 5;
   23220:	231f      	movs	r3, #31
   23222:	18fb      	adds	r3, r7, r3
   23224:	2205      	movs	r2, #5
   23226:	701a      	strb	r2, [r3, #0]
		break;
   23228:	e0e2      	b.n	233f0 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   2322a:	2314      	movs	r3, #20
   2322c:	18fb      	adds	r3, r7, r3
   2322e:	2200      	movs	r2, #0
   23230:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   23232:	2314      	movs	r3, #20
   23234:	18fb      	adds	r3, r7, r3
   23236:	2200      	movs	r2, #0
   23238:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2323a:	2314      	movs	r3, #20
   2323c:	18fb      	adds	r3, r7, r3
   2323e:	2200      	movs	r2, #0
   23240:	70da      	strb	r2, [r3, #3]
		len = 5;
   23242:	231f      	movs	r3, #31
   23244:	18fb      	adds	r3, r7, r3
   23246:	2205      	movs	r2, #5
   23248:	701a      	strb	r2, [r3, #0]
		break;
   2324a:	e0d1      	b.n	233f0 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   2324c:	2314      	movs	r3, #20
   2324e:	18fb      	adds	r3, r7, r3
   23250:	2200      	movs	r2, #0
   23252:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   23254:	2314      	movs	r3, #20
   23256:	18fb      	adds	r3, r7, r3
   23258:	2200      	movs	r2, #0
   2325a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2325c:	2314      	movs	r3, #20
   2325e:	18fb      	adds	r3, r7, r3
   23260:	2200      	movs	r2, #0
   23262:	70da      	strb	r2, [r3, #3]
		len = 5;
   23264:	231f      	movs	r3, #31
   23266:	18fb      	adds	r3, r7, r3
   23268:	2205      	movs	r2, #5
   2326a:	701a      	strb	r2, [r3, #0]
		break;
   2326c:	e0c0      	b.n	233f0 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   2326e:	2314      	movs	r3, #20
   23270:	18fb      	adds	r3, r7, r3
   23272:	22ff      	movs	r2, #255	; 0xff
   23274:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   23276:	2314      	movs	r3, #20
   23278:	18fb      	adds	r3, r7, r3
   2327a:	22ff      	movs	r2, #255	; 0xff
   2327c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   2327e:	2314      	movs	r3, #20
   23280:	18fb      	adds	r3, r7, r3
   23282:	22ff      	movs	r2, #255	; 0xff
   23284:	70da      	strb	r2, [r3, #3]
		len = 5;
   23286:	231f      	movs	r3, #31
   23288:	18fb      	adds	r3, r7, r3
   2328a:	2205      	movs	r2, #5
   2328c:	701a      	strb	r2, [r3, #0]
		break;
   2328e:	e0af      	b.n	233f0 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   23290:	68bb      	ldr	r3, [r7, #8]
   23292:	0c1b      	lsrs	r3, r3, #16
   23294:	b2da      	uxtb	r2, r3
   23296:	2314      	movs	r3, #20
   23298:	18fb      	adds	r3, r7, r3
   2329a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2329c:	68bb      	ldr	r3, [r7, #8]
   2329e:	0a1b      	lsrs	r3, r3, #8
   232a0:	b2da      	uxtb	r2, r3
   232a2:	2314      	movs	r3, #20
   232a4:	18fb      	adds	r3, r7, r3
   232a6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   232a8:	68bb      	ldr	r3, [r7, #8]
   232aa:	b2da      	uxtb	r2, r3
   232ac:	2314      	movs	r3, #20
   232ae:	18fb      	adds	r3, r7, r3
   232b0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   232b2:	683b      	ldr	r3, [r7, #0]
   232b4:	0a1b      	lsrs	r3, r3, #8
   232b6:	b2da      	uxtb	r2, r3
   232b8:	2314      	movs	r3, #20
   232ba:	18fb      	adds	r3, r7, r3
   232bc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   232be:	683b      	ldr	r3, [r7, #0]
   232c0:	b2da      	uxtb	r2, r3
   232c2:	2314      	movs	r3, #20
   232c4:	18fb      	adds	r3, r7, r3
   232c6:	715a      	strb	r2, [r3, #5]
		len = 7;
   232c8:	231f      	movs	r3, #31
   232ca:	18fb      	adds	r3, r7, r3
   232cc:	2207      	movs	r2, #7
   232ce:	701a      	strb	r2, [r3, #0]
		break;
   232d0:	e08e      	b.n	233f0 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   232d2:	68bb      	ldr	r3, [r7, #8]
   232d4:	0c1b      	lsrs	r3, r3, #16
   232d6:	b2da      	uxtb	r2, r3
   232d8:	2314      	movs	r3, #20
   232da:	18fb      	adds	r3, r7, r3
   232dc:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   232de:	68bb      	ldr	r3, [r7, #8]
   232e0:	0a1b      	lsrs	r3, r3, #8
   232e2:	b2da      	uxtb	r2, r3
   232e4:	2314      	movs	r3, #20
   232e6:	18fb      	adds	r3, r7, r3
   232e8:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   232ea:	68bb      	ldr	r3, [r7, #8]
   232ec:	b2da      	uxtb	r2, r3
   232ee:	2314      	movs	r3, #20
   232f0:	18fb      	adds	r3, r7, r3
   232f2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   232f4:	683b      	ldr	r3, [r7, #0]
   232f6:	0c1b      	lsrs	r3, r3, #16
   232f8:	b2da      	uxtb	r2, r3
   232fa:	2314      	movs	r3, #20
   232fc:	18fb      	adds	r3, r7, r3
   232fe:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   23300:	683b      	ldr	r3, [r7, #0]
   23302:	0a1b      	lsrs	r3, r3, #8
   23304:	b2da      	uxtb	r2, r3
   23306:	2314      	movs	r3, #20
   23308:	18fb      	adds	r3, r7, r3
   2330a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   2330c:	683b      	ldr	r3, [r7, #0]
   2330e:	b2da      	uxtb	r2, r3
   23310:	2314      	movs	r3, #20
   23312:	18fb      	adds	r3, r7, r3
   23314:	719a      	strb	r2, [r3, #6]
		len = 8;
   23316:	231f      	movs	r3, #31
   23318:	18fb      	adds	r3, r7, r3
   2331a:	2208      	movs	r2, #8
   2331c:	701a      	strb	r2, [r3, #0]
		break;
   2331e:	e067      	b.n	233f0 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   23320:	68bb      	ldr	r3, [r7, #8]
   23322:	0a1b      	lsrs	r3, r3, #8
   23324:	b2da      	uxtb	r2, r3
   23326:	2314      	movs	r3, #20
   23328:	18fb      	adds	r3, r7, r3
   2332a:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   2332c:	2330      	movs	r3, #48	; 0x30
   2332e:	18fb      	adds	r3, r7, r3
   23330:	781b      	ldrb	r3, [r3, #0]
   23332:	2b00      	cmp	r3, #0
   23334:	d009      	beq.n	2334a <spi_cmd+0x1da>
   23336:	2314      	movs	r3, #20
   23338:	18fb      	adds	r3, r7, r3
   2333a:	785b      	ldrb	r3, [r3, #1]
   2333c:	2280      	movs	r2, #128	; 0x80
   2333e:	4252      	negs	r2, r2
   23340:	4313      	orrs	r3, r2
   23342:	b2da      	uxtb	r2, r3
   23344:	2314      	movs	r3, #20
   23346:	18fb      	adds	r3, r7, r3
   23348:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   2334a:	68bb      	ldr	r3, [r7, #8]
   2334c:	b2da      	uxtb	r2, r3
   2334e:	2314      	movs	r3, #20
   23350:	18fb      	adds	r3, r7, r3
   23352:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   23354:	687b      	ldr	r3, [r7, #4]
   23356:	0e1b      	lsrs	r3, r3, #24
   23358:	b2da      	uxtb	r2, r3
   2335a:	2314      	movs	r3, #20
   2335c:	18fb      	adds	r3, r7, r3
   2335e:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   23360:	687b      	ldr	r3, [r7, #4]
   23362:	0c1b      	lsrs	r3, r3, #16
   23364:	b2da      	uxtb	r2, r3
   23366:	2314      	movs	r3, #20
   23368:	18fb      	adds	r3, r7, r3
   2336a:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   2336c:	687b      	ldr	r3, [r7, #4]
   2336e:	0a1b      	lsrs	r3, r3, #8
   23370:	b2da      	uxtb	r2, r3
   23372:	2314      	movs	r3, #20
   23374:	18fb      	adds	r3, r7, r3
   23376:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   23378:	687b      	ldr	r3, [r7, #4]
   2337a:	b2da      	uxtb	r2, r3
   2337c:	2314      	movs	r3, #20
   2337e:	18fb      	adds	r3, r7, r3
   23380:	719a      	strb	r2, [r3, #6]
		len = 8;
   23382:	231f      	movs	r3, #31
   23384:	18fb      	adds	r3, r7, r3
   23386:	2208      	movs	r2, #8
   23388:	701a      	strb	r2, [r3, #0]
		break;
   2338a:	e031      	b.n	233f0 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   2338c:	68bb      	ldr	r3, [r7, #8]
   2338e:	0c1b      	lsrs	r3, r3, #16
   23390:	b2da      	uxtb	r2, r3
   23392:	2314      	movs	r3, #20
   23394:	18fb      	adds	r3, r7, r3
   23396:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23398:	68bb      	ldr	r3, [r7, #8]
   2339a:	0a1b      	lsrs	r3, r3, #8
   2339c:	b2da      	uxtb	r2, r3
   2339e:	2314      	movs	r3, #20
   233a0:	18fb      	adds	r3, r7, r3
   233a2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   233a4:	68bb      	ldr	r3, [r7, #8]
   233a6:	b2da      	uxtb	r2, r3
   233a8:	2314      	movs	r3, #20
   233aa:	18fb      	adds	r3, r7, r3
   233ac:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   233ae:	687b      	ldr	r3, [r7, #4]
   233b0:	0e1b      	lsrs	r3, r3, #24
   233b2:	b2da      	uxtb	r2, r3
   233b4:	2314      	movs	r3, #20
   233b6:	18fb      	adds	r3, r7, r3
   233b8:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   233ba:	687b      	ldr	r3, [r7, #4]
   233bc:	0c1b      	lsrs	r3, r3, #16
   233be:	b2da      	uxtb	r2, r3
   233c0:	2314      	movs	r3, #20
   233c2:	18fb      	adds	r3, r7, r3
   233c4:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   233c6:	687b      	ldr	r3, [r7, #4]
   233c8:	0a1b      	lsrs	r3, r3, #8
   233ca:	b2da      	uxtb	r2, r3
   233cc:	2314      	movs	r3, #20
   233ce:	18fb      	adds	r3, r7, r3
   233d0:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   233d2:	687b      	ldr	r3, [r7, #4]
   233d4:	b2da      	uxtb	r2, r3
   233d6:	2314      	movs	r3, #20
   233d8:	18fb      	adds	r3, r7, r3
   233da:	71da      	strb	r2, [r3, #7]
		len = 9;
   233dc:	231f      	movs	r3, #31
   233de:	18fb      	adds	r3, r7, r3
   233e0:	2209      	movs	r2, #9
   233e2:	701a      	strb	r2, [r3, #0]
		break;
   233e4:	e004      	b.n	233f0 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   233e6:	231e      	movs	r3, #30
   233e8:	18fb      	adds	r3, r7, r3
   233ea:	2200      	movs	r2, #0
   233ec:	701a      	strb	r2, [r3, #0]
		break;
   233ee:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   233f0:	231e      	movs	r3, #30
   233f2:	18fb      	adds	r3, r7, r3
   233f4:	781b      	ldrb	r3, [r3, #0]
   233f6:	b25b      	sxtb	r3, r3
   233f8:	2b00      	cmp	r3, #0
   233fa:	d03f      	beq.n	2347c <spi_cmd+0x30c>
		if (!gu8Crc_off)
   233fc:	4b24      	ldr	r3, [pc, #144]	; (23490 <spi_cmd+0x320>)
   233fe:	781b      	ldrb	r3, [r3, #0]
   23400:	2b00      	cmp	r3, #0
   23402:	d115      	bne.n	23430 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   23404:	231f      	movs	r3, #31
   23406:	18fb      	adds	r3, r7, r3
   23408:	781b      	ldrb	r3, [r3, #0]
   2340a:	1e5c      	subs	r4, r3, #1
   2340c:	231f      	movs	r3, #31
   2340e:	18fb      	adds	r3, r7, r3
   23410:	781b      	ldrb	r3, [r3, #0]
   23412:	3b01      	subs	r3, #1
   23414:	001a      	movs	r2, r3
   23416:	2314      	movs	r3, #20
   23418:	18fb      	adds	r3, r7, r3
   2341a:	0019      	movs	r1, r3
   2341c:	207f      	movs	r0, #127	; 0x7f
   2341e:	4b1d      	ldr	r3, [pc, #116]	; (23494 <spi_cmd+0x324>)
   23420:	4798      	blx	r3
   23422:	0003      	movs	r3, r0
   23424:	18db      	adds	r3, r3, r3
   23426:	b2da      	uxtb	r2, r3
   23428:	2314      	movs	r3, #20
   2342a:	18fb      	adds	r3, r7, r3
   2342c:	551a      	strb	r2, [r3, r4]
   2342e:	e006      	b.n	2343e <spi_cmd+0x2ce>
		else
			len-=1;
   23430:	231f      	movs	r3, #31
   23432:	18fb      	adds	r3, r7, r3
   23434:	221f      	movs	r2, #31
   23436:	18ba      	adds	r2, r7, r2
   23438:	7812      	ldrb	r2, [r2, #0]
   2343a:	3a01      	subs	r2, #1
   2343c:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   2343e:	231f      	movs	r3, #31
   23440:	18fb      	adds	r3, r7, r3
   23442:	781b      	ldrb	r3, [r3, #0]
   23444:	b29a      	uxth	r2, r3
   23446:	2314      	movs	r3, #20
   23448:	18fb      	adds	r3, r7, r3
   2344a:	0011      	movs	r1, r2
   2344c:	0018      	movs	r0, r3
   2344e:	4b12      	ldr	r3, [pc, #72]	; (23498 <spi_cmd+0x328>)
   23450:	4798      	blx	r3
   23452:	1e03      	subs	r3, r0, #0
   23454:	d012      	beq.n	2347c <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23456:	2390      	movs	r3, #144	; 0x90
   23458:	005a      	lsls	r2, r3, #1
   2345a:	4910      	ldr	r1, [pc, #64]	; (2349c <spi_cmd+0x32c>)
   2345c:	4b10      	ldr	r3, [pc, #64]	; (234a0 <spi_cmd+0x330>)
   2345e:	0018      	movs	r0, r3
   23460:	4b10      	ldr	r3, [pc, #64]	; (234a4 <spi_cmd+0x334>)
   23462:	4798      	blx	r3
   23464:	4b10      	ldr	r3, [pc, #64]	; (234a8 <spi_cmd+0x338>)
   23466:	0018      	movs	r0, r3
   23468:	4b0e      	ldr	r3, [pc, #56]	; (234a4 <spi_cmd+0x334>)
   2346a:	4798      	blx	r3
   2346c:	4b0f      	ldr	r3, [pc, #60]	; (234ac <spi_cmd+0x33c>)
   2346e:	0018      	movs	r0, r3
   23470:	4b0c      	ldr	r3, [pc, #48]	; (234a4 <spi_cmd+0x334>)
   23472:	4798      	blx	r3
			result = N_FAIL;
   23474:	231e      	movs	r3, #30
   23476:	18fb      	adds	r3, r7, r3
   23478:	2200      	movs	r2, #0
   2347a:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   2347c:	231e      	movs	r3, #30
   2347e:	18fb      	adds	r3, r7, r3
   23480:	781b      	ldrb	r3, [r3, #0]
   23482:	b25b      	sxtb	r3, r3
}
   23484:	0018      	movs	r0, r3
   23486:	46bd      	mov	sp, r7
   23488:	b009      	add	sp, #36	; 0x24
   2348a:	bd90      	pop	{r4, r7, pc}
   2348c:	00038fd0 	.word	0x00038fd0
   23490:	20004154 	.word	0x20004154
   23494:	00023121 	.word	0x00023121
   23498:	00023069 	.word	0x00023069
   2349c:	00039048 	.word	0x00039048
   234a0:	00038a58 	.word	0x00038a58
   234a4:	0001dbd9 	.word	0x0001dbd9
   234a8:	00038a6c 	.word	0x00038a6c
   234ac:	00038a98 	.word	0x00038a98

000234b0 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   234b0:	b590      	push	{r4, r7, lr}
   234b2:	b085      	sub	sp, #20
   234b4:	af00      	add	r7, sp, #0
   234b6:	0002      	movs	r2, r0
   234b8:	1dfb      	adds	r3, r7, #7
   234ba:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   234bc:	230e      	movs	r3, #14
   234be:	18fb      	adds	r3, r7, r3
   234c0:	2201      	movs	r2, #1
   234c2:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   234c4:	4b32      	ldr	r3, [pc, #200]	; (23590 <spi_data_rsp+0xe0>)
   234c6:	781b      	ldrb	r3, [r3, #0]
   234c8:	2b00      	cmp	r3, #0
   234ca:	d104      	bne.n	234d6 <spi_data_rsp+0x26>
		len = 2;
   234cc:	230f      	movs	r3, #15
   234ce:	18fb      	adds	r3, r7, r3
   234d0:	2202      	movs	r2, #2
   234d2:	701a      	strb	r2, [r3, #0]
   234d4:	e003      	b.n	234de <spi_data_rsp+0x2e>
	else
		len = 3;
   234d6:	230f      	movs	r3, #15
   234d8:	18fb      	adds	r3, r7, r3
   234da:	2203      	movs	r2, #3
   234dc:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   234de:	230f      	movs	r3, #15
   234e0:	18fb      	adds	r3, r7, r3
   234e2:	781b      	ldrb	r3, [r3, #0]
   234e4:	b29a      	uxth	r2, r3
   234e6:	2308      	movs	r3, #8
   234e8:	18fb      	adds	r3, r7, r3
   234ea:	0011      	movs	r1, r2
   234ec:	0018      	movs	r0, r3
   234ee:	4b29      	ldr	r3, [pc, #164]	; (23594 <spi_data_rsp+0xe4>)
   234f0:	4798      	blx	r3
   234f2:	1e03      	subs	r3, r0, #0
   234f4:	d013      	beq.n	2351e <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   234f6:	239a      	movs	r3, #154	; 0x9a
   234f8:	005a      	lsls	r2, r3, #1
   234fa:	4927      	ldr	r1, [pc, #156]	; (23598 <spi_data_rsp+0xe8>)
   234fc:	4b27      	ldr	r3, [pc, #156]	; (2359c <spi_data_rsp+0xec>)
   234fe:	0018      	movs	r0, r3
   23500:	4b27      	ldr	r3, [pc, #156]	; (235a0 <spi_data_rsp+0xf0>)
   23502:	4798      	blx	r3
   23504:	4b27      	ldr	r3, [pc, #156]	; (235a4 <spi_data_rsp+0xf4>)
   23506:	0018      	movs	r0, r3
   23508:	4b25      	ldr	r3, [pc, #148]	; (235a0 <spi_data_rsp+0xf0>)
   2350a:	4798      	blx	r3
   2350c:	4b26      	ldr	r3, [pc, #152]	; (235a8 <spi_data_rsp+0xf8>)
   2350e:	0018      	movs	r0, r3
   23510:	4b23      	ldr	r3, [pc, #140]	; (235a0 <spi_data_rsp+0xf0>)
   23512:	4798      	blx	r3
		result = N_FAIL;
   23514:	230e      	movs	r3, #14
   23516:	18fb      	adds	r3, r7, r3
   23518:	2200      	movs	r2, #0
   2351a:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   2351c:	e030      	b.n	23580 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   2351e:	230f      	movs	r3, #15
   23520:	18fb      	adds	r3, r7, r3
   23522:	781b      	ldrb	r3, [r3, #0]
   23524:	3b01      	subs	r3, #1
   23526:	2208      	movs	r2, #8
   23528:	18ba      	adds	r2, r7, r2
   2352a:	5cd3      	ldrb	r3, [r2, r3]
   2352c:	2b00      	cmp	r3, #0
   2352e:	d108      	bne.n	23542 <spi_data_rsp+0x92>
   23530:	230f      	movs	r3, #15
   23532:	18fb      	adds	r3, r7, r3
   23534:	781b      	ldrb	r3, [r3, #0]
   23536:	3b02      	subs	r3, #2
   23538:	2208      	movs	r2, #8
   2353a:	18ba      	adds	r2, r7, r2
   2353c:	5cd3      	ldrb	r3, [r2, r3]
   2353e:	2bc3      	cmp	r3, #195	; 0xc3
   23540:	d01e      	beq.n	23580 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   23542:	233c      	movs	r3, #60	; 0x3c
   23544:	33ff      	adds	r3, #255	; 0xff
   23546:	001a      	movs	r2, r3
   23548:	4913      	ldr	r1, [pc, #76]	; (23598 <spi_data_rsp+0xe8>)
   2354a:	4b14      	ldr	r3, [pc, #80]	; (2359c <spi_data_rsp+0xec>)
   2354c:	0018      	movs	r0, r3
   2354e:	4b14      	ldr	r3, [pc, #80]	; (235a0 <spi_data_rsp+0xf0>)
   23550:	4798      	blx	r3
   23552:	2308      	movs	r3, #8
   23554:	18fb      	adds	r3, r7, r3
   23556:	781b      	ldrb	r3, [r3, #0]
   23558:	0019      	movs	r1, r3
   2355a:	2308      	movs	r3, #8
   2355c:	18fb      	adds	r3, r7, r3
   2355e:	785b      	ldrb	r3, [r3, #1]
   23560:	001a      	movs	r2, r3
   23562:	2308      	movs	r3, #8
   23564:	18fb      	adds	r3, r7, r3
   23566:	789b      	ldrb	r3, [r3, #2]
   23568:	4810      	ldr	r0, [pc, #64]	; (235ac <spi_data_rsp+0xfc>)
   2356a:	4c0d      	ldr	r4, [pc, #52]	; (235a0 <spi_data_rsp+0xf0>)
   2356c:	47a0      	blx	r4
   2356e:	4b0e      	ldr	r3, [pc, #56]	; (235a8 <spi_data_rsp+0xf8>)
   23570:	0018      	movs	r0, r3
   23572:	4b0b      	ldr	r3, [pc, #44]	; (235a0 <spi_data_rsp+0xf0>)
   23574:	4798      	blx	r3
		result = N_FAIL;
   23576:	230e      	movs	r3, #14
   23578:	18fb      	adds	r3, r7, r3
   2357a:	2200      	movs	r2, #0
   2357c:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   2357e:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   23580:	230e      	movs	r3, #14
   23582:	18fb      	adds	r3, r7, r3
   23584:	781b      	ldrb	r3, [r3, #0]
   23586:	b25b      	sxtb	r3, r3
}
   23588:	0018      	movs	r0, r3
   2358a:	46bd      	mov	sp, r7
   2358c:	b005      	add	sp, #20
   2358e:	bd90      	pop	{r4, r7, pc}
   23590:	20004154 	.word	0x20004154
   23594:	00023025 	.word	0x00023025
   23598:	00039050 	.word	0x00039050
   2359c:	00038a58 	.word	0x00038a58
   235a0:	0001dbd9 	.word	0x0001dbd9
   235a4:	00038a9c 	.word	0x00038a9c
   235a8:	00038a98 	.word	0x00038a98
   235ac:	00038abc 	.word	0x00038abc

000235b0 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   235b0:	b580      	push	{r7, lr}
   235b2:	b084      	sub	sp, #16
   235b4:	af00      	add	r7, sp, #0
   235b6:	0002      	movs	r2, r0
   235b8:	1dfb      	adds	r3, r7, #7
   235ba:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   235bc:	230f      	movs	r3, #15
   235be:	18fb      	adds	r3, r7, r3
   235c0:	2201      	movs	r2, #1
   235c2:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   235c4:	1dfb      	adds	r3, r7, #7
   235c6:	781b      	ldrb	r3, [r3, #0]
   235c8:	2bcf      	cmp	r3, #207	; 0xcf
   235ca:	d007      	beq.n	235dc <spi_cmd_rsp+0x2c>
   235cc:	1dfb      	adds	r3, r7, #7
   235ce:	781b      	ldrb	r3, [r3, #0]
   235d0:	2bc5      	cmp	r3, #197	; 0xc5
   235d2:	d003      	beq.n	235dc <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   235d4:	1dfb      	adds	r3, r7, #7
   235d6:	781b      	ldrb	r3, [r3, #0]
   235d8:	2bc6      	cmp	r3, #198	; 0xc6
   235da:	d10c      	bne.n	235f6 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   235dc:	230d      	movs	r3, #13
   235de:	18fb      	adds	r3, r7, r3
   235e0:	2101      	movs	r1, #1
   235e2:	0018      	movs	r0, r3
   235e4:	4b3b      	ldr	r3, [pc, #236]	; (236d4 <spi_cmd_rsp+0x124>)
   235e6:	4798      	blx	r3
   235e8:	1e03      	subs	r3, r0, #0
   235ea:	d004      	beq.n	235f6 <spi_cmd_rsp+0x46>
			result = N_FAIL;
   235ec:	230f      	movs	r3, #15
   235ee:	18fb      	adds	r3, r7, r3
   235f0:	2200      	movs	r2, #0
   235f2:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   235f4:	e065      	b.n	236c2 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   235f6:	230e      	movs	r3, #14
   235f8:	18fb      	adds	r3, r7, r3
   235fa:	220a      	movs	r2, #10
   235fc:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   235fe:	230d      	movs	r3, #13
   23600:	18fb      	adds	r3, r7, r3
   23602:	2101      	movs	r1, #1
   23604:	0018      	movs	r0, r3
   23606:	4b33      	ldr	r3, [pc, #204]	; (236d4 <spi_cmd_rsp+0x124>)
   23608:	4798      	blx	r3
   2360a:	1e03      	subs	r3, r0, #0
   2360c:	d014      	beq.n	23638 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2360e:	235c      	movs	r3, #92	; 0x5c
   23610:	33ff      	adds	r3, #255	; 0xff
   23612:	001a      	movs	r2, r3
   23614:	4930      	ldr	r1, [pc, #192]	; (236d8 <spi_cmd_rsp+0x128>)
   23616:	4b31      	ldr	r3, [pc, #196]	; (236dc <spi_cmd_rsp+0x12c>)
   23618:	0018      	movs	r0, r3
   2361a:	4b31      	ldr	r3, [pc, #196]	; (236e0 <spi_cmd_rsp+0x130>)
   2361c:	4798      	blx	r3
   2361e:	4b31      	ldr	r3, [pc, #196]	; (236e4 <spi_cmd_rsp+0x134>)
   23620:	0018      	movs	r0, r3
   23622:	4b2f      	ldr	r3, [pc, #188]	; (236e0 <spi_cmd_rsp+0x130>)
   23624:	4798      	blx	r3
   23626:	4b30      	ldr	r3, [pc, #192]	; (236e8 <spi_cmd_rsp+0x138>)
   23628:	0018      	movs	r0, r3
   2362a:	4b2d      	ldr	r3, [pc, #180]	; (236e0 <spi_cmd_rsp+0x130>)
   2362c:	4798      	blx	r3
			result = N_FAIL;
   2362e:	230f      	movs	r3, #15
   23630:	18fb      	adds	r3, r7, r3
   23632:	2200      	movs	r2, #0
   23634:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23636:	e044      	b.n	236c2 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   23638:	230d      	movs	r3, #13
   2363a:	18fb      	adds	r3, r7, r3
   2363c:	781b      	ldrb	r3, [r3, #0]
   2363e:	1dfa      	adds	r2, r7, #7
   23640:	7812      	ldrb	r2, [r2, #0]
   23642:	429a      	cmp	r2, r3
   23644:	d00b      	beq.n	2365e <spi_cmd_rsp+0xae>
   23646:	230e      	movs	r3, #14
   23648:	18fb      	adds	r3, r7, r3
   2364a:	781b      	ldrb	r3, [r3, #0]
   2364c:	b25b      	sxtb	r3, r3
   2364e:	b2da      	uxtb	r2, r3
   23650:	3a01      	subs	r2, #1
   23652:	b2d1      	uxtb	r1, r2
   23654:	220e      	movs	r2, #14
   23656:	18ba      	adds	r2, r7, r2
   23658:	7011      	strb	r1, [r2, #0]
   2365a:	2b00      	cmp	r3, #0
   2365c:	dccf      	bgt.n	235fe <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2365e:	230e      	movs	r3, #14
   23660:	18fb      	adds	r3, r7, r3
   23662:	220a      	movs	r2, #10
   23664:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23666:	230d      	movs	r3, #13
   23668:	18fb      	adds	r3, r7, r3
   2366a:	2101      	movs	r1, #1
   2366c:	0018      	movs	r0, r3
   2366e:	4b19      	ldr	r3, [pc, #100]	; (236d4 <spi_cmd_rsp+0x124>)
   23670:	4798      	blx	r3
   23672:	1e03      	subs	r3, r0, #0
   23674:	d014      	beq.n	236a0 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   23676:	236a      	movs	r3, #106	; 0x6a
   23678:	33ff      	adds	r3, #255	; 0xff
   2367a:	001a      	movs	r2, r3
   2367c:	4916      	ldr	r1, [pc, #88]	; (236d8 <spi_cmd_rsp+0x128>)
   2367e:	4b17      	ldr	r3, [pc, #92]	; (236dc <spi_cmd_rsp+0x12c>)
   23680:	0018      	movs	r0, r3
   23682:	4b17      	ldr	r3, [pc, #92]	; (236e0 <spi_cmd_rsp+0x130>)
   23684:	4798      	blx	r3
   23686:	4b17      	ldr	r3, [pc, #92]	; (236e4 <spi_cmd_rsp+0x134>)
   23688:	0018      	movs	r0, r3
   2368a:	4b15      	ldr	r3, [pc, #84]	; (236e0 <spi_cmd_rsp+0x130>)
   2368c:	4798      	blx	r3
   2368e:	4b16      	ldr	r3, [pc, #88]	; (236e8 <spi_cmd_rsp+0x138>)
   23690:	0018      	movs	r0, r3
   23692:	4b13      	ldr	r3, [pc, #76]	; (236e0 <spi_cmd_rsp+0x130>)
   23694:	4798      	blx	r3
			result = N_FAIL;
   23696:	230f      	movs	r3, #15
   23698:	18fb      	adds	r3, r7, r3
   2369a:	2200      	movs	r2, #0
   2369c:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2369e:	e010      	b.n	236c2 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   236a0:	230d      	movs	r3, #13
   236a2:	18fb      	adds	r3, r7, r3
   236a4:	781b      	ldrb	r3, [r3, #0]
   236a6:	2b00      	cmp	r3, #0
   236a8:	d00b      	beq.n	236c2 <spi_cmd_rsp+0x112>
   236aa:	230e      	movs	r3, #14
   236ac:	18fb      	adds	r3, r7, r3
   236ae:	781b      	ldrb	r3, [r3, #0]
   236b0:	b25b      	sxtb	r3, r3
   236b2:	b2da      	uxtb	r2, r3
   236b4:	3a01      	subs	r2, #1
   236b6:	b2d1      	uxtb	r1, r2
   236b8:	220e      	movs	r2, #14
   236ba:	18ba      	adds	r2, r7, r2
   236bc:	7011      	strb	r1, [r2, #0]
   236be:	2b00      	cmp	r3, #0
   236c0:	dcd1      	bgt.n	23666 <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   236c2:	230f      	movs	r3, #15
   236c4:	18fb      	adds	r3, r7, r3
   236c6:	781b      	ldrb	r3, [r3, #0]
   236c8:	b25b      	sxtb	r3, r3
}
   236ca:	0018      	movs	r0, r3
   236cc:	46bd      	mov	sp, r7
   236ce:	b004      	add	sp, #16
   236d0:	bd80      	pop	{r7, pc}
   236d2:	46c0      	nop			; (mov r8, r8)
   236d4:	00023025 	.word	0x00023025
   236d8:	00039060 	.word	0x00039060
   236dc:	00038a58 	.word	0x00038a58
   236e0:	0001dbd9 	.word	0x0001dbd9
   236e4:	00038aec 	.word	0x00038aec
   236e8:	00038a98 	.word	0x00038a98

000236ec <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   236ec:	b590      	push	{r4, r7, lr}
   236ee:	b09f      	sub	sp, #124	; 0x7c
   236f0:	af00      	add	r7, sp, #0
   236f2:	60b9      	str	r1, [r7, #8]
   236f4:	607a      	str	r2, [r7, #4]
   236f6:	603b      	str	r3, [r7, #0]
   236f8:	230f      	movs	r3, #15
   236fa:	18fb      	adds	r3, r7, r3
   236fc:	1c02      	adds	r2, r0, #0
   236fe:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   23700:	2300      	movs	r3, #0
   23702:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   23704:	2301      	movs	r3, #1
   23706:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   23708:	2338      	movs	r3, #56	; 0x38
   2370a:	18fb      	adds	r3, r7, r3
   2370c:	220f      	movs	r2, #15
   2370e:	18ba      	adds	r2, r7, r2
   23710:	7812      	ldrb	r2, [r2, #0]
   23712:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23714:	230f      	movs	r3, #15
   23716:	18fb      	adds	r3, r7, r3
   23718:	781b      	ldrb	r3, [r3, #0]
   2371a:	3bc1      	subs	r3, #193	; 0xc1
   2371c:	2b0e      	cmp	r3, #14
   2371e:	d900      	bls.n	23722 <spi_cmd_complete+0x36>
   23720:	e103      	b.n	2392a <spi_cmd_complete+0x23e>
   23722:	009a      	lsls	r2, r3, #2
   23724:	4bd1      	ldr	r3, [pc, #836]	; (23a6c <spi_cmd_complete+0x380>)
   23726:	18d3      	adds	r3, r2, r3
   23728:	681b      	ldr	r3, [r3, #0]
   2372a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   2372c:	68bb      	ldr	r3, [r7, #8]
   2372e:	0c1b      	lsrs	r3, r3, #16
   23730:	b2da      	uxtb	r2, r3
   23732:	2338      	movs	r3, #56	; 0x38
   23734:	18fb      	adds	r3, r7, r3
   23736:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23738:	68bb      	ldr	r3, [r7, #8]
   2373a:	0a1b      	lsrs	r3, r3, #8
   2373c:	b2da      	uxtb	r2, r3
   2373e:	2338      	movs	r3, #56	; 0x38
   23740:	18fb      	adds	r3, r7, r3
   23742:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23744:	68bb      	ldr	r3, [r7, #8]
   23746:	b2da      	uxtb	r2, r3
   23748:	2338      	movs	r3, #56	; 0x38
   2374a:	18fb      	adds	r3, r7, r3
   2374c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2374e:	2305      	movs	r3, #5
   23750:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   23752:	e0ed      	b.n	23930 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   23754:	68bb      	ldr	r3, [r7, #8]
   23756:	0a1b      	lsrs	r3, r3, #8
   23758:	b2da      	uxtb	r2, r3
   2375a:	2338      	movs	r3, #56	; 0x38
   2375c:	18fb      	adds	r3, r7, r3
   2375e:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23760:	2388      	movs	r3, #136	; 0x88
   23762:	18fb      	adds	r3, r7, r3
   23764:	781b      	ldrb	r3, [r3, #0]
   23766:	2b01      	cmp	r3, #1
   23768:	d109      	bne.n	2377e <spi_cmd_complete+0x92>
   2376a:	2338      	movs	r3, #56	; 0x38
   2376c:	18fb      	adds	r3, r7, r3
   2376e:	785b      	ldrb	r3, [r3, #1]
   23770:	2280      	movs	r2, #128	; 0x80
   23772:	4252      	negs	r2, r2
   23774:	4313      	orrs	r3, r2
   23776:	b2da      	uxtb	r2, r3
   23778:	2338      	movs	r3, #56	; 0x38
   2377a:	18fb      	adds	r3, r7, r3
   2377c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   2377e:	68bb      	ldr	r3, [r7, #8]
   23780:	b2da      	uxtb	r2, r3
   23782:	2338      	movs	r3, #56	; 0x38
   23784:	18fb      	adds	r3, r7, r3
   23786:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23788:	2338      	movs	r3, #56	; 0x38
   2378a:	18fb      	adds	r3, r7, r3
   2378c:	2200      	movs	r2, #0
   2378e:	70da      	strb	r2, [r3, #3]
		len = 5;
   23790:	2305      	movs	r3, #5
   23792:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23794:	e0cc      	b.n	23930 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   23796:	2338      	movs	r3, #56	; 0x38
   23798:	18fb      	adds	r3, r7, r3
   2379a:	2200      	movs	r2, #0
   2379c:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   2379e:	2338      	movs	r3, #56	; 0x38
   237a0:	18fb      	adds	r3, r7, r3
   237a2:	2200      	movs	r2, #0
   237a4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   237a6:	2338      	movs	r3, #56	; 0x38
   237a8:	18fb      	adds	r3, r7, r3
   237aa:	2200      	movs	r2, #0
   237ac:	70da      	strb	r2, [r3, #3]
		len = 5;
   237ae:	2305      	movs	r3, #5
   237b0:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   237b2:	e0bd      	b.n	23930 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   237b4:	2338      	movs	r3, #56	; 0x38
   237b6:	18fb      	adds	r3, r7, r3
   237b8:	2200      	movs	r2, #0
   237ba:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   237bc:	2338      	movs	r3, #56	; 0x38
   237be:	18fb      	adds	r3, r7, r3
   237c0:	2200      	movs	r2, #0
   237c2:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   237c4:	2338      	movs	r3, #56	; 0x38
   237c6:	18fb      	adds	r3, r7, r3
   237c8:	2200      	movs	r2, #0
   237ca:	70da      	strb	r2, [r3, #3]
		len = 5;
   237cc:	2305      	movs	r3, #5
   237ce:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   237d0:	e0ae      	b.n	23930 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   237d2:	2338      	movs	r3, #56	; 0x38
   237d4:	18fb      	adds	r3, r7, r3
   237d6:	22ff      	movs	r2, #255	; 0xff
   237d8:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   237da:	2338      	movs	r3, #56	; 0x38
   237dc:	18fb      	adds	r3, r7, r3
   237de:	22ff      	movs	r2, #255	; 0xff
   237e0:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   237e2:	2338      	movs	r3, #56	; 0x38
   237e4:	18fb      	adds	r3, r7, r3
   237e6:	22ff      	movs	r2, #255	; 0xff
   237e8:	70da      	strb	r2, [r3, #3]
		len = 5;
   237ea:	2305      	movs	r3, #5
   237ec:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   237ee:	e09f      	b.n	23930 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   237f0:	68bb      	ldr	r3, [r7, #8]
   237f2:	0c1b      	lsrs	r3, r3, #16
   237f4:	b2da      	uxtb	r2, r3
   237f6:	2338      	movs	r3, #56	; 0x38
   237f8:	18fb      	adds	r3, r7, r3
   237fa:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   237fc:	68bb      	ldr	r3, [r7, #8]
   237fe:	0a1b      	lsrs	r3, r3, #8
   23800:	b2da      	uxtb	r2, r3
   23802:	2338      	movs	r3, #56	; 0x38
   23804:	18fb      	adds	r3, r7, r3
   23806:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23808:	68bb      	ldr	r3, [r7, #8]
   2380a:	b2da      	uxtb	r2, r3
   2380c:	2338      	movs	r3, #56	; 0x38
   2380e:	18fb      	adds	r3, r7, r3
   23810:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   23812:	683b      	ldr	r3, [r7, #0]
   23814:	0a1b      	lsrs	r3, r3, #8
   23816:	b2da      	uxtb	r2, r3
   23818:	2338      	movs	r3, #56	; 0x38
   2381a:	18fb      	adds	r3, r7, r3
   2381c:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   2381e:	683b      	ldr	r3, [r7, #0]
   23820:	b2da      	uxtb	r2, r3
   23822:	2338      	movs	r3, #56	; 0x38
   23824:	18fb      	adds	r3, r7, r3
   23826:	715a      	strb	r2, [r3, #5]
		len = 7;
   23828:	2307      	movs	r3, #7
   2382a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2382c:	e080      	b.n	23930 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   2382e:	68bb      	ldr	r3, [r7, #8]
   23830:	0c1b      	lsrs	r3, r3, #16
   23832:	b2da      	uxtb	r2, r3
   23834:	2338      	movs	r3, #56	; 0x38
   23836:	18fb      	adds	r3, r7, r3
   23838:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2383a:	68bb      	ldr	r3, [r7, #8]
   2383c:	0a1b      	lsrs	r3, r3, #8
   2383e:	b2da      	uxtb	r2, r3
   23840:	2338      	movs	r3, #56	; 0x38
   23842:	18fb      	adds	r3, r7, r3
   23844:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23846:	68bb      	ldr	r3, [r7, #8]
   23848:	b2da      	uxtb	r2, r3
   2384a:	2338      	movs	r3, #56	; 0x38
   2384c:	18fb      	adds	r3, r7, r3
   2384e:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   23850:	683b      	ldr	r3, [r7, #0]
   23852:	0c1b      	lsrs	r3, r3, #16
   23854:	b2da      	uxtb	r2, r3
   23856:	2338      	movs	r3, #56	; 0x38
   23858:	18fb      	adds	r3, r7, r3
   2385a:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   2385c:	683b      	ldr	r3, [r7, #0]
   2385e:	0a1b      	lsrs	r3, r3, #8
   23860:	b2da      	uxtb	r2, r3
   23862:	2338      	movs	r3, #56	; 0x38
   23864:	18fb      	adds	r3, r7, r3
   23866:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   23868:	683b      	ldr	r3, [r7, #0]
   2386a:	b2da      	uxtb	r2, r3
   2386c:	2338      	movs	r3, #56	; 0x38
   2386e:	18fb      	adds	r3, r7, r3
   23870:	719a      	strb	r2, [r3, #6]
		len = 8;
   23872:	2308      	movs	r3, #8
   23874:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23876:	e05b      	b.n	23930 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   23878:	68bb      	ldr	r3, [r7, #8]
   2387a:	0a1b      	lsrs	r3, r3, #8
   2387c:	b2da      	uxtb	r2, r3
   2387e:	2338      	movs	r3, #56	; 0x38
   23880:	18fb      	adds	r3, r7, r3
   23882:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23884:	2388      	movs	r3, #136	; 0x88
   23886:	18fb      	adds	r3, r7, r3
   23888:	781b      	ldrb	r3, [r3, #0]
   2388a:	2b01      	cmp	r3, #1
   2388c:	d109      	bne.n	238a2 <spi_cmd_complete+0x1b6>
   2388e:	2338      	movs	r3, #56	; 0x38
   23890:	18fb      	adds	r3, r7, r3
   23892:	785b      	ldrb	r3, [r3, #1]
   23894:	2280      	movs	r2, #128	; 0x80
   23896:	4252      	negs	r2, r2
   23898:	4313      	orrs	r3, r2
   2389a:	b2da      	uxtb	r2, r3
   2389c:	2338      	movs	r3, #56	; 0x38
   2389e:	18fb      	adds	r3, r7, r3
   238a0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   238a2:	68bb      	ldr	r3, [r7, #8]
   238a4:	b2da      	uxtb	r2, r3
   238a6:	2338      	movs	r3, #56	; 0x38
   238a8:	18fb      	adds	r3, r7, r3
   238aa:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   238ac:	687b      	ldr	r3, [r7, #4]
   238ae:	78da      	ldrb	r2, [r3, #3]
   238b0:	2338      	movs	r3, #56	; 0x38
   238b2:	18fb      	adds	r3, r7, r3
   238b4:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   238b6:	687b      	ldr	r3, [r7, #4]
   238b8:	789a      	ldrb	r2, [r3, #2]
   238ba:	2338      	movs	r3, #56	; 0x38
   238bc:	18fb      	adds	r3, r7, r3
   238be:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   238c0:	687b      	ldr	r3, [r7, #4]
   238c2:	785a      	ldrb	r2, [r3, #1]
   238c4:	2338      	movs	r3, #56	; 0x38
   238c6:	18fb      	adds	r3, r7, r3
   238c8:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   238ca:	687b      	ldr	r3, [r7, #4]
   238cc:	781a      	ldrb	r2, [r3, #0]
   238ce:	2338      	movs	r3, #56	; 0x38
   238d0:	18fb      	adds	r3, r7, r3
   238d2:	719a      	strb	r2, [r3, #6]
		len = 8;
   238d4:	2308      	movs	r3, #8
   238d6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   238d8:	e02a      	b.n	23930 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   238da:	68bb      	ldr	r3, [r7, #8]
   238dc:	0c1b      	lsrs	r3, r3, #16
   238de:	b2da      	uxtb	r2, r3
   238e0:	2338      	movs	r3, #56	; 0x38
   238e2:	18fb      	adds	r3, r7, r3
   238e4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   238e6:	68bb      	ldr	r3, [r7, #8]
   238e8:	0a1b      	lsrs	r3, r3, #8
   238ea:	b2da      	uxtb	r2, r3
   238ec:	2338      	movs	r3, #56	; 0x38
   238ee:	18fb      	adds	r3, r7, r3
   238f0:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   238f2:	68bb      	ldr	r3, [r7, #8]
   238f4:	b2da      	uxtb	r2, r3
   238f6:	2338      	movs	r3, #56	; 0x38
   238f8:	18fb      	adds	r3, r7, r3
   238fa:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   238fc:	687b      	ldr	r3, [r7, #4]
   238fe:	78da      	ldrb	r2, [r3, #3]
   23900:	2338      	movs	r3, #56	; 0x38
   23902:	18fb      	adds	r3, r7, r3
   23904:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   23906:	687b      	ldr	r3, [r7, #4]
   23908:	789a      	ldrb	r2, [r3, #2]
   2390a:	2338      	movs	r3, #56	; 0x38
   2390c:	18fb      	adds	r3, r7, r3
   2390e:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   23910:	687b      	ldr	r3, [r7, #4]
   23912:	785a      	ldrb	r2, [r3, #1]
   23914:	2338      	movs	r3, #56	; 0x38
   23916:	18fb      	adds	r3, r7, r3
   23918:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   2391a:	687b      	ldr	r3, [r7, #4]
   2391c:	781a      	ldrb	r2, [r3, #0]
   2391e:	2338      	movs	r3, #56	; 0x38
   23920:	18fb      	adds	r3, r7, r3
   23922:	71da      	strb	r2, [r3, #7]
		len = 9;
   23924:	2309      	movs	r3, #9
   23926:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23928:	e002      	b.n	23930 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   2392a:	2300      	movs	r3, #0
   2392c:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   2392e:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   23930:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23932:	2b01      	cmp	r3, #1
   23934:	d001      	beq.n	2393a <spi_cmd_complete+0x24e>
		return result;
   23936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23938:	e33a      	b.n	23fb0 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   2393a:	4b4d      	ldr	r3, [pc, #308]	; (23a70 <spi_cmd_complete+0x384>)
   2393c:	781b      	ldrb	r3, [r3, #0]
   2393e:	2b00      	cmp	r3, #0
   23940:	d111      	bne.n	23966 <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   23942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23944:	1e5c      	subs	r4, r3, #1
   23946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23948:	3b01      	subs	r3, #1
   2394a:	001a      	movs	r2, r3
   2394c:	2338      	movs	r3, #56	; 0x38
   2394e:	18fb      	adds	r3, r7, r3
   23950:	0019      	movs	r1, r3
   23952:	207f      	movs	r0, #127	; 0x7f
   23954:	4b47      	ldr	r3, [pc, #284]	; (23a74 <spi_cmd_complete+0x388>)
   23956:	4798      	blx	r3
   23958:	0003      	movs	r3, r0
   2395a:	18db      	adds	r3, r3, r3
   2395c:	b2da      	uxtb	r2, r3
   2395e:	2338      	movs	r3, #56	; 0x38
   23960:	18fb      	adds	r3, r7, r3
   23962:	551a      	strb	r2, [r3, r4]
   23964:	e002      	b.n	2396c <spi_cmd_complete+0x280>
	} else {
		len -=1;
   23966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23968:	3b01      	subs	r3, #1
   2396a:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   2396c:	230f      	movs	r3, #15
   2396e:	18fb      	adds	r3, r7, r3
   23970:	781b      	ldrb	r3, [r3, #0]
   23972:	2bcf      	cmp	r3, #207	; 0xcf
   23974:	d009      	beq.n	2398a <spi_cmd_complete+0x29e>
   23976:	230f      	movs	r3, #15
   23978:	18fb      	adds	r3, r7, r3
   2397a:	781b      	ldrb	r3, [r3, #0]
   2397c:	2bc5      	cmp	r3, #197	; 0xc5
   2397e:	d004      	beq.n	2398a <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   23980:	230f      	movs	r3, #15
   23982:	18fb      	adds	r3, r7, r3
   23984:	781b      	ldrb	r3, [r3, #0]
   23986:	2bc6      	cmp	r3, #198	; 0xc6
   23988:	d103      	bne.n	23992 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   2398a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2398c:	3306      	adds	r3, #6
   2398e:	673b      	str	r3, [r7, #112]	; 0x70
   23990:	e018      	b.n	239c4 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   23992:	230f      	movs	r3, #15
   23994:	18fb      	adds	r3, r7, r3
   23996:	781b      	ldrb	r3, [r3, #0]
   23998:	2bc4      	cmp	r3, #196	; 0xc4
   2399a:	d004      	beq.n	239a6 <spi_cmd_complete+0x2ba>
   2399c:	230f      	movs	r3, #15
   2399e:	18fb      	adds	r3, r7, r3
   239a0:	781b      	ldrb	r3, [r3, #0]
   239a2:	2bca      	cmp	r3, #202	; 0xca
   239a4:	d10b      	bne.n	239be <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   239a6:	4b32      	ldr	r3, [pc, #200]	; (23a70 <spi_cmd_complete+0x384>)
   239a8:	781b      	ldrb	r3, [r3, #0]
   239aa:	2b00      	cmp	r3, #0
   239ac:	d103      	bne.n	239b6 <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   239ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   239b0:	330c      	adds	r3, #12
   239b2:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   239b4:	e006      	b.n	239c4 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   239b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   239b8:	330a      	adds	r3, #10
   239ba:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   239bc:	e002      	b.n	239c4 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   239be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   239c0:	3305      	adds	r3, #5
   239c2:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   239c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   239c6:	2b20      	cmp	r3, #32
   239c8:	d914      	bls.n	239f4 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   239ca:	23f7      	movs	r3, #247	; 0xf7
   239cc:	005a      	lsls	r2, r3, #1
   239ce:	492a      	ldr	r1, [pc, #168]	; (23a78 <spi_cmd_complete+0x38c>)
   239d0:	4b2a      	ldr	r3, [pc, #168]	; (23a7c <spi_cmd_complete+0x390>)
   239d2:	0018      	movs	r0, r3
   239d4:	4b2a      	ldr	r3, [pc, #168]	; (23a80 <spi_cmd_complete+0x394>)
   239d6:	4798      	blx	r3
   239d8:	6f39      	ldr	r1, [r7, #112]	; 0x70
   239da:	4b2a      	ldr	r3, [pc, #168]	; (23a84 <spi_cmd_complete+0x398>)
   239dc:	2220      	movs	r2, #32
   239de:	0018      	movs	r0, r3
   239e0:	4b27      	ldr	r3, [pc, #156]	; (23a80 <spi_cmd_complete+0x394>)
   239e2:	4798      	blx	r3
   239e4:	4b28      	ldr	r3, [pc, #160]	; (23a88 <spi_cmd_complete+0x39c>)
   239e6:	0018      	movs	r0, r3
   239e8:	4b25      	ldr	r3, [pc, #148]	; (23a80 <spi_cmd_complete+0x394>)
   239ea:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   239ec:	2300      	movs	r3, #0
   239ee:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   239f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   239f2:	e2dd      	b.n	23fb0 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   239f4:	2377      	movs	r3, #119	; 0x77
   239f6:	18fb      	adds	r3, r7, r3
   239f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   239fa:	701a      	strb	r2, [r3, #0]
   239fc:	e00d      	b.n	23a1a <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   239fe:	2377      	movs	r3, #119	; 0x77
   23a00:	18fb      	adds	r3, r7, r3
   23a02:	781b      	ldrb	r3, [r3, #0]
   23a04:	2238      	movs	r2, #56	; 0x38
   23a06:	18ba      	adds	r2, r7, r2
   23a08:	2100      	movs	r1, #0
   23a0a:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   23a0c:	2377      	movs	r3, #119	; 0x77
   23a0e:	18fb      	adds	r3, r7, r3
   23a10:	781a      	ldrb	r2, [r3, #0]
   23a12:	2377      	movs	r3, #119	; 0x77
   23a14:	18fb      	adds	r3, r7, r3
   23a16:	3201      	adds	r2, #1
   23a18:	701a      	strb	r2, [r3, #0]
   23a1a:	2377      	movs	r3, #119	; 0x77
   23a1c:	18fb      	adds	r3, r7, r3
   23a1e:	781a      	ldrb	r2, [r3, #0]
   23a20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23a22:	429a      	cmp	r2, r3
   23a24:	d3eb      	bcc.n	239fe <spi_cmd_complete+0x312>
	}
	rix = len;
   23a26:	2376      	movs	r3, #118	; 0x76
   23a28:	18fb      	adds	r3, r7, r3
   23a2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   23a2c:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   23a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23a30:	b29a      	uxth	r2, r3
   23a32:	2318      	movs	r3, #24
   23a34:	18f9      	adds	r1, r7, r3
   23a36:	2338      	movs	r3, #56	; 0x38
   23a38:	18fb      	adds	r3, r7, r3
   23a3a:	0018      	movs	r0, r3
   23a3c:	4b13      	ldr	r3, [pc, #76]	; (23a8c <spi_cmd_complete+0x3a0>)
   23a3e:	4798      	blx	r3
   23a40:	1e03      	subs	r3, r0, #0
   23a42:	d027      	beq.n	23a94 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23a44:	23fa      	movs	r3, #250	; 0xfa
   23a46:	33ff      	adds	r3, #255	; 0xff
   23a48:	001a      	movs	r2, r3
   23a4a:	490b      	ldr	r1, [pc, #44]	; (23a78 <spi_cmd_complete+0x38c>)
   23a4c:	4b0b      	ldr	r3, [pc, #44]	; (23a7c <spi_cmd_complete+0x390>)
   23a4e:	0018      	movs	r0, r3
   23a50:	4b0b      	ldr	r3, [pc, #44]	; (23a80 <spi_cmd_complete+0x394>)
   23a52:	4798      	blx	r3
   23a54:	4b0e      	ldr	r3, [pc, #56]	; (23a90 <spi_cmd_complete+0x3a4>)
   23a56:	0018      	movs	r0, r3
   23a58:	4b09      	ldr	r3, [pc, #36]	; (23a80 <spi_cmd_complete+0x394>)
   23a5a:	4798      	blx	r3
   23a5c:	4b0a      	ldr	r3, [pc, #40]	; (23a88 <spi_cmd_complete+0x39c>)
   23a5e:	0018      	movs	r0, r3
   23a60:	4b07      	ldr	r3, [pc, #28]	; (23a80 <spi_cmd_complete+0x394>)
   23a62:	4798      	blx	r3
		result = N_FAIL;
   23a64:	2300      	movs	r3, #0
   23a66:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23a6a:	e2a1      	b.n	23fb0 <spi_cmd_complete+0x8c4>
   23a6c:	0003900c 	.word	0x0003900c
   23a70:	20004154 	.word	0x20004154
   23a74:	00023121 	.word	0x00023121
   23a78:	0003906c 	.word	0x0003906c
   23a7c:	00038a58 	.word	0x00038a58
   23a80:	0001dbd9 	.word	0x0001dbd9
   23a84:	00038b20 	.word	0x00038b20
   23a88:	00038a98 	.word	0x00038a98
   23a8c:	000230ad 	.word	0x000230ad
   23a90:	00038a6c 	.word	0x00038a6c
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23a94:	230f      	movs	r3, #15
   23a96:	18fb      	adds	r3, r7, r3
   23a98:	781b      	ldrb	r3, [r3, #0]
   23a9a:	2bcf      	cmp	r3, #207	; 0xcf
   23a9c:	d009      	beq.n	23ab2 <spi_cmd_complete+0x3c6>
   23a9e:	230f      	movs	r3, #15
   23aa0:	18fb      	adds	r3, r7, r3
   23aa2:	781b      	ldrb	r3, [r3, #0]
   23aa4:	2bc5      	cmp	r3, #197	; 0xc5
   23aa6:	d004      	beq.n	23ab2 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   23aa8:	230f      	movs	r3, #15
   23aaa:	18fb      	adds	r3, r7, r3
   23aac:	781b      	ldrb	r3, [r3, #0]
   23aae:	2bc6      	cmp	r3, #198	; 0xc6
   23ab0:	d106      	bne.n	23ac0 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   23ab2:	2376      	movs	r3, #118	; 0x76
   23ab4:	18fb      	adds	r3, r7, r3
   23ab6:	781a      	ldrb	r2, [r3, #0]
   23ab8:	2376      	movs	r3, #118	; 0x76
   23aba:	18fb      	adds	r3, r7, r3
   23abc:	3201      	adds	r2, #1
   23abe:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   23ac0:	2376      	movs	r3, #118	; 0x76
   23ac2:	18fb      	adds	r3, r7, r3
   23ac4:	781b      	ldrb	r3, [r3, #0]
   23ac6:	2276      	movs	r2, #118	; 0x76
   23ac8:	18ba      	adds	r2, r7, r2
   23aca:	1c59      	adds	r1, r3, #1
   23acc:	7011      	strb	r1, [r2, #0]
   23ace:	001a      	movs	r2, r3
   23ad0:	2318      	movs	r3, #24
   23ad2:	18fb      	adds	r3, r7, r3
   23ad4:	5c9a      	ldrb	r2, [r3, r2]
   23ad6:	2317      	movs	r3, #23
   23ad8:	18fb      	adds	r3, r7, r3
   23ada:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   23adc:	2317      	movs	r3, #23
   23ade:	18fb      	adds	r3, r7, r3
   23ae0:	781b      	ldrb	r3, [r3, #0]
   23ae2:	220f      	movs	r2, #15
   23ae4:	18ba      	adds	r2, r7, r2
   23ae6:	7812      	ldrb	r2, [r2, #0]
   23ae8:	429a      	cmp	r2, r3
   23aea:	d018      	beq.n	23b1e <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   23aec:	4add      	ldr	r2, [pc, #884]	; (23e64 <spi_cmd_complete+0x778>)
   23aee:	49de      	ldr	r1, [pc, #888]	; (23e68 <spi_cmd_complete+0x77c>)
   23af0:	4bde      	ldr	r3, [pc, #888]	; (23e6c <spi_cmd_complete+0x780>)
   23af2:	0018      	movs	r0, r3
   23af4:	4bde      	ldr	r3, [pc, #888]	; (23e70 <spi_cmd_complete+0x784>)
   23af6:	4798      	blx	r3
   23af8:	230f      	movs	r3, #15
   23afa:	18fb      	adds	r3, r7, r3
   23afc:	7819      	ldrb	r1, [r3, #0]
   23afe:	2317      	movs	r3, #23
   23b00:	18fb      	adds	r3, r7, r3
   23b02:	781b      	ldrb	r3, [r3, #0]
   23b04:	001a      	movs	r2, r3
   23b06:	4bdb      	ldr	r3, [pc, #876]	; (23e74 <spi_cmd_complete+0x788>)
   23b08:	0018      	movs	r0, r3
   23b0a:	4bd9      	ldr	r3, [pc, #868]	; (23e70 <spi_cmd_complete+0x784>)
   23b0c:	4798      	blx	r3
   23b0e:	4bda      	ldr	r3, [pc, #872]	; (23e78 <spi_cmd_complete+0x78c>)
   23b10:	0018      	movs	r0, r3
   23b12:	4bd7      	ldr	r3, [pc, #860]	; (23e70 <spi_cmd_complete+0x784>)
   23b14:	4798      	blx	r3
		result = N_FAIL;
   23b16:	2300      	movs	r3, #0
   23b18:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23b1c:	e248      	b.n	23fb0 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   23b1e:	2376      	movs	r3, #118	; 0x76
   23b20:	18fb      	adds	r3, r7, r3
   23b22:	781b      	ldrb	r3, [r3, #0]
   23b24:	2276      	movs	r2, #118	; 0x76
   23b26:	18ba      	adds	r2, r7, r2
   23b28:	1c59      	adds	r1, r3, #1
   23b2a:	7011      	strb	r1, [r2, #0]
   23b2c:	001a      	movs	r2, r3
   23b2e:	2318      	movs	r3, #24
   23b30:	18fb      	adds	r3, r7, r3
   23b32:	5c9a      	ldrb	r2, [r3, r2]
   23b34:	2317      	movs	r3, #23
   23b36:	18fb      	adds	r3, r7, r3
   23b38:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   23b3a:	2317      	movs	r3, #23
   23b3c:	18fb      	adds	r3, r7, r3
   23b3e:	781b      	ldrb	r3, [r3, #0]
   23b40:	2b00      	cmp	r3, #0
   23b42:	d016      	beq.n	23b72 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   23b44:	4acd      	ldr	r2, [pc, #820]	; (23e7c <spi_cmd_complete+0x790>)
   23b46:	49c8      	ldr	r1, [pc, #800]	; (23e68 <spi_cmd_complete+0x77c>)
   23b48:	4bc8      	ldr	r3, [pc, #800]	; (23e6c <spi_cmd_complete+0x780>)
   23b4a:	0018      	movs	r0, r3
   23b4c:	4bc8      	ldr	r3, [pc, #800]	; (23e70 <spi_cmd_complete+0x784>)
   23b4e:	4798      	blx	r3
   23b50:	2317      	movs	r3, #23
   23b52:	18fb      	adds	r3, r7, r3
   23b54:	781b      	ldrb	r3, [r3, #0]
   23b56:	001a      	movs	r2, r3
   23b58:	4bc9      	ldr	r3, [pc, #804]	; (23e80 <spi_cmd_complete+0x794>)
   23b5a:	0011      	movs	r1, r2
   23b5c:	0018      	movs	r0, r3
   23b5e:	4bc4      	ldr	r3, [pc, #784]	; (23e70 <spi_cmd_complete+0x784>)
   23b60:	4798      	blx	r3
   23b62:	4bc5      	ldr	r3, [pc, #788]	; (23e78 <spi_cmd_complete+0x78c>)
   23b64:	0018      	movs	r0, r3
   23b66:	4bc2      	ldr	r3, [pc, #776]	; (23e70 <spi_cmd_complete+0x784>)
   23b68:	4798      	blx	r3
		result = N_FAIL;
   23b6a:	2300      	movs	r3, #0
   23b6c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23b70:	e21e      	b.n	23fb0 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   23b72:	230f      	movs	r3, #15
   23b74:	18fb      	adds	r3, r7, r3
   23b76:	781b      	ldrb	r3, [r3, #0]
   23b78:	2bc4      	cmp	r3, #196	; 0xc4
   23b7a:	d00f      	beq.n	23b9c <spi_cmd_complete+0x4b0>
   23b7c:	230f      	movs	r3, #15
   23b7e:	18fb      	adds	r3, r7, r3
   23b80:	781b      	ldrb	r3, [r3, #0]
   23b82:	2bca      	cmp	r3, #202	; 0xca
   23b84:	d00a      	beq.n	23b9c <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23b86:	230f      	movs	r3, #15
   23b88:	18fb      	adds	r3, r7, r3
   23b8a:	781b      	ldrb	r3, [r3, #0]
   23b8c:	2bc2      	cmp	r3, #194	; 0xc2
   23b8e:	d005      	beq.n	23b9c <spi_cmd_complete+0x4b0>
   23b90:	230f      	movs	r3, #15
   23b92:	18fb      	adds	r3, r7, r3
   23b94:	781b      	ldrb	r3, [r3, #0]
   23b96:	2bc8      	cmp	r3, #200	; 0xc8
   23b98:	d000      	beq.n	23b9c <spi_cmd_complete+0x4b0>
   23b9a:	e208      	b.n	23fae <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   23b9c:	230a      	movs	r3, #10
   23b9e:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   23ba0:	2376      	movs	r3, #118	; 0x76
   23ba2:	18fb      	adds	r3, r7, r3
   23ba4:	781a      	ldrb	r2, [r3, #0]
   23ba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23ba8:	429a      	cmp	r2, r3
   23baa:	d218      	bcs.n	23bde <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   23bac:	2376      	movs	r3, #118	; 0x76
   23bae:	18fb      	adds	r3, r7, r3
   23bb0:	781b      	ldrb	r3, [r3, #0]
   23bb2:	2276      	movs	r2, #118	; 0x76
   23bb4:	18ba      	adds	r2, r7, r2
   23bb6:	1c59      	adds	r1, r3, #1
   23bb8:	7011      	strb	r1, [r2, #0]
   23bba:	001a      	movs	r2, r3
   23bbc:	2318      	movs	r3, #24
   23bbe:	18fb      	adds	r3, r7, r3
   23bc0:	5c9a      	ldrb	r2, [r3, r2]
   23bc2:	2317      	movs	r3, #23
   23bc4:	18fb      	adds	r3, r7, r3
   23bc6:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   23bc8:	2317      	movs	r3, #23
   23bca:	18fb      	adds	r3, r7, r3
   23bcc:	781b      	ldrb	r3, [r3, #0]
   23bce:	091b      	lsrs	r3, r3, #4
   23bd0:	b2db      	uxtb	r3, r3
   23bd2:	001a      	movs	r2, r3
   23bd4:	230f      	movs	r3, #15
   23bd6:	4013      	ands	r3, r2
   23bd8:	2b0f      	cmp	r3, #15
   23bda:	d103      	bne.n	23be4 <spi_cmd_complete+0x4f8>
					break;
   23bdc:	e007      	b.n	23bee <spi_cmd_complete+0x502>
					retry = 0;
   23bde:	2300      	movs	r3, #0
   23be0:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   23be2:	e004      	b.n	23bee <spi_cmd_complete+0x502>
			} while (retry--);
   23be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23be6:	1e5a      	subs	r2, r3, #1
   23be8:	667a      	str	r2, [r7, #100]	; 0x64
   23bea:	2b00      	cmp	r3, #0
   23bec:	d1d8      	bne.n	23ba0 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   23bee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23bf0:	2b00      	cmp	r3, #0
   23bf2:	dc18      	bgt.n	23c26 <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   23bf4:	2395      	movs	r3, #149	; 0x95
   23bf6:	009a      	lsls	r2, r3, #2
   23bf8:	499b      	ldr	r1, [pc, #620]	; (23e68 <spi_cmd_complete+0x77c>)
   23bfa:	4b9c      	ldr	r3, [pc, #624]	; (23e6c <spi_cmd_complete+0x780>)
   23bfc:	0018      	movs	r0, r3
   23bfe:	4b9c      	ldr	r3, [pc, #624]	; (23e70 <spi_cmd_complete+0x784>)
   23c00:	4798      	blx	r3
   23c02:	2317      	movs	r3, #23
   23c04:	18fb      	adds	r3, r7, r3
   23c06:	781b      	ldrb	r3, [r3, #0]
   23c08:	001a      	movs	r2, r3
   23c0a:	4b9e      	ldr	r3, [pc, #632]	; (23e84 <spi_cmd_complete+0x798>)
   23c0c:	0011      	movs	r1, r2
   23c0e:	0018      	movs	r0, r3
   23c10:	4b97      	ldr	r3, [pc, #604]	; (23e70 <spi_cmd_complete+0x784>)
   23c12:	4798      	blx	r3
   23c14:	4b98      	ldr	r3, [pc, #608]	; (23e78 <spi_cmd_complete+0x78c>)
   23c16:	0018      	movs	r0, r3
   23c18:	4b95      	ldr	r3, [pc, #596]	; (23e70 <spi_cmd_complete+0x784>)
   23c1a:	4798      	blx	r3
				result = N_RESET;
   23c1c:	2301      	movs	r3, #1
   23c1e:	425b      	negs	r3, r3
   23c20:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   23c22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23c24:	e1c4      	b.n	23fb0 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   23c26:	230f      	movs	r3, #15
   23c28:	18fb      	adds	r3, r7, r3
   23c2a:	781b      	ldrb	r3, [r3, #0]
   23c2c:	2bc4      	cmp	r3, #196	; 0xc4
   23c2e:	d005      	beq.n	23c3c <spi_cmd_complete+0x550>
   23c30:	230f      	movs	r3, #15
   23c32:	18fb      	adds	r3, r7, r3
   23c34:	781b      	ldrb	r3, [r3, #0]
   23c36:	2bca      	cmp	r3, #202	; 0xca
   23c38:	d000      	beq.n	23c3c <spi_cmd_complete+0x550>
   23c3a:	e08e      	b.n	23d5a <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   23c3c:	2376      	movs	r3, #118	; 0x76
   23c3e:	18fb      	adds	r3, r7, r3
   23c40:	781b      	ldrb	r3, [r3, #0]
   23c42:	3303      	adds	r3, #3
   23c44:	001a      	movs	r2, r3
   23c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23c48:	429a      	cmp	r2, r3
   23c4a:	d23c      	bcs.n	23cc6 <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   23c4c:	2376      	movs	r3, #118	; 0x76
   23c4e:	18fb      	adds	r3, r7, r3
   23c50:	781b      	ldrb	r3, [r3, #0]
   23c52:	2276      	movs	r2, #118	; 0x76
   23c54:	18ba      	adds	r2, r7, r2
   23c56:	1c59      	adds	r1, r3, #1
   23c58:	7011      	strb	r1, [r2, #0]
   23c5a:	001a      	movs	r2, r3
   23c5c:	2318      	movs	r3, #24
   23c5e:	18fb      	adds	r3, r7, r3
   23c60:	5c9a      	ldrb	r2, [r3, r2]
   23c62:	687b      	ldr	r3, [r7, #4]
   23c64:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   23c66:	687b      	ldr	r3, [r7, #4]
   23c68:	1c5a      	adds	r2, r3, #1
   23c6a:	2376      	movs	r3, #118	; 0x76
   23c6c:	18fb      	adds	r3, r7, r3
   23c6e:	781b      	ldrb	r3, [r3, #0]
   23c70:	2176      	movs	r1, #118	; 0x76
   23c72:	1879      	adds	r1, r7, r1
   23c74:	1c58      	adds	r0, r3, #1
   23c76:	7008      	strb	r0, [r1, #0]
   23c78:	0019      	movs	r1, r3
   23c7a:	2318      	movs	r3, #24
   23c7c:	18fb      	adds	r3, r7, r3
   23c7e:	5c5b      	ldrb	r3, [r3, r1]
   23c80:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   23c82:	687b      	ldr	r3, [r7, #4]
   23c84:	1c9a      	adds	r2, r3, #2
   23c86:	2376      	movs	r3, #118	; 0x76
   23c88:	18fb      	adds	r3, r7, r3
   23c8a:	781b      	ldrb	r3, [r3, #0]
   23c8c:	2176      	movs	r1, #118	; 0x76
   23c8e:	1879      	adds	r1, r7, r1
   23c90:	1c58      	adds	r0, r3, #1
   23c92:	7008      	strb	r0, [r1, #0]
   23c94:	0019      	movs	r1, r3
   23c96:	2318      	movs	r3, #24
   23c98:	18fb      	adds	r3, r7, r3
   23c9a:	5c5b      	ldrb	r3, [r3, r1]
   23c9c:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   23c9e:	687b      	ldr	r3, [r7, #4]
   23ca0:	1cda      	adds	r2, r3, #3
   23ca2:	2376      	movs	r3, #118	; 0x76
   23ca4:	18fb      	adds	r3, r7, r3
   23ca6:	781b      	ldrb	r3, [r3, #0]
   23ca8:	2176      	movs	r1, #118	; 0x76
   23caa:	1879      	adds	r1, r7, r1
   23cac:	1c58      	adds	r0, r3, #1
   23cae:	7008      	strb	r0, [r1, #0]
   23cb0:	0019      	movs	r1, r3
   23cb2:	2318      	movs	r3, #24
   23cb4:	18fb      	adds	r3, r7, r3
   23cb6:	5c5b      	ldrb	r3, [r3, r1]
   23cb8:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   23cba:	4b73      	ldr	r3, [pc, #460]	; (23e88 <spi_cmd_complete+0x79c>)
   23cbc:	781b      	ldrb	r3, [r3, #0]
   23cbe:	2b00      	cmp	r3, #0
   23cc0:	d000      	beq.n	23cc4 <spi_cmd_complete+0x5d8>
   23cc2:	e174      	b.n	23fae <spi_cmd_complete+0x8c2>
   23cc4:	e011      	b.n	23cea <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   23cc6:	4a71      	ldr	r2, [pc, #452]	; (23e8c <spi_cmd_complete+0x7a0>)
   23cc8:	4967      	ldr	r1, [pc, #412]	; (23e68 <spi_cmd_complete+0x77c>)
   23cca:	4b68      	ldr	r3, [pc, #416]	; (23e6c <spi_cmd_complete+0x780>)
   23ccc:	0018      	movs	r0, r3
   23cce:	4b68      	ldr	r3, [pc, #416]	; (23e70 <spi_cmd_complete+0x784>)
   23cd0:	4798      	blx	r3
   23cd2:	4b6f      	ldr	r3, [pc, #444]	; (23e90 <spi_cmd_complete+0x7a4>)
   23cd4:	0018      	movs	r0, r3
   23cd6:	4b66      	ldr	r3, [pc, #408]	; (23e70 <spi_cmd_complete+0x784>)
   23cd8:	4798      	blx	r3
   23cda:	4b67      	ldr	r3, [pc, #412]	; (23e78 <spi_cmd_complete+0x78c>)
   23cdc:	0018      	movs	r0, r3
   23cde:	4b64      	ldr	r3, [pc, #400]	; (23e70 <spi_cmd_complete+0x784>)
   23ce0:	4798      	blx	r3
					result = N_FAIL;
   23ce2:	2300      	movs	r3, #0
   23ce4:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   23ce6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23ce8:	e162      	b.n	23fb0 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   23cea:	2376      	movs	r3, #118	; 0x76
   23cec:	18fb      	adds	r3, r7, r3
   23cee:	781b      	ldrb	r3, [r3, #0]
   23cf0:	3301      	adds	r3, #1
   23cf2:	001a      	movs	r2, r3
   23cf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23cf6:	429a      	cmp	r2, r3
   23cf8:	d21c      	bcs.n	23d34 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   23cfa:	2376      	movs	r3, #118	; 0x76
   23cfc:	18fb      	adds	r3, r7, r3
   23cfe:	781b      	ldrb	r3, [r3, #0]
   23d00:	2276      	movs	r2, #118	; 0x76
   23d02:	18ba      	adds	r2, r7, r2
   23d04:	1c59      	adds	r1, r3, #1
   23d06:	7011      	strb	r1, [r2, #0]
   23d08:	001a      	movs	r2, r3
   23d0a:	2318      	movs	r3, #24
   23d0c:	18fb      	adds	r3, r7, r3
   23d0e:	5c9a      	ldrb	r2, [r3, r2]
   23d10:	2314      	movs	r3, #20
   23d12:	18fb      	adds	r3, r7, r3
   23d14:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   23d16:	2376      	movs	r3, #118	; 0x76
   23d18:	18fb      	adds	r3, r7, r3
   23d1a:	781b      	ldrb	r3, [r3, #0]
   23d1c:	2276      	movs	r2, #118	; 0x76
   23d1e:	18ba      	adds	r2, r7, r2
   23d20:	1c59      	adds	r1, r3, #1
   23d22:	7011      	strb	r1, [r2, #0]
   23d24:	001a      	movs	r2, r3
   23d26:	2318      	movs	r3, #24
   23d28:	18fb      	adds	r3, r7, r3
   23d2a:	5c9a      	ldrb	r2, [r3, r2]
   23d2c:	2314      	movs	r3, #20
   23d2e:	18fb      	adds	r3, r7, r3
   23d30:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   23d32:	e13c      	b.n	23fae <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   23d34:	239c      	movs	r3, #156	; 0x9c
   23d36:	009a      	lsls	r2, r3, #2
   23d38:	494b      	ldr	r1, [pc, #300]	; (23e68 <spi_cmd_complete+0x77c>)
   23d3a:	4b4c      	ldr	r3, [pc, #304]	; (23e6c <spi_cmd_complete+0x780>)
   23d3c:	0018      	movs	r0, r3
   23d3e:	4b4c      	ldr	r3, [pc, #304]	; (23e70 <spi_cmd_complete+0x784>)
   23d40:	4798      	blx	r3
   23d42:	4b54      	ldr	r3, [pc, #336]	; (23e94 <spi_cmd_complete+0x7a8>)
   23d44:	0018      	movs	r0, r3
   23d46:	4b4a      	ldr	r3, [pc, #296]	; (23e70 <spi_cmd_complete+0x784>)
   23d48:	4798      	blx	r3
   23d4a:	4b4b      	ldr	r3, [pc, #300]	; (23e78 <spi_cmd_complete+0x78c>)
   23d4c:	0018      	movs	r0, r3
   23d4e:	4b48      	ldr	r3, [pc, #288]	; (23e70 <spi_cmd_complete+0x784>)
   23d50:	4798      	blx	r3
						result = N_FAIL;
   23d52:	2300      	movs	r3, #0
   23d54:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   23d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23d58:	e12a      	b.n	23fb0 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23d5a:	230f      	movs	r3, #15
   23d5c:	18fb      	adds	r3, r7, r3
   23d5e:	781b      	ldrb	r3, [r3, #0]
   23d60:	2bc2      	cmp	r3, #194	; 0xc2
   23d62:	d005      	beq.n	23d70 <spi_cmd_complete+0x684>
   23d64:	230f      	movs	r3, #15
   23d66:	18fb      	adds	r3, r7, r3
   23d68:	781b      	ldrb	r3, [r3, #0]
   23d6a:	2bc8      	cmp	r3, #200	; 0xc8
   23d6c:	d000      	beq.n	23d70 <spi_cmd_complete+0x684>
   23d6e:	e11e      	b.n	23fae <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   23d70:	2300      	movs	r3, #0
   23d72:	663b      	str	r3, [r7, #96]	; 0x60
   23d74:	e011      	b.n	23d9a <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   23d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23d78:	1c5a      	adds	r2, r3, #1
   23d7a:	663a      	str	r2, [r7, #96]	; 0x60
   23d7c:	001a      	movs	r2, r3
   23d7e:	687b      	ldr	r3, [r7, #4]
   23d80:	189a      	adds	r2, r3, r2
   23d82:	2376      	movs	r3, #118	; 0x76
   23d84:	18fb      	adds	r3, r7, r3
   23d86:	781b      	ldrb	r3, [r3, #0]
   23d88:	2176      	movs	r1, #118	; 0x76
   23d8a:	1879      	adds	r1, r7, r1
   23d8c:	1c58      	adds	r0, r3, #1
   23d8e:	7008      	strb	r0, [r1, #0]
   23d90:	0019      	movs	r1, r3
   23d92:	2318      	movs	r3, #24
   23d94:	18fb      	adds	r3, r7, r3
   23d96:	5c5b      	ldrb	r3, [r3, r1]
   23d98:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   23d9a:	2376      	movs	r3, #118	; 0x76
   23d9c:	18fb      	adds	r3, r7, r3
   23d9e:	781a      	ldrb	r2, [r3, #0]
   23da0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23da2:	429a      	cmp	r2, r3
   23da4:	d203      	bcs.n	23dae <spi_cmd_complete+0x6c2>
   23da6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23da8:	683b      	ldr	r3, [r7, #0]
   23daa:	429a      	cmp	r2, r3
   23dac:	d3e3      	bcc.n	23d76 <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   23dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23db0:	683a      	ldr	r2, [r7, #0]
   23db2:	1ad3      	subs	r3, r2, r3
   23db4:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   23db6:	683b      	ldr	r3, [r7, #0]
   23db8:	2b00      	cmp	r3, #0
   23dba:	d100      	bne.n	23dbe <spi_cmd_complete+0x6d2>
   23dbc:	e0f1      	b.n	23fa2 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   23dbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23dc0:	2280      	movs	r2, #128	; 0x80
   23dc2:	0192      	lsls	r2, r2, #6
   23dc4:	1ad3      	subs	r3, r2, r3
   23dc6:	001a      	movs	r2, r3
   23dc8:	683b      	ldr	r3, [r7, #0]
   23dca:	429a      	cmp	r2, r3
   23dcc:	d302      	bcc.n	23dd4 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   23dce:	683b      	ldr	r3, [r7, #0]
   23dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   23dd2:	e004      	b.n	23dde <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   23dd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23dd6:	2280      	movs	r2, #128	; 0x80
   23dd8:	0192      	lsls	r2, r2, #6
   23dda:	1ad3      	subs	r3, r2, r3
   23ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23de0:	687a      	ldr	r2, [r7, #4]
   23de2:	18d3      	adds	r3, r2, r3
   23de4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   23de6:	b292      	uxth	r2, r2
   23de8:	0011      	movs	r1, r2
   23dea:	0018      	movs	r0, r3
   23dec:	4b2a      	ldr	r3, [pc, #168]	; (23e98 <spi_cmd_complete+0x7ac>)
   23dee:	4798      	blx	r3
   23df0:	1e03      	subs	r3, r0, #0
   23df2:	d010      	beq.n	23e16 <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23df4:	4a29      	ldr	r2, [pc, #164]	; (23e9c <spi_cmd_complete+0x7b0>)
   23df6:	491c      	ldr	r1, [pc, #112]	; (23e68 <spi_cmd_complete+0x77c>)
   23df8:	4b1c      	ldr	r3, [pc, #112]	; (23e6c <spi_cmd_complete+0x780>)
   23dfa:	0018      	movs	r0, r3
   23dfc:	4b1c      	ldr	r3, [pc, #112]	; (23e70 <spi_cmd_complete+0x784>)
   23dfe:	4798      	blx	r3
   23e00:	4b27      	ldr	r3, [pc, #156]	; (23ea0 <spi_cmd_complete+0x7b4>)
   23e02:	0018      	movs	r0, r3
   23e04:	4b1a      	ldr	r3, [pc, #104]	; (23e70 <spi_cmd_complete+0x784>)
   23e06:	4798      	blx	r3
   23e08:	4b1b      	ldr	r3, [pc, #108]	; (23e78 <spi_cmd_complete+0x78c>)
   23e0a:	0018      	movs	r0, r3
   23e0c:	4b18      	ldr	r3, [pc, #96]	; (23e70 <spi_cmd_complete+0x784>)
   23e0e:	4798      	blx	r3
						result = N_FAIL;
   23e10:	2300      	movs	r3, #0
   23e12:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   23e14:	e0cb      	b.n	23fae <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   23e16:	4b1c      	ldr	r3, [pc, #112]	; (23e88 <spi_cmd_complete+0x79c>)
   23e18:	781b      	ldrb	r3, [r3, #0]
   23e1a:	2b00      	cmp	r3, #0
   23e1c:	d119      	bne.n	23e52 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23e1e:	2314      	movs	r3, #20
   23e20:	18fb      	adds	r3, r7, r3
   23e22:	2102      	movs	r1, #2
   23e24:	0018      	movs	r0, r3
   23e26:	4b1c      	ldr	r3, [pc, #112]	; (23e98 <spi_cmd_complete+0x7ac>)
   23e28:	4798      	blx	r3
   23e2a:	1e03      	subs	r3, r0, #0
   23e2c:	d011      	beq.n	23e52 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23e2e:	23a6      	movs	r3, #166	; 0xa6
   23e30:	009a      	lsls	r2, r3, #2
   23e32:	490d      	ldr	r1, [pc, #52]	; (23e68 <spi_cmd_complete+0x77c>)
   23e34:	4b0d      	ldr	r3, [pc, #52]	; (23e6c <spi_cmd_complete+0x780>)
   23e36:	0018      	movs	r0, r3
   23e38:	4b0d      	ldr	r3, [pc, #52]	; (23e70 <spi_cmd_complete+0x784>)
   23e3a:	4798      	blx	r3
   23e3c:	4b19      	ldr	r3, [pc, #100]	; (23ea4 <spi_cmd_complete+0x7b8>)
   23e3e:	0018      	movs	r0, r3
   23e40:	4b0b      	ldr	r3, [pc, #44]	; (23e70 <spi_cmd_complete+0x784>)
   23e42:	4798      	blx	r3
   23e44:	4b0c      	ldr	r3, [pc, #48]	; (23e78 <spi_cmd_complete+0x78c>)
   23e46:	0018      	movs	r0, r3
   23e48:	4b09      	ldr	r3, [pc, #36]	; (23e70 <spi_cmd_complete+0x784>)
   23e4a:	4798      	blx	r3
							result = N_FAIL;
   23e4c:	2300      	movs	r3, #0
   23e4e:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   23e50:	e0ad      	b.n	23fae <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   23e52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23e56:	18d3      	adds	r3, r2, r3
   23e58:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   23e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23e5c:	683a      	ldr	r2, [r7, #0]
   23e5e:	1ad3      	subs	r3, r2, r3
   23e60:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   23e62:	e09e      	b.n	23fa2 <spi_cmd_complete+0x8b6>
   23e64:	0000022f 	.word	0x0000022f
   23e68:	0003906c 	.word	0x0003906c
   23e6c:	00038a58 	.word	0x00038a58
   23e70:	0001dbd9 	.word	0x0001dbd9
   23e74:	00038b50 	.word	0x00038b50
   23e78:	00038a98 	.word	0x00038a98
   23e7c:	00000239 	.word	0x00000239
   23e80:	00038b8c 	.word	0x00038b8c
   23e84:	00038bc0 	.word	0x00038bc0
   23e88:	20004154 	.word	0x20004154
   23e8c:	00000263 	.word	0x00000263
   23e90:	00038bf0 	.word	0x00038bf0
   23e94:	00038c20 	.word	0x00038c20
   23e98:	00023025 	.word	0x00023025
   23e9c:	0000028e 	.word	0x0000028e
   23ea0:	00038c50 	.word	0x00038c50
   23ea4:	00038c84 	.word	0x00038c84
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   23ea8:	683a      	ldr	r2, [r7, #0]
   23eaa:	2380      	movs	r3, #128	; 0x80
   23eac:	019b      	lsls	r3, r3, #6
   23eae:	429a      	cmp	r2, r3
   23eb0:	d802      	bhi.n	23eb8 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   23eb2:	683b      	ldr	r3, [r7, #0]
   23eb4:	65bb      	str	r3, [r7, #88]	; 0x58
   23eb6:	e002      	b.n	23ebe <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   23eb8:	2380      	movs	r3, #128	; 0x80
   23eba:	019b      	lsls	r3, r3, #6
   23ebc:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   23ebe:	230a      	movs	r3, #10
   23ec0:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   23ec2:	2317      	movs	r3, #23
   23ec4:	18fb      	adds	r3, r7, r3
   23ec6:	2101      	movs	r1, #1
   23ec8:	0018      	movs	r0, r3
   23eca:	4b3b      	ldr	r3, [pc, #236]	; (23fb8 <spi_cmd_complete+0x8cc>)
   23ecc:	4798      	blx	r3
   23ece:	1e03      	subs	r3, r0, #0
   23ed0:	d011      	beq.n	23ef6 <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   23ed2:	23ae      	movs	r3, #174	; 0xae
   23ed4:	009a      	lsls	r2, r3, #2
   23ed6:	4939      	ldr	r1, [pc, #228]	; (23fbc <spi_cmd_complete+0x8d0>)
   23ed8:	4b39      	ldr	r3, [pc, #228]	; (23fc0 <spi_cmd_complete+0x8d4>)
   23eda:	0018      	movs	r0, r3
   23edc:	4b39      	ldr	r3, [pc, #228]	; (23fc4 <spi_cmd_complete+0x8d8>)
   23ede:	4798      	blx	r3
   23ee0:	4b39      	ldr	r3, [pc, #228]	; (23fc8 <spi_cmd_complete+0x8dc>)
   23ee2:	0018      	movs	r0, r3
   23ee4:	4b37      	ldr	r3, [pc, #220]	; (23fc4 <spi_cmd_complete+0x8d8>)
   23ee6:	4798      	blx	r3
   23ee8:	4b38      	ldr	r3, [pc, #224]	; (23fcc <spi_cmd_complete+0x8e0>)
   23eea:	0018      	movs	r0, r3
   23eec:	4b35      	ldr	r3, [pc, #212]	; (23fc4 <spi_cmd_complete+0x8d8>)
   23eee:	4798      	blx	r3
							result = N_FAIL;
   23ef0:	2300      	movs	r3, #0
   23ef2:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23ef4:	e010      	b.n	23f18 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   23ef6:	2317      	movs	r3, #23
   23ef8:	18fb      	adds	r3, r7, r3
   23efa:	781b      	ldrb	r3, [r3, #0]
   23efc:	091b      	lsrs	r3, r3, #4
   23efe:	b2db      	uxtb	r3, r3
   23f00:	001a      	movs	r2, r3
   23f02:	230f      	movs	r3, #15
   23f04:	4013      	ands	r3, r2
   23f06:	2b0f      	cmp	r3, #15
   23f08:	d005      	beq.n	23f16 <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   23f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23f0c:	1e5a      	subs	r2, r3, #1
   23f0e:	667a      	str	r2, [r7, #100]	; 0x64
   23f10:	2b00      	cmp	r3, #0
   23f12:	d1d6      	bne.n	23ec2 <spi_cmd_complete+0x7d6>
   23f14:	e000      	b.n	23f18 <spi_cmd_complete+0x82c>
							break;
   23f16:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   23f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23f1a:	2b00      	cmp	r3, #0
   23f1c:	d046      	beq.n	23fac <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23f20:	687a      	ldr	r2, [r7, #4]
   23f22:	18d3      	adds	r3, r2, r3
   23f24:	6dba      	ldr	r2, [r7, #88]	; 0x58
   23f26:	b292      	uxth	r2, r2
   23f28:	0011      	movs	r1, r2
   23f2a:	0018      	movs	r0, r3
   23f2c:	4b22      	ldr	r3, [pc, #136]	; (23fb8 <spi_cmd_complete+0x8cc>)
   23f2e:	4798      	blx	r3
   23f30:	1e03      	subs	r3, r0, #0
   23f32:	d011      	beq.n	23f58 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23f34:	23b2      	movs	r3, #178	; 0xb2
   23f36:	009a      	lsls	r2, r3, #2
   23f38:	4920      	ldr	r1, [pc, #128]	; (23fbc <spi_cmd_complete+0x8d0>)
   23f3a:	4b21      	ldr	r3, [pc, #132]	; (23fc0 <spi_cmd_complete+0x8d4>)
   23f3c:	0018      	movs	r0, r3
   23f3e:	4b21      	ldr	r3, [pc, #132]	; (23fc4 <spi_cmd_complete+0x8d8>)
   23f40:	4798      	blx	r3
   23f42:	4b23      	ldr	r3, [pc, #140]	; (23fd0 <spi_cmd_complete+0x8e4>)
   23f44:	0018      	movs	r0, r3
   23f46:	4b1f      	ldr	r3, [pc, #124]	; (23fc4 <spi_cmd_complete+0x8d8>)
   23f48:	4798      	blx	r3
   23f4a:	4b20      	ldr	r3, [pc, #128]	; (23fcc <spi_cmd_complete+0x8e0>)
   23f4c:	0018      	movs	r0, r3
   23f4e:	4b1d      	ldr	r3, [pc, #116]	; (23fc4 <spi_cmd_complete+0x8d8>)
   23f50:	4798      	blx	r3
						result = N_FAIL;
   23f52:	2300      	movs	r3, #0
   23f54:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   23f56:	e02a      	b.n	23fae <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   23f58:	4b1e      	ldr	r3, [pc, #120]	; (23fd4 <spi_cmd_complete+0x8e8>)
   23f5a:	781b      	ldrb	r3, [r3, #0]
   23f5c:	2b00      	cmp	r3, #0
   23f5e:	d118      	bne.n	23f92 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23f60:	2314      	movs	r3, #20
   23f62:	18fb      	adds	r3, r7, r3
   23f64:	2102      	movs	r1, #2
   23f66:	0018      	movs	r0, r3
   23f68:	4b13      	ldr	r3, [pc, #76]	; (23fb8 <spi_cmd_complete+0x8cc>)
   23f6a:	4798      	blx	r3
   23f6c:	1e03      	subs	r3, r0, #0
   23f6e:	d010      	beq.n	23f92 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23f70:	4a19      	ldr	r2, [pc, #100]	; (23fd8 <spi_cmd_complete+0x8ec>)
   23f72:	4912      	ldr	r1, [pc, #72]	; (23fbc <spi_cmd_complete+0x8d0>)
   23f74:	4b12      	ldr	r3, [pc, #72]	; (23fc0 <spi_cmd_complete+0x8d4>)
   23f76:	0018      	movs	r0, r3
   23f78:	4b12      	ldr	r3, [pc, #72]	; (23fc4 <spi_cmd_complete+0x8d8>)
   23f7a:	4798      	blx	r3
   23f7c:	4b17      	ldr	r3, [pc, #92]	; (23fdc <spi_cmd_complete+0x8f0>)
   23f7e:	0018      	movs	r0, r3
   23f80:	4b10      	ldr	r3, [pc, #64]	; (23fc4 <spi_cmd_complete+0x8d8>)
   23f82:	4798      	blx	r3
   23f84:	4b11      	ldr	r3, [pc, #68]	; (23fcc <spi_cmd_complete+0x8e0>)
   23f86:	0018      	movs	r0, r3
   23f88:	4b0e      	ldr	r3, [pc, #56]	; (23fc4 <spi_cmd_complete+0x8d8>)
   23f8a:	4798      	blx	r3
							result = N_FAIL;
   23f8c:	2300      	movs	r3, #0
   23f8e:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23f90:	e00d      	b.n	23fae <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   23f92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23f96:	18d3      	adds	r3, r2, r3
   23f98:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   23f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23f9c:	683a      	ldr	r2, [r7, #0]
   23f9e:	1ad3      	subs	r3, r2, r3
   23fa0:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   23fa2:	683b      	ldr	r3, [r7, #0]
   23fa4:	2b00      	cmp	r3, #0
   23fa6:	d000      	beq.n	23faa <spi_cmd_complete+0x8be>
   23fa8:	e77e      	b.n	23ea8 <spi_cmd_complete+0x7bc>
   23faa:	e000      	b.n	23fae <spi_cmd_complete+0x8c2>
						break;
   23fac:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   23fae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   23fb0:	0018      	movs	r0, r3
   23fb2:	46bd      	mov	sp, r7
   23fb4:	b01f      	add	sp, #124	; 0x7c
   23fb6:	bd90      	pop	{r4, r7, pc}
   23fb8:	00023025 	.word	0x00023025
   23fbc:	0003906c 	.word	0x0003906c
   23fc0:	00038a58 	.word	0x00038a58
   23fc4:	0001dbd9 	.word	0x0001dbd9
   23fc8:	00038cbc 	.word	0x00038cbc
   23fcc:	00038a98 	.word	0x00038a98
   23fd0:	00038c50 	.word	0x00038c50
   23fd4:	20004154 	.word	0x20004154
   23fd8:	000002d2 	.word	0x000002d2
   23fdc:	00038c84 	.word	0x00038c84

00023fe0 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   23fe0:	b580      	push	{r7, lr}
   23fe2:	b086      	sub	sp, #24
   23fe4:	af00      	add	r7, sp, #0
   23fe6:	6078      	str	r0, [r7, #4]
   23fe8:	000a      	movs	r2, r1
   23fea:	1cbb      	adds	r3, r7, #2
   23fec:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   23fee:	2313      	movs	r3, #19
   23ff0:	18fb      	adds	r3, r7, r3
   23ff2:	2201      	movs	r2, #1
   23ff4:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   23ff6:	230c      	movs	r3, #12
   23ff8:	18fb      	adds	r3, r7, r3
   23ffa:	2200      	movs	r2, #0
   23ffc:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   23ffe:	2316      	movs	r3, #22
   24000:	18fb      	adds	r3, r7, r3
   24002:	2200      	movs	r2, #0
   24004:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   24006:	1cbb      	adds	r3, r7, #2
   24008:	881a      	ldrh	r2, [r3, #0]
   2400a:	2380      	movs	r3, #128	; 0x80
   2400c:	019b      	lsls	r3, r3, #6
   2400e:	429a      	cmp	r2, r3
   24010:	d805      	bhi.n	2401e <spi_data_write+0x3e>
			nbytes = sz;
   24012:	2314      	movs	r3, #20
   24014:	18fb      	adds	r3, r7, r3
   24016:	1cba      	adds	r2, r7, #2
   24018:	8812      	ldrh	r2, [r2, #0]
   2401a:	801a      	strh	r2, [r3, #0]
   2401c:	e004      	b.n	24028 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   2401e:	2314      	movs	r3, #20
   24020:	18fb      	adds	r3, r7, r3
   24022:	2280      	movs	r2, #128	; 0x80
   24024:	0192      	lsls	r2, r2, #6
   24026:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   24028:	2311      	movs	r3, #17
   2402a:	18fb      	adds	r3, r7, r3
   2402c:	22f0      	movs	r2, #240	; 0xf0
   2402e:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   24030:	2316      	movs	r3, #22
   24032:	18fb      	adds	r3, r7, r3
   24034:	2200      	movs	r2, #0
   24036:	5e9b      	ldrsh	r3, [r3, r2]
   24038:	2b00      	cmp	r3, #0
   2403a:	d10f      	bne.n	2405c <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   2403c:	1cbb      	adds	r3, r7, #2
   2403e:	881a      	ldrh	r2, [r3, #0]
   24040:	2380      	movs	r3, #128	; 0x80
   24042:	019b      	lsls	r3, r3, #6
   24044:	429a      	cmp	r2, r3
   24046:	d804      	bhi.n	24052 <spi_data_write+0x72>
				order = 0x3;
   24048:	2312      	movs	r3, #18
   2404a:	18fb      	adds	r3, r7, r3
   2404c:	2203      	movs	r2, #3
   2404e:	701a      	strb	r2, [r3, #0]
   24050:	e013      	b.n	2407a <spi_data_write+0x9a>
			else
				order = 0x1;
   24052:	2312      	movs	r3, #18
   24054:	18fb      	adds	r3, r7, r3
   24056:	2201      	movs	r2, #1
   24058:	701a      	strb	r2, [r3, #0]
   2405a:	e00e      	b.n	2407a <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   2405c:	1cbb      	adds	r3, r7, #2
   2405e:	881a      	ldrh	r2, [r3, #0]
   24060:	2380      	movs	r3, #128	; 0x80
   24062:	019b      	lsls	r3, r3, #6
   24064:	429a      	cmp	r2, r3
   24066:	d804      	bhi.n	24072 <spi_data_write+0x92>
				order = 0x3;
   24068:	2312      	movs	r3, #18
   2406a:	18fb      	adds	r3, r7, r3
   2406c:	2203      	movs	r2, #3
   2406e:	701a      	strb	r2, [r3, #0]
   24070:	e003      	b.n	2407a <spi_data_write+0x9a>
			else
				order = 0x2;
   24072:	2312      	movs	r3, #18
   24074:	18fb      	adds	r3, r7, r3
   24076:	2202      	movs	r2, #2
   24078:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   2407a:	2311      	movs	r3, #17
   2407c:	18fb      	adds	r3, r7, r3
   2407e:	781a      	ldrb	r2, [r3, #0]
   24080:	2312      	movs	r3, #18
   24082:	18fb      	adds	r3, r7, r3
   24084:	781b      	ldrb	r3, [r3, #0]
   24086:	4313      	orrs	r3, r2
   24088:	b2da      	uxtb	r2, r3
   2408a:	2311      	movs	r3, #17
   2408c:	18fb      	adds	r3, r7, r3
   2408e:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   24090:	2311      	movs	r3, #17
   24092:	18fb      	adds	r3, r7, r3
   24094:	2101      	movs	r1, #1
   24096:	0018      	movs	r0, r3
   24098:	4b3c      	ldr	r3, [pc, #240]	; (2418c <spi_data_write+0x1ac>)
   2409a:	4798      	blx	r3
   2409c:	1e03      	subs	r3, r0, #0
   2409e:	d012      	beq.n	240c6 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   240a0:	4a3b      	ldr	r2, [pc, #236]	; (24190 <spi_data_write+0x1b0>)
   240a2:	493c      	ldr	r1, [pc, #240]	; (24194 <spi_data_write+0x1b4>)
   240a4:	4b3c      	ldr	r3, [pc, #240]	; (24198 <spi_data_write+0x1b8>)
   240a6:	0018      	movs	r0, r3
   240a8:	4b3c      	ldr	r3, [pc, #240]	; (2419c <spi_data_write+0x1bc>)
   240aa:	4798      	blx	r3
   240ac:	4b3c      	ldr	r3, [pc, #240]	; (241a0 <spi_data_write+0x1c0>)
   240ae:	0018      	movs	r0, r3
   240b0:	4b3a      	ldr	r3, [pc, #232]	; (2419c <spi_data_write+0x1bc>)
   240b2:	4798      	blx	r3
   240b4:	4b3b      	ldr	r3, [pc, #236]	; (241a4 <spi_data_write+0x1c4>)
   240b6:	0018      	movs	r0, r3
   240b8:	4b38      	ldr	r3, [pc, #224]	; (2419c <spi_data_write+0x1bc>)
   240ba:	4798      	blx	r3
			result = N_FAIL;
   240bc:	2313      	movs	r3, #19
   240be:	18fb      	adds	r3, r7, r3
   240c0:	2200      	movs	r2, #0
   240c2:	701a      	strb	r2, [r3, #0]
			break;
   240c4:	e059      	b.n	2417a <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   240c6:	2316      	movs	r3, #22
   240c8:	18fb      	adds	r3, r7, r3
   240ca:	2200      	movs	r2, #0
   240cc:	5e9b      	ldrsh	r3, [r3, r2]
   240ce:	687a      	ldr	r2, [r7, #4]
   240d0:	18d2      	adds	r2, r2, r3
   240d2:	2314      	movs	r3, #20
   240d4:	18fb      	adds	r3, r7, r3
   240d6:	881b      	ldrh	r3, [r3, #0]
   240d8:	0019      	movs	r1, r3
   240da:	0010      	movs	r0, r2
   240dc:	4b2b      	ldr	r3, [pc, #172]	; (2418c <spi_data_write+0x1ac>)
   240de:	4798      	blx	r3
   240e0:	1e03      	subs	r3, r0, #0
   240e2:	d012      	beq.n	2410a <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   240e4:	4a30      	ldr	r2, [pc, #192]	; (241a8 <spi_data_write+0x1c8>)
   240e6:	492b      	ldr	r1, [pc, #172]	; (24194 <spi_data_write+0x1b4>)
   240e8:	4b2b      	ldr	r3, [pc, #172]	; (24198 <spi_data_write+0x1b8>)
   240ea:	0018      	movs	r0, r3
   240ec:	4b2b      	ldr	r3, [pc, #172]	; (2419c <spi_data_write+0x1bc>)
   240ee:	4798      	blx	r3
   240f0:	4b2e      	ldr	r3, [pc, #184]	; (241ac <spi_data_write+0x1cc>)
   240f2:	0018      	movs	r0, r3
   240f4:	4b29      	ldr	r3, [pc, #164]	; (2419c <spi_data_write+0x1bc>)
   240f6:	4798      	blx	r3
   240f8:	4b2a      	ldr	r3, [pc, #168]	; (241a4 <spi_data_write+0x1c4>)
   240fa:	0018      	movs	r0, r3
   240fc:	4b27      	ldr	r3, [pc, #156]	; (2419c <spi_data_write+0x1bc>)
   240fe:	4798      	blx	r3
			result = N_FAIL;
   24100:	2313      	movs	r3, #19
   24102:	18fb      	adds	r3, r7, r3
   24104:	2200      	movs	r2, #0
   24106:	701a      	strb	r2, [r3, #0]
			break;
   24108:	e037      	b.n	2417a <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   2410a:	4b29      	ldr	r3, [pc, #164]	; (241b0 <spi_data_write+0x1d0>)
   2410c:	781b      	ldrb	r3, [r3, #0]
   2410e:	2b00      	cmp	r3, #0
   24110:	d11b      	bne.n	2414a <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   24112:	230c      	movs	r3, #12
   24114:	18fb      	adds	r3, r7, r3
   24116:	2102      	movs	r1, #2
   24118:	0018      	movs	r0, r3
   2411a:	4b1c      	ldr	r3, [pc, #112]	; (2418c <spi_data_write+0x1ac>)
   2411c:	4798      	blx	r3
   2411e:	1e03      	subs	r3, r0, #0
   24120:	d013      	beq.n	2414a <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   24122:	23d7      	movs	r3, #215	; 0xd7
   24124:	009a      	lsls	r2, r3, #2
   24126:	491b      	ldr	r1, [pc, #108]	; (24194 <spi_data_write+0x1b4>)
   24128:	4b1b      	ldr	r3, [pc, #108]	; (24198 <spi_data_write+0x1b8>)
   2412a:	0018      	movs	r0, r3
   2412c:	4b1b      	ldr	r3, [pc, #108]	; (2419c <spi_data_write+0x1bc>)
   2412e:	4798      	blx	r3
   24130:	4b20      	ldr	r3, [pc, #128]	; (241b4 <spi_data_write+0x1d4>)
   24132:	0018      	movs	r0, r3
   24134:	4b19      	ldr	r3, [pc, #100]	; (2419c <spi_data_write+0x1bc>)
   24136:	4798      	blx	r3
   24138:	4b1a      	ldr	r3, [pc, #104]	; (241a4 <spi_data_write+0x1c4>)
   2413a:	0018      	movs	r0, r3
   2413c:	4b17      	ldr	r3, [pc, #92]	; (2419c <spi_data_write+0x1bc>)
   2413e:	4798      	blx	r3
				result = N_FAIL;
   24140:	2313      	movs	r3, #19
   24142:	18fb      	adds	r3, r7, r3
   24144:	2200      	movs	r2, #0
   24146:	701a      	strb	r2, [r3, #0]
				break;
   24148:	e017      	b.n	2417a <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   2414a:	2316      	movs	r3, #22
   2414c:	18fb      	adds	r3, r7, r3
   2414e:	881a      	ldrh	r2, [r3, #0]
   24150:	2314      	movs	r3, #20
   24152:	18fb      	adds	r3, r7, r3
   24154:	881b      	ldrh	r3, [r3, #0]
   24156:	18d3      	adds	r3, r2, r3
   24158:	b29a      	uxth	r2, r3
   2415a:	2316      	movs	r3, #22
   2415c:	18fb      	adds	r3, r7, r3
   2415e:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   24160:	1cbb      	adds	r3, r7, #2
   24162:	1cb9      	adds	r1, r7, #2
   24164:	2214      	movs	r2, #20
   24166:	18ba      	adds	r2, r7, r2
   24168:	8809      	ldrh	r1, [r1, #0]
   2416a:	8812      	ldrh	r2, [r2, #0]
   2416c:	1a8a      	subs	r2, r1, r2
   2416e:	801a      	strh	r2, [r3, #0]
	} while (sz);
   24170:	1cbb      	adds	r3, r7, #2
   24172:	881b      	ldrh	r3, [r3, #0]
   24174:	2b00      	cmp	r3, #0
   24176:	d000      	beq.n	2417a <spi_data_write+0x19a>
   24178:	e745      	b.n	24006 <spi_data_write+0x26>


	return result;
   2417a:	2313      	movs	r3, #19
   2417c:	18fb      	adds	r3, r7, r3
   2417e:	781b      	ldrb	r3, [r3, #0]
   24180:	b25b      	sxtb	r3, r3
}
   24182:	0018      	movs	r0, r3
   24184:	46bd      	mov	sp, r7
   24186:	b006      	add	sp, #24
   24188:	bd80      	pop	{r7, pc}
   2418a:	46c0      	nop			; (mov r8, r8)
   2418c:	00023069 	.word	0x00023069
   24190:	00000349 	.word	0x00000349
   24194:	00039080 	.word	0x00039080
   24198:	00038a58 	.word	0x00038a58
   2419c:	0001dbd9 	.word	0x0001dbd9
   241a0:	00038d20 	.word	0x00038d20
   241a4:	00038a98 	.word	0x00038a98
   241a8:	00000352 	.word	0x00000352
   241ac:	00038d58 	.word	0x00038d58
   241b0:	20004154 	.word	0x20004154
   241b4:	00038d8c 	.word	0x00038d8c

000241b8 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   241b8:	b590      	push	{r4, r7, lr}
   241ba:	b087      	sub	sp, #28
   241bc:	af02      	add	r7, sp, #8
   241be:	6078      	str	r0, [r7, #4]
   241c0:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   241c2:	230f      	movs	r3, #15
   241c4:	18fb      	adds	r3, r7, r3
   241c6:	220a      	movs	r2, #10
   241c8:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   241ca:	230c      	movs	r3, #12
   241cc:	18fb      	adds	r3, r7, r3
   241ce:	2201      	movs	r2, #1
   241d0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   241d2:	230e      	movs	r3, #14
   241d4:	18fb      	adds	r3, r7, r3
   241d6:	22c9      	movs	r2, #201	; 0xc9
   241d8:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   241da:	230d      	movs	r3, #13
   241dc:	18fb      	adds	r3, r7, r3
   241de:	2200      	movs	r2, #0
   241e0:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   241e2:	687b      	ldr	r3, [r7, #4]
   241e4:	2b30      	cmp	r3, #48	; 0x30
   241e6:	d808      	bhi.n	241fa <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   241e8:	230e      	movs	r3, #14
   241ea:	18fb      	adds	r3, r7, r3
   241ec:	22c3      	movs	r2, #195	; 0xc3
   241ee:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   241f0:	230d      	movs	r3, #13
   241f2:	18fb      	adds	r3, r7, r3
   241f4:	2201      	movs	r2, #1
   241f6:	701a      	strb	r2, [r3, #0]
   241f8:	e007      	b.n	2420a <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   241fa:	230e      	movs	r3, #14
   241fc:	18fb      	adds	r3, r7, r3
   241fe:	22c9      	movs	r2, #201	; 0xc9
   24200:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   24202:	230d      	movs	r3, #13
   24204:	18fb      	adds	r3, r7, r3
   24206:	2200      	movs	r2, #0
   24208:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   2420a:	003a      	movs	r2, r7
   2420c:	6879      	ldr	r1, [r7, #4]
   2420e:	230e      	movs	r3, #14
   24210:	18fb      	adds	r3, r7, r3
   24212:	7818      	ldrb	r0, [r3, #0]
   24214:	230d      	movs	r3, #13
   24216:	18fb      	adds	r3, r7, r3
   24218:	781b      	ldrb	r3, [r3, #0]
   2421a:	9300      	str	r3, [sp, #0]
   2421c:	2304      	movs	r3, #4
   2421e:	4c2e      	ldr	r4, [pc, #184]	; (242d8 <spi_write_reg+0x120>)
   24220:	47a0      	blx	r4
   24222:	0002      	movs	r2, r0
   24224:	230c      	movs	r3, #12
   24226:	18fb      	adds	r3, r7, r3
   24228:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2422a:	230c      	movs	r3, #12
   2422c:	18fb      	adds	r3, r7, r3
   2422e:	781b      	ldrb	r3, [r3, #0]
   24230:	b25b      	sxtb	r3, r3
   24232:	2b01      	cmp	r3, #1
   24234:	d010      	beq.n	24258 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   24236:	4a29      	ldr	r2, [pc, #164]	; (242dc <spi_write_reg+0x124>)
   24238:	4929      	ldr	r1, [pc, #164]	; (242e0 <spi_write_reg+0x128>)
   2423a:	4b2a      	ldr	r3, [pc, #168]	; (242e4 <spi_write_reg+0x12c>)
   2423c:	0018      	movs	r0, r3
   2423e:	4b2a      	ldr	r3, [pc, #168]	; (242e8 <spi_write_reg+0x130>)
   24240:	4798      	blx	r3
   24242:	687a      	ldr	r2, [r7, #4]
   24244:	4b29      	ldr	r3, [pc, #164]	; (242ec <spi_write_reg+0x134>)
   24246:	0011      	movs	r1, r2
   24248:	0018      	movs	r0, r3
   2424a:	4b27      	ldr	r3, [pc, #156]	; (242e8 <spi_write_reg+0x130>)
   2424c:	4798      	blx	r3
   2424e:	4b28      	ldr	r3, [pc, #160]	; (242f0 <spi_write_reg+0x138>)
   24250:	0018      	movs	r0, r3
   24252:	4b25      	ldr	r3, [pc, #148]	; (242e8 <spi_write_reg+0x130>)
   24254:	4798      	blx	r3
		goto _FAIL_;
   24256:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   24258:	230c      	movs	r3, #12
   2425a:	18fb      	adds	r3, r7, r3
   2425c:	781b      	ldrb	r3, [r3, #0]
   2425e:	b25b      	sxtb	r3, r3
   24260:	2b01      	cmp	r3, #1
   24262:	d030      	beq.n	242c6 <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   24264:	2001      	movs	r0, #1
   24266:	4b23      	ldr	r3, [pc, #140]	; (242f4 <spi_write_reg+0x13c>)
   24268:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2426a:	2300      	movs	r3, #0
   2426c:	9300      	str	r3, [sp, #0]
   2426e:	2300      	movs	r3, #0
   24270:	2200      	movs	r2, #0
   24272:	2100      	movs	r1, #0
   24274:	20cf      	movs	r0, #207	; 0xcf
   24276:	4c20      	ldr	r4, [pc, #128]	; (242f8 <spi_write_reg+0x140>)
   24278:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2427a:	20cf      	movs	r0, #207	; 0xcf
   2427c:	4b1f      	ldr	r3, [pc, #124]	; (242fc <spi_write_reg+0x144>)
   2427e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   24280:	23ea      	movs	r3, #234	; 0xea
   24282:	009a      	lsls	r2, r3, #2
   24284:	4916      	ldr	r1, [pc, #88]	; (242e0 <spi_write_reg+0x128>)
   24286:	4b17      	ldr	r3, [pc, #92]	; (242e4 <spi_write_reg+0x12c>)
   24288:	0018      	movs	r0, r3
   2428a:	4b17      	ldr	r3, [pc, #92]	; (242e8 <spi_write_reg+0x130>)
   2428c:	4798      	blx	r3
   2428e:	230f      	movs	r3, #15
   24290:	18fb      	adds	r3, r7, r3
   24292:	7819      	ldrb	r1, [r3, #0]
   24294:	683b      	ldr	r3, [r7, #0]
   24296:	687a      	ldr	r2, [r7, #4]
   24298:	4819      	ldr	r0, [pc, #100]	; (24300 <spi_write_reg+0x148>)
   2429a:	4c13      	ldr	r4, [pc, #76]	; (242e8 <spi_write_reg+0x130>)
   2429c:	47a0      	blx	r4
   2429e:	4b14      	ldr	r3, [pc, #80]	; (242f0 <spi_write_reg+0x138>)
   242a0:	0018      	movs	r0, r3
   242a2:	4b11      	ldr	r3, [pc, #68]	; (242e8 <spi_write_reg+0x130>)
   242a4:	4798      	blx	r3
		nm_bsp_sleep(1);
   242a6:	2001      	movs	r0, #1
   242a8:	4b12      	ldr	r3, [pc, #72]	; (242f4 <spi_write_reg+0x13c>)
   242aa:	4798      	blx	r3
		retry--;
   242ac:	230f      	movs	r3, #15
   242ae:	18fb      	adds	r3, r7, r3
   242b0:	781a      	ldrb	r2, [r3, #0]
   242b2:	230f      	movs	r3, #15
   242b4:	18fb      	adds	r3, r7, r3
   242b6:	3a01      	subs	r2, #1
   242b8:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   242ba:	230f      	movs	r3, #15
   242bc:	18fb      	adds	r3, r7, r3
   242be:	781b      	ldrb	r3, [r3, #0]
   242c0:	2b00      	cmp	r3, #0
   242c2:	d000      	beq.n	242c6 <spi_write_reg+0x10e>
   242c4:	e78d      	b.n	241e2 <spi_write_reg+0x2a>
	}

	return result;
   242c6:	230c      	movs	r3, #12
   242c8:	18fb      	adds	r3, r7, r3
   242ca:	781b      	ldrb	r3, [r3, #0]
   242cc:	b25b      	sxtb	r3, r3
}
   242ce:	0018      	movs	r0, r3
   242d0:	46bd      	mov	sp, r7
   242d2:	b005      	add	sp, #20
   242d4:	bd90      	pop	{r4, r7, pc}
   242d6:	46c0      	nop			; (mov r8, r8)
   242d8:	000236ed 	.word	0x000236ed
   242dc:	0000039d 	.word	0x0000039d
   242e0:	00039090 	.word	0x00039090
   242e4:	00038a58 	.word	0x00038a58
   242e8:	0001dbd9 	.word	0x0001dbd9
   242ec:	00038dc4 	.word	0x00038dc4
   242f0:	00038a98 	.word	0x00038a98
   242f4:	0002002d 	.word	0x0002002d
   242f8:	00023171 	.word	0x00023171
   242fc:	000235b1 	.word	0x000235b1
   24300:	00038df0 	.word	0x00038df0

00024304 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   24304:	b590      	push	{r4, r7, lr}
   24306:	b089      	sub	sp, #36	; 0x24
   24308:	af02      	add	r7, sp, #8
   2430a:	60f8      	str	r0, [r7, #12]
   2430c:	60b9      	str	r1, [r7, #8]
   2430e:	1dbb      	adds	r3, r7, #6
   24310:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   24312:	2316      	movs	r3, #22
   24314:	18fb      	adds	r3, r7, r3
   24316:	220a      	movs	r2, #10
   24318:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   2431a:	2315      	movs	r3, #21
   2431c:	18fb      	adds	r3, r7, r3
   2431e:	22c7      	movs	r2, #199	; 0xc7
   24320:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   24322:	1dbb      	adds	r3, r7, #6
   24324:	881a      	ldrh	r2, [r3, #0]
   24326:	68f9      	ldr	r1, [r7, #12]
   24328:	2315      	movs	r3, #21
   2432a:	18fb      	adds	r3, r7, r3
   2432c:	7818      	ldrb	r0, [r3, #0]
   2432e:	2300      	movs	r3, #0
   24330:	9300      	str	r3, [sp, #0]
   24332:	0013      	movs	r3, r2
   24334:	2200      	movs	r2, #0
   24336:	4c4d      	ldr	r4, [pc, #308]	; (2446c <nm_spi_write+0x168>)
   24338:	47a0      	blx	r4
   2433a:	0002      	movs	r2, r0
   2433c:	2317      	movs	r3, #23
   2433e:	18fb      	adds	r3, r7, r3
   24340:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24342:	2317      	movs	r3, #23
   24344:	18fb      	adds	r3, r7, r3
   24346:	781b      	ldrb	r3, [r3, #0]
   24348:	b25b      	sxtb	r3, r3
   2434a:	2b01      	cmp	r3, #1
   2434c:	d010      	beq.n	24370 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   2434e:	4a48      	ldr	r2, [pc, #288]	; (24470 <nm_spi_write+0x16c>)
   24350:	4948      	ldr	r1, [pc, #288]	; (24474 <nm_spi_write+0x170>)
   24352:	4b49      	ldr	r3, [pc, #292]	; (24478 <nm_spi_write+0x174>)
   24354:	0018      	movs	r0, r3
   24356:	4b49      	ldr	r3, [pc, #292]	; (2447c <nm_spi_write+0x178>)
   24358:	4798      	blx	r3
   2435a:	68fa      	ldr	r2, [r7, #12]
   2435c:	4b48      	ldr	r3, [pc, #288]	; (24480 <nm_spi_write+0x17c>)
   2435e:	0011      	movs	r1, r2
   24360:	0018      	movs	r0, r3
   24362:	4b46      	ldr	r3, [pc, #280]	; (2447c <nm_spi_write+0x178>)
   24364:	4798      	blx	r3
   24366:	4b47      	ldr	r3, [pc, #284]	; (24484 <nm_spi_write+0x180>)
   24368:	0018      	movs	r0, r3
   2436a:	4b44      	ldr	r3, [pc, #272]	; (2447c <nm_spi_write+0x178>)
   2436c:	4798      	blx	r3
		goto _FAIL_;
   2436e:	e03e      	b.n	243ee <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   24370:	2317      	movs	r3, #23
   24372:	18fc      	adds	r4, r7, r3
   24374:	1dbb      	adds	r3, r7, #6
   24376:	881a      	ldrh	r2, [r3, #0]
   24378:	68bb      	ldr	r3, [r7, #8]
   2437a:	0011      	movs	r1, r2
   2437c:	0018      	movs	r0, r3
   2437e:	4b42      	ldr	r3, [pc, #264]	; (24488 <nm_spi_write+0x184>)
   24380:	4798      	blx	r3
   24382:	0003      	movs	r3, r0
   24384:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   24386:	2317      	movs	r3, #23
   24388:	18fb      	adds	r3, r7, r3
   2438a:	781b      	ldrb	r3, [r3, #0]
   2438c:	b25b      	sxtb	r3, r3
   2438e:	2b01      	cmp	r3, #1
   24390:	d00e      	beq.n	243b0 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24392:	4a3e      	ldr	r2, [pc, #248]	; (2448c <nm_spi_write+0x188>)
   24394:	4937      	ldr	r1, [pc, #220]	; (24474 <nm_spi_write+0x170>)
   24396:	4b38      	ldr	r3, [pc, #224]	; (24478 <nm_spi_write+0x174>)
   24398:	0018      	movs	r0, r3
   2439a:	4b38      	ldr	r3, [pc, #224]	; (2447c <nm_spi_write+0x178>)
   2439c:	4798      	blx	r3
   2439e:	4b3c      	ldr	r3, [pc, #240]	; (24490 <nm_spi_write+0x18c>)
   243a0:	0018      	movs	r0, r3
   243a2:	4b36      	ldr	r3, [pc, #216]	; (2447c <nm_spi_write+0x178>)
   243a4:	4798      	blx	r3
   243a6:	4b37      	ldr	r3, [pc, #220]	; (24484 <nm_spi_write+0x180>)
   243a8:	0018      	movs	r0, r3
   243aa:	4b34      	ldr	r3, [pc, #208]	; (2447c <nm_spi_write+0x178>)
   243ac:	4798      	blx	r3
		goto _FAIL_;
   243ae:	e01e      	b.n	243ee <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   243b0:	2317      	movs	r3, #23
   243b2:	18fc      	adds	r4, r7, r3
   243b4:	2315      	movs	r3, #21
   243b6:	18fb      	adds	r3, r7, r3
   243b8:	781b      	ldrb	r3, [r3, #0]
   243ba:	0018      	movs	r0, r3
   243bc:	4b35      	ldr	r3, [pc, #212]	; (24494 <nm_spi_write+0x190>)
   243be:	4798      	blx	r3
   243c0:	0003      	movs	r3, r0
   243c2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   243c4:	2317      	movs	r3, #23
   243c6:	18fb      	adds	r3, r7, r3
   243c8:	781b      	ldrb	r3, [r3, #0]
   243ca:	b25b      	sxtb	r3, r3
   243cc:	2b01      	cmp	r3, #1
   243ce:	d00e      	beq.n	243ee <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   243d0:	4a31      	ldr	r2, [pc, #196]	; (24498 <nm_spi_write+0x194>)
   243d2:	4928      	ldr	r1, [pc, #160]	; (24474 <nm_spi_write+0x170>)
   243d4:	4b28      	ldr	r3, [pc, #160]	; (24478 <nm_spi_write+0x174>)
   243d6:	0018      	movs	r0, r3
   243d8:	4b28      	ldr	r3, [pc, #160]	; (2447c <nm_spi_write+0x178>)
   243da:	4798      	blx	r3
   243dc:	4b2c      	ldr	r3, [pc, #176]	; (24490 <nm_spi_write+0x18c>)
   243de:	0018      	movs	r0, r3
   243e0:	4b26      	ldr	r3, [pc, #152]	; (2447c <nm_spi_write+0x178>)
   243e2:	4798      	blx	r3
   243e4:	4b27      	ldr	r3, [pc, #156]	; (24484 <nm_spi_write+0x180>)
   243e6:	0018      	movs	r0, r3
   243e8:	4b24      	ldr	r3, [pc, #144]	; (2447c <nm_spi_write+0x178>)
   243ea:	4798      	blx	r3
		goto _FAIL_;
   243ec:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   243ee:	2317      	movs	r3, #23
   243f0:	18fb      	adds	r3, r7, r3
   243f2:	781b      	ldrb	r3, [r3, #0]
   243f4:	b25b      	sxtb	r3, r3
   243f6:	2b01      	cmp	r3, #1
   243f8:	d030      	beq.n	2445c <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   243fa:	2001      	movs	r0, #1
   243fc:	4b27      	ldr	r3, [pc, #156]	; (2449c <nm_spi_write+0x198>)
   243fe:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24400:	2300      	movs	r3, #0
   24402:	9300      	str	r3, [sp, #0]
   24404:	2300      	movs	r3, #0
   24406:	2200      	movs	r2, #0
   24408:	2100      	movs	r1, #0
   2440a:	20cf      	movs	r0, #207	; 0xcf
   2440c:	4c24      	ldr	r4, [pc, #144]	; (244a0 <nm_spi_write+0x19c>)
   2440e:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24410:	20cf      	movs	r0, #207	; 0xcf
   24412:	4b24      	ldr	r3, [pc, #144]	; (244a4 <nm_spi_write+0x1a0>)
   24414:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   24416:	4a24      	ldr	r2, [pc, #144]	; (244a8 <nm_spi_write+0x1a4>)
   24418:	4916      	ldr	r1, [pc, #88]	; (24474 <nm_spi_write+0x170>)
   2441a:	4b17      	ldr	r3, [pc, #92]	; (24478 <nm_spi_write+0x174>)
   2441c:	0018      	movs	r0, r3
   2441e:	4b17      	ldr	r3, [pc, #92]	; (2447c <nm_spi_write+0x178>)
   24420:	4798      	blx	r3
   24422:	2316      	movs	r3, #22
   24424:	18fb      	adds	r3, r7, r3
   24426:	7819      	ldrb	r1, [r3, #0]
   24428:	1dbb      	adds	r3, r7, #6
   2442a:	881b      	ldrh	r3, [r3, #0]
   2442c:	68fa      	ldr	r2, [r7, #12]
   2442e:	481f      	ldr	r0, [pc, #124]	; (244ac <nm_spi_write+0x1a8>)
   24430:	4c12      	ldr	r4, [pc, #72]	; (2447c <nm_spi_write+0x178>)
   24432:	47a0      	blx	r4
   24434:	4b13      	ldr	r3, [pc, #76]	; (24484 <nm_spi_write+0x180>)
   24436:	0018      	movs	r0, r3
   24438:	4b10      	ldr	r3, [pc, #64]	; (2447c <nm_spi_write+0x178>)
   2443a:	4798      	blx	r3
		nm_bsp_sleep(1);
   2443c:	2001      	movs	r0, #1
   2443e:	4b17      	ldr	r3, [pc, #92]	; (2449c <nm_spi_write+0x198>)
   24440:	4798      	blx	r3
		retry--;
   24442:	2316      	movs	r3, #22
   24444:	18fb      	adds	r3, r7, r3
   24446:	781a      	ldrb	r2, [r3, #0]
   24448:	2316      	movs	r3, #22
   2444a:	18fb      	adds	r3, r7, r3
   2444c:	3a01      	subs	r2, #1
   2444e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24450:	2316      	movs	r3, #22
   24452:	18fb      	adds	r3, r7, r3
   24454:	781b      	ldrb	r3, [r3, #0]
   24456:	2b00      	cmp	r3, #0
   24458:	d000      	beq.n	2445c <nm_spi_write+0x158>
   2445a:	e762      	b.n	24322 <nm_spi_write+0x1e>
	}


	return result;
   2445c:	2317      	movs	r3, #23
   2445e:	18fb      	adds	r3, r7, r3
   24460:	781b      	ldrb	r3, [r3, #0]
   24462:	b25b      	sxtb	r3, r3
}
   24464:	0018      	movs	r0, r3
   24466:	46bd      	mov	sp, r7
   24468:	b007      	add	sp, #28
   2446a:	bd90      	pop	{r4, r7, pc}
   2446c:	000236ed 	.word	0x000236ed
   24470:	000003cf 	.word	0x000003cf
   24474:	000390a0 	.word	0x000390a0
   24478:	00038a58 	.word	0x00038a58
   2447c:	0001dbd9 	.word	0x0001dbd9
   24480:	00038e0c 	.word	0x00038e0c
   24484:	00038a98 	.word	0x00038a98
   24488:	00023fe1 	.word	0x00023fe1
   2448c:	000003d9 	.word	0x000003d9
   24490:	00038e3c 	.word	0x00038e3c
   24494:	000234b1 	.word	0x000234b1
   24498:	000003e1 	.word	0x000003e1
   2449c:	0002002d 	.word	0x0002002d
   244a0:	00023171 	.word	0x00023171
   244a4:	000235b1 	.word	0x000235b1
   244a8:	000003eb 	.word	0x000003eb
   244ac:	00038e64 	.word	0x00038e64

000244b0 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   244b0:	b590      	push	{r4, r7, lr}
   244b2:	b087      	sub	sp, #28
   244b4:	af02      	add	r7, sp, #8
   244b6:	6078      	str	r0, [r7, #4]
   244b8:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   244ba:	230f      	movs	r3, #15
   244bc:	18fb      	adds	r3, r7, r3
   244be:	220a      	movs	r2, #10
   244c0:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   244c2:	230c      	movs	r3, #12
   244c4:	18fb      	adds	r3, r7, r3
   244c6:	2201      	movs	r2, #1
   244c8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   244ca:	230e      	movs	r3, #14
   244cc:	18fb      	adds	r3, r7, r3
   244ce:	22ca      	movs	r2, #202	; 0xca
   244d0:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   244d2:	230d      	movs	r3, #13
   244d4:	18fb      	adds	r3, r7, r3
   244d6:	2200      	movs	r2, #0
   244d8:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   244da:	687b      	ldr	r3, [r7, #4]
   244dc:	2bff      	cmp	r3, #255	; 0xff
   244de:	d808      	bhi.n	244f2 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   244e0:	230e      	movs	r3, #14
   244e2:	18fb      	adds	r3, r7, r3
   244e4:	22c4      	movs	r2, #196	; 0xc4
   244e6:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   244e8:	230d      	movs	r3, #13
   244ea:	18fb      	adds	r3, r7, r3
   244ec:	2201      	movs	r2, #1
   244ee:	701a      	strb	r2, [r3, #0]
   244f0:	e007      	b.n	24502 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   244f2:	230e      	movs	r3, #14
   244f4:	18fb      	adds	r3, r7, r3
   244f6:	22ca      	movs	r2, #202	; 0xca
   244f8:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   244fa:	230d      	movs	r3, #13
   244fc:	18fb      	adds	r3, r7, r3
   244fe:	2200      	movs	r2, #0
   24500:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   24502:	2308      	movs	r3, #8
   24504:	18fa      	adds	r2, r7, r3
   24506:	6879      	ldr	r1, [r7, #4]
   24508:	230e      	movs	r3, #14
   2450a:	18fb      	adds	r3, r7, r3
   2450c:	7818      	ldrb	r0, [r3, #0]
   2450e:	230d      	movs	r3, #13
   24510:	18fb      	adds	r3, r7, r3
   24512:	781b      	ldrb	r3, [r3, #0]
   24514:	9300      	str	r3, [sp, #0]
   24516:	2304      	movs	r3, #4
   24518:	4c37      	ldr	r4, [pc, #220]	; (245f8 <spi_read_reg+0x148>)
   2451a:	47a0      	blx	r4
   2451c:	0002      	movs	r2, r0
   2451e:	230c      	movs	r3, #12
   24520:	18fb      	adds	r3, r7, r3
   24522:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24524:	230c      	movs	r3, #12
   24526:	18fb      	adds	r3, r7, r3
   24528:	781b      	ldrb	r3, [r3, #0]
   2452a:	b25b      	sxtb	r3, r3
   2452c:	2b01      	cmp	r3, #1
   2452e:	d010      	beq.n	24552 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   24530:	4a32      	ldr	r2, [pc, #200]	; (245fc <spi_read_reg+0x14c>)
   24532:	4933      	ldr	r1, [pc, #204]	; (24600 <spi_read_reg+0x150>)
   24534:	4b33      	ldr	r3, [pc, #204]	; (24604 <spi_read_reg+0x154>)
   24536:	0018      	movs	r0, r3
   24538:	4b33      	ldr	r3, [pc, #204]	; (24608 <spi_read_reg+0x158>)
   2453a:	4798      	blx	r3
   2453c:	687a      	ldr	r2, [r7, #4]
   2453e:	4b33      	ldr	r3, [pc, #204]	; (2460c <spi_read_reg+0x15c>)
   24540:	0011      	movs	r1, r2
   24542:	0018      	movs	r0, r3
   24544:	4b30      	ldr	r3, [pc, #192]	; (24608 <spi_read_reg+0x158>)
   24546:	4798      	blx	r3
   24548:	4b31      	ldr	r3, [pc, #196]	; (24610 <spi_read_reg+0x160>)
   2454a:	0018      	movs	r0, r3
   2454c:	4b2e      	ldr	r3, [pc, #184]	; (24608 <spi_read_reg+0x158>)
   2454e:	4798      	blx	r3
		goto _FAIL_;
   24550:	e014      	b.n	2457c <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   24552:	2308      	movs	r3, #8
   24554:	18fb      	adds	r3, r7, r3
   24556:	781b      	ldrb	r3, [r3, #0]
   24558:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   2455a:	2308      	movs	r3, #8
   2455c:	18fb      	adds	r3, r7, r3
   2455e:	785b      	ldrb	r3, [r3, #1]
   24560:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   24562:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   24564:	2308      	movs	r3, #8
   24566:	18fb      	adds	r3, r7, r3
   24568:	789b      	ldrb	r3, [r3, #2]
   2456a:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   2456c:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   2456e:	2308      	movs	r3, #8
   24570:	18fb      	adds	r3, r7, r3
   24572:	78db      	ldrb	r3, [r3, #3]
   24574:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   24576:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   24578:	683b      	ldr	r3, [r7, #0]
   2457a:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   2457c:	230c      	movs	r3, #12
   2457e:	18fb      	adds	r3, r7, r3
   24580:	781b      	ldrb	r3, [r3, #0]
   24582:	b25b      	sxtb	r3, r3
   24584:	2b01      	cmp	r3, #1
   24586:	d02f      	beq.n	245e8 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   24588:	2001      	movs	r0, #1
   2458a:	4b22      	ldr	r3, [pc, #136]	; (24614 <spi_read_reg+0x164>)
   2458c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2458e:	2300      	movs	r3, #0
   24590:	9300      	str	r3, [sp, #0]
   24592:	2300      	movs	r3, #0
   24594:	2200      	movs	r2, #0
   24596:	2100      	movs	r1, #0
   24598:	20cf      	movs	r0, #207	; 0xcf
   2459a:	4c1f      	ldr	r4, [pc, #124]	; (24618 <spi_read_reg+0x168>)
   2459c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2459e:	20cf      	movs	r0, #207	; 0xcf
   245a0:	4b1e      	ldr	r3, [pc, #120]	; (2461c <spi_read_reg+0x16c>)
   245a2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   245a4:	4a1e      	ldr	r2, [pc, #120]	; (24620 <spi_read_reg+0x170>)
   245a6:	4916      	ldr	r1, [pc, #88]	; (24600 <spi_read_reg+0x150>)
   245a8:	4b16      	ldr	r3, [pc, #88]	; (24604 <spi_read_reg+0x154>)
   245aa:	0018      	movs	r0, r3
   245ac:	4b16      	ldr	r3, [pc, #88]	; (24608 <spi_read_reg+0x158>)
   245ae:	4798      	blx	r3
   245b0:	230f      	movs	r3, #15
   245b2:	18fb      	adds	r3, r7, r3
   245b4:	7819      	ldrb	r1, [r3, #0]
   245b6:	687a      	ldr	r2, [r7, #4]
   245b8:	4b1a      	ldr	r3, [pc, #104]	; (24624 <spi_read_reg+0x174>)
   245ba:	0018      	movs	r0, r3
   245bc:	4b12      	ldr	r3, [pc, #72]	; (24608 <spi_read_reg+0x158>)
   245be:	4798      	blx	r3
   245c0:	4b13      	ldr	r3, [pc, #76]	; (24610 <spi_read_reg+0x160>)
   245c2:	0018      	movs	r0, r3
   245c4:	4b10      	ldr	r3, [pc, #64]	; (24608 <spi_read_reg+0x158>)
   245c6:	4798      	blx	r3
		nm_bsp_sleep(1);
   245c8:	2001      	movs	r0, #1
   245ca:	4b12      	ldr	r3, [pc, #72]	; (24614 <spi_read_reg+0x164>)
   245cc:	4798      	blx	r3
		retry--;
   245ce:	230f      	movs	r3, #15
   245d0:	18fb      	adds	r3, r7, r3
   245d2:	781a      	ldrb	r2, [r3, #0]
   245d4:	230f      	movs	r3, #15
   245d6:	18fb      	adds	r3, r7, r3
   245d8:	3a01      	subs	r2, #1
   245da:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   245dc:	230f      	movs	r3, #15
   245de:	18fb      	adds	r3, r7, r3
   245e0:	781b      	ldrb	r3, [r3, #0]
   245e2:	2b00      	cmp	r3, #0
   245e4:	d000      	beq.n	245e8 <spi_read_reg+0x138>
   245e6:	e778      	b.n	244da <spi_read_reg+0x2a>
	}
		
	return result;
   245e8:	230c      	movs	r3, #12
   245ea:	18fb      	adds	r3, r7, r3
   245ec:	781b      	ldrb	r3, [r3, #0]
   245ee:	b25b      	sxtb	r3, r3
}
   245f0:	0018      	movs	r0, r3
   245f2:	46bd      	mov	sp, r7
   245f4:	b005      	add	sp, #20
   245f6:	bd90      	pop	{r4, r7, pc}
   245f8:	000236ed 	.word	0x000236ed
   245fc:	00000423 	.word	0x00000423
   24600:	000390b0 	.word	0x000390b0
   24604:	00038a58 	.word	0x00038a58
   24608:	0001dbd9 	.word	0x0001dbd9
   2460c:	00038e80 	.word	0x00038e80
   24610:	00038a98 	.word	0x00038a98
   24614:	0002002d 	.word	0x0002002d
   24618:	00023171 	.word	0x00023171
   2461c:	000235b1 	.word	0x000235b1
   24620:	00000435 	.word	0x00000435
   24624:	00038eac 	.word	0x00038eac

00024628 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   24628:	b590      	push	{r4, r7, lr}
   2462a:	b089      	sub	sp, #36	; 0x24
   2462c:	af02      	add	r7, sp, #8
   2462e:	60f8      	str	r0, [r7, #12]
   24630:	60b9      	str	r1, [r7, #8]
   24632:	1dbb      	adds	r3, r7, #6
   24634:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   24636:	2316      	movs	r3, #22
   24638:	18fb      	adds	r3, r7, r3
   2463a:	22c8      	movs	r2, #200	; 0xc8
   2463c:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   2463e:	2317      	movs	r3, #23
   24640:	18fb      	adds	r3, r7, r3
   24642:	220a      	movs	r2, #10
   24644:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   24646:	1dbb      	adds	r3, r7, #6
   24648:	881c      	ldrh	r4, [r3, #0]
   2464a:	68ba      	ldr	r2, [r7, #8]
   2464c:	68f9      	ldr	r1, [r7, #12]
   2464e:	2316      	movs	r3, #22
   24650:	18fb      	adds	r3, r7, r3
   24652:	7818      	ldrb	r0, [r3, #0]
   24654:	2300      	movs	r3, #0
   24656:	9300      	str	r3, [sp, #0]
   24658:	0023      	movs	r3, r4
   2465a:	4c2e      	ldr	r4, [pc, #184]	; (24714 <nm_spi_read+0xec>)
   2465c:	47a0      	blx	r4
   2465e:	0002      	movs	r2, r0
   24660:	2315      	movs	r3, #21
   24662:	18fb      	adds	r3, r7, r3
   24664:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24666:	2315      	movs	r3, #21
   24668:	18fb      	adds	r3, r7, r3
   2466a:	781b      	ldrb	r3, [r3, #0]
   2466c:	b25b      	sxtb	r3, r3
   2466e:	2b01      	cmp	r3, #1
   24670:	d010      	beq.n	24694 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   24672:	4a29      	ldr	r2, [pc, #164]	; (24718 <nm_spi_read+0xf0>)
   24674:	4929      	ldr	r1, [pc, #164]	; (2471c <nm_spi_read+0xf4>)
   24676:	4b2a      	ldr	r3, [pc, #168]	; (24720 <nm_spi_read+0xf8>)
   24678:	0018      	movs	r0, r3
   2467a:	4b2a      	ldr	r3, [pc, #168]	; (24724 <nm_spi_read+0xfc>)
   2467c:	4798      	blx	r3
   2467e:	68fa      	ldr	r2, [r7, #12]
   24680:	4b29      	ldr	r3, [pc, #164]	; (24728 <nm_spi_read+0x100>)
   24682:	0011      	movs	r1, r2
   24684:	0018      	movs	r0, r3
   24686:	4b27      	ldr	r3, [pc, #156]	; (24724 <nm_spi_read+0xfc>)
   24688:	4798      	blx	r3
   2468a:	4b28      	ldr	r3, [pc, #160]	; (2472c <nm_spi_read+0x104>)
   2468c:	0018      	movs	r0, r3
   2468e:	4b25      	ldr	r3, [pc, #148]	; (24724 <nm_spi_read+0xfc>)
   24690:	4798      	blx	r3
		goto _FAIL_;
   24692:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   24694:	2315      	movs	r3, #21
   24696:	18fb      	adds	r3, r7, r3
   24698:	781b      	ldrb	r3, [r3, #0]
   2469a:	b25b      	sxtb	r3, r3
   2469c:	2b01      	cmp	r3, #1
   2469e:	d030      	beq.n	24702 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   246a0:	2001      	movs	r0, #1
   246a2:	4b23      	ldr	r3, [pc, #140]	; (24730 <nm_spi_read+0x108>)
   246a4:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   246a6:	2300      	movs	r3, #0
   246a8:	9300      	str	r3, [sp, #0]
   246aa:	2300      	movs	r3, #0
   246ac:	2200      	movs	r2, #0
   246ae:	2100      	movs	r1, #0
   246b0:	20cf      	movs	r0, #207	; 0xcf
   246b2:	4c20      	ldr	r4, [pc, #128]	; (24734 <nm_spi_read+0x10c>)
   246b4:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   246b6:	20cf      	movs	r0, #207	; 0xcf
   246b8:	4b1f      	ldr	r3, [pc, #124]	; (24738 <nm_spi_read+0x110>)
   246ba:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   246bc:	4a1f      	ldr	r2, [pc, #124]	; (2473c <nm_spi_read+0x114>)
   246be:	4917      	ldr	r1, [pc, #92]	; (2471c <nm_spi_read+0xf4>)
   246c0:	4b17      	ldr	r3, [pc, #92]	; (24720 <nm_spi_read+0xf8>)
   246c2:	0018      	movs	r0, r3
   246c4:	4b17      	ldr	r3, [pc, #92]	; (24724 <nm_spi_read+0xfc>)
   246c6:	4798      	blx	r3
   246c8:	2317      	movs	r3, #23
   246ca:	18fb      	adds	r3, r7, r3
   246cc:	7819      	ldrb	r1, [r3, #0]
   246ce:	1dbb      	adds	r3, r7, #6
   246d0:	881b      	ldrh	r3, [r3, #0]
   246d2:	68fa      	ldr	r2, [r7, #12]
   246d4:	481a      	ldr	r0, [pc, #104]	; (24740 <nm_spi_read+0x118>)
   246d6:	4c13      	ldr	r4, [pc, #76]	; (24724 <nm_spi_read+0xfc>)
   246d8:	47a0      	blx	r4
   246da:	4b14      	ldr	r3, [pc, #80]	; (2472c <nm_spi_read+0x104>)
   246dc:	0018      	movs	r0, r3
   246de:	4b11      	ldr	r3, [pc, #68]	; (24724 <nm_spi_read+0xfc>)
   246e0:	4798      	blx	r3
		nm_bsp_sleep(1);
   246e2:	2001      	movs	r0, #1
   246e4:	4b12      	ldr	r3, [pc, #72]	; (24730 <nm_spi_read+0x108>)
   246e6:	4798      	blx	r3
		retry--;
   246e8:	2317      	movs	r3, #23
   246ea:	18fb      	adds	r3, r7, r3
   246ec:	781a      	ldrb	r2, [r3, #0]
   246ee:	2317      	movs	r3, #23
   246f0:	18fb      	adds	r3, r7, r3
   246f2:	3a01      	subs	r2, #1
   246f4:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   246f6:	2317      	movs	r3, #23
   246f8:	18fb      	adds	r3, r7, r3
   246fa:	781b      	ldrb	r3, [r3, #0]
   246fc:	2b00      	cmp	r3, #0
   246fe:	d000      	beq.n	24702 <nm_spi_read+0xda>
   24700:	e7a1      	b.n	24646 <nm_spi_read+0x1e>
	}

	return result;
   24702:	2315      	movs	r3, #21
   24704:	18fb      	adds	r3, r7, r3
   24706:	781b      	ldrb	r3, [r3, #0]
   24708:	b25b      	sxtb	r3, r3
}
   2470a:	0018      	movs	r0, r3
   2470c:	46bd      	mov	sp, r7
   2470e:	b007      	add	sp, #28
   24710:	bd90      	pop	{r4, r7, pc}
   24712:	46c0      	nop			; (mov r8, r8)
   24714:	000236ed 	.word	0x000236ed
   24718:	00000472 	.word	0x00000472
   2471c:	000390c0 	.word	0x000390c0
   24720:	00038a58 	.word	0x00038a58
   24724:	0001dbd9 	.word	0x0001dbd9
   24728:	00038ec4 	.word	0x00038ec4
   2472c:	00038a98 	.word	0x00038a98
   24730:	0002002d 	.word	0x0002002d
   24734:	00023171 	.word	0x00023171
   24738:	000235b1 	.word	0x000235b1
   2473c:	0000047d 	.word	0x0000047d
   24740:	00038e64 	.word	0x00038e64

00024744 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   24744:	b580      	push	{r7, lr}
   24746:	b082      	sub	sp, #8
   24748:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   2474a:	4b0c      	ldr	r3, [pc, #48]	; (2477c <spi_init_pkt_sz+0x38>)
   2474c:	0018      	movs	r0, r3
   2474e:	4b0c      	ldr	r3, [pc, #48]	; (24780 <spi_init_pkt_sz+0x3c>)
   24750:	4798      	blx	r3
   24752:	0003      	movs	r3, r0
   24754:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   24756:	687b      	ldr	r3, [r7, #4]
   24758:	2270      	movs	r2, #112	; 0x70
   2475a:	4393      	bics	r3, r2
   2475c:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   2475e:	687b      	ldr	r3, [r7, #4]
   24760:	2250      	movs	r2, #80	; 0x50
   24762:	4313      	orrs	r3, r2
   24764:	607b      	str	r3, [r7, #4]
   24766:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   24768:	687b      	ldr	r3, [r7, #4]
   2476a:	4a04      	ldr	r2, [pc, #16]	; (2477c <spi_init_pkt_sz+0x38>)
   2476c:	0019      	movs	r1, r3
   2476e:	0010      	movs	r0, r2
   24770:	4b04      	ldr	r3, [pc, #16]	; (24784 <spi_init_pkt_sz+0x40>)
   24772:	4798      	blx	r3
}
   24774:	46c0      	nop			; (mov r8, r8)
   24776:	46bd      	mov	sp, r7
   24778:	b002      	add	sp, #8
   2477a:	bd80      	pop	{r7, pc}
   2477c:	0000e824 	.word	0x0000e824
   24780:	0002491d 	.word	0x0002491d
   24784:	00024991 	.word	0x00024991

00024788 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   24788:	b590      	push	{r4, r7, lr}
   2478a:	b083      	sub	sp, #12
   2478c:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2478e:	2300      	movs	r3, #0
   24790:	9300      	str	r3, [sp, #0]
   24792:	2300      	movs	r3, #0
   24794:	2200      	movs	r2, #0
   24796:	2100      	movs	r1, #0
   24798:	20cf      	movs	r0, #207	; 0xcf
   2479a:	4c05      	ldr	r4, [pc, #20]	; (247b0 <nm_spi_reset+0x28>)
   2479c:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   2479e:	20cf      	movs	r0, #207	; 0xcf
   247a0:	4b04      	ldr	r3, [pc, #16]	; (247b4 <nm_spi_reset+0x2c>)
   247a2:	4798      	blx	r3
	return M2M_SUCCESS;
   247a4:	2300      	movs	r3, #0
}
   247a6:	0018      	movs	r0, r3
   247a8:	46bd      	mov	sp, r7
   247aa:	b001      	add	sp, #4
   247ac:	bd90      	pop	{r4, r7, pc}
   247ae:	46c0      	nop			; (mov r8, r8)
   247b0:	00023171 	.word	0x00023171
   247b4:	000235b1 	.word	0x000235b1

000247b8 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   247b8:	b580      	push	{r7, lr}
   247ba:	b082      	sub	sp, #8
   247bc:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   247be:	2300      	movs	r3, #0
   247c0:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   247c2:	4b40      	ldr	r3, [pc, #256]	; (248c4 <nm_spi_init+0x10c>)
   247c4:	2200      	movs	r2, #0
   247c6:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   247c8:	003b      	movs	r3, r7
   247ca:	4a3f      	ldr	r2, [pc, #252]	; (248c8 <nm_spi_init+0x110>)
   247cc:	0019      	movs	r1, r3
   247ce:	0010      	movs	r0, r2
   247d0:	4b3e      	ldr	r3, [pc, #248]	; (248cc <nm_spi_init+0x114>)
   247d2:	4798      	blx	r3
   247d4:	1e03      	subs	r3, r0, #0
   247d6:	d129      	bne.n	2482c <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   247d8:	4b3a      	ldr	r3, [pc, #232]	; (248c4 <nm_spi_init+0x10c>)
   247da:	2201      	movs	r2, #1
   247dc:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   247de:	2398      	movs	r3, #152	; 0x98
   247e0:	00da      	lsls	r2, r3, #3
   247e2:	493b      	ldr	r1, [pc, #236]	; (248d0 <nm_spi_init+0x118>)
   247e4:	4b3b      	ldr	r3, [pc, #236]	; (248d4 <nm_spi_init+0x11c>)
   247e6:	0018      	movs	r0, r3
   247e8:	4b3b      	ldr	r3, [pc, #236]	; (248d8 <nm_spi_init+0x120>)
   247ea:	4798      	blx	r3
   247ec:	4b3b      	ldr	r3, [pc, #236]	; (248dc <nm_spi_init+0x124>)
   247ee:	0018      	movs	r0, r3
   247f0:	4b39      	ldr	r3, [pc, #228]	; (248d8 <nm_spi_init+0x120>)
   247f2:	4798      	blx	r3
   247f4:	4b3a      	ldr	r3, [pc, #232]	; (248e0 <nm_spi_init+0x128>)
   247f6:	0018      	movs	r0, r3
   247f8:	4b37      	ldr	r3, [pc, #220]	; (248d8 <nm_spi_init+0x120>)
   247fa:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   247fc:	003b      	movs	r3, r7
   247fe:	4a32      	ldr	r2, [pc, #200]	; (248c8 <nm_spi_init+0x110>)
   24800:	0019      	movs	r1, r3
   24802:	0010      	movs	r0, r2
   24804:	4b31      	ldr	r3, [pc, #196]	; (248cc <nm_spi_init+0x114>)
   24806:	4798      	blx	r3
   24808:	1e03      	subs	r3, r0, #0
   2480a:	d10f      	bne.n	2482c <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   2480c:	4a35      	ldr	r2, [pc, #212]	; (248e4 <nm_spi_init+0x12c>)
   2480e:	4930      	ldr	r1, [pc, #192]	; (248d0 <nm_spi_init+0x118>)
   24810:	4b30      	ldr	r3, [pc, #192]	; (248d4 <nm_spi_init+0x11c>)
   24812:	0018      	movs	r0, r3
   24814:	4b30      	ldr	r3, [pc, #192]	; (248d8 <nm_spi_init+0x120>)
   24816:	4798      	blx	r3
   24818:	4b33      	ldr	r3, [pc, #204]	; (248e8 <nm_spi_init+0x130>)
   2481a:	0018      	movs	r0, r3
   2481c:	4b2e      	ldr	r3, [pc, #184]	; (248d8 <nm_spi_init+0x120>)
   2481e:	4798      	blx	r3
   24820:	4b2f      	ldr	r3, [pc, #188]	; (248e0 <nm_spi_init+0x128>)
   24822:	0018      	movs	r0, r3
   24824:	4b2c      	ldr	r3, [pc, #176]	; (248d8 <nm_spi_init+0x120>)
   24826:	4798      	blx	r3
			return 0;
   24828:	2300      	movs	r3, #0
   2482a:	e047      	b.n	248bc <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   2482c:	4b25      	ldr	r3, [pc, #148]	; (248c4 <nm_spi_init+0x10c>)
   2482e:	781b      	ldrb	r3, [r3, #0]
   24830:	2b00      	cmp	r3, #0
   24832:	d126      	bne.n	24882 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   24834:	683b      	ldr	r3, [r7, #0]
   24836:	220c      	movs	r2, #12
   24838:	4393      	bics	r3, r2
   2483a:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   2483c:	683b      	ldr	r3, [r7, #0]
   2483e:	2270      	movs	r2, #112	; 0x70
   24840:	4393      	bics	r3, r2
   24842:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   24844:	683b      	ldr	r3, [r7, #0]
   24846:	2250      	movs	r2, #80	; 0x50
   24848:	4313      	orrs	r3, r2
   2484a:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   2484c:	683b      	ldr	r3, [r7, #0]
   2484e:	4a1e      	ldr	r2, [pc, #120]	; (248c8 <nm_spi_init+0x110>)
   24850:	0019      	movs	r1, r3
   24852:	0010      	movs	r0, r2
   24854:	4b25      	ldr	r3, [pc, #148]	; (248ec <nm_spi_init+0x134>)
   24856:	4798      	blx	r3
   24858:	1e03      	subs	r3, r0, #0
   2485a:	d10f      	bne.n	2487c <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   2485c:	4a24      	ldr	r2, [pc, #144]	; (248f0 <nm_spi_init+0x138>)
   2485e:	491c      	ldr	r1, [pc, #112]	; (248d0 <nm_spi_init+0x118>)
   24860:	4b1c      	ldr	r3, [pc, #112]	; (248d4 <nm_spi_init+0x11c>)
   24862:	0018      	movs	r0, r3
   24864:	4b1c      	ldr	r3, [pc, #112]	; (248d8 <nm_spi_init+0x120>)
   24866:	4798      	blx	r3
   24868:	4b22      	ldr	r3, [pc, #136]	; (248f4 <nm_spi_init+0x13c>)
   2486a:	0018      	movs	r0, r3
   2486c:	4b1a      	ldr	r3, [pc, #104]	; (248d8 <nm_spi_init+0x120>)
   2486e:	4798      	blx	r3
   24870:	4b1b      	ldr	r3, [pc, #108]	; (248e0 <nm_spi_init+0x128>)
   24872:	0018      	movs	r0, r3
   24874:	4b18      	ldr	r3, [pc, #96]	; (248d8 <nm_spi_init+0x120>)
   24876:	4798      	blx	r3
			return 0;
   24878:	2300      	movs	r3, #0
   2487a:	e01f      	b.n	248bc <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   2487c:	4b11      	ldr	r3, [pc, #68]	; (248c4 <nm_spi_init+0x10c>)
   2487e:	2201      	movs	r2, #1
   24880:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   24882:	1d3a      	adds	r2, r7, #4
   24884:	2380      	movs	r3, #128	; 0x80
   24886:	015b      	lsls	r3, r3, #5
   24888:	0011      	movs	r1, r2
   2488a:	0018      	movs	r0, r3
   2488c:	4b0f      	ldr	r3, [pc, #60]	; (248cc <nm_spi_init+0x114>)
   2488e:	4798      	blx	r3
   24890:	1e03      	subs	r3, r0, #0
   24892:	d110      	bne.n	248b6 <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   24894:	4a18      	ldr	r2, [pc, #96]	; (248f8 <nm_spi_init+0x140>)
   24896:	490e      	ldr	r1, [pc, #56]	; (248d0 <nm_spi_init+0x118>)
   24898:	4b0e      	ldr	r3, [pc, #56]	; (248d4 <nm_spi_init+0x11c>)
   2489a:	0018      	movs	r0, r3
   2489c:	4b0e      	ldr	r3, [pc, #56]	; (248d8 <nm_spi_init+0x120>)
   2489e:	4798      	blx	r3
   248a0:	4b16      	ldr	r3, [pc, #88]	; (248fc <nm_spi_init+0x144>)
   248a2:	0018      	movs	r0, r3
   248a4:	4b0c      	ldr	r3, [pc, #48]	; (248d8 <nm_spi_init+0x120>)
   248a6:	4798      	blx	r3
   248a8:	4b0d      	ldr	r3, [pc, #52]	; (248e0 <nm_spi_init+0x128>)
   248aa:	0018      	movs	r0, r3
   248ac:	4b0a      	ldr	r3, [pc, #40]	; (248d8 <nm_spi_init+0x120>)
   248ae:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   248b0:	2306      	movs	r3, #6
   248b2:	425b      	negs	r3, r3
   248b4:	e002      	b.n	248bc <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   248b6:	4b12      	ldr	r3, [pc, #72]	; (24900 <nm_spi_init+0x148>)
   248b8:	4798      	blx	r3


	return M2M_SUCCESS;
   248ba:	2300      	movs	r3, #0
}
   248bc:	0018      	movs	r0, r3
   248be:	46bd      	mov	sp, r7
   248c0:	b002      	add	sp, #8
   248c2:	bd80      	pop	{r7, pc}
   248c4:	20004154 	.word	0x20004154
   248c8:	0000e824 	.word	0x0000e824
   248cc:	000244b1 	.word	0x000244b1
   248d0:	000390cc 	.word	0x000390cc
   248d4:	00038a58 	.word	0x00038a58
   248d8:	0001dbd9 	.word	0x0001dbd9
   248dc:	00038ef4 	.word	0x00038ef4
   248e0:	00038a98 	.word	0x00038a98
   248e4:	000004c3 	.word	0x000004c3
   248e8:	00038f44 	.word	0x00038f44
   248ec:	000241b9 	.word	0x000241b9
   248f0:	000004cd 	.word	0x000004cd
   248f4:	00038f74 	.word	0x00038f74
   248f8:	000004d7 	.word	0x000004d7
   248fc:	00038fa8 	.word	0x00038fa8
   24900:	00024745 	.word	0x00024745

00024904 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   24904:	b580      	push	{r7, lr}
   24906:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   24908:	4b03      	ldr	r3, [pc, #12]	; (24918 <nm_spi_deinit+0x14>)
   2490a:	2200      	movs	r2, #0
   2490c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   2490e:	2300      	movs	r3, #0
}
   24910:	0018      	movs	r0, r3
   24912:	46bd      	mov	sp, r7
   24914:	bd80      	pop	{r7, pc}
   24916:	46c0      	nop			; (mov r8, r8)
   24918:	20004154 	.word	0x20004154

0002491c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   2491c:	b580      	push	{r7, lr}
   2491e:	b084      	sub	sp, #16
   24920:	af00      	add	r7, sp, #0
   24922:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   24924:	230c      	movs	r3, #12
   24926:	18fa      	adds	r2, r7, r3
   24928:	687b      	ldr	r3, [r7, #4]
   2492a:	0011      	movs	r1, r2
   2492c:	0018      	movs	r0, r3
   2492e:	4b03      	ldr	r3, [pc, #12]	; (2493c <nm_spi_read_reg+0x20>)
   24930:	4798      	blx	r3

	return u32Val;
   24932:	68fb      	ldr	r3, [r7, #12]
}
   24934:	0018      	movs	r0, r3
   24936:	46bd      	mov	sp, r7
   24938:	b004      	add	sp, #16
   2493a:	bd80      	pop	{r7, pc}
   2493c:	000244b1 	.word	0x000244b1

00024940 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   24940:	b590      	push	{r4, r7, lr}
   24942:	b085      	sub	sp, #20
   24944:	af00      	add	r7, sp, #0
   24946:	6078      	str	r0, [r7, #4]
   24948:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   2494a:	230f      	movs	r3, #15
   2494c:	18fc      	adds	r4, r7, r3
   2494e:	683a      	ldr	r2, [r7, #0]
   24950:	687b      	ldr	r3, [r7, #4]
   24952:	0011      	movs	r1, r2
   24954:	0018      	movs	r0, r3
   24956:	4b0d      	ldr	r3, [pc, #52]	; (2498c <nm_spi_read_reg_with_ret+0x4c>)
   24958:	4798      	blx	r3
   2495a:	0003      	movs	r3, r0
   2495c:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2495e:	230f      	movs	r3, #15
   24960:	18fb      	adds	r3, r7, r3
   24962:	781b      	ldrb	r3, [r3, #0]
   24964:	b25b      	sxtb	r3, r3
   24966:	2b01      	cmp	r3, #1
   24968:	d104      	bne.n	24974 <nm_spi_read_reg_with_ret+0x34>
   2496a:	230f      	movs	r3, #15
   2496c:	18fb      	adds	r3, r7, r3
   2496e:	2200      	movs	r2, #0
   24970:	701a      	strb	r2, [r3, #0]
   24972:	e003      	b.n	2497c <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24974:	230f      	movs	r3, #15
   24976:	18fb      	adds	r3, r7, r3
   24978:	22fa      	movs	r2, #250	; 0xfa
   2497a:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2497c:	230f      	movs	r3, #15
   2497e:	18fb      	adds	r3, r7, r3
   24980:	781b      	ldrb	r3, [r3, #0]
   24982:	b25b      	sxtb	r3, r3
}
   24984:	0018      	movs	r0, r3
   24986:	46bd      	mov	sp, r7
   24988:	b005      	add	sp, #20
   2498a:	bd90      	pop	{r4, r7, pc}
   2498c:	000244b1 	.word	0x000244b1

00024990 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   24990:	b590      	push	{r4, r7, lr}
   24992:	b085      	sub	sp, #20
   24994:	af00      	add	r7, sp, #0
   24996:	6078      	str	r0, [r7, #4]
   24998:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   2499a:	230f      	movs	r3, #15
   2499c:	18fc      	adds	r4, r7, r3
   2499e:	683a      	ldr	r2, [r7, #0]
   249a0:	687b      	ldr	r3, [r7, #4]
   249a2:	0011      	movs	r1, r2
   249a4:	0018      	movs	r0, r3
   249a6:	4b0d      	ldr	r3, [pc, #52]	; (249dc <nm_spi_write_reg+0x4c>)
   249a8:	4798      	blx	r3
   249aa:	0003      	movs	r3, r0
   249ac:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   249ae:	230f      	movs	r3, #15
   249b0:	18fb      	adds	r3, r7, r3
   249b2:	781b      	ldrb	r3, [r3, #0]
   249b4:	b25b      	sxtb	r3, r3
   249b6:	2b01      	cmp	r3, #1
   249b8:	d104      	bne.n	249c4 <nm_spi_write_reg+0x34>
   249ba:	230f      	movs	r3, #15
   249bc:	18fb      	adds	r3, r7, r3
   249be:	2200      	movs	r2, #0
   249c0:	701a      	strb	r2, [r3, #0]
   249c2:	e003      	b.n	249cc <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   249c4:	230f      	movs	r3, #15
   249c6:	18fb      	adds	r3, r7, r3
   249c8:	22fa      	movs	r2, #250	; 0xfa
   249ca:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   249cc:	230f      	movs	r3, #15
   249ce:	18fb      	adds	r3, r7, r3
   249d0:	781b      	ldrb	r3, [r3, #0]
   249d2:	b25b      	sxtb	r3, r3
}
   249d4:	0018      	movs	r0, r3
   249d6:	46bd      	mov	sp, r7
   249d8:	b005      	add	sp, #20
   249da:	bd90      	pop	{r4, r7, pc}
   249dc:	000241b9 	.word	0x000241b9

000249e0 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   249e0:	b590      	push	{r4, r7, lr}
   249e2:	b087      	sub	sp, #28
   249e4:	af00      	add	r7, sp, #0
   249e6:	60f8      	str	r0, [r7, #12]
   249e8:	60b9      	str	r1, [r7, #8]
   249ea:	1dbb      	adds	r3, r7, #6
   249ec:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   249ee:	2317      	movs	r3, #23
   249f0:	18fc      	adds	r4, r7, r3
   249f2:	1dbb      	adds	r3, r7, #6
   249f4:	881a      	ldrh	r2, [r3, #0]
   249f6:	68b9      	ldr	r1, [r7, #8]
   249f8:	68fb      	ldr	r3, [r7, #12]
   249fa:	0018      	movs	r0, r3
   249fc:	4b0d      	ldr	r3, [pc, #52]	; (24a34 <nm_spi_read_block+0x54>)
   249fe:	4798      	blx	r3
   24a00:	0003      	movs	r3, r0
   24a02:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24a04:	2317      	movs	r3, #23
   24a06:	18fb      	adds	r3, r7, r3
   24a08:	781b      	ldrb	r3, [r3, #0]
   24a0a:	b25b      	sxtb	r3, r3
   24a0c:	2b01      	cmp	r3, #1
   24a0e:	d104      	bne.n	24a1a <nm_spi_read_block+0x3a>
   24a10:	2317      	movs	r3, #23
   24a12:	18fb      	adds	r3, r7, r3
   24a14:	2200      	movs	r2, #0
   24a16:	701a      	strb	r2, [r3, #0]
   24a18:	e003      	b.n	24a22 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24a1a:	2317      	movs	r3, #23
   24a1c:	18fb      	adds	r3, r7, r3
   24a1e:	22fa      	movs	r2, #250	; 0xfa
   24a20:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24a22:	2317      	movs	r3, #23
   24a24:	18fb      	adds	r3, r7, r3
   24a26:	781b      	ldrb	r3, [r3, #0]
   24a28:	b25b      	sxtb	r3, r3
}
   24a2a:	0018      	movs	r0, r3
   24a2c:	46bd      	mov	sp, r7
   24a2e:	b007      	add	sp, #28
   24a30:	bd90      	pop	{r4, r7, pc}
   24a32:	46c0      	nop			; (mov r8, r8)
   24a34:	00024629 	.word	0x00024629

00024a38 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24a38:	b590      	push	{r4, r7, lr}
   24a3a:	b087      	sub	sp, #28
   24a3c:	af00      	add	r7, sp, #0
   24a3e:	60f8      	str	r0, [r7, #12]
   24a40:	60b9      	str	r1, [r7, #8]
   24a42:	1dbb      	adds	r3, r7, #6
   24a44:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   24a46:	2317      	movs	r3, #23
   24a48:	18fc      	adds	r4, r7, r3
   24a4a:	1dbb      	adds	r3, r7, #6
   24a4c:	881a      	ldrh	r2, [r3, #0]
   24a4e:	68b9      	ldr	r1, [r7, #8]
   24a50:	68fb      	ldr	r3, [r7, #12]
   24a52:	0018      	movs	r0, r3
   24a54:	4b0d      	ldr	r3, [pc, #52]	; (24a8c <nm_spi_write_block+0x54>)
   24a56:	4798      	blx	r3
   24a58:	0003      	movs	r3, r0
   24a5a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24a5c:	2317      	movs	r3, #23
   24a5e:	18fb      	adds	r3, r7, r3
   24a60:	781b      	ldrb	r3, [r3, #0]
   24a62:	b25b      	sxtb	r3, r3
   24a64:	2b01      	cmp	r3, #1
   24a66:	d104      	bne.n	24a72 <nm_spi_write_block+0x3a>
   24a68:	2317      	movs	r3, #23
   24a6a:	18fb      	adds	r3, r7, r3
   24a6c:	2200      	movs	r2, #0
   24a6e:	701a      	strb	r2, [r3, #0]
   24a70:	e003      	b.n	24a7a <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24a72:	2317      	movs	r3, #23
   24a74:	18fb      	adds	r3, r7, r3
   24a76:	22fa      	movs	r2, #250	; 0xfa
   24a78:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24a7a:	2317      	movs	r3, #23
   24a7c:	18fb      	adds	r3, r7, r3
   24a7e:	781b      	ldrb	r3, [r3, #0]
   24a80:	b25b      	sxtb	r3, r3
}
   24a82:	0018      	movs	r0, r3
   24a84:	46bd      	mov	sp, r7
   24a86:	b007      	add	sp, #28
   24a88:	bd90      	pop	{r4, r7, pc}
   24a8a:	46c0      	nop			; (mov r8, r8)
   24a8c:	00024305 	.word	0x00024305

00024a90 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   24a90:	b590      	push	{r4, r7, lr}
   24a92:	b089      	sub	sp, #36	; 0x24
   24a94:	af00      	add	r7, sp, #0
   24a96:	60b9      	str	r1, [r7, #8]
   24a98:	0011      	movs	r1, r2
   24a9a:	607b      	str	r3, [r7, #4]
   24a9c:	230f      	movs	r3, #15
   24a9e:	18fb      	adds	r3, r7, r3
   24aa0:	1c02      	adds	r2, r0, #0
   24aa2:	701a      	strb	r2, [r3, #0]
   24aa4:	230e      	movs	r3, #14
   24aa6:	18fb      	adds	r3, r7, r3
   24aa8:	1c0a      	adds	r2, r1, #0
   24aaa:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   24aac:	2330      	movs	r3, #48	; 0x30
   24aae:	18fb      	adds	r3, r7, r3
   24ab0:	881b      	ldrh	r3, [r3, #0]
   24ab2:	2b00      	cmp	r3, #0
   24ab4:	d100      	bne.n	24ab8 <Socket_ReadSocketData+0x28>
   24ab6:	e0d7      	b.n	24c68 <Socket_ReadSocketData+0x1d8>
   24ab8:	230f      	movs	r3, #15
   24aba:	18fb      	adds	r3, r7, r3
   24abc:	2200      	movs	r2, #0
   24abe:	569a      	ldrsb	r2, [r3, r2]
   24ac0:	4b6b      	ldr	r3, [pc, #428]	; (24c70 <Socket_ReadSocketData+0x1e0>)
   24ac2:	0112      	lsls	r2, r2, #4
   24ac4:	58d3      	ldr	r3, [r2, r3]
   24ac6:	2b00      	cmp	r3, #0
   24ac8:	d100      	bne.n	24acc <Socket_ReadSocketData+0x3c>
   24aca:	e0cd      	b.n	24c68 <Socket_ReadSocketData+0x1d8>
   24acc:	230f      	movs	r3, #15
   24ace:	18fb      	adds	r3, r7, r3
   24ad0:	781b      	ldrb	r3, [r3, #0]
   24ad2:	b25b      	sxtb	r3, r3
   24ad4:	4a66      	ldr	r2, [pc, #408]	; (24c70 <Socket_ReadSocketData+0x1e0>)
   24ad6:	011b      	lsls	r3, r3, #4
   24ad8:	18d3      	adds	r3, r2, r3
   24ada:	3304      	adds	r3, #4
   24adc:	881b      	ldrh	r3, [r3, #0]
   24ade:	b29b      	uxth	r3, r3
   24ae0:	2b00      	cmp	r3, #0
   24ae2:	d100      	bne.n	24ae6 <Socket_ReadSocketData+0x56>
   24ae4:	e0c0      	b.n	24c68 <Socket_ReadSocketData+0x1d8>
   24ae6:	230f      	movs	r3, #15
   24ae8:	18fb      	adds	r3, r7, r3
   24aea:	781b      	ldrb	r3, [r3, #0]
   24aec:	b25b      	sxtb	r3, r3
   24aee:	4a60      	ldr	r2, [pc, #384]	; (24c70 <Socket_ReadSocketData+0x1e0>)
   24af0:	011b      	lsls	r3, r3, #4
   24af2:	18d3      	adds	r3, r2, r3
   24af4:	330a      	adds	r3, #10
   24af6:	781b      	ldrb	r3, [r3, #0]
   24af8:	b2db      	uxtb	r3, r3
   24afa:	2b01      	cmp	r3, #1
   24afc:	d000      	beq.n	24b00 <Socket_ReadSocketData+0x70>
   24afe:	e0b3      	b.n	24c68 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   24b00:	687b      	ldr	r3, [r7, #4]
   24b02:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   24b04:	68bb      	ldr	r3, [r7, #8]
   24b06:	2230      	movs	r2, #48	; 0x30
   24b08:	18ba      	adds	r2, r7, r2
   24b0a:	8812      	ldrh	r2, [r2, #0]
   24b0c:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   24b0e:	2319      	movs	r3, #25
   24b10:	18fb      	adds	r3, r7, r3
   24b12:	2201      	movs	r2, #1
   24b14:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   24b16:	231a      	movs	r3, #26
   24b18:	18fb      	adds	r3, r7, r3
   24b1a:	2230      	movs	r2, #48	; 0x30
   24b1c:	18ba      	adds	r2, r7, r2
   24b1e:	8812      	ldrh	r2, [r2, #0]
   24b20:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   24b22:	230f      	movs	r3, #15
   24b24:	18fb      	adds	r3, r7, r3
   24b26:	781b      	ldrb	r3, [r3, #0]
   24b28:	b25b      	sxtb	r3, r3
   24b2a:	4a51      	ldr	r2, [pc, #324]	; (24c70 <Socket_ReadSocketData+0x1e0>)
   24b2c:	011b      	lsls	r3, r3, #4
   24b2e:	18d3      	adds	r3, r2, r3
   24b30:	3304      	adds	r3, #4
   24b32:	881b      	ldrh	r3, [r3, #0]
   24b34:	b29b      	uxth	r3, r3
   24b36:	221a      	movs	r2, #26
   24b38:	18ba      	adds	r2, r7, r2
   24b3a:	8812      	ldrh	r2, [r2, #0]
   24b3c:	1ad3      	subs	r3, r2, r3
   24b3e:	b29a      	uxth	r2, r3
   24b40:	2316      	movs	r3, #22
   24b42:	18fb      	adds	r3, r7, r3
   24b44:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   24b46:	2316      	movs	r3, #22
   24b48:	18fb      	adds	r3, r7, r3
   24b4a:	2200      	movs	r2, #0
   24b4c:	5e9b      	ldrsh	r3, [r3, r2]
   24b4e:	2b00      	cmp	r3, #0
   24b50:	dd0f      	ble.n	24b72 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   24b52:	2319      	movs	r3, #25
   24b54:	18fb      	adds	r3, r7, r3
   24b56:	2200      	movs	r2, #0
   24b58:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   24b5a:	230f      	movs	r3, #15
   24b5c:	18fb      	adds	r3, r7, r3
   24b5e:	2200      	movs	r2, #0
   24b60:	569a      	ldrsb	r2, [r3, r2]
   24b62:	231a      	movs	r3, #26
   24b64:	18fb      	adds	r3, r7, r3
   24b66:	4942      	ldr	r1, [pc, #264]	; (24c70 <Socket_ReadSocketData+0x1e0>)
   24b68:	0112      	lsls	r2, r2, #4
   24b6a:	188a      	adds	r2, r1, r2
   24b6c:	3204      	adds	r2, #4
   24b6e:	8812      	ldrh	r2, [r2, #0]
   24b70:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   24b72:	230f      	movs	r3, #15
   24b74:	18fb      	adds	r3, r7, r3
   24b76:	2200      	movs	r2, #0
   24b78:	569a      	ldrsb	r2, [r3, r2]
   24b7a:	4b3d      	ldr	r3, [pc, #244]	; (24c70 <Socket_ReadSocketData+0x1e0>)
   24b7c:	0112      	lsls	r2, r2, #4
   24b7e:	58d1      	ldr	r1, [r2, r3]
   24b80:	2319      	movs	r3, #25
   24b82:	18fb      	adds	r3, r7, r3
   24b84:	781c      	ldrb	r4, [r3, #0]
   24b86:	231a      	movs	r3, #26
   24b88:	18fb      	adds	r3, r7, r3
   24b8a:	881a      	ldrh	r2, [r3, #0]
   24b8c:	69f8      	ldr	r0, [r7, #28]
   24b8e:	0023      	movs	r3, r4
   24b90:	4c38      	ldr	r4, [pc, #224]	; (24c74 <Socket_ReadSocketData+0x1e4>)
   24b92:	47a0      	blx	r4
   24b94:	1e03      	subs	r3, r0, #0
   24b96:	d14f      	bne.n	24c38 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   24b98:	230f      	movs	r3, #15
   24b9a:	18fb      	adds	r3, r7, r3
   24b9c:	2200      	movs	r2, #0
   24b9e:	569a      	ldrsb	r2, [r3, r2]
   24ba0:	4b33      	ldr	r3, [pc, #204]	; (24c70 <Socket_ReadSocketData+0x1e0>)
   24ba2:	0112      	lsls	r2, r2, #4
   24ba4:	58d2      	ldr	r2, [r2, r3]
   24ba6:	68bb      	ldr	r3, [r7, #8]
   24ba8:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   24baa:	231a      	movs	r3, #26
   24bac:	18fb      	adds	r3, r7, r3
   24bae:	2200      	movs	r2, #0
   24bb0:	5e9a      	ldrsh	r2, [r3, r2]
   24bb2:	68bb      	ldr	r3, [r7, #8]
   24bb4:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   24bb6:	68bb      	ldr	r3, [r7, #8]
   24bb8:	88da      	ldrh	r2, [r3, #6]
   24bba:	231a      	movs	r3, #26
   24bbc:	18fb      	adds	r3, r7, r3
   24bbe:	881b      	ldrh	r3, [r3, #0]
   24bc0:	1ad3      	subs	r3, r2, r3
   24bc2:	b29a      	uxth	r2, r3
   24bc4:	68bb      	ldr	r3, [r7, #8]
   24bc6:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   24bc8:	4b2b      	ldr	r3, [pc, #172]	; (24c78 <Socket_ReadSocketData+0x1e8>)
   24bca:	681b      	ldr	r3, [r3, #0]
   24bcc:	2b00      	cmp	r3, #0
   24bce:	d00b      	beq.n	24be8 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   24bd0:	4b29      	ldr	r3, [pc, #164]	; (24c78 <Socket_ReadSocketData+0x1e8>)
   24bd2:	681b      	ldr	r3, [r3, #0]
   24bd4:	68bc      	ldr	r4, [r7, #8]
   24bd6:	220e      	movs	r2, #14
   24bd8:	18ba      	adds	r2, r7, r2
   24bda:	7811      	ldrb	r1, [r2, #0]
   24bdc:	220f      	movs	r2, #15
   24bde:	18ba      	adds	r2, r7, r2
   24be0:	2000      	movs	r0, #0
   24be2:	5610      	ldrsb	r0, [r2, r0]
   24be4:	0022      	movs	r2, r4
   24be6:	4798      	blx	r3

				u16ReadCount -= u16Read;
   24be8:	2330      	movs	r3, #48	; 0x30
   24bea:	18f9      	adds	r1, r7, r3
   24bec:	2330      	movs	r3, #48	; 0x30
   24bee:	18fa      	adds	r2, r7, r3
   24bf0:	231a      	movs	r3, #26
   24bf2:	18fb      	adds	r3, r7, r3
   24bf4:	8812      	ldrh	r2, [r2, #0]
   24bf6:	881b      	ldrh	r3, [r3, #0]
   24bf8:	1ad3      	subs	r3, r2, r3
   24bfa:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   24bfc:	231a      	movs	r3, #26
   24bfe:	18fb      	adds	r3, r7, r3
   24c00:	881b      	ldrh	r3, [r3, #0]
   24c02:	69fa      	ldr	r2, [r7, #28]
   24c04:	18d3      	adds	r3, r2, r3
   24c06:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   24c08:	230f      	movs	r3, #15
   24c0a:	18fb      	adds	r3, r7, r3
   24c0c:	781b      	ldrb	r3, [r3, #0]
   24c0e:	b25b      	sxtb	r3, r3
   24c10:	4a17      	ldr	r2, [pc, #92]	; (24c70 <Socket_ReadSocketData+0x1e0>)
   24c12:	011b      	lsls	r3, r3, #4
   24c14:	18d3      	adds	r3, r2, r3
   24c16:	330a      	adds	r3, #10
   24c18:	781b      	ldrb	r3, [r3, #0]
   24c1a:	b2db      	uxtb	r3, r3
   24c1c:	2b00      	cmp	r3, #0
   24c1e:	d11c      	bne.n	24c5a <Socket_ReadSocketData+0x1ca>
   24c20:	2330      	movs	r3, #48	; 0x30
   24c22:	18fb      	adds	r3, r7, r3
   24c24:	881b      	ldrh	r3, [r3, #0]
   24c26:	2b00      	cmp	r3, #0
   24c28:	d017      	beq.n	24c5a <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   24c2a:	2301      	movs	r3, #1
   24c2c:	2200      	movs	r2, #0
   24c2e:	2100      	movs	r1, #0
   24c30:	2000      	movs	r0, #0
   24c32:	4c10      	ldr	r4, [pc, #64]	; (24c74 <Socket_ReadSocketData+0x1e4>)
   24c34:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   24c36:	e017      	b.n	24c68 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   24c38:	4b10      	ldr	r3, [pc, #64]	; (24c7c <Socket_ReadSocketData+0x1ec>)
   24c3a:	0018      	movs	r0, r3
   24c3c:	4b10      	ldr	r3, [pc, #64]	; (24c80 <Socket_ReadSocketData+0x1f0>)
   24c3e:	4798      	blx	r3
   24c40:	2330      	movs	r3, #48	; 0x30
   24c42:	18fb      	adds	r3, r7, r3
   24c44:	881a      	ldrh	r2, [r3, #0]
   24c46:	4b0f      	ldr	r3, [pc, #60]	; (24c84 <Socket_ReadSocketData+0x1f4>)
   24c48:	0011      	movs	r1, r2
   24c4a:	0018      	movs	r0, r3
   24c4c:	4b0c      	ldr	r3, [pc, #48]	; (24c80 <Socket_ReadSocketData+0x1f0>)
   24c4e:	4798      	blx	r3
   24c50:	4b0d      	ldr	r3, [pc, #52]	; (24c88 <Socket_ReadSocketData+0x1f8>)
   24c52:	0018      	movs	r0, r3
   24c54:	4b0a      	ldr	r3, [pc, #40]	; (24c80 <Socket_ReadSocketData+0x1f0>)
   24c56:	4798      	blx	r3
				break;
   24c58:	e006      	b.n	24c68 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   24c5a:	2330      	movs	r3, #48	; 0x30
   24c5c:	18fb      	adds	r3, r7, r3
   24c5e:	881b      	ldrh	r3, [r3, #0]
   24c60:	2b00      	cmp	r3, #0
   24c62:	d000      	beq.n	24c66 <Socket_ReadSocketData+0x1d6>
   24c64:	e753      	b.n	24b0e <Socket_ReadSocketData+0x7e>
	}
}
   24c66:	e7ff      	b.n	24c68 <Socket_ReadSocketData+0x1d8>
   24c68:	46c0      	nop			; (mov r8, r8)
   24c6a:	46bd      	mov	sp, r7
   24c6c:	b009      	add	sp, #36	; 0x24
   24c6e:	bd90      	pop	{r4, r7, pc}
   24c70:	2000595c 	.word	0x2000595c
   24c74:	00021489 	.word	0x00021489
   24c78:	20005a0c 	.word	0x20005a0c
   24c7c:	000390d8 	.word	0x000390d8
   24c80:	0001dbd9 	.word	0x0001dbd9
   24c84:	000390e4 	.word	0x000390e4
   24c88:	000390f8 	.word	0x000390f8

00024c8c <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   24c8c:	b590      	push	{r4, r7, lr}
   24c8e:	b0bb      	sub	sp, #236	; 0xec
   24c90:	af02      	add	r7, sp, #8
   24c92:	603a      	str	r2, [r7, #0]
   24c94:	1dfb      	adds	r3, r7, #7
   24c96:	1c02      	adds	r2, r0, #0
   24c98:	701a      	strb	r2, [r3, #0]
   24c9a:	1d3b      	adds	r3, r7, #4
   24c9c:	1c0a      	adds	r2, r1, #0
   24c9e:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   24ca0:	1dfb      	adds	r3, r7, #7
   24ca2:	781b      	ldrb	r3, [r3, #0]
   24ca4:	2b41      	cmp	r3, #65	; 0x41
   24ca6:	d003      	beq.n	24cb0 <m2m_ip_cb+0x24>
   24ca8:	1dfb      	adds	r3, r7, #7
   24caa:	781b      	ldrb	r3, [r3, #0]
   24cac:	2b54      	cmp	r3, #84	; 0x54
   24cae:	d120      	bne.n	24cf2 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   24cb0:	23cc      	movs	r3, #204	; 0xcc
   24cb2:	18f9      	adds	r1, r7, r3
   24cb4:	6838      	ldr	r0, [r7, #0]
   24cb6:	2300      	movs	r3, #0
   24cb8:	2204      	movs	r2, #4
   24cba:	4c98      	ldr	r4, [pc, #608]	; (24f1c <m2m_ip_cb+0x290>)
   24cbc:	47a0      	blx	r4
   24cbe:	1e03      	subs	r3, r0, #0
   24cc0:	d000      	beq.n	24cc4 <m2m_ip_cb+0x38>
   24cc2:	e275      	b.n	251b0 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   24cc4:	23cc      	movs	r3, #204	; 0xcc
   24cc6:	18fb      	adds	r3, r7, r3
   24cc8:	2201      	movs	r2, #1
   24cca:	569a      	ldrsb	r2, [r3, r2]
   24ccc:	23c8      	movs	r3, #200	; 0xc8
   24cce:	18fb      	adds	r3, r7, r3
   24cd0:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   24cd2:	4b93      	ldr	r3, [pc, #588]	; (24f20 <m2m_ip_cb+0x294>)
   24cd4:	681b      	ldr	r3, [r3, #0]
   24cd6:	2b00      	cmp	r3, #0
   24cd8:	d100      	bne.n	24cdc <m2m_ip_cb+0x50>
   24cda:	e269      	b.n	251b0 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   24cdc:	4b90      	ldr	r3, [pc, #576]	; (24f20 <m2m_ip_cb+0x294>)
   24cde:	681b      	ldr	r3, [r3, #0]
   24ce0:	22cc      	movs	r2, #204	; 0xcc
   24ce2:	18ba      	adds	r2, r7, r2
   24ce4:	2000      	movs	r0, #0
   24ce6:	5610      	ldrsb	r0, [r2, r0]
   24ce8:	22c8      	movs	r2, #200	; 0xc8
   24cea:	18ba      	adds	r2, r7, r2
   24cec:	2101      	movs	r1, #1
   24cee:	4798      	blx	r3
	{
   24cf0:	e25e      	b.n	251b0 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   24cf2:	1dfb      	adds	r3, r7, #7
   24cf4:	781b      	ldrb	r3, [r3, #0]
   24cf6:	2b42      	cmp	r3, #66	; 0x42
   24cf8:	d120      	bne.n	24d3c <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   24cfa:	23c4      	movs	r3, #196	; 0xc4
   24cfc:	18f9      	adds	r1, r7, r3
   24cfe:	6838      	ldr	r0, [r7, #0]
   24d00:	2300      	movs	r3, #0
   24d02:	2204      	movs	r2, #4
   24d04:	4c85      	ldr	r4, [pc, #532]	; (24f1c <m2m_ip_cb+0x290>)
   24d06:	47a0      	blx	r4
   24d08:	1e03      	subs	r3, r0, #0
   24d0a:	d000      	beq.n	24d0e <m2m_ip_cb+0x82>
   24d0c:	e257      	b.n	251be <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   24d0e:	23c4      	movs	r3, #196	; 0xc4
   24d10:	18fb      	adds	r3, r7, r3
   24d12:	2201      	movs	r2, #1
   24d14:	569a      	ldrsb	r2, [r3, r2]
   24d16:	23c0      	movs	r3, #192	; 0xc0
   24d18:	18fb      	adds	r3, r7, r3
   24d1a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   24d1c:	4b80      	ldr	r3, [pc, #512]	; (24f20 <m2m_ip_cb+0x294>)
   24d1e:	681b      	ldr	r3, [r3, #0]
   24d20:	2b00      	cmp	r3, #0
   24d22:	d100      	bne.n	24d26 <m2m_ip_cb+0x9a>
   24d24:	e24b      	b.n	251be <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   24d26:	4b7e      	ldr	r3, [pc, #504]	; (24f20 <m2m_ip_cb+0x294>)
   24d28:	681b      	ldr	r3, [r3, #0]
   24d2a:	22c4      	movs	r2, #196	; 0xc4
   24d2c:	18ba      	adds	r2, r7, r2
   24d2e:	2000      	movs	r0, #0
   24d30:	5610      	ldrsb	r0, [r2, r0]
   24d32:	22c0      	movs	r2, #192	; 0xc0
   24d34:	18ba      	adds	r2, r7, r2
   24d36:	2102      	movs	r1, #2
   24d38:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   24d3a:	e240      	b.n	251be <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   24d3c:	1dfb      	adds	r3, r7, #7
   24d3e:	781b      	ldrb	r3, [r3, #0]
   24d40:	2b43      	cmp	r3, #67	; 0x43
   24d42:	d000      	beq.n	24d46 <m2m_ip_cb+0xba>
   24d44:	e086      	b.n	24e54 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   24d46:	23b4      	movs	r3, #180	; 0xb4
   24d48:	18f9      	adds	r1, r7, r3
   24d4a:	6838      	ldr	r0, [r7, #0]
   24d4c:	2300      	movs	r3, #0
   24d4e:	220c      	movs	r2, #12
   24d50:	4c72      	ldr	r4, [pc, #456]	; (24f1c <m2m_ip_cb+0x290>)
   24d52:	47a0      	blx	r4
   24d54:	1e03      	subs	r3, r0, #0
   24d56:	d000      	beq.n	24d5a <m2m_ip_cb+0xce>
   24d58:	e231      	b.n	251be <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   24d5a:	23b4      	movs	r3, #180	; 0xb4
   24d5c:	18fb      	adds	r3, r7, r3
   24d5e:	7a5b      	ldrb	r3, [r3, #9]
   24d60:	b25b      	sxtb	r3, r3
   24d62:	2b00      	cmp	r3, #0
   24d64:	db4f      	blt.n	24e06 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   24d66:	23b4      	movs	r3, #180	; 0xb4
   24d68:	18fb      	adds	r3, r7, r3
   24d6a:	7a5b      	ldrb	r3, [r3, #9]
   24d6c:	b25b      	sxtb	r3, r3
   24d6e:	0018      	movs	r0, r3
   24d70:	23b4      	movs	r3, #180	; 0xb4
   24d72:	18fb      	adds	r3, r7, r3
   24d74:	7a1b      	ldrb	r3, [r3, #8]
   24d76:	b25b      	sxtb	r3, r3
   24d78:	4a6a      	ldr	r2, [pc, #424]	; (24f24 <m2m_ip_cb+0x298>)
   24d7a:	011b      	lsls	r3, r3, #4
   24d7c:	18d3      	adds	r3, r2, r3
   24d7e:	330b      	adds	r3, #11
   24d80:	781b      	ldrb	r3, [r3, #0]
   24d82:	b2d9      	uxtb	r1, r3
   24d84:	4a67      	ldr	r2, [pc, #412]	; (24f24 <m2m_ip_cb+0x298>)
   24d86:	0103      	lsls	r3, r0, #4
   24d88:	18d3      	adds	r3, r2, r3
   24d8a:	330b      	adds	r3, #11
   24d8c:	1c0a      	adds	r2, r1, #0
   24d8e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   24d90:	23b4      	movs	r3, #180	; 0xb4
   24d92:	18fb      	adds	r3, r7, r3
   24d94:	7a5b      	ldrb	r3, [r3, #9]
   24d96:	b25b      	sxtb	r3, r3
   24d98:	4a62      	ldr	r2, [pc, #392]	; (24f24 <m2m_ip_cb+0x298>)
   24d9a:	011b      	lsls	r3, r3, #4
   24d9c:	18d3      	adds	r3, r2, r3
   24d9e:	330a      	adds	r3, #10
   24da0:	2201      	movs	r2, #1
   24da2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24da4:	23b4      	movs	r3, #180	; 0xb4
   24da6:	18fb      	adds	r3, r7, r3
   24da8:	7a5b      	ldrb	r3, [r3, #9]
   24daa:	b25b      	sxtb	r3, r3
   24dac:	0018      	movs	r0, r3
   24dae:	23b4      	movs	r3, #180	; 0xb4
   24db0:	18fb      	adds	r3, r7, r3
   24db2:	895b      	ldrh	r3, [r3, #10]
   24db4:	3b08      	subs	r3, #8
   24db6:	b299      	uxth	r1, r3
   24db8:	4a5a      	ldr	r2, [pc, #360]	; (24f24 <m2m_ip_cb+0x298>)
   24dba:	0103      	lsls	r3, r0, #4
   24dbc:	18d3      	adds	r3, r2, r3
   24dbe:	3308      	adds	r3, #8
   24dc0:	1c0a      	adds	r2, r1, #0
   24dc2:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   24dc4:	4b58      	ldr	r3, [pc, #352]	; (24f28 <m2m_ip_cb+0x29c>)
   24dc6:	881b      	ldrh	r3, [r3, #0]
   24dc8:	b29b      	uxth	r3, r3
   24dca:	3301      	adds	r3, #1
   24dcc:	b29a      	uxth	r2, r3
   24dce:	4b56      	ldr	r3, [pc, #344]	; (24f28 <m2m_ip_cb+0x29c>)
   24dd0:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   24dd2:	4b55      	ldr	r3, [pc, #340]	; (24f28 <m2m_ip_cb+0x29c>)
   24dd4:	881b      	ldrh	r3, [r3, #0]
   24dd6:	b29b      	uxth	r3, r3
   24dd8:	2b00      	cmp	r3, #0
   24dda:	d106      	bne.n	24dea <m2m_ip_cb+0x15e>
					++gu16SessionID;
   24ddc:	4b52      	ldr	r3, [pc, #328]	; (24f28 <m2m_ip_cb+0x29c>)
   24dde:	881b      	ldrh	r3, [r3, #0]
   24de0:	b29b      	uxth	r3, r3
   24de2:	3301      	adds	r3, #1
   24de4:	b29a      	uxth	r2, r3
   24de6:	4b50      	ldr	r3, [pc, #320]	; (24f28 <m2m_ip_cb+0x29c>)
   24de8:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   24dea:	23b4      	movs	r3, #180	; 0xb4
   24dec:	18fb      	adds	r3, r7, r3
   24dee:	7a5b      	ldrb	r3, [r3, #9]
   24df0:	b25b      	sxtb	r3, r3
   24df2:	0018      	movs	r0, r3
   24df4:	4b4c      	ldr	r3, [pc, #304]	; (24f28 <m2m_ip_cb+0x29c>)
   24df6:	881b      	ldrh	r3, [r3, #0]
   24df8:	b299      	uxth	r1, r3
   24dfa:	4a4a      	ldr	r2, [pc, #296]	; (24f24 <m2m_ip_cb+0x298>)
   24dfc:	0103      	lsls	r3, r0, #4
   24dfe:	18d3      	adds	r3, r2, r3
   24e00:	3306      	adds	r3, #6
   24e02:	1c0a      	adds	r2, r1, #0
   24e04:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   24e06:	23b4      	movs	r3, #180	; 0xb4
   24e08:	18fb      	adds	r3, r7, r3
   24e0a:	2209      	movs	r2, #9
   24e0c:	569a      	ldrsb	r2, [r3, r2]
   24e0e:	23a0      	movs	r3, #160	; 0xa0
   24e10:	18fb      	adds	r3, r7, r3
   24e12:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   24e14:	23a0      	movs	r3, #160	; 0xa0
   24e16:	18fb      	adds	r3, r7, r3
   24e18:	2202      	movs	r2, #2
   24e1a:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   24e1c:	23b4      	movs	r3, #180	; 0xb4
   24e1e:	18fb      	adds	r3, r7, r3
   24e20:	885a      	ldrh	r2, [r3, #2]
   24e22:	23a0      	movs	r3, #160	; 0xa0
   24e24:	18fb      	adds	r3, r7, r3
   24e26:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   24e28:	23b4      	movs	r3, #180	; 0xb4
   24e2a:	18fb      	adds	r3, r7, r3
   24e2c:	685a      	ldr	r2, [r3, #4]
   24e2e:	23a0      	movs	r3, #160	; 0xa0
   24e30:	18fb      	adds	r3, r7, r3
   24e32:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   24e34:	4b3a      	ldr	r3, [pc, #232]	; (24f20 <m2m_ip_cb+0x294>)
   24e36:	681b      	ldr	r3, [r3, #0]
   24e38:	2b00      	cmp	r3, #0
   24e3a:	d100      	bne.n	24e3e <m2m_ip_cb+0x1b2>
   24e3c:	e1bf      	b.n	251be <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   24e3e:	4b38      	ldr	r3, [pc, #224]	; (24f20 <m2m_ip_cb+0x294>)
   24e40:	681b      	ldr	r3, [r3, #0]
   24e42:	22b4      	movs	r2, #180	; 0xb4
   24e44:	18ba      	adds	r2, r7, r2
   24e46:	2008      	movs	r0, #8
   24e48:	5610      	ldrsb	r0, [r2, r0]
   24e4a:	22a0      	movs	r2, #160	; 0xa0
   24e4c:	18ba      	adds	r2, r7, r2
   24e4e:	2104      	movs	r1, #4
   24e50:	4798      	blx	r3
}
   24e52:	e1b4      	b.n	251be <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   24e54:	1dfb      	adds	r3, r7, #7
   24e56:	781b      	ldrb	r3, [r3, #0]
   24e58:	2b44      	cmp	r3, #68	; 0x44
   24e5a:	d003      	beq.n	24e64 <m2m_ip_cb+0x1d8>
   24e5c:	1dfb      	adds	r3, r7, #7
   24e5e:	781b      	ldrb	r3, [r3, #0]
   24e60:	2b4b      	cmp	r3, #75	; 0x4b
   24e62:	d13d      	bne.n	24ee0 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   24e64:	239c      	movs	r3, #156	; 0x9c
   24e66:	18f9      	adds	r1, r7, r3
   24e68:	6838      	ldr	r0, [r7, #0]
   24e6a:	2300      	movs	r3, #0
   24e6c:	2204      	movs	r2, #4
   24e6e:	4c2b      	ldr	r4, [pc, #172]	; (24f1c <m2m_ip_cb+0x290>)
   24e70:	47a0      	blx	r4
   24e72:	1e03      	subs	r3, r0, #0
   24e74:	d000      	beq.n	24e78 <m2m_ip_cb+0x1ec>
   24e76:	e19d      	b.n	251b4 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   24e78:	239c      	movs	r3, #156	; 0x9c
   24e7a:	18fb      	adds	r3, r7, r3
   24e7c:	2200      	movs	r2, #0
   24e7e:	569a      	ldrsb	r2, [r3, r2]
   24e80:	2398      	movs	r3, #152	; 0x98
   24e82:	18fb      	adds	r3, r7, r3
   24e84:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   24e86:	239c      	movs	r3, #156	; 0x9c
   24e88:	18fb      	adds	r3, r7, r3
   24e8a:	2201      	movs	r2, #1
   24e8c:	569a      	ldrsb	r2, [r3, r2]
   24e8e:	2398      	movs	r3, #152	; 0x98
   24e90:	18fb      	adds	r3, r7, r3
   24e92:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   24e94:	239c      	movs	r3, #156	; 0x9c
   24e96:	18fb      	adds	r3, r7, r3
   24e98:	785b      	ldrb	r3, [r3, #1]
   24e9a:	b25b      	sxtb	r3, r3
   24e9c:	2b00      	cmp	r3, #0
   24e9e:	d10f      	bne.n	24ec0 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24ea0:	239c      	movs	r3, #156	; 0x9c
   24ea2:	18fb      	adds	r3, r7, r3
   24ea4:	781b      	ldrb	r3, [r3, #0]
   24ea6:	b25b      	sxtb	r3, r3
   24ea8:	0018      	movs	r0, r3
   24eaa:	239c      	movs	r3, #156	; 0x9c
   24eac:	18fb      	adds	r3, r7, r3
   24eae:	885b      	ldrh	r3, [r3, #2]
   24eb0:	3b08      	subs	r3, #8
   24eb2:	b299      	uxth	r1, r3
   24eb4:	4a1b      	ldr	r2, [pc, #108]	; (24f24 <m2m_ip_cb+0x298>)
   24eb6:	0103      	lsls	r3, r0, #4
   24eb8:	18d3      	adds	r3, r2, r3
   24eba:	3308      	adds	r3, #8
   24ebc:	1c0a      	adds	r2, r1, #0
   24ebe:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   24ec0:	4b17      	ldr	r3, [pc, #92]	; (24f20 <m2m_ip_cb+0x294>)
   24ec2:	681b      	ldr	r3, [r3, #0]
   24ec4:	2b00      	cmp	r3, #0
   24ec6:	d100      	bne.n	24eca <m2m_ip_cb+0x23e>
   24ec8:	e174      	b.n	251b4 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   24eca:	4b15      	ldr	r3, [pc, #84]	; (24f20 <m2m_ip_cb+0x294>)
   24ecc:	681b      	ldr	r3, [r3, #0]
   24ece:	229c      	movs	r2, #156	; 0x9c
   24ed0:	18ba      	adds	r2, r7, r2
   24ed2:	2000      	movs	r0, #0
   24ed4:	5610      	ldrsb	r0, [r2, r0]
   24ed6:	2298      	movs	r2, #152	; 0x98
   24ed8:	18ba      	adds	r2, r7, r2
   24eda:	2105      	movs	r1, #5
   24edc:	4798      	blx	r3
	{
   24ede:	e169      	b.n	251b4 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   24ee0:	1dfb      	adds	r3, r7, #7
   24ee2:	781b      	ldrb	r3, [r3, #0]
   24ee4:	2b4a      	cmp	r3, #74	; 0x4a
   24ee6:	d123      	bne.n	24f30 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   24ee8:	230c      	movs	r3, #12
   24eea:	18f9      	adds	r1, r7, r3
   24eec:	6838      	ldr	r0, [r7, #0]
   24eee:	2300      	movs	r3, #0
   24ef0:	2244      	movs	r2, #68	; 0x44
   24ef2:	4c0a      	ldr	r4, [pc, #40]	; (24f1c <m2m_ip_cb+0x290>)
   24ef4:	47a0      	blx	r4
   24ef6:	1e03      	subs	r3, r0, #0
   24ef8:	d000      	beq.n	24efc <m2m_ip_cb+0x270>
   24efa:	e160      	b.n	251be <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   24efc:	4b0b      	ldr	r3, [pc, #44]	; (24f2c <m2m_ip_cb+0x2a0>)
   24efe:	681b      	ldr	r3, [r3, #0]
   24f00:	2b00      	cmp	r3, #0
   24f02:	d100      	bne.n	24f06 <m2m_ip_cb+0x27a>
   24f04:	e15b      	b.n	251be <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   24f06:	4b09      	ldr	r3, [pc, #36]	; (24f2c <m2m_ip_cb+0x2a0>)
   24f08:	681a      	ldr	r2, [r3, #0]
   24f0a:	230c      	movs	r3, #12
   24f0c:	18fb      	adds	r3, r7, r3
   24f0e:	6c19      	ldr	r1, [r3, #64]	; 0x40
   24f10:	230c      	movs	r3, #12
   24f12:	18fb      	adds	r3, r7, r3
   24f14:	0018      	movs	r0, r3
   24f16:	4790      	blx	r2
}
   24f18:	e151      	b.n	251be <m2m_ip_cb+0x532>
   24f1a:	46c0      	nop			; (mov r8, r8)
   24f1c:	00021489 	.word	0x00021489
   24f20:	20005a0c 	.word	0x20005a0c
   24f24:	2000595c 	.word	0x2000595c
   24f28:	20004156 	.word	0x20004156
   24f2c:	20005a14 	.word	0x20005a14
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   24f30:	1dfb      	adds	r3, r7, #7
   24f32:	781b      	ldrb	r3, [r3, #0]
   24f34:	2b46      	cmp	r3, #70	; 0x46
   24f36:	d008      	beq.n	24f4a <m2m_ip_cb+0x2be>
   24f38:	1dfb      	adds	r3, r7, #7
   24f3a:	781b      	ldrb	r3, [r3, #0]
   24f3c:	2b48      	cmp	r3, #72	; 0x48
   24f3e:	d004      	beq.n	24f4a <m2m_ip_cb+0x2be>
   24f40:	1dfb      	adds	r3, r7, #7
   24f42:	781b      	ldrb	r3, [r3, #0]
   24f44:	2b4d      	cmp	r3, #77	; 0x4d
   24f46:	d000      	beq.n	24f4a <m2m_ip_cb+0x2be>
   24f48:	e0b4      	b.n	250b4 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   24f4a:	23df      	movs	r3, #223	; 0xdf
   24f4c:	18fb      	adds	r3, r7, r3
   24f4e:	2206      	movs	r2, #6
   24f50:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   24f52:	1dfb      	adds	r3, r7, #7
   24f54:	781b      	ldrb	r3, [r3, #0]
   24f56:	2b48      	cmp	r3, #72	; 0x48
   24f58:	d103      	bne.n	24f62 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   24f5a:	23df      	movs	r3, #223	; 0xdf
   24f5c:	18fb      	adds	r3, r7, r3
   24f5e:	2209      	movs	r2, #9
   24f60:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   24f62:	23d8      	movs	r3, #216	; 0xd8
   24f64:	18fb      	adds	r3, r7, r3
   24f66:	2210      	movs	r2, #16
   24f68:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   24f6a:	23d8      	movs	r3, #216	; 0xd8
   24f6c:	18fb      	adds	r3, r7, r3
   24f6e:	881a      	ldrh	r2, [r3, #0]
   24f70:	2388      	movs	r3, #136	; 0x88
   24f72:	18f9      	adds	r1, r7, r3
   24f74:	6838      	ldr	r0, [r7, #0]
   24f76:	2300      	movs	r3, #0
   24f78:	4c93      	ldr	r4, [pc, #588]	; (251c8 <m2m_ip_cb+0x53c>)
   24f7a:	47a0      	blx	r4
   24f7c:	1e03      	subs	r3, r0, #0
   24f7e:	d000      	beq.n	24f82 <m2m_ip_cb+0x2f6>
   24f80:	e11a      	b.n	251b8 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   24f82:	23d6      	movs	r3, #214	; 0xd6
   24f84:	18fb      	adds	r3, r7, r3
   24f86:	2200      	movs	r2, #0
   24f88:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   24f8a:	23d5      	movs	r3, #213	; 0xd5
   24f8c:	18fb      	adds	r3, r7, r3
   24f8e:	2288      	movs	r2, #136	; 0x88
   24f90:	18ba      	adds	r2, r7, r2
   24f92:	7b12      	ldrb	r2, [r2, #12]
   24f94:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   24f96:	23d6      	movs	r3, #214	; 0xd6
   24f98:	18fb      	adds	r3, r7, r3
   24f9a:	2288      	movs	r2, #136	; 0x88
   24f9c:	18ba      	adds	r2, r7, r2
   24f9e:	89d2      	ldrh	r2, [r2, #14]
   24fa0:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   24fa2:	23d5      	movs	r3, #213	; 0xd5
   24fa4:	18fb      	adds	r3, r7, r3
   24fa6:	781b      	ldrb	r3, [r3, #0]
   24fa8:	b25b      	sxtb	r3, r3
   24faa:	4a88      	ldr	r2, [pc, #544]	; (251cc <m2m_ip_cb+0x540>)
   24fac:	011b      	lsls	r3, r3, #4
   24fae:	18d3      	adds	r3, r2, r3
   24fb0:	330c      	adds	r3, #12
   24fb2:	2200      	movs	r2, #0
   24fb4:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   24fb6:	23d2      	movs	r3, #210	; 0xd2
   24fb8:	18fb      	adds	r3, r7, r3
   24fba:	2288      	movs	r2, #136	; 0x88
   24fbc:	18ba      	adds	r2, r7, r2
   24fbe:	8912      	ldrh	r2, [r2, #8]
   24fc0:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   24fc2:	23d0      	movs	r3, #208	; 0xd0
   24fc4:	18fb      	adds	r3, r7, r3
   24fc6:	2288      	movs	r2, #136	; 0x88
   24fc8:	18ba      	adds	r2, r7, r2
   24fca:	8952      	ldrh	r2, [r2, #10]
   24fcc:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   24fce:	2388      	movs	r3, #136	; 0x88
   24fd0:	18fb      	adds	r3, r7, r3
   24fd2:	885a      	ldrh	r2, [r3, #2]
   24fd4:	2370      	movs	r3, #112	; 0x70
   24fd6:	18fb      	adds	r3, r7, r3
   24fd8:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   24fda:	2388      	movs	r3, #136	; 0x88
   24fdc:	18fb      	adds	r3, r7, r3
   24fde:	685a      	ldr	r2, [r3, #4]
   24fe0:	2370      	movs	r3, #112	; 0x70
   24fe2:	18fb      	adds	r3, r7, r3
   24fe4:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   24fe6:	23d5      	movs	r3, #213	; 0xd5
   24fe8:	18fb      	adds	r3, r7, r3
   24fea:	781b      	ldrb	r3, [r3, #0]
   24fec:	b25b      	sxtb	r3, r3
   24fee:	4a77      	ldr	r2, [pc, #476]	; (251cc <m2m_ip_cb+0x540>)
   24ff0:	011b      	lsls	r3, r3, #4
   24ff2:	18d3      	adds	r3, r2, r3
   24ff4:	3306      	adds	r3, #6
   24ff6:	881b      	ldrh	r3, [r3, #0]
   24ff8:	b29b      	uxth	r3, r3
   24ffa:	22d6      	movs	r2, #214	; 0xd6
   24ffc:	18ba      	adds	r2, r7, r2
   24ffe:	8812      	ldrh	r2, [r2, #0]
   25000:	429a      	cmp	r2, r3
   25002:	d148      	bne.n	25096 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   25004:	23d2      	movs	r3, #210	; 0xd2
   25006:	18fb      	adds	r3, r7, r3
   25008:	2200      	movs	r2, #0
   2500a:	5e9b      	ldrsh	r3, [r3, r2]
   2500c:	2b00      	cmp	r3, #0
   2500e:	dd25      	ble.n	2505c <m2m_ip_cb+0x3d0>
   25010:	23d2      	movs	r3, #210	; 0xd2
   25012:	18fb      	adds	r3, r7, r3
   25014:	2200      	movs	r2, #0
   25016:	5e9a      	ldrsh	r2, [r3, r2]
   25018:	1d3b      	adds	r3, r7, #4
   2501a:	881b      	ldrh	r3, [r3, #0]
   2501c:	429a      	cmp	r2, r3
   2501e:	da1d      	bge.n	2505c <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   25020:	23d0      	movs	r3, #208	; 0xd0
   25022:	18fb      	adds	r3, r7, r3
   25024:	881b      	ldrh	r3, [r3, #0]
   25026:	683a      	ldr	r2, [r7, #0]
   25028:	18d3      	adds	r3, r2, r3
   2502a:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   2502c:	23d8      	movs	r3, #216	; 0xd8
   2502e:	18fb      	adds	r3, r7, r3
   25030:	22d2      	movs	r2, #210	; 0xd2
   25032:	18ba      	adds	r2, r7, r2
   25034:	8812      	ldrh	r2, [r2, #0]
   25036:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   25038:	683c      	ldr	r4, [r7, #0]
   2503a:	23df      	movs	r3, #223	; 0xdf
   2503c:	18fb      	adds	r3, r7, r3
   2503e:	781a      	ldrb	r2, [r3, #0]
   25040:	2370      	movs	r3, #112	; 0x70
   25042:	18f9      	adds	r1, r7, r3
   25044:	23d5      	movs	r3, #213	; 0xd5
   25046:	18fb      	adds	r3, r7, r3
   25048:	2000      	movs	r0, #0
   2504a:	5618      	ldrsb	r0, [r3, r0]
   2504c:	23d8      	movs	r3, #216	; 0xd8
   2504e:	18fb      	adds	r3, r7, r3
   25050:	881b      	ldrh	r3, [r3, #0]
   25052:	9300      	str	r3, [sp, #0]
   25054:	0023      	movs	r3, r4
   25056:	4c5e      	ldr	r4, [pc, #376]	; (251d0 <m2m_ip_cb+0x544>)
   25058:	47a0      	blx	r4
	{
   2505a:	e0ad      	b.n	251b8 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   2505c:	2370      	movs	r3, #112	; 0x70
   2505e:	18fb      	adds	r3, r7, r3
   25060:	22d2      	movs	r2, #210	; 0xd2
   25062:	18ba      	adds	r2, r7, r2
   25064:	8812      	ldrh	r2, [r2, #0]
   25066:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   25068:	2370      	movs	r3, #112	; 0x70
   2506a:	18fb      	adds	r3, r7, r3
   2506c:	2200      	movs	r2, #0
   2506e:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   25070:	4b58      	ldr	r3, [pc, #352]	; (251d4 <m2m_ip_cb+0x548>)
   25072:	681b      	ldr	r3, [r3, #0]
   25074:	2b00      	cmp	r3, #0
   25076:	d100      	bne.n	2507a <m2m_ip_cb+0x3ee>
   25078:	e09e      	b.n	251b8 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   2507a:	4b56      	ldr	r3, [pc, #344]	; (251d4 <m2m_ip_cb+0x548>)
   2507c:	681b      	ldr	r3, [r3, #0]
   2507e:	2270      	movs	r2, #112	; 0x70
   25080:	18bc      	adds	r4, r7, r2
   25082:	22df      	movs	r2, #223	; 0xdf
   25084:	18ba      	adds	r2, r7, r2
   25086:	7811      	ldrb	r1, [r2, #0]
   25088:	22d5      	movs	r2, #213	; 0xd5
   2508a:	18ba      	adds	r2, r7, r2
   2508c:	2000      	movs	r0, #0
   2508e:	5610      	ldrsb	r0, [r2, r0]
   25090:	0022      	movs	r2, r4
   25092:	4798      	blx	r3
	{
   25094:	e090      	b.n	251b8 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   25096:	23d8      	movs	r3, #216	; 0xd8
   25098:	18fa      	adds	r2, r7, r3
   2509a:	1d3b      	adds	r3, r7, #4
   2509c:	8812      	ldrh	r2, [r2, #0]
   2509e:	881b      	ldrh	r3, [r3, #0]
   250a0:	429a      	cmp	r2, r3
   250a2:	d300      	bcc.n	250a6 <m2m_ip_cb+0x41a>
   250a4:	e088      	b.n	251b8 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   250a6:	2301      	movs	r3, #1
   250a8:	2200      	movs	r2, #0
   250aa:	2100      	movs	r1, #0
   250ac:	2000      	movs	r0, #0
   250ae:	4c46      	ldr	r4, [pc, #280]	; (251c8 <m2m_ip_cb+0x53c>)
   250b0:	47a0      	blx	r4
	{
   250b2:	e081      	b.n	251b8 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   250b4:	1dfb      	adds	r3, r7, #7
   250b6:	781b      	ldrb	r3, [r3, #0]
   250b8:	2b45      	cmp	r3, #69	; 0x45
   250ba:	d007      	beq.n	250cc <m2m_ip_cb+0x440>
   250bc:	1dfb      	adds	r3, r7, #7
   250be:	781b      	ldrb	r3, [r3, #0]
   250c0:	2b47      	cmp	r3, #71	; 0x47
   250c2:	d003      	beq.n	250cc <m2m_ip_cb+0x440>
   250c4:	1dfb      	adds	r3, r7, #7
   250c6:	781b      	ldrb	r3, [r3, #0]
   250c8:	2b4c      	cmp	r3, #76	; 0x4c
   250ca:	d14c      	bne.n	25166 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   250cc:	23de      	movs	r3, #222	; 0xde
   250ce:	18fb      	adds	r3, r7, r3
   250d0:	2207      	movs	r2, #7
   250d2:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   250d4:	1dfb      	adds	r3, r7, #7
   250d6:	781b      	ldrb	r3, [r3, #0]
   250d8:	2b47      	cmp	r3, #71	; 0x47
   250da:	d103      	bne.n	250e4 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   250dc:	23de      	movs	r3, #222	; 0xde
   250de:	18fb      	adds	r3, r7, r3
   250e0:	2208      	movs	r2, #8
   250e2:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   250e4:	2364      	movs	r3, #100	; 0x64
   250e6:	18f9      	adds	r1, r7, r3
   250e8:	6838      	ldr	r0, [r7, #0]
   250ea:	2300      	movs	r3, #0
   250ec:	2208      	movs	r2, #8
   250ee:	4c36      	ldr	r4, [pc, #216]	; (251c8 <m2m_ip_cb+0x53c>)
   250f0:	47a0      	blx	r4
   250f2:	1e03      	subs	r3, r0, #0
   250f4:	d162      	bne.n	251bc <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   250f6:	23dc      	movs	r3, #220	; 0xdc
   250f8:	18fb      	adds	r3, r7, r3
   250fa:	2200      	movs	r2, #0
   250fc:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   250fe:	23db      	movs	r3, #219	; 0xdb
   25100:	18fb      	adds	r3, r7, r3
   25102:	2264      	movs	r2, #100	; 0x64
   25104:	18ba      	adds	r2, r7, r2
   25106:	7812      	ldrb	r2, [r2, #0]
   25108:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   2510a:	23dc      	movs	r3, #220	; 0xdc
   2510c:	18fb      	adds	r3, r7, r3
   2510e:	2264      	movs	r2, #100	; 0x64
   25110:	18ba      	adds	r2, r7, r2
   25112:	8892      	ldrh	r2, [r2, #4]
   25114:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   25116:	2364      	movs	r3, #100	; 0x64
   25118:	18fb      	adds	r3, r7, r3
   2511a:	2202      	movs	r2, #2
   2511c:	5e9a      	ldrsh	r2, [r3, r2]
   2511e:	236e      	movs	r3, #110	; 0x6e
   25120:	18fb      	adds	r3, r7, r3
   25122:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   25124:	23db      	movs	r3, #219	; 0xdb
   25126:	18fb      	adds	r3, r7, r3
   25128:	781b      	ldrb	r3, [r3, #0]
   2512a:	b25b      	sxtb	r3, r3
   2512c:	4a27      	ldr	r2, [pc, #156]	; (251cc <m2m_ip_cb+0x540>)
   2512e:	011b      	lsls	r3, r3, #4
   25130:	18d3      	adds	r3, r2, r3
   25132:	3306      	adds	r3, #6
   25134:	881b      	ldrh	r3, [r3, #0]
   25136:	b29b      	uxth	r3, r3
   25138:	22dc      	movs	r2, #220	; 0xdc
   2513a:	18ba      	adds	r2, r7, r2
   2513c:	8812      	ldrh	r2, [r2, #0]
   2513e:	429a      	cmp	r2, r3
   25140:	d13c      	bne.n	251bc <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   25142:	4b24      	ldr	r3, [pc, #144]	; (251d4 <m2m_ip_cb+0x548>)
   25144:	681b      	ldr	r3, [r3, #0]
   25146:	2b00      	cmp	r3, #0
   25148:	d038      	beq.n	251bc <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   2514a:	4b22      	ldr	r3, [pc, #136]	; (251d4 <m2m_ip_cb+0x548>)
   2514c:	681b      	ldr	r3, [r3, #0]
   2514e:	226e      	movs	r2, #110	; 0x6e
   25150:	18bc      	adds	r4, r7, r2
   25152:	22de      	movs	r2, #222	; 0xde
   25154:	18ba      	adds	r2, r7, r2
   25156:	7811      	ldrb	r1, [r2, #0]
   25158:	22db      	movs	r2, #219	; 0xdb
   2515a:	18ba      	adds	r2, r7, r2
   2515c:	2000      	movs	r0, #0
   2515e:	5610      	ldrsb	r0, [r2, r0]
   25160:	0022      	movs	r2, r4
   25162:	4798      	blx	r3
	{
   25164:	e02a      	b.n	251bc <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   25166:	1dfb      	adds	r3, r7, #7
   25168:	781b      	ldrb	r3, [r3, #0]
   2516a:	2b52      	cmp	r3, #82	; 0x52
   2516c:	d127      	bne.n	251be <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   2516e:	2350      	movs	r3, #80	; 0x50
   25170:	18f9      	adds	r1, r7, r3
   25172:	6838      	ldr	r0, [r7, #0]
   25174:	2301      	movs	r3, #1
   25176:	2214      	movs	r2, #20
   25178:	4c13      	ldr	r4, [pc, #76]	; (251c8 <m2m_ip_cb+0x53c>)
   2517a:	47a0      	blx	r4
   2517c:	1e03      	subs	r3, r0, #0
   2517e:	d11e      	bne.n	251be <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   25180:	2350      	movs	r3, #80	; 0x50
   25182:	18fb      	adds	r3, r7, r3
   25184:	685b      	ldr	r3, [r3, #4]
   25186:	001a      	movs	r2, r3
   25188:	4b13      	ldr	r3, [pc, #76]	; (251d8 <m2m_ip_cb+0x54c>)
   2518a:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   2518c:	4b12      	ldr	r3, [pc, #72]	; (251d8 <m2m_ip_cb+0x54c>)
   2518e:	681b      	ldr	r3, [r3, #0]
   25190:	2b00      	cmp	r3, #0
   25192:	d014      	beq.n	251be <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   25194:	4b10      	ldr	r3, [pc, #64]	; (251d8 <m2m_ip_cb+0x54c>)
   25196:	681c      	ldr	r4, [r3, #0]
   25198:	2350      	movs	r3, #80	; 0x50
   2519a:	18fb      	adds	r3, r7, r3
   2519c:	6818      	ldr	r0, [r3, #0]
   2519e:	2350      	movs	r3, #80	; 0x50
   251a0:	18fb      	adds	r3, r7, r3
   251a2:	6899      	ldr	r1, [r3, #8]
   251a4:	2350      	movs	r3, #80	; 0x50
   251a6:	18fb      	adds	r3, r7, r3
   251a8:	7c1b      	ldrb	r3, [r3, #16]
   251aa:	001a      	movs	r2, r3
   251ac:	47a0      	blx	r4
}
   251ae:	e006      	b.n	251be <m2m_ip_cb+0x532>
	{
   251b0:	46c0      	nop			; (mov r8, r8)
   251b2:	e004      	b.n	251be <m2m_ip_cb+0x532>
	{
   251b4:	46c0      	nop			; (mov r8, r8)
   251b6:	e002      	b.n	251be <m2m_ip_cb+0x532>
	{
   251b8:	46c0      	nop			; (mov r8, r8)
   251ba:	e000      	b.n	251be <m2m_ip_cb+0x532>
	{
   251bc:	46c0      	nop			; (mov r8, r8)
}
   251be:	46c0      	nop			; (mov r8, r8)
   251c0:	46bd      	mov	sp, r7
   251c2:	b039      	add	sp, #228	; 0xe4
   251c4:	bd90      	pop	{r4, r7, pc}
   251c6:	46c0      	nop			; (mov r8, r8)
   251c8:	00021489 	.word	0x00021489
   251cc:	2000595c 	.word	0x2000595c
   251d0:	00024a91 	.word	0x00024a91
   251d4:	20005a0c 	.word	0x20005a0c
   251d8:	20005a10 	.word	0x20005a10

000251dc <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   251dc:	b580      	push	{r7, lr}
   251de:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   251e0:	4b0c      	ldr	r3, [pc, #48]	; (25214 <socketInit+0x38>)
   251e2:	781b      	ldrb	r3, [r3, #0]
   251e4:	b2db      	uxtb	r3, r3
   251e6:	2b00      	cmp	r3, #0
   251e8:	d110      	bne.n	2520c <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   251ea:	4b0b      	ldr	r3, [pc, #44]	; (25218 <socketInit+0x3c>)
   251ec:	22b0      	movs	r2, #176	; 0xb0
   251ee:	2100      	movs	r1, #0
   251f0:	0018      	movs	r0, r3
   251f2:	4b0a      	ldr	r3, [pc, #40]	; (2521c <socketInit+0x40>)
   251f4:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   251f6:	4b0a      	ldr	r3, [pc, #40]	; (25220 <socketInit+0x44>)
   251f8:	0019      	movs	r1, r3
   251fa:	2002      	movs	r0, #2
   251fc:	4b09      	ldr	r3, [pc, #36]	; (25224 <socketInit+0x48>)
   251fe:	4798      	blx	r3
		gbSocketInit	= 1;
   25200:	4b04      	ldr	r3, [pc, #16]	; (25214 <socketInit+0x38>)
   25202:	2201      	movs	r2, #1
   25204:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   25206:	4b08      	ldr	r3, [pc, #32]	; (25228 <socketInit+0x4c>)
   25208:	2200      	movs	r2, #0
   2520a:	801a      	strh	r2, [r3, #0]
	}
}
   2520c:	46c0      	nop			; (mov r8, r8)
   2520e:	46bd      	mov	sp, r7
   25210:	bd80      	pop	{r7, pc}
   25212:	46c0      	nop			; (mov r8, r8)
   25214:	20004158 	.word	0x20004158
   25218:	2000595c 	.word	0x2000595c
   2521c:	0002090d 	.word	0x0002090d
   25220:	00024c8d 	.word	0x00024c8d
   25224:	00021609 	.word	0x00021609
   25228:	20004156 	.word	0x20004156

0002522c <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   2522c:	b580      	push	{r7, lr}
   2522e:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   25230:	4b0a      	ldr	r3, [pc, #40]	; (2525c <socketDeinit+0x30>)
   25232:	22b0      	movs	r2, #176	; 0xb0
   25234:	2100      	movs	r1, #0
   25236:	0018      	movs	r0, r3
   25238:	4b09      	ldr	r3, [pc, #36]	; (25260 <socketDeinit+0x34>)
   2523a:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   2523c:	2100      	movs	r1, #0
   2523e:	2002      	movs	r0, #2
   25240:	4b08      	ldr	r3, [pc, #32]	; (25264 <socketDeinit+0x38>)
   25242:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   25244:	4b08      	ldr	r3, [pc, #32]	; (25268 <socketDeinit+0x3c>)
   25246:	2200      	movs	r2, #0
   25248:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   2524a:	4b08      	ldr	r3, [pc, #32]	; (2526c <socketDeinit+0x40>)
   2524c:	2200      	movs	r2, #0
   2524e:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   25250:	4b07      	ldr	r3, [pc, #28]	; (25270 <socketDeinit+0x44>)
   25252:	2200      	movs	r2, #0
   25254:	701a      	strb	r2, [r3, #0]
}
   25256:	46c0      	nop			; (mov r8, r8)
   25258:	46bd      	mov	sp, r7
   2525a:	bd80      	pop	{r7, pc}
   2525c:	2000595c 	.word	0x2000595c
   25260:	0002090d 	.word	0x0002090d
   25264:	00021609 	.word	0x00021609
   25268:	20005a0c 	.word	0x20005a0c
   2526c:	20005a14 	.word	0x20005a14
   25270:	20004158 	.word	0x20004158

00025274 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   25274:	b580      	push	{r7, lr}
   25276:	b082      	sub	sp, #8
   25278:	af00      	add	r7, sp, #0
   2527a:	6078      	str	r0, [r7, #4]
   2527c:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   2527e:	4b05      	ldr	r3, [pc, #20]	; (25294 <registerSocketCallback+0x20>)
   25280:	687a      	ldr	r2, [r7, #4]
   25282:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   25284:	4b04      	ldr	r3, [pc, #16]	; (25298 <registerSocketCallback+0x24>)
   25286:	683a      	ldr	r2, [r7, #0]
   25288:	601a      	str	r2, [r3, #0]
}
   2528a:	46c0      	nop			; (mov r8, r8)
   2528c:	46bd      	mov	sp, r7
   2528e:	b002      	add	sp, #8
   25290:	bd80      	pop	{r7, pc}
   25292:	46c0      	nop			; (mov r8, r8)
   25294:	20005a0c 	.word	0x20005a0c
   25298:	20005a14 	.word	0x20005a14

0002529c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   2529c:	b590      	push	{r4, r7, lr}
   2529e:	b08d      	sub	sp, #52	; 0x34
   252a0:	af04      	add	r7, sp, #16
   252a2:	0004      	movs	r4, r0
   252a4:	0008      	movs	r0, r1
   252a6:	0011      	movs	r1, r2
   252a8:	1dbb      	adds	r3, r7, #6
   252aa:	1c22      	adds	r2, r4, #0
   252ac:	801a      	strh	r2, [r3, #0]
   252ae:	1d7b      	adds	r3, r7, #5
   252b0:	1c02      	adds	r2, r0, #0
   252b2:	701a      	strb	r2, [r3, #0]
   252b4:	1d3b      	adds	r3, r7, #4
   252b6:	1c0a      	adds	r2, r1, #0
   252b8:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   252ba:	231f      	movs	r3, #31
   252bc:	18fb      	adds	r3, r7, r3
   252be:	22ff      	movs	r2, #255	; 0xff
   252c0:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   252c2:	1dbb      	adds	r3, r7, #6
   252c4:	881b      	ldrh	r3, [r3, #0]
   252c6:	2b02      	cmp	r3, #2
   252c8:	d000      	beq.n	252cc <socket+0x30>
   252ca:	e0ce      	b.n	2546a <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   252cc:	1d7b      	adds	r3, r7, #5
   252ce:	781b      	ldrb	r3, [r3, #0]
   252d0:	2b01      	cmp	r3, #1
   252d2:	d135      	bne.n	25340 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   252d4:	231e      	movs	r3, #30
   252d6:	18fb      	adds	r3, r7, r3
   252d8:	2200      	movs	r2, #0
   252da:	701a      	strb	r2, [r3, #0]
   252dc:	e02a      	b.n	25334 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   252de:	2317      	movs	r3, #23
   252e0:	18fb      	adds	r3, r7, r3
   252e2:	4a66      	ldr	r2, [pc, #408]	; (2547c <socket+0x1e0>)
   252e4:	7812      	ldrb	r2, [r2, #0]
   252e6:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   252e8:	4b64      	ldr	r3, [pc, #400]	; (2547c <socket+0x1e0>)
   252ea:	781b      	ldrb	r3, [r3, #0]
   252ec:	b2db      	uxtb	r3, r3
   252ee:	011a      	lsls	r2, r3, #4
   252f0:	4b63      	ldr	r3, [pc, #396]	; (25480 <socket+0x1e4>)
   252f2:	18d3      	adds	r3, r2, r3
   252f4:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   252f6:	4b61      	ldr	r3, [pc, #388]	; (2547c <socket+0x1e0>)
   252f8:	781b      	ldrb	r3, [r3, #0]
   252fa:	b2db      	uxtb	r3, r3
   252fc:	1c5a      	adds	r2, r3, #1
   252fe:	4b61      	ldr	r3, [pc, #388]	; (25484 <socket+0x1e8>)
   25300:	2107      	movs	r1, #7
   25302:	0010      	movs	r0, r2
   25304:	4798      	blx	r3
   25306:	000b      	movs	r3, r1
   25308:	b2da      	uxtb	r2, r3
   2530a:	4b5c      	ldr	r3, [pc, #368]	; (2547c <socket+0x1e0>)
   2530c:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   2530e:	69bb      	ldr	r3, [r7, #24]
   25310:	7a9b      	ldrb	r3, [r3, #10]
   25312:	b2db      	uxtb	r3, r3
   25314:	2b00      	cmp	r3, #0
   25316:	d106      	bne.n	25326 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   25318:	231f      	movs	r3, #31
   2531a:	18fb      	adds	r3, r7, r3
   2531c:	2217      	movs	r2, #23
   2531e:	18ba      	adds	r2, r7, r2
   25320:	7812      	ldrb	r2, [r2, #0]
   25322:	701a      	strb	r2, [r3, #0]
					break;
   25324:	e04c      	b.n	253c0 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   25326:	231e      	movs	r3, #30
   25328:	18fb      	adds	r3, r7, r3
   2532a:	781a      	ldrb	r2, [r3, #0]
   2532c:	231e      	movs	r3, #30
   2532e:	18fb      	adds	r3, r7, r3
   25330:	3201      	adds	r2, #1
   25332:	701a      	strb	r2, [r3, #0]
   25334:	231e      	movs	r3, #30
   25336:	18fb      	adds	r3, r7, r3
   25338:	781b      	ldrb	r3, [r3, #0]
   2533a:	2b06      	cmp	r3, #6
   2533c:	d9cf      	bls.n	252de <socket+0x42>
   2533e:	e03f      	b.n	253c0 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   25340:	1d7b      	adds	r3, r7, #5
   25342:	781b      	ldrb	r3, [r3, #0]
   25344:	2b02      	cmp	r3, #2
   25346:	d13b      	bne.n	253c0 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   25348:	4b4f      	ldr	r3, [pc, #316]	; (25488 <socket+0x1ec>)
   2534a:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   2534c:	231e      	movs	r3, #30
   2534e:	18fb      	adds	r3, r7, r3
   25350:	2200      	movs	r2, #0
   25352:	701a      	strb	r2, [r3, #0]
   25354:	e02f      	b.n	253b6 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   25356:	2317      	movs	r3, #23
   25358:	18fb      	adds	r3, r7, r3
   2535a:	4a4c      	ldr	r2, [pc, #304]	; (2548c <socket+0x1f0>)
   2535c:	7812      	ldrb	r2, [r2, #0]
   2535e:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   25360:	4b4a      	ldr	r3, [pc, #296]	; (2548c <socket+0x1f0>)
   25362:	781b      	ldrb	r3, [r3, #0]
   25364:	b2db      	uxtb	r3, r3
   25366:	011b      	lsls	r3, r3, #4
   25368:	693a      	ldr	r2, [r7, #16]
   2536a:	18d3      	adds	r3, r2, r3
   2536c:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   2536e:	4b47      	ldr	r3, [pc, #284]	; (2548c <socket+0x1f0>)
   25370:	781b      	ldrb	r3, [r3, #0]
   25372:	b2db      	uxtb	r3, r3
   25374:	3301      	adds	r3, #1
   25376:	4a46      	ldr	r2, [pc, #280]	; (25490 <socket+0x1f4>)
   25378:	4013      	ands	r3, r2
   2537a:	d504      	bpl.n	25386 <socket+0xea>
   2537c:	3b01      	subs	r3, #1
   2537e:	2204      	movs	r2, #4
   25380:	4252      	negs	r2, r2
   25382:	4313      	orrs	r3, r2
   25384:	3301      	adds	r3, #1
   25386:	b2da      	uxtb	r2, r3
   25388:	4b40      	ldr	r3, [pc, #256]	; (2548c <socket+0x1f0>)
   2538a:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   2538c:	69bb      	ldr	r3, [r7, #24]
   2538e:	7a9b      	ldrb	r3, [r3, #10]
   25390:	b2db      	uxtb	r3, r3
   25392:	2b00      	cmp	r3, #0
   25394:	d108      	bne.n	253a8 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   25396:	2317      	movs	r3, #23
   25398:	18fb      	adds	r3, r7, r3
   2539a:	781b      	ldrb	r3, [r3, #0]
   2539c:	3307      	adds	r3, #7
   2539e:	b2da      	uxtb	r2, r3
   253a0:	231f      	movs	r3, #31
   253a2:	18fb      	adds	r3, r7, r3
   253a4:	701a      	strb	r2, [r3, #0]
					break;
   253a6:	e00b      	b.n	253c0 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   253a8:	231e      	movs	r3, #30
   253aa:	18fb      	adds	r3, r7, r3
   253ac:	781a      	ldrb	r2, [r3, #0]
   253ae:	231e      	movs	r3, #30
   253b0:	18fb      	adds	r3, r7, r3
   253b2:	3201      	adds	r2, #1
   253b4:	701a      	strb	r2, [r3, #0]
   253b6:	231e      	movs	r3, #30
   253b8:	18fb      	adds	r3, r7, r3
   253ba:	781b      	ldrb	r3, [r3, #0]
   253bc:	2b03      	cmp	r3, #3
   253be:	d9ca      	bls.n	25356 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   253c0:	231f      	movs	r3, #31
   253c2:	18fb      	adds	r3, r7, r3
   253c4:	781b      	ldrb	r3, [r3, #0]
   253c6:	2b7f      	cmp	r3, #127	; 0x7f
   253c8:	d84f      	bhi.n	2546a <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   253ca:	69bb      	ldr	r3, [r7, #24]
   253cc:	2210      	movs	r2, #16
   253ce:	2100      	movs	r1, #0
   253d0:	0018      	movs	r0, r3
   253d2:	4b30      	ldr	r3, [pc, #192]	; (25494 <socket+0x1f8>)
   253d4:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   253d6:	69bb      	ldr	r3, [r7, #24]
   253d8:	2201      	movs	r2, #1
   253da:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   253dc:	4b2e      	ldr	r3, [pc, #184]	; (25498 <socket+0x1fc>)
   253de:	881b      	ldrh	r3, [r3, #0]
   253e0:	b29b      	uxth	r3, r3
   253e2:	3301      	adds	r3, #1
   253e4:	b29a      	uxth	r2, r3
   253e6:	4b2c      	ldr	r3, [pc, #176]	; (25498 <socket+0x1fc>)
   253e8:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   253ea:	4b2b      	ldr	r3, [pc, #172]	; (25498 <socket+0x1fc>)
   253ec:	881b      	ldrh	r3, [r3, #0]
   253ee:	b29b      	uxth	r3, r3
   253f0:	2b00      	cmp	r3, #0
   253f2:	d106      	bne.n	25402 <socket+0x166>
				++gu16SessionID;
   253f4:	4b28      	ldr	r3, [pc, #160]	; (25498 <socket+0x1fc>)
   253f6:	881b      	ldrh	r3, [r3, #0]
   253f8:	b29b      	uxth	r3, r3
   253fa:	3301      	adds	r3, #1
   253fc:	b29a      	uxth	r2, r3
   253fe:	4b26      	ldr	r3, [pc, #152]	; (25498 <socket+0x1fc>)
   25400:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   25402:	4b25      	ldr	r3, [pc, #148]	; (25498 <socket+0x1fc>)
   25404:	881b      	ldrh	r3, [r3, #0]
   25406:	b29a      	uxth	r2, r3
   25408:	69bb      	ldr	r3, [r7, #24]
   2540a:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   2540c:	4b23      	ldr	r3, [pc, #140]	; (2549c <socket+0x200>)
   2540e:	0018      	movs	r0, r3
   25410:	4b23      	ldr	r3, [pc, #140]	; (254a0 <socket+0x204>)
   25412:	4798      	blx	r3
   25414:	231f      	movs	r3, #31
   25416:	18fb      	adds	r3, r7, r3
   25418:	2100      	movs	r1, #0
   2541a:	5659      	ldrsb	r1, [r3, r1]
   2541c:	4b1e      	ldr	r3, [pc, #120]	; (25498 <socket+0x1fc>)
   2541e:	881b      	ldrh	r3, [r3, #0]
   25420:	b29b      	uxth	r3, r3
   25422:	001a      	movs	r2, r3
   25424:	4b1f      	ldr	r3, [pc, #124]	; (254a4 <socket+0x208>)
   25426:	0018      	movs	r0, r3
   25428:	4b1d      	ldr	r3, [pc, #116]	; (254a0 <socket+0x204>)
   2542a:	4798      	blx	r3
   2542c:	4b1e      	ldr	r3, [pc, #120]	; (254a8 <socket+0x20c>)
   2542e:	0018      	movs	r0, r3
   25430:	4b1b      	ldr	r3, [pc, #108]	; (254a0 <socket+0x204>)
   25432:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   25434:	1d3b      	adds	r3, r7, #4
   25436:	781b      	ldrb	r3, [r3, #0]
   25438:	2201      	movs	r2, #1
   2543a:	4013      	ands	r3, r2
   2543c:	d015      	beq.n	2546a <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   2543e:	230c      	movs	r3, #12
   25440:	18fb      	adds	r3, r7, r3
   25442:	221f      	movs	r2, #31
   25444:	18ba      	adds	r2, r7, r2
   25446:	7812      	ldrb	r2, [r2, #0]
   25448:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2544a:	69bb      	ldr	r3, [r7, #24]
   2544c:	2221      	movs	r2, #33	; 0x21
   2544e:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   25450:	230c      	movs	r3, #12
   25452:	18fa      	adds	r2, r7, r3
   25454:	2300      	movs	r3, #0
   25456:	9302      	str	r3, [sp, #8]
   25458:	2300      	movs	r3, #0
   2545a:	9301      	str	r3, [sp, #4]
   2545c:	2300      	movs	r3, #0
   2545e:	9300      	str	r3, [sp, #0]
   25460:	2304      	movs	r3, #4
   25462:	2150      	movs	r1, #80	; 0x50
   25464:	2002      	movs	r0, #2
   25466:	4c11      	ldr	r4, [pc, #68]	; (254ac <socket+0x210>)
   25468:	47a0      	blx	r4
			}
		}
	}
	return sock;
   2546a:	231f      	movs	r3, #31
   2546c:	18fb      	adds	r3, r7, r3
   2546e:	781b      	ldrb	r3, [r3, #0]
   25470:	b25b      	sxtb	r3, r3
}
   25472:	0018      	movs	r0, r3
   25474:	46bd      	mov	sp, r7
   25476:	b009      	add	sp, #36	; 0x24
   25478:	bd90      	pop	{r4, r7, pc}
   2547a:	46c0      	nop			; (mov r8, r8)
   2547c:	20004159 	.word	0x20004159
   25480:	2000595c 	.word	0x2000595c
   25484:	000329e5 	.word	0x000329e5
   25488:	200059cc 	.word	0x200059cc
   2548c:	2000415a 	.word	0x2000415a
   25490:	80000003 	.word	0x80000003
   25494:	0002090d 	.word	0x0002090d
   25498:	20004156 	.word	0x20004156
   2549c:	000390d8 	.word	0x000390d8
   254a0:	0001dbd9 	.word	0x0001dbd9
   254a4:	000390fc 	.word	0x000390fc
   254a8:	000390f8 	.word	0x000390f8
   254ac:	00020b6d 	.word	0x00020b6d

000254b0 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   254b0:	b5b0      	push	{r4, r5, r7, lr}
   254b2:	b08a      	sub	sp, #40	; 0x28
   254b4:	af04      	add	r7, sp, #16
   254b6:	6039      	str	r1, [r7, #0]
   254b8:	0011      	movs	r1, r2
   254ba:	1dfb      	adds	r3, r7, #7
   254bc:	1c02      	adds	r2, r0, #0
   254be:	701a      	strb	r2, [r3, #0]
   254c0:	1dbb      	adds	r3, r7, #6
   254c2:	1c0a      	adds	r2, r1, #0
   254c4:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   254c6:	2317      	movs	r3, #23
   254c8:	18fb      	adds	r3, r7, r3
   254ca:	22fa      	movs	r2, #250	; 0xfa
   254cc:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   254ce:	1dfb      	adds	r3, r7, #7
   254d0:	781b      	ldrb	r3, [r3, #0]
   254d2:	2b7f      	cmp	r3, #127	; 0x7f
   254d4:	d867      	bhi.n	255a6 <connect+0xf6>
   254d6:	683b      	ldr	r3, [r7, #0]
   254d8:	2b00      	cmp	r3, #0
   254da:	d064      	beq.n	255a6 <connect+0xf6>
   254dc:	1dfb      	adds	r3, r7, #7
   254de:	781b      	ldrb	r3, [r3, #0]
   254e0:	b25b      	sxtb	r3, r3
   254e2:	4a35      	ldr	r2, [pc, #212]	; (255b8 <connect+0x108>)
   254e4:	011b      	lsls	r3, r3, #4
   254e6:	18d3      	adds	r3, r2, r3
   254e8:	330a      	adds	r3, #10
   254ea:	781b      	ldrb	r3, [r3, #0]
   254ec:	b2db      	uxtb	r3, r3
   254ee:	2b01      	cmp	r3, #1
   254f0:	d159      	bne.n	255a6 <connect+0xf6>
   254f2:	1dbb      	adds	r3, r7, #6
   254f4:	781b      	ldrb	r3, [r3, #0]
   254f6:	2b00      	cmp	r3, #0
   254f8:	d055      	beq.n	255a6 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   254fa:	2316      	movs	r3, #22
   254fc:	18fb      	adds	r3, r7, r3
   254fe:	2244      	movs	r2, #68	; 0x44
   25500:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   25502:	1dfb      	adds	r3, r7, #7
   25504:	781b      	ldrb	r3, [r3, #0]
   25506:	b25b      	sxtb	r3, r3
   25508:	4a2b      	ldr	r2, [pc, #172]	; (255b8 <connect+0x108>)
   2550a:	011b      	lsls	r3, r3, #4
   2550c:	18d3      	adds	r3, r2, r3
   2550e:	330b      	adds	r3, #11
   25510:	781b      	ldrb	r3, [r3, #0]
   25512:	b2db      	uxtb	r3, r3
   25514:	001a      	movs	r2, r3
   25516:	2301      	movs	r3, #1
   25518:	4013      	ands	r3, r2
   2551a:	d00f      	beq.n	2553c <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   2551c:	2316      	movs	r3, #22
   2551e:	18fb      	adds	r3, r7, r3
   25520:	224b      	movs	r2, #75	; 0x4b
   25522:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   25524:	1dfb      	adds	r3, r7, #7
   25526:	781b      	ldrb	r3, [r3, #0]
   25528:	b25b      	sxtb	r3, r3
   2552a:	4a23      	ldr	r2, [pc, #140]	; (255b8 <connect+0x108>)
   2552c:	011b      	lsls	r3, r3, #4
   2552e:	18d3      	adds	r3, r2, r3
   25530:	330b      	adds	r3, #11
   25532:	781b      	ldrb	r3, [r3, #0]
   25534:	b2da      	uxtb	r2, r3
   25536:	2308      	movs	r3, #8
   25538:	18fb      	adds	r3, r7, r3
   2553a:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   2553c:	2308      	movs	r3, #8
   2553e:	18fb      	adds	r3, r7, r3
   25540:	1dfa      	adds	r2, r7, #7
   25542:	7812      	ldrb	r2, [r2, #0]
   25544:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   25546:	6839      	ldr	r1, [r7, #0]
   25548:	2308      	movs	r3, #8
   2554a:	18fb      	adds	r3, r7, r3
   2554c:	2208      	movs	r2, #8
   2554e:	0018      	movs	r0, r3
   25550:	4b1a      	ldr	r3, [pc, #104]	; (255bc <connect+0x10c>)
   25552:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   25554:	1dfb      	adds	r3, r7, #7
   25556:	781b      	ldrb	r3, [r3, #0]
   25558:	b25b      	sxtb	r3, r3
   2555a:	4a17      	ldr	r2, [pc, #92]	; (255b8 <connect+0x108>)
   2555c:	011b      	lsls	r3, r3, #4
   2555e:	18d3      	adds	r3, r2, r3
   25560:	3306      	adds	r3, #6
   25562:	881b      	ldrh	r3, [r3, #0]
   25564:	b29a      	uxth	r2, r3
   25566:	2308      	movs	r3, #8
   25568:	18fb      	adds	r3, r7, r3
   2556a:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   2556c:	2317      	movs	r3, #23
   2556e:	18fc      	adds	r4, r7, r3
   25570:	2308      	movs	r3, #8
   25572:	18fa      	adds	r2, r7, r3
   25574:	2316      	movs	r3, #22
   25576:	18fb      	adds	r3, r7, r3
   25578:	7819      	ldrb	r1, [r3, #0]
   2557a:	2300      	movs	r3, #0
   2557c:	9302      	str	r3, [sp, #8]
   2557e:	2300      	movs	r3, #0
   25580:	9301      	str	r3, [sp, #4]
   25582:	2300      	movs	r3, #0
   25584:	9300      	str	r3, [sp, #0]
   25586:	230c      	movs	r3, #12
   25588:	2002      	movs	r0, #2
   2558a:	4d0d      	ldr	r5, [pc, #52]	; (255c0 <connect+0x110>)
   2558c:	47a8      	blx	r5
   2558e:	0003      	movs	r3, r0
   25590:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25592:	2317      	movs	r3, #23
   25594:	18fb      	adds	r3, r7, r3
   25596:	781b      	ldrb	r3, [r3, #0]
   25598:	b25b      	sxtb	r3, r3
   2559a:	2b00      	cmp	r3, #0
   2559c:	d003      	beq.n	255a6 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   2559e:	2317      	movs	r3, #23
   255a0:	18fb      	adds	r3, r7, r3
   255a2:	22f7      	movs	r2, #247	; 0xf7
   255a4:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   255a6:	2317      	movs	r3, #23
   255a8:	18fb      	adds	r3, r7, r3
   255aa:	781b      	ldrb	r3, [r3, #0]
   255ac:	b25b      	sxtb	r3, r3
}
   255ae:	0018      	movs	r0, r3
   255b0:	46bd      	mov	sp, r7
   255b2:	b006      	add	sp, #24
   255b4:	bdb0      	pop	{r4, r5, r7, pc}
   255b6:	46c0      	nop			; (mov r8, r8)
   255b8:	2000595c 	.word	0x2000595c
   255bc:	000208d1 	.word	0x000208d1
   255c0:	00020b6d 	.word	0x00020b6d

000255c4 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   255c4:	b590      	push	{r4, r7, lr}
   255c6:	b08f      	sub	sp, #60	; 0x3c
   255c8:	af04      	add	r7, sp, #16
   255ca:	0004      	movs	r4, r0
   255cc:	60b9      	str	r1, [r7, #8]
   255ce:	0010      	movs	r0, r2
   255d0:	0019      	movs	r1, r3
   255d2:	230f      	movs	r3, #15
   255d4:	18fb      	adds	r3, r7, r3
   255d6:	1c22      	adds	r2, r4, #0
   255d8:	701a      	strb	r2, [r3, #0]
   255da:	230c      	movs	r3, #12
   255dc:	18fb      	adds	r3, r7, r3
   255de:	1c02      	adds	r2, r0, #0
   255e0:	801a      	strh	r2, [r3, #0]
   255e2:	1dbb      	adds	r3, r7, #6
   255e4:	1c0a      	adds	r2, r1, #0
   255e6:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   255e8:	2326      	movs	r3, #38	; 0x26
   255ea:	18fb      	adds	r3, r7, r3
   255ec:	2206      	movs	r2, #6
   255ee:	4252      	negs	r2, r2
   255f0:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   255f2:	230f      	movs	r3, #15
   255f4:	18fb      	adds	r3, r7, r3
   255f6:	781b      	ldrb	r3, [r3, #0]
   255f8:	2b7f      	cmp	r3, #127	; 0x7f
   255fa:	d900      	bls.n	255fe <send+0x3a>
   255fc:	e087      	b.n	2570e <send+0x14a>
   255fe:	68bb      	ldr	r3, [r7, #8]
   25600:	2b00      	cmp	r3, #0
   25602:	d100      	bne.n	25606 <send+0x42>
   25604:	e083      	b.n	2570e <send+0x14a>
   25606:	230c      	movs	r3, #12
   25608:	18fb      	adds	r3, r7, r3
   2560a:	881a      	ldrh	r2, [r3, #0]
   2560c:	23af      	movs	r3, #175	; 0xaf
   2560e:	00db      	lsls	r3, r3, #3
   25610:	429a      	cmp	r2, r3
   25612:	d900      	bls.n	25616 <send+0x52>
   25614:	e07b      	b.n	2570e <send+0x14a>
   25616:	230f      	movs	r3, #15
   25618:	18fb      	adds	r3, r7, r3
   2561a:	781b      	ldrb	r3, [r3, #0]
   2561c:	b25b      	sxtb	r3, r3
   2561e:	4a40      	ldr	r2, [pc, #256]	; (25720 <send+0x15c>)
   25620:	011b      	lsls	r3, r3, #4
   25622:	18d3      	adds	r3, r2, r3
   25624:	330a      	adds	r3, #10
   25626:	781b      	ldrb	r3, [r3, #0]
   25628:	b2db      	uxtb	r3, r3
   2562a:	2b01      	cmp	r3, #1
   2562c:	d16f      	bne.n	2570e <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   2562e:	2323      	movs	r3, #35	; 0x23
   25630:	18fb      	adds	r3, r7, r3
   25632:	2245      	movs	r2, #69	; 0x45
   25634:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   25636:	2324      	movs	r3, #36	; 0x24
   25638:	18fb      	adds	r3, r7, r3
   2563a:	2250      	movs	r2, #80	; 0x50
   2563c:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   2563e:	2310      	movs	r3, #16
   25640:	18fb      	adds	r3, r7, r3
   25642:	220f      	movs	r2, #15
   25644:	18ba      	adds	r2, r7, r2
   25646:	7812      	ldrb	r2, [r2, #0]
   25648:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   2564a:	2310      	movs	r3, #16
   2564c:	18fb      	adds	r3, r7, r3
   2564e:	220c      	movs	r2, #12
   25650:	18ba      	adds	r2, r7, r2
   25652:	8812      	ldrh	r2, [r2, #0]
   25654:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   25656:	230f      	movs	r3, #15
   25658:	18fb      	adds	r3, r7, r3
   2565a:	781b      	ldrb	r3, [r3, #0]
   2565c:	b25b      	sxtb	r3, r3
   2565e:	4a30      	ldr	r2, [pc, #192]	; (25720 <send+0x15c>)
   25660:	011b      	lsls	r3, r3, #4
   25662:	18d3      	adds	r3, r2, r3
   25664:	3306      	adds	r3, #6
   25666:	881b      	ldrh	r3, [r3, #0]
   25668:	b29a      	uxth	r2, r3
   2566a:	2310      	movs	r3, #16
   2566c:	18fb      	adds	r3, r7, r3
   2566e:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   25670:	230f      	movs	r3, #15
   25672:	18fb      	adds	r3, r7, r3
   25674:	781b      	ldrb	r3, [r3, #0]
   25676:	b25b      	sxtb	r3, r3
   25678:	2b06      	cmp	r3, #6
   2567a:	dd03      	ble.n	25684 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   2567c:	2324      	movs	r3, #36	; 0x24
   2567e:	18fb      	adds	r3, r7, r3
   25680:	2244      	movs	r2, #68	; 0x44
   25682:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25684:	230f      	movs	r3, #15
   25686:	18fb      	adds	r3, r7, r3
   25688:	781b      	ldrb	r3, [r3, #0]
   2568a:	b25b      	sxtb	r3, r3
   2568c:	4a24      	ldr	r2, [pc, #144]	; (25720 <send+0x15c>)
   2568e:	011b      	lsls	r3, r3, #4
   25690:	18d3      	adds	r3, r2, r3
   25692:	330b      	adds	r3, #11
   25694:	781b      	ldrb	r3, [r3, #0]
   25696:	b2db      	uxtb	r3, r3
   25698:	001a      	movs	r2, r3
   2569a:	2301      	movs	r3, #1
   2569c:	4013      	ands	r3, r2
   2569e:	d00f      	beq.n	256c0 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   256a0:	2323      	movs	r3, #35	; 0x23
   256a2:	18fb      	adds	r3, r7, r3
   256a4:	224c      	movs	r2, #76	; 0x4c
   256a6:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   256a8:	230f      	movs	r3, #15
   256aa:	18fb      	adds	r3, r7, r3
   256ac:	2200      	movs	r2, #0
   256ae:	569a      	ldrsb	r2, [r3, r2]
   256b0:	2324      	movs	r3, #36	; 0x24
   256b2:	18fb      	adds	r3, r7, r3
   256b4:	491a      	ldr	r1, [pc, #104]	; (25720 <send+0x15c>)
   256b6:	0112      	lsls	r2, r2, #4
   256b8:	188a      	adds	r2, r1, r2
   256ba:	3208      	adds	r2, #8
   256bc:	8812      	ldrh	r2, [r2, #0]
   256be:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   256c0:	2323      	movs	r3, #35	; 0x23
   256c2:	18fb      	adds	r3, r7, r3
   256c4:	781b      	ldrb	r3, [r3, #0]
   256c6:	2280      	movs	r2, #128	; 0x80
   256c8:	4252      	negs	r2, r2
   256ca:	4313      	orrs	r3, r2
   256cc:	b2d9      	uxtb	r1, r3
   256ce:	2310      	movs	r3, #16
   256d0:	18fa      	adds	r2, r7, r3
   256d2:	2324      	movs	r3, #36	; 0x24
   256d4:	18fb      	adds	r3, r7, r3
   256d6:	881b      	ldrh	r3, [r3, #0]
   256d8:	9302      	str	r3, [sp, #8]
   256da:	230c      	movs	r3, #12
   256dc:	18fb      	adds	r3, r7, r3
   256de:	881b      	ldrh	r3, [r3, #0]
   256e0:	9301      	str	r3, [sp, #4]
   256e2:	68bb      	ldr	r3, [r7, #8]
   256e4:	9300      	str	r3, [sp, #0]
   256e6:	2310      	movs	r3, #16
   256e8:	2002      	movs	r0, #2
   256ea:	4c0e      	ldr	r4, [pc, #56]	; (25724 <send+0x160>)
   256ec:	47a0      	blx	r4
   256ee:	0003      	movs	r3, r0
   256f0:	001a      	movs	r2, r3
   256f2:	2326      	movs	r3, #38	; 0x26
   256f4:	18fb      	adds	r3, r7, r3
   256f6:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   256f8:	2326      	movs	r3, #38	; 0x26
   256fa:	18fb      	adds	r3, r7, r3
   256fc:	2200      	movs	r2, #0
   256fe:	5e9b      	ldrsh	r3, [r3, r2]
   25700:	2b00      	cmp	r3, #0
   25702:	d004      	beq.n	2570e <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   25704:	2326      	movs	r3, #38	; 0x26
   25706:	18fb      	adds	r3, r7, r3
   25708:	220e      	movs	r2, #14
   2570a:	4252      	negs	r2, r2
   2570c:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   2570e:	2326      	movs	r3, #38	; 0x26
   25710:	18fb      	adds	r3, r7, r3
   25712:	2200      	movs	r2, #0
   25714:	5e9b      	ldrsh	r3, [r3, r2]
}
   25716:	0018      	movs	r0, r3
   25718:	46bd      	mov	sp, r7
   2571a:	b00b      	add	sp, #44	; 0x2c
   2571c:	bd90      	pop	{r4, r7, pc}
   2571e:	46c0      	nop			; (mov r8, r8)
   25720:	2000595c 	.word	0x2000595c
   25724:	00020b6d 	.word	0x00020b6d

00025728 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   25728:	b590      	push	{r4, r7, lr}
   2572a:	b08d      	sub	sp, #52	; 0x34
   2572c:	af04      	add	r7, sp, #16
   2572e:	60b9      	str	r1, [r7, #8]
   25730:	0011      	movs	r1, r2
   25732:	607b      	str	r3, [r7, #4]
   25734:	230f      	movs	r3, #15
   25736:	18fb      	adds	r3, r7, r3
   25738:	1c02      	adds	r2, r0, #0
   2573a:	701a      	strb	r2, [r3, #0]
   2573c:	230c      	movs	r3, #12
   2573e:	18fb      	adds	r3, r7, r3
   25740:	1c0a      	adds	r2, r1, #0
   25742:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25744:	231e      	movs	r3, #30
   25746:	18fb      	adds	r3, r7, r3
   25748:	2206      	movs	r2, #6
   2574a:	4252      	negs	r2, r2
   2574c:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   2574e:	230f      	movs	r3, #15
   25750:	18fb      	adds	r3, r7, r3
   25752:	781b      	ldrb	r3, [r3, #0]
   25754:	2b7f      	cmp	r3, #127	; 0x7f
   25756:	d900      	bls.n	2575a <recv+0x32>
   25758:	e099      	b.n	2588e <recv+0x166>
   2575a:	68bb      	ldr	r3, [r7, #8]
   2575c:	2b00      	cmp	r3, #0
   2575e:	d100      	bne.n	25762 <recv+0x3a>
   25760:	e095      	b.n	2588e <recv+0x166>
   25762:	230c      	movs	r3, #12
   25764:	18fb      	adds	r3, r7, r3
   25766:	881b      	ldrh	r3, [r3, #0]
   25768:	2b00      	cmp	r3, #0
   2576a:	d100      	bne.n	2576e <recv+0x46>
   2576c:	e08f      	b.n	2588e <recv+0x166>
   2576e:	230f      	movs	r3, #15
   25770:	18fb      	adds	r3, r7, r3
   25772:	781b      	ldrb	r3, [r3, #0]
   25774:	b25b      	sxtb	r3, r3
   25776:	4a4a      	ldr	r2, [pc, #296]	; (258a0 <recv+0x178>)
   25778:	011b      	lsls	r3, r3, #4
   2577a:	18d3      	adds	r3, r2, r3
   2577c:	330a      	adds	r3, #10
   2577e:	781b      	ldrb	r3, [r3, #0]
   25780:	b2db      	uxtb	r3, r3
   25782:	2b01      	cmp	r3, #1
   25784:	d000      	beq.n	25788 <recv+0x60>
   25786:	e082      	b.n	2588e <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   25788:	231e      	movs	r3, #30
   2578a:	18fb      	adds	r3, r7, r3
   2578c:	2200      	movs	r2, #0
   2578e:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   25790:	230f      	movs	r3, #15
   25792:	18fb      	adds	r3, r7, r3
   25794:	2200      	movs	r2, #0
   25796:	569a      	ldrsb	r2, [r3, r2]
   25798:	4b41      	ldr	r3, [pc, #260]	; (258a0 <recv+0x178>)
   2579a:	0112      	lsls	r2, r2, #4
   2579c:	68b9      	ldr	r1, [r7, #8]
   2579e:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   257a0:	230f      	movs	r3, #15
   257a2:	18fb      	adds	r3, r7, r3
   257a4:	781b      	ldrb	r3, [r3, #0]
   257a6:	b25b      	sxtb	r3, r3
   257a8:	4a3d      	ldr	r2, [pc, #244]	; (258a0 <recv+0x178>)
   257aa:	011b      	lsls	r3, r3, #4
   257ac:	18d3      	adds	r3, r2, r3
   257ae:	3304      	adds	r3, #4
   257b0:	220c      	movs	r2, #12
   257b2:	18ba      	adds	r2, r7, r2
   257b4:	8812      	ldrh	r2, [r2, #0]
   257b6:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   257b8:	230f      	movs	r3, #15
   257ba:	18fb      	adds	r3, r7, r3
   257bc:	781b      	ldrb	r3, [r3, #0]
   257be:	b25b      	sxtb	r3, r3
   257c0:	4a37      	ldr	r2, [pc, #220]	; (258a0 <recv+0x178>)
   257c2:	011b      	lsls	r3, r3, #4
   257c4:	18d3      	adds	r3, r2, r3
   257c6:	330c      	adds	r3, #12
   257c8:	781b      	ldrb	r3, [r3, #0]
   257ca:	b2db      	uxtb	r3, r3
   257cc:	2b00      	cmp	r3, #0
   257ce:	d15e      	bne.n	2588e <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   257d0:	231d      	movs	r3, #29
   257d2:	18fb      	adds	r3, r7, r3
   257d4:	2246      	movs	r2, #70	; 0x46
   257d6:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   257d8:	230f      	movs	r3, #15
   257da:	18fb      	adds	r3, r7, r3
   257dc:	781b      	ldrb	r3, [r3, #0]
   257de:	b25b      	sxtb	r3, r3
   257e0:	4a2f      	ldr	r2, [pc, #188]	; (258a0 <recv+0x178>)
   257e2:	011b      	lsls	r3, r3, #4
   257e4:	18d3      	adds	r3, r2, r3
   257e6:	330c      	adds	r3, #12
   257e8:	2201      	movs	r2, #1
   257ea:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   257ec:	230f      	movs	r3, #15
   257ee:	18fb      	adds	r3, r7, r3
   257f0:	781b      	ldrb	r3, [r3, #0]
   257f2:	b25b      	sxtb	r3, r3
   257f4:	4a2a      	ldr	r2, [pc, #168]	; (258a0 <recv+0x178>)
   257f6:	011b      	lsls	r3, r3, #4
   257f8:	18d3      	adds	r3, r2, r3
   257fa:	330b      	adds	r3, #11
   257fc:	781b      	ldrb	r3, [r3, #0]
   257fe:	b2db      	uxtb	r3, r3
   25800:	001a      	movs	r2, r3
   25802:	2301      	movs	r3, #1
   25804:	4013      	ands	r3, r2
   25806:	d003      	beq.n	25810 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   25808:	231d      	movs	r3, #29
   2580a:	18fb      	adds	r3, r7, r3
   2580c:	224d      	movs	r2, #77	; 0x4d
   2580e:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   25810:	687b      	ldr	r3, [r7, #4]
   25812:	2b00      	cmp	r3, #0
   25814:	d105      	bne.n	25822 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   25816:	2314      	movs	r3, #20
   25818:	18fb      	adds	r3, r7, r3
   2581a:	2201      	movs	r2, #1
   2581c:	4252      	negs	r2, r2
   2581e:	601a      	str	r2, [r3, #0]
   25820:	e003      	b.n	2582a <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   25822:	2314      	movs	r3, #20
   25824:	18fb      	adds	r3, r7, r3
   25826:	687a      	ldr	r2, [r7, #4]
   25828:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   2582a:	2314      	movs	r3, #20
   2582c:	18fb      	adds	r3, r7, r3
   2582e:	220f      	movs	r2, #15
   25830:	18ba      	adds	r2, r7, r2
   25832:	7812      	ldrb	r2, [r2, #0]
   25834:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   25836:	230f      	movs	r3, #15
   25838:	18fb      	adds	r3, r7, r3
   2583a:	781b      	ldrb	r3, [r3, #0]
   2583c:	b25b      	sxtb	r3, r3
   2583e:	4a18      	ldr	r2, [pc, #96]	; (258a0 <recv+0x178>)
   25840:	011b      	lsls	r3, r3, #4
   25842:	18d3      	adds	r3, r2, r3
   25844:	3306      	adds	r3, #6
   25846:	881b      	ldrh	r3, [r3, #0]
   25848:	b29a      	uxth	r2, r3
   2584a:	2314      	movs	r3, #20
   2584c:	18fb      	adds	r3, r7, r3
   2584e:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   25850:	2314      	movs	r3, #20
   25852:	18fa      	adds	r2, r7, r3
   25854:	231d      	movs	r3, #29
   25856:	18fb      	adds	r3, r7, r3
   25858:	7819      	ldrb	r1, [r3, #0]
   2585a:	2300      	movs	r3, #0
   2585c:	9302      	str	r3, [sp, #8]
   2585e:	2300      	movs	r3, #0
   25860:	9301      	str	r3, [sp, #4]
   25862:	2300      	movs	r3, #0
   25864:	9300      	str	r3, [sp, #0]
   25866:	2308      	movs	r3, #8
   25868:	2002      	movs	r0, #2
   2586a:	4c0e      	ldr	r4, [pc, #56]	; (258a4 <recv+0x17c>)
   2586c:	47a0      	blx	r4
   2586e:	0003      	movs	r3, r0
   25870:	001a      	movs	r2, r3
   25872:	231e      	movs	r3, #30
   25874:	18fb      	adds	r3, r7, r3
   25876:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   25878:	231e      	movs	r3, #30
   2587a:	18fb      	adds	r3, r7, r3
   2587c:	2200      	movs	r2, #0
   2587e:	5e9b      	ldrsh	r3, [r3, r2]
   25880:	2b00      	cmp	r3, #0
   25882:	d004      	beq.n	2588e <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   25884:	231e      	movs	r3, #30
   25886:	18fb      	adds	r3, r7, r3
   25888:	220e      	movs	r2, #14
   2588a:	4252      	negs	r2, r2
   2588c:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   2588e:	231e      	movs	r3, #30
   25890:	18fb      	adds	r3, r7, r3
   25892:	2200      	movs	r2, #0
   25894:	5e9b      	ldrsh	r3, [r3, r2]
}
   25896:	0018      	movs	r0, r3
   25898:	46bd      	mov	sp, r7
   2589a:	b009      	add	sp, #36	; 0x24
   2589c:	bd90      	pop	{r4, r7, pc}
   2589e:	46c0      	nop			; (mov r8, r8)
   258a0:	2000595c 	.word	0x2000595c
   258a4:	00020b6d 	.word	0x00020b6d

000258a8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   258a8:	b5b0      	push	{r4, r5, r7, lr}
   258aa:	b088      	sub	sp, #32
   258ac:	af04      	add	r7, sp, #16
   258ae:	0002      	movs	r2, r0
   258b0:	1dfb      	adds	r3, r7, #7
   258b2:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   258b4:	230f      	movs	r3, #15
   258b6:	18fb      	adds	r3, r7, r3
   258b8:	22fa      	movs	r2, #250	; 0xfa
   258ba:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   258bc:	4b43      	ldr	r3, [pc, #268]	; (259cc <close+0x124>)
   258be:	0018      	movs	r0, r3
   258c0:	4b43      	ldr	r3, [pc, #268]	; (259d0 <close+0x128>)
   258c2:	4798      	blx	r3
   258c4:	1dfb      	adds	r3, r7, #7
   258c6:	2200      	movs	r2, #0
   258c8:	569a      	ldrsb	r2, [r3, r2]
   258ca:	4b42      	ldr	r3, [pc, #264]	; (259d4 <close+0x12c>)
   258cc:	0011      	movs	r1, r2
   258ce:	0018      	movs	r0, r3
   258d0:	4b3f      	ldr	r3, [pc, #252]	; (259d0 <close+0x128>)
   258d2:	4798      	blx	r3
   258d4:	4b40      	ldr	r3, [pc, #256]	; (259d8 <close+0x130>)
   258d6:	0018      	movs	r0, r3
   258d8:	4b3d      	ldr	r3, [pc, #244]	; (259d0 <close+0x128>)
   258da:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   258dc:	1dfb      	adds	r3, r7, #7
   258de:	781b      	ldrb	r3, [r3, #0]
   258e0:	2b7f      	cmp	r3, #127	; 0x7f
   258e2:	d86a      	bhi.n	259ba <close+0x112>
   258e4:	1dfb      	adds	r3, r7, #7
   258e6:	781b      	ldrb	r3, [r3, #0]
   258e8:	b25b      	sxtb	r3, r3
   258ea:	4a3c      	ldr	r2, [pc, #240]	; (259dc <close+0x134>)
   258ec:	011b      	lsls	r3, r3, #4
   258ee:	18d3      	adds	r3, r2, r3
   258f0:	330a      	adds	r3, #10
   258f2:	781b      	ldrb	r3, [r3, #0]
   258f4:	b2db      	uxtb	r3, r3
   258f6:	2b01      	cmp	r3, #1
   258f8:	d15f      	bne.n	259ba <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   258fa:	230e      	movs	r3, #14
   258fc:	18fb      	adds	r3, r7, r3
   258fe:	2249      	movs	r2, #73	; 0x49
   25900:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   25902:	2308      	movs	r3, #8
   25904:	18fb      	adds	r3, r7, r3
   25906:	1dfa      	adds	r2, r7, #7
   25908:	7812      	ldrb	r2, [r2, #0]
   2590a:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   2590c:	1dfb      	adds	r3, r7, #7
   2590e:	781b      	ldrb	r3, [r3, #0]
   25910:	b25b      	sxtb	r3, r3
   25912:	4a32      	ldr	r2, [pc, #200]	; (259dc <close+0x134>)
   25914:	011b      	lsls	r3, r3, #4
   25916:	18d3      	adds	r3, r2, r3
   25918:	3306      	adds	r3, #6
   2591a:	881b      	ldrh	r3, [r3, #0]
   2591c:	b29a      	uxth	r2, r3
   2591e:	2308      	movs	r3, #8
   25920:	18fb      	adds	r3, r7, r3
   25922:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   25924:	1dfb      	adds	r3, r7, #7
   25926:	781b      	ldrb	r3, [r3, #0]
   25928:	b25b      	sxtb	r3, r3
   2592a:	4a2c      	ldr	r2, [pc, #176]	; (259dc <close+0x134>)
   2592c:	011b      	lsls	r3, r3, #4
   2592e:	18d3      	adds	r3, r2, r3
   25930:	330a      	adds	r3, #10
   25932:	2200      	movs	r2, #0
   25934:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   25936:	1dfb      	adds	r3, r7, #7
   25938:	781b      	ldrb	r3, [r3, #0]
   2593a:	b25b      	sxtb	r3, r3
   2593c:	4a27      	ldr	r2, [pc, #156]	; (259dc <close+0x134>)
   2593e:	011b      	lsls	r3, r3, #4
   25940:	18d3      	adds	r3, r2, r3
   25942:	3306      	adds	r3, #6
   25944:	2200      	movs	r2, #0
   25946:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25948:	1dfb      	adds	r3, r7, #7
   2594a:	781b      	ldrb	r3, [r3, #0]
   2594c:	b25b      	sxtb	r3, r3
   2594e:	4a23      	ldr	r2, [pc, #140]	; (259dc <close+0x134>)
   25950:	011b      	lsls	r3, r3, #4
   25952:	18d3      	adds	r3, r2, r3
   25954:	330b      	adds	r3, #11
   25956:	781b      	ldrb	r3, [r3, #0]
   25958:	b2db      	uxtb	r3, r3
   2595a:	001a      	movs	r2, r3
   2595c:	2301      	movs	r3, #1
   2595e:	4013      	ands	r3, r2
   25960:	d003      	beq.n	2596a <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   25962:	230e      	movs	r3, #14
   25964:	18fb      	adds	r3, r7, r3
   25966:	224e      	movs	r2, #78	; 0x4e
   25968:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   2596a:	230f      	movs	r3, #15
   2596c:	18fc      	adds	r4, r7, r3
   2596e:	2308      	movs	r3, #8
   25970:	18fa      	adds	r2, r7, r3
   25972:	230e      	movs	r3, #14
   25974:	18fb      	adds	r3, r7, r3
   25976:	7819      	ldrb	r1, [r3, #0]
   25978:	2300      	movs	r3, #0
   2597a:	9302      	str	r3, [sp, #8]
   2597c:	2300      	movs	r3, #0
   2597e:	9301      	str	r3, [sp, #4]
   25980:	2300      	movs	r3, #0
   25982:	9300      	str	r3, [sp, #0]
   25984:	2304      	movs	r3, #4
   25986:	2002      	movs	r0, #2
   25988:	4d15      	ldr	r5, [pc, #84]	; (259e0 <close+0x138>)
   2598a:	47a8      	blx	r5
   2598c:	0003      	movs	r3, r0
   2598e:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25990:	230f      	movs	r3, #15
   25992:	18fb      	adds	r3, r7, r3
   25994:	781b      	ldrb	r3, [r3, #0]
   25996:	b25b      	sxtb	r3, r3
   25998:	2b00      	cmp	r3, #0
   2599a:	d003      	beq.n	259a4 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   2599c:	230f      	movs	r3, #15
   2599e:	18fb      	adds	r3, r7, r3
   259a0:	22f7      	movs	r2, #247	; 0xf7
   259a2:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   259a4:	1dfb      	adds	r3, r7, #7
   259a6:	781b      	ldrb	r3, [r3, #0]
   259a8:	b25b      	sxtb	r3, r3
   259aa:	011a      	lsls	r2, r3, #4
   259ac:	4b0b      	ldr	r3, [pc, #44]	; (259dc <close+0x134>)
   259ae:	18d3      	adds	r3, r2, r3
   259b0:	2210      	movs	r2, #16
   259b2:	2100      	movs	r1, #0
   259b4:	0018      	movs	r0, r3
   259b6:	4b0b      	ldr	r3, [pc, #44]	; (259e4 <close+0x13c>)
   259b8:	4798      	blx	r3
	}
	return s8Ret;
   259ba:	230f      	movs	r3, #15
   259bc:	18fb      	adds	r3, r7, r3
   259be:	781b      	ldrb	r3, [r3, #0]
   259c0:	b25b      	sxtb	r3, r3
}
   259c2:	0018      	movs	r0, r3
   259c4:	46bd      	mov	sp, r7
   259c6:	b004      	add	sp, #16
   259c8:	bdb0      	pop	{r4, r5, r7, pc}
   259ca:	46c0      	nop			; (mov r8, r8)
   259cc:	000390d8 	.word	0x000390d8
   259d0:	0001dbd9 	.word	0x0001dbd9
   259d4:	00039118 	.word	0x00039118
   259d8:	000390f8 	.word	0x000390f8
   259dc:	2000595c 	.word	0x2000595c
   259e0:	00020b6d 	.word	0x00020b6d
   259e4:	0002090d 	.word	0x0002090d

000259e8 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   259e8:	b580      	push	{r7, lr}
   259ea:	b086      	sub	sp, #24
   259ec:	af00      	add	r7, sp, #0
   259ee:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   259f0:	2300      	movs	r3, #0
   259f2:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   259f4:	2317      	movs	r3, #23
   259f6:	18fb      	adds	r3, r7, r3
   259f8:	2200      	movs	r2, #0
   259fa:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   259fc:	2316      	movs	r3, #22
   259fe:	18fb      	adds	r3, r7, r3
   25a00:	2200      	movs	r2, #0
   25a02:	701a      	strb	r2, [r3, #0]
   25a04:	e060      	b.n	25ac8 <nmi_inet_addr+0xe0>
	{
		j = 0;
   25a06:	2315      	movs	r3, #21
   25a08:	18fb      	adds	r3, r7, r3
   25a0a:	2200      	movs	r2, #0
   25a0c:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   25a0e:	2314      	movs	r3, #20
   25a10:	18fb      	adds	r3, r7, r3
   25a12:	687a      	ldr	r2, [r7, #4]
   25a14:	7812      	ldrb	r2, [r2, #0]
   25a16:	701a      	strb	r2, [r3, #0]
			++j;
   25a18:	2315      	movs	r3, #21
   25a1a:	18fb      	adds	r3, r7, r3
   25a1c:	2215      	movs	r2, #21
   25a1e:	18ba      	adds	r2, r7, r2
   25a20:	7812      	ldrb	r2, [r2, #0]
   25a22:	3201      	adds	r2, #1
   25a24:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   25a26:	2315      	movs	r3, #21
   25a28:	18fb      	adds	r3, r7, r3
   25a2a:	781b      	ldrb	r3, [r3, #0]
   25a2c:	2b04      	cmp	r3, #4
   25a2e:	d901      	bls.n	25a34 <nmi_inet_addr+0x4c>
			{
				return 0;
   25a30:	2300      	movs	r3, #0
   25a32:	e057      	b.n	25ae4 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   25a34:	2314      	movs	r3, #20
   25a36:	18fb      	adds	r3, r7, r3
   25a38:	781b      	ldrb	r3, [r3, #0]
   25a3a:	2b2e      	cmp	r3, #46	; 0x2e
   25a3c:	d004      	beq.n	25a48 <nmi_inet_addr+0x60>
   25a3e:	2314      	movs	r3, #20
   25a40:	18fb      	adds	r3, r7, r3
   25a42:	781b      	ldrb	r3, [r3, #0]
   25a44:	2b00      	cmp	r3, #0
   25a46:	d10d      	bne.n	25a64 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   25a48:	2316      	movs	r3, #22
   25a4a:	18fb      	adds	r3, r7, r3
   25a4c:	781b      	ldrb	r3, [r3, #0]
   25a4e:	220c      	movs	r2, #12
   25a50:	18ba      	adds	r2, r7, r2
   25a52:	2117      	movs	r1, #23
   25a54:	1879      	adds	r1, r7, r1
   25a56:	7809      	ldrb	r1, [r1, #0]
   25a58:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   25a5a:	2317      	movs	r3, #23
   25a5c:	18fb      	adds	r3, r7, r3
   25a5e:	2200      	movs	r2, #0
   25a60:	701a      	strb	r2, [r3, #0]
   25a62:	e01d      	b.n	25aa0 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   25a64:	2314      	movs	r3, #20
   25a66:	18fb      	adds	r3, r7, r3
   25a68:	781b      	ldrb	r3, [r3, #0]
   25a6a:	2b2f      	cmp	r3, #47	; 0x2f
   25a6c:	d916      	bls.n	25a9c <nmi_inet_addr+0xb4>
   25a6e:	2314      	movs	r3, #20
   25a70:	18fb      	adds	r3, r7, r3
   25a72:	781b      	ldrb	r3, [r3, #0]
   25a74:	2b39      	cmp	r3, #57	; 0x39
   25a76:	d811      	bhi.n	25a9c <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   25a78:	2317      	movs	r3, #23
   25a7a:	18fb      	adds	r3, r7, r3
   25a7c:	781b      	ldrb	r3, [r3, #0]
   25a7e:	1c1a      	adds	r2, r3, #0
   25a80:	0092      	lsls	r2, r2, #2
   25a82:	18d3      	adds	r3, r2, r3
   25a84:	18db      	adds	r3, r3, r3
   25a86:	b2da      	uxtb	r2, r3
   25a88:	2314      	movs	r3, #20
   25a8a:	18fb      	adds	r3, r7, r3
   25a8c:	781b      	ldrb	r3, [r3, #0]
   25a8e:	18d3      	adds	r3, r2, r3
   25a90:	b2da      	uxtb	r2, r3
   25a92:	2317      	movs	r3, #23
   25a94:	18fb      	adds	r3, r7, r3
   25a96:	3a30      	subs	r2, #48	; 0x30
   25a98:	701a      	strb	r2, [r3, #0]
   25a9a:	e001      	b.n	25aa0 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   25a9c:	2300      	movs	r3, #0
   25a9e:	e021      	b.n	25ae4 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   25aa0:	687b      	ldr	r3, [r7, #4]
   25aa2:	3301      	adds	r3, #1
   25aa4:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   25aa6:	2314      	movs	r3, #20
   25aa8:	18fb      	adds	r3, r7, r3
   25aaa:	781b      	ldrb	r3, [r3, #0]
   25aac:	2b2e      	cmp	r3, #46	; 0x2e
   25aae:	d004      	beq.n	25aba <nmi_inet_addr+0xd2>
   25ab0:	2314      	movs	r3, #20
   25ab2:	18fb      	adds	r3, r7, r3
   25ab4:	781b      	ldrb	r3, [r3, #0]
   25ab6:	2b00      	cmp	r3, #0
   25ab8:	d1a9      	bne.n	25a0e <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   25aba:	2316      	movs	r3, #22
   25abc:	18fb      	adds	r3, r7, r3
   25abe:	2216      	movs	r2, #22
   25ac0:	18ba      	adds	r2, r7, r2
   25ac2:	7812      	ldrb	r2, [r2, #0]
   25ac4:	3201      	adds	r2, #1
   25ac6:	701a      	strb	r2, [r3, #0]
   25ac8:	2316      	movs	r3, #22
   25aca:	18fb      	adds	r3, r7, r3
   25acc:	781b      	ldrb	r3, [r3, #0]
   25ace:	2b03      	cmp	r3, #3
   25ad0:	d999      	bls.n	25a06 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   25ad2:	230c      	movs	r3, #12
   25ad4:	18f9      	adds	r1, r7, r3
   25ad6:	2310      	movs	r3, #16
   25ad8:	18fb      	adds	r3, r7, r3
   25ada:	2204      	movs	r2, #4
   25adc:	0018      	movs	r0, r3
   25ade:	4b03      	ldr	r3, [pc, #12]	; (25aec <nmi_inet_addr+0x104>)
   25ae0:	4798      	blx	r3
	return u32IP;
   25ae2:	693b      	ldr	r3, [r7, #16]
}
   25ae4:	0018      	movs	r0, r3
   25ae6:	46bd      	mov	sp, r7
   25ae8:	b006      	add	sp, #24
   25aea:	bd80      	pop	{r7, pc}
   25aec:	000208d1 	.word	0x000208d1

00025af0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   25af0:	b5b0      	push	{r4, r5, r7, lr}
   25af2:	b088      	sub	sp, #32
   25af4:	af04      	add	r7, sp, #16
   25af6:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   25af8:	230f      	movs	r3, #15
   25afa:	18fb      	adds	r3, r7, r3
   25afc:	22fa      	movs	r2, #250	; 0xfa
   25afe:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   25b00:	687b      	ldr	r3, [r7, #4]
   25b02:	0018      	movs	r0, r3
   25b04:	4b14      	ldr	r3, [pc, #80]	; (25b58 <gethostbyname+0x68>)
   25b06:	4798      	blx	r3
   25b08:	0003      	movs	r3, r0
   25b0a:	001a      	movs	r2, r3
   25b0c:	230e      	movs	r3, #14
   25b0e:	18fb      	adds	r3, r7, r3
   25b10:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   25b12:	230e      	movs	r3, #14
   25b14:	18fb      	adds	r3, r7, r3
   25b16:	781b      	ldrb	r3, [r3, #0]
   25b18:	2b40      	cmp	r3, #64	; 0x40
   25b1a:	d815      	bhi.n	25b48 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   25b1c:	230e      	movs	r3, #14
   25b1e:	18fb      	adds	r3, r7, r3
   25b20:	781b      	ldrb	r3, [r3, #0]
   25b22:	b29b      	uxth	r3, r3
   25b24:	3301      	adds	r3, #1
   25b26:	b299      	uxth	r1, r3
   25b28:	230f      	movs	r3, #15
   25b2a:	18fc      	adds	r4, r7, r3
   25b2c:	687a      	ldr	r2, [r7, #4]
   25b2e:	2300      	movs	r3, #0
   25b30:	9302      	str	r3, [sp, #8]
   25b32:	2300      	movs	r3, #0
   25b34:	9301      	str	r3, [sp, #4]
   25b36:	2300      	movs	r3, #0
   25b38:	9300      	str	r3, [sp, #0]
   25b3a:	000b      	movs	r3, r1
   25b3c:	214a      	movs	r1, #74	; 0x4a
   25b3e:	2002      	movs	r0, #2
   25b40:	4d06      	ldr	r5, [pc, #24]	; (25b5c <gethostbyname+0x6c>)
   25b42:	47a8      	blx	r5
   25b44:	0003      	movs	r3, r0
   25b46:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   25b48:	230f      	movs	r3, #15
   25b4a:	18fb      	adds	r3, r7, r3
   25b4c:	781b      	ldrb	r3, [r3, #0]
   25b4e:	b25b      	sxtb	r3, r3
}
   25b50:	0018      	movs	r0, r3
   25b52:	46bd      	mov	sp, r7
   25b54:	b004      	add	sp, #16
   25b56:	bdb0      	pop	{r4, r5, r7, pc}
   25b58:	0002094b 	.word	0x0002094b
   25b5c:	00020b6d 	.word	0x00020b6d

00025b60 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   25b60:	b580      	push	{r7, lr}
   25b62:	b082      	sub	sp, #8
   25b64:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   25b66:	003b      	movs	r3, r7
   25b68:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   25b6a:	687b      	ldr	r3, [r7, #4]
   25b6c:	22b9      	movs	r2, #185	; 0xb9
   25b6e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25b70:	4b13      	ldr	r3, [pc, #76]	; (25bc0 <spi_flash_enter_low_power_mode+0x60>)
   25b72:	2100      	movs	r1, #0
   25b74:	0018      	movs	r0, r3
   25b76:	4b13      	ldr	r3, [pc, #76]	; (25bc4 <spi_flash_enter_low_power_mode+0x64>)
   25b78:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   25b7a:	687b      	ldr	r3, [r7, #4]
   25b7c:	781b      	ldrb	r3, [r3, #0]
   25b7e:	001a      	movs	r2, r3
   25b80:	4b11      	ldr	r3, [pc, #68]	; (25bc8 <spi_flash_enter_low_power_mode+0x68>)
   25b82:	0011      	movs	r1, r2
   25b84:	0018      	movs	r0, r3
   25b86:	4b0f      	ldr	r3, [pc, #60]	; (25bc4 <spi_flash_enter_low_power_mode+0x64>)
   25b88:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   25b8a:	4b10      	ldr	r3, [pc, #64]	; (25bcc <spi_flash_enter_low_power_mode+0x6c>)
   25b8c:	2101      	movs	r1, #1
   25b8e:	0018      	movs	r0, r3
   25b90:	4b0c      	ldr	r3, [pc, #48]	; (25bc4 <spi_flash_enter_low_power_mode+0x64>)
   25b92:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25b94:	4b0e      	ldr	r3, [pc, #56]	; (25bd0 <spi_flash_enter_low_power_mode+0x70>)
   25b96:	2100      	movs	r1, #0
   25b98:	0018      	movs	r0, r3
   25b9a:	4b0a      	ldr	r3, [pc, #40]	; (25bc4 <spi_flash_enter_low_power_mode+0x64>)
   25b9c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   25b9e:	4b0d      	ldr	r3, [pc, #52]	; (25bd4 <spi_flash_enter_low_power_mode+0x74>)
   25ba0:	2181      	movs	r1, #129	; 0x81
   25ba2:	0018      	movs	r0, r3
   25ba4:	4b07      	ldr	r3, [pc, #28]	; (25bc4 <spi_flash_enter_low_power_mode+0x64>)
   25ba6:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   25ba8:	46c0      	nop			; (mov r8, r8)
   25baa:	4b0b      	ldr	r3, [pc, #44]	; (25bd8 <spi_flash_enter_low_power_mode+0x78>)
   25bac:	0018      	movs	r0, r3
   25bae:	4b0b      	ldr	r3, [pc, #44]	; (25bdc <spi_flash_enter_low_power_mode+0x7c>)
   25bb0:	4798      	blx	r3
   25bb2:	0003      	movs	r3, r0
   25bb4:	2b01      	cmp	r3, #1
   25bb6:	d1f8      	bne.n	25baa <spi_flash_enter_low_power_mode+0x4a>
}
   25bb8:	46c0      	nop			; (mov r8, r8)
   25bba:	46bd      	mov	sp, r7
   25bbc:	b002      	add	sp, #8
   25bbe:	bd80      	pop	{r7, pc}
   25bc0:	00010208 	.word	0x00010208
   25bc4:	000229c1 	.word	0x000229c1
   25bc8:	0001020c 	.word	0x0001020c
   25bcc:	00010214 	.word	0x00010214
   25bd0:	0001021c 	.word	0x0001021c
   25bd4:	00010204 	.word	0x00010204
   25bd8:	00010218 	.word	0x00010218
   25bdc:	0002297d 	.word	0x0002297d

00025be0 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   25be0:	b580      	push	{r7, lr}
   25be2:	b082      	sub	sp, #8
   25be4:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   25be6:	003b      	movs	r3, r7
   25be8:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   25bea:	687b      	ldr	r3, [r7, #4]
   25bec:	22ab      	movs	r2, #171	; 0xab
   25bee:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25bf0:	4b13      	ldr	r3, [pc, #76]	; (25c40 <spi_flash_leave_low_power_mode+0x60>)
   25bf2:	2100      	movs	r1, #0
   25bf4:	0018      	movs	r0, r3
   25bf6:	4b13      	ldr	r3, [pc, #76]	; (25c44 <spi_flash_leave_low_power_mode+0x64>)
   25bf8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   25bfa:	687b      	ldr	r3, [r7, #4]
   25bfc:	781b      	ldrb	r3, [r3, #0]
   25bfe:	001a      	movs	r2, r3
   25c00:	4b11      	ldr	r3, [pc, #68]	; (25c48 <spi_flash_leave_low_power_mode+0x68>)
   25c02:	0011      	movs	r1, r2
   25c04:	0018      	movs	r0, r3
   25c06:	4b0f      	ldr	r3, [pc, #60]	; (25c44 <spi_flash_leave_low_power_mode+0x64>)
   25c08:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   25c0a:	4b10      	ldr	r3, [pc, #64]	; (25c4c <spi_flash_leave_low_power_mode+0x6c>)
   25c0c:	2101      	movs	r1, #1
   25c0e:	0018      	movs	r0, r3
   25c10:	4b0c      	ldr	r3, [pc, #48]	; (25c44 <spi_flash_leave_low_power_mode+0x64>)
   25c12:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25c14:	4b0e      	ldr	r3, [pc, #56]	; (25c50 <spi_flash_leave_low_power_mode+0x70>)
   25c16:	2100      	movs	r1, #0
   25c18:	0018      	movs	r0, r3
   25c1a:	4b0a      	ldr	r3, [pc, #40]	; (25c44 <spi_flash_leave_low_power_mode+0x64>)
   25c1c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   25c1e:	4b0d      	ldr	r3, [pc, #52]	; (25c54 <spi_flash_leave_low_power_mode+0x74>)
   25c20:	2181      	movs	r1, #129	; 0x81
   25c22:	0018      	movs	r0, r3
   25c24:	4b07      	ldr	r3, [pc, #28]	; (25c44 <spi_flash_leave_low_power_mode+0x64>)
   25c26:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   25c28:	46c0      	nop			; (mov r8, r8)
   25c2a:	4b0b      	ldr	r3, [pc, #44]	; (25c58 <spi_flash_leave_low_power_mode+0x78>)
   25c2c:	0018      	movs	r0, r3
   25c2e:	4b0b      	ldr	r3, [pc, #44]	; (25c5c <spi_flash_leave_low_power_mode+0x7c>)
   25c30:	4798      	blx	r3
   25c32:	0003      	movs	r3, r0
   25c34:	2b01      	cmp	r3, #1
   25c36:	d1f8      	bne.n	25c2a <spi_flash_leave_low_power_mode+0x4a>
}
   25c38:	46c0      	nop			; (mov r8, r8)
   25c3a:	46bd      	mov	sp, r7
   25c3c:	b002      	add	sp, #8
   25c3e:	bd80      	pop	{r7, pc}
   25c40:	00010208 	.word	0x00010208
   25c44:	000229c1 	.word	0x000229c1
   25c48:	0001020c 	.word	0x0001020c
   25c4c:	00010214 	.word	0x00010214
   25c50:	0001021c 	.word	0x0001021c
   25c54:	00010204 	.word	0x00010204
   25c58:	00010218 	.word	0x00010218
   25c5c:	0002297d 	.word	0x0002297d

00025c60 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   25c60:	b590      	push	{r4, r7, lr}
   25c62:	b085      	sub	sp, #20
   25c64:	af00      	add	r7, sp, #0
   25c66:	0002      	movs	r2, r0
   25c68:	1dfb      	adds	r3, r7, #7
   25c6a:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   25c6c:	230f      	movs	r3, #15
   25c6e:	18fb      	adds	r3, r7, r3
   25c70:	2200      	movs	r2, #0
   25c72:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   25c74:	4b24      	ldr	r3, [pc, #144]	; (25d08 <spi_flash_enable+0xa8>)
   25c76:	4798      	blx	r3
   25c78:	0003      	movs	r3, r0
   25c7a:	051b      	lsls	r3, r3, #20
   25c7c:	0d1b      	lsrs	r3, r3, #20
   25c7e:	4a23      	ldr	r2, [pc, #140]	; (25d0c <spi_flash_enable+0xac>)
   25c80:	4293      	cmp	r3, r2
   25c82:	d938      	bls.n	25cf6 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   25c84:	230f      	movs	r3, #15
   25c86:	18fc      	adds	r4, r7, r3
   25c88:	2308      	movs	r3, #8
   25c8a:	18fb      	adds	r3, r7, r3
   25c8c:	4a20      	ldr	r2, [pc, #128]	; (25d10 <spi_flash_enable+0xb0>)
   25c8e:	0019      	movs	r1, r3
   25c90:	0010      	movs	r0, r2
   25c92:	4b20      	ldr	r3, [pc, #128]	; (25d14 <spi_flash_enable+0xb4>)
   25c94:	4798      	blx	r3
   25c96:	0003      	movs	r3, r0
   25c98:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   25c9a:	230f      	movs	r3, #15
   25c9c:	18fb      	adds	r3, r7, r3
   25c9e:	781b      	ldrb	r3, [r3, #0]
   25ca0:	b25b      	sxtb	r3, r3
   25ca2:	2b00      	cmp	r3, #0
   25ca4:	d126      	bne.n	25cf4 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   25ca6:	68bb      	ldr	r3, [r7, #8]
   25ca8:	4a1b      	ldr	r2, [pc, #108]	; (25d18 <spi_flash_enable+0xb8>)
   25caa:	4013      	ands	r3, r2
   25cac:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   25cae:	68bb      	ldr	r3, [r7, #8]
   25cb0:	4a1a      	ldr	r2, [pc, #104]	; (25d1c <spi_flash_enable+0xbc>)
   25cb2:	4313      	orrs	r3, r2
   25cb4:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   25cb6:	68bb      	ldr	r3, [r7, #8]
   25cb8:	4a15      	ldr	r2, [pc, #84]	; (25d10 <spi_flash_enable+0xb0>)
   25cba:	0019      	movs	r1, r3
   25cbc:	0010      	movs	r0, r2
   25cbe:	4b18      	ldr	r3, [pc, #96]	; (25d20 <spi_flash_enable+0xc0>)
   25cc0:	4798      	blx	r3
		if(enable) {
   25cc2:	1dfb      	adds	r3, r7, #7
   25cc4:	781b      	ldrb	r3, [r3, #0]
   25cc6:	2b00      	cmp	r3, #0
   25cc8:	d002      	beq.n	25cd0 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   25cca:	4b16      	ldr	r3, [pc, #88]	; (25d24 <spi_flash_enable+0xc4>)
   25ccc:	4798      	blx	r3
   25cce:	e001      	b.n	25cd4 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   25cd0:	4b15      	ldr	r3, [pc, #84]	; (25d28 <spi_flash_enable+0xc8>)
   25cd2:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   25cd4:	68bb      	ldr	r3, [r7, #8]
   25cd6:	4a10      	ldr	r2, [pc, #64]	; (25d18 <spi_flash_enable+0xb8>)
   25cd8:	4013      	ands	r3, r2
   25cda:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   25cdc:	68bb      	ldr	r3, [r7, #8]
   25cde:	2280      	movs	r2, #128	; 0x80
   25ce0:	0252      	lsls	r2, r2, #9
   25ce2:	4313      	orrs	r3, r2
   25ce4:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   25ce6:	68bb      	ldr	r3, [r7, #8]
   25ce8:	4a09      	ldr	r2, [pc, #36]	; (25d10 <spi_flash_enable+0xb0>)
   25cea:	0019      	movs	r1, r3
   25cec:	0010      	movs	r0, r2
   25cee:	4b0c      	ldr	r3, [pc, #48]	; (25d20 <spi_flash_enable+0xc0>)
   25cf0:	4798      	blx	r3
   25cf2:	e000      	b.n	25cf6 <spi_flash_enable+0x96>
			goto ERR1;
   25cf4:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   25cf6:	230f      	movs	r3, #15
   25cf8:	18fb      	adds	r3, r7, r3
   25cfa:	781b      	ldrb	r3, [r3, #0]
   25cfc:	b25b      	sxtb	r3, r3
}
   25cfe:	0018      	movs	r0, r3
   25d00:	46bd      	mov	sp, r7
   25d02:	b005      	add	sp, #20
   25d04:	bd90      	pop	{r4, r7, pc}
   25d06:	46c0      	nop			; (mov r8, r8)
   25d08:	0002229d 	.word	0x0002229d
   25d0c:	0000039f 	.word	0x0000039f
   25d10:	00001410 	.word	0x00001410
   25d14:	0002299d 	.word	0x0002299d
   25d18:	f8888fff 	.word	0xf8888fff
   25d1c:	01111000 	.word	0x01111000
   25d20:	000229c1 	.word	0x000229c1
   25d24:	00025be1 	.word	0x00025be1
   25d28:	00025b61 	.word	0x00025b61

00025d2c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   25d2c:	b580      	push	{r7, lr}
   25d2e:	b084      	sub	sp, #16
   25d30:	af00      	add	r7, sp, #0
   25d32:	0002      	movs	r2, r0
   25d34:	1dfb      	adds	r3, r7, #7
   25d36:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   25d38:	1dfb      	adds	r3, r7, #7
   25d3a:	781b      	ldrb	r3, [r3, #0]
   25d3c:	2b00      	cmp	r3, #0
   25d3e:	d108      	bne.n	25d52 <mem_test_unit_ready+0x26>
   25d40:	1dfb      	adds	r3, r7, #7
   25d42:	781a      	ldrb	r2, [r3, #0]
   25d44:	4b08      	ldr	r3, [pc, #32]	; (25d68 <mem_test_unit_ready+0x3c>)
   25d46:	0152      	lsls	r2, r2, #5
   25d48:	58d3      	ldr	r3, [r2, r3]
   25d4a:	4798      	blx	r3
   25d4c:	0003      	movs	r3, r0
   25d4e:	001a      	movs	r2, r3
   25d50:	e000      	b.n	25d54 <mem_test_unit_ready+0x28>
   25d52:	2201      	movs	r2, #1
  status =
   25d54:	230f      	movs	r3, #15
   25d56:	18fb      	adds	r3, r7, r3
   25d58:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25d5a:	230f      	movs	r3, #15
   25d5c:	18fb      	adds	r3, r7, r3
   25d5e:	781b      	ldrb	r3, [r3, #0]
}
   25d60:	0018      	movs	r0, r3
   25d62:	46bd      	mov	sp, r7
   25d64:	b004      	add	sp, #16
   25d66:	bd80      	pop	{r7, pc}
   25d68:	000391a4 	.word	0x000391a4

00025d6c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   25d6c:	b580      	push	{r7, lr}
   25d6e:	b084      	sub	sp, #16
   25d70:	af00      	add	r7, sp, #0
   25d72:	0002      	movs	r2, r0
   25d74:	6039      	str	r1, [r7, #0]
   25d76:	1dfb      	adds	r3, r7, #7
   25d78:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   25d7a:	1dfb      	adds	r3, r7, #7
   25d7c:	781b      	ldrb	r3, [r3, #0]
   25d7e:	2b00      	cmp	r3, #0
   25d80:	d10c      	bne.n	25d9c <mem_read_capacity+0x30>
   25d82:	1dfb      	adds	r3, r7, #7
   25d84:	781b      	ldrb	r3, [r3, #0]
   25d86:	4a0b      	ldr	r2, [pc, #44]	; (25db4 <mem_read_capacity+0x48>)
   25d88:	015b      	lsls	r3, r3, #5
   25d8a:	18d3      	adds	r3, r2, r3
   25d8c:	3304      	adds	r3, #4
   25d8e:	681b      	ldr	r3, [r3, #0]
   25d90:	683a      	ldr	r2, [r7, #0]
   25d92:	0010      	movs	r0, r2
   25d94:	4798      	blx	r3
   25d96:	0003      	movs	r3, r0
   25d98:	001a      	movs	r2, r3
   25d9a:	e000      	b.n	25d9e <mem_read_capacity+0x32>
   25d9c:	2201      	movs	r2, #1
  status =
   25d9e:	230f      	movs	r3, #15
   25da0:	18fb      	adds	r3, r7, r3
   25da2:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25da4:	230f      	movs	r3, #15
   25da6:	18fb      	adds	r3, r7, r3
   25da8:	781b      	ldrb	r3, [r3, #0]
}
   25daa:	0018      	movs	r0, r3
   25dac:	46bd      	mov	sp, r7
   25dae:	b004      	add	sp, #16
   25db0:	bd80      	pop	{r7, pc}
   25db2:	46c0      	nop			; (mov r8, r8)
   25db4:	000391a4 	.word	0x000391a4

00025db8 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   25db8:	b580      	push	{r7, lr}
   25dba:	b084      	sub	sp, #16
   25dbc:	af00      	add	r7, sp, #0
   25dbe:	0002      	movs	r2, r0
   25dc0:	1dfb      	adds	r3, r7, #7
   25dc2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   25dc4:	1dfb      	adds	r3, r7, #7
   25dc6:	781b      	ldrb	r3, [r3, #0]
   25dc8:	425a      	negs	r2, r3
   25dca:	4153      	adcs	r3, r2
   25dcc:	b2da      	uxtb	r2, r3
  sector_size =
   25dce:	230f      	movs	r3, #15
   25dd0:	18fb      	adds	r3, r7, r3
   25dd2:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   25dd4:	230f      	movs	r3, #15
   25dd6:	18fb      	adds	r3, r7, r3
   25dd8:	781b      	ldrb	r3, [r3, #0]
}
   25dda:	0018      	movs	r0, r3
   25ddc:	46bd      	mov	sp, r7
   25dde:	b004      	add	sp, #16
   25de0:	bd80      	pop	{r7, pc}
	...

00025de4 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   25de4:	b580      	push	{r7, lr}
   25de6:	b084      	sub	sp, #16
   25de8:	af00      	add	r7, sp, #0
   25dea:	0002      	movs	r2, r0
   25dec:	1dfb      	adds	r3, r7, #7
   25dee:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   25df0:	1dfb      	adds	r3, r7, #7
   25df2:	781b      	ldrb	r3, [r3, #0]
   25df4:	2b00      	cmp	r3, #0
   25df6:	d109      	bne.n	25e0c <mem_wr_protect+0x28>
   25df8:	1dfb      	adds	r3, r7, #7
   25dfa:	781b      	ldrb	r3, [r3, #0]
   25dfc:	4a0a      	ldr	r2, [pc, #40]	; (25e28 <mem_wr_protect+0x44>)
   25dfe:	015b      	lsls	r3, r3, #5
   25e00:	18d3      	adds	r3, r2, r3
   25e02:	330c      	adds	r3, #12
   25e04:	681b      	ldr	r3, [r3, #0]
   25e06:	4798      	blx	r3
   25e08:	1e03      	subs	r3, r0, #0
   25e0a:	d001      	beq.n	25e10 <mem_wr_protect+0x2c>
   25e0c:	2201      	movs	r2, #1
   25e0e:	e000      	b.n	25e12 <mem_wr_protect+0x2e>
   25e10:	2200      	movs	r2, #0
  wr_protect =
   25e12:	230f      	movs	r3, #15
   25e14:	18fb      	adds	r3, r7, r3
   25e16:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   25e18:	230f      	movs	r3, #15
   25e1a:	18fb      	adds	r3, r7, r3
   25e1c:	781b      	ldrb	r3, [r3, #0]
}
   25e1e:	0018      	movs	r0, r3
   25e20:	46bd      	mov	sp, r7
   25e22:	b004      	add	sp, #16
   25e24:	bd80      	pop	{r7, pc}
   25e26:	46c0      	nop			; (mov r8, r8)
   25e28:	000391a4 	.word	0x000391a4

00025e2c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   25e2c:	b580      	push	{r7, lr}
   25e2e:	b086      	sub	sp, #24
   25e30:	af00      	add	r7, sp, #0
   25e32:	60b9      	str	r1, [r7, #8]
   25e34:	607a      	str	r2, [r7, #4]
   25e36:	230f      	movs	r3, #15
   25e38:	18fb      	adds	r3, r7, r3
   25e3a:	1c02      	adds	r2, r0, #0
   25e3c:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   25e3e:	230f      	movs	r3, #15
   25e40:	18fb      	adds	r3, r7, r3
   25e42:	781b      	ldrb	r3, [r3, #0]
   25e44:	2b00      	cmp	r3, #0
   25e46:	d10e      	bne.n	25e66 <memory_2_ram+0x3a>
   25e48:	230f      	movs	r3, #15
   25e4a:	18fb      	adds	r3, r7, r3
   25e4c:	781b      	ldrb	r3, [r3, #0]
   25e4e:	4a0b      	ldr	r2, [pc, #44]	; (25e7c <memory_2_ram+0x50>)
   25e50:	015b      	lsls	r3, r3, #5
   25e52:	18d3      	adds	r3, r2, r3
   25e54:	3314      	adds	r3, #20
   25e56:	681b      	ldr	r3, [r3, #0]
   25e58:	6879      	ldr	r1, [r7, #4]
   25e5a:	68ba      	ldr	r2, [r7, #8]
   25e5c:	0010      	movs	r0, r2
   25e5e:	4798      	blx	r3
   25e60:	0003      	movs	r3, r0
   25e62:	001a      	movs	r2, r3
   25e64:	e000      	b.n	25e68 <memory_2_ram+0x3c>
   25e66:	2201      	movs	r2, #1
  status =
   25e68:	2317      	movs	r3, #23
   25e6a:	18fb      	adds	r3, r7, r3
   25e6c:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   25e6e:	2317      	movs	r3, #23
   25e70:	18fb      	adds	r3, r7, r3
   25e72:	781b      	ldrb	r3, [r3, #0]
}
   25e74:	0018      	movs	r0, r3
   25e76:	46bd      	mov	sp, r7
   25e78:	b006      	add	sp, #24
   25e7a:	bd80      	pop	{r7, pc}
   25e7c:	000391a4 	.word	0x000391a4

00025e80 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   25e80:	b580      	push	{r7, lr}
   25e82:	b086      	sub	sp, #24
   25e84:	af00      	add	r7, sp, #0
   25e86:	60b9      	str	r1, [r7, #8]
   25e88:	607a      	str	r2, [r7, #4]
   25e8a:	230f      	movs	r3, #15
   25e8c:	18fb      	adds	r3, r7, r3
   25e8e:	1c02      	adds	r2, r0, #0
   25e90:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   25e92:	230f      	movs	r3, #15
   25e94:	18fb      	adds	r3, r7, r3
   25e96:	781b      	ldrb	r3, [r3, #0]
   25e98:	2b00      	cmp	r3, #0
   25e9a:	d10e      	bne.n	25eba <ram_2_memory+0x3a>
   25e9c:	230f      	movs	r3, #15
   25e9e:	18fb      	adds	r3, r7, r3
   25ea0:	781b      	ldrb	r3, [r3, #0]
   25ea2:	4a0b      	ldr	r2, [pc, #44]	; (25ed0 <ram_2_memory+0x50>)
   25ea4:	015b      	lsls	r3, r3, #5
   25ea6:	18d3      	adds	r3, r2, r3
   25ea8:	3318      	adds	r3, #24
   25eaa:	681b      	ldr	r3, [r3, #0]
   25eac:	6879      	ldr	r1, [r7, #4]
   25eae:	68ba      	ldr	r2, [r7, #8]
   25eb0:	0010      	movs	r0, r2
   25eb2:	4798      	blx	r3
   25eb4:	0003      	movs	r3, r0
   25eb6:	001a      	movs	r2, r3
   25eb8:	e000      	b.n	25ebc <ram_2_memory+0x3c>
   25eba:	2201      	movs	r2, #1
  status =
   25ebc:	2317      	movs	r3, #23
   25ebe:	18fb      	adds	r3, r7, r3
   25ec0:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   25ec2:	2317      	movs	r3, #23
   25ec4:	18fb      	adds	r3, r7, r3
   25ec6:	781b      	ldrb	r3, [r3, #0]
}
   25ec8:	0018      	movs	r0, r3
   25eca:	46bd      	mov	sp, r7
   25ecc:	b006      	add	sp, #24
   25ece:	bd80      	pop	{r7, pc}
   25ed0:	000391a4 	.word	0x000391a4

00025ed4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   25ed4:	b580      	push	{r7, lr}
   25ed6:	b082      	sub	sp, #8
   25ed8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   25eda:	4b10      	ldr	r3, [pc, #64]	; (25f1c <cpu_irq_enter_critical+0x48>)
   25edc:	681b      	ldr	r3, [r3, #0]
   25ede:	2b00      	cmp	r3, #0
   25ee0:	d112      	bne.n	25f08 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   25ee2:	f3ef 8310 	mrs	r3, PRIMASK
   25ee6:	607b      	str	r3, [r7, #4]
  return(result);
   25ee8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   25eea:	2b00      	cmp	r3, #0
   25eec:	d109      	bne.n	25f02 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   25eee:	b672      	cpsid	i
   25ef0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   25ef4:	4b0a      	ldr	r3, [pc, #40]	; (25f20 <cpu_irq_enter_critical+0x4c>)
   25ef6:	2200      	movs	r2, #0
   25ef8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   25efa:	4b0a      	ldr	r3, [pc, #40]	; (25f24 <cpu_irq_enter_critical+0x50>)
   25efc:	2201      	movs	r2, #1
   25efe:	701a      	strb	r2, [r3, #0]
   25f00:	e002      	b.n	25f08 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   25f02:	4b08      	ldr	r3, [pc, #32]	; (25f24 <cpu_irq_enter_critical+0x50>)
   25f04:	2200      	movs	r2, #0
   25f06:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   25f08:	4b04      	ldr	r3, [pc, #16]	; (25f1c <cpu_irq_enter_critical+0x48>)
   25f0a:	681b      	ldr	r3, [r3, #0]
   25f0c:	1c5a      	adds	r2, r3, #1
   25f0e:	4b03      	ldr	r3, [pc, #12]	; (25f1c <cpu_irq_enter_critical+0x48>)
   25f10:	601a      	str	r2, [r3, #0]
}
   25f12:	46c0      	nop			; (mov r8, r8)
   25f14:	46bd      	mov	sp, r7
   25f16:	b002      	add	sp, #8
   25f18:	bd80      	pop	{r7, pc}
   25f1a:	46c0      	nop			; (mov r8, r8)
   25f1c:	2000415c 	.word	0x2000415c
   25f20:	20000146 	.word	0x20000146
   25f24:	20004160 	.word	0x20004160

00025f28 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   25f28:	b580      	push	{r7, lr}
   25f2a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   25f2c:	4b0b      	ldr	r3, [pc, #44]	; (25f5c <cpu_irq_leave_critical+0x34>)
   25f2e:	681b      	ldr	r3, [r3, #0]
   25f30:	1e5a      	subs	r2, r3, #1
   25f32:	4b0a      	ldr	r3, [pc, #40]	; (25f5c <cpu_irq_leave_critical+0x34>)
   25f34:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   25f36:	4b09      	ldr	r3, [pc, #36]	; (25f5c <cpu_irq_leave_critical+0x34>)
   25f38:	681b      	ldr	r3, [r3, #0]
   25f3a:	2b00      	cmp	r3, #0
   25f3c:	d10a      	bne.n	25f54 <cpu_irq_leave_critical+0x2c>
   25f3e:	4b08      	ldr	r3, [pc, #32]	; (25f60 <cpu_irq_leave_critical+0x38>)
   25f40:	781b      	ldrb	r3, [r3, #0]
   25f42:	b2db      	uxtb	r3, r3
   25f44:	2b00      	cmp	r3, #0
   25f46:	d005      	beq.n	25f54 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   25f48:	4b06      	ldr	r3, [pc, #24]	; (25f64 <cpu_irq_leave_critical+0x3c>)
   25f4a:	2201      	movs	r2, #1
   25f4c:	701a      	strb	r2, [r3, #0]
   25f4e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   25f52:	b662      	cpsie	i
	}
}
   25f54:	46c0      	nop			; (mov r8, r8)
   25f56:	46bd      	mov	sp, r7
   25f58:	bd80      	pop	{r7, pc}
   25f5a:	46c0      	nop			; (mov r8, r8)
   25f5c:	2000415c 	.word	0x2000415c
   25f60:	20004160 	.word	0x20004160
   25f64:	20000146 	.word	0x20000146

00025f68 <system_pinmux_get_group_from_gpio_pin>:
{
   25f68:	b580      	push	{r7, lr}
   25f6a:	b084      	sub	sp, #16
   25f6c:	af00      	add	r7, sp, #0
   25f6e:	0002      	movs	r2, r0
   25f70:	1dfb      	adds	r3, r7, #7
   25f72:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   25f74:	230f      	movs	r3, #15
   25f76:	18fb      	adds	r3, r7, r3
   25f78:	1dfa      	adds	r2, r7, #7
   25f7a:	7812      	ldrb	r2, [r2, #0]
   25f7c:	09d2      	lsrs	r2, r2, #7
   25f7e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   25f80:	230e      	movs	r3, #14
   25f82:	18fb      	adds	r3, r7, r3
   25f84:	1dfa      	adds	r2, r7, #7
   25f86:	7812      	ldrb	r2, [r2, #0]
   25f88:	0952      	lsrs	r2, r2, #5
   25f8a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25f8c:	4b0d      	ldr	r3, [pc, #52]	; (25fc4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   25f8e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   25f90:	230f      	movs	r3, #15
   25f92:	18fb      	adds	r3, r7, r3
   25f94:	781b      	ldrb	r3, [r3, #0]
   25f96:	2b00      	cmp	r3, #0
   25f98:	d10f      	bne.n	25fba <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   25f9a:	230f      	movs	r3, #15
   25f9c:	18fb      	adds	r3, r7, r3
   25f9e:	781b      	ldrb	r3, [r3, #0]
   25fa0:	009b      	lsls	r3, r3, #2
   25fa2:	2210      	movs	r2, #16
   25fa4:	4694      	mov	ip, r2
   25fa6:	44bc      	add	ip, r7
   25fa8:	4463      	add	r3, ip
   25faa:	3b08      	subs	r3, #8
   25fac:	681a      	ldr	r2, [r3, #0]
   25fae:	230e      	movs	r3, #14
   25fb0:	18fb      	adds	r3, r7, r3
   25fb2:	781b      	ldrb	r3, [r3, #0]
   25fb4:	01db      	lsls	r3, r3, #7
   25fb6:	18d3      	adds	r3, r2, r3
   25fb8:	e000      	b.n	25fbc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   25fba:	2300      	movs	r3, #0
}
   25fbc:	0018      	movs	r0, r3
   25fbe:	46bd      	mov	sp, r7
   25fc0:	b004      	add	sp, #16
   25fc2:	bd80      	pop	{r7, pc}
   25fc4:	41004400 	.word	0x41004400

00025fc8 <port_get_group_from_gpio_pin>:
{
   25fc8:	b580      	push	{r7, lr}
   25fca:	b082      	sub	sp, #8
   25fcc:	af00      	add	r7, sp, #0
   25fce:	0002      	movs	r2, r0
   25fd0:	1dfb      	adds	r3, r7, #7
   25fd2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   25fd4:	1dfb      	adds	r3, r7, #7
   25fd6:	781b      	ldrb	r3, [r3, #0]
   25fd8:	0018      	movs	r0, r3
   25fda:	4b03      	ldr	r3, [pc, #12]	; (25fe8 <port_get_group_from_gpio_pin+0x20>)
   25fdc:	4798      	blx	r3
   25fde:	0003      	movs	r3, r0
}
   25fe0:	0018      	movs	r0, r3
   25fe2:	46bd      	mov	sp, r7
   25fe4:	b002      	add	sp, #8
   25fe6:	bd80      	pop	{r7, pc}
   25fe8:	00025f69 	.word	0x00025f69

00025fec <port_get_config_defaults>:
{
   25fec:	b580      	push	{r7, lr}
   25fee:	b082      	sub	sp, #8
   25ff0:	af00      	add	r7, sp, #0
   25ff2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   25ff4:	687b      	ldr	r3, [r7, #4]
   25ff6:	2200      	movs	r2, #0
   25ff8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   25ffa:	687b      	ldr	r3, [r7, #4]
   25ffc:	2201      	movs	r2, #1
   25ffe:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   26000:	687b      	ldr	r3, [r7, #4]
   26002:	2200      	movs	r2, #0
   26004:	709a      	strb	r2, [r3, #2]
}
   26006:	46c0      	nop			; (mov r8, r8)
   26008:	46bd      	mov	sp, r7
   2600a:	b002      	add	sp, #8
   2600c:	bd80      	pop	{r7, pc}
	...

00026010 <port_pin_set_output_level>:
{
   26010:	b580      	push	{r7, lr}
   26012:	b084      	sub	sp, #16
   26014:	af00      	add	r7, sp, #0
   26016:	0002      	movs	r2, r0
   26018:	1dfb      	adds	r3, r7, #7
   2601a:	701a      	strb	r2, [r3, #0]
   2601c:	1dbb      	adds	r3, r7, #6
   2601e:	1c0a      	adds	r2, r1, #0
   26020:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   26022:	1dfb      	adds	r3, r7, #7
   26024:	781b      	ldrb	r3, [r3, #0]
   26026:	0018      	movs	r0, r3
   26028:	4b0d      	ldr	r3, [pc, #52]	; (26060 <port_pin_set_output_level+0x50>)
   2602a:	4798      	blx	r3
   2602c:	0003      	movs	r3, r0
   2602e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   26030:	1dfb      	adds	r3, r7, #7
   26032:	781b      	ldrb	r3, [r3, #0]
   26034:	221f      	movs	r2, #31
   26036:	4013      	ands	r3, r2
   26038:	2201      	movs	r2, #1
   2603a:	409a      	lsls	r2, r3
   2603c:	0013      	movs	r3, r2
   2603e:	60bb      	str	r3, [r7, #8]
	if (level) {
   26040:	1dbb      	adds	r3, r7, #6
   26042:	781b      	ldrb	r3, [r3, #0]
   26044:	2b00      	cmp	r3, #0
   26046:	d003      	beq.n	26050 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   26048:	68fb      	ldr	r3, [r7, #12]
   2604a:	68ba      	ldr	r2, [r7, #8]
   2604c:	619a      	str	r2, [r3, #24]
}
   2604e:	e002      	b.n	26056 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   26050:	68fb      	ldr	r3, [r7, #12]
   26052:	68ba      	ldr	r2, [r7, #8]
   26054:	615a      	str	r2, [r3, #20]
}
   26056:	46c0      	nop			; (mov r8, r8)
   26058:	46bd      	mov	sp, r7
   2605a:	b004      	add	sp, #16
   2605c:	bd80      	pop	{r7, pc}
   2605e:	46c0      	nop			; (mov r8, r8)
   26060:	00025fc9 	.word	0x00025fc9

00026064 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   26064:	b580      	push	{r7, lr}
   26066:	b082      	sub	sp, #8
   26068:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   2606a:	1d3b      	adds	r3, r7, #4
   2606c:	0018      	movs	r0, r3
   2606e:	4b0e      	ldr	r3, [pc, #56]	; (260a8 <system_board_init+0x44>)
   26070:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   26072:	1d3b      	adds	r3, r7, #4
   26074:	2201      	movs	r2, #1
   26076:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   26078:	1d3b      	adds	r3, r7, #4
   2607a:	0019      	movs	r1, r3
   2607c:	2017      	movs	r0, #23
   2607e:	4b0b      	ldr	r3, [pc, #44]	; (260ac <system_board_init+0x48>)
   26080:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   26082:	2101      	movs	r1, #1
   26084:	2017      	movs	r0, #23
   26086:	4b0a      	ldr	r3, [pc, #40]	; (260b0 <system_board_init+0x4c>)
   26088:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   2608a:	1d3b      	adds	r3, r7, #4
   2608c:	2200      	movs	r2, #0
   2608e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   26090:	1d3b      	adds	r3, r7, #4
   26092:	2201      	movs	r2, #1
   26094:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   26096:	1d3b      	adds	r3, r7, #4
   26098:	0019      	movs	r1, r3
   2609a:	2037      	movs	r0, #55	; 0x37
   2609c:	4b03      	ldr	r3, [pc, #12]	; (260ac <system_board_init+0x48>)
   2609e:	4798      	blx	r3
}
   260a0:	46c0      	nop			; (mov r8, r8)
   260a2:	46bd      	mov	sp, r7
   260a4:	b002      	add	sp, #8
   260a6:	bd80      	pop	{r7, pc}
   260a8:	00025fed 	.word	0x00025fed
   260ac:	000266d9 	.word	0x000266d9
   260b0:	00026011 	.word	0x00026011

000260b4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   260b4:	b580      	push	{r7, lr}
   260b6:	b084      	sub	sp, #16
   260b8:	af00      	add	r7, sp, #0
   260ba:	0002      	movs	r2, r0
   260bc:	1dfb      	adds	r3, r7, #7
   260be:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   260c0:	230f      	movs	r3, #15
   260c2:	18fb      	adds	r3, r7, r3
   260c4:	1dfa      	adds	r2, r7, #7
   260c6:	7812      	ldrb	r2, [r2, #0]
   260c8:	0952      	lsrs	r2, r2, #5
   260ca:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   260cc:	230f      	movs	r3, #15
   260ce:	18fb      	adds	r3, r7, r3
   260d0:	781b      	ldrb	r3, [r3, #0]
   260d2:	2b00      	cmp	r3, #0
   260d4:	d10c      	bne.n	260f0 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   260d6:	4b09      	ldr	r3, [pc, #36]	; (260fc <_extint_get_eic_from_channel+0x48>)
   260d8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   260da:	230f      	movs	r3, #15
   260dc:	18fb      	adds	r3, r7, r3
   260de:	781b      	ldrb	r3, [r3, #0]
   260e0:	009b      	lsls	r3, r3, #2
   260e2:	2210      	movs	r2, #16
   260e4:	4694      	mov	ip, r2
   260e6:	44bc      	add	ip, r7
   260e8:	4463      	add	r3, ip
   260ea:	3b08      	subs	r3, #8
   260ec:	681b      	ldr	r3, [r3, #0]
   260ee:	e000      	b.n	260f2 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   260f0:	2300      	movs	r3, #0
	}
}
   260f2:	0018      	movs	r0, r3
   260f4:	46bd      	mov	sp, r7
   260f6:	b004      	add	sp, #16
   260f8:	bd80      	pop	{r7, pc}
   260fa:	46c0      	nop			; (mov r8, r8)
   260fc:	40001800 	.word	0x40001800

00026100 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   26100:	b580      	push	{r7, lr}
   26102:	b084      	sub	sp, #16
   26104:	af00      	add	r7, sp, #0
   26106:	0002      	movs	r2, r0
   26108:	1dfb      	adds	r3, r7, #7
   2610a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   2610c:	1dfb      	adds	r3, r7, #7
   2610e:	781b      	ldrb	r3, [r3, #0]
   26110:	0018      	movs	r0, r3
   26112:	4b0b      	ldr	r3, [pc, #44]	; (26140 <extint_chan_is_detected+0x40>)
   26114:	4798      	blx	r3
   26116:	0003      	movs	r3, r0
   26118:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2611a:	1dfb      	adds	r3, r7, #7
   2611c:	781b      	ldrb	r3, [r3, #0]
   2611e:	221f      	movs	r2, #31
   26120:	4013      	ands	r3, r2
   26122:	2201      	movs	r2, #1
   26124:	409a      	lsls	r2, r3
   26126:	0013      	movs	r3, r2
   26128:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   2612a:	68fb      	ldr	r3, [r7, #12]
   2612c:	691b      	ldr	r3, [r3, #16]
   2612e:	68ba      	ldr	r2, [r7, #8]
   26130:	4013      	ands	r3, r2
   26132:	1e5a      	subs	r2, r3, #1
   26134:	4193      	sbcs	r3, r2
   26136:	b2db      	uxtb	r3, r3
}
   26138:	0018      	movs	r0, r3
   2613a:	46bd      	mov	sp, r7
   2613c:	b004      	add	sp, #16
   2613e:	bd80      	pop	{r7, pc}
   26140:	000260b5 	.word	0x000260b5

00026144 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   26144:	b580      	push	{r7, lr}
   26146:	b084      	sub	sp, #16
   26148:	af00      	add	r7, sp, #0
   2614a:	0002      	movs	r2, r0
   2614c:	1dfb      	adds	r3, r7, #7
   2614e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   26150:	1dfb      	adds	r3, r7, #7
   26152:	781b      	ldrb	r3, [r3, #0]
   26154:	0018      	movs	r0, r3
   26156:	4b09      	ldr	r3, [pc, #36]	; (2617c <extint_chan_clear_detected+0x38>)
   26158:	4798      	blx	r3
   2615a:	0003      	movs	r3, r0
   2615c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2615e:	1dfb      	adds	r3, r7, #7
   26160:	781b      	ldrb	r3, [r3, #0]
   26162:	221f      	movs	r2, #31
   26164:	4013      	ands	r3, r2
   26166:	2201      	movs	r2, #1
   26168:	409a      	lsls	r2, r3
   2616a:	0013      	movs	r3, r2
   2616c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   2616e:	68fb      	ldr	r3, [r7, #12]
   26170:	68ba      	ldr	r2, [r7, #8]
   26172:	611a      	str	r2, [r3, #16]
}
   26174:	46c0      	nop			; (mov r8, r8)
   26176:	46bd      	mov	sp, r7
   26178:	b004      	add	sp, #16
   2617a:	bd80      	pop	{r7, pc}
   2617c:	000260b5 	.word	0x000260b5

00026180 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26180:	b580      	push	{r7, lr}
   26182:	b082      	sub	sp, #8
   26184:	af00      	add	r7, sp, #0
   26186:	6078      	str	r0, [r7, #4]
   26188:	0008      	movs	r0, r1
   2618a:	0011      	movs	r1, r2
   2618c:	1cfb      	adds	r3, r7, #3
   2618e:	1c02      	adds	r2, r0, #0
   26190:	701a      	strb	r2, [r3, #0]
   26192:	1cbb      	adds	r3, r7, #2
   26194:	1c0a      	adds	r2, r1, #0
   26196:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   26198:	1cbb      	adds	r3, r7, #2
   2619a:	781b      	ldrb	r3, [r3, #0]
   2619c:	2b00      	cmp	r3, #0
   2619e:	d001      	beq.n	261a4 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   261a0:	2317      	movs	r3, #23
   261a2:	e019      	b.n	261d8 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   261a4:	1cfb      	adds	r3, r7, #3
   261a6:	781a      	ldrb	r2, [r3, #0]
   261a8:	4b0d      	ldr	r3, [pc, #52]	; (261e0 <extint_register_callback+0x60>)
   261aa:	0092      	lsls	r2, r2, #2
   261ac:	58d3      	ldr	r3, [r2, r3]
   261ae:	2b00      	cmp	r3, #0
   261b0:	d107      	bne.n	261c2 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   261b2:	1cfb      	adds	r3, r7, #3
   261b4:	781a      	ldrb	r2, [r3, #0]
   261b6:	4b0a      	ldr	r3, [pc, #40]	; (261e0 <extint_register_callback+0x60>)
   261b8:	0092      	lsls	r2, r2, #2
   261ba:	6879      	ldr	r1, [r7, #4]
   261bc:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   261be:	2300      	movs	r3, #0
   261c0:	e00a      	b.n	261d8 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   261c2:	1cfb      	adds	r3, r7, #3
   261c4:	781a      	ldrb	r2, [r3, #0]
   261c6:	4b06      	ldr	r3, [pc, #24]	; (261e0 <extint_register_callback+0x60>)
   261c8:	0092      	lsls	r2, r2, #2
   261ca:	58d2      	ldr	r2, [r2, r3]
   261cc:	687b      	ldr	r3, [r7, #4]
   261ce:	429a      	cmp	r2, r3
   261d0:	d101      	bne.n	261d6 <extint_register_callback+0x56>
		return STATUS_OK;
   261d2:	2300      	movs	r3, #0
   261d4:	e000      	b.n	261d8 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   261d6:	231d      	movs	r3, #29
}
   261d8:	0018      	movs	r0, r3
   261da:	46bd      	mov	sp, r7
   261dc:	b002      	add	sp, #8
   261de:	bd80      	pop	{r7, pc}
   261e0:	20005a1c 	.word	0x20005a1c

000261e4 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   261e4:	b580      	push	{r7, lr}
   261e6:	b084      	sub	sp, #16
   261e8:	af00      	add	r7, sp, #0
   261ea:	0002      	movs	r2, r0
   261ec:	1dfb      	adds	r3, r7, #7
   261ee:	701a      	strb	r2, [r3, #0]
   261f0:	1dbb      	adds	r3, r7, #6
   261f2:	1c0a      	adds	r2, r1, #0
   261f4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   261f6:	1dbb      	adds	r3, r7, #6
   261f8:	781b      	ldrb	r3, [r3, #0]
   261fa:	2b00      	cmp	r3, #0
   261fc:	d10e      	bne.n	2621c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   261fe:	1dfb      	adds	r3, r7, #7
   26200:	781b      	ldrb	r3, [r3, #0]
   26202:	0018      	movs	r0, r3
   26204:	4b08      	ldr	r3, [pc, #32]	; (26228 <extint_chan_enable_callback+0x44>)
   26206:	4798      	blx	r3
   26208:	0003      	movs	r3, r0
   2620a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   2620c:	1dfb      	adds	r3, r7, #7
   2620e:	781b      	ldrb	r3, [r3, #0]
   26210:	2201      	movs	r2, #1
   26212:	409a      	lsls	r2, r3
   26214:	68fb      	ldr	r3, [r7, #12]
   26216:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   26218:	2300      	movs	r3, #0
   2621a:	e000      	b.n	2621e <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   2621c:	2317      	movs	r3, #23
}
   2621e:	0018      	movs	r0, r3
   26220:	46bd      	mov	sp, r7
   26222:	b004      	add	sp, #16
   26224:	bd80      	pop	{r7, pc}
   26226:	46c0      	nop			; (mov r8, r8)
   26228:	000260b5 	.word	0x000260b5

0002622c <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   2622c:	b580      	push	{r7, lr}
   2622e:	b084      	sub	sp, #16
   26230:	af00      	add	r7, sp, #0
   26232:	0002      	movs	r2, r0
   26234:	1dfb      	adds	r3, r7, #7
   26236:	701a      	strb	r2, [r3, #0]
   26238:	1dbb      	adds	r3, r7, #6
   2623a:	1c0a      	adds	r2, r1, #0
   2623c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   2623e:	1dbb      	adds	r3, r7, #6
   26240:	781b      	ldrb	r3, [r3, #0]
   26242:	2b00      	cmp	r3, #0
   26244:	d10e      	bne.n	26264 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   26246:	1dfb      	adds	r3, r7, #7
   26248:	781b      	ldrb	r3, [r3, #0]
   2624a:	0018      	movs	r0, r3
   2624c:	4b08      	ldr	r3, [pc, #32]	; (26270 <extint_chan_disable_callback+0x44>)
   2624e:	4798      	blx	r3
   26250:	0003      	movs	r3, r0
   26252:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   26254:	1dfb      	adds	r3, r7, #7
   26256:	781b      	ldrb	r3, [r3, #0]
   26258:	2201      	movs	r2, #1
   2625a:	409a      	lsls	r2, r3
   2625c:	68fb      	ldr	r3, [r7, #12]
   2625e:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   26260:	2300      	movs	r3, #0
   26262:	e000      	b.n	26266 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   26264:	2317      	movs	r3, #23
}
   26266:	0018      	movs	r0, r3
   26268:	46bd      	mov	sp, r7
   2626a:	b004      	add	sp, #16
   2626c:	bd80      	pop	{r7, pc}
   2626e:	46c0      	nop			; (mov r8, r8)
   26270:	000260b5 	.word	0x000260b5

00026274 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   26274:	b580      	push	{r7, lr}
   26276:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   26278:	4b15      	ldr	r3, [pc, #84]	; (262d0 <EIC_Handler+0x5c>)
   2627a:	2200      	movs	r2, #0
   2627c:	701a      	strb	r2, [r3, #0]
   2627e:	e020      	b.n	262c2 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   26280:	4b13      	ldr	r3, [pc, #76]	; (262d0 <EIC_Handler+0x5c>)
   26282:	781b      	ldrb	r3, [r3, #0]
   26284:	0018      	movs	r0, r3
   26286:	4b13      	ldr	r3, [pc, #76]	; (262d4 <EIC_Handler+0x60>)
   26288:	4798      	blx	r3
   2628a:	1e03      	subs	r3, r0, #0
   2628c:	d013      	beq.n	262b6 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   2628e:	4b10      	ldr	r3, [pc, #64]	; (262d0 <EIC_Handler+0x5c>)
   26290:	781b      	ldrb	r3, [r3, #0]
   26292:	0018      	movs	r0, r3
   26294:	4b10      	ldr	r3, [pc, #64]	; (262d8 <EIC_Handler+0x64>)
   26296:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   26298:	4b0d      	ldr	r3, [pc, #52]	; (262d0 <EIC_Handler+0x5c>)
   2629a:	781b      	ldrb	r3, [r3, #0]
   2629c:	001a      	movs	r2, r3
   2629e:	4b0f      	ldr	r3, [pc, #60]	; (262dc <EIC_Handler+0x68>)
   262a0:	0092      	lsls	r2, r2, #2
   262a2:	58d3      	ldr	r3, [r2, r3]
   262a4:	2b00      	cmp	r3, #0
   262a6:	d006      	beq.n	262b6 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   262a8:	4b09      	ldr	r3, [pc, #36]	; (262d0 <EIC_Handler+0x5c>)
   262aa:	781b      	ldrb	r3, [r3, #0]
   262ac:	001a      	movs	r2, r3
   262ae:	4b0b      	ldr	r3, [pc, #44]	; (262dc <EIC_Handler+0x68>)
   262b0:	0092      	lsls	r2, r2, #2
   262b2:	58d3      	ldr	r3, [r2, r3]
   262b4:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   262b6:	4b06      	ldr	r3, [pc, #24]	; (262d0 <EIC_Handler+0x5c>)
   262b8:	781b      	ldrb	r3, [r3, #0]
   262ba:	3301      	adds	r3, #1
   262bc:	b2da      	uxtb	r2, r3
   262be:	4b04      	ldr	r3, [pc, #16]	; (262d0 <EIC_Handler+0x5c>)
   262c0:	701a      	strb	r2, [r3, #0]
   262c2:	4b03      	ldr	r3, [pc, #12]	; (262d0 <EIC_Handler+0x5c>)
   262c4:	781b      	ldrb	r3, [r3, #0]
   262c6:	2b0f      	cmp	r3, #15
   262c8:	d9da      	bls.n	26280 <EIC_Handler+0xc>
			}
		}
	}
}
   262ca:	46c0      	nop			; (mov r8, r8)
   262cc:	46bd      	mov	sp, r7
   262ce:	bd80      	pop	{r7, pc}
   262d0:	20005a18 	.word	0x20005a18
   262d4:	00026101 	.word	0x00026101
   262d8:	00026145 	.word	0x00026145
   262dc:	20005a1c 	.word	0x20005a1c

000262e0 <system_gclk_chan_get_config_defaults>:
{
   262e0:	b580      	push	{r7, lr}
   262e2:	b082      	sub	sp, #8
   262e4:	af00      	add	r7, sp, #0
   262e6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   262e8:	687b      	ldr	r3, [r7, #4]
   262ea:	2200      	movs	r2, #0
   262ec:	701a      	strb	r2, [r3, #0]
}
   262ee:	46c0      	nop			; (mov r8, r8)
   262f0:	46bd      	mov	sp, r7
   262f2:	b002      	add	sp, #8
   262f4:	bd80      	pop	{r7, pc}
	...

000262f8 <system_apb_clock_set_mask>:
{
   262f8:	b580      	push	{r7, lr}
   262fa:	b082      	sub	sp, #8
   262fc:	af00      	add	r7, sp, #0
   262fe:	0002      	movs	r2, r0
   26300:	6039      	str	r1, [r7, #0]
   26302:	1dfb      	adds	r3, r7, #7
   26304:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26306:	1dfb      	adds	r3, r7, #7
   26308:	781b      	ldrb	r3, [r3, #0]
   2630a:	2b01      	cmp	r3, #1
   2630c:	d00a      	beq.n	26324 <system_apb_clock_set_mask+0x2c>
   2630e:	2b02      	cmp	r3, #2
   26310:	d00f      	beq.n	26332 <system_apb_clock_set_mask+0x3a>
   26312:	2b00      	cmp	r3, #0
   26314:	d114      	bne.n	26340 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26316:	4b0e      	ldr	r3, [pc, #56]	; (26350 <system_apb_clock_set_mask+0x58>)
   26318:	4a0d      	ldr	r2, [pc, #52]	; (26350 <system_apb_clock_set_mask+0x58>)
   2631a:	6991      	ldr	r1, [r2, #24]
   2631c:	683a      	ldr	r2, [r7, #0]
   2631e:	430a      	orrs	r2, r1
   26320:	619a      	str	r2, [r3, #24]
			break;
   26322:	e00f      	b.n	26344 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26324:	4b0a      	ldr	r3, [pc, #40]	; (26350 <system_apb_clock_set_mask+0x58>)
   26326:	4a0a      	ldr	r2, [pc, #40]	; (26350 <system_apb_clock_set_mask+0x58>)
   26328:	69d1      	ldr	r1, [r2, #28]
   2632a:	683a      	ldr	r2, [r7, #0]
   2632c:	430a      	orrs	r2, r1
   2632e:	61da      	str	r2, [r3, #28]
			break;
   26330:	e008      	b.n	26344 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26332:	4b07      	ldr	r3, [pc, #28]	; (26350 <system_apb_clock_set_mask+0x58>)
   26334:	4a06      	ldr	r2, [pc, #24]	; (26350 <system_apb_clock_set_mask+0x58>)
   26336:	6a11      	ldr	r1, [r2, #32]
   26338:	683a      	ldr	r2, [r7, #0]
   2633a:	430a      	orrs	r2, r1
   2633c:	621a      	str	r2, [r3, #32]
			break;
   2633e:	e001      	b.n	26344 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26340:	2317      	movs	r3, #23
   26342:	e000      	b.n	26346 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26344:	2300      	movs	r3, #0
}
   26346:	0018      	movs	r0, r3
   26348:	46bd      	mov	sp, r7
   2634a:	b002      	add	sp, #8
   2634c:	bd80      	pop	{r7, pc}
   2634e:	46c0      	nop			; (mov r8, r8)
   26350:	40000400 	.word	0x40000400

00026354 <system_pinmux_get_config_defaults>:
{
   26354:	b580      	push	{r7, lr}
   26356:	b082      	sub	sp, #8
   26358:	af00      	add	r7, sp, #0
   2635a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2635c:	687b      	ldr	r3, [r7, #4]
   2635e:	2280      	movs	r2, #128	; 0x80
   26360:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26362:	687b      	ldr	r3, [r7, #4]
   26364:	2200      	movs	r2, #0
   26366:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26368:	687b      	ldr	r3, [r7, #4]
   2636a:	2201      	movs	r2, #1
   2636c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2636e:	687b      	ldr	r3, [r7, #4]
   26370:	2200      	movs	r2, #0
   26372:	70da      	strb	r2, [r3, #3]
}
   26374:	46c0      	nop			; (mov r8, r8)
   26376:	46bd      	mov	sp, r7
   26378:	b002      	add	sp, #8
   2637a:	bd80      	pop	{r7, pc}

0002637c <system_interrupt_enable>:
{
   2637c:	b580      	push	{r7, lr}
   2637e:	b082      	sub	sp, #8
   26380:	af00      	add	r7, sp, #0
   26382:	0002      	movs	r2, r0
   26384:	1dfb      	adds	r3, r7, #7
   26386:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26388:	4b06      	ldr	r3, [pc, #24]	; (263a4 <system_interrupt_enable+0x28>)
   2638a:	1dfa      	adds	r2, r7, #7
   2638c:	7812      	ldrb	r2, [r2, #0]
   2638e:	0011      	movs	r1, r2
   26390:	221f      	movs	r2, #31
   26392:	400a      	ands	r2, r1
   26394:	2101      	movs	r1, #1
   26396:	4091      	lsls	r1, r2
   26398:	000a      	movs	r2, r1
   2639a:	601a      	str	r2, [r3, #0]
}
   2639c:	46c0      	nop			; (mov r8, r8)
   2639e:	46bd      	mov	sp, r7
   263a0:	b002      	add	sp, #8
   263a2:	bd80      	pop	{r7, pc}
   263a4:	e000e100 	.word	0xe000e100

000263a8 <_extint_get_eic_from_channel>:
{
   263a8:	b580      	push	{r7, lr}
   263aa:	b084      	sub	sp, #16
   263ac:	af00      	add	r7, sp, #0
   263ae:	0002      	movs	r2, r0
   263b0:	1dfb      	adds	r3, r7, #7
   263b2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   263b4:	230f      	movs	r3, #15
   263b6:	18fb      	adds	r3, r7, r3
   263b8:	1dfa      	adds	r2, r7, #7
   263ba:	7812      	ldrb	r2, [r2, #0]
   263bc:	0952      	lsrs	r2, r2, #5
   263be:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   263c0:	230f      	movs	r3, #15
   263c2:	18fb      	adds	r3, r7, r3
   263c4:	781b      	ldrb	r3, [r3, #0]
   263c6:	2b00      	cmp	r3, #0
   263c8:	d10c      	bne.n	263e4 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   263ca:	4b09      	ldr	r3, [pc, #36]	; (263f0 <_extint_get_eic_from_channel+0x48>)
   263cc:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   263ce:	230f      	movs	r3, #15
   263d0:	18fb      	adds	r3, r7, r3
   263d2:	781b      	ldrb	r3, [r3, #0]
   263d4:	009b      	lsls	r3, r3, #2
   263d6:	2210      	movs	r2, #16
   263d8:	4694      	mov	ip, r2
   263da:	44bc      	add	ip, r7
   263dc:	4463      	add	r3, ip
   263de:	3b08      	subs	r3, #8
   263e0:	681b      	ldr	r3, [r3, #0]
   263e2:	e000      	b.n	263e6 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   263e4:	2300      	movs	r3, #0
}
   263e6:	0018      	movs	r0, r3
   263e8:	46bd      	mov	sp, r7
   263ea:	b004      	add	sp, #16
   263ec:	bd80      	pop	{r7, pc}
   263ee:	46c0      	nop			; (mov r8, r8)
   263f0:	40001800 	.word	0x40001800

000263f4 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   263f4:	b580      	push	{r7, lr}
   263f6:	b082      	sub	sp, #8
   263f8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   263fa:	4b0f      	ldr	r3, [pc, #60]	; (26438 <extint_is_syncing+0x44>)
   263fc:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   263fe:	2300      	movs	r3, #0
   26400:	607b      	str	r3, [r7, #4]
   26402:	e011      	b.n	26428 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   26404:	687b      	ldr	r3, [r7, #4]
   26406:	009b      	lsls	r3, r3, #2
   26408:	2208      	movs	r2, #8
   2640a:	4694      	mov	ip, r2
   2640c:	44bc      	add	ip, r7
   2640e:	4463      	add	r3, ip
   26410:	3b08      	subs	r3, #8
   26412:	681b      	ldr	r3, [r3, #0]
   26414:	785b      	ldrb	r3, [r3, #1]
   26416:	b2db      	uxtb	r3, r3
   26418:	b25b      	sxtb	r3, r3
   2641a:	2b00      	cmp	r3, #0
   2641c:	da01      	bge.n	26422 <extint_is_syncing+0x2e>
			return true;
   2641e:	2301      	movs	r3, #1
   26420:	e006      	b.n	26430 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26422:	687b      	ldr	r3, [r7, #4]
   26424:	3301      	adds	r3, #1
   26426:	607b      	str	r3, [r7, #4]
   26428:	687b      	ldr	r3, [r7, #4]
   2642a:	2b00      	cmp	r3, #0
   2642c:	d0ea      	beq.n	26404 <extint_is_syncing+0x10>
		}
	}
	return false;
   2642e:	2300      	movs	r3, #0
}
   26430:	0018      	movs	r0, r3
   26432:	46bd      	mov	sp, r7
   26434:	b002      	add	sp, #8
   26436:	bd80      	pop	{r7, pc}
   26438:	40001800 	.word	0x40001800

0002643c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   2643c:	b580      	push	{r7, lr}
   2643e:	b084      	sub	sp, #16
   26440:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26442:	4b2d      	ldr	r3, [pc, #180]	; (264f8 <_system_extint_init+0xbc>)
   26444:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   26446:	2140      	movs	r1, #64	; 0x40
   26448:	2000      	movs	r0, #0
   2644a:	4b2c      	ldr	r3, [pc, #176]	; (264fc <_system_extint_init+0xc0>)
   2644c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2644e:	003b      	movs	r3, r7
   26450:	0018      	movs	r0, r3
   26452:	4b2b      	ldr	r3, [pc, #172]	; (26500 <_system_extint_init+0xc4>)
   26454:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   26456:	003b      	movs	r3, r7
   26458:	2200      	movs	r2, #0
   2645a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   2645c:	003b      	movs	r3, r7
   2645e:	0019      	movs	r1, r3
   26460:	2005      	movs	r0, #5
   26462:	4b28      	ldr	r3, [pc, #160]	; (26504 <_system_extint_init+0xc8>)
   26464:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   26466:	2005      	movs	r0, #5
   26468:	4b27      	ldr	r3, [pc, #156]	; (26508 <_system_extint_init+0xcc>)
   2646a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2646c:	2300      	movs	r3, #0
   2646e:	60fb      	str	r3, [r7, #12]
   26470:	e018      	b.n	264a4 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   26472:	68fb      	ldr	r3, [r7, #12]
   26474:	009b      	lsls	r3, r3, #2
   26476:	2210      	movs	r2, #16
   26478:	4694      	mov	ip, r2
   2647a:	44bc      	add	ip, r7
   2647c:	4463      	add	r3, ip
   2647e:	3b0c      	subs	r3, #12
   26480:	681a      	ldr	r2, [r3, #0]
   26482:	68fb      	ldr	r3, [r7, #12]
   26484:	009b      	lsls	r3, r3, #2
   26486:	2110      	movs	r1, #16
   26488:	468c      	mov	ip, r1
   2648a:	44bc      	add	ip, r7
   2648c:	4463      	add	r3, ip
   2648e:	3b0c      	subs	r3, #12
   26490:	681b      	ldr	r3, [r3, #0]
   26492:	781b      	ldrb	r3, [r3, #0]
   26494:	b2db      	uxtb	r3, r3
   26496:	2101      	movs	r1, #1
   26498:	430b      	orrs	r3, r1
   2649a:	b2db      	uxtb	r3, r3
   2649c:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2649e:	68fb      	ldr	r3, [r7, #12]
   264a0:	3301      	adds	r3, #1
   264a2:	60fb      	str	r3, [r7, #12]
   264a4:	68fb      	ldr	r3, [r7, #12]
   264a6:	2b00      	cmp	r3, #0
   264a8:	d0e3      	beq.n	26472 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   264aa:	46c0      	nop			; (mov r8, r8)
   264ac:	4b17      	ldr	r3, [pc, #92]	; (2650c <_system_extint_init+0xd0>)
   264ae:	4798      	blx	r3
   264b0:	1e03      	subs	r3, r0, #0
   264b2:	d1fb      	bne.n	264ac <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   264b4:	230b      	movs	r3, #11
   264b6:	18fb      	adds	r3, r7, r3
   264b8:	2200      	movs	r2, #0
   264ba:	701a      	strb	r2, [r3, #0]
   264bc:	e00d      	b.n	264da <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   264be:	230b      	movs	r3, #11
   264c0:	18fb      	adds	r3, r7, r3
   264c2:	781a      	ldrb	r2, [r3, #0]
   264c4:	4b12      	ldr	r3, [pc, #72]	; (26510 <_system_extint_init+0xd4>)
   264c6:	0092      	lsls	r2, r2, #2
   264c8:	2100      	movs	r1, #0
   264ca:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   264cc:	230b      	movs	r3, #11
   264ce:	18fb      	adds	r3, r7, r3
   264d0:	781a      	ldrb	r2, [r3, #0]
   264d2:	230b      	movs	r3, #11
   264d4:	18fb      	adds	r3, r7, r3
   264d6:	3201      	adds	r2, #1
   264d8:	701a      	strb	r2, [r3, #0]
   264da:	230b      	movs	r3, #11
   264dc:	18fb      	adds	r3, r7, r3
   264de:	781b      	ldrb	r3, [r3, #0]
   264e0:	2b0f      	cmp	r3, #15
   264e2:	d9ec      	bls.n	264be <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   264e4:	2004      	movs	r0, #4
   264e6:	4b0b      	ldr	r3, [pc, #44]	; (26514 <_system_extint_init+0xd8>)
   264e8:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   264ea:	4b0b      	ldr	r3, [pc, #44]	; (26518 <_system_extint_init+0xdc>)
   264ec:	4798      	blx	r3
}
   264ee:	46c0      	nop			; (mov r8, r8)
   264f0:	46bd      	mov	sp, r7
   264f2:	b004      	add	sp, #16
   264f4:	bd80      	pop	{r7, pc}
   264f6:	46c0      	nop			; (mov r8, r8)
   264f8:	40001800 	.word	0x40001800
   264fc:	000262f9 	.word	0x000262f9
   26500:	000262e1 	.word	0x000262e1
   26504:	00029b69 	.word	0x00029b69
   26508:	00029bad 	.word	0x00029bad
   2650c:	000263f5 	.word	0x000263f5
   26510:	20005a1c 	.word	0x20005a1c
   26514:	0002637d 	.word	0x0002637d
   26518:	0002651d 	.word	0x0002651d

0002651c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   2651c:	b580      	push	{r7, lr}
   2651e:	b082      	sub	sp, #8
   26520:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26522:	4b15      	ldr	r3, [pc, #84]	; (26578 <_extint_enable+0x5c>)
   26524:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26526:	2300      	movs	r3, #0
   26528:	607b      	str	r3, [r7, #4]
   2652a:	e018      	b.n	2655e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   2652c:	687b      	ldr	r3, [r7, #4]
   2652e:	009b      	lsls	r3, r3, #2
   26530:	2208      	movs	r2, #8
   26532:	4694      	mov	ip, r2
   26534:	44bc      	add	ip, r7
   26536:	4463      	add	r3, ip
   26538:	3b08      	subs	r3, #8
   2653a:	681a      	ldr	r2, [r3, #0]
   2653c:	687b      	ldr	r3, [r7, #4]
   2653e:	009b      	lsls	r3, r3, #2
   26540:	2108      	movs	r1, #8
   26542:	468c      	mov	ip, r1
   26544:	44bc      	add	ip, r7
   26546:	4463      	add	r3, ip
   26548:	3b08      	subs	r3, #8
   2654a:	681b      	ldr	r3, [r3, #0]
   2654c:	781b      	ldrb	r3, [r3, #0]
   2654e:	b2db      	uxtb	r3, r3
   26550:	2102      	movs	r1, #2
   26552:	430b      	orrs	r3, r1
   26554:	b2db      	uxtb	r3, r3
   26556:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26558:	687b      	ldr	r3, [r7, #4]
   2655a:	3301      	adds	r3, #1
   2655c:	607b      	str	r3, [r7, #4]
   2655e:	687b      	ldr	r3, [r7, #4]
   26560:	2b00      	cmp	r3, #0
   26562:	d0e3      	beq.n	2652c <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   26564:	46c0      	nop			; (mov r8, r8)
   26566:	4b05      	ldr	r3, [pc, #20]	; (2657c <_extint_enable+0x60>)
   26568:	4798      	blx	r3
   2656a:	1e03      	subs	r3, r0, #0
   2656c:	d1fb      	bne.n	26566 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   2656e:	46c0      	nop			; (mov r8, r8)
   26570:	46bd      	mov	sp, r7
   26572:	b002      	add	sp, #8
   26574:	bd80      	pop	{r7, pc}
   26576:	46c0      	nop			; (mov r8, r8)
   26578:	40001800 	.word	0x40001800
   2657c:	000263f5 	.word	0x000263f5

00026580 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   26580:	b580      	push	{r7, lr}
   26582:	b082      	sub	sp, #8
   26584:	af00      	add	r7, sp, #0
   26586:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   26588:	687b      	ldr	r3, [r7, #4]
   2658a:	2200      	movs	r2, #0
   2658c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   2658e:	687b      	ldr	r3, [r7, #4]
   26590:	2200      	movs	r2, #0
   26592:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   26594:	687b      	ldr	r3, [r7, #4]
   26596:	2201      	movs	r2, #1
   26598:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   2659a:	687b      	ldr	r3, [r7, #4]
   2659c:	2201      	movs	r2, #1
   2659e:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   265a0:	687b      	ldr	r3, [r7, #4]
   265a2:	2200      	movs	r2, #0
   265a4:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   265a6:	687b      	ldr	r3, [r7, #4]
   265a8:	2202      	movs	r2, #2
   265aa:	72da      	strb	r2, [r3, #11]
}
   265ac:	46c0      	nop			; (mov r8, r8)
   265ae:	46bd      	mov	sp, r7
   265b0:	b002      	add	sp, #8
   265b2:	bd80      	pop	{r7, pc}

000265b4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   265b4:	b580      	push	{r7, lr}
   265b6:	b086      	sub	sp, #24
   265b8:	af00      	add	r7, sp, #0
   265ba:	0002      	movs	r2, r0
   265bc:	6039      	str	r1, [r7, #0]
   265be:	1dfb      	adds	r3, r7, #7
   265c0:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   265c2:	2308      	movs	r3, #8
   265c4:	18fb      	adds	r3, r7, r3
   265c6:	0018      	movs	r0, r3
   265c8:	4b36      	ldr	r3, [pc, #216]	; (266a4 <extint_chan_set_config+0xf0>)
   265ca:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   265cc:	683b      	ldr	r3, [r7, #0]
   265ce:	685b      	ldr	r3, [r3, #4]
   265d0:	b2da      	uxtb	r2, r3
   265d2:	2308      	movs	r3, #8
   265d4:	18fb      	adds	r3, r7, r3
   265d6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   265d8:	2308      	movs	r3, #8
   265da:	18fb      	adds	r3, r7, r3
   265dc:	2200      	movs	r2, #0
   265de:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   265e0:	683b      	ldr	r3, [r7, #0]
   265e2:	7a1a      	ldrb	r2, [r3, #8]
   265e4:	2308      	movs	r3, #8
   265e6:	18fb      	adds	r3, r7, r3
   265e8:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   265ea:	683b      	ldr	r3, [r7, #0]
   265ec:	681b      	ldr	r3, [r3, #0]
   265ee:	b2db      	uxtb	r3, r3
   265f0:	2208      	movs	r2, #8
   265f2:	18ba      	adds	r2, r7, r2
   265f4:	0011      	movs	r1, r2
   265f6:	0018      	movs	r0, r3
   265f8:	4b2b      	ldr	r3, [pc, #172]	; (266a8 <extint_chan_set_config+0xf4>)
   265fa:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   265fc:	1dfb      	adds	r3, r7, #7
   265fe:	781b      	ldrb	r3, [r3, #0]
   26600:	0018      	movs	r0, r3
   26602:	4b2a      	ldr	r3, [pc, #168]	; (266ac <extint_chan_set_config+0xf8>)
   26604:	4798      	blx	r3
   26606:	0003      	movs	r3, r0
   26608:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   2660a:	1dfb      	adds	r3, r7, #7
   2660c:	781b      	ldrb	r3, [r3, #0]
   2660e:	2207      	movs	r2, #7
   26610:	4013      	ands	r3, r2
   26612:	009b      	lsls	r3, r3, #2
   26614:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   26616:	683b      	ldr	r3, [r7, #0]
   26618:	7adb      	ldrb	r3, [r3, #11]
   2661a:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   2661c:	683b      	ldr	r3, [r7, #0]
   2661e:	7a9b      	ldrb	r3, [r3, #10]
   26620:	2b00      	cmp	r3, #0
   26622:	d003      	beq.n	2662c <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   26624:	697b      	ldr	r3, [r7, #20]
   26626:	2208      	movs	r2, #8
   26628:	4313      	orrs	r3, r2
   2662a:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   2662c:	1dfb      	adds	r3, r7, #7
   2662e:	781b      	ldrb	r3, [r3, #0]
   26630:	08db      	lsrs	r3, r3, #3
   26632:	b2db      	uxtb	r3, r3
   26634:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   26636:	1dfb      	adds	r3, r7, #7
   26638:	781b      	ldrb	r3, [r3, #0]
   2663a:	08db      	lsrs	r3, r3, #3
   2663c:	b2db      	uxtb	r3, r3
   2663e:	001a      	movs	r2, r3
   26640:	693b      	ldr	r3, [r7, #16]
   26642:	3206      	adds	r2, #6
   26644:	0092      	lsls	r2, r2, #2
   26646:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   26648:	210f      	movs	r1, #15
   2664a:	68fa      	ldr	r2, [r7, #12]
   2664c:	4091      	lsls	r1, r2
   2664e:	000a      	movs	r2, r1
   26650:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26652:	401a      	ands	r2, r3
			(new_config << config_pos);
   26654:	6979      	ldr	r1, [r7, #20]
   26656:	68fb      	ldr	r3, [r7, #12]
   26658:	4099      	lsls	r1, r3
   2665a:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   2665c:	431a      	orrs	r2, r3
   2665e:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26660:	693b      	ldr	r3, [r7, #16]
   26662:	1d82      	adds	r2, r0, #6
   26664:	0092      	lsls	r2, r2, #2
   26666:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   26668:	683b      	ldr	r3, [r7, #0]
   2666a:	7a5b      	ldrb	r3, [r3, #9]
   2666c:	2b00      	cmp	r3, #0
   2666e:	d00a      	beq.n	26686 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   26670:	693b      	ldr	r3, [r7, #16]
   26672:	695a      	ldr	r2, [r3, #20]
   26674:	1dfb      	adds	r3, r7, #7
   26676:	781b      	ldrb	r3, [r3, #0]
   26678:	2101      	movs	r1, #1
   2667a:	4099      	lsls	r1, r3
   2667c:	000b      	movs	r3, r1
   2667e:	431a      	orrs	r2, r3
   26680:	693b      	ldr	r3, [r7, #16]
   26682:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   26684:	e00a      	b.n	2669c <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   26686:	693b      	ldr	r3, [r7, #16]
   26688:	695b      	ldr	r3, [r3, #20]
   2668a:	1dfa      	adds	r2, r7, #7
   2668c:	7812      	ldrb	r2, [r2, #0]
   2668e:	2101      	movs	r1, #1
   26690:	4091      	lsls	r1, r2
   26692:	000a      	movs	r2, r1
   26694:	43d2      	mvns	r2, r2
   26696:	401a      	ands	r2, r3
   26698:	693b      	ldr	r3, [r7, #16]
   2669a:	615a      	str	r2, [r3, #20]
}
   2669c:	46c0      	nop			; (mov r8, r8)
   2669e:	46bd      	mov	sp, r7
   266a0:	b006      	add	sp, #24
   266a2:	bd80      	pop	{r7, pc}
   266a4:	00026355 	.word	0x00026355
   266a8:	00029ec9 	.word	0x00029ec9
   266ac:	000263a9 	.word	0x000263a9

000266b0 <system_pinmux_get_config_defaults>:
{
   266b0:	b580      	push	{r7, lr}
   266b2:	b082      	sub	sp, #8
   266b4:	af00      	add	r7, sp, #0
   266b6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   266b8:	687b      	ldr	r3, [r7, #4]
   266ba:	2280      	movs	r2, #128	; 0x80
   266bc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   266be:	687b      	ldr	r3, [r7, #4]
   266c0:	2200      	movs	r2, #0
   266c2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   266c4:	687b      	ldr	r3, [r7, #4]
   266c6:	2201      	movs	r2, #1
   266c8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   266ca:	687b      	ldr	r3, [r7, #4]
   266cc:	2200      	movs	r2, #0
   266ce:	70da      	strb	r2, [r3, #3]
}
   266d0:	46c0      	nop			; (mov r8, r8)
   266d2:	46bd      	mov	sp, r7
   266d4:	b002      	add	sp, #8
   266d6:	bd80      	pop	{r7, pc}

000266d8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   266d8:	b580      	push	{r7, lr}
   266da:	b084      	sub	sp, #16
   266dc:	af00      	add	r7, sp, #0
   266de:	0002      	movs	r2, r0
   266e0:	6039      	str	r1, [r7, #0]
   266e2:	1dfb      	adds	r3, r7, #7
   266e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   266e6:	230c      	movs	r3, #12
   266e8:	18fb      	adds	r3, r7, r3
   266ea:	0018      	movs	r0, r3
   266ec:	4b10      	ldr	r3, [pc, #64]	; (26730 <port_pin_set_config+0x58>)
   266ee:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   266f0:	230c      	movs	r3, #12
   266f2:	18fb      	adds	r3, r7, r3
   266f4:	2280      	movs	r2, #128	; 0x80
   266f6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   266f8:	683b      	ldr	r3, [r7, #0]
   266fa:	781a      	ldrb	r2, [r3, #0]
   266fc:	230c      	movs	r3, #12
   266fe:	18fb      	adds	r3, r7, r3
   26700:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   26702:	683b      	ldr	r3, [r7, #0]
   26704:	785a      	ldrb	r2, [r3, #1]
   26706:	230c      	movs	r3, #12
   26708:	18fb      	adds	r3, r7, r3
   2670a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   2670c:	683b      	ldr	r3, [r7, #0]
   2670e:	789a      	ldrb	r2, [r3, #2]
   26710:	230c      	movs	r3, #12
   26712:	18fb      	adds	r3, r7, r3
   26714:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   26716:	230c      	movs	r3, #12
   26718:	18fa      	adds	r2, r7, r3
   2671a:	1dfb      	adds	r3, r7, #7
   2671c:	781b      	ldrb	r3, [r3, #0]
   2671e:	0011      	movs	r1, r2
   26720:	0018      	movs	r0, r3
   26722:	4b04      	ldr	r3, [pc, #16]	; (26734 <port_pin_set_config+0x5c>)
   26724:	4798      	blx	r3
}
   26726:	46c0      	nop			; (mov r8, r8)
   26728:	46bd      	mov	sp, r7
   2672a:	b004      	add	sp, #16
   2672c:	bd80      	pop	{r7, pc}
   2672e:	46c0      	nop			; (mov r8, r8)
   26730:	000266b1 	.word	0x000266b1
   26734:	00029ec9 	.word	0x00029ec9

00026738 <system_gclk_chan_get_config_defaults>:
{
   26738:	b580      	push	{r7, lr}
   2673a:	b082      	sub	sp, #8
   2673c:	af00      	add	r7, sp, #0
   2673e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26740:	687b      	ldr	r3, [r7, #4]
   26742:	2200      	movs	r2, #0
   26744:	701a      	strb	r2, [r3, #0]
}
   26746:	46c0      	nop			; (mov r8, r8)
   26748:	46bd      	mov	sp, r7
   2674a:	b002      	add	sp, #8
   2674c:	bd80      	pop	{r7, pc}
	...

00026750 <system_apb_clock_set_mask>:
{
   26750:	b580      	push	{r7, lr}
   26752:	b082      	sub	sp, #8
   26754:	af00      	add	r7, sp, #0
   26756:	0002      	movs	r2, r0
   26758:	6039      	str	r1, [r7, #0]
   2675a:	1dfb      	adds	r3, r7, #7
   2675c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2675e:	1dfb      	adds	r3, r7, #7
   26760:	781b      	ldrb	r3, [r3, #0]
   26762:	2b01      	cmp	r3, #1
   26764:	d00a      	beq.n	2677c <system_apb_clock_set_mask+0x2c>
   26766:	2b02      	cmp	r3, #2
   26768:	d00f      	beq.n	2678a <system_apb_clock_set_mask+0x3a>
   2676a:	2b00      	cmp	r3, #0
   2676c:	d114      	bne.n	26798 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2676e:	4b0e      	ldr	r3, [pc, #56]	; (267a8 <system_apb_clock_set_mask+0x58>)
   26770:	4a0d      	ldr	r2, [pc, #52]	; (267a8 <system_apb_clock_set_mask+0x58>)
   26772:	6991      	ldr	r1, [r2, #24]
   26774:	683a      	ldr	r2, [r7, #0]
   26776:	430a      	orrs	r2, r1
   26778:	619a      	str	r2, [r3, #24]
			break;
   2677a:	e00f      	b.n	2679c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2677c:	4b0a      	ldr	r3, [pc, #40]	; (267a8 <system_apb_clock_set_mask+0x58>)
   2677e:	4a0a      	ldr	r2, [pc, #40]	; (267a8 <system_apb_clock_set_mask+0x58>)
   26780:	69d1      	ldr	r1, [r2, #28]
   26782:	683a      	ldr	r2, [r7, #0]
   26784:	430a      	orrs	r2, r1
   26786:	61da      	str	r2, [r3, #28]
			break;
   26788:	e008      	b.n	2679c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2678a:	4b07      	ldr	r3, [pc, #28]	; (267a8 <system_apb_clock_set_mask+0x58>)
   2678c:	4a06      	ldr	r2, [pc, #24]	; (267a8 <system_apb_clock_set_mask+0x58>)
   2678e:	6a11      	ldr	r1, [r2, #32]
   26790:	683a      	ldr	r2, [r7, #0]
   26792:	430a      	orrs	r2, r1
   26794:	621a      	str	r2, [r3, #32]
			break;
   26796:	e001      	b.n	2679c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26798:	2317      	movs	r3, #23
   2679a:	e000      	b.n	2679e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2679c:	2300      	movs	r3, #0
}
   2679e:	0018      	movs	r0, r3
   267a0:	46bd      	mov	sp, r7
   267a2:	b002      	add	sp, #8
   267a4:	bd80      	pop	{r7, pc}
   267a6:	46c0      	nop			; (mov r8, r8)
   267a8:	40000400 	.word	0x40000400

000267ac <system_interrupt_enable>:
{
   267ac:	b580      	push	{r7, lr}
   267ae:	b082      	sub	sp, #8
   267b0:	af00      	add	r7, sp, #0
   267b2:	0002      	movs	r2, r0
   267b4:	1dfb      	adds	r3, r7, #7
   267b6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   267b8:	4b06      	ldr	r3, [pc, #24]	; (267d4 <system_interrupt_enable+0x28>)
   267ba:	1dfa      	adds	r2, r7, #7
   267bc:	7812      	ldrb	r2, [r2, #0]
   267be:	0011      	movs	r1, r2
   267c0:	221f      	movs	r2, #31
   267c2:	400a      	ands	r2, r1
   267c4:	2101      	movs	r1, #1
   267c6:	4091      	lsls	r1, r2
   267c8:	000a      	movs	r2, r1
   267ca:	601a      	str	r2, [r3, #0]
}
   267cc:	46c0      	nop			; (mov r8, r8)
   267ce:	46bd      	mov	sp, r7
   267d0:	b002      	add	sp, #8
   267d2:	bd80      	pop	{r7, pc}
   267d4:	e000e100 	.word	0xe000e100

000267d8 <system_interrupt_disable>:
{
   267d8:	b580      	push	{r7, lr}
   267da:	b082      	sub	sp, #8
   267dc:	af00      	add	r7, sp, #0
   267de:	0002      	movs	r2, r0
   267e0:	1dfb      	adds	r3, r7, #7
   267e2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   267e4:	4a07      	ldr	r2, [pc, #28]	; (26804 <system_interrupt_disable+0x2c>)
   267e6:	1dfb      	adds	r3, r7, #7
   267e8:	781b      	ldrb	r3, [r3, #0]
   267ea:	0019      	movs	r1, r3
   267ec:	231f      	movs	r3, #31
   267ee:	400b      	ands	r3, r1
   267f0:	2101      	movs	r1, #1
   267f2:	4099      	lsls	r1, r3
   267f4:	000b      	movs	r3, r1
   267f6:	0019      	movs	r1, r3
   267f8:	2380      	movs	r3, #128	; 0x80
   267fa:	50d1      	str	r1, [r2, r3]
}
   267fc:	46c0      	nop			; (mov r8, r8)
   267fe:	46bd      	mov	sp, r7
   26800:	b002      	add	sp, #8
   26802:	bd80      	pop	{r7, pc}
   26804:	e000e100 	.word	0xe000e100

00026808 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   26808:	b580      	push	{r7, lr}
   2680a:	b084      	sub	sp, #16
   2680c:	af00      	add	r7, sp, #0
   2680e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26810:	687b      	ldr	r3, [r7, #4]
   26812:	681b      	ldr	r3, [r3, #0]
   26814:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   26816:	68fb      	ldr	r3, [r7, #12]
   26818:	7a9b      	ldrb	r3, [r3, #10]
   2681a:	b2db      	uxtb	r3, r3
   2681c:	b25b      	sxtb	r3, r3
   2681e:	2b00      	cmp	r3, #0
   26820:	da01      	bge.n	26826 <rtc_calendar_is_syncing+0x1e>
                return true;
   26822:	2301      	movs	r3, #1
   26824:	e000      	b.n	26828 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   26826:	2300      	movs	r3, #0
}
   26828:	0018      	movs	r0, r3
   2682a:	46bd      	mov	sp, r7
   2682c:	b004      	add	sp, #16
   2682e:	bd80      	pop	{r7, pc}

00026830 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   26830:	b580      	push	{r7, lr}
   26832:	b084      	sub	sp, #16
   26834:	af00      	add	r7, sp, #0
   26836:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26838:	687b      	ldr	r3, [r7, #4]
   2683a:	681b      	ldr	r3, [r3, #0]
   2683c:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   2683e:	2003      	movs	r0, #3
   26840:	4b0a      	ldr	r3, [pc, #40]	; (2686c <rtc_calendar_enable+0x3c>)
   26842:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26844:	46c0      	nop			; (mov r8, r8)
   26846:	687b      	ldr	r3, [r7, #4]
   26848:	0018      	movs	r0, r3
   2684a:	4b09      	ldr	r3, [pc, #36]	; (26870 <rtc_calendar_enable+0x40>)
   2684c:	4798      	blx	r3
   2684e:	1e03      	subs	r3, r0, #0
   26850:	d1f9      	bne.n	26846 <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   26852:	68fb      	ldr	r3, [r7, #12]
   26854:	881b      	ldrh	r3, [r3, #0]
   26856:	b29b      	uxth	r3, r3
   26858:	2202      	movs	r2, #2
   2685a:	4313      	orrs	r3, r2
   2685c:	b29a      	uxth	r2, r3
   2685e:	68fb      	ldr	r3, [r7, #12]
   26860:	801a      	strh	r2, [r3, #0]
}
   26862:	46c0      	nop			; (mov r8, r8)
   26864:	46bd      	mov	sp, r7
   26866:	b004      	add	sp, #16
   26868:	bd80      	pop	{r7, pc}
   2686a:	46c0      	nop			; (mov r8, r8)
   2686c:	000267ad 	.word	0x000267ad
   26870:	00026809 	.word	0x00026809

00026874 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   26874:	b580      	push	{r7, lr}
   26876:	b084      	sub	sp, #16
   26878:	af00      	add	r7, sp, #0
   2687a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2687c:	687b      	ldr	r3, [r7, #4]
   2687e:	681b      	ldr	r3, [r3, #0]
   26880:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   26882:	2003      	movs	r0, #3
   26884:	4b0d      	ldr	r3, [pc, #52]	; (268bc <rtc_calendar_disable+0x48>)
   26886:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26888:	46c0      	nop			; (mov r8, r8)
   2688a:	687b      	ldr	r3, [r7, #4]
   2688c:	0018      	movs	r0, r3
   2688e:	4b0c      	ldr	r3, [pc, #48]	; (268c0 <rtc_calendar_disable+0x4c>)
   26890:	4798      	blx	r3
   26892:	1e03      	subs	r3, r0, #0
   26894:	d1f9      	bne.n	2688a <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   26896:	68fb      	ldr	r3, [r7, #12]
   26898:	22c1      	movs	r2, #193	; 0xc1
   2689a:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   2689c:	68fb      	ldr	r3, [r7, #12]
   2689e:	22c1      	movs	r2, #193	; 0xc1
   268a0:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   268a2:	68fb      	ldr	r3, [r7, #12]
   268a4:	881b      	ldrh	r3, [r3, #0]
   268a6:	b29b      	uxth	r3, r3
   268a8:	2202      	movs	r2, #2
   268aa:	4393      	bics	r3, r2
   268ac:	b29a      	uxth	r2, r3
   268ae:	68fb      	ldr	r3, [r7, #12]
   268b0:	801a      	strh	r2, [r3, #0]
}
   268b2:	46c0      	nop			; (mov r8, r8)
   268b4:	46bd      	mov	sp, r7
   268b6:	b004      	add	sp, #16
   268b8:	bd80      	pop	{r7, pc}
   268ba:	46c0      	nop			; (mov r8, r8)
   268bc:	000267d9 	.word	0x000267d9
   268c0:	00026809 	.word	0x00026809

000268c4 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   268c4:	b580      	push	{r7, lr}
   268c6:	b084      	sub	sp, #16
   268c8:	af00      	add	r7, sp, #0
   268ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   268cc:	687b      	ldr	r3, [r7, #4]
   268ce:	681b      	ldr	r3, [r3, #0]
   268d0:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   268d2:	687b      	ldr	r3, [r7, #4]
   268d4:	0018      	movs	r0, r3
   268d6:	4b0d      	ldr	r3, [pc, #52]	; (2690c <rtc_calendar_reset+0x48>)
   268d8:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   268da:	687b      	ldr	r3, [r7, #4]
   268dc:	2200      	movs	r2, #0
   268de:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   268e0:	687b      	ldr	r3, [r7, #4]
   268e2:	2200      	movs	r2, #0
   268e4:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   268e6:	46c0      	nop			; (mov r8, r8)
   268e8:	687b      	ldr	r3, [r7, #4]
   268ea:	0018      	movs	r0, r3
   268ec:	4b08      	ldr	r3, [pc, #32]	; (26910 <rtc_calendar_reset+0x4c>)
   268ee:	4798      	blx	r3
   268f0:	1e03      	subs	r3, r0, #0
   268f2:	d1f9      	bne.n	268e8 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   268f4:	68fb      	ldr	r3, [r7, #12]
   268f6:	881b      	ldrh	r3, [r3, #0]
   268f8:	b29b      	uxth	r3, r3
   268fa:	2201      	movs	r2, #1
   268fc:	4313      	orrs	r3, r2
   268fe:	b29a      	uxth	r2, r3
   26900:	68fb      	ldr	r3, [r7, #12]
   26902:	801a      	strh	r2, [r3, #0]
}
   26904:	46c0      	nop			; (mov r8, r8)
   26906:	46bd      	mov	sp, r7
   26908:	b004      	add	sp, #16
   2690a:	bd80      	pop	{r7, pc}
   2690c:	00026875 	.word	0x00026875
   26910:	00026809 	.word	0x00026809

00026914 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   26914:	b580      	push	{r7, lr}
   26916:	b084      	sub	sp, #16
   26918:	af00      	add	r7, sp, #0
   2691a:	6078      	str	r0, [r7, #4]
   2691c:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   2691e:	683b      	ldr	r3, [r7, #0]
   26920:	88db      	ldrh	r3, [r3, #6]
   26922:	001a      	movs	r2, r3
   26924:	687b      	ldr	r3, [r7, #4]
   26926:	88db      	ldrh	r3, [r3, #6]
   26928:	1ad3      	subs	r3, r2, r3
   2692a:	069b      	lsls	r3, r3, #26
   2692c:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   2692e:	683b      	ldr	r3, [r7, #0]
   26930:	795b      	ldrb	r3, [r3, #5]
   26932:	059b      	lsls	r3, r3, #22
   26934:	001a      	movs	r2, r3
   26936:	68fb      	ldr	r3, [r7, #12]
   26938:	4313      	orrs	r3, r2
   2693a:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   2693c:	683b      	ldr	r3, [r7, #0]
   2693e:	791b      	ldrb	r3, [r3, #4]
   26940:	045b      	lsls	r3, r3, #17
   26942:	001a      	movs	r2, r3
   26944:	68fb      	ldr	r3, [r7, #12]
   26946:	4313      	orrs	r3, r2
   26948:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   2694a:	683b      	ldr	r3, [r7, #0]
   2694c:	789b      	ldrb	r3, [r3, #2]
   2694e:	031b      	lsls	r3, r3, #12
   26950:	001a      	movs	r2, r3
   26952:	68fb      	ldr	r3, [r7, #12]
   26954:	4313      	orrs	r3, r2
   26956:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   26958:	687b      	ldr	r3, [r7, #4]
   2695a:	791b      	ldrb	r3, [r3, #4]
   2695c:	2201      	movs	r2, #1
   2695e:	4053      	eors	r3, r2
   26960:	b2db      	uxtb	r3, r3
   26962:	2b00      	cmp	r3, #0
   26964:	d008      	beq.n	26978 <rtc_calendar_time_to_register_value+0x64>
   26966:	683b      	ldr	r3, [r7, #0]
   26968:	78db      	ldrb	r3, [r3, #3]
   2696a:	2b00      	cmp	r3, #0
   2696c:	d004      	beq.n	26978 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   2696e:	68fb      	ldr	r3, [r7, #12]
   26970:	2280      	movs	r2, #128	; 0x80
   26972:	0252      	lsls	r2, r2, #9
   26974:	4313      	orrs	r3, r2
   26976:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   26978:	683b      	ldr	r3, [r7, #0]
   2697a:	785b      	ldrb	r3, [r3, #1]
   2697c:	019b      	lsls	r3, r3, #6
   2697e:	001a      	movs	r2, r3
   26980:	68fb      	ldr	r3, [r7, #12]
   26982:	4313      	orrs	r3, r2
   26984:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   26986:	683b      	ldr	r3, [r7, #0]
   26988:	781b      	ldrb	r3, [r3, #0]
   2698a:	001a      	movs	r2, r3
   2698c:	68fb      	ldr	r3, [r7, #12]
   2698e:	4313      	orrs	r3, r2
   26990:	60fb      	str	r3, [r7, #12]

	return register_value;
   26992:	68fb      	ldr	r3, [r7, #12]
}
   26994:	0018      	movs	r0, r3
   26996:	46bd      	mov	sp, r7
   26998:	b004      	add	sp, #16
   2699a:	bd80      	pop	{r7, pc}

0002699c <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   2699c:	b580      	push	{r7, lr}
   2699e:	b084      	sub	sp, #16
   269a0:	af00      	add	r7, sp, #0
   269a2:	60f8      	str	r0, [r7, #12]
   269a4:	60b9      	str	r1, [r7, #8]
   269a6:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   269a8:	68bb      	ldr	r3, [r7, #8]
   269aa:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   269ac:	b29a      	uxth	r2, r3
   269ae:	68fb      	ldr	r3, [r7, #12]
   269b0:	88db      	ldrh	r3, [r3, #6]
   269b2:	18d3      	adds	r3, r2, r3
   269b4:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   269b6:	687b      	ldr	r3, [r7, #4]
   269b8:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   269ba:	68bb      	ldr	r3, [r7, #8]
   269bc:	0d9b      	lsrs	r3, r3, #22
   269be:	b2db      	uxtb	r3, r3
   269c0:	220f      	movs	r2, #15
   269c2:	4013      	ands	r3, r2
   269c4:	b2da      	uxtb	r2, r3
   269c6:	687b      	ldr	r3, [r7, #4]
   269c8:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   269ca:	68bb      	ldr	r3, [r7, #8]
   269cc:	0c5b      	lsrs	r3, r3, #17
   269ce:	b2db      	uxtb	r3, r3
   269d0:	221f      	movs	r2, #31
   269d2:	4013      	ands	r3, r2
   269d4:	b2da      	uxtb	r2, r3
   269d6:	687b      	ldr	r3, [r7, #4]
   269d8:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   269da:	68fb      	ldr	r3, [r7, #12]
   269dc:	791b      	ldrb	r3, [r3, #4]
   269de:	2b00      	cmp	r3, #0
   269e0:	d008      	beq.n	269f4 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   269e2:	68bb      	ldr	r3, [r7, #8]
   269e4:	0b1b      	lsrs	r3, r3, #12
   269e6:	b2db      	uxtb	r3, r3
   269e8:	221f      	movs	r2, #31
   269ea:	4013      	ands	r3, r2
   269ec:	b2da      	uxtb	r2, r3
   269ee:	687b      	ldr	r3, [r7, #4]
   269f0:	709a      	strb	r2, [r3, #2]
   269f2:	e010      	b.n	26a16 <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   269f4:	68bb      	ldr	r3, [r7, #8]
   269f6:	0b1b      	lsrs	r3, r3, #12
   269f8:	b2db      	uxtb	r3, r3
   269fa:	220f      	movs	r2, #15
   269fc:	4013      	ands	r3, r2
   269fe:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   26a00:	687b      	ldr	r3, [r7, #4]
   26a02:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   26a04:	68ba      	ldr	r2, [r7, #8]
   26a06:	2380      	movs	r3, #128	; 0x80
   26a08:	025b      	lsls	r3, r3, #9
   26a0a:	4013      	ands	r3, r2
   26a0c:	1e5a      	subs	r2, r3, #1
   26a0e:	4193      	sbcs	r3, r2
   26a10:	b2da      	uxtb	r2, r3
   26a12:	687b      	ldr	r3, [r7, #4]
   26a14:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   26a16:	68bb      	ldr	r3, [r7, #8]
   26a18:	099b      	lsrs	r3, r3, #6
   26a1a:	b2db      	uxtb	r3, r3
   26a1c:	223f      	movs	r2, #63	; 0x3f
   26a1e:	4013      	ands	r3, r2
   26a20:	b2da      	uxtb	r2, r3
   26a22:	687b      	ldr	r3, [r7, #4]
   26a24:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   26a26:	68bb      	ldr	r3, [r7, #8]
   26a28:	b2db      	uxtb	r3, r3
   26a2a:	223f      	movs	r2, #63	; 0x3f
   26a2c:	4013      	ands	r3, r2
   26a2e:	b2da      	uxtb	r2, r3
   26a30:	687b      	ldr	r3, [r7, #4]
   26a32:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   26a34:	46c0      	nop			; (mov r8, r8)
   26a36:	46bd      	mov	sp, r7
   26a38:	b004      	add	sp, #16
   26a3a:	bd80      	pop	{r7, pc}

00026a3c <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   26a3c:	b580      	push	{r7, lr}
   26a3e:	b084      	sub	sp, #16
   26a40:	af00      	add	r7, sp, #0
   26a42:	6078      	str	r0, [r7, #4]
   26a44:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26a46:	687b      	ldr	r3, [r7, #4]
   26a48:	681b      	ldr	r3, [r3, #0]
   26a4a:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   26a4c:	683b      	ldr	r3, [r7, #0]
   26a4e:	881a      	ldrh	r2, [r3, #0]
   26a50:	230e      	movs	r3, #14
   26a52:	18fb      	adds	r3, r7, r3
   26a54:	2108      	movs	r1, #8
   26a56:	430a      	orrs	r2, r1
   26a58:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   26a5a:	683b      	ldr	r3, [r7, #0]
   26a5c:	791b      	ldrb	r3, [r3, #4]
   26a5e:	2201      	movs	r2, #1
   26a60:	4053      	eors	r3, r2
   26a62:	b2db      	uxtb	r3, r3
   26a64:	2b00      	cmp	r3, #0
   26a66:	d007      	beq.n	26a78 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   26a68:	230e      	movs	r3, #14
   26a6a:	18fb      	adds	r3, r7, r3
   26a6c:	220e      	movs	r2, #14
   26a6e:	18ba      	adds	r2, r7, r2
   26a70:	8812      	ldrh	r2, [r2, #0]
   26a72:	2140      	movs	r1, #64	; 0x40
   26a74:	430a      	orrs	r2, r1
   26a76:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   26a78:	683b      	ldr	r3, [r7, #0]
   26a7a:	789b      	ldrb	r3, [r3, #2]
   26a7c:	2b00      	cmp	r3, #0
   26a7e:	d007      	beq.n	26a90 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   26a80:	230e      	movs	r3, #14
   26a82:	18fb      	adds	r3, r7, r3
   26a84:	220e      	movs	r2, #14
   26a86:	18ba      	adds	r2, r7, r2
   26a88:	8812      	ldrh	r2, [r2, #0]
   26a8a:	2180      	movs	r1, #128	; 0x80
   26a8c:	430a      	orrs	r2, r1
   26a8e:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   26a90:	68bb      	ldr	r3, [r7, #8]
   26a92:	220e      	movs	r2, #14
   26a94:	18ba      	adds	r2, r7, r2
   26a96:	8812      	ldrh	r2, [r2, #0]
   26a98:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   26a9a:	683b      	ldr	r3, [r7, #0]
   26a9c:	78db      	ldrb	r3, [r3, #3]
   26a9e:	2b00      	cmp	r3, #0
   26aa0:	d008      	beq.n	26ab4 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   26aa2:	68bb      	ldr	r3, [r7, #8]
   26aa4:	885b      	ldrh	r3, [r3, #2]
   26aa6:	b29b      	uxth	r3, r3
   26aa8:	2280      	movs	r2, #128	; 0x80
   26aaa:	01d2      	lsls	r2, r2, #7
   26aac:	4313      	orrs	r3, r2
   26aae:	b29a      	uxth	r2, r3
   26ab0:	68bb      	ldr	r3, [r7, #8]
   26ab2:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   26ab4:	230d      	movs	r3, #13
   26ab6:	18fb      	adds	r3, r7, r3
   26ab8:	2200      	movs	r2, #0
   26aba:	701a      	strb	r2, [r3, #0]
   26abc:	e017      	b.n	26aee <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   26abe:	230d      	movs	r3, #13
   26ac0:	18fb      	adds	r3, r7, r3
   26ac2:	781a      	ldrb	r2, [r3, #0]
   26ac4:	0013      	movs	r3, r2
   26ac6:	009b      	lsls	r3, r3, #2
   26ac8:	189b      	adds	r3, r3, r2
   26aca:	005b      	lsls	r3, r3, #1
   26acc:	3308      	adds	r3, #8
   26ace:	683a      	ldr	r2, [r7, #0]
   26ad0:	18d1      	adds	r1, r2, r3
   26ad2:	230d      	movs	r3, #13
   26ad4:	18fb      	adds	r3, r7, r3
   26ad6:	781a      	ldrb	r2, [r3, #0]
   26ad8:	687b      	ldr	r3, [r7, #4]
   26ada:	0018      	movs	r0, r3
   26adc:	4b08      	ldr	r3, [pc, #32]	; (26b00 <_rtc_calendar_set_config+0xc4>)
   26ade:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   26ae0:	230d      	movs	r3, #13
   26ae2:	18fb      	adds	r3, r7, r3
   26ae4:	781a      	ldrb	r2, [r3, #0]
   26ae6:	230d      	movs	r3, #13
   26ae8:	18fb      	adds	r3, r7, r3
   26aea:	3201      	adds	r2, #1
   26aec:	701a      	strb	r2, [r3, #0]
   26aee:	230d      	movs	r3, #13
   26af0:	18fb      	adds	r3, r7, r3
   26af2:	781b      	ldrb	r3, [r3, #0]
   26af4:	2b00      	cmp	r3, #0
   26af6:	d0e2      	beq.n	26abe <_rtc_calendar_set_config+0x82>
	}
}
   26af8:	46c0      	nop			; (mov r8, r8)
   26afa:	46bd      	mov	sp, r7
   26afc:	b004      	add	sp, #16
   26afe:	bd80      	pop	{r7, pc}
   26b00:	00026c25 	.word	0x00026c25

00026b04 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   26b04:	b580      	push	{r7, lr}
   26b06:	b086      	sub	sp, #24
   26b08:	af00      	add	r7, sp, #0
   26b0a:	60f8      	str	r0, [r7, #12]
   26b0c:	60b9      	str	r1, [r7, #8]
   26b0e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   26b10:	68fb      	ldr	r3, [r7, #12]
   26b12:	68ba      	ldr	r2, [r7, #8]
   26b14:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   26b16:	2120      	movs	r1, #32
   26b18:	2000      	movs	r0, #0
   26b1a:	4b18      	ldr	r3, [pc, #96]	; (26b7c <rtc_calendar_init+0x78>)
   26b1c:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26b1e:	2314      	movs	r3, #20
   26b20:	18fb      	adds	r3, r7, r3
   26b22:	0018      	movs	r0, r3
   26b24:	4b16      	ldr	r3, [pc, #88]	; (26b80 <rtc_calendar_init+0x7c>)
   26b26:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   26b28:	2314      	movs	r3, #20
   26b2a:	18fb      	adds	r3, r7, r3
   26b2c:	2202      	movs	r2, #2
   26b2e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   26b30:	2314      	movs	r3, #20
   26b32:	18fb      	adds	r3, r7, r3
   26b34:	0019      	movs	r1, r3
   26b36:	2004      	movs	r0, #4
   26b38:	4b12      	ldr	r3, [pc, #72]	; (26b84 <rtc_calendar_init+0x80>)
   26b3a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   26b3c:	2004      	movs	r0, #4
   26b3e:	4b12      	ldr	r3, [pc, #72]	; (26b88 <rtc_calendar_init+0x84>)
   26b40:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   26b42:	68fb      	ldr	r3, [r7, #12]
   26b44:	0018      	movs	r0, r3
   26b46:	4b11      	ldr	r3, [pc, #68]	; (26b8c <rtc_calendar_init+0x88>)
   26b48:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   26b4a:	687b      	ldr	r3, [r7, #4]
   26b4c:	791a      	ldrb	r2, [r3, #4]
   26b4e:	68fb      	ldr	r3, [r7, #12]
   26b50:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   26b52:	687b      	ldr	r3, [r7, #4]
   26b54:	78da      	ldrb	r2, [r3, #3]
   26b56:	68fb      	ldr	r3, [r7, #12]
   26b58:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   26b5a:	687b      	ldr	r3, [r7, #4]
   26b5c:	88da      	ldrh	r2, [r3, #6]
   26b5e:	68fb      	ldr	r3, [r7, #12]
   26b60:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   26b62:	4b0b      	ldr	r3, [pc, #44]	; (26b90 <rtc_calendar_init+0x8c>)
   26b64:	68fa      	ldr	r2, [r7, #12]
   26b66:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   26b68:	687a      	ldr	r2, [r7, #4]
   26b6a:	68fb      	ldr	r3, [r7, #12]
   26b6c:	0011      	movs	r1, r2
   26b6e:	0018      	movs	r0, r3
   26b70:	4b08      	ldr	r3, [pc, #32]	; (26b94 <rtc_calendar_init+0x90>)
   26b72:	4798      	blx	r3
}
   26b74:	46c0      	nop			; (mov r8, r8)
   26b76:	46bd      	mov	sp, r7
   26b78:	b006      	add	sp, #24
   26b7a:	bd80      	pop	{r7, pc}
   26b7c:	00026751 	.word	0x00026751
   26b80:	00026739 	.word	0x00026739
   26b84:	00029b69 	.word	0x00029b69
   26b88:	00029bad 	.word	0x00029bad
   26b8c:	000268c5 	.word	0x000268c5
   26b90:	20005a5c 	.word	0x20005a5c
   26b94:	00026a3d 	.word	0x00026a3d

00026b98 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   26b98:	b580      	push	{r7, lr}
   26b9a:	b084      	sub	sp, #16
   26b9c:	af00      	add	r7, sp, #0
   26b9e:	6078      	str	r0, [r7, #4]
   26ba0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26ba2:	687b      	ldr	r3, [r7, #4]
   26ba4:	681b      	ldr	r3, [r3, #0]
   26ba6:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   26ba8:	687b      	ldr	r3, [r7, #4]
   26baa:	795b      	ldrb	r3, [r3, #5]
   26bac:	2201      	movs	r2, #1
   26bae:	4053      	eors	r3, r2
   26bb0:	b2db      	uxtb	r3, r3
   26bb2:	2b00      	cmp	r3, #0
   26bb4:	d00a      	beq.n	26bcc <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   26bb6:	68fb      	ldr	r3, [r7, #12]
   26bb8:	4a16      	ldr	r2, [pc, #88]	; (26c14 <rtc_calendar_get_time+0x7c>)
   26bba:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   26bbc:	46c0      	nop			; (mov r8, r8)
   26bbe:	687b      	ldr	r3, [r7, #4]
   26bc0:	0018      	movs	r0, r3
   26bc2:	4b15      	ldr	r3, [pc, #84]	; (26c18 <rtc_calendar_get_time+0x80>)
   26bc4:	4798      	blx	r3
   26bc6:	1e03      	subs	r3, r0, #0
   26bc8:	d1f9      	bne.n	26bbe <rtc_calendar_get_time+0x26>
   26bca:	e016      	b.n	26bfa <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   26bcc:	68fb      	ldr	r3, [r7, #12]
   26bce:	885b      	ldrh	r3, [r3, #2]
   26bd0:	b29b      	uxth	r3, r3
   26bd2:	001a      	movs	r2, r3
   26bd4:	2380      	movs	r3, #128	; 0x80
   26bd6:	01db      	lsls	r3, r3, #7
   26bd8:	4013      	ands	r3, r2
   26bda:	d10e      	bne.n	26bfa <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   26bdc:	68fb      	ldr	r3, [r7, #12]
   26bde:	885b      	ldrh	r3, [r3, #2]
   26be0:	b29b      	uxth	r3, r3
   26be2:	4a0e      	ldr	r2, [pc, #56]	; (26c1c <rtc_calendar_get_time+0x84>)
   26be4:	4313      	orrs	r3, r2
   26be6:	b29a      	uxth	r2, r3
   26be8:	68fb      	ldr	r3, [r7, #12]
   26bea:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   26bec:	46c0      	nop			; (mov r8, r8)
   26bee:	687b      	ldr	r3, [r7, #4]
   26bf0:	0018      	movs	r0, r3
   26bf2:	4b09      	ldr	r3, [pc, #36]	; (26c18 <rtc_calendar_get_time+0x80>)
   26bf4:	4798      	blx	r3
   26bf6:	1e03      	subs	r3, r0, #0
   26bf8:	d1f9      	bne.n	26bee <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   26bfa:	68fb      	ldr	r3, [r7, #12]
   26bfc:	691b      	ldr	r3, [r3, #16]
   26bfe:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   26c00:	683a      	ldr	r2, [r7, #0]
   26c02:	68b9      	ldr	r1, [r7, #8]
   26c04:	687b      	ldr	r3, [r7, #4]
   26c06:	0018      	movs	r0, r3
   26c08:	4b05      	ldr	r3, [pc, #20]	; (26c20 <rtc_calendar_get_time+0x88>)
   26c0a:	4798      	blx	r3
}
   26c0c:	46c0      	nop			; (mov r8, r8)
   26c0e:	46bd      	mov	sp, r7
   26c10:	b004      	add	sp, #16
   26c12:	bd80      	pop	{r7, pc}
   26c14:	ffff8000 	.word	0xffff8000
   26c18:	00026809 	.word	0x00026809
   26c1c:	ffffc000 	.word	0xffffc000
   26c20:	0002699d 	.word	0x0002699d

00026c24 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   26c24:	b580      	push	{r7, lr}
   26c26:	b086      	sub	sp, #24
   26c28:	af00      	add	r7, sp, #0
   26c2a:	60f8      	str	r0, [r7, #12]
   26c2c:	60b9      	str	r1, [r7, #8]
   26c2e:	1dfb      	adds	r3, r7, #7
   26c30:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26c32:	68fb      	ldr	r3, [r7, #12]
   26c34:	681b      	ldr	r3, [r3, #0]
   26c36:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   26c38:	1dfb      	adds	r3, r7, #7
   26c3a:	781b      	ldrb	r3, [r3, #0]
   26c3c:	2b01      	cmp	r3, #1
   26c3e:	d901      	bls.n	26c44 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   26c40:	2317      	movs	r3, #23
   26c42:	e021      	b.n	26c88 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   26c44:	68ba      	ldr	r2, [r7, #8]
   26c46:	68fb      	ldr	r3, [r7, #12]
   26c48:	0011      	movs	r1, r2
   26c4a:	0018      	movs	r0, r3
   26c4c:	4b10      	ldr	r3, [pc, #64]	; (26c90 <rtc_calendar_set_alarm+0x6c>)
   26c4e:	4798      	blx	r3
   26c50:	0003      	movs	r3, r0
   26c52:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   26c54:	46c0      	nop			; (mov r8, r8)
   26c56:	68fb      	ldr	r3, [r7, #12]
   26c58:	0018      	movs	r0, r3
   26c5a:	4b0e      	ldr	r3, [pc, #56]	; (26c94 <rtc_calendar_set_alarm+0x70>)
   26c5c:	4798      	blx	r3
   26c5e:	1e03      	subs	r3, r0, #0
   26c60:	d1f9      	bne.n	26c56 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   26c62:	1dfb      	adds	r3, r7, #7
   26c64:	781a      	ldrb	r2, [r3, #0]
   26c66:	697b      	ldr	r3, [r7, #20]
   26c68:	3203      	adds	r2, #3
   26c6a:	00d2      	lsls	r2, r2, #3
   26c6c:	6939      	ldr	r1, [r7, #16]
   26c6e:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   26c70:	1dfb      	adds	r3, r7, #7
   26c72:	781b      	ldrb	r3, [r3, #0]
   26c74:	68ba      	ldr	r2, [r7, #8]
   26c76:	7a11      	ldrb	r1, [r2, #8]
   26c78:	697a      	ldr	r2, [r7, #20]
   26c7a:	3303      	adds	r3, #3
   26c7c:	00db      	lsls	r3, r3, #3
   26c7e:	18d3      	adds	r3, r2, r3
   26c80:	3304      	adds	r3, #4
   26c82:	1c0a      	adds	r2, r1, #0
   26c84:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   26c86:	2300      	movs	r3, #0
}
   26c88:	0018      	movs	r0, r3
   26c8a:	46bd      	mov	sp, r7
   26c8c:	b006      	add	sp, #24
   26c8e:	bd80      	pop	{r7, pc}
   26c90:	00026915 	.word	0x00026915
   26c94:	00026809 	.word	0x00026809

00026c98 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   26c98:	b580      	push	{r7, lr}
   26c9a:	b086      	sub	sp, #24
   26c9c:	af00      	add	r7, sp, #0
   26c9e:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   26ca0:	4b28      	ldr	r3, [pc, #160]	; (26d44 <_rtc_interrupt_handler+0xac>)
   26ca2:	687a      	ldr	r2, [r7, #4]
   26ca4:	0092      	lsls	r2, r2, #2
   26ca6:	58d3      	ldr	r3, [r2, r3]
   26ca8:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   26caa:	697b      	ldr	r3, [r7, #20]
   26cac:	681b      	ldr	r3, [r3, #0]
   26cae:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   26cb0:	230e      	movs	r3, #14
   26cb2:	18fb      	adds	r3, r7, r3
   26cb4:	697a      	ldr	r2, [r7, #20]
   26cb6:	8a52      	ldrh	r2, [r2, #18]
   26cb8:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   26cba:	697b      	ldr	r3, [r7, #20]
   26cbc:	8a1b      	ldrh	r3, [r3, #16]
   26cbe:	b29a      	uxth	r2, r3
   26cc0:	230e      	movs	r3, #14
   26cc2:	18fb      	adds	r3, r7, r3
   26cc4:	210e      	movs	r1, #14
   26cc6:	1879      	adds	r1, r7, r1
   26cc8:	8809      	ldrh	r1, [r1, #0]
   26cca:	400a      	ands	r2, r1
   26ccc:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   26cce:	693b      	ldr	r3, [r7, #16]
   26cd0:	7a1b      	ldrb	r3, [r3, #8]
   26cd2:	b2da      	uxtb	r2, r3
   26cd4:	230c      	movs	r3, #12
   26cd6:	18fb      	adds	r3, r7, r3
   26cd8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   26cda:	693b      	ldr	r3, [r7, #16]
   26cdc:	79db      	ldrb	r3, [r3, #7]
   26cde:	b2db      	uxtb	r3, r3
   26ce0:	b29a      	uxth	r2, r3
   26ce2:	230c      	movs	r3, #12
   26ce4:	18fb      	adds	r3, r7, r3
   26ce6:	210c      	movs	r1, #12
   26ce8:	1879      	adds	r1, r7, r1
   26cea:	8809      	ldrh	r1, [r1, #0]
   26cec:	400a      	ands	r2, r1
   26cee:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   26cf0:	230c      	movs	r3, #12
   26cf2:	18fb      	adds	r3, r7, r3
   26cf4:	881b      	ldrh	r3, [r3, #0]
   26cf6:	2280      	movs	r2, #128	; 0x80
   26cf8:	4013      	ands	r3, r2
   26cfa:	d00c      	beq.n	26d16 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   26cfc:	230e      	movs	r3, #14
   26cfe:	18fb      	adds	r3, r7, r3
   26d00:	881b      	ldrh	r3, [r3, #0]
   26d02:	2202      	movs	r2, #2
   26d04:	4013      	ands	r3, r2
   26d06:	d002      	beq.n	26d0e <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   26d08:	697b      	ldr	r3, [r7, #20]
   26d0a:	68db      	ldr	r3, [r3, #12]
   26d0c:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   26d0e:	693b      	ldr	r3, [r7, #16]
   26d10:	2280      	movs	r2, #128	; 0x80
   26d12:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   26d14:	e011      	b.n	26d3a <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   26d16:	230c      	movs	r3, #12
   26d18:	18fb      	adds	r3, r7, r3
   26d1a:	881b      	ldrh	r3, [r3, #0]
   26d1c:	2201      	movs	r2, #1
   26d1e:	4013      	ands	r3, r2
   26d20:	d00b      	beq.n	26d3a <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   26d22:	230e      	movs	r3, #14
   26d24:	18fb      	adds	r3, r7, r3
   26d26:	881b      	ldrh	r3, [r3, #0]
   26d28:	2201      	movs	r2, #1
   26d2a:	4013      	ands	r3, r2
   26d2c:	d002      	beq.n	26d34 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   26d2e:	697b      	ldr	r3, [r7, #20]
   26d30:	689b      	ldr	r3, [r3, #8]
   26d32:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   26d34:	693b      	ldr	r3, [r7, #16]
   26d36:	2201      	movs	r2, #1
   26d38:	721a      	strb	r2, [r3, #8]
}
   26d3a:	46c0      	nop			; (mov r8, r8)
   26d3c:	46bd      	mov	sp, r7
   26d3e:	b006      	add	sp, #24
   26d40:	bd80      	pop	{r7, pc}
   26d42:	46c0      	nop			; (mov r8, r8)
   26d44:	20005a5c 	.word	0x20005a5c

00026d48 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   26d48:	b580      	push	{r7, lr}
   26d4a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   26d4c:	2000      	movs	r0, #0
   26d4e:	4b02      	ldr	r3, [pc, #8]	; (26d58 <RTC_Handler+0x10>)
   26d50:	4798      	blx	r3
}
   26d52:	46c0      	nop			; (mov r8, r8)
   26d54:	46bd      	mov	sp, r7
   26d56:	bd80      	pop	{r7, pc}
   26d58:	00026c99 	.word	0x00026c99

00026d5c <system_gclk_chan_get_config_defaults>:
{
   26d5c:	b580      	push	{r7, lr}
   26d5e:	b082      	sub	sp, #8
   26d60:	af00      	add	r7, sp, #0
   26d62:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26d64:	687b      	ldr	r3, [r7, #4]
   26d66:	2200      	movs	r2, #0
   26d68:	701a      	strb	r2, [r3, #0]
}
   26d6a:	46c0      	nop			; (mov r8, r8)
   26d6c:	46bd      	mov	sp, r7
   26d6e:	b002      	add	sp, #8
   26d70:	bd80      	pop	{r7, pc}

00026d72 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   26d72:	b5f0      	push	{r4, r5, r6, r7, lr}
   26d74:	b08d      	sub	sp, #52	; 0x34
   26d76:	af00      	add	r7, sp, #0
   26d78:	60b8      	str	r0, [r7, #8]
   26d7a:	60f9      	str	r1, [r7, #12]
   26d7c:	603a      	str	r2, [r7, #0]
   26d7e:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   26d80:	2300      	movs	r3, #0
   26d82:	2400      	movs	r4, #0
   26d84:	623b      	str	r3, [r7, #32]
   26d86:	627c      	str	r4, [r7, #36]	; 0x24
   26d88:	2300      	movs	r3, #0
   26d8a:	2400      	movs	r4, #0
   26d8c:	61bb      	str	r3, [r7, #24]
   26d8e:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   26d90:	233f      	movs	r3, #63	; 0x3f
   26d92:	62fb      	str	r3, [r7, #44]	; 0x2c
   26d94:	e053      	b.n	26e3e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   26d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26d98:	3b20      	subs	r3, #32
   26d9a:	2b00      	cmp	r3, #0
   26d9c:	db04      	blt.n	26da8 <long_division+0x36>
   26d9e:	2201      	movs	r2, #1
   26da0:	409a      	lsls	r2, r3
   26da2:	0013      	movs	r3, r2
   26da4:	617b      	str	r3, [r7, #20]
   26da6:	e00b      	b.n	26dc0 <long_division+0x4e>
   26da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26daa:	2220      	movs	r2, #32
   26dac:	1ad3      	subs	r3, r2, r3
   26dae:	2201      	movs	r2, #1
   26db0:	40da      	lsrs	r2, r3
   26db2:	0013      	movs	r3, r2
   26db4:	2100      	movs	r1, #0
   26db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   26db8:	4091      	lsls	r1, r2
   26dba:	000a      	movs	r2, r1
   26dbc:	4313      	orrs	r3, r2
   26dbe:	617b      	str	r3, [r7, #20]
   26dc0:	2201      	movs	r2, #1
   26dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26dc4:	409a      	lsls	r2, r3
   26dc6:	0013      	movs	r3, r2
   26dc8:	613b      	str	r3, [r7, #16]

		r = r << 1;
   26dca:	69bb      	ldr	r3, [r7, #24]
   26dcc:	69fc      	ldr	r4, [r7, #28]
   26dce:	18db      	adds	r3, r3, r3
   26dd0:	4164      	adcs	r4, r4
   26dd2:	61bb      	str	r3, [r7, #24]
   26dd4:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   26dd6:	68bb      	ldr	r3, [r7, #8]
   26dd8:	693a      	ldr	r2, [r7, #16]
   26dda:	401a      	ands	r2, r3
   26ddc:	0015      	movs	r5, r2
   26dde:	68fb      	ldr	r3, [r7, #12]
   26de0:	697a      	ldr	r2, [r7, #20]
   26de2:	401a      	ands	r2, r3
   26de4:	0016      	movs	r6, r2
   26de6:	002b      	movs	r3, r5
   26de8:	4333      	orrs	r3, r6
   26dea:	d007      	beq.n	26dfc <long_division+0x8a>
			r |= 0x01;
   26dec:	69bb      	ldr	r3, [r7, #24]
   26dee:	2201      	movs	r2, #1
   26df0:	4313      	orrs	r3, r2
   26df2:	61bb      	str	r3, [r7, #24]
   26df4:	69fb      	ldr	r3, [r7, #28]
   26df6:	2200      	movs	r2, #0
   26df8:	4313      	orrs	r3, r2
   26dfa:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   26dfc:	687a      	ldr	r2, [r7, #4]
   26dfe:	69fb      	ldr	r3, [r7, #28]
   26e00:	429a      	cmp	r2, r3
   26e02:	d819      	bhi.n	26e38 <long_division+0xc6>
   26e04:	687a      	ldr	r2, [r7, #4]
   26e06:	69fb      	ldr	r3, [r7, #28]
   26e08:	429a      	cmp	r2, r3
   26e0a:	d103      	bne.n	26e14 <long_division+0xa2>
   26e0c:	683a      	ldr	r2, [r7, #0]
   26e0e:	69bb      	ldr	r3, [r7, #24]
   26e10:	429a      	cmp	r2, r3
   26e12:	d811      	bhi.n	26e38 <long_division+0xc6>
			r = r - d;
   26e14:	69b9      	ldr	r1, [r7, #24]
   26e16:	69fa      	ldr	r2, [r7, #28]
   26e18:	683b      	ldr	r3, [r7, #0]
   26e1a:	687c      	ldr	r4, [r7, #4]
   26e1c:	1ac9      	subs	r1, r1, r3
   26e1e:	41a2      	sbcs	r2, r4
   26e20:	000b      	movs	r3, r1
   26e22:	0014      	movs	r4, r2
   26e24:	61bb      	str	r3, [r7, #24]
   26e26:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   26e28:	6a3a      	ldr	r2, [r7, #32]
   26e2a:	693b      	ldr	r3, [r7, #16]
   26e2c:	4313      	orrs	r3, r2
   26e2e:	623b      	str	r3, [r7, #32]
   26e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26e32:	697b      	ldr	r3, [r7, #20]
   26e34:	4313      	orrs	r3, r2
   26e36:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   26e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26e3a:	3b01      	subs	r3, #1
   26e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   26e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26e40:	2b00      	cmp	r3, #0
   26e42:	daa8      	bge.n	26d96 <long_division+0x24>
		}
	}

	return q;
   26e44:	6a3b      	ldr	r3, [r7, #32]
   26e46:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   26e48:	0018      	movs	r0, r3
   26e4a:	0021      	movs	r1, r4
   26e4c:	46bd      	mov	sp, r7
   26e4e:	b00d      	add	sp, #52	; 0x34
   26e50:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026e52 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   26e52:	b580      	push	{r7, lr}
   26e54:	b086      	sub	sp, #24
   26e56:	af00      	add	r7, sp, #0
   26e58:	60f8      	str	r0, [r7, #12]
   26e5a:	60b9      	str	r1, [r7, #8]
   26e5c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   26e5e:	2316      	movs	r3, #22
   26e60:	18fb      	adds	r3, r7, r3
   26e62:	2200      	movs	r2, #0
   26e64:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   26e66:	68bb      	ldr	r3, [r7, #8]
   26e68:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   26e6a:	68bb      	ldr	r3, [r7, #8]
   26e6c:	085a      	lsrs	r2, r3, #1
   26e6e:	68fb      	ldr	r3, [r7, #12]
   26e70:	429a      	cmp	r2, r3
   26e72:	d201      	bcs.n	26e78 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26e74:	2340      	movs	r3, #64	; 0x40
   26e76:	e026      	b.n	26ec6 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   26e78:	68bb      	ldr	r3, [r7, #8]
   26e7a:	085b      	lsrs	r3, r3, #1
   26e7c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   26e7e:	e00a      	b.n	26e96 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   26e80:	693a      	ldr	r2, [r7, #16]
   26e82:	68fb      	ldr	r3, [r7, #12]
   26e84:	1ad3      	subs	r3, r2, r3
   26e86:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   26e88:	2316      	movs	r3, #22
   26e8a:	18fb      	adds	r3, r7, r3
   26e8c:	881a      	ldrh	r2, [r3, #0]
   26e8e:	2316      	movs	r3, #22
   26e90:	18fb      	adds	r3, r7, r3
   26e92:	3201      	adds	r2, #1
   26e94:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   26e96:	693a      	ldr	r2, [r7, #16]
   26e98:	68fb      	ldr	r3, [r7, #12]
   26e9a:	429a      	cmp	r2, r3
   26e9c:	d2f0      	bcs.n	26e80 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   26e9e:	2316      	movs	r3, #22
   26ea0:	18fb      	adds	r3, r7, r3
   26ea2:	2216      	movs	r2, #22
   26ea4:	18ba      	adds	r2, r7, r2
   26ea6:	8812      	ldrh	r2, [r2, #0]
   26ea8:	3a01      	subs	r2, #1
   26eaa:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   26eac:	2316      	movs	r3, #22
   26eae:	18fb      	adds	r3, r7, r3
   26eb0:	881b      	ldrh	r3, [r3, #0]
   26eb2:	2bff      	cmp	r3, #255	; 0xff
   26eb4:	d901      	bls.n	26eba <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26eb6:	2340      	movs	r3, #64	; 0x40
   26eb8:	e005      	b.n	26ec6 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   26eba:	687b      	ldr	r3, [r7, #4]
   26ebc:	2216      	movs	r2, #22
   26ebe:	18ba      	adds	r2, r7, r2
   26ec0:	8812      	ldrh	r2, [r2, #0]
   26ec2:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   26ec4:	2300      	movs	r3, #0
	}
}
   26ec6:	0018      	movs	r0, r3
   26ec8:	46bd      	mov	sp, r7
   26eca:	b006      	add	sp, #24
   26ecc:	bd80      	pop	{r7, pc}
	...

00026ed0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   26ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   26ed2:	b0a1      	sub	sp, #132	; 0x84
   26ed4:	af00      	add	r7, sp, #0
   26ed6:	64f8      	str	r0, [r7, #76]	; 0x4c
   26ed8:	64b9      	str	r1, [r7, #72]	; 0x48
   26eda:	647a      	str	r2, [r7, #68]	; 0x44
   26edc:	2243      	movs	r2, #67	; 0x43
   26ede:	18ba      	adds	r2, r7, r2
   26ee0:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   26ee2:	2300      	movs	r3, #0
   26ee4:	2400      	movs	r4, #0
   26ee6:	673b      	str	r3, [r7, #112]	; 0x70
   26ee8:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   26eea:	2300      	movs	r3, #0
   26eec:	2400      	movs	r4, #0
   26eee:	66bb      	str	r3, [r7, #104]	; 0x68
   26ef0:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   26ef2:	2300      	movs	r3, #0
   26ef4:	2400      	movs	r4, #0
   26ef6:	67bb      	str	r3, [r7, #120]	; 0x78
   26ef8:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   26efa:	2300      	movs	r3, #0
   26efc:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   26efe:	2358      	movs	r3, #88	; 0x58
   26f00:	2240      	movs	r2, #64	; 0x40
   26f02:	4694      	mov	ip, r2
   26f04:	44bc      	add	ip, r7
   26f06:	4463      	add	r3, ip
   26f08:	781a      	ldrb	r2, [r3, #0]
   26f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26f0c:	435a      	muls	r2, r3
   26f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26f10:	429a      	cmp	r2, r3
   26f12:	d901      	bls.n	26f18 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26f14:	2340      	movs	r3, #64	; 0x40
   26f16:	e0b3      	b.n	27080 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   26f18:	2343      	movs	r3, #67	; 0x43
   26f1a:	18fb      	adds	r3, r7, r3
   26f1c:	781b      	ldrb	r3, [r3, #0]
   26f1e:	2b00      	cmp	r3, #0
   26f20:	d13d      	bne.n	26f9e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   26f22:	2358      	movs	r3, #88	; 0x58
   26f24:	2240      	movs	r2, #64	; 0x40
   26f26:	4694      	mov	ip, r2
   26f28:	44bc      	add	ip, r7
   26f2a:	4463      	add	r3, ip
   26f2c:	781b      	ldrb	r3, [r3, #0]
   26f2e:	b2db      	uxtb	r3, r3
   26f30:	613b      	str	r3, [r7, #16]
   26f32:	2300      	movs	r3, #0
   26f34:	617b      	str	r3, [r7, #20]
   26f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26f38:	60bb      	str	r3, [r7, #8]
   26f3a:	2300      	movs	r3, #0
   26f3c:	60fb      	str	r3, [r7, #12]
   26f3e:	4c52      	ldr	r4, [pc, #328]	; (27088 <_sercom_get_async_baud_val+0x1b8>)
   26f40:	68ba      	ldr	r2, [r7, #8]
   26f42:	68fb      	ldr	r3, [r7, #12]
   26f44:	6938      	ldr	r0, [r7, #16]
   26f46:	6979      	ldr	r1, [r7, #20]
   26f48:	47a0      	blx	r4
   26f4a:	0003      	movs	r3, r0
   26f4c:	000c      	movs	r4, r1
   26f4e:	001b      	movs	r3, r3
   26f50:	65fb      	str	r3, [r7, #92]	; 0x5c
   26f52:	2300      	movs	r3, #0
   26f54:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   26f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26f58:	603b      	str	r3, [r7, #0]
   26f5a:	2300      	movs	r3, #0
   26f5c:	607b      	str	r3, [r7, #4]
   26f5e:	6db8      	ldr	r0, [r7, #88]	; 0x58
   26f60:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   26f62:	683a      	ldr	r2, [r7, #0]
   26f64:	687b      	ldr	r3, [r7, #4]
   26f66:	4c49      	ldr	r4, [pc, #292]	; (2708c <_sercom_get_async_baud_val+0x1bc>)
   26f68:	47a0      	blx	r4
   26f6a:	0003      	movs	r3, r0
   26f6c:	000c      	movs	r4, r1
   26f6e:	673b      	str	r3, [r7, #112]	; 0x70
   26f70:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   26f72:	2100      	movs	r1, #0
   26f74:	2201      	movs	r2, #1
   26f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26f78:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   26f7a:	1ac9      	subs	r1, r1, r3
   26f7c:	41a2      	sbcs	r2, r4
   26f7e:	000b      	movs	r3, r1
   26f80:	0014      	movs	r4, r2
   26f82:	66bb      	str	r3, [r7, #104]	; 0x68
   26f84:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   26f86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26f88:	0c1b      	lsrs	r3, r3, #16
   26f8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   26f8c:	0416      	lsls	r6, r2, #16
   26f8e:	431e      	orrs	r6, r3
   26f90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26f92:	041d      	lsls	r5, r3, #16
   26f94:	0033      	movs	r3, r6
   26f96:	67bb      	str	r3, [r7, #120]	; 0x78
   26f98:	2300      	movs	r3, #0
   26f9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   26f9c:	e06a      	b.n	27074 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   26f9e:	2343      	movs	r3, #67	; 0x43
   26fa0:	18fb      	adds	r3, r7, r3
   26fa2:	781b      	ldrb	r3, [r3, #0]
   26fa4:	2b01      	cmp	r3, #1
   26fa6:	d165      	bne.n	27074 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   26fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26faa:	633b      	str	r3, [r7, #48]	; 0x30
   26fac:	2300      	movs	r3, #0
   26fae:	637b      	str	r3, [r7, #52]	; 0x34
   26fb0:	2358      	movs	r3, #88	; 0x58
   26fb2:	2240      	movs	r2, #64	; 0x40
   26fb4:	4694      	mov	ip, r2
   26fb6:	44bc      	add	ip, r7
   26fb8:	4463      	add	r3, ip
   26fba:	781b      	ldrb	r3, [r3, #0]
   26fbc:	b2db      	uxtb	r3, r3
   26fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   26fc0:	2300      	movs	r3, #0
   26fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   26fc4:	4c30      	ldr	r4, [pc, #192]	; (27088 <_sercom_get_async_baud_val+0x1b8>)
   26fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   26fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26fca:	6b38      	ldr	r0, [r7, #48]	; 0x30
   26fcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
   26fce:	47a0      	blx	r4
   26fd0:	0003      	movs	r3, r0
   26fd2:	000c      	movs	r4, r1
   26fd4:	65bb      	str	r3, [r7, #88]	; 0x58
   26fd6:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   26fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26fda:	623b      	str	r3, [r7, #32]
   26fdc:	2300      	movs	r3, #0
   26fde:	627b      	str	r3, [r7, #36]	; 0x24
   26fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26fe2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26fe4:	001a      	movs	r2, r3
   26fe6:	0023      	movs	r3, r4
   26fe8:	6a38      	ldr	r0, [r7, #32]
   26fea:	6a79      	ldr	r1, [r7, #36]	; 0x24
   26fec:	4c27      	ldr	r4, [pc, #156]	; (2708c <_sercom_get_async_baud_val+0x1bc>)
   26fee:	47a0      	blx	r4
   26ff0:	0003      	movs	r3, r0
   26ff2:	000c      	movs	r4, r1
   26ff4:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   26ff6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   26ff8:	2380      	movs	r3, #128	; 0x80
   26ffa:	019b      	lsls	r3, r3, #6
   26ffc:	429a      	cmp	r2, r3
   26ffe:	d901      	bls.n	27004 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27000:	2340      	movs	r3, #64	; 0x40
   27002:	e03d      	b.n	27080 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   27004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27006:	61bb      	str	r3, [r7, #24]
   27008:	2300      	movs	r3, #0
   2700a:	61fb      	str	r3, [r7, #28]
   2700c:	69b9      	ldr	r1, [r7, #24]
   2700e:	69fa      	ldr	r2, [r7, #28]
   27010:	000b      	movs	r3, r1
   27012:	0f5b      	lsrs	r3, r3, #29
   27014:	0010      	movs	r0, r2
   27016:	00c0      	lsls	r0, r0, #3
   27018:	63f8      	str	r0, [r7, #60]	; 0x3c
   2701a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   2701c:	4318      	orrs	r0, r3
   2701e:	63f8      	str	r0, [r7, #60]	; 0x3c
   27020:	000b      	movs	r3, r1
   27022:	00db      	lsls	r3, r3, #3
   27024:	63bb      	str	r3, [r7, #56]	; 0x38
   27026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27028:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2702a:	001a      	movs	r2, r3
   2702c:	0023      	movs	r3, r4
   2702e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   27030:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   27032:	4c16      	ldr	r4, [pc, #88]	; (2708c <_sercom_get_async_baud_val+0x1bc>)
   27034:	47a0      	blx	r4
   27036:	0003      	movs	r3, r0
   27038:	000c      	movs	r4, r1
   2703a:	65bb      	str	r3, [r7, #88]	; 0x58
   2703c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   2703e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27040:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27042:	b2d9      	uxtb	r1, r3
   27044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   27046:	b2db      	uxtb	r3, r3
   27048:	00db      	lsls	r3, r3, #3
   2704a:	b2da      	uxtb	r2, r3
   2704c:	2317      	movs	r3, #23
   2704e:	2040      	movs	r0, #64	; 0x40
   27050:	4684      	mov	ip, r0
   27052:	44bc      	add	ip, r7
   27054:	4463      	add	r3, ip
   27056:	1a8a      	subs	r2, r1, r2
   27058:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   2705a:	2317      	movs	r3, #23
   2705c:	2240      	movs	r2, #64	; 0x40
   2705e:	4694      	mov	ip, r2
   27060:	44bc      	add	ip, r7
   27062:	4463      	add	r3, ip
   27064:	781b      	ldrb	r3, [r3, #0]
   27066:	035b      	lsls	r3, r3, #13
   27068:	001a      	movs	r2, r3
   2706a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2706c:	4313      	orrs	r3, r2
   2706e:	67bb      	str	r3, [r7, #120]	; 0x78
   27070:	2300      	movs	r3, #0
   27072:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   27074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   27076:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   27078:	b29a      	uxth	r2, r3
   2707a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2707c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   2707e:	2300      	movs	r3, #0
}
   27080:	0018      	movs	r0, r3
   27082:	46bd      	mov	sp, r7
   27084:	b021      	add	sp, #132	; 0x84
   27086:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27088:	000329f1 	.word	0x000329f1
   2708c:	00026d73 	.word	0x00026d73

00027090 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   27090:	b580      	push	{r7, lr}
   27092:	b084      	sub	sp, #16
   27094:	af00      	add	r7, sp, #0
   27096:	0002      	movs	r2, r0
   27098:	1dfb      	adds	r3, r7, #7
   2709a:	701a      	strb	r2, [r3, #0]
   2709c:	1dbb      	adds	r3, r7, #6
   2709e:	1c0a      	adds	r2, r1, #0
   270a0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   270a2:	4b1a      	ldr	r3, [pc, #104]	; (2710c <sercom_set_gclk_generator+0x7c>)
   270a4:	781b      	ldrb	r3, [r3, #0]
   270a6:	2201      	movs	r2, #1
   270a8:	4053      	eors	r3, r2
   270aa:	b2db      	uxtb	r3, r3
   270ac:	2b00      	cmp	r3, #0
   270ae:	d103      	bne.n	270b8 <sercom_set_gclk_generator+0x28>
   270b0:	1dbb      	adds	r3, r7, #6
   270b2:	781b      	ldrb	r3, [r3, #0]
   270b4:	2b00      	cmp	r3, #0
   270b6:	d01b      	beq.n	270f0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   270b8:	230c      	movs	r3, #12
   270ba:	18fb      	adds	r3, r7, r3
   270bc:	0018      	movs	r0, r3
   270be:	4b14      	ldr	r3, [pc, #80]	; (27110 <sercom_set_gclk_generator+0x80>)
   270c0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   270c2:	230c      	movs	r3, #12
   270c4:	18fb      	adds	r3, r7, r3
   270c6:	1dfa      	adds	r2, r7, #7
   270c8:	7812      	ldrb	r2, [r2, #0]
   270ca:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   270cc:	230c      	movs	r3, #12
   270ce:	18fb      	adds	r3, r7, r3
   270d0:	0019      	movs	r1, r3
   270d2:	2013      	movs	r0, #19
   270d4:	4b0f      	ldr	r3, [pc, #60]	; (27114 <sercom_set_gclk_generator+0x84>)
   270d6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   270d8:	2013      	movs	r0, #19
   270da:	4b0f      	ldr	r3, [pc, #60]	; (27118 <sercom_set_gclk_generator+0x88>)
   270dc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   270de:	4b0b      	ldr	r3, [pc, #44]	; (2710c <sercom_set_gclk_generator+0x7c>)
   270e0:	1dfa      	adds	r2, r7, #7
   270e2:	7812      	ldrb	r2, [r2, #0]
   270e4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   270e6:	4b09      	ldr	r3, [pc, #36]	; (2710c <sercom_set_gclk_generator+0x7c>)
   270e8:	2201      	movs	r2, #1
   270ea:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   270ec:	2300      	movs	r3, #0
   270ee:	e008      	b.n	27102 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   270f0:	4b06      	ldr	r3, [pc, #24]	; (2710c <sercom_set_gclk_generator+0x7c>)
   270f2:	785b      	ldrb	r3, [r3, #1]
   270f4:	1dfa      	adds	r2, r7, #7
   270f6:	7812      	ldrb	r2, [r2, #0]
   270f8:	429a      	cmp	r2, r3
   270fa:	d101      	bne.n	27100 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   270fc:	2300      	movs	r3, #0
   270fe:	e000      	b.n	27102 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   27100:	231d      	movs	r3, #29
}
   27102:	0018      	movs	r0, r3
   27104:	46bd      	mov	sp, r7
   27106:	b004      	add	sp, #16
   27108:	bd80      	pop	{r7, pc}
   2710a:	46c0      	nop			; (mov r8, r8)
   2710c:	20004164 	.word	0x20004164
   27110:	00026d5d 	.word	0x00026d5d
   27114:	00029b69 	.word	0x00029b69
   27118:	00029bad 	.word	0x00029bad

0002711c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   2711c:	b580      	push	{r7, lr}
   2711e:	b082      	sub	sp, #8
   27120:	af00      	add	r7, sp, #0
   27122:	6078      	str	r0, [r7, #4]
   27124:	000a      	movs	r2, r1
   27126:	1cfb      	adds	r3, r7, #3
   27128:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   2712a:	687b      	ldr	r3, [r7, #4]
   2712c:	4a4d      	ldr	r2, [pc, #308]	; (27264 <_sercom_get_default_pad+0x148>)
   2712e:	4293      	cmp	r3, r2
   27130:	d03f      	beq.n	271b2 <_sercom_get_default_pad+0x96>
   27132:	4a4c      	ldr	r2, [pc, #304]	; (27264 <_sercom_get_default_pad+0x148>)
   27134:	4293      	cmp	r3, r2
   27136:	d806      	bhi.n	27146 <_sercom_get_default_pad+0x2a>
   27138:	4a4b      	ldr	r2, [pc, #300]	; (27268 <_sercom_get_default_pad+0x14c>)
   2713a:	4293      	cmp	r3, r2
   2713c:	d00f      	beq.n	2715e <_sercom_get_default_pad+0x42>
   2713e:	4a4b      	ldr	r2, [pc, #300]	; (2726c <_sercom_get_default_pad+0x150>)
   27140:	4293      	cmp	r3, r2
   27142:	d021      	beq.n	27188 <_sercom_get_default_pad+0x6c>
   27144:	e089      	b.n	2725a <_sercom_get_default_pad+0x13e>
   27146:	4a4a      	ldr	r2, [pc, #296]	; (27270 <_sercom_get_default_pad+0x154>)
   27148:	4293      	cmp	r3, r2
   2714a:	d100      	bne.n	2714e <_sercom_get_default_pad+0x32>
   2714c:	e05b      	b.n	27206 <_sercom_get_default_pad+0xea>
   2714e:	4a49      	ldr	r2, [pc, #292]	; (27274 <_sercom_get_default_pad+0x158>)
   27150:	4293      	cmp	r3, r2
   27152:	d100      	bne.n	27156 <_sercom_get_default_pad+0x3a>
   27154:	e06c      	b.n	27230 <_sercom_get_default_pad+0x114>
   27156:	4a48      	ldr	r2, [pc, #288]	; (27278 <_sercom_get_default_pad+0x15c>)
   27158:	4293      	cmp	r3, r2
   2715a:	d03f      	beq.n	271dc <_sercom_get_default_pad+0xc0>
   2715c:	e07d      	b.n	2725a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   2715e:	1cfb      	adds	r3, r7, #3
   27160:	781b      	ldrb	r3, [r3, #0]
   27162:	2b01      	cmp	r3, #1
   27164:	d00a      	beq.n	2717c <_sercom_get_default_pad+0x60>
   27166:	dc02      	bgt.n	2716e <_sercom_get_default_pad+0x52>
   27168:	2b00      	cmp	r3, #0
   2716a:	d005      	beq.n	27178 <_sercom_get_default_pad+0x5c>
   2716c:	e075      	b.n	2725a <_sercom_get_default_pad+0x13e>
   2716e:	2b02      	cmp	r3, #2
   27170:	d006      	beq.n	27180 <_sercom_get_default_pad+0x64>
   27172:	2b03      	cmp	r3, #3
   27174:	d006      	beq.n	27184 <_sercom_get_default_pad+0x68>
   27176:	e070      	b.n	2725a <_sercom_get_default_pad+0x13e>
   27178:	4b40      	ldr	r3, [pc, #256]	; (2727c <_sercom_get_default_pad+0x160>)
   2717a:	e06f      	b.n	2725c <_sercom_get_default_pad+0x140>
   2717c:	4b40      	ldr	r3, [pc, #256]	; (27280 <_sercom_get_default_pad+0x164>)
   2717e:	e06d      	b.n	2725c <_sercom_get_default_pad+0x140>
   27180:	4b40      	ldr	r3, [pc, #256]	; (27284 <_sercom_get_default_pad+0x168>)
   27182:	e06b      	b.n	2725c <_sercom_get_default_pad+0x140>
   27184:	4b40      	ldr	r3, [pc, #256]	; (27288 <_sercom_get_default_pad+0x16c>)
   27186:	e069      	b.n	2725c <_sercom_get_default_pad+0x140>
   27188:	1cfb      	adds	r3, r7, #3
   2718a:	781b      	ldrb	r3, [r3, #0]
   2718c:	2b01      	cmp	r3, #1
   2718e:	d00a      	beq.n	271a6 <_sercom_get_default_pad+0x8a>
   27190:	dc02      	bgt.n	27198 <_sercom_get_default_pad+0x7c>
   27192:	2b00      	cmp	r3, #0
   27194:	d005      	beq.n	271a2 <_sercom_get_default_pad+0x86>
   27196:	e060      	b.n	2725a <_sercom_get_default_pad+0x13e>
   27198:	2b02      	cmp	r3, #2
   2719a:	d006      	beq.n	271aa <_sercom_get_default_pad+0x8e>
   2719c:	2b03      	cmp	r3, #3
   2719e:	d006      	beq.n	271ae <_sercom_get_default_pad+0x92>
   271a0:	e05b      	b.n	2725a <_sercom_get_default_pad+0x13e>
   271a2:	2303      	movs	r3, #3
   271a4:	e05a      	b.n	2725c <_sercom_get_default_pad+0x140>
   271a6:	4b39      	ldr	r3, [pc, #228]	; (2728c <_sercom_get_default_pad+0x170>)
   271a8:	e058      	b.n	2725c <_sercom_get_default_pad+0x140>
   271aa:	4b39      	ldr	r3, [pc, #228]	; (27290 <_sercom_get_default_pad+0x174>)
   271ac:	e056      	b.n	2725c <_sercom_get_default_pad+0x140>
   271ae:	4b39      	ldr	r3, [pc, #228]	; (27294 <_sercom_get_default_pad+0x178>)
   271b0:	e054      	b.n	2725c <_sercom_get_default_pad+0x140>
   271b2:	1cfb      	adds	r3, r7, #3
   271b4:	781b      	ldrb	r3, [r3, #0]
   271b6:	2b01      	cmp	r3, #1
   271b8:	d00a      	beq.n	271d0 <_sercom_get_default_pad+0xb4>
   271ba:	dc02      	bgt.n	271c2 <_sercom_get_default_pad+0xa6>
   271bc:	2b00      	cmp	r3, #0
   271be:	d005      	beq.n	271cc <_sercom_get_default_pad+0xb0>
   271c0:	e04b      	b.n	2725a <_sercom_get_default_pad+0x13e>
   271c2:	2b02      	cmp	r3, #2
   271c4:	d006      	beq.n	271d4 <_sercom_get_default_pad+0xb8>
   271c6:	2b03      	cmp	r3, #3
   271c8:	d006      	beq.n	271d8 <_sercom_get_default_pad+0xbc>
   271ca:	e046      	b.n	2725a <_sercom_get_default_pad+0x13e>
   271cc:	4b32      	ldr	r3, [pc, #200]	; (27298 <_sercom_get_default_pad+0x17c>)
   271ce:	e045      	b.n	2725c <_sercom_get_default_pad+0x140>
   271d0:	4b32      	ldr	r3, [pc, #200]	; (2729c <_sercom_get_default_pad+0x180>)
   271d2:	e043      	b.n	2725c <_sercom_get_default_pad+0x140>
   271d4:	4b32      	ldr	r3, [pc, #200]	; (272a0 <_sercom_get_default_pad+0x184>)
   271d6:	e041      	b.n	2725c <_sercom_get_default_pad+0x140>
   271d8:	4b32      	ldr	r3, [pc, #200]	; (272a4 <_sercom_get_default_pad+0x188>)
   271da:	e03f      	b.n	2725c <_sercom_get_default_pad+0x140>
   271dc:	1cfb      	adds	r3, r7, #3
   271de:	781b      	ldrb	r3, [r3, #0]
   271e0:	2b01      	cmp	r3, #1
   271e2:	d00a      	beq.n	271fa <_sercom_get_default_pad+0xde>
   271e4:	dc02      	bgt.n	271ec <_sercom_get_default_pad+0xd0>
   271e6:	2b00      	cmp	r3, #0
   271e8:	d005      	beq.n	271f6 <_sercom_get_default_pad+0xda>
   271ea:	e036      	b.n	2725a <_sercom_get_default_pad+0x13e>
   271ec:	2b02      	cmp	r3, #2
   271ee:	d006      	beq.n	271fe <_sercom_get_default_pad+0xe2>
   271f0:	2b03      	cmp	r3, #3
   271f2:	d006      	beq.n	27202 <_sercom_get_default_pad+0xe6>
   271f4:	e031      	b.n	2725a <_sercom_get_default_pad+0x13e>
   271f6:	4b2c      	ldr	r3, [pc, #176]	; (272a8 <_sercom_get_default_pad+0x18c>)
   271f8:	e030      	b.n	2725c <_sercom_get_default_pad+0x140>
   271fa:	4b2c      	ldr	r3, [pc, #176]	; (272ac <_sercom_get_default_pad+0x190>)
   271fc:	e02e      	b.n	2725c <_sercom_get_default_pad+0x140>
   271fe:	4b2c      	ldr	r3, [pc, #176]	; (272b0 <_sercom_get_default_pad+0x194>)
   27200:	e02c      	b.n	2725c <_sercom_get_default_pad+0x140>
   27202:	4b2c      	ldr	r3, [pc, #176]	; (272b4 <_sercom_get_default_pad+0x198>)
   27204:	e02a      	b.n	2725c <_sercom_get_default_pad+0x140>
   27206:	1cfb      	adds	r3, r7, #3
   27208:	781b      	ldrb	r3, [r3, #0]
   2720a:	2b01      	cmp	r3, #1
   2720c:	d00a      	beq.n	27224 <_sercom_get_default_pad+0x108>
   2720e:	dc02      	bgt.n	27216 <_sercom_get_default_pad+0xfa>
   27210:	2b00      	cmp	r3, #0
   27212:	d005      	beq.n	27220 <_sercom_get_default_pad+0x104>
   27214:	e021      	b.n	2725a <_sercom_get_default_pad+0x13e>
   27216:	2b02      	cmp	r3, #2
   27218:	d006      	beq.n	27228 <_sercom_get_default_pad+0x10c>
   2721a:	2b03      	cmp	r3, #3
   2721c:	d006      	beq.n	2722c <_sercom_get_default_pad+0x110>
   2721e:	e01c      	b.n	2725a <_sercom_get_default_pad+0x13e>
   27220:	4b25      	ldr	r3, [pc, #148]	; (272b8 <_sercom_get_default_pad+0x19c>)
   27222:	e01b      	b.n	2725c <_sercom_get_default_pad+0x140>
   27224:	4b25      	ldr	r3, [pc, #148]	; (272bc <_sercom_get_default_pad+0x1a0>)
   27226:	e019      	b.n	2725c <_sercom_get_default_pad+0x140>
   27228:	4b25      	ldr	r3, [pc, #148]	; (272c0 <_sercom_get_default_pad+0x1a4>)
   2722a:	e017      	b.n	2725c <_sercom_get_default_pad+0x140>
   2722c:	4b25      	ldr	r3, [pc, #148]	; (272c4 <_sercom_get_default_pad+0x1a8>)
   2722e:	e015      	b.n	2725c <_sercom_get_default_pad+0x140>
   27230:	1cfb      	adds	r3, r7, #3
   27232:	781b      	ldrb	r3, [r3, #0]
   27234:	2b01      	cmp	r3, #1
   27236:	d00a      	beq.n	2724e <_sercom_get_default_pad+0x132>
   27238:	dc02      	bgt.n	27240 <_sercom_get_default_pad+0x124>
   2723a:	2b00      	cmp	r3, #0
   2723c:	d005      	beq.n	2724a <_sercom_get_default_pad+0x12e>
   2723e:	e00c      	b.n	2725a <_sercom_get_default_pad+0x13e>
   27240:	2b02      	cmp	r3, #2
   27242:	d006      	beq.n	27252 <_sercom_get_default_pad+0x136>
   27244:	2b03      	cmp	r3, #3
   27246:	d006      	beq.n	27256 <_sercom_get_default_pad+0x13a>
   27248:	e007      	b.n	2725a <_sercom_get_default_pad+0x13e>
   2724a:	4b1f      	ldr	r3, [pc, #124]	; (272c8 <_sercom_get_default_pad+0x1ac>)
   2724c:	e006      	b.n	2725c <_sercom_get_default_pad+0x140>
   2724e:	4b1f      	ldr	r3, [pc, #124]	; (272cc <_sercom_get_default_pad+0x1b0>)
   27250:	e004      	b.n	2725c <_sercom_get_default_pad+0x140>
   27252:	4b1f      	ldr	r3, [pc, #124]	; (272d0 <_sercom_get_default_pad+0x1b4>)
   27254:	e002      	b.n	2725c <_sercom_get_default_pad+0x140>
   27256:	4b1f      	ldr	r3, [pc, #124]	; (272d4 <_sercom_get_default_pad+0x1b8>)
   27258:	e000      	b.n	2725c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   2725a:	2300      	movs	r3, #0
}
   2725c:	0018      	movs	r0, r3
   2725e:	46bd      	mov	sp, r7
   27260:	b002      	add	sp, #8
   27262:	bd80      	pop	{r7, pc}
   27264:	42001000 	.word	0x42001000
   27268:	42000800 	.word	0x42000800
   2726c:	42000c00 	.word	0x42000c00
   27270:	42001800 	.word	0x42001800
   27274:	42001c00 	.word	0x42001c00
   27278:	42001400 	.word	0x42001400
   2727c:	00040003 	.word	0x00040003
   27280:	00050003 	.word	0x00050003
   27284:	00060003 	.word	0x00060003
   27288:	00070003 	.word	0x00070003
   2728c:	00010003 	.word	0x00010003
   27290:	001e0003 	.word	0x001e0003
   27294:	001f0003 	.word	0x001f0003
   27298:	00080003 	.word	0x00080003
   2729c:	00090003 	.word	0x00090003
   272a0:	000a0003 	.word	0x000a0003
   272a4:	000b0003 	.word	0x000b0003
   272a8:	00100003 	.word	0x00100003
   272ac:	00110003 	.word	0x00110003
   272b0:	00120003 	.word	0x00120003
   272b4:	00130003 	.word	0x00130003
   272b8:	000c0003 	.word	0x000c0003
   272bc:	000d0003 	.word	0x000d0003
   272c0:	000e0003 	.word	0x000e0003
   272c4:	000f0003 	.word	0x000f0003
   272c8:	00160003 	.word	0x00160003
   272cc:	00170003 	.word	0x00170003
   272d0:	00180003 	.word	0x00180003
   272d4:	00190003 	.word	0x00190003

000272d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   272d8:	b590      	push	{r4, r7, lr}
   272da:	b08b      	sub	sp, #44	; 0x2c
   272dc:	af00      	add	r7, sp, #0
   272de:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   272e0:	230c      	movs	r3, #12
   272e2:	18fb      	adds	r3, r7, r3
   272e4:	4a0f      	ldr	r2, [pc, #60]	; (27324 <_sercom_get_sercom_inst_index+0x4c>)
   272e6:	ca13      	ldmia	r2!, {r0, r1, r4}
   272e8:	c313      	stmia	r3!, {r0, r1, r4}
   272ea:	ca13      	ldmia	r2!, {r0, r1, r4}
   272ec:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   272ee:	2300      	movs	r3, #0
   272f0:	627b      	str	r3, [r7, #36]	; 0x24
   272f2:	e00e      	b.n	27312 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   272f4:	230c      	movs	r3, #12
   272f6:	18fb      	adds	r3, r7, r3
   272f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   272fa:	0092      	lsls	r2, r2, #2
   272fc:	58d3      	ldr	r3, [r2, r3]
   272fe:	001a      	movs	r2, r3
   27300:	687b      	ldr	r3, [r7, #4]
   27302:	429a      	cmp	r2, r3
   27304:	d102      	bne.n	2730c <_sercom_get_sercom_inst_index+0x34>
			return i;
   27306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27308:	b2db      	uxtb	r3, r3
   2730a:	e006      	b.n	2731a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2730e:	3301      	adds	r3, #1
   27310:	627b      	str	r3, [r7, #36]	; 0x24
   27312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27314:	2b05      	cmp	r3, #5
   27316:	d9ed      	bls.n	272f4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   27318:	2300      	movs	r3, #0
}
   2731a:	0018      	movs	r0, r3
   2731c:	46bd      	mov	sp, r7
   2731e:	b00b      	add	sp, #44	; 0x2c
   27320:	bd90      	pop	{r4, r7, pc}
   27322:	46c0      	nop			; (mov r8, r8)
   27324:	000391c4 	.word	0x000391c4

00027328 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   27328:	b580      	push	{r7, lr}
   2732a:	b082      	sub	sp, #8
   2732c:	af00      	add	r7, sp, #0
   2732e:	0002      	movs	r2, r0
   27330:	1dfb      	adds	r3, r7, #7
   27332:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   27334:	46c0      	nop			; (mov r8, r8)
   27336:	46bd      	mov	sp, r7
   27338:	b002      	add	sp, #8
   2733a:	bd80      	pop	{r7, pc}

0002733c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   2733c:	b580      	push	{r7, lr}
   2733e:	b084      	sub	sp, #16
   27340:	af00      	add	r7, sp, #0
   27342:	0002      	movs	r2, r0
   27344:	6039      	str	r1, [r7, #0]
   27346:	1dfb      	adds	r3, r7, #7
   27348:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2734a:	4b13      	ldr	r3, [pc, #76]	; (27398 <_sercom_set_handler+0x5c>)
   2734c:	781b      	ldrb	r3, [r3, #0]
   2734e:	2201      	movs	r2, #1
   27350:	4053      	eors	r3, r2
   27352:	b2db      	uxtb	r3, r3
   27354:	2b00      	cmp	r3, #0
   27356:	d015      	beq.n	27384 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27358:	2300      	movs	r3, #0
   2735a:	60fb      	str	r3, [r7, #12]
   2735c:	e00c      	b.n	27378 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   2735e:	4b0f      	ldr	r3, [pc, #60]	; (2739c <_sercom_set_handler+0x60>)
   27360:	68fa      	ldr	r2, [r7, #12]
   27362:	0092      	lsls	r2, r2, #2
   27364:	490e      	ldr	r1, [pc, #56]	; (273a0 <_sercom_set_handler+0x64>)
   27366:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   27368:	4b0e      	ldr	r3, [pc, #56]	; (273a4 <_sercom_set_handler+0x68>)
   2736a:	68fa      	ldr	r2, [r7, #12]
   2736c:	0092      	lsls	r2, r2, #2
   2736e:	2100      	movs	r1, #0
   27370:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27372:	68fb      	ldr	r3, [r7, #12]
   27374:	3301      	adds	r3, #1
   27376:	60fb      	str	r3, [r7, #12]
   27378:	68fb      	ldr	r3, [r7, #12]
   2737a:	2b05      	cmp	r3, #5
   2737c:	d9ef      	bls.n	2735e <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   2737e:	4b06      	ldr	r3, [pc, #24]	; (27398 <_sercom_set_handler+0x5c>)
   27380:	2201      	movs	r2, #1
   27382:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   27384:	1dfb      	adds	r3, r7, #7
   27386:	781a      	ldrb	r2, [r3, #0]
   27388:	4b04      	ldr	r3, [pc, #16]	; (2739c <_sercom_set_handler+0x60>)
   2738a:	0092      	lsls	r2, r2, #2
   2738c:	6839      	ldr	r1, [r7, #0]
   2738e:	50d1      	str	r1, [r2, r3]
}
   27390:	46c0      	nop			; (mov r8, r8)
   27392:	46bd      	mov	sp, r7
   27394:	b004      	add	sp, #16
   27396:	bd80      	pop	{r7, pc}
   27398:	20004166 	.word	0x20004166
   2739c:	20004168 	.word	0x20004168
   273a0:	00027329 	.word	0x00027329
   273a4:	20005a60 	.word	0x20005a60

000273a8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   273a8:	b590      	push	{r4, r7, lr}
   273aa:	b085      	sub	sp, #20
   273ac:	af00      	add	r7, sp, #0
   273ae:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   273b0:	2308      	movs	r3, #8
   273b2:	18fb      	adds	r3, r7, r3
   273b4:	4a0b      	ldr	r2, [pc, #44]	; (273e4 <_sercom_get_interrupt_vector+0x3c>)
   273b6:	6811      	ldr	r1, [r2, #0]
   273b8:	6019      	str	r1, [r3, #0]
   273ba:	8892      	ldrh	r2, [r2, #4]
   273bc:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   273be:	230f      	movs	r3, #15
   273c0:	18fc      	adds	r4, r7, r3
   273c2:	687b      	ldr	r3, [r7, #4]
   273c4:	0018      	movs	r0, r3
   273c6:	4b08      	ldr	r3, [pc, #32]	; (273e8 <_sercom_get_interrupt_vector+0x40>)
   273c8:	4798      	blx	r3
   273ca:	0003      	movs	r3, r0
   273cc:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   273ce:	230f      	movs	r3, #15
   273d0:	18fb      	adds	r3, r7, r3
   273d2:	781b      	ldrb	r3, [r3, #0]
   273d4:	2208      	movs	r2, #8
   273d6:	18ba      	adds	r2, r7, r2
   273d8:	5cd3      	ldrb	r3, [r2, r3]
   273da:	b25b      	sxtb	r3, r3
}
   273dc:	0018      	movs	r0, r3
   273de:	46bd      	mov	sp, r7
   273e0:	b005      	add	sp, #20
   273e2:	bd90      	pop	{r4, r7, pc}
   273e4:	000391dc 	.word	0x000391dc
   273e8:	000272d9 	.word	0x000272d9

000273ec <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   273ec:	b580      	push	{r7, lr}
   273ee:	af00      	add	r7, sp, #0
   273f0:	4b03      	ldr	r3, [pc, #12]	; (27400 <SERCOM0_Handler+0x14>)
   273f2:	681b      	ldr	r3, [r3, #0]
   273f4:	2000      	movs	r0, #0
   273f6:	4798      	blx	r3
   273f8:	46c0      	nop			; (mov r8, r8)
   273fa:	46bd      	mov	sp, r7
   273fc:	bd80      	pop	{r7, pc}
   273fe:	46c0      	nop			; (mov r8, r8)
   27400:	20004168 	.word	0x20004168

00027404 <SERCOM1_Handler>:
   27404:	b580      	push	{r7, lr}
   27406:	af00      	add	r7, sp, #0
   27408:	4b03      	ldr	r3, [pc, #12]	; (27418 <SERCOM1_Handler+0x14>)
   2740a:	685b      	ldr	r3, [r3, #4]
   2740c:	2001      	movs	r0, #1
   2740e:	4798      	blx	r3
   27410:	46c0      	nop			; (mov r8, r8)
   27412:	46bd      	mov	sp, r7
   27414:	bd80      	pop	{r7, pc}
   27416:	46c0      	nop			; (mov r8, r8)
   27418:	20004168 	.word	0x20004168

0002741c <SERCOM2_Handler>:
   2741c:	b580      	push	{r7, lr}
   2741e:	af00      	add	r7, sp, #0
   27420:	4b03      	ldr	r3, [pc, #12]	; (27430 <SERCOM2_Handler+0x14>)
   27422:	689b      	ldr	r3, [r3, #8]
   27424:	2002      	movs	r0, #2
   27426:	4798      	blx	r3
   27428:	46c0      	nop			; (mov r8, r8)
   2742a:	46bd      	mov	sp, r7
   2742c:	bd80      	pop	{r7, pc}
   2742e:	46c0      	nop			; (mov r8, r8)
   27430:	20004168 	.word	0x20004168

00027434 <SERCOM3_Handler>:
   27434:	b580      	push	{r7, lr}
   27436:	af00      	add	r7, sp, #0
   27438:	4b03      	ldr	r3, [pc, #12]	; (27448 <SERCOM3_Handler+0x14>)
   2743a:	68db      	ldr	r3, [r3, #12]
   2743c:	2003      	movs	r0, #3
   2743e:	4798      	blx	r3
   27440:	46c0      	nop			; (mov r8, r8)
   27442:	46bd      	mov	sp, r7
   27444:	bd80      	pop	{r7, pc}
   27446:	46c0      	nop			; (mov r8, r8)
   27448:	20004168 	.word	0x20004168

0002744c <SERCOM4_Handler>:
   2744c:	b580      	push	{r7, lr}
   2744e:	af00      	add	r7, sp, #0
   27450:	4b03      	ldr	r3, [pc, #12]	; (27460 <SERCOM4_Handler+0x14>)
   27452:	691b      	ldr	r3, [r3, #16]
   27454:	2004      	movs	r0, #4
   27456:	4798      	blx	r3
   27458:	46c0      	nop			; (mov r8, r8)
   2745a:	46bd      	mov	sp, r7
   2745c:	bd80      	pop	{r7, pc}
   2745e:	46c0      	nop			; (mov r8, r8)
   27460:	20004168 	.word	0x20004168

00027464 <SERCOM5_Handler>:
   27464:	b580      	push	{r7, lr}
   27466:	af00      	add	r7, sp, #0
   27468:	4b03      	ldr	r3, [pc, #12]	; (27478 <SERCOM5_Handler+0x14>)
   2746a:	695b      	ldr	r3, [r3, #20]
   2746c:	2005      	movs	r0, #5
   2746e:	4798      	blx	r3
   27470:	46c0      	nop			; (mov r8, r8)
   27472:	46bd      	mov	sp, r7
   27474:	bd80      	pop	{r7, pc}
   27476:	46c0      	nop			; (mov r8, r8)
   27478:	20004168 	.word	0x20004168

0002747c <system_pinmux_get_config_defaults>:
{
   2747c:	b580      	push	{r7, lr}
   2747e:	b082      	sub	sp, #8
   27480:	af00      	add	r7, sp, #0
   27482:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27484:	687b      	ldr	r3, [r7, #4]
   27486:	2280      	movs	r2, #128	; 0x80
   27488:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2748a:	687b      	ldr	r3, [r7, #4]
   2748c:	2200      	movs	r2, #0
   2748e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27490:	687b      	ldr	r3, [r7, #4]
   27492:	2201      	movs	r2, #1
   27494:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27496:	687b      	ldr	r3, [r7, #4]
   27498:	2200      	movs	r2, #0
   2749a:	70da      	strb	r2, [r3, #3]
}
   2749c:	46c0      	nop			; (mov r8, r8)
   2749e:	46bd      	mov	sp, r7
   274a0:	b002      	add	sp, #8
   274a2:	bd80      	pop	{r7, pc}

000274a4 <system_pinmux_get_group_from_gpio_pin>:
{
   274a4:	b580      	push	{r7, lr}
   274a6:	b084      	sub	sp, #16
   274a8:	af00      	add	r7, sp, #0
   274aa:	0002      	movs	r2, r0
   274ac:	1dfb      	adds	r3, r7, #7
   274ae:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   274b0:	230f      	movs	r3, #15
   274b2:	18fb      	adds	r3, r7, r3
   274b4:	1dfa      	adds	r2, r7, #7
   274b6:	7812      	ldrb	r2, [r2, #0]
   274b8:	09d2      	lsrs	r2, r2, #7
   274ba:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   274bc:	230e      	movs	r3, #14
   274be:	18fb      	adds	r3, r7, r3
   274c0:	1dfa      	adds	r2, r7, #7
   274c2:	7812      	ldrb	r2, [r2, #0]
   274c4:	0952      	lsrs	r2, r2, #5
   274c6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   274c8:	4b0d      	ldr	r3, [pc, #52]	; (27500 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   274ca:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   274cc:	230f      	movs	r3, #15
   274ce:	18fb      	adds	r3, r7, r3
   274d0:	781b      	ldrb	r3, [r3, #0]
   274d2:	2b00      	cmp	r3, #0
   274d4:	d10f      	bne.n	274f6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   274d6:	230f      	movs	r3, #15
   274d8:	18fb      	adds	r3, r7, r3
   274da:	781b      	ldrb	r3, [r3, #0]
   274dc:	009b      	lsls	r3, r3, #2
   274de:	2210      	movs	r2, #16
   274e0:	4694      	mov	ip, r2
   274e2:	44bc      	add	ip, r7
   274e4:	4463      	add	r3, ip
   274e6:	3b08      	subs	r3, #8
   274e8:	681a      	ldr	r2, [r3, #0]
   274ea:	230e      	movs	r3, #14
   274ec:	18fb      	adds	r3, r7, r3
   274ee:	781b      	ldrb	r3, [r3, #0]
   274f0:	01db      	lsls	r3, r3, #7
   274f2:	18d3      	adds	r3, r2, r3
   274f4:	e000      	b.n	274f8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   274f6:	2300      	movs	r3, #0
}
   274f8:	0018      	movs	r0, r3
   274fa:	46bd      	mov	sp, r7
   274fc:	b004      	add	sp, #16
   274fe:	bd80      	pop	{r7, pc}
   27500:	41004400 	.word	0x41004400

00027504 <port_get_group_from_gpio_pin>:
{
   27504:	b580      	push	{r7, lr}
   27506:	b082      	sub	sp, #8
   27508:	af00      	add	r7, sp, #0
   2750a:	0002      	movs	r2, r0
   2750c:	1dfb      	adds	r3, r7, #7
   2750e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   27510:	1dfb      	adds	r3, r7, #7
   27512:	781b      	ldrb	r3, [r3, #0]
   27514:	0018      	movs	r0, r3
   27516:	4b03      	ldr	r3, [pc, #12]	; (27524 <port_get_group_from_gpio_pin+0x20>)
   27518:	4798      	blx	r3
   2751a:	0003      	movs	r3, r0
}
   2751c:	0018      	movs	r0, r3
   2751e:	46bd      	mov	sp, r7
   27520:	b002      	add	sp, #8
   27522:	bd80      	pop	{r7, pc}
   27524:	000274a5 	.word	0x000274a5

00027528 <port_pin_set_output_level>:
{
   27528:	b580      	push	{r7, lr}
   2752a:	b084      	sub	sp, #16
   2752c:	af00      	add	r7, sp, #0
   2752e:	0002      	movs	r2, r0
   27530:	1dfb      	adds	r3, r7, #7
   27532:	701a      	strb	r2, [r3, #0]
   27534:	1dbb      	adds	r3, r7, #6
   27536:	1c0a      	adds	r2, r1, #0
   27538:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2753a:	1dfb      	adds	r3, r7, #7
   2753c:	781b      	ldrb	r3, [r3, #0]
   2753e:	0018      	movs	r0, r3
   27540:	4b0d      	ldr	r3, [pc, #52]	; (27578 <port_pin_set_output_level+0x50>)
   27542:	4798      	blx	r3
   27544:	0003      	movs	r3, r0
   27546:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   27548:	1dfb      	adds	r3, r7, #7
   2754a:	781b      	ldrb	r3, [r3, #0]
   2754c:	221f      	movs	r2, #31
   2754e:	4013      	ands	r3, r2
   27550:	2201      	movs	r2, #1
   27552:	409a      	lsls	r2, r3
   27554:	0013      	movs	r3, r2
   27556:	60bb      	str	r3, [r7, #8]
	if (level) {
   27558:	1dbb      	adds	r3, r7, #6
   2755a:	781b      	ldrb	r3, [r3, #0]
   2755c:	2b00      	cmp	r3, #0
   2755e:	d003      	beq.n	27568 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   27560:	68fb      	ldr	r3, [r7, #12]
   27562:	68ba      	ldr	r2, [r7, #8]
   27564:	619a      	str	r2, [r3, #24]
}
   27566:	e002      	b.n	2756e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   27568:	68fb      	ldr	r3, [r7, #12]
   2756a:	68ba      	ldr	r2, [r7, #8]
   2756c:	615a      	str	r2, [r3, #20]
}
   2756e:	46c0      	nop			; (mov r8, r8)
   27570:	46bd      	mov	sp, r7
   27572:	b004      	add	sp, #16
   27574:	bd80      	pop	{r7, pc}
   27576:	46c0      	nop			; (mov r8, r8)
   27578:	00027505 	.word	0x00027505

0002757c <system_gclk_chan_get_config_defaults>:
{
   2757c:	b580      	push	{r7, lr}
   2757e:	b082      	sub	sp, #8
   27580:	af00      	add	r7, sp, #0
   27582:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27584:	687b      	ldr	r3, [r7, #4]
   27586:	2200      	movs	r2, #0
   27588:	701a      	strb	r2, [r3, #0]
}
   2758a:	46c0      	nop			; (mov r8, r8)
   2758c:	46bd      	mov	sp, r7
   2758e:	b002      	add	sp, #8
   27590:	bd80      	pop	{r7, pc}
	...

00027594 <system_apb_clock_set_mask>:
{
   27594:	b580      	push	{r7, lr}
   27596:	b082      	sub	sp, #8
   27598:	af00      	add	r7, sp, #0
   2759a:	0002      	movs	r2, r0
   2759c:	6039      	str	r1, [r7, #0]
   2759e:	1dfb      	adds	r3, r7, #7
   275a0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   275a2:	1dfb      	adds	r3, r7, #7
   275a4:	781b      	ldrb	r3, [r3, #0]
   275a6:	2b01      	cmp	r3, #1
   275a8:	d00a      	beq.n	275c0 <system_apb_clock_set_mask+0x2c>
   275aa:	2b02      	cmp	r3, #2
   275ac:	d00f      	beq.n	275ce <system_apb_clock_set_mask+0x3a>
   275ae:	2b00      	cmp	r3, #0
   275b0:	d114      	bne.n	275dc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   275b2:	4b0e      	ldr	r3, [pc, #56]	; (275ec <system_apb_clock_set_mask+0x58>)
   275b4:	4a0d      	ldr	r2, [pc, #52]	; (275ec <system_apb_clock_set_mask+0x58>)
   275b6:	6991      	ldr	r1, [r2, #24]
   275b8:	683a      	ldr	r2, [r7, #0]
   275ba:	430a      	orrs	r2, r1
   275bc:	619a      	str	r2, [r3, #24]
			break;
   275be:	e00f      	b.n	275e0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   275c0:	4b0a      	ldr	r3, [pc, #40]	; (275ec <system_apb_clock_set_mask+0x58>)
   275c2:	4a0a      	ldr	r2, [pc, #40]	; (275ec <system_apb_clock_set_mask+0x58>)
   275c4:	69d1      	ldr	r1, [r2, #28]
   275c6:	683a      	ldr	r2, [r7, #0]
   275c8:	430a      	orrs	r2, r1
   275ca:	61da      	str	r2, [r3, #28]
			break;
   275cc:	e008      	b.n	275e0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   275ce:	4b07      	ldr	r3, [pc, #28]	; (275ec <system_apb_clock_set_mask+0x58>)
   275d0:	4a06      	ldr	r2, [pc, #24]	; (275ec <system_apb_clock_set_mask+0x58>)
   275d2:	6a11      	ldr	r1, [r2, #32]
   275d4:	683a      	ldr	r2, [r7, #0]
   275d6:	430a      	orrs	r2, r1
   275d8:	621a      	str	r2, [r3, #32]
			break;
   275da:	e001      	b.n	275e0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   275dc:	2317      	movs	r3, #23
   275de:	e000      	b.n	275e2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   275e0:	2300      	movs	r3, #0
}
   275e2:	0018      	movs	r0, r3
   275e4:	46bd      	mov	sp, r7
   275e6:	b002      	add	sp, #8
   275e8:	bd80      	pop	{r7, pc}
   275ea:	46c0      	nop			; (mov r8, r8)
   275ec:	40000400 	.word	0x40000400

000275f0 <system_is_debugger_present>:
{
   275f0:	b580      	push	{r7, lr}
   275f2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   275f4:	4b05      	ldr	r3, [pc, #20]	; (2760c <system_is_debugger_present+0x1c>)
   275f6:	789b      	ldrb	r3, [r3, #2]
   275f8:	b2db      	uxtb	r3, r3
   275fa:	001a      	movs	r2, r3
   275fc:	2302      	movs	r3, #2
   275fe:	4013      	ands	r3, r2
   27600:	1e5a      	subs	r2, r3, #1
   27602:	4193      	sbcs	r3, r2
   27604:	b2db      	uxtb	r3, r3
}
   27606:	0018      	movs	r0, r3
   27608:	46bd      	mov	sp, r7
   2760a:	bd80      	pop	{r7, pc}
   2760c:	41002000 	.word	0x41002000

00027610 <system_interrupt_enable>:
{
   27610:	b580      	push	{r7, lr}
   27612:	b082      	sub	sp, #8
   27614:	af00      	add	r7, sp, #0
   27616:	0002      	movs	r2, r0
   27618:	1dfb      	adds	r3, r7, #7
   2761a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2761c:	4b06      	ldr	r3, [pc, #24]	; (27638 <system_interrupt_enable+0x28>)
   2761e:	1dfa      	adds	r2, r7, #7
   27620:	7812      	ldrb	r2, [r2, #0]
   27622:	0011      	movs	r1, r2
   27624:	221f      	movs	r2, #31
   27626:	400a      	ands	r2, r1
   27628:	2101      	movs	r1, #1
   2762a:	4091      	lsls	r1, r2
   2762c:	000a      	movs	r2, r1
   2762e:	601a      	str	r2, [r3, #0]
}
   27630:	46c0      	nop			; (mov r8, r8)
   27632:	46bd      	mov	sp, r7
   27634:	b002      	add	sp, #8
   27636:	bd80      	pop	{r7, pc}
   27638:	e000e100 	.word	0xe000e100

0002763c <system_interrupt_disable>:
{
   2763c:	b580      	push	{r7, lr}
   2763e:	b082      	sub	sp, #8
   27640:	af00      	add	r7, sp, #0
   27642:	0002      	movs	r2, r0
   27644:	1dfb      	adds	r3, r7, #7
   27646:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27648:	4a07      	ldr	r2, [pc, #28]	; (27668 <system_interrupt_disable+0x2c>)
   2764a:	1dfb      	adds	r3, r7, #7
   2764c:	781b      	ldrb	r3, [r3, #0]
   2764e:	0019      	movs	r1, r3
   27650:	231f      	movs	r3, #31
   27652:	400b      	ands	r3, r1
   27654:	2101      	movs	r1, #1
   27656:	4099      	lsls	r1, r3
   27658:	000b      	movs	r3, r1
   2765a:	0019      	movs	r1, r3
   2765c:	2380      	movs	r3, #128	; 0x80
   2765e:	50d1      	str	r1, [r2, r3]
}
   27660:	46c0      	nop			; (mov r8, r8)
   27662:	46bd      	mov	sp, r7
   27664:	b002      	add	sp, #8
   27666:	bd80      	pop	{r7, pc}
   27668:	e000e100 	.word	0xe000e100

0002766c <spi_is_syncing>:
{
   2766c:	b580      	push	{r7, lr}
   2766e:	b084      	sub	sp, #16
   27670:	af00      	add	r7, sp, #0
   27672:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27674:	687b      	ldr	r3, [r7, #4]
   27676:	681b      	ldr	r3, [r3, #0]
   27678:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2767a:	68fb      	ldr	r3, [r7, #12]
   2767c:	69db      	ldr	r3, [r3, #28]
   2767e:	1e5a      	subs	r2, r3, #1
   27680:	4193      	sbcs	r3, r2
   27682:	b2db      	uxtb	r3, r3
}
   27684:	0018      	movs	r0, r3
   27686:	46bd      	mov	sp, r7
   27688:	b004      	add	sp, #16
   2768a:	bd80      	pop	{r7, pc}

0002768c <spi_enable>:
{
   2768c:	b580      	push	{r7, lr}
   2768e:	b084      	sub	sp, #16
   27690:	af00      	add	r7, sp, #0
   27692:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27694:	687b      	ldr	r3, [r7, #4]
   27696:	681b      	ldr	r3, [r3, #0]
   27698:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2769a:	687b      	ldr	r3, [r7, #4]
   2769c:	681b      	ldr	r3, [r3, #0]
   2769e:	0018      	movs	r0, r3
   276a0:	4b0b      	ldr	r3, [pc, #44]	; (276d0 <spi_enable+0x44>)
   276a2:	4798      	blx	r3
   276a4:	0003      	movs	r3, r0
   276a6:	0018      	movs	r0, r3
   276a8:	4b0a      	ldr	r3, [pc, #40]	; (276d4 <spi_enable+0x48>)
   276aa:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   276ac:	46c0      	nop			; (mov r8, r8)
   276ae:	687b      	ldr	r3, [r7, #4]
   276b0:	0018      	movs	r0, r3
   276b2:	4b09      	ldr	r3, [pc, #36]	; (276d8 <spi_enable+0x4c>)
   276b4:	4798      	blx	r3
   276b6:	1e03      	subs	r3, r0, #0
   276b8:	d1f9      	bne.n	276ae <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   276ba:	68fb      	ldr	r3, [r7, #12]
   276bc:	681b      	ldr	r3, [r3, #0]
   276be:	2202      	movs	r2, #2
   276c0:	431a      	orrs	r2, r3
   276c2:	68fb      	ldr	r3, [r7, #12]
   276c4:	601a      	str	r2, [r3, #0]
}
   276c6:	46c0      	nop			; (mov r8, r8)
   276c8:	46bd      	mov	sp, r7
   276ca:	b004      	add	sp, #16
   276cc:	bd80      	pop	{r7, pc}
   276ce:	46c0      	nop			; (mov r8, r8)
   276d0:	000273a9 	.word	0x000273a9
   276d4:	00027611 	.word	0x00027611
   276d8:	0002766d 	.word	0x0002766d

000276dc <spi_disable>:
{
   276dc:	b580      	push	{r7, lr}
   276de:	b084      	sub	sp, #16
   276e0:	af00      	add	r7, sp, #0
   276e2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   276e4:	687b      	ldr	r3, [r7, #4]
   276e6:	681b      	ldr	r3, [r3, #0]
   276e8:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   276ea:	687b      	ldr	r3, [r7, #4]
   276ec:	681b      	ldr	r3, [r3, #0]
   276ee:	0018      	movs	r0, r3
   276f0:	4b0e      	ldr	r3, [pc, #56]	; (2772c <spi_disable+0x50>)
   276f2:	4798      	blx	r3
   276f4:	0003      	movs	r3, r0
   276f6:	0018      	movs	r0, r3
   276f8:	4b0d      	ldr	r3, [pc, #52]	; (27730 <spi_disable+0x54>)
   276fa:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   276fc:	46c0      	nop			; (mov r8, r8)
   276fe:	687b      	ldr	r3, [r7, #4]
   27700:	0018      	movs	r0, r3
   27702:	4b0c      	ldr	r3, [pc, #48]	; (27734 <spi_disable+0x58>)
   27704:	4798      	blx	r3
   27706:	1e03      	subs	r3, r0, #0
   27708:	d1f9      	bne.n	276fe <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2770a:	68fb      	ldr	r3, [r7, #12]
   2770c:	228f      	movs	r2, #143	; 0x8f
   2770e:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   27710:	68fb      	ldr	r3, [r7, #12]
   27712:	228f      	movs	r2, #143	; 0x8f
   27714:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   27716:	68fb      	ldr	r3, [r7, #12]
   27718:	681b      	ldr	r3, [r3, #0]
   2771a:	2202      	movs	r2, #2
   2771c:	4393      	bics	r3, r2
   2771e:	001a      	movs	r2, r3
   27720:	68fb      	ldr	r3, [r7, #12]
   27722:	601a      	str	r2, [r3, #0]
}
   27724:	46c0      	nop			; (mov r8, r8)
   27726:	46bd      	mov	sp, r7
   27728:	b004      	add	sp, #16
   2772a:	bd80      	pop	{r7, pc}
   2772c:	000273a9 	.word	0x000273a9
   27730:	0002763d 	.word	0x0002763d
   27734:	0002766d 	.word	0x0002766d

00027738 <spi_is_write_complete>:
{
   27738:	b580      	push	{r7, lr}
   2773a:	b084      	sub	sp, #16
   2773c:	af00      	add	r7, sp, #0
   2773e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27740:	687b      	ldr	r3, [r7, #4]
   27742:	681b      	ldr	r3, [r3, #0]
   27744:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   27746:	68fb      	ldr	r3, [r7, #12]
   27748:	7e1b      	ldrb	r3, [r3, #24]
   2774a:	b2db      	uxtb	r3, r3
   2774c:	001a      	movs	r2, r3
   2774e:	2302      	movs	r3, #2
   27750:	4013      	ands	r3, r2
   27752:	1e5a      	subs	r2, r3, #1
   27754:	4193      	sbcs	r3, r2
   27756:	b2db      	uxtb	r3, r3
}
   27758:	0018      	movs	r0, r3
   2775a:	46bd      	mov	sp, r7
   2775c:	b004      	add	sp, #16
   2775e:	bd80      	pop	{r7, pc}

00027760 <spi_is_ready_to_write>:
{
   27760:	b580      	push	{r7, lr}
   27762:	b084      	sub	sp, #16
   27764:	af00      	add	r7, sp, #0
   27766:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27768:	687b      	ldr	r3, [r7, #4]
   2776a:	681b      	ldr	r3, [r3, #0]
   2776c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   2776e:	68fb      	ldr	r3, [r7, #12]
   27770:	7e1b      	ldrb	r3, [r3, #24]
   27772:	b2db      	uxtb	r3, r3
   27774:	001a      	movs	r2, r3
   27776:	2301      	movs	r3, #1
   27778:	4013      	ands	r3, r2
   2777a:	1e5a      	subs	r2, r3, #1
   2777c:	4193      	sbcs	r3, r2
   2777e:	b2db      	uxtb	r3, r3
}
   27780:	0018      	movs	r0, r3
   27782:	46bd      	mov	sp, r7
   27784:	b004      	add	sp, #16
   27786:	bd80      	pop	{r7, pc}

00027788 <spi_is_ready_to_read>:
{
   27788:	b580      	push	{r7, lr}
   2778a:	b084      	sub	sp, #16
   2778c:	af00      	add	r7, sp, #0
   2778e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27790:	687b      	ldr	r3, [r7, #4]
   27792:	681b      	ldr	r3, [r3, #0]
   27794:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   27796:	68fb      	ldr	r3, [r7, #12]
   27798:	7e1b      	ldrb	r3, [r3, #24]
   2779a:	b2db      	uxtb	r3, r3
   2779c:	001a      	movs	r2, r3
   2779e:	2304      	movs	r3, #4
   277a0:	4013      	ands	r3, r2
   277a2:	1e5a      	subs	r2, r3, #1
   277a4:	4193      	sbcs	r3, r2
   277a6:	b2db      	uxtb	r3, r3
}
   277a8:	0018      	movs	r0, r3
   277aa:	46bd      	mov	sp, r7
   277ac:	b004      	add	sp, #16
   277ae:	bd80      	pop	{r7, pc}

000277b0 <spi_write>:
{
   277b0:	b580      	push	{r7, lr}
   277b2:	b084      	sub	sp, #16
   277b4:	af00      	add	r7, sp, #0
   277b6:	6078      	str	r0, [r7, #4]
   277b8:	000a      	movs	r2, r1
   277ba:	1cbb      	adds	r3, r7, #2
   277bc:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   277be:	687b      	ldr	r3, [r7, #4]
   277c0:	681b      	ldr	r3, [r3, #0]
   277c2:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   277c4:	687b      	ldr	r3, [r7, #4]
   277c6:	0018      	movs	r0, r3
   277c8:	4b0a      	ldr	r3, [pc, #40]	; (277f4 <spi_write+0x44>)
   277ca:	4798      	blx	r3
   277cc:	0003      	movs	r3, r0
   277ce:	001a      	movs	r2, r3
   277d0:	2301      	movs	r3, #1
   277d2:	4053      	eors	r3, r2
   277d4:	b2db      	uxtb	r3, r3
   277d6:	2b00      	cmp	r3, #0
   277d8:	d001      	beq.n	277de <spi_write+0x2e>
		return STATUS_BUSY;
   277da:	2305      	movs	r3, #5
   277dc:	e006      	b.n	277ec <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   277de:	1cbb      	adds	r3, r7, #2
   277e0:	881b      	ldrh	r3, [r3, #0]
   277e2:	05db      	lsls	r3, r3, #23
   277e4:	0dda      	lsrs	r2, r3, #23
   277e6:	68fb      	ldr	r3, [r7, #12]
   277e8:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   277ea:	2300      	movs	r3, #0
}
   277ec:	0018      	movs	r0, r3
   277ee:	46bd      	mov	sp, r7
   277f0:	b004      	add	sp, #16
   277f2:	bd80      	pop	{r7, pc}
   277f4:	00027761 	.word	0x00027761

000277f8 <spi_read>:
{
   277f8:	b580      	push	{r7, lr}
   277fa:	b084      	sub	sp, #16
   277fc:	af00      	add	r7, sp, #0
   277fe:	6078      	str	r0, [r7, #4]
   27800:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27802:	687b      	ldr	r3, [r7, #4]
   27804:	681b      	ldr	r3, [r3, #0]
   27806:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   27808:	687b      	ldr	r3, [r7, #4]
   2780a:	0018      	movs	r0, r3
   2780c:	4b1b      	ldr	r3, [pc, #108]	; (2787c <spi_read+0x84>)
   2780e:	4798      	blx	r3
   27810:	0003      	movs	r3, r0
   27812:	001a      	movs	r2, r3
   27814:	2301      	movs	r3, #1
   27816:	4053      	eors	r3, r2
   27818:	b2db      	uxtb	r3, r3
   2781a:	2b00      	cmp	r3, #0
   2781c:	d001      	beq.n	27822 <spi_read+0x2a>
		return STATUS_ERR_IO;
   2781e:	2310      	movs	r3, #16
   27820:	e027      	b.n	27872 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   27822:	230f      	movs	r3, #15
   27824:	18fb      	adds	r3, r7, r3
   27826:	2200      	movs	r2, #0
   27828:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2782a:	68bb      	ldr	r3, [r7, #8]
   2782c:	8b5b      	ldrh	r3, [r3, #26]
   2782e:	b29b      	uxth	r3, r3
   27830:	001a      	movs	r2, r3
   27832:	2304      	movs	r3, #4
   27834:	4013      	ands	r3, r2
   27836:	d006      	beq.n	27846 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   27838:	230f      	movs	r3, #15
   2783a:	18fb      	adds	r3, r7, r3
   2783c:	221e      	movs	r2, #30
   2783e:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27840:	68bb      	ldr	r3, [r7, #8]
   27842:	2204      	movs	r2, #4
   27844:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27846:	687b      	ldr	r3, [r7, #4]
   27848:	799b      	ldrb	r3, [r3, #6]
   2784a:	2b01      	cmp	r3, #1
   2784c:	d108      	bne.n	27860 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   2784e:	68bb      	ldr	r3, [r7, #8]
   27850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27852:	b29b      	uxth	r3, r3
   27854:	05db      	lsls	r3, r3, #23
   27856:	0ddb      	lsrs	r3, r3, #23
   27858:	b29a      	uxth	r2, r3
   2785a:	683b      	ldr	r3, [r7, #0]
   2785c:	801a      	strh	r2, [r3, #0]
   2785e:	e005      	b.n	2786c <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   27860:	68bb      	ldr	r3, [r7, #8]
   27862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27864:	b2db      	uxtb	r3, r3
   27866:	b29a      	uxth	r2, r3
   27868:	683b      	ldr	r3, [r7, #0]
   2786a:	801a      	strh	r2, [r3, #0]
	return retval;
   2786c:	230f      	movs	r3, #15
   2786e:	18fb      	adds	r3, r7, r3
   27870:	781b      	ldrb	r3, [r3, #0]
}
   27872:	0018      	movs	r0, r3
   27874:	46bd      	mov	sp, r7
   27876:	b004      	add	sp, #16
   27878:	bd80      	pop	{r7, pc}
   2787a:	46c0      	nop			; (mov r8, r8)
   2787c:	00027789 	.word	0x00027789

00027880 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   27880:	b590      	push	{r4, r7, lr}
   27882:	b089      	sub	sp, #36	; 0x24
   27884:	af00      	add	r7, sp, #0
   27886:	6078      	str	r0, [r7, #4]
   27888:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2788a:	230c      	movs	r3, #12
   2788c:	18fb      	adds	r3, r7, r3
   2788e:	2200      	movs	r2, #0
   27890:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   27892:	687b      	ldr	r3, [r7, #4]
   27894:	681b      	ldr	r3, [r3, #0]
   27896:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   27898:	687b      	ldr	r3, [r7, #4]
   2789a:	0018      	movs	r0, r3
   2789c:	4b24      	ldr	r3, [pc, #144]	; (27930 <spi_set_baudrate+0xb0>)
   2789e:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   278a0:	46c0      	nop			; (mov r8, r8)
   278a2:	687b      	ldr	r3, [r7, #4]
   278a4:	0018      	movs	r0, r3
   278a6:	4b23      	ldr	r3, [pc, #140]	; (27934 <spi_set_baudrate+0xb4>)
   278a8:	4798      	blx	r3
   278aa:	1e03      	subs	r3, r0, #0
   278ac:	d1f9      	bne.n	278a2 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   278ae:	687b      	ldr	r3, [r7, #4]
   278b0:	681b      	ldr	r3, [r3, #0]
   278b2:	0018      	movs	r0, r3
   278b4:	4b20      	ldr	r3, [pc, #128]	; (27938 <spi_set_baudrate+0xb8>)
   278b6:	4798      	blx	r3
   278b8:	0003      	movs	r3, r0
   278ba:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   278bc:	69bb      	ldr	r3, [r7, #24]
   278be:	3314      	adds	r3, #20
   278c0:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   278c2:	697b      	ldr	r3, [r7, #20]
   278c4:	b2db      	uxtb	r3, r3
   278c6:	0018      	movs	r0, r3
   278c8:	4b1c      	ldr	r3, [pc, #112]	; (2793c <spi_set_baudrate+0xbc>)
   278ca:	4798      	blx	r3
   278cc:	0003      	movs	r3, r0
   278ce:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   278d0:	230f      	movs	r3, #15
   278d2:	18fc      	adds	r4, r7, r3
   278d4:	230c      	movs	r3, #12
   278d6:	18fa      	adds	r2, r7, r3
   278d8:	6939      	ldr	r1, [r7, #16]
   278da:	683b      	ldr	r3, [r7, #0]
   278dc:	0018      	movs	r0, r3
   278de:	4b18      	ldr	r3, [pc, #96]	; (27940 <spi_set_baudrate+0xc0>)
   278e0:	4798      	blx	r3
   278e2:	0003      	movs	r3, r0
   278e4:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   278e6:	230f      	movs	r3, #15
   278e8:	18fb      	adds	r3, r7, r3
   278ea:	781b      	ldrb	r3, [r3, #0]
   278ec:	2b00      	cmp	r3, #0
   278ee:	d001      	beq.n	278f4 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   278f0:	2317      	movs	r3, #23
   278f2:	e018      	b.n	27926 <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   278f4:	230c      	movs	r3, #12
   278f6:	18fb      	adds	r3, r7, r3
   278f8:	881b      	ldrh	r3, [r3, #0]
   278fa:	b2da      	uxtb	r2, r3
   278fc:	69fb      	ldr	r3, [r7, #28]
   278fe:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   27900:	46c0      	nop			; (mov r8, r8)
   27902:	687b      	ldr	r3, [r7, #4]
   27904:	0018      	movs	r0, r3
   27906:	4b0b      	ldr	r3, [pc, #44]	; (27934 <spi_set_baudrate+0xb4>)
   27908:	4798      	blx	r3
   2790a:	1e03      	subs	r3, r0, #0
   2790c:	d1f9      	bne.n	27902 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   2790e:	687b      	ldr	r3, [r7, #4]
   27910:	0018      	movs	r0, r3
   27912:	4b0c      	ldr	r3, [pc, #48]	; (27944 <spi_set_baudrate+0xc4>)
   27914:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   27916:	46c0      	nop			; (mov r8, r8)
   27918:	687b      	ldr	r3, [r7, #4]
   2791a:	0018      	movs	r0, r3
   2791c:	4b05      	ldr	r3, [pc, #20]	; (27934 <spi_set_baudrate+0xb4>)
   2791e:	4798      	blx	r3
   27920:	1e03      	subs	r3, r0, #0
   27922:	d1f9      	bne.n	27918 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   27924:	2300      	movs	r3, #0
}
   27926:	0018      	movs	r0, r3
   27928:	46bd      	mov	sp, r7
   2792a:	b009      	add	sp, #36	; 0x24
   2792c:	bd90      	pop	{r4, r7, pc}
   2792e:	46c0      	nop			; (mov r8, r8)
   27930:	000276dd 	.word	0x000276dd
   27934:	0002766d 	.word	0x0002766d
   27938:	000272d9 	.word	0x000272d9
   2793c:	00029c8d 	.word	0x00029c8d
   27940:	00026e53 	.word	0x00026e53
   27944:	0002768d 	.word	0x0002768d

00027948 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   27948:	b590      	push	{r4, r7, lr}
   2794a:	b093      	sub	sp, #76	; 0x4c
   2794c:	af00      	add	r7, sp, #0
   2794e:	6078      	str	r0, [r7, #4]
   27950:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   27952:	687b      	ldr	r3, [r7, #4]
   27954:	681b      	ldr	r3, [r3, #0]
   27956:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   27958:	687b      	ldr	r3, [r7, #4]
   2795a:	681b      	ldr	r3, [r3, #0]
   2795c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2795e:	231c      	movs	r3, #28
   27960:	18fb      	adds	r3, r7, r3
   27962:	0018      	movs	r0, r3
   27964:	4b75      	ldr	r3, [pc, #468]	; (27b3c <_spi_set_config+0x1f4>)
   27966:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27968:	231c      	movs	r3, #28
   2796a:	18fb      	adds	r3, r7, r3
   2796c:	2200      	movs	r2, #0
   2796e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   27970:	683b      	ldr	r3, [r7, #0]
   27972:	781b      	ldrb	r3, [r3, #0]
   27974:	2b00      	cmp	r3, #0
   27976:	d103      	bne.n	27980 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   27978:	231c      	movs	r3, #28
   2797a:	18fb      	adds	r3, r7, r3
   2797c:	2200      	movs	r2, #0
   2797e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27980:	683b      	ldr	r3, [r7, #0]
   27982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   27984:	230c      	movs	r3, #12
   27986:	18fb      	adds	r3, r7, r3
   27988:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2798a:	683b      	ldr	r3, [r7, #0]
   2798c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   2798e:	230c      	movs	r3, #12
   27990:	18fb      	adds	r3, r7, r3
   27992:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   27994:	683b      	ldr	r3, [r7, #0]
   27996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   27998:	230c      	movs	r3, #12
   2799a:	18fb      	adds	r3, r7, r3
   2799c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2799e:	683b      	ldr	r3, [r7, #0]
   279a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   279a2:	230c      	movs	r3, #12
   279a4:	18fb      	adds	r3, r7, r3
   279a6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   279a8:	2347      	movs	r3, #71	; 0x47
   279aa:	18fb      	adds	r3, r7, r3
   279ac:	2200      	movs	r2, #0
   279ae:	701a      	strb	r2, [r3, #0]
   279b0:	e02c      	b.n	27a0c <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   279b2:	2347      	movs	r3, #71	; 0x47
   279b4:	18fb      	adds	r3, r7, r3
   279b6:	781a      	ldrb	r2, [r3, #0]
   279b8:	230c      	movs	r3, #12
   279ba:	18fb      	adds	r3, r7, r3
   279bc:	0092      	lsls	r2, r2, #2
   279be:	58d3      	ldr	r3, [r2, r3]
   279c0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   279c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   279c4:	2b00      	cmp	r3, #0
   279c6:	d109      	bne.n	279dc <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   279c8:	2347      	movs	r3, #71	; 0x47
   279ca:	18fb      	adds	r3, r7, r3
   279cc:	781a      	ldrb	r2, [r3, #0]
   279ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   279d0:	0011      	movs	r1, r2
   279d2:	0018      	movs	r0, r3
   279d4:	4b5a      	ldr	r3, [pc, #360]	; (27b40 <_spi_set_config+0x1f8>)
   279d6:	4798      	blx	r3
   279d8:	0003      	movs	r3, r0
   279da:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   279dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   279de:	3301      	adds	r3, #1
   279e0:	d00d      	beq.n	279fe <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   279e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   279e4:	b2da      	uxtb	r2, r3
   279e6:	231c      	movs	r3, #28
   279e8:	18fb      	adds	r3, r7, r3
   279ea:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   279ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   279ee:	0c1b      	lsrs	r3, r3, #16
   279f0:	b2db      	uxtb	r3, r3
   279f2:	221c      	movs	r2, #28
   279f4:	18ba      	adds	r2, r7, r2
   279f6:	0011      	movs	r1, r2
   279f8:	0018      	movs	r0, r3
   279fa:	4b52      	ldr	r3, [pc, #328]	; (27b44 <_spi_set_config+0x1fc>)
   279fc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   279fe:	2347      	movs	r3, #71	; 0x47
   27a00:	18fb      	adds	r3, r7, r3
   27a02:	781a      	ldrb	r2, [r3, #0]
   27a04:	2347      	movs	r3, #71	; 0x47
   27a06:	18fb      	adds	r3, r7, r3
   27a08:	3201      	adds	r2, #1
   27a0a:	701a      	strb	r2, [r3, #0]
   27a0c:	2347      	movs	r3, #71	; 0x47
   27a0e:	18fb      	adds	r3, r7, r3
   27a10:	781b      	ldrb	r3, [r3, #0]
   27a12:	2b03      	cmp	r3, #3
   27a14:	d9cd      	bls.n	279b2 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   27a16:	683b      	ldr	r3, [r7, #0]
   27a18:	781a      	ldrb	r2, [r3, #0]
   27a1a:	687b      	ldr	r3, [r7, #4]
   27a1c:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   27a1e:	683b      	ldr	r3, [r7, #0]
   27a20:	7c1a      	ldrb	r2, [r3, #16]
   27a22:	687b      	ldr	r3, [r7, #4]
   27a24:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   27a26:	683b      	ldr	r3, [r7, #0]
   27a28:	7c9a      	ldrb	r2, [r3, #18]
   27a2a:	687b      	ldr	r3, [r7, #4]
   27a2c:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   27a2e:	683b      	ldr	r3, [r7, #0]
   27a30:	7d1a      	ldrb	r2, [r3, #20]
   27a32:	687b      	ldr	r3, [r7, #4]
   27a34:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   27a36:	230a      	movs	r3, #10
   27a38:	18fb      	adds	r3, r7, r3
   27a3a:	2200      	movs	r2, #0
   27a3c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   27a3e:	2300      	movs	r3, #0
   27a40:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   27a42:	2300      	movs	r3, #0
   27a44:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   27a46:	683b      	ldr	r3, [r7, #0]
   27a48:	781b      	ldrb	r3, [r3, #0]
   27a4a:	2b01      	cmp	r3, #1
   27a4c:	d129      	bne.n	27aa2 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27a4e:	687b      	ldr	r3, [r7, #4]
   27a50:	681b      	ldr	r3, [r3, #0]
   27a52:	0018      	movs	r0, r3
   27a54:	4b3c      	ldr	r3, [pc, #240]	; (27b48 <_spi_set_config+0x200>)
   27a56:	4798      	blx	r3
   27a58:	0003      	movs	r3, r0
   27a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27a5e:	3314      	adds	r3, #20
   27a60:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27a64:	b2db      	uxtb	r3, r3
   27a66:	0018      	movs	r0, r3
   27a68:	4b38      	ldr	r3, [pc, #224]	; (27b4c <_spi_set_config+0x204>)
   27a6a:	4798      	blx	r3
   27a6c:	0003      	movs	r3, r0
   27a6e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   27a70:	683b      	ldr	r3, [r7, #0]
   27a72:	699b      	ldr	r3, [r3, #24]
   27a74:	2223      	movs	r2, #35	; 0x23
   27a76:	18bc      	adds	r4, r7, r2
   27a78:	220a      	movs	r2, #10
   27a7a:	18ba      	adds	r2, r7, r2
   27a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27a7e:	0018      	movs	r0, r3
   27a80:	4b33      	ldr	r3, [pc, #204]	; (27b50 <_spi_set_config+0x208>)
   27a82:	4798      	blx	r3
   27a84:	0003      	movs	r3, r0
   27a86:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   27a88:	2323      	movs	r3, #35	; 0x23
   27a8a:	18fb      	adds	r3, r7, r3
   27a8c:	781b      	ldrb	r3, [r3, #0]
   27a8e:	2b00      	cmp	r3, #0
   27a90:	d001      	beq.n	27a96 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   27a92:	2317      	movs	r3, #23
   27a94:	e04e      	b.n	27b34 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   27a96:	230a      	movs	r3, #10
   27a98:	18fb      	adds	r3, r7, r3
   27a9a:	881b      	ldrh	r3, [r3, #0]
   27a9c:	b2da      	uxtb	r2, r3
   27a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27aa0:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   27aa2:	683b      	ldr	r3, [r7, #0]
   27aa4:	685b      	ldr	r3, [r3, #4]
   27aa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27aa8:	4313      	orrs	r3, r2
   27aaa:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   27aac:	683b      	ldr	r3, [r7, #0]
   27aae:	689b      	ldr	r3, [r3, #8]
   27ab0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27ab2:	4313      	orrs	r3, r2
   27ab4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   27ab6:	683b      	ldr	r3, [r7, #0]
   27ab8:	68db      	ldr	r3, [r3, #12]
   27aba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27abc:	4313      	orrs	r3, r2
   27abe:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   27ac0:	683b      	ldr	r3, [r7, #0]
   27ac2:	7c1b      	ldrb	r3, [r3, #16]
   27ac4:	001a      	movs	r2, r3
   27ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27ac8:	4313      	orrs	r3, r2
   27aca:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   27acc:	683b      	ldr	r3, [r7, #0]
   27ace:	7c5b      	ldrb	r3, [r3, #17]
   27ad0:	2b00      	cmp	r3, #0
   27ad2:	d103      	bne.n	27adc <_spi_set_config+0x194>
   27ad4:	4b1f      	ldr	r3, [pc, #124]	; (27b54 <_spi_set_config+0x20c>)
   27ad6:	4798      	blx	r3
   27ad8:	1e03      	subs	r3, r0, #0
   27ada:	d003      	beq.n	27ae4 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   27adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27ade:	2280      	movs	r2, #128	; 0x80
   27ae0:	4313      	orrs	r3, r2
   27ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   27ae4:	683b      	ldr	r3, [r7, #0]
   27ae6:	7c9b      	ldrb	r3, [r3, #18]
   27ae8:	2b00      	cmp	r3, #0
   27aea:	d004      	beq.n	27af6 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   27aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27aee:	2280      	movs	r2, #128	; 0x80
   27af0:	0292      	lsls	r2, r2, #10
   27af2:	4313      	orrs	r3, r2
   27af4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   27af6:	683b      	ldr	r3, [r7, #0]
   27af8:	7cdb      	ldrb	r3, [r3, #19]
   27afa:	2b00      	cmp	r3, #0
   27afc:	d004      	beq.n	27b08 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   27afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27b00:	2280      	movs	r2, #128	; 0x80
   27b02:	0092      	lsls	r2, r2, #2
   27b04:	4313      	orrs	r3, r2
   27b06:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   27b08:	683b      	ldr	r3, [r7, #0]
   27b0a:	7d1b      	ldrb	r3, [r3, #20]
   27b0c:	2b00      	cmp	r3, #0
   27b0e:	d004      	beq.n	27b1a <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   27b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27b12:	2280      	movs	r2, #128	; 0x80
   27b14:	0192      	lsls	r2, r2, #6
   27b16:	4313      	orrs	r3, r2
   27b18:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   27b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27b1c:	681a      	ldr	r2, [r3, #0]
   27b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27b20:	431a      	orrs	r2, r3
   27b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27b24:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   27b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27b28:	685a      	ldr	r2, [r3, #4]
   27b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27b2c:	431a      	orrs	r2, r3
   27b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27b30:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   27b32:	2300      	movs	r3, #0
}
   27b34:	0018      	movs	r0, r3
   27b36:	46bd      	mov	sp, r7
   27b38:	b013      	add	sp, #76	; 0x4c
   27b3a:	bd90      	pop	{r4, r7, pc}
   27b3c:	0002747d 	.word	0x0002747d
   27b40:	0002711d 	.word	0x0002711d
   27b44:	00029ec9 	.word	0x00029ec9
   27b48:	000272d9 	.word	0x000272d9
   27b4c:	00029c8d 	.word	0x00029c8d
   27b50:	00026e53 	.word	0x00026e53
   27b54:	000275f1 	.word	0x000275f1

00027b58 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   27b58:	b590      	push	{r4, r7, lr}
   27b5a:	b08b      	sub	sp, #44	; 0x2c
   27b5c:	af00      	add	r7, sp, #0
   27b5e:	60f8      	str	r0, [r7, #12]
   27b60:	60b9      	str	r1, [r7, #8]
   27b62:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27b64:	68fb      	ldr	r3, [r7, #12]
   27b66:	68ba      	ldr	r2, [r7, #8]
   27b68:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   27b6a:	68fb      	ldr	r3, [r7, #12]
   27b6c:	681b      	ldr	r3, [r3, #0]
   27b6e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   27b70:	6a3b      	ldr	r3, [r7, #32]
   27b72:	681b      	ldr	r3, [r3, #0]
   27b74:	2202      	movs	r2, #2
   27b76:	4013      	ands	r3, r2
   27b78:	d001      	beq.n	27b7e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   27b7a:	231c      	movs	r3, #28
   27b7c:	e09c      	b.n	27cb8 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   27b7e:	6a3b      	ldr	r3, [r7, #32]
   27b80:	681b      	ldr	r3, [r3, #0]
   27b82:	2201      	movs	r2, #1
   27b84:	4013      	ands	r3, r2
   27b86:	d001      	beq.n	27b8c <spi_init+0x34>
		return STATUS_BUSY;
   27b88:	2305      	movs	r3, #5
   27b8a:	e095      	b.n	27cb8 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27b8c:	68fb      	ldr	r3, [r7, #12]
   27b8e:	681b      	ldr	r3, [r3, #0]
   27b90:	0018      	movs	r0, r3
   27b92:	4b4b      	ldr	r3, [pc, #300]	; (27cc0 <spi_init+0x168>)
   27b94:	4798      	blx	r3
   27b96:	0003      	movs	r3, r0
   27b98:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   27b9a:	69fb      	ldr	r3, [r7, #28]
   27b9c:	3302      	adds	r3, #2
   27b9e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27ba0:	69fb      	ldr	r3, [r7, #28]
   27ba2:	3314      	adds	r3, #20
   27ba4:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   27ba6:	2201      	movs	r2, #1
   27ba8:	69bb      	ldr	r3, [r7, #24]
   27baa:	409a      	lsls	r2, r3
   27bac:	0013      	movs	r3, r2
   27bae:	0019      	movs	r1, r3
   27bb0:	2002      	movs	r0, #2
   27bb2:	4b44      	ldr	r3, [pc, #272]	; (27cc4 <spi_init+0x16c>)
   27bb4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27bb6:	2310      	movs	r3, #16
   27bb8:	18fb      	adds	r3, r7, r3
   27bba:	0018      	movs	r0, r3
   27bbc:	4b42      	ldr	r3, [pc, #264]	; (27cc8 <spi_init+0x170>)
   27bbe:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   27bc0:	687b      	ldr	r3, [r7, #4]
   27bc2:	2224      	movs	r2, #36	; 0x24
   27bc4:	5c9a      	ldrb	r2, [r3, r2]
   27bc6:	2310      	movs	r3, #16
   27bc8:	18fb      	adds	r3, r7, r3
   27bca:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   27bcc:	697b      	ldr	r3, [r7, #20]
   27bce:	b2db      	uxtb	r3, r3
   27bd0:	2210      	movs	r2, #16
   27bd2:	18ba      	adds	r2, r7, r2
   27bd4:	0011      	movs	r1, r2
   27bd6:	0018      	movs	r0, r3
   27bd8:	4b3c      	ldr	r3, [pc, #240]	; (27ccc <spi_init+0x174>)
   27bda:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   27bdc:	697b      	ldr	r3, [r7, #20]
   27bde:	b2db      	uxtb	r3, r3
   27be0:	0018      	movs	r0, r3
   27be2:	4b3b      	ldr	r3, [pc, #236]	; (27cd0 <spi_init+0x178>)
   27be4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   27be6:	687b      	ldr	r3, [r7, #4]
   27be8:	2224      	movs	r2, #36	; 0x24
   27bea:	5c9b      	ldrb	r3, [r3, r2]
   27bec:	2100      	movs	r1, #0
   27bee:	0018      	movs	r0, r3
   27bf0:	4b38      	ldr	r3, [pc, #224]	; (27cd4 <spi_init+0x17c>)
   27bf2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   27bf4:	687b      	ldr	r3, [r7, #4]
   27bf6:	781b      	ldrb	r3, [r3, #0]
   27bf8:	2b01      	cmp	r3, #1
   27bfa:	d105      	bne.n	27c08 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   27bfc:	6a3b      	ldr	r3, [r7, #32]
   27bfe:	681b      	ldr	r3, [r3, #0]
   27c00:	220c      	movs	r2, #12
   27c02:	431a      	orrs	r2, r3
   27c04:	6a3b      	ldr	r3, [r7, #32]
   27c06:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   27c08:	2327      	movs	r3, #39	; 0x27
   27c0a:	18fb      	adds	r3, r7, r3
   27c0c:	2200      	movs	r2, #0
   27c0e:	701a      	strb	r2, [r3, #0]
   27c10:	e010      	b.n	27c34 <spi_init+0xdc>
		module->callback[i]        = NULL;
   27c12:	2327      	movs	r3, #39	; 0x27
   27c14:	18fb      	adds	r3, r7, r3
   27c16:	781b      	ldrb	r3, [r3, #0]
   27c18:	68fa      	ldr	r2, [r7, #12]
   27c1a:	3302      	adds	r3, #2
   27c1c:	009b      	lsls	r3, r3, #2
   27c1e:	18d3      	adds	r3, r2, r3
   27c20:	3304      	adds	r3, #4
   27c22:	2200      	movs	r2, #0
   27c24:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   27c26:	2327      	movs	r3, #39	; 0x27
   27c28:	18fb      	adds	r3, r7, r3
   27c2a:	781a      	ldrb	r2, [r3, #0]
   27c2c:	2327      	movs	r3, #39	; 0x27
   27c2e:	18fb      	adds	r3, r7, r3
   27c30:	3201      	adds	r2, #1
   27c32:	701a      	strb	r2, [r3, #0]
   27c34:	2327      	movs	r3, #39	; 0x27
   27c36:	18fb      	adds	r3, r7, r3
   27c38:	781b      	ldrb	r3, [r3, #0]
   27c3a:	2b06      	cmp	r3, #6
   27c3c:	d9e9      	bls.n	27c12 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   27c3e:	68fb      	ldr	r3, [r7, #12]
   27c40:	2200      	movs	r2, #0
   27c42:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   27c44:	68fb      	ldr	r3, [r7, #12]
   27c46:	2200      	movs	r2, #0
   27c48:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   27c4a:	68fb      	ldr	r3, [r7, #12]
   27c4c:	2200      	movs	r2, #0
   27c4e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   27c50:	68fb      	ldr	r3, [r7, #12]
   27c52:	2200      	movs	r2, #0
   27c54:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   27c56:	68fb      	ldr	r3, [r7, #12]
   27c58:	2236      	movs	r2, #54	; 0x36
   27c5a:	2100      	movs	r1, #0
   27c5c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   27c5e:	68fb      	ldr	r3, [r7, #12]
   27c60:	2237      	movs	r2, #55	; 0x37
   27c62:	2100      	movs	r1, #0
   27c64:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   27c66:	68fb      	ldr	r3, [r7, #12]
   27c68:	2238      	movs	r2, #56	; 0x38
   27c6a:	2100      	movs	r1, #0
   27c6c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   27c6e:	68fb      	ldr	r3, [r7, #12]
   27c70:	2203      	movs	r2, #3
   27c72:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   27c74:	68fb      	ldr	r3, [r7, #12]
   27c76:	2200      	movs	r2, #0
   27c78:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   27c7a:	68fb      	ldr	r3, [r7, #12]
   27c7c:	681b      	ldr	r3, [r3, #0]
   27c7e:	2213      	movs	r2, #19
   27c80:	18bc      	adds	r4, r7, r2
   27c82:	0018      	movs	r0, r3
   27c84:	4b0e      	ldr	r3, [pc, #56]	; (27cc0 <spi_init+0x168>)
   27c86:	4798      	blx	r3
   27c88:	0003      	movs	r3, r0
   27c8a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   27c8c:	4a12      	ldr	r2, [pc, #72]	; (27cd8 <spi_init+0x180>)
   27c8e:	2313      	movs	r3, #19
   27c90:	18fb      	adds	r3, r7, r3
   27c92:	781b      	ldrb	r3, [r3, #0]
   27c94:	0011      	movs	r1, r2
   27c96:	0018      	movs	r0, r3
   27c98:	4b10      	ldr	r3, [pc, #64]	; (27cdc <spi_init+0x184>)
   27c9a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   27c9c:	2313      	movs	r3, #19
   27c9e:	18fb      	adds	r3, r7, r3
   27ca0:	781a      	ldrb	r2, [r3, #0]
   27ca2:	4b0f      	ldr	r3, [pc, #60]	; (27ce0 <spi_init+0x188>)
   27ca4:	0092      	lsls	r2, r2, #2
   27ca6:	68f9      	ldr	r1, [r7, #12]
   27ca8:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   27caa:	687a      	ldr	r2, [r7, #4]
   27cac:	68fb      	ldr	r3, [r7, #12]
   27cae:	0011      	movs	r1, r2
   27cb0:	0018      	movs	r0, r3
   27cb2:	4b0c      	ldr	r3, [pc, #48]	; (27ce4 <spi_init+0x18c>)
   27cb4:	4798      	blx	r3
   27cb6:	0003      	movs	r3, r0
}
   27cb8:	0018      	movs	r0, r3
   27cba:	46bd      	mov	sp, r7
   27cbc:	b00b      	add	sp, #44	; 0x2c
   27cbe:	bd90      	pop	{r4, r7, pc}
   27cc0:	000272d9 	.word	0x000272d9
   27cc4:	00027595 	.word	0x00027595
   27cc8:	0002757d 	.word	0x0002757d
   27ccc:	00029b69 	.word	0x00029b69
   27cd0:	00029bad 	.word	0x00029bad
   27cd4:	00027091 	.word	0x00027091
   27cd8:	000281b1 	.word	0x000281b1
   27cdc:	0002733d 	.word	0x0002733d
   27ce0:	20005a60 	.word	0x20005a60
   27ce4:	00027949 	.word	0x00027949

00027ce8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   27ce8:	b590      	push	{r4, r7, lr}
   27cea:	b087      	sub	sp, #28
   27cec:	af00      	add	r7, sp, #0
   27cee:	60f8      	str	r0, [r7, #12]
   27cf0:	60b9      	str	r1, [r7, #8]
   27cf2:	0019      	movs	r1, r3
   27cf4:	1dbb      	adds	r3, r7, #6
   27cf6:	801a      	strh	r2, [r3, #0]
   27cf8:	1d3b      	adds	r3, r7, #4
   27cfa:	1c0a      	adds	r2, r1, #0
   27cfc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   27cfe:	68fb      	ldr	r3, [r7, #12]
   27d00:	2238      	movs	r2, #56	; 0x38
   27d02:	5c9b      	ldrb	r3, [r3, r2]
   27d04:	b2db      	uxtb	r3, r3
   27d06:	2b05      	cmp	r3, #5
   27d08:	d101      	bne.n	27d0e <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   27d0a:	2305      	movs	r3, #5
   27d0c:	e07a      	b.n	27e04 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   27d0e:	1dbb      	adds	r3, r7, #6
   27d10:	881b      	ldrh	r3, [r3, #0]
   27d12:	2b00      	cmp	r3, #0
   27d14:	d101      	bne.n	27d1a <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   27d16:	2317      	movs	r3, #23
   27d18:	e074      	b.n	27e04 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   27d1a:	68fb      	ldr	r3, [r7, #12]
   27d1c:	79db      	ldrb	r3, [r3, #7]
   27d1e:	2201      	movs	r2, #1
   27d20:	4053      	eors	r3, r2
   27d22:	b2db      	uxtb	r3, r3
   27d24:	2b00      	cmp	r3, #0
   27d26:	d001      	beq.n	27d2c <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   27d28:	231c      	movs	r3, #28
   27d2a:	e06b      	b.n	27e04 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   27d2c:	2316      	movs	r3, #22
   27d2e:	18fb      	adds	r3, r7, r3
   27d30:	2200      	movs	r2, #0
   27d32:	801a      	strh	r2, [r3, #0]

	while (length--) {
   27d34:	e05e      	b.n	27df4 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   27d36:	68fb      	ldr	r3, [r7, #12]
   27d38:	795b      	ldrb	r3, [r3, #5]
   27d3a:	2b01      	cmp	r3, #1
   27d3c:	d112      	bne.n	27d64 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   27d3e:	46c0      	nop			; (mov r8, r8)
   27d40:	68fb      	ldr	r3, [r7, #12]
   27d42:	0018      	movs	r0, r3
   27d44:	4b31      	ldr	r3, [pc, #196]	; (27e0c <spi_read_buffer_wait+0x124>)
   27d46:	4798      	blx	r3
   27d48:	0003      	movs	r3, r0
   27d4a:	001a      	movs	r2, r3
   27d4c:	2301      	movs	r3, #1
   27d4e:	4053      	eors	r3, r2
   27d50:	b2db      	uxtb	r3, r3
   27d52:	2b00      	cmp	r3, #0
   27d54:	d1f4      	bne.n	27d40 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   27d56:	1d3b      	adds	r3, r7, #4
   27d58:	881a      	ldrh	r2, [r3, #0]
   27d5a:	68fb      	ldr	r3, [r7, #12]
   27d5c:	0011      	movs	r1, r2
   27d5e:	0018      	movs	r0, r3
   27d60:	4b2b      	ldr	r3, [pc, #172]	; (27e10 <spi_read_buffer_wait+0x128>)
   27d62:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   27d64:	46c0      	nop			; (mov r8, r8)
   27d66:	68fb      	ldr	r3, [r7, #12]
   27d68:	0018      	movs	r0, r3
   27d6a:	4b2a      	ldr	r3, [pc, #168]	; (27e14 <spi_read_buffer_wait+0x12c>)
   27d6c:	4798      	blx	r3
   27d6e:	0003      	movs	r3, r0
   27d70:	001a      	movs	r2, r3
   27d72:	2301      	movs	r3, #1
   27d74:	4053      	eors	r3, r2
   27d76:	b2db      	uxtb	r3, r3
   27d78:	2b00      	cmp	r3, #0
   27d7a:	d1f4      	bne.n	27d66 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   27d7c:	2312      	movs	r3, #18
   27d7e:	18fb      	adds	r3, r7, r3
   27d80:	2200      	movs	r2, #0
   27d82:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   27d84:	2315      	movs	r3, #21
   27d86:	18fc      	adds	r4, r7, r3
   27d88:	2312      	movs	r3, #18
   27d8a:	18fa      	adds	r2, r7, r3
   27d8c:	68fb      	ldr	r3, [r7, #12]
   27d8e:	0011      	movs	r1, r2
   27d90:	0018      	movs	r0, r3
   27d92:	4b21      	ldr	r3, [pc, #132]	; (27e18 <spi_read_buffer_wait+0x130>)
   27d94:	4798      	blx	r3
   27d96:	0003      	movs	r3, r0
   27d98:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   27d9a:	2315      	movs	r3, #21
   27d9c:	18fb      	adds	r3, r7, r3
   27d9e:	781b      	ldrb	r3, [r3, #0]
   27da0:	2b00      	cmp	r3, #0
   27da2:	d003      	beq.n	27dac <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   27da4:	2315      	movs	r3, #21
   27da6:	18fb      	adds	r3, r7, r3
   27da8:	781b      	ldrb	r3, [r3, #0]
   27daa:	e02b      	b.n	27e04 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   27dac:	2316      	movs	r3, #22
   27dae:	18fb      	adds	r3, r7, r3
   27db0:	881b      	ldrh	r3, [r3, #0]
   27db2:	2216      	movs	r2, #22
   27db4:	18ba      	adds	r2, r7, r2
   27db6:	1c59      	adds	r1, r3, #1
   27db8:	8011      	strh	r1, [r2, #0]
   27dba:	001a      	movs	r2, r3
   27dbc:	68bb      	ldr	r3, [r7, #8]
   27dbe:	189b      	adds	r3, r3, r2
   27dc0:	2212      	movs	r2, #18
   27dc2:	18ba      	adds	r2, r7, r2
   27dc4:	8812      	ldrh	r2, [r2, #0]
   27dc6:	b2d2      	uxtb	r2, r2
   27dc8:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27dca:	68fb      	ldr	r3, [r7, #12]
   27dcc:	799b      	ldrb	r3, [r3, #6]
   27dce:	2b01      	cmp	r3, #1
   27dd0:	d110      	bne.n	27df4 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   27dd2:	2316      	movs	r3, #22
   27dd4:	18fb      	adds	r3, r7, r3
   27dd6:	881b      	ldrh	r3, [r3, #0]
   27dd8:	2216      	movs	r2, #22
   27dda:	18ba      	adds	r2, r7, r2
   27ddc:	1c59      	adds	r1, r3, #1
   27dde:	8011      	strh	r1, [r2, #0]
   27de0:	001a      	movs	r2, r3
   27de2:	68bb      	ldr	r3, [r7, #8]
   27de4:	189b      	adds	r3, r3, r2
   27de6:	2212      	movs	r2, #18
   27de8:	18ba      	adds	r2, r7, r2
   27dea:	8812      	ldrh	r2, [r2, #0]
   27dec:	0a12      	lsrs	r2, r2, #8
   27dee:	b292      	uxth	r2, r2
   27df0:	b2d2      	uxtb	r2, r2
   27df2:	701a      	strb	r2, [r3, #0]
	while (length--) {
   27df4:	1dbb      	adds	r3, r7, #6
   27df6:	881b      	ldrh	r3, [r3, #0]
   27df8:	1dba      	adds	r2, r7, #6
   27dfa:	1e59      	subs	r1, r3, #1
   27dfc:	8011      	strh	r1, [r2, #0]
   27dfe:	2b00      	cmp	r3, #0
   27e00:	d199      	bne.n	27d36 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   27e02:	2300      	movs	r3, #0
}
   27e04:	0018      	movs	r0, r3
   27e06:	46bd      	mov	sp, r7
   27e08:	b007      	add	sp, #28
   27e0a:	bd90      	pop	{r4, r7, pc}
   27e0c:	00027761 	.word	0x00027761
   27e10:	000277b1 	.word	0x000277b1
   27e14:	00027789 	.word	0x00027789
   27e18:	000277f9 	.word	0x000277f9

00027e1c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   27e1c:	b580      	push	{r7, lr}
   27e1e:	b086      	sub	sp, #24
   27e20:	af00      	add	r7, sp, #0
   27e22:	60f8      	str	r0, [r7, #12]
   27e24:	60b9      	str	r1, [r7, #8]
   27e26:	1dfb      	adds	r3, r7, #7
   27e28:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   27e2a:	68fb      	ldr	r3, [r7, #12]
   27e2c:	795b      	ldrb	r3, [r3, #5]
   27e2e:	2b01      	cmp	r3, #1
   27e30:	d001      	beq.n	27e36 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   27e32:	2315      	movs	r3, #21
   27e34:	e05c      	b.n	27ef0 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   27e36:	68fb      	ldr	r3, [r7, #12]
   27e38:	7a1b      	ldrb	r3, [r3, #8]
   27e3a:	2201      	movs	r2, #1
   27e3c:	4053      	eors	r3, r2
   27e3e:	b2db      	uxtb	r3, r3
   27e40:	2b00      	cmp	r3, #0
   27e42:	d054      	beq.n	27eee <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   27e44:	1dfb      	adds	r3, r7, #7
   27e46:	781b      	ldrb	r3, [r3, #0]
   27e48:	2b00      	cmp	r3, #0
   27e4a:	d04a      	beq.n	27ee2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   27e4c:	68bb      	ldr	r3, [r7, #8]
   27e4e:	785b      	ldrb	r3, [r3, #1]
   27e50:	2b00      	cmp	r3, #0
   27e52:	d03f      	beq.n	27ed4 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   27e54:	68fb      	ldr	r3, [r7, #12]
   27e56:	0018      	movs	r0, r3
   27e58:	4b27      	ldr	r3, [pc, #156]	; (27ef8 <spi_select_slave+0xdc>)
   27e5a:	4798      	blx	r3
   27e5c:	0003      	movs	r3, r0
   27e5e:	001a      	movs	r2, r3
   27e60:	2301      	movs	r3, #1
   27e62:	4053      	eors	r3, r2
   27e64:	b2db      	uxtb	r3, r3
   27e66:	2b00      	cmp	r3, #0
   27e68:	d007      	beq.n	27e7a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   27e6a:	68bb      	ldr	r3, [r7, #8]
   27e6c:	781b      	ldrb	r3, [r3, #0]
   27e6e:	2101      	movs	r1, #1
   27e70:	0018      	movs	r0, r3
   27e72:	4b22      	ldr	r3, [pc, #136]	; (27efc <spi_select_slave+0xe0>)
   27e74:	4798      	blx	r3
					return STATUS_BUSY;
   27e76:	2305      	movs	r3, #5
   27e78:	e03a      	b.n	27ef0 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27e7a:	68bb      	ldr	r3, [r7, #8]
   27e7c:	781b      	ldrb	r3, [r3, #0]
   27e7e:	2100      	movs	r1, #0
   27e80:	0018      	movs	r0, r3
   27e82:	4b1e      	ldr	r3, [pc, #120]	; (27efc <spi_select_slave+0xe0>)
   27e84:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   27e86:	68bb      	ldr	r3, [r7, #8]
   27e88:	789b      	ldrb	r3, [r3, #2]
   27e8a:	b29a      	uxth	r2, r3
   27e8c:	68fb      	ldr	r3, [r7, #12]
   27e8e:	0011      	movs	r1, r2
   27e90:	0018      	movs	r0, r3
   27e92:	4b1b      	ldr	r3, [pc, #108]	; (27f00 <spi_select_slave+0xe4>)
   27e94:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   27e96:	68fb      	ldr	r3, [r7, #12]
   27e98:	79db      	ldrb	r3, [r3, #7]
   27e9a:	2201      	movs	r2, #1
   27e9c:	4053      	eors	r3, r2
   27e9e:	b2db      	uxtb	r3, r3
   27ea0:	2b00      	cmp	r3, #0
   27ea2:	d024      	beq.n	27eee <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   27ea4:	46c0      	nop			; (mov r8, r8)
   27ea6:	68fb      	ldr	r3, [r7, #12]
   27ea8:	0018      	movs	r0, r3
   27eaa:	4b16      	ldr	r3, [pc, #88]	; (27f04 <spi_select_slave+0xe8>)
   27eac:	4798      	blx	r3
   27eae:	0003      	movs	r3, r0
   27eb0:	001a      	movs	r2, r3
   27eb2:	2301      	movs	r3, #1
   27eb4:	4053      	eors	r3, r2
   27eb6:	b2db      	uxtb	r3, r3
   27eb8:	2b00      	cmp	r3, #0
   27eba:	d1f4      	bne.n	27ea6 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   27ebc:	2316      	movs	r3, #22
   27ebe:	18fb      	adds	r3, r7, r3
   27ec0:	2200      	movs	r2, #0
   27ec2:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   27ec4:	2316      	movs	r3, #22
   27ec6:	18fa      	adds	r2, r7, r3
   27ec8:	68fb      	ldr	r3, [r7, #12]
   27eca:	0011      	movs	r1, r2
   27ecc:	0018      	movs	r0, r3
   27ece:	4b0e      	ldr	r3, [pc, #56]	; (27f08 <spi_select_slave+0xec>)
   27ed0:	4798      	blx	r3
   27ed2:	e00c      	b.n	27eee <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27ed4:	68bb      	ldr	r3, [r7, #8]
   27ed6:	781b      	ldrb	r3, [r3, #0]
   27ed8:	2100      	movs	r1, #0
   27eda:	0018      	movs	r0, r3
   27edc:	4b07      	ldr	r3, [pc, #28]	; (27efc <spi_select_slave+0xe0>)
   27ede:	4798      	blx	r3
   27ee0:	e005      	b.n	27eee <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   27ee2:	68bb      	ldr	r3, [r7, #8]
   27ee4:	781b      	ldrb	r3, [r3, #0]
   27ee6:	2101      	movs	r1, #1
   27ee8:	0018      	movs	r0, r3
   27eea:	4b04      	ldr	r3, [pc, #16]	; (27efc <spi_select_slave+0xe0>)
   27eec:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   27eee:	2300      	movs	r3, #0
}
   27ef0:	0018      	movs	r0, r3
   27ef2:	46bd      	mov	sp, r7
   27ef4:	b006      	add	sp, #24
   27ef6:	bd80      	pop	{r7, pc}
   27ef8:	00027761 	.word	0x00027761
   27efc:	00027529 	.word	0x00027529
   27f00:	000277b1 	.word	0x000277b1
   27f04:	00027789 	.word	0x00027789
   27f08:	000277f9 	.word	0x000277f9

00027f0c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   27f0c:	b580      	push	{r7, lr}
   27f0e:	b086      	sub	sp, #24
   27f10:	af00      	add	r7, sp, #0
   27f12:	60f8      	str	r0, [r7, #12]
   27f14:	60b9      	str	r1, [r7, #8]
   27f16:	1dbb      	adds	r3, r7, #6
   27f18:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   27f1a:	68fb      	ldr	r3, [r7, #12]
   27f1c:	2238      	movs	r2, #56	; 0x38
   27f1e:	5c9b      	ldrb	r3, [r3, r2]
   27f20:	b2db      	uxtb	r3, r3
   27f22:	2b05      	cmp	r3, #5
   27f24:	d101      	bne.n	27f2a <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   27f26:	2305      	movs	r3, #5
   27f28:	e087      	b.n	2803a <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   27f2a:	1dbb      	adds	r3, r7, #6
   27f2c:	881b      	ldrh	r3, [r3, #0]
   27f2e:	2b00      	cmp	r3, #0
   27f30:	d101      	bne.n	27f36 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   27f32:	2317      	movs	r3, #23
   27f34:	e081      	b.n	2803a <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   27f36:	2316      	movs	r3, #22
   27f38:	18fb      	adds	r3, r7, r3
   27f3a:	2200      	movs	r2, #0
   27f3c:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   27f3e:	2314      	movs	r3, #20
   27f40:	18fb      	adds	r3, r7, r3
   27f42:	1dba      	adds	r2, r7, #6
   27f44:	8812      	ldrh	r2, [r2, #0]
   27f46:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   27f48:	e05f      	b.n	2800a <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   27f4a:	46c0      	nop			; (mov r8, r8)
   27f4c:	68fb      	ldr	r3, [r7, #12]
   27f4e:	0018      	movs	r0, r3
   27f50:	4b3c      	ldr	r3, [pc, #240]	; (28044 <spi_write_buffer_wait+0x138>)
   27f52:	4798      	blx	r3
   27f54:	0003      	movs	r3, r0
   27f56:	001a      	movs	r2, r3
   27f58:	2301      	movs	r3, #1
   27f5a:	4053      	eors	r3, r2
   27f5c:	b2db      	uxtb	r3, r3
   27f5e:	2b00      	cmp	r3, #0
   27f60:	d1f4      	bne.n	27f4c <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   27f62:	2316      	movs	r3, #22
   27f64:	18fb      	adds	r3, r7, r3
   27f66:	881b      	ldrh	r3, [r3, #0]
   27f68:	2216      	movs	r2, #22
   27f6a:	18ba      	adds	r2, r7, r2
   27f6c:	1c59      	adds	r1, r3, #1
   27f6e:	8011      	strh	r1, [r2, #0]
   27f70:	001a      	movs	r2, r3
   27f72:	68bb      	ldr	r3, [r7, #8]
   27f74:	189b      	adds	r3, r3, r2
   27f76:	781a      	ldrb	r2, [r3, #0]
   27f78:	2312      	movs	r3, #18
   27f7a:	18fb      	adds	r3, r7, r3
   27f7c:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27f7e:	68fb      	ldr	r3, [r7, #12]
   27f80:	799b      	ldrb	r3, [r3, #6]
   27f82:	2b01      	cmp	r3, #1
   27f84:	d115      	bne.n	27fb2 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   27f86:	2316      	movs	r3, #22
   27f88:	18fb      	adds	r3, r7, r3
   27f8a:	881b      	ldrh	r3, [r3, #0]
   27f8c:	2216      	movs	r2, #22
   27f8e:	18ba      	adds	r2, r7, r2
   27f90:	1c59      	adds	r1, r3, #1
   27f92:	8011      	strh	r1, [r2, #0]
   27f94:	001a      	movs	r2, r3
   27f96:	68bb      	ldr	r3, [r7, #8]
   27f98:	189b      	adds	r3, r3, r2
   27f9a:	781b      	ldrb	r3, [r3, #0]
   27f9c:	021b      	lsls	r3, r3, #8
   27f9e:	b21a      	sxth	r2, r3
   27fa0:	2312      	movs	r3, #18
   27fa2:	18fb      	adds	r3, r7, r3
   27fa4:	2100      	movs	r1, #0
   27fa6:	5e5b      	ldrsh	r3, [r3, r1]
   27fa8:	4313      	orrs	r3, r2
   27faa:	b21a      	sxth	r2, r3
   27fac:	2312      	movs	r3, #18
   27fae:	18fb      	adds	r3, r7, r3
   27fb0:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   27fb2:	2312      	movs	r3, #18
   27fb4:	18fb      	adds	r3, r7, r3
   27fb6:	881a      	ldrh	r2, [r3, #0]
   27fb8:	68fb      	ldr	r3, [r7, #12]
   27fba:	0011      	movs	r1, r2
   27fbc:	0018      	movs	r0, r3
   27fbe:	4b22      	ldr	r3, [pc, #136]	; (28048 <spi_write_buffer_wait+0x13c>)
   27fc0:	4798      	blx	r3

		if (module->receiver_enabled) {
   27fc2:	68fb      	ldr	r3, [r7, #12]
   27fc4:	79db      	ldrb	r3, [r3, #7]
   27fc6:	2214      	movs	r2, #20
   27fc8:	18ba      	adds	r2, r7, r2
   27fca:	2114      	movs	r1, #20
   27fcc:	1879      	adds	r1, r7, r1
   27fce:	8809      	ldrh	r1, [r1, #0]
   27fd0:	8011      	strh	r1, [r2, #0]
   27fd2:	2b00      	cmp	r3, #0
   27fd4:	d019      	beq.n	2800a <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   27fd6:	46c0      	nop			; (mov r8, r8)
   27fd8:	68fb      	ldr	r3, [r7, #12]
   27fda:	0018      	movs	r0, r3
   27fdc:	4b1b      	ldr	r3, [pc, #108]	; (2804c <spi_write_buffer_wait+0x140>)
   27fde:	4798      	blx	r3
   27fe0:	0003      	movs	r3, r0
   27fe2:	001a      	movs	r2, r3
   27fe4:	2301      	movs	r3, #1
   27fe6:	4053      	eors	r3, r2
   27fe8:	b2db      	uxtb	r3, r3
   27fea:	2b00      	cmp	r3, #0
   27fec:	d1f4      	bne.n	27fd8 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   27fee:	2310      	movs	r3, #16
   27ff0:	18fa      	adds	r2, r7, r3
   27ff2:	68fb      	ldr	r3, [r7, #12]
   27ff4:	0011      	movs	r1, r2
   27ff6:	0018      	movs	r0, r3
   27ff8:	4b15      	ldr	r3, [pc, #84]	; (28050 <spi_write_buffer_wait+0x144>)
   27ffa:	4798      	blx	r3
			flush_length--;
   27ffc:	2314      	movs	r3, #20
   27ffe:	18fb      	adds	r3, r7, r3
   28000:	881a      	ldrh	r2, [r3, #0]
   28002:	2314      	movs	r3, #20
   28004:	18fb      	adds	r3, r7, r3
   28006:	3a01      	subs	r2, #1
   28008:	801a      	strh	r2, [r3, #0]
	while (length--) {
   2800a:	1dbb      	adds	r3, r7, #6
   2800c:	881b      	ldrh	r3, [r3, #0]
   2800e:	1dba      	adds	r2, r7, #6
   28010:	1e59      	subs	r1, r3, #1
   28012:	8011      	strh	r1, [r2, #0]
   28014:	2b00      	cmp	r3, #0
   28016:	d198      	bne.n	27f4a <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   28018:	68fb      	ldr	r3, [r7, #12]
   2801a:	795b      	ldrb	r3, [r3, #5]
   2801c:	2b01      	cmp	r3, #1
   2801e:	d10b      	bne.n	28038 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   28020:	46c0      	nop			; (mov r8, r8)
   28022:	68fb      	ldr	r3, [r7, #12]
   28024:	0018      	movs	r0, r3
   28026:	4b0b      	ldr	r3, [pc, #44]	; (28054 <spi_write_buffer_wait+0x148>)
   28028:	4798      	blx	r3
   2802a:	0003      	movs	r3, r0
   2802c:	001a      	movs	r2, r3
   2802e:	2301      	movs	r3, #1
   28030:	4053      	eors	r3, r2
   28032:	b2db      	uxtb	r3, r3
   28034:	2b00      	cmp	r3, #0
   28036:	d1f4      	bne.n	28022 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   28038:	2300      	movs	r3, #0
}
   2803a:	0018      	movs	r0, r3
   2803c:	46bd      	mov	sp, r7
   2803e:	b006      	add	sp, #24
   28040:	bd80      	pop	{r7, pc}
   28042:	46c0      	nop			; (mov r8, r8)
   28044:	00027761 	.word	0x00027761
   28048:	000277b1 	.word	0x000277b1
   2804c:	00027789 	.word	0x00027789
   28050:	000277f9 	.word	0x000277f9
   28054:	00027739 	.word	0x00027739

00028058 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   28058:	b580      	push	{r7, lr}
   2805a:	b084      	sub	sp, #16
   2805c:	af00      	add	r7, sp, #0
   2805e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28060:	687b      	ldr	r3, [r7, #4]
   28062:	681b      	ldr	r3, [r3, #0]
   28064:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   28066:	687b      	ldr	r3, [r7, #4]
   28068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2806a:	781b      	ldrb	r3, [r3, #0]
   2806c:	b2da      	uxtb	r2, r3
   2806e:	230e      	movs	r3, #14
   28070:	18fb      	adds	r3, r7, r3
   28072:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   28074:	687b      	ldr	r3, [r7, #4]
   28076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28078:	1c5a      	adds	r2, r3, #1
   2807a:	687b      	ldr	r3, [r7, #4]
   2807c:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2807e:	687b      	ldr	r3, [r7, #4]
   28080:	799b      	ldrb	r3, [r3, #6]
   28082:	2b01      	cmp	r3, #1
   28084:	d113      	bne.n	280ae <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   28086:	687b      	ldr	r3, [r7, #4]
   28088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2808a:	781b      	ldrb	r3, [r3, #0]
   2808c:	b2db      	uxtb	r3, r3
   2808e:	021b      	lsls	r3, r3, #8
   28090:	b21a      	sxth	r2, r3
   28092:	230e      	movs	r3, #14
   28094:	18fb      	adds	r3, r7, r3
   28096:	2100      	movs	r1, #0
   28098:	5e5b      	ldrsh	r3, [r3, r1]
   2809a:	4313      	orrs	r3, r2
   2809c:	b21a      	sxth	r2, r3
   2809e:	230e      	movs	r3, #14
   280a0:	18fb      	adds	r3, r7, r3
   280a2:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   280a4:	687b      	ldr	r3, [r7, #4]
   280a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   280a8:	1c5a      	adds	r2, r3, #1
   280aa:	687b      	ldr	r3, [r7, #4]
   280ac:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   280ae:	230e      	movs	r3, #14
   280b0:	18fb      	adds	r3, r7, r3
   280b2:	881b      	ldrh	r3, [r3, #0]
   280b4:	05db      	lsls	r3, r3, #23
   280b6:	0dda      	lsrs	r2, r3, #23
   280b8:	68bb      	ldr	r3, [r7, #8]
   280ba:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   280bc:	687b      	ldr	r3, [r7, #4]
   280be:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   280c0:	b29b      	uxth	r3, r3
   280c2:	3b01      	subs	r3, #1
   280c4:	b29a      	uxth	r2, r3
   280c6:	687b      	ldr	r3, [r7, #4]
   280c8:	869a      	strh	r2, [r3, #52]	; 0x34
}
   280ca:	46c0      	nop			; (mov r8, r8)
   280cc:	46bd      	mov	sp, r7
   280ce:	b004      	add	sp, #16
   280d0:	bd80      	pop	{r7, pc}
	...

000280d4 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   280d4:	b580      	push	{r7, lr}
   280d6:	b084      	sub	sp, #16
   280d8:	af00      	add	r7, sp, #0
   280da:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   280dc:	687b      	ldr	r3, [r7, #4]
   280de:	681b      	ldr	r3, [r3, #0]
   280e0:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   280e2:	4b08      	ldr	r3, [pc, #32]	; (28104 <_spi_write_dummy+0x30>)
   280e4:	881b      	ldrh	r3, [r3, #0]
   280e6:	001a      	movs	r2, r3
   280e8:	68fb      	ldr	r3, [r7, #12]
   280ea:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   280ec:	687b      	ldr	r3, [r7, #4]
   280ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   280f0:	b29b      	uxth	r3, r3
   280f2:	3b01      	subs	r3, #1
   280f4:	b29a      	uxth	r2, r3
   280f6:	687b      	ldr	r3, [r7, #4]
   280f8:	865a      	strh	r2, [r3, #50]	; 0x32
}
   280fa:	46c0      	nop			; (mov r8, r8)
   280fc:	46bd      	mov	sp, r7
   280fe:	b004      	add	sp, #16
   28100:	bd80      	pop	{r7, pc}
   28102:	46c0      	nop			; (mov r8, r8)
   28104:	20005a78 	.word	0x20005a78

00028108 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   28108:	b580      	push	{r7, lr}
   2810a:	b084      	sub	sp, #16
   2810c:	af00      	add	r7, sp, #0
   2810e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28110:	687b      	ldr	r3, [r7, #4]
   28112:	681b      	ldr	r3, [r3, #0]
   28114:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   28116:	230a      	movs	r3, #10
   28118:	18fb      	adds	r3, r7, r3
   2811a:	2200      	movs	r2, #0
   2811c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   2811e:	68fb      	ldr	r3, [r7, #12]
   28120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   28122:	230a      	movs	r3, #10
   28124:	18fb      	adds	r3, r7, r3
   28126:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   28128:	687b      	ldr	r3, [r7, #4]
   2812a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2812c:	b29b      	uxth	r3, r3
   2812e:	3b01      	subs	r3, #1
   28130:	b29a      	uxth	r2, r3
   28132:	687b      	ldr	r3, [r7, #4]
   28134:	865a      	strh	r2, [r3, #50]	; 0x32
}
   28136:	46c0      	nop			; (mov r8, r8)
   28138:	46bd      	mov	sp, r7
   2813a:	b004      	add	sp, #16
   2813c:	bd80      	pop	{r7, pc}

0002813e <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   2813e:	b580      	push	{r7, lr}
   28140:	b084      	sub	sp, #16
   28142:	af00      	add	r7, sp, #0
   28144:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28146:	687b      	ldr	r3, [r7, #4]
   28148:	681b      	ldr	r3, [r3, #0]
   2814a:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   2814c:	68fb      	ldr	r3, [r7, #12]
   2814e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28150:	b29a      	uxth	r2, r3
   28152:	230a      	movs	r3, #10
   28154:	18fb      	adds	r3, r7, r3
   28156:	05d2      	lsls	r2, r2, #23
   28158:	0dd2      	lsrs	r2, r2, #23
   2815a:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   2815c:	687b      	ldr	r3, [r7, #4]
   2815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28160:	220a      	movs	r2, #10
   28162:	18ba      	adds	r2, r7, r2
   28164:	8812      	ldrh	r2, [r2, #0]
   28166:	b2d2      	uxtb	r2, r2
   28168:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   2816a:	687b      	ldr	r3, [r7, #4]
   2816c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2816e:	1c5a      	adds	r2, r3, #1
   28170:	687b      	ldr	r3, [r7, #4]
   28172:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28174:	687b      	ldr	r3, [r7, #4]
   28176:	799b      	ldrb	r3, [r3, #6]
   28178:	2b01      	cmp	r3, #1
   2817a:	d10d      	bne.n	28198 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   2817c:	687b      	ldr	r3, [r7, #4]
   2817e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28180:	220a      	movs	r2, #10
   28182:	18ba      	adds	r2, r7, r2
   28184:	8812      	ldrh	r2, [r2, #0]
   28186:	0a12      	lsrs	r2, r2, #8
   28188:	b292      	uxth	r2, r2
   2818a:	b2d2      	uxtb	r2, r2
   2818c:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   2818e:	687b      	ldr	r3, [r7, #4]
   28190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28192:	1c5a      	adds	r2, r3, #1
   28194:	687b      	ldr	r3, [r7, #4]
   28196:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   28198:	687b      	ldr	r3, [r7, #4]
   2819a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2819c:	b29b      	uxth	r3, r3
   2819e:	3b01      	subs	r3, #1
   281a0:	b29a      	uxth	r2, r3
   281a2:	687b      	ldr	r3, [r7, #4]
   281a4:	861a      	strh	r2, [r3, #48]	; 0x30
}
   281a6:	46c0      	nop			; (mov r8, r8)
   281a8:	46bd      	mov	sp, r7
   281aa:	b004      	add	sp, #16
   281ac:	bd80      	pop	{r7, pc}
	...

000281b0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   281b0:	b580      	push	{r7, lr}
   281b2:	b086      	sub	sp, #24
   281b4:	af00      	add	r7, sp, #0
   281b6:	0002      	movs	r2, r0
   281b8:	1dfb      	adds	r3, r7, #7
   281ba:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   281bc:	1dfb      	adds	r3, r7, #7
   281be:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   281c0:	4b96      	ldr	r3, [pc, #600]	; (2841c <_spi_interrupt_handler+0x26c>)
   281c2:	0092      	lsls	r2, r2, #2
   281c4:	58d3      	ldr	r3, [r2, r3]
   281c6:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   281c8:	697b      	ldr	r3, [r7, #20]
   281ca:	681b      	ldr	r3, [r3, #0]
   281cc:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   281ce:	697b      	ldr	r3, [r7, #20]
   281d0:	2237      	movs	r2, #55	; 0x37
   281d2:	5c9a      	ldrb	r2, [r3, r2]
   281d4:	697b      	ldr	r3, [r7, #20]
   281d6:	2136      	movs	r1, #54	; 0x36
   281d8:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   281da:	230f      	movs	r3, #15
   281dc:	18fb      	adds	r3, r7, r3
   281de:	400a      	ands	r2, r1
   281e0:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   281e2:	693b      	ldr	r3, [r7, #16]
   281e4:	7e1b      	ldrb	r3, [r3, #24]
   281e6:	b2da      	uxtb	r2, r3
   281e8:	230c      	movs	r3, #12
   281ea:	18fb      	adds	r3, r7, r3
   281ec:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   281ee:	693b      	ldr	r3, [r7, #16]
   281f0:	7d9b      	ldrb	r3, [r3, #22]
   281f2:	b2db      	uxtb	r3, r3
   281f4:	b29a      	uxth	r2, r3
   281f6:	230c      	movs	r3, #12
   281f8:	18fb      	adds	r3, r7, r3
   281fa:	210c      	movs	r1, #12
   281fc:	1879      	adds	r1, r7, r1
   281fe:	8809      	ldrh	r1, [r1, #0]
   28200:	400a      	ands	r2, r1
   28202:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   28204:	230c      	movs	r3, #12
   28206:	18fb      	adds	r3, r7, r3
   28208:	881b      	ldrh	r3, [r3, #0]
   2820a:	2201      	movs	r2, #1
   2820c:	4013      	ands	r3, r2
   2820e:	d038      	beq.n	28282 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   28210:	697b      	ldr	r3, [r7, #20]
   28212:	795b      	ldrb	r3, [r3, #5]
   28214:	2b01      	cmp	r3, #1
   28216:	d110      	bne.n	2823a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   28218:	697b      	ldr	r3, [r7, #20]
   2821a:	7a5b      	ldrb	r3, [r3, #9]
   2821c:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2821e:	2b00      	cmp	r3, #0
   28220:	d10b      	bne.n	2823a <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   28222:	697b      	ldr	r3, [r7, #20]
   28224:	0018      	movs	r0, r3
   28226:	4b7e      	ldr	r3, [pc, #504]	; (28420 <_spi_interrupt_handler+0x270>)
   28228:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   2822a:	697b      	ldr	r3, [r7, #20]
   2822c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2822e:	b29b      	uxth	r3, r3
   28230:	2b00      	cmp	r3, #0
   28232:	d102      	bne.n	2823a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   28234:	693b      	ldr	r3, [r7, #16]
   28236:	2201      	movs	r2, #1
   28238:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   2823a:	697b      	ldr	r3, [r7, #20]
   2823c:	795b      	ldrb	r3, [r3, #5]
		if (0
   2823e:	2b01      	cmp	r3, #1
   28240:	d11f      	bne.n	28282 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   28242:	697b      	ldr	r3, [r7, #20]
   28244:	7a5b      	ldrb	r3, [r3, #9]
   28246:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   28248:	2b00      	cmp	r3, #0
   2824a:	d01a      	beq.n	28282 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   2824c:	697b      	ldr	r3, [r7, #20]
   2824e:	0018      	movs	r0, r3
   28250:	4b74      	ldr	r3, [pc, #464]	; (28424 <_spi_interrupt_handler+0x274>)
   28252:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   28254:	697b      	ldr	r3, [r7, #20]
   28256:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   28258:	b29b      	uxth	r3, r3
   2825a:	2b00      	cmp	r3, #0
   2825c:	d111      	bne.n	28282 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   2825e:	693b      	ldr	r3, [r7, #16]
   28260:	2201      	movs	r2, #1
   28262:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   28264:	697b      	ldr	r3, [r7, #20]
   28266:	7a5b      	ldrb	r3, [r3, #9]
   28268:	b2db      	uxtb	r3, r3
   2826a:	2b01      	cmp	r3, #1
   2826c:	d109      	bne.n	28282 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   2826e:	697b      	ldr	r3, [r7, #20]
   28270:	79db      	ldrb	r3, [r3, #7]
   28272:	2201      	movs	r2, #1
   28274:	4053      	eors	r3, r2
   28276:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   28278:	2b00      	cmp	r3, #0
   2827a:	d002      	beq.n	28282 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2827c:	693b      	ldr	r3, [r7, #16]
   2827e:	2202      	movs	r2, #2
   28280:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   28282:	230c      	movs	r3, #12
   28284:	18fb      	adds	r3, r7, r3
   28286:	881b      	ldrh	r3, [r3, #0]
   28288:	2204      	movs	r2, #4
   2828a:	4013      	ands	r3, r2
   2828c:	d100      	bne.n	28290 <_spi_interrupt_handler+0xe0>
   2828e:	e07e      	b.n	2838e <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   28290:	693b      	ldr	r3, [r7, #16]
   28292:	8b5b      	ldrh	r3, [r3, #26]
   28294:	b29b      	uxth	r3, r3
   28296:	001a      	movs	r2, r3
   28298:	2304      	movs	r3, #4
   2829a:	4013      	ands	r3, r2
   2829c:	d022      	beq.n	282e4 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   2829e:	697b      	ldr	r3, [r7, #20]
   282a0:	7a5b      	ldrb	r3, [r3, #9]
   282a2:	b2db      	uxtb	r3, r3
   282a4:	2b01      	cmp	r3, #1
   282a6:	d014      	beq.n	282d2 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   282a8:	697b      	ldr	r3, [r7, #20]
   282aa:	2238      	movs	r2, #56	; 0x38
   282ac:	211e      	movs	r1, #30
   282ae:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   282b0:	697b      	ldr	r3, [r7, #20]
   282b2:	2203      	movs	r2, #3
   282b4:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   282b6:	693b      	ldr	r3, [r7, #16]
   282b8:	2205      	movs	r2, #5
   282ba:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   282bc:	230f      	movs	r3, #15
   282be:	18fb      	adds	r3, r7, r3
   282c0:	781b      	ldrb	r3, [r3, #0]
   282c2:	2208      	movs	r2, #8
   282c4:	4013      	ands	r3, r2
   282c6:	d004      	beq.n	282d2 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   282c8:	697b      	ldr	r3, [r7, #20]
   282ca:	699b      	ldr	r3, [r3, #24]
   282cc:	697a      	ldr	r2, [r7, #20]
   282ce:	0010      	movs	r0, r2
   282d0:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   282d2:	693b      	ldr	r3, [r7, #16]
   282d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   282d6:	230a      	movs	r3, #10
   282d8:	18fb      	adds	r3, r7, r3
   282da:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   282dc:	693b      	ldr	r3, [r7, #16]
   282de:	2204      	movs	r2, #4
   282e0:	835a      	strh	r2, [r3, #26]
   282e2:	e054      	b.n	2838e <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   282e4:	697b      	ldr	r3, [r7, #20]
   282e6:	7a5b      	ldrb	r3, [r3, #9]
   282e8:	b2db      	uxtb	r3, r3
   282ea:	2b01      	cmp	r3, #1
   282ec:	d11e      	bne.n	2832c <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   282ee:	697b      	ldr	r3, [r7, #20]
   282f0:	0018      	movs	r0, r3
   282f2:	4b4d      	ldr	r3, [pc, #308]	; (28428 <_spi_interrupt_handler+0x278>)
   282f4:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   282f6:	697b      	ldr	r3, [r7, #20]
   282f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   282fa:	b29b      	uxth	r3, r3
   282fc:	2b00      	cmp	r3, #0
   282fe:	d146      	bne.n	2838e <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   28300:	693b      	ldr	r3, [r7, #16]
   28302:	2204      	movs	r2, #4
   28304:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   28306:	697b      	ldr	r3, [r7, #20]
   28308:	2238      	movs	r2, #56	; 0x38
   2830a:	2100      	movs	r1, #0
   2830c:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   2830e:	697b      	ldr	r3, [r7, #20]
   28310:	2203      	movs	r2, #3
   28312:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   28314:	230f      	movs	r3, #15
   28316:	18fb      	adds	r3, r7, r3
   28318:	781b      	ldrb	r3, [r3, #0]
   2831a:	2201      	movs	r2, #1
   2831c:	4013      	ands	r3, r2
   2831e:	d036      	beq.n	2838e <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   28320:	697b      	ldr	r3, [r7, #20]
   28322:	68db      	ldr	r3, [r3, #12]
   28324:	697a      	ldr	r2, [r7, #20]
   28326:	0010      	movs	r0, r2
   28328:	4798      	blx	r3
   2832a:	e030      	b.n	2838e <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   2832c:	697b      	ldr	r3, [r7, #20]
   2832e:	0018      	movs	r0, r3
   28330:	4b3e      	ldr	r3, [pc, #248]	; (2842c <_spi_interrupt_handler+0x27c>)
   28332:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   28334:	697b      	ldr	r3, [r7, #20]
   28336:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   28338:	b29b      	uxth	r3, r3
   2833a:	2b00      	cmp	r3, #0
   2833c:	d127      	bne.n	2838e <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   2833e:	697b      	ldr	r3, [r7, #20]
   28340:	2238      	movs	r2, #56	; 0x38
   28342:	2100      	movs	r1, #0
   28344:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   28346:	693b      	ldr	r3, [r7, #16]
   28348:	2204      	movs	r2, #4
   2834a:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   2834c:	697b      	ldr	r3, [r7, #20]
   2834e:	7a5b      	ldrb	r3, [r3, #9]
   28350:	b2db      	uxtb	r3, r3
   28352:	2b02      	cmp	r3, #2
   28354:	d10b      	bne.n	2836e <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   28356:	230f      	movs	r3, #15
   28358:	18fb      	adds	r3, r7, r3
   2835a:	781b      	ldrb	r3, [r3, #0]
   2835c:	2204      	movs	r2, #4
   2835e:	4013      	ands	r3, r2
   28360:	d015      	beq.n	2838e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   28362:	697b      	ldr	r3, [r7, #20]
   28364:	695b      	ldr	r3, [r3, #20]
   28366:	697a      	ldr	r2, [r7, #20]
   28368:	0010      	movs	r0, r2
   2836a:	4798      	blx	r3
   2836c:	e00f      	b.n	2838e <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   2836e:	697b      	ldr	r3, [r7, #20]
   28370:	7a5b      	ldrb	r3, [r3, #9]
   28372:	b2db      	uxtb	r3, r3
   28374:	2b00      	cmp	r3, #0
   28376:	d10a      	bne.n	2838e <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   28378:	230f      	movs	r3, #15
   2837a:	18fb      	adds	r3, r7, r3
   2837c:	781b      	ldrb	r3, [r3, #0]
   2837e:	2202      	movs	r2, #2
   28380:	4013      	ands	r3, r2
   28382:	d004      	beq.n	2838e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   28384:	697b      	ldr	r3, [r7, #20]
   28386:	691b      	ldr	r3, [r3, #16]
   28388:	697a      	ldr	r2, [r7, #20]
   2838a:	0010      	movs	r0, r2
   2838c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   2838e:	230c      	movs	r3, #12
   28390:	18fb      	adds	r3, r7, r3
   28392:	881b      	ldrh	r3, [r3, #0]
   28394:	2202      	movs	r2, #2
   28396:	4013      	ands	r3, r2
   28398:	d024      	beq.n	283e4 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2839a:	697b      	ldr	r3, [r7, #20]
   2839c:	795b      	ldrb	r3, [r3, #5]
   2839e:	2b01      	cmp	r3, #1
   283a0:	d120      	bne.n	283e4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   283a2:	697b      	ldr	r3, [r7, #20]
   283a4:	7a5b      	ldrb	r3, [r3, #9]
   283a6:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   283a8:	2b01      	cmp	r3, #1
   283aa:	d11b      	bne.n	283e4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   283ac:	697b      	ldr	r3, [r7, #20]
   283ae:	79db      	ldrb	r3, [r3, #7]
   283b0:	2201      	movs	r2, #1
   283b2:	4053      	eors	r3, r2
   283b4:	b2db      	uxtb	r3, r3
   283b6:	2b00      	cmp	r3, #0
   283b8:	d014      	beq.n	283e4 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   283ba:	693b      	ldr	r3, [r7, #16]
   283bc:	2202      	movs	r2, #2
   283be:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   283c0:	697b      	ldr	r3, [r7, #20]
   283c2:	2203      	movs	r2, #3
   283c4:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   283c6:	697b      	ldr	r3, [r7, #20]
   283c8:	2238      	movs	r2, #56	; 0x38
   283ca:	2100      	movs	r1, #0
   283cc:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   283ce:	230f      	movs	r3, #15
   283d0:	18fb      	adds	r3, r7, r3
   283d2:	781b      	ldrb	r3, [r3, #0]
   283d4:	2201      	movs	r2, #1
   283d6:	4013      	ands	r3, r2
   283d8:	d004      	beq.n	283e4 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   283da:	697b      	ldr	r3, [r7, #20]
   283dc:	68db      	ldr	r3, [r3, #12]
   283de:	697a      	ldr	r2, [r7, #20]
   283e0:	0010      	movs	r0, r2
   283e2:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   283e4:	230c      	movs	r3, #12
   283e6:	18fb      	adds	r3, r7, r3
   283e8:	881b      	ldrh	r3, [r3, #0]
   283ea:	2280      	movs	r2, #128	; 0x80
   283ec:	4013      	ands	r3, r2
   283ee:	d010      	beq.n	28412 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   283f0:	693b      	ldr	r3, [r7, #16]
   283f2:	2280      	movs	r2, #128	; 0x80
   283f4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   283f6:	693b      	ldr	r3, [r7, #16]
   283f8:	2280      	movs	r2, #128	; 0x80
   283fa:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   283fc:	230f      	movs	r3, #15
   283fe:	18fb      	adds	r3, r7, r3
   28400:	781b      	ldrb	r3, [r3, #0]
   28402:	2240      	movs	r2, #64	; 0x40
   28404:	4013      	ands	r3, r2
   28406:	d004      	beq.n	28412 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   28408:	697b      	ldr	r3, [r7, #20]
   2840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2840c:	697a      	ldr	r2, [r7, #20]
   2840e:	0010      	movs	r0, r2
   28410:	4798      	blx	r3
		}
	}
#  endif
}
   28412:	46c0      	nop			; (mov r8, r8)
   28414:	46bd      	mov	sp, r7
   28416:	b006      	add	sp, #24
   28418:	bd80      	pop	{r7, pc}
   2841a:	46c0      	nop			; (mov r8, r8)
   2841c:	20005a60 	.word	0x20005a60
   28420:	000280d5 	.word	0x000280d5
   28424:	00028059 	.word	0x00028059
   28428:	00028109 	.word	0x00028109
   2842c:	0002813f 	.word	0x0002813f

00028430 <system_gclk_chan_get_config_defaults>:
{
   28430:	b580      	push	{r7, lr}
   28432:	b082      	sub	sp, #8
   28434:	af00      	add	r7, sp, #0
   28436:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28438:	687b      	ldr	r3, [r7, #4]
   2843a:	2200      	movs	r2, #0
   2843c:	701a      	strb	r2, [r3, #0]
}
   2843e:	46c0      	nop			; (mov r8, r8)
   28440:	46bd      	mov	sp, r7
   28442:	b002      	add	sp, #8
   28444:	bd80      	pop	{r7, pc}
	...

00028448 <system_apb_clock_set_mask>:
{
   28448:	b580      	push	{r7, lr}
   2844a:	b082      	sub	sp, #8
   2844c:	af00      	add	r7, sp, #0
   2844e:	0002      	movs	r2, r0
   28450:	6039      	str	r1, [r7, #0]
   28452:	1dfb      	adds	r3, r7, #7
   28454:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28456:	1dfb      	adds	r3, r7, #7
   28458:	781b      	ldrb	r3, [r3, #0]
   2845a:	2b01      	cmp	r3, #1
   2845c:	d00a      	beq.n	28474 <system_apb_clock_set_mask+0x2c>
   2845e:	2b02      	cmp	r3, #2
   28460:	d00f      	beq.n	28482 <system_apb_clock_set_mask+0x3a>
   28462:	2b00      	cmp	r3, #0
   28464:	d114      	bne.n	28490 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28466:	4b0e      	ldr	r3, [pc, #56]	; (284a0 <system_apb_clock_set_mask+0x58>)
   28468:	4a0d      	ldr	r2, [pc, #52]	; (284a0 <system_apb_clock_set_mask+0x58>)
   2846a:	6991      	ldr	r1, [r2, #24]
   2846c:	683a      	ldr	r2, [r7, #0]
   2846e:	430a      	orrs	r2, r1
   28470:	619a      	str	r2, [r3, #24]
			break;
   28472:	e00f      	b.n	28494 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28474:	4b0a      	ldr	r3, [pc, #40]	; (284a0 <system_apb_clock_set_mask+0x58>)
   28476:	4a0a      	ldr	r2, [pc, #40]	; (284a0 <system_apb_clock_set_mask+0x58>)
   28478:	69d1      	ldr	r1, [r2, #28]
   2847a:	683a      	ldr	r2, [r7, #0]
   2847c:	430a      	orrs	r2, r1
   2847e:	61da      	str	r2, [r3, #28]
			break;
   28480:	e008      	b.n	28494 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28482:	4b07      	ldr	r3, [pc, #28]	; (284a0 <system_apb_clock_set_mask+0x58>)
   28484:	4a06      	ldr	r2, [pc, #24]	; (284a0 <system_apb_clock_set_mask+0x58>)
   28486:	6a11      	ldr	r1, [r2, #32]
   28488:	683a      	ldr	r2, [r7, #0]
   2848a:	430a      	orrs	r2, r1
   2848c:	621a      	str	r2, [r3, #32]
			break;
   2848e:	e001      	b.n	28494 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28490:	2317      	movs	r3, #23
   28492:	e000      	b.n	28496 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28494:	2300      	movs	r3, #0
}
   28496:	0018      	movs	r0, r3
   28498:	46bd      	mov	sp, r7
   2849a:	b002      	add	sp, #8
   2849c:	bd80      	pop	{r7, pc}
   2849e:	46c0      	nop			; (mov r8, r8)
   284a0:	40000400 	.word	0x40000400

000284a4 <system_pinmux_get_config_defaults>:
{
   284a4:	b580      	push	{r7, lr}
   284a6:	b082      	sub	sp, #8
   284a8:	af00      	add	r7, sp, #0
   284aa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   284ac:	687b      	ldr	r3, [r7, #4]
   284ae:	2280      	movs	r2, #128	; 0x80
   284b0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   284b2:	687b      	ldr	r3, [r7, #4]
   284b4:	2200      	movs	r2, #0
   284b6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   284b8:	687b      	ldr	r3, [r7, #4]
   284ba:	2201      	movs	r2, #1
   284bc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   284be:	687b      	ldr	r3, [r7, #4]
   284c0:	2200      	movs	r2, #0
   284c2:	70da      	strb	r2, [r3, #3]
}
   284c4:	46c0      	nop			; (mov r8, r8)
   284c6:	46bd      	mov	sp, r7
   284c8:	b002      	add	sp, #8
   284ca:	bd80      	pop	{r7, pc}

000284cc <system_is_debugger_present>:
{
   284cc:	b580      	push	{r7, lr}
   284ce:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   284d0:	4b05      	ldr	r3, [pc, #20]	; (284e8 <system_is_debugger_present+0x1c>)
   284d2:	789b      	ldrb	r3, [r3, #2]
   284d4:	b2db      	uxtb	r3, r3
   284d6:	001a      	movs	r2, r3
   284d8:	2302      	movs	r3, #2
   284da:	4013      	ands	r3, r2
   284dc:	1e5a      	subs	r2, r3, #1
   284de:	4193      	sbcs	r3, r2
   284e0:	b2db      	uxtb	r3, r3
}
   284e2:	0018      	movs	r0, r3
   284e4:	46bd      	mov	sp, r7
   284e6:	bd80      	pop	{r7, pc}
   284e8:	41002000 	.word	0x41002000

000284ec <usart_is_syncing>:
{
   284ec:	b580      	push	{r7, lr}
   284ee:	b084      	sub	sp, #16
   284f0:	af00      	add	r7, sp, #0
   284f2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   284f4:	687b      	ldr	r3, [r7, #4]
   284f6:	681b      	ldr	r3, [r3, #0]
   284f8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   284fa:	68fb      	ldr	r3, [r7, #12]
   284fc:	69db      	ldr	r3, [r3, #28]
   284fe:	1e5a      	subs	r2, r3, #1
   28500:	4193      	sbcs	r3, r2
   28502:	b2db      	uxtb	r3, r3
}
   28504:	0018      	movs	r0, r3
   28506:	46bd      	mov	sp, r7
   28508:	b004      	add	sp, #16
   2850a:	bd80      	pop	{r7, pc}

0002850c <_usart_wait_for_sync>:
{
   2850c:	b580      	push	{r7, lr}
   2850e:	b082      	sub	sp, #8
   28510:	af00      	add	r7, sp, #0
   28512:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   28514:	46c0      	nop			; (mov r8, r8)
   28516:	687b      	ldr	r3, [r7, #4]
   28518:	0018      	movs	r0, r3
   2851a:	4b04      	ldr	r3, [pc, #16]	; (2852c <_usart_wait_for_sync+0x20>)
   2851c:	4798      	blx	r3
   2851e:	1e03      	subs	r3, r0, #0
   28520:	d1f9      	bne.n	28516 <_usart_wait_for_sync+0xa>
}
   28522:	46c0      	nop			; (mov r8, r8)
   28524:	46bd      	mov	sp, r7
   28526:	b002      	add	sp, #8
   28528:	bd80      	pop	{r7, pc}
   2852a:	46c0      	nop			; (mov r8, r8)
   2852c:	000284ed 	.word	0x000284ed

00028530 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   28530:	b5b0      	push	{r4, r5, r7, lr}
   28532:	b08c      	sub	sp, #48	; 0x30
   28534:	af02      	add	r7, sp, #8
   28536:	6078      	str	r0, [r7, #4]
   28538:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2853a:	687b      	ldr	r3, [r7, #4]
   2853c:	681b      	ldr	r3, [r3, #0]
   2853e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28540:	687b      	ldr	r3, [r7, #4]
   28542:	681b      	ldr	r3, [r3, #0]
   28544:	0018      	movs	r0, r3
   28546:	4bab      	ldr	r3, [pc, #684]	; (287f4 <_usart_set_config+0x2c4>)
   28548:	4798      	blx	r3
   2854a:	0003      	movs	r3, r0
   2854c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2854e:	697b      	ldr	r3, [r7, #20]
   28550:	3314      	adds	r3, #20
   28552:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   28554:	2300      	movs	r3, #0
   28556:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   28558:	2300      	movs	r3, #0
   2855a:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   2855c:	230a      	movs	r3, #10
   2855e:	18fb      	adds	r3, r7, r3
   28560:	2200      	movs	r2, #0
   28562:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28564:	231f      	movs	r3, #31
   28566:	18fb      	adds	r3, r7, r3
   28568:	2200      	movs	r2, #0
   2856a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2856c:	231e      	movs	r3, #30
   2856e:	18fb      	adds	r3, r7, r3
   28570:	2210      	movs	r2, #16
   28572:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   28574:	683b      	ldr	r3, [r7, #0]
   28576:	8a1b      	ldrh	r3, [r3, #16]
   28578:	2280      	movs	r2, #128	; 0x80
   2857a:	01d2      	lsls	r2, r2, #7
   2857c:	4293      	cmp	r3, r2
   2857e:	d01c      	beq.n	285ba <_usart_set_config+0x8a>
   28580:	2280      	movs	r2, #128	; 0x80
   28582:	01d2      	lsls	r2, r2, #7
   28584:	4293      	cmp	r3, r2
   28586:	dc06      	bgt.n	28596 <_usart_set_config+0x66>
   28588:	2b00      	cmp	r3, #0
   2858a:	d00d      	beq.n	285a8 <_usart_set_config+0x78>
   2858c:	2280      	movs	r2, #128	; 0x80
   2858e:	0192      	lsls	r2, r2, #6
   28590:	4293      	cmp	r3, r2
   28592:	d024      	beq.n	285de <_usart_set_config+0xae>
   28594:	e035      	b.n	28602 <_usart_set_config+0xd2>
   28596:	22c0      	movs	r2, #192	; 0xc0
   28598:	01d2      	lsls	r2, r2, #7
   2859a:	4293      	cmp	r3, r2
   2859c:	d028      	beq.n	285f0 <_usart_set_config+0xc0>
   2859e:	2280      	movs	r2, #128	; 0x80
   285a0:	0212      	lsls	r2, r2, #8
   285a2:	4293      	cmp	r3, r2
   285a4:	d012      	beq.n	285cc <_usart_set_config+0x9c>
   285a6:	e02c      	b.n	28602 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   285a8:	231f      	movs	r3, #31
   285aa:	18fb      	adds	r3, r7, r3
   285ac:	2200      	movs	r2, #0
   285ae:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   285b0:	231e      	movs	r3, #30
   285b2:	18fb      	adds	r3, r7, r3
   285b4:	2210      	movs	r2, #16
   285b6:	701a      	strb	r2, [r3, #0]
			break;
   285b8:	e023      	b.n	28602 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   285ba:	231f      	movs	r3, #31
   285bc:	18fb      	adds	r3, r7, r3
   285be:	2200      	movs	r2, #0
   285c0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   285c2:	231e      	movs	r3, #30
   285c4:	18fb      	adds	r3, r7, r3
   285c6:	2208      	movs	r2, #8
   285c8:	701a      	strb	r2, [r3, #0]
			break;
   285ca:	e01a      	b.n	28602 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   285cc:	231f      	movs	r3, #31
   285ce:	18fb      	adds	r3, r7, r3
   285d0:	2200      	movs	r2, #0
   285d2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   285d4:	231e      	movs	r3, #30
   285d6:	18fb      	adds	r3, r7, r3
   285d8:	2203      	movs	r2, #3
   285da:	701a      	strb	r2, [r3, #0]
			break;
   285dc:	e011      	b.n	28602 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   285de:	231f      	movs	r3, #31
   285e0:	18fb      	adds	r3, r7, r3
   285e2:	2201      	movs	r2, #1
   285e4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   285e6:	231e      	movs	r3, #30
   285e8:	18fb      	adds	r3, r7, r3
   285ea:	2210      	movs	r2, #16
   285ec:	701a      	strb	r2, [r3, #0]
			break;
   285ee:	e008      	b.n	28602 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   285f0:	231f      	movs	r3, #31
   285f2:	18fb      	adds	r3, r7, r3
   285f4:	2201      	movs	r2, #1
   285f6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   285f8:	231e      	movs	r3, #30
   285fa:	18fb      	adds	r3, r7, r3
   285fc:	2208      	movs	r2, #8
   285fe:	701a      	strb	r2, [r3, #0]
			break;
   28600:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   28602:	683b      	ldr	r3, [r7, #0]
   28604:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   28606:	683b      	ldr	r3, [r7, #0]
   28608:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2860a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   2860c:	683b      	ldr	r3, [r7, #0]
   2860e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   28610:	4313      	orrs	r3, r2
		config->sample_rate |
   28612:	683a      	ldr	r2, [r7, #0]
   28614:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   28616:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   28618:	683a      	ldr	r2, [r7, #0]
   2861a:	7e12      	ldrb	r2, [r2, #24]
   2861c:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   2861e:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   28620:	683a      	ldr	r2, [r7, #0]
   28622:	2126      	movs	r1, #38	; 0x26
   28624:	5c52      	ldrb	r2, [r2, r1]
   28626:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   28628:	4313      	orrs	r3, r2
   2862a:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   2862c:	231d      	movs	r3, #29
   2862e:	18fb      	adds	r3, r7, r3
   28630:	2200      	movs	r2, #0
   28632:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   28634:	683b      	ldr	r3, [r7, #0]
   28636:	685b      	ldr	r3, [r3, #4]
   28638:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2863a:	68fb      	ldr	r3, [r7, #12]
   2863c:	2b00      	cmp	r3, #0
   2863e:	d01e      	beq.n	2867e <_usart_set_config+0x14e>
   28640:	2280      	movs	r2, #128	; 0x80
   28642:	0552      	lsls	r2, r2, #21
   28644:	4293      	cmp	r3, r2
   28646:	d14f      	bne.n	286e8 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   28648:	683b      	ldr	r3, [r7, #0]
   2864a:	2227      	movs	r2, #39	; 0x27
   2864c:	5c9b      	ldrb	r3, [r3, r2]
   2864e:	2201      	movs	r2, #1
   28650:	4053      	eors	r3, r2
   28652:	b2db      	uxtb	r3, r3
   28654:	2b00      	cmp	r3, #0
   28656:	d046      	beq.n	286e6 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   28658:	683b      	ldr	r3, [r7, #0]
   2865a:	6a1d      	ldr	r5, [r3, #32]
   2865c:	693b      	ldr	r3, [r7, #16]
   2865e:	b2db      	uxtb	r3, r3
   28660:	0018      	movs	r0, r3
   28662:	4b65      	ldr	r3, [pc, #404]	; (287f8 <_usart_set_config+0x2c8>)
   28664:	4798      	blx	r3
   28666:	0001      	movs	r1, r0
   28668:	231d      	movs	r3, #29
   2866a:	18fc      	adds	r4, r7, r3
   2866c:	230a      	movs	r3, #10
   2866e:	18fb      	adds	r3, r7, r3
   28670:	001a      	movs	r2, r3
   28672:	0028      	movs	r0, r5
   28674:	4b61      	ldr	r3, [pc, #388]	; (287fc <_usart_set_config+0x2cc>)
   28676:	4798      	blx	r3
   28678:	0003      	movs	r3, r0
   2867a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   2867c:	e033      	b.n	286e6 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   2867e:	683b      	ldr	r3, [r7, #0]
   28680:	2227      	movs	r2, #39	; 0x27
   28682:	5c9b      	ldrb	r3, [r3, r2]
   28684:	2b00      	cmp	r3, #0
   28686:	d014      	beq.n	286b2 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   28688:	683b      	ldr	r3, [r7, #0]
   2868a:	6a18      	ldr	r0, [r3, #32]
   2868c:	683b      	ldr	r3, [r7, #0]
   2868e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   28690:	231d      	movs	r3, #29
   28692:	18fc      	adds	r4, r7, r3
   28694:	231f      	movs	r3, #31
   28696:	18fb      	adds	r3, r7, r3
   28698:	781d      	ldrb	r5, [r3, #0]
   2869a:	230a      	movs	r3, #10
   2869c:	18fa      	adds	r2, r7, r3
   2869e:	231e      	movs	r3, #30
   286a0:	18fb      	adds	r3, r7, r3
   286a2:	781b      	ldrb	r3, [r3, #0]
   286a4:	9300      	str	r3, [sp, #0]
   286a6:	002b      	movs	r3, r5
   286a8:	4d55      	ldr	r5, [pc, #340]	; (28800 <_usart_set_config+0x2d0>)
   286aa:	47a8      	blx	r5
   286ac:	0003      	movs	r3, r0
   286ae:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   286b0:	e01a      	b.n	286e8 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   286b2:	683b      	ldr	r3, [r7, #0]
   286b4:	6a1d      	ldr	r5, [r3, #32]
   286b6:	693b      	ldr	r3, [r7, #16]
   286b8:	b2db      	uxtb	r3, r3
   286ba:	0018      	movs	r0, r3
   286bc:	4b4e      	ldr	r3, [pc, #312]	; (287f8 <_usart_set_config+0x2c8>)
   286be:	4798      	blx	r3
				status_code =
   286c0:	231d      	movs	r3, #29
   286c2:	18fc      	adds	r4, r7, r3
   286c4:	231f      	movs	r3, #31
   286c6:	18fb      	adds	r3, r7, r3
   286c8:	7819      	ldrb	r1, [r3, #0]
   286ca:	230a      	movs	r3, #10
   286cc:	18fa      	adds	r2, r7, r3
   286ce:	231e      	movs	r3, #30
   286d0:	18fb      	adds	r3, r7, r3
   286d2:	781b      	ldrb	r3, [r3, #0]
   286d4:	9300      	str	r3, [sp, #0]
   286d6:	000b      	movs	r3, r1
   286d8:	0001      	movs	r1, r0
   286da:	0028      	movs	r0, r5
   286dc:	4d48      	ldr	r5, [pc, #288]	; (28800 <_usart_set_config+0x2d0>)
   286de:	47a8      	blx	r5
   286e0:	0003      	movs	r3, r0
   286e2:	7023      	strb	r3, [r4, #0]
			break;
   286e4:	e000      	b.n	286e8 <_usart_set_config+0x1b8>
			break;
   286e6:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   286e8:	231d      	movs	r3, #29
   286ea:	18fb      	adds	r3, r7, r3
   286ec:	781b      	ldrb	r3, [r3, #0]
   286ee:	2b00      	cmp	r3, #0
   286f0:	d003      	beq.n	286fa <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   286f2:	231d      	movs	r3, #29
   286f4:	18fb      	adds	r3, r7, r3
   286f6:	781b      	ldrb	r3, [r3, #0]
   286f8:	e077      	b.n	287ea <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   286fa:	683b      	ldr	r3, [r7, #0]
   286fc:	7e5b      	ldrb	r3, [r3, #25]
   286fe:	2b00      	cmp	r3, #0
   28700:	d003      	beq.n	2870a <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   28702:	683b      	ldr	r3, [r7, #0]
   28704:	7e9a      	ldrb	r2, [r3, #26]
   28706:	69bb      	ldr	r3, [r7, #24]
   28708:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2870a:	687b      	ldr	r3, [r7, #4]
   2870c:	0018      	movs	r0, r3
   2870e:	4b3d      	ldr	r3, [pc, #244]	; (28804 <_usart_set_config+0x2d4>)
   28710:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   28712:	230a      	movs	r3, #10
   28714:	18fb      	adds	r3, r7, r3
   28716:	881a      	ldrh	r2, [r3, #0]
   28718:	69bb      	ldr	r3, [r7, #24]
   2871a:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   2871c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2871e:	68fb      	ldr	r3, [r7, #12]
   28720:	4313      	orrs	r3, r2
   28722:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   28724:	683b      	ldr	r3, [r7, #0]
   28726:	2227      	movs	r2, #39	; 0x27
   28728:	5c9b      	ldrb	r3, [r3, r2]
   2872a:	2201      	movs	r2, #1
   2872c:	4053      	eors	r3, r2
   2872e:	b2db      	uxtb	r3, r3
   28730:	2b00      	cmp	r3, #0
   28732:	d003      	beq.n	2873c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   28734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28736:	2204      	movs	r2, #4
   28738:	4313      	orrs	r3, r2
   2873a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2873c:	683b      	ldr	r3, [r7, #0]
   2873e:	7e5b      	ldrb	r3, [r3, #25]
   28740:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28742:	683b      	ldr	r3, [r7, #0]
   28744:	7f1b      	ldrb	r3, [r3, #28]
   28746:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   28748:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2874a:	683b      	ldr	r3, [r7, #0]
   2874c:	7f5b      	ldrb	r3, [r3, #29]
   2874e:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28750:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28752:	683b      	ldr	r3, [r7, #0]
   28754:	2124      	movs	r1, #36	; 0x24
   28756:	5c5b      	ldrb	r3, [r3, r1]
   28758:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2875a:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   2875c:	683b      	ldr	r3, [r7, #0]
   2875e:	2125      	movs	r1, #37	; 0x25
   28760:	5c5b      	ldrb	r3, [r3, r1]
   28762:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28764:	4313      	orrs	r3, r2
	ctrlb =  
   28766:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   28768:	683b      	ldr	r3, [r7, #0]
   2876a:	7a9b      	ldrb	r3, [r3, #10]
   2876c:	001a      	movs	r2, r3
   2876e:	6a3b      	ldr	r3, [r7, #32]
   28770:	4313      	orrs	r3, r2
   28772:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   28774:	683b      	ldr	r3, [r7, #0]
   28776:	7adb      	ldrb	r3, [r3, #11]
   28778:	001a      	movs	r2, r3
   2877a:	6a3b      	ldr	r3, [r7, #32]
   2877c:	4313      	orrs	r3, r2
   2877e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   28780:	683b      	ldr	r3, [r7, #0]
   28782:	891b      	ldrh	r3, [r3, #8]
   28784:	2bff      	cmp	r3, #255	; 0xff
   28786:	d00b      	beq.n	287a0 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   28788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2878a:	2280      	movs	r2, #128	; 0x80
   2878c:	0452      	lsls	r2, r2, #17
   2878e:	4313      	orrs	r3, r2
   28790:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   28792:	683b      	ldr	r3, [r7, #0]
   28794:	891b      	ldrh	r3, [r3, #8]
   28796:	001a      	movs	r2, r3
   28798:	6a3b      	ldr	r3, [r7, #32]
   2879a:	4313      	orrs	r3, r2
   2879c:	623b      	str	r3, [r7, #32]
   2879e:	e008      	b.n	287b2 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   287a0:	683b      	ldr	r3, [r7, #0]
   287a2:	7edb      	ldrb	r3, [r3, #27]
   287a4:	2b00      	cmp	r3, #0
   287a6:	d004      	beq.n	287b2 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   287a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   287aa:	2280      	movs	r2, #128	; 0x80
   287ac:	04d2      	lsls	r2, r2, #19
   287ae:	4313      	orrs	r3, r2
   287b0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   287b2:	683b      	ldr	r3, [r7, #0]
   287b4:	222c      	movs	r2, #44	; 0x2c
   287b6:	5c9b      	ldrb	r3, [r3, r2]
   287b8:	2b00      	cmp	r3, #0
   287ba:	d103      	bne.n	287c4 <_usart_set_config+0x294>
   287bc:	4b12      	ldr	r3, [pc, #72]	; (28808 <_usart_set_config+0x2d8>)
   287be:	4798      	blx	r3
   287c0:	1e03      	subs	r3, r0, #0
   287c2:	d003      	beq.n	287cc <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   287c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   287c6:	2280      	movs	r2, #128	; 0x80
   287c8:	4313      	orrs	r3, r2
   287ca:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   287cc:	687b      	ldr	r3, [r7, #4]
   287ce:	0018      	movs	r0, r3
   287d0:	4b0c      	ldr	r3, [pc, #48]	; (28804 <_usart_set_config+0x2d4>)
   287d2:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   287d4:	69bb      	ldr	r3, [r7, #24]
   287d6:	6a3a      	ldr	r2, [r7, #32]
   287d8:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   287da:	687b      	ldr	r3, [r7, #4]
   287dc:	0018      	movs	r0, r3
   287de:	4b09      	ldr	r3, [pc, #36]	; (28804 <_usart_set_config+0x2d4>)
   287e0:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   287e2:	69bb      	ldr	r3, [r7, #24]
   287e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   287e6:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   287e8:	2300      	movs	r3, #0
}
   287ea:	0018      	movs	r0, r3
   287ec:	46bd      	mov	sp, r7
   287ee:	b00a      	add	sp, #40	; 0x28
   287f0:	bdb0      	pop	{r4, r5, r7, pc}
   287f2:	46c0      	nop			; (mov r8, r8)
   287f4:	000272d9 	.word	0x000272d9
   287f8:	00029c8d 	.word	0x00029c8d
   287fc:	00026e53 	.word	0x00026e53
   28800:	00026ed1 	.word	0x00026ed1
   28804:	0002850d 	.word	0x0002850d
   28808:	000284cd 	.word	0x000284cd

0002880c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   2880c:	b590      	push	{r4, r7, lr}
   2880e:	b093      	sub	sp, #76	; 0x4c
   28810:	af00      	add	r7, sp, #0
   28812:	60f8      	str	r0, [r7, #12]
   28814:	60b9      	str	r1, [r7, #8]
   28816:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   28818:	233b      	movs	r3, #59	; 0x3b
   2881a:	18fb      	adds	r3, r7, r3
   2881c:	2200      	movs	r2, #0
   2881e:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   28820:	68fb      	ldr	r3, [r7, #12]
   28822:	68ba      	ldr	r2, [r7, #8]
   28824:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28826:	68fb      	ldr	r3, [r7, #12]
   28828:	681b      	ldr	r3, [r3, #0]
   2882a:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2882c:	68fb      	ldr	r3, [r7, #12]
   2882e:	681b      	ldr	r3, [r3, #0]
   28830:	0018      	movs	r0, r3
   28832:	4b86      	ldr	r3, [pc, #536]	; (28a4c <usart_init+0x240>)
   28834:	4798      	blx	r3
   28836:	0003      	movs	r3, r0
   28838:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2883c:	3302      	adds	r3, #2
   2883e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28842:	3314      	adds	r3, #20
   28844:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   28846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28848:	681b      	ldr	r3, [r3, #0]
   2884a:	2201      	movs	r2, #1
   2884c:	4013      	ands	r3, r2
   2884e:	d001      	beq.n	28854 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   28850:	2305      	movs	r3, #5
   28852:	e0f6      	b.n	28a42 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   28854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28856:	681b      	ldr	r3, [r3, #0]
   28858:	2202      	movs	r2, #2
   2885a:	4013      	ands	r3, r2
   2885c:	d001      	beq.n	28862 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   2885e:	231c      	movs	r3, #28
   28860:	e0ef      	b.n	28a42 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   28862:	2201      	movs	r2, #1
   28864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28866:	409a      	lsls	r2, r3
   28868:	0013      	movs	r3, r2
   2886a:	0019      	movs	r1, r3
   2886c:	2002      	movs	r0, #2
   2886e:	4b78      	ldr	r3, [pc, #480]	; (28a50 <usart_init+0x244>)
   28870:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28872:	2324      	movs	r3, #36	; 0x24
   28874:	18fb      	adds	r3, r7, r3
   28876:	0018      	movs	r0, r3
   28878:	4b76      	ldr	r3, [pc, #472]	; (28a54 <usart_init+0x248>)
   2887a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   2887c:	687b      	ldr	r3, [r7, #4]
   2887e:	222d      	movs	r2, #45	; 0x2d
   28880:	5c9a      	ldrb	r2, [r3, r2]
   28882:	2324      	movs	r3, #36	; 0x24
   28884:	18fb      	adds	r3, r7, r3
   28886:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28888:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2888a:	b2db      	uxtb	r3, r3
   2888c:	2224      	movs	r2, #36	; 0x24
   2888e:	18ba      	adds	r2, r7, r2
   28890:	0011      	movs	r1, r2
   28892:	0018      	movs	r0, r3
   28894:	4b70      	ldr	r3, [pc, #448]	; (28a58 <usart_init+0x24c>)
   28896:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28898:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2889a:	b2db      	uxtb	r3, r3
   2889c:	0018      	movs	r0, r3
   2889e:	4b6f      	ldr	r3, [pc, #444]	; (28a5c <usart_init+0x250>)
   288a0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   288a2:	687b      	ldr	r3, [r7, #4]
   288a4:	222d      	movs	r2, #45	; 0x2d
   288a6:	5c9b      	ldrb	r3, [r3, r2]
   288a8:	2100      	movs	r1, #0
   288aa:	0018      	movs	r0, r3
   288ac:	4b6c      	ldr	r3, [pc, #432]	; (28a60 <usart_init+0x254>)
   288ae:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   288b0:	687b      	ldr	r3, [r7, #4]
   288b2:	7ada      	ldrb	r2, [r3, #11]
   288b4:	68fb      	ldr	r3, [r7, #12]
   288b6:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   288b8:	687b      	ldr	r3, [r7, #4]
   288ba:	2224      	movs	r2, #36	; 0x24
   288bc:	5c9a      	ldrb	r2, [r3, r2]
   288be:	68fb      	ldr	r3, [r7, #12]
   288c0:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   288c2:	687b      	ldr	r3, [r7, #4]
   288c4:	2225      	movs	r2, #37	; 0x25
   288c6:	5c9a      	ldrb	r2, [r3, r2]
   288c8:	68fb      	ldr	r3, [r7, #12]
   288ca:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   288cc:	687b      	ldr	r3, [r7, #4]
   288ce:	7eda      	ldrb	r2, [r3, #27]
   288d0:	68fb      	ldr	r3, [r7, #12]
   288d2:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   288d4:	687b      	ldr	r3, [r7, #4]
   288d6:	7f1a      	ldrb	r2, [r3, #28]
   288d8:	68fb      	ldr	r3, [r7, #12]
   288da:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   288dc:	233b      	movs	r3, #59	; 0x3b
   288de:	18fc      	adds	r4, r7, r3
   288e0:	687a      	ldr	r2, [r7, #4]
   288e2:	68fb      	ldr	r3, [r7, #12]
   288e4:	0011      	movs	r1, r2
   288e6:	0018      	movs	r0, r3
   288e8:	4b5e      	ldr	r3, [pc, #376]	; (28a64 <usart_init+0x258>)
   288ea:	4798      	blx	r3
   288ec:	0003      	movs	r3, r0
   288ee:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   288f0:	233b      	movs	r3, #59	; 0x3b
   288f2:	18fb      	adds	r3, r7, r3
   288f4:	781b      	ldrb	r3, [r3, #0]
   288f6:	2b00      	cmp	r3, #0
   288f8:	d003      	beq.n	28902 <usart_init+0xf6>
		return status_code;
   288fa:	233b      	movs	r3, #59	; 0x3b
   288fc:	18fb      	adds	r3, r7, r3
   288fe:	781b      	ldrb	r3, [r3, #0]
   28900:	e09f      	b.n	28a42 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28902:	2320      	movs	r3, #32
   28904:	18fb      	adds	r3, r7, r3
   28906:	0018      	movs	r0, r3
   28908:	4b57      	ldr	r3, [pc, #348]	; (28a68 <usart_init+0x25c>)
   2890a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2890c:	2320      	movs	r3, #32
   2890e:	18fb      	adds	r3, r7, r3
   28910:	2200      	movs	r2, #0
   28912:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28914:	2320      	movs	r3, #32
   28916:	18fb      	adds	r3, r7, r3
   28918:	2200      	movs	r2, #0
   2891a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   2891c:	687b      	ldr	r3, [r7, #4]
   2891e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   28920:	2310      	movs	r3, #16
   28922:	18fb      	adds	r3, r7, r3
   28924:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   28926:	687b      	ldr	r3, [r7, #4]
   28928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2892a:	2310      	movs	r3, #16
   2892c:	18fb      	adds	r3, r7, r3
   2892e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28930:	687b      	ldr	r3, [r7, #4]
   28932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   28934:	2310      	movs	r3, #16
   28936:	18fb      	adds	r3, r7, r3
   28938:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2893a:	687b      	ldr	r3, [r7, #4]
   2893c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   2893e:	2310      	movs	r3, #16
   28940:	18fb      	adds	r3, r7, r3
   28942:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28944:	2347      	movs	r3, #71	; 0x47
   28946:	18fb      	adds	r3, r7, r3
   28948:	2200      	movs	r2, #0
   2894a:	701a      	strb	r2, [r3, #0]
   2894c:	e02c      	b.n	289a8 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2894e:	2347      	movs	r3, #71	; 0x47
   28950:	18fb      	adds	r3, r7, r3
   28952:	781a      	ldrb	r2, [r3, #0]
   28954:	2310      	movs	r3, #16
   28956:	18fb      	adds	r3, r7, r3
   28958:	0092      	lsls	r2, r2, #2
   2895a:	58d3      	ldr	r3, [r2, r3]
   2895c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2895e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28960:	2b00      	cmp	r3, #0
   28962:	d109      	bne.n	28978 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   28964:	2347      	movs	r3, #71	; 0x47
   28966:	18fb      	adds	r3, r7, r3
   28968:	781a      	ldrb	r2, [r3, #0]
   2896a:	68bb      	ldr	r3, [r7, #8]
   2896c:	0011      	movs	r1, r2
   2896e:	0018      	movs	r0, r3
   28970:	4b3e      	ldr	r3, [pc, #248]	; (28a6c <usart_init+0x260>)
   28972:	4798      	blx	r3
   28974:	0003      	movs	r3, r0
   28976:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2897a:	3301      	adds	r3, #1
   2897c:	d00d      	beq.n	2899a <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2897e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28980:	b2da      	uxtb	r2, r3
   28982:	2320      	movs	r3, #32
   28984:	18fb      	adds	r3, r7, r3
   28986:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2898a:	0c1b      	lsrs	r3, r3, #16
   2898c:	b2db      	uxtb	r3, r3
   2898e:	2220      	movs	r2, #32
   28990:	18ba      	adds	r2, r7, r2
   28992:	0011      	movs	r1, r2
   28994:	0018      	movs	r0, r3
   28996:	4b36      	ldr	r3, [pc, #216]	; (28a70 <usart_init+0x264>)
   28998:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2899a:	2347      	movs	r3, #71	; 0x47
   2899c:	18fb      	adds	r3, r7, r3
   2899e:	781a      	ldrb	r2, [r3, #0]
   289a0:	2347      	movs	r3, #71	; 0x47
   289a2:	18fb      	adds	r3, r7, r3
   289a4:	3201      	adds	r2, #1
   289a6:	701a      	strb	r2, [r3, #0]
   289a8:	2347      	movs	r3, #71	; 0x47
   289aa:	18fb      	adds	r3, r7, r3
   289ac:	781b      	ldrb	r3, [r3, #0]
   289ae:	2b03      	cmp	r3, #3
   289b0:	d9cd      	bls.n	2894e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   289b2:	2300      	movs	r3, #0
   289b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   289b6:	e00a      	b.n	289ce <usart_init+0x1c2>
		module->callback[i]            = NULL;
   289b8:	68fa      	ldr	r2, [r7, #12]
   289ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   289bc:	3302      	adds	r3, #2
   289be:	009b      	lsls	r3, r3, #2
   289c0:	18d3      	adds	r3, r2, r3
   289c2:	3304      	adds	r3, #4
   289c4:	2200      	movs	r2, #0
   289c6:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   289c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   289ca:	3301      	adds	r3, #1
   289cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   289ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   289d0:	2b05      	cmp	r3, #5
   289d2:	d9f1      	bls.n	289b8 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   289d4:	68fb      	ldr	r3, [r7, #12]
   289d6:	2200      	movs	r2, #0
   289d8:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   289da:	68fb      	ldr	r3, [r7, #12]
   289dc:	2200      	movs	r2, #0
   289de:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   289e0:	68fb      	ldr	r3, [r7, #12]
   289e2:	2200      	movs	r2, #0
   289e4:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   289e6:	68fb      	ldr	r3, [r7, #12]
   289e8:	2200      	movs	r2, #0
   289ea:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   289ec:	68fb      	ldr	r3, [r7, #12]
   289ee:	2230      	movs	r2, #48	; 0x30
   289f0:	2100      	movs	r1, #0
   289f2:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   289f4:	68fb      	ldr	r3, [r7, #12]
   289f6:	2231      	movs	r2, #49	; 0x31
   289f8:	2100      	movs	r1, #0
   289fa:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   289fc:	68fb      	ldr	r3, [r7, #12]
   289fe:	2232      	movs	r2, #50	; 0x32
   28a00:	2100      	movs	r1, #0
   28a02:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   28a04:	68fb      	ldr	r3, [r7, #12]
   28a06:	2233      	movs	r2, #51	; 0x33
   28a08:	2100      	movs	r1, #0
   28a0a:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   28a0c:	68fb      	ldr	r3, [r7, #12]
   28a0e:	681b      	ldr	r3, [r3, #0]
   28a10:	2227      	movs	r2, #39	; 0x27
   28a12:	18bc      	adds	r4, r7, r2
   28a14:	0018      	movs	r0, r3
   28a16:	4b0d      	ldr	r3, [pc, #52]	; (28a4c <usart_init+0x240>)
   28a18:	4798      	blx	r3
   28a1a:	0003      	movs	r3, r0
   28a1c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   28a1e:	4a15      	ldr	r2, [pc, #84]	; (28a74 <usart_init+0x268>)
   28a20:	2327      	movs	r3, #39	; 0x27
   28a22:	18fb      	adds	r3, r7, r3
   28a24:	781b      	ldrb	r3, [r3, #0]
   28a26:	0011      	movs	r1, r2
   28a28:	0018      	movs	r0, r3
   28a2a:	4b13      	ldr	r3, [pc, #76]	; (28a78 <usart_init+0x26c>)
   28a2c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28a2e:	2327      	movs	r3, #39	; 0x27
   28a30:	18fb      	adds	r3, r7, r3
   28a32:	781a      	ldrb	r2, [r3, #0]
   28a34:	4b11      	ldr	r3, [pc, #68]	; (28a7c <usart_init+0x270>)
   28a36:	0092      	lsls	r2, r2, #2
   28a38:	68f9      	ldr	r1, [r7, #12]
   28a3a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   28a3c:	233b      	movs	r3, #59	; 0x3b
   28a3e:	18fb      	adds	r3, r7, r3
   28a40:	781b      	ldrb	r3, [r3, #0]
}
   28a42:	0018      	movs	r0, r3
   28a44:	46bd      	mov	sp, r7
   28a46:	b013      	add	sp, #76	; 0x4c
   28a48:	bd90      	pop	{r4, r7, pc}
   28a4a:	46c0      	nop			; (mov r8, r8)
   28a4c:	000272d9 	.word	0x000272d9
   28a50:	00028449 	.word	0x00028449
   28a54:	00028431 	.word	0x00028431
   28a58:	00029b69 	.word	0x00029b69
   28a5c:	00029bad 	.word	0x00029bad
   28a60:	00027091 	.word	0x00027091
   28a64:	00028531 	.word	0x00028531
   28a68:	000284a5 	.word	0x000284a5
   28a6c:	0002711d 	.word	0x0002711d
   28a70:	00029ec9 	.word	0x00029ec9
   28a74:	00028ce9 	.word	0x00028ce9
   28a78:	0002733d 	.word	0x0002733d
   28a7c:	20005a60 	.word	0x20005a60

00028a80 <system_interrupt_enter_critical_section>:
{
   28a80:	b580      	push	{r7, lr}
   28a82:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28a84:	4b02      	ldr	r3, [pc, #8]	; (28a90 <system_interrupt_enter_critical_section+0x10>)
   28a86:	4798      	blx	r3
}
   28a88:	46c0      	nop			; (mov r8, r8)
   28a8a:	46bd      	mov	sp, r7
   28a8c:	bd80      	pop	{r7, pc}
   28a8e:	46c0      	nop			; (mov r8, r8)
   28a90:	00025ed5 	.word	0x00025ed5

00028a94 <system_interrupt_leave_critical_section>:
{
   28a94:	b580      	push	{r7, lr}
   28a96:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   28a98:	4b02      	ldr	r3, [pc, #8]	; (28aa4 <system_interrupt_leave_critical_section+0x10>)
   28a9a:	4798      	blx	r3
}
   28a9c:	46c0      	nop			; (mov r8, r8)
   28a9e:	46bd      	mov	sp, r7
   28aa0:	bd80      	pop	{r7, pc}
   28aa2:	46c0      	nop			; (mov r8, r8)
   28aa4:	00025f29 	.word	0x00025f29

00028aa8 <usart_is_syncing>:
{
   28aa8:	b580      	push	{r7, lr}
   28aaa:	b084      	sub	sp, #16
   28aac:	af00      	add	r7, sp, #0
   28aae:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   28ab0:	687b      	ldr	r3, [r7, #4]
   28ab2:	681b      	ldr	r3, [r3, #0]
   28ab4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   28ab6:	68fb      	ldr	r3, [r7, #12]
   28ab8:	69db      	ldr	r3, [r3, #28]
   28aba:	1e5a      	subs	r2, r3, #1
   28abc:	4193      	sbcs	r3, r2
   28abe:	b2db      	uxtb	r3, r3
}
   28ac0:	0018      	movs	r0, r3
   28ac2:	46bd      	mov	sp, r7
   28ac4:	b004      	add	sp, #16
   28ac6:	bd80      	pop	{r7, pc}

00028ac8 <_usart_wait_for_sync>:
{
   28ac8:	b580      	push	{r7, lr}
   28aca:	b082      	sub	sp, #8
   28acc:	af00      	add	r7, sp, #0
   28ace:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   28ad0:	46c0      	nop			; (mov r8, r8)
   28ad2:	687b      	ldr	r3, [r7, #4]
   28ad4:	0018      	movs	r0, r3
   28ad6:	4b04      	ldr	r3, [pc, #16]	; (28ae8 <_usart_wait_for_sync+0x20>)
   28ad8:	4798      	blx	r3
   28ada:	1e03      	subs	r3, r0, #0
   28adc:	d1f9      	bne.n	28ad2 <_usart_wait_for_sync+0xa>
}
   28ade:	46c0      	nop			; (mov r8, r8)
   28ae0:	46bd      	mov	sp, r7
   28ae2:	b002      	add	sp, #8
   28ae4:	bd80      	pop	{r7, pc}
   28ae6:	46c0      	nop			; (mov r8, r8)
   28ae8:	00028aa9 	.word	0x00028aa9

00028aec <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   28aec:	b580      	push	{r7, lr}
   28aee:	b086      	sub	sp, #24
   28af0:	af00      	add	r7, sp, #0
   28af2:	60f8      	str	r0, [r7, #12]
   28af4:	60b9      	str	r1, [r7, #8]
   28af6:	1dbb      	adds	r3, r7, #6
   28af8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28afa:	68fb      	ldr	r3, [r7, #12]
   28afc:	681b      	ldr	r3, [r3, #0]
   28afe:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28b00:	4b0f      	ldr	r3, [pc, #60]	; (28b40 <_usart_write_buffer+0x54>)
   28b02:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   28b04:	68fb      	ldr	r3, [r7, #12]
   28b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28b08:	b29b      	uxth	r3, r3
   28b0a:	2b00      	cmp	r3, #0
   28b0c:	d003      	beq.n	28b16 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   28b0e:	4b0d      	ldr	r3, [pc, #52]	; (28b44 <_usart_write_buffer+0x58>)
   28b10:	4798      	blx	r3
		return STATUS_BUSY;
   28b12:	2305      	movs	r3, #5
   28b14:	e010      	b.n	28b38 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   28b16:	68fb      	ldr	r3, [r7, #12]
   28b18:	1dba      	adds	r2, r7, #6
   28b1a:	8812      	ldrh	r2, [r2, #0]
   28b1c:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   28b1e:	4b09      	ldr	r3, [pc, #36]	; (28b44 <_usart_write_buffer+0x58>)
   28b20:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   28b22:	68fb      	ldr	r3, [r7, #12]
   28b24:	68ba      	ldr	r2, [r7, #8]
   28b26:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   28b28:	68fb      	ldr	r3, [r7, #12]
   28b2a:	2233      	movs	r2, #51	; 0x33
   28b2c:	2105      	movs	r1, #5
   28b2e:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   28b30:	697b      	ldr	r3, [r7, #20]
   28b32:	2201      	movs	r2, #1
   28b34:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   28b36:	2300      	movs	r3, #0
}
   28b38:	0018      	movs	r0, r3
   28b3a:	46bd      	mov	sp, r7
   28b3c:	b006      	add	sp, #24
   28b3e:	bd80      	pop	{r7, pc}
   28b40:	00028a81 	.word	0x00028a81
   28b44:	00028a95 	.word	0x00028a95

00028b48 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28b48:	b580      	push	{r7, lr}
   28b4a:	b086      	sub	sp, #24
   28b4c:	af00      	add	r7, sp, #0
   28b4e:	60f8      	str	r0, [r7, #12]
   28b50:	60b9      	str	r1, [r7, #8]
   28b52:	1dbb      	adds	r3, r7, #6
   28b54:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28b56:	68fb      	ldr	r3, [r7, #12]
   28b58:	681b      	ldr	r3, [r3, #0]
   28b5a:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28b5c:	4b16      	ldr	r3, [pc, #88]	; (28bb8 <_usart_read_buffer+0x70>)
   28b5e:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   28b60:	68fb      	ldr	r3, [r7, #12]
   28b62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28b64:	b29b      	uxth	r3, r3
   28b66:	2b00      	cmp	r3, #0
   28b68:	d003      	beq.n	28b72 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   28b6a:	4b14      	ldr	r3, [pc, #80]	; (28bbc <_usart_read_buffer+0x74>)
   28b6c:	4798      	blx	r3
		return STATUS_BUSY;
   28b6e:	2305      	movs	r3, #5
   28b70:	e01e      	b.n	28bb0 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   28b72:	68fb      	ldr	r3, [r7, #12]
   28b74:	1dba      	adds	r2, r7, #6
   28b76:	8812      	ldrh	r2, [r2, #0]
   28b78:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   28b7a:	4b10      	ldr	r3, [pc, #64]	; (28bbc <_usart_read_buffer+0x74>)
   28b7c:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   28b7e:	68fb      	ldr	r3, [r7, #12]
   28b80:	68ba      	ldr	r2, [r7, #8]
   28b82:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   28b84:	68fb      	ldr	r3, [r7, #12]
   28b86:	2232      	movs	r2, #50	; 0x32
   28b88:	2105      	movs	r1, #5
   28b8a:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   28b8c:	697b      	ldr	r3, [r7, #20]
   28b8e:	2204      	movs	r2, #4
   28b90:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   28b92:	68fb      	ldr	r3, [r7, #12]
   28b94:	7a1b      	ldrb	r3, [r3, #8]
   28b96:	2b00      	cmp	r3, #0
   28b98:	d002      	beq.n	28ba0 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   28b9a:	697b      	ldr	r3, [r7, #20]
   28b9c:	2220      	movs	r2, #32
   28b9e:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   28ba0:	68fb      	ldr	r3, [r7, #12]
   28ba2:	7a5b      	ldrb	r3, [r3, #9]
   28ba4:	2b00      	cmp	r3, #0
   28ba6:	d002      	beq.n	28bae <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   28ba8:	697b      	ldr	r3, [r7, #20]
   28baa:	2208      	movs	r2, #8
   28bac:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   28bae:	2300      	movs	r3, #0
}
   28bb0:	0018      	movs	r0, r3
   28bb2:	46bd      	mov	sp, r7
   28bb4:	b006      	add	sp, #24
   28bb6:	bd80      	pop	{r7, pc}
   28bb8:	00028a81 	.word	0x00028a81
   28bbc:	00028a95 	.word	0x00028a95

00028bc0 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   28bc0:	b580      	push	{r7, lr}
   28bc2:	b084      	sub	sp, #16
   28bc4:	af00      	add	r7, sp, #0
   28bc6:	60f8      	str	r0, [r7, #12]
   28bc8:	60b9      	str	r1, [r7, #8]
   28bca:	1dfb      	adds	r3, r7, #7
   28bcc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   28bce:	1dfb      	adds	r3, r7, #7
   28bd0:	781b      	ldrb	r3, [r3, #0]
   28bd2:	68fa      	ldr	r2, [r7, #12]
   28bd4:	3302      	adds	r3, #2
   28bd6:	009b      	lsls	r3, r3, #2
   28bd8:	18d3      	adds	r3, r2, r3
   28bda:	3304      	adds	r3, #4
   28bdc:	68ba      	ldr	r2, [r7, #8]
   28bde:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   28be0:	68fb      	ldr	r3, [r7, #12]
   28be2:	2230      	movs	r2, #48	; 0x30
   28be4:	5c9b      	ldrb	r3, [r3, r2]
   28be6:	b25a      	sxtb	r2, r3
   28be8:	1dfb      	adds	r3, r7, #7
   28bea:	781b      	ldrb	r3, [r3, #0]
   28bec:	2101      	movs	r1, #1
   28bee:	4099      	lsls	r1, r3
   28bf0:	000b      	movs	r3, r1
   28bf2:	b25b      	sxtb	r3, r3
   28bf4:	4313      	orrs	r3, r2
   28bf6:	b25b      	sxtb	r3, r3
   28bf8:	b2d9      	uxtb	r1, r3
   28bfa:	68fb      	ldr	r3, [r7, #12]
   28bfc:	2230      	movs	r2, #48	; 0x30
   28bfe:	5499      	strb	r1, [r3, r2]
}
   28c00:	46c0      	nop			; (mov r8, r8)
   28c02:	46bd      	mov	sp, r7
   28c04:	b004      	add	sp, #16
   28c06:	bd80      	pop	{r7, pc}

00028c08 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   28c08:	b580      	push	{r7, lr}
   28c0a:	b084      	sub	sp, #16
   28c0c:	af00      	add	r7, sp, #0
   28c0e:	60f8      	str	r0, [r7, #12]
   28c10:	60b9      	str	r1, [r7, #8]
   28c12:	1dbb      	adds	r3, r7, #6
   28c14:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   28c16:	1dbb      	adds	r3, r7, #6
   28c18:	881b      	ldrh	r3, [r3, #0]
   28c1a:	2b00      	cmp	r3, #0
   28c1c:	d101      	bne.n	28c22 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28c1e:	2317      	movs	r3, #23
   28c20:	e010      	b.n	28c44 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   28c22:	68fb      	ldr	r3, [r7, #12]
   28c24:	79db      	ldrb	r3, [r3, #7]
   28c26:	2201      	movs	r2, #1
   28c28:	4053      	eors	r3, r2
   28c2a:	b2db      	uxtb	r3, r3
   28c2c:	2b00      	cmp	r3, #0
   28c2e:	d001      	beq.n	28c34 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28c30:	231c      	movs	r3, #28
   28c32:	e007      	b.n	28c44 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   28c34:	1dbb      	adds	r3, r7, #6
   28c36:	881a      	ldrh	r2, [r3, #0]
   28c38:	68b9      	ldr	r1, [r7, #8]
   28c3a:	68fb      	ldr	r3, [r7, #12]
   28c3c:	0018      	movs	r0, r3
   28c3e:	4b03      	ldr	r3, [pc, #12]	; (28c4c <usart_write_buffer_job+0x44>)
   28c40:	4798      	blx	r3
   28c42:	0003      	movs	r3, r0
}
   28c44:	0018      	movs	r0, r3
   28c46:	46bd      	mov	sp, r7
   28c48:	b004      	add	sp, #16
   28c4a:	bd80      	pop	{r7, pc}
   28c4c:	00028aed 	.word	0x00028aed

00028c50 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28c50:	b580      	push	{r7, lr}
   28c52:	b084      	sub	sp, #16
   28c54:	af00      	add	r7, sp, #0
   28c56:	60f8      	str	r0, [r7, #12]
   28c58:	60b9      	str	r1, [r7, #8]
   28c5a:	1dbb      	adds	r3, r7, #6
   28c5c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   28c5e:	1dbb      	adds	r3, r7, #6
   28c60:	881b      	ldrh	r3, [r3, #0]
   28c62:	2b00      	cmp	r3, #0
   28c64:	d101      	bne.n	28c6a <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28c66:	2317      	movs	r3, #23
   28c68:	e010      	b.n	28c8c <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   28c6a:	68fb      	ldr	r3, [r7, #12]
   28c6c:	799b      	ldrb	r3, [r3, #6]
   28c6e:	2201      	movs	r2, #1
   28c70:	4053      	eors	r3, r2
   28c72:	b2db      	uxtb	r3, r3
   28c74:	2b00      	cmp	r3, #0
   28c76:	d001      	beq.n	28c7c <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28c78:	231c      	movs	r3, #28
   28c7a:	e007      	b.n	28c8c <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   28c7c:	1dbb      	adds	r3, r7, #6
   28c7e:	881a      	ldrh	r2, [r3, #0]
   28c80:	68b9      	ldr	r1, [r7, #8]
   28c82:	68fb      	ldr	r3, [r7, #12]
   28c84:	0018      	movs	r0, r3
   28c86:	4b03      	ldr	r3, [pc, #12]	; (28c94 <usart_read_buffer_job+0x44>)
   28c88:	4798      	blx	r3
   28c8a:	0003      	movs	r3, r0
}
   28c8c:	0018      	movs	r0, r3
   28c8e:	46bd      	mov	sp, r7
   28c90:	b004      	add	sp, #16
   28c92:	bd80      	pop	{r7, pc}
   28c94:	00028b49 	.word	0x00028b49

00028c98 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   28c98:	b580      	push	{r7, lr}
   28c9a:	b084      	sub	sp, #16
   28c9c:	af00      	add	r7, sp, #0
   28c9e:	6078      	str	r0, [r7, #4]
   28ca0:	000a      	movs	r2, r1
   28ca2:	1cfb      	adds	r3, r7, #3
   28ca4:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   28ca6:	1cfb      	adds	r3, r7, #3
   28ca8:	781b      	ldrb	r3, [r3, #0]
   28caa:	2b00      	cmp	r3, #0
   28cac:	d002      	beq.n	28cb4 <usart_get_job_status+0x1c>
   28cae:	2b01      	cmp	r3, #1
   28cb0:	d007      	beq.n	28cc2 <usart_get_job_status+0x2a>
   28cb2:	e00d      	b.n	28cd0 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   28cb4:	230f      	movs	r3, #15
   28cb6:	18fb      	adds	r3, r7, r3
   28cb8:	687a      	ldr	r2, [r7, #4]
   28cba:	2132      	movs	r1, #50	; 0x32
   28cbc:	5c52      	ldrb	r2, [r2, r1]
   28cbe:	701a      	strb	r2, [r3, #0]
			break;
   28cc0:	e00b      	b.n	28cda <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   28cc2:	230f      	movs	r3, #15
   28cc4:	18fb      	adds	r3, r7, r3
   28cc6:	687a      	ldr	r2, [r7, #4]
   28cc8:	2133      	movs	r1, #51	; 0x33
   28cca:	5c52      	ldrb	r2, [r2, r1]
   28ccc:	701a      	strb	r2, [r3, #0]
			break;
   28cce:	e004      	b.n	28cda <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   28cd0:	230f      	movs	r3, #15
   28cd2:	18fb      	adds	r3, r7, r3
   28cd4:	2217      	movs	r2, #23
   28cd6:	701a      	strb	r2, [r3, #0]
			break;
   28cd8:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   28cda:	230f      	movs	r3, #15
   28cdc:	18fb      	adds	r3, r7, r3
   28cde:	781b      	ldrb	r3, [r3, #0]
}
   28ce0:	0018      	movs	r0, r3
   28ce2:	46bd      	mov	sp, r7
   28ce4:	b004      	add	sp, #16
   28ce6:	bd80      	pop	{r7, pc}

00028ce8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   28ce8:	b580      	push	{r7, lr}
   28cea:	b088      	sub	sp, #32
   28cec:	af00      	add	r7, sp, #0
   28cee:	0002      	movs	r2, r0
   28cf0:	1dfb      	adds	r3, r7, #7
   28cf2:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   28cf4:	1dfb      	adds	r3, r7, #7
   28cf6:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   28cf8:	4ba3      	ldr	r3, [pc, #652]	; (28f88 <_usart_interrupt_handler+0x2a0>)
   28cfa:	0092      	lsls	r2, r2, #2
   28cfc:	58d3      	ldr	r3, [r2, r3]
   28cfe:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   28d00:	69bb      	ldr	r3, [r7, #24]
   28d02:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   28d04:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   28d06:	69bb      	ldr	r3, [r7, #24]
   28d08:	0018      	movs	r0, r3
   28d0a:	4ba0      	ldr	r3, [pc, #640]	; (28f8c <_usart_interrupt_handler+0x2a4>)
   28d0c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   28d0e:	697b      	ldr	r3, [r7, #20]
   28d10:	7e1b      	ldrb	r3, [r3, #24]
   28d12:	b2da      	uxtb	r2, r3
   28d14:	2312      	movs	r3, #18
   28d16:	18fb      	adds	r3, r7, r3
   28d18:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   28d1a:	697b      	ldr	r3, [r7, #20]
   28d1c:	7d9b      	ldrb	r3, [r3, #22]
   28d1e:	b2db      	uxtb	r3, r3
   28d20:	b29a      	uxth	r2, r3
   28d22:	2312      	movs	r3, #18
   28d24:	18fb      	adds	r3, r7, r3
   28d26:	2112      	movs	r1, #18
   28d28:	1879      	adds	r1, r7, r1
   28d2a:	8809      	ldrh	r1, [r1, #0]
   28d2c:	400a      	ands	r2, r1
   28d2e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   28d30:	69bb      	ldr	r3, [r7, #24]
   28d32:	2230      	movs	r2, #48	; 0x30
   28d34:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   28d36:	69ba      	ldr	r2, [r7, #24]
   28d38:	2131      	movs	r1, #49	; 0x31
   28d3a:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   28d3c:	4013      	ands	r3, r2
   28d3e:	b2da      	uxtb	r2, r3
   28d40:	2310      	movs	r3, #16
   28d42:	18fb      	adds	r3, r7, r3
   28d44:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   28d46:	2312      	movs	r3, #18
   28d48:	18fb      	adds	r3, r7, r3
   28d4a:	881b      	ldrh	r3, [r3, #0]
   28d4c:	2201      	movs	r2, #1
   28d4e:	4013      	ands	r3, r2
   28d50:	d044      	beq.n	28ddc <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   28d52:	69bb      	ldr	r3, [r7, #24]
   28d54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28d56:	b29b      	uxth	r3, r3
   28d58:	2b00      	cmp	r3, #0
   28d5a:	d03c      	beq.n	28dd6 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   28d5c:	69bb      	ldr	r3, [r7, #24]
   28d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28d60:	781b      	ldrb	r3, [r3, #0]
   28d62:	b2da      	uxtb	r2, r3
   28d64:	231c      	movs	r3, #28
   28d66:	18fb      	adds	r3, r7, r3
   28d68:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   28d6a:	69bb      	ldr	r3, [r7, #24]
   28d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28d6e:	1c5a      	adds	r2, r3, #1
   28d70:	69bb      	ldr	r3, [r7, #24]
   28d72:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28d74:	69bb      	ldr	r3, [r7, #24]
   28d76:	795b      	ldrb	r3, [r3, #5]
   28d78:	2b01      	cmp	r3, #1
   28d7a:	d113      	bne.n	28da4 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   28d7c:	69bb      	ldr	r3, [r7, #24]
   28d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28d80:	781b      	ldrb	r3, [r3, #0]
   28d82:	b2db      	uxtb	r3, r3
   28d84:	021b      	lsls	r3, r3, #8
   28d86:	b21a      	sxth	r2, r3
   28d88:	231c      	movs	r3, #28
   28d8a:	18fb      	adds	r3, r7, r3
   28d8c:	2100      	movs	r1, #0
   28d8e:	5e5b      	ldrsh	r3, [r3, r1]
   28d90:	4313      	orrs	r3, r2
   28d92:	b21a      	sxth	r2, r3
   28d94:	231c      	movs	r3, #28
   28d96:	18fb      	adds	r3, r7, r3
   28d98:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   28d9a:	69bb      	ldr	r3, [r7, #24]
   28d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28d9e:	1c5a      	adds	r2, r3, #1
   28da0:	69bb      	ldr	r3, [r7, #24]
   28da2:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   28da4:	231c      	movs	r3, #28
   28da6:	18fb      	adds	r3, r7, r3
   28da8:	881b      	ldrh	r3, [r3, #0]
   28daa:	05db      	lsls	r3, r3, #23
   28dac:	0ddb      	lsrs	r3, r3, #23
   28dae:	b29a      	uxth	r2, r3
   28db0:	697b      	ldr	r3, [r7, #20]
   28db2:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   28db4:	69bb      	ldr	r3, [r7, #24]
   28db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28db8:	b29b      	uxth	r3, r3
   28dba:	3b01      	subs	r3, #1
   28dbc:	b29b      	uxth	r3, r3
   28dbe:	69ba      	ldr	r2, [r7, #24]
   28dc0:	1c19      	adds	r1, r3, #0
   28dc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
   28dc4:	2b00      	cmp	r3, #0
   28dc6:	d109      	bne.n	28ddc <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28dc8:	697b      	ldr	r3, [r7, #20]
   28dca:	2201      	movs	r2, #1
   28dcc:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   28dce:	697b      	ldr	r3, [r7, #20]
   28dd0:	2202      	movs	r2, #2
   28dd2:	759a      	strb	r2, [r3, #22]
   28dd4:	e002      	b.n	28ddc <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28dd6:	697b      	ldr	r3, [r7, #20]
   28dd8:	2201      	movs	r2, #1
   28dda:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   28ddc:	2312      	movs	r3, #18
   28dde:	18fb      	adds	r3, r7, r3
   28de0:	881b      	ldrh	r3, [r3, #0]
   28de2:	2202      	movs	r2, #2
   28de4:	4013      	ands	r3, r2
   28de6:	d011      	beq.n	28e0c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   28de8:	697b      	ldr	r3, [r7, #20]
   28dea:	2202      	movs	r2, #2
   28dec:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   28dee:	69bb      	ldr	r3, [r7, #24]
   28df0:	2233      	movs	r2, #51	; 0x33
   28df2:	2100      	movs	r1, #0
   28df4:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   28df6:	2310      	movs	r3, #16
   28df8:	18fb      	adds	r3, r7, r3
   28dfa:	881b      	ldrh	r3, [r3, #0]
   28dfc:	2201      	movs	r2, #1
   28dfe:	4013      	ands	r3, r2
   28e00:	d004      	beq.n	28e0c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   28e02:	69bb      	ldr	r3, [r7, #24]
   28e04:	68db      	ldr	r3, [r3, #12]
   28e06:	69ba      	ldr	r2, [r7, #24]
   28e08:	0010      	movs	r0, r2
   28e0a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   28e0c:	2312      	movs	r3, #18
   28e0e:	18fb      	adds	r3, r7, r3
   28e10:	881b      	ldrh	r3, [r3, #0]
   28e12:	2204      	movs	r2, #4
   28e14:	4013      	ands	r3, r2
   28e16:	d100      	bne.n	28e1a <_usart_interrupt_handler+0x132>
   28e18:	e0bd      	b.n	28f96 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   28e1a:	69bb      	ldr	r3, [r7, #24]
   28e1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28e1e:	b29b      	uxth	r3, r3
   28e20:	2b00      	cmp	r3, #0
   28e22:	d100      	bne.n	28e26 <_usart_interrupt_handler+0x13e>
   28e24:	e0b4      	b.n	28f90 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   28e26:	697b      	ldr	r3, [r7, #20]
   28e28:	8b5b      	ldrh	r3, [r3, #26]
   28e2a:	b29b      	uxth	r3, r3
   28e2c:	b2da      	uxtb	r2, r3
   28e2e:	231f      	movs	r3, #31
   28e30:	18fb      	adds	r3, r7, r3
   28e32:	213f      	movs	r1, #63	; 0x3f
   28e34:	400a      	ands	r2, r1
   28e36:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   28e38:	231f      	movs	r3, #31
   28e3a:	18fb      	adds	r3, r7, r3
   28e3c:	781b      	ldrb	r3, [r3, #0]
   28e3e:	2208      	movs	r2, #8
   28e40:	4013      	ands	r3, r2
   28e42:	d007      	beq.n	28e54 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   28e44:	231f      	movs	r3, #31
   28e46:	18fb      	adds	r3, r7, r3
   28e48:	221f      	movs	r2, #31
   28e4a:	18ba      	adds	r2, r7, r2
   28e4c:	7812      	ldrb	r2, [r2, #0]
   28e4e:	2108      	movs	r1, #8
   28e50:	438a      	bics	r2, r1
   28e52:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   28e54:	231f      	movs	r3, #31
   28e56:	18fb      	adds	r3, r7, r3
   28e58:	781b      	ldrb	r3, [r3, #0]
   28e5a:	2b00      	cmp	r3, #0
   28e5c:	d050      	beq.n	28f00 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   28e5e:	231f      	movs	r3, #31
   28e60:	18fb      	adds	r3, r7, r3
   28e62:	781b      	ldrb	r3, [r3, #0]
   28e64:	2202      	movs	r2, #2
   28e66:	4013      	ands	r3, r2
   28e68:	d007      	beq.n	28e7a <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   28e6a:	69bb      	ldr	r3, [r7, #24]
   28e6c:	2232      	movs	r2, #50	; 0x32
   28e6e:	211a      	movs	r1, #26
   28e70:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   28e72:	697b      	ldr	r3, [r7, #20]
   28e74:	2202      	movs	r2, #2
   28e76:	835a      	strh	r2, [r3, #26]
   28e78:	e036      	b.n	28ee8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   28e7a:	231f      	movs	r3, #31
   28e7c:	18fb      	adds	r3, r7, r3
   28e7e:	781b      	ldrb	r3, [r3, #0]
   28e80:	2204      	movs	r2, #4
   28e82:	4013      	ands	r3, r2
   28e84:	d007      	beq.n	28e96 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   28e86:	69bb      	ldr	r3, [r7, #24]
   28e88:	2232      	movs	r2, #50	; 0x32
   28e8a:	211e      	movs	r1, #30
   28e8c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   28e8e:	697b      	ldr	r3, [r7, #20]
   28e90:	2204      	movs	r2, #4
   28e92:	835a      	strh	r2, [r3, #26]
   28e94:	e028      	b.n	28ee8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   28e96:	231f      	movs	r3, #31
   28e98:	18fb      	adds	r3, r7, r3
   28e9a:	781b      	ldrb	r3, [r3, #0]
   28e9c:	2201      	movs	r2, #1
   28e9e:	4013      	ands	r3, r2
   28ea0:	d007      	beq.n	28eb2 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   28ea2:	69bb      	ldr	r3, [r7, #24]
   28ea4:	2232      	movs	r2, #50	; 0x32
   28ea6:	2113      	movs	r1, #19
   28ea8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   28eaa:	697b      	ldr	r3, [r7, #20]
   28eac:	2201      	movs	r2, #1
   28eae:	835a      	strh	r2, [r3, #26]
   28eb0:	e01a      	b.n	28ee8 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   28eb2:	231f      	movs	r3, #31
   28eb4:	18fb      	adds	r3, r7, r3
   28eb6:	781b      	ldrb	r3, [r3, #0]
   28eb8:	2210      	movs	r2, #16
   28eba:	4013      	ands	r3, r2
   28ebc:	d007      	beq.n	28ece <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   28ebe:	69bb      	ldr	r3, [r7, #24]
   28ec0:	2232      	movs	r2, #50	; 0x32
   28ec2:	2142      	movs	r1, #66	; 0x42
   28ec4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   28ec6:	697b      	ldr	r3, [r7, #20]
   28ec8:	2210      	movs	r2, #16
   28eca:	835a      	strh	r2, [r3, #26]
   28ecc:	e00c      	b.n	28ee8 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   28ece:	231f      	movs	r3, #31
   28ed0:	18fb      	adds	r3, r7, r3
   28ed2:	781b      	ldrb	r3, [r3, #0]
   28ed4:	2220      	movs	r2, #32
   28ed6:	4013      	ands	r3, r2
   28ed8:	d006      	beq.n	28ee8 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   28eda:	69bb      	ldr	r3, [r7, #24]
   28edc:	2232      	movs	r2, #50	; 0x32
   28ede:	2141      	movs	r1, #65	; 0x41
   28ee0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   28ee2:	697b      	ldr	r3, [r7, #20]
   28ee4:	2220      	movs	r2, #32
   28ee6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   28ee8:	2310      	movs	r3, #16
   28eea:	18fb      	adds	r3, r7, r3
   28eec:	881b      	ldrh	r3, [r3, #0]
   28eee:	2204      	movs	r2, #4
   28ef0:	4013      	ands	r3, r2
				if (callback_status
   28ef2:	d050      	beq.n	28f96 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   28ef4:	69bb      	ldr	r3, [r7, #24]
   28ef6:	695b      	ldr	r3, [r3, #20]
   28ef8:	69ba      	ldr	r2, [r7, #24]
   28efa:	0010      	movs	r0, r2
   28efc:	4798      	blx	r3
   28efe:	e04a      	b.n	28f96 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   28f00:	697b      	ldr	r3, [r7, #20]
   28f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   28f04:	b29a      	uxth	r2, r3
   28f06:	230e      	movs	r3, #14
   28f08:	18fb      	adds	r3, r7, r3
   28f0a:	05d2      	lsls	r2, r2, #23
   28f0c:	0dd2      	lsrs	r2, r2, #23
   28f0e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   28f10:	69bb      	ldr	r3, [r7, #24]
   28f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28f14:	220e      	movs	r2, #14
   28f16:	18ba      	adds	r2, r7, r2
   28f18:	8812      	ldrh	r2, [r2, #0]
   28f1a:	b2d2      	uxtb	r2, r2
   28f1c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   28f1e:	69bb      	ldr	r3, [r7, #24]
   28f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28f22:	1c5a      	adds	r2, r3, #1
   28f24:	69bb      	ldr	r3, [r7, #24]
   28f26:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28f28:	69bb      	ldr	r3, [r7, #24]
   28f2a:	795b      	ldrb	r3, [r3, #5]
   28f2c:	2b01      	cmp	r3, #1
   28f2e:	d10d      	bne.n	28f4c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   28f30:	69bb      	ldr	r3, [r7, #24]
   28f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28f34:	220e      	movs	r2, #14
   28f36:	18ba      	adds	r2, r7, r2
   28f38:	8812      	ldrh	r2, [r2, #0]
   28f3a:	0a12      	lsrs	r2, r2, #8
   28f3c:	b292      	uxth	r2, r2
   28f3e:	b2d2      	uxtb	r2, r2
   28f40:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   28f42:	69bb      	ldr	r3, [r7, #24]
   28f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28f46:	1c5a      	adds	r2, r3, #1
   28f48:	69bb      	ldr	r3, [r7, #24]
   28f4a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   28f4c:	69bb      	ldr	r3, [r7, #24]
   28f4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28f50:	b29b      	uxth	r3, r3
   28f52:	3b01      	subs	r3, #1
   28f54:	b29b      	uxth	r3, r3
   28f56:	69ba      	ldr	r2, [r7, #24]
   28f58:	1c19      	adds	r1, r3, #0
   28f5a:	8591      	strh	r1, [r2, #44]	; 0x2c
   28f5c:	2b00      	cmp	r3, #0
   28f5e:	d11a      	bne.n	28f96 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28f60:	697b      	ldr	r3, [r7, #20]
   28f62:	2204      	movs	r2, #4
   28f64:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   28f66:	69bb      	ldr	r3, [r7, #24]
   28f68:	2232      	movs	r2, #50	; 0x32
   28f6a:	2100      	movs	r1, #0
   28f6c:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   28f6e:	2310      	movs	r3, #16
   28f70:	18fb      	adds	r3, r7, r3
   28f72:	881b      	ldrh	r3, [r3, #0]
   28f74:	2202      	movs	r2, #2
   28f76:	4013      	ands	r3, r2
					if (callback_status
   28f78:	d00d      	beq.n	28f96 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   28f7a:	69bb      	ldr	r3, [r7, #24]
   28f7c:	691b      	ldr	r3, [r3, #16]
   28f7e:	69ba      	ldr	r2, [r7, #24]
   28f80:	0010      	movs	r0, r2
   28f82:	4798      	blx	r3
   28f84:	e007      	b.n	28f96 <_usart_interrupt_handler+0x2ae>
   28f86:	46c0      	nop			; (mov r8, r8)
   28f88:	20005a60 	.word	0x20005a60
   28f8c:	00028ac9 	.word	0x00028ac9
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28f90:	697b      	ldr	r3, [r7, #20]
   28f92:	2204      	movs	r2, #4
   28f94:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   28f96:	2312      	movs	r3, #18
   28f98:	18fb      	adds	r3, r7, r3
   28f9a:	881b      	ldrh	r3, [r3, #0]
   28f9c:	2210      	movs	r2, #16
   28f9e:	4013      	ands	r3, r2
   28fa0:	d010      	beq.n	28fc4 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   28fa2:	697b      	ldr	r3, [r7, #20]
   28fa4:	2210      	movs	r2, #16
   28fa6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   28fa8:	697b      	ldr	r3, [r7, #20]
   28faa:	2210      	movs	r2, #16
   28fac:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   28fae:	2310      	movs	r3, #16
   28fb0:	18fb      	adds	r3, r7, r3
   28fb2:	881b      	ldrh	r3, [r3, #0]
   28fb4:	2210      	movs	r2, #16
   28fb6:	4013      	ands	r3, r2
   28fb8:	d004      	beq.n	28fc4 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   28fba:	69bb      	ldr	r3, [r7, #24]
   28fbc:	69db      	ldr	r3, [r3, #28]
   28fbe:	69ba      	ldr	r2, [r7, #24]
   28fc0:	0010      	movs	r0, r2
   28fc2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   28fc4:	2312      	movs	r3, #18
   28fc6:	18fb      	adds	r3, r7, r3
   28fc8:	881b      	ldrh	r3, [r3, #0]
   28fca:	2220      	movs	r2, #32
   28fcc:	4013      	ands	r3, r2
   28fce:	d010      	beq.n	28ff2 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   28fd0:	697b      	ldr	r3, [r7, #20]
   28fd2:	2220      	movs	r2, #32
   28fd4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   28fd6:	697b      	ldr	r3, [r7, #20]
   28fd8:	2220      	movs	r2, #32
   28fda:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   28fdc:	2310      	movs	r3, #16
   28fde:	18fb      	adds	r3, r7, r3
   28fe0:	881b      	ldrh	r3, [r3, #0]
   28fe2:	2208      	movs	r2, #8
   28fe4:	4013      	ands	r3, r2
   28fe6:	d004      	beq.n	28ff2 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   28fe8:	69bb      	ldr	r3, [r7, #24]
   28fea:	699b      	ldr	r3, [r3, #24]
   28fec:	69ba      	ldr	r2, [r7, #24]
   28fee:	0010      	movs	r0, r2
   28ff0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   28ff2:	2312      	movs	r3, #18
   28ff4:	18fb      	adds	r3, r7, r3
   28ff6:	881b      	ldrh	r3, [r3, #0]
   28ff8:	2208      	movs	r2, #8
   28ffa:	4013      	ands	r3, r2
   28ffc:	d010      	beq.n	29020 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   28ffe:	697b      	ldr	r3, [r7, #20]
   29000:	2208      	movs	r2, #8
   29002:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   29004:	697b      	ldr	r3, [r7, #20]
   29006:	2208      	movs	r2, #8
   29008:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2900a:	2310      	movs	r3, #16
   2900c:	18fb      	adds	r3, r7, r3
   2900e:	881b      	ldrh	r3, [r3, #0]
   29010:	2220      	movs	r2, #32
   29012:	4013      	ands	r3, r2
   29014:	d004      	beq.n	29020 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   29016:	69bb      	ldr	r3, [r7, #24]
   29018:	6a1b      	ldr	r3, [r3, #32]
   2901a:	69ba      	ldr	r2, [r7, #24]
   2901c:	0010      	movs	r0, r2
   2901e:	4798      	blx	r3
		}
	}
#endif
}
   29020:	46c0      	nop			; (mov r8, r8)
   29022:	46bd      	mov	sp, r7
   29024:	b008      	add	sp, #32
   29026:	bd80      	pop	{r7, pc}

00029028 <system_gclk_gen_get_config_defaults>:
{
   29028:	b580      	push	{r7, lr}
   2902a:	b082      	sub	sp, #8
   2902c:	af00      	add	r7, sp, #0
   2902e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   29030:	687b      	ldr	r3, [r7, #4]
   29032:	2201      	movs	r2, #1
   29034:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   29036:	687b      	ldr	r3, [r7, #4]
   29038:	2200      	movs	r2, #0
   2903a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   2903c:	687b      	ldr	r3, [r7, #4]
   2903e:	2206      	movs	r2, #6
   29040:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   29042:	687b      	ldr	r3, [r7, #4]
   29044:	2200      	movs	r2, #0
   29046:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   29048:	687b      	ldr	r3, [r7, #4]
   2904a:	2200      	movs	r2, #0
   2904c:	725a      	strb	r2, [r3, #9]
}
   2904e:	46c0      	nop			; (mov r8, r8)
   29050:	46bd      	mov	sp, r7
   29052:	b002      	add	sp, #8
   29054:	bd80      	pop	{r7, pc}

00029056 <system_gclk_chan_get_config_defaults>:
{
   29056:	b580      	push	{r7, lr}
   29058:	b082      	sub	sp, #8
   2905a:	af00      	add	r7, sp, #0
   2905c:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2905e:	687b      	ldr	r3, [r7, #4]
   29060:	2200      	movs	r2, #0
   29062:	701a      	strb	r2, [r3, #0]
}
   29064:	46c0      	nop			; (mov r8, r8)
   29066:	46bd      	mov	sp, r7
   29068:	b002      	add	sp, #8
   2906a:	bd80      	pop	{r7, pc}

0002906c <system_clock_source_osc8m_get_config_defaults>:
{
   2906c:	b580      	push	{r7, lr}
   2906e:	b082      	sub	sp, #8
   29070:	af00      	add	r7, sp, #0
   29072:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   29074:	687b      	ldr	r3, [r7, #4]
   29076:	2203      	movs	r2, #3
   29078:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2907a:	687b      	ldr	r3, [r7, #4]
   2907c:	2200      	movs	r2, #0
   2907e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   29080:	687b      	ldr	r3, [r7, #4]
   29082:	2201      	movs	r2, #1
   29084:	709a      	strb	r2, [r3, #2]
}
   29086:	46c0      	nop			; (mov r8, r8)
   29088:	46bd      	mov	sp, r7
   2908a:	b002      	add	sp, #8
   2908c:	bd80      	pop	{r7, pc}
	...

00029090 <system_cpu_clock_set_divider>:
{
   29090:	b580      	push	{r7, lr}
   29092:	b082      	sub	sp, #8
   29094:	af00      	add	r7, sp, #0
   29096:	0002      	movs	r2, r0
   29098:	1dfb      	adds	r3, r7, #7
   2909a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   2909c:	4a03      	ldr	r2, [pc, #12]	; (290ac <system_cpu_clock_set_divider+0x1c>)
   2909e:	1dfb      	adds	r3, r7, #7
   290a0:	781b      	ldrb	r3, [r3, #0]
   290a2:	7213      	strb	r3, [r2, #8]
}
   290a4:	46c0      	nop			; (mov r8, r8)
   290a6:	46bd      	mov	sp, r7
   290a8:	b002      	add	sp, #8
   290aa:	bd80      	pop	{r7, pc}
   290ac:	40000400 	.word	0x40000400

000290b0 <system_apb_clock_set_divider>:
{
   290b0:	b580      	push	{r7, lr}
   290b2:	b082      	sub	sp, #8
   290b4:	af00      	add	r7, sp, #0
   290b6:	0002      	movs	r2, r0
   290b8:	1dfb      	adds	r3, r7, #7
   290ba:	701a      	strb	r2, [r3, #0]
   290bc:	1dbb      	adds	r3, r7, #6
   290be:	1c0a      	adds	r2, r1, #0
   290c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   290c2:	1dfb      	adds	r3, r7, #7
   290c4:	781b      	ldrb	r3, [r3, #0]
   290c6:	2b01      	cmp	r3, #1
   290c8:	d008      	beq.n	290dc <system_apb_clock_set_divider+0x2c>
   290ca:	2b02      	cmp	r3, #2
   290cc:	d00b      	beq.n	290e6 <system_apb_clock_set_divider+0x36>
   290ce:	2b00      	cmp	r3, #0
   290d0:	d10e      	bne.n	290f0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   290d2:	4a0b      	ldr	r2, [pc, #44]	; (29100 <system_apb_clock_set_divider+0x50>)
   290d4:	1dbb      	adds	r3, r7, #6
   290d6:	781b      	ldrb	r3, [r3, #0]
   290d8:	7253      	strb	r3, [r2, #9]
			break;
   290da:	e00b      	b.n	290f4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   290dc:	4a08      	ldr	r2, [pc, #32]	; (29100 <system_apb_clock_set_divider+0x50>)
   290de:	1dbb      	adds	r3, r7, #6
   290e0:	781b      	ldrb	r3, [r3, #0]
   290e2:	7293      	strb	r3, [r2, #10]
			break;
   290e4:	e006      	b.n	290f4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   290e6:	4a06      	ldr	r2, [pc, #24]	; (29100 <system_apb_clock_set_divider+0x50>)
   290e8:	1dbb      	adds	r3, r7, #6
   290ea:	781b      	ldrb	r3, [r3, #0]
   290ec:	72d3      	strb	r3, [r2, #11]
			break;
   290ee:	e001      	b.n	290f4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   290f0:	2317      	movs	r3, #23
   290f2:	e000      	b.n	290f6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   290f4:	2300      	movs	r3, #0
}
   290f6:	0018      	movs	r0, r3
   290f8:	46bd      	mov	sp, r7
   290fa:	b002      	add	sp, #8
   290fc:	bd80      	pop	{r7, pc}
   290fe:	46c0      	nop			; (mov r8, r8)
   29100:	40000400 	.word	0x40000400

00029104 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   29104:	b580      	push	{r7, lr}
   29106:	b082      	sub	sp, #8
   29108:	af00      	add	r7, sp, #0
   2910a:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   2910c:	687b      	ldr	r3, [r7, #4]
   2910e:	2201      	movs	r2, #1
   29110:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   29112:	687b      	ldr	r3, [r7, #4]
   29114:	2200      	movs	r2, #0
   29116:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   29118:	687b      	ldr	r3, [r7, #4]
   2911a:	2200      	movs	r2, #0
   2911c:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   2911e:	687b      	ldr	r3, [r7, #4]
   29120:	2200      	movs	r2, #0
   29122:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   29124:	687b      	ldr	r3, [r7, #4]
   29126:	2200      	movs	r2, #0
   29128:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2912a:	687b      	ldr	r3, [r7, #4]
   2912c:	4a0a      	ldr	r2, [pc, #40]	; (29158 <system_clock_source_dpll_get_config_defaults+0x54>)
   2912e:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   29130:	687b      	ldr	r3, [r7, #4]
   29132:	2280      	movs	r2, #128	; 0x80
   29134:	0212      	lsls	r2, r2, #8
   29136:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   29138:	687b      	ldr	r3, [r7, #4]
   2913a:	2201      	movs	r2, #1
   2913c:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   2913e:	687b      	ldr	r3, [r7, #4]
   29140:	2200      	movs	r2, #0
   29142:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   29144:	687b      	ldr	r3, [r7, #4]
   29146:	2200      	movs	r2, #0
   29148:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2914a:	687b      	ldr	r3, [r7, #4]
   2914c:	2200      	movs	r2, #0
   2914e:	749a      	strb	r2, [r3, #18]
};
   29150:	46c0      	nop			; (mov r8, r8)
   29152:	46bd      	mov	sp, r7
   29154:	b002      	add	sp, #8
   29156:	bd80      	pop	{r7, pc}
   29158:	02dc6c00 	.word	0x02dc6c00

0002915c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   2915c:	b580      	push	{r7, lr}
   2915e:	b082      	sub	sp, #8
   29160:	af00      	add	r7, sp, #0
   29162:	0002      	movs	r2, r0
   29164:	1dfb      	adds	r3, r7, #7
   29166:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   29168:	4a08      	ldr	r2, [pc, #32]	; (2918c <system_flash_set_waitstates+0x30>)
   2916a:	1dfb      	adds	r3, r7, #7
   2916c:	781b      	ldrb	r3, [r3, #0]
   2916e:	210f      	movs	r1, #15
   29170:	400b      	ands	r3, r1
   29172:	b2d9      	uxtb	r1, r3
   29174:	6853      	ldr	r3, [r2, #4]
   29176:	200f      	movs	r0, #15
   29178:	4001      	ands	r1, r0
   2917a:	0049      	lsls	r1, r1, #1
   2917c:	201e      	movs	r0, #30
   2917e:	4383      	bics	r3, r0
   29180:	430b      	orrs	r3, r1
   29182:	6053      	str	r3, [r2, #4]
}
   29184:	46c0      	nop			; (mov r8, r8)
   29186:	46bd      	mov	sp, r7
   29188:	b002      	add	sp, #8
   2918a:	bd80      	pop	{r7, pc}
   2918c:	41004000 	.word	0x41004000

00029190 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   29190:	b580      	push	{r7, lr}
   29192:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   29194:	46c0      	nop			; (mov r8, r8)
   29196:	4b04      	ldr	r3, [pc, #16]	; (291a8 <_system_dfll_wait_for_sync+0x18>)
   29198:	68db      	ldr	r3, [r3, #12]
   2919a:	2210      	movs	r2, #16
   2919c:	4013      	ands	r3, r2
   2919e:	d0fa      	beq.n	29196 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   291a0:	46c0      	nop			; (mov r8, r8)
   291a2:	46bd      	mov	sp, r7
   291a4:	bd80      	pop	{r7, pc}
   291a6:	46c0      	nop			; (mov r8, r8)
   291a8:	40000800 	.word	0x40000800

000291ac <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   291ac:	b580      	push	{r7, lr}
   291ae:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   291b0:	4b0c      	ldr	r3, [pc, #48]	; (291e4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   291b2:	2202      	movs	r2, #2
   291b4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   291b6:	4b0c      	ldr	r3, [pc, #48]	; (291e8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   291b8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   291ba:	4a0a      	ldr	r2, [pc, #40]	; (291e4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   291bc:	4b0b      	ldr	r3, [pc, #44]	; (291ec <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   291be:	689b      	ldr	r3, [r3, #8]
   291c0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   291c2:	4a08      	ldr	r2, [pc, #32]	; (291e4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   291c4:	4b09      	ldr	r3, [pc, #36]	; (291ec <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   291c6:	685b      	ldr	r3, [r3, #4]
   291c8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   291ca:	4b06      	ldr	r3, [pc, #24]	; (291e4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   291cc:	2200      	movs	r2, #0
   291ce:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   291d0:	4b05      	ldr	r3, [pc, #20]	; (291e8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   291d2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   291d4:	4a03      	ldr	r2, [pc, #12]	; (291e4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   291d6:	4b05      	ldr	r3, [pc, #20]	; (291ec <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   291d8:	681b      	ldr	r3, [r3, #0]
   291da:	b29b      	uxth	r3, r3
   291dc:	8493      	strh	r3, [r2, #36]	; 0x24
}
   291de:	46c0      	nop			; (mov r8, r8)
   291e0:	46bd      	mov	sp, r7
   291e2:	bd80      	pop	{r7, pc}
   291e4:	40000800 	.word	0x40000800
   291e8:	00029191 	.word	0x00029191
   291ec:	20004180 	.word	0x20004180

000291f0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   291f0:	b580      	push	{r7, lr}
   291f2:	b082      	sub	sp, #8
   291f4:	af00      	add	r7, sp, #0
   291f6:	0002      	movs	r2, r0
   291f8:	1dfb      	adds	r3, r7, #7
   291fa:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   291fc:	1dfb      	adds	r3, r7, #7
   291fe:	781b      	ldrb	r3, [r3, #0]
   29200:	2b08      	cmp	r3, #8
   29202:	d841      	bhi.n	29288 <system_clock_source_get_hz+0x98>
   29204:	009a      	lsls	r2, r3, #2
   29206:	4b23      	ldr	r3, [pc, #140]	; (29294 <system_clock_source_get_hz+0xa4>)
   29208:	18d3      	adds	r3, r2, r3
   2920a:	681b      	ldr	r3, [r3, #0]
   2920c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2920e:	4b22      	ldr	r3, [pc, #136]	; (29298 <system_clock_source_get_hz+0xa8>)
   29210:	691b      	ldr	r3, [r3, #16]
   29212:	e03a      	b.n	2928a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   29214:	4b21      	ldr	r3, [pc, #132]	; (2929c <system_clock_source_get_hz+0xac>)
   29216:	6a1b      	ldr	r3, [r3, #32]
   29218:	059b      	lsls	r3, r3, #22
   2921a:	0f9b      	lsrs	r3, r3, #30
   2921c:	b2db      	uxtb	r3, r3
   2921e:	001a      	movs	r2, r3
   29220:	4b1f      	ldr	r3, [pc, #124]	; (292a0 <system_clock_source_get_hz+0xb0>)
   29222:	40d3      	lsrs	r3, r2
   29224:	e031      	b.n	2928a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   29226:	2380      	movs	r3, #128	; 0x80
   29228:	021b      	lsls	r3, r3, #8
   2922a:	e02e      	b.n	2928a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2922c:	2380      	movs	r3, #128	; 0x80
   2922e:	021b      	lsls	r3, r3, #8
   29230:	e02b      	b.n	2928a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   29232:	4b19      	ldr	r3, [pc, #100]	; (29298 <system_clock_source_get_hz+0xa8>)
   29234:	695b      	ldr	r3, [r3, #20]
   29236:	e028      	b.n	2928a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   29238:	4b17      	ldr	r3, [pc, #92]	; (29298 <system_clock_source_get_hz+0xa8>)
   2923a:	681b      	ldr	r3, [r3, #0]
   2923c:	2202      	movs	r2, #2
   2923e:	4013      	ands	r3, r2
   29240:	d101      	bne.n	29246 <system_clock_source_get_hz+0x56>
			return 0;
   29242:	2300      	movs	r3, #0
   29244:	e021      	b.n	2928a <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   29246:	4b17      	ldr	r3, [pc, #92]	; (292a4 <system_clock_source_get_hz+0xb4>)
   29248:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2924a:	4b13      	ldr	r3, [pc, #76]	; (29298 <system_clock_source_get_hz+0xa8>)
   2924c:	681b      	ldr	r3, [r3, #0]
   2924e:	2224      	movs	r2, #36	; 0x24
   29250:	4013      	ands	r3, r2
   29252:	2b04      	cmp	r3, #4
   29254:	d109      	bne.n	2926a <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   29256:	2000      	movs	r0, #0
   29258:	4b13      	ldr	r3, [pc, #76]	; (292a8 <system_clock_source_get_hz+0xb8>)
   2925a:	4798      	blx	r3
   2925c:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2925e:	4b0e      	ldr	r3, [pc, #56]	; (29298 <system_clock_source_get_hz+0xa8>)
   29260:	689b      	ldr	r3, [r3, #8]
   29262:	041b      	lsls	r3, r3, #16
   29264:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   29266:	4353      	muls	r3, r2
   29268:	e00f      	b.n	2928a <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2926a:	4b10      	ldr	r3, [pc, #64]	; (292ac <system_clock_source_get_hz+0xbc>)
   2926c:	e00d      	b.n	2928a <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2926e:	4a0b      	ldr	r2, [pc, #44]	; (2929c <system_clock_source_get_hz+0xac>)
   29270:	2350      	movs	r3, #80	; 0x50
   29272:	5cd3      	ldrb	r3, [r2, r3]
   29274:	b2db      	uxtb	r3, r3
   29276:	001a      	movs	r2, r3
   29278:	2304      	movs	r3, #4
   2927a:	4013      	ands	r3, r2
   2927c:	d101      	bne.n	29282 <system_clock_source_get_hz+0x92>
			return 0;
   2927e:	2300      	movs	r3, #0
   29280:	e003      	b.n	2928a <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   29282:	4b05      	ldr	r3, [pc, #20]	; (29298 <system_clock_source_get_hz+0xa8>)
   29284:	68db      	ldr	r3, [r3, #12]
   29286:	e000      	b.n	2928a <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   29288:	2300      	movs	r3, #0
	}
}
   2928a:	0018      	movs	r0, r3
   2928c:	46bd      	mov	sp, r7
   2928e:	b002      	add	sp, #8
   29290:	bd80      	pop	{r7, pc}
   29292:	46c0      	nop			; (mov r8, r8)
   29294:	000391e4 	.word	0x000391e4
   29298:	20004180 	.word	0x20004180
   2929c:	40000800 	.word	0x40000800
   292a0:	007a1200 	.word	0x007a1200
   292a4:	00029191 	.word	0x00029191
   292a8:	00029c8d 	.word	0x00029c8d
   292ac:	02dc6c00 	.word	0x02dc6c00

000292b0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   292b0:	b580      	push	{r7, lr}
   292b2:	b084      	sub	sp, #16
   292b4:	af00      	add	r7, sp, #0
   292b6:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   292b8:	4b1a      	ldr	r3, [pc, #104]	; (29324 <system_clock_source_osc8m_set_config+0x74>)
   292ba:	6a1b      	ldr	r3, [r3, #32]
   292bc:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   292be:	687b      	ldr	r3, [r7, #4]
   292c0:	781b      	ldrb	r3, [r3, #0]
   292c2:	1c1a      	adds	r2, r3, #0
   292c4:	2303      	movs	r3, #3
   292c6:	4013      	ands	r3, r2
   292c8:	b2da      	uxtb	r2, r3
   292ca:	230d      	movs	r3, #13
   292cc:	18fb      	adds	r3, r7, r3
   292ce:	2103      	movs	r1, #3
   292d0:	400a      	ands	r2, r1
   292d2:	0010      	movs	r0, r2
   292d4:	781a      	ldrb	r2, [r3, #0]
   292d6:	2103      	movs	r1, #3
   292d8:	438a      	bics	r2, r1
   292da:	1c11      	adds	r1, r2, #0
   292dc:	1c02      	adds	r2, r0, #0
   292de:	430a      	orrs	r2, r1
   292e0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   292e2:	687b      	ldr	r3, [r7, #4]
   292e4:	789a      	ldrb	r2, [r3, #2]
   292e6:	230c      	movs	r3, #12
   292e8:	18fb      	adds	r3, r7, r3
   292ea:	01d0      	lsls	r0, r2, #7
   292ec:	781a      	ldrb	r2, [r3, #0]
   292ee:	217f      	movs	r1, #127	; 0x7f
   292f0:	400a      	ands	r2, r1
   292f2:	1c11      	adds	r1, r2, #0
   292f4:	1c02      	adds	r2, r0, #0
   292f6:	430a      	orrs	r2, r1
   292f8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   292fa:	687b      	ldr	r3, [r7, #4]
   292fc:	785a      	ldrb	r2, [r3, #1]
   292fe:	230c      	movs	r3, #12
   29300:	18fb      	adds	r3, r7, r3
   29302:	2101      	movs	r1, #1
   29304:	400a      	ands	r2, r1
   29306:	0190      	lsls	r0, r2, #6
   29308:	781a      	ldrb	r2, [r3, #0]
   2930a:	2140      	movs	r1, #64	; 0x40
   2930c:	438a      	bics	r2, r1
   2930e:	1c11      	adds	r1, r2, #0
   29310:	1c02      	adds	r2, r0, #0
   29312:	430a      	orrs	r2, r1
   29314:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   29316:	4b03      	ldr	r3, [pc, #12]	; (29324 <system_clock_source_osc8m_set_config+0x74>)
   29318:	68fa      	ldr	r2, [r7, #12]
   2931a:	621a      	str	r2, [r3, #32]
}
   2931c:	46c0      	nop			; (mov r8, r8)
   2931e:	46bd      	mov	sp, r7
   29320:	b004      	add	sp, #16
   29322:	bd80      	pop	{r7, pc}
   29324:	40000800 	.word	0x40000800

00029328 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   29328:	b580      	push	{r7, lr}
   2932a:	b086      	sub	sp, #24
   2932c:	af00      	add	r7, sp, #0
   2932e:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   29330:	687b      	ldr	r3, [r7, #4]
   29332:	68db      	ldr	r3, [r3, #12]
   29334:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   29336:	687b      	ldr	r3, [r7, #4]
   29338:	7d1b      	ldrb	r3, [r3, #20]
   2933a:	2b01      	cmp	r3, #1
   2933c:	d10a      	bne.n	29354 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2933e:	687b      	ldr	r3, [r7, #4]
   29340:	8a1b      	ldrh	r3, [r3, #16]
   29342:	3301      	adds	r3, #1
   29344:	005b      	lsls	r3, r3, #1
   29346:	001a      	movs	r2, r3
   29348:	4b36      	ldr	r3, [pc, #216]	; (29424 <system_clock_source_dpll_set_config+0xfc>)
   2934a:	0011      	movs	r1, r2
   2934c:	6978      	ldr	r0, [r7, #20]
   2934e:	4798      	blx	r3
   29350:	0003      	movs	r3, r0
   29352:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   29354:	687b      	ldr	r3, [r7, #4]
   29356:	689b      	ldr	r3, [r3, #8]
   29358:	011a      	lsls	r2, r3, #4
   2935a:	4b32      	ldr	r3, [pc, #200]	; (29424 <system_clock_source_dpll_set_config+0xfc>)
   2935c:	6979      	ldr	r1, [r7, #20]
   2935e:	0010      	movs	r0, r2
   29360:	4798      	blx	r3
   29362:	0003      	movs	r3, r0
   29364:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   29366:	693b      	ldr	r3, [r7, #16]
   29368:	b2da      	uxtb	r2, r3
   2936a:	230f      	movs	r3, #15
   2936c:	18fb      	adds	r3, r7, r3
   2936e:	210f      	movs	r1, #15
   29370:	400a      	ands	r2, r1
   29372:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   29374:	693b      	ldr	r3, [r7, #16]
   29376:	091b      	lsrs	r3, r3, #4
   29378:	3b01      	subs	r3, #1
   2937a:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2937c:	492a      	ldr	r1, [pc, #168]	; (29428 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2937e:	687b      	ldr	r3, [r7, #4]
   29380:	781b      	ldrb	r3, [r3, #0]
   29382:	01db      	lsls	r3, r3, #7
   29384:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   29386:	687b      	ldr	r3, [r7, #4]
   29388:	785b      	ldrb	r3, [r3, #1]
   2938a:	019b      	lsls	r3, r3, #6
   2938c:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2938e:	4313      	orrs	r3, r2
   29390:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   29392:	2344      	movs	r3, #68	; 0x44
   29394:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   29396:	4b24      	ldr	r3, [pc, #144]	; (29428 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   29398:	220f      	movs	r2, #15
   2939a:	18ba      	adds	r2, r7, r2
   2939c:	7812      	ldrb	r2, [r2, #0]
   2939e:	0412      	lsls	r2, r2, #16
   293a0:	0011      	movs	r1, r2
   293a2:	22f0      	movs	r2, #240	; 0xf0
   293a4:	0312      	lsls	r2, r2, #12
   293a6:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   293a8:	693a      	ldr	r2, [r7, #16]
   293aa:	0512      	lsls	r2, r2, #20
   293ac:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   293ae:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   293b0:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   293b2:	4b1d      	ldr	r3, [pc, #116]	; (29428 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   293b4:	687a      	ldr	r2, [r7, #4]
   293b6:	8a12      	ldrh	r2, [r2, #16]
   293b8:	0412      	lsls	r2, r2, #16
   293ba:	0011      	movs	r1, r2
   293bc:	4a1b      	ldr	r2, [pc, #108]	; (2942c <system_clock_source_dpll_set_config+0x104>)
   293be:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   293c0:	687a      	ldr	r2, [r7, #4]
   293c2:	7892      	ldrb	r2, [r2, #2]
   293c4:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   293c6:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   293c8:	687a      	ldr	r2, [r7, #4]
   293ca:	7cd2      	ldrb	r2, [r2, #19]
   293cc:	0212      	lsls	r2, r2, #8
   293ce:	0010      	movs	r0, r2
   293d0:	22e0      	movs	r2, #224	; 0xe0
   293d2:	00d2      	lsls	r2, r2, #3
   293d4:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   293d6:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   293d8:	687a      	ldr	r2, [r7, #4]
   293da:	7d12      	ldrb	r2, [r2, #20]
   293dc:	0112      	lsls	r2, r2, #4
   293de:	0010      	movs	r0, r2
   293e0:	2230      	movs	r2, #48	; 0x30
   293e2:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   293e4:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   293e6:	687a      	ldr	r2, [r7, #4]
   293e8:	78d2      	ldrb	r2, [r2, #3]
   293ea:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   293ec:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   293ee:	687a      	ldr	r2, [r7, #4]
   293f0:	7912      	ldrb	r2, [r2, #4]
   293f2:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   293f4:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   293f6:	687a      	ldr	r2, [r7, #4]
   293f8:	7c92      	ldrb	r2, [r2, #18]
   293fa:	0010      	movs	r0, r2
   293fc:	2203      	movs	r2, #3
   293fe:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29400:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   29402:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   29404:	693b      	ldr	r3, [r7, #16]
   29406:	3301      	adds	r3, #1
   29408:	011a      	lsls	r2, r3, #4
   2940a:	230f      	movs	r3, #15
   2940c:	18fb      	adds	r3, r7, r3
   2940e:	781b      	ldrb	r3, [r3, #0]
   29410:	18d3      	adds	r3, r2, r3
   29412:	697a      	ldr	r2, [r7, #20]
   29414:	4353      	muls	r3, r2
   29416:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   29418:	4b05      	ldr	r3, [pc, #20]	; (29430 <system_clock_source_dpll_set_config+0x108>)
   2941a:	60da      	str	r2, [r3, #12]
}
   2941c:	46c0      	nop			; (mov r8, r8)
   2941e:	46bd      	mov	sp, r7
   29420:	b006      	add	sp, #24
   29422:	bd80      	pop	{r7, pc}
   29424:	00032705 	.word	0x00032705
   29428:	40000800 	.word	0x40000800
   2942c:	07ff0000 	.word	0x07ff0000
   29430:	20004180 	.word	0x20004180

00029434 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   29434:	b580      	push	{r7, lr}
   29436:	b082      	sub	sp, #8
   29438:	af00      	add	r7, sp, #0
   2943a:	0002      	movs	r2, r0
   2943c:	1dfb      	adds	r3, r7, #7
   2943e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   29440:	1dfb      	adds	r3, r7, #7
   29442:	781b      	ldrb	r3, [r3, #0]
   29444:	2b08      	cmp	r3, #8
   29446:	d83b      	bhi.n	294c0 <system_clock_source_enable+0x8c>
   29448:	009a      	lsls	r2, r3, #2
   2944a:	4b21      	ldr	r3, [pc, #132]	; (294d0 <system_clock_source_enable+0x9c>)
   2944c:	18d3      	adds	r3, r2, r3
   2944e:	681b      	ldr	r3, [r3, #0]
   29450:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   29452:	4b20      	ldr	r3, [pc, #128]	; (294d4 <system_clock_source_enable+0xa0>)
   29454:	4a1f      	ldr	r2, [pc, #124]	; (294d4 <system_clock_source_enable+0xa0>)
   29456:	6a12      	ldr	r2, [r2, #32]
   29458:	2102      	movs	r1, #2
   2945a:	430a      	orrs	r2, r1
   2945c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2945e:	2300      	movs	r3, #0
   29460:	e031      	b.n	294c6 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   29462:	4b1c      	ldr	r3, [pc, #112]	; (294d4 <system_clock_source_enable+0xa0>)
   29464:	4a1b      	ldr	r2, [pc, #108]	; (294d4 <system_clock_source_enable+0xa0>)
   29466:	6992      	ldr	r2, [r2, #24]
   29468:	2102      	movs	r1, #2
   2946a:	430a      	orrs	r2, r1
   2946c:	619a      	str	r2, [r3, #24]
		break;
   2946e:	e029      	b.n	294c4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   29470:	4a18      	ldr	r2, [pc, #96]	; (294d4 <system_clock_source_enable+0xa0>)
   29472:	4b18      	ldr	r3, [pc, #96]	; (294d4 <system_clock_source_enable+0xa0>)
   29474:	8a1b      	ldrh	r3, [r3, #16]
   29476:	b29b      	uxth	r3, r3
   29478:	2102      	movs	r1, #2
   2947a:	430b      	orrs	r3, r1
   2947c:	b29b      	uxth	r3, r3
   2947e:	8213      	strh	r3, [r2, #16]
		break;
   29480:	e020      	b.n	294c4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   29482:	4a14      	ldr	r2, [pc, #80]	; (294d4 <system_clock_source_enable+0xa0>)
   29484:	4b13      	ldr	r3, [pc, #76]	; (294d4 <system_clock_source_enable+0xa0>)
   29486:	8a9b      	ldrh	r3, [r3, #20]
   29488:	b29b      	uxth	r3, r3
   2948a:	2102      	movs	r1, #2
   2948c:	430b      	orrs	r3, r1
   2948e:	b29b      	uxth	r3, r3
   29490:	8293      	strh	r3, [r2, #20]
		break;
   29492:	e017      	b.n	294c4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   29494:	4b10      	ldr	r3, [pc, #64]	; (294d8 <system_clock_source_enable+0xa4>)
   29496:	681b      	ldr	r3, [r3, #0]
   29498:	2202      	movs	r2, #2
   2949a:	431a      	orrs	r2, r3
   2949c:	4b0e      	ldr	r3, [pc, #56]	; (294d8 <system_clock_source_enable+0xa4>)
   2949e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   294a0:	4b0e      	ldr	r3, [pc, #56]	; (294dc <system_clock_source_enable+0xa8>)
   294a2:	4798      	blx	r3
		break;
   294a4:	e00e      	b.n	294c4 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   294a6:	4a0b      	ldr	r2, [pc, #44]	; (294d4 <system_clock_source_enable+0xa0>)
   294a8:	490a      	ldr	r1, [pc, #40]	; (294d4 <system_clock_source_enable+0xa0>)
   294aa:	2344      	movs	r3, #68	; 0x44
   294ac:	5ccb      	ldrb	r3, [r1, r3]
   294ae:	b2db      	uxtb	r3, r3
   294b0:	2102      	movs	r1, #2
   294b2:	430b      	orrs	r3, r1
   294b4:	b2d9      	uxtb	r1, r3
   294b6:	2344      	movs	r3, #68	; 0x44
   294b8:	54d1      	strb	r1, [r2, r3]
		break;
   294ba:	e003      	b.n	294c4 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   294bc:	2300      	movs	r3, #0
   294be:	e002      	b.n	294c6 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   294c0:	2317      	movs	r3, #23
   294c2:	e000      	b.n	294c6 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   294c4:	2300      	movs	r3, #0
}
   294c6:	0018      	movs	r0, r3
   294c8:	46bd      	mov	sp, r7
   294ca:	b002      	add	sp, #8
   294cc:	bd80      	pop	{r7, pc}
   294ce:	46c0      	nop			; (mov r8, r8)
   294d0:	00039208 	.word	0x00039208
   294d4:	40000800 	.word	0x40000800
   294d8:	20004180 	.word	0x20004180
   294dc:	000291ad 	.word	0x000291ad

000294e0 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   294e0:	b580      	push	{r7, lr}
   294e2:	b084      	sub	sp, #16
   294e4:	af00      	add	r7, sp, #0
   294e6:	0002      	movs	r2, r0
   294e8:	1dfb      	adds	r3, r7, #7
   294ea:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   294ec:	2300      	movs	r3, #0
   294ee:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   294f0:	1dfb      	adds	r3, r7, #7
   294f2:	781b      	ldrb	r3, [r3, #0]
   294f4:	2b08      	cmp	r3, #8
   294f6:	d821      	bhi.n	2953c <system_clock_source_is_ready+0x5c>
   294f8:	009a      	lsls	r2, r3, #2
   294fa:	4b18      	ldr	r3, [pc, #96]	; (2955c <system_clock_source_is_ready+0x7c>)
   294fc:	18d3      	adds	r3, r2, r3
   294fe:	681b      	ldr	r3, [r3, #0]
   29500:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   29502:	2308      	movs	r3, #8
   29504:	60fb      	str	r3, [r7, #12]
		break;
   29506:	e01b      	b.n	29540 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   29508:	2304      	movs	r3, #4
   2950a:	60fb      	str	r3, [r7, #12]
		break;
   2950c:	e018      	b.n	29540 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2950e:	2301      	movs	r3, #1
   29510:	60fb      	str	r3, [r7, #12]
		break;
   29512:	e015      	b.n	29540 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   29514:	2302      	movs	r3, #2
   29516:	60fb      	str	r3, [r7, #12]
		break;
   29518:	e012      	b.n	29540 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2951a:	2310      	movs	r3, #16
   2951c:	60fb      	str	r3, [r7, #12]
		}
		break;
   2951e:	e00f      	b.n	29540 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   29520:	4a0f      	ldr	r2, [pc, #60]	; (29560 <system_clock_source_is_ready+0x80>)
   29522:	2350      	movs	r3, #80	; 0x50
   29524:	5cd3      	ldrb	r3, [r2, r3]
   29526:	b2db      	uxtb	r3, r3
   29528:	001a      	movs	r2, r3
   2952a:	2303      	movs	r3, #3
   2952c:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2952e:	3b03      	subs	r3, #3
   29530:	425a      	negs	r2, r3
   29532:	4153      	adcs	r3, r2
   29534:	b2db      	uxtb	r3, r3
   29536:	e00c      	b.n	29552 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   29538:	2301      	movs	r3, #1
   2953a:	e00a      	b.n	29552 <system_clock_source_is_ready+0x72>

	default:
		return false;
   2953c:	2300      	movs	r3, #0
   2953e:	e008      	b.n	29552 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   29540:	4b07      	ldr	r3, [pc, #28]	; (29560 <system_clock_source_is_ready+0x80>)
   29542:	68db      	ldr	r3, [r3, #12]
   29544:	68fa      	ldr	r2, [r7, #12]
   29546:	401a      	ands	r2, r3
   29548:	68fb      	ldr	r3, [r7, #12]
   2954a:	1ad3      	subs	r3, r2, r3
   2954c:	425a      	negs	r2, r3
   2954e:	4153      	adcs	r3, r2
   29550:	b2db      	uxtb	r3, r3
}
   29552:	0018      	movs	r0, r3
   29554:	46bd      	mov	sp, r7
   29556:	b004      	add	sp, #16
   29558:	bd80      	pop	{r7, pc}
   2955a:	46c0      	nop			; (mov r8, r8)
   2955c:	0003922c 	.word	0x0003922c
   29560:	40000800 	.word	0x40000800

00029564 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   29564:	b580      	push	{r7, lr}
   29566:	b082      	sub	sp, #8
   29568:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2956a:	003b      	movs	r3, r7
   2956c:	2203      	movs	r2, #3
   2956e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29570:	2300      	movs	r3, #0
   29572:	607b      	str	r3, [r7, #4]
   29574:	e009      	b.n	2958a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   29576:	687b      	ldr	r3, [r7, #4]
   29578:	b2db      	uxtb	r3, r3
   2957a:	003a      	movs	r2, r7
   2957c:	0011      	movs	r1, r2
   2957e:	0018      	movs	r0, r3
   29580:	4b05      	ldr	r3, [pc, #20]	; (29598 <_switch_peripheral_gclk+0x34>)
   29582:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29584:	687b      	ldr	r3, [r7, #4]
   29586:	3301      	adds	r3, #1
   29588:	607b      	str	r3, [r7, #4]
   2958a:	687b      	ldr	r3, [r7, #4]
   2958c:	2b24      	cmp	r3, #36	; 0x24
   2958e:	d9f2      	bls.n	29576 <_switch_peripheral_gclk+0x12>
	}
}
   29590:	46c0      	nop			; (mov r8, r8)
   29592:	46bd      	mov	sp, r7
   29594:	b002      	add	sp, #8
   29596:	bd80      	pop	{r7, pc}
   29598:	00029b69 	.word	0x00029b69

0002959c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2959c:	b580      	push	{r7, lr}
   2959e:	b0a6      	sub	sp, #152	; 0x98
   295a0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   295a2:	4b92      	ldr	r3, [pc, #584]	; (297ec <system_clock_init+0x250>)
   295a4:	22c2      	movs	r2, #194	; 0xc2
   295a6:	00d2      	lsls	r2, r2, #3
   295a8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   295aa:	2003      	movs	r0, #3
   295ac:	4b90      	ldr	r3, [pc, #576]	; (297f0 <system_clock_init+0x254>)
   295ae:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   295b0:	4b90      	ldr	r3, [pc, #576]	; (297f4 <system_clock_init+0x258>)
   295b2:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   295b4:	2394      	movs	r3, #148	; 0x94
   295b6:	18fb      	adds	r3, r7, r3
   295b8:	0018      	movs	r0, r3
   295ba:	4b8f      	ldr	r3, [pc, #572]	; (297f8 <system_clock_init+0x25c>)
   295bc:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   295be:	2394      	movs	r3, #148	; 0x94
   295c0:	18fb      	adds	r3, r7, r3
   295c2:	2200      	movs	r2, #0
   295c4:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   295c6:	2394      	movs	r3, #148	; 0x94
   295c8:	18fb      	adds	r3, r7, r3
   295ca:	2201      	movs	r2, #1
   295cc:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   295ce:	2394      	movs	r3, #148	; 0x94
   295d0:	18fb      	adds	r3, r7, r3
   295d2:	2200      	movs	r2, #0
   295d4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   295d6:	2394      	movs	r3, #148	; 0x94
   295d8:	18fb      	adds	r3, r7, r3
   295da:	0018      	movs	r0, r3
   295dc:	4b87      	ldr	r3, [pc, #540]	; (297fc <system_clock_init+0x260>)
   295de:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   295e0:	2006      	movs	r0, #6
   295e2:	4b87      	ldr	r3, [pc, #540]	; (29800 <system_clock_init+0x264>)
   295e4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   295e6:	4b87      	ldr	r3, [pc, #540]	; (29804 <system_clock_init+0x268>)
   295e8:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   295ea:	2360      	movs	r3, #96	; 0x60
   295ec:	18fb      	adds	r3, r7, r3
   295ee:	0018      	movs	r0, r3
   295f0:	4b85      	ldr	r3, [pc, #532]	; (29808 <system_clock_init+0x26c>)
   295f2:	4798      	blx	r3
   295f4:	2360      	movs	r3, #96	; 0x60
   295f6:	18fb      	adds	r3, r7, r3
   295f8:	2206      	movs	r2, #6
   295fa:	701a      	strb	r2, [r3, #0]
   295fc:	2360      	movs	r3, #96	; 0x60
   295fe:	18fb      	adds	r3, r7, r3
   29600:	2208      	movs	r2, #8
   29602:	605a      	str	r2, [r3, #4]
   29604:	2360      	movs	r3, #96	; 0x60
   29606:	18fb      	adds	r3, r7, r3
   29608:	2200      	movs	r2, #0
   2960a:	721a      	strb	r2, [r3, #8]
   2960c:	2360      	movs	r3, #96	; 0x60
   2960e:	18fb      	adds	r3, r7, r3
   29610:	2200      	movs	r2, #0
   29612:	725a      	strb	r2, [r3, #9]
   29614:	2360      	movs	r3, #96	; 0x60
   29616:	18fb      	adds	r3, r7, r3
   29618:	0019      	movs	r1, r3
   2961a:	2001      	movs	r0, #1
   2961c:	4b7b      	ldr	r3, [pc, #492]	; (2980c <system_clock_init+0x270>)
   2961e:	4798      	blx	r3
   29620:	2001      	movs	r0, #1
   29622:	4b7b      	ldr	r3, [pc, #492]	; (29810 <system_clock_init+0x274>)
   29624:	4798      	blx	r3
   29626:	2354      	movs	r3, #84	; 0x54
   29628:	18fb      	adds	r3, r7, r3
   2962a:	0018      	movs	r0, r3
   2962c:	4b76      	ldr	r3, [pc, #472]	; (29808 <system_clock_init+0x26c>)
   2962e:	4798      	blx	r3
   29630:	2354      	movs	r3, #84	; 0x54
   29632:	18fb      	adds	r3, r7, r3
   29634:	2203      	movs	r2, #3
   29636:	701a      	strb	r2, [r3, #0]
   29638:	2354      	movs	r3, #84	; 0x54
   2963a:	18fb      	adds	r3, r7, r3
   2963c:	2201      	movs	r2, #1
   2963e:	605a      	str	r2, [r3, #4]
   29640:	2354      	movs	r3, #84	; 0x54
   29642:	18fb      	adds	r3, r7, r3
   29644:	2201      	movs	r2, #1
   29646:	721a      	strb	r2, [r3, #8]
   29648:	2354      	movs	r3, #84	; 0x54
   2964a:	18fb      	adds	r3, r7, r3
   2964c:	2200      	movs	r2, #0
   2964e:	725a      	strb	r2, [r3, #9]
   29650:	2354      	movs	r3, #84	; 0x54
   29652:	18fb      	adds	r3, r7, r3
   29654:	0019      	movs	r1, r3
   29656:	2002      	movs	r0, #2
   29658:	4b6c      	ldr	r3, [pc, #432]	; (2980c <system_clock_init+0x270>)
   2965a:	4798      	blx	r3
   2965c:	2002      	movs	r0, #2
   2965e:	4b6c      	ldr	r3, [pc, #432]	; (29810 <system_clock_init+0x274>)
   29660:	4798      	blx	r3
   29662:	233c      	movs	r3, #60	; 0x3c
   29664:	18fb      	adds	r3, r7, r3
   29666:	0018      	movs	r0, r3
   29668:	4b67      	ldr	r3, [pc, #412]	; (29808 <system_clock_init+0x26c>)
   2966a:	4798      	blx	r3
   2966c:	233c      	movs	r3, #60	; 0x3c
   2966e:	18fb      	adds	r3, r7, r3
   29670:	2203      	movs	r2, #3
   29672:	701a      	strb	r2, [r3, #0]
   29674:	233c      	movs	r3, #60	; 0x3c
   29676:	18fb      	adds	r3, r7, r3
   29678:	2220      	movs	r2, #32
   2967a:	605a      	str	r2, [r3, #4]
   2967c:	233c      	movs	r3, #60	; 0x3c
   2967e:	18fb      	adds	r3, r7, r3
   29680:	2200      	movs	r2, #0
   29682:	721a      	strb	r2, [r3, #8]
   29684:	233c      	movs	r3, #60	; 0x3c
   29686:	18fb      	adds	r3, r7, r3
   29688:	2200      	movs	r2, #0
   2968a:	725a      	strb	r2, [r3, #9]
   2968c:	233c      	movs	r3, #60	; 0x3c
   2968e:	18fb      	adds	r3, r7, r3
   29690:	0019      	movs	r1, r3
   29692:	2004      	movs	r0, #4
   29694:	4b5d      	ldr	r3, [pc, #372]	; (2980c <system_clock_init+0x270>)
   29696:	4798      	blx	r3
   29698:	2004      	movs	r0, #4
   2969a:	4b5d      	ldr	r3, [pc, #372]	; (29810 <system_clock_init+0x274>)
   2969c:	4798      	blx	r3
   2969e:	2330      	movs	r3, #48	; 0x30
   296a0:	18fb      	adds	r3, r7, r3
   296a2:	0018      	movs	r0, r3
   296a4:	4b58      	ldr	r3, [pc, #352]	; (29808 <system_clock_init+0x26c>)
   296a6:	4798      	blx	r3
   296a8:	2330      	movs	r3, #48	; 0x30
   296aa:	18fb      	adds	r3, r7, r3
   296ac:	2206      	movs	r2, #6
   296ae:	701a      	strb	r2, [r3, #0]
   296b0:	2330      	movs	r3, #48	; 0x30
   296b2:	18fb      	adds	r3, r7, r3
   296b4:	2201      	movs	r2, #1
   296b6:	605a      	str	r2, [r3, #4]
   296b8:	2330      	movs	r3, #48	; 0x30
   296ba:	18fb      	adds	r3, r7, r3
   296bc:	2200      	movs	r2, #0
   296be:	721a      	strb	r2, [r3, #8]
   296c0:	2330      	movs	r3, #48	; 0x30
   296c2:	18fb      	adds	r3, r7, r3
   296c4:	2200      	movs	r2, #0
   296c6:	725a      	strb	r2, [r3, #9]
   296c8:	2330      	movs	r3, #48	; 0x30
   296ca:	18fb      	adds	r3, r7, r3
   296cc:	0019      	movs	r1, r3
   296ce:	2005      	movs	r0, #5
   296d0:	4b4e      	ldr	r3, [pc, #312]	; (2980c <system_clock_init+0x270>)
   296d2:	4798      	blx	r3
   296d4:	2005      	movs	r0, #5
   296d6:	4b4e      	ldr	r3, [pc, #312]	; (29810 <system_clock_init+0x274>)
   296d8:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   296da:	2390      	movs	r3, #144	; 0x90
   296dc:	18fb      	adds	r3, r7, r3
   296de:	0018      	movs	r0, r3
   296e0:	4b4c      	ldr	r3, [pc, #304]	; (29814 <system_clock_init+0x278>)
   296e2:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   296e4:	2390      	movs	r3, #144	; 0x90
   296e6:	18fb      	adds	r3, r7, r3
   296e8:	2201      	movs	r2, #1
   296ea:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   296ec:	2390      	movs	r3, #144	; 0x90
   296ee:	18fb      	adds	r3, r7, r3
   296f0:	0019      	movs	r1, r3
   296f2:	2001      	movs	r0, #1
   296f4:	4b48      	ldr	r3, [pc, #288]	; (29818 <system_clock_init+0x27c>)
   296f6:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   296f8:	2001      	movs	r0, #1
   296fa:	4b48      	ldr	r3, [pc, #288]	; (2981c <system_clock_init+0x280>)
   296fc:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   296fe:	2378      	movs	r3, #120	; 0x78
   29700:	18fb      	adds	r3, r7, r3
   29702:	0018      	movs	r0, r3
   29704:	4b46      	ldr	r3, [pc, #280]	; (29820 <system_clock_init+0x284>)
   29706:	4798      	blx	r3

	dpll_config.on_demand        = false;
   29708:	2378      	movs	r3, #120	; 0x78
   2970a:	18fb      	adds	r3, r7, r3
   2970c:	2200      	movs	r2, #0
   2970e:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   29710:	2378      	movs	r3, #120	; 0x78
   29712:	18fb      	adds	r3, r7, r3
   29714:	2200      	movs	r2, #0
   29716:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   29718:	2378      	movs	r3, #120	; 0x78
   2971a:	18fb      	adds	r3, r7, r3
   2971c:	2200      	movs	r2, #0
   2971e:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   29720:	2378      	movs	r3, #120	; 0x78
   29722:	18fb      	adds	r3, r7, r3
   29724:	2200      	movs	r2, #0
   29726:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   29728:	2378      	movs	r3, #120	; 0x78
   2972a:	18fb      	adds	r3, r7, r3
   2972c:	2200      	movs	r2, #0
   2972e:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   29730:	2378      	movs	r3, #120	; 0x78
   29732:	18fb      	adds	r3, r7, r3
   29734:	2200      	movs	r2, #0
   29736:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   29738:	2378      	movs	r3, #120	; 0x78
   2973a:	18fb      	adds	r3, r7, r3
   2973c:	2200      	movs	r2, #0
   2973e:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   29740:	2378      	movs	r3, #120	; 0x78
   29742:	18fb      	adds	r3, r7, r3
   29744:	2202      	movs	r2, #2
   29746:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   29748:	2378      	movs	r3, #120	; 0x78
   2974a:	18fb      	adds	r3, r7, r3
   2974c:	4a35      	ldr	r2, [pc, #212]	; (29824 <system_clock_init+0x288>)
   2974e:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   29750:	2378      	movs	r3, #120	; 0x78
   29752:	18fb      	adds	r3, r7, r3
   29754:	2201      	movs	r2, #1
   29756:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   29758:	2378      	movs	r3, #120	; 0x78
   2975a:	18fb      	adds	r3, r7, r3
   2975c:	4a32      	ldr	r2, [pc, #200]	; (29828 <system_clock_init+0x28c>)
   2975e:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   29760:	2378      	movs	r3, #120	; 0x78
   29762:	18fb      	adds	r3, r7, r3
   29764:	0018      	movs	r0, r3
   29766:	4b31      	ldr	r3, [pc, #196]	; (2982c <system_clock_init+0x290>)
   29768:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2976a:	2008      	movs	r0, #8
   2976c:	4b24      	ldr	r3, [pc, #144]	; (29800 <system_clock_init+0x264>)
   2976e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   29770:	46c0      	nop			; (mov r8, r8)
   29772:	2008      	movs	r0, #8
   29774:	4b2e      	ldr	r3, [pc, #184]	; (29830 <system_clock_init+0x294>)
   29776:	4798      	blx	r3
   29778:	0003      	movs	r3, r0
   2977a:	001a      	movs	r2, r3
   2977c:	2301      	movs	r3, #1
   2977e:	4053      	eors	r3, r2
   29780:	b2db      	uxtb	r3, r3
   29782:	2b00      	cmp	r3, #0
   29784:	d1f5      	bne.n	29772 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   29786:	4919      	ldr	r1, [pc, #100]	; (297ec <system_clock_init+0x250>)
   29788:	2244      	movs	r2, #68	; 0x44
   2978a:	5c8b      	ldrb	r3, [r1, r2]
   2978c:	2080      	movs	r0, #128	; 0x80
   2978e:	4240      	negs	r0, r0
   29790:	4303      	orrs	r3, r0
   29792:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   29794:	2000      	movs	r0, #0
   29796:	4b27      	ldr	r3, [pc, #156]	; (29834 <system_clock_init+0x298>)
   29798:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2979a:	2100      	movs	r1, #0
   2979c:	2000      	movs	r0, #0
   2979e:	4b26      	ldr	r3, [pc, #152]	; (29838 <system_clock_init+0x29c>)
   297a0:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   297a2:	2100      	movs	r1, #0
   297a4:	2001      	movs	r0, #1
   297a6:	4b24      	ldr	r3, [pc, #144]	; (29838 <system_clock_init+0x29c>)
   297a8:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   297aa:	2100      	movs	r1, #0
   297ac:	2002      	movs	r0, #2
   297ae:	4b22      	ldr	r3, [pc, #136]	; (29838 <system_clock_init+0x29c>)
   297b0:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   297b2:	003b      	movs	r3, r7
   297b4:	0018      	movs	r0, r3
   297b6:	4b14      	ldr	r3, [pc, #80]	; (29808 <system_clock_init+0x26c>)
   297b8:	4798      	blx	r3
   297ba:	003b      	movs	r3, r7
   297bc:	2208      	movs	r2, #8
   297be:	701a      	strb	r2, [r3, #0]
   297c0:	003b      	movs	r3, r7
   297c2:	2201      	movs	r2, #1
   297c4:	605a      	str	r2, [r3, #4]
   297c6:	003b      	movs	r3, r7
   297c8:	2200      	movs	r2, #0
   297ca:	721a      	strb	r2, [r3, #8]
   297cc:	003b      	movs	r3, r7
   297ce:	2201      	movs	r2, #1
   297d0:	725a      	strb	r2, [r3, #9]
   297d2:	003b      	movs	r3, r7
   297d4:	0019      	movs	r1, r3
   297d6:	2000      	movs	r0, #0
   297d8:	4b0c      	ldr	r3, [pc, #48]	; (2980c <system_clock_init+0x270>)
   297da:	4798      	blx	r3
   297dc:	2000      	movs	r0, #0
   297de:	4b0c      	ldr	r3, [pc, #48]	; (29810 <system_clock_init+0x274>)
   297e0:	4798      	blx	r3
#endif
}
   297e2:	46c0      	nop			; (mov r8, r8)
   297e4:	46bd      	mov	sp, r7
   297e6:	b026      	add	sp, #152	; 0x98
   297e8:	bd80      	pop	{r7, pc}
   297ea:	46c0      	nop			; (mov r8, r8)
   297ec:	40000800 	.word	0x40000800
   297f0:	0002915d 	.word	0x0002915d
   297f4:	00029565 	.word	0x00029565
   297f8:	0002906d 	.word	0x0002906d
   297fc:	000292b1 	.word	0x000292b1
   29800:	00029435 	.word	0x00029435
   29804:	000298e1 	.word	0x000298e1
   29808:	00029029 	.word	0x00029029
   2980c:	00029911 	.word	0x00029911
   29810:	00029a35 	.word	0x00029a35
   29814:	00029057 	.word	0x00029057
   29818:	00029b69 	.word	0x00029b69
   2981c:	00029bad 	.word	0x00029bad
   29820:	00029105 	.word	0x00029105
   29824:	000f4240 	.word	0x000f4240
   29828:	02dc6c00 	.word	0x02dc6c00
   2982c:	00029329 	.word	0x00029329
   29830:	000294e1 	.word	0x000294e1
   29834:	00029091 	.word	0x00029091
   29838:	000290b1 	.word	0x000290b1

0002983c <system_apb_clock_set_mask>:
{
   2983c:	b580      	push	{r7, lr}
   2983e:	b082      	sub	sp, #8
   29840:	af00      	add	r7, sp, #0
   29842:	0002      	movs	r2, r0
   29844:	6039      	str	r1, [r7, #0]
   29846:	1dfb      	adds	r3, r7, #7
   29848:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2984a:	1dfb      	adds	r3, r7, #7
   2984c:	781b      	ldrb	r3, [r3, #0]
   2984e:	2b01      	cmp	r3, #1
   29850:	d00a      	beq.n	29868 <system_apb_clock_set_mask+0x2c>
   29852:	2b02      	cmp	r3, #2
   29854:	d00f      	beq.n	29876 <system_apb_clock_set_mask+0x3a>
   29856:	2b00      	cmp	r3, #0
   29858:	d114      	bne.n	29884 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2985a:	4b0e      	ldr	r3, [pc, #56]	; (29894 <system_apb_clock_set_mask+0x58>)
   2985c:	4a0d      	ldr	r2, [pc, #52]	; (29894 <system_apb_clock_set_mask+0x58>)
   2985e:	6991      	ldr	r1, [r2, #24]
   29860:	683a      	ldr	r2, [r7, #0]
   29862:	430a      	orrs	r2, r1
   29864:	619a      	str	r2, [r3, #24]
			break;
   29866:	e00f      	b.n	29888 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29868:	4b0a      	ldr	r3, [pc, #40]	; (29894 <system_apb_clock_set_mask+0x58>)
   2986a:	4a0a      	ldr	r2, [pc, #40]	; (29894 <system_apb_clock_set_mask+0x58>)
   2986c:	69d1      	ldr	r1, [r2, #28]
   2986e:	683a      	ldr	r2, [r7, #0]
   29870:	430a      	orrs	r2, r1
   29872:	61da      	str	r2, [r3, #28]
			break;
   29874:	e008      	b.n	29888 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29876:	4b07      	ldr	r3, [pc, #28]	; (29894 <system_apb_clock_set_mask+0x58>)
   29878:	4a06      	ldr	r2, [pc, #24]	; (29894 <system_apb_clock_set_mask+0x58>)
   2987a:	6a11      	ldr	r1, [r2, #32]
   2987c:	683a      	ldr	r2, [r7, #0]
   2987e:	430a      	orrs	r2, r1
   29880:	621a      	str	r2, [r3, #32]
			break;
   29882:	e001      	b.n	29888 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29884:	2317      	movs	r3, #23
   29886:	e000      	b.n	2988a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29888:	2300      	movs	r3, #0
}
   2988a:	0018      	movs	r0, r3
   2988c:	46bd      	mov	sp, r7
   2988e:	b002      	add	sp, #8
   29890:	bd80      	pop	{r7, pc}
   29892:	46c0      	nop			; (mov r8, r8)
   29894:	40000400 	.word	0x40000400

00029898 <system_interrupt_enter_critical_section>:
{
   29898:	b580      	push	{r7, lr}
   2989a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2989c:	4b02      	ldr	r3, [pc, #8]	; (298a8 <system_interrupt_enter_critical_section+0x10>)
   2989e:	4798      	blx	r3
}
   298a0:	46c0      	nop			; (mov r8, r8)
   298a2:	46bd      	mov	sp, r7
   298a4:	bd80      	pop	{r7, pc}
   298a6:	46c0      	nop			; (mov r8, r8)
   298a8:	00025ed5 	.word	0x00025ed5

000298ac <system_interrupt_leave_critical_section>:
{
   298ac:	b580      	push	{r7, lr}
   298ae:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   298b0:	4b02      	ldr	r3, [pc, #8]	; (298bc <system_interrupt_leave_critical_section+0x10>)
   298b2:	4798      	blx	r3
}
   298b4:	46c0      	nop			; (mov r8, r8)
   298b6:	46bd      	mov	sp, r7
   298b8:	bd80      	pop	{r7, pc}
   298ba:	46c0      	nop			; (mov r8, r8)
   298bc:	00025f29 	.word	0x00025f29

000298c0 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   298c0:	b580      	push	{r7, lr}
   298c2:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   298c4:	4b05      	ldr	r3, [pc, #20]	; (298dc <system_gclk_is_syncing+0x1c>)
   298c6:	785b      	ldrb	r3, [r3, #1]
   298c8:	b2db      	uxtb	r3, r3
   298ca:	b25b      	sxtb	r3, r3
   298cc:	2b00      	cmp	r3, #0
   298ce:	da01      	bge.n	298d4 <system_gclk_is_syncing+0x14>
		return true;
   298d0:	2301      	movs	r3, #1
   298d2:	e000      	b.n	298d6 <system_gclk_is_syncing+0x16>
	}

	return false;
   298d4:	2300      	movs	r3, #0
}
   298d6:	0018      	movs	r0, r3
   298d8:	46bd      	mov	sp, r7
   298da:	bd80      	pop	{r7, pc}
   298dc:	40000c00 	.word	0x40000c00

000298e0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   298e0:	b580      	push	{r7, lr}
   298e2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   298e4:	2108      	movs	r1, #8
   298e6:	2000      	movs	r0, #0
   298e8:	4b07      	ldr	r3, [pc, #28]	; (29908 <system_gclk_init+0x28>)
   298ea:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   298ec:	4b07      	ldr	r3, [pc, #28]	; (2990c <system_gclk_init+0x2c>)
   298ee:	2201      	movs	r2, #1
   298f0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   298f2:	46c0      	nop			; (mov r8, r8)
   298f4:	4b05      	ldr	r3, [pc, #20]	; (2990c <system_gclk_init+0x2c>)
   298f6:	781b      	ldrb	r3, [r3, #0]
   298f8:	b2db      	uxtb	r3, r3
   298fa:	001a      	movs	r2, r3
   298fc:	2301      	movs	r3, #1
   298fe:	4013      	ands	r3, r2
   29900:	d1f8      	bne.n	298f4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   29902:	46c0      	nop			; (mov r8, r8)
   29904:	46bd      	mov	sp, r7
   29906:	bd80      	pop	{r7, pc}
   29908:	0002983d 	.word	0x0002983d
   2990c:	40000c00 	.word	0x40000c00

00029910 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   29910:	b580      	push	{r7, lr}
   29912:	b086      	sub	sp, #24
   29914:	af00      	add	r7, sp, #0
   29916:	0002      	movs	r2, r0
   29918:	6039      	str	r1, [r7, #0]
   2991a:	1dfb      	adds	r3, r7, #7
   2991c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2991e:	1dfb      	adds	r3, r7, #7
   29920:	781b      	ldrb	r3, [r3, #0]
   29922:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   29924:	1dfb      	adds	r3, r7, #7
   29926:	781b      	ldrb	r3, [r3, #0]
   29928:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2992a:	683b      	ldr	r3, [r7, #0]
   2992c:	781b      	ldrb	r3, [r3, #0]
   2992e:	021b      	lsls	r3, r3, #8
   29930:	001a      	movs	r2, r3
   29932:	697b      	ldr	r3, [r7, #20]
   29934:	4313      	orrs	r3, r2
   29936:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   29938:	683b      	ldr	r3, [r7, #0]
   2993a:	785b      	ldrb	r3, [r3, #1]
   2993c:	2b00      	cmp	r3, #0
   2993e:	d004      	beq.n	2994a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   29940:	697b      	ldr	r3, [r7, #20]
   29942:	2280      	movs	r2, #128	; 0x80
   29944:	02d2      	lsls	r2, r2, #11
   29946:	4313      	orrs	r3, r2
   29948:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2994a:	683b      	ldr	r3, [r7, #0]
   2994c:	7a5b      	ldrb	r3, [r3, #9]
   2994e:	2b00      	cmp	r3, #0
   29950:	d004      	beq.n	2995c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   29952:	697b      	ldr	r3, [r7, #20]
   29954:	2280      	movs	r2, #128	; 0x80
   29956:	0312      	lsls	r2, r2, #12
   29958:	4313      	orrs	r3, r2
   2995a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2995c:	683b      	ldr	r3, [r7, #0]
   2995e:	685b      	ldr	r3, [r3, #4]
   29960:	2b01      	cmp	r3, #1
   29962:	d92c      	bls.n	299be <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   29964:	683b      	ldr	r3, [r7, #0]
   29966:	685a      	ldr	r2, [r3, #4]
   29968:	683b      	ldr	r3, [r7, #0]
   2996a:	685b      	ldr	r3, [r3, #4]
   2996c:	3b01      	subs	r3, #1
   2996e:	4013      	ands	r3, r2
   29970:	d11a      	bne.n	299a8 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   29972:	2300      	movs	r3, #0
   29974:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   29976:	2302      	movs	r3, #2
   29978:	60bb      	str	r3, [r7, #8]
   2997a:	e005      	b.n	29988 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2997c:	68fb      	ldr	r3, [r7, #12]
   2997e:	3301      	adds	r3, #1
   29980:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   29982:	68bb      	ldr	r3, [r7, #8]
   29984:	005b      	lsls	r3, r3, #1
   29986:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   29988:	683b      	ldr	r3, [r7, #0]
   2998a:	685a      	ldr	r2, [r3, #4]
   2998c:	68bb      	ldr	r3, [r7, #8]
   2998e:	429a      	cmp	r2, r3
   29990:	d8f4      	bhi.n	2997c <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   29992:	68fb      	ldr	r3, [r7, #12]
   29994:	021b      	lsls	r3, r3, #8
   29996:	693a      	ldr	r2, [r7, #16]
   29998:	4313      	orrs	r3, r2
   2999a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2999c:	697b      	ldr	r3, [r7, #20]
   2999e:	2280      	movs	r2, #128	; 0x80
   299a0:	0352      	lsls	r2, r2, #13
   299a2:	4313      	orrs	r3, r2
   299a4:	617b      	str	r3, [r7, #20]
   299a6:	e00a      	b.n	299be <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   299a8:	683b      	ldr	r3, [r7, #0]
   299aa:	685b      	ldr	r3, [r3, #4]
   299ac:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   299ae:	693a      	ldr	r2, [r7, #16]
   299b0:	4313      	orrs	r3, r2
   299b2:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   299b4:	697b      	ldr	r3, [r7, #20]
   299b6:	2280      	movs	r2, #128	; 0x80
   299b8:	0292      	lsls	r2, r2, #10
   299ba:	4313      	orrs	r3, r2
   299bc:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   299be:	683b      	ldr	r3, [r7, #0]
   299c0:	7a1b      	ldrb	r3, [r3, #8]
   299c2:	2b00      	cmp	r3, #0
   299c4:	d004      	beq.n	299d0 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   299c6:	697b      	ldr	r3, [r7, #20]
   299c8:	2280      	movs	r2, #128	; 0x80
   299ca:	0392      	lsls	r2, r2, #14
   299cc:	4313      	orrs	r3, r2
   299ce:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   299d0:	46c0      	nop			; (mov r8, r8)
   299d2:	4b13      	ldr	r3, [pc, #76]	; (29a20 <system_gclk_gen_set_config+0x110>)
   299d4:	4798      	blx	r3
   299d6:	1e03      	subs	r3, r0, #0
   299d8:	d1fb      	bne.n	299d2 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   299da:	4b12      	ldr	r3, [pc, #72]	; (29a24 <system_gclk_gen_set_config+0x114>)
   299dc:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   299de:	4a12      	ldr	r2, [pc, #72]	; (29a28 <system_gclk_gen_set_config+0x118>)
   299e0:	1dfb      	adds	r3, r7, #7
   299e2:	781b      	ldrb	r3, [r3, #0]
   299e4:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   299e6:	46c0      	nop			; (mov r8, r8)
   299e8:	4b0d      	ldr	r3, [pc, #52]	; (29a20 <system_gclk_gen_set_config+0x110>)
   299ea:	4798      	blx	r3
   299ec:	1e03      	subs	r3, r0, #0
   299ee:	d1fb      	bne.n	299e8 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   299f0:	4b0e      	ldr	r3, [pc, #56]	; (29a2c <system_gclk_gen_set_config+0x11c>)
   299f2:	693a      	ldr	r2, [r7, #16]
   299f4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   299f6:	46c0      	nop			; (mov r8, r8)
   299f8:	4b09      	ldr	r3, [pc, #36]	; (29a20 <system_gclk_gen_set_config+0x110>)
   299fa:	4798      	blx	r3
   299fc:	1e03      	subs	r3, r0, #0
   299fe:	d1fb      	bne.n	299f8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   29a00:	4b0a      	ldr	r3, [pc, #40]	; (29a2c <system_gclk_gen_set_config+0x11c>)
   29a02:	4a0a      	ldr	r2, [pc, #40]	; (29a2c <system_gclk_gen_set_config+0x11c>)
   29a04:	6851      	ldr	r1, [r2, #4]
   29a06:	2280      	movs	r2, #128	; 0x80
   29a08:	0252      	lsls	r2, r2, #9
   29a0a:	4011      	ands	r1, r2
   29a0c:	697a      	ldr	r2, [r7, #20]
   29a0e:	430a      	orrs	r2, r1
   29a10:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   29a12:	4b07      	ldr	r3, [pc, #28]	; (29a30 <system_gclk_gen_set_config+0x120>)
   29a14:	4798      	blx	r3
}
   29a16:	46c0      	nop			; (mov r8, r8)
   29a18:	46bd      	mov	sp, r7
   29a1a:	b006      	add	sp, #24
   29a1c:	bd80      	pop	{r7, pc}
   29a1e:	46c0      	nop			; (mov r8, r8)
   29a20:	000298c1 	.word	0x000298c1
   29a24:	00029899 	.word	0x00029899
   29a28:	40000c08 	.word	0x40000c08
   29a2c:	40000c00 	.word	0x40000c00
   29a30:	000298ad 	.word	0x000298ad

00029a34 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   29a34:	b580      	push	{r7, lr}
   29a36:	b082      	sub	sp, #8
   29a38:	af00      	add	r7, sp, #0
   29a3a:	0002      	movs	r2, r0
   29a3c:	1dfb      	adds	r3, r7, #7
   29a3e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29a40:	46c0      	nop			; (mov r8, r8)
   29a42:	4b0e      	ldr	r3, [pc, #56]	; (29a7c <system_gclk_gen_enable+0x48>)
   29a44:	4798      	blx	r3
   29a46:	1e03      	subs	r3, r0, #0
   29a48:	d1fb      	bne.n	29a42 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29a4a:	4b0d      	ldr	r3, [pc, #52]	; (29a80 <system_gclk_gen_enable+0x4c>)
   29a4c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29a4e:	4a0d      	ldr	r2, [pc, #52]	; (29a84 <system_gclk_gen_enable+0x50>)
   29a50:	1dfb      	adds	r3, r7, #7
   29a52:	781b      	ldrb	r3, [r3, #0]
   29a54:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29a56:	46c0      	nop			; (mov r8, r8)
   29a58:	4b08      	ldr	r3, [pc, #32]	; (29a7c <system_gclk_gen_enable+0x48>)
   29a5a:	4798      	blx	r3
   29a5c:	1e03      	subs	r3, r0, #0
   29a5e:	d1fb      	bne.n	29a58 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   29a60:	4b09      	ldr	r3, [pc, #36]	; (29a88 <system_gclk_gen_enable+0x54>)
   29a62:	4a09      	ldr	r2, [pc, #36]	; (29a88 <system_gclk_gen_enable+0x54>)
   29a64:	6852      	ldr	r2, [r2, #4]
   29a66:	2180      	movs	r1, #128	; 0x80
   29a68:	0249      	lsls	r1, r1, #9
   29a6a:	430a      	orrs	r2, r1
   29a6c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   29a6e:	4b07      	ldr	r3, [pc, #28]	; (29a8c <system_gclk_gen_enable+0x58>)
   29a70:	4798      	blx	r3
}
   29a72:	46c0      	nop			; (mov r8, r8)
   29a74:	46bd      	mov	sp, r7
   29a76:	b002      	add	sp, #8
   29a78:	bd80      	pop	{r7, pc}
   29a7a:	46c0      	nop			; (mov r8, r8)
   29a7c:	000298c1 	.word	0x000298c1
   29a80:	00029899 	.word	0x00029899
   29a84:	40000c04 	.word	0x40000c04
   29a88:	40000c00 	.word	0x40000c00
   29a8c:	000298ad 	.word	0x000298ad

00029a90 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   29a90:	b580      	push	{r7, lr}
   29a92:	b086      	sub	sp, #24
   29a94:	af00      	add	r7, sp, #0
   29a96:	0002      	movs	r2, r0
   29a98:	1dfb      	adds	r3, r7, #7
   29a9a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29a9c:	46c0      	nop			; (mov r8, r8)
   29a9e:	4b2a      	ldr	r3, [pc, #168]	; (29b48 <system_gclk_gen_get_hz+0xb8>)
   29aa0:	4798      	blx	r3
   29aa2:	1e03      	subs	r3, r0, #0
   29aa4:	d1fb      	bne.n	29a9e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29aa6:	4b29      	ldr	r3, [pc, #164]	; (29b4c <system_gclk_gen_get_hz+0xbc>)
   29aa8:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29aaa:	4a29      	ldr	r2, [pc, #164]	; (29b50 <system_gclk_gen_get_hz+0xc0>)
   29aac:	1dfb      	adds	r3, r7, #7
   29aae:	781b      	ldrb	r3, [r3, #0]
   29ab0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29ab2:	46c0      	nop			; (mov r8, r8)
   29ab4:	4b24      	ldr	r3, [pc, #144]	; (29b48 <system_gclk_gen_get_hz+0xb8>)
   29ab6:	4798      	blx	r3
   29ab8:	1e03      	subs	r3, r0, #0
   29aba:	d1fb      	bne.n	29ab4 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   29abc:	4b25      	ldr	r3, [pc, #148]	; (29b54 <system_gclk_gen_get_hz+0xc4>)
   29abe:	685b      	ldr	r3, [r3, #4]
   29ac0:	04db      	lsls	r3, r3, #19
   29ac2:	0edb      	lsrs	r3, r3, #27
   29ac4:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   29ac6:	0018      	movs	r0, r3
   29ac8:	4b23      	ldr	r3, [pc, #140]	; (29b58 <system_gclk_gen_get_hz+0xc8>)
   29aca:	4798      	blx	r3
   29acc:	0003      	movs	r3, r0
   29ace:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29ad0:	4a1f      	ldr	r2, [pc, #124]	; (29b50 <system_gclk_gen_get_hz+0xc0>)
   29ad2:	1dfb      	adds	r3, r7, #7
   29ad4:	781b      	ldrb	r3, [r3, #0]
   29ad6:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   29ad8:	4b1e      	ldr	r3, [pc, #120]	; (29b54 <system_gclk_gen_get_hz+0xc4>)
   29ada:	685b      	ldr	r3, [r3, #4]
   29adc:	02db      	lsls	r3, r3, #11
   29ade:	0fdb      	lsrs	r3, r3, #31
   29ae0:	b2da      	uxtb	r2, r3
   29ae2:	2313      	movs	r3, #19
   29ae4:	18fb      	adds	r3, r7, r3
   29ae6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   29ae8:	4a1c      	ldr	r2, [pc, #112]	; (29b5c <system_gclk_gen_get_hz+0xcc>)
   29aea:	1dfb      	adds	r3, r7, #7
   29aec:	781b      	ldrb	r3, [r3, #0]
   29aee:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29af0:	46c0      	nop			; (mov r8, r8)
   29af2:	4b15      	ldr	r3, [pc, #84]	; (29b48 <system_gclk_gen_get_hz+0xb8>)
   29af4:	4798      	blx	r3
   29af6:	1e03      	subs	r3, r0, #0
   29af8:	d1fb      	bne.n	29af2 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   29afa:	4b16      	ldr	r3, [pc, #88]	; (29b54 <system_gclk_gen_get_hz+0xc4>)
   29afc:	689b      	ldr	r3, [r3, #8]
   29afe:	021b      	lsls	r3, r3, #8
   29b00:	0c1b      	lsrs	r3, r3, #16
   29b02:	b29b      	uxth	r3, r3
   29b04:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   29b06:	4b16      	ldr	r3, [pc, #88]	; (29b60 <system_gclk_gen_get_hz+0xd0>)
   29b08:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   29b0a:	2313      	movs	r3, #19
   29b0c:	18fb      	adds	r3, r7, r3
   29b0e:	781b      	ldrb	r3, [r3, #0]
   29b10:	2b00      	cmp	r3, #0
   29b12:	d109      	bne.n	29b28 <system_gclk_gen_get_hz+0x98>
   29b14:	68fb      	ldr	r3, [r7, #12]
   29b16:	2b01      	cmp	r3, #1
   29b18:	d906      	bls.n	29b28 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   29b1a:	4b12      	ldr	r3, [pc, #72]	; (29b64 <system_gclk_gen_get_hz+0xd4>)
   29b1c:	68f9      	ldr	r1, [r7, #12]
   29b1e:	6978      	ldr	r0, [r7, #20]
   29b20:	4798      	blx	r3
   29b22:	0003      	movs	r3, r0
   29b24:	617b      	str	r3, [r7, #20]
   29b26:	e00a      	b.n	29b3e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   29b28:	2313      	movs	r3, #19
   29b2a:	18fb      	adds	r3, r7, r3
   29b2c:	781b      	ldrb	r3, [r3, #0]
   29b2e:	2b00      	cmp	r3, #0
   29b30:	d005      	beq.n	29b3e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   29b32:	68fb      	ldr	r3, [r7, #12]
   29b34:	3301      	adds	r3, #1
   29b36:	697a      	ldr	r2, [r7, #20]
   29b38:	40da      	lsrs	r2, r3
   29b3a:	0013      	movs	r3, r2
   29b3c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   29b3e:	697b      	ldr	r3, [r7, #20]
}
   29b40:	0018      	movs	r0, r3
   29b42:	46bd      	mov	sp, r7
   29b44:	b006      	add	sp, #24
   29b46:	bd80      	pop	{r7, pc}
   29b48:	000298c1 	.word	0x000298c1
   29b4c:	00029899 	.word	0x00029899
   29b50:	40000c04 	.word	0x40000c04
   29b54:	40000c00 	.word	0x40000c00
   29b58:	000291f1 	.word	0x000291f1
   29b5c:	40000c08 	.word	0x40000c08
   29b60:	000298ad 	.word	0x000298ad
   29b64:	00032705 	.word	0x00032705

00029b68 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   29b68:	b580      	push	{r7, lr}
   29b6a:	b084      	sub	sp, #16
   29b6c:	af00      	add	r7, sp, #0
   29b6e:	0002      	movs	r2, r0
   29b70:	6039      	str	r1, [r7, #0]
   29b72:	1dfb      	adds	r3, r7, #7
   29b74:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   29b76:	1dfb      	adds	r3, r7, #7
   29b78:	781b      	ldrb	r3, [r3, #0]
   29b7a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   29b7c:	683b      	ldr	r3, [r7, #0]
   29b7e:	781b      	ldrb	r3, [r3, #0]
   29b80:	021b      	lsls	r3, r3, #8
   29b82:	001a      	movs	r2, r3
   29b84:	68fb      	ldr	r3, [r7, #12]
   29b86:	4313      	orrs	r3, r2
   29b88:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   29b8a:	1dfb      	adds	r3, r7, #7
   29b8c:	781b      	ldrb	r3, [r3, #0]
   29b8e:	0018      	movs	r0, r3
   29b90:	4b04      	ldr	r3, [pc, #16]	; (29ba4 <system_gclk_chan_set_config+0x3c>)
   29b92:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   29b94:	4b04      	ldr	r3, [pc, #16]	; (29ba8 <system_gclk_chan_set_config+0x40>)
   29b96:	68fa      	ldr	r2, [r7, #12]
   29b98:	b292      	uxth	r2, r2
   29b9a:	805a      	strh	r2, [r3, #2]
}
   29b9c:	46c0      	nop			; (mov r8, r8)
   29b9e:	46bd      	mov	sp, r7
   29ba0:	b004      	add	sp, #16
   29ba2:	bd80      	pop	{r7, pc}
   29ba4:	00029bf5 	.word	0x00029bf5
   29ba8:	40000c00 	.word	0x40000c00

00029bac <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   29bac:	b580      	push	{r7, lr}
   29bae:	b082      	sub	sp, #8
   29bb0:	af00      	add	r7, sp, #0
   29bb2:	0002      	movs	r2, r0
   29bb4:	1dfb      	adds	r3, r7, #7
   29bb6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29bb8:	4b0a      	ldr	r3, [pc, #40]	; (29be4 <system_gclk_chan_enable+0x38>)
   29bba:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29bbc:	4a0a      	ldr	r2, [pc, #40]	; (29be8 <system_gclk_chan_enable+0x3c>)
   29bbe:	1dfb      	adds	r3, r7, #7
   29bc0:	781b      	ldrb	r3, [r3, #0]
   29bc2:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   29bc4:	4909      	ldr	r1, [pc, #36]	; (29bec <system_gclk_chan_enable+0x40>)
   29bc6:	4b09      	ldr	r3, [pc, #36]	; (29bec <system_gclk_chan_enable+0x40>)
   29bc8:	885b      	ldrh	r3, [r3, #2]
   29bca:	b29b      	uxth	r3, r3
   29bcc:	2280      	movs	r2, #128	; 0x80
   29bce:	01d2      	lsls	r2, r2, #7
   29bd0:	4313      	orrs	r3, r2
   29bd2:	b29b      	uxth	r3, r3
   29bd4:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   29bd6:	4b06      	ldr	r3, [pc, #24]	; (29bf0 <system_gclk_chan_enable+0x44>)
   29bd8:	4798      	blx	r3
}
   29bda:	46c0      	nop			; (mov r8, r8)
   29bdc:	46bd      	mov	sp, r7
   29bde:	b002      	add	sp, #8
   29be0:	bd80      	pop	{r7, pc}
   29be2:	46c0      	nop			; (mov r8, r8)
   29be4:	00029899 	.word	0x00029899
   29be8:	40000c02 	.word	0x40000c02
   29bec:	40000c00 	.word	0x40000c00
   29bf0:	000298ad 	.word	0x000298ad

00029bf4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   29bf4:	b580      	push	{r7, lr}
   29bf6:	b084      	sub	sp, #16
   29bf8:	af00      	add	r7, sp, #0
   29bfa:	0002      	movs	r2, r0
   29bfc:	1dfb      	adds	r3, r7, #7
   29bfe:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29c00:	4b1c      	ldr	r3, [pc, #112]	; (29c74 <system_gclk_chan_disable+0x80>)
   29c02:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29c04:	4a1c      	ldr	r2, [pc, #112]	; (29c78 <system_gclk_chan_disable+0x84>)
   29c06:	1dfb      	adds	r3, r7, #7
   29c08:	781b      	ldrb	r3, [r3, #0]
   29c0a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   29c0c:	4b1b      	ldr	r3, [pc, #108]	; (29c7c <system_gclk_chan_disable+0x88>)
   29c0e:	885b      	ldrh	r3, [r3, #2]
   29c10:	051b      	lsls	r3, r3, #20
   29c12:	0f1b      	lsrs	r3, r3, #28
   29c14:	b2db      	uxtb	r3, r3
   29c16:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   29c18:	4a18      	ldr	r2, [pc, #96]	; (29c7c <system_gclk_chan_disable+0x88>)
   29c1a:	8853      	ldrh	r3, [r2, #2]
   29c1c:	4918      	ldr	r1, [pc, #96]	; (29c80 <system_gclk_chan_disable+0x8c>)
   29c1e:	400b      	ands	r3, r1
   29c20:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   29c22:	4a16      	ldr	r2, [pc, #88]	; (29c7c <system_gclk_chan_disable+0x88>)
   29c24:	4b15      	ldr	r3, [pc, #84]	; (29c7c <system_gclk_chan_disable+0x88>)
   29c26:	885b      	ldrh	r3, [r3, #2]
   29c28:	b29b      	uxth	r3, r3
   29c2a:	4916      	ldr	r1, [pc, #88]	; (29c84 <system_gclk_chan_disable+0x90>)
   29c2c:	400b      	ands	r3, r1
   29c2e:	b29b      	uxth	r3, r3
   29c30:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   29c32:	46c0      	nop			; (mov r8, r8)
   29c34:	4b11      	ldr	r3, [pc, #68]	; (29c7c <system_gclk_chan_disable+0x88>)
   29c36:	885b      	ldrh	r3, [r3, #2]
   29c38:	b29b      	uxth	r3, r3
   29c3a:	001a      	movs	r2, r3
   29c3c:	2380      	movs	r3, #128	; 0x80
   29c3e:	01db      	lsls	r3, r3, #7
   29c40:	4013      	ands	r3, r2
   29c42:	d1f7      	bne.n	29c34 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   29c44:	4a0d      	ldr	r2, [pc, #52]	; (29c7c <system_gclk_chan_disable+0x88>)
   29c46:	68fb      	ldr	r3, [r7, #12]
   29c48:	b2db      	uxtb	r3, r3
   29c4a:	1c19      	adds	r1, r3, #0
   29c4c:	230f      	movs	r3, #15
   29c4e:	400b      	ands	r3, r1
   29c50:	b2d9      	uxtb	r1, r3
   29c52:	8853      	ldrh	r3, [r2, #2]
   29c54:	1c08      	adds	r0, r1, #0
   29c56:	210f      	movs	r1, #15
   29c58:	4001      	ands	r1, r0
   29c5a:	0208      	lsls	r0, r1, #8
   29c5c:	4908      	ldr	r1, [pc, #32]	; (29c80 <system_gclk_chan_disable+0x8c>)
   29c5e:	400b      	ands	r3, r1
   29c60:	1c19      	adds	r1, r3, #0
   29c62:	1c03      	adds	r3, r0, #0
   29c64:	430b      	orrs	r3, r1
   29c66:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   29c68:	4b07      	ldr	r3, [pc, #28]	; (29c88 <system_gclk_chan_disable+0x94>)
   29c6a:	4798      	blx	r3
}
   29c6c:	46c0      	nop			; (mov r8, r8)
   29c6e:	46bd      	mov	sp, r7
   29c70:	b004      	add	sp, #16
   29c72:	bd80      	pop	{r7, pc}
   29c74:	00029899 	.word	0x00029899
   29c78:	40000c02 	.word	0x40000c02
   29c7c:	40000c00 	.word	0x40000c00
   29c80:	fffff0ff 	.word	0xfffff0ff
   29c84:	ffffbfff 	.word	0xffffbfff
   29c88:	000298ad 	.word	0x000298ad

00029c8c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   29c8c:	b580      	push	{r7, lr}
   29c8e:	b084      	sub	sp, #16
   29c90:	af00      	add	r7, sp, #0
   29c92:	0002      	movs	r2, r0
   29c94:	1dfb      	adds	r3, r7, #7
   29c96:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   29c98:	4b0d      	ldr	r3, [pc, #52]	; (29cd0 <system_gclk_chan_get_hz+0x44>)
   29c9a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29c9c:	4a0d      	ldr	r2, [pc, #52]	; (29cd4 <system_gclk_chan_get_hz+0x48>)
   29c9e:	1dfb      	adds	r3, r7, #7
   29ca0:	781b      	ldrb	r3, [r3, #0]
   29ca2:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   29ca4:	4b0c      	ldr	r3, [pc, #48]	; (29cd8 <system_gclk_chan_get_hz+0x4c>)
   29ca6:	885b      	ldrh	r3, [r3, #2]
   29ca8:	051b      	lsls	r3, r3, #20
   29caa:	0f1b      	lsrs	r3, r3, #28
   29cac:	b2da      	uxtb	r2, r3
   29cae:	230f      	movs	r3, #15
   29cb0:	18fb      	adds	r3, r7, r3
   29cb2:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   29cb4:	4b09      	ldr	r3, [pc, #36]	; (29cdc <system_gclk_chan_get_hz+0x50>)
   29cb6:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   29cb8:	230f      	movs	r3, #15
   29cba:	18fb      	adds	r3, r7, r3
   29cbc:	781b      	ldrb	r3, [r3, #0]
   29cbe:	0018      	movs	r0, r3
   29cc0:	4b07      	ldr	r3, [pc, #28]	; (29ce0 <system_gclk_chan_get_hz+0x54>)
   29cc2:	4798      	blx	r3
   29cc4:	0003      	movs	r3, r0
}
   29cc6:	0018      	movs	r0, r3
   29cc8:	46bd      	mov	sp, r7
   29cca:	b004      	add	sp, #16
   29ccc:	bd80      	pop	{r7, pc}
   29cce:	46c0      	nop			; (mov r8, r8)
   29cd0:	00029899 	.word	0x00029899
   29cd4:	40000c02 	.word	0x40000c02
   29cd8:	40000c00 	.word	0x40000c00
   29cdc:	000298ad 	.word	0x000298ad
   29ce0:	00029a91 	.word	0x00029a91

00029ce4 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   29ce4:	b580      	push	{r7, lr}
   29ce6:	b084      	sub	sp, #16
   29ce8:	af00      	add	r7, sp, #0
   29cea:	0002      	movs	r2, r0
   29cec:	1dfb      	adds	r3, r7, #7
   29cee:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   29cf0:	230f      	movs	r3, #15
   29cf2:	18fb      	adds	r3, r7, r3
   29cf4:	2200      	movs	r2, #0
   29cf6:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   29cf8:	1dfb      	adds	r3, r7, #7
   29cfa:	781b      	ldrb	r3, [r3, #0]
   29cfc:	2b7f      	cmp	r3, #127	; 0x7f
   29cfe:	d80b      	bhi.n	29d18 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   29d00:	4a13      	ldr	r2, [pc, #76]	; (29d50 <system_interrupt_clear_pending+0x6c>)
   29d02:	1dfb      	adds	r3, r7, #7
   29d04:	781b      	ldrb	r3, [r3, #0]
   29d06:	b25b      	sxtb	r3, r3
   29d08:	2101      	movs	r1, #1
   29d0a:	4099      	lsls	r1, r3
   29d0c:	000b      	movs	r3, r1
   29d0e:	0019      	movs	r1, r3
   29d10:	23c0      	movs	r3, #192	; 0xc0
   29d12:	005b      	lsls	r3, r3, #1
   29d14:	50d1      	str	r1, [r2, r3]
   29d16:	e014      	b.n	29d42 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   29d18:	1dfb      	adds	r3, r7, #7
   29d1a:	781b      	ldrb	r3, [r3, #0]
   29d1c:	b25b      	sxtb	r3, r3
   29d1e:	330e      	adds	r3, #14
   29d20:	d101      	bne.n	29d26 <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   29d22:	2317      	movs	r3, #23
   29d24:	e010      	b.n	29d48 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   29d26:	1dfb      	adds	r3, r7, #7
   29d28:	781b      	ldrb	r3, [r3, #0]
   29d2a:	b25b      	sxtb	r3, r3
   29d2c:	3301      	adds	r3, #1
   29d2e:	d104      	bne.n	29d3a <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   29d30:	4b08      	ldr	r3, [pc, #32]	; (29d54 <system_interrupt_clear_pending+0x70>)
   29d32:	2280      	movs	r2, #128	; 0x80
   29d34:	0492      	lsls	r2, r2, #18
   29d36:	605a      	str	r2, [r3, #4]
   29d38:	e003      	b.n	29d42 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   29d3a:	230f      	movs	r3, #15
   29d3c:	18fb      	adds	r3, r7, r3
   29d3e:	2217      	movs	r2, #23
   29d40:	701a      	strb	r2, [r3, #0]
	}

	return status;
   29d42:	230f      	movs	r3, #15
   29d44:	18fb      	adds	r3, r7, r3
   29d46:	781b      	ldrb	r3, [r3, #0]
}
   29d48:	0018      	movs	r0, r3
   29d4a:	46bd      	mov	sp, r7
   29d4c:	b004      	add	sp, #16
   29d4e:	bd80      	pop	{r7, pc}
   29d50:	e000e100 	.word	0xe000e100
   29d54:	e000ed00 	.word	0xe000ed00

00029d58 <system_pinmux_get_group_from_gpio_pin>:
{
   29d58:	b580      	push	{r7, lr}
   29d5a:	b084      	sub	sp, #16
   29d5c:	af00      	add	r7, sp, #0
   29d5e:	0002      	movs	r2, r0
   29d60:	1dfb      	adds	r3, r7, #7
   29d62:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   29d64:	230f      	movs	r3, #15
   29d66:	18fb      	adds	r3, r7, r3
   29d68:	1dfa      	adds	r2, r7, #7
   29d6a:	7812      	ldrb	r2, [r2, #0]
   29d6c:	09d2      	lsrs	r2, r2, #7
   29d6e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29d70:	230e      	movs	r3, #14
   29d72:	18fb      	adds	r3, r7, r3
   29d74:	1dfa      	adds	r2, r7, #7
   29d76:	7812      	ldrb	r2, [r2, #0]
   29d78:	0952      	lsrs	r2, r2, #5
   29d7a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   29d7c:	4b0d      	ldr	r3, [pc, #52]	; (29db4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   29d7e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29d80:	230f      	movs	r3, #15
   29d82:	18fb      	adds	r3, r7, r3
   29d84:	781b      	ldrb	r3, [r3, #0]
   29d86:	2b00      	cmp	r3, #0
   29d88:	d10f      	bne.n	29daa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   29d8a:	230f      	movs	r3, #15
   29d8c:	18fb      	adds	r3, r7, r3
   29d8e:	781b      	ldrb	r3, [r3, #0]
   29d90:	009b      	lsls	r3, r3, #2
   29d92:	2210      	movs	r2, #16
   29d94:	4694      	mov	ip, r2
   29d96:	44bc      	add	ip, r7
   29d98:	4463      	add	r3, ip
   29d9a:	3b08      	subs	r3, #8
   29d9c:	681a      	ldr	r2, [r3, #0]
   29d9e:	230e      	movs	r3, #14
   29da0:	18fb      	adds	r3, r7, r3
   29da2:	781b      	ldrb	r3, [r3, #0]
   29da4:	01db      	lsls	r3, r3, #7
   29da6:	18d3      	adds	r3, r2, r3
   29da8:	e000      	b.n	29dac <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   29daa:	2300      	movs	r3, #0
}
   29dac:	0018      	movs	r0, r3
   29dae:	46bd      	mov	sp, r7
   29db0:	b004      	add	sp, #16
   29db2:	bd80      	pop	{r7, pc}
   29db4:	41004400 	.word	0x41004400

00029db8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   29db8:	b580      	push	{r7, lr}
   29dba:	b088      	sub	sp, #32
   29dbc:	af00      	add	r7, sp, #0
   29dbe:	60f8      	str	r0, [r7, #12]
   29dc0:	60b9      	str	r1, [r7, #8]
   29dc2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   29dc4:	2300      	movs	r3, #0
   29dc6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   29dc8:	687b      	ldr	r3, [r7, #4]
   29dca:	78db      	ldrb	r3, [r3, #3]
   29dcc:	2201      	movs	r2, #1
   29dce:	4053      	eors	r3, r2
   29dd0:	b2db      	uxtb	r3, r3
   29dd2:	2b00      	cmp	r3, #0
   29dd4:	d035      	beq.n	29e42 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   29dd6:	687b      	ldr	r3, [r7, #4]
   29dd8:	781b      	ldrb	r3, [r3, #0]
   29dda:	2b80      	cmp	r3, #128	; 0x80
   29ddc:	d00b      	beq.n	29df6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   29dde:	69fb      	ldr	r3, [r7, #28]
   29de0:	2280      	movs	r2, #128	; 0x80
   29de2:	0252      	lsls	r2, r2, #9
   29de4:	4313      	orrs	r3, r2
   29de6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   29de8:	687b      	ldr	r3, [r7, #4]
   29dea:	781b      	ldrb	r3, [r3, #0]
   29dec:	061b      	lsls	r3, r3, #24
   29dee:	001a      	movs	r2, r3
   29df0:	69fb      	ldr	r3, [r7, #28]
   29df2:	4313      	orrs	r3, r2
   29df4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29df6:	687b      	ldr	r3, [r7, #4]
   29df8:	785b      	ldrb	r3, [r3, #1]
   29dfa:	2b00      	cmp	r3, #0
   29dfc:	d003      	beq.n	29e06 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29dfe:	687b      	ldr	r3, [r7, #4]
   29e00:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29e02:	2b02      	cmp	r3, #2
   29e04:	d110      	bne.n	29e28 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   29e06:	69fb      	ldr	r3, [r7, #28]
   29e08:	2280      	movs	r2, #128	; 0x80
   29e0a:	0292      	lsls	r2, r2, #10
   29e0c:	4313      	orrs	r3, r2
   29e0e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   29e10:	687b      	ldr	r3, [r7, #4]
   29e12:	789b      	ldrb	r3, [r3, #2]
   29e14:	2b00      	cmp	r3, #0
   29e16:	d004      	beq.n	29e22 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   29e18:	69fb      	ldr	r3, [r7, #28]
   29e1a:	2280      	movs	r2, #128	; 0x80
   29e1c:	02d2      	lsls	r2, r2, #11
   29e1e:	4313      	orrs	r3, r2
   29e20:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   29e22:	68fb      	ldr	r3, [r7, #12]
   29e24:	68ba      	ldr	r2, [r7, #8]
   29e26:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29e28:	687b      	ldr	r3, [r7, #4]
   29e2a:	785b      	ldrb	r3, [r3, #1]
   29e2c:	2b01      	cmp	r3, #1
   29e2e:	d003      	beq.n	29e38 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29e30:	687b      	ldr	r3, [r7, #4]
   29e32:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29e34:	2b02      	cmp	r3, #2
   29e36:	d107      	bne.n	29e48 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   29e38:	69fb      	ldr	r3, [r7, #28]
   29e3a:	4a22      	ldr	r2, [pc, #136]	; (29ec4 <_system_pinmux_config+0x10c>)
   29e3c:	4013      	ands	r3, r2
   29e3e:	61fb      	str	r3, [r7, #28]
   29e40:	e002      	b.n	29e48 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   29e42:	68fb      	ldr	r3, [r7, #12]
   29e44:	68ba      	ldr	r2, [r7, #8]
   29e46:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   29e48:	68bb      	ldr	r3, [r7, #8]
   29e4a:	041b      	lsls	r3, r3, #16
   29e4c:	0c1b      	lsrs	r3, r3, #16
   29e4e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   29e50:	68bb      	ldr	r3, [r7, #8]
   29e52:	0c1b      	lsrs	r3, r3, #16
   29e54:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29e56:	69ba      	ldr	r2, [r7, #24]
   29e58:	69fb      	ldr	r3, [r7, #28]
   29e5a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   29e5c:	22a0      	movs	r2, #160	; 0xa0
   29e5e:	05d2      	lsls	r2, r2, #23
   29e60:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29e62:	68fb      	ldr	r3, [r7, #12]
   29e64:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29e66:	697a      	ldr	r2, [r7, #20]
   29e68:	69fb      	ldr	r3, [r7, #28]
   29e6a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   29e6c:	22d0      	movs	r2, #208	; 0xd0
   29e6e:	0612      	lsls	r2, r2, #24
   29e70:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29e72:	68fb      	ldr	r3, [r7, #12]
   29e74:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   29e76:	687b      	ldr	r3, [r7, #4]
   29e78:	78db      	ldrb	r3, [r3, #3]
   29e7a:	2201      	movs	r2, #1
   29e7c:	4053      	eors	r3, r2
   29e7e:	b2db      	uxtb	r3, r3
   29e80:	2b00      	cmp	r3, #0
   29e82:	d01a      	beq.n	29eba <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   29e84:	69fa      	ldr	r2, [r7, #28]
   29e86:	2380      	movs	r3, #128	; 0x80
   29e88:	02db      	lsls	r3, r3, #11
   29e8a:	4013      	ands	r3, r2
   29e8c:	d00a      	beq.n	29ea4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   29e8e:	687b      	ldr	r3, [r7, #4]
   29e90:	789b      	ldrb	r3, [r3, #2]
   29e92:	2b01      	cmp	r3, #1
   29e94:	d103      	bne.n	29e9e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   29e96:	68fb      	ldr	r3, [r7, #12]
   29e98:	68ba      	ldr	r2, [r7, #8]
   29e9a:	619a      	str	r2, [r3, #24]
   29e9c:	e002      	b.n	29ea4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   29e9e:	68fb      	ldr	r3, [r7, #12]
   29ea0:	68ba      	ldr	r2, [r7, #8]
   29ea2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29ea4:	687b      	ldr	r3, [r7, #4]
   29ea6:	785b      	ldrb	r3, [r3, #1]
   29ea8:	2b01      	cmp	r3, #1
   29eaa:	d003      	beq.n	29eb4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29eac:	687b      	ldr	r3, [r7, #4]
   29eae:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29eb0:	2b02      	cmp	r3, #2
   29eb2:	d102      	bne.n	29eba <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   29eb4:	68fb      	ldr	r3, [r7, #12]
   29eb6:	68ba      	ldr	r2, [r7, #8]
   29eb8:	609a      	str	r2, [r3, #8]
		}
	}
}
   29eba:	46c0      	nop			; (mov r8, r8)
   29ebc:	46bd      	mov	sp, r7
   29ebe:	b008      	add	sp, #32
   29ec0:	bd80      	pop	{r7, pc}
   29ec2:	46c0      	nop			; (mov r8, r8)
   29ec4:	fffbffff 	.word	0xfffbffff

00029ec8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   29ec8:	b580      	push	{r7, lr}
   29eca:	b084      	sub	sp, #16
   29ecc:	af00      	add	r7, sp, #0
   29ece:	0002      	movs	r2, r0
   29ed0:	6039      	str	r1, [r7, #0]
   29ed2:	1dfb      	adds	r3, r7, #7
   29ed4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   29ed6:	1dfb      	adds	r3, r7, #7
   29ed8:	781b      	ldrb	r3, [r3, #0]
   29eda:	0018      	movs	r0, r3
   29edc:	4b0a      	ldr	r3, [pc, #40]	; (29f08 <system_pinmux_pin_set_config+0x40>)
   29ede:	4798      	blx	r3
   29ee0:	0003      	movs	r3, r0
   29ee2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   29ee4:	1dfb      	adds	r3, r7, #7
   29ee6:	781b      	ldrb	r3, [r3, #0]
   29ee8:	221f      	movs	r2, #31
   29eea:	4013      	ands	r3, r2
   29eec:	2201      	movs	r2, #1
   29eee:	409a      	lsls	r2, r3
   29ef0:	0013      	movs	r3, r2
   29ef2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   29ef4:	683a      	ldr	r2, [r7, #0]
   29ef6:	68b9      	ldr	r1, [r7, #8]
   29ef8:	68fb      	ldr	r3, [r7, #12]
   29efa:	0018      	movs	r0, r3
   29efc:	4b03      	ldr	r3, [pc, #12]	; (29f0c <system_pinmux_pin_set_config+0x44>)
   29efe:	4798      	blx	r3
}
   29f00:	46c0      	nop			; (mov r8, r8)
   29f02:	46bd      	mov	sp, r7
   29f04:	b004      	add	sp, #16
   29f06:	bd80      	pop	{r7, pc}
   29f08:	00029d59 	.word	0x00029d59
   29f0c:	00029db9 	.word	0x00029db9

00029f10 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   29f10:	b580      	push	{r7, lr}
   29f12:	af00      	add	r7, sp, #0
	return;
   29f14:	46c0      	nop			; (mov r8, r8)
}
   29f16:	46bd      	mov	sp, r7
   29f18:	bd80      	pop	{r7, pc}
	...

00029f1c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   29f1c:	b580      	push	{r7, lr}
   29f1e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   29f20:	4b06      	ldr	r3, [pc, #24]	; (29f3c <system_init+0x20>)
   29f22:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   29f24:	4b06      	ldr	r3, [pc, #24]	; (29f40 <system_init+0x24>)
   29f26:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   29f28:	4b06      	ldr	r3, [pc, #24]	; (29f44 <system_init+0x28>)
   29f2a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   29f2c:	4b06      	ldr	r3, [pc, #24]	; (29f48 <system_init+0x2c>)
   29f2e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   29f30:	4b06      	ldr	r3, [pc, #24]	; (29f4c <system_init+0x30>)
   29f32:	4798      	blx	r3
}
   29f34:	46c0      	nop			; (mov r8, r8)
   29f36:	46bd      	mov	sp, r7
   29f38:	bd80      	pop	{r7, pc}
   29f3a:	46c0      	nop			; (mov r8, r8)
   29f3c:	0002959d 	.word	0x0002959d
   29f40:	00026065 	.word	0x00026065
   29f44:	00012669 	.word	0x00012669
   29f48:	0002643d 	.word	0x0002643d
   29f4c:	00029f11 	.word	0x00029f11

00029f50 <system_gclk_chan_get_config_defaults>:
{
   29f50:	b580      	push	{r7, lr}
   29f52:	b082      	sub	sp, #8
   29f54:	af00      	add	r7, sp, #0
   29f56:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29f58:	687b      	ldr	r3, [r7, #4]
   29f5a:	2200      	movs	r2, #0
   29f5c:	701a      	strb	r2, [r3, #0]
}
   29f5e:	46c0      	nop			; (mov r8, r8)
   29f60:	46bd      	mov	sp, r7
   29f62:	b002      	add	sp, #8
   29f64:	bd80      	pop	{r7, pc}
	...

00029f68 <system_apb_clock_set_mask>:
{
   29f68:	b580      	push	{r7, lr}
   29f6a:	b082      	sub	sp, #8
   29f6c:	af00      	add	r7, sp, #0
   29f6e:	0002      	movs	r2, r0
   29f70:	6039      	str	r1, [r7, #0]
   29f72:	1dfb      	adds	r3, r7, #7
   29f74:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29f76:	1dfb      	adds	r3, r7, #7
   29f78:	781b      	ldrb	r3, [r3, #0]
   29f7a:	2b01      	cmp	r3, #1
   29f7c:	d00a      	beq.n	29f94 <system_apb_clock_set_mask+0x2c>
   29f7e:	2b02      	cmp	r3, #2
   29f80:	d00f      	beq.n	29fa2 <system_apb_clock_set_mask+0x3a>
   29f82:	2b00      	cmp	r3, #0
   29f84:	d114      	bne.n	29fb0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29f86:	4b0e      	ldr	r3, [pc, #56]	; (29fc0 <system_apb_clock_set_mask+0x58>)
   29f88:	4a0d      	ldr	r2, [pc, #52]	; (29fc0 <system_apb_clock_set_mask+0x58>)
   29f8a:	6991      	ldr	r1, [r2, #24]
   29f8c:	683a      	ldr	r2, [r7, #0]
   29f8e:	430a      	orrs	r2, r1
   29f90:	619a      	str	r2, [r3, #24]
			break;
   29f92:	e00f      	b.n	29fb4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29f94:	4b0a      	ldr	r3, [pc, #40]	; (29fc0 <system_apb_clock_set_mask+0x58>)
   29f96:	4a0a      	ldr	r2, [pc, #40]	; (29fc0 <system_apb_clock_set_mask+0x58>)
   29f98:	69d1      	ldr	r1, [r2, #28]
   29f9a:	683a      	ldr	r2, [r7, #0]
   29f9c:	430a      	orrs	r2, r1
   29f9e:	61da      	str	r2, [r3, #28]
			break;
   29fa0:	e008      	b.n	29fb4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29fa2:	4b07      	ldr	r3, [pc, #28]	; (29fc0 <system_apb_clock_set_mask+0x58>)
   29fa4:	4a06      	ldr	r2, [pc, #24]	; (29fc0 <system_apb_clock_set_mask+0x58>)
   29fa6:	6a11      	ldr	r1, [r2, #32]
   29fa8:	683a      	ldr	r2, [r7, #0]
   29faa:	430a      	orrs	r2, r1
   29fac:	621a      	str	r2, [r3, #32]
			break;
   29fae:	e001      	b.n	29fb4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29fb0:	2317      	movs	r3, #23
   29fb2:	e000      	b.n	29fb6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29fb4:	2300      	movs	r3, #0
}
   29fb6:	0018      	movs	r0, r3
   29fb8:	46bd      	mov	sp, r7
   29fba:	b002      	add	sp, #8
   29fbc:	bd80      	pop	{r7, pc}
   29fbe:	46c0      	nop			; (mov r8, r8)
   29fc0:	40000400 	.word	0x40000400

00029fc4 <system_pinmux_get_config_defaults>:
{
   29fc4:	b580      	push	{r7, lr}
   29fc6:	b082      	sub	sp, #8
   29fc8:	af00      	add	r7, sp, #0
   29fca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29fcc:	687b      	ldr	r3, [r7, #4]
   29fce:	2280      	movs	r2, #128	; 0x80
   29fd0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29fd2:	687b      	ldr	r3, [r7, #4]
   29fd4:	2200      	movs	r2, #0
   29fd6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   29fd8:	687b      	ldr	r3, [r7, #4]
   29fda:	2201      	movs	r2, #1
   29fdc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29fde:	687b      	ldr	r3, [r7, #4]
   29fe0:	2200      	movs	r2, #0
   29fe2:	70da      	strb	r2, [r3, #3]
}
   29fe4:	46c0      	nop			; (mov r8, r8)
   29fe6:	46bd      	mov	sp, r7
   29fe8:	b002      	add	sp, #8
   29fea:	bd80      	pop	{r7, pc}

00029fec <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   29fec:	b580      	push	{r7, lr}
   29fee:	b084      	sub	sp, #16
   29ff0:	af00      	add	r7, sp, #0
   29ff2:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   29ff4:	2300      	movs	r3, #0
   29ff6:	60fb      	str	r3, [r7, #12]
   29ff8:	e00c      	b.n	2a014 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   29ffa:	4b0a      	ldr	r3, [pc, #40]	; (2a024 <_tcc_get_inst_index+0x38>)
   29ffc:	68fa      	ldr	r2, [r7, #12]
   29ffe:	0092      	lsls	r2, r2, #2
   2a000:	58d2      	ldr	r2, [r2, r3]
   2a002:	687b      	ldr	r3, [r7, #4]
   2a004:	429a      	cmp	r2, r3
   2a006:	d102      	bne.n	2a00e <_tcc_get_inst_index+0x22>
			return i;
   2a008:	68fb      	ldr	r3, [r7, #12]
   2a00a:	b2db      	uxtb	r3, r3
   2a00c:	e006      	b.n	2a01c <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2a00e:	68fb      	ldr	r3, [r7, #12]
   2a010:	3301      	adds	r3, #1
   2a012:	60fb      	str	r3, [r7, #12]
   2a014:	68fb      	ldr	r3, [r7, #12]
   2a016:	2b02      	cmp	r3, #2
   2a018:	d9ef      	bls.n	29ffa <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2a01a:	2300      	movs	r3, #0
}
   2a01c:	0018      	movs	r0, r3
   2a01e:	46bd      	mov	sp, r7
   2a020:	b004      	add	sp, #16
   2a022:	bd80      	pop	{r7, pc}
   2a024:	00039250 	.word	0x00039250

0002a028 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2a028:	b590      	push	{r4, r7, lr}
   2a02a:	b085      	sub	sp, #20
   2a02c:	af00      	add	r7, sp, #0
   2a02e:	6078      	str	r0, [r7, #4]
   2a030:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a032:	230f      	movs	r3, #15
   2a034:	18fc      	adds	r4, r7, r3
   2a036:	683b      	ldr	r3, [r7, #0]
   2a038:	0018      	movs	r0, r3
   2a03a:	4bad      	ldr	r3, [pc, #692]	; (2a2f0 <tcc_get_config_defaults+0x2c8>)
   2a03c:	4798      	blx	r3
   2a03e:	0003      	movs	r3, r0
   2a040:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2a042:	687b      	ldr	r3, [r7, #4]
   2a044:	2200      	movs	r2, #0
   2a046:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2a048:	230f      	movs	r3, #15
   2a04a:	18fb      	adds	r3, r7, r3
   2a04c:	781a      	ldrb	r2, [r3, #0]
   2a04e:	4ba9      	ldr	r3, [pc, #676]	; (2a2f4 <tcc_get_config_defaults+0x2cc>)
   2a050:	0092      	lsls	r2, r2, #2
   2a052:	58d2      	ldr	r2, [r2, r3]
   2a054:	687b      	ldr	r3, [r7, #4]
   2a056:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2a058:	687b      	ldr	r3, [r7, #4]
   2a05a:	2200      	movs	r2, #0
   2a05c:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2a05e:	687b      	ldr	r3, [r7, #4]
   2a060:	2200      	movs	r2, #0
   2a062:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2a064:	687b      	ldr	r3, [r7, #4]
   2a066:	2200      	movs	r2, #0
   2a068:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2a06a:	687b      	ldr	r3, [r7, #4]
   2a06c:	2200      	movs	r2, #0
   2a06e:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2a070:	687b      	ldr	r3, [r7, #4]
   2a072:	2200      	movs	r2, #0
   2a074:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a076:	687b      	ldr	r3, [r7, #4]
   2a078:	2200      	movs	r2, #0
   2a07a:	61da      	str	r2, [r3, #28]
   2a07c:	687b      	ldr	r3, [r7, #4]
   2a07e:	2200      	movs	r2, #0
   2a080:	621a      	str	r2, [r3, #32]
   2a082:	687b      	ldr	r3, [r7, #4]
   2a084:	2200      	movs	r2, #0
   2a086:	625a      	str	r2, [r3, #36]	; 0x24
   2a088:	687b      	ldr	r3, [r7, #4]
   2a08a:	2200      	movs	r2, #0
   2a08c:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a08e:	687b      	ldr	r3, [r7, #4]
   2a090:	2200      	movs	r2, #0
   2a092:	751a      	strb	r2, [r3, #20]
   2a094:	687b      	ldr	r3, [r7, #4]
   2a096:	2200      	movs	r2, #0
   2a098:	755a      	strb	r2, [r3, #21]
   2a09a:	687b      	ldr	r3, [r7, #4]
   2a09c:	2200      	movs	r2, #0
   2a09e:	759a      	strb	r2, [r3, #22]
   2a0a0:	687b      	ldr	r3, [r7, #4]
   2a0a2:	2200      	movs	r2, #0
   2a0a4:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2a0a6:	687b      	ldr	r3, [r7, #4]
   2a0a8:	2200      	movs	r2, #0
   2a0aa:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2a0ac:	687b      	ldr	r3, [r7, #4]
   2a0ae:	2200      	movs	r2, #0
   2a0b0:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a0b2:	687b      	ldr	r3, [r7, #4]
   2a0b4:	2200      	movs	r2, #0
   2a0b6:	741a      	strb	r2, [r3, #16]
   2a0b8:	687b      	ldr	r3, [r7, #4]
   2a0ba:	2200      	movs	r2, #0
   2a0bc:	745a      	strb	r2, [r3, #17]
   2a0be:	687b      	ldr	r3, [r7, #4]
   2a0c0:	2200      	movs	r2, #0
   2a0c2:	749a      	strb	r2, [r3, #18]
   2a0c4:	687b      	ldr	r3, [r7, #4]
   2a0c6:	2200      	movs	r2, #0
   2a0c8:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2a0ca:	687b      	ldr	r3, [r7, #4]
   2a0cc:	222c      	movs	r2, #44	; 0x2c
   2a0ce:	2100      	movs	r1, #0
   2a0d0:	5499      	strb	r1, [r3, r2]
   2a0d2:	687b      	ldr	r3, [r7, #4]
   2a0d4:	222d      	movs	r2, #45	; 0x2d
   2a0d6:	2100      	movs	r1, #0
   2a0d8:	5499      	strb	r1, [r3, r2]
   2a0da:	687b      	ldr	r3, [r7, #4]
   2a0dc:	222e      	movs	r2, #46	; 0x2e
   2a0de:	2100      	movs	r1, #0
   2a0e0:	5499      	strb	r1, [r3, r2]
   2a0e2:	687b      	ldr	r3, [r7, #4]
   2a0e4:	222f      	movs	r2, #47	; 0x2f
   2a0e6:	2100      	movs	r1, #0
   2a0e8:	5499      	strb	r1, [r3, r2]
   2a0ea:	687b      	ldr	r3, [r7, #4]
   2a0ec:	2230      	movs	r2, #48	; 0x30
   2a0ee:	2100      	movs	r1, #0
   2a0f0:	5499      	strb	r1, [r3, r2]
   2a0f2:	687b      	ldr	r3, [r7, #4]
   2a0f4:	2231      	movs	r2, #49	; 0x31
   2a0f6:	2100      	movs	r1, #0
   2a0f8:	5499      	strb	r1, [r3, r2]
   2a0fa:	687b      	ldr	r3, [r7, #4]
   2a0fc:	2232      	movs	r2, #50	; 0x32
   2a0fe:	2100      	movs	r1, #0
   2a100:	5499      	strb	r1, [r3, r2]
   2a102:	687b      	ldr	r3, [r7, #4]
   2a104:	2233      	movs	r2, #51	; 0x33
   2a106:	2100      	movs	r1, #0
   2a108:	5499      	strb	r1, [r3, r2]
   2a10a:	687b      	ldr	r3, [r7, #4]
   2a10c:	2234      	movs	r2, #52	; 0x34
   2a10e:	2100      	movs	r1, #0
   2a110:	5499      	strb	r1, [r3, r2]
   2a112:	687b      	ldr	r3, [r7, #4]
   2a114:	2235      	movs	r2, #53	; 0x35
   2a116:	2100      	movs	r1, #0
   2a118:	5499      	strb	r1, [r3, r2]
   2a11a:	687b      	ldr	r3, [r7, #4]
   2a11c:	2236      	movs	r2, #54	; 0x36
   2a11e:	2100      	movs	r1, #0
   2a120:	5499      	strb	r1, [r3, r2]
   2a122:	687b      	ldr	r3, [r7, #4]
   2a124:	2237      	movs	r2, #55	; 0x37
   2a126:	2100      	movs	r1, #0
   2a128:	5499      	strb	r1, [r3, r2]
   2a12a:	687b      	ldr	r3, [r7, #4]
   2a12c:	2238      	movs	r2, #56	; 0x38
   2a12e:	2100      	movs	r1, #0
   2a130:	5499      	strb	r1, [r3, r2]
   2a132:	687b      	ldr	r3, [r7, #4]
   2a134:	2239      	movs	r2, #57	; 0x39
   2a136:	2100      	movs	r1, #0
   2a138:	5499      	strb	r1, [r3, r2]
   2a13a:	687b      	ldr	r3, [r7, #4]
   2a13c:	223a      	movs	r2, #58	; 0x3a
   2a13e:	2100      	movs	r1, #0
   2a140:	5499      	strb	r1, [r3, r2]
   2a142:	687b      	ldr	r3, [r7, #4]
   2a144:	223b      	movs	r2, #59	; 0x3b
   2a146:	2100      	movs	r1, #0
   2a148:	5499      	strb	r1, [r3, r2]
   2a14a:	687b      	ldr	r3, [r7, #4]
   2a14c:	223c      	movs	r2, #60	; 0x3c
   2a14e:	2100      	movs	r1, #0
   2a150:	5499      	strb	r1, [r3, r2]
   2a152:	687b      	ldr	r3, [r7, #4]
   2a154:	223d      	movs	r2, #61	; 0x3d
   2a156:	2100      	movs	r1, #0
   2a158:	5499      	strb	r1, [r3, r2]
   2a15a:	687b      	ldr	r3, [r7, #4]
   2a15c:	223e      	movs	r2, #62	; 0x3e
   2a15e:	2100      	movs	r1, #0
   2a160:	5499      	strb	r1, [r3, r2]
   2a162:	687b      	ldr	r3, [r7, #4]
   2a164:	223f      	movs	r2, #63	; 0x3f
   2a166:	2100      	movs	r1, #0
   2a168:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2a16a:	687b      	ldr	r3, [r7, #4]
   2a16c:	2240      	movs	r2, #64	; 0x40
   2a16e:	2100      	movs	r1, #0
   2a170:	5499      	strb	r1, [r3, r2]
   2a172:	687b      	ldr	r3, [r7, #4]
   2a174:	2241      	movs	r2, #65	; 0x41
   2a176:	2100      	movs	r1, #0
   2a178:	5499      	strb	r1, [r3, r2]
   2a17a:	687b      	ldr	r3, [r7, #4]
   2a17c:	2242      	movs	r2, #66	; 0x42
   2a17e:	2100      	movs	r1, #0
   2a180:	5499      	strb	r1, [r3, r2]
   2a182:	687b      	ldr	r3, [r7, #4]
   2a184:	2243      	movs	r2, #67	; 0x43
   2a186:	2100      	movs	r1, #0
   2a188:	5499      	strb	r1, [r3, r2]
   2a18a:	687b      	ldr	r3, [r7, #4]
   2a18c:	2244      	movs	r2, #68	; 0x44
   2a18e:	2100      	movs	r1, #0
   2a190:	5499      	strb	r1, [r3, r2]
   2a192:	687b      	ldr	r3, [r7, #4]
   2a194:	2245      	movs	r2, #69	; 0x45
   2a196:	2100      	movs	r1, #0
   2a198:	5499      	strb	r1, [r3, r2]
   2a19a:	687b      	ldr	r3, [r7, #4]
   2a19c:	2246      	movs	r2, #70	; 0x46
   2a19e:	2100      	movs	r1, #0
   2a1a0:	5499      	strb	r1, [r3, r2]
   2a1a2:	687b      	ldr	r3, [r7, #4]
   2a1a4:	2247      	movs	r2, #71	; 0x47
   2a1a6:	2100      	movs	r1, #0
   2a1a8:	5499      	strb	r1, [r3, r2]
   2a1aa:	687b      	ldr	r3, [r7, #4]
   2a1ac:	2248      	movs	r2, #72	; 0x48
   2a1ae:	2100      	movs	r1, #0
   2a1b0:	5499      	strb	r1, [r3, r2]
   2a1b2:	687b      	ldr	r3, [r7, #4]
   2a1b4:	2249      	movs	r2, #73	; 0x49
   2a1b6:	2100      	movs	r1, #0
   2a1b8:	5499      	strb	r1, [r3, r2]
   2a1ba:	687b      	ldr	r3, [r7, #4]
   2a1bc:	224a      	movs	r2, #74	; 0x4a
   2a1be:	2100      	movs	r1, #0
   2a1c0:	5499      	strb	r1, [r3, r2]
   2a1c2:	687b      	ldr	r3, [r7, #4]
   2a1c4:	224b      	movs	r2, #75	; 0x4b
   2a1c6:	2100      	movs	r1, #0
   2a1c8:	5499      	strb	r1, [r3, r2]
   2a1ca:	687b      	ldr	r3, [r7, #4]
   2a1cc:	224c      	movs	r2, #76	; 0x4c
   2a1ce:	2100      	movs	r1, #0
   2a1d0:	5499      	strb	r1, [r3, r2]
   2a1d2:	687b      	ldr	r3, [r7, #4]
   2a1d4:	224d      	movs	r2, #77	; 0x4d
   2a1d6:	2100      	movs	r1, #0
   2a1d8:	5499      	strb	r1, [r3, r2]
   2a1da:	687b      	ldr	r3, [r7, #4]
   2a1dc:	224e      	movs	r2, #78	; 0x4e
   2a1de:	2100      	movs	r1, #0
   2a1e0:	5499      	strb	r1, [r3, r2]
   2a1e2:	687b      	ldr	r3, [r7, #4]
   2a1e4:	224f      	movs	r2, #79	; 0x4f
   2a1e6:	2100      	movs	r1, #0
   2a1e8:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2a1ea:	687b      	ldr	r3, [r7, #4]
   2a1ec:	2250      	movs	r2, #80	; 0x50
   2a1ee:	2100      	movs	r1, #0
   2a1f0:	5499      	strb	r1, [r3, r2]
   2a1f2:	687b      	ldr	r3, [r7, #4]
   2a1f4:	2251      	movs	r2, #81	; 0x51
   2a1f6:	2100      	movs	r1, #0
   2a1f8:	5499      	strb	r1, [r3, r2]
   2a1fa:	687b      	ldr	r3, [r7, #4]
   2a1fc:	2252      	movs	r2, #82	; 0x52
   2a1fe:	2100      	movs	r1, #0
   2a200:	5499      	strb	r1, [r3, r2]
   2a202:	687b      	ldr	r3, [r7, #4]
   2a204:	2253      	movs	r2, #83	; 0x53
   2a206:	2100      	movs	r1, #0
   2a208:	5499      	strb	r1, [r3, r2]
   2a20a:	687b      	ldr	r3, [r7, #4]
   2a20c:	2254      	movs	r2, #84	; 0x54
   2a20e:	2100      	movs	r1, #0
   2a210:	5499      	strb	r1, [r3, r2]
   2a212:	687b      	ldr	r3, [r7, #4]
   2a214:	2255      	movs	r2, #85	; 0x55
   2a216:	2100      	movs	r1, #0
   2a218:	5499      	strb	r1, [r3, r2]
   2a21a:	687b      	ldr	r3, [r7, #4]
   2a21c:	2256      	movs	r2, #86	; 0x56
   2a21e:	2100      	movs	r1, #0
   2a220:	5499      	strb	r1, [r3, r2]
   2a222:	687b      	ldr	r3, [r7, #4]
   2a224:	2257      	movs	r2, #87	; 0x57
   2a226:	2100      	movs	r1, #0
   2a228:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2a22a:	687b      	ldr	r3, [r7, #4]
   2a22c:	2298      	movs	r2, #152	; 0x98
   2a22e:	2100      	movs	r1, #0
   2a230:	5499      	strb	r1, [r3, r2]
   2a232:	687b      	ldr	r3, [r7, #4]
   2a234:	2200      	movs	r2, #0
   2a236:	659a      	str	r2, [r3, #88]	; 0x58
   2a238:	687b      	ldr	r3, [r7, #4]
   2a23a:	2200      	movs	r2, #0
   2a23c:	679a      	str	r2, [r3, #120]	; 0x78
   2a23e:	687b      	ldr	r3, [r7, #4]
   2a240:	2299      	movs	r2, #153	; 0x99
   2a242:	2100      	movs	r1, #0
   2a244:	5499      	strb	r1, [r3, r2]
   2a246:	687b      	ldr	r3, [r7, #4]
   2a248:	2200      	movs	r2, #0
   2a24a:	65da      	str	r2, [r3, #92]	; 0x5c
   2a24c:	687b      	ldr	r3, [r7, #4]
   2a24e:	2200      	movs	r2, #0
   2a250:	67da      	str	r2, [r3, #124]	; 0x7c
   2a252:	687b      	ldr	r3, [r7, #4]
   2a254:	229a      	movs	r2, #154	; 0x9a
   2a256:	2100      	movs	r1, #0
   2a258:	5499      	strb	r1, [r3, r2]
   2a25a:	687b      	ldr	r3, [r7, #4]
   2a25c:	2200      	movs	r2, #0
   2a25e:	661a      	str	r2, [r3, #96]	; 0x60
   2a260:	687b      	ldr	r3, [r7, #4]
   2a262:	2280      	movs	r2, #128	; 0x80
   2a264:	2100      	movs	r1, #0
   2a266:	5099      	str	r1, [r3, r2]
   2a268:	687b      	ldr	r3, [r7, #4]
   2a26a:	229b      	movs	r2, #155	; 0x9b
   2a26c:	2100      	movs	r1, #0
   2a26e:	5499      	strb	r1, [r3, r2]
   2a270:	687b      	ldr	r3, [r7, #4]
   2a272:	2200      	movs	r2, #0
   2a274:	665a      	str	r2, [r3, #100]	; 0x64
   2a276:	687b      	ldr	r3, [r7, #4]
   2a278:	2284      	movs	r2, #132	; 0x84
   2a27a:	2100      	movs	r1, #0
   2a27c:	5099      	str	r1, [r3, r2]
   2a27e:	687b      	ldr	r3, [r7, #4]
   2a280:	229c      	movs	r2, #156	; 0x9c
   2a282:	2100      	movs	r1, #0
   2a284:	5499      	strb	r1, [r3, r2]
   2a286:	687b      	ldr	r3, [r7, #4]
   2a288:	2200      	movs	r2, #0
   2a28a:	669a      	str	r2, [r3, #104]	; 0x68
   2a28c:	687b      	ldr	r3, [r7, #4]
   2a28e:	2288      	movs	r2, #136	; 0x88
   2a290:	2100      	movs	r1, #0
   2a292:	5099      	str	r1, [r3, r2]
   2a294:	687b      	ldr	r3, [r7, #4]
   2a296:	229d      	movs	r2, #157	; 0x9d
   2a298:	2100      	movs	r1, #0
   2a29a:	5499      	strb	r1, [r3, r2]
   2a29c:	687b      	ldr	r3, [r7, #4]
   2a29e:	2200      	movs	r2, #0
   2a2a0:	66da      	str	r2, [r3, #108]	; 0x6c
   2a2a2:	687b      	ldr	r3, [r7, #4]
   2a2a4:	228c      	movs	r2, #140	; 0x8c
   2a2a6:	2100      	movs	r1, #0
   2a2a8:	5099      	str	r1, [r3, r2]
   2a2aa:	687b      	ldr	r3, [r7, #4]
   2a2ac:	229e      	movs	r2, #158	; 0x9e
   2a2ae:	2100      	movs	r1, #0
   2a2b0:	5499      	strb	r1, [r3, r2]
   2a2b2:	687b      	ldr	r3, [r7, #4]
   2a2b4:	2200      	movs	r2, #0
   2a2b6:	671a      	str	r2, [r3, #112]	; 0x70
   2a2b8:	687b      	ldr	r3, [r7, #4]
   2a2ba:	2290      	movs	r2, #144	; 0x90
   2a2bc:	2100      	movs	r1, #0
   2a2be:	5099      	str	r1, [r3, r2]
   2a2c0:	687b      	ldr	r3, [r7, #4]
   2a2c2:	229f      	movs	r2, #159	; 0x9f
   2a2c4:	2100      	movs	r1, #0
   2a2c6:	5499      	strb	r1, [r3, r2]
   2a2c8:	687b      	ldr	r3, [r7, #4]
   2a2ca:	2200      	movs	r2, #0
   2a2cc:	675a      	str	r2, [r3, #116]	; 0x74
   2a2ce:	687b      	ldr	r3, [r7, #4]
   2a2d0:	2294      	movs	r2, #148	; 0x94
   2a2d2:	2100      	movs	r1, #0
   2a2d4:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2a2d6:	687b      	ldr	r3, [r7, #4]
   2a2d8:	22a0      	movs	r2, #160	; 0xa0
   2a2da:	2101      	movs	r1, #1
   2a2dc:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2a2de:	687b      	ldr	r3, [r7, #4]
   2a2e0:	22a1      	movs	r2, #161	; 0xa1
   2a2e2:	2100      	movs	r1, #0
   2a2e4:	5499      	strb	r1, [r3, r2]
}
   2a2e6:	46c0      	nop			; (mov r8, r8)
   2a2e8:	46bd      	mov	sp, r7
   2a2ea:	b005      	add	sp, #20
   2a2ec:	bd90      	pop	{r4, r7, pc}
   2a2ee:	46c0      	nop			; (mov r8, r8)
   2a2f0:	00029fed 	.word	0x00029fed
   2a2f4:	0003926c 	.word	0x0003926c

0002a2f8 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a2f8:	b580      	push	{r7, lr}
   2a2fa:	b086      	sub	sp, #24
   2a2fc:	af00      	add	r7, sp, #0
   2a2fe:	60b9      	str	r1, [r7, #8]
   2a300:	607a      	str	r2, [r7, #4]
   2a302:	230f      	movs	r3, #15
   2a304:	18fb      	adds	r3, r7, r3
   2a306:	1c02      	adds	r2, r0, #0
   2a308:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2a30a:	2300      	movs	r3, #0
   2a30c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a30e:	2300      	movs	r3, #0
   2a310:	613b      	str	r3, [r7, #16]
   2a312:	e01d      	b.n	2a350 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2a314:	68ba      	ldr	r2, [r7, #8]
   2a316:	693b      	ldr	r3, [r7, #16]
   2a318:	18d3      	adds	r3, r2, r3
   2a31a:	3310      	adds	r3, #16
   2a31c:	781b      	ldrb	r3, [r3, #0]
   2a31e:	2b01      	cmp	r3, #1
   2a320:	d113      	bne.n	2a34a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2a322:	230f      	movs	r3, #15
   2a324:	18fb      	adds	r3, r7, r3
   2a326:	781b      	ldrb	r3, [r3, #0]
   2a328:	4a1b      	ldr	r2, [pc, #108]	; (2a398 <_tcc_build_ctrla+0xa0>)
   2a32a:	5cd3      	ldrb	r3, [r2, r3]
   2a32c:	001a      	movs	r2, r3
   2a32e:	693b      	ldr	r3, [r7, #16]
   2a330:	429a      	cmp	r2, r3
   2a332:	da01      	bge.n	2a338 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2a334:	2317      	movs	r3, #23
   2a336:	e02a      	b.n	2a38e <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2a338:	2380      	movs	r3, #128	; 0x80
   2a33a:	045a      	lsls	r2, r3, #17
   2a33c:	693b      	ldr	r3, [r7, #16]
   2a33e:	409a      	lsls	r2, r3
   2a340:	0013      	movs	r3, r2
   2a342:	001a      	movs	r2, r3
   2a344:	697b      	ldr	r3, [r7, #20]
   2a346:	4313      	orrs	r3, r2
   2a348:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a34a:	693b      	ldr	r3, [r7, #16]
   2a34c:	3301      	adds	r3, #1
   2a34e:	613b      	str	r3, [r7, #16]
   2a350:	693b      	ldr	r3, [r7, #16]
   2a352:	2b03      	cmp	r3, #3
   2a354:	ddde      	ble.n	2a314 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2a356:	68bb      	ldr	r3, [r7, #8]
   2a358:	22a1      	movs	r2, #161	; 0xa1
   2a35a:	5c9b      	ldrb	r3, [r3, r2]
   2a35c:	2b00      	cmp	r3, #0
   2a35e:	d004      	beq.n	2a36a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2a360:	697b      	ldr	r3, [r7, #20]
   2a362:	2280      	movs	r2, #128	; 0x80
   2a364:	0112      	lsls	r2, r2, #4
   2a366:	4313      	orrs	r3, r2
   2a368:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2a36a:	68bb      	ldr	r3, [r7, #8]
   2a36c:	7b1b      	ldrb	r3, [r3, #12]
   2a36e:	031b      	lsls	r3, r3, #12
   2a370:	001a      	movs	r2, r3
   2a372:	697b      	ldr	r3, [r7, #20]
   2a374:	4313      	orrs	r3, r2
   2a376:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2a378:	68bb      	ldr	r3, [r7, #8]
   2a37a:	7adb      	ldrb	r3, [r3, #11]
   2a37c:	021b      	lsls	r3, r3, #8
   2a37e:	001a      	movs	r2, r3
   2a380:	697b      	ldr	r3, [r7, #20]
   2a382:	4313      	orrs	r3, r2
   2a384:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2a386:	687b      	ldr	r3, [r7, #4]
   2a388:	697a      	ldr	r2, [r7, #20]
   2a38a:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a38c:	2300      	movs	r3, #0
}
   2a38e:	0018      	movs	r0, r3
   2a390:	46bd      	mov	sp, r7
   2a392:	b006      	add	sp, #24
   2a394:	bd80      	pop	{r7, pc}
   2a396:	46c0      	nop			; (mov r8, r8)
   2a398:	00039278 	.word	0x00039278

0002a39c <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2a39c:	b580      	push	{r7, lr}
   2a39e:	b086      	sub	sp, #24
   2a3a0:	af00      	add	r7, sp, #0
   2a3a2:	60b9      	str	r1, [r7, #8]
   2a3a4:	607a      	str	r2, [r7, #4]
   2a3a6:	230f      	movs	r3, #15
   2a3a8:	18fb      	adds	r3, r7, r3
   2a3aa:	1c02      	adds	r2, r0, #0
   2a3ac:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2a3ae:	2317      	movs	r3, #23
   2a3b0:	18fb      	adds	r3, r7, r3
   2a3b2:	2200      	movs	r2, #0
   2a3b4:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2a3b6:	68bb      	ldr	r3, [r7, #8]
   2a3b8:	7a1b      	ldrb	r3, [r3, #8]
   2a3ba:	2b00      	cmp	r3, #0
   2a3bc:	d007      	beq.n	2a3ce <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2a3be:	2317      	movs	r3, #23
   2a3c0:	18fb      	adds	r3, r7, r3
   2a3c2:	2217      	movs	r2, #23
   2a3c4:	18ba      	adds	r2, r7, r2
   2a3c6:	7812      	ldrb	r2, [r2, #0]
   2a3c8:	2104      	movs	r1, #4
   2a3ca:	430a      	orrs	r2, r1
   2a3cc:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2a3ce:	68bb      	ldr	r3, [r7, #8]
   2a3d0:	7a5b      	ldrb	r3, [r3, #9]
   2a3d2:	2b01      	cmp	r3, #1
   2a3d4:	d107      	bne.n	2a3e6 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2a3d6:	2317      	movs	r3, #23
   2a3d8:	18fb      	adds	r3, r7, r3
   2a3da:	2217      	movs	r2, #23
   2a3dc:	18ba      	adds	r2, r7, r2
   2a3de:	7812      	ldrb	r2, [r2, #0]
   2a3e0:	2101      	movs	r1, #1
   2a3e2:	430a      	orrs	r2, r1
   2a3e4:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2a3e6:	687b      	ldr	r3, [r7, #4]
   2a3e8:	2217      	movs	r2, #23
   2a3ea:	18ba      	adds	r2, r7, r2
   2a3ec:	7812      	ldrb	r2, [r2, #0]
   2a3ee:	701a      	strb	r2, [r3, #0]
}
   2a3f0:	46c0      	nop			; (mov r8, r8)
   2a3f2:	46bd      	mov	sp, r7
   2a3f4:	b006      	add	sp, #24
   2a3f6:	bd80      	pop	{r7, pc}

0002a3f8 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a3f8:	b580      	push	{r7, lr}
   2a3fa:	b088      	sub	sp, #32
   2a3fc:	af00      	add	r7, sp, #0
   2a3fe:	60b9      	str	r1, [r7, #8]
   2a400:	607a      	str	r2, [r7, #4]
   2a402:	230f      	movs	r3, #15
   2a404:	18fb      	adds	r3, r7, r3
   2a406:	1c02      	adds	r2, r0, #0
   2a408:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a40a:	230f      	movs	r3, #15
   2a40c:	18fb      	adds	r3, r7, r3
   2a40e:	781a      	ldrb	r2, [r3, #0]
   2a410:	231b      	movs	r3, #27
   2a412:	18fb      	adds	r3, r7, r3
   2a414:	493e      	ldr	r1, [pc, #248]	; (2a510 <_tcc_build_faults+0x118>)
   2a416:	5c8a      	ldrb	r2, [r1, r2]
   2a418:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a41a:	2300      	movs	r3, #0
   2a41c:	61fb      	str	r3, [r7, #28]
   2a41e:	e06e      	b.n	2a4fe <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2a420:	69fa      	ldr	r2, [r7, #28]
   2a422:	0013      	movs	r3, r2
   2a424:	009b      	lsls	r3, r3, #2
   2a426:	189b      	adds	r3, r3, r2
   2a428:	005b      	lsls	r3, r3, #1
   2a42a:	3328      	adds	r3, #40	; 0x28
   2a42c:	68ba      	ldr	r2, [r7, #8]
   2a42e:	18d3      	adds	r3, r2, r3
   2a430:	3304      	adds	r3, #4
   2a432:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2a434:	697b      	ldr	r3, [r7, #20]
   2a436:	7a5b      	ldrb	r3, [r3, #9]
   2a438:	221b      	movs	r2, #27
   2a43a:	18ba      	adds	r2, r7, r2
   2a43c:	7812      	ldrb	r2, [r2, #0]
   2a43e:	429a      	cmp	r2, r3
   2a440:	d801      	bhi.n	2a446 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2a442:	2317      	movs	r3, #23
   2a444:	e05f      	b.n	2a506 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2a446:	697b      	ldr	r3, [r7, #20]
   2a448:	781b      	ldrb	r3, [r3, #0]
   2a44a:	2b0f      	cmp	r3, #15
   2a44c:	d901      	bls.n	2a452 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2a44e:	2317      	movs	r3, #23
   2a450:	e059      	b.n	2a506 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a452:	697b      	ldr	r3, [r7, #20]
   2a454:	781b      	ldrb	r3, [r3, #0]
   2a456:	061b      	lsls	r3, r3, #24
   2a458:	001a      	movs	r2, r3
   2a45a:	23f0      	movs	r3, #240	; 0xf0
   2a45c:	051b      	lsls	r3, r3, #20
   2a45e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2a460:	697b      	ldr	r3, [r7, #20]
   2a462:	785b      	ldrb	r3, [r3, #1]
   2a464:	041b      	lsls	r3, r3, #16
   2a466:	0019      	movs	r1, r3
   2a468:	23ff      	movs	r3, #255	; 0xff
   2a46a:	041b      	lsls	r3, r3, #16
   2a46c:	400b      	ands	r3, r1
   2a46e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2a470:	697b      	ldr	r3, [r7, #20]
   2a472:	789b      	ldrb	r3, [r3, #2]
   2a474:	2b00      	cmp	r3, #0
   2a476:	d001      	beq.n	2a47c <_tcc_build_faults+0x84>
   2a478:	2380      	movs	r3, #128	; 0x80
   2a47a:	e000      	b.n	2a47e <_tcc_build_faults+0x86>
   2a47c:	2300      	movs	r3, #0
   2a47e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2a480:	697b      	ldr	r3, [r7, #20]
   2a482:	78db      	ldrb	r3, [r3, #3]
   2a484:	2b00      	cmp	r3, #0
   2a486:	d001      	beq.n	2a48c <_tcc_build_faults+0x94>
   2a488:	2308      	movs	r3, #8
   2a48a:	e000      	b.n	2a48e <_tcc_build_faults+0x96>
   2a48c:	2300      	movs	r3, #0
   2a48e:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2a490:	697b      	ldr	r3, [r7, #20]
   2a492:	791b      	ldrb	r3, [r3, #4]
   2a494:	2b00      	cmp	r3, #0
   2a496:	d001      	beq.n	2a49c <_tcc_build_faults+0xa4>
   2a498:	2310      	movs	r3, #16
   2a49a:	e000      	b.n	2a49e <_tcc_build_faults+0xa6>
   2a49c:	2300      	movs	r3, #0
   2a49e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2a4a0:	697b      	ldr	r3, [r7, #20]
   2a4a2:	795b      	ldrb	r3, [r3, #5]
   2a4a4:	0019      	movs	r1, r3
   2a4a6:	2303      	movs	r3, #3
   2a4a8:	400b      	ands	r3, r1
   2a4aa:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2a4ac:	697b      	ldr	r3, [r7, #20]
   2a4ae:	799b      	ldrb	r3, [r3, #6]
   2a4b0:	015b      	lsls	r3, r3, #5
   2a4b2:	0019      	movs	r1, r3
   2a4b4:	2360      	movs	r3, #96	; 0x60
   2a4b6:	400b      	ands	r3, r1
   2a4b8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2a4ba:	697b      	ldr	r3, [r7, #20]
   2a4bc:	79db      	ldrb	r3, [r3, #7]
   2a4be:	021b      	lsls	r3, r3, #8
   2a4c0:	0019      	movs	r1, r3
   2a4c2:	23c0      	movs	r3, #192	; 0xc0
   2a4c4:	009b      	lsls	r3, r3, #2
   2a4c6:	400b      	ands	r3, r1
   2a4c8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2a4ca:	697b      	ldr	r3, [r7, #20]
   2a4cc:	7a1b      	ldrb	r3, [r3, #8]
   2a4ce:	031b      	lsls	r3, r3, #12
   2a4d0:	0019      	movs	r1, r3
   2a4d2:	23e0      	movs	r3, #224	; 0xe0
   2a4d4:	01db      	lsls	r3, r3, #7
   2a4d6:	400b      	ands	r3, r1
   2a4d8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2a4da:	697b      	ldr	r3, [r7, #20]
   2a4dc:	7a5b      	ldrb	r3, [r3, #9]
   2a4de:	029b      	lsls	r3, r3, #10
   2a4e0:	0019      	movs	r1, r3
   2a4e2:	23c0      	movs	r3, #192	; 0xc0
   2a4e4:	011b      	lsls	r3, r3, #4
   2a4e6:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a4e8:	4313      	orrs	r3, r2
   2a4ea:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2a4ec:	69fb      	ldr	r3, [r7, #28]
   2a4ee:	009b      	lsls	r3, r3, #2
   2a4f0:	687a      	ldr	r2, [r7, #4]
   2a4f2:	18d3      	adds	r3, r2, r3
   2a4f4:	693a      	ldr	r2, [r7, #16]
   2a4f6:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a4f8:	69fb      	ldr	r3, [r7, #28]
   2a4fa:	3301      	adds	r3, #1
   2a4fc:	61fb      	str	r3, [r7, #28]
   2a4fe:	69fb      	ldr	r3, [r7, #28]
   2a500:	2b01      	cmp	r3, #1
   2a502:	dd8d      	ble.n	2a420 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2a504:	2300      	movs	r3, #0
}
   2a506:	0018      	movs	r0, r3
   2a508:	46bd      	mov	sp, r7
   2a50a:	b008      	add	sp, #32
   2a50c:	bd80      	pop	{r7, pc}
   2a50e:	46c0      	nop			; (mov r8, r8)
   2a510:	00039278 	.word	0x00039278

0002a514 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a514:	b580      	push	{r7, lr}
   2a516:	b088      	sub	sp, #32
   2a518:	af00      	add	r7, sp, #0
   2a51a:	60b9      	str	r1, [r7, #8]
   2a51c:	607a      	str	r2, [r7, #4]
   2a51e:	230f      	movs	r3, #15
   2a520:	18fb      	adds	r3, r7, r3
   2a522:	1c02      	adds	r2, r0, #0
   2a524:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2a526:	230f      	movs	r3, #15
   2a528:	18fb      	adds	r3, r7, r3
   2a52a:	781a      	ldrb	r2, [r3, #0]
   2a52c:	2317      	movs	r3, #23
   2a52e:	18fb      	adds	r3, r7, r3
   2a530:	492d      	ldr	r1, [pc, #180]	; (2a5e8 <_tcc_build_drvctrl+0xd4>)
   2a532:	5c8a      	ldrb	r2, [r1, r2]
   2a534:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2a536:	2300      	movs	r3, #0
   2a538:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a53a:	2300      	movs	r3, #0
   2a53c:	61fb      	str	r3, [r7, #28]
   2a53e:	e048      	b.n	2a5d2 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2a540:	68ba      	ldr	r2, [r7, #8]
   2a542:	2150      	movs	r1, #80	; 0x50
   2a544:	69fb      	ldr	r3, [r7, #28]
   2a546:	18d3      	adds	r3, r2, r3
   2a548:	185b      	adds	r3, r3, r1
   2a54a:	781b      	ldrb	r3, [r3, #0]
   2a54c:	2b00      	cmp	r3, #0
   2a54e:	d010      	beq.n	2a572 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2a550:	2317      	movs	r3, #23
   2a552:	18fb      	adds	r3, r7, r3
   2a554:	781a      	ldrb	r2, [r3, #0]
   2a556:	69fb      	ldr	r3, [r7, #28]
   2a558:	429a      	cmp	r2, r3
   2a55a:	d801      	bhi.n	2a560 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2a55c:	2317      	movs	r3, #23
   2a55e:	e03f      	b.n	2a5e0 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2a560:	2380      	movs	r3, #128	; 0x80
   2a562:	025a      	lsls	r2, r3, #9
   2a564:	69fb      	ldr	r3, [r7, #28]
   2a566:	409a      	lsls	r2, r3
   2a568:	0013      	movs	r3, r2
   2a56a:	001a      	movs	r2, r3
   2a56c:	69bb      	ldr	r3, [r7, #24]
   2a56e:	4313      	orrs	r3, r2
   2a570:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2a572:	68ba      	ldr	r2, [r7, #8]
   2a574:	69fb      	ldr	r3, [r7, #28]
   2a576:	331c      	adds	r3, #28
   2a578:	005b      	lsls	r3, r3, #1
   2a57a:	18d3      	adds	r3, r2, r3
   2a57c:	3309      	adds	r3, #9
   2a57e:	781b      	ldrb	r3, [r3, #0]
   2a580:	2b00      	cmp	r3, #0
   2a582:	d023      	beq.n	2a5cc <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2a584:	2317      	movs	r3, #23
   2a586:	18fb      	adds	r3, r7, r3
   2a588:	781a      	ldrb	r2, [r3, #0]
   2a58a:	69fb      	ldr	r3, [r7, #28]
   2a58c:	429a      	cmp	r2, r3
   2a58e:	d801      	bhi.n	2a594 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2a590:	2317      	movs	r3, #23
   2a592:	e025      	b.n	2a5e0 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2a594:	68ba      	ldr	r2, [r7, #8]
   2a596:	69fb      	ldr	r3, [r7, #28]
   2a598:	331c      	adds	r3, #28
   2a59a:	005b      	lsls	r3, r3, #1
   2a59c:	18d3      	adds	r3, r2, r3
   2a59e:	3309      	adds	r3, #9
   2a5a0:	781b      	ldrb	r3, [r3, #0]
   2a5a2:	2b02      	cmp	r3, #2
   2a5a4:	d10a      	bne.n	2a5bc <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2a5a6:	2302      	movs	r3, #2
   2a5a8:	33ff      	adds	r3, #255	; 0xff
   2a5aa:	001a      	movs	r2, r3
   2a5ac:	69fb      	ldr	r3, [r7, #28]
   2a5ae:	409a      	lsls	r2, r3
   2a5b0:	0013      	movs	r3, r2
   2a5b2:	001a      	movs	r2, r3
   2a5b4:	69bb      	ldr	r3, [r7, #24]
   2a5b6:	4313      	orrs	r3, r2
   2a5b8:	61bb      	str	r3, [r7, #24]
   2a5ba:	e007      	b.n	2a5cc <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2a5bc:	2201      	movs	r2, #1
   2a5be:	69fb      	ldr	r3, [r7, #28]
   2a5c0:	409a      	lsls	r2, r3
   2a5c2:	0013      	movs	r3, r2
   2a5c4:	001a      	movs	r2, r3
   2a5c6:	69bb      	ldr	r3, [r7, #24]
   2a5c8:	4313      	orrs	r3, r2
   2a5ca:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a5cc:	69fb      	ldr	r3, [r7, #28]
   2a5ce:	3301      	adds	r3, #1
   2a5d0:	61fb      	str	r3, [r7, #28]
   2a5d2:	69fb      	ldr	r3, [r7, #28]
   2a5d4:	2b07      	cmp	r3, #7
   2a5d6:	d9b3      	bls.n	2a540 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2a5d8:	687b      	ldr	r3, [r7, #4]
   2a5da:	69ba      	ldr	r2, [r7, #24]
   2a5dc:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a5de:	2300      	movs	r3, #0
}
   2a5e0:	0018      	movs	r0, r3
   2a5e2:	46bd      	mov	sp, r7
   2a5e4:	b008      	add	sp, #32
   2a5e6:	bd80      	pop	{r7, pc}
   2a5e8:	0003927c 	.word	0x0003927c

0002a5ec <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a5ec:	b580      	push	{r7, lr}
   2a5ee:	b088      	sub	sp, #32
   2a5f0:	af00      	add	r7, sp, #0
   2a5f2:	60b9      	str	r1, [r7, #8]
   2a5f4:	607a      	str	r2, [r7, #4]
   2a5f6:	230f      	movs	r3, #15
   2a5f8:	18fb      	adds	r3, r7, r3
   2a5fa:	1c02      	adds	r2, r0, #0
   2a5fc:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a5fe:	230f      	movs	r3, #15
   2a600:	18fb      	adds	r3, r7, r3
   2a602:	781a      	ldrb	r2, [r3, #0]
   2a604:	2317      	movs	r3, #23
   2a606:	18fb      	adds	r3, r7, r3
   2a608:	491d      	ldr	r1, [pc, #116]	; (2a680 <_tcc_build_waves+0x94>)
   2a60a:	5c8a      	ldrb	r2, [r1, r2]
   2a60c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2a60e:	68bb      	ldr	r3, [r7, #8]
   2a610:	3310      	adds	r3, #16
   2a612:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a614:	693b      	ldr	r3, [r7, #16]
   2a616:	7a5b      	ldrb	r3, [r3, #9]
   2a618:	011b      	lsls	r3, r3, #4
   2a61a:	001a      	movs	r2, r3
   2a61c:	2330      	movs	r3, #48	; 0x30
   2a61e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2a620:	693b      	ldr	r3, [r7, #16]
   2a622:	7a1b      	ldrb	r3, [r3, #8]
   2a624:	0019      	movs	r1, r3
   2a626:	2307      	movs	r3, #7
   2a628:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a62a:	4313      	orrs	r3, r2
   2a62c:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a62e:	2300      	movs	r3, #0
   2a630:	61fb      	str	r3, [r7, #28]
   2a632:	e01a      	b.n	2a66a <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2a634:	693a      	ldr	r2, [r7, #16]
   2a636:	69fb      	ldr	r3, [r7, #28]
   2a638:	18d3      	adds	r3, r2, r3
   2a63a:	3304      	adds	r3, #4
   2a63c:	781b      	ldrb	r3, [r3, #0]
   2a63e:	2b00      	cmp	r3, #0
   2a640:	d010      	beq.n	2a664 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2a642:	2317      	movs	r3, #23
   2a644:	18fb      	adds	r3, r7, r3
   2a646:	781a      	ldrb	r2, [r3, #0]
   2a648:	69fb      	ldr	r3, [r7, #28]
   2a64a:	429a      	cmp	r2, r3
   2a64c:	dc01      	bgt.n	2a652 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2a64e:	2317      	movs	r3, #23
   2a650:	e012      	b.n	2a678 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2a652:	2380      	movs	r3, #128	; 0x80
   2a654:	025a      	lsls	r2, r3, #9
   2a656:	69fb      	ldr	r3, [r7, #28]
   2a658:	409a      	lsls	r2, r3
   2a65a:	0013      	movs	r3, r2
   2a65c:	001a      	movs	r2, r3
   2a65e:	69bb      	ldr	r3, [r7, #24]
   2a660:	4313      	orrs	r3, r2
   2a662:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a664:	69fb      	ldr	r3, [r7, #28]
   2a666:	3301      	adds	r3, #1
   2a668:	61fb      	str	r3, [r7, #28]
   2a66a:	69fb      	ldr	r3, [r7, #28]
   2a66c:	2b03      	cmp	r3, #3
   2a66e:	dde1      	ble.n	2a634 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2a670:	687b      	ldr	r3, [r7, #4]
   2a672:	69ba      	ldr	r2, [r7, #24]
   2a674:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2a676:	2300      	movs	r3, #0
}
   2a678:	0018      	movs	r0, r3
   2a67a:	46bd      	mov	sp, r7
   2a67c:	b008      	add	sp, #32
   2a67e:	bd80      	pop	{r7, pc}
   2a680:	00039278 	.word	0x00039278

0002a684 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2a684:	b590      	push	{r4, r7, lr}
   2a686:	b091      	sub	sp, #68	; 0x44
   2a688:	af00      	add	r7, sp, #0
   2a68a:	60f8      	str	r0, [r7, #12]
   2a68c:	60b9      	str	r1, [r7, #8]
   2a68e:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a690:	233b      	movs	r3, #59	; 0x3b
   2a692:	18fc      	adds	r4, r7, r3
   2a694:	68bb      	ldr	r3, [r7, #8]
   2a696:	0018      	movs	r0, r3
   2a698:	4bc4      	ldr	r3, [pc, #784]	; (2a9ac <tcc_init+0x328>)
   2a69a:	4798      	blx	r3
   2a69c:	0003      	movs	r3, r0
   2a69e:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2a6a0:	233b      	movs	r3, #59	; 0x3b
   2a6a2:	18fb      	adds	r3, r7, r3
   2a6a4:	781a      	ldrb	r2, [r3, #0]
   2a6a6:	4bc2      	ldr	r3, [pc, #776]	; (2a9b0 <tcc_init+0x32c>)
   2a6a8:	0092      	lsls	r2, r2, #2
   2a6aa:	58d3      	ldr	r3, [r2, r3]
   2a6ac:	0019      	movs	r1, r3
   2a6ae:	2002      	movs	r0, #2
   2a6b0:	4bc0      	ldr	r3, [pc, #768]	; (2a9b4 <tcc_init+0x330>)
   2a6b2:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2a6b4:	68bb      	ldr	r3, [r7, #8]
   2a6b6:	681b      	ldr	r3, [r3, #0]
   2a6b8:	2202      	movs	r2, #2
   2a6ba:	4013      	ands	r3, r2
   2a6bc:	d001      	beq.n	2a6c2 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2a6be:	231c      	movs	r3, #28
   2a6c0:	e1be      	b.n	2aa40 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2a6c2:	68bb      	ldr	r3, [r7, #8]
   2a6c4:	681b      	ldr	r3, [r3, #0]
   2a6c6:	2201      	movs	r2, #1
   2a6c8:	4013      	ands	r3, r2
   2a6ca:	d001      	beq.n	2a6d0 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2a6cc:	231c      	movs	r3, #28
   2a6ce:	e1b7      	b.n	2aa40 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2a6d0:	233b      	movs	r3, #59	; 0x3b
   2a6d2:	18fb      	adds	r3, r7, r3
   2a6d4:	781a      	ldrb	r2, [r3, #0]
   2a6d6:	4bb8      	ldr	r3, [pc, #736]	; (2a9b8 <tcc_init+0x334>)
   2a6d8:	0092      	lsls	r2, r2, #2
   2a6da:	58d3      	ldr	r3, [r2, r3]
   2a6dc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2a6de:	687b      	ldr	r3, [r7, #4]
   2a6e0:	681a      	ldr	r2, [r3, #0]
   2a6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a6e4:	429a      	cmp	r2, r3
   2a6e6:	d804      	bhi.n	2a6f2 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2a6e8:	687b      	ldr	r3, [r7, #4]
   2a6ea:	685a      	ldr	r2, [r3, #4]
   2a6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a6ee:	429a      	cmp	r2, r3
   2a6f0:	d901      	bls.n	2a6f6 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2a6f2:	2317      	movs	r3, #23
   2a6f4:	e1a4      	b.n	2aa40 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a6f6:	2300      	movs	r3, #0
   2a6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a6fa:	e00e      	b.n	2a71a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2a6fc:	687a      	ldr	r2, [r7, #4]
   2a6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a700:	3306      	adds	r3, #6
   2a702:	009b      	lsls	r3, r3, #2
   2a704:	18d3      	adds	r3, r2, r3
   2a706:	3304      	adds	r3, #4
   2a708:	681a      	ldr	r2, [r3, #0]
   2a70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a70c:	429a      	cmp	r2, r3
   2a70e:	d901      	bls.n	2a714 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2a710:	2317      	movs	r3, #23
   2a712:	e195      	b.n	2aa40 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a716:	3301      	adds	r3, #1
   2a718:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a71c:	2b03      	cmp	r3, #3
   2a71e:	dded      	ble.n	2a6fc <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a720:	2300      	movs	r3, #0
   2a722:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a724:	e019      	b.n	2a75a <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2a726:	687a      	ldr	r2, [r7, #4]
   2a728:	2198      	movs	r1, #152	; 0x98
   2a72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a72c:	18d3      	adds	r3, r2, r3
   2a72e:	185b      	adds	r3, r3, r1
   2a730:	781b      	ldrb	r3, [r3, #0]
   2a732:	2201      	movs	r2, #1
   2a734:	4053      	eors	r3, r2
   2a736:	b2db      	uxtb	r3, r3
   2a738:	2b00      	cmp	r3, #0
   2a73a:	d10a      	bne.n	2a752 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2a73c:	233b      	movs	r3, #59	; 0x3b
   2a73e:	18fb      	adds	r3, r7, r3
   2a740:	781b      	ldrb	r3, [r3, #0]
   2a742:	4a9e      	ldr	r2, [pc, #632]	; (2a9bc <tcc_init+0x338>)
   2a744:	5cd3      	ldrb	r3, [r2, r3]
   2a746:	001a      	movs	r2, r3
   2a748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a74a:	429a      	cmp	r2, r3
   2a74c:	dc02      	bgt.n	2a754 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2a74e:	2317      	movs	r3, #23
   2a750:	e176      	b.n	2aa40 <tcc_init+0x3bc>
			continue;
   2a752:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a756:	3301      	adds	r3, #1
   2a758:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a75c:	2b07      	cmp	r3, #7
   2a75e:	dde2      	ble.n	2a726 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2a760:	2300      	movs	r3, #0
   2a762:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2a764:	2333      	movs	r3, #51	; 0x33
   2a766:	18fc      	adds	r4, r7, r3
   2a768:	232c      	movs	r3, #44	; 0x2c
   2a76a:	18fa      	adds	r2, r7, r3
   2a76c:	6879      	ldr	r1, [r7, #4]
   2a76e:	233b      	movs	r3, #59	; 0x3b
   2a770:	18fb      	adds	r3, r7, r3
   2a772:	781b      	ldrb	r3, [r3, #0]
   2a774:	0018      	movs	r0, r3
   2a776:	4b92      	ldr	r3, [pc, #584]	; (2a9c0 <tcc_init+0x33c>)
   2a778:	4798      	blx	r3
   2a77a:	0003      	movs	r3, r0
   2a77c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a77e:	2333      	movs	r3, #51	; 0x33
   2a780:	18fb      	adds	r3, r7, r3
   2a782:	781b      	ldrb	r3, [r3, #0]
   2a784:	2b00      	cmp	r3, #0
   2a786:	d003      	beq.n	2a790 <tcc_init+0x10c>
		return status;
   2a788:	2333      	movs	r3, #51	; 0x33
   2a78a:	18fb      	adds	r3, r7, r3
   2a78c:	781b      	ldrb	r3, [r3, #0]
   2a78e:	e157      	b.n	2aa40 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2a790:	232b      	movs	r3, #43	; 0x2b
   2a792:	18fa      	adds	r2, r7, r3
   2a794:	6879      	ldr	r1, [r7, #4]
   2a796:	233b      	movs	r3, #59	; 0x3b
   2a798:	18fb      	adds	r3, r7, r3
   2a79a:	781b      	ldrb	r3, [r3, #0]
   2a79c:	0018      	movs	r0, r3
   2a79e:	4b89      	ldr	r3, [pc, #548]	; (2a9c4 <tcc_init+0x340>)
   2a7a0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2a7a2:	2333      	movs	r3, #51	; 0x33
   2a7a4:	18fc      	adds	r4, r7, r3
   2a7a6:	2320      	movs	r3, #32
   2a7a8:	18fa      	adds	r2, r7, r3
   2a7aa:	6879      	ldr	r1, [r7, #4]
   2a7ac:	233b      	movs	r3, #59	; 0x3b
   2a7ae:	18fb      	adds	r3, r7, r3
   2a7b0:	781b      	ldrb	r3, [r3, #0]
   2a7b2:	0018      	movs	r0, r3
   2a7b4:	4b84      	ldr	r3, [pc, #528]	; (2a9c8 <tcc_init+0x344>)
   2a7b6:	4798      	blx	r3
   2a7b8:	0003      	movs	r3, r0
   2a7ba:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a7bc:	2333      	movs	r3, #51	; 0x33
   2a7be:	18fb      	adds	r3, r7, r3
   2a7c0:	781b      	ldrb	r3, [r3, #0]
   2a7c2:	2b00      	cmp	r3, #0
   2a7c4:	d003      	beq.n	2a7ce <tcc_init+0x14a>
		return status;
   2a7c6:	2333      	movs	r3, #51	; 0x33
   2a7c8:	18fb      	adds	r3, r7, r3
   2a7ca:	781b      	ldrb	r3, [r3, #0]
   2a7cc:	e138      	b.n	2aa40 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2a7ce:	2300      	movs	r3, #0
   2a7d0:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2a7d2:	2333      	movs	r3, #51	; 0x33
   2a7d4:	18fc      	adds	r4, r7, r3
   2a7d6:	231c      	movs	r3, #28
   2a7d8:	18fa      	adds	r2, r7, r3
   2a7da:	6879      	ldr	r1, [r7, #4]
   2a7dc:	233b      	movs	r3, #59	; 0x3b
   2a7de:	18fb      	adds	r3, r7, r3
   2a7e0:	781b      	ldrb	r3, [r3, #0]
   2a7e2:	0018      	movs	r0, r3
   2a7e4:	4b79      	ldr	r3, [pc, #484]	; (2a9cc <tcc_init+0x348>)
   2a7e6:	4798      	blx	r3
   2a7e8:	0003      	movs	r3, r0
   2a7ea:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a7ec:	2333      	movs	r3, #51	; 0x33
   2a7ee:	18fb      	adds	r3, r7, r3
   2a7f0:	781b      	ldrb	r3, [r3, #0]
   2a7f2:	2b00      	cmp	r3, #0
   2a7f4:	d003      	beq.n	2a7fe <tcc_init+0x17a>
		return status;
   2a7f6:	2333      	movs	r3, #51	; 0x33
   2a7f8:	18fb      	adds	r3, r7, r3
   2a7fa:	781b      	ldrb	r3, [r3, #0]
   2a7fc:	e120      	b.n	2aa40 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2a7fe:	2333      	movs	r3, #51	; 0x33
   2a800:	18fc      	adds	r4, r7, r3
   2a802:	2318      	movs	r3, #24
   2a804:	18fa      	adds	r2, r7, r3
   2a806:	6879      	ldr	r1, [r7, #4]
   2a808:	233b      	movs	r3, #59	; 0x3b
   2a80a:	18fb      	adds	r3, r7, r3
   2a80c:	781b      	ldrb	r3, [r3, #0]
   2a80e:	0018      	movs	r0, r3
   2a810:	4b6f      	ldr	r3, [pc, #444]	; (2a9d0 <tcc_init+0x34c>)
   2a812:	4798      	blx	r3
   2a814:	0003      	movs	r3, r0
   2a816:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a818:	2333      	movs	r3, #51	; 0x33
   2a81a:	18fb      	adds	r3, r7, r3
   2a81c:	781b      	ldrb	r3, [r3, #0]
   2a81e:	2b00      	cmp	r3, #0
   2a820:	d003      	beq.n	2a82a <tcc_init+0x1a6>
		return status;
   2a822:	2333      	movs	r3, #51	; 0x33
   2a824:	18fb      	adds	r3, r7, r3
   2a826:	781b      	ldrb	r3, [r3, #0]
   2a828:	e10a      	b.n	2aa40 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a82a:	2300      	movs	r3, #0
   2a82c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a82e:	e009      	b.n	2a844 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2a830:	68fa      	ldr	r2, [r7, #12]
   2a832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a834:	009b      	lsls	r3, r3, #2
   2a836:	18d3      	adds	r3, r2, r3
   2a838:	3304      	adds	r3, #4
   2a83a:	2200      	movs	r2, #0
   2a83c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a83e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a840:	3301      	adds	r3, #1
   2a842:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a846:	2b0b      	cmp	r3, #11
   2a848:	ddf2      	ble.n	2a830 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2a84a:	68fb      	ldr	r3, [r7, #12]
   2a84c:	2200      	movs	r2, #0
   2a84e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2a850:	68fb      	ldr	r3, [r7, #12]
   2a852:	2200      	movs	r2, #0
   2a854:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2a856:	233b      	movs	r3, #59	; 0x3b
   2a858:	18fb      	adds	r3, r7, r3
   2a85a:	781a      	ldrb	r2, [r3, #0]
   2a85c:	4b5d      	ldr	r3, [pc, #372]	; (2a9d4 <tcc_init+0x350>)
   2a85e:	0092      	lsls	r2, r2, #2
   2a860:	68f9      	ldr	r1, [r7, #12]
   2a862:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2a864:	68fb      	ldr	r3, [r7, #12]
   2a866:	68ba      	ldr	r2, [r7, #8]
   2a868:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2a86a:	687b      	ldr	r3, [r7, #4]
   2a86c:	22a0      	movs	r2, #160	; 0xa0
   2a86e:	5c99      	ldrb	r1, [r3, r2]
   2a870:	68fb      	ldr	r3, [r7, #12]
   2a872:	223c      	movs	r2, #60	; 0x3c
   2a874:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2a876:	2314      	movs	r3, #20
   2a878:	18fb      	adds	r3, r7, r3
   2a87a:	0018      	movs	r0, r3
   2a87c:	4b56      	ldr	r3, [pc, #344]	; (2a9d8 <tcc_init+0x354>)
   2a87e:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2a880:	687b      	ldr	r3, [r7, #4]
   2a882:	7a9a      	ldrb	r2, [r3, #10]
   2a884:	2314      	movs	r3, #20
   2a886:	18fb      	adds	r3, r7, r3
   2a888:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2a88a:	233b      	movs	r3, #59	; 0x3b
   2a88c:	18fb      	adds	r3, r7, r3
   2a88e:	781b      	ldrb	r3, [r3, #0]
   2a890:	4a52      	ldr	r2, [pc, #328]	; (2a9dc <tcc_init+0x358>)
   2a892:	5cd3      	ldrb	r3, [r2, r3]
   2a894:	2214      	movs	r2, #20
   2a896:	18ba      	adds	r2, r7, r2
   2a898:	0011      	movs	r1, r2
   2a89a:	0018      	movs	r0, r3
   2a89c:	4b50      	ldr	r3, [pc, #320]	; (2a9e0 <tcc_init+0x35c>)
   2a89e:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2a8a0:	233b      	movs	r3, #59	; 0x3b
   2a8a2:	18fb      	adds	r3, r7, r3
   2a8a4:	781b      	ldrb	r3, [r3, #0]
   2a8a6:	4a4d      	ldr	r2, [pc, #308]	; (2a9dc <tcc_init+0x358>)
   2a8a8:	5cd3      	ldrb	r3, [r2, r3]
   2a8aa:	0018      	movs	r0, r3
   2a8ac:	4b4d      	ldr	r3, [pc, #308]	; (2a9e4 <tcc_init+0x360>)
   2a8ae:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2a8b0:	2300      	movs	r3, #0
   2a8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a8b4:	e02d      	b.n	2a912 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2a8b6:	687a      	ldr	r2, [r7, #4]
   2a8b8:	2198      	movs	r1, #152	; 0x98
   2a8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a8bc:	18d3      	adds	r3, r2, r3
   2a8be:	185b      	adds	r3, r3, r1
   2a8c0:	781b      	ldrb	r3, [r3, #0]
   2a8c2:	2201      	movs	r2, #1
   2a8c4:	4053      	eors	r3, r2
   2a8c6:	b2db      	uxtb	r3, r3
   2a8c8:	2b00      	cmp	r3, #0
   2a8ca:	d11e      	bne.n	2a90a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2a8cc:	2310      	movs	r3, #16
   2a8ce:	18fb      	adds	r3, r7, r3
   2a8d0:	0018      	movs	r0, r3
   2a8d2:	4b45      	ldr	r3, [pc, #276]	; (2a9e8 <tcc_init+0x364>)
   2a8d4:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2a8d6:	687b      	ldr	r3, [r7, #4]
   2a8d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a8da:	321e      	adds	r2, #30
   2a8dc:	0092      	lsls	r2, r2, #2
   2a8de:	58d3      	ldr	r3, [r2, r3]
   2a8e0:	b2da      	uxtb	r2, r3
   2a8e2:	2310      	movs	r3, #16
   2a8e4:	18fb      	adds	r3, r7, r3
   2a8e6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2a8e8:	2310      	movs	r3, #16
   2a8ea:	18fb      	adds	r3, r7, r3
   2a8ec:	2201      	movs	r2, #1
   2a8ee:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2a8f0:	687b      	ldr	r3, [r7, #4]
   2a8f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a8f4:	3216      	adds	r2, #22
   2a8f6:	0092      	lsls	r2, r2, #2
   2a8f8:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2a8fa:	b2db      	uxtb	r3, r3
   2a8fc:	2210      	movs	r2, #16
   2a8fe:	18ba      	adds	r2, r7, r2
   2a900:	0011      	movs	r1, r2
   2a902:	0018      	movs	r0, r3
   2a904:	4b39      	ldr	r3, [pc, #228]	; (2a9ec <tcc_init+0x368>)
   2a906:	4798      	blx	r3
   2a908:	e000      	b.n	2a90c <tcc_init+0x288>
			continue;
   2a90a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2a90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a90e:	3301      	adds	r3, #1
   2a910:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a912:	233b      	movs	r3, #59	; 0x3b
   2a914:	18fb      	adds	r3, r7, r3
   2a916:	781b      	ldrb	r3, [r3, #0]
   2a918:	4a28      	ldr	r2, [pc, #160]	; (2a9bc <tcc_init+0x338>)
   2a91a:	5cd3      	ldrb	r3, [r2, r3]
   2a91c:	001a      	movs	r2, r3
   2a91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a920:	429a      	cmp	r2, r3
   2a922:	dcc8      	bgt.n	2a8b6 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2a924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2a926:	68bb      	ldr	r3, [r7, #8]
   2a928:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2a92a:	46c0      	nop			; (mov r8, r8)
   2a92c:	68bb      	ldr	r3, [r7, #8]
   2a92e:	689b      	ldr	r3, [r3, #8]
   2a930:	2204      	movs	r2, #4
   2a932:	4013      	ands	r3, r2
   2a934:	d1fa      	bne.n	2a92c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2a936:	68bb      	ldr	r3, [r7, #8]
   2a938:	22ff      	movs	r2, #255	; 0xff
   2a93a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2a93c:	46c0      	nop			; (mov r8, r8)
   2a93e:	68bb      	ldr	r3, [r7, #8]
   2a940:	689b      	ldr	r3, [r3, #8]
   2a942:	2204      	movs	r2, #4
   2a944:	4013      	ands	r3, r2
   2a946:	d1fa      	bne.n	2a93e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2a948:	232b      	movs	r3, #43	; 0x2b
   2a94a:	18fb      	adds	r3, r7, r3
   2a94c:	781a      	ldrb	r2, [r3, #0]
   2a94e:	68bb      	ldr	r3, [r7, #8]
   2a950:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2a952:	2320      	movs	r3, #32
   2a954:	18fb      	adds	r3, r7, r3
   2a956:	681a      	ldr	r2, [r3, #0]
   2a958:	68bb      	ldr	r3, [r7, #8]
   2a95a:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2a95c:	2320      	movs	r3, #32
   2a95e:	18fb      	adds	r3, r7, r3
   2a960:	685a      	ldr	r2, [r3, #4]
   2a962:	68bb      	ldr	r3, [r7, #8]
   2a964:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2a966:	69fa      	ldr	r2, [r7, #28]
   2a968:	68bb      	ldr	r3, [r7, #8]
   2a96a:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2a96c:	46c0      	nop			; (mov r8, r8)
   2a96e:	68bb      	ldr	r3, [r7, #8]
   2a970:	689b      	ldr	r3, [r3, #8]
   2a972:	4a1f      	ldr	r2, [pc, #124]	; (2a9f0 <tcc_init+0x36c>)
   2a974:	4013      	ands	r3, r2
   2a976:	d1fa      	bne.n	2a96e <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2a978:	69ba      	ldr	r2, [r7, #24]
   2a97a:	68bb      	ldr	r3, [r7, #8]
   2a97c:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2a97e:	46c0      	nop			; (mov r8, r8)
   2a980:	68bb      	ldr	r3, [r7, #8]
   2a982:	689b      	ldr	r3, [r3, #8]
   2a984:	2210      	movs	r2, #16
   2a986:	4013      	ands	r3, r2
   2a988:	d1fa      	bne.n	2a980 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2a98a:	687b      	ldr	r3, [r7, #4]
   2a98c:	681a      	ldr	r2, [r3, #0]
   2a98e:	68bb      	ldr	r3, [r7, #8]
   2a990:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2a992:	46c0      	nop			; (mov r8, r8)
   2a994:	68bb      	ldr	r3, [r7, #8]
   2a996:	689b      	ldr	r3, [r3, #8]
   2a998:	4a16      	ldr	r2, [pc, #88]	; (2a9f4 <tcc_init+0x370>)
   2a99a:	4013      	ands	r3, r2
   2a99c:	d1fa      	bne.n	2a994 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2a99e:	687b      	ldr	r3, [r7, #4]
   2a9a0:	685a      	ldr	r2, [r3, #4]
   2a9a2:	68bb      	ldr	r3, [r7, #8]
   2a9a4:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2a9a6:	2300      	movs	r3, #0
   2a9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a9aa:	e03f      	b.n	2aa2c <tcc_init+0x3a8>
   2a9ac:	00029fed 	.word	0x00029fed
   2a9b0:	00039260 	.word	0x00039260
   2a9b4:	00029f69 	.word	0x00029f69
   2a9b8:	0003926c 	.word	0x0003926c
   2a9bc:	0003927c 	.word	0x0003927c
   2a9c0:	0002a2f9 	.word	0x0002a2f9
   2a9c4:	0002a39d 	.word	0x0002a39d
   2a9c8:	0002a3f9 	.word	0x0002a3f9
   2a9cc:	0002a515 	.word	0x0002a515
   2a9d0:	0002a5ed 	.word	0x0002a5ed
   2a9d4:	20005a7c 	.word	0x20005a7c
   2a9d8:	00029f51 	.word	0x00029f51
   2a9dc:	0003925c 	.word	0x0003925c
   2a9e0:	00029b69 	.word	0x00029b69
   2a9e4:	00029bad 	.word	0x00029bad
   2a9e8:	00029fc5 	.word	0x00029fc5
   2a9ec:	00029ec9 	.word	0x00029ec9
   2a9f0:	00020040 	.word	0x00020040
   2a9f4:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2a9f8:	46c0      	nop			; (mov r8, r8)
   2a9fa:	68bb      	ldr	r3, [r7, #8]
   2a9fc:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2a9fe:	4912      	ldr	r1, [pc, #72]	; (2aa48 <tcc_init+0x3c4>)
   2aa00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2aa02:	4091      	lsls	r1, r2
   2aa04:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2aa06:	4013      	ands	r3, r2
   2aa08:	d1f7      	bne.n	2a9fa <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2aa0a:	687a      	ldr	r2, [r7, #4]
   2aa0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aa0e:	3306      	adds	r3, #6
   2aa10:	009b      	lsls	r3, r3, #2
   2aa12:	18d3      	adds	r3, r2, r3
   2aa14:	3304      	adds	r3, #4
   2aa16:	681a      	ldr	r2, [r3, #0]
   2aa18:	68b9      	ldr	r1, [r7, #8]
   2aa1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aa1c:	3310      	adds	r3, #16
   2aa1e:	009b      	lsls	r3, r3, #2
   2aa20:	18cb      	adds	r3, r1, r3
   2aa22:	3304      	adds	r3, #4
   2aa24:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2aa26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aa28:	3301      	adds	r3, #1
   2aa2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aa2c:	233b      	movs	r3, #59	; 0x3b
   2aa2e:	18fb      	adds	r3, r7, r3
   2aa30:	781b      	ldrb	r3, [r3, #0]
   2aa32:	4a06      	ldr	r2, [pc, #24]	; (2aa4c <tcc_init+0x3c8>)
   2aa34:	5cd3      	ldrb	r3, [r2, r3]
   2aa36:	001a      	movs	r2, r3
   2aa38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aa3a:	429a      	cmp	r2, r3
   2aa3c:	dcdc      	bgt.n	2a9f8 <tcc_init+0x374>
	}

	return STATUS_OK;
   2aa3e:	2300      	movs	r3, #0
}
   2aa40:	0018      	movs	r0, r3
   2aa42:	46bd      	mov	sp, r7
   2aa44:	b011      	add	sp, #68	; 0x44
   2aa46:	bd90      	pop	{r4, r7, pc}
   2aa48:	00080100 	.word	0x00080100
   2aa4c:	00039278 	.word	0x00039278

0002aa50 <system_interrupt_enable>:
{
   2aa50:	b580      	push	{r7, lr}
   2aa52:	b082      	sub	sp, #8
   2aa54:	af00      	add	r7, sp, #0
   2aa56:	0002      	movs	r2, r0
   2aa58:	1dfb      	adds	r3, r7, #7
   2aa5a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2aa5c:	4b06      	ldr	r3, [pc, #24]	; (2aa78 <system_interrupt_enable+0x28>)
   2aa5e:	1dfa      	adds	r2, r7, #7
   2aa60:	7812      	ldrb	r2, [r2, #0]
   2aa62:	0011      	movs	r1, r2
   2aa64:	221f      	movs	r2, #31
   2aa66:	400a      	ands	r2, r1
   2aa68:	2101      	movs	r1, #1
   2aa6a:	4091      	lsls	r1, r2
   2aa6c:	000a      	movs	r2, r1
   2aa6e:	601a      	str	r2, [r3, #0]
}
   2aa70:	46c0      	nop			; (mov r8, r8)
   2aa72:	46bd      	mov	sp, r7
   2aa74:	b002      	add	sp, #8
   2aa76:	bd80      	pop	{r7, pc}
   2aa78:	e000e100 	.word	0xe000e100

0002aa7c <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2aa7c:	b580      	push	{r7, lr}
   2aa7e:	b082      	sub	sp, #8
   2aa80:	af00      	add	r7, sp, #0
   2aa82:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2aa84:	4a04      	ldr	r2, [pc, #16]	; (2aa98 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2aa86:	687b      	ldr	r3, [r7, #4]
   2aa88:	18d3      	adds	r3, r2, r3
   2aa8a:	781b      	ldrb	r3, [r3, #0]
   2aa8c:	b25b      	sxtb	r3, r3
}
   2aa8e:	0018      	movs	r0, r3
   2aa90:	46bd      	mov	sp, r7
   2aa92:	b002      	add	sp, #8
   2aa94:	bd80      	pop	{r7, pc}
   2aa96:	46c0      	nop			; (mov r8, r8)
   2aa98:	20000148 	.word	0x20000148

0002aa9c <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2aa9c:	b580      	push	{r7, lr}
   2aa9e:	b084      	sub	sp, #16
   2aaa0:	af00      	add	r7, sp, #0
   2aaa2:	60f8      	str	r0, [r7, #12]
   2aaa4:	60b9      	str	r1, [r7, #8]
   2aaa6:	1dfb      	adds	r3, r7, #7
   2aaa8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2aaaa:	1dfb      	adds	r3, r7, #7
   2aaac:	781b      	ldrb	r3, [r3, #0]
   2aaae:	68fa      	ldr	r2, [r7, #12]
   2aab0:	009b      	lsls	r3, r3, #2
   2aab2:	18d3      	adds	r3, r2, r3
   2aab4:	3304      	adds	r3, #4
   2aab6:	68ba      	ldr	r2, [r7, #8]
   2aab8:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2aaba:	68fb      	ldr	r3, [r7, #12]
   2aabc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2aabe:	1dfb      	adds	r3, r7, #7
   2aac0:	7819      	ldrb	r1, [r3, #0]
   2aac2:	4b05      	ldr	r3, [pc, #20]	; (2aad8 <tcc_register_callback+0x3c>)
   2aac4:	0089      	lsls	r1, r1, #2
   2aac6:	58cb      	ldr	r3, [r1, r3]
   2aac8:	431a      	orrs	r2, r3
   2aaca:	68fb      	ldr	r3, [r7, #12]
   2aacc:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2aace:	2300      	movs	r3, #0
}
   2aad0:	0018      	movs	r0, r3
   2aad2:	46bd      	mov	sp, r7
   2aad4:	b004      	add	sp, #16
   2aad6:	bd80      	pop	{r7, pc}
   2aad8:	00039280 	.word	0x00039280

0002aadc <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2aadc:	b580      	push	{r7, lr}
   2aade:	b082      	sub	sp, #8
   2aae0:	af00      	add	r7, sp, #0
   2aae2:	6078      	str	r0, [r7, #4]
   2aae4:	000a      	movs	r2, r1
   2aae6:	1cfb      	adds	r3, r7, #3
   2aae8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2aaea:	687b      	ldr	r3, [r7, #4]
   2aaec:	681b      	ldr	r3, [r3, #0]
   2aaee:	0018      	movs	r0, r3
   2aaf0:	4b0f      	ldr	r3, [pc, #60]	; (2ab30 <tcc_enable_callback+0x54>)
   2aaf2:	4798      	blx	r3
   2aaf4:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2aaf6:	0018      	movs	r0, r3
   2aaf8:	4b0e      	ldr	r3, [pc, #56]	; (2ab34 <tcc_enable_callback+0x58>)
   2aafa:	4798      	blx	r3
   2aafc:	0003      	movs	r3, r0
   2aafe:	0018      	movs	r0, r3
   2ab00:	4b0d      	ldr	r3, [pc, #52]	; (2ab38 <tcc_enable_callback+0x5c>)
   2ab02:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2ab04:	687b      	ldr	r3, [r7, #4]
   2ab06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2ab08:	1cfb      	adds	r3, r7, #3
   2ab0a:	7819      	ldrb	r1, [r3, #0]
   2ab0c:	4b0b      	ldr	r3, [pc, #44]	; (2ab3c <tcc_enable_callback+0x60>)
   2ab0e:	0089      	lsls	r1, r1, #2
   2ab10:	58cb      	ldr	r3, [r1, r3]
   2ab12:	431a      	orrs	r2, r3
   2ab14:	687b      	ldr	r3, [r7, #4]
   2ab16:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2ab18:	687b      	ldr	r3, [r7, #4]
   2ab1a:	681b      	ldr	r3, [r3, #0]
   2ab1c:	1cfa      	adds	r2, r7, #3
   2ab1e:	7811      	ldrb	r1, [r2, #0]
   2ab20:	4a06      	ldr	r2, [pc, #24]	; (2ab3c <tcc_enable_callback+0x60>)
   2ab22:	0089      	lsls	r1, r1, #2
   2ab24:	588a      	ldr	r2, [r1, r2]
   2ab26:	629a      	str	r2, [r3, #40]	; 0x28
}
   2ab28:	46c0      	nop			; (mov r8, r8)
   2ab2a:	46bd      	mov	sp, r7
   2ab2c:	b002      	add	sp, #8
   2ab2e:	bd80      	pop	{r7, pc}
   2ab30:	00029fed 	.word	0x00029fed
   2ab34:	0002aa7d 	.word	0x0002aa7d
   2ab38:	0002aa51 	.word	0x0002aa51
   2ab3c:	00039280 	.word	0x00039280

0002ab40 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2ab40:	b580      	push	{r7, lr}
   2ab42:	af00      	add	r7, sp, #0
   2ab44:	2000      	movs	r0, #0
   2ab46:	4b02      	ldr	r3, [pc, #8]	; (2ab50 <TCC0_Handler+0x10>)
   2ab48:	4798      	blx	r3
   2ab4a:	46c0      	nop			; (mov r8, r8)
   2ab4c:	46bd      	mov	sp, r7
   2ab4e:	bd80      	pop	{r7, pc}
   2ab50:	0002ab7d 	.word	0x0002ab7d

0002ab54 <TCC1_Handler>:
   2ab54:	b580      	push	{r7, lr}
   2ab56:	af00      	add	r7, sp, #0
   2ab58:	2001      	movs	r0, #1
   2ab5a:	4b02      	ldr	r3, [pc, #8]	; (2ab64 <TCC1_Handler+0x10>)
   2ab5c:	4798      	blx	r3
   2ab5e:	46c0      	nop			; (mov r8, r8)
   2ab60:	46bd      	mov	sp, r7
   2ab62:	bd80      	pop	{r7, pc}
   2ab64:	0002ab7d 	.word	0x0002ab7d

0002ab68 <TCC2_Handler>:
   2ab68:	b580      	push	{r7, lr}
   2ab6a:	af00      	add	r7, sp, #0
   2ab6c:	2002      	movs	r0, #2
   2ab6e:	4b02      	ldr	r3, [pc, #8]	; (2ab78 <TCC2_Handler+0x10>)
   2ab70:	4798      	blx	r3
   2ab72:	46c0      	nop			; (mov r8, r8)
   2ab74:	46bd      	mov	sp, r7
   2ab76:	bd80      	pop	{r7, pc}
   2ab78:	0002ab7d 	.word	0x0002ab7d

0002ab7c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2ab7c:	b580      	push	{r7, lr}
   2ab7e:	b086      	sub	sp, #24
   2ab80:	af00      	add	r7, sp, #0
   2ab82:	0002      	movs	r2, r0
   2ab84:	1dfb      	adds	r3, r7, #7
   2ab86:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2ab88:	1dfb      	adds	r3, r7, #7
   2ab8a:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2ab8c:	4b18      	ldr	r3, [pc, #96]	; (2abf0 <_tcc_interrupt_handler+0x74>)
   2ab8e:	0092      	lsls	r2, r2, #2
   2ab90:	58d3      	ldr	r3, [r2, r3]
   2ab92:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2ab94:	693b      	ldr	r3, [r7, #16]
   2ab96:	681b      	ldr	r3, [r3, #0]
   2ab98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2ab9a:	693b      	ldr	r3, [r7, #16]
   2ab9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2ab9e:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2aba0:	693b      	ldr	r3, [r7, #16]
   2aba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2aba4:	4013      	ands	r3, r2
   2aba6:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2aba8:	2300      	movs	r3, #0
   2abaa:	617b      	str	r3, [r7, #20]
   2abac:	e019      	b.n	2abe2 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2abae:	4b11      	ldr	r3, [pc, #68]	; (2abf4 <_tcc_interrupt_handler+0x78>)
   2abb0:	697a      	ldr	r2, [r7, #20]
   2abb2:	0092      	lsls	r2, r2, #2
   2abb4:	58d3      	ldr	r3, [r2, r3]
   2abb6:	68fa      	ldr	r2, [r7, #12]
   2abb8:	4013      	ands	r3, r2
   2abba:	d00f      	beq.n	2abdc <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2abbc:	693a      	ldr	r2, [r7, #16]
   2abbe:	697b      	ldr	r3, [r7, #20]
   2abc0:	009b      	lsls	r3, r3, #2
   2abc2:	18d3      	adds	r3, r2, r3
   2abc4:	3304      	adds	r3, #4
   2abc6:	681b      	ldr	r3, [r3, #0]
   2abc8:	693a      	ldr	r2, [r7, #16]
   2abca:	0010      	movs	r0, r2
   2abcc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2abce:	693b      	ldr	r3, [r7, #16]
   2abd0:	681b      	ldr	r3, [r3, #0]
   2abd2:	4a08      	ldr	r2, [pc, #32]	; (2abf4 <_tcc_interrupt_handler+0x78>)
   2abd4:	6979      	ldr	r1, [r7, #20]
   2abd6:	0089      	lsls	r1, r1, #2
   2abd8:	588a      	ldr	r2, [r1, r2]
   2abda:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2abdc:	697b      	ldr	r3, [r7, #20]
   2abde:	3301      	adds	r3, #1
   2abe0:	617b      	str	r3, [r7, #20]
   2abe2:	697b      	ldr	r3, [r7, #20]
   2abe4:	2b0b      	cmp	r3, #11
   2abe6:	dde2      	ble.n	2abae <_tcc_interrupt_handler+0x32>
		}
	}
}
   2abe8:	46c0      	nop			; (mov r8, r8)
   2abea:	46bd      	mov	sp, r7
   2abec:	b006      	add	sp, #24
   2abee:	bd80      	pop	{r7, pc}
   2abf0:	20005a7c 	.word	0x20005a7c
   2abf4:	00039280 	.word	0x00039280

0002abf8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2abf8:	b580      	push	{r7, lr}
   2abfa:	b082      	sub	sp, #8
   2abfc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2abfe:	4b2f      	ldr	r3, [pc, #188]	; (2acbc <Reset_Handler+0xc4>)
   2ac00:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2ac02:	4b2f      	ldr	r3, [pc, #188]	; (2acc0 <Reset_Handler+0xc8>)
   2ac04:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2ac06:	687a      	ldr	r2, [r7, #4]
   2ac08:	683b      	ldr	r3, [r7, #0]
   2ac0a:	429a      	cmp	r2, r3
   2ac0c:	d00c      	beq.n	2ac28 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2ac0e:	e007      	b.n	2ac20 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2ac10:	683b      	ldr	r3, [r7, #0]
   2ac12:	1d1a      	adds	r2, r3, #4
   2ac14:	603a      	str	r2, [r7, #0]
   2ac16:	687a      	ldr	r2, [r7, #4]
   2ac18:	1d11      	adds	r1, r2, #4
   2ac1a:	6079      	str	r1, [r7, #4]
   2ac1c:	6812      	ldr	r2, [r2, #0]
   2ac1e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2ac20:	683a      	ldr	r2, [r7, #0]
   2ac22:	4b28      	ldr	r3, [pc, #160]	; (2acc4 <Reset_Handler+0xcc>)
   2ac24:	429a      	cmp	r2, r3
   2ac26:	d3f3      	bcc.n	2ac10 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2ac28:	4b27      	ldr	r3, [pc, #156]	; (2acc8 <Reset_Handler+0xd0>)
   2ac2a:	603b      	str	r3, [r7, #0]
   2ac2c:	e004      	b.n	2ac38 <Reset_Handler+0x40>
                *pDest++ = 0;
   2ac2e:	683b      	ldr	r3, [r7, #0]
   2ac30:	1d1a      	adds	r2, r3, #4
   2ac32:	603a      	str	r2, [r7, #0]
   2ac34:	2200      	movs	r2, #0
   2ac36:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2ac38:	683a      	ldr	r2, [r7, #0]
   2ac3a:	4b24      	ldr	r3, [pc, #144]	; (2accc <Reset_Handler+0xd4>)
   2ac3c:	429a      	cmp	r2, r3
   2ac3e:	d3f6      	bcc.n	2ac2e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2ac40:	4b23      	ldr	r3, [pc, #140]	; (2acd0 <Reset_Handler+0xd8>)
   2ac42:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2ac44:	4b23      	ldr	r3, [pc, #140]	; (2acd4 <Reset_Handler+0xdc>)
   2ac46:	687a      	ldr	r2, [r7, #4]
   2ac48:	21ff      	movs	r1, #255	; 0xff
   2ac4a:	438a      	bics	r2, r1
   2ac4c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2ac4e:	4a22      	ldr	r2, [pc, #136]	; (2acd8 <Reset_Handler+0xe0>)
   2ac50:	2390      	movs	r3, #144	; 0x90
   2ac52:	005b      	lsls	r3, r3, #1
   2ac54:	2102      	movs	r1, #2
   2ac56:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2ac58:	4a20      	ldr	r2, [pc, #128]	; (2acdc <Reset_Handler+0xe4>)
   2ac5a:	78d3      	ldrb	r3, [r2, #3]
   2ac5c:	2103      	movs	r1, #3
   2ac5e:	438b      	bics	r3, r1
   2ac60:	1c19      	adds	r1, r3, #0
   2ac62:	2302      	movs	r3, #2
   2ac64:	430b      	orrs	r3, r1
   2ac66:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2ac68:	4a1c      	ldr	r2, [pc, #112]	; (2acdc <Reset_Handler+0xe4>)
   2ac6a:	78d3      	ldrb	r3, [r2, #3]
   2ac6c:	210c      	movs	r1, #12
   2ac6e:	438b      	bics	r3, r1
   2ac70:	1c19      	adds	r1, r3, #0
   2ac72:	2308      	movs	r3, #8
   2ac74:	430b      	orrs	r3, r1
   2ac76:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2ac78:	4a19      	ldr	r2, [pc, #100]	; (2ace0 <Reset_Handler+0xe8>)
   2ac7a:	7b93      	ldrb	r3, [r2, #14]
   2ac7c:	2130      	movs	r1, #48	; 0x30
   2ac7e:	438b      	bics	r3, r1
   2ac80:	1c19      	adds	r1, r3, #0
   2ac82:	2320      	movs	r3, #32
   2ac84:	430b      	orrs	r3, r1
   2ac86:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2ac88:	4a15      	ldr	r2, [pc, #84]	; (2ace0 <Reset_Handler+0xe8>)
   2ac8a:	7b93      	ldrb	r3, [r2, #14]
   2ac8c:	210c      	movs	r1, #12
   2ac8e:	438b      	bics	r3, r1
   2ac90:	1c19      	adds	r1, r3, #0
   2ac92:	2308      	movs	r3, #8
   2ac94:	430b      	orrs	r3, r1
   2ac96:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2ac98:	4a11      	ldr	r2, [pc, #68]	; (2ace0 <Reset_Handler+0xe8>)
   2ac9a:	7b93      	ldrb	r3, [r2, #14]
   2ac9c:	2103      	movs	r1, #3
   2ac9e:	438b      	bics	r3, r1
   2aca0:	1c19      	adds	r1, r3, #0
   2aca2:	2302      	movs	r3, #2
   2aca4:	430b      	orrs	r3, r1
   2aca6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2aca8:	4a0e      	ldr	r2, [pc, #56]	; (2ace4 <Reset_Handler+0xec>)
   2acaa:	6853      	ldr	r3, [r2, #4]
   2acac:	2180      	movs	r1, #128	; 0x80
   2acae:	430b      	orrs	r3, r1
   2acb0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2acb2:	4b0d      	ldr	r3, [pc, #52]	; (2ace8 <Reset_Handler+0xf0>)
   2acb4:	4798      	blx	r3

        /* Branch to main function */
        main();
   2acb6:	4b0d      	ldr	r3, [pc, #52]	; (2acec <Reset_Handler+0xf4>)
   2acb8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2acba:	e7fe      	b.n	2acba <Reset_Handler+0xc2>
   2acbc:	0003a038 	.word	0x0003a038
   2acc0:	20000000 	.word	0x20000000
   2acc4:	20000320 	.word	0x20000320
   2acc8:	20000320 	.word	0x20000320
   2accc:	20005aec 	.word	0x20005aec
   2acd0:	00012000 	.word	0x00012000
   2acd4:	e000ed00 	.word	0xe000ed00
   2acd8:	41007000 	.word	0x41007000
   2acdc:	41005000 	.word	0x41005000
   2ace0:	41004800 	.word	0x41004800
   2ace4:	41004000 	.word	0x41004000
   2ace8:	00034639 	.word	0x00034639
   2acec:	0003242d 	.word	0x0003242d

0002acf0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2acf0:	b580      	push	{r7, lr}
   2acf2:	af00      	add	r7, sp, #0
  __asm volatile (
   2acf4:	2004      	movs	r0, #4
   2acf6:	4671      	mov	r1, lr
   2acf8:	4208      	tst	r0, r1
   2acfa:	d002      	beq.n	2ad02 <_MSP>
   2acfc:	f3ef 8009 	mrs	r0, PSP
   2ad00:	e001      	b.n	2ad06 <_HALT>

0002ad02 <_MSP>:
   2ad02:	f3ef 8008 	mrs	r0, MSP

0002ad06 <_HALT>:
   2ad06:	6941      	ldr	r1, [r0, #20]
   2ad08:	e004      	b.n	2ad14 <HardFault_HandlerC>
   2ad0a:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2ad0c:	46c0      	nop			; (mov r8, r8)
   2ad0e:	46bd      	mov	sp, r7
   2ad10:	bd80      	pop	{r7, pc}
	...

0002ad14 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2ad14:	b580      	push	{r7, lr}
   2ad16:	b090      	sub	sp, #64	; 0x40
   2ad18:	af00      	add	r7, sp, #0
   2ad1a:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2ad1c:	687b      	ldr	r3, [r7, #4]
   2ad1e:	681b      	ldr	r3, [r3, #0]
   2ad20:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2ad22:	687b      	ldr	r3, [r7, #4]
   2ad24:	685b      	ldr	r3, [r3, #4]
   2ad26:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2ad28:	687b      	ldr	r3, [r7, #4]
   2ad2a:	689b      	ldr	r3, [r3, #8]
   2ad2c:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2ad2e:	687b      	ldr	r3, [r7, #4]
   2ad30:	68db      	ldr	r3, [r3, #12]
   2ad32:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2ad34:	687b      	ldr	r3, [r7, #4]
   2ad36:	691b      	ldr	r3, [r3, #16]
   2ad38:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2ad3a:	687b      	ldr	r3, [r7, #4]
   2ad3c:	695b      	ldr	r3, [r3, #20]
   2ad3e:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2ad40:	687b      	ldr	r3, [r7, #4]
   2ad42:	699b      	ldr	r3, [r3, #24]
   2ad44:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2ad46:	687b      	ldr	r3, [r7, #4]
   2ad48:	69db      	ldr	r3, [r3, #28]
   2ad4a:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2ad4c:	4b0b      	ldr	r3, [pc, #44]	; (2ad7c <HardFault_HandlerC+0x68>)
   2ad4e:	681b      	ldr	r3, [r3, #0]
   2ad50:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2ad52:	4b0b      	ldr	r3, [pc, #44]	; (2ad80 <HardFault_HandlerC+0x6c>)
   2ad54:	681b      	ldr	r3, [r3, #0]
   2ad56:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2ad58:	4b0a      	ldr	r3, [pc, #40]	; (2ad84 <HardFault_HandlerC+0x70>)
   2ad5a:	681b      	ldr	r3, [r3, #0]
   2ad5c:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2ad5e:	4b0a      	ldr	r3, [pc, #40]	; (2ad88 <HardFault_HandlerC+0x74>)
   2ad60:	681b      	ldr	r3, [r3, #0]
   2ad62:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2ad64:	4b09      	ldr	r3, [pc, #36]	; (2ad8c <HardFault_HandlerC+0x78>)
   2ad66:	681b      	ldr	r3, [r3, #0]
   2ad68:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2ad6a:	4b09      	ldr	r3, [pc, #36]	; (2ad90 <HardFault_HandlerC+0x7c>)
   2ad6c:	681b      	ldr	r3, [r3, #0]
   2ad6e:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2ad70:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2ad72:	46c0      	nop			; (mov r8, r8)
   2ad74:	46bd      	mov	sp, r7
   2ad76:	b010      	add	sp, #64	; 0x40
   2ad78:	bd80      	pop	{r7, pc}
   2ad7a:	46c0      	nop			; (mov r8, r8)
   2ad7c:	e000ed28 	.word	0xe000ed28
   2ad80:	e000ed2c 	.word	0xe000ed2c
   2ad84:	e000ed30 	.word	0xe000ed30
   2ad88:	e000ed3c 	.word	0xe000ed3c
   2ad8c:	e000ed34 	.word	0xe000ed34
   2ad90:	e000ed38 	.word	0xe000ed38

0002ad94 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2ad94:	b580      	push	{r7, lr}
   2ad96:	b086      	sub	sp, #24
   2ad98:	af00      	add	r7, sp, #0
   2ad9a:	60f8      	str	r0, [r7, #12]
   2ad9c:	60b9      	str	r1, [r7, #8]
   2ad9e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2ada0:	2300      	movs	r3, #0
   2ada2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2ada4:	68fb      	ldr	r3, [r7, #12]
   2ada6:	2b00      	cmp	r3, #0
   2ada8:	d012      	beq.n	2add0 <_read+0x3c>
		return -1;
   2adaa:	2301      	movs	r3, #1
   2adac:	425b      	negs	r3, r3
   2adae:	e013      	b.n	2add8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2adb0:	4b0b      	ldr	r3, [pc, #44]	; (2ade0 <_read+0x4c>)
   2adb2:	681a      	ldr	r2, [r3, #0]
   2adb4:	4b0b      	ldr	r3, [pc, #44]	; (2ade4 <_read+0x50>)
   2adb6:	681b      	ldr	r3, [r3, #0]
   2adb8:	68b9      	ldr	r1, [r7, #8]
   2adba:	0018      	movs	r0, r3
   2adbc:	4790      	blx	r2
		ptr++;
   2adbe:	68bb      	ldr	r3, [r7, #8]
   2adc0:	3301      	adds	r3, #1
   2adc2:	60bb      	str	r3, [r7, #8]
		nChars++;
   2adc4:	697b      	ldr	r3, [r7, #20]
   2adc6:	3301      	adds	r3, #1
   2adc8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2adca:	687b      	ldr	r3, [r7, #4]
   2adcc:	3b01      	subs	r3, #1
   2adce:	607b      	str	r3, [r7, #4]
   2add0:	687b      	ldr	r3, [r7, #4]
   2add2:	2b00      	cmp	r3, #0
   2add4:	dcec      	bgt.n	2adb0 <_read+0x1c>
	}
	return nChars;
   2add6:	697b      	ldr	r3, [r7, #20]
}
   2add8:	0018      	movs	r0, r3
   2adda:	46bd      	mov	sp, r7
   2addc:	b006      	add	sp, #24
   2adde:	bd80      	pop	{r7, pc}
   2ade0:	20005a88 	.word	0x20005a88
   2ade4:	20005a90 	.word	0x20005a90

0002ade8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2ade8:	b580      	push	{r7, lr}
   2adea:	b086      	sub	sp, #24
   2adec:	af00      	add	r7, sp, #0
   2adee:	60f8      	str	r0, [r7, #12]
   2adf0:	60b9      	str	r1, [r7, #8]
   2adf2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2adf4:	2300      	movs	r3, #0
   2adf6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2adf8:	68fb      	ldr	r3, [r7, #12]
   2adfa:	2b01      	cmp	r3, #1
   2adfc:	d01d      	beq.n	2ae3a <_write+0x52>
   2adfe:	68fb      	ldr	r3, [r7, #12]
   2ae00:	2b02      	cmp	r3, #2
   2ae02:	d01a      	beq.n	2ae3a <_write+0x52>
   2ae04:	68fb      	ldr	r3, [r7, #12]
   2ae06:	2b03      	cmp	r3, #3
   2ae08:	d017      	beq.n	2ae3a <_write+0x52>
		return -1;
   2ae0a:	2301      	movs	r3, #1
   2ae0c:	425b      	negs	r3, r3
   2ae0e:	e018      	b.n	2ae42 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2ae10:	4b0e      	ldr	r3, [pc, #56]	; (2ae4c <_write+0x64>)
   2ae12:	681a      	ldr	r2, [r3, #0]
   2ae14:	4b0e      	ldr	r3, [pc, #56]	; (2ae50 <_write+0x68>)
   2ae16:	6818      	ldr	r0, [r3, #0]
   2ae18:	68bb      	ldr	r3, [r7, #8]
   2ae1a:	1c59      	adds	r1, r3, #1
   2ae1c:	60b9      	str	r1, [r7, #8]
   2ae1e:	781b      	ldrb	r3, [r3, #0]
   2ae20:	0019      	movs	r1, r3
   2ae22:	4790      	blx	r2
   2ae24:	1e03      	subs	r3, r0, #0
   2ae26:	da02      	bge.n	2ae2e <_write+0x46>
			return -1;
   2ae28:	2301      	movs	r3, #1
   2ae2a:	425b      	negs	r3, r3
   2ae2c:	e009      	b.n	2ae42 <_write+0x5a>
		}
		++nChars;
   2ae2e:	697b      	ldr	r3, [r7, #20]
   2ae30:	3301      	adds	r3, #1
   2ae32:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2ae34:	687b      	ldr	r3, [r7, #4]
   2ae36:	3b01      	subs	r3, #1
   2ae38:	607b      	str	r3, [r7, #4]
   2ae3a:	687b      	ldr	r3, [r7, #4]
   2ae3c:	2b00      	cmp	r3, #0
   2ae3e:	d1e7      	bne.n	2ae10 <_write+0x28>
	}
	return nChars;
   2ae40:	697b      	ldr	r3, [r7, #20]
}
   2ae42:	0018      	movs	r0, r3
   2ae44:	46bd      	mov	sp, r7
   2ae46:	b006      	add	sp, #24
   2ae48:	bd80      	pop	{r7, pc}
   2ae4a:	46c0      	nop			; (mov r8, r8)
   2ae4c:	20005a8c 	.word	0x20005a8c
   2ae50:	20005a90 	.word	0x20005a90

0002ae54 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2ae54:	b580      	push	{r7, lr}
   2ae56:	b084      	sub	sp, #16
   2ae58:	af00      	add	r7, sp, #0
   2ae5a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2ae5c:	4b0a      	ldr	r3, [pc, #40]	; (2ae88 <_sbrk+0x34>)
   2ae5e:	681b      	ldr	r3, [r3, #0]
   2ae60:	2b00      	cmp	r3, #0
   2ae62:	d102      	bne.n	2ae6a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2ae64:	4b08      	ldr	r3, [pc, #32]	; (2ae88 <_sbrk+0x34>)
   2ae66:	4a09      	ldr	r2, [pc, #36]	; (2ae8c <_sbrk+0x38>)
   2ae68:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2ae6a:	4b07      	ldr	r3, [pc, #28]	; (2ae88 <_sbrk+0x34>)
   2ae6c:	681b      	ldr	r3, [r3, #0]
   2ae6e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2ae70:	4b05      	ldr	r3, [pc, #20]	; (2ae88 <_sbrk+0x34>)
   2ae72:	681a      	ldr	r2, [r3, #0]
   2ae74:	687b      	ldr	r3, [r7, #4]
   2ae76:	18d2      	adds	r2, r2, r3
   2ae78:	4b03      	ldr	r3, [pc, #12]	; (2ae88 <_sbrk+0x34>)
   2ae7a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2ae7c:	68fb      	ldr	r3, [r7, #12]
}
   2ae7e:	0018      	movs	r0, r3
   2ae80:	46bd      	mov	sp, r7
   2ae82:	b004      	add	sp, #16
   2ae84:	bd80      	pop	{r7, pc}
   2ae86:	46c0      	nop			; (mov r8, r8)
   2ae88:	20004198 	.word	0x20004198
   2ae8c:	20007af0 	.word	0x20007af0

0002ae90 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2ae90:	b580      	push	{r7, lr}
   2ae92:	b082      	sub	sp, #8
   2ae94:	af00      	add	r7, sp, #0
   2ae96:	6078      	str	r0, [r7, #4]
	return -1;
   2ae98:	2301      	movs	r3, #1
   2ae9a:	425b      	negs	r3, r3
}
   2ae9c:	0018      	movs	r0, r3
   2ae9e:	46bd      	mov	sp, r7
   2aea0:	b002      	add	sp, #8
   2aea2:	bd80      	pop	{r7, pc}

0002aea4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2aea4:	b580      	push	{r7, lr}
   2aea6:	b082      	sub	sp, #8
   2aea8:	af00      	add	r7, sp, #0
   2aeaa:	6078      	str	r0, [r7, #4]
   2aeac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2aeae:	683b      	ldr	r3, [r7, #0]
   2aeb0:	2280      	movs	r2, #128	; 0x80
   2aeb2:	0192      	lsls	r2, r2, #6
   2aeb4:	605a      	str	r2, [r3, #4]

	return 0;
   2aeb6:	2300      	movs	r3, #0
}
   2aeb8:	0018      	movs	r0, r3
   2aeba:	46bd      	mov	sp, r7
   2aebc:	b002      	add	sp, #8
   2aebe:	bd80      	pop	{r7, pc}

0002aec0 <_isatty>:

extern int _isatty(int file)
{
   2aec0:	b580      	push	{r7, lr}
   2aec2:	b082      	sub	sp, #8
   2aec4:	af00      	add	r7, sp, #0
   2aec6:	6078      	str	r0, [r7, #4]
	return 1;
   2aec8:	2301      	movs	r3, #1
}
   2aeca:	0018      	movs	r0, r3
   2aecc:	46bd      	mov	sp, r7
   2aece:	b002      	add	sp, #8
   2aed0:	bd80      	pop	{r7, pc}

0002aed2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2aed2:	b580      	push	{r7, lr}
   2aed4:	b084      	sub	sp, #16
   2aed6:	af00      	add	r7, sp, #0
   2aed8:	60f8      	str	r0, [r7, #12]
   2aeda:	60b9      	str	r1, [r7, #8]
   2aedc:	607a      	str	r2, [r7, #4]
	return 0;
   2aede:	2300      	movs	r3, #0
}
   2aee0:	0018      	movs	r0, r3
   2aee2:	46bd      	mov	sp, r7
   2aee4:	b004      	add	sp, #16
   2aee6:	bd80      	pop	{r7, pc}

0002aee8 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2aee8:	b580      	push	{r7, lr}
   2aeea:	b082      	sub	sp, #8
   2aeec:	af00      	add	r7, sp, #0
   2aeee:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2aef0:	687b      	ldr	r3, [r7, #4]
   2aef2:	2200      	movs	r2, #0
   2aef4:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2aef6:	687b      	ldr	r3, [r7, #4]
   2aef8:	2200      	movs	r2, #0
   2aefa:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2aefc:	687b      	ldr	r3, [r7, #4]
   2aefe:	2200      	movs	r2, #0
   2af00:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2af02:	687b      	ldr	r3, [r7, #4]
   2af04:	2200      	movs	r2, #0
   2af06:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2af08:	687b      	ldr	r3, [r7, #4]
   2af0a:	2201      	movs	r2, #1
   2af0c:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2af0e:	687b      	ldr	r3, [r7, #4]
   2af10:	2201      	movs	r2, #1
   2af12:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2af14:	687b      	ldr	r3, [r7, #4]
   2af16:	22fa      	movs	r2, #250	; 0xfa
   2af18:	00d2      	lsls	r2, r2, #3
   2af1a:	80da      	strh	r2, [r3, #6]
}
   2af1c:	46c0      	nop			; (mov r8, r8)
   2af1e:	46bd      	mov	sp, r7
   2af20:	b002      	add	sp, #8
   2af22:	bd80      	pop	{r7, pc}

0002af24 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2af24:	b580      	push	{r7, lr}
   2af26:	b086      	sub	sp, #24
   2af28:	af00      	add	r7, sp, #0
   2af2a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2af2c:	230c      	movs	r3, #12
   2af2e:	18fb      	adds	r3, r7, r3
   2af30:	0018      	movs	r0, r3
   2af32:	4b23      	ldr	r3, [pc, #140]	; (2afc0 <rtc_calendar_get_config_defaults+0x9c>)
   2af34:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2af36:	687b      	ldr	r3, [r7, #4]
   2af38:	22a0      	movs	r2, #160	; 0xa0
   2af3a:	0112      	lsls	r2, r2, #4
   2af3c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2af3e:	687b      	ldr	r3, [r7, #4]
   2af40:	2200      	movs	r2, #0
   2af42:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2af44:	687b      	ldr	r3, [r7, #4]
   2af46:	2200      	movs	r2, #0
   2af48:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2af4a:	687b      	ldr	r3, [r7, #4]
   2af4c:	2200      	movs	r2, #0
   2af4e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2af50:	687b      	ldr	r3, [r7, #4]
   2af52:	22fa      	movs	r2, #250	; 0xfa
   2af54:	00d2      	lsls	r2, r2, #3
   2af56:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2af58:	2317      	movs	r3, #23
   2af5a:	18fb      	adds	r3, r7, r3
   2af5c:	2200      	movs	r2, #0
   2af5e:	701a      	strb	r2, [r3, #0]
   2af60:	e025      	b.n	2afae <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2af62:	2317      	movs	r3, #23
   2af64:	18fb      	adds	r3, r7, r3
   2af66:	781a      	ldrb	r2, [r3, #0]
   2af68:	6879      	ldr	r1, [r7, #4]
   2af6a:	2008      	movs	r0, #8
   2af6c:	0013      	movs	r3, r2
   2af6e:	009b      	lsls	r3, r3, #2
   2af70:	189b      	adds	r3, r3, r2
   2af72:	005b      	lsls	r3, r3, #1
   2af74:	18cb      	adds	r3, r1, r3
   2af76:	181a      	adds	r2, r3, r0
   2af78:	230c      	movs	r3, #12
   2af7a:	18fb      	adds	r3, r7, r3
   2af7c:	0010      	movs	r0, r2
   2af7e:	0019      	movs	r1, r3
   2af80:	2308      	movs	r3, #8
   2af82:	001a      	movs	r2, r3
   2af84:	4b0f      	ldr	r3, [pc, #60]	; (2afc4 <rtc_calendar_get_config_defaults+0xa0>)
   2af86:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2af88:	2317      	movs	r3, #23
   2af8a:	18fb      	adds	r3, r7, r3
   2af8c:	781a      	ldrb	r2, [r3, #0]
   2af8e:	6879      	ldr	r1, [r7, #4]
   2af90:	0013      	movs	r3, r2
   2af92:	009b      	lsls	r3, r3, #2
   2af94:	189b      	adds	r3, r3, r2
   2af96:	005b      	lsls	r3, r3, #1
   2af98:	18cb      	adds	r3, r1, r3
   2af9a:	3310      	adds	r3, #16
   2af9c:	2206      	movs	r2, #6
   2af9e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2afa0:	2317      	movs	r3, #23
   2afa2:	18fb      	adds	r3, r7, r3
   2afa4:	781a      	ldrb	r2, [r3, #0]
   2afa6:	2317      	movs	r3, #23
   2afa8:	18fb      	adds	r3, r7, r3
   2afaa:	3201      	adds	r2, #1
   2afac:	701a      	strb	r2, [r3, #0]
   2afae:	2317      	movs	r3, #23
   2afb0:	18fb      	adds	r3, r7, r3
   2afb2:	781b      	ldrb	r3, [r3, #0]
   2afb4:	2b00      	cmp	r3, #0
   2afb6:	d0d4      	beq.n	2af62 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2afb8:	46c0      	nop			; (mov r8, r8)
   2afba:	46bd      	mov	sp, r7
   2afbc:	b006      	add	sp, #24
   2afbe:	bd80      	pop	{r7, pc}
   2afc0:	0002aee9 	.word	0x0002aee9
   2afc4:	000346a9 	.word	0x000346a9

0002afc8 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2afc8:	b580      	push	{r7, lr}
   2afca:	b088      	sub	sp, #32
   2afcc:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2afce:	230c      	movs	r3, #12
   2afd0:	18fb      	adds	r3, r7, r3
   2afd2:	0018      	movs	r0, r3
   2afd4:	4b1a      	ldr	r3, [pc, #104]	; (2b040 <configure_rtc_calendar+0x78>)
   2afd6:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2afd8:	1d3b      	adds	r3, r7, #4
   2afda:	0018      	movs	r0, r3
   2afdc:	4b19      	ldr	r3, [pc, #100]	; (2b044 <configure_rtc_calendar+0x7c>)
   2afde:	4798      	blx	r3
	init_time.year   = 2014;
   2afe0:	1d3b      	adds	r3, r7, #4
   2afe2:	4a19      	ldr	r2, [pc, #100]	; (2b048 <configure_rtc_calendar+0x80>)
   2afe4:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2afe6:	1d3b      	adds	r3, r7, #4
   2afe8:	2201      	movs	r2, #1
   2afea:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2afec:	1d3b      	adds	r3, r7, #4
   2afee:	2201      	movs	r2, #1
   2aff0:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2aff2:	1d3b      	adds	r3, r7, #4
   2aff4:	2200      	movs	r2, #0
   2aff6:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2aff8:	1d3b      	adds	r3, r7, #4
   2affa:	2200      	movs	r2, #0
   2affc:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2affe:	1d3b      	adds	r3, r7, #4
   2b000:	2204      	movs	r2, #4
   2b002:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2b004:	230c      	movs	r3, #12
   2b006:	18fb      	adds	r3, r7, r3
   2b008:	2201      	movs	r2, #1
   2b00a:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2b00c:	230c      	movs	r3, #12
   2b00e:	18fb      	adds	r3, r7, r3
   2b010:	1d3a      	adds	r2, r7, #4
   2b012:	3308      	adds	r3, #8
   2b014:	ca03      	ldmia	r2!, {r0, r1}
   2b016:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2b018:	230c      	movs	r3, #12
   2b01a:	18fb      	adds	r3, r7, r3
   2b01c:	2206      	movs	r2, #6
   2b01e:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2b020:	230c      	movs	r3, #12
   2b022:	18fa      	adds	r2, r7, r3
   2b024:	4909      	ldr	r1, [pc, #36]	; (2b04c <configure_rtc_calendar+0x84>)
   2b026:	4b0a      	ldr	r3, [pc, #40]	; (2b050 <configure_rtc_calendar+0x88>)
   2b028:	0018      	movs	r0, r3
   2b02a:	4b0a      	ldr	r3, [pc, #40]	; (2b054 <configure_rtc_calendar+0x8c>)
   2b02c:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2b02e:	4b08      	ldr	r3, [pc, #32]	; (2b050 <configure_rtc_calendar+0x88>)
   2b030:	0018      	movs	r0, r3
   2b032:	4b09      	ldr	r3, [pc, #36]	; (2b058 <configure_rtc_calendar+0x90>)
   2b034:	4798      	blx	r3
}
   2b036:	46c0      	nop			; (mov r8, r8)
   2b038:	46bd      	mov	sp, r7
   2b03a:	b008      	add	sp, #32
   2b03c:	bd80      	pop	{r7, pc}
   2b03e:	46c0      	nop			; (mov r8, r8)
   2b040:	0002af25 	.word	0x0002af25
   2b044:	0002aee9 	.word	0x0002aee9
   2b048:	000007de 	.word	0x000007de
   2b04c:	40001400 	.word	0x40001400
   2b050:	20005a94 	.word	0x20005a94
   2b054:	00026b05 	.word	0x00026b05
   2b058:	00026831 	.word	0x00026831

0002b05c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2b05c:	b590      	push	{r4, r7, lr}
   2b05e:	b085      	sub	sp, #20
   2b060:	af00      	add	r7, sp, #0
   2b062:	0002      	movs	r2, r0
   2b064:	1dfb      	adds	r3, r7, #7
   2b066:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2b068:	4b1a      	ldr	r3, [pc, #104]	; (2b0d4 <disk_initialize+0x78>)
   2b06a:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2b06c:	1dfb      	adds	r3, r7, #7
   2b06e:	781b      	ldrb	r3, [r3, #0]
   2b070:	2b01      	cmp	r3, #1
   2b072:	d901      	bls.n	2b078 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2b074:	2301      	movs	r3, #1
   2b076:	e029      	b.n	2b0cc <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2b078:	2300      	movs	r3, #0
   2b07a:	60fb      	str	r3, [r7, #12]
   2b07c:	e010      	b.n	2b0a0 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2b07e:	230b      	movs	r3, #11
   2b080:	18fc      	adds	r4, r7, r3
   2b082:	1dfb      	adds	r3, r7, #7
   2b084:	781b      	ldrb	r3, [r3, #0]
   2b086:	0018      	movs	r0, r3
   2b088:	4b13      	ldr	r3, [pc, #76]	; (2b0d8 <disk_initialize+0x7c>)
   2b08a:	4798      	blx	r3
   2b08c:	0003      	movs	r3, r0
   2b08e:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2b090:	230b      	movs	r3, #11
   2b092:	18fb      	adds	r3, r7, r3
   2b094:	781b      	ldrb	r3, [r3, #0]
   2b096:	2b03      	cmp	r3, #3
   2b098:	d106      	bne.n	2b0a8 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2b09a:	68fb      	ldr	r3, [r7, #12]
   2b09c:	3301      	adds	r3, #1
   2b09e:	60fb      	str	r3, [r7, #12]
   2b0a0:	68fb      	ldr	r3, [r7, #12]
   2b0a2:	2b01      	cmp	r3, #1
   2b0a4:	ddeb      	ble.n	2b07e <disk_initialize+0x22>
   2b0a6:	e000      	b.n	2b0aa <disk_initialize+0x4e>
			break;
   2b0a8:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2b0aa:	230b      	movs	r3, #11
   2b0ac:	18fb      	adds	r3, r7, r3
   2b0ae:	781b      	ldrb	r3, [r3, #0]
   2b0b0:	2b00      	cmp	r3, #0
   2b0b2:	d001      	beq.n	2b0b8 <disk_initialize+0x5c>
		return STA_NOINIT;
   2b0b4:	2301      	movs	r3, #1
   2b0b6:	e009      	b.n	2b0cc <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2b0b8:	1dfb      	adds	r3, r7, #7
   2b0ba:	781b      	ldrb	r3, [r3, #0]
   2b0bc:	0018      	movs	r0, r3
   2b0be:	4b07      	ldr	r3, [pc, #28]	; (2b0dc <disk_initialize+0x80>)
   2b0c0:	4798      	blx	r3
   2b0c2:	1e03      	subs	r3, r0, #0
   2b0c4:	d001      	beq.n	2b0ca <disk_initialize+0x6e>
		return STA_PROTECT;
   2b0c6:	2304      	movs	r3, #4
   2b0c8:	e000      	b.n	2b0cc <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2b0ca:	2300      	movs	r3, #0
}
   2b0cc:	0018      	movs	r0, r3
   2b0ce:	46bd      	mov	sp, r7
   2b0d0:	b005      	add	sp, #20
   2b0d2:	bd90      	pop	{r4, r7, pc}
   2b0d4:	0002afc9 	.word	0x0002afc9
   2b0d8:	00025d2d 	.word	0x00025d2d
   2b0dc:	00025de5 	.word	0x00025de5

0002b0e0 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2b0e0:	b580      	push	{r7, lr}
   2b0e2:	b082      	sub	sp, #8
   2b0e4:	af00      	add	r7, sp, #0
   2b0e6:	0002      	movs	r2, r0
   2b0e8:	1dfb      	adds	r3, r7, #7
   2b0ea:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2b0ec:	1dfb      	adds	r3, r7, #7
   2b0ee:	781b      	ldrb	r3, [r3, #0]
   2b0f0:	0018      	movs	r0, r3
   2b0f2:	4b08      	ldr	r3, [pc, #32]	; (2b114 <disk_status+0x34>)
   2b0f4:	4798      	blx	r3
   2b0f6:	1e03      	subs	r3, r0, #0
   2b0f8:	d002      	beq.n	2b100 <disk_status+0x20>
   2b0fa:	2b02      	cmp	r3, #2
   2b0fc:	d002      	beq.n	2b104 <disk_status+0x24>
   2b0fe:	e003      	b.n	2b108 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2b100:	2300      	movs	r3, #0
   2b102:	e002      	b.n	2b10a <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2b104:	2303      	movs	r3, #3
   2b106:	e000      	b.n	2b10a <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2b108:	2301      	movs	r3, #1
	}
}
   2b10a:	0018      	movs	r0, r3
   2b10c:	46bd      	mov	sp, r7
   2b10e:	b002      	add	sp, #8
   2b110:	bd80      	pop	{r7, pc}
   2b112:	46c0      	nop			; (mov r8, r8)
   2b114:	00025d2d 	.word	0x00025d2d

0002b118 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2b118:	b590      	push	{r4, r7, lr}
   2b11a:	b089      	sub	sp, #36	; 0x24
   2b11c:	af00      	add	r7, sp, #0
   2b11e:	60b9      	str	r1, [r7, #8]
   2b120:	607a      	str	r2, [r7, #4]
   2b122:	0019      	movs	r1, r3
   2b124:	230f      	movs	r3, #15
   2b126:	18fb      	adds	r3, r7, r3
   2b128:	1c02      	adds	r2, r0, #0
   2b12a:	701a      	strb	r2, [r3, #0]
   2b12c:	230e      	movs	r3, #14
   2b12e:	18fb      	adds	r3, r7, r3
   2b130:	1c0a      	adds	r2, r1, #0
   2b132:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2b134:	231b      	movs	r3, #27
   2b136:	18fc      	adds	r4, r7, r3
   2b138:	230f      	movs	r3, #15
   2b13a:	18fb      	adds	r3, r7, r3
   2b13c:	781b      	ldrb	r3, [r3, #0]
   2b13e:	0018      	movs	r0, r3
   2b140:	4b28      	ldr	r3, [pc, #160]	; (2b1e4 <disk_read+0xcc>)
   2b142:	4798      	blx	r3
   2b144:	0003      	movs	r3, r0
   2b146:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2b148:	231b      	movs	r3, #27
   2b14a:	18fb      	adds	r3, r7, r3
   2b14c:	781b      	ldrb	r3, [r3, #0]
   2b14e:	2b00      	cmp	r3, #0
   2b150:	d101      	bne.n	2b156 <disk_read+0x3e>
		return RES_ERROR;
   2b152:	2301      	movs	r3, #1
   2b154:	e042      	b.n	2b1dc <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2b156:	2314      	movs	r3, #20
   2b158:	18fa      	adds	r2, r7, r3
   2b15a:	230f      	movs	r3, #15
   2b15c:	18fb      	adds	r3, r7, r3
   2b15e:	781b      	ldrb	r3, [r3, #0]
   2b160:	0011      	movs	r1, r2
   2b162:	0018      	movs	r0, r3
   2b164:	4b20      	ldr	r3, [pc, #128]	; (2b1e8 <disk_read+0xd0>)
   2b166:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2b168:	230e      	movs	r3, #14
   2b16a:	18fb      	adds	r3, r7, r3
   2b16c:	781b      	ldrb	r3, [r3, #0]
   2b16e:	221b      	movs	r2, #27
   2b170:	18ba      	adds	r2, r7, r2
   2b172:	7812      	ldrb	r2, [r2, #0]
   2b174:	4353      	muls	r3, r2
   2b176:	001a      	movs	r2, r3
   2b178:	687b      	ldr	r3, [r7, #4]
   2b17a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2b17c:	697b      	ldr	r3, [r7, #20]
   2b17e:	3301      	adds	r3, #1
   2b180:	211b      	movs	r1, #27
   2b182:	1879      	adds	r1, r7, r1
   2b184:	7809      	ldrb	r1, [r1, #0]
   2b186:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2b188:	429a      	cmp	r2, r3
   2b18a:	d901      	bls.n	2b190 <disk_read+0x78>
		return RES_PARERR;
   2b18c:	2304      	movs	r3, #4
   2b18e:	e025      	b.n	2b1dc <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2b190:	2300      	movs	r3, #0
   2b192:	61fb      	str	r3, [r7, #28]
   2b194:	e01b      	b.n	2b1ce <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2b196:	231b      	movs	r3, #27
   2b198:	18fb      	adds	r3, r7, r3
   2b19a:	781b      	ldrb	r3, [r3, #0]
   2b19c:	69fa      	ldr	r2, [r7, #28]
   2b19e:	435a      	muls	r2, r3
   2b1a0:	687b      	ldr	r3, [r7, #4]
   2b1a2:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2b1a4:	231b      	movs	r3, #27
   2b1a6:	18fb      	adds	r3, r7, r3
   2b1a8:	781b      	ldrb	r3, [r3, #0]
   2b1aa:	69fa      	ldr	r2, [r7, #28]
   2b1ac:	4353      	muls	r3, r2
   2b1ae:	025b      	lsls	r3, r3, #9
   2b1b0:	68ba      	ldr	r2, [r7, #8]
   2b1b2:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2b1b4:	230f      	movs	r3, #15
   2b1b6:	18fb      	adds	r3, r7, r3
   2b1b8:	781b      	ldrb	r3, [r3, #0]
   2b1ba:	0018      	movs	r0, r3
   2b1bc:	4b0b      	ldr	r3, [pc, #44]	; (2b1ec <disk_read+0xd4>)
   2b1be:	4798      	blx	r3
   2b1c0:	1e03      	subs	r3, r0, #0
   2b1c2:	d001      	beq.n	2b1c8 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2b1c4:	2301      	movs	r3, #1
   2b1c6:	e009      	b.n	2b1dc <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2b1c8:	69fb      	ldr	r3, [r7, #28]
   2b1ca:	3301      	adds	r3, #1
   2b1cc:	61fb      	str	r3, [r7, #28]
   2b1ce:	230e      	movs	r3, #14
   2b1d0:	18fb      	adds	r3, r7, r3
   2b1d2:	781a      	ldrb	r2, [r3, #0]
   2b1d4:	69fb      	ldr	r3, [r7, #28]
   2b1d6:	429a      	cmp	r2, r3
   2b1d8:	d8dd      	bhi.n	2b196 <disk_read+0x7e>
		}
	}

	return RES_OK;
   2b1da:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2b1dc:	0018      	movs	r0, r3
   2b1de:	46bd      	mov	sp, r7
   2b1e0:	b009      	add	sp, #36	; 0x24
   2b1e2:	bd90      	pop	{r4, r7, pc}
   2b1e4:	00025db9 	.word	0x00025db9
   2b1e8:	00025d6d 	.word	0x00025d6d
   2b1ec:	00025e2d 	.word	0x00025e2d

0002b1f0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2b1f0:	b590      	push	{r4, r7, lr}
   2b1f2:	b089      	sub	sp, #36	; 0x24
   2b1f4:	af00      	add	r7, sp, #0
   2b1f6:	60b9      	str	r1, [r7, #8]
   2b1f8:	607a      	str	r2, [r7, #4]
   2b1fa:	0019      	movs	r1, r3
   2b1fc:	230f      	movs	r3, #15
   2b1fe:	18fb      	adds	r3, r7, r3
   2b200:	1c02      	adds	r2, r0, #0
   2b202:	701a      	strb	r2, [r3, #0]
   2b204:	230e      	movs	r3, #14
   2b206:	18fb      	adds	r3, r7, r3
   2b208:	1c0a      	adds	r2, r1, #0
   2b20a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2b20c:	231b      	movs	r3, #27
   2b20e:	18fc      	adds	r4, r7, r3
   2b210:	230f      	movs	r3, #15
   2b212:	18fb      	adds	r3, r7, r3
   2b214:	781b      	ldrb	r3, [r3, #0]
   2b216:	0018      	movs	r0, r3
   2b218:	4b28      	ldr	r3, [pc, #160]	; (2b2bc <disk_write+0xcc>)
   2b21a:	4798      	blx	r3
   2b21c:	0003      	movs	r3, r0
   2b21e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2b220:	231b      	movs	r3, #27
   2b222:	18fb      	adds	r3, r7, r3
   2b224:	781b      	ldrb	r3, [r3, #0]
   2b226:	2b00      	cmp	r3, #0
   2b228:	d101      	bne.n	2b22e <disk_write+0x3e>
		return RES_ERROR;
   2b22a:	2301      	movs	r3, #1
   2b22c:	e042      	b.n	2b2b4 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2b22e:	2314      	movs	r3, #20
   2b230:	18fa      	adds	r2, r7, r3
   2b232:	230f      	movs	r3, #15
   2b234:	18fb      	adds	r3, r7, r3
   2b236:	781b      	ldrb	r3, [r3, #0]
   2b238:	0011      	movs	r1, r2
   2b23a:	0018      	movs	r0, r3
   2b23c:	4b20      	ldr	r3, [pc, #128]	; (2b2c0 <disk_write+0xd0>)
   2b23e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2b240:	230e      	movs	r3, #14
   2b242:	18fb      	adds	r3, r7, r3
   2b244:	781b      	ldrb	r3, [r3, #0]
   2b246:	221b      	movs	r2, #27
   2b248:	18ba      	adds	r2, r7, r2
   2b24a:	7812      	ldrb	r2, [r2, #0]
   2b24c:	4353      	muls	r3, r2
   2b24e:	001a      	movs	r2, r3
   2b250:	687b      	ldr	r3, [r7, #4]
   2b252:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2b254:	697b      	ldr	r3, [r7, #20]
   2b256:	3301      	adds	r3, #1
   2b258:	211b      	movs	r1, #27
   2b25a:	1879      	adds	r1, r7, r1
   2b25c:	7809      	ldrb	r1, [r1, #0]
   2b25e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2b260:	429a      	cmp	r2, r3
   2b262:	d901      	bls.n	2b268 <disk_write+0x78>
		return RES_PARERR;
   2b264:	2304      	movs	r3, #4
   2b266:	e025      	b.n	2b2b4 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2b268:	2300      	movs	r3, #0
   2b26a:	61fb      	str	r3, [r7, #28]
   2b26c:	e01b      	b.n	2b2a6 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2b26e:	231b      	movs	r3, #27
   2b270:	18fb      	adds	r3, r7, r3
   2b272:	781b      	ldrb	r3, [r3, #0]
   2b274:	69fa      	ldr	r2, [r7, #28]
   2b276:	435a      	muls	r2, r3
   2b278:	687b      	ldr	r3, [r7, #4]
   2b27a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2b27c:	231b      	movs	r3, #27
   2b27e:	18fb      	adds	r3, r7, r3
   2b280:	781b      	ldrb	r3, [r3, #0]
   2b282:	69fa      	ldr	r2, [r7, #28]
   2b284:	4353      	muls	r3, r2
   2b286:	025b      	lsls	r3, r3, #9
   2b288:	68ba      	ldr	r2, [r7, #8]
   2b28a:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2b28c:	230f      	movs	r3, #15
   2b28e:	18fb      	adds	r3, r7, r3
   2b290:	781b      	ldrb	r3, [r3, #0]
   2b292:	0018      	movs	r0, r3
   2b294:	4b0b      	ldr	r3, [pc, #44]	; (2b2c4 <disk_write+0xd4>)
   2b296:	4798      	blx	r3
   2b298:	1e03      	subs	r3, r0, #0
   2b29a:	d001      	beq.n	2b2a0 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2b29c:	2301      	movs	r3, #1
   2b29e:	e009      	b.n	2b2b4 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2b2a0:	69fb      	ldr	r3, [r7, #28]
   2b2a2:	3301      	adds	r3, #1
   2b2a4:	61fb      	str	r3, [r7, #28]
   2b2a6:	230e      	movs	r3, #14
   2b2a8:	18fb      	adds	r3, r7, r3
   2b2aa:	781a      	ldrb	r2, [r3, #0]
   2b2ac:	69fb      	ldr	r3, [r7, #28]
   2b2ae:	429a      	cmp	r2, r3
   2b2b0:	d8dd      	bhi.n	2b26e <disk_write+0x7e>
		}
	}

	return RES_OK;
   2b2b2:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2b2b4:	0018      	movs	r0, r3
   2b2b6:	46bd      	mov	sp, r7
   2b2b8:	b009      	add	sp, #36	; 0x24
   2b2ba:	bd90      	pop	{r4, r7, pc}
   2b2bc:	00025db9 	.word	0x00025db9
   2b2c0:	00025d6d 	.word	0x00025d6d
   2b2c4:	00025e81 	.word	0x00025e81

0002b2c8 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2b2c8:	b590      	push	{r4, r7, lr}
   2b2ca:	b085      	sub	sp, #20
   2b2cc:	af00      	add	r7, sp, #0
   2b2ce:	603a      	str	r2, [r7, #0]
   2b2d0:	1dfb      	adds	r3, r7, #7
   2b2d2:	1c02      	adds	r2, r0, #0
   2b2d4:	701a      	strb	r2, [r3, #0]
   2b2d6:	1dbb      	adds	r3, r7, #6
   2b2d8:	1c0a      	adds	r2, r1, #0
   2b2da:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2b2dc:	230f      	movs	r3, #15
   2b2de:	18fb      	adds	r3, r7, r3
   2b2e0:	2204      	movs	r2, #4
   2b2e2:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2b2e4:	1dbb      	adds	r3, r7, #6
   2b2e6:	781b      	ldrb	r3, [r3, #0]
   2b2e8:	2b01      	cmp	r3, #1
   2b2ea:	d00f      	beq.n	2b30c <disk_ioctl+0x44>
   2b2ec:	dc02      	bgt.n	2b2f4 <disk_ioctl+0x2c>
   2b2ee:	2b00      	cmp	r3, #0
   2b2f0:	d044      	beq.n	2b37c <disk_ioctl+0xb4>
   2b2f2:	e054      	b.n	2b39e <disk_ioctl+0xd6>
   2b2f4:	2b02      	cmp	r3, #2
   2b2f6:	d01a      	beq.n	2b32e <disk_ioctl+0x66>
   2b2f8:	2b03      	cmp	r3, #3
   2b2fa:	d150      	bne.n	2b39e <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2b2fc:	683b      	ldr	r3, [r7, #0]
   2b2fe:	2201      	movs	r2, #1
   2b300:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2b302:	230f      	movs	r3, #15
   2b304:	18fb      	adds	r3, r7, r3
   2b306:	2200      	movs	r2, #0
   2b308:	701a      	strb	r2, [r3, #0]
		break;
   2b30a:	e04c      	b.n	2b3a6 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2b30c:	2308      	movs	r3, #8
   2b30e:	18fa      	adds	r2, r7, r3
   2b310:	1dfb      	adds	r3, r7, #7
   2b312:	781b      	ldrb	r3, [r3, #0]
   2b314:	0011      	movs	r1, r2
   2b316:	0018      	movs	r0, r3
   2b318:	4b26      	ldr	r3, [pc, #152]	; (2b3b4 <disk_ioctl+0xec>)
   2b31a:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2b31c:	68bb      	ldr	r3, [r7, #8]
   2b31e:	1c5a      	adds	r2, r3, #1
   2b320:	683b      	ldr	r3, [r7, #0]
   2b322:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2b324:	230f      	movs	r3, #15
   2b326:	18fb      	adds	r3, r7, r3
   2b328:	2200      	movs	r2, #0
   2b32a:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b32c:	e03b      	b.n	2b3a6 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2b32e:	230e      	movs	r3, #14
   2b330:	18fc      	adds	r4, r7, r3
   2b332:	1dfb      	adds	r3, r7, #7
   2b334:	781b      	ldrb	r3, [r3, #0]
   2b336:	0018      	movs	r0, r3
   2b338:	4b1f      	ldr	r3, [pc, #124]	; (2b3b8 <disk_ioctl+0xf0>)
   2b33a:	4798      	blx	r3
   2b33c:	0003      	movs	r3, r0
   2b33e:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2b340:	230e      	movs	r3, #14
   2b342:	18fb      	adds	r3, r7, r3
   2b344:	781b      	ldrb	r3, [r3, #0]
   2b346:	2b01      	cmp	r3, #1
   2b348:	d010      	beq.n	2b36c <disk_ioctl+0xa4>
   2b34a:	230e      	movs	r3, #14
   2b34c:	18fb      	adds	r3, r7, r3
   2b34e:	781b      	ldrb	r3, [r3, #0]
   2b350:	2b02      	cmp	r3, #2
   2b352:	d00b      	beq.n	2b36c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2b354:	230e      	movs	r3, #14
   2b356:	18fb      	adds	r3, r7, r3
   2b358:	781b      	ldrb	r3, [r3, #0]
   2b35a:	2b04      	cmp	r3, #4
   2b35c:	d006      	beq.n	2b36c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2b35e:	230e      	movs	r3, #14
   2b360:	18fb      	adds	r3, r7, r3
   2b362:	781b      	ldrb	r3, [r3, #0]
   2b364:	2b08      	cmp	r3, #8
   2b366:	d001      	beq.n	2b36c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2b368:	2301      	movs	r3, #1
   2b36a:	e01f      	b.n	2b3ac <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2b36c:	683b      	ldr	r3, [r7, #0]
   2b36e:	2200      	movs	r2, #0
   2b370:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2b372:	230f      	movs	r3, #15
   2b374:	18fb      	adds	r3, r7, r3
   2b376:	2200      	movs	r2, #0
   2b378:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b37a:	e014      	b.n	2b3a6 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2b37c:	1dfb      	adds	r3, r7, #7
   2b37e:	781b      	ldrb	r3, [r3, #0]
   2b380:	0018      	movs	r0, r3
   2b382:	4b0e      	ldr	r3, [pc, #56]	; (2b3bc <disk_ioctl+0xf4>)
   2b384:	4798      	blx	r3
   2b386:	1e03      	subs	r3, r0, #0
   2b388:	d104      	bne.n	2b394 <disk_ioctl+0xcc>
			res = RES_OK;
   2b38a:	230f      	movs	r3, #15
   2b38c:	18fb      	adds	r3, r7, r3
   2b38e:	2200      	movs	r2, #0
   2b390:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2b392:	e008      	b.n	2b3a6 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2b394:	230f      	movs	r3, #15
   2b396:	18fb      	adds	r3, r7, r3
   2b398:	2203      	movs	r2, #3
   2b39a:	701a      	strb	r2, [r3, #0]
		break;
   2b39c:	e003      	b.n	2b3a6 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2b39e:	230f      	movs	r3, #15
   2b3a0:	18fb      	adds	r3, r7, r3
   2b3a2:	2204      	movs	r2, #4
   2b3a4:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b3a6:	230f      	movs	r3, #15
   2b3a8:	18fb      	adds	r3, r7, r3
   2b3aa:	781b      	ldrb	r3, [r3, #0]
}
   2b3ac:	0018      	movs	r0, r3
   2b3ae:	46bd      	mov	sp, r7
   2b3b0:	b005      	add	sp, #20
   2b3b2:	bd90      	pop	{r4, r7, pc}
   2b3b4:	00025d6d 	.word	0x00025d6d
   2b3b8:	00025db9 	.word	0x00025db9
   2b3bc:	00025d2d 	.word	0x00025d2d

0002b3c0 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2b3c0:	b580      	push	{r7, lr}
   2b3c2:	b084      	sub	sp, #16
   2b3c4:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2b3c6:	1d3a      	adds	r2, r7, #4
   2b3c8:	4b12      	ldr	r3, [pc, #72]	; (2b414 <get_fattime+0x54>)
   2b3ca:	0011      	movs	r1, r2
   2b3cc:	0018      	movs	r0, r3
   2b3ce:	4b12      	ldr	r3, [pc, #72]	; (2b418 <get_fattime+0x58>)
   2b3d0:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2b3d2:	1d3b      	adds	r3, r7, #4
   2b3d4:	88db      	ldrh	r3, [r3, #6]
   2b3d6:	4a11      	ldr	r2, [pc, #68]	; (2b41c <get_fattime+0x5c>)
   2b3d8:	4694      	mov	ip, r2
   2b3da:	4463      	add	r3, ip
   2b3dc:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2b3de:	1d3b      	adds	r3, r7, #4
   2b3e0:	795b      	ldrb	r3, [r3, #5]
   2b3e2:	055b      	lsls	r3, r3, #21
   2b3e4:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2b3e6:	1d3b      	adds	r3, r7, #4
   2b3e8:	791b      	ldrb	r3, [r3, #4]
   2b3ea:	041b      	lsls	r3, r3, #16
   2b3ec:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2b3ee:	1d3b      	adds	r3, r7, #4
   2b3f0:	789b      	ldrb	r3, [r3, #2]
   2b3f2:	02db      	lsls	r3, r3, #11
   2b3f4:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2b3f6:	1d3b      	adds	r3, r7, #4
   2b3f8:	785b      	ldrb	r3, [r3, #1]
   2b3fa:	015b      	lsls	r3, r3, #5
   2b3fc:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2b3fe:	1d3a      	adds	r2, r7, #4
   2b400:	7812      	ldrb	r2, [r2, #0]
   2b402:	0852      	lsrs	r2, r2, #1
   2b404:	b2d2      	uxtb	r2, r2
   2b406:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2b408:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2b40a:	68fb      	ldr	r3, [r7, #12]
}
   2b40c:	0018      	movs	r0, r3
   2b40e:	46bd      	mov	sp, r7
   2b410:	b004      	add	sp, #16
   2b412:	bd80      	pop	{r7, pc}
   2b414:	20005a94 	.word	0x20005a94
   2b418:	00026b99 	.word	0x00026b99
   2b41c:	fffff844 	.word	0xfffff844

0002b420 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2b420:	b580      	push	{r7, lr}
   2b422:	b086      	sub	sp, #24
   2b424:	af00      	add	r7, sp, #0
   2b426:	60f8      	str	r0, [r7, #12]
   2b428:	60b9      	str	r1, [r7, #8]
   2b42a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b42c:	68fb      	ldr	r3, [r7, #12]
   2b42e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2b430:	68bb      	ldr	r3, [r7, #8]
   2b432:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2b434:	e007      	b.n	2b446 <mem_cpy+0x26>
		*d++ = *s++;
   2b436:	697b      	ldr	r3, [r7, #20]
   2b438:	1c5a      	adds	r2, r3, #1
   2b43a:	617a      	str	r2, [r7, #20]
   2b43c:	693a      	ldr	r2, [r7, #16]
   2b43e:	1c51      	adds	r1, r2, #1
   2b440:	6139      	str	r1, [r7, #16]
   2b442:	7812      	ldrb	r2, [r2, #0]
   2b444:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b446:	687b      	ldr	r3, [r7, #4]
   2b448:	1e5a      	subs	r2, r3, #1
   2b44a:	607a      	str	r2, [r7, #4]
   2b44c:	2b00      	cmp	r3, #0
   2b44e:	d1f2      	bne.n	2b436 <mem_cpy+0x16>
}
   2b450:	46c0      	nop			; (mov r8, r8)
   2b452:	46bd      	mov	sp, r7
   2b454:	b006      	add	sp, #24
   2b456:	bd80      	pop	{r7, pc}

0002b458 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2b458:	b580      	push	{r7, lr}
   2b45a:	b086      	sub	sp, #24
   2b45c:	af00      	add	r7, sp, #0
   2b45e:	60f8      	str	r0, [r7, #12]
   2b460:	60b9      	str	r1, [r7, #8]
   2b462:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b464:	68fb      	ldr	r3, [r7, #12]
   2b466:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2b468:	e005      	b.n	2b476 <mem_set+0x1e>
		*d++ = (BYTE)val;
   2b46a:	697b      	ldr	r3, [r7, #20]
   2b46c:	1c5a      	adds	r2, r3, #1
   2b46e:	617a      	str	r2, [r7, #20]
   2b470:	68ba      	ldr	r2, [r7, #8]
   2b472:	b2d2      	uxtb	r2, r2
   2b474:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b476:	687b      	ldr	r3, [r7, #4]
   2b478:	1e5a      	subs	r2, r3, #1
   2b47a:	607a      	str	r2, [r7, #4]
   2b47c:	2b00      	cmp	r3, #0
   2b47e:	d1f4      	bne.n	2b46a <mem_set+0x12>
}
   2b480:	46c0      	nop			; (mov r8, r8)
   2b482:	46bd      	mov	sp, r7
   2b484:	b006      	add	sp, #24
   2b486:	bd80      	pop	{r7, pc}

0002b488 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2b488:	b580      	push	{r7, lr}
   2b48a:	b088      	sub	sp, #32
   2b48c:	af00      	add	r7, sp, #0
   2b48e:	60f8      	str	r0, [r7, #12]
   2b490:	60b9      	str	r1, [r7, #8]
   2b492:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2b494:	68fb      	ldr	r3, [r7, #12]
   2b496:	61fb      	str	r3, [r7, #28]
   2b498:	68bb      	ldr	r3, [r7, #8]
   2b49a:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2b49c:	2300      	movs	r3, #0
   2b49e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2b4a0:	46c0      	nop			; (mov r8, r8)
   2b4a2:	687b      	ldr	r3, [r7, #4]
   2b4a4:	1e5a      	subs	r2, r3, #1
   2b4a6:	607a      	str	r2, [r7, #4]
   2b4a8:	2b00      	cmp	r3, #0
   2b4aa:	d00d      	beq.n	2b4c8 <mem_cmp+0x40>
   2b4ac:	69fb      	ldr	r3, [r7, #28]
   2b4ae:	1c5a      	adds	r2, r3, #1
   2b4b0:	61fa      	str	r2, [r7, #28]
   2b4b2:	781b      	ldrb	r3, [r3, #0]
   2b4b4:	0019      	movs	r1, r3
   2b4b6:	69bb      	ldr	r3, [r7, #24]
   2b4b8:	1c5a      	adds	r2, r3, #1
   2b4ba:	61ba      	str	r2, [r7, #24]
   2b4bc:	781b      	ldrb	r3, [r3, #0]
   2b4be:	1acb      	subs	r3, r1, r3
   2b4c0:	617b      	str	r3, [r7, #20]
   2b4c2:	697b      	ldr	r3, [r7, #20]
   2b4c4:	2b00      	cmp	r3, #0
   2b4c6:	d0ec      	beq.n	2b4a2 <mem_cmp+0x1a>
	return r;
   2b4c8:	697b      	ldr	r3, [r7, #20]
}
   2b4ca:	0018      	movs	r0, r3
   2b4cc:	46bd      	mov	sp, r7
   2b4ce:	b008      	add	sp, #32
   2b4d0:	bd80      	pop	{r7, pc}

0002b4d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2b4d2:	b580      	push	{r7, lr}
   2b4d4:	b082      	sub	sp, #8
   2b4d6:	af00      	add	r7, sp, #0
   2b4d8:	6078      	str	r0, [r7, #4]
   2b4da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2b4dc:	e002      	b.n	2b4e4 <chk_chr+0x12>
   2b4de:	687b      	ldr	r3, [r7, #4]
   2b4e0:	3301      	adds	r3, #1
   2b4e2:	607b      	str	r3, [r7, #4]
   2b4e4:	687b      	ldr	r3, [r7, #4]
   2b4e6:	781b      	ldrb	r3, [r3, #0]
   2b4e8:	2b00      	cmp	r3, #0
   2b4ea:	d005      	beq.n	2b4f8 <chk_chr+0x26>
   2b4ec:	687b      	ldr	r3, [r7, #4]
   2b4ee:	781b      	ldrb	r3, [r3, #0]
   2b4f0:	001a      	movs	r2, r3
   2b4f2:	683b      	ldr	r3, [r7, #0]
   2b4f4:	429a      	cmp	r2, r3
   2b4f6:	d1f2      	bne.n	2b4de <chk_chr+0xc>
	return *str;
   2b4f8:	687b      	ldr	r3, [r7, #4]
   2b4fa:	781b      	ldrb	r3, [r3, #0]
}
   2b4fc:	0018      	movs	r0, r3
   2b4fe:	46bd      	mov	sp, r7
   2b500:	b002      	add	sp, #8
   2b502:	bd80      	pop	{r7, pc}

0002b504 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2b504:	b590      	push	{r4, r7, lr}
   2b506:	b085      	sub	sp, #20
   2b508:	af00      	add	r7, sp, #0
   2b50a:	6078      	str	r0, [r7, #4]
   2b50c:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2b50e:	687b      	ldr	r3, [r7, #4]
   2b510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b512:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2b514:	68fa      	ldr	r2, [r7, #12]
   2b516:	683b      	ldr	r3, [r7, #0]
   2b518:	429a      	cmp	r2, r3
   2b51a:	d04e      	beq.n	2b5ba <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2b51c:	687b      	ldr	r3, [r7, #4]
   2b51e:	791b      	ldrb	r3, [r3, #4]
   2b520:	2b00      	cmp	r3, #0
   2b522:	d037      	beq.n	2b594 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2b524:	687b      	ldr	r3, [r7, #4]
   2b526:	7858      	ldrb	r0, [r3, #1]
   2b528:	687b      	ldr	r3, [r7, #4]
   2b52a:	3330      	adds	r3, #48	; 0x30
   2b52c:	0019      	movs	r1, r3
   2b52e:	68fa      	ldr	r2, [r7, #12]
   2b530:	2301      	movs	r3, #1
   2b532:	4c24      	ldr	r4, [pc, #144]	; (2b5c4 <move_window+0xc0>)
   2b534:	47a0      	blx	r4
   2b536:	1e03      	subs	r3, r0, #0
   2b538:	d001      	beq.n	2b53e <move_window+0x3a>
				return FR_DISK_ERR;
   2b53a:	2301      	movs	r3, #1
   2b53c:	e03e      	b.n	2b5bc <move_window+0xb8>
			fs->wflag = 0;
   2b53e:	687b      	ldr	r3, [r7, #4]
   2b540:	2200      	movs	r2, #0
   2b542:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2b544:	687b      	ldr	r3, [r7, #4]
   2b546:	6a1a      	ldr	r2, [r3, #32]
   2b548:	687b      	ldr	r3, [r7, #4]
   2b54a:	69db      	ldr	r3, [r3, #28]
   2b54c:	18d2      	adds	r2, r2, r3
   2b54e:	68fb      	ldr	r3, [r7, #12]
   2b550:	429a      	cmp	r2, r3
   2b552:	d91f      	bls.n	2b594 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b554:	230b      	movs	r3, #11
   2b556:	18fb      	adds	r3, r7, r3
   2b558:	687a      	ldr	r2, [r7, #4]
   2b55a:	78d2      	ldrb	r2, [r2, #3]
   2b55c:	701a      	strb	r2, [r3, #0]
   2b55e:	e014      	b.n	2b58a <move_window+0x86>
					wsect += fs->fsize;
   2b560:	687b      	ldr	r3, [r7, #4]
   2b562:	69db      	ldr	r3, [r3, #28]
   2b564:	68fa      	ldr	r2, [r7, #12]
   2b566:	18d3      	adds	r3, r2, r3
   2b568:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2b56a:	687b      	ldr	r3, [r7, #4]
   2b56c:	7858      	ldrb	r0, [r3, #1]
   2b56e:	687b      	ldr	r3, [r7, #4]
   2b570:	3330      	adds	r3, #48	; 0x30
   2b572:	0019      	movs	r1, r3
   2b574:	68fa      	ldr	r2, [r7, #12]
   2b576:	2301      	movs	r3, #1
   2b578:	4c12      	ldr	r4, [pc, #72]	; (2b5c4 <move_window+0xc0>)
   2b57a:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b57c:	230b      	movs	r3, #11
   2b57e:	18fb      	adds	r3, r7, r3
   2b580:	781a      	ldrb	r2, [r3, #0]
   2b582:	230b      	movs	r3, #11
   2b584:	18fb      	adds	r3, r7, r3
   2b586:	3a01      	subs	r2, #1
   2b588:	701a      	strb	r2, [r3, #0]
   2b58a:	230b      	movs	r3, #11
   2b58c:	18fb      	adds	r3, r7, r3
   2b58e:	781b      	ldrb	r3, [r3, #0]
   2b590:	2b01      	cmp	r3, #1
   2b592:	d8e5      	bhi.n	2b560 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2b594:	683b      	ldr	r3, [r7, #0]
   2b596:	2b00      	cmp	r3, #0
   2b598:	d00f      	beq.n	2b5ba <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2b59a:	687b      	ldr	r3, [r7, #4]
   2b59c:	7858      	ldrb	r0, [r3, #1]
   2b59e:	687b      	ldr	r3, [r7, #4]
   2b5a0:	3330      	adds	r3, #48	; 0x30
   2b5a2:	0019      	movs	r1, r3
   2b5a4:	683a      	ldr	r2, [r7, #0]
   2b5a6:	2301      	movs	r3, #1
   2b5a8:	4c07      	ldr	r4, [pc, #28]	; (2b5c8 <move_window+0xc4>)
   2b5aa:	47a0      	blx	r4
   2b5ac:	1e03      	subs	r3, r0, #0
   2b5ae:	d001      	beq.n	2b5b4 <move_window+0xb0>
				return FR_DISK_ERR;
   2b5b0:	2301      	movs	r3, #1
   2b5b2:	e003      	b.n	2b5bc <move_window+0xb8>
			fs->winsect = sector;
   2b5b4:	687b      	ldr	r3, [r7, #4]
   2b5b6:	683a      	ldr	r2, [r7, #0]
   2b5b8:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2b5ba:	2300      	movs	r3, #0
}
   2b5bc:	0018      	movs	r0, r3
   2b5be:	46bd      	mov	sp, r7
   2b5c0:	b005      	add	sp, #20
   2b5c2:	bd90      	pop	{r4, r7, pc}
   2b5c4:	0002b1f1 	.word	0x0002b1f1
   2b5c8:	0002b119 	.word	0x0002b119

0002b5cc <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2b5cc:	b590      	push	{r4, r7, lr}
   2b5ce:	b085      	sub	sp, #20
   2b5d0:	af00      	add	r7, sp, #0
   2b5d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2b5d4:	230f      	movs	r3, #15
   2b5d6:	18fc      	adds	r4, r7, r3
   2b5d8:	687b      	ldr	r3, [r7, #4]
   2b5da:	2100      	movs	r1, #0
   2b5dc:	0018      	movs	r0, r3
   2b5de:	4b52      	ldr	r3, [pc, #328]	; (2b728 <sync+0x15c>)
   2b5e0:	4798      	blx	r3
   2b5e2:	0003      	movs	r3, r0
   2b5e4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2b5e6:	230f      	movs	r3, #15
   2b5e8:	18fb      	adds	r3, r7, r3
   2b5ea:	781b      	ldrb	r3, [r3, #0]
   2b5ec:	2b00      	cmp	r3, #0
   2b5ee:	d000      	beq.n	2b5f2 <sync+0x26>
   2b5f0:	e093      	b.n	2b71a <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2b5f2:	687b      	ldr	r3, [r7, #4]
   2b5f4:	781b      	ldrb	r3, [r3, #0]
   2b5f6:	2b03      	cmp	r3, #3
   2b5f8:	d000      	beq.n	2b5fc <sync+0x30>
   2b5fa:	e081      	b.n	2b700 <sync+0x134>
   2b5fc:	687b      	ldr	r3, [r7, #4]
   2b5fe:	795b      	ldrb	r3, [r3, #5]
   2b600:	2b00      	cmp	r3, #0
   2b602:	d07d      	beq.n	2b700 <sync+0x134>
			fs->winsect = 0;
   2b604:	687b      	ldr	r3, [r7, #4]
   2b606:	2200      	movs	r2, #0
   2b608:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2b60a:	687b      	ldr	r3, [r7, #4]
   2b60c:	3330      	adds	r3, #48	; 0x30
   2b60e:	0018      	movs	r0, r3
   2b610:	2380      	movs	r3, #128	; 0x80
   2b612:	009b      	lsls	r3, r3, #2
   2b614:	001a      	movs	r2, r3
   2b616:	2100      	movs	r1, #0
   2b618:	4b44      	ldr	r3, [pc, #272]	; (2b72c <sync+0x160>)
   2b61a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2b61c:	687b      	ldr	r3, [r7, #4]
   2b61e:	4a44      	ldr	r2, [pc, #272]	; (2b730 <sync+0x164>)
   2b620:	2155      	movs	r1, #85	; 0x55
   2b622:	5499      	strb	r1, [r3, r2]
   2b624:	687b      	ldr	r3, [r7, #4]
   2b626:	4a43      	ldr	r2, [pc, #268]	; (2b734 <sync+0x168>)
   2b628:	21aa      	movs	r1, #170	; 0xaa
   2b62a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2b62c:	687b      	ldr	r3, [r7, #4]
   2b62e:	2230      	movs	r2, #48	; 0x30
   2b630:	2152      	movs	r1, #82	; 0x52
   2b632:	5499      	strb	r1, [r3, r2]
   2b634:	687b      	ldr	r3, [r7, #4]
   2b636:	2231      	movs	r2, #49	; 0x31
   2b638:	2152      	movs	r1, #82	; 0x52
   2b63a:	5499      	strb	r1, [r3, r2]
   2b63c:	687b      	ldr	r3, [r7, #4]
   2b63e:	2232      	movs	r2, #50	; 0x32
   2b640:	2161      	movs	r1, #97	; 0x61
   2b642:	5499      	strb	r1, [r3, r2]
   2b644:	687b      	ldr	r3, [r7, #4]
   2b646:	2233      	movs	r2, #51	; 0x33
   2b648:	2141      	movs	r1, #65	; 0x41
   2b64a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2b64c:	687a      	ldr	r2, [r7, #4]
   2b64e:	2385      	movs	r3, #133	; 0x85
   2b650:	009b      	lsls	r3, r3, #2
   2b652:	2172      	movs	r1, #114	; 0x72
   2b654:	54d1      	strb	r1, [r2, r3]
   2b656:	687b      	ldr	r3, [r7, #4]
   2b658:	4a37      	ldr	r2, [pc, #220]	; (2b738 <sync+0x16c>)
   2b65a:	2172      	movs	r1, #114	; 0x72
   2b65c:	5499      	strb	r1, [r3, r2]
   2b65e:	687b      	ldr	r3, [r7, #4]
   2b660:	4a36      	ldr	r2, [pc, #216]	; (2b73c <sync+0x170>)
   2b662:	2141      	movs	r1, #65	; 0x41
   2b664:	5499      	strb	r1, [r3, r2]
   2b666:	687b      	ldr	r3, [r7, #4]
   2b668:	4a35      	ldr	r2, [pc, #212]	; (2b740 <sync+0x174>)
   2b66a:	2161      	movs	r1, #97	; 0x61
   2b66c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2b66e:	687b      	ldr	r3, [r7, #4]
   2b670:	691b      	ldr	r3, [r3, #16]
   2b672:	b2d9      	uxtb	r1, r3
   2b674:	687a      	ldr	r2, [r7, #4]
   2b676:	2386      	movs	r3, #134	; 0x86
   2b678:	009b      	lsls	r3, r3, #2
   2b67a:	54d1      	strb	r1, [r2, r3]
   2b67c:	687b      	ldr	r3, [r7, #4]
   2b67e:	691b      	ldr	r3, [r3, #16]
   2b680:	b29b      	uxth	r3, r3
   2b682:	0a1b      	lsrs	r3, r3, #8
   2b684:	b29b      	uxth	r3, r3
   2b686:	b2d9      	uxtb	r1, r3
   2b688:	687b      	ldr	r3, [r7, #4]
   2b68a:	4a2e      	ldr	r2, [pc, #184]	; (2b744 <sync+0x178>)
   2b68c:	5499      	strb	r1, [r3, r2]
   2b68e:	687b      	ldr	r3, [r7, #4]
   2b690:	691b      	ldr	r3, [r3, #16]
   2b692:	0c1b      	lsrs	r3, r3, #16
   2b694:	b2d9      	uxtb	r1, r3
   2b696:	687b      	ldr	r3, [r7, #4]
   2b698:	4a2b      	ldr	r2, [pc, #172]	; (2b748 <sync+0x17c>)
   2b69a:	5499      	strb	r1, [r3, r2]
   2b69c:	687b      	ldr	r3, [r7, #4]
   2b69e:	691b      	ldr	r3, [r3, #16]
   2b6a0:	0e1b      	lsrs	r3, r3, #24
   2b6a2:	b2d9      	uxtb	r1, r3
   2b6a4:	687b      	ldr	r3, [r7, #4]
   2b6a6:	4a29      	ldr	r2, [pc, #164]	; (2b74c <sync+0x180>)
   2b6a8:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2b6aa:	687b      	ldr	r3, [r7, #4]
   2b6ac:	68db      	ldr	r3, [r3, #12]
   2b6ae:	b2d9      	uxtb	r1, r3
   2b6b0:	687a      	ldr	r2, [r7, #4]
   2b6b2:	2387      	movs	r3, #135	; 0x87
   2b6b4:	009b      	lsls	r3, r3, #2
   2b6b6:	54d1      	strb	r1, [r2, r3]
   2b6b8:	687b      	ldr	r3, [r7, #4]
   2b6ba:	68db      	ldr	r3, [r3, #12]
   2b6bc:	b29b      	uxth	r3, r3
   2b6be:	0a1b      	lsrs	r3, r3, #8
   2b6c0:	b29b      	uxth	r3, r3
   2b6c2:	b2d9      	uxtb	r1, r3
   2b6c4:	687b      	ldr	r3, [r7, #4]
   2b6c6:	4a22      	ldr	r2, [pc, #136]	; (2b750 <sync+0x184>)
   2b6c8:	5499      	strb	r1, [r3, r2]
   2b6ca:	687b      	ldr	r3, [r7, #4]
   2b6cc:	68db      	ldr	r3, [r3, #12]
   2b6ce:	0c1b      	lsrs	r3, r3, #16
   2b6d0:	b2d9      	uxtb	r1, r3
   2b6d2:	687b      	ldr	r3, [r7, #4]
   2b6d4:	4a1f      	ldr	r2, [pc, #124]	; (2b754 <sync+0x188>)
   2b6d6:	5499      	strb	r1, [r3, r2]
   2b6d8:	687b      	ldr	r3, [r7, #4]
   2b6da:	68db      	ldr	r3, [r3, #12]
   2b6dc:	0e1b      	lsrs	r3, r3, #24
   2b6de:	b2d9      	uxtb	r1, r3
   2b6e0:	687b      	ldr	r3, [r7, #4]
   2b6e2:	4a1d      	ldr	r2, [pc, #116]	; (2b758 <sync+0x18c>)
   2b6e4:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2b6e6:	687b      	ldr	r3, [r7, #4]
   2b6e8:	7858      	ldrb	r0, [r3, #1]
   2b6ea:	687b      	ldr	r3, [r7, #4]
   2b6ec:	3330      	adds	r3, #48	; 0x30
   2b6ee:	0019      	movs	r1, r3
   2b6f0:	687b      	ldr	r3, [r7, #4]
   2b6f2:	695a      	ldr	r2, [r3, #20]
   2b6f4:	2301      	movs	r3, #1
   2b6f6:	4c19      	ldr	r4, [pc, #100]	; (2b75c <sync+0x190>)
   2b6f8:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2b6fa:	687b      	ldr	r3, [r7, #4]
   2b6fc:	2200      	movs	r2, #0
   2b6fe:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2b700:	687b      	ldr	r3, [r7, #4]
   2b702:	785b      	ldrb	r3, [r3, #1]
   2b704:	2200      	movs	r2, #0
   2b706:	2100      	movs	r1, #0
   2b708:	0018      	movs	r0, r3
   2b70a:	4b15      	ldr	r3, [pc, #84]	; (2b760 <sync+0x194>)
   2b70c:	4798      	blx	r3
   2b70e:	1e03      	subs	r3, r0, #0
   2b710:	d003      	beq.n	2b71a <sync+0x14e>
			res = FR_DISK_ERR;
   2b712:	230f      	movs	r3, #15
   2b714:	18fb      	adds	r3, r7, r3
   2b716:	2201      	movs	r2, #1
   2b718:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b71a:	230f      	movs	r3, #15
   2b71c:	18fb      	adds	r3, r7, r3
   2b71e:	781b      	ldrb	r3, [r3, #0]
}
   2b720:	0018      	movs	r0, r3
   2b722:	46bd      	mov	sp, r7
   2b724:	b005      	add	sp, #20
   2b726:	bd90      	pop	{r4, r7, pc}
   2b728:	0002b505 	.word	0x0002b505
   2b72c:	0002b459 	.word	0x0002b459
   2b730:	0000022e 	.word	0x0000022e
   2b734:	0000022f 	.word	0x0000022f
   2b738:	00000215 	.word	0x00000215
   2b73c:	00000216 	.word	0x00000216
   2b740:	00000217 	.word	0x00000217
   2b744:	00000219 	.word	0x00000219
   2b748:	0000021a 	.word	0x0000021a
   2b74c:	0000021b 	.word	0x0000021b
   2b750:	0000021d 	.word	0x0000021d
   2b754:	0000021e 	.word	0x0000021e
   2b758:	0000021f 	.word	0x0000021f
   2b75c:	0002b1f1 	.word	0x0002b1f1
   2b760:	0002b2c9 	.word	0x0002b2c9

0002b764 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2b764:	b580      	push	{r7, lr}
   2b766:	b082      	sub	sp, #8
   2b768:	af00      	add	r7, sp, #0
   2b76a:	6078      	str	r0, [r7, #4]
   2b76c:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2b76e:	683b      	ldr	r3, [r7, #0]
   2b770:	3b02      	subs	r3, #2
   2b772:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2b774:	687b      	ldr	r3, [r7, #4]
   2b776:	699b      	ldr	r3, [r3, #24]
   2b778:	1e9a      	subs	r2, r3, #2
   2b77a:	683b      	ldr	r3, [r7, #0]
   2b77c:	429a      	cmp	r2, r3
   2b77e:	d801      	bhi.n	2b784 <clust2sect+0x20>
   2b780:	2300      	movs	r3, #0
   2b782:	e007      	b.n	2b794 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2b784:	687b      	ldr	r3, [r7, #4]
   2b786:	789b      	ldrb	r3, [r3, #2]
   2b788:	001a      	movs	r2, r3
   2b78a:	683b      	ldr	r3, [r7, #0]
   2b78c:	435a      	muls	r2, r3
   2b78e:	687b      	ldr	r3, [r7, #4]
   2b790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b792:	18d3      	adds	r3, r2, r3
}
   2b794:	0018      	movs	r0, r3
   2b796:	46bd      	mov	sp, r7
   2b798:	b002      	add	sp, #8
   2b79a:	bd80      	pop	{r7, pc}

0002b79c <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2b79c:	b580      	push	{r7, lr}
   2b79e:	b086      	sub	sp, #24
   2b7a0:	af00      	add	r7, sp, #0
   2b7a2:	6078      	str	r0, [r7, #4]
   2b7a4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2b7a6:	683b      	ldr	r3, [r7, #0]
   2b7a8:	2b01      	cmp	r3, #1
   2b7aa:	d904      	bls.n	2b7b6 <get_fat+0x1a>
   2b7ac:	687b      	ldr	r3, [r7, #4]
   2b7ae:	699a      	ldr	r2, [r3, #24]
   2b7b0:	683b      	ldr	r3, [r7, #0]
   2b7b2:	429a      	cmp	r2, r3
   2b7b4:	d801      	bhi.n	2b7ba <get_fat+0x1e>
		return 1;
   2b7b6:	2301      	movs	r3, #1
   2b7b8:	e09f      	b.n	2b8fa <get_fat+0x15e>

	switch (fs->fs_type) {
   2b7ba:	687b      	ldr	r3, [r7, #4]
   2b7bc:	781b      	ldrb	r3, [r3, #0]
   2b7be:	2b02      	cmp	r3, #2
   2b7c0:	d048      	beq.n	2b854 <get_fat+0xb8>
   2b7c2:	2b03      	cmp	r3, #3
   2b7c4:	d067      	beq.n	2b896 <get_fat+0xfa>
   2b7c6:	2b01      	cmp	r3, #1
   2b7c8:	d000      	beq.n	2b7cc <get_fat+0x30>
   2b7ca:	e094      	b.n	2b8f6 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2b7cc:	683b      	ldr	r3, [r7, #0]
   2b7ce:	617b      	str	r3, [r7, #20]
   2b7d0:	697b      	ldr	r3, [r7, #20]
   2b7d2:	085b      	lsrs	r3, r3, #1
   2b7d4:	697a      	ldr	r2, [r7, #20]
   2b7d6:	18d3      	adds	r3, r2, r3
   2b7d8:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b7da:	687b      	ldr	r3, [r7, #4]
   2b7dc:	6a1a      	ldr	r2, [r3, #32]
   2b7de:	697b      	ldr	r3, [r7, #20]
   2b7e0:	0a5b      	lsrs	r3, r3, #9
   2b7e2:	18d2      	adds	r2, r2, r3
   2b7e4:	687b      	ldr	r3, [r7, #4]
   2b7e6:	0011      	movs	r1, r2
   2b7e8:	0018      	movs	r0, r3
   2b7ea:	4b46      	ldr	r3, [pc, #280]	; (2b904 <get_fat+0x168>)
   2b7ec:	4798      	blx	r3
   2b7ee:	1e03      	subs	r3, r0, #0
   2b7f0:	d000      	beq.n	2b7f4 <get_fat+0x58>
   2b7f2:	e079      	b.n	2b8e8 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2b7f4:	697b      	ldr	r3, [r7, #20]
   2b7f6:	05db      	lsls	r3, r3, #23
   2b7f8:	0ddb      	lsrs	r3, r3, #23
   2b7fa:	687a      	ldr	r2, [r7, #4]
   2b7fc:	2130      	movs	r1, #48	; 0x30
   2b7fe:	18d3      	adds	r3, r2, r3
   2b800:	185b      	adds	r3, r3, r1
   2b802:	781b      	ldrb	r3, [r3, #0]
   2b804:	613b      	str	r3, [r7, #16]
   2b806:	697b      	ldr	r3, [r7, #20]
   2b808:	3301      	adds	r3, #1
   2b80a:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b80c:	687b      	ldr	r3, [r7, #4]
   2b80e:	6a1a      	ldr	r2, [r3, #32]
   2b810:	697b      	ldr	r3, [r7, #20]
   2b812:	0a5b      	lsrs	r3, r3, #9
   2b814:	18d2      	adds	r2, r2, r3
   2b816:	687b      	ldr	r3, [r7, #4]
   2b818:	0011      	movs	r1, r2
   2b81a:	0018      	movs	r0, r3
   2b81c:	4b39      	ldr	r3, [pc, #228]	; (2b904 <get_fat+0x168>)
   2b81e:	4798      	blx	r3
   2b820:	1e03      	subs	r3, r0, #0
   2b822:	d163      	bne.n	2b8ec <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2b824:	697b      	ldr	r3, [r7, #20]
   2b826:	05db      	lsls	r3, r3, #23
   2b828:	0ddb      	lsrs	r3, r3, #23
   2b82a:	687a      	ldr	r2, [r7, #4]
   2b82c:	2130      	movs	r1, #48	; 0x30
   2b82e:	18d3      	adds	r3, r2, r3
   2b830:	185b      	adds	r3, r3, r1
   2b832:	781b      	ldrb	r3, [r3, #0]
   2b834:	021b      	lsls	r3, r3, #8
   2b836:	001a      	movs	r2, r3
   2b838:	693b      	ldr	r3, [r7, #16]
   2b83a:	4313      	orrs	r3, r2
   2b83c:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2b83e:	683b      	ldr	r3, [r7, #0]
   2b840:	2201      	movs	r2, #1
   2b842:	4013      	ands	r3, r2
   2b844:	d002      	beq.n	2b84c <get_fat+0xb0>
   2b846:	693b      	ldr	r3, [r7, #16]
   2b848:	091b      	lsrs	r3, r3, #4
   2b84a:	e056      	b.n	2b8fa <get_fat+0x15e>
   2b84c:	693b      	ldr	r3, [r7, #16]
   2b84e:	051b      	lsls	r3, r3, #20
   2b850:	0d1b      	lsrs	r3, r3, #20
   2b852:	e052      	b.n	2b8fa <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2b854:	687b      	ldr	r3, [r7, #4]
   2b856:	6a1a      	ldr	r2, [r3, #32]
   2b858:	683b      	ldr	r3, [r7, #0]
   2b85a:	0a1b      	lsrs	r3, r3, #8
   2b85c:	18d2      	adds	r2, r2, r3
   2b85e:	687b      	ldr	r3, [r7, #4]
   2b860:	0011      	movs	r1, r2
   2b862:	0018      	movs	r0, r3
   2b864:	4b27      	ldr	r3, [pc, #156]	; (2b904 <get_fat+0x168>)
   2b866:	4798      	blx	r3
   2b868:	1e03      	subs	r3, r0, #0
   2b86a:	d141      	bne.n	2b8f0 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2b86c:	683b      	ldr	r3, [r7, #0]
   2b86e:	005a      	lsls	r2, r3, #1
   2b870:	23ff      	movs	r3, #255	; 0xff
   2b872:	005b      	lsls	r3, r3, #1
   2b874:	4013      	ands	r3, r2
   2b876:	3330      	adds	r3, #48	; 0x30
   2b878:	687a      	ldr	r2, [r7, #4]
   2b87a:	18d3      	adds	r3, r2, r3
   2b87c:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2b87e:	68fb      	ldr	r3, [r7, #12]
   2b880:	3301      	adds	r3, #1
   2b882:	781b      	ldrb	r3, [r3, #0]
   2b884:	021b      	lsls	r3, r3, #8
   2b886:	b21a      	sxth	r2, r3
   2b888:	68fb      	ldr	r3, [r7, #12]
   2b88a:	781b      	ldrb	r3, [r3, #0]
   2b88c:	b21b      	sxth	r3, r3
   2b88e:	4313      	orrs	r3, r2
   2b890:	b21b      	sxth	r3, r3
   2b892:	b29b      	uxth	r3, r3
   2b894:	e031      	b.n	2b8fa <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2b896:	687b      	ldr	r3, [r7, #4]
   2b898:	6a1a      	ldr	r2, [r3, #32]
   2b89a:	683b      	ldr	r3, [r7, #0]
   2b89c:	09db      	lsrs	r3, r3, #7
   2b89e:	18d2      	adds	r2, r2, r3
   2b8a0:	687b      	ldr	r3, [r7, #4]
   2b8a2:	0011      	movs	r1, r2
   2b8a4:	0018      	movs	r0, r3
   2b8a6:	4b17      	ldr	r3, [pc, #92]	; (2b904 <get_fat+0x168>)
   2b8a8:	4798      	blx	r3
   2b8aa:	1e03      	subs	r3, r0, #0
   2b8ac:	d122      	bne.n	2b8f4 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2b8ae:	683b      	ldr	r3, [r7, #0]
   2b8b0:	009a      	lsls	r2, r3, #2
   2b8b2:	23fe      	movs	r3, #254	; 0xfe
   2b8b4:	005b      	lsls	r3, r3, #1
   2b8b6:	4013      	ands	r3, r2
   2b8b8:	3330      	adds	r3, #48	; 0x30
   2b8ba:	687a      	ldr	r2, [r7, #4]
   2b8bc:	18d3      	adds	r3, r2, r3
   2b8be:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2b8c0:	68fb      	ldr	r3, [r7, #12]
   2b8c2:	3303      	adds	r3, #3
   2b8c4:	781b      	ldrb	r3, [r3, #0]
   2b8c6:	061a      	lsls	r2, r3, #24
   2b8c8:	68fb      	ldr	r3, [r7, #12]
   2b8ca:	3302      	adds	r3, #2
   2b8cc:	781b      	ldrb	r3, [r3, #0]
   2b8ce:	041b      	lsls	r3, r3, #16
   2b8d0:	4313      	orrs	r3, r2
   2b8d2:	68fa      	ldr	r2, [r7, #12]
   2b8d4:	3201      	adds	r2, #1
   2b8d6:	7812      	ldrb	r2, [r2, #0]
   2b8d8:	0212      	lsls	r2, r2, #8
   2b8da:	4313      	orrs	r3, r2
   2b8dc:	68fa      	ldr	r2, [r7, #12]
   2b8de:	7812      	ldrb	r2, [r2, #0]
   2b8e0:	4313      	orrs	r3, r2
   2b8e2:	011b      	lsls	r3, r3, #4
   2b8e4:	091b      	lsrs	r3, r3, #4
   2b8e6:	e008      	b.n	2b8fa <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b8e8:	46c0      	nop			; (mov r8, r8)
   2b8ea:	e004      	b.n	2b8f6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b8ec:	46c0      	nop			; (mov r8, r8)
   2b8ee:	e002      	b.n	2b8f6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2b8f0:	46c0      	nop			; (mov r8, r8)
   2b8f2:	e000      	b.n	2b8f6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2b8f4:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2b8f6:	2301      	movs	r3, #1
   2b8f8:	425b      	negs	r3, r3
}
   2b8fa:	0018      	movs	r0, r3
   2b8fc:	46bd      	mov	sp, r7
   2b8fe:	b006      	add	sp, #24
   2b900:	bd80      	pop	{r7, pc}
   2b902:	46c0      	nop			; (mov r8, r8)
   2b904:	0002b505 	.word	0x0002b505

0002b908 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2b908:	b590      	push	{r4, r7, lr}
   2b90a:	b089      	sub	sp, #36	; 0x24
   2b90c:	af00      	add	r7, sp, #0
   2b90e:	60f8      	str	r0, [r7, #12]
   2b910:	60b9      	str	r1, [r7, #8]
   2b912:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2b914:	68bb      	ldr	r3, [r7, #8]
   2b916:	2b01      	cmp	r3, #1
   2b918:	d904      	bls.n	2b924 <put_fat+0x1c>
   2b91a:	68fb      	ldr	r3, [r7, #12]
   2b91c:	699a      	ldr	r2, [r3, #24]
   2b91e:	68bb      	ldr	r3, [r7, #8]
   2b920:	429a      	cmp	r2, r3
   2b922:	d804      	bhi.n	2b92e <put_fat+0x26>
		res = FR_INT_ERR;
   2b924:	231f      	movs	r3, #31
   2b926:	18fb      	adds	r3, r7, r3
   2b928:	2202      	movs	r2, #2
   2b92a:	701a      	strb	r2, [r3, #0]
   2b92c:	e100      	b.n	2bb30 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2b92e:	68fb      	ldr	r3, [r7, #12]
   2b930:	781b      	ldrb	r3, [r3, #0]
   2b932:	2b02      	cmp	r3, #2
   2b934:	d100      	bne.n	2b938 <put_fat+0x30>
   2b936:	e078      	b.n	2ba2a <put_fat+0x122>
   2b938:	2b03      	cmp	r3, #3
   2b93a:	d100      	bne.n	2b93e <put_fat+0x36>
   2b93c:	e09e      	b.n	2ba7c <put_fat+0x174>
   2b93e:	2b01      	cmp	r3, #1
   2b940:	d000      	beq.n	2b944 <put_fat+0x3c>
   2b942:	e0e6      	b.n	2bb12 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2b944:	68bb      	ldr	r3, [r7, #8]
   2b946:	61bb      	str	r3, [r7, #24]
   2b948:	69bb      	ldr	r3, [r7, #24]
   2b94a:	085b      	lsrs	r3, r3, #1
   2b94c:	69ba      	ldr	r2, [r7, #24]
   2b94e:	18d3      	adds	r3, r2, r3
   2b950:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2b952:	68fb      	ldr	r3, [r7, #12]
   2b954:	6a1a      	ldr	r2, [r3, #32]
   2b956:	69bb      	ldr	r3, [r7, #24]
   2b958:	0a5b      	lsrs	r3, r3, #9
   2b95a:	18d2      	adds	r2, r2, r3
   2b95c:	231f      	movs	r3, #31
   2b95e:	18fc      	adds	r4, r7, r3
   2b960:	68fb      	ldr	r3, [r7, #12]
   2b962:	0011      	movs	r1, r2
   2b964:	0018      	movs	r0, r3
   2b966:	4b76      	ldr	r3, [pc, #472]	; (2bb40 <put_fat+0x238>)
   2b968:	4798      	blx	r3
   2b96a:	0003      	movs	r3, r0
   2b96c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b96e:	231f      	movs	r3, #31
   2b970:	18fb      	adds	r3, r7, r3
   2b972:	781b      	ldrb	r3, [r3, #0]
   2b974:	2b00      	cmp	r3, #0
   2b976:	d000      	beq.n	2b97a <put_fat+0x72>
   2b978:	e0d0      	b.n	2bb1c <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2b97a:	69bb      	ldr	r3, [r7, #24]
   2b97c:	05db      	lsls	r3, r3, #23
   2b97e:	0ddb      	lsrs	r3, r3, #23
   2b980:	3330      	adds	r3, #48	; 0x30
   2b982:	68fa      	ldr	r2, [r7, #12]
   2b984:	18d3      	adds	r3, r2, r3
   2b986:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2b988:	68bb      	ldr	r3, [r7, #8]
   2b98a:	2201      	movs	r2, #1
   2b98c:	4013      	ands	r3, r2
   2b98e:	d00d      	beq.n	2b9ac <put_fat+0xa4>
   2b990:	697b      	ldr	r3, [r7, #20]
   2b992:	781b      	ldrb	r3, [r3, #0]
   2b994:	b25b      	sxtb	r3, r3
   2b996:	220f      	movs	r2, #15
   2b998:	4013      	ands	r3, r2
   2b99a:	b25a      	sxtb	r2, r3
   2b99c:	687b      	ldr	r3, [r7, #4]
   2b99e:	b2db      	uxtb	r3, r3
   2b9a0:	011b      	lsls	r3, r3, #4
   2b9a2:	b25b      	sxtb	r3, r3
   2b9a4:	4313      	orrs	r3, r2
   2b9a6:	b25b      	sxtb	r3, r3
   2b9a8:	b2db      	uxtb	r3, r3
   2b9aa:	e001      	b.n	2b9b0 <put_fat+0xa8>
   2b9ac:	687b      	ldr	r3, [r7, #4]
   2b9ae:	b2db      	uxtb	r3, r3
   2b9b0:	697a      	ldr	r2, [r7, #20]
   2b9b2:	7013      	strb	r3, [r2, #0]
			bc++;
   2b9b4:	69bb      	ldr	r3, [r7, #24]
   2b9b6:	3301      	adds	r3, #1
   2b9b8:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2b9ba:	68fb      	ldr	r3, [r7, #12]
   2b9bc:	2201      	movs	r2, #1
   2b9be:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2b9c0:	68fb      	ldr	r3, [r7, #12]
   2b9c2:	6a1a      	ldr	r2, [r3, #32]
   2b9c4:	69bb      	ldr	r3, [r7, #24]
   2b9c6:	0a5b      	lsrs	r3, r3, #9
   2b9c8:	18d2      	adds	r2, r2, r3
   2b9ca:	231f      	movs	r3, #31
   2b9cc:	18fc      	adds	r4, r7, r3
   2b9ce:	68fb      	ldr	r3, [r7, #12]
   2b9d0:	0011      	movs	r1, r2
   2b9d2:	0018      	movs	r0, r3
   2b9d4:	4b5a      	ldr	r3, [pc, #360]	; (2bb40 <put_fat+0x238>)
   2b9d6:	4798      	blx	r3
   2b9d8:	0003      	movs	r3, r0
   2b9da:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b9dc:	231f      	movs	r3, #31
   2b9de:	18fb      	adds	r3, r7, r3
   2b9e0:	781b      	ldrb	r3, [r3, #0]
   2b9e2:	2b00      	cmp	r3, #0
   2b9e4:	d000      	beq.n	2b9e8 <put_fat+0xe0>
   2b9e6:	e09b      	b.n	2bb20 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2b9e8:	69bb      	ldr	r3, [r7, #24]
   2b9ea:	05db      	lsls	r3, r3, #23
   2b9ec:	0ddb      	lsrs	r3, r3, #23
   2b9ee:	3330      	adds	r3, #48	; 0x30
   2b9f0:	68fa      	ldr	r2, [r7, #12]
   2b9f2:	18d3      	adds	r3, r2, r3
   2b9f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2b9f6:	68bb      	ldr	r3, [r7, #8]
   2b9f8:	2201      	movs	r2, #1
   2b9fa:	4013      	ands	r3, r2
   2b9fc:	d003      	beq.n	2ba06 <put_fat+0xfe>
   2b9fe:	687b      	ldr	r3, [r7, #4]
   2ba00:	091b      	lsrs	r3, r3, #4
   2ba02:	b2db      	uxtb	r3, r3
   2ba04:	e00e      	b.n	2ba24 <put_fat+0x11c>
   2ba06:	697b      	ldr	r3, [r7, #20]
   2ba08:	781b      	ldrb	r3, [r3, #0]
   2ba0a:	b25b      	sxtb	r3, r3
   2ba0c:	220f      	movs	r2, #15
   2ba0e:	4393      	bics	r3, r2
   2ba10:	b25a      	sxtb	r2, r3
   2ba12:	687b      	ldr	r3, [r7, #4]
   2ba14:	0a1b      	lsrs	r3, r3, #8
   2ba16:	b25b      	sxtb	r3, r3
   2ba18:	210f      	movs	r1, #15
   2ba1a:	400b      	ands	r3, r1
   2ba1c:	b25b      	sxtb	r3, r3
   2ba1e:	4313      	orrs	r3, r2
   2ba20:	b25b      	sxtb	r3, r3
   2ba22:	b2db      	uxtb	r3, r3
   2ba24:	697a      	ldr	r2, [r7, #20]
   2ba26:	7013      	strb	r3, [r2, #0]
			break;
   2ba28:	e07f      	b.n	2bb2a <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2ba2a:	68fb      	ldr	r3, [r7, #12]
   2ba2c:	6a1a      	ldr	r2, [r3, #32]
   2ba2e:	68bb      	ldr	r3, [r7, #8]
   2ba30:	0a1b      	lsrs	r3, r3, #8
   2ba32:	18d2      	adds	r2, r2, r3
   2ba34:	231f      	movs	r3, #31
   2ba36:	18fc      	adds	r4, r7, r3
   2ba38:	68fb      	ldr	r3, [r7, #12]
   2ba3a:	0011      	movs	r1, r2
   2ba3c:	0018      	movs	r0, r3
   2ba3e:	4b40      	ldr	r3, [pc, #256]	; (2bb40 <put_fat+0x238>)
   2ba40:	4798      	blx	r3
   2ba42:	0003      	movs	r3, r0
   2ba44:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ba46:	231f      	movs	r3, #31
   2ba48:	18fb      	adds	r3, r7, r3
   2ba4a:	781b      	ldrb	r3, [r3, #0]
   2ba4c:	2b00      	cmp	r3, #0
   2ba4e:	d169      	bne.n	2bb24 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2ba50:	68bb      	ldr	r3, [r7, #8]
   2ba52:	005a      	lsls	r2, r3, #1
   2ba54:	23ff      	movs	r3, #255	; 0xff
   2ba56:	005b      	lsls	r3, r3, #1
   2ba58:	4013      	ands	r3, r2
   2ba5a:	3330      	adds	r3, #48	; 0x30
   2ba5c:	68fa      	ldr	r2, [r7, #12]
   2ba5e:	18d3      	adds	r3, r2, r3
   2ba60:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2ba62:	687b      	ldr	r3, [r7, #4]
   2ba64:	b2da      	uxtb	r2, r3
   2ba66:	697b      	ldr	r3, [r7, #20]
   2ba68:	701a      	strb	r2, [r3, #0]
   2ba6a:	697b      	ldr	r3, [r7, #20]
   2ba6c:	3301      	adds	r3, #1
   2ba6e:	687a      	ldr	r2, [r7, #4]
   2ba70:	b292      	uxth	r2, r2
   2ba72:	0a12      	lsrs	r2, r2, #8
   2ba74:	b292      	uxth	r2, r2
   2ba76:	b2d2      	uxtb	r2, r2
   2ba78:	701a      	strb	r2, [r3, #0]
			break;
   2ba7a:	e056      	b.n	2bb2a <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2ba7c:	68fb      	ldr	r3, [r7, #12]
   2ba7e:	6a1a      	ldr	r2, [r3, #32]
   2ba80:	68bb      	ldr	r3, [r7, #8]
   2ba82:	09db      	lsrs	r3, r3, #7
   2ba84:	18d2      	adds	r2, r2, r3
   2ba86:	231f      	movs	r3, #31
   2ba88:	18fc      	adds	r4, r7, r3
   2ba8a:	68fb      	ldr	r3, [r7, #12]
   2ba8c:	0011      	movs	r1, r2
   2ba8e:	0018      	movs	r0, r3
   2ba90:	4b2b      	ldr	r3, [pc, #172]	; (2bb40 <put_fat+0x238>)
   2ba92:	4798      	blx	r3
   2ba94:	0003      	movs	r3, r0
   2ba96:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ba98:	231f      	movs	r3, #31
   2ba9a:	18fb      	adds	r3, r7, r3
   2ba9c:	781b      	ldrb	r3, [r3, #0]
   2ba9e:	2b00      	cmp	r3, #0
   2baa0:	d142      	bne.n	2bb28 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2baa2:	68bb      	ldr	r3, [r7, #8]
   2baa4:	009a      	lsls	r2, r3, #2
   2baa6:	23fe      	movs	r3, #254	; 0xfe
   2baa8:	005b      	lsls	r3, r3, #1
   2baaa:	4013      	ands	r3, r2
   2baac:	3330      	adds	r3, #48	; 0x30
   2baae:	68fa      	ldr	r2, [r7, #12]
   2bab0:	18d3      	adds	r3, r2, r3
   2bab2:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2bab4:	697b      	ldr	r3, [r7, #20]
   2bab6:	3303      	adds	r3, #3
   2bab8:	781b      	ldrb	r3, [r3, #0]
   2baba:	061a      	lsls	r2, r3, #24
   2babc:	697b      	ldr	r3, [r7, #20]
   2babe:	3302      	adds	r3, #2
   2bac0:	781b      	ldrb	r3, [r3, #0]
   2bac2:	041b      	lsls	r3, r3, #16
   2bac4:	4313      	orrs	r3, r2
   2bac6:	697a      	ldr	r2, [r7, #20]
   2bac8:	3201      	adds	r2, #1
   2baca:	7812      	ldrb	r2, [r2, #0]
   2bacc:	0212      	lsls	r2, r2, #8
   2bace:	4313      	orrs	r3, r2
   2bad0:	697a      	ldr	r2, [r7, #20]
   2bad2:	7812      	ldrb	r2, [r2, #0]
   2bad4:	4313      	orrs	r3, r2
   2bad6:	0f1b      	lsrs	r3, r3, #28
   2bad8:	071b      	lsls	r3, r3, #28
   2bada:	687a      	ldr	r2, [r7, #4]
   2badc:	4313      	orrs	r3, r2
   2bade:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2bae0:	687b      	ldr	r3, [r7, #4]
   2bae2:	b2da      	uxtb	r2, r3
   2bae4:	697b      	ldr	r3, [r7, #20]
   2bae6:	701a      	strb	r2, [r3, #0]
   2bae8:	697b      	ldr	r3, [r7, #20]
   2baea:	3301      	adds	r3, #1
   2baec:	687a      	ldr	r2, [r7, #4]
   2baee:	b292      	uxth	r2, r2
   2baf0:	0a12      	lsrs	r2, r2, #8
   2baf2:	b292      	uxth	r2, r2
   2baf4:	b2d2      	uxtb	r2, r2
   2baf6:	701a      	strb	r2, [r3, #0]
   2baf8:	697b      	ldr	r3, [r7, #20]
   2bafa:	3302      	adds	r3, #2
   2bafc:	687a      	ldr	r2, [r7, #4]
   2bafe:	0c12      	lsrs	r2, r2, #16
   2bb00:	b2d2      	uxtb	r2, r2
   2bb02:	701a      	strb	r2, [r3, #0]
   2bb04:	697b      	ldr	r3, [r7, #20]
   2bb06:	3303      	adds	r3, #3
   2bb08:	687a      	ldr	r2, [r7, #4]
   2bb0a:	0e12      	lsrs	r2, r2, #24
   2bb0c:	b2d2      	uxtb	r2, r2
   2bb0e:	701a      	strb	r2, [r3, #0]
			break;
   2bb10:	e00b      	b.n	2bb2a <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2bb12:	231f      	movs	r3, #31
   2bb14:	18fb      	adds	r3, r7, r3
   2bb16:	2202      	movs	r2, #2
   2bb18:	701a      	strb	r2, [r3, #0]
   2bb1a:	e006      	b.n	2bb2a <put_fat+0x222>
			if (res != FR_OK) break;
   2bb1c:	46c0      	nop			; (mov r8, r8)
   2bb1e:	e004      	b.n	2bb2a <put_fat+0x222>
			if (res != FR_OK) break;
   2bb20:	46c0      	nop			; (mov r8, r8)
   2bb22:	e002      	b.n	2bb2a <put_fat+0x222>
			if (res != FR_OK) break;
   2bb24:	46c0      	nop			; (mov r8, r8)
   2bb26:	e000      	b.n	2bb2a <put_fat+0x222>
			if (res != FR_OK) break;
   2bb28:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2bb2a:	68fb      	ldr	r3, [r7, #12]
   2bb2c:	2201      	movs	r2, #1
   2bb2e:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2bb30:	231f      	movs	r3, #31
   2bb32:	18fb      	adds	r3, r7, r3
   2bb34:	781b      	ldrb	r3, [r3, #0]
}
   2bb36:	0018      	movs	r0, r3
   2bb38:	46bd      	mov	sp, r7
   2bb3a:	b009      	add	sp, #36	; 0x24
   2bb3c:	bd90      	pop	{r4, r7, pc}
   2bb3e:	46c0      	nop			; (mov r8, r8)
   2bb40:	0002b505 	.word	0x0002b505

0002bb44 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2bb44:	b590      	push	{r4, r7, lr}
   2bb46:	b085      	sub	sp, #20
   2bb48:	af00      	add	r7, sp, #0
   2bb4a:	6078      	str	r0, [r7, #4]
   2bb4c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2bb4e:	683b      	ldr	r3, [r7, #0]
   2bb50:	2b01      	cmp	r3, #1
   2bb52:	d904      	bls.n	2bb5e <remove_chain+0x1a>
   2bb54:	687b      	ldr	r3, [r7, #4]
   2bb56:	699a      	ldr	r2, [r3, #24]
   2bb58:	683b      	ldr	r3, [r7, #0]
   2bb5a:	429a      	cmp	r2, r3
   2bb5c:	d804      	bhi.n	2bb68 <remove_chain+0x24>
		res = FR_INT_ERR;
   2bb5e:	230f      	movs	r3, #15
   2bb60:	18fb      	adds	r3, r7, r3
   2bb62:	2202      	movs	r2, #2
   2bb64:	701a      	strb	r2, [r3, #0]
   2bb66:	e045      	b.n	2bbf4 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2bb68:	230f      	movs	r3, #15
   2bb6a:	18fb      	adds	r3, r7, r3
   2bb6c:	2200      	movs	r2, #0
   2bb6e:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2bb70:	e037      	b.n	2bbe2 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2bb72:	683a      	ldr	r2, [r7, #0]
   2bb74:	687b      	ldr	r3, [r7, #4]
   2bb76:	0011      	movs	r1, r2
   2bb78:	0018      	movs	r0, r3
   2bb7a:	4b22      	ldr	r3, [pc, #136]	; (2bc04 <remove_chain+0xc0>)
   2bb7c:	4798      	blx	r3
   2bb7e:	0003      	movs	r3, r0
   2bb80:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2bb82:	68bb      	ldr	r3, [r7, #8]
   2bb84:	2b00      	cmp	r3, #0
   2bb86:	d032      	beq.n	2bbee <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2bb88:	68bb      	ldr	r3, [r7, #8]
   2bb8a:	2b01      	cmp	r3, #1
   2bb8c:	d104      	bne.n	2bb98 <remove_chain+0x54>
   2bb8e:	230f      	movs	r3, #15
   2bb90:	18fb      	adds	r3, r7, r3
   2bb92:	2202      	movs	r2, #2
   2bb94:	701a      	strb	r2, [r3, #0]
   2bb96:	e02d      	b.n	2bbf4 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2bb98:	68bb      	ldr	r3, [r7, #8]
   2bb9a:	3301      	adds	r3, #1
   2bb9c:	d104      	bne.n	2bba8 <remove_chain+0x64>
   2bb9e:	230f      	movs	r3, #15
   2bba0:	18fb      	adds	r3, r7, r3
   2bba2:	2201      	movs	r2, #1
   2bba4:	701a      	strb	r2, [r3, #0]
   2bba6:	e025      	b.n	2bbf4 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2bba8:	230f      	movs	r3, #15
   2bbaa:	18fc      	adds	r4, r7, r3
   2bbac:	6839      	ldr	r1, [r7, #0]
   2bbae:	687b      	ldr	r3, [r7, #4]
   2bbb0:	2200      	movs	r2, #0
   2bbb2:	0018      	movs	r0, r3
   2bbb4:	4b14      	ldr	r3, [pc, #80]	; (2bc08 <remove_chain+0xc4>)
   2bbb6:	4798      	blx	r3
   2bbb8:	0003      	movs	r3, r0
   2bbba:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bbbc:	230f      	movs	r3, #15
   2bbbe:	18fb      	adds	r3, r7, r3
   2bbc0:	781b      	ldrb	r3, [r3, #0]
   2bbc2:	2b00      	cmp	r3, #0
   2bbc4:	d115      	bne.n	2bbf2 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2bbc6:	687b      	ldr	r3, [r7, #4]
   2bbc8:	691b      	ldr	r3, [r3, #16]
   2bbca:	3301      	adds	r3, #1
   2bbcc:	d007      	beq.n	2bbde <remove_chain+0x9a>
				fs->free_clust++;
   2bbce:	687b      	ldr	r3, [r7, #4]
   2bbd0:	691b      	ldr	r3, [r3, #16]
   2bbd2:	1c5a      	adds	r2, r3, #1
   2bbd4:	687b      	ldr	r3, [r7, #4]
   2bbd6:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2bbd8:	687b      	ldr	r3, [r7, #4]
   2bbda:	2201      	movs	r2, #1
   2bbdc:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2bbde:	68bb      	ldr	r3, [r7, #8]
   2bbe0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2bbe2:	687b      	ldr	r3, [r7, #4]
   2bbe4:	699a      	ldr	r2, [r3, #24]
   2bbe6:	683b      	ldr	r3, [r7, #0]
   2bbe8:	429a      	cmp	r2, r3
   2bbea:	d8c2      	bhi.n	2bb72 <remove_chain+0x2e>
   2bbec:	e002      	b.n	2bbf4 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2bbee:	46c0      	nop			; (mov r8, r8)
   2bbf0:	e000      	b.n	2bbf4 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2bbf2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2bbf4:	230f      	movs	r3, #15
   2bbf6:	18fb      	adds	r3, r7, r3
   2bbf8:	781b      	ldrb	r3, [r3, #0]
}
   2bbfa:	0018      	movs	r0, r3
   2bbfc:	46bd      	mov	sp, r7
   2bbfe:	b005      	add	sp, #20
   2bc00:	bd90      	pop	{r4, r7, pc}
   2bc02:	46c0      	nop			; (mov r8, r8)
   2bc04:	0002b79d 	.word	0x0002b79d
   2bc08:	0002b909 	.word	0x0002b909

0002bc0c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2bc0c:	b590      	push	{r4, r7, lr}
   2bc0e:	b087      	sub	sp, #28
   2bc10:	af00      	add	r7, sp, #0
   2bc12:	6078      	str	r0, [r7, #4]
   2bc14:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2bc16:	683b      	ldr	r3, [r7, #0]
   2bc18:	2b00      	cmp	r3, #0
   2bc1a:	d10d      	bne.n	2bc38 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2bc1c:	687b      	ldr	r3, [r7, #4]
   2bc1e:	68db      	ldr	r3, [r3, #12]
   2bc20:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2bc22:	693b      	ldr	r3, [r7, #16]
   2bc24:	2b00      	cmp	r3, #0
   2bc26:	d004      	beq.n	2bc32 <create_chain+0x26>
   2bc28:	687b      	ldr	r3, [r7, #4]
   2bc2a:	699a      	ldr	r2, [r3, #24]
   2bc2c:	693b      	ldr	r3, [r7, #16]
   2bc2e:	429a      	cmp	r2, r3
   2bc30:	d818      	bhi.n	2bc64 <create_chain+0x58>
   2bc32:	2301      	movs	r3, #1
   2bc34:	613b      	str	r3, [r7, #16]
   2bc36:	e015      	b.n	2bc64 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2bc38:	683a      	ldr	r2, [r7, #0]
   2bc3a:	687b      	ldr	r3, [r7, #4]
   2bc3c:	0011      	movs	r1, r2
   2bc3e:	0018      	movs	r0, r3
   2bc40:	4b3e      	ldr	r3, [pc, #248]	; (2bd3c <create_chain+0x130>)
   2bc42:	4798      	blx	r3
   2bc44:	0003      	movs	r3, r0
   2bc46:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2bc48:	68bb      	ldr	r3, [r7, #8]
   2bc4a:	2b01      	cmp	r3, #1
   2bc4c:	d801      	bhi.n	2bc52 <create_chain+0x46>
   2bc4e:	2301      	movs	r3, #1
   2bc50:	e070      	b.n	2bd34 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2bc52:	687b      	ldr	r3, [r7, #4]
   2bc54:	699a      	ldr	r2, [r3, #24]
   2bc56:	68bb      	ldr	r3, [r7, #8]
   2bc58:	429a      	cmp	r2, r3
   2bc5a:	d901      	bls.n	2bc60 <create_chain+0x54>
   2bc5c:	68bb      	ldr	r3, [r7, #8]
   2bc5e:	e069      	b.n	2bd34 <create_chain+0x128>
		scl = clst;
   2bc60:	683b      	ldr	r3, [r7, #0]
   2bc62:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2bc64:	693b      	ldr	r3, [r7, #16]
   2bc66:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2bc68:	697b      	ldr	r3, [r7, #20]
   2bc6a:	3301      	adds	r3, #1
   2bc6c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2bc6e:	687b      	ldr	r3, [r7, #4]
   2bc70:	699a      	ldr	r2, [r3, #24]
   2bc72:	697b      	ldr	r3, [r7, #20]
   2bc74:	429a      	cmp	r2, r3
   2bc76:	d807      	bhi.n	2bc88 <create_chain+0x7c>
			ncl = 2;
   2bc78:	2302      	movs	r3, #2
   2bc7a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2bc7c:	697a      	ldr	r2, [r7, #20]
   2bc7e:	693b      	ldr	r3, [r7, #16]
   2bc80:	429a      	cmp	r2, r3
   2bc82:	d901      	bls.n	2bc88 <create_chain+0x7c>
   2bc84:	2300      	movs	r3, #0
   2bc86:	e055      	b.n	2bd34 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2bc88:	697a      	ldr	r2, [r7, #20]
   2bc8a:	687b      	ldr	r3, [r7, #4]
   2bc8c:	0011      	movs	r1, r2
   2bc8e:	0018      	movs	r0, r3
   2bc90:	4b2a      	ldr	r3, [pc, #168]	; (2bd3c <create_chain+0x130>)
   2bc92:	4798      	blx	r3
   2bc94:	0003      	movs	r3, r0
   2bc96:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2bc98:	68bb      	ldr	r3, [r7, #8]
   2bc9a:	2b00      	cmp	r3, #0
   2bc9c:	d00d      	beq.n	2bcba <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2bc9e:	68bb      	ldr	r3, [r7, #8]
   2bca0:	3301      	adds	r3, #1
   2bca2:	d002      	beq.n	2bcaa <create_chain+0x9e>
   2bca4:	68bb      	ldr	r3, [r7, #8]
   2bca6:	2b01      	cmp	r3, #1
   2bca8:	d101      	bne.n	2bcae <create_chain+0xa2>
			return cs;
   2bcaa:	68bb      	ldr	r3, [r7, #8]
   2bcac:	e042      	b.n	2bd34 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2bcae:	697a      	ldr	r2, [r7, #20]
   2bcb0:	693b      	ldr	r3, [r7, #16]
   2bcb2:	429a      	cmp	r2, r3
   2bcb4:	d1d8      	bne.n	2bc68 <create_chain+0x5c>
   2bcb6:	2300      	movs	r3, #0
   2bcb8:	e03c      	b.n	2bd34 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2bcba:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2bcbc:	230f      	movs	r3, #15
   2bcbe:	18fc      	adds	r4, r7, r3
   2bcc0:	4a1f      	ldr	r2, [pc, #124]	; (2bd40 <create_chain+0x134>)
   2bcc2:	6979      	ldr	r1, [r7, #20]
   2bcc4:	687b      	ldr	r3, [r7, #4]
   2bcc6:	0018      	movs	r0, r3
   2bcc8:	4b1e      	ldr	r3, [pc, #120]	; (2bd44 <create_chain+0x138>)
   2bcca:	4798      	blx	r3
   2bccc:	0003      	movs	r3, r0
   2bcce:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2bcd0:	230f      	movs	r3, #15
   2bcd2:	18fb      	adds	r3, r7, r3
   2bcd4:	781b      	ldrb	r3, [r3, #0]
   2bcd6:	2b00      	cmp	r3, #0
   2bcd8:	d10c      	bne.n	2bcf4 <create_chain+0xe8>
   2bcda:	683b      	ldr	r3, [r7, #0]
   2bcdc:	2b00      	cmp	r3, #0
   2bcde:	d009      	beq.n	2bcf4 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2bce0:	230f      	movs	r3, #15
   2bce2:	18fc      	adds	r4, r7, r3
   2bce4:	697a      	ldr	r2, [r7, #20]
   2bce6:	6839      	ldr	r1, [r7, #0]
   2bce8:	687b      	ldr	r3, [r7, #4]
   2bcea:	0018      	movs	r0, r3
   2bcec:	4b15      	ldr	r3, [pc, #84]	; (2bd44 <create_chain+0x138>)
   2bcee:	4798      	blx	r3
   2bcf0:	0003      	movs	r3, r0
   2bcf2:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2bcf4:	230f      	movs	r3, #15
   2bcf6:	18fb      	adds	r3, r7, r3
   2bcf8:	781b      	ldrb	r3, [r3, #0]
   2bcfa:	2b00      	cmp	r3, #0
   2bcfc:	d10f      	bne.n	2bd1e <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2bcfe:	687b      	ldr	r3, [r7, #4]
   2bd00:	697a      	ldr	r2, [r7, #20]
   2bd02:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2bd04:	687b      	ldr	r3, [r7, #4]
   2bd06:	691b      	ldr	r3, [r3, #16]
   2bd08:	3301      	adds	r3, #1
   2bd0a:	d012      	beq.n	2bd32 <create_chain+0x126>
			fs->free_clust--;
   2bd0c:	687b      	ldr	r3, [r7, #4]
   2bd0e:	691b      	ldr	r3, [r3, #16]
   2bd10:	1e5a      	subs	r2, r3, #1
   2bd12:	687b      	ldr	r3, [r7, #4]
   2bd14:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2bd16:	687b      	ldr	r3, [r7, #4]
   2bd18:	2201      	movs	r2, #1
   2bd1a:	715a      	strb	r2, [r3, #5]
   2bd1c:	e009      	b.n	2bd32 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2bd1e:	230f      	movs	r3, #15
   2bd20:	18fb      	adds	r3, r7, r3
   2bd22:	781b      	ldrb	r3, [r3, #0]
   2bd24:	2b01      	cmp	r3, #1
   2bd26:	d102      	bne.n	2bd2e <create_chain+0x122>
   2bd28:	2301      	movs	r3, #1
   2bd2a:	425b      	negs	r3, r3
   2bd2c:	e000      	b.n	2bd30 <create_chain+0x124>
   2bd2e:	2301      	movs	r3, #1
   2bd30:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2bd32:	697b      	ldr	r3, [r7, #20]
}
   2bd34:	0018      	movs	r0, r3
   2bd36:	46bd      	mov	sp, r7
   2bd38:	b007      	add	sp, #28
   2bd3a:	bd90      	pop	{r4, r7, pc}
   2bd3c:	0002b79d 	.word	0x0002b79d
   2bd40:	0fffffff 	.word	0x0fffffff
   2bd44:	0002b909 	.word	0x0002b909

0002bd48 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2bd48:	b580      	push	{r7, lr}
   2bd4a:	b084      	sub	sp, #16
   2bd4c:	af00      	add	r7, sp, #0
   2bd4e:	6078      	str	r0, [r7, #4]
   2bd50:	000a      	movs	r2, r1
   2bd52:	1cbb      	adds	r3, r7, #2
   2bd54:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2bd56:	687b      	ldr	r3, [r7, #4]
   2bd58:	1cba      	adds	r2, r7, #2
   2bd5a:	8812      	ldrh	r2, [r2, #0]
   2bd5c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2bd5e:	687b      	ldr	r3, [r7, #4]
   2bd60:	689b      	ldr	r3, [r3, #8]
   2bd62:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2bd64:	68fb      	ldr	r3, [r7, #12]
   2bd66:	2b01      	cmp	r3, #1
   2bd68:	d005      	beq.n	2bd76 <dir_sdi+0x2e>
   2bd6a:	687b      	ldr	r3, [r7, #4]
   2bd6c:	681b      	ldr	r3, [r3, #0]
   2bd6e:	699a      	ldr	r2, [r3, #24]
   2bd70:	68fb      	ldr	r3, [r7, #12]
   2bd72:	429a      	cmp	r2, r3
   2bd74:	d801      	bhi.n	2bd7a <dir_sdi+0x32>
		return FR_INT_ERR;
   2bd76:	2302      	movs	r3, #2
   2bd78:	e075      	b.n	2be66 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2bd7a:	68fb      	ldr	r3, [r7, #12]
   2bd7c:	2b00      	cmp	r3, #0
   2bd7e:	d108      	bne.n	2bd92 <dir_sdi+0x4a>
   2bd80:	687b      	ldr	r3, [r7, #4]
   2bd82:	681b      	ldr	r3, [r3, #0]
   2bd84:	781b      	ldrb	r3, [r3, #0]
   2bd86:	2b03      	cmp	r3, #3
   2bd88:	d103      	bne.n	2bd92 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2bd8a:	687b      	ldr	r3, [r7, #4]
   2bd8c:	681b      	ldr	r3, [r3, #0]
   2bd8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2bd90:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2bd92:	68fb      	ldr	r3, [r7, #12]
   2bd94:	2b00      	cmp	r3, #0
   2bd96:	d116      	bne.n	2bdc6 <dir_sdi+0x7e>
		dj->clust = clst;
   2bd98:	687b      	ldr	r3, [r7, #4]
   2bd9a:	68fa      	ldr	r2, [r7, #12]
   2bd9c:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2bd9e:	687b      	ldr	r3, [r7, #4]
   2bda0:	681b      	ldr	r3, [r3, #0]
   2bda2:	891b      	ldrh	r3, [r3, #8]
   2bda4:	1cba      	adds	r2, r7, #2
   2bda6:	8812      	ldrh	r2, [r2, #0]
   2bda8:	429a      	cmp	r2, r3
   2bdaa:	d301      	bcc.n	2bdb0 <dir_sdi+0x68>
			return FR_INT_ERR;
   2bdac:	2302      	movs	r3, #2
   2bdae:	e05a      	b.n	2be66 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2bdb0:	687b      	ldr	r3, [r7, #4]
   2bdb2:	681b      	ldr	r3, [r3, #0]
   2bdb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2bdb6:	1cba      	adds	r2, r7, #2
   2bdb8:	8812      	ldrh	r2, [r2, #0]
   2bdba:	0912      	lsrs	r2, r2, #4
   2bdbc:	b292      	uxth	r2, r2
   2bdbe:	189a      	adds	r2, r3, r2
   2bdc0:	687b      	ldr	r3, [r7, #4]
   2bdc2:	611a      	str	r2, [r3, #16]
   2bdc4:	e042      	b.n	2be4c <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2bdc6:	687b      	ldr	r3, [r7, #4]
   2bdc8:	681b      	ldr	r3, [r3, #0]
   2bdca:	789b      	ldrb	r3, [r3, #2]
   2bdcc:	b29a      	uxth	r2, r3
   2bdce:	230a      	movs	r3, #10
   2bdd0:	18fb      	adds	r3, r7, r3
   2bdd2:	0112      	lsls	r2, r2, #4
   2bdd4:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2bdd6:	e020      	b.n	2be1a <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2bdd8:	687b      	ldr	r3, [r7, #4]
   2bdda:	681b      	ldr	r3, [r3, #0]
   2bddc:	68fa      	ldr	r2, [r7, #12]
   2bdde:	0011      	movs	r1, r2
   2bde0:	0018      	movs	r0, r3
   2bde2:	4b23      	ldr	r3, [pc, #140]	; (2be70 <dir_sdi+0x128>)
   2bde4:	4798      	blx	r3
   2bde6:	0003      	movs	r3, r0
   2bde8:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2bdea:	68fb      	ldr	r3, [r7, #12]
   2bdec:	3301      	adds	r3, #1
   2bdee:	d101      	bne.n	2bdf4 <dir_sdi+0xac>
   2bdf0:	2301      	movs	r3, #1
   2bdf2:	e038      	b.n	2be66 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2bdf4:	68fb      	ldr	r3, [r7, #12]
   2bdf6:	2b01      	cmp	r3, #1
   2bdf8:	d905      	bls.n	2be06 <dir_sdi+0xbe>
   2bdfa:	687b      	ldr	r3, [r7, #4]
   2bdfc:	681b      	ldr	r3, [r3, #0]
   2bdfe:	699a      	ldr	r2, [r3, #24]
   2be00:	68fb      	ldr	r3, [r7, #12]
   2be02:	429a      	cmp	r2, r3
   2be04:	d801      	bhi.n	2be0a <dir_sdi+0xc2>
				return FR_INT_ERR;
   2be06:	2302      	movs	r3, #2
   2be08:	e02d      	b.n	2be66 <dir_sdi+0x11e>
			idx -= ic;
   2be0a:	1cbb      	adds	r3, r7, #2
   2be0c:	1cb9      	adds	r1, r7, #2
   2be0e:	220a      	movs	r2, #10
   2be10:	18ba      	adds	r2, r7, r2
   2be12:	8809      	ldrh	r1, [r1, #0]
   2be14:	8812      	ldrh	r2, [r2, #0]
   2be16:	1a8a      	subs	r2, r1, r2
   2be18:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2be1a:	1cba      	adds	r2, r7, #2
   2be1c:	230a      	movs	r3, #10
   2be1e:	18fb      	adds	r3, r7, r3
   2be20:	8812      	ldrh	r2, [r2, #0]
   2be22:	881b      	ldrh	r3, [r3, #0]
   2be24:	429a      	cmp	r2, r3
   2be26:	d2d7      	bcs.n	2bdd8 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2be28:	687b      	ldr	r3, [r7, #4]
   2be2a:	68fa      	ldr	r2, [r7, #12]
   2be2c:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2be2e:	687b      	ldr	r3, [r7, #4]
   2be30:	681b      	ldr	r3, [r3, #0]
   2be32:	68fa      	ldr	r2, [r7, #12]
   2be34:	0011      	movs	r1, r2
   2be36:	0018      	movs	r0, r3
   2be38:	4b0e      	ldr	r3, [pc, #56]	; (2be74 <dir_sdi+0x12c>)
   2be3a:	4798      	blx	r3
   2be3c:	0002      	movs	r2, r0
   2be3e:	1cbb      	adds	r3, r7, #2
   2be40:	881b      	ldrh	r3, [r3, #0]
   2be42:	091b      	lsrs	r3, r3, #4
   2be44:	b29b      	uxth	r3, r3
   2be46:	18d2      	adds	r2, r2, r3
   2be48:	687b      	ldr	r3, [r7, #4]
   2be4a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2be4c:	687b      	ldr	r3, [r7, #4]
   2be4e:	681b      	ldr	r3, [r3, #0]
   2be50:	3330      	adds	r3, #48	; 0x30
   2be52:	001a      	movs	r2, r3
   2be54:	1cbb      	adds	r3, r7, #2
   2be56:	881b      	ldrh	r3, [r3, #0]
   2be58:	210f      	movs	r1, #15
   2be5a:	400b      	ands	r3, r1
   2be5c:	015b      	lsls	r3, r3, #5
   2be5e:	18d2      	adds	r2, r2, r3
   2be60:	687b      	ldr	r3, [r7, #4]
   2be62:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2be64:	2300      	movs	r3, #0
}
   2be66:	0018      	movs	r0, r3
   2be68:	46bd      	mov	sp, r7
   2be6a:	b004      	add	sp, #16
   2be6c:	bd80      	pop	{r7, pc}
   2be6e:	46c0      	nop			; (mov r8, r8)
   2be70:	0002b79d 	.word	0x0002b79d
   2be74:	0002b765 	.word	0x0002b765

0002be78 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2be78:	b590      	push	{r4, r7, lr}
   2be7a:	b085      	sub	sp, #20
   2be7c:	af00      	add	r7, sp, #0
   2be7e:	6078      	str	r0, [r7, #4]
   2be80:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2be82:	687b      	ldr	r3, [r7, #4]
   2be84:	88da      	ldrh	r2, [r3, #6]
   2be86:	2308      	movs	r3, #8
   2be88:	18fb      	adds	r3, r7, r3
   2be8a:	3201      	adds	r2, #1
   2be8c:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2be8e:	2308      	movs	r3, #8
   2be90:	18fb      	adds	r3, r7, r3
   2be92:	881b      	ldrh	r3, [r3, #0]
   2be94:	2b00      	cmp	r3, #0
   2be96:	d003      	beq.n	2bea0 <dir_next+0x28>
   2be98:	687b      	ldr	r3, [r7, #4]
   2be9a:	691b      	ldr	r3, [r3, #16]
   2be9c:	2b00      	cmp	r3, #0
   2be9e:	d101      	bne.n	2bea4 <dir_next+0x2c>
		return FR_NO_FILE;
   2bea0:	2304      	movs	r3, #4
   2bea2:	e0d2      	b.n	2c04a <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2bea4:	2308      	movs	r3, #8
   2bea6:	18fb      	adds	r3, r7, r3
   2bea8:	881b      	ldrh	r3, [r3, #0]
   2beaa:	220f      	movs	r2, #15
   2beac:	4013      	ands	r3, r2
   2beae:	b29b      	uxth	r3, r3
   2beb0:	2b00      	cmp	r3, #0
   2beb2:	d000      	beq.n	2beb6 <dir_next+0x3e>
   2beb4:	e0b6      	b.n	2c024 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2beb6:	687b      	ldr	r3, [r7, #4]
   2beb8:	691b      	ldr	r3, [r3, #16]
   2beba:	1c5a      	adds	r2, r3, #1
   2bebc:	687b      	ldr	r3, [r7, #4]
   2bebe:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2bec0:	687b      	ldr	r3, [r7, #4]
   2bec2:	68db      	ldr	r3, [r3, #12]
   2bec4:	2b00      	cmp	r3, #0
   2bec6:	d10a      	bne.n	2bede <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2bec8:	687b      	ldr	r3, [r7, #4]
   2beca:	681b      	ldr	r3, [r3, #0]
   2becc:	891b      	ldrh	r3, [r3, #8]
   2bece:	2208      	movs	r2, #8
   2bed0:	18ba      	adds	r2, r7, r2
   2bed2:	8812      	ldrh	r2, [r2, #0]
   2bed4:	429a      	cmp	r2, r3
   2bed6:	d200      	bcs.n	2beda <dir_next+0x62>
   2bed8:	e0a4      	b.n	2c024 <dir_next+0x1ac>
				return FR_NO_FILE;
   2beda:	2304      	movs	r3, #4
   2bedc:	e0b5      	b.n	2c04a <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2bede:	2308      	movs	r3, #8
   2bee0:	18fb      	adds	r3, r7, r3
   2bee2:	881b      	ldrh	r3, [r3, #0]
   2bee4:	091b      	lsrs	r3, r3, #4
   2bee6:	b29b      	uxth	r3, r3
   2bee8:	001a      	movs	r2, r3
   2beea:	687b      	ldr	r3, [r7, #4]
   2beec:	681b      	ldr	r3, [r3, #0]
   2beee:	789b      	ldrb	r3, [r3, #2]
   2bef0:	3b01      	subs	r3, #1
   2bef2:	4013      	ands	r3, r2
   2bef4:	d000      	beq.n	2bef8 <dir_next+0x80>
   2bef6:	e095      	b.n	2c024 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2bef8:	687b      	ldr	r3, [r7, #4]
   2befa:	681a      	ldr	r2, [r3, #0]
   2befc:	687b      	ldr	r3, [r7, #4]
   2befe:	68db      	ldr	r3, [r3, #12]
   2bf00:	0019      	movs	r1, r3
   2bf02:	0010      	movs	r0, r2
   2bf04:	4b53      	ldr	r3, [pc, #332]	; (2c054 <dir_next+0x1dc>)
   2bf06:	4798      	blx	r3
   2bf08:	0003      	movs	r3, r0
   2bf0a:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2bf0c:	68fb      	ldr	r3, [r7, #12]
   2bf0e:	2b01      	cmp	r3, #1
   2bf10:	d801      	bhi.n	2bf16 <dir_next+0x9e>
   2bf12:	2302      	movs	r3, #2
   2bf14:	e099      	b.n	2c04a <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2bf16:	68fb      	ldr	r3, [r7, #12]
   2bf18:	3301      	adds	r3, #1
   2bf1a:	d101      	bne.n	2bf20 <dir_next+0xa8>
   2bf1c:	2301      	movs	r3, #1
   2bf1e:	e094      	b.n	2c04a <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2bf20:	687b      	ldr	r3, [r7, #4]
   2bf22:	681b      	ldr	r3, [r3, #0]
   2bf24:	699a      	ldr	r2, [r3, #24]
   2bf26:	68fb      	ldr	r3, [r7, #12]
   2bf28:	429a      	cmp	r2, r3
   2bf2a:	d900      	bls.n	2bf2e <dir_next+0xb6>
   2bf2c:	e06d      	b.n	2c00a <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2bf2e:	683b      	ldr	r3, [r7, #0]
   2bf30:	2b00      	cmp	r3, #0
   2bf32:	d101      	bne.n	2bf38 <dir_next+0xc0>
   2bf34:	2304      	movs	r3, #4
   2bf36:	e088      	b.n	2c04a <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2bf38:	687b      	ldr	r3, [r7, #4]
   2bf3a:	681a      	ldr	r2, [r3, #0]
   2bf3c:	687b      	ldr	r3, [r7, #4]
   2bf3e:	68db      	ldr	r3, [r3, #12]
   2bf40:	0019      	movs	r1, r3
   2bf42:	0010      	movs	r0, r2
   2bf44:	4b44      	ldr	r3, [pc, #272]	; (2c058 <dir_next+0x1e0>)
   2bf46:	4798      	blx	r3
   2bf48:	0003      	movs	r3, r0
   2bf4a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2bf4c:	68fb      	ldr	r3, [r7, #12]
   2bf4e:	2b00      	cmp	r3, #0
   2bf50:	d101      	bne.n	2bf56 <dir_next+0xde>
   2bf52:	2307      	movs	r3, #7
   2bf54:	e079      	b.n	2c04a <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2bf56:	68fb      	ldr	r3, [r7, #12]
   2bf58:	2b01      	cmp	r3, #1
   2bf5a:	d101      	bne.n	2bf60 <dir_next+0xe8>
   2bf5c:	2302      	movs	r3, #2
   2bf5e:	e074      	b.n	2c04a <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2bf60:	68fb      	ldr	r3, [r7, #12]
   2bf62:	3301      	adds	r3, #1
   2bf64:	d101      	bne.n	2bf6a <dir_next+0xf2>
   2bf66:	2301      	movs	r3, #1
   2bf68:	e06f      	b.n	2c04a <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2bf6a:	687b      	ldr	r3, [r7, #4]
   2bf6c:	681b      	ldr	r3, [r3, #0]
   2bf6e:	2100      	movs	r1, #0
   2bf70:	0018      	movs	r0, r3
   2bf72:	4b3a      	ldr	r3, [pc, #232]	; (2c05c <dir_next+0x1e4>)
   2bf74:	4798      	blx	r3
   2bf76:	1e03      	subs	r3, r0, #0
   2bf78:	d001      	beq.n	2bf7e <dir_next+0x106>
   2bf7a:	2301      	movs	r3, #1
   2bf7c:	e065      	b.n	2c04a <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2bf7e:	687b      	ldr	r3, [r7, #4]
   2bf80:	681b      	ldr	r3, [r3, #0]
   2bf82:	3330      	adds	r3, #48	; 0x30
   2bf84:	0018      	movs	r0, r3
   2bf86:	2380      	movs	r3, #128	; 0x80
   2bf88:	009b      	lsls	r3, r3, #2
   2bf8a:	001a      	movs	r2, r3
   2bf8c:	2100      	movs	r1, #0
   2bf8e:	4b34      	ldr	r3, [pc, #208]	; (2c060 <dir_next+0x1e8>)
   2bf90:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2bf92:	687b      	ldr	r3, [r7, #4]
   2bf94:	681c      	ldr	r4, [r3, #0]
   2bf96:	687b      	ldr	r3, [r7, #4]
   2bf98:	681b      	ldr	r3, [r3, #0]
   2bf9a:	68fa      	ldr	r2, [r7, #12]
   2bf9c:	0011      	movs	r1, r2
   2bf9e:	0018      	movs	r0, r3
   2bfa0:	4b30      	ldr	r3, [pc, #192]	; (2c064 <dir_next+0x1ec>)
   2bfa2:	4798      	blx	r3
   2bfa4:	0003      	movs	r3, r0
   2bfa6:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2bfa8:	230b      	movs	r3, #11
   2bfaa:	18fb      	adds	r3, r7, r3
   2bfac:	2200      	movs	r2, #0
   2bfae:	701a      	strb	r2, [r3, #0]
   2bfb0:	e019      	b.n	2bfe6 <dir_next+0x16e>
						dj->fs->wflag = 1;
   2bfb2:	687b      	ldr	r3, [r7, #4]
   2bfb4:	681b      	ldr	r3, [r3, #0]
   2bfb6:	2201      	movs	r2, #1
   2bfb8:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2bfba:	687b      	ldr	r3, [r7, #4]
   2bfbc:	681b      	ldr	r3, [r3, #0]
   2bfbe:	2100      	movs	r1, #0
   2bfc0:	0018      	movs	r0, r3
   2bfc2:	4b26      	ldr	r3, [pc, #152]	; (2c05c <dir_next+0x1e4>)
   2bfc4:	4798      	blx	r3
   2bfc6:	1e03      	subs	r3, r0, #0
   2bfc8:	d001      	beq.n	2bfce <dir_next+0x156>
   2bfca:	2301      	movs	r3, #1
   2bfcc:	e03d      	b.n	2c04a <dir_next+0x1d2>
						dj->fs->winsect++;
   2bfce:	687b      	ldr	r3, [r7, #4]
   2bfd0:	681b      	ldr	r3, [r3, #0]
   2bfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2bfd4:	3201      	adds	r2, #1
   2bfd6:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2bfd8:	230b      	movs	r3, #11
   2bfda:	18fb      	adds	r3, r7, r3
   2bfdc:	781a      	ldrb	r2, [r3, #0]
   2bfde:	230b      	movs	r3, #11
   2bfe0:	18fb      	adds	r3, r7, r3
   2bfe2:	3201      	adds	r2, #1
   2bfe4:	701a      	strb	r2, [r3, #0]
   2bfe6:	687b      	ldr	r3, [r7, #4]
   2bfe8:	681b      	ldr	r3, [r3, #0]
   2bfea:	789b      	ldrb	r3, [r3, #2]
   2bfec:	220b      	movs	r2, #11
   2bfee:	18ba      	adds	r2, r7, r2
   2bff0:	7812      	ldrb	r2, [r2, #0]
   2bff2:	429a      	cmp	r2, r3
   2bff4:	d3dd      	bcc.n	2bfb2 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2bff6:	687b      	ldr	r3, [r7, #4]
   2bff8:	681b      	ldr	r3, [r3, #0]
   2bffa:	687a      	ldr	r2, [r7, #4]
   2bffc:	6812      	ldr	r2, [r2, #0]
   2bffe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2c000:	220b      	movs	r2, #11
   2c002:	18ba      	adds	r2, r7, r2
   2c004:	7812      	ldrb	r2, [r2, #0]
   2c006:	1a8a      	subs	r2, r1, r2
   2c008:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2c00a:	687b      	ldr	r3, [r7, #4]
   2c00c:	68fa      	ldr	r2, [r7, #12]
   2c00e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2c010:	687b      	ldr	r3, [r7, #4]
   2c012:	681b      	ldr	r3, [r3, #0]
   2c014:	68fa      	ldr	r2, [r7, #12]
   2c016:	0011      	movs	r1, r2
   2c018:	0018      	movs	r0, r3
   2c01a:	4b12      	ldr	r3, [pc, #72]	; (2c064 <dir_next+0x1ec>)
   2c01c:	4798      	blx	r3
   2c01e:	0002      	movs	r2, r0
   2c020:	687b      	ldr	r3, [r7, #4]
   2c022:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2c024:	687b      	ldr	r3, [r7, #4]
   2c026:	2208      	movs	r2, #8
   2c028:	18ba      	adds	r2, r7, r2
   2c02a:	8812      	ldrh	r2, [r2, #0]
   2c02c:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2c02e:	687b      	ldr	r3, [r7, #4]
   2c030:	681b      	ldr	r3, [r3, #0]
   2c032:	3330      	adds	r3, #48	; 0x30
   2c034:	001a      	movs	r2, r3
   2c036:	2308      	movs	r3, #8
   2c038:	18fb      	adds	r3, r7, r3
   2c03a:	881b      	ldrh	r3, [r3, #0]
   2c03c:	210f      	movs	r1, #15
   2c03e:	400b      	ands	r3, r1
   2c040:	015b      	lsls	r3, r3, #5
   2c042:	18d2      	adds	r2, r2, r3
   2c044:	687b      	ldr	r3, [r7, #4]
   2c046:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2c048:	2300      	movs	r3, #0
}
   2c04a:	0018      	movs	r0, r3
   2c04c:	46bd      	mov	sp, r7
   2c04e:	b005      	add	sp, #20
   2c050:	bd90      	pop	{r4, r7, pc}
   2c052:	46c0      	nop			; (mov r8, r8)
   2c054:	0002b79d 	.word	0x0002b79d
   2c058:	0002bc0d 	.word	0x0002bc0d
   2c05c:	0002b505 	.word	0x0002b505
   2c060:	0002b459 	.word	0x0002b459
   2c064:	0002b765 	.word	0x0002b765

0002c068 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2c068:	b590      	push	{r4, r7, lr}
   2c06a:	b087      	sub	sp, #28
   2c06c:	af00      	add	r7, sp, #0
   2c06e:	6078      	str	r0, [r7, #4]
   2c070:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2c072:	683b      	ldr	r3, [r7, #0]
   2c074:	781b      	ldrb	r3, [r3, #0]
   2c076:	001a      	movs	r2, r3
   2c078:	2340      	movs	r3, #64	; 0x40
   2c07a:	439a      	bics	r2, r3
   2c07c:	0013      	movs	r3, r2
   2c07e:	1e5a      	subs	r2, r3, #1
   2c080:	0013      	movs	r3, r2
   2c082:	005b      	lsls	r3, r3, #1
   2c084:	189b      	adds	r3, r3, r2
   2c086:	009b      	lsls	r3, r3, #2
   2c088:	189b      	adds	r3, r3, r2
   2c08a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2c08c:	2300      	movs	r3, #0
   2c08e:	613b      	str	r3, [r7, #16]
   2c090:	230e      	movs	r3, #14
   2c092:	18fb      	adds	r3, r7, r3
   2c094:	2201      	movs	r2, #1
   2c096:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2c098:	4a31      	ldr	r2, [pc, #196]	; (2c160 <cmp_lfn+0xf8>)
   2c09a:	693b      	ldr	r3, [r7, #16]
   2c09c:	18d3      	adds	r3, r2, r3
   2c09e:	781b      	ldrb	r3, [r3, #0]
   2c0a0:	3301      	adds	r3, #1
   2c0a2:	683a      	ldr	r2, [r7, #0]
   2c0a4:	18d3      	adds	r3, r2, r3
   2c0a6:	781b      	ldrb	r3, [r3, #0]
   2c0a8:	021b      	lsls	r3, r3, #8
   2c0aa:	b21a      	sxth	r2, r3
   2c0ac:	492c      	ldr	r1, [pc, #176]	; (2c160 <cmp_lfn+0xf8>)
   2c0ae:	693b      	ldr	r3, [r7, #16]
   2c0b0:	18cb      	adds	r3, r1, r3
   2c0b2:	781b      	ldrb	r3, [r3, #0]
   2c0b4:	0019      	movs	r1, r3
   2c0b6:	683b      	ldr	r3, [r7, #0]
   2c0b8:	185b      	adds	r3, r3, r1
   2c0ba:	781b      	ldrb	r3, [r3, #0]
   2c0bc:	b21b      	sxth	r3, r3
   2c0be:	4313      	orrs	r3, r2
   2c0c0:	b21a      	sxth	r2, r3
   2c0c2:	230c      	movs	r3, #12
   2c0c4:	18fb      	adds	r3, r7, r3
   2c0c6:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2c0c8:	230e      	movs	r3, #14
   2c0ca:	18fb      	adds	r3, r7, r3
   2c0cc:	881b      	ldrh	r3, [r3, #0]
   2c0ce:	2b00      	cmp	r3, #0
   2c0d0:	d01f      	beq.n	2c112 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2c0d2:	230e      	movs	r3, #14
   2c0d4:	18fc      	adds	r4, r7, r3
   2c0d6:	230c      	movs	r3, #12
   2c0d8:	18fb      	adds	r3, r7, r3
   2c0da:	881b      	ldrh	r3, [r3, #0]
   2c0dc:	0018      	movs	r0, r3
   2c0de:	4b21      	ldr	r3, [pc, #132]	; (2c164 <cmp_lfn+0xfc>)
   2c0e0:	4798      	blx	r3
   2c0e2:	0003      	movs	r3, r0
   2c0e4:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2c0e6:	697b      	ldr	r3, [r7, #20]
   2c0e8:	2bfe      	cmp	r3, #254	; 0xfe
   2c0ea:	d810      	bhi.n	2c10e <cmp_lfn+0xa6>
   2c0ec:	697b      	ldr	r3, [r7, #20]
   2c0ee:	1c5a      	adds	r2, r3, #1
   2c0f0:	617a      	str	r2, [r7, #20]
   2c0f2:	005b      	lsls	r3, r3, #1
   2c0f4:	687a      	ldr	r2, [r7, #4]
   2c0f6:	18d3      	adds	r3, r2, r3
   2c0f8:	881b      	ldrh	r3, [r3, #0]
   2c0fa:	0018      	movs	r0, r3
   2c0fc:	4b19      	ldr	r3, [pc, #100]	; (2c164 <cmp_lfn+0xfc>)
   2c0fe:	4798      	blx	r3
   2c100:	0003      	movs	r3, r0
   2c102:	001a      	movs	r2, r3
   2c104:	230e      	movs	r3, #14
   2c106:	18fb      	adds	r3, r7, r3
   2c108:	881b      	ldrh	r3, [r3, #0]
   2c10a:	4293      	cmp	r3, r2
   2c10c:	d009      	beq.n	2c122 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2c10e:	2300      	movs	r3, #0
   2c110:	e022      	b.n	2c158 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2c112:	230c      	movs	r3, #12
   2c114:	18fb      	adds	r3, r7, r3
   2c116:	881b      	ldrh	r3, [r3, #0]
   2c118:	4a13      	ldr	r2, [pc, #76]	; (2c168 <cmp_lfn+0x100>)
   2c11a:	4293      	cmp	r3, r2
   2c11c:	d001      	beq.n	2c122 <cmp_lfn+0xba>
   2c11e:	2300      	movs	r3, #0
   2c120:	e01a      	b.n	2c158 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2c122:	693b      	ldr	r3, [r7, #16]
   2c124:	3301      	adds	r3, #1
   2c126:	613b      	str	r3, [r7, #16]
   2c128:	693b      	ldr	r3, [r7, #16]
   2c12a:	2b0c      	cmp	r3, #12
   2c12c:	d9b4      	bls.n	2c098 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2c12e:	683b      	ldr	r3, [r7, #0]
   2c130:	781b      	ldrb	r3, [r3, #0]
   2c132:	001a      	movs	r2, r3
   2c134:	2340      	movs	r3, #64	; 0x40
   2c136:	4013      	ands	r3, r2
   2c138:	d00d      	beq.n	2c156 <cmp_lfn+0xee>
   2c13a:	230e      	movs	r3, #14
   2c13c:	18fb      	adds	r3, r7, r3
   2c13e:	881b      	ldrh	r3, [r3, #0]
   2c140:	2b00      	cmp	r3, #0
   2c142:	d008      	beq.n	2c156 <cmp_lfn+0xee>
   2c144:	697b      	ldr	r3, [r7, #20]
   2c146:	005b      	lsls	r3, r3, #1
   2c148:	687a      	ldr	r2, [r7, #4]
   2c14a:	18d3      	adds	r3, r2, r3
   2c14c:	881b      	ldrh	r3, [r3, #0]
   2c14e:	2b00      	cmp	r3, #0
   2c150:	d001      	beq.n	2c156 <cmp_lfn+0xee>
		return 0;
   2c152:	2300      	movs	r3, #0
   2c154:	e000      	b.n	2c158 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2c156:	2301      	movs	r3, #1
}
   2c158:	0018      	movs	r0, r3
   2c15a:	46bd      	mov	sp, r7
   2c15c:	b007      	add	sp, #28
   2c15e:	bd90      	pop	{r4, r7, pc}
   2c160:	000392b0 	.word	0x000392b0
   2c164:	0002e115 	.word	0x0002e115
   2c168:	0000ffff 	.word	0x0000ffff

0002c16c <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2c16c:	b580      	push	{r7, lr}
   2c16e:	b088      	sub	sp, #32
   2c170:	af00      	add	r7, sp, #0
   2c172:	60f8      	str	r0, [r7, #12]
   2c174:	60b9      	str	r1, [r7, #8]
   2c176:	0019      	movs	r1, r3
   2c178:	1dfb      	adds	r3, r7, #7
   2c17a:	701a      	strb	r2, [r3, #0]
   2c17c:	1dbb      	adds	r3, r7, #6
   2c17e:	1c0a      	adds	r2, r1, #0
   2c180:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2c182:	68bb      	ldr	r3, [r7, #8]
   2c184:	330d      	adds	r3, #13
   2c186:	1dba      	adds	r2, r7, #6
   2c188:	7812      	ldrb	r2, [r2, #0]
   2c18a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2c18c:	68bb      	ldr	r3, [r7, #8]
   2c18e:	330b      	adds	r3, #11
   2c190:	220f      	movs	r2, #15
   2c192:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2c194:	68bb      	ldr	r3, [r7, #8]
   2c196:	330c      	adds	r3, #12
   2c198:	2200      	movs	r2, #0
   2c19a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2c19c:	68bb      	ldr	r3, [r7, #8]
   2c19e:	331a      	adds	r3, #26
   2c1a0:	2200      	movs	r2, #0
   2c1a2:	701a      	strb	r2, [r3, #0]
   2c1a4:	68bb      	ldr	r3, [r7, #8]
   2c1a6:	331b      	adds	r3, #27
   2c1a8:	2200      	movs	r2, #0
   2c1aa:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2c1ac:	1dfb      	adds	r3, r7, #7
   2c1ae:	781b      	ldrb	r3, [r3, #0]
   2c1b0:	1e5a      	subs	r2, r3, #1
   2c1b2:	0013      	movs	r3, r2
   2c1b4:	005b      	lsls	r3, r3, #1
   2c1b6:	189b      	adds	r3, r3, r2
   2c1b8:	009b      	lsls	r3, r3, #2
   2c1ba:	189b      	adds	r3, r3, r2
   2c1bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2c1be:	2316      	movs	r3, #22
   2c1c0:	18fb      	adds	r3, r7, r3
   2c1c2:	2200      	movs	r2, #0
   2c1c4:	801a      	strh	r2, [r3, #0]
   2c1c6:	2300      	movs	r3, #0
   2c1c8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2c1ca:	2316      	movs	r3, #22
   2c1cc:	18fb      	adds	r3, r7, r3
   2c1ce:	881b      	ldrh	r3, [r3, #0]
   2c1d0:	4a28      	ldr	r2, [pc, #160]	; (2c274 <fit_lfn+0x108>)
   2c1d2:	4293      	cmp	r3, r2
   2c1d4:	d009      	beq.n	2c1ea <fit_lfn+0x7e>
   2c1d6:	69fb      	ldr	r3, [r7, #28]
   2c1d8:	1c5a      	adds	r2, r3, #1
   2c1da:	61fa      	str	r2, [r7, #28]
   2c1dc:	005b      	lsls	r3, r3, #1
   2c1de:	68fa      	ldr	r2, [r7, #12]
   2c1e0:	18d2      	adds	r2, r2, r3
   2c1e2:	2316      	movs	r3, #22
   2c1e4:	18fb      	adds	r3, r7, r3
   2c1e6:	8812      	ldrh	r2, [r2, #0]
   2c1e8:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2c1ea:	4a23      	ldr	r2, [pc, #140]	; (2c278 <fit_lfn+0x10c>)
   2c1ec:	69bb      	ldr	r3, [r7, #24]
   2c1ee:	18d3      	adds	r3, r2, r3
   2c1f0:	781b      	ldrb	r3, [r3, #0]
   2c1f2:	001a      	movs	r2, r3
   2c1f4:	68bb      	ldr	r3, [r7, #8]
   2c1f6:	189b      	adds	r3, r3, r2
   2c1f8:	2216      	movs	r2, #22
   2c1fa:	18ba      	adds	r2, r7, r2
   2c1fc:	8812      	ldrh	r2, [r2, #0]
   2c1fe:	b2d2      	uxtb	r2, r2
   2c200:	701a      	strb	r2, [r3, #0]
   2c202:	4a1d      	ldr	r2, [pc, #116]	; (2c278 <fit_lfn+0x10c>)
   2c204:	69bb      	ldr	r3, [r7, #24]
   2c206:	18d3      	adds	r3, r2, r3
   2c208:	781b      	ldrb	r3, [r3, #0]
   2c20a:	3301      	adds	r3, #1
   2c20c:	68ba      	ldr	r2, [r7, #8]
   2c20e:	18d3      	adds	r3, r2, r3
   2c210:	2216      	movs	r2, #22
   2c212:	18ba      	adds	r2, r7, r2
   2c214:	8812      	ldrh	r2, [r2, #0]
   2c216:	0a12      	lsrs	r2, r2, #8
   2c218:	b292      	uxth	r2, r2
   2c21a:	b2d2      	uxtb	r2, r2
   2c21c:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2c21e:	2316      	movs	r3, #22
   2c220:	18fb      	adds	r3, r7, r3
   2c222:	881b      	ldrh	r3, [r3, #0]
   2c224:	2b00      	cmp	r3, #0
   2c226:	d104      	bne.n	2c232 <fit_lfn+0xc6>
   2c228:	2316      	movs	r3, #22
   2c22a:	18fb      	adds	r3, r7, r3
   2c22c:	2201      	movs	r2, #1
   2c22e:	4252      	negs	r2, r2
   2c230:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2c232:	69bb      	ldr	r3, [r7, #24]
   2c234:	3301      	adds	r3, #1
   2c236:	61bb      	str	r3, [r7, #24]
   2c238:	69bb      	ldr	r3, [r7, #24]
   2c23a:	2b0c      	cmp	r3, #12
   2c23c:	d9c5      	bls.n	2c1ca <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2c23e:	2316      	movs	r3, #22
   2c240:	18fb      	adds	r3, r7, r3
   2c242:	881b      	ldrh	r3, [r3, #0]
   2c244:	4a0b      	ldr	r2, [pc, #44]	; (2c274 <fit_lfn+0x108>)
   2c246:	4293      	cmp	r3, r2
   2c248:	d006      	beq.n	2c258 <fit_lfn+0xec>
   2c24a:	69fb      	ldr	r3, [r7, #28]
   2c24c:	005b      	lsls	r3, r3, #1
   2c24e:	68fa      	ldr	r2, [r7, #12]
   2c250:	18d3      	adds	r3, r2, r3
   2c252:	881b      	ldrh	r3, [r3, #0]
   2c254:	2b00      	cmp	r3, #0
   2c256:	d105      	bne.n	2c264 <fit_lfn+0xf8>
   2c258:	1dfb      	adds	r3, r7, #7
   2c25a:	1dfa      	adds	r2, r7, #7
   2c25c:	7812      	ldrb	r2, [r2, #0]
   2c25e:	2140      	movs	r1, #64	; 0x40
   2c260:	430a      	orrs	r2, r1
   2c262:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2c264:	68bb      	ldr	r3, [r7, #8]
   2c266:	1dfa      	adds	r2, r7, #7
   2c268:	7812      	ldrb	r2, [r2, #0]
   2c26a:	701a      	strb	r2, [r3, #0]
}
   2c26c:	46c0      	nop			; (mov r8, r8)
   2c26e:	46bd      	mov	sp, r7
   2c270:	b008      	add	sp, #32
   2c272:	bd80      	pop	{r7, pc}
   2c274:	0000ffff 	.word	0x0000ffff
   2c278:	000392b0 	.word	0x000392b0

0002c27c <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2c27c:	b580      	push	{r7, lr}
   2c27e:	b08a      	sub	sp, #40	; 0x28
   2c280:	af00      	add	r7, sp, #0
   2c282:	60f8      	str	r0, [r7, #12]
   2c284:	60b9      	str	r1, [r7, #8]
   2c286:	607a      	str	r2, [r7, #4]
   2c288:	001a      	movs	r2, r3
   2c28a:	1cbb      	adds	r3, r7, #2
   2c28c:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2c28e:	68b9      	ldr	r1, [r7, #8]
   2c290:	68fb      	ldr	r3, [r7, #12]
   2c292:	220b      	movs	r2, #11
   2c294:	0018      	movs	r0, r3
   2c296:	4b38      	ldr	r3, [pc, #224]	; (2c378 <gen_numname+0xfc>)
   2c298:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2c29a:	1cbb      	adds	r3, r7, #2
   2c29c:	881b      	ldrh	r3, [r3, #0]
   2c29e:	2b05      	cmp	r3, #5
   2c2a0:	d911      	bls.n	2c2c6 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2c2a2:	1cbb      	adds	r3, r7, #2
   2c2a4:	881b      	ldrh	r3, [r3, #0]
   2c2a6:	b29a      	uxth	r2, r3
   2c2a8:	0852      	lsrs	r2, r2, #1
   2c2aa:	03db      	lsls	r3, r3, #15
   2c2ac:	4313      	orrs	r3, r2
   2c2ae:	b299      	uxth	r1, r3
   2c2b0:	687b      	ldr	r3, [r7, #4]
   2c2b2:	1c9a      	adds	r2, r3, #2
   2c2b4:	607a      	str	r2, [r7, #4]
   2c2b6:	881a      	ldrh	r2, [r3, #0]
   2c2b8:	1cbb      	adds	r3, r7, #2
   2c2ba:	188a      	adds	r2, r1, r2
   2c2bc:	801a      	strh	r2, [r3, #0]
   2c2be:	687b      	ldr	r3, [r7, #4]
   2c2c0:	881b      	ldrh	r3, [r3, #0]
   2c2c2:	2b00      	cmp	r3, #0
   2c2c4:	d1ed      	bne.n	2c2a2 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2c2c6:	2307      	movs	r3, #7
   2c2c8:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2c2ca:	1cbb      	adds	r3, r7, #2
   2c2cc:	881b      	ldrh	r3, [r3, #0]
   2c2ce:	b2db      	uxtb	r3, r3
   2c2d0:	220f      	movs	r2, #15
   2c2d2:	4013      	ands	r3, r2
   2c2d4:	b2da      	uxtb	r2, r3
   2c2d6:	2327      	movs	r3, #39	; 0x27
   2c2d8:	18fb      	adds	r3, r7, r3
   2c2da:	3230      	adds	r2, #48	; 0x30
   2c2dc:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2c2de:	2327      	movs	r3, #39	; 0x27
   2c2e0:	18fb      	adds	r3, r7, r3
   2c2e2:	781b      	ldrb	r3, [r3, #0]
   2c2e4:	2b39      	cmp	r3, #57	; 0x39
   2c2e6:	d906      	bls.n	2c2f6 <gen_numname+0x7a>
   2c2e8:	2327      	movs	r3, #39	; 0x27
   2c2ea:	18fb      	adds	r3, r7, r3
   2c2ec:	2227      	movs	r2, #39	; 0x27
   2c2ee:	18ba      	adds	r2, r7, r2
   2c2f0:	7812      	ldrb	r2, [r2, #0]
   2c2f2:	3207      	adds	r2, #7
   2c2f4:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2c2f6:	6a3b      	ldr	r3, [r7, #32]
   2c2f8:	1e5a      	subs	r2, r3, #1
   2c2fa:	623a      	str	r2, [r7, #32]
   2c2fc:	2214      	movs	r2, #20
   2c2fe:	18ba      	adds	r2, r7, r2
   2c300:	2127      	movs	r1, #39	; 0x27
   2c302:	1879      	adds	r1, r7, r1
   2c304:	7809      	ldrb	r1, [r1, #0]
   2c306:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2c308:	1cbb      	adds	r3, r7, #2
   2c30a:	1cba      	adds	r2, r7, #2
   2c30c:	8812      	ldrh	r2, [r2, #0]
   2c30e:	0912      	lsrs	r2, r2, #4
   2c310:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2c312:	1cbb      	adds	r3, r7, #2
   2c314:	881b      	ldrh	r3, [r3, #0]
   2c316:	2b00      	cmp	r3, #0
   2c318:	d1d7      	bne.n	2c2ca <gen_numname+0x4e>
	ns[i] = '~';
   2c31a:	2314      	movs	r3, #20
   2c31c:	18fa      	adds	r2, r7, r3
   2c31e:	6a3b      	ldr	r3, [r7, #32]
   2c320:	18d3      	adds	r3, r2, r3
   2c322:	227e      	movs	r2, #126	; 0x7e
   2c324:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2c326:	2300      	movs	r3, #0
   2c328:	61fb      	str	r3, [r7, #28]
   2c32a:	e002      	b.n	2c332 <gen_numname+0xb6>
   2c32c:	69fb      	ldr	r3, [r7, #28]
   2c32e:	3301      	adds	r3, #1
   2c330:	61fb      	str	r3, [r7, #28]
   2c332:	69fa      	ldr	r2, [r7, #28]
   2c334:	6a3b      	ldr	r3, [r7, #32]
   2c336:	429a      	cmp	r2, r3
   2c338:	d205      	bcs.n	2c346 <gen_numname+0xca>
   2c33a:	68fa      	ldr	r2, [r7, #12]
   2c33c:	69fb      	ldr	r3, [r7, #28]
   2c33e:	18d3      	adds	r3, r2, r3
   2c340:	781b      	ldrb	r3, [r3, #0]
   2c342:	2b20      	cmp	r3, #32
   2c344:	d1f2      	bne.n	2c32c <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2c346:	69fb      	ldr	r3, [r7, #28]
   2c348:	1c5a      	adds	r2, r3, #1
   2c34a:	61fa      	str	r2, [r7, #28]
   2c34c:	68fa      	ldr	r2, [r7, #12]
   2c34e:	18d2      	adds	r2, r2, r3
   2c350:	6a3b      	ldr	r3, [r7, #32]
   2c352:	2b07      	cmp	r3, #7
   2c354:	d806      	bhi.n	2c364 <gen_numname+0xe8>
   2c356:	6a3b      	ldr	r3, [r7, #32]
   2c358:	1c59      	adds	r1, r3, #1
   2c35a:	6239      	str	r1, [r7, #32]
   2c35c:	2114      	movs	r1, #20
   2c35e:	1879      	adds	r1, r7, r1
   2c360:	5ccb      	ldrb	r3, [r1, r3]
   2c362:	e000      	b.n	2c366 <gen_numname+0xea>
   2c364:	2320      	movs	r3, #32
   2c366:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2c368:	69fb      	ldr	r3, [r7, #28]
   2c36a:	2b07      	cmp	r3, #7
   2c36c:	d9eb      	bls.n	2c346 <gen_numname+0xca>
}
   2c36e:	46c0      	nop			; (mov r8, r8)
   2c370:	46bd      	mov	sp, r7
   2c372:	b00a      	add	sp, #40	; 0x28
   2c374:	bd80      	pop	{r7, pc}
   2c376:	46c0      	nop			; (mov r8, r8)
   2c378:	0002b421 	.word	0x0002b421

0002c37c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2c37c:	b580      	push	{r7, lr}
   2c37e:	b084      	sub	sp, #16
   2c380:	af00      	add	r7, sp, #0
   2c382:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2c384:	230f      	movs	r3, #15
   2c386:	18fb      	adds	r3, r7, r3
   2c388:	2200      	movs	r2, #0
   2c38a:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2c38c:	230b      	movs	r3, #11
   2c38e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2c390:	230f      	movs	r3, #15
   2c392:	18fb      	adds	r3, r7, r3
   2c394:	781b      	ldrb	r3, [r3, #0]
   2c396:	b2da      	uxtb	r2, r3
   2c398:	0852      	lsrs	r2, r2, #1
   2c39a:	01db      	lsls	r3, r3, #7
   2c39c:	4313      	orrs	r3, r2
   2c39e:	b2d9      	uxtb	r1, r3
   2c3a0:	687b      	ldr	r3, [r7, #4]
   2c3a2:	1c5a      	adds	r2, r3, #1
   2c3a4:	607a      	str	r2, [r7, #4]
   2c3a6:	781a      	ldrb	r2, [r3, #0]
   2c3a8:	230f      	movs	r3, #15
   2c3aa:	18fb      	adds	r3, r7, r3
   2c3ac:	188a      	adds	r2, r1, r2
   2c3ae:	701a      	strb	r2, [r3, #0]
   2c3b0:	68bb      	ldr	r3, [r7, #8]
   2c3b2:	3b01      	subs	r3, #1
   2c3b4:	60bb      	str	r3, [r7, #8]
   2c3b6:	68bb      	ldr	r3, [r7, #8]
   2c3b8:	2b00      	cmp	r3, #0
   2c3ba:	d1e9      	bne.n	2c390 <sum_sfn+0x14>
	return sum;
   2c3bc:	230f      	movs	r3, #15
   2c3be:	18fb      	adds	r3, r7, r3
   2c3c0:	781b      	ldrb	r3, [r3, #0]
}
   2c3c2:	0018      	movs	r0, r3
   2c3c4:	46bd      	mov	sp, r7
   2c3c6:	b004      	add	sp, #16
   2c3c8:	bd80      	pop	{r7, pc}
	...

0002c3cc <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2c3cc:	b590      	push	{r4, r7, lr}
   2c3ce:	b087      	sub	sp, #28
   2c3d0:	af00      	add	r7, sp, #0
   2c3d2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2c3d4:	2317      	movs	r3, #23
   2c3d6:	18fc      	adds	r4, r7, r3
   2c3d8:	687b      	ldr	r3, [r7, #4]
   2c3da:	2100      	movs	r1, #0
   2c3dc:	0018      	movs	r0, r3
   2c3de:	4b74      	ldr	r3, [pc, #464]	; (2c5b0 <dir_find+0x1e4>)
   2c3e0:	4798      	blx	r3
   2c3e2:	0003      	movs	r3, r0
   2c3e4:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c3e6:	2317      	movs	r3, #23
   2c3e8:	18fb      	adds	r3, r7, r3
   2c3ea:	781b      	ldrb	r3, [r3, #0]
   2c3ec:	2b00      	cmp	r3, #0
   2c3ee:	d003      	beq.n	2c3f8 <dir_find+0x2c>
   2c3f0:	2317      	movs	r3, #23
   2c3f2:	18fb      	adds	r3, r7, r3
   2c3f4:	781b      	ldrb	r3, [r3, #0]
   2c3f6:	e0d6      	b.n	2c5a6 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2c3f8:	2314      	movs	r3, #20
   2c3fa:	18fb      	adds	r3, r7, r3
   2c3fc:	22ff      	movs	r2, #255	; 0xff
   2c3fe:	701a      	strb	r2, [r3, #0]
   2c400:	2315      	movs	r3, #21
   2c402:	18fb      	adds	r3, r7, r3
   2c404:	2214      	movs	r2, #20
   2c406:	18ba      	adds	r2, r7, r2
   2c408:	7812      	ldrb	r2, [r2, #0]
   2c40a:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2c40c:	687b      	ldr	r3, [r7, #4]
   2c40e:	681a      	ldr	r2, [r3, #0]
   2c410:	687b      	ldr	r3, [r7, #4]
   2c412:	691b      	ldr	r3, [r3, #16]
   2c414:	2117      	movs	r1, #23
   2c416:	187c      	adds	r4, r7, r1
   2c418:	0019      	movs	r1, r3
   2c41a:	0010      	movs	r0, r2
   2c41c:	4b65      	ldr	r3, [pc, #404]	; (2c5b4 <dir_find+0x1e8>)
   2c41e:	4798      	blx	r3
   2c420:	0003      	movs	r3, r0
   2c422:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c424:	2317      	movs	r3, #23
   2c426:	18fb      	adds	r3, r7, r3
   2c428:	781b      	ldrb	r3, [r3, #0]
   2c42a:	2b00      	cmp	r3, #0
   2c42c:	d000      	beq.n	2c430 <dir_find+0x64>
   2c42e:	e0b2      	b.n	2c596 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2c430:	687b      	ldr	r3, [r7, #4]
   2c432:	695b      	ldr	r3, [r3, #20]
   2c434:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2c436:	2316      	movs	r3, #22
   2c438:	18fb      	adds	r3, r7, r3
   2c43a:	693a      	ldr	r2, [r7, #16]
   2c43c:	7812      	ldrb	r2, [r2, #0]
   2c43e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2c440:	2316      	movs	r3, #22
   2c442:	18fb      	adds	r3, r7, r3
   2c444:	781b      	ldrb	r3, [r3, #0]
   2c446:	2b00      	cmp	r3, #0
   2c448:	d104      	bne.n	2c454 <dir_find+0x88>
   2c44a:	2317      	movs	r3, #23
   2c44c:	18fb      	adds	r3, r7, r3
   2c44e:	2204      	movs	r2, #4
   2c450:	701a      	strb	r2, [r3, #0]
   2c452:	e0a5      	b.n	2c5a0 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2c454:	693b      	ldr	r3, [r7, #16]
   2c456:	330b      	adds	r3, #11
   2c458:	781a      	ldrb	r2, [r3, #0]
   2c45a:	230f      	movs	r3, #15
   2c45c:	18fb      	adds	r3, r7, r3
   2c45e:	213f      	movs	r1, #63	; 0x3f
   2c460:	400a      	ands	r2, r1
   2c462:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2c464:	2316      	movs	r3, #22
   2c466:	18fb      	adds	r3, r7, r3
   2c468:	781b      	ldrb	r3, [r3, #0]
   2c46a:	2be5      	cmp	r3, #229	; 0xe5
   2c46c:	d00a      	beq.n	2c484 <dir_find+0xb8>
   2c46e:	230f      	movs	r3, #15
   2c470:	18fb      	adds	r3, r7, r3
   2c472:	781b      	ldrb	r3, [r3, #0]
   2c474:	2208      	movs	r2, #8
   2c476:	4013      	ands	r3, r2
   2c478:	d009      	beq.n	2c48e <dir_find+0xc2>
   2c47a:	230f      	movs	r3, #15
   2c47c:	18fb      	adds	r3, r7, r3
   2c47e:	781b      	ldrb	r3, [r3, #0]
   2c480:	2b0f      	cmp	r3, #15
   2c482:	d004      	beq.n	2c48e <dir_find+0xc2>
			ord = 0xFF;
   2c484:	2315      	movs	r3, #21
   2c486:	18fb      	adds	r3, r7, r3
   2c488:	22ff      	movs	r2, #255	; 0xff
   2c48a:	701a      	strb	r2, [r3, #0]
   2c48c:	e073      	b.n	2c576 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2c48e:	230f      	movs	r3, #15
   2c490:	18fb      	adds	r3, r7, r3
   2c492:	781b      	ldrb	r3, [r3, #0]
   2c494:	2b0f      	cmp	r3, #15
   2c496:	d145      	bne.n	2c524 <dir_find+0x158>
				if (dj->lfn) {
   2c498:	687b      	ldr	r3, [r7, #4]
   2c49a:	69db      	ldr	r3, [r3, #28]
   2c49c:	2b00      	cmp	r3, #0
   2c49e:	d100      	bne.n	2c4a2 <dir_find+0xd6>
   2c4a0:	e069      	b.n	2c576 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2c4a2:	2316      	movs	r3, #22
   2c4a4:	18fb      	adds	r3, r7, r3
   2c4a6:	781b      	ldrb	r3, [r3, #0]
   2c4a8:	2240      	movs	r2, #64	; 0x40
   2c4aa:	4013      	ands	r3, r2
   2c4ac:	d016      	beq.n	2c4dc <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2c4ae:	2314      	movs	r3, #20
   2c4b0:	18fb      	adds	r3, r7, r3
   2c4b2:	693a      	ldr	r2, [r7, #16]
   2c4b4:	7b52      	ldrb	r2, [r2, #13]
   2c4b6:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2c4b8:	2316      	movs	r3, #22
   2c4ba:	18fb      	adds	r3, r7, r3
   2c4bc:	2216      	movs	r2, #22
   2c4be:	18ba      	adds	r2, r7, r2
   2c4c0:	7812      	ldrb	r2, [r2, #0]
   2c4c2:	2140      	movs	r1, #64	; 0x40
   2c4c4:	438a      	bics	r2, r1
   2c4c6:	701a      	strb	r2, [r3, #0]
   2c4c8:	2315      	movs	r3, #21
   2c4ca:	18fb      	adds	r3, r7, r3
   2c4cc:	2216      	movs	r2, #22
   2c4ce:	18ba      	adds	r2, r7, r2
   2c4d0:	7812      	ldrb	r2, [r2, #0]
   2c4d2:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2c4d4:	687b      	ldr	r3, [r7, #4]
   2c4d6:	88da      	ldrh	r2, [r3, #6]
   2c4d8:	687b      	ldr	r3, [r7, #4]
   2c4da:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2c4dc:	2316      	movs	r3, #22
   2c4de:	18fa      	adds	r2, r7, r3
   2c4e0:	2315      	movs	r3, #21
   2c4e2:	18fb      	adds	r3, r7, r3
   2c4e4:	7812      	ldrb	r2, [r2, #0]
   2c4e6:	781b      	ldrb	r3, [r3, #0]
   2c4e8:	429a      	cmp	r2, r3
   2c4ea:	d116      	bne.n	2c51a <dir_find+0x14e>
   2c4ec:	693b      	ldr	r3, [r7, #16]
   2c4ee:	330d      	adds	r3, #13
   2c4f0:	781b      	ldrb	r3, [r3, #0]
   2c4f2:	2214      	movs	r2, #20
   2c4f4:	18ba      	adds	r2, r7, r2
   2c4f6:	7812      	ldrb	r2, [r2, #0]
   2c4f8:	429a      	cmp	r2, r3
   2c4fa:	d10e      	bne.n	2c51a <dir_find+0x14e>
   2c4fc:	687b      	ldr	r3, [r7, #4]
   2c4fe:	69db      	ldr	r3, [r3, #28]
   2c500:	693a      	ldr	r2, [r7, #16]
   2c502:	0011      	movs	r1, r2
   2c504:	0018      	movs	r0, r3
   2c506:	4b2c      	ldr	r3, [pc, #176]	; (2c5b8 <dir_find+0x1ec>)
   2c508:	4798      	blx	r3
   2c50a:	1e03      	subs	r3, r0, #0
   2c50c:	d005      	beq.n	2c51a <dir_find+0x14e>
   2c50e:	2315      	movs	r3, #21
   2c510:	18fb      	adds	r3, r7, r3
   2c512:	781b      	ldrb	r3, [r3, #0]
   2c514:	3b01      	subs	r3, #1
   2c516:	b2da      	uxtb	r2, r3
   2c518:	e000      	b.n	2c51c <dir_find+0x150>
   2c51a:	22ff      	movs	r2, #255	; 0xff
   2c51c:	2315      	movs	r3, #21
   2c51e:	18fb      	adds	r3, r7, r3
   2c520:	701a      	strb	r2, [r3, #0]
   2c522:	e028      	b.n	2c576 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c524:	2315      	movs	r3, #21
   2c526:	18fb      	adds	r3, r7, r3
   2c528:	781b      	ldrb	r3, [r3, #0]
   2c52a:	2b00      	cmp	r3, #0
   2c52c:	d10a      	bne.n	2c544 <dir_find+0x178>
   2c52e:	693b      	ldr	r3, [r7, #16]
   2c530:	0018      	movs	r0, r3
   2c532:	4b22      	ldr	r3, [pc, #136]	; (2c5bc <dir_find+0x1f0>)
   2c534:	4798      	blx	r3
   2c536:	0003      	movs	r3, r0
   2c538:	001a      	movs	r2, r3
   2c53a:	2314      	movs	r3, #20
   2c53c:	18fb      	adds	r3, r7, r3
   2c53e:	781b      	ldrb	r3, [r3, #0]
   2c540:	4293      	cmp	r3, r2
   2c542:	d02a      	beq.n	2c59a <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2c544:	2315      	movs	r3, #21
   2c546:	18fb      	adds	r3, r7, r3
   2c548:	22ff      	movs	r2, #255	; 0xff
   2c54a:	701a      	strb	r2, [r3, #0]
   2c54c:	687b      	ldr	r3, [r7, #4]
   2c54e:	2201      	movs	r2, #1
   2c550:	4252      	negs	r2, r2
   2c552:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c554:	687b      	ldr	r3, [r7, #4]
   2c556:	699b      	ldr	r3, [r3, #24]
   2c558:	330b      	adds	r3, #11
   2c55a:	781b      	ldrb	r3, [r3, #0]
   2c55c:	001a      	movs	r2, r3
   2c55e:	2301      	movs	r3, #1
   2c560:	4013      	ands	r3, r2
   2c562:	d108      	bne.n	2c576 <dir_find+0x1aa>
   2c564:	687b      	ldr	r3, [r7, #4]
   2c566:	6999      	ldr	r1, [r3, #24]
   2c568:	693b      	ldr	r3, [r7, #16]
   2c56a:	220b      	movs	r2, #11
   2c56c:	0018      	movs	r0, r3
   2c56e:	4b14      	ldr	r3, [pc, #80]	; (2c5c0 <dir_find+0x1f4>)
   2c570:	4798      	blx	r3
   2c572:	1e03      	subs	r3, r0, #0
   2c574:	d013      	beq.n	2c59e <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2c576:	2317      	movs	r3, #23
   2c578:	18fc      	adds	r4, r7, r3
   2c57a:	687b      	ldr	r3, [r7, #4]
   2c57c:	2100      	movs	r1, #0
   2c57e:	0018      	movs	r0, r3
   2c580:	4b10      	ldr	r3, [pc, #64]	; (2c5c4 <dir_find+0x1f8>)
   2c582:	4798      	blx	r3
   2c584:	0003      	movs	r3, r0
   2c586:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c588:	2317      	movs	r3, #23
   2c58a:	18fb      	adds	r3, r7, r3
   2c58c:	781b      	ldrb	r3, [r3, #0]
   2c58e:	2b00      	cmp	r3, #0
   2c590:	d100      	bne.n	2c594 <dir_find+0x1c8>
   2c592:	e73b      	b.n	2c40c <dir_find+0x40>
   2c594:	e004      	b.n	2c5a0 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2c596:	46c0      	nop			; (mov r8, r8)
   2c598:	e002      	b.n	2c5a0 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c59a:	46c0      	nop			; (mov r8, r8)
   2c59c:	e000      	b.n	2c5a0 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c59e:	46c0      	nop			; (mov r8, r8)

	return res;
   2c5a0:	2317      	movs	r3, #23
   2c5a2:	18fb      	adds	r3, r7, r3
   2c5a4:	781b      	ldrb	r3, [r3, #0]
}
   2c5a6:	0018      	movs	r0, r3
   2c5a8:	46bd      	mov	sp, r7
   2c5aa:	b007      	add	sp, #28
   2c5ac:	bd90      	pop	{r4, r7, pc}
   2c5ae:	46c0      	nop			; (mov r8, r8)
   2c5b0:	0002bd49 	.word	0x0002bd49
   2c5b4:	0002b505 	.word	0x0002b505
   2c5b8:	0002c069 	.word	0x0002c069
   2c5bc:	0002c37d 	.word	0x0002c37d
   2c5c0:	0002b489 	.word	0x0002b489
   2c5c4:	0002be79 	.word	0x0002be79

0002c5c8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2c5c8:	b590      	push	{r4, r7, lr}
   2c5ca:	b08d      	sub	sp, #52	; 0x34
   2c5cc:	af00      	add	r7, sp, #0
   2c5ce:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2c5d0:	687b      	ldr	r3, [r7, #4]
   2c5d2:	699b      	ldr	r3, [r3, #24]
   2c5d4:	627b      	str	r3, [r7, #36]	; 0x24
   2c5d6:	687b      	ldr	r3, [r7, #4]
   2c5d8:	69db      	ldr	r3, [r3, #28]
   2c5da:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2c5dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2c5de:	230c      	movs	r3, #12
   2c5e0:	18fb      	adds	r3, r7, r3
   2c5e2:	220c      	movs	r2, #12
   2c5e4:	0018      	movs	r0, r3
   2c5e6:	4bc8      	ldr	r3, [pc, #800]	; (2c908 <dir_register+0x340>)
   2c5e8:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2c5ea:	230c      	movs	r3, #12
   2c5ec:	18fb      	adds	r3, r7, r3
   2c5ee:	7adb      	ldrb	r3, [r3, #11]
   2c5f0:	001a      	movs	r2, r3
   2c5f2:	2301      	movs	r3, #1
   2c5f4:	4013      	ands	r3, r2
   2c5f6:	d048      	beq.n	2c68a <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2c5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c5fa:	330b      	adds	r3, #11
   2c5fc:	2200      	movs	r2, #0
   2c5fe:	701a      	strb	r2, [r3, #0]
   2c600:	687b      	ldr	r3, [r7, #4]
   2c602:	2200      	movs	r2, #0
   2c604:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2c606:	232c      	movs	r3, #44	; 0x2c
   2c608:	18fb      	adds	r3, r7, r3
   2c60a:	2201      	movs	r2, #1
   2c60c:	801a      	strh	r2, [r3, #0]
   2c60e:	e01c      	b.n	2c64a <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2c610:	232c      	movs	r3, #44	; 0x2c
   2c612:	18fb      	adds	r3, r7, r3
   2c614:	881b      	ldrh	r3, [r3, #0]
   2c616:	6a3a      	ldr	r2, [r7, #32]
   2c618:	210c      	movs	r1, #12
   2c61a:	1879      	adds	r1, r7, r1
   2c61c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2c61e:	4cbb      	ldr	r4, [pc, #748]	; (2c90c <dir_register+0x344>)
   2c620:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2c622:	232f      	movs	r3, #47	; 0x2f
   2c624:	18fc      	adds	r4, r7, r3
   2c626:	687b      	ldr	r3, [r7, #4]
   2c628:	0018      	movs	r0, r3
   2c62a:	4bb9      	ldr	r3, [pc, #740]	; (2c910 <dir_register+0x348>)
   2c62c:	4798      	blx	r3
   2c62e:	0003      	movs	r3, r0
   2c630:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c632:	232f      	movs	r3, #47	; 0x2f
   2c634:	18fb      	adds	r3, r7, r3
   2c636:	781b      	ldrb	r3, [r3, #0]
   2c638:	2b00      	cmp	r3, #0
   2c63a:	d10c      	bne.n	2c656 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2c63c:	232c      	movs	r3, #44	; 0x2c
   2c63e:	18fb      	adds	r3, r7, r3
   2c640:	881a      	ldrh	r2, [r3, #0]
   2c642:	232c      	movs	r3, #44	; 0x2c
   2c644:	18fb      	adds	r3, r7, r3
   2c646:	3201      	adds	r2, #1
   2c648:	801a      	strh	r2, [r3, #0]
   2c64a:	232c      	movs	r3, #44	; 0x2c
   2c64c:	18fb      	adds	r3, r7, r3
   2c64e:	881b      	ldrh	r3, [r3, #0]
   2c650:	2b63      	cmp	r3, #99	; 0x63
   2c652:	d9dd      	bls.n	2c610 <dir_register+0x48>
   2c654:	e000      	b.n	2c658 <dir_register+0x90>
			if (res != FR_OK) break;
   2c656:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2c658:	232c      	movs	r3, #44	; 0x2c
   2c65a:	18fb      	adds	r3, r7, r3
   2c65c:	881b      	ldrh	r3, [r3, #0]
   2c65e:	2b64      	cmp	r3, #100	; 0x64
   2c660:	d101      	bne.n	2c666 <dir_register+0x9e>
   2c662:	2307      	movs	r3, #7
   2c664:	e14c      	b.n	2c900 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2c666:	232f      	movs	r3, #47	; 0x2f
   2c668:	18fb      	adds	r3, r7, r3
   2c66a:	781b      	ldrb	r3, [r3, #0]
   2c66c:	2b04      	cmp	r3, #4
   2c66e:	d003      	beq.n	2c678 <dir_register+0xb0>
   2c670:	232f      	movs	r3, #47	; 0x2f
   2c672:	18fb      	adds	r3, r7, r3
   2c674:	781b      	ldrb	r3, [r3, #0]
   2c676:	e143      	b.n	2c900 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2c678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c67a:	330b      	adds	r3, #11
   2c67c:	220c      	movs	r2, #12
   2c67e:	18ba      	adds	r2, r7, r2
   2c680:	7ad2      	ldrb	r2, [r2, #11]
   2c682:	701a      	strb	r2, [r3, #0]
   2c684:	687b      	ldr	r3, [r7, #4]
   2c686:	6a3a      	ldr	r2, [r7, #32]
   2c688:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2c68a:	230c      	movs	r3, #12
   2c68c:	18fb      	adds	r3, r7, r3
   2c68e:	7adb      	ldrb	r3, [r3, #11]
   2c690:	001a      	movs	r2, r3
   2c692:	2302      	movs	r3, #2
   2c694:	4013      	ands	r3, r2
   2c696:	d023      	beq.n	2c6e0 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2c698:	232a      	movs	r3, #42	; 0x2a
   2c69a:	18fb      	adds	r3, r7, r3
   2c69c:	2200      	movs	r2, #0
   2c69e:	801a      	strh	r2, [r3, #0]
   2c6a0:	e006      	b.n	2c6b0 <dir_register+0xe8>
   2c6a2:	232a      	movs	r3, #42	; 0x2a
   2c6a4:	18fb      	adds	r3, r7, r3
   2c6a6:	881a      	ldrh	r2, [r3, #0]
   2c6a8:	232a      	movs	r3, #42	; 0x2a
   2c6aa:	18fb      	adds	r3, r7, r3
   2c6ac:	3201      	adds	r2, #1
   2c6ae:	801a      	strh	r2, [r3, #0]
   2c6b0:	232a      	movs	r3, #42	; 0x2a
   2c6b2:	18fb      	adds	r3, r7, r3
   2c6b4:	881b      	ldrh	r3, [r3, #0]
   2c6b6:	005b      	lsls	r3, r3, #1
   2c6b8:	6a3a      	ldr	r2, [r7, #32]
   2c6ba:	18d3      	adds	r3, r2, r3
   2c6bc:	881b      	ldrh	r3, [r3, #0]
   2c6be:	2b00      	cmp	r3, #0
   2c6c0:	d1ef      	bne.n	2c6a2 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2c6c2:	232a      	movs	r3, #42	; 0x2a
   2c6c4:	18fb      	adds	r3, r7, r3
   2c6c6:	881b      	ldrh	r3, [r3, #0]
   2c6c8:	3319      	adds	r3, #25
   2c6ca:	001a      	movs	r2, r3
   2c6cc:	4b91      	ldr	r3, [pc, #580]	; (2c914 <dir_register+0x34c>)
   2c6ce:	210d      	movs	r1, #13
   2c6d0:	0010      	movs	r0, r2
   2c6d2:	4798      	blx	r3
   2c6d4:	0003      	movs	r3, r0
   2c6d6:	001a      	movs	r2, r3
   2c6d8:	232a      	movs	r3, #42	; 0x2a
   2c6da:	18fb      	adds	r3, r7, r3
   2c6dc:	801a      	strh	r2, [r3, #0]
   2c6de:	e003      	b.n	2c6e8 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2c6e0:	232a      	movs	r3, #42	; 0x2a
   2c6e2:	18fb      	adds	r3, r7, r3
   2c6e4:	2201      	movs	r2, #1
   2c6e6:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2c6e8:	232f      	movs	r3, #47	; 0x2f
   2c6ea:	18fc      	adds	r4, r7, r3
   2c6ec:	687b      	ldr	r3, [r7, #4]
   2c6ee:	2100      	movs	r1, #0
   2c6f0:	0018      	movs	r0, r3
   2c6f2:	4b89      	ldr	r3, [pc, #548]	; (2c918 <dir_register+0x350>)
   2c6f4:	4798      	blx	r3
   2c6f6:	0003      	movs	r3, r0
   2c6f8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c6fa:	232f      	movs	r3, #47	; 0x2f
   2c6fc:	18fb      	adds	r3, r7, r3
   2c6fe:	781b      	ldrb	r3, [r3, #0]
   2c700:	2b00      	cmp	r3, #0
   2c702:	d003      	beq.n	2c70c <dir_register+0x144>
   2c704:	232f      	movs	r3, #47	; 0x2f
   2c706:	18fb      	adds	r3, r7, r3
   2c708:	781b      	ldrb	r3, [r3, #0]
   2c70a:	e0f9      	b.n	2c900 <dir_register+0x338>
	n = is = 0;
   2c70c:	2328      	movs	r3, #40	; 0x28
   2c70e:	18fb      	adds	r3, r7, r3
   2c710:	2200      	movs	r2, #0
   2c712:	801a      	strh	r2, [r3, #0]
   2c714:	232c      	movs	r3, #44	; 0x2c
   2c716:	18fb      	adds	r3, r7, r3
   2c718:	2228      	movs	r2, #40	; 0x28
   2c71a:	18ba      	adds	r2, r7, r2
   2c71c:	8812      	ldrh	r2, [r2, #0]
   2c71e:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2c720:	687b      	ldr	r3, [r7, #4]
   2c722:	681a      	ldr	r2, [r3, #0]
   2c724:	687b      	ldr	r3, [r7, #4]
   2c726:	691b      	ldr	r3, [r3, #16]
   2c728:	212f      	movs	r1, #47	; 0x2f
   2c72a:	187c      	adds	r4, r7, r1
   2c72c:	0019      	movs	r1, r3
   2c72e:	0010      	movs	r0, r2
   2c730:	4b7a      	ldr	r3, [pc, #488]	; (2c91c <dir_register+0x354>)
   2c732:	4798      	blx	r3
   2c734:	0003      	movs	r3, r0
   2c736:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c738:	232f      	movs	r3, #47	; 0x2f
   2c73a:	18fb      	adds	r3, r7, r3
   2c73c:	781b      	ldrb	r3, [r3, #0]
   2c73e:	2b00      	cmp	r3, #0
   2c740:	d13c      	bne.n	2c7bc <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2c742:	687b      	ldr	r3, [r7, #4]
   2c744:	695a      	ldr	r2, [r3, #20]
   2c746:	231f      	movs	r3, #31
   2c748:	18fb      	adds	r3, r7, r3
   2c74a:	7812      	ldrb	r2, [r2, #0]
   2c74c:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2c74e:	231f      	movs	r3, #31
   2c750:	18fb      	adds	r3, r7, r3
   2c752:	781b      	ldrb	r3, [r3, #0]
   2c754:	2be5      	cmp	r3, #229	; 0xe5
   2c756:	d004      	beq.n	2c762 <dir_register+0x19a>
   2c758:	231f      	movs	r3, #31
   2c75a:	18fb      	adds	r3, r7, r3
   2c75c:	781b      	ldrb	r3, [r3, #0]
   2c75e:	2b00      	cmp	r3, #0
   2c760:	d119      	bne.n	2c796 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2c762:	232c      	movs	r3, #44	; 0x2c
   2c764:	18fb      	adds	r3, r7, r3
   2c766:	881b      	ldrh	r3, [r3, #0]
   2c768:	2b00      	cmp	r3, #0
   2c76a:	d104      	bne.n	2c776 <dir_register+0x1ae>
   2c76c:	2328      	movs	r3, #40	; 0x28
   2c76e:	18fb      	adds	r3, r7, r3
   2c770:	687a      	ldr	r2, [r7, #4]
   2c772:	88d2      	ldrh	r2, [r2, #6]
   2c774:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2c776:	232c      	movs	r3, #44	; 0x2c
   2c778:	18fb      	adds	r3, r7, r3
   2c77a:	222c      	movs	r2, #44	; 0x2c
   2c77c:	18ba      	adds	r2, r7, r2
   2c77e:	8812      	ldrh	r2, [r2, #0]
   2c780:	3201      	adds	r2, #1
   2c782:	801a      	strh	r2, [r3, #0]
   2c784:	232c      	movs	r3, #44	; 0x2c
   2c786:	18fa      	adds	r2, r7, r3
   2c788:	232a      	movs	r3, #42	; 0x2a
   2c78a:	18fb      	adds	r3, r7, r3
   2c78c:	8812      	ldrh	r2, [r2, #0]
   2c78e:	881b      	ldrh	r3, [r3, #0]
   2c790:	429a      	cmp	r2, r3
   2c792:	d104      	bne.n	2c79e <dir_register+0x1d6>
   2c794:	e013      	b.n	2c7be <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2c796:	232c      	movs	r3, #44	; 0x2c
   2c798:	18fb      	adds	r3, r7, r3
   2c79a:	2200      	movs	r2, #0
   2c79c:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2c79e:	232f      	movs	r3, #47	; 0x2f
   2c7a0:	18fc      	adds	r4, r7, r3
   2c7a2:	687b      	ldr	r3, [r7, #4]
   2c7a4:	2101      	movs	r1, #1
   2c7a6:	0018      	movs	r0, r3
   2c7a8:	4b5d      	ldr	r3, [pc, #372]	; (2c920 <dir_register+0x358>)
   2c7aa:	4798      	blx	r3
   2c7ac:	0003      	movs	r3, r0
   2c7ae:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c7b0:	232f      	movs	r3, #47	; 0x2f
   2c7b2:	18fb      	adds	r3, r7, r3
   2c7b4:	781b      	ldrb	r3, [r3, #0]
   2c7b6:	2b00      	cmp	r3, #0
   2c7b8:	d0b2      	beq.n	2c720 <dir_register+0x158>
   2c7ba:	e000      	b.n	2c7be <dir_register+0x1f6>
		if (res != FR_OK) break;
   2c7bc:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2c7be:	232f      	movs	r3, #47	; 0x2f
   2c7c0:	18fb      	adds	r3, r7, r3
   2c7c2:	781b      	ldrb	r3, [r3, #0]
   2c7c4:	2b00      	cmp	r3, #0
   2c7c6:	d163      	bne.n	2c890 <dir_register+0x2c8>
   2c7c8:	232a      	movs	r3, #42	; 0x2a
   2c7ca:	18fb      	adds	r3, r7, r3
   2c7cc:	881b      	ldrh	r3, [r3, #0]
   2c7ce:	2b01      	cmp	r3, #1
   2c7d0:	d95e      	bls.n	2c890 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2c7d2:	232f      	movs	r3, #47	; 0x2f
   2c7d4:	18fc      	adds	r4, r7, r3
   2c7d6:	2328      	movs	r3, #40	; 0x28
   2c7d8:	18fb      	adds	r3, r7, r3
   2c7da:	881a      	ldrh	r2, [r3, #0]
   2c7dc:	687b      	ldr	r3, [r7, #4]
   2c7de:	0011      	movs	r1, r2
   2c7e0:	0018      	movs	r0, r3
   2c7e2:	4b4d      	ldr	r3, [pc, #308]	; (2c918 <dir_register+0x350>)
   2c7e4:	4798      	blx	r3
   2c7e6:	0003      	movs	r3, r0
   2c7e8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2c7ea:	232f      	movs	r3, #47	; 0x2f
   2c7ec:	18fb      	adds	r3, r7, r3
   2c7ee:	781b      	ldrb	r3, [r3, #0]
   2c7f0:	2b00      	cmp	r3, #0
   2c7f2:	d14d      	bne.n	2c890 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2c7f4:	687b      	ldr	r3, [r7, #4]
   2c7f6:	699b      	ldr	r3, [r3, #24]
   2c7f8:	221e      	movs	r2, #30
   2c7fa:	18bc      	adds	r4, r7, r2
   2c7fc:	0018      	movs	r0, r3
   2c7fe:	4b49      	ldr	r3, [pc, #292]	; (2c924 <dir_register+0x35c>)
   2c800:	4798      	blx	r3
   2c802:	0003      	movs	r3, r0
   2c804:	7023      	strb	r3, [r4, #0]
			ne--;
   2c806:	232a      	movs	r3, #42	; 0x2a
   2c808:	18fb      	adds	r3, r7, r3
   2c80a:	881a      	ldrh	r2, [r3, #0]
   2c80c:	232a      	movs	r3, #42	; 0x2a
   2c80e:	18fb      	adds	r3, r7, r3
   2c810:	3a01      	subs	r2, #1
   2c812:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2c814:	687b      	ldr	r3, [r7, #4]
   2c816:	681a      	ldr	r2, [r3, #0]
   2c818:	687b      	ldr	r3, [r7, #4]
   2c81a:	691b      	ldr	r3, [r3, #16]
   2c81c:	212f      	movs	r1, #47	; 0x2f
   2c81e:	187c      	adds	r4, r7, r1
   2c820:	0019      	movs	r1, r3
   2c822:	0010      	movs	r0, r2
   2c824:	4b3d      	ldr	r3, [pc, #244]	; (2c91c <dir_register+0x354>)
   2c826:	4798      	blx	r3
   2c828:	0003      	movs	r3, r0
   2c82a:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2c82c:	232f      	movs	r3, #47	; 0x2f
   2c82e:	18fb      	adds	r3, r7, r3
   2c830:	781b      	ldrb	r3, [r3, #0]
   2c832:	2b00      	cmp	r3, #0
   2c834:	d12b      	bne.n	2c88e <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2c836:	687b      	ldr	r3, [r7, #4]
   2c838:	69d8      	ldr	r0, [r3, #28]
   2c83a:	687b      	ldr	r3, [r7, #4]
   2c83c:	6959      	ldr	r1, [r3, #20]
   2c83e:	232a      	movs	r3, #42	; 0x2a
   2c840:	18fb      	adds	r3, r7, r3
   2c842:	881b      	ldrh	r3, [r3, #0]
   2c844:	b2da      	uxtb	r2, r3
   2c846:	231e      	movs	r3, #30
   2c848:	18fb      	adds	r3, r7, r3
   2c84a:	781b      	ldrb	r3, [r3, #0]
   2c84c:	4c36      	ldr	r4, [pc, #216]	; (2c928 <dir_register+0x360>)
   2c84e:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2c850:	687b      	ldr	r3, [r7, #4]
   2c852:	681b      	ldr	r3, [r3, #0]
   2c854:	2201      	movs	r2, #1
   2c856:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2c858:	232f      	movs	r3, #47	; 0x2f
   2c85a:	18fc      	adds	r4, r7, r3
   2c85c:	687b      	ldr	r3, [r7, #4]
   2c85e:	2100      	movs	r1, #0
   2c860:	0018      	movs	r0, r3
   2c862:	4b2f      	ldr	r3, [pc, #188]	; (2c920 <dir_register+0x358>)
   2c864:	4798      	blx	r3
   2c866:	0003      	movs	r3, r0
   2c868:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2c86a:	232f      	movs	r3, #47	; 0x2f
   2c86c:	18fb      	adds	r3, r7, r3
   2c86e:	781b      	ldrb	r3, [r3, #0]
   2c870:	2b00      	cmp	r3, #0
   2c872:	d10d      	bne.n	2c890 <dir_register+0x2c8>
   2c874:	232a      	movs	r3, #42	; 0x2a
   2c876:	18fb      	adds	r3, r7, r3
   2c878:	222a      	movs	r2, #42	; 0x2a
   2c87a:	18ba      	adds	r2, r7, r2
   2c87c:	8812      	ldrh	r2, [r2, #0]
   2c87e:	3a01      	subs	r2, #1
   2c880:	801a      	strh	r2, [r3, #0]
   2c882:	232a      	movs	r3, #42	; 0x2a
   2c884:	18fb      	adds	r3, r7, r3
   2c886:	881b      	ldrh	r3, [r3, #0]
   2c888:	2b00      	cmp	r3, #0
   2c88a:	d1c3      	bne.n	2c814 <dir_register+0x24c>
   2c88c:	e000      	b.n	2c890 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2c88e:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2c890:	232f      	movs	r3, #47	; 0x2f
   2c892:	18fb      	adds	r3, r7, r3
   2c894:	781b      	ldrb	r3, [r3, #0]
   2c896:	2b00      	cmp	r3, #0
   2c898:	d12f      	bne.n	2c8fa <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2c89a:	687b      	ldr	r3, [r7, #4]
   2c89c:	681a      	ldr	r2, [r3, #0]
   2c89e:	687b      	ldr	r3, [r7, #4]
   2c8a0:	691b      	ldr	r3, [r3, #16]
   2c8a2:	212f      	movs	r1, #47	; 0x2f
   2c8a4:	187c      	adds	r4, r7, r1
   2c8a6:	0019      	movs	r1, r3
   2c8a8:	0010      	movs	r0, r2
   2c8aa:	4b1c      	ldr	r3, [pc, #112]	; (2c91c <dir_register+0x354>)
   2c8ac:	4798      	blx	r3
   2c8ae:	0003      	movs	r3, r0
   2c8b0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2c8b2:	232f      	movs	r3, #47	; 0x2f
   2c8b4:	18fb      	adds	r3, r7, r3
   2c8b6:	781b      	ldrb	r3, [r3, #0]
   2c8b8:	2b00      	cmp	r3, #0
   2c8ba:	d11e      	bne.n	2c8fa <dir_register+0x332>
			dir = dj->dir;
   2c8bc:	687b      	ldr	r3, [r7, #4]
   2c8be:	695b      	ldr	r3, [r3, #20]
   2c8c0:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2c8c2:	69bb      	ldr	r3, [r7, #24]
   2c8c4:	2220      	movs	r2, #32
   2c8c6:	2100      	movs	r1, #0
   2c8c8:	0018      	movs	r0, r3
   2c8ca:	4b18      	ldr	r3, [pc, #96]	; (2c92c <dir_register+0x364>)
   2c8cc:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2c8ce:	687b      	ldr	r3, [r7, #4]
   2c8d0:	6999      	ldr	r1, [r3, #24]
   2c8d2:	69bb      	ldr	r3, [r7, #24]
   2c8d4:	220b      	movs	r2, #11
   2c8d6:	0018      	movs	r0, r3
   2c8d8:	4b0b      	ldr	r3, [pc, #44]	; (2c908 <dir_register+0x340>)
   2c8da:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2c8dc:	69bb      	ldr	r3, [r7, #24]
   2c8de:	330c      	adds	r3, #12
   2c8e0:	001a      	movs	r2, r3
   2c8e2:	687b      	ldr	r3, [r7, #4]
   2c8e4:	699b      	ldr	r3, [r3, #24]
   2c8e6:	330b      	adds	r3, #11
   2c8e8:	781b      	ldrb	r3, [r3, #0]
   2c8ea:	2118      	movs	r1, #24
   2c8ec:	400b      	ands	r3, r1
   2c8ee:	b2db      	uxtb	r3, r3
   2c8f0:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2c8f2:	687b      	ldr	r3, [r7, #4]
   2c8f4:	681b      	ldr	r3, [r3, #0]
   2c8f6:	2201      	movs	r2, #1
   2c8f8:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2c8fa:	232f      	movs	r3, #47	; 0x2f
   2c8fc:	18fb      	adds	r3, r7, r3
   2c8fe:	781b      	ldrb	r3, [r3, #0]
}
   2c900:	0018      	movs	r0, r3
   2c902:	46bd      	mov	sp, r7
   2c904:	b00d      	add	sp, #52	; 0x34
   2c906:	bd90      	pop	{r4, r7, pc}
   2c908:	0002b421 	.word	0x0002b421
   2c90c:	0002c27d 	.word	0x0002c27d
   2c910:	0002c3cd 	.word	0x0002c3cd
   2c914:	00032819 	.word	0x00032819
   2c918:	0002bd49 	.word	0x0002bd49
   2c91c:	0002b505 	.word	0x0002b505
   2c920:	0002be79 	.word	0x0002be79
   2c924:	0002c37d 	.word	0x0002c37d
   2c928:	0002c16d 	.word	0x0002c16d
   2c92c:	0002b459 	.word	0x0002b459

0002c930 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2c930:	b590      	push	{r4, r7, lr}
   2c932:	b08b      	sub	sp, #44	; 0x2c
   2c934:	af00      	add	r7, sp, #0
   2c936:	6078      	str	r0, [r7, #4]
   2c938:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2c93a:	683b      	ldr	r3, [r7, #0]
   2c93c:	681b      	ldr	r3, [r3, #0]
   2c93e:	613b      	str	r3, [r7, #16]
   2c940:	e002      	b.n	2c948 <create_name+0x18>
   2c942:	693b      	ldr	r3, [r7, #16]
   2c944:	3301      	adds	r3, #1
   2c946:	613b      	str	r3, [r7, #16]
   2c948:	693b      	ldr	r3, [r7, #16]
   2c94a:	781b      	ldrb	r3, [r3, #0]
   2c94c:	2b2f      	cmp	r3, #47	; 0x2f
   2c94e:	d0f8      	beq.n	2c942 <create_name+0x12>
   2c950:	693b      	ldr	r3, [r7, #16]
   2c952:	781b      	ldrb	r3, [r3, #0]
   2c954:	2b5c      	cmp	r3, #92	; 0x5c
   2c956:	d0f4      	beq.n	2c942 <create_name+0x12>
	lfn = dj->lfn;
   2c958:	687b      	ldr	r3, [r7, #4]
   2c95a:	69db      	ldr	r3, [r3, #28]
   2c95c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2c95e:	2300      	movs	r3, #0
   2c960:	617b      	str	r3, [r7, #20]
   2c962:	697b      	ldr	r3, [r7, #20]
   2c964:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2c966:	69bb      	ldr	r3, [r7, #24]
   2c968:	1c5a      	adds	r2, r3, #1
   2c96a:	61ba      	str	r2, [r7, #24]
   2c96c:	693a      	ldr	r2, [r7, #16]
   2c96e:	18d3      	adds	r3, r2, r3
   2c970:	781a      	ldrb	r2, [r3, #0]
   2c972:	2324      	movs	r3, #36	; 0x24
   2c974:	18fb      	adds	r3, r7, r3
   2c976:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2c978:	2324      	movs	r3, #36	; 0x24
   2c97a:	18fb      	adds	r3, r7, r3
   2c97c:	881b      	ldrh	r3, [r3, #0]
   2c97e:	2b1f      	cmp	r3, #31
   2c980:	d944      	bls.n	2ca0c <create_name+0xdc>
   2c982:	2324      	movs	r3, #36	; 0x24
   2c984:	18fb      	adds	r3, r7, r3
   2c986:	881b      	ldrh	r3, [r3, #0]
   2c988:	2b2f      	cmp	r3, #47	; 0x2f
   2c98a:	d03f      	beq.n	2ca0c <create_name+0xdc>
   2c98c:	2324      	movs	r3, #36	; 0x24
   2c98e:	18fb      	adds	r3, r7, r3
   2c990:	881b      	ldrh	r3, [r3, #0]
   2c992:	2b5c      	cmp	r3, #92	; 0x5c
   2c994:	d03a      	beq.n	2ca0c <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2c996:	697b      	ldr	r3, [r7, #20]
   2c998:	2bfe      	cmp	r3, #254	; 0xfe
   2c99a:	d901      	bls.n	2c9a0 <create_name+0x70>
			return FR_INVALID_NAME;
   2c99c:	2306      	movs	r3, #6
   2c99e:	e1e7      	b.n	2cd70 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2c9a0:	2324      	movs	r3, #36	; 0x24
   2c9a2:	18fb      	adds	r3, r7, r3
   2c9a4:	2224      	movs	r2, #36	; 0x24
   2c9a6:	18ba      	adds	r2, r7, r2
   2c9a8:	8812      	ldrh	r2, [r2, #0]
   2c9aa:	21ff      	movs	r1, #255	; 0xff
   2c9ac:	400a      	ands	r2, r1
   2c9ae:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2c9b0:	2324      	movs	r3, #36	; 0x24
   2c9b2:	18fc      	adds	r4, r7, r3
   2c9b4:	2324      	movs	r3, #36	; 0x24
   2c9b6:	18fb      	adds	r3, r7, r3
   2c9b8:	881b      	ldrh	r3, [r3, #0]
   2c9ba:	2101      	movs	r1, #1
   2c9bc:	0018      	movs	r0, r3
   2c9be:	4bba      	ldr	r3, [pc, #744]	; (2cca8 <create_name+0x378>)
   2c9c0:	4798      	blx	r3
   2c9c2:	0003      	movs	r3, r0
   2c9c4:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2c9c6:	2324      	movs	r3, #36	; 0x24
   2c9c8:	18fb      	adds	r3, r7, r3
   2c9ca:	881b      	ldrh	r3, [r3, #0]
   2c9cc:	2b00      	cmp	r3, #0
   2c9ce:	d101      	bne.n	2c9d4 <create_name+0xa4>
   2c9d0:	2306      	movs	r3, #6
   2c9d2:	e1cd      	b.n	2cd70 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2c9d4:	2324      	movs	r3, #36	; 0x24
   2c9d6:	18fb      	adds	r3, r7, r3
   2c9d8:	881b      	ldrh	r3, [r3, #0]
   2c9da:	2b7f      	cmp	r3, #127	; 0x7f
   2c9dc:	d80b      	bhi.n	2c9f6 <create_name+0xc6>
   2c9de:	2324      	movs	r3, #36	; 0x24
   2c9e0:	18fb      	adds	r3, r7, r3
   2c9e2:	881a      	ldrh	r2, [r3, #0]
   2c9e4:	4bb1      	ldr	r3, [pc, #708]	; (2ccac <create_name+0x37c>)
   2c9e6:	0011      	movs	r1, r2
   2c9e8:	0018      	movs	r0, r3
   2c9ea:	4bb1      	ldr	r3, [pc, #708]	; (2ccb0 <create_name+0x380>)
   2c9ec:	4798      	blx	r3
   2c9ee:	1e03      	subs	r3, r0, #0
   2c9f0:	d001      	beq.n	2c9f6 <create_name+0xc6>
			return FR_INVALID_NAME;
   2c9f2:	2306      	movs	r3, #6
   2c9f4:	e1bc      	b.n	2cd70 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2c9f6:	697b      	ldr	r3, [r7, #20]
   2c9f8:	1c5a      	adds	r2, r3, #1
   2c9fa:	617a      	str	r2, [r7, #20]
   2c9fc:	005b      	lsls	r3, r3, #1
   2c9fe:	68fa      	ldr	r2, [r7, #12]
   2ca00:	18d3      	adds	r3, r2, r3
   2ca02:	2224      	movs	r2, #36	; 0x24
   2ca04:	18ba      	adds	r2, r7, r2
   2ca06:	8812      	ldrh	r2, [r2, #0]
   2ca08:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2ca0a:	e7ac      	b.n	2c966 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2ca0c:	693a      	ldr	r2, [r7, #16]
   2ca0e:	69bb      	ldr	r3, [r7, #24]
   2ca10:	18d2      	adds	r2, r2, r3
   2ca12:	683b      	ldr	r3, [r7, #0]
   2ca14:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2ca16:	2324      	movs	r3, #36	; 0x24
   2ca18:	18fb      	adds	r3, r7, r3
   2ca1a:	881b      	ldrh	r3, [r3, #0]
   2ca1c:	2b1f      	cmp	r3, #31
   2ca1e:	d801      	bhi.n	2ca24 <create_name+0xf4>
   2ca20:	2204      	movs	r2, #4
   2ca22:	e000      	b.n	2ca26 <create_name+0xf6>
   2ca24:	2200      	movs	r2, #0
   2ca26:	2326      	movs	r3, #38	; 0x26
   2ca28:	18fb      	adds	r3, r7, r3
   2ca2a:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2ca2c:	e017      	b.n	2ca5e <create_name+0x12e>
		w = lfn[di-1];
   2ca2e:	697b      	ldr	r3, [r7, #20]
   2ca30:	4aa0      	ldr	r2, [pc, #640]	; (2ccb4 <create_name+0x384>)
   2ca32:	4694      	mov	ip, r2
   2ca34:	4463      	add	r3, ip
   2ca36:	005b      	lsls	r3, r3, #1
   2ca38:	68fa      	ldr	r2, [r7, #12]
   2ca3a:	18d2      	adds	r2, r2, r3
   2ca3c:	2324      	movs	r3, #36	; 0x24
   2ca3e:	18fb      	adds	r3, r7, r3
   2ca40:	8812      	ldrh	r2, [r2, #0]
   2ca42:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2ca44:	2324      	movs	r3, #36	; 0x24
   2ca46:	18fb      	adds	r3, r7, r3
   2ca48:	881b      	ldrh	r3, [r3, #0]
   2ca4a:	2b20      	cmp	r3, #32
   2ca4c:	d004      	beq.n	2ca58 <create_name+0x128>
   2ca4e:	2324      	movs	r3, #36	; 0x24
   2ca50:	18fb      	adds	r3, r7, r3
   2ca52:	881b      	ldrh	r3, [r3, #0]
   2ca54:	2b2e      	cmp	r3, #46	; 0x2e
   2ca56:	d106      	bne.n	2ca66 <create_name+0x136>
		di--;
   2ca58:	697b      	ldr	r3, [r7, #20]
   2ca5a:	3b01      	subs	r3, #1
   2ca5c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2ca5e:	697b      	ldr	r3, [r7, #20]
   2ca60:	2b00      	cmp	r3, #0
   2ca62:	d1e4      	bne.n	2ca2e <create_name+0xfe>
   2ca64:	e000      	b.n	2ca68 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2ca66:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2ca68:	697b      	ldr	r3, [r7, #20]
   2ca6a:	2b00      	cmp	r3, #0
   2ca6c:	d101      	bne.n	2ca72 <create_name+0x142>
   2ca6e:	2306      	movs	r3, #6
   2ca70:	e17e      	b.n	2cd70 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2ca72:	697b      	ldr	r3, [r7, #20]
   2ca74:	005b      	lsls	r3, r3, #1
   2ca76:	68fa      	ldr	r2, [r7, #12]
   2ca78:	18d3      	adds	r3, r2, r3
   2ca7a:	2200      	movs	r2, #0
   2ca7c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2ca7e:	687b      	ldr	r3, [r7, #4]
   2ca80:	699b      	ldr	r3, [r3, #24]
   2ca82:	220b      	movs	r2, #11
   2ca84:	2120      	movs	r1, #32
   2ca86:	0018      	movs	r0, r3
   2ca88:	4b8b      	ldr	r3, [pc, #556]	; (2ccb8 <create_name+0x388>)
   2ca8a:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2ca8c:	2300      	movs	r3, #0
   2ca8e:	61bb      	str	r3, [r7, #24]
   2ca90:	e002      	b.n	2ca98 <create_name+0x168>
   2ca92:	69bb      	ldr	r3, [r7, #24]
   2ca94:	3301      	adds	r3, #1
   2ca96:	61bb      	str	r3, [r7, #24]
   2ca98:	69bb      	ldr	r3, [r7, #24]
   2ca9a:	005b      	lsls	r3, r3, #1
   2ca9c:	68fa      	ldr	r2, [r7, #12]
   2ca9e:	18d3      	adds	r3, r2, r3
   2caa0:	881b      	ldrh	r3, [r3, #0]
   2caa2:	2b20      	cmp	r3, #32
   2caa4:	d0f5      	beq.n	2ca92 <create_name+0x162>
   2caa6:	69bb      	ldr	r3, [r7, #24]
   2caa8:	005b      	lsls	r3, r3, #1
   2caaa:	68fa      	ldr	r2, [r7, #12]
   2caac:	18d3      	adds	r3, r2, r3
   2caae:	881b      	ldrh	r3, [r3, #0]
   2cab0:	2b2e      	cmp	r3, #46	; 0x2e
   2cab2:	d0ee      	beq.n	2ca92 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2cab4:	69bb      	ldr	r3, [r7, #24]
   2cab6:	2b00      	cmp	r3, #0
   2cab8:	d00b      	beq.n	2cad2 <create_name+0x1a2>
   2caba:	2326      	movs	r3, #38	; 0x26
   2cabc:	18fb      	adds	r3, r7, r3
   2cabe:	2226      	movs	r2, #38	; 0x26
   2cac0:	18ba      	adds	r2, r7, r2
   2cac2:	7812      	ldrb	r2, [r2, #0]
   2cac4:	2103      	movs	r1, #3
   2cac6:	430a      	orrs	r2, r1
   2cac8:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2caca:	e002      	b.n	2cad2 <create_name+0x1a2>
   2cacc:	697b      	ldr	r3, [r7, #20]
   2cace:	3b01      	subs	r3, #1
   2cad0:	617b      	str	r3, [r7, #20]
   2cad2:	697b      	ldr	r3, [r7, #20]
   2cad4:	2b00      	cmp	r3, #0
   2cad6:	d009      	beq.n	2caec <create_name+0x1bc>
   2cad8:	697b      	ldr	r3, [r7, #20]
   2cada:	4a76      	ldr	r2, [pc, #472]	; (2ccb4 <create_name+0x384>)
   2cadc:	4694      	mov	ip, r2
   2cade:	4463      	add	r3, ip
   2cae0:	005b      	lsls	r3, r3, #1
   2cae2:	68fa      	ldr	r2, [r7, #12]
   2cae4:	18d3      	adds	r3, r2, r3
   2cae6:	881b      	ldrh	r3, [r3, #0]
   2cae8:	2b2e      	cmp	r3, #46	; 0x2e
   2caea:	d1ef      	bne.n	2cacc <create_name+0x19c>

	b = i = 0; ni = 8;
   2caec:	2300      	movs	r3, #0
   2caee:	623b      	str	r3, [r7, #32]
   2caf0:	2327      	movs	r3, #39	; 0x27
   2caf2:	18fb      	adds	r3, r7, r3
   2caf4:	2200      	movs	r2, #0
   2caf6:	701a      	strb	r2, [r3, #0]
   2caf8:	2308      	movs	r3, #8
   2cafa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2cafc:	69bb      	ldr	r3, [r7, #24]
   2cafe:	1c5a      	adds	r2, r3, #1
   2cb00:	61ba      	str	r2, [r7, #24]
   2cb02:	005b      	lsls	r3, r3, #1
   2cb04:	68fa      	ldr	r2, [r7, #12]
   2cb06:	18d2      	adds	r2, r2, r3
   2cb08:	2324      	movs	r3, #36	; 0x24
   2cb0a:	18fb      	adds	r3, r7, r3
   2cb0c:	8812      	ldrh	r2, [r2, #0]
   2cb0e:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2cb10:	2324      	movs	r3, #36	; 0x24
   2cb12:	18fb      	adds	r3, r7, r3
   2cb14:	881b      	ldrh	r3, [r3, #0]
   2cb16:	2b00      	cmp	r3, #0
   2cb18:	d100      	bne.n	2cb1c <create_name+0x1ec>
   2cb1a:	e0c3      	b.n	2cca4 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2cb1c:	2324      	movs	r3, #36	; 0x24
   2cb1e:	18fb      	adds	r3, r7, r3
   2cb20:	881b      	ldrh	r3, [r3, #0]
   2cb22:	2b20      	cmp	r3, #32
   2cb24:	d008      	beq.n	2cb38 <create_name+0x208>
   2cb26:	2324      	movs	r3, #36	; 0x24
   2cb28:	18fb      	adds	r3, r7, r3
   2cb2a:	881b      	ldrh	r3, [r3, #0]
   2cb2c:	2b2e      	cmp	r3, #46	; 0x2e
   2cb2e:	d10c      	bne.n	2cb4a <create_name+0x21a>
   2cb30:	69ba      	ldr	r2, [r7, #24]
   2cb32:	697b      	ldr	r3, [r7, #20]
   2cb34:	429a      	cmp	r2, r3
   2cb36:	d008      	beq.n	2cb4a <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2cb38:	2326      	movs	r3, #38	; 0x26
   2cb3a:	18fb      	adds	r3, r7, r3
   2cb3c:	2226      	movs	r2, #38	; 0x26
   2cb3e:	18ba      	adds	r2, r7, r2
   2cb40:	7812      	ldrb	r2, [r2, #0]
   2cb42:	2103      	movs	r1, #3
   2cb44:	430a      	orrs	r2, r1
   2cb46:	701a      	strb	r2, [r3, #0]
   2cb48:	e0ab      	b.n	2cca2 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2cb4a:	6a3a      	ldr	r2, [r7, #32]
   2cb4c:	69fb      	ldr	r3, [r7, #28]
   2cb4e:	429a      	cmp	r2, r3
   2cb50:	d203      	bcs.n	2cb5a <create_name+0x22a>
   2cb52:	69ba      	ldr	r2, [r7, #24]
   2cb54:	697b      	ldr	r3, [r7, #20]
   2cb56:	429a      	cmp	r2, r3
   2cb58:	d12a      	bne.n	2cbb0 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2cb5a:	69fb      	ldr	r3, [r7, #28]
   2cb5c:	2b0b      	cmp	r3, #11
   2cb5e:	d108      	bne.n	2cb72 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2cb60:	2326      	movs	r3, #38	; 0x26
   2cb62:	18fb      	adds	r3, r7, r3
   2cb64:	2226      	movs	r2, #38	; 0x26
   2cb66:	18ba      	adds	r2, r7, r2
   2cb68:	7812      	ldrb	r2, [r2, #0]
   2cb6a:	2103      	movs	r1, #3
   2cb6c:	430a      	orrs	r2, r1
   2cb6e:	701a      	strb	r2, [r3, #0]
   2cb70:	e0a9      	b.n	2ccc6 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2cb72:	69ba      	ldr	r2, [r7, #24]
   2cb74:	697b      	ldr	r3, [r7, #20]
   2cb76:	429a      	cmp	r2, r3
   2cb78:	d007      	beq.n	2cb8a <create_name+0x25a>
   2cb7a:	2326      	movs	r3, #38	; 0x26
   2cb7c:	18fb      	adds	r3, r7, r3
   2cb7e:	2226      	movs	r2, #38	; 0x26
   2cb80:	18ba      	adds	r2, r7, r2
   2cb82:	7812      	ldrb	r2, [r2, #0]
   2cb84:	2103      	movs	r1, #3
   2cb86:	430a      	orrs	r2, r1
   2cb88:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2cb8a:	69ba      	ldr	r2, [r7, #24]
   2cb8c:	697b      	ldr	r3, [r7, #20]
   2cb8e:	429a      	cmp	r2, r3
   2cb90:	d900      	bls.n	2cb94 <create_name+0x264>
   2cb92:	e097      	b.n	2ccc4 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2cb94:	697b      	ldr	r3, [r7, #20]
   2cb96:	61bb      	str	r3, [r7, #24]
   2cb98:	2308      	movs	r3, #8
   2cb9a:	623b      	str	r3, [r7, #32]
   2cb9c:	230b      	movs	r3, #11
   2cb9e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2cba0:	2327      	movs	r3, #39	; 0x27
   2cba2:	18fb      	adds	r3, r7, r3
   2cba4:	2227      	movs	r2, #39	; 0x27
   2cba6:	18ba      	adds	r2, r7, r2
   2cba8:	7812      	ldrb	r2, [r2, #0]
   2cbaa:	0092      	lsls	r2, r2, #2
   2cbac:	701a      	strb	r2, [r3, #0]
   2cbae:	e078      	b.n	2cca2 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2cbb0:	2324      	movs	r3, #36	; 0x24
   2cbb2:	18fb      	adds	r3, r7, r3
   2cbb4:	881b      	ldrh	r3, [r3, #0]
   2cbb6:	2b7f      	cmp	r3, #127	; 0x7f
   2cbb8:	d920      	bls.n	2cbfc <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2cbba:	2324      	movs	r3, #36	; 0x24
   2cbbc:	18fc      	adds	r4, r7, r3
   2cbbe:	2324      	movs	r3, #36	; 0x24
   2cbc0:	18fb      	adds	r3, r7, r3
   2cbc2:	881b      	ldrh	r3, [r3, #0]
   2cbc4:	2100      	movs	r1, #0
   2cbc6:	0018      	movs	r0, r3
   2cbc8:	4b37      	ldr	r3, [pc, #220]	; (2cca8 <create_name+0x378>)
   2cbca:	4798      	blx	r3
   2cbcc:	0003      	movs	r3, r0
   2cbce:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2cbd0:	2324      	movs	r3, #36	; 0x24
   2cbd2:	18fb      	adds	r3, r7, r3
   2cbd4:	881b      	ldrh	r3, [r3, #0]
   2cbd6:	2b00      	cmp	r3, #0
   2cbd8:	d008      	beq.n	2cbec <create_name+0x2bc>
   2cbda:	2324      	movs	r3, #36	; 0x24
   2cbdc:	18fb      	adds	r3, r7, r3
   2cbde:	881b      	ldrh	r3, [r3, #0]
   2cbe0:	3b80      	subs	r3, #128	; 0x80
   2cbe2:	4a36      	ldr	r2, [pc, #216]	; (2ccbc <create_name+0x38c>)
   2cbe4:	5cd2      	ldrb	r2, [r2, r3]
   2cbe6:	2324      	movs	r3, #36	; 0x24
   2cbe8:	18fb      	adds	r3, r7, r3
   2cbea:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2cbec:	2326      	movs	r3, #38	; 0x26
   2cbee:	18fb      	adds	r3, r7, r3
   2cbf0:	2226      	movs	r2, #38	; 0x26
   2cbf2:	18ba      	adds	r2, r7, r2
   2cbf4:	7812      	ldrb	r2, [r2, #0]
   2cbf6:	2102      	movs	r1, #2
   2cbf8:	430a      	orrs	r2, r1
   2cbfa:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2cbfc:	2324      	movs	r3, #36	; 0x24
   2cbfe:	18fb      	adds	r3, r7, r3
   2cc00:	881b      	ldrh	r3, [r3, #0]
   2cc02:	2b00      	cmp	r3, #0
   2cc04:	d009      	beq.n	2cc1a <create_name+0x2ea>
   2cc06:	2324      	movs	r3, #36	; 0x24
   2cc08:	18fb      	adds	r3, r7, r3
   2cc0a:	881a      	ldrh	r2, [r3, #0]
   2cc0c:	4b2c      	ldr	r3, [pc, #176]	; (2ccc0 <create_name+0x390>)
   2cc0e:	0011      	movs	r1, r2
   2cc10:	0018      	movs	r0, r3
   2cc12:	4b27      	ldr	r3, [pc, #156]	; (2ccb0 <create_name+0x380>)
   2cc14:	4798      	blx	r3
   2cc16:	1e03      	subs	r3, r0, #0
   2cc18:	d00c      	beq.n	2cc34 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2cc1a:	2324      	movs	r3, #36	; 0x24
   2cc1c:	18fb      	adds	r3, r7, r3
   2cc1e:	225f      	movs	r2, #95	; 0x5f
   2cc20:	801a      	strh	r2, [r3, #0]
   2cc22:	2326      	movs	r3, #38	; 0x26
   2cc24:	18fb      	adds	r3, r7, r3
   2cc26:	2226      	movs	r2, #38	; 0x26
   2cc28:	18ba      	adds	r2, r7, r2
   2cc2a:	7812      	ldrb	r2, [r2, #0]
   2cc2c:	2103      	movs	r1, #3
   2cc2e:	430a      	orrs	r2, r1
   2cc30:	701a      	strb	r2, [r3, #0]
   2cc32:	e02b      	b.n	2cc8c <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2cc34:	2324      	movs	r3, #36	; 0x24
   2cc36:	18fb      	adds	r3, r7, r3
   2cc38:	881b      	ldrh	r3, [r3, #0]
   2cc3a:	2b40      	cmp	r3, #64	; 0x40
   2cc3c:	d90d      	bls.n	2cc5a <create_name+0x32a>
   2cc3e:	2324      	movs	r3, #36	; 0x24
   2cc40:	18fb      	adds	r3, r7, r3
   2cc42:	881b      	ldrh	r3, [r3, #0]
   2cc44:	2b5a      	cmp	r3, #90	; 0x5a
   2cc46:	d808      	bhi.n	2cc5a <create_name+0x32a>
					b |= 2;
   2cc48:	2327      	movs	r3, #39	; 0x27
   2cc4a:	18fb      	adds	r3, r7, r3
   2cc4c:	2227      	movs	r2, #39	; 0x27
   2cc4e:	18ba      	adds	r2, r7, r2
   2cc50:	7812      	ldrb	r2, [r2, #0]
   2cc52:	2102      	movs	r1, #2
   2cc54:	430a      	orrs	r2, r1
   2cc56:	701a      	strb	r2, [r3, #0]
   2cc58:	e018      	b.n	2cc8c <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2cc5a:	2324      	movs	r3, #36	; 0x24
   2cc5c:	18fb      	adds	r3, r7, r3
   2cc5e:	881b      	ldrh	r3, [r3, #0]
   2cc60:	2b60      	cmp	r3, #96	; 0x60
   2cc62:	d913      	bls.n	2cc8c <create_name+0x35c>
   2cc64:	2324      	movs	r3, #36	; 0x24
   2cc66:	18fb      	adds	r3, r7, r3
   2cc68:	881b      	ldrh	r3, [r3, #0]
   2cc6a:	2b7a      	cmp	r3, #122	; 0x7a
   2cc6c:	d80e      	bhi.n	2cc8c <create_name+0x35c>
						b |= 1; w -= 0x20;
   2cc6e:	2327      	movs	r3, #39	; 0x27
   2cc70:	18fb      	adds	r3, r7, r3
   2cc72:	2227      	movs	r2, #39	; 0x27
   2cc74:	18ba      	adds	r2, r7, r2
   2cc76:	7812      	ldrb	r2, [r2, #0]
   2cc78:	2101      	movs	r1, #1
   2cc7a:	430a      	orrs	r2, r1
   2cc7c:	701a      	strb	r2, [r3, #0]
   2cc7e:	2324      	movs	r3, #36	; 0x24
   2cc80:	18fb      	adds	r3, r7, r3
   2cc82:	2224      	movs	r2, #36	; 0x24
   2cc84:	18ba      	adds	r2, r7, r2
   2cc86:	8812      	ldrh	r2, [r2, #0]
   2cc88:	3a20      	subs	r2, #32
   2cc8a:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2cc8c:	687b      	ldr	r3, [r7, #4]
   2cc8e:	699a      	ldr	r2, [r3, #24]
   2cc90:	6a3b      	ldr	r3, [r7, #32]
   2cc92:	1c59      	adds	r1, r3, #1
   2cc94:	6239      	str	r1, [r7, #32]
   2cc96:	18d3      	adds	r3, r2, r3
   2cc98:	2224      	movs	r2, #36	; 0x24
   2cc9a:	18ba      	adds	r2, r7, r2
   2cc9c:	8812      	ldrh	r2, [r2, #0]
   2cc9e:	b2d2      	uxtb	r2, r2
   2cca0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2cca2:	e72b      	b.n	2cafc <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2cca4:	46c0      	nop			; (mov r8, r8)
   2cca6:	e00e      	b.n	2ccc6 <create_name+0x396>
   2cca8:	0002e069 	.word	0x0002e069
   2ccac:	000392c0 	.word	0x000392c0
   2ccb0:	0002b4d3 	.word	0x0002b4d3
   2ccb4:	7fffffff 	.word	0x7fffffff
   2ccb8:	0002b459 	.word	0x0002b459
   2ccbc:	00039308 	.word	0x00039308
   2ccc0:	000392cc 	.word	0x000392cc
			if (si > di) break;			/* No extension */
   2ccc4:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2ccc6:	687b      	ldr	r3, [r7, #4]
   2ccc8:	699b      	ldr	r3, [r3, #24]
   2ccca:	781b      	ldrb	r3, [r3, #0]
   2cccc:	2be5      	cmp	r3, #229	; 0xe5
   2ccce:	d103      	bne.n	2ccd8 <create_name+0x3a8>
   2ccd0:	687b      	ldr	r3, [r7, #4]
   2ccd2:	699b      	ldr	r3, [r3, #24]
   2ccd4:	2205      	movs	r2, #5
   2ccd6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2ccd8:	69fb      	ldr	r3, [r7, #28]
   2ccda:	2b08      	cmp	r3, #8
   2ccdc:	d106      	bne.n	2ccec <create_name+0x3bc>
   2ccde:	2327      	movs	r3, #39	; 0x27
   2cce0:	18fb      	adds	r3, r7, r3
   2cce2:	2227      	movs	r2, #39	; 0x27
   2cce4:	18ba      	adds	r2, r7, r2
   2cce6:	7812      	ldrb	r2, [r2, #0]
   2cce8:	0092      	lsls	r2, r2, #2
   2ccea:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2ccec:	2327      	movs	r3, #39	; 0x27
   2ccee:	18fb      	adds	r3, r7, r3
   2ccf0:	781b      	ldrb	r3, [r3, #0]
   2ccf2:	220c      	movs	r2, #12
   2ccf4:	4013      	ands	r3, r2
   2ccf6:	2b0c      	cmp	r3, #12
   2ccf8:	d006      	beq.n	2cd08 <create_name+0x3d8>
   2ccfa:	2327      	movs	r3, #39	; 0x27
   2ccfc:	18fb      	adds	r3, r7, r3
   2ccfe:	781b      	ldrb	r3, [r3, #0]
   2cd00:	2203      	movs	r2, #3
   2cd02:	4013      	ands	r3, r2
   2cd04:	2b03      	cmp	r3, #3
   2cd06:	d107      	bne.n	2cd18 <create_name+0x3e8>
		cf |= NS_LFN;
   2cd08:	2326      	movs	r3, #38	; 0x26
   2cd0a:	18fb      	adds	r3, r7, r3
   2cd0c:	2226      	movs	r2, #38	; 0x26
   2cd0e:	18ba      	adds	r2, r7, r2
   2cd10:	7812      	ldrb	r2, [r2, #0]
   2cd12:	2102      	movs	r1, #2
   2cd14:	430a      	orrs	r2, r1
   2cd16:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2cd18:	2326      	movs	r3, #38	; 0x26
   2cd1a:	18fb      	adds	r3, r7, r3
   2cd1c:	781b      	ldrb	r3, [r3, #0]
   2cd1e:	2202      	movs	r2, #2
   2cd20:	4013      	ands	r3, r2
   2cd22:	d11d      	bne.n	2cd60 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2cd24:	2327      	movs	r3, #39	; 0x27
   2cd26:	18fb      	adds	r3, r7, r3
   2cd28:	781b      	ldrb	r3, [r3, #0]
   2cd2a:	2203      	movs	r2, #3
   2cd2c:	4013      	ands	r3, r2
   2cd2e:	2b01      	cmp	r3, #1
   2cd30:	d107      	bne.n	2cd42 <create_name+0x412>
   2cd32:	2326      	movs	r3, #38	; 0x26
   2cd34:	18fb      	adds	r3, r7, r3
   2cd36:	2226      	movs	r2, #38	; 0x26
   2cd38:	18ba      	adds	r2, r7, r2
   2cd3a:	7812      	ldrb	r2, [r2, #0]
   2cd3c:	2110      	movs	r1, #16
   2cd3e:	430a      	orrs	r2, r1
   2cd40:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2cd42:	2327      	movs	r3, #39	; 0x27
   2cd44:	18fb      	adds	r3, r7, r3
   2cd46:	781b      	ldrb	r3, [r3, #0]
   2cd48:	220c      	movs	r2, #12
   2cd4a:	4013      	ands	r3, r2
   2cd4c:	2b04      	cmp	r3, #4
   2cd4e:	d107      	bne.n	2cd60 <create_name+0x430>
   2cd50:	2326      	movs	r3, #38	; 0x26
   2cd52:	18fb      	adds	r3, r7, r3
   2cd54:	2226      	movs	r2, #38	; 0x26
   2cd56:	18ba      	adds	r2, r7, r2
   2cd58:	7812      	ldrb	r2, [r2, #0]
   2cd5a:	2108      	movs	r1, #8
   2cd5c:	430a      	orrs	r2, r1
   2cd5e:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2cd60:	687b      	ldr	r3, [r7, #4]
   2cd62:	699b      	ldr	r3, [r3, #24]
   2cd64:	330b      	adds	r3, #11
   2cd66:	2226      	movs	r2, #38	; 0x26
   2cd68:	18ba      	adds	r2, r7, r2
   2cd6a:	7812      	ldrb	r2, [r2, #0]
   2cd6c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2cd6e:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2cd70:	0018      	movs	r0, r3
   2cd72:	46bd      	mov	sp, r7
   2cd74:	b00b      	add	sp, #44	; 0x2c
   2cd76:	bd90      	pop	{r4, r7, pc}

0002cd78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2cd78:	b590      	push	{r4, r7, lr}
   2cd7a:	b085      	sub	sp, #20
   2cd7c:	af00      	add	r7, sp, #0
   2cd7e:	6078      	str	r0, [r7, #4]
   2cd80:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2cd82:	683b      	ldr	r3, [r7, #0]
   2cd84:	781b      	ldrb	r3, [r3, #0]
   2cd86:	2b2f      	cmp	r3, #47	; 0x2f
   2cd88:	d003      	beq.n	2cd92 <follow_path+0x1a>
   2cd8a:	683b      	ldr	r3, [r7, #0]
   2cd8c:	781b      	ldrb	r3, [r3, #0]
   2cd8e:	2b5c      	cmp	r3, #92	; 0x5c
   2cd90:	d102      	bne.n	2cd98 <follow_path+0x20>
		path++;
   2cd92:	683b      	ldr	r3, [r7, #0]
   2cd94:	3301      	adds	r3, #1
   2cd96:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2cd98:	687b      	ldr	r3, [r7, #4]
   2cd9a:	2200      	movs	r2, #0
   2cd9c:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2cd9e:	683b      	ldr	r3, [r7, #0]
   2cda0:	781b      	ldrb	r3, [r3, #0]
   2cda2:	2b1f      	cmp	r3, #31
   2cda4:	d80c      	bhi.n	2cdc0 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2cda6:	230f      	movs	r3, #15
   2cda8:	18fc      	adds	r4, r7, r3
   2cdaa:	687b      	ldr	r3, [r7, #4]
   2cdac:	2100      	movs	r1, #0
   2cdae:	0018      	movs	r0, r3
   2cdb0:	4b3c      	ldr	r3, [pc, #240]	; (2cea4 <follow_path+0x12c>)
   2cdb2:	4798      	blx	r3
   2cdb4:	0003      	movs	r3, r0
   2cdb6:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2cdb8:	687b      	ldr	r3, [r7, #4]
   2cdba:	2200      	movs	r2, #0
   2cdbc:	615a      	str	r2, [r3, #20]
   2cdbe:	e06a      	b.n	2ce96 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2cdc0:	230f      	movs	r3, #15
   2cdc2:	18fc      	adds	r4, r7, r3
   2cdc4:	003a      	movs	r2, r7
   2cdc6:	687b      	ldr	r3, [r7, #4]
   2cdc8:	0011      	movs	r1, r2
   2cdca:	0018      	movs	r0, r3
   2cdcc:	4b36      	ldr	r3, [pc, #216]	; (2cea8 <follow_path+0x130>)
   2cdce:	4798      	blx	r3
   2cdd0:	0003      	movs	r3, r0
   2cdd2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cdd4:	230f      	movs	r3, #15
   2cdd6:	18fb      	adds	r3, r7, r3
   2cdd8:	781b      	ldrb	r3, [r3, #0]
   2cdda:	2b00      	cmp	r3, #0
   2cddc:	d154      	bne.n	2ce88 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2cdde:	230f      	movs	r3, #15
   2cde0:	18fc      	adds	r4, r7, r3
   2cde2:	687b      	ldr	r3, [r7, #4]
   2cde4:	0018      	movs	r0, r3
   2cde6:	4b31      	ldr	r3, [pc, #196]	; (2ceac <follow_path+0x134>)
   2cde8:	4798      	blx	r3
   2cdea:	0003      	movs	r3, r0
   2cdec:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2cdee:	687b      	ldr	r3, [r7, #4]
   2cdf0:	699a      	ldr	r2, [r3, #24]
   2cdf2:	230e      	movs	r3, #14
   2cdf4:	18fb      	adds	r3, r7, r3
   2cdf6:	7ad2      	ldrb	r2, [r2, #11]
   2cdf8:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2cdfa:	230f      	movs	r3, #15
   2cdfc:	18fb      	adds	r3, r7, r3
   2cdfe:	781b      	ldrb	r3, [r3, #0]
   2ce00:	2b00      	cmp	r3, #0
   2ce02:	d00f      	beq.n	2ce24 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2ce04:	230f      	movs	r3, #15
   2ce06:	18fb      	adds	r3, r7, r3
   2ce08:	781b      	ldrb	r3, [r3, #0]
   2ce0a:	2b04      	cmp	r3, #4
   2ce0c:	d13e      	bne.n	2ce8c <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2ce0e:	230e      	movs	r3, #14
   2ce10:	18fb      	adds	r3, r7, r3
   2ce12:	781b      	ldrb	r3, [r3, #0]
   2ce14:	2204      	movs	r2, #4
   2ce16:	4013      	ands	r3, r2
   2ce18:	d13a      	bne.n	2ce90 <follow_path+0x118>
   2ce1a:	230f      	movs	r3, #15
   2ce1c:	18fb      	adds	r3, r7, r3
   2ce1e:	2205      	movs	r2, #5
   2ce20:	701a      	strb	r2, [r3, #0]
				}
				break;
   2ce22:	e035      	b.n	2ce90 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2ce24:	230e      	movs	r3, #14
   2ce26:	18fb      	adds	r3, r7, r3
   2ce28:	781b      	ldrb	r3, [r3, #0]
   2ce2a:	2204      	movs	r2, #4
   2ce2c:	4013      	ands	r3, r2
   2ce2e:	d131      	bne.n	2ce94 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2ce30:	687b      	ldr	r3, [r7, #4]
   2ce32:	695b      	ldr	r3, [r3, #20]
   2ce34:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2ce36:	68bb      	ldr	r3, [r7, #8]
   2ce38:	330b      	adds	r3, #11
   2ce3a:	781b      	ldrb	r3, [r3, #0]
   2ce3c:	001a      	movs	r2, r3
   2ce3e:	2310      	movs	r3, #16
   2ce40:	4013      	ands	r3, r2
   2ce42:	d104      	bne.n	2ce4e <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2ce44:	230f      	movs	r3, #15
   2ce46:	18fb      	adds	r3, r7, r3
   2ce48:	2205      	movs	r2, #5
   2ce4a:	701a      	strb	r2, [r3, #0]
   2ce4c:	e023      	b.n	2ce96 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2ce4e:	68bb      	ldr	r3, [r7, #8]
   2ce50:	3315      	adds	r3, #21
   2ce52:	781b      	ldrb	r3, [r3, #0]
   2ce54:	021b      	lsls	r3, r3, #8
   2ce56:	b21a      	sxth	r2, r3
   2ce58:	68bb      	ldr	r3, [r7, #8]
   2ce5a:	3314      	adds	r3, #20
   2ce5c:	781b      	ldrb	r3, [r3, #0]
   2ce5e:	b21b      	sxth	r3, r3
   2ce60:	4313      	orrs	r3, r2
   2ce62:	b21b      	sxth	r3, r3
   2ce64:	b29b      	uxth	r3, r3
   2ce66:	041b      	lsls	r3, r3, #16
   2ce68:	68ba      	ldr	r2, [r7, #8]
   2ce6a:	321b      	adds	r2, #27
   2ce6c:	7812      	ldrb	r2, [r2, #0]
   2ce6e:	0212      	lsls	r2, r2, #8
   2ce70:	b211      	sxth	r1, r2
   2ce72:	68ba      	ldr	r2, [r7, #8]
   2ce74:	321a      	adds	r2, #26
   2ce76:	7812      	ldrb	r2, [r2, #0]
   2ce78:	b212      	sxth	r2, r2
   2ce7a:	430a      	orrs	r2, r1
   2ce7c:	b212      	sxth	r2, r2
   2ce7e:	b292      	uxth	r2, r2
   2ce80:	431a      	orrs	r2, r3
   2ce82:	687b      	ldr	r3, [r7, #4]
   2ce84:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2ce86:	e79b      	b.n	2cdc0 <follow_path+0x48>
			if (res != FR_OK) break;
   2ce88:	46c0      	nop			; (mov r8, r8)
   2ce8a:	e004      	b.n	2ce96 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2ce8c:	46c0      	nop			; (mov r8, r8)
   2ce8e:	e002      	b.n	2ce96 <follow_path+0x11e>
				break;
   2ce90:	46c0      	nop			; (mov r8, r8)
   2ce92:	e000      	b.n	2ce96 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2ce94:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2ce96:	230f      	movs	r3, #15
   2ce98:	18fb      	adds	r3, r7, r3
   2ce9a:	781b      	ldrb	r3, [r3, #0]
}
   2ce9c:	0018      	movs	r0, r3
   2ce9e:	46bd      	mov	sp, r7
   2cea0:	b005      	add	sp, #20
   2cea2:	bd90      	pop	{r4, r7, pc}
   2cea4:	0002bd49 	.word	0x0002bd49
   2cea8:	0002c931 	.word	0x0002c931
   2ceac:	0002c3cd 	.word	0x0002c3cd

0002ceb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2ceb0:	b590      	push	{r4, r7, lr}
   2ceb2:	b083      	sub	sp, #12
   2ceb4:	af00      	add	r7, sp, #0
   2ceb6:	6078      	str	r0, [r7, #4]
   2ceb8:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2ceba:	687b      	ldr	r3, [r7, #4]
   2cebc:	7858      	ldrb	r0, [r3, #1]
   2cebe:	687b      	ldr	r3, [r7, #4]
   2cec0:	3330      	adds	r3, #48	; 0x30
   2cec2:	0019      	movs	r1, r3
   2cec4:	683a      	ldr	r2, [r7, #0]
   2cec6:	2301      	movs	r3, #1
   2cec8:	4c2a      	ldr	r4, [pc, #168]	; (2cf74 <check_fs+0xc4>)
   2ceca:	47a0      	blx	r4
   2cecc:	1e03      	subs	r3, r0, #0
   2cece:	d001      	beq.n	2ced4 <check_fs+0x24>
		return 3;
   2ced0:	2303      	movs	r3, #3
   2ced2:	e04b      	b.n	2cf6c <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2ced4:	687b      	ldr	r3, [r7, #4]
   2ced6:	4a28      	ldr	r2, [pc, #160]	; (2cf78 <check_fs+0xc8>)
   2ced8:	4694      	mov	ip, r2
   2ceda:	4463      	add	r3, ip
   2cedc:	3301      	adds	r3, #1
   2cede:	781b      	ldrb	r3, [r3, #0]
   2cee0:	021b      	lsls	r3, r3, #8
   2cee2:	b21a      	sxth	r2, r3
   2cee4:	687b      	ldr	r3, [r7, #4]
   2cee6:	4924      	ldr	r1, [pc, #144]	; (2cf78 <check_fs+0xc8>)
   2cee8:	5c5b      	ldrb	r3, [r3, r1]
   2ceea:	b21b      	sxth	r3, r3
   2ceec:	4313      	orrs	r3, r2
   2ceee:	b21b      	sxth	r3, r3
   2cef0:	4a22      	ldr	r2, [pc, #136]	; (2cf7c <check_fs+0xcc>)
   2cef2:	4293      	cmp	r3, r2
   2cef4:	d001      	beq.n	2cefa <check_fs+0x4a>
		return 2;
   2cef6:	2302      	movs	r3, #2
   2cef8:	e038      	b.n	2cf6c <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2cefa:	687b      	ldr	r3, [r7, #4]
   2cefc:	3366      	adds	r3, #102	; 0x66
   2cefe:	3303      	adds	r3, #3
   2cf00:	781b      	ldrb	r3, [r3, #0]
   2cf02:	061a      	lsls	r2, r3, #24
   2cf04:	687b      	ldr	r3, [r7, #4]
   2cf06:	3366      	adds	r3, #102	; 0x66
   2cf08:	3302      	adds	r3, #2
   2cf0a:	781b      	ldrb	r3, [r3, #0]
   2cf0c:	041b      	lsls	r3, r3, #16
   2cf0e:	4313      	orrs	r3, r2
   2cf10:	687a      	ldr	r2, [r7, #4]
   2cf12:	3266      	adds	r2, #102	; 0x66
   2cf14:	3201      	adds	r2, #1
   2cf16:	7812      	ldrb	r2, [r2, #0]
   2cf18:	0212      	lsls	r2, r2, #8
   2cf1a:	4313      	orrs	r3, r2
   2cf1c:	687a      	ldr	r2, [r7, #4]
   2cf1e:	2166      	movs	r1, #102	; 0x66
   2cf20:	5c52      	ldrb	r2, [r2, r1]
   2cf22:	4313      	orrs	r3, r2
   2cf24:	021b      	lsls	r3, r3, #8
   2cf26:	0a1b      	lsrs	r3, r3, #8
   2cf28:	4a15      	ldr	r2, [pc, #84]	; (2cf80 <check_fs+0xd0>)
   2cf2a:	4293      	cmp	r3, r2
   2cf2c:	d101      	bne.n	2cf32 <check_fs+0x82>
		return 0;
   2cf2e:	2300      	movs	r3, #0
   2cf30:	e01c      	b.n	2cf6c <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2cf32:	687b      	ldr	r3, [r7, #4]
   2cf34:	3382      	adds	r3, #130	; 0x82
   2cf36:	3303      	adds	r3, #3
   2cf38:	781b      	ldrb	r3, [r3, #0]
   2cf3a:	061a      	lsls	r2, r3, #24
   2cf3c:	687b      	ldr	r3, [r7, #4]
   2cf3e:	3382      	adds	r3, #130	; 0x82
   2cf40:	3302      	adds	r3, #2
   2cf42:	781b      	ldrb	r3, [r3, #0]
   2cf44:	041b      	lsls	r3, r3, #16
   2cf46:	4313      	orrs	r3, r2
   2cf48:	687a      	ldr	r2, [r7, #4]
   2cf4a:	3282      	adds	r2, #130	; 0x82
   2cf4c:	3201      	adds	r2, #1
   2cf4e:	7812      	ldrb	r2, [r2, #0]
   2cf50:	0212      	lsls	r2, r2, #8
   2cf52:	4313      	orrs	r3, r2
   2cf54:	687a      	ldr	r2, [r7, #4]
   2cf56:	2182      	movs	r1, #130	; 0x82
   2cf58:	5c52      	ldrb	r2, [r2, r1]
   2cf5a:	4313      	orrs	r3, r2
   2cf5c:	021b      	lsls	r3, r3, #8
   2cf5e:	0a1b      	lsrs	r3, r3, #8
   2cf60:	4a07      	ldr	r2, [pc, #28]	; (2cf80 <check_fs+0xd0>)
   2cf62:	4293      	cmp	r3, r2
   2cf64:	d101      	bne.n	2cf6a <check_fs+0xba>
		return 0;
   2cf66:	2300      	movs	r3, #0
   2cf68:	e000      	b.n	2cf6c <check_fs+0xbc>

	return 1;
   2cf6a:	2301      	movs	r3, #1
}
   2cf6c:	0018      	movs	r0, r3
   2cf6e:	46bd      	mov	sp, r7
   2cf70:	b003      	add	sp, #12
   2cf72:	bd90      	pop	{r4, r7, pc}
   2cf74:	0002b119 	.word	0x0002b119
   2cf78:	0000022e 	.word	0x0000022e
   2cf7c:	ffffaa55 	.word	0xffffaa55
   2cf80:	00544146 	.word	0x00544146

0002cf84 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2cf84:	b590      	push	{r4, r7, lr}
   2cf86:	b093      	sub	sp, #76	; 0x4c
   2cf88:	af00      	add	r7, sp, #0
   2cf8a:	60f8      	str	r0, [r7, #12]
   2cf8c:	60b9      	str	r1, [r7, #8]
   2cf8e:	1dfb      	adds	r3, r7, #7
   2cf90:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2cf92:	68fb      	ldr	r3, [r7, #12]
   2cf94:	681b      	ldr	r3, [r3, #0]
   2cf96:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2cf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2cf9a:	781b      	ldrb	r3, [r3, #0]
   2cf9c:	3b30      	subs	r3, #48	; 0x30
   2cf9e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2cfa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cfa2:	2b09      	cmp	r3, #9
   2cfa4:	d80b      	bhi.n	2cfbe <chk_mounted+0x3a>
   2cfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2cfa8:	3301      	adds	r3, #1
   2cfaa:	781b      	ldrb	r3, [r3, #0]
   2cfac:	2b3a      	cmp	r3, #58	; 0x3a
   2cfae:	d106      	bne.n	2cfbe <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2cfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2cfb2:	3302      	adds	r3, #2
   2cfb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   2cfb6:	68fb      	ldr	r3, [r7, #12]
   2cfb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2cfba:	601a      	str	r2, [r3, #0]
   2cfbc:	e001      	b.n	2cfc2 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2cfbe:	2300      	movs	r3, #0
   2cfc0:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2cfc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cfc4:	2b07      	cmp	r3, #7
   2cfc6:	d901      	bls.n	2cfcc <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2cfc8:	230b      	movs	r3, #11
   2cfca:	e2af      	b.n	2d52c <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2cfcc:	4bc5      	ldr	r3, [pc, #788]	; (2d2e4 <chk_mounted+0x360>)
   2cfce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2cfd0:	0092      	lsls	r2, r2, #2
   2cfd2:	58d3      	ldr	r3, [r2, r3]
   2cfd4:	62bb      	str	r3, [r7, #40]	; 0x28
   2cfd6:	68bb      	ldr	r3, [r7, #8]
   2cfd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cfda:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2cfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cfde:	2b00      	cmp	r3, #0
   2cfe0:	d101      	bne.n	2cfe6 <chk_mounted+0x62>
   2cfe2:	230c      	movs	r3, #12
   2cfe4:	e2a2      	b.n	2d52c <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2cfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cfe8:	781b      	ldrb	r3, [r3, #0]
   2cfea:	2b00      	cmp	r3, #0
   2cfec:	d01c      	beq.n	2d028 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2cfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cff0:	785b      	ldrb	r3, [r3, #1]
   2cff2:	2227      	movs	r2, #39	; 0x27
   2cff4:	18bc      	adds	r4, r7, r2
   2cff6:	0018      	movs	r0, r3
   2cff8:	4bbb      	ldr	r3, [pc, #748]	; (2d2e8 <chk_mounted+0x364>)
   2cffa:	4798      	blx	r3
   2cffc:	0003      	movs	r3, r0
   2cffe:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2d000:	2327      	movs	r3, #39	; 0x27
   2d002:	18fb      	adds	r3, r7, r3
   2d004:	781b      	ldrb	r3, [r3, #0]
   2d006:	2201      	movs	r2, #1
   2d008:	4013      	ands	r3, r2
   2d00a:	d10d      	bne.n	2d028 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2d00c:	1dfb      	adds	r3, r7, #7
   2d00e:	781b      	ldrb	r3, [r3, #0]
   2d010:	2b00      	cmp	r3, #0
   2d012:	d007      	beq.n	2d024 <chk_mounted+0xa0>
   2d014:	2327      	movs	r3, #39	; 0x27
   2d016:	18fb      	adds	r3, r7, r3
   2d018:	781b      	ldrb	r3, [r3, #0]
   2d01a:	2204      	movs	r2, #4
   2d01c:	4013      	ands	r3, r2
   2d01e:	d001      	beq.n	2d024 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2d020:	230a      	movs	r3, #10
   2d022:	e283      	b.n	2d52c <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2d024:	2300      	movs	r3, #0
   2d026:	e281      	b.n	2d52c <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2d028:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d02a:	2200      	movs	r2, #0
   2d02c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2d02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d030:	b2da      	uxtb	r2, r3
   2d032:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d034:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2d036:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d038:	785b      	ldrb	r3, [r3, #1]
   2d03a:	2227      	movs	r2, #39	; 0x27
   2d03c:	18bc      	adds	r4, r7, r2
   2d03e:	0018      	movs	r0, r3
   2d040:	4baa      	ldr	r3, [pc, #680]	; (2d2ec <chk_mounted+0x368>)
   2d042:	4798      	blx	r3
   2d044:	0003      	movs	r3, r0
   2d046:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2d048:	2327      	movs	r3, #39	; 0x27
   2d04a:	18fb      	adds	r3, r7, r3
   2d04c:	781b      	ldrb	r3, [r3, #0]
   2d04e:	2201      	movs	r2, #1
   2d050:	4013      	ands	r3, r2
   2d052:	d001      	beq.n	2d058 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2d054:	2303      	movs	r3, #3
   2d056:	e269      	b.n	2d52c <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2d058:	1dfb      	adds	r3, r7, #7
   2d05a:	781b      	ldrb	r3, [r3, #0]
   2d05c:	2b00      	cmp	r3, #0
   2d05e:	d007      	beq.n	2d070 <chk_mounted+0xec>
   2d060:	2327      	movs	r3, #39	; 0x27
   2d062:	18fb      	adds	r3, r7, r3
   2d064:	781b      	ldrb	r3, [r3, #0]
   2d066:	2204      	movs	r2, #4
   2d068:	4013      	ands	r3, r2
   2d06a:	d001      	beq.n	2d070 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2d06c:	230a      	movs	r3, #10
   2d06e:	e25d      	b.n	2d52c <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2d070:	2300      	movs	r3, #0
   2d072:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d074:	2347      	movs	r3, #71	; 0x47
   2d076:	18fc      	adds	r4, r7, r3
   2d078:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d07c:	0011      	movs	r1, r2
   2d07e:	0018      	movs	r0, r3
   2d080:	4b9b      	ldr	r3, [pc, #620]	; (2d2f0 <chk_mounted+0x36c>)
   2d082:	4798      	blx	r3
   2d084:	0003      	movs	r3, r0
   2d086:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2d088:	2347      	movs	r3, #71	; 0x47
   2d08a:	18fb      	adds	r3, r7, r3
   2d08c:	781b      	ldrb	r3, [r3, #0]
   2d08e:	2b01      	cmp	r3, #1
   2d090:	d13b      	bne.n	2d10a <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2d092:	2346      	movs	r3, #70	; 0x46
   2d094:	18fb      	adds	r3, r7, r3
   2d096:	2200      	movs	r2, #0
   2d098:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2d09a:	2346      	movs	r3, #70	; 0x46
   2d09c:	18fb      	adds	r3, r7, r3
   2d09e:	781b      	ldrb	r3, [r3, #0]
   2d0a0:	2b00      	cmp	r3, #0
   2d0a2:	d006      	beq.n	2d0b2 <chk_mounted+0x12e>
   2d0a4:	2346      	movs	r3, #70	; 0x46
   2d0a6:	18fb      	adds	r3, r7, r3
   2d0a8:	781a      	ldrb	r2, [r3, #0]
   2d0aa:	2346      	movs	r3, #70	; 0x46
   2d0ac:	18fb      	adds	r3, r7, r3
   2d0ae:	3a01      	subs	r2, #1
   2d0b0:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2d0b2:	2346      	movs	r3, #70	; 0x46
   2d0b4:	18fb      	adds	r3, r7, r3
   2d0b6:	781b      	ldrb	r3, [r3, #0]
   2d0b8:	011b      	lsls	r3, r3, #4
   2d0ba:	33bf      	adds	r3, #191	; 0xbf
   2d0bc:	33ff      	adds	r3, #255	; 0xff
   2d0be:	3330      	adds	r3, #48	; 0x30
   2d0c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d0c2:	18d3      	adds	r3, r2, r3
   2d0c4:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2d0c6:	6a3b      	ldr	r3, [r7, #32]
   2d0c8:	3304      	adds	r3, #4
   2d0ca:	781b      	ldrb	r3, [r3, #0]
   2d0cc:	2b00      	cmp	r3, #0
   2d0ce:	d01c      	beq.n	2d10a <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2d0d0:	6a3b      	ldr	r3, [r7, #32]
   2d0d2:	330b      	adds	r3, #11
   2d0d4:	781b      	ldrb	r3, [r3, #0]
   2d0d6:	061a      	lsls	r2, r3, #24
   2d0d8:	6a3b      	ldr	r3, [r7, #32]
   2d0da:	330a      	adds	r3, #10
   2d0dc:	781b      	ldrb	r3, [r3, #0]
   2d0de:	041b      	lsls	r3, r3, #16
   2d0e0:	4313      	orrs	r3, r2
   2d0e2:	6a3a      	ldr	r2, [r7, #32]
   2d0e4:	3209      	adds	r2, #9
   2d0e6:	7812      	ldrb	r2, [r2, #0]
   2d0e8:	0212      	lsls	r2, r2, #8
   2d0ea:	4313      	orrs	r3, r2
   2d0ec:	6a3a      	ldr	r2, [r7, #32]
   2d0ee:	3208      	adds	r2, #8
   2d0f0:	7812      	ldrb	r2, [r2, #0]
   2d0f2:	4313      	orrs	r3, r2
   2d0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2d0f6:	2347      	movs	r3, #71	; 0x47
   2d0f8:	18fc      	adds	r4, r7, r3
   2d0fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0fe:	0011      	movs	r1, r2
   2d100:	0018      	movs	r0, r3
   2d102:	4b7b      	ldr	r3, [pc, #492]	; (2d2f0 <chk_mounted+0x36c>)
   2d104:	4798      	blx	r3
   2d106:	0003      	movs	r3, r0
   2d108:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2d10a:	2347      	movs	r3, #71	; 0x47
   2d10c:	18fb      	adds	r3, r7, r3
   2d10e:	781b      	ldrb	r3, [r3, #0]
   2d110:	2b03      	cmp	r3, #3
   2d112:	d101      	bne.n	2d118 <chk_mounted+0x194>
   2d114:	2301      	movs	r3, #1
   2d116:	e209      	b.n	2d52c <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2d118:	2347      	movs	r3, #71	; 0x47
   2d11a:	18fb      	adds	r3, r7, r3
   2d11c:	781b      	ldrb	r3, [r3, #0]
   2d11e:	2b00      	cmp	r3, #0
   2d120:	d001      	beq.n	2d126 <chk_mounted+0x1a2>
   2d122:	230d      	movs	r3, #13
   2d124:	e202      	b.n	2d52c <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2d126:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d128:	223c      	movs	r2, #60	; 0x3c
   2d12a:	5c9b      	ldrb	r3, [r3, r2]
   2d12c:	021b      	lsls	r3, r3, #8
   2d12e:	b21a      	sxth	r2, r3
   2d130:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d132:	213b      	movs	r1, #59	; 0x3b
   2d134:	5c5b      	ldrb	r3, [r3, r1]
   2d136:	b21b      	sxth	r3, r3
   2d138:	4313      	orrs	r3, r2
   2d13a:	b21a      	sxth	r2, r3
   2d13c:	2380      	movs	r3, #128	; 0x80
   2d13e:	009b      	lsls	r3, r3, #2
   2d140:	429a      	cmp	r2, r3
   2d142:	d001      	beq.n	2d148 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2d144:	230d      	movs	r3, #13
   2d146:	e1f1      	b.n	2d52c <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2d148:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d14a:	2247      	movs	r2, #71	; 0x47
   2d14c:	5c9b      	ldrb	r3, [r3, r2]
   2d14e:	021b      	lsls	r3, r3, #8
   2d150:	b21a      	sxth	r2, r3
   2d152:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d154:	2146      	movs	r1, #70	; 0x46
   2d156:	5c5b      	ldrb	r3, [r3, r1]
   2d158:	b21b      	sxth	r3, r3
   2d15a:	4313      	orrs	r3, r2
   2d15c:	b21b      	sxth	r3, r3
   2d15e:	b29b      	uxth	r3, r3
   2d160:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2d162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d164:	2b00      	cmp	r3, #0
   2d166:	d112      	bne.n	2d18e <chk_mounted+0x20a>
   2d168:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d16a:	2257      	movs	r2, #87	; 0x57
   2d16c:	5c9b      	ldrb	r3, [r3, r2]
   2d16e:	061a      	lsls	r2, r3, #24
   2d170:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d172:	2156      	movs	r1, #86	; 0x56
   2d174:	5c5b      	ldrb	r3, [r3, r1]
   2d176:	041b      	lsls	r3, r3, #16
   2d178:	4313      	orrs	r3, r2
   2d17a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d17c:	2155      	movs	r1, #85	; 0x55
   2d17e:	5c52      	ldrb	r2, [r2, r1]
   2d180:	0212      	lsls	r2, r2, #8
   2d182:	4313      	orrs	r3, r2
   2d184:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d186:	2154      	movs	r1, #84	; 0x54
   2d188:	5c52      	ldrb	r2, [r2, r1]
   2d18a:	4313      	orrs	r3, r2
   2d18c:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2d18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d190:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2d192:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2d194:	231f      	movs	r3, #31
   2d196:	18fb      	adds	r3, r7, r3
   2d198:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d19a:	2140      	movs	r1, #64	; 0x40
   2d19c:	5c52      	ldrb	r2, [r2, r1]
   2d19e:	701a      	strb	r2, [r3, #0]
   2d1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1a2:	221f      	movs	r2, #31
   2d1a4:	18ba      	adds	r2, r7, r2
   2d1a6:	7812      	ldrb	r2, [r2, #0]
   2d1a8:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2d1aa:	231f      	movs	r3, #31
   2d1ac:	18fb      	adds	r3, r7, r3
   2d1ae:	781b      	ldrb	r3, [r3, #0]
   2d1b0:	2b01      	cmp	r3, #1
   2d1b2:	d006      	beq.n	2d1c2 <chk_mounted+0x23e>
   2d1b4:	231f      	movs	r3, #31
   2d1b6:	18fb      	adds	r3, r7, r3
   2d1b8:	781b      	ldrb	r3, [r3, #0]
   2d1ba:	2b02      	cmp	r3, #2
   2d1bc:	d001      	beq.n	2d1c2 <chk_mounted+0x23e>
   2d1be:	230d      	movs	r3, #13
   2d1c0:	e1b4      	b.n	2d52c <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2d1c2:	231f      	movs	r3, #31
   2d1c4:	18fb      	adds	r3, r7, r3
   2d1c6:	781a      	ldrb	r2, [r3, #0]
   2d1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d1ca:	4353      	muls	r3, r2
   2d1cc:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2d1ce:	231f      	movs	r3, #31
   2d1d0:	18fb      	adds	r3, r7, r3
   2d1d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d1d4:	213d      	movs	r1, #61	; 0x3d
   2d1d6:	5c52      	ldrb	r2, [r2, r1]
   2d1d8:	701a      	strb	r2, [r3, #0]
   2d1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1dc:	221f      	movs	r2, #31
   2d1de:	18ba      	adds	r2, r7, r2
   2d1e0:	7812      	ldrb	r2, [r2, #0]
   2d1e2:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2d1e4:	231f      	movs	r3, #31
   2d1e6:	18fb      	adds	r3, r7, r3
   2d1e8:	781b      	ldrb	r3, [r3, #0]
   2d1ea:	2b00      	cmp	r3, #0
   2d1ec:	d008      	beq.n	2d200 <chk_mounted+0x27c>
   2d1ee:	231f      	movs	r3, #31
   2d1f0:	18fb      	adds	r3, r7, r3
   2d1f2:	781b      	ldrb	r3, [r3, #0]
   2d1f4:	221f      	movs	r2, #31
   2d1f6:	18ba      	adds	r2, r7, r2
   2d1f8:	7812      	ldrb	r2, [r2, #0]
   2d1fa:	3a01      	subs	r2, #1
   2d1fc:	4013      	ands	r3, r2
   2d1fe:	d001      	beq.n	2d204 <chk_mounted+0x280>
   2d200:	230d      	movs	r3, #13
   2d202:	e193      	b.n	2d52c <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2d204:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d206:	2242      	movs	r2, #66	; 0x42
   2d208:	5c9b      	ldrb	r3, [r3, r2]
   2d20a:	021b      	lsls	r3, r3, #8
   2d20c:	b21a      	sxth	r2, r3
   2d20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d210:	2141      	movs	r1, #65	; 0x41
   2d212:	5c5b      	ldrb	r3, [r3, r1]
   2d214:	b21b      	sxth	r3, r3
   2d216:	4313      	orrs	r3, r2
   2d218:	b21b      	sxth	r3, r3
   2d21a:	b29a      	uxth	r2, r3
   2d21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d21e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2d220:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d222:	891b      	ldrh	r3, [r3, #8]
   2d224:	220f      	movs	r2, #15
   2d226:	4013      	ands	r3, r2
   2d228:	b29b      	uxth	r3, r3
   2d22a:	2b00      	cmp	r3, #0
   2d22c:	d001      	beq.n	2d232 <chk_mounted+0x2ae>
   2d22e:	230d      	movs	r3, #13
   2d230:	e17c      	b.n	2d52c <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2d232:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d234:	2244      	movs	r2, #68	; 0x44
   2d236:	5c9b      	ldrb	r3, [r3, r2]
   2d238:	021b      	lsls	r3, r3, #8
   2d23a:	b21a      	sxth	r2, r3
   2d23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d23e:	2143      	movs	r1, #67	; 0x43
   2d240:	5c5b      	ldrb	r3, [r3, r1]
   2d242:	b21b      	sxth	r3, r3
   2d244:	4313      	orrs	r3, r2
   2d246:	b21b      	sxth	r3, r3
   2d248:	b29b      	uxth	r3, r3
   2d24a:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2d24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d24e:	2b00      	cmp	r3, #0
   2d250:	d112      	bne.n	2d278 <chk_mounted+0x2f4>
   2d252:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d254:	2253      	movs	r2, #83	; 0x53
   2d256:	5c9b      	ldrb	r3, [r3, r2]
   2d258:	061a      	lsls	r2, r3, #24
   2d25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d25c:	2152      	movs	r1, #82	; 0x52
   2d25e:	5c5b      	ldrb	r3, [r3, r1]
   2d260:	041b      	lsls	r3, r3, #16
   2d262:	4313      	orrs	r3, r2
   2d264:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d266:	2151      	movs	r1, #81	; 0x51
   2d268:	5c52      	ldrb	r2, [r2, r1]
   2d26a:	0212      	lsls	r2, r2, #8
   2d26c:	4313      	orrs	r3, r2
   2d26e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d270:	2150      	movs	r1, #80	; 0x50
   2d272:	5c52      	ldrb	r2, [r2, r1]
   2d274:	4313      	orrs	r3, r2
   2d276:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2d278:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d27a:	223f      	movs	r2, #63	; 0x3f
   2d27c:	5c9b      	ldrb	r3, [r3, r2]
   2d27e:	021b      	lsls	r3, r3, #8
   2d280:	b21a      	sxth	r2, r3
   2d282:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d284:	213e      	movs	r1, #62	; 0x3e
   2d286:	5c5b      	ldrb	r3, [r3, r1]
   2d288:	b21b      	sxth	r3, r3
   2d28a:	4313      	orrs	r3, r2
   2d28c:	b21a      	sxth	r2, r3
   2d28e:	231c      	movs	r3, #28
   2d290:	18fb      	adds	r3, r7, r3
   2d292:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2d294:	231c      	movs	r3, #28
   2d296:	18fb      	adds	r3, r7, r3
   2d298:	881b      	ldrh	r3, [r3, #0]
   2d29a:	2b00      	cmp	r3, #0
   2d29c:	d101      	bne.n	2d2a2 <chk_mounted+0x31e>
   2d29e:	230d      	movs	r3, #13
   2d2a0:	e144      	b.n	2d52c <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2d2a2:	231c      	movs	r3, #28
   2d2a4:	18fb      	adds	r3, r7, r3
   2d2a6:	881a      	ldrh	r2, [r3, #0]
   2d2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d2aa:	18d3      	adds	r3, r2, r3
   2d2ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d2ae:	8912      	ldrh	r2, [r2, #8]
   2d2b0:	0912      	lsrs	r2, r2, #4
   2d2b2:	b292      	uxth	r2, r2
   2d2b4:	189b      	adds	r3, r3, r2
   2d2b6:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2d2b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2d2ba:	69bb      	ldr	r3, [r7, #24]
   2d2bc:	429a      	cmp	r2, r3
   2d2be:	d201      	bcs.n	2d2c4 <chk_mounted+0x340>
   2d2c0:	230d      	movs	r3, #13
   2d2c2:	e133      	b.n	2d52c <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2d2c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2d2c6:	69bb      	ldr	r3, [r7, #24]
   2d2c8:	1ad2      	subs	r2, r2, r3
   2d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2cc:	789b      	ldrb	r3, [r3, #2]
   2d2ce:	0019      	movs	r1, r3
   2d2d0:	4b08      	ldr	r3, [pc, #32]	; (2d2f4 <chk_mounted+0x370>)
   2d2d2:	0010      	movs	r0, r2
   2d2d4:	4798      	blx	r3
   2d2d6:	0003      	movs	r3, r0
   2d2d8:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2d2da:	697b      	ldr	r3, [r7, #20]
   2d2dc:	2b00      	cmp	r3, #0
   2d2de:	d10b      	bne.n	2d2f8 <chk_mounted+0x374>
   2d2e0:	230d      	movs	r3, #13
   2d2e2:	e123      	b.n	2d52c <chk_mounted+0x5a8>
   2d2e4:	2000419c 	.word	0x2000419c
   2d2e8:	0002b0e1 	.word	0x0002b0e1
   2d2ec:	0002b05d 	.word	0x0002b05d
   2d2f0:	0002ceb1 	.word	0x0002ceb1
   2d2f4:	00032705 	.word	0x00032705
	fmt = FS_FAT12;
   2d2f8:	2347      	movs	r3, #71	; 0x47
   2d2fa:	18fb      	adds	r3, r7, r3
   2d2fc:	2201      	movs	r2, #1
   2d2fe:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2d300:	697b      	ldr	r3, [r7, #20]
   2d302:	4a8c      	ldr	r2, [pc, #560]	; (2d534 <chk_mounted+0x5b0>)
   2d304:	4293      	cmp	r3, r2
   2d306:	d903      	bls.n	2d310 <chk_mounted+0x38c>
   2d308:	2347      	movs	r3, #71	; 0x47
   2d30a:	18fb      	adds	r3, r7, r3
   2d30c:	2202      	movs	r2, #2
   2d30e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2d310:	697b      	ldr	r3, [r7, #20]
   2d312:	4a89      	ldr	r2, [pc, #548]	; (2d538 <chk_mounted+0x5b4>)
   2d314:	4293      	cmp	r3, r2
   2d316:	d903      	bls.n	2d320 <chk_mounted+0x39c>
   2d318:	2347      	movs	r3, #71	; 0x47
   2d31a:	18fb      	adds	r3, r7, r3
   2d31c:	2203      	movs	r2, #3
   2d31e:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2d320:	697b      	ldr	r3, [r7, #20]
   2d322:	1c9a      	adds	r2, r3, #2
   2d324:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d326:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2d328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d32a:	69bb      	ldr	r3, [r7, #24]
   2d32c:	18d2      	adds	r2, r2, r3
   2d32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d330:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2d332:	231c      	movs	r3, #28
   2d334:	18fb      	adds	r3, r7, r3
   2d336:	881a      	ldrh	r2, [r3, #0]
   2d338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d33a:	18d2      	adds	r2, r2, r3
   2d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d33e:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2d340:	2347      	movs	r3, #71	; 0x47
   2d342:	18fb      	adds	r3, r7, r3
   2d344:	781b      	ldrb	r3, [r3, #0]
   2d346:	2b03      	cmp	r3, #3
   2d348:	d11e      	bne.n	2d388 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2d34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d34c:	891b      	ldrh	r3, [r3, #8]
   2d34e:	2b00      	cmp	r3, #0
   2d350:	d001      	beq.n	2d356 <chk_mounted+0x3d2>
   2d352:	230d      	movs	r3, #13
   2d354:	e0ea      	b.n	2d52c <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d358:	225f      	movs	r2, #95	; 0x5f
   2d35a:	5c9b      	ldrb	r3, [r3, r2]
   2d35c:	061a      	lsls	r2, r3, #24
   2d35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d360:	215e      	movs	r1, #94	; 0x5e
   2d362:	5c5b      	ldrb	r3, [r3, r1]
   2d364:	041b      	lsls	r3, r3, #16
   2d366:	4313      	orrs	r3, r2
   2d368:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d36a:	215d      	movs	r1, #93	; 0x5d
   2d36c:	5c52      	ldrb	r2, [r2, r1]
   2d36e:	0212      	lsls	r2, r2, #8
   2d370:	4313      	orrs	r3, r2
   2d372:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d374:	215c      	movs	r1, #92	; 0x5c
   2d376:	5c52      	ldrb	r2, [r2, r1]
   2d378:	431a      	orrs	r2, r3
   2d37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d37c:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2d37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d380:	699b      	ldr	r3, [r3, #24]
   2d382:	009b      	lsls	r3, r3, #2
   2d384:	633b      	str	r3, [r7, #48]	; 0x30
   2d386:	e020      	b.n	2d3ca <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2d388:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d38a:	891b      	ldrh	r3, [r3, #8]
   2d38c:	2b00      	cmp	r3, #0
   2d38e:	d101      	bne.n	2d394 <chk_mounted+0x410>
   2d390:	230d      	movs	r3, #13
   2d392:	e0cb      	b.n	2d52c <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d396:	6a1a      	ldr	r2, [r3, #32]
   2d398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d39a:	18d2      	adds	r2, r2, r3
   2d39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d39e:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2d3a0:	2347      	movs	r3, #71	; 0x47
   2d3a2:	18fb      	adds	r3, r7, r3
   2d3a4:	781b      	ldrb	r3, [r3, #0]
   2d3a6:	2b02      	cmp	r3, #2
   2d3a8:	d103      	bne.n	2d3b2 <chk_mounted+0x42e>
   2d3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3ac:	699b      	ldr	r3, [r3, #24]
   2d3ae:	005b      	lsls	r3, r3, #1
   2d3b0:	e00a      	b.n	2d3c8 <chk_mounted+0x444>
   2d3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3b4:	699a      	ldr	r2, [r3, #24]
   2d3b6:	0013      	movs	r3, r2
   2d3b8:	005b      	lsls	r3, r3, #1
   2d3ba:	189b      	adds	r3, r3, r2
   2d3bc:	085a      	lsrs	r2, r3, #1
   2d3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3c0:	699b      	ldr	r3, [r3, #24]
   2d3c2:	2101      	movs	r1, #1
   2d3c4:	400b      	ands	r3, r1
   2d3c6:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2d3c8:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2d3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3cc:	69da      	ldr	r2, [r3, #28]
   2d3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d3d0:	495a      	ldr	r1, [pc, #360]	; (2d53c <chk_mounted+0x5b8>)
   2d3d2:	468c      	mov	ip, r1
   2d3d4:	4463      	add	r3, ip
   2d3d6:	0a5b      	lsrs	r3, r3, #9
   2d3d8:	429a      	cmp	r2, r3
   2d3da:	d201      	bcs.n	2d3e0 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2d3dc:	230d      	movs	r3, #13
   2d3de:	e0a5      	b.n	2d52c <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2d3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3e2:	2201      	movs	r2, #1
   2d3e4:	4252      	negs	r2, r2
   2d3e6:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2d3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3ea:	2200      	movs	r2, #0
   2d3ec:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2d3ee:	2347      	movs	r3, #71	; 0x47
   2d3f0:	18fb      	adds	r3, r7, r3
   2d3f2:	781b      	ldrb	r3, [r3, #0]
   2d3f4:	2b03      	cmp	r3, #3
   2d3f6:	d000      	beq.n	2d3fa <chk_mounted+0x476>
   2d3f8:	e082      	b.n	2d500 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2d3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3fc:	2200      	movs	r2, #0
   2d3fe:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2d400:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d402:	2261      	movs	r2, #97	; 0x61
   2d404:	5c9b      	ldrb	r3, [r3, r2]
   2d406:	021b      	lsls	r3, r3, #8
   2d408:	b21a      	sxth	r2, r3
   2d40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d40c:	2160      	movs	r1, #96	; 0x60
   2d40e:	5c5b      	ldrb	r3, [r3, r1]
   2d410:	b21b      	sxth	r3, r3
   2d412:	4313      	orrs	r3, r2
   2d414:	b21b      	sxth	r3, r3
   2d416:	b29b      	uxth	r3, r3
   2d418:	001a      	movs	r2, r3
   2d41a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d41c:	18d2      	adds	r2, r2, r3
   2d41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d420:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d422:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d424:	7858      	ldrb	r0, [r3, #1]
   2d426:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d428:	3330      	adds	r3, #48	; 0x30
   2d42a:	0019      	movs	r1, r3
   2d42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d42e:	695a      	ldr	r2, [r3, #20]
   2d430:	2301      	movs	r3, #1
   2d432:	4c43      	ldr	r4, [pc, #268]	; (2d540 <chk_mounted+0x5bc>)
   2d434:	47a0      	blx	r4
   2d436:	1e03      	subs	r3, r0, #0
   2d438:	d162      	bne.n	2d500 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d43c:	4a41      	ldr	r2, [pc, #260]	; (2d544 <chk_mounted+0x5c0>)
   2d43e:	5c9b      	ldrb	r3, [r3, r2]
   2d440:	021b      	lsls	r3, r3, #8
   2d442:	b21a      	sxth	r2, r3
   2d444:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d446:	4940      	ldr	r1, [pc, #256]	; (2d548 <chk_mounted+0x5c4>)
   2d448:	5c5b      	ldrb	r3, [r3, r1]
   2d44a:	b21b      	sxth	r3, r3
   2d44c:	4313      	orrs	r3, r2
   2d44e:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d450:	4a3e      	ldr	r2, [pc, #248]	; (2d54c <chk_mounted+0x5c8>)
   2d452:	4293      	cmp	r3, r2
   2d454:	d154      	bne.n	2d500 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d456:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d458:	2233      	movs	r2, #51	; 0x33
   2d45a:	5c9b      	ldrb	r3, [r3, r2]
   2d45c:	061a      	lsls	r2, r3, #24
   2d45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d460:	2132      	movs	r1, #50	; 0x32
   2d462:	5c5b      	ldrb	r3, [r3, r1]
   2d464:	041b      	lsls	r3, r3, #16
   2d466:	4313      	orrs	r3, r2
   2d468:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d46a:	2131      	movs	r1, #49	; 0x31
   2d46c:	5c52      	ldrb	r2, [r2, r1]
   2d46e:	0212      	lsls	r2, r2, #8
   2d470:	4313      	orrs	r3, r2
   2d472:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d474:	2130      	movs	r1, #48	; 0x30
   2d476:	5c52      	ldrb	r2, [r2, r1]
   2d478:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d47a:	4a35      	ldr	r2, [pc, #212]	; (2d550 <chk_mounted+0x5cc>)
   2d47c:	4293      	cmp	r3, r2
   2d47e:	d13f      	bne.n	2d500 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2d480:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d482:	4a34      	ldr	r2, [pc, #208]	; (2d554 <chk_mounted+0x5d0>)
   2d484:	5c9b      	ldrb	r3, [r3, r2]
   2d486:	061a      	lsls	r2, r3, #24
   2d488:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d48a:	4933      	ldr	r1, [pc, #204]	; (2d558 <chk_mounted+0x5d4>)
   2d48c:	5c5b      	ldrb	r3, [r3, r1]
   2d48e:	041b      	lsls	r3, r3, #16
   2d490:	4313      	orrs	r3, r2
   2d492:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d494:	4931      	ldr	r1, [pc, #196]	; (2d55c <chk_mounted+0x5d8>)
   2d496:	5c52      	ldrb	r2, [r2, r1]
   2d498:	0212      	lsls	r2, r2, #8
   2d49a:	4313      	orrs	r3, r2
   2d49c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d49e:	2285      	movs	r2, #133	; 0x85
   2d4a0:	0092      	lsls	r2, r2, #2
   2d4a2:	5c8a      	ldrb	r2, [r1, r2]
   2d4a4:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d4a6:	4a2e      	ldr	r2, [pc, #184]	; (2d560 <chk_mounted+0x5dc>)
   2d4a8:	4293      	cmp	r3, r2
   2d4aa:	d129      	bne.n	2d500 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2d4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4ae:	4a2d      	ldr	r2, [pc, #180]	; (2d564 <chk_mounted+0x5e0>)
   2d4b0:	5c9b      	ldrb	r3, [r3, r2]
   2d4b2:	061a      	lsls	r2, r3, #24
   2d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4b6:	492c      	ldr	r1, [pc, #176]	; (2d568 <chk_mounted+0x5e4>)
   2d4b8:	5c5b      	ldrb	r3, [r3, r1]
   2d4ba:	041b      	lsls	r3, r3, #16
   2d4bc:	4313      	orrs	r3, r2
   2d4be:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d4c0:	492a      	ldr	r1, [pc, #168]	; (2d56c <chk_mounted+0x5e8>)
   2d4c2:	5c52      	ldrb	r2, [r2, r1]
   2d4c4:	0212      	lsls	r2, r2, #8
   2d4c6:	4313      	orrs	r3, r2
   2d4c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d4ca:	2287      	movs	r2, #135	; 0x87
   2d4cc:	0092      	lsls	r2, r2, #2
   2d4ce:	5c8a      	ldrb	r2, [r1, r2]
   2d4d0:	431a      	orrs	r2, r3
   2d4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4d4:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2d4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4d8:	4a25      	ldr	r2, [pc, #148]	; (2d570 <chk_mounted+0x5ec>)
   2d4da:	5c9b      	ldrb	r3, [r3, r2]
   2d4dc:	061a      	lsls	r2, r3, #24
   2d4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4e0:	4924      	ldr	r1, [pc, #144]	; (2d574 <chk_mounted+0x5f0>)
   2d4e2:	5c5b      	ldrb	r3, [r3, r1]
   2d4e4:	041b      	lsls	r3, r3, #16
   2d4e6:	4313      	orrs	r3, r2
   2d4e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d4ea:	4923      	ldr	r1, [pc, #140]	; (2d578 <chk_mounted+0x5f4>)
   2d4ec:	5c52      	ldrb	r2, [r2, r1]
   2d4ee:	0212      	lsls	r2, r2, #8
   2d4f0:	4313      	orrs	r3, r2
   2d4f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d4f4:	2286      	movs	r2, #134	; 0x86
   2d4f6:	0092      	lsls	r2, r2, #2
   2d4f8:	5c8a      	ldrb	r2, [r1, r2]
   2d4fa:	431a      	orrs	r2, r3
   2d4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4fe:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2d500:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d502:	2247      	movs	r2, #71	; 0x47
   2d504:	18ba      	adds	r2, r7, r2
   2d506:	7812      	ldrb	r2, [r2, #0]
   2d508:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2d50a:	4b1c      	ldr	r3, [pc, #112]	; (2d57c <chk_mounted+0x5f8>)
   2d50c:	881b      	ldrh	r3, [r3, #0]
   2d50e:	3301      	adds	r3, #1
   2d510:	b29a      	uxth	r2, r3
   2d512:	4b1a      	ldr	r3, [pc, #104]	; (2d57c <chk_mounted+0x5f8>)
   2d514:	801a      	strh	r2, [r3, #0]
   2d516:	4b19      	ldr	r3, [pc, #100]	; (2d57c <chk_mounted+0x5f8>)
   2d518:	881a      	ldrh	r2, [r3, #0]
   2d51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d51c:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2d51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d520:	2200      	movs	r2, #0
   2d522:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2d524:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d526:	2200      	movs	r2, #0
   2d528:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2d52a:	2300      	movs	r3, #0
}
   2d52c:	0018      	movs	r0, r3
   2d52e:	46bd      	mov	sp, r7
   2d530:	b013      	add	sp, #76	; 0x4c
   2d532:	bd90      	pop	{r4, r7, pc}
   2d534:	00000ff5 	.word	0x00000ff5
   2d538:	0000fff5 	.word	0x0000fff5
   2d53c:	000001ff 	.word	0x000001ff
   2d540:	0002b119 	.word	0x0002b119
   2d544:	0000022f 	.word	0x0000022f
   2d548:	0000022e 	.word	0x0000022e
   2d54c:	ffffaa55 	.word	0xffffaa55
   2d550:	41615252 	.word	0x41615252
   2d554:	00000217 	.word	0x00000217
   2d558:	00000216 	.word	0x00000216
   2d55c:	00000215 	.word	0x00000215
   2d560:	61417272 	.word	0x61417272
   2d564:	0000021f 	.word	0x0000021f
   2d568:	0000021e 	.word	0x0000021e
   2d56c:	0000021d 	.word	0x0000021d
   2d570:	0000021b 	.word	0x0000021b
   2d574:	0000021a 	.word	0x0000021a
   2d578:	00000219 	.word	0x00000219
   2d57c:	200041bc 	.word	0x200041bc

0002d580 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2d580:	b580      	push	{r7, lr}
   2d582:	b082      	sub	sp, #8
   2d584:	af00      	add	r7, sp, #0
   2d586:	6078      	str	r0, [r7, #4]
   2d588:	000a      	movs	r2, r1
   2d58a:	1cbb      	adds	r3, r7, #2
   2d58c:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2d58e:	687b      	ldr	r3, [r7, #4]
   2d590:	2b00      	cmp	r3, #0
   2d592:	d009      	beq.n	2d5a8 <validate+0x28>
   2d594:	687b      	ldr	r3, [r7, #4]
   2d596:	781b      	ldrb	r3, [r3, #0]
   2d598:	2b00      	cmp	r3, #0
   2d59a:	d005      	beq.n	2d5a8 <validate+0x28>
   2d59c:	687b      	ldr	r3, [r7, #4]
   2d59e:	88db      	ldrh	r3, [r3, #6]
   2d5a0:	1cba      	adds	r2, r7, #2
   2d5a2:	8812      	ldrh	r2, [r2, #0]
   2d5a4:	429a      	cmp	r2, r3
   2d5a6:	d001      	beq.n	2d5ac <validate+0x2c>
		return FR_INVALID_OBJECT;
   2d5a8:	2309      	movs	r3, #9
   2d5aa:	e00c      	b.n	2d5c6 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2d5ac:	687b      	ldr	r3, [r7, #4]
   2d5ae:	785b      	ldrb	r3, [r3, #1]
   2d5b0:	0018      	movs	r0, r3
   2d5b2:	4b07      	ldr	r3, [pc, #28]	; (2d5d0 <validate+0x50>)
   2d5b4:	4798      	blx	r3
   2d5b6:	0003      	movs	r3, r0
   2d5b8:	001a      	movs	r2, r3
   2d5ba:	2301      	movs	r3, #1
   2d5bc:	4013      	ands	r3, r2
   2d5be:	d001      	beq.n	2d5c4 <validate+0x44>
		return FR_NOT_READY;
   2d5c0:	2303      	movs	r3, #3
   2d5c2:	e000      	b.n	2d5c6 <validate+0x46>

	return FR_OK;
   2d5c4:	2300      	movs	r3, #0
}
   2d5c6:	0018      	movs	r0, r3
   2d5c8:	46bd      	mov	sp, r7
   2d5ca:	b002      	add	sp, #8
   2d5cc:	bd80      	pop	{r7, pc}
   2d5ce:	46c0      	nop			; (mov r8, r8)
   2d5d0:	0002b0e1 	.word	0x0002b0e1

0002d5d4 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2d5d4:	b580      	push	{r7, lr}
   2d5d6:	b084      	sub	sp, #16
   2d5d8:	af00      	add	r7, sp, #0
   2d5da:	0002      	movs	r2, r0
   2d5dc:	6039      	str	r1, [r7, #0]
   2d5de:	1dfb      	adds	r3, r7, #7
   2d5e0:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2d5e2:	1dfb      	adds	r3, r7, #7
   2d5e4:	781b      	ldrb	r3, [r3, #0]
   2d5e6:	2b07      	cmp	r3, #7
   2d5e8:	d901      	bls.n	2d5ee <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2d5ea:	230b      	movs	r3, #11
   2d5ec:	e018      	b.n	2d620 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2d5ee:	1dfb      	adds	r3, r7, #7
   2d5f0:	781a      	ldrb	r2, [r3, #0]
   2d5f2:	4b0d      	ldr	r3, [pc, #52]	; (2d628 <f_mount+0x54>)
   2d5f4:	0092      	lsls	r2, r2, #2
   2d5f6:	58d3      	ldr	r3, [r2, r3]
   2d5f8:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2d5fa:	68fb      	ldr	r3, [r7, #12]
   2d5fc:	2b00      	cmp	r3, #0
   2d5fe:	d002      	beq.n	2d606 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2d600:	68fb      	ldr	r3, [r7, #12]
   2d602:	2200      	movs	r2, #0
   2d604:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2d606:	683b      	ldr	r3, [r7, #0]
   2d608:	2b00      	cmp	r3, #0
   2d60a:	d002      	beq.n	2d612 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2d60c:	683b      	ldr	r3, [r7, #0]
   2d60e:	2200      	movs	r2, #0
   2d610:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2d612:	1dfb      	adds	r3, r7, #7
   2d614:	781a      	ldrb	r2, [r3, #0]
   2d616:	4b04      	ldr	r3, [pc, #16]	; (2d628 <f_mount+0x54>)
   2d618:	0092      	lsls	r2, r2, #2
   2d61a:	6839      	ldr	r1, [r7, #0]
   2d61c:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2d61e:	2300      	movs	r3, #0
}
   2d620:	0018      	movs	r0, r3
   2d622:	46bd      	mov	sp, r7
   2d624:	b004      	add	sp, #16
   2d626:	bd80      	pop	{r7, pc}
   2d628:	2000419c 	.word	0x2000419c

0002d62c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2d62c:	b590      	push	{r4, r7, lr}
   2d62e:	4ce5      	ldr	r4, [pc, #916]	; (2d9c4 <f_open+0x398>)
   2d630:	44a5      	add	sp, r4
   2d632:	af00      	add	r7, sp, #0
   2d634:	60f8      	str	r0, [r7, #12]
   2d636:	60b9      	str	r1, [r7, #8]
   2d638:	4be3      	ldr	r3, [pc, #908]	; (2d9c8 <f_open+0x39c>)
   2d63a:	2194      	movs	r1, #148	; 0x94
   2d63c:	0089      	lsls	r1, r1, #2
   2d63e:	468c      	mov	ip, r1
   2d640:	44bc      	add	ip, r7
   2d642:	4463      	add	r3, ip
   2d644:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2d646:	68fb      	ldr	r3, [r7, #12]
   2d648:	2200      	movs	r2, #0
   2d64a:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2d64c:	4bde      	ldr	r3, [pc, #888]	; (2d9c8 <f_open+0x39c>)
   2d64e:	2294      	movs	r2, #148	; 0x94
   2d650:	0092      	lsls	r2, r2, #2
   2d652:	4694      	mov	ip, r2
   2d654:	44bc      	add	ip, r7
   2d656:	4463      	add	r3, ip
   2d658:	4adb      	ldr	r2, [pc, #876]	; (2d9c8 <f_open+0x39c>)
   2d65a:	2194      	movs	r1, #148	; 0x94
   2d65c:	0089      	lsls	r1, r1, #2
   2d65e:	468c      	mov	ip, r1
   2d660:	44bc      	add	ip, r7
   2d662:	4462      	add	r2, ip
   2d664:	7812      	ldrb	r2, [r2, #0]
   2d666:	211f      	movs	r1, #31
   2d668:	400a      	ands	r2, r1
   2d66a:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2d66c:	4bd6      	ldr	r3, [pc, #856]	; (2d9c8 <f_open+0x39c>)
   2d66e:	2294      	movs	r2, #148	; 0x94
   2d670:	0092      	lsls	r2, r2, #2
   2d672:	4694      	mov	ip, r2
   2d674:	44bc      	add	ip, r7
   2d676:	4463      	add	r3, ip
   2d678:	781b      	ldrb	r3, [r3, #0]
   2d67a:	2201      	movs	r2, #1
   2d67c:	4393      	bics	r3, r2
   2d67e:	b2da      	uxtb	r2, r3
   2d680:	4bd2      	ldr	r3, [pc, #840]	; (2d9cc <f_open+0x3a0>)
   2d682:	18fc      	adds	r4, r7, r3
   2d684:	2387      	movs	r3, #135	; 0x87
   2d686:	009b      	lsls	r3, r3, #2
   2d688:	18f9      	adds	r1, r7, r3
   2d68a:	2308      	movs	r3, #8
   2d68c:	18fb      	adds	r3, r7, r3
   2d68e:	0018      	movs	r0, r3
   2d690:	4bcf      	ldr	r3, [pc, #828]	; (2d9d0 <f_open+0x3a4>)
   2d692:	4798      	blx	r3
   2d694:	0003      	movs	r3, r0
   2d696:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2d698:	2387      	movs	r3, #135	; 0x87
   2d69a:	009b      	lsls	r3, r3, #2
   2d69c:	18fb      	adds	r3, r7, r3
   2d69e:	2284      	movs	r2, #132	; 0x84
   2d6a0:	0092      	lsls	r2, r2, #2
   2d6a2:	18ba      	adds	r2, r7, r2
   2d6a4:	619a      	str	r2, [r3, #24]
   2d6a6:	2387      	movs	r3, #135	; 0x87
   2d6a8:	009b      	lsls	r3, r3, #2
   2d6aa:	18fb      	adds	r3, r7, r3
   2d6ac:	2210      	movs	r2, #16
   2d6ae:	18ba      	adds	r2, r7, r2
   2d6b0:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2d6b2:	4bc6      	ldr	r3, [pc, #792]	; (2d9cc <f_open+0x3a0>)
   2d6b4:	18fb      	adds	r3, r7, r3
   2d6b6:	781b      	ldrb	r3, [r3, #0]
   2d6b8:	2b00      	cmp	r3, #0
   2d6ba:	d10b      	bne.n	2d6d4 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2d6bc:	68ba      	ldr	r2, [r7, #8]
   2d6be:	4bc3      	ldr	r3, [pc, #780]	; (2d9cc <f_open+0x3a0>)
   2d6c0:	18fc      	adds	r4, r7, r3
   2d6c2:	2387      	movs	r3, #135	; 0x87
   2d6c4:	009b      	lsls	r3, r3, #2
   2d6c6:	18fb      	adds	r3, r7, r3
   2d6c8:	0011      	movs	r1, r2
   2d6ca:	0018      	movs	r0, r3
   2d6cc:	4bc1      	ldr	r3, [pc, #772]	; (2d9d4 <f_open+0x3a8>)
   2d6ce:	4798      	blx	r3
   2d6d0:	0003      	movs	r3, r0
   2d6d2:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2d6d4:	2387      	movs	r3, #135	; 0x87
   2d6d6:	009b      	lsls	r3, r3, #2
   2d6d8:	18fb      	adds	r3, r7, r3
   2d6da:	695b      	ldr	r3, [r3, #20]
   2d6dc:	2292      	movs	r2, #146	; 0x92
   2d6de:	0092      	lsls	r2, r2, #2
   2d6e0:	18ba      	adds	r2, r7, r2
   2d6e2:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2d6e4:	4bb9      	ldr	r3, [pc, #740]	; (2d9cc <f_open+0x3a0>)
   2d6e6:	18fb      	adds	r3, r7, r3
   2d6e8:	781b      	ldrb	r3, [r3, #0]
   2d6ea:	2b00      	cmp	r3, #0
   2d6ec:	d109      	bne.n	2d702 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2d6ee:	2392      	movs	r3, #146	; 0x92
   2d6f0:	009b      	lsls	r3, r3, #2
   2d6f2:	18fb      	adds	r3, r7, r3
   2d6f4:	681b      	ldr	r3, [r3, #0]
   2d6f6:	2b00      	cmp	r3, #0
   2d6f8:	d103      	bne.n	2d702 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2d6fa:	4bb4      	ldr	r3, [pc, #720]	; (2d9cc <f_open+0x3a0>)
   2d6fc:	18fb      	adds	r3, r7, r3
   2d6fe:	2206      	movs	r2, #6
   2d700:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2d702:	4bb1      	ldr	r3, [pc, #708]	; (2d9c8 <f_open+0x39c>)
   2d704:	2294      	movs	r2, #148	; 0x94
   2d706:	0092      	lsls	r2, r2, #2
   2d708:	4694      	mov	ip, r2
   2d70a:	44bc      	add	ip, r7
   2d70c:	4463      	add	r3, ip
   2d70e:	781b      	ldrb	r3, [r3, #0]
   2d710:	221c      	movs	r2, #28
   2d712:	4013      	ands	r3, r2
   2d714:	d100      	bne.n	2d718 <f_open+0xec>
   2d716:	e141      	b.n	2d99c <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2d718:	4bac      	ldr	r3, [pc, #688]	; (2d9cc <f_open+0x3a0>)
   2d71a:	18fb      	adds	r3, r7, r3
   2d71c:	781b      	ldrb	r3, [r3, #0]
   2d71e:	2b00      	cmp	r3, #0
   2d720:	d027      	beq.n	2d772 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2d722:	4baa      	ldr	r3, [pc, #680]	; (2d9cc <f_open+0x3a0>)
   2d724:	18fb      	adds	r3, r7, r3
   2d726:	781b      	ldrb	r3, [r3, #0]
   2d728:	2b04      	cmp	r3, #4
   2d72a:	d109      	bne.n	2d740 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2d72c:	4ba7      	ldr	r3, [pc, #668]	; (2d9cc <f_open+0x3a0>)
   2d72e:	18fc      	adds	r4, r7, r3
   2d730:	2387      	movs	r3, #135	; 0x87
   2d732:	009b      	lsls	r3, r3, #2
   2d734:	18fb      	adds	r3, r7, r3
   2d736:	0018      	movs	r0, r3
   2d738:	4ba7      	ldr	r3, [pc, #668]	; (2d9d8 <f_open+0x3ac>)
   2d73a:	4798      	blx	r3
   2d73c:	0003      	movs	r3, r0
   2d73e:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2d740:	4ba1      	ldr	r3, [pc, #644]	; (2d9c8 <f_open+0x39c>)
   2d742:	2294      	movs	r2, #148	; 0x94
   2d744:	0092      	lsls	r2, r2, #2
   2d746:	4694      	mov	ip, r2
   2d748:	44bc      	add	ip, r7
   2d74a:	4463      	add	r3, ip
   2d74c:	4a9e      	ldr	r2, [pc, #632]	; (2d9c8 <f_open+0x39c>)
   2d74e:	2194      	movs	r1, #148	; 0x94
   2d750:	0089      	lsls	r1, r1, #2
   2d752:	468c      	mov	ip, r1
   2d754:	44bc      	add	ip, r7
   2d756:	4462      	add	r2, ip
   2d758:	7812      	ldrb	r2, [r2, #0]
   2d75a:	2108      	movs	r1, #8
   2d75c:	430a      	orrs	r2, r1
   2d75e:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2d760:	2387      	movs	r3, #135	; 0x87
   2d762:	009b      	lsls	r3, r3, #2
   2d764:	18fb      	adds	r3, r7, r3
   2d766:	695b      	ldr	r3, [r3, #20]
   2d768:	2292      	movs	r2, #146	; 0x92
   2d76a:	0092      	lsls	r2, r2, #2
   2d76c:	18ba      	adds	r2, r7, r2
   2d76e:	6013      	str	r3, [r2, #0]
   2d770:	e01c      	b.n	2d7ac <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2d772:	2392      	movs	r3, #146	; 0x92
   2d774:	009b      	lsls	r3, r3, #2
   2d776:	18fb      	adds	r3, r7, r3
   2d778:	681b      	ldr	r3, [r3, #0]
   2d77a:	330b      	adds	r3, #11
   2d77c:	781b      	ldrb	r3, [r3, #0]
   2d77e:	001a      	movs	r2, r3
   2d780:	2311      	movs	r3, #17
   2d782:	4013      	ands	r3, r2
   2d784:	d004      	beq.n	2d790 <f_open+0x164>
				res = FR_DENIED;
   2d786:	4b91      	ldr	r3, [pc, #580]	; (2d9cc <f_open+0x3a0>)
   2d788:	18fb      	adds	r3, r7, r3
   2d78a:	2207      	movs	r2, #7
   2d78c:	701a      	strb	r2, [r3, #0]
   2d78e:	e00d      	b.n	2d7ac <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2d790:	4b8d      	ldr	r3, [pc, #564]	; (2d9c8 <f_open+0x39c>)
   2d792:	2294      	movs	r2, #148	; 0x94
   2d794:	0092      	lsls	r2, r2, #2
   2d796:	4694      	mov	ip, r2
   2d798:	44bc      	add	ip, r7
   2d79a:	4463      	add	r3, ip
   2d79c:	781b      	ldrb	r3, [r3, #0]
   2d79e:	2204      	movs	r2, #4
   2d7a0:	4013      	ands	r3, r2
   2d7a2:	d003      	beq.n	2d7ac <f_open+0x180>
					res = FR_EXIST;
   2d7a4:	4b89      	ldr	r3, [pc, #548]	; (2d9cc <f_open+0x3a0>)
   2d7a6:	18fb      	adds	r3, r7, r3
   2d7a8:	2208      	movs	r2, #8
   2d7aa:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2d7ac:	4b87      	ldr	r3, [pc, #540]	; (2d9cc <f_open+0x3a0>)
   2d7ae:	18fb      	adds	r3, r7, r3
   2d7b0:	781b      	ldrb	r3, [r3, #0]
   2d7b2:	2b00      	cmp	r3, #0
   2d7b4:	d000      	beq.n	2d7b8 <f_open+0x18c>
   2d7b6:	e12f      	b.n	2da18 <f_open+0x3ec>
   2d7b8:	4b83      	ldr	r3, [pc, #524]	; (2d9c8 <f_open+0x39c>)
   2d7ba:	2294      	movs	r2, #148	; 0x94
   2d7bc:	0092      	lsls	r2, r2, #2
   2d7be:	4694      	mov	ip, r2
   2d7c0:	44bc      	add	ip, r7
   2d7c2:	4463      	add	r3, ip
   2d7c4:	781b      	ldrb	r3, [r3, #0]
   2d7c6:	2208      	movs	r2, #8
   2d7c8:	4013      	ands	r3, r2
   2d7ca:	d100      	bne.n	2d7ce <f_open+0x1a2>
   2d7cc:	e124      	b.n	2da18 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2d7ce:	4b83      	ldr	r3, [pc, #524]	; (2d9dc <f_open+0x3b0>)
   2d7d0:	4798      	blx	r3
   2d7d2:	0003      	movs	r3, r0
   2d7d4:	2291      	movs	r2, #145	; 0x91
   2d7d6:	0092      	lsls	r2, r2, #2
   2d7d8:	18ba      	adds	r2, r7, r2
   2d7da:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2d7dc:	2392      	movs	r3, #146	; 0x92
   2d7de:	009b      	lsls	r3, r3, #2
   2d7e0:	18fb      	adds	r3, r7, r3
   2d7e2:	681b      	ldr	r3, [r3, #0]
   2d7e4:	330e      	adds	r3, #14
   2d7e6:	2291      	movs	r2, #145	; 0x91
   2d7e8:	0092      	lsls	r2, r2, #2
   2d7ea:	18ba      	adds	r2, r7, r2
   2d7ec:	6812      	ldr	r2, [r2, #0]
   2d7ee:	b2d2      	uxtb	r2, r2
   2d7f0:	701a      	strb	r2, [r3, #0]
   2d7f2:	2392      	movs	r3, #146	; 0x92
   2d7f4:	009b      	lsls	r3, r3, #2
   2d7f6:	18fb      	adds	r3, r7, r3
   2d7f8:	681b      	ldr	r3, [r3, #0]
   2d7fa:	330f      	adds	r3, #15
   2d7fc:	2291      	movs	r2, #145	; 0x91
   2d7fe:	0092      	lsls	r2, r2, #2
   2d800:	18ba      	adds	r2, r7, r2
   2d802:	6812      	ldr	r2, [r2, #0]
   2d804:	b292      	uxth	r2, r2
   2d806:	0a12      	lsrs	r2, r2, #8
   2d808:	b292      	uxth	r2, r2
   2d80a:	b2d2      	uxtb	r2, r2
   2d80c:	701a      	strb	r2, [r3, #0]
   2d80e:	2392      	movs	r3, #146	; 0x92
   2d810:	009b      	lsls	r3, r3, #2
   2d812:	18fb      	adds	r3, r7, r3
   2d814:	681b      	ldr	r3, [r3, #0]
   2d816:	3310      	adds	r3, #16
   2d818:	2291      	movs	r2, #145	; 0x91
   2d81a:	0092      	lsls	r2, r2, #2
   2d81c:	18ba      	adds	r2, r7, r2
   2d81e:	6812      	ldr	r2, [r2, #0]
   2d820:	0c12      	lsrs	r2, r2, #16
   2d822:	b2d2      	uxtb	r2, r2
   2d824:	701a      	strb	r2, [r3, #0]
   2d826:	2392      	movs	r3, #146	; 0x92
   2d828:	009b      	lsls	r3, r3, #2
   2d82a:	18fb      	adds	r3, r7, r3
   2d82c:	681b      	ldr	r3, [r3, #0]
   2d82e:	3311      	adds	r3, #17
   2d830:	2291      	movs	r2, #145	; 0x91
   2d832:	0092      	lsls	r2, r2, #2
   2d834:	18ba      	adds	r2, r7, r2
   2d836:	6812      	ldr	r2, [r2, #0]
   2d838:	0e12      	lsrs	r2, r2, #24
   2d83a:	b2d2      	uxtb	r2, r2
   2d83c:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2d83e:	2392      	movs	r3, #146	; 0x92
   2d840:	009b      	lsls	r3, r3, #2
   2d842:	18fb      	adds	r3, r7, r3
   2d844:	681b      	ldr	r3, [r3, #0]
   2d846:	330b      	adds	r3, #11
   2d848:	2200      	movs	r2, #0
   2d84a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2d84c:	2392      	movs	r3, #146	; 0x92
   2d84e:	009b      	lsls	r3, r3, #2
   2d850:	18fb      	adds	r3, r7, r3
   2d852:	681b      	ldr	r3, [r3, #0]
   2d854:	331c      	adds	r3, #28
   2d856:	2200      	movs	r2, #0
   2d858:	701a      	strb	r2, [r3, #0]
   2d85a:	2392      	movs	r3, #146	; 0x92
   2d85c:	009b      	lsls	r3, r3, #2
   2d85e:	18fb      	adds	r3, r7, r3
   2d860:	681b      	ldr	r3, [r3, #0]
   2d862:	331d      	adds	r3, #29
   2d864:	2200      	movs	r2, #0
   2d866:	701a      	strb	r2, [r3, #0]
   2d868:	2392      	movs	r3, #146	; 0x92
   2d86a:	009b      	lsls	r3, r3, #2
   2d86c:	18fb      	adds	r3, r7, r3
   2d86e:	681b      	ldr	r3, [r3, #0]
   2d870:	331e      	adds	r3, #30
   2d872:	2200      	movs	r2, #0
   2d874:	701a      	strb	r2, [r3, #0]
   2d876:	2392      	movs	r3, #146	; 0x92
   2d878:	009b      	lsls	r3, r3, #2
   2d87a:	18fb      	adds	r3, r7, r3
   2d87c:	681b      	ldr	r3, [r3, #0]
   2d87e:	331f      	adds	r3, #31
   2d880:	2200      	movs	r2, #0
   2d882:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2d884:	2392      	movs	r3, #146	; 0x92
   2d886:	009b      	lsls	r3, r3, #2
   2d888:	18fb      	adds	r3, r7, r3
   2d88a:	681b      	ldr	r3, [r3, #0]
   2d88c:	3315      	adds	r3, #21
   2d88e:	781b      	ldrb	r3, [r3, #0]
   2d890:	021b      	lsls	r3, r3, #8
   2d892:	b21a      	sxth	r2, r3
   2d894:	2392      	movs	r3, #146	; 0x92
   2d896:	009b      	lsls	r3, r3, #2
   2d898:	18fb      	adds	r3, r7, r3
   2d89a:	681b      	ldr	r3, [r3, #0]
   2d89c:	3314      	adds	r3, #20
   2d89e:	781b      	ldrb	r3, [r3, #0]
   2d8a0:	b21b      	sxth	r3, r3
   2d8a2:	4313      	orrs	r3, r2
   2d8a4:	b21b      	sxth	r3, r3
   2d8a6:	b29b      	uxth	r3, r3
   2d8a8:	041b      	lsls	r3, r3, #16
   2d8aa:	2292      	movs	r2, #146	; 0x92
   2d8ac:	0092      	lsls	r2, r2, #2
   2d8ae:	18ba      	adds	r2, r7, r2
   2d8b0:	6812      	ldr	r2, [r2, #0]
   2d8b2:	321b      	adds	r2, #27
   2d8b4:	7812      	ldrb	r2, [r2, #0]
   2d8b6:	0212      	lsls	r2, r2, #8
   2d8b8:	b211      	sxth	r1, r2
   2d8ba:	2292      	movs	r2, #146	; 0x92
   2d8bc:	0092      	lsls	r2, r2, #2
   2d8be:	18ba      	adds	r2, r7, r2
   2d8c0:	6812      	ldr	r2, [r2, #0]
   2d8c2:	321a      	adds	r2, #26
   2d8c4:	7812      	ldrb	r2, [r2, #0]
   2d8c6:	b212      	sxth	r2, r2
   2d8c8:	430a      	orrs	r2, r1
   2d8ca:	b212      	sxth	r2, r2
   2d8cc:	b292      	uxth	r2, r2
   2d8ce:	4313      	orrs	r3, r2
   2d8d0:	2290      	movs	r2, #144	; 0x90
   2d8d2:	0092      	lsls	r2, r2, #2
   2d8d4:	18ba      	adds	r2, r7, r2
   2d8d6:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2d8d8:	2392      	movs	r3, #146	; 0x92
   2d8da:	009b      	lsls	r3, r3, #2
   2d8dc:	18fb      	adds	r3, r7, r3
   2d8de:	681b      	ldr	r3, [r3, #0]
   2d8e0:	331a      	adds	r3, #26
   2d8e2:	2200      	movs	r2, #0
   2d8e4:	701a      	strb	r2, [r3, #0]
   2d8e6:	2392      	movs	r3, #146	; 0x92
   2d8e8:	009b      	lsls	r3, r3, #2
   2d8ea:	18fb      	adds	r3, r7, r3
   2d8ec:	681b      	ldr	r3, [r3, #0]
   2d8ee:	331b      	adds	r3, #27
   2d8f0:	2200      	movs	r2, #0
   2d8f2:	701a      	strb	r2, [r3, #0]
   2d8f4:	2392      	movs	r3, #146	; 0x92
   2d8f6:	009b      	lsls	r3, r3, #2
   2d8f8:	18fb      	adds	r3, r7, r3
   2d8fa:	681b      	ldr	r3, [r3, #0]
   2d8fc:	3314      	adds	r3, #20
   2d8fe:	2200      	movs	r2, #0
   2d900:	701a      	strb	r2, [r3, #0]
   2d902:	2392      	movs	r3, #146	; 0x92
   2d904:	009b      	lsls	r3, r3, #2
   2d906:	18fb      	adds	r3, r7, r3
   2d908:	681b      	ldr	r3, [r3, #0]
   2d90a:	3315      	adds	r3, #21
   2d90c:	2200      	movs	r2, #0
   2d90e:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2d910:	2387      	movs	r3, #135	; 0x87
   2d912:	009b      	lsls	r3, r3, #2
   2d914:	18fb      	adds	r3, r7, r3
   2d916:	681b      	ldr	r3, [r3, #0]
   2d918:	2201      	movs	r2, #1
   2d91a:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2d91c:	2390      	movs	r3, #144	; 0x90
   2d91e:	009b      	lsls	r3, r3, #2
   2d920:	18fb      	adds	r3, r7, r3
   2d922:	681b      	ldr	r3, [r3, #0]
   2d924:	2b00      	cmp	r3, #0
   2d926:	d100      	bne.n	2d92a <f_open+0x2fe>
   2d928:	e076      	b.n	2da18 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2d92a:	2387      	movs	r3, #135	; 0x87
   2d92c:	009b      	lsls	r3, r3, #2
   2d92e:	18fb      	adds	r3, r7, r3
   2d930:	681b      	ldr	r3, [r3, #0]
   2d932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2d934:	2291      	movs	r2, #145	; 0x91
   2d936:	0092      	lsls	r2, r2, #2
   2d938:	18ba      	adds	r2, r7, r2
   2d93a:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2d93c:	2387      	movs	r3, #135	; 0x87
   2d93e:	009b      	lsls	r3, r3, #2
   2d940:	18fb      	adds	r3, r7, r3
   2d942:	681b      	ldr	r3, [r3, #0]
   2d944:	4a21      	ldr	r2, [pc, #132]	; (2d9cc <f_open+0x3a0>)
   2d946:	18bc      	adds	r4, r7, r2
   2d948:	2290      	movs	r2, #144	; 0x90
   2d94a:	0092      	lsls	r2, r2, #2
   2d94c:	18ba      	adds	r2, r7, r2
   2d94e:	6812      	ldr	r2, [r2, #0]
   2d950:	0011      	movs	r1, r2
   2d952:	0018      	movs	r0, r3
   2d954:	4b22      	ldr	r3, [pc, #136]	; (2d9e0 <f_open+0x3b4>)
   2d956:	4798      	blx	r3
   2d958:	0003      	movs	r3, r0
   2d95a:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2d95c:	4b1b      	ldr	r3, [pc, #108]	; (2d9cc <f_open+0x3a0>)
   2d95e:	18fb      	adds	r3, r7, r3
   2d960:	781b      	ldrb	r3, [r3, #0]
   2d962:	2b00      	cmp	r3, #0
   2d964:	d158      	bne.n	2da18 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2d966:	2387      	movs	r3, #135	; 0x87
   2d968:	009b      	lsls	r3, r3, #2
   2d96a:	18fb      	adds	r3, r7, r3
   2d96c:	681b      	ldr	r3, [r3, #0]
   2d96e:	2290      	movs	r2, #144	; 0x90
   2d970:	0092      	lsls	r2, r2, #2
   2d972:	18ba      	adds	r2, r7, r2
   2d974:	6812      	ldr	r2, [r2, #0]
   2d976:	3a01      	subs	r2, #1
   2d978:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2d97a:	2387      	movs	r3, #135	; 0x87
   2d97c:	009b      	lsls	r3, r3, #2
   2d97e:	18fb      	adds	r3, r7, r3
   2d980:	681b      	ldr	r3, [r3, #0]
   2d982:	4a12      	ldr	r2, [pc, #72]	; (2d9cc <f_open+0x3a0>)
   2d984:	18bc      	adds	r4, r7, r2
   2d986:	2291      	movs	r2, #145	; 0x91
   2d988:	0092      	lsls	r2, r2, #2
   2d98a:	18ba      	adds	r2, r7, r2
   2d98c:	6812      	ldr	r2, [r2, #0]
   2d98e:	0011      	movs	r1, r2
   2d990:	0018      	movs	r0, r3
   2d992:	4b14      	ldr	r3, [pc, #80]	; (2d9e4 <f_open+0x3b8>)
   2d994:	4798      	blx	r3
   2d996:	0003      	movs	r3, r0
   2d998:	7023      	strb	r3, [r4, #0]
   2d99a:	e03d      	b.n	2da18 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2d99c:	4b0b      	ldr	r3, [pc, #44]	; (2d9cc <f_open+0x3a0>)
   2d99e:	18fb      	adds	r3, r7, r3
   2d9a0:	781b      	ldrb	r3, [r3, #0]
   2d9a2:	2b00      	cmp	r3, #0
   2d9a4:	d138      	bne.n	2da18 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2d9a6:	2392      	movs	r3, #146	; 0x92
   2d9a8:	009b      	lsls	r3, r3, #2
   2d9aa:	18fb      	adds	r3, r7, r3
   2d9ac:	681b      	ldr	r3, [r3, #0]
   2d9ae:	330b      	adds	r3, #11
   2d9b0:	781b      	ldrb	r3, [r3, #0]
   2d9b2:	001a      	movs	r2, r3
   2d9b4:	2310      	movs	r3, #16
   2d9b6:	4013      	ands	r3, r2
   2d9b8:	d016      	beq.n	2d9e8 <f_open+0x3bc>
				res = FR_NO_FILE;
   2d9ba:	4b04      	ldr	r3, [pc, #16]	; (2d9cc <f_open+0x3a0>)
   2d9bc:	18fb      	adds	r3, r7, r3
   2d9be:	2204      	movs	r2, #4
   2d9c0:	701a      	strb	r2, [r3, #0]
   2d9c2:	e029      	b.n	2da18 <f_open+0x3ec>
   2d9c4:	fffffdac 	.word	0xfffffdac
   2d9c8:	fffffdb7 	.word	0xfffffdb7
   2d9cc:	0000024f 	.word	0x0000024f
   2d9d0:	0002cf85 	.word	0x0002cf85
   2d9d4:	0002cd79 	.word	0x0002cd79
   2d9d8:	0002c5c9 	.word	0x0002c5c9
   2d9dc:	0002b3c1 	.word	0x0002b3c1
   2d9e0:	0002bb45 	.word	0x0002bb45
   2d9e4:	0002b505 	.word	0x0002b505
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2d9e8:	4b5a      	ldr	r3, [pc, #360]	; (2db54 <f_open+0x528>)
   2d9ea:	2294      	movs	r2, #148	; 0x94
   2d9ec:	0092      	lsls	r2, r2, #2
   2d9ee:	4694      	mov	ip, r2
   2d9f0:	44bc      	add	ip, r7
   2d9f2:	4463      	add	r3, ip
   2d9f4:	781b      	ldrb	r3, [r3, #0]
   2d9f6:	2202      	movs	r2, #2
   2d9f8:	4013      	ands	r3, r2
   2d9fa:	d00d      	beq.n	2da18 <f_open+0x3ec>
   2d9fc:	2392      	movs	r3, #146	; 0x92
   2d9fe:	009b      	lsls	r3, r3, #2
   2da00:	18fb      	adds	r3, r7, r3
   2da02:	681b      	ldr	r3, [r3, #0]
   2da04:	330b      	adds	r3, #11
   2da06:	781b      	ldrb	r3, [r3, #0]
   2da08:	001a      	movs	r2, r3
   2da0a:	2301      	movs	r3, #1
   2da0c:	4013      	ands	r3, r2
   2da0e:	d003      	beq.n	2da18 <f_open+0x3ec>
					res = FR_DENIED;
   2da10:	4b51      	ldr	r3, [pc, #324]	; (2db58 <f_open+0x52c>)
   2da12:	18fb      	adds	r3, r7, r3
   2da14:	2207      	movs	r2, #7
   2da16:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2da18:	4b4f      	ldr	r3, [pc, #316]	; (2db58 <f_open+0x52c>)
   2da1a:	18fb      	adds	r3, r7, r3
   2da1c:	781b      	ldrb	r3, [r3, #0]
   2da1e:	2b00      	cmp	r3, #0
   2da20:	d126      	bne.n	2da70 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2da22:	4b4c      	ldr	r3, [pc, #304]	; (2db54 <f_open+0x528>)
   2da24:	2294      	movs	r2, #148	; 0x94
   2da26:	0092      	lsls	r2, r2, #2
   2da28:	4694      	mov	ip, r2
   2da2a:	44bc      	add	ip, r7
   2da2c:	4463      	add	r3, ip
   2da2e:	781b      	ldrb	r3, [r3, #0]
   2da30:	2208      	movs	r2, #8
   2da32:	4013      	ands	r3, r2
   2da34:	d00f      	beq.n	2da56 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2da36:	4b47      	ldr	r3, [pc, #284]	; (2db54 <f_open+0x528>)
   2da38:	2294      	movs	r2, #148	; 0x94
   2da3a:	0092      	lsls	r2, r2, #2
   2da3c:	4694      	mov	ip, r2
   2da3e:	44bc      	add	ip, r7
   2da40:	4463      	add	r3, ip
   2da42:	4a44      	ldr	r2, [pc, #272]	; (2db54 <f_open+0x528>)
   2da44:	2194      	movs	r1, #148	; 0x94
   2da46:	0089      	lsls	r1, r1, #2
   2da48:	468c      	mov	ip, r1
   2da4a:	44bc      	add	ip, r7
   2da4c:	4462      	add	r2, ip
   2da4e:	7812      	ldrb	r2, [r2, #0]
   2da50:	2120      	movs	r1, #32
   2da52:	430a      	orrs	r2, r1
   2da54:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2da56:	2387      	movs	r3, #135	; 0x87
   2da58:	009b      	lsls	r3, r3, #2
   2da5a:	18fb      	adds	r3, r7, r3
   2da5c:	681b      	ldr	r3, [r3, #0]
   2da5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2da60:	68fb      	ldr	r3, [r7, #12]
   2da62:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2da64:	68fb      	ldr	r3, [r7, #12]
   2da66:	2292      	movs	r2, #146	; 0x92
   2da68:	0092      	lsls	r2, r2, #2
   2da6a:	18ba      	adds	r2, r7, r2
   2da6c:	6812      	ldr	r2, [r2, #0]
   2da6e:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2da70:	4b39      	ldr	r3, [pc, #228]	; (2db58 <f_open+0x52c>)
   2da72:	18fb      	adds	r3, r7, r3
   2da74:	781b      	ldrb	r3, [r3, #0]
   2da76:	2b00      	cmp	r3, #0
   2da78:	d163      	bne.n	2db42 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2da7a:	68fb      	ldr	r3, [r7, #12]
   2da7c:	4a35      	ldr	r2, [pc, #212]	; (2db54 <f_open+0x528>)
   2da7e:	2194      	movs	r1, #148	; 0x94
   2da80:	0089      	lsls	r1, r1, #2
   2da82:	468c      	mov	ip, r1
   2da84:	44bc      	add	ip, r7
   2da86:	4462      	add	r2, ip
   2da88:	7812      	ldrb	r2, [r2, #0]
   2da8a:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2da8c:	2392      	movs	r3, #146	; 0x92
   2da8e:	009b      	lsls	r3, r3, #2
   2da90:	18fb      	adds	r3, r7, r3
   2da92:	681b      	ldr	r3, [r3, #0]
   2da94:	3315      	adds	r3, #21
   2da96:	781b      	ldrb	r3, [r3, #0]
   2da98:	021b      	lsls	r3, r3, #8
   2da9a:	b21a      	sxth	r2, r3
   2da9c:	2392      	movs	r3, #146	; 0x92
   2da9e:	009b      	lsls	r3, r3, #2
   2daa0:	18fb      	adds	r3, r7, r3
   2daa2:	681b      	ldr	r3, [r3, #0]
   2daa4:	3314      	adds	r3, #20
   2daa6:	781b      	ldrb	r3, [r3, #0]
   2daa8:	b21b      	sxth	r3, r3
   2daaa:	4313      	orrs	r3, r2
   2daac:	b21b      	sxth	r3, r3
   2daae:	b29b      	uxth	r3, r3
   2dab0:	041b      	lsls	r3, r3, #16
   2dab2:	2292      	movs	r2, #146	; 0x92
   2dab4:	0092      	lsls	r2, r2, #2
   2dab6:	18ba      	adds	r2, r7, r2
   2dab8:	6812      	ldr	r2, [r2, #0]
   2daba:	321b      	adds	r2, #27
   2dabc:	7812      	ldrb	r2, [r2, #0]
   2dabe:	0212      	lsls	r2, r2, #8
   2dac0:	b211      	sxth	r1, r2
   2dac2:	2292      	movs	r2, #146	; 0x92
   2dac4:	0092      	lsls	r2, r2, #2
   2dac6:	18ba      	adds	r2, r7, r2
   2dac8:	6812      	ldr	r2, [r2, #0]
   2daca:	321a      	adds	r2, #26
   2dacc:	7812      	ldrb	r2, [r2, #0]
   2dace:	b212      	sxth	r2, r2
   2dad0:	430a      	orrs	r2, r1
   2dad2:	b212      	sxth	r2, r2
   2dad4:	b292      	uxth	r2, r2
   2dad6:	431a      	orrs	r2, r3
   2dad8:	68fb      	ldr	r3, [r7, #12]
   2dada:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2dadc:	2392      	movs	r3, #146	; 0x92
   2dade:	009b      	lsls	r3, r3, #2
   2dae0:	18fb      	adds	r3, r7, r3
   2dae2:	681b      	ldr	r3, [r3, #0]
   2dae4:	331f      	adds	r3, #31
   2dae6:	781b      	ldrb	r3, [r3, #0]
   2dae8:	061a      	lsls	r2, r3, #24
   2daea:	2392      	movs	r3, #146	; 0x92
   2daec:	009b      	lsls	r3, r3, #2
   2daee:	18fb      	adds	r3, r7, r3
   2daf0:	681b      	ldr	r3, [r3, #0]
   2daf2:	331e      	adds	r3, #30
   2daf4:	781b      	ldrb	r3, [r3, #0]
   2daf6:	041b      	lsls	r3, r3, #16
   2daf8:	4313      	orrs	r3, r2
   2dafa:	2292      	movs	r2, #146	; 0x92
   2dafc:	0092      	lsls	r2, r2, #2
   2dafe:	18ba      	adds	r2, r7, r2
   2db00:	6812      	ldr	r2, [r2, #0]
   2db02:	321d      	adds	r2, #29
   2db04:	7812      	ldrb	r2, [r2, #0]
   2db06:	0212      	lsls	r2, r2, #8
   2db08:	4313      	orrs	r3, r2
   2db0a:	2292      	movs	r2, #146	; 0x92
   2db0c:	0092      	lsls	r2, r2, #2
   2db0e:	18ba      	adds	r2, r7, r2
   2db10:	6812      	ldr	r2, [r2, #0]
   2db12:	321c      	adds	r2, #28
   2db14:	7812      	ldrb	r2, [r2, #0]
   2db16:	431a      	orrs	r2, r3
   2db18:	68fb      	ldr	r3, [r7, #12]
   2db1a:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2db1c:	68fb      	ldr	r3, [r7, #12]
   2db1e:	2200      	movs	r2, #0
   2db20:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2db22:	68fb      	ldr	r3, [r7, #12]
   2db24:	2200      	movs	r2, #0
   2db26:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2db28:	2387      	movs	r3, #135	; 0x87
   2db2a:	009b      	lsls	r3, r3, #2
   2db2c:	18fb      	adds	r3, r7, r3
   2db2e:	681a      	ldr	r2, [r3, #0]
   2db30:	68fb      	ldr	r3, [r7, #12]
   2db32:	601a      	str	r2, [r3, #0]
   2db34:	2387      	movs	r3, #135	; 0x87
   2db36:	009b      	lsls	r3, r3, #2
   2db38:	18fb      	adds	r3, r7, r3
   2db3a:	681b      	ldr	r3, [r3, #0]
   2db3c:	88da      	ldrh	r2, [r3, #6]
   2db3e:	68fb      	ldr	r3, [r7, #12]
   2db40:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2db42:	4b05      	ldr	r3, [pc, #20]	; (2db58 <f_open+0x52c>)
   2db44:	18fb      	adds	r3, r7, r3
   2db46:	781b      	ldrb	r3, [r3, #0]
}
   2db48:	0018      	movs	r0, r3
   2db4a:	46bd      	mov	sp, r7
   2db4c:	2395      	movs	r3, #149	; 0x95
   2db4e:	009b      	lsls	r3, r3, #2
   2db50:	449d      	add	sp, r3
   2db52:	bd90      	pop	{r4, r7, pc}
   2db54:	fffffdb7 	.word	0xfffffdb7
   2db58:	0000024f 	.word	0x0000024f

0002db5c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2db5c:	b590      	push	{r4, r7, lr}
   2db5e:	b08b      	sub	sp, #44	; 0x2c
   2db60:	af00      	add	r7, sp, #0
   2db62:	60f8      	str	r0, [r7, #12]
   2db64:	60b9      	str	r1, [r7, #8]
   2db66:	607a      	str	r2, [r7, #4]
   2db68:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2db6a:	68bb      	ldr	r3, [r7, #8]
   2db6c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2db6e:	683b      	ldr	r3, [r7, #0]
   2db70:	2200      	movs	r2, #0
   2db72:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2db74:	68fb      	ldr	r3, [r7, #12]
   2db76:	681a      	ldr	r2, [r3, #0]
   2db78:	68fb      	ldr	r3, [r7, #12]
   2db7a:	889b      	ldrh	r3, [r3, #4]
   2db7c:	2117      	movs	r1, #23
   2db7e:	187c      	adds	r4, r7, r1
   2db80:	0019      	movs	r1, r3
   2db82:	0010      	movs	r0, r2
   2db84:	4bc3      	ldr	r3, [pc, #780]	; (2de94 <f_write+0x338>)
   2db86:	4798      	blx	r3
   2db88:	0003      	movs	r3, r0
   2db8a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2db8c:	2317      	movs	r3, #23
   2db8e:	18fb      	adds	r3, r7, r3
   2db90:	781b      	ldrb	r3, [r3, #0]
   2db92:	2b00      	cmp	r3, #0
   2db94:	d003      	beq.n	2db9e <f_write+0x42>
   2db96:	2317      	movs	r3, #23
   2db98:	18fb      	adds	r3, r7, r3
   2db9a:	781b      	ldrb	r3, [r3, #0]
   2db9c:	e176      	b.n	2de8c <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2db9e:	68fb      	ldr	r3, [r7, #12]
   2dba0:	799b      	ldrb	r3, [r3, #6]
   2dba2:	b25b      	sxtb	r3, r3
   2dba4:	2b00      	cmp	r3, #0
   2dba6:	da01      	bge.n	2dbac <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2dba8:	2302      	movs	r3, #2
   2dbaa:	e16f      	b.n	2de8c <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2dbac:	68fb      	ldr	r3, [r7, #12]
   2dbae:	799b      	ldrb	r3, [r3, #6]
   2dbb0:	001a      	movs	r2, r3
   2dbb2:	2302      	movs	r3, #2
   2dbb4:	4013      	ands	r3, r2
   2dbb6:	d101      	bne.n	2dbbc <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2dbb8:	2307      	movs	r3, #7
   2dbba:	e167      	b.n	2de8c <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2dbbc:	68fb      	ldr	r3, [r7, #12]
   2dbbe:	68da      	ldr	r2, [r3, #12]
   2dbc0:	687b      	ldr	r3, [r7, #4]
   2dbc2:	18d2      	adds	r2, r2, r3
   2dbc4:	68fb      	ldr	r3, [r7, #12]
   2dbc6:	68db      	ldr	r3, [r3, #12]
   2dbc8:	429a      	cmp	r2, r3
   2dbca:	d300      	bcc.n	2dbce <f_write+0x72>
   2dbcc:	e146      	b.n	2de5c <f_write+0x300>
   2dbce:	2300      	movs	r3, #0
   2dbd0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2dbd2:	e143      	b.n	2de5c <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2dbd4:	68fb      	ldr	r3, [r7, #12]
   2dbd6:	689b      	ldr	r3, [r3, #8]
   2dbd8:	05db      	lsls	r3, r3, #23
   2dbda:	0ddb      	lsrs	r3, r3, #23
   2dbdc:	d000      	beq.n	2dbe0 <f_write+0x84>
   2dbde:	e0f6      	b.n	2ddce <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2dbe0:	68fb      	ldr	r3, [r7, #12]
   2dbe2:	689b      	ldr	r3, [r3, #8]
   2dbe4:	0a5b      	lsrs	r3, r3, #9
   2dbe6:	b2da      	uxtb	r2, r3
   2dbe8:	68fb      	ldr	r3, [r7, #12]
   2dbea:	681b      	ldr	r3, [r3, #0]
   2dbec:	789b      	ldrb	r3, [r3, #2]
   2dbee:	3b01      	subs	r3, #1
   2dbf0:	b2d9      	uxtb	r1, r3
   2dbf2:	2316      	movs	r3, #22
   2dbf4:	18fb      	adds	r3, r7, r3
   2dbf6:	400a      	ands	r2, r1
   2dbf8:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2dbfa:	2316      	movs	r3, #22
   2dbfc:	18fb      	adds	r3, r7, r3
   2dbfe:	781b      	ldrb	r3, [r3, #0]
   2dc00:	2b00      	cmp	r3, #0
   2dc02:	d140      	bne.n	2dc86 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2dc04:	68fb      	ldr	r3, [r7, #12]
   2dc06:	689b      	ldr	r3, [r3, #8]
   2dc08:	2b00      	cmp	r3, #0
   2dc0a:	d111      	bne.n	2dc30 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2dc0c:	68fb      	ldr	r3, [r7, #12]
   2dc0e:	691b      	ldr	r3, [r3, #16]
   2dc10:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2dc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc14:	2b00      	cmp	r3, #0
   2dc16:	d115      	bne.n	2dc44 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2dc18:	68fb      	ldr	r3, [r7, #12]
   2dc1a:	681b      	ldr	r3, [r3, #0]
   2dc1c:	2100      	movs	r1, #0
   2dc1e:	0018      	movs	r0, r3
   2dc20:	4b9d      	ldr	r3, [pc, #628]	; (2de98 <f_write+0x33c>)
   2dc22:	4798      	blx	r3
   2dc24:	0003      	movs	r3, r0
   2dc26:	627b      	str	r3, [r7, #36]	; 0x24
   2dc28:	68fb      	ldr	r3, [r7, #12]
   2dc2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2dc2c:	611a      	str	r2, [r3, #16]
   2dc2e:	e009      	b.n	2dc44 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2dc30:	68fb      	ldr	r3, [r7, #12]
   2dc32:	681a      	ldr	r2, [r3, #0]
   2dc34:	68fb      	ldr	r3, [r7, #12]
   2dc36:	695b      	ldr	r3, [r3, #20]
   2dc38:	0019      	movs	r1, r3
   2dc3a:	0010      	movs	r0, r2
   2dc3c:	4b96      	ldr	r3, [pc, #600]	; (2de98 <f_write+0x33c>)
   2dc3e:	4798      	blx	r3
   2dc40:	0003      	movs	r3, r0
   2dc42:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2dc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc46:	2b00      	cmp	r3, #0
   2dc48:	d100      	bne.n	2dc4c <f_write+0xf0>
   2dc4a:	e10c      	b.n	2de66 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc4e:	2b01      	cmp	r3, #1
   2dc50:	d109      	bne.n	2dc66 <f_write+0x10a>
   2dc52:	68fb      	ldr	r3, [r7, #12]
   2dc54:	799b      	ldrb	r3, [r3, #6]
   2dc56:	2280      	movs	r2, #128	; 0x80
   2dc58:	4252      	negs	r2, r2
   2dc5a:	4313      	orrs	r3, r2
   2dc5c:	b2da      	uxtb	r2, r3
   2dc5e:	68fb      	ldr	r3, [r7, #12]
   2dc60:	719a      	strb	r2, [r3, #6]
   2dc62:	2302      	movs	r3, #2
   2dc64:	e112      	b.n	2de8c <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2dc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc68:	3301      	adds	r3, #1
   2dc6a:	d109      	bne.n	2dc80 <f_write+0x124>
   2dc6c:	68fb      	ldr	r3, [r7, #12]
   2dc6e:	799b      	ldrb	r3, [r3, #6]
   2dc70:	2280      	movs	r2, #128	; 0x80
   2dc72:	4252      	negs	r2, r2
   2dc74:	4313      	orrs	r3, r2
   2dc76:	b2da      	uxtb	r2, r3
   2dc78:	68fb      	ldr	r3, [r7, #12]
   2dc7a:	719a      	strb	r2, [r3, #6]
   2dc7c:	2301      	movs	r3, #1
   2dc7e:	e105      	b.n	2de8c <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2dc80:	68fb      	ldr	r3, [r7, #12]
   2dc82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2dc84:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2dc86:	68fb      	ldr	r3, [r7, #12]
   2dc88:	681b      	ldr	r3, [r3, #0]
   2dc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2dc8c:	68fb      	ldr	r3, [r7, #12]
   2dc8e:	699b      	ldr	r3, [r3, #24]
   2dc90:	429a      	cmp	r2, r3
   2dc92:	d111      	bne.n	2dcb8 <f_write+0x15c>
   2dc94:	68fb      	ldr	r3, [r7, #12]
   2dc96:	681b      	ldr	r3, [r3, #0]
   2dc98:	2100      	movs	r1, #0
   2dc9a:	0018      	movs	r0, r3
   2dc9c:	4b7f      	ldr	r3, [pc, #508]	; (2de9c <f_write+0x340>)
   2dc9e:	4798      	blx	r3
   2dca0:	1e03      	subs	r3, r0, #0
   2dca2:	d009      	beq.n	2dcb8 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2dca4:	68fb      	ldr	r3, [r7, #12]
   2dca6:	799b      	ldrb	r3, [r3, #6]
   2dca8:	2280      	movs	r2, #128	; 0x80
   2dcaa:	4252      	negs	r2, r2
   2dcac:	4313      	orrs	r3, r2
   2dcae:	b2da      	uxtb	r2, r3
   2dcb0:	68fb      	ldr	r3, [r7, #12]
   2dcb2:	719a      	strb	r2, [r3, #6]
   2dcb4:	2301      	movs	r3, #1
   2dcb6:	e0e9      	b.n	2de8c <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2dcb8:	68fb      	ldr	r3, [r7, #12]
   2dcba:	681a      	ldr	r2, [r3, #0]
   2dcbc:	68fb      	ldr	r3, [r7, #12]
   2dcbe:	695b      	ldr	r3, [r3, #20]
   2dcc0:	0019      	movs	r1, r3
   2dcc2:	0010      	movs	r0, r2
   2dcc4:	4b76      	ldr	r3, [pc, #472]	; (2dea0 <f_write+0x344>)
   2dcc6:	4798      	blx	r3
   2dcc8:	0003      	movs	r3, r0
   2dcca:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2dccc:	693b      	ldr	r3, [r7, #16]
   2dcce:	2b00      	cmp	r3, #0
   2dcd0:	d109      	bne.n	2dce6 <f_write+0x18a>
   2dcd2:	68fb      	ldr	r3, [r7, #12]
   2dcd4:	799b      	ldrb	r3, [r3, #6]
   2dcd6:	2280      	movs	r2, #128	; 0x80
   2dcd8:	4252      	negs	r2, r2
   2dcda:	4313      	orrs	r3, r2
   2dcdc:	b2da      	uxtb	r2, r3
   2dcde:	68fb      	ldr	r3, [r7, #12]
   2dce0:	719a      	strb	r2, [r3, #6]
   2dce2:	2302      	movs	r3, #2
   2dce4:	e0d2      	b.n	2de8c <f_write+0x330>
			sect += csect;
   2dce6:	2316      	movs	r3, #22
   2dce8:	18fb      	adds	r3, r7, r3
   2dcea:	781b      	ldrb	r3, [r3, #0]
   2dcec:	693a      	ldr	r2, [r7, #16]
   2dcee:	18d3      	adds	r3, r2, r3
   2dcf0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2dcf2:	687b      	ldr	r3, [r7, #4]
   2dcf4:	0a5b      	lsrs	r3, r3, #9
   2dcf6:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2dcf8:	69fb      	ldr	r3, [r7, #28]
   2dcfa:	2b00      	cmp	r3, #0
   2dcfc:	d048      	beq.n	2dd90 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2dcfe:	2316      	movs	r3, #22
   2dd00:	18fb      	adds	r3, r7, r3
   2dd02:	781a      	ldrb	r2, [r3, #0]
   2dd04:	69fb      	ldr	r3, [r7, #28]
   2dd06:	18d2      	adds	r2, r2, r3
   2dd08:	68fb      	ldr	r3, [r7, #12]
   2dd0a:	681b      	ldr	r3, [r3, #0]
   2dd0c:	789b      	ldrb	r3, [r3, #2]
   2dd0e:	429a      	cmp	r2, r3
   2dd10:	d908      	bls.n	2dd24 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2dd12:	68fb      	ldr	r3, [r7, #12]
   2dd14:	681b      	ldr	r3, [r3, #0]
   2dd16:	789b      	ldrb	r3, [r3, #2]
   2dd18:	001a      	movs	r2, r3
   2dd1a:	2316      	movs	r3, #22
   2dd1c:	18fb      	adds	r3, r7, r3
   2dd1e:	781b      	ldrb	r3, [r3, #0]
   2dd20:	1ad3      	subs	r3, r2, r3
   2dd22:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2dd24:	68fb      	ldr	r3, [r7, #12]
   2dd26:	681b      	ldr	r3, [r3, #0]
   2dd28:	7858      	ldrb	r0, [r3, #1]
   2dd2a:	69fb      	ldr	r3, [r7, #28]
   2dd2c:	b2db      	uxtb	r3, r3
   2dd2e:	693a      	ldr	r2, [r7, #16]
   2dd30:	69b9      	ldr	r1, [r7, #24]
   2dd32:	4c5c      	ldr	r4, [pc, #368]	; (2dea4 <f_write+0x348>)
   2dd34:	47a0      	blx	r4
   2dd36:	1e03      	subs	r3, r0, #0
   2dd38:	d009      	beq.n	2dd4e <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2dd3a:	68fb      	ldr	r3, [r7, #12]
   2dd3c:	799b      	ldrb	r3, [r3, #6]
   2dd3e:	2280      	movs	r2, #128	; 0x80
   2dd40:	4252      	negs	r2, r2
   2dd42:	4313      	orrs	r3, r2
   2dd44:	b2da      	uxtb	r2, r3
   2dd46:	68fb      	ldr	r3, [r7, #12]
   2dd48:	719a      	strb	r2, [r3, #6]
   2dd4a:	2301      	movs	r3, #1
   2dd4c:	e09e      	b.n	2de8c <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2dd4e:	68fb      	ldr	r3, [r7, #12]
   2dd50:	681b      	ldr	r3, [r3, #0]
   2dd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2dd54:	693b      	ldr	r3, [r7, #16]
   2dd56:	1ad2      	subs	r2, r2, r3
   2dd58:	69fb      	ldr	r3, [r7, #28]
   2dd5a:	429a      	cmp	r2, r3
   2dd5c:	d214      	bcs.n	2dd88 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2dd5e:	68fb      	ldr	r3, [r7, #12]
   2dd60:	681b      	ldr	r3, [r3, #0]
   2dd62:	3330      	adds	r3, #48	; 0x30
   2dd64:	0018      	movs	r0, r3
   2dd66:	68fb      	ldr	r3, [r7, #12]
   2dd68:	681b      	ldr	r3, [r3, #0]
   2dd6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2dd6c:	693b      	ldr	r3, [r7, #16]
   2dd6e:	1ad3      	subs	r3, r2, r3
   2dd70:	025b      	lsls	r3, r3, #9
   2dd72:	69ba      	ldr	r2, [r7, #24]
   2dd74:	18d1      	adds	r1, r2, r3
   2dd76:	2380      	movs	r3, #128	; 0x80
   2dd78:	009b      	lsls	r3, r3, #2
   2dd7a:	001a      	movs	r2, r3
   2dd7c:	4b4a      	ldr	r3, [pc, #296]	; (2dea8 <f_write+0x34c>)
   2dd7e:	4798      	blx	r3
					fp->fs->wflag = 0;
   2dd80:	68fb      	ldr	r3, [r7, #12]
   2dd82:	681b      	ldr	r3, [r3, #0]
   2dd84:	2200      	movs	r2, #0
   2dd86:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2dd88:	69fb      	ldr	r3, [r7, #28]
   2dd8a:	025b      	lsls	r3, r3, #9
   2dd8c:	623b      	str	r3, [r7, #32]
				continue;
   2dd8e:	e051      	b.n	2de34 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2dd90:	68fb      	ldr	r3, [r7, #12]
   2dd92:	689a      	ldr	r2, [r3, #8]
   2dd94:	68fb      	ldr	r3, [r7, #12]
   2dd96:	68db      	ldr	r3, [r3, #12]
   2dd98:	429a      	cmp	r2, r3
   2dd9a:	d315      	bcc.n	2ddc8 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2dd9c:	68fb      	ldr	r3, [r7, #12]
   2dd9e:	681b      	ldr	r3, [r3, #0]
   2dda0:	2100      	movs	r1, #0
   2dda2:	0018      	movs	r0, r3
   2dda4:	4b3d      	ldr	r3, [pc, #244]	; (2de9c <f_write+0x340>)
   2dda6:	4798      	blx	r3
   2dda8:	1e03      	subs	r3, r0, #0
   2ddaa:	d009      	beq.n	2ddc0 <f_write+0x264>
   2ddac:	68fb      	ldr	r3, [r7, #12]
   2ddae:	799b      	ldrb	r3, [r3, #6]
   2ddb0:	2280      	movs	r2, #128	; 0x80
   2ddb2:	4252      	negs	r2, r2
   2ddb4:	4313      	orrs	r3, r2
   2ddb6:	b2da      	uxtb	r2, r3
   2ddb8:	68fb      	ldr	r3, [r7, #12]
   2ddba:	719a      	strb	r2, [r3, #6]
   2ddbc:	2301      	movs	r3, #1
   2ddbe:	e065      	b.n	2de8c <f_write+0x330>
				fp->fs->winsect = sect;
   2ddc0:	68fb      	ldr	r3, [r7, #12]
   2ddc2:	681b      	ldr	r3, [r3, #0]
   2ddc4:	693a      	ldr	r2, [r7, #16]
   2ddc6:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2ddc8:	68fb      	ldr	r3, [r7, #12]
   2ddca:	693a      	ldr	r2, [r7, #16]
   2ddcc:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2ddce:	68fb      	ldr	r3, [r7, #12]
   2ddd0:	689b      	ldr	r3, [r3, #8]
   2ddd2:	05db      	lsls	r3, r3, #23
   2ddd4:	0ddb      	lsrs	r3, r3, #23
   2ddd6:	2280      	movs	r2, #128	; 0x80
   2ddd8:	0092      	lsls	r2, r2, #2
   2ddda:	1ad3      	subs	r3, r2, r3
   2dddc:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2ddde:	6a3a      	ldr	r2, [r7, #32]
   2dde0:	687b      	ldr	r3, [r7, #4]
   2dde2:	429a      	cmp	r2, r3
   2dde4:	d901      	bls.n	2ddea <f_write+0x28e>
   2dde6:	687b      	ldr	r3, [r7, #4]
   2dde8:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2ddea:	68fb      	ldr	r3, [r7, #12]
   2ddec:	681a      	ldr	r2, [r3, #0]
   2ddee:	68fb      	ldr	r3, [r7, #12]
   2ddf0:	699b      	ldr	r3, [r3, #24]
   2ddf2:	0019      	movs	r1, r3
   2ddf4:	0010      	movs	r0, r2
   2ddf6:	4b29      	ldr	r3, [pc, #164]	; (2de9c <f_write+0x340>)
   2ddf8:	4798      	blx	r3
   2ddfa:	1e03      	subs	r3, r0, #0
   2ddfc:	d009      	beq.n	2de12 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2ddfe:	68fb      	ldr	r3, [r7, #12]
   2de00:	799b      	ldrb	r3, [r3, #6]
   2de02:	2280      	movs	r2, #128	; 0x80
   2de04:	4252      	negs	r2, r2
   2de06:	4313      	orrs	r3, r2
   2de08:	b2da      	uxtb	r2, r3
   2de0a:	68fb      	ldr	r3, [r7, #12]
   2de0c:	719a      	strb	r2, [r3, #6]
   2de0e:	2301      	movs	r3, #1
   2de10:	e03c      	b.n	2de8c <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2de12:	68fb      	ldr	r3, [r7, #12]
   2de14:	681a      	ldr	r2, [r3, #0]
   2de16:	68fb      	ldr	r3, [r7, #12]
   2de18:	689b      	ldr	r3, [r3, #8]
   2de1a:	05db      	lsls	r3, r3, #23
   2de1c:	0ddb      	lsrs	r3, r3, #23
   2de1e:	3330      	adds	r3, #48	; 0x30
   2de20:	18d3      	adds	r3, r2, r3
   2de22:	6a3a      	ldr	r2, [r7, #32]
   2de24:	69b9      	ldr	r1, [r7, #24]
   2de26:	0018      	movs	r0, r3
   2de28:	4b1f      	ldr	r3, [pc, #124]	; (2dea8 <f_write+0x34c>)
   2de2a:	4798      	blx	r3
		fp->fs->wflag = 1;
   2de2c:	68fb      	ldr	r3, [r7, #12]
   2de2e:	681b      	ldr	r3, [r3, #0]
   2de30:	2201      	movs	r2, #1
   2de32:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2de34:	69ba      	ldr	r2, [r7, #24]
   2de36:	6a3b      	ldr	r3, [r7, #32]
   2de38:	18d3      	adds	r3, r2, r3
   2de3a:	61bb      	str	r3, [r7, #24]
   2de3c:	68fb      	ldr	r3, [r7, #12]
   2de3e:	689a      	ldr	r2, [r3, #8]
   2de40:	6a3b      	ldr	r3, [r7, #32]
   2de42:	18d2      	adds	r2, r2, r3
   2de44:	68fb      	ldr	r3, [r7, #12]
   2de46:	609a      	str	r2, [r3, #8]
   2de48:	683b      	ldr	r3, [r7, #0]
   2de4a:	681a      	ldr	r2, [r3, #0]
   2de4c:	6a3b      	ldr	r3, [r7, #32]
   2de4e:	18d2      	adds	r2, r2, r3
   2de50:	683b      	ldr	r3, [r7, #0]
   2de52:	601a      	str	r2, [r3, #0]
   2de54:	687a      	ldr	r2, [r7, #4]
   2de56:	6a3b      	ldr	r3, [r7, #32]
   2de58:	1ad3      	subs	r3, r2, r3
   2de5a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2de5c:	687b      	ldr	r3, [r7, #4]
   2de5e:	2b00      	cmp	r3, #0
   2de60:	d000      	beq.n	2de64 <f_write+0x308>
   2de62:	e6b7      	b.n	2dbd4 <f_write+0x78>
   2de64:	e000      	b.n	2de68 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2de66:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2de68:	68fb      	ldr	r3, [r7, #12]
   2de6a:	689a      	ldr	r2, [r3, #8]
   2de6c:	68fb      	ldr	r3, [r7, #12]
   2de6e:	68db      	ldr	r3, [r3, #12]
   2de70:	429a      	cmp	r2, r3
   2de72:	d903      	bls.n	2de7c <f_write+0x320>
   2de74:	68fb      	ldr	r3, [r7, #12]
   2de76:	689a      	ldr	r2, [r3, #8]
   2de78:	68fb      	ldr	r3, [r7, #12]
   2de7a:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2de7c:	68fb      	ldr	r3, [r7, #12]
   2de7e:	799b      	ldrb	r3, [r3, #6]
   2de80:	2220      	movs	r2, #32
   2de82:	4313      	orrs	r3, r2
   2de84:	b2da      	uxtb	r2, r3
   2de86:	68fb      	ldr	r3, [r7, #12]
   2de88:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2de8a:	2300      	movs	r3, #0
}
   2de8c:	0018      	movs	r0, r3
   2de8e:	46bd      	mov	sp, r7
   2de90:	b00b      	add	sp, #44	; 0x2c
   2de92:	bd90      	pop	{r4, r7, pc}
   2de94:	0002d581 	.word	0x0002d581
   2de98:	0002bc0d 	.word	0x0002bc0d
   2de9c:	0002b505 	.word	0x0002b505
   2dea0:	0002b765 	.word	0x0002b765
   2dea4:	0002b1f1 	.word	0x0002b1f1
   2dea8:	0002b421 	.word	0x0002b421

0002deac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2deac:	b590      	push	{r4, r7, lr}
   2deae:	b087      	sub	sp, #28
   2deb0:	af00      	add	r7, sp, #0
   2deb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2deb4:	687b      	ldr	r3, [r7, #4]
   2deb6:	681a      	ldr	r2, [r3, #0]
   2deb8:	687b      	ldr	r3, [r7, #4]
   2deba:	889b      	ldrh	r3, [r3, #4]
   2debc:	2117      	movs	r1, #23
   2debe:	187c      	adds	r4, r7, r1
   2dec0:	0019      	movs	r1, r3
   2dec2:	0010      	movs	r0, r2
   2dec4:	4b55      	ldr	r3, [pc, #340]	; (2e01c <f_sync+0x170>)
   2dec6:	4798      	blx	r3
   2dec8:	0003      	movs	r3, r0
   2deca:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2decc:	2317      	movs	r3, #23
   2dece:	18fb      	adds	r3, r7, r3
   2ded0:	781b      	ldrb	r3, [r3, #0]
   2ded2:	2b00      	cmp	r3, #0
   2ded4:	d000      	beq.n	2ded8 <f_sync+0x2c>
   2ded6:	e09a      	b.n	2e00e <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2ded8:	687b      	ldr	r3, [r7, #4]
   2deda:	799b      	ldrb	r3, [r3, #6]
   2dedc:	001a      	movs	r2, r3
   2dede:	2320      	movs	r3, #32
   2dee0:	4013      	ands	r3, r2
   2dee2:	d100      	bne.n	2dee6 <f_sync+0x3a>
   2dee4:	e093      	b.n	2e00e <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2dee6:	687b      	ldr	r3, [r7, #4]
   2dee8:	681a      	ldr	r2, [r3, #0]
   2deea:	687b      	ldr	r3, [r7, #4]
   2deec:	69db      	ldr	r3, [r3, #28]
   2deee:	2117      	movs	r1, #23
   2def0:	187c      	adds	r4, r7, r1
   2def2:	0019      	movs	r1, r3
   2def4:	0010      	movs	r0, r2
   2def6:	4b4a      	ldr	r3, [pc, #296]	; (2e020 <f_sync+0x174>)
   2def8:	4798      	blx	r3
   2defa:	0003      	movs	r3, r0
   2defc:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2defe:	2317      	movs	r3, #23
   2df00:	18fb      	adds	r3, r7, r3
   2df02:	781b      	ldrb	r3, [r3, #0]
   2df04:	2b00      	cmp	r3, #0
   2df06:	d000      	beq.n	2df0a <f_sync+0x5e>
   2df08:	e081      	b.n	2e00e <f_sync+0x162>
				dir = fp->dir_ptr;
   2df0a:	687b      	ldr	r3, [r7, #4]
   2df0c:	6a1b      	ldr	r3, [r3, #32]
   2df0e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2df10:	693b      	ldr	r3, [r7, #16]
   2df12:	330b      	adds	r3, #11
   2df14:	693a      	ldr	r2, [r7, #16]
   2df16:	320b      	adds	r2, #11
   2df18:	7812      	ldrb	r2, [r2, #0]
   2df1a:	2120      	movs	r1, #32
   2df1c:	430a      	orrs	r2, r1
   2df1e:	b2d2      	uxtb	r2, r2
   2df20:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2df22:	693b      	ldr	r3, [r7, #16]
   2df24:	331c      	adds	r3, #28
   2df26:	001a      	movs	r2, r3
   2df28:	687b      	ldr	r3, [r7, #4]
   2df2a:	68db      	ldr	r3, [r3, #12]
   2df2c:	b2db      	uxtb	r3, r3
   2df2e:	7013      	strb	r3, [r2, #0]
   2df30:	693b      	ldr	r3, [r7, #16]
   2df32:	331d      	adds	r3, #29
   2df34:	001a      	movs	r2, r3
   2df36:	687b      	ldr	r3, [r7, #4]
   2df38:	68db      	ldr	r3, [r3, #12]
   2df3a:	b29b      	uxth	r3, r3
   2df3c:	0a1b      	lsrs	r3, r3, #8
   2df3e:	b29b      	uxth	r3, r3
   2df40:	b2db      	uxtb	r3, r3
   2df42:	7013      	strb	r3, [r2, #0]
   2df44:	693b      	ldr	r3, [r7, #16]
   2df46:	331e      	adds	r3, #30
   2df48:	001a      	movs	r2, r3
   2df4a:	687b      	ldr	r3, [r7, #4]
   2df4c:	68db      	ldr	r3, [r3, #12]
   2df4e:	0c1b      	lsrs	r3, r3, #16
   2df50:	b2db      	uxtb	r3, r3
   2df52:	7013      	strb	r3, [r2, #0]
   2df54:	693b      	ldr	r3, [r7, #16]
   2df56:	331f      	adds	r3, #31
   2df58:	001a      	movs	r2, r3
   2df5a:	687b      	ldr	r3, [r7, #4]
   2df5c:	68db      	ldr	r3, [r3, #12]
   2df5e:	0e1b      	lsrs	r3, r3, #24
   2df60:	b2db      	uxtb	r3, r3
   2df62:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2df64:	693b      	ldr	r3, [r7, #16]
   2df66:	331a      	adds	r3, #26
   2df68:	001a      	movs	r2, r3
   2df6a:	687b      	ldr	r3, [r7, #4]
   2df6c:	691b      	ldr	r3, [r3, #16]
   2df6e:	b2db      	uxtb	r3, r3
   2df70:	7013      	strb	r3, [r2, #0]
   2df72:	693b      	ldr	r3, [r7, #16]
   2df74:	331b      	adds	r3, #27
   2df76:	001a      	movs	r2, r3
   2df78:	687b      	ldr	r3, [r7, #4]
   2df7a:	691b      	ldr	r3, [r3, #16]
   2df7c:	b29b      	uxth	r3, r3
   2df7e:	0a1b      	lsrs	r3, r3, #8
   2df80:	b29b      	uxth	r3, r3
   2df82:	b2db      	uxtb	r3, r3
   2df84:	7013      	strb	r3, [r2, #0]
   2df86:	693b      	ldr	r3, [r7, #16]
   2df88:	3314      	adds	r3, #20
   2df8a:	001a      	movs	r2, r3
   2df8c:	687b      	ldr	r3, [r7, #4]
   2df8e:	691b      	ldr	r3, [r3, #16]
   2df90:	0c1b      	lsrs	r3, r3, #16
   2df92:	b2db      	uxtb	r3, r3
   2df94:	7013      	strb	r3, [r2, #0]
   2df96:	693b      	ldr	r3, [r7, #16]
   2df98:	3315      	adds	r3, #21
   2df9a:	001a      	movs	r2, r3
   2df9c:	687b      	ldr	r3, [r7, #4]
   2df9e:	691b      	ldr	r3, [r3, #16]
   2dfa0:	0c1b      	lsrs	r3, r3, #16
   2dfa2:	b29b      	uxth	r3, r3
   2dfa4:	0a1b      	lsrs	r3, r3, #8
   2dfa6:	b29b      	uxth	r3, r3
   2dfa8:	b2db      	uxtb	r3, r3
   2dfaa:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2dfac:	4b1d      	ldr	r3, [pc, #116]	; (2e024 <f_sync+0x178>)
   2dfae:	4798      	blx	r3
   2dfb0:	0003      	movs	r3, r0
   2dfb2:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2dfb4:	693b      	ldr	r3, [r7, #16]
   2dfb6:	3316      	adds	r3, #22
   2dfb8:	68fa      	ldr	r2, [r7, #12]
   2dfba:	b2d2      	uxtb	r2, r2
   2dfbc:	701a      	strb	r2, [r3, #0]
   2dfbe:	693b      	ldr	r3, [r7, #16]
   2dfc0:	3317      	adds	r3, #23
   2dfc2:	68fa      	ldr	r2, [r7, #12]
   2dfc4:	b292      	uxth	r2, r2
   2dfc6:	0a12      	lsrs	r2, r2, #8
   2dfc8:	b292      	uxth	r2, r2
   2dfca:	b2d2      	uxtb	r2, r2
   2dfcc:	701a      	strb	r2, [r3, #0]
   2dfce:	693b      	ldr	r3, [r7, #16]
   2dfd0:	3318      	adds	r3, #24
   2dfd2:	68fa      	ldr	r2, [r7, #12]
   2dfd4:	0c12      	lsrs	r2, r2, #16
   2dfd6:	b2d2      	uxtb	r2, r2
   2dfd8:	701a      	strb	r2, [r3, #0]
   2dfda:	693b      	ldr	r3, [r7, #16]
   2dfdc:	3319      	adds	r3, #25
   2dfde:	68fa      	ldr	r2, [r7, #12]
   2dfe0:	0e12      	lsrs	r2, r2, #24
   2dfe2:	b2d2      	uxtb	r2, r2
   2dfe4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2dfe6:	687b      	ldr	r3, [r7, #4]
   2dfe8:	799b      	ldrb	r3, [r3, #6]
   2dfea:	2220      	movs	r2, #32
   2dfec:	4393      	bics	r3, r2
   2dfee:	b2da      	uxtb	r2, r3
   2dff0:	687b      	ldr	r3, [r7, #4]
   2dff2:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2dff4:	687b      	ldr	r3, [r7, #4]
   2dff6:	681b      	ldr	r3, [r3, #0]
   2dff8:	2201      	movs	r2, #1
   2dffa:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2dffc:	687b      	ldr	r3, [r7, #4]
   2dffe:	681b      	ldr	r3, [r3, #0]
   2e000:	2217      	movs	r2, #23
   2e002:	18bc      	adds	r4, r7, r2
   2e004:	0018      	movs	r0, r3
   2e006:	4b08      	ldr	r3, [pc, #32]	; (2e028 <f_sync+0x17c>)
   2e008:	4798      	blx	r3
   2e00a:	0003      	movs	r3, r0
   2e00c:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2e00e:	2317      	movs	r3, #23
   2e010:	18fb      	adds	r3, r7, r3
   2e012:	781b      	ldrb	r3, [r3, #0]
}
   2e014:	0018      	movs	r0, r3
   2e016:	46bd      	mov	sp, r7
   2e018:	b007      	add	sp, #28
   2e01a:	bd90      	pop	{r4, r7, pc}
   2e01c:	0002d581 	.word	0x0002d581
   2e020:	0002b505 	.word	0x0002b505
   2e024:	0002b3c1 	.word	0x0002b3c1
   2e028:	0002b5cd 	.word	0x0002b5cd

0002e02c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2e02c:	b590      	push	{r4, r7, lr}
   2e02e:	b085      	sub	sp, #20
   2e030:	af00      	add	r7, sp, #0
   2e032:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2e034:	230f      	movs	r3, #15
   2e036:	18fc      	adds	r4, r7, r3
   2e038:	687b      	ldr	r3, [r7, #4]
   2e03a:	0018      	movs	r0, r3
   2e03c:	4b09      	ldr	r3, [pc, #36]	; (2e064 <f_close+0x38>)
   2e03e:	4798      	blx	r3
   2e040:	0003      	movs	r3, r0
   2e042:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2e044:	230f      	movs	r3, #15
   2e046:	18fb      	adds	r3, r7, r3
   2e048:	781b      	ldrb	r3, [r3, #0]
   2e04a:	2b00      	cmp	r3, #0
   2e04c:	d102      	bne.n	2e054 <f_close+0x28>
   2e04e:	687b      	ldr	r3, [r7, #4]
   2e050:	2200      	movs	r2, #0
   2e052:	601a      	str	r2, [r3, #0]
	return res;
   2e054:	230f      	movs	r3, #15
   2e056:	18fb      	adds	r3, r7, r3
   2e058:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2e05a:	0018      	movs	r0, r3
   2e05c:	46bd      	mov	sp, r7
   2e05e:	b005      	add	sp, #20
   2e060:	bd90      	pop	{r4, r7, pc}
   2e062:	46c0      	nop			; (mov r8, r8)
   2e064:	0002dead 	.word	0x0002dead

0002e068 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2e068:	b580      	push	{r7, lr}
   2e06a:	b084      	sub	sp, #16
   2e06c:	af00      	add	r7, sp, #0
   2e06e:	0002      	movs	r2, r0
   2e070:	6039      	str	r1, [r7, #0]
   2e072:	1dbb      	adds	r3, r7, #6
   2e074:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2e076:	1dbb      	adds	r3, r7, #6
   2e078:	881b      	ldrh	r3, [r3, #0]
   2e07a:	2b7f      	cmp	r3, #127	; 0x7f
   2e07c:	d805      	bhi.n	2e08a <ff_convert+0x22>
		c = src;
   2e07e:	230e      	movs	r3, #14
   2e080:	18fb      	adds	r3, r7, r3
   2e082:	1dba      	adds	r2, r7, #6
   2e084:	8812      	ldrh	r2, [r2, #0]
   2e086:	801a      	strh	r2, [r3, #0]
   2e088:	e03a      	b.n	2e100 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2e08a:	683b      	ldr	r3, [r7, #0]
   2e08c:	2b00      	cmp	r3, #0
   2e08e:	d010      	beq.n	2e0b2 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2e090:	1dbb      	adds	r3, r7, #6
   2e092:	881b      	ldrh	r3, [r3, #0]
   2e094:	2bff      	cmp	r3, #255	; 0xff
   2e096:	d807      	bhi.n	2e0a8 <ff_convert+0x40>
   2e098:	1dbb      	adds	r3, r7, #6
   2e09a:	881b      	ldrh	r3, [r3, #0]
   2e09c:	3b80      	subs	r3, #128	; 0x80
   2e09e:	001a      	movs	r2, r3
   2e0a0:	4b1b      	ldr	r3, [pc, #108]	; (2e110 <ff_convert+0xa8>)
   2e0a2:	0052      	lsls	r2, r2, #1
   2e0a4:	5ad2      	ldrh	r2, [r2, r3]
   2e0a6:	e000      	b.n	2e0aa <ff_convert+0x42>
   2e0a8:	2200      	movs	r2, #0
   2e0aa:	230e      	movs	r3, #14
   2e0ac:	18fb      	adds	r3, r7, r3
   2e0ae:	801a      	strh	r2, [r3, #0]
   2e0b0:	e026      	b.n	2e100 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2e0b2:	230e      	movs	r3, #14
   2e0b4:	18fb      	adds	r3, r7, r3
   2e0b6:	2200      	movs	r2, #0
   2e0b8:	801a      	strh	r2, [r3, #0]
   2e0ba:	e010      	b.n	2e0de <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2e0bc:	230e      	movs	r3, #14
   2e0be:	18fb      	adds	r3, r7, r3
   2e0c0:	881a      	ldrh	r2, [r3, #0]
   2e0c2:	4b13      	ldr	r3, [pc, #76]	; (2e110 <ff_convert+0xa8>)
   2e0c4:	0052      	lsls	r2, r2, #1
   2e0c6:	5ad3      	ldrh	r3, [r2, r3]
   2e0c8:	1dba      	adds	r2, r7, #6
   2e0ca:	8812      	ldrh	r2, [r2, #0]
   2e0cc:	429a      	cmp	r2, r3
   2e0ce:	d00c      	beq.n	2e0ea <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2e0d0:	230e      	movs	r3, #14
   2e0d2:	18fb      	adds	r3, r7, r3
   2e0d4:	881a      	ldrh	r2, [r3, #0]
   2e0d6:	230e      	movs	r3, #14
   2e0d8:	18fb      	adds	r3, r7, r3
   2e0da:	3201      	adds	r2, #1
   2e0dc:	801a      	strh	r2, [r3, #0]
   2e0de:	230e      	movs	r3, #14
   2e0e0:	18fb      	adds	r3, r7, r3
   2e0e2:	881b      	ldrh	r3, [r3, #0]
   2e0e4:	2b7f      	cmp	r3, #127	; 0x7f
   2e0e6:	d9e9      	bls.n	2e0bc <ff_convert+0x54>
   2e0e8:	e000      	b.n	2e0ec <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2e0ea:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2e0ec:	230e      	movs	r3, #14
   2e0ee:	18fb      	adds	r3, r7, r3
   2e0f0:	881b      	ldrh	r3, [r3, #0]
   2e0f2:	3380      	adds	r3, #128	; 0x80
   2e0f4:	b29a      	uxth	r2, r3
   2e0f6:	230e      	movs	r3, #14
   2e0f8:	18fb      	adds	r3, r7, r3
   2e0fa:	21ff      	movs	r1, #255	; 0xff
   2e0fc:	400a      	ands	r2, r1
   2e0fe:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2e100:	230e      	movs	r3, #14
   2e102:	18fb      	adds	r3, r7, r3
   2e104:	881b      	ldrh	r3, [r3, #0]
}
   2e106:	0018      	movs	r0, r3
   2e108:	46bd      	mov	sp, r7
   2e10a:	b004      	add	sp, #16
   2e10c:	bd80      	pop	{r7, pc}
   2e10e:	46c0      	nop			; (mov r8, r8)
   2e110:	00039388 	.word	0x00039388

0002e114 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2e114:	b580      	push	{r7, lr}
   2e116:	b084      	sub	sp, #16
   2e118:	af00      	add	r7, sp, #0
   2e11a:	0002      	movs	r2, r0
   2e11c:	1dbb      	adds	r3, r7, #6
   2e11e:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2e120:	2300      	movs	r3, #0
   2e122:	60fb      	str	r3, [r7, #12]
   2e124:	e002      	b.n	2e12c <ff_wtoupper+0x18>
   2e126:	68fb      	ldr	r3, [r7, #12]
   2e128:	3301      	adds	r3, #1
   2e12a:	60fb      	str	r3, [r7, #12]
   2e12c:	4b0f      	ldr	r3, [pc, #60]	; (2e16c <ff_wtoupper+0x58>)
   2e12e:	68fa      	ldr	r2, [r7, #12]
   2e130:	0052      	lsls	r2, r2, #1
   2e132:	5ad3      	ldrh	r3, [r2, r3]
   2e134:	2b00      	cmp	r3, #0
   2e136:	d007      	beq.n	2e148 <ff_wtoupper+0x34>
   2e138:	4b0c      	ldr	r3, [pc, #48]	; (2e16c <ff_wtoupper+0x58>)
   2e13a:	68fa      	ldr	r2, [r7, #12]
   2e13c:	0052      	lsls	r2, r2, #1
   2e13e:	5ad3      	ldrh	r3, [r2, r3]
   2e140:	1dba      	adds	r2, r7, #6
   2e142:	8812      	ldrh	r2, [r2, #0]
   2e144:	429a      	cmp	r2, r3
   2e146:	d1ee      	bne.n	2e126 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2e148:	4b08      	ldr	r3, [pc, #32]	; (2e16c <ff_wtoupper+0x58>)
   2e14a:	68fa      	ldr	r2, [r7, #12]
   2e14c:	0052      	lsls	r2, r2, #1
   2e14e:	5ad3      	ldrh	r3, [r2, r3]
   2e150:	2b00      	cmp	r3, #0
   2e152:	d004      	beq.n	2e15e <ff_wtoupper+0x4a>
   2e154:	4b06      	ldr	r3, [pc, #24]	; (2e170 <ff_wtoupper+0x5c>)
   2e156:	68fa      	ldr	r2, [r7, #12]
   2e158:	0052      	lsls	r2, r2, #1
   2e15a:	5ad3      	ldrh	r3, [r2, r3]
   2e15c:	e001      	b.n	2e162 <ff_wtoupper+0x4e>
   2e15e:	1dbb      	adds	r3, r7, #6
   2e160:	881b      	ldrh	r3, [r3, #0]
}
   2e162:	0018      	movs	r0, r3
   2e164:	46bd      	mov	sp, r7
   2e166:	b004      	add	sp, #16
   2e168:	bd80      	pop	{r7, pc}
   2e16a:	46c0      	nop			; (mov r8, r8)
   2e16c:	00039488 	.word	0x00039488
   2e170:	00039668 	.word	0x00039668

0002e174 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2e174:	b580      	push	{r7, lr}
   2e176:	b084      	sub	sp, #16
   2e178:	af00      	add	r7, sp, #0
   2e17a:	60f8      	str	r0, [r7, #12]
   2e17c:	60b9      	str	r1, [r7, #8]
   2e17e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2e180:	68fb      	ldr	r3, [r7, #12]
   2e182:	68ba      	ldr	r2, [r7, #8]
   2e184:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2e186:	68fb      	ldr	r3, [r7, #12]
   2e188:	687a      	ldr	r2, [r7, #4]
   2e18a:	601a      	str	r2, [r3, #0]
}
   2e18c:	46c0      	nop			; (mov r8, r8)
   2e18e:	46bd      	mov	sp, r7
   2e190:	b004      	add	sp, #16
   2e192:	bd80      	pop	{r7, pc}

0002e194 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2e194:	b580      	push	{r7, lr}
   2e196:	b082      	sub	sp, #8
   2e198:	af00      	add	r7, sp, #0
   2e19a:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2e19c:	687b      	ldr	r3, [r7, #4]
   2e19e:	681b      	ldr	r3, [r3, #0]
   2e1a0:	4a07      	ldr	r2, [pc, #28]	; (2e1c0 <getNextPacketId+0x2c>)
   2e1a2:	4293      	cmp	r3, r2
   2e1a4:	d003      	beq.n	2e1ae <getNextPacketId+0x1a>
   2e1a6:	687b      	ldr	r3, [r7, #4]
   2e1a8:	681b      	ldr	r3, [r3, #0]
   2e1aa:	1c5a      	adds	r2, r3, #1
   2e1ac:	e000      	b.n	2e1b0 <getNextPacketId+0x1c>
   2e1ae:	2201      	movs	r2, #1
   2e1b0:	687b      	ldr	r3, [r7, #4]
   2e1b2:	601a      	str	r2, [r3, #0]
   2e1b4:	687b      	ldr	r3, [r7, #4]
   2e1b6:	681b      	ldr	r3, [r3, #0]
}
   2e1b8:	0018      	movs	r0, r3
   2e1ba:	46bd      	mov	sp, r7
   2e1bc:	b002      	add	sp, #8
   2e1be:	bd80      	pop	{r7, pc}
   2e1c0:	0000ffff 	.word	0x0000ffff

0002e1c4 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2e1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e1c6:	b087      	sub	sp, #28
   2e1c8:	af00      	add	r7, sp, #0
   2e1ca:	60f8      	str	r0, [r7, #12]
   2e1cc:	60b9      	str	r1, [r7, #8]
   2e1ce:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2e1d0:	2301      	movs	r3, #1
   2e1d2:	425b      	negs	r3, r3
   2e1d4:	617b      	str	r3, [r7, #20]
        sent = 0;
   2e1d6:	2300      	movs	r3, #0
   2e1d8:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2e1da:	e01a      	b.n	2e212 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2e1dc:	68fb      	ldr	r3, [r7, #12]
   2e1de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e1e0:	68dc      	ldr	r4, [r3, #12]
   2e1e2:	68fb      	ldr	r3, [r7, #12]
   2e1e4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e1e6:	68fb      	ldr	r3, [r7, #12]
   2e1e8:	691a      	ldr	r2, [r3, #16]
   2e1ea:	693b      	ldr	r3, [r7, #16]
   2e1ec:	18d6      	adds	r6, r2, r3
   2e1ee:	687b      	ldr	r3, [r7, #4]
   2e1f0:	0018      	movs	r0, r3
   2e1f2:	4b1a      	ldr	r3, [pc, #104]	; (2e25c <sendPacket+0x98>)
   2e1f4:	4798      	blx	r3
   2e1f6:	0003      	movs	r3, r0
   2e1f8:	68ba      	ldr	r2, [r7, #8]
   2e1fa:	0031      	movs	r1, r6
   2e1fc:	0028      	movs	r0, r5
   2e1fe:	47a0      	blx	r4
   2e200:	0003      	movs	r3, r0
   2e202:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2e204:	697b      	ldr	r3, [r7, #20]
   2e206:	2b00      	cmp	r3, #0
   2e208:	db0e      	blt.n	2e228 <sendPacket+0x64>
            break;
        sent += rc;
   2e20a:	693a      	ldr	r2, [r7, #16]
   2e20c:	697b      	ldr	r3, [r7, #20]
   2e20e:	18d3      	adds	r3, r2, r3
   2e210:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2e212:	693a      	ldr	r2, [r7, #16]
   2e214:	68bb      	ldr	r3, [r7, #8]
   2e216:	429a      	cmp	r2, r3
   2e218:	da07      	bge.n	2e22a <sendPacket+0x66>
   2e21a:	687b      	ldr	r3, [r7, #4]
   2e21c:	0018      	movs	r0, r3
   2e21e:	4b10      	ldr	r3, [pc, #64]	; (2e260 <sendPacket+0x9c>)
   2e220:	4798      	blx	r3
   2e222:	1e03      	subs	r3, r0, #0
   2e224:	d0da      	beq.n	2e1dc <sendPacket+0x18>
   2e226:	e000      	b.n	2e22a <sendPacket+0x66>
            break;
   2e228:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2e22a:	693a      	ldr	r2, [r7, #16]
   2e22c:	68bb      	ldr	r3, [r7, #8]
   2e22e:	429a      	cmp	r2, r3
   2e230:	d10b      	bne.n	2e24a <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2e232:	68fb      	ldr	r3, [r7, #12]
   2e234:	3354      	adds	r3, #84	; 0x54
   2e236:	001a      	movs	r2, r3
   2e238:	68fb      	ldr	r3, [r7, #12]
   2e23a:	699b      	ldr	r3, [r3, #24]
   2e23c:	0019      	movs	r1, r3
   2e23e:	0010      	movs	r0, r2
   2e240:	4b08      	ldr	r3, [pc, #32]	; (2e264 <sendPacket+0xa0>)
   2e242:	4798      	blx	r3
        rc = SUCCESS;
   2e244:	2300      	movs	r3, #0
   2e246:	617b      	str	r3, [r7, #20]
   2e248:	e002      	b.n	2e250 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2e24a:	2301      	movs	r3, #1
   2e24c:	425b      	negs	r3, r3
   2e24e:	617b      	str	r3, [r7, #20]
    return rc;
   2e250:	697b      	ldr	r3, [r7, #20]
}
   2e252:	0018      	movs	r0, r3
   2e254:	46bd      	mov	sp, r7
   2e256:	b007      	add	sp, #28
   2e258:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e25a:	46c0      	nop			; (mov r8, r8)
   2e25c:	0002f025 	.word	0x0002f025
   2e260:	0002efa9 	.word	0x0002efa9
   2e264:	0002effd 	.word	0x0002effd

0002e268 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2e268:	b580      	push	{r7, lr}
   2e26a:	b086      	sub	sp, #24
   2e26c:	af00      	add	r7, sp, #0
   2e26e:	60f8      	str	r0, [r7, #12]
   2e270:	60b9      	str	r1, [r7, #8]
   2e272:	607a      	str	r2, [r7, #4]
   2e274:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2e276:	68fb      	ldr	r3, [r7, #12]
   2e278:	68ba      	ldr	r2, [r7, #8]
   2e27a:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e27c:	2300      	movs	r3, #0
   2e27e:	617b      	str	r3, [r7, #20]
   2e280:	e00a      	b.n	2e298 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2e282:	68fa      	ldr	r2, [r7, #12]
   2e284:	697b      	ldr	r3, [r7, #20]
   2e286:	3304      	adds	r3, #4
   2e288:	00db      	lsls	r3, r3, #3
   2e28a:	18d3      	adds	r3, r2, r3
   2e28c:	3304      	adds	r3, #4
   2e28e:	2200      	movs	r2, #0
   2e290:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e292:	697b      	ldr	r3, [r7, #20]
   2e294:	3301      	adds	r3, #1
   2e296:	617b      	str	r3, [r7, #20]
   2e298:	697b      	ldr	r3, [r7, #20]
   2e29a:	2b04      	cmp	r3, #4
   2e29c:	ddf1      	ble.n	2e282 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2e29e:	68fb      	ldr	r3, [r7, #12]
   2e2a0:	687a      	ldr	r2, [r7, #4]
   2e2a2:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2e2a4:	68fb      	ldr	r3, [r7, #12]
   2e2a6:	683a      	ldr	r2, [r7, #0]
   2e2a8:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2e2aa:	68fb      	ldr	r3, [r7, #12]
   2e2ac:	6a3a      	ldr	r2, [r7, #32]
   2e2ae:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2e2b0:	68fb      	ldr	r3, [r7, #12]
   2e2b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e2b4:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2e2b6:	68fb      	ldr	r3, [r7, #12]
   2e2b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e2ba:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2e2bc:	68fb      	ldr	r3, [r7, #12]
   2e2be:	2200      	movs	r2, #0
   2e2c0:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2e2c2:	68fb      	ldr	r3, [r7, #12]
   2e2c4:	2200      	movs	r2, #0
   2e2c6:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2e2c8:	68fb      	ldr	r3, [r7, #12]
   2e2ca:	2200      	movs	r2, #0
   2e2cc:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2e2ce:	68fb      	ldr	r3, [r7, #12]
   2e2d0:	2201      	movs	r2, #1
   2e2d2:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2e2d4:	68fb      	ldr	r3, [r7, #12]
   2e2d6:	3354      	adds	r3, #84	; 0x54
   2e2d8:	0018      	movs	r0, r3
   2e2da:	4b03      	ldr	r3, [pc, #12]	; (2e2e8 <MQTTClientInit+0x80>)
   2e2dc:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2e2de:	46c0      	nop			; (mov r8, r8)
   2e2e0:	46bd      	mov	sp, r7
   2e2e2:	b006      	add	sp, #24
   2e2e4:	bd80      	pop	{r7, pc}
   2e2e6:	46c0      	nop			; (mov r8, r8)
   2e2e8:	0002f04d 	.word	0x0002f04d

0002e2ec <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2e2ec:	b590      	push	{r4, r7, lr}
   2e2ee:	b08b      	sub	sp, #44	; 0x2c
   2e2f0:	af00      	add	r7, sp, #0
   2e2f2:	60f8      	str	r0, [r7, #12]
   2e2f4:	60b9      	str	r1, [r7, #8]
   2e2f6:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2e2f8:	2301      	movs	r3, #1
   2e2fa:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2e2fc:	2300      	movs	r3, #0
   2e2fe:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2e300:	2304      	movs	r3, #4
   2e302:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2e304:	68bb      	ldr	r3, [r7, #8]
   2e306:	2200      	movs	r2, #0
   2e308:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2e30a:	2301      	movs	r3, #1
   2e30c:	425b      	negs	r3, r3
   2e30e:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2e310:	6a3b      	ldr	r3, [r7, #32]
   2e312:	3301      	adds	r3, #1
   2e314:	623b      	str	r3, [r7, #32]
   2e316:	6a3a      	ldr	r2, [r7, #32]
   2e318:	69fb      	ldr	r3, [r7, #28]
   2e31a:	429a      	cmp	r2, r3
   2e31c:	dd03      	ble.n	2e326 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2e31e:	2301      	movs	r3, #1
   2e320:	425b      	negs	r3, r3
   2e322:	61bb      	str	r3, [r7, #24]
            goto exit;
   2e324:	e026      	b.n	2e374 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2e326:	68fb      	ldr	r3, [r7, #12]
   2e328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e32a:	689c      	ldr	r4, [r3, #8]
   2e32c:	68fb      	ldr	r3, [r7, #12]
   2e32e:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2e330:	687b      	ldr	r3, [r7, #4]
   2e332:	2217      	movs	r2, #23
   2e334:	18b9      	adds	r1, r7, r2
   2e336:	2201      	movs	r2, #1
   2e338:	47a0      	blx	r4
   2e33a:	0003      	movs	r3, r0
   2e33c:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2e33e:	69bb      	ldr	r3, [r7, #24]
   2e340:	2b01      	cmp	r3, #1
   2e342:	d116      	bne.n	2e372 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2e344:	68bb      	ldr	r3, [r7, #8]
   2e346:	681a      	ldr	r2, [r3, #0]
   2e348:	2317      	movs	r3, #23
   2e34a:	18fb      	adds	r3, r7, r3
   2e34c:	781b      	ldrb	r3, [r3, #0]
   2e34e:	0019      	movs	r1, r3
   2e350:	237f      	movs	r3, #127	; 0x7f
   2e352:	400b      	ands	r3, r1
   2e354:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2e356:	434b      	muls	r3, r1
   2e358:	18d2      	adds	r2, r2, r3
   2e35a:	68bb      	ldr	r3, [r7, #8]
   2e35c:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2e35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e360:	01db      	lsls	r3, r3, #7
   2e362:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2e364:	2317      	movs	r3, #23
   2e366:	18fb      	adds	r3, r7, r3
   2e368:	781b      	ldrb	r3, [r3, #0]
   2e36a:	b25b      	sxtb	r3, r3
   2e36c:	2b00      	cmp	r3, #0
   2e36e:	dbcc      	blt.n	2e30a <decodePacket+0x1e>
   2e370:	e000      	b.n	2e374 <decodePacket+0x88>
            goto exit;
   2e372:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2e374:	6a3b      	ldr	r3, [r7, #32]
}
   2e376:	0018      	movs	r0, r3
   2e378:	46bd      	mov	sp, r7
   2e37a:	b00b      	add	sp, #44	; 0x2c
   2e37c:	bd90      	pop	{r4, r7, pc}
	...

0002e380 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2e380:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e382:	46c6      	mov	lr, r8
   2e384:	b500      	push	{lr}
   2e386:	b086      	sub	sp, #24
   2e388:	af00      	add	r7, sp, #0
   2e38a:	6078      	str	r0, [r7, #4]
   2e38c:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2e38e:	2301      	movs	r3, #1
   2e390:	425b      	negs	r3, r3
   2e392:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2e394:	2300      	movs	r3, #0
   2e396:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2e398:	2300      	movs	r3, #0
   2e39a:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2e39c:	2300      	movs	r3, #0
   2e39e:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2e3a0:	687b      	ldr	r3, [r7, #4]
   2e3a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e3a4:	689c      	ldr	r4, [r3, #8]
   2e3a6:	687b      	ldr	r3, [r7, #4]
   2e3a8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e3aa:	687b      	ldr	r3, [r7, #4]
   2e3ac:	695e      	ldr	r6, [r3, #20]
   2e3ae:	683b      	ldr	r3, [r7, #0]
   2e3b0:	0018      	movs	r0, r3
   2e3b2:	4b2b      	ldr	r3, [pc, #172]	; (2e460 <readPacket+0xe0>)
   2e3b4:	4798      	blx	r3
   2e3b6:	0003      	movs	r3, r0
   2e3b8:	2201      	movs	r2, #1
   2e3ba:	0031      	movs	r1, r6
   2e3bc:	0028      	movs	r0, r5
   2e3be:	47a0      	blx	r4
   2e3c0:	0003      	movs	r3, r0
   2e3c2:	2b01      	cmp	r3, #1
   2e3c4:	d141      	bne.n	2e44a <readPacket+0xca>
        goto exit;

    len = 1;
   2e3c6:	2301      	movs	r3, #1
   2e3c8:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2e3ca:	683b      	ldr	r3, [r7, #0]
   2e3cc:	0018      	movs	r0, r3
   2e3ce:	4b24      	ldr	r3, [pc, #144]	; (2e460 <readPacket+0xe0>)
   2e3d0:	4798      	blx	r3
   2e3d2:	0002      	movs	r2, r0
   2e3d4:	2308      	movs	r3, #8
   2e3d6:	18f9      	adds	r1, r7, r3
   2e3d8:	687b      	ldr	r3, [r7, #4]
   2e3da:	0018      	movs	r0, r3
   2e3dc:	4b21      	ldr	r3, [pc, #132]	; (2e464 <readPacket+0xe4>)
   2e3de:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2e3e0:	687b      	ldr	r3, [r7, #4]
   2e3e2:	695b      	ldr	r3, [r3, #20]
   2e3e4:	3301      	adds	r3, #1
   2e3e6:	68ba      	ldr	r2, [r7, #8]
   2e3e8:	0011      	movs	r1, r2
   2e3ea:	0018      	movs	r0, r3
   2e3ec:	4b1e      	ldr	r3, [pc, #120]	; (2e468 <readPacket+0xe8>)
   2e3ee:	4798      	blx	r3
   2e3f0:	0002      	movs	r2, r0
   2e3f2:	693b      	ldr	r3, [r7, #16]
   2e3f4:	189b      	adds	r3, r3, r2
   2e3f6:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2e3f8:	68bb      	ldr	r3, [r7, #8]
   2e3fa:	2b00      	cmp	r3, #0
   2e3fc:	dd17      	ble.n	2e42e <readPacket+0xae>
   2e3fe:	687b      	ldr	r3, [r7, #4]
   2e400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e402:	689c      	ldr	r4, [r3, #8]
   2e404:	687b      	ldr	r3, [r7, #4]
   2e406:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e408:	687b      	ldr	r3, [r7, #4]
   2e40a:	695a      	ldr	r2, [r3, #20]
   2e40c:	693b      	ldr	r3, [r7, #16]
   2e40e:	18d6      	adds	r6, r2, r3
   2e410:	68bb      	ldr	r3, [r7, #8]
   2e412:	4698      	mov	r8, r3
   2e414:	683b      	ldr	r3, [r7, #0]
   2e416:	0018      	movs	r0, r3
   2e418:	4b11      	ldr	r3, [pc, #68]	; (2e460 <readPacket+0xe0>)
   2e41a:	4798      	blx	r3
   2e41c:	0003      	movs	r3, r0
   2e41e:	4642      	mov	r2, r8
   2e420:	0031      	movs	r1, r6
   2e422:	0028      	movs	r0, r5
   2e424:	47a0      	blx	r4
   2e426:	0002      	movs	r2, r0
   2e428:	68bb      	ldr	r3, [r7, #8]
   2e42a:	429a      	cmp	r2, r3
   2e42c:	d10f      	bne.n	2e44e <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2e42e:	687b      	ldr	r3, [r7, #4]
   2e430:	695b      	ldr	r3, [r3, #20]
   2e432:	781a      	ldrb	r2, [r3, #0]
   2e434:	230c      	movs	r3, #12
   2e436:	18fb      	adds	r3, r7, r3
   2e438:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2e43a:	230c      	movs	r3, #12
   2e43c:	18fb      	adds	r3, r7, r3
   2e43e:	781b      	ldrb	r3, [r3, #0]
   2e440:	061b      	lsls	r3, r3, #24
   2e442:	0f1b      	lsrs	r3, r3, #28
   2e444:	b2db      	uxtb	r3, r3
   2e446:	617b      	str	r3, [r7, #20]
   2e448:	e002      	b.n	2e450 <readPacket+0xd0>
        goto exit;
   2e44a:	46c0      	nop			; (mov r8, r8)
   2e44c:	e000      	b.n	2e450 <readPacket+0xd0>
        goto exit;
   2e44e:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2e450:	697b      	ldr	r3, [r7, #20]
}
   2e452:	0018      	movs	r0, r3
   2e454:	46bd      	mov	sp, r7
   2e456:	b006      	add	sp, #24
   2e458:	bc04      	pop	{r2}
   2e45a:	4690      	mov	r8, r2
   2e45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e45e:	46c0      	nop			; (mov r8, r8)
   2e460:	0002f025 	.word	0x0002f025
   2e464:	0002e2ed 	.word	0x0002e2ed
   2e468:	0002fdfd 	.word	0x0002fdfd

0002e46c <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2e46c:	b580      	push	{r7, lr}
   2e46e:	b086      	sub	sp, #24
   2e470:	af00      	add	r7, sp, #0
   2e472:	6078      	str	r0, [r7, #4]
   2e474:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2e476:	687b      	ldr	r3, [r7, #4]
   2e478:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2e47a:	683b      	ldr	r3, [r7, #0]
   2e47c:	689b      	ldr	r3, [r3, #8]
   2e47e:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2e480:	683b      	ldr	r3, [r7, #0]
   2e482:	685b      	ldr	r3, [r3, #4]
   2e484:	001a      	movs	r2, r3
   2e486:	693b      	ldr	r3, [r7, #16]
   2e488:	189b      	adds	r3, r3, r2
   2e48a:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2e48c:	e039      	b.n	2e502 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2e48e:	693b      	ldr	r3, [r7, #16]
   2e490:	781b      	ldrb	r3, [r3, #0]
   2e492:	2b2f      	cmp	r3, #47	; 0x2f
   2e494:	d103      	bne.n	2e49e <isTopicMatched+0x32>
   2e496:	697b      	ldr	r3, [r7, #20]
   2e498:	781b      	ldrb	r3, [r3, #0]
   2e49a:	2b2f      	cmp	r3, #47	; 0x2f
   2e49c:	d13a      	bne.n	2e514 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2e49e:	697b      	ldr	r3, [r7, #20]
   2e4a0:	781b      	ldrb	r3, [r3, #0]
   2e4a2:	2b2b      	cmp	r3, #43	; 0x2b
   2e4a4:	d009      	beq.n	2e4ba <isTopicMatched+0x4e>
   2e4a6:	697b      	ldr	r3, [r7, #20]
   2e4a8:	781b      	ldrb	r3, [r3, #0]
   2e4aa:	2b23      	cmp	r3, #35	; 0x23
   2e4ac:	d005      	beq.n	2e4ba <isTopicMatched+0x4e>
   2e4ae:	697b      	ldr	r3, [r7, #20]
   2e4b0:	781a      	ldrb	r2, [r3, #0]
   2e4b2:	693b      	ldr	r3, [r7, #16]
   2e4b4:	781b      	ldrb	r3, [r3, #0]
   2e4b6:	429a      	cmp	r2, r3
   2e4b8:	d12e      	bne.n	2e518 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2e4ba:	697b      	ldr	r3, [r7, #20]
   2e4bc:	781b      	ldrb	r3, [r3, #0]
   2e4be:	2b2b      	cmp	r3, #43	; 0x2b
   2e4c0:	d112      	bne.n	2e4e8 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2e4c2:	693b      	ldr	r3, [r7, #16]
   2e4c4:	3301      	adds	r3, #1
   2e4c6:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e4c8:	e005      	b.n	2e4d6 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2e4ca:	693b      	ldr	r3, [r7, #16]
   2e4cc:	3301      	adds	r3, #1
   2e4ce:	613b      	str	r3, [r7, #16]
   2e4d0:	693b      	ldr	r3, [r7, #16]
   2e4d2:	3301      	adds	r3, #1
   2e4d4:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e4d6:	68fa      	ldr	r2, [r7, #12]
   2e4d8:	68bb      	ldr	r3, [r7, #8]
   2e4da:	429a      	cmp	r2, r3
   2e4dc:	d20b      	bcs.n	2e4f6 <isTopicMatched+0x8a>
   2e4de:	68fb      	ldr	r3, [r7, #12]
   2e4e0:	781b      	ldrb	r3, [r3, #0]
   2e4e2:	2b2f      	cmp	r3, #47	; 0x2f
   2e4e4:	d1f1      	bne.n	2e4ca <isTopicMatched+0x5e>
   2e4e6:	e006      	b.n	2e4f6 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2e4e8:	697b      	ldr	r3, [r7, #20]
   2e4ea:	781b      	ldrb	r3, [r3, #0]
   2e4ec:	2b23      	cmp	r3, #35	; 0x23
   2e4ee:	d102      	bne.n	2e4f6 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2e4f0:	68bb      	ldr	r3, [r7, #8]
   2e4f2:	3b01      	subs	r3, #1
   2e4f4:	613b      	str	r3, [r7, #16]
        curf++;
   2e4f6:	697b      	ldr	r3, [r7, #20]
   2e4f8:	3301      	adds	r3, #1
   2e4fa:	617b      	str	r3, [r7, #20]
        curn++;
   2e4fc:	693b      	ldr	r3, [r7, #16]
   2e4fe:	3301      	adds	r3, #1
   2e500:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2e502:	697b      	ldr	r3, [r7, #20]
   2e504:	781b      	ldrb	r3, [r3, #0]
   2e506:	2b00      	cmp	r3, #0
   2e508:	d007      	beq.n	2e51a <isTopicMatched+0xae>
   2e50a:	693a      	ldr	r2, [r7, #16]
   2e50c:	68bb      	ldr	r3, [r7, #8]
   2e50e:	429a      	cmp	r2, r3
   2e510:	d3bd      	bcc.n	2e48e <isTopicMatched+0x22>
   2e512:	e002      	b.n	2e51a <isTopicMatched+0xae>
            break;
   2e514:	46c0      	nop			; (mov r8, r8)
   2e516:	e000      	b.n	2e51a <isTopicMatched+0xae>
            break;
   2e518:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2e51a:	693a      	ldr	r2, [r7, #16]
   2e51c:	68bb      	ldr	r3, [r7, #8]
   2e51e:	429a      	cmp	r2, r3
   2e520:	d105      	bne.n	2e52e <isTopicMatched+0xc2>
   2e522:	697b      	ldr	r3, [r7, #20]
   2e524:	781b      	ldrb	r3, [r3, #0]
   2e526:	2b00      	cmp	r3, #0
   2e528:	d101      	bne.n	2e52e <isTopicMatched+0xc2>
   2e52a:	2301      	movs	r3, #1
   2e52c:	e000      	b.n	2e530 <isTopicMatched+0xc4>
   2e52e:	2300      	movs	r3, #0
   2e530:	b2db      	uxtb	r3, r3
}
   2e532:	0018      	movs	r0, r3
   2e534:	46bd      	mov	sp, r7
   2e536:	b006      	add	sp, #24
   2e538:	bd80      	pop	{r7, pc}
	...

0002e53c <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2e53c:	b580      	push	{r7, lr}
   2e53e:	b08a      	sub	sp, #40	; 0x28
   2e540:	af00      	add	r7, sp, #0
   2e542:	60f8      	str	r0, [r7, #12]
   2e544:	60b9      	str	r1, [r7, #8]
   2e546:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2e548:	2301      	movs	r3, #1
   2e54a:	425b      	negs	r3, r3
   2e54c:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e54e:	2300      	movs	r3, #0
   2e550:	627b      	str	r3, [r7, #36]	; 0x24
   2e552:	e044      	b.n	2e5de <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e554:	68fa      	ldr	r2, [r7, #12]
   2e556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e558:	3304      	adds	r3, #4
   2e55a:	00db      	lsls	r3, r3, #3
   2e55c:	18d3      	adds	r3, r2, r3
   2e55e:	3304      	adds	r3, #4
   2e560:	681b      	ldr	r3, [r3, #0]
   2e562:	2b00      	cmp	r3, #0
   2e564:	d038      	beq.n	2e5d8 <deliverMessage+0x9c>
   2e566:	68fa      	ldr	r2, [r7, #12]
   2e568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e56a:	3304      	adds	r3, #4
   2e56c:	00db      	lsls	r3, r3, #3
   2e56e:	18d3      	adds	r3, r2, r3
   2e570:	3304      	adds	r3, #4
   2e572:	681a      	ldr	r2, [r3, #0]
   2e574:	68bb      	ldr	r3, [r7, #8]
   2e576:	0011      	movs	r1, r2
   2e578:	0018      	movs	r0, r3
   2e57a:	4b28      	ldr	r3, [pc, #160]	; (2e61c <deliverMessage+0xe0>)
   2e57c:	4798      	blx	r3
   2e57e:	1e03      	subs	r3, r0, #0
   2e580:	d10d      	bne.n	2e59e <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2e582:	68fa      	ldr	r2, [r7, #12]
   2e584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e586:	3304      	adds	r3, #4
   2e588:	00db      	lsls	r3, r3, #3
   2e58a:	18d3      	adds	r3, r2, r3
   2e58c:	3304      	adds	r3, #4
   2e58e:	681b      	ldr	r3, [r3, #0]
   2e590:	68ba      	ldr	r2, [r7, #8]
   2e592:	0011      	movs	r1, r2
   2e594:	0018      	movs	r0, r3
   2e596:	4b22      	ldr	r3, [pc, #136]	; (2e620 <deliverMessage+0xe4>)
   2e598:	4798      	blx	r3
   2e59a:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e59c:	d01c      	beq.n	2e5d8 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2e59e:	68fa      	ldr	r2, [r7, #12]
   2e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e5a2:	3304      	adds	r3, #4
   2e5a4:	00db      	lsls	r3, r3, #3
   2e5a6:	18d3      	adds	r3, r2, r3
   2e5a8:	3308      	adds	r3, #8
   2e5aa:	681b      	ldr	r3, [r3, #0]
   2e5ac:	2b00      	cmp	r3, #0
   2e5ae:	d013      	beq.n	2e5d8 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2e5b0:	687a      	ldr	r2, [r7, #4]
   2e5b2:	68b9      	ldr	r1, [r7, #8]
   2e5b4:	2318      	movs	r3, #24
   2e5b6:	18fb      	adds	r3, r7, r3
   2e5b8:	0018      	movs	r0, r3
   2e5ba:	4b1a      	ldr	r3, [pc, #104]	; (2e624 <deliverMessage+0xe8>)
   2e5bc:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2e5be:	68fa      	ldr	r2, [r7, #12]
   2e5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e5c2:	3304      	adds	r3, #4
   2e5c4:	00db      	lsls	r3, r3, #3
   2e5c6:	18d3      	adds	r3, r2, r3
   2e5c8:	3308      	adds	r3, #8
   2e5ca:	681b      	ldr	r3, [r3, #0]
   2e5cc:	2218      	movs	r2, #24
   2e5ce:	18ba      	adds	r2, r7, r2
   2e5d0:	0010      	movs	r0, r2
   2e5d2:	4798      	blx	r3
                rc = SUCCESS;
   2e5d4:	2300      	movs	r3, #0
   2e5d6:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e5da:	3301      	adds	r3, #1
   2e5dc:	627b      	str	r3, [r7, #36]	; 0x24
   2e5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e5e0:	2b04      	cmp	r3, #4
   2e5e2:	ddb7      	ble.n	2e554 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2e5e4:	6a3b      	ldr	r3, [r7, #32]
   2e5e6:	3301      	adds	r3, #1
   2e5e8:	d112      	bne.n	2e610 <deliverMessage+0xd4>
   2e5ea:	68fb      	ldr	r3, [r7, #12]
   2e5ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e5ee:	2b00      	cmp	r3, #0
   2e5f0:	d00e      	beq.n	2e610 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2e5f2:	687a      	ldr	r2, [r7, #4]
   2e5f4:	68b9      	ldr	r1, [r7, #8]
   2e5f6:	2310      	movs	r3, #16
   2e5f8:	18fb      	adds	r3, r7, r3
   2e5fa:	0018      	movs	r0, r3
   2e5fc:	4b09      	ldr	r3, [pc, #36]	; (2e624 <deliverMessage+0xe8>)
   2e5fe:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2e600:	68fb      	ldr	r3, [r7, #12]
   2e602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e604:	2210      	movs	r2, #16
   2e606:	18ba      	adds	r2, r7, r2
   2e608:	0010      	movs	r0, r2
   2e60a:	4798      	blx	r3
        rc = SUCCESS;
   2e60c:	2300      	movs	r3, #0
   2e60e:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2e610:	6a3b      	ldr	r3, [r7, #32]
}
   2e612:	0018      	movs	r0, r3
   2e614:	46bd      	mov	sp, r7
   2e616:	b00a      	add	sp, #40	; 0x28
   2e618:	bd80      	pop	{r7, pc}
   2e61a:	46c0      	nop			; (mov r8, r8)
   2e61c:	00030211 	.word	0x00030211
   2e620:	0002e46d 	.word	0x0002e46d
   2e624:	0002e175 	.word	0x0002e175

0002e628 <keepalive>:


int keepalive(MQTTClient* c)
{
   2e628:	b580      	push	{r7, lr}
   2e62a:	b088      	sub	sp, #32
   2e62c:	af00      	add	r7, sp, #0
   2e62e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2e630:	2301      	movs	r3, #1
   2e632:	425b      	negs	r3, r3
   2e634:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2e636:	687b      	ldr	r3, [r7, #4]
   2e638:	699b      	ldr	r3, [r3, #24]
   2e63a:	2b00      	cmp	r3, #0
   2e63c:	d102      	bne.n	2e644 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2e63e:	2300      	movs	r3, #0
   2e640:	61fb      	str	r3, [r7, #28]
        goto exit;
   2e642:	e033      	b.n	2e6ac <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2e644:	687b      	ldr	r3, [r7, #4]
   2e646:	3354      	adds	r3, #84	; 0x54
   2e648:	0018      	movs	r0, r3
   2e64a:	4b1b      	ldr	r3, [pc, #108]	; (2e6b8 <keepalive+0x90>)
   2e64c:	4798      	blx	r3
   2e64e:	1e03      	subs	r3, r0, #0
   2e650:	d02c      	beq.n	2e6ac <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2e652:	687b      	ldr	r3, [r7, #4]
   2e654:	7f1b      	ldrb	r3, [r3, #28]
   2e656:	2b00      	cmp	r3, #0
   2e658:	d128      	bne.n	2e6ac <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2e65a:	230c      	movs	r3, #12
   2e65c:	18fb      	adds	r3, r7, r3
   2e65e:	0018      	movs	r0, r3
   2e660:	4b16      	ldr	r3, [pc, #88]	; (2e6bc <keepalive+0x94>)
   2e662:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2e664:	23fa      	movs	r3, #250	; 0xfa
   2e666:	009a      	lsls	r2, r3, #2
   2e668:	230c      	movs	r3, #12
   2e66a:	18fb      	adds	r3, r7, r3
   2e66c:	0011      	movs	r1, r2
   2e66e:	0018      	movs	r0, r3
   2e670:	4b13      	ldr	r3, [pc, #76]	; (2e6c0 <keepalive+0x98>)
   2e672:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2e674:	687b      	ldr	r3, [r7, #4]
   2e676:	691a      	ldr	r2, [r3, #16]
   2e678:	687b      	ldr	r3, [r7, #4]
   2e67a:	689b      	ldr	r3, [r3, #8]
   2e67c:	0019      	movs	r1, r3
   2e67e:	0010      	movs	r0, r2
   2e680:	4b10      	ldr	r3, [pc, #64]	; (2e6c4 <keepalive+0x9c>)
   2e682:	4798      	blx	r3
   2e684:	0003      	movs	r3, r0
   2e686:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2e688:	69bb      	ldr	r3, [r7, #24]
   2e68a:	2b00      	cmp	r3, #0
   2e68c:	dd0e      	ble.n	2e6ac <keepalive+0x84>
   2e68e:	230c      	movs	r3, #12
   2e690:	18fa      	adds	r2, r7, r3
   2e692:	69b9      	ldr	r1, [r7, #24]
   2e694:	687b      	ldr	r3, [r7, #4]
   2e696:	0018      	movs	r0, r3
   2e698:	4b0b      	ldr	r3, [pc, #44]	; (2e6c8 <keepalive+0xa0>)
   2e69a:	4798      	blx	r3
   2e69c:	0003      	movs	r3, r0
   2e69e:	61fb      	str	r3, [r7, #28]
   2e6a0:	69fb      	ldr	r3, [r7, #28]
   2e6a2:	2b00      	cmp	r3, #0
   2e6a4:	d102      	bne.n	2e6ac <keepalive+0x84>
                c->ping_outstanding = 1;
   2e6a6:	687b      	ldr	r3, [r7, #4]
   2e6a8:	2201      	movs	r2, #1
   2e6aa:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2e6ac:	69fb      	ldr	r3, [r7, #28]
}
   2e6ae:	0018      	movs	r0, r3
   2e6b0:	46bd      	mov	sp, r7
   2e6b2:	b008      	add	sp, #32
   2e6b4:	bd80      	pop	{r7, pc}
   2e6b6:	46c0      	nop			; (mov r8, r8)
   2e6b8:	0002efa9 	.word	0x0002efa9
   2e6bc:	0002f04d 	.word	0x0002f04d
   2e6c0:	0002efd5 	.word	0x0002efd5
   2e6c4:	0002fc21 	.word	0x0002fc21
   2e6c8:	0002e1c5 	.word	0x0002e1c5

0002e6cc <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2e6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e6ce:	b095      	sub	sp, #84	; 0x54
   2e6d0:	af06      	add	r7, sp, #24
   2e6d2:	6078      	str	r0, [r7, #4]
   2e6d4:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2e6d6:	683a      	ldr	r2, [r7, #0]
   2e6d8:	687b      	ldr	r3, [r7, #4]
   2e6da:	0011      	movs	r1, r2
   2e6dc:	0018      	movs	r0, r3
   2e6de:	4b70      	ldr	r3, [pc, #448]	; (2e8a0 <cycle+0x1d4>)
   2e6e0:	4798      	blx	r3
   2e6e2:	0002      	movs	r2, r0
   2e6e4:	232e      	movs	r3, #46	; 0x2e
   2e6e6:	18fb      	adds	r3, r7, r3
   2e6e8:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2e6ea:	2300      	movs	r3, #0
   2e6ec:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2e6ee:	2300      	movs	r3, #0
   2e6f0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2e6f2:	232e      	movs	r3, #46	; 0x2e
   2e6f4:	18fb      	adds	r3, r7, r3
   2e6f6:	881b      	ldrh	r3, [r3, #0]
   2e6f8:	2b0d      	cmp	r3, #13
   2e6fa:	d900      	bls.n	2e6fe <cycle+0x32>
   2e6fc:	e0bd      	b.n	2e87a <cycle+0x1ae>
   2e6fe:	009a      	lsls	r2, r3, #2
   2e700:	4b68      	ldr	r3, [pc, #416]	; (2e8a4 <cycle+0x1d8>)
   2e702:	18d3      	adds	r3, r2, r3
   2e704:	681b      	ldr	r3, [r3, #0]
   2e706:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e708:	687b      	ldr	r3, [r7, #4]
   2e70a:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2e70c:	687b      	ldr	r3, [r7, #4]
   2e70e:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e710:	001e      	movs	r6, r3
   2e712:	2310      	movs	r3, #16
   2e714:	18fb      	adds	r3, r7, r3
   2e716:	1d1d      	adds	r5, r3, #4
   2e718:	2310      	movs	r3, #16
   2e71a:	18fb      	adds	r3, r7, r3
   2e71c:	1c5c      	adds	r4, r3, #1
   2e71e:	230c      	movs	r3, #12
   2e720:	18f9      	adds	r1, r7, r3
   2e722:	2310      	movs	r3, #16
   2e724:	18fb      	adds	r3, r7, r3
   2e726:	1c98      	adds	r0, r3, #2
   2e728:	9604      	str	r6, [sp, #16]
   2e72a:	9203      	str	r2, [sp, #12]
   2e72c:	2310      	movs	r3, #16
   2e72e:	18fb      	adds	r3, r7, r3
   2e730:	330c      	adds	r3, #12
   2e732:	9302      	str	r3, [sp, #8]
   2e734:	2310      	movs	r3, #16
   2e736:	18fb      	adds	r3, r7, r3
   2e738:	3308      	adds	r3, #8
   2e73a:	9301      	str	r3, [sp, #4]
   2e73c:	2320      	movs	r3, #32
   2e73e:	18fb      	adds	r3, r7, r3
   2e740:	9300      	str	r3, [sp, #0]
   2e742:	002b      	movs	r3, r5
   2e744:	0022      	movs	r2, r4
   2e746:	4c58      	ldr	r4, [pc, #352]	; (2e8a8 <cycle+0x1dc>)
   2e748:	47a0      	blx	r4
   2e74a:	0003      	movs	r3, r0
   2e74c:	2b01      	cmp	r3, #1
   2e74e:	d000      	beq.n	2e752 <cycle+0x86>
   2e750:	e098      	b.n	2e884 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2e752:	68fb      	ldr	r3, [r7, #12]
   2e754:	b2da      	uxtb	r2, r3
   2e756:	2310      	movs	r3, #16
   2e758:	18fb      	adds	r3, r7, r3
   2e75a:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2e75c:	2310      	movs	r3, #16
   2e75e:	18fa      	adds	r2, r7, r3
   2e760:	2320      	movs	r3, #32
   2e762:	18f9      	adds	r1, r7, r3
   2e764:	687b      	ldr	r3, [r7, #4]
   2e766:	0018      	movs	r0, r3
   2e768:	4b50      	ldr	r3, [pc, #320]	; (2e8ac <cycle+0x1e0>)
   2e76a:	4798      	blx	r3
            if (msg.qos != QOS0)
   2e76c:	2310      	movs	r3, #16
   2e76e:	18fb      	adds	r3, r7, r3
   2e770:	781b      	ldrb	r3, [r3, #0]
   2e772:	2b00      	cmp	r3, #0
   2e774:	d100      	bne.n	2e778 <cycle+0xac>
   2e776:	e07d      	b.n	2e874 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2e778:	2310      	movs	r3, #16
   2e77a:	18fb      	adds	r3, r7, r3
   2e77c:	781b      	ldrb	r3, [r3, #0]
   2e77e:	2b01      	cmp	r3, #1
   2e780:	d10f      	bne.n	2e7a2 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2e782:	687b      	ldr	r3, [r7, #4]
   2e784:	6918      	ldr	r0, [r3, #16]
   2e786:	687b      	ldr	r3, [r7, #4]
   2e788:	689b      	ldr	r3, [r3, #8]
   2e78a:	0019      	movs	r1, r3
   2e78c:	2310      	movs	r3, #16
   2e78e:	18fb      	adds	r3, r7, r3
   2e790:	889b      	ldrh	r3, [r3, #4]
   2e792:	9300      	str	r3, [sp, #0]
   2e794:	2300      	movs	r3, #0
   2e796:	2204      	movs	r2, #4
   2e798:	4c45      	ldr	r4, [pc, #276]	; (2e8b0 <cycle+0x1e4>)
   2e79a:	47a0      	blx	r4
   2e79c:	0003      	movs	r3, r0
   2e79e:	637b      	str	r3, [r7, #52]	; 0x34
   2e7a0:	e013      	b.n	2e7ca <cycle+0xfe>
                else if (msg.qos == QOS2)
   2e7a2:	2310      	movs	r3, #16
   2e7a4:	18fb      	adds	r3, r7, r3
   2e7a6:	781b      	ldrb	r3, [r3, #0]
   2e7a8:	2b02      	cmp	r3, #2
   2e7aa:	d10e      	bne.n	2e7ca <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2e7ac:	687b      	ldr	r3, [r7, #4]
   2e7ae:	6918      	ldr	r0, [r3, #16]
   2e7b0:	687b      	ldr	r3, [r7, #4]
   2e7b2:	689b      	ldr	r3, [r3, #8]
   2e7b4:	0019      	movs	r1, r3
   2e7b6:	2310      	movs	r3, #16
   2e7b8:	18fb      	adds	r3, r7, r3
   2e7ba:	889b      	ldrh	r3, [r3, #4]
   2e7bc:	9300      	str	r3, [sp, #0]
   2e7be:	2300      	movs	r3, #0
   2e7c0:	2205      	movs	r2, #5
   2e7c2:	4c3b      	ldr	r4, [pc, #236]	; (2e8b0 <cycle+0x1e4>)
   2e7c4:	47a0      	blx	r4
   2e7c6:	0003      	movs	r3, r0
   2e7c8:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2e7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e7cc:	2b00      	cmp	r3, #0
   2e7ce:	dc03      	bgt.n	2e7d8 <cycle+0x10c>
                    rc = FAILURE;
   2e7d0:	2301      	movs	r3, #1
   2e7d2:	425b      	negs	r3, r3
   2e7d4:	633b      	str	r3, [r7, #48]	; 0x30
   2e7d6:	e007      	b.n	2e7e8 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2e7d8:	683a      	ldr	r2, [r7, #0]
   2e7da:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e7dc:	687b      	ldr	r3, [r7, #4]
   2e7de:	0018      	movs	r0, r3
   2e7e0:	4b34      	ldr	r3, [pc, #208]	; (2e8b4 <cycle+0x1e8>)
   2e7e2:	4798      	blx	r3
   2e7e4:	0003      	movs	r3, r0
   2e7e6:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2e7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e7ea:	3301      	adds	r3, #1
   2e7ec:	d142      	bne.n	2e874 <cycle+0x1a8>
                    goto exit; // there was a problem
   2e7ee:	46c0      	nop			; (mov r8, r8)
   2e7f0:	e049      	b.n	2e886 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e7f2:	687b      	ldr	r3, [r7, #4]
   2e7f4:	695c      	ldr	r4, [r3, #20]
   2e7f6:	687b      	ldr	r3, [r7, #4]
   2e7f8:	68db      	ldr	r3, [r3, #12]
   2e7fa:	220a      	movs	r2, #10
   2e7fc:	18ba      	adds	r2, r7, r2
   2e7fe:	2109      	movs	r1, #9
   2e800:	1879      	adds	r1, r7, r1
   2e802:	2008      	movs	r0, #8
   2e804:	1838      	adds	r0, r7, r0
   2e806:	9300      	str	r3, [sp, #0]
   2e808:	0023      	movs	r3, r4
   2e80a:	4c2b      	ldr	r4, [pc, #172]	; (2e8b8 <cycle+0x1ec>)
   2e80c:	47a0      	blx	r4
   2e80e:	0003      	movs	r3, r0
   2e810:	2b01      	cmp	r3, #1
   2e812:	d003      	beq.n	2e81c <cycle+0x150>
                rc = FAILURE;
   2e814:	2301      	movs	r3, #1
   2e816:	425b      	negs	r3, r3
   2e818:	633b      	str	r3, [r7, #48]	; 0x30
   2e81a:	e023      	b.n	2e864 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2e81c:	687b      	ldr	r3, [r7, #4]
   2e81e:	6918      	ldr	r0, [r3, #16]
   2e820:	687b      	ldr	r3, [r7, #4]
   2e822:	689b      	ldr	r3, [r3, #8]
   2e824:	0019      	movs	r1, r3
   2e826:	230a      	movs	r3, #10
   2e828:	18fb      	adds	r3, r7, r3
   2e82a:	881b      	ldrh	r3, [r3, #0]
   2e82c:	9300      	str	r3, [sp, #0]
   2e82e:	2300      	movs	r3, #0
   2e830:	2206      	movs	r2, #6
   2e832:	4c1f      	ldr	r4, [pc, #124]	; (2e8b0 <cycle+0x1e4>)
   2e834:	47a0      	blx	r4
   2e836:	0003      	movs	r3, r0
   2e838:	637b      	str	r3, [r7, #52]	; 0x34
   2e83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e83c:	2b00      	cmp	r3, #0
   2e83e:	dc03      	bgt.n	2e848 <cycle+0x17c>
                rc = FAILURE;
   2e840:	2301      	movs	r3, #1
   2e842:	425b      	negs	r3, r3
   2e844:	633b      	str	r3, [r7, #48]	; 0x30
   2e846:	e00d      	b.n	2e864 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2e848:	683a      	ldr	r2, [r7, #0]
   2e84a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e84c:	687b      	ldr	r3, [r7, #4]
   2e84e:	0018      	movs	r0, r3
   2e850:	4b18      	ldr	r3, [pc, #96]	; (2e8b4 <cycle+0x1e8>)
   2e852:	4798      	blx	r3
   2e854:	0003      	movs	r3, r0
   2e856:	633b      	str	r3, [r7, #48]	; 0x30
   2e858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e85a:	2b00      	cmp	r3, #0
   2e85c:	d002      	beq.n	2e864 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2e85e:	2301      	movs	r3, #1
   2e860:	425b      	negs	r3, r3
   2e862:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2e864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e866:	3301      	adds	r3, #1
   2e868:	d106      	bne.n	2e878 <cycle+0x1ac>
                goto exit; // there was a problem
   2e86a:	e00c      	b.n	2e886 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2e86c:	687b      	ldr	r3, [r7, #4]
   2e86e:	2200      	movs	r2, #0
   2e870:	771a      	strb	r2, [r3, #28]
            break;
   2e872:	e002      	b.n	2e87a <cycle+0x1ae>
            break;
   2e874:	46c0      	nop			; (mov r8, r8)
   2e876:	e000      	b.n	2e87a <cycle+0x1ae>
            break;
   2e878:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2e87a:	687b      	ldr	r3, [r7, #4]
   2e87c:	0018      	movs	r0, r3
   2e87e:	4b0f      	ldr	r3, [pc, #60]	; (2e8bc <cycle+0x1f0>)
   2e880:	4798      	blx	r3
   2e882:	e000      	b.n	2e886 <cycle+0x1ba>
                goto exit;
   2e884:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2e886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e888:	2b00      	cmp	r3, #0
   2e88a:	d103      	bne.n	2e894 <cycle+0x1c8>
        rc = packet_type;
   2e88c:	232e      	movs	r3, #46	; 0x2e
   2e88e:	18fb      	adds	r3, r7, r3
   2e890:	881b      	ldrh	r3, [r3, #0]
   2e892:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2e894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2e896:	0018      	movs	r0, r3
   2e898:	46bd      	mov	sp, r7
   2e89a:	b00f      	add	sp, #60	; 0x3c
   2e89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e89e:	46c0      	nop			; (mov r8, r8)
   2e8a0:	0002e381 	.word	0x0002e381
   2e8a4:	00039848 	.word	0x00039848
   2e8a8:	0002fc45 	.word	0x0002fc45
   2e8ac:	0002e53d 	.word	0x0002e53d
   2e8b0:	0003043d 	.word	0x0003043d
   2e8b4:	0002e1c5 	.word	0x0002e1c5
   2e8b8:	0002fd49 	.word	0x0002fd49
   2e8bc:	0002e629 	.word	0x0002e629

0002e8c0 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2e8c0:	b580      	push	{r7, lr}
   2e8c2:	b086      	sub	sp, #24
   2e8c4:	af00      	add	r7, sp, #0
   2e8c6:	6078      	str	r0, [r7, #4]
   2e8c8:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2e8ca:	2300      	movs	r3, #0
   2e8cc:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2e8ce:	2308      	movs	r3, #8
   2e8d0:	18fb      	adds	r3, r7, r3
   2e8d2:	0018      	movs	r0, r3
   2e8d4:	4b11      	ldr	r3, [pc, #68]	; (2e91c <MQTTYield+0x5c>)
   2e8d6:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2e8d8:	683a      	ldr	r2, [r7, #0]
   2e8da:	2308      	movs	r3, #8
   2e8dc:	18fb      	adds	r3, r7, r3
   2e8de:	0011      	movs	r1, r2
   2e8e0:	0018      	movs	r0, r3
   2e8e2:	4b0f      	ldr	r3, [pc, #60]	; (2e920 <MQTTYield+0x60>)
   2e8e4:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2e8e6:	2308      	movs	r3, #8
   2e8e8:	18fa      	adds	r2, r7, r3
   2e8ea:	687b      	ldr	r3, [r7, #4]
   2e8ec:	0011      	movs	r1, r2
   2e8ee:	0018      	movs	r0, r3
   2e8f0:	4b0c      	ldr	r3, [pc, #48]	; (2e924 <MQTTYield+0x64>)
   2e8f2:	4798      	blx	r3
   2e8f4:	0003      	movs	r3, r0
   2e8f6:	3301      	adds	r3, #1
   2e8f8:	d103      	bne.n	2e902 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2e8fa:	2301      	movs	r3, #1
   2e8fc:	425b      	negs	r3, r3
   2e8fe:	617b      	str	r3, [r7, #20]
            break;
   2e900:	e006      	b.n	2e910 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2e902:	2308      	movs	r3, #8
   2e904:	18fb      	adds	r3, r7, r3
   2e906:	0018      	movs	r0, r3
   2e908:	4b07      	ldr	r3, [pc, #28]	; (2e928 <MQTTYield+0x68>)
   2e90a:	4798      	blx	r3
   2e90c:	1e03      	subs	r3, r0, #0
   2e90e:	d0ea      	beq.n	2e8e6 <MQTTYield+0x26>
        
    return rc;
   2e910:	697b      	ldr	r3, [r7, #20]
}
   2e912:	0018      	movs	r0, r3
   2e914:	46bd      	mov	sp, r7
   2e916:	b006      	add	sp, #24
   2e918:	bd80      	pop	{r7, pc}
   2e91a:	46c0      	nop			; (mov r8, r8)
   2e91c:	0002f04d 	.word	0x0002f04d
   2e920:	0002efd5 	.word	0x0002efd5
   2e924:	0002e6cd 	.word	0x0002e6cd
   2e928:	0002efa9 	.word	0x0002efa9

0002e92c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2e92c:	b580      	push	{r7, lr}
   2e92e:	b086      	sub	sp, #24
   2e930:	af00      	add	r7, sp, #0
   2e932:	60f8      	str	r0, [r7, #12]
   2e934:	60b9      	str	r1, [r7, #8]
   2e936:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e938:	2301      	movs	r3, #1
   2e93a:	425b      	negs	r3, r3
   2e93c:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2e93e:	687b      	ldr	r3, [r7, #4]
   2e940:	0018      	movs	r0, r3
   2e942:	4b0b      	ldr	r3, [pc, #44]	; (2e970 <waitfor+0x44>)
   2e944:	4798      	blx	r3
   2e946:	1e03      	subs	r3, r0, #0
   2e948:	d10c      	bne.n	2e964 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2e94a:	687a      	ldr	r2, [r7, #4]
   2e94c:	68fb      	ldr	r3, [r7, #12]
   2e94e:	0011      	movs	r1, r2
   2e950:	0018      	movs	r0, r3
   2e952:	4b08      	ldr	r3, [pc, #32]	; (2e974 <waitfor+0x48>)
   2e954:	4798      	blx	r3
   2e956:	0003      	movs	r3, r0
   2e958:	617b      	str	r3, [r7, #20]
   2e95a:	697a      	ldr	r2, [r7, #20]
   2e95c:	68bb      	ldr	r3, [r7, #8]
   2e95e:	429a      	cmp	r2, r3
   2e960:	d1ed      	bne.n	2e93e <waitfor+0x12>
   2e962:	e000      	b.n	2e966 <waitfor+0x3a>
            break; // we timed out
   2e964:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2e966:	697b      	ldr	r3, [r7, #20]
}
   2e968:	0018      	movs	r0, r3
   2e96a:	46bd      	mov	sp, r7
   2e96c:	b006      	add	sp, #24
   2e96e:	bd80      	pop	{r7, pc}
   2e970:	0002efa9 	.word	0x0002efa9
   2e974:	0002e6cd 	.word	0x0002e6cd

0002e978 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2e978:	b590      	push	{r4, r7, lr}
   2e97a:	b09f      	sub	sp, #124	; 0x7c
   2e97c:	af00      	add	r7, sp, #0
   2e97e:	6078      	str	r0, [r7, #4]
   2e980:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2e982:	2301      	movs	r3, #1
   2e984:	425b      	negs	r3, r3
   2e986:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2e988:	230c      	movs	r3, #12
   2e98a:	18fa      	adds	r2, r7, r3
   2e98c:	4b41      	ldr	r3, [pc, #260]	; (2ea94 <MQTTConnect+0x11c>)
   2e98e:	0010      	movs	r0, r2
   2e990:	0019      	movs	r1, r3
   2e992:	2358      	movs	r3, #88	; 0x58
   2e994:	001a      	movs	r2, r3
   2e996:	4b40      	ldr	r3, [pc, #256]	; (2ea98 <MQTTConnect+0x120>)
   2e998:	4798      	blx	r3
    int len = 0;
   2e99a:	2300      	movs	r3, #0
   2e99c:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2e99e:	687b      	ldr	r3, [r7, #4]
   2e9a0:	6a1b      	ldr	r3, [r3, #32]
   2e9a2:	2b00      	cmp	r3, #0
   2e9a4:	d166      	bne.n	2ea74 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2e9a6:	2364      	movs	r3, #100	; 0x64
   2e9a8:	18fb      	adds	r3, r7, r3
   2e9aa:	0018      	movs	r0, r3
   2e9ac:	4b3b      	ldr	r3, [pc, #236]	; (2ea9c <MQTTConnect+0x124>)
   2e9ae:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2e9b0:	687b      	ldr	r3, [r7, #4]
   2e9b2:	685a      	ldr	r2, [r3, #4]
   2e9b4:	2364      	movs	r3, #100	; 0x64
   2e9b6:	18fb      	adds	r3, r7, r3
   2e9b8:	0011      	movs	r1, r2
   2e9ba:	0018      	movs	r0, r3
   2e9bc:	4b38      	ldr	r3, [pc, #224]	; (2eaa0 <MQTTConnect+0x128>)
   2e9be:	4798      	blx	r3

    if (options == 0)
   2e9c0:	683b      	ldr	r3, [r7, #0]
   2e9c2:	2b00      	cmp	r3, #0
   2e9c4:	d102      	bne.n	2e9cc <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2e9c6:	230c      	movs	r3, #12
   2e9c8:	18fb      	adds	r3, r7, r3
   2e9ca:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2e9cc:	683b      	ldr	r3, [r7, #0]
   2e9ce:	8b1b      	ldrh	r3, [r3, #24]
   2e9d0:	001a      	movs	r2, r3
   2e9d2:	687b      	ldr	r3, [r7, #4]
   2e9d4:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2e9d6:	687b      	ldr	r3, [r7, #4]
   2e9d8:	3354      	adds	r3, #84	; 0x54
   2e9da:	001a      	movs	r2, r3
   2e9dc:	687b      	ldr	r3, [r7, #4]
   2e9de:	699b      	ldr	r3, [r3, #24]
   2e9e0:	0019      	movs	r1, r3
   2e9e2:	0010      	movs	r0, r2
   2e9e4:	4b2f      	ldr	r3, [pc, #188]	; (2eaa4 <MQTTConnect+0x12c>)
   2e9e6:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2e9e8:	687b      	ldr	r3, [r7, #4]
   2e9ea:	6918      	ldr	r0, [r3, #16]
   2e9ec:	687b      	ldr	r3, [r7, #4]
   2e9ee:	689b      	ldr	r3, [r3, #8]
   2e9f0:	0019      	movs	r1, r3
   2e9f2:	683b      	ldr	r3, [r7, #0]
   2e9f4:	001a      	movs	r2, r3
   2e9f6:	4b2c      	ldr	r3, [pc, #176]	; (2eaa8 <MQTTConnect+0x130>)
   2e9f8:	4798      	blx	r3
   2e9fa:	0003      	movs	r3, r0
   2e9fc:	673b      	str	r3, [r7, #112]	; 0x70
   2e9fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2ea00:	2b00      	cmp	r3, #0
   2ea02:	dd39      	ble.n	2ea78 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2ea04:	2364      	movs	r3, #100	; 0x64
   2ea06:	18fa      	adds	r2, r7, r3
   2ea08:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2ea0a:	687b      	ldr	r3, [r7, #4]
   2ea0c:	0018      	movs	r0, r3
   2ea0e:	4b27      	ldr	r3, [pc, #156]	; (2eaac <MQTTConnect+0x134>)
   2ea10:	4798      	blx	r3
   2ea12:	0003      	movs	r3, r0
   2ea14:	677b      	str	r3, [r7, #116]	; 0x74
   2ea16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ea18:	2b00      	cmp	r3, #0
   2ea1a:	d12f      	bne.n	2ea7c <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2ea1c:	2364      	movs	r3, #100	; 0x64
   2ea1e:	18fa      	adds	r2, r7, r3
   2ea20:	687b      	ldr	r3, [r7, #4]
   2ea22:	2102      	movs	r1, #2
   2ea24:	0018      	movs	r0, r3
   2ea26:	4b22      	ldr	r3, [pc, #136]	; (2eab0 <MQTTConnect+0x138>)
   2ea28:	4798      	blx	r3
   2ea2a:	0003      	movs	r3, r0
   2ea2c:	2b02      	cmp	r3, #2
   2ea2e:	d11d      	bne.n	2ea6c <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2ea30:	230b      	movs	r3, #11
   2ea32:	18fb      	adds	r3, r7, r3
   2ea34:	22ff      	movs	r2, #255	; 0xff
   2ea36:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2ea38:	230a      	movs	r3, #10
   2ea3a:	18fb      	adds	r3, r7, r3
   2ea3c:	2200      	movs	r2, #0
   2ea3e:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2ea40:	687b      	ldr	r3, [r7, #4]
   2ea42:	695a      	ldr	r2, [r3, #20]
   2ea44:	687b      	ldr	r3, [r7, #4]
   2ea46:	68db      	ldr	r3, [r3, #12]
   2ea48:	210b      	movs	r1, #11
   2ea4a:	1879      	adds	r1, r7, r1
   2ea4c:	200a      	movs	r0, #10
   2ea4e:	1838      	adds	r0, r7, r0
   2ea50:	4c18      	ldr	r4, [pc, #96]	; (2eab4 <MQTTConnect+0x13c>)
   2ea52:	47a0      	blx	r4
   2ea54:	0003      	movs	r3, r0
   2ea56:	2b01      	cmp	r3, #1
   2ea58:	d104      	bne.n	2ea64 <MQTTConnect+0xec>
            rc = connack_rc;
   2ea5a:	230b      	movs	r3, #11
   2ea5c:	18fb      	adds	r3, r7, r3
   2ea5e:	781b      	ldrb	r3, [r3, #0]
   2ea60:	677b      	str	r3, [r7, #116]	; 0x74
   2ea62:	e00c      	b.n	2ea7e <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2ea64:	2301      	movs	r3, #1
   2ea66:	425b      	negs	r3, r3
   2ea68:	677b      	str	r3, [r7, #116]	; 0x74
   2ea6a:	e008      	b.n	2ea7e <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2ea6c:	2301      	movs	r3, #1
   2ea6e:	425b      	negs	r3, r3
   2ea70:	677b      	str	r3, [r7, #116]	; 0x74
   2ea72:	e004      	b.n	2ea7e <MQTTConnect+0x106>
		goto exit;
   2ea74:	46c0      	nop			; (mov r8, r8)
   2ea76:	e002      	b.n	2ea7e <MQTTConnect+0x106>
        goto exit;
   2ea78:	46c0      	nop			; (mov r8, r8)
   2ea7a:	e000      	b.n	2ea7e <MQTTConnect+0x106>
        goto exit; // there was a problem
   2ea7c:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2ea7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ea80:	2b00      	cmp	r3, #0
   2ea82:	d102      	bne.n	2ea8a <MQTTConnect+0x112>
        c->isconnected = 1;
   2ea84:	687b      	ldr	r3, [r7, #4]
   2ea86:	2201      	movs	r2, #1
   2ea88:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2ea8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2ea8c:	0018      	movs	r0, r3
   2ea8e:	46bd      	mov	sp, r7
   2ea90:	b01f      	add	sp, #124	; 0x7c
   2ea92:	bd90      	pop	{r4, r7, pc}
   2ea94:	00039880 	.word	0x00039880
   2ea98:	000346a9 	.word	0x000346a9
   2ea9c:	0002f04d 	.word	0x0002f04d
   2eaa0:	0002efd5 	.word	0x0002efd5
   2eaa4:	0002effd 	.word	0x0002effd
   2eaa8:	0002f829 	.word	0x0002f829
   2eaac:	0002e1c5 	.word	0x0002e1c5
   2eab0:	0002e92d 	.word	0x0002e92d
   2eab4:	0002faa5 	.word	0x0002faa5

0002eab8 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2eab8:	b5b0      	push	{r4, r5, r7, lr}
   2eaba:	b096      	sub	sp, #88	; 0x58
   2eabc:	af04      	add	r7, sp, #16
   2eabe:	60f8      	str	r0, [r7, #12]
   2eac0:	60b9      	str	r1, [r7, #8]
   2eac2:	603b      	str	r3, [r7, #0]
   2eac4:	1dfb      	adds	r3, r7, #7
   2eac6:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2eac8:	2301      	movs	r3, #1
   2eaca:	425b      	negs	r3, r3
   2eacc:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2eace:	2300      	movs	r3, #0
   2ead0:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2ead2:	2324      	movs	r3, #36	; 0x24
   2ead4:	18fb      	adds	r3, r7, r3
   2ead6:	2200      	movs	r2, #0
   2ead8:	601a      	str	r2, [r3, #0]
   2eada:	2324      	movs	r3, #36	; 0x24
   2eadc:	18fb      	adds	r3, r7, r3
   2eade:	2200      	movs	r2, #0
   2eae0:	605a      	str	r2, [r3, #4]
   2eae2:	2324      	movs	r3, #36	; 0x24
   2eae4:	18fb      	adds	r3, r7, r3
   2eae6:	2200      	movs	r2, #0
   2eae8:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2eaea:	1dfb      	adds	r3, r7, #7
   2eaec:	781b      	ldrb	r3, [r3, #0]
   2eaee:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2eaf0:	2324      	movs	r3, #36	; 0x24
   2eaf2:	18fb      	adds	r3, r7, r3
   2eaf4:	68ba      	ldr	r2, [r7, #8]
   2eaf6:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2eaf8:	68fb      	ldr	r3, [r7, #12]
   2eafa:	6a1b      	ldr	r3, [r3, #32]
   2eafc:	2b00      	cmp	r3, #0
   2eafe:	d100      	bne.n	2eb02 <MQTTSubscribe+0x4a>
   2eb00:	e088      	b.n	2ec14 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2eb02:	2330      	movs	r3, #48	; 0x30
   2eb04:	18fb      	adds	r3, r7, r3
   2eb06:	0018      	movs	r0, r3
   2eb08:	4b47      	ldr	r3, [pc, #284]	; (2ec28 <MQTTSubscribe+0x170>)
   2eb0a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2eb0c:	68fb      	ldr	r3, [r7, #12]
   2eb0e:	685a      	ldr	r2, [r3, #4]
   2eb10:	2330      	movs	r3, #48	; 0x30
   2eb12:	18fb      	adds	r3, r7, r3
   2eb14:	0011      	movs	r1, r2
   2eb16:	0018      	movs	r0, r3
   2eb18:	4b44      	ldr	r3, [pc, #272]	; (2ec2c <MQTTSubscribe+0x174>)
   2eb1a:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2eb1c:	68fb      	ldr	r3, [r7, #12]
   2eb1e:	691c      	ldr	r4, [r3, #16]
   2eb20:	68fb      	ldr	r3, [r7, #12]
   2eb22:	689b      	ldr	r3, [r3, #8]
   2eb24:	001d      	movs	r5, r3
   2eb26:	68fb      	ldr	r3, [r7, #12]
   2eb28:	0018      	movs	r0, r3
   2eb2a:	4b41      	ldr	r3, [pc, #260]	; (2ec30 <MQTTSubscribe+0x178>)
   2eb2c:	4798      	blx	r3
   2eb2e:	0003      	movs	r3, r0
   2eb30:	b29a      	uxth	r2, r3
   2eb32:	2320      	movs	r3, #32
   2eb34:	18fb      	adds	r3, r7, r3
   2eb36:	9302      	str	r3, [sp, #8]
   2eb38:	2324      	movs	r3, #36	; 0x24
   2eb3a:	18fb      	adds	r3, r7, r3
   2eb3c:	9301      	str	r3, [sp, #4]
   2eb3e:	2301      	movs	r3, #1
   2eb40:	9300      	str	r3, [sp, #0]
   2eb42:	0013      	movs	r3, r2
   2eb44:	2200      	movs	r2, #0
   2eb46:	0029      	movs	r1, r5
   2eb48:	0020      	movs	r0, r4
   2eb4a:	4c3a      	ldr	r4, [pc, #232]	; (2ec34 <MQTTSubscribe+0x17c>)
   2eb4c:	47a0      	blx	r4
   2eb4e:	0003      	movs	r3, r0
   2eb50:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2eb52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2eb54:	2b00      	cmp	r3, #0
   2eb56:	dd5f      	ble.n	2ec18 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2eb58:	2330      	movs	r3, #48	; 0x30
   2eb5a:	18fa      	adds	r2, r7, r3
   2eb5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2eb5e:	68fb      	ldr	r3, [r7, #12]
   2eb60:	0018      	movs	r0, r3
   2eb62:	4b35      	ldr	r3, [pc, #212]	; (2ec38 <MQTTSubscribe+0x180>)
   2eb64:	4798      	blx	r3
   2eb66:	0003      	movs	r3, r0
   2eb68:	647b      	str	r3, [r7, #68]	; 0x44
   2eb6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2eb6c:	2b00      	cmp	r3, #0
   2eb6e:	d155      	bne.n	2ec1c <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2eb70:	2330      	movs	r3, #48	; 0x30
   2eb72:	18fa      	adds	r2, r7, r3
   2eb74:	68fb      	ldr	r3, [r7, #12]
   2eb76:	2109      	movs	r1, #9
   2eb78:	0018      	movs	r0, r3
   2eb7a:	4b30      	ldr	r3, [pc, #192]	; (2ec3c <MQTTSubscribe+0x184>)
   2eb7c:	4798      	blx	r3
   2eb7e:	0003      	movs	r3, r0
   2eb80:	2b09      	cmp	r3, #9
   2eb82:	d143      	bne.n	2ec0c <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2eb84:	2300      	movs	r3, #0
   2eb86:	61fb      	str	r3, [r7, #28]
   2eb88:	2301      	movs	r3, #1
   2eb8a:	425b      	negs	r3, r3
   2eb8c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2eb8e:	68fb      	ldr	r3, [r7, #12]
   2eb90:	695a      	ldr	r2, [r3, #20]
   2eb92:	68fb      	ldr	r3, [r7, #12]
   2eb94:	68db      	ldr	r3, [r3, #12]
   2eb96:	001c      	movs	r4, r3
   2eb98:	2318      	movs	r3, #24
   2eb9a:	18fb      	adds	r3, r7, r3
   2eb9c:	211c      	movs	r1, #28
   2eb9e:	1879      	adds	r1, r7, r1
   2eba0:	2016      	movs	r0, #22
   2eba2:	1838      	adds	r0, r7, r0
   2eba4:	9401      	str	r4, [sp, #4]
   2eba6:	9200      	str	r2, [sp, #0]
   2eba8:	000a      	movs	r2, r1
   2ebaa:	2101      	movs	r1, #1
   2ebac:	4c24      	ldr	r4, [pc, #144]	; (2ec40 <MQTTSubscribe+0x188>)
   2ebae:	47a0      	blx	r4
   2ebb0:	0003      	movs	r3, r0
   2ebb2:	2b01      	cmp	r3, #1
   2ebb4:	d101      	bne.n	2ebba <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2ebb6:	69bb      	ldr	r3, [r7, #24]
   2ebb8:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2ebba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2ebbc:	2b80      	cmp	r3, #128	; 0x80
   2ebbe:	d02e      	beq.n	2ec1e <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ebc0:	2300      	movs	r3, #0
   2ebc2:	643b      	str	r3, [r7, #64]	; 0x40
   2ebc4:	e01e      	b.n	2ec04 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2ebc6:	68fa      	ldr	r2, [r7, #12]
   2ebc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ebca:	3304      	adds	r3, #4
   2ebcc:	00db      	lsls	r3, r3, #3
   2ebce:	18d3      	adds	r3, r2, r3
   2ebd0:	3304      	adds	r3, #4
   2ebd2:	681b      	ldr	r3, [r3, #0]
   2ebd4:	2b00      	cmp	r3, #0
   2ebd6:	d112      	bne.n	2ebfe <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2ebd8:	68fa      	ldr	r2, [r7, #12]
   2ebda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ebdc:	3304      	adds	r3, #4
   2ebde:	00db      	lsls	r3, r3, #3
   2ebe0:	18d3      	adds	r3, r2, r3
   2ebe2:	3304      	adds	r3, #4
   2ebe4:	68ba      	ldr	r2, [r7, #8]
   2ebe6:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2ebe8:	68fa      	ldr	r2, [r7, #12]
   2ebea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ebec:	3304      	adds	r3, #4
   2ebee:	00db      	lsls	r3, r3, #3
   2ebf0:	18d3      	adds	r3, r2, r3
   2ebf2:	3308      	adds	r3, #8
   2ebf4:	683a      	ldr	r2, [r7, #0]
   2ebf6:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2ebf8:	2300      	movs	r3, #0
   2ebfa:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2ebfc:	e00f      	b.n	2ec1e <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ebfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ec00:	3301      	adds	r3, #1
   2ec02:	643b      	str	r3, [r7, #64]	; 0x40
   2ec04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ec06:	2b04      	cmp	r3, #4
   2ec08:	dddd      	ble.n	2ebc6 <MQTTSubscribe+0x10e>
   2ec0a:	e008      	b.n	2ec1e <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2ec0c:	2301      	movs	r3, #1
   2ec0e:	425b      	negs	r3, r3
   2ec10:	647b      	str	r3, [r7, #68]	; 0x44
   2ec12:	e004      	b.n	2ec1e <MQTTSubscribe+0x166>
		goto exit;
   2ec14:	46c0      	nop			; (mov r8, r8)
   2ec16:	e002      	b.n	2ec1e <MQTTSubscribe+0x166>
        goto exit;
   2ec18:	46c0      	nop			; (mov r8, r8)
   2ec1a:	e000      	b.n	2ec1e <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2ec1c:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ec1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2ec20:	0018      	movs	r0, r3
   2ec22:	46bd      	mov	sp, r7
   2ec24:	b012      	add	sp, #72	; 0x48
   2ec26:	bdb0      	pop	{r4, r5, r7, pc}
   2ec28:	0002f04d 	.word	0x0002f04d
   2ec2c:	0002efd5 	.word	0x0002efd5
   2ec30:	0002e195 	.word	0x0002e195
   2ec34:	00030585 	.word	0x00030585
   2ec38:	0002e1c5 	.word	0x0002e1c5
   2ec3c:	0002e92d 	.word	0x0002e92d
   2ec40:	000306d5 	.word	0x000306d5

0002ec44 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2ec44:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ec46:	46ce      	mov	lr, r9
   2ec48:	4647      	mov	r7, r8
   2ec4a:	b580      	push	{r7, lr}
   2ec4c:	b097      	sub	sp, #92	; 0x5c
   2ec4e:	af08      	add	r7, sp, #32
   2ec50:	60f8      	str	r0, [r7, #12]
   2ec52:	60b9      	str	r1, [r7, #8]
   2ec54:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2ec56:	2301      	movs	r3, #1
   2ec58:	425b      	negs	r3, r3
   2ec5a:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2ec5c:	2318      	movs	r3, #24
   2ec5e:	18fb      	adds	r3, r7, r3
   2ec60:	2200      	movs	r2, #0
   2ec62:	601a      	str	r2, [r3, #0]
   2ec64:	2318      	movs	r3, #24
   2ec66:	18fb      	adds	r3, r7, r3
   2ec68:	2200      	movs	r2, #0
   2ec6a:	605a      	str	r2, [r3, #4]
   2ec6c:	2318      	movs	r3, #24
   2ec6e:	18fb      	adds	r3, r7, r3
   2ec70:	2200      	movs	r2, #0
   2ec72:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2ec74:	2318      	movs	r3, #24
   2ec76:	18fb      	adds	r3, r7, r3
   2ec78:	68ba      	ldr	r2, [r7, #8]
   2ec7a:	601a      	str	r2, [r3, #0]
    int len = 0;
   2ec7c:	2300      	movs	r3, #0
   2ec7e:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2ec80:	68fb      	ldr	r3, [r7, #12]
   2ec82:	6a1b      	ldr	r3, [r3, #32]
   2ec84:	2b00      	cmp	r3, #0
   2ec86:	d100      	bne.n	2ec8a <MQTTPublish+0x46>
   2ec88:	e0a0      	b.n	2edcc <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2ec8a:	2324      	movs	r3, #36	; 0x24
   2ec8c:	18fb      	adds	r3, r7, r3
   2ec8e:	0018      	movs	r0, r3
   2ec90:	4b55      	ldr	r3, [pc, #340]	; (2ede8 <MQTTPublish+0x1a4>)
   2ec92:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2ec94:	68fb      	ldr	r3, [r7, #12]
   2ec96:	685a      	ldr	r2, [r3, #4]
   2ec98:	2324      	movs	r3, #36	; 0x24
   2ec9a:	18fb      	adds	r3, r7, r3
   2ec9c:	0011      	movs	r1, r2
   2ec9e:	0018      	movs	r0, r3
   2eca0:	4b52      	ldr	r3, [pc, #328]	; (2edec <MQTTPublish+0x1a8>)
   2eca2:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2eca4:	687b      	ldr	r3, [r7, #4]
   2eca6:	781b      	ldrb	r3, [r3, #0]
   2eca8:	2b01      	cmp	r3, #1
   2ecaa:	d003      	beq.n	2ecb4 <MQTTPublish+0x70>
   2ecac:	687b      	ldr	r3, [r7, #4]
   2ecae:	781b      	ldrb	r3, [r3, #0]
   2ecb0:	2b02      	cmp	r3, #2
   2ecb2:	d107      	bne.n	2ecc4 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2ecb4:	68fb      	ldr	r3, [r7, #12]
   2ecb6:	0018      	movs	r0, r3
   2ecb8:	4b4d      	ldr	r3, [pc, #308]	; (2edf0 <MQTTPublish+0x1ac>)
   2ecba:	4798      	blx	r3
   2ecbc:	0003      	movs	r3, r0
   2ecbe:	b29a      	uxth	r2, r3
   2ecc0:	687b      	ldr	r3, [r7, #4]
   2ecc2:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2ecc4:	68fb      	ldr	r3, [r7, #12]
   2ecc6:	691b      	ldr	r3, [r3, #16]
   2ecc8:	469c      	mov	ip, r3
   2ecca:	68fb      	ldr	r3, [r7, #12]
   2eccc:	689b      	ldr	r3, [r3, #8]
   2ecce:	001d      	movs	r5, r3
   2ecd0:	687b      	ldr	r3, [r7, #4]
   2ecd2:	781b      	ldrb	r3, [r3, #0]
   2ecd4:	001e      	movs	r6, r3
   2ecd6:	687b      	ldr	r3, [r7, #4]
   2ecd8:	785b      	ldrb	r3, [r3, #1]
   2ecda:	4698      	mov	r8, r3
   2ecdc:	687b      	ldr	r3, [r7, #4]
   2ecde:	889b      	ldrh	r3, [r3, #4]
   2ece0:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2ece2:	687b      	ldr	r3, [r7, #4]
   2ece4:	689a      	ldr	r2, [r3, #8]
   2ece6:	687b      	ldr	r3, [r7, #4]
   2ece8:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2ecea:	9306      	str	r3, [sp, #24]
   2ecec:	9205      	str	r2, [sp, #20]
   2ecee:	2318      	movs	r3, #24
   2ecf0:	18fa      	adds	r2, r7, r3
   2ecf2:	2308      	movs	r3, #8
   2ecf4:	446b      	add	r3, sp
   2ecf6:	ca13      	ldmia	r2!, {r0, r1, r4}
   2ecf8:	c313      	stmia	r3!, {r0, r1, r4}
   2ecfa:	464b      	mov	r3, r9
   2ecfc:	9301      	str	r3, [sp, #4]
   2ecfe:	4643      	mov	r3, r8
   2ed00:	9300      	str	r3, [sp, #0]
   2ed02:	0033      	movs	r3, r6
   2ed04:	2200      	movs	r2, #0
   2ed06:	0029      	movs	r1, r5
   2ed08:	4660      	mov	r0, ip
   2ed0a:	4c3a      	ldr	r4, [pc, #232]	; (2edf4 <MQTTPublish+0x1b0>)
   2ed0c:	47a0      	blx	r4
   2ed0e:	0003      	movs	r3, r0
   2ed10:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2ed12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ed14:	2b00      	cmp	r3, #0
   2ed16:	dd5b      	ble.n	2edd0 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2ed18:	2324      	movs	r3, #36	; 0x24
   2ed1a:	18fa      	adds	r2, r7, r3
   2ed1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2ed1e:	68fb      	ldr	r3, [r7, #12]
   2ed20:	0018      	movs	r0, r3
   2ed22:	4b35      	ldr	r3, [pc, #212]	; (2edf8 <MQTTPublish+0x1b4>)
   2ed24:	4798      	blx	r3
   2ed26:	0003      	movs	r3, r0
   2ed28:	637b      	str	r3, [r7, #52]	; 0x34
   2ed2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ed2c:	2b00      	cmp	r3, #0
   2ed2e:	d151      	bne.n	2edd4 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2ed30:	687b      	ldr	r3, [r7, #4]
   2ed32:	781b      	ldrb	r3, [r3, #0]
   2ed34:	2b01      	cmp	r3, #1
   2ed36:	d122      	bne.n	2ed7e <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2ed38:	2324      	movs	r3, #36	; 0x24
   2ed3a:	18fa      	adds	r2, r7, r3
   2ed3c:	68fb      	ldr	r3, [r7, #12]
   2ed3e:	2104      	movs	r1, #4
   2ed40:	0018      	movs	r0, r3
   2ed42:	4b2e      	ldr	r3, [pc, #184]	; (2edfc <MQTTPublish+0x1b8>)
   2ed44:	4798      	blx	r3
   2ed46:	0003      	movs	r3, r0
   2ed48:	2b04      	cmp	r3, #4
   2ed4a:	d114      	bne.n	2ed76 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2ed4c:	68fb      	ldr	r3, [r7, #12]
   2ed4e:	695c      	ldr	r4, [r3, #20]
   2ed50:	68fb      	ldr	r3, [r7, #12]
   2ed52:	68db      	ldr	r3, [r3, #12]
   2ed54:	2216      	movs	r2, #22
   2ed56:	18ba      	adds	r2, r7, r2
   2ed58:	2115      	movs	r1, #21
   2ed5a:	1879      	adds	r1, r7, r1
   2ed5c:	2014      	movs	r0, #20
   2ed5e:	1838      	adds	r0, r7, r0
   2ed60:	9300      	str	r3, [sp, #0]
   2ed62:	0023      	movs	r3, r4
   2ed64:	4c26      	ldr	r4, [pc, #152]	; (2ee00 <MQTTPublish+0x1bc>)
   2ed66:	47a0      	blx	r4
   2ed68:	0003      	movs	r3, r0
   2ed6a:	2b01      	cmp	r3, #1
   2ed6c:	d033      	beq.n	2edd6 <MQTTPublish+0x192>
                rc = FAILURE;
   2ed6e:	2301      	movs	r3, #1
   2ed70:	425b      	negs	r3, r3
   2ed72:	637b      	str	r3, [r7, #52]	; 0x34
   2ed74:	e02f      	b.n	2edd6 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2ed76:	2301      	movs	r3, #1
   2ed78:	425b      	negs	r3, r3
   2ed7a:	637b      	str	r3, [r7, #52]	; 0x34
   2ed7c:	e02b      	b.n	2edd6 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2ed7e:	687b      	ldr	r3, [r7, #4]
   2ed80:	781b      	ldrb	r3, [r3, #0]
   2ed82:	2b02      	cmp	r3, #2
   2ed84:	d127      	bne.n	2edd6 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2ed86:	2324      	movs	r3, #36	; 0x24
   2ed88:	18fa      	adds	r2, r7, r3
   2ed8a:	68fb      	ldr	r3, [r7, #12]
   2ed8c:	2107      	movs	r1, #7
   2ed8e:	0018      	movs	r0, r3
   2ed90:	4b1a      	ldr	r3, [pc, #104]	; (2edfc <MQTTPublish+0x1b8>)
   2ed92:	4798      	blx	r3
   2ed94:	0003      	movs	r3, r0
   2ed96:	2b07      	cmp	r3, #7
   2ed98:	d114      	bne.n	2edc4 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2ed9a:	68fb      	ldr	r3, [r7, #12]
   2ed9c:	695c      	ldr	r4, [r3, #20]
   2ed9e:	68fb      	ldr	r3, [r7, #12]
   2eda0:	68db      	ldr	r3, [r3, #12]
   2eda2:	2212      	movs	r2, #18
   2eda4:	18ba      	adds	r2, r7, r2
   2eda6:	2111      	movs	r1, #17
   2eda8:	1879      	adds	r1, r7, r1
   2edaa:	2010      	movs	r0, #16
   2edac:	1838      	adds	r0, r7, r0
   2edae:	9300      	str	r3, [sp, #0]
   2edb0:	0023      	movs	r3, r4
   2edb2:	4c13      	ldr	r4, [pc, #76]	; (2ee00 <MQTTPublish+0x1bc>)
   2edb4:	47a0      	blx	r4
   2edb6:	0003      	movs	r3, r0
   2edb8:	2b01      	cmp	r3, #1
   2edba:	d00c      	beq.n	2edd6 <MQTTPublish+0x192>
                rc = FAILURE;
   2edbc:	2301      	movs	r3, #1
   2edbe:	425b      	negs	r3, r3
   2edc0:	637b      	str	r3, [r7, #52]	; 0x34
   2edc2:	e008      	b.n	2edd6 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2edc4:	2301      	movs	r3, #1
   2edc6:	425b      	negs	r3, r3
   2edc8:	637b      	str	r3, [r7, #52]	; 0x34
   2edca:	e004      	b.n	2edd6 <MQTTPublish+0x192>
		goto exit;
   2edcc:	46c0      	nop			; (mov r8, r8)
   2edce:	e002      	b.n	2edd6 <MQTTPublish+0x192>
        goto exit;
   2edd0:	46c0      	nop			; (mov r8, r8)
   2edd2:	e000      	b.n	2edd6 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2edd4:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2edd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2edd8:	0018      	movs	r0, r3
   2edda:	46bd      	mov	sp, r7
   2eddc:	b00f      	add	sp, #60	; 0x3c
   2edde:	bc0c      	pop	{r2, r3}
   2ede0:	4690      	mov	r8, r2
   2ede2:	4699      	mov	r9, r3
   2ede4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ede6:	46c0      	nop			; (mov r8, r8)
   2ede8:	0002f04d 	.word	0x0002f04d
   2edec:	0002efd5 	.word	0x0002efd5
   2edf0:	0002e195 	.word	0x0002e195
   2edf4:	000302d1 	.word	0x000302d1
   2edf8:	0002e1c5 	.word	0x0002e1c5
   2edfc:	0002e92d 	.word	0x0002e92d
   2ee00:	0002fd49 	.word	0x0002fd49

0002ee04 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2ee04:	b580      	push	{r7, lr}
   2ee06:	b088      	sub	sp, #32
   2ee08:	af00      	add	r7, sp, #0
   2ee0a:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2ee0c:	2301      	movs	r3, #1
   2ee0e:	425b      	negs	r3, r3
   2ee10:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2ee12:	2300      	movs	r3, #0
   2ee14:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2ee16:	230c      	movs	r3, #12
   2ee18:	18fb      	adds	r3, r7, r3
   2ee1a:	0018      	movs	r0, r3
   2ee1c:	4b13      	ldr	r3, [pc, #76]	; (2ee6c <MQTTDisconnect+0x68>)
   2ee1e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2ee20:	687b      	ldr	r3, [r7, #4]
   2ee22:	685a      	ldr	r2, [r3, #4]
   2ee24:	230c      	movs	r3, #12
   2ee26:	18fb      	adds	r3, r7, r3
   2ee28:	0011      	movs	r1, r2
   2ee2a:	0018      	movs	r0, r3
   2ee2c:	4b10      	ldr	r3, [pc, #64]	; (2ee70 <MQTTDisconnect+0x6c>)
   2ee2e:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2ee30:	687b      	ldr	r3, [r7, #4]
   2ee32:	691a      	ldr	r2, [r3, #16]
   2ee34:	687b      	ldr	r3, [r7, #4]
   2ee36:	689b      	ldr	r3, [r3, #8]
   2ee38:	0019      	movs	r1, r3
   2ee3a:	0010      	movs	r0, r2
   2ee3c:	4b0d      	ldr	r3, [pc, #52]	; (2ee74 <MQTTDisconnect+0x70>)
   2ee3e:	4798      	blx	r3
   2ee40:	0003      	movs	r3, r0
   2ee42:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2ee44:	69bb      	ldr	r3, [r7, #24]
   2ee46:	2b00      	cmp	r3, #0
   2ee48:	dd08      	ble.n	2ee5c <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2ee4a:	230c      	movs	r3, #12
   2ee4c:	18fa      	adds	r2, r7, r3
   2ee4e:	69b9      	ldr	r1, [r7, #24]
   2ee50:	687b      	ldr	r3, [r7, #4]
   2ee52:	0018      	movs	r0, r3
   2ee54:	4b08      	ldr	r3, [pc, #32]	; (2ee78 <MQTTDisconnect+0x74>)
   2ee56:	4798      	blx	r3
   2ee58:	0003      	movs	r3, r0
   2ee5a:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2ee5c:	687b      	ldr	r3, [r7, #4]
   2ee5e:	2200      	movs	r2, #0
   2ee60:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ee62:	69fb      	ldr	r3, [r7, #28]
}
   2ee64:	0018      	movs	r0, r3
   2ee66:	46bd      	mov	sp, r7
   2ee68:	b008      	add	sp, #32
   2ee6a:	bd80      	pop	{r7, pc}
   2ee6c:	0002f04d 	.word	0x0002f04d
   2ee70:	0002efd5 	.word	0x0002efd5
   2ee74:	0002fbfd 	.word	0x0002fbfd
   2ee78:	0002e1c5 	.word	0x0002e1c5

0002ee7c <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2ee7c:	b580      	push	{r7, lr}
   2ee7e:	b084      	sub	sp, #16
   2ee80:	af00      	add	r7, sp, #0
   2ee82:	0002      	movs	r2, r0
   2ee84:	1dfb      	adds	r3, r7, #7
   2ee86:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2ee88:	2300      	movs	r3, #0
   2ee8a:	60fb      	str	r3, [r7, #12]
   2ee8c:	e01c      	b.n	2eec8 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2ee8e:	4a12      	ldr	r2, [pc, #72]	; (2eed8 <isMQTTSocket+0x5c>)
   2ee90:	68fb      	ldr	r3, [r7, #12]
   2ee92:	2164      	movs	r1, #100	; 0x64
   2ee94:	434b      	muls	r3, r1
   2ee96:	18d3      	adds	r3, r2, r3
   2ee98:	3360      	adds	r3, #96	; 0x60
   2ee9a:	681b      	ldr	r3, [r3, #0]
   2ee9c:	2b00      	cmp	r3, #0
   2ee9e:	d010      	beq.n	2eec2 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2eea0:	4a0d      	ldr	r2, [pc, #52]	; (2eed8 <isMQTTSocket+0x5c>)
   2eea2:	68fb      	ldr	r3, [r7, #12]
   2eea4:	2164      	movs	r1, #100	; 0x64
   2eea6:	434b      	muls	r3, r1
   2eea8:	18d3      	adds	r3, r2, r3
   2eeaa:	3360      	adds	r3, #96	; 0x60
   2eeac:	681b      	ldr	r3, [r3, #0]
   2eeae:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2eeb0:	68bb      	ldr	r3, [r7, #8]
   2eeb2:	6a1a      	ldr	r2, [r3, #32]
   2eeb4:	1dfb      	adds	r3, r7, #7
   2eeb6:	781b      	ldrb	r3, [r3, #0]
   2eeb8:	b25b      	sxtb	r3, r3
   2eeba:	429a      	cmp	r2, r3
   2eebc:	d101      	bne.n	2eec2 <isMQTTSocket+0x46>
				return true;
   2eebe:	2301      	movs	r3, #1
   2eec0:	e006      	b.n	2eed0 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2eec2:	68fb      	ldr	r3, [r7, #12]
   2eec4:	3301      	adds	r3, #1
   2eec6:	60fb      	str	r3, [r7, #12]
   2eec8:	68fb      	ldr	r3, [r7, #12]
   2eeca:	2b06      	cmp	r3, #6
   2eecc:	d9df      	bls.n	2ee8e <isMQTTSocket+0x12>
		}
	}
	return false;
   2eece:	2300      	movs	r3, #0
}
   2eed0:	0018      	movs	r0, r3
   2eed2:	46bd      	mov	sp, r7
   2eed4:	b004      	add	sp, #16
   2eed6:	bd80      	pop	{r7, pc}
   2eed8:	200042d8 	.word	0x200042d8

0002eedc <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2eedc:	b580      	push	{r7, lr}
   2eede:	b082      	sub	sp, #8
   2eee0:	af00      	add	r7, sp, #0
   2eee2:	6078      	str	r0, [r7, #4]
   2eee4:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2eee6:	4b0d      	ldr	r3, [pc, #52]	; (2ef1c <dnsResolveCallback+0x40>)
   2eee8:	781b      	ldrb	r3, [r3, #0]
   2eeea:	2201      	movs	r2, #1
   2eeec:	4053      	eors	r3, r2
   2eeee:	b2db      	uxtb	r3, r3
   2eef0:	2b00      	cmp	r3, #0
   2eef2:	d00e      	beq.n	2ef12 <dnsResolveCallback+0x36>
   2eef4:	4b0a      	ldr	r3, [pc, #40]	; (2ef20 <dnsResolveCallback+0x44>)
   2eef6:	681b      	ldr	r3, [r3, #0]
   2eef8:	687a      	ldr	r2, [r7, #4]
   2eefa:	0011      	movs	r1, r2
   2eefc:	0018      	movs	r0, r3
   2eefe:	4b09      	ldr	r3, [pc, #36]	; (2ef24 <dnsResolveCallback+0x48>)
   2ef00:	4798      	blx	r3
   2ef02:	1e03      	subs	r3, r0, #0
   2ef04:	d105      	bne.n	2ef12 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2ef06:	683a      	ldr	r2, [r7, #0]
   2ef08:	4b07      	ldr	r3, [pc, #28]	; (2ef28 <dnsResolveCallback+0x4c>)
   2ef0a:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2ef0c:	4b03      	ldr	r3, [pc, #12]	; (2ef1c <dnsResolveCallback+0x40>)
   2ef0e:	2201      	movs	r2, #1
   2ef10:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2ef12:	46c0      	nop			; (mov r8, r8)
   2ef14:	46bd      	mov	sp, r7
   2ef16:	b002      	add	sp, #8
   2ef18:	bd80      	pop	{r7, pc}
   2ef1a:	46c0      	nop			; (mov r8, r8)
   2ef1c:	200041c8 	.word	0x200041c8
   2ef20:	200042d4 	.word	0x200042d4
   2ef24:	00034a37 	.word	0x00034a37
   2ef28:	200041c0 	.word	0x200041c0

0002ef2c <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2ef2c:	b580      	push	{r7, lr}
   2ef2e:	b084      	sub	sp, #16
   2ef30:	af00      	add	r7, sp, #0
   2ef32:	603a      	str	r2, [r7, #0]
   2ef34:	1dfb      	adds	r3, r7, #7
   2ef36:	1c02      	adds	r2, r0, #0
   2ef38:	701a      	strb	r2, [r3, #0]
   2ef3a:	1dbb      	adds	r3, r7, #6
   2ef3c:	1c0a      	adds	r2, r1, #0
   2ef3e:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2ef40:	1dfb      	adds	r3, r7, #7
   2ef42:	781b      	ldrb	r3, [r3, #0]
   2ef44:	b25b      	sxtb	r3, r3
   2ef46:	0018      	movs	r0, r3
   2ef48:	4b12      	ldr	r3, [pc, #72]	; (2ef94 <tcpClientSocketEventHandler+0x68>)
   2ef4a:	4798      	blx	r3
   2ef4c:	1e03      	subs	r3, r0, #0
   2ef4e:	d01c      	beq.n	2ef8a <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2ef50:	1dbb      	adds	r3, r7, #6
   2ef52:	781b      	ldrb	r3, [r3, #0]
   2ef54:	2b06      	cmp	r3, #6
   2ef56:	d00c      	beq.n	2ef72 <tcpClientSocketEventHandler+0x46>
   2ef58:	2b07      	cmp	r3, #7
   2ef5a:	d006      	beq.n	2ef6a <tcpClientSocketEventHandler+0x3e>
   2ef5c:	2b05      	cmp	r3, #5
   2ef5e:	d000      	beq.n	2ef62 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2ef60:	e013      	b.n	2ef8a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2ef62:	4b0d      	ldr	r3, [pc, #52]	; (2ef98 <tcpClientSocketEventHandler+0x6c>)
   2ef64:	2201      	movs	r2, #1
   2ef66:	701a      	strb	r2, [r3, #0]
			break;
   2ef68:	e00f      	b.n	2ef8a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2ef6a:	4b0c      	ldr	r3, [pc, #48]	; (2ef9c <tcpClientSocketEventHandler+0x70>)
   2ef6c:	2201      	movs	r2, #1
   2ef6e:	701a      	strb	r2, [r3, #0]
			break;
   2ef70:	e00b      	b.n	2ef8a <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2ef72:	683b      	ldr	r3, [r7, #0]
   2ef74:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2ef76:	68fb      	ldr	r3, [r7, #12]
   2ef78:	2204      	movs	r2, #4
   2ef7a:	5e9b      	ldrsh	r3, [r3, r2]
   2ef7c:	001a      	movs	r2, r3
   2ef7e:	4b08      	ldr	r3, [pc, #32]	; (2efa0 <tcpClientSocketEventHandler+0x74>)
   2ef80:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2ef82:	4b08      	ldr	r3, [pc, #32]	; (2efa4 <tcpClientSocketEventHandler+0x78>)
   2ef84:	2201      	movs	r2, #1
   2ef86:	701a      	strb	r2, [r3, #0]
			break;
   2ef88:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2ef8a:	46c0      	nop			; (mov r8, r8)
   2ef8c:	46bd      	mov	sp, r7
   2ef8e:	b004      	add	sp, #16
   2ef90:	bd80      	pop	{r7, pc}
   2ef92:	46c0      	nop			; (mov r8, r8)
   2ef94:	0002ee7d 	.word	0x0002ee7d
   2ef98:	200041c9 	.word	0x200041c9
   2ef9c:	200041ca 	.word	0x200041ca
   2efa0:	200041c4 	.word	0x200041c4
   2efa4:	200041cb 	.word	0x200041cb

0002efa8 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2efa8:	b580      	push	{r7, lr}
   2efaa:	b082      	sub	sp, #8
   2efac:	af00      	add	r7, sp, #0
   2efae:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2efb0:	687b      	ldr	r3, [r7, #4]
   2efb2:	3304      	adds	r3, #4
   2efb4:	687a      	ldr	r2, [r7, #4]
   2efb6:	0011      	movs	r1, r2
   2efb8:	0018      	movs	r0, r3
   2efba:	4b05      	ldr	r3, [pc, #20]	; (2efd0 <TimerIsExpired+0x28>)
   2efbc:	4798      	blx	r3
   2efbe:	0003      	movs	r3, r0
   2efc0:	3b01      	subs	r3, #1
   2efc2:	425a      	negs	r2, r3
   2efc4:	4153      	adcs	r3, r2
   2efc6:	b2db      	uxtb	r3, r3
}
   2efc8:	0018      	movs	r0, r3
   2efca:	46bd      	mov	sp, r7
   2efcc:	b002      	add	sp, #8
   2efce:	bd80      	pop	{r7, pc}
   2efd0:	0001c841 	.word	0x0001c841

0002efd4 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2efd4:	b580      	push	{r7, lr}
   2efd6:	b082      	sub	sp, #8
   2efd8:	af00      	add	r7, sp, #0
   2efda:	6078      	str	r0, [r7, #4]
   2efdc:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2efde:	687b      	ldr	r3, [r7, #4]
   2efe0:	683a      	ldr	r2, [r7, #0]
   2efe2:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2efe4:	687b      	ldr	r3, [r7, #4]
   2efe6:	3304      	adds	r3, #4
   2efe8:	0018      	movs	r0, r3
   2efea:	4b03      	ldr	r3, [pc, #12]	; (2eff8 <TimerCountdownMS+0x24>)
   2efec:	4798      	blx	r3
}
   2efee:	46c0      	nop			; (mov r8, r8)
   2eff0:	46bd      	mov	sp, r7
   2eff2:	b002      	add	sp, #8
   2eff4:	bd80      	pop	{r7, pc}
   2eff6:	46c0      	nop			; (mov r8, r8)
   2eff8:	0001c7d5 	.word	0x0001c7d5

0002effc <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2effc:	b580      	push	{r7, lr}
   2effe:	b082      	sub	sp, #8
   2f000:	af00      	add	r7, sp, #0
   2f002:	6078      	str	r0, [r7, #4]
   2f004:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2f006:	683b      	ldr	r3, [r7, #0]
   2f008:	22fa      	movs	r2, #250	; 0xfa
   2f00a:	0092      	lsls	r2, r2, #2
   2f00c:	435a      	muls	r2, r3
   2f00e:	687b      	ldr	r3, [r7, #4]
   2f010:	0011      	movs	r1, r2
   2f012:	0018      	movs	r0, r3
   2f014:	4b02      	ldr	r3, [pc, #8]	; (2f020 <TimerCountdown+0x24>)
   2f016:	4798      	blx	r3
}
   2f018:	46c0      	nop			; (mov r8, r8)
   2f01a:	46bd      	mov	sp, r7
   2f01c:	b002      	add	sp, #8
   2f01e:	bd80      	pop	{r7, pc}
   2f020:	0002efd5 	.word	0x0002efd5

0002f024 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2f024:	b580      	push	{r7, lr}
   2f026:	b082      	sub	sp, #8
   2f028:	af00      	add	r7, sp, #0
   2f02a:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2f02c:	687b      	ldr	r3, [r7, #4]
   2f02e:	3304      	adds	r3, #4
   2f030:	687a      	ldr	r2, [r7, #4]
   2f032:	0011      	movs	r1, r2
   2f034:	0018      	movs	r0, r3
   2f036:	4b04      	ldr	r3, [pc, #16]	; (2f048 <TimerLeftMS+0x24>)
   2f038:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2f03a:	687b      	ldr	r3, [r7, #4]
   2f03c:	681b      	ldr	r3, [r3, #0]
}
   2f03e:	0018      	movs	r0, r3
   2f040:	46bd      	mov	sp, r7
   2f042:	b002      	add	sp, #8
   2f044:	bd80      	pop	{r7, pc}
   2f046:	46c0      	nop			; (mov r8, r8)
   2f048:	0001c841 	.word	0x0001c841

0002f04c <TimerInit>:


void TimerInit(Timer* timer) {
   2f04c:	b580      	push	{r7, lr}
   2f04e:	b082      	sub	sp, #8
   2f050:	af00      	add	r7, sp, #0
   2f052:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2f054:	687b      	ldr	r3, [r7, #4]
   2f056:	2200      	movs	r2, #0
   2f058:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2f05a:	687b      	ldr	r3, [r7, #4]
   2f05c:	3304      	adds	r3, #4
   2f05e:	2208      	movs	r2, #8
   2f060:	2100      	movs	r1, #0
   2f062:	0018      	movs	r0, r3
   2f064:	4b02      	ldr	r3, [pc, #8]	; (2f070 <TimerInit+0x24>)
   2f066:	4798      	blx	r3
}
   2f068:	46c0      	nop			; (mov r8, r8)
   2f06a:	46bd      	mov	sp, r7
   2f06c:	b002      	add	sp, #8
   2f06e:	bd80      	pop	{r7, pc}
   2f070:	000346df 	.word	0x000346df

0002f074 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2f074:	b590      	push	{r4, r7, lr}
   2f076:	b085      	sub	sp, #20
   2f078:	af00      	add	r7, sp, #0
   2f07a:	60f8      	str	r0, [r7, #12]
   2f07c:	60b9      	str	r1, [r7, #8]
   2f07e:	607a      	str	r2, [r7, #4]
   2f080:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2f082:	683b      	ldr	r3, [r7, #0]
   2f084:	2b00      	cmp	r3, #0
   2f086:	d101      	bne.n	2f08c <WINC1500_read+0x18>
   2f088:	230a      	movs	r3, #10
   2f08a:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2f08c:	4b2c      	ldr	r3, [pc, #176]	; (2f140 <WINC1500_read+0xcc>)
   2f08e:	681b      	ldr	r3, [r3, #0]
   2f090:	2b00      	cmp	r3, #0
   2f092:	d131      	bne.n	2f0f8 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2f094:	4b2b      	ldr	r3, [pc, #172]	; (2f144 <WINC1500_read+0xd0>)
   2f096:	2200      	movs	r2, #0
   2f098:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2f09a:	68fb      	ldr	r3, [r7, #12]
   2f09c:	681b      	ldr	r3, [r3, #0]
   2f09e:	b258      	sxtb	r0, r3
   2f0a0:	683c      	ldr	r4, [r7, #0]
   2f0a2:	2380      	movs	r3, #128	; 0x80
   2f0a4:	005a      	lsls	r2, r3, #1
   2f0a6:	4928      	ldr	r1, [pc, #160]	; (2f148 <WINC1500_read+0xd4>)
   2f0a8:	0023      	movs	r3, r4
   2f0aa:	4c28      	ldr	r4, [pc, #160]	; (2f14c <WINC1500_read+0xd8>)
   2f0ac:	47a0      	blx	r4
   2f0ae:	1e03      	subs	r3, r0, #0
   2f0b0:	d005      	beq.n	2f0be <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2f0b2:	2301      	movs	r3, #1
   2f0b4:	425b      	negs	r3, r3
   2f0b6:	e03e      	b.n	2f136 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2f0b8:	2000      	movs	r0, #0
   2f0ba:	4b25      	ldr	r3, [pc, #148]	; (2f150 <WINC1500_read+0xdc>)
   2f0bc:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2f0be:	4b21      	ldr	r3, [pc, #132]	; (2f144 <WINC1500_read+0xd0>)
   2f0c0:	781b      	ldrb	r3, [r3, #0]
   2f0c2:	2201      	movs	r2, #1
   2f0c4:	4053      	eors	r3, r2
   2f0c6:	b2db      	uxtb	r3, r3
   2f0c8:	2b00      	cmp	r3, #0
   2f0ca:	d1f5      	bne.n	2f0b8 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2f0cc:	4b21      	ldr	r3, [pc, #132]	; (2f154 <WINC1500_read+0xe0>)
   2f0ce:	681b      	ldr	r3, [r3, #0]
   2f0d0:	2b00      	cmp	r3, #0
   2f0d2:	dd08      	ble.n	2f0e6 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2f0d4:	4b1f      	ldr	r3, [pc, #124]	; (2f154 <WINC1500_read+0xe0>)
   2f0d6:	681b      	ldr	r3, [r3, #0]
   2f0d8:	001a      	movs	r2, r3
   2f0da:	4b19      	ldr	r3, [pc, #100]	; (2f140 <WINC1500_read+0xcc>)
   2f0dc:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2f0de:	4b1e      	ldr	r3, [pc, #120]	; (2f158 <WINC1500_read+0xe4>)
   2f0e0:	2200      	movs	r2, #0
   2f0e2:	601a      	str	r2, [r3, #0]
   2f0e4:	e008      	b.n	2f0f8 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2f0e6:	4b16      	ldr	r3, [pc, #88]	; (2f140 <WINC1500_read+0xcc>)
   2f0e8:	2200      	movs	r2, #0
   2f0ea:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2f0ec:	4b1a      	ldr	r3, [pc, #104]	; (2f158 <WINC1500_read+0xe4>)
   2f0ee:	2200      	movs	r2, #0
   2f0f0:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2f0f2:	4b18      	ldr	r3, [pc, #96]	; (2f154 <WINC1500_read+0xe0>)
   2f0f4:	681b      	ldr	r3, [r3, #0]
   2f0f6:	e01e      	b.n	2f136 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2f0f8:	4b11      	ldr	r3, [pc, #68]	; (2f140 <WINC1500_read+0xcc>)
   2f0fa:	681b      	ldr	r3, [r3, #0]
   2f0fc:	001a      	movs	r2, r3
   2f0fe:	687b      	ldr	r3, [r7, #4]
   2f100:	4293      	cmp	r3, r2
   2f102:	dd02      	ble.n	2f10a <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2f104:	2301      	movs	r3, #1
   2f106:	425b      	negs	r3, r3
   2f108:	e015      	b.n	2f136 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2f10a:	4b13      	ldr	r3, [pc, #76]	; (2f158 <WINC1500_read+0xe4>)
   2f10c:	681a      	ldr	r2, [r3, #0]
   2f10e:	4b0e      	ldr	r3, [pc, #56]	; (2f148 <WINC1500_read+0xd4>)
   2f110:	18d1      	adds	r1, r2, r3
   2f112:	687a      	ldr	r2, [r7, #4]
   2f114:	68bb      	ldr	r3, [r7, #8]
   2f116:	0018      	movs	r0, r3
   2f118:	4b10      	ldr	r3, [pc, #64]	; (2f15c <WINC1500_read+0xe8>)
   2f11a:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2f11c:	4b08      	ldr	r3, [pc, #32]	; (2f140 <WINC1500_read+0xcc>)
   2f11e:	681a      	ldr	r2, [r3, #0]
   2f120:	687b      	ldr	r3, [r7, #4]
   2f122:	1ad2      	subs	r2, r2, r3
   2f124:	4b06      	ldr	r3, [pc, #24]	; (2f140 <WINC1500_read+0xcc>)
   2f126:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2f128:	4b0b      	ldr	r3, [pc, #44]	; (2f158 <WINC1500_read+0xe4>)
   2f12a:	681a      	ldr	r2, [r3, #0]
   2f12c:	687b      	ldr	r3, [r7, #4]
   2f12e:	18d2      	adds	r2, r2, r3
   2f130:	4b09      	ldr	r3, [pc, #36]	; (2f158 <WINC1500_read+0xe4>)
   2f132:	601a      	str	r2, [r3, #0]
  
  return len;
   2f134:	687b      	ldr	r3, [r7, #4]
}
   2f136:	0018      	movs	r0, r3
   2f138:	46bd      	mov	sp, r7
   2f13a:	b005      	add	sp, #20
   2f13c:	bd90      	pop	{r4, r7, pc}
   2f13e:	46c0      	nop			; (mov r8, r8)
   2f140:	200042d0 	.word	0x200042d0
   2f144:	200041cb 	.word	0x200041cb
   2f148:	200041cc 	.word	0x200041cc
   2f14c:	00025729 	.word	0x00025729
   2f150:	00021c71 	.word	0x00021c71
   2f154:	200041c4 	.word	0x200041c4
   2f158:	200042cc 	.word	0x200042cc
   2f15c:	000346a9 	.word	0x000346a9

0002f160 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2f160:	b590      	push	{r4, r7, lr}
   2f162:	b085      	sub	sp, #20
   2f164:	af00      	add	r7, sp, #0
   2f166:	60f8      	str	r0, [r7, #12]
   2f168:	60b9      	str	r1, [r7, #8]
   2f16a:	607a      	str	r2, [r7, #4]
   2f16c:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2f16e:	4b10      	ldr	r3, [pc, #64]	; (2f1b0 <WINC1500_write+0x50>)
   2f170:	2200      	movs	r2, #0
   2f172:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2f174:	68fb      	ldr	r3, [r7, #12]
   2f176:	681b      	ldr	r3, [r3, #0]
   2f178:	b258      	sxtb	r0, r3
   2f17a:	687b      	ldr	r3, [r7, #4]
   2f17c:	b29a      	uxth	r2, r3
   2f17e:	68b9      	ldr	r1, [r7, #8]
   2f180:	2300      	movs	r3, #0
   2f182:	4c0c      	ldr	r4, [pc, #48]	; (2f1b4 <WINC1500_write+0x54>)
   2f184:	47a0      	blx	r4
   2f186:	1e03      	subs	r3, r0, #0
   2f188:	d005      	beq.n	2f196 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2f18a:	2301      	movs	r3, #1
   2f18c:	425b      	negs	r3, r3
   2f18e:	e00a      	b.n	2f1a6 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2f190:	2000      	movs	r0, #0
   2f192:	4b09      	ldr	r3, [pc, #36]	; (2f1b8 <WINC1500_write+0x58>)
   2f194:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2f196:	4b06      	ldr	r3, [pc, #24]	; (2f1b0 <WINC1500_write+0x50>)
   2f198:	781b      	ldrb	r3, [r3, #0]
   2f19a:	2201      	movs	r2, #1
   2f19c:	4053      	eors	r3, r2
   2f19e:	b2db      	uxtb	r3, r3
   2f1a0:	2b00      	cmp	r3, #0
   2f1a2:	d1f5      	bne.n	2f190 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2f1a4:	687b      	ldr	r3, [r7, #4]
}
   2f1a6:	0018      	movs	r0, r3
   2f1a8:	46bd      	mov	sp, r7
   2f1aa:	b005      	add	sp, #20
   2f1ac:	bd90      	pop	{r4, r7, pc}
   2f1ae:	46c0      	nop			; (mov r8, r8)
   2f1b0:	200041ca 	.word	0x200041ca
   2f1b4:	000255c5 	.word	0x000255c5
   2f1b8:	00021c71 	.word	0x00021c71

0002f1bc <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2f1bc:	b580      	push	{r7, lr}
   2f1be:	b082      	sub	sp, #8
   2f1c0:	af00      	add	r7, sp, #0
   2f1c2:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2f1c4:	687b      	ldr	r3, [r7, #4]
   2f1c6:	681b      	ldr	r3, [r3, #0]
   2f1c8:	b25b      	sxtb	r3, r3
   2f1ca:	0018      	movs	r0, r3
   2f1cc:	4b06      	ldr	r3, [pc, #24]	; (2f1e8 <WINC1500_disconnect+0x2c>)
   2f1ce:	4798      	blx	r3
	n->socket=-1;
   2f1d0:	687b      	ldr	r3, [r7, #4]
   2f1d2:	2201      	movs	r2, #1
   2f1d4:	4252      	negs	r2, r2
   2f1d6:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2f1d8:	4b04      	ldr	r3, [pc, #16]	; (2f1ec <WINC1500_disconnect+0x30>)
   2f1da:	2200      	movs	r2, #0
   2f1dc:	701a      	strb	r2, [r3, #0]
}
   2f1de:	46c0      	nop			; (mov r8, r8)
   2f1e0:	46bd      	mov	sp, r7
   2f1e2:	b002      	add	sp, #8
   2f1e4:	bd80      	pop	{r7, pc}
   2f1e6:	46c0      	nop			; (mov r8, r8)
   2f1e8:	000258a9 	.word	0x000258a9
   2f1ec:	200041c9 	.word	0x200041c9

0002f1f0 <NetworkInit>:


void NetworkInit(Network* n) {
   2f1f0:	b580      	push	{r7, lr}
   2f1f2:	b082      	sub	sp, #8
   2f1f4:	af00      	add	r7, sp, #0
   2f1f6:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2f1f8:	687b      	ldr	r3, [r7, #4]
   2f1fa:	2201      	movs	r2, #1
   2f1fc:	4252      	negs	r2, r2
   2f1fe:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2f200:	687b      	ldr	r3, [r7, #4]
   2f202:	4a06      	ldr	r2, [pc, #24]	; (2f21c <NetworkInit+0x2c>)
   2f204:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2f206:	687b      	ldr	r3, [r7, #4]
   2f208:	4a05      	ldr	r2, [pc, #20]	; (2f220 <NetworkInit+0x30>)
   2f20a:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2f20c:	687b      	ldr	r3, [r7, #4]
   2f20e:	4a05      	ldr	r2, [pc, #20]	; (2f224 <NetworkInit+0x34>)
   2f210:	611a      	str	r2, [r3, #16]
}
   2f212:	46c0      	nop			; (mov r8, r8)
   2f214:	46bd      	mov	sp, r7
   2f216:	b002      	add	sp, #8
   2f218:	bd80      	pop	{r7, pc}
   2f21a:	46c0      	nop			; (mov r8, r8)
   2f21c:	0002f075 	.word	0x0002f075
   2f220:	0002f161 	.word	0x0002f161
   2f224:	0002f1bd 	.word	0x0002f1bd

0002f228 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2f228:	b580      	push	{r7, lr}
   2f22a:	b088      	sub	sp, #32
   2f22c:	af00      	add	r7, sp, #0
   2f22e:	60f8      	str	r0, [r7, #12]
   2f230:	60b9      	str	r1, [r7, #8]
   2f232:	607a      	str	r2, [r7, #4]
   2f234:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2f236:	4b37      	ldr	r3, [pc, #220]	; (2f314 <ConnectNetwork+0xec>)
   2f238:	2200      	movs	r2, #0
   2f23a:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2f23c:	4b36      	ldr	r3, [pc, #216]	; (2f318 <ConnectNetwork+0xf0>)
   2f23e:	68ba      	ldr	r2, [r7, #8]
   2f240:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2f242:	68bb      	ldr	r3, [r7, #8]
   2f244:	0018      	movs	r0, r3
   2f246:	4b35      	ldr	r3, [pc, #212]	; (2f31c <ConnectNetwork+0xf4>)
   2f248:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2f24a:	e002      	b.n	2f252 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2f24c:	2000      	movs	r0, #0
   2f24e:	4b34      	ldr	r3, [pc, #208]	; (2f320 <ConnectNetwork+0xf8>)
   2f250:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2f252:	4b30      	ldr	r3, [pc, #192]	; (2f314 <ConnectNetwork+0xec>)
   2f254:	781b      	ldrb	r3, [r3, #0]
   2f256:	2201      	movs	r2, #1
   2f258:	4053      	eors	r3, r2
   2f25a:	b2db      	uxtb	r3, r3
   2f25c:	2b00      	cmp	r3, #0
   2f25e:	d1f5      	bne.n	2f24c <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2f260:	4b30      	ldr	r3, [pc, #192]	; (2f324 <ConnectNetwork+0xfc>)
   2f262:	681a      	ldr	r2, [r3, #0]
   2f264:	68fb      	ldr	r3, [r7, #12]
   2f266:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2f268:	2310      	movs	r3, #16
   2f26a:	18fb      	adds	r3, r7, r3
   2f26c:	2202      	movs	r2, #2
   2f26e:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2f270:	687b      	ldr	r3, [r7, #4]
   2f272:	b29b      	uxth	r3, r3
   2f274:	021b      	lsls	r3, r3, #8
   2f276:	b21a      	sxth	r2, r3
   2f278:	687b      	ldr	r3, [r7, #4]
   2f27a:	b29b      	uxth	r3, r3
   2f27c:	0a1b      	lsrs	r3, r3, #8
   2f27e:	b29b      	uxth	r3, r3
   2f280:	b21b      	sxth	r3, r3
   2f282:	4313      	orrs	r3, r2
   2f284:	b21b      	sxth	r3, r3
   2f286:	b29a      	uxth	r2, r3
   2f288:	2310      	movs	r3, #16
   2f28a:	18fb      	adds	r3, r7, r3
   2f28c:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2f28e:	4b25      	ldr	r3, [pc, #148]	; (2f324 <ConnectNetwork+0xfc>)
   2f290:	681b      	ldr	r3, [r3, #0]
   2f292:	001a      	movs	r2, r3
   2f294:	2310      	movs	r3, #16
   2f296:	18fb      	adds	r3, r7, r3
   2f298:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2f29a:	68fb      	ldr	r3, [r7, #12]
   2f29c:	681b      	ldr	r3, [r3, #0]
   2f29e:	2b00      	cmp	r3, #0
   2f2a0:	da0a      	bge.n	2f2b8 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2f2a2:	683b      	ldr	r3, [r7, #0]
   2f2a4:	b2db      	uxtb	r3, r3
   2f2a6:	001a      	movs	r2, r3
   2f2a8:	2101      	movs	r1, #1
   2f2aa:	2002      	movs	r0, #2
   2f2ac:	4b1e      	ldr	r3, [pc, #120]	; (2f328 <ConnectNetwork+0x100>)
   2f2ae:	4798      	blx	r3
   2f2b0:	0003      	movs	r3, r0
   2f2b2:	001a      	movs	r2, r3
   2f2b4:	68fb      	ldr	r3, [r7, #12]
   2f2b6:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2f2b8:	68fb      	ldr	r3, [r7, #12]
   2f2ba:	681b      	ldr	r3, [r3, #0]
   2f2bc:	3301      	adds	r3, #1
   2f2be:	d108      	bne.n	2f2d2 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2f2c0:	68fb      	ldr	r3, [r7, #12]
   2f2c2:	681b      	ldr	r3, [r3, #0]
   2f2c4:	b25b      	sxtb	r3, r3
   2f2c6:	0018      	movs	r0, r3
   2f2c8:	4b18      	ldr	r3, [pc, #96]	; (2f32c <ConnectNetwork+0x104>)
   2f2ca:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2f2cc:	2309      	movs	r3, #9
   2f2ce:	425b      	negs	r3, r3
   2f2d0:	e01c      	b.n	2f30c <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2f2d2:	68fb      	ldr	r3, [r7, #12]
   2f2d4:	681b      	ldr	r3, [r3, #0]
   2f2d6:	b25b      	sxtb	r3, r3
   2f2d8:	2210      	movs	r2, #16
   2f2da:	18b9      	adds	r1, r7, r2
   2f2dc:	2210      	movs	r2, #16
   2f2de:	0018      	movs	r0, r3
   2f2e0:	4b13      	ldr	r3, [pc, #76]	; (2f330 <ConnectNetwork+0x108>)
   2f2e2:	4798      	blx	r3
   2f2e4:	1e03      	subs	r3, r0, #0
   2f2e6:	d002      	beq.n	2f2ee <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2f2e8:	2309      	movs	r3, #9
   2f2ea:	425b      	negs	r3, r3
   2f2ec:	e00e      	b.n	2f30c <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2f2ee:	4b11      	ldr	r3, [pc, #68]	; (2f334 <ConnectNetwork+0x10c>)
   2f2f0:	2200      	movs	r2, #0
   2f2f2:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2f2f4:	e002      	b.n	2f2fc <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2f2f6:	2000      	movs	r0, #0
   2f2f8:	4b09      	ldr	r3, [pc, #36]	; (2f320 <ConnectNetwork+0xf8>)
   2f2fa:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2f2fc:	4b0d      	ldr	r3, [pc, #52]	; (2f334 <ConnectNetwork+0x10c>)
   2f2fe:	781b      	ldrb	r3, [r3, #0]
   2f300:	2201      	movs	r2, #1
   2f302:	4053      	eors	r3, r2
   2f304:	b2db      	uxtb	r3, r3
   2f306:	2b00      	cmp	r3, #0
   2f308:	d1f5      	bne.n	2f2f6 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2f30a:	2300      	movs	r3, #0
   2f30c:	0018      	movs	r0, r3
   2f30e:	46bd      	mov	sp, r7
   2f310:	b008      	add	sp, #32
   2f312:	bd80      	pop	{r7, pc}
   2f314:	200041c8 	.word	0x200041c8
   2f318:	200042d4 	.word	0x200042d4
   2f31c:	00025af1 	.word	0x00025af1
   2f320:	00021c71 	.word	0x00021c71
   2f324:	200041c0 	.word	0x200041c0
   2f328:	0002529d 	.word	0x0002529d
   2f32c:	000258a9 	.word	0x000258a9
   2f330:	000254b1 	.word	0x000254b1
   2f334:	200041c9 	.word	0x200041c9

0002f338 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2f338:	b580      	push	{r7, lr}
   2f33a:	b084      	sub	sp, #16
   2f33c:	af00      	add	r7, sp, #0
   2f33e:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2f340:	687b      	ldr	r3, [r7, #4]
   2f342:	2b00      	cmp	r3, #0
   2f344:	d022      	beq.n	2f38c <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f346:	2300      	movs	r3, #0
   2f348:	60fb      	str	r3, [r7, #12]
   2f34a:	e01b      	b.n	2f384 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2f34c:	4a11      	ldr	r2, [pc, #68]	; (2f394 <allocateClient+0x5c>)
   2f34e:	68fb      	ldr	r3, [r7, #12]
   2f350:	2164      	movs	r1, #100	; 0x64
   2f352:	434b      	muls	r3, r1
   2f354:	18d3      	adds	r3, r2, r3
   2f356:	3360      	adds	r3, #96	; 0x60
   2f358:	681b      	ldr	r3, [r3, #0]
   2f35a:	2b00      	cmp	r3, #0
   2f35c:	d10f      	bne.n	2f37e <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2f35e:	4a0d      	ldr	r2, [pc, #52]	; (2f394 <allocateClient+0x5c>)
   2f360:	68fb      	ldr	r3, [r7, #12]
   2f362:	2164      	movs	r1, #100	; 0x64
   2f364:	434b      	muls	r3, r1
   2f366:	18d3      	adds	r3, r2, r3
   2f368:	3360      	adds	r3, #96	; 0x60
   2f36a:	687a      	ldr	r2, [r7, #4]
   2f36c:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2f36e:	68fb      	ldr	r3, [r7, #12]
   2f370:	2264      	movs	r2, #100	; 0x64
   2f372:	435a      	muls	r2, r3
   2f374:	4b07      	ldr	r3, [pc, #28]	; (2f394 <allocateClient+0x5c>)
   2f376:	18d2      	adds	r2, r2, r3
   2f378:	687b      	ldr	r3, [r7, #4]
   2f37a:	61da      	str	r2, [r3, #28]
			return;
   2f37c:	e007      	b.n	2f38e <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f37e:	68fb      	ldr	r3, [r7, #12]
   2f380:	3301      	adds	r3, #1
   2f382:	60fb      	str	r3, [r7, #12]
   2f384:	68fb      	ldr	r3, [r7, #12]
   2f386:	2b06      	cmp	r3, #6
   2f388:	d9e0      	bls.n	2f34c <allocateClient+0x14>
   2f38a:	e000      	b.n	2f38e <allocateClient+0x56>
		return;
   2f38c:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2f38e:	46bd      	mov	sp, r7
   2f390:	b004      	add	sp, #16
   2f392:	bd80      	pop	{r7, pc}
   2f394:	200042d8 	.word	0x200042d8

0002f398 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2f398:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f39a:	b089      	sub	sp, #36	; 0x24
   2f39c:	af04      	add	r7, sp, #16
   2f39e:	6078      	str	r0, [r7, #4]
   2f3a0:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2f3a2:	687b      	ldr	r3, [r7, #4]
   2f3a4:	2b00      	cmp	r3, #0
   2f3a6:	d00a      	beq.n	2f3be <mqtt_init+0x26>
   2f3a8:	683b      	ldr	r3, [r7, #0]
   2f3aa:	2b00      	cmp	r3, #0
   2f3ac:	d007      	beq.n	2f3be <mqtt_init+0x26>
   2f3ae:	683b      	ldr	r3, [r7, #0]
   2f3b0:	691b      	ldr	r3, [r3, #16]
   2f3b2:	2b00      	cmp	r3, #0
   2f3b4:	d003      	beq.n	2f3be <mqtt_init+0x26>
   2f3b6:	683b      	ldr	r3, [r7, #0]
   2f3b8:	689b      	ldr	r3, [r3, #8]
   2f3ba:	2b00      	cmp	r3, #0
   2f3bc:	d102      	bne.n	2f3c4 <mqtt_init+0x2c>
		return FAILURE;
   2f3be:	2301      	movs	r3, #1
   2f3c0:	425b      	negs	r3, r3
   2f3c2:	e034      	b.n	2f42e <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2f3c4:	683b      	ldr	r3, [r7, #0]
   2f3c6:	889b      	ldrh	r3, [r3, #4]
   2f3c8:	001a      	movs	r2, r3
   2f3ca:	23fa      	movs	r3, #250	; 0xfa
   2f3cc:	009b      	lsls	r3, r3, #2
   2f3ce:	4353      	muls	r3, r2
   2f3d0:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2f3d2:	687b      	ldr	r3, [r7, #4]
   2f3d4:	3320      	adds	r3, #32
   2f3d6:	0018      	movs	r0, r3
   2f3d8:	4b17      	ldr	r3, [pc, #92]	; (2f438 <mqtt_init+0xa0>)
   2f3da:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2f3dc:	687b      	ldr	r3, [r7, #4]
   2f3de:	3304      	adds	r3, #4
   2f3e0:	6839      	ldr	r1, [r7, #0]
   2f3e2:	2218      	movs	r2, #24
   2f3e4:	0018      	movs	r0, r3
   2f3e6:	4b15      	ldr	r3, [pc, #84]	; (2f43c <mqtt_init+0xa4>)
   2f3e8:	4798      	blx	r3
	allocateClient(module);
   2f3ea:	687b      	ldr	r3, [r7, #4]
   2f3ec:	0018      	movs	r0, r3
   2f3ee:	4b14      	ldr	r3, [pc, #80]	; (2f440 <mqtt_init+0xa8>)
   2f3f0:	4798      	blx	r3
	
	if(module->client)
   2f3f2:	687b      	ldr	r3, [r7, #4]
   2f3f4:	69db      	ldr	r3, [r3, #28]
   2f3f6:	2b00      	cmp	r3, #0
   2f3f8:	d017      	beq.n	2f42a <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2f3fa:	687b      	ldr	r3, [r7, #4]
   2f3fc:	69d8      	ldr	r0, [r3, #28]
   2f3fe:	687b      	ldr	r3, [r7, #4]
   2f400:	3320      	adds	r3, #32
   2f402:	001c      	movs	r4, r3
   2f404:	683b      	ldr	r3, [r7, #0]
   2f406:	691e      	ldr	r6, [r3, #16]
   2f408:	683b      	ldr	r3, [r7, #0]
   2f40a:	695a      	ldr	r2, [r3, #20]
   2f40c:	683b      	ldr	r3, [r7, #0]
   2f40e:	6899      	ldr	r1, [r3, #8]
   2f410:	683b      	ldr	r3, [r7, #0]
   2f412:	68db      	ldr	r3, [r3, #12]
   2f414:	68fd      	ldr	r5, [r7, #12]
   2f416:	9302      	str	r3, [sp, #8]
   2f418:	9101      	str	r1, [sp, #4]
   2f41a:	9200      	str	r2, [sp, #0]
   2f41c:	0033      	movs	r3, r6
   2f41e:	002a      	movs	r2, r5
   2f420:	0021      	movs	r1, r4
   2f422:	4c08      	ldr	r4, [pc, #32]	; (2f444 <mqtt_init+0xac>)
   2f424:	47a0      	blx	r4
		return SUCCESS;
   2f426:	2300      	movs	r3, #0
   2f428:	e001      	b.n	2f42e <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2f42a:	2301      	movs	r3, #1
   2f42c:	425b      	negs	r3, r3
}
   2f42e:	0018      	movs	r0, r3
   2f430:	46bd      	mov	sp, r7
   2f432:	b005      	add	sp, #20
   2f434:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f436:	46c0      	nop			; (mov r8, r8)
   2f438:	0002f1f1 	.word	0x0002f1f1
   2f43c:	000346a9 	.word	0x000346a9
   2f440:	0002f339 	.word	0x0002f339
   2f444:	0002e269 	.word	0x0002e269

0002f448 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2f448:	b580      	push	{r7, lr}
   2f44a:	b082      	sub	sp, #8
   2f44c:	af00      	add	r7, sp, #0
   2f44e:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2f450:	687b      	ldr	r3, [r7, #4]
   2f452:	4a0c      	ldr	r2, [pc, #48]	; (2f484 <mqtt_get_config_defaults+0x3c>)
   2f454:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2f456:	687b      	ldr	r3, [r7, #4]
   2f458:	2200      	movs	r2, #0
   2f45a:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2f45c:	687b      	ldr	r3, [r7, #4]
   2f45e:	223c      	movs	r2, #60	; 0x3c
   2f460:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2f462:	687b      	ldr	r3, [r7, #4]
   2f464:	2200      	movs	r2, #0
   2f466:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2f468:	687b      	ldr	r3, [r7, #4]
   2f46a:	2200      	movs	r2, #0
   2f46c:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2f46e:	687b      	ldr	r3, [r7, #4]
   2f470:	2200      	movs	r2, #0
   2f472:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2f474:	687b      	ldr	r3, [r7, #4]
   2f476:	2200      	movs	r2, #0
   2f478:	615a      	str	r2, [r3, #20]
}
   2f47a:	46c0      	nop			; (mov r8, r8)
   2f47c:	46bd      	mov	sp, r7
   2f47e:	b002      	add	sp, #8
   2f480:	bd80      	pop	{r7, pc}
   2f482:	46c0      	nop			; (mov r8, r8)
   2f484:	0000075b 	.word	0x0000075b

0002f488 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2f488:	b580      	push	{r7, lr}
   2f48a:	b082      	sub	sp, #8
   2f48c:	af00      	add	r7, sp, #0
   2f48e:	6078      	str	r0, [r7, #4]
   2f490:	6039      	str	r1, [r7, #0]
	if(module)
   2f492:	687b      	ldr	r3, [r7, #4]
   2f494:	2b00      	cmp	r3, #0
   2f496:	d004      	beq.n	2f4a2 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2f498:	687b      	ldr	r3, [r7, #4]
   2f49a:	683a      	ldr	r2, [r7, #0]
   2f49c:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2f49e:	2300      	movs	r3, #0
   2f4a0:	e001      	b.n	2f4a6 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2f4a2:	2301      	movs	r3, #1
   2f4a4:	425b      	negs	r3, r3
}
   2f4a6:	0018      	movs	r0, r3
   2f4a8:	46bd      	mov	sp, r7
   2f4aa:	b002      	add	sp, #8
   2f4ac:	bd80      	pop	{r7, pc}
	...

0002f4b0 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2f4b0:	b580      	push	{r7, lr}
   2f4b2:	b082      	sub	sp, #8
   2f4b4:	af00      	add	r7, sp, #0
   2f4b6:	603a      	str	r2, [r7, #0]
   2f4b8:	1dfb      	adds	r3, r7, #7
   2f4ba:	1c02      	adds	r2, r0, #0
   2f4bc:	701a      	strb	r2, [r3, #0]
   2f4be:	1dbb      	adds	r3, r7, #6
   2f4c0:	1c0a      	adds	r2, r1, #0
   2f4c2:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2f4c4:	683a      	ldr	r2, [r7, #0]
   2f4c6:	1dbb      	adds	r3, r7, #6
   2f4c8:	7819      	ldrb	r1, [r3, #0]
   2f4ca:	1dfb      	adds	r3, r7, #7
   2f4cc:	781b      	ldrb	r3, [r3, #0]
   2f4ce:	b25b      	sxtb	r3, r3
   2f4d0:	0018      	movs	r0, r3
   2f4d2:	4b03      	ldr	r3, [pc, #12]	; (2f4e0 <mqtt_socket_event_handler+0x30>)
   2f4d4:	4798      	blx	r3
}
   2f4d6:	46c0      	nop			; (mov r8, r8)
   2f4d8:	46bd      	mov	sp, r7
   2f4da:	b002      	add	sp, #8
   2f4dc:	bd80      	pop	{r7, pc}
   2f4de:	46c0      	nop			; (mov r8, r8)
   2f4e0:	0002ef2d 	.word	0x0002ef2d

0002f4e4 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2f4e4:	b580      	push	{r7, lr}
   2f4e6:	b082      	sub	sp, #8
   2f4e8:	af00      	add	r7, sp, #0
   2f4ea:	6078      	str	r0, [r7, #4]
   2f4ec:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2f4ee:	683a      	ldr	r2, [r7, #0]
   2f4f0:	687b      	ldr	r3, [r7, #4]
   2f4f2:	0011      	movs	r1, r2
   2f4f4:	0018      	movs	r0, r3
   2f4f6:	4b03      	ldr	r3, [pc, #12]	; (2f504 <mqtt_socket_resolve_handler+0x20>)
   2f4f8:	4798      	blx	r3
}
   2f4fa:	46c0      	nop			; (mov r8, r8)
   2f4fc:	46bd      	mov	sp, r7
   2f4fe:	b002      	add	sp, #8
   2f500:	bd80      	pop	{r7, pc}
   2f502:	46c0      	nop			; (mov r8, r8)
   2f504:	0002eedd 	.word	0x0002eedd

0002f508 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2f508:	b590      	push	{r4, r7, lr}
   2f50a:	b085      	sub	sp, #20
   2f50c:	af00      	add	r7, sp, #0
   2f50e:	6078      	str	r0, [r7, #4]
   2f510:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2f512:	687b      	ldr	r3, [r7, #4]
   2f514:	3320      	adds	r3, #32
   2f516:	0018      	movs	r0, r3
   2f518:	687b      	ldr	r3, [r7, #4]
   2f51a:	889b      	ldrh	r3, [r3, #4]
   2f51c:	001a      	movs	r2, r3
   2f51e:	687b      	ldr	r3, [r7, #4]
   2f520:	799b      	ldrb	r3, [r3, #6]
   2f522:	6839      	ldr	r1, [r7, #0]
   2f524:	4c09      	ldr	r4, [pc, #36]	; (2f54c <mqtt_connect+0x44>)
   2f526:	47a0      	blx	r4
   2f528:	0003      	movs	r3, r0
   2f52a:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2f52c:	687b      	ldr	r3, [r7, #4]
   2f52e:	681b      	ldr	r3, [r3, #0]
   2f530:	2b00      	cmp	r3, #0
   2f532:	d006      	beq.n	2f542 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2f534:	687b      	ldr	r3, [r7, #4]
   2f536:	681b      	ldr	r3, [r3, #0]
   2f538:	220c      	movs	r2, #12
   2f53a:	18ba      	adds	r2, r7, r2
   2f53c:	6878      	ldr	r0, [r7, #4]
   2f53e:	2100      	movs	r1, #0
   2f540:	4798      	blx	r3
	return connResult.sock_connected.result;
   2f542:	68fb      	ldr	r3, [r7, #12]
}
   2f544:	0018      	movs	r0, r3
   2f546:	46bd      	mov	sp, r7
   2f548:	b005      	add	sp, #20
   2f54a:	bd90      	pop	{r4, r7, pc}
   2f54c:	0002f229 	.word	0x0002f229

0002f550 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2f550:	b580      	push	{r7, lr}
   2f552:	b09c      	sub	sp, #112	; 0x70
   2f554:	af00      	add	r7, sp, #0
   2f556:	60f8      	str	r0, [r7, #12]
   2f558:	607a      	str	r2, [r7, #4]
   2f55a:	603b      	str	r3, [r7, #0]
   2f55c:	230b      	movs	r3, #11
   2f55e:	18fb      	adds	r3, r7, r3
   2f560:	1c0a      	adds	r2, r1, #0
   2f562:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2f564:	2310      	movs	r3, #16
   2f566:	18fa      	adds	r2, r7, r3
   2f568:	4b31      	ldr	r3, [pc, #196]	; (2f630 <mqtt_connect_broker+0xe0>)
   2f56a:	0010      	movs	r0, r2
   2f56c:	0019      	movs	r1, r3
   2f56e:	2358      	movs	r3, #88	; 0x58
   2f570:	001a      	movs	r2, r3
   2f572:	4b30      	ldr	r3, [pc, #192]	; (2f634 <mqtt_connect_broker+0xe4>)
   2f574:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2f576:	2310      	movs	r3, #16
   2f578:	18fb      	adds	r3, r7, r3
   2f57a:	2204      	movs	r2, #4
   2f57c:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2f57e:	2310      	movs	r3, #16
   2f580:	18fb      	adds	r3, r7, r3
   2f582:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2f584:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2f586:	2310      	movs	r3, #16
   2f588:	18fb      	adds	r3, r7, r3
   2f58a:	687a      	ldr	r2, [r7, #4]
   2f58c:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2f58e:	2310      	movs	r3, #16
   2f590:	18fb      	adds	r3, r7, r3
   2f592:	683a      	ldr	r2, [r7, #0]
   2f594:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2f596:	2310      	movs	r3, #16
   2f598:	18fb      	adds	r3, r7, r3
   2f59a:	220b      	movs	r2, #11
   2f59c:	18ba      	adds	r2, r7, r2
   2f59e:	7812      	ldrb	r2, [r2, #0]
   2f5a0:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2f5a2:	2310      	movs	r3, #16
   2f5a4:	18fb      	adds	r3, r7, r3
   2f5a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2f5a8:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2f5aa:	2310      	movs	r3, #16
   2f5ac:	18fb      	adds	r3, r7, r3
   2f5ae:	2280      	movs	r2, #128	; 0x80
   2f5b0:	18ba      	adds	r2, r7, r2
   2f5b2:	6812      	ldr	r2, [r2, #0]
   2f5b4:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2f5b6:	2310      	movs	r3, #16
   2f5b8:	18fb      	adds	r3, r7, r3
   2f5ba:	228c      	movs	r2, #140	; 0x8c
   2f5bc:	18ba      	adds	r2, r7, r2
   2f5be:	213c      	movs	r1, #60	; 0x3c
   2f5c0:	7812      	ldrb	r2, [r2, #0]
   2f5c2:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2f5c4:	2310      	movs	r3, #16
   2f5c6:	18fb      	adds	r3, r7, r3
   2f5c8:	2288      	movs	r2, #136	; 0x88
   2f5ca:	18ba      	adds	r2, r7, r2
   2f5cc:	213d      	movs	r1, #61	; 0x3d
   2f5ce:	7812      	ldrb	r2, [r2, #0]
   2f5d0:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2f5d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2f5d4:	2b00      	cmp	r3, #0
   2f5d6:	d008      	beq.n	2f5ea <mqtt_connect_broker+0x9a>
   2f5d8:	2380      	movs	r3, #128	; 0x80
   2f5da:	18fb      	adds	r3, r7, r3
   2f5dc:	681b      	ldr	r3, [r3, #0]
   2f5de:	2b00      	cmp	r3, #0
   2f5e0:	d003      	beq.n	2f5ea <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2f5e2:	2310      	movs	r3, #16
   2f5e4:	18fb      	adds	r3, r7, r3
   2f5e6:	2201      	movs	r2, #1
   2f5e8:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2f5ea:	68fb      	ldr	r3, [r7, #12]
   2f5ec:	69db      	ldr	r3, [r3, #28]
   2f5ee:	2210      	movs	r2, #16
   2f5f0:	18ba      	adds	r2, r7, r2
   2f5f2:	0011      	movs	r1, r2
   2f5f4:	0018      	movs	r0, r3
   2f5f6:	4b10      	ldr	r3, [pc, #64]	; (2f638 <mqtt_connect_broker+0xe8>)
   2f5f8:	4798      	blx	r3
   2f5fa:	0003      	movs	r3, r0
   2f5fc:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2f5fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f600:	b2da      	uxtb	r2, r3
   2f602:	2368      	movs	r3, #104	; 0x68
   2f604:	18fb      	adds	r3, r7, r3
   2f606:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2f608:	68fb      	ldr	r3, [r7, #12]
   2f60a:	681b      	ldr	r3, [r3, #0]
   2f60c:	2b00      	cmp	r3, #0
   2f60e:	d006      	beq.n	2f61e <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2f610:	68fb      	ldr	r3, [r7, #12]
   2f612:	681b      	ldr	r3, [r3, #0]
   2f614:	2268      	movs	r2, #104	; 0x68
   2f616:	18ba      	adds	r2, r7, r2
   2f618:	68f8      	ldr	r0, [r7, #12]
   2f61a:	2101      	movs	r1, #1
   2f61c:	4798      	blx	r3
	
	module->isConnected = true;
   2f61e:	68fb      	ldr	r3, [r7, #12]
   2f620:	2234      	movs	r2, #52	; 0x34
   2f622:	2101      	movs	r1, #1
   2f624:	5499      	strb	r1, [r3, r2]
	return rc;
   2f626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2f628:	0018      	movs	r0, r3
   2f62a:	46bd      	mov	sp, r7
   2f62c:	b01c      	add	sp, #112	; 0x70
   2f62e:	bd80      	pop	{r7, pc}
   2f630:	000398d8 	.word	0x000398d8
   2f634:	000346a9 	.word	0x000346a9
   2f638:	0002e979 	.word	0x0002e979

0002f63c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2f63c:	b580      	push	{r7, lr}
   2f63e:	b084      	sub	sp, #16
   2f640:	af00      	add	r7, sp, #0
   2f642:	6078      	str	r0, [r7, #4]
   2f644:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2f646:	687b      	ldr	r3, [r7, #4]
   2f648:	69db      	ldr	r3, [r3, #28]
   2f64a:	0018      	movs	r0, r3
   2f64c:	4b0c      	ldr	r3, [pc, #48]	; (2f680 <mqtt_disconnect+0x44>)
   2f64e:	4798      	blx	r3
   2f650:	0003      	movs	r3, r0
   2f652:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2f654:	68fb      	ldr	r3, [r7, #12]
   2f656:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2f658:	687b      	ldr	r3, [r7, #4]
   2f65a:	681b      	ldr	r3, [r3, #0]
   2f65c:	2b00      	cmp	r3, #0
   2f65e:	d006      	beq.n	2f66e <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2f660:	687b      	ldr	r3, [r7, #4]
   2f662:	681b      	ldr	r3, [r3, #0]
   2f664:	2208      	movs	r2, #8
   2f666:	18ba      	adds	r2, r7, r2
   2f668:	6878      	ldr	r0, [r7, #4]
   2f66a:	2105      	movs	r1, #5
   2f66c:	4798      	blx	r3
	
	module->isConnected = false;
   2f66e:	687b      	ldr	r3, [r7, #4]
   2f670:	2234      	movs	r2, #52	; 0x34
   2f672:	2100      	movs	r1, #0
   2f674:	5499      	strb	r1, [r3, r2]
	return rc;
   2f676:	68fb      	ldr	r3, [r7, #12]
}
   2f678:	0018      	movs	r0, r3
   2f67a:	46bd      	mov	sp, r7
   2f67c:	b004      	add	sp, #16
   2f67e:	bd80      	pop	{r7, pc}
   2f680:	0002ee05 	.word	0x0002ee05

0002f684 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2f684:	b580      	push	{r7, lr}
   2f686:	b08a      	sub	sp, #40	; 0x28
   2f688:	af00      	add	r7, sp, #0
   2f68a:	60f8      	str	r0, [r7, #12]
   2f68c:	60b9      	str	r1, [r7, #8]
   2f68e:	607a      	str	r2, [r7, #4]
   2f690:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2f692:	2314      	movs	r3, #20
   2f694:	18fb      	adds	r3, r7, r3
   2f696:	2230      	movs	r2, #48	; 0x30
   2f698:	18ba      	adds	r2, r7, r2
   2f69a:	7812      	ldrb	r2, [r2, #0]
   2f69c:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2f69e:	2314      	movs	r3, #20
   2f6a0:	18fb      	adds	r3, r7, r3
   2f6a2:	687a      	ldr	r2, [r7, #4]
   2f6a4:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2f6a6:	2314      	movs	r3, #20
   2f6a8:	18fb      	adds	r3, r7, r3
   2f6aa:	683a      	ldr	r2, [r7, #0]
   2f6ac:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2f6ae:	2314      	movs	r3, #20
   2f6b0:	18fb      	adds	r3, r7, r3
   2f6b2:	2234      	movs	r2, #52	; 0x34
   2f6b4:	18ba      	adds	r2, r7, r2
   2f6b6:	7812      	ldrb	r2, [r2, #0]
   2f6b8:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2f6ba:	68fb      	ldr	r3, [r7, #12]
   2f6bc:	69db      	ldr	r3, [r3, #28]
   2f6be:	2214      	movs	r2, #20
   2f6c0:	18ba      	adds	r2, r7, r2
   2f6c2:	68b9      	ldr	r1, [r7, #8]
   2f6c4:	0018      	movs	r0, r3
   2f6c6:	4b09      	ldr	r3, [pc, #36]	; (2f6ec <mqtt_publish+0x68>)
   2f6c8:	4798      	blx	r3
   2f6ca:	0003      	movs	r3, r0
   2f6cc:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2f6ce:	68fb      	ldr	r3, [r7, #12]
   2f6d0:	681b      	ldr	r3, [r3, #0]
   2f6d2:	2b00      	cmp	r3, #0
   2f6d4:	d005      	beq.n	2f6e2 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2f6d6:	68fb      	ldr	r3, [r7, #12]
   2f6d8:	681b      	ldr	r3, [r3, #0]
   2f6da:	68f8      	ldr	r0, [r7, #12]
   2f6dc:	2200      	movs	r2, #0
   2f6de:	2102      	movs	r1, #2
   2f6e0:	4798      	blx	r3
	
	return rc;
   2f6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f6e4:	0018      	movs	r0, r3
   2f6e6:	46bd      	mov	sp, r7
   2f6e8:	b00a      	add	sp, #40	; 0x28
   2f6ea:	bd80      	pop	{r7, pc}
   2f6ec:	0002ec45 	.word	0x0002ec45

0002f6f0 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2f6f0:	b590      	push	{r4, r7, lr}
   2f6f2:	b087      	sub	sp, #28
   2f6f4:	af00      	add	r7, sp, #0
   2f6f6:	60f8      	str	r0, [r7, #12]
   2f6f8:	60b9      	str	r1, [r7, #8]
   2f6fa:	603b      	str	r3, [r7, #0]
   2f6fc:	1dfb      	adds	r3, r7, #7
   2f6fe:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2f700:	68fb      	ldr	r3, [r7, #12]
   2f702:	69d8      	ldr	r0, [r3, #28]
   2f704:	683c      	ldr	r4, [r7, #0]
   2f706:	1dfb      	adds	r3, r7, #7
   2f708:	781a      	ldrb	r2, [r3, #0]
   2f70a:	68b9      	ldr	r1, [r7, #8]
   2f70c:	0023      	movs	r3, r4
   2f70e:	4c09      	ldr	r4, [pc, #36]	; (2f734 <mqtt_subscribe+0x44>)
   2f710:	47a0      	blx	r4
   2f712:	0003      	movs	r3, r0
   2f714:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2f716:	68fb      	ldr	r3, [r7, #12]
   2f718:	681b      	ldr	r3, [r3, #0]
   2f71a:	2b00      	cmp	r3, #0
   2f71c:	d005      	beq.n	2f72a <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2f71e:	68fb      	ldr	r3, [r7, #12]
   2f720:	681b      	ldr	r3, [r3, #0]
   2f722:	68f8      	ldr	r0, [r7, #12]
   2f724:	2200      	movs	r2, #0
   2f726:	2103      	movs	r1, #3
   2f728:	4798      	blx	r3
	
	return rc;
   2f72a:	697b      	ldr	r3, [r7, #20]
}
   2f72c:	0018      	movs	r0, r3
   2f72e:	46bd      	mov	sp, r7
   2f730:	b007      	add	sp, #28
   2f732:	bd90      	pop	{r4, r7, pc}
   2f734:	0002eab9 	.word	0x0002eab9

0002f738 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2f738:	b580      	push	{r7, lr}
   2f73a:	b082      	sub	sp, #8
   2f73c:	af00      	add	r7, sp, #0
   2f73e:	6078      	str	r0, [r7, #4]
   2f740:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2f742:	687b      	ldr	r3, [r7, #4]
   2f744:	69db      	ldr	r3, [r3, #28]
   2f746:	683a      	ldr	r2, [r7, #0]
   2f748:	0011      	movs	r1, r2
   2f74a:	0018      	movs	r0, r3
   2f74c:	4b03      	ldr	r3, [pc, #12]	; (2f75c <mqtt_yield+0x24>)
   2f74e:	4798      	blx	r3
   2f750:	0003      	movs	r3, r0
   2f752:	0018      	movs	r0, r3
   2f754:	46bd      	mov	sp, r7
   2f756:	b002      	add	sp, #8
   2f758:	bd80      	pop	{r7, pc}
   2f75a:	46c0      	nop			; (mov r8, r8)
   2f75c:	0002e8c1 	.word	0x0002e8c1

0002f760 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2f760:	b590      	push	{r4, r7, lr}
   2f762:	b085      	sub	sp, #20
   2f764:	af00      	add	r7, sp, #0
   2f766:	6078      	str	r0, [r7, #4]
	int len = 0;
   2f768:	2300      	movs	r3, #0
   2f76a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2f76c:	687b      	ldr	r3, [r7, #4]
   2f76e:	7a1b      	ldrb	r3, [r3, #8]
   2f770:	2b03      	cmp	r3, #3
   2f772:	d102      	bne.n	2f77a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2f774:	230c      	movs	r3, #12
   2f776:	60fb      	str	r3, [r7, #12]
   2f778:	e005      	b.n	2f786 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2f77a:	687b      	ldr	r3, [r7, #4]
   2f77c:	7a1b      	ldrb	r3, [r3, #8]
   2f77e:	2b04      	cmp	r3, #4
   2f780:	d101      	bne.n	2f786 <MQTTSerialize_connectLength+0x26>
		len = 10;
   2f782:	230a      	movs	r3, #10
   2f784:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2f786:	687b      	ldr	r3, [r7, #4]
   2f788:	68d8      	ldr	r0, [r3, #12]
   2f78a:	6919      	ldr	r1, [r3, #16]
   2f78c:	695a      	ldr	r2, [r3, #20]
   2f78e:	4b25      	ldr	r3, [pc, #148]	; (2f824 <MQTTSerialize_connectLength+0xc4>)
   2f790:	4798      	blx	r3
   2f792:	0003      	movs	r3, r0
   2f794:	3302      	adds	r3, #2
   2f796:	68fa      	ldr	r2, [r7, #12]
   2f798:	18d3      	adds	r3, r2, r3
   2f79a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2f79c:	687b      	ldr	r3, [r7, #4]
   2f79e:	7edb      	ldrb	r3, [r3, #27]
   2f7a0:	2b00      	cmp	r3, #0
   2f7a2:	d013      	beq.n	2f7cc <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2f7a4:	687b      	ldr	r3, [r7, #4]
   2f7a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2f7a8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2f7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2f7ac:	4b1d      	ldr	r3, [pc, #116]	; (2f824 <MQTTSerialize_connectLength+0xc4>)
   2f7ae:	4798      	blx	r3
   2f7b0:	0003      	movs	r3, r0
   2f7b2:	1c9c      	adds	r4, r3, #2
   2f7b4:	687b      	ldr	r3, [r7, #4]
   2f7b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2f7b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2f7ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2f7bc:	4b19      	ldr	r3, [pc, #100]	; (2f824 <MQTTSerialize_connectLength+0xc4>)
   2f7be:	4798      	blx	r3
   2f7c0:	0003      	movs	r3, r0
   2f7c2:	18e3      	adds	r3, r4, r3
   2f7c4:	3302      	adds	r3, #2
   2f7c6:	68fa      	ldr	r2, [r7, #12]
   2f7c8:	18d3      	adds	r3, r2, r3
   2f7ca:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2f7cc:	687b      	ldr	r3, [r7, #4]
   2f7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f7d0:	2b00      	cmp	r3, #0
   2f7d2:	d103      	bne.n	2f7dc <MQTTSerialize_connectLength+0x7c>
   2f7d4:	687b      	ldr	r3, [r7, #4]
   2f7d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f7d8:	2b00      	cmp	r3, #0
   2f7da:	d00a      	beq.n	2f7f2 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2f7dc:	687b      	ldr	r3, [r7, #4]
   2f7de:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2f7e0:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2f7e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2f7e4:	4b0f      	ldr	r3, [pc, #60]	; (2f824 <MQTTSerialize_connectLength+0xc4>)
   2f7e6:	4798      	blx	r3
   2f7e8:	0003      	movs	r3, r0
   2f7ea:	3302      	adds	r3, #2
   2f7ec:	68fa      	ldr	r2, [r7, #12]
   2f7ee:	18d3      	adds	r3, r2, r3
   2f7f0:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2f7f2:	687b      	ldr	r3, [r7, #4]
   2f7f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f7f6:	2b00      	cmp	r3, #0
   2f7f8:	d103      	bne.n	2f802 <MQTTSerialize_connectLength+0xa2>
   2f7fa:	687b      	ldr	r3, [r7, #4]
   2f7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f7fe:	2b00      	cmp	r3, #0
   2f800:	d00a      	beq.n	2f818 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2f802:	687b      	ldr	r3, [r7, #4]
   2f804:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2f806:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2f808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2f80a:	4b06      	ldr	r3, [pc, #24]	; (2f824 <MQTTSerialize_connectLength+0xc4>)
   2f80c:	4798      	blx	r3
   2f80e:	0003      	movs	r3, r0
   2f810:	3302      	adds	r3, #2
   2f812:	68fa      	ldr	r2, [r7, #12]
   2f814:	18d3      	adds	r3, r2, r3
   2f816:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2f818:	68fb      	ldr	r3, [r7, #12]
}
   2f81a:	0018      	movs	r0, r3
   2f81c:	46bd      	mov	sp, r7
   2f81e:	b005      	add	sp, #20
   2f820:	bd90      	pop	{r4, r7, pc}
   2f822:	46c0      	nop			; (mov r8, r8)
   2f824:	000301d1 	.word	0x000301d1

0002f828 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2f828:	b590      	push	{r4, r7, lr}
   2f82a:	b08b      	sub	sp, #44	; 0x2c
   2f82c:	af00      	add	r7, sp, #0
   2f82e:	60f8      	str	r0, [r7, #12]
   2f830:	60b9      	str	r1, [r7, #8]
   2f832:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2f834:	68fb      	ldr	r3, [r7, #12]
   2f836:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2f838:	2300      	movs	r3, #0
   2f83a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2f83c:	2300      	movs	r3, #0
   2f83e:	617b      	str	r3, [r7, #20]
	int len = 0;
   2f840:	2300      	movs	r3, #0
   2f842:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2f844:	2301      	movs	r3, #1
   2f846:	425b      	negs	r3, r3
   2f848:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2f84a:	687b      	ldr	r3, [r7, #4]
   2f84c:	0018      	movs	r0, r3
   2f84e:	4b8c      	ldr	r3, [pc, #560]	; (2fa80 <MQTTSerialize_connect+0x258>)
   2f850:	4798      	blx	r3
   2f852:	0003      	movs	r3, r0
   2f854:	623b      	str	r3, [r7, #32]
   2f856:	6a3b      	ldr	r3, [r7, #32]
   2f858:	0018      	movs	r0, r3
   2f85a:	4b8a      	ldr	r3, [pc, #552]	; (2fa84 <MQTTSerialize_connect+0x25c>)
   2f85c:	4798      	blx	r3
   2f85e:	0002      	movs	r2, r0
   2f860:	68bb      	ldr	r3, [r7, #8]
   2f862:	429a      	cmp	r2, r3
   2f864:	dd03      	ble.n	2f86e <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f866:	2302      	movs	r3, #2
   2f868:	425b      	negs	r3, r3
   2f86a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2f86c:	e103      	b.n	2fa76 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2f86e:	2318      	movs	r3, #24
   2f870:	18fb      	adds	r3, r7, r3
   2f872:	2200      	movs	r2, #0
   2f874:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2f876:	2318      	movs	r3, #24
   2f878:	18fb      	adds	r3, r7, r3
   2f87a:	781a      	ldrb	r2, [r3, #0]
   2f87c:	210f      	movs	r1, #15
   2f87e:	400a      	ands	r2, r1
   2f880:	1c11      	adds	r1, r2, #0
   2f882:	2210      	movs	r2, #16
   2f884:	430a      	orrs	r2, r1
   2f886:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f888:	2318      	movs	r3, #24
   2f88a:	18fb      	adds	r3, r7, r3
   2f88c:	781a      	ldrb	r2, [r3, #0]
   2f88e:	231c      	movs	r3, #28
   2f890:	18fb      	adds	r3, r7, r3
   2f892:	0011      	movs	r1, r2
   2f894:	0018      	movs	r0, r3
   2f896:	4b7c      	ldr	r3, [pc, #496]	; (2fa88 <MQTTSerialize_connect+0x260>)
   2f898:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2f89a:	69fb      	ldr	r3, [r7, #28]
   2f89c:	6a3a      	ldr	r2, [r7, #32]
   2f89e:	0011      	movs	r1, r2
   2f8a0:	0018      	movs	r0, r3
   2f8a2:	4b7a      	ldr	r3, [pc, #488]	; (2fa8c <MQTTSerialize_connect+0x264>)
   2f8a4:	4798      	blx	r3
   2f8a6:	0002      	movs	r2, r0
   2f8a8:	69fb      	ldr	r3, [r7, #28]
   2f8aa:	189b      	adds	r3, r3, r2
   2f8ac:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2f8ae:	687b      	ldr	r3, [r7, #4]
   2f8b0:	7a1b      	ldrb	r3, [r3, #8]
   2f8b2:	2b04      	cmp	r3, #4
   2f8b4:	d10d      	bne.n	2f8d2 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2f8b6:	4a76      	ldr	r2, [pc, #472]	; (2fa90 <MQTTSerialize_connect+0x268>)
   2f8b8:	231c      	movs	r3, #28
   2f8ba:	18fb      	adds	r3, r7, r3
   2f8bc:	0011      	movs	r1, r2
   2f8be:	0018      	movs	r0, r3
   2f8c0:	4b74      	ldr	r3, [pc, #464]	; (2fa94 <MQTTSerialize_connect+0x26c>)
   2f8c2:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2f8c4:	231c      	movs	r3, #28
   2f8c6:	18fb      	adds	r3, r7, r3
   2f8c8:	2104      	movs	r1, #4
   2f8ca:	0018      	movs	r0, r3
   2f8cc:	4b6e      	ldr	r3, [pc, #440]	; (2fa88 <MQTTSerialize_connect+0x260>)
   2f8ce:	4798      	blx	r3
   2f8d0:	e00c      	b.n	2f8ec <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2f8d2:	4a71      	ldr	r2, [pc, #452]	; (2fa98 <MQTTSerialize_connect+0x270>)
   2f8d4:	231c      	movs	r3, #28
   2f8d6:	18fb      	adds	r3, r7, r3
   2f8d8:	0011      	movs	r1, r2
   2f8da:	0018      	movs	r0, r3
   2f8dc:	4b6d      	ldr	r3, [pc, #436]	; (2fa94 <MQTTSerialize_connect+0x26c>)
   2f8de:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2f8e0:	231c      	movs	r3, #28
   2f8e2:	18fb      	adds	r3, r7, r3
   2f8e4:	2103      	movs	r1, #3
   2f8e6:	0018      	movs	r0, r3
   2f8e8:	4b67      	ldr	r3, [pc, #412]	; (2fa88 <MQTTSerialize_connect+0x260>)
   2f8ea:	4798      	blx	r3
	}

	flags.all = 0;
   2f8ec:	2314      	movs	r3, #20
   2f8ee:	18fb      	adds	r3, r7, r3
   2f8f0:	2200      	movs	r2, #0
   2f8f2:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2f8f4:	687b      	ldr	r3, [r7, #4]
   2f8f6:	7e9b      	ldrb	r3, [r3, #26]
   2f8f8:	1c1a      	adds	r2, r3, #0
   2f8fa:	2301      	movs	r3, #1
   2f8fc:	4013      	ands	r3, r2
   2f8fe:	b2da      	uxtb	r2, r3
   2f900:	2314      	movs	r3, #20
   2f902:	18fb      	adds	r3, r7, r3
   2f904:	2101      	movs	r1, #1
   2f906:	400a      	ands	r2, r1
   2f908:	1890      	adds	r0, r2, r2
   2f90a:	781a      	ldrb	r2, [r3, #0]
   2f90c:	2102      	movs	r1, #2
   2f90e:	438a      	bics	r2, r1
   2f910:	1c11      	adds	r1, r2, #0
   2f912:	1c02      	adds	r2, r0, #0
   2f914:	430a      	orrs	r2, r1
   2f916:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2f918:	687b      	ldr	r3, [r7, #4]
   2f91a:	7edb      	ldrb	r3, [r3, #27]
   2f91c:	1e5a      	subs	r2, r3, #1
   2f91e:	4193      	sbcs	r3, r2
   2f920:	b2da      	uxtb	r2, r3
   2f922:	2314      	movs	r3, #20
   2f924:	18fb      	adds	r3, r7, r3
   2f926:	2101      	movs	r1, #1
   2f928:	400a      	ands	r2, r1
   2f92a:	0090      	lsls	r0, r2, #2
   2f92c:	781a      	ldrb	r2, [r3, #0]
   2f92e:	2104      	movs	r1, #4
   2f930:	438a      	bics	r2, r1
   2f932:	1c11      	adds	r1, r2, #0
   2f934:	1c02      	adds	r2, r0, #0
   2f936:	430a      	orrs	r2, r1
   2f938:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2f93a:	2314      	movs	r3, #20
   2f93c:	18fb      	adds	r3, r7, r3
   2f93e:	781b      	ldrb	r3, [r3, #0]
   2f940:	2204      	movs	r2, #4
   2f942:	4013      	ands	r3, r2
   2f944:	b2db      	uxtb	r3, r3
   2f946:	2b00      	cmp	r3, #0
   2f948:	d025      	beq.n	2f996 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2f94a:	687b      	ldr	r3, [r7, #4]
   2f94c:	223d      	movs	r2, #61	; 0x3d
   2f94e:	5c9b      	ldrb	r3, [r3, r2]
   2f950:	1c1a      	adds	r2, r3, #0
   2f952:	2303      	movs	r3, #3
   2f954:	4013      	ands	r3, r2
   2f956:	b2da      	uxtb	r2, r3
   2f958:	2314      	movs	r3, #20
   2f95a:	18fb      	adds	r3, r7, r3
   2f95c:	2103      	movs	r1, #3
   2f95e:	400a      	ands	r2, r1
   2f960:	00d0      	lsls	r0, r2, #3
   2f962:	781a      	ldrb	r2, [r3, #0]
   2f964:	2118      	movs	r1, #24
   2f966:	438a      	bics	r2, r1
   2f968:	1c11      	adds	r1, r2, #0
   2f96a:	1c02      	adds	r2, r0, #0
   2f96c:	430a      	orrs	r2, r1
   2f96e:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2f970:	687b      	ldr	r3, [r7, #4]
   2f972:	223c      	movs	r2, #60	; 0x3c
   2f974:	5c9b      	ldrb	r3, [r3, r2]
   2f976:	1c1a      	adds	r2, r3, #0
   2f978:	2301      	movs	r3, #1
   2f97a:	4013      	ands	r3, r2
   2f97c:	b2da      	uxtb	r2, r3
   2f97e:	2314      	movs	r3, #20
   2f980:	18fb      	adds	r3, r7, r3
   2f982:	2101      	movs	r1, #1
   2f984:	400a      	ands	r2, r1
   2f986:	0150      	lsls	r0, r2, #5
   2f988:	781a      	ldrb	r2, [r3, #0]
   2f98a:	2120      	movs	r1, #32
   2f98c:	438a      	bics	r2, r1
   2f98e:	1c11      	adds	r1, r2, #0
   2f990:	1c02      	adds	r2, r0, #0
   2f992:	430a      	orrs	r2, r1
   2f994:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2f996:	687b      	ldr	r3, [r7, #4]
   2f998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f99a:	2b00      	cmp	r3, #0
   2f99c:	d103      	bne.n	2f9a6 <MQTTSerialize_connect+0x17e>
   2f99e:	687b      	ldr	r3, [r7, #4]
   2f9a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f9a2:	2b00      	cmp	r3, #0
   2f9a4:	d006      	beq.n	2f9b4 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2f9a6:	2314      	movs	r3, #20
   2f9a8:	18fb      	adds	r3, r7, r3
   2f9aa:	781a      	ldrb	r2, [r3, #0]
   2f9ac:	2180      	movs	r1, #128	; 0x80
   2f9ae:	4249      	negs	r1, r1
   2f9b0:	430a      	orrs	r2, r1
   2f9b2:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2f9b4:	687b      	ldr	r3, [r7, #4]
   2f9b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f9b8:	2b00      	cmp	r3, #0
   2f9ba:	d103      	bne.n	2f9c4 <MQTTSerialize_connect+0x19c>
   2f9bc:	687b      	ldr	r3, [r7, #4]
   2f9be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f9c0:	2b00      	cmp	r3, #0
   2f9c2:	d005      	beq.n	2f9d0 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2f9c4:	2314      	movs	r3, #20
   2f9c6:	18fb      	adds	r3, r7, r3
   2f9c8:	781a      	ldrb	r2, [r3, #0]
   2f9ca:	2140      	movs	r1, #64	; 0x40
   2f9cc:	430a      	orrs	r2, r1
   2f9ce:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2f9d0:	2314      	movs	r3, #20
   2f9d2:	18fb      	adds	r3, r7, r3
   2f9d4:	781a      	ldrb	r2, [r3, #0]
   2f9d6:	231c      	movs	r3, #28
   2f9d8:	18fb      	adds	r3, r7, r3
   2f9da:	0011      	movs	r1, r2
   2f9dc:	0018      	movs	r0, r3
   2f9de:	4b2a      	ldr	r3, [pc, #168]	; (2fa88 <MQTTSerialize_connect+0x260>)
   2f9e0:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2f9e2:	687b      	ldr	r3, [r7, #4]
   2f9e4:	8b1b      	ldrh	r3, [r3, #24]
   2f9e6:	001a      	movs	r2, r3
   2f9e8:	231c      	movs	r3, #28
   2f9ea:	18fb      	adds	r3, r7, r3
   2f9ec:	0011      	movs	r1, r2
   2f9ee:	0018      	movs	r0, r3
   2f9f0:	4b2a      	ldr	r3, [pc, #168]	; (2fa9c <MQTTSerialize_connect+0x274>)
   2f9f2:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2f9f4:	687b      	ldr	r3, [r7, #4]
   2f9f6:	221c      	movs	r2, #28
   2f9f8:	18b8      	adds	r0, r7, r2
   2f9fa:	68d9      	ldr	r1, [r3, #12]
   2f9fc:	691a      	ldr	r2, [r3, #16]
   2f9fe:	695b      	ldr	r3, [r3, #20]
   2fa00:	4c27      	ldr	r4, [pc, #156]	; (2faa0 <MQTTSerialize_connect+0x278>)
   2fa02:	47a0      	blx	r4
	if (options->willFlag)
   2fa04:	687b      	ldr	r3, [r7, #4]
   2fa06:	7edb      	ldrb	r3, [r3, #27]
   2fa08:	2b00      	cmp	r3, #0
   2fa0a:	d00f      	beq.n	2fa2c <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2fa0c:	687b      	ldr	r3, [r7, #4]
   2fa0e:	221c      	movs	r2, #28
   2fa10:	18b8      	adds	r0, r7, r2
   2fa12:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2fa14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2fa16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2fa18:	4c21      	ldr	r4, [pc, #132]	; (2faa0 <MQTTSerialize_connect+0x278>)
   2fa1a:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2fa1c:	687b      	ldr	r3, [r7, #4]
   2fa1e:	221c      	movs	r2, #28
   2fa20:	18b8      	adds	r0, r7, r2
   2fa22:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2fa24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2fa26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2fa28:	4c1d      	ldr	r4, [pc, #116]	; (2faa0 <MQTTSerialize_connect+0x278>)
   2fa2a:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2fa2c:	2314      	movs	r3, #20
   2fa2e:	18fb      	adds	r3, r7, r3
   2fa30:	781b      	ldrb	r3, [r3, #0]
   2fa32:	227f      	movs	r2, #127	; 0x7f
   2fa34:	4393      	bics	r3, r2
   2fa36:	b2db      	uxtb	r3, r3
   2fa38:	2b00      	cmp	r3, #0
   2fa3a:	d007      	beq.n	2fa4c <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2fa3c:	687b      	ldr	r3, [r7, #4]
   2fa3e:	221c      	movs	r2, #28
   2fa40:	18b8      	adds	r0, r7, r2
   2fa42:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2fa44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2fa46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2fa48:	4c15      	ldr	r4, [pc, #84]	; (2faa0 <MQTTSerialize_connect+0x278>)
   2fa4a:	47a0      	blx	r4
	if (flags.bits.password)
   2fa4c:	2314      	movs	r3, #20
   2fa4e:	18fb      	adds	r3, r7, r3
   2fa50:	781b      	ldrb	r3, [r3, #0]
   2fa52:	2240      	movs	r2, #64	; 0x40
   2fa54:	4013      	ands	r3, r2
   2fa56:	b2db      	uxtb	r3, r3
   2fa58:	2b00      	cmp	r3, #0
   2fa5a:	d007      	beq.n	2fa6c <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2fa5c:	687b      	ldr	r3, [r7, #4]
   2fa5e:	221c      	movs	r2, #28
   2fa60:	18b8      	adds	r0, r7, r2
   2fa62:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2fa64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2fa66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2fa68:	4c0d      	ldr	r4, [pc, #52]	; (2faa0 <MQTTSerialize_connect+0x278>)
   2fa6a:	47a0      	blx	r4

	rc = ptr - buf;
   2fa6c:	69fb      	ldr	r3, [r7, #28]
   2fa6e:	001a      	movs	r2, r3
   2fa70:	68fb      	ldr	r3, [r7, #12]
   2fa72:	1ad3      	subs	r3, r2, r3
   2fa74:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2fa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fa78:	0018      	movs	r0, r3
   2fa7a:	46bd      	mov	sp, r7
   2fa7c:	b00b      	add	sp, #44	; 0x2c
   2fa7e:	bd90      	pop	{r4, r7, pc}
   2fa80:	0002f761 	.word	0x0002f761
   2fa84:	0002fef5 	.word	0x0002fef5
   2fa88:	00030017 	.word	0x00030017
   2fa8c:	0002fdfd 	.word	0x0002fdfd
   2fa90:	00039930 	.word	0x00039930
   2fa94:	00030099 	.word	0x00030099
   2fa98:	00039938 	.word	0x00039938
   2fa9c:	00030041 	.word	0x00030041
   2faa0:	000300e9 	.word	0x000300e9

0002faa4 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2faa4:	b580      	push	{r7, lr}
   2faa6:	b08a      	sub	sp, #40	; 0x28
   2faa8:	af00      	add	r7, sp, #0
   2faaa:	60f8      	str	r0, [r7, #12]
   2faac:	60b9      	str	r1, [r7, #8]
   2faae:	607a      	str	r2, [r7, #4]
   2fab0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fab2:	2300      	movs	r3, #0
   2fab4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fab6:	687b      	ldr	r3, [r7, #4]
   2fab8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2faba:	2300      	movs	r3, #0
   2fabc:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fabe:	2300      	movs	r3, #0
   2fac0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2fac2:	2300      	movs	r3, #0
   2fac4:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fac6:	2318      	movs	r3, #24
   2fac8:	18fb      	adds	r3, r7, r3
   2faca:	0018      	movs	r0, r3
   2facc:	4b25      	ldr	r3, [pc, #148]	; (2fb64 <MQTTDeserialize_connack+0xc0>)
   2face:	4798      	blx	r3
   2fad0:	0003      	movs	r3, r0
   2fad2:	001a      	movs	r2, r3
   2fad4:	231c      	movs	r3, #28
   2fad6:	18fb      	adds	r3, r7, r3
   2fad8:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2fada:	231c      	movs	r3, #28
   2fadc:	18fb      	adds	r3, r7, r3
   2fade:	781b      	ldrb	r3, [r3, #0]
   2fae0:	220f      	movs	r2, #15
   2fae2:	4393      	bics	r3, r2
   2fae4:	b2db      	uxtb	r3, r3
   2fae6:	2b20      	cmp	r3, #32
   2fae8:	d134      	bne.n	2fb54 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2faea:	69bb      	ldr	r3, [r7, #24]
   2faec:	2214      	movs	r2, #20
   2faee:	18ba      	adds	r2, r7, r2
   2faf0:	0011      	movs	r1, r2
   2faf2:	0018      	movs	r0, r3
   2faf4:	4b1c      	ldr	r3, [pc, #112]	; (2fb68 <MQTTDeserialize_connack+0xc4>)
   2faf6:	4798      	blx	r3
   2faf8:	0003      	movs	r3, r0
   2fafa:	627b      	str	r3, [r7, #36]	; 0x24
   2fafc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fafe:	69bb      	ldr	r3, [r7, #24]
   2fb00:	189b      	adds	r3, r3, r2
   2fb02:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fb04:	69bb      	ldr	r3, [r7, #24]
   2fb06:	697a      	ldr	r2, [r7, #20]
   2fb08:	189b      	adds	r3, r3, r2
   2fb0a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2fb0c:	6a3b      	ldr	r3, [r7, #32]
   2fb0e:	69ba      	ldr	r2, [r7, #24]
   2fb10:	1a9b      	subs	r3, r3, r2
   2fb12:	2b01      	cmp	r3, #1
   2fb14:	dd20      	ble.n	2fb58 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2fb16:	2318      	movs	r3, #24
   2fb18:	18fb      	adds	r3, r7, r3
   2fb1a:	0018      	movs	r0, r3
   2fb1c:	4b11      	ldr	r3, [pc, #68]	; (2fb64 <MQTTDeserialize_connack+0xc0>)
   2fb1e:	4798      	blx	r3
   2fb20:	0003      	movs	r3, r0
   2fb22:	001a      	movs	r2, r3
   2fb24:	2310      	movs	r3, #16
   2fb26:	18fb      	adds	r3, r7, r3
   2fb28:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2fb2a:	2310      	movs	r3, #16
   2fb2c:	18fb      	adds	r3, r7, r3
   2fb2e:	781b      	ldrb	r3, [r3, #0]
   2fb30:	061b      	lsls	r3, r3, #24
   2fb32:	0fdb      	lsrs	r3, r3, #31
   2fb34:	b2db      	uxtb	r3, r3
   2fb36:	001a      	movs	r2, r3
   2fb38:	68fb      	ldr	r3, [r7, #12]
   2fb3a:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2fb3c:	2318      	movs	r3, #24
   2fb3e:	18fb      	adds	r3, r7, r3
   2fb40:	0018      	movs	r0, r3
   2fb42:	4b08      	ldr	r3, [pc, #32]	; (2fb64 <MQTTDeserialize_connack+0xc0>)
   2fb44:	4798      	blx	r3
   2fb46:	0003      	movs	r3, r0
   2fb48:	001a      	movs	r2, r3
   2fb4a:	68bb      	ldr	r3, [r7, #8]
   2fb4c:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2fb4e:	2301      	movs	r3, #1
   2fb50:	627b      	str	r3, [r7, #36]	; 0x24
   2fb52:	e002      	b.n	2fb5a <MQTTDeserialize_connack+0xb6>
		goto exit;
   2fb54:	46c0      	nop			; (mov r8, r8)
   2fb56:	e000      	b.n	2fb5a <MQTTDeserialize_connack+0xb6>
		goto exit;
   2fb58:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fb5c:	0018      	movs	r0, r3
   2fb5e:	46bd      	mov	sp, r7
   2fb60:	b00a      	add	sp, #40	; 0x28
   2fb62:	bd80      	pop	{r7, pc}
   2fb64:	0002ffeb 	.word	0x0002ffeb
   2fb68:	0002ff85 	.word	0x0002ff85

0002fb6c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2fb6c:	b580      	push	{r7, lr}
   2fb6e:	b088      	sub	sp, #32
   2fb70:	af00      	add	r7, sp, #0
   2fb72:	60f8      	str	r0, [r7, #12]
   2fb74:	60b9      	str	r1, [r7, #8]
   2fb76:	1dfb      	adds	r3, r7, #7
   2fb78:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2fb7a:	2300      	movs	r3, #0
   2fb7c:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2fb7e:	2301      	movs	r3, #1
   2fb80:	425b      	negs	r3, r3
   2fb82:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2fb84:	68fb      	ldr	r3, [r7, #12]
   2fb86:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2fb88:	68bb      	ldr	r3, [r7, #8]
   2fb8a:	2b01      	cmp	r3, #1
   2fb8c:	dc03      	bgt.n	2fb96 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2fb8e:	2302      	movs	r3, #2
   2fb90:	425b      	negs	r3, r3
   2fb92:	61fb      	str	r3, [r7, #28]
		goto exit;
   2fb94:	e029      	b.n	2fbea <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2fb96:	2318      	movs	r3, #24
   2fb98:	18fb      	adds	r3, r7, r3
   2fb9a:	2200      	movs	r2, #0
   2fb9c:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2fb9e:	1dfb      	adds	r3, r7, #7
   2fba0:	781b      	ldrb	r3, [r3, #0]
   2fba2:	220f      	movs	r2, #15
   2fba4:	4013      	ands	r3, r2
   2fba6:	b2da      	uxtb	r2, r3
   2fba8:	2318      	movs	r3, #24
   2fbaa:	18fb      	adds	r3, r7, r3
   2fbac:	0110      	lsls	r0, r2, #4
   2fbae:	781a      	ldrb	r2, [r3, #0]
   2fbb0:	210f      	movs	r1, #15
   2fbb2:	400a      	ands	r2, r1
   2fbb4:	1c11      	adds	r1, r2, #0
   2fbb6:	1c02      	adds	r2, r0, #0
   2fbb8:	430a      	orrs	r2, r1
   2fbba:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fbbc:	2318      	movs	r3, #24
   2fbbe:	18fb      	adds	r3, r7, r3
   2fbc0:	781a      	ldrb	r2, [r3, #0]
   2fbc2:	2314      	movs	r3, #20
   2fbc4:	18fb      	adds	r3, r7, r3
   2fbc6:	0011      	movs	r1, r2
   2fbc8:	0018      	movs	r0, r3
   2fbca:	4b0a      	ldr	r3, [pc, #40]	; (2fbf4 <MQTTSerialize_zero+0x88>)
   2fbcc:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2fbce:	697b      	ldr	r3, [r7, #20]
   2fbd0:	2100      	movs	r1, #0
   2fbd2:	0018      	movs	r0, r3
   2fbd4:	4b08      	ldr	r3, [pc, #32]	; (2fbf8 <MQTTSerialize_zero+0x8c>)
   2fbd6:	4798      	blx	r3
   2fbd8:	0002      	movs	r2, r0
   2fbda:	697b      	ldr	r3, [r7, #20]
   2fbdc:	189b      	adds	r3, r3, r2
   2fbde:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2fbe0:	697b      	ldr	r3, [r7, #20]
   2fbe2:	001a      	movs	r2, r3
   2fbe4:	68fb      	ldr	r3, [r7, #12]
   2fbe6:	1ad3      	subs	r3, r2, r3
   2fbe8:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fbea:	69fb      	ldr	r3, [r7, #28]
}
   2fbec:	0018      	movs	r0, r3
   2fbee:	46bd      	mov	sp, r7
   2fbf0:	b008      	add	sp, #32
   2fbf2:	bd80      	pop	{r7, pc}
   2fbf4:	00030017 	.word	0x00030017
   2fbf8:	0002fdfd 	.word	0x0002fdfd

0002fbfc <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2fbfc:	b580      	push	{r7, lr}
   2fbfe:	b082      	sub	sp, #8
   2fc00:	af00      	add	r7, sp, #0
   2fc02:	6078      	str	r0, [r7, #4]
   2fc04:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2fc06:	6839      	ldr	r1, [r7, #0]
   2fc08:	687b      	ldr	r3, [r7, #4]
   2fc0a:	220e      	movs	r2, #14
   2fc0c:	0018      	movs	r0, r3
   2fc0e:	4b03      	ldr	r3, [pc, #12]	; (2fc1c <MQTTSerialize_disconnect+0x20>)
   2fc10:	4798      	blx	r3
   2fc12:	0003      	movs	r3, r0
}
   2fc14:	0018      	movs	r0, r3
   2fc16:	46bd      	mov	sp, r7
   2fc18:	b002      	add	sp, #8
   2fc1a:	bd80      	pop	{r7, pc}
   2fc1c:	0002fb6d 	.word	0x0002fb6d

0002fc20 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2fc20:	b580      	push	{r7, lr}
   2fc22:	b082      	sub	sp, #8
   2fc24:	af00      	add	r7, sp, #0
   2fc26:	6078      	str	r0, [r7, #4]
   2fc28:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2fc2a:	6839      	ldr	r1, [r7, #0]
   2fc2c:	687b      	ldr	r3, [r7, #4]
   2fc2e:	220c      	movs	r2, #12
   2fc30:	0018      	movs	r0, r3
   2fc32:	4b03      	ldr	r3, [pc, #12]	; (2fc40 <MQTTSerialize_pingreq+0x20>)
   2fc34:	4798      	blx	r3
   2fc36:	0003      	movs	r3, r0
}
   2fc38:	0018      	movs	r0, r3
   2fc3a:	46bd      	mov	sp, r7
   2fc3c:	b002      	add	sp, #8
   2fc3e:	bd80      	pop	{r7, pc}
   2fc40:	0002fb6d 	.word	0x0002fb6d

0002fc44 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2fc44:	b580      	push	{r7, lr}
   2fc46:	b08a      	sub	sp, #40	; 0x28
   2fc48:	af00      	add	r7, sp, #0
   2fc4a:	60f8      	str	r0, [r7, #12]
   2fc4c:	60b9      	str	r1, [r7, #8]
   2fc4e:	607a      	str	r2, [r7, #4]
   2fc50:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fc52:	2300      	movs	r3, #0
   2fc54:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fc58:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fc5a:	2300      	movs	r3, #0
   2fc5c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fc5e:	2300      	movs	r3, #0
   2fc60:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2fc62:	2300      	movs	r3, #0
   2fc64:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fc66:	2318      	movs	r3, #24
   2fc68:	18fb      	adds	r3, r7, r3
   2fc6a:	0018      	movs	r0, r3
   2fc6c:	4b32      	ldr	r3, [pc, #200]	; (2fd38 <MQTTDeserialize_publish+0xf4>)
   2fc6e:	4798      	blx	r3
   2fc70:	0003      	movs	r3, r0
   2fc72:	001a      	movs	r2, r3
   2fc74:	231c      	movs	r3, #28
   2fc76:	18fb      	adds	r3, r7, r3
   2fc78:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2fc7a:	231c      	movs	r3, #28
   2fc7c:	18fb      	adds	r3, r7, r3
   2fc7e:	781b      	ldrb	r3, [r3, #0]
   2fc80:	220f      	movs	r2, #15
   2fc82:	4393      	bics	r3, r2
   2fc84:	b2db      	uxtb	r3, r3
   2fc86:	2b30      	cmp	r3, #48	; 0x30
   2fc88:	d150      	bne.n	2fd2c <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2fc8a:	231c      	movs	r3, #28
   2fc8c:	18fb      	adds	r3, r7, r3
   2fc8e:	781b      	ldrb	r3, [r3, #0]
   2fc90:	071b      	lsls	r3, r3, #28
   2fc92:	0fdb      	lsrs	r3, r3, #31
   2fc94:	b2db      	uxtb	r3, r3
   2fc96:	001a      	movs	r2, r3
   2fc98:	68fb      	ldr	r3, [r7, #12]
   2fc9a:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2fc9c:	231c      	movs	r3, #28
   2fc9e:	18fb      	adds	r3, r7, r3
   2fca0:	781b      	ldrb	r3, [r3, #0]
   2fca2:	075b      	lsls	r3, r3, #29
   2fca4:	0f9b      	lsrs	r3, r3, #30
   2fca6:	b2db      	uxtb	r3, r3
   2fca8:	001a      	movs	r2, r3
   2fcaa:	68bb      	ldr	r3, [r7, #8]
   2fcac:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2fcae:	231c      	movs	r3, #28
   2fcb0:	18fb      	adds	r3, r7, r3
   2fcb2:	781b      	ldrb	r3, [r3, #0]
   2fcb4:	07db      	lsls	r3, r3, #31
   2fcb6:	0fdb      	lsrs	r3, r3, #31
   2fcb8:	b2db      	uxtb	r3, r3
   2fcba:	001a      	movs	r2, r3
   2fcbc:	687b      	ldr	r3, [r7, #4]
   2fcbe:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fcc0:	69bb      	ldr	r3, [r7, #24]
   2fcc2:	2214      	movs	r2, #20
   2fcc4:	18ba      	adds	r2, r7, r2
   2fcc6:	0011      	movs	r1, r2
   2fcc8:	0018      	movs	r0, r3
   2fcca:	4b1c      	ldr	r3, [pc, #112]	; (2fd3c <MQTTDeserialize_publish+0xf8>)
   2fccc:	4798      	blx	r3
   2fcce:	0003      	movs	r3, r0
   2fcd0:	627b      	str	r3, [r7, #36]	; 0x24
   2fcd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fcd4:	69bb      	ldr	r3, [r7, #24]
   2fcd6:	189b      	adds	r3, r3, r2
   2fcd8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fcda:	69bb      	ldr	r3, [r7, #24]
   2fcdc:	697a      	ldr	r2, [r7, #20]
   2fcde:	189b      	adds	r3, r3, r2
   2fce0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2fce2:	6a3a      	ldr	r2, [r7, #32]
   2fce4:	2318      	movs	r3, #24
   2fce6:	18f9      	adds	r1, r7, r3
   2fce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fcea:	0018      	movs	r0, r3
   2fcec:	4b14      	ldr	r3, [pc, #80]	; (2fd40 <MQTTDeserialize_publish+0xfc>)
   2fcee:	4798      	blx	r3
   2fcf0:	1e03      	subs	r3, r0, #0
   2fcf2:	d01c      	beq.n	2fd2e <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2fcf4:	6a3b      	ldr	r3, [r7, #32]
   2fcf6:	69ba      	ldr	r2, [r7, #24]
   2fcf8:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2fcfa:	d418      	bmi.n	2fd2e <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2fcfc:	68bb      	ldr	r3, [r7, #8]
   2fcfe:	681b      	ldr	r3, [r3, #0]
   2fd00:	2b00      	cmp	r3, #0
   2fd02:	dd08      	ble.n	2fd16 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2fd04:	2318      	movs	r3, #24
   2fd06:	18fb      	adds	r3, r7, r3
   2fd08:	0018      	movs	r0, r3
   2fd0a:	4b0e      	ldr	r3, [pc, #56]	; (2fd44 <MQTTDeserialize_publish+0x100>)
   2fd0c:	4798      	blx	r3
   2fd0e:	0003      	movs	r3, r0
   2fd10:	b29a      	uxth	r2, r3
   2fd12:	683b      	ldr	r3, [r7, #0]
   2fd14:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2fd16:	6a3b      	ldr	r3, [r7, #32]
   2fd18:	69ba      	ldr	r2, [r7, #24]
   2fd1a:	1a9a      	subs	r2, r3, r2
   2fd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fd1e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2fd20:	69ba      	ldr	r2, [r7, #24]
   2fd22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2fd24:	601a      	str	r2, [r3, #0]
	rc = 1;
   2fd26:	2301      	movs	r3, #1
   2fd28:	627b      	str	r3, [r7, #36]	; 0x24
   2fd2a:	e000      	b.n	2fd2e <MQTTDeserialize_publish+0xea>
		goto exit;
   2fd2c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fd30:	0018      	movs	r0, r3
   2fd32:	46bd      	mov	sp, r7
   2fd34:	b00a      	add	sp, #40	; 0x28
   2fd36:	bd80      	pop	{r7, pc}
   2fd38:	0002ffeb 	.word	0x0002ffeb
   2fd3c:	0002ff85 	.word	0x0002ff85
   2fd40:	00030169 	.word	0x00030169
   2fd44:	0002ffb9 	.word	0x0002ffb9

0002fd48 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2fd48:	b580      	push	{r7, lr}
   2fd4a:	b08a      	sub	sp, #40	; 0x28
   2fd4c:	af00      	add	r7, sp, #0
   2fd4e:	60f8      	str	r0, [r7, #12]
   2fd50:	60b9      	str	r1, [r7, #8]
   2fd52:	607a      	str	r2, [r7, #4]
   2fd54:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fd56:	2300      	movs	r3, #0
   2fd58:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fd5a:	683b      	ldr	r3, [r7, #0]
   2fd5c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fd5e:	2300      	movs	r3, #0
   2fd60:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fd62:	2300      	movs	r3, #0
   2fd64:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fd66:	2318      	movs	r3, #24
   2fd68:	18fb      	adds	r3, r7, r3
   2fd6a:	0018      	movs	r0, r3
   2fd6c:	4b20      	ldr	r3, [pc, #128]	; (2fdf0 <MQTTDeserialize_ack+0xa8>)
   2fd6e:	4798      	blx	r3
   2fd70:	0003      	movs	r3, r0
   2fd72:	001a      	movs	r2, r3
   2fd74:	231c      	movs	r3, #28
   2fd76:	18fb      	adds	r3, r7, r3
   2fd78:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2fd7a:	231c      	movs	r3, #28
   2fd7c:	18fb      	adds	r3, r7, r3
   2fd7e:	781b      	ldrb	r3, [r3, #0]
   2fd80:	071b      	lsls	r3, r3, #28
   2fd82:	0fdb      	lsrs	r3, r3, #31
   2fd84:	b2db      	uxtb	r3, r3
   2fd86:	001a      	movs	r2, r3
   2fd88:	68bb      	ldr	r3, [r7, #8]
   2fd8a:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2fd8c:	231c      	movs	r3, #28
   2fd8e:	18fb      	adds	r3, r7, r3
   2fd90:	781b      	ldrb	r3, [r3, #0]
   2fd92:	061b      	lsls	r3, r3, #24
   2fd94:	0f1b      	lsrs	r3, r3, #28
   2fd96:	b2db      	uxtb	r3, r3
   2fd98:	001a      	movs	r2, r3
   2fd9a:	68fb      	ldr	r3, [r7, #12]
   2fd9c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fd9e:	69bb      	ldr	r3, [r7, #24]
   2fda0:	2214      	movs	r2, #20
   2fda2:	18ba      	adds	r2, r7, r2
   2fda4:	0011      	movs	r1, r2
   2fda6:	0018      	movs	r0, r3
   2fda8:	4b12      	ldr	r3, [pc, #72]	; (2fdf4 <MQTTDeserialize_ack+0xac>)
   2fdaa:	4798      	blx	r3
   2fdac:	0003      	movs	r3, r0
   2fdae:	627b      	str	r3, [r7, #36]	; 0x24
   2fdb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fdb2:	69bb      	ldr	r3, [r7, #24]
   2fdb4:	189b      	adds	r3, r3, r2
   2fdb6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fdb8:	69bb      	ldr	r3, [r7, #24]
   2fdba:	697a      	ldr	r2, [r7, #20]
   2fdbc:	189b      	adds	r3, r3, r2
   2fdbe:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2fdc0:	6a3b      	ldr	r3, [r7, #32]
   2fdc2:	69ba      	ldr	r2, [r7, #24]
   2fdc4:	1a9b      	subs	r3, r3, r2
   2fdc6:	2b01      	cmp	r3, #1
   2fdc8:	dd0b      	ble.n	2fde2 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2fdca:	2318      	movs	r3, #24
   2fdcc:	18fb      	adds	r3, r7, r3
   2fdce:	0018      	movs	r0, r3
   2fdd0:	4b09      	ldr	r3, [pc, #36]	; (2fdf8 <MQTTDeserialize_ack+0xb0>)
   2fdd2:	4798      	blx	r3
   2fdd4:	0003      	movs	r3, r0
   2fdd6:	b29a      	uxth	r2, r3
   2fdd8:	687b      	ldr	r3, [r7, #4]
   2fdda:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2fddc:	2301      	movs	r3, #1
   2fdde:	627b      	str	r3, [r7, #36]	; 0x24
   2fde0:	e000      	b.n	2fde4 <MQTTDeserialize_ack+0x9c>
		goto exit;
   2fde2:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fde6:	0018      	movs	r0, r3
   2fde8:	46bd      	mov	sp, r7
   2fdea:	b00a      	add	sp, #40	; 0x28
   2fdec:	bd80      	pop	{r7, pc}
   2fdee:	46c0      	nop			; (mov r8, r8)
   2fdf0:	0002ffeb 	.word	0x0002ffeb
   2fdf4:	0002ff85 	.word	0x0002ff85
   2fdf8:	0002ffb9 	.word	0x0002ffb9

0002fdfc <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2fdfc:	b580      	push	{r7, lr}
   2fdfe:	b084      	sub	sp, #16
   2fe00:	af00      	add	r7, sp, #0
   2fe02:	6078      	str	r0, [r7, #4]
   2fe04:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2fe06:	2300      	movs	r3, #0
   2fe08:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2fe0a:	683b      	ldr	r3, [r7, #0]
   2fe0c:	4a17      	ldr	r2, [pc, #92]	; (2fe6c <MQTTPacket_encode+0x70>)
   2fe0e:	4013      	ands	r3, r2
   2fe10:	d504      	bpl.n	2fe1c <MQTTPacket_encode+0x20>
   2fe12:	3b01      	subs	r3, #1
   2fe14:	2280      	movs	r2, #128	; 0x80
   2fe16:	4252      	negs	r2, r2
   2fe18:	4313      	orrs	r3, r2
   2fe1a:	3301      	adds	r3, #1
   2fe1c:	001a      	movs	r2, r3
   2fe1e:	230b      	movs	r3, #11
   2fe20:	18fb      	adds	r3, r7, r3
   2fe22:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2fe24:	683b      	ldr	r3, [r7, #0]
   2fe26:	2b00      	cmp	r3, #0
   2fe28:	da00      	bge.n	2fe2c <MQTTPacket_encode+0x30>
   2fe2a:	337f      	adds	r3, #127	; 0x7f
   2fe2c:	11db      	asrs	r3, r3, #7
   2fe2e:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2fe30:	683b      	ldr	r3, [r7, #0]
   2fe32:	2b00      	cmp	r3, #0
   2fe34:	dd08      	ble.n	2fe48 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2fe36:	230b      	movs	r3, #11
   2fe38:	18fb      	adds	r3, r7, r3
   2fe3a:	220b      	movs	r2, #11
   2fe3c:	18ba      	adds	r2, r7, r2
   2fe3e:	7812      	ldrb	r2, [r2, #0]
   2fe40:	2180      	movs	r1, #128	; 0x80
   2fe42:	4249      	negs	r1, r1
   2fe44:	430a      	orrs	r2, r1
   2fe46:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2fe48:	68fb      	ldr	r3, [r7, #12]
   2fe4a:	1c5a      	adds	r2, r3, #1
   2fe4c:	60fa      	str	r2, [r7, #12]
   2fe4e:	001a      	movs	r2, r3
   2fe50:	687b      	ldr	r3, [r7, #4]
   2fe52:	189b      	adds	r3, r3, r2
   2fe54:	220b      	movs	r2, #11
   2fe56:	18ba      	adds	r2, r7, r2
   2fe58:	7812      	ldrb	r2, [r2, #0]
   2fe5a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2fe5c:	683b      	ldr	r3, [r7, #0]
   2fe5e:	2b00      	cmp	r3, #0
   2fe60:	dcd3      	bgt.n	2fe0a <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2fe62:	68fb      	ldr	r3, [r7, #12]
}
   2fe64:	0018      	movs	r0, r3
   2fe66:	46bd      	mov	sp, r7
   2fe68:	b004      	add	sp, #16
   2fe6a:	bd80      	pop	{r7, pc}
   2fe6c:	8000007f 	.word	0x8000007f

0002fe70 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   2fe70:	b580      	push	{r7, lr}
   2fe72:	b086      	sub	sp, #24
   2fe74:	af00      	add	r7, sp, #0
   2fe76:	6078      	str	r0, [r7, #4]
   2fe78:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   2fe7a:	2301      	movs	r3, #1
   2fe7c:	617b      	str	r3, [r7, #20]
	int len = 0;
   2fe7e:	2300      	movs	r3, #0
   2fe80:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   2fe82:	683b      	ldr	r3, [r7, #0]
   2fe84:	2200      	movs	r2, #0
   2fe86:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   2fe88:	2301      	movs	r3, #1
   2fe8a:	425b      	negs	r3, r3
   2fe8c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2fe8e:	693b      	ldr	r3, [r7, #16]
   2fe90:	3301      	adds	r3, #1
   2fe92:	613b      	str	r3, [r7, #16]
   2fe94:	693b      	ldr	r3, [r7, #16]
   2fe96:	2b04      	cmp	r3, #4
   2fe98:	dd03      	ble.n	2fea2 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   2fe9a:	2301      	movs	r3, #1
   2fe9c:	425b      	negs	r3, r3
   2fe9e:	60fb      	str	r3, [r7, #12]
			goto exit;
   2fea0:	e022      	b.n	2fee8 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   2fea2:	230b      	movs	r3, #11
   2fea4:	18fa      	adds	r2, r7, r3
   2fea6:	687b      	ldr	r3, [r7, #4]
   2fea8:	2101      	movs	r1, #1
   2feaa:	0010      	movs	r0, r2
   2feac:	4798      	blx	r3
   2feae:	0003      	movs	r3, r0
   2feb0:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   2feb2:	68fb      	ldr	r3, [r7, #12]
   2feb4:	2b01      	cmp	r3, #1
   2feb6:	d116      	bne.n	2fee6 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   2feb8:	683b      	ldr	r3, [r7, #0]
   2feba:	681a      	ldr	r2, [r3, #0]
   2febc:	230b      	movs	r3, #11
   2febe:	18fb      	adds	r3, r7, r3
   2fec0:	781b      	ldrb	r3, [r3, #0]
   2fec2:	0019      	movs	r1, r3
   2fec4:	237f      	movs	r3, #127	; 0x7f
   2fec6:	400b      	ands	r3, r1
   2fec8:	6979      	ldr	r1, [r7, #20]
   2feca:	434b      	muls	r3, r1
   2fecc:	18d2      	adds	r2, r2, r3
   2fece:	683b      	ldr	r3, [r7, #0]
   2fed0:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   2fed2:	697b      	ldr	r3, [r7, #20]
   2fed4:	01db      	lsls	r3, r3, #7
   2fed6:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   2fed8:	230b      	movs	r3, #11
   2feda:	18fb      	adds	r3, r7, r3
   2fedc:	781b      	ldrb	r3, [r3, #0]
   2fede:	b25b      	sxtb	r3, r3
   2fee0:	2b00      	cmp	r3, #0
   2fee2:	dbd1      	blt.n	2fe88 <MQTTPacket_decode+0x18>
   2fee4:	e000      	b.n	2fee8 <MQTTPacket_decode+0x78>
			goto exit;
   2fee6:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   2fee8:	693b      	ldr	r3, [r7, #16]
}
   2feea:	0018      	movs	r0, r3
   2feec:	46bd      	mov	sp, r7
   2feee:	b006      	add	sp, #24
   2fef0:	bd80      	pop	{r7, pc}
	...

0002fef4 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   2fef4:	b580      	push	{r7, lr}
   2fef6:	b082      	sub	sp, #8
   2fef8:	af00      	add	r7, sp, #0
   2fefa:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   2fefc:	687b      	ldr	r3, [r7, #4]
   2fefe:	3301      	adds	r3, #1
   2ff00:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   2ff02:	687b      	ldr	r3, [r7, #4]
   2ff04:	2b7f      	cmp	r3, #127	; 0x7f
   2ff06:	dc03      	bgt.n	2ff10 <MQTTPacket_len+0x1c>
		rem_len += 1;
   2ff08:	687b      	ldr	r3, [r7, #4]
   2ff0a:	3301      	adds	r3, #1
   2ff0c:	607b      	str	r3, [r7, #4]
   2ff0e:	e012      	b.n	2ff36 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   2ff10:	687b      	ldr	r3, [r7, #4]
   2ff12:	4a0b      	ldr	r2, [pc, #44]	; (2ff40 <MQTTPacket_len+0x4c>)
   2ff14:	4293      	cmp	r3, r2
   2ff16:	dc03      	bgt.n	2ff20 <MQTTPacket_len+0x2c>
		rem_len += 2;
   2ff18:	687b      	ldr	r3, [r7, #4]
   2ff1a:	3302      	adds	r3, #2
   2ff1c:	607b      	str	r3, [r7, #4]
   2ff1e:	e00a      	b.n	2ff36 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   2ff20:	687b      	ldr	r3, [r7, #4]
   2ff22:	4a08      	ldr	r2, [pc, #32]	; (2ff44 <MQTTPacket_len+0x50>)
   2ff24:	4293      	cmp	r3, r2
   2ff26:	dc03      	bgt.n	2ff30 <MQTTPacket_len+0x3c>
		rem_len += 3;
   2ff28:	687b      	ldr	r3, [r7, #4]
   2ff2a:	3303      	adds	r3, #3
   2ff2c:	607b      	str	r3, [r7, #4]
   2ff2e:	e002      	b.n	2ff36 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   2ff30:	687b      	ldr	r3, [r7, #4]
   2ff32:	3304      	adds	r3, #4
   2ff34:	607b      	str	r3, [r7, #4]
	return rem_len;
   2ff36:	687b      	ldr	r3, [r7, #4]
}
   2ff38:	0018      	movs	r0, r3
   2ff3a:	46bd      	mov	sp, r7
   2ff3c:	b002      	add	sp, #8
   2ff3e:	bd80      	pop	{r7, pc}
   2ff40:	00003fff 	.word	0x00003fff
   2ff44:	001ffffe 	.word	0x001ffffe

0002ff48 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   2ff48:	b580      	push	{r7, lr}
   2ff4a:	b084      	sub	sp, #16
   2ff4c:	af00      	add	r7, sp, #0
   2ff4e:	6078      	str	r0, [r7, #4]
   2ff50:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   2ff52:	2300      	movs	r3, #0
   2ff54:	60fb      	str	r3, [r7, #12]
   2ff56:	e00a      	b.n	2ff6e <bufchar+0x26>
		*c = *bufptr++;
   2ff58:	4b09      	ldr	r3, [pc, #36]	; (2ff80 <bufchar+0x38>)
   2ff5a:	681b      	ldr	r3, [r3, #0]
   2ff5c:	1c59      	adds	r1, r3, #1
   2ff5e:	4a08      	ldr	r2, [pc, #32]	; (2ff80 <bufchar+0x38>)
   2ff60:	6011      	str	r1, [r2, #0]
   2ff62:	781a      	ldrb	r2, [r3, #0]
   2ff64:	687b      	ldr	r3, [r7, #4]
   2ff66:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   2ff68:	68fb      	ldr	r3, [r7, #12]
   2ff6a:	3301      	adds	r3, #1
   2ff6c:	60fb      	str	r3, [r7, #12]
   2ff6e:	68fa      	ldr	r2, [r7, #12]
   2ff70:	683b      	ldr	r3, [r7, #0]
   2ff72:	429a      	cmp	r2, r3
   2ff74:	dbf0      	blt.n	2ff58 <bufchar+0x10>
	return count;
   2ff76:	683b      	ldr	r3, [r7, #0]
}
   2ff78:	0018      	movs	r0, r3
   2ff7a:	46bd      	mov	sp, r7
   2ff7c:	b004      	add	sp, #16
   2ff7e:	bd80      	pop	{r7, pc}
   2ff80:	20004594 	.word	0x20004594

0002ff84 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   2ff84:	b580      	push	{r7, lr}
   2ff86:	b082      	sub	sp, #8
   2ff88:	af00      	add	r7, sp, #0
   2ff8a:	6078      	str	r0, [r7, #4]
   2ff8c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   2ff8e:	4b07      	ldr	r3, [pc, #28]	; (2ffac <MQTTPacket_decodeBuf+0x28>)
   2ff90:	687a      	ldr	r2, [r7, #4]
   2ff92:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2ff94:	683a      	ldr	r2, [r7, #0]
   2ff96:	4b06      	ldr	r3, [pc, #24]	; (2ffb0 <MQTTPacket_decodeBuf+0x2c>)
   2ff98:	0011      	movs	r1, r2
   2ff9a:	0018      	movs	r0, r3
   2ff9c:	4b05      	ldr	r3, [pc, #20]	; (2ffb4 <MQTTPacket_decodeBuf+0x30>)
   2ff9e:	4798      	blx	r3
   2ffa0:	0003      	movs	r3, r0
}
   2ffa2:	0018      	movs	r0, r3
   2ffa4:	46bd      	mov	sp, r7
   2ffa6:	b002      	add	sp, #8
   2ffa8:	bd80      	pop	{r7, pc}
   2ffaa:	46c0      	nop			; (mov r8, r8)
   2ffac:	20004594 	.word	0x20004594
   2ffb0:	0002ff49 	.word	0x0002ff49
   2ffb4:	0002fe71 	.word	0x0002fe71

0002ffb8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   2ffb8:	b580      	push	{r7, lr}
   2ffba:	b084      	sub	sp, #16
   2ffbc:	af00      	add	r7, sp, #0
   2ffbe:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   2ffc0:	687b      	ldr	r3, [r7, #4]
   2ffc2:	681b      	ldr	r3, [r3, #0]
   2ffc4:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   2ffc6:	68fb      	ldr	r3, [r7, #12]
   2ffc8:	781b      	ldrb	r3, [r3, #0]
   2ffca:	021b      	lsls	r3, r3, #8
   2ffcc:	68fa      	ldr	r2, [r7, #12]
   2ffce:	3201      	adds	r2, #1
   2ffd0:	7812      	ldrb	r2, [r2, #0]
   2ffd2:	189b      	adds	r3, r3, r2
   2ffd4:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   2ffd6:	687b      	ldr	r3, [r7, #4]
   2ffd8:	681b      	ldr	r3, [r3, #0]
   2ffda:	1c9a      	adds	r2, r3, #2
   2ffdc:	687b      	ldr	r3, [r7, #4]
   2ffde:	601a      	str	r2, [r3, #0]
	return len;
   2ffe0:	68bb      	ldr	r3, [r7, #8]
}
   2ffe2:	0018      	movs	r0, r3
   2ffe4:	46bd      	mov	sp, r7
   2ffe6:	b004      	add	sp, #16
   2ffe8:	bd80      	pop	{r7, pc}

0002ffea <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   2ffea:	b580      	push	{r7, lr}
   2ffec:	b084      	sub	sp, #16
   2ffee:	af00      	add	r7, sp, #0
   2fff0:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   2fff2:	687b      	ldr	r3, [r7, #4]
   2fff4:	681a      	ldr	r2, [r3, #0]
   2fff6:	230f      	movs	r3, #15
   2fff8:	18fb      	adds	r3, r7, r3
   2fffa:	7812      	ldrb	r2, [r2, #0]
   2fffc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2fffe:	687b      	ldr	r3, [r7, #4]
   30000:	681b      	ldr	r3, [r3, #0]
   30002:	1c5a      	adds	r2, r3, #1
   30004:	687b      	ldr	r3, [r7, #4]
   30006:	601a      	str	r2, [r3, #0]
	return c;
   30008:	230f      	movs	r3, #15
   3000a:	18fb      	adds	r3, r7, r3
   3000c:	781b      	ldrb	r3, [r3, #0]
}
   3000e:	0018      	movs	r0, r3
   30010:	46bd      	mov	sp, r7
   30012:	b004      	add	sp, #16
   30014:	bd80      	pop	{r7, pc}

00030016 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   30016:	b580      	push	{r7, lr}
   30018:	b082      	sub	sp, #8
   3001a:	af00      	add	r7, sp, #0
   3001c:	6078      	str	r0, [r7, #4]
   3001e:	000a      	movs	r2, r1
   30020:	1cfb      	adds	r3, r7, #3
   30022:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   30024:	687b      	ldr	r3, [r7, #4]
   30026:	681b      	ldr	r3, [r3, #0]
   30028:	1cfa      	adds	r2, r7, #3
   3002a:	7812      	ldrb	r2, [r2, #0]
   3002c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   3002e:	687b      	ldr	r3, [r7, #4]
   30030:	681b      	ldr	r3, [r3, #0]
   30032:	1c5a      	adds	r2, r3, #1
   30034:	687b      	ldr	r3, [r7, #4]
   30036:	601a      	str	r2, [r3, #0]
}
   30038:	46c0      	nop			; (mov r8, r8)
   3003a:	46bd      	mov	sp, r7
   3003c:	b002      	add	sp, #8
   3003e:	bd80      	pop	{r7, pc}

00030040 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   30040:	b580      	push	{r7, lr}
   30042:	b082      	sub	sp, #8
   30044:	af00      	add	r7, sp, #0
   30046:	6078      	str	r0, [r7, #4]
   30048:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   3004a:	687b      	ldr	r3, [r7, #4]
   3004c:	681a      	ldr	r2, [r3, #0]
   3004e:	683b      	ldr	r3, [r7, #0]
   30050:	2b00      	cmp	r3, #0
   30052:	da00      	bge.n	30056 <writeInt+0x16>
   30054:	33ff      	adds	r3, #255	; 0xff
   30056:	121b      	asrs	r3, r3, #8
   30058:	b2db      	uxtb	r3, r3
   3005a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   3005c:	687b      	ldr	r3, [r7, #4]
   3005e:	681b      	ldr	r3, [r3, #0]
   30060:	1c5a      	adds	r2, r3, #1
   30062:	687b      	ldr	r3, [r7, #4]
   30064:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   30066:	687b      	ldr	r3, [r7, #4]
   30068:	681a      	ldr	r2, [r3, #0]
   3006a:	683b      	ldr	r3, [r7, #0]
   3006c:	4908      	ldr	r1, [pc, #32]	; (30090 <writeInt+0x50>)
   3006e:	400b      	ands	r3, r1
   30070:	d503      	bpl.n	3007a <writeInt+0x3a>
   30072:	3b01      	subs	r3, #1
   30074:	4907      	ldr	r1, [pc, #28]	; (30094 <writeInt+0x54>)
   30076:	430b      	orrs	r3, r1
   30078:	3301      	adds	r3, #1
   3007a:	b2db      	uxtb	r3, r3
   3007c:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   3007e:	687b      	ldr	r3, [r7, #4]
   30080:	681b      	ldr	r3, [r3, #0]
   30082:	1c5a      	adds	r2, r3, #1
   30084:	687b      	ldr	r3, [r7, #4]
   30086:	601a      	str	r2, [r3, #0]
}
   30088:	46c0      	nop			; (mov r8, r8)
   3008a:	46bd      	mov	sp, r7
   3008c:	b002      	add	sp, #8
   3008e:	bd80      	pop	{r7, pc}
   30090:	800000ff 	.word	0x800000ff
   30094:	ffffff00 	.word	0xffffff00

00030098 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   30098:	b580      	push	{r7, lr}
   3009a:	b084      	sub	sp, #16
   3009c:	af00      	add	r7, sp, #0
   3009e:	6078      	str	r0, [r7, #4]
   300a0:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   300a2:	683b      	ldr	r3, [r7, #0]
   300a4:	0018      	movs	r0, r3
   300a6:	4b0d      	ldr	r3, [pc, #52]	; (300dc <writeCString+0x44>)
   300a8:	4798      	blx	r3
   300aa:	0003      	movs	r3, r0
   300ac:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   300ae:	68fa      	ldr	r2, [r7, #12]
   300b0:	687b      	ldr	r3, [r7, #4]
   300b2:	0011      	movs	r1, r2
   300b4:	0018      	movs	r0, r3
   300b6:	4b0a      	ldr	r3, [pc, #40]	; (300e0 <writeCString+0x48>)
   300b8:	4798      	blx	r3
	memcpy(*pptr, string, len);
   300ba:	687b      	ldr	r3, [r7, #4]
   300bc:	681b      	ldr	r3, [r3, #0]
   300be:	68fa      	ldr	r2, [r7, #12]
   300c0:	6839      	ldr	r1, [r7, #0]
   300c2:	0018      	movs	r0, r3
   300c4:	4b07      	ldr	r3, [pc, #28]	; (300e4 <writeCString+0x4c>)
   300c6:	4798      	blx	r3
	*pptr += len;
   300c8:	687b      	ldr	r3, [r7, #4]
   300ca:	681a      	ldr	r2, [r3, #0]
   300cc:	68fb      	ldr	r3, [r7, #12]
   300ce:	18d2      	adds	r2, r2, r3
   300d0:	687b      	ldr	r3, [r7, #4]
   300d2:	601a      	str	r2, [r3, #0]
}
   300d4:	46c0      	nop			; (mov r8, r8)
   300d6:	46bd      	mov	sp, r7
   300d8:	b004      	add	sp, #16
   300da:	bd80      	pop	{r7, pc}
   300dc:	00034a97 	.word	0x00034a97
   300e0:	00030041 	.word	0x00030041
   300e4:	000346a9 	.word	0x000346a9

000300e8 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   300e8:	b580      	push	{r7, lr}
   300ea:	b084      	sub	sp, #16
   300ec:	af00      	add	r7, sp, #0
   300ee:	60f8      	str	r0, [r7, #12]
   300f0:	0038      	movs	r0, r7
   300f2:	6001      	str	r1, [r0, #0]
   300f4:	6042      	str	r2, [r0, #4]
   300f6:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   300f8:	003b      	movs	r3, r7
   300fa:	685b      	ldr	r3, [r3, #4]
   300fc:	2b00      	cmp	r3, #0
   300fe:	dd17      	ble.n	30130 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   30100:	003b      	movs	r3, r7
   30102:	685a      	ldr	r2, [r3, #4]
   30104:	68fb      	ldr	r3, [r7, #12]
   30106:	0011      	movs	r1, r2
   30108:	0018      	movs	r0, r3
   3010a:	4b14      	ldr	r3, [pc, #80]	; (3015c <writeMQTTString+0x74>)
   3010c:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   3010e:	68fb      	ldr	r3, [r7, #12]
   30110:	6818      	ldr	r0, [r3, #0]
   30112:	003b      	movs	r3, r7
   30114:	6899      	ldr	r1, [r3, #8]
   30116:	003b      	movs	r3, r7
   30118:	685b      	ldr	r3, [r3, #4]
   3011a:	001a      	movs	r2, r3
   3011c:	4b10      	ldr	r3, [pc, #64]	; (30160 <writeMQTTString+0x78>)
   3011e:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   30120:	68fb      	ldr	r3, [r7, #12]
   30122:	681a      	ldr	r2, [r3, #0]
   30124:	003b      	movs	r3, r7
   30126:	685b      	ldr	r3, [r3, #4]
   30128:	18d2      	adds	r2, r2, r3
   3012a:	68fb      	ldr	r3, [r7, #12]
   3012c:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   3012e:	e010      	b.n	30152 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   30130:	003b      	movs	r3, r7
   30132:	681b      	ldr	r3, [r3, #0]
   30134:	2b00      	cmp	r3, #0
   30136:	d007      	beq.n	30148 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   30138:	003b      	movs	r3, r7
   3013a:	681a      	ldr	r2, [r3, #0]
   3013c:	68fb      	ldr	r3, [r7, #12]
   3013e:	0011      	movs	r1, r2
   30140:	0018      	movs	r0, r3
   30142:	4b08      	ldr	r3, [pc, #32]	; (30164 <writeMQTTString+0x7c>)
   30144:	4798      	blx	r3
}
   30146:	e004      	b.n	30152 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   30148:	68fb      	ldr	r3, [r7, #12]
   3014a:	2100      	movs	r1, #0
   3014c:	0018      	movs	r0, r3
   3014e:	4b03      	ldr	r3, [pc, #12]	; (3015c <writeMQTTString+0x74>)
   30150:	4798      	blx	r3
}
   30152:	46c0      	nop			; (mov r8, r8)
   30154:	46bd      	mov	sp, r7
   30156:	b004      	add	sp, #16
   30158:	bd80      	pop	{r7, pc}
   3015a:	46c0      	nop			; (mov r8, r8)
   3015c:	00030041 	.word	0x00030041
   30160:	000346a9 	.word	0x000346a9
   30164:	00030099 	.word	0x00030099

00030168 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   30168:	b580      	push	{r7, lr}
   3016a:	b086      	sub	sp, #24
   3016c:	af00      	add	r7, sp, #0
   3016e:	60f8      	str	r0, [r7, #12]
   30170:	60b9      	str	r1, [r7, #8]
   30172:	607a      	str	r2, [r7, #4]
	int rc = 0;
   30174:	2300      	movs	r3, #0
   30176:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   30178:	687a      	ldr	r2, [r7, #4]
   3017a:	68bb      	ldr	r3, [r7, #8]
   3017c:	681b      	ldr	r3, [r3, #0]
   3017e:	1ad3      	subs	r3, r2, r3
   30180:	2b01      	cmp	r3, #1
   30182:	dd1b      	ble.n	301bc <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   30184:	68bb      	ldr	r3, [r7, #8]
   30186:	0018      	movs	r0, r3
   30188:	4b10      	ldr	r3, [pc, #64]	; (301cc <readMQTTLenString+0x64>)
   3018a:	4798      	blx	r3
   3018c:	0002      	movs	r2, r0
   3018e:	68fb      	ldr	r3, [r7, #12]
   30190:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   30192:	68bb      	ldr	r3, [r7, #8]
   30194:	681a      	ldr	r2, [r3, #0]
   30196:	68fb      	ldr	r3, [r7, #12]
   30198:	685b      	ldr	r3, [r3, #4]
   3019a:	18d2      	adds	r2, r2, r3
   3019c:	687b      	ldr	r3, [r7, #4]
   3019e:	429a      	cmp	r2, r3
   301a0:	d80c      	bhi.n	301bc <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   301a2:	68bb      	ldr	r3, [r7, #8]
   301a4:	681a      	ldr	r2, [r3, #0]
   301a6:	68fb      	ldr	r3, [r7, #12]
   301a8:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   301aa:	68bb      	ldr	r3, [r7, #8]
   301ac:	681a      	ldr	r2, [r3, #0]
   301ae:	68fb      	ldr	r3, [r7, #12]
   301b0:	685b      	ldr	r3, [r3, #4]
   301b2:	18d2      	adds	r2, r2, r3
   301b4:	68bb      	ldr	r3, [r7, #8]
   301b6:	601a      	str	r2, [r3, #0]
			rc = 1;
   301b8:	2301      	movs	r3, #1
   301ba:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   301bc:	68fb      	ldr	r3, [r7, #12]
   301be:	2200      	movs	r2, #0
   301c0:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   301c2:	697b      	ldr	r3, [r7, #20]
}
   301c4:	0018      	movs	r0, r3
   301c6:	46bd      	mov	sp, r7
   301c8:	b006      	add	sp, #24
   301ca:	bd80      	pop	{r7, pc}
   301cc:	0002ffb9 	.word	0x0002ffb9

000301d0 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   301d0:	b580      	push	{r7, lr}
   301d2:	b086      	sub	sp, #24
   301d4:	af00      	add	r7, sp, #0
   301d6:	1d3b      	adds	r3, r7, #4
   301d8:	6018      	str	r0, [r3, #0]
   301da:	6059      	str	r1, [r3, #4]
   301dc:	609a      	str	r2, [r3, #8]
	int rc = 0;
   301de:	2300      	movs	r3, #0
   301e0:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   301e2:	1d3b      	adds	r3, r7, #4
   301e4:	681b      	ldr	r3, [r3, #0]
   301e6:	2b00      	cmp	r3, #0
   301e8:	d007      	beq.n	301fa <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   301ea:	1d3b      	adds	r3, r7, #4
   301ec:	681b      	ldr	r3, [r3, #0]
   301ee:	0018      	movs	r0, r3
   301f0:	4b06      	ldr	r3, [pc, #24]	; (3020c <MQTTstrlen+0x3c>)
   301f2:	4798      	blx	r3
   301f4:	0003      	movs	r3, r0
   301f6:	617b      	str	r3, [r7, #20]
   301f8:	e002      	b.n	30200 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   301fa:	1d3b      	adds	r3, r7, #4
   301fc:	685b      	ldr	r3, [r3, #4]
   301fe:	617b      	str	r3, [r7, #20]
	return rc;
   30200:	697b      	ldr	r3, [r7, #20]
}
   30202:	0018      	movs	r0, r3
   30204:	46bd      	mov	sp, r7
   30206:	b006      	add	sp, #24
   30208:	bd80      	pop	{r7, pc}
   3020a:	46c0      	nop			; (mov r8, r8)
   3020c:	00034a97 	.word	0x00034a97

00030210 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   30210:	b580      	push	{r7, lr}
   30212:	b086      	sub	sp, #24
   30214:	af00      	add	r7, sp, #0
   30216:	6078      	str	r0, [r7, #4]
   30218:	6039      	str	r1, [r7, #0]
	int alen = 0,
   3021a:	2300      	movs	r3, #0
   3021c:	617b      	str	r3, [r7, #20]
		blen = 0;
   3021e:	2300      	movs	r3, #0
   30220:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   30222:	687b      	ldr	r3, [r7, #4]
   30224:	681b      	ldr	r3, [r3, #0]
   30226:	2b00      	cmp	r3, #0
   30228:	d00a      	beq.n	30240 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   3022a:	687b      	ldr	r3, [r7, #4]
   3022c:	681b      	ldr	r3, [r3, #0]
   3022e:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   30230:	687b      	ldr	r3, [r7, #4]
   30232:	681b      	ldr	r3, [r3, #0]
   30234:	0018      	movs	r0, r3
   30236:	4b12      	ldr	r3, [pc, #72]	; (30280 <MQTTPacket_equals+0x70>)
   30238:	4798      	blx	r3
   3023a:	0003      	movs	r3, r0
   3023c:	617b      	str	r3, [r7, #20]
   3023e:	e005      	b.n	3024c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   30240:	687b      	ldr	r3, [r7, #4]
   30242:	689b      	ldr	r3, [r3, #8]
   30244:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   30246:	687b      	ldr	r3, [r7, #4]
   30248:	685b      	ldr	r3, [r3, #4]
   3024a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   3024c:	683b      	ldr	r3, [r7, #0]
   3024e:	0018      	movs	r0, r3
   30250:	4b0b      	ldr	r3, [pc, #44]	; (30280 <MQTTPacket_equals+0x70>)
   30252:	4798      	blx	r3
   30254:	0003      	movs	r3, r0
   30256:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   30258:	697a      	ldr	r2, [r7, #20]
   3025a:	68fb      	ldr	r3, [r7, #12]
   3025c:	429a      	cmp	r2, r3
   3025e:	d109      	bne.n	30274 <MQTTPacket_equals+0x64>
   30260:	697a      	ldr	r2, [r7, #20]
   30262:	6839      	ldr	r1, [r7, #0]
   30264:	693b      	ldr	r3, [r7, #16]
   30266:	0018      	movs	r0, r3
   30268:	4b06      	ldr	r3, [pc, #24]	; (30284 <MQTTPacket_equals+0x74>)
   3026a:	4798      	blx	r3
   3026c:	1e03      	subs	r3, r0, #0
   3026e:	d101      	bne.n	30274 <MQTTPacket_equals+0x64>
   30270:	2301      	movs	r3, #1
   30272:	e000      	b.n	30276 <MQTTPacket_equals+0x66>
   30274:	2300      	movs	r3, #0
}
   30276:	0018      	movs	r0, r3
   30278:	46bd      	mov	sp, r7
   3027a:	b006      	add	sp, #24
   3027c:	bd80      	pop	{r7, pc}
   3027e:	46c0      	nop			; (mov r8, r8)
   30280:	00034a97 	.word	0x00034a97
   30284:	00034aa5 	.word	0x00034aa5

00030288 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   30288:	b580      	push	{r7, lr}
   3028a:	b086      	sub	sp, #24
   3028c:	af00      	add	r7, sp, #0
   3028e:	60f8      	str	r0, [r7, #12]
   30290:	0038      	movs	r0, r7
   30292:	6001      	str	r1, [r0, #0]
   30294:	6042      	str	r2, [r0, #4]
   30296:	6083      	str	r3, [r0, #8]
	int len = 0;
   30298:	2300      	movs	r3, #0
   3029a:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   3029c:	003b      	movs	r3, r7
   3029e:	6818      	ldr	r0, [r3, #0]
   302a0:	6859      	ldr	r1, [r3, #4]
   302a2:	689a      	ldr	r2, [r3, #8]
   302a4:	4b09      	ldr	r3, [pc, #36]	; (302cc <MQTTSerialize_publishLength+0x44>)
   302a6:	4798      	blx	r3
   302a8:	0003      	movs	r3, r0
   302aa:	1c9a      	adds	r2, r3, #2
   302ac:	6a3b      	ldr	r3, [r7, #32]
   302ae:	18d3      	adds	r3, r2, r3
   302b0:	697a      	ldr	r2, [r7, #20]
   302b2:	18d3      	adds	r3, r2, r3
   302b4:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   302b6:	68fb      	ldr	r3, [r7, #12]
   302b8:	2b00      	cmp	r3, #0
   302ba:	dd02      	ble.n	302c2 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   302bc:	697b      	ldr	r3, [r7, #20]
   302be:	3302      	adds	r3, #2
   302c0:	617b      	str	r3, [r7, #20]
	return len;
   302c2:	697b      	ldr	r3, [r7, #20]
}
   302c4:	0018      	movs	r0, r3
   302c6:	46bd      	mov	sp, r7
   302c8:	b006      	add	sp, #24
   302ca:	bd80      	pop	{r7, pc}
   302cc:	000301d1 	.word	0x000301d1

000302d0 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   302d0:	b590      	push	{r4, r7, lr}
   302d2:	b08b      	sub	sp, #44	; 0x2c
   302d4:	af02      	add	r7, sp, #8
   302d6:	60f8      	str	r0, [r7, #12]
   302d8:	60b9      	str	r1, [r7, #8]
   302da:	603b      	str	r3, [r7, #0]
   302dc:	1dfb      	adds	r3, r7, #7
   302de:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   302e0:	68fb      	ldr	r3, [r7, #12]
   302e2:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   302e4:	2300      	movs	r3, #0
   302e6:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   302e8:	2300      	movs	r3, #0
   302ea:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   302ec:	2300      	movs	r3, #0
   302ee:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   302f0:	2308      	movs	r3, #8
   302f2:	2230      	movs	r2, #48	; 0x30
   302f4:	4694      	mov	ip, r2
   302f6:	44bc      	add	ip, r7
   302f8:	4463      	add	r3, ip
   302fa:	6838      	ldr	r0, [r7, #0]
   302fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
   302fe:	9200      	str	r2, [sp, #0]
   30300:	6819      	ldr	r1, [r3, #0]
   30302:	685a      	ldr	r2, [r3, #4]
   30304:	689b      	ldr	r3, [r3, #8]
   30306:	4c46      	ldr	r4, [pc, #280]	; (30420 <MQTTSerialize_publish+0x150>)
   30308:	47a0      	blx	r4
   3030a:	0003      	movs	r3, r0
   3030c:	61bb      	str	r3, [r7, #24]
   3030e:	69bb      	ldr	r3, [r7, #24]
   30310:	0018      	movs	r0, r3
   30312:	4b44      	ldr	r3, [pc, #272]	; (30424 <MQTTSerialize_publish+0x154>)
   30314:	4798      	blx	r3
   30316:	0002      	movs	r2, r0
   30318:	68bb      	ldr	r3, [r7, #8]
   3031a:	429a      	cmp	r2, r3
   3031c:	dd03      	ble.n	30326 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3031e:	2302      	movs	r3, #2
   30320:	425b      	negs	r3, r3
   30322:	61fb      	str	r3, [r7, #28]
		goto exit;
   30324:	e077      	b.n	30416 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   30326:	2310      	movs	r3, #16
   30328:	18fb      	adds	r3, r7, r3
   3032a:	781a      	ldrb	r2, [r3, #0]
   3032c:	210f      	movs	r1, #15
   3032e:	400a      	ands	r2, r1
   30330:	1c11      	adds	r1, r2, #0
   30332:	2230      	movs	r2, #48	; 0x30
   30334:	430a      	orrs	r2, r1
   30336:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30338:	1dfb      	adds	r3, r7, #7
   3033a:	781b      	ldrb	r3, [r3, #0]
   3033c:	2201      	movs	r2, #1
   3033e:	4013      	ands	r3, r2
   30340:	b2da      	uxtb	r2, r3
   30342:	2310      	movs	r3, #16
   30344:	18fb      	adds	r3, r7, r3
   30346:	2101      	movs	r1, #1
   30348:	400a      	ands	r2, r1
   3034a:	00d0      	lsls	r0, r2, #3
   3034c:	781a      	ldrb	r2, [r3, #0]
   3034e:	2108      	movs	r1, #8
   30350:	438a      	bics	r2, r1
   30352:	1c11      	adds	r1, r2, #0
   30354:	1c02      	adds	r2, r0, #0
   30356:	430a      	orrs	r2, r1
   30358:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   3035a:	683b      	ldr	r3, [r7, #0]
   3035c:	b2db      	uxtb	r3, r3
   3035e:	1c1a      	adds	r2, r3, #0
   30360:	2303      	movs	r3, #3
   30362:	4013      	ands	r3, r2
   30364:	b2da      	uxtb	r2, r3
   30366:	2310      	movs	r3, #16
   30368:	18fb      	adds	r3, r7, r3
   3036a:	2103      	movs	r1, #3
   3036c:	400a      	ands	r2, r1
   3036e:	1890      	adds	r0, r2, r2
   30370:	781a      	ldrb	r2, [r3, #0]
   30372:	2106      	movs	r1, #6
   30374:	438a      	bics	r2, r1
   30376:	1c11      	adds	r1, r2, #0
   30378:	1c02      	adds	r2, r0, #0
   3037a:	430a      	orrs	r2, r1
   3037c:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   3037e:	2330      	movs	r3, #48	; 0x30
   30380:	18fb      	adds	r3, r7, r3
   30382:	781b      	ldrb	r3, [r3, #0]
   30384:	2201      	movs	r2, #1
   30386:	4013      	ands	r3, r2
   30388:	b2da      	uxtb	r2, r3
   3038a:	2310      	movs	r3, #16
   3038c:	18fb      	adds	r3, r7, r3
   3038e:	2101      	movs	r1, #1
   30390:	400a      	ands	r2, r1
   30392:	0010      	movs	r0, r2
   30394:	781a      	ldrb	r2, [r3, #0]
   30396:	2101      	movs	r1, #1
   30398:	438a      	bics	r2, r1
   3039a:	1c11      	adds	r1, r2, #0
   3039c:	1c02      	adds	r2, r0, #0
   3039e:	430a      	orrs	r2, r1
   303a0:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   303a2:	2310      	movs	r3, #16
   303a4:	18fb      	adds	r3, r7, r3
   303a6:	781a      	ldrb	r2, [r3, #0]
   303a8:	2314      	movs	r3, #20
   303aa:	18fb      	adds	r3, r7, r3
   303ac:	0011      	movs	r1, r2
   303ae:	0018      	movs	r0, r3
   303b0:	4b1d      	ldr	r3, [pc, #116]	; (30428 <MQTTSerialize_publish+0x158>)
   303b2:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   303b4:	697b      	ldr	r3, [r7, #20]
   303b6:	69ba      	ldr	r2, [r7, #24]
   303b8:	0011      	movs	r1, r2
   303ba:	0018      	movs	r0, r3
   303bc:	4b1b      	ldr	r3, [pc, #108]	; (3042c <MQTTSerialize_publish+0x15c>)
   303be:	4798      	blx	r3
   303c0:	0002      	movs	r2, r0
   303c2:	697b      	ldr	r3, [r7, #20]
   303c4:	189b      	adds	r3, r3, r2
   303c6:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   303c8:	2308      	movs	r3, #8
   303ca:	2230      	movs	r2, #48	; 0x30
   303cc:	4694      	mov	ip, r2
   303ce:	44bc      	add	ip, r7
   303d0:	4463      	add	r3, ip
   303d2:	2214      	movs	r2, #20
   303d4:	18b8      	adds	r0, r7, r2
   303d6:	6819      	ldr	r1, [r3, #0]
   303d8:	685a      	ldr	r2, [r3, #4]
   303da:	689b      	ldr	r3, [r3, #8]
   303dc:	4c14      	ldr	r4, [pc, #80]	; (30430 <MQTTSerialize_publish+0x160>)
   303de:	47a0      	blx	r4

	if (qos > 0)
   303e0:	683b      	ldr	r3, [r7, #0]
   303e2:	2b00      	cmp	r3, #0
   303e4:	dd08      	ble.n	303f8 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   303e6:	2334      	movs	r3, #52	; 0x34
   303e8:	18fb      	adds	r3, r7, r3
   303ea:	881a      	ldrh	r2, [r3, #0]
   303ec:	2314      	movs	r3, #20
   303ee:	18fb      	adds	r3, r7, r3
   303f0:	0011      	movs	r1, r2
   303f2:	0018      	movs	r0, r3
   303f4:	4b0f      	ldr	r3, [pc, #60]	; (30434 <MQTTSerialize_publish+0x164>)
   303f6:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   303f8:	697b      	ldr	r3, [r7, #20]
   303fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
   303fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
   303fe:	0018      	movs	r0, r3
   30400:	4b0d      	ldr	r3, [pc, #52]	; (30438 <MQTTSerialize_publish+0x168>)
   30402:	4798      	blx	r3
	ptr += payloadlen;
   30404:	697a      	ldr	r2, [r7, #20]
   30406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30408:	18d3      	adds	r3, r2, r3
   3040a:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   3040c:	697b      	ldr	r3, [r7, #20]
   3040e:	001a      	movs	r2, r3
   30410:	68fb      	ldr	r3, [r7, #12]
   30412:	1ad3      	subs	r3, r2, r3
   30414:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30416:	69fb      	ldr	r3, [r7, #28]
}
   30418:	0018      	movs	r0, r3
   3041a:	46bd      	mov	sp, r7
   3041c:	b009      	add	sp, #36	; 0x24
   3041e:	bd90      	pop	{r4, r7, pc}
   30420:	00030289 	.word	0x00030289
   30424:	0002fef5 	.word	0x0002fef5
   30428:	00030017 	.word	0x00030017
   3042c:	0002fdfd 	.word	0x0002fdfd
   30430:	000300e9 	.word	0x000300e9
   30434:	00030041 	.word	0x00030041
   30438:	000346a9 	.word	0x000346a9

0003043c <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   3043c:	b580      	push	{r7, lr}
   3043e:	b088      	sub	sp, #32
   30440:	af00      	add	r7, sp, #0
   30442:	60f8      	str	r0, [r7, #12]
   30444:	60b9      	str	r1, [r7, #8]
   30446:	0019      	movs	r1, r3
   30448:	1dfb      	adds	r3, r7, #7
   3044a:	701a      	strb	r2, [r3, #0]
   3044c:	1dbb      	adds	r3, r7, #6
   3044e:	1c0a      	adds	r2, r1, #0
   30450:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   30452:	2300      	movs	r3, #0
   30454:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   30456:	2300      	movs	r3, #0
   30458:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   3045a:	68fb      	ldr	r3, [r7, #12]
   3045c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   3045e:	68bb      	ldr	r3, [r7, #8]
   30460:	2b03      	cmp	r3, #3
   30462:	dc03      	bgt.n	3046c <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30464:	2302      	movs	r3, #2
   30466:	425b      	negs	r3, r3
   30468:	61fb      	str	r3, [r7, #28]
		goto exit;
   3046a:	e055      	b.n	30518 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   3046c:	1dfb      	adds	r3, r7, #7
   3046e:	781b      	ldrb	r3, [r3, #0]
   30470:	220f      	movs	r2, #15
   30472:	4013      	ands	r3, r2
   30474:	b2da      	uxtb	r2, r3
   30476:	2318      	movs	r3, #24
   30478:	18fb      	adds	r3, r7, r3
   3047a:	0110      	lsls	r0, r2, #4
   3047c:	781a      	ldrb	r2, [r3, #0]
   3047e:	210f      	movs	r1, #15
   30480:	400a      	ands	r2, r1
   30482:	1c11      	adds	r1, r2, #0
   30484:	1c02      	adds	r2, r0, #0
   30486:	430a      	orrs	r2, r1
   30488:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   3048a:	1dbb      	adds	r3, r7, #6
   3048c:	781b      	ldrb	r3, [r3, #0]
   3048e:	2201      	movs	r2, #1
   30490:	4013      	ands	r3, r2
   30492:	b2da      	uxtb	r2, r3
   30494:	2318      	movs	r3, #24
   30496:	18fb      	adds	r3, r7, r3
   30498:	2101      	movs	r1, #1
   3049a:	400a      	ands	r2, r1
   3049c:	00d0      	lsls	r0, r2, #3
   3049e:	781a      	ldrb	r2, [r3, #0]
   304a0:	2108      	movs	r1, #8
   304a2:	438a      	bics	r2, r1
   304a4:	1c11      	adds	r1, r2, #0
   304a6:	1c02      	adds	r2, r0, #0
   304a8:	430a      	orrs	r2, r1
   304aa:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   304ac:	1dfb      	adds	r3, r7, #7
   304ae:	781b      	ldrb	r3, [r3, #0]
   304b0:	3b06      	subs	r3, #6
   304b2:	425a      	negs	r2, r3
   304b4:	4153      	adcs	r3, r2
   304b6:	b2db      	uxtb	r3, r3
   304b8:	1c1a      	adds	r2, r3, #0
   304ba:	2303      	movs	r3, #3
   304bc:	4013      	ands	r3, r2
   304be:	b2da      	uxtb	r2, r3
   304c0:	2318      	movs	r3, #24
   304c2:	18fb      	adds	r3, r7, r3
   304c4:	2103      	movs	r1, #3
   304c6:	400a      	ands	r2, r1
   304c8:	1890      	adds	r0, r2, r2
   304ca:	781a      	ldrb	r2, [r3, #0]
   304cc:	2106      	movs	r1, #6
   304ce:	438a      	bics	r2, r1
   304d0:	1c11      	adds	r1, r2, #0
   304d2:	1c02      	adds	r2, r0, #0
   304d4:	430a      	orrs	r2, r1
   304d6:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   304d8:	2318      	movs	r3, #24
   304da:	18fb      	adds	r3, r7, r3
   304dc:	781a      	ldrb	r2, [r3, #0]
   304de:	2314      	movs	r3, #20
   304e0:	18fb      	adds	r3, r7, r3
   304e2:	0011      	movs	r1, r2
   304e4:	0018      	movs	r0, r3
   304e6:	4b0f      	ldr	r3, [pc, #60]	; (30524 <MQTTSerialize_ack+0xe8>)
   304e8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   304ea:	697b      	ldr	r3, [r7, #20]
   304ec:	2102      	movs	r1, #2
   304ee:	0018      	movs	r0, r3
   304f0:	4b0d      	ldr	r3, [pc, #52]	; (30528 <MQTTSerialize_ack+0xec>)
   304f2:	4798      	blx	r3
   304f4:	0002      	movs	r2, r0
   304f6:	697b      	ldr	r3, [r7, #20]
   304f8:	189b      	adds	r3, r3, r2
   304fa:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   304fc:	2328      	movs	r3, #40	; 0x28
   304fe:	18fb      	adds	r3, r7, r3
   30500:	881a      	ldrh	r2, [r3, #0]
   30502:	2314      	movs	r3, #20
   30504:	18fb      	adds	r3, r7, r3
   30506:	0011      	movs	r1, r2
   30508:	0018      	movs	r0, r3
   3050a:	4b08      	ldr	r3, [pc, #32]	; (3052c <MQTTSerialize_ack+0xf0>)
   3050c:	4798      	blx	r3
	rc = ptr - buf;
   3050e:	697b      	ldr	r3, [r7, #20]
   30510:	001a      	movs	r2, r3
   30512:	68fb      	ldr	r3, [r7, #12]
   30514:	1ad3      	subs	r3, r2, r3
   30516:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30518:	69fb      	ldr	r3, [r7, #28]
}
   3051a:	0018      	movs	r0, r3
   3051c:	46bd      	mov	sp, r7
   3051e:	b008      	add	sp, #32
   30520:	bd80      	pop	{r7, pc}
   30522:	46c0      	nop			; (mov r8, r8)
   30524:	00030017 	.word	0x00030017
   30528:	0002fdfd 	.word	0x0002fdfd
   3052c:	00030041 	.word	0x00030041

00030530 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   30530:	b580      	push	{r7, lr}
   30532:	b084      	sub	sp, #16
   30534:	af00      	add	r7, sp, #0
   30536:	6078      	str	r0, [r7, #4]
   30538:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   3053a:	2302      	movs	r3, #2
   3053c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   3053e:	2300      	movs	r3, #0
   30540:	60fb      	str	r3, [r7, #12]
   30542:	e014      	b.n	3056e <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   30544:	68fa      	ldr	r2, [r7, #12]
   30546:	0013      	movs	r3, r2
   30548:	005b      	lsls	r3, r3, #1
   3054a:	189b      	adds	r3, r3, r2
   3054c:	009b      	lsls	r3, r3, #2
   3054e:	001a      	movs	r2, r3
   30550:	683b      	ldr	r3, [r7, #0]
   30552:	189b      	adds	r3, r3, r2
   30554:	6818      	ldr	r0, [r3, #0]
   30556:	6859      	ldr	r1, [r3, #4]
   30558:	689a      	ldr	r2, [r3, #8]
   3055a:	4b09      	ldr	r3, [pc, #36]	; (30580 <MQTTSerialize_subscribeLength+0x50>)
   3055c:	4798      	blx	r3
   3055e:	0003      	movs	r3, r0
   30560:	3303      	adds	r3, #3
   30562:	68ba      	ldr	r2, [r7, #8]
   30564:	18d3      	adds	r3, r2, r3
   30566:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   30568:	68fb      	ldr	r3, [r7, #12]
   3056a:	3301      	adds	r3, #1
   3056c:	60fb      	str	r3, [r7, #12]
   3056e:	68fa      	ldr	r2, [r7, #12]
   30570:	687b      	ldr	r3, [r7, #4]
   30572:	429a      	cmp	r2, r3
   30574:	dbe6      	blt.n	30544 <MQTTSerialize_subscribeLength+0x14>
	return len;
   30576:	68bb      	ldr	r3, [r7, #8]
}
   30578:	0018      	movs	r0, r3
   3057a:	46bd      	mov	sp, r7
   3057c:	b004      	add	sp, #16
   3057e:	bd80      	pop	{r7, pc}
   30580:	000301d1 	.word	0x000301d1

00030584 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   30584:	b590      	push	{r4, r7, lr}
   30586:	b08b      	sub	sp, #44	; 0x2c
   30588:	af00      	add	r7, sp, #0
   3058a:	60f8      	str	r0, [r7, #12]
   3058c:	60b9      	str	r1, [r7, #8]
   3058e:	0019      	movs	r1, r3
   30590:	1dfb      	adds	r3, r7, #7
   30592:	701a      	strb	r2, [r3, #0]
   30594:	1d3b      	adds	r3, r7, #4
   30596:	1c0a      	adds	r2, r1, #0
   30598:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   3059a:	68fb      	ldr	r3, [r7, #12]
   3059c:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   3059e:	2300      	movs	r3, #0
   305a0:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   305a2:	2300      	movs	r3, #0
   305a4:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   305a6:	2300      	movs	r3, #0
   305a8:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   305aa:	2300      	movs	r3, #0
   305ac:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   305ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   305b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   305b2:	0011      	movs	r1, r2
   305b4:	0018      	movs	r0, r3
   305b6:	4b41      	ldr	r3, [pc, #260]	; (306bc <MQTTSerialize_subscribe+0x138>)
   305b8:	4798      	blx	r3
   305ba:	0003      	movs	r3, r0
   305bc:	61fb      	str	r3, [r7, #28]
   305be:	69fb      	ldr	r3, [r7, #28]
   305c0:	0018      	movs	r0, r3
   305c2:	4b3f      	ldr	r3, [pc, #252]	; (306c0 <MQTTSerialize_subscribe+0x13c>)
   305c4:	4798      	blx	r3
   305c6:	0002      	movs	r2, r0
   305c8:	68bb      	ldr	r3, [r7, #8]
   305ca:	429a      	cmp	r2, r3
   305cc:	dd03      	ble.n	305d6 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   305ce:	2302      	movs	r3, #2
   305d0:	425b      	negs	r3, r3
   305d2:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   305d4:	e06c      	b.n	306b0 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   305d6:	2314      	movs	r3, #20
   305d8:	18fb      	adds	r3, r7, r3
   305da:	2200      	movs	r2, #0
   305dc:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   305de:	2314      	movs	r3, #20
   305e0:	18fb      	adds	r3, r7, r3
   305e2:	781a      	ldrb	r2, [r3, #0]
   305e4:	210f      	movs	r1, #15
   305e6:	400a      	ands	r2, r1
   305e8:	1c11      	adds	r1, r2, #0
   305ea:	2280      	movs	r2, #128	; 0x80
   305ec:	4252      	negs	r2, r2
   305ee:	430a      	orrs	r2, r1
   305f0:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   305f2:	1dfb      	adds	r3, r7, #7
   305f4:	781b      	ldrb	r3, [r3, #0]
   305f6:	2201      	movs	r2, #1
   305f8:	4013      	ands	r3, r2
   305fa:	b2da      	uxtb	r2, r3
   305fc:	2314      	movs	r3, #20
   305fe:	18fb      	adds	r3, r7, r3
   30600:	2101      	movs	r1, #1
   30602:	400a      	ands	r2, r1
   30604:	00d0      	lsls	r0, r2, #3
   30606:	781a      	ldrb	r2, [r3, #0]
   30608:	2108      	movs	r1, #8
   3060a:	438a      	bics	r2, r1
   3060c:	1c11      	adds	r1, r2, #0
   3060e:	1c02      	adds	r2, r0, #0
   30610:	430a      	orrs	r2, r1
   30612:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   30614:	2314      	movs	r3, #20
   30616:	18fb      	adds	r3, r7, r3
   30618:	781a      	ldrb	r2, [r3, #0]
   3061a:	2106      	movs	r1, #6
   3061c:	438a      	bics	r2, r1
   3061e:	1c11      	adds	r1, r2, #0
   30620:	2202      	movs	r2, #2
   30622:	430a      	orrs	r2, r1
   30624:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30626:	2314      	movs	r3, #20
   30628:	18fb      	adds	r3, r7, r3
   3062a:	781a      	ldrb	r2, [r3, #0]
   3062c:	2318      	movs	r3, #24
   3062e:	18fb      	adds	r3, r7, r3
   30630:	0011      	movs	r1, r2
   30632:	0018      	movs	r0, r3
   30634:	4b23      	ldr	r3, [pc, #140]	; (306c4 <MQTTSerialize_subscribe+0x140>)
   30636:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30638:	69bb      	ldr	r3, [r7, #24]
   3063a:	69fa      	ldr	r2, [r7, #28]
   3063c:	0011      	movs	r1, r2
   3063e:	0018      	movs	r0, r3
   30640:	4b21      	ldr	r3, [pc, #132]	; (306c8 <MQTTSerialize_subscribe+0x144>)
   30642:	4798      	blx	r3
   30644:	0002      	movs	r2, r0
   30646:	69bb      	ldr	r3, [r7, #24]
   30648:	189b      	adds	r3, r3, r2
   3064a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   3064c:	1d3b      	adds	r3, r7, #4
   3064e:	881a      	ldrh	r2, [r3, #0]
   30650:	2318      	movs	r3, #24
   30652:	18fb      	adds	r3, r7, r3
   30654:	0011      	movs	r1, r2
   30656:	0018      	movs	r0, r3
   30658:	4b1c      	ldr	r3, [pc, #112]	; (306cc <MQTTSerialize_subscribe+0x148>)
   3065a:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   3065c:	2300      	movs	r3, #0
   3065e:	623b      	str	r3, [r7, #32]
   30660:	e01d      	b.n	3069e <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   30662:	6a3a      	ldr	r2, [r7, #32]
   30664:	0013      	movs	r3, r2
   30666:	005b      	lsls	r3, r3, #1
   30668:	189b      	adds	r3, r3, r2
   3066a:	009b      	lsls	r3, r3, #2
   3066c:	001a      	movs	r2, r3
   3066e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30670:	189b      	adds	r3, r3, r2
   30672:	2218      	movs	r2, #24
   30674:	18b8      	adds	r0, r7, r2
   30676:	6819      	ldr	r1, [r3, #0]
   30678:	685a      	ldr	r2, [r3, #4]
   3067a:	689b      	ldr	r3, [r3, #8]
   3067c:	4c14      	ldr	r4, [pc, #80]	; (306d0 <MQTTSerialize_subscribe+0x14c>)
   3067e:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   30680:	6a3b      	ldr	r3, [r7, #32]
   30682:	009b      	lsls	r3, r3, #2
   30684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   30686:	18d3      	adds	r3, r2, r3
   30688:	681b      	ldr	r3, [r3, #0]
   3068a:	b2da      	uxtb	r2, r3
   3068c:	2318      	movs	r3, #24
   3068e:	18fb      	adds	r3, r7, r3
   30690:	0011      	movs	r1, r2
   30692:	0018      	movs	r0, r3
   30694:	4b0b      	ldr	r3, [pc, #44]	; (306c4 <MQTTSerialize_subscribe+0x140>)
   30696:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   30698:	6a3b      	ldr	r3, [r7, #32]
   3069a:	3301      	adds	r3, #1
   3069c:	623b      	str	r3, [r7, #32]
   3069e:	6a3a      	ldr	r2, [r7, #32]
   306a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   306a2:	429a      	cmp	r2, r3
   306a4:	dbdd      	blt.n	30662 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   306a6:	69bb      	ldr	r3, [r7, #24]
   306a8:	001a      	movs	r2, r3
   306aa:	68fb      	ldr	r3, [r7, #12]
   306ac:	1ad3      	subs	r3, r2, r3
   306ae:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   306b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   306b2:	0018      	movs	r0, r3
   306b4:	46bd      	mov	sp, r7
   306b6:	b00b      	add	sp, #44	; 0x2c
   306b8:	bd90      	pop	{r4, r7, pc}
   306ba:	46c0      	nop			; (mov r8, r8)
   306bc:	00030531 	.word	0x00030531
   306c0:	0002fef5 	.word	0x0002fef5
   306c4:	00030017 	.word	0x00030017
   306c8:	0002fdfd 	.word	0x0002fdfd
   306cc:	00030041 	.word	0x00030041
   306d0:	000300e9 	.word	0x000300e9

000306d4 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   306d4:	b590      	push	{r4, r7, lr}
   306d6:	b08b      	sub	sp, #44	; 0x2c
   306d8:	af00      	add	r7, sp, #0
   306da:	60f8      	str	r0, [r7, #12]
   306dc:	60b9      	str	r1, [r7, #8]
   306de:	607a      	str	r2, [r7, #4]
   306e0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   306e2:	2300      	movs	r3, #0
   306e4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   306e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   306e8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   306ea:	2300      	movs	r3, #0
   306ec:	623b      	str	r3, [r7, #32]
	int rc = 0;
   306ee:	2300      	movs	r3, #0
   306f0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   306f2:	2318      	movs	r3, #24
   306f4:	18fb      	adds	r3, r7, r3
   306f6:	0018      	movs	r0, r3
   306f8:	4b2c      	ldr	r3, [pc, #176]	; (307ac <MQTTDeserialize_suback+0xd8>)
   306fa:	4798      	blx	r3
   306fc:	0003      	movs	r3, r0
   306fe:	001a      	movs	r2, r3
   30700:	231c      	movs	r3, #28
   30702:	18fb      	adds	r3, r7, r3
   30704:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   30706:	231c      	movs	r3, #28
   30708:	18fb      	adds	r3, r7, r3
   3070a:	781b      	ldrb	r3, [r3, #0]
   3070c:	220f      	movs	r2, #15
   3070e:	4393      	bics	r3, r2
   30710:	b2db      	uxtb	r3, r3
   30712:	2b90      	cmp	r3, #144	; 0x90
   30714:	d142      	bne.n	3079c <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30716:	69bb      	ldr	r3, [r7, #24]
   30718:	2214      	movs	r2, #20
   3071a:	18ba      	adds	r2, r7, r2
   3071c:	0011      	movs	r1, r2
   3071e:	0018      	movs	r0, r3
   30720:	4b23      	ldr	r3, [pc, #140]	; (307b0 <MQTTDeserialize_suback+0xdc>)
   30722:	4798      	blx	r3
   30724:	0003      	movs	r3, r0
   30726:	627b      	str	r3, [r7, #36]	; 0x24
   30728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3072a:	69bb      	ldr	r3, [r7, #24]
   3072c:	189b      	adds	r3, r3, r2
   3072e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30730:	69bb      	ldr	r3, [r7, #24]
   30732:	697a      	ldr	r2, [r7, #20]
   30734:	189b      	adds	r3, r3, r2
   30736:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30738:	6a3b      	ldr	r3, [r7, #32]
   3073a:	69ba      	ldr	r2, [r7, #24]
   3073c:	1a9b      	subs	r3, r3, r2
   3073e:	2b01      	cmp	r3, #1
   30740:	dd2e      	ble.n	307a0 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   30742:	2318      	movs	r3, #24
   30744:	18fb      	adds	r3, r7, r3
   30746:	0018      	movs	r0, r3
   30748:	4b1a      	ldr	r3, [pc, #104]	; (307b4 <MQTTDeserialize_suback+0xe0>)
   3074a:	4798      	blx	r3
   3074c:	0003      	movs	r3, r0
   3074e:	b29a      	uxth	r2, r3
   30750:	68fb      	ldr	r3, [r7, #12]
   30752:	801a      	strh	r2, [r3, #0]

	*count = 0;
   30754:	687b      	ldr	r3, [r7, #4]
   30756:	2200      	movs	r2, #0
   30758:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   3075a:	e018      	b.n	3078e <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   3075c:	687b      	ldr	r3, [r7, #4]
   3075e:	681a      	ldr	r2, [r3, #0]
   30760:	68bb      	ldr	r3, [r7, #8]
   30762:	429a      	cmp	r2, r3
   30764:	dd03      	ble.n	3076e <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   30766:	2301      	movs	r3, #1
   30768:	425b      	negs	r3, r3
   3076a:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   3076c:	e019      	b.n	307a2 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   3076e:	687b      	ldr	r3, [r7, #4]
   30770:	681a      	ldr	r2, [r3, #0]
   30772:	1c51      	adds	r1, r2, #1
   30774:	687b      	ldr	r3, [r7, #4]
   30776:	6019      	str	r1, [r3, #0]
   30778:	0013      	movs	r3, r2
   3077a:	009b      	lsls	r3, r3, #2
   3077c:	683a      	ldr	r2, [r7, #0]
   3077e:	18d4      	adds	r4, r2, r3
   30780:	2318      	movs	r3, #24
   30782:	18fb      	adds	r3, r7, r3
   30784:	0018      	movs	r0, r3
   30786:	4b09      	ldr	r3, [pc, #36]	; (307ac <MQTTDeserialize_suback+0xd8>)
   30788:	4798      	blx	r3
   3078a:	0003      	movs	r3, r0
   3078c:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   3078e:	69ba      	ldr	r2, [r7, #24]
   30790:	6a3b      	ldr	r3, [r7, #32]
   30792:	429a      	cmp	r2, r3
   30794:	d3e2      	bcc.n	3075c <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   30796:	2301      	movs	r3, #1
   30798:	627b      	str	r3, [r7, #36]	; 0x24
   3079a:	e002      	b.n	307a2 <MQTTDeserialize_suback+0xce>
		goto exit;
   3079c:	46c0      	nop			; (mov r8, r8)
   3079e:	e000      	b.n	307a2 <MQTTDeserialize_suback+0xce>
		goto exit;
   307a0:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   307a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   307a4:	0018      	movs	r0, r3
   307a6:	46bd      	mov	sp, r7
   307a8:	b00b      	add	sp, #44	; 0x2c
   307aa:	bd90      	pop	{r4, r7, pc}
   307ac:	0002ffeb 	.word	0x0002ffeb
   307b0:	0002ff85 	.word	0x0002ff85
   307b4:	0002ffb9 	.word	0x0002ffb9

000307b8 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   307b8:	b580      	push	{r7, lr}
   307ba:	b082      	sub	sp, #8
   307bc:	af00      	add	r7, sp, #0
   307be:	6078      	str	r0, [r7, #4]
	config->port = 80;
   307c0:	687b      	ldr	r3, [r7, #4]
   307c2:	2250      	movs	r2, #80	; 0x50
   307c4:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   307c6:	687b      	ldr	r3, [r7, #4]
   307c8:	2200      	movs	r2, #0
   307ca:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   307cc:	687b      	ldr	r3, [r7, #4]
   307ce:	4a0b      	ldr	r2, [pc, #44]	; (307fc <http_client_get_config_defaults+0x44>)
   307d0:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   307d2:	687b      	ldr	r3, [r7, #4]
   307d4:	2200      	movs	r2, #0
   307d6:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   307d8:	687b      	ldr	r3, [r7, #4]
   307da:	2200      	movs	r2, #0
   307dc:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   307de:	687b      	ldr	r3, [r7, #4]
   307e0:	2280      	movs	r2, #128	; 0x80
   307e2:	0052      	lsls	r2, r2, #1
   307e4:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   307e6:	687b      	ldr	r3, [r7, #4]
   307e8:	2252      	movs	r2, #82	; 0x52
   307ea:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   307ec:	687b      	ldr	r3, [r7, #4]
   307ee:	4a04      	ldr	r2, [pc, #16]	; (30800 <http_client_get_config_defaults+0x48>)
   307f0:	619a      	str	r2, [r3, #24]
}
   307f2:	46c0      	nop			; (mov r8, r8)
   307f4:	46bd      	mov	sp, r7
   307f6:	b002      	add	sp, #8
   307f8:	bd80      	pop	{r7, pc}
   307fa:	46c0      	nop			; (mov r8, r8)
   307fc:	00004e20 	.word	0x00004e20
   30800:	00039940 	.word	0x00039940

00030804 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   30804:	b590      	push	{r4, r7, lr}
   30806:	b083      	sub	sp, #12
   30808:	af00      	add	r7, sp, #0
   3080a:	6078      	str	r0, [r7, #4]
   3080c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   3080e:	687b      	ldr	r3, [r7, #4]
   30810:	2b00      	cmp	r3, #0
   30812:	d002      	beq.n	3081a <http_client_init+0x16>
   30814:	683b      	ldr	r3, [r7, #0]
   30816:	2b00      	cmp	r3, #0
   30818:	d102      	bne.n	30820 <http_client_init+0x1c>
		return -EINVAL;
   3081a:	2316      	movs	r3, #22
   3081c:	425b      	negs	r3, r3
   3081e:	e058      	b.n	308d2 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   30820:	683b      	ldr	r3, [r7, #0]
   30822:	691b      	ldr	r3, [r3, #16]
   30824:	2b00      	cmp	r3, #0
   30826:	d102      	bne.n	3082e <http_client_init+0x2a>
		return -EINVAL;
   30828:	2316      	movs	r3, #22
   3082a:	425b      	negs	r3, r3
   3082c:	e051      	b.n	308d2 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   3082e:	683b      	ldr	r3, [r7, #0]
   30830:	685b      	ldr	r3, [r3, #4]
   30832:	2b00      	cmp	r3, #0
   30834:	d102      	bne.n	3083c <http_client_init+0x38>
		return -EINVAL;
   30836:	2316      	movs	r3, #22
   30838:	425b      	negs	r3, r3
   3083a:	e04a      	b.n	308d2 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   3083c:	683b      	ldr	r3, [r7, #0]
   3083e:	695b      	ldr	r3, [r3, #20]
   30840:	2b51      	cmp	r3, #81	; 0x51
   30842:	d802      	bhi.n	3084a <http_client_init+0x46>
		return -EINVAL;
   30844:	2316      	movs	r3, #22
   30846:	425b      	negs	r3, r3
   30848:	e043      	b.n	308d2 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   3084a:	687b      	ldr	r3, [r7, #4]
   3084c:	22e8      	movs	r2, #232	; 0xe8
   3084e:	2100      	movs	r1, #0
   30850:	0018      	movs	r0, r3
   30852:	4b22      	ldr	r3, [pc, #136]	; (308dc <http_client_init+0xd8>)
   30854:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   30856:	687b      	ldr	r3, [r7, #4]
   30858:	3350      	adds	r3, #80	; 0x50
   3085a:	6839      	ldr	r1, [r7, #0]
   3085c:	221c      	movs	r2, #28
   3085e:	0018      	movs	r0, r3
   30860:	4b1f      	ldr	r3, [pc, #124]	; (308e0 <http_client_init+0xdc>)
   30862:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   30864:	687b      	ldr	r3, [r7, #4]
   30866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30868:	2b00      	cmp	r3, #0
   3086a:	d115      	bne.n	30898 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   3086c:	683b      	ldr	r3, [r7, #0]
   3086e:	691b      	ldr	r3, [r3, #16]
   30870:	0018      	movs	r0, r3
   30872:	4b1c      	ldr	r3, [pc, #112]	; (308e4 <http_client_init+0xe0>)
   30874:	4798      	blx	r3
   30876:	0003      	movs	r3, r0
   30878:	001a      	movs	r2, r3
   3087a:	687b      	ldr	r3, [r7, #4]
   3087c:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   3087e:	687b      	ldr	r3, [r7, #4]
   30880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30882:	2b00      	cmp	r3, #0
   30884:	d102      	bne.n	3088c <http_client_init+0x88>
			return -ENOMEM;
   30886:	230c      	movs	r3, #12
   30888:	425b      	negs	r3, r3
   3088a:	e022      	b.n	308d2 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   3088c:	687b      	ldr	r3, [r7, #4]
   3088e:	2241      	movs	r2, #65	; 0x41
   30890:	5c99      	ldrb	r1, [r3, r2]
   30892:	2004      	movs	r0, #4
   30894:	4301      	orrs	r1, r0
   30896:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   30898:	683b      	ldr	r3, [r7, #0]
   3089a:	891b      	ldrh	r3, [r3, #8]
   3089c:	2b00      	cmp	r3, #0
   3089e:	d010      	beq.n	308c2 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   308a0:	683b      	ldr	r3, [r7, #0]
   308a2:	6858      	ldr	r0, [r3, #4]
   308a4:	687a      	ldr	r2, [r7, #4]
   308a6:	4910      	ldr	r1, [pc, #64]	; (308e8 <http_client_init+0xe4>)
   308a8:	2300      	movs	r3, #0
   308aa:	4c10      	ldr	r4, [pc, #64]	; (308ec <http_client_init+0xe8>)
   308ac:	47a0      	blx	r4
   308ae:	0002      	movs	r2, r0
   308b0:	687b      	ldr	r3, [r7, #4]
   308b2:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   308b4:	687b      	ldr	r3, [r7, #4]
   308b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   308b8:	2b00      	cmp	r3, #0
   308ba:	da02      	bge.n	308c2 <http_client_init+0xbe>
			return -ENOSPC;
   308bc:	231c      	movs	r3, #28
   308be:	425b      	negs	r3, r3
   308c0:	e007      	b.n	308d2 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   308c2:	687b      	ldr	r3, [r7, #4]
   308c4:	2200      	movs	r2, #0
   308c6:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   308c8:	687b      	ldr	r3, [r7, #4]
   308ca:	22d8      	movs	r2, #216	; 0xd8
   308cc:	2100      	movs	r1, #0
   308ce:	5099      	str	r1, [r3, r2]

	return 0;
   308d0:	2300      	movs	r3, #0
}
   308d2:	0018      	movs	r0, r3
   308d4:	46bd      	mov	sp, r7
   308d6:	b003      	add	sp, #12
   308d8:	bd90      	pop	{r4, r7, pc}
   308da:	46c0      	nop			; (mov r8, r8)
   308dc:	000346df 	.word	0x000346df
   308e0:	000346a9 	.word	0x000346a9
   308e4:	00034681 	.word	0x00034681
   308e8:	00030bb5 	.word	0x00030bb5
   308ec:	00032259 	.word	0x00032259

000308f0 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   308f0:	b580      	push	{r7, lr}
   308f2:	b082      	sub	sp, #8
   308f4:	af00      	add	r7, sp, #0
   308f6:	6078      	str	r0, [r7, #4]
   308f8:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   308fa:	687b      	ldr	r3, [r7, #4]
   308fc:	2b00      	cmp	r3, #0
   308fe:	d102      	bne.n	30906 <http_client_register_callback+0x16>
		return -EINVAL;
   30900:	2316      	movs	r3, #22
   30902:	425b      	negs	r3, r3
   30904:	e003      	b.n	3090e <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   30906:	687b      	ldr	r3, [r7, #4]
   30908:	683a      	ldr	r2, [r7, #0]
   3090a:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   3090c:	2300      	movs	r3, #0
}
   3090e:	0018      	movs	r0, r3
   30910:	46bd      	mov	sp, r7
   30912:	b002      	add	sp, #8
   30914:	bd80      	pop	{r7, pc}
	...

00030918 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   30918:	b580      	push	{r7, lr}
   3091a:	b082      	sub	sp, #8
   3091c:	af00      	add	r7, sp, #0
   3091e:	6078      	str	r0, [r7, #4]
	switch (err) {
   30920:	687b      	ldr	r3, [r7, #4]
   30922:	330e      	adds	r3, #14
   30924:	2b0e      	cmp	r3, #14
   30926:	d825      	bhi.n	30974 <_hwerr_to_stderr+0x5c>
   30928:	009a      	lsls	r2, r3, #2
   3092a:	4b18      	ldr	r3, [pc, #96]	; (3098c <_hwerr_to_stderr+0x74>)
   3092c:	18d3      	adds	r3, r2, r3
   3092e:	681b      	ldr	r3, [r3, #0]
   30930:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   30932:	2305      	movs	r3, #5
   30934:	425b      	negs	r3, r3
   30936:	e024      	b.n	30982 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   30938:	2302      	movs	r3, #2
   3093a:	425b      	negs	r3, r3
   3093c:	e021      	b.n	30982 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   3093e:	2370      	movs	r3, #112	; 0x70
   30940:	425b      	negs	r3, r3
   30942:	e01e      	b.n	30982 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   30944:	230c      	movs	r3, #12
   30946:	425b      	negs	r3, r3
   30948:	e01b      	b.n	30982 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   3094a:	2316      	movs	r3, #22
   3094c:	425b      	negs	r3, r3
   3094e:	e018      	b.n	30982 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   30950:	230c      	movs	r3, #12
   30952:	425b      	negs	r3, r3
   30954:	e015      	b.n	30982 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   30956:	2305      	movs	r3, #5
   30958:	425b      	negs	r3, r3
   3095a:	e012      	b.n	30982 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   3095c:	2379      	movs	r3, #121	; 0x79
   3095e:	425b      	negs	r3, r3
   30960:	e00f      	b.n	30982 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   30962:	2368      	movs	r3, #104	; 0x68
   30964:	425b      	negs	r3, r3
   30966:	e00c      	b.n	30982 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   30968:	230b      	movs	r3, #11
   3096a:	425b      	negs	r3, r3
   3096c:	e009      	b.n	30982 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   3096e:	2310      	movs	r3, #16
   30970:	425b      	negs	r3, r3
   30972:	e006      	b.n	30982 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   30974:	687b      	ldr	r3, [r7, #4]
   30976:	2b00      	cmp	r3, #0
   30978:	da02      	bge.n	30980 <_hwerr_to_stderr+0x68>
				return -EIO;
   3097a:	2305      	movs	r3, #5
   3097c:	425b      	negs	r3, r3
   3097e:	e000      	b.n	30982 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   30980:	2300      	movs	r3, #0
	}
}
   30982:	0018      	movs	r0, r3
   30984:	46bd      	mov	sp, r7
   30986:	b002      	add	sp, #8
   30988:	bd80      	pop	{r7, pc}
   3098a:	46c0      	nop			; (mov r8, r8)
   3098c:	00039a7c 	.word	0x00039a7c

00030990 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   30990:	b580      	push	{r7, lr}
   30992:	b08a      	sub	sp, #40	; 0x28
   30994:	af00      	add	r7, sp, #0
   30996:	603a      	str	r2, [r7, #0]
   30998:	1dfb      	adds	r3, r7, #7
   3099a:	1c02      	adds	r2, r0, #0
   3099c:	701a      	strb	r2, [r3, #0]
   3099e:	1dbb      	adds	r3, r7, #6
   309a0:	1c0a      	adds	r2, r1, #0
   309a2:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   309a4:	1dfb      	adds	r3, r7, #7
   309a6:	2200      	movs	r2, #0
   309a8:	569a      	ldrsb	r2, [r3, r2]
   309aa:	4b4b      	ldr	r3, [pc, #300]	; (30ad8 <http_client_socket_event_handler+0x148>)
   309ac:	0092      	lsls	r2, r2, #2
   309ae:	58d3      	ldr	r3, [r2, r3]
   309b0:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   309b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   309b4:	2b00      	cmp	r3, #0
   309b6:	d100      	bne.n	309ba <http_client_socket_event_handler+0x2a>
   309b8:	e08a      	b.n	30ad0 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   309ba:	1dbb      	adds	r3, r7, #6
   309bc:	781b      	ldrb	r3, [r3, #0]
   309be:	2b06      	cmp	r3, #6
   309c0:	d040      	beq.n	30a44 <http_client_socket_event_handler+0xb4>
   309c2:	2b07      	cmp	r3, #7
   309c4:	d060      	beq.n	30a88 <http_client_socket_event_handler+0xf8>
   309c6:	2b05      	cmp	r3, #5
   309c8:	d000      	beq.n	309cc <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   309ca:	e082      	b.n	30ad2 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   309cc:	683b      	ldr	r3, [r7, #0]
   309ce:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   309d0:	6a3b      	ldr	r3, [r7, #32]
   309d2:	785b      	ldrb	r3, [r3, #1]
   309d4:	b25b      	sxtb	r3, r3
   309d6:	001a      	movs	r2, r3
   309d8:	230c      	movs	r3, #12
   309da:	18fb      	adds	r3, r7, r3
   309dc:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   309de:	6a3b      	ldr	r3, [r7, #32]
   309e0:	785b      	ldrb	r3, [r3, #1]
   309e2:	b25b      	sxtb	r3, r3
   309e4:	2b00      	cmp	r3, #0
   309e6:	da0c      	bge.n	30a02 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   309e8:	6a3b      	ldr	r3, [r7, #32]
   309ea:	785b      	ldrb	r3, [r3, #1]
   309ec:	b25b      	sxtb	r3, r3
   309ee:	0018      	movs	r0, r3
   309f0:	4b3a      	ldr	r3, [pc, #232]	; (30adc <http_client_socket_event_handler+0x14c>)
   309f2:	4798      	blx	r3
   309f4:	0002      	movs	r2, r0
   309f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   309f8:	0011      	movs	r1, r2
   309fa:	0018      	movs	r0, r3
   309fc:	4b38      	ldr	r3, [pc, #224]	; (30ae0 <http_client_socket_event_handler+0x150>)
   309fe:	4798      	blx	r3
    	break;
   30a00:	e067      	b.n	30ad2 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   30a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30a06:	2b00      	cmp	r3, #0
   30a08:	d006      	beq.n	30a18 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   30a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30a0e:	220c      	movs	r2, #12
   30a10:	18ba      	adds	r2, r7, r2
   30a12:	6a78      	ldr	r0, [r7, #36]	; 0x24
   30a14:	2100      	movs	r1, #0
   30a16:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   30a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a1a:	2203      	movs	r2, #3
   30a1c:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   30a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a20:	6d58      	ldr	r0, [r3, #84]	; 0x54
   30a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a24:	6c99      	ldr	r1, [r3, #72]	; 0x48
   30a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a28:	2258      	movs	r2, #88	; 0x58
   30a2a:	5a9b      	ldrh	r3, [r3, r2]
   30a2c:	001a      	movs	r2, r3
   30a2e:	4b2d      	ldr	r3, [pc, #180]	; (30ae4 <http_client_socket_event_handler+0x154>)
   30a30:	4798      	blx	r3
    		_http_client_recv_packet(module);
   30a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a34:	0018      	movs	r0, r3
   30a36:	4b2c      	ldr	r3, [pc, #176]	; (30ae8 <http_client_socket_event_handler+0x158>)
   30a38:	4798      	blx	r3
			_http_client_request(module);
   30a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a3c:	0018      	movs	r0, r3
   30a3e:	4b2b      	ldr	r3, [pc, #172]	; (30aec <http_client_socket_event_handler+0x15c>)
   30a40:	4798      	blx	r3
    	break;
   30a42:	e046      	b.n	30ad2 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   30a44:	683b      	ldr	r3, [r7, #0]
   30a46:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   30a48:	69fb      	ldr	r3, [r7, #28]
   30a4a:	2204      	movs	r2, #4
   30a4c:	5e9b      	ldrsh	r3, [r3, r2]
   30a4e:	2b00      	cmp	r3, #0
   30a50:	dd09      	ble.n	30a66 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   30a52:	69fb      	ldr	r3, [r7, #28]
   30a54:	2204      	movs	r2, #4
   30a56:	5e9b      	ldrsh	r3, [r3, r2]
   30a58:	001a      	movs	r2, r3
   30a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a5c:	0011      	movs	r1, r2
   30a5e:	0018      	movs	r0, r3
   30a60:	4b23      	ldr	r3, [pc, #140]	; (30af0 <http_client_socket_event_handler+0x160>)
   30a62:	4798      	blx	r3
   30a64:	e00b      	b.n	30a7e <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   30a66:	69fb      	ldr	r3, [r7, #28]
   30a68:	2204      	movs	r2, #4
   30a6a:	5e9b      	ldrsh	r3, [r3, r2]
   30a6c:	0018      	movs	r0, r3
   30a6e:	4b1b      	ldr	r3, [pc, #108]	; (30adc <http_client_socket_event_handler+0x14c>)
   30a70:	4798      	blx	r3
   30a72:	0002      	movs	r2, r0
   30a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a76:	0011      	movs	r1, r2
   30a78:	0018      	movs	r0, r3
   30a7a:	4b19      	ldr	r3, [pc, #100]	; (30ae0 <http_client_socket_event_handler+0x150>)
   30a7c:	4798      	blx	r3
		_http_client_recv_packet(module);
   30a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a80:	0018      	movs	r0, r3
   30a82:	4b19      	ldr	r3, [pc, #100]	; (30ae8 <http_client_socket_event_handler+0x158>)
   30a84:	4798      	blx	r3
		break;
   30a86:	e024      	b.n	30ad2 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   30a88:	231a      	movs	r3, #26
   30a8a:	18fb      	adds	r3, r7, r3
   30a8c:	683a      	ldr	r2, [r7, #0]
   30a8e:	8812      	ldrh	r2, [r2, #0]
   30a90:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   30a92:	231a      	movs	r3, #26
   30a94:	18fb      	adds	r3, r7, r3
   30a96:	2200      	movs	r2, #0
   30a98:	5e9b      	ldrsh	r3, [r3, r2]
   30a9a:	2b00      	cmp	r3, #0
   30a9c:	da0d      	bge.n	30aba <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   30a9e:	231a      	movs	r3, #26
   30aa0:	18fb      	adds	r3, r7, r3
   30aa2:	2200      	movs	r2, #0
   30aa4:	5e9b      	ldrsh	r3, [r3, r2]
   30aa6:	0018      	movs	r0, r3
   30aa8:	4b0c      	ldr	r3, [pc, #48]	; (30adc <http_client_socket_event_handler+0x14c>)
   30aaa:	4798      	blx	r3
   30aac:	0002      	movs	r2, r0
   30aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ab0:	0011      	movs	r1, r2
   30ab2:	0018      	movs	r0, r3
   30ab4:	4b0a      	ldr	r3, [pc, #40]	; (30ae0 <http_client_socket_event_handler+0x150>)
   30ab6:	4798      	blx	r3
   30ab8:	e003      	b.n	30ac2 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   30aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30abc:	0018      	movs	r0, r3
   30abe:	4b0b      	ldr	r3, [pc, #44]	; (30aec <http_client_socket_event_handler+0x15c>)
   30ac0:	4798      	blx	r3
		module->sending = 0;
   30ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ac4:	2241      	movs	r2, #65	; 0x41
   30ac6:	5c99      	ldrb	r1, [r3, r2]
   30ac8:	2001      	movs	r0, #1
   30aca:	4381      	bics	r1, r0
   30acc:	5499      	strb	r1, [r3, r2]
    	break;
   30ace:	e000      	b.n	30ad2 <http_client_socket_event_handler+0x142>
		return;
   30ad0:	46c0      	nop			; (mov r8, r8)
	}

}
   30ad2:	46bd      	mov	sp, r7
   30ad4:	b00a      	add	sp, #40	; 0x28
   30ad6:	bd80      	pop	{r7, pc}
   30ad8:	20004598 	.word	0x20004598
   30adc:	00030919 	.word	0x00030919
   30ae0:	00030f8d 	.word	0x00030f8d
   30ae4:	000322e9 	.word	0x000322e9
   30ae8:	00031819 	.word	0x00031819
   30aec:	000310e1 	.word	0x000310e1
   30af0:	0003187d 	.word	0x0003187d

00030af4 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   30af4:	b580      	push	{r7, lr}
   30af6:	b088      	sub	sp, #32
   30af8:	af00      	add	r7, sp, #0
   30afa:	6078      	str	r0, [r7, #4]
   30afc:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   30afe:	2300      	movs	r3, #0
   30b00:	61fb      	str	r3, [r7, #28]
   30b02:	e048      	b.n	30b96 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   30b04:	4b27      	ldr	r3, [pc, #156]	; (30ba4 <http_client_socket_resolve_handler+0xb0>)
   30b06:	69fa      	ldr	r2, [r7, #28]
   30b08:	0092      	lsls	r2, r2, #2
   30b0a:	58d3      	ldr	r3, [r2, r3]
   30b0c:	2b00      	cmp	r3, #0
   30b0e:	d03f      	beq.n	30b90 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   30b10:	4b24      	ldr	r3, [pc, #144]	; (30ba4 <http_client_socket_resolve_handler+0xb0>)
   30b12:	69fa      	ldr	r2, [r7, #28]
   30b14:	0092      	lsls	r2, r2, #2
   30b16:	58d3      	ldr	r3, [r2, r3]
   30b18:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   30b1a:	69bb      	ldr	r3, [r7, #24]
   30b1c:	1c5a      	adds	r2, r3, #1
   30b1e:	687b      	ldr	r3, [r7, #4]
   30b20:	0011      	movs	r1, r2
   30b22:	0018      	movs	r0, r3
   30b24:	4b20      	ldr	r3, [pc, #128]	; (30ba8 <http_client_socket_resolve_handler+0xb4>)
   30b26:	4798      	blx	r3
   30b28:	1e03      	subs	r3, r0, #0
   30b2a:	d131      	bne.n	30b90 <http_client_socket_resolve_handler+0x9c>
   30b2c:	69bb      	ldr	r3, [r7, #24]
   30b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30b30:	2b01      	cmp	r3, #1
   30b32:	d12d      	bne.n	30b90 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   30b34:	683b      	ldr	r3, [r7, #0]
   30b36:	2b00      	cmp	r3, #0
   30b38:	d107      	bne.n	30b4a <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   30b3a:	2376      	movs	r3, #118	; 0x76
   30b3c:	425a      	negs	r2, r3
   30b3e:	69bb      	ldr	r3, [r7, #24]
   30b40:	0011      	movs	r1, r2
   30b42:	0018      	movs	r0, r3
   30b44:	4b19      	ldr	r3, [pc, #100]	; (30bac <http_client_socket_resolve_handler+0xb8>)
   30b46:	4798      	blx	r3
					return;
   30b48:	e028      	b.n	30b9c <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   30b4a:	2308      	movs	r3, #8
   30b4c:	18fb      	adds	r3, r7, r3
   30b4e:	2202      	movs	r2, #2
   30b50:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30b52:	69bb      	ldr	r3, [r7, #24]
   30b54:	2250      	movs	r2, #80	; 0x50
   30b56:	5a9b      	ldrh	r3, [r3, r2]
   30b58:	021b      	lsls	r3, r3, #8
   30b5a:	b21a      	sxth	r2, r3
   30b5c:	69bb      	ldr	r3, [r7, #24]
   30b5e:	2150      	movs	r1, #80	; 0x50
   30b60:	5a5b      	ldrh	r3, [r3, r1]
   30b62:	0a1b      	lsrs	r3, r3, #8
   30b64:	b29b      	uxth	r3, r3
   30b66:	b21b      	sxth	r3, r3
   30b68:	4313      	orrs	r3, r2
   30b6a:	b21b      	sxth	r3, r3
   30b6c:	b29a      	uxth	r2, r3
   30b6e:	2308      	movs	r3, #8
   30b70:	18fb      	adds	r3, r7, r3
   30b72:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   30b74:	2308      	movs	r3, #8
   30b76:	18fb      	adds	r3, r7, r3
   30b78:	683a      	ldr	r2, [r7, #0]
   30b7a:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   30b7c:	69bb      	ldr	r3, [r7, #24]
   30b7e:	781b      	ldrb	r3, [r3, #0]
   30b80:	b25b      	sxtb	r3, r3
   30b82:	2208      	movs	r2, #8
   30b84:	18b9      	adds	r1, r7, r2
   30b86:	2210      	movs	r2, #16
   30b88:	0018      	movs	r0, r3
   30b8a:	4b09      	ldr	r3, [pc, #36]	; (30bb0 <http_client_socket_resolve_handler+0xbc>)
   30b8c:	4798      	blx	r3
				return;
   30b8e:	e005      	b.n	30b9c <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   30b90:	69fb      	ldr	r3, [r7, #28]
   30b92:	3301      	adds	r3, #1
   30b94:	61fb      	str	r3, [r7, #28]
   30b96:	69fb      	ldr	r3, [r7, #28]
   30b98:	2b06      	cmp	r3, #6
   30b9a:	ddb3      	ble.n	30b04 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   30b9c:	46bd      	mov	sp, r7
   30b9e:	b008      	add	sp, #32
   30ba0:	bd80      	pop	{r7, pc}
   30ba2:	46c0      	nop			; (mov r8, r8)
   30ba4:	20004598 	.word	0x20004598
   30ba8:	00034a37 	.word	0x00034a37
   30bac:	00030f8d 	.word	0x00030f8d
   30bb0:	000254b1 	.word	0x000254b1

00030bb4 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   30bb4:	b580      	push	{r7, lr}
   30bb6:	b086      	sub	sp, #24
   30bb8:	af00      	add	r7, sp, #0
   30bba:	60f8      	str	r0, [r7, #12]
   30bbc:	60b9      	str	r1, [r7, #8]
   30bbe:	607a      	str	r2, [r7, #4]
   30bc0:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   30bc2:	687b      	ldr	r3, [r7, #4]
   30bc4:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   30bc6:	697b      	ldr	r3, [r7, #20]
   30bc8:	2b00      	cmp	r3, #0
   30bca:	d007      	beq.n	30bdc <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   30bcc:	233e      	movs	r3, #62	; 0x3e
   30bce:	425a      	negs	r2, r3
   30bd0:	697b      	ldr	r3, [r7, #20]
   30bd2:	0011      	movs	r1, r2
   30bd4:	0018      	movs	r0, r3
   30bd6:	4b03      	ldr	r3, [pc, #12]	; (30be4 <http_client_timer_callback+0x30>)
   30bd8:	4798      	blx	r3
   30bda:	e000      	b.n	30bde <http_client_timer_callback+0x2a>
		return;
   30bdc:	46c0      	nop			; (mov r8, r8)
}
   30bde:	46bd      	mov	sp, r7
   30be0:	b006      	add	sp, #24
   30be2:	bd80      	pop	{r7, pc}
   30be4:	00030f8d 	.word	0x00030f8d

00030be8 <_is_ip>:

static int _is_ip(const char *host)
{
   30be8:	b580      	push	{r7, lr}
   30bea:	b084      	sub	sp, #16
   30bec:	af00      	add	r7, sp, #0
   30bee:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   30bf0:	2300      	movs	r3, #0
   30bf2:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   30bf4:	e03a      	b.n	30c6c <_is_ip+0x84>
		ch = *host++;
   30bf6:	687b      	ldr	r3, [r7, #4]
   30bf8:	1c5a      	adds	r2, r3, #1
   30bfa:	607a      	str	r2, [r7, #4]
   30bfc:	220b      	movs	r2, #11
   30bfe:	18ba      	adds	r2, r7, r2
   30c00:	781b      	ldrb	r3, [r3, #0]
   30c02:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   30c04:	230b      	movs	r3, #11
   30c06:	18fb      	adds	r3, r7, r3
   30c08:	781b      	ldrb	r3, [r3, #0]
   30c0a:	2b60      	cmp	r3, #96	; 0x60
   30c0c:	d904      	bls.n	30c18 <_is_ip+0x30>
   30c0e:	230b      	movs	r3, #11
   30c10:	18fb      	adds	r3, r7, r3
   30c12:	781b      	ldrb	r3, [r3, #0]
   30c14:	2b66      	cmp	r3, #102	; 0x66
   30c16:	d913      	bls.n	30c40 <_is_ip+0x58>
   30c18:	230b      	movs	r3, #11
   30c1a:	18fb      	adds	r3, r7, r3
   30c1c:	781b      	ldrb	r3, [r3, #0]
   30c1e:	2b40      	cmp	r3, #64	; 0x40
   30c20:	d904      	bls.n	30c2c <_is_ip+0x44>
   30c22:	230b      	movs	r3, #11
   30c24:	18fb      	adds	r3, r7, r3
   30c26:	781b      	ldrb	r3, [r3, #0]
   30c28:	2b46      	cmp	r3, #70	; 0x46
   30c2a:	d909      	bls.n	30c40 <_is_ip+0x58>
   30c2c:	230b      	movs	r3, #11
   30c2e:	18fb      	adds	r3, r7, r3
   30c30:	781b      	ldrb	r3, [r3, #0]
   30c32:	2b3a      	cmp	r3, #58	; 0x3a
   30c34:	d004      	beq.n	30c40 <_is_ip+0x58>
   30c36:	230b      	movs	r3, #11
   30c38:	18fb      	adds	r3, r7, r3
   30c3a:	781b      	ldrb	r3, [r3, #0]
   30c3c:	2b2f      	cmp	r3, #47	; 0x2f
   30c3e:	d102      	bne.n	30c46 <_is_ip+0x5e>
			isv6 = 1;
   30c40:	2301      	movs	r3, #1
   30c42:	60fb      	str	r3, [r7, #12]
   30c44:	e012      	b.n	30c6c <_is_ip+0x84>
		} else if (ch == '.') {
   30c46:	230b      	movs	r3, #11
   30c48:	18fb      	adds	r3, r7, r3
   30c4a:	781b      	ldrb	r3, [r3, #0]
   30c4c:	2b2e      	cmp	r3, #46	; 0x2e
   30c4e:	d104      	bne.n	30c5a <_is_ip+0x72>
			if (isv6) {
   30c50:	68fb      	ldr	r3, [r7, #12]
   30c52:	2b00      	cmp	r3, #0
   30c54:	d00a      	beq.n	30c6c <_is_ip+0x84>
				return 0;
   30c56:	2300      	movs	r3, #0
   30c58:	e00d      	b.n	30c76 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   30c5a:	230b      	movs	r3, #11
   30c5c:	18fb      	adds	r3, r7, r3
   30c5e:	781b      	ldrb	r3, [r3, #0]
   30c60:	2230      	movs	r2, #48	; 0x30
   30c62:	4013      	ands	r3, r2
   30c64:	2b30      	cmp	r3, #48	; 0x30
   30c66:	d001      	beq.n	30c6c <_is_ip+0x84>
			return 0;
   30c68:	2300      	movs	r3, #0
   30c6a:	e004      	b.n	30c76 <_is_ip+0x8e>
	while (*host != '\0') {
   30c6c:	687b      	ldr	r3, [r7, #4]
   30c6e:	781b      	ldrb	r3, [r3, #0]
   30c70:	2b00      	cmp	r3, #0
   30c72:	d1c0      	bne.n	30bf6 <_is_ip+0xe>
		}
	}
	return 1;
   30c74:	2301      	movs	r3, #1
}
   30c76:	0018      	movs	r0, r3
   30c78:	46bd      	mov	sp, r7
   30c7a:	b004      	add	sp, #16
   30c7c:	bd80      	pop	{r7, pc}
	...

00030c80 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   30c80:	b5b0      	push	{r4, r5, r7, lr}
   30c82:	b08e      	sub	sp, #56	; 0x38
   30c84:	af00      	add	r7, sp, #0
   30c86:	60f8      	str	r0, [r7, #12]
   30c88:	60b9      	str	r1, [r7, #8]
   30c8a:	603b      	str	r3, [r7, #0]
   30c8c:	1dfb      	adds	r3, r7, #7
   30c8e:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   30c90:	2337      	movs	r3, #55	; 0x37
   30c92:	18fb      	adds	r3, r7, r3
   30c94:	2200      	movs	r2, #0
   30c96:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   30c98:	2300      	movs	r3, #0
   30c9a:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   30c9c:	2300      	movs	r3, #0
   30c9e:	633b      	str	r3, [r7, #48]	; 0x30
   30ca0:	2300      	movs	r3, #0
   30ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
   30ca4:	2300      	movs	r3, #0
   30ca6:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   30ca8:	68fb      	ldr	r3, [r7, #12]
   30caa:	2b00      	cmp	r3, #0
   30cac:	d102      	bne.n	30cb4 <http_client_send_request+0x34>
		return -EINVAL;
   30cae:	2316      	movs	r3, #22
   30cb0:	425b      	negs	r3, r3
   30cb2:	e145      	b.n	30f40 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   30cb4:	68fb      	ldr	r3, [r7, #12]
   30cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30cb8:	2b02      	cmp	r3, #2
   30cba:	d902      	bls.n	30cc2 <http_client_send_request+0x42>
		return -EBUSY;
   30cbc:	2310      	movs	r3, #16
   30cbe:	425b      	negs	r3, r3
   30cc0:	e13e      	b.n	30f40 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   30cc2:	49a1      	ldr	r1, [pc, #644]	; (30f48 <http_client_send_request+0x2c8>)
   30cc4:	68bb      	ldr	r3, [r7, #8]
   30cc6:	2207      	movs	r2, #7
   30cc8:	0018      	movs	r0, r3
   30cca:	4ba0      	ldr	r3, [pc, #640]	; (30f4c <http_client_send_request+0x2cc>)
   30ccc:	4798      	blx	r3
   30cce:	1e03      	subs	r3, r0, #0
   30cd0:	d102      	bne.n	30cd8 <http_client_send_request+0x58>
		i = 7;
   30cd2:	2307      	movs	r3, #7
   30cd4:	633b      	str	r3, [r7, #48]	; 0x30
   30cd6:	e009      	b.n	30cec <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   30cd8:	499d      	ldr	r1, [pc, #628]	; (30f50 <http_client_send_request+0x2d0>)
   30cda:	68bb      	ldr	r3, [r7, #8]
   30cdc:	2208      	movs	r2, #8
   30cde:	0018      	movs	r0, r3
   30ce0:	4b9a      	ldr	r3, [pc, #616]	; (30f4c <http_client_send_request+0x2cc>)
   30ce2:	4798      	blx	r3
   30ce4:	1e03      	subs	r3, r0, #0
   30ce6:	d101      	bne.n	30cec <http_client_send_request+0x6c>
		i = 8;
   30ce8:	2308      	movs	r3, #8
   30cea:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   30cec:	68fb      	ldr	r3, [r7, #12]
   30cee:	1c5c      	adds	r4, r3, #1
   30cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30cf2:	68ba      	ldr	r2, [r7, #8]
   30cf4:	18d5      	adds	r5, r2, r3
   30cf6:	68fb      	ldr	r3, [r7, #12]
   30cf8:	3301      	adds	r3, #1
   30cfa:	0018      	movs	r0, r3
   30cfc:	4b95      	ldr	r3, [pc, #596]	; (30f54 <http_client_send_request+0x2d4>)
   30cfe:	4798      	blx	r3
   30d00:	0003      	movs	r3, r0
   30d02:	001a      	movs	r2, r3
   30d04:	0029      	movs	r1, r5
   30d06:	0020      	movs	r0, r4
   30d08:	4b90      	ldr	r3, [pc, #576]	; (30f4c <http_client_send_request+0x2cc>)
   30d0a:	4798      	blx	r3
   30d0c:	0003      	movs	r3, r0
   30d0e:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   30d10:	e00d      	b.n	30d2e <http_client_send_request+0xae>
		module->host[j++] = url[i];
   30d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   30d14:	1c5a      	adds	r2, r3, #1
   30d16:	62fa      	str	r2, [r7, #44]	; 0x2c
   30d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   30d1a:	68b9      	ldr	r1, [r7, #8]
   30d1c:	188a      	adds	r2, r1, r2
   30d1e:	7811      	ldrb	r1, [r2, #0]
   30d20:	68fa      	ldr	r2, [r7, #12]
   30d22:	18d3      	adds	r3, r2, r3
   30d24:	1c0a      	adds	r2, r1, #0
   30d26:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   30d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30d2a:	3301      	adds	r3, #1
   30d2c:	633b      	str	r3, [r7, #48]	; 0x30
   30d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30d30:	68ba      	ldr	r2, [r7, #8]
   30d32:	18d3      	adds	r3, r2, r3
   30d34:	781b      	ldrb	r3, [r3, #0]
   30d36:	2b00      	cmp	r3, #0
   30d38:	d005      	beq.n	30d46 <http_client_send_request+0xc6>
   30d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30d3c:	68ba      	ldr	r2, [r7, #8]
   30d3e:	18d3      	adds	r3, r2, r3
   30d40:	781b      	ldrb	r3, [r3, #0]
   30d42:	2b2f      	cmp	r3, #47	; 0x2f
   30d44:	d1e5      	bne.n	30d12 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   30d46:	68fa      	ldr	r2, [r7, #12]
   30d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   30d4a:	18d3      	adds	r3, r2, r3
   30d4c:	3301      	adds	r3, #1
   30d4e:	2200      	movs	r2, #0
   30d50:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   30d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30d54:	68ba      	ldr	r2, [r7, #8]
   30d56:	18d3      	adds	r3, r2, r3
   30d58:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   30d5a:	68fb      	ldr	r3, [r7, #12]
   30d5c:	3301      	adds	r3, #1
   30d5e:	781b      	ldrb	r3, [r3, #0]
   30d60:	2b00      	cmp	r3, #0
   30d62:	d102      	bne.n	30d6a <http_client_send_request+0xea>
		return -EINVAL;
   30d64:	2316      	movs	r3, #22
   30d66:	425b      	negs	r3, r3
   30d68:	e0ea      	b.n	30f40 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   30d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30d6c:	0018      	movs	r0, r3
   30d6e:	4b79      	ldr	r3, [pc, #484]	; (30f54 <http_client_send_request+0x2d4>)
   30d70:	4798      	blx	r3
   30d72:	0003      	movs	r3, r0
   30d74:	2b3f      	cmp	r3, #63	; 0x3f
   30d76:	d902      	bls.n	30d7e <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   30d78:	235b      	movs	r3, #91	; 0x5b
   30d7a:	425b      	negs	r3, r3
   30d7c:	e0e0      	b.n	30f40 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   30d7e:	68fb      	ldr	r3, [r7, #12]
   30d80:	22d4      	movs	r2, #212	; 0xd4
   30d82:	589b      	ldr	r3, [r3, r2]
   30d84:	2b00      	cmp	r3, #0
   30d86:	d005      	beq.n	30d94 <http_client_send_request+0x114>
		free(module->req.ext_header);
   30d88:	68fb      	ldr	r3, [r7, #12]
   30d8a:	22d4      	movs	r2, #212	; 0xd4
   30d8c:	589b      	ldr	r3, [r3, r2]
   30d8e:	0018      	movs	r0, r3
   30d90:	4b71      	ldr	r3, [pc, #452]	; (30f58 <http_client_send_request+0x2d8>)
   30d92:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   30d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30d96:	2b00      	cmp	r3, #0
   30d98:	d010      	beq.n	30dbc <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   30d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30d9c:	0018      	movs	r0, r3
   30d9e:	4b6f      	ldr	r3, [pc, #444]	; (30f5c <http_client_send_request+0x2dc>)
   30da0:	4798      	blx	r3
   30da2:	0003      	movs	r3, r0
   30da4:	0019      	movs	r1, r3
   30da6:	68fb      	ldr	r3, [r7, #12]
   30da8:	22d4      	movs	r2, #212	; 0xd4
   30daa:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   30dac:	68fb      	ldr	r3, [r7, #12]
   30dae:	22d4      	movs	r2, #212	; 0xd4
   30db0:	589b      	ldr	r3, [r3, r2]
   30db2:	2b00      	cmp	r3, #0
   30db4:	d106      	bne.n	30dc4 <http_client_send_request+0x144>
			return -ENOMEM;
   30db6:	230c      	movs	r3, #12
   30db8:	425b      	negs	r3, r3
   30dba:	e0c1      	b.n	30f40 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   30dbc:	68fb      	ldr	r3, [r7, #12]
   30dbe:	22d4      	movs	r2, #212	; 0xd4
   30dc0:	2100      	movs	r1, #0
   30dc2:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   30dc4:	68fb      	ldr	r3, [r7, #12]
   30dc6:	2241      	movs	r2, #65	; 0x41
   30dc8:	5c99      	ldrb	r1, [r3, r2]
   30dca:	2001      	movs	r0, #1
   30dcc:	4381      	bics	r1, r0
   30dce:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   30dd0:	68fb      	ldr	r3, [r7, #12]
   30dd2:	2200      	movs	r2, #0
   30dd4:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   30dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30dd8:	781b      	ldrb	r3, [r3, #0]
   30dda:	2b2f      	cmp	r3, #47	; 0x2f
   30ddc:	d107      	bne.n	30dee <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   30dde:	68fb      	ldr	r3, [r7, #12]
   30de0:	3370      	adds	r3, #112	; 0x70
   30de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30de4:	0011      	movs	r1, r2
   30de6:	0018      	movs	r0, r3
   30de8:	4b5d      	ldr	r3, [pc, #372]	; (30f60 <http_client_send_request+0x2e0>)
   30dea:	4798      	blx	r3
   30dec:	e00f      	b.n	30e0e <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   30dee:	68fb      	ldr	r3, [r7, #12]
   30df0:	2270      	movs	r2, #112	; 0x70
   30df2:	212f      	movs	r1, #47	; 0x2f
   30df4:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   30df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30df8:	781b      	ldrb	r3, [r3, #0]
   30dfa:	2b00      	cmp	r3, #0
   30dfc:	d007      	beq.n	30e0e <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   30dfe:	68fb      	ldr	r3, [r7, #12]
   30e00:	3370      	adds	r3, #112	; 0x70
   30e02:	3301      	adds	r3, #1
   30e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30e06:	0011      	movs	r1, r2
   30e08:	0018      	movs	r0, r3
   30e0a:	4b55      	ldr	r3, [pc, #340]	; (30f60 <http_client_send_request+0x2e0>)
   30e0c:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   30e0e:	683b      	ldr	r3, [r7, #0]
   30e10:	2b00      	cmp	r3, #0
   30e12:	d007      	beq.n	30e24 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   30e14:	68fb      	ldr	r3, [r7, #12]
   30e16:	33b0      	adds	r3, #176	; 0xb0
   30e18:	6839      	ldr	r1, [r7, #0]
   30e1a:	2218      	movs	r2, #24
   30e1c:	0018      	movs	r0, r3
   30e1e:	4b51      	ldr	r3, [pc, #324]	; (30f64 <http_client_send_request+0x2e4>)
   30e20:	4798      	blx	r3
   30e22:	e006      	b.n	30e32 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   30e24:	68fb      	ldr	r3, [r7, #12]
   30e26:	33b0      	adds	r3, #176	; 0xb0
   30e28:	2218      	movs	r2, #24
   30e2a:	2100      	movs	r1, #0
   30e2c:	0018      	movs	r0, r3
   30e2e:	4b4e      	ldr	r3, [pc, #312]	; (30f68 <http_client_send_request+0x2e8>)
   30e30:	4798      	blx	r3
	}

	module->req.method = method;
   30e32:	68fb      	ldr	r3, [r7, #12]
   30e34:	1dfa      	adds	r2, r7, #7
   30e36:	21c8      	movs	r1, #200	; 0xc8
   30e38:	7812      	ldrb	r2, [r2, #0]
   30e3a:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   30e3c:	68fb      	ldr	r3, [r7, #12]
   30e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30e40:	2b01      	cmp	r3, #1
   30e42:	d003      	beq.n	30e4c <http_client_send_request+0x1cc>
   30e44:	d316      	bcc.n	30e74 <http_client_send_request+0x1f4>
   30e46:	2b02      	cmp	r3, #2
   30e48:	d004      	beq.n	30e54 <http_client_send_request+0x1d4>
   30e4a:	e074      	b.n	30f36 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   30e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30e4e:	2b00      	cmp	r3, #0
   30e50:	d100      	bne.n	30e54 <http_client_send_request+0x1d4>
   30e52:	e073      	b.n	30f3c <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   30e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30e56:	2b00      	cmp	r3, #0
   30e58:	d107      	bne.n	30e6a <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   30e5a:	68fb      	ldr	r3, [r7, #12]
   30e5c:	2203      	movs	r2, #3
   30e5e:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   30e60:	68fb      	ldr	r3, [r7, #12]
   30e62:	0018      	movs	r0, r3
   30e64:	4b41      	ldr	r3, [pc, #260]	; (30f6c <http_client_send_request+0x2ec>)
   30e66:	4798      	blx	r3
			break;
   30e68:	e069      	b.n	30f3e <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   30e6a:	68fb      	ldr	r3, [r7, #12]
   30e6c:	2100      	movs	r1, #0
   30e6e:	0018      	movs	r0, r3
   30e70:	4b3f      	ldr	r3, [pc, #252]	; (30f70 <http_client_send_request+0x2f0>)
   30e72:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   30e74:	68fb      	ldr	r3, [r7, #12]
   30e76:	2252      	movs	r2, #82	; 0x52
   30e78:	5c9b      	ldrb	r3, [r3, r2]
   30e7a:	2b00      	cmp	r3, #0
   30e7c:	d007      	beq.n	30e8e <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   30e7e:	2337      	movs	r3, #55	; 0x37
   30e80:	18fb      	adds	r3, r7, r3
   30e82:	2237      	movs	r2, #55	; 0x37
   30e84:	18ba      	adds	r2, r7, r2
   30e86:	7812      	ldrb	r2, [r2, #0]
   30e88:	2101      	movs	r1, #1
   30e8a:	430a      	orrs	r2, r1
   30e8c:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   30e8e:	2337      	movs	r3, #55	; 0x37
   30e90:	18fb      	adds	r3, r7, r3
   30e92:	781b      	ldrb	r3, [r3, #0]
   30e94:	001a      	movs	r2, r3
   30e96:	2101      	movs	r1, #1
   30e98:	2002      	movs	r0, #2
   30e9a:	4b36      	ldr	r3, [pc, #216]	; (30f74 <http_client_send_request+0x2f4>)
   30e9c:	4798      	blx	r3
   30e9e:	0003      	movs	r3, r0
   30ea0:	001a      	movs	r2, r3
   30ea2:	68fb      	ldr	r3, [r7, #12]
   30ea4:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   30ea6:	68fb      	ldr	r3, [r7, #12]
   30ea8:	781b      	ldrb	r3, [r3, #0]
   30eaa:	b25b      	sxtb	r3, r3
   30eac:	2b00      	cmp	r3, #0
   30eae:	db3f      	blt.n	30f30 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   30eb0:	68fb      	ldr	r3, [r7, #12]
   30eb2:	781b      	ldrb	r3, [r3, #0]
   30eb4:	b25b      	sxtb	r3, r3
   30eb6:	001a      	movs	r2, r3
   30eb8:	4b2f      	ldr	r3, [pc, #188]	; (30f78 <http_client_send_request+0x2f8>)
   30eba:	0092      	lsls	r2, r2, #2
   30ebc:	68f9      	ldr	r1, [r7, #12]
   30ebe:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   30ec0:	68fb      	ldr	r3, [r7, #12]
   30ec2:	3301      	adds	r3, #1
   30ec4:	0018      	movs	r0, r3
   30ec6:	4b2d      	ldr	r3, [pc, #180]	; (30f7c <http_client_send_request+0x2fc>)
   30ec8:	4798      	blx	r3
   30eca:	1e03      	subs	r3, r0, #0
   30ecc:	d027      	beq.n	30f1e <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   30ece:	2314      	movs	r3, #20
   30ed0:	18fb      	adds	r3, r7, r3
   30ed2:	2202      	movs	r2, #2
   30ed4:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30ed6:	68fb      	ldr	r3, [r7, #12]
   30ed8:	2250      	movs	r2, #80	; 0x50
   30eda:	5a9b      	ldrh	r3, [r3, r2]
   30edc:	021b      	lsls	r3, r3, #8
   30ede:	b21a      	sxth	r2, r3
   30ee0:	68fb      	ldr	r3, [r7, #12]
   30ee2:	2150      	movs	r1, #80	; 0x50
   30ee4:	5a5b      	ldrh	r3, [r3, r1]
   30ee6:	0a1b      	lsrs	r3, r3, #8
   30ee8:	b29b      	uxth	r3, r3
   30eea:	b21b      	sxth	r3, r3
   30eec:	4313      	orrs	r3, r2
   30eee:	b21b      	sxth	r3, r3
   30ef0:	b29a      	uxth	r2, r3
   30ef2:	2314      	movs	r3, #20
   30ef4:	18fb      	adds	r3, r7, r3
   30ef6:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   30ef8:	68fb      	ldr	r3, [r7, #12]
   30efa:	3301      	adds	r3, #1
   30efc:	0018      	movs	r0, r3
   30efe:	4b20      	ldr	r3, [pc, #128]	; (30f80 <http_client_send_request+0x300>)
   30f00:	4798      	blx	r3
   30f02:	0002      	movs	r2, r0
   30f04:	2314      	movs	r3, #20
   30f06:	18fb      	adds	r3, r7, r3
   30f08:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   30f0a:	68fb      	ldr	r3, [r7, #12]
   30f0c:	781b      	ldrb	r3, [r3, #0]
   30f0e:	b25b      	sxtb	r3, r3
   30f10:	2214      	movs	r2, #20
   30f12:	18b9      	adds	r1, r7, r2
   30f14:	2210      	movs	r2, #16
   30f16:	0018      	movs	r0, r3
   30f18:	4b1a      	ldr	r3, [pc, #104]	; (30f84 <http_client_send_request+0x304>)
   30f1a:	4798      	blx	r3
   30f1c:	e004      	b.n	30f28 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   30f1e:	68fb      	ldr	r3, [r7, #12]
   30f20:	3301      	adds	r3, #1
   30f22:	0018      	movs	r0, r3
   30f24:	4b18      	ldr	r3, [pc, #96]	; (30f88 <http_client_send_request+0x308>)
   30f26:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   30f28:	68fb      	ldr	r3, [r7, #12]
   30f2a:	2201      	movs	r2, #1
   30f2c:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   30f2e:	e006      	b.n	30f3e <http_client_send_request+0x2be>
			return -ENOSPC;
   30f30:	231c      	movs	r3, #28
   30f32:	425b      	negs	r3, r3
   30f34:	e004      	b.n	30f40 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   30f36:	230b      	movs	r3, #11
   30f38:	425b      	negs	r3, r3
   30f3a:	e001      	b.n	30f40 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   30f3c:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   30f3e:	2300      	movs	r3, #0
}
   30f40:	0018      	movs	r0, r3
   30f42:	46bd      	mov	sp, r7
   30f44:	b00e      	add	sp, #56	; 0x38
   30f46:	bdb0      	pop	{r4, r5, r7, pc}
   30f48:	0003994c 	.word	0x0003994c
   30f4c:	00034aa5 	.word	0x00034aa5
   30f50:	00039954 	.word	0x00039954
   30f54:	00034a97 	.word	0x00034a97
   30f58:	00034695 	.word	0x00034695
   30f5c:	00034a5d 	.word	0x00034a5d
   30f60:	00034a4b 	.word	0x00034a4b
   30f64:	000346a9 	.word	0x000346a9
   30f68:	000346df 	.word	0x000346df
   30f6c:	000310e1 	.word	0x000310e1
   30f70:	00030f8d 	.word	0x00030f8d
   30f74:	0002529d 	.word	0x0002529d
   30f78:	20004598 	.word	0x20004598
   30f7c:	00030be9 	.word	0x00030be9
   30f80:	000259e9 	.word	0x000259e9
   30f84:	000254b1 	.word	0x000254b1
   30f88:	00025af1 	.word	0x00025af1

00030f8c <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   30f8c:	b580      	push	{r7, lr}
   30f8e:	b086      	sub	sp, #24
   30f90:	af00      	add	r7, sp, #0
   30f92:	6078      	str	r0, [r7, #4]
   30f94:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   30f96:	687b      	ldr	r3, [r7, #4]
   30f98:	22c0      	movs	r2, #192	; 0xc0
   30f9a:	589b      	ldr	r3, [r3, r2]
   30f9c:	2b00      	cmp	r3, #0
   30f9e:	d007      	beq.n	30fb0 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   30fa0:	687b      	ldr	r3, [r7, #4]
   30fa2:	22c0      	movs	r2, #192	; 0xc0
   30fa4:	589b      	ldr	r3, [r3, r2]
   30fa6:	687a      	ldr	r2, [r7, #4]
   30fa8:	21c4      	movs	r1, #196	; 0xc4
   30faa:	5852      	ldr	r2, [r2, r1]
   30fac:	0010      	movs	r0, r2
   30fae:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   30fb0:	687b      	ldr	r3, [r7, #4]
   30fb2:	33b0      	adds	r3, #176	; 0xb0
   30fb4:	2218      	movs	r2, #24
   30fb6:	2100      	movs	r1, #0
   30fb8:	0018      	movs	r0, r3
   30fba:	4b24      	ldr	r3, [pc, #144]	; (3104c <_http_client_clear_conn+0xc0>)
   30fbc:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   30fbe:	687b      	ldr	r3, [r7, #4]
   30fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30fc2:	2b00      	cmp	r3, #0
   30fc4:	d005      	beq.n	30fd2 <_http_client_clear_conn+0x46>
		close(module->sock);
   30fc6:	687b      	ldr	r3, [r7, #4]
   30fc8:	781b      	ldrb	r3, [r3, #0]
   30fca:	b25b      	sxtb	r3, r3
   30fcc:	0018      	movs	r0, r3
   30fce:	4b20      	ldr	r3, [pc, #128]	; (31050 <_http_client_clear_conn+0xc4>)
   30fd0:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   30fd2:	687b      	ldr	r3, [r7, #4]
   30fd4:	781b      	ldrb	r3, [r3, #0]
   30fd6:	b25b      	sxtb	r3, r3
   30fd8:	001a      	movs	r2, r3
   30fda:	4b1e      	ldr	r3, [pc, #120]	; (31054 <_http_client_clear_conn+0xc8>)
   30fdc:	0092      	lsls	r2, r2, #2
   30fde:	2100      	movs	r1, #0
   30fe0:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   30fe2:	687b      	ldr	r3, [r7, #4]
   30fe4:	336c      	adds	r3, #108	; 0x6c
   30fe6:	226c      	movs	r2, #108	; 0x6c
   30fe8:	2100      	movs	r1, #0
   30fea:	0018      	movs	r0, r3
   30fec:	4b17      	ldr	r3, [pc, #92]	; (3104c <_http_client_clear_conn+0xc0>)
   30fee:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   30ff0:	687b      	ldr	r3, [r7, #4]
   30ff2:	33d8      	adds	r3, #216	; 0xd8
   30ff4:	2210      	movs	r2, #16
   30ff6:	2100      	movs	r1, #0
   30ff8:	0018      	movs	r0, r3
   30ffa:	4b14      	ldr	r3, [pc, #80]	; (3104c <_http_client_clear_conn+0xc0>)
   30ffc:	4798      	blx	r3
	module->req.state = STATE_INIT;
   30ffe:	687b      	ldr	r3, [r7, #4]
   31000:	2200      	movs	r2, #0
   31002:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   31004:	687b      	ldr	r3, [r7, #4]
   31006:	22d8      	movs	r2, #216	; 0xd8
   31008:	2100      	movs	r1, #0
   3100a:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   3100c:	687b      	ldr	r3, [r7, #4]
   3100e:	2241      	movs	r2, #65	; 0x41
   31010:	5c99      	ldrb	r1, [r3, r2]
   31012:	2001      	movs	r0, #1
   31014:	4381      	bics	r1, r0
   31016:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   31018:	687b      	ldr	r3, [r7, #4]
   3101a:	2241      	movs	r2, #65	; 0x41
   3101c:	5c99      	ldrb	r1, [r3, r2]
   3101e:	2002      	movs	r0, #2
   31020:	4381      	bics	r1, r0
   31022:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   31024:	230c      	movs	r3, #12
   31026:	18fb      	adds	r3, r7, r3
   31028:	683a      	ldr	r2, [r7, #0]
   3102a:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   3102c:	687b      	ldr	r3, [r7, #4]
   3102e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31030:	2b00      	cmp	r3, #0
   31032:	d006      	beq.n	31042 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   31034:	687b      	ldr	r3, [r7, #4]
   31036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31038:	220c      	movs	r2, #12
   3103a:	18ba      	adds	r2, r7, r2
   3103c:	6878      	ldr	r0, [r7, #4]
   3103e:	2104      	movs	r1, #4
   31040:	4798      	blx	r3
	}
}
   31042:	46c0      	nop			; (mov r8, r8)
   31044:	46bd      	mov	sp, r7
   31046:	b006      	add	sp, #24
   31048:	bd80      	pop	{r7, pc}
   3104a:	46c0      	nop			; (mov r8, r8)
   3104c:	000346df 	.word	0x000346df
   31050:	000258a9 	.word	0x000258a9
   31054:	20004598 	.word	0x20004598

00031058 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   31058:	b590      	push	{r4, r7, lr}
   3105a:	b087      	sub	sp, #28
   3105c:	af00      	add	r7, sp, #0
   3105e:	60f8      	str	r0, [r7, #12]
   31060:	60b9      	str	r1, [r7, #8]
   31062:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   31064:	68fb      	ldr	r3, [r7, #12]
   31066:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   31068:	697b      	ldr	r3, [r7, #20]
   3106a:	2241      	movs	r2, #65	; 0x41
   3106c:	5c99      	ldrb	r1, [r3, r2]
   3106e:	2001      	movs	r0, #1
   31070:	4301      	orrs	r1, r0
   31072:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   31074:	697b      	ldr	r3, [r7, #20]
   31076:	2000      	movs	r0, #0
   31078:	5618      	ldrsb	r0, [r3, r0]
   3107a:	687b      	ldr	r3, [r7, #4]
   3107c:	b29a      	uxth	r2, r3
   3107e:	68b9      	ldr	r1, [r7, #8]
   31080:	2300      	movs	r3, #0
   31082:	4c14      	ldr	r4, [pc, #80]	; (310d4 <_http_client_send_wait+0x7c>)
   31084:	47a0      	blx	r4
   31086:	0003      	movs	r3, r0
   31088:	613b      	str	r3, [r7, #16]
   3108a:	693b      	ldr	r3, [r7, #16]
   3108c:	2b00      	cmp	r3, #0
   3108e:	da0f      	bge.n	310b0 <_http_client_send_wait+0x58>
		module->sending = 0;
   31090:	697b      	ldr	r3, [r7, #20]
   31092:	2241      	movs	r2, #65	; 0x41
   31094:	5c99      	ldrb	r1, [r3, r2]
   31096:	2001      	movs	r0, #1
   31098:	4381      	bics	r1, r0
   3109a:	5499      	strb	r1, [r3, r2]
		return result;
   3109c:	693b      	ldr	r3, [r7, #16]
   3109e:	e014      	b.n	310ca <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   310a0:	2000      	movs	r0, #0
   310a2:	4b0d      	ldr	r3, [pc, #52]	; (310d8 <_http_client_send_wait+0x80>)
   310a4:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   310a6:	697b      	ldr	r3, [r7, #20]
   310a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   310aa:	0018      	movs	r0, r3
   310ac:	4b0b      	ldr	r3, [pc, #44]	; (310dc <_http_client_send_wait+0x84>)
   310ae:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   310b0:	697b      	ldr	r3, [r7, #20]
   310b2:	2241      	movs	r2, #65	; 0x41
   310b4:	5c9b      	ldrb	r3, [r3, r2]
   310b6:	2201      	movs	r2, #1
   310b8:	4013      	ands	r3, r2
   310ba:	b2db      	uxtb	r3, r3
   310bc:	2b00      	cmp	r3, #0
   310be:	d003      	beq.n	310c8 <_http_client_send_wait+0x70>
   310c0:	697b      	ldr	r3, [r7, #20]
   310c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   310c4:	2b02      	cmp	r3, #2
   310c6:	d8eb      	bhi.n	310a0 <_http_client_send_wait+0x48>
	}

	return 0;
   310c8:	2300      	movs	r3, #0
}
   310ca:	0018      	movs	r0, r3
   310cc:	46bd      	mov	sp, r7
   310ce:	b007      	add	sp, #28
   310d0:	bd90      	pop	{r4, r7, pc}
   310d2:	46c0      	nop			; (mov r8, r8)
   310d4:	000255c5 	.word	0x000255c5
   310d8:	00021c71 	.word	0x00021c71
   310dc:	00032365 	.word	0x00032365

000310e0 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   310e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   310e2:	46c6      	mov	lr, r8
   310e4:	b500      	push	{lr}
   310e6:	b0a0      	sub	sp, #128	; 0x80
   310e8:	af02      	add	r7, sp, #8
   310ea:	61f8      	str	r0, [r7, #28]
   310ec:	4668      	mov	r0, sp
   310ee:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   310f0:	2318      	movs	r3, #24
   310f2:	2218      	movs	r2, #24
   310f4:	18ba      	adds	r2, r7, r2
   310f6:	18d0      	adds	r0, r2, r3
   310f8:	4bbd      	ldr	r3, [pc, #756]	; (313f0 <_http_client_request+0x310>)
   310fa:	469c      	mov	ip, r3
   310fc:	4663      	mov	r3, ip
   310fe:	cb16      	ldmia	r3!, {r1, r2, r4}
   31100:	c016      	stmia	r0!, {r1, r2, r4}
   31102:	469c      	mov	ip, r3
   31104:	4663      	mov	r3, ip
   31106:	681b      	ldr	r3, [r3, #0]
   31108:	469c      	mov	ip, r3
   3110a:	4663      	mov	r3, ip
   3110c:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   3110e:	69f8      	ldr	r0, [r7, #28]
   31110:	6e40      	ldr	r0, [r0, #100]	; 0x64
   31112:	4684      	mov	ip, r0
   31114:	2301      	movs	r3, #1
   31116:	425b      	negs	r3, r3
   31118:	4698      	mov	r8, r3
   3111a:	44c4      	add	ip, r8
   3111c:	4663      	mov	r3, ip
   3111e:	66fb      	str	r3, [r7, #108]	; 0x6c
   31120:	6038      	str	r0, [r7, #0]
   31122:	2300      	movs	r3, #0
   31124:	607b      	str	r3, [r7, #4]
   31126:	6839      	ldr	r1, [r7, #0]
   31128:	687a      	ldr	r2, [r7, #4]
   3112a:	000b      	movs	r3, r1
   3112c:	0f5b      	lsrs	r3, r3, #29
   3112e:	469c      	mov	ip, r3
   31130:	0013      	movs	r3, r2
   31132:	00db      	lsls	r3, r3, #3
   31134:	617b      	str	r3, [r7, #20]
   31136:	4663      	mov	r3, ip
   31138:	697c      	ldr	r4, [r7, #20]
   3113a:	431c      	orrs	r4, r3
   3113c:	617c      	str	r4, [r7, #20]
   3113e:	000b      	movs	r3, r1
   31140:	00db      	lsls	r3, r3, #3
   31142:	613b      	str	r3, [r7, #16]
   31144:	0005      	movs	r5, r0
   31146:	2200      	movs	r2, #0
   31148:	0016      	movs	r6, r2
   3114a:	0f6a      	lsrs	r2, r5, #29
   3114c:	00f3      	lsls	r3, r6, #3
   3114e:	60fb      	str	r3, [r7, #12]
   31150:	68fb      	ldr	r3, [r7, #12]
   31152:	4313      	orrs	r3, r2
   31154:	60fb      	str	r3, [r7, #12]
   31156:	00eb      	lsls	r3, r5, #3
   31158:	60bb      	str	r3, [r7, #8]
   3115a:	1dc3      	adds	r3, r0, #7
   3115c:	08db      	lsrs	r3, r3, #3
   3115e:	00db      	lsls	r3, r3, #3
   31160:	466a      	mov	r2, sp
   31162:	1ad3      	subs	r3, r2, r3
   31164:	469d      	mov	sp, r3
   31166:	ab02      	add	r3, sp, #8
   31168:	3300      	adds	r3, #0
   3116a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   3116c:	69fb      	ldr	r3, [r7, #28]
   3116e:	2b00      	cmp	r3, #0
   31170:	d100      	bne.n	31174 <_http_client_request+0x94>
   31172:	e346      	b.n	31802 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   31174:	69fb      	ldr	r3, [r7, #28]
   31176:	2241      	movs	r2, #65	; 0x41
   31178:	5c9b      	ldrb	r3, [r3, r2]
   3117a:	2201      	movs	r2, #1
   3117c:	4013      	ands	r3, r2
   3117e:	b2db      	uxtb	r3, r3
   31180:	2b00      	cmp	r3, #0
   31182:	d000      	beq.n	31186 <_http_client_request+0xa6>
   31184:	e33f      	b.n	31806 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   31186:	69fb      	ldr	r3, [r7, #28]
   31188:	33b0      	adds	r3, #176	; 0xb0
   3118a:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   3118c:	69fb      	ldr	r3, [r7, #28]
   3118e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31190:	2b03      	cmp	r3, #3
   31192:	d003      	beq.n	3119c <_http_client_request+0xbc>
   31194:	2b04      	cmp	r3, #4
   31196:	d100      	bne.n	3119a <_http_client_request+0xba>
   31198:	e1b3      	b.n	31502 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   3119a:	e32f      	b.n	317fc <_http_client_request+0x71c>
		module->req.content_length = 0;
   3119c:	69fb      	ldr	r3, [r7, #28]
   3119e:	22cc      	movs	r2, #204	; 0xcc
   311a0:	2100      	movs	r1, #0
   311a2:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   311a4:	69fb      	ldr	r3, [r7, #28]
   311a6:	22d0      	movs	r2, #208	; 0xd0
   311a8:	2100      	movs	r1, #0
   311aa:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   311ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   311ae:	69fb      	ldr	r3, [r7, #28]
   311b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   311b2:	4c90      	ldr	r4, [pc, #576]	; (313f4 <_http_client_request+0x314>)
   311b4:	2334      	movs	r3, #52	; 0x34
   311b6:	2018      	movs	r0, #24
   311b8:	1838      	adds	r0, r7, r0
   311ba:	18c0      	adds	r0, r0, r3
   311bc:	69fb      	ldr	r3, [r7, #28]
   311be:	9300      	str	r3, [sp, #0]
   311c0:	0023      	movs	r3, r4
   311c2:	4c8d      	ldr	r4, [pc, #564]	; (313f8 <_http_client_request+0x318>)
   311c4:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   311c6:	69fb      	ldr	r3, [r7, #28]
   311c8:	22c8      	movs	r2, #200	; 0xc8
   311ca:	5c9b      	ldrb	r3, [r3, r2]
   311cc:	2b01      	cmp	r3, #1
   311ce:	d10a      	bne.n	311e6 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   311d0:	498a      	ldr	r1, [pc, #552]	; (313fc <_http_client_request+0x31c>)
   311d2:	2334      	movs	r3, #52	; 0x34
   311d4:	2218      	movs	r2, #24
   311d6:	4694      	mov	ip, r2
   311d8:	44bc      	add	ip, r7
   311da:	4463      	add	r3, ip
   311dc:	2204      	movs	r2, #4
   311de:	0018      	movs	r0, r3
   311e0:	4b87      	ldr	r3, [pc, #540]	; (31400 <_http_client_request+0x320>)
   311e2:	4798      	blx	r3
   311e4:	e04e      	b.n	31284 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   311e6:	69fb      	ldr	r3, [r7, #28]
   311e8:	22c8      	movs	r2, #200	; 0xc8
   311ea:	5c9b      	ldrb	r3, [r3, r2]
   311ec:	2b02      	cmp	r3, #2
   311ee:	d10a      	bne.n	31206 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   311f0:	4984      	ldr	r1, [pc, #528]	; (31404 <_http_client_request+0x324>)
   311f2:	2334      	movs	r3, #52	; 0x34
   311f4:	2218      	movs	r2, #24
   311f6:	4694      	mov	ip, r2
   311f8:	44bc      	add	ip, r7
   311fa:	4463      	add	r3, ip
   311fc:	2205      	movs	r2, #5
   311fe:	0018      	movs	r0, r3
   31200:	4b7f      	ldr	r3, [pc, #508]	; (31400 <_http_client_request+0x320>)
   31202:	4798      	blx	r3
   31204:	e03e      	b.n	31284 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   31206:	69fb      	ldr	r3, [r7, #28]
   31208:	22c8      	movs	r2, #200	; 0xc8
   3120a:	5c9b      	ldrb	r3, [r3, r2]
   3120c:	2b03      	cmp	r3, #3
   3120e:	d10a      	bne.n	31226 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   31210:	497d      	ldr	r1, [pc, #500]	; (31408 <_http_client_request+0x328>)
   31212:	2334      	movs	r3, #52	; 0x34
   31214:	2218      	movs	r2, #24
   31216:	4694      	mov	ip, r2
   31218:	44bc      	add	ip, r7
   3121a:	4463      	add	r3, ip
   3121c:	2207      	movs	r2, #7
   3121e:	0018      	movs	r0, r3
   31220:	4b77      	ldr	r3, [pc, #476]	; (31400 <_http_client_request+0x320>)
   31222:	4798      	blx	r3
   31224:	e02e      	b.n	31284 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   31226:	69fb      	ldr	r3, [r7, #28]
   31228:	22c8      	movs	r2, #200	; 0xc8
   3122a:	5c9b      	ldrb	r3, [r3, r2]
   3122c:	2b04      	cmp	r3, #4
   3122e:	d10a      	bne.n	31246 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   31230:	4976      	ldr	r1, [pc, #472]	; (3140c <_http_client_request+0x32c>)
   31232:	2334      	movs	r3, #52	; 0x34
   31234:	2218      	movs	r2, #24
   31236:	4694      	mov	ip, r2
   31238:	44bc      	add	ip, r7
   3123a:	4463      	add	r3, ip
   3123c:	2204      	movs	r2, #4
   3123e:	0018      	movs	r0, r3
   31240:	4b6f      	ldr	r3, [pc, #444]	; (31400 <_http_client_request+0x320>)
   31242:	4798      	blx	r3
   31244:	e01e      	b.n	31284 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   31246:	69fb      	ldr	r3, [r7, #28]
   31248:	22c8      	movs	r2, #200	; 0xc8
   3124a:	5c9b      	ldrb	r3, [r3, r2]
   3124c:	2b05      	cmp	r3, #5
   3124e:	d10a      	bne.n	31266 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   31250:	496f      	ldr	r1, [pc, #444]	; (31410 <_http_client_request+0x330>)
   31252:	2334      	movs	r3, #52	; 0x34
   31254:	2218      	movs	r2, #24
   31256:	4694      	mov	ip, r2
   31258:	44bc      	add	ip, r7
   3125a:	4463      	add	r3, ip
   3125c:	2208      	movs	r2, #8
   3125e:	0018      	movs	r0, r3
   31260:	4b67      	ldr	r3, [pc, #412]	; (31400 <_http_client_request+0x320>)
   31262:	4798      	blx	r3
   31264:	e00e      	b.n	31284 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   31266:	69fb      	ldr	r3, [r7, #28]
   31268:	22c8      	movs	r2, #200	; 0xc8
   3126a:	5c9b      	ldrb	r3, [r3, r2]
   3126c:	2b06      	cmp	r3, #6
   3126e:	d109      	bne.n	31284 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   31270:	4968      	ldr	r1, [pc, #416]	; (31414 <_http_client_request+0x334>)
   31272:	2334      	movs	r3, #52	; 0x34
   31274:	2218      	movs	r2, #24
   31276:	4694      	mov	ip, r2
   31278:	44bc      	add	ip, r7
   3127a:	4463      	add	r3, ip
   3127c:	2205      	movs	r2, #5
   3127e:	0018      	movs	r0, r3
   31280:	4b5f      	ldr	r3, [pc, #380]	; (31400 <_http_client_request+0x320>)
   31282:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   31284:	69fb      	ldr	r3, [r7, #28]
   31286:	3370      	adds	r3, #112	; 0x70
   31288:	001c      	movs	r4, r3
   3128a:	69fb      	ldr	r3, [r7, #28]
   3128c:	3370      	adds	r3, #112	; 0x70
   3128e:	0018      	movs	r0, r3
   31290:	4b61      	ldr	r3, [pc, #388]	; (31418 <_http_client_request+0x338>)
   31292:	4798      	blx	r3
   31294:	0002      	movs	r2, r0
   31296:	2334      	movs	r3, #52	; 0x34
   31298:	2118      	movs	r1, #24
   3129a:	468c      	mov	ip, r1
   3129c:	44bc      	add	ip, r7
   3129e:	4463      	add	r3, ip
   312a0:	0021      	movs	r1, r4
   312a2:	0018      	movs	r0, r3
   312a4:	4b56      	ldr	r3, [pc, #344]	; (31400 <_http_client_request+0x320>)
   312a6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   312a8:	495c      	ldr	r1, [pc, #368]	; (3141c <_http_client_request+0x33c>)
   312aa:	2334      	movs	r3, #52	; 0x34
   312ac:	2218      	movs	r2, #24
   312ae:	4694      	mov	ip, r2
   312b0:	44bc      	add	ip, r7
   312b2:	4463      	add	r3, ip
   312b4:	220b      	movs	r2, #11
   312b6:	0018      	movs	r0, r3
   312b8:	4b51      	ldr	r3, [pc, #324]	; (31400 <_http_client_request+0x320>)
   312ba:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   312bc:	4958      	ldr	r1, [pc, #352]	; (31420 <_http_client_request+0x340>)
   312be:	2334      	movs	r3, #52	; 0x34
   312c0:	2218      	movs	r2, #24
   312c2:	4694      	mov	ip, r2
   312c4:	44bc      	add	ip, r7
   312c6:	4463      	add	r3, ip
   312c8:	220c      	movs	r2, #12
   312ca:	0018      	movs	r0, r3
   312cc:	4b4c      	ldr	r3, [pc, #304]	; (31400 <_http_client_request+0x320>)
   312ce:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   312d0:	69fb      	ldr	r3, [r7, #28]
   312d2:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   312d4:	69fb      	ldr	r3, [r7, #28]
   312d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   312d8:	0018      	movs	r0, r3
   312da:	4b4f      	ldr	r3, [pc, #316]	; (31418 <_http_client_request+0x338>)
   312dc:	4798      	blx	r3
   312de:	0002      	movs	r2, r0
   312e0:	2334      	movs	r3, #52	; 0x34
   312e2:	2118      	movs	r1, #24
   312e4:	468c      	mov	ip, r1
   312e6:	44bc      	add	ip, r7
   312e8:	4463      	add	r3, ip
   312ea:	0021      	movs	r1, r4
   312ec:	0018      	movs	r0, r3
   312ee:	4b44      	ldr	r3, [pc, #272]	; (31400 <_http_client_request+0x320>)
   312f0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   312f2:	494c      	ldr	r1, [pc, #304]	; (31424 <_http_client_request+0x344>)
   312f4:	2334      	movs	r3, #52	; 0x34
   312f6:	2218      	movs	r2, #24
   312f8:	4694      	mov	ip, r2
   312fa:	44bc      	add	ip, r7
   312fc:	4463      	add	r3, ip
   312fe:	2202      	movs	r2, #2
   31300:	0018      	movs	r0, r3
   31302:	4b3f      	ldr	r3, [pc, #252]	; (31400 <_http_client_request+0x320>)
   31304:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   31306:	4948      	ldr	r1, [pc, #288]	; (31428 <_http_client_request+0x348>)
   31308:	2334      	movs	r3, #52	; 0x34
   3130a:	2218      	movs	r2, #24
   3130c:	4694      	mov	ip, r2
   3130e:	44bc      	add	ip, r7
   31310:	4463      	add	r3, ip
   31312:	2206      	movs	r2, #6
   31314:	0018      	movs	r0, r3
   31316:	4b3a      	ldr	r3, [pc, #232]	; (31400 <_http_client_request+0x320>)
   31318:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   3131a:	69fb      	ldr	r3, [r7, #28]
   3131c:	1c5c      	adds	r4, r3, #1
   3131e:	69fb      	ldr	r3, [r7, #28]
   31320:	3301      	adds	r3, #1
   31322:	0018      	movs	r0, r3
   31324:	4b3c      	ldr	r3, [pc, #240]	; (31418 <_http_client_request+0x338>)
   31326:	4798      	blx	r3
   31328:	0002      	movs	r2, r0
   3132a:	2334      	movs	r3, #52	; 0x34
   3132c:	2118      	movs	r1, #24
   3132e:	468c      	mov	ip, r1
   31330:	44bc      	add	ip, r7
   31332:	4463      	add	r3, ip
   31334:	0021      	movs	r1, r4
   31336:	0018      	movs	r0, r3
   31338:	4b31      	ldr	r3, [pc, #196]	; (31400 <_http_client_request+0x320>)
   3133a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3133c:	4939      	ldr	r1, [pc, #228]	; (31424 <_http_client_request+0x344>)
   3133e:	2334      	movs	r3, #52	; 0x34
   31340:	2218      	movs	r2, #24
   31342:	4694      	mov	ip, r2
   31344:	44bc      	add	ip, r7
   31346:	4463      	add	r3, ip
   31348:	2202      	movs	r2, #2
   3134a:	0018      	movs	r0, r3
   3134c:	4b2c      	ldr	r3, [pc, #176]	; (31400 <_http_client_request+0x320>)
   3134e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   31350:	4936      	ldr	r1, [pc, #216]	; (3142c <_http_client_request+0x34c>)
   31352:	2334      	movs	r3, #52	; 0x34
   31354:	2218      	movs	r2, #24
   31356:	4694      	mov	ip, r2
   31358:	44bc      	add	ip, r7
   3135a:	4463      	add	r3, ip
   3135c:	2218      	movs	r2, #24
   3135e:	0018      	movs	r0, r3
   31360:	4b27      	ldr	r3, [pc, #156]	; (31400 <_http_client_request+0x320>)
   31362:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   31364:	4932      	ldr	r1, [pc, #200]	; (31430 <_http_client_request+0x350>)
   31366:	2334      	movs	r3, #52	; 0x34
   31368:	2218      	movs	r2, #24
   3136a:	4694      	mov	ip, r2
   3136c:	44bc      	add	ip, r7
   3136e:	4463      	add	r3, ip
   31370:	2213      	movs	r2, #19
   31372:	0018      	movs	r0, r3
   31374:	4b22      	ldr	r3, [pc, #136]	; (31400 <_http_client_request+0x320>)
   31376:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   31378:	492e      	ldr	r1, [pc, #184]	; (31434 <_http_client_request+0x354>)
   3137a:	2334      	movs	r3, #52	; 0x34
   3137c:	2218      	movs	r2, #24
   3137e:	4694      	mov	ip, r2
   31380:	44bc      	add	ip, r7
   31382:	4463      	add	r3, ip
   31384:	2217      	movs	r2, #23
   31386:	0018      	movs	r0, r3
   31388:	4b1d      	ldr	r3, [pc, #116]	; (31400 <_http_client_request+0x320>)
   3138a:	4798      	blx	r3
		if (entity->read != NULL) {
   3138c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3138e:	68db      	ldr	r3, [r3, #12]
   31390:	2b00      	cmp	r3, #0
   31392:	d100      	bne.n	31396 <_http_client_request+0x2b6>
   31394:	e088      	b.n	314a8 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   31396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31398:	781b      	ldrb	r3, [r3, #0]
   3139a:	2b00      	cmp	r3, #0
   3139c:	d00f      	beq.n	313be <_http_client_request+0x2de>
				module->req.content_length = -1;
   3139e:	69fb      	ldr	r3, [r7, #28]
   313a0:	21cc      	movs	r1, #204	; 0xcc
   313a2:	2201      	movs	r2, #1
   313a4:	4252      	negs	r2, r2
   313a6:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   313a8:	4923      	ldr	r1, [pc, #140]	; (31438 <_http_client_request+0x358>)
   313aa:	2334      	movs	r3, #52	; 0x34
   313ac:	2218      	movs	r2, #24
   313ae:	4694      	mov	ip, r2
   313b0:	44bc      	add	ip, r7
   313b2:	4463      	add	r3, ip
   313b4:	221c      	movs	r2, #28
   313b6:	0018      	movs	r0, r3
   313b8:	4b11      	ldr	r3, [pc, #68]	; (31400 <_http_client_request+0x320>)
   313ba:	4798      	blx	r3
   313bc:	e074      	b.n	314a8 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   313be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   313c0:	689b      	ldr	r3, [r3, #8]
   313c2:	2b00      	cmp	r3, #0
   313c4:	d070      	beq.n	314a8 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   313c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   313c8:	689a      	ldr	r2, [r3, #8]
   313ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   313cc:	695b      	ldr	r3, [r3, #20]
   313ce:	0018      	movs	r0, r3
   313d0:	4790      	blx	r2
   313d2:	0001      	movs	r1, r0
   313d4:	69fb      	ldr	r3, [r7, #28]
   313d6:	22cc      	movs	r2, #204	; 0xcc
   313d8:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   313da:	69fb      	ldr	r3, [r7, #28]
   313dc:	22cc      	movs	r2, #204	; 0xcc
   313de:	589b      	ldr	r3, [r3, r2]
   313e0:	2b00      	cmp	r3, #0
   313e2:	da2b      	bge.n	3143c <_http_client_request+0x35c>
					module->req.content_length = 0;
   313e4:	69fb      	ldr	r3, [r7, #28]
   313e6:	22cc      	movs	r2, #204	; 0xcc
   313e8:	2100      	movs	r1, #0
   313ea:	5099      	str	r1, [r3, r2]
   313ec:	e05c      	b.n	314a8 <_http_client_request+0x3c8>
   313ee:	46c0      	nop			; (mov r8, r8)
   313f0:	00039a3c 	.word	0x00039a3c
   313f4:	00031059 	.word	0x00031059
   313f8:	00031fc1 	.word	0x00031fc1
   313fc:	00039960 	.word	0x00039960
   31400:	00032041 	.word	0x00032041
   31404:	00039968 	.word	0x00039968
   31408:	00039970 	.word	0x00039970
   3140c:	00039978 	.word	0x00039978
   31410:	00039980 	.word	0x00039980
   31414:	0003998c 	.word	0x0003998c
   31418:	00034a97 	.word	0x00034a97
   3141c:	00039994 	.word	0x00039994
   31420:	000399a0 	.word	0x000399a0
   31424:	000399b0 	.word	0x000399b0
   31428:	000399b4 	.word	0x000399b4
   3142c:	000399bc 	.word	0x000399bc
   31430:	000399d8 	.word	0x000399d8
   31434:	000399ec 	.word	0x000399ec
   31438:	00039a04 	.word	0x00039a04
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   3143c:	69fb      	ldr	r3, [r7, #28]
   3143e:	22cc      	movs	r2, #204	; 0xcc
   31440:	589b      	ldr	r3, [r3, r2]
   31442:	001a      	movs	r2, r3
   31444:	49e0      	ldr	r1, [pc, #896]	; (317c8 <_http_client_request+0x6e8>)
   31446:	2328      	movs	r3, #40	; 0x28
   31448:	2018      	movs	r0, #24
   3144a:	4684      	mov	ip, r0
   3144c:	44bc      	add	ip, r7
   3144e:	4463      	add	r3, ip
   31450:	0018      	movs	r0, r3
   31452:	4bde      	ldr	r3, [pc, #888]	; (317cc <_http_client_request+0x6ec>)
   31454:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   31456:	49de      	ldr	r1, [pc, #888]	; (317d0 <_http_client_request+0x6f0>)
   31458:	2334      	movs	r3, #52	; 0x34
   3145a:	2218      	movs	r2, #24
   3145c:	4694      	mov	ip, r2
   3145e:	44bc      	add	ip, r7
   31460:	4463      	add	r3, ip
   31462:	2210      	movs	r2, #16
   31464:	0018      	movs	r0, r3
   31466:	4bdb      	ldr	r3, [pc, #876]	; (317d4 <_http_client_request+0x6f4>)
   31468:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   3146a:	2328      	movs	r3, #40	; 0x28
   3146c:	2218      	movs	r2, #24
   3146e:	4694      	mov	ip, r2
   31470:	44bc      	add	ip, r7
   31472:	4463      	add	r3, ip
   31474:	0018      	movs	r0, r3
   31476:	4bd8      	ldr	r3, [pc, #864]	; (317d8 <_http_client_request+0x6f8>)
   31478:	4798      	blx	r3
   3147a:	0002      	movs	r2, r0
   3147c:	2328      	movs	r3, #40	; 0x28
   3147e:	2118      	movs	r1, #24
   31480:	1879      	adds	r1, r7, r1
   31482:	18c9      	adds	r1, r1, r3
   31484:	2334      	movs	r3, #52	; 0x34
   31486:	2018      	movs	r0, #24
   31488:	4684      	mov	ip, r0
   3148a:	44bc      	add	ip, r7
   3148c:	4463      	add	r3, ip
   3148e:	0018      	movs	r0, r3
   31490:	4bd0      	ldr	r3, [pc, #832]	; (317d4 <_http_client_request+0x6f4>)
   31492:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31494:	49d1      	ldr	r1, [pc, #836]	; (317dc <_http_client_request+0x6fc>)
   31496:	2334      	movs	r3, #52	; 0x34
   31498:	2218      	movs	r2, #24
   3149a:	4694      	mov	ip, r2
   3149c:	44bc      	add	ip, r7
   3149e:	4463      	add	r3, ip
   314a0:	2202      	movs	r2, #2
   314a2:	0018      	movs	r0, r3
   314a4:	4bcb      	ldr	r3, [pc, #812]	; (317d4 <_http_client_request+0x6f4>)
   314a6:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   314a8:	69fb      	ldr	r3, [r7, #28]
   314aa:	22d4      	movs	r2, #212	; 0xd4
   314ac:	589b      	ldr	r3, [r3, r2]
   314ae:	2b00      	cmp	r3, #0
   314b0:	d012      	beq.n	314d8 <_http_client_request+0x3f8>
				module->req.ext_header,
   314b2:	69fb      	ldr	r3, [r7, #28]
   314b4:	22d4      	movs	r2, #212	; 0xd4
   314b6:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   314b8:	69fb      	ldr	r3, [r7, #28]
   314ba:	22d4      	movs	r2, #212	; 0xd4
   314bc:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   314be:	0018      	movs	r0, r3
   314c0:	4bc5      	ldr	r3, [pc, #788]	; (317d8 <_http_client_request+0x6f8>)
   314c2:	4798      	blx	r3
   314c4:	0002      	movs	r2, r0
   314c6:	2334      	movs	r3, #52	; 0x34
   314c8:	2118      	movs	r1, #24
   314ca:	468c      	mov	ip, r1
   314cc:	44bc      	add	ip, r7
   314ce:	4463      	add	r3, ip
   314d0:	0021      	movs	r1, r4
   314d2:	0018      	movs	r0, r3
   314d4:	4bbf      	ldr	r3, [pc, #764]	; (317d4 <_http_client_request+0x6f4>)
   314d6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   314d8:	49c0      	ldr	r1, [pc, #768]	; (317dc <_http_client_request+0x6fc>)
   314da:	2334      	movs	r3, #52	; 0x34
   314dc:	2218      	movs	r2, #24
   314de:	4694      	mov	ip, r2
   314e0:	44bc      	add	ip, r7
   314e2:	4463      	add	r3, ip
   314e4:	2202      	movs	r2, #2
   314e6:	0018      	movs	r0, r3
   314e8:	4bba      	ldr	r3, [pc, #744]	; (317d4 <_http_client_request+0x6f4>)
   314ea:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   314ec:	2334      	movs	r3, #52	; 0x34
   314ee:	2218      	movs	r2, #24
   314f0:	4694      	mov	ip, r2
   314f2:	44bc      	add	ip, r7
   314f4:	4463      	add	r3, ip
   314f6:	0018      	movs	r0, r3
   314f8:	4bb9      	ldr	r3, [pc, #740]	; (317e0 <_http_client_request+0x700>)
   314fa:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   314fc:	69fb      	ldr	r3, [r7, #28]
   314fe:	2204      	movs	r2, #4
   31500:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   31502:	69fb      	ldr	r3, [r7, #28]
   31504:	22cc      	movs	r2, #204	; 0xcc
   31506:	589b      	ldr	r3, [r3, r2]
   31508:	2b00      	cmp	r3, #0
   3150a:	db00      	blt.n	3150e <_http_client_request+0x42e>
   3150c:	e0c6      	b.n	3169c <_http_client_request+0x5bc>
   3150e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31510:	68db      	ldr	r3, [r3, #12]
   31512:	2b00      	cmp	r3, #0
   31514:	d100      	bne.n	31518 <_http_client_request+0x438>
   31516:	e0c1      	b.n	3169c <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3151a:	68dc      	ldr	r4, [r3, #12]
   3151c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3151e:	6958      	ldr	r0, [r3, #20]
   31520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31522:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   31524:	69fb      	ldr	r3, [r7, #28]
   31526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31528:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   3152a:	69fb      	ldr	r3, [r7, #28]
   3152c:	22d0      	movs	r2, #208	; 0xd0
   3152e:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31530:	002a      	movs	r2, r5
   31532:	47a0      	blx	r4
   31534:	0003      	movs	r3, r0
   31536:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   31538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3153a:	2b00      	cmp	r3, #0
   3153c:	da01      	bge.n	31542 <_http_client_request+0x462>
				size = 0;
   3153e:	2300      	movs	r3, #0
   31540:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   31542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31544:	220a      	movs	r2, #10
   31546:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   31548:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3154a:	220d      	movs	r2, #13
   3154c:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   3154e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31550:	3305      	adds	r3, #5
   31552:	6eba      	ldr	r2, [r7, #104]	; 0x68
   31554:	210d      	movs	r1, #13
   31556:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   31558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3155a:	3306      	adds	r3, #6
   3155c:	6eba      	ldr	r2, [r7, #104]	; 0x68
   3155e:	210a      	movs	r1, #10
   31560:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   31562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31564:	2b00      	cmp	r3, #0
   31566:	db14      	blt.n	31592 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   31568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3156a:	3302      	adds	r3, #2
   3156c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   3156e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31570:	4a9c      	ldr	r2, [pc, #624]	; (317e4 <_http_client_request+0x704>)
   31572:	4013      	ands	r3, r2
   31574:	d504      	bpl.n	31580 <_http_client_request+0x4a0>
   31576:	3b01      	subs	r3, #1
   31578:	2210      	movs	r2, #16
   3157a:	4252      	negs	r2, r2
   3157c:	4313      	orrs	r3, r2
   3157e:	3301      	adds	r3, #1
   31580:	001a      	movs	r2, r3
   31582:	2318      	movs	r3, #24
   31584:	2118      	movs	r1, #24
   31586:	468c      	mov	ip, r1
   31588:	44bc      	add	ip, r7
   3158a:	4463      	add	r3, ip
   3158c:	5c9a      	ldrb	r2, [r3, r2]
   3158e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31590:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   31592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31594:	2b0f      	cmp	r3, #15
   31596:	dd19      	ble.n	315cc <_http_client_request+0x4ec>
				ptr = buffer + 1;
   31598:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3159a:	3301      	adds	r3, #1
   3159c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   3159e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   315a0:	2b00      	cmp	r3, #0
   315a2:	da00      	bge.n	315a6 <_http_client_request+0x4c6>
   315a4:	330f      	adds	r3, #15
   315a6:	111b      	asrs	r3, r3, #4
   315a8:	001a      	movs	r2, r3
   315aa:	4b8e      	ldr	r3, [pc, #568]	; (317e4 <_http_client_request+0x704>)
   315ac:	4013      	ands	r3, r2
   315ae:	d504      	bpl.n	315ba <_http_client_request+0x4da>
   315b0:	3b01      	subs	r3, #1
   315b2:	2210      	movs	r2, #16
   315b4:	4252      	negs	r2, r2
   315b6:	4313      	orrs	r3, r2
   315b8:	3301      	adds	r3, #1
   315ba:	001a      	movs	r2, r3
   315bc:	2318      	movs	r3, #24
   315be:	2118      	movs	r1, #24
   315c0:	468c      	mov	ip, r1
   315c2:	44bc      	add	ip, r7
   315c4:	4463      	add	r3, ip
   315c6:	5c9a      	ldrb	r2, [r3, r2]
   315c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   315ca:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   315cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   315ce:	2bff      	cmp	r3, #255	; 0xff
   315d0:	dd18      	ble.n	31604 <_http_client_request+0x524>
				ptr = buffer;
   315d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   315d4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   315d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   315d8:	2b00      	cmp	r3, #0
   315da:	da00      	bge.n	315de <_http_client_request+0x4fe>
   315dc:	33ff      	adds	r3, #255	; 0xff
   315de:	121b      	asrs	r3, r3, #8
   315e0:	001a      	movs	r2, r3
   315e2:	4b80      	ldr	r3, [pc, #512]	; (317e4 <_http_client_request+0x704>)
   315e4:	4013      	ands	r3, r2
   315e6:	d504      	bpl.n	315f2 <_http_client_request+0x512>
   315e8:	3b01      	subs	r3, #1
   315ea:	2210      	movs	r2, #16
   315ec:	4252      	negs	r2, r2
   315ee:	4313      	orrs	r3, r2
   315f0:	3301      	adds	r3, #1
   315f2:	001a      	movs	r2, r3
   315f4:	2318      	movs	r3, #24
   315f6:	2118      	movs	r1, #24
   315f8:	468c      	mov	ip, r1
   315fa:	44bc      	add	ip, r7
   315fc:	4463      	add	r3, ip
   315fe:	5c9a      	ldrb	r2, [r3, r2]
   31600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31602:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   31604:	69fb      	ldr	r3, [r7, #28]
   31606:	2000      	movs	r0, #0
   31608:	5618      	ldrsb	r0, [r3, r0]
   3160a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3160c:	3303      	adds	r3, #3
   3160e:	001a      	movs	r2, r3
   31610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31612:	1ad3      	subs	r3, r2, r3
   31614:	b29a      	uxth	r2, r3
   31616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31618:	b29b      	uxth	r3, r3
   3161a:	18d3      	adds	r3, r2, r3
   3161c:	b29b      	uxth	r3, r3
   3161e:	3304      	adds	r3, #4
   31620:	b29a      	uxth	r2, r3
   31622:	6f39      	ldr	r1, [r7, #112]	; 0x70
   31624:	2300      	movs	r3, #0
   31626:	4c70      	ldr	r4, [pc, #448]	; (317e8 <_http_client_request+0x708>)
   31628:	47a0      	blx	r4
   3162a:	0003      	movs	r3, r0
   3162c:	663b      	str	r3, [r7, #96]	; 0x60
   3162e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   31630:	2b00      	cmp	r3, #0
   31632:	da07      	bge.n	31644 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   31634:	2305      	movs	r3, #5
   31636:	425a      	negs	r2, r3
   31638:	69fb      	ldr	r3, [r7, #28]
   3163a:	0011      	movs	r1, r2
   3163c:	0018      	movs	r0, r3
   3163e:	4b6b      	ldr	r3, [pc, #428]	; (317ec <_http_client_request+0x70c>)
   31640:	4798      	blx	r3
				return;
   31642:	e0e1      	b.n	31808 <_http_client_request+0x728>
			module->req.sent_length += size;
   31644:	69fb      	ldr	r3, [r7, #28]
   31646:	22d0      	movs	r2, #208	; 0xd0
   31648:	589a      	ldr	r2, [r3, r2]
   3164a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3164c:	18d2      	adds	r2, r2, r3
   3164e:	69fb      	ldr	r3, [r7, #28]
   31650:	21d0      	movs	r1, #208	; 0xd0
   31652:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   31654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31656:	2b00      	cmp	r3, #0
   31658:	d000      	beq.n	3165c <_http_client_request+0x57c>
   3165a:	e0c9      	b.n	317f0 <_http_client_request+0x710>
				if (module->req.entity.close) {
   3165c:	69fb      	ldr	r3, [r7, #28]
   3165e:	22c0      	movs	r2, #192	; 0xc0
   31660:	589b      	ldr	r3, [r3, r2]
   31662:	2b00      	cmp	r3, #0
   31664:	d007      	beq.n	31676 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   31666:	69fb      	ldr	r3, [r7, #28]
   31668:	22c0      	movs	r2, #192	; 0xc0
   3166a:	589b      	ldr	r3, [r3, r2]
   3166c:	69fa      	ldr	r2, [r7, #28]
   3166e:	21c4      	movs	r1, #196	; 0xc4
   31670:	5852      	ldr	r2, [r2, r1]
   31672:	0010      	movs	r0, r2
   31674:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   31676:	69fb      	ldr	r3, [r7, #28]
   31678:	2202      	movs	r2, #2
   3167a:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   3167c:	69fb      	ldr	r3, [r7, #28]
   3167e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31680:	2b00      	cmp	r3, #0
   31682:	d100      	bne.n	31686 <_http_client_request+0x5a6>
   31684:	e0b5      	b.n	317f2 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31686:	69fb      	ldr	r3, [r7, #28]
   31688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3168a:	220c      	movs	r2, #12
   3168c:	2118      	movs	r1, #24
   3168e:	468c      	mov	ip, r1
   31690:	44bc      	add	ip, r7
   31692:	4462      	add	r2, ip
   31694:	69f8      	ldr	r0, [r7, #28]
   31696:	2101      	movs	r1, #1
   31698:	4798      	blx	r3
				break;
   3169a:	e0aa      	b.n	317f2 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   3169c:	69fb      	ldr	r3, [r7, #28]
   3169e:	22cc      	movs	r2, #204	; 0xcc
   316a0:	589b      	ldr	r3, [r3, r2]
   316a2:	2b00      	cmp	r3, #0
   316a4:	dc00      	bgt.n	316a8 <_http_client_request+0x5c8>
   316a6:	e07c      	b.n	317a2 <_http_client_request+0x6c2>
   316a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   316aa:	68db      	ldr	r3, [r3, #12]
   316ac:	2b00      	cmp	r3, #0
   316ae:	d100      	bne.n	316b2 <_http_client_request+0x5d2>
   316b0:	e077      	b.n	317a2 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   316b2:	69fb      	ldr	r3, [r7, #28]
   316b4:	22d0      	movs	r2, #208	; 0xd0
   316b6:	589a      	ldr	r2, [r3, r2]
   316b8:	69fb      	ldr	r3, [r7, #28]
   316ba:	21cc      	movs	r1, #204	; 0xcc
   316bc:	585b      	ldr	r3, [r3, r1]
   316be:	429a      	cmp	r2, r3
   316c0:	db1f      	blt.n	31702 <_http_client_request+0x622>
				if (module->req.entity.close) {
   316c2:	69fb      	ldr	r3, [r7, #28]
   316c4:	22c0      	movs	r2, #192	; 0xc0
   316c6:	589b      	ldr	r3, [r3, r2]
   316c8:	2b00      	cmp	r3, #0
   316ca:	d007      	beq.n	316dc <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   316cc:	69fb      	ldr	r3, [r7, #28]
   316ce:	22c0      	movs	r2, #192	; 0xc0
   316d0:	589b      	ldr	r3, [r3, r2]
   316d2:	69fa      	ldr	r2, [r7, #28]
   316d4:	21c4      	movs	r1, #196	; 0xc4
   316d6:	5852      	ldr	r2, [r2, r1]
   316d8:	0010      	movs	r0, r2
   316da:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   316dc:	69fb      	ldr	r3, [r7, #28]
   316de:	2202      	movs	r2, #2
   316e0:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   316e2:	69fb      	ldr	r3, [r7, #28]
   316e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   316e6:	2b00      	cmp	r3, #0
   316e8:	d100      	bne.n	316ec <_http_client_request+0x60c>
   316ea:	e084      	b.n	317f6 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   316ec:	69fb      	ldr	r3, [r7, #28]
   316ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   316f0:	220c      	movs	r2, #12
   316f2:	2118      	movs	r1, #24
   316f4:	468c      	mov	ip, r1
   316f6:	44bc      	add	ip, r7
   316f8:	4462      	add	r2, ip
   316fa:	69f8      	ldr	r0, [r7, #28]
   316fc:	2101      	movs	r1, #1
   316fe:	4798      	blx	r3
				break;
   31700:	e079      	b.n	317f6 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   31702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31704:	68dc      	ldr	r4, [r3, #12]
   31706:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31708:	6958      	ldr	r0, [r3, #20]
   3170a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3170c:	69fb      	ldr	r3, [r7, #28]
   3170e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   31710:	69fb      	ldr	r3, [r7, #28]
   31712:	22d0      	movs	r2, #208	; 0xd0
   31714:	589b      	ldr	r3, [r3, r2]
   31716:	002a      	movs	r2, r5
   31718:	47a0      	blx	r4
   3171a:	0003      	movs	r3, r0
   3171c:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   3171e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31720:	2b00      	cmp	r3, #0
   31722:	da0d      	bge.n	31740 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   31724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31726:	2b00      	cmp	r3, #0
   31728:	d102      	bne.n	31730 <_http_client_request+0x650>
   3172a:	234d      	movs	r3, #77	; 0x4d
   3172c:	425b      	negs	r3, r3
   3172e:	e001      	b.n	31734 <_http_client_request+0x654>
   31730:	2305      	movs	r3, #5
   31732:	425b      	negs	r3, r3
   31734:	69fa      	ldr	r2, [r7, #28]
   31736:	0019      	movs	r1, r3
   31738:	0010      	movs	r0, r2
   3173a:	4b2c      	ldr	r3, [pc, #176]	; (317ec <_http_client_request+0x70c>)
   3173c:	4798      	blx	r3
			if (size < 0) {
   3173e:	e057      	b.n	317f0 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   31740:	69fb      	ldr	r3, [r7, #28]
   31742:	22cc      	movs	r2, #204	; 0xcc
   31744:	589a      	ldr	r2, [r3, r2]
   31746:	69fb      	ldr	r3, [r7, #28]
   31748:	21d0      	movs	r1, #208	; 0xd0
   3174a:	585b      	ldr	r3, [r3, r1]
   3174c:	1ad2      	subs	r2, r2, r3
   3174e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31750:	429a      	cmp	r2, r3
   31752:	da07      	bge.n	31764 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   31754:	69fb      	ldr	r3, [r7, #28]
   31756:	22cc      	movs	r2, #204	; 0xcc
   31758:	589a      	ldr	r2, [r3, r2]
   3175a:	69fb      	ldr	r3, [r7, #28]
   3175c:	21d0      	movs	r1, #208	; 0xd0
   3175e:	585b      	ldr	r3, [r3, r1]
   31760:	1ad3      	subs	r3, r2, r3
   31762:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   31764:	69fb      	ldr	r3, [r7, #28]
   31766:	2000      	movs	r0, #0
   31768:	5618      	ldrsb	r0, [r3, r0]
   3176a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3176c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3176e:	b29a      	uxth	r2, r3
   31770:	2300      	movs	r3, #0
   31772:	4c1d      	ldr	r4, [pc, #116]	; (317e8 <_http_client_request+0x708>)
   31774:	47a0      	blx	r4
   31776:	0003      	movs	r3, r0
   31778:	663b      	str	r3, [r7, #96]	; 0x60
   3177a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   3177c:	2b00      	cmp	r3, #0
   3177e:	da07      	bge.n	31790 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   31780:	2305      	movs	r3, #5
   31782:	425a      	negs	r2, r3
   31784:	69fb      	ldr	r3, [r7, #28]
   31786:	0011      	movs	r1, r2
   31788:	0018      	movs	r0, r3
   3178a:	4b18      	ldr	r3, [pc, #96]	; (317ec <_http_client_request+0x70c>)
   3178c:	4798      	blx	r3
					return;
   3178e:	e03b      	b.n	31808 <_http_client_request+0x728>
				module->req.sent_length += size;
   31790:	69fb      	ldr	r3, [r7, #28]
   31792:	22d0      	movs	r2, #208	; 0xd0
   31794:	589a      	ldr	r2, [r3, r2]
   31796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31798:	18d2      	adds	r2, r2, r3
   3179a:	69fb      	ldr	r3, [r7, #28]
   3179c:	21d0      	movs	r1, #208	; 0xd0
   3179e:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   317a0:	e026      	b.n	317f0 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   317a2:	69fb      	ldr	r3, [r7, #28]
   317a4:	2202      	movs	r2, #2
   317a6:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   317a8:	69fb      	ldr	r3, [r7, #28]
   317aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   317ac:	2b00      	cmp	r3, #0
   317ae:	d024      	beq.n	317fa <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   317b0:	69fb      	ldr	r3, [r7, #28]
   317b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   317b4:	220c      	movs	r2, #12
   317b6:	2118      	movs	r1, #24
   317b8:	468c      	mov	ip, r1
   317ba:	44bc      	add	ip, r7
   317bc:	4462      	add	r2, ip
   317be:	69f8      	ldr	r0, [r7, #28]
   317c0:	2101      	movs	r1, #1
   317c2:	4798      	blx	r3
			break;
   317c4:	e019      	b.n	317fa <_http_client_request+0x71a>
   317c6:	46c0      	nop			; (mov r8, r8)
   317c8:	00039a24 	.word	0x00039a24
   317cc:	0003499d 	.word	0x0003499d
   317d0:	00039a28 	.word	0x00039a28
   317d4:	00032041 	.word	0x00032041
   317d8:	00034a97 	.word	0x00034a97
   317dc:	000399b0 	.word	0x000399b0
   317e0:	0003207d 	.word	0x0003207d
   317e4:	8000000f 	.word	0x8000000f
   317e8:	000255c5 	.word	0x000255c5
   317ec:	00030f8d 	.word	0x00030f8d
		break;
   317f0:	e004      	b.n	317fc <_http_client_request+0x71c>
				break;
   317f2:	46c0      	nop			; (mov r8, r8)
   317f4:	e002      	b.n	317fc <_http_client_request+0x71c>
				break;
   317f6:	46c0      	nop			; (mov r8, r8)
   317f8:	e000      	b.n	317fc <_http_client_request+0x71c>
			break;
   317fa:	46c0      	nop			; (mov r8, r8)
   317fc:	69bb      	ldr	r3, [r7, #24]
   317fe:	469d      	mov	sp, r3
   31800:	e004      	b.n	3180c <_http_client_request+0x72c>
		return;
   31802:	46c0      	nop			; (mov r8, r8)
   31804:	e000      	b.n	31808 <_http_client_request+0x728>
		return;
   31806:	46c0      	nop			; (mov r8, r8)
   31808:	69bb      	ldr	r3, [r7, #24]
   3180a:	469d      	mov	sp, r3
	}
}
   3180c:	46bd      	mov	sp, r7
   3180e:	b01e      	add	sp, #120	; 0x78
   31810:	bc04      	pop	{r2}
   31812:	4690      	mov	r8, r2
   31814:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31816:	46c0      	nop			; (mov r8, r8)

00031818 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   31818:	b590      	push	{r4, r7, lr}
   3181a:	b083      	sub	sp, #12
   3181c:	af00      	add	r7, sp, #0
   3181e:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   31820:	687b      	ldr	r3, [r7, #4]
   31822:	2b00      	cmp	r3, #0
   31824:	d021      	beq.n	3186a <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   31826:	687b      	ldr	r3, [r7, #4]
   31828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3182a:	687b      	ldr	r3, [r7, #4]
   3182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3182e:	429a      	cmp	r2, r3
   31830:	d307      	bcc.n	31842 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   31832:	238b      	movs	r3, #139	; 0x8b
   31834:	425a      	negs	r2, r3
   31836:	687b      	ldr	r3, [r7, #4]
   31838:	0011      	movs	r1, r2
   3183a:	0018      	movs	r0, r3
   3183c:	4b0d      	ldr	r3, [pc, #52]	; (31874 <_http_client_recv_packet+0x5c>)
   3183e:	4798      	blx	r3
		return;
   31840:	e014      	b.n	3186c <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   31842:	687b      	ldr	r3, [r7, #4]
   31844:	2000      	movs	r0, #0
   31846:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   31848:	687b      	ldr	r3, [r7, #4]
   3184a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3184c:	687b      	ldr	r3, [r7, #4]
   3184e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31850:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   31852:	687b      	ldr	r3, [r7, #4]
   31854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   31856:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   31858:	687b      	ldr	r3, [r7, #4]
   3185a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   3185c:	b29b      	uxth	r3, r3
   3185e:	1ad3      	subs	r3, r2, r3
   31860:	b29a      	uxth	r2, r3
   31862:	2300      	movs	r3, #0
   31864:	4c04      	ldr	r4, [pc, #16]	; (31878 <_http_client_recv_packet+0x60>)
   31866:	47a0      	blx	r4
   31868:	e000      	b.n	3186c <_http_client_recv_packet+0x54>
		return;
   3186a:	46c0      	nop			; (mov r8, r8)
}
   3186c:	46bd      	mov	sp, r7
   3186e:	b003      	add	sp, #12
   31870:	bd90      	pop	{r4, r7, pc}
   31872:	46c0      	nop			; (mov r8, r8)
   31874:	00030f8d 	.word	0x00030f8d
   31878:	00025729 	.word	0x00025729

0003187c <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   3187c:	b580      	push	{r7, lr}
   3187e:	b082      	sub	sp, #8
   31880:	af00      	add	r7, sp, #0
   31882:	6078      	str	r0, [r7, #4]
   31884:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   31886:	687b      	ldr	r3, [r7, #4]
   31888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3188a:	683b      	ldr	r3, [r7, #0]
   3188c:	18d2      	adds	r2, r2, r3
   3188e:	687b      	ldr	r3, [r7, #4]
   31890:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   31892:	687b      	ldr	r3, [r7, #4]
   31894:	2258      	movs	r2, #88	; 0x58
   31896:	5a9b      	ldrh	r3, [r3, r2]
   31898:	2b00      	cmp	r3, #0
   3189a:	d007      	beq.n	318ac <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   3189c:	687b      	ldr	r3, [r7, #4]
   3189e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   318a0:	687b      	ldr	r3, [r7, #4]
   318a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   318a4:	0019      	movs	r1, r3
   318a6:	0010      	movs	r0, r2
   318a8:	4b06      	ldr	r3, [pc, #24]	; (318c4 <_http_client_recved_packet+0x48>)
   318aa:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   318ac:	46c0      	nop			; (mov r8, r8)
   318ae:	687b      	ldr	r3, [r7, #4]
   318b0:	0018      	movs	r0, r3
   318b2:	4b05      	ldr	r3, [pc, #20]	; (318c8 <_http_client_recved_packet+0x4c>)
   318b4:	4798      	blx	r3
   318b6:	1e03      	subs	r3, r0, #0
   318b8:	d1f9      	bne.n	318ae <_http_client_recved_packet+0x32>
}
   318ba:	46c0      	nop			; (mov r8, r8)
   318bc:	46bd      	mov	sp, r7
   318be:	b002      	add	sp, #8
   318c0:	bd80      	pop	{r7, pc}
   318c2:	46c0      	nop			; (mov r8, r8)
   318c4:	00032339 	.word	0x00032339
   318c8:	000318cd 	.word	0x000318cd

000318cc <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   318cc:	b580      	push	{r7, lr}
   318ce:	b082      	sub	sp, #8
   318d0:	af00      	add	r7, sp, #0
   318d2:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   318d4:	687b      	ldr	r3, [r7, #4]
   318d6:	22d8      	movs	r2, #216	; 0xd8
   318d8:	589b      	ldr	r3, [r3, r2]
   318da:	2b00      	cmp	r3, #0
   318dc:	d002      	beq.n	318e4 <_http_client_handle_response+0x18>
   318de:	2b01      	cmp	r3, #1
   318e0:	d006      	beq.n	318f0 <_http_client_handle_response+0x24>
   318e2:	e00b      	b.n	318fc <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   318e4:	687b      	ldr	r3, [r7, #4]
   318e6:	0018      	movs	r0, r3
   318e8:	4b07      	ldr	r3, [pc, #28]	; (31908 <_http_client_handle_response+0x3c>)
   318ea:	4798      	blx	r3
   318ec:	0003      	movs	r3, r0
   318ee:	e006      	b.n	318fe <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   318f0:	687b      	ldr	r3, [r7, #4]
   318f2:	0018      	movs	r0, r3
   318f4:	4b05      	ldr	r3, [pc, #20]	; (3190c <_http_client_handle_response+0x40>)
   318f6:	4798      	blx	r3
   318f8:	0003      	movs	r3, r0
   318fa:	e000      	b.n	318fe <_http_client_handle_response+0x32>
	}
	return 0;
   318fc:	2300      	movs	r3, #0
}
   318fe:	0018      	movs	r0, r3
   31900:	46bd      	mov	sp, r7
   31902:	b002      	add	sp, #8
   31904:	bd80      	pop	{r7, pc}
   31906:	46c0      	nop			; (mov r8, r8)
   31908:	00031911 	.word	0x00031911
   3190c:	00031dc9 	.word	0x00031dc9

00031910 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   31910:	b590      	push	{r4, r7, lr}
   31912:	b08b      	sub	sp, #44	; 0x2c
   31914:	af00      	add	r7, sp, #0
   31916:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   31918:	687b      	ldr	r3, [r7, #4]
   3191a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3191c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   3191e:	4b9a      	ldr	r3, [pc, #616]	; (31b88 <_http_client_handle_header+0x278>)
   31920:	681a      	ldr	r2, [r3, #0]
   31922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31924:	0011      	movs	r1, r2
   31926:	0018      	movs	r0, r3
   31928:	4b98      	ldr	r3, [pc, #608]	; (31b8c <_http_client_handle_header+0x27c>)
   3192a:	4798      	blx	r3
   3192c:	0003      	movs	r3, r0
   3192e:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   31930:	69bb      	ldr	r3, [r7, #24]
   31932:	2b00      	cmp	r3, #0
   31934:	d007      	beq.n	31946 <_http_client_handle_header+0x36>
   31936:	687b      	ldr	r3, [r7, #4]
   31938:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3193a:	687b      	ldr	r3, [r7, #4]
   3193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3193e:	18d2      	adds	r2, r2, r3
   31940:	69bb      	ldr	r3, [r7, #24]
   31942:	429a      	cmp	r2, r3
   31944:	d807      	bhi.n	31956 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   31946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31948:	687b      	ldr	r3, [r7, #4]
   3194a:	0011      	movs	r1, r2
   3194c:	0018      	movs	r0, r3
   3194e:	4b90      	ldr	r3, [pc, #576]	; (31b90 <_http_client_handle_header+0x280>)
   31950:	4798      	blx	r3
			return 0;
   31952:	2300      	movs	r3, #0
   31954:	e114      	b.n	31b80 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   31956:	4b8c      	ldr	r3, [pc, #560]	; (31b88 <_http_client_handle_header+0x278>)
   31958:	681c      	ldr	r4, [r3, #0]
   3195a:	4b8b      	ldr	r3, [pc, #556]	; (31b88 <_http_client_handle_header+0x278>)
   3195c:	681b      	ldr	r3, [r3, #0]
   3195e:	0018      	movs	r0, r3
   31960:	4b8c      	ldr	r3, [pc, #560]	; (31b94 <_http_client_handle_header+0x284>)
   31962:	4798      	blx	r3
   31964:	0002      	movs	r2, r0
   31966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31968:	0021      	movs	r1, r4
   3196a:	0018      	movs	r0, r3
   3196c:	4b8a      	ldr	r3, [pc, #552]	; (31b98 <_http_client_handle_header+0x288>)
   3196e:	4798      	blx	r3
   31970:	1e03      	subs	r3, r0, #0
   31972:	d15d      	bne.n	31a30 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   31974:	4b84      	ldr	r3, [pc, #528]	; (31b88 <_http_client_handle_header+0x278>)
   31976:	681b      	ldr	r3, [r3, #0]
   31978:	0018      	movs	r0, r3
   3197a:	4b86      	ldr	r3, [pc, #536]	; (31b94 <_http_client_handle_header+0x284>)
   3197c:	4798      	blx	r3
   3197e:	0002      	movs	r2, r0
   31980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31982:	189a      	adds	r2, r3, r2
   31984:	687b      	ldr	r3, [r7, #4]
   31986:	0011      	movs	r1, r2
   31988:	0018      	movs	r0, r3
   3198a:	4b81      	ldr	r3, [pc, #516]	; (31b90 <_http_client_handle_header+0x280>)
   3198c:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   3198e:	687b      	ldr	r3, [r7, #4]
   31990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31992:	2b00      	cmp	r3, #0
   31994:	d046      	beq.n	31a24 <_http_client_handle_header+0x114>
   31996:	687b      	ldr	r3, [r7, #4]
   31998:	22e4      	movs	r2, #228	; 0xe4
   3199a:	5a9b      	ldrh	r3, [r3, r2]
   3199c:	2b00      	cmp	r3, #0
   3199e:	d041      	beq.n	31a24 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   319a0:	687b      	ldr	r3, [r7, #4]
   319a2:	22dc      	movs	r2, #220	; 0xdc
   319a4:	589b      	ldr	r3, [r3, r2]
   319a6:	2b00      	cmp	r3, #0
   319a8:	da19      	bge.n	319de <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   319aa:	687b      	ldr	r3, [r7, #4]
   319ac:	22e4      	movs	r2, #228	; 0xe4
   319ae:	5a9a      	ldrh	r2, [r3, r2]
   319b0:	230c      	movs	r3, #12
   319b2:	18fb      	adds	r3, r7, r3
   319b4:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   319b6:	230c      	movs	r3, #12
   319b8:	18fb      	adds	r3, r7, r3
   319ba:	2201      	movs	r2, #1
   319bc:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   319be:	687b      	ldr	r3, [r7, #4]
   319c0:	22e0      	movs	r2, #224	; 0xe0
   319c2:	2100      	movs	r1, #0
   319c4:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   319c6:	230c      	movs	r3, #12
   319c8:	18fb      	adds	r3, r7, r3
   319ca:	2200      	movs	r2, #0
   319cc:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   319ce:	687b      	ldr	r3, [r7, #4]
   319d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   319d2:	220c      	movs	r2, #12
   319d4:	18ba      	adds	r2, r7, r2
   319d6:	6878      	ldr	r0, [r7, #4]
   319d8:	2102      	movs	r1, #2
   319da:	4798      	blx	r3
   319dc:	e022      	b.n	31a24 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   319de:	687b      	ldr	r3, [r7, #4]
   319e0:	22dc      	movs	r2, #220	; 0xdc
   319e2:	589a      	ldr	r2, [r3, r2]
   319e4:	687b      	ldr	r3, [r7, #4]
   319e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   319e8:	429a      	cmp	r2, r3
   319ea:	dd1b      	ble.n	31a24 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   319ec:	687b      	ldr	r3, [r7, #4]
   319ee:	22e4      	movs	r2, #228	; 0xe4
   319f0:	5a9a      	ldrh	r2, [r3, r2]
   319f2:	230c      	movs	r3, #12
   319f4:	18fb      	adds	r3, r7, r3
   319f6:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   319f8:	687b      	ldr	r3, [r7, #4]
   319fa:	22dc      	movs	r2, #220	; 0xdc
   319fc:	589b      	ldr	r3, [r3, r2]
   319fe:	001a      	movs	r2, r3
   31a00:	230c      	movs	r3, #12
   31a02:	18fb      	adds	r3, r7, r3
   31a04:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   31a06:	230c      	movs	r3, #12
   31a08:	18fb      	adds	r3, r7, r3
   31a0a:	2200      	movs	r2, #0
   31a0c:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   31a0e:	687b      	ldr	r3, [r7, #4]
   31a10:	22e0      	movs	r2, #224	; 0xe0
   31a12:	2100      	movs	r1, #0
   31a14:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   31a16:	687b      	ldr	r3, [r7, #4]
   31a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31a1a:	220c      	movs	r2, #12
   31a1c:	18ba      	adds	r2, r7, r2
   31a1e:	6878      	ldr	r0, [r7, #4]
   31a20:	2102      	movs	r1, #2
   31a22:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   31a24:	687b      	ldr	r3, [r7, #4]
   31a26:	22d8      	movs	r2, #216	; 0xd8
   31a28:	2101      	movs	r1, #1
   31a2a:	5099      	str	r1, [r3, r2]
			return 1;
   31a2c:	2301      	movs	r3, #1
   31a2e:	e0a7      	b.n	31b80 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   31a30:	495a      	ldr	r1, [pc, #360]	; (31b9c <_http_client_handle_header+0x28c>)
   31a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a34:	2210      	movs	r2, #16
   31a36:	0018      	movs	r0, r3
   31a38:	4b57      	ldr	r3, [pc, #348]	; (31b98 <_http_client_handle_header+0x288>)
   31a3a:	4798      	blx	r3
   31a3c:	1e03      	subs	r3, r0, #0
   31a3e:	d109      	bne.n	31a54 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   31a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a42:	3310      	adds	r3, #16
   31a44:	0018      	movs	r0, r3
   31a46:	4b56      	ldr	r3, [pc, #344]	; (31ba0 <_http_client_handle_header+0x290>)
   31a48:	4798      	blx	r3
   31a4a:	0001      	movs	r1, r0
   31a4c:	687b      	ldr	r3, [r7, #4]
   31a4e:	22dc      	movs	r2, #220	; 0xdc
   31a50:	5099      	str	r1, [r3, r2]
   31a52:	e08b      	b.n	31b6c <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   31a54:	4953      	ldr	r1, [pc, #332]	; (31ba4 <_http_client_handle_header+0x294>)
   31a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a58:	2213      	movs	r2, #19
   31a5a:	0018      	movs	r0, r3
   31a5c:	4b4e      	ldr	r3, [pc, #312]	; (31b98 <_http_client_handle_header+0x288>)
   31a5e:	4798      	blx	r3
   31a60:	1e03      	subs	r3, r0, #0
   31a62:	d127      	bne.n	31ab4 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   31a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a66:	3313      	adds	r3, #19
   31a68:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31a6a:	e01e      	b.n	31aaa <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   31a6c:	6a3b      	ldr	r3, [r7, #32]
   31a6e:	781b      	ldrb	r3, [r3, #0]
   31a70:	2b20      	cmp	r3, #32
   31a72:	d103      	bne.n	31a7c <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31a74:	6a3b      	ldr	r3, [r7, #32]
   31a76:	3301      	adds	r3, #1
   31a78:	623b      	str	r3, [r7, #32]
   31a7a:	e016      	b.n	31aaa <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   31a7c:	6a3b      	ldr	r3, [r7, #32]
   31a7e:	781b      	ldrb	r3, [r3, #0]
   31a80:	2b43      	cmp	r3, #67	; 0x43
   31a82:	d003      	beq.n	31a8c <_http_client_handle_header+0x17c>
   31a84:	6a3b      	ldr	r3, [r7, #32]
   31a86:	781b      	ldrb	r3, [r3, #0]
   31a88:	2b63      	cmp	r3, #99	; 0x63
   31a8a:	d105      	bne.n	31a98 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   31a8c:	687b      	ldr	r3, [r7, #4]
   31a8e:	21cc      	movs	r1, #204	; 0xcc
   31a90:	2201      	movs	r2, #1
   31a92:	4252      	negs	r2, r2
   31a94:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   31a96:	e069      	b.n	31b6c <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   31a98:	2386      	movs	r3, #134	; 0x86
   31a9a:	425a      	negs	r2, r3
   31a9c:	687b      	ldr	r3, [r7, #4]
   31a9e:	0011      	movs	r1, r2
   31aa0:	0018      	movs	r0, r3
   31aa2:	4b41      	ldr	r3, [pc, #260]	; (31ba8 <_http_client_handle_header+0x298>)
   31aa4:	4798      	blx	r3
					return 0;
   31aa6:	2300      	movs	r3, #0
   31aa8:	e06a      	b.n	31b80 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31aaa:	69ba      	ldr	r2, [r7, #24]
   31aac:	6a3b      	ldr	r3, [r7, #32]
   31aae:	429a      	cmp	r2, r3
   31ab0:	d8dc      	bhi.n	31a6c <_http_client_handle_header+0x15c>
   31ab2:	e05b      	b.n	31b6c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   31ab4:	493d      	ldr	r1, [pc, #244]	; (31bac <_http_client_handle_header+0x29c>)
   31ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ab8:	220c      	movs	r2, #12
   31aba:	0018      	movs	r0, r3
   31abc:	4b36      	ldr	r3, [pc, #216]	; (31b98 <_http_client_handle_header+0x288>)
   31abe:	4798      	blx	r3
   31ac0:	1e03      	subs	r3, r0, #0
   31ac2:	d126      	bne.n	31b12 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   31ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ac6:	330c      	adds	r3, #12
   31ac8:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31aca:	e01d      	b.n	31b08 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   31acc:	69fb      	ldr	r3, [r7, #28]
   31ace:	781b      	ldrb	r3, [r3, #0]
   31ad0:	2b20      	cmp	r3, #32
   31ad2:	d103      	bne.n	31adc <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31ad4:	69fb      	ldr	r3, [r7, #28]
   31ad6:	3301      	adds	r3, #1
   31ad8:	61fb      	str	r3, [r7, #28]
   31ada:	e015      	b.n	31b08 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   31adc:	69fb      	ldr	r3, [r7, #28]
   31ade:	781b      	ldrb	r3, [r3, #0]
   31ae0:	2b4b      	cmp	r3, #75	; 0x4b
   31ae2:	d003      	beq.n	31aec <_http_client_handle_header+0x1dc>
   31ae4:	69fb      	ldr	r3, [r7, #28]
   31ae6:	781b      	ldrb	r3, [r3, #0]
   31ae8:	2b6b      	cmp	r3, #107	; 0x6b
   31aea:	d106      	bne.n	31afa <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   31aec:	687b      	ldr	r3, [r7, #4]
   31aee:	2241      	movs	r2, #65	; 0x41
   31af0:	5c99      	ldrb	r1, [r3, r2]
   31af2:	2002      	movs	r0, #2
   31af4:	4301      	orrs	r1, r0
   31af6:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   31af8:	e038      	b.n	31b6c <_http_client_handle_header+0x25c>
					module->permanent = 0;
   31afa:	687b      	ldr	r3, [r7, #4]
   31afc:	2241      	movs	r2, #65	; 0x41
   31afe:	5c99      	ldrb	r1, [r3, r2]
   31b00:	2002      	movs	r0, #2
   31b02:	4381      	bics	r1, r0
   31b04:	5499      	strb	r1, [r3, r2]
				break;
   31b06:	e031      	b.n	31b6c <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31b08:	69ba      	ldr	r2, [r7, #24]
   31b0a:	69fb      	ldr	r3, [r7, #28]
   31b0c:	429a      	cmp	r2, r3
   31b0e:	d8dd      	bhi.n	31acc <_http_client_handle_header+0x1bc>
   31b10:	e02c      	b.n	31b6c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   31b12:	4927      	ldr	r1, [pc, #156]	; (31bb0 <_http_client_handle_header+0x2a0>)
   31b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b16:	2205      	movs	r2, #5
   31b18:	0018      	movs	r0, r3
   31b1a:	4b1f      	ldr	r3, [pc, #124]	; (31b98 <_http_client_handle_header+0x288>)
   31b1c:	4798      	blx	r3
   31b1e:	1e03      	subs	r3, r0, #0
   31b20:	d124      	bne.n	31b6c <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   31b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b24:	3309      	adds	r3, #9
   31b26:	0018      	movs	r0, r3
   31b28:	4b1d      	ldr	r3, [pc, #116]	; (31ba0 <_http_client_handle_header+0x290>)
   31b2a:	4798      	blx	r3
   31b2c:	0003      	movs	r3, r0
   31b2e:	b299      	uxth	r1, r3
   31b30:	687b      	ldr	r3, [r7, #4]
   31b32:	22e4      	movs	r2, #228	; 0xe4
   31b34:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   31b36:	687b      	ldr	r3, [r7, #4]
   31b38:	22dc      	movs	r2, #220	; 0xdc
   31b3a:	2100      	movs	r1, #0
   31b3c:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   31b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b40:	3305      	adds	r3, #5
   31b42:	781b      	ldrb	r3, [r3, #0]
   31b44:	2b31      	cmp	r3, #49	; 0x31
   31b46:	d804      	bhi.n	31b52 <_http_client_handle_header+0x242>
   31b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b4a:	3307      	adds	r3, #7
   31b4c:	781b      	ldrb	r3, [r3, #0]
   31b4e:	2b30      	cmp	r3, #48	; 0x30
   31b50:	d906      	bls.n	31b60 <_http_client_handle_header+0x250>
				module->permanent = 1;
   31b52:	687b      	ldr	r3, [r7, #4]
   31b54:	2241      	movs	r2, #65	; 0x41
   31b56:	5c99      	ldrb	r1, [r3, r2]
   31b58:	2002      	movs	r0, #2
   31b5a:	4301      	orrs	r1, r0
   31b5c:	5499      	strb	r1, [r3, r2]
   31b5e:	e005      	b.n	31b6c <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   31b60:	687b      	ldr	r3, [r7, #4]
   31b62:	2241      	movs	r2, #65	; 0x41
   31b64:	5c99      	ldrb	r1, [r3, r2]
   31b66:	2002      	movs	r0, #2
   31b68:	4381      	bics	r1, r0
   31b6a:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   31b6c:	4b06      	ldr	r3, [pc, #24]	; (31b88 <_http_client_handle_header+0x278>)
   31b6e:	681b      	ldr	r3, [r3, #0]
   31b70:	0018      	movs	r0, r3
   31b72:	4b08      	ldr	r3, [pc, #32]	; (31b94 <_http_client_handle_header+0x284>)
   31b74:	4798      	blx	r3
   31b76:	0002      	movs	r2, r0
   31b78:	69bb      	ldr	r3, [r7, #24]
   31b7a:	189b      	adds	r3, r3, r2
   31b7c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   31b7e:	e6ce      	b.n	3191e <_http_client_handle_header+0xe>
	}
}
   31b80:	0018      	movs	r0, r3
   31b82:	46bd      	mov	sp, r7
   31b84:	b00b      	add	sp, #44	; 0x2c
   31b86:	bd90      	pop	{r4, r7, pc}
   31b88:	2000014c 	.word	0x2000014c
   31b8c:	00034b15 	.word	0x00034b15
   31b90:	00031f75 	.word	0x00031f75
   31b94:	00034a97 	.word	0x00034a97
   31b98:	00034aa5 	.word	0x00034aa5
   31b9c:	00039a28 	.word	0x00039a28
   31ba0:	0003462d 	.word	0x0003462d
   31ba4:	00039a4c 	.word	0x00039a4c
   31ba8:	00030f8d 	.word	0x00030f8d
   31bac:	00039a60 	.word	0x00039a60
   31bb0:	00039a70 	.word	0x00039a70

00031bb4 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   31bb4:	b580      	push	{r7, lr}
   31bb6:	b088      	sub	sp, #32
   31bb8:	af00      	add	r7, sp, #0
   31bba:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   31bbc:	687b      	ldr	r3, [r7, #4]
   31bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31bc0:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   31bc2:	2300      	movs	r3, #0
   31bc4:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   31bc6:	687b      	ldr	r3, [r7, #4]
   31bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31bca:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   31bcc:	687b      	ldr	r3, [r7, #4]
   31bce:	22e0      	movs	r2, #224	; 0xe0
   31bd0:	589b      	ldr	r3, [r3, r2]
   31bd2:	2b00      	cmp	r3, #0
   31bd4:	db71      	blt.n	31cba <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   31bd6:	687b      	ldr	r3, [r7, #4]
   31bd8:	22e0      	movs	r2, #224	; 0xe0
   31bda:	589b      	ldr	r3, [r3, r2]
   31bdc:	2b00      	cmp	r3, #0
   31bde:	d134      	bne.n	31c4a <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   31be0:	687b      	ldr	r3, [r7, #4]
   31be2:	22d8      	movs	r2, #216	; 0xd8
   31be4:	2100      	movs	r1, #0
   31be6:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31be8:	687b      	ldr	r3, [r7, #4]
   31bea:	22e4      	movs	r2, #228	; 0xe4
   31bec:	2100      	movs	r1, #0
   31bee:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   31bf0:	2308      	movs	r3, #8
   31bf2:	18fb      	adds	r3, r7, r3
   31bf4:	2201      	movs	r2, #1
   31bf6:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   31bf8:	2308      	movs	r3, #8
   31bfa:	18fb      	adds	r3, r7, r3
   31bfc:	2200      	movs	r2, #0
   31bfe:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   31c00:	2308      	movs	r3, #8
   31c02:	18fb      	adds	r3, r7, r3
   31c04:	2200      	movs	r2, #0
   31c06:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   31c08:	687b      	ldr	r3, [r7, #4]
   31c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31c0c:	2b00      	cmp	r3, #0
   31c0e:	d006      	beq.n	31c1e <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31c10:	687b      	ldr	r3, [r7, #4]
   31c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31c14:	2208      	movs	r2, #8
   31c16:	18ba      	adds	r2, r7, r2
   31c18:	6878      	ldr	r0, [r7, #4]
   31c1a:	2103      	movs	r1, #3
   31c1c:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   31c1e:	687b      	ldr	r3, [r7, #4]
   31c20:	2241      	movs	r2, #65	; 0x41
   31c22:	5c9b      	ldrb	r3, [r3, r2]
   31c24:	2202      	movs	r2, #2
   31c26:	4013      	ands	r3, r2
   31c28:	b2db      	uxtb	r3, r3
   31c2a:	2b00      	cmp	r3, #0
   31c2c:	d105      	bne.n	31c3a <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   31c2e:	687b      	ldr	r3, [r7, #4]
   31c30:	2100      	movs	r1, #0
   31c32:	0018      	movs	r0, r3
   31c34:	4b62      	ldr	r3, [pc, #392]	; (31dc0 <_http_client_read_chuked_entity+0x20c>)
   31c36:	4798      	blx	r3
					return;
   31c38:	e0bf      	b.n	31dba <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   31c3a:	697b      	ldr	r3, [r7, #20]
   31c3c:	1c9a      	adds	r2, r3, #2
   31c3e:	687b      	ldr	r3, [r7, #4]
   31c40:	0011      	movs	r1, r2
   31c42:	0018      	movs	r0, r3
   31c44:	4b5f      	ldr	r3, [pc, #380]	; (31dc4 <_http_client_read_chuked_entity+0x210>)
   31c46:	4798      	blx	r3
   31c48:	e0b2      	b.n	31db0 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   31c4a:	687b      	ldr	r3, [r7, #4]
   31c4c:	22e0      	movs	r2, #224	; 0xe0
   31c4e:	589a      	ldr	r2, [r3, r2]
   31c50:	69fb      	ldr	r3, [r7, #28]
   31c52:	429a      	cmp	r2, r3
   31c54:	dd00      	ble.n	31c58 <_http_client_read_chuked_entity+0xa4>
   31c56:	e0ab      	b.n	31db0 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   31c58:	687b      	ldr	r3, [r7, #4]
   31c5a:	22e0      	movs	r2, #224	; 0xe0
   31c5c:	589b      	ldr	r3, [r3, r2]
   31c5e:	001a      	movs	r2, r3
   31c60:	2308      	movs	r3, #8
   31c62:	18fb      	adds	r3, r7, r3
   31c64:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   31c66:	2308      	movs	r3, #8
   31c68:	18fb      	adds	r3, r7, r3
   31c6a:	697a      	ldr	r2, [r7, #20]
   31c6c:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   31c6e:	2308      	movs	r3, #8
   31c70:	18fb      	adds	r3, r7, r3
   31c72:	2200      	movs	r2, #0
   31c74:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   31c76:	687b      	ldr	r3, [r7, #4]
   31c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31c7a:	2b00      	cmp	r3, #0
   31c7c:	d006      	beq.n	31c8c <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31c7e:	687b      	ldr	r3, [r7, #4]
   31c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31c82:	2208      	movs	r2, #8
   31c84:	18ba      	adds	r2, r7, r2
   31c86:	6878      	ldr	r0, [r7, #4]
   31c88:	2103      	movs	r1, #3
   31c8a:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   31c8c:	687b      	ldr	r3, [r7, #4]
   31c8e:	22e0      	movs	r2, #224	; 0xe0
   31c90:	589b      	ldr	r3, [r3, r2]
   31c92:	3302      	adds	r3, #2
   31c94:	697a      	ldr	r2, [r7, #20]
   31c96:	18d2      	adds	r2, r2, r3
   31c98:	687b      	ldr	r3, [r7, #4]
   31c9a:	0011      	movs	r1, r2
   31c9c:	0018      	movs	r0, r3
   31c9e:	4b49      	ldr	r3, [pc, #292]	; (31dc4 <_http_client_read_chuked_entity+0x210>)
   31ca0:	4798      	blx	r3
				length = (int)module->recved_size;
   31ca2:	687b      	ldr	r3, [r7, #4]
   31ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31ca6:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   31ca8:	687b      	ldr	r3, [r7, #4]
   31caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31cac:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   31cae:	687b      	ldr	r3, [r7, #4]
   31cb0:	21e0      	movs	r1, #224	; 0xe0
   31cb2:	2201      	movs	r2, #1
   31cb4:	4252      	negs	r2, r2
   31cb6:	505a      	str	r2, [r3, r1]
   31cb8:	e07a      	b.n	31db0 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   31cba:	687b      	ldr	r3, [r7, #4]
   31cbc:	22e0      	movs	r2, #224	; 0xe0
   31cbe:	2100      	movs	r1, #0
   31cc0:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   31cc2:	e05a      	b.n	31d7a <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   31cc4:	697b      	ldr	r3, [r7, #20]
   31cc6:	781b      	ldrb	r3, [r3, #0]
   31cc8:	2b0a      	cmp	r3, #10
   31cca:	d106      	bne.n	31cda <_http_client_read_chuked_entity+0x126>
					buffer++;
   31ccc:	697b      	ldr	r3, [r7, #20]
   31cce:	3301      	adds	r3, #1
   31cd0:	617b      	str	r3, [r7, #20]
					length--;
   31cd2:	69fb      	ldr	r3, [r7, #28]
   31cd4:	3b01      	subs	r3, #1
   31cd6:	61fb      	str	r3, [r7, #28]
					break;
   31cd8:	e052      	b.n	31d80 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   31cda:	69bb      	ldr	r3, [r7, #24]
   31cdc:	2b00      	cmp	r3, #0
   31cde:	d145      	bne.n	31d6c <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   31ce0:	697b      	ldr	r3, [r7, #20]
   31ce2:	781b      	ldrb	r3, [r3, #0]
   31ce4:	2b2f      	cmp	r3, #47	; 0x2f
   31ce6:	d910      	bls.n	31d0a <_http_client_read_chuked_entity+0x156>
   31ce8:	697b      	ldr	r3, [r7, #20]
   31cea:	781b      	ldrb	r3, [r3, #0]
   31cec:	2b39      	cmp	r3, #57	; 0x39
   31cee:	d80c      	bhi.n	31d0a <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   31cf0:	687b      	ldr	r3, [r7, #4]
   31cf2:	22e0      	movs	r2, #224	; 0xe0
   31cf4:	589b      	ldr	r3, [r3, r2]
   31cf6:	011b      	lsls	r3, r3, #4
   31cf8:	697a      	ldr	r2, [r7, #20]
   31cfa:	7812      	ldrb	r2, [r2, #0]
   31cfc:	189b      	adds	r3, r3, r2
   31cfe:	3b30      	subs	r3, #48	; 0x30
   31d00:	001a      	movs	r2, r3
   31d02:	687b      	ldr	r3, [r7, #4]
   31d04:	21e0      	movs	r1, #224	; 0xe0
   31d06:	505a      	str	r2, [r3, r1]
   31d08:	e031      	b.n	31d6e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   31d0a:	697b      	ldr	r3, [r7, #20]
   31d0c:	781b      	ldrb	r3, [r3, #0]
   31d0e:	2b60      	cmp	r3, #96	; 0x60
   31d10:	d910      	bls.n	31d34 <_http_client_read_chuked_entity+0x180>
   31d12:	697b      	ldr	r3, [r7, #20]
   31d14:	781b      	ldrb	r3, [r3, #0]
   31d16:	2b66      	cmp	r3, #102	; 0x66
   31d18:	d80c      	bhi.n	31d34 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   31d1a:	687b      	ldr	r3, [r7, #4]
   31d1c:	22e0      	movs	r2, #224	; 0xe0
   31d1e:	589b      	ldr	r3, [r3, r2]
   31d20:	011b      	lsls	r3, r3, #4
   31d22:	697a      	ldr	r2, [r7, #20]
   31d24:	7812      	ldrb	r2, [r2, #0]
   31d26:	189b      	adds	r3, r3, r2
   31d28:	3b61      	subs	r3, #97	; 0x61
   31d2a:	001a      	movs	r2, r3
   31d2c:	687b      	ldr	r3, [r7, #4]
   31d2e:	21e0      	movs	r1, #224	; 0xe0
   31d30:	505a      	str	r2, [r3, r1]
   31d32:	e01c      	b.n	31d6e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   31d34:	697b      	ldr	r3, [r7, #20]
   31d36:	781b      	ldrb	r3, [r3, #0]
   31d38:	2b40      	cmp	r3, #64	; 0x40
   31d3a:	d910      	bls.n	31d5e <_http_client_read_chuked_entity+0x1aa>
   31d3c:	697b      	ldr	r3, [r7, #20]
   31d3e:	781b      	ldrb	r3, [r3, #0]
   31d40:	2b46      	cmp	r3, #70	; 0x46
   31d42:	d80c      	bhi.n	31d5e <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   31d44:	687b      	ldr	r3, [r7, #4]
   31d46:	22e0      	movs	r2, #224	; 0xe0
   31d48:	589b      	ldr	r3, [r3, r2]
   31d4a:	011b      	lsls	r3, r3, #4
   31d4c:	697a      	ldr	r2, [r7, #20]
   31d4e:	7812      	ldrb	r2, [r2, #0]
   31d50:	189b      	adds	r3, r3, r2
   31d52:	3b41      	subs	r3, #65	; 0x41
   31d54:	001a      	movs	r2, r3
   31d56:	687b      	ldr	r3, [r7, #4]
   31d58:	21e0      	movs	r1, #224	; 0xe0
   31d5a:	505a      	str	r2, [r3, r1]
   31d5c:	e007      	b.n	31d6e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   31d5e:	697b      	ldr	r3, [r7, #20]
   31d60:	781b      	ldrb	r3, [r3, #0]
   31d62:	2b3b      	cmp	r3, #59	; 0x3b
   31d64:	d103      	bne.n	31d6e <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   31d66:	2301      	movs	r3, #1
   31d68:	61bb      	str	r3, [r7, #24]
   31d6a:	e000      	b.n	31d6e <_http_client_read_chuked_entity+0x1ba>
					continue;
   31d6c:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   31d6e:	697b      	ldr	r3, [r7, #20]
   31d70:	3301      	adds	r3, #1
   31d72:	617b      	str	r3, [r7, #20]
   31d74:	69fb      	ldr	r3, [r7, #28]
   31d76:	3b01      	subs	r3, #1
   31d78:	61fb      	str	r3, [r7, #28]
   31d7a:	69fb      	ldr	r3, [r7, #28]
   31d7c:	2b00      	cmp	r3, #0
   31d7e:	dca1      	bgt.n	31cc4 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   31d80:	687b      	ldr	r3, [r7, #4]
   31d82:	22e0      	movs	r2, #224	; 0xe0
   31d84:	589a      	ldr	r2, [r3, r2]
   31d86:	687b      	ldr	r3, [r7, #4]
   31d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31d8a:	429a      	cmp	r2, r3
   31d8c:	dd07      	ble.n	31d9e <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   31d8e:	238b      	movs	r3, #139	; 0x8b
   31d90:	425a      	negs	r2, r3
   31d92:	687b      	ldr	r3, [r7, #4]
   31d94:	0011      	movs	r1, r2
   31d96:	0018      	movs	r0, r3
   31d98:	4b09      	ldr	r3, [pc, #36]	; (31dc0 <_http_client_read_chuked_entity+0x20c>)
   31d9a:	4798      	blx	r3
				return;
   31d9c:	e00d      	b.n	31dba <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   31d9e:	69fb      	ldr	r3, [r7, #28]
   31da0:	2b00      	cmp	r3, #0
   31da2:	d105      	bne.n	31db0 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   31da4:	687b      	ldr	r3, [r7, #4]
   31da6:	21e0      	movs	r1, #224	; 0xe0
   31da8:	2201      	movs	r2, #1
   31daa:	4252      	negs	r2, r2
   31dac:	505a      	str	r2, [r3, r1]
				return;
   31dae:	e004      	b.n	31dba <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   31db0:	687b      	ldr	r3, [r7, #4]
   31db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31db4:	2b00      	cmp	r3, #0
   31db6:	d000      	beq.n	31dba <_http_client_read_chuked_entity+0x206>
   31db8:	e708      	b.n	31bcc <_http_client_read_chuked_entity+0x18>
}
   31dba:	46bd      	mov	sp, r7
   31dbc:	b008      	add	sp, #32
   31dbe:	bd80      	pop	{r7, pc}
   31dc0:	00030f8d 	.word	0x00030f8d
   31dc4:	00031f75 	.word	0x00031f75

00031dc8 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   31dc8:	b580      	push	{r7, lr}
   31dca:	b086      	sub	sp, #24
   31dcc:	af00      	add	r7, sp, #0
   31dce:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   31dd0:	687b      	ldr	r3, [r7, #4]
   31dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31dd4:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   31dd6:	687b      	ldr	r3, [r7, #4]
   31dd8:	22dc      	movs	r2, #220	; 0xdc
   31dda:	589b      	ldr	r3, [r3, r2]
   31ddc:	2b00      	cmp	r3, #0
   31dde:	db58      	blt.n	31e92 <_http_client_handle_entity+0xca>
   31de0:	687b      	ldr	r3, [r7, #4]
   31de2:	22dc      	movs	r2, #220	; 0xdc
   31de4:	589a      	ldr	r2, [r3, r2]
   31de6:	687b      	ldr	r3, [r7, #4]
   31de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31dea:	429a      	cmp	r2, r3
   31dec:	dc51      	bgt.n	31e92 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   31dee:	687b      	ldr	r3, [r7, #4]
   31df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31df2:	0019      	movs	r1, r3
   31df4:	687b      	ldr	r3, [r7, #4]
   31df6:	22dc      	movs	r2, #220	; 0xdc
   31df8:	589b      	ldr	r3, [r3, r2]
   31dfa:	4299      	cmp	r1, r3
   31dfc:	da00      	bge.n	31e00 <_http_client_handle_entity+0x38>
   31dfe:	e0a9      	b.n	31f54 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   31e00:	687b      	ldr	r3, [r7, #4]
   31e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31e04:	2b00      	cmp	r3, #0
   31e06:	d020      	beq.n	31e4a <_http_client_handle_entity+0x82>
   31e08:	687b      	ldr	r3, [r7, #4]
   31e0a:	22e4      	movs	r2, #228	; 0xe4
   31e0c:	5a9b      	ldrh	r3, [r3, r2]
   31e0e:	2b00      	cmp	r3, #0
   31e10:	d01b      	beq.n	31e4a <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   31e12:	687b      	ldr	r3, [r7, #4]
   31e14:	22e4      	movs	r2, #228	; 0xe4
   31e16:	5a9a      	ldrh	r2, [r3, r2]
   31e18:	2308      	movs	r3, #8
   31e1a:	18fb      	adds	r3, r7, r3
   31e1c:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   31e1e:	2308      	movs	r3, #8
   31e20:	18fb      	adds	r3, r7, r3
   31e22:	2200      	movs	r2, #0
   31e24:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   31e26:	687b      	ldr	r3, [r7, #4]
   31e28:	22dc      	movs	r2, #220	; 0xdc
   31e2a:	589b      	ldr	r3, [r3, r2]
   31e2c:	001a      	movs	r2, r3
   31e2e:	2308      	movs	r3, #8
   31e30:	18fb      	adds	r3, r7, r3
   31e32:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   31e34:	2308      	movs	r3, #8
   31e36:	18fb      	adds	r3, r7, r3
   31e38:	697a      	ldr	r2, [r7, #20]
   31e3a:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   31e3c:	687b      	ldr	r3, [r7, #4]
   31e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31e40:	2208      	movs	r2, #8
   31e42:	18ba      	adds	r2, r7, r2
   31e44:	6878      	ldr	r0, [r7, #4]
   31e46:	2102      	movs	r1, #2
   31e48:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   31e4a:	687b      	ldr	r3, [r7, #4]
   31e4c:	22d8      	movs	r2, #216	; 0xd8
   31e4e:	2100      	movs	r1, #0
   31e50:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   31e52:	687b      	ldr	r3, [r7, #4]
   31e54:	22e4      	movs	r2, #228	; 0xe4
   31e56:	2100      	movs	r1, #0
   31e58:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   31e5a:	687b      	ldr	r3, [r7, #4]
   31e5c:	2241      	movs	r2, #65	; 0x41
   31e5e:	5c9b      	ldrb	r3, [r3, r2]
   31e60:	2202      	movs	r2, #2
   31e62:	4013      	ands	r3, r2
   31e64:	b2db      	uxtb	r3, r3
   31e66:	2b00      	cmp	r3, #0
   31e68:	d105      	bne.n	31e76 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   31e6a:	687b      	ldr	r3, [r7, #4]
   31e6c:	2100      	movs	r1, #0
   31e6e:	0018      	movs	r0, r3
   31e70:	4b3b      	ldr	r3, [pc, #236]	; (31f60 <_http_client_handle_entity+0x198>)
   31e72:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   31e74:	e06e      	b.n	31f54 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   31e76:	687b      	ldr	r3, [r7, #4]
   31e78:	22dc      	movs	r2, #220	; 0xdc
   31e7a:	589b      	ldr	r3, [r3, r2]
   31e7c:	001a      	movs	r2, r3
   31e7e:	697b      	ldr	r3, [r7, #20]
   31e80:	189a      	adds	r2, r3, r2
   31e82:	687b      	ldr	r3, [r7, #4]
   31e84:	0011      	movs	r1, r2
   31e86:	0018      	movs	r0, r3
   31e88:	4b36      	ldr	r3, [pc, #216]	; (31f64 <_http_client_handle_entity+0x19c>)
   31e8a:	4798      	blx	r3
				return module->recved_size;
   31e8c:	687b      	ldr	r3, [r7, #4]
   31e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31e90:	e061      	b.n	31f56 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   31e92:	687b      	ldr	r3, [r7, #4]
   31e94:	22dc      	movs	r2, #220	; 0xdc
   31e96:	589b      	ldr	r3, [r3, r2]
   31e98:	2b00      	cmp	r3, #0
   31e9a:	db57      	blt.n	31f4c <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   31e9c:	687b      	ldr	r3, [r7, #4]
   31e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31ea0:	2308      	movs	r3, #8
   31ea2:	18fb      	adds	r3, r7, r3
   31ea4:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   31ea6:	2308      	movs	r3, #8
   31ea8:	18fb      	adds	r3, r7, r3
   31eaa:	697a      	ldr	r2, [r7, #20]
   31eac:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   31eae:	687b      	ldr	r3, [r7, #4]
   31eb0:	22e0      	movs	r2, #224	; 0xe0
   31eb2:	589a      	ldr	r2, [r3, r2]
   31eb4:	687b      	ldr	r3, [r7, #4]
   31eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31eb8:	18d2      	adds	r2, r2, r3
   31eba:	687b      	ldr	r3, [r7, #4]
   31ebc:	21e0      	movs	r1, #224	; 0xe0
   31ebe:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   31ec0:	687b      	ldr	r3, [r7, #4]
   31ec2:	22dc      	movs	r2, #220	; 0xdc
   31ec4:	589a      	ldr	r2, [r3, r2]
   31ec6:	687b      	ldr	r3, [r7, #4]
   31ec8:	21e0      	movs	r1, #224	; 0xe0
   31eca:	585b      	ldr	r3, [r3, r1]
   31ecc:	429a      	cmp	r2, r3
   31ece:	dc0c      	bgt.n	31eea <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   31ed0:	687b      	ldr	r3, [r7, #4]
   31ed2:	22d8      	movs	r2, #216	; 0xd8
   31ed4:	2100      	movs	r1, #0
   31ed6:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31ed8:	687b      	ldr	r3, [r7, #4]
   31eda:	22e4      	movs	r2, #228	; 0xe4
   31edc:	2100      	movs	r1, #0
   31ede:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   31ee0:	2308      	movs	r3, #8
   31ee2:	18fb      	adds	r3, r7, r3
   31ee4:	2201      	movs	r2, #1
   31ee6:	721a      	strb	r2, [r3, #8]
   31ee8:	e003      	b.n	31ef2 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   31eea:	2308      	movs	r3, #8
   31eec:	18fb      	adds	r3, r7, r3
   31eee:	2200      	movs	r2, #0
   31ef0:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   31ef2:	687b      	ldr	r3, [r7, #4]
   31ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31ef6:	2b00      	cmp	r3, #0
   31ef8:	d006      	beq.n	31f08 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31efa:	687b      	ldr	r3, [r7, #4]
   31efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31efe:	2208      	movs	r2, #8
   31f00:	18ba      	adds	r2, r7, r2
   31f02:	6878      	ldr	r0, [r7, #4]
   31f04:	2103      	movs	r1, #3
   31f06:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   31f08:	2308      	movs	r3, #8
   31f0a:	18fb      	adds	r3, r7, r3
   31f0c:	7a1b      	ldrb	r3, [r3, #8]
   31f0e:	2b01      	cmp	r3, #1
   31f10:	d112      	bne.n	31f38 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   31f12:	687b      	ldr	r3, [r7, #4]
   31f14:	2241      	movs	r2, #65	; 0x41
   31f16:	5c9b      	ldrb	r3, [r3, r2]
   31f18:	2202      	movs	r2, #2
   31f1a:	4013      	ands	r3, r2
   31f1c:	b2db      	uxtb	r3, r3
   31f1e:	2b00      	cmp	r3, #0
   31f20:	d10a      	bne.n	31f38 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   31f22:	4b11      	ldr	r3, [pc, #68]	; (31f68 <_http_client_handle_entity+0x1a0>)
   31f24:	0018      	movs	r0, r3
   31f26:	4b11      	ldr	r3, [pc, #68]	; (31f6c <_http_client_handle_entity+0x1a4>)
   31f28:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   31f2a:	687b      	ldr	r3, [r7, #4]
   31f2c:	2100      	movs	r1, #0
   31f2e:	0018      	movs	r0, r3
   31f30:	4b0b      	ldr	r3, [pc, #44]	; (31f60 <_http_client_handle_entity+0x198>)
   31f32:	4798      	blx	r3
					return 0;
   31f34:	2300      	movs	r3, #0
   31f36:	e00e      	b.n	31f56 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   31f38:	687b      	ldr	r3, [r7, #4]
   31f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31f3c:	697a      	ldr	r2, [r7, #20]
   31f3e:	18d2      	adds	r2, r2, r3
   31f40:	687b      	ldr	r3, [r7, #4]
   31f42:	0011      	movs	r1, r2
   31f44:	0018      	movs	r0, r3
   31f46:	4b07      	ldr	r3, [pc, #28]	; (31f64 <_http_client_handle_entity+0x19c>)
   31f48:	4798      	blx	r3
   31f4a:	e003      	b.n	31f54 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   31f4c:	687b      	ldr	r3, [r7, #4]
   31f4e:	0018      	movs	r0, r3
   31f50:	4b07      	ldr	r3, [pc, #28]	; (31f70 <_http_client_handle_entity+0x1a8>)
   31f52:	4798      	blx	r3
		}
	}

	return 0;
   31f54:	2300      	movs	r3, #0
}
   31f56:	0018      	movs	r0, r3
   31f58:	46bd      	mov	sp, r7
   31f5a:	b006      	add	sp, #24
   31f5c:	bd80      	pop	{r7, pc}
   31f5e:	46c0      	nop			; (mov r8, r8)
   31f60:	00030f8d 	.word	0x00030f8d
   31f64:	00031f75 	.word	0x00031f75
   31f68:	00039a78 	.word	0x00039a78
   31f6c:	00034901 	.word	0x00034901
   31f70:	00031bb5 	.word	0x00031bb5

00031f74 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   31f74:	b580      	push	{r7, lr}
   31f76:	b084      	sub	sp, #16
   31f78:	af00      	add	r7, sp, #0
   31f7a:	6078      	str	r0, [r7, #4]
   31f7c:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   31f7e:	687b      	ldr	r3, [r7, #4]
   31f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31f82:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   31f84:	687b      	ldr	r3, [r7, #4]
   31f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31f88:	001a      	movs	r2, r3
   31f8a:	683b      	ldr	r3, [r7, #0]
   31f8c:	1ad2      	subs	r2, r2, r3
   31f8e:	68fb      	ldr	r3, [r7, #12]
   31f90:	18d3      	adds	r3, r2, r3
   31f92:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   31f94:	68bb      	ldr	r3, [r7, #8]
   31f96:	2b00      	cmp	r3, #0
   31f98:	dd09      	ble.n	31fae <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   31f9a:	68ba      	ldr	r2, [r7, #8]
   31f9c:	6839      	ldr	r1, [r7, #0]
   31f9e:	68fb      	ldr	r3, [r7, #12]
   31fa0:	0018      	movs	r0, r3
   31fa2:	4b06      	ldr	r3, [pc, #24]	; (31fbc <_http_client_move_buffer+0x48>)
   31fa4:	4798      	blx	r3
		module->recved_size = remain;
   31fa6:	68ba      	ldr	r2, [r7, #8]
   31fa8:	687b      	ldr	r3, [r7, #4]
   31faa:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   31fac:	e002      	b.n	31fb4 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   31fae:	687b      	ldr	r3, [r7, #4]
   31fb0:	2200      	movs	r2, #0
   31fb2:	645a      	str	r2, [r3, #68]	; 0x44
}
   31fb4:	46c0      	nop			; (mov r8, r8)
   31fb6:	46bd      	mov	sp, r7
   31fb8:	b004      	add	sp, #16
   31fba:	bd80      	pop	{r7, pc}
   31fbc:	000346bb 	.word	0x000346bb

00031fc0 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   31fc0:	b580      	push	{r7, lr}
   31fc2:	b084      	sub	sp, #16
   31fc4:	af00      	add	r7, sp, #0
   31fc6:	60f8      	str	r0, [r7, #12]
   31fc8:	60b9      	str	r1, [r7, #8]
   31fca:	607a      	str	r2, [r7, #4]
   31fcc:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   31fce:	68fb      	ldr	r3, [r7, #12]
   31fd0:	687a      	ldr	r2, [r7, #4]
   31fd2:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   31fd4:	68fb      	ldr	r3, [r7, #12]
   31fd6:	68ba      	ldr	r2, [r7, #8]
   31fd8:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   31fda:	68fb      	ldr	r3, [r7, #12]
   31fdc:	2200      	movs	r2, #0
   31fde:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   31fe0:	68fb      	ldr	r3, [r7, #12]
   31fe2:	683a      	ldr	r2, [r7, #0]
   31fe4:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   31fe6:	68fb      	ldr	r3, [r7, #12]
   31fe8:	69ba      	ldr	r2, [r7, #24]
   31fea:	60da      	str	r2, [r3, #12]
}
   31fec:	46c0      	nop			; (mov r8, r8)
   31fee:	46bd      	mov	sp, r7
   31ff0:	b004      	add	sp, #16
   31ff2:	bd80      	pop	{r7, pc}

00031ff4 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   31ff4:	b580      	push	{r7, lr}
   31ff6:	b084      	sub	sp, #16
   31ff8:	af00      	add	r7, sp, #0
   31ffa:	6078      	str	r0, [r7, #4]
   31ffc:	000a      	movs	r2, r1
   31ffe:	1cfb      	adds	r3, r7, #3
   32000:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   32002:	687b      	ldr	r3, [r7, #4]
   32004:	681a      	ldr	r2, [r3, #0]
   32006:	687b      	ldr	r3, [r7, #4]
   32008:	685b      	ldr	r3, [r3, #4]
   3200a:	1ad3      	subs	r3, r2, r3
   3200c:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   3200e:	68fb      	ldr	r3, [r7, #12]
   32010:	2b00      	cmp	r3, #0
   32012:	dc03      	bgt.n	3201c <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   32014:	687b      	ldr	r3, [r7, #4]
   32016:	0018      	movs	r0, r3
   32018:	4b08      	ldr	r3, [pc, #32]	; (3203c <stream_writer_send_8+0x48>)
   3201a:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   3201c:	687b      	ldr	r3, [r7, #4]
   3201e:	6919      	ldr	r1, [r3, #16]
   32020:	687b      	ldr	r3, [r7, #4]
   32022:	685b      	ldr	r3, [r3, #4]
   32024:	1c58      	adds	r0, r3, #1
   32026:	687a      	ldr	r2, [r7, #4]
   32028:	6050      	str	r0, [r2, #4]
   3202a:	18cb      	adds	r3, r1, r3
   3202c:	1cfa      	adds	r2, r7, #3
   3202e:	7812      	ldrb	r2, [r2, #0]
   32030:	701a      	strb	r2, [r3, #0]
}
   32032:	46c0      	nop			; (mov r8, r8)
   32034:	46bd      	mov	sp, r7
   32036:	b004      	add	sp, #16
   32038:	bd80      	pop	{r7, pc}
   3203a:	46c0      	nop			; (mov r8, r8)
   3203c:	0003207d 	.word	0x0003207d

00032040 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   32040:	b580      	push	{r7, lr}
   32042:	b084      	sub	sp, #16
   32044:	af00      	add	r7, sp, #0
   32046:	60f8      	str	r0, [r7, #12]
   32048:	60b9      	str	r1, [r7, #8]
   3204a:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   3204c:	e00d      	b.n	3206a <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   3204e:	68bb      	ldr	r3, [r7, #8]
   32050:	781b      	ldrb	r3, [r3, #0]
   32052:	b25a      	sxtb	r2, r3
   32054:	68fb      	ldr	r3, [r7, #12]
   32056:	0011      	movs	r1, r2
   32058:	0018      	movs	r0, r3
   3205a:	4b07      	ldr	r3, [pc, #28]	; (32078 <stream_writer_send_buffer+0x38>)
   3205c:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   3205e:	687b      	ldr	r3, [r7, #4]
   32060:	3b01      	subs	r3, #1
   32062:	607b      	str	r3, [r7, #4]
   32064:	68bb      	ldr	r3, [r7, #8]
   32066:	3301      	adds	r3, #1
   32068:	60bb      	str	r3, [r7, #8]
   3206a:	687b      	ldr	r3, [r7, #4]
   3206c:	2b00      	cmp	r3, #0
   3206e:	d1ee      	bne.n	3204e <stream_writer_send_buffer+0xe>
	}
}
   32070:	46c0      	nop			; (mov r8, r8)
   32072:	46bd      	mov	sp, r7
   32074:	b004      	add	sp, #16
   32076:	bd80      	pop	{r7, pc}
   32078:	00031ff5 	.word	0x00031ff5

0003207c <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   3207c:	b590      	push	{r4, r7, lr}
   3207e:	b083      	sub	sp, #12
   32080:	af00      	add	r7, sp, #0
   32082:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   32084:	687b      	ldr	r3, [r7, #4]
   32086:	685b      	ldr	r3, [r3, #4]
   32088:	2b00      	cmp	r3, #0
   3208a:	d00c      	beq.n	320a6 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   3208c:	687b      	ldr	r3, [r7, #4]
   3208e:	689c      	ldr	r4, [r3, #8]
   32090:	687b      	ldr	r3, [r7, #4]
   32092:	68d8      	ldr	r0, [r3, #12]
   32094:	687b      	ldr	r3, [r7, #4]
   32096:	6919      	ldr	r1, [r3, #16]
   32098:	687b      	ldr	r3, [r7, #4]
   3209a:	685b      	ldr	r3, [r3, #4]
   3209c:	001a      	movs	r2, r3
   3209e:	47a0      	blx	r4
		writer->written = 0;
   320a0:	687b      	ldr	r3, [r7, #4]
   320a2:	2200      	movs	r2, #0
   320a4:	605a      	str	r2, [r3, #4]
	}
}
   320a6:	46c0      	nop			; (mov r8, r8)
   320a8:	46bd      	mov	sp, r7
   320aa:	b003      	add	sp, #12
   320ac:	bd90      	pop	{r4, r7, pc}
	...

000320b0 <system_cpu_clock_get_hz>:
{
   320b0:	b580      	push	{r7, lr}
   320b2:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   320b4:	2000      	movs	r0, #0
   320b6:	4b05      	ldr	r3, [pc, #20]	; (320cc <system_cpu_clock_get_hz+0x1c>)
   320b8:	4798      	blx	r3
   320ba:	0002      	movs	r2, r0
   320bc:	4b04      	ldr	r3, [pc, #16]	; (320d0 <system_cpu_clock_get_hz+0x20>)
   320be:	7a1b      	ldrb	r3, [r3, #8]
   320c0:	b2db      	uxtb	r3, r3
   320c2:	40da      	lsrs	r2, r3
   320c4:	0013      	movs	r3, r2
}
   320c6:	0018      	movs	r0, r3
   320c8:	46bd      	mov	sp, r7
   320ca:	bd80      	pop	{r7, pc}
   320cc:	00029a91 	.word	0x00029a91
   320d0:	40000400 	.word	0x40000400

000320d4 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   320d4:	b580      	push	{r7, lr}
   320d6:	b084      	sub	sp, #16
   320d8:	af00      	add	r7, sp, #0
   320da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   320dc:	687b      	ldr	r3, [r7, #4]
   320de:	681b      	ldr	r3, [r3, #0]
   320e0:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   320e2:	46c0      	nop			; (mov r8, r8)
   320e4:	68fb      	ldr	r3, [r7, #12]
   320e6:	689b      	ldr	r3, [r3, #8]
   320e8:	2202      	movs	r2, #2
   320ea:	4013      	ands	r3, r2
   320ec:	d1fa      	bne.n	320e4 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   320ee:	68fb      	ldr	r3, [r7, #12]
   320f0:	681b      	ldr	r3, [r3, #0]
   320f2:	2202      	movs	r2, #2
   320f4:	431a      	orrs	r2, r3
   320f6:	68fb      	ldr	r3, [r7, #12]
   320f8:	601a      	str	r2, [r3, #0]
}
   320fa:	46c0      	nop			; (mov r8, r8)
   320fc:	46bd      	mov	sp, r7
   320fe:	b004      	add	sp, #16
   32100:	bd80      	pop	{r7, pc}
	...

00032104 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   32104:	b580      	push	{r7, lr}
   32106:	b082      	sub	sp, #8
   32108:	af00      	add	r7, sp, #0
   3210a:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   3210c:	4b04      	ldr	r3, [pc, #16]	; (32120 <sw_timer_tcc_callback+0x1c>)
   3210e:	681b      	ldr	r3, [r3, #0]
   32110:	1c5a      	adds	r2, r3, #1
   32112:	4b03      	ldr	r3, [pc, #12]	; (32120 <sw_timer_tcc_callback+0x1c>)
   32114:	601a      	str	r2, [r3, #0]
}
   32116:	46c0      	nop			; (mov r8, r8)
   32118:	46bd      	mov	sp, r7
   3211a:	b002      	add	sp, #8
   3211c:	bd80      	pop	{r7, pc}
   3211e:	46c0      	nop			; (mov r8, r8)
   32120:	200045b4 	.word	0x200045b4

00032124 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   32124:	b580      	push	{r7, lr}
   32126:	b082      	sub	sp, #8
   32128:	af00      	add	r7, sp, #0
   3212a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   3212c:	687b      	ldr	r3, [r7, #4]
   3212e:	2264      	movs	r2, #100	; 0x64
   32130:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   32132:	687b      	ldr	r3, [r7, #4]
   32134:	2200      	movs	r2, #0
   32136:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   32138:	687b      	ldr	r3, [r7, #4]
   3213a:	2200      	movs	r2, #0
   3213c:	705a      	strb	r2, [r3, #1]
}
   3213e:	46c0      	nop			; (mov r8, r8)
   32140:	46bd      	mov	sp, r7
   32142:	b002      	add	sp, #8
   32144:	bd80      	pop	{r7, pc}
	...

00032148 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   32148:	b590      	push	{r4, r7, lr}
   3214a:	b0b1      	sub	sp, #196	; 0xc4
   3214c:	af00      	add	r7, sp, #0
   3214e:	6078      	str	r0, [r7, #4]
   32150:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   32152:	230c      	movs	r3, #12
   32154:	18fb      	adds	r3, r7, r3
   32156:	4a2e      	ldr	r2, [pc, #184]	; (32210 <sw_timer_init+0xc8>)
   32158:	ca13      	ldmia	r2!, {r0, r1, r4}
   3215a:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   3215c:	683b      	ldr	r3, [r7, #0]
   3215e:	885b      	ldrh	r3, [r3, #2]
   32160:	001a      	movs	r2, r3
   32162:	687b      	ldr	r3, [r7, #4]
   32164:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   32166:	687b      	ldr	r3, [r7, #4]
   32168:	3314      	adds	r3, #20
   3216a:	22bc      	movs	r2, #188	; 0xbc
   3216c:	18ba      	adds	r2, r7, r2
   3216e:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   32170:	683b      	ldr	r3, [r7, #0]
   32172:	781b      	ldrb	r3, [r3, #0]
   32174:	001a      	movs	r2, r3
   32176:	230c      	movs	r3, #12
   32178:	18fb      	adds	r3, r7, r3
   3217a:	0092      	lsls	r2, r2, #2
   3217c:	58d2      	ldr	r2, [r2, r3]
   3217e:	2318      	movs	r3, #24
   32180:	18fb      	adds	r3, r7, r3
   32182:	0011      	movs	r1, r2
   32184:	0018      	movs	r0, r3
   32186:	4b23      	ldr	r3, [pc, #140]	; (32214 <sw_timer_init+0xcc>)
   32188:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   3218a:	4b23      	ldr	r3, [pc, #140]	; (32218 <sw_timer_init+0xd0>)
   3218c:	4798      	blx	r3
   3218e:	0004      	movs	r4, r0
   32190:	683b      	ldr	r3, [r7, #0]
   32192:	885b      	ldrh	r3, [r3, #2]
   32194:	001a      	movs	r2, r3
   32196:	4b21      	ldr	r3, [pc, #132]	; (3221c <sw_timer_init+0xd4>)
   32198:	0011      	movs	r1, r2
   3219a:	22fa      	movs	r2, #250	; 0xfa
   3219c:	0210      	lsls	r0, r2, #8
   3219e:	4798      	blx	r3
   321a0:	0003      	movs	r3, r0
   321a2:	001a      	movs	r2, r3
   321a4:	4b1e      	ldr	r3, [pc, #120]	; (32220 <sw_timer_init+0xd8>)
   321a6:	0011      	movs	r1, r2
   321a8:	0020      	movs	r0, r4
   321aa:	4798      	blx	r3
   321ac:	0003      	movs	r3, r0
   321ae:	001a      	movs	r2, r3
   321b0:	2318      	movs	r3, #24
   321b2:	18fb      	adds	r3, r7, r3
   321b4:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   321b6:	2318      	movs	r3, #24
   321b8:	18fb      	adds	r3, r7, r3
   321ba:	2205      	movs	r2, #5
   321bc:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   321be:	683b      	ldr	r3, [r7, #0]
   321c0:	781b      	ldrb	r3, [r3, #0]
   321c2:	001a      	movs	r2, r3
   321c4:	230c      	movs	r3, #12
   321c6:	18fb      	adds	r3, r7, r3
   321c8:	0092      	lsls	r2, r2, #2
   321ca:	58d1      	ldr	r1, [r2, r3]
   321cc:	2318      	movs	r3, #24
   321ce:	18fa      	adds	r2, r7, r3
   321d0:	23bc      	movs	r3, #188	; 0xbc
   321d2:	18fb      	adds	r3, r7, r3
   321d4:	681b      	ldr	r3, [r3, #0]
   321d6:	0018      	movs	r0, r3
   321d8:	4b12      	ldr	r3, [pc, #72]	; (32224 <sw_timer_init+0xdc>)
   321da:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   321dc:	683b      	ldr	r3, [r7, #0]
   321de:	785b      	ldrb	r3, [r3, #1]
   321e0:	3308      	adds	r3, #8
   321e2:	b2da      	uxtb	r2, r3
   321e4:	4910      	ldr	r1, [pc, #64]	; (32228 <sw_timer_init+0xe0>)
   321e6:	23bc      	movs	r3, #188	; 0xbc
   321e8:	18fb      	adds	r3, r7, r3
   321ea:	681b      	ldr	r3, [r3, #0]
   321ec:	0018      	movs	r0, r3
   321ee:	4b0f      	ldr	r3, [pc, #60]	; (3222c <sw_timer_init+0xe4>)
   321f0:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   321f2:	683b      	ldr	r3, [r7, #0]
   321f4:	785b      	ldrb	r3, [r3, #1]
   321f6:	3308      	adds	r3, #8
   321f8:	b2da      	uxtb	r2, r3
   321fa:	23bc      	movs	r3, #188	; 0xbc
   321fc:	18fb      	adds	r3, r7, r3
   321fe:	681b      	ldr	r3, [r3, #0]
   32200:	0011      	movs	r1, r2
   32202:	0018      	movs	r0, r3
   32204:	4b0a      	ldr	r3, [pc, #40]	; (32230 <sw_timer_init+0xe8>)
   32206:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   32208:	46c0      	nop			; (mov r8, r8)
   3220a:	46bd      	mov	sp, r7
   3220c:	b031      	add	sp, #196	; 0xc4
   3220e:	bd90      	pop	{r4, r7, pc}
   32210:	00039ab8 	.word	0x00039ab8
   32214:	0002a029 	.word	0x0002a029
   32218:	000320b1 	.word	0x000320b1
   3221c:	00032819 	.word	0x00032819
   32220:	00032705 	.word	0x00032705
   32224:	0002a685 	.word	0x0002a685
   32228:	00032105 	.word	0x00032105
   3222c:	0002aa9d 	.word	0x0002aa9d
   32230:	0002aadd 	.word	0x0002aadd

00032234 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   32234:	b580      	push	{r7, lr}
   32236:	b084      	sub	sp, #16
   32238:	af00      	add	r7, sp, #0
   3223a:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   3223c:	687b      	ldr	r3, [r7, #4]
   3223e:	3314      	adds	r3, #20
   32240:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   32242:	68fb      	ldr	r3, [r7, #12]
   32244:	0018      	movs	r0, r3
   32246:	4b03      	ldr	r3, [pc, #12]	; (32254 <sw_timer_enable+0x20>)
   32248:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   3224a:	46c0      	nop			; (mov r8, r8)
   3224c:	46bd      	mov	sp, r7
   3224e:	b004      	add	sp, #16
   32250:	bd80      	pop	{r7, pc}
   32252:	46c0      	nop			; (mov r8, r8)
   32254:	000320d5 	.word	0x000320d5

00032258 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   32258:	b580      	push	{r7, lr}
   3225a:	b086      	sub	sp, #24
   3225c:	af00      	add	r7, sp, #0
   3225e:	60f8      	str	r0, [r7, #12]
   32260:	60b9      	str	r1, [r7, #8]
   32262:	607a      	str	r2, [r7, #4]
   32264:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32266:	2300      	movs	r3, #0
   32268:	617b      	str	r3, [r7, #20]
   3226a:	e032      	b.n	322d2 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   3226c:	68f9      	ldr	r1, [r7, #12]
   3226e:	697a      	ldr	r2, [r7, #20]
   32270:	0013      	movs	r3, r2
   32272:	009b      	lsls	r3, r3, #2
   32274:	189b      	adds	r3, r3, r2
   32276:	009b      	lsls	r3, r3, #2
   32278:	5c5b      	ldrb	r3, [r3, r1]
   3227a:	07db      	lsls	r3, r3, #31
   3227c:	0fdb      	lsrs	r3, r3, #31
   3227e:	b2db      	uxtb	r3, r3
   32280:	2b00      	cmp	r3, #0
   32282:	d123      	bne.n	322cc <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   32284:	697a      	ldr	r2, [r7, #20]
   32286:	0013      	movs	r3, r2
   32288:	009b      	lsls	r3, r3, #2
   3228a:	189b      	adds	r3, r3, r2
   3228c:	009b      	lsls	r3, r3, #2
   3228e:	68fa      	ldr	r2, [r7, #12]
   32290:	18d3      	adds	r3, r2, r3
   32292:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   32294:	693b      	ldr	r3, [r7, #16]
   32296:	68ba      	ldr	r2, [r7, #8]
   32298:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   3229a:	693b      	ldr	r3, [r7, #16]
   3229c:	781a      	ldrb	r2, [r3, #0]
   3229e:	2102      	movs	r1, #2
   322a0:	438a      	bics	r2, r1
   322a2:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   322a4:	693b      	ldr	r3, [r7, #16]
   322a6:	687a      	ldr	r2, [r7, #4]
   322a8:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   322aa:	68fb      	ldr	r3, [r7, #12]
   322ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   322ae:	4b0d      	ldr	r3, [pc, #52]	; (322e4 <sw_timer_register_callback+0x8c>)
   322b0:	0011      	movs	r1, r2
   322b2:	6838      	ldr	r0, [r7, #0]
   322b4:	4798      	blx	r3
   322b6:	0003      	movs	r3, r0
   322b8:	001a      	movs	r2, r3
   322ba:	693b      	ldr	r3, [r7, #16]
   322bc:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   322be:	693b      	ldr	r3, [r7, #16]
   322c0:	781a      	ldrb	r2, [r3, #0]
   322c2:	2101      	movs	r1, #1
   322c4:	430a      	orrs	r2, r1
   322c6:	701a      	strb	r2, [r3, #0]
			return index;
   322c8:	697b      	ldr	r3, [r7, #20]
   322ca:	e007      	b.n	322dc <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   322cc:	697b      	ldr	r3, [r7, #20]
   322ce:	3301      	adds	r3, #1
   322d0:	617b      	str	r3, [r7, #20]
   322d2:	697b      	ldr	r3, [r7, #20]
   322d4:	2b00      	cmp	r3, #0
   322d6:	ddc9      	ble.n	3226c <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   322d8:	2301      	movs	r3, #1
   322da:	425b      	negs	r3, r3
}
   322dc:	0018      	movs	r0, r3
   322de:	46bd      	mov	sp, r7
   322e0:	b006      	add	sp, #24
   322e2:	bd80      	pop	{r7, pc}
   322e4:	00032705 	.word	0x00032705

000322e8 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   322e8:	b580      	push	{r7, lr}
   322ea:	b086      	sub	sp, #24
   322ec:	af00      	add	r7, sp, #0
   322ee:	60f8      	str	r0, [r7, #12]
   322f0:	60b9      	str	r1, [r7, #8]
   322f2:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   322f4:	68ba      	ldr	r2, [r7, #8]
   322f6:	0013      	movs	r3, r2
   322f8:	009b      	lsls	r3, r3, #2
   322fa:	189b      	adds	r3, r3, r2
   322fc:	009b      	lsls	r3, r3, #2
   322fe:	68fa      	ldr	r2, [r7, #12]
   32300:	18d3      	adds	r3, r2, r3
   32302:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   32304:	697b      	ldr	r3, [r7, #20]
   32306:	781a      	ldrb	r2, [r3, #0]
   32308:	2102      	movs	r1, #2
   3230a:	430a      	orrs	r2, r1
   3230c:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   3230e:	68fb      	ldr	r3, [r7, #12]
   32310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   32312:	4b07      	ldr	r3, [pc, #28]	; (32330 <sw_timer_enable_callback+0x48>)
   32314:	0011      	movs	r1, r2
   32316:	6878      	ldr	r0, [r7, #4]
   32318:	4798      	blx	r3
   3231a:	0003      	movs	r3, r0
   3231c:	001a      	movs	r2, r3
   3231e:	4b05      	ldr	r3, [pc, #20]	; (32334 <sw_timer_enable_callback+0x4c>)
   32320:	681b      	ldr	r3, [r3, #0]
   32322:	18d2      	adds	r2, r2, r3
   32324:	697b      	ldr	r3, [r7, #20]
   32326:	611a      	str	r2, [r3, #16]
}
   32328:	46c0      	nop			; (mov r8, r8)
   3232a:	46bd      	mov	sp, r7
   3232c:	b006      	add	sp, #24
   3232e:	bd80      	pop	{r7, pc}
   32330:	00032705 	.word	0x00032705
   32334:	200045b4 	.word	0x200045b4

00032338 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   32338:	b580      	push	{r7, lr}
   3233a:	b084      	sub	sp, #16
   3233c:	af00      	add	r7, sp, #0
   3233e:	6078      	str	r0, [r7, #4]
   32340:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   32342:	683a      	ldr	r2, [r7, #0]
   32344:	0013      	movs	r3, r2
   32346:	009b      	lsls	r3, r3, #2
   32348:	189b      	adds	r3, r3, r2
   3234a:	009b      	lsls	r3, r3, #2
   3234c:	687a      	ldr	r2, [r7, #4]
   3234e:	18d3      	adds	r3, r2, r3
   32350:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   32352:	68fb      	ldr	r3, [r7, #12]
   32354:	781a      	ldrb	r2, [r3, #0]
   32356:	2102      	movs	r1, #2
   32358:	438a      	bics	r2, r1
   3235a:	701a      	strb	r2, [r3, #0]
}
   3235c:	46c0      	nop			; (mov r8, r8)
   3235e:	46bd      	mov	sp, r7
   32360:	b004      	add	sp, #16
   32362:	bd80      	pop	{r7, pc}

00032364 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   32364:	b590      	push	{r4, r7, lr}
   32366:	b085      	sub	sp, #20
   32368:	af00      	add	r7, sp, #0
   3236a:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3236c:	2300      	movs	r3, #0
   3236e:	60fb      	str	r3, [r7, #12]
   32370:	e053      	b.n	3241a <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   32372:	6879      	ldr	r1, [r7, #4]
   32374:	68fa      	ldr	r2, [r7, #12]
   32376:	0013      	movs	r3, r2
   32378:	009b      	lsls	r3, r3, #2
   3237a:	189b      	adds	r3, r3, r2
   3237c:	009b      	lsls	r3, r3, #2
   3237e:	5c5b      	ldrb	r3, [r3, r1]
   32380:	07db      	lsls	r3, r3, #31
   32382:	0fdb      	lsrs	r3, r3, #31
   32384:	b2db      	uxtb	r3, r3
   32386:	2b00      	cmp	r3, #0
   32388:	d044      	beq.n	32414 <sw_timer_task+0xb0>
   3238a:	6879      	ldr	r1, [r7, #4]
   3238c:	68fa      	ldr	r2, [r7, #12]
   3238e:	0013      	movs	r3, r2
   32390:	009b      	lsls	r3, r3, #2
   32392:	189b      	adds	r3, r3, r2
   32394:	009b      	lsls	r3, r3, #2
   32396:	5c5b      	ldrb	r3, [r3, r1]
   32398:	079b      	lsls	r3, r3, #30
   3239a:	0fdb      	lsrs	r3, r3, #31
   3239c:	b2db      	uxtb	r3, r3
   3239e:	2b00      	cmp	r3, #0
   323a0:	d038      	beq.n	32414 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   323a2:	68fa      	ldr	r2, [r7, #12]
   323a4:	0013      	movs	r3, r2
   323a6:	009b      	lsls	r3, r3, #2
   323a8:	189b      	adds	r3, r3, r2
   323aa:	009b      	lsls	r3, r3, #2
   323ac:	687a      	ldr	r2, [r7, #4]
   323ae:	18d3      	adds	r3, r2, r3
   323b0:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   323b2:	68bb      	ldr	r3, [r7, #8]
   323b4:	691a      	ldr	r2, [r3, #16]
   323b6:	4b1c      	ldr	r3, [pc, #112]	; (32428 <sw_timer_task+0xc4>)
   323b8:	681b      	ldr	r3, [r3, #0]
   323ba:	1ad3      	subs	r3, r2, r3
   323bc:	d52a      	bpl.n	32414 <sw_timer_task+0xb0>
   323be:	68bb      	ldr	r3, [r7, #8]
   323c0:	781b      	ldrb	r3, [r3, #0]
   323c2:	2204      	movs	r2, #4
   323c4:	4013      	ands	r3, r2
   323c6:	b2db      	uxtb	r3, r3
   323c8:	2b00      	cmp	r3, #0
   323ca:	d123      	bne.n	32414 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   323cc:	68bb      	ldr	r3, [r7, #8]
   323ce:	781a      	ldrb	r2, [r3, #0]
   323d0:	2104      	movs	r1, #4
   323d2:	430a      	orrs	r2, r1
   323d4:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   323d6:	68bb      	ldr	r3, [r7, #8]
   323d8:	68db      	ldr	r3, [r3, #12]
   323da:	2b00      	cmp	r3, #0
   323dc:	d007      	beq.n	323ee <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   323de:	68bb      	ldr	r3, [r7, #8]
   323e0:	68da      	ldr	r2, [r3, #12]
   323e2:	4b11      	ldr	r3, [pc, #68]	; (32428 <sw_timer_task+0xc4>)
   323e4:	681b      	ldr	r3, [r3, #0]
   323e6:	18d2      	adds	r2, r2, r3
   323e8:	68bb      	ldr	r3, [r7, #8]
   323ea:	611a      	str	r2, [r3, #16]
   323ec:	e004      	b.n	323f8 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   323ee:	68bb      	ldr	r3, [r7, #8]
   323f0:	781a      	ldrb	r2, [r3, #0]
   323f2:	2102      	movs	r1, #2
   323f4:	438a      	bics	r2, r1
   323f6:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   323f8:	68bb      	ldr	r3, [r7, #8]
   323fa:	685c      	ldr	r4, [r3, #4]
   323fc:	68bb      	ldr	r3, [r7, #8]
   323fe:	689a      	ldr	r2, [r3, #8]
   32400:	68bb      	ldr	r3, [r7, #8]
   32402:	68db      	ldr	r3, [r3, #12]
   32404:	68f9      	ldr	r1, [r7, #12]
   32406:	6878      	ldr	r0, [r7, #4]
   32408:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   3240a:	68bb      	ldr	r3, [r7, #8]
   3240c:	781a      	ldrb	r2, [r3, #0]
   3240e:	2104      	movs	r1, #4
   32410:	438a      	bics	r2, r1
   32412:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32414:	68fb      	ldr	r3, [r7, #12]
   32416:	3301      	adds	r3, #1
   32418:	60fb      	str	r3, [r7, #12]
   3241a:	68fb      	ldr	r3, [r7, #12]
   3241c:	2b00      	cmp	r3, #0
   3241e:	dda8      	ble.n	32372 <sw_timer_task+0xe>
			}
		}
	}
}
   32420:	46c0      	nop			; (mov r8, r8)
   32422:	46bd      	mov	sp, r7
   32424:	b005      	add	sp, #20
   32426:	bd90      	pop	{r4, r7, pc}
   32428:	200045b4 	.word	0x200045b4

0003242c <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   3242c:	b580      	push	{r7, lr}
   3242e:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   32430:	4b06      	ldr	r3, [pc, #24]	; (3244c <main+0x20>)
   32432:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   32434:	4b06      	ldr	r3, [pc, #24]	; (32450 <main+0x24>)
   32436:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   32438:	2001      	movs	r0, #1
   3243a:	4b06      	ldr	r3, [pc, #24]	; (32454 <main+0x28>)
   3243c:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   3243e:	4b06      	ldr	r3, [pc, #24]	; (32458 <main+0x2c>)
   32440:	4798      	blx	r3

    return 0;  // Will not get here
   32442:	2300      	movs	r3, #0
}
   32444:	0018      	movs	r0, r3
   32446:	46bd      	mov	sp, r7
   32448:	bd80      	pop	{r7, pc}
   3244a:	46c0      	nop			; (mov r8, r8)
   3244c:	00029f1d 	.word	0x00029f1d
   32450:	0001da25 	.word	0x0001da25
   32454:	000180f1 	.word	0x000180f1
   32458:	0001c07d 	.word	0x0001c07d

0003245c <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   3245c:	b580      	push	{r7, lr}
   3245e:	b082      	sub	sp, #8
   32460:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   32462:	4b29      	ldr	r3, [pc, #164]	; (32508 <vApplicationDaemonTaskStartupHook+0xac>)
   32464:	0018      	movs	r0, r3
   32466:	4b29      	ldr	r3, [pc, #164]	; (3250c <vApplicationDaemonTaskStartupHook+0xb0>)
   32468:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   3246a:	4b29      	ldr	r3, [pc, #164]	; (32510 <vApplicationDaemonTaskStartupHook+0xb4>)
   3246c:	0018      	movs	r0, r3
   3246e:	4b27      	ldr	r3, [pc, #156]	; (3250c <vApplicationDaemonTaskStartupHook+0xb0>)
   32470:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   32472:	4b28      	ldr	r3, [pc, #160]	; (32514 <vApplicationDaemonTaskStartupHook+0xb8>)
   32474:	4798      	blx	r3
   32476:	1e03      	subs	r3, r0, #0
   32478:	d004      	beq.n	32484 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   3247a:	4b27      	ldr	r3, [pc, #156]	; (32518 <vApplicationDaemonTaskStartupHook+0xbc>)
   3247c:	0018      	movs	r0, r3
   3247e:	4b23      	ldr	r3, [pc, #140]	; (3250c <vApplicationDaemonTaskStartupHook+0xb0>)
   32480:	4798      	blx	r3
   32482:	e003      	b.n	3248c <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   32484:	4b25      	ldr	r3, [pc, #148]	; (3251c <vApplicationDaemonTaskStartupHook+0xc0>)
   32486:	0018      	movs	r0, r3
   32488:	4b20      	ldr	r3, [pc, #128]	; (3250c <vApplicationDaemonTaskStartupHook+0xb0>)
   3248a:	4798      	blx	r3
    }
	
    if (0 != InitializeSeesaw()) {
   3248c:	4b24      	ldr	r3, [pc, #144]	; (32520 <vApplicationDaemonTaskStartupHook+0xc4>)
   3248e:	4798      	blx	r3
   32490:	1e03      	subs	r3, r0, #0
   32492:	d004      	beq.n	3249e <vApplicationDaemonTaskStartupHook+0x42>
        SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   32494:	4b23      	ldr	r3, [pc, #140]	; (32524 <vApplicationDaemonTaskStartupHook+0xc8>)
   32496:	0018      	movs	r0, r3
   32498:	4b1c      	ldr	r3, [pc, #112]	; (3250c <vApplicationDaemonTaskStartupHook+0xb0>)
   3249a:	4798      	blx	r3
   3249c:	e003      	b.n	324a6 <vApplicationDaemonTaskStartupHook+0x4a>
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
   3249e:	4b22      	ldr	r3, [pc, #136]	; (32528 <vApplicationDaemonTaskStartupHook+0xcc>)
   324a0:	0018      	movs	r0, r3
   324a2:	4b1a      	ldr	r3, [pc, #104]	; (3250c <vApplicationDaemonTaskStartupHook+0xb0>)
   324a4:	4798      	blx	r3
    }

    uint8_t whoamI = 0;
   324a6:	1dfb      	adds	r3, r7, #7
   324a8:	2200      	movs	r2, #0
   324aa:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   324ac:	4b1f      	ldr	r3, [pc, #124]	; (3252c <vApplicationDaemonTaskStartupHook+0xd0>)
   324ae:	4798      	blx	r3
   324b0:	0002      	movs	r2, r0
   324b2:	1dfb      	adds	r3, r7, #7
   324b4:	0019      	movs	r1, r3
   324b6:	0010      	movs	r0, r2
   324b8:	4b1d      	ldr	r3, [pc, #116]	; (32530 <vApplicationDaemonTaskStartupHook+0xd4>)
   324ba:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   324bc:	1dfb      	adds	r3, r7, #7
   324be:	781b      	ldrb	r3, [r3, #0]
   324c0:	2b6c      	cmp	r3, #108	; 0x6c
   324c2:	d004      	beq.n	324ce <vApplicationDaemonTaskStartupHook+0x72>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   324c4:	4b1b      	ldr	r3, [pc, #108]	; (32534 <vApplicationDaemonTaskStartupHook+0xd8>)
   324c6:	0018      	movs	r0, r3
   324c8:	4b10      	ldr	r3, [pc, #64]	; (3250c <vApplicationDaemonTaskStartupHook+0xb0>)
   324ca:	4798      	blx	r3
   324cc:	e010      	b.n	324f0 <vApplicationDaemonTaskStartupHook+0x94>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   324ce:	4b1a      	ldr	r3, [pc, #104]	; (32538 <vApplicationDaemonTaskStartupHook+0xdc>)
   324d0:	0018      	movs	r0, r3
   324d2:	4b0e      	ldr	r3, [pc, #56]	; (3250c <vApplicationDaemonTaskStartupHook+0xb0>)
   324d4:	4798      	blx	r3
        if (InitImu() == 0) {
   324d6:	4b19      	ldr	r3, [pc, #100]	; (3253c <vApplicationDaemonTaskStartupHook+0xe0>)
   324d8:	4798      	blx	r3
   324da:	1e03      	subs	r3, r0, #0
   324dc:	d104      	bne.n	324e8 <vApplicationDaemonTaskStartupHook+0x8c>
            SerialConsoleWriteString("IMU initialized!\r\n");
   324de:	4b18      	ldr	r3, [pc, #96]	; (32540 <vApplicationDaemonTaskStartupHook+0xe4>)
   324e0:	0018      	movs	r0, r3
   324e2:	4b0a      	ldr	r3, [pc, #40]	; (3250c <vApplicationDaemonTaskStartupHook+0xb0>)
   324e4:	4798      	blx	r3
   324e6:	e003      	b.n	324f0 <vApplicationDaemonTaskStartupHook+0x94>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   324e8:	4b16      	ldr	r3, [pc, #88]	; (32544 <vApplicationDaemonTaskStartupHook+0xe8>)
   324ea:	0018      	movs	r0, r3
   324ec:	4b07      	ldr	r3, [pc, #28]	; (3250c <vApplicationDaemonTaskStartupHook+0xb0>)
   324ee:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   324f0:	4b15      	ldr	r3, [pc, #84]	; (32548 <vApplicationDaemonTaskStartupHook+0xec>)
   324f2:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   324f4:	4b15      	ldr	r3, [pc, #84]	; (3254c <vApplicationDaemonTaskStartupHook+0xf0>)
   324f6:	681b      	ldr	r3, [r3, #0]
   324f8:	0018      	movs	r0, r3
   324fa:	4b15      	ldr	r3, [pc, #84]	; (32550 <vApplicationDaemonTaskStartupHook+0xf4>)
   324fc:	4798      	blx	r3
}
   324fe:	46c0      	nop			; (mov r8, r8)
   32500:	46bd      	mov	sp, r7
   32502:	b002      	add	sp, #8
   32504:	bd80      	pop	{r7, pc}
   32506:	46c0      	nop			; (mov r8, r8)
   32508:	00039ac4 	.word	0x00039ac4
   3250c:	0001da95 	.word	0x0001da95
   32510:	00039ae8 	.word	0x00039ae8
   32514:	00013c49 	.word	0x00013c49
   32518:	00039b00 	.word	0x00039b00
   3251c:	00039b24 	.word	0x00039b24
   32520:	00014f49 	.word	0x00014f49
   32524:	00039b40 	.word	0x00039b40
   32528:	00039b60 	.word	0x00039b60
   3252c:	00014e71 	.word	0x00014e71
   32530:	000149c5 	.word	0x000149c5
   32534:	00039b78 	.word	0x00039b78
   32538:	00039b8c 	.word	0x00039b8c
   3253c:	00014e81 	.word	0x00014e81
   32540:	00039b9c 	.word	0x00039b9c
   32544:	00039bb0 	.word	0x00039bb0
   32548:	00032555 	.word	0x00032555
   3254c:	200045bc 	.word	0x200045bc
   32550:	0001bf21 	.word	0x0001bf21

00032554 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   32554:	b590      	push	{r4, r7, lr}
   32556:	b083      	sub	sp, #12
   32558:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   3255a:	4b44      	ldr	r3, [pc, #272]	; (3266c <StartTasks+0x118>)
   3255c:	4798      	blx	r3
   3255e:	0003      	movs	r3, r0
   32560:	4a43      	ldr	r2, [pc, #268]	; (32670 <StartTasks+0x11c>)
   32562:	4844      	ldr	r0, [pc, #272]	; (32674 <StartTasks+0x120>)
   32564:	2140      	movs	r1, #64	; 0x40
   32566:	4c44      	ldr	r4, [pc, #272]	; (32678 <StartTasks+0x124>)
   32568:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3256a:	4b42      	ldr	r3, [pc, #264]	; (32674 <StartTasks+0x120>)
   3256c:	0018      	movs	r0, r3
   3256e:	4b43      	ldr	r3, [pc, #268]	; (3267c <StartTasks+0x128>)
   32570:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   32572:	23c8      	movs	r3, #200	; 0xc8
   32574:	005a      	lsls	r2, r3, #1
   32576:	4942      	ldr	r1, [pc, #264]	; (32680 <StartTasks+0x12c>)
   32578:	4842      	ldr	r0, [pc, #264]	; (32684 <StartTasks+0x130>)
   3257a:	4b43      	ldr	r3, [pc, #268]	; (32688 <StartTasks+0x134>)
   3257c:	9301      	str	r3, [sp, #4]
   3257e:	2304      	movs	r3, #4
   32580:	9300      	str	r3, [sp, #0]
   32582:	2300      	movs	r3, #0
   32584:	4c41      	ldr	r4, [pc, #260]	; (3268c <StartTasks+0x138>)
   32586:	47a0      	blx	r4
   32588:	0003      	movs	r3, r0
   3258a:	2b01      	cmp	r3, #1
   3258c:	d003      	beq.n	32596 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   3258e:	4b40      	ldr	r3, [pc, #256]	; (32690 <StartTasks+0x13c>)
   32590:	0018      	movs	r0, r3
   32592:	4b3a      	ldr	r3, [pc, #232]	; (3267c <StartTasks+0x128>)
   32594:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   32596:	4b35      	ldr	r3, [pc, #212]	; (3266c <StartTasks+0x118>)
   32598:	4798      	blx	r3
   3259a:	0003      	movs	r3, r0
   3259c:	4a3d      	ldr	r2, [pc, #244]	; (32694 <StartTasks+0x140>)
   3259e:	4835      	ldr	r0, [pc, #212]	; (32674 <StartTasks+0x120>)
   325a0:	2140      	movs	r1, #64	; 0x40
   325a2:	4c35      	ldr	r4, [pc, #212]	; (32678 <StartTasks+0x124>)
   325a4:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   325a6:	4b33      	ldr	r3, [pc, #204]	; (32674 <StartTasks+0x120>)
   325a8:	0018      	movs	r0, r3
   325aa:	4b34      	ldr	r3, [pc, #208]	; (3267c <StartTasks+0x128>)
   325ac:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   325ae:	23fa      	movs	r3, #250	; 0xfa
   325b0:	009a      	lsls	r2, r3, #2
   325b2:	4939      	ldr	r1, [pc, #228]	; (32698 <StartTasks+0x144>)
   325b4:	4839      	ldr	r0, [pc, #228]	; (3269c <StartTasks+0x148>)
   325b6:	4b3a      	ldr	r3, [pc, #232]	; (326a0 <StartTasks+0x14c>)
   325b8:	9301      	str	r3, [sp, #4]
   325ba:	2303      	movs	r3, #3
   325bc:	9300      	str	r3, [sp, #0]
   325be:	2300      	movs	r3, #0
   325c0:	4c32      	ldr	r4, [pc, #200]	; (3268c <StartTasks+0x138>)
   325c2:	47a0      	blx	r4
   325c4:	0003      	movs	r3, r0
   325c6:	2b01      	cmp	r3, #1
   325c8:	d003      	beq.n	325d2 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   325ca:	4b36      	ldr	r3, [pc, #216]	; (326a4 <StartTasks+0x150>)
   325cc:	0018      	movs	r0, r3
   325ce:	4b2b      	ldr	r3, [pc, #172]	; (3267c <StartTasks+0x128>)
   325d0:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   325d2:	4b26      	ldr	r3, [pc, #152]	; (3266c <StartTasks+0x118>)
   325d4:	4798      	blx	r3
   325d6:	0003      	movs	r3, r0
   325d8:	4a33      	ldr	r2, [pc, #204]	; (326a8 <StartTasks+0x154>)
   325da:	4826      	ldr	r0, [pc, #152]	; (32674 <StartTasks+0x120>)
   325dc:	2140      	movs	r1, #64	; 0x40
   325de:	4c26      	ldr	r4, [pc, #152]	; (32678 <StartTasks+0x124>)
   325e0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   325e2:	4b24      	ldr	r3, [pc, #144]	; (32674 <StartTasks+0x120>)
   325e4:	0018      	movs	r0, r3
   325e6:	4b25      	ldr	r3, [pc, #148]	; (3267c <StartTasks+0x128>)
   325e8:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   325ea:	23c8      	movs	r3, #200	; 0xc8
   325ec:	005a      	lsls	r2, r3, #1
   325ee:	492f      	ldr	r1, [pc, #188]	; (326ac <StartTasks+0x158>)
   325f0:	482f      	ldr	r0, [pc, #188]	; (326b0 <StartTasks+0x15c>)
   325f2:	4b30      	ldr	r3, [pc, #192]	; (326b4 <StartTasks+0x160>)
   325f4:	9301      	str	r3, [sp, #4]
   325f6:	2304      	movs	r3, #4
   325f8:	9300      	str	r3, [sp, #0]
   325fa:	2300      	movs	r3, #0
   325fc:	4c23      	ldr	r4, [pc, #140]	; (3268c <StartTasks+0x138>)
   325fe:	47a0      	blx	r4
   32600:	0003      	movs	r3, r0
   32602:	2b01      	cmp	r3, #1
   32604:	d003      	beq.n	3260e <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   32606:	4b2c      	ldr	r3, [pc, #176]	; (326b8 <StartTasks+0x164>)
   32608:	0018      	movs	r0, r3
   3260a:	4b1c      	ldr	r3, [pc, #112]	; (3267c <StartTasks+0x128>)
   3260c:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   3260e:	4b17      	ldr	r3, [pc, #92]	; (3266c <StartTasks+0x118>)
   32610:	4798      	blx	r3
   32612:	0003      	movs	r3, r0
   32614:	4a29      	ldr	r2, [pc, #164]	; (326bc <StartTasks+0x168>)
   32616:	4817      	ldr	r0, [pc, #92]	; (32674 <StartTasks+0x120>)
   32618:	2140      	movs	r1, #64	; 0x40
   3261a:	4c17      	ldr	r4, [pc, #92]	; (32678 <StartTasks+0x124>)
   3261c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3261e:	4b15      	ldr	r3, [pc, #84]	; (32674 <StartTasks+0x120>)
   32620:	0018      	movs	r0, r3
   32622:	4b16      	ldr	r3, [pc, #88]	; (3267c <StartTasks+0x128>)
   32624:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   32626:	2380      	movs	r3, #128	; 0x80
   32628:	005a      	lsls	r2, r3, #1
   3262a:	4925      	ldr	r1, [pc, #148]	; (326c0 <StartTasks+0x16c>)
   3262c:	4825      	ldr	r0, [pc, #148]	; (326c4 <StartTasks+0x170>)
   3262e:	4b26      	ldr	r3, [pc, #152]	; (326c8 <StartTasks+0x174>)
   32630:	9301      	str	r3, [sp, #4]
   32632:	2304      	movs	r3, #4
   32634:	9300      	str	r3, [sp, #0]
   32636:	2300      	movs	r3, #0
   32638:	4c14      	ldr	r4, [pc, #80]	; (3268c <StartTasks+0x138>)
   3263a:	47a0      	blx	r4
   3263c:	0003      	movs	r3, r0
   3263e:	2b01      	cmp	r3, #1
   32640:	d003      	beq.n	3264a <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   32642:	4b22      	ldr	r3, [pc, #136]	; (326cc <StartTasks+0x178>)
   32644:	0018      	movs	r0, r3
   32646:	4b0d      	ldr	r3, [pc, #52]	; (3267c <StartTasks+0x128>)
   32648:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   3264a:	4b08      	ldr	r3, [pc, #32]	; (3266c <StartTasks+0x118>)
   3264c:	4798      	blx	r3
   3264e:	0003      	movs	r3, r0
   32650:	4a1f      	ldr	r2, [pc, #124]	; (326d0 <StartTasks+0x17c>)
   32652:	4808      	ldr	r0, [pc, #32]	; (32674 <StartTasks+0x120>)
   32654:	2140      	movs	r1, #64	; 0x40
   32656:	4c08      	ldr	r4, [pc, #32]	; (32678 <StartTasks+0x124>)
   32658:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3265a:	4b06      	ldr	r3, [pc, #24]	; (32674 <StartTasks+0x120>)
   3265c:	0018      	movs	r0, r3
   3265e:	4b07      	ldr	r3, [pc, #28]	; (3267c <StartTasks+0x128>)
   32660:	4798      	blx	r3
}
   32662:	46c0      	nop			; (mov r8, r8)
   32664:	46bd      	mov	sp, r7
   32666:	b001      	add	sp, #4
   32668:	bd90      	pop	{r4, r7, pc}
   3266a:	46c0      	nop			; (mov r8, r8)
   3266c:	0001a061 	.word	0x0001a061
   32670:	00039bcc 	.word	0x00039bcc
   32674:	20005aa8 	.word	0x20005aa8
   32678:	00034939 	.word	0x00034939
   3267c:	0001da95 	.word	0x0001da95
   32680:	00039bf0 	.word	0x00039bf0
   32684:	00012e71 	.word	0x00012e71
   32688:	200045b8 	.word	0x200045b8
   3268c:	0001baa5 	.word	0x0001baa5
   32690:	00039bfc 	.word	0x00039bfc
   32694:	00039c28 	.word	0x00039c28
   32698:	00039c48 	.word	0x00039c48
   3269c:	00016e61 	.word	0x00016e61
   326a0:	200045c0 	.word	0x200045c0
   326a4:	00039c54 	.word	0x00039c54
   326a8:	00039c80 	.word	0x00039c80
   326ac:	00039ca0 	.word	0x00039ca0
   326b0:	000155dd 	.word	0x000155dd
   326b4:	200045c4 	.word	0x200045c4
   326b8:	00039ca8 	.word	0x00039ca8
   326bc:	00039cd4 	.word	0x00039cd4
   326c0:	00039cf8 	.word	0x00039cf8
   326c4:	0001373d 	.word	0x0001373d
   326c8:	200045c8 	.word	0x200045c8
   326cc:	00039d08 	.word	0x00039d08
   326d0:	00039d38 	.word	0x00039d38

000326d4 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   326d4:	b580      	push	{r7, lr}
   326d6:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   326d8:	4b02      	ldr	r3, [pc, #8]	; (326e4 <vApplicationMallocFailedHook+0x10>)
   326da:	0018      	movs	r0, r3
   326dc:	4b02      	ldr	r3, [pc, #8]	; (326e8 <vApplicationMallocFailedHook+0x14>)
   326de:	4798      	blx	r3
    while (1)
   326e0:	e7fe      	b.n	326e0 <vApplicationMallocFailedHook+0xc>
   326e2:	46c0      	nop			; (mov r8, r8)
   326e4:	00039d60 	.word	0x00039d60
   326e8:	0001da95 	.word	0x0001da95

000326ec <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   326ec:	b580      	push	{r7, lr}
   326ee:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   326f0:	4b02      	ldr	r3, [pc, #8]	; (326fc <vApplicationStackOverflowHook+0x10>)
   326f2:	0018      	movs	r0, r3
   326f4:	4b02      	ldr	r3, [pc, #8]	; (32700 <vApplicationStackOverflowHook+0x14>)
   326f6:	4798      	blx	r3
    while (1)
   326f8:	e7fe      	b.n	326f8 <vApplicationStackOverflowHook+0xc>
   326fa:	46c0      	nop			; (mov r8, r8)
   326fc:	00039d8c 	.word	0x00039d8c
   32700:	0001da95 	.word	0x0001da95

00032704 <__udivsi3>:
   32704:	2200      	movs	r2, #0
   32706:	0843      	lsrs	r3, r0, #1
   32708:	428b      	cmp	r3, r1
   3270a:	d374      	bcc.n	327f6 <__udivsi3+0xf2>
   3270c:	0903      	lsrs	r3, r0, #4
   3270e:	428b      	cmp	r3, r1
   32710:	d35f      	bcc.n	327d2 <__udivsi3+0xce>
   32712:	0a03      	lsrs	r3, r0, #8
   32714:	428b      	cmp	r3, r1
   32716:	d344      	bcc.n	327a2 <__udivsi3+0x9e>
   32718:	0b03      	lsrs	r3, r0, #12
   3271a:	428b      	cmp	r3, r1
   3271c:	d328      	bcc.n	32770 <__udivsi3+0x6c>
   3271e:	0c03      	lsrs	r3, r0, #16
   32720:	428b      	cmp	r3, r1
   32722:	d30d      	bcc.n	32740 <__udivsi3+0x3c>
   32724:	22ff      	movs	r2, #255	; 0xff
   32726:	0209      	lsls	r1, r1, #8
   32728:	ba12      	rev	r2, r2
   3272a:	0c03      	lsrs	r3, r0, #16
   3272c:	428b      	cmp	r3, r1
   3272e:	d302      	bcc.n	32736 <__udivsi3+0x32>
   32730:	1212      	asrs	r2, r2, #8
   32732:	0209      	lsls	r1, r1, #8
   32734:	d065      	beq.n	32802 <__udivsi3+0xfe>
   32736:	0b03      	lsrs	r3, r0, #12
   32738:	428b      	cmp	r3, r1
   3273a:	d319      	bcc.n	32770 <__udivsi3+0x6c>
   3273c:	e000      	b.n	32740 <__udivsi3+0x3c>
   3273e:	0a09      	lsrs	r1, r1, #8
   32740:	0bc3      	lsrs	r3, r0, #15
   32742:	428b      	cmp	r3, r1
   32744:	d301      	bcc.n	3274a <__udivsi3+0x46>
   32746:	03cb      	lsls	r3, r1, #15
   32748:	1ac0      	subs	r0, r0, r3
   3274a:	4152      	adcs	r2, r2
   3274c:	0b83      	lsrs	r3, r0, #14
   3274e:	428b      	cmp	r3, r1
   32750:	d301      	bcc.n	32756 <__udivsi3+0x52>
   32752:	038b      	lsls	r3, r1, #14
   32754:	1ac0      	subs	r0, r0, r3
   32756:	4152      	adcs	r2, r2
   32758:	0b43      	lsrs	r3, r0, #13
   3275a:	428b      	cmp	r3, r1
   3275c:	d301      	bcc.n	32762 <__udivsi3+0x5e>
   3275e:	034b      	lsls	r3, r1, #13
   32760:	1ac0      	subs	r0, r0, r3
   32762:	4152      	adcs	r2, r2
   32764:	0b03      	lsrs	r3, r0, #12
   32766:	428b      	cmp	r3, r1
   32768:	d301      	bcc.n	3276e <__udivsi3+0x6a>
   3276a:	030b      	lsls	r3, r1, #12
   3276c:	1ac0      	subs	r0, r0, r3
   3276e:	4152      	adcs	r2, r2
   32770:	0ac3      	lsrs	r3, r0, #11
   32772:	428b      	cmp	r3, r1
   32774:	d301      	bcc.n	3277a <__udivsi3+0x76>
   32776:	02cb      	lsls	r3, r1, #11
   32778:	1ac0      	subs	r0, r0, r3
   3277a:	4152      	adcs	r2, r2
   3277c:	0a83      	lsrs	r3, r0, #10
   3277e:	428b      	cmp	r3, r1
   32780:	d301      	bcc.n	32786 <__udivsi3+0x82>
   32782:	028b      	lsls	r3, r1, #10
   32784:	1ac0      	subs	r0, r0, r3
   32786:	4152      	adcs	r2, r2
   32788:	0a43      	lsrs	r3, r0, #9
   3278a:	428b      	cmp	r3, r1
   3278c:	d301      	bcc.n	32792 <__udivsi3+0x8e>
   3278e:	024b      	lsls	r3, r1, #9
   32790:	1ac0      	subs	r0, r0, r3
   32792:	4152      	adcs	r2, r2
   32794:	0a03      	lsrs	r3, r0, #8
   32796:	428b      	cmp	r3, r1
   32798:	d301      	bcc.n	3279e <__udivsi3+0x9a>
   3279a:	020b      	lsls	r3, r1, #8
   3279c:	1ac0      	subs	r0, r0, r3
   3279e:	4152      	adcs	r2, r2
   327a0:	d2cd      	bcs.n	3273e <__udivsi3+0x3a>
   327a2:	09c3      	lsrs	r3, r0, #7
   327a4:	428b      	cmp	r3, r1
   327a6:	d301      	bcc.n	327ac <__udivsi3+0xa8>
   327a8:	01cb      	lsls	r3, r1, #7
   327aa:	1ac0      	subs	r0, r0, r3
   327ac:	4152      	adcs	r2, r2
   327ae:	0983      	lsrs	r3, r0, #6
   327b0:	428b      	cmp	r3, r1
   327b2:	d301      	bcc.n	327b8 <__udivsi3+0xb4>
   327b4:	018b      	lsls	r3, r1, #6
   327b6:	1ac0      	subs	r0, r0, r3
   327b8:	4152      	adcs	r2, r2
   327ba:	0943      	lsrs	r3, r0, #5
   327bc:	428b      	cmp	r3, r1
   327be:	d301      	bcc.n	327c4 <__udivsi3+0xc0>
   327c0:	014b      	lsls	r3, r1, #5
   327c2:	1ac0      	subs	r0, r0, r3
   327c4:	4152      	adcs	r2, r2
   327c6:	0903      	lsrs	r3, r0, #4
   327c8:	428b      	cmp	r3, r1
   327ca:	d301      	bcc.n	327d0 <__udivsi3+0xcc>
   327cc:	010b      	lsls	r3, r1, #4
   327ce:	1ac0      	subs	r0, r0, r3
   327d0:	4152      	adcs	r2, r2
   327d2:	08c3      	lsrs	r3, r0, #3
   327d4:	428b      	cmp	r3, r1
   327d6:	d301      	bcc.n	327dc <__udivsi3+0xd8>
   327d8:	00cb      	lsls	r3, r1, #3
   327da:	1ac0      	subs	r0, r0, r3
   327dc:	4152      	adcs	r2, r2
   327de:	0883      	lsrs	r3, r0, #2
   327e0:	428b      	cmp	r3, r1
   327e2:	d301      	bcc.n	327e8 <__udivsi3+0xe4>
   327e4:	008b      	lsls	r3, r1, #2
   327e6:	1ac0      	subs	r0, r0, r3
   327e8:	4152      	adcs	r2, r2
   327ea:	0843      	lsrs	r3, r0, #1
   327ec:	428b      	cmp	r3, r1
   327ee:	d301      	bcc.n	327f4 <__udivsi3+0xf0>
   327f0:	004b      	lsls	r3, r1, #1
   327f2:	1ac0      	subs	r0, r0, r3
   327f4:	4152      	adcs	r2, r2
   327f6:	1a41      	subs	r1, r0, r1
   327f8:	d200      	bcs.n	327fc <__udivsi3+0xf8>
   327fa:	4601      	mov	r1, r0
   327fc:	4152      	adcs	r2, r2
   327fe:	4610      	mov	r0, r2
   32800:	4770      	bx	lr
   32802:	e7ff      	b.n	32804 <__udivsi3+0x100>
   32804:	b501      	push	{r0, lr}
   32806:	2000      	movs	r0, #0
   32808:	f000 f8f0 	bl	329ec <__aeabi_idiv0>
   3280c:	bd02      	pop	{r1, pc}
   3280e:	46c0      	nop			; (mov r8, r8)

00032810 <__aeabi_uidivmod>:
   32810:	2900      	cmp	r1, #0
   32812:	d0f7      	beq.n	32804 <__udivsi3+0x100>
   32814:	e776      	b.n	32704 <__udivsi3>
   32816:	4770      	bx	lr

00032818 <__divsi3>:
   32818:	4603      	mov	r3, r0
   3281a:	430b      	orrs	r3, r1
   3281c:	d47f      	bmi.n	3291e <__divsi3+0x106>
   3281e:	2200      	movs	r2, #0
   32820:	0843      	lsrs	r3, r0, #1
   32822:	428b      	cmp	r3, r1
   32824:	d374      	bcc.n	32910 <__divsi3+0xf8>
   32826:	0903      	lsrs	r3, r0, #4
   32828:	428b      	cmp	r3, r1
   3282a:	d35f      	bcc.n	328ec <__divsi3+0xd4>
   3282c:	0a03      	lsrs	r3, r0, #8
   3282e:	428b      	cmp	r3, r1
   32830:	d344      	bcc.n	328bc <__divsi3+0xa4>
   32832:	0b03      	lsrs	r3, r0, #12
   32834:	428b      	cmp	r3, r1
   32836:	d328      	bcc.n	3288a <__divsi3+0x72>
   32838:	0c03      	lsrs	r3, r0, #16
   3283a:	428b      	cmp	r3, r1
   3283c:	d30d      	bcc.n	3285a <__divsi3+0x42>
   3283e:	22ff      	movs	r2, #255	; 0xff
   32840:	0209      	lsls	r1, r1, #8
   32842:	ba12      	rev	r2, r2
   32844:	0c03      	lsrs	r3, r0, #16
   32846:	428b      	cmp	r3, r1
   32848:	d302      	bcc.n	32850 <__divsi3+0x38>
   3284a:	1212      	asrs	r2, r2, #8
   3284c:	0209      	lsls	r1, r1, #8
   3284e:	d065      	beq.n	3291c <__divsi3+0x104>
   32850:	0b03      	lsrs	r3, r0, #12
   32852:	428b      	cmp	r3, r1
   32854:	d319      	bcc.n	3288a <__divsi3+0x72>
   32856:	e000      	b.n	3285a <__divsi3+0x42>
   32858:	0a09      	lsrs	r1, r1, #8
   3285a:	0bc3      	lsrs	r3, r0, #15
   3285c:	428b      	cmp	r3, r1
   3285e:	d301      	bcc.n	32864 <__divsi3+0x4c>
   32860:	03cb      	lsls	r3, r1, #15
   32862:	1ac0      	subs	r0, r0, r3
   32864:	4152      	adcs	r2, r2
   32866:	0b83      	lsrs	r3, r0, #14
   32868:	428b      	cmp	r3, r1
   3286a:	d301      	bcc.n	32870 <__divsi3+0x58>
   3286c:	038b      	lsls	r3, r1, #14
   3286e:	1ac0      	subs	r0, r0, r3
   32870:	4152      	adcs	r2, r2
   32872:	0b43      	lsrs	r3, r0, #13
   32874:	428b      	cmp	r3, r1
   32876:	d301      	bcc.n	3287c <__divsi3+0x64>
   32878:	034b      	lsls	r3, r1, #13
   3287a:	1ac0      	subs	r0, r0, r3
   3287c:	4152      	adcs	r2, r2
   3287e:	0b03      	lsrs	r3, r0, #12
   32880:	428b      	cmp	r3, r1
   32882:	d301      	bcc.n	32888 <__divsi3+0x70>
   32884:	030b      	lsls	r3, r1, #12
   32886:	1ac0      	subs	r0, r0, r3
   32888:	4152      	adcs	r2, r2
   3288a:	0ac3      	lsrs	r3, r0, #11
   3288c:	428b      	cmp	r3, r1
   3288e:	d301      	bcc.n	32894 <__divsi3+0x7c>
   32890:	02cb      	lsls	r3, r1, #11
   32892:	1ac0      	subs	r0, r0, r3
   32894:	4152      	adcs	r2, r2
   32896:	0a83      	lsrs	r3, r0, #10
   32898:	428b      	cmp	r3, r1
   3289a:	d301      	bcc.n	328a0 <__divsi3+0x88>
   3289c:	028b      	lsls	r3, r1, #10
   3289e:	1ac0      	subs	r0, r0, r3
   328a0:	4152      	adcs	r2, r2
   328a2:	0a43      	lsrs	r3, r0, #9
   328a4:	428b      	cmp	r3, r1
   328a6:	d301      	bcc.n	328ac <__divsi3+0x94>
   328a8:	024b      	lsls	r3, r1, #9
   328aa:	1ac0      	subs	r0, r0, r3
   328ac:	4152      	adcs	r2, r2
   328ae:	0a03      	lsrs	r3, r0, #8
   328b0:	428b      	cmp	r3, r1
   328b2:	d301      	bcc.n	328b8 <__divsi3+0xa0>
   328b4:	020b      	lsls	r3, r1, #8
   328b6:	1ac0      	subs	r0, r0, r3
   328b8:	4152      	adcs	r2, r2
   328ba:	d2cd      	bcs.n	32858 <__divsi3+0x40>
   328bc:	09c3      	lsrs	r3, r0, #7
   328be:	428b      	cmp	r3, r1
   328c0:	d301      	bcc.n	328c6 <__divsi3+0xae>
   328c2:	01cb      	lsls	r3, r1, #7
   328c4:	1ac0      	subs	r0, r0, r3
   328c6:	4152      	adcs	r2, r2
   328c8:	0983      	lsrs	r3, r0, #6
   328ca:	428b      	cmp	r3, r1
   328cc:	d301      	bcc.n	328d2 <__divsi3+0xba>
   328ce:	018b      	lsls	r3, r1, #6
   328d0:	1ac0      	subs	r0, r0, r3
   328d2:	4152      	adcs	r2, r2
   328d4:	0943      	lsrs	r3, r0, #5
   328d6:	428b      	cmp	r3, r1
   328d8:	d301      	bcc.n	328de <__divsi3+0xc6>
   328da:	014b      	lsls	r3, r1, #5
   328dc:	1ac0      	subs	r0, r0, r3
   328de:	4152      	adcs	r2, r2
   328e0:	0903      	lsrs	r3, r0, #4
   328e2:	428b      	cmp	r3, r1
   328e4:	d301      	bcc.n	328ea <__divsi3+0xd2>
   328e6:	010b      	lsls	r3, r1, #4
   328e8:	1ac0      	subs	r0, r0, r3
   328ea:	4152      	adcs	r2, r2
   328ec:	08c3      	lsrs	r3, r0, #3
   328ee:	428b      	cmp	r3, r1
   328f0:	d301      	bcc.n	328f6 <__divsi3+0xde>
   328f2:	00cb      	lsls	r3, r1, #3
   328f4:	1ac0      	subs	r0, r0, r3
   328f6:	4152      	adcs	r2, r2
   328f8:	0883      	lsrs	r3, r0, #2
   328fa:	428b      	cmp	r3, r1
   328fc:	d301      	bcc.n	32902 <__divsi3+0xea>
   328fe:	008b      	lsls	r3, r1, #2
   32900:	1ac0      	subs	r0, r0, r3
   32902:	4152      	adcs	r2, r2
   32904:	0843      	lsrs	r3, r0, #1
   32906:	428b      	cmp	r3, r1
   32908:	d301      	bcc.n	3290e <__divsi3+0xf6>
   3290a:	004b      	lsls	r3, r1, #1
   3290c:	1ac0      	subs	r0, r0, r3
   3290e:	4152      	adcs	r2, r2
   32910:	1a41      	subs	r1, r0, r1
   32912:	d200      	bcs.n	32916 <__divsi3+0xfe>
   32914:	4601      	mov	r1, r0
   32916:	4152      	adcs	r2, r2
   32918:	4610      	mov	r0, r2
   3291a:	4770      	bx	lr
   3291c:	e05d      	b.n	329da <__divsi3+0x1c2>
   3291e:	0fca      	lsrs	r2, r1, #31
   32920:	d000      	beq.n	32924 <__divsi3+0x10c>
   32922:	4249      	negs	r1, r1
   32924:	1003      	asrs	r3, r0, #32
   32926:	d300      	bcc.n	3292a <__divsi3+0x112>
   32928:	4240      	negs	r0, r0
   3292a:	4053      	eors	r3, r2
   3292c:	2200      	movs	r2, #0
   3292e:	469c      	mov	ip, r3
   32930:	0903      	lsrs	r3, r0, #4
   32932:	428b      	cmp	r3, r1
   32934:	d32d      	bcc.n	32992 <__divsi3+0x17a>
   32936:	0a03      	lsrs	r3, r0, #8
   32938:	428b      	cmp	r3, r1
   3293a:	d312      	bcc.n	32962 <__divsi3+0x14a>
   3293c:	22fc      	movs	r2, #252	; 0xfc
   3293e:	0189      	lsls	r1, r1, #6
   32940:	ba12      	rev	r2, r2
   32942:	0a03      	lsrs	r3, r0, #8
   32944:	428b      	cmp	r3, r1
   32946:	d30c      	bcc.n	32962 <__divsi3+0x14a>
   32948:	0189      	lsls	r1, r1, #6
   3294a:	1192      	asrs	r2, r2, #6
   3294c:	428b      	cmp	r3, r1
   3294e:	d308      	bcc.n	32962 <__divsi3+0x14a>
   32950:	0189      	lsls	r1, r1, #6
   32952:	1192      	asrs	r2, r2, #6
   32954:	428b      	cmp	r3, r1
   32956:	d304      	bcc.n	32962 <__divsi3+0x14a>
   32958:	0189      	lsls	r1, r1, #6
   3295a:	d03a      	beq.n	329d2 <__divsi3+0x1ba>
   3295c:	1192      	asrs	r2, r2, #6
   3295e:	e000      	b.n	32962 <__divsi3+0x14a>
   32960:	0989      	lsrs	r1, r1, #6
   32962:	09c3      	lsrs	r3, r0, #7
   32964:	428b      	cmp	r3, r1
   32966:	d301      	bcc.n	3296c <__divsi3+0x154>
   32968:	01cb      	lsls	r3, r1, #7
   3296a:	1ac0      	subs	r0, r0, r3
   3296c:	4152      	adcs	r2, r2
   3296e:	0983      	lsrs	r3, r0, #6
   32970:	428b      	cmp	r3, r1
   32972:	d301      	bcc.n	32978 <__divsi3+0x160>
   32974:	018b      	lsls	r3, r1, #6
   32976:	1ac0      	subs	r0, r0, r3
   32978:	4152      	adcs	r2, r2
   3297a:	0943      	lsrs	r3, r0, #5
   3297c:	428b      	cmp	r3, r1
   3297e:	d301      	bcc.n	32984 <__divsi3+0x16c>
   32980:	014b      	lsls	r3, r1, #5
   32982:	1ac0      	subs	r0, r0, r3
   32984:	4152      	adcs	r2, r2
   32986:	0903      	lsrs	r3, r0, #4
   32988:	428b      	cmp	r3, r1
   3298a:	d301      	bcc.n	32990 <__divsi3+0x178>
   3298c:	010b      	lsls	r3, r1, #4
   3298e:	1ac0      	subs	r0, r0, r3
   32990:	4152      	adcs	r2, r2
   32992:	08c3      	lsrs	r3, r0, #3
   32994:	428b      	cmp	r3, r1
   32996:	d301      	bcc.n	3299c <__divsi3+0x184>
   32998:	00cb      	lsls	r3, r1, #3
   3299a:	1ac0      	subs	r0, r0, r3
   3299c:	4152      	adcs	r2, r2
   3299e:	0883      	lsrs	r3, r0, #2
   329a0:	428b      	cmp	r3, r1
   329a2:	d301      	bcc.n	329a8 <__divsi3+0x190>
   329a4:	008b      	lsls	r3, r1, #2
   329a6:	1ac0      	subs	r0, r0, r3
   329a8:	4152      	adcs	r2, r2
   329aa:	d2d9      	bcs.n	32960 <__divsi3+0x148>
   329ac:	0843      	lsrs	r3, r0, #1
   329ae:	428b      	cmp	r3, r1
   329b0:	d301      	bcc.n	329b6 <__divsi3+0x19e>
   329b2:	004b      	lsls	r3, r1, #1
   329b4:	1ac0      	subs	r0, r0, r3
   329b6:	4152      	adcs	r2, r2
   329b8:	1a41      	subs	r1, r0, r1
   329ba:	d200      	bcs.n	329be <__divsi3+0x1a6>
   329bc:	4601      	mov	r1, r0
   329be:	4663      	mov	r3, ip
   329c0:	4152      	adcs	r2, r2
   329c2:	105b      	asrs	r3, r3, #1
   329c4:	4610      	mov	r0, r2
   329c6:	d301      	bcc.n	329cc <__divsi3+0x1b4>
   329c8:	4240      	negs	r0, r0
   329ca:	2b00      	cmp	r3, #0
   329cc:	d500      	bpl.n	329d0 <__divsi3+0x1b8>
   329ce:	4249      	negs	r1, r1
   329d0:	4770      	bx	lr
   329d2:	4663      	mov	r3, ip
   329d4:	105b      	asrs	r3, r3, #1
   329d6:	d300      	bcc.n	329da <__divsi3+0x1c2>
   329d8:	4240      	negs	r0, r0
   329da:	b501      	push	{r0, lr}
   329dc:	2000      	movs	r0, #0
   329de:	f000 f805 	bl	329ec <__aeabi_idiv0>
   329e2:	bd02      	pop	{r1, pc}

000329e4 <__aeabi_idivmod>:
   329e4:	2900      	cmp	r1, #0
   329e6:	d0f8      	beq.n	329da <__divsi3+0x1c2>
   329e8:	e716      	b.n	32818 <__divsi3>
   329ea:	4770      	bx	lr

000329ec <__aeabi_idiv0>:
   329ec:	4770      	bx	lr
   329ee:	46c0      	nop			; (mov r8, r8)

000329f0 <__aeabi_lmul>:
   329f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   329f2:	46ce      	mov	lr, r9
   329f4:	4647      	mov	r7, r8
   329f6:	0415      	lsls	r5, r2, #16
   329f8:	0c2d      	lsrs	r5, r5, #16
   329fa:	002e      	movs	r6, r5
   329fc:	b580      	push	{r7, lr}
   329fe:	0407      	lsls	r7, r0, #16
   32a00:	0c14      	lsrs	r4, r2, #16
   32a02:	0c3f      	lsrs	r7, r7, #16
   32a04:	4699      	mov	r9, r3
   32a06:	0c03      	lsrs	r3, r0, #16
   32a08:	437e      	muls	r6, r7
   32a0a:	435d      	muls	r5, r3
   32a0c:	4367      	muls	r7, r4
   32a0e:	4363      	muls	r3, r4
   32a10:	197f      	adds	r7, r7, r5
   32a12:	0c34      	lsrs	r4, r6, #16
   32a14:	19e4      	adds	r4, r4, r7
   32a16:	469c      	mov	ip, r3
   32a18:	42a5      	cmp	r5, r4
   32a1a:	d903      	bls.n	32a24 <__aeabi_lmul+0x34>
   32a1c:	2380      	movs	r3, #128	; 0x80
   32a1e:	025b      	lsls	r3, r3, #9
   32a20:	4698      	mov	r8, r3
   32a22:	44c4      	add	ip, r8
   32a24:	464b      	mov	r3, r9
   32a26:	4351      	muls	r1, r2
   32a28:	4343      	muls	r3, r0
   32a2a:	0436      	lsls	r6, r6, #16
   32a2c:	0c36      	lsrs	r6, r6, #16
   32a2e:	0c25      	lsrs	r5, r4, #16
   32a30:	0424      	lsls	r4, r4, #16
   32a32:	4465      	add	r5, ip
   32a34:	19a4      	adds	r4, r4, r6
   32a36:	1859      	adds	r1, r3, r1
   32a38:	1949      	adds	r1, r1, r5
   32a3a:	0020      	movs	r0, r4
   32a3c:	bc0c      	pop	{r2, r3}
   32a3e:	4690      	mov	r8, r2
   32a40:	4699      	mov	r9, r3
   32a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032a44 <__aeabi_fmul>:
   32a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32a46:	4657      	mov	r7, sl
   32a48:	464e      	mov	r6, r9
   32a4a:	4645      	mov	r5, r8
   32a4c:	46de      	mov	lr, fp
   32a4e:	b5e0      	push	{r5, r6, r7, lr}
   32a50:	0247      	lsls	r7, r0, #9
   32a52:	0046      	lsls	r6, r0, #1
   32a54:	4688      	mov	r8, r1
   32a56:	0a7f      	lsrs	r7, r7, #9
   32a58:	0e36      	lsrs	r6, r6, #24
   32a5a:	0fc4      	lsrs	r4, r0, #31
   32a5c:	2e00      	cmp	r6, #0
   32a5e:	d047      	beq.n	32af0 <__aeabi_fmul+0xac>
   32a60:	2eff      	cmp	r6, #255	; 0xff
   32a62:	d024      	beq.n	32aae <__aeabi_fmul+0x6a>
   32a64:	00fb      	lsls	r3, r7, #3
   32a66:	2780      	movs	r7, #128	; 0x80
   32a68:	04ff      	lsls	r7, r7, #19
   32a6a:	431f      	orrs	r7, r3
   32a6c:	2300      	movs	r3, #0
   32a6e:	4699      	mov	r9, r3
   32a70:	469a      	mov	sl, r3
   32a72:	3e7f      	subs	r6, #127	; 0x7f
   32a74:	4643      	mov	r3, r8
   32a76:	025d      	lsls	r5, r3, #9
   32a78:	0058      	lsls	r0, r3, #1
   32a7a:	0fdb      	lsrs	r3, r3, #31
   32a7c:	0a6d      	lsrs	r5, r5, #9
   32a7e:	0e00      	lsrs	r0, r0, #24
   32a80:	4698      	mov	r8, r3
   32a82:	d043      	beq.n	32b0c <__aeabi_fmul+0xc8>
   32a84:	28ff      	cmp	r0, #255	; 0xff
   32a86:	d03b      	beq.n	32b00 <__aeabi_fmul+0xbc>
   32a88:	00eb      	lsls	r3, r5, #3
   32a8a:	2580      	movs	r5, #128	; 0x80
   32a8c:	2200      	movs	r2, #0
   32a8e:	04ed      	lsls	r5, r5, #19
   32a90:	431d      	orrs	r5, r3
   32a92:	387f      	subs	r0, #127	; 0x7f
   32a94:	1836      	adds	r6, r6, r0
   32a96:	1c73      	adds	r3, r6, #1
   32a98:	4641      	mov	r1, r8
   32a9a:	469b      	mov	fp, r3
   32a9c:	464b      	mov	r3, r9
   32a9e:	4061      	eors	r1, r4
   32aa0:	4313      	orrs	r3, r2
   32aa2:	2b0f      	cmp	r3, #15
   32aa4:	d864      	bhi.n	32b70 <__aeabi_fmul+0x12c>
   32aa6:	4875      	ldr	r0, [pc, #468]	; (32c7c <__aeabi_fmul+0x238>)
   32aa8:	009b      	lsls	r3, r3, #2
   32aaa:	58c3      	ldr	r3, [r0, r3]
   32aac:	469f      	mov	pc, r3
   32aae:	2f00      	cmp	r7, #0
   32ab0:	d142      	bne.n	32b38 <__aeabi_fmul+0xf4>
   32ab2:	2308      	movs	r3, #8
   32ab4:	4699      	mov	r9, r3
   32ab6:	3b06      	subs	r3, #6
   32ab8:	26ff      	movs	r6, #255	; 0xff
   32aba:	469a      	mov	sl, r3
   32abc:	e7da      	b.n	32a74 <__aeabi_fmul+0x30>
   32abe:	4641      	mov	r1, r8
   32ac0:	2a02      	cmp	r2, #2
   32ac2:	d028      	beq.n	32b16 <__aeabi_fmul+0xd2>
   32ac4:	2a03      	cmp	r2, #3
   32ac6:	d100      	bne.n	32aca <__aeabi_fmul+0x86>
   32ac8:	e0ce      	b.n	32c68 <__aeabi_fmul+0x224>
   32aca:	2a01      	cmp	r2, #1
   32acc:	d000      	beq.n	32ad0 <__aeabi_fmul+0x8c>
   32ace:	e0ac      	b.n	32c2a <__aeabi_fmul+0x1e6>
   32ad0:	4011      	ands	r1, r2
   32ad2:	2000      	movs	r0, #0
   32ad4:	2200      	movs	r2, #0
   32ad6:	b2cc      	uxtb	r4, r1
   32ad8:	0240      	lsls	r0, r0, #9
   32ada:	05d2      	lsls	r2, r2, #23
   32adc:	0a40      	lsrs	r0, r0, #9
   32ade:	07e4      	lsls	r4, r4, #31
   32ae0:	4310      	orrs	r0, r2
   32ae2:	4320      	orrs	r0, r4
   32ae4:	bc3c      	pop	{r2, r3, r4, r5}
   32ae6:	4690      	mov	r8, r2
   32ae8:	4699      	mov	r9, r3
   32aea:	46a2      	mov	sl, r4
   32aec:	46ab      	mov	fp, r5
   32aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32af0:	2f00      	cmp	r7, #0
   32af2:	d115      	bne.n	32b20 <__aeabi_fmul+0xdc>
   32af4:	2304      	movs	r3, #4
   32af6:	4699      	mov	r9, r3
   32af8:	3b03      	subs	r3, #3
   32afa:	2600      	movs	r6, #0
   32afc:	469a      	mov	sl, r3
   32afe:	e7b9      	b.n	32a74 <__aeabi_fmul+0x30>
   32b00:	20ff      	movs	r0, #255	; 0xff
   32b02:	2202      	movs	r2, #2
   32b04:	2d00      	cmp	r5, #0
   32b06:	d0c5      	beq.n	32a94 <__aeabi_fmul+0x50>
   32b08:	2203      	movs	r2, #3
   32b0a:	e7c3      	b.n	32a94 <__aeabi_fmul+0x50>
   32b0c:	2d00      	cmp	r5, #0
   32b0e:	d119      	bne.n	32b44 <__aeabi_fmul+0x100>
   32b10:	2000      	movs	r0, #0
   32b12:	2201      	movs	r2, #1
   32b14:	e7be      	b.n	32a94 <__aeabi_fmul+0x50>
   32b16:	2401      	movs	r4, #1
   32b18:	22ff      	movs	r2, #255	; 0xff
   32b1a:	400c      	ands	r4, r1
   32b1c:	2000      	movs	r0, #0
   32b1e:	e7db      	b.n	32ad8 <__aeabi_fmul+0x94>
   32b20:	0038      	movs	r0, r7
   32b22:	f001 fd65 	bl	345f0 <__clzsi2>
   32b26:	2676      	movs	r6, #118	; 0x76
   32b28:	1f43      	subs	r3, r0, #5
   32b2a:	409f      	lsls	r7, r3
   32b2c:	2300      	movs	r3, #0
   32b2e:	4276      	negs	r6, r6
   32b30:	1a36      	subs	r6, r6, r0
   32b32:	4699      	mov	r9, r3
   32b34:	469a      	mov	sl, r3
   32b36:	e79d      	b.n	32a74 <__aeabi_fmul+0x30>
   32b38:	230c      	movs	r3, #12
   32b3a:	4699      	mov	r9, r3
   32b3c:	3b09      	subs	r3, #9
   32b3e:	26ff      	movs	r6, #255	; 0xff
   32b40:	469a      	mov	sl, r3
   32b42:	e797      	b.n	32a74 <__aeabi_fmul+0x30>
   32b44:	0028      	movs	r0, r5
   32b46:	f001 fd53 	bl	345f0 <__clzsi2>
   32b4a:	1f43      	subs	r3, r0, #5
   32b4c:	409d      	lsls	r5, r3
   32b4e:	2376      	movs	r3, #118	; 0x76
   32b50:	425b      	negs	r3, r3
   32b52:	1a18      	subs	r0, r3, r0
   32b54:	2200      	movs	r2, #0
   32b56:	e79d      	b.n	32a94 <__aeabi_fmul+0x50>
   32b58:	2080      	movs	r0, #128	; 0x80
   32b5a:	2400      	movs	r4, #0
   32b5c:	03c0      	lsls	r0, r0, #15
   32b5e:	22ff      	movs	r2, #255	; 0xff
   32b60:	e7ba      	b.n	32ad8 <__aeabi_fmul+0x94>
   32b62:	003d      	movs	r5, r7
   32b64:	4652      	mov	r2, sl
   32b66:	e7ab      	b.n	32ac0 <__aeabi_fmul+0x7c>
   32b68:	003d      	movs	r5, r7
   32b6a:	0021      	movs	r1, r4
   32b6c:	4652      	mov	r2, sl
   32b6e:	e7a7      	b.n	32ac0 <__aeabi_fmul+0x7c>
   32b70:	0c3b      	lsrs	r3, r7, #16
   32b72:	469c      	mov	ip, r3
   32b74:	042a      	lsls	r2, r5, #16
   32b76:	0c12      	lsrs	r2, r2, #16
   32b78:	0c2b      	lsrs	r3, r5, #16
   32b7a:	0014      	movs	r4, r2
   32b7c:	4660      	mov	r0, ip
   32b7e:	4665      	mov	r5, ip
   32b80:	043f      	lsls	r7, r7, #16
   32b82:	0c3f      	lsrs	r7, r7, #16
   32b84:	437c      	muls	r4, r7
   32b86:	4342      	muls	r2, r0
   32b88:	435d      	muls	r5, r3
   32b8a:	437b      	muls	r3, r7
   32b8c:	0c27      	lsrs	r7, r4, #16
   32b8e:	189b      	adds	r3, r3, r2
   32b90:	18ff      	adds	r7, r7, r3
   32b92:	42ba      	cmp	r2, r7
   32b94:	d903      	bls.n	32b9e <__aeabi_fmul+0x15a>
   32b96:	2380      	movs	r3, #128	; 0x80
   32b98:	025b      	lsls	r3, r3, #9
   32b9a:	469c      	mov	ip, r3
   32b9c:	4465      	add	r5, ip
   32b9e:	0424      	lsls	r4, r4, #16
   32ba0:	043a      	lsls	r2, r7, #16
   32ba2:	0c24      	lsrs	r4, r4, #16
   32ba4:	1912      	adds	r2, r2, r4
   32ba6:	0193      	lsls	r3, r2, #6
   32ba8:	1e5c      	subs	r4, r3, #1
   32baa:	41a3      	sbcs	r3, r4
   32bac:	0c3f      	lsrs	r7, r7, #16
   32bae:	0e92      	lsrs	r2, r2, #26
   32bb0:	197d      	adds	r5, r7, r5
   32bb2:	431a      	orrs	r2, r3
   32bb4:	01ad      	lsls	r5, r5, #6
   32bb6:	4315      	orrs	r5, r2
   32bb8:	012b      	lsls	r3, r5, #4
   32bba:	d504      	bpl.n	32bc6 <__aeabi_fmul+0x182>
   32bbc:	2301      	movs	r3, #1
   32bbe:	465e      	mov	r6, fp
   32bc0:	086a      	lsrs	r2, r5, #1
   32bc2:	401d      	ands	r5, r3
   32bc4:	4315      	orrs	r5, r2
   32bc6:	0032      	movs	r2, r6
   32bc8:	327f      	adds	r2, #127	; 0x7f
   32bca:	2a00      	cmp	r2, #0
   32bcc:	dd25      	ble.n	32c1a <__aeabi_fmul+0x1d6>
   32bce:	076b      	lsls	r3, r5, #29
   32bd0:	d004      	beq.n	32bdc <__aeabi_fmul+0x198>
   32bd2:	230f      	movs	r3, #15
   32bd4:	402b      	ands	r3, r5
   32bd6:	2b04      	cmp	r3, #4
   32bd8:	d000      	beq.n	32bdc <__aeabi_fmul+0x198>
   32bda:	3504      	adds	r5, #4
   32bdc:	012b      	lsls	r3, r5, #4
   32bde:	d503      	bpl.n	32be8 <__aeabi_fmul+0x1a4>
   32be0:	0032      	movs	r2, r6
   32be2:	4b27      	ldr	r3, [pc, #156]	; (32c80 <__aeabi_fmul+0x23c>)
   32be4:	3280      	adds	r2, #128	; 0x80
   32be6:	401d      	ands	r5, r3
   32be8:	2afe      	cmp	r2, #254	; 0xfe
   32bea:	dc94      	bgt.n	32b16 <__aeabi_fmul+0xd2>
   32bec:	2401      	movs	r4, #1
   32bee:	01a8      	lsls	r0, r5, #6
   32bf0:	0a40      	lsrs	r0, r0, #9
   32bf2:	b2d2      	uxtb	r2, r2
   32bf4:	400c      	ands	r4, r1
   32bf6:	e76f      	b.n	32ad8 <__aeabi_fmul+0x94>
   32bf8:	2080      	movs	r0, #128	; 0x80
   32bfa:	03c0      	lsls	r0, r0, #15
   32bfc:	4207      	tst	r7, r0
   32bfe:	d007      	beq.n	32c10 <__aeabi_fmul+0x1cc>
   32c00:	4205      	tst	r5, r0
   32c02:	d105      	bne.n	32c10 <__aeabi_fmul+0x1cc>
   32c04:	4328      	orrs	r0, r5
   32c06:	0240      	lsls	r0, r0, #9
   32c08:	0a40      	lsrs	r0, r0, #9
   32c0a:	4644      	mov	r4, r8
   32c0c:	22ff      	movs	r2, #255	; 0xff
   32c0e:	e763      	b.n	32ad8 <__aeabi_fmul+0x94>
   32c10:	4338      	orrs	r0, r7
   32c12:	0240      	lsls	r0, r0, #9
   32c14:	0a40      	lsrs	r0, r0, #9
   32c16:	22ff      	movs	r2, #255	; 0xff
   32c18:	e75e      	b.n	32ad8 <__aeabi_fmul+0x94>
   32c1a:	2401      	movs	r4, #1
   32c1c:	1aa3      	subs	r3, r4, r2
   32c1e:	2b1b      	cmp	r3, #27
   32c20:	dd05      	ble.n	32c2e <__aeabi_fmul+0x1ea>
   32c22:	400c      	ands	r4, r1
   32c24:	2200      	movs	r2, #0
   32c26:	2000      	movs	r0, #0
   32c28:	e756      	b.n	32ad8 <__aeabi_fmul+0x94>
   32c2a:	465e      	mov	r6, fp
   32c2c:	e7cb      	b.n	32bc6 <__aeabi_fmul+0x182>
   32c2e:	002a      	movs	r2, r5
   32c30:	2020      	movs	r0, #32
   32c32:	40da      	lsrs	r2, r3
   32c34:	1ac3      	subs	r3, r0, r3
   32c36:	409d      	lsls	r5, r3
   32c38:	002b      	movs	r3, r5
   32c3a:	1e5d      	subs	r5, r3, #1
   32c3c:	41ab      	sbcs	r3, r5
   32c3e:	4313      	orrs	r3, r2
   32c40:	075a      	lsls	r2, r3, #29
   32c42:	d004      	beq.n	32c4e <__aeabi_fmul+0x20a>
   32c44:	220f      	movs	r2, #15
   32c46:	401a      	ands	r2, r3
   32c48:	2a04      	cmp	r2, #4
   32c4a:	d000      	beq.n	32c4e <__aeabi_fmul+0x20a>
   32c4c:	3304      	adds	r3, #4
   32c4e:	015a      	lsls	r2, r3, #5
   32c50:	d504      	bpl.n	32c5c <__aeabi_fmul+0x218>
   32c52:	2401      	movs	r4, #1
   32c54:	2201      	movs	r2, #1
   32c56:	400c      	ands	r4, r1
   32c58:	2000      	movs	r0, #0
   32c5a:	e73d      	b.n	32ad8 <__aeabi_fmul+0x94>
   32c5c:	2401      	movs	r4, #1
   32c5e:	019b      	lsls	r3, r3, #6
   32c60:	0a58      	lsrs	r0, r3, #9
   32c62:	400c      	ands	r4, r1
   32c64:	2200      	movs	r2, #0
   32c66:	e737      	b.n	32ad8 <__aeabi_fmul+0x94>
   32c68:	2080      	movs	r0, #128	; 0x80
   32c6a:	2401      	movs	r4, #1
   32c6c:	03c0      	lsls	r0, r0, #15
   32c6e:	4328      	orrs	r0, r5
   32c70:	0240      	lsls	r0, r0, #9
   32c72:	0a40      	lsrs	r0, r0, #9
   32c74:	400c      	ands	r4, r1
   32c76:	22ff      	movs	r2, #255	; 0xff
   32c78:	e72e      	b.n	32ad8 <__aeabi_fmul+0x94>
   32c7a:	46c0      	nop			; (mov r8, r8)
   32c7c:	00039db4 	.word	0x00039db4
   32c80:	f7ffffff 	.word	0xf7ffffff

00032c84 <__aeabi_f2iz>:
   32c84:	0241      	lsls	r1, r0, #9
   32c86:	0043      	lsls	r3, r0, #1
   32c88:	0fc2      	lsrs	r2, r0, #31
   32c8a:	0a49      	lsrs	r1, r1, #9
   32c8c:	0e1b      	lsrs	r3, r3, #24
   32c8e:	2000      	movs	r0, #0
   32c90:	2b7e      	cmp	r3, #126	; 0x7e
   32c92:	dd0d      	ble.n	32cb0 <__aeabi_f2iz+0x2c>
   32c94:	2b9d      	cmp	r3, #157	; 0x9d
   32c96:	dc0c      	bgt.n	32cb2 <__aeabi_f2iz+0x2e>
   32c98:	2080      	movs	r0, #128	; 0x80
   32c9a:	0400      	lsls	r0, r0, #16
   32c9c:	4301      	orrs	r1, r0
   32c9e:	2b95      	cmp	r3, #149	; 0x95
   32ca0:	dc0a      	bgt.n	32cb8 <__aeabi_f2iz+0x34>
   32ca2:	2096      	movs	r0, #150	; 0x96
   32ca4:	1ac3      	subs	r3, r0, r3
   32ca6:	40d9      	lsrs	r1, r3
   32ca8:	4248      	negs	r0, r1
   32caa:	2a00      	cmp	r2, #0
   32cac:	d100      	bne.n	32cb0 <__aeabi_f2iz+0x2c>
   32cae:	0008      	movs	r0, r1
   32cb0:	4770      	bx	lr
   32cb2:	4b03      	ldr	r3, [pc, #12]	; (32cc0 <__aeabi_f2iz+0x3c>)
   32cb4:	18d0      	adds	r0, r2, r3
   32cb6:	e7fb      	b.n	32cb0 <__aeabi_f2iz+0x2c>
   32cb8:	3b96      	subs	r3, #150	; 0x96
   32cba:	4099      	lsls	r1, r3
   32cbc:	e7f4      	b.n	32ca8 <__aeabi_f2iz+0x24>
   32cbe:	46c0      	nop			; (mov r8, r8)
   32cc0:	7fffffff 	.word	0x7fffffff

00032cc4 <__aeabi_i2f>:
   32cc4:	b570      	push	{r4, r5, r6, lr}
   32cc6:	2800      	cmp	r0, #0
   32cc8:	d030      	beq.n	32d2c <__aeabi_i2f+0x68>
   32cca:	17c3      	asrs	r3, r0, #31
   32ccc:	18c4      	adds	r4, r0, r3
   32cce:	405c      	eors	r4, r3
   32cd0:	0fc5      	lsrs	r5, r0, #31
   32cd2:	0020      	movs	r0, r4
   32cd4:	f001 fc8c 	bl	345f0 <__clzsi2>
   32cd8:	239e      	movs	r3, #158	; 0x9e
   32cda:	1a1b      	subs	r3, r3, r0
   32cdc:	2b96      	cmp	r3, #150	; 0x96
   32cde:	dc0d      	bgt.n	32cfc <__aeabi_i2f+0x38>
   32ce0:	2296      	movs	r2, #150	; 0x96
   32ce2:	1ad2      	subs	r2, r2, r3
   32ce4:	4094      	lsls	r4, r2
   32ce6:	002a      	movs	r2, r5
   32ce8:	0264      	lsls	r4, r4, #9
   32cea:	0a64      	lsrs	r4, r4, #9
   32cec:	b2db      	uxtb	r3, r3
   32cee:	0264      	lsls	r4, r4, #9
   32cf0:	05db      	lsls	r3, r3, #23
   32cf2:	0a60      	lsrs	r0, r4, #9
   32cf4:	07d2      	lsls	r2, r2, #31
   32cf6:	4318      	orrs	r0, r3
   32cf8:	4310      	orrs	r0, r2
   32cfa:	bd70      	pop	{r4, r5, r6, pc}
   32cfc:	2b99      	cmp	r3, #153	; 0x99
   32cfe:	dc19      	bgt.n	32d34 <__aeabi_i2f+0x70>
   32d00:	2299      	movs	r2, #153	; 0x99
   32d02:	1ad2      	subs	r2, r2, r3
   32d04:	2a00      	cmp	r2, #0
   32d06:	dd29      	ble.n	32d5c <__aeabi_i2f+0x98>
   32d08:	4094      	lsls	r4, r2
   32d0a:	0022      	movs	r2, r4
   32d0c:	4c14      	ldr	r4, [pc, #80]	; (32d60 <__aeabi_i2f+0x9c>)
   32d0e:	4014      	ands	r4, r2
   32d10:	0751      	lsls	r1, r2, #29
   32d12:	d004      	beq.n	32d1e <__aeabi_i2f+0x5a>
   32d14:	210f      	movs	r1, #15
   32d16:	400a      	ands	r2, r1
   32d18:	2a04      	cmp	r2, #4
   32d1a:	d000      	beq.n	32d1e <__aeabi_i2f+0x5a>
   32d1c:	3404      	adds	r4, #4
   32d1e:	0162      	lsls	r2, r4, #5
   32d20:	d413      	bmi.n	32d4a <__aeabi_i2f+0x86>
   32d22:	01a4      	lsls	r4, r4, #6
   32d24:	0a64      	lsrs	r4, r4, #9
   32d26:	b2db      	uxtb	r3, r3
   32d28:	002a      	movs	r2, r5
   32d2a:	e7e0      	b.n	32cee <__aeabi_i2f+0x2a>
   32d2c:	2200      	movs	r2, #0
   32d2e:	2300      	movs	r3, #0
   32d30:	2400      	movs	r4, #0
   32d32:	e7dc      	b.n	32cee <__aeabi_i2f+0x2a>
   32d34:	2205      	movs	r2, #5
   32d36:	0021      	movs	r1, r4
   32d38:	1a12      	subs	r2, r2, r0
   32d3a:	40d1      	lsrs	r1, r2
   32d3c:	22b9      	movs	r2, #185	; 0xb9
   32d3e:	1ad2      	subs	r2, r2, r3
   32d40:	4094      	lsls	r4, r2
   32d42:	1e62      	subs	r2, r4, #1
   32d44:	4194      	sbcs	r4, r2
   32d46:	430c      	orrs	r4, r1
   32d48:	e7da      	b.n	32d00 <__aeabi_i2f+0x3c>
   32d4a:	4b05      	ldr	r3, [pc, #20]	; (32d60 <__aeabi_i2f+0x9c>)
   32d4c:	002a      	movs	r2, r5
   32d4e:	401c      	ands	r4, r3
   32d50:	239f      	movs	r3, #159	; 0x9f
   32d52:	01a4      	lsls	r4, r4, #6
   32d54:	1a1b      	subs	r3, r3, r0
   32d56:	0a64      	lsrs	r4, r4, #9
   32d58:	b2db      	uxtb	r3, r3
   32d5a:	e7c8      	b.n	32cee <__aeabi_i2f+0x2a>
   32d5c:	0022      	movs	r2, r4
   32d5e:	e7d5      	b.n	32d0c <__aeabi_i2f+0x48>
   32d60:	fbffffff 	.word	0xfbffffff

00032d64 <__aeabi_dadd>:
   32d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32d66:	4645      	mov	r5, r8
   32d68:	46de      	mov	lr, fp
   32d6a:	4657      	mov	r7, sl
   32d6c:	464e      	mov	r6, r9
   32d6e:	030c      	lsls	r4, r1, #12
   32d70:	b5e0      	push	{r5, r6, r7, lr}
   32d72:	004e      	lsls	r6, r1, #1
   32d74:	0fc9      	lsrs	r1, r1, #31
   32d76:	4688      	mov	r8, r1
   32d78:	000d      	movs	r5, r1
   32d7a:	0a61      	lsrs	r1, r4, #9
   32d7c:	0f44      	lsrs	r4, r0, #29
   32d7e:	430c      	orrs	r4, r1
   32d80:	00c7      	lsls	r7, r0, #3
   32d82:	0319      	lsls	r1, r3, #12
   32d84:	0058      	lsls	r0, r3, #1
   32d86:	0fdb      	lsrs	r3, r3, #31
   32d88:	469b      	mov	fp, r3
   32d8a:	0a4b      	lsrs	r3, r1, #9
   32d8c:	0f51      	lsrs	r1, r2, #29
   32d8e:	430b      	orrs	r3, r1
   32d90:	0d76      	lsrs	r6, r6, #21
   32d92:	0d40      	lsrs	r0, r0, #21
   32d94:	0019      	movs	r1, r3
   32d96:	00d2      	lsls	r2, r2, #3
   32d98:	45d8      	cmp	r8, fp
   32d9a:	d100      	bne.n	32d9e <__aeabi_dadd+0x3a>
   32d9c:	e0ae      	b.n	32efc <__aeabi_dadd+0x198>
   32d9e:	1a35      	subs	r5, r6, r0
   32da0:	2d00      	cmp	r5, #0
   32da2:	dc00      	bgt.n	32da6 <__aeabi_dadd+0x42>
   32da4:	e0f6      	b.n	32f94 <__aeabi_dadd+0x230>
   32da6:	2800      	cmp	r0, #0
   32da8:	d10f      	bne.n	32dca <__aeabi_dadd+0x66>
   32daa:	4313      	orrs	r3, r2
   32dac:	d100      	bne.n	32db0 <__aeabi_dadd+0x4c>
   32dae:	e0db      	b.n	32f68 <__aeabi_dadd+0x204>
   32db0:	1e6b      	subs	r3, r5, #1
   32db2:	2b00      	cmp	r3, #0
   32db4:	d000      	beq.n	32db8 <__aeabi_dadd+0x54>
   32db6:	e137      	b.n	33028 <__aeabi_dadd+0x2c4>
   32db8:	1aba      	subs	r2, r7, r2
   32dba:	4297      	cmp	r7, r2
   32dbc:	41bf      	sbcs	r7, r7
   32dbe:	1a64      	subs	r4, r4, r1
   32dc0:	427f      	negs	r7, r7
   32dc2:	1be4      	subs	r4, r4, r7
   32dc4:	2601      	movs	r6, #1
   32dc6:	0017      	movs	r7, r2
   32dc8:	e024      	b.n	32e14 <__aeabi_dadd+0xb0>
   32dca:	4bc6      	ldr	r3, [pc, #792]	; (330e4 <__aeabi_dadd+0x380>)
   32dcc:	429e      	cmp	r6, r3
   32dce:	d04d      	beq.n	32e6c <__aeabi_dadd+0x108>
   32dd0:	2380      	movs	r3, #128	; 0x80
   32dd2:	041b      	lsls	r3, r3, #16
   32dd4:	4319      	orrs	r1, r3
   32dd6:	2d38      	cmp	r5, #56	; 0x38
   32dd8:	dd00      	ble.n	32ddc <__aeabi_dadd+0x78>
   32dda:	e107      	b.n	32fec <__aeabi_dadd+0x288>
   32ddc:	2d1f      	cmp	r5, #31
   32dde:	dd00      	ble.n	32de2 <__aeabi_dadd+0x7e>
   32de0:	e138      	b.n	33054 <__aeabi_dadd+0x2f0>
   32de2:	2020      	movs	r0, #32
   32de4:	1b43      	subs	r3, r0, r5
   32de6:	469a      	mov	sl, r3
   32de8:	000b      	movs	r3, r1
   32dea:	4650      	mov	r0, sl
   32dec:	4083      	lsls	r3, r0
   32dee:	4699      	mov	r9, r3
   32df0:	0013      	movs	r3, r2
   32df2:	4648      	mov	r0, r9
   32df4:	40eb      	lsrs	r3, r5
   32df6:	4318      	orrs	r0, r3
   32df8:	0003      	movs	r3, r0
   32dfa:	4650      	mov	r0, sl
   32dfc:	4082      	lsls	r2, r0
   32dfe:	1e50      	subs	r0, r2, #1
   32e00:	4182      	sbcs	r2, r0
   32e02:	40e9      	lsrs	r1, r5
   32e04:	431a      	orrs	r2, r3
   32e06:	1aba      	subs	r2, r7, r2
   32e08:	1a61      	subs	r1, r4, r1
   32e0a:	4297      	cmp	r7, r2
   32e0c:	41a4      	sbcs	r4, r4
   32e0e:	0017      	movs	r7, r2
   32e10:	4264      	negs	r4, r4
   32e12:	1b0c      	subs	r4, r1, r4
   32e14:	0223      	lsls	r3, r4, #8
   32e16:	d562      	bpl.n	32ede <__aeabi_dadd+0x17a>
   32e18:	0264      	lsls	r4, r4, #9
   32e1a:	0a65      	lsrs	r5, r4, #9
   32e1c:	2d00      	cmp	r5, #0
   32e1e:	d100      	bne.n	32e22 <__aeabi_dadd+0xbe>
   32e20:	e0df      	b.n	32fe2 <__aeabi_dadd+0x27e>
   32e22:	0028      	movs	r0, r5
   32e24:	f001 fbe4 	bl	345f0 <__clzsi2>
   32e28:	0003      	movs	r3, r0
   32e2a:	3b08      	subs	r3, #8
   32e2c:	2b1f      	cmp	r3, #31
   32e2e:	dd00      	ble.n	32e32 <__aeabi_dadd+0xce>
   32e30:	e0d2      	b.n	32fd8 <__aeabi_dadd+0x274>
   32e32:	2220      	movs	r2, #32
   32e34:	003c      	movs	r4, r7
   32e36:	1ad2      	subs	r2, r2, r3
   32e38:	409d      	lsls	r5, r3
   32e3a:	40d4      	lsrs	r4, r2
   32e3c:	409f      	lsls	r7, r3
   32e3e:	4325      	orrs	r5, r4
   32e40:	429e      	cmp	r6, r3
   32e42:	dd00      	ble.n	32e46 <__aeabi_dadd+0xe2>
   32e44:	e0c4      	b.n	32fd0 <__aeabi_dadd+0x26c>
   32e46:	1b9e      	subs	r6, r3, r6
   32e48:	1c73      	adds	r3, r6, #1
   32e4a:	2b1f      	cmp	r3, #31
   32e4c:	dd00      	ble.n	32e50 <__aeabi_dadd+0xec>
   32e4e:	e0f1      	b.n	33034 <__aeabi_dadd+0x2d0>
   32e50:	2220      	movs	r2, #32
   32e52:	0038      	movs	r0, r7
   32e54:	0029      	movs	r1, r5
   32e56:	1ad2      	subs	r2, r2, r3
   32e58:	40d8      	lsrs	r0, r3
   32e5a:	4091      	lsls	r1, r2
   32e5c:	4097      	lsls	r7, r2
   32e5e:	002c      	movs	r4, r5
   32e60:	4301      	orrs	r1, r0
   32e62:	1e78      	subs	r0, r7, #1
   32e64:	4187      	sbcs	r7, r0
   32e66:	40dc      	lsrs	r4, r3
   32e68:	2600      	movs	r6, #0
   32e6a:	430f      	orrs	r7, r1
   32e6c:	077b      	lsls	r3, r7, #29
   32e6e:	d009      	beq.n	32e84 <__aeabi_dadd+0x120>
   32e70:	230f      	movs	r3, #15
   32e72:	403b      	ands	r3, r7
   32e74:	2b04      	cmp	r3, #4
   32e76:	d005      	beq.n	32e84 <__aeabi_dadd+0x120>
   32e78:	1d3b      	adds	r3, r7, #4
   32e7a:	42bb      	cmp	r3, r7
   32e7c:	41bf      	sbcs	r7, r7
   32e7e:	427f      	negs	r7, r7
   32e80:	19e4      	adds	r4, r4, r7
   32e82:	001f      	movs	r7, r3
   32e84:	0223      	lsls	r3, r4, #8
   32e86:	d52c      	bpl.n	32ee2 <__aeabi_dadd+0x17e>
   32e88:	4b96      	ldr	r3, [pc, #600]	; (330e4 <__aeabi_dadd+0x380>)
   32e8a:	3601      	adds	r6, #1
   32e8c:	429e      	cmp	r6, r3
   32e8e:	d100      	bne.n	32e92 <__aeabi_dadd+0x12e>
   32e90:	e09a      	b.n	32fc8 <__aeabi_dadd+0x264>
   32e92:	4645      	mov	r5, r8
   32e94:	4b94      	ldr	r3, [pc, #592]	; (330e8 <__aeabi_dadd+0x384>)
   32e96:	08ff      	lsrs	r7, r7, #3
   32e98:	401c      	ands	r4, r3
   32e9a:	0760      	lsls	r0, r4, #29
   32e9c:	0576      	lsls	r6, r6, #21
   32e9e:	0264      	lsls	r4, r4, #9
   32ea0:	4307      	orrs	r7, r0
   32ea2:	0b24      	lsrs	r4, r4, #12
   32ea4:	0d76      	lsrs	r6, r6, #21
   32ea6:	2100      	movs	r1, #0
   32ea8:	0324      	lsls	r4, r4, #12
   32eaa:	0b23      	lsrs	r3, r4, #12
   32eac:	0d0c      	lsrs	r4, r1, #20
   32eae:	4a8f      	ldr	r2, [pc, #572]	; (330ec <__aeabi_dadd+0x388>)
   32eb0:	0524      	lsls	r4, r4, #20
   32eb2:	431c      	orrs	r4, r3
   32eb4:	4014      	ands	r4, r2
   32eb6:	0533      	lsls	r3, r6, #20
   32eb8:	4323      	orrs	r3, r4
   32eba:	005b      	lsls	r3, r3, #1
   32ebc:	07ed      	lsls	r5, r5, #31
   32ebe:	085b      	lsrs	r3, r3, #1
   32ec0:	432b      	orrs	r3, r5
   32ec2:	0038      	movs	r0, r7
   32ec4:	0019      	movs	r1, r3
   32ec6:	bc3c      	pop	{r2, r3, r4, r5}
   32ec8:	4690      	mov	r8, r2
   32eca:	4699      	mov	r9, r3
   32ecc:	46a2      	mov	sl, r4
   32ece:	46ab      	mov	fp, r5
   32ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32ed2:	4664      	mov	r4, ip
   32ed4:	4304      	orrs	r4, r0
   32ed6:	d100      	bne.n	32eda <__aeabi_dadd+0x176>
   32ed8:	e211      	b.n	332fe <__aeabi_dadd+0x59a>
   32eda:	0004      	movs	r4, r0
   32edc:	4667      	mov	r7, ip
   32ede:	077b      	lsls	r3, r7, #29
   32ee0:	d1c6      	bne.n	32e70 <__aeabi_dadd+0x10c>
   32ee2:	4645      	mov	r5, r8
   32ee4:	0760      	lsls	r0, r4, #29
   32ee6:	08ff      	lsrs	r7, r7, #3
   32ee8:	4307      	orrs	r7, r0
   32eea:	08e4      	lsrs	r4, r4, #3
   32eec:	4b7d      	ldr	r3, [pc, #500]	; (330e4 <__aeabi_dadd+0x380>)
   32eee:	429e      	cmp	r6, r3
   32ef0:	d030      	beq.n	32f54 <__aeabi_dadd+0x1f0>
   32ef2:	0324      	lsls	r4, r4, #12
   32ef4:	0576      	lsls	r6, r6, #21
   32ef6:	0b24      	lsrs	r4, r4, #12
   32ef8:	0d76      	lsrs	r6, r6, #21
   32efa:	e7d4      	b.n	32ea6 <__aeabi_dadd+0x142>
   32efc:	1a33      	subs	r3, r6, r0
   32efe:	469a      	mov	sl, r3
   32f00:	2b00      	cmp	r3, #0
   32f02:	dd78      	ble.n	32ff6 <__aeabi_dadd+0x292>
   32f04:	2800      	cmp	r0, #0
   32f06:	d031      	beq.n	32f6c <__aeabi_dadd+0x208>
   32f08:	4876      	ldr	r0, [pc, #472]	; (330e4 <__aeabi_dadd+0x380>)
   32f0a:	4286      	cmp	r6, r0
   32f0c:	d0ae      	beq.n	32e6c <__aeabi_dadd+0x108>
   32f0e:	2080      	movs	r0, #128	; 0x80
   32f10:	0400      	lsls	r0, r0, #16
   32f12:	4301      	orrs	r1, r0
   32f14:	4653      	mov	r3, sl
   32f16:	2b38      	cmp	r3, #56	; 0x38
   32f18:	dc00      	bgt.n	32f1c <__aeabi_dadd+0x1b8>
   32f1a:	e0e9      	b.n	330f0 <__aeabi_dadd+0x38c>
   32f1c:	430a      	orrs	r2, r1
   32f1e:	1e51      	subs	r1, r2, #1
   32f20:	418a      	sbcs	r2, r1
   32f22:	2100      	movs	r1, #0
   32f24:	19d2      	adds	r2, r2, r7
   32f26:	42ba      	cmp	r2, r7
   32f28:	41bf      	sbcs	r7, r7
   32f2a:	1909      	adds	r1, r1, r4
   32f2c:	427c      	negs	r4, r7
   32f2e:	0017      	movs	r7, r2
   32f30:	190c      	adds	r4, r1, r4
   32f32:	0223      	lsls	r3, r4, #8
   32f34:	d5d3      	bpl.n	32ede <__aeabi_dadd+0x17a>
   32f36:	4b6b      	ldr	r3, [pc, #428]	; (330e4 <__aeabi_dadd+0x380>)
   32f38:	3601      	adds	r6, #1
   32f3a:	429e      	cmp	r6, r3
   32f3c:	d100      	bne.n	32f40 <__aeabi_dadd+0x1dc>
   32f3e:	e13a      	b.n	331b6 <__aeabi_dadd+0x452>
   32f40:	2001      	movs	r0, #1
   32f42:	4b69      	ldr	r3, [pc, #420]	; (330e8 <__aeabi_dadd+0x384>)
   32f44:	401c      	ands	r4, r3
   32f46:	087b      	lsrs	r3, r7, #1
   32f48:	4007      	ands	r7, r0
   32f4a:	431f      	orrs	r7, r3
   32f4c:	07e0      	lsls	r0, r4, #31
   32f4e:	4307      	orrs	r7, r0
   32f50:	0864      	lsrs	r4, r4, #1
   32f52:	e78b      	b.n	32e6c <__aeabi_dadd+0x108>
   32f54:	0023      	movs	r3, r4
   32f56:	433b      	orrs	r3, r7
   32f58:	d100      	bne.n	32f5c <__aeabi_dadd+0x1f8>
   32f5a:	e1cb      	b.n	332f4 <__aeabi_dadd+0x590>
   32f5c:	2280      	movs	r2, #128	; 0x80
   32f5e:	0312      	lsls	r2, r2, #12
   32f60:	4314      	orrs	r4, r2
   32f62:	0324      	lsls	r4, r4, #12
   32f64:	0b24      	lsrs	r4, r4, #12
   32f66:	e79e      	b.n	32ea6 <__aeabi_dadd+0x142>
   32f68:	002e      	movs	r6, r5
   32f6a:	e77f      	b.n	32e6c <__aeabi_dadd+0x108>
   32f6c:	0008      	movs	r0, r1
   32f6e:	4310      	orrs	r0, r2
   32f70:	d100      	bne.n	32f74 <__aeabi_dadd+0x210>
   32f72:	e0b4      	b.n	330de <__aeabi_dadd+0x37a>
   32f74:	1e58      	subs	r0, r3, #1
   32f76:	2800      	cmp	r0, #0
   32f78:	d000      	beq.n	32f7c <__aeabi_dadd+0x218>
   32f7a:	e0de      	b.n	3313a <__aeabi_dadd+0x3d6>
   32f7c:	18ba      	adds	r2, r7, r2
   32f7e:	42ba      	cmp	r2, r7
   32f80:	419b      	sbcs	r3, r3
   32f82:	1864      	adds	r4, r4, r1
   32f84:	425b      	negs	r3, r3
   32f86:	18e4      	adds	r4, r4, r3
   32f88:	0017      	movs	r7, r2
   32f8a:	2601      	movs	r6, #1
   32f8c:	0223      	lsls	r3, r4, #8
   32f8e:	d5a6      	bpl.n	32ede <__aeabi_dadd+0x17a>
   32f90:	2602      	movs	r6, #2
   32f92:	e7d5      	b.n	32f40 <__aeabi_dadd+0x1dc>
   32f94:	2d00      	cmp	r5, #0
   32f96:	d16e      	bne.n	33076 <__aeabi_dadd+0x312>
   32f98:	1c70      	adds	r0, r6, #1
   32f9a:	0540      	lsls	r0, r0, #21
   32f9c:	0d40      	lsrs	r0, r0, #21
   32f9e:	2801      	cmp	r0, #1
   32fa0:	dc00      	bgt.n	32fa4 <__aeabi_dadd+0x240>
   32fa2:	e0f9      	b.n	33198 <__aeabi_dadd+0x434>
   32fa4:	1ab8      	subs	r0, r7, r2
   32fa6:	4684      	mov	ip, r0
   32fa8:	4287      	cmp	r7, r0
   32faa:	4180      	sbcs	r0, r0
   32fac:	1ae5      	subs	r5, r4, r3
   32fae:	4240      	negs	r0, r0
   32fb0:	1a2d      	subs	r5, r5, r0
   32fb2:	0228      	lsls	r0, r5, #8
   32fb4:	d400      	bmi.n	32fb8 <__aeabi_dadd+0x254>
   32fb6:	e089      	b.n	330cc <__aeabi_dadd+0x368>
   32fb8:	1bd7      	subs	r7, r2, r7
   32fba:	42ba      	cmp	r2, r7
   32fbc:	4192      	sbcs	r2, r2
   32fbe:	1b1c      	subs	r4, r3, r4
   32fc0:	4252      	negs	r2, r2
   32fc2:	1aa5      	subs	r5, r4, r2
   32fc4:	46d8      	mov	r8, fp
   32fc6:	e729      	b.n	32e1c <__aeabi_dadd+0xb8>
   32fc8:	4645      	mov	r5, r8
   32fca:	2400      	movs	r4, #0
   32fcc:	2700      	movs	r7, #0
   32fce:	e76a      	b.n	32ea6 <__aeabi_dadd+0x142>
   32fd0:	4c45      	ldr	r4, [pc, #276]	; (330e8 <__aeabi_dadd+0x384>)
   32fd2:	1af6      	subs	r6, r6, r3
   32fd4:	402c      	ands	r4, r5
   32fd6:	e749      	b.n	32e6c <__aeabi_dadd+0x108>
   32fd8:	003d      	movs	r5, r7
   32fda:	3828      	subs	r0, #40	; 0x28
   32fdc:	4085      	lsls	r5, r0
   32fde:	2700      	movs	r7, #0
   32fe0:	e72e      	b.n	32e40 <__aeabi_dadd+0xdc>
   32fe2:	0038      	movs	r0, r7
   32fe4:	f001 fb04 	bl	345f0 <__clzsi2>
   32fe8:	3020      	adds	r0, #32
   32fea:	e71d      	b.n	32e28 <__aeabi_dadd+0xc4>
   32fec:	430a      	orrs	r2, r1
   32fee:	1e51      	subs	r1, r2, #1
   32ff0:	418a      	sbcs	r2, r1
   32ff2:	2100      	movs	r1, #0
   32ff4:	e707      	b.n	32e06 <__aeabi_dadd+0xa2>
   32ff6:	2b00      	cmp	r3, #0
   32ff8:	d000      	beq.n	32ffc <__aeabi_dadd+0x298>
   32ffa:	e0f3      	b.n	331e4 <__aeabi_dadd+0x480>
   32ffc:	1c70      	adds	r0, r6, #1
   32ffe:	0543      	lsls	r3, r0, #21
   33000:	0d5b      	lsrs	r3, r3, #21
   33002:	2b01      	cmp	r3, #1
   33004:	dc00      	bgt.n	33008 <__aeabi_dadd+0x2a4>
   33006:	e0ad      	b.n	33164 <__aeabi_dadd+0x400>
   33008:	4b36      	ldr	r3, [pc, #216]	; (330e4 <__aeabi_dadd+0x380>)
   3300a:	4298      	cmp	r0, r3
   3300c:	d100      	bne.n	33010 <__aeabi_dadd+0x2ac>
   3300e:	e0d1      	b.n	331b4 <__aeabi_dadd+0x450>
   33010:	18ba      	adds	r2, r7, r2
   33012:	42ba      	cmp	r2, r7
   33014:	41bf      	sbcs	r7, r7
   33016:	1864      	adds	r4, r4, r1
   33018:	427f      	negs	r7, r7
   3301a:	19e4      	adds	r4, r4, r7
   3301c:	07e7      	lsls	r7, r4, #31
   3301e:	0852      	lsrs	r2, r2, #1
   33020:	4317      	orrs	r7, r2
   33022:	0864      	lsrs	r4, r4, #1
   33024:	0006      	movs	r6, r0
   33026:	e721      	b.n	32e6c <__aeabi_dadd+0x108>
   33028:	482e      	ldr	r0, [pc, #184]	; (330e4 <__aeabi_dadd+0x380>)
   3302a:	4285      	cmp	r5, r0
   3302c:	d100      	bne.n	33030 <__aeabi_dadd+0x2cc>
   3302e:	e093      	b.n	33158 <__aeabi_dadd+0x3f4>
   33030:	001d      	movs	r5, r3
   33032:	e6d0      	b.n	32dd6 <__aeabi_dadd+0x72>
   33034:	0029      	movs	r1, r5
   33036:	3e1f      	subs	r6, #31
   33038:	40f1      	lsrs	r1, r6
   3303a:	2b20      	cmp	r3, #32
   3303c:	d100      	bne.n	33040 <__aeabi_dadd+0x2dc>
   3303e:	e08d      	b.n	3315c <__aeabi_dadd+0x3f8>
   33040:	2240      	movs	r2, #64	; 0x40
   33042:	1ad3      	subs	r3, r2, r3
   33044:	409d      	lsls	r5, r3
   33046:	432f      	orrs	r7, r5
   33048:	1e7d      	subs	r5, r7, #1
   3304a:	41af      	sbcs	r7, r5
   3304c:	2400      	movs	r4, #0
   3304e:	430f      	orrs	r7, r1
   33050:	2600      	movs	r6, #0
   33052:	e744      	b.n	32ede <__aeabi_dadd+0x17a>
   33054:	002b      	movs	r3, r5
   33056:	0008      	movs	r0, r1
   33058:	3b20      	subs	r3, #32
   3305a:	40d8      	lsrs	r0, r3
   3305c:	0003      	movs	r3, r0
   3305e:	2d20      	cmp	r5, #32
   33060:	d100      	bne.n	33064 <__aeabi_dadd+0x300>
   33062:	e07d      	b.n	33160 <__aeabi_dadd+0x3fc>
   33064:	2040      	movs	r0, #64	; 0x40
   33066:	1b45      	subs	r5, r0, r5
   33068:	40a9      	lsls	r1, r5
   3306a:	430a      	orrs	r2, r1
   3306c:	1e51      	subs	r1, r2, #1
   3306e:	418a      	sbcs	r2, r1
   33070:	2100      	movs	r1, #0
   33072:	431a      	orrs	r2, r3
   33074:	e6c7      	b.n	32e06 <__aeabi_dadd+0xa2>
   33076:	2e00      	cmp	r6, #0
   33078:	d050      	beq.n	3311c <__aeabi_dadd+0x3b8>
   3307a:	4e1a      	ldr	r6, [pc, #104]	; (330e4 <__aeabi_dadd+0x380>)
   3307c:	42b0      	cmp	r0, r6
   3307e:	d057      	beq.n	33130 <__aeabi_dadd+0x3cc>
   33080:	2680      	movs	r6, #128	; 0x80
   33082:	426b      	negs	r3, r5
   33084:	4699      	mov	r9, r3
   33086:	0436      	lsls	r6, r6, #16
   33088:	4334      	orrs	r4, r6
   3308a:	464b      	mov	r3, r9
   3308c:	2b38      	cmp	r3, #56	; 0x38
   3308e:	dd00      	ble.n	33092 <__aeabi_dadd+0x32e>
   33090:	e0d6      	b.n	33240 <__aeabi_dadd+0x4dc>
   33092:	2b1f      	cmp	r3, #31
   33094:	dd00      	ble.n	33098 <__aeabi_dadd+0x334>
   33096:	e135      	b.n	33304 <__aeabi_dadd+0x5a0>
   33098:	2620      	movs	r6, #32
   3309a:	1af5      	subs	r5, r6, r3
   3309c:	0026      	movs	r6, r4
   3309e:	40ae      	lsls	r6, r5
   330a0:	46b2      	mov	sl, r6
   330a2:	003e      	movs	r6, r7
   330a4:	40de      	lsrs	r6, r3
   330a6:	46ac      	mov	ip, r5
   330a8:	0035      	movs	r5, r6
   330aa:	4656      	mov	r6, sl
   330ac:	432e      	orrs	r6, r5
   330ae:	4665      	mov	r5, ip
   330b0:	40af      	lsls	r7, r5
   330b2:	1e7d      	subs	r5, r7, #1
   330b4:	41af      	sbcs	r7, r5
   330b6:	40dc      	lsrs	r4, r3
   330b8:	4337      	orrs	r7, r6
   330ba:	1bd7      	subs	r7, r2, r7
   330bc:	42ba      	cmp	r2, r7
   330be:	4192      	sbcs	r2, r2
   330c0:	1b0c      	subs	r4, r1, r4
   330c2:	4252      	negs	r2, r2
   330c4:	1aa4      	subs	r4, r4, r2
   330c6:	0006      	movs	r6, r0
   330c8:	46d8      	mov	r8, fp
   330ca:	e6a3      	b.n	32e14 <__aeabi_dadd+0xb0>
   330cc:	4664      	mov	r4, ip
   330ce:	4667      	mov	r7, ip
   330d0:	432c      	orrs	r4, r5
   330d2:	d000      	beq.n	330d6 <__aeabi_dadd+0x372>
   330d4:	e6a2      	b.n	32e1c <__aeabi_dadd+0xb8>
   330d6:	2500      	movs	r5, #0
   330d8:	2600      	movs	r6, #0
   330da:	2700      	movs	r7, #0
   330dc:	e706      	b.n	32eec <__aeabi_dadd+0x188>
   330de:	001e      	movs	r6, r3
   330e0:	e6c4      	b.n	32e6c <__aeabi_dadd+0x108>
   330e2:	46c0      	nop			; (mov r8, r8)
   330e4:	000007ff 	.word	0x000007ff
   330e8:	ff7fffff 	.word	0xff7fffff
   330ec:	800fffff 	.word	0x800fffff
   330f0:	2b1f      	cmp	r3, #31
   330f2:	dc63      	bgt.n	331bc <__aeabi_dadd+0x458>
   330f4:	2020      	movs	r0, #32
   330f6:	1ac3      	subs	r3, r0, r3
   330f8:	0008      	movs	r0, r1
   330fa:	4098      	lsls	r0, r3
   330fc:	469c      	mov	ip, r3
   330fe:	4683      	mov	fp, r0
   33100:	4653      	mov	r3, sl
   33102:	0010      	movs	r0, r2
   33104:	40d8      	lsrs	r0, r3
   33106:	0003      	movs	r3, r0
   33108:	4658      	mov	r0, fp
   3310a:	4318      	orrs	r0, r3
   3310c:	4663      	mov	r3, ip
   3310e:	409a      	lsls	r2, r3
   33110:	1e53      	subs	r3, r2, #1
   33112:	419a      	sbcs	r2, r3
   33114:	4653      	mov	r3, sl
   33116:	4302      	orrs	r2, r0
   33118:	40d9      	lsrs	r1, r3
   3311a:	e703      	b.n	32f24 <__aeabi_dadd+0x1c0>
   3311c:	0026      	movs	r6, r4
   3311e:	433e      	orrs	r6, r7
   33120:	d006      	beq.n	33130 <__aeabi_dadd+0x3cc>
   33122:	43eb      	mvns	r3, r5
   33124:	4699      	mov	r9, r3
   33126:	2b00      	cmp	r3, #0
   33128:	d0c7      	beq.n	330ba <__aeabi_dadd+0x356>
   3312a:	4e94      	ldr	r6, [pc, #592]	; (3337c <__aeabi_dadd+0x618>)
   3312c:	42b0      	cmp	r0, r6
   3312e:	d1ac      	bne.n	3308a <__aeabi_dadd+0x326>
   33130:	000c      	movs	r4, r1
   33132:	0017      	movs	r7, r2
   33134:	0006      	movs	r6, r0
   33136:	46d8      	mov	r8, fp
   33138:	e698      	b.n	32e6c <__aeabi_dadd+0x108>
   3313a:	4b90      	ldr	r3, [pc, #576]	; (3337c <__aeabi_dadd+0x618>)
   3313c:	459a      	cmp	sl, r3
   3313e:	d00b      	beq.n	33158 <__aeabi_dadd+0x3f4>
   33140:	4682      	mov	sl, r0
   33142:	e6e7      	b.n	32f14 <__aeabi_dadd+0x1b0>
   33144:	2800      	cmp	r0, #0
   33146:	d000      	beq.n	3314a <__aeabi_dadd+0x3e6>
   33148:	e09e      	b.n	33288 <__aeabi_dadd+0x524>
   3314a:	0018      	movs	r0, r3
   3314c:	4310      	orrs	r0, r2
   3314e:	d100      	bne.n	33152 <__aeabi_dadd+0x3ee>
   33150:	e0e9      	b.n	33326 <__aeabi_dadd+0x5c2>
   33152:	001c      	movs	r4, r3
   33154:	0017      	movs	r7, r2
   33156:	46d8      	mov	r8, fp
   33158:	4e88      	ldr	r6, [pc, #544]	; (3337c <__aeabi_dadd+0x618>)
   3315a:	e687      	b.n	32e6c <__aeabi_dadd+0x108>
   3315c:	2500      	movs	r5, #0
   3315e:	e772      	b.n	33046 <__aeabi_dadd+0x2e2>
   33160:	2100      	movs	r1, #0
   33162:	e782      	b.n	3306a <__aeabi_dadd+0x306>
   33164:	0023      	movs	r3, r4
   33166:	433b      	orrs	r3, r7
   33168:	2e00      	cmp	r6, #0
   3316a:	d000      	beq.n	3316e <__aeabi_dadd+0x40a>
   3316c:	e0ab      	b.n	332c6 <__aeabi_dadd+0x562>
   3316e:	2b00      	cmp	r3, #0
   33170:	d100      	bne.n	33174 <__aeabi_dadd+0x410>
   33172:	e0e7      	b.n	33344 <__aeabi_dadd+0x5e0>
   33174:	000b      	movs	r3, r1
   33176:	4313      	orrs	r3, r2
   33178:	d100      	bne.n	3317c <__aeabi_dadd+0x418>
   3317a:	e677      	b.n	32e6c <__aeabi_dadd+0x108>
   3317c:	18ba      	adds	r2, r7, r2
   3317e:	42ba      	cmp	r2, r7
   33180:	41bf      	sbcs	r7, r7
   33182:	1864      	adds	r4, r4, r1
   33184:	427f      	negs	r7, r7
   33186:	19e4      	adds	r4, r4, r7
   33188:	0223      	lsls	r3, r4, #8
   3318a:	d400      	bmi.n	3318e <__aeabi_dadd+0x42a>
   3318c:	e0f2      	b.n	33374 <__aeabi_dadd+0x610>
   3318e:	4b7c      	ldr	r3, [pc, #496]	; (33380 <__aeabi_dadd+0x61c>)
   33190:	0017      	movs	r7, r2
   33192:	401c      	ands	r4, r3
   33194:	0006      	movs	r6, r0
   33196:	e669      	b.n	32e6c <__aeabi_dadd+0x108>
   33198:	0020      	movs	r0, r4
   3319a:	4338      	orrs	r0, r7
   3319c:	2e00      	cmp	r6, #0
   3319e:	d1d1      	bne.n	33144 <__aeabi_dadd+0x3e0>
   331a0:	2800      	cmp	r0, #0
   331a2:	d15b      	bne.n	3325c <__aeabi_dadd+0x4f8>
   331a4:	001c      	movs	r4, r3
   331a6:	4314      	orrs	r4, r2
   331a8:	d100      	bne.n	331ac <__aeabi_dadd+0x448>
   331aa:	e0a8      	b.n	332fe <__aeabi_dadd+0x59a>
   331ac:	001c      	movs	r4, r3
   331ae:	0017      	movs	r7, r2
   331b0:	46d8      	mov	r8, fp
   331b2:	e65b      	b.n	32e6c <__aeabi_dadd+0x108>
   331b4:	0006      	movs	r6, r0
   331b6:	2400      	movs	r4, #0
   331b8:	2700      	movs	r7, #0
   331ba:	e697      	b.n	32eec <__aeabi_dadd+0x188>
   331bc:	4650      	mov	r0, sl
   331be:	000b      	movs	r3, r1
   331c0:	3820      	subs	r0, #32
   331c2:	40c3      	lsrs	r3, r0
   331c4:	4699      	mov	r9, r3
   331c6:	4653      	mov	r3, sl
   331c8:	2b20      	cmp	r3, #32
   331ca:	d100      	bne.n	331ce <__aeabi_dadd+0x46a>
   331cc:	e095      	b.n	332fa <__aeabi_dadd+0x596>
   331ce:	2340      	movs	r3, #64	; 0x40
   331d0:	4650      	mov	r0, sl
   331d2:	1a1b      	subs	r3, r3, r0
   331d4:	4099      	lsls	r1, r3
   331d6:	430a      	orrs	r2, r1
   331d8:	1e51      	subs	r1, r2, #1
   331da:	418a      	sbcs	r2, r1
   331dc:	464b      	mov	r3, r9
   331de:	2100      	movs	r1, #0
   331e0:	431a      	orrs	r2, r3
   331e2:	e69f      	b.n	32f24 <__aeabi_dadd+0x1c0>
   331e4:	2e00      	cmp	r6, #0
   331e6:	d130      	bne.n	3324a <__aeabi_dadd+0x4e6>
   331e8:	0026      	movs	r6, r4
   331ea:	433e      	orrs	r6, r7
   331ec:	d067      	beq.n	332be <__aeabi_dadd+0x55a>
   331ee:	43db      	mvns	r3, r3
   331f0:	469a      	mov	sl, r3
   331f2:	2b00      	cmp	r3, #0
   331f4:	d01c      	beq.n	33230 <__aeabi_dadd+0x4cc>
   331f6:	4e61      	ldr	r6, [pc, #388]	; (3337c <__aeabi_dadd+0x618>)
   331f8:	42b0      	cmp	r0, r6
   331fa:	d060      	beq.n	332be <__aeabi_dadd+0x55a>
   331fc:	4653      	mov	r3, sl
   331fe:	2b38      	cmp	r3, #56	; 0x38
   33200:	dd00      	ble.n	33204 <__aeabi_dadd+0x4a0>
   33202:	e096      	b.n	33332 <__aeabi_dadd+0x5ce>
   33204:	2b1f      	cmp	r3, #31
   33206:	dd00      	ble.n	3320a <__aeabi_dadd+0x4a6>
   33208:	e09f      	b.n	3334a <__aeabi_dadd+0x5e6>
   3320a:	2620      	movs	r6, #32
   3320c:	1af3      	subs	r3, r6, r3
   3320e:	0026      	movs	r6, r4
   33210:	409e      	lsls	r6, r3
   33212:	469c      	mov	ip, r3
   33214:	46b3      	mov	fp, r6
   33216:	4653      	mov	r3, sl
   33218:	003e      	movs	r6, r7
   3321a:	40de      	lsrs	r6, r3
   3321c:	0033      	movs	r3, r6
   3321e:	465e      	mov	r6, fp
   33220:	431e      	orrs	r6, r3
   33222:	4663      	mov	r3, ip
   33224:	409f      	lsls	r7, r3
   33226:	1e7b      	subs	r3, r7, #1
   33228:	419f      	sbcs	r7, r3
   3322a:	4653      	mov	r3, sl
   3322c:	40dc      	lsrs	r4, r3
   3322e:	4337      	orrs	r7, r6
   33230:	18bf      	adds	r7, r7, r2
   33232:	4297      	cmp	r7, r2
   33234:	4192      	sbcs	r2, r2
   33236:	1864      	adds	r4, r4, r1
   33238:	4252      	negs	r2, r2
   3323a:	18a4      	adds	r4, r4, r2
   3323c:	0006      	movs	r6, r0
   3323e:	e678      	b.n	32f32 <__aeabi_dadd+0x1ce>
   33240:	4327      	orrs	r7, r4
   33242:	1e7c      	subs	r4, r7, #1
   33244:	41a7      	sbcs	r7, r4
   33246:	2400      	movs	r4, #0
   33248:	e737      	b.n	330ba <__aeabi_dadd+0x356>
   3324a:	4e4c      	ldr	r6, [pc, #304]	; (3337c <__aeabi_dadd+0x618>)
   3324c:	42b0      	cmp	r0, r6
   3324e:	d036      	beq.n	332be <__aeabi_dadd+0x55a>
   33250:	2680      	movs	r6, #128	; 0x80
   33252:	425b      	negs	r3, r3
   33254:	0436      	lsls	r6, r6, #16
   33256:	469a      	mov	sl, r3
   33258:	4334      	orrs	r4, r6
   3325a:	e7cf      	b.n	331fc <__aeabi_dadd+0x498>
   3325c:	0018      	movs	r0, r3
   3325e:	4310      	orrs	r0, r2
   33260:	d100      	bne.n	33264 <__aeabi_dadd+0x500>
   33262:	e603      	b.n	32e6c <__aeabi_dadd+0x108>
   33264:	1ab8      	subs	r0, r7, r2
   33266:	4684      	mov	ip, r0
   33268:	4567      	cmp	r7, ip
   3326a:	41ad      	sbcs	r5, r5
   3326c:	1ae0      	subs	r0, r4, r3
   3326e:	426d      	negs	r5, r5
   33270:	1b40      	subs	r0, r0, r5
   33272:	0205      	lsls	r5, r0, #8
   33274:	d400      	bmi.n	33278 <__aeabi_dadd+0x514>
   33276:	e62c      	b.n	32ed2 <__aeabi_dadd+0x16e>
   33278:	1bd7      	subs	r7, r2, r7
   3327a:	42ba      	cmp	r2, r7
   3327c:	4192      	sbcs	r2, r2
   3327e:	1b1c      	subs	r4, r3, r4
   33280:	4252      	negs	r2, r2
   33282:	1aa4      	subs	r4, r4, r2
   33284:	46d8      	mov	r8, fp
   33286:	e5f1      	b.n	32e6c <__aeabi_dadd+0x108>
   33288:	0018      	movs	r0, r3
   3328a:	4310      	orrs	r0, r2
   3328c:	d100      	bne.n	33290 <__aeabi_dadd+0x52c>
   3328e:	e763      	b.n	33158 <__aeabi_dadd+0x3f4>
   33290:	08f8      	lsrs	r0, r7, #3
   33292:	0767      	lsls	r7, r4, #29
   33294:	4307      	orrs	r7, r0
   33296:	2080      	movs	r0, #128	; 0x80
   33298:	08e4      	lsrs	r4, r4, #3
   3329a:	0300      	lsls	r0, r0, #12
   3329c:	4204      	tst	r4, r0
   3329e:	d008      	beq.n	332b2 <__aeabi_dadd+0x54e>
   332a0:	08dd      	lsrs	r5, r3, #3
   332a2:	4205      	tst	r5, r0
   332a4:	d105      	bne.n	332b2 <__aeabi_dadd+0x54e>
   332a6:	08d2      	lsrs	r2, r2, #3
   332a8:	0759      	lsls	r1, r3, #29
   332aa:	4311      	orrs	r1, r2
   332ac:	000f      	movs	r7, r1
   332ae:	002c      	movs	r4, r5
   332b0:	46d8      	mov	r8, fp
   332b2:	0f7b      	lsrs	r3, r7, #29
   332b4:	00e4      	lsls	r4, r4, #3
   332b6:	431c      	orrs	r4, r3
   332b8:	00ff      	lsls	r7, r7, #3
   332ba:	4e30      	ldr	r6, [pc, #192]	; (3337c <__aeabi_dadd+0x618>)
   332bc:	e5d6      	b.n	32e6c <__aeabi_dadd+0x108>
   332be:	000c      	movs	r4, r1
   332c0:	0017      	movs	r7, r2
   332c2:	0006      	movs	r6, r0
   332c4:	e5d2      	b.n	32e6c <__aeabi_dadd+0x108>
   332c6:	2b00      	cmp	r3, #0
   332c8:	d038      	beq.n	3333c <__aeabi_dadd+0x5d8>
   332ca:	000b      	movs	r3, r1
   332cc:	4313      	orrs	r3, r2
   332ce:	d100      	bne.n	332d2 <__aeabi_dadd+0x56e>
   332d0:	e742      	b.n	33158 <__aeabi_dadd+0x3f4>
   332d2:	08f8      	lsrs	r0, r7, #3
   332d4:	0767      	lsls	r7, r4, #29
   332d6:	4307      	orrs	r7, r0
   332d8:	2080      	movs	r0, #128	; 0x80
   332da:	08e4      	lsrs	r4, r4, #3
   332dc:	0300      	lsls	r0, r0, #12
   332de:	4204      	tst	r4, r0
   332e0:	d0e7      	beq.n	332b2 <__aeabi_dadd+0x54e>
   332e2:	08cb      	lsrs	r3, r1, #3
   332e4:	4203      	tst	r3, r0
   332e6:	d1e4      	bne.n	332b2 <__aeabi_dadd+0x54e>
   332e8:	08d2      	lsrs	r2, r2, #3
   332ea:	0749      	lsls	r1, r1, #29
   332ec:	4311      	orrs	r1, r2
   332ee:	000f      	movs	r7, r1
   332f0:	001c      	movs	r4, r3
   332f2:	e7de      	b.n	332b2 <__aeabi_dadd+0x54e>
   332f4:	2700      	movs	r7, #0
   332f6:	2400      	movs	r4, #0
   332f8:	e5d5      	b.n	32ea6 <__aeabi_dadd+0x142>
   332fa:	2100      	movs	r1, #0
   332fc:	e76b      	b.n	331d6 <__aeabi_dadd+0x472>
   332fe:	2500      	movs	r5, #0
   33300:	2700      	movs	r7, #0
   33302:	e5f3      	b.n	32eec <__aeabi_dadd+0x188>
   33304:	464e      	mov	r6, r9
   33306:	0025      	movs	r5, r4
   33308:	3e20      	subs	r6, #32
   3330a:	40f5      	lsrs	r5, r6
   3330c:	464b      	mov	r3, r9
   3330e:	002e      	movs	r6, r5
   33310:	2b20      	cmp	r3, #32
   33312:	d02d      	beq.n	33370 <__aeabi_dadd+0x60c>
   33314:	2540      	movs	r5, #64	; 0x40
   33316:	1aed      	subs	r5, r5, r3
   33318:	40ac      	lsls	r4, r5
   3331a:	4327      	orrs	r7, r4
   3331c:	1e7c      	subs	r4, r7, #1
   3331e:	41a7      	sbcs	r7, r4
   33320:	2400      	movs	r4, #0
   33322:	4337      	orrs	r7, r6
   33324:	e6c9      	b.n	330ba <__aeabi_dadd+0x356>
   33326:	2480      	movs	r4, #128	; 0x80
   33328:	2500      	movs	r5, #0
   3332a:	0324      	lsls	r4, r4, #12
   3332c:	4e13      	ldr	r6, [pc, #76]	; (3337c <__aeabi_dadd+0x618>)
   3332e:	2700      	movs	r7, #0
   33330:	e5dc      	b.n	32eec <__aeabi_dadd+0x188>
   33332:	4327      	orrs	r7, r4
   33334:	1e7c      	subs	r4, r7, #1
   33336:	41a7      	sbcs	r7, r4
   33338:	2400      	movs	r4, #0
   3333a:	e779      	b.n	33230 <__aeabi_dadd+0x4cc>
   3333c:	000c      	movs	r4, r1
   3333e:	0017      	movs	r7, r2
   33340:	4e0e      	ldr	r6, [pc, #56]	; (3337c <__aeabi_dadd+0x618>)
   33342:	e593      	b.n	32e6c <__aeabi_dadd+0x108>
   33344:	000c      	movs	r4, r1
   33346:	0017      	movs	r7, r2
   33348:	e590      	b.n	32e6c <__aeabi_dadd+0x108>
   3334a:	4656      	mov	r6, sl
   3334c:	0023      	movs	r3, r4
   3334e:	3e20      	subs	r6, #32
   33350:	40f3      	lsrs	r3, r6
   33352:	4699      	mov	r9, r3
   33354:	4653      	mov	r3, sl
   33356:	2b20      	cmp	r3, #32
   33358:	d00e      	beq.n	33378 <__aeabi_dadd+0x614>
   3335a:	2340      	movs	r3, #64	; 0x40
   3335c:	4656      	mov	r6, sl
   3335e:	1b9b      	subs	r3, r3, r6
   33360:	409c      	lsls	r4, r3
   33362:	4327      	orrs	r7, r4
   33364:	1e7c      	subs	r4, r7, #1
   33366:	41a7      	sbcs	r7, r4
   33368:	464b      	mov	r3, r9
   3336a:	2400      	movs	r4, #0
   3336c:	431f      	orrs	r7, r3
   3336e:	e75f      	b.n	33230 <__aeabi_dadd+0x4cc>
   33370:	2400      	movs	r4, #0
   33372:	e7d2      	b.n	3331a <__aeabi_dadd+0x5b6>
   33374:	0017      	movs	r7, r2
   33376:	e5b2      	b.n	32ede <__aeabi_dadd+0x17a>
   33378:	2400      	movs	r4, #0
   3337a:	e7f2      	b.n	33362 <__aeabi_dadd+0x5fe>
   3337c:	000007ff 	.word	0x000007ff
   33380:	ff7fffff 	.word	0xff7fffff

00033384 <__aeabi_ddiv>:
   33384:	b5f0      	push	{r4, r5, r6, r7, lr}
   33386:	4657      	mov	r7, sl
   33388:	4645      	mov	r5, r8
   3338a:	46de      	mov	lr, fp
   3338c:	464e      	mov	r6, r9
   3338e:	b5e0      	push	{r5, r6, r7, lr}
   33390:	004c      	lsls	r4, r1, #1
   33392:	030e      	lsls	r6, r1, #12
   33394:	b087      	sub	sp, #28
   33396:	4683      	mov	fp, r0
   33398:	4692      	mov	sl, r2
   3339a:	001d      	movs	r5, r3
   3339c:	4680      	mov	r8, r0
   3339e:	0b36      	lsrs	r6, r6, #12
   333a0:	0d64      	lsrs	r4, r4, #21
   333a2:	0fcf      	lsrs	r7, r1, #31
   333a4:	2c00      	cmp	r4, #0
   333a6:	d04f      	beq.n	33448 <__aeabi_ddiv+0xc4>
   333a8:	4b6f      	ldr	r3, [pc, #444]	; (33568 <__aeabi_ddiv+0x1e4>)
   333aa:	429c      	cmp	r4, r3
   333ac:	d035      	beq.n	3341a <__aeabi_ddiv+0x96>
   333ae:	2380      	movs	r3, #128	; 0x80
   333b0:	0f42      	lsrs	r2, r0, #29
   333b2:	041b      	lsls	r3, r3, #16
   333b4:	00f6      	lsls	r6, r6, #3
   333b6:	4313      	orrs	r3, r2
   333b8:	4333      	orrs	r3, r6
   333ba:	4699      	mov	r9, r3
   333bc:	00c3      	lsls	r3, r0, #3
   333be:	4698      	mov	r8, r3
   333c0:	4b6a      	ldr	r3, [pc, #424]	; (3356c <__aeabi_ddiv+0x1e8>)
   333c2:	2600      	movs	r6, #0
   333c4:	469c      	mov	ip, r3
   333c6:	2300      	movs	r3, #0
   333c8:	4464      	add	r4, ip
   333ca:	9303      	str	r3, [sp, #12]
   333cc:	032b      	lsls	r3, r5, #12
   333ce:	0b1b      	lsrs	r3, r3, #12
   333d0:	469b      	mov	fp, r3
   333d2:	006b      	lsls	r3, r5, #1
   333d4:	0fed      	lsrs	r5, r5, #31
   333d6:	4650      	mov	r0, sl
   333d8:	0d5b      	lsrs	r3, r3, #21
   333da:	9501      	str	r5, [sp, #4]
   333dc:	d05e      	beq.n	3349c <__aeabi_ddiv+0x118>
   333de:	4a62      	ldr	r2, [pc, #392]	; (33568 <__aeabi_ddiv+0x1e4>)
   333e0:	4293      	cmp	r3, r2
   333e2:	d053      	beq.n	3348c <__aeabi_ddiv+0x108>
   333e4:	465a      	mov	r2, fp
   333e6:	00d1      	lsls	r1, r2, #3
   333e8:	2280      	movs	r2, #128	; 0x80
   333ea:	0f40      	lsrs	r0, r0, #29
   333ec:	0412      	lsls	r2, r2, #16
   333ee:	4302      	orrs	r2, r0
   333f0:	430a      	orrs	r2, r1
   333f2:	4693      	mov	fp, r2
   333f4:	4652      	mov	r2, sl
   333f6:	00d1      	lsls	r1, r2, #3
   333f8:	4a5c      	ldr	r2, [pc, #368]	; (3356c <__aeabi_ddiv+0x1e8>)
   333fa:	4694      	mov	ip, r2
   333fc:	2200      	movs	r2, #0
   333fe:	4463      	add	r3, ip
   33400:	0038      	movs	r0, r7
   33402:	4068      	eors	r0, r5
   33404:	4684      	mov	ip, r0
   33406:	9002      	str	r0, [sp, #8]
   33408:	1ae4      	subs	r4, r4, r3
   3340a:	4316      	orrs	r6, r2
   3340c:	2e0f      	cmp	r6, #15
   3340e:	d900      	bls.n	33412 <__aeabi_ddiv+0x8e>
   33410:	e0b4      	b.n	3357c <__aeabi_ddiv+0x1f8>
   33412:	4b57      	ldr	r3, [pc, #348]	; (33570 <__aeabi_ddiv+0x1ec>)
   33414:	00b6      	lsls	r6, r6, #2
   33416:	599b      	ldr	r3, [r3, r6]
   33418:	469f      	mov	pc, r3
   3341a:	0003      	movs	r3, r0
   3341c:	4333      	orrs	r3, r6
   3341e:	4699      	mov	r9, r3
   33420:	d16c      	bne.n	334fc <__aeabi_ddiv+0x178>
   33422:	2300      	movs	r3, #0
   33424:	4698      	mov	r8, r3
   33426:	3302      	adds	r3, #2
   33428:	2608      	movs	r6, #8
   3342a:	9303      	str	r3, [sp, #12]
   3342c:	e7ce      	b.n	333cc <__aeabi_ddiv+0x48>
   3342e:	46cb      	mov	fp, r9
   33430:	4641      	mov	r1, r8
   33432:	9a03      	ldr	r2, [sp, #12]
   33434:	9701      	str	r7, [sp, #4]
   33436:	2a02      	cmp	r2, #2
   33438:	d165      	bne.n	33506 <__aeabi_ddiv+0x182>
   3343a:	9b01      	ldr	r3, [sp, #4]
   3343c:	4c4a      	ldr	r4, [pc, #296]	; (33568 <__aeabi_ddiv+0x1e4>)
   3343e:	469c      	mov	ip, r3
   33440:	2300      	movs	r3, #0
   33442:	2200      	movs	r2, #0
   33444:	4698      	mov	r8, r3
   33446:	e06b      	b.n	33520 <__aeabi_ddiv+0x19c>
   33448:	0003      	movs	r3, r0
   3344a:	4333      	orrs	r3, r6
   3344c:	4699      	mov	r9, r3
   3344e:	d04e      	beq.n	334ee <__aeabi_ddiv+0x16a>
   33450:	2e00      	cmp	r6, #0
   33452:	d100      	bne.n	33456 <__aeabi_ddiv+0xd2>
   33454:	e1bc      	b.n	337d0 <__aeabi_ddiv+0x44c>
   33456:	0030      	movs	r0, r6
   33458:	f001 f8ca 	bl	345f0 <__clzsi2>
   3345c:	0003      	movs	r3, r0
   3345e:	3b0b      	subs	r3, #11
   33460:	2b1c      	cmp	r3, #28
   33462:	dd00      	ble.n	33466 <__aeabi_ddiv+0xe2>
   33464:	e1ac      	b.n	337c0 <__aeabi_ddiv+0x43c>
   33466:	221d      	movs	r2, #29
   33468:	1ad3      	subs	r3, r2, r3
   3346a:	465a      	mov	r2, fp
   3346c:	0001      	movs	r1, r0
   3346e:	40da      	lsrs	r2, r3
   33470:	3908      	subs	r1, #8
   33472:	408e      	lsls	r6, r1
   33474:	0013      	movs	r3, r2
   33476:	4333      	orrs	r3, r6
   33478:	4699      	mov	r9, r3
   3347a:	465b      	mov	r3, fp
   3347c:	408b      	lsls	r3, r1
   3347e:	4698      	mov	r8, r3
   33480:	2300      	movs	r3, #0
   33482:	4c3c      	ldr	r4, [pc, #240]	; (33574 <__aeabi_ddiv+0x1f0>)
   33484:	2600      	movs	r6, #0
   33486:	1a24      	subs	r4, r4, r0
   33488:	9303      	str	r3, [sp, #12]
   3348a:	e79f      	b.n	333cc <__aeabi_ddiv+0x48>
   3348c:	4651      	mov	r1, sl
   3348e:	465a      	mov	r2, fp
   33490:	4311      	orrs	r1, r2
   33492:	d129      	bne.n	334e8 <__aeabi_ddiv+0x164>
   33494:	2200      	movs	r2, #0
   33496:	4693      	mov	fp, r2
   33498:	3202      	adds	r2, #2
   3349a:	e7b1      	b.n	33400 <__aeabi_ddiv+0x7c>
   3349c:	4659      	mov	r1, fp
   3349e:	4301      	orrs	r1, r0
   334a0:	d01e      	beq.n	334e0 <__aeabi_ddiv+0x15c>
   334a2:	465b      	mov	r3, fp
   334a4:	2b00      	cmp	r3, #0
   334a6:	d100      	bne.n	334aa <__aeabi_ddiv+0x126>
   334a8:	e19e      	b.n	337e8 <__aeabi_ddiv+0x464>
   334aa:	4658      	mov	r0, fp
   334ac:	f001 f8a0 	bl	345f0 <__clzsi2>
   334b0:	0003      	movs	r3, r0
   334b2:	3b0b      	subs	r3, #11
   334b4:	2b1c      	cmp	r3, #28
   334b6:	dd00      	ble.n	334ba <__aeabi_ddiv+0x136>
   334b8:	e18f      	b.n	337da <__aeabi_ddiv+0x456>
   334ba:	0002      	movs	r2, r0
   334bc:	4659      	mov	r1, fp
   334be:	3a08      	subs	r2, #8
   334c0:	4091      	lsls	r1, r2
   334c2:	468b      	mov	fp, r1
   334c4:	211d      	movs	r1, #29
   334c6:	1acb      	subs	r3, r1, r3
   334c8:	4651      	mov	r1, sl
   334ca:	40d9      	lsrs	r1, r3
   334cc:	000b      	movs	r3, r1
   334ce:	4659      	mov	r1, fp
   334d0:	430b      	orrs	r3, r1
   334d2:	4651      	mov	r1, sl
   334d4:	469b      	mov	fp, r3
   334d6:	4091      	lsls	r1, r2
   334d8:	4b26      	ldr	r3, [pc, #152]	; (33574 <__aeabi_ddiv+0x1f0>)
   334da:	2200      	movs	r2, #0
   334dc:	1a1b      	subs	r3, r3, r0
   334de:	e78f      	b.n	33400 <__aeabi_ddiv+0x7c>
   334e0:	2300      	movs	r3, #0
   334e2:	2201      	movs	r2, #1
   334e4:	469b      	mov	fp, r3
   334e6:	e78b      	b.n	33400 <__aeabi_ddiv+0x7c>
   334e8:	4651      	mov	r1, sl
   334ea:	2203      	movs	r2, #3
   334ec:	e788      	b.n	33400 <__aeabi_ddiv+0x7c>
   334ee:	2300      	movs	r3, #0
   334f0:	4698      	mov	r8, r3
   334f2:	3301      	adds	r3, #1
   334f4:	2604      	movs	r6, #4
   334f6:	2400      	movs	r4, #0
   334f8:	9303      	str	r3, [sp, #12]
   334fa:	e767      	b.n	333cc <__aeabi_ddiv+0x48>
   334fc:	2303      	movs	r3, #3
   334fe:	46b1      	mov	r9, r6
   33500:	9303      	str	r3, [sp, #12]
   33502:	260c      	movs	r6, #12
   33504:	e762      	b.n	333cc <__aeabi_ddiv+0x48>
   33506:	2a03      	cmp	r2, #3
   33508:	d100      	bne.n	3350c <__aeabi_ddiv+0x188>
   3350a:	e25c      	b.n	339c6 <__aeabi_ddiv+0x642>
   3350c:	9b01      	ldr	r3, [sp, #4]
   3350e:	2a01      	cmp	r2, #1
   33510:	d000      	beq.n	33514 <__aeabi_ddiv+0x190>
   33512:	e1e4      	b.n	338de <__aeabi_ddiv+0x55a>
   33514:	4013      	ands	r3, r2
   33516:	469c      	mov	ip, r3
   33518:	2300      	movs	r3, #0
   3351a:	2400      	movs	r4, #0
   3351c:	2200      	movs	r2, #0
   3351e:	4698      	mov	r8, r3
   33520:	2100      	movs	r1, #0
   33522:	0312      	lsls	r2, r2, #12
   33524:	0b13      	lsrs	r3, r2, #12
   33526:	0d0a      	lsrs	r2, r1, #20
   33528:	0512      	lsls	r2, r2, #20
   3352a:	431a      	orrs	r2, r3
   3352c:	0523      	lsls	r3, r4, #20
   3352e:	4c12      	ldr	r4, [pc, #72]	; (33578 <__aeabi_ddiv+0x1f4>)
   33530:	4640      	mov	r0, r8
   33532:	4022      	ands	r2, r4
   33534:	4313      	orrs	r3, r2
   33536:	4662      	mov	r2, ip
   33538:	005b      	lsls	r3, r3, #1
   3353a:	07d2      	lsls	r2, r2, #31
   3353c:	085b      	lsrs	r3, r3, #1
   3353e:	4313      	orrs	r3, r2
   33540:	0019      	movs	r1, r3
   33542:	b007      	add	sp, #28
   33544:	bc3c      	pop	{r2, r3, r4, r5}
   33546:	4690      	mov	r8, r2
   33548:	4699      	mov	r9, r3
   3354a:	46a2      	mov	sl, r4
   3354c:	46ab      	mov	fp, r5
   3354e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33550:	2300      	movs	r3, #0
   33552:	2280      	movs	r2, #128	; 0x80
   33554:	469c      	mov	ip, r3
   33556:	0312      	lsls	r2, r2, #12
   33558:	4698      	mov	r8, r3
   3355a:	4c03      	ldr	r4, [pc, #12]	; (33568 <__aeabi_ddiv+0x1e4>)
   3355c:	e7e0      	b.n	33520 <__aeabi_ddiv+0x19c>
   3355e:	2300      	movs	r3, #0
   33560:	4c01      	ldr	r4, [pc, #4]	; (33568 <__aeabi_ddiv+0x1e4>)
   33562:	2200      	movs	r2, #0
   33564:	4698      	mov	r8, r3
   33566:	e7db      	b.n	33520 <__aeabi_ddiv+0x19c>
   33568:	000007ff 	.word	0x000007ff
   3356c:	fffffc01 	.word	0xfffffc01
   33570:	00039df4 	.word	0x00039df4
   33574:	fffffc0d 	.word	0xfffffc0d
   33578:	800fffff 	.word	0x800fffff
   3357c:	45d9      	cmp	r9, fp
   3357e:	d900      	bls.n	33582 <__aeabi_ddiv+0x1fe>
   33580:	e139      	b.n	337f6 <__aeabi_ddiv+0x472>
   33582:	d100      	bne.n	33586 <__aeabi_ddiv+0x202>
   33584:	e134      	b.n	337f0 <__aeabi_ddiv+0x46c>
   33586:	2300      	movs	r3, #0
   33588:	4646      	mov	r6, r8
   3358a:	464d      	mov	r5, r9
   3358c:	469a      	mov	sl, r3
   3358e:	3c01      	subs	r4, #1
   33590:	465b      	mov	r3, fp
   33592:	0e0a      	lsrs	r2, r1, #24
   33594:	021b      	lsls	r3, r3, #8
   33596:	431a      	orrs	r2, r3
   33598:	020b      	lsls	r3, r1, #8
   3359a:	0c17      	lsrs	r7, r2, #16
   3359c:	9303      	str	r3, [sp, #12]
   3359e:	0413      	lsls	r3, r2, #16
   335a0:	0c1b      	lsrs	r3, r3, #16
   335a2:	0039      	movs	r1, r7
   335a4:	0028      	movs	r0, r5
   335a6:	4690      	mov	r8, r2
   335a8:	9301      	str	r3, [sp, #4]
   335aa:	f7ff f8ab 	bl	32704 <__udivsi3>
   335ae:	0002      	movs	r2, r0
   335b0:	9b01      	ldr	r3, [sp, #4]
   335b2:	4683      	mov	fp, r0
   335b4:	435a      	muls	r2, r3
   335b6:	0028      	movs	r0, r5
   335b8:	0039      	movs	r1, r7
   335ba:	4691      	mov	r9, r2
   335bc:	f7ff f928 	bl	32810 <__aeabi_uidivmod>
   335c0:	0c35      	lsrs	r5, r6, #16
   335c2:	0409      	lsls	r1, r1, #16
   335c4:	430d      	orrs	r5, r1
   335c6:	45a9      	cmp	r9, r5
   335c8:	d90d      	bls.n	335e6 <__aeabi_ddiv+0x262>
   335ca:	465b      	mov	r3, fp
   335cc:	4445      	add	r5, r8
   335ce:	3b01      	subs	r3, #1
   335d0:	45a8      	cmp	r8, r5
   335d2:	d900      	bls.n	335d6 <__aeabi_ddiv+0x252>
   335d4:	e13a      	b.n	3384c <__aeabi_ddiv+0x4c8>
   335d6:	45a9      	cmp	r9, r5
   335d8:	d800      	bhi.n	335dc <__aeabi_ddiv+0x258>
   335da:	e137      	b.n	3384c <__aeabi_ddiv+0x4c8>
   335dc:	2302      	movs	r3, #2
   335de:	425b      	negs	r3, r3
   335e0:	469c      	mov	ip, r3
   335e2:	4445      	add	r5, r8
   335e4:	44e3      	add	fp, ip
   335e6:	464b      	mov	r3, r9
   335e8:	1aeb      	subs	r3, r5, r3
   335ea:	0039      	movs	r1, r7
   335ec:	0018      	movs	r0, r3
   335ee:	9304      	str	r3, [sp, #16]
   335f0:	f7ff f888 	bl	32704 <__udivsi3>
   335f4:	9b01      	ldr	r3, [sp, #4]
   335f6:	0005      	movs	r5, r0
   335f8:	4343      	muls	r3, r0
   335fa:	0039      	movs	r1, r7
   335fc:	9804      	ldr	r0, [sp, #16]
   335fe:	4699      	mov	r9, r3
   33600:	f7ff f906 	bl	32810 <__aeabi_uidivmod>
   33604:	0433      	lsls	r3, r6, #16
   33606:	0409      	lsls	r1, r1, #16
   33608:	0c1b      	lsrs	r3, r3, #16
   3360a:	430b      	orrs	r3, r1
   3360c:	4599      	cmp	r9, r3
   3360e:	d909      	bls.n	33624 <__aeabi_ddiv+0x2a0>
   33610:	4443      	add	r3, r8
   33612:	1e6a      	subs	r2, r5, #1
   33614:	4598      	cmp	r8, r3
   33616:	d900      	bls.n	3361a <__aeabi_ddiv+0x296>
   33618:	e11a      	b.n	33850 <__aeabi_ddiv+0x4cc>
   3361a:	4599      	cmp	r9, r3
   3361c:	d800      	bhi.n	33620 <__aeabi_ddiv+0x29c>
   3361e:	e117      	b.n	33850 <__aeabi_ddiv+0x4cc>
   33620:	3d02      	subs	r5, #2
   33622:	4443      	add	r3, r8
   33624:	464a      	mov	r2, r9
   33626:	1a9b      	subs	r3, r3, r2
   33628:	465a      	mov	r2, fp
   3362a:	0412      	lsls	r2, r2, #16
   3362c:	432a      	orrs	r2, r5
   3362e:	9903      	ldr	r1, [sp, #12]
   33630:	4693      	mov	fp, r2
   33632:	0c10      	lsrs	r0, r2, #16
   33634:	0c0a      	lsrs	r2, r1, #16
   33636:	4691      	mov	r9, r2
   33638:	0409      	lsls	r1, r1, #16
   3363a:	465a      	mov	r2, fp
   3363c:	0c09      	lsrs	r1, r1, #16
   3363e:	464e      	mov	r6, r9
   33640:	000d      	movs	r5, r1
   33642:	0412      	lsls	r2, r2, #16
   33644:	0c12      	lsrs	r2, r2, #16
   33646:	4345      	muls	r5, r0
   33648:	9105      	str	r1, [sp, #20]
   3364a:	4351      	muls	r1, r2
   3364c:	4372      	muls	r2, r6
   3364e:	4370      	muls	r0, r6
   33650:	1952      	adds	r2, r2, r5
   33652:	0c0e      	lsrs	r6, r1, #16
   33654:	18b2      	adds	r2, r6, r2
   33656:	4295      	cmp	r5, r2
   33658:	d903      	bls.n	33662 <__aeabi_ddiv+0x2de>
   3365a:	2580      	movs	r5, #128	; 0x80
   3365c:	026d      	lsls	r5, r5, #9
   3365e:	46ac      	mov	ip, r5
   33660:	4460      	add	r0, ip
   33662:	0c15      	lsrs	r5, r2, #16
   33664:	0409      	lsls	r1, r1, #16
   33666:	0412      	lsls	r2, r2, #16
   33668:	0c09      	lsrs	r1, r1, #16
   3366a:	1828      	adds	r0, r5, r0
   3366c:	1852      	adds	r2, r2, r1
   3366e:	4283      	cmp	r3, r0
   33670:	d200      	bcs.n	33674 <__aeabi_ddiv+0x2f0>
   33672:	e0ce      	b.n	33812 <__aeabi_ddiv+0x48e>
   33674:	d100      	bne.n	33678 <__aeabi_ddiv+0x2f4>
   33676:	e0c8      	b.n	3380a <__aeabi_ddiv+0x486>
   33678:	1a1d      	subs	r5, r3, r0
   3367a:	4653      	mov	r3, sl
   3367c:	1a9e      	subs	r6, r3, r2
   3367e:	45b2      	cmp	sl, r6
   33680:	4192      	sbcs	r2, r2
   33682:	4252      	negs	r2, r2
   33684:	1aab      	subs	r3, r5, r2
   33686:	469a      	mov	sl, r3
   33688:	4598      	cmp	r8, r3
   3368a:	d100      	bne.n	3368e <__aeabi_ddiv+0x30a>
   3368c:	e117      	b.n	338be <__aeabi_ddiv+0x53a>
   3368e:	0039      	movs	r1, r7
   33690:	0018      	movs	r0, r3
   33692:	f7ff f837 	bl	32704 <__udivsi3>
   33696:	9b01      	ldr	r3, [sp, #4]
   33698:	0005      	movs	r5, r0
   3369a:	4343      	muls	r3, r0
   3369c:	0039      	movs	r1, r7
   3369e:	4650      	mov	r0, sl
   336a0:	9304      	str	r3, [sp, #16]
   336a2:	f7ff f8b5 	bl	32810 <__aeabi_uidivmod>
   336a6:	9804      	ldr	r0, [sp, #16]
   336a8:	040b      	lsls	r3, r1, #16
   336aa:	0c31      	lsrs	r1, r6, #16
   336ac:	4319      	orrs	r1, r3
   336ae:	4288      	cmp	r0, r1
   336b0:	d909      	bls.n	336c6 <__aeabi_ddiv+0x342>
   336b2:	4441      	add	r1, r8
   336b4:	1e6b      	subs	r3, r5, #1
   336b6:	4588      	cmp	r8, r1
   336b8:	d900      	bls.n	336bc <__aeabi_ddiv+0x338>
   336ba:	e107      	b.n	338cc <__aeabi_ddiv+0x548>
   336bc:	4288      	cmp	r0, r1
   336be:	d800      	bhi.n	336c2 <__aeabi_ddiv+0x33e>
   336c0:	e104      	b.n	338cc <__aeabi_ddiv+0x548>
   336c2:	3d02      	subs	r5, #2
   336c4:	4441      	add	r1, r8
   336c6:	9b04      	ldr	r3, [sp, #16]
   336c8:	1acb      	subs	r3, r1, r3
   336ca:	0018      	movs	r0, r3
   336cc:	0039      	movs	r1, r7
   336ce:	9304      	str	r3, [sp, #16]
   336d0:	f7ff f818 	bl	32704 <__udivsi3>
   336d4:	9b01      	ldr	r3, [sp, #4]
   336d6:	4682      	mov	sl, r0
   336d8:	4343      	muls	r3, r0
   336da:	0039      	movs	r1, r7
   336dc:	9804      	ldr	r0, [sp, #16]
   336de:	9301      	str	r3, [sp, #4]
   336e0:	f7ff f896 	bl	32810 <__aeabi_uidivmod>
   336e4:	9801      	ldr	r0, [sp, #4]
   336e6:	040b      	lsls	r3, r1, #16
   336e8:	0431      	lsls	r1, r6, #16
   336ea:	0c09      	lsrs	r1, r1, #16
   336ec:	4319      	orrs	r1, r3
   336ee:	4288      	cmp	r0, r1
   336f0:	d90d      	bls.n	3370e <__aeabi_ddiv+0x38a>
   336f2:	4653      	mov	r3, sl
   336f4:	4441      	add	r1, r8
   336f6:	3b01      	subs	r3, #1
   336f8:	4588      	cmp	r8, r1
   336fa:	d900      	bls.n	336fe <__aeabi_ddiv+0x37a>
   336fc:	e0e8      	b.n	338d0 <__aeabi_ddiv+0x54c>
   336fe:	4288      	cmp	r0, r1
   33700:	d800      	bhi.n	33704 <__aeabi_ddiv+0x380>
   33702:	e0e5      	b.n	338d0 <__aeabi_ddiv+0x54c>
   33704:	2302      	movs	r3, #2
   33706:	425b      	negs	r3, r3
   33708:	469c      	mov	ip, r3
   3370a:	4441      	add	r1, r8
   3370c:	44e2      	add	sl, ip
   3370e:	9b01      	ldr	r3, [sp, #4]
   33710:	042d      	lsls	r5, r5, #16
   33712:	1ace      	subs	r6, r1, r3
   33714:	4651      	mov	r1, sl
   33716:	4329      	orrs	r1, r5
   33718:	9d05      	ldr	r5, [sp, #20]
   3371a:	464f      	mov	r7, r9
   3371c:	002a      	movs	r2, r5
   3371e:	040b      	lsls	r3, r1, #16
   33720:	0c08      	lsrs	r0, r1, #16
   33722:	0c1b      	lsrs	r3, r3, #16
   33724:	435a      	muls	r2, r3
   33726:	4345      	muls	r5, r0
   33728:	437b      	muls	r3, r7
   3372a:	4378      	muls	r0, r7
   3372c:	195b      	adds	r3, r3, r5
   3372e:	0c17      	lsrs	r7, r2, #16
   33730:	18fb      	adds	r3, r7, r3
   33732:	429d      	cmp	r5, r3
   33734:	d903      	bls.n	3373e <__aeabi_ddiv+0x3ba>
   33736:	2580      	movs	r5, #128	; 0x80
   33738:	026d      	lsls	r5, r5, #9
   3373a:	46ac      	mov	ip, r5
   3373c:	4460      	add	r0, ip
   3373e:	0c1d      	lsrs	r5, r3, #16
   33740:	0412      	lsls	r2, r2, #16
   33742:	041b      	lsls	r3, r3, #16
   33744:	0c12      	lsrs	r2, r2, #16
   33746:	1828      	adds	r0, r5, r0
   33748:	189b      	adds	r3, r3, r2
   3374a:	4286      	cmp	r6, r0
   3374c:	d200      	bcs.n	33750 <__aeabi_ddiv+0x3cc>
   3374e:	e093      	b.n	33878 <__aeabi_ddiv+0x4f4>
   33750:	d100      	bne.n	33754 <__aeabi_ddiv+0x3d0>
   33752:	e08e      	b.n	33872 <__aeabi_ddiv+0x4ee>
   33754:	2301      	movs	r3, #1
   33756:	4319      	orrs	r1, r3
   33758:	4ba0      	ldr	r3, [pc, #640]	; (339dc <__aeabi_ddiv+0x658>)
   3375a:	18e3      	adds	r3, r4, r3
   3375c:	2b00      	cmp	r3, #0
   3375e:	dc00      	bgt.n	33762 <__aeabi_ddiv+0x3de>
   33760:	e099      	b.n	33896 <__aeabi_ddiv+0x512>
   33762:	074a      	lsls	r2, r1, #29
   33764:	d000      	beq.n	33768 <__aeabi_ddiv+0x3e4>
   33766:	e09e      	b.n	338a6 <__aeabi_ddiv+0x522>
   33768:	465a      	mov	r2, fp
   3376a:	01d2      	lsls	r2, r2, #7
   3376c:	d506      	bpl.n	3377c <__aeabi_ddiv+0x3f8>
   3376e:	465a      	mov	r2, fp
   33770:	4b9b      	ldr	r3, [pc, #620]	; (339e0 <__aeabi_ddiv+0x65c>)
   33772:	401a      	ands	r2, r3
   33774:	2380      	movs	r3, #128	; 0x80
   33776:	4693      	mov	fp, r2
   33778:	00db      	lsls	r3, r3, #3
   3377a:	18e3      	adds	r3, r4, r3
   3377c:	4a99      	ldr	r2, [pc, #612]	; (339e4 <__aeabi_ddiv+0x660>)
   3377e:	4293      	cmp	r3, r2
   33780:	dd68      	ble.n	33854 <__aeabi_ddiv+0x4d0>
   33782:	2301      	movs	r3, #1
   33784:	9a02      	ldr	r2, [sp, #8]
   33786:	4c98      	ldr	r4, [pc, #608]	; (339e8 <__aeabi_ddiv+0x664>)
   33788:	401a      	ands	r2, r3
   3378a:	2300      	movs	r3, #0
   3378c:	4694      	mov	ip, r2
   3378e:	4698      	mov	r8, r3
   33790:	2200      	movs	r2, #0
   33792:	e6c5      	b.n	33520 <__aeabi_ddiv+0x19c>
   33794:	2280      	movs	r2, #128	; 0x80
   33796:	464b      	mov	r3, r9
   33798:	0312      	lsls	r2, r2, #12
   3379a:	4213      	tst	r3, r2
   3379c:	d00a      	beq.n	337b4 <__aeabi_ddiv+0x430>
   3379e:	465b      	mov	r3, fp
   337a0:	4213      	tst	r3, r2
   337a2:	d106      	bne.n	337b2 <__aeabi_ddiv+0x42e>
   337a4:	431a      	orrs	r2, r3
   337a6:	0312      	lsls	r2, r2, #12
   337a8:	0b12      	lsrs	r2, r2, #12
   337aa:	46ac      	mov	ip, r5
   337ac:	4688      	mov	r8, r1
   337ae:	4c8e      	ldr	r4, [pc, #568]	; (339e8 <__aeabi_ddiv+0x664>)
   337b0:	e6b6      	b.n	33520 <__aeabi_ddiv+0x19c>
   337b2:	464b      	mov	r3, r9
   337b4:	431a      	orrs	r2, r3
   337b6:	0312      	lsls	r2, r2, #12
   337b8:	0b12      	lsrs	r2, r2, #12
   337ba:	46bc      	mov	ip, r7
   337bc:	4c8a      	ldr	r4, [pc, #552]	; (339e8 <__aeabi_ddiv+0x664>)
   337be:	e6af      	b.n	33520 <__aeabi_ddiv+0x19c>
   337c0:	0003      	movs	r3, r0
   337c2:	465a      	mov	r2, fp
   337c4:	3b28      	subs	r3, #40	; 0x28
   337c6:	409a      	lsls	r2, r3
   337c8:	2300      	movs	r3, #0
   337ca:	4691      	mov	r9, r2
   337cc:	4698      	mov	r8, r3
   337ce:	e657      	b.n	33480 <__aeabi_ddiv+0xfc>
   337d0:	4658      	mov	r0, fp
   337d2:	f000 ff0d 	bl	345f0 <__clzsi2>
   337d6:	3020      	adds	r0, #32
   337d8:	e640      	b.n	3345c <__aeabi_ddiv+0xd8>
   337da:	0003      	movs	r3, r0
   337dc:	4652      	mov	r2, sl
   337de:	3b28      	subs	r3, #40	; 0x28
   337e0:	409a      	lsls	r2, r3
   337e2:	2100      	movs	r1, #0
   337e4:	4693      	mov	fp, r2
   337e6:	e677      	b.n	334d8 <__aeabi_ddiv+0x154>
   337e8:	f000 ff02 	bl	345f0 <__clzsi2>
   337ec:	3020      	adds	r0, #32
   337ee:	e65f      	b.n	334b0 <__aeabi_ddiv+0x12c>
   337f0:	4588      	cmp	r8, r1
   337f2:	d200      	bcs.n	337f6 <__aeabi_ddiv+0x472>
   337f4:	e6c7      	b.n	33586 <__aeabi_ddiv+0x202>
   337f6:	464b      	mov	r3, r9
   337f8:	07de      	lsls	r6, r3, #31
   337fa:	085d      	lsrs	r5, r3, #1
   337fc:	4643      	mov	r3, r8
   337fe:	085b      	lsrs	r3, r3, #1
   33800:	431e      	orrs	r6, r3
   33802:	4643      	mov	r3, r8
   33804:	07db      	lsls	r3, r3, #31
   33806:	469a      	mov	sl, r3
   33808:	e6c2      	b.n	33590 <__aeabi_ddiv+0x20c>
   3380a:	2500      	movs	r5, #0
   3380c:	4592      	cmp	sl, r2
   3380e:	d300      	bcc.n	33812 <__aeabi_ddiv+0x48e>
   33810:	e733      	b.n	3367a <__aeabi_ddiv+0x2f6>
   33812:	9e03      	ldr	r6, [sp, #12]
   33814:	4659      	mov	r1, fp
   33816:	46b4      	mov	ip, r6
   33818:	44e2      	add	sl, ip
   3381a:	45b2      	cmp	sl, r6
   3381c:	41ad      	sbcs	r5, r5
   3381e:	426d      	negs	r5, r5
   33820:	4445      	add	r5, r8
   33822:	18eb      	adds	r3, r5, r3
   33824:	3901      	subs	r1, #1
   33826:	4598      	cmp	r8, r3
   33828:	d207      	bcs.n	3383a <__aeabi_ddiv+0x4b6>
   3382a:	4298      	cmp	r0, r3
   3382c:	d900      	bls.n	33830 <__aeabi_ddiv+0x4ac>
   3382e:	e07f      	b.n	33930 <__aeabi_ddiv+0x5ac>
   33830:	d100      	bne.n	33834 <__aeabi_ddiv+0x4b0>
   33832:	e0bc      	b.n	339ae <__aeabi_ddiv+0x62a>
   33834:	1a1d      	subs	r5, r3, r0
   33836:	468b      	mov	fp, r1
   33838:	e71f      	b.n	3367a <__aeabi_ddiv+0x2f6>
   3383a:	4598      	cmp	r8, r3
   3383c:	d1fa      	bne.n	33834 <__aeabi_ddiv+0x4b0>
   3383e:	9d03      	ldr	r5, [sp, #12]
   33840:	4555      	cmp	r5, sl
   33842:	d9f2      	bls.n	3382a <__aeabi_ddiv+0x4a6>
   33844:	4643      	mov	r3, r8
   33846:	468b      	mov	fp, r1
   33848:	1a1d      	subs	r5, r3, r0
   3384a:	e716      	b.n	3367a <__aeabi_ddiv+0x2f6>
   3384c:	469b      	mov	fp, r3
   3384e:	e6ca      	b.n	335e6 <__aeabi_ddiv+0x262>
   33850:	0015      	movs	r5, r2
   33852:	e6e7      	b.n	33624 <__aeabi_ddiv+0x2a0>
   33854:	465a      	mov	r2, fp
   33856:	08c9      	lsrs	r1, r1, #3
   33858:	0752      	lsls	r2, r2, #29
   3385a:	430a      	orrs	r2, r1
   3385c:	055b      	lsls	r3, r3, #21
   3385e:	4690      	mov	r8, r2
   33860:	0d5c      	lsrs	r4, r3, #21
   33862:	465a      	mov	r2, fp
   33864:	2301      	movs	r3, #1
   33866:	9902      	ldr	r1, [sp, #8]
   33868:	0252      	lsls	r2, r2, #9
   3386a:	4019      	ands	r1, r3
   3386c:	0b12      	lsrs	r2, r2, #12
   3386e:	468c      	mov	ip, r1
   33870:	e656      	b.n	33520 <__aeabi_ddiv+0x19c>
   33872:	2b00      	cmp	r3, #0
   33874:	d100      	bne.n	33878 <__aeabi_ddiv+0x4f4>
   33876:	e76f      	b.n	33758 <__aeabi_ddiv+0x3d4>
   33878:	4446      	add	r6, r8
   3387a:	1e4a      	subs	r2, r1, #1
   3387c:	45b0      	cmp	r8, r6
   3387e:	d929      	bls.n	338d4 <__aeabi_ddiv+0x550>
   33880:	0011      	movs	r1, r2
   33882:	4286      	cmp	r6, r0
   33884:	d000      	beq.n	33888 <__aeabi_ddiv+0x504>
   33886:	e765      	b.n	33754 <__aeabi_ddiv+0x3d0>
   33888:	9a03      	ldr	r2, [sp, #12]
   3388a:	4293      	cmp	r3, r2
   3388c:	d000      	beq.n	33890 <__aeabi_ddiv+0x50c>
   3388e:	e761      	b.n	33754 <__aeabi_ddiv+0x3d0>
   33890:	e762      	b.n	33758 <__aeabi_ddiv+0x3d4>
   33892:	2101      	movs	r1, #1
   33894:	4249      	negs	r1, r1
   33896:	2001      	movs	r0, #1
   33898:	1ac2      	subs	r2, r0, r3
   3389a:	2a38      	cmp	r2, #56	; 0x38
   3389c:	dd21      	ble.n	338e2 <__aeabi_ddiv+0x55e>
   3389e:	9b02      	ldr	r3, [sp, #8]
   338a0:	4003      	ands	r3, r0
   338a2:	469c      	mov	ip, r3
   338a4:	e638      	b.n	33518 <__aeabi_ddiv+0x194>
   338a6:	220f      	movs	r2, #15
   338a8:	400a      	ands	r2, r1
   338aa:	2a04      	cmp	r2, #4
   338ac:	d100      	bne.n	338b0 <__aeabi_ddiv+0x52c>
   338ae:	e75b      	b.n	33768 <__aeabi_ddiv+0x3e4>
   338b0:	000a      	movs	r2, r1
   338b2:	1d11      	adds	r1, r2, #4
   338b4:	4291      	cmp	r1, r2
   338b6:	4192      	sbcs	r2, r2
   338b8:	4252      	negs	r2, r2
   338ba:	4493      	add	fp, r2
   338bc:	e754      	b.n	33768 <__aeabi_ddiv+0x3e4>
   338be:	4b47      	ldr	r3, [pc, #284]	; (339dc <__aeabi_ddiv+0x658>)
   338c0:	18e3      	adds	r3, r4, r3
   338c2:	2b00      	cmp	r3, #0
   338c4:	dde5      	ble.n	33892 <__aeabi_ddiv+0x50e>
   338c6:	2201      	movs	r2, #1
   338c8:	4252      	negs	r2, r2
   338ca:	e7f2      	b.n	338b2 <__aeabi_ddiv+0x52e>
   338cc:	001d      	movs	r5, r3
   338ce:	e6fa      	b.n	336c6 <__aeabi_ddiv+0x342>
   338d0:	469a      	mov	sl, r3
   338d2:	e71c      	b.n	3370e <__aeabi_ddiv+0x38a>
   338d4:	42b0      	cmp	r0, r6
   338d6:	d839      	bhi.n	3394c <__aeabi_ddiv+0x5c8>
   338d8:	d06e      	beq.n	339b8 <__aeabi_ddiv+0x634>
   338da:	0011      	movs	r1, r2
   338dc:	e73a      	b.n	33754 <__aeabi_ddiv+0x3d0>
   338de:	9302      	str	r3, [sp, #8]
   338e0:	e73a      	b.n	33758 <__aeabi_ddiv+0x3d4>
   338e2:	2a1f      	cmp	r2, #31
   338e4:	dc3c      	bgt.n	33960 <__aeabi_ddiv+0x5dc>
   338e6:	2320      	movs	r3, #32
   338e8:	1a9b      	subs	r3, r3, r2
   338ea:	000c      	movs	r4, r1
   338ec:	4658      	mov	r0, fp
   338ee:	4099      	lsls	r1, r3
   338f0:	4098      	lsls	r0, r3
   338f2:	1e4b      	subs	r3, r1, #1
   338f4:	4199      	sbcs	r1, r3
   338f6:	465b      	mov	r3, fp
   338f8:	40d4      	lsrs	r4, r2
   338fa:	40d3      	lsrs	r3, r2
   338fc:	4320      	orrs	r0, r4
   338fe:	4308      	orrs	r0, r1
   33900:	001a      	movs	r2, r3
   33902:	0743      	lsls	r3, r0, #29
   33904:	d009      	beq.n	3391a <__aeabi_ddiv+0x596>
   33906:	230f      	movs	r3, #15
   33908:	4003      	ands	r3, r0
   3390a:	2b04      	cmp	r3, #4
   3390c:	d005      	beq.n	3391a <__aeabi_ddiv+0x596>
   3390e:	0001      	movs	r1, r0
   33910:	1d08      	adds	r0, r1, #4
   33912:	4288      	cmp	r0, r1
   33914:	419b      	sbcs	r3, r3
   33916:	425b      	negs	r3, r3
   33918:	18d2      	adds	r2, r2, r3
   3391a:	0213      	lsls	r3, r2, #8
   3391c:	d53a      	bpl.n	33994 <__aeabi_ddiv+0x610>
   3391e:	2301      	movs	r3, #1
   33920:	9a02      	ldr	r2, [sp, #8]
   33922:	2401      	movs	r4, #1
   33924:	401a      	ands	r2, r3
   33926:	2300      	movs	r3, #0
   33928:	4694      	mov	ip, r2
   3392a:	4698      	mov	r8, r3
   3392c:	2200      	movs	r2, #0
   3392e:	e5f7      	b.n	33520 <__aeabi_ddiv+0x19c>
   33930:	2102      	movs	r1, #2
   33932:	4249      	negs	r1, r1
   33934:	468c      	mov	ip, r1
   33936:	9d03      	ldr	r5, [sp, #12]
   33938:	44e3      	add	fp, ip
   3393a:	46ac      	mov	ip, r5
   3393c:	44e2      	add	sl, ip
   3393e:	45aa      	cmp	sl, r5
   33940:	41ad      	sbcs	r5, r5
   33942:	426d      	negs	r5, r5
   33944:	4445      	add	r5, r8
   33946:	18ed      	adds	r5, r5, r3
   33948:	1a2d      	subs	r5, r5, r0
   3394a:	e696      	b.n	3367a <__aeabi_ddiv+0x2f6>
   3394c:	1e8a      	subs	r2, r1, #2
   3394e:	9903      	ldr	r1, [sp, #12]
   33950:	004d      	lsls	r5, r1, #1
   33952:	428d      	cmp	r5, r1
   33954:	4189      	sbcs	r1, r1
   33956:	4249      	negs	r1, r1
   33958:	4441      	add	r1, r8
   3395a:	1876      	adds	r6, r6, r1
   3395c:	9503      	str	r5, [sp, #12]
   3395e:	e78f      	b.n	33880 <__aeabi_ddiv+0x4fc>
   33960:	201f      	movs	r0, #31
   33962:	4240      	negs	r0, r0
   33964:	1ac3      	subs	r3, r0, r3
   33966:	4658      	mov	r0, fp
   33968:	40d8      	lsrs	r0, r3
   3396a:	0003      	movs	r3, r0
   3396c:	2a20      	cmp	r2, #32
   3396e:	d028      	beq.n	339c2 <__aeabi_ddiv+0x63e>
   33970:	2040      	movs	r0, #64	; 0x40
   33972:	465d      	mov	r5, fp
   33974:	1a82      	subs	r2, r0, r2
   33976:	4095      	lsls	r5, r2
   33978:	4329      	orrs	r1, r5
   3397a:	1e4a      	subs	r2, r1, #1
   3397c:	4191      	sbcs	r1, r2
   3397e:	4319      	orrs	r1, r3
   33980:	2307      	movs	r3, #7
   33982:	2200      	movs	r2, #0
   33984:	400b      	ands	r3, r1
   33986:	d009      	beq.n	3399c <__aeabi_ddiv+0x618>
   33988:	230f      	movs	r3, #15
   3398a:	2200      	movs	r2, #0
   3398c:	400b      	ands	r3, r1
   3398e:	0008      	movs	r0, r1
   33990:	2b04      	cmp	r3, #4
   33992:	d1bd      	bne.n	33910 <__aeabi_ddiv+0x58c>
   33994:	0001      	movs	r1, r0
   33996:	0753      	lsls	r3, r2, #29
   33998:	0252      	lsls	r2, r2, #9
   3399a:	0b12      	lsrs	r2, r2, #12
   3399c:	08c9      	lsrs	r1, r1, #3
   3399e:	4319      	orrs	r1, r3
   339a0:	2301      	movs	r3, #1
   339a2:	4688      	mov	r8, r1
   339a4:	9902      	ldr	r1, [sp, #8]
   339a6:	2400      	movs	r4, #0
   339a8:	4019      	ands	r1, r3
   339aa:	468c      	mov	ip, r1
   339ac:	e5b8      	b.n	33520 <__aeabi_ddiv+0x19c>
   339ae:	4552      	cmp	r2, sl
   339b0:	d8be      	bhi.n	33930 <__aeabi_ddiv+0x5ac>
   339b2:	468b      	mov	fp, r1
   339b4:	2500      	movs	r5, #0
   339b6:	e660      	b.n	3367a <__aeabi_ddiv+0x2f6>
   339b8:	9d03      	ldr	r5, [sp, #12]
   339ba:	429d      	cmp	r5, r3
   339bc:	d3c6      	bcc.n	3394c <__aeabi_ddiv+0x5c8>
   339be:	0011      	movs	r1, r2
   339c0:	e762      	b.n	33888 <__aeabi_ddiv+0x504>
   339c2:	2500      	movs	r5, #0
   339c4:	e7d8      	b.n	33978 <__aeabi_ddiv+0x5f4>
   339c6:	2280      	movs	r2, #128	; 0x80
   339c8:	465b      	mov	r3, fp
   339ca:	0312      	lsls	r2, r2, #12
   339cc:	431a      	orrs	r2, r3
   339ce:	9b01      	ldr	r3, [sp, #4]
   339d0:	0312      	lsls	r2, r2, #12
   339d2:	0b12      	lsrs	r2, r2, #12
   339d4:	469c      	mov	ip, r3
   339d6:	4688      	mov	r8, r1
   339d8:	4c03      	ldr	r4, [pc, #12]	; (339e8 <__aeabi_ddiv+0x664>)
   339da:	e5a1      	b.n	33520 <__aeabi_ddiv+0x19c>
   339dc:	000003ff 	.word	0x000003ff
   339e0:	feffffff 	.word	0xfeffffff
   339e4:	000007fe 	.word	0x000007fe
   339e8:	000007ff 	.word	0x000007ff

000339ec <__aeabi_dmul>:
   339ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   339ee:	4657      	mov	r7, sl
   339f0:	4645      	mov	r5, r8
   339f2:	46de      	mov	lr, fp
   339f4:	464e      	mov	r6, r9
   339f6:	b5e0      	push	{r5, r6, r7, lr}
   339f8:	030c      	lsls	r4, r1, #12
   339fa:	4698      	mov	r8, r3
   339fc:	004e      	lsls	r6, r1, #1
   339fe:	0b23      	lsrs	r3, r4, #12
   33a00:	b087      	sub	sp, #28
   33a02:	0007      	movs	r7, r0
   33a04:	4692      	mov	sl, r2
   33a06:	469b      	mov	fp, r3
   33a08:	0d76      	lsrs	r6, r6, #21
   33a0a:	0fcd      	lsrs	r5, r1, #31
   33a0c:	2e00      	cmp	r6, #0
   33a0e:	d06b      	beq.n	33ae8 <__aeabi_dmul+0xfc>
   33a10:	4b6d      	ldr	r3, [pc, #436]	; (33bc8 <__aeabi_dmul+0x1dc>)
   33a12:	429e      	cmp	r6, r3
   33a14:	d035      	beq.n	33a82 <__aeabi_dmul+0x96>
   33a16:	2480      	movs	r4, #128	; 0x80
   33a18:	465b      	mov	r3, fp
   33a1a:	0f42      	lsrs	r2, r0, #29
   33a1c:	0424      	lsls	r4, r4, #16
   33a1e:	00db      	lsls	r3, r3, #3
   33a20:	4314      	orrs	r4, r2
   33a22:	431c      	orrs	r4, r3
   33a24:	00c3      	lsls	r3, r0, #3
   33a26:	4699      	mov	r9, r3
   33a28:	4b68      	ldr	r3, [pc, #416]	; (33bcc <__aeabi_dmul+0x1e0>)
   33a2a:	46a3      	mov	fp, r4
   33a2c:	469c      	mov	ip, r3
   33a2e:	2300      	movs	r3, #0
   33a30:	2700      	movs	r7, #0
   33a32:	4466      	add	r6, ip
   33a34:	9302      	str	r3, [sp, #8]
   33a36:	4643      	mov	r3, r8
   33a38:	031c      	lsls	r4, r3, #12
   33a3a:	005a      	lsls	r2, r3, #1
   33a3c:	0fdb      	lsrs	r3, r3, #31
   33a3e:	4650      	mov	r0, sl
   33a40:	0b24      	lsrs	r4, r4, #12
   33a42:	0d52      	lsrs	r2, r2, #21
   33a44:	4698      	mov	r8, r3
   33a46:	d100      	bne.n	33a4a <__aeabi_dmul+0x5e>
   33a48:	e076      	b.n	33b38 <__aeabi_dmul+0x14c>
   33a4a:	4b5f      	ldr	r3, [pc, #380]	; (33bc8 <__aeabi_dmul+0x1dc>)
   33a4c:	429a      	cmp	r2, r3
   33a4e:	d06d      	beq.n	33b2c <__aeabi_dmul+0x140>
   33a50:	2380      	movs	r3, #128	; 0x80
   33a52:	0f41      	lsrs	r1, r0, #29
   33a54:	041b      	lsls	r3, r3, #16
   33a56:	430b      	orrs	r3, r1
   33a58:	495c      	ldr	r1, [pc, #368]	; (33bcc <__aeabi_dmul+0x1e0>)
   33a5a:	00e4      	lsls	r4, r4, #3
   33a5c:	468c      	mov	ip, r1
   33a5e:	431c      	orrs	r4, r3
   33a60:	00c3      	lsls	r3, r0, #3
   33a62:	2000      	movs	r0, #0
   33a64:	4462      	add	r2, ip
   33a66:	4641      	mov	r1, r8
   33a68:	18b6      	adds	r6, r6, r2
   33a6a:	4069      	eors	r1, r5
   33a6c:	1c72      	adds	r2, r6, #1
   33a6e:	9101      	str	r1, [sp, #4]
   33a70:	4694      	mov	ip, r2
   33a72:	4307      	orrs	r7, r0
   33a74:	2f0f      	cmp	r7, #15
   33a76:	d900      	bls.n	33a7a <__aeabi_dmul+0x8e>
   33a78:	e0b0      	b.n	33bdc <__aeabi_dmul+0x1f0>
   33a7a:	4a55      	ldr	r2, [pc, #340]	; (33bd0 <__aeabi_dmul+0x1e4>)
   33a7c:	00bf      	lsls	r7, r7, #2
   33a7e:	59d2      	ldr	r2, [r2, r7]
   33a80:	4697      	mov	pc, r2
   33a82:	465b      	mov	r3, fp
   33a84:	4303      	orrs	r3, r0
   33a86:	4699      	mov	r9, r3
   33a88:	d000      	beq.n	33a8c <__aeabi_dmul+0xa0>
   33a8a:	e087      	b.n	33b9c <__aeabi_dmul+0x1b0>
   33a8c:	2300      	movs	r3, #0
   33a8e:	469b      	mov	fp, r3
   33a90:	3302      	adds	r3, #2
   33a92:	2708      	movs	r7, #8
   33a94:	9302      	str	r3, [sp, #8]
   33a96:	e7ce      	b.n	33a36 <__aeabi_dmul+0x4a>
   33a98:	4642      	mov	r2, r8
   33a9a:	9201      	str	r2, [sp, #4]
   33a9c:	2802      	cmp	r0, #2
   33a9e:	d067      	beq.n	33b70 <__aeabi_dmul+0x184>
   33aa0:	2803      	cmp	r0, #3
   33aa2:	d100      	bne.n	33aa6 <__aeabi_dmul+0xba>
   33aa4:	e20e      	b.n	33ec4 <__aeabi_dmul+0x4d8>
   33aa6:	2801      	cmp	r0, #1
   33aa8:	d000      	beq.n	33aac <__aeabi_dmul+0xc0>
   33aaa:	e162      	b.n	33d72 <__aeabi_dmul+0x386>
   33aac:	2300      	movs	r3, #0
   33aae:	2400      	movs	r4, #0
   33ab0:	2200      	movs	r2, #0
   33ab2:	4699      	mov	r9, r3
   33ab4:	9901      	ldr	r1, [sp, #4]
   33ab6:	4001      	ands	r1, r0
   33ab8:	b2cd      	uxtb	r5, r1
   33aba:	2100      	movs	r1, #0
   33abc:	0312      	lsls	r2, r2, #12
   33abe:	0d0b      	lsrs	r3, r1, #20
   33ac0:	0b12      	lsrs	r2, r2, #12
   33ac2:	051b      	lsls	r3, r3, #20
   33ac4:	4313      	orrs	r3, r2
   33ac6:	4a43      	ldr	r2, [pc, #268]	; (33bd4 <__aeabi_dmul+0x1e8>)
   33ac8:	0524      	lsls	r4, r4, #20
   33aca:	4013      	ands	r3, r2
   33acc:	431c      	orrs	r4, r3
   33ace:	0064      	lsls	r4, r4, #1
   33ad0:	07ed      	lsls	r5, r5, #31
   33ad2:	0864      	lsrs	r4, r4, #1
   33ad4:	432c      	orrs	r4, r5
   33ad6:	4648      	mov	r0, r9
   33ad8:	0021      	movs	r1, r4
   33ada:	b007      	add	sp, #28
   33adc:	bc3c      	pop	{r2, r3, r4, r5}
   33ade:	4690      	mov	r8, r2
   33ae0:	4699      	mov	r9, r3
   33ae2:	46a2      	mov	sl, r4
   33ae4:	46ab      	mov	fp, r5
   33ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33ae8:	4303      	orrs	r3, r0
   33aea:	4699      	mov	r9, r3
   33aec:	d04f      	beq.n	33b8e <__aeabi_dmul+0x1a2>
   33aee:	465b      	mov	r3, fp
   33af0:	2b00      	cmp	r3, #0
   33af2:	d100      	bne.n	33af6 <__aeabi_dmul+0x10a>
   33af4:	e189      	b.n	33e0a <__aeabi_dmul+0x41e>
   33af6:	4658      	mov	r0, fp
   33af8:	f000 fd7a 	bl	345f0 <__clzsi2>
   33afc:	0003      	movs	r3, r0
   33afe:	3b0b      	subs	r3, #11
   33b00:	2b1c      	cmp	r3, #28
   33b02:	dd00      	ble.n	33b06 <__aeabi_dmul+0x11a>
   33b04:	e17a      	b.n	33dfc <__aeabi_dmul+0x410>
   33b06:	221d      	movs	r2, #29
   33b08:	1ad3      	subs	r3, r2, r3
   33b0a:	003a      	movs	r2, r7
   33b0c:	0001      	movs	r1, r0
   33b0e:	465c      	mov	r4, fp
   33b10:	40da      	lsrs	r2, r3
   33b12:	3908      	subs	r1, #8
   33b14:	408c      	lsls	r4, r1
   33b16:	0013      	movs	r3, r2
   33b18:	408f      	lsls	r7, r1
   33b1a:	4323      	orrs	r3, r4
   33b1c:	469b      	mov	fp, r3
   33b1e:	46b9      	mov	r9, r7
   33b20:	2300      	movs	r3, #0
   33b22:	4e2d      	ldr	r6, [pc, #180]	; (33bd8 <__aeabi_dmul+0x1ec>)
   33b24:	2700      	movs	r7, #0
   33b26:	1a36      	subs	r6, r6, r0
   33b28:	9302      	str	r3, [sp, #8]
   33b2a:	e784      	b.n	33a36 <__aeabi_dmul+0x4a>
   33b2c:	4653      	mov	r3, sl
   33b2e:	4323      	orrs	r3, r4
   33b30:	d12a      	bne.n	33b88 <__aeabi_dmul+0x19c>
   33b32:	2400      	movs	r4, #0
   33b34:	2002      	movs	r0, #2
   33b36:	e796      	b.n	33a66 <__aeabi_dmul+0x7a>
   33b38:	4653      	mov	r3, sl
   33b3a:	4323      	orrs	r3, r4
   33b3c:	d020      	beq.n	33b80 <__aeabi_dmul+0x194>
   33b3e:	2c00      	cmp	r4, #0
   33b40:	d100      	bne.n	33b44 <__aeabi_dmul+0x158>
   33b42:	e157      	b.n	33df4 <__aeabi_dmul+0x408>
   33b44:	0020      	movs	r0, r4
   33b46:	f000 fd53 	bl	345f0 <__clzsi2>
   33b4a:	0003      	movs	r3, r0
   33b4c:	3b0b      	subs	r3, #11
   33b4e:	2b1c      	cmp	r3, #28
   33b50:	dd00      	ble.n	33b54 <__aeabi_dmul+0x168>
   33b52:	e149      	b.n	33de8 <__aeabi_dmul+0x3fc>
   33b54:	211d      	movs	r1, #29
   33b56:	1acb      	subs	r3, r1, r3
   33b58:	4651      	mov	r1, sl
   33b5a:	0002      	movs	r2, r0
   33b5c:	40d9      	lsrs	r1, r3
   33b5e:	4653      	mov	r3, sl
   33b60:	3a08      	subs	r2, #8
   33b62:	4094      	lsls	r4, r2
   33b64:	4093      	lsls	r3, r2
   33b66:	430c      	orrs	r4, r1
   33b68:	4a1b      	ldr	r2, [pc, #108]	; (33bd8 <__aeabi_dmul+0x1ec>)
   33b6a:	1a12      	subs	r2, r2, r0
   33b6c:	2000      	movs	r0, #0
   33b6e:	e77a      	b.n	33a66 <__aeabi_dmul+0x7a>
   33b70:	2501      	movs	r5, #1
   33b72:	9b01      	ldr	r3, [sp, #4]
   33b74:	4c14      	ldr	r4, [pc, #80]	; (33bc8 <__aeabi_dmul+0x1dc>)
   33b76:	401d      	ands	r5, r3
   33b78:	2300      	movs	r3, #0
   33b7a:	2200      	movs	r2, #0
   33b7c:	4699      	mov	r9, r3
   33b7e:	e79c      	b.n	33aba <__aeabi_dmul+0xce>
   33b80:	2400      	movs	r4, #0
   33b82:	2200      	movs	r2, #0
   33b84:	2001      	movs	r0, #1
   33b86:	e76e      	b.n	33a66 <__aeabi_dmul+0x7a>
   33b88:	4653      	mov	r3, sl
   33b8a:	2003      	movs	r0, #3
   33b8c:	e76b      	b.n	33a66 <__aeabi_dmul+0x7a>
   33b8e:	2300      	movs	r3, #0
   33b90:	469b      	mov	fp, r3
   33b92:	3301      	adds	r3, #1
   33b94:	2704      	movs	r7, #4
   33b96:	2600      	movs	r6, #0
   33b98:	9302      	str	r3, [sp, #8]
   33b9a:	e74c      	b.n	33a36 <__aeabi_dmul+0x4a>
   33b9c:	2303      	movs	r3, #3
   33b9e:	4681      	mov	r9, r0
   33ba0:	270c      	movs	r7, #12
   33ba2:	9302      	str	r3, [sp, #8]
   33ba4:	e747      	b.n	33a36 <__aeabi_dmul+0x4a>
   33ba6:	2280      	movs	r2, #128	; 0x80
   33ba8:	2300      	movs	r3, #0
   33baa:	2500      	movs	r5, #0
   33bac:	0312      	lsls	r2, r2, #12
   33bae:	4699      	mov	r9, r3
   33bb0:	4c05      	ldr	r4, [pc, #20]	; (33bc8 <__aeabi_dmul+0x1dc>)
   33bb2:	e782      	b.n	33aba <__aeabi_dmul+0xce>
   33bb4:	465c      	mov	r4, fp
   33bb6:	464b      	mov	r3, r9
   33bb8:	9802      	ldr	r0, [sp, #8]
   33bba:	e76f      	b.n	33a9c <__aeabi_dmul+0xb0>
   33bbc:	465c      	mov	r4, fp
   33bbe:	464b      	mov	r3, r9
   33bc0:	9501      	str	r5, [sp, #4]
   33bc2:	9802      	ldr	r0, [sp, #8]
   33bc4:	e76a      	b.n	33a9c <__aeabi_dmul+0xb0>
   33bc6:	46c0      	nop			; (mov r8, r8)
   33bc8:	000007ff 	.word	0x000007ff
   33bcc:	fffffc01 	.word	0xfffffc01
   33bd0:	00039e34 	.word	0x00039e34
   33bd4:	800fffff 	.word	0x800fffff
   33bd8:	fffffc0d 	.word	0xfffffc0d
   33bdc:	464a      	mov	r2, r9
   33bde:	4649      	mov	r1, r9
   33be0:	0c17      	lsrs	r7, r2, #16
   33be2:	0c1a      	lsrs	r2, r3, #16
   33be4:	041b      	lsls	r3, r3, #16
   33be6:	0c1b      	lsrs	r3, r3, #16
   33be8:	0408      	lsls	r0, r1, #16
   33bea:	0019      	movs	r1, r3
   33bec:	0c00      	lsrs	r0, r0, #16
   33bee:	4341      	muls	r1, r0
   33bf0:	0015      	movs	r5, r2
   33bf2:	4688      	mov	r8, r1
   33bf4:	0019      	movs	r1, r3
   33bf6:	437d      	muls	r5, r7
   33bf8:	4379      	muls	r1, r7
   33bfa:	9503      	str	r5, [sp, #12]
   33bfc:	4689      	mov	r9, r1
   33bfe:	0029      	movs	r1, r5
   33c00:	0015      	movs	r5, r2
   33c02:	4345      	muls	r5, r0
   33c04:	444d      	add	r5, r9
   33c06:	9502      	str	r5, [sp, #8]
   33c08:	4645      	mov	r5, r8
   33c0a:	0c2d      	lsrs	r5, r5, #16
   33c0c:	46aa      	mov	sl, r5
   33c0e:	9d02      	ldr	r5, [sp, #8]
   33c10:	4455      	add	r5, sl
   33c12:	45a9      	cmp	r9, r5
   33c14:	d906      	bls.n	33c24 <__aeabi_dmul+0x238>
   33c16:	468a      	mov	sl, r1
   33c18:	2180      	movs	r1, #128	; 0x80
   33c1a:	0249      	lsls	r1, r1, #9
   33c1c:	4689      	mov	r9, r1
   33c1e:	44ca      	add	sl, r9
   33c20:	4651      	mov	r1, sl
   33c22:	9103      	str	r1, [sp, #12]
   33c24:	0c29      	lsrs	r1, r5, #16
   33c26:	9104      	str	r1, [sp, #16]
   33c28:	4641      	mov	r1, r8
   33c2a:	0409      	lsls	r1, r1, #16
   33c2c:	042d      	lsls	r5, r5, #16
   33c2e:	0c09      	lsrs	r1, r1, #16
   33c30:	4688      	mov	r8, r1
   33c32:	0029      	movs	r1, r5
   33c34:	0c25      	lsrs	r5, r4, #16
   33c36:	0424      	lsls	r4, r4, #16
   33c38:	4441      	add	r1, r8
   33c3a:	0c24      	lsrs	r4, r4, #16
   33c3c:	9105      	str	r1, [sp, #20]
   33c3e:	0021      	movs	r1, r4
   33c40:	4341      	muls	r1, r0
   33c42:	4688      	mov	r8, r1
   33c44:	0021      	movs	r1, r4
   33c46:	4379      	muls	r1, r7
   33c48:	468a      	mov	sl, r1
   33c4a:	4368      	muls	r0, r5
   33c4c:	4641      	mov	r1, r8
   33c4e:	4450      	add	r0, sl
   33c50:	4681      	mov	r9, r0
   33c52:	0c08      	lsrs	r0, r1, #16
   33c54:	4448      	add	r0, r9
   33c56:	436f      	muls	r7, r5
   33c58:	4582      	cmp	sl, r0
   33c5a:	d903      	bls.n	33c64 <__aeabi_dmul+0x278>
   33c5c:	2180      	movs	r1, #128	; 0x80
   33c5e:	0249      	lsls	r1, r1, #9
   33c60:	4689      	mov	r9, r1
   33c62:	444f      	add	r7, r9
   33c64:	0c01      	lsrs	r1, r0, #16
   33c66:	4689      	mov	r9, r1
   33c68:	0039      	movs	r1, r7
   33c6a:	4449      	add	r1, r9
   33c6c:	9102      	str	r1, [sp, #8]
   33c6e:	4641      	mov	r1, r8
   33c70:	040f      	lsls	r7, r1, #16
   33c72:	9904      	ldr	r1, [sp, #16]
   33c74:	0c3f      	lsrs	r7, r7, #16
   33c76:	4688      	mov	r8, r1
   33c78:	0400      	lsls	r0, r0, #16
   33c7a:	19c0      	adds	r0, r0, r7
   33c7c:	4480      	add	r8, r0
   33c7e:	4641      	mov	r1, r8
   33c80:	9104      	str	r1, [sp, #16]
   33c82:	4659      	mov	r1, fp
   33c84:	0c0f      	lsrs	r7, r1, #16
   33c86:	0409      	lsls	r1, r1, #16
   33c88:	0c09      	lsrs	r1, r1, #16
   33c8a:	4688      	mov	r8, r1
   33c8c:	4359      	muls	r1, r3
   33c8e:	468a      	mov	sl, r1
   33c90:	0039      	movs	r1, r7
   33c92:	4351      	muls	r1, r2
   33c94:	4689      	mov	r9, r1
   33c96:	4641      	mov	r1, r8
   33c98:	434a      	muls	r2, r1
   33c9a:	4651      	mov	r1, sl
   33c9c:	0c09      	lsrs	r1, r1, #16
   33c9e:	468b      	mov	fp, r1
   33ca0:	437b      	muls	r3, r7
   33ca2:	18d2      	adds	r2, r2, r3
   33ca4:	445a      	add	r2, fp
   33ca6:	4293      	cmp	r3, r2
   33ca8:	d903      	bls.n	33cb2 <__aeabi_dmul+0x2c6>
   33caa:	2380      	movs	r3, #128	; 0x80
   33cac:	025b      	lsls	r3, r3, #9
   33cae:	469b      	mov	fp, r3
   33cb0:	44d9      	add	r9, fp
   33cb2:	4651      	mov	r1, sl
   33cb4:	0409      	lsls	r1, r1, #16
   33cb6:	0c09      	lsrs	r1, r1, #16
   33cb8:	468a      	mov	sl, r1
   33cba:	4641      	mov	r1, r8
   33cbc:	4361      	muls	r1, r4
   33cbe:	437c      	muls	r4, r7
   33cc0:	0c13      	lsrs	r3, r2, #16
   33cc2:	0412      	lsls	r2, r2, #16
   33cc4:	444b      	add	r3, r9
   33cc6:	4452      	add	r2, sl
   33cc8:	46a1      	mov	r9, r4
   33cca:	468a      	mov	sl, r1
   33ccc:	003c      	movs	r4, r7
   33cce:	4641      	mov	r1, r8
   33cd0:	436c      	muls	r4, r5
   33cd2:	434d      	muls	r5, r1
   33cd4:	4651      	mov	r1, sl
   33cd6:	444d      	add	r5, r9
   33cd8:	0c0f      	lsrs	r7, r1, #16
   33cda:	197d      	adds	r5, r7, r5
   33cdc:	45a9      	cmp	r9, r5
   33cde:	d903      	bls.n	33ce8 <__aeabi_dmul+0x2fc>
   33ce0:	2180      	movs	r1, #128	; 0x80
   33ce2:	0249      	lsls	r1, r1, #9
   33ce4:	4688      	mov	r8, r1
   33ce6:	4444      	add	r4, r8
   33ce8:	9f04      	ldr	r7, [sp, #16]
   33cea:	9903      	ldr	r1, [sp, #12]
   33cec:	46b8      	mov	r8, r7
   33cee:	4441      	add	r1, r8
   33cf0:	468b      	mov	fp, r1
   33cf2:	4583      	cmp	fp, r0
   33cf4:	4180      	sbcs	r0, r0
   33cf6:	4241      	negs	r1, r0
   33cf8:	4688      	mov	r8, r1
   33cfa:	4651      	mov	r1, sl
   33cfc:	0408      	lsls	r0, r1, #16
   33cfe:	042f      	lsls	r7, r5, #16
   33d00:	0c00      	lsrs	r0, r0, #16
   33d02:	183f      	adds	r7, r7, r0
   33d04:	4658      	mov	r0, fp
   33d06:	9902      	ldr	r1, [sp, #8]
   33d08:	1810      	adds	r0, r2, r0
   33d0a:	4689      	mov	r9, r1
   33d0c:	4290      	cmp	r0, r2
   33d0e:	4192      	sbcs	r2, r2
   33d10:	444f      	add	r7, r9
   33d12:	46ba      	mov	sl, r7
   33d14:	4252      	negs	r2, r2
   33d16:	4699      	mov	r9, r3
   33d18:	4693      	mov	fp, r2
   33d1a:	44c2      	add	sl, r8
   33d1c:	44d1      	add	r9, sl
   33d1e:	44cb      	add	fp, r9
   33d20:	428f      	cmp	r7, r1
   33d22:	41bf      	sbcs	r7, r7
   33d24:	45c2      	cmp	sl, r8
   33d26:	4189      	sbcs	r1, r1
   33d28:	4599      	cmp	r9, r3
   33d2a:	419b      	sbcs	r3, r3
   33d2c:	4593      	cmp	fp, r2
   33d2e:	4192      	sbcs	r2, r2
   33d30:	427f      	negs	r7, r7
   33d32:	4249      	negs	r1, r1
   33d34:	0c2d      	lsrs	r5, r5, #16
   33d36:	4252      	negs	r2, r2
   33d38:	430f      	orrs	r7, r1
   33d3a:	425b      	negs	r3, r3
   33d3c:	4313      	orrs	r3, r2
   33d3e:	197f      	adds	r7, r7, r5
   33d40:	18ff      	adds	r7, r7, r3
   33d42:	465b      	mov	r3, fp
   33d44:	193c      	adds	r4, r7, r4
   33d46:	0ddb      	lsrs	r3, r3, #23
   33d48:	9a05      	ldr	r2, [sp, #20]
   33d4a:	0264      	lsls	r4, r4, #9
   33d4c:	431c      	orrs	r4, r3
   33d4e:	0243      	lsls	r3, r0, #9
   33d50:	4313      	orrs	r3, r2
   33d52:	1e5d      	subs	r5, r3, #1
   33d54:	41ab      	sbcs	r3, r5
   33d56:	465a      	mov	r2, fp
   33d58:	0dc0      	lsrs	r0, r0, #23
   33d5a:	4303      	orrs	r3, r0
   33d5c:	0252      	lsls	r2, r2, #9
   33d5e:	4313      	orrs	r3, r2
   33d60:	01e2      	lsls	r2, r4, #7
   33d62:	d556      	bpl.n	33e12 <__aeabi_dmul+0x426>
   33d64:	2001      	movs	r0, #1
   33d66:	085a      	lsrs	r2, r3, #1
   33d68:	4003      	ands	r3, r0
   33d6a:	4313      	orrs	r3, r2
   33d6c:	07e2      	lsls	r2, r4, #31
   33d6e:	4313      	orrs	r3, r2
   33d70:	0864      	lsrs	r4, r4, #1
   33d72:	485a      	ldr	r0, [pc, #360]	; (33edc <__aeabi_dmul+0x4f0>)
   33d74:	4460      	add	r0, ip
   33d76:	2800      	cmp	r0, #0
   33d78:	dd4d      	ble.n	33e16 <__aeabi_dmul+0x42a>
   33d7a:	075a      	lsls	r2, r3, #29
   33d7c:	d009      	beq.n	33d92 <__aeabi_dmul+0x3a6>
   33d7e:	220f      	movs	r2, #15
   33d80:	401a      	ands	r2, r3
   33d82:	2a04      	cmp	r2, #4
   33d84:	d005      	beq.n	33d92 <__aeabi_dmul+0x3a6>
   33d86:	1d1a      	adds	r2, r3, #4
   33d88:	429a      	cmp	r2, r3
   33d8a:	419b      	sbcs	r3, r3
   33d8c:	425b      	negs	r3, r3
   33d8e:	18e4      	adds	r4, r4, r3
   33d90:	0013      	movs	r3, r2
   33d92:	01e2      	lsls	r2, r4, #7
   33d94:	d504      	bpl.n	33da0 <__aeabi_dmul+0x3b4>
   33d96:	2080      	movs	r0, #128	; 0x80
   33d98:	4a51      	ldr	r2, [pc, #324]	; (33ee0 <__aeabi_dmul+0x4f4>)
   33d9a:	00c0      	lsls	r0, r0, #3
   33d9c:	4014      	ands	r4, r2
   33d9e:	4460      	add	r0, ip
   33da0:	4a50      	ldr	r2, [pc, #320]	; (33ee4 <__aeabi_dmul+0x4f8>)
   33da2:	4290      	cmp	r0, r2
   33da4:	dd00      	ble.n	33da8 <__aeabi_dmul+0x3bc>
   33da6:	e6e3      	b.n	33b70 <__aeabi_dmul+0x184>
   33da8:	2501      	movs	r5, #1
   33daa:	08db      	lsrs	r3, r3, #3
   33dac:	0762      	lsls	r2, r4, #29
   33dae:	431a      	orrs	r2, r3
   33db0:	0264      	lsls	r4, r4, #9
   33db2:	9b01      	ldr	r3, [sp, #4]
   33db4:	4691      	mov	r9, r2
   33db6:	0b22      	lsrs	r2, r4, #12
   33db8:	0544      	lsls	r4, r0, #21
   33dba:	0d64      	lsrs	r4, r4, #21
   33dbc:	401d      	ands	r5, r3
   33dbe:	e67c      	b.n	33aba <__aeabi_dmul+0xce>
   33dc0:	2280      	movs	r2, #128	; 0x80
   33dc2:	4659      	mov	r1, fp
   33dc4:	0312      	lsls	r2, r2, #12
   33dc6:	4211      	tst	r1, r2
   33dc8:	d008      	beq.n	33ddc <__aeabi_dmul+0x3f0>
   33dca:	4214      	tst	r4, r2
   33dcc:	d106      	bne.n	33ddc <__aeabi_dmul+0x3f0>
   33dce:	4322      	orrs	r2, r4
   33dd0:	0312      	lsls	r2, r2, #12
   33dd2:	0b12      	lsrs	r2, r2, #12
   33dd4:	4645      	mov	r5, r8
   33dd6:	4699      	mov	r9, r3
   33dd8:	4c43      	ldr	r4, [pc, #268]	; (33ee8 <__aeabi_dmul+0x4fc>)
   33dda:	e66e      	b.n	33aba <__aeabi_dmul+0xce>
   33ddc:	465b      	mov	r3, fp
   33dde:	431a      	orrs	r2, r3
   33de0:	0312      	lsls	r2, r2, #12
   33de2:	0b12      	lsrs	r2, r2, #12
   33de4:	4c40      	ldr	r4, [pc, #256]	; (33ee8 <__aeabi_dmul+0x4fc>)
   33de6:	e668      	b.n	33aba <__aeabi_dmul+0xce>
   33de8:	0003      	movs	r3, r0
   33dea:	4654      	mov	r4, sl
   33dec:	3b28      	subs	r3, #40	; 0x28
   33dee:	409c      	lsls	r4, r3
   33df0:	2300      	movs	r3, #0
   33df2:	e6b9      	b.n	33b68 <__aeabi_dmul+0x17c>
   33df4:	f000 fbfc 	bl	345f0 <__clzsi2>
   33df8:	3020      	adds	r0, #32
   33dfa:	e6a6      	b.n	33b4a <__aeabi_dmul+0x15e>
   33dfc:	0003      	movs	r3, r0
   33dfe:	3b28      	subs	r3, #40	; 0x28
   33e00:	409f      	lsls	r7, r3
   33e02:	2300      	movs	r3, #0
   33e04:	46bb      	mov	fp, r7
   33e06:	4699      	mov	r9, r3
   33e08:	e68a      	b.n	33b20 <__aeabi_dmul+0x134>
   33e0a:	f000 fbf1 	bl	345f0 <__clzsi2>
   33e0e:	3020      	adds	r0, #32
   33e10:	e674      	b.n	33afc <__aeabi_dmul+0x110>
   33e12:	46b4      	mov	ip, r6
   33e14:	e7ad      	b.n	33d72 <__aeabi_dmul+0x386>
   33e16:	2501      	movs	r5, #1
   33e18:	1a2a      	subs	r2, r5, r0
   33e1a:	2a38      	cmp	r2, #56	; 0x38
   33e1c:	dd06      	ble.n	33e2c <__aeabi_dmul+0x440>
   33e1e:	9b01      	ldr	r3, [sp, #4]
   33e20:	2400      	movs	r4, #0
   33e22:	401d      	ands	r5, r3
   33e24:	2300      	movs	r3, #0
   33e26:	2200      	movs	r2, #0
   33e28:	4699      	mov	r9, r3
   33e2a:	e646      	b.n	33aba <__aeabi_dmul+0xce>
   33e2c:	2a1f      	cmp	r2, #31
   33e2e:	dc21      	bgt.n	33e74 <__aeabi_dmul+0x488>
   33e30:	2520      	movs	r5, #32
   33e32:	0020      	movs	r0, r4
   33e34:	1aad      	subs	r5, r5, r2
   33e36:	001e      	movs	r6, r3
   33e38:	40ab      	lsls	r3, r5
   33e3a:	40a8      	lsls	r0, r5
   33e3c:	40d6      	lsrs	r6, r2
   33e3e:	1e5d      	subs	r5, r3, #1
   33e40:	41ab      	sbcs	r3, r5
   33e42:	4330      	orrs	r0, r6
   33e44:	4318      	orrs	r0, r3
   33e46:	40d4      	lsrs	r4, r2
   33e48:	0743      	lsls	r3, r0, #29
   33e4a:	d009      	beq.n	33e60 <__aeabi_dmul+0x474>
   33e4c:	230f      	movs	r3, #15
   33e4e:	4003      	ands	r3, r0
   33e50:	2b04      	cmp	r3, #4
   33e52:	d005      	beq.n	33e60 <__aeabi_dmul+0x474>
   33e54:	0003      	movs	r3, r0
   33e56:	1d18      	adds	r0, r3, #4
   33e58:	4298      	cmp	r0, r3
   33e5a:	419b      	sbcs	r3, r3
   33e5c:	425b      	negs	r3, r3
   33e5e:	18e4      	adds	r4, r4, r3
   33e60:	0223      	lsls	r3, r4, #8
   33e62:	d521      	bpl.n	33ea8 <__aeabi_dmul+0x4bc>
   33e64:	2501      	movs	r5, #1
   33e66:	9b01      	ldr	r3, [sp, #4]
   33e68:	2401      	movs	r4, #1
   33e6a:	401d      	ands	r5, r3
   33e6c:	2300      	movs	r3, #0
   33e6e:	2200      	movs	r2, #0
   33e70:	4699      	mov	r9, r3
   33e72:	e622      	b.n	33aba <__aeabi_dmul+0xce>
   33e74:	251f      	movs	r5, #31
   33e76:	0021      	movs	r1, r4
   33e78:	426d      	negs	r5, r5
   33e7a:	1a28      	subs	r0, r5, r0
   33e7c:	40c1      	lsrs	r1, r0
   33e7e:	0008      	movs	r0, r1
   33e80:	2a20      	cmp	r2, #32
   33e82:	d01d      	beq.n	33ec0 <__aeabi_dmul+0x4d4>
   33e84:	355f      	adds	r5, #95	; 0x5f
   33e86:	1aaa      	subs	r2, r5, r2
   33e88:	4094      	lsls	r4, r2
   33e8a:	4323      	orrs	r3, r4
   33e8c:	1e5c      	subs	r4, r3, #1
   33e8e:	41a3      	sbcs	r3, r4
   33e90:	2507      	movs	r5, #7
   33e92:	4303      	orrs	r3, r0
   33e94:	401d      	ands	r5, r3
   33e96:	2200      	movs	r2, #0
   33e98:	2d00      	cmp	r5, #0
   33e9a:	d009      	beq.n	33eb0 <__aeabi_dmul+0x4c4>
   33e9c:	220f      	movs	r2, #15
   33e9e:	2400      	movs	r4, #0
   33ea0:	401a      	ands	r2, r3
   33ea2:	0018      	movs	r0, r3
   33ea4:	2a04      	cmp	r2, #4
   33ea6:	d1d6      	bne.n	33e56 <__aeabi_dmul+0x46a>
   33ea8:	0003      	movs	r3, r0
   33eaa:	0765      	lsls	r5, r4, #29
   33eac:	0264      	lsls	r4, r4, #9
   33eae:	0b22      	lsrs	r2, r4, #12
   33eb0:	08db      	lsrs	r3, r3, #3
   33eb2:	432b      	orrs	r3, r5
   33eb4:	2501      	movs	r5, #1
   33eb6:	4699      	mov	r9, r3
   33eb8:	9b01      	ldr	r3, [sp, #4]
   33eba:	2400      	movs	r4, #0
   33ebc:	401d      	ands	r5, r3
   33ebe:	e5fc      	b.n	33aba <__aeabi_dmul+0xce>
   33ec0:	2400      	movs	r4, #0
   33ec2:	e7e2      	b.n	33e8a <__aeabi_dmul+0x49e>
   33ec4:	2280      	movs	r2, #128	; 0x80
   33ec6:	2501      	movs	r5, #1
   33ec8:	0312      	lsls	r2, r2, #12
   33eca:	4322      	orrs	r2, r4
   33ecc:	9901      	ldr	r1, [sp, #4]
   33ece:	0312      	lsls	r2, r2, #12
   33ed0:	0b12      	lsrs	r2, r2, #12
   33ed2:	400d      	ands	r5, r1
   33ed4:	4699      	mov	r9, r3
   33ed6:	4c04      	ldr	r4, [pc, #16]	; (33ee8 <__aeabi_dmul+0x4fc>)
   33ed8:	e5ef      	b.n	33aba <__aeabi_dmul+0xce>
   33eda:	46c0      	nop			; (mov r8, r8)
   33edc:	000003ff 	.word	0x000003ff
   33ee0:	feffffff 	.word	0xfeffffff
   33ee4:	000007fe 	.word	0x000007fe
   33ee8:	000007ff 	.word	0x000007ff

00033eec <__aeabi_dsub>:
   33eec:	b5f0      	push	{r4, r5, r6, r7, lr}
   33eee:	4646      	mov	r6, r8
   33ef0:	46d6      	mov	lr, sl
   33ef2:	464f      	mov	r7, r9
   33ef4:	030c      	lsls	r4, r1, #12
   33ef6:	b5c0      	push	{r6, r7, lr}
   33ef8:	0fcd      	lsrs	r5, r1, #31
   33efa:	004e      	lsls	r6, r1, #1
   33efc:	0a61      	lsrs	r1, r4, #9
   33efe:	0f44      	lsrs	r4, r0, #29
   33f00:	430c      	orrs	r4, r1
   33f02:	00c1      	lsls	r1, r0, #3
   33f04:	0058      	lsls	r0, r3, #1
   33f06:	0d40      	lsrs	r0, r0, #21
   33f08:	4684      	mov	ip, r0
   33f0a:	468a      	mov	sl, r1
   33f0c:	000f      	movs	r7, r1
   33f0e:	0319      	lsls	r1, r3, #12
   33f10:	0f50      	lsrs	r0, r2, #29
   33f12:	0a49      	lsrs	r1, r1, #9
   33f14:	4301      	orrs	r1, r0
   33f16:	48c6      	ldr	r0, [pc, #792]	; (34230 <__aeabi_dsub+0x344>)
   33f18:	0d76      	lsrs	r6, r6, #21
   33f1a:	46a8      	mov	r8, r5
   33f1c:	0fdb      	lsrs	r3, r3, #31
   33f1e:	00d2      	lsls	r2, r2, #3
   33f20:	4584      	cmp	ip, r0
   33f22:	d100      	bne.n	33f26 <__aeabi_dsub+0x3a>
   33f24:	e0d8      	b.n	340d8 <__aeabi_dsub+0x1ec>
   33f26:	2001      	movs	r0, #1
   33f28:	4043      	eors	r3, r0
   33f2a:	42ab      	cmp	r3, r5
   33f2c:	d100      	bne.n	33f30 <__aeabi_dsub+0x44>
   33f2e:	e0a6      	b.n	3407e <__aeabi_dsub+0x192>
   33f30:	4660      	mov	r0, ip
   33f32:	1a35      	subs	r5, r6, r0
   33f34:	2d00      	cmp	r5, #0
   33f36:	dc00      	bgt.n	33f3a <__aeabi_dsub+0x4e>
   33f38:	e105      	b.n	34146 <__aeabi_dsub+0x25a>
   33f3a:	2800      	cmp	r0, #0
   33f3c:	d110      	bne.n	33f60 <__aeabi_dsub+0x74>
   33f3e:	000b      	movs	r3, r1
   33f40:	4313      	orrs	r3, r2
   33f42:	d100      	bne.n	33f46 <__aeabi_dsub+0x5a>
   33f44:	e0d7      	b.n	340f6 <__aeabi_dsub+0x20a>
   33f46:	1e6b      	subs	r3, r5, #1
   33f48:	2b00      	cmp	r3, #0
   33f4a:	d000      	beq.n	33f4e <__aeabi_dsub+0x62>
   33f4c:	e14b      	b.n	341e6 <__aeabi_dsub+0x2fa>
   33f4e:	4653      	mov	r3, sl
   33f50:	1a9f      	subs	r7, r3, r2
   33f52:	45ba      	cmp	sl, r7
   33f54:	4180      	sbcs	r0, r0
   33f56:	1a64      	subs	r4, r4, r1
   33f58:	4240      	negs	r0, r0
   33f5a:	1a24      	subs	r4, r4, r0
   33f5c:	2601      	movs	r6, #1
   33f5e:	e01e      	b.n	33f9e <__aeabi_dsub+0xb2>
   33f60:	4bb3      	ldr	r3, [pc, #716]	; (34230 <__aeabi_dsub+0x344>)
   33f62:	429e      	cmp	r6, r3
   33f64:	d048      	beq.n	33ff8 <__aeabi_dsub+0x10c>
   33f66:	2380      	movs	r3, #128	; 0x80
   33f68:	041b      	lsls	r3, r3, #16
   33f6a:	4319      	orrs	r1, r3
   33f6c:	2d38      	cmp	r5, #56	; 0x38
   33f6e:	dd00      	ble.n	33f72 <__aeabi_dsub+0x86>
   33f70:	e119      	b.n	341a6 <__aeabi_dsub+0x2ba>
   33f72:	2d1f      	cmp	r5, #31
   33f74:	dd00      	ble.n	33f78 <__aeabi_dsub+0x8c>
   33f76:	e14c      	b.n	34212 <__aeabi_dsub+0x326>
   33f78:	2320      	movs	r3, #32
   33f7a:	000f      	movs	r7, r1
   33f7c:	1b5b      	subs	r3, r3, r5
   33f7e:	0010      	movs	r0, r2
   33f80:	409a      	lsls	r2, r3
   33f82:	409f      	lsls	r7, r3
   33f84:	40e8      	lsrs	r0, r5
   33f86:	1e53      	subs	r3, r2, #1
   33f88:	419a      	sbcs	r2, r3
   33f8a:	40e9      	lsrs	r1, r5
   33f8c:	4307      	orrs	r7, r0
   33f8e:	4317      	orrs	r7, r2
   33f90:	4653      	mov	r3, sl
   33f92:	1bdf      	subs	r7, r3, r7
   33f94:	1a61      	subs	r1, r4, r1
   33f96:	45ba      	cmp	sl, r7
   33f98:	41a4      	sbcs	r4, r4
   33f9a:	4264      	negs	r4, r4
   33f9c:	1b0c      	subs	r4, r1, r4
   33f9e:	0223      	lsls	r3, r4, #8
   33fa0:	d400      	bmi.n	33fa4 <__aeabi_dsub+0xb8>
   33fa2:	e0c5      	b.n	34130 <__aeabi_dsub+0x244>
   33fa4:	0264      	lsls	r4, r4, #9
   33fa6:	0a65      	lsrs	r5, r4, #9
   33fa8:	2d00      	cmp	r5, #0
   33faa:	d100      	bne.n	33fae <__aeabi_dsub+0xc2>
   33fac:	e0f6      	b.n	3419c <__aeabi_dsub+0x2b0>
   33fae:	0028      	movs	r0, r5
   33fb0:	f000 fb1e 	bl	345f0 <__clzsi2>
   33fb4:	0003      	movs	r3, r0
   33fb6:	3b08      	subs	r3, #8
   33fb8:	2b1f      	cmp	r3, #31
   33fba:	dd00      	ble.n	33fbe <__aeabi_dsub+0xd2>
   33fbc:	e0e9      	b.n	34192 <__aeabi_dsub+0x2a6>
   33fbe:	2220      	movs	r2, #32
   33fc0:	003c      	movs	r4, r7
   33fc2:	1ad2      	subs	r2, r2, r3
   33fc4:	409d      	lsls	r5, r3
   33fc6:	40d4      	lsrs	r4, r2
   33fc8:	409f      	lsls	r7, r3
   33fca:	4325      	orrs	r5, r4
   33fcc:	429e      	cmp	r6, r3
   33fce:	dd00      	ble.n	33fd2 <__aeabi_dsub+0xe6>
   33fd0:	e0db      	b.n	3418a <__aeabi_dsub+0x29e>
   33fd2:	1b9e      	subs	r6, r3, r6
   33fd4:	1c73      	adds	r3, r6, #1
   33fd6:	2b1f      	cmp	r3, #31
   33fd8:	dd00      	ble.n	33fdc <__aeabi_dsub+0xf0>
   33fda:	e10a      	b.n	341f2 <__aeabi_dsub+0x306>
   33fdc:	2220      	movs	r2, #32
   33fde:	0038      	movs	r0, r7
   33fe0:	1ad2      	subs	r2, r2, r3
   33fe2:	0029      	movs	r1, r5
   33fe4:	4097      	lsls	r7, r2
   33fe6:	002c      	movs	r4, r5
   33fe8:	4091      	lsls	r1, r2
   33fea:	40d8      	lsrs	r0, r3
   33fec:	1e7a      	subs	r2, r7, #1
   33fee:	4197      	sbcs	r7, r2
   33ff0:	40dc      	lsrs	r4, r3
   33ff2:	2600      	movs	r6, #0
   33ff4:	4301      	orrs	r1, r0
   33ff6:	430f      	orrs	r7, r1
   33ff8:	077b      	lsls	r3, r7, #29
   33ffa:	d009      	beq.n	34010 <__aeabi_dsub+0x124>
   33ffc:	230f      	movs	r3, #15
   33ffe:	403b      	ands	r3, r7
   34000:	2b04      	cmp	r3, #4
   34002:	d005      	beq.n	34010 <__aeabi_dsub+0x124>
   34004:	1d3b      	adds	r3, r7, #4
   34006:	42bb      	cmp	r3, r7
   34008:	41bf      	sbcs	r7, r7
   3400a:	427f      	negs	r7, r7
   3400c:	19e4      	adds	r4, r4, r7
   3400e:	001f      	movs	r7, r3
   34010:	0223      	lsls	r3, r4, #8
   34012:	d525      	bpl.n	34060 <__aeabi_dsub+0x174>
   34014:	4b86      	ldr	r3, [pc, #536]	; (34230 <__aeabi_dsub+0x344>)
   34016:	3601      	adds	r6, #1
   34018:	429e      	cmp	r6, r3
   3401a:	d100      	bne.n	3401e <__aeabi_dsub+0x132>
   3401c:	e0af      	b.n	3417e <__aeabi_dsub+0x292>
   3401e:	4b85      	ldr	r3, [pc, #532]	; (34234 <__aeabi_dsub+0x348>)
   34020:	2501      	movs	r5, #1
   34022:	401c      	ands	r4, r3
   34024:	4643      	mov	r3, r8
   34026:	0762      	lsls	r2, r4, #29
   34028:	08ff      	lsrs	r7, r7, #3
   3402a:	0264      	lsls	r4, r4, #9
   3402c:	0576      	lsls	r6, r6, #21
   3402e:	4317      	orrs	r7, r2
   34030:	0b24      	lsrs	r4, r4, #12
   34032:	0d76      	lsrs	r6, r6, #21
   34034:	401d      	ands	r5, r3
   34036:	2100      	movs	r1, #0
   34038:	0324      	lsls	r4, r4, #12
   3403a:	0b23      	lsrs	r3, r4, #12
   3403c:	0d0c      	lsrs	r4, r1, #20
   3403e:	4a7e      	ldr	r2, [pc, #504]	; (34238 <__aeabi_dsub+0x34c>)
   34040:	0524      	lsls	r4, r4, #20
   34042:	431c      	orrs	r4, r3
   34044:	4014      	ands	r4, r2
   34046:	0533      	lsls	r3, r6, #20
   34048:	4323      	orrs	r3, r4
   3404a:	005b      	lsls	r3, r3, #1
   3404c:	07ed      	lsls	r5, r5, #31
   3404e:	085b      	lsrs	r3, r3, #1
   34050:	432b      	orrs	r3, r5
   34052:	0038      	movs	r0, r7
   34054:	0019      	movs	r1, r3
   34056:	bc1c      	pop	{r2, r3, r4}
   34058:	4690      	mov	r8, r2
   3405a:	4699      	mov	r9, r3
   3405c:	46a2      	mov	sl, r4
   3405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34060:	2501      	movs	r5, #1
   34062:	4643      	mov	r3, r8
   34064:	0762      	lsls	r2, r4, #29
   34066:	08ff      	lsrs	r7, r7, #3
   34068:	4317      	orrs	r7, r2
   3406a:	08e4      	lsrs	r4, r4, #3
   3406c:	401d      	ands	r5, r3
   3406e:	4b70      	ldr	r3, [pc, #448]	; (34230 <__aeabi_dsub+0x344>)
   34070:	429e      	cmp	r6, r3
   34072:	d036      	beq.n	340e2 <__aeabi_dsub+0x1f6>
   34074:	0324      	lsls	r4, r4, #12
   34076:	0576      	lsls	r6, r6, #21
   34078:	0b24      	lsrs	r4, r4, #12
   3407a:	0d76      	lsrs	r6, r6, #21
   3407c:	e7db      	b.n	34036 <__aeabi_dsub+0x14a>
   3407e:	4663      	mov	r3, ip
   34080:	1af3      	subs	r3, r6, r3
   34082:	2b00      	cmp	r3, #0
   34084:	dc00      	bgt.n	34088 <__aeabi_dsub+0x19c>
   34086:	e094      	b.n	341b2 <__aeabi_dsub+0x2c6>
   34088:	4660      	mov	r0, ip
   3408a:	2800      	cmp	r0, #0
   3408c:	d035      	beq.n	340fa <__aeabi_dsub+0x20e>
   3408e:	4868      	ldr	r0, [pc, #416]	; (34230 <__aeabi_dsub+0x344>)
   34090:	4286      	cmp	r6, r0
   34092:	d0b1      	beq.n	33ff8 <__aeabi_dsub+0x10c>
   34094:	2780      	movs	r7, #128	; 0x80
   34096:	043f      	lsls	r7, r7, #16
   34098:	4339      	orrs	r1, r7
   3409a:	2b38      	cmp	r3, #56	; 0x38
   3409c:	dc00      	bgt.n	340a0 <__aeabi_dsub+0x1b4>
   3409e:	e0fd      	b.n	3429c <__aeabi_dsub+0x3b0>
   340a0:	430a      	orrs	r2, r1
   340a2:	0017      	movs	r7, r2
   340a4:	2100      	movs	r1, #0
   340a6:	1e7a      	subs	r2, r7, #1
   340a8:	4197      	sbcs	r7, r2
   340aa:	4457      	add	r7, sl
   340ac:	4557      	cmp	r7, sl
   340ae:	4180      	sbcs	r0, r0
   340b0:	1909      	adds	r1, r1, r4
   340b2:	4244      	negs	r4, r0
   340b4:	190c      	adds	r4, r1, r4
   340b6:	0223      	lsls	r3, r4, #8
   340b8:	d53a      	bpl.n	34130 <__aeabi_dsub+0x244>
   340ba:	4b5d      	ldr	r3, [pc, #372]	; (34230 <__aeabi_dsub+0x344>)
   340bc:	3601      	adds	r6, #1
   340be:	429e      	cmp	r6, r3
   340c0:	d100      	bne.n	340c4 <__aeabi_dsub+0x1d8>
   340c2:	e14b      	b.n	3435c <__aeabi_dsub+0x470>
   340c4:	2201      	movs	r2, #1
   340c6:	4b5b      	ldr	r3, [pc, #364]	; (34234 <__aeabi_dsub+0x348>)
   340c8:	401c      	ands	r4, r3
   340ca:	087b      	lsrs	r3, r7, #1
   340cc:	4017      	ands	r7, r2
   340ce:	431f      	orrs	r7, r3
   340d0:	07e2      	lsls	r2, r4, #31
   340d2:	4317      	orrs	r7, r2
   340d4:	0864      	lsrs	r4, r4, #1
   340d6:	e78f      	b.n	33ff8 <__aeabi_dsub+0x10c>
   340d8:	0008      	movs	r0, r1
   340da:	4310      	orrs	r0, r2
   340dc:	d000      	beq.n	340e0 <__aeabi_dsub+0x1f4>
   340de:	e724      	b.n	33f2a <__aeabi_dsub+0x3e>
   340e0:	e721      	b.n	33f26 <__aeabi_dsub+0x3a>
   340e2:	0023      	movs	r3, r4
   340e4:	433b      	orrs	r3, r7
   340e6:	d100      	bne.n	340ea <__aeabi_dsub+0x1fe>
   340e8:	e1b9      	b.n	3445e <__aeabi_dsub+0x572>
   340ea:	2280      	movs	r2, #128	; 0x80
   340ec:	0312      	lsls	r2, r2, #12
   340ee:	4314      	orrs	r4, r2
   340f0:	0324      	lsls	r4, r4, #12
   340f2:	0b24      	lsrs	r4, r4, #12
   340f4:	e79f      	b.n	34036 <__aeabi_dsub+0x14a>
   340f6:	002e      	movs	r6, r5
   340f8:	e77e      	b.n	33ff8 <__aeabi_dsub+0x10c>
   340fa:	0008      	movs	r0, r1
   340fc:	4310      	orrs	r0, r2
   340fe:	d100      	bne.n	34102 <__aeabi_dsub+0x216>
   34100:	e0ca      	b.n	34298 <__aeabi_dsub+0x3ac>
   34102:	1e58      	subs	r0, r3, #1
   34104:	4684      	mov	ip, r0
   34106:	2800      	cmp	r0, #0
   34108:	d000      	beq.n	3410c <__aeabi_dsub+0x220>
   3410a:	e0e7      	b.n	342dc <__aeabi_dsub+0x3f0>
   3410c:	4452      	add	r2, sl
   3410e:	4552      	cmp	r2, sl
   34110:	4180      	sbcs	r0, r0
   34112:	1864      	adds	r4, r4, r1
   34114:	4240      	negs	r0, r0
   34116:	1824      	adds	r4, r4, r0
   34118:	0017      	movs	r7, r2
   3411a:	2601      	movs	r6, #1
   3411c:	0223      	lsls	r3, r4, #8
   3411e:	d507      	bpl.n	34130 <__aeabi_dsub+0x244>
   34120:	2602      	movs	r6, #2
   34122:	e7cf      	b.n	340c4 <__aeabi_dsub+0x1d8>
   34124:	4664      	mov	r4, ip
   34126:	432c      	orrs	r4, r5
   34128:	d100      	bne.n	3412c <__aeabi_dsub+0x240>
   3412a:	e1b3      	b.n	34494 <__aeabi_dsub+0x5a8>
   3412c:	002c      	movs	r4, r5
   3412e:	4667      	mov	r7, ip
   34130:	077b      	lsls	r3, r7, #29
   34132:	d000      	beq.n	34136 <__aeabi_dsub+0x24a>
   34134:	e762      	b.n	33ffc <__aeabi_dsub+0x110>
   34136:	0763      	lsls	r3, r4, #29
   34138:	08ff      	lsrs	r7, r7, #3
   3413a:	431f      	orrs	r7, r3
   3413c:	2501      	movs	r5, #1
   3413e:	4643      	mov	r3, r8
   34140:	08e4      	lsrs	r4, r4, #3
   34142:	401d      	ands	r5, r3
   34144:	e793      	b.n	3406e <__aeabi_dsub+0x182>
   34146:	2d00      	cmp	r5, #0
   34148:	d178      	bne.n	3423c <__aeabi_dsub+0x350>
   3414a:	1c75      	adds	r5, r6, #1
   3414c:	056d      	lsls	r5, r5, #21
   3414e:	0d6d      	lsrs	r5, r5, #21
   34150:	2d01      	cmp	r5, #1
   34152:	dc00      	bgt.n	34156 <__aeabi_dsub+0x26a>
   34154:	e0f2      	b.n	3433c <__aeabi_dsub+0x450>
   34156:	4650      	mov	r0, sl
   34158:	1a80      	subs	r0, r0, r2
   3415a:	4582      	cmp	sl, r0
   3415c:	41bf      	sbcs	r7, r7
   3415e:	1a65      	subs	r5, r4, r1
   34160:	427f      	negs	r7, r7
   34162:	1bed      	subs	r5, r5, r7
   34164:	4684      	mov	ip, r0
   34166:	0228      	lsls	r0, r5, #8
   34168:	d400      	bmi.n	3416c <__aeabi_dsub+0x280>
   3416a:	e08c      	b.n	34286 <__aeabi_dsub+0x39a>
   3416c:	4650      	mov	r0, sl
   3416e:	1a17      	subs	r7, r2, r0
   34170:	42ba      	cmp	r2, r7
   34172:	4192      	sbcs	r2, r2
   34174:	1b0c      	subs	r4, r1, r4
   34176:	4255      	negs	r5, r2
   34178:	1b65      	subs	r5, r4, r5
   3417a:	4698      	mov	r8, r3
   3417c:	e714      	b.n	33fa8 <__aeabi_dsub+0xbc>
   3417e:	2501      	movs	r5, #1
   34180:	4643      	mov	r3, r8
   34182:	2400      	movs	r4, #0
   34184:	401d      	ands	r5, r3
   34186:	2700      	movs	r7, #0
   34188:	e755      	b.n	34036 <__aeabi_dsub+0x14a>
   3418a:	4c2a      	ldr	r4, [pc, #168]	; (34234 <__aeabi_dsub+0x348>)
   3418c:	1af6      	subs	r6, r6, r3
   3418e:	402c      	ands	r4, r5
   34190:	e732      	b.n	33ff8 <__aeabi_dsub+0x10c>
   34192:	003d      	movs	r5, r7
   34194:	3828      	subs	r0, #40	; 0x28
   34196:	4085      	lsls	r5, r0
   34198:	2700      	movs	r7, #0
   3419a:	e717      	b.n	33fcc <__aeabi_dsub+0xe0>
   3419c:	0038      	movs	r0, r7
   3419e:	f000 fa27 	bl	345f0 <__clzsi2>
   341a2:	3020      	adds	r0, #32
   341a4:	e706      	b.n	33fb4 <__aeabi_dsub+0xc8>
   341a6:	430a      	orrs	r2, r1
   341a8:	0017      	movs	r7, r2
   341aa:	2100      	movs	r1, #0
   341ac:	1e7a      	subs	r2, r7, #1
   341ae:	4197      	sbcs	r7, r2
   341b0:	e6ee      	b.n	33f90 <__aeabi_dsub+0xa4>
   341b2:	2b00      	cmp	r3, #0
   341b4:	d000      	beq.n	341b8 <__aeabi_dsub+0x2cc>
   341b6:	e0e5      	b.n	34384 <__aeabi_dsub+0x498>
   341b8:	1c73      	adds	r3, r6, #1
   341ba:	469c      	mov	ip, r3
   341bc:	055b      	lsls	r3, r3, #21
   341be:	0d5b      	lsrs	r3, r3, #21
   341c0:	2b01      	cmp	r3, #1
   341c2:	dc00      	bgt.n	341c6 <__aeabi_dsub+0x2da>
   341c4:	e09f      	b.n	34306 <__aeabi_dsub+0x41a>
   341c6:	4b1a      	ldr	r3, [pc, #104]	; (34230 <__aeabi_dsub+0x344>)
   341c8:	459c      	cmp	ip, r3
   341ca:	d100      	bne.n	341ce <__aeabi_dsub+0x2e2>
   341cc:	e0c5      	b.n	3435a <__aeabi_dsub+0x46e>
   341ce:	4452      	add	r2, sl
   341d0:	4552      	cmp	r2, sl
   341d2:	4180      	sbcs	r0, r0
   341d4:	1864      	adds	r4, r4, r1
   341d6:	4240      	negs	r0, r0
   341d8:	1824      	adds	r4, r4, r0
   341da:	07e7      	lsls	r7, r4, #31
   341dc:	0852      	lsrs	r2, r2, #1
   341de:	4317      	orrs	r7, r2
   341e0:	0864      	lsrs	r4, r4, #1
   341e2:	4666      	mov	r6, ip
   341e4:	e708      	b.n	33ff8 <__aeabi_dsub+0x10c>
   341e6:	4812      	ldr	r0, [pc, #72]	; (34230 <__aeabi_dsub+0x344>)
   341e8:	4285      	cmp	r5, r0
   341ea:	d100      	bne.n	341ee <__aeabi_dsub+0x302>
   341ec:	e085      	b.n	342fa <__aeabi_dsub+0x40e>
   341ee:	001d      	movs	r5, r3
   341f0:	e6bc      	b.n	33f6c <__aeabi_dsub+0x80>
   341f2:	0029      	movs	r1, r5
   341f4:	3e1f      	subs	r6, #31
   341f6:	40f1      	lsrs	r1, r6
   341f8:	2b20      	cmp	r3, #32
   341fa:	d100      	bne.n	341fe <__aeabi_dsub+0x312>
   341fc:	e07f      	b.n	342fe <__aeabi_dsub+0x412>
   341fe:	2240      	movs	r2, #64	; 0x40
   34200:	1ad3      	subs	r3, r2, r3
   34202:	409d      	lsls	r5, r3
   34204:	432f      	orrs	r7, r5
   34206:	1e7d      	subs	r5, r7, #1
   34208:	41af      	sbcs	r7, r5
   3420a:	2400      	movs	r4, #0
   3420c:	430f      	orrs	r7, r1
   3420e:	2600      	movs	r6, #0
   34210:	e78e      	b.n	34130 <__aeabi_dsub+0x244>
   34212:	002b      	movs	r3, r5
   34214:	000f      	movs	r7, r1
   34216:	3b20      	subs	r3, #32
   34218:	40df      	lsrs	r7, r3
   3421a:	2d20      	cmp	r5, #32
   3421c:	d071      	beq.n	34302 <__aeabi_dsub+0x416>
   3421e:	2340      	movs	r3, #64	; 0x40
   34220:	1b5d      	subs	r5, r3, r5
   34222:	40a9      	lsls	r1, r5
   34224:	430a      	orrs	r2, r1
   34226:	1e51      	subs	r1, r2, #1
   34228:	418a      	sbcs	r2, r1
   3422a:	2100      	movs	r1, #0
   3422c:	4317      	orrs	r7, r2
   3422e:	e6af      	b.n	33f90 <__aeabi_dsub+0xa4>
   34230:	000007ff 	.word	0x000007ff
   34234:	ff7fffff 	.word	0xff7fffff
   34238:	800fffff 	.word	0x800fffff
   3423c:	2e00      	cmp	r6, #0
   3423e:	d03e      	beq.n	342be <__aeabi_dsub+0x3d2>
   34240:	4eb3      	ldr	r6, [pc, #716]	; (34510 <__aeabi_dsub+0x624>)
   34242:	45b4      	cmp	ip, r6
   34244:	d045      	beq.n	342d2 <__aeabi_dsub+0x3e6>
   34246:	2680      	movs	r6, #128	; 0x80
   34248:	0436      	lsls	r6, r6, #16
   3424a:	426d      	negs	r5, r5
   3424c:	4334      	orrs	r4, r6
   3424e:	2d38      	cmp	r5, #56	; 0x38
   34250:	dd00      	ble.n	34254 <__aeabi_dsub+0x368>
   34252:	e0a8      	b.n	343a6 <__aeabi_dsub+0x4ba>
   34254:	2d1f      	cmp	r5, #31
   34256:	dd00      	ble.n	3425a <__aeabi_dsub+0x36e>
   34258:	e11f      	b.n	3449a <__aeabi_dsub+0x5ae>
   3425a:	2620      	movs	r6, #32
   3425c:	0027      	movs	r7, r4
   3425e:	4650      	mov	r0, sl
   34260:	1b76      	subs	r6, r6, r5
   34262:	40b7      	lsls	r7, r6
   34264:	40e8      	lsrs	r0, r5
   34266:	4307      	orrs	r7, r0
   34268:	4650      	mov	r0, sl
   3426a:	40b0      	lsls	r0, r6
   3426c:	1e46      	subs	r6, r0, #1
   3426e:	41b0      	sbcs	r0, r6
   34270:	40ec      	lsrs	r4, r5
   34272:	4338      	orrs	r0, r7
   34274:	1a17      	subs	r7, r2, r0
   34276:	42ba      	cmp	r2, r7
   34278:	4192      	sbcs	r2, r2
   3427a:	1b0c      	subs	r4, r1, r4
   3427c:	4252      	negs	r2, r2
   3427e:	1aa4      	subs	r4, r4, r2
   34280:	4666      	mov	r6, ip
   34282:	4698      	mov	r8, r3
   34284:	e68b      	b.n	33f9e <__aeabi_dsub+0xb2>
   34286:	4664      	mov	r4, ip
   34288:	4667      	mov	r7, ip
   3428a:	432c      	orrs	r4, r5
   3428c:	d000      	beq.n	34290 <__aeabi_dsub+0x3a4>
   3428e:	e68b      	b.n	33fa8 <__aeabi_dsub+0xbc>
   34290:	2500      	movs	r5, #0
   34292:	2600      	movs	r6, #0
   34294:	2700      	movs	r7, #0
   34296:	e6ea      	b.n	3406e <__aeabi_dsub+0x182>
   34298:	001e      	movs	r6, r3
   3429a:	e6ad      	b.n	33ff8 <__aeabi_dsub+0x10c>
   3429c:	2b1f      	cmp	r3, #31
   3429e:	dc60      	bgt.n	34362 <__aeabi_dsub+0x476>
   342a0:	2720      	movs	r7, #32
   342a2:	1af8      	subs	r0, r7, r3
   342a4:	000f      	movs	r7, r1
   342a6:	4684      	mov	ip, r0
   342a8:	4087      	lsls	r7, r0
   342aa:	0010      	movs	r0, r2
   342ac:	40d8      	lsrs	r0, r3
   342ae:	4307      	orrs	r7, r0
   342b0:	4660      	mov	r0, ip
   342b2:	4082      	lsls	r2, r0
   342b4:	1e50      	subs	r0, r2, #1
   342b6:	4182      	sbcs	r2, r0
   342b8:	40d9      	lsrs	r1, r3
   342ba:	4317      	orrs	r7, r2
   342bc:	e6f5      	b.n	340aa <__aeabi_dsub+0x1be>
   342be:	0026      	movs	r6, r4
   342c0:	4650      	mov	r0, sl
   342c2:	4306      	orrs	r6, r0
   342c4:	d005      	beq.n	342d2 <__aeabi_dsub+0x3e6>
   342c6:	43ed      	mvns	r5, r5
   342c8:	2d00      	cmp	r5, #0
   342ca:	d0d3      	beq.n	34274 <__aeabi_dsub+0x388>
   342cc:	4e90      	ldr	r6, [pc, #576]	; (34510 <__aeabi_dsub+0x624>)
   342ce:	45b4      	cmp	ip, r6
   342d0:	d1bd      	bne.n	3424e <__aeabi_dsub+0x362>
   342d2:	000c      	movs	r4, r1
   342d4:	0017      	movs	r7, r2
   342d6:	4666      	mov	r6, ip
   342d8:	4698      	mov	r8, r3
   342da:	e68d      	b.n	33ff8 <__aeabi_dsub+0x10c>
   342dc:	488c      	ldr	r0, [pc, #560]	; (34510 <__aeabi_dsub+0x624>)
   342de:	4283      	cmp	r3, r0
   342e0:	d00b      	beq.n	342fa <__aeabi_dsub+0x40e>
   342e2:	4663      	mov	r3, ip
   342e4:	e6d9      	b.n	3409a <__aeabi_dsub+0x1ae>
   342e6:	2d00      	cmp	r5, #0
   342e8:	d000      	beq.n	342ec <__aeabi_dsub+0x400>
   342ea:	e096      	b.n	3441a <__aeabi_dsub+0x52e>
   342ec:	0008      	movs	r0, r1
   342ee:	4310      	orrs	r0, r2
   342f0:	d100      	bne.n	342f4 <__aeabi_dsub+0x408>
   342f2:	e0e2      	b.n	344ba <__aeabi_dsub+0x5ce>
   342f4:	000c      	movs	r4, r1
   342f6:	0017      	movs	r7, r2
   342f8:	4698      	mov	r8, r3
   342fa:	4e85      	ldr	r6, [pc, #532]	; (34510 <__aeabi_dsub+0x624>)
   342fc:	e67c      	b.n	33ff8 <__aeabi_dsub+0x10c>
   342fe:	2500      	movs	r5, #0
   34300:	e780      	b.n	34204 <__aeabi_dsub+0x318>
   34302:	2100      	movs	r1, #0
   34304:	e78e      	b.n	34224 <__aeabi_dsub+0x338>
   34306:	0023      	movs	r3, r4
   34308:	4650      	mov	r0, sl
   3430a:	4303      	orrs	r3, r0
   3430c:	2e00      	cmp	r6, #0
   3430e:	d000      	beq.n	34312 <__aeabi_dsub+0x426>
   34310:	e0a8      	b.n	34464 <__aeabi_dsub+0x578>
   34312:	2b00      	cmp	r3, #0
   34314:	d100      	bne.n	34318 <__aeabi_dsub+0x42c>
   34316:	e0de      	b.n	344d6 <__aeabi_dsub+0x5ea>
   34318:	000b      	movs	r3, r1
   3431a:	4313      	orrs	r3, r2
   3431c:	d100      	bne.n	34320 <__aeabi_dsub+0x434>
   3431e:	e66b      	b.n	33ff8 <__aeabi_dsub+0x10c>
   34320:	4452      	add	r2, sl
   34322:	4552      	cmp	r2, sl
   34324:	4180      	sbcs	r0, r0
   34326:	1864      	adds	r4, r4, r1
   34328:	4240      	negs	r0, r0
   3432a:	1824      	adds	r4, r4, r0
   3432c:	0017      	movs	r7, r2
   3432e:	0223      	lsls	r3, r4, #8
   34330:	d400      	bmi.n	34334 <__aeabi_dsub+0x448>
   34332:	e6fd      	b.n	34130 <__aeabi_dsub+0x244>
   34334:	4b77      	ldr	r3, [pc, #476]	; (34514 <__aeabi_dsub+0x628>)
   34336:	4666      	mov	r6, ip
   34338:	401c      	ands	r4, r3
   3433a:	e65d      	b.n	33ff8 <__aeabi_dsub+0x10c>
   3433c:	0025      	movs	r5, r4
   3433e:	4650      	mov	r0, sl
   34340:	4305      	orrs	r5, r0
   34342:	2e00      	cmp	r6, #0
   34344:	d1cf      	bne.n	342e6 <__aeabi_dsub+0x3fa>
   34346:	2d00      	cmp	r5, #0
   34348:	d14f      	bne.n	343ea <__aeabi_dsub+0x4fe>
   3434a:	000c      	movs	r4, r1
   3434c:	4314      	orrs	r4, r2
   3434e:	d100      	bne.n	34352 <__aeabi_dsub+0x466>
   34350:	e0a0      	b.n	34494 <__aeabi_dsub+0x5a8>
   34352:	000c      	movs	r4, r1
   34354:	0017      	movs	r7, r2
   34356:	4698      	mov	r8, r3
   34358:	e64e      	b.n	33ff8 <__aeabi_dsub+0x10c>
   3435a:	4666      	mov	r6, ip
   3435c:	2400      	movs	r4, #0
   3435e:	2700      	movs	r7, #0
   34360:	e685      	b.n	3406e <__aeabi_dsub+0x182>
   34362:	001f      	movs	r7, r3
   34364:	0008      	movs	r0, r1
   34366:	3f20      	subs	r7, #32
   34368:	40f8      	lsrs	r0, r7
   3436a:	0007      	movs	r7, r0
   3436c:	2b20      	cmp	r3, #32
   3436e:	d100      	bne.n	34372 <__aeabi_dsub+0x486>
   34370:	e08e      	b.n	34490 <__aeabi_dsub+0x5a4>
   34372:	2040      	movs	r0, #64	; 0x40
   34374:	1ac3      	subs	r3, r0, r3
   34376:	4099      	lsls	r1, r3
   34378:	430a      	orrs	r2, r1
   3437a:	1e51      	subs	r1, r2, #1
   3437c:	418a      	sbcs	r2, r1
   3437e:	2100      	movs	r1, #0
   34380:	4317      	orrs	r7, r2
   34382:	e692      	b.n	340aa <__aeabi_dsub+0x1be>
   34384:	2e00      	cmp	r6, #0
   34386:	d114      	bne.n	343b2 <__aeabi_dsub+0x4c6>
   34388:	0026      	movs	r6, r4
   3438a:	4650      	mov	r0, sl
   3438c:	4306      	orrs	r6, r0
   3438e:	d062      	beq.n	34456 <__aeabi_dsub+0x56a>
   34390:	43db      	mvns	r3, r3
   34392:	2b00      	cmp	r3, #0
   34394:	d15c      	bne.n	34450 <__aeabi_dsub+0x564>
   34396:	1887      	adds	r7, r0, r2
   34398:	4297      	cmp	r7, r2
   3439a:	4192      	sbcs	r2, r2
   3439c:	1864      	adds	r4, r4, r1
   3439e:	4252      	negs	r2, r2
   343a0:	18a4      	adds	r4, r4, r2
   343a2:	4666      	mov	r6, ip
   343a4:	e687      	b.n	340b6 <__aeabi_dsub+0x1ca>
   343a6:	4650      	mov	r0, sl
   343a8:	4320      	orrs	r0, r4
   343aa:	1e44      	subs	r4, r0, #1
   343ac:	41a0      	sbcs	r0, r4
   343ae:	2400      	movs	r4, #0
   343b0:	e760      	b.n	34274 <__aeabi_dsub+0x388>
   343b2:	4e57      	ldr	r6, [pc, #348]	; (34510 <__aeabi_dsub+0x624>)
   343b4:	45b4      	cmp	ip, r6
   343b6:	d04e      	beq.n	34456 <__aeabi_dsub+0x56a>
   343b8:	2680      	movs	r6, #128	; 0x80
   343ba:	0436      	lsls	r6, r6, #16
   343bc:	425b      	negs	r3, r3
   343be:	4334      	orrs	r4, r6
   343c0:	2b38      	cmp	r3, #56	; 0x38
   343c2:	dd00      	ble.n	343c6 <__aeabi_dsub+0x4da>
   343c4:	e07f      	b.n	344c6 <__aeabi_dsub+0x5da>
   343c6:	2b1f      	cmp	r3, #31
   343c8:	dd00      	ble.n	343cc <__aeabi_dsub+0x4e0>
   343ca:	e08b      	b.n	344e4 <__aeabi_dsub+0x5f8>
   343cc:	2620      	movs	r6, #32
   343ce:	0027      	movs	r7, r4
   343d0:	4650      	mov	r0, sl
   343d2:	1af6      	subs	r6, r6, r3
   343d4:	40b7      	lsls	r7, r6
   343d6:	40d8      	lsrs	r0, r3
   343d8:	4307      	orrs	r7, r0
   343da:	4650      	mov	r0, sl
   343dc:	40b0      	lsls	r0, r6
   343de:	1e46      	subs	r6, r0, #1
   343e0:	41b0      	sbcs	r0, r6
   343e2:	4307      	orrs	r7, r0
   343e4:	40dc      	lsrs	r4, r3
   343e6:	18bf      	adds	r7, r7, r2
   343e8:	e7d6      	b.n	34398 <__aeabi_dsub+0x4ac>
   343ea:	000d      	movs	r5, r1
   343ec:	4315      	orrs	r5, r2
   343ee:	d100      	bne.n	343f2 <__aeabi_dsub+0x506>
   343f0:	e602      	b.n	33ff8 <__aeabi_dsub+0x10c>
   343f2:	4650      	mov	r0, sl
   343f4:	1a80      	subs	r0, r0, r2
   343f6:	4582      	cmp	sl, r0
   343f8:	41bf      	sbcs	r7, r7
   343fa:	1a65      	subs	r5, r4, r1
   343fc:	427f      	negs	r7, r7
   343fe:	1bed      	subs	r5, r5, r7
   34400:	4684      	mov	ip, r0
   34402:	0228      	lsls	r0, r5, #8
   34404:	d400      	bmi.n	34408 <__aeabi_dsub+0x51c>
   34406:	e68d      	b.n	34124 <__aeabi_dsub+0x238>
   34408:	4650      	mov	r0, sl
   3440a:	1a17      	subs	r7, r2, r0
   3440c:	42ba      	cmp	r2, r7
   3440e:	4192      	sbcs	r2, r2
   34410:	1b0c      	subs	r4, r1, r4
   34412:	4252      	negs	r2, r2
   34414:	1aa4      	subs	r4, r4, r2
   34416:	4698      	mov	r8, r3
   34418:	e5ee      	b.n	33ff8 <__aeabi_dsub+0x10c>
   3441a:	000d      	movs	r5, r1
   3441c:	4315      	orrs	r5, r2
   3441e:	d100      	bne.n	34422 <__aeabi_dsub+0x536>
   34420:	e76b      	b.n	342fa <__aeabi_dsub+0x40e>
   34422:	4650      	mov	r0, sl
   34424:	0767      	lsls	r7, r4, #29
   34426:	08c0      	lsrs	r0, r0, #3
   34428:	4307      	orrs	r7, r0
   3442a:	2080      	movs	r0, #128	; 0x80
   3442c:	08e4      	lsrs	r4, r4, #3
   3442e:	0300      	lsls	r0, r0, #12
   34430:	4204      	tst	r4, r0
   34432:	d007      	beq.n	34444 <__aeabi_dsub+0x558>
   34434:	08cd      	lsrs	r5, r1, #3
   34436:	4205      	tst	r5, r0
   34438:	d104      	bne.n	34444 <__aeabi_dsub+0x558>
   3443a:	002c      	movs	r4, r5
   3443c:	4698      	mov	r8, r3
   3443e:	08d7      	lsrs	r7, r2, #3
   34440:	0749      	lsls	r1, r1, #29
   34442:	430f      	orrs	r7, r1
   34444:	0f7b      	lsrs	r3, r7, #29
   34446:	00e4      	lsls	r4, r4, #3
   34448:	431c      	orrs	r4, r3
   3444a:	00ff      	lsls	r7, r7, #3
   3444c:	4e30      	ldr	r6, [pc, #192]	; (34510 <__aeabi_dsub+0x624>)
   3444e:	e5d3      	b.n	33ff8 <__aeabi_dsub+0x10c>
   34450:	4e2f      	ldr	r6, [pc, #188]	; (34510 <__aeabi_dsub+0x624>)
   34452:	45b4      	cmp	ip, r6
   34454:	d1b4      	bne.n	343c0 <__aeabi_dsub+0x4d4>
   34456:	000c      	movs	r4, r1
   34458:	0017      	movs	r7, r2
   3445a:	4666      	mov	r6, ip
   3445c:	e5cc      	b.n	33ff8 <__aeabi_dsub+0x10c>
   3445e:	2700      	movs	r7, #0
   34460:	2400      	movs	r4, #0
   34462:	e5e8      	b.n	34036 <__aeabi_dsub+0x14a>
   34464:	2b00      	cmp	r3, #0
   34466:	d039      	beq.n	344dc <__aeabi_dsub+0x5f0>
   34468:	000b      	movs	r3, r1
   3446a:	4313      	orrs	r3, r2
   3446c:	d100      	bne.n	34470 <__aeabi_dsub+0x584>
   3446e:	e744      	b.n	342fa <__aeabi_dsub+0x40e>
   34470:	08c0      	lsrs	r0, r0, #3
   34472:	0767      	lsls	r7, r4, #29
   34474:	4307      	orrs	r7, r0
   34476:	2080      	movs	r0, #128	; 0x80
   34478:	08e4      	lsrs	r4, r4, #3
   3447a:	0300      	lsls	r0, r0, #12
   3447c:	4204      	tst	r4, r0
   3447e:	d0e1      	beq.n	34444 <__aeabi_dsub+0x558>
   34480:	08cb      	lsrs	r3, r1, #3
   34482:	4203      	tst	r3, r0
   34484:	d1de      	bne.n	34444 <__aeabi_dsub+0x558>
   34486:	08d7      	lsrs	r7, r2, #3
   34488:	0749      	lsls	r1, r1, #29
   3448a:	430f      	orrs	r7, r1
   3448c:	001c      	movs	r4, r3
   3448e:	e7d9      	b.n	34444 <__aeabi_dsub+0x558>
   34490:	2100      	movs	r1, #0
   34492:	e771      	b.n	34378 <__aeabi_dsub+0x48c>
   34494:	2500      	movs	r5, #0
   34496:	2700      	movs	r7, #0
   34498:	e5e9      	b.n	3406e <__aeabi_dsub+0x182>
   3449a:	002e      	movs	r6, r5
   3449c:	0027      	movs	r7, r4
   3449e:	3e20      	subs	r6, #32
   344a0:	40f7      	lsrs	r7, r6
   344a2:	2d20      	cmp	r5, #32
   344a4:	d02f      	beq.n	34506 <__aeabi_dsub+0x61a>
   344a6:	2640      	movs	r6, #64	; 0x40
   344a8:	1b75      	subs	r5, r6, r5
   344aa:	40ac      	lsls	r4, r5
   344ac:	4650      	mov	r0, sl
   344ae:	4320      	orrs	r0, r4
   344b0:	1e44      	subs	r4, r0, #1
   344b2:	41a0      	sbcs	r0, r4
   344b4:	2400      	movs	r4, #0
   344b6:	4338      	orrs	r0, r7
   344b8:	e6dc      	b.n	34274 <__aeabi_dsub+0x388>
   344ba:	2480      	movs	r4, #128	; 0x80
   344bc:	2500      	movs	r5, #0
   344be:	0324      	lsls	r4, r4, #12
   344c0:	4e13      	ldr	r6, [pc, #76]	; (34510 <__aeabi_dsub+0x624>)
   344c2:	2700      	movs	r7, #0
   344c4:	e5d3      	b.n	3406e <__aeabi_dsub+0x182>
   344c6:	4650      	mov	r0, sl
   344c8:	4320      	orrs	r0, r4
   344ca:	0007      	movs	r7, r0
   344cc:	1e78      	subs	r0, r7, #1
   344ce:	4187      	sbcs	r7, r0
   344d0:	2400      	movs	r4, #0
   344d2:	18bf      	adds	r7, r7, r2
   344d4:	e760      	b.n	34398 <__aeabi_dsub+0x4ac>
   344d6:	000c      	movs	r4, r1
   344d8:	0017      	movs	r7, r2
   344da:	e58d      	b.n	33ff8 <__aeabi_dsub+0x10c>
   344dc:	000c      	movs	r4, r1
   344de:	0017      	movs	r7, r2
   344e0:	4e0b      	ldr	r6, [pc, #44]	; (34510 <__aeabi_dsub+0x624>)
   344e2:	e589      	b.n	33ff8 <__aeabi_dsub+0x10c>
   344e4:	001e      	movs	r6, r3
   344e6:	0027      	movs	r7, r4
   344e8:	3e20      	subs	r6, #32
   344ea:	40f7      	lsrs	r7, r6
   344ec:	2b20      	cmp	r3, #32
   344ee:	d00c      	beq.n	3450a <__aeabi_dsub+0x61e>
   344f0:	2640      	movs	r6, #64	; 0x40
   344f2:	1af3      	subs	r3, r6, r3
   344f4:	409c      	lsls	r4, r3
   344f6:	4650      	mov	r0, sl
   344f8:	4320      	orrs	r0, r4
   344fa:	1e44      	subs	r4, r0, #1
   344fc:	41a0      	sbcs	r0, r4
   344fe:	4307      	orrs	r7, r0
   34500:	2400      	movs	r4, #0
   34502:	18bf      	adds	r7, r7, r2
   34504:	e748      	b.n	34398 <__aeabi_dsub+0x4ac>
   34506:	2400      	movs	r4, #0
   34508:	e7d0      	b.n	344ac <__aeabi_dsub+0x5c0>
   3450a:	2400      	movs	r4, #0
   3450c:	e7f3      	b.n	344f6 <__aeabi_dsub+0x60a>
   3450e:	46c0      	nop			; (mov r8, r8)
   34510:	000007ff 	.word	0x000007ff
   34514:	ff7fffff 	.word	0xff7fffff

00034518 <__aeabi_d2iz>:
   34518:	b530      	push	{r4, r5, lr}
   3451a:	4d13      	ldr	r5, [pc, #76]	; (34568 <__aeabi_d2iz+0x50>)
   3451c:	030a      	lsls	r2, r1, #12
   3451e:	004b      	lsls	r3, r1, #1
   34520:	0b12      	lsrs	r2, r2, #12
   34522:	0d5b      	lsrs	r3, r3, #21
   34524:	0fc9      	lsrs	r1, r1, #31
   34526:	2400      	movs	r4, #0
   34528:	42ab      	cmp	r3, r5
   3452a:	dd10      	ble.n	3454e <__aeabi_d2iz+0x36>
   3452c:	4c0f      	ldr	r4, [pc, #60]	; (3456c <__aeabi_d2iz+0x54>)
   3452e:	42a3      	cmp	r3, r4
   34530:	dc0f      	bgt.n	34552 <__aeabi_d2iz+0x3a>
   34532:	2480      	movs	r4, #128	; 0x80
   34534:	4d0e      	ldr	r5, [pc, #56]	; (34570 <__aeabi_d2iz+0x58>)
   34536:	0364      	lsls	r4, r4, #13
   34538:	4322      	orrs	r2, r4
   3453a:	1aed      	subs	r5, r5, r3
   3453c:	2d1f      	cmp	r5, #31
   3453e:	dd0b      	ble.n	34558 <__aeabi_d2iz+0x40>
   34540:	480c      	ldr	r0, [pc, #48]	; (34574 <__aeabi_d2iz+0x5c>)
   34542:	1ac3      	subs	r3, r0, r3
   34544:	40da      	lsrs	r2, r3
   34546:	4254      	negs	r4, r2
   34548:	2900      	cmp	r1, #0
   3454a:	d100      	bne.n	3454e <__aeabi_d2iz+0x36>
   3454c:	0014      	movs	r4, r2
   3454e:	0020      	movs	r0, r4
   34550:	bd30      	pop	{r4, r5, pc}
   34552:	4b09      	ldr	r3, [pc, #36]	; (34578 <__aeabi_d2iz+0x60>)
   34554:	18cc      	adds	r4, r1, r3
   34556:	e7fa      	b.n	3454e <__aeabi_d2iz+0x36>
   34558:	4c08      	ldr	r4, [pc, #32]	; (3457c <__aeabi_d2iz+0x64>)
   3455a:	40e8      	lsrs	r0, r5
   3455c:	46a4      	mov	ip, r4
   3455e:	4463      	add	r3, ip
   34560:	409a      	lsls	r2, r3
   34562:	4302      	orrs	r2, r0
   34564:	e7ef      	b.n	34546 <__aeabi_d2iz+0x2e>
   34566:	46c0      	nop			; (mov r8, r8)
   34568:	000003fe 	.word	0x000003fe
   3456c:	0000041d 	.word	0x0000041d
   34570:	00000433 	.word	0x00000433
   34574:	00000413 	.word	0x00000413
   34578:	7fffffff 	.word	0x7fffffff
   3457c:	fffffbed 	.word	0xfffffbed

00034580 <__aeabi_ui2d>:
   34580:	b510      	push	{r4, lr}
   34582:	1e04      	subs	r4, r0, #0
   34584:	d028      	beq.n	345d8 <__aeabi_ui2d+0x58>
   34586:	f000 f833 	bl	345f0 <__clzsi2>
   3458a:	4b15      	ldr	r3, [pc, #84]	; (345e0 <__aeabi_ui2d+0x60>)
   3458c:	4a15      	ldr	r2, [pc, #84]	; (345e4 <__aeabi_ui2d+0x64>)
   3458e:	1a1b      	subs	r3, r3, r0
   34590:	1ad2      	subs	r2, r2, r3
   34592:	2a1f      	cmp	r2, #31
   34594:	dd15      	ble.n	345c2 <__aeabi_ui2d+0x42>
   34596:	4a14      	ldr	r2, [pc, #80]	; (345e8 <__aeabi_ui2d+0x68>)
   34598:	1ad2      	subs	r2, r2, r3
   3459a:	4094      	lsls	r4, r2
   3459c:	2200      	movs	r2, #0
   3459e:	0324      	lsls	r4, r4, #12
   345a0:	055b      	lsls	r3, r3, #21
   345a2:	0b24      	lsrs	r4, r4, #12
   345a4:	0d5b      	lsrs	r3, r3, #21
   345a6:	2100      	movs	r1, #0
   345a8:	0010      	movs	r0, r2
   345aa:	0324      	lsls	r4, r4, #12
   345ac:	0d0a      	lsrs	r2, r1, #20
   345ae:	0b24      	lsrs	r4, r4, #12
   345b0:	0512      	lsls	r2, r2, #20
   345b2:	4322      	orrs	r2, r4
   345b4:	4c0d      	ldr	r4, [pc, #52]	; (345ec <__aeabi_ui2d+0x6c>)
   345b6:	051b      	lsls	r3, r3, #20
   345b8:	4022      	ands	r2, r4
   345ba:	4313      	orrs	r3, r2
   345bc:	005b      	lsls	r3, r3, #1
   345be:	0859      	lsrs	r1, r3, #1
   345c0:	bd10      	pop	{r4, pc}
   345c2:	0021      	movs	r1, r4
   345c4:	4091      	lsls	r1, r2
   345c6:	000a      	movs	r2, r1
   345c8:	210b      	movs	r1, #11
   345ca:	1a08      	subs	r0, r1, r0
   345cc:	40c4      	lsrs	r4, r0
   345ce:	055b      	lsls	r3, r3, #21
   345d0:	0324      	lsls	r4, r4, #12
   345d2:	0b24      	lsrs	r4, r4, #12
   345d4:	0d5b      	lsrs	r3, r3, #21
   345d6:	e7e6      	b.n	345a6 <__aeabi_ui2d+0x26>
   345d8:	2300      	movs	r3, #0
   345da:	2400      	movs	r4, #0
   345dc:	2200      	movs	r2, #0
   345de:	e7e2      	b.n	345a6 <__aeabi_ui2d+0x26>
   345e0:	0000041e 	.word	0x0000041e
   345e4:	00000433 	.word	0x00000433
   345e8:	00000413 	.word	0x00000413
   345ec:	800fffff 	.word	0x800fffff

000345f0 <__clzsi2>:
   345f0:	211c      	movs	r1, #28
   345f2:	2301      	movs	r3, #1
   345f4:	041b      	lsls	r3, r3, #16
   345f6:	4298      	cmp	r0, r3
   345f8:	d301      	bcc.n	345fe <__clzsi2+0xe>
   345fa:	0c00      	lsrs	r0, r0, #16
   345fc:	3910      	subs	r1, #16
   345fe:	0a1b      	lsrs	r3, r3, #8
   34600:	4298      	cmp	r0, r3
   34602:	d301      	bcc.n	34608 <__clzsi2+0x18>
   34604:	0a00      	lsrs	r0, r0, #8
   34606:	3908      	subs	r1, #8
   34608:	091b      	lsrs	r3, r3, #4
   3460a:	4298      	cmp	r0, r3
   3460c:	d301      	bcc.n	34612 <__clzsi2+0x22>
   3460e:	0900      	lsrs	r0, r0, #4
   34610:	3904      	subs	r1, #4
   34612:	a202      	add	r2, pc, #8	; (adr r2, 3461c <__clzsi2+0x2c>)
   34614:	5c10      	ldrb	r0, [r2, r0]
   34616:	1840      	adds	r0, r0, r1
   34618:	4770      	bx	lr
   3461a:	46c0      	nop			; (mov r8, r8)
   3461c:	02020304 	.word	0x02020304
   34620:	01010101 	.word	0x01010101
	...

0003462c <atoi>:
   3462c:	b510      	push	{r4, lr}
   3462e:	220a      	movs	r2, #10
   34630:	2100      	movs	r1, #0
   34632:	f000 fb0d 	bl	34c50 <strtol>
   34636:	bd10      	pop	{r4, pc}

00034638 <__libc_init_array>:
   34638:	b570      	push	{r4, r5, r6, lr}
   3463a:	2600      	movs	r6, #0
   3463c:	4d0c      	ldr	r5, [pc, #48]	; (34670 <__libc_init_array+0x38>)
   3463e:	4c0d      	ldr	r4, [pc, #52]	; (34674 <__libc_init_array+0x3c>)
   34640:	1b64      	subs	r4, r4, r5
   34642:	10a4      	asrs	r4, r4, #2
   34644:	42a6      	cmp	r6, r4
   34646:	d109      	bne.n	3465c <__libc_init_array+0x24>
   34648:	2600      	movs	r6, #0
   3464a:	f005 fce5 	bl	3a018 <_init>
   3464e:	4d0a      	ldr	r5, [pc, #40]	; (34678 <__libc_init_array+0x40>)
   34650:	4c0a      	ldr	r4, [pc, #40]	; (3467c <__libc_init_array+0x44>)
   34652:	1b64      	subs	r4, r4, r5
   34654:	10a4      	asrs	r4, r4, #2
   34656:	42a6      	cmp	r6, r4
   34658:	d105      	bne.n	34666 <__libc_init_array+0x2e>
   3465a:	bd70      	pop	{r4, r5, r6, pc}
   3465c:	00b3      	lsls	r3, r6, #2
   3465e:	58eb      	ldr	r3, [r5, r3]
   34660:	4798      	blx	r3
   34662:	3601      	adds	r6, #1
   34664:	e7ee      	b.n	34644 <__libc_init_array+0xc>
   34666:	00b3      	lsls	r3, r6, #2
   34668:	58eb      	ldr	r3, [r5, r3]
   3466a:	4798      	blx	r3
   3466c:	3601      	adds	r6, #1
   3466e:	e7f2      	b.n	34656 <__libc_init_array+0x1e>
   34670:	0003a024 	.word	0x0003a024
   34674:	0003a024 	.word	0x0003a024
   34678:	0003a024 	.word	0x0003a024
   3467c:	0003a028 	.word	0x0003a028

00034680 <malloc>:
   34680:	b510      	push	{r4, lr}
   34682:	4b03      	ldr	r3, [pc, #12]	; (34690 <malloc+0x10>)
   34684:	0001      	movs	r1, r0
   34686:	6818      	ldr	r0, [r3, #0]
   34688:	f000 f87c 	bl	34784 <_malloc_r>
   3468c:	bd10      	pop	{r4, pc}
   3468e:	46c0      	nop			; (mov r8, r8)
   34690:	20000150 	.word	0x20000150

00034694 <free>:
   34694:	b510      	push	{r4, lr}
   34696:	4b03      	ldr	r3, [pc, #12]	; (346a4 <free+0x10>)
   34698:	0001      	movs	r1, r0
   3469a:	6818      	ldr	r0, [r3, #0]
   3469c:	f000 f828 	bl	346f0 <_free_r>
   346a0:	bd10      	pop	{r4, pc}
   346a2:	46c0      	nop			; (mov r8, r8)
   346a4:	20000150 	.word	0x20000150

000346a8 <memcpy>:
   346a8:	2300      	movs	r3, #0
   346aa:	b510      	push	{r4, lr}
   346ac:	429a      	cmp	r2, r3
   346ae:	d100      	bne.n	346b2 <memcpy+0xa>
   346b0:	bd10      	pop	{r4, pc}
   346b2:	5ccc      	ldrb	r4, [r1, r3]
   346b4:	54c4      	strb	r4, [r0, r3]
   346b6:	3301      	adds	r3, #1
   346b8:	e7f8      	b.n	346ac <memcpy+0x4>

000346ba <memmove>:
   346ba:	b510      	push	{r4, lr}
   346bc:	4288      	cmp	r0, r1
   346be:	d902      	bls.n	346c6 <memmove+0xc>
   346c0:	188b      	adds	r3, r1, r2
   346c2:	4298      	cmp	r0, r3
   346c4:	d308      	bcc.n	346d8 <memmove+0x1e>
   346c6:	2300      	movs	r3, #0
   346c8:	429a      	cmp	r2, r3
   346ca:	d007      	beq.n	346dc <memmove+0x22>
   346cc:	5ccc      	ldrb	r4, [r1, r3]
   346ce:	54c4      	strb	r4, [r0, r3]
   346d0:	3301      	adds	r3, #1
   346d2:	e7f9      	b.n	346c8 <memmove+0xe>
   346d4:	5c8b      	ldrb	r3, [r1, r2]
   346d6:	5483      	strb	r3, [r0, r2]
   346d8:	3a01      	subs	r2, #1
   346da:	d2fb      	bcs.n	346d4 <memmove+0x1a>
   346dc:	bd10      	pop	{r4, pc}

000346de <memset>:
   346de:	0003      	movs	r3, r0
   346e0:	1882      	adds	r2, r0, r2
   346e2:	4293      	cmp	r3, r2
   346e4:	d100      	bne.n	346e8 <memset+0xa>
   346e6:	4770      	bx	lr
   346e8:	7019      	strb	r1, [r3, #0]
   346ea:	3301      	adds	r3, #1
   346ec:	e7f9      	b.n	346e2 <memset+0x4>
	...

000346f0 <_free_r>:
   346f0:	b570      	push	{r4, r5, r6, lr}
   346f2:	0005      	movs	r5, r0
   346f4:	2900      	cmp	r1, #0
   346f6:	d010      	beq.n	3471a <_free_r+0x2a>
   346f8:	1f0c      	subs	r4, r1, #4
   346fa:	6823      	ldr	r3, [r4, #0]
   346fc:	2b00      	cmp	r3, #0
   346fe:	da00      	bge.n	34702 <_free_r+0x12>
   34700:	18e4      	adds	r4, r4, r3
   34702:	0028      	movs	r0, r5
   34704:	f000 fdd8 	bl	352b8 <__malloc_lock>
   34708:	4a1d      	ldr	r2, [pc, #116]	; (34780 <_free_r+0x90>)
   3470a:	6813      	ldr	r3, [r2, #0]
   3470c:	2b00      	cmp	r3, #0
   3470e:	d105      	bne.n	3471c <_free_r+0x2c>
   34710:	6063      	str	r3, [r4, #4]
   34712:	6014      	str	r4, [r2, #0]
   34714:	0028      	movs	r0, r5
   34716:	f000 fdd0 	bl	352ba <__malloc_unlock>
   3471a:	bd70      	pop	{r4, r5, r6, pc}
   3471c:	42a3      	cmp	r3, r4
   3471e:	d909      	bls.n	34734 <_free_r+0x44>
   34720:	6821      	ldr	r1, [r4, #0]
   34722:	1860      	adds	r0, r4, r1
   34724:	4283      	cmp	r3, r0
   34726:	d1f3      	bne.n	34710 <_free_r+0x20>
   34728:	6818      	ldr	r0, [r3, #0]
   3472a:	685b      	ldr	r3, [r3, #4]
   3472c:	1841      	adds	r1, r0, r1
   3472e:	6021      	str	r1, [r4, #0]
   34730:	e7ee      	b.n	34710 <_free_r+0x20>
   34732:	0013      	movs	r3, r2
   34734:	685a      	ldr	r2, [r3, #4]
   34736:	2a00      	cmp	r2, #0
   34738:	d001      	beq.n	3473e <_free_r+0x4e>
   3473a:	42a2      	cmp	r2, r4
   3473c:	d9f9      	bls.n	34732 <_free_r+0x42>
   3473e:	6819      	ldr	r1, [r3, #0]
   34740:	1858      	adds	r0, r3, r1
   34742:	42a0      	cmp	r0, r4
   34744:	d10b      	bne.n	3475e <_free_r+0x6e>
   34746:	6820      	ldr	r0, [r4, #0]
   34748:	1809      	adds	r1, r1, r0
   3474a:	1858      	adds	r0, r3, r1
   3474c:	6019      	str	r1, [r3, #0]
   3474e:	4282      	cmp	r2, r0
   34750:	d1e0      	bne.n	34714 <_free_r+0x24>
   34752:	6810      	ldr	r0, [r2, #0]
   34754:	6852      	ldr	r2, [r2, #4]
   34756:	1841      	adds	r1, r0, r1
   34758:	6019      	str	r1, [r3, #0]
   3475a:	605a      	str	r2, [r3, #4]
   3475c:	e7da      	b.n	34714 <_free_r+0x24>
   3475e:	42a0      	cmp	r0, r4
   34760:	d902      	bls.n	34768 <_free_r+0x78>
   34762:	230c      	movs	r3, #12
   34764:	602b      	str	r3, [r5, #0]
   34766:	e7d5      	b.n	34714 <_free_r+0x24>
   34768:	6821      	ldr	r1, [r4, #0]
   3476a:	1860      	adds	r0, r4, r1
   3476c:	4282      	cmp	r2, r0
   3476e:	d103      	bne.n	34778 <_free_r+0x88>
   34770:	6810      	ldr	r0, [r2, #0]
   34772:	6852      	ldr	r2, [r2, #4]
   34774:	1841      	adds	r1, r0, r1
   34776:	6021      	str	r1, [r4, #0]
   34778:	6062      	str	r2, [r4, #4]
   3477a:	605c      	str	r4, [r3, #4]
   3477c:	e7ca      	b.n	34714 <_free_r+0x24>
   3477e:	46c0      	nop			; (mov r8, r8)
   34780:	200045cc 	.word	0x200045cc

00034784 <_malloc_r>:
   34784:	2303      	movs	r3, #3
   34786:	b570      	push	{r4, r5, r6, lr}
   34788:	1ccd      	adds	r5, r1, #3
   3478a:	439d      	bics	r5, r3
   3478c:	3508      	adds	r5, #8
   3478e:	0006      	movs	r6, r0
   34790:	2d0c      	cmp	r5, #12
   34792:	d21e      	bcs.n	347d2 <_malloc_r+0x4e>
   34794:	250c      	movs	r5, #12
   34796:	42a9      	cmp	r1, r5
   34798:	d81d      	bhi.n	347d6 <_malloc_r+0x52>
   3479a:	0030      	movs	r0, r6
   3479c:	f000 fd8c 	bl	352b8 <__malloc_lock>
   347a0:	4a25      	ldr	r2, [pc, #148]	; (34838 <_malloc_r+0xb4>)
   347a2:	6814      	ldr	r4, [r2, #0]
   347a4:	0021      	movs	r1, r4
   347a6:	2900      	cmp	r1, #0
   347a8:	d119      	bne.n	347de <_malloc_r+0x5a>
   347aa:	4c24      	ldr	r4, [pc, #144]	; (3483c <_malloc_r+0xb8>)
   347ac:	6823      	ldr	r3, [r4, #0]
   347ae:	2b00      	cmp	r3, #0
   347b0:	d103      	bne.n	347ba <_malloc_r+0x36>
   347b2:	0030      	movs	r0, r6
   347b4:	f000 f8ae 	bl	34914 <_sbrk_r>
   347b8:	6020      	str	r0, [r4, #0]
   347ba:	0029      	movs	r1, r5
   347bc:	0030      	movs	r0, r6
   347be:	f000 f8a9 	bl	34914 <_sbrk_r>
   347c2:	1c43      	adds	r3, r0, #1
   347c4:	d12c      	bne.n	34820 <_malloc_r+0x9c>
   347c6:	230c      	movs	r3, #12
   347c8:	0030      	movs	r0, r6
   347ca:	6033      	str	r3, [r6, #0]
   347cc:	f000 fd75 	bl	352ba <__malloc_unlock>
   347d0:	e003      	b.n	347da <_malloc_r+0x56>
   347d2:	2d00      	cmp	r5, #0
   347d4:	dadf      	bge.n	34796 <_malloc_r+0x12>
   347d6:	230c      	movs	r3, #12
   347d8:	6033      	str	r3, [r6, #0]
   347da:	2000      	movs	r0, #0
   347dc:	bd70      	pop	{r4, r5, r6, pc}
   347de:	680b      	ldr	r3, [r1, #0]
   347e0:	1b5b      	subs	r3, r3, r5
   347e2:	d41a      	bmi.n	3481a <_malloc_r+0x96>
   347e4:	2b0b      	cmp	r3, #11
   347e6:	d903      	bls.n	347f0 <_malloc_r+0x6c>
   347e8:	600b      	str	r3, [r1, #0]
   347ea:	18cc      	adds	r4, r1, r3
   347ec:	6025      	str	r5, [r4, #0]
   347ee:	e003      	b.n	347f8 <_malloc_r+0x74>
   347f0:	428c      	cmp	r4, r1
   347f2:	d10e      	bne.n	34812 <_malloc_r+0x8e>
   347f4:	6863      	ldr	r3, [r4, #4]
   347f6:	6013      	str	r3, [r2, #0]
   347f8:	0030      	movs	r0, r6
   347fa:	f000 fd5e 	bl	352ba <__malloc_unlock>
   347fe:	0020      	movs	r0, r4
   34800:	2207      	movs	r2, #7
   34802:	300b      	adds	r0, #11
   34804:	1d23      	adds	r3, r4, #4
   34806:	4390      	bics	r0, r2
   34808:	1ac3      	subs	r3, r0, r3
   3480a:	d0e7      	beq.n	347dc <_malloc_r+0x58>
   3480c:	425a      	negs	r2, r3
   3480e:	50e2      	str	r2, [r4, r3]
   34810:	e7e4      	b.n	347dc <_malloc_r+0x58>
   34812:	684b      	ldr	r3, [r1, #4]
   34814:	6063      	str	r3, [r4, #4]
   34816:	000c      	movs	r4, r1
   34818:	e7ee      	b.n	347f8 <_malloc_r+0x74>
   3481a:	000c      	movs	r4, r1
   3481c:	6849      	ldr	r1, [r1, #4]
   3481e:	e7c2      	b.n	347a6 <_malloc_r+0x22>
   34820:	2303      	movs	r3, #3
   34822:	1cc4      	adds	r4, r0, #3
   34824:	439c      	bics	r4, r3
   34826:	42a0      	cmp	r0, r4
   34828:	d0e0      	beq.n	347ec <_malloc_r+0x68>
   3482a:	1a21      	subs	r1, r4, r0
   3482c:	0030      	movs	r0, r6
   3482e:	f000 f871 	bl	34914 <_sbrk_r>
   34832:	1c43      	adds	r3, r0, #1
   34834:	d1da      	bne.n	347ec <_malloc_r+0x68>
   34836:	e7c6      	b.n	347c6 <_malloc_r+0x42>
   34838:	200045cc 	.word	0x200045cc
   3483c:	200045d0 	.word	0x200045d0

00034840 <_puts_r>:
   34840:	b570      	push	{r4, r5, r6, lr}
   34842:	0005      	movs	r5, r0
   34844:	000e      	movs	r6, r1
   34846:	2800      	cmp	r0, #0
   34848:	d004      	beq.n	34854 <_puts_r+0x14>
   3484a:	6983      	ldr	r3, [r0, #24]
   3484c:	2b00      	cmp	r3, #0
   3484e:	d101      	bne.n	34854 <_puts_r+0x14>
   34850:	f000 fc0e 	bl	35070 <__sinit>
   34854:	69ab      	ldr	r3, [r5, #24]
   34856:	68ac      	ldr	r4, [r5, #8]
   34858:	2b00      	cmp	r3, #0
   3485a:	d102      	bne.n	34862 <_puts_r+0x22>
   3485c:	0028      	movs	r0, r5
   3485e:	f000 fc07 	bl	35070 <__sinit>
   34862:	4b24      	ldr	r3, [pc, #144]	; (348f4 <_puts_r+0xb4>)
   34864:	429c      	cmp	r4, r3
   34866:	d10f      	bne.n	34888 <_puts_r+0x48>
   34868:	686c      	ldr	r4, [r5, #4]
   3486a:	89a3      	ldrh	r3, [r4, #12]
   3486c:	071b      	lsls	r3, r3, #28
   3486e:	d502      	bpl.n	34876 <_puts_r+0x36>
   34870:	6923      	ldr	r3, [r4, #16]
   34872:	2b00      	cmp	r3, #0
   34874:	d120      	bne.n	348b8 <_puts_r+0x78>
   34876:	0021      	movs	r1, r4
   34878:	0028      	movs	r0, r5
   3487a:	f000 fa8b 	bl	34d94 <__swsetup_r>
   3487e:	2800      	cmp	r0, #0
   34880:	d01a      	beq.n	348b8 <_puts_r+0x78>
   34882:	2001      	movs	r0, #1
   34884:	4240      	negs	r0, r0
   34886:	bd70      	pop	{r4, r5, r6, pc}
   34888:	4b1b      	ldr	r3, [pc, #108]	; (348f8 <_puts_r+0xb8>)
   3488a:	429c      	cmp	r4, r3
   3488c:	d101      	bne.n	34892 <_puts_r+0x52>
   3488e:	68ac      	ldr	r4, [r5, #8]
   34890:	e7eb      	b.n	3486a <_puts_r+0x2a>
   34892:	4b1a      	ldr	r3, [pc, #104]	; (348fc <_puts_r+0xbc>)
   34894:	429c      	cmp	r4, r3
   34896:	d1e8      	bne.n	3486a <_puts_r+0x2a>
   34898:	68ec      	ldr	r4, [r5, #12]
   3489a:	e7e6      	b.n	3486a <_puts_r+0x2a>
   3489c:	3b01      	subs	r3, #1
   3489e:	3601      	adds	r6, #1
   348a0:	60a3      	str	r3, [r4, #8]
   348a2:	2b00      	cmp	r3, #0
   348a4:	da04      	bge.n	348b0 <_puts_r+0x70>
   348a6:	69a2      	ldr	r2, [r4, #24]
   348a8:	4293      	cmp	r3, r2
   348aa:	db16      	blt.n	348da <_puts_r+0x9a>
   348ac:	290a      	cmp	r1, #10
   348ae:	d014      	beq.n	348da <_puts_r+0x9a>
   348b0:	6823      	ldr	r3, [r4, #0]
   348b2:	1c5a      	adds	r2, r3, #1
   348b4:	6022      	str	r2, [r4, #0]
   348b6:	7019      	strb	r1, [r3, #0]
   348b8:	7831      	ldrb	r1, [r6, #0]
   348ba:	68a3      	ldr	r3, [r4, #8]
   348bc:	2900      	cmp	r1, #0
   348be:	d1ed      	bne.n	3489c <_puts_r+0x5c>
   348c0:	3b01      	subs	r3, #1
   348c2:	60a3      	str	r3, [r4, #8]
   348c4:	2b00      	cmp	r3, #0
   348c6:	da0f      	bge.n	348e8 <_puts_r+0xa8>
   348c8:	0022      	movs	r2, r4
   348ca:	310a      	adds	r1, #10
   348cc:	0028      	movs	r0, r5
   348ce:	f000 fa0b 	bl	34ce8 <__swbuf_r>
   348d2:	1c43      	adds	r3, r0, #1
   348d4:	d0d5      	beq.n	34882 <_puts_r+0x42>
   348d6:	200a      	movs	r0, #10
   348d8:	e7d5      	b.n	34886 <_puts_r+0x46>
   348da:	0022      	movs	r2, r4
   348dc:	0028      	movs	r0, r5
   348de:	f000 fa03 	bl	34ce8 <__swbuf_r>
   348e2:	1c43      	adds	r3, r0, #1
   348e4:	d1e8      	bne.n	348b8 <_puts_r+0x78>
   348e6:	e7cc      	b.n	34882 <_puts_r+0x42>
   348e8:	200a      	movs	r0, #10
   348ea:	6823      	ldr	r3, [r4, #0]
   348ec:	1c5a      	adds	r2, r3, #1
   348ee:	6022      	str	r2, [r4, #0]
   348f0:	7018      	strb	r0, [r3, #0]
   348f2:	e7c8      	b.n	34886 <_puts_r+0x46>
   348f4:	00039e98 	.word	0x00039e98
   348f8:	00039eb8 	.word	0x00039eb8
   348fc:	00039e78 	.word	0x00039e78

00034900 <puts>:
   34900:	b510      	push	{r4, lr}
   34902:	4b03      	ldr	r3, [pc, #12]	; (34910 <puts+0x10>)
   34904:	0001      	movs	r1, r0
   34906:	6818      	ldr	r0, [r3, #0]
   34908:	f7ff ff9a 	bl	34840 <_puts_r>
   3490c:	bd10      	pop	{r4, pc}
   3490e:	46c0      	nop			; (mov r8, r8)
   34910:	20000150 	.word	0x20000150

00034914 <_sbrk_r>:
   34914:	2300      	movs	r3, #0
   34916:	b570      	push	{r4, r5, r6, lr}
   34918:	4c06      	ldr	r4, [pc, #24]	; (34934 <_sbrk_r+0x20>)
   3491a:	0005      	movs	r5, r0
   3491c:	0008      	movs	r0, r1
   3491e:	6023      	str	r3, [r4, #0]
   34920:	f7f6 fa98 	bl	2ae54 <_sbrk>
   34924:	1c43      	adds	r3, r0, #1
   34926:	d103      	bne.n	34930 <_sbrk_r+0x1c>
   34928:	6823      	ldr	r3, [r4, #0]
   3492a:	2b00      	cmp	r3, #0
   3492c:	d000      	beq.n	34930 <_sbrk_r+0x1c>
   3492e:	602b      	str	r3, [r5, #0]
   34930:	bd70      	pop	{r4, r5, r6, pc}
   34932:	46c0      	nop			; (mov r8, r8)
   34934:	20005ae8 	.word	0x20005ae8

00034938 <sniprintf>:
   34938:	b40c      	push	{r2, r3}
   3493a:	b530      	push	{r4, r5, lr}
   3493c:	4b16      	ldr	r3, [pc, #88]	; (34998 <sniprintf+0x60>)
   3493e:	b09d      	sub	sp, #116	; 0x74
   34940:	1e0c      	subs	r4, r1, #0
   34942:	681d      	ldr	r5, [r3, #0]
   34944:	da08      	bge.n	34958 <sniprintf+0x20>
   34946:	238b      	movs	r3, #139	; 0x8b
   34948:	2001      	movs	r0, #1
   3494a:	602b      	str	r3, [r5, #0]
   3494c:	4240      	negs	r0, r0
   3494e:	b01d      	add	sp, #116	; 0x74
   34950:	bc30      	pop	{r4, r5}
   34952:	bc08      	pop	{r3}
   34954:	b002      	add	sp, #8
   34956:	4718      	bx	r3
   34958:	2382      	movs	r3, #130	; 0x82
   3495a:	a902      	add	r1, sp, #8
   3495c:	009b      	lsls	r3, r3, #2
   3495e:	818b      	strh	r3, [r1, #12]
   34960:	2300      	movs	r3, #0
   34962:	9002      	str	r0, [sp, #8]
   34964:	6108      	str	r0, [r1, #16]
   34966:	429c      	cmp	r4, r3
   34968:	d000      	beq.n	3496c <sniprintf+0x34>
   3496a:	1e63      	subs	r3, r4, #1
   3496c:	608b      	str	r3, [r1, #8]
   3496e:	614b      	str	r3, [r1, #20]
   34970:	2301      	movs	r3, #1
   34972:	425b      	negs	r3, r3
   34974:	81cb      	strh	r3, [r1, #14]
   34976:	9a20      	ldr	r2, [sp, #128]	; 0x80
   34978:	ab21      	add	r3, sp, #132	; 0x84
   3497a:	0028      	movs	r0, r5
   3497c:	9301      	str	r3, [sp, #4]
   3497e:	f000 fcff 	bl	35380 <_svfiprintf_r>
   34982:	1c43      	adds	r3, r0, #1
   34984:	da01      	bge.n	3498a <sniprintf+0x52>
   34986:	238b      	movs	r3, #139	; 0x8b
   34988:	602b      	str	r3, [r5, #0]
   3498a:	2c00      	cmp	r4, #0
   3498c:	d0df      	beq.n	3494e <sniprintf+0x16>
   3498e:	2300      	movs	r3, #0
   34990:	9a02      	ldr	r2, [sp, #8]
   34992:	7013      	strb	r3, [r2, #0]
   34994:	e7db      	b.n	3494e <sniprintf+0x16>
   34996:	46c0      	nop			; (mov r8, r8)
   34998:	20000150 	.word	0x20000150

0003499c <siprintf>:
   3499c:	b40e      	push	{r1, r2, r3}
   3499e:	b510      	push	{r4, lr}
   349a0:	b09d      	sub	sp, #116	; 0x74
   349a2:	a902      	add	r1, sp, #8
   349a4:	9002      	str	r0, [sp, #8]
   349a6:	6108      	str	r0, [r1, #16]
   349a8:	480b      	ldr	r0, [pc, #44]	; (349d8 <siprintf+0x3c>)
   349aa:	2482      	movs	r4, #130	; 0x82
   349ac:	6088      	str	r0, [r1, #8]
   349ae:	6148      	str	r0, [r1, #20]
   349b0:	2001      	movs	r0, #1
   349b2:	4240      	negs	r0, r0
   349b4:	ab1f      	add	r3, sp, #124	; 0x7c
   349b6:	81c8      	strh	r0, [r1, #14]
   349b8:	4808      	ldr	r0, [pc, #32]	; (349dc <siprintf+0x40>)
   349ba:	cb04      	ldmia	r3!, {r2}
   349bc:	00a4      	lsls	r4, r4, #2
   349be:	6800      	ldr	r0, [r0, #0]
   349c0:	9301      	str	r3, [sp, #4]
   349c2:	818c      	strh	r4, [r1, #12]
   349c4:	f000 fcdc 	bl	35380 <_svfiprintf_r>
   349c8:	2300      	movs	r3, #0
   349ca:	9a02      	ldr	r2, [sp, #8]
   349cc:	7013      	strb	r3, [r2, #0]
   349ce:	b01d      	add	sp, #116	; 0x74
   349d0:	bc10      	pop	{r4}
   349d2:	bc08      	pop	{r3}
   349d4:	b003      	add	sp, #12
   349d6:	4718      	bx	r3
   349d8:	7fffffff 	.word	0x7fffffff
   349dc:	20000150 	.word	0x20000150

000349e0 <strcasecmp>:
   349e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   349e2:	0007      	movs	r7, r0
   349e4:	000e      	movs	r6, r1
   349e6:	783c      	ldrb	r4, [r7, #0]
   349e8:	f000 fbda 	bl	351a0 <__locale_ctype_ptr>
   349ec:	2203      	movs	r2, #3
   349ee:	1900      	adds	r0, r0, r4
   349f0:	7843      	ldrb	r3, [r0, #1]
   349f2:	4013      	ands	r3, r2
   349f4:	2b01      	cmp	r3, #1
   349f6:	d100      	bne.n	349fa <strcasecmp+0x1a>
   349f8:	3420      	adds	r4, #32
   349fa:	7835      	ldrb	r5, [r6, #0]
   349fc:	f000 fbd0 	bl	351a0 <__locale_ctype_ptr>
   34a00:	2203      	movs	r2, #3
   34a02:	1940      	adds	r0, r0, r5
   34a04:	7843      	ldrb	r3, [r0, #1]
   34a06:	4013      	ands	r3, r2
   34a08:	2b01      	cmp	r3, #1
   34a0a:	d100      	bne.n	34a0e <strcasecmp+0x2e>
   34a0c:	3520      	adds	r5, #32
   34a0e:	1b60      	subs	r0, r4, r5
   34a10:	d103      	bne.n	34a1a <strcasecmp+0x3a>
   34a12:	3701      	adds	r7, #1
   34a14:	3601      	adds	r6, #1
   34a16:	2d00      	cmp	r5, #0
   34a18:	d1e5      	bne.n	349e6 <strcasecmp+0x6>
   34a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00034a1c <strcat>:
   34a1c:	0002      	movs	r2, r0
   34a1e:	b510      	push	{r4, lr}
   34a20:	7813      	ldrb	r3, [r2, #0]
   34a22:	2b00      	cmp	r3, #0
   34a24:	d105      	bne.n	34a32 <strcat+0x16>
   34a26:	5ccc      	ldrb	r4, [r1, r3]
   34a28:	54d4      	strb	r4, [r2, r3]
   34a2a:	3301      	adds	r3, #1
   34a2c:	2c00      	cmp	r4, #0
   34a2e:	d1fa      	bne.n	34a26 <strcat+0xa>
   34a30:	bd10      	pop	{r4, pc}
   34a32:	3201      	adds	r2, #1
   34a34:	e7f4      	b.n	34a20 <strcat+0x4>

00034a36 <strcmp>:
   34a36:	7802      	ldrb	r2, [r0, #0]
   34a38:	780b      	ldrb	r3, [r1, #0]
   34a3a:	2a00      	cmp	r2, #0
   34a3c:	d003      	beq.n	34a46 <strcmp+0x10>
   34a3e:	3001      	adds	r0, #1
   34a40:	3101      	adds	r1, #1
   34a42:	429a      	cmp	r2, r3
   34a44:	d0f7      	beq.n	34a36 <strcmp>
   34a46:	1ad0      	subs	r0, r2, r3
   34a48:	4770      	bx	lr

00034a4a <strcpy>:
   34a4a:	1c03      	adds	r3, r0, #0
   34a4c:	780a      	ldrb	r2, [r1, #0]
   34a4e:	3101      	adds	r1, #1
   34a50:	701a      	strb	r2, [r3, #0]
   34a52:	3301      	adds	r3, #1
   34a54:	2a00      	cmp	r2, #0
   34a56:	d1f9      	bne.n	34a4c <strcpy+0x2>
   34a58:	4770      	bx	lr
	...

00034a5c <strdup>:
   34a5c:	b510      	push	{r4, lr}
   34a5e:	4b03      	ldr	r3, [pc, #12]	; (34a6c <strdup+0x10>)
   34a60:	0001      	movs	r1, r0
   34a62:	6818      	ldr	r0, [r3, #0]
   34a64:	f000 f804 	bl	34a70 <_strdup_r>
   34a68:	bd10      	pop	{r4, pc}
   34a6a:	46c0      	nop			; (mov r8, r8)
   34a6c:	20000150 	.word	0x20000150

00034a70 <_strdup_r>:
   34a70:	b570      	push	{r4, r5, r6, lr}
   34a72:	0005      	movs	r5, r0
   34a74:	0008      	movs	r0, r1
   34a76:	000e      	movs	r6, r1
   34a78:	f000 f80d 	bl	34a96 <strlen>
   34a7c:	1c44      	adds	r4, r0, #1
   34a7e:	0021      	movs	r1, r4
   34a80:	0028      	movs	r0, r5
   34a82:	f7ff fe7f 	bl	34784 <_malloc_r>
   34a86:	1e05      	subs	r5, r0, #0
   34a88:	d003      	beq.n	34a92 <_strdup_r+0x22>
   34a8a:	0022      	movs	r2, r4
   34a8c:	0031      	movs	r1, r6
   34a8e:	f7ff fe0b 	bl	346a8 <memcpy>
   34a92:	0028      	movs	r0, r5
   34a94:	bd70      	pop	{r4, r5, r6, pc}

00034a96 <strlen>:
   34a96:	2300      	movs	r3, #0
   34a98:	5cc2      	ldrb	r2, [r0, r3]
   34a9a:	3301      	adds	r3, #1
   34a9c:	2a00      	cmp	r2, #0
   34a9e:	d1fb      	bne.n	34a98 <strlen+0x2>
   34aa0:	1e58      	subs	r0, r3, #1
   34aa2:	4770      	bx	lr

00034aa4 <strncmp>:
   34aa4:	2300      	movs	r3, #0
   34aa6:	b530      	push	{r4, r5, lr}
   34aa8:	429a      	cmp	r2, r3
   34aaa:	d00a      	beq.n	34ac2 <strncmp+0x1e>
   34aac:	3a01      	subs	r2, #1
   34aae:	5cc4      	ldrb	r4, [r0, r3]
   34ab0:	5ccd      	ldrb	r5, [r1, r3]
   34ab2:	42ac      	cmp	r4, r5
   34ab4:	d104      	bne.n	34ac0 <strncmp+0x1c>
   34ab6:	429a      	cmp	r2, r3
   34ab8:	d002      	beq.n	34ac0 <strncmp+0x1c>
   34aba:	3301      	adds	r3, #1
   34abc:	2c00      	cmp	r4, #0
   34abe:	d1f6      	bne.n	34aae <strncmp+0xa>
   34ac0:	1b63      	subs	r3, r4, r5
   34ac2:	0018      	movs	r0, r3
   34ac4:	bd30      	pop	{r4, r5, pc}

00034ac6 <strncpy>:
   34ac6:	b570      	push	{r4, r5, r6, lr}
   34ac8:	0004      	movs	r4, r0
   34aca:	2a00      	cmp	r2, #0
   34acc:	d100      	bne.n	34ad0 <strncpy+0xa>
   34ace:	bd70      	pop	{r4, r5, r6, pc}
   34ad0:	780d      	ldrb	r5, [r1, #0]
   34ad2:	1e56      	subs	r6, r2, #1
   34ad4:	1c63      	adds	r3, r4, #1
   34ad6:	7025      	strb	r5, [r4, #0]
   34ad8:	3101      	adds	r1, #1
   34ada:	2d00      	cmp	r5, #0
   34adc:	d105      	bne.n	34aea <strncpy+0x24>
   34ade:	18a4      	adds	r4, r4, r2
   34ae0:	429c      	cmp	r4, r3
   34ae2:	d0f4      	beq.n	34ace <strncpy+0x8>
   34ae4:	701d      	strb	r5, [r3, #0]
   34ae6:	3301      	adds	r3, #1
   34ae8:	e7fa      	b.n	34ae0 <strncpy+0x1a>
   34aea:	001c      	movs	r4, r3
   34aec:	0032      	movs	r2, r6
   34aee:	e7ec      	b.n	34aca <strncpy+0x4>

00034af0 <strrchr>:
   34af0:	b570      	push	{r4, r5, r6, lr}
   34af2:	000d      	movs	r5, r1
   34af4:	2400      	movs	r4, #0
   34af6:	2900      	cmp	r1, #0
   34af8:	d105      	bne.n	34b06 <strrchr+0x16>
   34afa:	f000 ff19 	bl	35930 <strchr>
   34afe:	0004      	movs	r4, r0
   34b00:	e006      	b.n	34b10 <strrchr+0x20>
   34b02:	001c      	movs	r4, r3
   34b04:	1c58      	adds	r0, r3, #1
   34b06:	0029      	movs	r1, r5
   34b08:	f000 ff12 	bl	35930 <strchr>
   34b0c:	1e03      	subs	r3, r0, #0
   34b0e:	d1f8      	bne.n	34b02 <strrchr+0x12>
   34b10:	0020      	movs	r0, r4
   34b12:	bd70      	pop	{r4, r5, r6, pc}

00034b14 <strstr>:
   34b14:	b510      	push	{r4, lr}
   34b16:	0002      	movs	r2, r0
   34b18:	7800      	ldrb	r0, [r0, #0]
   34b1a:	2800      	cmp	r0, #0
   34b1c:	d104      	bne.n	34b28 <strstr+0x14>
   34b1e:	7809      	ldrb	r1, [r1, #0]
   34b20:	2900      	cmp	r1, #0
   34b22:	d00d      	beq.n	34b40 <strstr+0x2c>
   34b24:	bd10      	pop	{r4, pc}
   34b26:	3201      	adds	r2, #1
   34b28:	7810      	ldrb	r0, [r2, #0]
   34b2a:	2800      	cmp	r0, #0
   34b2c:	d0fa      	beq.n	34b24 <strstr+0x10>
   34b2e:	2300      	movs	r3, #0
   34b30:	5cc8      	ldrb	r0, [r1, r3]
   34b32:	2800      	cmp	r0, #0
   34b34:	d004      	beq.n	34b40 <strstr+0x2c>
   34b36:	5cd4      	ldrb	r4, [r2, r3]
   34b38:	4284      	cmp	r4, r0
   34b3a:	d1f4      	bne.n	34b26 <strstr+0x12>
   34b3c:	3301      	adds	r3, #1
   34b3e:	e7f7      	b.n	34b30 <strstr+0x1c>
   34b40:	0010      	movs	r0, r2
   34b42:	e7ef      	b.n	34b24 <strstr+0x10>

00034b44 <_strtol_l.isra.0>:
   34b44:	b5f0      	push	{r4, r5, r6, r7, lr}
   34b46:	001f      	movs	r7, r3
   34b48:	000e      	movs	r6, r1
   34b4a:	b087      	sub	sp, #28
   34b4c:	9005      	str	r0, [sp, #20]
   34b4e:	9103      	str	r1, [sp, #12]
   34b50:	9202      	str	r2, [sp, #8]
   34b52:	980c      	ldr	r0, [sp, #48]	; 0x30
   34b54:	7834      	ldrb	r4, [r6, #0]
   34b56:	f000 fb20 	bl	3519a <__locale_ctype_ptr_l>
   34b5a:	2208      	movs	r2, #8
   34b5c:	1900      	adds	r0, r0, r4
   34b5e:	7843      	ldrb	r3, [r0, #1]
   34b60:	1c75      	adds	r5, r6, #1
   34b62:	4013      	ands	r3, r2
   34b64:	d10c      	bne.n	34b80 <_strtol_l.isra.0+0x3c>
   34b66:	2c2d      	cmp	r4, #45	; 0x2d
   34b68:	d10c      	bne.n	34b84 <_strtol_l.isra.0+0x40>
   34b6a:	3301      	adds	r3, #1
   34b6c:	782c      	ldrb	r4, [r5, #0]
   34b6e:	9301      	str	r3, [sp, #4]
   34b70:	1cb5      	adds	r5, r6, #2
   34b72:	2f00      	cmp	r7, #0
   34b74:	d00c      	beq.n	34b90 <_strtol_l.isra.0+0x4c>
   34b76:	2f10      	cmp	r7, #16
   34b78:	d114      	bne.n	34ba4 <_strtol_l.isra.0+0x60>
   34b7a:	2c30      	cmp	r4, #48	; 0x30
   34b7c:	d00a      	beq.n	34b94 <_strtol_l.isra.0+0x50>
   34b7e:	e011      	b.n	34ba4 <_strtol_l.isra.0+0x60>
   34b80:	002e      	movs	r6, r5
   34b82:	e7e6      	b.n	34b52 <_strtol_l.isra.0+0xe>
   34b84:	9301      	str	r3, [sp, #4]
   34b86:	2c2b      	cmp	r4, #43	; 0x2b
   34b88:	d1f3      	bne.n	34b72 <_strtol_l.isra.0+0x2e>
   34b8a:	782c      	ldrb	r4, [r5, #0]
   34b8c:	1cb5      	adds	r5, r6, #2
   34b8e:	e7f0      	b.n	34b72 <_strtol_l.isra.0+0x2e>
   34b90:	2c30      	cmp	r4, #48	; 0x30
   34b92:	d12f      	bne.n	34bf4 <_strtol_l.isra.0+0xb0>
   34b94:	2220      	movs	r2, #32
   34b96:	782b      	ldrb	r3, [r5, #0]
   34b98:	4393      	bics	r3, r2
   34b9a:	2b58      	cmp	r3, #88	; 0x58
   34b9c:	d151      	bne.n	34c42 <_strtol_l.isra.0+0xfe>
   34b9e:	2710      	movs	r7, #16
   34ba0:	786c      	ldrb	r4, [r5, #1]
   34ba2:	3502      	adds	r5, #2
   34ba4:	9b01      	ldr	r3, [sp, #4]
   34ba6:	4a29      	ldr	r2, [pc, #164]	; (34c4c <_strtol_l.isra.0+0x108>)
   34ba8:	0039      	movs	r1, r7
   34baa:	189e      	adds	r6, r3, r2
   34bac:	0030      	movs	r0, r6
   34bae:	f7fd fe2f 	bl	32810 <__aeabi_uidivmod>
   34bb2:	0030      	movs	r0, r6
   34bb4:	9104      	str	r1, [sp, #16]
   34bb6:	0039      	movs	r1, r7
   34bb8:	f7fd fda4 	bl	32704 <__udivsi3>
   34bbc:	2101      	movs	r1, #1
   34bbe:	2300      	movs	r3, #0
   34bc0:	4249      	negs	r1, r1
   34bc2:	0002      	movs	r2, r0
   34bc4:	468c      	mov	ip, r1
   34bc6:	0018      	movs	r0, r3
   34bc8:	0021      	movs	r1, r4
   34bca:	3930      	subs	r1, #48	; 0x30
   34bcc:	2909      	cmp	r1, #9
   34bce:	d813      	bhi.n	34bf8 <_strtol_l.isra.0+0xb4>
   34bd0:	000c      	movs	r4, r1
   34bd2:	42a7      	cmp	r7, r4
   34bd4:	dd1c      	ble.n	34c10 <_strtol_l.isra.0+0xcc>
   34bd6:	1c59      	adds	r1, r3, #1
   34bd8:	d009      	beq.n	34bee <_strtol_l.isra.0+0xaa>
   34bda:	4663      	mov	r3, ip
   34bdc:	4282      	cmp	r2, r0
   34bde:	d306      	bcc.n	34bee <_strtol_l.isra.0+0xaa>
   34be0:	d102      	bne.n	34be8 <_strtol_l.isra.0+0xa4>
   34be2:	9904      	ldr	r1, [sp, #16]
   34be4:	42a1      	cmp	r1, r4
   34be6:	db02      	blt.n	34bee <_strtol_l.isra.0+0xaa>
   34be8:	2301      	movs	r3, #1
   34bea:	4378      	muls	r0, r7
   34bec:	1820      	adds	r0, r4, r0
   34bee:	782c      	ldrb	r4, [r5, #0]
   34bf0:	3501      	adds	r5, #1
   34bf2:	e7e9      	b.n	34bc8 <_strtol_l.isra.0+0x84>
   34bf4:	270a      	movs	r7, #10
   34bf6:	e7d5      	b.n	34ba4 <_strtol_l.isra.0+0x60>
   34bf8:	0021      	movs	r1, r4
   34bfa:	3941      	subs	r1, #65	; 0x41
   34bfc:	2919      	cmp	r1, #25
   34bfe:	d801      	bhi.n	34c04 <_strtol_l.isra.0+0xc0>
   34c00:	3c37      	subs	r4, #55	; 0x37
   34c02:	e7e6      	b.n	34bd2 <_strtol_l.isra.0+0x8e>
   34c04:	0021      	movs	r1, r4
   34c06:	3961      	subs	r1, #97	; 0x61
   34c08:	2919      	cmp	r1, #25
   34c0a:	d801      	bhi.n	34c10 <_strtol_l.isra.0+0xcc>
   34c0c:	3c57      	subs	r4, #87	; 0x57
   34c0e:	e7e0      	b.n	34bd2 <_strtol_l.isra.0+0x8e>
   34c10:	1c5a      	adds	r2, r3, #1
   34c12:	d108      	bne.n	34c26 <_strtol_l.isra.0+0xe2>
   34c14:	9a05      	ldr	r2, [sp, #20]
   34c16:	3323      	adds	r3, #35	; 0x23
   34c18:	6013      	str	r3, [r2, #0]
   34c1a:	9b02      	ldr	r3, [sp, #8]
   34c1c:	0030      	movs	r0, r6
   34c1e:	2b00      	cmp	r3, #0
   34c20:	d10b      	bne.n	34c3a <_strtol_l.isra.0+0xf6>
   34c22:	b007      	add	sp, #28
   34c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34c26:	9a01      	ldr	r2, [sp, #4]
   34c28:	2a00      	cmp	r2, #0
   34c2a:	d000      	beq.n	34c2e <_strtol_l.isra.0+0xea>
   34c2c:	4240      	negs	r0, r0
   34c2e:	9a02      	ldr	r2, [sp, #8]
   34c30:	2a00      	cmp	r2, #0
   34c32:	d0f6      	beq.n	34c22 <_strtol_l.isra.0+0xde>
   34c34:	9a03      	ldr	r2, [sp, #12]
   34c36:	2b00      	cmp	r3, #0
   34c38:	d000      	beq.n	34c3c <_strtol_l.isra.0+0xf8>
   34c3a:	1e6a      	subs	r2, r5, #1
   34c3c:	9b02      	ldr	r3, [sp, #8]
   34c3e:	601a      	str	r2, [r3, #0]
   34c40:	e7ef      	b.n	34c22 <_strtol_l.isra.0+0xde>
   34c42:	2430      	movs	r4, #48	; 0x30
   34c44:	2f00      	cmp	r7, #0
   34c46:	d1ad      	bne.n	34ba4 <_strtol_l.isra.0+0x60>
   34c48:	3708      	adds	r7, #8
   34c4a:	e7ab      	b.n	34ba4 <_strtol_l.isra.0+0x60>
   34c4c:	7fffffff 	.word	0x7fffffff

00034c50 <strtol>:
   34c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34c52:	0013      	movs	r3, r2
   34c54:	4a06      	ldr	r2, [pc, #24]	; (34c70 <strtol+0x20>)
   34c56:	0005      	movs	r5, r0
   34c58:	6810      	ldr	r0, [r2, #0]
   34c5a:	6a04      	ldr	r4, [r0, #32]
   34c5c:	2c00      	cmp	r4, #0
   34c5e:	d100      	bne.n	34c62 <strtol+0x12>
   34c60:	4c04      	ldr	r4, [pc, #16]	; (34c74 <strtol+0x24>)
   34c62:	000a      	movs	r2, r1
   34c64:	9400      	str	r4, [sp, #0]
   34c66:	0029      	movs	r1, r5
   34c68:	f7ff ff6c 	bl	34b44 <_strtol_l.isra.0>
   34c6c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   34c6e:	46c0      	nop			; (mov r8, r8)
   34c70:	20000150 	.word	0x20000150
   34c74:	200001b4 	.word	0x200001b4

00034c78 <_vsniprintf_r>:
   34c78:	b530      	push	{r4, r5, lr}
   34c7a:	0014      	movs	r4, r2
   34c7c:	b09b      	sub	sp, #108	; 0x6c
   34c7e:	0005      	movs	r5, r0
   34c80:	001a      	movs	r2, r3
   34c82:	2c00      	cmp	r4, #0
   34c84:	da05      	bge.n	34c92 <_vsniprintf_r+0x1a>
   34c86:	238b      	movs	r3, #139	; 0x8b
   34c88:	6003      	str	r3, [r0, #0]
   34c8a:	2001      	movs	r0, #1
   34c8c:	4240      	negs	r0, r0
   34c8e:	b01b      	add	sp, #108	; 0x6c
   34c90:	bd30      	pop	{r4, r5, pc}
   34c92:	2382      	movs	r3, #130	; 0x82
   34c94:	4668      	mov	r0, sp
   34c96:	009b      	lsls	r3, r3, #2
   34c98:	8183      	strh	r3, [r0, #12]
   34c9a:	2300      	movs	r3, #0
   34c9c:	9100      	str	r1, [sp, #0]
   34c9e:	9104      	str	r1, [sp, #16]
   34ca0:	429c      	cmp	r4, r3
   34ca2:	d000      	beq.n	34ca6 <_vsniprintf_r+0x2e>
   34ca4:	1e63      	subs	r3, r4, #1
   34ca6:	9302      	str	r3, [sp, #8]
   34ca8:	9305      	str	r3, [sp, #20]
   34caa:	2301      	movs	r3, #1
   34cac:	4669      	mov	r1, sp
   34cae:	425b      	negs	r3, r3
   34cb0:	81cb      	strh	r3, [r1, #14]
   34cb2:	0028      	movs	r0, r5
   34cb4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   34cb6:	f000 fb63 	bl	35380 <_svfiprintf_r>
   34cba:	1c43      	adds	r3, r0, #1
   34cbc:	da01      	bge.n	34cc2 <_vsniprintf_r+0x4a>
   34cbe:	238b      	movs	r3, #139	; 0x8b
   34cc0:	602b      	str	r3, [r5, #0]
   34cc2:	2c00      	cmp	r4, #0
   34cc4:	d0e3      	beq.n	34c8e <_vsniprintf_r+0x16>
   34cc6:	2300      	movs	r3, #0
   34cc8:	9a00      	ldr	r2, [sp, #0]
   34cca:	7013      	strb	r3, [r2, #0]
   34ccc:	e7df      	b.n	34c8e <_vsniprintf_r+0x16>
	...

00034cd0 <vsniprintf>:
   34cd0:	b507      	push	{r0, r1, r2, lr}
   34cd2:	9300      	str	r3, [sp, #0]
   34cd4:	0013      	movs	r3, r2
   34cd6:	000a      	movs	r2, r1
   34cd8:	0001      	movs	r1, r0
   34cda:	4802      	ldr	r0, [pc, #8]	; (34ce4 <vsniprintf+0x14>)
   34cdc:	6800      	ldr	r0, [r0, #0]
   34cde:	f7ff ffcb 	bl	34c78 <_vsniprintf_r>
   34ce2:	bd0e      	pop	{r1, r2, r3, pc}
   34ce4:	20000150 	.word	0x20000150

00034ce8 <__swbuf_r>:
   34ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34cea:	0005      	movs	r5, r0
   34cec:	000e      	movs	r6, r1
   34cee:	0014      	movs	r4, r2
   34cf0:	2800      	cmp	r0, #0
   34cf2:	d004      	beq.n	34cfe <__swbuf_r+0x16>
   34cf4:	6983      	ldr	r3, [r0, #24]
   34cf6:	2b00      	cmp	r3, #0
   34cf8:	d101      	bne.n	34cfe <__swbuf_r+0x16>
   34cfa:	f000 f9b9 	bl	35070 <__sinit>
   34cfe:	4b22      	ldr	r3, [pc, #136]	; (34d88 <__swbuf_r+0xa0>)
   34d00:	429c      	cmp	r4, r3
   34d02:	d12d      	bne.n	34d60 <__swbuf_r+0x78>
   34d04:	686c      	ldr	r4, [r5, #4]
   34d06:	69a3      	ldr	r3, [r4, #24]
   34d08:	60a3      	str	r3, [r4, #8]
   34d0a:	89a3      	ldrh	r3, [r4, #12]
   34d0c:	071b      	lsls	r3, r3, #28
   34d0e:	d531      	bpl.n	34d74 <__swbuf_r+0x8c>
   34d10:	6923      	ldr	r3, [r4, #16]
   34d12:	2b00      	cmp	r3, #0
   34d14:	d02e      	beq.n	34d74 <__swbuf_r+0x8c>
   34d16:	6823      	ldr	r3, [r4, #0]
   34d18:	6922      	ldr	r2, [r4, #16]
   34d1a:	b2f7      	uxtb	r7, r6
   34d1c:	1a98      	subs	r0, r3, r2
   34d1e:	6963      	ldr	r3, [r4, #20]
   34d20:	b2f6      	uxtb	r6, r6
   34d22:	4298      	cmp	r0, r3
   34d24:	db05      	blt.n	34d32 <__swbuf_r+0x4a>
   34d26:	0021      	movs	r1, r4
   34d28:	0028      	movs	r0, r5
   34d2a:	f000 f933 	bl	34f94 <_fflush_r>
   34d2e:	2800      	cmp	r0, #0
   34d30:	d126      	bne.n	34d80 <__swbuf_r+0x98>
   34d32:	68a3      	ldr	r3, [r4, #8]
   34d34:	3001      	adds	r0, #1
   34d36:	3b01      	subs	r3, #1
   34d38:	60a3      	str	r3, [r4, #8]
   34d3a:	6823      	ldr	r3, [r4, #0]
   34d3c:	1c5a      	adds	r2, r3, #1
   34d3e:	6022      	str	r2, [r4, #0]
   34d40:	701f      	strb	r7, [r3, #0]
   34d42:	6963      	ldr	r3, [r4, #20]
   34d44:	4298      	cmp	r0, r3
   34d46:	d004      	beq.n	34d52 <__swbuf_r+0x6a>
   34d48:	89a3      	ldrh	r3, [r4, #12]
   34d4a:	07db      	lsls	r3, r3, #31
   34d4c:	d51a      	bpl.n	34d84 <__swbuf_r+0x9c>
   34d4e:	2e0a      	cmp	r6, #10
   34d50:	d118      	bne.n	34d84 <__swbuf_r+0x9c>
   34d52:	0021      	movs	r1, r4
   34d54:	0028      	movs	r0, r5
   34d56:	f000 f91d 	bl	34f94 <_fflush_r>
   34d5a:	2800      	cmp	r0, #0
   34d5c:	d012      	beq.n	34d84 <__swbuf_r+0x9c>
   34d5e:	e00f      	b.n	34d80 <__swbuf_r+0x98>
   34d60:	4b0a      	ldr	r3, [pc, #40]	; (34d8c <__swbuf_r+0xa4>)
   34d62:	429c      	cmp	r4, r3
   34d64:	d101      	bne.n	34d6a <__swbuf_r+0x82>
   34d66:	68ac      	ldr	r4, [r5, #8]
   34d68:	e7cd      	b.n	34d06 <__swbuf_r+0x1e>
   34d6a:	4b09      	ldr	r3, [pc, #36]	; (34d90 <__swbuf_r+0xa8>)
   34d6c:	429c      	cmp	r4, r3
   34d6e:	d1ca      	bne.n	34d06 <__swbuf_r+0x1e>
   34d70:	68ec      	ldr	r4, [r5, #12]
   34d72:	e7c8      	b.n	34d06 <__swbuf_r+0x1e>
   34d74:	0021      	movs	r1, r4
   34d76:	0028      	movs	r0, r5
   34d78:	f000 f80c 	bl	34d94 <__swsetup_r>
   34d7c:	2800      	cmp	r0, #0
   34d7e:	d0ca      	beq.n	34d16 <__swbuf_r+0x2e>
   34d80:	2601      	movs	r6, #1
   34d82:	4276      	negs	r6, r6
   34d84:	0030      	movs	r0, r6
   34d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34d88:	00039e98 	.word	0x00039e98
   34d8c:	00039eb8 	.word	0x00039eb8
   34d90:	00039e78 	.word	0x00039e78

00034d94 <__swsetup_r>:
   34d94:	4b36      	ldr	r3, [pc, #216]	; (34e70 <__swsetup_r+0xdc>)
   34d96:	b570      	push	{r4, r5, r6, lr}
   34d98:	681d      	ldr	r5, [r3, #0]
   34d9a:	0006      	movs	r6, r0
   34d9c:	000c      	movs	r4, r1
   34d9e:	2d00      	cmp	r5, #0
   34da0:	d005      	beq.n	34dae <__swsetup_r+0x1a>
   34da2:	69ab      	ldr	r3, [r5, #24]
   34da4:	2b00      	cmp	r3, #0
   34da6:	d102      	bne.n	34dae <__swsetup_r+0x1a>
   34da8:	0028      	movs	r0, r5
   34daa:	f000 f961 	bl	35070 <__sinit>
   34dae:	4b31      	ldr	r3, [pc, #196]	; (34e74 <__swsetup_r+0xe0>)
   34db0:	429c      	cmp	r4, r3
   34db2:	d10f      	bne.n	34dd4 <__swsetup_r+0x40>
   34db4:	686c      	ldr	r4, [r5, #4]
   34db6:	230c      	movs	r3, #12
   34db8:	5ee2      	ldrsh	r2, [r4, r3]
   34dba:	b293      	uxth	r3, r2
   34dbc:	0719      	lsls	r1, r3, #28
   34dbe:	d42d      	bmi.n	34e1c <__swsetup_r+0x88>
   34dc0:	06d9      	lsls	r1, r3, #27
   34dc2:	d411      	bmi.n	34de8 <__swsetup_r+0x54>
   34dc4:	2309      	movs	r3, #9
   34dc6:	2001      	movs	r0, #1
   34dc8:	6033      	str	r3, [r6, #0]
   34dca:	3337      	adds	r3, #55	; 0x37
   34dcc:	4313      	orrs	r3, r2
   34dce:	81a3      	strh	r3, [r4, #12]
   34dd0:	4240      	negs	r0, r0
   34dd2:	bd70      	pop	{r4, r5, r6, pc}
   34dd4:	4b28      	ldr	r3, [pc, #160]	; (34e78 <__swsetup_r+0xe4>)
   34dd6:	429c      	cmp	r4, r3
   34dd8:	d101      	bne.n	34dde <__swsetup_r+0x4a>
   34dda:	68ac      	ldr	r4, [r5, #8]
   34ddc:	e7eb      	b.n	34db6 <__swsetup_r+0x22>
   34dde:	4b27      	ldr	r3, [pc, #156]	; (34e7c <__swsetup_r+0xe8>)
   34de0:	429c      	cmp	r4, r3
   34de2:	d1e8      	bne.n	34db6 <__swsetup_r+0x22>
   34de4:	68ec      	ldr	r4, [r5, #12]
   34de6:	e7e6      	b.n	34db6 <__swsetup_r+0x22>
   34de8:	075b      	lsls	r3, r3, #29
   34dea:	d513      	bpl.n	34e14 <__swsetup_r+0x80>
   34dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34dee:	2900      	cmp	r1, #0
   34df0:	d008      	beq.n	34e04 <__swsetup_r+0x70>
   34df2:	0023      	movs	r3, r4
   34df4:	3344      	adds	r3, #68	; 0x44
   34df6:	4299      	cmp	r1, r3
   34df8:	d002      	beq.n	34e00 <__swsetup_r+0x6c>
   34dfa:	0030      	movs	r0, r6
   34dfc:	f7ff fc78 	bl	346f0 <_free_r>
   34e00:	2300      	movs	r3, #0
   34e02:	6363      	str	r3, [r4, #52]	; 0x34
   34e04:	2224      	movs	r2, #36	; 0x24
   34e06:	89a3      	ldrh	r3, [r4, #12]
   34e08:	4393      	bics	r3, r2
   34e0a:	81a3      	strh	r3, [r4, #12]
   34e0c:	2300      	movs	r3, #0
   34e0e:	6063      	str	r3, [r4, #4]
   34e10:	6923      	ldr	r3, [r4, #16]
   34e12:	6023      	str	r3, [r4, #0]
   34e14:	2308      	movs	r3, #8
   34e16:	89a2      	ldrh	r2, [r4, #12]
   34e18:	4313      	orrs	r3, r2
   34e1a:	81a3      	strh	r3, [r4, #12]
   34e1c:	6923      	ldr	r3, [r4, #16]
   34e1e:	2b00      	cmp	r3, #0
   34e20:	d10b      	bne.n	34e3a <__swsetup_r+0xa6>
   34e22:	21a0      	movs	r1, #160	; 0xa0
   34e24:	2280      	movs	r2, #128	; 0x80
   34e26:	89a3      	ldrh	r3, [r4, #12]
   34e28:	0089      	lsls	r1, r1, #2
   34e2a:	0092      	lsls	r2, r2, #2
   34e2c:	400b      	ands	r3, r1
   34e2e:	4293      	cmp	r3, r2
   34e30:	d003      	beq.n	34e3a <__swsetup_r+0xa6>
   34e32:	0021      	movs	r1, r4
   34e34:	0030      	movs	r0, r6
   34e36:	f000 f9e9 	bl	3520c <__smakebuf_r>
   34e3a:	2301      	movs	r3, #1
   34e3c:	89a2      	ldrh	r2, [r4, #12]
   34e3e:	4013      	ands	r3, r2
   34e40:	d011      	beq.n	34e66 <__swsetup_r+0xd2>
   34e42:	2300      	movs	r3, #0
   34e44:	60a3      	str	r3, [r4, #8]
   34e46:	6963      	ldr	r3, [r4, #20]
   34e48:	425b      	negs	r3, r3
   34e4a:	61a3      	str	r3, [r4, #24]
   34e4c:	2000      	movs	r0, #0
   34e4e:	6923      	ldr	r3, [r4, #16]
   34e50:	4283      	cmp	r3, r0
   34e52:	d1be      	bne.n	34dd2 <__swsetup_r+0x3e>
   34e54:	230c      	movs	r3, #12
   34e56:	5ee2      	ldrsh	r2, [r4, r3]
   34e58:	0613      	lsls	r3, r2, #24
   34e5a:	d5ba      	bpl.n	34dd2 <__swsetup_r+0x3e>
   34e5c:	2340      	movs	r3, #64	; 0x40
   34e5e:	4313      	orrs	r3, r2
   34e60:	81a3      	strh	r3, [r4, #12]
   34e62:	3801      	subs	r0, #1
   34e64:	e7b5      	b.n	34dd2 <__swsetup_r+0x3e>
   34e66:	0792      	lsls	r2, r2, #30
   34e68:	d400      	bmi.n	34e6c <__swsetup_r+0xd8>
   34e6a:	6963      	ldr	r3, [r4, #20]
   34e6c:	60a3      	str	r3, [r4, #8]
   34e6e:	e7ed      	b.n	34e4c <__swsetup_r+0xb8>
   34e70:	20000150 	.word	0x20000150
   34e74:	00039e98 	.word	0x00039e98
   34e78:	00039eb8 	.word	0x00039eb8
   34e7c:	00039e78 	.word	0x00039e78

00034e80 <__sflush_r>:
   34e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34e82:	898a      	ldrh	r2, [r1, #12]
   34e84:	0005      	movs	r5, r0
   34e86:	000c      	movs	r4, r1
   34e88:	0713      	lsls	r3, r2, #28
   34e8a:	d460      	bmi.n	34f4e <__sflush_r+0xce>
   34e8c:	684b      	ldr	r3, [r1, #4]
   34e8e:	2b00      	cmp	r3, #0
   34e90:	dc04      	bgt.n	34e9c <__sflush_r+0x1c>
   34e92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   34e94:	2b00      	cmp	r3, #0
   34e96:	dc01      	bgt.n	34e9c <__sflush_r+0x1c>
   34e98:	2000      	movs	r0, #0
   34e9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34e9c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34e9e:	2f00      	cmp	r7, #0
   34ea0:	d0fa      	beq.n	34e98 <__sflush_r+0x18>
   34ea2:	2300      	movs	r3, #0
   34ea4:	682e      	ldr	r6, [r5, #0]
   34ea6:	602b      	str	r3, [r5, #0]
   34ea8:	2380      	movs	r3, #128	; 0x80
   34eaa:	015b      	lsls	r3, r3, #5
   34eac:	401a      	ands	r2, r3
   34eae:	d034      	beq.n	34f1a <__sflush_r+0x9a>
   34eb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   34eb2:	89a3      	ldrh	r3, [r4, #12]
   34eb4:	075b      	lsls	r3, r3, #29
   34eb6:	d506      	bpl.n	34ec6 <__sflush_r+0x46>
   34eb8:	6863      	ldr	r3, [r4, #4]
   34eba:	1ac0      	subs	r0, r0, r3
   34ebc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   34ebe:	2b00      	cmp	r3, #0
   34ec0:	d001      	beq.n	34ec6 <__sflush_r+0x46>
   34ec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   34ec4:	1ac0      	subs	r0, r0, r3
   34ec6:	0002      	movs	r2, r0
   34ec8:	6a21      	ldr	r1, [r4, #32]
   34eca:	2300      	movs	r3, #0
   34ecc:	0028      	movs	r0, r5
   34ece:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34ed0:	47b8      	blx	r7
   34ed2:	89a1      	ldrh	r1, [r4, #12]
   34ed4:	1c43      	adds	r3, r0, #1
   34ed6:	d106      	bne.n	34ee6 <__sflush_r+0x66>
   34ed8:	682b      	ldr	r3, [r5, #0]
   34eda:	2b1d      	cmp	r3, #29
   34edc:	d831      	bhi.n	34f42 <__sflush_r+0xc2>
   34ede:	4a2c      	ldr	r2, [pc, #176]	; (34f90 <__sflush_r+0x110>)
   34ee0:	40da      	lsrs	r2, r3
   34ee2:	07d3      	lsls	r3, r2, #31
   34ee4:	d52d      	bpl.n	34f42 <__sflush_r+0xc2>
   34ee6:	2300      	movs	r3, #0
   34ee8:	6063      	str	r3, [r4, #4]
   34eea:	6923      	ldr	r3, [r4, #16]
   34eec:	6023      	str	r3, [r4, #0]
   34eee:	04cb      	lsls	r3, r1, #19
   34ef0:	d505      	bpl.n	34efe <__sflush_r+0x7e>
   34ef2:	1c43      	adds	r3, r0, #1
   34ef4:	d102      	bne.n	34efc <__sflush_r+0x7c>
   34ef6:	682b      	ldr	r3, [r5, #0]
   34ef8:	2b00      	cmp	r3, #0
   34efa:	d100      	bne.n	34efe <__sflush_r+0x7e>
   34efc:	6560      	str	r0, [r4, #84]	; 0x54
   34efe:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34f00:	602e      	str	r6, [r5, #0]
   34f02:	2900      	cmp	r1, #0
   34f04:	d0c8      	beq.n	34e98 <__sflush_r+0x18>
   34f06:	0023      	movs	r3, r4
   34f08:	3344      	adds	r3, #68	; 0x44
   34f0a:	4299      	cmp	r1, r3
   34f0c:	d002      	beq.n	34f14 <__sflush_r+0x94>
   34f0e:	0028      	movs	r0, r5
   34f10:	f7ff fbee 	bl	346f0 <_free_r>
   34f14:	2000      	movs	r0, #0
   34f16:	6360      	str	r0, [r4, #52]	; 0x34
   34f18:	e7bf      	b.n	34e9a <__sflush_r+0x1a>
   34f1a:	2301      	movs	r3, #1
   34f1c:	6a21      	ldr	r1, [r4, #32]
   34f1e:	0028      	movs	r0, r5
   34f20:	47b8      	blx	r7
   34f22:	1c43      	adds	r3, r0, #1
   34f24:	d1c5      	bne.n	34eb2 <__sflush_r+0x32>
   34f26:	682b      	ldr	r3, [r5, #0]
   34f28:	2b00      	cmp	r3, #0
   34f2a:	d0c2      	beq.n	34eb2 <__sflush_r+0x32>
   34f2c:	2b1d      	cmp	r3, #29
   34f2e:	d001      	beq.n	34f34 <__sflush_r+0xb4>
   34f30:	2b16      	cmp	r3, #22
   34f32:	d101      	bne.n	34f38 <__sflush_r+0xb8>
   34f34:	602e      	str	r6, [r5, #0]
   34f36:	e7af      	b.n	34e98 <__sflush_r+0x18>
   34f38:	2340      	movs	r3, #64	; 0x40
   34f3a:	89a2      	ldrh	r2, [r4, #12]
   34f3c:	4313      	orrs	r3, r2
   34f3e:	81a3      	strh	r3, [r4, #12]
   34f40:	e7ab      	b.n	34e9a <__sflush_r+0x1a>
   34f42:	2340      	movs	r3, #64	; 0x40
   34f44:	430b      	orrs	r3, r1
   34f46:	2001      	movs	r0, #1
   34f48:	81a3      	strh	r3, [r4, #12]
   34f4a:	4240      	negs	r0, r0
   34f4c:	e7a5      	b.n	34e9a <__sflush_r+0x1a>
   34f4e:	690f      	ldr	r7, [r1, #16]
   34f50:	2f00      	cmp	r7, #0
   34f52:	d0a1      	beq.n	34e98 <__sflush_r+0x18>
   34f54:	680b      	ldr	r3, [r1, #0]
   34f56:	600f      	str	r7, [r1, #0]
   34f58:	1bdb      	subs	r3, r3, r7
   34f5a:	9301      	str	r3, [sp, #4]
   34f5c:	2300      	movs	r3, #0
   34f5e:	0792      	lsls	r2, r2, #30
   34f60:	d100      	bne.n	34f64 <__sflush_r+0xe4>
   34f62:	694b      	ldr	r3, [r1, #20]
   34f64:	60a3      	str	r3, [r4, #8]
   34f66:	9b01      	ldr	r3, [sp, #4]
   34f68:	2b00      	cmp	r3, #0
   34f6a:	dc00      	bgt.n	34f6e <__sflush_r+0xee>
   34f6c:	e794      	b.n	34e98 <__sflush_r+0x18>
   34f6e:	9b01      	ldr	r3, [sp, #4]
   34f70:	003a      	movs	r2, r7
   34f72:	6a21      	ldr	r1, [r4, #32]
   34f74:	0028      	movs	r0, r5
   34f76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   34f78:	47b0      	blx	r6
   34f7a:	2800      	cmp	r0, #0
   34f7c:	dc03      	bgt.n	34f86 <__sflush_r+0x106>
   34f7e:	2340      	movs	r3, #64	; 0x40
   34f80:	89a2      	ldrh	r2, [r4, #12]
   34f82:	4313      	orrs	r3, r2
   34f84:	e7df      	b.n	34f46 <__sflush_r+0xc6>
   34f86:	9b01      	ldr	r3, [sp, #4]
   34f88:	183f      	adds	r7, r7, r0
   34f8a:	1a1b      	subs	r3, r3, r0
   34f8c:	9301      	str	r3, [sp, #4]
   34f8e:	e7ea      	b.n	34f66 <__sflush_r+0xe6>
   34f90:	20400001 	.word	0x20400001

00034f94 <_fflush_r>:
   34f94:	690b      	ldr	r3, [r1, #16]
   34f96:	b570      	push	{r4, r5, r6, lr}
   34f98:	0005      	movs	r5, r0
   34f9a:	000c      	movs	r4, r1
   34f9c:	2b00      	cmp	r3, #0
   34f9e:	d101      	bne.n	34fa4 <_fflush_r+0x10>
   34fa0:	2000      	movs	r0, #0
   34fa2:	bd70      	pop	{r4, r5, r6, pc}
   34fa4:	2800      	cmp	r0, #0
   34fa6:	d004      	beq.n	34fb2 <_fflush_r+0x1e>
   34fa8:	6983      	ldr	r3, [r0, #24]
   34faa:	2b00      	cmp	r3, #0
   34fac:	d101      	bne.n	34fb2 <_fflush_r+0x1e>
   34fae:	f000 f85f 	bl	35070 <__sinit>
   34fb2:	4b0b      	ldr	r3, [pc, #44]	; (34fe0 <_fflush_r+0x4c>)
   34fb4:	429c      	cmp	r4, r3
   34fb6:	d109      	bne.n	34fcc <_fflush_r+0x38>
   34fb8:	686c      	ldr	r4, [r5, #4]
   34fba:	220c      	movs	r2, #12
   34fbc:	5ea3      	ldrsh	r3, [r4, r2]
   34fbe:	2b00      	cmp	r3, #0
   34fc0:	d0ee      	beq.n	34fa0 <_fflush_r+0xc>
   34fc2:	0021      	movs	r1, r4
   34fc4:	0028      	movs	r0, r5
   34fc6:	f7ff ff5b 	bl	34e80 <__sflush_r>
   34fca:	e7ea      	b.n	34fa2 <_fflush_r+0xe>
   34fcc:	4b05      	ldr	r3, [pc, #20]	; (34fe4 <_fflush_r+0x50>)
   34fce:	429c      	cmp	r4, r3
   34fd0:	d101      	bne.n	34fd6 <_fflush_r+0x42>
   34fd2:	68ac      	ldr	r4, [r5, #8]
   34fd4:	e7f1      	b.n	34fba <_fflush_r+0x26>
   34fd6:	4b04      	ldr	r3, [pc, #16]	; (34fe8 <_fflush_r+0x54>)
   34fd8:	429c      	cmp	r4, r3
   34fda:	d1ee      	bne.n	34fba <_fflush_r+0x26>
   34fdc:	68ec      	ldr	r4, [r5, #12]
   34fde:	e7ec      	b.n	34fba <_fflush_r+0x26>
   34fe0:	00039e98 	.word	0x00039e98
   34fe4:	00039eb8 	.word	0x00039eb8
   34fe8:	00039e78 	.word	0x00039e78

00034fec <_cleanup_r>:
   34fec:	b510      	push	{r4, lr}
   34fee:	4902      	ldr	r1, [pc, #8]	; (34ff8 <_cleanup_r+0xc>)
   34ff0:	f000 f8b2 	bl	35158 <_fwalk_reent>
   34ff4:	bd10      	pop	{r4, pc}
   34ff6:	46c0      	nop			; (mov r8, r8)
   34ff8:	00034f95 	.word	0x00034f95

00034ffc <std.isra.0>:
   34ffc:	2300      	movs	r3, #0
   34ffe:	b510      	push	{r4, lr}
   35000:	0004      	movs	r4, r0
   35002:	6003      	str	r3, [r0, #0]
   35004:	6043      	str	r3, [r0, #4]
   35006:	6083      	str	r3, [r0, #8]
   35008:	8181      	strh	r1, [r0, #12]
   3500a:	6643      	str	r3, [r0, #100]	; 0x64
   3500c:	81c2      	strh	r2, [r0, #14]
   3500e:	6103      	str	r3, [r0, #16]
   35010:	6143      	str	r3, [r0, #20]
   35012:	6183      	str	r3, [r0, #24]
   35014:	0019      	movs	r1, r3
   35016:	2208      	movs	r2, #8
   35018:	305c      	adds	r0, #92	; 0x5c
   3501a:	f7ff fb60 	bl	346de <memset>
   3501e:	4b05      	ldr	r3, [pc, #20]	; (35034 <std.isra.0+0x38>)
   35020:	6224      	str	r4, [r4, #32]
   35022:	6263      	str	r3, [r4, #36]	; 0x24
   35024:	4b04      	ldr	r3, [pc, #16]	; (35038 <std.isra.0+0x3c>)
   35026:	62a3      	str	r3, [r4, #40]	; 0x28
   35028:	4b04      	ldr	r3, [pc, #16]	; (3503c <std.isra.0+0x40>)
   3502a:	62e3      	str	r3, [r4, #44]	; 0x2c
   3502c:	4b04      	ldr	r3, [pc, #16]	; (35040 <std.isra.0+0x44>)
   3502e:	6323      	str	r3, [r4, #48]	; 0x30
   35030:	bd10      	pop	{r4, pc}
   35032:	46c0      	nop			; (mov r8, r8)
   35034:	00035899 	.word	0x00035899
   35038:	000358c1 	.word	0x000358c1
   3503c:	000358f9 	.word	0x000358f9
   35040:	00035925 	.word	0x00035925

00035044 <__sfmoreglue>:
   35044:	b570      	push	{r4, r5, r6, lr}
   35046:	2568      	movs	r5, #104	; 0x68
   35048:	1e4a      	subs	r2, r1, #1
   3504a:	4355      	muls	r5, r2
   3504c:	000e      	movs	r6, r1
   3504e:	0029      	movs	r1, r5
   35050:	3174      	adds	r1, #116	; 0x74
   35052:	f7ff fb97 	bl	34784 <_malloc_r>
   35056:	1e04      	subs	r4, r0, #0
   35058:	d008      	beq.n	3506c <__sfmoreglue+0x28>
   3505a:	2100      	movs	r1, #0
   3505c:	002a      	movs	r2, r5
   3505e:	6001      	str	r1, [r0, #0]
   35060:	6046      	str	r6, [r0, #4]
   35062:	300c      	adds	r0, #12
   35064:	60a0      	str	r0, [r4, #8]
   35066:	3268      	adds	r2, #104	; 0x68
   35068:	f7ff fb39 	bl	346de <memset>
   3506c:	0020      	movs	r0, r4
   3506e:	bd70      	pop	{r4, r5, r6, pc}

00035070 <__sinit>:
   35070:	6983      	ldr	r3, [r0, #24]
   35072:	b513      	push	{r0, r1, r4, lr}
   35074:	0004      	movs	r4, r0
   35076:	2b00      	cmp	r3, #0
   35078:	d128      	bne.n	350cc <__sinit+0x5c>
   3507a:	6483      	str	r3, [r0, #72]	; 0x48
   3507c:	64c3      	str	r3, [r0, #76]	; 0x4c
   3507e:	6503      	str	r3, [r0, #80]	; 0x50
   35080:	4b13      	ldr	r3, [pc, #76]	; (350d0 <__sinit+0x60>)
   35082:	4a14      	ldr	r2, [pc, #80]	; (350d4 <__sinit+0x64>)
   35084:	681b      	ldr	r3, [r3, #0]
   35086:	6282      	str	r2, [r0, #40]	; 0x28
   35088:	9301      	str	r3, [sp, #4]
   3508a:	4298      	cmp	r0, r3
   3508c:	d101      	bne.n	35092 <__sinit+0x22>
   3508e:	2301      	movs	r3, #1
   35090:	6183      	str	r3, [r0, #24]
   35092:	0020      	movs	r0, r4
   35094:	f000 f820 	bl	350d8 <__sfp>
   35098:	6060      	str	r0, [r4, #4]
   3509a:	0020      	movs	r0, r4
   3509c:	f000 f81c 	bl	350d8 <__sfp>
   350a0:	60a0      	str	r0, [r4, #8]
   350a2:	0020      	movs	r0, r4
   350a4:	f000 f818 	bl	350d8 <__sfp>
   350a8:	2200      	movs	r2, #0
   350aa:	60e0      	str	r0, [r4, #12]
   350ac:	2104      	movs	r1, #4
   350ae:	6860      	ldr	r0, [r4, #4]
   350b0:	f7ff ffa4 	bl	34ffc <std.isra.0>
   350b4:	2201      	movs	r2, #1
   350b6:	2109      	movs	r1, #9
   350b8:	68a0      	ldr	r0, [r4, #8]
   350ba:	f7ff ff9f 	bl	34ffc <std.isra.0>
   350be:	2202      	movs	r2, #2
   350c0:	2112      	movs	r1, #18
   350c2:	68e0      	ldr	r0, [r4, #12]
   350c4:	f7ff ff9a 	bl	34ffc <std.isra.0>
   350c8:	2301      	movs	r3, #1
   350ca:	61a3      	str	r3, [r4, #24]
   350cc:	bd13      	pop	{r0, r1, r4, pc}
   350ce:	46c0      	nop			; (mov r8, r8)
   350d0:	00039e74 	.word	0x00039e74
   350d4:	00034fed 	.word	0x00034fed

000350d8 <__sfp>:
   350d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   350da:	4b1e      	ldr	r3, [pc, #120]	; (35154 <__sfp+0x7c>)
   350dc:	0007      	movs	r7, r0
   350de:	681e      	ldr	r6, [r3, #0]
   350e0:	69b3      	ldr	r3, [r6, #24]
   350e2:	2b00      	cmp	r3, #0
   350e4:	d102      	bne.n	350ec <__sfp+0x14>
   350e6:	0030      	movs	r0, r6
   350e8:	f7ff ffc2 	bl	35070 <__sinit>
   350ec:	3648      	adds	r6, #72	; 0x48
   350ee:	68b4      	ldr	r4, [r6, #8]
   350f0:	6873      	ldr	r3, [r6, #4]
   350f2:	3b01      	subs	r3, #1
   350f4:	d504      	bpl.n	35100 <__sfp+0x28>
   350f6:	6833      	ldr	r3, [r6, #0]
   350f8:	2b00      	cmp	r3, #0
   350fa:	d007      	beq.n	3510c <__sfp+0x34>
   350fc:	6836      	ldr	r6, [r6, #0]
   350fe:	e7f6      	b.n	350ee <__sfp+0x16>
   35100:	220c      	movs	r2, #12
   35102:	5ea5      	ldrsh	r5, [r4, r2]
   35104:	2d00      	cmp	r5, #0
   35106:	d00d      	beq.n	35124 <__sfp+0x4c>
   35108:	3468      	adds	r4, #104	; 0x68
   3510a:	e7f2      	b.n	350f2 <__sfp+0x1a>
   3510c:	2104      	movs	r1, #4
   3510e:	0038      	movs	r0, r7
   35110:	f7ff ff98 	bl	35044 <__sfmoreglue>
   35114:	6030      	str	r0, [r6, #0]
   35116:	2800      	cmp	r0, #0
   35118:	d1f0      	bne.n	350fc <__sfp+0x24>
   3511a:	230c      	movs	r3, #12
   3511c:	0004      	movs	r4, r0
   3511e:	603b      	str	r3, [r7, #0]
   35120:	0020      	movs	r0, r4
   35122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35124:	2301      	movs	r3, #1
   35126:	0020      	movs	r0, r4
   35128:	425b      	negs	r3, r3
   3512a:	81e3      	strh	r3, [r4, #14]
   3512c:	3302      	adds	r3, #2
   3512e:	81a3      	strh	r3, [r4, #12]
   35130:	6665      	str	r5, [r4, #100]	; 0x64
   35132:	6025      	str	r5, [r4, #0]
   35134:	60a5      	str	r5, [r4, #8]
   35136:	6065      	str	r5, [r4, #4]
   35138:	6125      	str	r5, [r4, #16]
   3513a:	6165      	str	r5, [r4, #20]
   3513c:	61a5      	str	r5, [r4, #24]
   3513e:	2208      	movs	r2, #8
   35140:	0029      	movs	r1, r5
   35142:	305c      	adds	r0, #92	; 0x5c
   35144:	f7ff facb 	bl	346de <memset>
   35148:	6365      	str	r5, [r4, #52]	; 0x34
   3514a:	63a5      	str	r5, [r4, #56]	; 0x38
   3514c:	64a5      	str	r5, [r4, #72]	; 0x48
   3514e:	64e5      	str	r5, [r4, #76]	; 0x4c
   35150:	e7e6      	b.n	35120 <__sfp+0x48>
   35152:	46c0      	nop			; (mov r8, r8)
   35154:	00039e74 	.word	0x00039e74

00035158 <_fwalk_reent>:
   35158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3515a:	0004      	movs	r4, r0
   3515c:	0007      	movs	r7, r0
   3515e:	2600      	movs	r6, #0
   35160:	9101      	str	r1, [sp, #4]
   35162:	3448      	adds	r4, #72	; 0x48
   35164:	2c00      	cmp	r4, #0
   35166:	d101      	bne.n	3516c <_fwalk_reent+0x14>
   35168:	0030      	movs	r0, r6
   3516a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3516c:	6863      	ldr	r3, [r4, #4]
   3516e:	68a5      	ldr	r5, [r4, #8]
   35170:	9300      	str	r3, [sp, #0]
   35172:	9b00      	ldr	r3, [sp, #0]
   35174:	3b01      	subs	r3, #1
   35176:	9300      	str	r3, [sp, #0]
   35178:	d501      	bpl.n	3517e <_fwalk_reent+0x26>
   3517a:	6824      	ldr	r4, [r4, #0]
   3517c:	e7f2      	b.n	35164 <_fwalk_reent+0xc>
   3517e:	89ab      	ldrh	r3, [r5, #12]
   35180:	2b01      	cmp	r3, #1
   35182:	d908      	bls.n	35196 <_fwalk_reent+0x3e>
   35184:	220e      	movs	r2, #14
   35186:	5eab      	ldrsh	r3, [r5, r2]
   35188:	3301      	adds	r3, #1
   3518a:	d004      	beq.n	35196 <_fwalk_reent+0x3e>
   3518c:	0029      	movs	r1, r5
   3518e:	0038      	movs	r0, r7
   35190:	9b01      	ldr	r3, [sp, #4]
   35192:	4798      	blx	r3
   35194:	4306      	orrs	r6, r0
   35196:	3568      	adds	r5, #104	; 0x68
   35198:	e7eb      	b.n	35172 <_fwalk_reent+0x1a>

0003519a <__locale_ctype_ptr_l>:
   3519a:	30ec      	adds	r0, #236	; 0xec
   3519c:	6800      	ldr	r0, [r0, #0]
   3519e:	4770      	bx	lr

000351a0 <__locale_ctype_ptr>:
   351a0:	4b04      	ldr	r3, [pc, #16]	; (351b4 <__locale_ctype_ptr+0x14>)
   351a2:	681b      	ldr	r3, [r3, #0]
   351a4:	6a1b      	ldr	r3, [r3, #32]
   351a6:	2b00      	cmp	r3, #0
   351a8:	d100      	bne.n	351ac <__locale_ctype_ptr+0xc>
   351aa:	4b03      	ldr	r3, [pc, #12]	; (351b8 <__locale_ctype_ptr+0x18>)
   351ac:	33ec      	adds	r3, #236	; 0xec
   351ae:	6818      	ldr	r0, [r3, #0]
   351b0:	4770      	bx	lr
   351b2:	46c0      	nop			; (mov r8, r8)
   351b4:	20000150 	.word	0x20000150
   351b8:	200001b4 	.word	0x200001b4

000351bc <__swhatbuf_r>:
   351bc:	b570      	push	{r4, r5, r6, lr}
   351be:	000e      	movs	r6, r1
   351c0:	001d      	movs	r5, r3
   351c2:	230e      	movs	r3, #14
   351c4:	5ec9      	ldrsh	r1, [r1, r3]
   351c6:	b090      	sub	sp, #64	; 0x40
   351c8:	0014      	movs	r4, r2
   351ca:	2900      	cmp	r1, #0
   351cc:	da07      	bge.n	351de <__swhatbuf_r+0x22>
   351ce:	2300      	movs	r3, #0
   351d0:	602b      	str	r3, [r5, #0]
   351d2:	89b3      	ldrh	r3, [r6, #12]
   351d4:	061b      	lsls	r3, r3, #24
   351d6:	d411      	bmi.n	351fc <__swhatbuf_r+0x40>
   351d8:	2380      	movs	r3, #128	; 0x80
   351da:	00db      	lsls	r3, r3, #3
   351dc:	e00f      	b.n	351fe <__swhatbuf_r+0x42>
   351de:	aa01      	add	r2, sp, #4
   351e0:	f000 fbe6 	bl	359b0 <_fstat_r>
   351e4:	2800      	cmp	r0, #0
   351e6:	dbf2      	blt.n	351ce <__swhatbuf_r+0x12>
   351e8:	22f0      	movs	r2, #240	; 0xf0
   351ea:	9b02      	ldr	r3, [sp, #8]
   351ec:	0212      	lsls	r2, r2, #8
   351ee:	4013      	ands	r3, r2
   351f0:	4a05      	ldr	r2, [pc, #20]	; (35208 <__swhatbuf_r+0x4c>)
   351f2:	189b      	adds	r3, r3, r2
   351f4:	425a      	negs	r2, r3
   351f6:	4153      	adcs	r3, r2
   351f8:	602b      	str	r3, [r5, #0]
   351fa:	e7ed      	b.n	351d8 <__swhatbuf_r+0x1c>
   351fc:	2340      	movs	r3, #64	; 0x40
   351fe:	2000      	movs	r0, #0
   35200:	6023      	str	r3, [r4, #0]
   35202:	b010      	add	sp, #64	; 0x40
   35204:	bd70      	pop	{r4, r5, r6, pc}
   35206:	46c0      	nop			; (mov r8, r8)
   35208:	ffffe000 	.word	0xffffe000

0003520c <__smakebuf_r>:
   3520c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3520e:	2602      	movs	r6, #2
   35210:	898b      	ldrh	r3, [r1, #12]
   35212:	0005      	movs	r5, r0
   35214:	000c      	movs	r4, r1
   35216:	4233      	tst	r3, r6
   35218:	d006      	beq.n	35228 <__smakebuf_r+0x1c>
   3521a:	0023      	movs	r3, r4
   3521c:	3347      	adds	r3, #71	; 0x47
   3521e:	6023      	str	r3, [r4, #0]
   35220:	6123      	str	r3, [r4, #16]
   35222:	2301      	movs	r3, #1
   35224:	6163      	str	r3, [r4, #20]
   35226:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   35228:	ab01      	add	r3, sp, #4
   3522a:	466a      	mov	r2, sp
   3522c:	f7ff ffc6 	bl	351bc <__swhatbuf_r>
   35230:	9900      	ldr	r1, [sp, #0]
   35232:	0007      	movs	r7, r0
   35234:	0028      	movs	r0, r5
   35236:	f7ff faa5 	bl	34784 <_malloc_r>
   3523a:	2800      	cmp	r0, #0
   3523c:	d108      	bne.n	35250 <__smakebuf_r+0x44>
   3523e:	220c      	movs	r2, #12
   35240:	5ea3      	ldrsh	r3, [r4, r2]
   35242:	059a      	lsls	r2, r3, #22
   35244:	d4ef      	bmi.n	35226 <__smakebuf_r+0x1a>
   35246:	2203      	movs	r2, #3
   35248:	4393      	bics	r3, r2
   3524a:	431e      	orrs	r6, r3
   3524c:	81a6      	strh	r6, [r4, #12]
   3524e:	e7e4      	b.n	3521a <__smakebuf_r+0xe>
   35250:	4b0f      	ldr	r3, [pc, #60]	; (35290 <__smakebuf_r+0x84>)
   35252:	62ab      	str	r3, [r5, #40]	; 0x28
   35254:	2380      	movs	r3, #128	; 0x80
   35256:	89a2      	ldrh	r2, [r4, #12]
   35258:	6020      	str	r0, [r4, #0]
   3525a:	4313      	orrs	r3, r2
   3525c:	81a3      	strh	r3, [r4, #12]
   3525e:	9b00      	ldr	r3, [sp, #0]
   35260:	6120      	str	r0, [r4, #16]
   35262:	6163      	str	r3, [r4, #20]
   35264:	9b01      	ldr	r3, [sp, #4]
   35266:	2b00      	cmp	r3, #0
   35268:	d00d      	beq.n	35286 <__smakebuf_r+0x7a>
   3526a:	230e      	movs	r3, #14
   3526c:	5ee1      	ldrsh	r1, [r4, r3]
   3526e:	0028      	movs	r0, r5
   35270:	f000 fbb0 	bl	359d4 <_isatty_r>
   35274:	2800      	cmp	r0, #0
   35276:	d006      	beq.n	35286 <__smakebuf_r+0x7a>
   35278:	2203      	movs	r2, #3
   3527a:	89a3      	ldrh	r3, [r4, #12]
   3527c:	4393      	bics	r3, r2
   3527e:	001a      	movs	r2, r3
   35280:	2301      	movs	r3, #1
   35282:	4313      	orrs	r3, r2
   35284:	81a3      	strh	r3, [r4, #12]
   35286:	89a0      	ldrh	r0, [r4, #12]
   35288:	4338      	orrs	r0, r7
   3528a:	81a0      	strh	r0, [r4, #12]
   3528c:	e7cb      	b.n	35226 <__smakebuf_r+0x1a>
   3528e:	46c0      	nop			; (mov r8, r8)
   35290:	00034fed 	.word	0x00034fed

00035294 <__ascii_mbtowc>:
   35294:	b082      	sub	sp, #8
   35296:	2900      	cmp	r1, #0
   35298:	d100      	bne.n	3529c <__ascii_mbtowc+0x8>
   3529a:	a901      	add	r1, sp, #4
   3529c:	1e10      	subs	r0, r2, #0
   3529e:	d006      	beq.n	352ae <__ascii_mbtowc+0x1a>
   352a0:	2b00      	cmp	r3, #0
   352a2:	d006      	beq.n	352b2 <__ascii_mbtowc+0x1e>
   352a4:	7813      	ldrb	r3, [r2, #0]
   352a6:	600b      	str	r3, [r1, #0]
   352a8:	7810      	ldrb	r0, [r2, #0]
   352aa:	1e43      	subs	r3, r0, #1
   352ac:	4198      	sbcs	r0, r3
   352ae:	b002      	add	sp, #8
   352b0:	4770      	bx	lr
   352b2:	2002      	movs	r0, #2
   352b4:	4240      	negs	r0, r0
   352b6:	e7fa      	b.n	352ae <__ascii_mbtowc+0x1a>

000352b8 <__malloc_lock>:
   352b8:	4770      	bx	lr

000352ba <__malloc_unlock>:
   352ba:	4770      	bx	lr

000352bc <__ssputs_r>:
   352bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   352be:	688e      	ldr	r6, [r1, #8]
   352c0:	b085      	sub	sp, #20
   352c2:	0007      	movs	r7, r0
   352c4:	000c      	movs	r4, r1
   352c6:	9203      	str	r2, [sp, #12]
   352c8:	9301      	str	r3, [sp, #4]
   352ca:	429e      	cmp	r6, r3
   352cc:	d839      	bhi.n	35342 <__ssputs_r+0x86>
   352ce:	2390      	movs	r3, #144	; 0x90
   352d0:	898a      	ldrh	r2, [r1, #12]
   352d2:	00db      	lsls	r3, r3, #3
   352d4:	421a      	tst	r2, r3
   352d6:	d034      	beq.n	35342 <__ssputs_r+0x86>
   352d8:	2503      	movs	r5, #3
   352da:	6909      	ldr	r1, [r1, #16]
   352dc:	6823      	ldr	r3, [r4, #0]
   352de:	1a5b      	subs	r3, r3, r1
   352e0:	9302      	str	r3, [sp, #8]
   352e2:	6963      	ldr	r3, [r4, #20]
   352e4:	9802      	ldr	r0, [sp, #8]
   352e6:	435d      	muls	r5, r3
   352e8:	0feb      	lsrs	r3, r5, #31
   352ea:	195d      	adds	r5, r3, r5
   352ec:	9b01      	ldr	r3, [sp, #4]
   352ee:	106d      	asrs	r5, r5, #1
   352f0:	3301      	adds	r3, #1
   352f2:	181b      	adds	r3, r3, r0
   352f4:	42ab      	cmp	r3, r5
   352f6:	d900      	bls.n	352fa <__ssputs_r+0x3e>
   352f8:	001d      	movs	r5, r3
   352fa:	0553      	lsls	r3, r2, #21
   352fc:	d532      	bpl.n	35364 <__ssputs_r+0xa8>
   352fe:	0029      	movs	r1, r5
   35300:	0038      	movs	r0, r7
   35302:	f7ff fa3f 	bl	34784 <_malloc_r>
   35306:	1e06      	subs	r6, r0, #0
   35308:	d109      	bne.n	3531e <__ssputs_r+0x62>
   3530a:	230c      	movs	r3, #12
   3530c:	603b      	str	r3, [r7, #0]
   3530e:	2340      	movs	r3, #64	; 0x40
   35310:	2001      	movs	r0, #1
   35312:	89a2      	ldrh	r2, [r4, #12]
   35314:	4240      	negs	r0, r0
   35316:	4313      	orrs	r3, r2
   35318:	81a3      	strh	r3, [r4, #12]
   3531a:	b005      	add	sp, #20
   3531c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3531e:	9a02      	ldr	r2, [sp, #8]
   35320:	6921      	ldr	r1, [r4, #16]
   35322:	f7ff f9c1 	bl	346a8 <memcpy>
   35326:	89a3      	ldrh	r3, [r4, #12]
   35328:	4a14      	ldr	r2, [pc, #80]	; (3537c <__ssputs_r+0xc0>)
   3532a:	401a      	ands	r2, r3
   3532c:	2380      	movs	r3, #128	; 0x80
   3532e:	4313      	orrs	r3, r2
   35330:	81a3      	strh	r3, [r4, #12]
   35332:	9b02      	ldr	r3, [sp, #8]
   35334:	6126      	str	r6, [r4, #16]
   35336:	18f6      	adds	r6, r6, r3
   35338:	6026      	str	r6, [r4, #0]
   3533a:	6165      	str	r5, [r4, #20]
   3533c:	9e01      	ldr	r6, [sp, #4]
   3533e:	1aed      	subs	r5, r5, r3
   35340:	60a5      	str	r5, [r4, #8]
   35342:	9b01      	ldr	r3, [sp, #4]
   35344:	42b3      	cmp	r3, r6
   35346:	d200      	bcs.n	3534a <__ssputs_r+0x8e>
   35348:	001e      	movs	r6, r3
   3534a:	0032      	movs	r2, r6
   3534c:	9903      	ldr	r1, [sp, #12]
   3534e:	6820      	ldr	r0, [r4, #0]
   35350:	f7ff f9b3 	bl	346ba <memmove>
   35354:	68a3      	ldr	r3, [r4, #8]
   35356:	2000      	movs	r0, #0
   35358:	1b9b      	subs	r3, r3, r6
   3535a:	60a3      	str	r3, [r4, #8]
   3535c:	6823      	ldr	r3, [r4, #0]
   3535e:	199e      	adds	r6, r3, r6
   35360:	6026      	str	r6, [r4, #0]
   35362:	e7da      	b.n	3531a <__ssputs_r+0x5e>
   35364:	002a      	movs	r2, r5
   35366:	0038      	movs	r0, r7
   35368:	f000 fb65 	bl	35a36 <_realloc_r>
   3536c:	1e06      	subs	r6, r0, #0
   3536e:	d1e0      	bne.n	35332 <__ssputs_r+0x76>
   35370:	6921      	ldr	r1, [r4, #16]
   35372:	0038      	movs	r0, r7
   35374:	f7ff f9bc 	bl	346f0 <_free_r>
   35378:	e7c7      	b.n	3530a <__ssputs_r+0x4e>
   3537a:	46c0      	nop			; (mov r8, r8)
   3537c:	fffffb7f 	.word	0xfffffb7f

00035380 <_svfiprintf_r>:
   35380:	b5f0      	push	{r4, r5, r6, r7, lr}
   35382:	b09f      	sub	sp, #124	; 0x7c
   35384:	9002      	str	r0, [sp, #8]
   35386:	9305      	str	r3, [sp, #20]
   35388:	898b      	ldrh	r3, [r1, #12]
   3538a:	000f      	movs	r7, r1
   3538c:	0016      	movs	r6, r2
   3538e:	061b      	lsls	r3, r3, #24
   35390:	d511      	bpl.n	353b6 <_svfiprintf_r+0x36>
   35392:	690b      	ldr	r3, [r1, #16]
   35394:	2b00      	cmp	r3, #0
   35396:	d10e      	bne.n	353b6 <_svfiprintf_r+0x36>
   35398:	2140      	movs	r1, #64	; 0x40
   3539a:	f7ff f9f3 	bl	34784 <_malloc_r>
   3539e:	6038      	str	r0, [r7, #0]
   353a0:	6138      	str	r0, [r7, #16]
   353a2:	2800      	cmp	r0, #0
   353a4:	d105      	bne.n	353b2 <_svfiprintf_r+0x32>
   353a6:	230c      	movs	r3, #12
   353a8:	9a02      	ldr	r2, [sp, #8]
   353aa:	3801      	subs	r0, #1
   353ac:	6013      	str	r3, [r2, #0]
   353ae:	b01f      	add	sp, #124	; 0x7c
   353b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   353b2:	2340      	movs	r3, #64	; 0x40
   353b4:	617b      	str	r3, [r7, #20]
   353b6:	2300      	movs	r3, #0
   353b8:	ad06      	add	r5, sp, #24
   353ba:	616b      	str	r3, [r5, #20]
   353bc:	3320      	adds	r3, #32
   353be:	766b      	strb	r3, [r5, #25]
   353c0:	3310      	adds	r3, #16
   353c2:	76ab      	strb	r3, [r5, #26]
   353c4:	0034      	movs	r4, r6
   353c6:	7823      	ldrb	r3, [r4, #0]
   353c8:	2b00      	cmp	r3, #0
   353ca:	d147      	bne.n	3545c <_svfiprintf_r+0xdc>
   353cc:	1ba3      	subs	r3, r4, r6
   353ce:	9304      	str	r3, [sp, #16]
   353d0:	d00d      	beq.n	353ee <_svfiprintf_r+0x6e>
   353d2:	1ba3      	subs	r3, r4, r6
   353d4:	0032      	movs	r2, r6
   353d6:	0039      	movs	r1, r7
   353d8:	9802      	ldr	r0, [sp, #8]
   353da:	f7ff ff6f 	bl	352bc <__ssputs_r>
   353de:	1c43      	adds	r3, r0, #1
   353e0:	d100      	bne.n	353e4 <_svfiprintf_r+0x64>
   353e2:	e0b5      	b.n	35550 <_svfiprintf_r+0x1d0>
   353e4:	696a      	ldr	r2, [r5, #20]
   353e6:	9b04      	ldr	r3, [sp, #16]
   353e8:	4694      	mov	ip, r2
   353ea:	4463      	add	r3, ip
   353ec:	616b      	str	r3, [r5, #20]
   353ee:	7823      	ldrb	r3, [r4, #0]
   353f0:	2b00      	cmp	r3, #0
   353f2:	d100      	bne.n	353f6 <_svfiprintf_r+0x76>
   353f4:	e0ac      	b.n	35550 <_svfiprintf_r+0x1d0>
   353f6:	2201      	movs	r2, #1
   353f8:	2300      	movs	r3, #0
   353fa:	4252      	negs	r2, r2
   353fc:	606a      	str	r2, [r5, #4]
   353fe:	a902      	add	r1, sp, #8
   35400:	3254      	adds	r2, #84	; 0x54
   35402:	1852      	adds	r2, r2, r1
   35404:	3401      	adds	r4, #1
   35406:	602b      	str	r3, [r5, #0]
   35408:	60eb      	str	r3, [r5, #12]
   3540a:	60ab      	str	r3, [r5, #8]
   3540c:	7013      	strb	r3, [r2, #0]
   3540e:	65ab      	str	r3, [r5, #88]	; 0x58
   35410:	4e58      	ldr	r6, [pc, #352]	; (35574 <_svfiprintf_r+0x1f4>)
   35412:	2205      	movs	r2, #5
   35414:	7821      	ldrb	r1, [r4, #0]
   35416:	0030      	movs	r0, r6
   35418:	f000 fb02 	bl	35a20 <memchr>
   3541c:	1c62      	adds	r2, r4, #1
   3541e:	2800      	cmp	r0, #0
   35420:	d120      	bne.n	35464 <_svfiprintf_r+0xe4>
   35422:	6829      	ldr	r1, [r5, #0]
   35424:	06cb      	lsls	r3, r1, #27
   35426:	d504      	bpl.n	35432 <_svfiprintf_r+0xb2>
   35428:	2353      	movs	r3, #83	; 0x53
   3542a:	ae02      	add	r6, sp, #8
   3542c:	3020      	adds	r0, #32
   3542e:	199b      	adds	r3, r3, r6
   35430:	7018      	strb	r0, [r3, #0]
   35432:	070b      	lsls	r3, r1, #28
   35434:	d504      	bpl.n	35440 <_svfiprintf_r+0xc0>
   35436:	2353      	movs	r3, #83	; 0x53
   35438:	202b      	movs	r0, #43	; 0x2b
   3543a:	ae02      	add	r6, sp, #8
   3543c:	199b      	adds	r3, r3, r6
   3543e:	7018      	strb	r0, [r3, #0]
   35440:	7823      	ldrb	r3, [r4, #0]
   35442:	2b2a      	cmp	r3, #42	; 0x2a
   35444:	d016      	beq.n	35474 <_svfiprintf_r+0xf4>
   35446:	2000      	movs	r0, #0
   35448:	210a      	movs	r1, #10
   3544a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3544c:	7822      	ldrb	r2, [r4, #0]
   3544e:	3a30      	subs	r2, #48	; 0x30
   35450:	2a09      	cmp	r2, #9
   35452:	d955      	bls.n	35500 <_svfiprintf_r+0x180>
   35454:	2800      	cmp	r0, #0
   35456:	d015      	beq.n	35484 <_svfiprintf_r+0x104>
   35458:	9309      	str	r3, [sp, #36]	; 0x24
   3545a:	e013      	b.n	35484 <_svfiprintf_r+0x104>
   3545c:	2b25      	cmp	r3, #37	; 0x25
   3545e:	d0b5      	beq.n	353cc <_svfiprintf_r+0x4c>
   35460:	3401      	adds	r4, #1
   35462:	e7b0      	b.n	353c6 <_svfiprintf_r+0x46>
   35464:	2301      	movs	r3, #1
   35466:	1b80      	subs	r0, r0, r6
   35468:	4083      	lsls	r3, r0
   3546a:	6829      	ldr	r1, [r5, #0]
   3546c:	0014      	movs	r4, r2
   3546e:	430b      	orrs	r3, r1
   35470:	602b      	str	r3, [r5, #0]
   35472:	e7cd      	b.n	35410 <_svfiprintf_r+0x90>
   35474:	9b05      	ldr	r3, [sp, #20]
   35476:	1d18      	adds	r0, r3, #4
   35478:	681b      	ldr	r3, [r3, #0]
   3547a:	9005      	str	r0, [sp, #20]
   3547c:	2b00      	cmp	r3, #0
   3547e:	db39      	blt.n	354f4 <_svfiprintf_r+0x174>
   35480:	9309      	str	r3, [sp, #36]	; 0x24
   35482:	0014      	movs	r4, r2
   35484:	7823      	ldrb	r3, [r4, #0]
   35486:	2b2e      	cmp	r3, #46	; 0x2e
   35488:	d10b      	bne.n	354a2 <_svfiprintf_r+0x122>
   3548a:	7863      	ldrb	r3, [r4, #1]
   3548c:	1c62      	adds	r2, r4, #1
   3548e:	2b2a      	cmp	r3, #42	; 0x2a
   35490:	d13e      	bne.n	35510 <_svfiprintf_r+0x190>
   35492:	9b05      	ldr	r3, [sp, #20]
   35494:	3402      	adds	r4, #2
   35496:	1d1a      	adds	r2, r3, #4
   35498:	681b      	ldr	r3, [r3, #0]
   3549a:	9205      	str	r2, [sp, #20]
   3549c:	2b00      	cmp	r3, #0
   3549e:	db34      	blt.n	3550a <_svfiprintf_r+0x18a>
   354a0:	9307      	str	r3, [sp, #28]
   354a2:	4e35      	ldr	r6, [pc, #212]	; (35578 <_svfiprintf_r+0x1f8>)
   354a4:	7821      	ldrb	r1, [r4, #0]
   354a6:	2203      	movs	r2, #3
   354a8:	0030      	movs	r0, r6
   354aa:	f000 fab9 	bl	35a20 <memchr>
   354ae:	2800      	cmp	r0, #0
   354b0:	d006      	beq.n	354c0 <_svfiprintf_r+0x140>
   354b2:	2340      	movs	r3, #64	; 0x40
   354b4:	1b80      	subs	r0, r0, r6
   354b6:	4083      	lsls	r3, r0
   354b8:	682a      	ldr	r2, [r5, #0]
   354ba:	3401      	adds	r4, #1
   354bc:	4313      	orrs	r3, r2
   354be:	602b      	str	r3, [r5, #0]
   354c0:	7821      	ldrb	r1, [r4, #0]
   354c2:	2206      	movs	r2, #6
   354c4:	482d      	ldr	r0, [pc, #180]	; (3557c <_svfiprintf_r+0x1fc>)
   354c6:	1c66      	adds	r6, r4, #1
   354c8:	7629      	strb	r1, [r5, #24]
   354ca:	f000 faa9 	bl	35a20 <memchr>
   354ce:	2800      	cmp	r0, #0
   354d0:	d046      	beq.n	35560 <_svfiprintf_r+0x1e0>
   354d2:	4b2b      	ldr	r3, [pc, #172]	; (35580 <_svfiprintf_r+0x200>)
   354d4:	2b00      	cmp	r3, #0
   354d6:	d12f      	bne.n	35538 <_svfiprintf_r+0x1b8>
   354d8:	6829      	ldr	r1, [r5, #0]
   354da:	9b05      	ldr	r3, [sp, #20]
   354dc:	2207      	movs	r2, #7
   354de:	05c9      	lsls	r1, r1, #23
   354e0:	d528      	bpl.n	35534 <_svfiprintf_r+0x1b4>
   354e2:	189b      	adds	r3, r3, r2
   354e4:	4393      	bics	r3, r2
   354e6:	3308      	adds	r3, #8
   354e8:	9305      	str	r3, [sp, #20]
   354ea:	696b      	ldr	r3, [r5, #20]
   354ec:	9a03      	ldr	r2, [sp, #12]
   354ee:	189b      	adds	r3, r3, r2
   354f0:	616b      	str	r3, [r5, #20]
   354f2:	e767      	b.n	353c4 <_svfiprintf_r+0x44>
   354f4:	425b      	negs	r3, r3
   354f6:	60eb      	str	r3, [r5, #12]
   354f8:	2302      	movs	r3, #2
   354fa:	430b      	orrs	r3, r1
   354fc:	602b      	str	r3, [r5, #0]
   354fe:	e7c0      	b.n	35482 <_svfiprintf_r+0x102>
   35500:	434b      	muls	r3, r1
   35502:	3401      	adds	r4, #1
   35504:	189b      	adds	r3, r3, r2
   35506:	2001      	movs	r0, #1
   35508:	e7a0      	b.n	3544c <_svfiprintf_r+0xcc>
   3550a:	2301      	movs	r3, #1
   3550c:	425b      	negs	r3, r3
   3550e:	e7c7      	b.n	354a0 <_svfiprintf_r+0x120>
   35510:	2300      	movs	r3, #0
   35512:	0014      	movs	r4, r2
   35514:	200a      	movs	r0, #10
   35516:	001a      	movs	r2, r3
   35518:	606b      	str	r3, [r5, #4]
   3551a:	7821      	ldrb	r1, [r4, #0]
   3551c:	3930      	subs	r1, #48	; 0x30
   3551e:	2909      	cmp	r1, #9
   35520:	d903      	bls.n	3552a <_svfiprintf_r+0x1aa>
   35522:	2b00      	cmp	r3, #0
   35524:	d0bd      	beq.n	354a2 <_svfiprintf_r+0x122>
   35526:	9207      	str	r2, [sp, #28]
   35528:	e7bb      	b.n	354a2 <_svfiprintf_r+0x122>
   3552a:	4342      	muls	r2, r0
   3552c:	3401      	adds	r4, #1
   3552e:	1852      	adds	r2, r2, r1
   35530:	2301      	movs	r3, #1
   35532:	e7f2      	b.n	3551a <_svfiprintf_r+0x19a>
   35534:	3307      	adds	r3, #7
   35536:	e7d5      	b.n	354e4 <_svfiprintf_r+0x164>
   35538:	ab05      	add	r3, sp, #20
   3553a:	9300      	str	r3, [sp, #0]
   3553c:	003a      	movs	r2, r7
   3553e:	4b11      	ldr	r3, [pc, #68]	; (35584 <_svfiprintf_r+0x204>)
   35540:	0029      	movs	r1, r5
   35542:	9802      	ldr	r0, [sp, #8]
   35544:	e000      	b.n	35548 <_svfiprintf_r+0x1c8>
   35546:	bf00      	nop
   35548:	9003      	str	r0, [sp, #12]
   3554a:	9b03      	ldr	r3, [sp, #12]
   3554c:	3301      	adds	r3, #1
   3554e:	d1cc      	bne.n	354ea <_svfiprintf_r+0x16a>
   35550:	89bb      	ldrh	r3, [r7, #12]
   35552:	980b      	ldr	r0, [sp, #44]	; 0x2c
   35554:	065b      	lsls	r3, r3, #25
   35556:	d400      	bmi.n	3555a <_svfiprintf_r+0x1da>
   35558:	e729      	b.n	353ae <_svfiprintf_r+0x2e>
   3555a:	2001      	movs	r0, #1
   3555c:	4240      	negs	r0, r0
   3555e:	e726      	b.n	353ae <_svfiprintf_r+0x2e>
   35560:	ab05      	add	r3, sp, #20
   35562:	9300      	str	r3, [sp, #0]
   35564:	003a      	movs	r2, r7
   35566:	4b07      	ldr	r3, [pc, #28]	; (35584 <_svfiprintf_r+0x204>)
   35568:	0029      	movs	r1, r5
   3556a:	9802      	ldr	r0, [sp, #8]
   3556c:	f000 f87a 	bl	35664 <_printf_i>
   35570:	e7ea      	b.n	35548 <_svfiprintf_r+0x1c8>
   35572:	46c0      	nop			; (mov r8, r8)
   35574:	00039ee2 	.word	0x00039ee2
   35578:	00039ee8 	.word	0x00039ee8
   3557c:	00039eec 	.word	0x00039eec
   35580:	00000000 	.word	0x00000000
   35584:	000352bd 	.word	0x000352bd

00035588 <_printf_common>:
   35588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3558a:	0015      	movs	r5, r2
   3558c:	9301      	str	r3, [sp, #4]
   3558e:	688a      	ldr	r2, [r1, #8]
   35590:	690b      	ldr	r3, [r1, #16]
   35592:	9000      	str	r0, [sp, #0]
   35594:	000c      	movs	r4, r1
   35596:	4293      	cmp	r3, r2
   35598:	da00      	bge.n	3559c <_printf_common+0x14>
   3559a:	0013      	movs	r3, r2
   3559c:	0022      	movs	r2, r4
   3559e:	602b      	str	r3, [r5, #0]
   355a0:	3243      	adds	r2, #67	; 0x43
   355a2:	7812      	ldrb	r2, [r2, #0]
   355a4:	2a00      	cmp	r2, #0
   355a6:	d001      	beq.n	355ac <_printf_common+0x24>
   355a8:	3301      	adds	r3, #1
   355aa:	602b      	str	r3, [r5, #0]
   355ac:	6823      	ldr	r3, [r4, #0]
   355ae:	069b      	lsls	r3, r3, #26
   355b0:	d502      	bpl.n	355b8 <_printf_common+0x30>
   355b2:	682b      	ldr	r3, [r5, #0]
   355b4:	3302      	adds	r3, #2
   355b6:	602b      	str	r3, [r5, #0]
   355b8:	2706      	movs	r7, #6
   355ba:	6823      	ldr	r3, [r4, #0]
   355bc:	401f      	ands	r7, r3
   355be:	d027      	beq.n	35610 <_printf_common+0x88>
   355c0:	0023      	movs	r3, r4
   355c2:	3343      	adds	r3, #67	; 0x43
   355c4:	781b      	ldrb	r3, [r3, #0]
   355c6:	1e5a      	subs	r2, r3, #1
   355c8:	4193      	sbcs	r3, r2
   355ca:	6822      	ldr	r2, [r4, #0]
   355cc:	0692      	lsls	r2, r2, #26
   355ce:	d430      	bmi.n	35632 <_printf_common+0xaa>
   355d0:	0022      	movs	r2, r4
   355d2:	9901      	ldr	r1, [sp, #4]
   355d4:	3243      	adds	r2, #67	; 0x43
   355d6:	9800      	ldr	r0, [sp, #0]
   355d8:	9e08      	ldr	r6, [sp, #32]
   355da:	47b0      	blx	r6
   355dc:	1c43      	adds	r3, r0, #1
   355de:	d025      	beq.n	3562c <_printf_common+0xa4>
   355e0:	2306      	movs	r3, #6
   355e2:	6820      	ldr	r0, [r4, #0]
   355e4:	682a      	ldr	r2, [r5, #0]
   355e6:	68e1      	ldr	r1, [r4, #12]
   355e8:	4003      	ands	r3, r0
   355ea:	2500      	movs	r5, #0
   355ec:	2b04      	cmp	r3, #4
   355ee:	d103      	bne.n	355f8 <_printf_common+0x70>
   355f0:	1a8d      	subs	r5, r1, r2
   355f2:	43eb      	mvns	r3, r5
   355f4:	17db      	asrs	r3, r3, #31
   355f6:	401d      	ands	r5, r3
   355f8:	68a3      	ldr	r3, [r4, #8]
   355fa:	6922      	ldr	r2, [r4, #16]
   355fc:	4293      	cmp	r3, r2
   355fe:	dd01      	ble.n	35604 <_printf_common+0x7c>
   35600:	1a9b      	subs	r3, r3, r2
   35602:	18ed      	adds	r5, r5, r3
   35604:	2700      	movs	r7, #0
   35606:	42bd      	cmp	r5, r7
   35608:	d120      	bne.n	3564c <_printf_common+0xc4>
   3560a:	2000      	movs	r0, #0
   3560c:	e010      	b.n	35630 <_printf_common+0xa8>
   3560e:	3701      	adds	r7, #1
   35610:	68e3      	ldr	r3, [r4, #12]
   35612:	682a      	ldr	r2, [r5, #0]
   35614:	1a9b      	subs	r3, r3, r2
   35616:	429f      	cmp	r7, r3
   35618:	dad2      	bge.n	355c0 <_printf_common+0x38>
   3561a:	0022      	movs	r2, r4
   3561c:	2301      	movs	r3, #1
   3561e:	3219      	adds	r2, #25
   35620:	9901      	ldr	r1, [sp, #4]
   35622:	9800      	ldr	r0, [sp, #0]
   35624:	9e08      	ldr	r6, [sp, #32]
   35626:	47b0      	blx	r6
   35628:	1c43      	adds	r3, r0, #1
   3562a:	d1f0      	bne.n	3560e <_printf_common+0x86>
   3562c:	2001      	movs	r0, #1
   3562e:	4240      	negs	r0, r0
   35630:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35632:	2030      	movs	r0, #48	; 0x30
   35634:	18e1      	adds	r1, r4, r3
   35636:	3143      	adds	r1, #67	; 0x43
   35638:	7008      	strb	r0, [r1, #0]
   3563a:	0021      	movs	r1, r4
   3563c:	1c5a      	adds	r2, r3, #1
   3563e:	3145      	adds	r1, #69	; 0x45
   35640:	7809      	ldrb	r1, [r1, #0]
   35642:	18a2      	adds	r2, r4, r2
   35644:	3243      	adds	r2, #67	; 0x43
   35646:	3302      	adds	r3, #2
   35648:	7011      	strb	r1, [r2, #0]
   3564a:	e7c1      	b.n	355d0 <_printf_common+0x48>
   3564c:	0022      	movs	r2, r4
   3564e:	2301      	movs	r3, #1
   35650:	321a      	adds	r2, #26
   35652:	9901      	ldr	r1, [sp, #4]
   35654:	9800      	ldr	r0, [sp, #0]
   35656:	9e08      	ldr	r6, [sp, #32]
   35658:	47b0      	blx	r6
   3565a:	1c43      	adds	r3, r0, #1
   3565c:	d0e6      	beq.n	3562c <_printf_common+0xa4>
   3565e:	3701      	adds	r7, #1
   35660:	e7d1      	b.n	35606 <_printf_common+0x7e>
	...

00035664 <_printf_i>:
   35664:	b5f0      	push	{r4, r5, r6, r7, lr}
   35666:	b08b      	sub	sp, #44	; 0x2c
   35668:	9206      	str	r2, [sp, #24]
   3566a:	000a      	movs	r2, r1
   3566c:	3243      	adds	r2, #67	; 0x43
   3566e:	9307      	str	r3, [sp, #28]
   35670:	9005      	str	r0, [sp, #20]
   35672:	9204      	str	r2, [sp, #16]
   35674:	7e0a      	ldrb	r2, [r1, #24]
   35676:	000c      	movs	r4, r1
   35678:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3567a:	2a6e      	cmp	r2, #110	; 0x6e
   3567c:	d100      	bne.n	35680 <_printf_i+0x1c>
   3567e:	e08f      	b.n	357a0 <_printf_i+0x13c>
   35680:	d817      	bhi.n	356b2 <_printf_i+0x4e>
   35682:	2a63      	cmp	r2, #99	; 0x63
   35684:	d02c      	beq.n	356e0 <_printf_i+0x7c>
   35686:	d808      	bhi.n	3569a <_printf_i+0x36>
   35688:	2a00      	cmp	r2, #0
   3568a:	d100      	bne.n	3568e <_printf_i+0x2a>
   3568c:	e099      	b.n	357c2 <_printf_i+0x15e>
   3568e:	2a58      	cmp	r2, #88	; 0x58
   35690:	d054      	beq.n	3573c <_printf_i+0xd8>
   35692:	0026      	movs	r6, r4
   35694:	3642      	adds	r6, #66	; 0x42
   35696:	7032      	strb	r2, [r6, #0]
   35698:	e029      	b.n	356ee <_printf_i+0x8a>
   3569a:	2a64      	cmp	r2, #100	; 0x64
   3569c:	d001      	beq.n	356a2 <_printf_i+0x3e>
   3569e:	2a69      	cmp	r2, #105	; 0x69
   356a0:	d1f7      	bne.n	35692 <_printf_i+0x2e>
   356a2:	6821      	ldr	r1, [r4, #0]
   356a4:	681a      	ldr	r2, [r3, #0]
   356a6:	0608      	lsls	r0, r1, #24
   356a8:	d523      	bpl.n	356f2 <_printf_i+0x8e>
   356aa:	1d11      	adds	r1, r2, #4
   356ac:	6019      	str	r1, [r3, #0]
   356ae:	6815      	ldr	r5, [r2, #0]
   356b0:	e025      	b.n	356fe <_printf_i+0x9a>
   356b2:	2a73      	cmp	r2, #115	; 0x73
   356b4:	d100      	bne.n	356b8 <_printf_i+0x54>
   356b6:	e088      	b.n	357ca <_printf_i+0x166>
   356b8:	d808      	bhi.n	356cc <_printf_i+0x68>
   356ba:	2a6f      	cmp	r2, #111	; 0x6f
   356bc:	d029      	beq.n	35712 <_printf_i+0xae>
   356be:	2a70      	cmp	r2, #112	; 0x70
   356c0:	d1e7      	bne.n	35692 <_printf_i+0x2e>
   356c2:	2220      	movs	r2, #32
   356c4:	6809      	ldr	r1, [r1, #0]
   356c6:	430a      	orrs	r2, r1
   356c8:	6022      	str	r2, [r4, #0]
   356ca:	e003      	b.n	356d4 <_printf_i+0x70>
   356cc:	2a75      	cmp	r2, #117	; 0x75
   356ce:	d020      	beq.n	35712 <_printf_i+0xae>
   356d0:	2a78      	cmp	r2, #120	; 0x78
   356d2:	d1de      	bne.n	35692 <_printf_i+0x2e>
   356d4:	0022      	movs	r2, r4
   356d6:	2178      	movs	r1, #120	; 0x78
   356d8:	3245      	adds	r2, #69	; 0x45
   356da:	7011      	strb	r1, [r2, #0]
   356dc:	4a6c      	ldr	r2, [pc, #432]	; (35890 <_printf_i+0x22c>)
   356de:	e030      	b.n	35742 <_printf_i+0xde>
   356e0:	000e      	movs	r6, r1
   356e2:	681a      	ldr	r2, [r3, #0]
   356e4:	3642      	adds	r6, #66	; 0x42
   356e6:	1d11      	adds	r1, r2, #4
   356e8:	6019      	str	r1, [r3, #0]
   356ea:	6813      	ldr	r3, [r2, #0]
   356ec:	7033      	strb	r3, [r6, #0]
   356ee:	2301      	movs	r3, #1
   356f0:	e079      	b.n	357e6 <_printf_i+0x182>
   356f2:	0649      	lsls	r1, r1, #25
   356f4:	d5d9      	bpl.n	356aa <_printf_i+0x46>
   356f6:	1d11      	adds	r1, r2, #4
   356f8:	6019      	str	r1, [r3, #0]
   356fa:	2300      	movs	r3, #0
   356fc:	5ed5      	ldrsh	r5, [r2, r3]
   356fe:	2d00      	cmp	r5, #0
   35700:	da03      	bge.n	3570a <_printf_i+0xa6>
   35702:	232d      	movs	r3, #45	; 0x2d
   35704:	9a04      	ldr	r2, [sp, #16]
   35706:	426d      	negs	r5, r5
   35708:	7013      	strb	r3, [r2, #0]
   3570a:	4b62      	ldr	r3, [pc, #392]	; (35894 <_printf_i+0x230>)
   3570c:	270a      	movs	r7, #10
   3570e:	9303      	str	r3, [sp, #12]
   35710:	e02f      	b.n	35772 <_printf_i+0x10e>
   35712:	6820      	ldr	r0, [r4, #0]
   35714:	6819      	ldr	r1, [r3, #0]
   35716:	0605      	lsls	r5, r0, #24
   35718:	d503      	bpl.n	35722 <_printf_i+0xbe>
   3571a:	1d08      	adds	r0, r1, #4
   3571c:	6018      	str	r0, [r3, #0]
   3571e:	680d      	ldr	r5, [r1, #0]
   35720:	e005      	b.n	3572e <_printf_i+0xca>
   35722:	0640      	lsls	r0, r0, #25
   35724:	d5f9      	bpl.n	3571a <_printf_i+0xb6>
   35726:	680d      	ldr	r5, [r1, #0]
   35728:	1d08      	adds	r0, r1, #4
   3572a:	6018      	str	r0, [r3, #0]
   3572c:	b2ad      	uxth	r5, r5
   3572e:	4b59      	ldr	r3, [pc, #356]	; (35894 <_printf_i+0x230>)
   35730:	2708      	movs	r7, #8
   35732:	9303      	str	r3, [sp, #12]
   35734:	2a6f      	cmp	r2, #111	; 0x6f
   35736:	d018      	beq.n	3576a <_printf_i+0x106>
   35738:	270a      	movs	r7, #10
   3573a:	e016      	b.n	3576a <_printf_i+0x106>
   3573c:	3145      	adds	r1, #69	; 0x45
   3573e:	700a      	strb	r2, [r1, #0]
   35740:	4a54      	ldr	r2, [pc, #336]	; (35894 <_printf_i+0x230>)
   35742:	9203      	str	r2, [sp, #12]
   35744:	681a      	ldr	r2, [r3, #0]
   35746:	6821      	ldr	r1, [r4, #0]
   35748:	1d10      	adds	r0, r2, #4
   3574a:	6018      	str	r0, [r3, #0]
   3574c:	6815      	ldr	r5, [r2, #0]
   3574e:	0608      	lsls	r0, r1, #24
   35750:	d522      	bpl.n	35798 <_printf_i+0x134>
   35752:	07cb      	lsls	r3, r1, #31
   35754:	d502      	bpl.n	3575c <_printf_i+0xf8>
   35756:	2320      	movs	r3, #32
   35758:	4319      	orrs	r1, r3
   3575a:	6021      	str	r1, [r4, #0]
   3575c:	2710      	movs	r7, #16
   3575e:	2d00      	cmp	r5, #0
   35760:	d103      	bne.n	3576a <_printf_i+0x106>
   35762:	2320      	movs	r3, #32
   35764:	6822      	ldr	r2, [r4, #0]
   35766:	439a      	bics	r2, r3
   35768:	6022      	str	r2, [r4, #0]
   3576a:	0023      	movs	r3, r4
   3576c:	2200      	movs	r2, #0
   3576e:	3343      	adds	r3, #67	; 0x43
   35770:	701a      	strb	r2, [r3, #0]
   35772:	6863      	ldr	r3, [r4, #4]
   35774:	60a3      	str	r3, [r4, #8]
   35776:	2b00      	cmp	r3, #0
   35778:	db5c      	blt.n	35834 <_printf_i+0x1d0>
   3577a:	2204      	movs	r2, #4
   3577c:	6821      	ldr	r1, [r4, #0]
   3577e:	4391      	bics	r1, r2
   35780:	6021      	str	r1, [r4, #0]
   35782:	2d00      	cmp	r5, #0
   35784:	d158      	bne.n	35838 <_printf_i+0x1d4>
   35786:	9e04      	ldr	r6, [sp, #16]
   35788:	2b00      	cmp	r3, #0
   3578a:	d064      	beq.n	35856 <_printf_i+0x1f2>
   3578c:	0026      	movs	r6, r4
   3578e:	9b03      	ldr	r3, [sp, #12]
   35790:	3642      	adds	r6, #66	; 0x42
   35792:	781b      	ldrb	r3, [r3, #0]
   35794:	7033      	strb	r3, [r6, #0]
   35796:	e05e      	b.n	35856 <_printf_i+0x1f2>
   35798:	0648      	lsls	r0, r1, #25
   3579a:	d5da      	bpl.n	35752 <_printf_i+0xee>
   3579c:	b2ad      	uxth	r5, r5
   3579e:	e7d8      	b.n	35752 <_printf_i+0xee>
   357a0:	6809      	ldr	r1, [r1, #0]
   357a2:	681a      	ldr	r2, [r3, #0]
   357a4:	0608      	lsls	r0, r1, #24
   357a6:	d505      	bpl.n	357b4 <_printf_i+0x150>
   357a8:	1d11      	adds	r1, r2, #4
   357aa:	6019      	str	r1, [r3, #0]
   357ac:	6813      	ldr	r3, [r2, #0]
   357ae:	6962      	ldr	r2, [r4, #20]
   357b0:	601a      	str	r2, [r3, #0]
   357b2:	e006      	b.n	357c2 <_printf_i+0x15e>
   357b4:	0649      	lsls	r1, r1, #25
   357b6:	d5f7      	bpl.n	357a8 <_printf_i+0x144>
   357b8:	1d11      	adds	r1, r2, #4
   357ba:	6019      	str	r1, [r3, #0]
   357bc:	6813      	ldr	r3, [r2, #0]
   357be:	8aa2      	ldrh	r2, [r4, #20]
   357c0:	801a      	strh	r2, [r3, #0]
   357c2:	2300      	movs	r3, #0
   357c4:	9e04      	ldr	r6, [sp, #16]
   357c6:	6123      	str	r3, [r4, #16]
   357c8:	e054      	b.n	35874 <_printf_i+0x210>
   357ca:	681a      	ldr	r2, [r3, #0]
   357cc:	1d11      	adds	r1, r2, #4
   357ce:	6019      	str	r1, [r3, #0]
   357d0:	6816      	ldr	r6, [r2, #0]
   357d2:	2100      	movs	r1, #0
   357d4:	6862      	ldr	r2, [r4, #4]
   357d6:	0030      	movs	r0, r6
   357d8:	f000 f922 	bl	35a20 <memchr>
   357dc:	2800      	cmp	r0, #0
   357de:	d001      	beq.n	357e4 <_printf_i+0x180>
   357e0:	1b80      	subs	r0, r0, r6
   357e2:	6060      	str	r0, [r4, #4]
   357e4:	6863      	ldr	r3, [r4, #4]
   357e6:	6123      	str	r3, [r4, #16]
   357e8:	2300      	movs	r3, #0
   357ea:	9a04      	ldr	r2, [sp, #16]
   357ec:	7013      	strb	r3, [r2, #0]
   357ee:	e041      	b.n	35874 <_printf_i+0x210>
   357f0:	6923      	ldr	r3, [r4, #16]
   357f2:	0032      	movs	r2, r6
   357f4:	9906      	ldr	r1, [sp, #24]
   357f6:	9805      	ldr	r0, [sp, #20]
   357f8:	9d07      	ldr	r5, [sp, #28]
   357fa:	47a8      	blx	r5
   357fc:	1c43      	adds	r3, r0, #1
   357fe:	d043      	beq.n	35888 <_printf_i+0x224>
   35800:	6823      	ldr	r3, [r4, #0]
   35802:	2500      	movs	r5, #0
   35804:	079b      	lsls	r3, r3, #30
   35806:	d40f      	bmi.n	35828 <_printf_i+0x1c4>
   35808:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3580a:	68e0      	ldr	r0, [r4, #12]
   3580c:	4298      	cmp	r0, r3
   3580e:	da3d      	bge.n	3588c <_printf_i+0x228>
   35810:	0018      	movs	r0, r3
   35812:	e03b      	b.n	3588c <_printf_i+0x228>
   35814:	0022      	movs	r2, r4
   35816:	2301      	movs	r3, #1
   35818:	3219      	adds	r2, #25
   3581a:	9906      	ldr	r1, [sp, #24]
   3581c:	9805      	ldr	r0, [sp, #20]
   3581e:	9e07      	ldr	r6, [sp, #28]
   35820:	47b0      	blx	r6
   35822:	1c43      	adds	r3, r0, #1
   35824:	d030      	beq.n	35888 <_printf_i+0x224>
   35826:	3501      	adds	r5, #1
   35828:	68e3      	ldr	r3, [r4, #12]
   3582a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3582c:	1a9b      	subs	r3, r3, r2
   3582e:	429d      	cmp	r5, r3
   35830:	dbf0      	blt.n	35814 <_printf_i+0x1b0>
   35832:	e7e9      	b.n	35808 <_printf_i+0x1a4>
   35834:	2d00      	cmp	r5, #0
   35836:	d0a9      	beq.n	3578c <_printf_i+0x128>
   35838:	9e04      	ldr	r6, [sp, #16]
   3583a:	0028      	movs	r0, r5
   3583c:	0039      	movs	r1, r7
   3583e:	f7fc ffe7 	bl	32810 <__aeabi_uidivmod>
   35842:	9b03      	ldr	r3, [sp, #12]
   35844:	3e01      	subs	r6, #1
   35846:	5c5b      	ldrb	r3, [r3, r1]
   35848:	0028      	movs	r0, r5
   3584a:	7033      	strb	r3, [r6, #0]
   3584c:	0039      	movs	r1, r7
   3584e:	f7fc ff59 	bl	32704 <__udivsi3>
   35852:	1e05      	subs	r5, r0, #0
   35854:	d1f1      	bne.n	3583a <_printf_i+0x1d6>
   35856:	2f08      	cmp	r7, #8
   35858:	d109      	bne.n	3586e <_printf_i+0x20a>
   3585a:	6823      	ldr	r3, [r4, #0]
   3585c:	07db      	lsls	r3, r3, #31
   3585e:	d506      	bpl.n	3586e <_printf_i+0x20a>
   35860:	6863      	ldr	r3, [r4, #4]
   35862:	6922      	ldr	r2, [r4, #16]
   35864:	4293      	cmp	r3, r2
   35866:	dc02      	bgt.n	3586e <_printf_i+0x20a>
   35868:	2330      	movs	r3, #48	; 0x30
   3586a:	3e01      	subs	r6, #1
   3586c:	7033      	strb	r3, [r6, #0]
   3586e:	9b04      	ldr	r3, [sp, #16]
   35870:	1b9b      	subs	r3, r3, r6
   35872:	6123      	str	r3, [r4, #16]
   35874:	9b07      	ldr	r3, [sp, #28]
   35876:	aa09      	add	r2, sp, #36	; 0x24
   35878:	9300      	str	r3, [sp, #0]
   3587a:	0021      	movs	r1, r4
   3587c:	9b06      	ldr	r3, [sp, #24]
   3587e:	9805      	ldr	r0, [sp, #20]
   35880:	f7ff fe82 	bl	35588 <_printf_common>
   35884:	1c43      	adds	r3, r0, #1
   35886:	d1b3      	bne.n	357f0 <_printf_i+0x18c>
   35888:	2001      	movs	r0, #1
   3588a:	4240      	negs	r0, r0
   3588c:	b00b      	add	sp, #44	; 0x2c
   3588e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35890:	00039f04 	.word	0x00039f04
   35894:	00039ef3 	.word	0x00039ef3

00035898 <__sread>:
   35898:	b570      	push	{r4, r5, r6, lr}
   3589a:	000c      	movs	r4, r1
   3589c:	250e      	movs	r5, #14
   3589e:	5f49      	ldrsh	r1, [r1, r5]
   358a0:	f000 f8f0 	bl	35a84 <_read_r>
   358a4:	2800      	cmp	r0, #0
   358a6:	db03      	blt.n	358b0 <__sread+0x18>
   358a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   358aa:	181b      	adds	r3, r3, r0
   358ac:	6563      	str	r3, [r4, #84]	; 0x54
   358ae:	bd70      	pop	{r4, r5, r6, pc}
   358b0:	89a3      	ldrh	r3, [r4, #12]
   358b2:	4a02      	ldr	r2, [pc, #8]	; (358bc <__sread+0x24>)
   358b4:	4013      	ands	r3, r2
   358b6:	81a3      	strh	r3, [r4, #12]
   358b8:	e7f9      	b.n	358ae <__sread+0x16>
   358ba:	46c0      	nop			; (mov r8, r8)
   358bc:	ffffefff 	.word	0xffffefff

000358c0 <__swrite>:
   358c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   358c2:	001f      	movs	r7, r3
   358c4:	898b      	ldrh	r3, [r1, #12]
   358c6:	0005      	movs	r5, r0
   358c8:	000c      	movs	r4, r1
   358ca:	0016      	movs	r6, r2
   358cc:	05db      	lsls	r3, r3, #23
   358ce:	d505      	bpl.n	358dc <__swrite+0x1c>
   358d0:	230e      	movs	r3, #14
   358d2:	5ec9      	ldrsh	r1, [r1, r3]
   358d4:	2200      	movs	r2, #0
   358d6:	2302      	movs	r3, #2
   358d8:	f000 f88e 	bl	359f8 <_lseek_r>
   358dc:	89a3      	ldrh	r3, [r4, #12]
   358de:	4a05      	ldr	r2, [pc, #20]	; (358f4 <__swrite+0x34>)
   358e0:	0028      	movs	r0, r5
   358e2:	4013      	ands	r3, r2
   358e4:	81a3      	strh	r3, [r4, #12]
   358e6:	0032      	movs	r2, r6
   358e8:	230e      	movs	r3, #14
   358ea:	5ee1      	ldrsh	r1, [r4, r3]
   358ec:	003b      	movs	r3, r7
   358ee:	f000 f839 	bl	35964 <_write_r>
   358f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   358f4:	ffffefff 	.word	0xffffefff

000358f8 <__sseek>:
   358f8:	b570      	push	{r4, r5, r6, lr}
   358fa:	000c      	movs	r4, r1
   358fc:	250e      	movs	r5, #14
   358fe:	5f49      	ldrsh	r1, [r1, r5]
   35900:	f000 f87a 	bl	359f8 <_lseek_r>
   35904:	89a3      	ldrh	r3, [r4, #12]
   35906:	1c42      	adds	r2, r0, #1
   35908:	d103      	bne.n	35912 <__sseek+0x1a>
   3590a:	4a05      	ldr	r2, [pc, #20]	; (35920 <__sseek+0x28>)
   3590c:	4013      	ands	r3, r2
   3590e:	81a3      	strh	r3, [r4, #12]
   35910:	bd70      	pop	{r4, r5, r6, pc}
   35912:	2280      	movs	r2, #128	; 0x80
   35914:	0152      	lsls	r2, r2, #5
   35916:	4313      	orrs	r3, r2
   35918:	81a3      	strh	r3, [r4, #12]
   3591a:	6560      	str	r0, [r4, #84]	; 0x54
   3591c:	e7f8      	b.n	35910 <__sseek+0x18>
   3591e:	46c0      	nop			; (mov r8, r8)
   35920:	ffffefff 	.word	0xffffefff

00035924 <__sclose>:
   35924:	b510      	push	{r4, lr}
   35926:	230e      	movs	r3, #14
   35928:	5ec9      	ldrsh	r1, [r1, r3]
   3592a:	f000 f82f 	bl	3598c <_close_r>
   3592e:	bd10      	pop	{r4, pc}

00035930 <strchr>:
   35930:	b2c9      	uxtb	r1, r1
   35932:	7803      	ldrb	r3, [r0, #0]
   35934:	2b00      	cmp	r3, #0
   35936:	d004      	beq.n	35942 <strchr+0x12>
   35938:	4299      	cmp	r1, r3
   3593a:	d100      	bne.n	3593e <strchr+0xe>
   3593c:	4770      	bx	lr
   3593e:	3001      	adds	r0, #1
   35940:	e7f7      	b.n	35932 <strchr+0x2>
   35942:	424b      	negs	r3, r1
   35944:	4159      	adcs	r1, r3
   35946:	4249      	negs	r1, r1
   35948:	4008      	ands	r0, r1
   3594a:	e7f7      	b.n	3593c <strchr+0xc>

0003594c <__ascii_wctomb>:
   3594c:	1e0b      	subs	r3, r1, #0
   3594e:	d004      	beq.n	3595a <__ascii_wctomb+0xe>
   35950:	2aff      	cmp	r2, #255	; 0xff
   35952:	d904      	bls.n	3595e <__ascii_wctomb+0x12>
   35954:	238a      	movs	r3, #138	; 0x8a
   35956:	6003      	str	r3, [r0, #0]
   35958:	3b8b      	subs	r3, #139	; 0x8b
   3595a:	0018      	movs	r0, r3
   3595c:	4770      	bx	lr
   3595e:	700a      	strb	r2, [r1, #0]
   35960:	2301      	movs	r3, #1
   35962:	e7fa      	b.n	3595a <__ascii_wctomb+0xe>

00035964 <_write_r>:
   35964:	b570      	push	{r4, r5, r6, lr}
   35966:	0005      	movs	r5, r0
   35968:	0008      	movs	r0, r1
   3596a:	0011      	movs	r1, r2
   3596c:	2200      	movs	r2, #0
   3596e:	4c06      	ldr	r4, [pc, #24]	; (35988 <_write_r+0x24>)
   35970:	6022      	str	r2, [r4, #0]
   35972:	001a      	movs	r2, r3
   35974:	f7f5 fa38 	bl	2ade8 <_write>
   35978:	1c43      	adds	r3, r0, #1
   3597a:	d103      	bne.n	35984 <_write_r+0x20>
   3597c:	6823      	ldr	r3, [r4, #0]
   3597e:	2b00      	cmp	r3, #0
   35980:	d000      	beq.n	35984 <_write_r+0x20>
   35982:	602b      	str	r3, [r5, #0]
   35984:	bd70      	pop	{r4, r5, r6, pc}
   35986:	46c0      	nop			; (mov r8, r8)
   35988:	20005ae8 	.word	0x20005ae8

0003598c <_close_r>:
   3598c:	2300      	movs	r3, #0
   3598e:	b570      	push	{r4, r5, r6, lr}
   35990:	4c06      	ldr	r4, [pc, #24]	; (359ac <_close_r+0x20>)
   35992:	0005      	movs	r5, r0
   35994:	0008      	movs	r0, r1
   35996:	6023      	str	r3, [r4, #0]
   35998:	f7f5 fa7a 	bl	2ae90 <_close>
   3599c:	1c43      	adds	r3, r0, #1
   3599e:	d103      	bne.n	359a8 <_close_r+0x1c>
   359a0:	6823      	ldr	r3, [r4, #0]
   359a2:	2b00      	cmp	r3, #0
   359a4:	d000      	beq.n	359a8 <_close_r+0x1c>
   359a6:	602b      	str	r3, [r5, #0]
   359a8:	bd70      	pop	{r4, r5, r6, pc}
   359aa:	46c0      	nop			; (mov r8, r8)
   359ac:	20005ae8 	.word	0x20005ae8

000359b0 <_fstat_r>:
   359b0:	2300      	movs	r3, #0
   359b2:	b570      	push	{r4, r5, r6, lr}
   359b4:	4c06      	ldr	r4, [pc, #24]	; (359d0 <_fstat_r+0x20>)
   359b6:	0005      	movs	r5, r0
   359b8:	0008      	movs	r0, r1
   359ba:	0011      	movs	r1, r2
   359bc:	6023      	str	r3, [r4, #0]
   359be:	f7f5 fa71 	bl	2aea4 <_fstat>
   359c2:	1c43      	adds	r3, r0, #1
   359c4:	d103      	bne.n	359ce <_fstat_r+0x1e>
   359c6:	6823      	ldr	r3, [r4, #0]
   359c8:	2b00      	cmp	r3, #0
   359ca:	d000      	beq.n	359ce <_fstat_r+0x1e>
   359cc:	602b      	str	r3, [r5, #0]
   359ce:	bd70      	pop	{r4, r5, r6, pc}
   359d0:	20005ae8 	.word	0x20005ae8

000359d4 <_isatty_r>:
   359d4:	2300      	movs	r3, #0
   359d6:	b570      	push	{r4, r5, r6, lr}
   359d8:	4c06      	ldr	r4, [pc, #24]	; (359f4 <_isatty_r+0x20>)
   359da:	0005      	movs	r5, r0
   359dc:	0008      	movs	r0, r1
   359de:	6023      	str	r3, [r4, #0]
   359e0:	f7f5 fa6e 	bl	2aec0 <_isatty>
   359e4:	1c43      	adds	r3, r0, #1
   359e6:	d103      	bne.n	359f0 <_isatty_r+0x1c>
   359e8:	6823      	ldr	r3, [r4, #0]
   359ea:	2b00      	cmp	r3, #0
   359ec:	d000      	beq.n	359f0 <_isatty_r+0x1c>
   359ee:	602b      	str	r3, [r5, #0]
   359f0:	bd70      	pop	{r4, r5, r6, pc}
   359f2:	46c0      	nop			; (mov r8, r8)
   359f4:	20005ae8 	.word	0x20005ae8

000359f8 <_lseek_r>:
   359f8:	b570      	push	{r4, r5, r6, lr}
   359fa:	0005      	movs	r5, r0
   359fc:	0008      	movs	r0, r1
   359fe:	0011      	movs	r1, r2
   35a00:	2200      	movs	r2, #0
   35a02:	4c06      	ldr	r4, [pc, #24]	; (35a1c <_lseek_r+0x24>)
   35a04:	6022      	str	r2, [r4, #0]
   35a06:	001a      	movs	r2, r3
   35a08:	f7f5 fa63 	bl	2aed2 <_lseek>
   35a0c:	1c43      	adds	r3, r0, #1
   35a0e:	d103      	bne.n	35a18 <_lseek_r+0x20>
   35a10:	6823      	ldr	r3, [r4, #0]
   35a12:	2b00      	cmp	r3, #0
   35a14:	d000      	beq.n	35a18 <_lseek_r+0x20>
   35a16:	602b      	str	r3, [r5, #0]
   35a18:	bd70      	pop	{r4, r5, r6, pc}
   35a1a:	46c0      	nop			; (mov r8, r8)
   35a1c:	20005ae8 	.word	0x20005ae8

00035a20 <memchr>:
   35a20:	b2c9      	uxtb	r1, r1
   35a22:	1882      	adds	r2, r0, r2
   35a24:	4290      	cmp	r0, r2
   35a26:	d101      	bne.n	35a2c <memchr+0xc>
   35a28:	2000      	movs	r0, #0
   35a2a:	4770      	bx	lr
   35a2c:	7803      	ldrb	r3, [r0, #0]
   35a2e:	428b      	cmp	r3, r1
   35a30:	d0fb      	beq.n	35a2a <memchr+0xa>
   35a32:	3001      	adds	r0, #1
   35a34:	e7f6      	b.n	35a24 <memchr+0x4>

00035a36 <_realloc_r>:
   35a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35a38:	0007      	movs	r7, r0
   35a3a:	000d      	movs	r5, r1
   35a3c:	0016      	movs	r6, r2
   35a3e:	2900      	cmp	r1, #0
   35a40:	d105      	bne.n	35a4e <_realloc_r+0x18>
   35a42:	0011      	movs	r1, r2
   35a44:	f7fe fe9e 	bl	34784 <_malloc_r>
   35a48:	0004      	movs	r4, r0
   35a4a:	0020      	movs	r0, r4
   35a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35a4e:	2a00      	cmp	r2, #0
   35a50:	d103      	bne.n	35a5a <_realloc_r+0x24>
   35a52:	f7fe fe4d 	bl	346f0 <_free_r>
   35a56:	0034      	movs	r4, r6
   35a58:	e7f7      	b.n	35a4a <_realloc_r+0x14>
   35a5a:	f000 f827 	bl	35aac <_malloc_usable_size_r>
   35a5e:	002c      	movs	r4, r5
   35a60:	4286      	cmp	r6, r0
   35a62:	d9f2      	bls.n	35a4a <_realloc_r+0x14>
   35a64:	0031      	movs	r1, r6
   35a66:	0038      	movs	r0, r7
   35a68:	f7fe fe8c 	bl	34784 <_malloc_r>
   35a6c:	1e04      	subs	r4, r0, #0
   35a6e:	d0ec      	beq.n	35a4a <_realloc_r+0x14>
   35a70:	0029      	movs	r1, r5
   35a72:	0032      	movs	r2, r6
   35a74:	f7fe fe18 	bl	346a8 <memcpy>
   35a78:	0029      	movs	r1, r5
   35a7a:	0038      	movs	r0, r7
   35a7c:	f7fe fe38 	bl	346f0 <_free_r>
   35a80:	e7e3      	b.n	35a4a <_realloc_r+0x14>
	...

00035a84 <_read_r>:
   35a84:	b570      	push	{r4, r5, r6, lr}
   35a86:	0005      	movs	r5, r0
   35a88:	0008      	movs	r0, r1
   35a8a:	0011      	movs	r1, r2
   35a8c:	2200      	movs	r2, #0
   35a8e:	4c06      	ldr	r4, [pc, #24]	; (35aa8 <_read_r+0x24>)
   35a90:	6022      	str	r2, [r4, #0]
   35a92:	001a      	movs	r2, r3
   35a94:	f7f5 f97e 	bl	2ad94 <_read>
   35a98:	1c43      	adds	r3, r0, #1
   35a9a:	d103      	bne.n	35aa4 <_read_r+0x20>
   35a9c:	6823      	ldr	r3, [r4, #0]
   35a9e:	2b00      	cmp	r3, #0
   35aa0:	d000      	beq.n	35aa4 <_read_r+0x20>
   35aa2:	602b      	str	r3, [r5, #0]
   35aa4:	bd70      	pop	{r4, r5, r6, pc}
   35aa6:	46c0      	nop			; (mov r8, r8)
   35aa8:	20005ae8 	.word	0x20005ae8

00035aac <_malloc_usable_size_r>:
   35aac:	1f0b      	subs	r3, r1, #4
   35aae:	681b      	ldr	r3, [r3, #0]
   35ab0:	1f18      	subs	r0, r3, #4
   35ab2:	2b00      	cmp	r3, #0
   35ab4:	da01      	bge.n	35aba <_malloc_usable_size_r+0xe>
   35ab6:	580b      	ldr	r3, [r1, r0]
   35ab8:	18c0      	adds	r0, r0, r3
   35aba:	4770      	bx	lr

00035abc <pcWelcomeMessage>:
   35abc:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   35acc:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   35adc:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   35aec:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   35afc:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   35b0c:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   35b1c:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   35b2c:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   35b3c:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   35b4c:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   35b5c:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   35b6c:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   35b7c:	0a0d 0000 656c 0064 656c 2064 6b5b 7965     ....led.led [key
   35b8c:	756e 5d6d 525b 5b5d 5d47 425b 3a5d 5320     num][R][G][B]: S
   35b9c:	7465 2073 6874 2065 6967 6576 206e 454c     ets the given LE
   35bac:	2044 6f74 7420 6568 6720 7669 6e65 5220     D to the given R
   35bbc:	472c 422c 7620 6c61 6575 2e73 0a0d 0000     ,G,B values.....
   35bcc:	6567 6274 7475 6f74 006e 0000 6567 6274     getbutton...getb
   35bdc:	7475 6f74 3a6e 5020 6f72 6563 7373 7365     utton: Processes
   35bec:	6120 646e 7020 6972 746e 2073 6874 2065      and prints the 
   35bfc:	4946 4f46 6220 7475 6f74 206e 7562 6666     FIFO button buff
   35c0c:	7265 6620 6f72 206d 6874 2065 6573 7365     er from the sees
   35c1c:	7761 0d2e 000a 0000 6873 6374 0000 0000     aw......shtc....
   35c2c:	6873 6374 203a 6567 2074 6574 706d 6120     shtc: get temp a
   35c3c:	646e 6820 6d75 6469 7469 0d79 000a 0000     nd humidity.....
   35c4c:	6167 656d 0000 0000 6167 656d 203a 6553     game....game: Se
   35c5c:	646e 2073 7564 6d6d 2079 6167 656d 6420     nds dummy game d
   35c6c:	7461 0d61 000a 0000 3269 0063 3269 3a63     ata.....i2c.i2c:
   35c7c:	5320 6163 736e 4920 4332 6220 7375 0a0d      Scans I2C bus..
   35c8c:	0000 0000 6c63 0073 6c63 3a73 4320 656c     ....cls.cls: Cle
   35c9c:	7261 2073 6874 2065 6574 6d72 6e69 6c61     ars the terminal
   35cac:	7320 7263 6565 0d6e 000a 0000 6f43 6c75      screen.....Coul
   35cbc:	2064 6f6e 2074 6c61 6f6c 6163 6574 7320     d not allocate s
   35ccc:	6d65 7061 6f68 6572 0a0d 0000 0a0d 0000     emaphore........
   35cdc:	616f 0000 6325 325b 0d4b 003e 2008 0008     oa..%c[2K.>.. ..
   35cec:	6341 6563 656c 6172 6974 6e6f 5b20 676d     Acceleration [mg
   35cfc:	3a5d 2058 6425 5909 2520 0964 205a 6425     ]:X %d.Y %d.Z %d
   35d0c:	0a0d 0000 6f4e 6420 7461 2061 6572 6461     ....No data read
   35d1c:	2179 5320 6e65 6964 676e 6420 6d75 796d     y! Sending dummy
   35d2c:	6420 7461 2061 0a0d 0000 0000 4853 4354      data ......SHTC
   35d3c:	6520 7272 726f 0d21 000a 0000 7568 696d      error!.....humi
   35d4c:	6964 7974 3d20 2520 2064 202c 6574 706d     dity = %d , temp
   35d5c:	3d20 2520 2064 0a0d 0000 0000 6325 325b      = %d ......%c[2
   35d6c:	004a 0000 7453 6475 6e65 7374 7420 206f     J...Students to 
   35d7c:	6966 6c6c 6f20 7475 0021 0000 7542 7474     fill out!...Butt
   35d8c:	6e6f 2320 6425 6920 2073 6572 656c 7361     on #%d is releas
   35d9c:	6465 0a0d 0000 0000 7542 7474 6e6f 2320     ed......Button #
   35dac:	6425 6920 2073 7270 7365 6573 0d64 000a     %d is pressed...
   35dbc:	7544 6d6d 2079 6147 656d 4420 7461 2061     Dummy Game Data 
   35dcc:	514d 5454 5020 736f 0d74 000a 2030 3120     MQTT Post...0  1
   35ddc:	2020 2032 3320 2020 2034 3520 2020 2036       2  3  4  5  6 
   35dec:	3720 2020 2038 3920 2020 2061 6220 2020      7  8  9  a  b  
   35dfc:	2063 6420 2020 2065 6620 0a0d 0000 0000     c  d  e  f......
   35e0c:	3025 7832 203a 0000 3025 7832 0020 0000     %02x: ..%02x ...

00035e1c <xImuGetCommand>:
   35e1c:	5b00 0003 5b04 0003 3209 0001 0000 0000     .[...[...2......

00035e2c <xOTAUCommand>:
   35e2c:	5b28 0003 5b2c 0003 3409 0001 0000 0000     ([..,[...4......

00035e3c <xResetCommand>:
   35e3c:	5b5c 0003 5b64 0003 3429 0001 0000 0000     \[..d[..)4......

00035e4c <xNeotrellisTurnLEDCommand>:
   35e4c:	5b80 0003 5b84 0003 3449 0001 0004 0000     .[...[..I4......

00035e5c <xNeotrellisProcessButtonCommand>:
   35e5c:	5bcc 0003 5bd8 0003 3475 0001 0000 0000     .[...[..u4......

00035e6c <xSHTCGetCommand>:
   35e6c:	5c24 0003 5c2c 0003 3355 0001 0000 0000     $\..,\..U3......

00035e7c <xSendDummyGameData>:
   35e7c:	5c4c 0003 5c54 0003 3579 0001 0000 0000     L\..T\..y5......

00035e8c <xI2cScan>:
   35e8c:	5c74 0003 5c78 0003 3615 0001 0000 0000     t\..x\...6......

00035e9c <xClearScreen>:
   35e9c:	5c90 0003 5c94 0003 33c1 0001 0000 0000     .\...\...3......
   35eac:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   35ebc:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   35ecc:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   35edc:	676e 4320 6e6f 7274 6c6f 4420 7461 2061     ng Control Data 
   35eec:	7571 7565 7365 0d21 000a 0000 6f43 746e     queues!.....Cont
   35efc:	6f72 206c 6854 6572 6461 203a 6f43 736e     rol Thread: Cons
   35f0c:	6d75 6465 6720 6d61 2065 6170 6b63 7465     umed game packet
   35f1c:	0d21 000a 6f43 746e 6f72 206c 6854 6572     !...Control Thre
   35f2c:	6461 203a 6f43 6c75 2064 6f6e 2074 6573     ad: Could not se
   35f3c:	646e 6720 6d61 2065 6170 6b63 7465 0d21     nd game packet!.
   35f4c:	000a 0000                                   ....

00035f50 <msgBaseGetHWID>:
   35f50:	0100 0000                                   ....

00035f54 <msgNeopixelPin>:
   35f54:	010e 0003                                   ....

00035f58 <msgNeopixelSpeed>:
   35f58:	020e 0001                                   ....

00035f5c <msgNeopixelBufLength>:
   35f5c:	030e 3000                                   ...0

00035f60 <msgKeypadEnableInt>:
   35f60:	0210 0001                                   ....

00035f64 <msgKeypadGetCount>:
   35f64:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   35f74:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   35f84:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   35f94:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   35fa4:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   35fb4:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   35fc4:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   35fd4:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   35fe4:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   35ff4:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   36004:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   36014:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   36024:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   36034:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   36044:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   36054:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   36064:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   36074:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   36084:	6574 2164 0000 0000                         ted!....

0003608c <main_mqtt_broker>:
   3608c:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   3609c:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   360ac:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   360bc:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   360cc:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   360dc:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   360ec:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   360fc:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   3610c:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   3611c:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   3612c:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   3613c:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   3614c:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   3615c:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   3616c:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   3617c:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   3618c:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   3619c:	7564 7e2f 6170 7474 6e61 2f61 7766 622e     du/~pattana/fw.b
   361ac:	6e69 0000 7473 726f 5f65 6966 656c 705f     in..store_file_p
   361bc:	6361 656b 3a74 6520 706d 7974 6420 7461     acket: empty dat
   361cc:	2e61 0a0d 0000 0000 7473 726f 5f65 6966     a.......store_fi
   361dc:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   361ec:	616e 656d 6920 2073 6e69 6176 696c 2e64     name is invalid.
   361fc:	4420 776f 6c6e 616f 2064 6163 636e 6c65      Download cancel
   3620c:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   3621c:	656c 705f 6361 656b 3a74 6320 6572 7461     le_packet: creat
   3622c:	6e69 2067 6966 656c 5b20 7325 0d5d 000a     ing file [%s]...
   3623c:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   3624c:	3a74 6620 6c69 2065 7263 6165 6974 6e6f     t: file creation
   3625c:	6520 7272 726f 2021 6572 3a74 6425 0a0d      error! ret:%d..
   3626c:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   3627c:	6361 656b 3a74 6620 6c69 2065 7277 7469     acket: file writ
   3628c:	2065 7265 6f72 2c72 6420 776f 6c6e 616f     e error, downloa
   3629c:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   362ac:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   362bc:	3a74 7220 6365 6965 6576 5b64 6c25 5d75     t: received[%lu]
   362cc:	202c 6966 656c 7320 7a69 5b65 6c25 5d75     , file size[%lu]
   362dc:	0a0d 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   362ec:	6361 656b 3a74 6620 6c69 2065 6f64 6e77     acket: file down
   362fc:	6f6c 6461 6465 7320 6375 6563 7373 7566     loaded successfu
   3630c:	6c6c 2e79 0a0d 0000 7468 7074 635f 696c     lly.....http_cli
   3631c:	6e65 5f74 6163 6c6c 6162 6b63 203a 5448     ent_callback: HT
   3632c:	5054 6320 696c 6e65 2074 6f73 6b63 7465     TP client socket
   3633c:	6320 6e6f 656e 7463 6465 0d2e 000a 0000      connected......
   3634c:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   3635c:	6162 6b63 203a 6572 7571 7365 2074 6f63     back: request co
   3636c:	706d 656c 6574 2e64 0a0d 0000 7468 7074     mpleted.....http
   3637c:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   3638c:	203a 6572 6563 7669 6465 7220 7365 6f70     : received respo
   3639c:	736e 2065 7525 6420 7461 2061 6973 657a     nse %u data size
   363ac:	2520 0d75 000a 0000 7468 7074 635f 696c      %u.....http_cli
   363bc:	6e65 5f74 6163 6c6c 6162 6b63 203a 6964     ent_callback: di
   363cc:	6373 6e6f 656e 7463 6f69 206e 6572 7361     sconnection reas
   363dc:	6e6f 253a 0d64 000a 6572 6f73 766c 5f65     on:%d...resolve_
   363ec:	6263 203a 7325 4920 2050 6461 7264 7365     cb: %s IP addres
   363fc:	2073 7369 2520 2e64 6425 252e 2e64 6425     s is %d.%d.%d.%d
   3640c:	0a0d 0a0d 0000 0000 6977 6966 635f 3a62     ........wifi_cb:
   3641c:	4d20 4d32 575f 4649 5f49 4f43 4e4e 4345      M2M_WIFI_CONNEC
   3642c:	4554 0d44 000a 0000 6977 6966 635f 3a62     TED.....wifi_cb:
   3643c:	4d20 4d32 575f 4649 5f49 4944 4353 4e4f      M2M_WIFI_DISCON
   3644c:	454e 5443 4445 0a0d 0000 0000 3532 3530     NECTED......2505
   3645c:	3931 3739 0000 0000 694b 276d 2073 6f48     1997....Kim's Ho
   3646c:	656d 0000 6977 6966 635f 3a62 4920 2050     me..wifi_cb: IP 
   3647c:	6461 7264 7365 2073 7369 2520 2e75 7525     address is %u.%u
   3648c:	252e 2e75 7525 0a0d 0000 0000 7245 6f72     .%u.%u......Erro
   3649c:	2072 6f63 6e6e 6365 6974 676e 7420 206f     r connecting to 
   364ac:	514d 5454 4220 6f72 656b 2172 0a0d 0000     MQTT Broker!....
   364bc:	6e69 7469 735f 6f74 6172 6567 203a 6c70     init_storage: pl
   364cc:	6165 6573 7020 756c 2067 6e61 5320 2f44     ease plug an SD/
   364dc:	4d4d 2043 6163 6472 6920 206e 6c73 746f     MMC card in slot
   364ec:	2e2e 0d2e 000a 0000 6e69 7469 735f 6f74     ........init_sto
   364fc:	6172 6567 203a 4453 4320 7261 2064 6e69     rage: SD Card in
   3650c:	7473 6c61 206c 6166 6c69 6465 0d2e 000a     stall failed....
   3651c:	6e69 7469 735f 6f74 6172 6567 203a 7274     init_storage: tr
   3652c:	2079 6e75 6c70 6775 6120 646e 7220 2d65     y unplug and re-
   3653c:	6c70 6775 7420 6568 6320 7261 2e64 0a0d     plug the card...
   3654c:	0000 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   3655c:	203a 6f6d 6e75 6974 676e 5320 2044 6163     : mounting SD ca
   3656c:	6472 2e2e 0d2e 000a 6e69 7469 735f 6f74     rd......init_sto
   3657c:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   3658c:	6e75 2074 6166 6c69 6465 2021 7228 7365     unt failed! (res
   3659c:	2520 2964 0a0d 0000 6e69 7469 735f 6f74      %d)....init_sto
   365ac:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   365bc:	6e75 2074 4b4f 0d2e 000a 0000 6f63 666e     unt OK......conf
   365cc:	6769 7275 5f65 7468 7074 635f 696c 6e65     igure_http_clien
   365dc:	3a74 4820 5454 2050 6c63 6569 746e 6920     t: HTTP client i
   365ec:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   365fc:	6c69 6465 2021 7228 7365 2520 2964 0a0d     iled! (res %d)..
   3660c:	0000 0000 0a0d 2520 2a2e 0073 6772 2862     ...... %.*s.rgb(
   3661c:	0000 0000 0a0d 4752 2042 6425 2520 2064     ......RGB %d %d 
   3662c:	6425 0a0d 0000 0000 227b 6167 656d 3a22     %d......{"game":
   3663c:	005b 0000 0a0d 6147 656d 6d20 7365 6173     [.....Game messa
   3664c:	6567 7220 6365 6965 6576 2164 0a0d 0000     ge received!....
   3665c:	2e25 732a 0000 0000 0a0d 6150 7372 6465     %.*s......Parsed
   3666c:	4320 6d6f 616d 646e 203a 0000 6425 002c      Command: ..%d,.
   3667c:	0a0d 6553 746e 7020 616c 2079 6f74 6320     ..Sent play to c
   3668c:	6e6f 7274 6c6f 0d21 000a 0000 0a0d 6147     ontrol!.......Ga
   3669c:	656d 6d20 7365 6173 6567 7220 6365 6965     me message recei
   366ac:	6576 2064 7562 2074 6f6e 2074 6e75 6564     ved but not unde
   366bc:	7372 6f74 646f 0d21 000a 0000 0a0d 4d49     rstood!.......IM
   366cc:	2055 6f74 6970 2063 6572 6563 7669 6465     U topic received
   366dc:	0d21 000a 0a0d 6944 7473 6e61 6563 7420     !.....Distance t
   366ec:	706f 6369 7220 6365 6965 6576 2164 0a0d     opic received!..
   366fc:	0000 0000 3e20 203e 0000 0000 3150 4c5f     .... >> ....P1_L
   3670c:	4445 455f 4553 3135 5f36 3054 0000 0000     ED_ESE516_T0....
   3671c:	6166 736c 0065 0000 7274 6575 0000 0000     false...true....
   3672c:	0a0d 6f43 6e6e 6365 6974 676e 7420 206f     ..Connecting to 
   3673c:	7242 6b6f 7265 2e2e 002e 0000 7242 4a73     Broker......BrsJ
   3674c:	4e42 6f56 4251 376c 0000 0000 7472 7974     BNVoQBl7....rtty
   3675c:	626f 6a65 0000 0000 514d 5454 2020 7245     obej....MQTT  Er
   3676c:	6f72 2072 202d 4f4e 2054 6f43 6e6e 6365     ror - NOT Connec
   3677c:	6574 2064 6f74 6220 6f72 656b 0d72 000a     ted to broker...
   3678c:	514d 5454 4320 6e6f 656e 7463 6465 7420     MQTT Connected t
   3679c:	206f 7262 6b6f 7265 0a0d 0000 6f43 6e6e     o broker....Conn
   367ac:	6365 2074 6166 6c69 7420 206f 6573 7672     ect fail to serv
   367bc:	7265 2528 2973 2021 6572 7274 2079 7469     er(%s)! retry it
   367cc:	6120 7475 6d6f 7461 6369 6c61 796c 0d2e      automatically..
   367dc:	000a 0000 3150 475f 4d41 5f45 5345 3545     ....P1_GAME_ESE5
   367ec:	3631 545f 0030 0000 3150 495f 554d 455f     16_T0...P1_IMU_E
   367fc:	4553 3135 5f36 3054 0000 0000 514d 5454     SE516_T0....MQTT
   3680c:	4320 6e6f 656e 7463 6465 0a0d 0000 0000      Connected......
   3681c:	514d 5454 6220 6f72 656b 2072 6564 6c63     MQTT broker decl
   3682c:	6e69 2065 6f79 7275 6120 6363 7365 2173     ine your access!
   3683c:	6520 7272 726f 6320 646f 2065 6425 0a0d      error code %d..
   3684c:	0000 0000 514d 5454 6420 7369 6f63 6e6e     ....MQTT disconn
   3685c:	6365 6574 0d64 000a 514d 5454 6920 696e     ected...MQTT ini
   3686c:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
   3687c:	6465 202e 7245 6f72 2072 6f63 6564 6920     ed. Error code i
   3688c:	2073 2528 2964 0a0d 0000 0000 514d 5454     s (%d)......MQTT
   3689c:	7220 6765 7369 6574 2072 6163 6c6c 6162      register callba
   368ac:	6b63 6620 6961 656c 2e64 4520 7272 726f     ck failed. Error
   368bc:	6320 646f 2065 7369 2820 6425 0d29 000a      code is (%d)...
   368cc:	227b 2264 7b3a 7422 6d65 2270 253a 7d64     {"d":{"temp":%d}
   368dc:	007d 0000 6f43 6e6e 6365 6574 2064 6f74     }...Connected to
   368ec:	4d20 5451 2054 7242 6b6f 7265 0d21 000a      MQTT Broker!...
   368fc:	227b 6d69 7875 3a22 6425 202c 6922 756d     {"imux":%d, "imu
   3690c:	2279 203a 6425 202c 6922 756d 227a 203a     y": %d, "imuz": 
   3691c:	6425 007d 6425 0000 7d5d 0000 0a0d 0000     %d}.%d..]}......
   3692c:	3250 475f 4d41 5f45 5345 3545 3631 545f     P2_GAME_ESE516_T
   3693c:	0030 0000 5245 4f52 2052 6e49 7469 6169     0...ERROR Initia
   3694c:	696c 697a 676e 5720 6669 2069 6144 6174     lizing Wifi Data
   3695c:	7120 6575 6575 2173 0a0d 0000 5345 3545      queues!....ESE5
   3696c:	3631 2d20 5720 6669 2069 6e49 7469 4320     16 - Wifi Init C
   3697c:	646f 0d65 000a 0000 616d 6e69 203a 326d     ode.....main: m2
   3698c:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
   3699c:	6520 7272 726f 2021 7228 7365 2520 2964      error! (res %d)
   369ac:	0a0d 0000 616d 6e69 203a 6f63 6e6e 6365     ....main: connec
   369bc:	6974 676e 7420 206f 6957 6946 4120 2050     ting to WiFi AP 
   369cc:	7325 2e2e 0d2e 000a 3150 545f 4d45 4550     %s......P1_TEMPE
   369dc:	4152 5554 4552 455f 4553 3135 5f36 3054     RATURE_ESE516_T0
   369ec:	0000 0000 514d 5454 7320 6e65 2064 7325     ....MQTT send %s
   369fc:	0a0d 0000 465b 4941 5d4c 7220 7365 2520     ....[FAIL] res %
   36a0c:	0d64 000a 7075 6164 6574 742e 7478 6120     d...update.txt a
   36a1c:	6464 6465 0d21 000a 3a30 7075 6164 6574     dded!...0:update
   36a2c:	742e 7478 0000 0000 605c 0001 6068 0001     .txt....\`..h`..
   36a3c:	607a 0001 60d0 0001 60f0 0001 6568 706c     z`...`...`..help
   36a4c:	0000 0000 0a0d 6568 706c 0d3a 200a 694c     ......help:.. Li
   36a5c:	7473 2073 6c61 206c 6874 2065 6572 6967     sts all the regi
   36a6c:	7473 7265 6465 6320 6d6f 616d 646e 0d73     stered commands.
   36a7c:	0d0a 000a 6e49 6f63 7272 6365 2074 6f63     ....Incorrect co
   36a8c:	6d6d 6e61 2064 6170 6172 656d 6574 2872     mmand parameter(
   36a9c:	2973 202e 4520 746e 7265 2220 6568 706c     s).  Enter "help
   36aac:	2022 6f74 7620 6569 2077 2061 696c 7473     " to view a list
   36abc:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   36acc:	6d6d 6e61 7364 0d2e 0d0a 000a 6f43 6d6d     mmands......Comm
   36adc:	6e61 2064 6f6e 2074 6572 6f63 6e67 7369     and not recognis
   36aec:	6465 202e 4520 746e 7265 2720 6568 706c     ed.  Enter 'help
   36afc:	2027 6f74 7620 6569 2077 2061 696c 7473     ' to view a list
   36b0c:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   36b1c:	6d6d 6e61 7364 0d2e 0d0a 000a               mmands......

00036b28 <xHelpCommand>:
   36b28:	6a48 0003 6a50 0003 7d05 0001 0000 0000     Hj..Pj...}......
   36b38:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   36b48:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   36b58:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   36b68:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   36b78:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   36b88:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   36b98:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   36ba8:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   36bb8:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   36bc8:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   36bd8:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   36be8:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   36bf8:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   36c08:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   36c18:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   36c28:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   36c38:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   36c48:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   36c58:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   36c68:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   36c78:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   36c88:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   36c98:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   36ca8:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   36cb8:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   36cc8:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   36cd8:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   36ce8:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   36cf8:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   36d08:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   36d18:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   36d28:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   36d38:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   36d48:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   36d58:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   36d68:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   36d78:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   36d88:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   36d98:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   36da8:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   36db8:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   36dc8:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   36dd8:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   36de8:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   36df8:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   36e08:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   36e18:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   36e28:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   36e38:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   36e48:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   36e58:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   36e68:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   36e78:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   36e88:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   36e98:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   36ea8:	6365 6374 616c 7373 0021 0000 842a 0001     ectclass!...*...
   36eb8:	8422 0001 8426 0001 841a 0001 841e 0001     "...&...........
   36ec8:	842e 0001 8432 0001 8436 0001 843a 0001     ....2...6...:...
   36ed8:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   36ee8:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   36ef8:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   36f08:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   36f18:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   36f28:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   36f38:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   36f48:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   36f58:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   36f68:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   36f78:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   36f88:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   36f98:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   36fa8:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   36fb8:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   36fc8:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   36fd8:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   36fe8:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   36ff8:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   37008:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   37018:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   37028:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   37038:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   37048:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   37058:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   37068:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   37078:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   37088:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   37098:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   370a8:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   370b8:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   370c8:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   370d8:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   370e8:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   370f8:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   37108:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   37118:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   37128:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   37138:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   37148:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   37158:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   37168:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   37178:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   37188:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   37198:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   371a8:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   371b8:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   371c8:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   371d8:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   371e8:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   371f8:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   37208:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   37218:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   37228:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   37238:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   37248:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   37258:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   37268:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   37278:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   37288:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37298:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   372a8:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   372b8:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   372c8:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   372d8:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   372e8:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   372f8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37308:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   37318:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   37328:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   37338:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37348:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37358:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   37368:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37378:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   37388:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   37398:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   373a8:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   373b8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   373c8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   373d8:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   373e8:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   373f8:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   37408:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   37418:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   37428:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   37438:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37448:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37458:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   37468:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   37478:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37488:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37498:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   374a8:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   374b8:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   374c8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   374d8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   374e8:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   374f8:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   37508:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   37518:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   37528:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37538:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   37548:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37558:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   37568:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   37578:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   37588:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37598:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   375a8:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   375b8:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   375c8:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   375d8:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   375e8:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   375f8:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   37608:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   37618:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37628:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   37638:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   37648:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   37658:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   37668:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   37678:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   37688:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   37698:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   376a8:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   376b8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   376c8:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   376d8:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   376e8:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   376f8:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   37708:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   37718:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   37728:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   37738:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   37748:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   37758:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37768:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   37778:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   37788:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   37798:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   377a8:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   377b8:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   377c8:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   377d8:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   377e8:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   377f8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37808:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   37818:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   37828:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   37838:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37848:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   37858:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   37868:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   37878:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37888:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37898:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   378a8:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   378b8:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   378c8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   378d8:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   378e8:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   378f8:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37908:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37918:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   37928:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   37938:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   37948:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37958:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   37968:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   37978:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37988:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37998:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   379a8:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   379b8:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   379c8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   379d8:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   379e8:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   379f8:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   37a08:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   37a18:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   37a28:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   37a38:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   37a48:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37a58:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37a68:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37a78:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   37a88:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37a98:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37aa8:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37ab8:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   37ac8:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   37ad8:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   37ae8:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   37af8:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   37b08:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37b18:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   37b28:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   37b38:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   37b48:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   37b58:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   37b68:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   37b78:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   37b88:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   37b98:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37ba8:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   37bb8:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   37bc8:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   37bd8:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   37be8:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   37bf8:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   37c08:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37c18:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   37c28:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   37c38:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   37c48:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   37c58:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   37c68:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   37c78:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   37c88:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   37c98:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   37ca8:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   37cb8:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   37cc8:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   37cd8:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   37ce8:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   37cf8:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   37d08:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   37d18:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   37d28:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37d38:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   37d48:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   37d58:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   37d68:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   37d78:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   37d88:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   37d98:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   37da8:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   37db8:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   37dc8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37dd8:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   37de8:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   37df8:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   37e08:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   37e18:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   37e28:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   37e38:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   37e48:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   37e58:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   37e68:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   37e78:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   37e88:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   37e98:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   37ea8:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   37eb8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37ec8:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   37ed8:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   37ee8:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   37ef8:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   37f08:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   37f18:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   37f28:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   37f38:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   37f48:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   37f58:	0000 0000 6d54 2072 7653 0063 d4c8 0001     ....Tmr Svc.....
   37f68:	d4c8 0001 d4c8 0001 d556 0001 d520 0001     ........V... ...
   37f78:	d54a 0001 d4c8 0001 d4c8 0001 d556 0001     J...........V...
   37f88:	d520 0001                                    ...

00037f8c <sd_mmc_trans_units>:
   37f8c:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00037fa8 <sd_trans_multipliers>:
   37fa8:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   37fb8:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   37fc8:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   37fd8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00037fe8 <mmc_trans_multipliers>:
   37fe8:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   37ff8:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   38008:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   38018:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   38028:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38038:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   38048:	746c 6320 646d 000a 000d 0000               lt cmd......

00038054 <__FUNCTION__.17099>:
   38054:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   38064:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   38074:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   38084:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   38094:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   380a4:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   380b4:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   380c4:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   380d4:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   380e4:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   380f4:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   38104:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   38114:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   38124:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   38134:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   38144:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   38154:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   38164:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   38174:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   38184:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   38194:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   381a4:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   381b4:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   381c4:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   381d4:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   381e4:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   381f4:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   38204:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   38214:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   38224:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   38234:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   38244:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   38254:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   38264:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   38274:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   38284:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   38294:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   382a4:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   382b4:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   382c4:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   382d4:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   382e4:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   382f4:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   38304:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   38314:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   38324:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   38334:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   38344:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   38354:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   38364:	203f 6425 000a 0000 1668 0002 1638 0002     ? %d....h...8...
   38374:	1630 0002 1648 0002 1640 0002 1660 0002     0...H...@...`...
   38384:	1650 0002 1658 0002                         P...X...

0003838c <__FUNCTION__.17967>:
   3838c:	6968 5f66 6573 646e 0000 0000               hif_send....

00038398 <__FUNCTION__.17977>:
   38398:	6968 5f66 7369 0072                         hif_isr.

000383a0 <__FUNCTION__.17986>:
   383a0:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

000383b0 <__FUNCTION__.17998>:
   383b0:	6968 5f66 6572 6563 7669 0065               hif_receive.

000383bc <__FUNCTION__.18014>:
   383bc:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   383cc:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   383dc:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   383ec:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   383fc:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3840c:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   3841c:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   3842c:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   3843c:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   3844c:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   3845c:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   3846c:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   3847c:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   3848c:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   3849c:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   384ac:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   384bc:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   384cc:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   384dc:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   384ec:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   384fc:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   3850c:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   3851c:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   3852c:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   3853c:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   3854c:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   3855c:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   3856c:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   3857c:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   3858c:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   3859c:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   385ac:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   385bc:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   385cc:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   385dc:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   385ec:	000a 0000 3231 343a 3a31 3632 0000 0000     ....12:41:26....
   385fc:	7041 2072 3033 3220 3230 0032 7244 7669     Apr 30 2022.Driv
   3860c:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   3861c:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   3862c:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   3863c:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   3864c:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   3865c:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   3866c:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   3867c:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   3868c:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   3869c:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   386ac:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   386bc:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   386cc:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   386dc:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   386ec:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   386fc:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   3870c:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   3871c:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   3872c:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   3873c:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   3874c:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   3875c:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   3876c:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   3877c:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   3878c:	4220 6675 6566 0a72 0000 0000                Buffer.....

00038798 <__FUNCTION__.17949>:
   38798:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

000387a4 <__FUNCTION__.17978>:
   387a4:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

000387b4 <__FUNCTION__.18009>:
   387b4:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   387c4:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   387d4:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   387e4:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   387f4:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   38804:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   38814:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   38824:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   38834:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   38844:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00038854 <__FUNCTION__.17806>:
   38854:	6863 7069 775f 6b61 0065 0000               chip_wake...

00038860 <__FUNCTION__.17855>:
   38860:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   38870:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   38880:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   38890:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   388a0:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   388b0:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   388c0:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   388d0:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   388e0:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   388f0:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   38900:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   38910:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   38920:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   38930:	6920 696e 2074 7562 0a73 0000                init bus...

0003893c <__FUNCTION__.17853>:
   3893c:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00038948 <__FUNCTION__.17860>:
   38948:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00038958 <crc7_syndrome_table>:
   38958:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   38968:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   38978:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   38988:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   38998:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   389a8:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   389b8:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   389c8:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   389d8:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   389e8:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   389f8:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   38a08:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   38a18:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   38a28:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   38a38:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   38a48:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   38a58:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38a68:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   38a78:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   38a88:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   38a98:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38aa8:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   38ab8:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38ac8:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38ad8:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   38ae8:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   38af8:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   38b08:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   38b18:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   38b28:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   38b38:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   38b48:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   38b58:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   38b68:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   38b78:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   38b88:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38b98:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   38ba8:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   38bb8:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38bc8:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   38bd8:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   38be8:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   38bf8:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   38c08:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   38c18:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   38c28:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   38c38:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   38c48:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   38c58:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   38c68:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   38c78:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   38c88:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   38c98:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   38ca8:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   38cb8:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38cc8:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38cd8:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   38ce8:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   38cf8:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   38d08:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   38d18:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38d28:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   38d38:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   38d48:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   38d58:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   38d68:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   38d78:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   38d88:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38d98:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   38da8:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   38db8:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   38dc8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   38dd8:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   38de8:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   38df8:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   38e08:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   38e18:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   38e28:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   38e38:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38e48:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   38e58:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   38e68:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   38e78:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   38e88:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   38e98:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   38ea8:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   38eb8:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   38ec8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   38ed8:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   38ee8:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   38ef8:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38f08:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   38f18:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   38f28:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   38f38:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   38f48:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38f58:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   38f68:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   38f78:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38f88:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   38f98:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   38fa8:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   38fb8:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   38fc8:	2e2e 0a2e 0000 0000 3290 0002 3290 0002     .........2...2..
   38fd8:	3320 0002 31e4 0002 322a 0002 324c 0002      3...1..*2..L2..
   38fe8:	32d2 0002 32d2 0002 338c 0002 31b8 0002     .2...2...3...1..
   38ff8:	33e6 0002 33e6 0002 33e6 0002 33e6 0002     .3...3...3...3..
   39008:	326e 0002 37f0 0002 37f0 0002 3878 0002     n2...7...7..x8..
   39018:	3754 0002 3796 0002 37b4 0002 382e 0002     T7...7...7...8..
   39028:	382e 0002 38da 0002 372c 0002 392a 0002     .8...8..,7..*9..
   39038:	392a 0002 392a 0002 392a 0002 37d2 0002     *9..*9..*9...7..

00039048 <__FUNCTION__.17128>:
   39048:	7073 5f69 6d63 0064                         spi_cmd.

00039050 <__FUNCTION__.17135>:
   39050:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00039060 <__FUNCTION__.17144>:
   39060:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0003906c <__FUNCTION__.17177>:
   3906c:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   3907c:	0000 0000                                   ....

00039080 <__FUNCTION__.17223>:
   39080:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00039090 <__FUNCTION__.17235>:
   39090:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

000390a0 <__FUNCTION__.17246>:
   390a0:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

000390b0 <__FUNCTION__.17258>:
   390b0:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

000390c0 <__FUNCTION__.17269>:
   390c0:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

000390cc <__FUNCTION__.17290>:
   390cc:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   390dc:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   390ec:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   390fc:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   3910c:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   3911c:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   3912c:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   3913c:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   3914c:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   3915c:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   3916c:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   3917c:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   3918c:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   3919c:	2074 2230 0000 0000                         t 0"....

000391a4 <lun_desc>:
   391a4:	eeed 0001 ef45 0001 ef91 0001 efdd 0001     ....E...........
   391b4:	f00d 0001 f091 0001 f121 0001 918c 0003     ........!.......
   391c4:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   391d4:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   391e4:	920e 0002 9288 0002 9288 0002 922c 0002     ............,...
   391f4:	9226 0002 9232 0002 9214 0002 9238 0002     &...2.......8...
   39204:	926e 0002 9470 0002 94c0 0002 94c0 0002     n...p...........
   39214:	94bc 0002 9462 0002 9482 0002 9452 0002     ....b.......R...
   39224:	9494 0002 94a6 0002 950e 0002 953c 0002     ............<...
   39234:	953c 0002 9538 0002 9508 0002 9514 0002     <...8...........
   39244:	9502 0002 951a 0002 9520 0002               ........ ...

00039250 <tcc_modules>:
   39250:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

0003925c <_tcc_gclk_ids>:
   3925c:	1a1a 001b                                   ....

00039260 <_tcc_apbcmasks>:
   39260:	0100 0000 0200 0000 0400 0000               ............

0003926c <_tcc_maxs>:
   3926c:	ffff 00ff ffff 00ff ffff 0000               ............

00039278 <_tcc_cc_nums>:
   39278:	0204 0002                                   ....

0003927c <_tcc_ow_nums>:
   3927c:	0408 0002                                   ....

00039280 <_tcc_intflag>:
   39280:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   39290:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   392a0:	0000 0001 0000 0002 0000 0004 0000 0008     ................

000392b0 <LfnOfs>:
   392b0:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   392c0:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   392d0:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   392e0:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   392f0:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   39300:	5441 2020 2020 0020                         AT     .

00039308 <excvt.4558>:
   39308:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   39318:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   39328:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   39338:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   39348:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   39358:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   39368:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   39378:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00039388 <Tbl>:
   39388:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   39398:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   393a8:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   393b8:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   393c8:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   393d8:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   393e8:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   393f8:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   39408:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   39418:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   39428:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   39438:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   39448:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   39458:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   39468:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   39478:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00039488 <tbl_lower.4308>:
   39488:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   39498:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   394a8:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   394b8:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   394c8:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   394d8:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   394e8:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   394f8:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   39508:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   39518:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   39528:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   39538:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   39548:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   39558:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   39568:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   39578:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   39588:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   39598:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   395a8:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   395b8:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   395c8:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   395d8:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   395e8:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   395f8:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   39608:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   39618:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   39628:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   39638:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   39648:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   39658:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00039668 <tbl_upper.4309>:
   39668:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   39678:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   39688:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   39698:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   396a8:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   396b8:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   396c8:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   396d8:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   396e8:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   396f8:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   39708:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   39718:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   39728:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   39738:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   39748:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   39758:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   39768:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   39778:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   39788:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   39798:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   397a8:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   397b8:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   397c8:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   397d8:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   397e8:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   397f8:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   39808:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   39818:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   39828:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   39838:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   39848:	e87a 0002 e87a 0002 e87a 0002 e708 0002     z...z...z.......
   39858:	e87a 0002 e7f2 0002 e87a 0002 e87a 0002     z.......z...z...
   39868:	e87a 0002 e87a 0002 e87a 0002 e87a 0002     z...z...z...z...
   39878:	e87a 0002 e86c 0002 514d 4354 0000 0000     z...l...MQTC....
   39888:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   39898:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   398d8:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   398f0:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   39930:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   39940:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   39950:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   39960:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   39970:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   39980:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   39990:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   399a0:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   399b0:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   399c0:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   399d0:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   399e0:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   399f0:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   39a00:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   39a10:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   39a20:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   39a30:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   39a40:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   39a50:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   39a60:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   39a70:	5448 5054 002f 0000 0d31 0000 096e 0003     HTTP/...1...n...
   39a80:	0968 0003 0962 0003 095c 0003 0974 0003     h...b...\...t...
   39a90:	0956 0003 0974 0003 0950 0003 094a 0003     V...t...P...J...
   39aa0:	0974 0003 0944 0003 0944 0003 093e 0003     t...D...D...>...
   39ab0:	0938 0003 0932 0003 2000 4200 2400 4200     8...2.... .B.$.B
   39ac0:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   39ad0:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   39ae0:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   39af0:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   39b00:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   39b10:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   39b20:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   39b30:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   39b40:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   39b50:	676e 5320 6565 6173 2177 0a0d 0000 0000     ng Seesaw!......
   39b60:	6e49 7469 6169 696c 657a 2064 6553 7365     Initialized Sees
   39b70:	7761 0d21 000a 0000 6143 6e6e 746f 6620     aw!.....Cannot f
   39b80:	6e69 2064 4d49 2155 0a0d 0000 4d49 2055     ind IMU!....IMU 
   39b90:	6f66 6e75 2164 0a0d 0000 0000 4d49 2055     found!......IMU 
   39ba0:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   39bb0:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   39bc0:	696c 657a 4920 554d 0a0d 0000 6548 7061     lize IMU....Heap
   39bd0:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   39be0:	7420 7361 736b 203a 6425 0a0d 0000 0000      tasks: %d......
   39bf0:	4c43 5f49 4154 4b53 0000 0000 5245 3a52     CLI_TASK....ERR:
   39c00:	4320 494c 7420 7361 206b 6f63 6c75 2064      CLI task could 
   39c10:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   39c20:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   39c30:	7265 7320 6174 7472 6e69 2067 4c43 3a49     er starting CLI:
   39c40:	2520 0d64 000a 0000 4957 4946 545f 5341      %d.....WIFI_TAS
   39c50:	004b 0000 5245 3a52 5720 4649 2049 6174     K...ERR: WIFI ta
   39c60:	6b73 6320 756f 646c 6e20 746f 6220 2065     sk could not be 
   39c70:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   39c80:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   39c90:	6e69 2067 4957 4946 203a 6425 0a0d 0000     ing WIFI: %d....
   39ca0:	4955 5420 7361 006b 5245 3a52 5520 2049     UI Task.ERR: UI 
   39cb0:	6174 6b73 6320 756f 646c 6e20 746f 6220     task could not b
   39cc0:	2065 6e69 7469 6169 696c 657a 2164 0a0d     e initialized!..
   39cd0:	0000 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   39ce0:	6174 7472 6e69 2067 4955 5420 7361 3a6b     tarting UI Task:
   39cf0:	2520 0d64 000a 0000 6f43 746e 6f72 206c      %d.....Control 
   39d00:	6154 6b73 0000 0000 5245 3a52 4320 6e6f     Task....ERR: Con
   39d10:	7274 6c6f 7420 7361 206b 6f63 6c75 2064     trol task could 
   39d20:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   39d30:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   39d40:	7265 7320 6174 7472 6e69 2067 6f43 746e     er starting Cont
   39d50:	6f72 206c 6154 6b73 203a 6425 0a0d 0000     rol Task: %d....
   39d60:	7245 6f72 2072 6e6f 6d20 6d65 726f 2079     Error on memory 
   39d70:	6c61 6f6c 6163 6974 6e6f 6f20 206e 5246     allocation on FR
   39d80:	4545 5452 534f 0d21 000a 0000 7245 6f72     EERTOS!.....Erro
   39d90:	2072 6e6f 7320 6174 6b63 6f20 6576 6672     r on stack overf
   39da0:	6f6c 2077 6e6f 4620 4552 5245 4f54 2153     low on FREERTOS!
   39db0:	0a0d 0000 2b70 0003 2ac0 0003 2ac0 0003     ....p+...*...*..
   39dc0:	2abe 0003 2b62 0003 2b62 0003 2b58 0003     .*..b+..b+..X+..
   39dd0:	2abe 0003 2b62 0003 2b58 0003 2b62 0003     .*..b+..X+..b+..
   39de0:	2abe 0003 2b68 0003 2b68 0003 2b68 0003     .*..h+..h+..h+..
   39df0:	2bf8 0003 357c 0003 355e 0003 3518 0003     .+..|5..^5...5..
   39e00:	3436 0003 3518 0003 3550 0003 3518 0003     64...5..P5...5..
   39e10:	3436 0003 355e 0003 355e 0003 3550 0003     64..^5..^5..P5..
   39e20:	3436 0003 342e 0003 342e 0003 342e 0003     64...4...4...4..
   39e30:	3794 0003 3bdc 0003 3a9c 0003 3a9c 0003     .7...;...:...:..
   39e40:	3a98 0003 3bb4 0003 3bb4 0003 3ba6 0003     .:...;...;...;..
   39e50:	3a98 0003 3bb4 0003 3ba6 0003 3bb4 0003     .:...;...;...;..
   39e60:	3a98 0003 3bbc 0003 3bbc 0003 3bbc 0003     .:...;...;...;..
   39e70:	3dc0 0003                                   .=..

00039e74 <_global_impure_ptr>:
   39e74:	0154 2000                                   T.. 

00039e78 <__sf_fake_stderr>:
	...

00039e98 <__sf_fake_stdin>:
	...

00039eb8 <__sf_fake_stdout>:
	...
   39ed8:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   39ee8:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   39ef8:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   39f08:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

00039f15 <_ctype_>:
   39f15:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   39f25:	2020 2020 2020 2020 2020 2020 2020 2020                     
   39f35:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   39f45:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   39f55:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   39f65:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   39f75:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   39f85:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   39f95:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003a018 <_init>:
   3a018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a01a:	46c0      	nop			; (mov r8, r8)
   3a01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3a01e:	bc08      	pop	{r3}
   3a020:	469e      	mov	lr, r3
   3a022:	4770      	bx	lr

0003a024 <__init_array_start>:
   3a024:	000120dd 	.word	0x000120dd

0003a028 <_fini>:
   3a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a02a:	46c0      	nop			; (mov r8, r8)
   3a02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3a02e:	bc08      	pop	{r3}
   3a030:	469e      	mov	lr, r3
   3a032:	4770      	bx	lr

0003a034 <__fini_array_start>:
   3a034:	000120b5 	.word	0x000120b5
