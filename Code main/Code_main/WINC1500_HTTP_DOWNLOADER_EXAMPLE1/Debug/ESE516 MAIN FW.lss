
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000280fc  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002a4  20000000  0003a0fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005570  200002b0  0003a3b0  000302b0  2**4
                  ALLOC
  3 .stack        00002000  20005820  0003f920  000302b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000302cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   001243ae  00000000  00000000  00030325  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0001054c  00000000  00000000  001546d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00016515  00000000  00000000  00164c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003bc0  00000000  00000000  0017b134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003858  00000000  00000000  0017ecf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028e4a  00000000  00000000  0018254c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005abe6  00000000  00000000  001ab396  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c3a5e  00000000  00000000  00205f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000e224  00000000  00000000  002c99dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	20 78 00 20 ed ad 02 00 e5 ae 02 00 e5 ae 02 00      x. ............
	...
   1202c:	39 a3 01 00 00 00 00 00 00 00 00 00 61 a4 01 00     9...........a...
   1203c:	a9 a4 01 00 e5 ae 02 00 e5 ae 02 00 e5 ae 02 00     ................
   1204c:	3d 6f 02 00 69 64 02 00 e5 ae 02 00 61 24 01 00     =o..id......a$..
   1205c:	e5 ae 02 00 a5 25 01 00 e1 75 02 00 f9 75 02 00     .....%...u...u..
   1206c:	11 76 02 00 29 76 02 00 41 76 02 00 59 76 02 00     .v..)v..Av..Yv..
   1207c:	35 ad 02 00 49 ad 02 00 5d ad 02 00 75 7f 01 00     5...I...]...u...
   1208c:	89 7f 01 00 9d 7f 01 00 00 00 00 00 00 00 00 00     ................
   1209c:	e9 22 01 00 e5 ae 02 00 25 24 01 00 e5 ae 02 00     ."......%$......
   120ac:	e5 ae 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002b0 	.word	0x200002b0
   120d4:	00000000 	.word	0x00000000
   120d8:	0003a0fc 	.word	0x0003a0fc

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002b4 	.word	0x200002b4
   12108:	0003a0fc 	.word	0x0003a0fc
   1210c:	0003a0fc 	.word	0x0003a0fc
   12110:	00000000 	.word	0x00000000

00012114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	7e5b      	ldrb	r3, [r3, #25]
   12126:	b2db      	uxtb	r3, r3
   12128:	b25b      	sxtb	r3, r3
   1212a:	2b00      	cmp	r3, #0
   1212c:	da01      	bge.n	12132 <adc_is_syncing+0x1e>
		return true;
   1212e:	2301      	movs	r3, #1
   12130:	e000      	b.n	12134 <adc_is_syncing+0x20>
	}

	return false;
   12132:	2300      	movs	r3, #0
}
   12134:	0018      	movs	r0, r3
   12136:	46bd      	mov	sp, r7
   12138:	b004      	add	sp, #16
   1213a:	bd80      	pop	{r7, pc}

0001213c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1213c:	b580      	push	{r7, lr}
   1213e:	b084      	sub	sp, #16
   12140:	af00      	add	r7, sp, #0
   12142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	681b      	ldr	r3, [r3, #0]
   12148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1214a:	46c0      	nop			; (mov r8, r8)
   1214c:	687b      	ldr	r3, [r7, #4]
   1214e:	0018      	movs	r0, r3
   12150:	4b0b      	ldr	r3, [pc, #44]	; (12180 <adc_start_conversion+0x44>)
   12152:	4798      	blx	r3
   12154:	1e03      	subs	r3, r0, #0
   12156:	d1f9      	bne.n	1214c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12158:	68fb      	ldr	r3, [r7, #12]
   1215a:	7b1b      	ldrb	r3, [r3, #12]
   1215c:	b2db      	uxtb	r3, r3
   1215e:	2202      	movs	r2, #2
   12160:	4313      	orrs	r3, r2
   12162:	b2da      	uxtb	r2, r3
   12164:	68fb      	ldr	r3, [r7, #12]
   12166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12168:	46c0      	nop			; (mov r8, r8)
   1216a:	687b      	ldr	r3, [r7, #4]
   1216c:	0018      	movs	r0, r3
   1216e:	4b04      	ldr	r3, [pc, #16]	; (12180 <adc_start_conversion+0x44>)
   12170:	4798      	blx	r3
   12172:	1e03      	subs	r3, r0, #0
   12174:	d1f9      	bne.n	1216a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12176:	46c0      	nop			; (mov r8, r8)
   12178:	46bd      	mov	sp, r7
   1217a:	b004      	add	sp, #16
   1217c:	bd80      	pop	{r7, pc}
   1217e:	46c0      	nop			; (mov r8, r8)
   12180:	00012115 	.word	0x00012115

00012184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12184:	b580      	push	{r7, lr}
   12186:	b084      	sub	sp, #16
   12188:	af00      	add	r7, sp, #0
   1218a:	6078      	str	r0, [r7, #4]
   1218c:	000a      	movs	r2, r1
   1218e:	1cfb      	adds	r3, r7, #3
   12190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12192:	687b      	ldr	r3, [r7, #4]
   12194:	681b      	ldr	r3, [r3, #0]
   12196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12198:	68fb      	ldr	r3, [r7, #12]
   1219a:	1cfa      	adds	r2, r7, #3
   1219c:	7812      	ldrb	r2, [r2, #0]
   1219e:	759a      	strb	r2, [r3, #22]
}
   121a0:	46c0      	nop			; (mov r8, r8)
   121a2:	46bd      	mov	sp, r7
   121a4:	b004      	add	sp, #16
   121a6:	bd80      	pop	{r7, pc}

000121a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   121a8:	b580      	push	{r7, lr}
   121aa:	b084      	sub	sp, #16
   121ac:	af00      	add	r7, sp, #0
   121ae:	0002      	movs	r2, r0
   121b0:	1dfb      	adds	r3, r7, #7
   121b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   121b4:	1dfb      	adds	r3, r7, #7
   121b6:	781a      	ldrb	r2, [r3, #0]
   121b8:	4b47      	ldr	r3, [pc, #284]	; (122d8 <_adc_interrupt_handler+0x130>)
   121ba:	0092      	lsls	r2, r2, #2
   121bc:	58d3      	ldr	r3, [r2, r3]
   121be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   121c0:	68fb      	ldr	r3, [r7, #12]
   121c2:	681b      	ldr	r3, [r3, #0]
   121c4:	7e1b      	ldrb	r3, [r3, #24]
   121c6:	b2da      	uxtb	r2, r3
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	681b      	ldr	r3, [r3, #0]
   121cc:	7ddb      	ldrb	r3, [r3, #23]
   121ce:	b2db      	uxtb	r3, r3
   121d0:	4013      	ands	r3, r2
   121d2:	b2db      	uxtb	r3, r3
   121d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   121d6:	68bb      	ldr	r3, [r7, #8]
   121d8:	2201      	movs	r2, #1
   121da:	4013      	ands	r3, r2
   121dc:	d045      	beq.n	1226a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   121de:	68fb      	ldr	r3, [r7, #12]
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	2201      	movs	r2, #1
   121e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   121e6:	46c0      	nop			; (mov r8, r8)
   121e8:	68fb      	ldr	r3, [r7, #12]
   121ea:	0018      	movs	r0, r3
   121ec:	4b3b      	ldr	r3, [pc, #236]	; (122dc <_adc_interrupt_handler+0x134>)
   121ee:	4798      	blx	r3
   121f0:	1e03      	subs	r3, r0, #0
   121f2:	d1f9      	bne.n	121e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	695b      	ldr	r3, [r3, #20]
   121f8:	1c99      	adds	r1, r3, #2
   121fa:	68fa      	ldr	r2, [r7, #12]
   121fc:	6151      	str	r1, [r2, #20]
   121fe:	68fa      	ldr	r2, [r7, #12]
   12200:	6812      	ldr	r2, [r2, #0]
   12202:	8b52      	ldrh	r2, [r2, #26]
   12204:	b292      	uxth	r2, r2
   12206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	8b1b      	ldrh	r3, [r3, #24]
   1220c:	b29b      	uxth	r3, r3
   1220e:	3b01      	subs	r3, #1
   12210:	b29b      	uxth	r3, r3
   12212:	68fa      	ldr	r2, [r7, #12]
   12214:	1c19      	adds	r1, r3, #0
   12216:	8311      	strh	r1, [r2, #24]
   12218:	2b00      	cmp	r3, #0
   1221a:	d008      	beq.n	1222e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	7f5b      	ldrb	r3, [r3, #29]
   12220:	2b00      	cmp	r3, #0
   12222:	d022      	beq.n	1226a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12224:	68fb      	ldr	r3, [r7, #12]
   12226:	0018      	movs	r0, r3
   12228:	4b2d      	ldr	r3, [pc, #180]	; (122e0 <_adc_interrupt_handler+0x138>)
   1222a:	4798      	blx	r3
   1222c:	e01d      	b.n	1226a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1222e:	68fb      	ldr	r3, [r7, #12]
   12230:	2101      	movs	r1, #1
   12232:	0018      	movs	r0, r3
   12234:	4b2b      	ldr	r3, [pc, #172]	; (122e4 <_adc_interrupt_handler+0x13c>)
   12236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12238:	68fb      	ldr	r3, [r7, #12]
   1223a:	7f1b      	ldrb	r3, [r3, #28]
   1223c:	b2db      	uxtb	r3, r3
   1223e:	2b05      	cmp	r3, #5
   12240:	d113      	bne.n	1226a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12242:	68fb      	ldr	r3, [r7, #12]
   12244:	2200      	movs	r2, #0
   12246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12248:	68fb      	ldr	r3, [r7, #12]
   1224a:	7edb      	ldrb	r3, [r3, #27]
   1224c:	001a      	movs	r2, r3
   1224e:	2301      	movs	r3, #1
   12250:	4013      	ands	r3, r2
   12252:	d00a      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12254:	68fb      	ldr	r3, [r7, #12]
   12256:	7e9b      	ldrb	r3, [r3, #26]
   12258:	001a      	movs	r2, r3
   1225a:	2301      	movs	r3, #1
   1225c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1225e:	d004      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12260:	68fb      	ldr	r3, [r7, #12]
   12262:	689b      	ldr	r3, [r3, #8]
   12264:	68fa      	ldr	r2, [r7, #12]
   12266:	0010      	movs	r0, r2
   12268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	2204      	movs	r2, #4
   1226e:	4013      	ands	r3, r2
   12270:	d014      	beq.n	1229c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12272:	68fb      	ldr	r3, [r7, #12]
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	2204      	movs	r2, #4
   12278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1227a:	68fb      	ldr	r3, [r7, #12]
   1227c:	7edb      	ldrb	r3, [r3, #27]
   1227e:	001a      	movs	r2, r3
   12280:	2302      	movs	r3, #2
   12282:	4013      	ands	r3, r2
   12284:	d00a      	beq.n	1229c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12286:	68fb      	ldr	r3, [r7, #12]
   12288:	7e9b      	ldrb	r3, [r3, #26]
   1228a:	001a      	movs	r2, r3
   1228c:	2302      	movs	r3, #2
   1228e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12290:	d004      	beq.n	1229c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12292:	68fb      	ldr	r3, [r7, #12]
   12294:	68db      	ldr	r3, [r3, #12]
   12296:	68fa      	ldr	r2, [r7, #12]
   12298:	0010      	movs	r0, r2
   1229a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1229c:	68bb      	ldr	r3, [r7, #8]
   1229e:	2202      	movs	r2, #2
   122a0:	4013      	ands	r3, r2
   122a2:	d014      	beq.n	122ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   122a4:	68fb      	ldr	r3, [r7, #12]
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	2202      	movs	r2, #2
   122aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122ac:	68fb      	ldr	r3, [r7, #12]
   122ae:	7edb      	ldrb	r3, [r3, #27]
   122b0:	001a      	movs	r2, r3
   122b2:	2304      	movs	r3, #4
   122b4:	4013      	ands	r3, r2
   122b6:	d00a      	beq.n	122ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   122b8:	68fb      	ldr	r3, [r7, #12]
   122ba:	7e9b      	ldrb	r3, [r3, #26]
   122bc:	001a      	movs	r2, r3
   122be:	2304      	movs	r3, #4
   122c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122c2:	d004      	beq.n	122ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   122c4:	68fb      	ldr	r3, [r7, #12]
   122c6:	691b      	ldr	r3, [r3, #16]
   122c8:	68fa      	ldr	r2, [r7, #12]
   122ca:	0010      	movs	r0, r2
   122cc:	4798      	blx	r3
		}
	}
}
   122ce:	46c0      	nop			; (mov r8, r8)
   122d0:	46bd      	mov	sp, r7
   122d2:	b004      	add	sp, #16
   122d4:	bd80      	pop	{r7, pc}
   122d6:	46c0      	nop			; (mov r8, r8)
   122d8:	2000431c 	.word	0x2000431c
   122dc:	00012115 	.word	0x00012115
   122e0:	0001213d 	.word	0x0001213d
   122e4:	00012185 	.word	0x00012185

000122e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   122e8:	b580      	push	{r7, lr}
   122ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   122ec:	2000      	movs	r0, #0
   122ee:	4b02      	ldr	r3, [pc, #8]	; (122f8 <ADC_Handler+0x10>)
   122f0:	4798      	blx	r3
}
   122f2:	46c0      	nop			; (mov r8, r8)
   122f4:	46bd      	mov	sp, r7
   122f6:	bd80      	pop	{r7, pc}
   122f8:	000121a9 	.word	0x000121a9

000122fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b082      	sub	sp, #8
   12300:	af00      	add	r7, sp, #0
   12302:	0002      	movs	r2, r0
   12304:	1dfb      	adds	r3, r7, #7
   12306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12308:	4a07      	ldr	r2, [pc, #28]	; (12328 <system_interrupt_disable+0x2c>)
   1230a:	1dfb      	adds	r3, r7, #7
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	0019      	movs	r1, r3
   12310:	231f      	movs	r3, #31
   12312:	400b      	ands	r3, r1
   12314:	2101      	movs	r1, #1
   12316:	4099      	lsls	r1, r3
   12318:	000b      	movs	r3, r1
   1231a:	0019      	movs	r1, r3
   1231c:	2380      	movs	r3, #128	; 0x80
   1231e:	50d1      	str	r1, [r2, r3]
}
   12320:	46c0      	nop			; (mov r8, r8)
   12322:	46bd      	mov	sp, r7
   12324:	b002      	add	sp, #8
   12326:	bd80      	pop	{r7, pc}
   12328:	e000e100 	.word	0xe000e100

0001232c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1232c:	b580      	push	{r7, lr}
   1232e:	b084      	sub	sp, #16
   12330:	af00      	add	r7, sp, #0
   12332:	0002      	movs	r2, r0
   12334:	1dfb      	adds	r3, r7, #7
   12336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12338:	1dfb      	adds	r3, r7, #7
   1233a:	781a      	ldrb	r2, [r3, #0]
   1233c:	4b37      	ldr	r3, [pc, #220]	; (1241c <_dac_interrupt_handler+0xf0>)
   1233e:	0092      	lsls	r2, r2, #2
   12340:	58d3      	ldr	r3, [r2, r3]
   12342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12344:	68fb      	ldr	r3, [r7, #12]
   12346:	681b      	ldr	r3, [r3, #0]
   12348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1234a:	68bb      	ldr	r3, [r7, #8]
   1234c:	799b      	ldrb	r3, [r3, #6]
   1234e:	b2db      	uxtb	r3, r3
   12350:	001a      	movs	r2, r3
   12352:	2301      	movs	r3, #1
   12354:	4013      	ands	r3, r2
   12356:	d00e      	beq.n	12376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12358:	68bb      	ldr	r3, [r7, #8]
   1235a:	2201      	movs	r2, #1
   1235c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1235e:	68fb      	ldr	r3, [r7, #12]
   12360:	3314      	adds	r3, #20
   12362:	2b00      	cmp	r3, #0
   12364:	d007      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12366:	68fb      	ldr	r3, [r7, #12]
   12368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1236a:	2b00      	cmp	r3, #0
   1236c:	d003      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1236e:	68fb      	ldr	r3, [r7, #12]
   12370:	699b      	ldr	r3, [r3, #24]
   12372:	2000      	movs	r0, #0
   12374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12376:	68bb      	ldr	r3, [r7, #8]
   12378:	799b      	ldrb	r3, [r3, #6]
   1237a:	b2db      	uxtb	r3, r3
   1237c:	001a      	movs	r2, r3
   1237e:	2302      	movs	r3, #2
   12380:	4013      	ands	r3, r2
   12382:	d047      	beq.n	12414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12384:	68bb      	ldr	r3, [r7, #8]
   12386:	2202      	movs	r2, #2
   12388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	899b      	ldrh	r3, [r3, #12]
   1238e:	b29b      	uxth	r3, r3
   12390:	2b00      	cmp	r3, #0
   12392:	d033      	beq.n	123fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12394:	68fb      	ldr	r3, [r7, #12]
   12396:	689a      	ldr	r2, [r3, #8]
   12398:	68fb      	ldr	r3, [r7, #12]
   1239a:	89db      	ldrh	r3, [r3, #14]
   1239c:	b29b      	uxth	r3, r3
   1239e:	1c59      	adds	r1, r3, #1
   123a0:	b288      	uxth	r0, r1
   123a2:	68f9      	ldr	r1, [r7, #12]
   123a4:	81c8      	strh	r0, [r1, #14]
   123a6:	005b      	lsls	r3, r3, #1
   123a8:	18d3      	adds	r3, r2, r3
   123aa:	881b      	ldrh	r3, [r3, #0]
   123ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   123ae:	68bb      	ldr	r3, [r7, #8]
   123b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   123b2:	68fb      	ldr	r3, [r7, #12]
   123b4:	899b      	ldrh	r3, [r3, #12]
   123b6:	b29b      	uxth	r3, r3
   123b8:	3b01      	subs	r3, #1
   123ba:	b29a      	uxth	r2, r3
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   123c0:	68fb      	ldr	r3, [r7, #12]
   123c2:	899b      	ldrh	r3, [r3, #12]
   123c4:	b29b      	uxth	r3, r3
   123c6:	2b00      	cmp	r3, #0
   123c8:	d118      	bne.n	123fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   123ca:	68fb      	ldr	r3, [r7, #12]
   123cc:	2220      	movs	r2, #32
   123ce:	2100      	movs	r1, #0
   123d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   123d2:	68bb      	ldr	r3, [r7, #8]
   123d4:	2202      	movs	r2, #2
   123d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   123d8:	68bb      	ldr	r3, [r7, #8]
   123da:	2202      	movs	r2, #2
   123dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   123de:	2019      	movs	r0, #25
   123e0:	4b0f      	ldr	r3, [pc, #60]	; (12420 <_dac_interrupt_handler+0xf4>)
   123e2:	4798      	blx	r3

				if ((module->callback) &&
   123e4:	68fb      	ldr	r3, [r7, #12]
   123e6:	3314      	adds	r3, #20
   123e8:	2b00      	cmp	r3, #0
   123ea:	d007      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   123ec:	68fb      	ldr	r3, [r7, #12]
   123ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   123f0:	2b00      	cmp	r3, #0
   123f2:	d003      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	69db      	ldr	r3, [r3, #28]
   123f8:	2000      	movs	r0, #0
   123fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	3314      	adds	r3, #20
   12400:	2b00      	cmp	r3, #0
   12402:	d007      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12404:	68fb      	ldr	r3, [r7, #12]
   12406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12408:	2b00      	cmp	r3, #0
   1240a:	d003      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1240c:	68fb      	ldr	r3, [r7, #12]
   1240e:	695b      	ldr	r3, [r3, #20]
   12410:	2000      	movs	r0, #0
   12412:	4798      	blx	r3
		}
	}
}
   12414:	46c0      	nop			; (mov r8, r8)
   12416:	46bd      	mov	sp, r7
   12418:	b004      	add	sp, #16
   1241a:	bd80      	pop	{r7, pc}
   1241c:	20004320 	.word	0x20004320
   12420:	000122fd 	.word	0x000122fd

00012424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12424:	b580      	push	{r7, lr}
   12426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12428:	2000      	movs	r0, #0
   1242a:	4b02      	ldr	r3, [pc, #8]	; (12434 <DAC_Handler+0x10>)
   1242c:	4798      	blx	r3
}
   1242e:	46c0      	nop			; (mov r8, r8)
   12430:	46bd      	mov	sp, r7
   12432:	bd80      	pop	{r7, pc}
   12434:	0001232d 	.word	0x0001232d

00012438 <system_interrupt_enter_critical_section>:
{
   12438:	b580      	push	{r7, lr}
   1243a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1243c:	4b02      	ldr	r3, [pc, #8]	; (12448 <system_interrupt_enter_critical_section+0x10>)
   1243e:	4798      	blx	r3
}
   12440:	46c0      	nop			; (mov r8, r8)
   12442:	46bd      	mov	sp, r7
   12444:	bd80      	pop	{r7, pc}
   12446:	46c0      	nop			; (mov r8, r8)
   12448:	000260c9 	.word	0x000260c9

0001244c <system_interrupt_leave_critical_section>:
{
   1244c:	b580      	push	{r7, lr}
   1244e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <system_interrupt_leave_critical_section+0x10>)
   12452:	4798      	blx	r3
}
   12454:	46c0      	nop			; (mov r8, r8)
   12456:	46bd      	mov	sp, r7
   12458:	bd80      	pop	{r7, pc}
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	0002611d 	.word	0x0002611d

00012460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12460:	b580      	push	{r7, lr}
   12462:	b086      	sub	sp, #24
   12464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12466:	4b49      	ldr	r3, [pc, #292]	; (1258c <DMAC_Handler+0x12c>)
   12468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1246a:	4b49      	ldr	r3, [pc, #292]	; (12590 <DMAC_Handler+0x130>)
   1246c:	8c1b      	ldrh	r3, [r3, #32]
   1246e:	b29b      	uxth	r3, r3
   12470:	b2da      	uxtb	r2, r3
   12472:	2317      	movs	r3, #23
   12474:	18fb      	adds	r3, r7, r3
   12476:	210f      	movs	r1, #15
   12478:	400a      	ands	r2, r1
   1247a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1247c:	2317      	movs	r3, #23
   1247e:	18fb      	adds	r3, r7, r3
   12480:	781a      	ldrb	r2, [r3, #0]
   12482:	4b44      	ldr	r3, [pc, #272]	; (12594 <DMAC_Handler+0x134>)
   12484:	0092      	lsls	r2, r2, #2
   12486:	58d3      	ldr	r3, [r2, r3]
   12488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1248a:	4a41      	ldr	r2, [pc, #260]	; (12590 <DMAC_Handler+0x130>)
   1248c:	693b      	ldr	r3, [r7, #16]
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	210f      	movs	r1, #15
   12492:	400b      	ands	r3, r1
   12494:	b2d9      	uxtb	r1, r3
   12496:	233f      	movs	r3, #63	; 0x3f
   12498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1249a:	493d      	ldr	r1, [pc, #244]	; (12590 <DMAC_Handler+0x130>)
   1249c:	230f      	movs	r3, #15
   1249e:	18fb      	adds	r3, r7, r3
   124a0:	224e      	movs	r2, #78	; 0x4e
   124a2:	5c8a      	ldrb	r2, [r1, r2]
   124a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   124a6:	693b      	ldr	r3, [r7, #16]
   124a8:	781b      	ldrb	r3, [r3, #0]
   124aa:	4a3b      	ldr	r2, [pc, #236]	; (12598 <DMAC_Handler+0x138>)
   124ac:	011b      	lsls	r3, r3, #4
   124ae:	18d3      	adds	r3, r2, r3
   124b0:	3302      	adds	r3, #2
   124b2:	881b      	ldrh	r3, [r3, #0]
   124b4:	b29b      	uxth	r3, r3
   124b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   124b8:	693b      	ldr	r3, [r7, #16]
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	4a37      	ldr	r2, [pc, #220]	; (1259c <DMAC_Handler+0x13c>)
   124be:	011b      	lsls	r3, r3, #4
   124c0:	18d3      	adds	r3, r2, r3
   124c2:	3302      	adds	r3, #2
   124c4:	881b      	ldrh	r3, [r3, #0]
   124c6:	b29b      	uxth	r3, r3
   124c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   124ca:	68ba      	ldr	r2, [r7, #8]
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	1ad2      	subs	r2, r2, r3
   124d0:	693b      	ldr	r3, [r7, #16]
   124d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   124d4:	230f      	movs	r3, #15
   124d6:	18fb      	adds	r3, r7, r3
   124d8:	781b      	ldrb	r3, [r3, #0]
   124da:	2201      	movs	r2, #1
   124dc:	4013      	ands	r3, r2
   124de:	d016      	beq.n	1250e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   124e0:	4a2b      	ldr	r2, [pc, #172]	; (12590 <DMAC_Handler+0x130>)
   124e2:	234e      	movs	r3, #78	; 0x4e
   124e4:	2101      	movs	r1, #1
   124e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   124e8:	693b      	ldr	r3, [r7, #16]
   124ea:	2210      	movs	r2, #16
   124ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124ee:	693b      	ldr	r3, [r7, #16]
   124f0:	7c1b      	ldrb	r3, [r3, #16]
   124f2:	001a      	movs	r2, r3
   124f4:	2301      	movs	r3, #1
   124f6:	4013      	ands	r3, r2
   124f8:	d042      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   124fa:	693b      	ldr	r3, [r7, #16]
   124fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124fe:	2b00      	cmp	r3, #0
   12500:	d03e      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12502:	693b      	ldr	r3, [r7, #16]
   12504:	685b      	ldr	r3, [r3, #4]
   12506:	693a      	ldr	r2, [r7, #16]
   12508:	0010      	movs	r0, r2
   1250a:	4798      	blx	r3
   1250c:	e038      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1250e:	230f      	movs	r3, #15
   12510:	18fb      	adds	r3, r7, r3
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	2202      	movs	r2, #2
   12516:	4013      	ands	r3, r2
   12518:	d016      	beq.n	12548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1251a:	4a1d      	ldr	r2, [pc, #116]	; (12590 <DMAC_Handler+0x130>)
   1251c:	234e      	movs	r3, #78	; 0x4e
   1251e:	2102      	movs	r1, #2
   12520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12522:	693b      	ldr	r3, [r7, #16]
   12524:	2200      	movs	r2, #0
   12526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12528:	693b      	ldr	r3, [r7, #16]
   1252a:	7c1b      	ldrb	r3, [r3, #16]
   1252c:	001a      	movs	r2, r3
   1252e:	2302      	movs	r3, #2
   12530:	4013      	ands	r3, r2
   12532:	d025      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12534:	693b      	ldr	r3, [r7, #16]
   12536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12538:	2b00      	cmp	r3, #0
   1253a:	d021      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1253c:	693b      	ldr	r3, [r7, #16]
   1253e:	689b      	ldr	r3, [r3, #8]
   12540:	693a      	ldr	r2, [r7, #16]
   12542:	0010      	movs	r0, r2
   12544:	4798      	blx	r3
   12546:	e01b      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12548:	230f      	movs	r3, #15
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2204      	movs	r2, #4
   12550:	4013      	ands	r3, r2
   12552:	d015      	beq.n	12580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12554:	4a0e      	ldr	r2, [pc, #56]	; (12590 <DMAC_Handler+0x130>)
   12556:	234e      	movs	r3, #78	; 0x4e
   12558:	2104      	movs	r1, #4
   1255a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1255c:	693b      	ldr	r3, [r7, #16]
   1255e:	2206      	movs	r2, #6
   12560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12562:	693b      	ldr	r3, [r7, #16]
   12564:	7c1b      	ldrb	r3, [r3, #16]
   12566:	001a      	movs	r2, r3
   12568:	2304      	movs	r3, #4
   1256a:	4013      	ands	r3, r2
   1256c:	d008      	beq.n	12580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1256e:	693b      	ldr	r3, [r7, #16]
   12570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12572:	2b00      	cmp	r3, #0
   12574:	d004      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12576:	693b      	ldr	r3, [r7, #16]
   12578:	68db      	ldr	r3, [r3, #12]
   1257a:	693a      	ldr	r2, [r7, #16]
   1257c:	0010      	movs	r0, r2
   1257e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12580:	4b07      	ldr	r3, [pc, #28]	; (125a0 <DMAC_Handler+0x140>)
   12582:	4798      	blx	r3
}
   12584:	46c0      	nop			; (mov r8, r8)
   12586:	46bd      	mov	sp, r7
   12588:	b006      	add	sp, #24
   1258a:	bd80      	pop	{r7, pc}
   1258c:	00012439 	.word	0x00012439
   12590:	41004800 	.word	0x41004800
   12594:	20000320 	.word	0x20000320
   12598:	20004330 	.word	0x20004330
   1259c:	200002d0 	.word	0x200002d0
   125a0:	0001244d 	.word	0x0001244d

000125a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   125a4:	b580      	push	{r7, lr}
   125a6:	b082      	sub	sp, #8
   125a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   125aa:	4b15      	ldr	r3, [pc, #84]	; (12600 <EVSYS_Handler+0x5c>)
   125ac:	691b      	ldr	r3, [r3, #16]
   125ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   125b0:	4b14      	ldr	r3, [pc, #80]	; (12604 <EVSYS_Handler+0x60>)
   125b2:	699b      	ldr	r3, [r3, #24]
   125b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   125b6:	4b12      	ldr	r3, [pc, #72]	; (12600 <EVSYS_Handler+0x5c>)
   125b8:	689a      	ldr	r2, [r3, #8]
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	431a      	orrs	r2, r3
   125be:	4b10      	ldr	r3, [pc, #64]	; (12600 <EVSYS_Handler+0x5c>)
   125c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   125c2:	4b10      	ldr	r3, [pc, #64]	; (12604 <EVSYS_Handler+0x60>)
   125c4:	4a10      	ldr	r2, [pc, #64]	; (12608 <EVSYS_Handler+0x64>)
   125c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   125c8:	e008      	b.n	125dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   125ca:	687b      	ldr	r3, [r7, #4]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	0018      	movs	r0, r3
   125d4:	4790      	blx	r2
		current_hook = current_hook->next;
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	689b      	ldr	r3, [r3, #8]
   125da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	2b00      	cmp	r3, #0
   125e0:	d1f3      	bne.n	125ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   125e2:	4b07      	ldr	r3, [pc, #28]	; (12600 <EVSYS_Handler+0x5c>)
   125e4:	68db      	ldr	r3, [r3, #12]
   125e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   125e8:	4b05      	ldr	r3, [pc, #20]	; (12600 <EVSYS_Handler+0x5c>)
   125ea:	689b      	ldr	r3, [r3, #8]
   125ec:	683a      	ldr	r2, [r7, #0]
   125ee:	43d2      	mvns	r2, r2
   125f0:	401a      	ands	r2, r3
   125f2:	4b03      	ldr	r3, [pc, #12]	; (12600 <EVSYS_Handler+0x5c>)
   125f4:	609a      	str	r2, [r3, #8]
}
   125f6:	46c0      	nop			; (mov r8, r8)
   125f8:	46bd      	mov	sp, r7
   125fa:	b002      	add	sp, #8
   125fc:	bd80      	pop	{r7, pc}
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	20000000 	.word	0x20000000
   12604:	42000400 	.word	0x42000400
   12608:	0f0fffff 	.word	0x0f0fffff

0001260c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
   12612:	0002      	movs	r2, r0
   12614:	6039      	str	r1, [r7, #0]
   12616:	1dfb      	adds	r3, r7, #7
   12618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1261a:	1dfb      	adds	r3, r7, #7
   1261c:	781b      	ldrb	r3, [r3, #0]
   1261e:	2b01      	cmp	r3, #1
   12620:	d00a      	beq.n	12638 <system_apb_clock_set_mask+0x2c>
   12622:	2b02      	cmp	r3, #2
   12624:	d00f      	beq.n	12646 <system_apb_clock_set_mask+0x3a>
   12626:	2b00      	cmp	r3, #0
   12628:	d114      	bne.n	12654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1262a:	4b0e      	ldr	r3, [pc, #56]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262c:	4a0d      	ldr	r2, [pc, #52]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262e:	6991      	ldr	r1, [r2, #24]
   12630:	683a      	ldr	r2, [r7, #0]
   12632:	430a      	orrs	r2, r1
   12634:	619a      	str	r2, [r3, #24]
			break;
   12636:	e00f      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12638:	4b0a      	ldr	r3, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263a:	4a0a      	ldr	r2, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263c:	69d1      	ldr	r1, [r2, #28]
   1263e:	683a      	ldr	r2, [r7, #0]
   12640:	430a      	orrs	r2, r1
   12642:	61da      	str	r2, [r3, #28]
			break;
   12644:	e008      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12646:	4b07      	ldr	r3, [pc, #28]	; (12664 <system_apb_clock_set_mask+0x58>)
   12648:	4a06      	ldr	r2, [pc, #24]	; (12664 <system_apb_clock_set_mask+0x58>)
   1264a:	6a11      	ldr	r1, [r2, #32]
   1264c:	683a      	ldr	r2, [r7, #0]
   1264e:	430a      	orrs	r2, r1
   12650:	621a      	str	r2, [r3, #32]
			break;
   12652:	e001      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12654:	2317      	movs	r3, #23
   12656:	e000      	b.n	1265a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12658:	2300      	movs	r3, #0
}
   1265a:	0018      	movs	r0, r3
   1265c:	46bd      	mov	sp, r7
   1265e:	b002      	add	sp, #8
   12660:	bd80      	pop	{r7, pc}
   12662:	46c0      	nop			; (mov r8, r8)
   12664:	40000400 	.word	0x40000400

00012668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12668:	b580      	push	{r7, lr}
   1266a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1266c:	2102      	movs	r1, #2
   1266e:	2002      	movs	r0, #2
   12670:	4b07      	ldr	r3, [pc, #28]	; (12690 <_system_events_init+0x28>)
   12672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12674:	4b07      	ldr	r3, [pc, #28]	; (12694 <_system_events_init+0x2c>)
   12676:	2201      	movs	r2, #1
   12678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   1267a:	46c0      	nop			; (mov r8, r8)
   1267c:	4b05      	ldr	r3, [pc, #20]	; (12694 <_system_events_init+0x2c>)
   1267e:	781b      	ldrb	r3, [r3, #0]
   12680:	b2db      	uxtb	r3, r3
   12682:	001a      	movs	r2, r3
   12684:	2301      	movs	r3, #1
   12686:	4013      	ands	r3, r2
   12688:	d1f8      	bne.n	1267c <_system_events_init+0x14>
	}
}
   1268a:	46c0      	nop			; (mov r8, r8)
   1268c:	46bd      	mov	sp, r7
   1268e:	bd80      	pop	{r7, pc}
   12690:	0001260d 	.word	0x0001260d
   12694:	42000400 	.word	0x42000400

00012698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12698:	b580      	push	{r7, lr}
   1269a:	b084      	sub	sp, #16
   1269c:	af00      	add	r7, sp, #0
   1269e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   126a0:	687b      	ldr	r3, [r7, #4]
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   126a6:	68fb      	ldr	r3, [r7, #12]
   126a8:	69db      	ldr	r3, [r3, #28]
   126aa:	2207      	movs	r2, #7
   126ac:	4013      	ands	r3, r2
   126ae:	1e5a      	subs	r2, r3, #1
   126b0:	4193      	sbcs	r3, r2
   126b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   126b4:	0018      	movs	r0, r3
   126b6:	46bd      	mov	sp, r7
   126b8:	b004      	add	sp, #16
   126ba:	bd80      	pop	{r7, pc}

000126bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   126bc:	b580      	push	{r7, lr}
   126be:	b082      	sub	sp, #8
   126c0:	af00      	add	r7, sp, #0
   126c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   126c4:	46c0      	nop			; (mov r8, r8)
   126c6:	687b      	ldr	r3, [r7, #4]
   126c8:	0018      	movs	r0, r3
   126ca:	4b04      	ldr	r3, [pc, #16]	; (126dc <_i2c_master_wait_for_sync+0x20>)
   126cc:	4798      	blx	r3
   126ce:	1e03      	subs	r3, r0, #0
   126d0:	d1f9      	bne.n	126c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   126d2:	46c0      	nop			; (mov r8, r8)
   126d4:	46bd      	mov	sp, r7
   126d6:	b002      	add	sp, #8
   126d8:	bd80      	pop	{r7, pc}
   126da:	46c0      	nop			; (mov r8, r8)
   126dc:	00012699 	.word	0x00012699

000126e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   126e0:	b580      	push	{r7, lr}
   126e2:	b084      	sub	sp, #16
   126e4:	af00      	add	r7, sp, #0
   126e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	681b      	ldr	r3, [r3, #0]
   126ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   126ee:	68fb      	ldr	r3, [r7, #12]
   126f0:	681b      	ldr	r3, [r3, #0]
   126f2:	011b      	lsls	r3, r3, #4
   126f4:	0fdb      	lsrs	r3, r3, #31
   126f6:	b2db      	uxtb	r3, r3
   126f8:	001a      	movs	r2, r3
   126fa:	230b      	movs	r3, #11
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	1e51      	subs	r1, r2, #1
   12700:	418a      	sbcs	r2, r1
   12702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12704:	2308      	movs	r3, #8
   12706:	18fb      	adds	r3, r7, r3
   12708:	687a      	ldr	r2, [r7, #4]
   1270a:	8b52      	ldrh	r2, [r2, #26]
   1270c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1270e:	687b      	ldr	r3, [r7, #4]
   12710:	8b9b      	ldrh	r3, [r3, #28]
   12712:	b29a      	uxth	r2, r3
   12714:	2308      	movs	r3, #8
   12716:	18fb      	adds	r3, r7, r3
   12718:	2108      	movs	r1, #8
   1271a:	1879      	adds	r1, r7, r1
   1271c:	8809      	ldrh	r1, [r1, #0]
   1271e:	1a8a      	subs	r2, r1, r2
   12720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	8b9b      	ldrh	r3, [r3, #28]
   12726:	b29b      	uxth	r3, r3
   12728:	3b01      	subs	r3, #1
   1272a:	b29a      	uxth	r2, r3
   1272c:	687b      	ldr	r3, [r7, #4]
   1272e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12730:	230b      	movs	r3, #11
   12732:	18fb      	adds	r3, r7, r3
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	2b00      	cmp	r3, #0
   12738:	d010      	beq.n	1275c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1273a:	687b      	ldr	r3, [r7, #4]
   1273c:	7adb      	ldrb	r3, [r3, #11]
   1273e:	2b00      	cmp	r3, #0
   12740:	d01c      	beq.n	1277c <_i2c_master_read+0x9c>
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	8b9b      	ldrh	r3, [r3, #28]
   12746:	b29b      	uxth	r3, r3
   12748:	2b01      	cmp	r3, #1
   1274a:	d117      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1274c:	68fb      	ldr	r3, [r7, #12]
   1274e:	685b      	ldr	r3, [r3, #4]
   12750:	2280      	movs	r2, #128	; 0x80
   12752:	02d2      	lsls	r2, r2, #11
   12754:	431a      	orrs	r2, r3
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	605a      	str	r2, [r3, #4]
   1275a:	e00f      	b.n	1277c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1275c:	687b      	ldr	r3, [r7, #4]
   1275e:	7adb      	ldrb	r3, [r3, #11]
   12760:	2b00      	cmp	r3, #0
   12762:	d00b      	beq.n	1277c <_i2c_master_read+0x9c>
   12764:	687b      	ldr	r3, [r7, #4]
   12766:	8b9b      	ldrh	r3, [r3, #28]
   12768:	b29b      	uxth	r3, r3
   1276a:	2b00      	cmp	r3, #0
   1276c:	d106      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1276e:	68fb      	ldr	r3, [r7, #12]
   12770:	685b      	ldr	r3, [r3, #4]
   12772:	2280      	movs	r2, #128	; 0x80
   12774:	02d2      	lsls	r2, r2, #11
   12776:	431a      	orrs	r2, r3
   12778:	68fb      	ldr	r3, [r7, #12]
   1277a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   1277c:	687b      	ldr	r3, [r7, #4]
   1277e:	8b9b      	ldrh	r3, [r3, #28]
   12780:	b29b      	uxth	r3, r3
   12782:	2b00      	cmp	r3, #0
   12784:	d10e      	bne.n	127a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12786:	687b      	ldr	r3, [r7, #4]
   12788:	7a9b      	ldrb	r3, [r3, #10]
   1278a:	2b00      	cmp	r3, #0
   1278c:	d00a      	beq.n	127a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	0018      	movs	r0, r3
   12792:	4b0e      	ldr	r3, [pc, #56]	; (127cc <_i2c_master_read+0xec>)
   12794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12796:	68fb      	ldr	r3, [r7, #12]
   12798:	685b      	ldr	r3, [r3, #4]
   1279a:	22c0      	movs	r2, #192	; 0xc0
   1279c:	0292      	lsls	r2, r2, #10
   1279e:	431a      	orrs	r2, r3
   127a0:	68fb      	ldr	r3, [r7, #12]
   127a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   127a4:	687b      	ldr	r3, [r7, #4]
   127a6:	0018      	movs	r0, r3
   127a8:	4b08      	ldr	r3, [pc, #32]	; (127cc <_i2c_master_read+0xec>)
   127aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   127ac:	687b      	ldr	r3, [r7, #4]
   127ae:	6a1a      	ldr	r2, [r3, #32]
   127b0:	2308      	movs	r3, #8
   127b2:	18fb      	adds	r3, r7, r3
   127b4:	881b      	ldrh	r3, [r3, #0]
   127b6:	18d3      	adds	r3, r2, r3
   127b8:	68fa      	ldr	r2, [r7, #12]
   127ba:	2128      	movs	r1, #40	; 0x28
   127bc:	5c52      	ldrb	r2, [r2, r1]
   127be:	b2d2      	uxtb	r2, r2
   127c0:	701a      	strb	r2, [r3, #0]
}
   127c2:	46c0      	nop			; (mov r8, r8)
   127c4:	46bd      	mov	sp, r7
   127c6:	b004      	add	sp, #16
   127c8:	bd80      	pop	{r7, pc}
   127ca:	46c0      	nop			; (mov r8, r8)
   127cc:	000126bd 	.word	0x000126bd

000127d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   127d0:	b580      	push	{r7, lr}
   127d2:	b084      	sub	sp, #16
   127d4:	af00      	add	r7, sp, #0
   127d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127d8:	687b      	ldr	r3, [r7, #4]
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   127de:	68fb      	ldr	r3, [r7, #12]
   127e0:	8b5b      	ldrh	r3, [r3, #26]
   127e2:	b29b      	uxth	r3, r3
   127e4:	001a      	movs	r2, r3
   127e6:	2304      	movs	r3, #4
   127e8:	4013      	ands	r3, r2
   127ea:	d004      	beq.n	127f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	2225      	movs	r2, #37	; 0x25
   127f0:	211e      	movs	r1, #30
   127f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   127f4:	e024      	b.n	12840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   127f6:	230a      	movs	r3, #10
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	687a      	ldr	r2, [r7, #4]
   127fc:	8b52      	ldrh	r2, [r2, #26]
   127fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12800:	687b      	ldr	r3, [r7, #4]
   12802:	8b9b      	ldrh	r3, [r3, #28]
   12804:	b29a      	uxth	r2, r3
   12806:	230a      	movs	r3, #10
   12808:	18fb      	adds	r3, r7, r3
   1280a:	210a      	movs	r1, #10
   1280c:	1879      	adds	r1, r7, r1
   1280e:	8809      	ldrh	r1, [r1, #0]
   12810:	1a8a      	subs	r2, r1, r2
   12812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	8b9b      	ldrh	r3, [r3, #28]
   12818:	b29b      	uxth	r3, r3
   1281a:	3b01      	subs	r3, #1
   1281c:	b29a      	uxth	r2, r3
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   12822:	687b      	ldr	r3, [r7, #4]
   12824:	0018      	movs	r0, r3
   12826:	4b08      	ldr	r3, [pc, #32]	; (12848 <_i2c_master_write+0x78>)
   12828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1282a:	687b      	ldr	r3, [r7, #4]
   1282c:	6a1a      	ldr	r2, [r3, #32]
   1282e:	230a      	movs	r3, #10
   12830:	18fb      	adds	r3, r7, r3
   12832:	881b      	ldrh	r3, [r3, #0]
   12834:	18d3      	adds	r3, r2, r3
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	b2d9      	uxtb	r1, r3
   1283a:	68fb      	ldr	r3, [r7, #12]
   1283c:	2228      	movs	r2, #40	; 0x28
   1283e:	5499      	strb	r1, [r3, r2]
}
   12840:	46bd      	mov	sp, r7
   12842:	b004      	add	sp, #16
   12844:	bd80      	pop	{r7, pc}
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	000126bd 	.word	0x000126bd

0001284c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   1284c:	b580      	push	{r7, lr}
   1284e:	b084      	sub	sp, #16
   12850:	af00      	add	r7, sp, #0
   12852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	681b      	ldr	r3, [r3, #0]
   12858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   1285a:	68fb      	ldr	r3, [r7, #12]
   1285c:	7e1b      	ldrb	r3, [r3, #24]
   1285e:	b2db      	uxtb	r3, r3
   12860:	001a      	movs	r2, r3
   12862:	2301      	movs	r3, #1
   12864:	4013      	ands	r3, r2
   12866:	d02b      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   12868:	68fb      	ldr	r3, [r7, #12]
   1286a:	2201      	movs	r2, #1
   1286c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	8b5b      	ldrh	r3, [r3, #26]
   12872:	b29b      	uxth	r3, r3
   12874:	001a      	movs	r2, r3
   12876:	2302      	movs	r3, #2
   12878:	4013      	ands	r3, r2
   1287a:	d004      	beq.n	12886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   1287c:	687b      	ldr	r3, [r7, #4]
   1287e:	2225      	movs	r2, #37	; 0x25
   12880:	2141      	movs	r1, #65	; 0x41
   12882:	5499      	strb	r1, [r3, r2]
   12884:	e01c      	b.n	128c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12886:	68fb      	ldr	r3, [r7, #12]
   12888:	8b5b      	ldrh	r3, [r3, #26]
   1288a:	b29b      	uxth	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2304      	movs	r3, #4
   12890:	4013      	ands	r3, r2
   12892:	d015      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	2225      	movs	r2, #37	; 0x25
   12898:	2118      	movs	r1, #24
   1289a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	2200      	movs	r2, #0
   128a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   128a2:	687b      	ldr	r3, [r7, #4]
   128a4:	7a9b      	ldrb	r3, [r3, #10]
   128a6:	2b00      	cmp	r3, #0
   128a8:	d00a      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	0018      	movs	r0, r3
   128ae:	4b13      	ldr	r3, [pc, #76]	; (128fc <_i2c_master_async_address_response+0xb0>)
   128b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	685b      	ldr	r3, [r3, #4]
   128b6:	22c0      	movs	r2, #192	; 0xc0
   128b8:	0292      	lsls	r2, r2, #10
   128ba:	431a      	orrs	r2, r3
   128bc:	68fb      	ldr	r3, [r7, #12]
   128be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	8b9b      	ldrh	r3, [r3, #28]
   128c4:	b29a      	uxth	r2, r3
   128c6:	687b      	ldr	r3, [r7, #4]
   128c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   128ca:	687b      	ldr	r3, [r7, #4]
   128cc:	2225      	movs	r2, #37	; 0x25
   128ce:	5c9b      	ldrb	r3, [r3, r2]
   128d0:	b2db      	uxtb	r3, r3
   128d2:	2b05      	cmp	r3, #5
   128d4:	d10e      	bne.n	128f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   128d6:	687b      	ldr	r3, [r7, #4]
   128d8:	2224      	movs	r2, #36	; 0x24
   128da:	5c9b      	ldrb	r3, [r3, r2]
   128dc:	b2db      	uxtb	r3, r3
   128de:	2b00      	cmp	r3, #0
   128e0:	d104      	bne.n	128ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   128e2:	687b      	ldr	r3, [r7, #4]
   128e4:	0018      	movs	r0, r3
   128e6:	4b06      	ldr	r3, [pc, #24]	; (12900 <_i2c_master_async_address_response+0xb4>)
   128e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   128ea:	e003      	b.n	128f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	0018      	movs	r0, r3
   128f0:	4b04      	ldr	r3, [pc, #16]	; (12904 <_i2c_master_async_address_response+0xb8>)
   128f2:	4798      	blx	r3
}
   128f4:	46c0      	nop			; (mov r8, r8)
   128f6:	46bd      	mov	sp, r7
   128f8:	b004      	add	sp, #16
   128fa:	bd80      	pop	{r7, pc}
   128fc:	000126bd 	.word	0x000126bd
   12900:	000127d1 	.word	0x000127d1
   12904:	000126e1 	.word	0x000126e1

00012908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   12908:	b580      	push	{r7, lr}
   1290a:	b084      	sub	sp, #16
   1290c:	af00      	add	r7, sp, #0
   1290e:	60f8      	str	r0, [r7, #12]
   12910:	60b9      	str	r1, [r7, #8]
   12912:	1dfb      	adds	r3, r7, #7
   12914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	68fa      	ldr	r2, [r7, #12]
   1291c:	3302      	adds	r3, #2
   1291e:	009b      	lsls	r3, r3, #2
   12920:	18d3      	adds	r3, r2, r3
   12922:	3304      	adds	r3, #4
   12924:	68ba      	ldr	r2, [r7, #8]
   12926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	7e1b      	ldrb	r3, [r3, #24]
   1292c:	b2db      	uxtb	r3, r3
   1292e:	b25a      	sxtb	r2, r3
   12930:	1dfb      	adds	r3, r7, #7
   12932:	781b      	ldrb	r3, [r3, #0]
   12934:	2101      	movs	r1, #1
   12936:	4099      	lsls	r1, r3
   12938:	000b      	movs	r3, r1
   1293a:	b25b      	sxtb	r3, r3
   1293c:	4313      	orrs	r3, r2
   1293e:	b25b      	sxtb	r3, r3
   12940:	b2da      	uxtb	r2, r3
   12942:	68fb      	ldr	r3, [r7, #12]
   12944:	761a      	strb	r2, [r3, #24]
}
   12946:	46c0      	nop			; (mov r8, r8)
   12948:	46bd      	mov	sp, r7
   1294a:	b004      	add	sp, #16
   1294c:	bd80      	pop	{r7, pc}
	...

00012950 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12950:	b590      	push	{r4, r7, lr}
   12952:	b087      	sub	sp, #28
   12954:	af00      	add	r7, sp, #0
   12956:	6078      	str	r0, [r7, #4]
   12958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1295a:	687b      	ldr	r3, [r7, #4]
   1295c:	681b      	ldr	r3, [r3, #0]
   1295e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   12960:	683b      	ldr	r3, [r7, #0]
   12962:	685a      	ldr	r2, [r3, #4]
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12968:	683b      	ldr	r3, [r7, #0]
   1296a:	885a      	ldrh	r2, [r3, #2]
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12970:	687b      	ldr	r3, [r7, #4]
   12972:	2224      	movs	r2, #36	; 0x24
   12974:	2101      	movs	r1, #1
   12976:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	2225      	movs	r2, #37	; 0x25
   1297c:	2105      	movs	r1, #5
   1297e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12980:	693b      	ldr	r3, [r7, #16]
   12982:	681b      	ldr	r3, [r3, #0]
   12984:	011b      	lsls	r3, r3, #4
   12986:	0fdb      	lsrs	r3, r3, #31
   12988:	b2db      	uxtb	r3, r3
   1298a:	001a      	movs	r2, r3
   1298c:	230f      	movs	r3, #15
   1298e:	18fb      	adds	r3, r7, r3
   12990:	1e51      	subs	r1, r2, #1
   12992:	418a      	sbcs	r2, r1
   12994:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12996:	683b      	ldr	r3, [r7, #0]
   12998:	7a5b      	ldrb	r3, [r3, #9]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d006      	beq.n	129ac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1299e:	683b      	ldr	r3, [r7, #0]
   129a0:	7a9a      	ldrb	r2, [r3, #10]
   129a2:	687b      	ldr	r3, [r7, #4]
   129a4:	0011      	movs	r1, r2
   129a6:	0018      	movs	r0, r3
   129a8:	4b3b      	ldr	r3, [pc, #236]	; (12a98 <_i2c_master_read_packet+0x148>)
   129aa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d00b      	beq.n	129ce <_i2c_master_read_packet+0x7e>
   129b6:	683b      	ldr	r3, [r7, #0]
   129b8:	885b      	ldrh	r3, [r3, #2]
   129ba:	2b01      	cmp	r3, #1
   129bc:	d107      	bne.n	129ce <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   129be:	693b      	ldr	r3, [r7, #16]
   129c0:	685b      	ldr	r3, [r3, #4]
   129c2:	2280      	movs	r2, #128	; 0x80
   129c4:	02d2      	lsls	r2, r2, #11
   129c6:	431a      	orrs	r2, r3
   129c8:	693b      	ldr	r3, [r7, #16]
   129ca:	605a      	str	r2, [r3, #4]
   129cc:	e005      	b.n	129da <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   129ce:	693b      	ldr	r3, [r7, #16]
   129d0:	685b      	ldr	r3, [r3, #4]
   129d2:	4a32      	ldr	r2, [pc, #200]	; (12a9c <_i2c_master_read_packet+0x14c>)
   129d4:	401a      	ands	r2, r3
   129d6:	693b      	ldr	r3, [r7, #16]
   129d8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   129da:	683b      	ldr	r3, [r7, #0]
   129dc:	7a1b      	ldrb	r3, [r3, #8]
   129de:	2b00      	cmp	r3, #0
   129e0:	d045      	beq.n	12a6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   129e2:	683b      	ldr	r3, [r7, #0]
   129e4:	881b      	ldrh	r3, [r3, #0]
   129e6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129e8:	683b      	ldr	r3, [r7, #0]
   129ea:	7a5b      	ldrb	r3, [r3, #9]
   129ec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   129ee:	4313      	orrs	r3, r2
   129f0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129f2:	2380      	movs	r3, #128	; 0x80
   129f4:	021b      	lsls	r3, r3, #8
   129f6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   129f8:	693b      	ldr	r3, [r7, #16]
   129fa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   129fc:	2317      	movs	r3, #23
   129fe:	18fc      	adds	r4, r7, r3
   12a00:	687b      	ldr	r3, [r7, #4]
   12a02:	0018      	movs	r0, r3
   12a04:	4b26      	ldr	r3, [pc, #152]	; (12aa0 <_i2c_master_read_packet+0x150>)
   12a06:	4798      	blx	r3
   12a08:	0003      	movs	r3, r0
   12a0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12a0c:	693b      	ldr	r3, [r7, #16]
   12a0e:	685b      	ldr	r3, [r3, #4]
   12a10:	4a22      	ldr	r2, [pc, #136]	; (12a9c <_i2c_master_read_packet+0x14c>)
   12a12:	401a      	ands	r2, r3
   12a14:	693b      	ldr	r3, [r7, #16]
   12a16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   12a18:	2317      	movs	r3, #23
   12a1a:	18fb      	adds	r3, r7, r3
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d107      	bne.n	12a32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   12a22:	2317      	movs	r3, #23
   12a24:	18fc      	adds	r4, r7, r3
   12a26:	687b      	ldr	r3, [r7, #4]
   12a28:	0018      	movs	r0, r3
   12a2a:	4b1e      	ldr	r3, [pc, #120]	; (12aa4 <_i2c_master_read_packet+0x154>)
   12a2c:	4798      	blx	r3
   12a2e:	0003      	movs	r3, r0
   12a30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   12a32:	2317      	movs	r3, #23
   12a34:	18fb      	adds	r3, r7, r3
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d114      	bne.n	12a66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   12a3c:	693b      	ldr	r3, [r7, #16]
   12a3e:	2203      	movs	r2, #3
   12a40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a42:	683b      	ldr	r3, [r7, #0]
   12a44:	881b      	ldrh	r3, [r3, #0]
   12a46:	0a1b      	lsrs	r3, r3, #8
   12a48:	b29b      	uxth	r3, r3
   12a4a:	2278      	movs	r2, #120	; 0x78
   12a4c:	4313      	orrs	r3, r2
   12a4e:	b29b      	uxth	r3, r3
   12a50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a52:	683b      	ldr	r3, [r7, #0]
   12a54:	7a5b      	ldrb	r3, [r3, #9]
   12a56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a5a:	2201      	movs	r2, #1
   12a5c:	4313      	orrs	r3, r2
   12a5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a60:	693b      	ldr	r3, [r7, #16]
   12a62:	625a      	str	r2, [r3, #36]	; 0x24
   12a64:	e012      	b.n	12a8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   12a66:	2317      	movs	r3, #23
   12a68:	18fb      	adds	r3, r7, r3
   12a6a:	781b      	ldrb	r3, [r3, #0]
   12a6c:	e00f      	b.n	12a8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   12a6e:	693b      	ldr	r3, [r7, #16]
   12a70:	2203      	movs	r2, #3
   12a72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a74:	683b      	ldr	r3, [r7, #0]
   12a76:	881b      	ldrh	r3, [r3, #0]
   12a78:	005b      	lsls	r3, r3, #1
   12a7a:	2201      	movs	r2, #1
   12a7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12a7e:	683b      	ldr	r3, [r7, #0]
   12a80:	7a5b      	ldrb	r3, [r3, #9]
   12a82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a84:	4313      	orrs	r3, r2
   12a86:	001a      	movs	r2, r3
   12a88:	693b      	ldr	r3, [r7, #16]
   12a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12a8c:	2300      	movs	r3, #0
}
   12a8e:	0018      	movs	r0, r3
   12a90:	46bd      	mov	sp, r7
   12a92:	b007      	add	sp, #28
   12a94:	bd90      	pop	{r4, r7, pc}
   12a96:	46c0      	nop			; (mov r8, r8)
   12a98:	00017f21 	.word	0x00017f21
   12a9c:	fffbffff 	.word	0xfffbffff
   12aa0:	00017ec3 	.word	0x00017ec3
   12aa4:	00017e65 	.word	0x00017e65

00012aa8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12aa8:	b580      	push	{r7, lr}
   12aaa:	b082      	sub	sp, #8
   12aac:	af00      	add	r7, sp, #0
   12aae:	6078      	str	r0, [r7, #4]
   12ab0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   12ab2:	687b      	ldr	r3, [r7, #4]
   12ab4:	8b9b      	ldrh	r3, [r3, #28]
   12ab6:	b29b      	uxth	r3, r3
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d001      	beq.n	12ac0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   12abc:	2305      	movs	r3, #5
   12abe:	e00c      	b.n	12ada <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   12ac0:	687b      	ldr	r3, [r7, #4]
   12ac2:	2201      	movs	r2, #1
   12ac4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	2201      	movs	r2, #1
   12aca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   12acc:	683a      	ldr	r2, [r7, #0]
   12ace:	687b      	ldr	r3, [r7, #4]
   12ad0:	0011      	movs	r1, r2
   12ad2:	0018      	movs	r0, r3
   12ad4:	4b03      	ldr	r3, [pc, #12]	; (12ae4 <i2c_master_read_packet_job+0x3c>)
   12ad6:	4798      	blx	r3
   12ad8:	0003      	movs	r3, r0
}
   12ada:	0018      	movs	r0, r3
   12adc:	46bd      	mov	sp, r7
   12ade:	b002      	add	sp, #8
   12ae0:	bd80      	pop	{r7, pc}
   12ae2:	46c0      	nop			; (mov r8, r8)
   12ae4:	00012951 	.word	0x00012951

00012ae8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12ae8:	b580      	push	{r7, lr}
   12aea:	b084      	sub	sp, #16
   12aec:	af00      	add	r7, sp, #0
   12aee:	6078      	str	r0, [r7, #4]
   12af0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12af8:	683b      	ldr	r3, [r7, #0]
   12afa:	7a5b      	ldrb	r3, [r3, #9]
   12afc:	2b00      	cmp	r3, #0
   12afe:	d006      	beq.n	12b0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12b00:	683b      	ldr	r3, [r7, #0]
   12b02:	7a9a      	ldrb	r2, [r3, #10]
   12b04:	687b      	ldr	r3, [r7, #4]
   12b06:	0011      	movs	r1, r2
   12b08:	0018      	movs	r0, r3
   12b0a:	4b1e      	ldr	r3, [pc, #120]	; (12b84 <_i2c_master_write_packet+0x9c>)
   12b0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12b0e:	68fb      	ldr	r3, [r7, #12]
   12b10:	685b      	ldr	r3, [r3, #4]
   12b12:	4a1d      	ldr	r2, [pc, #116]	; (12b88 <_i2c_master_write_packet+0xa0>)
   12b14:	401a      	ands	r2, r3
   12b16:	68fb      	ldr	r3, [r7, #12]
   12b18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   12b1a:	683b      	ldr	r3, [r7, #0]
   12b1c:	685a      	ldr	r2, [r3, #4]
   12b1e:	687b      	ldr	r3, [r7, #4]
   12b20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12b22:	683b      	ldr	r3, [r7, #0]
   12b24:	885a      	ldrh	r2, [r3, #2]
   12b26:	687b      	ldr	r3, [r7, #4]
   12b28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   12b2a:	687b      	ldr	r3, [r7, #4]
   12b2c:	2224      	movs	r2, #36	; 0x24
   12b2e:	2100      	movs	r1, #0
   12b30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12b32:	687b      	ldr	r3, [r7, #4]
   12b34:	2225      	movs	r2, #37	; 0x25
   12b36:	2105      	movs	r1, #5
   12b38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12b3a:	68fb      	ldr	r3, [r7, #12]
   12b3c:	2203      	movs	r2, #3
   12b3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12b40:	683b      	ldr	r3, [r7, #0]
   12b42:	7a1b      	ldrb	r3, [r3, #8]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d00d      	beq.n	12b64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b48:	683b      	ldr	r3, [r7, #0]
   12b4a:	881b      	ldrh	r3, [r3, #0]
   12b4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b4e:	683b      	ldr	r3, [r7, #0]
   12b50:	7a5b      	ldrb	r3, [r3, #9]
   12b52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b54:	4313      	orrs	r3, r2
   12b56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b58:	2380      	movs	r3, #128	; 0x80
   12b5a:	021b      	lsls	r3, r3, #8
   12b5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b5e:	68fb      	ldr	r3, [r7, #12]
   12b60:	625a      	str	r2, [r3, #36]	; 0x24
   12b62:	e009      	b.n	12b78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b64:	683b      	ldr	r3, [r7, #0]
   12b66:	881b      	ldrh	r3, [r3, #0]
   12b68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12b6a:	683b      	ldr	r3, [r7, #0]
   12b6c:	7a5b      	ldrb	r3, [r3, #9]
   12b6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b70:	4313      	orrs	r3, r2
   12b72:	001a      	movs	r2, r3
   12b74:	68fb      	ldr	r3, [r7, #12]
   12b76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12b78:	2300      	movs	r3, #0
}
   12b7a:	0018      	movs	r0, r3
   12b7c:	46bd      	mov	sp, r7
   12b7e:	b004      	add	sp, #16
   12b80:	bd80      	pop	{r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	00017f21 	.word	0x00017f21
   12b88:	fffbffff 	.word	0xfffbffff

00012b8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12b8c:	b580      	push	{r7, lr}
   12b8e:	b082      	sub	sp, #8
   12b90:	af00      	add	r7, sp, #0
   12b92:	6078      	str	r0, [r7, #4]
   12b94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12b96:	687b      	ldr	r3, [r7, #4]
   12b98:	8b9b      	ldrh	r3, [r3, #28]
   12b9a:	b29b      	uxth	r3, r3
   12b9c:	2b00      	cmp	r3, #0
   12b9e:	d001      	beq.n	12ba4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   12ba0:	2305      	movs	r3, #5
   12ba2:	e00c      	b.n	12bbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12ba4:	687b      	ldr	r3, [r7, #4]
   12ba6:	2201      	movs	r2, #1
   12ba8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	2201      	movs	r2, #1
   12bae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   12bb0:	683a      	ldr	r2, [r7, #0]
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	0011      	movs	r1, r2
   12bb6:	0018      	movs	r0, r3
   12bb8:	4b03      	ldr	r3, [pc, #12]	; (12bc8 <i2c_master_write_packet_job+0x3c>)
   12bba:	4798      	blx	r3
   12bbc:	0003      	movs	r3, r0
}
   12bbe:	0018      	movs	r0, r3
   12bc0:	46bd      	mov	sp, r7
   12bc2:	b002      	add	sp, #8
   12bc4:	bd80      	pop	{r7, pc}
   12bc6:	46c0      	nop			; (mov r8, r8)
   12bc8:	00012ae9 	.word	0x00012ae9

00012bcc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12bcc:	b580      	push	{r7, lr}
   12bce:	b086      	sub	sp, #24
   12bd0:	af00      	add	r7, sp, #0
   12bd2:	0002      	movs	r2, r0
   12bd4:	1dfb      	adds	r3, r7, #7
   12bd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   12bd8:	1dfb      	adds	r3, r7, #7
   12bda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   12bdc:	4b93      	ldr	r3, [pc, #588]	; (12e2c <_i2c_master_interrupt_handler+0x260>)
   12bde:	0092      	lsls	r2, r2, #2
   12be0:	58d3      	ldr	r3, [r2, r3]
   12be2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12be4:	697b      	ldr	r3, [r7, #20]
   12be6:	681b      	ldr	r3, [r3, #0]
   12be8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12bea:	693b      	ldr	r3, [r7, #16]
   12bec:	681b      	ldr	r3, [r3, #0]
   12bee:	011b      	lsls	r3, r3, #4
   12bf0:	0fdb      	lsrs	r3, r3, #31
   12bf2:	b2db      	uxtb	r3, r3
   12bf4:	001a      	movs	r2, r3
   12bf6:	230f      	movs	r3, #15
   12bf8:	18fb      	adds	r3, r7, r3
   12bfa:	1e51      	subs	r1, r2, #1
   12bfc:	418a      	sbcs	r2, r1
   12bfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12c00:	230e      	movs	r3, #14
   12c02:	18fb      	adds	r3, r7, r3
   12c04:	697a      	ldr	r2, [r7, #20]
   12c06:	7e52      	ldrb	r2, [r2, #25]
   12c08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   12c0a:	697b      	ldr	r3, [r7, #20]
   12c0c:	7e1b      	ldrb	r3, [r3, #24]
   12c0e:	b2da      	uxtb	r2, r3
   12c10:	230e      	movs	r3, #14
   12c12:	18fb      	adds	r3, r7, r3
   12c14:	210e      	movs	r1, #14
   12c16:	1879      	adds	r1, r7, r1
   12c18:	7809      	ldrb	r1, [r1, #0]
   12c1a:	400a      	ands	r2, r1
   12c1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   12c1e:	697b      	ldr	r3, [r7, #20]
   12c20:	8b5b      	ldrh	r3, [r3, #26]
   12c22:	b29b      	uxth	r3, r3
   12c24:	2b00      	cmp	r3, #0
   12c26:	d109      	bne.n	12c3c <_i2c_master_interrupt_handler+0x70>
   12c28:	697b      	ldr	r3, [r7, #20]
   12c2a:	8b9b      	ldrh	r3, [r3, #28]
   12c2c:	b29b      	uxth	r3, r3
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d004      	beq.n	12c3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   12c32:	697b      	ldr	r3, [r7, #20]
   12c34:	0018      	movs	r0, r3
   12c36:	4b7e      	ldr	r3, [pc, #504]	; (12e30 <_i2c_master_interrupt_handler+0x264>)
   12c38:	4798      	blx	r3
   12c3a:	e070      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c3c:	697b      	ldr	r3, [r7, #20]
   12c3e:	8b5b      	ldrh	r3, [r3, #26]
   12c40:	b29b      	uxth	r3, r3
   12c42:	2b00      	cmp	r3, #0
   12c44:	d039      	beq.n	12cba <_i2c_master_interrupt_handler+0xee>
   12c46:	697b      	ldr	r3, [r7, #20]
   12c48:	8b9b      	ldrh	r3, [r3, #28]
   12c4a:	b29b      	uxth	r3, r3
   12c4c:	2b00      	cmp	r3, #0
   12c4e:	d134      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   12c50:	697b      	ldr	r3, [r7, #20]
   12c52:	2225      	movs	r2, #37	; 0x25
   12c54:	5c9b      	ldrb	r3, [r3, r2]
   12c56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c58:	2b05      	cmp	r3, #5
   12c5a:	d12e      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12c5c:	697b      	ldr	r3, [r7, #20]
   12c5e:	2224      	movs	r2, #36	; 0x24
   12c60:	5c9b      	ldrb	r3, [r3, r2]
   12c62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12c64:	2b00      	cmp	r3, #0
   12c66:	d128      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12c68:	693b      	ldr	r3, [r7, #16]
   12c6a:	2203      	movs	r2, #3
   12c6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12c6e:	697b      	ldr	r3, [r7, #20]
   12c70:	2200      	movs	r2, #0
   12c72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12c74:	697b      	ldr	r3, [r7, #20]
   12c76:	2225      	movs	r2, #37	; 0x25
   12c78:	2100      	movs	r1, #0
   12c7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   12c7c:	697b      	ldr	r3, [r7, #20]
   12c7e:	7a9b      	ldrb	r3, [r3, #10]
   12c80:	2b00      	cmp	r3, #0
   12c82:	d00b      	beq.n	12c9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12c84:	697b      	ldr	r3, [r7, #20]
   12c86:	0018      	movs	r0, r3
   12c88:	4b6a      	ldr	r3, [pc, #424]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12c8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12c8c:	693b      	ldr	r3, [r7, #16]
   12c8e:	685b      	ldr	r3, [r3, #4]
   12c90:	22c0      	movs	r2, #192	; 0xc0
   12c92:	0292      	lsls	r2, r2, #10
   12c94:	431a      	orrs	r2, r3
   12c96:	693b      	ldr	r3, [r7, #16]
   12c98:	605a      	str	r2, [r3, #4]
   12c9a:	e002      	b.n	12ca2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12c9c:	693b      	ldr	r3, [r7, #16]
   12c9e:	2201      	movs	r2, #1
   12ca0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12ca2:	230e      	movs	r3, #14
   12ca4:	18fb      	adds	r3, r7, r3
   12ca6:	781b      	ldrb	r3, [r3, #0]
   12ca8:	2201      	movs	r2, #1
   12caa:	4013      	ands	r3, r2
   12cac:	d037      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12cae:	697b      	ldr	r3, [r7, #20]
   12cb0:	68db      	ldr	r3, [r3, #12]
   12cb2:	697a      	ldr	r2, [r7, #20]
   12cb4:	0010      	movs	r0, r2
   12cb6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12cb8:	e031      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12cba:	697b      	ldr	r3, [r7, #20]
   12cbc:	8b5b      	ldrh	r3, [r3, #26]
   12cbe:	b29b      	uxth	r3, r3
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	d02c      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
   12cc4:	697b      	ldr	r3, [r7, #20]
   12cc6:	8b9b      	ldrh	r3, [r3, #28]
   12cc8:	b29b      	uxth	r3, r3
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d027      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12cce:	693b      	ldr	r3, [r7, #16]
   12cd0:	8b5b      	ldrh	r3, [r3, #26]
   12cd2:	b29b      	uxth	r3, r3
   12cd4:	001a      	movs	r2, r3
   12cd6:	2320      	movs	r3, #32
   12cd8:	4013      	ands	r3, r2
   12cda:	d111      	bne.n	12d00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cdc:	230f      	movs	r3, #15
   12cde:	18fb      	adds	r3, r7, r3
   12ce0:	781b      	ldrb	r3, [r3, #0]
   12ce2:	2201      	movs	r2, #1
   12ce4:	4053      	eors	r3, r2
   12ce6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d104      	bne.n	12cf6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cec:	697b      	ldr	r3, [r7, #20]
   12cee:	8b9b      	ldrh	r3, [r3, #28]
   12cf0:	b29b      	uxth	r3, r3
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d004      	beq.n	12d00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   12cf6:	697b      	ldr	r3, [r7, #20]
   12cf8:	2225      	movs	r2, #37	; 0x25
   12cfa:	2141      	movs	r1, #65	; 0x41
   12cfc:	5499      	strb	r1, [r3, r2]
   12cfe:	e00e      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12d00:	697b      	ldr	r3, [r7, #20]
   12d02:	2224      	movs	r2, #36	; 0x24
   12d04:	5c9b      	ldrb	r3, [r3, r2]
   12d06:	b2db      	uxtb	r3, r3
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d104      	bne.n	12d16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   12d0c:	697b      	ldr	r3, [r7, #20]
   12d0e:	0018      	movs	r0, r3
   12d10:	4b49      	ldr	r3, [pc, #292]	; (12e38 <_i2c_master_interrupt_handler+0x26c>)
   12d12:	4798      	blx	r3
   12d14:	e003      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   12d16:	697b      	ldr	r3, [r7, #20]
   12d18:	0018      	movs	r0, r3
   12d1a:	4b48      	ldr	r3, [pc, #288]	; (12e3c <_i2c_master_interrupt_handler+0x270>)
   12d1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d1e:	697b      	ldr	r3, [r7, #20]
   12d20:	8b5b      	ldrh	r3, [r3, #26]
   12d22:	b29b      	uxth	r3, r3
   12d24:	2b00      	cmp	r3, #0
   12d26:	d047      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
   12d28:	697b      	ldr	r3, [r7, #20]
   12d2a:	8b9b      	ldrh	r3, [r3, #28]
   12d2c:	b29b      	uxth	r3, r3
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d142      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   12d32:	697b      	ldr	r3, [r7, #20]
   12d34:	2225      	movs	r2, #37	; 0x25
   12d36:	5c9b      	ldrb	r3, [r3, r2]
   12d38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d3a:	2b05      	cmp	r3, #5
   12d3c:	d13c      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12d3e:	697b      	ldr	r3, [r7, #20]
   12d40:	2224      	movs	r2, #36	; 0x24
   12d42:	5c9b      	ldrb	r3, [r3, r2]
   12d44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12d46:	2b01      	cmp	r3, #1
   12d48:	d136      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12d4a:	693b      	ldr	r3, [r7, #16]
   12d4c:	7e1b      	ldrb	r3, [r3, #24]
   12d4e:	b2db      	uxtb	r3, r3
   12d50:	001a      	movs	r2, r3
   12d52:	2302      	movs	r3, #2
   12d54:	4013      	ands	r3, r2
   12d56:	d002      	beq.n	12d5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12d58:	693b      	ldr	r3, [r7, #16]
   12d5a:	2202      	movs	r2, #2
   12d5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12d5e:	693b      	ldr	r3, [r7, #16]
   12d60:	2203      	movs	r2, #3
   12d62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   12d64:	697b      	ldr	r3, [r7, #20]
   12d66:	2200      	movs	r2, #0
   12d68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12d6a:	697b      	ldr	r3, [r7, #20]
   12d6c:	2225      	movs	r2, #37	; 0x25
   12d6e:	2100      	movs	r1, #0
   12d70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12d72:	230e      	movs	r3, #14
   12d74:	18fb      	adds	r3, r7, r3
   12d76:	781b      	ldrb	r3, [r3, #0]
   12d78:	2202      	movs	r2, #2
   12d7a:	4013      	ands	r3, r2
   12d7c:	d00b      	beq.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12d7e:	697b      	ldr	r3, [r7, #20]
   12d80:	2224      	movs	r2, #36	; 0x24
   12d82:	5c9b      	ldrb	r3, [r3, r2]
   12d84:	b2db      	uxtb	r3, r3
   12d86:	2b01      	cmp	r3, #1
   12d88:	d105      	bne.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12d8a:	697b      	ldr	r3, [r7, #20]
   12d8c:	691b      	ldr	r3, [r3, #16]
   12d8e:	697a      	ldr	r2, [r7, #20]
   12d90:	0010      	movs	r0, r2
   12d92:	4798      	blx	r3
   12d94:	e010      	b.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12d96:	230e      	movs	r3, #14
   12d98:	18fb      	adds	r3, r7, r3
   12d9a:	781b      	ldrb	r3, [r3, #0]
   12d9c:	2201      	movs	r2, #1
   12d9e:	4013      	ands	r3, r2
   12da0:	d00a      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12da2:	697b      	ldr	r3, [r7, #20]
   12da4:	2224      	movs	r2, #36	; 0x24
   12da6:	5c9b      	ldrb	r3, [r3, r2]
   12da8:	b2db      	uxtb	r3, r3
   12daa:	2b00      	cmp	r3, #0
   12dac:	d104      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12dae:	697b      	ldr	r3, [r7, #20]
   12db0:	68db      	ldr	r3, [r3, #12]
   12db2:	697a      	ldr	r2, [r7, #20]
   12db4:	0010      	movs	r0, r2
   12db6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12db8:	697b      	ldr	r3, [r7, #20]
   12dba:	2225      	movs	r2, #37	; 0x25
   12dbc:	5c9b      	ldrb	r3, [r3, r2]
   12dbe:	b2db      	uxtb	r3, r3
   12dc0:	2b05      	cmp	r3, #5
   12dc2:	d02e      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
   12dc4:	697b      	ldr	r3, [r7, #20]
   12dc6:	2225      	movs	r2, #37	; 0x25
   12dc8:	5c9b      	ldrb	r3, [r3, r2]
   12dca:	b2db      	uxtb	r3, r3
   12dcc:	2b00      	cmp	r3, #0
   12dce:	d028      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   12dd0:	693b      	ldr	r3, [r7, #16]
   12dd2:	2203      	movs	r2, #3
   12dd4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12dd6:	697b      	ldr	r3, [r7, #20]
   12dd8:	2200      	movs	r2, #0
   12dda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   12ddc:	697b      	ldr	r3, [r7, #20]
   12dde:	2200      	movs	r2, #0
   12de0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12de2:	697b      	ldr	r3, [r7, #20]
   12de4:	2225      	movs	r2, #37	; 0x25
   12de6:	5c9b      	ldrb	r3, [r3, r2]
   12de8:	b2db      	uxtb	r3, r3
   12dea:	2b41      	cmp	r3, #65	; 0x41
   12dec:	d00e      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   12dee:	697b      	ldr	r3, [r7, #20]
   12df0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12df2:	2b00      	cmp	r3, #0
   12df4:	d00a      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   12df6:	697b      	ldr	r3, [r7, #20]
   12df8:	0018      	movs	r0, r3
   12dfa:	4b0e      	ldr	r3, [pc, #56]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12dfc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   12dfe:	693b      	ldr	r3, [r7, #16]
   12e00:	685b      	ldr	r3, [r3, #4]
   12e02:	22e0      	movs	r2, #224	; 0xe0
   12e04:	02d2      	lsls	r2, r2, #11
   12e06:	431a      	orrs	r2, r3
   12e08:	693b      	ldr	r3, [r7, #16]
   12e0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12e0c:	230e      	movs	r3, #14
   12e0e:	18fb      	adds	r3, r7, r3
   12e10:	781b      	ldrb	r3, [r3, #0]
   12e12:	2204      	movs	r2, #4
   12e14:	4013      	ands	r3, r2
   12e16:	d004      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12e18:	697b      	ldr	r3, [r7, #20]
   12e1a:	695b      	ldr	r3, [r3, #20]
   12e1c:	697a      	ldr	r2, [r7, #20]
   12e1e:	0010      	movs	r0, r2
   12e20:	4798      	blx	r3
		}
	}
}
   12e22:	46c0      	nop			; (mov r8, r8)
   12e24:	46bd      	mov	sp, r7
   12e26:	b006      	add	sp, #24
   12e28:	bd80      	pop	{r7, pc}
   12e2a:	46c0      	nop			; (mov r8, r8)
   12e2c:	20005794 	.word	0x20005794
   12e30:	0001284d 	.word	0x0001284d
   12e34:	000126bd 	.word	0x000126bd
   12e38:	000127d1 	.word	0x000127d1
   12e3c:	000126e1 	.word	0x000126e1

00012e40 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   12e40:	b580      	push	{r7, lr}
   12e42:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   12e44:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   12e48:	4b02      	ldr	r3, [pc, #8]	; (12e54 <NVIC_SystemReset+0x14>)
   12e4a:	4a03      	ldr	r2, [pc, #12]	; (12e58 <NVIC_SystemReset+0x18>)
   12e4c:	60da      	str	r2, [r3, #12]
   12e4e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   12e52:	e7fe      	b.n	12e52 <NVIC_SystemReset+0x12>
   12e54:	e000ed00 	.word	0xe000ed00
   12e58:	05fa0004 	.word	0x05fa0004

00012e5c <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   12e5c:	b580      	push	{r7, lr}
   12e5e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   12e60:	4b02      	ldr	r3, [pc, #8]	; (12e6c <system_reset+0x10>)
   12e62:	4798      	blx	r3
}
   12e64:	46c0      	nop			; (mov r8, r8)
   12e66:	46bd      	mov	sp, r7
   12e68:	bd80      	pop	{r7, pc}
   12e6a:	46c0      	nop			; (mov r8, r8)
   12e6c:	00012e41 	.word	0x00012e41

00012e70 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   12e70:	b580      	push	{r7, lr}
   12e72:	b086      	sub	sp, #24
   12e74:	af00      	add	r7, sp, #0
   12e76:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   12e78:	4b9a      	ldr	r3, [pc, #616]	; (130e4 <vCommandConsoleTask+0x274>)
   12e7a:	0018      	movs	r0, r3
   12e7c:	4b9a      	ldr	r3, [pc, #616]	; (130e8 <vCommandConsoleTask+0x278>)
   12e7e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   12e80:	4b9a      	ldr	r3, [pc, #616]	; (130ec <vCommandConsoleTask+0x27c>)
   12e82:	0018      	movs	r0, r3
   12e84:	4b98      	ldr	r3, [pc, #608]	; (130e8 <vCommandConsoleTask+0x278>)
   12e86:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSHTCGetCommand);
   12e88:	4b99      	ldr	r3, [pc, #612]	; (130f0 <vCommandConsoleTask+0x280>)
   12e8a:	0018      	movs	r0, r3
   12e8c:	4b96      	ldr	r3, [pc, #600]	; (130e8 <vCommandConsoleTask+0x278>)
   12e8e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   12e90:	4b98      	ldr	r3, [pc, #608]	; (130f4 <vCommandConsoleTask+0x284>)
   12e92:	0018      	movs	r0, r3
   12e94:	4b94      	ldr	r3, [pc, #592]	; (130e8 <vCommandConsoleTask+0x278>)
   12e96:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   12e98:	4b97      	ldr	r3, [pc, #604]	; (130f8 <vCommandConsoleTask+0x288>)
   12e9a:	0018      	movs	r0, r3
   12e9c:	4b92      	ldr	r3, [pc, #584]	; (130e8 <vCommandConsoleTask+0x278>)
   12e9e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   12ea0:	4b96      	ldr	r3, [pc, #600]	; (130fc <vCommandConsoleTask+0x28c>)
   12ea2:	0018      	movs	r0, r3
   12ea4:	4b90      	ldr	r3, [pc, #576]	; (130e8 <vCommandConsoleTask+0x278>)
   12ea6:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   12ea8:	4b95      	ldr	r3, [pc, #596]	; (13100 <vCommandConsoleTask+0x290>)
   12eaa:	0018      	movs	r0, r3
   12eac:	4b8e      	ldr	r3, [pc, #568]	; (130e8 <vCommandConsoleTask+0x278>)
   12eae:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   12eb0:	2317      	movs	r3, #23
   12eb2:	18fb      	adds	r3, r7, r3
   12eb4:	2200      	movs	r2, #0
   12eb6:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   12eb8:	4b92      	ldr	r3, [pc, #584]	; (13104 <vCommandConsoleTask+0x294>)
   12eba:	0018      	movs	r0, r3
   12ebc:	4b92      	ldr	r3, [pc, #584]	; (13108 <vCommandConsoleTask+0x298>)
   12ebe:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   12ec0:	2203      	movs	r2, #3
   12ec2:	2100      	movs	r1, #0
   12ec4:	2001      	movs	r0, #1
   12ec6:	4b91      	ldr	r3, [pc, #580]	; (1310c <vCommandConsoleTask+0x29c>)
   12ec8:	4798      	blx	r3
   12eca:	0002      	movs	r2, r0
   12ecc:	4b90      	ldr	r3, [pc, #576]	; (13110 <vCommandConsoleTask+0x2a0>)
   12ece:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   12ed0:	4b8f      	ldr	r3, [pc, #572]	; (13110 <vCommandConsoleTask+0x2a0>)
   12ed2:	681b      	ldr	r3, [r3, #0]
   12ed4:	2b00      	cmp	r3, #0
   12ed6:	d107      	bne.n	12ee8 <vCommandConsoleTask+0x78>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   12ed8:	4b8e      	ldr	r3, [pc, #568]	; (13114 <vCommandConsoleTask+0x2a4>)
   12eda:	0019      	movs	r1, r3
   12edc:	2003      	movs	r0, #3
   12ede:	4b8e      	ldr	r3, [pc, #568]	; (13118 <vCommandConsoleTask+0x2a8>)
   12ee0:	4798      	blx	r3
        vTaskSuspend(NULL);
   12ee2:	2000      	movs	r0, #0
   12ee4:	4b8d      	ldr	r3, [pc, #564]	; (1311c <vCommandConsoleTask+0x2ac>)
   12ee6:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   12ee8:	230c      	movs	r3, #12
   12eea:	18fb      	adds	r3, r7, r3
   12eec:	0018      	movs	r0, r3
   12eee:	4b8c      	ldr	r3, [pc, #560]	; (13120 <vCommandConsoleTask+0x2b0>)
   12ef0:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   12ef2:	230c      	movs	r3, #12
   12ef4:	18fb      	adds	r3, r7, r3
   12ef6:	781b      	ldrb	r3, [r3, #0]
   12ef8:	2b0a      	cmp	r3, #10
   12efa:	d004      	beq.n	12f06 <vCommandConsoleTask+0x96>
   12efc:	230c      	movs	r3, #12
   12efe:	18fb      	adds	r3, r7, r3
   12f00:	781b      	ldrb	r3, [r3, #0]
   12f02:	2b0d      	cmp	r3, #13
   12f04:	d137      	bne.n	12f76 <vCommandConsoleTask+0x106>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   12f06:	4b87      	ldr	r3, [pc, #540]	; (13124 <vCommandConsoleTask+0x2b4>)
   12f08:	0018      	movs	r0, r3
   12f0a:	4b7f      	ldr	r3, [pc, #508]	; (13108 <vCommandConsoleTask+0x298>)
   12f0c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   12f0e:	4b86      	ldr	r3, [pc, #536]	; (13128 <vCommandConsoleTask+0x2b8>)
   12f10:	2200      	movs	r2, #0
   12f12:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   12f14:	4b85      	ldr	r3, [pc, #532]	; (1312c <vCommandConsoleTask+0x2bc>)
   12f16:	2200      	movs	r2, #0
   12f18:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   12f1a:	4985      	ldr	r1, [pc, #532]	; (13130 <vCommandConsoleTask+0x2c0>)
   12f1c:	4b85      	ldr	r3, [pc, #532]	; (13134 <vCommandConsoleTask+0x2c4>)
   12f1e:	2231      	movs	r2, #49	; 0x31
   12f20:	0018      	movs	r0, r3
   12f22:	4b85      	ldr	r3, [pc, #532]	; (13138 <vCommandConsoleTask+0x2c8>)
   12f24:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   12f26:	4b83      	ldr	r3, [pc, #524]	; (13134 <vCommandConsoleTask+0x2c4>)
   12f28:	2231      	movs	r2, #49	; 0x31
   12f2a:	2100      	movs	r1, #0
   12f2c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   12f2e:	4983      	ldr	r1, [pc, #524]	; (1313c <vCommandConsoleTask+0x2cc>)
   12f30:	4b7f      	ldr	r3, [pc, #508]	; (13130 <vCommandConsoleTask+0x2c0>)
   12f32:	2264      	movs	r2, #100	; 0x64
   12f34:	0018      	movs	r0, r3
   12f36:	4b82      	ldr	r3, [pc, #520]	; (13140 <vCommandConsoleTask+0x2d0>)
   12f38:	4798      	blx	r3
   12f3a:	0003      	movs	r3, r0
   12f3c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12f3e:	4b7f      	ldr	r3, [pc, #508]	; (1313c <vCommandConsoleTask+0x2cc>)
   12f40:	2263      	movs	r2, #99	; 0x63
   12f42:	2100      	movs	r1, #0
   12f44:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   12f46:	4b7d      	ldr	r3, [pc, #500]	; (1313c <vCommandConsoleTask+0x2cc>)
   12f48:	0018      	movs	r0, r3
   12f4a:	4b6f      	ldr	r3, [pc, #444]	; (13108 <vCommandConsoleTask+0x298>)
   12f4c:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   12f4e:	693b      	ldr	r3, [r7, #16]
   12f50:	2b00      	cmp	r3, #0
   12f52:	d1ec      	bne.n	12f2e <vCommandConsoleTask+0xbe>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   12f54:	2317      	movs	r3, #23
   12f56:	18fb      	adds	r3, r7, r3
   12f58:	2200      	movs	r2, #0
   12f5a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12f5c:	4b74      	ldr	r3, [pc, #464]	; (13130 <vCommandConsoleTask+0x2c0>)
   12f5e:	2232      	movs	r2, #50	; 0x32
   12f60:	2100      	movs	r1, #0
   12f62:	0018      	movs	r0, r3
   12f64:	4b77      	ldr	r3, [pc, #476]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f66:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   12f68:	4b74      	ldr	r3, [pc, #464]	; (1313c <vCommandConsoleTask+0x2cc>)
   12f6a:	2264      	movs	r2, #100	; 0x64
   12f6c:	2100      	movs	r1, #0
   12f6e:	0018      	movs	r0, r3
   12f70:	4b74      	ldr	r3, [pc, #464]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f72:	4798      	blx	r3
   12f74:	e0b5      	b.n	130e2 <vCommandConsoleTask+0x272>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   12f76:	4b6c      	ldr	r3, [pc, #432]	; (13128 <vCommandConsoleTask+0x2b8>)
   12f78:	781b      	ldrb	r3, [r3, #0]
   12f7a:	2b00      	cmp	r3, #0
   12f7c:	d059      	beq.n	13032 <vCommandConsoleTask+0x1c2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   12f7e:	4b6b      	ldr	r3, [pc, #428]	; (1312c <vCommandConsoleTask+0x2bc>)
   12f80:	781b      	ldrb	r3, [r3, #0]
   12f82:	2b03      	cmp	r3, #3
   12f84:	d80c      	bhi.n	12fa0 <vCommandConsoleTask+0x130>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   12f86:	4b69      	ldr	r3, [pc, #420]	; (1312c <vCommandConsoleTask+0x2bc>)
   12f88:	781b      	ldrb	r3, [r3, #0]
   12f8a:	1c5a      	adds	r2, r3, #1
   12f8c:	b2d1      	uxtb	r1, r2
   12f8e:	4a67      	ldr	r2, [pc, #412]	; (1312c <vCommandConsoleTask+0x2bc>)
   12f90:	7011      	strb	r1, [r2, #0]
   12f92:	001a      	movs	r2, r3
   12f94:	230c      	movs	r3, #12
   12f96:	18fb      	adds	r3, r7, r3
   12f98:	7819      	ldrb	r1, [r3, #0]
   12f9a:	4b6b      	ldr	r3, [pc, #428]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f9c:	5499      	strb	r1, [r3, r2]
   12f9e:	e005      	b.n	12fac <vCommandConsoleTask+0x13c>
                } else {
                    isEscapeCode = false;
   12fa0:	4b61      	ldr	r3, [pc, #388]	; (13128 <vCommandConsoleTask+0x2b8>)
   12fa2:	2200      	movs	r2, #0
   12fa4:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   12fa6:	4b61      	ldr	r3, [pc, #388]	; (1312c <vCommandConsoleTask+0x2bc>)
   12fa8:	2200      	movs	r2, #0
   12faa:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   12fac:	4b5f      	ldr	r3, [pc, #380]	; (1312c <vCommandConsoleTask+0x2bc>)
   12fae:	781b      	ldrb	r3, [r3, #0]
   12fb0:	2b01      	cmp	r3, #1
   12fb2:	d999      	bls.n	12ee8 <vCommandConsoleTask+0x78>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   12fb4:	4a65      	ldr	r2, [pc, #404]	; (1314c <vCommandConsoleTask+0x2dc>)
   12fb6:	4b64      	ldr	r3, [pc, #400]	; (13148 <vCommandConsoleTask+0x2d8>)
   12fb8:	0011      	movs	r1, r2
   12fba:	0018      	movs	r0, r3
   12fbc:	4b64      	ldr	r3, [pc, #400]	; (13150 <vCommandConsoleTask+0x2e0>)
   12fbe:	4798      	blx	r3
   12fc0:	1e03      	subs	r3, r0, #0
   12fc2:	d02f      	beq.n	13024 <vCommandConsoleTask+0x1b4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   12fc4:	4963      	ldr	r1, [pc, #396]	; (13154 <vCommandConsoleTask+0x2e4>)
   12fc6:	4b5a      	ldr	r3, [pc, #360]	; (13130 <vCommandConsoleTask+0x2c0>)
   12fc8:	221b      	movs	r2, #27
   12fca:	0018      	movs	r0, r3
   12fcc:	4b62      	ldr	r3, [pc, #392]	; (13158 <vCommandConsoleTask+0x2e8>)
   12fce:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   12fd0:	4b57      	ldr	r3, [pc, #348]	; (13130 <vCommandConsoleTask+0x2c0>)
   12fd2:	0018      	movs	r0, r3
   12fd4:	4b4c      	ldr	r3, [pc, #304]	; (13108 <vCommandConsoleTask+0x298>)
   12fd6:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   12fd8:	2317      	movs	r3, #23
   12fda:	18fb      	adds	r3, r7, r3
   12fdc:	2200      	movs	r2, #0
   12fde:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12fe0:	4b53      	ldr	r3, [pc, #332]	; (13130 <vCommandConsoleTask+0x2c0>)
   12fe2:	2232      	movs	r2, #50	; 0x32
   12fe4:	2100      	movs	r1, #0
   12fe6:	0018      	movs	r0, r3
   12fe8:	4b56      	ldr	r3, [pc, #344]	; (13144 <vCommandConsoleTask+0x2d4>)
   12fea:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   12fec:	4951      	ldr	r1, [pc, #324]	; (13134 <vCommandConsoleTask+0x2c4>)
   12fee:	4b50      	ldr	r3, [pc, #320]	; (13130 <vCommandConsoleTask+0x2c0>)
   12ff0:	2231      	movs	r2, #49	; 0x31
   12ff2:	0018      	movs	r0, r3
   12ff4:	4b50      	ldr	r3, [pc, #320]	; (13138 <vCommandConsoleTask+0x2c8>)
   12ff6:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   12ff8:	4b4d      	ldr	r3, [pc, #308]	; (13130 <vCommandConsoleTask+0x2c0>)
   12ffa:	0018      	movs	r0, r3
   12ffc:	4b57      	ldr	r3, [pc, #348]	; (1315c <vCommandConsoleTask+0x2ec>)
   12ffe:	4798      	blx	r3
   13000:	0003      	movs	r3, r0
   13002:	2b30      	cmp	r3, #48	; 0x30
   13004:	d806      	bhi.n	13014 <vCommandConsoleTask+0x1a4>
   13006:	4b4b      	ldr	r3, [pc, #300]	; (13134 <vCommandConsoleTask+0x2c4>)
   13008:	0018      	movs	r0, r3
   1300a:	4b54      	ldr	r3, [pc, #336]	; (1315c <vCommandConsoleTask+0x2ec>)
   1300c:	4798      	blx	r3
   1300e:	0003      	movs	r3, r0
   13010:	b2da      	uxtb	r2, r3
   13012:	e000      	b.n	13016 <vCommandConsoleTask+0x1a6>
   13014:	2231      	movs	r2, #49	; 0x31
   13016:	2317      	movs	r3, #23
   13018:	18fb      	adds	r3, r7, r3
   1301a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   1301c:	4b44      	ldr	r3, [pc, #272]	; (13130 <vCommandConsoleTask+0x2c0>)
   1301e:	0018      	movs	r0, r3
   13020:	4b39      	ldr	r3, [pc, #228]	; (13108 <vCommandConsoleTask+0x298>)
   13022:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   13024:	4b40      	ldr	r3, [pc, #256]	; (13128 <vCommandConsoleTask+0x2b8>)
   13026:	2200      	movs	r2, #0
   13028:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1302a:	4b40      	ldr	r3, [pc, #256]	; (1312c <vCommandConsoleTask+0x2bc>)
   1302c:	2200      	movs	r2, #0
   1302e:	701a      	strb	r2, [r3, #0]
   13030:	e75a      	b.n	12ee8 <vCommandConsoleTask+0x78>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   13032:	230c      	movs	r3, #12
   13034:	18fb      	adds	r3, r7, r3
   13036:	781b      	ldrb	r3, [r3, #0]
   13038:	2b0d      	cmp	r3, #13
   1303a:	d100      	bne.n	1303e <vCommandConsoleTask+0x1ce>
   1303c:	e754      	b.n	12ee8 <vCommandConsoleTask+0x78>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1303e:	230c      	movs	r3, #12
   13040:	18fb      	adds	r3, r7, r3
   13042:	781b      	ldrb	r3, [r3, #0]
   13044:	2b08      	cmp	r3, #8
   13046:	d004      	beq.n	13052 <vCommandConsoleTask+0x1e2>
   13048:	230c      	movs	r3, #12
   1304a:	18fb      	adds	r3, r7, r3
   1304c:	781b      	ldrb	r3, [r3, #0]
   1304e:	2b7f      	cmp	r3, #127	; 0x7f
   13050:	d11c      	bne.n	1308c <vCommandConsoleTask+0x21c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13052:	2308      	movs	r3, #8
   13054:	18fb      	adds	r3, r7, r3
   13056:	4a42      	ldr	r2, [pc, #264]	; (13160 <vCommandConsoleTask+0x2f0>)
   13058:	6812      	ldr	r2, [r2, #0]
   1305a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   1305c:	2308      	movs	r3, #8
   1305e:	18fb      	adds	r3, r7, r3
   13060:	0018      	movs	r0, r3
   13062:	4b29      	ldr	r3, [pc, #164]	; (13108 <vCommandConsoleTask+0x298>)
   13064:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13066:	2317      	movs	r3, #23
   13068:	18fb      	adds	r3, r7, r3
   1306a:	781b      	ldrb	r3, [r3, #0]
   1306c:	2b00      	cmp	r3, #0
   1306e:	d037      	beq.n	130e0 <vCommandConsoleTask+0x270>
                    cInputIndex--;
   13070:	2317      	movs	r3, #23
   13072:	18fb      	adds	r3, r7, r3
   13074:	781a      	ldrb	r2, [r3, #0]
   13076:	2317      	movs	r3, #23
   13078:	18fb      	adds	r3, r7, r3
   1307a:	3a01      	subs	r2, #1
   1307c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   1307e:	2317      	movs	r3, #23
   13080:	18fb      	adds	r3, r7, r3
   13082:	781b      	ldrb	r3, [r3, #0]
   13084:	4a2a      	ldr	r2, [pc, #168]	; (13130 <vCommandConsoleTask+0x2c0>)
   13086:	2100      	movs	r1, #0
   13088:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1308a:	e029      	b.n	130e0 <vCommandConsoleTask+0x270>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   1308c:	230c      	movs	r3, #12
   1308e:	18fb      	adds	r3, r7, r3
   13090:	781b      	ldrb	r3, [r3, #0]
   13092:	2b1b      	cmp	r3, #27
   13094:	d106      	bne.n	130a4 <vCommandConsoleTask+0x234>
                isEscapeCode = true;  // Next characters will be code arguments
   13096:	4b24      	ldr	r3, [pc, #144]	; (13128 <vCommandConsoleTask+0x2b8>)
   13098:	2201      	movs	r2, #1
   1309a:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   1309c:	4b23      	ldr	r3, [pc, #140]	; (1312c <vCommandConsoleTask+0x2bc>)
   1309e:	2200      	movs	r2, #0
   130a0:	701a      	strb	r2, [r3, #0]
   130a2:	e721      	b.n	12ee8 <vCommandConsoleTask+0x78>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   130a4:	2317      	movs	r3, #23
   130a6:	18fb      	adds	r3, r7, r3
   130a8:	781b      	ldrb	r3, [r3, #0]
   130aa:	2b31      	cmp	r3, #49	; 0x31
   130ac:	d80e      	bhi.n	130cc <vCommandConsoleTask+0x25c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   130ae:	2317      	movs	r3, #23
   130b0:	18fb      	adds	r3, r7, r3
   130b2:	781b      	ldrb	r3, [r3, #0]
   130b4:	220c      	movs	r2, #12
   130b6:	18ba      	adds	r2, r7, r2
   130b8:	7811      	ldrb	r1, [r2, #0]
   130ba:	4a1d      	ldr	r2, [pc, #116]	; (13130 <vCommandConsoleTask+0x2c0>)
   130bc:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   130be:	2317      	movs	r3, #23
   130c0:	18fb      	adds	r3, r7, r3
   130c2:	781a      	ldrb	r2, [r3, #0]
   130c4:	2317      	movs	r3, #23
   130c6:	18fb      	adds	r3, r7, r3
   130c8:	3201      	adds	r2, #1
   130ca:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   130cc:	230c      	movs	r3, #12
   130ce:	18fb      	adds	r3, r7, r3
   130d0:	2200      	movs	r2, #0
   130d2:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   130d4:	230c      	movs	r3, #12
   130d6:	18fb      	adds	r3, r7, r3
   130d8:	0018      	movs	r0, r3
   130da:	4b0b      	ldr	r3, [pc, #44]	; (13108 <vCommandConsoleTask+0x298>)
   130dc:	4798      	blx	r3
   130de:	e703      	b.n	12ee8 <vCommandConsoleTask+0x78>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   130e0:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   130e2:	e701      	b.n	12ee8 <vCommandConsoleTask+0x78>
   130e4:	00035fb0 	.word	0x00035fb0
   130e8:	00018069 	.word	0x00018069
   130ec:	00035fa0 	.word	0x00035fa0
   130f0:	00035fe0 	.word	0x00035fe0
   130f4:	00036000 	.word	0x00036000
   130f8:	00035fc0 	.word	0x00035fc0
   130fc:	00035fd0 	.word	0x00035fd0
   13100:	00035ff0 	.word	0x00035ff0
   13104:	00035c7c 	.word	0x00035c7c
   13108:	0001e045 	.word	0x0001e045
   1310c:	0001a6e5 	.word	0x0001a6e5
   13110:	20004380 	.word	0x20004380
   13114:	00035e00 	.word	0x00035e00
   13118:	0001e131 	.word	0x0001e131
   1311c:	0001c4d1 	.word	0x0001c4d1
   13120:	00013165 	.word	0x00013165
   13124:	00035e20 	.word	0x00035e20
   13128:	20000344 	.word	0x20000344
   1312c:	20000345 	.word	0x20000345
   13130:	2000037c 	.word	0x2000037c
   13134:	20000348 	.word	0x20000348
   13138:	00034c87 	.word	0x00034c87
   1313c:	200003b0 	.word	0x200003b0
   13140:	000180d9 	.word	0x000180d9
   13144:	0003489f 	.word	0x0003489f
   13148:	20000414 	.word	0x20000414
   1314c:	00035e24 	.word	0x00035e24
   13150:	00034ba1 	.word	0x00034ba1
   13154:	00035e28 	.word	0x00035e28
   13158:	00034b5d 	.word	0x00034b5d
   1315c:	00034c57 	.word	0x00034c57
   13160:	00035e30 	.word	0x00035e30

00013164 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13164:	b580      	push	{r7, lr}
   13166:	b084      	sub	sp, #16
   13168:	af00      	add	r7, sp, #0
   1316a:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   1316c:	687b      	ldr	r3, [r7, #4]
   1316e:	0018      	movs	r0, r3
   13170:	4b0c      	ldr	r3, [pc, #48]	; (131a4 <FreeRTOS_read+0x40>)
   13172:	4798      	blx	r3
   13174:	0003      	movs	r3, r0
   13176:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13178:	e00d      	b.n	13196 <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   1317a:	4b0b      	ldr	r3, [pc, #44]	; (131a8 <FreeRTOS_read+0x44>)
   1317c:	681a      	ldr	r2, [r3, #0]
   1317e:	2301      	movs	r3, #1
   13180:	425b      	negs	r3, r3
   13182:	0019      	movs	r1, r3
   13184:	0010      	movs	r0, r2
   13186:	4b09      	ldr	r3, [pc, #36]	; (131ac <FreeRTOS_read+0x48>)
   13188:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   1318a:	687b      	ldr	r3, [r7, #4]
   1318c:	0018      	movs	r0, r3
   1318e:	4b05      	ldr	r3, [pc, #20]	; (131a4 <FreeRTOS_read+0x40>)
   13190:	4798      	blx	r3
   13192:	0003      	movs	r3, r0
   13194:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13196:	68fb      	ldr	r3, [r7, #12]
   13198:	3301      	adds	r3, #1
   1319a:	d0ee      	beq.n	1317a <FreeRTOS_read+0x16>
    }
}
   1319c:	46c0      	nop			; (mov r8, r8)
   1319e:	46bd      	mov	sp, r7
   131a0:	b004      	add	sp, #16
   131a2:	bd80      	pop	{r7, pc}
   131a4:	0001e0e1 	.word	0x0001e0e1
   131a8:	20004380 	.word	0x20004380
   131ac:	0001b69d 	.word	0x0001b69d

000131b0 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   131b0:	b580      	push	{r7, lr}
   131b2:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   131b4:	4b0a      	ldr	r3, [pc, #40]	; (131e0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   131b6:	2200      	movs	r2, #0
   131b8:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   131ba:	4b0a      	ldr	r3, [pc, #40]	; (131e4 <CliCharReadySemaphoreGiveFromISR+0x34>)
   131bc:	681b      	ldr	r3, [r3, #0]
   131be:	4a08      	ldr	r2, [pc, #32]	; (131e0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   131c0:	0011      	movs	r1, r2
   131c2:	0018      	movs	r0, r3
   131c4:	4b08      	ldr	r3, [pc, #32]	; (131e8 <CliCharReadySemaphoreGiveFromISR+0x38>)
   131c6:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   131c8:	4b05      	ldr	r3, [pc, #20]	; (131e0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   131ca:	681b      	ldr	r3, [r3, #0]
   131cc:	2b00      	cmp	r3, #0
   131ce:	d003      	beq.n	131d8 <CliCharReadySemaphoreGiveFromISR+0x28>
   131d0:	4b06      	ldr	r3, [pc, #24]	; (131ec <CliCharReadySemaphoreGiveFromISR+0x3c>)
   131d2:	2280      	movs	r2, #128	; 0x80
   131d4:	0552      	lsls	r2, r2, #21
   131d6:	601a      	str	r2, [r3, #0]
}
   131d8:	46c0      	nop			; (mov r8, r8)
   131da:	46bd      	mov	sp, r7
   131dc:	bd80      	pop	{r7, pc}
   131de:	46c0      	nop			; (mov r8, r8)
   131e0:	20000418 	.word	0x20000418
   131e4:	20004380 	.word	0x20004380
   131e8:	0001b015 	.word	0x0001b015
   131ec:	e000ed04 	.word	0xe000ed04

000131f0 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   131f0:	b5b0      	push	{r4, r5, r7, lr}
   131f2:	b08a      	sub	sp, #40	; 0x28
   131f4:	af02      	add	r7, sp, #8
   131f6:	60f8      	str	r0, [r7, #12]
   131f8:	60b9      	str	r1, [r7, #8]
   131fa:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   131fc:	4b44      	ldr	r3, [pc, #272]	; (13310 <CLI_GetImuData+0x120>)
   131fe:	4798      	blx	r3
   13200:	0003      	movs	r3, r0
   13202:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   13204:	231b      	movs	r3, #27
   13206:	18fa      	adds	r2, r7, r3
   13208:	69fb      	ldr	r3, [r7, #28]
   1320a:	0011      	movs	r1, r2
   1320c:	0018      	movs	r0, r3
   1320e:	4b41      	ldr	r3, [pc, #260]	; (13314 <CLI_GetImuData+0x124>)
   13210:	4798      	blx	r3

    if (reg) {
   13212:	231b      	movs	r3, #27
   13214:	18fb      	adds	r3, r7, r3
   13216:	781b      	ldrb	r3, [r3, #0]
   13218:	2b00      	cmp	r3, #0
   1321a:	d05f      	beq.n	132dc <CLI_GetImuData+0xec>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   1321c:	4b3e      	ldr	r3, [pc, #248]	; (13318 <CLI_GetImuData+0x128>)
   1321e:	2206      	movs	r2, #6
   13220:	2100      	movs	r1, #0
   13222:	0018      	movs	r0, r3
   13224:	4b3d      	ldr	r3, [pc, #244]	; (1331c <CLI_GetImuData+0x12c>)
   13226:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13228:	4a3b      	ldr	r2, [pc, #236]	; (13318 <CLI_GetImuData+0x128>)
   1322a:	69fb      	ldr	r3, [r7, #28]
   1322c:	0011      	movs	r1, r2
   1322e:	0018      	movs	r0, r3
   13230:	4b3b      	ldr	r3, [pc, #236]	; (13320 <CLI_GetImuData+0x130>)
   13232:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   13234:	4b38      	ldr	r3, [pc, #224]	; (13318 <CLI_GetImuData+0x128>)
   13236:	2200      	movs	r2, #0
   13238:	5e9b      	ldrsh	r3, [r3, r2]
   1323a:	0018      	movs	r0, r3
   1323c:	4b39      	ldr	r3, [pc, #228]	; (13324 <CLI_GetImuData+0x134>)
   1323e:	4798      	blx	r3
   13240:	1c02      	adds	r2, r0, #0
   13242:	4b39      	ldr	r3, [pc, #228]	; (13328 <CLI_GetImuData+0x138>)
   13244:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   13246:	4b34      	ldr	r3, [pc, #208]	; (13318 <CLI_GetImuData+0x128>)
   13248:	2202      	movs	r2, #2
   1324a:	5e9b      	ldrsh	r3, [r3, r2]
   1324c:	0018      	movs	r0, r3
   1324e:	4b35      	ldr	r3, [pc, #212]	; (13324 <CLI_GetImuData+0x134>)
   13250:	4798      	blx	r3
   13252:	1c02      	adds	r2, r0, #0
   13254:	4b34      	ldr	r3, [pc, #208]	; (13328 <CLI_GetImuData+0x138>)
   13256:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13258:	4b2f      	ldr	r3, [pc, #188]	; (13318 <CLI_GetImuData+0x128>)
   1325a:	2204      	movs	r2, #4
   1325c:	5e9b      	ldrsh	r3, [r3, r2]
   1325e:	0018      	movs	r0, r3
   13260:	4b30      	ldr	r3, [pc, #192]	; (13324 <CLI_GetImuData+0x134>)
   13262:	4798      	blx	r3
   13264:	1c02      	adds	r2, r0, #0
   13266:	4b30      	ldr	r3, [pc, #192]	; (13328 <CLI_GetImuData+0x138>)
   13268:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   1326a:	4b2f      	ldr	r3, [pc, #188]	; (13328 <CLI_GetImuData+0x138>)
   1326c:	681a      	ldr	r2, [r3, #0]
   1326e:	4b2f      	ldr	r3, [pc, #188]	; (1332c <CLI_GetImuData+0x13c>)
   13270:	1c10      	adds	r0, r2, #0
   13272:	4798      	blx	r3
   13274:	0005      	movs	r5, r0
   13276:	4b2c      	ldr	r3, [pc, #176]	; (13328 <CLI_GetImuData+0x138>)
   13278:	685a      	ldr	r2, [r3, #4]
   1327a:	4b2c      	ldr	r3, [pc, #176]	; (1332c <CLI_GetImuData+0x13c>)
   1327c:	1c10      	adds	r0, r2, #0
   1327e:	4798      	blx	r3
   13280:	0004      	movs	r4, r0
   13282:	4b29      	ldr	r3, [pc, #164]	; (13328 <CLI_GetImuData+0x138>)
   13284:	689a      	ldr	r2, [r3, #8]
   13286:	4b29      	ldr	r3, [pc, #164]	; (1332c <CLI_GetImuData+0x13c>)
   13288:	1c10      	adds	r0, r2, #0
   1328a:	4798      	blx	r3
   1328c:	0003      	movs	r3, r0
   1328e:	4a28      	ldr	r2, [pc, #160]	; (13330 <CLI_GetImuData+0x140>)
   13290:	68b9      	ldr	r1, [r7, #8]
   13292:	68f8      	ldr	r0, [r7, #12]
   13294:	9301      	str	r3, [sp, #4]
   13296:	9400      	str	r4, [sp, #0]
   13298:	002b      	movs	r3, r5
   1329a:	4c26      	ldr	r4, [pc, #152]	; (13334 <CLI_GetImuData+0x144>)
   1329c:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   1329e:	4b22      	ldr	r3, [pc, #136]	; (13328 <CLI_GetImuData+0x138>)
   132a0:	681a      	ldr	r2, [r3, #0]
   132a2:	4b22      	ldr	r3, [pc, #136]	; (1332c <CLI_GetImuData+0x13c>)
   132a4:	1c10      	adds	r0, r2, #0
   132a6:	4798      	blx	r3
   132a8:	0003      	movs	r3, r0
   132aa:	b21a      	sxth	r2, r3
   132ac:	2314      	movs	r3, #20
   132ae:	18fb      	adds	r3, r7, r3
   132b0:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   132b2:	4b1d      	ldr	r3, [pc, #116]	; (13328 <CLI_GetImuData+0x138>)
   132b4:	685a      	ldr	r2, [r3, #4]
   132b6:	4b1d      	ldr	r3, [pc, #116]	; (1332c <CLI_GetImuData+0x13c>)
   132b8:	1c10      	adds	r0, r2, #0
   132ba:	4798      	blx	r3
   132bc:	0003      	movs	r3, r0
   132be:	b21a      	sxth	r2, r3
   132c0:	2314      	movs	r3, #20
   132c2:	18fb      	adds	r3, r7, r3
   132c4:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   132c6:	4b18      	ldr	r3, [pc, #96]	; (13328 <CLI_GetImuData+0x138>)
   132c8:	689a      	ldr	r2, [r3, #8]
   132ca:	4b18      	ldr	r3, [pc, #96]	; (1332c <CLI_GetImuData+0x13c>)
   132cc:	1c10      	adds	r0, r2, #0
   132ce:	4798      	blx	r3
   132d0:	0003      	movs	r3, r0
   132d2:	b21a      	sxth	r2, r3
   132d4:	2314      	movs	r3, #20
   132d6:	18fb      	adds	r3, r7, r3
   132d8:	809a      	strh	r2, [r3, #4]
   132da:	e014      	b.n	13306 <CLI_GetImuData+0x116>
		//WifiAddImuDataToQueue(&imuPacket);
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   132dc:	4a16      	ldr	r2, [pc, #88]	; (13338 <CLI_GetImuData+0x148>)
   132de:	68b9      	ldr	r1, [r7, #8]
   132e0:	68fb      	ldr	r3, [r7, #12]
   132e2:	0018      	movs	r0, r3
   132e4:	4b13      	ldr	r3, [pc, #76]	; (13334 <CLI_GetImuData+0x144>)
   132e6:	4798      	blx	r3
		imuPacket.xmg = -1;
   132e8:	2314      	movs	r3, #20
   132ea:	18fb      	adds	r3, r7, r3
   132ec:	2201      	movs	r2, #1
   132ee:	4252      	negs	r2, r2
   132f0:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   132f2:	2314      	movs	r3, #20
   132f4:	18fb      	adds	r3, r7, r3
   132f6:	2202      	movs	r2, #2
   132f8:	4252      	negs	r2, r2
   132fa:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   132fc:	2314      	movs	r3, #20
   132fe:	18fb      	adds	r3, r7, r3
   13300:	2203      	movs	r2, #3
   13302:	4252      	negs	r2, r2
   13304:	809a      	strh	r2, [r3, #4]
		//WifiAddImuDataToQueue(&imuPacket);
    }
    return pdFALSE;
   13306:	2300      	movs	r3, #0
}
   13308:	0018      	movs	r0, r3
   1330a:	46bd      	mov	sp, r7
   1330c:	b008      	add	sp, #32
   1330e:	bdb0      	pop	{r4, r5, r7, pc}
   13310:	00014ec9 	.word	0x00014ec9
   13314:	000148c5 	.word	0x000148c5
   13318:	2000041c 	.word	0x2000041c
   1331c:	0003489f 	.word	0x0003489f
   13320:	00014901 	.word	0x00014901
   13324:	00014155 	.word	0x00014155
   13328:	20000424 	.word	0x20000424
   1332c:	00032e45 	.word	0x00032e45
   13330:	00035e34 	.word	0x00035e34
   13334:	00034af9 	.word	0x00034af9
   13338:	00035e58 	.word	0x00035e58

0001333c <CLI_GetSHTC>:


BaseType_t CLI_GetSHTC(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   1333c:	b590      	push	{r4, r7, lr}
   1333e:	b087      	sub	sp, #28
   13340:	af02      	add	r7, sp, #8
   13342:	60f8      	str	r0, [r7, #12]
   13344:	60b9      	str	r1, [r7, #8]
   13346:	607a      	str	r2, [r7, #4]
	static int16_t ht[2];
	if( !shtc_get(ht) ){
   13348:	4b12      	ldr	r3, [pc, #72]	; (13394 <CLI_GetSHTC+0x58>)
   1334a:	0018      	movs	r0, r3
   1334c:	4b12      	ldr	r3, [pc, #72]	; (13398 <CLI_GetSHTC+0x5c>)
   1334e:	4798      	blx	r3
   13350:	0003      	movs	r3, r0
   13352:	001a      	movs	r2, r3
   13354:	2301      	movs	r3, #1
   13356:	4053      	eors	r3, r2
   13358:	b2db      	uxtb	r3, r3
   1335a:	2b00      	cmp	r3, #0
   1335c:	d007      	beq.n	1336e <CLI_GetSHTC+0x32>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "SHTC error!\r\n");
   1335e:	4a0f      	ldr	r2, [pc, #60]	; (1339c <CLI_GetSHTC+0x60>)
   13360:	68b9      	ldr	r1, [r7, #8]
   13362:	68fb      	ldr	r3, [r7, #12]
   13364:	0018      	movs	r0, r3
   13366:	4b0e      	ldr	r3, [pc, #56]	; (133a0 <CLI_GetSHTC+0x64>)
   13368:	4798      	blx	r3
		return pdFALSE;
   1336a:	2300      	movs	r3, #0
   1336c:	e00e      	b.n	1338c <CLI_GetSHTC+0x50>
	}
	
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "humidity = %d , temp = %d \r\n", (int)ht[0], (int)ht[1]);
   1336e:	4b09      	ldr	r3, [pc, #36]	; (13394 <CLI_GetSHTC+0x58>)
   13370:	2200      	movs	r2, #0
   13372:	5e9b      	ldrsh	r3, [r3, r2]
   13374:	001c      	movs	r4, r3
   13376:	4b07      	ldr	r3, [pc, #28]	; (13394 <CLI_GetSHTC+0x58>)
   13378:	2202      	movs	r2, #2
   1337a:	5e9b      	ldrsh	r3, [r3, r2]
   1337c:	4a09      	ldr	r2, [pc, #36]	; (133a4 <CLI_GetSHTC+0x68>)
   1337e:	68b9      	ldr	r1, [r7, #8]
   13380:	68f8      	ldr	r0, [r7, #12]
   13382:	9300      	str	r3, [sp, #0]
   13384:	0023      	movs	r3, r4
   13386:	4c06      	ldr	r4, [pc, #24]	; (133a0 <CLI_GetSHTC+0x64>)
   13388:	47a0      	blx	r4
	return pdFALSE;
   1338a:	2300      	movs	r3, #0
}
   1338c:	0018      	movs	r0, r3
   1338e:	46bd      	mov	sp, r7
   13390:	b005      	add	sp, #20
   13392:	bd90      	pop	{r4, r7, pc}
   13394:	20000430 	.word	0x20000430
   13398:	000155c5 	.word	0x000155c5
   1339c:	00035e80 	.word	0x00035e80
   133a0:	00034af9 	.word	0x00034af9
   133a4:	00035e90 	.word	0x00035e90

000133a8 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   133a8:	b590      	push	{r4, r7, lr}
   133aa:	b087      	sub	sp, #28
   133ac:	af00      	add	r7, sp, #0
   133ae:	60f8      	str	r0, [r7, #12]
   133b0:	60b9      	str	r1, [r7, #8]
   133b2:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   133b4:	2317      	movs	r3, #23
   133b6:	18fb      	adds	r3, r7, r3
   133b8:	221b      	movs	r2, #27
   133ba:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   133bc:	2317      	movs	r3, #23
   133be:	18fb      	adds	r3, r7, r3
   133c0:	781b      	ldrb	r3, [r3, #0]
   133c2:	4a08      	ldr	r2, [pc, #32]	; (133e4 <xCliClearTerminalScreen+0x3c>)
   133c4:	4808      	ldr	r0, [pc, #32]	; (133e8 <xCliClearTerminalScreen+0x40>)
   133c6:	210f      	movs	r1, #15
   133c8:	4c08      	ldr	r4, [pc, #32]	; (133ec <xCliClearTerminalScreen+0x44>)
   133ca:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   133cc:	4a06      	ldr	r2, [pc, #24]	; (133e8 <xCliClearTerminalScreen+0x40>)
   133ce:	68b9      	ldr	r1, [r7, #8]
   133d0:	68fb      	ldr	r3, [r7, #12]
   133d2:	0018      	movs	r0, r3
   133d4:	4b05      	ldr	r3, [pc, #20]	; (133ec <xCliClearTerminalScreen+0x44>)
   133d6:	4798      	blx	r3
    return pdFALSE;
   133d8:	2300      	movs	r3, #0
}
   133da:	0018      	movs	r0, r3
   133dc:	46bd      	mov	sp, r7
   133de:	b007      	add	sp, #28
   133e0:	bd90      	pop	{r4, r7, pc}
   133e2:	46c0      	nop			; (mov r8, r8)
   133e4:	00035eb0 	.word	0x00035eb0
   133e8:	20000334 	.word	0x20000334
   133ec:	00034af9 	.word	0x00034af9

000133f0 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   133f0:	b580      	push	{r7, lr}
   133f2:	b084      	sub	sp, #16
   133f4:	af00      	add	r7, sp, #0
   133f6:	60f8      	str	r0, [r7, #12]
   133f8:	60b9      	str	r1, [r7, #8]
   133fa:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   133fc:	2002      	movs	r0, #2
   133fe:	4b03      	ldr	r3, [pc, #12]	; (1340c <CLI_OTAU+0x1c>)
   13400:	4798      	blx	r3

    return pdFALSE;
   13402:	2300      	movs	r3, #0
}
   13404:	0018      	movs	r0, r3
   13406:	46bd      	mov	sp, r7
   13408:	b004      	add	sp, #16
   1340a:	bd80      	pop	{r7, pc}
   1340c:	0001752d 	.word	0x0001752d

00013410 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13410:	b580      	push	{r7, lr}
   13412:	b084      	sub	sp, #16
   13414:	af00      	add	r7, sp, #0
   13416:	60f8      	str	r0, [r7, #12]
   13418:	60b9      	str	r1, [r7, #8]
   1341a:	607a      	str	r2, [r7, #4]
    system_reset();
   1341c:	4b03      	ldr	r3, [pc, #12]	; (1342c <CLI_ResetDevice+0x1c>)
   1341e:	4798      	blx	r3
    return pdFALSE;
   13420:	2300      	movs	r3, #0
}
   13422:	0018      	movs	r0, r3
   13424:	46bd      	mov	sp, r7
   13426:	b004      	add	sp, #16
   13428:	bd80      	pop	{r7, pc}
   1342a:	46c0      	nop			; (mov r8, r8)
   1342c:	00012e5d 	.word	0x00012e5d

00013430 <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13430:	b590      	push	{r4, r7, lr}
   13432:	b097      	sub	sp, #92	; 0x5c
   13434:	af02      	add	r7, sp, #8
   13436:	60f8      	str	r0, [r7, #12]
   13438:	60b9      	str	r1, [r7, #8]
   1343a:	607a      	str	r2, [r7, #4]
    int8_t  *pcParameter1, *pcParameter2, *pcParameter3, *pcParameter4, *pcParameter5;
    int seesaw_num, R, G, B, Keynum;
    BaseType_t xParameter1StringLength, xParameter2StringLength, xParameter3StringLength, xParameter4StringLength, xParameter5StringLength;

    pcParameter1 = FreeRTOS_CLIGetParameter( pcCommandString,
   1343c:	2324      	movs	r3, #36	; 0x24
   1343e:	18fa      	adds	r2, r7, r3
   13440:	687b      	ldr	r3, [r7, #4]
   13442:	2101      	movs	r1, #1
   13444:	0018      	movs	r0, r3
   13446:	4b6a      	ldr	r3, [pc, #424]	; (135f0 <CLI_NeotrellisSetLed+0x1c0>)
   13448:	4798      	blx	r3
   1344a:	0003      	movs	r3, r0
   1344c:	64bb      	str	r3, [r7, #72]	; 0x48
    1,
    &xParameter1StringLength);

    pcParameter2 = FreeRTOS_CLIGetParameter( pcCommandString,
   1344e:	2320      	movs	r3, #32
   13450:	18fa      	adds	r2, r7, r3
   13452:	687b      	ldr	r3, [r7, #4]
   13454:	2102      	movs	r1, #2
   13456:	0018      	movs	r0, r3
   13458:	4b65      	ldr	r3, [pc, #404]	; (135f0 <CLI_NeotrellisSetLed+0x1c0>)
   1345a:	4798      	blx	r3
   1345c:	0003      	movs	r3, r0
   1345e:	647b      	str	r3, [r7, #68]	; 0x44
    2,
    &xParameter2StringLength );
    
    pcParameter3 = FreeRTOS_CLIGetParameter( pcCommandString,
   13460:	231c      	movs	r3, #28
   13462:	18fa      	adds	r2, r7, r3
   13464:	687b      	ldr	r3, [r7, #4]
   13466:	2103      	movs	r1, #3
   13468:	0018      	movs	r0, r3
   1346a:	4b61      	ldr	r3, [pc, #388]	; (135f0 <CLI_NeotrellisSetLed+0x1c0>)
   1346c:	4798      	blx	r3
   1346e:	0003      	movs	r3, r0
   13470:	643b      	str	r3, [r7, #64]	; 0x40
    3,
    &xParameter3StringLength );
    
    pcParameter4 = FreeRTOS_CLIGetParameter( pcCommandString,
   13472:	2318      	movs	r3, #24
   13474:	18fa      	adds	r2, r7, r3
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	2104      	movs	r1, #4
   1347a:	0018      	movs	r0, r3
   1347c:	4b5c      	ldr	r3, [pc, #368]	; (135f0 <CLI_NeotrellisSetLed+0x1c0>)
   1347e:	4798      	blx	r3
   13480:	0003      	movs	r3, r0
   13482:	63fb      	str	r3, [r7, #60]	; 0x3c
    4,
    &xParameter4StringLength );
	
	 pcParameter5 = FreeRTOS_CLIGetParameter( pcCommandString,
   13484:	2314      	movs	r3, #20
   13486:	18fa      	adds	r2, r7, r3
   13488:	687b      	ldr	r3, [r7, #4]
   1348a:	2105      	movs	r1, #5
   1348c:	0018      	movs	r0, r3
   1348e:	4b58      	ldr	r3, [pc, #352]	; (135f0 <CLI_NeotrellisSetLed+0x1c0>)
   13490:	4798      	blx	r3
   13492:	0003      	movs	r3, r0
   13494:	63bb      	str	r3, [r7, #56]	; 0x38
	 5,
	 &xParameter5StringLength );
    
    pcParameter1[ xParameter1StringLength ] = 0x00;
   13496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13498:	001a      	movs	r2, r3
   1349a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1349c:	189b      	adds	r3, r3, r2
   1349e:	2200      	movs	r2, #0
   134a0:	701a      	strb	r2, [r3, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
   134a2:	6a3b      	ldr	r3, [r7, #32]
   134a4:	001a      	movs	r2, r3
   134a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   134a8:	189b      	adds	r3, r3, r2
   134aa:	2200      	movs	r2, #0
   134ac:	701a      	strb	r2, [r3, #0]
    pcParameter3[ xParameter3StringLength ] = 0x00;
   134ae:	69fb      	ldr	r3, [r7, #28]
   134b0:	001a      	movs	r2, r3
   134b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   134b4:	189b      	adds	r3, r3, r2
   134b6:	2200      	movs	r2, #0
   134b8:	701a      	strb	r2, [r3, #0]
    pcParameter4[ xParameter4StringLength ] = 0x00;
   134ba:	69bb      	ldr	r3, [r7, #24]
   134bc:	001a      	movs	r2, r3
   134be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   134c0:	189b      	adds	r3, r3, r2
   134c2:	2200      	movs	r2, #0
   134c4:	701a      	strb	r2, [r3, #0]
	pcParameter5[ xParameter5StringLength ] = 0x00;
   134c6:	697b      	ldr	r3, [r7, #20]
   134c8:	001a      	movs	r2, r3
   134ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   134cc:	189b      	adds	r3, r3, r2
   134ce:	2200      	movs	r2, #0
   134d0:	701a      	strb	r2, [r3, #0]
    
	seesaw_num = atoi(pcParameter1); 
   134d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   134d4:	0018      	movs	r0, r3
   134d6:	4b47      	ldr	r3, [pc, #284]	; (135f4 <CLI_NeotrellisSetLed+0x1c4>)
   134d8:	4798      	blx	r3
   134da:	0003      	movs	r3, r0
   134dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    Keynum = atoi(pcParameter2);
   134de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   134e0:	0018      	movs	r0, r3
   134e2:	4b44      	ldr	r3, [pc, #272]	; (135f4 <CLI_NeotrellisSetLed+0x1c4>)
   134e4:	4798      	blx	r3
   134e6:	0003      	movs	r3, r0
   134e8:	637b      	str	r3, [r7, #52]	; 0x34
    R = atoi(pcParameter3);
   134ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   134ec:	0018      	movs	r0, r3
   134ee:	4b41      	ldr	r3, [pc, #260]	; (135f4 <CLI_NeotrellisSetLed+0x1c4>)
   134f0:	4798      	blx	r3
   134f2:	0003      	movs	r3, r0
   134f4:	633b      	str	r3, [r7, #48]	; 0x30
    G = atoi(pcParameter4);
   134f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   134f8:	0018      	movs	r0, r3
   134fa:	4b3e      	ldr	r3, [pc, #248]	; (135f4 <CLI_NeotrellisSetLed+0x1c4>)
   134fc:	4798      	blx	r3
   134fe:	0003      	movs	r3, r0
   13500:	62fb      	str	r3, [r7, #44]	; 0x2c
    B = atoi(pcParameter5);
   13502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13504:	0018      	movs	r0, r3
   13506:	4b3b      	ldr	r3, [pc, #236]	; (135f4 <CLI_NeotrellisSetLed+0x1c4>)
   13508:	4798      	blx	r3
   1350a:	0003      	movs	r3, r0
   1350c:	62bb      	str	r3, [r7, #40]	; 0x28
    
	
	if(seesaw_num == 1){
   1350e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13510:	2b01      	cmp	r3, #1
   13512:	d102      	bne.n	1351a <CLI_NeotrellisSetLed+0xea>
		seesaw_num = NEO_TRELLIS_ADDR_1;
   13514:	232e      	movs	r3, #46	; 0x2e
   13516:	64fb      	str	r3, [r7, #76]	; 0x4c
   13518:	e007      	b.n	1352a <CLI_NeotrellisSetLed+0xfa>
	}
	else if(seesaw_num == 2){
   1351a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1351c:	2b02      	cmp	r3, #2
   1351e:	d102      	bne.n	13526 <CLI_NeotrellisSetLed+0xf6>
		seesaw_num = NEO_TRELLIS_ADDR_2;
   13520:	232f      	movs	r3, #47	; 0x2f
   13522:	64fb      	str	r3, [r7, #76]	; 0x4c
   13524:	e001      	b.n	1352a <CLI_NeotrellisSetLed+0xfa>
	}
	else{
		return pdFALSE;
   13526:	2300      	movs	r3, #0
   13528:	e05d      	b.n	135e6 <CLI_NeotrellisSetLed+0x1b6>
	}
	
    //sanitize
    if(Keynum < 0 || Keynum > 15){
   1352a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1352c:	2b00      	cmp	r3, #0
   1352e:	db02      	blt.n	13536 <CLI_NeotrellisSetLed+0x106>
   13530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13532:	2b0f      	cmp	r3, #15
   13534:	dd07      	ble.n	13546 <CLI_NeotrellisSetLed+0x116>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "Keynum must be between 0 to 15\r\n");
   13536:	4a30      	ldr	r2, [pc, #192]	; (135f8 <CLI_NeotrellisSetLed+0x1c8>)
   13538:	68b9      	ldr	r1, [r7, #8]
   1353a:	68fb      	ldr	r3, [r7, #12]
   1353c:	0018      	movs	r0, r3
   1353e:	4b2f      	ldr	r3, [pc, #188]	; (135fc <CLI_NeotrellisSetLed+0x1cc>)
   13540:	4798      	blx	r3
	    return pdFALSE;
   13542:	2300      	movs	r3, #0
   13544:	e04f      	b.n	135e6 <CLI_NeotrellisSetLed+0x1b6>
    }
    
    if (R < 0 || R > 255){
   13546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13548:	2b00      	cmp	r3, #0
   1354a:	db02      	blt.n	13552 <CLI_NeotrellisSetLed+0x122>
   1354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1354e:	2bff      	cmp	r3, #255	; 0xff
   13550:	dd07      	ble.n	13562 <CLI_NeotrellisSetLed+0x132>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "Red must be between 0 and 255\r\n");
   13552:	4a2b      	ldr	r2, [pc, #172]	; (13600 <CLI_NeotrellisSetLed+0x1d0>)
   13554:	68b9      	ldr	r1, [r7, #8]
   13556:	68fb      	ldr	r3, [r7, #12]
   13558:	0018      	movs	r0, r3
   1355a:	4b28      	ldr	r3, [pc, #160]	; (135fc <CLI_NeotrellisSetLed+0x1cc>)
   1355c:	4798      	blx	r3
	    return pdFALSE;
   1355e:	2300      	movs	r3, #0
   13560:	e041      	b.n	135e6 <CLI_NeotrellisSetLed+0x1b6>
    }
    
    if (G < 0 || G > 255){
   13562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13564:	2b00      	cmp	r3, #0
   13566:	db02      	blt.n	1356e <CLI_NeotrellisSetLed+0x13e>
   13568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1356a:	2bff      	cmp	r3, #255	; 0xff
   1356c:	dd07      	ble.n	1357e <CLI_NeotrellisSetLed+0x14e>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "Green must be between 0 and 255\r\n");
   1356e:	4a25      	ldr	r2, [pc, #148]	; (13604 <CLI_NeotrellisSetLed+0x1d4>)
   13570:	68b9      	ldr	r1, [r7, #8]
   13572:	68fb      	ldr	r3, [r7, #12]
   13574:	0018      	movs	r0, r3
   13576:	4b21      	ldr	r3, [pc, #132]	; (135fc <CLI_NeotrellisSetLed+0x1cc>)
   13578:	4798      	blx	r3
	    return pdFALSE;
   1357a:	2300      	movs	r3, #0
   1357c:	e033      	b.n	135e6 <CLI_NeotrellisSetLed+0x1b6>
    }
    
    if (B < 0 || B > 255){
   1357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13580:	2b00      	cmp	r3, #0
   13582:	db02      	blt.n	1358a <CLI_NeotrellisSetLed+0x15a>
   13584:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13586:	2bff      	cmp	r3, #255	; 0xff
   13588:	dd07      	ble.n	1359a <CLI_NeotrellisSetLed+0x16a>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "Blue must be between 0 and 255\r\n");
   1358a:	4a1f      	ldr	r2, [pc, #124]	; (13608 <CLI_NeotrellisSetLed+0x1d8>)
   1358c:	68b9      	ldr	r1, [r7, #8]
   1358e:	68fb      	ldr	r3, [r7, #12]
   13590:	0018      	movs	r0, r3
   13592:	4b1a      	ldr	r3, [pc, #104]	; (135fc <CLI_NeotrellisSetLed+0x1cc>)
   13594:	4798      	blx	r3
	    return pdFALSE;
   13596:	2300      	movs	r3, #0
   13598:	e025      	b.n	135e6 <CLI_NeotrellisSetLed+0x1b6>
    }
    
    if (SeesawSetLed(seesaw_num, Keynum, R, G, B)){
   1359a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1359c:	b2d8      	uxtb	r0, r3
   1359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   135a0:	b2d9      	uxtb	r1, r3
   135a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   135a4:	b2da      	uxtb	r2, r3
   135a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   135a8:	b2dc      	uxtb	r4, r3
   135aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   135ac:	b2db      	uxtb	r3, r3
   135ae:	9300      	str	r3, [sp, #0]
   135b0:	0023      	movs	r3, r4
   135b2:	4c16      	ldr	r4, [pc, #88]	; (1360c <CLI_NeotrellisSetLed+0x1dc>)
   135b4:	47a0      	blx	r4
   135b6:	1e03      	subs	r3, r0, #0
   135b8:	d007      	beq.n	135ca <CLI_NeotrellisSetLed+0x19a>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "unexpected I2C error\r\n");
   135ba:	4a15      	ldr	r2, [pc, #84]	; (13610 <CLI_NeotrellisSetLed+0x1e0>)
   135bc:	68b9      	ldr	r1, [r7, #8]
   135be:	68fb      	ldr	r3, [r7, #12]
   135c0:	0018      	movs	r0, r3
   135c2:	4b0e      	ldr	r3, [pc, #56]	; (135fc <CLI_NeotrellisSetLed+0x1cc>)
   135c4:	4798      	blx	r3
	    return pdFALSE;
   135c6:	2300      	movs	r3, #0
   135c8:	e00d      	b.n	135e6 <CLI_NeotrellisSetLed+0x1b6>
    }
    
    if(SeesawOrderLedUpdate(seesaw_num)){
   135ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   135cc:	b2db      	uxtb	r3, r3
   135ce:	0018      	movs	r0, r3
   135d0:	4b10      	ldr	r3, [pc, #64]	; (13614 <CLI_NeotrellisSetLed+0x1e4>)
   135d2:	4798      	blx	r3
   135d4:	1e03      	subs	r3, r0, #0
   135d6:	d005      	beq.n	135e4 <CLI_NeotrellisSetLed+0x1b4>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "unexpected I2C error\r\n");
   135d8:	4a0d      	ldr	r2, [pc, #52]	; (13610 <CLI_NeotrellisSetLed+0x1e0>)
   135da:	68b9      	ldr	r1, [r7, #8]
   135dc:	68fb      	ldr	r3, [r7, #12]
   135de:	0018      	movs	r0, r3
   135e0:	4b06      	ldr	r3, [pc, #24]	; (135fc <CLI_NeotrellisSetLed+0x1cc>)
   135e2:	4798      	blx	r3
    }

    return pdFALSE;
   135e4:	2300      	movs	r3, #0
}
   135e6:	0018      	movs	r0, r3
   135e8:	46bd      	mov	sp, r7
   135ea:	b015      	add	sp, #84	; 0x54
   135ec:	bd90      	pop	{r4, r7, pc}
   135ee:	46c0      	nop			; (mov r8, r8)
   135f0:	00018201 	.word	0x00018201
   135f4:	000347ed 	.word	0x000347ed
   135f8:	00035eb8 	.word	0x00035eb8
   135fc:	00034af9 	.word	0x00034af9
   13600:	00035edc 	.word	0x00035edc
   13604:	00035efc 	.word	0x00035efc
   13608:	00035f20 	.word	0x00035f20
   1360c:	000152b5 	.word	0x000152b5
   13610:	00035f44 	.word	0x00035f44
   13614:	00015385 	.word	0x00015385

00013618 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13618:	b590      	push	{r4, r7, lr}
   1361a:	b08f      	sub	sp, #60	; 0x3c
   1361c:	af00      	add	r7, sp, #0
   1361e:	60f8      	str	r0, [r7, #12]
   13620:	60b9      	str	r1, [r7, #8]
   13622:	607a      	str	r2, [r7, #4]

  I2C_Data i2cOled; 
        uint8_t address;
  //Send 0 command byte
  uint8_t dataOut[2] = {0,0};
   13624:	2318      	movs	r3, #24
   13626:	18fb      	adds	r3, r7, r3
   13628:	2200      	movs	r2, #0
   1362a:	701a      	strb	r2, [r3, #0]
   1362c:	2318      	movs	r3, #24
   1362e:	18fb      	adds	r3, r7, r3
   13630:	2200      	movs	r2, #0
   13632:	705a      	strb	r2, [r3, #1]
  uint8_t dataIn[2];
  dataOut[0] = 0;
   13634:	2318      	movs	r3, #24
   13636:	18fb      	adds	r3, r7, r3
   13638:	2200      	movs	r2, #0
   1363a:	701a      	strb	r2, [r3, #0]
  dataOut[1] = 0;
   1363c:	2318      	movs	r3, #24
   1363e:	18fb      	adds	r3, r7, r3
   13640:	2200      	movs	r2, #0
   13642:	705a      	strb	r2, [r3, #1]
  i2cOled.address = 0;
   13644:	231c      	movs	r3, #28
   13646:	18fb      	adds	r3, r7, r3
   13648:	2200      	movs	r2, #0
   1364a:	701a      	strb	r2, [r3, #0]
  i2cOled.msgIn = (uint8_t*) &dataIn[0];
   1364c:	231c      	movs	r3, #28
   1364e:	18fb      	adds	r3, r7, r3
   13650:	2214      	movs	r2, #20
   13652:	18ba      	adds	r2, r7, r2
   13654:	609a      	str	r2, [r3, #8]
  i2cOled.lenOut = 1;
   13656:	231c      	movs	r3, #28
   13658:	18fb      	adds	r3, r7, r3
   1365a:	2201      	movs	r2, #1
   1365c:	81da      	strh	r2, [r3, #14]
  i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   1365e:	231c      	movs	r3, #28
   13660:	18fb      	adds	r3, r7, r3
   13662:	2218      	movs	r2, #24
   13664:	18ba      	adds	r2, r7, r2
   13666:	605a      	str	r2, [r3, #4]
  i2cOled.lenIn = 1;
   13668:	231c      	movs	r3, #28
   1366a:	18fb      	adds	r3, r7, r3
   1366c:	2201      	movs	r2, #1
   1366e:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   13670:	4b2a      	ldr	r3, [pc, #168]	; (1371c <CLI_i2cScan+0x104>)
   13672:	0018      	movs	r0, r3
   13674:	4b2a      	ldr	r3, [pc, #168]	; (13720 <CLI_i2cScan+0x108>)
   13676:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13678:	2300      	movs	r3, #0
   1367a:	637b      	str	r3, [r7, #52]	; 0x34
   1367c:	e042      	b.n	13704 <CLI_i2cScan+0xec>
            {
    snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   1367e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13680:	4a28      	ldr	r2, [pc, #160]	; (13724 <CLI_i2cScan+0x10c>)
   13682:	4829      	ldr	r0, [pc, #164]	; (13728 <CLI_i2cScan+0x110>)
   13684:	210f      	movs	r1, #15
   13686:	4c29      	ldr	r4, [pc, #164]	; (1372c <CLI_i2cScan+0x114>)
   13688:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   1368a:	4b27      	ldr	r3, [pc, #156]	; (13728 <CLI_i2cScan+0x110>)
   1368c:	0018      	movs	r0, r3
   1368e:	4b24      	ldr	r3, [pc, #144]	; (13720 <CLI_i2cScan+0x108>)
   13690:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   13692:	2300      	movs	r3, #0
   13694:	633b      	str	r3, [r7, #48]	; 0x30
   13696:	e02b      	b.n	136f0 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   13698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1369a:	b2da      	uxtb	r2, r3
   1369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1369e:	b2db      	uxtb	r3, r3
   136a0:	18d3      	adds	r3, r2, r3
   136a2:	b2da      	uxtb	r2, r3
   136a4:	231c      	movs	r3, #28
   136a6:	18fb      	adds	r3, r7, r3
   136a8:	701a      	strb	r2, [r3, #0]

                     
                    int32_t ret = I2cPingAddressWait(&i2cOled, 100, 100);
   136aa:	231c      	movs	r3, #28
   136ac:	18fb      	adds	r3, r7, r3
   136ae:	2264      	movs	r2, #100	; 0x64
   136b0:	2164      	movs	r1, #100	; 0x64
   136b2:	0018      	movs	r0, r3
   136b4:	4b1e      	ldr	r3, [pc, #120]	; (13730 <CLI_i2cScan+0x118>)
   136b6:	4798      	blx	r3
   136b8:	0003      	movs	r3, r0
   136ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   136bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   136be:	2b00      	cmp	r3, #0
   136c0:	d10c      	bne.n	136dc <CLI_i2cScan+0xc4>
                    {
      snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   136c2:	231c      	movs	r3, #28
   136c4:	18fb      	adds	r3, r7, r3
   136c6:	781b      	ldrb	r3, [r3, #0]
   136c8:	4a1a      	ldr	r2, [pc, #104]	; (13734 <CLI_i2cScan+0x11c>)
   136ca:	4817      	ldr	r0, [pc, #92]	; (13728 <CLI_i2cScan+0x110>)
   136cc:	210f      	movs	r1, #15
   136ce:	4c17      	ldr	r4, [pc, #92]	; (1372c <CLI_i2cScan+0x114>)
   136d0:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   136d2:	4b15      	ldr	r3, [pc, #84]	; (13728 <CLI_i2cScan+0x110>)
   136d4:	0018      	movs	r0, r3
   136d6:	4b12      	ldr	r3, [pc, #72]	; (13720 <CLI_i2cScan+0x108>)
   136d8:	4798      	blx	r3
   136da:	e006      	b.n	136ea <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   136dc:	4b12      	ldr	r3, [pc, #72]	; (13728 <CLI_i2cScan+0x110>)
   136de:	4a16      	ldr	r2, [pc, #88]	; (13738 <CLI_i2cScan+0x120>)
   136e0:	601a      	str	r2, [r3, #0]
      SerialConsoleWriteString(bufCli);
   136e2:	4b11      	ldr	r3, [pc, #68]	; (13728 <CLI_i2cScan+0x110>)
   136e4:	0018      	movs	r0, r3
   136e6:	4b0e      	ldr	r3, [pc, #56]	; (13720 <CLI_i2cScan+0x108>)
   136e8:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   136ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   136ec:	3301      	adds	r3, #1
   136ee:	633b      	str	r3, [r7, #48]	; 0x30
   136f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   136f2:	2b0f      	cmp	r3, #15
   136f4:	ddd0      	ble.n	13698 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   136f6:	4b11      	ldr	r3, [pc, #68]	; (1373c <CLI_i2cScan+0x124>)
   136f8:	0018      	movs	r0, r3
   136fa:	4b09      	ldr	r3, [pc, #36]	; (13720 <CLI_i2cScan+0x108>)
   136fc:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   136fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13700:	3310      	adds	r3, #16
   13702:	637b      	str	r3, [r7, #52]	; 0x34
   13704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13706:	2b7f      	cmp	r3, #127	; 0x7f
   13708:	ddb9      	ble.n	1367e <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   1370a:	4b0c      	ldr	r3, [pc, #48]	; (1373c <CLI_i2cScan+0x124>)
   1370c:	0018      	movs	r0, r3
   1370e:	4b04      	ldr	r3, [pc, #16]	; (13720 <CLI_i2cScan+0x108>)
   13710:	4798      	blx	r3
   return pdFALSE;
   13712:	2300      	movs	r3, #0

   13714:	0018      	movs	r0, r3
   13716:	46bd      	mov	sp, r7
   13718:	b00f      	add	sp, #60	; 0x3c
   1371a:	bd90      	pop	{r4, r7, pc}
   1371c:	00035f5c 	.word	0x00035f5c
   13720:	0001e045 	.word	0x0001e045
   13724:	00035f90 	.word	0x00035f90
   13728:	20000334 	.word	0x20000334
   1372c:	00034af9 	.word	0x00034af9
   13730:	00013ffd 	.word	0x00013ffd
   13734:	00035f98 	.word	0x00035f98
   13738:	00202058 	.word	0x00202058
   1373c:	00035e20 	.word	0x00035e20

00013740 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   13740:	b580      	push	{r7, lr}
   13742:	b082      	sub	sp, #8
   13744:	af00      	add	r7, sp, #0
   13746:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   13748:	4b0b      	ldr	r3, [pc, #44]	; (13778 <vControlHandlerTask+0x38>)
   1374a:	0018      	movs	r0, r3
   1374c:	4b0b      	ldr	r3, [pc, #44]	; (1377c <vControlHandlerTask+0x3c>)
   1374e:	4798      	blx	r3

    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   13750:	4b0b      	ldr	r3, [pc, #44]	; (13780 <vControlHandlerTask+0x40>)
   13752:	2200      	movs	r2, #0
   13754:	701a      	strb	r2, [r3, #0]
	
    while (1) {
        switch (controlState) {
   13756:	4b0a      	ldr	r3, [pc, #40]	; (13780 <vControlHandlerTask+0x40>)
   13758:	781b      	ldrb	r3, [r3, #0]
   1375a:	2b00      	cmp	r3, #0
   1375c:	d005      	beq.n	1376a <vControlHandlerTask+0x2a>
   1375e:	2b01      	cmp	r3, #1
   13760:	d005      	beq.n	1376e <vControlHandlerTask+0x2e>
                break;
            }


            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   13762:	4b07      	ldr	r3, [pc, #28]	; (13780 <vControlHandlerTask+0x40>)
   13764:	2200      	movs	r2, #0
   13766:	701a      	strb	r2, [r3, #0]
                break;
   13768:	e002      	b.n	13770 <vControlHandlerTask+0x30>
                break;
   1376a:	46c0      	nop			; (mov r8, r8)
   1376c:	e000      	b.n	13770 <vControlHandlerTask+0x30>
                break;
   1376e:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   13770:	2028      	movs	r0, #40	; 0x28
   13772:	4b04      	ldr	r3, [pc, #16]	; (13784 <vControlHandlerTask+0x44>)
   13774:	4798      	blx	r3
        switch (controlState) {
   13776:	e7ee      	b.n	13756 <vControlHandlerTask+0x16>
   13778:	00036010 	.word	0x00036010
   1377c:	0001e045 	.word	0x0001e045
   13780:	20004384 	.word	0x20004384
   13784:	0001c3f1 	.word	0x0001c3f1

00013788 <ControlSetGame>:
}



void ControlSetGame(uint8_t *shiparr_in,uint8_t ship_num_in)
{
   13788:	b590      	push	{r4, r7, lr}
   1378a:	b085      	sub	sp, #20
   1378c:	af02      	add	r7, sp, #8
   1378e:	6078      	str	r0, [r7, #4]
   13790:	000a      	movs	r2, r1
   13792:	1cfb      	adds	r3, r7, #3
   13794:	701a      	strb	r2, [r3, #0]
	memcpy (ship_arr, shiparr_in, ship_num_in * sizeof (uint8_t));
   13796:	1cfb      	adds	r3, r7, #3
   13798:	781a      	ldrb	r2, [r3, #0]
   1379a:	6879      	ldr	r1, [r7, #4]
   1379c:	4b13      	ldr	r3, [pc, #76]	; (137ec <ControlSetGame+0x64>)
   1379e:	0018      	movs	r0, r3
   137a0:	4b13      	ldr	r3, [pc, #76]	; (137f0 <ControlSetGame+0x68>)
   137a2:	4798      	blx	r3
	ship_num = ship_num_in;
   137a4:	4b13      	ldr	r3, [pc, #76]	; (137f4 <ControlSetGame+0x6c>)
   137a6:	1cfa      	adds	r2, r7, #3
   137a8:	7812      	ldrb	r2, [r2, #0]
   137aa:	701a      	strb	r2, [r3, #0]
	placement_status = false;
   137ac:	4b12      	ldr	r3, [pc, #72]	; (137f8 <ControlSetGame+0x70>)
   137ae:	2200      	movs	r2, #0
   137b0:	701a      	strb	r2, [r3, #0]
	controlState = CONTROL_WAIT_FOR_PLACE;
   137b2:	4b12      	ldr	r3, [pc, #72]	; (137fc <ControlSetGame+0x74>)
   137b4:	2201      	movs	r2, #1
   137b6:	701a      	strb	r2, [r3, #0]
	LogMessage(LOG_DEBUG_LVL, "\r\nship_arr %d %d %d\r\n", ship_arr[0], ship_arr[1], ship_arr[2]);
   137b8:	4b0c      	ldr	r3, [pc, #48]	; (137ec <ControlSetGame+0x64>)
   137ba:	781b      	ldrb	r3, [r3, #0]
   137bc:	001a      	movs	r2, r3
   137be:	4b0b      	ldr	r3, [pc, #44]	; (137ec <ControlSetGame+0x64>)
   137c0:	785b      	ldrb	r3, [r3, #1]
   137c2:	0018      	movs	r0, r3
   137c4:	4b09      	ldr	r3, [pc, #36]	; (137ec <ControlSetGame+0x64>)
   137c6:	789b      	ldrb	r3, [r3, #2]
   137c8:	490d      	ldr	r1, [pc, #52]	; (13800 <ControlSetGame+0x78>)
   137ca:	9300      	str	r3, [sp, #0]
   137cc:	0003      	movs	r3, r0
   137ce:	2001      	movs	r0, #1
   137d0:	4c0c      	ldr	r4, [pc, #48]	; (13804 <ControlSetGame+0x7c>)
   137d2:	47a0      	blx	r4
	UiPlaceInit(ship_arr, ship_num);
   137d4:	4b07      	ldr	r3, [pc, #28]	; (137f4 <ControlSetGame+0x6c>)
   137d6:	781a      	ldrb	r2, [r3, #0]
   137d8:	4b04      	ldr	r3, [pc, #16]	; (137ec <ControlSetGame+0x64>)
   137da:	0011      	movs	r1, r2
   137dc:	0018      	movs	r0, r3
   137de:	4b0a      	ldr	r3, [pc, #40]	; (13808 <ControlSetGame+0x80>)
   137e0:	4798      	blx	r3
}
   137e2:	46c0      	nop			; (mov r8, r8)
   137e4:	46bd      	mov	sp, r7
   137e6:	b003      	add	sp, #12
   137e8:	bd90      	pop	{r4, r7, pc}
   137ea:	46c0      	nop			; (mov r8, r8)
   137ec:	20004388 	.word	0x20004388
   137f0:	00034869 	.word	0x00034869
   137f4:	20004385 	.word	0x20004385
   137f8:	20000434 	.word	0x20000434
   137fc:	20004384 	.word	0x20004384
   13800:	00036030 	.word	0x00036030
   13804:	0001e131 	.word	0x0001e131
   13808:	00015bc5 	.word	0x00015bc5

0001380c <system_interrupt_enable>:
{
   1380c:	b580      	push	{r7, lr}
   1380e:	b082      	sub	sp, #8
   13810:	af00      	add	r7, sp, #0
   13812:	0002      	movs	r2, r0
   13814:	1dfb      	adds	r3, r7, #7
   13816:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13818:	4b06      	ldr	r3, [pc, #24]	; (13834 <system_interrupt_enable+0x28>)
   1381a:	1dfa      	adds	r2, r7, #7
   1381c:	7812      	ldrb	r2, [r2, #0]
   1381e:	0011      	movs	r1, r2
   13820:	221f      	movs	r2, #31
   13822:	400a      	ands	r2, r1
   13824:	2101      	movs	r1, #1
   13826:	4091      	lsls	r1, r2
   13828:	000a      	movs	r2, r1
   1382a:	601a      	str	r2, [r3, #0]
}
   1382c:	46c0      	nop			; (mov r8, r8)
   1382e:	46bd      	mov	sp, r7
   13830:	b002      	add	sp, #8
   13832:	bd80      	pop	{r7, pc}
   13834:	e000e100 	.word	0xe000e100

00013838 <i2c_master_is_syncing>:
{
   13838:	b580      	push	{r7, lr}
   1383a:	b084      	sub	sp, #16
   1383c:	af00      	add	r7, sp, #0
   1383e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13840:	687b      	ldr	r3, [r7, #4]
   13842:	681b      	ldr	r3, [r3, #0]
   13844:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   13846:	68fb      	ldr	r3, [r7, #12]
   13848:	69db      	ldr	r3, [r3, #28]
   1384a:	2207      	movs	r2, #7
   1384c:	4013      	ands	r3, r2
   1384e:	1e5a      	subs	r2, r3, #1
   13850:	4193      	sbcs	r3, r2
   13852:	b2db      	uxtb	r3, r3
}
   13854:	0018      	movs	r0, r3
   13856:	46bd      	mov	sp, r7
   13858:	b004      	add	sp, #16
   1385a:	bd80      	pop	{r7, pc}

0001385c <_i2c_master_wait_for_sync>:
{
   1385c:	b580      	push	{r7, lr}
   1385e:	b082      	sub	sp, #8
   13860:	af00      	add	r7, sp, #0
   13862:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   13864:	46c0      	nop			; (mov r8, r8)
   13866:	687b      	ldr	r3, [r7, #4]
   13868:	0018      	movs	r0, r3
   1386a:	4b04      	ldr	r3, [pc, #16]	; (1387c <_i2c_master_wait_for_sync+0x20>)
   1386c:	4798      	blx	r3
   1386e:	1e03      	subs	r3, r0, #0
   13870:	d1f9      	bne.n	13866 <_i2c_master_wait_for_sync+0xa>
}
   13872:	46c0      	nop			; (mov r8, r8)
   13874:	46bd      	mov	sp, r7
   13876:	b002      	add	sp, #8
   13878:	bd80      	pop	{r7, pc}
   1387a:	46c0      	nop			; (mov r8, r8)
   1387c:	00013839 	.word	0x00013839

00013880 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   13880:	b580      	push	{r7, lr}
   13882:	b082      	sub	sp, #8
   13884:	af00      	add	r7, sp, #0
   13886:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   13888:	687b      	ldr	r3, [r7, #4]
   1388a:	2264      	movs	r2, #100	; 0x64
   1388c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   1388e:	687b      	ldr	r3, [r7, #4]
   13890:	4a1b      	ldr	r2, [pc, #108]	; (13900 <i2c_master_get_config_defaults+0x80>)
   13892:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   13894:	687b      	ldr	r3, [r7, #4]
   13896:	2200      	movs	r2, #0
   13898:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   1389a:	687b      	ldr	r3, [r7, #4]
   1389c:	2200      	movs	r2, #0
   1389e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   138a0:	687b      	ldr	r3, [r7, #4]
   138a2:	2200      	movs	r2, #0
   138a4:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   138a6:	687b      	ldr	r3, [r7, #4]
   138a8:	2280      	movs	r2, #128	; 0x80
   138aa:	0392      	lsls	r2, r2, #14
   138ac:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   138ae:	687b      	ldr	r3, [r7, #4]
   138b0:	2201      	movs	r2, #1
   138b2:	4252      	negs	r2, r2
   138b4:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   138b6:	687b      	ldr	r3, [r7, #4]
   138b8:	2201      	movs	r2, #1
   138ba:	4252      	negs	r2, r2
   138bc:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   138be:	687b      	ldr	r3, [r7, #4]
   138c0:	2200      	movs	r2, #0
   138c2:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   138c4:	687b      	ldr	r3, [r7, #4]
   138c6:	2200      	movs	r2, #0
   138c8:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   138ca:	687b      	ldr	r3, [r7, #4]
   138cc:	2224      	movs	r2, #36	; 0x24
   138ce:	2100      	movs	r1, #0
   138d0:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   138d2:	687b      	ldr	r3, [r7, #4]
   138d4:	2200      	movs	r2, #0
   138d6:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   138d8:	687b      	ldr	r3, [r7, #4]
   138da:	222c      	movs	r2, #44	; 0x2c
   138dc:	2100      	movs	r1, #0
   138de:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   138e0:	687b      	ldr	r3, [r7, #4]
   138e2:	222d      	movs	r2, #45	; 0x2d
   138e4:	2100      	movs	r1, #0
   138e6:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   138e8:	687b      	ldr	r3, [r7, #4]
   138ea:	222e      	movs	r2, #46	; 0x2e
   138ec:	2100      	movs	r1, #0
   138ee:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   138f0:	687b      	ldr	r3, [r7, #4]
   138f2:	22d7      	movs	r2, #215	; 0xd7
   138f4:	861a      	strh	r2, [r3, #48]	; 0x30
}
   138f6:	46c0      	nop			; (mov r8, r8)
   138f8:	46bd      	mov	sp, r7
   138fa:	b002      	add	sp, #8
   138fc:	bd80      	pop	{r7, pc}
   138fe:	46c0      	nop			; (mov r8, r8)
   13900:	00000d48 	.word	0x00000d48

00013904 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   13904:	b580      	push	{r7, lr}
   13906:	b084      	sub	sp, #16
   13908:	af00      	add	r7, sp, #0
   1390a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1390c:	687b      	ldr	r3, [r7, #4]
   1390e:	681b      	ldr	r3, [r3, #0]
   13910:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   13912:	2300      	movs	r3, #0
   13914:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   13916:	687b      	ldr	r3, [r7, #4]
   13918:	0018      	movs	r0, r3
   1391a:	4b14      	ldr	r3, [pc, #80]	; (1396c <i2c_master_enable+0x68>)
   1391c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   1391e:	68bb      	ldr	r3, [r7, #8]
   13920:	681b      	ldr	r3, [r3, #0]
   13922:	2202      	movs	r2, #2
   13924:	431a      	orrs	r2, r3
   13926:	68bb      	ldr	r3, [r7, #8]
   13928:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1392a:	687b      	ldr	r3, [r7, #4]
   1392c:	681b      	ldr	r3, [r3, #0]
   1392e:	0018      	movs	r0, r3
   13930:	4b0f      	ldr	r3, [pc, #60]	; (13970 <i2c_master_enable+0x6c>)
   13932:	4798      	blx	r3
   13934:	0003      	movs	r3, r0
   13936:	0018      	movs	r0, r3
   13938:	4b0e      	ldr	r3, [pc, #56]	; (13974 <i2c_master_enable+0x70>)
   1393a:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   1393c:	e00c      	b.n	13958 <i2c_master_enable+0x54>
		timeout_counter++;
   1393e:	68fb      	ldr	r3, [r7, #12]
   13940:	3301      	adds	r3, #1
   13942:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   13944:	687b      	ldr	r3, [r7, #4]
   13946:	88db      	ldrh	r3, [r3, #6]
   13948:	001a      	movs	r2, r3
   1394a:	68fb      	ldr	r3, [r7, #12]
   1394c:	429a      	cmp	r2, r3
   1394e:	d803      	bhi.n	13958 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   13950:	68bb      	ldr	r3, [r7, #8]
   13952:	2210      	movs	r2, #16
   13954:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   13956:	e006      	b.n	13966 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   13958:	68bb      	ldr	r3, [r7, #8]
   1395a:	8b5b      	ldrh	r3, [r3, #26]
   1395c:	b29b      	uxth	r3, r3
   1395e:	001a      	movs	r2, r3
   13960:	2310      	movs	r3, #16
   13962:	4013      	ands	r3, r2
   13964:	d0eb      	beq.n	1393e <i2c_master_enable+0x3a>
		}
	}
}
   13966:	46bd      	mov	sp, r7
   13968:	b004      	add	sp, #16
   1396a:	bd80      	pop	{r7, pc}
   1396c:	0001385d 	.word	0x0001385d
   13970:	0002759d 	.word	0x0002759d
   13974:	0001380d 	.word	0x0001380d

00013978 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   13978:	b580      	push	{r7, lr}
   1397a:	b082      	sub	sp, #8
   1397c:	af00      	add	r7, sp, #0
   1397e:	6078      	str	r0, [r7, #4]
   13980:	000a      	movs	r2, r1
   13982:	1cfb      	adds	r3, r7, #3
   13984:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   13986:	687b      	ldr	r3, [r7, #4]
   13988:	7e5b      	ldrb	r3, [r3, #25]
   1398a:	b2db      	uxtb	r3, r3
   1398c:	b25a      	sxtb	r2, r3
   1398e:	1cfb      	adds	r3, r7, #3
   13990:	781b      	ldrb	r3, [r3, #0]
   13992:	2101      	movs	r1, #1
   13994:	4099      	lsls	r1, r3
   13996:	000b      	movs	r3, r1
   13998:	b25b      	sxtb	r3, r3
   1399a:	4313      	orrs	r3, r2
   1399c:	b25b      	sxtb	r3, r3
   1399e:	b2da      	uxtb	r2, r3
   139a0:	687b      	ldr	r3, [r7, #4]
   139a2:	765a      	strb	r2, [r3, #25]
}
   139a4:	46c0      	nop			; (mov r8, r8)
   139a6:	46bd      	mov	sp, r7
   139a8:	b002      	add	sp, #8
   139aa:	bd80      	pop	{r7, pc}

000139ac <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   139ac:	b590      	push	{r4, r7, lr}
   139ae:	b091      	sub	sp, #68	; 0x44
   139b0:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   139b2:	2300      	movs	r3, #0
   139b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   139b6:	233a      	movs	r3, #58	; 0x3a
   139b8:	18fb      	adds	r3, r7, r3
   139ba:	2200      	movs	r2, #0
   139bc:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   139be:	1d3b      	adds	r3, r7, #4
   139c0:	0018      	movs	r0, r3
   139c2:	4b21      	ldr	r3, [pc, #132]	; (13a48 <I2cDriverConfigureSensorBus+0x9c>)
   139c4:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   139c6:	1d3b      	adds	r3, r7, #4
   139c8:	4a20      	ldr	r2, [pc, #128]	; (13a4c <I2cDriverConfigureSensorBus+0xa0>)
   139ca:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   139cc:	1d3b      	adds	r3, r7, #4
   139ce:	4a20      	ldr	r2, [pc, #128]	; (13a50 <I2cDriverConfigureSensorBus+0xa4>)
   139d0:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   139d2:	1d3b      	adds	r3, r7, #4
   139d4:	22fa      	movs	r2, #250	; 0xfa
   139d6:	0092      	lsls	r2, r2, #2
   139d8:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   139da:	233b      	movs	r3, #59	; 0x3b
   139dc:	18fb      	adds	r3, r7, r3
   139de:	2203      	movs	r2, #3
   139e0:	701a      	strb	r2, [r3, #0]
   139e2:	e01e      	b.n	13a22 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   139e4:	233a      	movs	r3, #58	; 0x3a
   139e6:	18fc      	adds	r4, r7, r3
   139e8:	1d3a      	adds	r2, r7, #4
   139ea:	491a      	ldr	r1, [pc, #104]	; (13a54 <I2cDriverConfigureSensorBus+0xa8>)
   139ec:	4b1a      	ldr	r3, [pc, #104]	; (13a58 <I2cDriverConfigureSensorBus+0xac>)
   139ee:	0018      	movs	r0, r3
   139f0:	4b1a      	ldr	r3, [pc, #104]	; (13a5c <I2cDriverConfigureSensorBus+0xb0>)
   139f2:	4798      	blx	r3
   139f4:	0003      	movs	r3, r0
   139f6:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   139f8:	233a      	movs	r3, #58	; 0x3a
   139fa:	18fb      	adds	r3, r7, r3
   139fc:	781b      	ldrb	r3, [r3, #0]
   139fe:	2b00      	cmp	r3, #0
   13a00:	d104      	bne.n	13a0c <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   13a02:	233a      	movs	r3, #58	; 0x3a
   13a04:	18fb      	adds	r3, r7, r3
   13a06:	781b      	ldrb	r3, [r3, #0]
   13a08:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   13a0a:	e00f      	b.n	13a2c <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   13a0c:	4b12      	ldr	r3, [pc, #72]	; (13a58 <I2cDriverConfigureSensorBus+0xac>)
   13a0e:	0018      	movs	r0, r3
   13a10:	4b13      	ldr	r3, [pc, #76]	; (13a60 <I2cDriverConfigureSensorBus+0xb4>)
   13a12:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13a14:	233b      	movs	r3, #59	; 0x3b
   13a16:	18fb      	adds	r3, r7, r3
   13a18:	781a      	ldrb	r2, [r3, #0]
   13a1a:	233b      	movs	r3, #59	; 0x3b
   13a1c:	18fb      	adds	r3, r7, r3
   13a1e:	3a01      	subs	r2, #1
   13a20:	701a      	strb	r2, [r3, #0]
   13a22:	233b      	movs	r3, #59	; 0x3b
   13a24:	18fb      	adds	r3, r7, r3
   13a26:	781b      	ldrb	r3, [r3, #0]
   13a28:	2b00      	cmp	r3, #0
   13a2a:	d1db      	bne.n	139e4 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   13a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13a2e:	2b00      	cmp	r3, #0
   13a30:	d104      	bne.n	13a3c <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   13a32:	4b09      	ldr	r3, [pc, #36]	; (13a58 <I2cDriverConfigureSensorBus+0xac>)
   13a34:	0018      	movs	r0, r3
   13a36:	4b0b      	ldr	r3, [pc, #44]	; (13a64 <I2cDriverConfigureSensorBus+0xb8>)
   13a38:	4798      	blx	r3
   13a3a:	e000      	b.n	13a3e <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   13a3c:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   13a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   13a40:	0018      	movs	r0, r3
   13a42:	46bd      	mov	sp, r7
   13a44:	b011      	add	sp, #68	; 0x44
   13a46:	bd90      	pop	{r4, r7, pc}
   13a48:	00013881 	.word	0x00013881
   13a4c:	00080002 	.word	0x00080002
   13a50:	00090002 	.word	0x00090002
   13a54:	42000800 	.word	0x42000800
   13a58:	20004394 	.word	0x20004394
   13a5c:	00017cc9 	.word	0x00017cc9
   13a60:	00017dfd 	.word	0x00017dfd
   13a64:	00013905 	.word	0x00013905

00013a68 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   13a68:	b580      	push	{r7, lr}
   13a6a:	b084      	sub	sp, #16
   13a6c:	af00      	add	r7, sp, #0
   13a6e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13a70:	4b0e      	ldr	r3, [pc, #56]	; (13aac <I2cSensorsTxComplete+0x44>)
   13a72:	2200      	movs	r2, #0
   13a74:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13a76:	4b0d      	ldr	r3, [pc, #52]	; (13aac <I2cSensorsTxComplete+0x44>)
   13a78:	2201      	movs	r2, #1
   13a7a:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13a7c:	2300      	movs	r3, #0
   13a7e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13a80:	4b0b      	ldr	r3, [pc, #44]	; (13ab0 <I2cSensorsTxComplete+0x48>)
   13a82:	681b      	ldr	r3, [r3, #0]
   13a84:	220c      	movs	r2, #12
   13a86:	18ba      	adds	r2, r7, r2
   13a88:	0011      	movs	r1, r2
   13a8a:	0018      	movs	r0, r3
   13a8c:	4b09      	ldr	r3, [pc, #36]	; (13ab4 <I2cSensorsTxComplete+0x4c>)
   13a8e:	4798      	blx	r3
    sensorTransmitError = false;
   13a90:	4b09      	ldr	r3, [pc, #36]	; (13ab8 <I2cSensorsTxComplete+0x50>)
   13a92:	2200      	movs	r2, #0
   13a94:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13a96:	68fb      	ldr	r3, [r7, #12]
   13a98:	2b00      	cmp	r3, #0
   13a9a:	d003      	beq.n	13aa4 <I2cSensorsTxComplete+0x3c>
   13a9c:	4b07      	ldr	r3, [pc, #28]	; (13abc <I2cSensorsTxComplete+0x54>)
   13a9e:	2280      	movs	r2, #128	; 0x80
   13aa0:	0552      	lsls	r2, r2, #21
   13aa2:	601a      	str	r2, [r3, #0]
}
   13aa4:	46c0      	nop			; (mov r8, r8)
   13aa6:	46bd      	mov	sp, r7
   13aa8:	b004      	add	sp, #16
   13aaa:	bd80      	pop	{r7, pc}
   13aac:	20000438 	.word	0x20000438
   13ab0:	200043bc 	.word	0x200043bc
   13ab4:	0001b015 	.word	0x0001b015
   13ab8:	20000435 	.word	0x20000435
   13abc:	e000ed04 	.word	0xe000ed04

00013ac0 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   13ac0:	b580      	push	{r7, lr}
   13ac2:	b084      	sub	sp, #16
   13ac4:	af00      	add	r7, sp, #0
   13ac6:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13ac8:	4b0e      	ldr	r3, [pc, #56]	; (13b04 <I2cSensorsRxComplete+0x44>)
   13aca:	2200      	movs	r2, #0
   13acc:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13ace:	4b0d      	ldr	r3, [pc, #52]	; (13b04 <I2cSensorsRxComplete+0x44>)
   13ad0:	2201      	movs	r2, #1
   13ad2:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13ad4:	2300      	movs	r3, #0
   13ad6:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13ad8:	4b0b      	ldr	r3, [pc, #44]	; (13b08 <I2cSensorsRxComplete+0x48>)
   13ada:	681b      	ldr	r3, [r3, #0]
   13adc:	220c      	movs	r2, #12
   13ade:	18ba      	adds	r2, r7, r2
   13ae0:	0011      	movs	r1, r2
   13ae2:	0018      	movs	r0, r3
   13ae4:	4b09      	ldr	r3, [pc, #36]	; (13b0c <I2cSensorsRxComplete+0x4c>)
   13ae6:	4798      	blx	r3
    sensorTransmitError = false;
   13ae8:	4b09      	ldr	r3, [pc, #36]	; (13b10 <I2cSensorsRxComplete+0x50>)
   13aea:	2200      	movs	r2, #0
   13aec:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13aee:	68fb      	ldr	r3, [r7, #12]
   13af0:	2b00      	cmp	r3, #0
   13af2:	d003      	beq.n	13afc <I2cSensorsRxComplete+0x3c>
   13af4:	4b07      	ldr	r3, [pc, #28]	; (13b14 <I2cSensorsRxComplete+0x54>)
   13af6:	2280      	movs	r2, #128	; 0x80
   13af8:	0552      	lsls	r2, r2, #21
   13afa:	601a      	str	r2, [r3, #0]
}
   13afc:	46c0      	nop			; (mov r8, r8)
   13afe:	46bd      	mov	sp, r7
   13b00:	b004      	add	sp, #16
   13b02:	bd80      	pop	{r7, pc}
   13b04:	20000438 	.word	0x20000438
   13b08:	200043bc 	.word	0x200043bc
   13b0c:	0001b015 	.word	0x0001b015
   13b10:	20000435 	.word	0x20000435
   13b14:	e000ed04 	.word	0xe000ed04

00013b18 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   13b18:	b580      	push	{r7, lr}
   13b1a:	b084      	sub	sp, #16
   13b1c:	af00      	add	r7, sp, #0
   13b1e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13b20:	4b0e      	ldr	r3, [pc, #56]	; (13b5c <I2cSensorsError+0x44>)
   13b22:	2200      	movs	r2, #0
   13b24:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   13b26:	4b0d      	ldr	r3, [pc, #52]	; (13b5c <I2cSensorsError+0x44>)
   13b28:	2201      	movs	r2, #1
   13b2a:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13b2c:	2300      	movs	r3, #0
   13b2e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13b30:	4b0b      	ldr	r3, [pc, #44]	; (13b60 <I2cSensorsError+0x48>)
   13b32:	681b      	ldr	r3, [r3, #0]
   13b34:	220c      	movs	r2, #12
   13b36:	18ba      	adds	r2, r7, r2
   13b38:	0011      	movs	r1, r2
   13b3a:	0018      	movs	r0, r3
   13b3c:	4b09      	ldr	r3, [pc, #36]	; (13b64 <I2cSensorsError+0x4c>)
   13b3e:	4798      	blx	r3
    sensorTransmitError = true;
   13b40:	4b09      	ldr	r3, [pc, #36]	; (13b68 <I2cSensorsError+0x50>)
   13b42:	2201      	movs	r2, #1
   13b44:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13b46:	68fb      	ldr	r3, [r7, #12]
   13b48:	2b00      	cmp	r3, #0
   13b4a:	d003      	beq.n	13b54 <I2cSensorsError+0x3c>
   13b4c:	4b07      	ldr	r3, [pc, #28]	; (13b6c <I2cSensorsError+0x54>)
   13b4e:	2280      	movs	r2, #128	; 0x80
   13b50:	0552      	lsls	r2, r2, #21
   13b52:	601a      	str	r2, [r3, #0]
}
   13b54:	46c0      	nop			; (mov r8, r8)
   13b56:	46bd      	mov	sp, r7
   13b58:	b004      	add	sp, #16
   13b5a:	bd80      	pop	{r7, pc}
   13b5c:	20000438 	.word	0x20000438
   13b60:	200043bc 	.word	0x200043bc
   13b64:	0001b015 	.word	0x0001b015
   13b68:	20000435 	.word	0x20000435
   13b6c:	e000ed04 	.word	0xe000ed04

00013b70 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   13b70:	b580      	push	{r7, lr}
   13b72:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13b74:	4911      	ldr	r1, [pc, #68]	; (13bbc <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   13b76:	4b12      	ldr	r3, [pc, #72]	; (13bc0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13b78:	2200      	movs	r2, #0
   13b7a:	0018      	movs	r0, r3
   13b7c:	4b11      	ldr	r3, [pc, #68]	; (13bc4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13b7e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13b80:	4b0f      	ldr	r3, [pc, #60]	; (13bc0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13b82:	2100      	movs	r1, #0
   13b84:	0018      	movs	r0, r3
   13b86:	4b10      	ldr	r3, [pc, #64]	; (13bc8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13b88:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13b8a:	4910      	ldr	r1, [pc, #64]	; (13bcc <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   13b8c:	4b0c      	ldr	r3, [pc, #48]	; (13bc0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13b8e:	2201      	movs	r2, #1
   13b90:	0018      	movs	r0, r3
   13b92:	4b0c      	ldr	r3, [pc, #48]	; (13bc4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13b94:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13b96:	4b0a      	ldr	r3, [pc, #40]	; (13bc0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13b98:	2101      	movs	r1, #1
   13b9a:	0018      	movs	r0, r3
   13b9c:	4b0a      	ldr	r3, [pc, #40]	; (13bc8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13b9e:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   13ba0:	490b      	ldr	r1, [pc, #44]	; (13bd0 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   13ba2:	4b07      	ldr	r3, [pc, #28]	; (13bc0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13ba4:	2202      	movs	r2, #2
   13ba6:	0018      	movs	r0, r3
   13ba8:	4b06      	ldr	r3, [pc, #24]	; (13bc4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13baa:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   13bac:	4b04      	ldr	r3, [pc, #16]	; (13bc0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13bae:	2102      	movs	r1, #2
   13bb0:	0018      	movs	r0, r3
   13bb2:	4b05      	ldr	r3, [pc, #20]	; (13bc8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13bb4:	4798      	blx	r3
}
   13bb6:	46c0      	nop			; (mov r8, r8)
   13bb8:	46bd      	mov	sp, r7
   13bba:	bd80      	pop	{r7, pc}
   13bbc:	00013a69 	.word	0x00013a69
   13bc0:	20004394 	.word	0x20004394
   13bc4:	00012909 	.word	0x00012909
   13bc8:	00013979 	.word	0x00013979
   13bcc:	00013ac1 	.word	0x00013ac1
   13bd0:	00013b19 	.word	0x00013b19

00013bd4 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   13bd4:	b580      	push	{r7, lr}
   13bd6:	b082      	sub	sp, #8
   13bd8:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13bda:	2300      	movs	r3, #0
   13bdc:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   13bde:	4b14      	ldr	r3, [pc, #80]	; (13c30 <I2cInitializeDriver+0x5c>)
   13be0:	4798      	blx	r3
   13be2:	0003      	movs	r3, r0
   13be4:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   13be6:	687b      	ldr	r3, [r7, #4]
   13be8:	2b00      	cmp	r3, #0
   13bea:	d11a      	bne.n	13c22 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   13bec:	4b11      	ldr	r3, [pc, #68]	; (13c34 <I2cInitializeDriver+0x60>)
   13bee:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   13bf0:	2001      	movs	r0, #1
   13bf2:	4b11      	ldr	r3, [pc, #68]	; (13c38 <I2cInitializeDriver+0x64>)
   13bf4:	4798      	blx	r3
   13bf6:	0002      	movs	r2, r0
   13bf8:	4b10      	ldr	r3, [pc, #64]	; (13c3c <I2cInitializeDriver+0x68>)
   13bfa:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   13bfc:	2203      	movs	r2, #3
   13bfe:	2100      	movs	r1, #0
   13c00:	2001      	movs	r0, #1
   13c02:	4b0f      	ldr	r3, [pc, #60]	; (13c40 <I2cInitializeDriver+0x6c>)
   13c04:	4798      	blx	r3
   13c06:	0002      	movs	r2, r0
   13c08:	4b0e      	ldr	r3, [pc, #56]	; (13c44 <I2cInitializeDriver+0x70>)
   13c0a:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   13c0c:	4b0b      	ldr	r3, [pc, #44]	; (13c3c <I2cInitializeDriver+0x68>)
   13c0e:	681b      	ldr	r3, [r3, #0]
   13c10:	2b00      	cmp	r3, #0
   13c12:	d003      	beq.n	13c1c <I2cInitializeDriver+0x48>
   13c14:	4b0b      	ldr	r3, [pc, #44]	; (13c44 <I2cInitializeDriver+0x70>)
   13c16:	681b      	ldr	r3, [r3, #0]
   13c18:	2b00      	cmp	r3, #0
   13c1a:	d103      	bne.n	13c24 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   13c1c:	2306      	movs	r3, #6
   13c1e:	607b      	str	r3, [r7, #4]
        goto exit;
   13c20:	e000      	b.n	13c24 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   13c22:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13c24:	687b      	ldr	r3, [r7, #4]
}
   13c26:	0018      	movs	r0, r3
   13c28:	46bd      	mov	sp, r7
   13c2a:	b002      	add	sp, #8
   13c2c:	bd80      	pop	{r7, pc}
   13c2e:	46c0      	nop			; (mov r8, r8)
   13c30:	000139ad 	.word	0x000139ad
   13c34:	00013b71 	.word	0x00013b71
   13c38:	0001a94d 	.word	0x0001a94d
   13c3c:	20004390 	.word	0x20004390
   13c40:	0001a6e5 	.word	0x0001a6e5
   13c44:	200043bc 	.word	0x200043bc

00013c48 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   13c48:	b590      	push	{r4, r7, lr}
   13c4a:	b085      	sub	sp, #20
   13c4c:	af00      	add	r7, sp, #0
   13c4e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13c50:	2300      	movs	r3, #0
   13c52:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   13c54:	687b      	ldr	r3, [r7, #4]
   13c56:	2b00      	cmp	r3, #0
   13c58:	d003      	beq.n	13c62 <I2cWriteData+0x1a>
   13c5a:	687b      	ldr	r3, [r7, #4]
   13c5c:	685b      	ldr	r3, [r3, #4]
   13c5e:	2b00      	cmp	r3, #0
   13c60:	d103      	bne.n	13c6a <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   13c62:	2308      	movs	r3, #8
   13c64:	425b      	negs	r3, r3
   13c66:	60fb      	str	r3, [r7, #12]
        goto exit;
   13c68:	e01f      	b.n	13caa <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   13c6a:	687b      	ldr	r3, [r7, #4]
   13c6c:	781b      	ldrb	r3, [r3, #0]
   13c6e:	b29a      	uxth	r2, r3
   13c70:	4b10      	ldr	r3, [pc, #64]	; (13cb4 <I2cWriteData+0x6c>)
   13c72:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   13c74:	687b      	ldr	r3, [r7, #4]
   13c76:	685a      	ldr	r2, [r3, #4]
   13c78:	4b0e      	ldr	r3, [pc, #56]	; (13cb4 <I2cWriteData+0x6c>)
   13c7a:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   13c7c:	687b      	ldr	r3, [r7, #4]
   13c7e:	89da      	ldrh	r2, [r3, #14]
   13c80:	4b0c      	ldr	r3, [pc, #48]	; (13cb4 <I2cWriteData+0x6c>)
   13c82:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13c84:	230b      	movs	r3, #11
   13c86:	18fc      	adds	r4, r7, r3
   13c88:	4a0a      	ldr	r2, [pc, #40]	; (13cb4 <I2cWriteData+0x6c>)
   13c8a:	4b0b      	ldr	r3, [pc, #44]	; (13cb8 <I2cWriteData+0x70>)
   13c8c:	0011      	movs	r1, r2
   13c8e:	0018      	movs	r0, r3
   13c90:	4b0a      	ldr	r3, [pc, #40]	; (13cbc <I2cWriteData+0x74>)
   13c92:	4798      	blx	r3
   13c94:	0003      	movs	r3, r0
   13c96:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13c98:	230b      	movs	r3, #11
   13c9a:	18fb      	adds	r3, r7, r3
   13c9c:	781b      	ldrb	r3, [r3, #0]
   13c9e:	2b00      	cmp	r3, #0
   13ca0:	d003      	beq.n	13caa <I2cWriteData+0x62>
        error = ERROR_IO;
   13ca2:	2306      	movs	r3, #6
   13ca4:	425b      	negs	r3, r3
   13ca6:	60fb      	str	r3, [r7, #12]
        goto exit;
   13ca8:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13caa:	68fb      	ldr	r3, [r7, #12]
}
   13cac:	0018      	movs	r0, r3
   13cae:	46bd      	mov	sp, r7
   13cb0:	b005      	add	sp, #20
   13cb2:	bd90      	pop	{r4, r7, pc}
   13cb4:	200043c0 	.word	0x200043c0
   13cb8:	20004394 	.word	0x20004394
   13cbc:	00012b8d 	.word	0x00012b8d

00013cc0 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   13cc0:	b590      	push	{r4, r7, lr}
   13cc2:	b085      	sub	sp, #20
   13cc4:	af00      	add	r7, sp, #0
   13cc6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13cc8:	2300      	movs	r3, #0
   13cca:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgIn == NULL) {
   13ccc:	687b      	ldr	r3, [r7, #4]
   13cce:	2b00      	cmp	r3, #0
   13cd0:	d003      	beq.n	13cda <I2cReadData+0x1a>
   13cd2:	687b      	ldr	r3, [r7, #4]
   13cd4:	689b      	ldr	r3, [r3, #8]
   13cd6:	2b00      	cmp	r3, #0
   13cd8:	d103      	bne.n	13ce2 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   13cda:	2308      	movs	r3, #8
   13cdc:	425b      	negs	r3, r3
   13cde:	60fb      	str	r3, [r7, #12]
        goto exit;
   13ce0:	e01f      	b.n	13d22 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   13ce2:	687b      	ldr	r3, [r7, #4]
   13ce4:	781b      	ldrb	r3, [r3, #0]
   13ce6:	b29a      	uxth	r2, r3
   13ce8:	4b10      	ldr	r3, [pc, #64]	; (13d2c <I2cReadData+0x6c>)
   13cea:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   13cec:	687b      	ldr	r3, [r7, #4]
   13cee:	689a      	ldr	r2, [r3, #8]
   13cf0:	4b0e      	ldr	r3, [pc, #56]	; (13d2c <I2cReadData+0x6c>)
   13cf2:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   13cf4:	687b      	ldr	r3, [r7, #4]
   13cf6:	899a      	ldrh	r2, [r3, #12]
   13cf8:	4b0c      	ldr	r3, [pc, #48]	; (13d2c <I2cReadData+0x6c>)
   13cfa:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13cfc:	230b      	movs	r3, #11
   13cfe:	18fc      	adds	r4, r7, r3
   13d00:	4a0a      	ldr	r2, [pc, #40]	; (13d2c <I2cReadData+0x6c>)
   13d02:	4b0b      	ldr	r3, [pc, #44]	; (13d30 <I2cReadData+0x70>)
   13d04:	0011      	movs	r1, r2
   13d06:	0018      	movs	r0, r3
   13d08:	4b0a      	ldr	r3, [pc, #40]	; (13d34 <I2cReadData+0x74>)
   13d0a:	4798      	blx	r3
   13d0c:	0003      	movs	r3, r0
   13d0e:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13d10:	230b      	movs	r3, #11
   13d12:	18fb      	adds	r3, r7, r3
   13d14:	781b      	ldrb	r3, [r3, #0]
   13d16:	2b00      	cmp	r3, #0
   13d18:	d003      	beq.n	13d22 <I2cReadData+0x62>
        error = ERROR_IO;
   13d1a:	2306      	movs	r3, #6
   13d1c:	425b      	negs	r3, r3
   13d1e:	60fb      	str	r3, [r7, #12]
        goto exit;
   13d20:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13d22:	68fb      	ldr	r3, [r7, #12]
}
   13d24:	0018      	movs	r0, r3
   13d26:	46bd      	mov	sp, r7
   13d28:	b005      	add	sp, #20
   13d2a:	bd90      	pop	{r4, r7, pc}
   13d2c:	200043c0 	.word	0x200043c0
   13d30:	20004394 	.word	0x20004394
   13d34:	00012aa9 	.word	0x00012aa9

00013d38 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   13d38:	b590      	push	{r4, r7, lr}
   13d3a:	b083      	sub	sp, #12
   13d3c:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   13d3e:	2300      	movs	r3, #0
   13d40:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   13d42:	4b09      	ldr	r3, [pc, #36]	; (13d68 <I2cFreeMutex+0x30>)
   13d44:	6818      	ldr	r0, [r3, #0]
   13d46:	2300      	movs	r3, #0
   13d48:	2200      	movs	r2, #0
   13d4a:	2100      	movs	r1, #0
   13d4c:	4c07      	ldr	r4, [pc, #28]	; (13d6c <I2cFreeMutex+0x34>)
   13d4e:	47a0      	blx	r4
   13d50:	0003      	movs	r3, r0
   13d52:	2b01      	cmp	r3, #1
   13d54:	d002      	beq.n	13d5c <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   13d56:	2314      	movs	r3, #20
   13d58:	425b      	negs	r3, r3
   13d5a:	607b      	str	r3, [r7, #4]
    }
    return error;
   13d5c:	687b      	ldr	r3, [r7, #4]
}
   13d5e:	0018      	movs	r0, r3
   13d60:	46bd      	mov	sp, r7
   13d62:	b003      	add	sp, #12
   13d64:	bd90      	pop	{r4, r7, pc}
   13d66:	46c0      	nop			; (mov r8, r8)
   13d68:	20004390 	.word	0x20004390
   13d6c:	0001a98d 	.word	0x0001a98d

00013d70 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   13d70:	b580      	push	{r7, lr}
   13d72:	b084      	sub	sp, #16
   13d74:	af00      	add	r7, sp, #0
   13d76:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13d78:	2300      	movs	r3, #0
   13d7a:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   13d7c:	4b08      	ldr	r3, [pc, #32]	; (13da0 <I2cGetMutex+0x30>)
   13d7e:	681b      	ldr	r3, [r3, #0]
   13d80:	687a      	ldr	r2, [r7, #4]
   13d82:	0011      	movs	r1, r2
   13d84:	0018      	movs	r0, r3
   13d86:	4b07      	ldr	r3, [pc, #28]	; (13da4 <I2cGetMutex+0x34>)
   13d88:	4798      	blx	r3
   13d8a:	0003      	movs	r3, r0
   13d8c:	2b01      	cmp	r3, #1
   13d8e:	d002      	beq.n	13d96 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   13d90:	231d      	movs	r3, #29
   13d92:	425b      	negs	r3, r3
   13d94:	60fb      	str	r3, [r7, #12]
    }
    return error;
   13d96:	68fb      	ldr	r3, [r7, #12]
}
   13d98:	0018      	movs	r0, r3
   13d9a:	46bd      	mov	sp, r7
   13d9c:	b004      	add	sp, #16
   13d9e:	bd80      	pop	{r7, pc}
   13da0:	20004390 	.word	0x20004390
   13da4:	0001b69d 	.word	0x0001b69d

00013da8 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   13da8:	b580      	push	{r7, lr}
   13daa:	b084      	sub	sp, #16
   13dac:	af00      	add	r7, sp, #0
   13dae:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13db0:	2300      	movs	r3, #0
   13db2:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   13db4:	4b04      	ldr	r3, [pc, #16]	; (13dc8 <I2cGetSemaphoreHandle+0x20>)
   13db6:	681a      	ldr	r2, [r3, #0]
   13db8:	687b      	ldr	r3, [r7, #4]
   13dba:	601a      	str	r2, [r3, #0]
    return error;
   13dbc:	68fb      	ldr	r3, [r7, #12]
}
   13dbe:	0018      	movs	r0, r3
   13dc0:	46bd      	mov	sp, r7
   13dc2:	b004      	add	sp, #16
   13dc4:	bd80      	pop	{r7, pc}
   13dc6:	46c0      	nop			; (mov r8, r8)
   13dc8:	200043bc 	.word	0x200043bc

00013dcc <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   13dcc:	b580      	push	{r7, lr}
   13dce:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   13dd0:	4b02      	ldr	r3, [pc, #8]	; (13ddc <I2cGetTaskErrorStatus+0x10>)
   13dd2:	781b      	ldrb	r3, [r3, #0]
}
   13dd4:	0018      	movs	r0, r3
   13dd6:	46bd      	mov	sp, r7
   13dd8:	bd80      	pop	{r7, pc}
   13dda:	46c0      	nop			; (mov r8, r8)
   13ddc:	20000435 	.word	0x20000435

00013de0 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   13de0:	b580      	push	{r7, lr}
   13de2:	b082      	sub	sp, #8
   13de4:	af00      	add	r7, sp, #0
   13de6:	0002      	movs	r2, r0
   13de8:	1dfb      	adds	r3, r7, #7
   13dea:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   13dec:	4b03      	ldr	r3, [pc, #12]	; (13dfc <I2cSetTaskErrorStatus+0x1c>)
   13dee:	1dfa      	adds	r2, r7, #7
   13df0:	7812      	ldrb	r2, [r2, #0]
   13df2:	701a      	strb	r2, [r3, #0]
}
   13df4:	46c0      	nop			; (mov r8, r8)
   13df6:	46bd      	mov	sp, r7
   13df8:	b002      	add	sp, #8
   13dfa:	bd80      	pop	{r7, pc}
   13dfc:	20000435 	.word	0x20000435

00013e00 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   13e00:	b580      	push	{r7, lr}
   13e02:	b084      	sub	sp, #16
   13e04:	af00      	add	r7, sp, #0
   13e06:	6078      	str	r0, [r7, #4]
   13e08:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   13e0a:	2300      	movs	r3, #0
   13e0c:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   13e0e:	2300      	movs	r3, #0
   13e10:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   13e12:	2396      	movs	r3, #150	; 0x96
   13e14:	005b      	lsls	r3, r3, #1
   13e16:	0018      	movs	r0, r3
   13e18:	4b28      	ldr	r3, [pc, #160]	; (13ebc <I2cWriteDataWait+0xbc>)
   13e1a:	4798      	blx	r3
   13e1c:	0003      	movs	r3, r0
   13e1e:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   13e20:	68fb      	ldr	r3, [r7, #12]
   13e22:	2b00      	cmp	r3, #0
   13e24:	d138      	bne.n	13e98 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   13e26:	2308      	movs	r3, #8
   13e28:	18fb      	adds	r3, r7, r3
   13e2a:	0018      	movs	r0, r3
   13e2c:	4b24      	ldr	r3, [pc, #144]	; (13ec0 <I2cWriteDataWait+0xc0>)
   13e2e:	4798      	blx	r3
   13e30:	0003      	movs	r3, r0
   13e32:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   13e34:	68fb      	ldr	r3, [r7, #12]
   13e36:	2b00      	cmp	r3, #0
   13e38:	d130      	bne.n	13e9c <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   13e3a:	687b      	ldr	r3, [r7, #4]
   13e3c:	0018      	movs	r0, r3
   13e3e:	4b21      	ldr	r3, [pc, #132]	; (13ec4 <I2cWriteDataWait+0xc4>)
   13e40:	4798      	blx	r3
   13e42:	0003      	movs	r3, r0
   13e44:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   13e46:	68fb      	ldr	r3, [r7, #12]
   13e48:	2b00      	cmp	r3, #0
   13e4a:	d12a      	bne.n	13ea2 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13e4c:	68bb      	ldr	r3, [r7, #8]
   13e4e:	683a      	ldr	r2, [r7, #0]
   13e50:	0011      	movs	r1, r2
   13e52:	0018      	movs	r0, r3
   13e54:	4b1c      	ldr	r3, [pc, #112]	; (13ec8 <I2cWriteDataWait+0xc8>)
   13e56:	4798      	blx	r3
   13e58:	0003      	movs	r3, r0
   13e5a:	2b01      	cmp	r3, #1
   13e5c:	d111      	bne.n	13e82 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   13e5e:	4b1b      	ldr	r3, [pc, #108]	; (13ecc <I2cWriteDataWait+0xcc>)
   13e60:	4798      	blx	r3
   13e62:	1e03      	subs	r3, r0, #0
   13e64:	d011      	beq.n	13e8a <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   13e66:	2000      	movs	r0, #0
   13e68:	4b19      	ldr	r3, [pc, #100]	; (13ed0 <I2cWriteDataWait+0xd0>)
   13e6a:	4798      	blx	r3
            if (error != ERROR_NONE) {
   13e6c:	68fb      	ldr	r3, [r7, #12]
   13e6e:	2b00      	cmp	r3, #0
   13e70:	d003      	beq.n	13e7a <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   13e72:	2321      	movs	r3, #33	; 0x21
   13e74:	425b      	negs	r3, r3
   13e76:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   13e78:	e014      	b.n	13ea4 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   13e7a:	2303      	movs	r3, #3
   13e7c:	425b      	negs	r3, r3
   13e7e:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   13e80:	e010      	b.n	13ea4 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   13e82:	2303      	movs	r3, #3
   13e84:	425b      	negs	r3, r3
   13e86:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   13e88:	e00c      	b.n	13ea4 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   13e8a:	4b12      	ldr	r3, [pc, #72]	; (13ed4 <I2cWriteDataWait+0xd4>)
   13e8c:	4798      	blx	r3
   13e8e:	0002      	movs	r2, r0
   13e90:	68fb      	ldr	r3, [r7, #12]
   13e92:	4313      	orrs	r3, r2
   13e94:	60fb      	str	r3, [r7, #12]
   13e96:	e002      	b.n	13e9e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   13e98:	46c0      	nop			; (mov r8, r8)
   13e9a:	e000      	b.n	13e9e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   13e9c:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   13e9e:	68fb      	ldr	r3, [r7, #12]
   13ea0:	e007      	b.n	13eb2 <I2cWriteDataWait+0xb2>
        goto exitError0;
   13ea2:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   13ea4:	4b0b      	ldr	r3, [pc, #44]	; (13ed4 <I2cWriteDataWait+0xd4>)
   13ea6:	4798      	blx	r3
   13ea8:	0002      	movs	r2, r0
   13eaa:	68fb      	ldr	r3, [r7, #12]
   13eac:	4313      	orrs	r3, r2
   13eae:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   13eb0:	68fb      	ldr	r3, [r7, #12]
}
   13eb2:	0018      	movs	r0, r3
   13eb4:	46bd      	mov	sp, r7
   13eb6:	b004      	add	sp, #16
   13eb8:	bd80      	pop	{r7, pc}
   13eba:	46c0      	nop			; (mov r8, r8)
   13ebc:	00013d71 	.word	0x00013d71
   13ec0:	00013da9 	.word	0x00013da9
   13ec4:	00013c49 	.word	0x00013c49
   13ec8:	0001b69d 	.word	0x0001b69d
   13ecc:	00013dcd 	.word	0x00013dcd
   13ed0:	00013de1 	.word	0x00013de1
   13ed4:	00013d39 	.word	0x00013d39

00013ed8 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   13ed8:	b580      	push	{r7, lr}
   13eda:	b086      	sub	sp, #24
   13edc:	af00      	add	r7, sp, #0
   13ede:	60f8      	str	r0, [r7, #12]
   13ee0:	60b9      	str	r1, [r7, #8]
   13ee2:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   13ee4:	2300      	movs	r3, #0
   13ee6:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   13ee8:	2300      	movs	r3, #0
   13eea:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   13eec:	2396      	movs	r3, #150	; 0x96
   13eee:	005b      	lsls	r3, r3, #1
   13ef0:	0018      	movs	r0, r3
   13ef2:	4b39      	ldr	r3, [pc, #228]	; (13fd8 <I2cReadDataWait+0x100>)
   13ef4:	4798      	blx	r3
   13ef6:	0003      	movs	r3, r0
   13ef8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   13efa:	697b      	ldr	r3, [r7, #20]
   13efc:	2b00      	cmp	r3, #0
   13efe:	d15c      	bne.n	13fba <I2cReadDataWait+0xe2>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   13f00:	2310      	movs	r3, #16
   13f02:	18fb      	adds	r3, r7, r3
   13f04:	0018      	movs	r0, r3
   13f06:	4b35      	ldr	r3, [pc, #212]	; (13fdc <I2cReadDataWait+0x104>)
   13f08:	4798      	blx	r3
   13f0a:	0003      	movs	r3, r0
   13f0c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   13f0e:	697b      	ldr	r3, [r7, #20]
   13f10:	2b00      	cmp	r3, #0
   13f12:	d154      	bne.n	13fbe <I2cReadDataWait+0xe6>

	if(data->msgOut != NULL && data->lenOut != 0 ){
   13f14:	68fb      	ldr	r3, [r7, #12]
   13f16:	685b      	ldr	r3, [r3, #4]
   13f18:	2b00      	cmp	r3, #0
   13f1a:	d024      	beq.n	13f66 <I2cReadDataWait+0x8e>
   13f1c:	68fb      	ldr	r3, [r7, #12]
   13f1e:	89db      	ldrh	r3, [r3, #14]
   13f20:	2b00      	cmp	r3, #0
   13f22:	d020      	beq.n	13f66 <I2cReadDataWait+0x8e>
		//---2. Initiate sending data
		error = I2cWriteData(data);
   13f24:	68fb      	ldr	r3, [r7, #12]
   13f26:	0018      	movs	r0, r3
   13f28:	4b2d      	ldr	r3, [pc, #180]	; (13fe0 <I2cReadDataWait+0x108>)
   13f2a:	4798      	blx	r3
   13f2c:	0003      	movs	r3, r0
   13f2e:	617b      	str	r3, [r7, #20]
		if (ERROR_NONE != error) {
   13f30:	697b      	ldr	r3, [r7, #20]
   13f32:	2b00      	cmp	r3, #0
   13f34:	d146      	bne.n	13fc4 <I2cReadDataWait+0xec>
			goto exitError0;
		}

		//---2. Wait for binary semaphore to tell us that we are done!
		if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13f36:	693b      	ldr	r3, [r7, #16]
   13f38:	687a      	ldr	r2, [r7, #4]
   13f3a:	0011      	movs	r1, r2
   13f3c:	0018      	movs	r0, r3
   13f3e:	4b29      	ldr	r3, [pc, #164]	; (13fe4 <I2cReadDataWait+0x10c>)
   13f40:	4798      	blx	r3
   13f42:	0003      	movs	r3, r0
   13f44:	2b01      	cmp	r3, #1
   13f46:	d10a      	bne.n	13f5e <I2cReadDataWait+0x86>
			/* The transmission ended as expected. We now delay until the I2C sensor is finished */
			if (I2cGetTaskErrorStatus()) {
   13f48:	4b27      	ldr	r3, [pc, #156]	; (13fe8 <I2cReadDataWait+0x110>)
   13f4a:	4798      	blx	r3
   13f4c:	1e03      	subs	r3, r0, #0
   13f4e:	d00a      	beq.n	13f66 <I2cReadDataWait+0x8e>
				I2cSetTaskErrorStatus(false);
   13f50:	2000      	movs	r0, #0
   13f52:	4b26      	ldr	r3, [pc, #152]	; (13fec <I2cReadDataWait+0x114>)
   13f54:	4798      	blx	r3
				error = ERROR_ABORTED;
   13f56:	2303      	movs	r3, #3
   13f58:	425b      	negs	r3, r3
   13f5a:	617b      	str	r3, [r7, #20]
				goto exitError0;
   13f5c:	e035      	b.n	13fca <I2cReadDataWait+0xf2>
			}
		} else {
			/* The call to ulTaskNotifyTake() timed out. */
			error = ERR_TIMEOUT;
   13f5e:	2303      	movs	r3, #3
   13f60:	425b      	negs	r3, r3
   13f62:	617b      	str	r3, [r7, #20]
			goto exitError0;
   13f64:	e031      	b.n	13fca <I2cReadDataWait+0xf2>
		}
	}
	
	vTaskDelay(delay);
   13f66:	68bb      	ldr	r3, [r7, #8]
   13f68:	0018      	movs	r0, r3
   13f6a:	4b21      	ldr	r3, [pc, #132]	; (13ff0 <I2cReadDataWait+0x118>)
   13f6c:	4798      	blx	r3
	
    //---6. Initiate Read data
    error = I2cReadData(data);
   13f6e:	68fb      	ldr	r3, [r7, #12]
   13f70:	0018      	movs	r0, r3
   13f72:	4b20      	ldr	r3, [pc, #128]	; (13ff4 <I2cReadDataWait+0x11c>)
   13f74:	4798      	blx	r3
   13f76:	0003      	movs	r3, r0
   13f78:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   13f7a:	697b      	ldr	r3, [r7, #20]
   13f7c:	2b00      	cmp	r3, #0
   13f7e:	d123      	bne.n	13fc8 <I2cReadDataWait+0xf0>
        goto exitError0;
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13f80:	693b      	ldr	r3, [r7, #16]
   13f82:	687a      	ldr	r2, [r7, #4]
   13f84:	0011      	movs	r1, r2
   13f86:	0018      	movs	r0, r3
   13f88:	4b16      	ldr	r3, [pc, #88]	; (13fe4 <I2cReadDataWait+0x10c>)
   13f8a:	4798      	blx	r3
   13f8c:	0003      	movs	r3, r0
   13f8e:	2b01      	cmp	r3, #1
   13f90:	d10a      	bne.n	13fa8 <I2cReadDataWait+0xd0>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   13f92:	4b15      	ldr	r3, [pc, #84]	; (13fe8 <I2cReadDataWait+0x110>)
   13f94:	4798      	blx	r3
   13f96:	1e03      	subs	r3, r0, #0
   13f98:	d00a      	beq.n	13fb0 <I2cReadDataWait+0xd8>
            I2cSetTaskErrorStatus(false);
   13f9a:	2000      	movs	r0, #0
   13f9c:	4b13      	ldr	r3, [pc, #76]	; (13fec <I2cReadDataWait+0x114>)
   13f9e:	4798      	blx	r3
            error = ERROR_ABORTED;
   13fa0:	2303      	movs	r3, #3
   13fa2:	425b      	negs	r3, r3
   13fa4:	617b      	str	r3, [r7, #20]
            goto exitError0;
   13fa6:	e010      	b.n	13fca <I2cReadDataWait+0xf2>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   13fa8:	2303      	movs	r3, #3
   13faa:	425b      	negs	r3, r3
   13fac:	617b      	str	r3, [r7, #20]
        goto exitError0;
   13fae:	e00c      	b.n	13fca <I2cReadDataWait+0xf2>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   13fb0:	4b11      	ldr	r3, [pc, #68]	; (13ff8 <I2cReadDataWait+0x120>)
   13fb2:	4798      	blx	r3
   13fb4:	0003      	movs	r3, r0
   13fb6:	617b      	str	r3, [r7, #20]
   13fb8:	e002      	b.n	13fc0 <I2cReadDataWait+0xe8>
    if (ERROR_NONE != error) goto exit;
   13fba:	46c0      	nop			; (mov r8, r8)
   13fbc:	e000      	b.n	13fc0 <I2cReadDataWait+0xe8>
    if (ERROR_NONE != error) goto exit;
   13fbe:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   13fc0:	697b      	ldr	r3, [r7, #20]
   13fc2:	e005      	b.n	13fd0 <I2cReadDataWait+0xf8>
			goto exitError0;
   13fc4:	46c0      	nop			; (mov r8, r8)
   13fc6:	e000      	b.n	13fca <I2cReadDataWait+0xf2>
        goto exitError0;
   13fc8:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   13fca:	4b0b      	ldr	r3, [pc, #44]	; (13ff8 <I2cReadDataWait+0x120>)
   13fcc:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   13fce:	697b      	ldr	r3, [r7, #20]
}
   13fd0:	0018      	movs	r0, r3
   13fd2:	46bd      	mov	sp, r7
   13fd4:	b006      	add	sp, #24
   13fd6:	bd80      	pop	{r7, pc}
   13fd8:	00013d71 	.word	0x00013d71
   13fdc:	00013da9 	.word	0x00013da9
   13fe0:	00013c49 	.word	0x00013c49
   13fe4:	0001b69d 	.word	0x0001b69d
   13fe8:	00013dcd 	.word	0x00013dcd
   13fec:	00013de1 	.word	0x00013de1
   13ff0:	0001c3f1 	.word	0x0001c3f1
   13ff4:	00013cc1 	.word	0x00013cc1
   13ff8:	00013d39 	.word	0x00013d39

00013ffc <I2cPingAddressWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cPingAddressWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   13ffc:	b580      	push	{r7, lr}
   13ffe:	b086      	sub	sp, #24
   14000:	af00      	add	r7, sp, #0
   14002:	60f8      	str	r0, [r7, #12]
   14004:	60b9      	str	r1, [r7, #8]
   14006:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   14008:	2300      	movs	r3, #0
   1400a:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   1400c:	2300      	movs	r3, #0
   1400e:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14010:	2396      	movs	r3, #150	; 0x96
   14012:	005b      	lsls	r3, r3, #1
   14014:	0018      	movs	r0, r3
   14016:	4b24      	ldr	r3, [pc, #144]	; (140a8 <I2cPingAddressWait+0xac>)
   14018:	4798      	blx	r3
   1401a:	0003      	movs	r3, r0
   1401c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   1401e:	697b      	ldr	r3, [r7, #20]
   14020:	2b00      	cmp	r3, #0
   14022:	d133      	bne.n	1408c <I2cPingAddressWait+0x90>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14024:	2310      	movs	r3, #16
   14026:	18fb      	adds	r3, r7, r3
   14028:	0018      	movs	r0, r3
   1402a:	4b20      	ldr	r3, [pc, #128]	; (140ac <I2cPingAddressWait+0xb0>)
   1402c:	4798      	blx	r3
   1402e:	0003      	movs	r3, r0
   14030:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14032:	697b      	ldr	r3, [r7, #20]
   14034:	2b00      	cmp	r3, #0
   14036:	d12b      	bne.n	14090 <I2cPingAddressWait+0x94>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14038:	68fb      	ldr	r3, [r7, #12]
   1403a:	0018      	movs	r0, r3
   1403c:	4b1c      	ldr	r3, [pc, #112]	; (140b0 <I2cPingAddressWait+0xb4>)
   1403e:	4798      	blx	r3
   14040:	0003      	movs	r3, r0
   14042:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14044:	697b      	ldr	r3, [r7, #20]
   14046:	2b00      	cmp	r3, #0
   14048:	d125      	bne.n	14096 <I2cPingAddressWait+0x9a>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1404a:	693b      	ldr	r3, [r7, #16]
   1404c:	687a      	ldr	r2, [r7, #4]
   1404e:	0011      	movs	r1, r2
   14050:	0018      	movs	r0, r3
   14052:	4b18      	ldr	r3, [pc, #96]	; (140b4 <I2cPingAddressWait+0xb8>)
   14054:	4798      	blx	r3
   14056:	0003      	movs	r3, r0
   14058:	2b01      	cmp	r3, #1
   1405a:	d113      	bne.n	14084 <I2cPingAddressWait+0x88>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1405c:	4b16      	ldr	r3, [pc, #88]	; (140b8 <I2cPingAddressWait+0xbc>)
   1405e:	4798      	blx	r3
   14060:	1e03      	subs	r3, r0, #0
   14062:	d006      	beq.n	14072 <I2cPingAddressWait+0x76>
            I2cSetTaskErrorStatus(false);
   14064:	2000      	movs	r0, #0
   14066:	4b15      	ldr	r3, [pc, #84]	; (140bc <I2cPingAddressWait+0xc0>)
   14068:	4798      	blx	r3
            error = ERROR_ABORTED;
   1406a:	2303      	movs	r3, #3
   1406c:	425b      	negs	r3, r3
   1406e:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14070:	e012      	b.n	14098 <I2cPingAddressWait+0x9c>
        }
        vTaskDelay(delay);
   14072:	68bb      	ldr	r3, [r7, #8]
   14074:	0018      	movs	r0, r3
   14076:	4b12      	ldr	r3, [pc, #72]	; (140c0 <I2cPingAddressWait+0xc4>)
   14078:	4798      	blx	r3
        goto exitError0;
    }


    //---8. Release Mutex
    error = I2cFreeMutex();
   1407a:	4b12      	ldr	r3, [pc, #72]	; (140c4 <I2cPingAddressWait+0xc8>)
   1407c:	4798      	blx	r3
   1407e:	0003      	movs	r3, r0
   14080:	617b      	str	r3, [r7, #20]
   14082:	e006      	b.n	14092 <I2cPingAddressWait+0x96>
        error = ERR_TIMEOUT;
   14084:	2303      	movs	r3, #3
   14086:	425b      	negs	r3, r3
   14088:	617b      	str	r3, [r7, #20]
        goto exitError0;
   1408a:	e005      	b.n	14098 <I2cPingAddressWait+0x9c>
    if (ERROR_NONE != error) goto exit;
   1408c:	46c0      	nop			; (mov r8, r8)
   1408e:	e000      	b.n	14092 <I2cPingAddressWait+0x96>
    if (ERROR_NONE != error) goto exit;
   14090:	46c0      	nop			; (mov r8, r8)
exit:
    return error;
   14092:	697b      	ldr	r3, [r7, #20]
   14094:	e003      	b.n	1409e <I2cPingAddressWait+0xa2>
        goto exitError0;
   14096:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   14098:	4b0a      	ldr	r3, [pc, #40]	; (140c4 <I2cPingAddressWait+0xc8>)
   1409a:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   1409c:	697b      	ldr	r3, [r7, #20]
   1409e:	0018      	movs	r0, r3
   140a0:	46bd      	mov	sp, r7
   140a2:	b006      	add	sp, #24
   140a4:	bd80      	pop	{r7, pc}
   140a6:	46c0      	nop			; (mov r8, r8)
   140a8:	00013d71 	.word	0x00013d71
   140ac:	00013da9 	.word	0x00013da9
   140b0:	00013c49 	.word	0x00013c49
   140b4:	0001b69d 	.word	0x0001b69d
   140b8:	00013dcd 	.word	0x00013dcd
   140bc:	00013de1 	.word	0x00013de1
   140c0:	0001c3f1 	.word	0x0001c3f1
   140c4:	00013d39 	.word	0x00013d39

000140c8 <lsm6dso_read_reg>:
   140c8:	b5b0      	push	{r4, r5, r7, lr}
   140ca:	b086      	sub	sp, #24
   140cc:	af00      	add	r7, sp, #0
   140ce:	60f8      	str	r0, [r7, #12]
   140d0:	0008      	movs	r0, r1
   140d2:	607a      	str	r2, [r7, #4]
   140d4:	0019      	movs	r1, r3
   140d6:	230b      	movs	r3, #11
   140d8:	18fb      	adds	r3, r7, r3
   140da:	1c02      	adds	r2, r0, #0
   140dc:	701a      	strb	r2, [r3, #0]
   140de:	2308      	movs	r3, #8
   140e0:	18fb      	adds	r3, r7, r3
   140e2:	1c0a      	adds	r2, r1, #0
   140e4:	801a      	strh	r2, [r3, #0]
   140e6:	68fb      	ldr	r3, [r7, #12]
   140e8:	685c      	ldr	r4, [r3, #4]
   140ea:	68fb      	ldr	r3, [r7, #12]
   140ec:	6898      	ldr	r0, [r3, #8]
   140ee:	2308      	movs	r3, #8
   140f0:	18fb      	adds	r3, r7, r3
   140f2:	881d      	ldrh	r5, [r3, #0]
   140f4:	687a      	ldr	r2, [r7, #4]
   140f6:	230b      	movs	r3, #11
   140f8:	18fb      	adds	r3, r7, r3
   140fa:	7819      	ldrb	r1, [r3, #0]
   140fc:	002b      	movs	r3, r5
   140fe:	47a0      	blx	r4
   14100:	0003      	movs	r3, r0
   14102:	617b      	str	r3, [r7, #20]
   14104:	697b      	ldr	r3, [r7, #20]
   14106:	0018      	movs	r0, r3
   14108:	46bd      	mov	sp, r7
   1410a:	b006      	add	sp, #24
   1410c:	bdb0      	pop	{r4, r5, r7, pc}

0001410e <lsm6dso_write_reg>:
   1410e:	b5b0      	push	{r4, r5, r7, lr}
   14110:	b086      	sub	sp, #24
   14112:	af00      	add	r7, sp, #0
   14114:	60f8      	str	r0, [r7, #12]
   14116:	0008      	movs	r0, r1
   14118:	607a      	str	r2, [r7, #4]
   1411a:	0019      	movs	r1, r3
   1411c:	230b      	movs	r3, #11
   1411e:	18fb      	adds	r3, r7, r3
   14120:	1c02      	adds	r2, r0, #0
   14122:	701a      	strb	r2, [r3, #0]
   14124:	2308      	movs	r3, #8
   14126:	18fb      	adds	r3, r7, r3
   14128:	1c0a      	adds	r2, r1, #0
   1412a:	801a      	strh	r2, [r3, #0]
   1412c:	68fb      	ldr	r3, [r7, #12]
   1412e:	681c      	ldr	r4, [r3, #0]
   14130:	68fb      	ldr	r3, [r7, #12]
   14132:	6898      	ldr	r0, [r3, #8]
   14134:	2308      	movs	r3, #8
   14136:	18fb      	adds	r3, r7, r3
   14138:	881d      	ldrh	r5, [r3, #0]
   1413a:	687a      	ldr	r2, [r7, #4]
   1413c:	230b      	movs	r3, #11
   1413e:	18fb      	adds	r3, r7, r3
   14140:	7819      	ldrb	r1, [r3, #0]
   14142:	002b      	movs	r3, r5
   14144:	47a0      	blx	r4
   14146:	0003      	movs	r3, r0
   14148:	617b      	str	r3, [r7, #20]
   1414a:	697b      	ldr	r3, [r7, #20]
   1414c:	0018      	movs	r0, r3
   1414e:	46bd      	mov	sp, r7
   14150:	b006      	add	sp, #24
   14152:	bdb0      	pop	{r4, r5, r7, pc}

00014154 <lsm6dso_from_fs2_to_mg>:
   14154:	b580      	push	{r7, lr}
   14156:	b082      	sub	sp, #8
   14158:	af00      	add	r7, sp, #0
   1415a:	0002      	movs	r2, r0
   1415c:	1dbb      	adds	r3, r7, #6
   1415e:	801a      	strh	r2, [r3, #0]
   14160:	1dbb      	adds	r3, r7, #6
   14162:	2200      	movs	r2, #0
   14164:	5e9a      	ldrsh	r2, [r3, r2]
   14166:	4b06      	ldr	r3, [pc, #24]	; (14180 <lsm6dso_from_fs2_to_mg+0x2c>)
   14168:	0010      	movs	r0, r2
   1416a:	4798      	blx	r3
   1416c:	1c02      	adds	r2, r0, #0
   1416e:	4b05      	ldr	r3, [pc, #20]	; (14184 <lsm6dso_from_fs2_to_mg+0x30>)
   14170:	4905      	ldr	r1, [pc, #20]	; (14188 <lsm6dso_from_fs2_to_mg+0x34>)
   14172:	1c10      	adds	r0, r2, #0
   14174:	4798      	blx	r3
   14176:	1c03      	adds	r3, r0, #0
   14178:	1c18      	adds	r0, r3, #0
   1417a:	46bd      	mov	sp, r7
   1417c:	b002      	add	sp, #8
   1417e:	bd80      	pop	{r7, pc}
   14180:	00032e85 	.word	0x00032e85
   14184:	00032c05 	.word	0x00032c05
   14188:	3d79db23 	.word	0x3d79db23

0001418c <lsm6dso_xl_full_scale_set>:
   1418c:	b590      	push	{r4, r7, lr}
   1418e:	b085      	sub	sp, #20
   14190:	af00      	add	r7, sp, #0
   14192:	6078      	str	r0, [r7, #4]
   14194:	000a      	movs	r2, r1
   14196:	1cfb      	adds	r3, r7, #3
   14198:	701a      	strb	r2, [r3, #0]
   1419a:	2308      	movs	r3, #8
   1419c:	18fa      	adds	r2, r7, r3
   1419e:	6878      	ldr	r0, [r7, #4]
   141a0:	2301      	movs	r3, #1
   141a2:	2110      	movs	r1, #16
   141a4:	4c12      	ldr	r4, [pc, #72]	; (141f0 <lsm6dso_xl_full_scale_set+0x64>)
   141a6:	47a0      	blx	r4
   141a8:	0003      	movs	r3, r0
   141aa:	60fb      	str	r3, [r7, #12]
   141ac:	68fb      	ldr	r3, [r7, #12]
   141ae:	2b00      	cmp	r3, #0
   141b0:	d119      	bne.n	141e6 <lsm6dso_xl_full_scale_set+0x5a>
   141b2:	1cfb      	adds	r3, r7, #3
   141b4:	781b      	ldrb	r3, [r3, #0]
   141b6:	2203      	movs	r2, #3
   141b8:	4013      	ands	r3, r2
   141ba:	b2da      	uxtb	r2, r3
   141bc:	2308      	movs	r3, #8
   141be:	18fb      	adds	r3, r7, r3
   141c0:	2103      	movs	r1, #3
   141c2:	400a      	ands	r2, r1
   141c4:	0090      	lsls	r0, r2, #2
   141c6:	781a      	ldrb	r2, [r3, #0]
   141c8:	210c      	movs	r1, #12
   141ca:	438a      	bics	r2, r1
   141cc:	1c11      	adds	r1, r2, #0
   141ce:	1c02      	adds	r2, r0, #0
   141d0:	430a      	orrs	r2, r1
   141d2:	701a      	strb	r2, [r3, #0]
   141d4:	2308      	movs	r3, #8
   141d6:	18fa      	adds	r2, r7, r3
   141d8:	6878      	ldr	r0, [r7, #4]
   141da:	2301      	movs	r3, #1
   141dc:	2110      	movs	r1, #16
   141de:	4c05      	ldr	r4, [pc, #20]	; (141f4 <lsm6dso_xl_full_scale_set+0x68>)
   141e0:	47a0      	blx	r4
   141e2:	0003      	movs	r3, r0
   141e4:	60fb      	str	r3, [r7, #12]
   141e6:	68fb      	ldr	r3, [r7, #12]
   141e8:	0018      	movs	r0, r3
   141ea:	46bd      	mov	sp, r7
   141ec:	b005      	add	sp, #20
   141ee:	bd90      	pop	{r4, r7, pc}
   141f0:	000140c9 	.word	0x000140c9
   141f4:	0001410f 	.word	0x0001410f

000141f8 <lsm6dso_xl_data_rate_set>:
   141f8:	b590      	push	{r4, r7, lr}
   141fa:	b087      	sub	sp, #28
   141fc:	af00      	add	r7, sp, #0
   141fe:	6078      	str	r0, [r7, #4]
   14200:	000a      	movs	r2, r1
   14202:	1cfb      	adds	r3, r7, #3
   14204:	701a      	strb	r2, [r3, #0]
   14206:	2317      	movs	r3, #23
   14208:	18fb      	adds	r3, r7, r3
   1420a:	1cfa      	adds	r2, r7, #3
   1420c:	7812      	ldrb	r2, [r2, #0]
   1420e:	701a      	strb	r2, [r3, #0]
   14210:	230c      	movs	r3, #12
   14212:	18fa      	adds	r2, r7, r3
   14214:	687b      	ldr	r3, [r7, #4]
   14216:	0011      	movs	r1, r2
   14218:	0018      	movs	r0, r3
   1421a:	4ba4      	ldr	r3, [pc, #656]	; (144ac <lsm6dso_xl_data_rate_set+0x2b4>)
   1421c:	4798      	blx	r3
   1421e:	0003      	movs	r3, r0
   14220:	613b      	str	r3, [r7, #16]
   14222:	693b      	ldr	r3, [r7, #16]
   14224:	2b00      	cmp	r3, #0
   14226:	d000      	beq.n	1422a <lsm6dso_xl_data_rate_set+0x32>
   14228:	e113      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   1422a:	230c      	movs	r3, #12
   1422c:	18fb      	adds	r3, r7, r3
   1422e:	781b      	ldrb	r3, [r3, #0]
   14230:	07db      	lsls	r3, r3, #31
   14232:	0fdb      	lsrs	r3, r3, #31
   14234:	b2da      	uxtb	r2, r3
   14236:	230c      	movs	r3, #12
   14238:	18fb      	adds	r3, r7, r3
   1423a:	781b      	ldrb	r3, [r3, #0]
   1423c:	079b      	lsls	r3, r3, #30
   1423e:	0fdb      	lsrs	r3, r3, #31
   14240:	b2db      	uxtb	r3, r3
   14242:	4313      	orrs	r3, r2
   14244:	b2da      	uxtb	r2, r3
   14246:	230c      	movs	r3, #12
   14248:	18fb      	adds	r3, r7, r3
   1424a:	781b      	ldrb	r3, [r3, #0]
   1424c:	075b      	lsls	r3, r3, #29
   1424e:	0fdb      	lsrs	r3, r3, #31
   14250:	b2db      	uxtb	r3, r3
   14252:	4313      	orrs	r3, r2
   14254:	b2da      	uxtb	r2, r3
   14256:	230c      	movs	r3, #12
   14258:	18fb      	adds	r3, r7, r3
   1425a:	781b      	ldrb	r3, [r3, #0]
   1425c:	071b      	lsls	r3, r3, #28
   1425e:	0fdb      	lsrs	r3, r3, #31
   14260:	b2db      	uxtb	r3, r3
   14262:	4313      	orrs	r3, r2
   14264:	b2da      	uxtb	r2, r3
   14266:	230c      	movs	r3, #12
   14268:	18fb      	adds	r3, r7, r3
   1426a:	781b      	ldrb	r3, [r3, #0]
   1426c:	06db      	lsls	r3, r3, #27
   1426e:	0fdb      	lsrs	r3, r3, #31
   14270:	b2db      	uxtb	r3, r3
   14272:	4313      	orrs	r3, r2
   14274:	b2da      	uxtb	r2, r3
   14276:	230c      	movs	r3, #12
   14278:	18fb      	adds	r3, r7, r3
   1427a:	781b      	ldrb	r3, [r3, #0]
   1427c:	069b      	lsls	r3, r3, #26
   1427e:	0fdb      	lsrs	r3, r3, #31
   14280:	b2db      	uxtb	r3, r3
   14282:	4313      	orrs	r3, r2
   14284:	b2da      	uxtb	r2, r3
   14286:	230c      	movs	r3, #12
   14288:	18fb      	adds	r3, r7, r3
   1428a:	781b      	ldrb	r3, [r3, #0]
   1428c:	065b      	lsls	r3, r3, #25
   1428e:	0fdb      	lsrs	r3, r3, #31
   14290:	b2db      	uxtb	r3, r3
   14292:	4313      	orrs	r3, r2
   14294:	b2da      	uxtb	r2, r3
   14296:	230c      	movs	r3, #12
   14298:	18fb      	adds	r3, r7, r3
   1429a:	781b      	ldrb	r3, [r3, #0]
   1429c:	061b      	lsls	r3, r3, #24
   1429e:	0fdb      	lsrs	r3, r3, #31
   142a0:	b2db      	uxtb	r3, r3
   142a2:	4313      	orrs	r3, r2
   142a4:	b2da      	uxtb	r2, r3
   142a6:	230c      	movs	r3, #12
   142a8:	18fb      	adds	r3, r7, r3
   142aa:	785b      	ldrb	r3, [r3, #1]
   142ac:	07db      	lsls	r3, r3, #31
   142ae:	0fdb      	lsrs	r3, r3, #31
   142b0:	b2db      	uxtb	r3, r3
   142b2:	4313      	orrs	r3, r2
   142b4:	b2da      	uxtb	r2, r3
   142b6:	230c      	movs	r3, #12
   142b8:	18fb      	adds	r3, r7, r3
   142ba:	785b      	ldrb	r3, [r3, #1]
   142bc:	079b      	lsls	r3, r3, #30
   142be:	0fdb      	lsrs	r3, r3, #31
   142c0:	b2db      	uxtb	r3, r3
   142c2:	4313      	orrs	r3, r2
   142c4:	b2da      	uxtb	r2, r3
   142c6:	230c      	movs	r3, #12
   142c8:	18fb      	adds	r3, r7, r3
   142ca:	785b      	ldrb	r3, [r3, #1]
   142cc:	075b      	lsls	r3, r3, #29
   142ce:	0fdb      	lsrs	r3, r3, #31
   142d0:	b2db      	uxtb	r3, r3
   142d2:	4313      	orrs	r3, r2
   142d4:	b2da      	uxtb	r2, r3
   142d6:	230c      	movs	r3, #12
   142d8:	18fb      	adds	r3, r7, r3
   142da:	785b      	ldrb	r3, [r3, #1]
   142dc:	071b      	lsls	r3, r3, #28
   142de:	0fdb      	lsrs	r3, r3, #31
   142e0:	b2db      	uxtb	r3, r3
   142e2:	4313      	orrs	r3, r2
   142e4:	b2da      	uxtb	r2, r3
   142e6:	230c      	movs	r3, #12
   142e8:	18fb      	adds	r3, r7, r3
   142ea:	785b      	ldrb	r3, [r3, #1]
   142ec:	06db      	lsls	r3, r3, #27
   142ee:	0fdb      	lsrs	r3, r3, #31
   142f0:	b2db      	uxtb	r3, r3
   142f2:	4313      	orrs	r3, r2
   142f4:	b2da      	uxtb	r2, r3
   142f6:	230c      	movs	r3, #12
   142f8:	18fb      	adds	r3, r7, r3
   142fa:	785b      	ldrb	r3, [r3, #1]
   142fc:	069b      	lsls	r3, r3, #26
   142fe:	0fdb      	lsrs	r3, r3, #31
   14300:	b2db      	uxtb	r3, r3
   14302:	4313      	orrs	r3, r2
   14304:	b2da      	uxtb	r2, r3
   14306:	230c      	movs	r3, #12
   14308:	18fb      	adds	r3, r7, r3
   1430a:	785b      	ldrb	r3, [r3, #1]
   1430c:	065b      	lsls	r3, r3, #25
   1430e:	0fdb      	lsrs	r3, r3, #31
   14310:	b2db      	uxtb	r3, r3
   14312:	4313      	orrs	r3, r2
   14314:	b2da      	uxtb	r2, r3
   14316:	230c      	movs	r3, #12
   14318:	18fb      	adds	r3, r7, r3
   1431a:	785b      	ldrb	r3, [r3, #1]
   1431c:	061b      	lsls	r3, r3, #24
   1431e:	0fdb      	lsrs	r3, r3, #31
   14320:	b2db      	uxtb	r3, r3
   14322:	4313      	orrs	r3, r2
   14324:	b2db      	uxtb	r3, r3
   14326:	2b01      	cmp	r3, #1
   14328:	d000      	beq.n	1432c <lsm6dso_xl_data_rate_set+0x134>
   1432a:	e092      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   1432c:	230b      	movs	r3, #11
   1432e:	18fa      	adds	r2, r7, r3
   14330:	687b      	ldr	r3, [r7, #4]
   14332:	0011      	movs	r1, r2
   14334:	0018      	movs	r0, r3
   14336:	4b5e      	ldr	r3, [pc, #376]	; (144b0 <lsm6dso_xl_data_rate_set+0x2b8>)
   14338:	4798      	blx	r3
   1433a:	0003      	movs	r3, r0
   1433c:	613b      	str	r3, [r7, #16]
   1433e:	693b      	ldr	r3, [r7, #16]
   14340:	2b00      	cmp	r3, #0
   14342:	d000      	beq.n	14346 <lsm6dso_xl_data_rate_set+0x14e>
   14344:	e085      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   14346:	230b      	movs	r3, #11
   14348:	18fb      	adds	r3, r7, r3
   1434a:	781b      	ldrb	r3, [r3, #0]
   1434c:	2b01      	cmp	r3, #1
   1434e:	d017      	beq.n	14380 <lsm6dso_xl_data_rate_set+0x188>
   14350:	dc02      	bgt.n	14358 <lsm6dso_xl_data_rate_set+0x160>
   14352:	2b00      	cmp	r3, #0
   14354:	d005      	beq.n	14362 <lsm6dso_xl_data_rate_set+0x16a>
   14356:	e076      	b.n	14446 <lsm6dso_xl_data_rate_set+0x24e>
   14358:	2b02      	cmp	r3, #2
   1435a:	d029      	beq.n	143b0 <lsm6dso_xl_data_rate_set+0x1b8>
   1435c:	2b03      	cmp	r3, #3
   1435e:	d048      	beq.n	143f2 <lsm6dso_xl_data_rate_set+0x1fa>
   14360:	e071      	b.n	14446 <lsm6dso_xl_data_rate_set+0x24e>
   14362:	1cfb      	adds	r3, r7, #3
   14364:	781b      	ldrb	r3, [r3, #0]
   14366:	2b00      	cmp	r3, #0
   14368:	d104      	bne.n	14374 <lsm6dso_xl_data_rate_set+0x17c>
   1436a:	2317      	movs	r3, #23
   1436c:	18fb      	adds	r3, r7, r3
   1436e:	2201      	movs	r2, #1
   14370:	701a      	strb	r2, [r3, #0]
   14372:	e06e      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   14374:	2317      	movs	r3, #23
   14376:	18fb      	adds	r3, r7, r3
   14378:	1cfa      	adds	r2, r7, #3
   1437a:	7812      	ldrb	r2, [r2, #0]
   1437c:	701a      	strb	r2, [r3, #0]
   1437e:	e068      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   14380:	1cfb      	adds	r3, r7, #3
   14382:	781b      	ldrb	r3, [r3, #0]
   14384:	2b00      	cmp	r3, #0
   14386:	d104      	bne.n	14392 <lsm6dso_xl_data_rate_set+0x19a>
   14388:	2317      	movs	r3, #23
   1438a:	18fb      	adds	r3, r7, r3
   1438c:	2202      	movs	r2, #2
   1438e:	701a      	strb	r2, [r3, #0]
   14390:	e05f      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   14392:	1cfb      	adds	r3, r7, #3
   14394:	781b      	ldrb	r3, [r3, #0]
   14396:	2b01      	cmp	r3, #1
   14398:	d104      	bne.n	143a4 <lsm6dso_xl_data_rate_set+0x1ac>
   1439a:	2317      	movs	r3, #23
   1439c:	18fb      	adds	r3, r7, r3
   1439e:	2202      	movs	r2, #2
   143a0:	701a      	strb	r2, [r3, #0]
   143a2:	e056      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   143a4:	2317      	movs	r3, #23
   143a6:	18fb      	adds	r3, r7, r3
   143a8:	1cfa      	adds	r2, r7, #3
   143aa:	7812      	ldrb	r2, [r2, #0]
   143ac:	701a      	strb	r2, [r3, #0]
   143ae:	e050      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   143b0:	1cfb      	adds	r3, r7, #3
   143b2:	781b      	ldrb	r3, [r3, #0]
   143b4:	2b00      	cmp	r3, #0
   143b6:	d104      	bne.n	143c2 <lsm6dso_xl_data_rate_set+0x1ca>
   143b8:	2317      	movs	r3, #23
   143ba:	18fb      	adds	r3, r7, r3
   143bc:	2203      	movs	r2, #3
   143be:	701a      	strb	r2, [r3, #0]
   143c0:	e047      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   143c2:	1cfb      	adds	r3, r7, #3
   143c4:	781b      	ldrb	r3, [r3, #0]
   143c6:	2b01      	cmp	r3, #1
   143c8:	d104      	bne.n	143d4 <lsm6dso_xl_data_rate_set+0x1dc>
   143ca:	2317      	movs	r3, #23
   143cc:	18fb      	adds	r3, r7, r3
   143ce:	2203      	movs	r2, #3
   143d0:	701a      	strb	r2, [r3, #0]
   143d2:	e03e      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   143d4:	1cfb      	adds	r3, r7, #3
   143d6:	781b      	ldrb	r3, [r3, #0]
   143d8:	2b02      	cmp	r3, #2
   143da:	d104      	bne.n	143e6 <lsm6dso_xl_data_rate_set+0x1ee>
   143dc:	2317      	movs	r3, #23
   143de:	18fb      	adds	r3, r7, r3
   143e0:	2203      	movs	r2, #3
   143e2:	701a      	strb	r2, [r3, #0]
   143e4:	e035      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   143e6:	2317      	movs	r3, #23
   143e8:	18fb      	adds	r3, r7, r3
   143ea:	1cfa      	adds	r2, r7, #3
   143ec:	7812      	ldrb	r2, [r2, #0]
   143ee:	701a      	strb	r2, [r3, #0]
   143f0:	e02f      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   143f2:	1cfb      	adds	r3, r7, #3
   143f4:	781b      	ldrb	r3, [r3, #0]
   143f6:	2b00      	cmp	r3, #0
   143f8:	d104      	bne.n	14404 <lsm6dso_xl_data_rate_set+0x20c>
   143fa:	2317      	movs	r3, #23
   143fc:	18fb      	adds	r3, r7, r3
   143fe:	2204      	movs	r2, #4
   14400:	701a      	strb	r2, [r3, #0]
   14402:	e026      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   14404:	1cfb      	adds	r3, r7, #3
   14406:	781b      	ldrb	r3, [r3, #0]
   14408:	2b01      	cmp	r3, #1
   1440a:	d104      	bne.n	14416 <lsm6dso_xl_data_rate_set+0x21e>
   1440c:	2317      	movs	r3, #23
   1440e:	18fb      	adds	r3, r7, r3
   14410:	2204      	movs	r2, #4
   14412:	701a      	strb	r2, [r3, #0]
   14414:	e01d      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   14416:	1cfb      	adds	r3, r7, #3
   14418:	781b      	ldrb	r3, [r3, #0]
   1441a:	2b02      	cmp	r3, #2
   1441c:	d104      	bne.n	14428 <lsm6dso_xl_data_rate_set+0x230>
   1441e:	2317      	movs	r3, #23
   14420:	18fb      	adds	r3, r7, r3
   14422:	2204      	movs	r2, #4
   14424:	701a      	strb	r2, [r3, #0]
   14426:	e014      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   14428:	1cfb      	adds	r3, r7, #3
   1442a:	781b      	ldrb	r3, [r3, #0]
   1442c:	2b03      	cmp	r3, #3
   1442e:	d104      	bne.n	1443a <lsm6dso_xl_data_rate_set+0x242>
   14430:	2317      	movs	r3, #23
   14432:	18fb      	adds	r3, r7, r3
   14434:	2204      	movs	r2, #4
   14436:	701a      	strb	r2, [r3, #0]
   14438:	e00b      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   1443a:	2317      	movs	r3, #23
   1443c:	18fb      	adds	r3, r7, r3
   1443e:	1cfa      	adds	r2, r7, #3
   14440:	7812      	ldrb	r2, [r2, #0]
   14442:	701a      	strb	r2, [r3, #0]
   14444:	e005      	b.n	14452 <lsm6dso_xl_data_rate_set+0x25a>
   14446:	2317      	movs	r3, #23
   14448:	18fb      	adds	r3, r7, r3
   1444a:	1cfa      	adds	r2, r7, #3
   1444c:	7812      	ldrb	r2, [r2, #0]
   1444e:	701a      	strb	r2, [r3, #0]
   14450:	46c0      	nop			; (mov r8, r8)
   14452:	693b      	ldr	r3, [r7, #16]
   14454:	2b00      	cmp	r3, #0
   14456:	d108      	bne.n	1446a <lsm6dso_xl_data_rate_set+0x272>
   14458:	2308      	movs	r3, #8
   1445a:	18fa      	adds	r2, r7, r3
   1445c:	6878      	ldr	r0, [r7, #4]
   1445e:	2301      	movs	r3, #1
   14460:	2110      	movs	r1, #16
   14462:	4c14      	ldr	r4, [pc, #80]	; (144b4 <lsm6dso_xl_data_rate_set+0x2bc>)
   14464:	47a0      	blx	r4
   14466:	0003      	movs	r3, r0
   14468:	613b      	str	r3, [r7, #16]
   1446a:	693b      	ldr	r3, [r7, #16]
   1446c:	2b00      	cmp	r3, #0
   1446e:	d118      	bne.n	144a2 <lsm6dso_xl_data_rate_set+0x2aa>
   14470:	2317      	movs	r3, #23
   14472:	18fb      	adds	r3, r7, r3
   14474:	781b      	ldrb	r3, [r3, #0]
   14476:	220f      	movs	r2, #15
   14478:	4013      	ands	r3, r2
   1447a:	b2da      	uxtb	r2, r3
   1447c:	2308      	movs	r3, #8
   1447e:	18fb      	adds	r3, r7, r3
   14480:	0110      	lsls	r0, r2, #4
   14482:	781a      	ldrb	r2, [r3, #0]
   14484:	210f      	movs	r1, #15
   14486:	400a      	ands	r2, r1
   14488:	1c11      	adds	r1, r2, #0
   1448a:	1c02      	adds	r2, r0, #0
   1448c:	430a      	orrs	r2, r1
   1448e:	701a      	strb	r2, [r3, #0]
   14490:	2308      	movs	r3, #8
   14492:	18fa      	adds	r2, r7, r3
   14494:	6878      	ldr	r0, [r7, #4]
   14496:	2301      	movs	r3, #1
   14498:	2110      	movs	r1, #16
   1449a:	4c07      	ldr	r4, [pc, #28]	; (144b8 <lsm6dso_xl_data_rate_set+0x2c0>)
   1449c:	47a0      	blx	r4
   1449e:	0003      	movs	r3, r0
   144a0:	613b      	str	r3, [r7, #16]
   144a2:	693b      	ldr	r3, [r7, #16]
   144a4:	0018      	movs	r0, r3
   144a6:	46bd      	mov	sp, r7
   144a8:	b007      	add	sp, #28
   144aa:	bd90      	pop	{r4, r7, pc}
   144ac:	00014cd5 	.word	0x00014cd5
   144b0:	00014d29 	.word	0x00014d29
   144b4:	000140c9 	.word	0x000140c9
   144b8:	0001410f 	.word	0x0001410f

000144bc <lsm6dso_gy_full_scale_set>:
   144bc:	b590      	push	{r4, r7, lr}
   144be:	b085      	sub	sp, #20
   144c0:	af00      	add	r7, sp, #0
   144c2:	6078      	str	r0, [r7, #4]
   144c4:	000a      	movs	r2, r1
   144c6:	1cfb      	adds	r3, r7, #3
   144c8:	701a      	strb	r2, [r3, #0]
   144ca:	2308      	movs	r3, #8
   144cc:	18fa      	adds	r2, r7, r3
   144ce:	6878      	ldr	r0, [r7, #4]
   144d0:	2301      	movs	r3, #1
   144d2:	2111      	movs	r1, #17
   144d4:	4c12      	ldr	r4, [pc, #72]	; (14520 <lsm6dso_gy_full_scale_set+0x64>)
   144d6:	47a0      	blx	r4
   144d8:	0003      	movs	r3, r0
   144da:	60fb      	str	r3, [r7, #12]
   144dc:	68fb      	ldr	r3, [r7, #12]
   144de:	2b00      	cmp	r3, #0
   144e0:	d119      	bne.n	14516 <lsm6dso_gy_full_scale_set+0x5a>
   144e2:	1cfb      	adds	r3, r7, #3
   144e4:	781b      	ldrb	r3, [r3, #0]
   144e6:	2207      	movs	r2, #7
   144e8:	4013      	ands	r3, r2
   144ea:	b2da      	uxtb	r2, r3
   144ec:	2308      	movs	r3, #8
   144ee:	18fb      	adds	r3, r7, r3
   144f0:	2107      	movs	r1, #7
   144f2:	400a      	ands	r2, r1
   144f4:	1890      	adds	r0, r2, r2
   144f6:	781a      	ldrb	r2, [r3, #0]
   144f8:	210e      	movs	r1, #14
   144fa:	438a      	bics	r2, r1
   144fc:	1c11      	adds	r1, r2, #0
   144fe:	1c02      	adds	r2, r0, #0
   14500:	430a      	orrs	r2, r1
   14502:	701a      	strb	r2, [r3, #0]
   14504:	2308      	movs	r3, #8
   14506:	18fa      	adds	r2, r7, r3
   14508:	6878      	ldr	r0, [r7, #4]
   1450a:	2301      	movs	r3, #1
   1450c:	2111      	movs	r1, #17
   1450e:	4c05      	ldr	r4, [pc, #20]	; (14524 <lsm6dso_gy_full_scale_set+0x68>)
   14510:	47a0      	blx	r4
   14512:	0003      	movs	r3, r0
   14514:	60fb      	str	r3, [r7, #12]
   14516:	68fb      	ldr	r3, [r7, #12]
   14518:	0018      	movs	r0, r3
   1451a:	46bd      	mov	sp, r7
   1451c:	b005      	add	sp, #20
   1451e:	bd90      	pop	{r4, r7, pc}
   14520:	000140c9 	.word	0x000140c9
   14524:	0001410f 	.word	0x0001410f

00014528 <lsm6dso_gy_data_rate_set>:
   14528:	b590      	push	{r4, r7, lr}
   1452a:	b087      	sub	sp, #28
   1452c:	af00      	add	r7, sp, #0
   1452e:	6078      	str	r0, [r7, #4]
   14530:	000a      	movs	r2, r1
   14532:	1cfb      	adds	r3, r7, #3
   14534:	701a      	strb	r2, [r3, #0]
   14536:	2317      	movs	r3, #23
   14538:	18fb      	adds	r3, r7, r3
   1453a:	1cfa      	adds	r2, r7, #3
   1453c:	7812      	ldrb	r2, [r2, #0]
   1453e:	701a      	strb	r2, [r3, #0]
   14540:	230c      	movs	r3, #12
   14542:	18fa      	adds	r2, r7, r3
   14544:	687b      	ldr	r3, [r7, #4]
   14546:	0011      	movs	r1, r2
   14548:	0018      	movs	r0, r3
   1454a:	4ba4      	ldr	r3, [pc, #656]	; (147dc <lsm6dso_gy_data_rate_set+0x2b4>)
   1454c:	4798      	blx	r3
   1454e:	0003      	movs	r3, r0
   14550:	613b      	str	r3, [r7, #16]
   14552:	693b      	ldr	r3, [r7, #16]
   14554:	2b00      	cmp	r3, #0
   14556:	d000      	beq.n	1455a <lsm6dso_gy_data_rate_set+0x32>
   14558:	e113      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   1455a:	230c      	movs	r3, #12
   1455c:	18fb      	adds	r3, r7, r3
   1455e:	781b      	ldrb	r3, [r3, #0]
   14560:	07db      	lsls	r3, r3, #31
   14562:	0fdb      	lsrs	r3, r3, #31
   14564:	b2da      	uxtb	r2, r3
   14566:	230c      	movs	r3, #12
   14568:	18fb      	adds	r3, r7, r3
   1456a:	781b      	ldrb	r3, [r3, #0]
   1456c:	079b      	lsls	r3, r3, #30
   1456e:	0fdb      	lsrs	r3, r3, #31
   14570:	b2db      	uxtb	r3, r3
   14572:	4313      	orrs	r3, r2
   14574:	b2da      	uxtb	r2, r3
   14576:	230c      	movs	r3, #12
   14578:	18fb      	adds	r3, r7, r3
   1457a:	781b      	ldrb	r3, [r3, #0]
   1457c:	075b      	lsls	r3, r3, #29
   1457e:	0fdb      	lsrs	r3, r3, #31
   14580:	b2db      	uxtb	r3, r3
   14582:	4313      	orrs	r3, r2
   14584:	b2da      	uxtb	r2, r3
   14586:	230c      	movs	r3, #12
   14588:	18fb      	adds	r3, r7, r3
   1458a:	781b      	ldrb	r3, [r3, #0]
   1458c:	071b      	lsls	r3, r3, #28
   1458e:	0fdb      	lsrs	r3, r3, #31
   14590:	b2db      	uxtb	r3, r3
   14592:	4313      	orrs	r3, r2
   14594:	b2da      	uxtb	r2, r3
   14596:	230c      	movs	r3, #12
   14598:	18fb      	adds	r3, r7, r3
   1459a:	781b      	ldrb	r3, [r3, #0]
   1459c:	06db      	lsls	r3, r3, #27
   1459e:	0fdb      	lsrs	r3, r3, #31
   145a0:	b2db      	uxtb	r3, r3
   145a2:	4313      	orrs	r3, r2
   145a4:	b2da      	uxtb	r2, r3
   145a6:	230c      	movs	r3, #12
   145a8:	18fb      	adds	r3, r7, r3
   145aa:	781b      	ldrb	r3, [r3, #0]
   145ac:	069b      	lsls	r3, r3, #26
   145ae:	0fdb      	lsrs	r3, r3, #31
   145b0:	b2db      	uxtb	r3, r3
   145b2:	4313      	orrs	r3, r2
   145b4:	b2da      	uxtb	r2, r3
   145b6:	230c      	movs	r3, #12
   145b8:	18fb      	adds	r3, r7, r3
   145ba:	781b      	ldrb	r3, [r3, #0]
   145bc:	065b      	lsls	r3, r3, #25
   145be:	0fdb      	lsrs	r3, r3, #31
   145c0:	b2db      	uxtb	r3, r3
   145c2:	4313      	orrs	r3, r2
   145c4:	b2da      	uxtb	r2, r3
   145c6:	230c      	movs	r3, #12
   145c8:	18fb      	adds	r3, r7, r3
   145ca:	781b      	ldrb	r3, [r3, #0]
   145cc:	061b      	lsls	r3, r3, #24
   145ce:	0fdb      	lsrs	r3, r3, #31
   145d0:	b2db      	uxtb	r3, r3
   145d2:	4313      	orrs	r3, r2
   145d4:	b2da      	uxtb	r2, r3
   145d6:	230c      	movs	r3, #12
   145d8:	18fb      	adds	r3, r7, r3
   145da:	785b      	ldrb	r3, [r3, #1]
   145dc:	07db      	lsls	r3, r3, #31
   145de:	0fdb      	lsrs	r3, r3, #31
   145e0:	b2db      	uxtb	r3, r3
   145e2:	4313      	orrs	r3, r2
   145e4:	b2da      	uxtb	r2, r3
   145e6:	230c      	movs	r3, #12
   145e8:	18fb      	adds	r3, r7, r3
   145ea:	785b      	ldrb	r3, [r3, #1]
   145ec:	079b      	lsls	r3, r3, #30
   145ee:	0fdb      	lsrs	r3, r3, #31
   145f0:	b2db      	uxtb	r3, r3
   145f2:	4313      	orrs	r3, r2
   145f4:	b2da      	uxtb	r2, r3
   145f6:	230c      	movs	r3, #12
   145f8:	18fb      	adds	r3, r7, r3
   145fa:	785b      	ldrb	r3, [r3, #1]
   145fc:	075b      	lsls	r3, r3, #29
   145fe:	0fdb      	lsrs	r3, r3, #31
   14600:	b2db      	uxtb	r3, r3
   14602:	4313      	orrs	r3, r2
   14604:	b2da      	uxtb	r2, r3
   14606:	230c      	movs	r3, #12
   14608:	18fb      	adds	r3, r7, r3
   1460a:	785b      	ldrb	r3, [r3, #1]
   1460c:	071b      	lsls	r3, r3, #28
   1460e:	0fdb      	lsrs	r3, r3, #31
   14610:	b2db      	uxtb	r3, r3
   14612:	4313      	orrs	r3, r2
   14614:	b2da      	uxtb	r2, r3
   14616:	230c      	movs	r3, #12
   14618:	18fb      	adds	r3, r7, r3
   1461a:	785b      	ldrb	r3, [r3, #1]
   1461c:	06db      	lsls	r3, r3, #27
   1461e:	0fdb      	lsrs	r3, r3, #31
   14620:	b2db      	uxtb	r3, r3
   14622:	4313      	orrs	r3, r2
   14624:	b2da      	uxtb	r2, r3
   14626:	230c      	movs	r3, #12
   14628:	18fb      	adds	r3, r7, r3
   1462a:	785b      	ldrb	r3, [r3, #1]
   1462c:	069b      	lsls	r3, r3, #26
   1462e:	0fdb      	lsrs	r3, r3, #31
   14630:	b2db      	uxtb	r3, r3
   14632:	4313      	orrs	r3, r2
   14634:	b2da      	uxtb	r2, r3
   14636:	230c      	movs	r3, #12
   14638:	18fb      	adds	r3, r7, r3
   1463a:	785b      	ldrb	r3, [r3, #1]
   1463c:	065b      	lsls	r3, r3, #25
   1463e:	0fdb      	lsrs	r3, r3, #31
   14640:	b2db      	uxtb	r3, r3
   14642:	4313      	orrs	r3, r2
   14644:	b2da      	uxtb	r2, r3
   14646:	230c      	movs	r3, #12
   14648:	18fb      	adds	r3, r7, r3
   1464a:	785b      	ldrb	r3, [r3, #1]
   1464c:	061b      	lsls	r3, r3, #24
   1464e:	0fdb      	lsrs	r3, r3, #31
   14650:	b2db      	uxtb	r3, r3
   14652:	4313      	orrs	r3, r2
   14654:	b2db      	uxtb	r3, r3
   14656:	2b01      	cmp	r3, #1
   14658:	d000      	beq.n	1465c <lsm6dso_gy_data_rate_set+0x134>
   1465a:	e092      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   1465c:	230b      	movs	r3, #11
   1465e:	18fa      	adds	r2, r7, r3
   14660:	687b      	ldr	r3, [r7, #4]
   14662:	0011      	movs	r1, r2
   14664:	0018      	movs	r0, r3
   14666:	4b5e      	ldr	r3, [pc, #376]	; (147e0 <lsm6dso_gy_data_rate_set+0x2b8>)
   14668:	4798      	blx	r3
   1466a:	0003      	movs	r3, r0
   1466c:	613b      	str	r3, [r7, #16]
   1466e:	693b      	ldr	r3, [r7, #16]
   14670:	2b00      	cmp	r3, #0
   14672:	d000      	beq.n	14676 <lsm6dso_gy_data_rate_set+0x14e>
   14674:	e085      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   14676:	230b      	movs	r3, #11
   14678:	18fb      	adds	r3, r7, r3
   1467a:	781b      	ldrb	r3, [r3, #0]
   1467c:	2b01      	cmp	r3, #1
   1467e:	d017      	beq.n	146b0 <lsm6dso_gy_data_rate_set+0x188>
   14680:	dc02      	bgt.n	14688 <lsm6dso_gy_data_rate_set+0x160>
   14682:	2b00      	cmp	r3, #0
   14684:	d005      	beq.n	14692 <lsm6dso_gy_data_rate_set+0x16a>
   14686:	e076      	b.n	14776 <lsm6dso_gy_data_rate_set+0x24e>
   14688:	2b02      	cmp	r3, #2
   1468a:	d029      	beq.n	146e0 <lsm6dso_gy_data_rate_set+0x1b8>
   1468c:	2b03      	cmp	r3, #3
   1468e:	d048      	beq.n	14722 <lsm6dso_gy_data_rate_set+0x1fa>
   14690:	e071      	b.n	14776 <lsm6dso_gy_data_rate_set+0x24e>
   14692:	1cfb      	adds	r3, r7, #3
   14694:	781b      	ldrb	r3, [r3, #0]
   14696:	2b00      	cmp	r3, #0
   14698:	d104      	bne.n	146a4 <lsm6dso_gy_data_rate_set+0x17c>
   1469a:	2317      	movs	r3, #23
   1469c:	18fb      	adds	r3, r7, r3
   1469e:	2201      	movs	r2, #1
   146a0:	701a      	strb	r2, [r3, #0]
   146a2:	e06e      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   146a4:	2317      	movs	r3, #23
   146a6:	18fb      	adds	r3, r7, r3
   146a8:	1cfa      	adds	r2, r7, #3
   146aa:	7812      	ldrb	r2, [r2, #0]
   146ac:	701a      	strb	r2, [r3, #0]
   146ae:	e068      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   146b0:	1cfb      	adds	r3, r7, #3
   146b2:	781b      	ldrb	r3, [r3, #0]
   146b4:	2b00      	cmp	r3, #0
   146b6:	d104      	bne.n	146c2 <lsm6dso_gy_data_rate_set+0x19a>
   146b8:	2317      	movs	r3, #23
   146ba:	18fb      	adds	r3, r7, r3
   146bc:	2202      	movs	r2, #2
   146be:	701a      	strb	r2, [r3, #0]
   146c0:	e05f      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   146c2:	1cfb      	adds	r3, r7, #3
   146c4:	781b      	ldrb	r3, [r3, #0]
   146c6:	2b01      	cmp	r3, #1
   146c8:	d104      	bne.n	146d4 <lsm6dso_gy_data_rate_set+0x1ac>
   146ca:	2317      	movs	r3, #23
   146cc:	18fb      	adds	r3, r7, r3
   146ce:	2202      	movs	r2, #2
   146d0:	701a      	strb	r2, [r3, #0]
   146d2:	e056      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   146d4:	2317      	movs	r3, #23
   146d6:	18fb      	adds	r3, r7, r3
   146d8:	1cfa      	adds	r2, r7, #3
   146da:	7812      	ldrb	r2, [r2, #0]
   146dc:	701a      	strb	r2, [r3, #0]
   146de:	e050      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   146e0:	1cfb      	adds	r3, r7, #3
   146e2:	781b      	ldrb	r3, [r3, #0]
   146e4:	2b00      	cmp	r3, #0
   146e6:	d104      	bne.n	146f2 <lsm6dso_gy_data_rate_set+0x1ca>
   146e8:	2317      	movs	r3, #23
   146ea:	18fb      	adds	r3, r7, r3
   146ec:	2203      	movs	r2, #3
   146ee:	701a      	strb	r2, [r3, #0]
   146f0:	e047      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   146f2:	1cfb      	adds	r3, r7, #3
   146f4:	781b      	ldrb	r3, [r3, #0]
   146f6:	2b01      	cmp	r3, #1
   146f8:	d104      	bne.n	14704 <lsm6dso_gy_data_rate_set+0x1dc>
   146fa:	2317      	movs	r3, #23
   146fc:	18fb      	adds	r3, r7, r3
   146fe:	2203      	movs	r2, #3
   14700:	701a      	strb	r2, [r3, #0]
   14702:	e03e      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   14704:	1cfb      	adds	r3, r7, #3
   14706:	781b      	ldrb	r3, [r3, #0]
   14708:	2b02      	cmp	r3, #2
   1470a:	d104      	bne.n	14716 <lsm6dso_gy_data_rate_set+0x1ee>
   1470c:	2317      	movs	r3, #23
   1470e:	18fb      	adds	r3, r7, r3
   14710:	2203      	movs	r2, #3
   14712:	701a      	strb	r2, [r3, #0]
   14714:	e035      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   14716:	2317      	movs	r3, #23
   14718:	18fb      	adds	r3, r7, r3
   1471a:	1cfa      	adds	r2, r7, #3
   1471c:	7812      	ldrb	r2, [r2, #0]
   1471e:	701a      	strb	r2, [r3, #0]
   14720:	e02f      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   14722:	1cfb      	adds	r3, r7, #3
   14724:	781b      	ldrb	r3, [r3, #0]
   14726:	2b00      	cmp	r3, #0
   14728:	d104      	bne.n	14734 <lsm6dso_gy_data_rate_set+0x20c>
   1472a:	2317      	movs	r3, #23
   1472c:	18fb      	adds	r3, r7, r3
   1472e:	2204      	movs	r2, #4
   14730:	701a      	strb	r2, [r3, #0]
   14732:	e026      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   14734:	1cfb      	adds	r3, r7, #3
   14736:	781b      	ldrb	r3, [r3, #0]
   14738:	2b01      	cmp	r3, #1
   1473a:	d104      	bne.n	14746 <lsm6dso_gy_data_rate_set+0x21e>
   1473c:	2317      	movs	r3, #23
   1473e:	18fb      	adds	r3, r7, r3
   14740:	2204      	movs	r2, #4
   14742:	701a      	strb	r2, [r3, #0]
   14744:	e01d      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   14746:	1cfb      	adds	r3, r7, #3
   14748:	781b      	ldrb	r3, [r3, #0]
   1474a:	2b02      	cmp	r3, #2
   1474c:	d104      	bne.n	14758 <lsm6dso_gy_data_rate_set+0x230>
   1474e:	2317      	movs	r3, #23
   14750:	18fb      	adds	r3, r7, r3
   14752:	2204      	movs	r2, #4
   14754:	701a      	strb	r2, [r3, #0]
   14756:	e014      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   14758:	1cfb      	adds	r3, r7, #3
   1475a:	781b      	ldrb	r3, [r3, #0]
   1475c:	2b03      	cmp	r3, #3
   1475e:	d104      	bne.n	1476a <lsm6dso_gy_data_rate_set+0x242>
   14760:	2317      	movs	r3, #23
   14762:	18fb      	adds	r3, r7, r3
   14764:	2204      	movs	r2, #4
   14766:	701a      	strb	r2, [r3, #0]
   14768:	e00b      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   1476a:	2317      	movs	r3, #23
   1476c:	18fb      	adds	r3, r7, r3
   1476e:	1cfa      	adds	r2, r7, #3
   14770:	7812      	ldrb	r2, [r2, #0]
   14772:	701a      	strb	r2, [r3, #0]
   14774:	e005      	b.n	14782 <lsm6dso_gy_data_rate_set+0x25a>
   14776:	2317      	movs	r3, #23
   14778:	18fb      	adds	r3, r7, r3
   1477a:	1cfa      	adds	r2, r7, #3
   1477c:	7812      	ldrb	r2, [r2, #0]
   1477e:	701a      	strb	r2, [r3, #0]
   14780:	46c0      	nop			; (mov r8, r8)
   14782:	693b      	ldr	r3, [r7, #16]
   14784:	2b00      	cmp	r3, #0
   14786:	d108      	bne.n	1479a <lsm6dso_gy_data_rate_set+0x272>
   14788:	2308      	movs	r3, #8
   1478a:	18fa      	adds	r2, r7, r3
   1478c:	6878      	ldr	r0, [r7, #4]
   1478e:	2301      	movs	r3, #1
   14790:	2111      	movs	r1, #17
   14792:	4c14      	ldr	r4, [pc, #80]	; (147e4 <lsm6dso_gy_data_rate_set+0x2bc>)
   14794:	47a0      	blx	r4
   14796:	0003      	movs	r3, r0
   14798:	613b      	str	r3, [r7, #16]
   1479a:	693b      	ldr	r3, [r7, #16]
   1479c:	2b00      	cmp	r3, #0
   1479e:	d118      	bne.n	147d2 <lsm6dso_gy_data_rate_set+0x2aa>
   147a0:	2317      	movs	r3, #23
   147a2:	18fb      	adds	r3, r7, r3
   147a4:	781b      	ldrb	r3, [r3, #0]
   147a6:	220f      	movs	r2, #15
   147a8:	4013      	ands	r3, r2
   147aa:	b2da      	uxtb	r2, r3
   147ac:	2308      	movs	r3, #8
   147ae:	18fb      	adds	r3, r7, r3
   147b0:	0110      	lsls	r0, r2, #4
   147b2:	781a      	ldrb	r2, [r3, #0]
   147b4:	210f      	movs	r1, #15
   147b6:	400a      	ands	r2, r1
   147b8:	1c11      	adds	r1, r2, #0
   147ba:	1c02      	adds	r2, r0, #0
   147bc:	430a      	orrs	r2, r1
   147be:	701a      	strb	r2, [r3, #0]
   147c0:	2308      	movs	r3, #8
   147c2:	18fa      	adds	r2, r7, r3
   147c4:	6878      	ldr	r0, [r7, #4]
   147c6:	2301      	movs	r3, #1
   147c8:	2111      	movs	r1, #17
   147ca:	4c07      	ldr	r4, [pc, #28]	; (147e8 <lsm6dso_gy_data_rate_set+0x2c0>)
   147cc:	47a0      	blx	r4
   147ce:	0003      	movs	r3, r0
   147d0:	613b      	str	r3, [r7, #16]
   147d2:	693b      	ldr	r3, [r7, #16]
   147d4:	0018      	movs	r0, r3
   147d6:	46bd      	mov	sp, r7
   147d8:	b007      	add	sp, #28
   147da:	bd90      	pop	{r4, r7, pc}
   147dc:	00014cd5 	.word	0x00014cd5
   147e0:	00014d29 	.word	0x00014d29
   147e4:	000140c9 	.word	0x000140c9
   147e8:	0001410f 	.word	0x0001410f

000147ec <lsm6dso_block_data_update_set>:
   147ec:	b590      	push	{r4, r7, lr}
   147ee:	b085      	sub	sp, #20
   147f0:	af00      	add	r7, sp, #0
   147f2:	6078      	str	r0, [r7, #4]
   147f4:	000a      	movs	r2, r1
   147f6:	1cfb      	adds	r3, r7, #3
   147f8:	701a      	strb	r2, [r3, #0]
   147fa:	2308      	movs	r3, #8
   147fc:	18fa      	adds	r2, r7, r3
   147fe:	6878      	ldr	r0, [r7, #4]
   14800:	2301      	movs	r3, #1
   14802:	2112      	movs	r1, #18
   14804:	4c12      	ldr	r4, [pc, #72]	; (14850 <lsm6dso_block_data_update_set+0x64>)
   14806:	47a0      	blx	r4
   14808:	0003      	movs	r3, r0
   1480a:	60fb      	str	r3, [r7, #12]
   1480c:	68fb      	ldr	r3, [r7, #12]
   1480e:	2b00      	cmp	r3, #0
   14810:	d119      	bne.n	14846 <lsm6dso_block_data_update_set+0x5a>
   14812:	1cfb      	adds	r3, r7, #3
   14814:	781b      	ldrb	r3, [r3, #0]
   14816:	2201      	movs	r2, #1
   14818:	4013      	ands	r3, r2
   1481a:	b2da      	uxtb	r2, r3
   1481c:	2308      	movs	r3, #8
   1481e:	18fb      	adds	r3, r7, r3
   14820:	2101      	movs	r1, #1
   14822:	400a      	ands	r2, r1
   14824:	0190      	lsls	r0, r2, #6
   14826:	781a      	ldrb	r2, [r3, #0]
   14828:	2140      	movs	r1, #64	; 0x40
   1482a:	438a      	bics	r2, r1
   1482c:	1c11      	adds	r1, r2, #0
   1482e:	1c02      	adds	r2, r0, #0
   14830:	430a      	orrs	r2, r1
   14832:	701a      	strb	r2, [r3, #0]
   14834:	2308      	movs	r3, #8
   14836:	18fa      	adds	r2, r7, r3
   14838:	6878      	ldr	r0, [r7, #4]
   1483a:	2301      	movs	r3, #1
   1483c:	2112      	movs	r1, #18
   1483e:	4c05      	ldr	r4, [pc, #20]	; (14854 <lsm6dso_block_data_update_set+0x68>)
   14840:	47a0      	blx	r4
   14842:	0003      	movs	r3, r0
   14844:	60fb      	str	r3, [r7, #12]
   14846:	68fb      	ldr	r3, [r7, #12]
   14848:	0018      	movs	r0, r3
   1484a:	46bd      	mov	sp, r7
   1484c:	b005      	add	sp, #20
   1484e:	bd90      	pop	{r4, r7, pc}
   14850:	000140c9 	.word	0x000140c9
   14854:	0001410f 	.word	0x0001410f

00014858 <lsm6dso_xl_offset_weight_set>:
   14858:	b590      	push	{r4, r7, lr}
   1485a:	b085      	sub	sp, #20
   1485c:	af00      	add	r7, sp, #0
   1485e:	6078      	str	r0, [r7, #4]
   14860:	000a      	movs	r2, r1
   14862:	1cfb      	adds	r3, r7, #3
   14864:	701a      	strb	r2, [r3, #0]
   14866:	2308      	movs	r3, #8
   14868:	18fa      	adds	r2, r7, r3
   1486a:	6878      	ldr	r0, [r7, #4]
   1486c:	2301      	movs	r3, #1
   1486e:	2115      	movs	r1, #21
   14870:	4c12      	ldr	r4, [pc, #72]	; (148bc <lsm6dso_xl_offset_weight_set+0x64>)
   14872:	47a0      	blx	r4
   14874:	0003      	movs	r3, r0
   14876:	60fb      	str	r3, [r7, #12]
   14878:	68fb      	ldr	r3, [r7, #12]
   1487a:	2b00      	cmp	r3, #0
   1487c:	d119      	bne.n	148b2 <lsm6dso_xl_offset_weight_set+0x5a>
   1487e:	1cfb      	adds	r3, r7, #3
   14880:	781b      	ldrb	r3, [r3, #0]
   14882:	2201      	movs	r2, #1
   14884:	4013      	ands	r3, r2
   14886:	b2da      	uxtb	r2, r3
   14888:	2308      	movs	r3, #8
   1488a:	18fb      	adds	r3, r7, r3
   1488c:	2101      	movs	r1, #1
   1488e:	400a      	ands	r2, r1
   14890:	00d0      	lsls	r0, r2, #3
   14892:	781a      	ldrb	r2, [r3, #0]
   14894:	2108      	movs	r1, #8
   14896:	438a      	bics	r2, r1
   14898:	1c11      	adds	r1, r2, #0
   1489a:	1c02      	adds	r2, r0, #0
   1489c:	430a      	orrs	r2, r1
   1489e:	701a      	strb	r2, [r3, #0]
   148a0:	2308      	movs	r3, #8
   148a2:	18fa      	adds	r2, r7, r3
   148a4:	6878      	ldr	r0, [r7, #4]
   148a6:	2301      	movs	r3, #1
   148a8:	2115      	movs	r1, #21
   148aa:	4c05      	ldr	r4, [pc, #20]	; (148c0 <lsm6dso_xl_offset_weight_set+0x68>)
   148ac:	47a0      	blx	r4
   148ae:	0003      	movs	r3, r0
   148b0:	60fb      	str	r3, [r7, #12]
   148b2:	68fb      	ldr	r3, [r7, #12]
   148b4:	0018      	movs	r0, r3
   148b6:	46bd      	mov	sp, r7
   148b8:	b005      	add	sp, #20
   148ba:	bd90      	pop	{r4, r7, pc}
   148bc:	000140c9 	.word	0x000140c9
   148c0:	0001410f 	.word	0x0001410f

000148c4 <lsm6dso_xl_flag_data_ready_get>:
   148c4:	b590      	push	{r4, r7, lr}
   148c6:	b085      	sub	sp, #20
   148c8:	af00      	add	r7, sp, #0
   148ca:	6078      	str	r0, [r7, #4]
   148cc:	6039      	str	r1, [r7, #0]
   148ce:	2308      	movs	r3, #8
   148d0:	18fa      	adds	r2, r7, r3
   148d2:	6878      	ldr	r0, [r7, #4]
   148d4:	2301      	movs	r3, #1
   148d6:	211e      	movs	r1, #30
   148d8:	4c08      	ldr	r4, [pc, #32]	; (148fc <lsm6dso_xl_flag_data_ready_get+0x38>)
   148da:	47a0      	blx	r4
   148dc:	0003      	movs	r3, r0
   148de:	60fb      	str	r3, [r7, #12]
   148e0:	2308      	movs	r3, #8
   148e2:	18fb      	adds	r3, r7, r3
   148e4:	781b      	ldrb	r3, [r3, #0]
   148e6:	07db      	lsls	r3, r3, #31
   148e8:	0fdb      	lsrs	r3, r3, #31
   148ea:	b2db      	uxtb	r3, r3
   148ec:	001a      	movs	r2, r3
   148ee:	683b      	ldr	r3, [r7, #0]
   148f0:	701a      	strb	r2, [r3, #0]
   148f2:	68fb      	ldr	r3, [r7, #12]
   148f4:	0018      	movs	r0, r3
   148f6:	46bd      	mov	sp, r7
   148f8:	b005      	add	sp, #20
   148fa:	bd90      	pop	{r4, r7, pc}
   148fc:	000140c9 	.word	0x000140c9

00014900 <lsm6dso_acceleration_raw_get>:
   14900:	b590      	push	{r4, r7, lr}
   14902:	b087      	sub	sp, #28
   14904:	af00      	add	r7, sp, #0
   14906:	6078      	str	r0, [r7, #4]
   14908:	6039      	str	r1, [r7, #0]
   1490a:	230c      	movs	r3, #12
   1490c:	18fa      	adds	r2, r7, r3
   1490e:	6878      	ldr	r0, [r7, #4]
   14910:	2306      	movs	r3, #6
   14912:	2128      	movs	r1, #40	; 0x28
   14914:	4c26      	ldr	r4, [pc, #152]	; (149b0 <lsm6dso_acceleration_raw_get+0xb0>)
   14916:	47a0      	blx	r4
   14918:	0003      	movs	r3, r0
   1491a:	617b      	str	r3, [r7, #20]
   1491c:	230c      	movs	r3, #12
   1491e:	18fb      	adds	r3, r7, r3
   14920:	785b      	ldrb	r3, [r3, #1]
   14922:	b21a      	sxth	r2, r3
   14924:	683b      	ldr	r3, [r7, #0]
   14926:	801a      	strh	r2, [r3, #0]
   14928:	683b      	ldr	r3, [r7, #0]
   1492a:	2200      	movs	r2, #0
   1492c:	5e9b      	ldrsh	r3, [r3, r2]
   1492e:	b29b      	uxth	r3, r3
   14930:	021b      	lsls	r3, r3, #8
   14932:	b29a      	uxth	r2, r3
   14934:	230c      	movs	r3, #12
   14936:	18fb      	adds	r3, r7, r3
   14938:	781b      	ldrb	r3, [r3, #0]
   1493a:	b29b      	uxth	r3, r3
   1493c:	18d3      	adds	r3, r2, r3
   1493e:	b29b      	uxth	r3, r3
   14940:	b21a      	sxth	r2, r3
   14942:	683b      	ldr	r3, [r7, #0]
   14944:	801a      	strh	r2, [r3, #0]
   14946:	683b      	ldr	r3, [r7, #0]
   14948:	3302      	adds	r3, #2
   1494a:	220c      	movs	r2, #12
   1494c:	18ba      	adds	r2, r7, r2
   1494e:	78d2      	ldrb	r2, [r2, #3]
   14950:	b212      	sxth	r2, r2
   14952:	801a      	strh	r2, [r3, #0]
   14954:	683b      	ldr	r3, [r7, #0]
   14956:	3302      	adds	r3, #2
   14958:	683a      	ldr	r2, [r7, #0]
   1495a:	3202      	adds	r2, #2
   1495c:	2100      	movs	r1, #0
   1495e:	5e52      	ldrsh	r2, [r2, r1]
   14960:	b292      	uxth	r2, r2
   14962:	0212      	lsls	r2, r2, #8
   14964:	b291      	uxth	r1, r2
   14966:	220c      	movs	r2, #12
   14968:	18ba      	adds	r2, r7, r2
   1496a:	7892      	ldrb	r2, [r2, #2]
   1496c:	b292      	uxth	r2, r2
   1496e:	188a      	adds	r2, r1, r2
   14970:	b292      	uxth	r2, r2
   14972:	b212      	sxth	r2, r2
   14974:	801a      	strh	r2, [r3, #0]
   14976:	683b      	ldr	r3, [r7, #0]
   14978:	3304      	adds	r3, #4
   1497a:	220c      	movs	r2, #12
   1497c:	18ba      	adds	r2, r7, r2
   1497e:	7952      	ldrb	r2, [r2, #5]
   14980:	b212      	sxth	r2, r2
   14982:	801a      	strh	r2, [r3, #0]
   14984:	683b      	ldr	r3, [r7, #0]
   14986:	3304      	adds	r3, #4
   14988:	683a      	ldr	r2, [r7, #0]
   1498a:	3204      	adds	r2, #4
   1498c:	2100      	movs	r1, #0
   1498e:	5e52      	ldrsh	r2, [r2, r1]
   14990:	b292      	uxth	r2, r2
   14992:	0212      	lsls	r2, r2, #8
   14994:	b291      	uxth	r1, r2
   14996:	220c      	movs	r2, #12
   14998:	18ba      	adds	r2, r7, r2
   1499a:	7912      	ldrb	r2, [r2, #4]
   1499c:	b292      	uxth	r2, r2
   1499e:	188a      	adds	r2, r1, r2
   149a0:	b292      	uxth	r2, r2
   149a2:	b212      	sxth	r2, r2
   149a4:	801a      	strh	r2, [r3, #0]
   149a6:	697b      	ldr	r3, [r7, #20]
   149a8:	0018      	movs	r0, r3
   149aa:	46bd      	mov	sp, r7
   149ac:	b007      	add	sp, #28
   149ae:	bd90      	pop	{r4, r7, pc}
   149b0:	000140c9 	.word	0x000140c9

000149b4 <lsm6dso_mem_bank_set>:
   149b4:	b590      	push	{r4, r7, lr}
   149b6:	b085      	sub	sp, #20
   149b8:	af00      	add	r7, sp, #0
   149ba:	6078      	str	r0, [r7, #4]
   149bc:	000a      	movs	r2, r1
   149be:	1cfb      	adds	r3, r7, #3
   149c0:	701a      	strb	r2, [r3, #0]
   149c2:	2308      	movs	r3, #8
   149c4:	18fa      	adds	r2, r7, r3
   149c6:	6878      	ldr	r0, [r7, #4]
   149c8:	2301      	movs	r3, #1
   149ca:	2101      	movs	r1, #1
   149cc:	4c11      	ldr	r4, [pc, #68]	; (14a14 <lsm6dso_mem_bank_set+0x60>)
   149ce:	47a0      	blx	r4
   149d0:	0003      	movs	r3, r0
   149d2:	60fb      	str	r3, [r7, #12]
   149d4:	68fb      	ldr	r3, [r7, #12]
   149d6:	2b00      	cmp	r3, #0
   149d8:	d117      	bne.n	14a0a <lsm6dso_mem_bank_set+0x56>
   149da:	1cfb      	adds	r3, r7, #3
   149dc:	781b      	ldrb	r3, [r3, #0]
   149de:	2203      	movs	r2, #3
   149e0:	4013      	ands	r3, r2
   149e2:	b2da      	uxtb	r2, r3
   149e4:	2308      	movs	r3, #8
   149e6:	18fb      	adds	r3, r7, r3
   149e8:	0190      	lsls	r0, r2, #6
   149ea:	781a      	ldrb	r2, [r3, #0]
   149ec:	213f      	movs	r1, #63	; 0x3f
   149ee:	400a      	ands	r2, r1
   149f0:	1c11      	adds	r1, r2, #0
   149f2:	1c02      	adds	r2, r0, #0
   149f4:	430a      	orrs	r2, r1
   149f6:	701a      	strb	r2, [r3, #0]
   149f8:	2308      	movs	r3, #8
   149fa:	18fa      	adds	r2, r7, r3
   149fc:	6878      	ldr	r0, [r7, #4]
   149fe:	2301      	movs	r3, #1
   14a00:	2101      	movs	r1, #1
   14a02:	4c05      	ldr	r4, [pc, #20]	; (14a18 <lsm6dso_mem_bank_set+0x64>)
   14a04:	47a0      	blx	r4
   14a06:	0003      	movs	r3, r0
   14a08:	60fb      	str	r3, [r7, #12]
   14a0a:	68fb      	ldr	r3, [r7, #12]
   14a0c:	0018      	movs	r0, r3
   14a0e:	46bd      	mov	sp, r7
   14a10:	b005      	add	sp, #20
   14a12:	bd90      	pop	{r4, r7, pc}
   14a14:	000140c9 	.word	0x000140c9
   14a18:	0001410f 	.word	0x0001410f

00014a1c <lsm6dso_device_id_get>:
   14a1c:	b590      	push	{r4, r7, lr}
   14a1e:	b085      	sub	sp, #20
   14a20:	af00      	add	r7, sp, #0
   14a22:	6078      	str	r0, [r7, #4]
   14a24:	6039      	str	r1, [r7, #0]
   14a26:	683a      	ldr	r2, [r7, #0]
   14a28:	6878      	ldr	r0, [r7, #4]
   14a2a:	2301      	movs	r3, #1
   14a2c:	210f      	movs	r1, #15
   14a2e:	4c04      	ldr	r4, [pc, #16]	; (14a40 <lsm6dso_device_id_get+0x24>)
   14a30:	47a0      	blx	r4
   14a32:	0003      	movs	r3, r0
   14a34:	60fb      	str	r3, [r7, #12]
   14a36:	68fb      	ldr	r3, [r7, #12]
   14a38:	0018      	movs	r0, r3
   14a3a:	46bd      	mov	sp, r7
   14a3c:	b005      	add	sp, #20
   14a3e:	bd90      	pop	{r4, r7, pc}
   14a40:	000140c9 	.word	0x000140c9

00014a44 <lsm6dso_reset_set>:
   14a44:	b590      	push	{r4, r7, lr}
   14a46:	b085      	sub	sp, #20
   14a48:	af00      	add	r7, sp, #0
   14a4a:	6078      	str	r0, [r7, #4]
   14a4c:	000a      	movs	r2, r1
   14a4e:	1cfb      	adds	r3, r7, #3
   14a50:	701a      	strb	r2, [r3, #0]
   14a52:	2308      	movs	r3, #8
   14a54:	18fa      	adds	r2, r7, r3
   14a56:	6878      	ldr	r0, [r7, #4]
   14a58:	2301      	movs	r3, #1
   14a5a:	2112      	movs	r1, #18
   14a5c:	4c12      	ldr	r4, [pc, #72]	; (14aa8 <lsm6dso_reset_set+0x64>)
   14a5e:	47a0      	blx	r4
   14a60:	0003      	movs	r3, r0
   14a62:	60fb      	str	r3, [r7, #12]
   14a64:	68fb      	ldr	r3, [r7, #12]
   14a66:	2b00      	cmp	r3, #0
   14a68:	d119      	bne.n	14a9e <lsm6dso_reset_set+0x5a>
   14a6a:	1cfb      	adds	r3, r7, #3
   14a6c:	781b      	ldrb	r3, [r3, #0]
   14a6e:	2201      	movs	r2, #1
   14a70:	4013      	ands	r3, r2
   14a72:	b2da      	uxtb	r2, r3
   14a74:	2308      	movs	r3, #8
   14a76:	18fb      	adds	r3, r7, r3
   14a78:	2101      	movs	r1, #1
   14a7a:	400a      	ands	r2, r1
   14a7c:	0010      	movs	r0, r2
   14a7e:	781a      	ldrb	r2, [r3, #0]
   14a80:	2101      	movs	r1, #1
   14a82:	438a      	bics	r2, r1
   14a84:	1c11      	adds	r1, r2, #0
   14a86:	1c02      	adds	r2, r0, #0
   14a88:	430a      	orrs	r2, r1
   14a8a:	701a      	strb	r2, [r3, #0]
   14a8c:	2308      	movs	r3, #8
   14a8e:	18fa      	adds	r2, r7, r3
   14a90:	6878      	ldr	r0, [r7, #4]
   14a92:	2301      	movs	r3, #1
   14a94:	2112      	movs	r1, #18
   14a96:	4c05      	ldr	r4, [pc, #20]	; (14aac <lsm6dso_reset_set+0x68>)
   14a98:	47a0      	blx	r4
   14a9a:	0003      	movs	r3, r0
   14a9c:	60fb      	str	r3, [r7, #12]
   14a9e:	68fb      	ldr	r3, [r7, #12]
   14aa0:	0018      	movs	r0, r3
   14aa2:	46bd      	mov	sp, r7
   14aa4:	b005      	add	sp, #20
   14aa6:	bd90      	pop	{r4, r7, pc}
   14aa8:	000140c9 	.word	0x000140c9
   14aac:	0001410f 	.word	0x0001410f

00014ab0 <lsm6dso_reset_get>:
   14ab0:	b590      	push	{r4, r7, lr}
   14ab2:	b085      	sub	sp, #20
   14ab4:	af00      	add	r7, sp, #0
   14ab6:	6078      	str	r0, [r7, #4]
   14ab8:	6039      	str	r1, [r7, #0]
   14aba:	2308      	movs	r3, #8
   14abc:	18fa      	adds	r2, r7, r3
   14abe:	6878      	ldr	r0, [r7, #4]
   14ac0:	2301      	movs	r3, #1
   14ac2:	2112      	movs	r1, #18
   14ac4:	4c08      	ldr	r4, [pc, #32]	; (14ae8 <lsm6dso_reset_get+0x38>)
   14ac6:	47a0      	blx	r4
   14ac8:	0003      	movs	r3, r0
   14aca:	60fb      	str	r3, [r7, #12]
   14acc:	2308      	movs	r3, #8
   14ace:	18fb      	adds	r3, r7, r3
   14ad0:	781b      	ldrb	r3, [r3, #0]
   14ad2:	07db      	lsls	r3, r3, #31
   14ad4:	0fdb      	lsrs	r3, r3, #31
   14ad6:	b2db      	uxtb	r3, r3
   14ad8:	001a      	movs	r2, r3
   14ada:	683b      	ldr	r3, [r7, #0]
   14adc:	701a      	strb	r2, [r3, #0]
   14ade:	68fb      	ldr	r3, [r7, #12]
   14ae0:	0018      	movs	r0, r3
   14ae2:	46bd      	mov	sp, r7
   14ae4:	b005      	add	sp, #20
   14ae6:	bd90      	pop	{r4, r7, pc}
   14ae8:	000140c9 	.word	0x000140c9

00014aec <lsm6dso_xl_filter_lp2_set>:
   14aec:	b590      	push	{r4, r7, lr}
   14aee:	b085      	sub	sp, #20
   14af0:	af00      	add	r7, sp, #0
   14af2:	6078      	str	r0, [r7, #4]
   14af4:	000a      	movs	r2, r1
   14af6:	1cfb      	adds	r3, r7, #3
   14af8:	701a      	strb	r2, [r3, #0]
   14afa:	2308      	movs	r3, #8
   14afc:	18fa      	adds	r2, r7, r3
   14afe:	6878      	ldr	r0, [r7, #4]
   14b00:	2301      	movs	r3, #1
   14b02:	2110      	movs	r1, #16
   14b04:	4c12      	ldr	r4, [pc, #72]	; (14b50 <lsm6dso_xl_filter_lp2_set+0x64>)
   14b06:	47a0      	blx	r4
   14b08:	0003      	movs	r3, r0
   14b0a:	60fb      	str	r3, [r7, #12]
   14b0c:	68fb      	ldr	r3, [r7, #12]
   14b0e:	2b00      	cmp	r3, #0
   14b10:	d119      	bne.n	14b46 <lsm6dso_xl_filter_lp2_set+0x5a>
   14b12:	1cfb      	adds	r3, r7, #3
   14b14:	781b      	ldrb	r3, [r3, #0]
   14b16:	2201      	movs	r2, #1
   14b18:	4013      	ands	r3, r2
   14b1a:	b2da      	uxtb	r2, r3
   14b1c:	2308      	movs	r3, #8
   14b1e:	18fb      	adds	r3, r7, r3
   14b20:	2101      	movs	r1, #1
   14b22:	400a      	ands	r2, r1
   14b24:	1890      	adds	r0, r2, r2
   14b26:	781a      	ldrb	r2, [r3, #0]
   14b28:	2102      	movs	r1, #2
   14b2a:	438a      	bics	r2, r1
   14b2c:	1c11      	adds	r1, r2, #0
   14b2e:	1c02      	adds	r2, r0, #0
   14b30:	430a      	orrs	r2, r1
   14b32:	701a      	strb	r2, [r3, #0]
   14b34:	2308      	movs	r3, #8
   14b36:	18fa      	adds	r2, r7, r3
   14b38:	6878      	ldr	r0, [r7, #4]
   14b3a:	2301      	movs	r3, #1
   14b3c:	2110      	movs	r1, #16
   14b3e:	4c05      	ldr	r4, [pc, #20]	; (14b54 <lsm6dso_xl_filter_lp2_set+0x68>)
   14b40:	47a0      	blx	r4
   14b42:	0003      	movs	r3, r0
   14b44:	60fb      	str	r3, [r7, #12]
   14b46:	68fb      	ldr	r3, [r7, #12]
   14b48:	0018      	movs	r0, r3
   14b4a:	46bd      	mov	sp, r7
   14b4c:	b005      	add	sp, #20
   14b4e:	bd90      	pop	{r4, r7, pc}
   14b50:	000140c9 	.word	0x000140c9
   14b54:	0001410f 	.word	0x0001410f

00014b58 <lsm6dso_xl_hp_path_on_out_set>:
   14b58:	b590      	push	{r4, r7, lr}
   14b5a:	b085      	sub	sp, #20
   14b5c:	af00      	add	r7, sp, #0
   14b5e:	6078      	str	r0, [r7, #4]
   14b60:	000a      	movs	r2, r1
   14b62:	1cfb      	adds	r3, r7, #3
   14b64:	701a      	strb	r2, [r3, #0]
   14b66:	2308      	movs	r3, #8
   14b68:	18fa      	adds	r2, r7, r3
   14b6a:	6878      	ldr	r0, [r7, #4]
   14b6c:	2301      	movs	r3, #1
   14b6e:	2117      	movs	r1, #23
   14b70:	4c25      	ldr	r4, [pc, #148]	; (14c08 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   14b72:	47a0      	blx	r4
   14b74:	0003      	movs	r3, r0
   14b76:	60fb      	str	r3, [r7, #12]
   14b78:	68fb      	ldr	r3, [r7, #12]
   14b7a:	2b00      	cmp	r3, #0
   14b7c:	d13f      	bne.n	14bfe <lsm6dso_xl_hp_path_on_out_set+0xa6>
   14b7e:	1cfb      	adds	r3, r7, #3
   14b80:	781b      	ldrb	r3, [r3, #0]
   14b82:	091b      	lsrs	r3, r3, #4
   14b84:	b2db      	uxtb	r3, r3
   14b86:	1c1a      	adds	r2, r3, #0
   14b88:	2301      	movs	r3, #1
   14b8a:	4013      	ands	r3, r2
   14b8c:	b2da      	uxtb	r2, r3
   14b8e:	2308      	movs	r3, #8
   14b90:	18fb      	adds	r3, r7, r3
   14b92:	2101      	movs	r1, #1
   14b94:	400a      	ands	r2, r1
   14b96:	0090      	lsls	r0, r2, #2
   14b98:	781a      	ldrb	r2, [r3, #0]
   14b9a:	2104      	movs	r1, #4
   14b9c:	438a      	bics	r2, r1
   14b9e:	1c11      	adds	r1, r2, #0
   14ba0:	1c02      	adds	r2, r0, #0
   14ba2:	430a      	orrs	r2, r1
   14ba4:	701a      	strb	r2, [r3, #0]
   14ba6:	1cfb      	adds	r3, r7, #3
   14ba8:	781b      	ldrb	r3, [r3, #0]
   14baa:	095b      	lsrs	r3, r3, #5
   14bac:	b2db      	uxtb	r3, r3
   14bae:	1c1a      	adds	r2, r3, #0
   14bb0:	2301      	movs	r3, #1
   14bb2:	4013      	ands	r3, r2
   14bb4:	b2da      	uxtb	r2, r3
   14bb6:	2308      	movs	r3, #8
   14bb8:	18fb      	adds	r3, r7, r3
   14bba:	2101      	movs	r1, #1
   14bbc:	400a      	ands	r2, r1
   14bbe:	0110      	lsls	r0, r2, #4
   14bc0:	781a      	ldrb	r2, [r3, #0]
   14bc2:	2110      	movs	r1, #16
   14bc4:	438a      	bics	r2, r1
   14bc6:	1c11      	adds	r1, r2, #0
   14bc8:	1c02      	adds	r2, r0, #0
   14bca:	430a      	orrs	r2, r1
   14bcc:	701a      	strb	r2, [r3, #0]
   14bce:	1cfb      	adds	r3, r7, #3
   14bd0:	781b      	ldrb	r3, [r3, #0]
   14bd2:	2207      	movs	r2, #7
   14bd4:	4013      	ands	r3, r2
   14bd6:	b2da      	uxtb	r2, r3
   14bd8:	2308      	movs	r3, #8
   14bda:	18fb      	adds	r3, r7, r3
   14bdc:	0150      	lsls	r0, r2, #5
   14bde:	781a      	ldrb	r2, [r3, #0]
   14be0:	211f      	movs	r1, #31
   14be2:	400a      	ands	r2, r1
   14be4:	1c11      	adds	r1, r2, #0
   14be6:	1c02      	adds	r2, r0, #0
   14be8:	430a      	orrs	r2, r1
   14bea:	701a      	strb	r2, [r3, #0]
   14bec:	2308      	movs	r3, #8
   14bee:	18fa      	adds	r2, r7, r3
   14bf0:	6878      	ldr	r0, [r7, #4]
   14bf2:	2301      	movs	r3, #1
   14bf4:	2117      	movs	r1, #23
   14bf6:	4c05      	ldr	r4, [pc, #20]	; (14c0c <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   14bf8:	47a0      	blx	r4
   14bfa:	0003      	movs	r3, r0
   14bfc:	60fb      	str	r3, [r7, #12]
   14bfe:	68fb      	ldr	r3, [r7, #12]
   14c00:	0018      	movs	r0, r3
   14c02:	46bd      	mov	sp, r7
   14c04:	b005      	add	sp, #20
   14c06:	bd90      	pop	{r4, r7, pc}
   14c08:	000140c9 	.word	0x000140c9
   14c0c:	0001410f 	.word	0x0001410f

00014c10 <lsm6dso_i3c_disable_set>:
   14c10:	b590      	push	{r4, r7, lr}
   14c12:	b087      	sub	sp, #28
   14c14:	af00      	add	r7, sp, #0
   14c16:	6078      	str	r0, [r7, #4]
   14c18:	000a      	movs	r2, r1
   14c1a:	1cfb      	adds	r3, r7, #3
   14c1c:	701a      	strb	r2, [r3, #0]
   14c1e:	230c      	movs	r3, #12
   14c20:	18fa      	adds	r2, r7, r3
   14c22:	6878      	ldr	r0, [r7, #4]
   14c24:	2301      	movs	r3, #1
   14c26:	2118      	movs	r1, #24
   14c28:	4c28      	ldr	r4, [pc, #160]	; (14ccc <lsm6dso_i3c_disable_set+0xbc>)
   14c2a:	47a0      	blx	r4
   14c2c:	0003      	movs	r3, r0
   14c2e:	617b      	str	r3, [r7, #20]
   14c30:	697b      	ldr	r3, [r7, #20]
   14c32:	2b00      	cmp	r3, #0
   14c34:	d11c      	bne.n	14c70 <lsm6dso_i3c_disable_set+0x60>
   14c36:	1cfb      	adds	r3, r7, #3
   14c38:	781b      	ldrb	r3, [r3, #0]
   14c3a:	09db      	lsrs	r3, r3, #7
   14c3c:	b2db      	uxtb	r3, r3
   14c3e:	1c1a      	adds	r2, r3, #0
   14c40:	2301      	movs	r3, #1
   14c42:	4013      	ands	r3, r2
   14c44:	b2da      	uxtb	r2, r3
   14c46:	230c      	movs	r3, #12
   14c48:	18fb      	adds	r3, r7, r3
   14c4a:	2101      	movs	r1, #1
   14c4c:	400a      	ands	r2, r1
   14c4e:	1890      	adds	r0, r2, r2
   14c50:	781a      	ldrb	r2, [r3, #0]
   14c52:	2102      	movs	r1, #2
   14c54:	438a      	bics	r2, r1
   14c56:	1c11      	adds	r1, r2, #0
   14c58:	1c02      	adds	r2, r0, #0
   14c5a:	430a      	orrs	r2, r1
   14c5c:	701a      	strb	r2, [r3, #0]
   14c5e:	230c      	movs	r3, #12
   14c60:	18fa      	adds	r2, r7, r3
   14c62:	6878      	ldr	r0, [r7, #4]
   14c64:	2301      	movs	r3, #1
   14c66:	2118      	movs	r1, #24
   14c68:	4c19      	ldr	r4, [pc, #100]	; (14cd0 <lsm6dso_i3c_disable_set+0xc0>)
   14c6a:	47a0      	blx	r4
   14c6c:	0003      	movs	r3, r0
   14c6e:	617b      	str	r3, [r7, #20]
   14c70:	697b      	ldr	r3, [r7, #20]
   14c72:	2b00      	cmp	r3, #0
   14c74:	d108      	bne.n	14c88 <lsm6dso_i3c_disable_set+0x78>
   14c76:	2310      	movs	r3, #16
   14c78:	18fa      	adds	r2, r7, r3
   14c7a:	6878      	ldr	r0, [r7, #4]
   14c7c:	2301      	movs	r3, #1
   14c7e:	2162      	movs	r1, #98	; 0x62
   14c80:	4c12      	ldr	r4, [pc, #72]	; (14ccc <lsm6dso_i3c_disable_set+0xbc>)
   14c82:	47a0      	blx	r4
   14c84:	0003      	movs	r3, r0
   14c86:	617b      	str	r3, [r7, #20]
   14c88:	697b      	ldr	r3, [r7, #20]
   14c8a:	2b00      	cmp	r3, #0
   14c8c:	d119      	bne.n	14cc2 <lsm6dso_i3c_disable_set+0xb2>
   14c8e:	1cfb      	adds	r3, r7, #3
   14c90:	781b      	ldrb	r3, [r3, #0]
   14c92:	2203      	movs	r2, #3
   14c94:	4013      	ands	r3, r2
   14c96:	b2da      	uxtb	r2, r3
   14c98:	2310      	movs	r3, #16
   14c9a:	18fb      	adds	r3, r7, r3
   14c9c:	2103      	movs	r1, #3
   14c9e:	400a      	ands	r2, r1
   14ca0:	00d0      	lsls	r0, r2, #3
   14ca2:	781a      	ldrb	r2, [r3, #0]
   14ca4:	2118      	movs	r1, #24
   14ca6:	438a      	bics	r2, r1
   14ca8:	1c11      	adds	r1, r2, #0
   14caa:	1c02      	adds	r2, r0, #0
   14cac:	430a      	orrs	r2, r1
   14cae:	701a      	strb	r2, [r3, #0]
   14cb0:	2310      	movs	r3, #16
   14cb2:	18fa      	adds	r2, r7, r3
   14cb4:	6878      	ldr	r0, [r7, #4]
   14cb6:	2301      	movs	r3, #1
   14cb8:	2162      	movs	r1, #98	; 0x62
   14cba:	4c05      	ldr	r4, [pc, #20]	; (14cd0 <lsm6dso_i3c_disable_set+0xc0>)
   14cbc:	47a0      	blx	r4
   14cbe:	0003      	movs	r3, r0
   14cc0:	617b      	str	r3, [r7, #20]
   14cc2:	697b      	ldr	r3, [r7, #20]
   14cc4:	0018      	movs	r0, r3
   14cc6:	46bd      	mov	sp, r7
   14cc8:	b007      	add	sp, #28
   14cca:	bd90      	pop	{r4, r7, pc}
   14ccc:	000140c9 	.word	0x000140c9
   14cd0:	0001410f 	.word	0x0001410f

00014cd4 <lsm6dso_fsm_enable_get>:
   14cd4:	b590      	push	{r4, r7, lr}
   14cd6:	b085      	sub	sp, #20
   14cd8:	af00      	add	r7, sp, #0
   14cda:	6078      	str	r0, [r7, #4]
   14cdc:	6039      	str	r1, [r7, #0]
   14cde:	687b      	ldr	r3, [r7, #4]
   14ce0:	2102      	movs	r1, #2
   14ce2:	0018      	movs	r0, r3
   14ce4:	4b0e      	ldr	r3, [pc, #56]	; (14d20 <lsm6dso_fsm_enable_get+0x4c>)
   14ce6:	4798      	blx	r3
   14ce8:	0003      	movs	r3, r0
   14cea:	60fb      	str	r3, [r7, #12]
   14cec:	68fb      	ldr	r3, [r7, #12]
   14cee:	2b00      	cmp	r3, #0
   14cf0:	d107      	bne.n	14d02 <lsm6dso_fsm_enable_get+0x2e>
   14cf2:	683a      	ldr	r2, [r7, #0]
   14cf4:	6878      	ldr	r0, [r7, #4]
   14cf6:	2302      	movs	r3, #2
   14cf8:	2146      	movs	r1, #70	; 0x46
   14cfa:	4c0a      	ldr	r4, [pc, #40]	; (14d24 <lsm6dso_fsm_enable_get+0x50>)
   14cfc:	47a0      	blx	r4
   14cfe:	0003      	movs	r3, r0
   14d00:	60fb      	str	r3, [r7, #12]
   14d02:	68fb      	ldr	r3, [r7, #12]
   14d04:	2b00      	cmp	r3, #0
   14d06:	d106      	bne.n	14d16 <lsm6dso_fsm_enable_get+0x42>
   14d08:	687b      	ldr	r3, [r7, #4]
   14d0a:	2100      	movs	r1, #0
   14d0c:	0018      	movs	r0, r3
   14d0e:	4b04      	ldr	r3, [pc, #16]	; (14d20 <lsm6dso_fsm_enable_get+0x4c>)
   14d10:	4798      	blx	r3
   14d12:	0003      	movs	r3, r0
   14d14:	60fb      	str	r3, [r7, #12]
   14d16:	68fb      	ldr	r3, [r7, #12]
   14d18:	0018      	movs	r0, r3
   14d1a:	46bd      	mov	sp, r7
   14d1c:	b005      	add	sp, #20
   14d1e:	bd90      	pop	{r4, r7, pc}
   14d20:	000149b5 	.word	0x000149b5
   14d24:	000140c9 	.word	0x000140c9

00014d28 <lsm6dso_fsm_data_rate_get>:
   14d28:	b590      	push	{r4, r7, lr}
   14d2a:	b085      	sub	sp, #20
   14d2c:	af00      	add	r7, sp, #0
   14d2e:	6078      	str	r0, [r7, #4]
   14d30:	6039      	str	r1, [r7, #0]
   14d32:	687b      	ldr	r3, [r7, #4]
   14d34:	2102      	movs	r1, #2
   14d36:	0018      	movs	r0, r3
   14d38:	4b21      	ldr	r3, [pc, #132]	; (14dc0 <lsm6dso_fsm_data_rate_get+0x98>)
   14d3a:	4798      	blx	r3
   14d3c:	0003      	movs	r3, r0
   14d3e:	60fb      	str	r3, [r7, #12]
   14d40:	68fb      	ldr	r3, [r7, #12]
   14d42:	2b00      	cmp	r3, #0
   14d44:	d108      	bne.n	14d58 <lsm6dso_fsm_data_rate_get+0x30>
   14d46:	2308      	movs	r3, #8
   14d48:	18fa      	adds	r2, r7, r3
   14d4a:	6878      	ldr	r0, [r7, #4]
   14d4c:	2301      	movs	r3, #1
   14d4e:	215f      	movs	r1, #95	; 0x5f
   14d50:	4c1c      	ldr	r4, [pc, #112]	; (14dc4 <lsm6dso_fsm_data_rate_get+0x9c>)
   14d52:	47a0      	blx	r4
   14d54:	0003      	movs	r3, r0
   14d56:	60fb      	str	r3, [r7, #12]
   14d58:	68fb      	ldr	r3, [r7, #12]
   14d5a:	2b00      	cmp	r3, #0
   14d5c:	d12b      	bne.n	14db6 <lsm6dso_fsm_data_rate_get+0x8e>
   14d5e:	2308      	movs	r3, #8
   14d60:	18fb      	adds	r3, r7, r3
   14d62:	781b      	ldrb	r3, [r3, #0]
   14d64:	06db      	lsls	r3, r3, #27
   14d66:	0f9b      	lsrs	r3, r3, #30
   14d68:	b2db      	uxtb	r3, r3
   14d6a:	2b01      	cmp	r3, #1
   14d6c:	d00c      	beq.n	14d88 <lsm6dso_fsm_data_rate_get+0x60>
   14d6e:	dc02      	bgt.n	14d76 <lsm6dso_fsm_data_rate_get+0x4e>
   14d70:	2b00      	cmp	r3, #0
   14d72:	d005      	beq.n	14d80 <lsm6dso_fsm_data_rate_get+0x58>
   14d74:	e014      	b.n	14da0 <lsm6dso_fsm_data_rate_get+0x78>
   14d76:	2b02      	cmp	r3, #2
   14d78:	d00a      	beq.n	14d90 <lsm6dso_fsm_data_rate_get+0x68>
   14d7a:	2b03      	cmp	r3, #3
   14d7c:	d00c      	beq.n	14d98 <lsm6dso_fsm_data_rate_get+0x70>
   14d7e:	e00f      	b.n	14da0 <lsm6dso_fsm_data_rate_get+0x78>
   14d80:	683b      	ldr	r3, [r7, #0]
   14d82:	2200      	movs	r2, #0
   14d84:	701a      	strb	r2, [r3, #0]
   14d86:	e00f      	b.n	14da8 <lsm6dso_fsm_data_rate_get+0x80>
   14d88:	683b      	ldr	r3, [r7, #0]
   14d8a:	2201      	movs	r2, #1
   14d8c:	701a      	strb	r2, [r3, #0]
   14d8e:	e00b      	b.n	14da8 <lsm6dso_fsm_data_rate_get+0x80>
   14d90:	683b      	ldr	r3, [r7, #0]
   14d92:	2202      	movs	r2, #2
   14d94:	701a      	strb	r2, [r3, #0]
   14d96:	e007      	b.n	14da8 <lsm6dso_fsm_data_rate_get+0x80>
   14d98:	683b      	ldr	r3, [r7, #0]
   14d9a:	2203      	movs	r2, #3
   14d9c:	701a      	strb	r2, [r3, #0]
   14d9e:	e003      	b.n	14da8 <lsm6dso_fsm_data_rate_get+0x80>
   14da0:	683b      	ldr	r3, [r7, #0]
   14da2:	2200      	movs	r2, #0
   14da4:	701a      	strb	r2, [r3, #0]
   14da6:	46c0      	nop			; (mov r8, r8)
   14da8:	687b      	ldr	r3, [r7, #4]
   14daa:	2100      	movs	r1, #0
   14dac:	0018      	movs	r0, r3
   14dae:	4b04      	ldr	r3, [pc, #16]	; (14dc0 <lsm6dso_fsm_data_rate_get+0x98>)
   14db0:	4798      	blx	r3
   14db2:	0003      	movs	r3, r0
   14db4:	60fb      	str	r3, [r7, #12]
   14db6:	68fb      	ldr	r3, [r7, #12]
   14db8:	0018      	movs	r0, r3
   14dba:	46bd      	mov	sp, r7
   14dbc:	b005      	add	sp, #20
   14dbe:	bd90      	pop	{r4, r7, pc}
   14dc0:	000149b5 	.word	0x000149b5
   14dc4:	000140c9 	.word	0x000140c9

00014dc8 <platform_write>:
   14dc8:	b580      	push	{r7, lr}
   14dca:	b086      	sub	sp, #24
   14dcc:	af00      	add	r7, sp, #0
   14dce:	60f8      	str	r0, [r7, #12]
   14dd0:	0008      	movs	r0, r1
   14dd2:	607a      	str	r2, [r7, #4]
   14dd4:	0019      	movs	r1, r3
   14dd6:	230b      	movs	r3, #11
   14dd8:	18fb      	adds	r3, r7, r3
   14dda:	1c02      	adds	r2, r0, #0
   14ddc:	701a      	strb	r2, [r3, #0]
   14dde:	2308      	movs	r3, #8
   14de0:	18fb      	adds	r3, r7, r3
   14de2:	1c0a      	adds	r2, r1, #0
   14de4:	801a      	strh	r2, [r3, #0]
   14de6:	2308      	movs	r3, #8
   14de8:	18fb      	adds	r3, r7, r3
   14dea:	881b      	ldrh	r3, [r3, #0]
   14dec:	2b3f      	cmp	r3, #63	; 0x3f
   14dee:	d902      	bls.n	14df6 <platform_write+0x2e>
   14df0:	2301      	movs	r3, #1
   14df2:	425b      	negs	r3, r3
   14df4:	e030      	b.n	14e58 <platform_write+0x90>
   14df6:	4b1a      	ldr	r3, [pc, #104]	; (14e60 <platform_write+0x98>)
   14df8:	220b      	movs	r2, #11
   14dfa:	18ba      	adds	r2, r7, r2
   14dfc:	7812      	ldrb	r2, [r2, #0]
   14dfe:	701a      	strb	r2, [r3, #0]
   14e00:	2301      	movs	r3, #1
   14e02:	617b      	str	r3, [r7, #20]
   14e04:	e00c      	b.n	14e20 <platform_write+0x58>
   14e06:	697b      	ldr	r3, [r7, #20]
   14e08:	3b01      	subs	r3, #1
   14e0a:	687a      	ldr	r2, [r7, #4]
   14e0c:	18d3      	adds	r3, r2, r3
   14e0e:	7819      	ldrb	r1, [r3, #0]
   14e10:	4a13      	ldr	r2, [pc, #76]	; (14e60 <platform_write+0x98>)
   14e12:	697b      	ldr	r3, [r7, #20]
   14e14:	18d3      	adds	r3, r2, r3
   14e16:	1c0a      	adds	r2, r1, #0
   14e18:	701a      	strb	r2, [r3, #0]
   14e1a:	697b      	ldr	r3, [r7, #20]
   14e1c:	3301      	adds	r3, #1
   14e1e:	617b      	str	r3, [r7, #20]
   14e20:	2308      	movs	r3, #8
   14e22:	18fb      	adds	r3, r7, r3
   14e24:	881a      	ldrh	r2, [r3, #0]
   14e26:	697b      	ldr	r3, [r7, #20]
   14e28:	429a      	cmp	r2, r3
   14e2a:	daec      	bge.n	14e06 <platform_write+0x3e>
   14e2c:	2308      	movs	r3, #8
   14e2e:	18fb      	adds	r3, r7, r3
   14e30:	881b      	ldrh	r3, [r3, #0]
   14e32:	3301      	adds	r3, #1
   14e34:	b29a      	uxth	r2, r3
   14e36:	4b0b      	ldr	r3, [pc, #44]	; (14e64 <platform_write+0x9c>)
   14e38:	81da      	strh	r2, [r3, #14]
   14e3a:	4b0a      	ldr	r3, [pc, #40]	; (14e64 <platform_write+0x9c>)
   14e3c:	4a08      	ldr	r2, [pc, #32]	; (14e60 <platform_write+0x98>)
   14e3e:	605a      	str	r2, [r3, #4]
   14e40:	4b08      	ldr	r3, [pc, #32]	; (14e64 <platform_write+0x9c>)
   14e42:	2200      	movs	r2, #0
   14e44:	609a      	str	r2, [r3, #8]
   14e46:	4b07      	ldr	r3, [pc, #28]	; (14e64 <platform_write+0x9c>)
   14e48:	2200      	movs	r2, #0
   14e4a:	819a      	strh	r2, [r3, #12]
   14e4c:	4b05      	ldr	r3, [pc, #20]	; (14e64 <platform_write+0x9c>)
   14e4e:	21c8      	movs	r1, #200	; 0xc8
   14e50:	0018      	movs	r0, r3
   14e52:	4b05      	ldr	r3, [pc, #20]	; (14e68 <platform_write+0xa0>)
   14e54:	4798      	blx	r3
   14e56:	0003      	movs	r3, r0
   14e58:	0018      	movs	r0, r3
   14e5a:	46bd      	mov	sp, r7
   14e5c:	b006      	add	sp, #24
   14e5e:	bd80      	pop	{r7, pc}
   14e60:	200043cc 	.word	0x200043cc
   14e64:	20000020 	.word	0x20000020
   14e68:	00013e01 	.word	0x00013e01

00014e6c <platform_read>:
   14e6c:	b580      	push	{r7, lr}
   14e6e:	b084      	sub	sp, #16
   14e70:	af00      	add	r7, sp, #0
   14e72:	60f8      	str	r0, [r7, #12]
   14e74:	0008      	movs	r0, r1
   14e76:	607a      	str	r2, [r7, #4]
   14e78:	0019      	movs	r1, r3
   14e7a:	230b      	movs	r3, #11
   14e7c:	18fb      	adds	r3, r7, r3
   14e7e:	1c02      	adds	r2, r0, #0
   14e80:	701a      	strb	r2, [r3, #0]
   14e82:	2308      	movs	r3, #8
   14e84:	18fb      	adds	r3, r7, r3
   14e86:	1c0a      	adds	r2, r1, #0
   14e88:	801a      	strh	r2, [r3, #0]
   14e8a:	4b0d      	ldr	r3, [pc, #52]	; (14ec0 <platform_read+0x54>)
   14e8c:	2208      	movs	r2, #8
   14e8e:	18ba      	adds	r2, r7, r2
   14e90:	8812      	ldrh	r2, [r2, #0]
   14e92:	819a      	strh	r2, [r3, #12]
   14e94:	4b0a      	ldr	r3, [pc, #40]	; (14ec0 <platform_read+0x54>)
   14e96:	687a      	ldr	r2, [r7, #4]
   14e98:	609a      	str	r2, [r3, #8]
   14e9a:	4b09      	ldr	r3, [pc, #36]	; (14ec0 <platform_read+0x54>)
   14e9c:	2201      	movs	r2, #1
   14e9e:	81da      	strh	r2, [r3, #14]
   14ea0:	4b07      	ldr	r3, [pc, #28]	; (14ec0 <platform_read+0x54>)
   14ea2:	220b      	movs	r2, #11
   14ea4:	18ba      	adds	r2, r7, r2
   14ea6:	605a      	str	r2, [r3, #4]
   14ea8:	4b05      	ldr	r3, [pc, #20]	; (14ec0 <platform_read+0x54>)
   14eaa:	22c8      	movs	r2, #200	; 0xc8
   14eac:	2105      	movs	r1, #5
   14eae:	0018      	movs	r0, r3
   14eb0:	4b04      	ldr	r3, [pc, #16]	; (14ec4 <platform_read+0x58>)
   14eb2:	4798      	blx	r3
   14eb4:	0003      	movs	r3, r0
   14eb6:	0018      	movs	r0, r3
   14eb8:	46bd      	mov	sp, r7
   14eba:	b004      	add	sp, #16
   14ebc:	bd80      	pop	{r7, pc}
   14ebe:	46c0      	nop			; (mov r8, r8)
   14ec0:	20000020 	.word	0x20000020
   14ec4:	00013ed9 	.word	0x00013ed9

00014ec8 <GetImuStruct>:
   14ec8:	b580      	push	{r7, lr}
   14eca:	af00      	add	r7, sp, #0
   14ecc:	4b01      	ldr	r3, [pc, #4]	; (14ed4 <GetImuStruct+0xc>)
   14ece:	0018      	movs	r0, r3
   14ed0:	46bd      	mov	sp, r7
   14ed2:	bd80      	pop	{r7, pc}
   14ed4:	20000014 	.word	0x20000014

00014ed8 <InitImu>:
   14ed8:	b580      	push	{r7, lr}
   14eda:	b082      	sub	sp, #8
   14edc:	af00      	add	r7, sp, #0
   14ede:	2300      	movs	r3, #0
   14ee0:	607b      	str	r3, [r7, #4]
   14ee2:	4b23      	ldr	r3, [pc, #140]	; (14f70 <InitImu+0x98>)
   14ee4:	2101      	movs	r1, #1
   14ee6:	0018      	movs	r0, r3
   14ee8:	4b22      	ldr	r3, [pc, #136]	; (14f74 <InitImu+0x9c>)
   14eea:	4798      	blx	r3
   14eec:	0003      	movs	r3, r0
   14eee:	607b      	str	r3, [r7, #4]
   14ef0:	1cfa      	adds	r2, r7, #3
   14ef2:	4b1f      	ldr	r3, [pc, #124]	; (14f70 <InitImu+0x98>)
   14ef4:	0011      	movs	r1, r2
   14ef6:	0018      	movs	r0, r3
   14ef8:	4b1f      	ldr	r3, [pc, #124]	; (14f78 <InitImu+0xa0>)
   14efa:	4798      	blx	r3
   14efc:	0002      	movs	r2, r0
   14efe:	687b      	ldr	r3, [r7, #4]
   14f00:	4313      	orrs	r3, r2
   14f02:	607b      	str	r3, [r7, #4]
   14f04:	1cfb      	adds	r3, r7, #3
   14f06:	781b      	ldrb	r3, [r3, #0]
   14f08:	2b00      	cmp	r3, #0
   14f0a:	d1f1      	bne.n	14ef0 <InitImu+0x18>
   14f0c:	4b18      	ldr	r3, [pc, #96]	; (14f70 <InitImu+0x98>)
   14f0e:	2180      	movs	r1, #128	; 0x80
   14f10:	0018      	movs	r0, r3
   14f12:	4b1a      	ldr	r3, [pc, #104]	; (14f7c <InitImu+0xa4>)
   14f14:	4798      	blx	r3
   14f16:	4b16      	ldr	r3, [pc, #88]	; (14f70 <InitImu+0x98>)
   14f18:	2101      	movs	r1, #1
   14f1a:	0018      	movs	r0, r3
   14f1c:	4b18      	ldr	r3, [pc, #96]	; (14f80 <InitImu+0xa8>)
   14f1e:	4798      	blx	r3
   14f20:	4b13      	ldr	r3, [pc, #76]	; (14f70 <InitImu+0x98>)
   14f22:	2100      	movs	r1, #0
   14f24:	0018      	movs	r0, r3
   14f26:	4b17      	ldr	r3, [pc, #92]	; (14f84 <InitImu+0xac>)
   14f28:	4798      	blx	r3
   14f2a:	4b11      	ldr	r3, [pc, #68]	; (14f70 <InitImu+0x98>)
   14f2c:	2101      	movs	r1, #1
   14f2e:	0018      	movs	r0, r3
   14f30:	4b15      	ldr	r3, [pc, #84]	; (14f88 <InitImu+0xb0>)
   14f32:	4798      	blx	r3
   14f34:	4b0e      	ldr	r3, [pc, #56]	; (14f70 <InitImu+0x98>)
   14f36:	2101      	movs	r1, #1
   14f38:	0018      	movs	r0, r3
   14f3a:	4b14      	ldr	r3, [pc, #80]	; (14f8c <InitImu+0xb4>)
   14f3c:	4798      	blx	r3
   14f3e:	4b0c      	ldr	r3, [pc, #48]	; (14f70 <InitImu+0x98>)
   14f40:	2100      	movs	r1, #0
   14f42:	0018      	movs	r0, r3
   14f44:	4b12      	ldr	r3, [pc, #72]	; (14f90 <InitImu+0xb8>)
   14f46:	4798      	blx	r3
   14f48:	4b09      	ldr	r3, [pc, #36]	; (14f70 <InitImu+0x98>)
   14f4a:	2106      	movs	r1, #6
   14f4c:	0018      	movs	r0, r3
   14f4e:	4b11      	ldr	r3, [pc, #68]	; (14f94 <InitImu+0xbc>)
   14f50:	4798      	blx	r3
   14f52:	4b07      	ldr	r3, [pc, #28]	; (14f70 <InitImu+0x98>)
   14f54:	2104      	movs	r1, #4
   14f56:	0018      	movs	r0, r3
   14f58:	4b0f      	ldr	r3, [pc, #60]	; (14f98 <InitImu+0xc0>)
   14f5a:	4798      	blx	r3
   14f5c:	4b04      	ldr	r3, [pc, #16]	; (14f70 <InitImu+0x98>)
   14f5e:	2101      	movs	r1, #1
   14f60:	0018      	movs	r0, r3
   14f62:	4b0e      	ldr	r3, [pc, #56]	; (14f9c <InitImu+0xc4>)
   14f64:	4798      	blx	r3
   14f66:	687b      	ldr	r3, [r7, #4]
   14f68:	0018      	movs	r0, r3
   14f6a:	46bd      	mov	sp, r7
   14f6c:	b002      	add	sp, #8
   14f6e:	bd80      	pop	{r7, pc}
   14f70:	20000014 	.word	0x20000014
   14f74:	00014a45 	.word	0x00014a45
   14f78:	00014ab1 	.word	0x00014ab1
   14f7c:	00014c11 	.word	0x00014c11
   14f80:	000147ed 	.word	0x000147ed
   14f84:	00014859 	.word	0x00014859
   14f88:	000141f9 	.word	0x000141f9
   14f8c:	00014529 	.word	0x00014529
   14f90:	0001418d 	.word	0x0001418d
   14f94:	000144bd 	.word	0x000144bd
   14f98:	00014b59 	.word	0x00014b59
   14f9c:	00014aed 	.word	0x00014aed

00014fa0 <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(uint8_t neotrellis_addr)
{
   14fa0:	b580      	push	{r7, lr}
   14fa2:	b084      	sub	sp, #16
   14fa4:	af00      	add	r7, sp, #0
   14fa6:	0002      	movs	r2, r0
   14fa8:	1dfb      	adds	r3, r7, #7
   14faa:	701a      	strb	r2, [r3, #0]
    uint8_t readData[2];
    seesawData.address = neotrellis_addr;
   14fac:	4b3c      	ldr	r3, [pc, #240]	; (150a0 <InitializeSeesaw+0x100>)
   14fae:	1dfa      	adds	r2, r7, #7
   14fb0:	7812      	ldrb	r2, [r2, #0]
   14fb2:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
   14fb4:	4b3a      	ldr	r3, [pc, #232]	; (150a0 <InitializeSeesaw+0x100>)
   14fb6:	4a3b      	ldr	r2, [pc, #236]	; (150a4 <InitializeSeesaw+0x104>)
   14fb8:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
   14fba:	4b39      	ldr	r3, [pc, #228]	; (150a0 <InitializeSeesaw+0x100>)
   14fbc:	2202      	movs	r2, #2
   14fbe:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
   14fc0:	4b37      	ldr	r3, [pc, #220]	; (150a0 <InitializeSeesaw+0x100>)
   14fc2:	2208      	movs	r2, #8
   14fc4:	18ba      	adds	r2, r7, r2
   14fc6:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   14fc8:	4b35      	ldr	r3, [pc, #212]	; (150a0 <InitializeSeesaw+0x100>)
   14fca:	2201      	movs	r2, #1
   14fcc:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
   14fce:	4b34      	ldr	r3, [pc, #208]	; (150a0 <InitializeSeesaw+0x100>)
   14fd0:	2264      	movs	r2, #100	; 0x64
   14fd2:	2100      	movs	r1, #0
   14fd4:	0018      	movs	r0, r3
   14fd6:	4b34      	ldr	r3, [pc, #208]	; (150a8 <InitializeSeesaw+0x108>)
   14fd8:	4798      	blx	r3
   14fda:	0003      	movs	r3, r0
   14fdc:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   14fde:	68fb      	ldr	r3, [r7, #12]
   14fe0:	2b00      	cmp	r3, #0
   14fe2:	d004      	beq.n	14fee <InitializeSeesaw+0x4e>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   14fe4:	4b31      	ldr	r3, [pc, #196]	; (150ac <InitializeSeesaw+0x10c>)
   14fe6:	0018      	movs	r0, r3
   14fe8:	4b31      	ldr	r3, [pc, #196]	; (150b0 <InitializeSeesaw+0x110>)
   14fea:	4798      	blx	r3
   14fec:	e00d      	b.n	1500a <InitializeSeesaw+0x6a>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
   14fee:	2308      	movs	r3, #8
   14ff0:	18fb      	adds	r3, r7, r3
   14ff2:	781b      	ldrb	r3, [r3, #0]
   14ff4:	2b55      	cmp	r3, #85	; 0x55
   14ff6:	d004      	beq.n	15002 <InitializeSeesaw+0x62>
            SerialConsoleWriteString("Error/r/n");
   14ff8:	4b2e      	ldr	r3, [pc, #184]	; (150b4 <InitializeSeesaw+0x114>)
   14ffa:	0018      	movs	r0, r3
   14ffc:	4b2c      	ldr	r3, [pc, #176]	; (150b0 <InitializeSeesaw+0x110>)
   14ffe:	4798      	blx	r3
   15000:	e003      	b.n	1500a <InitializeSeesaw+0x6a>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
   15002:	4b2d      	ldr	r3, [pc, #180]	; (150b8 <InitializeSeesaw+0x118>)
   15004:	0018      	movs	r0, r3
   15006:	4b2a      	ldr	r3, [pc, #168]	; (150b0 <InitializeSeesaw+0x110>)
   15008:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
   1500a:	4b25      	ldr	r3, [pc, #148]	; (150a0 <InitializeSeesaw+0x100>)
   1500c:	4a2b      	ldr	r2, [pc, #172]	; (150bc <InitializeSeesaw+0x11c>)
   1500e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
   15010:	4b23      	ldr	r3, [pc, #140]	; (150a0 <InitializeSeesaw+0x100>)
   15012:	2203      	movs	r2, #3
   15014:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15016:	4b22      	ldr	r3, [pc, #136]	; (150a0 <InitializeSeesaw+0x100>)
   15018:	2164      	movs	r1, #100	; 0x64
   1501a:	0018      	movs	r0, r3
   1501c:	4b28      	ldr	r3, [pc, #160]	; (150c0 <InitializeSeesaw+0x120>)
   1501e:	4798      	blx	r3
   15020:	0003      	movs	r3, r0
   15022:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   15024:	68fb      	ldr	r3, [r7, #12]
   15026:	2b00      	cmp	r3, #0
   15028:	d003      	beq.n	15032 <InitializeSeesaw+0x92>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   1502a:	4b26      	ldr	r3, [pc, #152]	; (150c4 <InitializeSeesaw+0x124>)
   1502c:	0018      	movs	r0, r3
   1502e:	4b20      	ldr	r3, [pc, #128]	; (150b0 <InitializeSeesaw+0x110>)
   15030:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
   15032:	4b1b      	ldr	r3, [pc, #108]	; (150a0 <InitializeSeesaw+0x100>)
   15034:	4a24      	ldr	r2, [pc, #144]	; (150c8 <InitializeSeesaw+0x128>)
   15036:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
   15038:	4b19      	ldr	r3, [pc, #100]	; (150a0 <InitializeSeesaw+0x100>)
   1503a:	2203      	movs	r2, #3
   1503c:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   1503e:	4b18      	ldr	r3, [pc, #96]	; (150a0 <InitializeSeesaw+0x100>)
   15040:	2164      	movs	r1, #100	; 0x64
   15042:	0018      	movs	r0, r3
   15044:	4b1e      	ldr	r3, [pc, #120]	; (150c0 <InitializeSeesaw+0x120>)
   15046:	4798      	blx	r3
   15048:	0003      	movs	r3, r0
   1504a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   1504c:	68fb      	ldr	r3, [r7, #12]
   1504e:	2b00      	cmp	r3, #0
   15050:	d003      	beq.n	1505a <InitializeSeesaw+0xba>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   15052:	4b1e      	ldr	r3, [pc, #120]	; (150cc <InitializeSeesaw+0x12c>)
   15054:	0018      	movs	r0, r3
   15056:	4b16      	ldr	r3, [pc, #88]	; (150b0 <InitializeSeesaw+0x110>)
   15058:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
   1505a:	4b11      	ldr	r3, [pc, #68]	; (150a0 <InitializeSeesaw+0x100>)
   1505c:	4a1c      	ldr	r2, [pc, #112]	; (150d0 <InitializeSeesaw+0x130>)
   1505e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
   15060:	4b0f      	ldr	r3, [pc, #60]	; (150a0 <InitializeSeesaw+0x100>)
   15062:	2204      	movs	r2, #4
   15064:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15066:	4b0e      	ldr	r3, [pc, #56]	; (150a0 <InitializeSeesaw+0x100>)
   15068:	2164      	movs	r1, #100	; 0x64
   1506a:	0018      	movs	r0, r3
   1506c:	4b14      	ldr	r3, [pc, #80]	; (150c0 <InitializeSeesaw+0x120>)
   1506e:	4798      	blx	r3
   15070:	0003      	movs	r3, r0
   15072:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   15074:	68fb      	ldr	r3, [r7, #12]
   15076:	2b00      	cmp	r3, #0
   15078:	d003      	beq.n	15082 <InitializeSeesaw+0xe2>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   1507a:	4b16      	ldr	r3, [pc, #88]	; (150d4 <InitializeSeesaw+0x134>)
   1507c:	0018      	movs	r0, r3
   1507e:	4b0c      	ldr	r3, [pc, #48]	; (150b0 <InitializeSeesaw+0x110>)
   15080:	4798      	blx	r3
    }

    SeesawTurnOnLedTest(neotrellis_addr);
   15082:	1dfb      	adds	r3, r7, #7
   15084:	781b      	ldrb	r3, [r3, #0]
   15086:	0018      	movs	r0, r3
   15088:	4b13      	ldr	r3, [pc, #76]	; (150d8 <InitializeSeesaw+0x138>)
   1508a:	4798      	blx	r3

    SeesawInitializeKeypad(neotrellis_addr);
   1508c:	1dfb      	adds	r3, r7, #7
   1508e:	781b      	ldrb	r3, [r3, #0]
   15090:	0018      	movs	r0, r3
   15092:	4b12      	ldr	r3, [pc, #72]	; (150dc <InitializeSeesaw+0x13c>)
   15094:	4798      	blx	r3
    return error;
   15096:	68fb      	ldr	r3, [r7, #12]
}
   15098:	0018      	movs	r0, r3
   1509a:	46bd      	mov	sp, r7
   1509c:	b004      	add	sp, #16
   1509e:	bd80      	pop	{r7, pc}
   150a0:	2000440c 	.word	0x2000440c
   150a4:	00036048 	.word	0x00036048
   150a8:	00013ed9 	.word	0x00013ed9
   150ac:	00036060 	.word	0x00036060
   150b0:	0001e045 	.word	0x0001e045
   150b4:	00036080 	.word	0x00036080
   150b8:	0003608c 	.word	0x0003608c
   150bc:	0003604c 	.word	0x0003604c
   150c0:	00013e01 	.word	0x00013e01
   150c4:	000360a0 	.word	0x000360a0
   150c8:	00036050 	.word	0x00036050
   150cc:	000360c0 	.word	0x000360c0
   150d0:	00036054 	.word	0x00036054
   150d4:	000360ec 	.word	0x000360ec
   150d8:	000154d1 	.word	0x000154d1
   150dc:	000153d5 	.word	0x000153d5

000150e0 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(uint8_t neotrellis_addr)
{
   150e0:	b580      	push	{r7, lr}
   150e2:	b084      	sub	sp, #16
   150e4:	af00      	add	r7, sp, #0
   150e6:	0002      	movs	r2, r0
   150e8:	1dfb      	adds	r3, r7, #7
   150ea:	701a      	strb	r2, [r3, #0]
    uint8_t count = 0;
   150ec:	230b      	movs	r3, #11
   150ee:	18fb      	adds	r3, r7, r3
   150f0:	2200      	movs	r2, #0
   150f2:	701a      	strb	r2, [r3, #0]
    seesawData.address = neotrellis_addr;
   150f4:	4b14      	ldr	r3, [pc, #80]	; (15148 <SeesawGetKeypadCount+0x68>)
   150f6:	1dfa      	adds	r2, r7, #7
   150f8:	7812      	ldrb	r2, [r2, #0]
   150fa:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   150fc:	4b12      	ldr	r3, [pc, #72]	; (15148 <SeesawGetKeypadCount+0x68>)
   150fe:	4a13      	ldr	r2, [pc, #76]	; (1514c <SeesawGetKeypadCount+0x6c>)
   15100:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   15102:	4b11      	ldr	r3, [pc, #68]	; (15148 <SeesawGetKeypadCount+0x68>)
   15104:	2202      	movs	r2, #2
   15106:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   15108:	4b0f      	ldr	r3, [pc, #60]	; (15148 <SeesawGetKeypadCount+0x68>)
   1510a:	220b      	movs	r2, #11
   1510c:	18ba      	adds	r2, r7, r2
   1510e:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15110:	4b0d      	ldr	r3, [pc, #52]	; (15148 <SeesawGetKeypadCount+0x68>)
   15112:	2201      	movs	r2, #1
   15114:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15116:	4b0c      	ldr	r3, [pc, #48]	; (15148 <SeesawGetKeypadCount+0x68>)
   15118:	2264      	movs	r2, #100	; 0x64
   1511a:	2100      	movs	r1, #0
   1511c:	0018      	movs	r0, r3
   1511e:	4b0c      	ldr	r3, [pc, #48]	; (15150 <SeesawGetKeypadCount+0x70>)
   15120:	4798      	blx	r3
   15122:	0003      	movs	r3, r0
   15124:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   15126:	68fb      	ldr	r3, [r7, #12]
   15128:	2b00      	cmp	r3, #0
   1512a:	d005      	beq.n	15138 <SeesawGetKeypadCount+0x58>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   1512c:	4b09      	ldr	r3, [pc, #36]	; (15154 <SeesawGetKeypadCount+0x74>)
   1512e:	0018      	movs	r0, r3
   15130:	4b09      	ldr	r3, [pc, #36]	; (15158 <SeesawGetKeypadCount+0x78>)
   15132:	4798      	blx	r3
		return 99;
   15134:	2363      	movs	r3, #99	; 0x63
   15136:	e002      	b.n	1513e <SeesawGetKeypadCount+0x5e>
    }
    return count;
   15138:	230b      	movs	r3, #11
   1513a:	18fb      	adds	r3, r7, r3
   1513c:	781b      	ldrb	r3, [r3, #0]
}
   1513e:	0018      	movs	r0, r3
   15140:	46bd      	mov	sp, r7
   15142:	b004      	add	sp, #16
   15144:	bd80      	pop	{r7, pc}
   15146:	46c0      	nop			; (mov r8, r8)
   15148:	2000440c 	.word	0x2000440c
   1514c:	0003605c 	.word	0x0003605c
   15150:	00013ed9 	.word	0x00013ed9
   15154:	00036120 	.word	0x00036120
   15158:	0001e045 	.word	0x0001e045

0001515c <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t neotrellis_addr, uint8_t *buffer, uint8_t count)
{
   1515c:	b580      	push	{r7, lr}
   1515e:	b084      	sub	sp, #16
   15160:	af00      	add	r7, sp, #0
   15162:	6039      	str	r1, [r7, #0]
   15164:	0011      	movs	r1, r2
   15166:	1dfb      	adds	r3, r7, #7
   15168:	1c02      	adds	r2, r0, #0
   1516a:	701a      	strb	r2, [r3, #0]
   1516c:	1dbb      	adds	r3, r7, #6
   1516e:	1c0a      	adds	r2, r1, #0
   15170:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   15172:	1dbb      	adds	r3, r7, #6
   15174:	781b      	ldrb	r3, [r3, #0]
   15176:	2b00      	cmp	r3, #0
   15178:	d101      	bne.n	1517e <SeesawReadKeypad+0x22>
   1517a:	2300      	movs	r3, #0
   1517c:	e027      	b.n	151ce <SeesawReadKeypad+0x72>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   1517e:	2308      	movs	r3, #8
   15180:	18fb      	adds	r3, r7, r3
   15182:	4a15      	ldr	r2, [pc, #84]	; (151d8 <SeesawReadKeypad+0x7c>)
   15184:	8812      	ldrh	r2, [r2, #0]
   15186:	801a      	strh	r2, [r3, #0]
    seesawData.address = neotrellis_addr;
   15188:	4b14      	ldr	r3, [pc, #80]	; (151dc <SeesawReadKeypad+0x80>)
   1518a:	1dfa      	adds	r2, r7, #7
   1518c:	7812      	ldrb	r2, [r2, #0]
   1518e:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   15190:	4b12      	ldr	r3, [pc, #72]	; (151dc <SeesawReadKeypad+0x80>)
   15192:	2208      	movs	r2, #8
   15194:	18ba      	adds	r2, r7, r2
   15196:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   15198:	4b10      	ldr	r3, [pc, #64]	; (151dc <SeesawReadKeypad+0x80>)
   1519a:	2202      	movs	r2, #2
   1519c:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   1519e:	4b0f      	ldr	r3, [pc, #60]	; (151dc <SeesawReadKeypad+0x80>)
   151a0:	683a      	ldr	r2, [r7, #0]
   151a2:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   151a4:	1dbb      	adds	r3, r7, #6
   151a6:	781b      	ldrb	r3, [r3, #0]
   151a8:	b29a      	uxth	r2, r3
   151aa:	4b0c      	ldr	r3, [pc, #48]	; (151dc <SeesawReadKeypad+0x80>)
   151ac:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   151ae:	4b0b      	ldr	r3, [pc, #44]	; (151dc <SeesawReadKeypad+0x80>)
   151b0:	2264      	movs	r2, #100	; 0x64
   151b2:	2100      	movs	r1, #0
   151b4:	0018      	movs	r0, r3
   151b6:	4b0a      	ldr	r3, [pc, #40]	; (151e0 <SeesawReadKeypad+0x84>)
   151b8:	4798      	blx	r3
   151ba:	0003      	movs	r3, r0
   151bc:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   151be:	68fb      	ldr	r3, [r7, #12]
   151c0:	2b00      	cmp	r3, #0
   151c2:	d003      	beq.n	151cc <SeesawReadKeypad+0x70>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   151c4:	4b07      	ldr	r3, [pc, #28]	; (151e4 <SeesawReadKeypad+0x88>)
   151c6:	0018      	movs	r0, r3
   151c8:	4b07      	ldr	r3, [pc, #28]	; (151e8 <SeesawReadKeypad+0x8c>)
   151ca:	4798      	blx	r3
    }
    return error;
   151cc:	68fb      	ldr	r3, [r7, #12]
}
   151ce:	0018      	movs	r0, r3
   151d0:	46bd      	mov	sp, r7
   151d2:	b004      	add	sp, #16
   151d4:	bd80      	pop	{r7, pc}
   151d6:	46c0      	nop			; (mov r8, r8)
   151d8:	00036144 	.word	0x00036144
   151dc:	2000440c 	.word	0x2000440c
   151e0:	00013ed9 	.word	0x00013ed9
   151e4:	00036120 	.word	0x00036120
   151e8:	0001e045 	.word	0x0001e045

000151ec <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t neotrellis_addr, uint8_t key, uint8_t edge, bool enable)
{
   151ec:	b5b0      	push	{r4, r5, r7, lr}
   151ee:	b086      	sub	sp, #24
   151f0:	af00      	add	r7, sp, #0
   151f2:	0005      	movs	r5, r0
   151f4:	000c      	movs	r4, r1
   151f6:	0010      	movs	r0, r2
   151f8:	0019      	movs	r1, r3
   151fa:	1dfb      	adds	r3, r7, #7
   151fc:	1c2a      	adds	r2, r5, #0
   151fe:	701a      	strb	r2, [r3, #0]
   15200:	1dbb      	adds	r3, r7, #6
   15202:	1c22      	adds	r2, r4, #0
   15204:	701a      	strb	r2, [r3, #0]
   15206:	1d7b      	adds	r3, r7, #5
   15208:	1c02      	adds	r2, r0, #0
   1520a:	701a      	strb	r2, [r3, #0]
   1520c:	1d3b      	adds	r3, r7, #4
   1520e:	1c0a      	adds	r2, r1, #0
   15210:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
   15212:	2310      	movs	r3, #16
   15214:	18fb      	adds	r3, r7, r3
   15216:	1d3a      	adds	r2, r7, #4
   15218:	7812      	ldrb	r2, [r2, #0]
   1521a:	2101      	movs	r1, #1
   1521c:	0010      	movs	r0, r2
   1521e:	4008      	ands	r0, r1
   15220:	781a      	ldrb	r2, [r3, #0]
   15222:	2101      	movs	r1, #1
   15224:	438a      	bics	r2, r1
   15226:	1c11      	adds	r1, r2, #0
   15228:	1c02      	adds	r2, r0, #0
   1522a:	430a      	orrs	r2, r1
   1522c:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
   1522e:	1d7b      	adds	r3, r7, #5
   15230:	781b      	ldrb	r3, [r3, #0]
   15232:	2201      	movs	r2, #1
   15234:	409a      	lsls	r2, r3
   15236:	0013      	movs	r3, r2
   15238:	b2db      	uxtb	r3, r3
   1523a:	1c1a      	adds	r2, r3, #0
   1523c:	230f      	movs	r3, #15
   1523e:	4013      	ands	r3, r2
   15240:	b2da      	uxtb	r2, r3
   15242:	2310      	movs	r3, #16
   15244:	18fb      	adds	r3, r7, r3
   15246:	210f      	movs	r1, #15
   15248:	400a      	ands	r2, r1
   1524a:	1890      	adds	r0, r2, r2
   1524c:	781a      	ldrb	r2, [r3, #0]
   1524e:	211e      	movs	r1, #30
   15250:	438a      	bics	r2, r1
   15252:	1c11      	adds	r1, r2, #0
   15254:	1c02      	adds	r2, r0, #0
   15256:	430a      	orrs	r2, r1
   15258:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   1525a:	230c      	movs	r3, #12
   1525c:	18fb      	adds	r3, r7, r3
   1525e:	2210      	movs	r2, #16
   15260:	701a      	strb	r2, [r3, #0]
   15262:	230c      	movs	r3, #12
   15264:	18fb      	adds	r3, r7, r3
   15266:	2201      	movs	r2, #1
   15268:	705a      	strb	r2, [r3, #1]
   1526a:	230c      	movs	r3, #12
   1526c:	18fb      	adds	r3, r7, r3
   1526e:	1dba      	adds	r2, r7, #6
   15270:	7812      	ldrb	r2, [r2, #0]
   15272:	709a      	strb	r2, [r3, #2]
   15274:	2310      	movs	r3, #16
   15276:	18fb      	adds	r3, r7, r3
   15278:	781a      	ldrb	r2, [r3, #0]
   1527a:	230c      	movs	r3, #12
   1527c:	18fb      	adds	r3, r7, r3
   1527e:	70da      	strb	r2, [r3, #3]

    //seesawData.address = neotrellis_addr;
    seesawData.msgOut = (const uint8_t *) &cmd[0];
   15280:	4b0a      	ldr	r3, [pc, #40]	; (152ac <SeesawActivateKey+0xc0>)
   15282:	220c      	movs	r2, #12
   15284:	18ba      	adds	r2, r7, r2
   15286:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   15288:	4b08      	ldr	r3, [pc, #32]	; (152ac <SeesawActivateKey+0xc0>)
   1528a:	2204      	movs	r2, #4
   1528c:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   1528e:	4b07      	ldr	r3, [pc, #28]	; (152ac <SeesawActivateKey+0xc0>)
   15290:	2200      	movs	r2, #0
   15292:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
   15294:	4b05      	ldr	r3, [pc, #20]	; (152ac <SeesawActivateKey+0xc0>)
   15296:	2164      	movs	r1, #100	; 0x64
   15298:	0018      	movs	r0, r3
   1529a:	4b05      	ldr	r3, [pc, #20]	; (152b0 <SeesawActivateKey+0xc4>)
   1529c:	4798      	blx	r3
   1529e:	0003      	movs	r3, r0
   152a0:	617b      	str	r3, [r7, #20]
    return error;
   152a2:	697b      	ldr	r3, [r7, #20]
}
   152a4:	0018      	movs	r0, r3
   152a6:	46bd      	mov	sp, r7
   152a8:	b006      	add	sp, #24
   152aa:	bdb0      	pop	{r4, r5, r7, pc}
   152ac:	2000440c 	.word	0x2000440c
   152b0:	00013e01 	.word	0x00013e01

000152b4 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t neotrellis_addr, uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   152b4:	b5b0      	push	{r4, r5, r7, lr}
   152b6:	b086      	sub	sp, #24
   152b8:	af00      	add	r7, sp, #0
   152ba:	0005      	movs	r5, r0
   152bc:	000c      	movs	r4, r1
   152be:	0010      	movs	r0, r2
   152c0:	0019      	movs	r1, r3
   152c2:	1dfb      	adds	r3, r7, #7
   152c4:	1c2a      	adds	r2, r5, #0
   152c6:	701a      	strb	r2, [r3, #0]
   152c8:	1dbb      	adds	r3, r7, #6
   152ca:	1c22      	adds	r2, r4, #0
   152cc:	701a      	strb	r2, [r3, #0]
   152ce:	1d7b      	adds	r3, r7, #5
   152d0:	1c02      	adds	r2, r0, #0
   152d2:	701a      	strb	r2, [r3, #0]
   152d4:	1d3b      	adds	r3, r7, #4
   152d6:	1c0a      	adds	r2, r1, #0
   152d8:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   152da:	2308      	movs	r3, #8
   152dc:	18fb      	adds	r3, r7, r3
   152de:	220e      	movs	r2, #14
   152e0:	701a      	strb	r2, [r3, #0]
   152e2:	2308      	movs	r3, #8
   152e4:	18fb      	adds	r3, r7, r3
   152e6:	2204      	movs	r2, #4
   152e8:	705a      	strb	r2, [r3, #1]
   152ea:	2308      	movs	r3, #8
   152ec:	18fb      	adds	r3, r7, r3
   152ee:	2200      	movs	r2, #0
   152f0:	709a      	strb	r2, [r3, #2]
   152f2:	2308      	movs	r3, #8
   152f4:	18fb      	adds	r3, r7, r3
   152f6:	2200      	movs	r2, #0
   152f8:	70da      	strb	r2, [r3, #3]
   152fa:	2308      	movs	r3, #8
   152fc:	18fb      	adds	r3, r7, r3
   152fe:	1d3a      	adds	r2, r7, #4
   15300:	7812      	ldrb	r2, [r2, #0]
   15302:	711a      	strb	r2, [r3, #4]
   15304:	2308      	movs	r3, #8
   15306:	18fb      	adds	r3, r7, r3
   15308:	1d7a      	adds	r2, r7, #5
   1530a:	7812      	ldrb	r2, [r2, #0]
   1530c:	715a      	strb	r2, [r3, #5]
   1530e:	2308      	movs	r3, #8
   15310:	18fb      	adds	r3, r7, r3
   15312:	2228      	movs	r2, #40	; 0x28
   15314:	18ba      	adds	r2, r7, r2
   15316:	7812      	ldrb	r2, [r2, #0]
   15318:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   1531a:	1dbb      	adds	r3, r7, #6
   1531c:	781b      	ldrb	r3, [r3, #0]
   1531e:	b29b      	uxth	r3, r3
   15320:	2216      	movs	r2, #22
   15322:	18ba      	adds	r2, r7, r2
   15324:	1c19      	adds	r1, r3, #0
   15326:	1c0b      	adds	r3, r1, #0
   15328:	18db      	adds	r3, r3, r3
   1532a:	185b      	adds	r3, r3, r1
   1532c:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   1532e:	2316      	movs	r3, #22
   15330:	18fb      	adds	r3, r7, r3
   15332:	881b      	ldrh	r3, [r3, #0]
   15334:	0a1b      	lsrs	r3, r3, #8
   15336:	b29b      	uxth	r3, r3
   15338:	b2da      	uxtb	r2, r3
   1533a:	2308      	movs	r3, #8
   1533c:	18fb      	adds	r3, r7, r3
   1533e:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   15340:	2316      	movs	r3, #22
   15342:	18fb      	adds	r3, r7, r3
   15344:	881b      	ldrh	r3, [r3, #0]
   15346:	b2da      	uxtb	r2, r3
   15348:	2308      	movs	r3, #8
   1534a:	18fb      	adds	r3, r7, r3
   1534c:	70da      	strb	r2, [r3, #3]

	seesawData.address = neotrellis_addr;
   1534e:	4b0b      	ldr	r3, [pc, #44]	; (1537c <SeesawSetLed+0xc8>)
   15350:	1dfa      	adds	r2, r7, #7
   15352:	7812      	ldrb	r2, [r2, #0]
   15354:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   15356:	4b09      	ldr	r3, [pc, #36]	; (1537c <SeesawSetLed+0xc8>)
   15358:	2208      	movs	r2, #8
   1535a:	18ba      	adds	r2, r7, r2
   1535c:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   1535e:	4b07      	ldr	r3, [pc, #28]	; (1537c <SeesawSetLed+0xc8>)
   15360:	2207      	movs	r2, #7
   15362:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   15364:	4b05      	ldr	r3, [pc, #20]	; (1537c <SeesawSetLed+0xc8>)
   15366:	2164      	movs	r1, #100	; 0x64
   15368:	0018      	movs	r0, r3
   1536a:	4b05      	ldr	r3, [pc, #20]	; (15380 <SeesawSetLed+0xcc>)
   1536c:	4798      	blx	r3
   1536e:	0003      	movs	r3, r0
   15370:	613b      	str	r3, [r7, #16]
    return error;
   15372:	693b      	ldr	r3, [r7, #16]
}
   15374:	0018      	movs	r0, r3
   15376:	46bd      	mov	sp, r7
   15378:	b006      	add	sp, #24
   1537a:	bdb0      	pop	{r4, r5, r7, pc}
   1537c:	2000440c 	.word	0x2000440c
   15380:	00013e01 	.word	0x00013e01

00015384 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(uint8_t neotrellis_addr)
{
   15384:	b580      	push	{r7, lr}
   15386:	b084      	sub	sp, #16
   15388:	af00      	add	r7, sp, #0
   1538a:	0002      	movs	r2, r0
   1538c:	1dfb      	adds	r3, r7, #7
   1538e:	701a      	strb	r2, [r3, #0]
	
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   15390:	2308      	movs	r3, #8
   15392:	18fb      	adds	r3, r7, r3
   15394:	4a0c      	ldr	r2, [pc, #48]	; (153c8 <SeesawOrderLedUpdate+0x44>)
   15396:	8812      	ldrh	r2, [r2, #0]
   15398:	801a      	strh	r2, [r3, #0]
		
	seesawData.address = neotrellis_addr;
   1539a:	4b0c      	ldr	r3, [pc, #48]	; (153cc <SeesawOrderLedUpdate+0x48>)
   1539c:	1dfa      	adds	r2, r7, #7
   1539e:	7812      	ldrb	r2, [r2, #0]
   153a0:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   153a2:	4b0a      	ldr	r3, [pc, #40]	; (153cc <SeesawOrderLedUpdate+0x48>)
   153a4:	2208      	movs	r2, #8
   153a6:	18ba      	adds	r2, r7, r2
   153a8:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   153aa:	4b08      	ldr	r3, [pc, #32]	; (153cc <SeesawOrderLedUpdate+0x48>)
   153ac:	2202      	movs	r2, #2
   153ae:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   153b0:	4b06      	ldr	r3, [pc, #24]	; (153cc <SeesawOrderLedUpdate+0x48>)
   153b2:	2164      	movs	r1, #100	; 0x64
   153b4:	0018      	movs	r0, r3
   153b6:	4b06      	ldr	r3, [pc, #24]	; (153d0 <SeesawOrderLedUpdate+0x4c>)
   153b8:	4798      	blx	r3
   153ba:	0003      	movs	r3, r0
   153bc:	60fb      	str	r3, [r7, #12]
    return error;
   153be:	68fb      	ldr	r3, [r7, #12]
}
   153c0:	0018      	movs	r0, r3
   153c2:	46bd      	mov	sp, r7
   153c4:	b004      	add	sp, #16
   153c6:	bd80      	pop	{r7, pc}
   153c8:	00036148 	.word	0x00036148
   153cc:	2000440c 	.word	0x2000440c
   153d0:	00013e01 	.word	0x00013e01

000153d4 <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(uint8_t neotrellis_addr)
{
   153d4:	b590      	push	{r4, r7, lr}
   153d6:	b085      	sub	sp, #20
   153d8:	af00      	add	r7, sp, #0
   153da:	0002      	movs	r2, r0
   153dc:	1dfb      	adds	r3, r7, #7
   153de:	701a      	strb	r2, [r3, #0]
    seesawData.address = neotrellis_addr;
   153e0:	4b34      	ldr	r3, [pc, #208]	; (154b4 <SeesawInitializeKeypad+0xe0>)
   153e2:	1dfa      	adds	r2, r7, #7
   153e4:	7812      	ldrb	r2, [r2, #0]
   153e6:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
   153e8:	4b32      	ldr	r3, [pc, #200]	; (154b4 <SeesawInitializeKeypad+0xe0>)
   153ea:	4a33      	ldr	r2, [pc, #204]	; (154b8 <SeesawInitializeKeypad+0xe4>)
   153ec:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
   153ee:	4b31      	ldr	r3, [pc, #196]	; (154b4 <SeesawInitializeKeypad+0xe0>)
   153f0:	2203      	movs	r2, #3
   153f2:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   153f4:	4b2f      	ldr	r3, [pc, #188]	; (154b4 <SeesawInitializeKeypad+0xe0>)
   153f6:	2200      	movs	r2, #0
   153f8:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
   153fa:	4b2e      	ldr	r3, [pc, #184]	; (154b4 <SeesawInitializeKeypad+0xe0>)
   153fc:	2164      	movs	r1, #100	; 0x64
   153fe:	0018      	movs	r0, r3
   15400:	4b2e      	ldr	r3, [pc, #184]	; (154bc <SeesawInitializeKeypad+0xe8>)
   15402:	4798      	blx	r3
   15404:	0003      	movs	r3, r0
   15406:	60bb      	str	r3, [r7, #8]
    if (ERROR_NONE != error) {
   15408:	68bb      	ldr	r3, [r7, #8]
   1540a:	2b00      	cmp	r3, #0
   1540c:	d003      	beq.n	15416 <SeesawInitializeKeypad+0x42>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   1540e:	4b2c      	ldr	r3, [pc, #176]	; (154c0 <SeesawInitializeKeypad+0xec>)
   15410:	0018      	movs	r0, r3
   15412:	4b2c      	ldr	r3, [pc, #176]	; (154c4 <SeesawInitializeKeypad+0xf0>)
   15414:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
   15416:	2300      	movs	r3, #0
   15418:	60fb      	str	r3, [r7, #12]
   1541a:	e043      	b.n	154a4 <SeesawInitializeKeypad+0xd0>
        error = SeesawActivateKey(neotrellis_addr,NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   1541c:	68fb      	ldr	r3, [r7, #12]
   1541e:	2b00      	cmp	r3, #0
   15420:	da00      	bge.n	15424 <SeesawInitializeKeypad+0x50>
   15422:	3303      	adds	r3, #3
   15424:	109b      	asrs	r3, r3, #2
   15426:	b2db      	uxtb	r3, r3
   15428:	00db      	lsls	r3, r3, #3
   1542a:	b2da      	uxtb	r2, r3
   1542c:	68fb      	ldr	r3, [r7, #12]
   1542e:	4926      	ldr	r1, [pc, #152]	; (154c8 <SeesawInitializeKeypad+0xf4>)
   15430:	400b      	ands	r3, r1
   15432:	d504      	bpl.n	1543e <SeesawInitializeKeypad+0x6a>
   15434:	3b01      	subs	r3, #1
   15436:	2104      	movs	r1, #4
   15438:	4249      	negs	r1, r1
   1543a:	430b      	orrs	r3, r1
   1543c:	3301      	adds	r3, #1
   1543e:	b2db      	uxtb	r3, r3
   15440:	18d3      	adds	r3, r2, r3
   15442:	b2d9      	uxtb	r1, r3
   15444:	1dfb      	adds	r3, r7, #7
   15446:	7818      	ldrb	r0, [r3, #0]
   15448:	2301      	movs	r3, #1
   1544a:	2203      	movs	r2, #3
   1544c:	4c1f      	ldr	r4, [pc, #124]	; (154cc <SeesawInitializeKeypad+0xf8>)
   1544e:	47a0      	blx	r4
   15450:	0003      	movs	r3, r0
   15452:	60bb      	str	r3, [r7, #8]
        error |= SeesawActivateKey(neotrellis_addr,NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   15454:	68fb      	ldr	r3, [r7, #12]
   15456:	2b00      	cmp	r3, #0
   15458:	da00      	bge.n	1545c <SeesawInitializeKeypad+0x88>
   1545a:	3303      	adds	r3, #3
   1545c:	109b      	asrs	r3, r3, #2
   1545e:	b2db      	uxtb	r3, r3
   15460:	00db      	lsls	r3, r3, #3
   15462:	b2da      	uxtb	r2, r3
   15464:	68fb      	ldr	r3, [r7, #12]
   15466:	4918      	ldr	r1, [pc, #96]	; (154c8 <SeesawInitializeKeypad+0xf4>)
   15468:	400b      	ands	r3, r1
   1546a:	d504      	bpl.n	15476 <SeesawInitializeKeypad+0xa2>
   1546c:	3b01      	subs	r3, #1
   1546e:	2104      	movs	r1, #4
   15470:	4249      	negs	r1, r1
   15472:	430b      	orrs	r3, r1
   15474:	3301      	adds	r3, #1
   15476:	b2db      	uxtb	r3, r3
   15478:	18d3      	adds	r3, r2, r3
   1547a:	b2d9      	uxtb	r1, r3
   1547c:	1dfb      	adds	r3, r7, #7
   1547e:	7818      	ldrb	r0, [r3, #0]
   15480:	2301      	movs	r3, #1
   15482:	2202      	movs	r2, #2
   15484:	4c11      	ldr	r4, [pc, #68]	; (154cc <SeesawInitializeKeypad+0xf8>)
   15486:	47a0      	blx	r4
   15488:	0002      	movs	r2, r0
   1548a:	68bb      	ldr	r3, [r7, #8]
   1548c:	4313      	orrs	r3, r2
   1548e:	60bb      	str	r3, [r7, #8]
        if (ERROR_NONE != error) {
   15490:	68bb      	ldr	r3, [r7, #8]
   15492:	2b00      	cmp	r3, #0
   15494:	d003      	beq.n	1549e <SeesawInitializeKeypad+0xca>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   15496:	4b0a      	ldr	r3, [pc, #40]	; (154c0 <SeesawInitializeKeypad+0xec>)
   15498:	0018      	movs	r0, r3
   1549a:	4b0a      	ldr	r3, [pc, #40]	; (154c4 <SeesawInitializeKeypad+0xf0>)
   1549c:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
   1549e:	68fb      	ldr	r3, [r7, #12]
   154a0:	3301      	adds	r3, #1
   154a2:	60fb      	str	r3, [r7, #12]
   154a4:	68fb      	ldr	r3, [r7, #12]
   154a6:	2b0f      	cmp	r3, #15
   154a8:	ddb8      	ble.n	1541c <SeesawInitializeKeypad+0x48>
        }
    }
}
   154aa:	46c0      	nop			; (mov r8, r8)
   154ac:	46bd      	mov	sp, r7
   154ae:	b005      	add	sp, #20
   154b0:	bd90      	pop	{r4, r7, pc}
   154b2:	46c0      	nop			; (mov r8, r8)
   154b4:	2000440c 	.word	0x2000440c
   154b8:	00036058 	.word	0x00036058
   154bc:	00013e01 	.word	0x00013e01
   154c0:	0003614c 	.word	0x0003614c
   154c4:	0001e045 	.word	0x0001e045
   154c8:	80000003 	.word	0x80000003
   154cc:	000151ed 	.word	0x000151ed

000154d0 <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(uint8_t neotrellis_addr)
{
   154d0:	b590      	push	{r4, r7, lr}
   154d2:	b085      	sub	sp, #20
   154d4:	af02      	add	r7, sp, #8
   154d6:	0002      	movs	r2, r0
   154d8:	1dfb      	adds	r3, r7, #7
   154da:	701a      	strb	r2, [r3, #0]
    SeesawSetLed(neotrellis_addr,15, 255, 255, 255);
   154dc:	1dfb      	adds	r3, r7, #7
   154de:	7818      	ldrb	r0, [r3, #0]
   154e0:	23ff      	movs	r3, #255	; 0xff
   154e2:	9300      	str	r3, [sp, #0]
   154e4:	23ff      	movs	r3, #255	; 0xff
   154e6:	22ff      	movs	r2, #255	; 0xff
   154e8:	210f      	movs	r1, #15
   154ea:	4c0f      	ldr	r4, [pc, #60]	; (15528 <SeesawTurnOnLedTest+0x58>)
   154ec:	47a0      	blx	r4
    SeesawOrderLedUpdate(neotrellis_addr);
   154ee:	1dfb      	adds	r3, r7, #7
   154f0:	781b      	ldrb	r3, [r3, #0]
   154f2:	0018      	movs	r0, r3
   154f4:	4b0d      	ldr	r3, [pc, #52]	; (1552c <SeesawTurnOnLedTest+0x5c>)
   154f6:	4798      	blx	r3
    vTaskDelay(400);
   154f8:	23c8      	movs	r3, #200	; 0xc8
   154fa:	005b      	lsls	r3, r3, #1
   154fc:	0018      	movs	r0, r3
   154fe:	4b0c      	ldr	r3, [pc, #48]	; (15530 <SeesawTurnOnLedTest+0x60>)
   15500:	4798      	blx	r3

    SeesawSetLed(neotrellis_addr,15, 0, 0, 0);
   15502:	1dfb      	adds	r3, r7, #7
   15504:	7818      	ldrb	r0, [r3, #0]
   15506:	2300      	movs	r3, #0
   15508:	9300      	str	r3, [sp, #0]
   1550a:	2300      	movs	r3, #0
   1550c:	2200      	movs	r2, #0
   1550e:	210f      	movs	r1, #15
   15510:	4c05      	ldr	r4, [pc, #20]	; (15528 <SeesawTurnOnLedTest+0x58>)
   15512:	47a0      	blx	r4
    SeesawOrderLedUpdate(neotrellis_addr);
   15514:	1dfb      	adds	r3, r7, #7
   15516:	781b      	ldrb	r3, [r3, #0]
   15518:	0018      	movs	r0, r3
   1551a:	4b04      	ldr	r3, [pc, #16]	; (1552c <SeesawTurnOnLedTest+0x5c>)
   1551c:	4798      	blx	r3
   1551e:	46c0      	nop			; (mov r8, r8)
   15520:	46bd      	mov	sp, r7
   15522:	b003      	add	sp, #12
   15524:	bd90      	pop	{r4, r7, pc}
   15526:	46c0      	nop			; (mov r8, r8)
   15528:	000152b5 	.word	0x000152b5
   1552c:	00015385 	.word	0x00015385
   15530:	0001c3f1 	.word	0x0001c3f1

00015534 <shtc_write>:
   15534:	b580      	push	{r7, lr}
   15536:	b082      	sub	sp, #8
   15538:	af00      	add	r7, sp, #0
   1553a:	6078      	str	r0, [r7, #4]
   1553c:	000a      	movs	r2, r1
   1553e:	1cbb      	adds	r3, r7, #2
   15540:	801a      	strh	r2, [r3, #0]
   15542:	4b0b      	ldr	r3, [pc, #44]	; (15570 <shtc_write+0x3c>)
   15544:	1cba      	adds	r2, r7, #2
   15546:	8812      	ldrh	r2, [r2, #0]
   15548:	81da      	strh	r2, [r3, #14]
   1554a:	4b09      	ldr	r3, [pc, #36]	; (15570 <shtc_write+0x3c>)
   1554c:	687a      	ldr	r2, [r7, #4]
   1554e:	605a      	str	r2, [r3, #4]
   15550:	4b07      	ldr	r3, [pc, #28]	; (15570 <shtc_write+0x3c>)
   15552:	2200      	movs	r2, #0
   15554:	609a      	str	r2, [r3, #8]
   15556:	4b06      	ldr	r3, [pc, #24]	; (15570 <shtc_write+0x3c>)
   15558:	2200      	movs	r2, #0
   1555a:	819a      	strh	r2, [r3, #12]
   1555c:	4b04      	ldr	r3, [pc, #16]	; (15570 <shtc_write+0x3c>)
   1555e:	210a      	movs	r1, #10
   15560:	0018      	movs	r0, r3
   15562:	4b04      	ldr	r3, [pc, #16]	; (15574 <shtc_write+0x40>)
   15564:	4798      	blx	r3
   15566:	0003      	movs	r3, r0
   15568:	0018      	movs	r0, r3
   1556a:	46bd      	mov	sp, r7
   1556c:	b002      	add	sp, #8
   1556e:	bd80      	pop	{r7, pc}
   15570:	2000003c 	.word	0x2000003c
   15574:	00013e01 	.word	0x00013e01

00015578 <shtc_read>:
   15578:	b580      	push	{r7, lr}
   1557a:	b082      	sub	sp, #8
   1557c:	af00      	add	r7, sp, #0
   1557e:	6078      	str	r0, [r7, #4]
   15580:	000a      	movs	r2, r1
   15582:	1cbb      	adds	r3, r7, #2
   15584:	801a      	strh	r2, [r3, #0]
   15586:	4b0c      	ldr	r3, [pc, #48]	; (155b8 <shtc_read+0x40>)
   15588:	1cba      	adds	r2, r7, #2
   1558a:	8812      	ldrh	r2, [r2, #0]
   1558c:	81da      	strh	r2, [r3, #14]
   1558e:	4b0a      	ldr	r3, [pc, #40]	; (155b8 <shtc_read+0x40>)
   15590:	687a      	ldr	r2, [r7, #4]
   15592:	605a      	str	r2, [r3, #4]
   15594:	4b08      	ldr	r3, [pc, #32]	; (155b8 <shtc_read+0x40>)
   15596:	4a09      	ldr	r2, [pc, #36]	; (155bc <shtc_read+0x44>)
   15598:	609a      	str	r2, [r3, #8]
   1559a:	4b07      	ldr	r3, [pc, #28]	; (155b8 <shtc_read+0x40>)
   1559c:	2206      	movs	r2, #6
   1559e:	819a      	strh	r2, [r3, #12]
   155a0:	4b05      	ldr	r3, [pc, #20]	; (155b8 <shtc_read+0x40>)
   155a2:	220a      	movs	r2, #10
   155a4:	21d2      	movs	r1, #210	; 0xd2
   155a6:	0018      	movs	r0, r3
   155a8:	4b05      	ldr	r3, [pc, #20]	; (155c0 <shtc_read+0x48>)
   155aa:	4798      	blx	r3
   155ac:	0003      	movs	r3, r0
   155ae:	0018      	movs	r0, r3
   155b0:	46bd      	mov	sp, r7
   155b2:	b002      	add	sp, #8
   155b4:	bd80      	pop	{r7, pc}
   155b6:	46c0      	nop			; (mov r8, r8)
   155b8:	2000003c 	.word	0x2000003c
   155bc:	2000441c 	.word	0x2000441c
   155c0:	00013ed9 	.word	0x00013ed9

000155c4 <shtc_get>:
   155c4:	b580      	push	{r7, lr}
   155c6:	b084      	sub	sp, #16
   155c8:	af00      	add	r7, sp, #0
   155ca:	6078      	str	r0, [r7, #4]
   155cc:	2300      	movs	r3, #0
   155ce:	60fb      	str	r3, [r7, #12]
   155d0:	4b31      	ldr	r3, [pc, #196]	; (15698 <shtc_get+0xd4>)
   155d2:	2102      	movs	r1, #2
   155d4:	0018      	movs	r0, r3
   155d6:	4b31      	ldr	r3, [pc, #196]	; (1569c <shtc_get+0xd8>)
   155d8:	4798      	blx	r3
   155da:	0003      	movs	r3, r0
   155dc:	60fb      	str	r3, [r7, #12]
   155de:	68fb      	ldr	r3, [r7, #12]
   155e0:	2b00      	cmp	r3, #0
   155e2:	d149      	bne.n	15678 <shtc_get+0xb4>
   155e4:	4b2e      	ldr	r3, [pc, #184]	; (156a0 <shtc_get+0xdc>)
   155e6:	2102      	movs	r1, #2
   155e8:	0018      	movs	r0, r3
   155ea:	4b2e      	ldr	r3, [pc, #184]	; (156a4 <shtc_get+0xe0>)
   155ec:	4798      	blx	r3
   155ee:	0003      	movs	r3, r0
   155f0:	60fb      	str	r3, [r7, #12]
   155f2:	68fb      	ldr	r3, [r7, #12]
   155f4:	2b00      	cmp	r3, #0
   155f6:	d141      	bne.n	1567c <shtc_get+0xb8>
   155f8:	4b2b      	ldr	r3, [pc, #172]	; (156a8 <shtc_get+0xe4>)
   155fa:	2102      	movs	r1, #2
   155fc:	0018      	movs	r0, r3
   155fe:	4b27      	ldr	r3, [pc, #156]	; (1569c <shtc_get+0xd8>)
   15600:	4798      	blx	r3
   15602:	4b2a      	ldr	r3, [pc, #168]	; (156ac <shtc_get+0xe8>)
   15604:	781b      	ldrb	r3, [r3, #0]
   15606:	021b      	lsls	r3, r3, #8
   15608:	b21a      	sxth	r2, r3
   1560a:	4b28      	ldr	r3, [pc, #160]	; (156ac <shtc_get+0xe8>)
   1560c:	785b      	ldrb	r3, [r3, #1]
   1560e:	b21b      	sxth	r3, r3
   15610:	4313      	orrs	r3, r2
   15612:	b21b      	sxth	r3, r3
   15614:	b29a      	uxth	r2, r3
   15616:	687b      	ldr	r3, [r7, #4]
   15618:	801a      	strh	r2, [r3, #0]
   1561a:	687b      	ldr	r3, [r7, #4]
   1561c:	3302      	adds	r3, #2
   1561e:	4a23      	ldr	r2, [pc, #140]	; (156ac <shtc_get+0xe8>)
   15620:	78d2      	ldrb	r2, [r2, #3]
   15622:	0212      	lsls	r2, r2, #8
   15624:	b211      	sxth	r1, r2
   15626:	4a21      	ldr	r2, [pc, #132]	; (156ac <shtc_get+0xe8>)
   15628:	7912      	ldrb	r2, [r2, #4]
   1562a:	b212      	sxth	r2, r2
   1562c:	430a      	orrs	r2, r1
   1562e:	b212      	sxth	r2, r2
   15630:	b292      	uxth	r2, r2
   15632:	801a      	strh	r2, [r3, #0]
   15634:	687b      	ldr	r3, [r7, #4]
   15636:	881b      	ldrh	r3, [r3, #0]
   15638:	001a      	movs	r2, r3
   1563a:	2364      	movs	r3, #100	; 0x64
   1563c:	4353      	muls	r3, r2
   1563e:	2b00      	cmp	r3, #0
   15640:	da02      	bge.n	15648 <shtc_get+0x84>
   15642:	4a1b      	ldr	r2, [pc, #108]	; (156b0 <shtc_get+0xec>)
   15644:	4694      	mov	ip, r2
   15646:	4463      	add	r3, ip
   15648:	141b      	asrs	r3, r3, #16
   1564a:	b29a      	uxth	r2, r3
   1564c:	687b      	ldr	r3, [r7, #4]
   1564e:	801a      	strh	r2, [r3, #0]
   15650:	687b      	ldr	r3, [r7, #4]
   15652:	1c9a      	adds	r2, r3, #2
   15654:	687b      	ldr	r3, [r7, #4]
   15656:	3302      	adds	r3, #2
   15658:	881b      	ldrh	r3, [r3, #0]
   1565a:	0019      	movs	r1, r3
   1565c:	23af      	movs	r3, #175	; 0xaf
   1565e:	434b      	muls	r3, r1
   15660:	2b00      	cmp	r3, #0
   15662:	da02      	bge.n	1566a <shtc_get+0xa6>
   15664:	4912      	ldr	r1, [pc, #72]	; (156b0 <shtc_get+0xec>)
   15666:	468c      	mov	ip, r1
   15668:	4463      	add	r3, ip
   1566a:	141b      	asrs	r3, r3, #16
   1566c:	b29b      	uxth	r3, r3
   1566e:	3b2d      	subs	r3, #45	; 0x2d
   15670:	b29b      	uxth	r3, r3
   15672:	8013      	strh	r3, [r2, #0]
   15674:	2301      	movs	r3, #1
   15676:	e00a      	b.n	1568e <shtc_get+0xca>
   15678:	46c0      	nop			; (mov r8, r8)
   1567a:	e000      	b.n	1567e <shtc_get+0xba>
   1567c:	46c0      	nop			; (mov r8, r8)
   1567e:	687b      	ldr	r3, [r7, #4]
   15680:	2200      	movs	r2, #0
   15682:	801a      	strh	r2, [r3, #0]
   15684:	687b      	ldr	r3, [r7, #4]
   15686:	3302      	adds	r3, #2
   15688:	2200      	movs	r2, #0
   1568a:	801a      	strh	r2, [r3, #0]
   1568c:	2300      	movs	r3, #0
   1568e:	0018      	movs	r0, r3
   15690:	46bd      	mov	sp, r7
   15692:	b004      	add	sp, #16
   15694:	bd80      	pop	{r7, pc}
   15696:	46c0      	nop			; (mov r8, r8)
   15698:	20000030 	.word	0x20000030
   1569c:	00015535 	.word	0x00015535
   156a0:	20000034 	.word	0x20000034
   156a4:	00015579 	.word	0x00015579
   156a8:	20000038 	.word	0x20000038
   156ac:	2000441c 	.word	0x2000441c
   156b0:	0000ffff 	.word	0x0000ffff

000156b4 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   156b4:	b590      	push	{r4, r7, lr}
   156b6:	b08b      	sub	sp, #44	; 0x2c
   156b8:	af02      	add	r7, sp, #8
   156ba:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   156bc:	4bd2      	ldr	r3, [pc, #840]	; (15a08 <vUiHandlerTask+0x354>)
   156be:	0018      	movs	r0, r3
   156c0:	4bd2      	ldr	r3, [pc, #840]	; (15a0c <vUiHandlerTask+0x358>)
   156c2:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   156c4:	4bd2      	ldr	r3, [pc, #840]	; (15a10 <vUiHandlerTask+0x35c>)
   156c6:	2200      	movs	r2, #0
   156c8:	701a      	strb	r2, [r3, #0]

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   156ca:	4bd1      	ldr	r3, [pc, #836]	; (15a10 <vUiHandlerTask+0x35c>)
   156cc:	781b      	ldrb	r3, [r3, #0]
   156ce:	2b01      	cmp	r3, #1
   156d0:	d00b      	beq.n	156ea <vUiHandlerTask+0x36>
   156d2:	dc03      	bgt.n	156dc <vUiHandlerTask+0x28>
   156d4:	2b00      	cmp	r3, #0
   156d6:	d100      	bne.n	156da <vUiHandlerTask+0x26>
   156d8:	e256      	b.n	15b88 <vUiHandlerTask+0x4d4>
   156da:	e251      	b.n	15b80 <vUiHandlerTask+0x4cc>
   156dc:	2b02      	cmp	r3, #2
   156de:	d100      	bne.n	156e2 <vUiHandlerTask+0x2e>
   156e0:	e175      	b.n	159ce <vUiHandlerTask+0x31a>
   156e2:	2b03      	cmp	r3, #3
   156e4:	d100      	bne.n	156e8 <vUiHandlerTask+0x34>
   156e6:	e169      	b.n	159bc <vUiHandlerTask+0x308>
   156e8:	e24a      	b.n	15b80 <vUiHandlerTask+0x4cc>
				//SeesawReadKeypad(NEO_TRELLIS_ADDR_2, &ship_loc_buffer, 1);
                break;
            }

            case (UI_STATE_PLACE_SHIP): {
				ship_loc_out_num = 0;
   156ea:	4bca      	ldr	r3, [pc, #808]	; (15a14 <vUiHandlerTask+0x360>)
   156ec:	2200      	movs	r2, #0
   156ee:	701a      	strb	r2, [r3, #0]
				
				for(int i = 0; i < ship_num; i++){
   156f0:	2300      	movs	r3, #0
   156f2:	61fb      	str	r3, [r7, #28]
   156f4:	e14b      	b.n	1598e <vUiHandlerTask+0x2da>
					uint8_t ship_head, ship_tail;
					uint8_t cur_ship_size = 0;
   156f6:	2319      	movs	r3, #25
   156f8:	18fb      	adds	r3, r7, r3
   156fa:	2200      	movs	r2, #0
   156fc:	701a      	strb	r2, [r3, #0]
					uint8_t cur_ship_arr[MAX_SHIP_SIZE];
					
					while((cur_ship_size < ship_arr[i])){
   156fe:	e11b      	b.n	15938 <vUiHandlerTask+0x284>
						uint8_t temp = SeesawGetKeypadCount(NEO_TRELLIS_ADDR_1);
   15700:	2310      	movs	r3, #16
   15702:	18fc      	adds	r4, r7, r3
   15704:	202e      	movs	r0, #46	; 0x2e
   15706:	4bc4      	ldr	r3, [pc, #784]	; (15a18 <vUiHandlerTask+0x364>)
   15708:	4798      	blx	r3
   1570a:	0003      	movs	r3, r0
   1570c:	7023      	strb	r3, [r4, #0]
						if(temp == 99){uiState = UI_STATE_IGNORE_PRESSES;}
   1570e:	2310      	movs	r3, #16
   15710:	18fb      	adds	r3, r7, r3
   15712:	781b      	ldrb	r3, [r3, #0]
   15714:	2b63      	cmp	r3, #99	; 0x63
   15716:	d102      	bne.n	1571e <vUiHandlerTask+0x6a>
   15718:	4bbd      	ldr	r3, [pc, #756]	; (15a10 <vUiHandlerTask+0x35c>)
   1571a:	2200      	movs	r2, #0
   1571c:	701a      	strb	r2, [r3, #0]
						if(temp  == 0){vTaskDelay(50); continue;}
   1571e:	2310      	movs	r3, #16
   15720:	18fb      	adds	r3, r7, r3
   15722:	781b      	ldrb	r3, [r3, #0]
   15724:	2b00      	cmp	r3, #0
   15726:	d115      	bne.n	15754 <vUiHandlerTask+0xa0>
   15728:	2032      	movs	r0, #50	; 0x32
   1572a:	4bbc      	ldr	r3, [pc, #752]	; (15a1c <vUiHandlerTask+0x368>)
   1572c:	4798      	blx	r3
   1572e:	231b      	movs	r3, #27
   15730:	18fb      	adds	r3, r7, r3
   15732:	221b      	movs	r2, #27
   15734:	18ba      	adds	r2, r7, r2
   15736:	7812      	ldrb	r2, [r2, #0]
   15738:	701a      	strb	r2, [r3, #0]
   1573a:	231a      	movs	r3, #26
   1573c:	18fb      	adds	r3, r7, r3
   1573e:	221a      	movs	r2, #26
   15740:	18ba      	adds	r2, r7, r2
   15742:	7812      	ldrb	r2, [r2, #0]
   15744:	701a      	strb	r2, [r3, #0]
   15746:	2319      	movs	r3, #25
   15748:	18fb      	adds	r3, r7, r3
   1574a:	2219      	movs	r2, #25
   1574c:	18ba      	adds	r2, r7, r2
   1574e:	7812      	ldrb	r2, [r2, #0]
   15750:	701a      	strb	r2, [r3, #0]
   15752:	e0f1      	b.n	15938 <vUiHandlerTask+0x284>
							
						if( ERROR_NONE == SeesawReadKeypad(NEO_TRELLIS_ADDR_1, &ship_loc_buffer, 1) ){
   15754:	4bb2      	ldr	r3, [pc, #712]	; (15a20 <vUiHandlerTask+0x36c>)
   15756:	2201      	movs	r2, #1
   15758:	0019      	movs	r1, r3
   1575a:	202e      	movs	r0, #46	; 0x2e
   1575c:	4bb1      	ldr	r3, [pc, #708]	; (15a24 <vUiHandlerTask+0x370>)
   1575e:	4798      	blx	r3
   15760:	0001      	movs	r1, r0
   15762:	231b      	movs	r3, #27
   15764:	18fb      	adds	r3, r7, r3
   15766:	221b      	movs	r2, #27
   15768:	18ba      	adds	r2, r7, r2
   1576a:	7812      	ldrb	r2, [r2, #0]
   1576c:	701a      	strb	r2, [r3, #0]
   1576e:	231a      	movs	r3, #26
   15770:	18fb      	adds	r3, r7, r3
   15772:	221a      	movs	r2, #26
   15774:	18ba      	adds	r2, r7, r2
   15776:	7812      	ldrb	r2, [r2, #0]
   15778:	701a      	strb	r2, [r3, #0]
   1577a:	2319      	movs	r3, #25
   1577c:	18fb      	adds	r3, r7, r3
   1577e:	2219      	movs	r2, #25
   15780:	18ba      	adds	r2, r7, r2
   15782:	7812      	ldrb	r2, [r2, #0]
   15784:	701a      	strb	r2, [r3, #0]
   15786:	2900      	cmp	r1, #0
   15788:	d000      	beq.n	1578c <vUiHandlerTask+0xd8>
   1578a:	e0d5      	b.n	15938 <vUiHandlerTask+0x284>
							
							ship_loc_buffer = NEO_TRELLIS_SEESAW_KEY((ship_loc_buffer & 0xFD) >> 2);
   1578c:	4ba4      	ldr	r3, [pc, #656]	; (15a20 <vUiHandlerTask+0x36c>)
   1578e:	781b      	ldrb	r3, [r3, #0]
   15790:	089b      	lsrs	r3, r3, #2
   15792:	b2db      	uxtb	r3, r3
   15794:	2b00      	cmp	r3, #0
   15796:	da00      	bge.n	1579a <vUiHandlerTask+0xe6>
   15798:	3307      	adds	r3, #7
   1579a:	10db      	asrs	r3, r3, #3
   1579c:	b2db      	uxtb	r3, r3
   1579e:	009b      	lsls	r3, r3, #2
   157a0:	b2da      	uxtb	r2, r3
   157a2:	4b9f      	ldr	r3, [pc, #636]	; (15a20 <vUiHandlerTask+0x36c>)
   157a4:	781b      	ldrb	r3, [r3, #0]
   157a6:	089b      	lsrs	r3, r3, #2
   157a8:	b2db      	uxtb	r3, r3
   157aa:	2107      	movs	r1, #7
   157ac:	400b      	ands	r3, r1
   157ae:	b2db      	uxtb	r3, r3
   157b0:	18d3      	adds	r3, r2, r3
   157b2:	b2da      	uxtb	r2, r3
   157b4:	4b9a      	ldr	r3, [pc, #616]	; (15a20 <vUiHandlerTask+0x36c>)
   157b6:	701a      	strb	r2, [r3, #0]
							
							if(cur_ship_size == 0){
   157b8:	2319      	movs	r3, #25
   157ba:	18fb      	adds	r3, r7, r3
   157bc:	781b      	ldrb	r3, [r3, #0]
   157be:	2b00      	cmp	r3, #0
   157c0:	d14d      	bne.n	1585e <vUiHandlerTask+0x1aa>
								if(place_tile_stat[ship_loc_buffer] == UI_PLACE_PLACED){continue;}
   157c2:	4b97      	ldr	r3, [pc, #604]	; (15a20 <vUiHandlerTask+0x36c>)
   157c4:	781b      	ldrb	r3, [r3, #0]
   157c6:	001a      	movs	r2, r3
   157c8:	4b97      	ldr	r3, [pc, #604]	; (15a28 <vUiHandlerTask+0x374>)
   157ca:	5c9b      	ldrb	r3, [r3, r2]
   157cc:	2b01      	cmp	r3, #1
   157ce:	d112      	bne.n	157f6 <vUiHandlerTask+0x142>
   157d0:	231b      	movs	r3, #27
   157d2:	18fb      	adds	r3, r7, r3
   157d4:	221b      	movs	r2, #27
   157d6:	18ba      	adds	r2, r7, r2
   157d8:	7812      	ldrb	r2, [r2, #0]
   157da:	701a      	strb	r2, [r3, #0]
   157dc:	231a      	movs	r3, #26
   157de:	18fb      	adds	r3, r7, r3
   157e0:	221a      	movs	r2, #26
   157e2:	18ba      	adds	r2, r7, r2
   157e4:	7812      	ldrb	r2, [r2, #0]
   157e6:	701a      	strb	r2, [r3, #0]
   157e8:	2319      	movs	r3, #25
   157ea:	18fb      	adds	r3, r7, r3
   157ec:	2219      	movs	r2, #25
   157ee:	18ba      	adds	r2, r7, r2
   157f0:	7812      	ldrb	r2, [r2, #0]
   157f2:	701a      	strb	r2, [r3, #0]
   157f4:	e0a0      	b.n	15938 <vUiHandlerTask+0x284>
								cur_ship_arr[cur_ship_size] = ship_loc_buffer;
   157f6:	2319      	movs	r3, #25
   157f8:	18fb      	adds	r3, r7, r3
   157fa:	781b      	ldrb	r3, [r3, #0]
   157fc:	4a88      	ldr	r2, [pc, #544]	; (15a20 <vUiHandlerTask+0x36c>)
   157fe:	7811      	ldrb	r1, [r2, #0]
   15800:	220c      	movs	r2, #12
   15802:	18ba      	adds	r2, r7, r2
   15804:	54d1      	strb	r1, [r2, r3]
								place_tile_stat[ship_loc_buffer] = UI_PLACE_PLACED;
   15806:	4b86      	ldr	r3, [pc, #536]	; (15a20 <vUiHandlerTask+0x36c>)
   15808:	781b      	ldrb	r3, [r3, #0]
   1580a:	001a      	movs	r2, r3
   1580c:	4b86      	ldr	r3, [pc, #536]	; (15a28 <vUiHandlerTask+0x374>)
   1580e:	2101      	movs	r1, #1
   15810:	5499      	strb	r1, [r3, r2]
								SeesawSetLed(NEO_TRELLIS_ADDR_1,ship_loc_buffer, 0, 0, 50);
   15812:	4b83      	ldr	r3, [pc, #524]	; (15a20 <vUiHandlerTask+0x36c>)
   15814:	7819      	ldrb	r1, [r3, #0]
   15816:	2332      	movs	r3, #50	; 0x32
   15818:	9300      	str	r3, [sp, #0]
   1581a:	2300      	movs	r3, #0
   1581c:	2200      	movs	r2, #0
   1581e:	202e      	movs	r0, #46	; 0x2e
   15820:	4c82      	ldr	r4, [pc, #520]	; (15a2c <vUiHandlerTask+0x378>)
   15822:	47a0      	blx	r4
								SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_1);
   15824:	202e      	movs	r0, #46	; 0x2e
   15826:	4b82      	ldr	r3, [pc, #520]	; (15a30 <vUiHandlerTask+0x37c>)
   15828:	4798      	blx	r3
								
								ship_head = ship_loc_buffer;
   1582a:	231b      	movs	r3, #27
   1582c:	18fb      	adds	r3, r7, r3
   1582e:	4a7c      	ldr	r2, [pc, #496]	; (15a20 <vUiHandlerTask+0x36c>)
   15830:	7812      	ldrb	r2, [r2, #0]
   15832:	701a      	strb	r2, [r3, #0]
								ship_tail = ship_loc_buffer;
   15834:	231a      	movs	r3, #26
   15836:	18fb      	adds	r3, r7, r3
   15838:	4a79      	ldr	r2, [pc, #484]	; (15a20 <vUiHandlerTask+0x36c>)
   1583a:	7812      	ldrb	r2, [r2, #0]
   1583c:	701a      	strb	r2, [r3, #0]
								if(cur_ship_size != ship_arr[i]-1){
   1583e:	2319      	movs	r3, #25
   15840:	18fb      	adds	r3, r7, r3
   15842:	781a      	ldrb	r2, [r3, #0]
   15844:	497b      	ldr	r1, [pc, #492]	; (15a34 <vUiHandlerTask+0x380>)
   15846:	69fb      	ldr	r3, [r7, #28]
   15848:	18cb      	adds	r3, r1, r3
   1584a:	781b      	ldrb	r3, [r3, #0]
   1584c:	3b01      	subs	r3, #1
   1584e:	429a      	cmp	r2, r3
   15850:	d06b      	beq.n	1592a <vUiHandlerTask+0x276>
									UiPlaceSuggest2(ship_loc_buffer);
   15852:	4b73      	ldr	r3, [pc, #460]	; (15a20 <vUiHandlerTask+0x36c>)
   15854:	781b      	ldrb	r3, [r3, #0]
   15856:	0018      	movs	r0, r3
   15858:	4b77      	ldr	r3, [pc, #476]	; (15a38 <vUiHandlerTask+0x384>)
   1585a:	4798      	blx	r3
   1585c:	e065      	b.n	1592a <vUiHandlerTask+0x276>
								}
							}
							else{
								//check validity of 2nd position
								if(place_tile_stat[ship_loc_buffer] != UI_PLACE_VALID){continue;}
   1585e:	4b70      	ldr	r3, [pc, #448]	; (15a20 <vUiHandlerTask+0x36c>)
   15860:	781b      	ldrb	r3, [r3, #0]
   15862:	001a      	movs	r2, r3
   15864:	4b70      	ldr	r3, [pc, #448]	; (15a28 <vUiHandlerTask+0x374>)
   15866:	5c9b      	ldrb	r3, [r3, r2]
   15868:	2b00      	cmp	r3, #0
   1586a:	d012      	beq.n	15892 <vUiHandlerTask+0x1de>
   1586c:	231b      	movs	r3, #27
   1586e:	18fb      	adds	r3, r7, r3
   15870:	221b      	movs	r2, #27
   15872:	18ba      	adds	r2, r7, r2
   15874:	7812      	ldrb	r2, [r2, #0]
   15876:	701a      	strb	r2, [r3, #0]
   15878:	231a      	movs	r3, #26
   1587a:	18fb      	adds	r3, r7, r3
   1587c:	221a      	movs	r2, #26
   1587e:	18ba      	adds	r2, r7, r2
   15880:	7812      	ldrb	r2, [r2, #0]
   15882:	701a      	strb	r2, [r3, #0]
   15884:	2319      	movs	r3, #25
   15886:	18fb      	adds	r3, r7, r3
   15888:	2219      	movs	r2, #25
   1588a:	18ba      	adds	r2, r7, r2
   1588c:	7812      	ldrb	r2, [r2, #0]
   1588e:	701a      	strb	r2, [r3, #0]
   15890:	e052      	b.n	15938 <vUiHandlerTask+0x284>
									
								cur_ship_arr[cur_ship_size] = ship_loc_buffer;
   15892:	2319      	movs	r3, #25
   15894:	18fb      	adds	r3, r7, r3
   15896:	781b      	ldrb	r3, [r3, #0]
   15898:	4a61      	ldr	r2, [pc, #388]	; (15a20 <vUiHandlerTask+0x36c>)
   1589a:	7811      	ldrb	r1, [r2, #0]
   1589c:	220c      	movs	r2, #12
   1589e:	18ba      	adds	r2, r7, r2
   158a0:	54d1      	strb	r1, [r2, r3]
								place_tile_stat[ship_loc_buffer] = UI_PLACE_PLACED;
   158a2:	4b5f      	ldr	r3, [pc, #380]	; (15a20 <vUiHandlerTask+0x36c>)
   158a4:	781b      	ldrb	r3, [r3, #0]
   158a6:	001a      	movs	r2, r3
   158a8:	4b5f      	ldr	r3, [pc, #380]	; (15a28 <vUiHandlerTask+0x374>)
   158aa:	2101      	movs	r1, #1
   158ac:	5499      	strb	r1, [r3, r2]
								SeesawSetLed(NEO_TRELLIS_ADDR_1, ship_loc_buffer, R_PLACE_PLACED, G_PLACE_PLACED, B_PLACE_PLACED);
   158ae:	4b5c      	ldr	r3, [pc, #368]	; (15a20 <vUiHandlerTask+0x36c>)
   158b0:	7819      	ldrb	r1, [r3, #0]
   158b2:	2332      	movs	r3, #50	; 0x32
   158b4:	9300      	str	r3, [sp, #0]
   158b6:	2300      	movs	r3, #0
   158b8:	2200      	movs	r2, #0
   158ba:	202e      	movs	r0, #46	; 0x2e
   158bc:	4c5b      	ldr	r4, [pc, #364]	; (15a2c <vUiHandlerTask+0x378>)
   158be:	47a0      	blx	r4
								SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_1);
   158c0:	202e      	movs	r0, #46	; 0x2e
   158c2:	4b5b      	ldr	r3, [pc, #364]	; (15a30 <vUiHandlerTask+0x37c>)
   158c4:	4798      	blx	r3
								
								UiRemoveSuggest(ship_head);
   158c6:	231b      	movs	r3, #27
   158c8:	18fb      	adds	r3, r7, r3
   158ca:	781b      	ldrb	r3, [r3, #0]
   158cc:	0018      	movs	r0, r3
   158ce:	4b5b      	ldr	r3, [pc, #364]	; (15a3c <vUiHandlerTask+0x388>)
   158d0:	4798      	blx	r3
								UiRemoveSuggest(ship_tail);
   158d2:	231a      	movs	r3, #26
   158d4:	18fb      	adds	r3, r7, r3
   158d6:	781b      	ldrb	r3, [r3, #0]
   158d8:	0018      	movs	r0, r3
   158da:	4b58      	ldr	r3, [pc, #352]	; (15a3c <vUiHandlerTask+0x388>)
   158dc:	4798      	blx	r3
								
								if(ship_loc_buffer < ship_head){ship_head = ship_loc_buffer;}
   158de:	4b50      	ldr	r3, [pc, #320]	; (15a20 <vUiHandlerTask+0x36c>)
   158e0:	781b      	ldrb	r3, [r3, #0]
   158e2:	221b      	movs	r2, #27
   158e4:	18ba      	adds	r2, r7, r2
   158e6:	7812      	ldrb	r2, [r2, #0]
   158e8:	429a      	cmp	r2, r3
   158ea:	d905      	bls.n	158f8 <vUiHandlerTask+0x244>
   158ec:	231b      	movs	r3, #27
   158ee:	18fb      	adds	r3, r7, r3
   158f0:	4a4b      	ldr	r2, [pc, #300]	; (15a20 <vUiHandlerTask+0x36c>)
   158f2:	7812      	ldrb	r2, [r2, #0]
   158f4:	701a      	strb	r2, [r3, #0]
   158f6:	e004      	b.n	15902 <vUiHandlerTask+0x24e>
								else{ship_tail = ship_loc_buffer;}
   158f8:	231a      	movs	r3, #26
   158fa:	18fb      	adds	r3, r7, r3
   158fc:	4a48      	ldr	r2, [pc, #288]	; (15a20 <vUiHandlerTask+0x36c>)
   158fe:	7812      	ldrb	r2, [r2, #0]
   15900:	701a      	strb	r2, [r3, #0]
								
								if(cur_ship_size != ship_arr[i]-1){
   15902:	2319      	movs	r3, #25
   15904:	18fb      	adds	r3, r7, r3
   15906:	781a      	ldrb	r2, [r3, #0]
   15908:	494a      	ldr	r1, [pc, #296]	; (15a34 <vUiHandlerTask+0x380>)
   1590a:	69fb      	ldr	r3, [r7, #28]
   1590c:	18cb      	adds	r3, r1, r3
   1590e:	781b      	ldrb	r3, [r3, #0]
   15910:	3b01      	subs	r3, #1
   15912:	429a      	cmp	r2, r3
   15914:	d009      	beq.n	1592a <vUiHandlerTask+0x276>
									UiPlaceSuggest3(ship_head,ship_tail);
   15916:	231a      	movs	r3, #26
   15918:	18fb      	adds	r3, r7, r3
   1591a:	781a      	ldrb	r2, [r3, #0]
   1591c:	231b      	movs	r3, #27
   1591e:	18fb      	adds	r3, r7, r3
   15920:	781b      	ldrb	r3, [r3, #0]
   15922:	0011      	movs	r1, r2
   15924:	0018      	movs	r0, r3
   15926:	4b46      	ldr	r3, [pc, #280]	; (15a40 <vUiHandlerTask+0x38c>)
   15928:	4798      	blx	r3
								}
							}
							cur_ship_size++;
   1592a:	2319      	movs	r3, #25
   1592c:	18fb      	adds	r3, r7, r3
   1592e:	781a      	ldrb	r2, [r3, #0]
   15930:	2319      	movs	r3, #25
   15932:	18fb      	adds	r3, r7, r3
   15934:	3201      	adds	r2, #1
   15936:	701a      	strb	r2, [r3, #0]
					while((cur_ship_size < ship_arr[i])){
   15938:	4a3e      	ldr	r2, [pc, #248]	; (15a34 <vUiHandlerTask+0x380>)
   1593a:	69fb      	ldr	r3, [r7, #28]
   1593c:	18d3      	adds	r3, r2, r3
   1593e:	781b      	ldrb	r3, [r3, #0]
   15940:	2219      	movs	r2, #25
   15942:	18ba      	adds	r2, r7, r2
   15944:	7812      	ldrb	r2, [r2, #0]
   15946:	429a      	cmp	r2, r3
   15948:	d200      	bcs.n	1594c <vUiHandlerTask+0x298>
   1594a:	e6d9      	b.n	15700 <vUiHandlerTask+0x4c>
						}
							
					}
					
					for(int j = 0; j < ship_arr[i];j++){
   1594c:	2300      	movs	r3, #0
   1594e:	617b      	str	r3, [r7, #20]
   15950:	e012      	b.n	15978 <vUiHandlerTask+0x2c4>
						ship_loc_out[ship_loc_out_num] = cur_ship_arr[j];
   15952:	4b30      	ldr	r3, [pc, #192]	; (15a14 <vUiHandlerTask+0x360>)
   15954:	781b      	ldrb	r3, [r3, #0]
   15956:	0019      	movs	r1, r3
   15958:	230c      	movs	r3, #12
   1595a:	18fa      	adds	r2, r7, r3
   1595c:	697b      	ldr	r3, [r7, #20]
   1595e:	18d3      	adds	r3, r2, r3
   15960:	781a      	ldrb	r2, [r3, #0]
   15962:	4b38      	ldr	r3, [pc, #224]	; (15a44 <vUiHandlerTask+0x390>)
   15964:	545a      	strb	r2, [r3, r1]
						ship_loc_out_num++;
   15966:	4b2b      	ldr	r3, [pc, #172]	; (15a14 <vUiHandlerTask+0x360>)
   15968:	781b      	ldrb	r3, [r3, #0]
   1596a:	3301      	adds	r3, #1
   1596c:	b2da      	uxtb	r2, r3
   1596e:	4b29      	ldr	r3, [pc, #164]	; (15a14 <vUiHandlerTask+0x360>)
   15970:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < ship_arr[i];j++){
   15972:	697b      	ldr	r3, [r7, #20]
   15974:	3301      	adds	r3, #1
   15976:	617b      	str	r3, [r7, #20]
   15978:	4a2e      	ldr	r2, [pc, #184]	; (15a34 <vUiHandlerTask+0x380>)
   1597a:	69fb      	ldr	r3, [r7, #28]
   1597c:	18d3      	adds	r3, r2, r3
   1597e:	781b      	ldrb	r3, [r3, #0]
   15980:	001a      	movs	r2, r3
   15982:	697b      	ldr	r3, [r7, #20]
   15984:	429a      	cmp	r2, r3
   15986:	dce4      	bgt.n	15952 <vUiHandlerTask+0x29e>
				for(int i = 0; i < ship_num; i++){
   15988:	69fb      	ldr	r3, [r7, #28]
   1598a:	3301      	adds	r3, #1
   1598c:	61fb      	str	r3, [r7, #28]
   1598e:	4b2e      	ldr	r3, [pc, #184]	; (15a48 <vUiHandlerTask+0x394>)
   15990:	781b      	ldrb	r3, [r3, #0]
   15992:	001a      	movs	r2, r3
   15994:	69fb      	ldr	r3, [r7, #28]
   15996:	429a      	cmp	r2, r3
   15998:	dd00      	ble.n	1599c <vUiHandlerTask+0x2e8>
   1599a:	e6ac      	b.n	156f6 <vUiHandlerTask+0x42>
					}
					
				}
				
				WifiSendShipLoc(ship_loc_out, ship_loc_out_num);
   1599c:	4b1d      	ldr	r3, [pc, #116]	; (15a14 <vUiHandlerTask+0x360>)
   1599e:	781a      	ldrb	r2, [r3, #0]
   159a0:	4b28      	ldr	r3, [pc, #160]	; (15a44 <vUiHandlerTask+0x390>)
   159a2:	0011      	movs	r1, r2
   159a4:	0018      	movs	r0, r3
   159a6:	4b29      	ldr	r3, [pc, #164]	; (15a4c <vUiHandlerTask+0x398>)
   159a8:	4798      	blx	r3
				//ConcatToArrString(ship_loc_out, ship_loc_out_num, stringOut);
				//LogMessage(LOG_DEBUG_LVL, stringOut);
				
				
				
				uiState = UI_WAIT_FOR_TURN;
   159aa:	4b19      	ldr	r3, [pc, #100]	; (15a10 <vUiHandlerTask+0x35c>)
   159ac:	2203      	movs	r2, #3
   159ae:	701a      	strb	r2, [r3, #0]
				LogMessage(LOG_DEBUG_LVL, "Placement finished! \r\n");
   159b0:	4b27      	ldr	r3, [pc, #156]	; (15a50 <vUiHandlerTask+0x39c>)
   159b2:	0019      	movs	r1, r3
   159b4:	2001      	movs	r0, #1
   159b6:	4b27      	ldr	r3, [pc, #156]	; (15a54 <vUiHandlerTask+0x3a0>)
   159b8:	4798      	blx	r3
                break;
   159ba:	e0e6      	b.n	15b8a <vUiHandlerTask+0x4d6>
            }
			
			case(UI_WAIT_FOR_TURN): {
				uiState = UI_STATE_HANDLE_SHOOT;
   159bc:	4b14      	ldr	r3, [pc, #80]	; (15a10 <vUiHandlerTask+0x35c>)
   159be:	2202      	movs	r2, #2
   159c0:	701a      	strb	r2, [r3, #0]
				LogMessage(LOG_DEBUG_LVL, "Ready to fire! \r\n");
   159c2:	4b25      	ldr	r3, [pc, #148]	; (15a58 <vUiHandlerTask+0x3a4>)
   159c4:	0019      	movs	r1, r3
   159c6:	2001      	movs	r0, #1
   159c8:	4b22      	ldr	r3, [pc, #136]	; (15a54 <vUiHandlerTask+0x3a0>)
   159ca:	4798      	blx	r3
				break;
   159cc:	e0dd      	b.n	15b8a <vUiHandlerTask+0x4d6>
			}

            case (UI_STATE_HANDLE_SHOOT): {
				uint8_t ship_head;
					
				if (GAME_TURN_TOPIC_SUB == 1) {
   159ce:	4b23      	ldr	r3, [pc, #140]	; (15a5c <vUiHandlerTask+0x3a8>)
   159d0:	2b01      	cmp	r3, #1
   159d2:	d000      	beq.n	159d6 <vUiHandlerTask+0x322>
   159d4:	e07d      	b.n	15ad2 <vUiHandlerTask+0x41e>
					uint8_t temp = SeesawGetKeypadCount(NEO_TRELLIS_ADDR_1);
   159d6:	2313      	movs	r3, #19
   159d8:	18fc      	adds	r4, r7, r3
   159da:	202e      	movs	r0, #46	; 0x2e
   159dc:	4b0e      	ldr	r3, [pc, #56]	; (15a18 <vUiHandlerTask+0x364>)
   159de:	4798      	blx	r3
   159e0:	0003      	movs	r3, r0
   159e2:	7023      	strb	r3, [r4, #0]
					if(temp == 99){uiState = UI_STATE_IGNORE_PRESSES;}
   159e4:	2313      	movs	r3, #19
   159e6:	18fb      	adds	r3, r7, r3
   159e8:	781b      	ldrb	r3, [r3, #0]
   159ea:	2b63      	cmp	r3, #99	; 0x63
   159ec:	d102      	bne.n	159f4 <vUiHandlerTask+0x340>
   159ee:	4b08      	ldr	r3, [pc, #32]	; (15a10 <vUiHandlerTask+0x35c>)
   159f0:	2200      	movs	r2, #0
   159f2:	701a      	strb	r2, [r3, #0]
					if(temp  == 0){vTaskDelay(50); continue;}
   159f4:	2313      	movs	r3, #19
   159f6:	18fb      	adds	r3, r7, r3
   159f8:	781b      	ldrb	r3, [r3, #0]
   159fa:	2b00      	cmp	r3, #0
   159fc:	d130      	bne.n	15a60 <vUiHandlerTask+0x3ac>
   159fe:	2032      	movs	r0, #50	; 0x32
   15a00:	4b06      	ldr	r3, [pc, #24]	; (15a1c <vUiHandlerTask+0x368>)
   15a02:	4798      	blx	r3
   15a04:	e0c8      	b.n	15b98 <vUiHandlerTask+0x4e4>
   15a06:	46c0      	nop			; (mov r8, r8)
   15a08:	00036170 	.word	0x00036170
   15a0c:	0001e045 	.word	0x0001e045
   15a10:	20004439 	.word	0x20004439
   15a14:	2000044c 	.word	0x2000044c
   15a18:	000150e1 	.word	0x000150e1
   15a1c:	0001c3f1 	.word	0x0001c3f1
   15a20:	20004424 	.word	0x20004424
   15a24:	0001515d 	.word	0x0001515d
   15a28:	2000004c 	.word	0x2000004c
   15a2c:	000152b5 	.word	0x000152b5
   15a30:	00015385 	.word	0x00015385
   15a34:	20004388 	.word	0x20004388
   15a38:	00015c75 	.word	0x00015c75
   15a3c:	00015f55 	.word	0x00015f55
   15a40:	00015db1 	.word	0x00015db1
   15a44:	20004428 	.word	0x20004428
   15a48:	20004385 	.word	0x20004385
   15a4c:	00017561 	.word	0x00017561
   15a50:	00036184 	.word	0x00036184
   15a54:	0001e131 	.word	0x0001e131
   15a58:	0003619c 	.word	0x0003619c
   15a5c:	000361b0 	.word	0x000361b0
						
					if( ERROR_NONE == SeesawReadKeypad(NEO_TRELLIS_ADDR_1, &ship_loc_buffer, 1) ){
   15a60:	4b4e      	ldr	r3, [pc, #312]	; (15b9c <vUiHandlerTask+0x4e8>)
   15a62:	2201      	movs	r2, #1
   15a64:	0019      	movs	r1, r3
   15a66:	202e      	movs	r0, #46	; 0x2e
   15a68:	4b4d      	ldr	r3, [pc, #308]	; (15ba0 <vUiHandlerTask+0x4ec>)
   15a6a:	4798      	blx	r3
   15a6c:	1e03      	subs	r3, r0, #0
   15a6e:	d000      	beq.n	15a72 <vUiHandlerTask+0x3be>
   15a70:	e07d      	b.n	15b6e <vUiHandlerTask+0x4ba>
					
						ship_loc_buffer = NEO_TRELLIS_SEESAW_KEY((ship_loc_buffer & 0xFD) >> 2);
   15a72:	4b4a      	ldr	r3, [pc, #296]	; (15b9c <vUiHandlerTask+0x4e8>)
   15a74:	781b      	ldrb	r3, [r3, #0]
   15a76:	089b      	lsrs	r3, r3, #2
   15a78:	b2db      	uxtb	r3, r3
   15a7a:	2b00      	cmp	r3, #0
   15a7c:	da00      	bge.n	15a80 <vUiHandlerTask+0x3cc>
   15a7e:	3307      	adds	r3, #7
   15a80:	10db      	asrs	r3, r3, #3
   15a82:	b2db      	uxtb	r3, r3
   15a84:	009b      	lsls	r3, r3, #2
   15a86:	b2da      	uxtb	r2, r3
   15a88:	4b44      	ldr	r3, [pc, #272]	; (15b9c <vUiHandlerTask+0x4e8>)
   15a8a:	781b      	ldrb	r3, [r3, #0]
   15a8c:	089b      	lsrs	r3, r3, #2
   15a8e:	b2db      	uxtb	r3, r3
   15a90:	2107      	movs	r1, #7
   15a92:	400b      	ands	r3, r1
   15a94:	b2db      	uxtb	r3, r3
   15a96:	18d3      	adds	r3, r2, r3
   15a98:	b2da      	uxtb	r2, r3
   15a9a:	4b40      	ldr	r3, [pc, #256]	; (15b9c <vUiHandlerTask+0x4e8>)
   15a9c:	701a      	strb	r2, [r3, #0]
					
						if(place_tile_stat[ship_loc_buffer] == UI_PLACE_PLACED){continue;}
   15a9e:	4b3f      	ldr	r3, [pc, #252]	; (15b9c <vUiHandlerTask+0x4e8>)
   15aa0:	781b      	ldrb	r3, [r3, #0]
   15aa2:	001a      	movs	r2, r3
   15aa4:	4b3f      	ldr	r3, [pc, #252]	; (15ba4 <vUiHandlerTask+0x4f0>)
   15aa6:	5c9b      	ldrb	r3, [r3, r2]
   15aa8:	2b01      	cmp	r3, #1
   15aaa:	d100      	bne.n	15aae <vUiHandlerTask+0x3fa>
   15aac:	e071      	b.n	15b92 <vUiHandlerTask+0x4de>
						SeesawSetLed(NEO_TRELLIS_ADDR_1,ship_loc_buffer, 0, 0, 50);
   15aae:	4b3b      	ldr	r3, [pc, #236]	; (15b9c <vUiHandlerTask+0x4e8>)
   15ab0:	7819      	ldrb	r1, [r3, #0]
   15ab2:	2332      	movs	r3, #50	; 0x32
   15ab4:	9300      	str	r3, [sp, #0]
   15ab6:	2300      	movs	r3, #0
   15ab8:	2200      	movs	r2, #0
   15aba:	202e      	movs	r0, #46	; 0x2e
   15abc:	4c3a      	ldr	r4, [pc, #232]	; (15ba8 <vUiHandlerTask+0x4f4>)
   15abe:	47a0      	blx	r4
						SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_1);
   15ac0:	202e      	movs	r0, #46	; 0x2e
   15ac2:	4b3a      	ldr	r3, [pc, #232]	; (15bac <vUiHandlerTask+0x4f8>)
   15ac4:	4798      	blx	r3
					
						ship_head = ship_loc_buffer;
   15ac6:	2312      	movs	r3, #18
   15ac8:	18fb      	adds	r3, r7, r3
   15aca:	4a34      	ldr	r2, [pc, #208]	; (15b9c <vUiHandlerTask+0x4e8>)
   15acc:	7812      	ldrb	r2, [r2, #0]
   15ace:	701a      	strb	r2, [r3, #0]
   15ad0:	e04d      	b.n	15b6e <vUiHandlerTask+0x4ba>
					}
				}
				
				else if (1) {
					uint8_t temp = SeesawGetKeypadCount(NEO_TRELLIS_ADDR_2);
   15ad2:	2311      	movs	r3, #17
   15ad4:	18fc      	adds	r4, r7, r3
   15ad6:	202f      	movs	r0, #47	; 0x2f
   15ad8:	4b35      	ldr	r3, [pc, #212]	; (15bb0 <vUiHandlerTask+0x4fc>)
   15ada:	4798      	blx	r3
   15adc:	0003      	movs	r3, r0
   15ade:	7023      	strb	r3, [r4, #0]
					if(temp == 99){uiState = UI_STATE_IGNORE_PRESSES;}
   15ae0:	2311      	movs	r3, #17
   15ae2:	18fb      	adds	r3, r7, r3
   15ae4:	781b      	ldrb	r3, [r3, #0]
   15ae6:	2b63      	cmp	r3, #99	; 0x63
   15ae8:	d102      	bne.n	15af0 <vUiHandlerTask+0x43c>
   15aea:	4b32      	ldr	r3, [pc, #200]	; (15bb4 <vUiHandlerTask+0x500>)
   15aec:	2200      	movs	r2, #0
   15aee:	701a      	strb	r2, [r3, #0]
					if(temp  == 0){vTaskDelay(50); continue;}
   15af0:	2311      	movs	r3, #17
   15af2:	18fb      	adds	r3, r7, r3
   15af4:	781b      	ldrb	r3, [r3, #0]
   15af6:	2b00      	cmp	r3, #0
   15af8:	d103      	bne.n	15b02 <vUiHandlerTask+0x44e>
   15afa:	2032      	movs	r0, #50	; 0x32
   15afc:	4b2e      	ldr	r3, [pc, #184]	; (15bb8 <vUiHandlerTask+0x504>)
   15afe:	4798      	blx	r3
   15b00:	e04a      	b.n	15b98 <vUiHandlerTask+0x4e4>
					
					if( ERROR_NONE == SeesawReadKeypad(NEO_TRELLIS_ADDR_2, &ship_loc_buffer, 1) ){
   15b02:	4b26      	ldr	r3, [pc, #152]	; (15b9c <vUiHandlerTask+0x4e8>)
   15b04:	2201      	movs	r2, #1
   15b06:	0019      	movs	r1, r3
   15b08:	202f      	movs	r0, #47	; 0x2f
   15b0a:	4b25      	ldr	r3, [pc, #148]	; (15ba0 <vUiHandlerTask+0x4ec>)
   15b0c:	4798      	blx	r3
   15b0e:	1e03      	subs	r3, r0, #0
   15b10:	d12d      	bne.n	15b6e <vUiHandlerTask+0x4ba>
						
						ship_loc_buffer = NEO_TRELLIS_SEESAW_KEY((ship_loc_buffer & 0xFD) >> 2);
   15b12:	4b22      	ldr	r3, [pc, #136]	; (15b9c <vUiHandlerTask+0x4e8>)
   15b14:	781b      	ldrb	r3, [r3, #0]
   15b16:	089b      	lsrs	r3, r3, #2
   15b18:	b2db      	uxtb	r3, r3
   15b1a:	2b00      	cmp	r3, #0
   15b1c:	da00      	bge.n	15b20 <vUiHandlerTask+0x46c>
   15b1e:	3307      	adds	r3, #7
   15b20:	10db      	asrs	r3, r3, #3
   15b22:	b2db      	uxtb	r3, r3
   15b24:	009b      	lsls	r3, r3, #2
   15b26:	b2da      	uxtb	r2, r3
   15b28:	4b1c      	ldr	r3, [pc, #112]	; (15b9c <vUiHandlerTask+0x4e8>)
   15b2a:	781b      	ldrb	r3, [r3, #0]
   15b2c:	089b      	lsrs	r3, r3, #2
   15b2e:	b2db      	uxtb	r3, r3
   15b30:	2107      	movs	r1, #7
   15b32:	400b      	ands	r3, r1
   15b34:	b2db      	uxtb	r3, r3
   15b36:	18d3      	adds	r3, r2, r3
   15b38:	b2da      	uxtb	r2, r3
   15b3a:	4b18      	ldr	r3, [pc, #96]	; (15b9c <vUiHandlerTask+0x4e8>)
   15b3c:	701a      	strb	r2, [r3, #0]
						
						if(place_tile_stat[ship_loc_buffer] == UI_PLACE_PLACED){continue;}
   15b3e:	4b17      	ldr	r3, [pc, #92]	; (15b9c <vUiHandlerTask+0x4e8>)
   15b40:	781b      	ldrb	r3, [r3, #0]
   15b42:	001a      	movs	r2, r3
   15b44:	4b17      	ldr	r3, [pc, #92]	; (15ba4 <vUiHandlerTask+0x4f0>)
   15b46:	5c9b      	ldrb	r3, [r3, r2]
   15b48:	2b01      	cmp	r3, #1
   15b4a:	d024      	beq.n	15b96 <vUiHandlerTask+0x4e2>
						SeesawSetLed(NEO_TRELLIS_ADDR_2,ship_loc_buffer, 0, 0, 50);
   15b4c:	4b13      	ldr	r3, [pc, #76]	; (15b9c <vUiHandlerTask+0x4e8>)
   15b4e:	7819      	ldrb	r1, [r3, #0]
   15b50:	2332      	movs	r3, #50	; 0x32
   15b52:	9300      	str	r3, [sp, #0]
   15b54:	2300      	movs	r3, #0
   15b56:	2200      	movs	r2, #0
   15b58:	202f      	movs	r0, #47	; 0x2f
   15b5a:	4c13      	ldr	r4, [pc, #76]	; (15ba8 <vUiHandlerTask+0x4f4>)
   15b5c:	47a0      	blx	r4
						SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_2);
   15b5e:	202f      	movs	r0, #47	; 0x2f
   15b60:	4b12      	ldr	r3, [pc, #72]	; (15bac <vUiHandlerTask+0x4f8>)
   15b62:	4798      	blx	r3
						
						ship_head = ship_loc_buffer;
   15b64:	2312      	movs	r3, #18
   15b66:	18fb      	adds	r3, r7, r3
   15b68:	4a0c      	ldr	r2, [pc, #48]	; (15b9c <vUiHandlerTask+0x4e8>)
   15b6a:	7812      	ldrb	r2, [r2, #0]
   15b6c:	701a      	strb	r2, [r3, #0]
					}
				}
				
				uiState = UI_STATE_IGNORE_PRESSES;
   15b6e:	4b11      	ldr	r3, [pc, #68]	; (15bb4 <vUiHandlerTask+0x500>)
   15b70:	2200      	movs	r2, #0
   15b72:	701a      	strb	r2, [r3, #0]
				//publish data back to the cloud
				LogMessage(LOG_DEBUG_LVL, "Fire done! \r\n");
   15b74:	4b11      	ldr	r3, [pc, #68]	; (15bbc <vUiHandlerTask+0x508>)
   15b76:	0019      	movs	r1, r3
   15b78:	2001      	movs	r0, #1
   15b7a:	4b11      	ldr	r3, [pc, #68]	; (15bc0 <vUiHandlerTask+0x50c>)
   15b7c:	4798      	blx	r3
				break;
   15b7e:	e004      	b.n	15b8a <vUiHandlerTask+0x4d6>
			}

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_IGNORE_PRESSES;
   15b80:	4b0c      	ldr	r3, [pc, #48]	; (15bb4 <vUiHandlerTask+0x500>)
   15b82:	2200      	movs	r2, #0
   15b84:	701a      	strb	r2, [r3, #0]
                break;
   15b86:	e000      	b.n	15b8a <vUiHandlerTask+0x4d6>
                break;
   15b88:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   15b8a:	2032      	movs	r0, #50	; 0x32
   15b8c:	4b0a      	ldr	r3, [pc, #40]	; (15bb8 <vUiHandlerTask+0x504>)
   15b8e:	4798      	blx	r3
   15b90:	e59b      	b.n	156ca <vUiHandlerTask+0x16>
						if(place_tile_stat[ship_loc_buffer] == UI_PLACE_PLACED){continue;}
   15b92:	46c0      	nop			; (mov r8, r8)
   15b94:	e599      	b.n	156ca <vUiHandlerTask+0x16>
						if(place_tile_stat[ship_loc_buffer] == UI_PLACE_PLACED){continue;}
   15b96:	46c0      	nop			; (mov r8, r8)
        switch (uiState) {
   15b98:	e597      	b.n	156ca <vUiHandlerTask+0x16>
   15b9a:	46c0      	nop			; (mov r8, r8)
   15b9c:	20004424 	.word	0x20004424
   15ba0:	0001515d 	.word	0x0001515d
   15ba4:	2000004c 	.word	0x2000004c
   15ba8:	000152b5 	.word	0x000152b5
   15bac:	00015385 	.word	0x00015385
   15bb0:	000150e1 	.word	0x000150e1
   15bb4:	20004439 	.word	0x20004439
   15bb8:	0001c3f1 	.word	0x0001c3f1
   15bbc:	000361c0 	.word	0x000361c0
   15bc0:	0001e131 	.word	0x0001e131

00015bc4 <UiPlaceInit>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiPlaceInit(uint8_t *shiparr_in,uint8_t ship_num_in)
{
   15bc4:	b590      	push	{r4, r7, lr}
   15bc6:	b087      	sub	sp, #28
   15bc8:	af02      	add	r7, sp, #8
   15bca:	6078      	str	r0, [r7, #4]
   15bcc:	000a      	movs	r2, r1
   15bce:	1cfb      	adds	r3, r7, #3
   15bd0:	701a      	strb	r2, [r3, #0]
	LogMessage(LOG_DEBUG_LVL, "Placement started! \r\n");
   15bd2:	4b1f      	ldr	r3, [pc, #124]	; (15c50 <UiPlaceInit+0x8c>)
   15bd4:	0019      	movs	r1, r3
   15bd6:	2001      	movs	r0, #1
   15bd8:	4b1e      	ldr	r3, [pc, #120]	; (15c54 <UiPlaceInit+0x90>)
   15bda:	4798      	blx	r3
	memcpy (ship_arr, shiparr_in, ship_num * sizeof (uint8_t));
   15bdc:	4b1e      	ldr	r3, [pc, #120]	; (15c58 <UiPlaceInit+0x94>)
   15bde:	781b      	ldrb	r3, [r3, #0]
   15be0:	001a      	movs	r2, r3
   15be2:	6879      	ldr	r1, [r7, #4]
   15be4:	4b1d      	ldr	r3, [pc, #116]	; (15c5c <UiPlaceInit+0x98>)
   15be6:	0018      	movs	r0, r3
   15be8:	4b1d      	ldr	r3, [pc, #116]	; (15c60 <UiPlaceInit+0x9c>)
   15bea:	4798      	blx	r3
	ship_num = ship_num_in;
   15bec:	4b1a      	ldr	r3, [pc, #104]	; (15c58 <UiPlaceInit+0x94>)
   15bee:	1cfa      	adds	r2, r7, #3
   15bf0:	7812      	ldrb	r2, [r2, #0]
   15bf2:	701a      	strb	r2, [r3, #0]
	for(int i =0 ; i < MAX_TILE; i++){
   15bf4:	2300      	movs	r3, #0
   15bf6:	60fb      	str	r3, [r7, #12]
   15bf8:	e019      	b.n	15c2e <UiPlaceInit+0x6a>
		SeesawSetLed(NEO_TRELLIS_ADDR_1,i,R_PLACE_INVALID,G_PLACE_INVALID,B_PLACE_INVALID);
   15bfa:	68fb      	ldr	r3, [r7, #12]
   15bfc:	b2d9      	uxtb	r1, r3
   15bfe:	2300      	movs	r3, #0
   15c00:	9300      	str	r3, [sp, #0]
   15c02:	2300      	movs	r3, #0
   15c04:	2200      	movs	r2, #0
   15c06:	202e      	movs	r0, #46	; 0x2e
   15c08:	4c16      	ldr	r4, [pc, #88]	; (15c64 <UiPlaceInit+0xa0>)
   15c0a:	47a0      	blx	r4
		SeesawSetLed(NEO_TRELLIS_ADDR_2,i,R_PLACE_INVALID,G_PLACE_INVALID,B_PLACE_INVALID);
   15c0c:	68fb      	ldr	r3, [r7, #12]
   15c0e:	b2d9      	uxtb	r1, r3
   15c10:	2300      	movs	r3, #0
   15c12:	9300      	str	r3, [sp, #0]
   15c14:	2300      	movs	r3, #0
   15c16:	2200      	movs	r2, #0
   15c18:	202f      	movs	r0, #47	; 0x2f
   15c1a:	4c12      	ldr	r4, [pc, #72]	; (15c64 <UiPlaceInit+0xa0>)
   15c1c:	47a0      	blx	r4
		place_tile_stat[i] = UI_PLACE_INVALID;
   15c1e:	4a12      	ldr	r2, [pc, #72]	; (15c68 <UiPlaceInit+0xa4>)
   15c20:	68fb      	ldr	r3, [r7, #12]
   15c22:	18d3      	adds	r3, r2, r3
   15c24:	2202      	movs	r2, #2
   15c26:	701a      	strb	r2, [r3, #0]
	for(int i =0 ; i < MAX_TILE; i++){
   15c28:	68fb      	ldr	r3, [r7, #12]
   15c2a:	3301      	adds	r3, #1
   15c2c:	60fb      	str	r3, [r7, #12]
   15c2e:	68fb      	ldr	r3, [r7, #12]
   15c30:	2b0f      	cmp	r3, #15
   15c32:	dde2      	ble.n	15bfa <UiPlaceInit+0x36>
	}
	SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_1);
   15c34:	202e      	movs	r0, #46	; 0x2e
   15c36:	4b0d      	ldr	r3, [pc, #52]	; (15c6c <UiPlaceInit+0xa8>)
   15c38:	4798      	blx	r3
	SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_2);
   15c3a:	202f      	movs	r0, #47	; 0x2f
   15c3c:	4b0b      	ldr	r3, [pc, #44]	; (15c6c <UiPlaceInit+0xa8>)
   15c3e:	4798      	blx	r3
	uiState = UI_STATE_PLACE_SHIP;
   15c40:	4b0b      	ldr	r3, [pc, #44]	; (15c70 <UiPlaceInit+0xac>)
   15c42:	2201      	movs	r2, #1
   15c44:	701a      	strb	r2, [r3, #0]
}
   15c46:	46c0      	nop			; (mov r8, r8)
   15c48:	46bd      	mov	sp, r7
   15c4a:	b005      	add	sp, #20
   15c4c:	bd90      	pop	{r4, r7, pc}
   15c4e:	46c0      	nop			; (mov r8, r8)
   15c50:	000361d0 	.word	0x000361d0
   15c54:	0001e131 	.word	0x0001e131
   15c58:	20004385 	.word	0x20004385
   15c5c:	20004388 	.word	0x20004388
   15c60:	00034869 	.word	0x00034869
   15c64:	000152b5 	.word	0x000152b5
   15c68:	2000004c 	.word	0x2000004c
   15c6c:	00015385 	.word	0x00015385
   15c70:	20004439 	.word	0x20004439

00015c74 <UiPlaceSuggest2>:

static void UiPlaceSuggest2(uint8_t loc)
{
   15c74:	b590      	push	{r4, r7, lr}
   15c76:	b087      	sub	sp, #28
   15c78:	af02      	add	r7, sp, #8
   15c7a:	0002      	movs	r2, r0
   15c7c:	1dfb      	adds	r3, r7, #7
   15c7e:	701a      	strb	r2, [r3, #0]
	uint8_t rec_loc;
	if(loc > 3){
   15c80:	1dfb      	adds	r3, r7, #7
   15c82:	781b      	ldrb	r3, [r3, #0]
   15c84:	2b03      	cmp	r3, #3
   15c86:	d91c      	bls.n	15cc2 <UiPlaceSuggest2+0x4e>
		rec_loc = loc - 4;
   15c88:	230f      	movs	r3, #15
   15c8a:	18fb      	adds	r3, r7, r3
   15c8c:	1dfa      	adds	r2, r7, #7
   15c8e:	7812      	ldrb	r2, [r2, #0]
   15c90:	3a04      	subs	r2, #4
   15c92:	701a      	strb	r2, [r3, #0]
		if(place_tile_stat[rec_loc] != UI_PLACE_PLACED){
   15c94:	230f      	movs	r3, #15
   15c96:	18fb      	adds	r3, r7, r3
   15c98:	781b      	ldrb	r3, [r3, #0]
   15c9a:	4a42      	ldr	r2, [pc, #264]	; (15da4 <UiPlaceSuggest2+0x130>)
   15c9c:	5cd3      	ldrb	r3, [r2, r3]
   15c9e:	2b01      	cmp	r3, #1
   15ca0:	d00f      	beq.n	15cc2 <UiPlaceSuggest2+0x4e>
			place_tile_stat[rec_loc] = UI_PLACE_VALID;
   15ca2:	230f      	movs	r3, #15
   15ca4:	18fb      	adds	r3, r7, r3
   15ca6:	781b      	ldrb	r3, [r3, #0]
   15ca8:	4a3e      	ldr	r2, [pc, #248]	; (15da4 <UiPlaceSuggest2+0x130>)
   15caa:	2100      	movs	r1, #0
   15cac:	54d1      	strb	r1, [r2, r3]
			SeesawSetLed(NEO_TRELLIS_ADDR_1,rec_loc, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15cae:	230f      	movs	r3, #15
   15cb0:	18fb      	adds	r3, r7, r3
   15cb2:	7819      	ldrb	r1, [r3, #0]
   15cb4:	2302      	movs	r3, #2
   15cb6:	9300      	str	r3, [sp, #0]
   15cb8:	2332      	movs	r3, #50	; 0x32
   15cba:	2232      	movs	r2, #50	; 0x32
   15cbc:	202e      	movs	r0, #46	; 0x2e
   15cbe:	4c3a      	ldr	r4, [pc, #232]	; (15da8 <UiPlaceSuggest2+0x134>)
   15cc0:	47a0      	blx	r4
		}
	}
	
	if(loc < 12){
   15cc2:	1dfb      	adds	r3, r7, #7
   15cc4:	781b      	ldrb	r3, [r3, #0]
   15cc6:	2b0b      	cmp	r3, #11
   15cc8:	d81c      	bhi.n	15d04 <UiPlaceSuggest2+0x90>
		rec_loc = loc + 4;
   15cca:	230f      	movs	r3, #15
   15ccc:	18fb      	adds	r3, r7, r3
   15cce:	1dfa      	adds	r2, r7, #7
   15cd0:	7812      	ldrb	r2, [r2, #0]
   15cd2:	3204      	adds	r2, #4
   15cd4:	701a      	strb	r2, [r3, #0]
		if(place_tile_stat[rec_loc] != UI_PLACE_PLACED){
   15cd6:	230f      	movs	r3, #15
   15cd8:	18fb      	adds	r3, r7, r3
   15cda:	781b      	ldrb	r3, [r3, #0]
   15cdc:	4a31      	ldr	r2, [pc, #196]	; (15da4 <UiPlaceSuggest2+0x130>)
   15cde:	5cd3      	ldrb	r3, [r2, r3]
   15ce0:	2b01      	cmp	r3, #1
   15ce2:	d00f      	beq.n	15d04 <UiPlaceSuggest2+0x90>
			place_tile_stat[rec_loc] = UI_PLACE_VALID;
   15ce4:	230f      	movs	r3, #15
   15ce6:	18fb      	adds	r3, r7, r3
   15ce8:	781b      	ldrb	r3, [r3, #0]
   15cea:	4a2e      	ldr	r2, [pc, #184]	; (15da4 <UiPlaceSuggest2+0x130>)
   15cec:	2100      	movs	r1, #0
   15cee:	54d1      	strb	r1, [r2, r3]
			SeesawSetLed(NEO_TRELLIS_ADDR_1,rec_loc, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15cf0:	230f      	movs	r3, #15
   15cf2:	18fb      	adds	r3, r7, r3
   15cf4:	7819      	ldrb	r1, [r3, #0]
   15cf6:	2302      	movs	r3, #2
   15cf8:	9300      	str	r3, [sp, #0]
   15cfa:	2332      	movs	r3, #50	; 0x32
   15cfc:	2232      	movs	r2, #50	; 0x32
   15cfe:	202e      	movs	r0, #46	; 0x2e
   15d00:	4c29      	ldr	r4, [pc, #164]	; (15da8 <UiPlaceSuggest2+0x134>)
   15d02:	47a0      	blx	r4
		}
	}
	
	if(loc % 4 != 3){
   15d04:	1dfb      	adds	r3, r7, #7
   15d06:	781b      	ldrb	r3, [r3, #0]
   15d08:	2203      	movs	r2, #3
   15d0a:	4013      	ands	r3, r2
   15d0c:	b2db      	uxtb	r3, r3
   15d0e:	2b03      	cmp	r3, #3
   15d10:	d01c      	beq.n	15d4c <UiPlaceSuggest2+0xd8>
		rec_loc = loc + 1;
   15d12:	230f      	movs	r3, #15
   15d14:	18fb      	adds	r3, r7, r3
   15d16:	1dfa      	adds	r2, r7, #7
   15d18:	7812      	ldrb	r2, [r2, #0]
   15d1a:	3201      	adds	r2, #1
   15d1c:	701a      	strb	r2, [r3, #0]
		if(place_tile_stat[rec_loc] != UI_PLACE_PLACED){
   15d1e:	230f      	movs	r3, #15
   15d20:	18fb      	adds	r3, r7, r3
   15d22:	781b      	ldrb	r3, [r3, #0]
   15d24:	4a1f      	ldr	r2, [pc, #124]	; (15da4 <UiPlaceSuggest2+0x130>)
   15d26:	5cd3      	ldrb	r3, [r2, r3]
   15d28:	2b01      	cmp	r3, #1
   15d2a:	d00f      	beq.n	15d4c <UiPlaceSuggest2+0xd8>
			place_tile_stat[rec_loc] = UI_PLACE_VALID;
   15d2c:	230f      	movs	r3, #15
   15d2e:	18fb      	adds	r3, r7, r3
   15d30:	781b      	ldrb	r3, [r3, #0]
   15d32:	4a1c      	ldr	r2, [pc, #112]	; (15da4 <UiPlaceSuggest2+0x130>)
   15d34:	2100      	movs	r1, #0
   15d36:	54d1      	strb	r1, [r2, r3]
			SeesawSetLed(NEO_TRELLIS_ADDR_1,rec_loc, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15d38:	230f      	movs	r3, #15
   15d3a:	18fb      	adds	r3, r7, r3
   15d3c:	7819      	ldrb	r1, [r3, #0]
   15d3e:	2302      	movs	r3, #2
   15d40:	9300      	str	r3, [sp, #0]
   15d42:	2332      	movs	r3, #50	; 0x32
   15d44:	2232      	movs	r2, #50	; 0x32
   15d46:	202e      	movs	r0, #46	; 0x2e
   15d48:	4c17      	ldr	r4, [pc, #92]	; (15da8 <UiPlaceSuggest2+0x134>)
   15d4a:	47a0      	blx	r4
		}
	}
	
	if(loc % 4 != 0){
   15d4c:	1dfb      	adds	r3, r7, #7
   15d4e:	781b      	ldrb	r3, [r3, #0]
   15d50:	2203      	movs	r2, #3
   15d52:	4013      	ands	r3, r2
   15d54:	b2db      	uxtb	r3, r3
   15d56:	2b00      	cmp	r3, #0
   15d58:	d01c      	beq.n	15d94 <UiPlaceSuggest2+0x120>
		rec_loc = loc - 1;
   15d5a:	230f      	movs	r3, #15
   15d5c:	18fb      	adds	r3, r7, r3
   15d5e:	1dfa      	adds	r2, r7, #7
   15d60:	7812      	ldrb	r2, [r2, #0]
   15d62:	3a01      	subs	r2, #1
   15d64:	701a      	strb	r2, [r3, #0]
		if(place_tile_stat[rec_loc] != UI_PLACE_PLACED){
   15d66:	230f      	movs	r3, #15
   15d68:	18fb      	adds	r3, r7, r3
   15d6a:	781b      	ldrb	r3, [r3, #0]
   15d6c:	4a0d      	ldr	r2, [pc, #52]	; (15da4 <UiPlaceSuggest2+0x130>)
   15d6e:	5cd3      	ldrb	r3, [r2, r3]
   15d70:	2b01      	cmp	r3, #1
   15d72:	d00f      	beq.n	15d94 <UiPlaceSuggest2+0x120>
			place_tile_stat[rec_loc] = UI_PLACE_VALID;
   15d74:	230f      	movs	r3, #15
   15d76:	18fb      	adds	r3, r7, r3
   15d78:	781b      	ldrb	r3, [r3, #0]
   15d7a:	4a0a      	ldr	r2, [pc, #40]	; (15da4 <UiPlaceSuggest2+0x130>)
   15d7c:	2100      	movs	r1, #0
   15d7e:	54d1      	strb	r1, [r2, r3]
			SeesawSetLed(NEO_TRELLIS_ADDR_1,rec_loc, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15d80:	230f      	movs	r3, #15
   15d82:	18fb      	adds	r3, r7, r3
   15d84:	7819      	ldrb	r1, [r3, #0]
   15d86:	2302      	movs	r3, #2
   15d88:	9300      	str	r3, [sp, #0]
   15d8a:	2332      	movs	r3, #50	; 0x32
   15d8c:	2232      	movs	r2, #50	; 0x32
   15d8e:	202e      	movs	r0, #46	; 0x2e
   15d90:	4c05      	ldr	r4, [pc, #20]	; (15da8 <UiPlaceSuggest2+0x134>)
   15d92:	47a0      	blx	r4
			
		}
	}
	SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_1);
   15d94:	202e      	movs	r0, #46	; 0x2e
   15d96:	4b05      	ldr	r3, [pc, #20]	; (15dac <UiPlaceSuggest2+0x138>)
   15d98:	4798      	blx	r3
	
}
   15d9a:	46c0      	nop			; (mov r8, r8)
   15d9c:	46bd      	mov	sp, r7
   15d9e:	b005      	add	sp, #20
   15da0:	bd90      	pop	{r4, r7, pc}
   15da2:	46c0      	nop			; (mov r8, r8)
   15da4:	2000004c 	.word	0x2000004c
   15da8:	000152b5 	.word	0x000152b5
   15dac:	00015385 	.word	0x00015385

00015db0 <UiPlaceSuggest3>:

static void UiPlaceSuggest3(uint8_t loc_1, uint8_t loc_2)
{
   15db0:	b590      	push	{r4, r7, lr}
   15db2:	b087      	sub	sp, #28
   15db4:	af02      	add	r7, sp, #8
   15db6:	0002      	movs	r2, r0
   15db8:	1dfb      	adds	r3, r7, #7
   15dba:	701a      	strb	r2, [r3, #0]
   15dbc:	1dbb      	adds	r3, r7, #6
   15dbe:	1c0a      	adds	r2, r1, #0
   15dc0:	701a      	strb	r2, [r3, #0]
	uint8_t loc_h, loc_t;
	
	if(loc_1 < loc_2){loc_h = loc_1; loc_t = loc_2;}
   15dc2:	1dfa      	adds	r2, r7, #7
   15dc4:	1dbb      	adds	r3, r7, #6
   15dc6:	7812      	ldrb	r2, [r2, #0]
   15dc8:	781b      	ldrb	r3, [r3, #0]
   15dca:	429a      	cmp	r2, r3
   15dcc:	d20a      	bcs.n	15de4 <UiPlaceSuggest3+0x34>
   15dce:	230f      	movs	r3, #15
   15dd0:	18fb      	adds	r3, r7, r3
   15dd2:	1dfa      	adds	r2, r7, #7
   15dd4:	7812      	ldrb	r2, [r2, #0]
   15dd6:	701a      	strb	r2, [r3, #0]
   15dd8:	230e      	movs	r3, #14
   15dda:	18fb      	adds	r3, r7, r3
   15ddc:	1dba      	adds	r2, r7, #6
   15dde:	7812      	ldrb	r2, [r2, #0]
   15de0:	701a      	strb	r2, [r3, #0]
   15de2:	e009      	b.n	15df8 <UiPlaceSuggest3+0x48>
	else{loc_h = loc_2; loc_t = loc_1;}
   15de4:	230f      	movs	r3, #15
   15de6:	18fb      	adds	r3, r7, r3
   15de8:	1dba      	adds	r2, r7, #6
   15dea:	7812      	ldrb	r2, [r2, #0]
   15dec:	701a      	strb	r2, [r3, #0]
   15dee:	230e      	movs	r3, #14
   15df0:	18fb      	adds	r3, r7, r3
   15df2:	1dfa      	adds	r2, r7, #7
   15df4:	7812      	ldrb	r2, [r2, #0]
   15df6:	701a      	strb	r2, [r3, #0]
	
	if(loc_h % 4 == loc_t % 4){
   15df8:	230f      	movs	r3, #15
   15dfa:	18fa      	adds	r2, r7, r3
   15dfc:	230e      	movs	r3, #14
   15dfe:	18fb      	adds	r3, r7, r3
   15e00:	7812      	ldrb	r2, [r2, #0]
   15e02:	781b      	ldrb	r3, [r3, #0]
   15e04:	4053      	eors	r3, r2
   15e06:	b2db      	uxtb	r3, r3
   15e08:	2203      	movs	r2, #3
   15e0a:	4013      	ands	r3, r2
   15e0c:	b2db      	uxtb	r3, r3
   15e0e:	2b00      	cmp	r3, #0
   15e10:	d140      	bne.n	15e94 <UiPlaceSuggest3+0xe4>
		if(loc_h > 4){
   15e12:	230f      	movs	r3, #15
   15e14:	18fb      	adds	r3, r7, r3
   15e16:	781b      	ldrb	r3, [r3, #0]
   15e18:	2b04      	cmp	r3, #4
   15e1a:	d91a      	bls.n	15e52 <UiPlaceSuggest3+0xa2>
			if(place_tile_stat[loc_h - 4] == UI_PLACE_INVALID){
   15e1c:	230f      	movs	r3, #15
   15e1e:	18fb      	adds	r3, r7, r3
   15e20:	781b      	ldrb	r3, [r3, #0]
   15e22:	3b04      	subs	r3, #4
   15e24:	4a48      	ldr	r2, [pc, #288]	; (15f48 <UiPlaceSuggest3+0x198>)
   15e26:	5cd3      	ldrb	r3, [r2, r3]
   15e28:	2b02      	cmp	r3, #2
   15e2a:	d112      	bne.n	15e52 <UiPlaceSuggest3+0xa2>
				place_tile_stat[loc_h - 4] = UI_PLACE_VALID;
   15e2c:	230f      	movs	r3, #15
   15e2e:	18fb      	adds	r3, r7, r3
   15e30:	781b      	ldrb	r3, [r3, #0]
   15e32:	3b04      	subs	r3, #4
   15e34:	4a44      	ldr	r2, [pc, #272]	; (15f48 <UiPlaceSuggest3+0x198>)
   15e36:	2100      	movs	r1, #0
   15e38:	54d1      	strb	r1, [r2, r3]
				SeesawSetLed(NEO_TRELLIS_ADDR_1, loc_h - 4, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15e3a:	230f      	movs	r3, #15
   15e3c:	18fb      	adds	r3, r7, r3
   15e3e:	781b      	ldrb	r3, [r3, #0]
   15e40:	3b04      	subs	r3, #4
   15e42:	b2d9      	uxtb	r1, r3
   15e44:	2302      	movs	r3, #2
   15e46:	9300      	str	r3, [sp, #0]
   15e48:	2332      	movs	r3, #50	; 0x32
   15e4a:	2232      	movs	r2, #50	; 0x32
   15e4c:	202e      	movs	r0, #46	; 0x2e
   15e4e:	4c3f      	ldr	r4, [pc, #252]	; (15f4c <UiPlaceSuggest3+0x19c>)
   15e50:	47a0      	blx	r4
			}
		}
		if(loc_t < 12){
   15e52:	230e      	movs	r3, #14
   15e54:	18fb      	adds	r3, r7, r3
   15e56:	781b      	ldrb	r3, [r3, #0]
   15e58:	2b0b      	cmp	r3, #11
   15e5a:	d86d      	bhi.n	15f38 <UiPlaceSuggest3+0x188>
			if(place_tile_stat[loc_t + 4] == UI_PLACE_INVALID){
   15e5c:	230e      	movs	r3, #14
   15e5e:	18fb      	adds	r3, r7, r3
   15e60:	781b      	ldrb	r3, [r3, #0]
   15e62:	3304      	adds	r3, #4
   15e64:	4a38      	ldr	r2, [pc, #224]	; (15f48 <UiPlaceSuggest3+0x198>)
   15e66:	5cd3      	ldrb	r3, [r2, r3]
   15e68:	2b02      	cmp	r3, #2
   15e6a:	d165      	bne.n	15f38 <UiPlaceSuggest3+0x188>
				place_tile_stat[loc_t + 4] = UI_PLACE_VALID;
   15e6c:	230e      	movs	r3, #14
   15e6e:	18fb      	adds	r3, r7, r3
   15e70:	781b      	ldrb	r3, [r3, #0]
   15e72:	3304      	adds	r3, #4
   15e74:	4a34      	ldr	r2, [pc, #208]	; (15f48 <UiPlaceSuggest3+0x198>)
   15e76:	2100      	movs	r1, #0
   15e78:	54d1      	strb	r1, [r2, r3]
				SeesawSetLed(NEO_TRELLIS_ADDR_1, loc_t + 4, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15e7a:	230e      	movs	r3, #14
   15e7c:	18fb      	adds	r3, r7, r3
   15e7e:	781b      	ldrb	r3, [r3, #0]
   15e80:	3304      	adds	r3, #4
   15e82:	b2d9      	uxtb	r1, r3
   15e84:	2302      	movs	r3, #2
   15e86:	9300      	str	r3, [sp, #0]
   15e88:	2332      	movs	r3, #50	; 0x32
   15e8a:	2232      	movs	r2, #50	; 0x32
   15e8c:	202e      	movs	r0, #46	; 0x2e
   15e8e:	4c2f      	ldr	r4, [pc, #188]	; (15f4c <UiPlaceSuggest3+0x19c>)
   15e90:	47a0      	blx	r4
   15e92:	e051      	b.n	15f38 <UiPlaceSuggest3+0x188>
			}
		}
	}
	else if((int)loc_h/4 == (int)loc_t/4){
   15e94:	230f      	movs	r3, #15
   15e96:	18fb      	adds	r3, r7, r3
   15e98:	781b      	ldrb	r3, [r3, #0]
   15e9a:	089b      	lsrs	r3, r3, #2
   15e9c:	b2da      	uxtb	r2, r3
   15e9e:	230e      	movs	r3, #14
   15ea0:	18fb      	adds	r3, r7, r3
   15ea2:	781b      	ldrb	r3, [r3, #0]
   15ea4:	089b      	lsrs	r3, r3, #2
   15ea6:	b2db      	uxtb	r3, r3
   15ea8:	429a      	cmp	r2, r3
   15eaa:	d145      	bne.n	15f38 <UiPlaceSuggest3+0x188>
		// if horizontal 
		if(loc_h % 4 != 0){
   15eac:	230f      	movs	r3, #15
   15eae:	18fb      	adds	r3, r7, r3
   15eb0:	781b      	ldrb	r3, [r3, #0]
   15eb2:	2203      	movs	r2, #3
   15eb4:	4013      	ands	r3, r2
   15eb6:	b2db      	uxtb	r3, r3
   15eb8:	2b00      	cmp	r3, #0
   15eba:	d01a      	beq.n	15ef2 <UiPlaceSuggest3+0x142>
			if(place_tile_stat[loc_h - 1] == UI_PLACE_INVALID){
   15ebc:	230f      	movs	r3, #15
   15ebe:	18fb      	adds	r3, r7, r3
   15ec0:	781b      	ldrb	r3, [r3, #0]
   15ec2:	3b01      	subs	r3, #1
   15ec4:	4a20      	ldr	r2, [pc, #128]	; (15f48 <UiPlaceSuggest3+0x198>)
   15ec6:	5cd3      	ldrb	r3, [r2, r3]
   15ec8:	2b02      	cmp	r3, #2
   15eca:	d112      	bne.n	15ef2 <UiPlaceSuggest3+0x142>
				place_tile_stat[loc_h - 1] = UI_PLACE_VALID;
   15ecc:	230f      	movs	r3, #15
   15ece:	18fb      	adds	r3, r7, r3
   15ed0:	781b      	ldrb	r3, [r3, #0]
   15ed2:	3b01      	subs	r3, #1
   15ed4:	4a1c      	ldr	r2, [pc, #112]	; (15f48 <UiPlaceSuggest3+0x198>)
   15ed6:	2100      	movs	r1, #0
   15ed8:	54d1      	strb	r1, [r2, r3]
				SeesawSetLed(NEO_TRELLIS_ADDR_1, loc_h - 1, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15eda:	230f      	movs	r3, #15
   15edc:	18fb      	adds	r3, r7, r3
   15ede:	781b      	ldrb	r3, [r3, #0]
   15ee0:	3b01      	subs	r3, #1
   15ee2:	b2d9      	uxtb	r1, r3
   15ee4:	2302      	movs	r3, #2
   15ee6:	9300      	str	r3, [sp, #0]
   15ee8:	2332      	movs	r3, #50	; 0x32
   15eea:	2232      	movs	r2, #50	; 0x32
   15eec:	202e      	movs	r0, #46	; 0x2e
   15eee:	4c17      	ldr	r4, [pc, #92]	; (15f4c <UiPlaceSuggest3+0x19c>)
   15ef0:	47a0      	blx	r4
			}
		}
		if(loc_t %4 != 3){
   15ef2:	230e      	movs	r3, #14
   15ef4:	18fb      	adds	r3, r7, r3
   15ef6:	781b      	ldrb	r3, [r3, #0]
   15ef8:	2203      	movs	r2, #3
   15efa:	4013      	ands	r3, r2
   15efc:	b2db      	uxtb	r3, r3
   15efe:	2b03      	cmp	r3, #3
   15f00:	d01a      	beq.n	15f38 <UiPlaceSuggest3+0x188>
			if(place_tile_stat[loc_t + 1] == UI_PLACE_INVALID){
   15f02:	230e      	movs	r3, #14
   15f04:	18fb      	adds	r3, r7, r3
   15f06:	781b      	ldrb	r3, [r3, #0]
   15f08:	3301      	adds	r3, #1
   15f0a:	4a0f      	ldr	r2, [pc, #60]	; (15f48 <UiPlaceSuggest3+0x198>)
   15f0c:	5cd3      	ldrb	r3, [r2, r3]
   15f0e:	2b02      	cmp	r3, #2
   15f10:	d112      	bne.n	15f38 <UiPlaceSuggest3+0x188>
				place_tile_stat[loc_t + 1] = UI_PLACE_VALID;
   15f12:	230e      	movs	r3, #14
   15f14:	18fb      	adds	r3, r7, r3
   15f16:	781b      	ldrb	r3, [r3, #0]
   15f18:	3301      	adds	r3, #1
   15f1a:	4a0b      	ldr	r2, [pc, #44]	; (15f48 <UiPlaceSuggest3+0x198>)
   15f1c:	2100      	movs	r1, #0
   15f1e:	54d1      	strb	r1, [r2, r3]
				SeesawSetLed(NEO_TRELLIS_ADDR_1, loc_t + 1, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15f20:	230e      	movs	r3, #14
   15f22:	18fb      	adds	r3, r7, r3
   15f24:	781b      	ldrb	r3, [r3, #0]
   15f26:	3301      	adds	r3, #1
   15f28:	b2d9      	uxtb	r1, r3
   15f2a:	2302      	movs	r3, #2
   15f2c:	9300      	str	r3, [sp, #0]
   15f2e:	2332      	movs	r3, #50	; 0x32
   15f30:	2232      	movs	r2, #50	; 0x32
   15f32:	202e      	movs	r0, #46	; 0x2e
   15f34:	4c05      	ldr	r4, [pc, #20]	; (15f4c <UiPlaceSuggest3+0x19c>)
   15f36:	47a0      	blx	r4
			}
		}
		
	}
	
	SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_1);
   15f38:	202e      	movs	r0, #46	; 0x2e
   15f3a:	4b05      	ldr	r3, [pc, #20]	; (15f50 <UiPlaceSuggest3+0x1a0>)
   15f3c:	4798      	blx	r3
}
   15f3e:	46c0      	nop			; (mov r8, r8)
   15f40:	46bd      	mov	sp, r7
   15f42:	b005      	add	sp, #20
   15f44:	bd90      	pop	{r4, r7, pc}
   15f46:	46c0      	nop			; (mov r8, r8)
   15f48:	2000004c 	.word	0x2000004c
   15f4c:	000152b5 	.word	0x000152b5
   15f50:	00015385 	.word	0x00015385

00015f54 <UiRemoveSuggest>:


static void UiRemoveSuggest(uint8_t loc)
{
   15f54:	b590      	push	{r4, r7, lr}
   15f56:	b087      	sub	sp, #28
   15f58:	af02      	add	r7, sp, #8
   15f5a:	0002      	movs	r2, r0
   15f5c:	1dfb      	adds	r3, r7, #7
   15f5e:	701a      	strb	r2, [r3, #0]
	uint8_t rec_loc;

	rec_loc = loc + 4;
   15f60:	230f      	movs	r3, #15
   15f62:	18fb      	adds	r3, r7, r3
   15f64:	1dfa      	adds	r2, r7, #7
   15f66:	7812      	ldrb	r2, [r2, #0]
   15f68:	3204      	adds	r2, #4
   15f6a:	701a      	strb	r2, [r3, #0]
	if(place_tile_stat[rec_loc] == UI_PLACE_VALID){
   15f6c:	230f      	movs	r3, #15
   15f6e:	18fb      	adds	r3, r7, r3
   15f70:	781b      	ldrb	r3, [r3, #0]
   15f72:	4a39      	ldr	r2, [pc, #228]	; (16058 <UiRemoveSuggest+0x104>)
   15f74:	5cd3      	ldrb	r3, [r2, r3]
   15f76:	2b00      	cmp	r3, #0
   15f78:	d10f      	bne.n	15f9a <UiRemoveSuggest+0x46>
		place_tile_stat[rec_loc] = UI_PLACE_INVALID;
   15f7a:	230f      	movs	r3, #15
   15f7c:	18fb      	adds	r3, r7, r3
   15f7e:	781b      	ldrb	r3, [r3, #0]
   15f80:	4a35      	ldr	r2, [pc, #212]	; (16058 <UiRemoveSuggest+0x104>)
   15f82:	2102      	movs	r1, #2
   15f84:	54d1      	strb	r1, [r2, r3]
		SeesawSetLed(NEO_TRELLIS_ADDR_1, rec_loc, R_PLACE_INVALID, G_PLACE_INVALID, B_PLACE_INVALID);
   15f86:	230f      	movs	r3, #15
   15f88:	18fb      	adds	r3, r7, r3
   15f8a:	7819      	ldrb	r1, [r3, #0]
   15f8c:	2300      	movs	r3, #0
   15f8e:	9300      	str	r3, [sp, #0]
   15f90:	2300      	movs	r3, #0
   15f92:	2200      	movs	r2, #0
   15f94:	202e      	movs	r0, #46	; 0x2e
   15f96:	4c31      	ldr	r4, [pc, #196]	; (1605c <UiRemoveSuggest+0x108>)
   15f98:	47a0      	blx	r4

	}

	rec_loc = loc - 4;
   15f9a:	230f      	movs	r3, #15
   15f9c:	18fb      	adds	r3, r7, r3
   15f9e:	1dfa      	adds	r2, r7, #7
   15fa0:	7812      	ldrb	r2, [r2, #0]
   15fa2:	3a04      	subs	r2, #4
   15fa4:	701a      	strb	r2, [r3, #0]
	if(place_tile_stat[rec_loc] == UI_PLACE_VALID){
   15fa6:	230f      	movs	r3, #15
   15fa8:	18fb      	adds	r3, r7, r3
   15faa:	781b      	ldrb	r3, [r3, #0]
   15fac:	4a2a      	ldr	r2, [pc, #168]	; (16058 <UiRemoveSuggest+0x104>)
   15fae:	5cd3      	ldrb	r3, [r2, r3]
   15fb0:	2b00      	cmp	r3, #0
   15fb2:	d10f      	bne.n	15fd4 <UiRemoveSuggest+0x80>
		place_tile_stat[rec_loc] = UI_PLACE_INVALID;
   15fb4:	230f      	movs	r3, #15
   15fb6:	18fb      	adds	r3, r7, r3
   15fb8:	781b      	ldrb	r3, [r3, #0]
   15fba:	4a27      	ldr	r2, [pc, #156]	; (16058 <UiRemoveSuggest+0x104>)
   15fbc:	2102      	movs	r1, #2
   15fbe:	54d1      	strb	r1, [r2, r3]
		SeesawSetLed(NEO_TRELLIS_ADDR_1, rec_loc, R_PLACE_INVALID, G_PLACE_INVALID, B_PLACE_INVALID);
   15fc0:	230f      	movs	r3, #15
   15fc2:	18fb      	adds	r3, r7, r3
   15fc4:	7819      	ldrb	r1, [r3, #0]
   15fc6:	2300      	movs	r3, #0
   15fc8:	9300      	str	r3, [sp, #0]
   15fca:	2300      	movs	r3, #0
   15fcc:	2200      	movs	r2, #0
   15fce:	202e      	movs	r0, #46	; 0x2e
   15fd0:	4c22      	ldr	r4, [pc, #136]	; (1605c <UiRemoveSuggest+0x108>)
   15fd2:	47a0      	blx	r4

	}

	rec_loc = loc + 1;
   15fd4:	230f      	movs	r3, #15
   15fd6:	18fb      	adds	r3, r7, r3
   15fd8:	1dfa      	adds	r2, r7, #7
   15fda:	7812      	ldrb	r2, [r2, #0]
   15fdc:	3201      	adds	r2, #1
   15fde:	701a      	strb	r2, [r3, #0]
	if(place_tile_stat[rec_loc] == UI_PLACE_VALID){
   15fe0:	230f      	movs	r3, #15
   15fe2:	18fb      	adds	r3, r7, r3
   15fe4:	781b      	ldrb	r3, [r3, #0]
   15fe6:	4a1c      	ldr	r2, [pc, #112]	; (16058 <UiRemoveSuggest+0x104>)
   15fe8:	5cd3      	ldrb	r3, [r2, r3]
   15fea:	2b00      	cmp	r3, #0
   15fec:	d10f      	bne.n	1600e <UiRemoveSuggest+0xba>
		place_tile_stat[rec_loc] = UI_PLACE_INVALID;
   15fee:	230f      	movs	r3, #15
   15ff0:	18fb      	adds	r3, r7, r3
   15ff2:	781b      	ldrb	r3, [r3, #0]
   15ff4:	4a18      	ldr	r2, [pc, #96]	; (16058 <UiRemoveSuggest+0x104>)
   15ff6:	2102      	movs	r1, #2
   15ff8:	54d1      	strb	r1, [r2, r3]
		SeesawSetLed(NEO_TRELLIS_ADDR_1, rec_loc, R_PLACE_INVALID, G_PLACE_INVALID, B_PLACE_INVALID);
   15ffa:	230f      	movs	r3, #15
   15ffc:	18fb      	adds	r3, r7, r3
   15ffe:	7819      	ldrb	r1, [r3, #0]
   16000:	2300      	movs	r3, #0
   16002:	9300      	str	r3, [sp, #0]
   16004:	2300      	movs	r3, #0
   16006:	2200      	movs	r2, #0
   16008:	202e      	movs	r0, #46	; 0x2e
   1600a:	4c14      	ldr	r4, [pc, #80]	; (1605c <UiRemoveSuggest+0x108>)
   1600c:	47a0      	blx	r4

	}

	rec_loc = loc - 1;
   1600e:	230f      	movs	r3, #15
   16010:	18fb      	adds	r3, r7, r3
   16012:	1dfa      	adds	r2, r7, #7
   16014:	7812      	ldrb	r2, [r2, #0]
   16016:	3a01      	subs	r2, #1
   16018:	701a      	strb	r2, [r3, #0]
	if(place_tile_stat[rec_loc] == UI_PLACE_VALID){
   1601a:	230f      	movs	r3, #15
   1601c:	18fb      	adds	r3, r7, r3
   1601e:	781b      	ldrb	r3, [r3, #0]
   16020:	4a0d      	ldr	r2, [pc, #52]	; (16058 <UiRemoveSuggest+0x104>)
   16022:	5cd3      	ldrb	r3, [r2, r3]
   16024:	2b00      	cmp	r3, #0
   16026:	d10f      	bne.n	16048 <UiRemoveSuggest+0xf4>
		place_tile_stat[rec_loc] = UI_PLACE_INVALID;
   16028:	230f      	movs	r3, #15
   1602a:	18fb      	adds	r3, r7, r3
   1602c:	781b      	ldrb	r3, [r3, #0]
   1602e:	4a0a      	ldr	r2, [pc, #40]	; (16058 <UiRemoveSuggest+0x104>)
   16030:	2102      	movs	r1, #2
   16032:	54d1      	strb	r1, [r2, r3]
		SeesawSetLed(NEO_TRELLIS_ADDR_1, rec_loc, R_PLACE_INVALID, G_PLACE_INVALID, B_PLACE_INVALID);
   16034:	230f      	movs	r3, #15
   16036:	18fb      	adds	r3, r7, r3
   16038:	7819      	ldrb	r1, [r3, #0]
   1603a:	2300      	movs	r3, #0
   1603c:	9300      	str	r3, [sp, #0]
   1603e:	2300      	movs	r3, #0
   16040:	2200      	movs	r2, #0
   16042:	202e      	movs	r0, #46	; 0x2e
   16044:	4c05      	ldr	r4, [pc, #20]	; (1605c <UiRemoveSuggest+0x108>)
   16046:	47a0      	blx	r4
	}
	SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_1);
   16048:	202e      	movs	r0, #46	; 0x2e
   1604a:	4b05      	ldr	r3, [pc, #20]	; (16060 <UiRemoveSuggest+0x10c>)
   1604c:	4798      	blx	r3

   1604e:	46c0      	nop			; (mov r8, r8)
   16050:	46bd      	mov	sp, r7
   16052:	b005      	add	sp, #20
   16054:	bd90      	pop	{r4, r7, pc}
   16056:	46c0      	nop			; (mov r8, r8)
   16058:	2000004c 	.word	0x2000004c
   1605c:	000152b5 	.word	0x000152b5
   16060:	00015385 	.word	0x00015385

00016064 <NVIC_SystemReset>:
{
   16064:	b580      	push	{r7, lr}
   16066:	af00      	add	r7, sp, #0
   16068:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   1606c:	4b02      	ldr	r3, [pc, #8]	; (16078 <NVIC_SystemReset+0x14>)
   1606e:	4a03      	ldr	r2, [pc, #12]	; (1607c <NVIC_SystemReset+0x18>)
   16070:	60da      	str	r2, [r3, #12]
   16072:	f3bf 8f4f 	dsb	sy
  while(1);                                                    /* wait until reset */
   16076:	e7fe      	b.n	16076 <NVIC_SystemReset+0x12>
   16078:	e000ed00 	.word	0xe000ed00
   1607c:	05fa0004 	.word	0x05fa0004

00016080 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16080:	b580      	push	{r7, lr}
   16082:	b084      	sub	sp, #16
   16084:	af00      	add	r7, sp, #0
   16086:	0002      	movs	r2, r0
   16088:	1dfb      	adds	r3, r7, #7
   1608a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1608c:	230f      	movs	r3, #15
   1608e:	18fb      	adds	r3, r7, r3
   16090:	1dfa      	adds	r2, r7, #7
   16092:	7812      	ldrb	r2, [r2, #0]
   16094:	09d2      	lsrs	r2, r2, #7
   16096:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16098:	230e      	movs	r3, #14
   1609a:	18fb      	adds	r3, r7, r3
   1609c:	1dfa      	adds	r2, r7, #7
   1609e:	7812      	ldrb	r2, [r2, #0]
   160a0:	0952      	lsrs	r2, r2, #5
   160a2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   160a4:	4b0d      	ldr	r3, [pc, #52]	; (160dc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   160a6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   160a8:	230f      	movs	r3, #15
   160aa:	18fb      	adds	r3, r7, r3
   160ac:	781b      	ldrb	r3, [r3, #0]
   160ae:	2b00      	cmp	r3, #0
   160b0:	d10f      	bne.n	160d2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   160b2:	230f      	movs	r3, #15
   160b4:	18fb      	adds	r3, r7, r3
   160b6:	781b      	ldrb	r3, [r3, #0]
   160b8:	009b      	lsls	r3, r3, #2
   160ba:	2210      	movs	r2, #16
   160bc:	4694      	mov	ip, r2
   160be:	44bc      	add	ip, r7
   160c0:	4463      	add	r3, ip
   160c2:	3b08      	subs	r3, #8
   160c4:	681a      	ldr	r2, [r3, #0]
   160c6:	230e      	movs	r3, #14
   160c8:	18fb      	adds	r3, r7, r3
   160ca:	781b      	ldrb	r3, [r3, #0]
   160cc:	01db      	lsls	r3, r3, #7
   160ce:	18d3      	adds	r3, r2, r3
   160d0:	e000      	b.n	160d4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   160d2:	2300      	movs	r3, #0
	}
}
   160d4:	0018      	movs	r0, r3
   160d6:	46bd      	mov	sp, r7
   160d8:	b004      	add	sp, #16
   160da:	bd80      	pop	{r7, pc}
   160dc:	41004400 	.word	0x41004400

000160e0 <system_reset>:
{
   160e0:	b580      	push	{r7, lr}
   160e2:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   160e4:	4b02      	ldr	r3, [pc, #8]	; (160f0 <system_reset+0x10>)
   160e6:	4798      	blx	r3
}
   160e8:	46c0      	nop			; (mov r8, r8)
   160ea:	46bd      	mov	sp, r7
   160ec:	bd80      	pop	{r7, pc}
   160ee:	46c0      	nop			; (mov r8, r8)
   160f0:	00016065 	.word	0x00016065

000160f4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   160f4:	b580      	push	{r7, lr}
   160f6:	b082      	sub	sp, #8
   160f8:	af00      	add	r7, sp, #0
   160fa:	0002      	movs	r2, r0
   160fc:	1dfb      	adds	r3, r7, #7
   160fe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16100:	1dfb      	adds	r3, r7, #7
   16102:	781b      	ldrb	r3, [r3, #0]
   16104:	0018      	movs	r0, r3
   16106:	4b03      	ldr	r3, [pc, #12]	; (16114 <port_get_group_from_gpio_pin+0x20>)
   16108:	4798      	blx	r3
   1610a:	0003      	movs	r3, r0
}
   1610c:	0018      	movs	r0, r3
   1610e:	46bd      	mov	sp, r7
   16110:	b002      	add	sp, #8
   16112:	bd80      	pop	{r7, pc}
   16114:	00016081 	.word	0x00016081

00016118 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   16118:	b580      	push	{r7, lr}
   1611a:	b084      	sub	sp, #16
   1611c:	af00      	add	r7, sp, #0
   1611e:	0002      	movs	r2, r0
   16120:	1dfb      	adds	r3, r7, #7
   16122:	701a      	strb	r2, [r3, #0]
   16124:	1dbb      	adds	r3, r7, #6
   16126:	1c0a      	adds	r2, r1, #0
   16128:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1612a:	1dfb      	adds	r3, r7, #7
   1612c:	781b      	ldrb	r3, [r3, #0]
   1612e:	0018      	movs	r0, r3
   16130:	4b0d      	ldr	r3, [pc, #52]	; (16168 <port_pin_set_output_level+0x50>)
   16132:	4798      	blx	r3
   16134:	0003      	movs	r3, r0
   16136:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16138:	1dfb      	adds	r3, r7, #7
   1613a:	781b      	ldrb	r3, [r3, #0]
   1613c:	221f      	movs	r2, #31
   1613e:	4013      	ands	r3, r2
   16140:	2201      	movs	r2, #1
   16142:	409a      	lsls	r2, r3
   16144:	0013      	movs	r3, r2
   16146:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   16148:	1dbb      	adds	r3, r7, #6
   1614a:	781b      	ldrb	r3, [r3, #0]
   1614c:	2b00      	cmp	r3, #0
   1614e:	d003      	beq.n	16158 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16150:	68fb      	ldr	r3, [r7, #12]
   16152:	68ba      	ldr	r2, [r7, #8]
   16154:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   16156:	e002      	b.n	1615e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16158:	68fb      	ldr	r3, [r7, #12]
   1615a:	68ba      	ldr	r2, [r7, #8]
   1615c:	615a      	str	r2, [r3, #20]
}
   1615e:	46c0      	nop			; (mov r8, r8)
   16160:	46bd      	mov	sp, r7
   16162:	b004      	add	sp, #16
   16164:	bd80      	pop	{r7, pc}
   16166:	46c0      	nop			; (mov r8, r8)
   16168:	000160f5 	.word	0x000160f5

0001616c <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   1616c:	b580      	push	{r7, lr}
   1616e:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   16170:	4b02      	ldr	r3, [pc, #8]	; (1617c <init_state+0x10>)
   16172:	2200      	movs	r2, #0
   16174:	701a      	strb	r2, [r3, #0]
}
   16176:	46c0      	nop			; (mov r8, r8)
   16178:	46bd      	mov	sp, r7
   1617a:	bd80      	pop	{r7, pc}
   1617c:	20000459 	.word	0x20000459

00016180 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   16180:	b580      	push	{r7, lr}
   16182:	b082      	sub	sp, #8
   16184:	af00      	add	r7, sp, #0
   16186:	0002      	movs	r2, r0
   16188:	1dfb      	adds	r3, r7, #7
   1618a:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   1618c:	1dfb      	adds	r3, r7, #7
   1618e:	781b      	ldrb	r3, [r3, #0]
   16190:	b25b      	sxtb	r3, r3
   16192:	43db      	mvns	r3, r3
   16194:	b25b      	sxtb	r3, r3
   16196:	4a06      	ldr	r2, [pc, #24]	; (161b0 <clear_state+0x30>)
   16198:	7812      	ldrb	r2, [r2, #0]
   1619a:	b252      	sxtb	r2, r2
   1619c:	4013      	ands	r3, r2
   1619e:	b25b      	sxtb	r3, r3
   161a0:	b2da      	uxtb	r2, r3
   161a2:	4b03      	ldr	r3, [pc, #12]	; (161b0 <clear_state+0x30>)
   161a4:	701a      	strb	r2, [r3, #0]
}
   161a6:	46c0      	nop			; (mov r8, r8)
   161a8:	46bd      	mov	sp, r7
   161aa:	b002      	add	sp, #8
   161ac:	bd80      	pop	{r7, pc}
   161ae:	46c0      	nop			; (mov r8, r8)
   161b0:	20000459 	.word	0x20000459

000161b4 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   161b4:	b580      	push	{r7, lr}
   161b6:	b082      	sub	sp, #8
   161b8:	af00      	add	r7, sp, #0
   161ba:	0002      	movs	r2, r0
   161bc:	1dfb      	adds	r3, r7, #7
   161be:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   161c0:	4b05      	ldr	r3, [pc, #20]	; (161d8 <add_state+0x24>)
   161c2:	781a      	ldrb	r2, [r3, #0]
   161c4:	1dfb      	adds	r3, r7, #7
   161c6:	781b      	ldrb	r3, [r3, #0]
   161c8:	4313      	orrs	r3, r2
   161ca:	b2da      	uxtb	r2, r3
   161cc:	4b02      	ldr	r3, [pc, #8]	; (161d8 <add_state+0x24>)
   161ce:	701a      	strb	r2, [r3, #0]
}
   161d0:	46c0      	nop			; (mov r8, r8)
   161d2:	46bd      	mov	sp, r7
   161d4:	b002      	add	sp, #8
   161d6:	bd80      	pop	{r7, pc}
   161d8:	20000459 	.word	0x20000459

000161dc <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   161dc:	b580      	push	{r7, lr}
   161de:	b082      	sub	sp, #8
   161e0:	af00      	add	r7, sp, #0
   161e2:	0002      	movs	r2, r0
   161e4:	1dfb      	adds	r3, r7, #7
   161e6:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   161e8:	4b06      	ldr	r3, [pc, #24]	; (16204 <is_state_set+0x28>)
   161ea:	781b      	ldrb	r3, [r3, #0]
   161ec:	1dfa      	adds	r2, r7, #7
   161ee:	7812      	ldrb	r2, [r2, #0]
   161f0:	4013      	ands	r3, r2
   161f2:	b2db      	uxtb	r3, r3
   161f4:	1e5a      	subs	r2, r3, #1
   161f6:	4193      	sbcs	r3, r2
   161f8:	b2db      	uxtb	r3, r3
}
   161fa:	0018      	movs	r0, r3
   161fc:	46bd      	mov	sp, r7
   161fe:	b002      	add	sp, #8
   16200:	bd80      	pop	{r7, pc}
   16202:	46c0      	nop			; (mov r8, r8)
   16204:	20000459 	.word	0x20000459

00016208 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   16208:	b590      	push	{r4, r7, lr}
   1620a:	b085      	sub	sp, #20
   1620c:	af00      	add	r7, sp, #0
   1620e:	6078      	str	r0, [r7, #4]
   16210:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   16212:	687b      	ldr	r3, [r7, #4]
   16214:	2b00      	cmp	r3, #0
   16216:	d002      	beq.n	1621e <is_exist_file+0x16>
   16218:	683b      	ldr	r3, [r7, #0]
   1621a:	2b00      	cmp	r3, #0
   1621c:	d101      	bne.n	16222 <is_exist_file+0x1a>
        return false;
   1621e:	2300      	movs	r3, #0
   16220:	e013      	b.n	1624a <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   16222:	230f      	movs	r3, #15
   16224:	18fc      	adds	r4, r7, r3
   16226:	6839      	ldr	r1, [r7, #0]
   16228:	4b0a      	ldr	r3, [pc, #40]	; (16254 <is_exist_file+0x4c>)
   1622a:	2200      	movs	r2, #0
   1622c:	0018      	movs	r0, r3
   1622e:	4b0a      	ldr	r3, [pc, #40]	; (16258 <is_exist_file+0x50>)
   16230:	4798      	blx	r3
   16232:	0003      	movs	r3, r0
   16234:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   16236:	4b07      	ldr	r3, [pc, #28]	; (16254 <is_exist_file+0x4c>)
   16238:	0018      	movs	r0, r3
   1623a:	4b08      	ldr	r3, [pc, #32]	; (1625c <is_exist_file+0x54>)
   1623c:	4798      	blx	r3
    return (ret == FR_OK);
   1623e:	230f      	movs	r3, #15
   16240:	18fb      	adds	r3, r7, r3
   16242:	781b      	ldrb	r3, [r3, #0]
   16244:	425a      	negs	r2, r3
   16246:	4153      	adcs	r3, r2
   16248:	b2db      	uxtb	r3, r3
}
   1624a:	0018      	movs	r0, r3
   1624c:	46bd      	mov	sp, r7
   1624e:	b005      	add	sp, #20
   16250:	bd90      	pop	{r4, r7, pc}
   16252:	46c0      	nop			; (mov r8, r8)
   16254:	2000045c 	.word	0x2000045c
   16258:	0002d7c9 	.word	0x0002d7c9
   1625c:	0002e1c9 	.word	0x0002e1c9

00016260 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   16260:	b580      	push	{r7, lr}
   16262:	b09e      	sub	sp, #120	; 0x78
   16264:	af00      	add	r7, sp, #0
   16266:	60f8      	str	r0, [r7, #12]
   16268:	60b9      	str	r1, [r7, #8]
   1626a:	1dfb      	adds	r3, r7, #7
   1626c:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   1626e:	2376      	movs	r3, #118	; 0x76
   16270:	18fb      	adds	r3, r7, r3
   16272:	2201      	movs	r2, #1
   16274:	801a      	strh	r2, [r3, #0]
   16276:	2374      	movs	r3, #116	; 0x74
   16278:	18fb      	adds	r3, r7, r3
   1627a:	2200      	movs	r2, #0
   1627c:	801a      	strh	r2, [r3, #0]
   1627e:	236e      	movs	r3, #110	; 0x6e
   16280:	18fb      	adds	r3, r7, r3
   16282:	2200      	movs	r2, #0
   16284:	801a      	strh	r2, [r3, #0]
   16286:	2372      	movs	r3, #114	; 0x72
   16288:	18fb      	adds	r3, r7, r3
   1628a:	2200      	movs	r2, #0
   1628c:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   1628e:	2324      	movs	r3, #36	; 0x24
   16290:	18fb      	adds	r3, r7, r3
   16292:	0018      	movs	r0, r3
   16294:	2341      	movs	r3, #65	; 0x41
   16296:	001a      	movs	r2, r3
   16298:	2100      	movs	r1, #0
   1629a:	4b92      	ldr	r3, [pc, #584]	; (164e4 <rename_to_unique+0x284>)
   1629c:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   1629e:	2318      	movs	r3, #24
   162a0:	18fb      	adds	r3, r7, r3
   162a2:	0018      	movs	r0, r3
   162a4:	2309      	movs	r3, #9
   162a6:	001a      	movs	r2, r3
   162a8:	2100      	movs	r1, #0
   162aa:	4b8e      	ldr	r3, [pc, #568]	; (164e4 <rename_to_unique+0x284>)
   162ac:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   162ae:	2314      	movs	r3, #20
   162b0:	18fb      	adds	r3, r7, r3
   162b2:	2200      	movs	r2, #0
   162b4:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   162b6:	2300      	movs	r3, #0
   162b8:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   162ba:	2371      	movs	r3, #113	; 0x71
   162bc:	18fb      	adds	r3, r7, r3
   162be:	2200      	movs	r2, #0
   162c0:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   162c2:	68bb      	ldr	r3, [r7, #8]
   162c4:	2b00      	cmp	r3, #0
   162c6:	d101      	bne.n	162cc <rename_to_unique+0x6c>
        return false;
   162c8:	2300      	movs	r3, #0
   162ca:	e106      	b.n	164da <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   162cc:	68ba      	ldr	r2, [r7, #8]
   162ce:	68fb      	ldr	r3, [r7, #12]
   162d0:	0011      	movs	r1, r2
   162d2:	0018      	movs	r0, r3
   162d4:	4b84      	ldr	r3, [pc, #528]	; (164e8 <rename_to_unique+0x288>)
   162d6:	4798      	blx	r3
   162d8:	0003      	movs	r3, r0
   162da:	001a      	movs	r2, r3
   162dc:	2301      	movs	r3, #1
   162de:	4053      	eors	r3, r2
   162e0:	b2db      	uxtb	r3, r3
   162e2:	2b00      	cmp	r3, #0
   162e4:	d001      	beq.n	162ea <rename_to_unique+0x8a>
        return true;
   162e6:	2301      	movs	r3, #1
   162e8:	e0f7      	b.n	164da <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   162ea:	68bb      	ldr	r3, [r7, #8]
   162ec:	0018      	movs	r0, r3
   162ee:	4b7f      	ldr	r3, [pc, #508]	; (164ec <rename_to_unique+0x28c>)
   162f0:	4798      	blx	r3
   162f2:	0003      	movs	r3, r0
   162f4:	2b40      	cmp	r3, #64	; 0x40
   162f6:	d901      	bls.n	162fc <rename_to_unique+0x9c>
        return false;
   162f8:	2300      	movs	r3, #0
   162fa:	e0ee      	b.n	164da <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   162fc:	68bb      	ldr	r3, [r7, #8]
   162fe:	212e      	movs	r1, #46	; 0x2e
   16300:	0018      	movs	r0, r3
   16302:	4b7b      	ldr	r3, [pc, #492]	; (164f0 <rename_to_unique+0x290>)
   16304:	4798      	blx	r3
   16306:	0003      	movs	r3, r0
   16308:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   1630a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1630c:	2b00      	cmp	r3, #0
   1630e:	d052      	beq.n	163b6 <rename_to_unique+0x156>
        ext_len = strlen(p);
   16310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16312:	0018      	movs	r0, r3
   16314:	4b75      	ldr	r3, [pc, #468]	; (164ec <rename_to_unique+0x28c>)
   16316:	4798      	blx	r3
   16318:	0002      	movs	r2, r0
   1631a:	236e      	movs	r3, #110	; 0x6e
   1631c:	18fb      	adds	r3, r7, r3
   1631e:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   16320:	236e      	movs	r3, #110	; 0x6e
   16322:	18fb      	adds	r3, r7, r3
   16324:	881b      	ldrh	r3, [r3, #0]
   16326:	2b07      	cmp	r3, #7
   16328:	d837      	bhi.n	1639a <rename_to_unique+0x13a>
            valid_ext = true;
   1632a:	2371      	movs	r3, #113	; 0x71
   1632c:	18fb      	adds	r3, r7, r3
   1632e:	2201      	movs	r2, #1
   16330:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   16332:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16334:	2318      	movs	r3, #24
   16336:	18fb      	adds	r3, r7, r3
   16338:	0011      	movs	r1, r2
   1633a:	0018      	movs	r0, r3
   1633c:	4b6d      	ldr	r3, [pc, #436]	; (164f4 <rename_to_unique+0x294>)
   1633e:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   16340:	68bb      	ldr	r3, [r7, #8]
   16342:	0018      	movs	r0, r3
   16344:	4b69      	ldr	r3, [pc, #420]	; (164ec <rename_to_unique+0x28c>)
   16346:	4798      	blx	r3
   16348:	0002      	movs	r2, r0
   1634a:	236e      	movs	r3, #110	; 0x6e
   1634c:	18fb      	adds	r3, r7, r3
   1634e:	881b      	ldrh	r3, [r3, #0]
   16350:	1ad3      	subs	r3, r2, r3
   16352:	2b3c      	cmp	r3, #60	; 0x3c
   16354:	d911      	bls.n	1637a <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   16356:	2374      	movs	r3, #116	; 0x74
   16358:	18fb      	adds	r3, r7, r3
   1635a:	226e      	movs	r2, #110	; 0x6e
   1635c:	18ba      	adds	r2, r7, r2
   1635e:	8812      	ldrh	r2, [r2, #0]
   16360:	213c      	movs	r1, #60	; 0x3c
   16362:	1a8a      	subs	r2, r1, r2
   16364:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16366:	2374      	movs	r3, #116	; 0x74
   16368:	18fb      	adds	r3, r7, r3
   1636a:	881a      	ldrh	r2, [r3, #0]
   1636c:	68b9      	ldr	r1, [r7, #8]
   1636e:	2324      	movs	r3, #36	; 0x24
   16370:	18fb      	adds	r3, r7, r3
   16372:	0018      	movs	r0, r3
   16374:	4b60      	ldr	r3, [pc, #384]	; (164f8 <rename_to_unique+0x298>)
   16376:	4798      	blx	r3
   16378:	e02a      	b.n	163d0 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   1637a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1637c:	68bb      	ldr	r3, [r7, #8]
   1637e:	1ad2      	subs	r2, r2, r3
   16380:	2374      	movs	r3, #116	; 0x74
   16382:	18fb      	adds	r3, r7, r3
   16384:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16386:	2374      	movs	r3, #116	; 0x74
   16388:	18fb      	adds	r3, r7, r3
   1638a:	881a      	ldrh	r2, [r3, #0]
   1638c:	68b9      	ldr	r1, [r7, #8]
   1638e:	2324      	movs	r3, #36	; 0x24
   16390:	18fb      	adds	r3, r7, r3
   16392:	0018      	movs	r0, r3
   16394:	4b58      	ldr	r3, [pc, #352]	; (164f8 <rename_to_unique+0x298>)
   16396:	4798      	blx	r3
   16398:	e01a      	b.n	163d0 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1639a:	2374      	movs	r3, #116	; 0x74
   1639c:	18fb      	adds	r3, r7, r3
   1639e:	223c      	movs	r2, #60	; 0x3c
   163a0:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   163a2:	2374      	movs	r3, #116	; 0x74
   163a4:	18fb      	adds	r3, r7, r3
   163a6:	881a      	ldrh	r2, [r3, #0]
   163a8:	68b9      	ldr	r1, [r7, #8]
   163aa:	2324      	movs	r3, #36	; 0x24
   163ac:	18fb      	adds	r3, r7, r3
   163ae:	0018      	movs	r0, r3
   163b0:	4b51      	ldr	r3, [pc, #324]	; (164f8 <rename_to_unique+0x298>)
   163b2:	4798      	blx	r3
   163b4:	e00c      	b.n	163d0 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   163b6:	2374      	movs	r3, #116	; 0x74
   163b8:	18fb      	adds	r3, r7, r3
   163ba:	223c      	movs	r2, #60	; 0x3c
   163bc:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   163be:	2374      	movs	r3, #116	; 0x74
   163c0:	18fb      	adds	r3, r7, r3
   163c2:	881a      	ldrh	r2, [r3, #0]
   163c4:	68b9      	ldr	r1, [r7, #8]
   163c6:	2324      	movs	r3, #36	; 0x24
   163c8:	18fb      	adds	r3, r7, r3
   163ca:	0018      	movs	r0, r3
   163cc:	4b4a      	ldr	r3, [pc, #296]	; (164f8 <rename_to_unique+0x298>)
   163ce:	4798      	blx	r3
    }

    name[name_len++] = '-';
   163d0:	2374      	movs	r3, #116	; 0x74
   163d2:	18fb      	adds	r3, r7, r3
   163d4:	881b      	ldrh	r3, [r3, #0]
   163d6:	2274      	movs	r2, #116	; 0x74
   163d8:	18ba      	adds	r2, r7, r2
   163da:	1c59      	adds	r1, r3, #1
   163dc:	8011      	strh	r1, [r2, #0]
   163de:	001a      	movs	r2, r3
   163e0:	2324      	movs	r3, #36	; 0x24
   163e2:	18fb      	adds	r3, r7, r3
   163e4:	212d      	movs	r1, #45	; 0x2d
   163e6:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   163e8:	2376      	movs	r3, #118	; 0x76
   163ea:	18fb      	adds	r3, r7, r3
   163ec:	2200      	movs	r2, #0
   163ee:	801a      	strh	r2, [r3, #0]
   163f0:	2372      	movs	r3, #114	; 0x72
   163f2:	18fb      	adds	r3, r7, r3
   163f4:	2201      	movs	r2, #1
   163f6:	801a      	strh	r2, [r3, #0]
   163f8:	e010      	b.n	1641c <rename_to_unique+0x1bc>
        count *= 10;
   163fa:	2372      	movs	r3, #114	; 0x72
   163fc:	18fa      	adds	r2, r7, r3
   163fe:	2372      	movs	r3, #114	; 0x72
   16400:	18fb      	adds	r3, r7, r3
   16402:	881b      	ldrh	r3, [r3, #0]
   16404:	1c19      	adds	r1, r3, #0
   16406:	0089      	lsls	r1, r1, #2
   16408:	18cb      	adds	r3, r1, r3
   1640a:	18db      	adds	r3, r3, r3
   1640c:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   1640e:	2376      	movs	r3, #118	; 0x76
   16410:	18fb      	adds	r3, r7, r3
   16412:	881a      	ldrh	r2, [r3, #0]
   16414:	2376      	movs	r3, #118	; 0x76
   16416:	18fb      	adds	r3, r7, r3
   16418:	3201      	adds	r2, #1
   1641a:	801a      	strh	r2, [r3, #0]
   1641c:	2376      	movs	r3, #118	; 0x76
   1641e:	18fb      	adds	r3, r7, r3
   16420:	881b      	ldrh	r3, [r3, #0]
   16422:	2b02      	cmp	r3, #2
   16424:	d9e9      	bls.n	163fa <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   16426:	2376      	movs	r3, #118	; 0x76
   16428:	18fb      	adds	r3, r7, r3
   1642a:	2201      	movs	r2, #1
   1642c:	801a      	strh	r2, [r3, #0]
   1642e:	e04b      	b.n	164c8 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   16430:	2376      	movs	r3, #118	; 0x76
   16432:	18fb      	adds	r3, r7, r3
   16434:	881a      	ldrh	r2, [r3, #0]
   16436:	4931      	ldr	r1, [pc, #196]	; (164fc <rename_to_unique+0x29c>)
   16438:	2314      	movs	r3, #20
   1643a:	18fb      	adds	r3, r7, r3
   1643c:	0018      	movs	r0, r3
   1643e:	4b30      	ldr	r3, [pc, #192]	; (16500 <rename_to_unique+0x2a0>)
   16440:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   16442:	2374      	movs	r3, #116	; 0x74
   16444:	18fb      	adds	r3, r7, r3
   16446:	881b      	ldrh	r3, [r3, #0]
   16448:	2224      	movs	r2, #36	; 0x24
   1644a:	18ba      	adds	r2, r7, r2
   1644c:	18d3      	adds	r3, r2, r3
   1644e:	2214      	movs	r2, #20
   16450:	18b9      	adds	r1, r7, r2
   16452:	2203      	movs	r2, #3
   16454:	0018      	movs	r0, r3
   16456:	4b28      	ldr	r3, [pc, #160]	; (164f8 <rename_to_unique+0x298>)
   16458:	4798      	blx	r3
        if (valid_ext) {
   1645a:	2371      	movs	r3, #113	; 0x71
   1645c:	18fb      	adds	r3, r7, r3
   1645e:	781b      	ldrb	r3, [r3, #0]
   16460:	2b00      	cmp	r3, #0
   16462:	d00c      	beq.n	1647e <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   16464:	2374      	movs	r3, #116	; 0x74
   16466:	18fb      	adds	r3, r7, r3
   16468:	881b      	ldrh	r3, [r3, #0]
   1646a:	3303      	adds	r3, #3
   1646c:	2224      	movs	r2, #36	; 0x24
   1646e:	18ba      	adds	r2, r7, r2
   16470:	18d3      	adds	r3, r2, r3
   16472:	2218      	movs	r2, #24
   16474:	18ba      	adds	r2, r7, r2
   16476:	0011      	movs	r1, r2
   16478:	0018      	movs	r0, r3
   1647a:	4b1e      	ldr	r3, [pc, #120]	; (164f4 <rename_to_unique+0x294>)
   1647c:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   1647e:	2324      	movs	r3, #36	; 0x24
   16480:	18fa      	adds	r2, r7, r3
   16482:	68fb      	ldr	r3, [r7, #12]
   16484:	0011      	movs	r1, r2
   16486:	0018      	movs	r0, r3
   16488:	4b17      	ldr	r3, [pc, #92]	; (164e8 <rename_to_unique+0x288>)
   1648a:	4798      	blx	r3
   1648c:	0003      	movs	r3, r0
   1648e:	001a      	movs	r2, r3
   16490:	2301      	movs	r3, #1
   16492:	4053      	eors	r3, r2
   16494:	b2db      	uxtb	r3, r3
   16496:	2b00      	cmp	r3, #0
   16498:	d00f      	beq.n	164ba <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   1649a:	1dfb      	adds	r3, r7, #7
   1649c:	781a      	ldrb	r2, [r3, #0]
   1649e:	68bb      	ldr	r3, [r7, #8]
   164a0:	2100      	movs	r1, #0
   164a2:	0018      	movs	r0, r3
   164a4:	4b0f      	ldr	r3, [pc, #60]	; (164e4 <rename_to_unique+0x284>)
   164a6:	4798      	blx	r3
            strcpy(file_path_name, name);
   164a8:	2324      	movs	r3, #36	; 0x24
   164aa:	18fa      	adds	r2, r7, r3
   164ac:	68bb      	ldr	r3, [r7, #8]
   164ae:	0011      	movs	r1, r2
   164b0:	0018      	movs	r0, r3
   164b2:	4b10      	ldr	r3, [pc, #64]	; (164f4 <rename_to_unique+0x294>)
   164b4:	4798      	blx	r3
            return true;
   164b6:	2301      	movs	r3, #1
   164b8:	e00f      	b.n	164da <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   164ba:	2376      	movs	r3, #118	; 0x76
   164bc:	18fb      	adds	r3, r7, r3
   164be:	881a      	ldrh	r2, [r3, #0]
   164c0:	2376      	movs	r3, #118	; 0x76
   164c2:	18fb      	adds	r3, r7, r3
   164c4:	3201      	adds	r2, #1
   164c6:	801a      	strh	r2, [r3, #0]
   164c8:	2376      	movs	r3, #118	; 0x76
   164ca:	18fa      	adds	r2, r7, r3
   164cc:	2372      	movs	r3, #114	; 0x72
   164ce:	18fb      	adds	r3, r7, r3
   164d0:	8812      	ldrh	r2, [r2, #0]
   164d2:	881b      	ldrh	r3, [r3, #0]
   164d4:	429a      	cmp	r2, r3
   164d6:	d3ab      	bcc.n	16430 <rename_to_unique+0x1d0>
        }
    }
    return false;
   164d8:	2300      	movs	r3, #0
}
   164da:	0018      	movs	r0, r3
   164dc:	46bd      	mov	sp, r7
   164de:	b01e      	add	sp, #120	; 0x78
   164e0:	bd80      	pop	{r7, pc}
   164e2:	46c0      	nop			; (mov r8, r8)
   164e4:	0003489f 	.word	0x0003489f
   164e8:	00016209 	.word	0x00016209
   164ec:	00034c57 	.word	0x00034c57
   164f0:	00034cb1 	.word	0x00034cb1
   164f4:	00034c0b 	.word	0x00034c0b
   164f8:	00034c87 	.word	0x00034c87
   164fc:	000361fc 	.word	0x000361fc
   16500:	00034b5d 	.word	0x00034b5d

00016504 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   16504:	b590      	push	{r4, r7, lr}
   16506:	b083      	sub	sp, #12
   16508:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   1650a:	2001      	movs	r0, #1
   1650c:	4b22      	ldr	r3, [pc, #136]	; (16598 <start_download+0x94>)
   1650e:	4798      	blx	r3
   16510:	0003      	movs	r3, r0
   16512:	001a      	movs	r2, r3
   16514:	2301      	movs	r3, #1
   16516:	4053      	eors	r3, r2
   16518:	b2db      	uxtb	r3, r3
   1651a:	2b00      	cmp	r3, #0
   1651c:	d005      	beq.n	1652a <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   1651e:	4b1f      	ldr	r3, [pc, #124]	; (1659c <start_download+0x98>)
   16520:	0019      	movs	r1, r3
   16522:	2001      	movs	r0, #1
   16524:	4b1e      	ldr	r3, [pc, #120]	; (165a0 <start_download+0x9c>)
   16526:	4798      	blx	r3
        return;
   16528:	e032      	b.n	16590 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   1652a:	2002      	movs	r0, #2
   1652c:	4b1a      	ldr	r3, [pc, #104]	; (16598 <start_download+0x94>)
   1652e:	4798      	blx	r3
   16530:	0003      	movs	r3, r0
   16532:	001a      	movs	r2, r3
   16534:	2301      	movs	r3, #1
   16536:	4053      	eors	r3, r2
   16538:	b2db      	uxtb	r3, r3
   1653a:	2b00      	cmp	r3, #0
   1653c:	d005      	beq.n	1654a <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   1653e:	4b19      	ldr	r3, [pc, #100]	; (165a4 <start_download+0xa0>)
   16540:	0019      	movs	r1, r3
   16542:	2001      	movs	r0, #1
   16544:	4b16      	ldr	r3, [pc, #88]	; (165a0 <start_download+0x9c>)
   16546:	4798      	blx	r3
        return;
   16548:	e022      	b.n	16590 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   1654a:	2004      	movs	r0, #4
   1654c:	4b12      	ldr	r3, [pc, #72]	; (16598 <start_download+0x94>)
   1654e:	4798      	blx	r3
   16550:	1e03      	subs	r3, r0, #0
   16552:	d005      	beq.n	16560 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   16554:	4b14      	ldr	r3, [pc, #80]	; (165a8 <start_download+0xa4>)
   16556:	0019      	movs	r1, r3
   16558:	2001      	movs	r0, #1
   1655a:	4b11      	ldr	r3, [pc, #68]	; (165a0 <start_download+0x9c>)
   1655c:	4798      	blx	r3
        return;
   1655e:	e017      	b.n	16590 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   16560:	2008      	movs	r0, #8
   16562:	4b0d      	ldr	r3, [pc, #52]	; (16598 <start_download+0x94>)
   16564:	4798      	blx	r3
   16566:	1e03      	subs	r3, r0, #0
   16568:	d005      	beq.n	16576 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   1656a:	4b10      	ldr	r3, [pc, #64]	; (165ac <start_download+0xa8>)
   1656c:	0019      	movs	r1, r3
   1656e:	2001      	movs	r0, #1
   16570:	4b0b      	ldr	r3, [pc, #44]	; (165a0 <start_download+0x9c>)
   16572:	4798      	blx	r3
        return;
   16574:	e00c      	b.n	16590 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   16576:	4b0e      	ldr	r3, [pc, #56]	; (165b0 <start_download+0xac>)
   16578:	0019      	movs	r1, r3
   1657a:	2001      	movs	r0, #1
   1657c:	4b08      	ldr	r3, [pc, #32]	; (165a0 <start_download+0x9c>)
   1657e:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   16580:	490c      	ldr	r1, [pc, #48]	; (165b4 <start_download+0xb0>)
   16582:	480d      	ldr	r0, [pc, #52]	; (165b8 <start_download+0xb4>)
   16584:	2300      	movs	r3, #0
   16586:	9300      	str	r3, [sp, #0]
   16588:	2300      	movs	r3, #0
   1658a:	2201      	movs	r2, #1
   1658c:	4c0b      	ldr	r4, [pc, #44]	; (165bc <start_download+0xb8>)
   1658e:	47a0      	blx	r4
}
   16590:	46bd      	mov	sp, r7
   16592:	b001      	add	sp, #4
   16594:	bd90      	pop	{r4, r7, pc}
   16596:	46c0      	nop			; (mov r8, r8)
   16598:	000161dd 	.word	0x000161dd
   1659c:	00036204 	.word	0x00036204
   165a0:	0001e131 	.word	0x0001e131
   165a4:	00036230 	.word	0x00036230
   165a8:	0003625c 	.word	0x0003625c
   165ac:	00036288 	.word	0x00036288
   165b0:	000362b4 	.word	0x000362b4
   165b4:	000362e0 	.word	0x000362e0
   165b8:	20004494 	.word	0x20004494
   165bc:	00030e1d 	.word	0x00030e1d

000165c0 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   165c0:	b5b0      	push	{r4, r5, r7, lr}
   165c2:	b086      	sub	sp, #24
   165c4:	af00      	add	r7, sp, #0
   165c6:	6078      	str	r0, [r7, #4]
   165c8:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   165ca:	687b      	ldr	r3, [r7, #4]
   165cc:	2b00      	cmp	r3, #0
   165ce:	d002      	beq.n	165d6 <store_file_packet+0x16>
   165d0:	683b      	ldr	r3, [r7, #0]
   165d2:	2b00      	cmp	r3, #0
   165d4:	d105      	bne.n	165e2 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   165d6:	4b58      	ldr	r3, [pc, #352]	; (16738 <store_file_packet+0x178>)
   165d8:	0019      	movs	r1, r3
   165da:	2001      	movs	r0, #1
   165dc:	4b57      	ldr	r3, [pc, #348]	; (1673c <store_file_packet+0x17c>)
   165de:	4798      	blx	r3
        return;
   165e0:	e0a6      	b.n	16730 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   165e2:	2008      	movs	r0, #8
   165e4:	4b56      	ldr	r3, [pc, #344]	; (16740 <store_file_packet+0x180>)
   165e6:	4798      	blx	r3
   165e8:	0003      	movs	r3, r0
   165ea:	001a      	movs	r2, r3
   165ec:	2301      	movs	r3, #1
   165ee:	4053      	eors	r3, r2
   165f0:	b2db      	uxtb	r3, r3
   165f2:	2b00      	cmp	r3, #0
   165f4:	d055      	beq.n	166a2 <store_file_packet+0xe2>
        char *cp = NULL;
   165f6:	2300      	movs	r3, #0
   165f8:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   165fa:	4b52      	ldr	r3, [pc, #328]	; (16744 <store_file_packet+0x184>)
   165fc:	2230      	movs	r2, #48	; 0x30
   165fe:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   16600:	4b50      	ldr	r3, [pc, #320]	; (16744 <store_file_packet+0x184>)
   16602:	223a      	movs	r2, #58	; 0x3a
   16604:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   16606:	4b50      	ldr	r3, [pc, #320]	; (16748 <store_file_packet+0x188>)
   16608:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   1660a:	e002      	b.n	16612 <store_file_packet+0x52>
            cp--;
   1660c:	697b      	ldr	r3, [r7, #20]
   1660e:	3b01      	subs	r3, #1
   16610:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16612:	697b      	ldr	r3, [r7, #20]
   16614:	781b      	ldrb	r3, [r3, #0]
   16616:	2b2f      	cmp	r3, #47	; 0x2f
   16618:	d1f8      	bne.n	1660c <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   1661a:	697b      	ldr	r3, [r7, #20]
   1661c:	0018      	movs	r0, r3
   1661e:	4b4b      	ldr	r3, [pc, #300]	; (1674c <store_file_packet+0x18c>)
   16620:	4798      	blx	r3
   16622:	0003      	movs	r3, r0
   16624:	2b01      	cmp	r3, #1
   16626:	d924      	bls.n	16672 <store_file_packet+0xb2>
            cp++;
   16628:	697b      	ldr	r3, [r7, #20]
   1662a:	3301      	adds	r3, #1
   1662c:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   1662e:	697a      	ldr	r2, [r7, #20]
   16630:	4b47      	ldr	r3, [pc, #284]	; (16750 <store_file_packet+0x190>)
   16632:	0011      	movs	r1, r2
   16634:	0018      	movs	r0, r3
   16636:	4b47      	ldr	r3, [pc, #284]	; (16754 <store_file_packet+0x194>)
   16638:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   1663a:	4942      	ldr	r1, [pc, #264]	; (16744 <store_file_packet+0x184>)
   1663c:	4b46      	ldr	r3, [pc, #280]	; (16758 <store_file_packet+0x198>)
   1663e:	2240      	movs	r2, #64	; 0x40
   16640:	0018      	movs	r0, r3
   16642:	4b46      	ldr	r3, [pc, #280]	; (1675c <store_file_packet+0x19c>)
   16644:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   16646:	4a3f      	ldr	r2, [pc, #252]	; (16744 <store_file_packet+0x184>)
   16648:	4b45      	ldr	r3, [pc, #276]	; (16760 <store_file_packet+0x1a0>)
   1664a:	0019      	movs	r1, r3
   1664c:	2001      	movs	r0, #1
   1664e:	4b3b      	ldr	r3, [pc, #236]	; (1673c <store_file_packet+0x17c>)
   16650:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16652:	2313      	movs	r3, #19
   16654:	18fc      	adds	r4, r7, r3
   16656:	493b      	ldr	r1, [pc, #236]	; (16744 <store_file_packet+0x184>)
   16658:	4b3f      	ldr	r3, [pc, #252]	; (16758 <store_file_packet+0x198>)
   1665a:	220a      	movs	r2, #10
   1665c:	0018      	movs	r0, r3
   1665e:	4b41      	ldr	r3, [pc, #260]	; (16764 <store_file_packet+0x1a4>)
   16660:	4798      	blx	r3
   16662:	0003      	movs	r3, r0
   16664:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16666:	2313      	movs	r3, #19
   16668:	18fb      	adds	r3, r7, r3
   1666a:	781b      	ldrb	r3, [r3, #0]
   1666c:	2b00      	cmp	r3, #0
   1666e:	d012      	beq.n	16696 <store_file_packet+0xd6>
   16670:	e008      	b.n	16684 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   16672:	4b3d      	ldr	r3, [pc, #244]	; (16768 <store_file_packet+0x1a8>)
   16674:	0019      	movs	r1, r3
   16676:	2001      	movs	r0, #1
   16678:	4b30      	ldr	r3, [pc, #192]	; (1673c <store_file_packet+0x17c>)
   1667a:	4798      	blx	r3
            add_state(CANCELED);
   1667c:	2020      	movs	r0, #32
   1667e:	4b3b      	ldr	r3, [pc, #236]	; (1676c <store_file_packet+0x1ac>)
   16680:	4798      	blx	r3
            return;
   16682:	e055      	b.n	16730 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   16684:	2313      	movs	r3, #19
   16686:	18fb      	adds	r3, r7, r3
   16688:	781a      	ldrb	r2, [r3, #0]
   1668a:	4b39      	ldr	r3, [pc, #228]	; (16770 <store_file_packet+0x1b0>)
   1668c:	0019      	movs	r1, r3
   1668e:	2001      	movs	r0, #1
   16690:	4b2a      	ldr	r3, [pc, #168]	; (1673c <store_file_packet+0x17c>)
   16692:	4798      	blx	r3
            return;
   16694:	e04c      	b.n	16730 <store_file_packet+0x170>
        }

        received_file_size = 0;
   16696:	4b37      	ldr	r3, [pc, #220]	; (16774 <store_file_packet+0x1b4>)
   16698:	2200      	movs	r2, #0
   1669a:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   1669c:	2008      	movs	r0, #8
   1669e:	4b33      	ldr	r3, [pc, #204]	; (1676c <store_file_packet+0x1ac>)
   166a0:	4798      	blx	r3
    }

    if (data != NULL) {
   166a2:	687b      	ldr	r3, [r7, #4]
   166a4:	2b00      	cmp	r3, #0
   166a6:	d043      	beq.n	16730 <store_file_packet+0x170>
        UINT wsize = 0;
   166a8:	2300      	movs	r3, #0
   166aa:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   166ac:	2313      	movs	r3, #19
   166ae:	18fc      	adds	r4, r7, r3
   166b0:	230c      	movs	r3, #12
   166b2:	18fb      	adds	r3, r7, r3
   166b4:	683a      	ldr	r2, [r7, #0]
   166b6:	6879      	ldr	r1, [r7, #4]
   166b8:	4827      	ldr	r0, [pc, #156]	; (16758 <store_file_packet+0x198>)
   166ba:	4d2f      	ldr	r5, [pc, #188]	; (16778 <store_file_packet+0x1b8>)
   166bc:	47a8      	blx	r5
   166be:	0003      	movs	r3, r0
   166c0:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   166c2:	2313      	movs	r3, #19
   166c4:	18fb      	adds	r3, r7, r3
   166c6:	781b      	ldrb	r3, [r3, #0]
   166c8:	2b00      	cmp	r3, #0
   166ca:	d00c      	beq.n	166e6 <store_file_packet+0x126>
            f_close(&file_object);
   166cc:	4b22      	ldr	r3, [pc, #136]	; (16758 <store_file_packet+0x198>)
   166ce:	0018      	movs	r0, r3
   166d0:	4b2a      	ldr	r3, [pc, #168]	; (1677c <store_file_packet+0x1bc>)
   166d2:	4798      	blx	r3
            add_state(CANCELED);
   166d4:	2020      	movs	r0, #32
   166d6:	4b25      	ldr	r3, [pc, #148]	; (1676c <store_file_packet+0x1ac>)
   166d8:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   166da:	4b29      	ldr	r3, [pc, #164]	; (16780 <store_file_packet+0x1c0>)
   166dc:	0019      	movs	r1, r3
   166de:	2001      	movs	r0, #1
   166e0:	4b16      	ldr	r3, [pc, #88]	; (1673c <store_file_packet+0x17c>)
   166e2:	4798      	blx	r3
            return;
   166e4:	e024      	b.n	16730 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   166e6:	4b23      	ldr	r3, [pc, #140]	; (16774 <store_file_packet+0x1b4>)
   166e8:	681a      	ldr	r2, [r3, #0]
   166ea:	68fb      	ldr	r3, [r7, #12]
   166ec:	18d2      	adds	r2, r2, r3
   166ee:	4b21      	ldr	r3, [pc, #132]	; (16774 <store_file_packet+0x1b4>)
   166f0:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   166f2:	4b20      	ldr	r3, [pc, #128]	; (16774 <store_file_packet+0x1b4>)
   166f4:	681a      	ldr	r2, [r3, #0]
   166f6:	4b23      	ldr	r3, [pc, #140]	; (16784 <store_file_packet+0x1c4>)
   166f8:	681b      	ldr	r3, [r3, #0]
   166fa:	4923      	ldr	r1, [pc, #140]	; (16788 <store_file_packet+0x1c8>)
   166fc:	2001      	movs	r0, #1
   166fe:	4c0f      	ldr	r4, [pc, #60]	; (1673c <store_file_packet+0x17c>)
   16700:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   16702:	4b1c      	ldr	r3, [pc, #112]	; (16774 <store_file_packet+0x1b4>)
   16704:	681a      	ldr	r2, [r3, #0]
   16706:	4b1f      	ldr	r3, [pc, #124]	; (16784 <store_file_packet+0x1c4>)
   16708:	681b      	ldr	r3, [r3, #0]
   1670a:	429a      	cmp	r2, r3
   1670c:	d310      	bcc.n	16730 <store_file_packet+0x170>
            f_close(&file_object);
   1670e:	4b12      	ldr	r3, [pc, #72]	; (16758 <store_file_packet+0x198>)
   16710:	0018      	movs	r0, r3
   16712:	4b1a      	ldr	r3, [pc, #104]	; (1677c <store_file_packet+0x1bc>)
   16714:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   16716:	4b1d      	ldr	r3, [pc, #116]	; (1678c <store_file_packet+0x1cc>)
   16718:	0019      	movs	r1, r3
   1671a:	2001      	movs	r0, #1
   1671c:	4b07      	ldr	r3, [pc, #28]	; (1673c <store_file_packet+0x17c>)
   1671e:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   16720:	2100      	movs	r1, #0
   16722:	2017      	movs	r0, #23
   16724:	4b1a      	ldr	r3, [pc, #104]	; (16790 <store_file_packet+0x1d0>)
   16726:	4798      	blx	r3
            add_state(COMPLETED);
   16728:	2010      	movs	r0, #16
   1672a:	4b10      	ldr	r3, [pc, #64]	; (1676c <store_file_packet+0x1ac>)
   1672c:	4798      	blx	r3
            return;
   1672e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   16730:	46bd      	mov	sp, r7
   16732:	b006      	add	sp, #24
   16734:	bdb0      	pop	{r4, r5, r7, pc}
   16736:	46c0      	nop			; (mov r8, r8)
   16738:	0003630c 	.word	0x0003630c
   1673c:	0001e131 	.word	0x0001e131
   16740:	000161dd 	.word	0x000161dd
   16744:	2000005c 	.word	0x2000005c
   16748:	0003630a 	.word	0x0003630a
   1674c:	00034c57 	.word	0x00034c57
   16750:	2000005e 	.word	0x2000005e
   16754:	00034c0b 	.word	0x00034c0b
   16758:	2000045c 	.word	0x2000045c
   1675c:	00016261 	.word	0x00016261
   16760:	00036370 	.word	0x00036370
   16764:	0002d7c9 	.word	0x0002d7c9
   16768:	00036330 	.word	0x00036330
   1676c:	000161b5 	.word	0x000161b5
   16770:	00036398 	.word	0x00036398
   16774:	20000484 	.word	0x20000484
   16778:	0002dcf9 	.word	0x0002dcf9
   1677c:	0002e1c9 	.word	0x0002e1c9
   16780:	000363cc 	.word	0x000363cc
   16784:	20000480 	.word	0x20000480
   16788:	00036408 	.word	0x00036408
   1678c:	0003643c 	.word	0x0003643c
   16790:	00016119 	.word	0x00016119

00016794 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   16794:	b590      	push	{r4, r7, lr}
   16796:	b085      	sub	sp, #20
   16798:	af00      	add	r7, sp, #0
   1679a:	60f8      	str	r0, [r7, #12]
   1679c:	60b9      	str	r1, [r7, #8]
   1679e:	607a      	str	r2, [r7, #4]
    switch (type) {
   167a0:	68bb      	ldr	r3, [r7, #8]
   167a2:	2b04      	cmp	r3, #4
   167a4:	d900      	bls.n	167a8 <http_client_callback+0x14>
   167a6:	e077      	b.n	16898 <http_client_callback+0x104>
   167a8:	68bb      	ldr	r3, [r7, #8]
   167aa:	009a      	lsls	r2, r3, #2
   167ac:	4b3c      	ldr	r3, [pc, #240]	; (168a0 <http_client_callback+0x10c>)
   167ae:	18d3      	adds	r3, r2, r3
   167b0:	681b      	ldr	r3, [r3, #0]
   167b2:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   167b4:	4b3b      	ldr	r3, [pc, #236]	; (168a4 <http_client_callback+0x110>)
   167b6:	0019      	movs	r1, r3
   167b8:	2001      	movs	r0, #1
   167ba:	4b3b      	ldr	r3, [pc, #236]	; (168a8 <http_client_callback+0x114>)
   167bc:	4798      	blx	r3
            break;
   167be:	e06b      	b.n	16898 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   167c0:	4b3a      	ldr	r3, [pc, #232]	; (168ac <http_client_callback+0x118>)
   167c2:	0019      	movs	r1, r3
   167c4:	2001      	movs	r0, #1
   167c6:	4b38      	ldr	r3, [pc, #224]	; (168a8 <http_client_callback+0x114>)
   167c8:	4798      	blx	r3
            add_state(GET_REQUESTED);
   167ca:	2004      	movs	r0, #4
   167cc:	4b38      	ldr	r3, [pc, #224]	; (168b0 <http_client_callback+0x11c>)
   167ce:	4798      	blx	r3
            break;
   167d0:	e062      	b.n	16898 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   167d2:	687b      	ldr	r3, [r7, #4]
   167d4:	881b      	ldrh	r3, [r3, #0]
   167d6:	001a      	movs	r2, r3
   167d8:	687b      	ldr	r3, [r7, #4]
   167da:	685b      	ldr	r3, [r3, #4]
   167dc:	4935      	ldr	r1, [pc, #212]	; (168b4 <http_client_callback+0x120>)
   167de:	2001      	movs	r0, #1
   167e0:	4c31      	ldr	r4, [pc, #196]	; (168a8 <http_client_callback+0x114>)
   167e2:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   167e4:	687b      	ldr	r3, [r7, #4]
   167e6:	881b      	ldrh	r3, [r3, #0]
   167e8:	2bc8      	cmp	r3, #200	; 0xc8
   167ea:	d10d      	bne.n	16808 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   167ec:	687b      	ldr	r3, [r7, #4]
   167ee:	685a      	ldr	r2, [r3, #4]
   167f0:	4b31      	ldr	r3, [pc, #196]	; (168b8 <http_client_callback+0x124>)
   167f2:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   167f4:	4b31      	ldr	r3, [pc, #196]	; (168bc <http_client_callback+0x128>)
   167f6:	2200      	movs	r2, #0
   167f8:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   167fa:	687b      	ldr	r3, [r7, #4]
   167fc:	685a      	ldr	r2, [r3, #4]
   167fe:	2380      	movs	r3, #128	; 0x80
   16800:	009b      	lsls	r3, r3, #2
   16802:	429a      	cmp	r2, r3
   16804:	d843      	bhi.n	1688e <http_client_callback+0xfa>
   16806:	e003      	b.n	16810 <http_client_callback+0x7c>
                add_state(CANCELED);
   16808:	2020      	movs	r0, #32
   1680a:	4b29      	ldr	r3, [pc, #164]	; (168b0 <http_client_callback+0x11c>)
   1680c:	4798      	blx	r3
                return;
   1680e:	e043      	b.n	16898 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   16810:	687b      	ldr	r3, [r7, #4]
   16812:	689a      	ldr	r2, [r3, #8]
   16814:	687b      	ldr	r3, [r7, #4]
   16816:	685b      	ldr	r3, [r3, #4]
   16818:	0019      	movs	r1, r3
   1681a:	0010      	movs	r0, r2
   1681c:	4b28      	ldr	r3, [pc, #160]	; (168c0 <http_client_callback+0x12c>)
   1681e:	4798      	blx	r3
                add_state(COMPLETED);
   16820:	2010      	movs	r0, #16
   16822:	4b23      	ldr	r3, [pc, #140]	; (168b0 <http_client_callback+0x11c>)
   16824:	4798      	blx	r3
            }
            break;
   16826:	e032      	b.n	1688e <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   16828:	687b      	ldr	r3, [r7, #4]
   1682a:	685a      	ldr	r2, [r3, #4]
   1682c:	687b      	ldr	r3, [r7, #4]
   1682e:	681b      	ldr	r3, [r3, #0]
   16830:	0019      	movs	r1, r3
   16832:	0010      	movs	r0, r2
   16834:	4b22      	ldr	r3, [pc, #136]	; (168c0 <http_client_callback+0x12c>)
   16836:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   16838:	687b      	ldr	r3, [r7, #4]
   1683a:	7a1b      	ldrb	r3, [r3, #8]
   1683c:	2b00      	cmp	r3, #0
   1683e:	d028      	beq.n	16892 <http_client_callback+0xfe>
                add_state(COMPLETED);
   16840:	2010      	movs	r0, #16
   16842:	4b1b      	ldr	r3, [pc, #108]	; (168b0 <http_client_callback+0x11c>)
   16844:	4798      	blx	r3
            }

            break;
   16846:	e024      	b.n	16892 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   16848:	687b      	ldr	r3, [r7, #4]
   1684a:	681a      	ldr	r2, [r3, #0]
   1684c:	4b1d      	ldr	r3, [pc, #116]	; (168c4 <http_client_callback+0x130>)
   1684e:	0019      	movs	r1, r3
   16850:	2001      	movs	r0, #1
   16852:	4b15      	ldr	r3, [pc, #84]	; (168a8 <http_client_callback+0x114>)
   16854:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   16856:	687b      	ldr	r3, [r7, #4]
   16858:	681b      	ldr	r3, [r3, #0]
   1685a:	330b      	adds	r3, #11
   1685c:	d11b      	bne.n	16896 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   1685e:	2008      	movs	r0, #8
   16860:	4b19      	ldr	r3, [pc, #100]	; (168c8 <http_client_callback+0x134>)
   16862:	4798      	blx	r3
   16864:	1e03      	subs	r3, r0, #0
   16866:	d006      	beq.n	16876 <http_client_callback+0xe2>
                    f_close(&file_object);
   16868:	4b18      	ldr	r3, [pc, #96]	; (168cc <http_client_callback+0x138>)
   1686a:	0018      	movs	r0, r3
   1686c:	4b18      	ldr	r3, [pc, #96]	; (168d0 <http_client_callback+0x13c>)
   1686e:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   16870:	2008      	movs	r0, #8
   16872:	4b18      	ldr	r3, [pc, #96]	; (168d4 <http_client_callback+0x140>)
   16874:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   16876:	2004      	movs	r0, #4
   16878:	4b13      	ldr	r3, [pc, #76]	; (168c8 <http_client_callback+0x134>)
   1687a:	4798      	blx	r3
   1687c:	1e03      	subs	r3, r0, #0
   1687e:	d002      	beq.n	16886 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   16880:	2004      	movs	r0, #4
   16882:	4b14      	ldr	r3, [pc, #80]	; (168d4 <http_client_callback+0x140>)
   16884:	4798      	blx	r3
                }

                start_download();
   16886:	4b14      	ldr	r3, [pc, #80]	; (168d8 <http_client_callback+0x144>)
   16888:	4798      	blx	r3
            }

            break;
   1688a:	46c0      	nop			; (mov r8, r8)
   1688c:	e003      	b.n	16896 <http_client_callback+0x102>
            break;
   1688e:	46c0      	nop			; (mov r8, r8)
   16890:	e002      	b.n	16898 <http_client_callback+0x104>
            break;
   16892:	46c0      	nop			; (mov r8, r8)
   16894:	e000      	b.n	16898 <http_client_callback+0x104>
            break;
   16896:	46c0      	nop			; (mov r8, r8)
    }
}
   16898:	46bd      	mov	sp, r7
   1689a:	b005      	add	sp, #20
   1689c:	bd90      	pop	{r4, r7, pc}
   1689e:	46c0      	nop			; (mov r8, r8)
   168a0:	00036ab0 	.word	0x00036ab0
   168a4:	00036470 	.word	0x00036470
   168a8:	0001e131 	.word	0x0001e131
   168ac:	000364a8 	.word	0x000364a8
   168b0:	000161b5 	.word	0x000161b5
   168b4:	000364d4 	.word	0x000364d4
   168b8:	20000480 	.word	0x20000480
   168bc:	20000484 	.word	0x20000484
   168c0:	000165c1 	.word	0x000165c1
   168c4:	00036510 	.word	0x00036510
   168c8:	000161dd 	.word	0x000161dd
   168cc:	2000045c 	.word	0x2000045c
   168d0:	0002e1c9 	.word	0x0002e1c9
   168d4:	00016181 	.word	0x00016181
   168d8:	00016505 	.word	0x00016505

000168dc <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   168dc:	b580      	push	{r7, lr}
   168de:	b082      	sub	sp, #8
   168e0:	af00      	add	r7, sp, #0
   168e2:	603a      	str	r2, [r7, #0]
   168e4:	1dfb      	adds	r3, r7, #7
   168e6:	1c02      	adds	r2, r0, #0
   168e8:	701a      	strb	r2, [r3, #0]
   168ea:	1dbb      	adds	r3, r7, #6
   168ec:	1c0a      	adds	r2, r1, #0
   168ee:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   168f0:	683a      	ldr	r2, [r7, #0]
   168f2:	1dbb      	adds	r3, r7, #6
   168f4:	7819      	ldrb	r1, [r3, #0]
   168f6:	1dfb      	adds	r3, r7, #7
   168f8:	781b      	ldrb	r3, [r3, #0]
   168fa:	b25b      	sxtb	r3, r3
   168fc:	0018      	movs	r0, r3
   168fe:	4b03      	ldr	r3, [pc, #12]	; (1690c <socket_cb+0x30>)
   16900:	4798      	blx	r3
}
   16902:	46c0      	nop			; (mov r8, r8)
   16904:	46bd      	mov	sp, r7
   16906:	b002      	add	sp, #8
   16908:	bd80      	pop	{r7, pc}
   1690a:	46c0      	nop			; (mov r8, r8)
   1690c:	00030b2d 	.word	0x00030b2d

00016910 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   16910:	b5b0      	push	{r4, r5, r7, lr}
   16912:	b086      	sub	sp, #24
   16914:	af04      	add	r7, sp, #16
   16916:	6078      	str	r0, [r7, #4]
   16918:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   1691a:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   1691c:	22ff      	movs	r2, #255	; 0xff
   1691e:	4013      	ands	r3, r2
   16920:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   16922:	683b      	ldr	r3, [r7, #0]
   16924:	0a1b      	lsrs	r3, r3, #8
   16926:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   16928:	23ff      	movs	r3, #255	; 0xff
   1692a:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   1692c:	683a      	ldr	r2, [r7, #0]
   1692e:	0c12      	lsrs	r2, r2, #16
   16930:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   16932:	22ff      	movs	r2, #255	; 0xff
   16934:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   16936:	6839      	ldr	r1, [r7, #0]
   16938:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   1693a:	000d      	movs	r5, r1
   1693c:	6878      	ldr	r0, [r7, #4]
   1693e:	4909      	ldr	r1, [pc, #36]	; (16964 <resolve_cb+0x54>)
   16940:	9502      	str	r5, [sp, #8]
   16942:	9201      	str	r2, [sp, #4]
   16944:	9300      	str	r3, [sp, #0]
   16946:	0023      	movs	r3, r4
   16948:	0002      	movs	r2, r0
   1694a:	2001      	movs	r0, #1
   1694c:	4c06      	ldr	r4, [pc, #24]	; (16968 <resolve_cb+0x58>)
   1694e:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   16950:	683a      	ldr	r2, [r7, #0]
   16952:	687b      	ldr	r3, [r7, #4]
   16954:	0011      	movs	r1, r2
   16956:	0018      	movs	r0, r3
   16958:	4b04      	ldr	r3, [pc, #16]	; (1696c <resolve_cb+0x5c>)
   1695a:	4798      	blx	r3
}
   1695c:	46c0      	nop			; (mov r8, r8)
   1695e:	46bd      	mov	sp, r7
   16960:	b002      	add	sp, #8
   16962:	bdb0      	pop	{r4, r5, r7, pc}
   16964:	00036540 	.word	0x00036540
   16968:	0001e131 	.word	0x0001e131
   1696c:	00030c91 	.word	0x00030c91

00016970 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   16970:	b590      	push	{r4, r7, lr}
   16972:	b087      	sub	sp, #28
   16974:	af02      	add	r7, sp, #8
   16976:	0002      	movs	r2, r0
   16978:	6039      	str	r1, [r7, #0]
   1697a:	1dfb      	adds	r3, r7, #7
   1697c:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   1697e:	1dfb      	adds	r3, r7, #7
   16980:	781b      	ldrb	r3, [r3, #0]
   16982:	2b2c      	cmp	r3, #44	; 0x2c
   16984:	d002      	beq.n	1698c <wifi_cb+0x1c>
   16986:	2b32      	cmp	r3, #50	; 0x32
   16988:	d03d      	beq.n	16a06 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   1698a:	e06f      	b.n	16a6c <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   1698c:	683b      	ldr	r3, [r7, #0]
   1698e:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16990:	68fb      	ldr	r3, [r7, #12]
   16992:	781b      	ldrb	r3, [r3, #0]
   16994:	2b01      	cmp	r3, #1
   16996:	d107      	bne.n	169a8 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   16998:	4b36      	ldr	r3, [pc, #216]	; (16a74 <wifi_cb+0x104>)
   1699a:	0019      	movs	r1, r3
   1699c:	2001      	movs	r0, #1
   1699e:	4b36      	ldr	r3, [pc, #216]	; (16a78 <wifi_cb+0x108>)
   169a0:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   169a2:	4b36      	ldr	r3, [pc, #216]	; (16a7c <wifi_cb+0x10c>)
   169a4:	4798      	blx	r3
            break;
   169a6:	e05e      	b.n	16a66 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   169a8:	68fb      	ldr	r3, [r7, #12]
   169aa:	781b      	ldrb	r3, [r3, #0]
   169ac:	2b00      	cmp	r3, #0
   169ae:	d15a      	bne.n	16a66 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   169b0:	4b33      	ldr	r3, [pc, #204]	; (16a80 <wifi_cb+0x110>)
   169b2:	0019      	movs	r1, r3
   169b4:	2001      	movs	r0, #1
   169b6:	4b30      	ldr	r3, [pc, #192]	; (16a78 <wifi_cb+0x108>)
   169b8:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   169ba:	2002      	movs	r0, #2
   169bc:	4b31      	ldr	r3, [pc, #196]	; (16a84 <wifi_cb+0x114>)
   169be:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   169c0:	2008      	movs	r0, #8
   169c2:	4b31      	ldr	r3, [pc, #196]	; (16a88 <wifi_cb+0x118>)
   169c4:	4798      	blx	r3
   169c6:	1e03      	subs	r3, r0, #0
   169c8:	d006      	beq.n	169d8 <wifi_cb+0x68>
                    f_close(&file_object);
   169ca:	4b30      	ldr	r3, [pc, #192]	; (16a8c <wifi_cb+0x11c>)
   169cc:	0018      	movs	r0, r3
   169ce:	4b30      	ldr	r3, [pc, #192]	; (16a90 <wifi_cb+0x120>)
   169d0:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   169d2:	2008      	movs	r0, #8
   169d4:	4b2b      	ldr	r3, [pc, #172]	; (16a84 <wifi_cb+0x114>)
   169d6:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   169d8:	2004      	movs	r0, #4
   169da:	4b2b      	ldr	r3, [pc, #172]	; (16a88 <wifi_cb+0x118>)
   169dc:	4798      	blx	r3
   169de:	1e03      	subs	r3, r0, #0
   169e0:	d002      	beq.n	169e8 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   169e2:	2004      	movs	r0, #4
   169e4:	4b27      	ldr	r3, [pc, #156]	; (16a84 <wifi_cb+0x114>)
   169e6:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   169e8:	4b2a      	ldr	r3, [pc, #168]	; (16a94 <wifi_cb+0x124>)
   169ea:	2101      	movs	r1, #1
   169ec:	0018      	movs	r0, r3
   169ee:	4b2a      	ldr	r3, [pc, #168]	; (16a98 <wifi_cb+0x128>)
   169f0:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   169f2:	4a2a      	ldr	r2, [pc, #168]	; (16a9c <wifi_cb+0x12c>)
   169f4:	482a      	ldr	r0, [pc, #168]	; (16aa0 <wifi_cb+0x130>)
   169f6:	23ff      	movs	r3, #255	; 0xff
   169f8:	9300      	str	r3, [sp, #0]
   169fa:	0013      	movs	r3, r2
   169fc:	2202      	movs	r2, #2
   169fe:	2106      	movs	r1, #6
   16a00:	4c28      	ldr	r4, [pc, #160]	; (16aa4 <wifi_cb+0x134>)
   16a02:	47a0      	blx	r4
            break;
   16a04:	e02f      	b.n	16a66 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   16a06:	683b      	ldr	r3, [r7, #0]
   16a08:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16a0a:	68bb      	ldr	r3, [r7, #8]
   16a0c:	781b      	ldrb	r3, [r3, #0]
   16a0e:	0018      	movs	r0, r3
   16a10:	68bb      	ldr	r3, [r7, #8]
   16a12:	3301      	adds	r3, #1
   16a14:	781b      	ldrb	r3, [r3, #0]
   16a16:	001c      	movs	r4, r3
   16a18:	68bb      	ldr	r3, [r7, #8]
   16a1a:	3302      	adds	r3, #2
   16a1c:	781b      	ldrb	r3, [r3, #0]
   16a1e:	001a      	movs	r2, r3
   16a20:	68bb      	ldr	r3, [r7, #8]
   16a22:	3303      	adds	r3, #3
   16a24:	781b      	ldrb	r3, [r3, #0]
   16a26:	4920      	ldr	r1, [pc, #128]	; (16aa8 <wifi_cb+0x138>)
   16a28:	9301      	str	r3, [sp, #4]
   16a2a:	9200      	str	r2, [sp, #0]
   16a2c:	0023      	movs	r3, r4
   16a2e:	0002      	movs	r2, r0
   16a30:	2001      	movs	r0, #1
   16a32:	4c11      	ldr	r4, [pc, #68]	; (16a78 <wifi_cb+0x108>)
   16a34:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   16a36:	2002      	movs	r0, #2
   16a38:	4b1c      	ldr	r3, [pc, #112]	; (16aac <wifi_cb+0x13c>)
   16a3a:	4798      	blx	r3
            if (do_download_flag == 1) {
   16a3c:	4b1c      	ldr	r3, [pc, #112]	; (16ab0 <wifi_cb+0x140>)
   16a3e:	781b      	ldrb	r3, [r3, #0]
   16a40:	2b01      	cmp	r3, #1
   16a42:	d102      	bne.n	16a4a <wifi_cb+0xda>
                start_download();
   16a44:	4b1b      	ldr	r3, [pc, #108]	; (16ab4 <wifi_cb+0x144>)
   16a46:	4798      	blx	r3
        } break;
   16a48:	e00f      	b.n	16a6a <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   16a4a:	4a1b      	ldr	r2, [pc, #108]	; (16ab8 <wifi_cb+0x148>)
   16a4c:	4b11      	ldr	r3, [pc, #68]	; (16a94 <wifi_cb+0x124>)
   16a4e:	0011      	movs	r1, r2
   16a50:	0018      	movs	r0, r3
   16a52:	4b1a      	ldr	r3, [pc, #104]	; (16abc <wifi_cb+0x14c>)
   16a54:	4798      	blx	r3
   16a56:	1e03      	subs	r3, r0, #0
   16a58:	d007      	beq.n	16a6a <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16a5a:	4b19      	ldr	r3, [pc, #100]	; (16ac0 <wifi_cb+0x150>)
   16a5c:	0019      	movs	r1, r3
   16a5e:	2001      	movs	r0, #1
   16a60:	4b05      	ldr	r3, [pc, #20]	; (16a78 <wifi_cb+0x108>)
   16a62:	4798      	blx	r3
        } break;
   16a64:	e001      	b.n	16a6a <wifi_cb+0xfa>
            break;
   16a66:	46c0      	nop			; (mov r8, r8)
   16a68:	e000      	b.n	16a6c <wifi_cb+0xfc>
        } break;
   16a6a:	46c0      	nop			; (mov r8, r8)
    }
}
   16a6c:	46c0      	nop			; (mov r8, r8)
   16a6e:	46bd      	mov	sp, r7
   16a70:	b005      	add	sp, #20
   16a72:	bd90      	pop	{r4, r7, pc}
   16a74:	00036570 	.word	0x00036570
   16a78:	0001e131 	.word	0x0001e131
   16a7c:	00022355 	.word	0x00022355
   16a80:	00036590 	.word	0x00036590
   16a84:	00016181 	.word	0x00016181
   16a88:	000161dd 	.word	0x000161dd
   16a8c:	2000045c 	.word	0x2000045c
   16a90:	0002e1c9 	.word	0x0002e1c9
   16a94:	20000488 	.word	0x20000488
   16a98:	0002f7d9 	.word	0x0002f7d9
   16a9c:	000365b4 	.word	0x000365b4
   16aa0:	000365c0 	.word	0x000365c0
   16aa4:	00021e81 	.word	0x00021e81
   16aa8:	000365c8 	.word	0x000365c8
   16aac:	000161b5 	.word	0x000161b5
   16ab0:	20000458 	.word	0x20000458
   16ab4:	00016505 	.word	0x00016505
   16ab8:	000361e8 	.word	0x000361e8
   16abc:	0002f6a5 	.word	0x0002f6a5
   16ac0:	000365f0 	.word	0x000365f0

00016ac4 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   16ac4:	b580      	push	{r7, lr}
   16ac6:	b082      	sub	sp, #8
   16ac8:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   16aca:	1d3b      	adds	r3, r7, #4
   16acc:	0018      	movs	r0, r3
   16ace:	4b08      	ldr	r3, [pc, #32]	; (16af0 <configure_timer+0x2c>)
   16ad0:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   16ad2:	1d3a      	adds	r2, r7, #4
   16ad4:	4b07      	ldr	r3, [pc, #28]	; (16af4 <configure_timer+0x30>)
   16ad6:	0011      	movs	r1, r2
   16ad8:	0018      	movs	r0, r3
   16ada:	4b07      	ldr	r3, [pc, #28]	; (16af8 <configure_timer+0x34>)
   16adc:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   16ade:	4b05      	ldr	r3, [pc, #20]	; (16af4 <configure_timer+0x30>)
   16ae0:	0018      	movs	r0, r3
   16ae2:	4b06      	ldr	r3, [pc, #24]	; (16afc <configure_timer+0x38>)
   16ae4:	4798      	blx	r3
}
   16ae6:	46c0      	nop			; (mov r8, r8)
   16ae8:	46bd      	mov	sp, r7
   16aea:	b002      	add	sp, #8
   16aec:	bd80      	pop	{r7, pc}
   16aee:	46c0      	nop			; (mov r8, r8)
   16af0:	000322c1 	.word	0x000322c1
   16af4:	2000443c 	.word	0x2000443c
   16af8:	000322e5 	.word	0x000322e5
   16afc:	000323d1 	.word	0x000323d1

00016b00 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   16b00:	b580      	push	{r7, lr}
   16b02:	b088      	sub	sp, #32
   16b04:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   16b06:	003b      	movs	r3, r7
   16b08:	0018      	movs	r0, r3
   16b0a:	4b16      	ldr	r3, [pc, #88]	; (16b64 <configure_http_client+0x64>)
   16b0c:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   16b0e:	003b      	movs	r3, r7
   16b10:	2280      	movs	r2, #128	; 0x80
   16b12:	0092      	lsls	r2, r2, #2
   16b14:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   16b16:	003b      	movs	r3, r7
   16b18:	4a13      	ldr	r2, [pc, #76]	; (16b68 <configure_http_client+0x68>)
   16b1a:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   16b1c:	003b      	movs	r3, r7
   16b1e:	22bc      	movs	r2, #188	; 0xbc
   16b20:	32ff      	adds	r2, #255	; 0xff
   16b22:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   16b24:	003b      	movs	r3, r7
   16b26:	2201      	movs	r2, #1
   16b28:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   16b2a:	003a      	movs	r2, r7
   16b2c:	4b0f      	ldr	r3, [pc, #60]	; (16b6c <configure_http_client+0x6c>)
   16b2e:	0011      	movs	r1, r2
   16b30:	0018      	movs	r0, r3
   16b32:	4b0f      	ldr	r3, [pc, #60]	; (16b70 <configure_http_client+0x70>)
   16b34:	4798      	blx	r3
   16b36:	0003      	movs	r3, r0
   16b38:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   16b3a:	69fb      	ldr	r3, [r7, #28]
   16b3c:	2b00      	cmp	r3, #0
   16b3e:	da06      	bge.n	16b4e <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   16b40:	69fa      	ldr	r2, [r7, #28]
   16b42:	4b0c      	ldr	r3, [pc, #48]	; (16b74 <configure_http_client+0x74>)
   16b44:	0019      	movs	r1, r3
   16b46:	2001      	movs	r0, #1
   16b48:	4b0b      	ldr	r3, [pc, #44]	; (16b78 <configure_http_client+0x78>)
   16b4a:	4798      	blx	r3
        while (1) {
   16b4c:	e7fe      	b.n	16b4c <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   16b4e:	4a0b      	ldr	r2, [pc, #44]	; (16b7c <configure_http_client+0x7c>)
   16b50:	4b06      	ldr	r3, [pc, #24]	; (16b6c <configure_http_client+0x6c>)
   16b52:	0011      	movs	r1, r2
   16b54:	0018      	movs	r0, r3
   16b56:	4b0a      	ldr	r3, [pc, #40]	; (16b80 <configure_http_client+0x80>)
   16b58:	4798      	blx	r3
}
   16b5a:	46c0      	nop			; (mov r8, r8)
   16b5c:	46bd      	mov	sp, r7
   16b5e:	b008      	add	sp, #32
   16b60:	bd80      	pop	{r7, pc}
   16b62:	46c0      	nop			; (mov r8, r8)
   16b64:	00030955 	.word	0x00030955
   16b68:	2000443c 	.word	0x2000443c
   16b6c:	20004494 	.word	0x20004494
   16b70:	000309a1 	.word	0x000309a1
   16b74:	00036720 	.word	0x00036720
   16b78:	0001e131 	.word	0x0001e131
   16b7c:	00016795 	.word	0x00016795
   16b80:	00030a8d 	.word	0x00030a8d

00016b84 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   16b84:	b580      	push	{r7, lr}
   16b86:	b082      	sub	sp, #8
   16b88:	af00      	add	r7, sp, #0
   16b8a:	603a      	str	r2, [r7, #0]
   16b8c:	1dfb      	adds	r3, r7, #7
   16b8e:	1c02      	adds	r2, r0, #0
   16b90:	701a      	strb	r2, [r3, #0]
   16b92:	1dbb      	adds	r3, r7, #6
   16b94:	1c0a      	adds	r2, r1, #0
   16b96:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   16b98:	683a      	ldr	r2, [r7, #0]
   16b9a:	1dbb      	adds	r3, r7, #6
   16b9c:	7819      	ldrb	r1, [r3, #0]
   16b9e:	1dfb      	adds	r3, r7, #7
   16ba0:	781b      	ldrb	r3, [r3, #0]
   16ba2:	b25b      	sxtb	r3, r3
   16ba4:	0018      	movs	r0, r3
   16ba6:	4b03      	ldr	r3, [pc, #12]	; (16bb4 <socket_event_handler+0x30>)
   16ba8:	4798      	blx	r3
}
   16baa:	46c0      	nop			; (mov r8, r8)
   16bac:	46bd      	mov	sp, r7
   16bae:	b002      	add	sp, #8
   16bb0:	bd80      	pop	{r7, pc}
   16bb2:	46c0      	nop			; (mov r8, r8)
   16bb4:	0002f64d 	.word	0x0002f64d

00016bb8 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   16bb8:	b580      	push	{r7, lr}
   16bba:	b082      	sub	sp, #8
   16bbc:	af00      	add	r7, sp, #0
   16bbe:	6078      	str	r0, [r7, #4]
   16bc0:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   16bc2:	683a      	ldr	r2, [r7, #0]
   16bc4:	687b      	ldr	r3, [r7, #4]
   16bc6:	0011      	movs	r1, r2
   16bc8:	0018      	movs	r0, r3
   16bca:	4b03      	ldr	r3, [pc, #12]	; (16bd8 <socket_resolve_handler+0x20>)
   16bcc:	4798      	blx	r3
}
   16bce:	46c0      	nop			; (mov r8, r8)
   16bd0:	46bd      	mov	sp, r7
   16bd2:	b002      	add	sp, #8
   16bd4:	bd80      	pop	{r7, pc}
   16bd6:	46c0      	nop			; (mov r8, r8)
   16bd8:	0002f681 	.word	0x0002f681

00016bdc <SubscribeHandlerShipSizeTopic>:
 * \param[in] msgData Data to be received.
 */


void SubscribeHandlerShipSizeTopic(MessageData *msgData)
{
   16bdc:	b590      	push	{r4, r7, lr}
   16bde:	b087      	sub	sp, #28
   16be0:	af00      	add	r7, sp, #0
   16be2:	6078      	str	r0, [r7, #4]
    // Parse input. The start string must be '['
    if (strncmp(msgData->message->payload, "[", 1) == 0) {
   16be4:	687b      	ldr	r3, [r7, #4]
   16be6:	681b      	ldr	r3, [r3, #0]
   16be8:	689b      	ldr	r3, [r3, #8]
   16bea:	781a      	ldrb	r2, [r3, #0]
   16bec:	4b36      	ldr	r3, [pc, #216]	; (16cc8 <SubscribeHandlerShipSizeTopic+0xec>)
   16bee:	781b      	ldrb	r3, [r3, #0]
   16bf0:	429a      	cmp	r2, r3
   16bf2:	d165      	bne.n	16cc0 <SubscribeHandlerShipSizeTopic+0xe4>
        LogMessage(LOG_DEBUG_LVL, "\r\nship size message received!\r\n");
   16bf4:	4b35      	ldr	r3, [pc, #212]	; (16ccc <SubscribeHandlerShipSizeTopic+0xf0>)
   16bf6:	0019      	movs	r1, r3
   16bf8:	2001      	movs	r0, #1
   16bfa:	4b35      	ldr	r3, [pc, #212]	; (16cd0 <SubscribeHandlerShipSizeTopic+0xf4>)
   16bfc:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16bfe:	687b      	ldr	r3, [r7, #4]
   16c00:	685b      	ldr	r3, [r3, #4]
   16c02:	685a      	ldr	r2, [r3, #4]
   16c04:	687b      	ldr	r3, [r7, #4]
   16c06:	685b      	ldr	r3, [r3, #4]
   16c08:	689b      	ldr	r3, [r3, #8]
   16c0a:	4932      	ldr	r1, [pc, #200]	; (16cd4 <SubscribeHandlerShipSizeTopic+0xf8>)
   16c0c:	2001      	movs	r0, #1
   16c0e:	4c30      	ldr	r4, [pc, #192]	; (16cd0 <SubscribeHandlerShipSizeTopic+0xf4>)
   16c10:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "\r\n%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   16c12:	687b      	ldr	r3, [r7, #4]
   16c14:	681b      	ldr	r3, [r3, #0]
   16c16:	68da      	ldr	r2, [r3, #12]
   16c18:	687b      	ldr	r3, [r7, #4]
   16c1a:	681b      	ldr	r3, [r3, #0]
   16c1c:	689b      	ldr	r3, [r3, #8]
   16c1e:	492e      	ldr	r1, [pc, #184]	; (16cd8 <SubscribeHandlerShipSizeTopic+0xfc>)
   16c20:	2001      	movs	r0, #1
   16c22:	4c2b      	ldr	r4, [pc, #172]	; (16cd0 <SubscribeHandlerShipSizeTopic+0xf4>)
   16c24:	47a0      	blx	r4

		if (strncmp(msgData->message->payload, "[", 1) != 0) {
   16c26:	687b      	ldr	r3, [r7, #4]
   16c28:	681b      	ldr	r3, [r3, #0]
   16c2a:	689b      	ldr	r3, [r3, #8]
   16c2c:	781a      	ldrb	r2, [r3, #0]
   16c2e:	4b26      	ldr	r3, [pc, #152]	; (16cc8 <SubscribeHandlerShipSizeTopic+0xec>)
   16c30:	781b      	ldrb	r3, [r3, #0]
   16c32:	429a      	cmp	r2, r3
   16c34:	d143      	bne.n	16cbe <SubscribeHandlerShipSizeTopic+0xe2>
			return;
		}
		
		uint8_t ship_num = (msgData->message->payloadlen - 1) / 2;
   16c36:	687b      	ldr	r3, [r7, #4]
   16c38:	681b      	ldr	r3, [r3, #0]
   16c3a:	68db      	ldr	r3, [r3, #12]
   16c3c:	3b01      	subs	r3, #1
   16c3e:	085a      	lsrs	r2, r3, #1
   16c40:	2313      	movs	r3, #19
   16c42:	18fb      	adds	r3, r7, r3
   16c44:	701a      	strb	r2, [r3, #0]
		uint8_t ship_arr[MAX_SHIP];
		
		if(ship_num > MAX_SHIP){
   16c46:	2313      	movs	r3, #19
   16c48:	18fb      	adds	r3, r7, r3
   16c4a:	781b      	ldrb	r3, [r3, #0]
   16c4c:	2b05      	cmp	r3, #5
   16c4e:	d905      	bls.n	16c5c <SubscribeHandlerShipSizeTopic+0x80>
			LogMessage(LOG_INFO_LVL, "\r\n too many ship!!\r\n");
   16c50:	4b22      	ldr	r3, [pc, #136]	; (16cdc <SubscribeHandlerShipSizeTopic+0x100>)
   16c52:	0019      	movs	r1, r3
   16c54:	2000      	movs	r0, #0
   16c56:	4b1e      	ldr	r3, [pc, #120]	; (16cd0 <SubscribeHandlerShipSizeTopic+0xf4>)
   16c58:	4798      	blx	r3
			return;
   16c5a:	e031      	b.n	16cc0 <SubscribeHandlerShipSizeTopic+0xe4>
		}

		char *p = (char *)&msgData->message->payload[1];
   16c5c:	687b      	ldr	r3, [r7, #4]
   16c5e:	681b      	ldr	r3, [r3, #0]
   16c60:	689b      	ldr	r3, [r3, #8]
   16c62:	3301      	adds	r3, #1
   16c64:	60bb      	str	r3, [r7, #8]
		int nb = 0;
   16c66:	2300      	movs	r3, #0
   16c68:	617b      	str	r3, [r7, #20]
		while (nb < MAX_SHIP && *p) {
   16c6a:	e015      	b.n	16c98 <SubscribeHandlerShipSizeTopic+0xbc>
			ship_arr[nb++] = strtol(p, &p, 10);
   16c6c:	697c      	ldr	r4, [r7, #20]
   16c6e:	1c63      	adds	r3, r4, #1
   16c70:	617b      	str	r3, [r7, #20]
   16c72:	68bb      	ldr	r3, [r7, #8]
   16c74:	2208      	movs	r2, #8
   16c76:	18b9      	adds	r1, r7, r2
   16c78:	220a      	movs	r2, #10
   16c7a:	0018      	movs	r0, r3
   16c7c:	4b18      	ldr	r3, [pc, #96]	; (16ce0 <SubscribeHandlerShipSizeTopic+0x104>)
   16c7e:	4798      	blx	r3
   16c80:	0003      	movs	r3, r0
   16c82:	b2da      	uxtb	r2, r3
   16c84:	230c      	movs	r3, #12
   16c86:	18fb      	adds	r3, r7, r3
   16c88:	551a      	strb	r2, [r3, r4]
			if (*p != ',') break;
   16c8a:	68bb      	ldr	r3, [r7, #8]
   16c8c:	781b      	ldrb	r3, [r3, #0]
   16c8e:	2b2c      	cmp	r3, #44	; 0x2c
   16c90:	d10a      	bne.n	16ca8 <SubscribeHandlerShipSizeTopic+0xcc>
			p++; /* skip, */
   16c92:	68bb      	ldr	r3, [r7, #8]
   16c94:	3301      	adds	r3, #1
   16c96:	60bb      	str	r3, [r7, #8]
		while (nb < MAX_SHIP && *p) {
   16c98:	697b      	ldr	r3, [r7, #20]
   16c9a:	2b04      	cmp	r3, #4
   16c9c:	dc05      	bgt.n	16caa <SubscribeHandlerShipSizeTopic+0xce>
   16c9e:	68bb      	ldr	r3, [r7, #8]
   16ca0:	781b      	ldrb	r3, [r3, #0]
   16ca2:	2b00      	cmp	r3, #0
   16ca4:	d1e2      	bne.n	16c6c <SubscribeHandlerShipSizeTopic+0x90>
   16ca6:	e000      	b.n	16caa <SubscribeHandlerShipSizeTopic+0xce>
			if (*p != ',') break;
   16ca8:	46c0      	nop			; (mov r8, r8)
		}
		
		//LogMessage(LOG_DEBUG_LVL, "\r\n ship size %d %d %d\r\n", ship_arr[0], ship_arr[1], ship_arr[2]);
			
		ControlSetGame(ship_arr, ship_num);
   16caa:	2313      	movs	r3, #19
   16cac:	18fb      	adds	r3, r7, r3
   16cae:	781a      	ldrb	r2, [r3, #0]
   16cb0:	230c      	movs	r3, #12
   16cb2:	18fb      	adds	r3, r7, r3
   16cb4:	0011      	movs	r1, r2
   16cb6:	0018      	movs	r0, r3
   16cb8:	4b0a      	ldr	r3, [pc, #40]	; (16ce4 <SubscribeHandlerShipSizeTopic+0x108>)
   16cba:	4798      	blx	r3
   16cbc:	e000      	b.n	16cc0 <SubscribeHandlerShipSizeTopic+0xe4>
			return;
   16cbe:	46c0      	nop			; (mov r8, r8)
		
	}
		// send data to control thread and start/reset the ui and the game 
}
   16cc0:	46bd      	mov	sp, r7
   16cc2:	b007      	add	sp, #28
   16cc4:	bd90      	pop	{r4, r7, pc}
   16cc6:	46c0      	nop			; (mov r8, r8)
   16cc8:	00036768 	.word	0x00036768
   16ccc:	0003676c 	.word	0x0003676c
   16cd0:	0001e131 	.word	0x0001e131
   16cd4:	0003678c 	.word	0x0003678c
   16cd8:	00036794 	.word	0x00036794
   16cdc:	0003679c 	.word	0x0003679c
   16ce0:	00034e11 	.word	0x00034e11
   16ce4:	00013789 	.word	0x00013789

00016ce8 <SubscribeHandlerTurnTopic>:

void SubscribeHandlerTurnTopic(MessageData *msgData)
{
   16ce8:	b590      	push	{r4, r7, lr}
   16cea:	b085      	sub	sp, #20
   16cec:	af00      	add	r7, sp, #0
   16cee:	6078      	str	r0, [r7, #4]
    // Parse input. The start string must be '['
    if (strncmp(msgData->message->payload, "[", 1) == 0) {
   16cf0:	687b      	ldr	r3, [r7, #4]
   16cf2:	681b      	ldr	r3, [r3, #0]
   16cf4:	689b      	ldr	r3, [r3, #8]
   16cf6:	781a      	ldrb	r2, [r3, #0]
   16cf8:	4b18      	ldr	r3, [pc, #96]	; (16d5c <SubscribeHandlerTurnTopic+0x74>)
   16cfa:	781b      	ldrb	r3, [r3, #0]
   16cfc:	429a      	cmp	r2, r3
   16cfe:	d12a      	bne.n	16d56 <SubscribeHandlerTurnTopic+0x6e>
        LogMessage(LOG_DEBUG_LVL, "\r\nturn message received!\r\n");
   16d00:	4b17      	ldr	r3, [pc, #92]	; (16d60 <SubscribeHandlerTurnTopic+0x78>)
   16d02:	0019      	movs	r1, r3
   16d04:	2001      	movs	r0, #1
   16d06:	4b17      	ldr	r3, [pc, #92]	; (16d64 <SubscribeHandlerTurnTopic+0x7c>)
   16d08:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16d0a:	687b      	ldr	r3, [r7, #4]
   16d0c:	685b      	ldr	r3, [r3, #4]
   16d0e:	685a      	ldr	r2, [r3, #4]
   16d10:	687b      	ldr	r3, [r7, #4]
   16d12:	685b      	ldr	r3, [r3, #4]
   16d14:	689b      	ldr	r3, [r3, #8]
   16d16:	4914      	ldr	r1, [pc, #80]	; (16d68 <SubscribeHandlerTurnTopic+0x80>)
   16d18:	2001      	movs	r0, #1
   16d1a:	4c12      	ldr	r4, [pc, #72]	; (16d64 <SubscribeHandlerTurnTopic+0x7c>)
   16d1c:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "\r\n%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   16d1e:	687b      	ldr	r3, [r7, #4]
   16d20:	681b      	ldr	r3, [r3, #0]
   16d22:	68da      	ldr	r2, [r3, #12]
   16d24:	687b      	ldr	r3, [r7, #4]
   16d26:	681b      	ldr	r3, [r3, #0]
   16d28:	689b      	ldr	r3, [r3, #8]
   16d2a:	4910      	ldr	r1, [pc, #64]	; (16d6c <SubscribeHandlerTurnTopic+0x84>)
   16d2c:	2001      	movs	r0, #1
   16d2e:	4c0d      	ldr	r4, [pc, #52]	; (16d64 <SubscribeHandlerTurnTopic+0x7c>)
   16d30:	47a0      	blx	r4

		if (strncmp(msgData->message->payload, "[", 1) != 0) {
   16d32:	687b      	ldr	r3, [r7, #4]
   16d34:	681b      	ldr	r3, [r3, #0]
   16d36:	689b      	ldr	r3, [r3, #8]
   16d38:	781a      	ldrb	r2, [r3, #0]
   16d3a:	4b08      	ldr	r3, [pc, #32]	; (16d5c <SubscribeHandlerTurnTopic+0x74>)
   16d3c:	781b      	ldrb	r3, [r3, #0]
   16d3e:	429a      	cmp	r2, r3
   16d40:	d108      	bne.n	16d54 <SubscribeHandlerTurnTopic+0x6c>
			return;
		}
		
		uint8_t ship_num = (msgData->message->payloadlen - 1) / 2;
   16d42:	687b      	ldr	r3, [r7, #4]
   16d44:	681b      	ldr	r3, [r3, #0]
   16d46:	68db      	ldr	r3, [r3, #12]
   16d48:	3b01      	subs	r3, #1
   16d4a:	085a      	lsrs	r2, r3, #1
   16d4c:	230f      	movs	r3, #15
   16d4e:	18fb      	adds	r3, r7, r3
   16d50:	701a      	strb	r2, [r3, #0]
   16d52:	e000      	b.n	16d56 <SubscribeHandlerTurnTopic+0x6e>
			return;
   16d54:	46c0      	nop			; (mov r8, r8)
		uint8_t ship_arr[MAX_SHIP];
		
	}
		// send data to control thread and start/reset the ui and the game 
}
   16d56:	46bd      	mov	sp, r7
   16d58:	b005      	add	sp, #20
   16d5a:	bd90      	pop	{r4, r7, pc}
   16d5c:	00036768 	.word	0x00036768
   16d60:	000367b4 	.word	0x000367b4
   16d64:	0001e131 	.word	0x0001e131
   16d68:	0003678c 	.word	0x0003678c
   16d6c:	00036794 	.word	0x00036794

00016d70 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   16d70:	b590      	push	{r4, r7, lr}
   16d72:	b08b      	sub	sp, #44	; 0x2c
   16d74:	af06      	add	r7, sp, #24
   16d76:	60f8      	str	r0, [r7, #12]
   16d78:	60b9      	str	r1, [r7, #8]
   16d7a:	607a      	str	r2, [r7, #4]
    switch (type) {
   16d7c:	68bb      	ldr	r3, [r7, #8]
   16d7e:	2b01      	cmp	r3, #1
   16d80:	d03b      	beq.n	16dfa <mqtt_callback+0x8a>
   16d82:	2b05      	cmp	r3, #5
   16d84:	d058      	beq.n	16e38 <mqtt_callback+0xc8>
   16d86:	2b00      	cmp	r3, #0
   16d88:	d000      	beq.n	16d8c <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   16d8a:	e05b      	b.n	16e44 <mqtt_callback+0xd4>
            if (data->sock_connected.result >= 0) {
   16d8c:	687b      	ldr	r3, [r7, #4]
   16d8e:	681b      	ldr	r3, [r3, #0]
   16d90:	2b00      	cmp	r3, #0
   16d92:	db25      	blt.n	16de0 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   16d94:	4b2d      	ldr	r3, [pc, #180]	; (16e4c <mqtt_callback+0xdc>)
   16d96:	0019      	movs	r1, r3
   16d98:	2001      	movs	r0, #1
   16d9a:	4b2d      	ldr	r3, [pc, #180]	; (16e50 <mqtt_callback+0xe0>)
   16d9c:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   16d9e:	492d      	ldr	r1, [pc, #180]	; (16e54 <mqtt_callback+0xe4>)
   16da0:	4a2d      	ldr	r2, [pc, #180]	; (16e58 <mqtt_callback+0xe8>)
   16da2:	68f8      	ldr	r0, [r7, #12]
   16da4:	2300      	movs	r3, #0
   16da6:	9305      	str	r3, [sp, #20]
   16da8:	2300      	movs	r3, #0
   16daa:	9304      	str	r3, [sp, #16]
   16dac:	2300      	movs	r3, #0
   16dae:	9303      	str	r3, [sp, #12]
   16db0:	2300      	movs	r3, #0
   16db2:	9302      	str	r3, [sp, #8]
   16db4:	2300      	movs	r3, #0
   16db6:	9301      	str	r3, [sp, #4]
   16db8:	4b27      	ldr	r3, [pc, #156]	; (16e58 <mqtt_callback+0xe8>)
   16dba:	9300      	str	r3, [sp, #0]
   16dbc:	000b      	movs	r3, r1
   16dbe:	2101      	movs	r1, #1
   16dc0:	4c26      	ldr	r4, [pc, #152]	; (16e5c <mqtt_callback+0xec>)
   16dc2:	47a0      	blx	r4
   16dc4:	1e03      	subs	r3, r0, #0
   16dc6:	d005      	beq.n	16dd4 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   16dc8:	4b25      	ldr	r3, [pc, #148]	; (16e60 <mqtt_callback+0xf0>)
   16dca:	0019      	movs	r1, r3
   16dcc:	2001      	movs	r0, #1
   16dce:	4b20      	ldr	r3, [pc, #128]	; (16e50 <mqtt_callback+0xe0>)
   16dd0:	4798      	blx	r3
        } break;
   16dd2:	e037      	b.n	16e44 <mqtt_callback+0xd4>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   16dd4:	4b23      	ldr	r3, [pc, #140]	; (16e64 <mqtt_callback+0xf4>)
   16dd6:	0019      	movs	r1, r3
   16dd8:	2001      	movs	r0, #1
   16dda:	4b1d      	ldr	r3, [pc, #116]	; (16e50 <mqtt_callback+0xe0>)
   16ddc:	4798      	blx	r3
        } break;
   16dde:	e031      	b.n	16e44 <mqtt_callback+0xd4>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   16de0:	4a21      	ldr	r2, [pc, #132]	; (16e68 <mqtt_callback+0xf8>)
   16de2:	4b22      	ldr	r3, [pc, #136]	; (16e6c <mqtt_callback+0xfc>)
   16de4:	0019      	movs	r1, r3
   16de6:	2001      	movs	r0, #1
   16de8:	4b19      	ldr	r3, [pc, #100]	; (16e50 <mqtt_callback+0xe0>)
   16dea:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   16dec:	4a1e      	ldr	r2, [pc, #120]	; (16e68 <mqtt_callback+0xf8>)
   16dee:	68fb      	ldr	r3, [r7, #12]
   16df0:	0011      	movs	r1, r2
   16df2:	0018      	movs	r0, r3
   16df4:	4b1e      	ldr	r3, [pc, #120]	; (16e70 <mqtt_callback+0x100>)
   16df6:	4798      	blx	r3
        } break;
   16df8:	e024      	b.n	16e44 <mqtt_callback+0xd4>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   16dfa:	687b      	ldr	r3, [r7, #4]
   16dfc:	781b      	ldrb	r3, [r3, #0]
   16dfe:	2b00      	cmp	r3, #0
   16e00:	d111      	bne.n	16e26 <mqtt_callback+0xb6>
                mqtt_subscribe(module_inst, GAME_SHIPSIZE_TOPIC_SUB, 2, SubscribeHandlerShipSizeTopic);
   16e02:	4b1c      	ldr	r3, [pc, #112]	; (16e74 <mqtt_callback+0x104>)
   16e04:	491c      	ldr	r1, [pc, #112]	; (16e78 <mqtt_callback+0x108>)
   16e06:	68f8      	ldr	r0, [r7, #12]
   16e08:	2202      	movs	r2, #2
   16e0a:	4c1c      	ldr	r4, [pc, #112]	; (16e7c <mqtt_callback+0x10c>)
   16e0c:	47a0      	blx	r4
				mqtt_subscribe(module_inst, GAME_TURN_TOPIC_SUB, 2, SubscribeHandlerTurnTopic);
   16e0e:	4b1c      	ldr	r3, [pc, #112]	; (16e80 <mqtt_callback+0x110>)
   16e10:	491c      	ldr	r1, [pc, #112]	; (16e84 <mqtt_callback+0x114>)
   16e12:	68f8      	ldr	r0, [r7, #12]
   16e14:	2202      	movs	r2, #2
   16e16:	4c19      	ldr	r4, [pc, #100]	; (16e7c <mqtt_callback+0x10c>)
   16e18:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   16e1a:	4b1b      	ldr	r3, [pc, #108]	; (16e88 <mqtt_callback+0x118>)
   16e1c:	0019      	movs	r1, r3
   16e1e:	2001      	movs	r0, #1
   16e20:	4b0b      	ldr	r3, [pc, #44]	; (16e50 <mqtt_callback+0xe0>)
   16e22:	4798      	blx	r3
            break;
   16e24:	e00e      	b.n	16e44 <mqtt_callback+0xd4>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   16e26:	687b      	ldr	r3, [r7, #4]
   16e28:	781b      	ldrb	r3, [r3, #0]
   16e2a:	001a      	movs	r2, r3
   16e2c:	4b17      	ldr	r3, [pc, #92]	; (16e8c <mqtt_callback+0x11c>)
   16e2e:	0019      	movs	r1, r3
   16e30:	2001      	movs	r0, #1
   16e32:	4b07      	ldr	r3, [pc, #28]	; (16e50 <mqtt_callback+0xe0>)
   16e34:	4798      	blx	r3
            break;
   16e36:	e005      	b.n	16e44 <mqtt_callback+0xd4>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   16e38:	4b15      	ldr	r3, [pc, #84]	; (16e90 <mqtt_callback+0x120>)
   16e3a:	0019      	movs	r1, r3
   16e3c:	2001      	movs	r0, #1
   16e3e:	4b04      	ldr	r3, [pc, #16]	; (16e50 <mqtt_callback+0xe0>)
   16e40:	4798      	blx	r3
            break;
   16e42:	46c0      	nop			; (mov r8, r8)
}
   16e44:	46c0      	nop			; (mov r8, r8)
   16e46:	46bd      	mov	sp, r7
   16e48:	b005      	add	sp, #20
   16e4a:	bd90      	pop	{r4, r7, pc}
   16e4c:	000367d0 	.word	0x000367d0
   16e50:	0001e131 	.word	0x0001e131
   16e54:	000367ec 	.word	0x000367ec
   16e58:	000367fc 	.word	0x000367fc
   16e5c:	0002f6ed 	.word	0x0002f6ed
   16e60:	00036808 	.word	0x00036808
   16e64:	00036830 	.word	0x00036830
   16e68:	000361e8 	.word	0x000361e8
   16e6c:	0003684c 	.word	0x0003684c
   16e70:	0002f6a5 	.word	0x0002f6a5
   16e74:	00016bdd 	.word	0x00016bdd
   16e78:	00036884 	.word	0x00036884
   16e7c:	0002f88d 	.word	0x0002f88d
   16e80:	00016ce9 	.word	0x00016ce9
   16e84:	00036898 	.word	0x00036898
   16e88:	000368a8 	.word	0x000368a8
   16e8c:	000368bc 	.word	0x000368bc
   16e90:	000368f0 	.word	0x000368f0

00016e94 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   16e94:	b580      	push	{r7, lr}
   16e96:	b088      	sub	sp, #32
   16e98:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   16e9a:	1d3b      	adds	r3, r7, #4
   16e9c:	0018      	movs	r0, r3
   16e9e:	4b1f      	ldr	r3, [pc, #124]	; (16f1c <configure_mqtt+0x88>)
   16ea0:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   16ea2:	1d3b      	adds	r3, r7, #4
   16ea4:	4a1e      	ldr	r2, [pc, #120]	; (16f20 <configure_mqtt+0x8c>)
   16ea6:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   16ea8:	1d3b      	adds	r3, r7, #4
   16eaa:	2280      	movs	r2, #128	; 0x80
   16eac:	0092      	lsls	r2, r2, #2
   16eae:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   16eb0:	1d3b      	adds	r3, r7, #4
   16eb2:	4a1c      	ldr	r2, [pc, #112]	; (16f24 <configure_mqtt+0x90>)
   16eb4:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   16eb6:	1d3b      	adds	r3, r7, #4
   16eb8:	2280      	movs	r2, #128	; 0x80
   16eba:	0092      	lsls	r2, r2, #2
   16ebc:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   16ebe:	1d3b      	adds	r3, r7, #4
   16ec0:	4a19      	ldr	r2, [pc, #100]	; (16f28 <configure_mqtt+0x94>)
   16ec2:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   16ec4:	1d3b      	adds	r3, r7, #4
   16ec6:	4a19      	ldr	r2, [pc, #100]	; (16f2c <configure_mqtt+0x98>)
   16ec8:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   16eca:	1d3a      	adds	r2, r7, #4
   16ecc:	4b18      	ldr	r3, [pc, #96]	; (16f30 <configure_mqtt+0x9c>)
   16ece:	0011      	movs	r1, r2
   16ed0:	0018      	movs	r0, r3
   16ed2:	4b18      	ldr	r3, [pc, #96]	; (16f34 <configure_mqtt+0xa0>)
   16ed4:	4798      	blx	r3
   16ed6:	0003      	movs	r3, r0
   16ed8:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   16eda:	69fb      	ldr	r3, [r7, #28]
   16edc:	2b00      	cmp	r3, #0
   16ede:	da06      	bge.n	16eee <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   16ee0:	69fa      	ldr	r2, [r7, #28]
   16ee2:	4b15      	ldr	r3, [pc, #84]	; (16f38 <configure_mqtt+0xa4>)
   16ee4:	0019      	movs	r1, r3
   16ee6:	2001      	movs	r0, #1
   16ee8:	4b14      	ldr	r3, [pc, #80]	; (16f3c <configure_mqtt+0xa8>)
   16eea:	4798      	blx	r3
        while (1) {
   16eec:	e7fe      	b.n	16eec <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   16eee:	4a14      	ldr	r2, [pc, #80]	; (16f40 <configure_mqtt+0xac>)
   16ef0:	4b0f      	ldr	r3, [pc, #60]	; (16f30 <configure_mqtt+0x9c>)
   16ef2:	0011      	movs	r1, r2
   16ef4:	0018      	movs	r0, r3
   16ef6:	4b13      	ldr	r3, [pc, #76]	; (16f44 <configure_mqtt+0xb0>)
   16ef8:	4798      	blx	r3
   16efa:	0003      	movs	r3, r0
   16efc:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   16efe:	69fb      	ldr	r3, [r7, #28]
   16f00:	2b00      	cmp	r3, #0
   16f02:	da06      	bge.n	16f12 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   16f04:	69fa      	ldr	r2, [r7, #28]
   16f06:	4b10      	ldr	r3, [pc, #64]	; (16f48 <configure_mqtt+0xb4>)
   16f08:	0019      	movs	r1, r3
   16f0a:	2001      	movs	r0, #1
   16f0c:	4b0b      	ldr	r3, [pc, #44]	; (16f3c <configure_mqtt+0xa8>)
   16f0e:	4798      	blx	r3
        while (1) {
   16f10:	e7fe      	b.n	16f10 <configure_mqtt+0x7c>
        }
    }
}
   16f12:	46c0      	nop			; (mov r8, r8)
   16f14:	46bd      	mov	sp, r7
   16f16:	b008      	add	sp, #32
   16f18:	bd80      	pop	{r7, pc}
   16f1a:	46c0      	nop			; (mov r8, r8)
   16f1c:	0002f5e5 	.word	0x0002f5e5
   16f20:	200004c0 	.word	0x200004c0
   16f24:	200006c0 	.word	0x200006c0
   16f28:	0000075b 	.word	0x0000075b
   16f2c:	00001770 	.word	0x00001770
   16f30:	20000488 	.word	0x20000488
   16f34:	0002f535 	.word	0x0002f535
   16f38:	00036904 	.word	0x00036904
   16f3c:	0001e131 	.word	0x0001e131
   16f40:	00016d71 	.word	0x00016d71
   16f44:	0002f625 	.word	0x0002f625
   16f48:	00036938 	.word	0x00036938

00016f4c <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   16f4c:	b580      	push	{r7, lr}
   16f4e:	b084      	sub	sp, #16
   16f50:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   16f52:	1d3b      	adds	r3, r7, #4
   16f54:	0018      	movs	r0, r3
   16f56:	4b0b      	ldr	r3, [pc, #44]	; (16f84 <configure_extint_channel+0x38>)
   16f58:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   16f5a:	1d3b      	adds	r3, r7, #4
   16f5c:	2237      	movs	r2, #55	; 0x37
   16f5e:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   16f60:	1d3b      	adds	r3, r7, #4
   16f62:	2200      	movs	r2, #0
   16f64:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   16f66:	1d3b      	adds	r3, r7, #4
   16f68:	2201      	movs	r2, #1
   16f6a:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   16f6c:	1d3b      	adds	r3, r7, #4
   16f6e:	2202      	movs	r2, #2
   16f70:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   16f72:	1d3b      	adds	r3, r7, #4
   16f74:	0019      	movs	r1, r3
   16f76:	2007      	movs	r0, #7
   16f78:	4b03      	ldr	r3, [pc, #12]	; (16f88 <configure_extint_channel+0x3c>)
   16f7a:	4798      	blx	r3
}
   16f7c:	46c0      	nop			; (mov r8, r8)
   16f7e:	46bd      	mov	sp, r7
   16f80:	b004      	add	sp, #16
   16f82:	bd80      	pop	{r7, pc}
   16f84:	00026775 	.word	0x00026775
   16f88:	000267a9 	.word	0x000267a9

00016f8c <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   16f8c:	b580      	push	{r7, lr}
   16f8e:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   16f90:	4b06      	ldr	r3, [pc, #24]	; (16fac <configure_extint_callbacks+0x20>)
   16f92:	2200      	movs	r2, #0
   16f94:	2107      	movs	r1, #7
   16f96:	0018      	movs	r0, r3
   16f98:	4b05      	ldr	r3, [pc, #20]	; (16fb0 <configure_extint_callbacks+0x24>)
   16f9a:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   16f9c:	2100      	movs	r1, #0
   16f9e:	2007      	movs	r0, #7
   16fa0:	4b04      	ldr	r3, [pc, #16]	; (16fb4 <configure_extint_callbacks+0x28>)
   16fa2:	4798      	blx	r3
}
   16fa4:	46c0      	nop			; (mov r8, r8)
   16fa6:	46bd      	mov	sp, r7
   16fa8:	bd80      	pop	{r7, pc}
   16faa:	46c0      	nop			; (mov r8, r8)
   16fac:	00016fb9 	.word	0x00016fb9
   16fb0:	00026375 	.word	0x00026375
   16fb4:	000263d9 	.word	0x000263d9

00016fb8 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   16fb8:	b580      	push	{r7, lr}
   16fba:	af00      	add	r7, sp, #0
    isPressed = true;
   16fbc:	4b02      	ldr	r3, [pc, #8]	; (16fc8 <extint_detection_callback+0x10>)
   16fbe:	2201      	movs	r2, #1
   16fc0:	701a      	strb	r2, [r3, #0]
}
   16fc2:	46c0      	nop			; (mov r8, r8)
   16fc4:	46bd      	mov	sp, r7
   16fc6:	bd80      	pop	{r7, pc}
   16fc8:	200008c0 	.word	0x200008c0

00016fcc <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   16fcc:	b580      	push	{r7, lr}
   16fce:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   16fd0:	4a15      	ldr	r2, [pc, #84]	; (17028 <HTTP_DownloadFileInit+0x5c>)
   16fd2:	4b16      	ldr	r3, [pc, #88]	; (1702c <HTTP_DownloadFileInit+0x60>)
   16fd4:	0011      	movs	r1, r2
   16fd6:	0018      	movs	r0, r3
   16fd8:	4b15      	ldr	r3, [pc, #84]	; (17030 <HTTP_DownloadFileInit+0x64>)
   16fda:	4798      	blx	r3
   16fdc:	1e03      	subs	r3, r0, #0
   16fde:	d008      	beq.n	16ff2 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16fe0:	4b14      	ldr	r3, [pc, #80]	; (17034 <HTTP_DownloadFileInit+0x68>)
   16fe2:	0019      	movs	r1, r3
   16fe4:	2001      	movs	r0, #1
   16fe6:	4b14      	ldr	r3, [pc, #80]	; (17038 <HTTP_DownloadFileInit+0x6c>)
   16fe8:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   16fea:	e002      	b.n	16ff2 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   16fec:	2000      	movs	r0, #0
   16fee:	4b13      	ldr	r3, [pc, #76]	; (1703c <HTTP_DownloadFileInit+0x70>)
   16ff0:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   16ff2:	4b0e      	ldr	r3, [pc, #56]	; (1702c <HTTP_DownloadFileInit+0x60>)
   16ff4:	2234      	movs	r2, #52	; 0x34
   16ff6:	5c9b      	ldrb	r3, [r3, r2]
   16ff8:	2b00      	cmp	r3, #0
   16ffa:	d1f7      	bne.n	16fec <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   16ffc:	4b10      	ldr	r3, [pc, #64]	; (17040 <HTTP_DownloadFileInit+0x74>)
   16ffe:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   17000:	4b10      	ldr	r3, [pc, #64]	; (17044 <HTTP_DownloadFileInit+0x78>)
   17002:	2201      	movs	r2, #1
   17004:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   17006:	4a10      	ldr	r2, [pc, #64]	; (17048 <HTTP_DownloadFileInit+0x7c>)
   17008:	4b10      	ldr	r3, [pc, #64]	; (1704c <HTTP_DownloadFileInit+0x80>)
   1700a:	0011      	movs	r1, r2
   1700c:	0018      	movs	r0, r3
   1700e:	4b10      	ldr	r3, [pc, #64]	; (17050 <HTTP_DownloadFileInit+0x84>)
   17010:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   17012:	4b10      	ldr	r3, [pc, #64]	; (17054 <HTTP_DownloadFileInit+0x88>)
   17014:	4798      	blx	r3

    start_download();
   17016:	4b10      	ldr	r3, [pc, #64]	; (17058 <HTTP_DownloadFileInit+0x8c>)
   17018:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   1701a:	4b10      	ldr	r3, [pc, #64]	; (1705c <HTTP_DownloadFileInit+0x90>)
   1701c:	2203      	movs	r2, #3
   1701e:	701a      	strb	r2, [r3, #0]
}
   17020:	46c0      	nop			; (mov r8, r8)
   17022:	46bd      	mov	sp, r7
   17024:	bd80      	pop	{r7, pc}
   17026:	46c0      	nop			; (mov r8, r8)
   17028:	000361e8 	.word	0x000361e8
   1702c:	20000488 	.word	0x20000488
   17030:	0002f7d9 	.word	0x0002f7d9
   17034:	000365f0 	.word	0x000365f0
   17038:	0001e131 	.word	0x0001e131
   1703c:	00021e65 	.word	0x00021e65
   17040:	00025421 	.word	0x00025421
   17044:	20000458 	.word	0x20000458
   17048:	00016911 	.word	0x00016911
   1704c:	000168dd 	.word	0x000168dd
   17050:	00025469 	.word	0x00025469
   17054:	000253d1 	.word	0x000253d1
   17058:	00016505 	.word	0x00016505
   1705c:	2000044d 	.word	0x2000044d

00017060 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   17060:	b580      	push	{r7, lr}
   17062:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17064:	e009      	b.n	1707a <HTTP_DownloadFileTransaction+0x1a>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17066:	2000      	movs	r0, #0
   17068:	4b16      	ldr	r3, [pc, #88]	; (170c4 <HTTP_DownloadFileTransaction+0x64>)
   1706a:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   1706c:	4b16      	ldr	r3, [pc, #88]	; (170c8 <HTTP_DownloadFileTransaction+0x68>)
   1706e:	0018      	movs	r0, r3
   17070:	4b16      	ldr	r3, [pc, #88]	; (170cc <HTTP_DownloadFileTransaction+0x6c>)
   17072:	4798      	blx	r3
        vTaskDelay(5);
   17074:	2005      	movs	r0, #5
   17076:	4b16      	ldr	r3, [pc, #88]	; (170d0 <HTTP_DownloadFileTransaction+0x70>)
   17078:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1707a:	2010      	movs	r0, #16
   1707c:	4b15      	ldr	r3, [pc, #84]	; (170d4 <HTTP_DownloadFileTransaction+0x74>)
   1707e:	4798      	blx	r3
   17080:	0003      	movs	r3, r0
   17082:	001a      	movs	r2, r3
   17084:	2301      	movs	r3, #1
   17086:	4053      	eors	r3, r2
   17088:	b2db      	uxtb	r3, r3
   1708a:	2b00      	cmp	r3, #0
   1708c:	d009      	beq.n	170a2 <HTTP_DownloadFileTransaction+0x42>
   1708e:	2020      	movs	r0, #32
   17090:	4b10      	ldr	r3, [pc, #64]	; (170d4 <HTTP_DownloadFileTransaction+0x74>)
   17092:	4798      	blx	r3
   17094:	0003      	movs	r3, r0
   17096:	001a      	movs	r2, r3
   17098:	2301      	movs	r3, #1
   1709a:	4053      	eors	r3, r2
   1709c:	b2db      	uxtb	r3, r3
   1709e:	2b00      	cmp	r3, #0
   170a0:	d1e1      	bne.n	17066 <HTTP_DownloadFileTransaction+0x6>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   170a2:	4b0d      	ldr	r3, [pc, #52]	; (170d8 <HTTP_DownloadFileTransaction+0x78>)
   170a4:	4798      	blx	r3
    vTaskDelay(1000);
   170a6:	23fa      	movs	r3, #250	; 0xfa
   170a8:	009b      	lsls	r3, r3, #2
   170aa:	0018      	movs	r0, r3
   170ac:	4b08      	ldr	r3, [pc, #32]	; (170d0 <HTTP_DownloadFileTransaction+0x70>)
   170ae:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   170b0:	4b0a      	ldr	r3, [pc, #40]	; (170dc <HTTP_DownloadFileTransaction+0x7c>)
   170b2:	2200      	movs	r2, #0
   170b4:	701a      	strb	r2, [r3, #0]
    wifiStateMachine = WIFI_MQTT_INIT;
   170b6:	4b0a      	ldr	r3, [pc, #40]	; (170e0 <HTTP_DownloadFileTransaction+0x80>)
   170b8:	2200      	movs	r2, #0
   170ba:	701a      	strb	r2, [r3, #0]
}
   170bc:	46c0      	nop			; (mov r8, r8)
   170be:	46bd      	mov	sp, r7
   170c0:	bd80      	pop	{r7, pc}
   170c2:	46c0      	nop			; (mov r8, r8)
   170c4:	00021e65 	.word	0x00021e65
   170c8:	2000443c 	.word	0x2000443c
   170cc:	00032501 	.word	0x00032501
   170d0:	0001c3f1 	.word	0x0001c3f1
   170d4:	000161dd 	.word	0x000161dd
   170d8:	00025421 	.word	0x00025421
   170dc:	20000458 	.word	0x20000458
   170e0:	2000044d 	.word	0x2000044d

000170e4 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   170e4:	b580      	push	{r7, lr}
   170e6:	af00      	add	r7, sp, #0
    socketDeinit();
   170e8:	4b18      	ldr	r3, [pc, #96]	; (1714c <MQTT_InitRoutine+0x68>)
   170ea:	4798      	blx	r3
    configure_mqtt();
   170ec:	4b18      	ldr	r3, [pc, #96]	; (17150 <MQTT_InitRoutine+0x6c>)
   170ee:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   170f0:	4a18      	ldr	r2, [pc, #96]	; (17154 <MQTT_InitRoutine+0x70>)
   170f2:	4b19      	ldr	r3, [pc, #100]	; (17158 <MQTT_InitRoutine+0x74>)
   170f4:	0011      	movs	r1, r2
   170f6:	0018      	movs	r0, r3
   170f8:	4b18      	ldr	r3, [pc, #96]	; (1715c <MQTT_InitRoutine+0x78>)
   170fa:	4798      	blx	r3
    socketInit();
   170fc:	4b18      	ldr	r3, [pc, #96]	; (17160 <MQTT_InitRoutine+0x7c>)
   170fe:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   17100:	4b18      	ldr	r3, [pc, #96]	; (17164 <MQTT_InitRoutine+0x80>)
   17102:	2234      	movs	r2, #52	; 0x34
   17104:	5c9b      	ldrb	r3, [r3, r2]
   17106:	2201      	movs	r2, #1
   17108:	4053      	eors	r3, r2
   1710a:	b2db      	uxtb	r3, r3
   1710c:	2b00      	cmp	r3, #0
   1710e:	d00c      	beq.n	1712a <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   17110:	4a15      	ldr	r2, [pc, #84]	; (17168 <MQTT_InitRoutine+0x84>)
   17112:	4b14      	ldr	r3, [pc, #80]	; (17164 <MQTT_InitRoutine+0x80>)
   17114:	0011      	movs	r1, r2
   17116:	0018      	movs	r0, r3
   17118:	4b14      	ldr	r3, [pc, #80]	; (1716c <MQTT_InitRoutine+0x88>)
   1711a:	4798      	blx	r3
   1711c:	1e03      	subs	r3, r0, #0
   1711e:	d004      	beq.n	1712a <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17120:	4b13      	ldr	r3, [pc, #76]	; (17170 <MQTT_InitRoutine+0x8c>)
   17122:	0019      	movs	r1, r3
   17124:	2001      	movs	r0, #1
   17126:	4b13      	ldr	r3, [pc, #76]	; (17174 <MQTT_InitRoutine+0x90>)
   17128:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   1712a:	4b0e      	ldr	r3, [pc, #56]	; (17164 <MQTT_InitRoutine+0x80>)
   1712c:	2234      	movs	r2, #52	; 0x34
   1712e:	5c9b      	ldrb	r3, [r3, r2]
   17130:	2b00      	cmp	r3, #0
   17132:	d004      	beq.n	1713e <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   17134:	4b10      	ldr	r3, [pc, #64]	; (17178 <MQTT_InitRoutine+0x94>)
   17136:	0019      	movs	r1, r3
   17138:	2001      	movs	r0, #1
   1713a:	4b0e      	ldr	r3, [pc, #56]	; (17174 <MQTT_InitRoutine+0x90>)
   1713c:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   1713e:	4b0f      	ldr	r3, [pc, #60]	; (1717c <MQTT_InitRoutine+0x98>)
   17140:	2201      	movs	r2, #1
   17142:	701a      	strb	r2, [r3, #0]
}
   17144:	46c0      	nop			; (mov r8, r8)
   17146:	46bd      	mov	sp, r7
   17148:	bd80      	pop	{r7, pc}
   1714a:	46c0      	nop			; (mov r8, r8)
   1714c:	00025421 	.word	0x00025421
   17150:	00016e95 	.word	0x00016e95
   17154:	00016bb9 	.word	0x00016bb9
   17158:	00016b85 	.word	0x00016b85
   1715c:	00025469 	.word	0x00025469
   17160:	000253d1 	.word	0x000253d1
   17164:	20000488 	.word	0x20000488
   17168:	000361e8 	.word	0x000361e8
   1716c:	0002f6a5 	.word	0x0002f6a5
   17170:	000365f0 	.word	0x000365f0
   17174:	0001e131 	.word	0x0001e131
   17178:	0003696c 	.word	0x0003696c
   1717c:	2000044d 	.word	0x2000044d

00017180 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   17180:	b580      	push	{r7, lr}
   17182:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   17184:	2000      	movs	r0, #0
   17186:	4b0a      	ldr	r3, [pc, #40]	; (171b0 <MQTT_HandleTransactions+0x30>)
   17188:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   1718a:	4b0a      	ldr	r3, [pc, #40]	; (171b4 <MQTT_HandleTransactions+0x34>)
   1718c:	0018      	movs	r0, r3
   1718e:	4b0a      	ldr	r3, [pc, #40]	; (171b8 <MQTT_HandleTransactions+0x38>)
   17190:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   17192:	4b0a      	ldr	r3, [pc, #40]	; (171bc <MQTT_HandleTransactions+0x3c>)
   17194:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   17196:	4b0a      	ldr	r3, [pc, #40]	; (171c0 <MQTT_HandleTransactions+0x40>)
   17198:	2234      	movs	r2, #52	; 0x34
   1719a:	5c9b      	ldrb	r3, [r3, r2]
   1719c:	2b00      	cmp	r3, #0
   1719e:	d004      	beq.n	171aa <MQTT_HandleTransactions+0x2a>
   171a0:	4b07      	ldr	r3, [pc, #28]	; (171c0 <MQTT_HandleTransactions+0x40>)
   171a2:	2164      	movs	r1, #100	; 0x64
   171a4:	0018      	movs	r0, r3
   171a6:	4b07      	ldr	r3, [pc, #28]	; (171c4 <MQTT_HandleTransactions+0x44>)
   171a8:	4798      	blx	r3
}
   171aa:	46c0      	nop			; (mov r8, r8)
   171ac:	46bd      	mov	sp, r7
   171ae:	bd80      	pop	{r7, pc}
   171b0:	00021e65 	.word	0x00021e65
   171b4:	2000443c 	.word	0x2000443c
   171b8:	00032501 	.word	0x00032501
   171bc:	000171c9 	.word	0x000171c9
   171c0:	20000488 	.word	0x20000488
   171c4:	0002f8d5 	.word	0x0002f8d5

000171c8 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   171c8:	b590      	push	{r4, r7, lr}
   171ca:	b093      	sub	sp, #76	; 0x4c
   171cc:	af02      	add	r7, sp, #8
	char game_msg_temp[MAX_MQTT_MSG_SIZE];
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &game_msg_temp, 0)) {
   171ce:	4b13      	ldr	r3, [pc, #76]	; (1721c <MQTT_HandleGameMessages+0x54>)
   171d0:	681b      	ldr	r3, [r3, #0]
   171d2:	0039      	movs	r1, r7
   171d4:	2200      	movs	r2, #0
   171d6:	0018      	movs	r0, r3
   171d8:	4b11      	ldr	r3, [pc, #68]	; (17220 <MQTT_HandleGameMessages+0x58>)
   171da:	4798      	blx	r3
   171dc:	0003      	movs	r3, r0
   171de:	2b01      	cmp	r3, #1
   171e0:	d118      	bne.n	17214 <MQTT_HandleGameMessages+0x4c>
		
        LogMessage(LOG_DEBUG_LVL, game_msg_temp);
   171e2:	003b      	movs	r3, r7
   171e4:	0019      	movs	r1, r3
   171e6:	2001      	movs	r0, #1
   171e8:	4b0e      	ldr	r3, [pc, #56]	; (17224 <MQTT_HandleGameMessages+0x5c>)
   171ea:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   171ec:	4b0e      	ldr	r3, [pc, #56]	; (17228 <MQTT_HandleGameMessages+0x60>)
   171ee:	0019      	movs	r1, r3
   171f0:	2001      	movs	r0, #1
   171f2:	4b0c      	ldr	r3, [pc, #48]	; (17224 <MQTT_HandleGameMessages+0x5c>)
   171f4:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_SHIPLOC_TOPIC_PUB, game_msg_temp, strlen(game_msg_temp), 1, 0);
   171f6:	003b      	movs	r3, r7
   171f8:	0018      	movs	r0, r3
   171fa:	4b0c      	ldr	r3, [pc, #48]	; (1722c <MQTT_HandleGameMessages+0x64>)
   171fc:	4798      	blx	r3
   171fe:	0004      	movs	r4, r0
   17200:	003a      	movs	r2, r7
   17202:	490b      	ldr	r1, [pc, #44]	; (17230 <MQTT_HandleGameMessages+0x68>)
   17204:	480b      	ldr	r0, [pc, #44]	; (17234 <MQTT_HandleGameMessages+0x6c>)
   17206:	2300      	movs	r3, #0
   17208:	9301      	str	r3, [sp, #4]
   1720a:	2301      	movs	r3, #1
   1720c:	9300      	str	r3, [sp, #0]
   1720e:	0023      	movs	r3, r4
   17210:	4c09      	ldr	r4, [pc, #36]	; (17238 <MQTT_HandleGameMessages+0x70>)
   17212:	47a0      	blx	r4
    }
}
   17214:	46c0      	nop			; (mov r8, r8)
   17216:	46bd      	mov	sp, r7
   17218:	b011      	add	sp, #68	; 0x44
   1721a:	bd90      	pop	{r4, r7, pc}
   1721c:	20000454 	.word	0x20000454
   17220:	0001b245 	.word	0x0001b245
   17224:	0001e131 	.word	0x0001e131
   17228:	00036988 	.word	0x00036988
   1722c:	00034c57 	.word	0x00034c57
   17230:	0003698c 	.word	0x0003698c
   17234:	20000488 	.word	0x20000488
   17238:	0002f821 	.word	0x0002f821

0001723c <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   1723c:	b590      	push	{r4, r7, lr}
   1723e:	b08d      	sub	sp, #52	; 0x34
   17240:	af02      	add	r7, sp, #8
   17242:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   17244:	2064      	movs	r0, #100	; 0x64
   17246:	4b6c      	ldr	r3, [pc, #432]	; (173f8 <vWifiTask+0x1bc>)
   17248:	4798      	blx	r3
    init_state();
   1724a:	4b6c      	ldr	r3, [pc, #432]	; (173fc <vWifiTask+0x1c0>)
   1724c:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   1724e:	2200      	movs	r2, #0
   17250:	2104      	movs	r1, #4
   17252:	2005      	movs	r0, #5
   17254:	4b6a      	ldr	r3, [pc, #424]	; (17400 <vWifiTask+0x1c4>)
   17256:	4798      	blx	r3
   17258:	0002      	movs	r2, r0
   1725a:	4b6a      	ldr	r3, [pc, #424]	; (17404 <vWifiTask+0x1c8>)
   1725c:	601a      	str	r2, [r3, #0]
	xQueueGameBuffer = xQueueCreate(2, sizeof(char) * MAX_MQTT_MSG_SIZE);
   1725e:	2200      	movs	r2, #0
   17260:	2140      	movs	r1, #64	; 0x40
   17262:	2002      	movs	r0, #2
   17264:	4b66      	ldr	r3, [pc, #408]	; (17400 <vWifiTask+0x1c4>)
   17266:	4798      	blx	r3
   17268:	0002      	movs	r2, r0
   1726a:	4b67      	ldr	r3, [pc, #412]	; (17408 <vWifiTask+0x1cc>)
   1726c:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL) {
   1726e:	4b65      	ldr	r3, [pc, #404]	; (17404 <vWifiTask+0x1c8>)
   17270:	681b      	ldr	r3, [r3, #0]
   17272:	2b00      	cmp	r3, #0
   17274:	d103      	bne.n	1727e <vWifiTask+0x42>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   17276:	4b65      	ldr	r3, [pc, #404]	; (1740c <vWifiTask+0x1d0>)
   17278:	0018      	movs	r0, r3
   1727a:	4b65      	ldr	r3, [pc, #404]	; (17410 <vWifiTask+0x1d4>)
   1727c:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   1727e:	4b65      	ldr	r3, [pc, #404]	; (17414 <vWifiTask+0x1d8>)
   17280:	0018      	movs	r0, r3
   17282:	4b63      	ldr	r3, [pc, #396]	; (17410 <vWifiTask+0x1d4>)
   17284:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   17286:	4b64      	ldr	r3, [pc, #400]	; (17418 <vWifiTask+0x1dc>)
   17288:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   1728a:	4b64      	ldr	r3, [pc, #400]	; (1741c <vWifiTask+0x1e0>)
   1728c:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   1728e:	4b64      	ldr	r3, [pc, #400]	; (17420 <vWifiTask+0x1e4>)
   17290:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    //init_storage();

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   17292:	4b64      	ldr	r3, [pc, #400]	; (17424 <vWifiTask+0x1e8>)
   17294:	4798      	blx	r3
    configure_extint_callbacks();
   17296:	4b64      	ldr	r3, [pc, #400]	; (17428 <vWifiTask+0x1ec>)
   17298:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1729a:	230c      	movs	r3, #12
   1729c:	18fb      	adds	r3, r7, r3
   1729e:	2218      	movs	r2, #24
   172a0:	2100      	movs	r1, #0
   172a2:	0018      	movs	r0, r3
   172a4:	4b61      	ldr	r3, [pc, #388]	; (1742c <vWifiTask+0x1f0>)
   172a6:	4798      	blx	r3

    nm_bsp_init();
   172a8:	4b61      	ldr	r3, [pc, #388]	; (17430 <vWifiTask+0x1f4>)
   172aa:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   172ac:	230c      	movs	r3, #12
   172ae:	18fb      	adds	r3, r7, r3
   172b0:	4a60      	ldr	r2, [pc, #384]	; (17434 <vWifiTask+0x1f8>)
   172b2:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   172b4:	2327      	movs	r3, #39	; 0x27
   172b6:	18fc      	adds	r4, r7, r3
   172b8:	230c      	movs	r3, #12
   172ba:	18fb      	adds	r3, r7, r3
   172bc:	0018      	movs	r0, r3
   172be:	4b5e      	ldr	r3, [pc, #376]	; (17438 <vWifiTask+0x1fc>)
   172c0:	4798      	blx	r3
   172c2:	0003      	movs	r3, r0
   172c4:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   172c6:	2327      	movs	r3, #39	; 0x27
   172c8:	18fb      	adds	r3, r7, r3
   172ca:	781b      	ldrb	r3, [r3, #0]
   172cc:	b25b      	sxtb	r3, r3
   172ce:	2b00      	cmp	r3, #0
   172d0:	d009      	beq.n	172e6 <vWifiTask+0xaa>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   172d2:	2327      	movs	r3, #39	; 0x27
   172d4:	18fb      	adds	r3, r7, r3
   172d6:	2200      	movs	r2, #0
   172d8:	569a      	ldrsb	r2, [r3, r2]
   172da:	4b58      	ldr	r3, [pc, #352]	; (1743c <vWifiTask+0x200>)
   172dc:	0019      	movs	r1, r3
   172de:	2001      	movs	r0, #1
   172e0:	4b57      	ldr	r3, [pc, #348]	; (17440 <vWifiTask+0x204>)
   172e2:	4798      	blx	r3
        while (1) {
   172e4:	e7fe      	b.n	172e4 <vWifiTask+0xa8>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   172e6:	4a57      	ldr	r2, [pc, #348]	; (17444 <vWifiTask+0x208>)
   172e8:	4b57      	ldr	r3, [pc, #348]	; (17448 <vWifiTask+0x20c>)
   172ea:	0019      	movs	r1, r3
   172ec:	2001      	movs	r0, #1
   172ee:	4b54      	ldr	r3, [pc, #336]	; (17440 <vWifiTask+0x204>)
   172f0:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   172f2:	4b56      	ldr	r3, [pc, #344]	; (1744c <vWifiTask+0x210>)
   172f4:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   172f6:	4a56      	ldr	r2, [pc, #344]	; (17450 <vWifiTask+0x214>)
   172f8:	4b56      	ldr	r3, [pc, #344]	; (17454 <vWifiTask+0x218>)
   172fa:	0011      	movs	r1, r2
   172fc:	0018      	movs	r0, r3
   172fe:	4b56      	ldr	r3, [pc, #344]	; (17458 <vWifiTask+0x21c>)
   17300:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   17302:	4a56      	ldr	r2, [pc, #344]	; (1745c <vWifiTask+0x220>)
   17304:	484f      	ldr	r0, [pc, #316]	; (17444 <vWifiTask+0x208>)
   17306:	23ff      	movs	r3, #255	; 0xff
   17308:	9300      	str	r3, [sp, #0]
   1730a:	0013      	movs	r3, r2
   1730c:	2202      	movs	r2, #2
   1730e:	2106      	movs	r1, #6
   17310:	4c53      	ldr	r4, [pc, #332]	; (17460 <vWifiTask+0x224>)
   17312:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   17314:	e006      	b.n	17324 <vWifiTask+0xe8>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17316:	2000      	movs	r0, #0
   17318:	4b52      	ldr	r3, [pc, #328]	; (17464 <vWifiTask+0x228>)
   1731a:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   1731c:	4b52      	ldr	r3, [pc, #328]	; (17468 <vWifiTask+0x22c>)
   1731e:	0018      	movs	r0, r3
   17320:	4b52      	ldr	r3, [pc, #328]	; (1746c <vWifiTask+0x230>)
   17322:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   17324:	2002      	movs	r0, #2
   17326:	4b52      	ldr	r3, [pc, #328]	; (17470 <vWifiTask+0x234>)
   17328:	4798      	blx	r3
   1732a:	0003      	movs	r3, r0
   1732c:	001a      	movs	r2, r3
   1732e:	2301      	movs	r3, #1
   17330:	4053      	eors	r3, r2
   17332:	b2db      	uxtb	r3, r3
   17334:	2b00      	cmp	r3, #0
   17336:	d1ee      	bne.n	17316 <vWifiTask+0xda>
    }

    vTaskDelay(1000);
   17338:	23fa      	movs	r3, #250	; 0xfa
   1733a:	009b      	lsls	r3, r3, #2
   1733c:	0018      	movs	r0, r3
   1733e:	4b2e      	ldr	r3, [pc, #184]	; (173f8 <vWifiTask+0x1bc>)
   17340:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   17342:	4b4c      	ldr	r3, [pc, #304]	; (17474 <vWifiTask+0x238>)
   17344:	2201      	movs	r2, #1
   17346:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   17348:	4b4a      	ldr	r3, [pc, #296]	; (17474 <vWifiTask+0x238>)
   1734a:	781b      	ldrb	r3, [r3, #0]
   1734c:	b25b      	sxtb	r3, r3
   1734e:	2b01      	cmp	r3, #1
   17350:	d00b      	beq.n	1736a <vWifiTask+0x12e>
   17352:	dc02      	bgt.n	1735a <vWifiTask+0x11e>
   17354:	2b00      	cmp	r3, #0
   17356:	d005      	beq.n	17364 <vWifiTask+0x128>
   17358:	e019      	b.n	1738e <vWifiTask+0x152>
   1735a:	2b02      	cmp	r3, #2
   1735c:	d008      	beq.n	17370 <vWifiTask+0x134>
   1735e:	2b03      	cmp	r3, #3
   17360:	d009      	beq.n	17376 <vWifiTask+0x13a>
   17362:	e014      	b.n	1738e <vWifiTask+0x152>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   17364:	4b44      	ldr	r3, [pc, #272]	; (17478 <vWifiTask+0x23c>)
   17366:	4798      	blx	r3

                break;
   17368:	e015      	b.n	17396 <vWifiTask+0x15a>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   1736a:	4b44      	ldr	r3, [pc, #272]	; (1747c <vWifiTask+0x240>)
   1736c:	4798      	blx	r3
                break;
   1736e:	e012      	b.n	17396 <vWifiTask+0x15a>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   17370:	4b43      	ldr	r3, [pc, #268]	; (17480 <vWifiTask+0x244>)
   17372:	4798      	blx	r3
                break;
   17374:	e00f      	b.n	17396 <vWifiTask+0x15a>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   17376:	4b43      	ldr	r3, [pc, #268]	; (17484 <vWifiTask+0x248>)
   17378:	4798      	blx	r3
				set_update_flag();
   1737a:	4b43      	ldr	r3, [pc, #268]	; (17488 <vWifiTask+0x24c>)
   1737c:	4798      	blx	r3
				vTaskDelay(2000);
   1737e:	23fa      	movs	r3, #250	; 0xfa
   17380:	00db      	lsls	r3, r3, #3
   17382:	0018      	movs	r0, r3
   17384:	4b1c      	ldr	r3, [pc, #112]	; (173f8 <vWifiTask+0x1bc>)
   17386:	4798      	blx	r3
				system_reset();
   17388:	4b40      	ldr	r3, [pc, #256]	; (1748c <vWifiTask+0x250>)
   1738a:	4798      	blx	r3
                break;
   1738c:	e003      	b.n	17396 <vWifiTask+0x15a>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   1738e:	4b39      	ldr	r3, [pc, #228]	; (17474 <vWifiTask+0x238>)
   17390:	2200      	movs	r2, #0
   17392:	701a      	strb	r2, [r3, #0]
                break;
   17394:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   17396:	230b      	movs	r3, #11
   17398:	18fb      	adds	r3, r7, r3
   1739a:	2200      	movs	r2, #0
   1739c:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   1739e:	4b19      	ldr	r3, [pc, #100]	; (17404 <vWifiTask+0x1c8>)
   173a0:	681b      	ldr	r3, [r3, #0]
   173a2:	220b      	movs	r2, #11
   173a4:	18b9      	adds	r1, r7, r2
   173a6:	2200      	movs	r2, #0
   173a8:	0018      	movs	r0, r3
   173aa:	4b39      	ldr	r3, [pc, #228]	; (17490 <vWifiTask+0x254>)
   173ac:	4798      	blx	r3
   173ae:	0003      	movs	r3, r0
   173b0:	2b01      	cmp	r3, #1
   173b2:	d105      	bne.n	173c0 <vWifiTask+0x184>
            wifiStateMachine = DataToReceive;  // Update new state
   173b4:	230b      	movs	r3, #11
   173b6:	18fb      	adds	r3, r7, r3
   173b8:	781b      	ldrb	r3, [r3, #0]
   173ba:	b25a      	sxtb	r2, r3
   173bc:	4b2d      	ldr	r3, [pc, #180]	; (17474 <vWifiTask+0x238>)
   173be:	701a      	strb	r2, [r3, #0]
        }

		 if(isPressed)
   173c0:	4b34      	ldr	r3, [pc, #208]	; (17494 <vWifiTask+0x258>)
   173c2:	781b      	ldrb	r3, [r3, #0]
   173c4:	b2db      	uxtb	r3, r3
   173c6:	2b00      	cmp	r3, #0
   173c8:	d011      	beq.n	173ee <vWifiTask+0x1b2>
		 {
			 mqtt_publish(&mqtt_inst, GAME_START_TOPIC_PUB, "1", 1, 1, 0);
   173ca:	4a33      	ldr	r2, [pc, #204]	; (17498 <vWifiTask+0x25c>)
   173cc:	4933      	ldr	r1, [pc, #204]	; (1749c <vWifiTask+0x260>)
   173ce:	4834      	ldr	r0, [pc, #208]	; (174a0 <vWifiTask+0x264>)
   173d0:	2300      	movs	r3, #0
   173d2:	9301      	str	r3, [sp, #4]
   173d4:	2301      	movs	r3, #1
   173d6:	9300      	str	r3, [sp, #0]
   173d8:	2301      	movs	r3, #1
   173da:	4c32      	ldr	r4, [pc, #200]	; (174a4 <vWifiTask+0x268>)
   173dc:	47a0      	blx	r4
			 LogMessage(LOG_DEBUG_LVL, "MQTT start signal sent");
   173de:	4b32      	ldr	r3, [pc, #200]	; (174a8 <vWifiTask+0x26c>)
   173e0:	0019      	movs	r1, r3
   173e2:	2001      	movs	r0, #1
   173e4:	4b16      	ldr	r3, [pc, #88]	; (17440 <vWifiTask+0x204>)
   173e6:	4798      	blx	r3
			 isPressed = false;
   173e8:	4b2a      	ldr	r3, [pc, #168]	; (17494 <vWifiTask+0x258>)
   173ea:	2200      	movs	r2, #0
   173ec:	701a      	strb	r2, [r3, #0]
		 }
		 
        vTaskDelay(100);
   173ee:	2064      	movs	r0, #100	; 0x64
   173f0:	4b01      	ldr	r3, [pc, #4]	; (173f8 <vWifiTask+0x1bc>)
   173f2:	4798      	blx	r3
    while (1) {
   173f4:	e7a8      	b.n	17348 <vWifiTask+0x10c>
   173f6:	46c0      	nop			; (mov r8, r8)
   173f8:	0001c3f1 	.word	0x0001c3f1
   173fc:	0001616d 	.word	0x0001616d
   17400:	0001a6e5 	.word	0x0001a6e5
   17404:	20000450 	.word	0x20000450
   17408:	20000454 	.word	0x20000454
   1740c:	0003699c 	.word	0x0003699c
   17410:	0001e045 	.word	0x0001e045
   17414:	000369c4 	.word	0x000369c4
   17418:	00016ac5 	.word	0x00016ac5
   1741c:	00016b01 	.word	0x00016b01
   17420:	00016e95 	.word	0x00016e95
   17424:	00016f4d 	.word	0x00016f4d
   17428:	00016f8d 	.word	0x00016f8d
   1742c:	0003489f 	.word	0x0003489f
   17430:	00020199 	.word	0x00020199
   17434:	00016971 	.word	0x00016971
   17438:	00021c71 	.word	0x00021c71
   1743c:	000369e0 	.word	0x000369e0
   17440:	0001e131 	.word	0x0001e131
   17444:	000365c0 	.word	0x000365c0
   17448:	00036a0c 	.word	0x00036a0c
   1744c:	000253d1 	.word	0x000253d1
   17450:	00016bb9 	.word	0x00016bb9
   17454:	00016b85 	.word	0x00016b85
   17458:	00025469 	.word	0x00025469
   1745c:	000365b4 	.word	0x000365b4
   17460:	00021e81 	.word	0x00021e81
   17464:	00021e65 	.word	0x00021e65
   17468:	2000443c 	.word	0x2000443c
   1746c:	00032501 	.word	0x00032501
   17470:	000161dd 	.word	0x000161dd
   17474:	2000044d 	.word	0x2000044d
   17478:	000170e5 	.word	0x000170e5
   1747c:	00017181 	.word	0x00017181
   17480:	00016fcd 	.word	0x00016fcd
   17484:	00017061 	.word	0x00017061
   17488:	000174ad 	.word	0x000174ad
   1748c:	000160e1 	.word	0x000160e1
   17490:	0001b245 	.word	0x0001b245
   17494:	200008c0 	.word	0x200008c0
   17498:	00036a30 	.word	0x00036a30
   1749c:	00036a34 	.word	0x00036a34
   174a0:	20000488 	.word	0x20000488
   174a4:	0002f821 	.word	0x0002f821
   174a8:	00036a44 	.word	0x00036a44

000174ac <set_update_flag>:
/**
 static void set_update_flag(void)
 * @brief	Set up the update flag
 * @note
*/
 static void set_update_flag(void){
   174ac:	b590      	push	{r4, r7, lr}
   174ae:	b08f      	sub	sp, #60	; 0x3c
   174b0:	af00      	add	r7, sp, #0
	 // Write Flag
	 FIL f_obj;
	 char update_file_name[] = "0:update.txt";
   174b2:	003b      	movs	r3, r7
   174b4:	4a16      	ldr	r2, [pc, #88]	; (17510 <set_update_flag+0x64>)
   174b6:	ca13      	ldmia	r2!, {r0, r1, r4}
   174b8:	c313      	stmia	r3!, {r0, r1, r4}
   174ba:	7812      	ldrb	r2, [r2, #0]
   174bc:	701a      	strb	r2, [r3, #0]
	 update_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   174be:	003b      	movs	r3, r7
   174c0:	2230      	movs	r2, #48	; 0x30
   174c2:	701a      	strb	r2, [r3, #0]
	 FRESULT res = f_open(&f_obj, (char const *)update_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   174c4:	2337      	movs	r3, #55	; 0x37
   174c6:	18fc      	adds	r4, r7, r3
   174c8:	0039      	movs	r1, r7
   174ca:	2310      	movs	r3, #16
   174cc:	18fb      	adds	r3, r7, r3
   174ce:	220a      	movs	r2, #10
   174d0:	0018      	movs	r0, r3
   174d2:	4b10      	ldr	r3, [pc, #64]	; (17514 <set_update_flag+0x68>)
   174d4:	4798      	blx	r3
   174d6:	0003      	movs	r3, r0
   174d8:	7023      	strb	r3, [r4, #0]
	 f_close(&f_obj);
   174da:	2310      	movs	r3, #16
   174dc:	18fb      	adds	r3, r7, r3
   174de:	0018      	movs	r0, r3
   174e0:	4b0d      	ldr	r3, [pc, #52]	; (17518 <set_update_flag+0x6c>)
   174e2:	4798      	blx	r3
	 if (res != FR_OK) {
   174e4:	2337      	movs	r3, #55	; 0x37
   174e6:	18fb      	adds	r3, r7, r3
   174e8:	781b      	ldrb	r3, [r3, #0]
   174ea:	2b00      	cmp	r3, #0
   174ec:	d008      	beq.n	17500 <set_update_flag+0x54>
		 LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   174ee:	2337      	movs	r3, #55	; 0x37
   174f0:	18fb      	adds	r3, r7, r3
   174f2:	781a      	ldrb	r2, [r3, #0]
   174f4:	4b09      	ldr	r3, [pc, #36]	; (1751c <set_update_flag+0x70>)
   174f6:	0019      	movs	r1, r3
   174f8:	2000      	movs	r0, #0
   174fa:	4b09      	ldr	r3, [pc, #36]	; (17520 <set_update_flag+0x74>)
   174fc:	4798      	blx	r3
		 } else {
		 SerialConsoleWriteString("update.txt added!\r\n");
	}
 }
   174fe:	e003      	b.n	17508 <set_update_flag+0x5c>
		 SerialConsoleWriteString("update.txt added!\r\n");
   17500:	4b08      	ldr	r3, [pc, #32]	; (17524 <set_update_flag+0x78>)
   17502:	0018      	movs	r0, r3
   17504:	4b08      	ldr	r3, [pc, #32]	; (17528 <set_update_flag+0x7c>)
   17506:	4798      	blx	r3
 }
   17508:	46c0      	nop			; (mov r8, r8)
   1750a:	46bd      	mov	sp, r7
   1750c:	b00f      	add	sp, #60	; 0x3c
   1750e:	bd90      	pop	{r4, r7, pc}
   17510:	00036a80 	.word	0x00036a80
   17514:	0002d7c9 	.word	0x0002d7c9
   17518:	0002e1c9 	.word	0x0002e1c9
   1751c:	00036a5c 	.word	0x00036a5c
   17520:	0001e131 	.word	0x0001e131
   17524:	00036a6c 	.word	0x00036a6c
   17528:	0001e045 	.word	0x0001e045

0001752c <WifiHandlerSetState>:
 

void WifiHandlerSetState(uint8_t state)
{
   1752c:	b590      	push	{r4, r7, lr}
   1752e:	b083      	sub	sp, #12
   17530:	af00      	add	r7, sp, #0
   17532:	0002      	movs	r2, r0
   17534:	1dfb      	adds	r3, r7, #7
   17536:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   17538:	1dfb      	adds	r3, r7, #7
   1753a:	781b      	ldrb	r3, [r3, #0]
   1753c:	2b03      	cmp	r3, #3
   1753e:	d806      	bhi.n	1754e <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   17540:	4b05      	ldr	r3, [pc, #20]	; (17558 <WifiHandlerSetState+0x2c>)
   17542:	6818      	ldr	r0, [r3, #0]
   17544:	1df9      	adds	r1, r7, #7
   17546:	2300      	movs	r3, #0
   17548:	220a      	movs	r2, #10
   1754a:	4c04      	ldr	r4, [pc, #16]	; (1755c <WifiHandlerSetState+0x30>)
   1754c:	47a0      	blx	r4
    }
}
   1754e:	46c0      	nop			; (mov r8, r8)
   17550:	46bd      	mov	sp, r7
   17552:	b003      	add	sp, #12
   17554:	bd90      	pop	{r4, r7, pc}
   17556:	46c0      	nop			; (mov r8, r8)
   17558:	20000450 	.word	0x20000450
   1755c:	0001a98d 	.word	0x0001a98d

00017560 <WifiSendShipLoc>:
{
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
    return error;
}

int WifiSendShipLoc(uint8_t *ship_loc, uint8_t loc_num){
   17560:	b590      	push	{r4, r7, lr}
   17562:	b0a5      	sub	sp, #148	; 0x94
   17564:	af00      	add	r7, sp, #0
   17566:	6078      	str	r0, [r7, #4]
   17568:	000a      	movs	r2, r1
   1756a:	1cfb      	adds	r3, r7, #3
   1756c:	701a      	strb	r2, [r3, #0]
	char mqtt_msg[MAX_MQTT_MSG_SIZE];
	char ship_loc_str[MAX_MQTT_MSG_SIZE] = "";
   1756e:	230c      	movs	r3, #12
   17570:	18fb      	adds	r3, r7, r3
   17572:	2200      	movs	r2, #0
   17574:	601a      	str	r2, [r3, #0]
   17576:	3304      	adds	r3, #4
   17578:	223c      	movs	r2, #60	; 0x3c
   1757a:	2100      	movs	r1, #0
   1757c:	0018      	movs	r0, r3
   1757e:	4b29      	ldr	r3, [pc, #164]	; (17624 <WifiSendShipLoc+0xc4>)
   17580:	4798      	blx	r3
	sprintf(mqtt_msg, "{ \"p\" : %d, \"loc\":",PLAYER);
   17582:	4929      	ldr	r1, [pc, #164]	; (17628 <WifiSendShipLoc+0xc8>)
   17584:	234c      	movs	r3, #76	; 0x4c
   17586:	18fb      	adds	r3, r7, r3
   17588:	2201      	movs	r2, #1
   1758a:	0018      	movs	r0, r3
   1758c:	4b27      	ldr	r3, [pc, #156]	; (1762c <WifiSendShipLoc+0xcc>)
   1758e:	4798      	blx	r3
		
	LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   17590:	234c      	movs	r3, #76	; 0x4c
   17592:	18fb      	adds	r3, r7, r3
   17594:	0019      	movs	r1, r3
   17596:	2001      	movs	r0, #1
   17598:	4b25      	ldr	r3, [pc, #148]	; (17630 <WifiSendShipLoc+0xd0>)
   1759a:	4798      	blx	r3
	LogMessage(LOG_DEBUG_LVL, "\r\n");
   1759c:	4b25      	ldr	r3, [pc, #148]	; (17634 <WifiSendShipLoc+0xd4>)
   1759e:	0019      	movs	r1, r3
   175a0:	2001      	movs	r0, #1
   175a2:	4b23      	ldr	r3, [pc, #140]	; (17630 <WifiSendShipLoc+0xd0>)
   175a4:	4798      	blx	r3
			   
	ConcatToArrString(ship_loc, loc_num, ship_loc_str);
   175a6:	230c      	movs	r3, #12
   175a8:	18fa      	adds	r2, r7, r3
   175aa:	1cfb      	adds	r3, r7, #3
   175ac:	7819      	ldrb	r1, [r3, #0]
   175ae:	687b      	ldr	r3, [r7, #4]
   175b0:	0018      	movs	r0, r3
   175b2:	4b21      	ldr	r3, [pc, #132]	; (17638 <WifiSendShipLoc+0xd8>)
   175b4:	4798      	blx	r3
	strcat(mqtt_msg,ship_loc_str);
   175b6:	230c      	movs	r3, #12
   175b8:	18fa      	adds	r2, r7, r3
   175ba:	234c      	movs	r3, #76	; 0x4c
   175bc:	18fb      	adds	r3, r7, r3
   175be:	0011      	movs	r1, r2
   175c0:	0018      	movs	r0, r3
   175c2:	4b1e      	ldr	r3, [pc, #120]	; (1763c <WifiSendShipLoc+0xdc>)
   175c4:	4798      	blx	r3
	
	LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   175c6:	234c      	movs	r3, #76	; 0x4c
   175c8:	18fb      	adds	r3, r7, r3
   175ca:	0019      	movs	r1, r3
   175cc:	2001      	movs	r0, #1
   175ce:	4b18      	ldr	r3, [pc, #96]	; (17630 <WifiSendShipLoc+0xd0>)
   175d0:	4798      	blx	r3
	LogMessage(LOG_DEBUG_LVL, "\r\n");
   175d2:	4b18      	ldr	r3, [pc, #96]	; (17634 <WifiSendShipLoc+0xd4>)
   175d4:	0019      	movs	r1, r3
   175d6:	2001      	movs	r0, #1
   175d8:	4b15      	ldr	r3, [pc, #84]	; (17630 <WifiSendShipLoc+0xd0>)
   175da:	4798      	blx	r3
	
	strcat(mqtt_msg,"}");
   175dc:	234c      	movs	r3, #76	; 0x4c
   175de:	18fb      	adds	r3, r7, r3
   175e0:	0018      	movs	r0, r3
   175e2:	4b17      	ldr	r3, [pc, #92]	; (17640 <WifiSendShipLoc+0xe0>)
   175e4:	4798      	blx	r3
   175e6:	0003      	movs	r3, r0
   175e8:	001a      	movs	r2, r3
   175ea:	234c      	movs	r3, #76	; 0x4c
   175ec:	18fb      	adds	r3, r7, r3
   175ee:	189a      	adds	r2, r3, r2
   175f0:	4b14      	ldr	r3, [pc, #80]	; (17644 <WifiSendShipLoc+0xe4>)
   175f2:	0010      	movs	r0, r2
   175f4:	0019      	movs	r1, r3
   175f6:	2302      	movs	r3, #2
   175f8:	001a      	movs	r2, r3
   175fa:	4b13      	ldr	r3, [pc, #76]	; (17648 <WifiSendShipLoc+0xe8>)
   175fc:	4798      	blx	r3
	int error = xQueueSend(xQueueGameBuffer, mqtt_msg, (TickType_t)10);
   175fe:	4b13      	ldr	r3, [pc, #76]	; (1764c <WifiSendShipLoc+0xec>)
   17600:	6818      	ldr	r0, [r3, #0]
   17602:	234c      	movs	r3, #76	; 0x4c
   17604:	18f9      	adds	r1, r7, r3
   17606:	2300      	movs	r3, #0
   17608:	220a      	movs	r2, #10
   1760a:	4c11      	ldr	r4, [pc, #68]	; (17650 <WifiSendShipLoc+0xf0>)
   1760c:	47a0      	blx	r4
   1760e:	0003      	movs	r3, r0
   17610:	228c      	movs	r2, #140	; 0x8c
   17612:	18ba      	adds	r2, r7, r2
   17614:	6013      	str	r3, [r2, #0]
    return error;
   17616:	238c      	movs	r3, #140	; 0x8c
   17618:	18fb      	adds	r3, r7, r3
   1761a:	681b      	ldr	r3, [r3, #0]
}
   1761c:	0018      	movs	r0, r3
   1761e:	46bd      	mov	sp, r7
   17620:	b025      	add	sp, #148	; 0x94
   17622:	bd90      	pop	{r4, r7, pc}
   17624:	0003489f 	.word	0x0003489f
   17628:	00036a90 	.word	0x00036a90
   1762c:	00034b5d 	.word	0x00034b5d
   17630:	0001e131 	.word	0x0001e131
   17634:	00036988 	.word	0x00036988
   17638:	00017655 	.word	0x00017655
   1763c:	00034bdd 	.word	0x00034bdd
   17640:	00034c57 	.word	0x00034c57
   17644:	00036aa4 	.word	0x00036aa4
   17648:	00034869 	.word	0x00034869
   1764c:	20000454 	.word	0x20000454
   17650:	0001a98d 	.word	0x0001a98d

00017654 <ConcatToArrString>:

void ConcatToArrString(uint8_t *arr, uint8_t arr_size, char* output){
   17654:	b580      	push	{r7, lr}
   17656:	b086      	sub	sp, #24
   17658:	af00      	add	r7, sp, #0
   1765a:	60f8      	str	r0, [r7, #12]
   1765c:	607a      	str	r2, [r7, #4]
   1765e:	230b      	movs	r3, #11
   17660:	18fb      	adds	r3, r7, r3
   17662:	1c0a      	adds	r2, r1, #0
   17664:	701a      	strb	r2, [r3, #0]
	
	 int n = 0;
   17666:	2300      	movs	r3, #0
   17668:	617b      	str	r3, [r7, #20]

	 n += sprintf (&output[n], "[");
   1766a:	697b      	ldr	r3, [r7, #20]
   1766c:	687a      	ldr	r2, [r7, #4]
   1766e:	18d2      	adds	r2, r2, r3
   17670:	4b1f      	ldr	r3, [pc, #124]	; (176f0 <ConcatToArrString+0x9c>)
   17672:	0010      	movs	r0, r2
   17674:	0019      	movs	r1, r3
   17676:	2302      	movs	r3, #2
   17678:	001a      	movs	r2, r3
   1767a:	4b1e      	ldr	r3, [pc, #120]	; (176f4 <ConcatToArrString+0xa0>)
   1767c:	4798      	blx	r3
   1767e:	2201      	movs	r2, #1
   17680:	697b      	ldr	r3, [r7, #20]
   17682:	189b      	adds	r3, r3, r2
   17684:	617b      	str	r3, [r7, #20]
	 for (int i = 0; i < arr_size - 1; i++) {
   17686:	2300      	movs	r3, #0
   17688:	613b      	str	r3, [r7, #16]
   1768a:	e012      	b.n	176b2 <ConcatToArrString+0x5e>
		 n += sprintf (&output[n], "%d,", arr[i]);
   1768c:	697b      	ldr	r3, [r7, #20]
   1768e:	687a      	ldr	r2, [r7, #4]
   17690:	18d0      	adds	r0, r2, r3
   17692:	693b      	ldr	r3, [r7, #16]
   17694:	68fa      	ldr	r2, [r7, #12]
   17696:	18d3      	adds	r3, r2, r3
   17698:	781b      	ldrb	r3, [r3, #0]
   1769a:	001a      	movs	r2, r3
   1769c:	4b16      	ldr	r3, [pc, #88]	; (176f8 <ConcatToArrString+0xa4>)
   1769e:	0019      	movs	r1, r3
   176a0:	4b16      	ldr	r3, [pc, #88]	; (176fc <ConcatToArrString+0xa8>)
   176a2:	4798      	blx	r3
   176a4:	0002      	movs	r2, r0
   176a6:	697b      	ldr	r3, [r7, #20]
   176a8:	189b      	adds	r3, r3, r2
   176aa:	617b      	str	r3, [r7, #20]
	 for (int i = 0; i < arr_size - 1; i++) {
   176ac:	693b      	ldr	r3, [r7, #16]
   176ae:	3301      	adds	r3, #1
   176b0:	613b      	str	r3, [r7, #16]
   176b2:	230b      	movs	r3, #11
   176b4:	18fb      	adds	r3, r7, r3
   176b6:	781b      	ldrb	r3, [r3, #0]
   176b8:	1e5a      	subs	r2, r3, #1
   176ba:	693b      	ldr	r3, [r7, #16]
   176bc:	429a      	cmp	r2, r3
   176be:	dce5      	bgt.n	1768c <ConcatToArrString+0x38>
	 }
	 n += sprintf (&output[n], "%d]", arr[arr_size - 1]);
   176c0:	697b      	ldr	r3, [r7, #20]
   176c2:	687a      	ldr	r2, [r7, #4]
   176c4:	18d0      	adds	r0, r2, r3
   176c6:	230b      	movs	r3, #11
   176c8:	18fb      	adds	r3, r7, r3
   176ca:	781b      	ldrb	r3, [r3, #0]
   176cc:	3b01      	subs	r3, #1
   176ce:	68fa      	ldr	r2, [r7, #12]
   176d0:	18d3      	adds	r3, r2, r3
   176d2:	781b      	ldrb	r3, [r3, #0]
   176d4:	001a      	movs	r2, r3
   176d6:	4b0a      	ldr	r3, [pc, #40]	; (17700 <ConcatToArrString+0xac>)
   176d8:	0019      	movs	r1, r3
   176da:	4b08      	ldr	r3, [pc, #32]	; (176fc <ConcatToArrString+0xa8>)
   176dc:	4798      	blx	r3
   176de:	0002      	movs	r2, r0
   176e0:	697b      	ldr	r3, [r7, #20]
   176e2:	189b      	adds	r3, r3, r2
   176e4:	617b      	str	r3, [r7, #20]
	 
   176e6:	46c0      	nop			; (mov r8, r8)
   176e8:	46bd      	mov	sp, r7
   176ea:	b006      	add	sp, #24
   176ec:	bd80      	pop	{r7, pc}
   176ee:	46c0      	nop			; (mov r8, r8)
   176f0:	00036768 	.word	0x00036768
   176f4:	00034869 	.word	0x00034869
   176f8:	00036aa8 	.word	0x00036aa8
   176fc:	00034b5d 	.word	0x00034b5d
   17700:	00036aac 	.word	0x00036aac

00017704 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   17704:	b580      	push	{r7, lr}
   17706:	b082      	sub	sp, #8
   17708:	af00      	add	r7, sp, #0
   1770a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1770c:	687b      	ldr	r3, [r7, #4]
   1770e:	2200      	movs	r2, #0
   17710:	701a      	strb	r2, [r3, #0]
}
   17712:	46c0      	nop			; (mov r8, r8)
   17714:	46bd      	mov	sp, r7
   17716:	b002      	add	sp, #8
   17718:	bd80      	pop	{r7, pc}
	...

0001771c <system_apb_clock_set_mask>:
{
   1771c:	b580      	push	{r7, lr}
   1771e:	b082      	sub	sp, #8
   17720:	af00      	add	r7, sp, #0
   17722:	0002      	movs	r2, r0
   17724:	6039      	str	r1, [r7, #0]
   17726:	1dfb      	adds	r3, r7, #7
   17728:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1772a:	1dfb      	adds	r3, r7, #7
   1772c:	781b      	ldrb	r3, [r3, #0]
   1772e:	2b01      	cmp	r3, #1
   17730:	d00a      	beq.n	17748 <system_apb_clock_set_mask+0x2c>
   17732:	2b02      	cmp	r3, #2
   17734:	d00f      	beq.n	17756 <system_apb_clock_set_mask+0x3a>
   17736:	2b00      	cmp	r3, #0
   17738:	d114      	bne.n	17764 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1773a:	4b0e      	ldr	r3, [pc, #56]	; (17774 <system_apb_clock_set_mask+0x58>)
   1773c:	4a0d      	ldr	r2, [pc, #52]	; (17774 <system_apb_clock_set_mask+0x58>)
   1773e:	6991      	ldr	r1, [r2, #24]
   17740:	683a      	ldr	r2, [r7, #0]
   17742:	430a      	orrs	r2, r1
   17744:	619a      	str	r2, [r3, #24]
			break;
   17746:	e00f      	b.n	17768 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   17748:	4b0a      	ldr	r3, [pc, #40]	; (17774 <system_apb_clock_set_mask+0x58>)
   1774a:	4a0a      	ldr	r2, [pc, #40]	; (17774 <system_apb_clock_set_mask+0x58>)
   1774c:	69d1      	ldr	r1, [r2, #28]
   1774e:	683a      	ldr	r2, [r7, #0]
   17750:	430a      	orrs	r2, r1
   17752:	61da      	str	r2, [r3, #28]
			break;
   17754:	e008      	b.n	17768 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   17756:	4b07      	ldr	r3, [pc, #28]	; (17774 <system_apb_clock_set_mask+0x58>)
   17758:	4a06      	ldr	r2, [pc, #24]	; (17774 <system_apb_clock_set_mask+0x58>)
   1775a:	6a11      	ldr	r1, [r2, #32]
   1775c:	683a      	ldr	r2, [r7, #0]
   1775e:	430a      	orrs	r2, r1
   17760:	621a      	str	r2, [r3, #32]
			break;
   17762:	e001      	b.n	17768 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   17764:	2317      	movs	r3, #23
   17766:	e000      	b.n	1776a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   17768:	2300      	movs	r3, #0
}
   1776a:	0018      	movs	r0, r3
   1776c:	46bd      	mov	sp, r7
   1776e:	b002      	add	sp, #8
   17770:	bd80      	pop	{r7, pc}
   17772:	46c0      	nop			; (mov r8, r8)
   17774:	40000400 	.word	0x40000400

00017778 <system_pinmux_get_config_defaults>:
{
   17778:	b580      	push	{r7, lr}
   1777a:	b082      	sub	sp, #8
   1777c:	af00      	add	r7, sp, #0
   1777e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   17780:	687b      	ldr	r3, [r7, #4]
   17782:	2280      	movs	r2, #128	; 0x80
   17784:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   17786:	687b      	ldr	r3, [r7, #4]
   17788:	2200      	movs	r2, #0
   1778a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1778c:	687b      	ldr	r3, [r7, #4]
   1778e:	2201      	movs	r2, #1
   17790:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   17792:	687b      	ldr	r3, [r7, #4]
   17794:	2200      	movs	r2, #0
   17796:	70da      	strb	r2, [r3, #3]
}
   17798:	46c0      	nop			; (mov r8, r8)
   1779a:	46bd      	mov	sp, r7
   1779c:	b002      	add	sp, #8
   1779e:	bd80      	pop	{r7, pc}

000177a0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   177a0:	b580      	push	{r7, lr}
   177a2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   177a4:	4b05      	ldr	r3, [pc, #20]	; (177bc <system_is_debugger_present+0x1c>)
   177a6:	789b      	ldrb	r3, [r3, #2]
   177a8:	b2db      	uxtb	r3, r3
   177aa:	001a      	movs	r2, r3
   177ac:	2302      	movs	r3, #2
   177ae:	4013      	ands	r3, r2
   177b0:	1e5a      	subs	r2, r3, #1
   177b2:	4193      	sbcs	r3, r2
   177b4:	b2db      	uxtb	r3, r3
}
   177b6:	0018      	movs	r0, r3
   177b8:	46bd      	mov	sp, r7
   177ba:	bd80      	pop	{r7, pc}
   177bc:	41002000 	.word	0x41002000

000177c0 <system_interrupt_enter_critical_section>:
{
   177c0:	b580      	push	{r7, lr}
   177c2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   177c4:	4b02      	ldr	r3, [pc, #8]	; (177d0 <system_interrupt_enter_critical_section+0x10>)
   177c6:	4798      	blx	r3
}
   177c8:	46c0      	nop			; (mov r8, r8)
   177ca:	46bd      	mov	sp, r7
   177cc:	bd80      	pop	{r7, pc}
   177ce:	46c0      	nop			; (mov r8, r8)
   177d0:	000260c9 	.word	0x000260c9

000177d4 <system_interrupt_leave_critical_section>:
{
   177d4:	b580      	push	{r7, lr}
   177d6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   177d8:	4b02      	ldr	r3, [pc, #8]	; (177e4 <system_interrupt_leave_critical_section+0x10>)
   177da:	4798      	blx	r3
}
   177dc:	46c0      	nop			; (mov r8, r8)
   177de:	46bd      	mov	sp, r7
   177e0:	bd80      	pop	{r7, pc}
   177e2:	46c0      	nop			; (mov r8, r8)
   177e4:	0002611d 	.word	0x0002611d

000177e8 <system_interrupt_disable>:
{
   177e8:	b580      	push	{r7, lr}
   177ea:	b082      	sub	sp, #8
   177ec:	af00      	add	r7, sp, #0
   177ee:	0002      	movs	r2, r0
   177f0:	1dfb      	adds	r3, r7, #7
   177f2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   177f4:	4a07      	ldr	r2, [pc, #28]	; (17814 <system_interrupt_disable+0x2c>)
   177f6:	1dfb      	adds	r3, r7, #7
   177f8:	781b      	ldrb	r3, [r3, #0]
   177fa:	0019      	movs	r1, r3
   177fc:	231f      	movs	r3, #31
   177fe:	400b      	ands	r3, r1
   17800:	2101      	movs	r1, #1
   17802:	4099      	lsls	r1, r3
   17804:	000b      	movs	r3, r1
   17806:	0019      	movs	r1, r3
   17808:	2380      	movs	r3, #128	; 0x80
   1780a:	50d1      	str	r1, [r2, r3]
}
   1780c:	46c0      	nop			; (mov r8, r8)
   1780e:	46bd      	mov	sp, r7
   17810:	b002      	add	sp, #8
   17812:	bd80      	pop	{r7, pc}
   17814:	e000e100 	.word	0xe000e100

00017818 <i2c_master_is_syncing>:
{
   17818:	b580      	push	{r7, lr}
   1781a:	b084      	sub	sp, #16
   1781c:	af00      	add	r7, sp, #0
   1781e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   17820:	687b      	ldr	r3, [r7, #4]
   17822:	681b      	ldr	r3, [r3, #0]
   17824:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   17826:	68fb      	ldr	r3, [r7, #12]
   17828:	69db      	ldr	r3, [r3, #28]
   1782a:	2207      	movs	r2, #7
   1782c:	4013      	ands	r3, r2
   1782e:	1e5a      	subs	r2, r3, #1
   17830:	4193      	sbcs	r3, r2
   17832:	b2db      	uxtb	r3, r3
}
   17834:	0018      	movs	r0, r3
   17836:	46bd      	mov	sp, r7
   17838:	b004      	add	sp, #16
   1783a:	bd80      	pop	{r7, pc}

0001783c <_i2c_master_wait_for_sync>:
{
   1783c:	b580      	push	{r7, lr}
   1783e:	b082      	sub	sp, #8
   17840:	af00      	add	r7, sp, #0
   17842:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   17844:	46c0      	nop			; (mov r8, r8)
   17846:	687b      	ldr	r3, [r7, #4]
   17848:	0018      	movs	r0, r3
   1784a:	4b04      	ldr	r3, [pc, #16]	; (1785c <_i2c_master_wait_for_sync+0x20>)
   1784c:	4798      	blx	r3
   1784e:	1e03      	subs	r3, r0, #0
   17850:	d1f9      	bne.n	17846 <_i2c_master_wait_for_sync+0xa>
}
   17852:	46c0      	nop			; (mov r8, r8)
   17854:	46bd      	mov	sp, r7
   17856:	b002      	add	sp, #8
   17858:	bd80      	pop	{r7, pc}
   1785a:	46c0      	nop			; (mov r8, r8)
   1785c:	00017819 	.word	0x00017819

00017860 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   17860:	b580      	push	{r7, lr}
   17862:	b084      	sub	sp, #16
   17864:	af00      	add	r7, sp, #0
   17866:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17868:	687b      	ldr	r3, [r7, #4]
   1786a:	681b      	ldr	r3, [r3, #0]
   1786c:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1786e:	687b      	ldr	r3, [r7, #4]
   17870:	681b      	ldr	r3, [r3, #0]
   17872:	0018      	movs	r0, r3
   17874:	4b0d      	ldr	r3, [pc, #52]	; (178ac <i2c_master_disable+0x4c>)
   17876:	4798      	blx	r3
   17878:	0003      	movs	r3, r0
   1787a:	0018      	movs	r0, r3
   1787c:	4b0c      	ldr	r3, [pc, #48]	; (178b0 <i2c_master_disable+0x50>)
   1787e:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   17880:	687b      	ldr	r3, [r7, #4]
   17882:	0018      	movs	r0, r3
   17884:	4b0b      	ldr	r3, [pc, #44]	; (178b4 <i2c_master_disable+0x54>)
   17886:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   17888:	68fb      	ldr	r3, [r7, #12]
   1788a:	2283      	movs	r2, #131	; 0x83
   1788c:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   1788e:	68fb      	ldr	r3, [r7, #12]
   17890:	2283      	movs	r2, #131	; 0x83
   17892:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   17894:	68fb      	ldr	r3, [r7, #12]
   17896:	681b      	ldr	r3, [r3, #0]
   17898:	2202      	movs	r2, #2
   1789a:	4393      	bics	r3, r2
   1789c:	001a      	movs	r2, r3
   1789e:	68fb      	ldr	r3, [r7, #12]
   178a0:	601a      	str	r2, [r3, #0]

}
   178a2:	46c0      	nop			; (mov r8, r8)
   178a4:	46bd      	mov	sp, r7
   178a6:	b004      	add	sp, #16
   178a8:	bd80      	pop	{r7, pc}
   178aa:	46c0      	nop			; (mov r8, r8)
   178ac:	0002759d 	.word	0x0002759d
   178b0:	000177e9 	.word	0x000177e9
   178b4:	0001783d 	.word	0x0001783d

000178b8 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   178b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   178ba:	b097      	sub	sp, #92	; 0x5c
   178bc:	af00      	add	r7, sp, #0
   178be:	6178      	str	r0, [r7, #20]
   178c0:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   178c2:	2300      	movs	r3, #0
   178c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   178c6:	2300      	movs	r3, #0
   178c8:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   178ca:	2300      	movs	r3, #0
   178cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   178ce:	233b      	movs	r3, #59	; 0x3b
   178d0:	2210      	movs	r2, #16
   178d2:	4694      	mov	ip, r2
   178d4:	44bc      	add	ip, r7
   178d6:	4463      	add	r3, ip
   178d8:	2200      	movs	r2, #0
   178da:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   178dc:	697b      	ldr	r3, [r7, #20]
   178de:	681b      	ldr	r3, [r3, #0]
   178e0:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   178e2:	697b      	ldr	r3, [r7, #20]
   178e4:	681b      	ldr	r3, [r3, #0]
   178e6:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   178e8:	2323      	movs	r3, #35	; 0x23
   178ea:	2210      	movs	r2, #16
   178ec:	18ba      	adds	r2, r7, r2
   178ee:	18d4      	adds	r4, r2, r3
   178f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   178f2:	0018      	movs	r0, r3
   178f4:	4bc0      	ldr	r3, [pc, #768]	; (17bf8 <_i2c_master_set_config+0x340>)
   178f6:	4798      	blx	r3
   178f8:	0003      	movs	r3, r0
   178fa:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   178fc:	230c      	movs	r3, #12
   178fe:	2210      	movs	r2, #16
   17900:	4694      	mov	ip, r2
   17902:	44bc      	add	ip, r7
   17904:	4463      	add	r3, ip
   17906:	0018      	movs	r0, r3
   17908:	4bbc      	ldr	r3, [pc, #752]	; (17bfc <_i2c_master_set_config+0x344>)
   1790a:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   1790c:	693b      	ldr	r3, [r7, #16]
   1790e:	69db      	ldr	r3, [r3, #28]
   17910:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   17912:	693b      	ldr	r3, [r7, #16]
   17914:	6a1b      	ldr	r3, [r3, #32]
   17916:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   17918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1791a:	2b00      	cmp	r3, #0
   1791c:	d106      	bne.n	1792c <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   1791e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17920:	2100      	movs	r1, #0
   17922:	0018      	movs	r0, r3
   17924:	4bb6      	ldr	r3, [pc, #728]	; (17c00 <_i2c_master_set_config+0x348>)
   17926:	4798      	blx	r3
   17928:	0003      	movs	r3, r0
   1792a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   1792c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1792e:	b2da      	uxtb	r2, r3
   17930:	230c      	movs	r3, #12
   17932:	2110      	movs	r1, #16
   17934:	468c      	mov	ip, r1
   17936:	44bc      	add	ip, r7
   17938:	4463      	add	r3, ip
   1793a:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1793c:	230c      	movs	r3, #12
   1793e:	2210      	movs	r2, #16
   17940:	4694      	mov	ip, r2
   17942:	44bc      	add	ip, r7
   17944:	4463      	add	r3, ip
   17946:	2202      	movs	r2, #2
   17948:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   1794a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1794c:	0c1b      	lsrs	r3, r3, #16
   1794e:	b2db      	uxtb	r3, r3
   17950:	220c      	movs	r2, #12
   17952:	2110      	movs	r1, #16
   17954:	468c      	mov	ip, r1
   17956:	44bc      	add	ip, r7
   17958:	4462      	add	r2, ip
   1795a:	0011      	movs	r1, r2
   1795c:	0018      	movs	r0, r3
   1795e:	4ba9      	ldr	r3, [pc, #676]	; (17c04 <_i2c_master_set_config+0x34c>)
   17960:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   17962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17964:	2b00      	cmp	r3, #0
   17966:	d106      	bne.n	17976 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   17968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1796a:	2101      	movs	r1, #1
   1796c:	0018      	movs	r0, r3
   1796e:	4ba4      	ldr	r3, [pc, #656]	; (17c00 <_i2c_master_set_config+0x348>)
   17970:	4798      	blx	r3
   17972:	0003      	movs	r3, r0
   17974:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   17976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17978:	b2da      	uxtb	r2, r3
   1797a:	230c      	movs	r3, #12
   1797c:	2110      	movs	r1, #16
   1797e:	468c      	mov	ip, r1
   17980:	44bc      	add	ip, r7
   17982:	4463      	add	r3, ip
   17984:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17986:	230c      	movs	r3, #12
   17988:	2210      	movs	r2, #16
   1798a:	4694      	mov	ip, r2
   1798c:	44bc      	add	ip, r7
   1798e:	4463      	add	r3, ip
   17990:	2202      	movs	r2, #2
   17992:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   17994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17996:	0c1b      	lsrs	r3, r3, #16
   17998:	b2db      	uxtb	r3, r3
   1799a:	220c      	movs	r2, #12
   1799c:	2110      	movs	r1, #16
   1799e:	468c      	mov	ip, r1
   179a0:	44bc      	add	ip, r7
   179a2:	4462      	add	r2, ip
   179a4:	0011      	movs	r1, r2
   179a6:	0018      	movs	r0, r3
   179a8:	4b96      	ldr	r3, [pc, #600]	; (17c04 <_i2c_master_set_config+0x34c>)
   179aa:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   179ac:	693b      	ldr	r3, [r7, #16]
   179ae:	8a9a      	ldrh	r2, [r3, #20]
   179b0:	697b      	ldr	r3, [r7, #20]
   179b2:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   179b4:	693b      	ldr	r3, [r7, #16]
   179b6:	8ada      	ldrh	r2, [r3, #22]
   179b8:	697b      	ldr	r3, [r7, #20]
   179ba:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   179bc:	693b      	ldr	r3, [r7, #16]
   179be:	7e1b      	ldrb	r3, [r3, #24]
   179c0:	2b00      	cmp	r3, #0
   179c2:	d103      	bne.n	179cc <_i2c_master_set_config+0x114>
   179c4:	4b90      	ldr	r3, [pc, #576]	; (17c08 <_i2c_master_set_config+0x350>)
   179c6:	4798      	blx	r3
   179c8:	1e03      	subs	r3, r0, #0
   179ca:	d002      	beq.n	179d2 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   179cc:	2380      	movs	r3, #128	; 0x80
   179ce:	657b      	str	r3, [r7, #84]	; 0x54
   179d0:	e001      	b.n	179d6 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   179d2:	2300      	movs	r3, #0
   179d4:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   179d6:	693b      	ldr	r3, [r7, #16]
   179d8:	691b      	ldr	r3, [r3, #16]
   179da:	2b00      	cmp	r3, #0
   179dc:	d004      	beq.n	179e8 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   179de:	693b      	ldr	r3, [r7, #16]
   179e0:	691b      	ldr	r3, [r3, #16]
   179e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   179e4:	4313      	orrs	r3, r2
   179e6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   179e8:	693b      	ldr	r3, [r7, #16]
   179ea:	689b      	ldr	r3, [r3, #8]
   179ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   179ee:	4313      	orrs	r3, r2
   179f0:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   179f2:	693b      	ldr	r3, [r7, #16]
   179f4:	2224      	movs	r2, #36	; 0x24
   179f6:	5c9b      	ldrb	r3, [r3, r2]
   179f8:	2b00      	cmp	r3, #0
   179fa:	d004      	beq.n	17a06 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   179fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   179fe:	2280      	movs	r2, #128	; 0x80
   17a00:	05d2      	lsls	r2, r2, #23
   17a02:	4313      	orrs	r3, r2
   17a04:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   17a06:	693b      	ldr	r3, [r7, #16]
   17a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17a0a:	2b00      	cmp	r3, #0
   17a0c:	d004      	beq.n	17a18 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   17a0e:	693b      	ldr	r3, [r7, #16]
   17a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17a12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17a14:	4313      	orrs	r3, r2
   17a16:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   17a18:	693b      	ldr	r3, [r7, #16]
   17a1a:	222c      	movs	r2, #44	; 0x2c
   17a1c:	5c9b      	ldrb	r3, [r3, r2]
   17a1e:	2b00      	cmp	r3, #0
   17a20:	d105      	bne.n	17a2e <_i2c_master_set_config+0x176>
   17a22:	693b      	ldr	r3, [r7, #16]
   17a24:	689a      	ldr	r2, [r3, #8]
   17a26:	2380      	movs	r3, #128	; 0x80
   17a28:	049b      	lsls	r3, r3, #18
   17a2a:	429a      	cmp	r2, r3
   17a2c:	d104      	bne.n	17a38 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   17a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17a30:	2280      	movs	r2, #128	; 0x80
   17a32:	0512      	lsls	r2, r2, #20
   17a34:	4313      	orrs	r3, r2
   17a36:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   17a38:	693b      	ldr	r3, [r7, #16]
   17a3a:	222d      	movs	r2, #45	; 0x2d
   17a3c:	5c9b      	ldrb	r3, [r3, r2]
   17a3e:	2b00      	cmp	r3, #0
   17a40:	d004      	beq.n	17a4c <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   17a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17a44:	2280      	movs	r2, #128	; 0x80
   17a46:	0412      	lsls	r2, r2, #16
   17a48:	4313      	orrs	r3, r2
   17a4a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   17a4c:	693b      	ldr	r3, [r7, #16]
   17a4e:	222e      	movs	r2, #46	; 0x2e
   17a50:	5c9b      	ldrb	r3, [r3, r2]
   17a52:	2b00      	cmp	r3, #0
   17a54:	d004      	beq.n	17a60 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   17a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17a58:	2280      	movs	r2, #128	; 0x80
   17a5a:	03d2      	lsls	r2, r2, #15
   17a5c:	4313      	orrs	r3, r2
   17a5e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   17a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17a62:	681a      	ldr	r2, [r3, #0]
   17a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17a66:	431a      	orrs	r2, r3
   17a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17a6a:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   17a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17a6e:	2280      	movs	r2, #128	; 0x80
   17a70:	0052      	lsls	r2, r2, #1
   17a72:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   17a74:	2323      	movs	r3, #35	; 0x23
   17a76:	2210      	movs	r2, #16
   17a78:	4694      	mov	ip, r2
   17a7a:	44bc      	add	ip, r7
   17a7c:	4463      	add	r3, ip
   17a7e:	781b      	ldrb	r3, [r3, #0]
   17a80:	3314      	adds	r3, #20
   17a82:	b2db      	uxtb	r3, r3
   17a84:	0018      	movs	r0, r3
   17a86:	4b61      	ldr	r3, [pc, #388]	; (17c0c <_i2c_master_set_config+0x354>)
   17a88:	4798      	blx	r3
   17a8a:	0003      	movs	r3, r0
   17a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   17a8e:	693b      	ldr	r3, [r7, #16]
   17a90:	681b      	ldr	r3, [r3, #0]
   17a92:	22fa      	movs	r2, #250	; 0xfa
   17a94:	0092      	lsls	r2, r2, #2
   17a96:	4353      	muls	r3, r2
   17a98:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   17a9a:	693b      	ldr	r3, [r7, #16]
   17a9c:	685b      	ldr	r3, [r3, #4]
   17a9e:	22fa      	movs	r2, #250	; 0xfa
   17aa0:	0092      	lsls	r2, r2, #2
   17aa2:	4353      	muls	r3, r2
   17aa4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   17aa6:	693b      	ldr	r3, [r7, #16]
   17aa8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   17aaa:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   17aac:	4b58      	ldr	r3, [pc, #352]	; (17c10 <_i2c_master_set_config+0x358>)
   17aae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17ab0:	4798      	blx	r3
   17ab2:	0005      	movs	r5, r0
   17ab4:	000e      	movs	r6, r1
   17ab6:	4b56      	ldr	r3, [pc, #344]	; (17c10 <_i2c_master_set_config+0x358>)
   17ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   17aba:	4798      	blx	r3
   17abc:	60b8      	str	r0, [r7, #8]
   17abe:	60f9      	str	r1, [r7, #12]
   17ac0:	4b53      	ldr	r3, [pc, #332]	; (17c10 <_i2c_master_set_config+0x358>)
   17ac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17ac4:	4798      	blx	r3
   17ac6:	4c53      	ldr	r4, [pc, #332]	; (17c14 <_i2c_master_set_config+0x35c>)
   17ac8:	4a53      	ldr	r2, [pc, #332]	; (17c18 <_i2c_master_set_config+0x360>)
   17aca:	4b54      	ldr	r3, [pc, #336]	; (17c1c <_i2c_master_set_config+0x364>)
   17acc:	47a0      	blx	r4
   17ace:	0003      	movs	r3, r0
   17ad0:	000c      	movs	r4, r1
   17ad2:	603b      	str	r3, [r7, #0]
   17ad4:	607c      	str	r4, [r7, #4]
   17ad6:	4b4e      	ldr	r3, [pc, #312]	; (17c10 <_i2c_master_set_config+0x358>)
   17ad8:	6a38      	ldr	r0, [r7, #32]
   17ada:	4798      	blx	r3
   17adc:	0002      	movs	r2, r0
   17ade:	000b      	movs	r3, r1
   17ae0:	4c4c      	ldr	r4, [pc, #304]	; (17c14 <_i2c_master_set_config+0x35c>)
   17ae2:	6838      	ldr	r0, [r7, #0]
   17ae4:	6879      	ldr	r1, [r7, #4]
   17ae6:	47a0      	blx	r4
   17ae8:	0003      	movs	r3, r0
   17aea:	000c      	movs	r4, r1
   17aec:	0018      	movs	r0, r3
   17aee:	0021      	movs	r1, r4
   17af0:	4c4b      	ldr	r4, [pc, #300]	; (17c20 <_i2c_master_set_config+0x368>)
   17af2:	2200      	movs	r2, #0
   17af4:	4b4b      	ldr	r3, [pc, #300]	; (17c24 <_i2c_master_set_config+0x36c>)
   17af6:	47a0      	blx	r4
   17af8:	0003      	movs	r3, r0
   17afa:	000c      	movs	r4, r1
   17afc:	001a      	movs	r2, r3
   17afe:	0023      	movs	r3, r4
   17b00:	4c44      	ldr	r4, [pc, #272]	; (17c14 <_i2c_master_set_config+0x35c>)
   17b02:	68b8      	ldr	r0, [r7, #8]
   17b04:	68f9      	ldr	r1, [r7, #12]
   17b06:	47a0      	blx	r4
   17b08:	0003      	movs	r3, r0
   17b0a:	000c      	movs	r4, r1
   17b0c:	001a      	movs	r2, r3
   17b0e:	0023      	movs	r3, r4
   17b10:	4c45      	ldr	r4, [pc, #276]	; (17c28 <_i2c_master_set_config+0x370>)
   17b12:	0028      	movs	r0, r5
   17b14:	0031      	movs	r1, r6
   17b16:	47a0      	blx	r4
   17b18:	0003      	movs	r3, r0
   17b1a:	000c      	movs	r4, r1
   17b1c:	001d      	movs	r5, r3
   17b1e:	0026      	movs	r6, r4
   17b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b22:	005a      	lsls	r2, r3, #1
   17b24:	4b3a      	ldr	r3, [pc, #232]	; (17c10 <_i2c_master_set_config+0x358>)
   17b26:	0010      	movs	r0, r2
   17b28:	4798      	blx	r3
   17b2a:	0002      	movs	r2, r0
   17b2c:	000b      	movs	r3, r1
   17b2e:	4c3c      	ldr	r4, [pc, #240]	; (17c20 <_i2c_master_set_config+0x368>)
   17b30:	0028      	movs	r0, r5
   17b32:	0031      	movs	r1, r6
   17b34:	47a0      	blx	r4
   17b36:	0003      	movs	r3, r0
   17b38:	000c      	movs	r4, r1
   17b3a:	0018      	movs	r0, r3
   17b3c:	0021      	movs	r1, r4
   17b3e:	4c3a      	ldr	r4, [pc, #232]	; (17c28 <_i2c_master_set_config+0x370>)
   17b40:	2200      	movs	r2, #0
   17b42:	4b3a      	ldr	r3, [pc, #232]	; (17c2c <_i2c_master_set_config+0x374>)
   17b44:	47a0      	blx	r4
   17b46:	0003      	movs	r3, r0
   17b48:	000c      	movs	r4, r1
   17b4a:	001d      	movs	r5, r3
   17b4c:	0026      	movs	r6, r4
   17b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b50:	005a      	lsls	r2, r3, #1
   17b52:	4b2f      	ldr	r3, [pc, #188]	; (17c10 <_i2c_master_set_config+0x358>)
   17b54:	0010      	movs	r0, r2
   17b56:	4798      	blx	r3
   17b58:	0002      	movs	r2, r0
   17b5a:	000b      	movs	r3, r1
   17b5c:	4c34      	ldr	r4, [pc, #208]	; (17c30 <_i2c_master_set_config+0x378>)
   17b5e:	0028      	movs	r0, r5
   17b60:	0031      	movs	r1, r6
   17b62:	47a0      	blx	r4
   17b64:	0003      	movs	r3, r0
   17b66:	000c      	movs	r4, r1
   17b68:	0019      	movs	r1, r3
   17b6a:	0022      	movs	r2, r4
   17b6c:	4b31      	ldr	r3, [pc, #196]	; (17c34 <_i2c_master_set_config+0x37c>)
   17b6e:	0008      	movs	r0, r1
   17b70:	0011      	movs	r1, r2
   17b72:	4798      	blx	r3
   17b74:	0003      	movs	r3, r0
   17b76:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   17b78:	693b      	ldr	r3, [r7, #16]
   17b7a:	689a      	ldr	r2, [r3, #8]
   17b7c:	2380      	movs	r3, #128	; 0x80
   17b7e:	049b      	lsls	r3, r3, #18
   17b80:	429a      	cmp	r2, r3
   17b82:	d16a      	bne.n	17c5a <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   17b84:	4b22      	ldr	r3, [pc, #136]	; (17c10 <_i2c_master_set_config+0x358>)
   17b86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17b88:	4798      	blx	r3
   17b8a:	4c25      	ldr	r4, [pc, #148]	; (17c20 <_i2c_master_set_config+0x368>)
   17b8c:	0002      	movs	r2, r0
   17b8e:	000b      	movs	r3, r1
   17b90:	47a0      	blx	r4
   17b92:	0003      	movs	r3, r0
   17b94:	000c      	movs	r4, r1
   17b96:	001d      	movs	r5, r3
   17b98:	0026      	movs	r6, r4
   17b9a:	4b1d      	ldr	r3, [pc, #116]	; (17c10 <_i2c_master_set_config+0x358>)
   17b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   17b9e:	4798      	blx	r3
   17ba0:	4c1c      	ldr	r4, [pc, #112]	; (17c14 <_i2c_master_set_config+0x35c>)
   17ba2:	2200      	movs	r2, #0
   17ba4:	4b24      	ldr	r3, [pc, #144]	; (17c38 <_i2c_master_set_config+0x380>)
   17ba6:	47a0      	blx	r4
   17ba8:	0003      	movs	r3, r0
   17baa:	000c      	movs	r4, r1
   17bac:	001a      	movs	r2, r3
   17bae:	0023      	movs	r3, r4
   17bb0:	4c1f      	ldr	r4, [pc, #124]	; (17c30 <_i2c_master_set_config+0x378>)
   17bb2:	0028      	movs	r0, r5
   17bb4:	0031      	movs	r1, r6
   17bb6:	47a0      	blx	r4
   17bb8:	0003      	movs	r3, r0
   17bba:	000c      	movs	r4, r1
   17bbc:	0018      	movs	r0, r3
   17bbe:	0021      	movs	r1, r4
   17bc0:	4c19      	ldr	r4, [pc, #100]	; (17c28 <_i2c_master_set_config+0x370>)
   17bc2:	2200      	movs	r2, #0
   17bc4:	4b19      	ldr	r3, [pc, #100]	; (17c2c <_i2c_master_set_config+0x374>)
   17bc6:	47a0      	blx	r4
   17bc8:	0003      	movs	r3, r0
   17bca:	000c      	movs	r4, r1
   17bcc:	0019      	movs	r1, r3
   17bce:	0022      	movs	r2, r4
   17bd0:	4b18      	ldr	r3, [pc, #96]	; (17c34 <_i2c_master_set_config+0x37c>)
   17bd2:	0008      	movs	r0, r1
   17bd4:	0011      	movs	r1, r2
   17bd6:	4798      	blx	r3
   17bd8:	0003      	movs	r3, r0
   17bda:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   17bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17bde:	2b00      	cmp	r3, #0
   17be0:	d02e      	beq.n	17c40 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   17be2:	4b16      	ldr	r3, [pc, #88]	; (17c3c <_i2c_master_set_config+0x384>)
   17be4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17be6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17be8:	4798      	blx	r3
   17bea:	0003      	movs	r3, r0
   17bec:	1e9a      	subs	r2, r3, #2
   17bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17bf0:	1ad3      	subs	r3, r2, r3
   17bf2:	653b      	str	r3, [r7, #80]	; 0x50
   17bf4:	e031      	b.n	17c5a <_i2c_master_set_config+0x3a2>
   17bf6:	46c0      	nop			; (mov r8, r8)
   17bf8:	000274cd 	.word	0x000274cd
   17bfc:	00017779 	.word	0x00017779
   17c00:	00027311 	.word	0x00027311
   17c04:	0002a0bd 	.word	0x0002a0bd
   17c08:	000177a1 	.word	0x000177a1
   17c0c:	00029e81 	.word	0x00029e81
   17c10:	00034741 	.word	0x00034741
   17c14:	00033bad 	.word	0x00033bad
   17c18:	e826d695 	.word	0xe826d695
   17c1c:	3e112e0b 	.word	0x3e112e0b
   17c20:	00032f25 	.word	0x00032f25
   17c24:	40240000 	.word	0x40240000
   17c28:	000340ad 	.word	0x000340ad
   17c2c:	3ff00000 	.word	0x3ff00000
   17c30:	00033545 	.word	0x00033545
   17c34:	000346d9 	.word	0x000346d9
   17c38:	40080000 	.word	0x40080000
   17c3c:	000328c5 	.word	0x000328c5
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   17c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17c42:	005a      	lsls	r2, r3, #1
   17c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17c46:	18d3      	adds	r3, r2, r3
   17c48:	1e5a      	subs	r2, r3, #1
   17c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17c4c:	0059      	lsls	r1, r3, #1
   17c4e:	4b1d      	ldr	r3, [pc, #116]	; (17cc4 <_i2c_master_set_config+0x40c>)
   17c50:	0010      	movs	r0, r2
   17c52:	4798      	blx	r3
   17c54:	0003      	movs	r3, r0
   17c56:	3b01      	subs	r3, #1
   17c58:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   17c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17c5c:	2bff      	cmp	r3, #255	; 0xff
   17c5e:	dc08      	bgt.n	17c72 <_i2c_master_set_config+0x3ba>
   17c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17c62:	2b00      	cmp	r3, #0
   17c64:	db05      	blt.n	17c72 <_i2c_master_set_config+0x3ba>
   17c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17c68:	2bff      	cmp	r3, #255	; 0xff
   17c6a:	dc02      	bgt.n	17c72 <_i2c_master_set_config+0x3ba>
   17c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17c6e:	2b00      	cmp	r3, #0
   17c70:	da06      	bge.n	17c80 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   17c72:	233b      	movs	r3, #59	; 0x3b
   17c74:	2210      	movs	r2, #16
   17c76:	4694      	mov	ip, r2
   17c78:	44bc      	add	ip, r7
   17c7a:	4463      	add	r3, ip
   17c7c:	2240      	movs	r2, #64	; 0x40
   17c7e:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   17c80:	233b      	movs	r3, #59	; 0x3b
   17c82:	2210      	movs	r2, #16
   17c84:	4694      	mov	ip, r2
   17c86:	44bc      	add	ip, r7
   17c88:	4463      	add	r3, ip
   17c8a:	781b      	ldrb	r3, [r3, #0]
   17c8c:	2b40      	cmp	r3, #64	; 0x40
   17c8e:	d00e      	beq.n	17cae <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17c92:	22ff      	movs	r2, #255	; 0xff
   17c94:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   17c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17c98:	041b      	lsls	r3, r3, #16
   17c9a:	0019      	movs	r1, r3
   17c9c:	23ff      	movs	r3, #255	; 0xff
   17c9e:	041b      	lsls	r3, r3, #16
   17ca0:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17ca2:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   17ca4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   17ca6:	0612      	lsls	r2, r2, #24
   17ca8:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17cac:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   17cae:	233b      	movs	r3, #59	; 0x3b
   17cb0:	2210      	movs	r2, #16
   17cb2:	4694      	mov	ip, r2
   17cb4:	44bc      	add	ip, r7
   17cb6:	4463      	add	r3, ip
   17cb8:	781b      	ldrb	r3, [r3, #0]
}
   17cba:	0018      	movs	r0, r3
   17cbc:	46bd      	mov	sp, r7
   17cbe:	b017      	add	sp, #92	; 0x5c
   17cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17cc2:	46c0      	nop			; (mov r8, r8)
   17cc4:	000328c5 	.word	0x000328c5

00017cc8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   17cc8:	b590      	push	{r4, r7, lr}
   17cca:	b08b      	sub	sp, #44	; 0x2c
   17ccc:	af00      	add	r7, sp, #0
   17cce:	60f8      	str	r0, [r7, #12]
   17cd0:	60b9      	str	r1, [r7, #8]
   17cd2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   17cd4:	68fb      	ldr	r3, [r7, #12]
   17cd6:	68ba      	ldr	r2, [r7, #8]
   17cd8:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17cda:	68fb      	ldr	r3, [r7, #12]
   17cdc:	681b      	ldr	r3, [r3, #0]
   17cde:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17ce0:	68fb      	ldr	r3, [r7, #12]
   17ce2:	681b      	ldr	r3, [r3, #0]
   17ce4:	0018      	movs	r0, r3
   17ce6:	4b3b      	ldr	r3, [pc, #236]	; (17dd4 <i2c_master_init+0x10c>)
   17ce8:	4798      	blx	r3
   17cea:	0003      	movs	r3, r0
   17cec:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   17cee:	6a3b      	ldr	r3, [r7, #32]
   17cf0:	3302      	adds	r3, #2
   17cf2:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   17cf4:	6a3b      	ldr	r3, [r7, #32]
   17cf6:	3314      	adds	r3, #20
   17cf8:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   17cfa:	2201      	movs	r2, #1
   17cfc:	69fb      	ldr	r3, [r7, #28]
   17cfe:	409a      	lsls	r2, r3
   17d00:	0013      	movs	r3, r2
   17d02:	0019      	movs	r1, r3
   17d04:	2002      	movs	r0, #2
   17d06:	4b34      	ldr	r3, [pc, #208]	; (17dd8 <i2c_master_init+0x110>)
   17d08:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   17d0a:	2314      	movs	r3, #20
   17d0c:	18fb      	adds	r3, r7, r3
   17d0e:	0018      	movs	r0, r3
   17d10:	4b32      	ldr	r3, [pc, #200]	; (17ddc <i2c_master_init+0x114>)
   17d12:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   17d14:	687b      	ldr	r3, [r7, #4]
   17d16:	7b1a      	ldrb	r2, [r3, #12]
   17d18:	2314      	movs	r3, #20
   17d1a:	18fb      	adds	r3, r7, r3
   17d1c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   17d1e:	69bb      	ldr	r3, [r7, #24]
   17d20:	b2db      	uxtb	r3, r3
   17d22:	2214      	movs	r2, #20
   17d24:	18ba      	adds	r2, r7, r2
   17d26:	0011      	movs	r1, r2
   17d28:	0018      	movs	r0, r3
   17d2a:	4b2d      	ldr	r3, [pc, #180]	; (17de0 <i2c_master_init+0x118>)
   17d2c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   17d2e:	69bb      	ldr	r3, [r7, #24]
   17d30:	b2db      	uxtb	r3, r3
   17d32:	0018      	movs	r0, r3
   17d34:	4b2b      	ldr	r3, [pc, #172]	; (17de4 <i2c_master_init+0x11c>)
   17d36:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   17d38:	687b      	ldr	r3, [r7, #4]
   17d3a:	7b1b      	ldrb	r3, [r3, #12]
   17d3c:	2100      	movs	r1, #0
   17d3e:	0018      	movs	r0, r3
   17d40:	4b29      	ldr	r3, [pc, #164]	; (17de8 <i2c_master_init+0x120>)
   17d42:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   17d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17d46:	681b      	ldr	r3, [r3, #0]
   17d48:	2202      	movs	r2, #2
   17d4a:	4013      	ands	r3, r2
   17d4c:	d001      	beq.n	17d52 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   17d4e:	231c      	movs	r3, #28
   17d50:	e03b      	b.n	17dca <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   17d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17d54:	681b      	ldr	r3, [r3, #0]
   17d56:	2201      	movs	r2, #1
   17d58:	4013      	ands	r3, r2
   17d5a:	d001      	beq.n	17d60 <i2c_master_init+0x98>
		return STATUS_BUSY;
   17d5c:	2305      	movs	r3, #5
   17d5e:	e034      	b.n	17dca <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   17d60:	68fb      	ldr	r3, [r7, #12]
   17d62:	681b      	ldr	r3, [r3, #0]
   17d64:	2217      	movs	r2, #23
   17d66:	18bc      	adds	r4, r7, r2
   17d68:	0018      	movs	r0, r3
   17d6a:	4b1a      	ldr	r3, [pc, #104]	; (17dd4 <i2c_master_init+0x10c>)
   17d6c:	4798      	blx	r3
   17d6e:	0003      	movs	r3, r0
   17d70:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   17d72:	4a1e      	ldr	r2, [pc, #120]	; (17dec <i2c_master_init+0x124>)
   17d74:	2317      	movs	r3, #23
   17d76:	18fb      	adds	r3, r7, r3
   17d78:	781b      	ldrb	r3, [r3, #0]
   17d7a:	0011      	movs	r1, r2
   17d7c:	0018      	movs	r0, r3
   17d7e:	4b1c      	ldr	r3, [pc, #112]	; (17df0 <i2c_master_init+0x128>)
   17d80:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   17d82:	2317      	movs	r3, #23
   17d84:	18fb      	adds	r3, r7, r3
   17d86:	781a      	ldrb	r2, [r3, #0]
   17d88:	4b1a      	ldr	r3, [pc, #104]	; (17df4 <i2c_master_init+0x12c>)
   17d8a:	0092      	lsls	r2, r2, #2
   17d8c:	68f9      	ldr	r1, [r7, #12]
   17d8e:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   17d90:	68fb      	ldr	r3, [r7, #12]
   17d92:	2200      	movs	r2, #0
   17d94:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   17d96:	68fb      	ldr	r3, [r7, #12]
   17d98:	2200      	movs	r2, #0
   17d9a:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   17d9c:	68fb      	ldr	r3, [r7, #12]
   17d9e:	2200      	movs	r2, #0
   17da0:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   17da2:	68fb      	ldr	r3, [r7, #12]
   17da4:	2200      	movs	r2, #0
   17da6:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   17da8:	68fb      	ldr	r3, [r7, #12]
   17daa:	2225      	movs	r2, #37	; 0x25
   17dac:	2100      	movs	r1, #0
   17dae:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   17db0:	68fb      	ldr	r3, [r7, #12]
   17db2:	2200      	movs	r2, #0
   17db4:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   17db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17db8:	2214      	movs	r2, #20
   17dba:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   17dbc:	687a      	ldr	r2, [r7, #4]
   17dbe:	68fb      	ldr	r3, [r7, #12]
   17dc0:	0011      	movs	r1, r2
   17dc2:	0018      	movs	r0, r3
   17dc4:	4b0c      	ldr	r3, [pc, #48]	; (17df8 <i2c_master_init+0x130>)
   17dc6:	4798      	blx	r3
   17dc8:	0003      	movs	r3, r0
}
   17dca:	0018      	movs	r0, r3
   17dcc:	46bd      	mov	sp, r7
   17dce:	b00b      	add	sp, #44	; 0x2c
   17dd0:	bd90      	pop	{r4, r7, pc}
   17dd2:	46c0      	nop			; (mov r8, r8)
   17dd4:	000274cd 	.word	0x000274cd
   17dd8:	0001771d 	.word	0x0001771d
   17ddc:	00017705 	.word	0x00017705
   17de0:	00029d5d 	.word	0x00029d5d
   17de4:	00029da1 	.word	0x00029da1
   17de8:	00027285 	.word	0x00027285
   17dec:	00012bcd 	.word	0x00012bcd
   17df0:	00027531 	.word	0x00027531
   17df4:	20005794 	.word	0x20005794
   17df8:	000178b9 	.word	0x000178b9

00017dfc <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   17dfc:	b580      	push	{r7, lr}
   17dfe:	b084      	sub	sp, #16
   17e00:	af00      	add	r7, sp, #0
   17e02:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17e04:	687b      	ldr	r3, [r7, #4]
   17e06:	681b      	ldr	r3, [r3, #0]
   17e08:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   17e0a:	687b      	ldr	r3, [r7, #4]
   17e0c:	0018      	movs	r0, r3
   17e0e:	4b0f      	ldr	r3, [pc, #60]	; (17e4c <i2c_master_reset+0x50>)
   17e10:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   17e12:	687b      	ldr	r3, [r7, #4]
   17e14:	0018      	movs	r0, r3
   17e16:	4b0e      	ldr	r3, [pc, #56]	; (17e50 <i2c_master_reset+0x54>)
   17e18:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   17e1a:	4b0e      	ldr	r3, [pc, #56]	; (17e54 <i2c_master_reset+0x58>)
   17e1c:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   17e1e:	687b      	ldr	r3, [r7, #4]
   17e20:	681b      	ldr	r3, [r3, #0]
   17e22:	0018      	movs	r0, r3
   17e24:	4b0c      	ldr	r3, [pc, #48]	; (17e58 <i2c_master_reset+0x5c>)
   17e26:	4798      	blx	r3
   17e28:	0003      	movs	r3, r0
   17e2a:	0018      	movs	r0, r3
   17e2c:	4b0b      	ldr	r3, [pc, #44]	; (17e5c <i2c_master_reset+0x60>)
   17e2e:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   17e30:	4b0b      	ldr	r3, [pc, #44]	; (17e60 <i2c_master_reset+0x64>)
   17e32:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   17e34:	687b      	ldr	r3, [r7, #4]
   17e36:	0018      	movs	r0, r3
   17e38:	4b04      	ldr	r3, [pc, #16]	; (17e4c <i2c_master_reset+0x50>)
   17e3a:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   17e3c:	68fb      	ldr	r3, [r7, #12]
   17e3e:	2201      	movs	r2, #1
   17e40:	601a      	str	r2, [r3, #0]
}
   17e42:	46c0      	nop			; (mov r8, r8)
   17e44:	46bd      	mov	sp, r7
   17e46:	b004      	add	sp, #16
   17e48:	bd80      	pop	{r7, pc}
   17e4a:	46c0      	nop			; (mov r8, r8)
   17e4c:	0001783d 	.word	0x0001783d
   17e50:	00017861 	.word	0x00017861
   17e54:	000177c1 	.word	0x000177c1
   17e58:	0002759d 	.word	0x0002759d
   17e5c:	00029ed9 	.word	0x00029ed9
   17e60:	000177d5 	.word	0x000177d5

00017e64 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   17e64:	b580      	push	{r7, lr}
   17e66:	b084      	sub	sp, #16
   17e68:	af00      	add	r7, sp, #0
   17e6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17e6c:	687b      	ldr	r3, [r7, #4]
   17e6e:	681b      	ldr	r3, [r3, #0]
   17e70:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   17e72:	68fb      	ldr	r3, [r7, #12]
   17e74:	7e1b      	ldrb	r3, [r3, #24]
   17e76:	b2db      	uxtb	r3, r3
   17e78:	001a      	movs	r2, r3
   17e7a:	2302      	movs	r3, #2
   17e7c:	4013      	ands	r3, r2
   17e7e:	d00b      	beq.n	17e98 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   17e80:	68fb      	ldr	r3, [r7, #12]
   17e82:	2202      	movs	r2, #2
   17e84:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   17e86:	68fb      	ldr	r3, [r7, #12]
   17e88:	8b5b      	ldrh	r3, [r3, #26]
   17e8a:	b29b      	uxth	r3, r3
   17e8c:	001a      	movs	r2, r3
   17e8e:	2302      	movs	r3, #2
   17e90:	4013      	ands	r3, r2
   17e92:	d011      	beq.n	17eb8 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   17e94:	2341      	movs	r3, #65	; 0x41
   17e96:	e010      	b.n	17eba <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   17e98:	68fb      	ldr	r3, [r7, #12]
   17e9a:	8b5b      	ldrh	r3, [r3, #26]
   17e9c:	b29b      	uxth	r3, r3
   17e9e:	001a      	movs	r2, r3
   17ea0:	2304      	movs	r3, #4
   17ea2:	4013      	ands	r3, r2
   17ea4:	d008      	beq.n	17eb8 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   17ea6:	68fb      	ldr	r3, [r7, #12]
   17ea8:	685b      	ldr	r3, [r3, #4]
   17eaa:	22c0      	movs	r2, #192	; 0xc0
   17eac:	0292      	lsls	r2, r2, #10
   17eae:	431a      	orrs	r2, r3
   17eb0:	68fb      	ldr	r3, [r7, #12]
   17eb2:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   17eb4:	2318      	movs	r3, #24
   17eb6:	e000      	b.n	17eba <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   17eb8:	2300      	movs	r3, #0
}
   17eba:	0018      	movs	r0, r3
   17ebc:	46bd      	mov	sp, r7
   17ebe:	b004      	add	sp, #16
   17ec0:	bd80      	pop	{r7, pc}

00017ec2 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   17ec2:	b580      	push	{r7, lr}
   17ec4:	b084      	sub	sp, #16
   17ec6:	af00      	add	r7, sp, #0
   17ec8:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17eca:	687b      	ldr	r3, [r7, #4]
   17ecc:	681b      	ldr	r3, [r3, #0]
   17ece:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   17ed0:	230e      	movs	r3, #14
   17ed2:	18fb      	adds	r3, r7, r3
   17ed4:	2200      	movs	r2, #0
   17ed6:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17ed8:	e00f      	b.n	17efa <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   17eda:	230e      	movs	r3, #14
   17edc:	18fb      	adds	r3, r7, r3
   17ede:	220e      	movs	r2, #14
   17ee0:	18ba      	adds	r2, r7, r2
   17ee2:	8812      	ldrh	r2, [r2, #0]
   17ee4:	3201      	adds	r2, #1
   17ee6:	801a      	strh	r2, [r3, #0]
   17ee8:	687b      	ldr	r3, [r7, #4]
   17eea:	891b      	ldrh	r3, [r3, #8]
   17eec:	220e      	movs	r2, #14
   17eee:	18ba      	adds	r2, r7, r2
   17ef0:	8812      	ldrh	r2, [r2, #0]
   17ef2:	429a      	cmp	r2, r3
   17ef4:	d301      	bcc.n	17efa <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   17ef6:	2312      	movs	r3, #18
   17ef8:	e00e      	b.n	17f18 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17efa:	68bb      	ldr	r3, [r7, #8]
   17efc:	7e1b      	ldrb	r3, [r3, #24]
   17efe:	b2db      	uxtb	r3, r3
   17f00:	001a      	movs	r2, r3
   17f02:	2301      	movs	r3, #1
   17f04:	4013      	ands	r3, r2
   17f06:	d106      	bne.n	17f16 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   17f08:	68bb      	ldr	r3, [r7, #8]
   17f0a:	7e1b      	ldrb	r3, [r3, #24]
   17f0c:	b2db      	uxtb	r3, r3
   17f0e:	001a      	movs	r2, r3
   17f10:	2302      	movs	r3, #2
   17f12:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17f14:	d0e1      	beq.n	17eda <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   17f16:	2300      	movs	r3, #0
}
   17f18:	0018      	movs	r0, r3
   17f1a:	46bd      	mov	sp, r7
   17f1c:	b004      	add	sp, #16
   17f1e:	bd80      	pop	{r7, pc}

00017f20 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   17f20:	b590      	push	{r4, r7, lr}
   17f22:	b085      	sub	sp, #20
   17f24:	af00      	add	r7, sp, #0
   17f26:	6078      	str	r0, [r7, #4]
   17f28:	000a      	movs	r2, r1
   17f2a:	1cfb      	adds	r3, r7, #3
   17f2c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17f2e:	687b      	ldr	r3, [r7, #4]
   17f30:	681b      	ldr	r3, [r3, #0]
   17f32:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   17f34:	68fb      	ldr	r3, [r7, #12]
   17f36:	685b      	ldr	r3, [r3, #4]
   17f38:	2280      	movs	r2, #128	; 0x80
   17f3a:	02d2      	lsls	r2, r2, #11
   17f3c:	431a      	orrs	r2, r3
   17f3e:	68fb      	ldr	r3, [r7, #12]
   17f40:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   17f42:	1cfb      	adds	r3, r7, #3
   17f44:	781a      	ldrb	r2, [r3, #0]
   17f46:	68fb      	ldr	r3, [r7, #12]
   17f48:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   17f4a:	230b      	movs	r3, #11
   17f4c:	18fc      	adds	r4, r7, r3
   17f4e:	687b      	ldr	r3, [r7, #4]
   17f50:	0018      	movs	r0, r3
   17f52:	4b07      	ldr	r3, [pc, #28]	; (17f70 <_i2c_master_send_hs_master_code+0x50>)
   17f54:	4798      	blx	r3
   17f56:	0003      	movs	r3, r0
   17f58:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   17f5a:	68fb      	ldr	r3, [r7, #12]
   17f5c:	2201      	movs	r2, #1
   17f5e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   17f60:	230b      	movs	r3, #11
   17f62:	18fb      	adds	r3, r7, r3
   17f64:	781b      	ldrb	r3, [r3, #0]
}
   17f66:	0018      	movs	r0, r3
   17f68:	46bd      	mov	sp, r7
   17f6a:	b005      	add	sp, #20
   17f6c:	bd90      	pop	{r4, r7, pc}
   17f6e:	46c0      	nop			; (mov r8, r8)
   17f70:	00017ec3 	.word	0x00017ec3

00017f74 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   17f74:	b580      	push	{r7, lr}
   17f76:	af00      	add	r7, sp, #0
   17f78:	2000      	movs	r0, #0
   17f7a:	4b02      	ldr	r3, [pc, #8]	; (17f84 <TC3_Handler+0x10>)
   17f7c:	4798      	blx	r3
   17f7e:	46c0      	nop			; (mov r8, r8)
   17f80:	46bd      	mov	sp, r7
   17f82:	bd80      	pop	{r7, pc}
   17f84:	00017fb1 	.word	0x00017fb1

00017f88 <TC4_Handler>:
   17f88:	b580      	push	{r7, lr}
   17f8a:	af00      	add	r7, sp, #0
   17f8c:	2001      	movs	r0, #1
   17f8e:	4b02      	ldr	r3, [pc, #8]	; (17f98 <TC4_Handler+0x10>)
   17f90:	4798      	blx	r3
   17f92:	46c0      	nop			; (mov r8, r8)
   17f94:	46bd      	mov	sp, r7
   17f96:	bd80      	pop	{r7, pc}
   17f98:	00017fb1 	.word	0x00017fb1

00017f9c <TC5_Handler>:
   17f9c:	b580      	push	{r7, lr}
   17f9e:	af00      	add	r7, sp, #0
   17fa0:	2002      	movs	r0, #2
   17fa2:	4b02      	ldr	r3, [pc, #8]	; (17fac <TC5_Handler+0x10>)
   17fa4:	4798      	blx	r3
   17fa6:	46c0      	nop			; (mov r8, r8)
   17fa8:	46bd      	mov	sp, r7
   17faa:	bd80      	pop	{r7, pc}
   17fac:	00017fb1 	.word	0x00017fb1

00017fb0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   17fb0:	b580      	push	{r7, lr}
   17fb2:	b084      	sub	sp, #16
   17fb4:	af00      	add	r7, sp, #0
   17fb6:	0002      	movs	r2, r0
   17fb8:	1dfb      	adds	r3, r7, #7
   17fba:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   17fbc:	1dfb      	adds	r3, r7, #7
   17fbe:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   17fc0:	4b28      	ldr	r3, [pc, #160]	; (18064 <_tc_interrupt_handler+0xb4>)
   17fc2:	0092      	lsls	r2, r2, #2
   17fc4:	58d3      	ldr	r3, [r2, r3]
   17fc6:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17fc8:	68fb      	ldr	r3, [r7, #12]
   17fca:	681b      	ldr	r3, [r3, #0]
   17fcc:	7b9b      	ldrb	r3, [r3, #14]
   17fce:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   17fd0:	68fa      	ldr	r2, [r7, #12]
   17fd2:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17fd4:	4013      	ands	r3, r2
   17fd6:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   17fd8:	68fb      	ldr	r3, [r7, #12]
   17fda:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17fdc:	230b      	movs	r3, #11
   17fde:	18fb      	adds	r3, r7, r3
   17fe0:	400a      	ands	r2, r1
   17fe2:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   17fe4:	230b      	movs	r3, #11
   17fe6:	18fb      	adds	r3, r7, r3
   17fe8:	781b      	ldrb	r3, [r3, #0]
   17fea:	2201      	movs	r2, #1
   17fec:	4013      	ands	r3, r2
   17fee:	d008      	beq.n	18002 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   17ff0:	68fb      	ldr	r3, [r7, #12]
   17ff2:	689b      	ldr	r3, [r3, #8]
   17ff4:	68fa      	ldr	r2, [r7, #12]
   17ff6:	0010      	movs	r0, r2
   17ff8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   17ffa:	68fb      	ldr	r3, [r7, #12]
   17ffc:	681b      	ldr	r3, [r3, #0]
   17ffe:	2201      	movs	r2, #1
   18000:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   18002:	230b      	movs	r3, #11
   18004:	18fb      	adds	r3, r7, r3
   18006:	781b      	ldrb	r3, [r3, #0]
   18008:	2202      	movs	r2, #2
   1800a:	4013      	ands	r3, r2
   1800c:	d008      	beq.n	18020 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   1800e:	68fb      	ldr	r3, [r7, #12]
   18010:	68db      	ldr	r3, [r3, #12]
   18012:	68fa      	ldr	r2, [r7, #12]
   18014:	0010      	movs	r0, r2
   18016:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   18018:	68fb      	ldr	r3, [r7, #12]
   1801a:	681b      	ldr	r3, [r3, #0]
   1801c:	2202      	movs	r2, #2
   1801e:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   18020:	230b      	movs	r3, #11
   18022:	18fb      	adds	r3, r7, r3
   18024:	781b      	ldrb	r3, [r3, #0]
   18026:	2210      	movs	r2, #16
   18028:	4013      	ands	r3, r2
   1802a:	d008      	beq.n	1803e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   1802c:	68fb      	ldr	r3, [r7, #12]
   1802e:	691b      	ldr	r3, [r3, #16]
   18030:	68fa      	ldr	r2, [r7, #12]
   18032:	0010      	movs	r0, r2
   18034:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   18036:	68fb      	ldr	r3, [r7, #12]
   18038:	681b      	ldr	r3, [r3, #0]
   1803a:	2210      	movs	r2, #16
   1803c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   1803e:	230b      	movs	r3, #11
   18040:	18fb      	adds	r3, r7, r3
   18042:	781b      	ldrb	r3, [r3, #0]
   18044:	2220      	movs	r2, #32
   18046:	4013      	ands	r3, r2
   18048:	d008      	beq.n	1805c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   1804a:	68fb      	ldr	r3, [r7, #12]
   1804c:	695b      	ldr	r3, [r3, #20]
   1804e:	68fa      	ldr	r2, [r7, #12]
   18050:	0010      	movs	r0, r2
   18052:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   18054:	68fb      	ldr	r3, [r7, #12]
   18056:	681b      	ldr	r3, [r3, #0]
   18058:	2220      	movs	r2, #32
   1805a:	739a      	strb	r2, [r3, #14]
	}
}
   1805c:	46c0      	nop			; (mov r8, r8)
   1805e:	46bd      	mov	sp, r7
   18060:	b004      	add	sp, #16
   18062:	bd80      	pop	{r7, pc}
   18064:	2000457c 	.word	0x2000457c

00018068 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   18068:	b580      	push	{r7, lr}
   1806a:	b084      	sub	sp, #16
   1806c:	af00      	add	r7, sp, #0
   1806e:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   18070:	2300      	movs	r3, #0
   18072:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   18074:	687b      	ldr	r3, [r7, #4]
   18076:	2b00      	cmp	r3, #0
   18078:	d101      	bne.n	1807e <FreeRTOS_CLIRegisterCommand+0x16>
   1807a:	b672      	cpsid	i
   1807c:	e7fe      	b.n	1807c <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   1807e:	2008      	movs	r0, #8
   18080:	4b11      	ldr	r3, [pc, #68]	; (180c8 <FreeRTOS_CLIRegisterCommand+0x60>)
   18082:	4798      	blx	r3
   18084:	0003      	movs	r3, r0
   18086:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   18088:	68bb      	ldr	r3, [r7, #8]
   1808a:	2b00      	cmp	r3, #0
   1808c:	d101      	bne.n	18092 <FreeRTOS_CLIRegisterCommand+0x2a>
   1808e:	b672      	cpsid	i
   18090:	e7fe      	b.n	18090 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   18092:	68bb      	ldr	r3, [r7, #8]
   18094:	2b00      	cmp	r3, #0
   18096:	d012      	beq.n	180be <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   18098:	4b0c      	ldr	r3, [pc, #48]	; (180cc <FreeRTOS_CLIRegisterCommand+0x64>)
   1809a:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   1809c:	68bb      	ldr	r3, [r7, #8]
   1809e:	687a      	ldr	r2, [r7, #4]
   180a0:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   180a2:	68bb      	ldr	r3, [r7, #8]
   180a4:	2200      	movs	r2, #0
   180a6:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   180a8:	4b09      	ldr	r3, [pc, #36]	; (180d0 <FreeRTOS_CLIRegisterCommand+0x68>)
   180aa:	681b      	ldr	r3, [r3, #0]
   180ac:	68ba      	ldr	r2, [r7, #8]
   180ae:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   180b0:	4b07      	ldr	r3, [pc, #28]	; (180d0 <FreeRTOS_CLIRegisterCommand+0x68>)
   180b2:	68ba      	ldr	r2, [r7, #8]
   180b4:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   180b6:	4b07      	ldr	r3, [pc, #28]	; (180d4 <FreeRTOS_CLIRegisterCommand+0x6c>)
   180b8:	4798      	blx	r3

		xReturn = pdPASS;
   180ba:	2301      	movs	r3, #1
   180bc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   180be:	68fb      	ldr	r3, [r7, #12]
}
   180c0:	0018      	movs	r0, r3
   180c2:	46bd      	mov	sp, r7
   180c4:	b004      	add	sp, #16
   180c6:	bd80      	pop	{r7, pc}
   180c8:	0001a531 	.word	0x0001a531
   180cc:	0001a3f9 	.word	0x0001a3f9
   180d0:	200000a8 	.word	0x200000a8
   180d4:	0001a41d 	.word	0x0001a41d

000180d8 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   180d8:	b580      	push	{r7, lr}
   180da:	b088      	sub	sp, #32
   180dc:	af00      	add	r7, sp, #0
   180de:	60f8      	str	r0, [r7, #12]
   180e0:	60b9      	str	r1, [r7, #8]
   180e2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   180e4:	2301      	movs	r3, #1
   180e6:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   180e8:	4b3d      	ldr	r3, [pc, #244]	; (181e0 <FreeRTOS_CLIProcessCommand+0x108>)
   180ea:	681b      	ldr	r3, [r3, #0]
   180ec:	2b00      	cmp	r3, #0
   180ee:	d144      	bne.n	1817a <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   180f0:	4b3b      	ldr	r3, [pc, #236]	; (181e0 <FreeRTOS_CLIProcessCommand+0x108>)
   180f2:	4a3c      	ldr	r2, [pc, #240]	; (181e4 <FreeRTOS_CLIProcessCommand+0x10c>)
   180f4:	601a      	str	r2, [r3, #0]
   180f6:	e03a      	b.n	1816e <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   180f8:	4b39      	ldr	r3, [pc, #228]	; (181e0 <FreeRTOS_CLIProcessCommand+0x108>)
   180fa:	681b      	ldr	r3, [r3, #0]
   180fc:	681b      	ldr	r3, [r3, #0]
   180fe:	681b      	ldr	r3, [r3, #0]
   18100:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   18102:	69bb      	ldr	r3, [r7, #24]
   18104:	0018      	movs	r0, r3
   18106:	4b38      	ldr	r3, [pc, #224]	; (181e8 <FreeRTOS_CLIProcessCommand+0x110>)
   18108:	4798      	blx	r3
   1810a:	0003      	movs	r3, r0
   1810c:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   1810e:	68fa      	ldr	r2, [r7, #12]
   18110:	697b      	ldr	r3, [r7, #20]
   18112:	18d3      	adds	r3, r2, r3
   18114:	781b      	ldrb	r3, [r3, #0]
   18116:	2b20      	cmp	r3, #32
   18118:	d005      	beq.n	18126 <FreeRTOS_CLIProcessCommand+0x4e>
   1811a:	68fa      	ldr	r2, [r7, #12]
   1811c:	697b      	ldr	r3, [r7, #20]
   1811e:	18d3      	adds	r3, r2, r3
   18120:	781b      	ldrb	r3, [r3, #0]
   18122:	2b00      	cmp	r3, #0
   18124:	d11e      	bne.n	18164 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   18126:	697a      	ldr	r2, [r7, #20]
   18128:	69b9      	ldr	r1, [r7, #24]
   1812a:	68fb      	ldr	r3, [r7, #12]
   1812c:	0018      	movs	r0, r3
   1812e:	4b2f      	ldr	r3, [pc, #188]	; (181ec <FreeRTOS_CLIProcessCommand+0x114>)
   18130:	4798      	blx	r3
   18132:	1e03      	subs	r3, r0, #0
   18134:	d116      	bne.n	18164 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   18136:	4b2a      	ldr	r3, [pc, #168]	; (181e0 <FreeRTOS_CLIProcessCommand+0x108>)
   18138:	681b      	ldr	r3, [r3, #0]
   1813a:	681b      	ldr	r3, [r3, #0]
   1813c:	7b1b      	ldrb	r3, [r3, #12]
   1813e:	b25b      	sxtb	r3, r3
   18140:	2b00      	cmp	r3, #0
   18142:	db19      	blt.n	18178 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   18144:	68fb      	ldr	r3, [r7, #12]
   18146:	0018      	movs	r0, r3
   18148:	4b29      	ldr	r3, [pc, #164]	; (181f0 <FreeRTOS_CLIProcessCommand+0x118>)
   1814a:	4798      	blx	r3
   1814c:	0003      	movs	r3, r0
   1814e:	001a      	movs	r2, r3
   18150:	4b23      	ldr	r3, [pc, #140]	; (181e0 <FreeRTOS_CLIProcessCommand+0x108>)
   18152:	681b      	ldr	r3, [r3, #0]
   18154:	681b      	ldr	r3, [r3, #0]
   18156:	7b1b      	ldrb	r3, [r3, #12]
   18158:	b25b      	sxtb	r3, r3
   1815a:	429a      	cmp	r2, r3
   1815c:	d00c      	beq.n	18178 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   1815e:	2300      	movs	r3, #0
   18160:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   18162:	e009      	b.n	18178 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18164:	4b1e      	ldr	r3, [pc, #120]	; (181e0 <FreeRTOS_CLIProcessCommand+0x108>)
   18166:	681b      	ldr	r3, [r3, #0]
   18168:	685a      	ldr	r2, [r3, #4]
   1816a:	4b1d      	ldr	r3, [pc, #116]	; (181e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1816c:	601a      	str	r2, [r3, #0]
   1816e:	4b1c      	ldr	r3, [pc, #112]	; (181e0 <FreeRTOS_CLIProcessCommand+0x108>)
   18170:	681b      	ldr	r3, [r3, #0]
   18172:	2b00      	cmp	r3, #0
   18174:	d1c0      	bne.n	180f8 <FreeRTOS_CLIProcessCommand+0x20>
   18176:	e000      	b.n	1817a <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   18178:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   1817a:	4b19      	ldr	r3, [pc, #100]	; (181e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1817c:	681b      	ldr	r3, [r3, #0]
   1817e:	2b00      	cmp	r3, #0
   18180:	d00c      	beq.n	1819c <FreeRTOS_CLIProcessCommand+0xc4>
   18182:	69fb      	ldr	r3, [r7, #28]
   18184:	2b00      	cmp	r3, #0
   18186:	d109      	bne.n	1819c <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18188:	687a      	ldr	r2, [r7, #4]
   1818a:	491a      	ldr	r1, [pc, #104]	; (181f4 <FreeRTOS_CLIProcessCommand+0x11c>)
   1818c:	68bb      	ldr	r3, [r7, #8]
   1818e:	0018      	movs	r0, r3
   18190:	4b19      	ldr	r3, [pc, #100]	; (181f8 <FreeRTOS_CLIProcessCommand+0x120>)
   18192:	4798      	blx	r3
		pxCommand = NULL;
   18194:	4b12      	ldr	r3, [pc, #72]	; (181e0 <FreeRTOS_CLIProcessCommand+0x108>)
   18196:	2200      	movs	r2, #0
   18198:	601a      	str	r2, [r3, #0]
   1819a:	e01c      	b.n	181d6 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   1819c:	4b10      	ldr	r3, [pc, #64]	; (181e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1819e:	681b      	ldr	r3, [r3, #0]
   181a0:	2b00      	cmp	r3, #0
   181a2:	d010      	beq.n	181c6 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   181a4:	4b0e      	ldr	r3, [pc, #56]	; (181e0 <FreeRTOS_CLIProcessCommand+0x108>)
   181a6:	681b      	ldr	r3, [r3, #0]
   181a8:	681b      	ldr	r3, [r3, #0]
   181aa:	689b      	ldr	r3, [r3, #8]
   181ac:	68fa      	ldr	r2, [r7, #12]
   181ae:	6879      	ldr	r1, [r7, #4]
   181b0:	68b8      	ldr	r0, [r7, #8]
   181b2:	4798      	blx	r3
   181b4:	0003      	movs	r3, r0
   181b6:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   181b8:	69fb      	ldr	r3, [r7, #28]
   181ba:	2b00      	cmp	r3, #0
   181bc:	d10b      	bne.n	181d6 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   181be:	4b08      	ldr	r3, [pc, #32]	; (181e0 <FreeRTOS_CLIProcessCommand+0x108>)
   181c0:	2200      	movs	r2, #0
   181c2:	601a      	str	r2, [r3, #0]
   181c4:	e007      	b.n	181d6 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   181c6:	687a      	ldr	r2, [r7, #4]
   181c8:	490c      	ldr	r1, [pc, #48]	; (181fc <FreeRTOS_CLIProcessCommand+0x124>)
   181ca:	68bb      	ldr	r3, [r7, #8]
   181cc:	0018      	movs	r0, r3
   181ce:	4b0a      	ldr	r3, [pc, #40]	; (181f8 <FreeRTOS_CLIProcessCommand+0x120>)
   181d0:	4798      	blx	r3
		xReturn = pdFALSE;
   181d2:	2300      	movs	r3, #0
   181d4:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   181d6:	69fb      	ldr	r3, [r7, #28]
}
   181d8:	0018      	movs	r0, r3
   181da:	46bd      	mov	sp, r7
   181dc:	b008      	add	sp, #32
   181de:	bd80      	pop	{r7, pc}
   181e0:	200008c4 	.word	0x200008c4
   181e4:	200000a0 	.word	0x200000a0
   181e8:	00034c57 	.word	0x00034c57
   181ec:	00034c65 	.word	0x00034c65
   181f0:	00018311 	.word	0x00018311
   181f4:	00036afc 	.word	0x00036afc
   181f8:	00034c87 	.word	0x00034c87
   181fc:	00036b54 	.word	0x00036b54

00018200 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
   18200:	b580      	push	{r7, lr}
   18202:	b086      	sub	sp, #24
   18204:	af00      	add	r7, sp, #0
   18206:	60f8      	str	r0, [r7, #12]
   18208:	60b9      	str	r1, [r7, #8]
   1820a:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
   1820c:	2300      	movs	r3, #0
   1820e:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
   18210:	2300      	movs	r3, #0
   18212:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
   18214:	687b      	ldr	r3, [r7, #4]
   18216:	2200      	movs	r2, #0
   18218:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
   1821a:	e03b      	b.n	18294 <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
   1821c:	68fb      	ldr	r3, [r7, #12]
   1821e:	3301      	adds	r3, #1
   18220:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   18222:	68fb      	ldr	r3, [r7, #12]
   18224:	781b      	ldrb	r3, [r3, #0]
   18226:	2b00      	cmp	r3, #0
   18228:	d007      	beq.n	1823a <FreeRTOS_CLIGetParameter+0x3a>
   1822a:	68fb      	ldr	r3, [r7, #12]
   1822c:	781b      	ldrb	r3, [r3, #0]
   1822e:	2b20      	cmp	r3, #32
   18230:	d1f4      	bne.n	1821c <FreeRTOS_CLIGetParameter+0x1c>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
   18232:	e002      	b.n	1823a <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
   18234:	68fb      	ldr	r3, [r7, #12]
   18236:	3301      	adds	r3, #1
   18238:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
   1823a:	68fb      	ldr	r3, [r7, #12]
   1823c:	781b      	ldrb	r3, [r3, #0]
   1823e:	2b00      	cmp	r3, #0
   18240:	d003      	beq.n	1824a <FreeRTOS_CLIGetParameter+0x4a>
   18242:	68fb      	ldr	r3, [r7, #12]
   18244:	781b      	ldrb	r3, [r3, #0]
   18246:	2b20      	cmp	r3, #32
   18248:	d0f4      	beq.n	18234 <FreeRTOS_CLIGetParameter+0x34>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
   1824a:	68fb      	ldr	r3, [r7, #12]
   1824c:	781b      	ldrb	r3, [r3, #0]
   1824e:	2b00      	cmp	r3, #0
   18250:	d025      	beq.n	1829e <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
   18252:	697b      	ldr	r3, [r7, #20]
   18254:	3301      	adds	r3, #1
   18256:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
   18258:	697a      	ldr	r2, [r7, #20]
   1825a:	68bb      	ldr	r3, [r7, #8]
   1825c:	429a      	cmp	r2, r3
   1825e:	d119      	bne.n	18294 <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
   18260:	68fb      	ldr	r3, [r7, #12]
   18262:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   18264:	e007      	b.n	18276 <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
   18266:	687b      	ldr	r3, [r7, #4]
   18268:	681b      	ldr	r3, [r3, #0]
   1826a:	1c5a      	adds	r2, r3, #1
   1826c:	687b      	ldr	r3, [r7, #4]
   1826e:	601a      	str	r2, [r3, #0]
					pcCommandString++;
   18270:	68fb      	ldr	r3, [r7, #12]
   18272:	3301      	adds	r3, #1
   18274:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   18276:	68fb      	ldr	r3, [r7, #12]
   18278:	781b      	ldrb	r3, [r3, #0]
   1827a:	2b00      	cmp	r3, #0
   1827c:	d003      	beq.n	18286 <FreeRTOS_CLIGetParameter+0x86>
   1827e:	68fb      	ldr	r3, [r7, #12]
   18280:	781b      	ldrb	r3, [r3, #0]
   18282:	2b20      	cmp	r3, #32
   18284:	d1ef      	bne.n	18266 <FreeRTOS_CLIGetParameter+0x66>
				}

				if( *pxParameterStringLength == 0 )
   18286:	687b      	ldr	r3, [r7, #4]
   18288:	681b      	ldr	r3, [r3, #0]
   1828a:	2b00      	cmp	r3, #0
   1828c:	d109      	bne.n	182a2 <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
   1828e:	2300      	movs	r3, #0
   18290:	613b      	str	r3, [r7, #16]
				}

				break;
   18292:	e006      	b.n	182a2 <FreeRTOS_CLIGetParameter+0xa2>
	while( uxParametersFound < uxWantedParameter )
   18294:	697a      	ldr	r2, [r7, #20]
   18296:	68bb      	ldr	r3, [r7, #8]
   18298:	429a      	cmp	r2, r3
   1829a:	d3c2      	bcc.n	18222 <FreeRTOS_CLIGetParameter+0x22>
   1829c:	e002      	b.n	182a4 <FreeRTOS_CLIGetParameter+0xa4>
			}
		}
		else
		{
			break;
   1829e:	46c0      	nop			; (mov r8, r8)
   182a0:	e000      	b.n	182a4 <FreeRTOS_CLIGetParameter+0xa4>
				break;
   182a2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return pcReturn;
   182a4:	693b      	ldr	r3, [r7, #16]
}
   182a6:	0018      	movs	r0, r3
   182a8:	46bd      	mov	sp, r7
   182aa:	b006      	add	sp, #24
   182ac:	bd80      	pop	{r7, pc}
	...

000182b0 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   182b0:	b580      	push	{r7, lr}
   182b2:	b086      	sub	sp, #24
   182b4:	af00      	add	r7, sp, #0
   182b6:	60f8      	str	r0, [r7, #12]
   182b8:	60b9      	str	r1, [r7, #8]
   182ba:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   182bc:	4b11      	ldr	r3, [pc, #68]	; (18304 <prvHelpCommand+0x54>)
   182be:	681b      	ldr	r3, [r3, #0]
   182c0:	2b00      	cmp	r3, #0
   182c2:	d102      	bne.n	182ca <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   182c4:	4b0f      	ldr	r3, [pc, #60]	; (18304 <prvHelpCommand+0x54>)
   182c6:	4a10      	ldr	r2, [pc, #64]	; (18308 <prvHelpCommand+0x58>)
   182c8:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   182ca:	4b0e      	ldr	r3, [pc, #56]	; (18304 <prvHelpCommand+0x54>)
   182cc:	681b      	ldr	r3, [r3, #0]
   182ce:	681b      	ldr	r3, [r3, #0]
   182d0:	6859      	ldr	r1, [r3, #4]
   182d2:	68ba      	ldr	r2, [r7, #8]
   182d4:	68fb      	ldr	r3, [r7, #12]
   182d6:	0018      	movs	r0, r3
   182d8:	4b0c      	ldr	r3, [pc, #48]	; (1830c <prvHelpCommand+0x5c>)
   182da:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   182dc:	4b09      	ldr	r3, [pc, #36]	; (18304 <prvHelpCommand+0x54>)
   182de:	681b      	ldr	r3, [r3, #0]
   182e0:	685a      	ldr	r2, [r3, #4]
   182e2:	4b08      	ldr	r3, [pc, #32]	; (18304 <prvHelpCommand+0x54>)
   182e4:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   182e6:	4b07      	ldr	r3, [pc, #28]	; (18304 <prvHelpCommand+0x54>)
   182e8:	681b      	ldr	r3, [r3, #0]
   182ea:	2b00      	cmp	r3, #0
   182ec:	d102      	bne.n	182f4 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   182ee:	2300      	movs	r3, #0
   182f0:	617b      	str	r3, [r7, #20]
   182f2:	e001      	b.n	182f8 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   182f4:	2301      	movs	r3, #1
   182f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   182f8:	697b      	ldr	r3, [r7, #20]
}
   182fa:	0018      	movs	r0, r3
   182fc:	46bd      	mov	sp, r7
   182fe:	b006      	add	sp, #24
   18300:	bd80      	pop	{r7, pc}
   18302:	46c0      	nop			; (mov r8, r8)
   18304:	200008c8 	.word	0x200008c8
   18308:	200000a0 	.word	0x200000a0
   1830c:	00034c87 	.word	0x00034c87

00018310 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   18310:	b580      	push	{r7, lr}
   18312:	b084      	sub	sp, #16
   18314:	af00      	add	r7, sp, #0
   18316:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   18318:	230f      	movs	r3, #15
   1831a:	18fb      	adds	r3, r7, r3
   1831c:	2200      	movs	r2, #0
   1831e:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   18320:	2300      	movs	r3, #0
   18322:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   18324:	e018      	b.n	18358 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   18326:	687b      	ldr	r3, [r7, #4]
   18328:	781b      	ldrb	r3, [r3, #0]
   1832a:	2b20      	cmp	r3, #32
   1832c:	d10f      	bne.n	1834e <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   1832e:	68bb      	ldr	r3, [r7, #8]
   18330:	2b01      	cmp	r3, #1
   18332:	d00e      	beq.n	18352 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   18334:	230f      	movs	r3, #15
   18336:	18fb      	adds	r3, r7, r3
   18338:	781b      	ldrb	r3, [r3, #0]
   1833a:	b25b      	sxtb	r3, r3
   1833c:	b2db      	uxtb	r3, r3
   1833e:	3301      	adds	r3, #1
   18340:	b2da      	uxtb	r2, r3
   18342:	230f      	movs	r3, #15
   18344:	18fb      	adds	r3, r7, r3
   18346:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   18348:	2301      	movs	r3, #1
   1834a:	60bb      	str	r3, [r7, #8]
   1834c:	e001      	b.n	18352 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   1834e:	2300      	movs	r3, #0
   18350:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   18352:	687b      	ldr	r3, [r7, #4]
   18354:	3301      	adds	r3, #1
   18356:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   18358:	687b      	ldr	r3, [r7, #4]
   1835a:	781b      	ldrb	r3, [r3, #0]
   1835c:	2b00      	cmp	r3, #0
   1835e:	d1e2      	bne.n	18326 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   18360:	68bb      	ldr	r3, [r7, #8]
   18362:	2b01      	cmp	r3, #1
   18364:	d109      	bne.n	1837a <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   18366:	230f      	movs	r3, #15
   18368:	18fb      	adds	r3, r7, r3
   1836a:	781b      	ldrb	r3, [r3, #0]
   1836c:	b25b      	sxtb	r3, r3
   1836e:	b2db      	uxtb	r3, r3
   18370:	3b01      	subs	r3, #1
   18372:	b2da      	uxtb	r2, r3
   18374:	230f      	movs	r3, #15
   18376:	18fb      	adds	r3, r7, r3
   18378:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   1837a:	230f      	movs	r3, #15
   1837c:	18fb      	adds	r3, r7, r3
   1837e:	781b      	ldrb	r3, [r3, #0]
   18380:	b25b      	sxtb	r3, r3
}
   18382:	0018      	movs	r0, r3
   18384:	46bd      	mov	sp, r7
   18386:	b004      	add	sp, #16
   18388:	bd80      	pop	{r7, pc}
	...

0001838c <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   1838c:	b580      	push	{r7, lr}
   1838e:	b082      	sub	sp, #8
   18390:	af00      	add	r7, sp, #0
   18392:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   18394:	687b      	ldr	r3, [r7, #4]
   18396:	0018      	movs	r0, r3
   18398:	4b03      	ldr	r3, [pc, #12]	; (183a8 <prvTraceGetQueueNumber+0x1c>)
   1839a:	4798      	blx	r3
   1839c:	0003      	movs	r3, r0
}
   1839e:	0018      	movs	r0, r3
   183a0:	46bd      	mov	sp, r7
   183a2:	b002      	add	sp, #8
   183a4:	bd80      	pop	{r7, pc}
   183a6:	46c0      	nop			; (mov r8, r8)
   183a8:	0001bb55 	.word	0x0001bb55

000183ac <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   183ac:	b580      	push	{r7, lr}
   183ae:	b082      	sub	sp, #8
   183b0:	af00      	add	r7, sp, #0
   183b2:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   183b4:	687b      	ldr	r3, [r7, #4]
   183b6:	0018      	movs	r0, r3
   183b8:	4b03      	ldr	r3, [pc, #12]	; (183c8 <prvTraceGetQueueType+0x1c>)
   183ba:	4798      	blx	r3
   183bc:	0003      	movs	r3, r0
}
   183be:	0018      	movs	r0, r3
   183c0:	46bd      	mov	sp, r7
   183c2:	b002      	add	sp, #8
   183c4:	bd80      	pop	{r7, pc}
   183c6:	46c0      	nop			; (mov r8, r8)
   183c8:	0001bb81 	.word	0x0001bb81

000183cc <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   183cc:	b580      	push	{r7, lr}
   183ce:	b082      	sub	sp, #8
   183d0:	af00      	add	r7, sp, #0
   183d2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   183d4:	687b      	ldr	r3, [r7, #4]
   183d6:	0018      	movs	r0, r3
   183d8:	4b03      	ldr	r3, [pc, #12]	; (183e8 <prvTraceGetTaskNumberLow16+0x1c>)
   183da:	4798      	blx	r3
   183dc:	0003      	movs	r3, r0
   183de:	b29b      	uxth	r3, r3
}
   183e0:	0018      	movs	r0, r3
   183e2:	46bd      	mov	sp, r7
   183e4:	b002      	add	sp, #8
   183e6:	bd80      	pop	{r7, pc}
   183e8:	0001ceb1 	.word	0x0001ceb1

000183ec <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   183ec:	b580      	push	{r7, lr}
   183ee:	b082      	sub	sp, #8
   183f0:	af00      	add	r7, sp, #0
   183f2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   183f4:	687b      	ldr	r3, [r7, #4]
   183f6:	0018      	movs	r0, r3
   183f8:	4b04      	ldr	r3, [pc, #16]	; (1840c <prvTraceGetTaskNumberHigh16+0x20>)
   183fa:	4798      	blx	r3
   183fc:	0003      	movs	r3, r0
   183fe:	0c1b      	lsrs	r3, r3, #16
   18400:	b29b      	uxth	r3, r3
}
   18402:	0018      	movs	r0, r3
   18404:	46bd      	mov	sp, r7
   18406:	b002      	add	sp, #8
   18408:	bd80      	pop	{r7, pc}
   1840a:	46c0      	nop			; (mov r8, r8)
   1840c:	0001ceb1 	.word	0x0001ceb1

00018410 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   18410:	b580      	push	{r7, lr}
   18412:	b082      	sub	sp, #8
   18414:	af00      	add	r7, sp, #0
   18416:	6078      	str	r0, [r7, #4]
   18418:	000a      	movs	r2, r1
   1841a:	1cbb      	adds	r3, r7, #2
   1841c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   1841e:	687b      	ldr	r3, [r7, #4]
   18420:	0018      	movs	r0, r3
   18422:	4b08      	ldr	r3, [pc, #32]	; (18444 <prvTraceSetTaskNumberLow16+0x34>)
   18424:	4798      	blx	r3
   18426:	0003      	movs	r3, r0
   18428:	0c1b      	lsrs	r3, r3, #16
   1842a:	041a      	lsls	r2, r3, #16
   1842c:	1cbb      	adds	r3, r7, #2
   1842e:	881b      	ldrh	r3, [r3, #0]
   18430:	431a      	orrs	r2, r3
   18432:	687b      	ldr	r3, [r7, #4]
   18434:	0011      	movs	r1, r2
   18436:	0018      	movs	r0, r3
   18438:	4b03      	ldr	r3, [pc, #12]	; (18448 <prvTraceSetTaskNumberLow16+0x38>)
   1843a:	4798      	blx	r3
}
   1843c:	46c0      	nop			; (mov r8, r8)
   1843e:	46bd      	mov	sp, r7
   18440:	b002      	add	sp, #8
   18442:	bd80      	pop	{r7, pc}
   18444:	0001ceb1 	.word	0x0001ceb1
   18448:	0001ced9 	.word	0x0001ced9

0001844c <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   1844c:	b580      	push	{r7, lr}
   1844e:	b082      	sub	sp, #8
   18450:	af00      	add	r7, sp, #0
   18452:	6078      	str	r0, [r7, #4]
   18454:	000a      	movs	r2, r1
   18456:	1cbb      	adds	r3, r7, #2
   18458:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   1845a:	687b      	ldr	r3, [r7, #4]
   1845c:	0018      	movs	r0, r3
   1845e:	4b09      	ldr	r3, [pc, #36]	; (18484 <prvTraceSetTaskNumberHigh16+0x38>)
   18460:	4798      	blx	r3
   18462:	0003      	movs	r3, r0
   18464:	041b      	lsls	r3, r3, #16
   18466:	0c1a      	lsrs	r2, r3, #16
   18468:	1cbb      	adds	r3, r7, #2
   1846a:	881b      	ldrh	r3, [r3, #0]
   1846c:	041b      	lsls	r3, r3, #16
   1846e:	431a      	orrs	r2, r3
   18470:	687b      	ldr	r3, [r7, #4]
   18472:	0011      	movs	r1, r2
   18474:	0018      	movs	r0, r3
   18476:	4b04      	ldr	r3, [pc, #16]	; (18488 <prvTraceSetTaskNumberHigh16+0x3c>)
   18478:	4798      	blx	r3
}
   1847a:	46c0      	nop			; (mov r8, r8)
   1847c:	46bd      	mov	sp, r7
   1847e:	b002      	add	sp, #8
   18480:	bd80      	pop	{r7, pc}
   18482:	46c0      	nop			; (mov r8, r8)
   18484:	0001ceb1 	.word	0x0001ceb1
   18488:	0001ced9 	.word	0x0001ced9

0001848c <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   1848c:	b580      	push	{r7, lr}
   1848e:	b082      	sub	sp, #8
   18490:	af00      	add	r7, sp, #0
   18492:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   18494:	687b      	ldr	r3, [r7, #4]
   18496:	0018      	movs	r0, r3
   18498:	4b03      	ldr	r3, [pc, #12]	; (184a8 <prvTraceGetQueueNumberLow16+0x1c>)
   1849a:	4798      	blx	r3
   1849c:	0003      	movs	r3, r0
   1849e:	b29b      	uxth	r3, r3
}
   184a0:	0018      	movs	r0, r3
   184a2:	46bd      	mov	sp, r7
   184a4:	b002      	add	sp, #8
   184a6:	bd80      	pop	{r7, pc}
   184a8:	0001838d 	.word	0x0001838d

000184ac <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   184ac:	b580      	push	{r7, lr}
   184ae:	b082      	sub	sp, #8
   184b0:	af00      	add	r7, sp, #0
   184b2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   184b4:	687b      	ldr	r3, [r7, #4]
   184b6:	0018      	movs	r0, r3
   184b8:	4b04      	ldr	r3, [pc, #16]	; (184cc <prvTraceGetQueueNumberHigh16+0x20>)
   184ba:	4798      	blx	r3
   184bc:	0003      	movs	r3, r0
   184be:	0c1b      	lsrs	r3, r3, #16
   184c0:	b29b      	uxth	r3, r3
}
   184c2:	0018      	movs	r0, r3
   184c4:	46bd      	mov	sp, r7
   184c6:	b002      	add	sp, #8
   184c8:	bd80      	pop	{r7, pc}
   184ca:	46c0      	nop			; (mov r8, r8)
   184cc:	0001838d 	.word	0x0001838d

000184d0 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   184d0:	b580      	push	{r7, lr}
   184d2:	b082      	sub	sp, #8
   184d4:	af00      	add	r7, sp, #0
   184d6:	6078      	str	r0, [r7, #4]
   184d8:	000a      	movs	r2, r1
   184da:	1cbb      	adds	r3, r7, #2
   184dc:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   184de:	687b      	ldr	r3, [r7, #4]
   184e0:	0018      	movs	r0, r3
   184e2:	4b08      	ldr	r3, [pc, #32]	; (18504 <prvTraceSetQueueNumberLow16+0x34>)
   184e4:	4798      	blx	r3
   184e6:	0003      	movs	r3, r0
   184e8:	0c1b      	lsrs	r3, r3, #16
   184ea:	041a      	lsls	r2, r3, #16
   184ec:	1cbb      	adds	r3, r7, #2
   184ee:	881b      	ldrh	r3, [r3, #0]
   184f0:	431a      	orrs	r2, r3
   184f2:	687b      	ldr	r3, [r7, #4]
   184f4:	0011      	movs	r1, r2
   184f6:	0018      	movs	r0, r3
   184f8:	4b03      	ldr	r3, [pc, #12]	; (18508 <prvTraceSetQueueNumberLow16+0x38>)
   184fa:	4798      	blx	r3
}
   184fc:	46c0      	nop			; (mov r8, r8)
   184fe:	46bd      	mov	sp, r7
   18500:	b002      	add	sp, #8
   18502:	bd80      	pop	{r7, pc}
   18504:	0001838d 	.word	0x0001838d
   18508:	0001bb69 	.word	0x0001bb69

0001850c <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   1850c:	b580      	push	{r7, lr}
   1850e:	b082      	sub	sp, #8
   18510:	af00      	add	r7, sp, #0
   18512:	6078      	str	r0, [r7, #4]
   18514:	000a      	movs	r2, r1
   18516:	1cbb      	adds	r3, r7, #2
   18518:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   1851a:	687b      	ldr	r3, [r7, #4]
   1851c:	0018      	movs	r0, r3
   1851e:	4b09      	ldr	r3, [pc, #36]	; (18544 <prvTraceSetQueueNumberHigh16+0x38>)
   18520:	4798      	blx	r3
   18522:	0003      	movs	r3, r0
   18524:	041b      	lsls	r3, r3, #16
   18526:	0c1a      	lsrs	r2, r3, #16
   18528:	1cbb      	adds	r3, r7, #2
   1852a:	881b      	ldrh	r3, [r3, #0]
   1852c:	041b      	lsls	r3, r3, #16
   1852e:	431a      	orrs	r2, r3
   18530:	687b      	ldr	r3, [r7, #4]
   18532:	0011      	movs	r1, r2
   18534:	0018      	movs	r0, r3
   18536:	4b04      	ldr	r3, [pc, #16]	; (18548 <prvTraceSetQueueNumberHigh16+0x3c>)
   18538:	4798      	blx	r3
}
   1853a:	46c0      	nop			; (mov r8, r8)
   1853c:	46bd      	mov	sp, r7
   1853e:	b002      	add	sp, #8
   18540:	bd80      	pop	{r7, pc}
   18542:	46c0      	nop			; (mov r8, r8)
   18544:	0001838d 	.word	0x0001838d
   18548:	0001bb69 	.word	0x0001bb69

0001854c <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   1854c:	b580      	push	{r7, lr}
   1854e:	b084      	sub	sp, #16
   18550:	af00      	add	r7, sp, #0
   18552:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   18554:	2300      	movs	r3, #0
   18556:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18558:	2300      	movs	r3, #0
   1855a:	60bb      	str	r3, [r7, #8]
   1855c:	e018      	b.n	18590 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   1855e:	4b14      	ldr	r3, [pc, #80]	; (185b0 <prvAddTaskToStackMonitor+0x64>)
   18560:	68ba      	ldr	r2, [r7, #8]
   18562:	00d2      	lsls	r2, r2, #3
   18564:	58d3      	ldr	r3, [r2, r3]
   18566:	2b00      	cmp	r3, #0
   18568:	d10f      	bne.n	1858a <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   1856a:	4b11      	ldr	r3, [pc, #68]	; (185b0 <prvAddTaskToStackMonitor+0x64>)
   1856c:	68ba      	ldr	r2, [r7, #8]
   1856e:	00d2      	lsls	r2, r2, #3
   18570:	6879      	ldr	r1, [r7, #4]
   18572:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   18574:	4a0e      	ldr	r2, [pc, #56]	; (185b0 <prvAddTaskToStackMonitor+0x64>)
   18576:	68bb      	ldr	r3, [r7, #8]
   18578:	00db      	lsls	r3, r3, #3
   1857a:	18d3      	adds	r3, r2, r3
   1857c:	3304      	adds	r3, #4
   1857e:	2201      	movs	r2, #1
   18580:	4252      	negs	r2, r2
   18582:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   18584:	2301      	movs	r3, #1
   18586:	60fb      	str	r3, [r7, #12]
			break;
   18588:	e005      	b.n	18596 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1858a:	68bb      	ldr	r3, [r7, #8]
   1858c:	3301      	adds	r3, #1
   1858e:	60bb      	str	r3, [r7, #8]
   18590:	68bb      	ldr	r3, [r7, #8]
   18592:	2b09      	cmp	r3, #9
   18594:	dde3      	ble.n	1855e <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   18596:	68fb      	ldr	r3, [r7, #12]
   18598:	2b00      	cmp	r3, #0
   1859a:	d104      	bne.n	185a6 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   1859c:	4b05      	ldr	r3, [pc, #20]	; (185b4 <prvAddTaskToStackMonitor+0x68>)
   1859e:	681b      	ldr	r3, [r3, #0]
   185a0:	1c5a      	adds	r2, r3, #1
   185a2:	4b04      	ldr	r3, [pc, #16]	; (185b4 <prvAddTaskToStackMonitor+0x68>)
   185a4:	601a      	str	r2, [r3, #0]
	}
}
   185a6:	46c0      	nop			; (mov r8, r8)
   185a8:	46bd      	mov	sp, r7
   185aa:	b004      	add	sp, #16
   185ac:	bd80      	pop	{r7, pc}
   185ae:	46c0      	nop			; (mov r8, r8)
   185b0:	200008d0 	.word	0x200008d0
   185b4:	20000920 	.word	0x20000920

000185b8 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   185b8:	b590      	push	{r4, r7, lr}
   185ba:	b085      	sub	sp, #20
   185bc:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   185be:	2300      	movs	r3, #0
   185c0:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   185c2:	4b2b      	ldr	r3, [pc, #172]	; (18670 <prvReportStackUsage+0xb8>)
   185c4:	681b      	ldr	r3, [r3, #0]
   185c6:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   185c8:	4b29      	ldr	r3, [pc, #164]	; (18670 <prvReportStackUsage+0xb8>)
   185ca:	681a      	ldr	r2, [r3, #0]
   185cc:	4b29      	ldr	r3, [pc, #164]	; (18674 <prvReportStackUsage+0xbc>)
   185ce:	00d2      	lsls	r2, r2, #3
   185d0:	58d3      	ldr	r3, [r2, r3]
   185d2:	2b00      	cmp	r3, #0
   185d4:	d035      	beq.n	18642 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   185d6:	4b26      	ldr	r3, [pc, #152]	; (18670 <prvReportStackUsage+0xb8>)
   185d8:	681a      	ldr	r2, [r3, #0]
   185da:	4b26      	ldr	r3, [pc, #152]	; (18674 <prvReportStackUsage+0xbc>)
   185dc:	00d2      	lsls	r2, r2, #3
   185de:	58d3      	ldr	r3, [r2, r3]
   185e0:	0018      	movs	r0, r3
   185e2:	4b25      	ldr	r3, [pc, #148]	; (18678 <prvReportStackUsage+0xc0>)
   185e4:	4798      	blx	r3
   185e6:	0003      	movs	r3, r0
   185e8:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   185ea:	4b21      	ldr	r3, [pc, #132]	; (18670 <prvReportStackUsage+0xb8>)
   185ec:	681b      	ldr	r3, [r3, #0]
   185ee:	4a21      	ldr	r2, [pc, #132]	; (18674 <prvReportStackUsage+0xbc>)
   185f0:	00db      	lsls	r3, r3, #3
   185f2:	18d3      	adds	r3, r2, r3
   185f4:	3304      	adds	r3, #4
   185f6:	681a      	ldr	r2, [r3, #0]
   185f8:	687b      	ldr	r3, [r7, #4]
   185fa:	429a      	cmp	r2, r3
   185fc:	d907      	bls.n	1860e <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   185fe:	4b1c      	ldr	r3, [pc, #112]	; (18670 <prvReportStackUsage+0xb8>)
   18600:	681b      	ldr	r3, [r3, #0]
   18602:	4a1c      	ldr	r2, [pc, #112]	; (18674 <prvReportStackUsage+0xbc>)
   18604:	00db      	lsls	r3, r3, #3
   18606:	18d3      	adds	r3, r2, r3
   18608:	3304      	adds	r3, #4
   1860a:	687a      	ldr	r2, [r7, #4]
   1860c:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   1860e:	4b18      	ldr	r3, [pc, #96]	; (18670 <prvReportStackUsage+0xb8>)
   18610:	681a      	ldr	r2, [r3, #0]
   18612:	4b18      	ldr	r3, [pc, #96]	; (18674 <prvReportStackUsage+0xbc>)
   18614:	00d2      	lsls	r2, r2, #3
   18616:	58d3      	ldr	r3, [r2, r3]
   18618:	0018      	movs	r0, r3
   1861a:	4b18      	ldr	r3, [pc, #96]	; (1867c <prvReportStackUsage+0xc4>)
   1861c:	4798      	blx	r3
   1861e:	0003      	movs	r3, r0
   18620:	b2db      	uxtb	r3, r3
   18622:	0019      	movs	r1, r3
   18624:	4b12      	ldr	r3, [pc, #72]	; (18670 <prvReportStackUsage+0xb8>)
   18626:	681b      	ldr	r3, [r3, #0]
   18628:	4a12      	ldr	r2, [pc, #72]	; (18674 <prvReportStackUsage+0xbc>)
   1862a:	00db      	lsls	r3, r3, #3
   1862c:	18d3      	adds	r3, r2, r3
   1862e:	3304      	adds	r3, #4
   18630:	681b      	ldr	r3, [r3, #0]
   18632:	000a      	movs	r2, r1
   18634:	2103      	movs	r1, #3
   18636:	20ea      	movs	r0, #234	; 0xea
   18638:	4c11      	ldr	r4, [pc, #68]	; (18680 <prvReportStackUsage+0xc8>)
   1863a:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   1863c:	68fb      	ldr	r3, [r7, #12]
   1863e:	3301      	adds	r3, #1
   18640:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   18642:	4b0b      	ldr	r3, [pc, #44]	; (18670 <prvReportStackUsage+0xb8>)
   18644:	681b      	ldr	r3, [r3, #0]
   18646:	1c5a      	adds	r2, r3, #1
   18648:	4b0e      	ldr	r3, [pc, #56]	; (18684 <prvReportStackUsage+0xcc>)
   1864a:	210a      	movs	r1, #10
   1864c:	0010      	movs	r0, r2
   1864e:	4798      	blx	r3
   18650:	000b      	movs	r3, r1
   18652:	001a      	movs	r2, r3
   18654:	4b06      	ldr	r3, [pc, #24]	; (18670 <prvReportStackUsage+0xb8>)
   18656:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   18658:	68fb      	ldr	r3, [r7, #12]
   1865a:	2b00      	cmp	r3, #0
   1865c:	dc04      	bgt.n	18668 <prvReportStackUsage+0xb0>
   1865e:	4b04      	ldr	r3, [pc, #16]	; (18670 <prvReportStackUsage+0xb8>)
   18660:	681a      	ldr	r2, [r3, #0]
   18662:	68bb      	ldr	r3, [r7, #8]
   18664:	429a      	cmp	r2, r3
   18666:	d1af      	bne.n	185c8 <prvReportStackUsage+0x10>
}
   18668:	46c0      	nop			; (mov r8, r8)
   1866a:	46bd      	mov	sp, r7
   1866c:	b005      	add	sp, #20
   1866e:	bd90      	pop	{r4, r7, pc}
   18670:	20000924 	.word	0x20000924
   18674:	200008d0 	.word	0x200008d0
   18678:	0001d051 	.word	0x0001d051
   1867c:	000183cd 	.word	0x000183cd
   18680:	00018f15 	.word	0x00018f15
   18684:	00032ba5 	.word	0x00032ba5

00018688 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   18688:	b580      	push	{r7, lr}
   1868a:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   1868c:	4b02      	ldr	r3, [pc, #8]	; (18698 <prvTraceGetCurrentTaskHandle+0x10>)
   1868e:	4798      	blx	r3
   18690:	0003      	movs	r3, r0
}
   18692:	0018      	movs	r0, r3
   18694:	46bd      	mov	sp, r7
   18696:	bd80      	pop	{r7, pc}
   18698:	0001d0fd 	.word	0x0001d0fd

0001869c <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   1869c:	b590      	push	{r4, r7, lr}
   1869e:	b085      	sub	sp, #20
   186a0:	af02      	add	r7, sp, #8
   186a2:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   186a4:	4b14      	ldr	r3, [pc, #80]	; (186f8 <vTraceEnable+0x5c>)
   186a6:	4798      	blx	r3

	if (startOption == TRC_START)
   186a8:	687b      	ldr	r3, [r7, #4]
   186aa:	2b01      	cmp	r3, #1
   186ac:	d102      	bne.n	186b4 <vTraceEnable+0x18>
	{
		vTraceStart();
   186ae:	4b13      	ldr	r3, [pc, #76]	; (186fc <vTraceEnable+0x60>)
   186b0:	4798      	blx	r3
   186b2:	e00e      	b.n	186d2 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   186b4:	687b      	ldr	r3, [r7, #4]
   186b6:	2b02      	cmp	r3, #2
   186b8:	d104      	bne.n	186c4 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   186ba:	4b11      	ldr	r3, [pc, #68]	; (18700 <vTraceEnable+0x64>)
   186bc:	0018      	movs	r0, r3
   186be:	4b11      	ldr	r3, [pc, #68]	; (18704 <vTraceEnable+0x68>)
   186c0:	4798      	blx	r3
   186c2:	e006      	b.n	186d2 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   186c4:	687b      	ldr	r3, [r7, #4]
   186c6:	2b00      	cmp	r3, #0
   186c8:	d003      	beq.n	186d2 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   186ca:	4b0f      	ldr	r3, [pc, #60]	; (18708 <vTraceEnable+0x6c>)
   186cc:	0018      	movs	r0, r3
   186ce:	4b0d      	ldr	r3, [pc, #52]	; (18704 <vTraceEnable+0x68>)
   186d0:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   186d2:	4b0e      	ldr	r3, [pc, #56]	; (1870c <vTraceEnable+0x70>)
   186d4:	681b      	ldr	r3, [r3, #0]
   186d6:	2b00      	cmp	r3, #0
   186d8:	d10a      	bne.n	186f0 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   186da:	2396      	movs	r3, #150	; 0x96
   186dc:	005a      	lsls	r2, r3, #1
   186de:	490c      	ldr	r1, [pc, #48]	; (18710 <vTraceEnable+0x74>)
   186e0:	480c      	ldr	r0, [pc, #48]	; (18714 <vTraceEnable+0x78>)
   186e2:	4b0a      	ldr	r3, [pc, #40]	; (1870c <vTraceEnable+0x70>)
   186e4:	9301      	str	r3, [sp, #4]
   186e6:	2304      	movs	r3, #4
   186e8:	9300      	str	r3, [sp, #0]
   186ea:	2300      	movs	r3, #0
   186ec:	4c0a      	ldr	r4, [pc, #40]	; (18718 <vTraceEnable+0x7c>)
   186ee:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   186f0:	46c0      	nop			; (mov r8, r8)
   186f2:	46bd      	mov	sp, r7
   186f4:	b003      	add	sp, #12
   186f6:	bd90      	pop	{r4, r7, pc}
   186f8:	000195e1 	.word	0x000195e1
   186fc:	00018b39 	.word	0x00018b39
   18700:	00036bb4 	.word	0x00036bb4
   18704:	00019c89 	.word	0x00019c89
   18708:	00036bf4 	.word	0x00036bf4
   1870c:	200008cc 	.word	0x200008cc
   18710:	00036c28 	.word	0x00036c28
   18714:	0001871d 	.word	0x0001871d
   18718:	0001c055 	.word	0x0001c055

0001871c <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   1871c:	b580      	push	{r7, lr}
   1871e:	b082      	sub	sp, #8
   18720:	af00      	add	r7, sp, #0
   18722:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   18724:	4b04      	ldr	r3, [pc, #16]	; (18738 <TzCtrl+0x1c>)
   18726:	4798      	blx	r3
   18728:	1e03      	subs	r3, r0, #0
   1872a:	d001      	beq.n	18730 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   1872c:	4b03      	ldr	r3, [pc, #12]	; (1873c <TzCtrl+0x20>)
   1872e:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   18730:	2004      	movs	r0, #4
   18732:	4b03      	ldr	r3, [pc, #12]	; (18740 <TzCtrl+0x24>)
   18734:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   18736:	e7f5      	b.n	18724 <TzCtrl+0x8>
   18738:	00018b7d 	.word	0x00018b7d
   1873c:	000185b9 	.word	0x000185b9
   18740:	0001c3f1 	.word	0x0001c3f1

00018744 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   18744:	b580      	push	{r7, lr}
   18746:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   18748:	4b60      	ldr	r3, [pc, #384]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   1874a:	681b      	ldr	r3, [r3, #0]
   1874c:	2209      	movs	r2, #9
   1874e:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   18750:	4b5e      	ldr	r3, [pc, #376]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   18752:	681b      	ldr	r3, [r3, #0]
   18754:	2264      	movs	r2, #100	; 0x64
   18756:	210a      	movs	r1, #10
   18758:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   1875a:	4b5c      	ldr	r3, [pc, #368]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   1875c:	681b      	ldr	r3, [r3, #0]
   1875e:	2265      	movs	r2, #101	; 0x65
   18760:	210a      	movs	r1, #10
   18762:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   18764:	4b59      	ldr	r3, [pc, #356]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   18766:	681b      	ldr	r3, [r3, #0]
   18768:	2266      	movs	r2, #102	; 0x66
   1876a:	210a      	movs	r1, #10
   1876c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   1876e:	4b57      	ldr	r3, [pc, #348]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   18770:	681b      	ldr	r3, [r3, #0]
   18772:	2267      	movs	r2, #103	; 0x67
   18774:	210f      	movs	r1, #15
   18776:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   18778:	4b54      	ldr	r3, [pc, #336]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   1877a:	681b      	ldr	r3, [r3, #0]
   1877c:	2268      	movs	r2, #104	; 0x68
   1877e:	2105      	movs	r1, #5
   18780:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   18782:	4b52      	ldr	r3, [pc, #328]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   18784:	681b      	ldr	r3, [r3, #0]
   18786:	2269      	movs	r2, #105	; 0x69
   18788:	2105      	movs	r1, #5
   1878a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   1878c:	4b4f      	ldr	r3, [pc, #316]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   1878e:	681b      	ldr	r3, [r3, #0]
   18790:	226a      	movs	r2, #106	; 0x6a
   18792:	2105      	movs	r1, #5
   18794:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   18796:	4b4d      	ldr	r3, [pc, #308]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   18798:	681b      	ldr	r3, [r3, #0]
   1879a:	226b      	movs	r2, #107	; 0x6b
   1879c:	2105      	movs	r1, #5
   1879e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   187a0:	4b4a      	ldr	r3, [pc, #296]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   187a2:	681b      	ldr	r3, [r3, #0]
   187a4:	226c      	movs	r2, #108	; 0x6c
   187a6:	2105      	movs	r1, #5
   187a8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   187aa:	4b48      	ldr	r3, [pc, #288]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   187ac:	681b      	ldr	r3, [r3, #0]
   187ae:	2270      	movs	r2, #112	; 0x70
   187b0:	210f      	movs	r1, #15
   187b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   187b4:	4b45      	ldr	r3, [pc, #276]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   187b6:	681b      	ldr	r3, [r3, #0]
   187b8:	2271      	movs	r2, #113	; 0x71
   187ba:	210f      	movs	r1, #15
   187bc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   187be:	4b43      	ldr	r3, [pc, #268]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   187c0:	681b      	ldr	r3, [r3, #0]
   187c2:	2272      	movs	r2, #114	; 0x72
   187c4:	210f      	movs	r1, #15
   187c6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   187c8:	4b40      	ldr	r3, [pc, #256]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   187ca:	681b      	ldr	r3, [r3, #0]
   187cc:	2273      	movs	r2, #115	; 0x73
   187ce:	210f      	movs	r1, #15
   187d0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   187d2:	4b3e      	ldr	r3, [pc, #248]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   187d4:	681b      	ldr	r3, [r3, #0]
   187d6:	2274      	movs	r2, #116	; 0x74
   187d8:	210f      	movs	r1, #15
   187da:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   187dc:	4b3b      	ldr	r3, [pc, #236]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   187de:	681b      	ldr	r3, [r3, #0]
   187e0:	2275      	movs	r2, #117	; 0x75
   187e2:	210f      	movs	r1, #15
   187e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   187e6:	4b39      	ldr	r3, [pc, #228]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   187e8:	681b      	ldr	r3, [r3, #0]
   187ea:	2276      	movs	r2, #118	; 0x76
   187ec:	210f      	movs	r1, #15
   187ee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   187f0:	4b36      	ldr	r3, [pc, #216]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   187f2:	681b      	ldr	r3, [r3, #0]
   187f4:	2277      	movs	r2, #119	; 0x77
   187f6:	210f      	movs	r1, #15
   187f8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   187fa:	4b34      	ldr	r3, [pc, #208]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   187fc:	681b      	ldr	r3, [r3, #0]
   187fe:	2278      	movs	r2, #120	; 0x78
   18800:	210f      	movs	r1, #15
   18802:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   18804:	4b31      	ldr	r3, [pc, #196]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   18806:	681b      	ldr	r3, [r3, #0]
   18808:	227c      	movs	r2, #124	; 0x7c
   1880a:	2110      	movs	r1, #16
   1880c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   1880e:	4b2f      	ldr	r3, [pc, #188]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   18810:	681b      	ldr	r3, [r3, #0]
   18812:	227d      	movs	r2, #125	; 0x7d
   18814:	2110      	movs	r1, #16
   18816:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   18818:	4b2c      	ldr	r3, [pc, #176]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   1881a:	681b      	ldr	r3, [r3, #0]
   1881c:	227e      	movs	r2, #126	; 0x7e
   1881e:	2110      	movs	r1, #16
   18820:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   18822:	4b2a      	ldr	r3, [pc, #168]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   18824:	681b      	ldr	r3, [r3, #0]
   18826:	227f      	movs	r2, #127	; 0x7f
   18828:	2113      	movs	r1, #19
   1882a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   1882c:	4b27      	ldr	r3, [pc, #156]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   1882e:	681b      	ldr	r3, [r3, #0]
   18830:	2280      	movs	r2, #128	; 0x80
   18832:	2111      	movs	r1, #17
   18834:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   18836:	4b25      	ldr	r3, [pc, #148]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   18838:	681b      	ldr	r3, [r3, #0]
   1883a:	2281      	movs	r2, #129	; 0x81
   1883c:	2110      	movs	r1, #16
   1883e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   18840:	4b22      	ldr	r3, [pc, #136]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   18842:	681b      	ldr	r3, [r3, #0]
   18844:	2282      	movs	r2, #130	; 0x82
   18846:	2113      	movs	r1, #19
   18848:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   1884a:	4b20      	ldr	r3, [pc, #128]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   1884c:	681b      	ldr	r3, [r3, #0]
   1884e:	2283      	movs	r2, #131	; 0x83
   18850:	2113      	movs	r1, #19
   18852:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   18854:	4b1d      	ldr	r3, [pc, #116]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   18856:	681b      	ldr	r3, [r3, #0]
   18858:	2284      	movs	r2, #132	; 0x84
   1885a:	2113      	movs	r1, #19
   1885c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   1885e:	4b1b      	ldr	r3, [pc, #108]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   18860:	681b      	ldr	r3, [r3, #0]
   18862:	2288      	movs	r2, #136	; 0x88
   18864:	2100      	movs	r1, #0
   18866:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   18868:	4b18      	ldr	r3, [pc, #96]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   1886a:	681b      	ldr	r3, [r3, #0]
   1886c:	228a      	movs	r2, #138	; 0x8a
   1886e:	21a0      	movs	r1, #160	; 0xa0
   18870:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   18872:	4b16      	ldr	r3, [pc, #88]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   18874:	681b      	ldr	r3, [r3, #0]
   18876:	228c      	movs	r2, #140	; 0x8c
   18878:	21a0      	movs	r1, #160	; 0xa0
   1887a:	0049      	lsls	r1, r1, #1
   1887c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   1887e:	4b13      	ldr	r3, [pc, #76]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   18880:	681b      	ldr	r3, [r3, #0]
   18882:	228e      	movs	r2, #142	; 0x8e
   18884:	21f0      	movs	r1, #240	; 0xf0
   18886:	0049      	lsls	r1, r1, #1
   18888:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1888a:	4b10      	ldr	r3, [pc, #64]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   1888c:	681b      	ldr	r3, [r3, #0]
   1888e:	2290      	movs	r2, #144	; 0x90
   18890:	490f      	ldr	r1, [pc, #60]	; (188d0 <vTraceInitObjectPropertyTable+0x18c>)
   18892:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   18894:	4b0d      	ldr	r3, [pc, #52]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   18896:	681b      	ldr	r3, [r3, #0]
   18898:	2292      	movs	r2, #146	; 0x92
   1889a:	490e      	ldr	r1, [pc, #56]	; (188d4 <vTraceInitObjectPropertyTable+0x190>)
   1889c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1889e:	4b0b      	ldr	r3, [pc, #44]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   188a0:	681b      	ldr	r3, [r3, #0]
   188a2:	2294      	movs	r2, #148	; 0x94
   188a4:	490c      	ldr	r1, [pc, #48]	; (188d8 <vTraceInitObjectPropertyTable+0x194>)
   188a6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   188a8:	4b08      	ldr	r3, [pc, #32]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   188aa:	681b      	ldr	r3, [r3, #0]
   188ac:	2296      	movs	r2, #150	; 0x96
   188ae:	490b      	ldr	r1, [pc, #44]	; (188dc <vTraceInitObjectPropertyTable+0x198>)
   188b0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   188b2:	4b06      	ldr	r3, [pc, #24]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   188b4:	681b      	ldr	r3, [r3, #0]
   188b6:	2298      	movs	r2, #152	; 0x98
   188b8:	218c      	movs	r1, #140	; 0x8c
   188ba:	00c9      	lsls	r1, r1, #3
   188bc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   188be:	4b03      	ldr	r3, [pc, #12]	; (188cc <vTraceInitObjectPropertyTable+0x188>)
   188c0:	681b      	ldr	r3, [r3, #0]
   188c2:	4a07      	ldr	r2, [pc, #28]	; (188e0 <vTraceInitObjectPropertyTable+0x19c>)
   188c4:	661a      	str	r2, [r3, #96]	; 0x60
}
   188c6:	46c0      	nop			; (mov r8, r8)
   188c8:	46bd      	mov	sp, r7
   188ca:	bd80      	pop	{r7, pc}
   188cc:	200009e4 	.word	0x200009e4
   188d0:	000002fd 	.word	0x000002fd
   188d4:	00000352 	.word	0x00000352
   188d8:	000003a2 	.word	0x000003a2
   188dc:	00000401 	.word	0x00000401
   188e0:	000004bf 	.word	0x000004bf

000188e4 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   188e4:	b580      	push	{r7, lr}
   188e6:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   188e8:	4b2e      	ldr	r3, [pc, #184]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   188ea:	2200      	movs	r2, #0
   188ec:	825a      	strh	r2, [r3, #18]
   188ee:	4b2d      	ldr	r3, [pc, #180]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   188f0:	8a5a      	ldrh	r2, [r3, #18]
   188f2:	4b2c      	ldr	r3, [pc, #176]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   188f4:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   188f6:	4b2b      	ldr	r3, [pc, #172]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   188f8:	220a      	movs	r2, #10
   188fa:	829a      	strh	r2, [r3, #20]
   188fc:	4b29      	ldr	r3, [pc, #164]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   188fe:	8a9a      	ldrh	r2, [r3, #20]
   18900:	4b28      	ldr	r3, [pc, #160]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18902:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   18904:	4b27      	ldr	r3, [pc, #156]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18906:	2214      	movs	r2, #20
   18908:	82da      	strh	r2, [r3, #22]
   1890a:	4b26      	ldr	r3, [pc, #152]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   1890c:	8ada      	ldrh	r2, [r3, #22]
   1890e:	4b25      	ldr	r3, [pc, #148]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18910:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   18912:	4b24      	ldr	r3, [pc, #144]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18914:	221e      	movs	r2, #30
   18916:	831a      	strh	r2, [r3, #24]
   18918:	4b22      	ldr	r3, [pc, #136]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   1891a:	8b1a      	ldrh	r2, [r3, #24]
   1891c:	4b21      	ldr	r3, [pc, #132]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   1891e:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   18920:	4b20      	ldr	r3, [pc, #128]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18922:	222d      	movs	r2, #45	; 0x2d
   18924:	835a      	strh	r2, [r3, #26]
   18926:	4b1f      	ldr	r3, [pc, #124]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18928:	8b5a      	ldrh	r2, [r3, #26]
   1892a:	4b1e      	ldr	r3, [pc, #120]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   1892c:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   1892e:	4b1d      	ldr	r3, [pc, #116]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18930:	2232      	movs	r2, #50	; 0x32
   18932:	839a      	strh	r2, [r3, #28]
   18934:	4b1b      	ldr	r3, [pc, #108]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18936:	8b9a      	ldrh	r2, [r3, #28]
   18938:	4b1a      	ldr	r3, [pc, #104]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   1893a:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   1893c:	4b19      	ldr	r3, [pc, #100]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   1893e:	2237      	movs	r2, #55	; 0x37
   18940:	83da      	strh	r2, [r3, #30]
   18942:	4b18      	ldr	r3, [pc, #96]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18944:	8bda      	ldrh	r2, [r3, #30]
   18946:	4b17      	ldr	r3, [pc, #92]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18948:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1894a:	4b16      	ldr	r3, [pc, #88]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   1894c:	223c      	movs	r2, #60	; 0x3c
   1894e:	841a      	strh	r2, [r3, #32]
   18950:	4b14      	ldr	r3, [pc, #80]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18952:	8c1a      	ldrh	r2, [r3, #32]
   18954:	4b13      	ldr	r3, [pc, #76]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18956:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   18958:	4b12      	ldr	r3, [pc, #72]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   1895a:	2241      	movs	r2, #65	; 0x41
   1895c:	845a      	strh	r2, [r3, #34]	; 0x22
   1895e:	4b11      	ldr	r3, [pc, #68]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18960:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   18962:	4b10      	ldr	r3, [pc, #64]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18964:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   18966:	4b0f      	ldr	r3, [pc, #60]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18968:	2209      	movs	r2, #9
   1896a:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   1896c:	4b0d      	ldr	r3, [pc, #52]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   1896e:	2213      	movs	r2, #19
   18970:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   18972:	4b0c      	ldr	r3, [pc, #48]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18974:	221d      	movs	r2, #29
   18976:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   18978:	4b0a      	ldr	r3, [pc, #40]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   1897a:	222c      	movs	r2, #44	; 0x2c
   1897c:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   1897e:	4b09      	ldr	r3, [pc, #36]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18980:	2231      	movs	r2, #49	; 0x31
   18982:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   18984:	4b07      	ldr	r3, [pc, #28]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18986:	2236      	movs	r2, #54	; 0x36
   18988:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   1898a:	4b06      	ldr	r3, [pc, #24]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   1898c:	223b      	movs	r2, #59	; 0x3b
   1898e:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   18990:	4b04      	ldr	r3, [pc, #16]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18992:	2240      	movs	r2, #64	; 0x40
   18994:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   18996:	4b03      	ldr	r3, [pc, #12]	; (189a4 <vTraceInitObjectHandleStack+0xc0>)
   18998:	2245      	movs	r2, #69	; 0x45
   1899a:	869a      	strh	r2, [r3, #52]	; 0x34
}
   1899c:	46c0      	nop			; (mov r8, r8)
   1899e:	46bd      	mov	sp, r7
   189a0:	bd80      	pop	{r7, pc}
   189a2:	46c0      	nop			; (mov r8, r8)
   189a4:	20000954 	.word	0x20000954

000189a8 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   189a8:	b580      	push	{r7, lr}
   189aa:	b082      	sub	sp, #8
   189ac:	af00      	add	r7, sp, #0
   189ae:	0002      	movs	r2, r0
   189b0:	1dfb      	adds	r3, r7, #7
   189b2:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   189b4:	1dfb      	adds	r3, r7, #7
   189b6:	781b      	ldrb	r3, [r3, #0]
   189b8:	2b08      	cmp	r3, #8
   189ba:	d816      	bhi.n	189ea <pszTraceGetErrorNotEnoughHandles+0x42>
   189bc:	009a      	lsls	r2, r3, #2
   189be:	4b0d      	ldr	r3, [pc, #52]	; (189f4 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   189c0:	18d3      	adds	r3, r2, r3
   189c2:	681b      	ldr	r3, [r3, #0]
   189c4:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   189c6:	4b0c      	ldr	r3, [pc, #48]	; (189f8 <pszTraceGetErrorNotEnoughHandles+0x50>)
   189c8:	e010      	b.n	189ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   189ca:	4b0c      	ldr	r3, [pc, #48]	; (189fc <pszTraceGetErrorNotEnoughHandles+0x54>)
   189cc:	e00e      	b.n	189ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   189ce:	4b0c      	ldr	r3, [pc, #48]	; (18a00 <pszTraceGetErrorNotEnoughHandles+0x58>)
   189d0:	e00c      	b.n	189ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   189d2:	4b0c      	ldr	r3, [pc, #48]	; (18a04 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   189d4:	e00a      	b.n	189ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   189d6:	4b0c      	ldr	r3, [pc, #48]	; (18a08 <pszTraceGetErrorNotEnoughHandles+0x60>)
   189d8:	e008      	b.n	189ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   189da:	4b0c      	ldr	r3, [pc, #48]	; (18a0c <pszTraceGetErrorNotEnoughHandles+0x64>)
   189dc:	e006      	b.n	189ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   189de:	4b0c      	ldr	r3, [pc, #48]	; (18a10 <pszTraceGetErrorNotEnoughHandles+0x68>)
   189e0:	e004      	b.n	189ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   189e2:	4b0c      	ldr	r3, [pc, #48]	; (18a14 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   189e4:	e002      	b.n	189ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   189e6:	4b0c      	ldr	r3, [pc, #48]	; (18a18 <pszTraceGetErrorNotEnoughHandles+0x70>)
   189e8:	e000      	b.n	189ec <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   189ea:	4b0c      	ldr	r3, [pc, #48]	; (18a1c <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   189ec:	0018      	movs	r0, r3
   189ee:	46bd      	mov	sp, r7
   189f0:	b002      	add	sp, #8
   189f2:	bd80      	pop	{r7, pc}
   189f4:	00036f30 	.word	0x00036f30
   189f8:	00036c30 	.word	0x00036c30
   189fc:	00036c78 	.word	0x00036c78
   18a00:	00036cc0 	.word	0x00036cc0
   18a04:	00036d14 	.word	0x00036d14
   18a08:	00036d60 	.word	0x00036d60
   18a0c:	00036dac 	.word	0x00036dac
   18a10:	00036df8 	.word	0x00036df8
   18a14:	00036e4c 	.word	0x00036e4c
   18a18:	00036ea4 	.word	0x00036ea4
   18a1c:	00036f00 	.word	0x00036f00

00018a20 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   18a20:	b590      	push	{r4, r7, lr}
   18a22:	b087      	sub	sp, #28
   18a24:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   18a26:	2317      	movs	r3, #23
   18a28:	18fb      	adds	r3, r7, r3
   18a2a:	2200      	movs	r2, #0
   18a2c:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   18a2e:	4b36      	ldr	r3, [pc, #216]	; (18b08 <uiTraceStart+0xe8>)
   18a30:	681b      	ldr	r3, [r3, #0]
   18a32:	2b00      	cmp	r3, #0
   18a34:	d10b      	bne.n	18a4e <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   18a36:	4b34      	ldr	r3, [pc, #208]	; (18b08 <uiTraceStart+0xe8>)
   18a38:	681b      	ldr	r3, [r3, #0]
   18a3a:	2b00      	cmp	r3, #0
   18a3c:	d105      	bne.n	18a4a <uiTraceStart+0x2a>
   18a3e:	4b33      	ldr	r3, [pc, #204]	; (18b0c <uiTraceStart+0xec>)
   18a40:	0018      	movs	r0, r3
   18a42:	4b33      	ldr	r3, [pc, #204]	; (18b10 <uiTraceStart+0xf0>)
   18a44:	4798      	blx	r3
   18a46:	2300      	movs	r3, #0
   18a48:	e059      	b.n	18afe <uiTraceStart+0xde>
		return 0;
   18a4a:	2300      	movs	r3, #0
   18a4c:	e057      	b.n	18afe <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   18a4e:	4b2e      	ldr	r3, [pc, #184]	; (18b08 <uiTraceStart+0xe8>)
   18a50:	681b      	ldr	r3, [r3, #0]
   18a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18a54:	2b01      	cmp	r3, #1
   18a56:	d101      	bne.n	18a5c <uiTraceStart+0x3c>
		return 1; /* Already running */
   18a58:	2301      	movs	r3, #1
   18a5a:	e050      	b.n	18afe <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   18a5c:	4b2d      	ldr	r3, [pc, #180]	; (18b14 <uiTraceStart+0xf4>)
   18a5e:	681b      	ldr	r3, [r3, #0]
   18a60:	2b00      	cmp	r3, #0
   18a62:	d149      	bne.n	18af8 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18a64:	f3ef 8310 	mrs	r3, PRIMASK
   18a68:	60bb      	str	r3, [r7, #8]
  return(result);
   18a6a:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   18a6c:	613b      	str	r3, [r7, #16]
   18a6e:	2301      	movs	r3, #1
   18a70:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18a72:	68fb      	ldr	r3, [r7, #12]
   18a74:	f383 8810 	msr	PRIMASK, r3
   18a78:	4b27      	ldr	r3, [pc, #156]	; (18b18 <uiTraceStart+0xf8>)
   18a7a:	681b      	ldr	r3, [r3, #0]
   18a7c:	1c5a      	adds	r2, r3, #1
   18a7e:	4b26      	ldr	r3, [pc, #152]	; (18b18 <uiTraceStart+0xf8>)
   18a80:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   18a82:	4b21      	ldr	r3, [pc, #132]	; (18b08 <uiTraceStart+0xe8>)
   18a84:	681b      	ldr	r3, [r3, #0]
   18a86:	2201      	movs	r2, #1
   18a88:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   18a8a:	4b24      	ldr	r3, [pc, #144]	; (18b1c <uiTraceStart+0xfc>)
   18a8c:	4798      	blx	r3
   18a8e:	0003      	movs	r3, r0
   18a90:	0018      	movs	r0, r3
   18a92:	4b23      	ldr	r3, [pc, #140]	; (18b20 <uiTraceStart+0x100>)
   18a94:	4798      	blx	r3
   18a96:	0003      	movs	r3, r0
   18a98:	001a      	movs	r2, r3
   18a9a:	2317      	movs	r3, #23
   18a9c:	18fb      	adds	r3, r7, r3
   18a9e:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   18aa0:	2317      	movs	r3, #23
   18aa2:	18fb      	adds	r3, r7, r3
   18aa4:	781b      	ldrb	r3, [r3, #0]
   18aa6:	2b00      	cmp	r3, #0
   18aa8:	d116      	bne.n	18ad8 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   18aaa:	2317      	movs	r3, #23
   18aac:	18fc      	adds	r4, r7, r3
   18aae:	2003      	movs	r0, #3
   18ab0:	4b1c      	ldr	r3, [pc, #112]	; (18b24 <uiTraceStart+0x104>)
   18ab2:	4798      	blx	r3
   18ab4:	0003      	movs	r3, r0
   18ab6:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   18ab8:	4a1b      	ldr	r2, [pc, #108]	; (18b28 <uiTraceStart+0x108>)
   18aba:	2317      	movs	r3, #23
   18abc:	18fb      	adds	r3, r7, r3
   18abe:	781b      	ldrb	r3, [r3, #0]
   18ac0:	0019      	movs	r1, r3
   18ac2:	2003      	movs	r0, #3
   18ac4:	4b19      	ldr	r3, [pc, #100]	; (18b2c <uiTraceStart+0x10c>)
   18ac6:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   18ac8:	2317      	movs	r3, #23
   18aca:	18fb      	adds	r3, r7, r3
   18acc:	781b      	ldrb	r3, [r3, #0]
   18ace:	2200      	movs	r2, #0
   18ad0:	0019      	movs	r1, r3
   18ad2:	2003      	movs	r0, #3
   18ad4:	4b16      	ldr	r3, [pc, #88]	; (18b30 <uiTraceStart+0x110>)
   18ad6:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   18ad8:	2317      	movs	r3, #23
   18ada:	18fb      	adds	r3, r7, r3
   18adc:	781b      	ldrb	r3, [r3, #0]
   18ade:	0018      	movs	r0, r3
   18ae0:	4b14      	ldr	r3, [pc, #80]	; (18b34 <uiTraceStart+0x114>)
   18ae2:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   18ae4:	4b0c      	ldr	r3, [pc, #48]	; (18b18 <uiTraceStart+0xf8>)
   18ae6:	681b      	ldr	r3, [r3, #0]
   18ae8:	1e5a      	subs	r2, r3, #1
   18aea:	4b0b      	ldr	r3, [pc, #44]	; (18b18 <uiTraceStart+0xf8>)
   18aec:	601a      	str	r2, [r3, #0]
   18aee:	693b      	ldr	r3, [r7, #16]
   18af0:	607b      	str	r3, [r7, #4]
   18af2:	687b      	ldr	r3, [r7, #4]
   18af4:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   18af8:	4b03      	ldr	r3, [pc, #12]	; (18b08 <uiTraceStart+0xe8>)
   18afa:	681b      	ldr	r3, [r3, #0]
   18afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   18afe:	0018      	movs	r0, r3
   18b00:	46bd      	mov	sp, r7
   18b02:	b007      	add	sp, #28
   18b04:	bd90      	pop	{r4, r7, pc}
   18b06:	46c0      	nop			; (mov r8, r8)
   18b08:	200009e4 	.word	0x200009e4
   18b0c:	00036f54 	.word	0x00036f54
   18b10:	00019c89 	.word	0x00019c89
   18b14:	20000944 	.word	0x20000944
   18b18:	2000093c 	.word	0x2000093c
   18b1c:	00018689 	.word	0x00018689
   18b20:	000183cd 	.word	0x000183cd
   18b24:	0001996d 	.word	0x0001996d
   18b28:	00036f98 	.word	0x00036f98
   18b2c:	00019b9d 	.word	0x00019b9d
   18b30:	00019301 	.word	0x00019301
   18b34:	000191e9 	.word	0x000191e9

00018b38 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   18b38:	b580      	push	{r7, lr}
   18b3a:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   18b3c:	4b02      	ldr	r3, [pc, #8]	; (18b48 <vTraceStart+0x10>)
   18b3e:	4798      	blx	r3
}
   18b40:	46c0      	nop			; (mov r8, r8)
   18b42:	46bd      	mov	sp, r7
   18b44:	bd80      	pop	{r7, pc}
   18b46:	46c0      	nop			; (mov r8, r8)
   18b48:	00018a21 	.word	0x00018a21

00018b4c <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   18b4c:	b580      	push	{r7, lr}
   18b4e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   18b50:	4b08      	ldr	r3, [pc, #32]	; (18b74 <vTraceStop+0x28>)
   18b52:	681b      	ldr	r3, [r3, #0]
   18b54:	2b00      	cmp	r3, #0
   18b56:	d003      	beq.n	18b60 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   18b58:	4b06      	ldr	r3, [pc, #24]	; (18b74 <vTraceStop+0x28>)
   18b5a:	681b      	ldr	r3, [r3, #0]
   18b5c:	2200      	movs	r2, #0
   18b5e:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   18b60:	4b05      	ldr	r3, [pc, #20]	; (18b78 <vTraceStop+0x2c>)
   18b62:	681b      	ldr	r3, [r3, #0]
   18b64:	2b00      	cmp	r3, #0
   18b66:	d002      	beq.n	18b6e <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   18b68:	4b03      	ldr	r3, [pc, #12]	; (18b78 <vTraceStop+0x2c>)
   18b6a:	681b      	ldr	r3, [r3, #0]
   18b6c:	4798      	blx	r3
	}
}
   18b6e:	46c0      	nop			; (mov r8, r8)
   18b70:	46bd      	mov	sp, r7
   18b72:	bd80      	pop	{r7, pc}
   18b74:	200009e4 	.word	0x200009e4
   18b78:	2000094c 	.word	0x2000094c

00018b7c <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   18b7c:	b580      	push	{r7, lr}
   18b7e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   18b80:	4b05      	ldr	r3, [pc, #20]	; (18b98 <xTraceIsRecordingEnabled+0x1c>)
   18b82:	681b      	ldr	r3, [r3, #0]
   18b84:	2b00      	cmp	r3, #0
   18b86:	d003      	beq.n	18b90 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   18b88:	4b03      	ldr	r3, [pc, #12]	; (18b98 <xTraceIsRecordingEnabled+0x1c>)
   18b8a:	681b      	ldr	r3, [r3, #0]
   18b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18b8e:	e000      	b.n	18b92 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   18b90:	2300      	movs	r3, #0
	}
}
   18b92:	0018      	movs	r0, r3
   18b94:	46bd      	mov	sp, r7
   18b96:	bd80      	pop	{r7, pc}
   18b98:	200009e4 	.word	0x200009e4

00018b9c <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   18b9c:	b590      	push	{r4, r7, lr}
   18b9e:	b089      	sub	sp, #36	; 0x24
   18ba0:	af00      	add	r7, sp, #0
   18ba2:	0002      	movs	r2, r0
   18ba4:	1dfb      	adds	r3, r7, #7
   18ba6:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   18ba8:	1dfb      	adds	r3, r7, #7
   18baa:	781b      	ldrb	r3, [r3, #0]
   18bac:	2b00      	cmp	r3, #0
   18bae:	d057      	beq.n	18c60 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   18bb0:	4b2e      	ldr	r3, [pc, #184]	; (18c6c <prvTraceStoreTaskReady+0xd0>)
   18bb2:	681b      	ldr	r3, [r3, #0]
   18bb4:	2b00      	cmp	r3, #0
   18bb6:	d055      	beq.n	18c64 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   18bb8:	1dfb      	adds	r3, r7, #7
   18bba:	781b      	ldrb	r3, [r3, #0]
   18bbc:	2b0f      	cmp	r3, #15
   18bbe:	d904      	bls.n	18bca <prvTraceStoreTaskReady+0x2e>
   18bc0:	4b2b      	ldr	r3, [pc, #172]	; (18c70 <prvTraceStoreTaskReady+0xd4>)
   18bc2:	0018      	movs	r0, r3
   18bc4:	4b2b      	ldr	r3, [pc, #172]	; (18c74 <prvTraceStoreTaskReady+0xd8>)
   18bc6:	4798      	blx	r3
   18bc8:	e04d      	b.n	18c66 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   18bca:	4b2b      	ldr	r3, [pc, #172]	; (18c78 <prvTraceStoreTaskReady+0xdc>)
   18bcc:	681b      	ldr	r3, [r3, #0]
   18bce:	2b00      	cmp	r3, #0
   18bd0:	d004      	beq.n	18bdc <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   18bd2:	4b2a      	ldr	r3, [pc, #168]	; (18c7c <prvTraceStoreTaskReady+0xe0>)
   18bd4:	0018      	movs	r0, r3
   18bd6:	4b27      	ldr	r3, [pc, #156]	; (18c74 <prvTraceStoreTaskReady+0xd8>)
   18bd8:	4798      	blx	r3
		return;
   18bda:	e044      	b.n	18c66 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18bdc:	f3ef 8310 	mrs	r3, PRIMASK
   18be0:	60fb      	str	r3, [r7, #12]
  return(result);
   18be2:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   18be4:	61fb      	str	r3, [r7, #28]
   18be6:	2301      	movs	r3, #1
   18be8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18bea:	693b      	ldr	r3, [r7, #16]
   18bec:	f383 8810 	msr	PRIMASK, r3
   18bf0:	4b21      	ldr	r3, [pc, #132]	; (18c78 <prvTraceStoreTaskReady+0xdc>)
   18bf2:	681b      	ldr	r3, [r3, #0]
   18bf4:	1c5a      	adds	r2, r3, #1
   18bf6:	4b20      	ldr	r3, [pc, #128]	; (18c78 <prvTraceStoreTaskReady+0xdc>)
   18bf8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   18bfa:	4b21      	ldr	r3, [pc, #132]	; (18c80 <prvTraceStoreTaskReady+0xe4>)
   18bfc:	681b      	ldr	r3, [r3, #0]
   18bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18c00:	2b00      	cmp	r3, #0
   18c02:	d022      	beq.n	18c4a <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18c04:	231a      	movs	r3, #26
   18c06:	18fc      	adds	r4, r7, r3
   18c08:	4b1e      	ldr	r3, [pc, #120]	; (18c84 <prvTraceStoreTaskReady+0xe8>)
   18c0a:	0018      	movs	r0, r3
   18c0c:	4b1e      	ldr	r3, [pc, #120]	; (18c88 <prvTraceStoreTaskReady+0xec>)
   18c0e:	4798      	blx	r3
   18c10:	0003      	movs	r3, r0
   18c12:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   18c14:	2319      	movs	r3, #25
   18c16:	18fb      	adds	r3, r7, r3
   18c18:	1dfa      	adds	r2, r7, #7
   18c1a:	7812      	ldrb	r2, [r2, #0]
   18c1c:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   18c1e:	4b1b      	ldr	r3, [pc, #108]	; (18c8c <prvTraceStoreTaskReady+0xf0>)
   18c20:	4798      	blx	r3
   18c22:	0003      	movs	r3, r0
   18c24:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   18c26:	697b      	ldr	r3, [r7, #20]
   18c28:	2b00      	cmp	r3, #0
   18c2a:	d00e      	beq.n	18c4a <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   18c2c:	697b      	ldr	r3, [r7, #20]
   18c2e:	2202      	movs	r2, #2
   18c30:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   18c32:	697b      	ldr	r3, [r7, #20]
   18c34:	221a      	movs	r2, #26
   18c36:	18ba      	adds	r2, r7, r2
   18c38:	8812      	ldrh	r2, [r2, #0]
   18c3a:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   18c3c:	697b      	ldr	r3, [r7, #20]
   18c3e:	2219      	movs	r2, #25
   18c40:	18ba      	adds	r2, r7, r2
   18c42:	7812      	ldrb	r2, [r2, #0]
   18c44:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   18c46:	4b12      	ldr	r3, [pc, #72]	; (18c90 <prvTraceStoreTaskReady+0xf4>)
   18c48:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18c4a:	4b0b      	ldr	r3, [pc, #44]	; (18c78 <prvTraceStoreTaskReady+0xdc>)
   18c4c:	681b      	ldr	r3, [r3, #0]
   18c4e:	1e5a      	subs	r2, r3, #1
   18c50:	4b09      	ldr	r3, [pc, #36]	; (18c78 <prvTraceStoreTaskReady+0xdc>)
   18c52:	601a      	str	r2, [r3, #0]
   18c54:	69fb      	ldr	r3, [r7, #28]
   18c56:	60bb      	str	r3, [r7, #8]
   18c58:	68bb      	ldr	r3, [r7, #8]
   18c5a:	f383 8810 	msr	PRIMASK, r3
   18c5e:	e002      	b.n	18c66 <prvTraceStoreTaskReady+0xca>
		return;
   18c60:	46c0      	nop			; (mov r8, r8)
   18c62:	e000      	b.n	18c66 <prvTraceStoreTaskReady+0xca>
		return;
   18c64:	46c0      	nop			; (mov r8, r8)
}
   18c66:	46bd      	mov	sp, r7
   18c68:	b009      	add	sp, #36	; 0x24
   18c6a:	bd90      	pop	{r4, r7, pc}
   18c6c:	200000b4 	.word	0x200000b4
   18c70:	00037300 	.word	0x00037300
   18c74:	00019c89 	.word	0x00019c89
   18c78:	2000093c 	.word	0x2000093c
   18c7c:	00037340 	.word	0x00037340
   18c80:	200009e4 	.word	0x200009e4
   18c84:	0000ffff 	.word	0x0000ffff
   18c88:	00019e9d 	.word	0x00019e9d
   18c8c:	00019841 	.word	0x00019841
   18c90:	00019e45 	.word	0x00019e45

00018c94 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   18c94:	b580      	push	{r7, lr}
   18c96:	b08e      	sub	sp, #56	; 0x38
   18c98:	af00      	add	r7, sp, #0
   18c9a:	60f8      	str	r0, [r7, #12]
   18c9c:	60b9      	str	r1, [r7, #8]
   18c9e:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   18ca0:	4b48      	ldr	r3, [pc, #288]	; (18dc4 <vTraceStoreMemMangEvent+0x130>)
   18ca2:	681b      	ldr	r3, [r3, #0]
   18ca4:	2b00      	cmp	r3, #0
   18ca6:	d100      	bne.n	18caa <vTraceStoreMemMangEvent+0x16>
   18ca8:	e088      	b.n	18dbc <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   18caa:	687b      	ldr	r3, [r7, #4]
   18cac:	2b00      	cmp	r3, #0
   18cae:	da03      	bge.n	18cb8 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   18cb0:	687b      	ldr	r3, [r7, #4]
   18cb2:	425b      	negs	r3, r3
   18cb4:	637b      	str	r3, [r7, #52]	; 0x34
   18cb6:	e001      	b.n	18cbc <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   18cb8:	687b      	ldr	r3, [r7, #4]
   18cba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18cbc:	f3ef 8310 	mrs	r3, PRIMASK
   18cc0:	61bb      	str	r3, [r7, #24]
  return(result);
   18cc2:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   18cc4:	633b      	str	r3, [r7, #48]	; 0x30
   18cc6:	2301      	movs	r3, #1
   18cc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18cca:	69fb      	ldr	r3, [r7, #28]
   18ccc:	f383 8810 	msr	PRIMASK, r3
   18cd0:	4b3d      	ldr	r3, [pc, #244]	; (18dc8 <vTraceStoreMemMangEvent+0x134>)
   18cd2:	681b      	ldr	r3, [r3, #0]
   18cd4:	1c5a      	adds	r2, r3, #1
   18cd6:	4b3c      	ldr	r3, [pc, #240]	; (18dc8 <vTraceStoreMemMangEvent+0x134>)
   18cd8:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   18cda:	68bb      	ldr	r3, [r7, #8]
   18cdc:	2b00      	cmp	r3, #0
   18cde:	d005      	beq.n	18cec <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   18ce0:	4b3a      	ldr	r3, [pc, #232]	; (18dcc <vTraceStoreMemMangEvent+0x138>)
   18ce2:	681a      	ldr	r2, [r3, #0]
   18ce4:	687b      	ldr	r3, [r7, #4]
   18ce6:	18d2      	adds	r2, r2, r3
   18ce8:	4b38      	ldr	r3, [pc, #224]	; (18dcc <vTraceStoreMemMangEvent+0x138>)
   18cea:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   18cec:	4b35      	ldr	r3, [pc, #212]	; (18dc4 <vTraceStoreMemMangEvent+0x130>)
   18cee:	681b      	ldr	r3, [r3, #0]
   18cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18cf2:	2b00      	cmp	r3, #0
   18cf4:	d057      	beq.n	18da6 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   18cf6:	20ff      	movs	r0, #255	; 0xff
   18cf8:	4b35      	ldr	r3, [pc, #212]	; (18dd0 <vTraceStoreMemMangEvent+0x13c>)
   18cfa:	4798      	blx	r3
   18cfc:	0003      	movs	r3, r0
   18cfe:	001a      	movs	r2, r3
   18d00:	232f      	movs	r3, #47	; 0x2f
   18d02:	18fb      	adds	r3, r7, r3
   18d04:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   18d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18d08:	4a32      	ldr	r2, [pc, #200]	; (18dd4 <vTraceStoreMemMangEvent+0x140>)
   18d0a:	0019      	movs	r1, r3
   18d0c:	0010      	movs	r0, r2
   18d0e:	4b32      	ldr	r3, [pc, #200]	; (18dd8 <vTraceStoreMemMangEvent+0x144>)
   18d10:	4798      	blx	r3
   18d12:	0002      	movs	r2, r0
   18d14:	232c      	movs	r3, #44	; 0x2c
   18d16:	18fb      	adds	r3, r7, r3
   18d18:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   18d1a:	4b30      	ldr	r3, [pc, #192]	; (18ddc <vTraceStoreMemMangEvent+0x148>)
   18d1c:	4798      	blx	r3
   18d1e:	0003      	movs	r3, r0
   18d20:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   18d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18d24:	2b00      	cmp	r3, #0
   18d26:	d03e      	beq.n	18da6 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   18d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18d2a:	222f      	movs	r2, #47	; 0x2f
   18d2c:	18ba      	adds	r2, r7, r2
   18d2e:	7812      	ldrb	r2, [r2, #0]
   18d30:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   18d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18d34:	2200      	movs	r2, #0
   18d36:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   18d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18d3a:	222c      	movs	r2, #44	; 0x2c
   18d3c:	18ba      	adds	r2, r7, r2
   18d3e:	8812      	ldrh	r2, [r2, #0]
   18d40:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18d42:	4b27      	ldr	r3, [pc, #156]	; (18de0 <vTraceStoreMemMangEvent+0x14c>)
   18d44:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   18d46:	68bb      	ldr	r3, [r7, #8]
   18d48:	4a22      	ldr	r2, [pc, #136]	; (18dd4 <vTraceStoreMemMangEvent+0x140>)
   18d4a:	0019      	movs	r1, r3
   18d4c:	0010      	movs	r0, r2
   18d4e:	4b22      	ldr	r3, [pc, #136]	; (18dd8 <vTraceStoreMemMangEvent+0x144>)
   18d50:	4798      	blx	r3
   18d52:	0002      	movs	r2, r0
   18d54:	2326      	movs	r3, #38	; 0x26
   18d56:	18fb      	adds	r3, r7, r3
   18d58:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   18d5a:	2325      	movs	r3, #37	; 0x25
   18d5c:	18fb      	adds	r3, r7, r3
   18d5e:	2200      	movs	r2, #0
   18d60:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   18d62:	4b1e      	ldr	r3, [pc, #120]	; (18ddc <vTraceStoreMemMangEvent+0x148>)
   18d64:	4798      	blx	r3
   18d66:	0003      	movs	r3, r0
   18d68:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   18d6a:	6a3b      	ldr	r3, [r7, #32]
   18d6c:	2b00      	cmp	r3, #0
   18d6e:	d01a      	beq.n	18da6 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   18d70:	6a3b      	ldr	r3, [r7, #32]
   18d72:	2226      	movs	r2, #38	; 0x26
   18d74:	18ba      	adds	r2, r7, r2
   18d76:	8812      	ldrh	r2, [r2, #0]
   18d78:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   18d7a:	6a3b      	ldr	r3, [r7, #32]
   18d7c:	2225      	movs	r2, #37	; 0x25
   18d7e:	18ba      	adds	r2, r7, r2
   18d80:	7812      	ldrb	r2, [r2, #0]
   18d82:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   18d84:	68fb      	ldr	r3, [r7, #12]
   18d86:	b2db      	uxtb	r3, r3
   18d88:	3301      	adds	r3, #1
   18d8a:	b2da      	uxtb	r2, r3
   18d8c:	6a3b      	ldr	r3, [r7, #32]
   18d8e:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   18d90:	68fb      	ldr	r3, [r7, #12]
   18d92:	b2da      	uxtb	r2, r3
   18d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18d96:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   18d98:	4b11      	ldr	r3, [pc, #68]	; (18de0 <vTraceStoreMemMangEvent+0x14c>)
   18d9a:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   18d9c:	4b09      	ldr	r3, [pc, #36]	; (18dc4 <vTraceStoreMemMangEvent+0x130>)
   18d9e:	681b      	ldr	r3, [r3, #0]
   18da0:	4a0a      	ldr	r2, [pc, #40]	; (18dcc <vTraceStoreMemMangEvent+0x138>)
   18da2:	6812      	ldr	r2, [r2, #0]
   18da4:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   18da6:	4b08      	ldr	r3, [pc, #32]	; (18dc8 <vTraceStoreMemMangEvent+0x134>)
   18da8:	681b      	ldr	r3, [r3, #0]
   18daa:	1e5a      	subs	r2, r3, #1
   18dac:	4b06      	ldr	r3, [pc, #24]	; (18dc8 <vTraceStoreMemMangEvent+0x134>)
   18dae:	601a      	str	r2, [r3, #0]
   18db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18db2:	617b      	str	r3, [r7, #20]
   18db4:	697b      	ldr	r3, [r7, #20]
   18db6:	f383 8810 	msr	PRIMASK, r3
   18dba:	e000      	b.n	18dbe <vTraceStoreMemMangEvent+0x12a>
		return;
   18dbc:	46c0      	nop			; (mov r8, r8)
}
   18dbe:	46bd      	mov	sp, r7
   18dc0:	b00e      	add	sp, #56	; 0x38
   18dc2:	bd80      	pop	{r7, pc}
   18dc4:	200009e4 	.word	0x200009e4
   18dc8:	2000093c 	.word	0x2000093c
   18dcc:	20000950 	.word	0x20000950
   18dd0:	00019e9d 	.word	0x00019e9d
   18dd4:	0000ffff 	.word	0x0000ffff
   18dd8:	00019061 	.word	0x00019061
   18ddc:	00019841 	.word	0x00019841
   18de0:	00019e45 	.word	0x00019e45

00018de4 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   18de4:	b590      	push	{r4, r7, lr}
   18de6:	b08b      	sub	sp, #44	; 0x2c
   18de8:	af00      	add	r7, sp, #0
   18dea:	60f8      	str	r0, [r7, #12]
   18dec:	607a      	str	r2, [r7, #4]
   18dee:	230b      	movs	r3, #11
   18df0:	18fb      	adds	r3, r7, r3
   18df2:	1c0a      	adds	r2, r1, #0
   18df4:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   18df6:	68fb      	ldr	r3, [r7, #12]
   18df8:	2bfe      	cmp	r3, #254	; 0xfe
   18dfa:	d904      	bls.n	18e06 <prvTraceStoreKernelCall+0x22>
   18dfc:	4b39      	ldr	r3, [pc, #228]	; (18ee4 <prvTraceStoreKernelCall+0x100>)
   18dfe:	0018      	movs	r0, r3
   18e00:	4b39      	ldr	r3, [pc, #228]	; (18ee8 <prvTraceStoreKernelCall+0x104>)
   18e02:	4798      	blx	r3
   18e04:	e06b      	b.n	18ede <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   18e06:	230b      	movs	r3, #11
   18e08:	18fb      	adds	r3, r7, r3
   18e0a:	781b      	ldrb	r3, [r3, #0]
   18e0c:	2b08      	cmp	r3, #8
   18e0e:	d904      	bls.n	18e1a <prvTraceStoreKernelCall+0x36>
   18e10:	4b36      	ldr	r3, [pc, #216]	; (18eec <prvTraceStoreKernelCall+0x108>)
   18e12:	0018      	movs	r0, r3
   18e14:	4b34      	ldr	r3, [pc, #208]	; (18ee8 <prvTraceStoreKernelCall+0x104>)
   18e16:	4798      	blx	r3
   18e18:	e061      	b.n	18ede <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   18e1a:	4b35      	ldr	r3, [pc, #212]	; (18ef0 <prvTraceStoreKernelCall+0x10c>)
   18e1c:	681a      	ldr	r2, [r3, #0]
   18e1e:	230b      	movs	r3, #11
   18e20:	18fb      	adds	r3, r7, r3
   18e22:	781b      	ldrb	r3, [r3, #0]
   18e24:	2164      	movs	r1, #100	; 0x64
   18e26:	18d3      	adds	r3, r2, r3
   18e28:	185b      	adds	r3, r3, r1
   18e2a:	781b      	ldrb	r3, [r3, #0]
   18e2c:	001a      	movs	r2, r3
   18e2e:	687b      	ldr	r3, [r7, #4]
   18e30:	429a      	cmp	r2, r3
   18e32:	d204      	bcs.n	18e3e <prvTraceStoreKernelCall+0x5a>
   18e34:	4b2f      	ldr	r3, [pc, #188]	; (18ef4 <prvTraceStoreKernelCall+0x110>)
   18e36:	0018      	movs	r0, r3
   18e38:	4b2b      	ldr	r3, [pc, #172]	; (18ee8 <prvTraceStoreKernelCall+0x104>)
   18e3a:	4798      	blx	r3
   18e3c:	e04f      	b.n	18ede <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   18e3e:	4b2e      	ldr	r3, [pc, #184]	; (18ef8 <prvTraceStoreKernelCall+0x114>)
   18e40:	681b      	ldr	r3, [r3, #0]
   18e42:	2b00      	cmp	r3, #0
   18e44:	d004      	beq.n	18e50 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   18e46:	4b2d      	ldr	r3, [pc, #180]	; (18efc <prvTraceStoreKernelCall+0x118>)
   18e48:	0018      	movs	r0, r3
   18e4a:	4b27      	ldr	r3, [pc, #156]	; (18ee8 <prvTraceStoreKernelCall+0x104>)
   18e4c:	4798      	blx	r3
		return;
   18e4e:	e046      	b.n	18ede <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   18e50:	4b2b      	ldr	r3, [pc, #172]	; (18f00 <prvTraceStoreKernelCall+0x11c>)
   18e52:	781b      	ldrb	r3, [r3, #0]
   18e54:	2b00      	cmp	r3, #0
   18e56:	d041      	beq.n	18edc <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18e58:	f3ef 8310 	mrs	r3, PRIMASK
   18e5c:	617b      	str	r3, [r7, #20]
  return(result);
   18e5e:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   18e60:	627b      	str	r3, [r7, #36]	; 0x24
   18e62:	2301      	movs	r3, #1
   18e64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18e66:	69bb      	ldr	r3, [r7, #24]
   18e68:	f383 8810 	msr	PRIMASK, r3
   18e6c:	4b22      	ldr	r3, [pc, #136]	; (18ef8 <prvTraceStoreKernelCall+0x114>)
   18e6e:	681b      	ldr	r3, [r3, #0]
   18e70:	1c5a      	adds	r2, r3, #1
   18e72:	4b21      	ldr	r3, [pc, #132]	; (18ef8 <prvTraceStoreKernelCall+0x114>)
   18e74:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   18e76:	4b1e      	ldr	r3, [pc, #120]	; (18ef0 <prvTraceStoreKernelCall+0x10c>)
   18e78:	681b      	ldr	r3, [r3, #0]
   18e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18e7c:	2b00      	cmp	r3, #0
   18e7e:	d022      	beq.n	18ec6 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18e80:	2322      	movs	r3, #34	; 0x22
   18e82:	18fc      	adds	r4, r7, r3
   18e84:	4b1f      	ldr	r3, [pc, #124]	; (18f04 <prvTraceStoreKernelCall+0x120>)
   18e86:	0018      	movs	r0, r3
   18e88:	4b1f      	ldr	r3, [pc, #124]	; (18f08 <prvTraceStoreKernelCall+0x124>)
   18e8a:	4798      	blx	r3
   18e8c:	0003      	movs	r3, r0
   18e8e:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   18e90:	2321      	movs	r3, #33	; 0x21
   18e92:	18fb      	adds	r3, r7, r3
   18e94:	687a      	ldr	r2, [r7, #4]
   18e96:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   18e98:	4b1c      	ldr	r3, [pc, #112]	; (18f0c <prvTraceStoreKernelCall+0x128>)
   18e9a:	4798      	blx	r3
   18e9c:	0003      	movs	r3, r0
   18e9e:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   18ea0:	69fb      	ldr	r3, [r7, #28]
   18ea2:	2b00      	cmp	r3, #0
   18ea4:	d00f      	beq.n	18ec6 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   18ea6:	69fb      	ldr	r3, [r7, #28]
   18ea8:	2222      	movs	r2, #34	; 0x22
   18eaa:	18ba      	adds	r2, r7, r2
   18eac:	8812      	ldrh	r2, [r2, #0]
   18eae:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   18eb0:	68fb      	ldr	r3, [r7, #12]
   18eb2:	b2da      	uxtb	r2, r3
   18eb4:	69fb      	ldr	r3, [r7, #28]
   18eb6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   18eb8:	69fb      	ldr	r3, [r7, #28]
   18eba:	2221      	movs	r2, #33	; 0x21
   18ebc:	18ba      	adds	r2, r7, r2
   18ebe:	7812      	ldrb	r2, [r2, #0]
   18ec0:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   18ec2:	4b13      	ldr	r3, [pc, #76]	; (18f10 <prvTraceStoreKernelCall+0x12c>)
   18ec4:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18ec6:	4b0c      	ldr	r3, [pc, #48]	; (18ef8 <prvTraceStoreKernelCall+0x114>)
   18ec8:	681b      	ldr	r3, [r3, #0]
   18eca:	1e5a      	subs	r2, r3, #1
   18ecc:	4b0a      	ldr	r3, [pc, #40]	; (18ef8 <prvTraceStoreKernelCall+0x114>)
   18ece:	601a      	str	r2, [r3, #0]
   18ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18ed2:	613b      	str	r3, [r7, #16]
   18ed4:	693b      	ldr	r3, [r7, #16]
   18ed6:	f383 8810 	msr	PRIMASK, r3
   18eda:	e000      	b.n	18ede <prvTraceStoreKernelCall+0xfa>
		return;
   18edc:	46c0      	nop			; (mov r8, r8)
}
   18ede:	46bd      	mov	sp, r7
   18ee0:	b00b      	add	sp, #44	; 0x2c
   18ee2:	bd90      	pop	{r4, r7, pc}
   18ee4:	000373b0 	.word	0x000373b0
   18ee8:	00019c89 	.word	0x00019c89
   18eec:	000373e8 	.word	0x000373e8
   18ef0:	200009e4 	.word	0x200009e4
   18ef4:	00037430 	.word	0x00037430
   18ef8:	2000093c 	.word	0x2000093c
   18efc:	00037478 	.word	0x00037478
   18f00:	20000948 	.word	0x20000948
   18f04:	0000ffff 	.word	0x0000ffff
   18f08:	00019e9d 	.word	0x00019e9d
   18f0c:	00019841 	.word	0x00019841
   18f10:	00019e45 	.word	0x00019e45

00018f14 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   18f14:	b580      	push	{r7, lr}
   18f16:	b08a      	sub	sp, #40	; 0x28
   18f18:	af00      	add	r7, sp, #0
   18f1a:	60f8      	str	r0, [r7, #12]
   18f1c:	607a      	str	r2, [r7, #4]
   18f1e:	603b      	str	r3, [r7, #0]
   18f20:	230b      	movs	r3, #11
   18f22:	18fb      	adds	r3, r7, r3
   18f24:	1c0a      	adds	r2, r1, #0
   18f26:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   18f28:	68fb      	ldr	r3, [r7, #12]
   18f2a:	2bfe      	cmp	r3, #254	; 0xfe
   18f2c:	d904      	bls.n	18f38 <prvTraceStoreKernelCallWithParam+0x24>
   18f2e:	4b40      	ldr	r3, [pc, #256]	; (19030 <prvTraceStoreKernelCallWithParam+0x11c>)
   18f30:	0018      	movs	r0, r3
   18f32:	4b40      	ldr	r3, [pc, #256]	; (19034 <prvTraceStoreKernelCallWithParam+0x120>)
   18f34:	4798      	blx	r3
   18f36:	e077      	b.n	19028 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   18f38:	230b      	movs	r3, #11
   18f3a:	18fb      	adds	r3, r7, r3
   18f3c:	781b      	ldrb	r3, [r3, #0]
   18f3e:	2b08      	cmp	r3, #8
   18f40:	d904      	bls.n	18f4c <prvTraceStoreKernelCallWithParam+0x38>
   18f42:	4b3d      	ldr	r3, [pc, #244]	; (19038 <prvTraceStoreKernelCallWithParam+0x124>)
   18f44:	0018      	movs	r0, r3
   18f46:	4b3b      	ldr	r3, [pc, #236]	; (19034 <prvTraceStoreKernelCallWithParam+0x120>)
   18f48:	4798      	blx	r3
   18f4a:	e06d      	b.n	19028 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   18f4c:	4b3b      	ldr	r3, [pc, #236]	; (1903c <prvTraceStoreKernelCallWithParam+0x128>)
   18f4e:	681a      	ldr	r2, [r3, #0]
   18f50:	230b      	movs	r3, #11
   18f52:	18fb      	adds	r3, r7, r3
   18f54:	781b      	ldrb	r3, [r3, #0]
   18f56:	2164      	movs	r1, #100	; 0x64
   18f58:	18d3      	adds	r3, r2, r3
   18f5a:	185b      	adds	r3, r3, r1
   18f5c:	781b      	ldrb	r3, [r3, #0]
   18f5e:	001a      	movs	r2, r3
   18f60:	687b      	ldr	r3, [r7, #4]
   18f62:	429a      	cmp	r2, r3
   18f64:	d204      	bcs.n	18f70 <prvTraceStoreKernelCallWithParam+0x5c>
   18f66:	4b36      	ldr	r3, [pc, #216]	; (19040 <prvTraceStoreKernelCallWithParam+0x12c>)
   18f68:	0018      	movs	r0, r3
   18f6a:	4b32      	ldr	r3, [pc, #200]	; (19034 <prvTraceStoreKernelCallWithParam+0x120>)
   18f6c:	4798      	blx	r3
   18f6e:	e05b      	b.n	19028 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   18f70:	4b34      	ldr	r3, [pc, #208]	; (19044 <prvTraceStoreKernelCallWithParam+0x130>)
   18f72:	681b      	ldr	r3, [r3, #0]
   18f74:	2b00      	cmp	r3, #0
   18f76:	d004      	beq.n	18f82 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   18f78:	4b33      	ldr	r3, [pc, #204]	; (19048 <prvTraceStoreKernelCallWithParam+0x134>)
   18f7a:	0018      	movs	r0, r3
   18f7c:	4b2d      	ldr	r3, [pc, #180]	; (19034 <prvTraceStoreKernelCallWithParam+0x120>)
   18f7e:	4798      	blx	r3
		return;
   18f80:	e052      	b.n	19028 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18f82:	f3ef 8310 	mrs	r3, PRIMASK
   18f86:	617b      	str	r3, [r7, #20]
  return(result);
   18f88:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   18f8a:	627b      	str	r3, [r7, #36]	; 0x24
   18f8c:	2301      	movs	r3, #1
   18f8e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18f90:	69bb      	ldr	r3, [r7, #24]
   18f92:	f383 8810 	msr	PRIMASK, r3
   18f96:	4b2b      	ldr	r3, [pc, #172]	; (19044 <prvTraceStoreKernelCallWithParam+0x130>)
   18f98:	681b      	ldr	r3, [r3, #0]
   18f9a:	1c5a      	adds	r2, r3, #1
   18f9c:	4b29      	ldr	r3, [pc, #164]	; (19044 <prvTraceStoreKernelCallWithParam+0x130>)
   18f9e:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18fa0:	4b26      	ldr	r3, [pc, #152]	; (1903c <prvTraceStoreKernelCallWithParam+0x128>)
   18fa2:	681b      	ldr	r3, [r3, #0]
   18fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18fa6:	2b00      	cmp	r3, #0
   18fa8:	d034      	beq.n	19014 <prvTraceStoreKernelCallWithParam+0x100>
   18faa:	4b28      	ldr	r3, [pc, #160]	; (1904c <prvTraceStoreKernelCallWithParam+0x138>)
   18fac:	781b      	ldrb	r3, [r3, #0]
   18fae:	2b00      	cmp	r3, #0
   18fb0:	d030      	beq.n	19014 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   18fb2:	20ff      	movs	r0, #255	; 0xff
   18fb4:	4b26      	ldr	r3, [pc, #152]	; (19050 <prvTraceStoreKernelCallWithParam+0x13c>)
   18fb6:	4798      	blx	r3
   18fb8:	0003      	movs	r3, r0
   18fba:	001a      	movs	r2, r3
   18fbc:	2323      	movs	r3, #35	; 0x23
   18fbe:	18fb      	adds	r3, r7, r3
   18fc0:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   18fc2:	683b      	ldr	r3, [r7, #0]
   18fc4:	0019      	movs	r1, r3
   18fc6:	20ff      	movs	r0, #255	; 0xff
   18fc8:	4b22      	ldr	r3, [pc, #136]	; (19054 <prvTraceStoreKernelCallWithParam+0x140>)
   18fca:	4798      	blx	r3
   18fcc:	0002      	movs	r2, r0
   18fce:	2322      	movs	r3, #34	; 0x22
   18fd0:	18fb      	adds	r3, r7, r3
   18fd2:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   18fd4:	2321      	movs	r3, #33	; 0x21
   18fd6:	18fb      	adds	r3, r7, r3
   18fd8:	687a      	ldr	r2, [r7, #4]
   18fda:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   18fdc:	4b1e      	ldr	r3, [pc, #120]	; (19058 <prvTraceStoreKernelCallWithParam+0x144>)
   18fde:	4798      	blx	r3
   18fe0:	0003      	movs	r3, r0
   18fe2:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   18fe4:	69fb      	ldr	r3, [r7, #28]
   18fe6:	2b00      	cmp	r3, #0
   18fe8:	d014      	beq.n	19014 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   18fea:	69fb      	ldr	r3, [r7, #28]
   18fec:	2223      	movs	r2, #35	; 0x23
   18fee:	18ba      	adds	r2, r7, r2
   18ff0:	7812      	ldrb	r2, [r2, #0]
   18ff2:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   18ff4:	68fb      	ldr	r3, [r7, #12]
   18ff6:	b2da      	uxtb	r2, r3
   18ff8:	69fb      	ldr	r3, [r7, #28]
   18ffa:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   18ffc:	69fb      	ldr	r3, [r7, #28]
   18ffe:	2221      	movs	r2, #33	; 0x21
   19000:	18ba      	adds	r2, r7, r2
   19002:	7812      	ldrb	r2, [r2, #0]
   19004:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   19006:	69fb      	ldr	r3, [r7, #28]
   19008:	2222      	movs	r2, #34	; 0x22
   1900a:	18ba      	adds	r2, r7, r2
   1900c:	7812      	ldrb	r2, [r2, #0]
   1900e:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   19010:	4b12      	ldr	r3, [pc, #72]	; (1905c <prvTraceStoreKernelCallWithParam+0x148>)
   19012:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19014:	4b0b      	ldr	r3, [pc, #44]	; (19044 <prvTraceStoreKernelCallWithParam+0x130>)
   19016:	681b      	ldr	r3, [r3, #0]
   19018:	1e5a      	subs	r2, r3, #1
   1901a:	4b0a      	ldr	r3, [pc, #40]	; (19044 <prvTraceStoreKernelCallWithParam+0x130>)
   1901c:	601a      	str	r2, [r3, #0]
   1901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19020:	613b      	str	r3, [r7, #16]
   19022:	693b      	ldr	r3, [r7, #16]
   19024:	f383 8810 	msr	PRIMASK, r3
}
   19028:	46bd      	mov	sp, r7
   1902a:	b00a      	add	sp, #40	; 0x28
   1902c:	bd80      	pop	{r7, pc}
   1902e:	46c0      	nop			; (mov r8, r8)
   19030:	000374b0 	.word	0x000374b0
   19034:	00019c89 	.word	0x00019c89
   19038:	000374f0 	.word	0x000374f0
   1903c:	200009e4 	.word	0x200009e4
   19040:	00037540 	.word	0x00037540
   19044:	2000093c 	.word	0x2000093c
   19048:	00037590 	.word	0x00037590
   1904c:	20000948 	.word	0x20000948
   19050:	00019e9d 	.word	0x00019e9d
   19054:	00019061 	.word	0x00019061
   19058:	00019841 	.word	0x00019841
   1905c:	00019e45 	.word	0x00019e45

00019060 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   19060:	b580      	push	{r7, lr}
   19062:	b084      	sub	sp, #16
   19064:	af00      	add	r7, sp, #0
   19066:	6078      	str	r0, [r7, #4]
   19068:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   1906a:	687b      	ldr	r3, [r7, #4]
   1906c:	2bff      	cmp	r3, #255	; 0xff
   1906e:	d009      	beq.n	19084 <prvTraceGetParam+0x24>
   19070:	687b      	ldr	r3, [r7, #4]
   19072:	4a19      	ldr	r2, [pc, #100]	; (190d8 <prvTraceGetParam+0x78>)
   19074:	4293      	cmp	r3, r2
   19076:	d005      	beq.n	19084 <prvTraceGetParam+0x24>
   19078:	4b18      	ldr	r3, [pc, #96]	; (190dc <prvTraceGetParam+0x7c>)
   1907a:	0018      	movs	r0, r3
   1907c:	4b18      	ldr	r3, [pc, #96]	; (190e0 <prvTraceGetParam+0x80>)
   1907e:	4798      	blx	r3
   19080:	683b      	ldr	r3, [r7, #0]
   19082:	e024      	b.n	190ce <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   19084:	683a      	ldr	r2, [r7, #0]
   19086:	687b      	ldr	r3, [r7, #4]
   19088:	429a      	cmp	r2, r3
   1908a:	d801      	bhi.n	19090 <prvTraceGetParam+0x30>
	{
		return param;
   1908c:	683b      	ldr	r3, [r7, #0]
   1908e:	e01e      	b.n	190ce <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   19090:	4b14      	ldr	r3, [pc, #80]	; (190e4 <prvTraceGetParam+0x84>)
   19092:	4798      	blx	r3
   19094:	0003      	movs	r3, r0
   19096:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   19098:	68fb      	ldr	r3, [r7, #12]
   1909a:	2b00      	cmp	r3, #0
   1909c:	d014      	beq.n	190c8 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   1909e:	68fb      	ldr	r3, [r7, #12]
   190a0:	2201      	movs	r2, #1
   190a2:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   190a4:	687b      	ldr	r3, [r7, #4]
   190a6:	43db      	mvns	r3, r3
   190a8:	683a      	ldr	r2, [r7, #0]
   190aa:	4013      	ands	r3, r2
   190ac:	0a1b      	lsrs	r3, r3, #8
   190ae:	b2da      	uxtb	r2, r3
   190b0:	68fb      	ldr	r3, [r7, #12]
   190b2:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   190b4:	687b      	ldr	r3, [r7, #4]
   190b6:	43db      	mvns	r3, r3
   190b8:	683a      	ldr	r2, [r7, #0]
   190ba:	4013      	ands	r3, r2
   190bc:	0c1b      	lsrs	r3, r3, #16
   190be:	b29a      	uxth	r2, r3
   190c0:	68fb      	ldr	r3, [r7, #12]
   190c2:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   190c4:	4b08      	ldr	r3, [pc, #32]	; (190e8 <prvTraceGetParam+0x88>)
   190c6:	4798      	blx	r3
		}

		return param & param_max;
   190c8:	683b      	ldr	r3, [r7, #0]
   190ca:	687a      	ldr	r2, [r7, #4]
   190cc:	4013      	ands	r3, r2
	}
}
   190ce:	0018      	movs	r0, r3
   190d0:	46bd      	mov	sp, r7
   190d2:	b004      	add	sp, #16
   190d4:	bd80      	pop	{r7, pc}
   190d6:	46c0      	nop			; (mov r8, r8)
   190d8:	0000ffff 	.word	0x0000ffff
   190dc:	000375c8 	.word	0x000375c8
   190e0:	00019c89 	.word	0x00019c89
   190e4:	00019841 	.word	0x00019841
   190e8:	00019e45 	.word	0x00019e45

000190ec <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   190ec:	b580      	push	{r7, lr}
   190ee:	b08a      	sub	sp, #40	; 0x28
   190f0:	af00      	add	r7, sp, #0
   190f2:	6078      	str	r0, [r7, #4]
   190f4:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   190f6:	2326      	movs	r3, #38	; 0x26
   190f8:	18fb      	adds	r3, r7, r3
   190fa:	2200      	movs	r2, #0
   190fc:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   190fe:	687b      	ldr	r3, [r7, #4]
   19100:	2bfe      	cmp	r3, #254	; 0xfe
   19102:	d904      	bls.n	1910e <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   19104:	4b2d      	ldr	r3, [pc, #180]	; (191bc <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   19106:	0018      	movs	r0, r3
   19108:	4b2d      	ldr	r3, [pc, #180]	; (191c0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1910a:	4798      	blx	r3
   1910c:	e053      	b.n	191b6 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   1910e:	4b2d      	ldr	r3, [pc, #180]	; (191c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19110:	681b      	ldr	r3, [r3, #0]
   19112:	2b00      	cmp	r3, #0
   19114:	d004      	beq.n	19120 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   19116:	4b2c      	ldr	r3, [pc, #176]	; (191c8 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   19118:	0018      	movs	r0, r3
   1911a:	4b29      	ldr	r3, [pc, #164]	; (191c0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1911c:	4798      	blx	r3
		return;
   1911e:	e04a      	b.n	191b6 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19120:	f3ef 8310 	mrs	r3, PRIMASK
   19124:	613b      	str	r3, [r7, #16]
  return(result);
   19126:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   19128:	623b      	str	r3, [r7, #32]
   1912a:	2301      	movs	r3, #1
   1912c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1912e:	697b      	ldr	r3, [r7, #20]
   19130:	f383 8810 	msr	PRIMASK, r3
   19134:	4b23      	ldr	r3, [pc, #140]	; (191c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19136:	681b      	ldr	r3, [r3, #0]
   19138:	1c5a      	adds	r2, r3, #1
   1913a:	4b22      	ldr	r3, [pc, #136]	; (191c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1913c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1913e:	4b23      	ldr	r3, [pc, #140]	; (191cc <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   19140:	681b      	ldr	r3, [r3, #0]
   19142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19144:	2b00      	cmp	r3, #0
   19146:	d02c      	beq.n	191a2 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   19148:	4b21      	ldr	r3, [pc, #132]	; (191d0 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   1914a:	781b      	ldrb	r3, [r3, #0]
   1914c:	2b00      	cmp	r3, #0
   1914e:	d028      	beq.n	191a2 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   19150:	20ff      	movs	r0, #255	; 0xff
   19152:	4b20      	ldr	r3, [pc, #128]	; (191d4 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   19154:	4798      	blx	r3
   19156:	0003      	movs	r3, r0
   19158:	001a      	movs	r2, r3
   1915a:	231f      	movs	r3, #31
   1915c:	18fb      	adds	r3, r7, r3
   1915e:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   19160:	683b      	ldr	r3, [r7, #0]
   19162:	4a1d      	ldr	r2, [pc, #116]	; (191d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   19164:	0019      	movs	r1, r3
   19166:	0010      	movs	r0, r2
   19168:	4b1c      	ldr	r3, [pc, #112]	; (191dc <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   1916a:	4798      	blx	r3
   1916c:	0002      	movs	r2, r0
   1916e:	2326      	movs	r3, #38	; 0x26
   19170:	18fb      	adds	r3, r7, r3
   19172:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   19174:	4b1a      	ldr	r3, [pc, #104]	; (191e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   19176:	4798      	blx	r3
   19178:	0003      	movs	r3, r0
   1917a:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   1917c:	69bb      	ldr	r3, [r7, #24]
   1917e:	2b00      	cmp	r3, #0
   19180:	d00f      	beq.n	191a2 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   19182:	69bb      	ldr	r3, [r7, #24]
   19184:	221f      	movs	r2, #31
   19186:	18ba      	adds	r2, r7, r2
   19188:	7812      	ldrb	r2, [r2, #0]
   1918a:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   1918c:	687b      	ldr	r3, [r7, #4]
   1918e:	b2da      	uxtb	r2, r3
   19190:	69bb      	ldr	r3, [r7, #24]
   19192:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   19194:	69bb      	ldr	r3, [r7, #24]
   19196:	2226      	movs	r2, #38	; 0x26
   19198:	18ba      	adds	r2, r7, r2
   1919a:	8812      	ldrh	r2, [r2, #0]
   1919c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1919e:	4b11      	ldr	r3, [pc, #68]	; (191e4 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   191a0:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   191a2:	4b08      	ldr	r3, [pc, #32]	; (191c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   191a4:	681b      	ldr	r3, [r3, #0]
   191a6:	1e5a      	subs	r2, r3, #1
   191a8:	4b06      	ldr	r3, [pc, #24]	; (191c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   191aa:	601a      	str	r2, [r3, #0]
   191ac:	6a3b      	ldr	r3, [r7, #32]
   191ae:	60fb      	str	r3, [r7, #12]
   191b0:	68fb      	ldr	r3, [r7, #12]
   191b2:	f383 8810 	msr	PRIMASK, r3
}
   191b6:	46bd      	mov	sp, r7
   191b8:	b00a      	add	sp, #40	; 0x28
   191ba:	bd80      	pop	{r7, pc}
   191bc:	00037604 	.word	0x00037604
   191c0:	00019c89 	.word	0x00019c89
   191c4:	2000093c 	.word	0x2000093c
   191c8:	0003765c 	.word	0x0003765c
   191cc:	200009e4 	.word	0x200009e4
   191d0:	20000948 	.word	0x20000948
   191d4:	00019e9d 	.word	0x00019e9d
   191d8:	0000ffff 	.word	0x0000ffff
   191dc:	00019061 	.word	0x00019061
   191e0:	00019841 	.word	0x00019841
   191e4:	00019e45 	.word	0x00019e45

000191e8 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   191e8:	b590      	push	{r4, r7, lr}
   191ea:	b089      	sub	sp, #36	; 0x24
   191ec:	af00      	add	r7, sp, #0
   191ee:	0002      	movs	r2, r0
   191f0:	1dfb      	adds	r3, r7, #7
   191f2:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   191f4:	1dfb      	adds	r3, r7, #7
   191f6:	781b      	ldrb	r3, [r3, #0]
   191f8:	2b0f      	cmp	r3, #15
   191fa:	d904      	bls.n	19206 <prvTraceStoreTaskswitch+0x1e>
   191fc:	4b34      	ldr	r3, [pc, #208]	; (192d0 <prvTraceStoreTaskswitch+0xe8>)
   191fe:	0018      	movs	r0, r3
   19200:	4b34      	ldr	r3, [pc, #208]	; (192d4 <prvTraceStoreTaskswitch+0xec>)
   19202:	4798      	blx	r3
   19204:	e061      	b.n	192ca <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19206:	f3ef 8310 	mrs	r3, PRIMASK
   1920a:	60fb      	str	r3, [r7, #12]
  return(result);
   1920c:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   1920e:	61fb      	str	r3, [r7, #28]
   19210:	2301      	movs	r3, #1
   19212:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19214:	693b      	ldr	r3, [r7, #16]
   19216:	f383 8810 	msr	PRIMASK, r3
   1921a:	4b2f      	ldr	r3, [pc, #188]	; (192d8 <prvTraceStoreTaskswitch+0xf0>)
   1921c:	681b      	ldr	r3, [r3, #0]
   1921e:	1c5a      	adds	r2, r3, #1
   19220:	4b2d      	ldr	r3, [pc, #180]	; (192d8 <prvTraceStoreTaskswitch+0xf0>)
   19222:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   19224:	4b2d      	ldr	r3, [pc, #180]	; (192dc <prvTraceStoreTaskswitch+0xf4>)
   19226:	781b      	ldrb	r3, [r3, #0]
   19228:	1dfa      	adds	r2, r7, #7
   1922a:	7812      	ldrb	r2, [r2, #0]
   1922c:	429a      	cmp	r2, r3
   1922e:	d042      	beq.n	192b6 <prvTraceStoreTaskswitch+0xce>
   19230:	4b2b      	ldr	r3, [pc, #172]	; (192e0 <prvTraceStoreTaskswitch+0xf8>)
   19232:	681b      	ldr	r3, [r3, #0]
   19234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19236:	2b00      	cmp	r3, #0
   19238:	d03d      	beq.n	192b6 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   1923a:	4b2a      	ldr	r3, [pc, #168]	; (192e4 <prvTraceStoreTaskswitch+0xfc>)
   1923c:	2200      	movs	r2, #0
   1923e:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19240:	231a      	movs	r3, #26
   19242:	18fc      	adds	r4, r7, r3
   19244:	4b28      	ldr	r3, [pc, #160]	; (192e8 <prvTraceStoreTaskswitch+0x100>)
   19246:	0018      	movs	r0, r3
   19248:	4b28      	ldr	r3, [pc, #160]	; (192ec <prvTraceStoreTaskswitch+0x104>)
   1924a:	4798      	blx	r3
   1924c:	0003      	movs	r3, r0
   1924e:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   19250:	4b22      	ldr	r3, [pc, #136]	; (192dc <prvTraceStoreTaskswitch+0xf4>)
   19252:	1dfa      	adds	r2, r7, #7
   19254:	7812      	ldrb	r2, [r2, #0]
   19256:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   19258:	2319      	movs	r3, #25
   1925a:	18fb      	adds	r3, r7, r3
   1925c:	4a1f      	ldr	r2, [pc, #124]	; (192dc <prvTraceStoreTaskswitch+0xf4>)
   1925e:	7812      	ldrb	r2, [r2, #0]
   19260:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   19262:	4b23      	ldr	r3, [pc, #140]	; (192f0 <prvTraceStoreTaskswitch+0x108>)
   19264:	4798      	blx	r3
   19266:	0003      	movs	r3, r0
   19268:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   1926a:	697b      	ldr	r3, [r7, #20]
   1926c:	2b00      	cmp	r3, #0
   1926e:	d022      	beq.n	192b6 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   19270:	4b1a      	ldr	r3, [pc, #104]	; (192dc <prvTraceStoreTaskswitch+0xf4>)
   19272:	781b      	ldrb	r3, [r3, #0]
   19274:	0019      	movs	r1, r3
   19276:	2003      	movs	r0, #3
   19278:	4b1e      	ldr	r3, [pc, #120]	; (192f4 <prvTraceStoreTaskswitch+0x10c>)
   1927a:	4798      	blx	r3
   1927c:	0003      	movs	r3, r0
   1927e:	2b01      	cmp	r3, #1
   19280:	d103      	bne.n	1928a <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   19282:	697b      	ldr	r3, [r7, #20]
   19284:	2207      	movs	r2, #7
   19286:	701a      	strb	r2, [r3, #0]
   19288:	e002      	b.n	19290 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   1928a:	697b      	ldr	r3, [r7, #20]
   1928c:	2206      	movs	r2, #6
   1928e:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   19290:	697b      	ldr	r3, [r7, #20]
   19292:	221a      	movs	r2, #26
   19294:	18ba      	adds	r2, r7, r2
   19296:	8812      	ldrh	r2, [r2, #0]
   19298:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   1929a:	697b      	ldr	r3, [r7, #20]
   1929c:	2219      	movs	r2, #25
   1929e:	18ba      	adds	r2, r7, r2
   192a0:	7812      	ldrb	r2, [r2, #0]
   192a2:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   192a4:	4b0d      	ldr	r3, [pc, #52]	; (192dc <prvTraceStoreTaskswitch+0xf4>)
   192a6:	781b      	ldrb	r3, [r3, #0]
   192a8:	2201      	movs	r2, #1
   192aa:	0019      	movs	r1, r3
   192ac:	2003      	movs	r0, #3
   192ae:	4b12      	ldr	r3, [pc, #72]	; (192f8 <prvTraceStoreTaskswitch+0x110>)
   192b0:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   192b2:	4b12      	ldr	r3, [pc, #72]	; (192fc <prvTraceStoreTaskswitch+0x114>)
   192b4:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   192b6:	4b08      	ldr	r3, [pc, #32]	; (192d8 <prvTraceStoreTaskswitch+0xf0>)
   192b8:	681b      	ldr	r3, [r3, #0]
   192ba:	1e5a      	subs	r2, r3, #1
   192bc:	4b06      	ldr	r3, [pc, #24]	; (192d8 <prvTraceStoreTaskswitch+0xf0>)
   192be:	601a      	str	r2, [r3, #0]
   192c0:	69fb      	ldr	r3, [r7, #28]
   192c2:	60bb      	str	r3, [r7, #8]
   192c4:	68bb      	ldr	r3, [r7, #8]
   192c6:	f383 8810 	msr	PRIMASK, r3
}
   192ca:	46bd      	mov	sp, r7
   192cc:	b009      	add	sp, #36	; 0x24
   192ce:	bd90      	pop	{r4, r7, pc}
   192d0:	00037694 	.word	0x00037694
   192d4:	00019c89 	.word	0x00019c89
   192d8:	2000093c 	.word	0x2000093c
   192dc:	20000948 	.word	0x20000948
   192e0:	200009e4 	.word	0x200009e4
   192e4:	20000928 	.word	0x20000928
   192e8:	0000ffff 	.word	0x0000ffff
   192ec:	00019e9d 	.word	0x00019e9d
   192f0:	00019841 	.word	0x00019841
   192f4:	000194e5 	.word	0x000194e5
   192f8:	00019441 	.word	0x00019441
   192fc:	00019e45 	.word	0x00019e45

00019300 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19300:	b590      	push	{r4, r7, lr}
   19302:	b083      	sub	sp, #12
   19304:	af00      	add	r7, sp, #0
   19306:	0004      	movs	r4, r0
   19308:	0008      	movs	r0, r1
   1930a:	0011      	movs	r1, r2
   1930c:	1dfb      	adds	r3, r7, #7
   1930e:	1c22      	adds	r2, r4, #0
   19310:	701a      	strb	r2, [r3, #0]
   19312:	1dbb      	adds	r3, r7, #6
   19314:	1c02      	adds	r2, r0, #0
   19316:	701a      	strb	r2, [r3, #0]
   19318:	1d7b      	adds	r3, r7, #5
   1931a:	1c0a      	adds	r2, r1, #0
   1931c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1931e:	1dfb      	adds	r3, r7, #7
   19320:	781b      	ldrb	r3, [r3, #0]
   19322:	2b08      	cmp	r3, #8
   19324:	d904      	bls.n	19330 <prvTraceSetPriorityProperty+0x30>
   19326:	4b1a      	ldr	r3, [pc, #104]	; (19390 <prvTraceSetPriorityProperty+0x90>)
   19328:	0018      	movs	r0, r3
   1932a:	4b1a      	ldr	r3, [pc, #104]	; (19394 <prvTraceSetPriorityProperty+0x94>)
   1932c:	4798      	blx	r3
   1932e:	e02c      	b.n	1938a <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19330:	4b19      	ldr	r3, [pc, #100]	; (19398 <prvTraceSetPriorityProperty+0x98>)
   19332:	681a      	ldr	r2, [r3, #0]
   19334:	1dfb      	adds	r3, r7, #7
   19336:	781b      	ldrb	r3, [r3, #0]
   19338:	2164      	movs	r1, #100	; 0x64
   1933a:	18d3      	adds	r3, r2, r3
   1933c:	185b      	adds	r3, r3, r1
   1933e:	781b      	ldrb	r3, [r3, #0]
   19340:	1dba      	adds	r2, r7, #6
   19342:	7812      	ldrb	r2, [r2, #0]
   19344:	429a      	cmp	r2, r3
   19346:	d904      	bls.n	19352 <prvTraceSetPriorityProperty+0x52>
   19348:	4b14      	ldr	r3, [pc, #80]	; (1939c <prvTraceSetPriorityProperty+0x9c>)
   1934a:	0018      	movs	r0, r3
   1934c:	4b11      	ldr	r3, [pc, #68]	; (19394 <prvTraceSetPriorityProperty+0x94>)
   1934e:	4798      	blx	r3
   19350:	e01b      	b.n	1938a <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   19352:	4b11      	ldr	r3, [pc, #68]	; (19398 <prvTraceSetPriorityProperty+0x98>)
   19354:	681c      	ldr	r4, [r3, #0]
   19356:	1dfb      	adds	r3, r7, #7
   19358:	781a      	ldrb	r2, [r3, #0]
   1935a:	1dbb      	adds	r3, r7, #6
   1935c:	781b      	ldrb	r3, [r3, #0]
   1935e:	0011      	movs	r1, r2
   19360:	0018      	movs	r0, r3
   19362:	4b0f      	ldr	r3, [pc, #60]	; (193a0 <prvTraceSetPriorityProperty+0xa0>)
   19364:	4798      	blx	r3
   19366:	0003      	movs	r3, r0
   19368:	0018      	movs	r0, r3
   1936a:	4b0b      	ldr	r3, [pc, #44]	; (19398 <prvTraceSetPriorityProperty+0x98>)
   1936c:	681a      	ldr	r2, [r3, #0]
   1936e:	1dfb      	adds	r3, r7, #7
   19370:	781b      	ldrb	r3, [r3, #0]
   19372:	2170      	movs	r1, #112	; 0x70
   19374:	18d3      	adds	r3, r2, r3
   19376:	185b      	adds	r3, r3, r1
   19378:	781b      	ldrb	r3, [r3, #0]
   1937a:	18c3      	adds	r3, r0, r3
   1937c:	3301      	adds	r3, #1
   1937e:	229c      	movs	r2, #156	; 0x9c
   19380:	18e3      	adds	r3, r4, r3
   19382:	189b      	adds	r3, r3, r2
   19384:	1d7a      	adds	r2, r7, #5
   19386:	7812      	ldrb	r2, [r2, #0]
   19388:	701a      	strb	r2, [r3, #0]
}
   1938a:	46bd      	mov	sp, r7
   1938c:	b003      	add	sp, #12
   1938e:	bd90      	pop	{r4, r7, pc}
   19390:	00037828 	.word	0x00037828
   19394:	00019c89 	.word	0x00019c89
   19398:	200009e4 	.word	0x200009e4
   1939c:	00037874 	.word	0x00037874
   193a0:	00019895 	.word	0x00019895

000193a4 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   193a4:	b590      	push	{r4, r7, lr}
   193a6:	b083      	sub	sp, #12
   193a8:	af00      	add	r7, sp, #0
   193aa:	0002      	movs	r2, r0
   193ac:	1dfb      	adds	r3, r7, #7
   193ae:	701a      	strb	r2, [r3, #0]
   193b0:	1dbb      	adds	r3, r7, #6
   193b2:	1c0a      	adds	r2, r1, #0
   193b4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   193b6:	1dfb      	adds	r3, r7, #7
   193b8:	781b      	ldrb	r3, [r3, #0]
   193ba:	2b08      	cmp	r3, #8
   193bc:	d905      	bls.n	193ca <prvTraceGetPriorityProperty+0x26>
   193be:	4b1b      	ldr	r3, [pc, #108]	; (1942c <prvTraceGetPriorityProperty+0x88>)
   193c0:	0018      	movs	r0, r3
   193c2:	4b1b      	ldr	r3, [pc, #108]	; (19430 <prvTraceGetPriorityProperty+0x8c>)
   193c4:	4798      	blx	r3
   193c6:	2300      	movs	r3, #0
   193c8:	e02b      	b.n	19422 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   193ca:	4b1a      	ldr	r3, [pc, #104]	; (19434 <prvTraceGetPriorityProperty+0x90>)
   193cc:	681a      	ldr	r2, [r3, #0]
   193ce:	1dfb      	adds	r3, r7, #7
   193d0:	781b      	ldrb	r3, [r3, #0]
   193d2:	2164      	movs	r1, #100	; 0x64
   193d4:	18d3      	adds	r3, r2, r3
   193d6:	185b      	adds	r3, r3, r1
   193d8:	781b      	ldrb	r3, [r3, #0]
   193da:	1dba      	adds	r2, r7, #6
   193dc:	7812      	ldrb	r2, [r2, #0]
   193de:	429a      	cmp	r2, r3
   193e0:	d905      	bls.n	193ee <prvTraceGetPriorityProperty+0x4a>
   193e2:	4b15      	ldr	r3, [pc, #84]	; (19438 <prvTraceGetPriorityProperty+0x94>)
   193e4:	0018      	movs	r0, r3
   193e6:	4b12      	ldr	r3, [pc, #72]	; (19430 <prvTraceGetPriorityProperty+0x8c>)
   193e8:	4798      	blx	r3
   193ea:	2300      	movs	r3, #0
   193ec:	e019      	b.n	19422 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   193ee:	4b11      	ldr	r3, [pc, #68]	; (19434 <prvTraceGetPriorityProperty+0x90>)
   193f0:	681c      	ldr	r4, [r3, #0]
   193f2:	1dfb      	adds	r3, r7, #7
   193f4:	781a      	ldrb	r2, [r3, #0]
   193f6:	1dbb      	adds	r3, r7, #6
   193f8:	781b      	ldrb	r3, [r3, #0]
   193fa:	0011      	movs	r1, r2
   193fc:	0018      	movs	r0, r3
   193fe:	4b0f      	ldr	r3, [pc, #60]	; (1943c <prvTraceGetPriorityProperty+0x98>)
   19400:	4798      	blx	r3
   19402:	0003      	movs	r3, r0
   19404:	0018      	movs	r0, r3
   19406:	4b0b      	ldr	r3, [pc, #44]	; (19434 <prvTraceGetPriorityProperty+0x90>)
   19408:	681a      	ldr	r2, [r3, #0]
   1940a:	1dfb      	adds	r3, r7, #7
   1940c:	781b      	ldrb	r3, [r3, #0]
   1940e:	2170      	movs	r1, #112	; 0x70
   19410:	18d3      	adds	r3, r2, r3
   19412:	185b      	adds	r3, r3, r1
   19414:	781b      	ldrb	r3, [r3, #0]
   19416:	18c3      	adds	r3, r0, r3
   19418:	3301      	adds	r3, #1
   1941a:	229c      	movs	r2, #156	; 0x9c
   1941c:	18e3      	adds	r3, r4, r3
   1941e:	189b      	adds	r3, r3, r2
   19420:	781b      	ldrb	r3, [r3, #0]
}
   19422:	0018      	movs	r0, r3
   19424:	46bd      	mov	sp, r7
   19426:	b003      	add	sp, #12
   19428:	bd90      	pop	{r4, r7, pc}
   1942a:	46c0      	nop			; (mov r8, r8)
   1942c:	000378b4 	.word	0x000378b4
   19430:	00019c89 	.word	0x00019c89
   19434:	200009e4 	.word	0x200009e4
   19438:	00037900 	.word	0x00037900
   1943c:	00019895 	.word	0x00019895

00019440 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19440:	b590      	push	{r4, r7, lr}
   19442:	b083      	sub	sp, #12
   19444:	af00      	add	r7, sp, #0
   19446:	0004      	movs	r4, r0
   19448:	0008      	movs	r0, r1
   1944a:	0011      	movs	r1, r2
   1944c:	1dfb      	adds	r3, r7, #7
   1944e:	1c22      	adds	r2, r4, #0
   19450:	701a      	strb	r2, [r3, #0]
   19452:	1dbb      	adds	r3, r7, #6
   19454:	1c02      	adds	r2, r0, #0
   19456:	701a      	strb	r2, [r3, #0]
   19458:	1d7b      	adds	r3, r7, #5
   1945a:	1c0a      	adds	r2, r1, #0
   1945c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1945e:	1dfb      	adds	r3, r7, #7
   19460:	781b      	ldrb	r3, [r3, #0]
   19462:	2b08      	cmp	r3, #8
   19464:	d904      	bls.n	19470 <prvTraceSetObjectState+0x30>
   19466:	4b1a      	ldr	r3, [pc, #104]	; (194d0 <prvTraceSetObjectState+0x90>)
   19468:	0018      	movs	r0, r3
   1946a:	4b1a      	ldr	r3, [pc, #104]	; (194d4 <prvTraceSetObjectState+0x94>)
   1946c:	4798      	blx	r3
   1946e:	e02b      	b.n	194c8 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19470:	4b19      	ldr	r3, [pc, #100]	; (194d8 <prvTraceSetObjectState+0x98>)
   19472:	681a      	ldr	r2, [r3, #0]
   19474:	1dfb      	adds	r3, r7, #7
   19476:	781b      	ldrb	r3, [r3, #0]
   19478:	2164      	movs	r1, #100	; 0x64
   1947a:	18d3      	adds	r3, r2, r3
   1947c:	185b      	adds	r3, r3, r1
   1947e:	781b      	ldrb	r3, [r3, #0]
   19480:	1dba      	adds	r2, r7, #6
   19482:	7812      	ldrb	r2, [r2, #0]
   19484:	429a      	cmp	r2, r3
   19486:	d904      	bls.n	19492 <prvTraceSetObjectState+0x52>
   19488:	4b14      	ldr	r3, [pc, #80]	; (194dc <prvTraceSetObjectState+0x9c>)
   1948a:	0018      	movs	r0, r3
   1948c:	4b11      	ldr	r3, [pc, #68]	; (194d4 <prvTraceSetObjectState+0x94>)
   1948e:	4798      	blx	r3
   19490:	e01a      	b.n	194c8 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   19492:	4b11      	ldr	r3, [pc, #68]	; (194d8 <prvTraceSetObjectState+0x98>)
   19494:	681c      	ldr	r4, [r3, #0]
   19496:	1dfb      	adds	r3, r7, #7
   19498:	781a      	ldrb	r2, [r3, #0]
   1949a:	1dbb      	adds	r3, r7, #6
   1949c:	781b      	ldrb	r3, [r3, #0]
   1949e:	0011      	movs	r1, r2
   194a0:	0018      	movs	r0, r3
   194a2:	4b0f      	ldr	r3, [pc, #60]	; (194e0 <prvTraceSetObjectState+0xa0>)
   194a4:	4798      	blx	r3
   194a6:	0003      	movs	r3, r0
   194a8:	0018      	movs	r0, r3
   194aa:	4b0b      	ldr	r3, [pc, #44]	; (194d8 <prvTraceSetObjectState+0x98>)
   194ac:	681a      	ldr	r2, [r3, #0]
   194ae:	1dfb      	adds	r3, r7, #7
   194b0:	781b      	ldrb	r3, [r3, #0]
   194b2:	2170      	movs	r1, #112	; 0x70
   194b4:	18d3      	adds	r3, r2, r3
   194b6:	185b      	adds	r3, r3, r1
   194b8:	781b      	ldrb	r3, [r3, #0]
   194ba:	18c3      	adds	r3, r0, r3
   194bc:	229c      	movs	r2, #156	; 0x9c
   194be:	18e3      	adds	r3, r4, r3
   194c0:	189b      	adds	r3, r3, r2
   194c2:	1d7a      	adds	r2, r7, #5
   194c4:	7812      	ldrb	r2, [r2, #0]
   194c6:	701a      	strb	r2, [r3, #0]
}
   194c8:	46bd      	mov	sp, r7
   194ca:	b003      	add	sp, #12
   194cc:	bd90      	pop	{r4, r7, pc}
   194ce:	46c0      	nop			; (mov r8, r8)
   194d0:	00037940 	.word	0x00037940
   194d4:	00019c89 	.word	0x00019c89
   194d8:	200009e4 	.word	0x200009e4
   194dc:	00037984 	.word	0x00037984
   194e0:	00019895 	.word	0x00019895

000194e4 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   194e4:	b590      	push	{r4, r7, lr}
   194e6:	b083      	sub	sp, #12
   194e8:	af00      	add	r7, sp, #0
   194ea:	0002      	movs	r2, r0
   194ec:	1dfb      	adds	r3, r7, #7
   194ee:	701a      	strb	r2, [r3, #0]
   194f0:	1dbb      	adds	r3, r7, #6
   194f2:	1c0a      	adds	r2, r1, #0
   194f4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   194f6:	1dfb      	adds	r3, r7, #7
   194f8:	781b      	ldrb	r3, [r3, #0]
   194fa:	2b08      	cmp	r3, #8
   194fc:	d905      	bls.n	1950a <prvTraceGetObjectState+0x26>
   194fe:	4b1a      	ldr	r3, [pc, #104]	; (19568 <prvTraceGetObjectState+0x84>)
   19500:	0018      	movs	r0, r3
   19502:	4b1a      	ldr	r3, [pc, #104]	; (1956c <prvTraceGetObjectState+0x88>)
   19504:	4798      	blx	r3
   19506:	2300      	movs	r3, #0
   19508:	e02a      	b.n	19560 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1950a:	4b19      	ldr	r3, [pc, #100]	; (19570 <prvTraceGetObjectState+0x8c>)
   1950c:	681a      	ldr	r2, [r3, #0]
   1950e:	1dfb      	adds	r3, r7, #7
   19510:	781b      	ldrb	r3, [r3, #0]
   19512:	2164      	movs	r1, #100	; 0x64
   19514:	18d3      	adds	r3, r2, r3
   19516:	185b      	adds	r3, r3, r1
   19518:	781b      	ldrb	r3, [r3, #0]
   1951a:	1dba      	adds	r2, r7, #6
   1951c:	7812      	ldrb	r2, [r2, #0]
   1951e:	429a      	cmp	r2, r3
   19520:	d905      	bls.n	1952e <prvTraceGetObjectState+0x4a>
   19522:	4b14      	ldr	r3, [pc, #80]	; (19574 <prvTraceGetObjectState+0x90>)
   19524:	0018      	movs	r0, r3
   19526:	4b11      	ldr	r3, [pc, #68]	; (1956c <prvTraceGetObjectState+0x88>)
   19528:	4798      	blx	r3
   1952a:	2300      	movs	r3, #0
   1952c:	e018      	b.n	19560 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   1952e:	4b10      	ldr	r3, [pc, #64]	; (19570 <prvTraceGetObjectState+0x8c>)
   19530:	681c      	ldr	r4, [r3, #0]
   19532:	1dfb      	adds	r3, r7, #7
   19534:	781a      	ldrb	r2, [r3, #0]
   19536:	1dbb      	adds	r3, r7, #6
   19538:	781b      	ldrb	r3, [r3, #0]
   1953a:	0011      	movs	r1, r2
   1953c:	0018      	movs	r0, r3
   1953e:	4b0e      	ldr	r3, [pc, #56]	; (19578 <prvTraceGetObjectState+0x94>)
   19540:	4798      	blx	r3
   19542:	0003      	movs	r3, r0
   19544:	0018      	movs	r0, r3
   19546:	4b0a      	ldr	r3, [pc, #40]	; (19570 <prvTraceGetObjectState+0x8c>)
   19548:	681a      	ldr	r2, [r3, #0]
   1954a:	1dfb      	adds	r3, r7, #7
   1954c:	781b      	ldrb	r3, [r3, #0]
   1954e:	2170      	movs	r1, #112	; 0x70
   19550:	18d3      	adds	r3, r2, r3
   19552:	185b      	adds	r3, r3, r1
   19554:	781b      	ldrb	r3, [r3, #0]
   19556:	18c3      	adds	r3, r0, r3
   19558:	229c      	movs	r2, #156	; 0x9c
   1955a:	18e3      	adds	r3, r4, r3
   1955c:	189b      	adds	r3, r3, r2
   1955e:	781b      	ldrb	r3, [r3, #0]
}
   19560:	0018      	movs	r0, r3
   19562:	46bd      	mov	sp, r7
   19564:	b003      	add	sp, #12
   19566:	bd90      	pop	{r4, r7, pc}
   19568:	000379c0 	.word	0x000379c0
   1956c:	00019c89 	.word	0x00019c89
   19570:	200009e4 	.word	0x200009e4
   19574:	00037a04 	.word	0x00037a04
   19578:	00019895 	.word	0x00019895

0001957c <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   1957c:	b590      	push	{r4, r7, lr}
   1957e:	b083      	sub	sp, #12
   19580:	af00      	add	r7, sp, #0
   19582:	0002      	movs	r2, r0
   19584:	1dfb      	adds	r3, r7, #7
   19586:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   19588:	4b11      	ldr	r3, [pc, #68]	; (195d0 <prvTraceSetTaskInstanceFinished+0x54>)
   1958a:	681b      	ldr	r3, [r3, #0]
   1958c:	2267      	movs	r2, #103	; 0x67
   1958e:	5c9b      	ldrb	r3, [r3, r2]
   19590:	1dfa      	adds	r2, r7, #7
   19592:	7812      	ldrb	r2, [r2, #0]
   19594:	429a      	cmp	r2, r3
   19596:	d904      	bls.n	195a2 <prvTraceSetTaskInstanceFinished+0x26>
   19598:	4b0e      	ldr	r3, [pc, #56]	; (195d4 <prvTraceSetTaskInstanceFinished+0x58>)
   1959a:	0018      	movs	r0, r3
   1959c:	4b0e      	ldr	r3, [pc, #56]	; (195d8 <prvTraceSetTaskInstanceFinished+0x5c>)
   1959e:	4798      	blx	r3
   195a0:	e013      	b.n	195ca <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   195a2:	4b0b      	ldr	r3, [pc, #44]	; (195d0 <prvTraceSetTaskInstanceFinished+0x54>)
   195a4:	681c      	ldr	r4, [r3, #0]
   195a6:	1dfb      	adds	r3, r7, #7
   195a8:	781b      	ldrb	r3, [r3, #0]
   195aa:	2103      	movs	r1, #3
   195ac:	0018      	movs	r0, r3
   195ae:	4b0b      	ldr	r3, [pc, #44]	; (195dc <prvTraceSetTaskInstanceFinished+0x60>)
   195b0:	4798      	blx	r3
   195b2:	0003      	movs	r3, r0
   195b4:	0019      	movs	r1, r3
   195b6:	4b06      	ldr	r3, [pc, #24]	; (195d0 <prvTraceSetTaskInstanceFinished+0x54>)
   195b8:	681b      	ldr	r3, [r3, #0]
   195ba:	2273      	movs	r2, #115	; 0x73
   195bc:	5c9b      	ldrb	r3, [r3, r2]
   195be:	18cb      	adds	r3, r1, r3
   195c0:	229c      	movs	r2, #156	; 0x9c
   195c2:	18e3      	adds	r3, r4, r3
   195c4:	189b      	adds	r3, r3, r2
   195c6:	2200      	movs	r2, #0
   195c8:	701a      	strb	r2, [r3, #0]
#endif
}
   195ca:	46bd      	mov	sp, r7
   195cc:	b003      	add	sp, #12
   195ce:	bd90      	pop	{r4, r7, pc}
   195d0:	200009e4 	.word	0x200009e4
   195d4:	00037a40 	.word	0x00037a40
   195d8:	00019c89 	.word	0x00019c89
   195dc:	00019895 	.word	0x00019895

000195e0 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   195e0:	b580      	push	{r7, lr}
   195e2:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   195e4:	4b75      	ldr	r3, [pc, #468]	; (197bc <prvTraceInitTraceData+0x1dc>)
   195e6:	681b      	ldr	r3, [r3, #0]
   195e8:	2b00      	cmp	r3, #0
   195ea:	d103      	bne.n	195f4 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   195ec:	4b73      	ldr	r3, [pc, #460]	; (197bc <prvTraceInitTraceData+0x1dc>)
   195ee:	4a74      	ldr	r2, [pc, #464]	; (197c0 <prvTraceInitTraceData+0x1e0>)
   195f0:	601a      	str	r2, [r3, #0]
   195f2:	e006      	b.n	19602 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   195f4:	4b71      	ldr	r3, [pc, #452]	; (197bc <prvTraceInitTraceData+0x1dc>)
   195f6:	681b      	ldr	r3, [r3, #0]
   195f8:	781b      	ldrb	r3, [r3, #0]
   195fa:	b2db      	uxtb	r3, r3
   195fc:	2b01      	cmp	r3, #1
   195fe:	d100      	bne.n	19602 <prvTraceInitTraceData+0x22>
   19600:	e0d8      	b.n	197b4 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   19602:	4b70      	ldr	r3, [pc, #448]	; (197c4 <prvTraceInitTraceData+0x1e4>)
   19604:	681a      	ldr	r2, [r3, #0]
   19606:	4b70      	ldr	r3, [pc, #448]	; (197c8 <prvTraceInitTraceData+0x1e8>)
   19608:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1960a:	4b6c      	ldr	r3, [pc, #432]	; (197bc <prvTraceInitTraceData+0x1dc>)
   1960c:	6818      	ldr	r0, [r3, #0]
   1960e:	23bd      	movs	r3, #189	; 0xbd
   19610:	011b      	lsls	r3, r3, #4
   19612:	001a      	movs	r2, r3
   19614:	2100      	movs	r1, #0
   19616:	4b6d      	ldr	r3, [pc, #436]	; (197cc <prvTraceInitTraceData+0x1ec>)
   19618:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1961a:	4b68      	ldr	r3, [pc, #416]	; (197bc <prvTraceInitTraceData+0x1dc>)
   1961c:	681b      	ldr	r3, [r3, #0]
   1961e:	4a6c      	ldr	r2, [pc, #432]	; (197d0 <prvTraceInitTraceData+0x1f0>)
   19620:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   19622:	4b66      	ldr	r3, [pc, #408]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19624:	681b      	ldr	r3, [r3, #0]
   19626:	2205      	movs	r2, #5
   19628:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1962a:	4b64      	ldr	r3, [pc, #400]	; (197bc <prvTraceInitTraceData+0x1dc>)
   1962c:	681b      	ldr	r3, [r3, #0]
   1962e:	2200      	movs	r2, #0
   19630:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   19632:	4b62      	ldr	r3, [pc, #392]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19634:	681b      	ldr	r3, [r3, #0]
   19636:	22bd      	movs	r2, #189	; 0xbd
   19638:	0112      	lsls	r2, r2, #4
   1963a:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   1963c:	4b5f      	ldr	r3, [pc, #380]	; (197bc <prvTraceInitTraceData+0x1dc>)
   1963e:	681b      	ldr	r3, [r3, #0]
   19640:	2296      	movs	r2, #150	; 0x96
   19642:	0052      	lsls	r2, r2, #1
   19644:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   19646:	4b5d      	ldr	r3, [pc, #372]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19648:	681b      	ldr	r3, [r3, #0]
   1964a:	4a62      	ldr	r2, [pc, #392]	; (197d4 <prvTraceInitTraceData+0x1f4>)
   1964c:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   1964e:	4b5b      	ldr	r3, [pc, #364]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19650:	681b      	ldr	r3, [r3, #0]
   19652:	2200      	movs	r2, #0
   19654:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   19656:	4b59      	ldr	r3, [pc, #356]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19658:	681b      	ldr	r3, [r3, #0]
   1965a:	2200      	movs	r2, #0
   1965c:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   1965e:	4b5e      	ldr	r3, [pc, #376]	; (197d8 <prvTraceInitTraceData+0x1f8>)
   19660:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   19662:	4b56      	ldr	r3, [pc, #344]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19664:	681b      	ldr	r3, [r3, #0]
   19666:	4a5d      	ldr	r2, [pc, #372]	; (197dc <prvTraceInitTraceData+0x1fc>)
   19668:	495d      	ldr	r1, [pc, #372]	; (197e0 <prvTraceInitTraceData+0x200>)
   1966a:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   1966c:	4b53      	ldr	r3, [pc, #332]	; (197bc <prvTraceInitTraceData+0x1dc>)
   1966e:	681a      	ldr	r2, [r3, #0]
   19670:	23ac      	movs	r3, #172	; 0xac
   19672:	00db      	lsls	r3, r3, #3
   19674:	21c8      	movs	r1, #200	; 0xc8
   19676:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   19678:	4b50      	ldr	r3, [pc, #320]	; (197bc <prvTraceInitTraceData+0x1dc>)
   1967a:	681b      	ldr	r3, [r3, #0]
   1967c:	4a59      	ldr	r2, [pc, #356]	; (197e4 <prvTraceInitTraceData+0x204>)
   1967e:	2101      	movs	r1, #1
   19680:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   19682:	4b4e      	ldr	r3, [pc, #312]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19684:	681a      	ldr	r2, [r3, #0]
   19686:	23d7      	movs	r3, #215	; 0xd7
   19688:	00db      	lsls	r3, r3, #3
   1968a:	4957      	ldr	r1, [pc, #348]	; (197e8 <prvTraceInitTraceData+0x208>)
   1968c:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1968e:	4b4b      	ldr	r3, [pc, #300]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19690:	681b      	ldr	r3, [r3, #0]
   19692:	4a56      	ldr	r2, [pc, #344]	; (197ec <prvTraceInitTraceData+0x20c>)
   19694:	4694      	mov	ip, r2
   19696:	4463      	add	r3, ip
   19698:	4955      	ldr	r1, [pc, #340]	; (197f0 <prvTraceInitTraceData+0x210>)
   1969a:	2250      	movs	r2, #80	; 0x50
   1969c:	0018      	movs	r0, r3
   1969e:	4b55      	ldr	r3, [pc, #340]	; (197f4 <prvTraceInitTraceData+0x214>)
   196a0:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   196a2:	4b46      	ldr	r3, [pc, #280]	; (197bc <prvTraceInitTraceData+0x1dc>)
   196a4:	681b      	ldr	r3, [r3, #0]
   196a6:	4a54      	ldr	r2, [pc, #336]	; (197f8 <prvTraceInitTraceData+0x218>)
   196a8:	4954      	ldr	r1, [pc, #336]	; (197fc <prvTraceInitTraceData+0x21c>)
   196aa:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   196ac:	4b43      	ldr	r3, [pc, #268]	; (197bc <prvTraceInitTraceData+0x1dc>)
   196ae:	681b      	ldr	r3, [r3, #0]
   196b0:	4a53      	ldr	r2, [pc, #332]	; (19800 <prvTraceInitTraceData+0x220>)
   196b2:	210a      	movs	r1, #10
   196b4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   196b6:	4b41      	ldr	r3, [pc, #260]	; (197bc <prvTraceInitTraceData+0x1dc>)
   196b8:	681b      	ldr	r3, [r3, #0]
   196ba:	4a52      	ldr	r2, [pc, #328]	; (19804 <prvTraceInitTraceData+0x224>)
   196bc:	210b      	movs	r1, #11
   196be:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   196c0:	4b3e      	ldr	r3, [pc, #248]	; (197bc <prvTraceInitTraceData+0x1dc>)
   196c2:	681b      	ldr	r3, [r3, #0]
   196c4:	4a50      	ldr	r2, [pc, #320]	; (19808 <prvTraceInitTraceData+0x228>)
   196c6:	210c      	movs	r1, #12
   196c8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   196ca:	4b3c      	ldr	r3, [pc, #240]	; (197bc <prvTraceInitTraceData+0x1dc>)
   196cc:	681b      	ldr	r3, [r3, #0]
   196ce:	4a4f      	ldr	r2, [pc, #316]	; (1980c <prvTraceInitTraceData+0x22c>)
   196d0:	210d      	movs	r1, #13
   196d2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   196d4:	4b39      	ldr	r3, [pc, #228]	; (197bc <prvTraceInitTraceData+0x1dc>)
   196d6:	681b      	ldr	r3, [r3, #0]
   196d8:	4a4d      	ldr	r2, [pc, #308]	; (19810 <prvTraceInitTraceData+0x230>)
   196da:	2171      	movs	r1, #113	; 0x71
   196dc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   196de:	4b37      	ldr	r3, [pc, #220]	; (197bc <prvTraceInitTraceData+0x1dc>)
   196e0:	681b      	ldr	r3, [r3, #0]
   196e2:	4a4c      	ldr	r2, [pc, #304]	; (19814 <prvTraceInitTraceData+0x234>)
   196e4:	2172      	movs	r1, #114	; 0x72
   196e6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   196e8:	4b34      	ldr	r3, [pc, #208]	; (197bc <prvTraceInitTraceData+0x1dc>)
   196ea:	681b      	ldr	r3, [r3, #0]
   196ec:	4a4a      	ldr	r2, [pc, #296]	; (19818 <prvTraceInitTraceData+0x238>)
   196ee:	2173      	movs	r1, #115	; 0x73
   196f0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   196f2:	4b32      	ldr	r3, [pc, #200]	; (197bc <prvTraceInitTraceData+0x1dc>)
   196f4:	681b      	ldr	r3, [r3, #0]
   196f6:	4a49      	ldr	r2, [pc, #292]	; (1981c <prvTraceInitTraceData+0x23c>)
   196f8:	2174      	movs	r1, #116	; 0x74
   196fa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   196fc:	4b2f      	ldr	r3, [pc, #188]	; (197bc <prvTraceInitTraceData+0x1dc>)
   196fe:	681b      	ldr	r3, [r3, #0]
   19700:	4a47      	ldr	r2, [pc, #284]	; (19820 <prvTraceInitTraceData+0x240>)
   19702:	21f1      	movs	r1, #241	; 0xf1
   19704:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   19706:	4b2d      	ldr	r3, [pc, #180]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19708:	681b      	ldr	r3, [r3, #0]
   1970a:	4a46      	ldr	r2, [pc, #280]	; (19824 <prvTraceInitTraceData+0x244>)
   1970c:	21f2      	movs	r1, #242	; 0xf2
   1970e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   19710:	4b2a      	ldr	r3, [pc, #168]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19712:	681b      	ldr	r3, [r3, #0]
   19714:	4a44      	ldr	r2, [pc, #272]	; (19828 <prvTraceInitTraceData+0x248>)
   19716:	21f3      	movs	r1, #243	; 0xf3
   19718:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1971a:	4b28      	ldr	r3, [pc, #160]	; (197bc <prvTraceInitTraceData+0x1dc>)
   1971c:	681b      	ldr	r3, [r3, #0]
   1971e:	4a43      	ldr	r2, [pc, #268]	; (1982c <prvTraceInitTraceData+0x24c>)
   19720:	21f4      	movs	r1, #244	; 0xf4
   19722:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   19724:	4b42      	ldr	r3, [pc, #264]	; (19830 <prvTraceInitTraceData+0x250>)
   19726:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   19728:	4b24      	ldr	r3, [pc, #144]	; (197bc <prvTraceInitTraceData+0x1dc>)
   1972a:	681b      	ldr	r3, [r3, #0]
   1972c:	22f4      	movs	r2, #244	; 0xf4
   1972e:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   19730:	4b22      	ldr	r3, [pc, #136]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19732:	681b      	ldr	r3, [r3, #0]
   19734:	22f3      	movs	r2, #243	; 0xf3
   19736:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   19738:	4b20      	ldr	r3, [pc, #128]	; (197bc <prvTraceInitTraceData+0x1dc>)
   1973a:	681b      	ldr	r3, [r3, #0]
   1973c:	22f2      	movs	r2, #242	; 0xf2
   1973e:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   19740:	4b1e      	ldr	r3, [pc, #120]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19742:	681b      	ldr	r3, [r3, #0]
   19744:	22f1      	movs	r2, #241	; 0xf1
   19746:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   19748:	4b1c      	ldr	r3, [pc, #112]	; (197bc <prvTraceInitTraceData+0x1dc>)
   1974a:	681b      	ldr	r3, [r3, #0]
   1974c:	2274      	movs	r2, #116	; 0x74
   1974e:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   19750:	4b1a      	ldr	r3, [pc, #104]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19752:	681b      	ldr	r3, [r3, #0]
   19754:	2273      	movs	r2, #115	; 0x73
   19756:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   19758:	4b18      	ldr	r3, [pc, #96]	; (197bc <prvTraceInitTraceData+0x1dc>)
   1975a:	681b      	ldr	r3, [r3, #0]
   1975c:	2272      	movs	r2, #114	; 0x72
   1975e:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   19760:	4b16      	ldr	r3, [pc, #88]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19762:	681b      	ldr	r3, [r3, #0]
   19764:	2271      	movs	r2, #113	; 0x71
   19766:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   19768:	4b14      	ldr	r3, [pc, #80]	; (197bc <prvTraceInitTraceData+0x1dc>)
   1976a:	681b      	ldr	r3, [r3, #0]
   1976c:	2204      	movs	r2, #4
   1976e:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   19770:	4b12      	ldr	r3, [pc, #72]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19772:	681b      	ldr	r3, [r3, #0]
   19774:	2203      	movs	r2, #3
   19776:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   19778:	4b10      	ldr	r3, [pc, #64]	; (197bc <prvTraceInitTraceData+0x1dc>)
   1977a:	681b      	ldr	r3, [r3, #0]
   1977c:	2202      	movs	r2, #2
   1977e:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   19780:	4b0e      	ldr	r3, [pc, #56]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19782:	681b      	ldr	r3, [r3, #0]
   19784:	2201      	movs	r2, #1
   19786:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   19788:	4b2a      	ldr	r3, [pc, #168]	; (19834 <prvTraceInitTraceData+0x254>)
   1978a:	681b      	ldr	r3, [r3, #0]
   1978c:	2b00      	cmp	r3, #0
   1978e:	d012      	beq.n	197b6 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   19790:	4b0a      	ldr	r3, [pc, #40]	; (197bc <prvTraceInitTraceData+0x1dc>)
   19792:	681b      	ldr	r3, [r3, #0]
   19794:	4a15      	ldr	r2, [pc, #84]	; (197ec <prvTraceInitTraceData+0x20c>)
   19796:	1898      	adds	r0, r3, r2
   19798:	4b26      	ldr	r3, [pc, #152]	; (19834 <prvTraceInitTraceData+0x254>)
   1979a:	681b      	ldr	r3, [r3, #0]
   1979c:	2250      	movs	r2, #80	; 0x50
   1979e:	0019      	movs	r1, r3
   197a0:	4b14      	ldr	r3, [pc, #80]	; (197f4 <prvTraceInitTraceData+0x214>)
   197a2:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   197a4:	4b05      	ldr	r3, [pc, #20]	; (197bc <prvTraceInitTraceData+0x1dc>)
   197a6:	681b      	ldr	r3, [r3, #0]
   197a8:	4a23      	ldr	r2, [pc, #140]	; (19838 <prvTraceInitTraceData+0x258>)
   197aa:	2101      	movs	r1, #1
   197ac:	5099      	str	r1, [r3, r2]
		vTraceStop();
   197ae:	4b23      	ldr	r3, [pc, #140]	; (1983c <prvTraceInitTraceData+0x25c>)
   197b0:	4798      	blx	r3
   197b2:	e000      	b.n	197b6 <prvTraceInitTraceData+0x1d6>
			return;
   197b4:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   197b6:	46bd      	mov	sp, r7
   197b8:	bd80      	pop	{r7, pc}
   197ba:	46c0      	nop			; (mov r8, r8)
   197bc:	200009e4 	.word	0x200009e4
   197c0:	20004588 	.word	0x20004588
   197c4:	e000e018 	.word	0xe000e018
   197c8:	20005158 	.word	0x20005158
   197cc:	0003489f 	.word	0x0003489f
   197d0:	00001aa1 	.word	0x00001aa1
   197d4:	f0f0f0f0 	.word	0xf0f0f0f0
   197d8:	00018745 	.word	0x00018745
   197dc:	0000055c 	.word	0x0000055c
   197e0:	f1f1f1f1 	.word	0xf1f1f1f1
   197e4:	00000564 	.word	0x00000564
   197e8:	f2f2f2f2 	.word	0xf2f2f2f2
   197ec:	000006bc 	.word	0x000006bc
   197f0:	00037a88 	.word	0x00037a88
   197f4:	00019b55 	.word	0x00019b55
   197f8:	0000070c 	.word	0x0000070c
   197fc:	f3f3f3f3 	.word	0xf3f3f3f3
   19800:	00000bc4 	.word	0x00000bc4
   19804:	00000bc5 	.word	0x00000bc5
   19808:	00000bc6 	.word	0x00000bc6
   1980c:	00000bc7 	.word	0x00000bc7
   19810:	00000bc8 	.word	0x00000bc8
   19814:	00000bc9 	.word	0x00000bc9
   19818:	00000bca 	.word	0x00000bca
   1981c:	00000bcb 	.word	0x00000bcb
   19820:	00000bcc 	.word	0x00000bcc
   19824:	00000bcd 	.word	0x00000bcd
   19828:	00000bce 	.word	0x00000bce
   1982c:	00000bcf 	.word	0x00000bcf
   19830:	000188e5 	.word	0x000188e5
   19834:	20000944 	.word	0x20000944
   19838:	000006b4 	.word	0x000006b4
   1983c:	00018b4d 	.word	0x00018b4d

00019840 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   19840:	b580      	push	{r7, lr}
   19842:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   19844:	4b10      	ldr	r3, [pc, #64]	; (19888 <prvTraceNextFreeEventBufferSlot+0x48>)
   19846:	681b      	ldr	r3, [r3, #0]
   19848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1984a:	2b00      	cmp	r3, #0
   1984c:	d101      	bne.n	19852 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1984e:	2300      	movs	r3, #0
   19850:	e017      	b.n	19882 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   19852:	4b0d      	ldr	r3, [pc, #52]	; (19888 <prvTraceNextFreeEventBufferSlot+0x48>)
   19854:	681b      	ldr	r3, [r3, #0]
   19856:	69da      	ldr	r2, [r3, #28]
   19858:	232c      	movs	r3, #44	; 0x2c
   1985a:	33ff      	adds	r3, #255	; 0xff
   1985c:	429a      	cmp	r2, r3
   1985e:	d905      	bls.n	1986c <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   19860:	4b0a      	ldr	r3, [pc, #40]	; (1988c <prvTraceNextFreeEventBufferSlot+0x4c>)
   19862:	0018      	movs	r0, r3
   19864:	4b0a      	ldr	r3, [pc, #40]	; (19890 <prvTraceNextFreeEventBufferSlot+0x50>)
   19866:	4798      	blx	r3
		return NULL;
   19868:	2300      	movs	r3, #0
   1986a:	e00a      	b.n	19882 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1986c:	4b06      	ldr	r3, [pc, #24]	; (19888 <prvTraceNextFreeEventBufferSlot+0x48>)
   1986e:	681a      	ldr	r2, [r3, #0]
   19870:	4b05      	ldr	r3, [pc, #20]	; (19888 <prvTraceNextFreeEventBufferSlot+0x48>)
   19872:	681b      	ldr	r3, [r3, #0]
   19874:	69db      	ldr	r3, [r3, #28]
   19876:	009b      	lsls	r3, r3, #2
   19878:	21e2      	movs	r1, #226	; 0xe2
   1987a:	00c9      	lsls	r1, r1, #3
   1987c:	468c      	mov	ip, r1
   1987e:	4463      	add	r3, ip
   19880:	18d3      	adds	r3, r2, r3
}
   19882:	0018      	movs	r0, r3
   19884:	46bd      	mov	sp, r7
   19886:	bd80      	pop	{r7, pc}
   19888:	200009e4 	.word	0x200009e4
   1988c:	00037a9c 	.word	0x00037a9c
   19890:	00019c89 	.word	0x00019c89

00019894 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   19894:	b580      	push	{r7, lr}
   19896:	b082      	sub	sp, #8
   19898:	af00      	add	r7, sp, #0
   1989a:	0002      	movs	r2, r0
   1989c:	1dfb      	adds	r3, r7, #7
   1989e:	701a      	strb	r2, [r3, #0]
   198a0:	1dbb      	adds	r3, r7, #6
   198a2:	1c0a      	adds	r2, r1, #0
   198a4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   198a6:	1dbb      	adds	r3, r7, #6
   198a8:	781b      	ldrb	r3, [r3, #0]
   198aa:	2b08      	cmp	r3, #8
   198ac:	d905      	bls.n	198ba <uiIndexOfObject+0x26>
   198ae:	4b2a      	ldr	r3, [pc, #168]	; (19958 <uiIndexOfObject+0xc4>)
   198b0:	0018      	movs	r0, r3
   198b2:	4b2a      	ldr	r3, [pc, #168]	; (1995c <uiIndexOfObject+0xc8>)
   198b4:	4798      	blx	r3
   198b6:	2300      	movs	r3, #0
   198b8:	e049      	b.n	1994e <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   198ba:	1dfb      	adds	r3, r7, #7
   198bc:	781b      	ldrb	r3, [r3, #0]
   198be:	2b00      	cmp	r3, #0
   198c0:	d00b      	beq.n	198da <uiIndexOfObject+0x46>
   198c2:	4b27      	ldr	r3, [pc, #156]	; (19960 <uiIndexOfObject+0xcc>)
   198c4:	681a      	ldr	r2, [r3, #0]
   198c6:	1dbb      	adds	r3, r7, #6
   198c8:	781b      	ldrb	r3, [r3, #0]
   198ca:	2164      	movs	r1, #100	; 0x64
   198cc:	18d3      	adds	r3, r2, r3
   198ce:	185b      	adds	r3, r3, r1
   198d0:	781b      	ldrb	r3, [r3, #0]
   198d2:	1dfa      	adds	r2, r7, #7
   198d4:	7812      	ldrb	r2, [r2, #0]
   198d6:	429a      	cmp	r2, r3
   198d8:	d905      	bls.n	198e6 <uiIndexOfObject+0x52>
   198da:	4b22      	ldr	r3, [pc, #136]	; (19964 <uiIndexOfObject+0xd0>)
   198dc:	0018      	movs	r0, r3
   198de:	4b1f      	ldr	r3, [pc, #124]	; (1995c <uiIndexOfObject+0xc8>)
   198e0:	4798      	blx	r3
   198e2:	2300      	movs	r3, #0
   198e4:	e033      	b.n	1994e <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   198e6:	1dbb      	adds	r3, r7, #6
   198e8:	781b      	ldrb	r3, [r3, #0]
   198ea:	2b08      	cmp	r3, #8
   198ec:	d82a      	bhi.n	19944 <uiIndexOfObject+0xb0>
   198ee:	1dfb      	adds	r3, r7, #7
   198f0:	781b      	ldrb	r3, [r3, #0]
   198f2:	2b00      	cmp	r3, #0
   198f4:	d026      	beq.n	19944 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   198f6:	4b1a      	ldr	r3, [pc, #104]	; (19960 <uiIndexOfObject+0xcc>)
   198f8:	681a      	ldr	r2, [r3, #0]
   198fa:	1dbb      	adds	r3, r7, #6
   198fc:	781b      	ldrb	r3, [r3, #0]
   198fe:	2164      	movs	r1, #100	; 0x64
   19900:	18d3      	adds	r3, r2, r3
   19902:	185b      	adds	r3, r3, r1
   19904:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   19906:	1dfa      	adds	r2, r7, #7
   19908:	7812      	ldrb	r2, [r2, #0]
   1990a:	429a      	cmp	r2, r3
   1990c:	d81a      	bhi.n	19944 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1990e:	4b14      	ldr	r3, [pc, #80]	; (19960 <uiIndexOfObject+0xcc>)
   19910:	681a      	ldr	r2, [r3, #0]
   19912:	1dbb      	adds	r3, r7, #6
   19914:	781b      	ldrb	r3, [r3, #0]
   19916:	3340      	adds	r3, #64	; 0x40
   19918:	005b      	lsls	r3, r3, #1
   1991a:	18d3      	adds	r3, r2, r3
   1991c:	3308      	adds	r3, #8
   1991e:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19920:	4b0f      	ldr	r3, [pc, #60]	; (19960 <uiIndexOfObject+0xcc>)
   19922:	6819      	ldr	r1, [r3, #0]
   19924:	1dbb      	adds	r3, r7, #6
   19926:	781b      	ldrb	r3, [r3, #0]
   19928:	207c      	movs	r0, #124	; 0x7c
   1992a:	18cb      	adds	r3, r1, r3
   1992c:	181b      	adds	r3, r3, r0
   1992e:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19930:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19932:	1df9      	adds	r1, r7, #7
   19934:	7809      	ldrb	r1, [r1, #0]
   19936:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19938:	b289      	uxth	r1, r1
   1993a:	434b      	muls	r3, r1
   1993c:	b29b      	uxth	r3, r3
   1993e:	18d3      	adds	r3, r2, r3
   19940:	b29b      	uxth	r3, r3
   19942:	e004      	b.n	1994e <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   19944:	4b08      	ldr	r3, [pc, #32]	; (19968 <uiIndexOfObject+0xd4>)
   19946:	0018      	movs	r0, r3
   19948:	4b04      	ldr	r3, [pc, #16]	; (1995c <uiIndexOfObject+0xc8>)
   1994a:	4798      	blx	r3
	return 0;
   1994c:	2300      	movs	r3, #0
}
   1994e:	0018      	movs	r0, r3
   19950:	46bd      	mov	sp, r7
   19952:	b002      	add	sp, #8
   19954:	bd80      	pop	{r7, pc}
   19956:	46c0      	nop			; (mov r8, r8)
   19958:	00037ac4 	.word	0x00037ac4
   1995c:	00019c89 	.word	0x00019c89
   19960:	200009e4 	.word	0x200009e4
   19964:	00037b04 	.word	0x00037b04
   19968:	00037b44 	.word	0x00037b44

0001996c <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1996c:	b580      	push	{r7, lr}
   1996e:	b088      	sub	sp, #32
   19970:	af00      	add	r7, sp, #0
   19972:	0002      	movs	r2, r0
   19974:	1dfb      	adds	r3, r7, #7
   19976:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   19978:	4b5a      	ldr	r3, [pc, #360]	; (19ae4 <prvTraceGetObjectHandle+0x178>)
   1997a:	681b      	ldr	r3, [r3, #0]
   1997c:	2b00      	cmp	r3, #0
   1997e:	d105      	bne.n	1998c <prvTraceGetObjectHandle+0x20>
   19980:	4b59      	ldr	r3, [pc, #356]	; (19ae8 <prvTraceGetObjectHandle+0x17c>)
   19982:	0018      	movs	r0, r3
   19984:	4b59      	ldr	r3, [pc, #356]	; (19aec <prvTraceGetObjectHandle+0x180>)
   19986:	4798      	blx	r3
   19988:	2300      	movs	r3, #0
   1998a:	e0a7      	b.n	19adc <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1998c:	1dfb      	adds	r3, r7, #7
   1998e:	781b      	ldrb	r3, [r3, #0]
   19990:	2b08      	cmp	r3, #8
   19992:	d905      	bls.n	199a0 <prvTraceGetObjectHandle+0x34>
   19994:	4b56      	ldr	r3, [pc, #344]	; (19af0 <prvTraceGetObjectHandle+0x184>)
   19996:	0018      	movs	r0, r3
   19998:	4b54      	ldr	r3, [pc, #336]	; (19aec <prvTraceGetObjectHandle+0x180>)
   1999a:	4798      	blx	r3
   1999c:	2300      	movs	r3, #0
   1999e:	e09d      	b.n	19adc <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   199a0:	f3ef 8310 	mrs	r3, PRIMASK
   199a4:	60fb      	str	r3, [r7, #12]
  return(result);
   199a6:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   199a8:	61bb      	str	r3, [r7, #24]
   199aa:	2301      	movs	r3, #1
   199ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   199ae:	693b      	ldr	r3, [r7, #16]
   199b0:	f383 8810 	msr	PRIMASK, r3
   199b4:	4b4f      	ldr	r3, [pc, #316]	; (19af4 <prvTraceGetObjectHandle+0x188>)
   199b6:	681b      	ldr	r3, [r3, #0]
   199b8:	1c5a      	adds	r2, r3, #1
   199ba:	4b4e      	ldr	r3, [pc, #312]	; (19af4 <prvTraceGetObjectHandle+0x188>)
   199bc:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   199be:	1dfb      	adds	r3, r7, #7
   199c0:	781a      	ldrb	r2, [r3, #0]
   199c2:	4b4d      	ldr	r3, [pc, #308]	; (19af8 <prvTraceGetObjectHandle+0x18c>)
   199c4:	0052      	lsls	r2, r2, #1
   199c6:	5ad3      	ldrh	r3, [r2, r3]
   199c8:	001a      	movs	r2, r3
   199ca:	4b4c      	ldr	r3, [pc, #304]	; (19afc <prvTraceGetObjectHandle+0x190>)
   199cc:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   199ce:	4b4b      	ldr	r3, [pc, #300]	; (19afc <prvTraceGetObjectHandle+0x190>)
   199d0:	681b      	ldr	r3, [r3, #0]
   199d2:	4a49      	ldr	r2, [pc, #292]	; (19af8 <prvTraceGetObjectHandle+0x18c>)
   199d4:	2148      	movs	r1, #72	; 0x48
   199d6:	18d3      	adds	r3, r2, r3
   199d8:	185b      	adds	r3, r3, r1
   199da:	781b      	ldrb	r3, [r3, #0]
   199dc:	2b00      	cmp	r3, #0
   199de:	d117      	bne.n	19a10 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   199e0:	4b46      	ldr	r3, [pc, #280]	; (19afc <prvTraceGetObjectHandle+0x190>)
   199e2:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   199e4:	4b45      	ldr	r3, [pc, #276]	; (19afc <prvTraceGetObjectHandle+0x190>)
   199e6:	681b      	ldr	r3, [r3, #0]
   199e8:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   199ea:	1dfb      	adds	r3, r7, #7
   199ec:	781b      	ldrb	r3, [r3, #0]
   199ee:	4842      	ldr	r0, [pc, #264]	; (19af8 <prvTraceGetObjectHandle+0x18c>)
   199f0:	3308      	adds	r3, #8
   199f2:	005b      	lsls	r3, r3, #1
   199f4:	18c3      	adds	r3, r0, r3
   199f6:	3302      	adds	r3, #2
   199f8:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   199fa:	b2db      	uxtb	r3, r3
   199fc:	1acb      	subs	r3, r1, r3
   199fe:	b2db      	uxtb	r3, r3
   19a00:	3301      	adds	r3, #1
   19a02:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   19a04:	4b3c      	ldr	r3, [pc, #240]	; (19af8 <prvTraceGetObjectHandle+0x18c>)
   19a06:	2148      	movs	r1, #72	; 0x48
   19a08:	189b      	adds	r3, r3, r2
   19a0a:	185b      	adds	r3, r3, r1
   19a0c:	1c02      	adds	r2, r0, #0
   19a0e:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   19a10:	4b3a      	ldr	r3, [pc, #232]	; (19afc <prvTraceGetObjectHandle+0x190>)
   19a12:	681a      	ldr	r2, [r3, #0]
   19a14:	231f      	movs	r3, #31
   19a16:	18fb      	adds	r3, r7, r3
   19a18:	4937      	ldr	r1, [pc, #220]	; (19af8 <prvTraceGetObjectHandle+0x18c>)
   19a1a:	2048      	movs	r0, #72	; 0x48
   19a1c:	188a      	adds	r2, r1, r2
   19a1e:	1812      	adds	r2, r2, r0
   19a20:	7812      	ldrb	r2, [r2, #0]
   19a22:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19a24:	1dfb      	adds	r3, r7, #7
   19a26:	781a      	ldrb	r2, [r3, #0]
   19a28:	4b33      	ldr	r3, [pc, #204]	; (19af8 <prvTraceGetObjectHandle+0x18c>)
   19a2a:	0052      	lsls	r2, r2, #1
   19a2c:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   19a2e:	1dfb      	adds	r3, r7, #7
   19a30:	781b      	ldrb	r3, [r3, #0]
   19a32:	4931      	ldr	r1, [pc, #196]	; (19af8 <prvTraceGetObjectHandle+0x18c>)
   19a34:	3310      	adds	r3, #16
   19a36:	005b      	lsls	r3, r3, #1
   19a38:	18cb      	adds	r3, r1, r3
   19a3a:	3304      	adds	r3, #4
   19a3c:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19a3e:	429a      	cmp	r2, r3
   19a40:	d90d      	bls.n	19a5e <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19a42:	1dfb      	adds	r3, r7, #7
   19a44:	781b      	ldrb	r3, [r3, #0]
   19a46:	0018      	movs	r0, r3
   19a48:	4b2d      	ldr	r3, [pc, #180]	; (19b00 <prvTraceGetObjectHandle+0x194>)
   19a4a:	4798      	blx	r3
   19a4c:	0003      	movs	r3, r0
   19a4e:	0018      	movs	r0, r3
   19a50:	4b26      	ldr	r3, [pc, #152]	; (19aec <prvTraceGetObjectHandle+0x180>)
   19a52:	4798      	blx	r3
		handle = 0;
   19a54:	231f      	movs	r3, #31
   19a56:	18fb      	adds	r3, r7, r3
   19a58:	2200      	movs	r2, #0
   19a5a:	701a      	strb	r2, [r3, #0]
   19a5c:	e031      	b.n	19ac2 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   19a5e:	1dfb      	adds	r3, r7, #7
   19a60:	781b      	ldrb	r3, [r3, #0]
   19a62:	4a25      	ldr	r2, [pc, #148]	; (19af8 <prvTraceGetObjectHandle+0x18c>)
   19a64:	0059      	lsls	r1, r3, #1
   19a66:	5a8a      	ldrh	r2, [r1, r2]
   19a68:	3201      	adds	r2, #1
   19a6a:	b291      	uxth	r1, r2
   19a6c:	4a22      	ldr	r2, [pc, #136]	; (19af8 <prvTraceGetObjectHandle+0x18c>)
   19a6e:	005b      	lsls	r3, r3, #1
   19a70:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   19a72:	1dfb      	adds	r3, r7, #7
   19a74:	781a      	ldrb	r2, [r3, #0]
   19a76:	4b20      	ldr	r3, [pc, #128]	; (19af8 <prvTraceGetObjectHandle+0x18c>)
   19a78:	0052      	lsls	r2, r2, #1
   19a7a:	5ad3      	ldrh	r3, [r2, r3]
   19a7c:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   19a7e:	1dfb      	adds	r3, r7, #7
   19a80:	781b      	ldrb	r3, [r3, #0]
   19a82:	4a1d      	ldr	r2, [pc, #116]	; (19af8 <prvTraceGetObjectHandle+0x18c>)
   19a84:	3308      	adds	r3, #8
   19a86:	005b      	lsls	r3, r3, #1
   19a88:	18d3      	adds	r3, r2, r3
   19a8a:	3302      	adds	r3, #2
   19a8c:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   19a8e:	1acb      	subs	r3, r1, r3
   19a90:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   19a92:	1dfb      	adds	r3, r7, #7
   19a94:	781b      	ldrb	r3, [r3, #0]
   19a96:	4a18      	ldr	r2, [pc, #96]	; (19af8 <prvTraceGetObjectHandle+0x18c>)
   19a98:	3318      	adds	r3, #24
   19a9a:	005b      	lsls	r3, r3, #1
   19a9c:	18d3      	adds	r3, r2, r3
   19a9e:	3306      	adds	r3, #6
   19aa0:	881b      	ldrh	r3, [r3, #0]
   19aa2:	001a      	movs	r2, r3
		if (hndCount >
   19aa4:	697b      	ldr	r3, [r7, #20]
   19aa6:	429a      	cmp	r2, r3
   19aa8:	da0b      	bge.n	19ac2 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19aaa:	1dfb      	adds	r3, r7, #7
   19aac:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   19aae:	697a      	ldr	r2, [r7, #20]
   19ab0:	b2d2      	uxtb	r2, r2
   19ab2:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19ab4:	4a10      	ldr	r2, [pc, #64]	; (19af8 <prvTraceGetObjectHandle+0x18c>)
   19ab6:	3318      	adds	r3, #24
   19ab8:	005b      	lsls	r3, r3, #1
   19aba:	18d3      	adds	r3, r2, r3
   19abc:	3306      	adds	r3, #6
   19abe:	1c0a      	adds	r2, r1, #0
   19ac0:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   19ac2:	4b0c      	ldr	r3, [pc, #48]	; (19af4 <prvTraceGetObjectHandle+0x188>)
   19ac4:	681b      	ldr	r3, [r3, #0]
   19ac6:	1e5a      	subs	r2, r3, #1
   19ac8:	4b0a      	ldr	r3, [pc, #40]	; (19af4 <prvTraceGetObjectHandle+0x188>)
   19aca:	601a      	str	r2, [r3, #0]
   19acc:	69bb      	ldr	r3, [r7, #24]
   19ace:	60bb      	str	r3, [r7, #8]
   19ad0:	68bb      	ldr	r3, [r7, #8]
   19ad2:	f383 8810 	msr	PRIMASK, r3

	return handle;
   19ad6:	231f      	movs	r3, #31
   19ad8:	18fb      	adds	r3, r7, r3
   19ada:	781b      	ldrb	r3, [r3, #0]
}
   19adc:	0018      	movs	r0, r3
   19ade:	46bd      	mov	sp, r7
   19ae0:	b008      	add	sp, #32
   19ae2:	bd80      	pop	{r7, pc}
   19ae4:	200009e4 	.word	0x200009e4
   19ae8:	00036fa4 	.word	0x00036fa4
   19aec:	00019c89 	.word	0x00019c89
   19af0:	00037b84 	.word	0x00037b84
   19af4:	2000093c 	.word	0x2000093c
   19af8:	20000954 	.word	0x20000954
   19afc:	200009e8 	.word	0x200009e8
   19b00:	000189a9 	.word	0x000189a9

00019b04 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   19b04:	b590      	push	{r4, r7, lr}
   19b06:	b085      	sub	sp, #20
   19b08:	af00      	add	r7, sp, #0
   19b0a:	0002      	movs	r2, r0
   19b0c:	1dfb      	adds	r3, r7, #7
   19b0e:	701a      	strb	r2, [r3, #0]
   19b10:	1dbb      	adds	r3, r7, #6
   19b12:	1c0a      	adds	r2, r1, #0
   19b14:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   19b16:	230e      	movs	r3, #14
   19b18:	18fc      	adds	r4, r7, r3
   19b1a:	1dfb      	adds	r3, r7, #7
   19b1c:	781a      	ldrb	r2, [r3, #0]
   19b1e:	1dbb      	adds	r3, r7, #6
   19b20:	781b      	ldrb	r3, [r3, #0]
   19b22:	0011      	movs	r1, r2
   19b24:	0018      	movs	r0, r3
   19b26:	4b09      	ldr	r3, [pc, #36]	; (19b4c <prvMarkObjectAsUsed+0x48>)
   19b28:	4798      	blx	r3
   19b2a:	0003      	movs	r3, r0
   19b2c:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   19b2e:	4b08      	ldr	r3, [pc, #32]	; (19b50 <prvMarkObjectAsUsed+0x4c>)
   19b30:	681a      	ldr	r2, [r3, #0]
   19b32:	230e      	movs	r3, #14
   19b34:	18fb      	adds	r3, r7, r3
   19b36:	881b      	ldrh	r3, [r3, #0]
   19b38:	219c      	movs	r1, #156	; 0x9c
   19b3a:	18d3      	adds	r3, r2, r3
   19b3c:	185b      	adds	r3, r3, r1
   19b3e:	2201      	movs	r2, #1
   19b40:	701a      	strb	r2, [r3, #0]
}
   19b42:	46c0      	nop			; (mov r8, r8)
   19b44:	46bd      	mov	sp, r7
   19b46:	b005      	add	sp, #20
   19b48:	bd90      	pop	{r4, r7, pc}
   19b4a:	46c0      	nop			; (mov r8, r8)
   19b4c:	00019895 	.word	0x00019895
   19b50:	200009e4 	.word	0x200009e4

00019b54 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   19b54:	b580      	push	{r7, lr}
   19b56:	b086      	sub	sp, #24
   19b58:	af00      	add	r7, sp, #0
   19b5a:	60f8      	str	r0, [r7, #12]
   19b5c:	60b9      	str	r1, [r7, #8]
   19b5e:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   19b60:	2300      	movs	r3, #0
   19b62:	617b      	str	r3, [r7, #20]
   19b64:	e010      	b.n	19b88 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   19b66:	68fa      	ldr	r2, [r7, #12]
   19b68:	697b      	ldr	r3, [r7, #20]
   19b6a:	18d3      	adds	r3, r2, r3
   19b6c:	68b9      	ldr	r1, [r7, #8]
   19b6e:	697a      	ldr	r2, [r7, #20]
   19b70:	188a      	adds	r2, r1, r2
   19b72:	7812      	ldrb	r2, [r2, #0]
   19b74:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   19b76:	68ba      	ldr	r2, [r7, #8]
   19b78:	697b      	ldr	r3, [r7, #20]
   19b7a:	18d3      	adds	r3, r2, r3
   19b7c:	781b      	ldrb	r3, [r3, #0]
   19b7e:	2b00      	cmp	r3, #0
   19b80:	d007      	beq.n	19b92 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   19b82:	697b      	ldr	r3, [r7, #20]
   19b84:	3301      	adds	r3, #1
   19b86:	617b      	str	r3, [r7, #20]
   19b88:	697a      	ldr	r2, [r7, #20]
   19b8a:	687b      	ldr	r3, [r7, #4]
   19b8c:	429a      	cmp	r2, r3
   19b8e:	d3ea      	bcc.n	19b66 <prvStrncpy+0x12>
			break;
	}
}
   19b90:	e000      	b.n	19b94 <prvStrncpy+0x40>
			break;
   19b92:	46c0      	nop			; (mov r8, r8)
}
   19b94:	46c0      	nop			; (mov r8, r8)
   19b96:	46bd      	mov	sp, r7
   19b98:	b006      	add	sp, #24
   19b9a:	bd80      	pop	{r7, pc}

00019b9c <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   19b9c:	b580      	push	{r7, lr}
   19b9e:	b082      	sub	sp, #8
   19ba0:	af00      	add	r7, sp, #0
   19ba2:	603a      	str	r2, [r7, #0]
   19ba4:	1dfb      	adds	r3, r7, #7
   19ba6:	1c02      	adds	r2, r0, #0
   19ba8:	701a      	strb	r2, [r3, #0]
   19baa:	1dbb      	adds	r3, r7, #6
   19bac:	1c0a      	adds	r2, r1, #0
   19bae:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   19bb0:	683b      	ldr	r3, [r7, #0]
   19bb2:	2b00      	cmp	r3, #0
   19bb4:	d104      	bne.n	19bc0 <prvTraceSetObjectName+0x24>
   19bb6:	4b2a      	ldr	r3, [pc, #168]	; (19c60 <prvTraceSetObjectName+0xc4>)
   19bb8:	0018      	movs	r0, r3
   19bba:	4b2a      	ldr	r3, [pc, #168]	; (19c64 <prvTraceSetObjectName+0xc8>)
   19bbc:	4798      	blx	r3
   19bbe:	e04b      	b.n	19c58 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   19bc0:	1dfb      	adds	r3, r7, #7
   19bc2:	781b      	ldrb	r3, [r3, #0]
   19bc4:	2b08      	cmp	r3, #8
   19bc6:	d904      	bls.n	19bd2 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   19bc8:	4b27      	ldr	r3, [pc, #156]	; (19c68 <prvTraceSetObjectName+0xcc>)
   19bca:	0018      	movs	r0, r3
   19bcc:	4b25      	ldr	r3, [pc, #148]	; (19c64 <prvTraceSetObjectName+0xc8>)
   19bce:	4798      	blx	r3
		return;
   19bd0:	e042      	b.n	19c58 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   19bd2:	1dbb      	adds	r3, r7, #6
   19bd4:	781b      	ldrb	r3, [r3, #0]
   19bd6:	2b00      	cmp	r3, #0
   19bd8:	d104      	bne.n	19be4 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   19bda:	4b24      	ldr	r3, [pc, #144]	; (19c6c <prvTraceSetObjectName+0xd0>)
   19bdc:	0018      	movs	r0, r3
   19bde:	4b21      	ldr	r3, [pc, #132]	; (19c64 <prvTraceSetObjectName+0xc8>)
   19be0:	4798      	blx	r3
		return;
   19be2:	e039      	b.n	19c58 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   19be4:	4b22      	ldr	r3, [pc, #136]	; (19c70 <prvTraceSetObjectName+0xd4>)
   19be6:	681a      	ldr	r2, [r3, #0]
   19be8:	1dfb      	adds	r3, r7, #7
   19bea:	781b      	ldrb	r3, [r3, #0]
   19bec:	2164      	movs	r1, #100	; 0x64
   19bee:	18d3      	adds	r3, r2, r3
   19bf0:	185b      	adds	r3, r3, r1
   19bf2:	781b      	ldrb	r3, [r3, #0]
   19bf4:	1dba      	adds	r2, r7, #6
   19bf6:	7812      	ldrb	r2, [r2, #0]
   19bf8:	429a      	cmp	r2, r3
   19bfa:	d909      	bls.n	19c10 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19bfc:	1dfb      	adds	r3, r7, #7
   19bfe:	781b      	ldrb	r3, [r3, #0]
   19c00:	0018      	movs	r0, r3
   19c02:	4b1c      	ldr	r3, [pc, #112]	; (19c74 <prvTraceSetObjectName+0xd8>)
   19c04:	4798      	blx	r3
   19c06:	0003      	movs	r3, r0
   19c08:	0018      	movs	r0, r3
   19c0a:	4b16      	ldr	r3, [pc, #88]	; (19c64 <prvTraceSetObjectName+0xc8>)
   19c0c:	4798      	blx	r3
   19c0e:	e023      	b.n	19c58 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   19c10:	1dfb      	adds	r3, r7, #7
   19c12:	781a      	ldrb	r2, [r3, #0]
   19c14:	1dbb      	adds	r3, r7, #6
   19c16:	781b      	ldrb	r3, [r3, #0]
   19c18:	0011      	movs	r1, r2
   19c1a:	0018      	movs	r0, r3
   19c1c:	4b16      	ldr	r3, [pc, #88]	; (19c78 <prvTraceSetObjectName+0xdc>)
   19c1e:	4798      	blx	r3
   19c20:	0003      	movs	r3, r0
   19c22:	001a      	movs	r2, r3
   19c24:	4b15      	ldr	r3, [pc, #84]	; (19c7c <prvTraceSetObjectName+0xe0>)
   19c26:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   19c28:	4b15      	ldr	r3, [pc, #84]	; (19c80 <prvTraceSetObjectName+0xe4>)
   19c2a:	681b      	ldr	r3, [r3, #0]
   19c2c:	2b00      	cmp	r3, #0
   19c2e:	d113      	bne.n	19c58 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19c30:	4b0f      	ldr	r3, [pc, #60]	; (19c70 <prvTraceSetObjectName+0xd4>)
   19c32:	681a      	ldr	r2, [r3, #0]
   19c34:	4b11      	ldr	r3, [pc, #68]	; (19c7c <prvTraceSetObjectName+0xe0>)
   19c36:	881b      	ldrh	r3, [r3, #0]
   19c38:	3398      	adds	r3, #152	; 0x98
   19c3a:	18d3      	adds	r3, r2, r3
   19c3c:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   19c3e:	4b0c      	ldr	r3, [pc, #48]	; (19c70 <prvTraceSetObjectName+0xd4>)
   19c40:	681a      	ldr	r2, [r3, #0]
   19c42:	1dfb      	adds	r3, r7, #7
   19c44:	781b      	ldrb	r3, [r3, #0]
   19c46:	2170      	movs	r1, #112	; 0x70
   19c48:	18d3      	adds	r3, r2, r3
   19c4a:	185b      	adds	r3, r3, r1
   19c4c:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19c4e:	001a      	movs	r2, r3
   19c50:	683b      	ldr	r3, [r7, #0]
   19c52:	0019      	movs	r1, r3
   19c54:	4b0b      	ldr	r3, [pc, #44]	; (19c84 <prvTraceSetObjectName+0xe8>)
   19c56:	4798      	blx	r3
		}
	}
}
   19c58:	46bd      	mov	sp, r7
   19c5a:	b002      	add	sp, #8
   19c5c:	bd80      	pop	{r7, pc}
   19c5e:	46c0      	nop			; (mov r8, r8)
   19c60:	00037c88 	.word	0x00037c88
   19c64:	00019c89 	.word	0x00019c89
   19c68:	00037cbc 	.word	0x00037cbc
   19c6c:	00037cec 	.word	0x00037cec
   19c70:	200009e4 	.word	0x200009e4
   19c74:	000189a9 	.word	0x000189a9
   19c78:	00019895 	.word	0x00019895
   19c7c:	200009ec 	.word	0x200009ec
   19c80:	20000944 	.word	0x20000944
   19c84:	00019b55 	.word	0x00019b55

00019c88 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   19c88:	b580      	push	{r7, lr}
   19c8a:	b082      	sub	sp, #8
   19c8c:	af00      	add	r7, sp, #0
   19c8e:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   19c90:	4b11      	ldr	r3, [pc, #68]	; (19cd8 <prvTraceError+0x50>)
   19c92:	681b      	ldr	r3, [r3, #0]
   19c94:	2b00      	cmp	r3, #0
   19c96:	d001      	beq.n	19c9c <prvTraceError+0x14>
	{
		vTraceStop();
   19c98:	4b10      	ldr	r3, [pc, #64]	; (19cdc <prvTraceError+0x54>)
   19c9a:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   19c9c:	4b10      	ldr	r3, [pc, #64]	; (19ce0 <prvTraceError+0x58>)
   19c9e:	681b      	ldr	r3, [r3, #0]
   19ca0:	2b00      	cmp	r3, #0
   19ca2:	d115      	bne.n	19cd0 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   19ca4:	4b0e      	ldr	r3, [pc, #56]	; (19ce0 <prvTraceError+0x58>)
   19ca6:	687a      	ldr	r2, [r7, #4]
   19ca8:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   19caa:	4b0b      	ldr	r3, [pc, #44]	; (19cd8 <prvTraceError+0x50>)
   19cac:	681b      	ldr	r3, [r3, #0]
   19cae:	2b00      	cmp	r3, #0
   19cb0:	d00e      	beq.n	19cd0 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   19cb2:	4b09      	ldr	r3, [pc, #36]	; (19cd8 <prvTraceError+0x50>)
   19cb4:	681b      	ldr	r3, [r3, #0]
   19cb6:	4a0b      	ldr	r2, [pc, #44]	; (19ce4 <prvTraceError+0x5c>)
   19cb8:	1898      	adds	r0, r3, r2
   19cba:	4b09      	ldr	r3, [pc, #36]	; (19ce0 <prvTraceError+0x58>)
   19cbc:	681b      	ldr	r3, [r3, #0]
   19cbe:	2250      	movs	r2, #80	; 0x50
   19cc0:	0019      	movs	r1, r3
   19cc2:	4b09      	ldr	r3, [pc, #36]	; (19ce8 <prvTraceError+0x60>)
   19cc4:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   19cc6:	4b04      	ldr	r3, [pc, #16]	; (19cd8 <prvTraceError+0x50>)
   19cc8:	681b      	ldr	r3, [r3, #0]
   19cca:	4a08      	ldr	r2, [pc, #32]	; (19cec <prvTraceError+0x64>)
   19ccc:	2101      	movs	r1, #1
   19cce:	5099      	str	r1, [r3, r2]
		}
	}
}
   19cd0:	46c0      	nop			; (mov r8, r8)
   19cd2:	46bd      	mov	sp, r7
   19cd4:	b002      	add	sp, #8
   19cd6:	bd80      	pop	{r7, pc}
   19cd8:	200009e4 	.word	0x200009e4
   19cdc:	00018b4d 	.word	0x00018b4d
   19ce0:	20000944 	.word	0x20000944
   19ce4:	000006bc 	.word	0x000006bc
   19ce8:	00019b55 	.word	0x00019b55
   19cec:	000006b4 	.word	0x000006b4

00019cf0 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   19cf0:	b580      	push	{r7, lr}
   19cf2:	b086      	sub	sp, #24
   19cf4:	af00      	add	r7, sp, #0
   19cf6:	0002      	movs	r2, r0
   19cf8:	1dfb      	adds	r3, r7, #7
   19cfa:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   19cfc:	2300      	movs	r3, #0
   19cfe:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   19d00:	2300      	movs	r3, #0
   19d02:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   19d04:	1dfb      	adds	r3, r7, #7
   19d06:	781b      	ldrb	r3, [r3, #0]
   19d08:	2b00      	cmp	r3, #0
   19d0a:	d000      	beq.n	19d0e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   19d0c:	e089      	b.n	19e22 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   19d0e:	4b49      	ldr	r3, [pc, #292]	; (19e34 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   19d10:	0018      	movs	r0, r3
   19d12:	4b49      	ldr	r3, [pc, #292]	; (19e38 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   19d14:	4798      	blx	r3
   19d16:	e08a      	b.n	19e2e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   19d18:	4b48      	ldr	r3, [pc, #288]	; (19e3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19d1a:	681b      	ldr	r3, [r3, #0]
   19d1c:	69da      	ldr	r2, [r3, #28]
   19d1e:	697b      	ldr	r3, [r7, #20]
   19d20:	18d3      	adds	r3, r2, r3
   19d22:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   19d24:	4b45      	ldr	r3, [pc, #276]	; (19e3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19d26:	6819      	ldr	r1, [r3, #0]
   19d28:	693b      	ldr	r3, [r7, #16]
   19d2a:	009a      	lsls	r2, r3, #2
   19d2c:	23e2      	movs	r3, #226	; 0xe2
   19d2e:	00db      	lsls	r3, r3, #3
   19d30:	188a      	adds	r2, r1, r2
   19d32:	18d3      	adds	r3, r2, r3
   19d34:	781b      	ldrb	r3, [r3, #0]
   19d36:	2b98      	cmp	r3, #152	; 0x98
   19d38:	d934      	bls.n	19da4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   19d3a:	4b40      	ldr	r3, [pc, #256]	; (19e3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19d3c:	6819      	ldr	r1, [r3, #0]
   19d3e:	693b      	ldr	r3, [r7, #16]
   19d40:	009a      	lsls	r2, r3, #2
   19d42:	23e2      	movs	r3, #226	; 0xe2
   19d44:	00db      	lsls	r3, r3, #3
   19d46:	188a      	adds	r2, r1, r2
   19d48:	18d3      	adds	r3, r2, r3
   19d4a:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   19d4c:	2ba7      	cmp	r3, #167	; 0xa7
   19d4e:	d829      	bhi.n	19da4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   19d50:	4b3a      	ldr	r3, [pc, #232]	; (19e3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19d52:	6819      	ldr	r1, [r3, #0]
   19d54:	693b      	ldr	r3, [r7, #16]
   19d56:	009a      	lsls	r2, r3, #2
   19d58:	23e2      	movs	r3, #226	; 0xe2
   19d5a:	00db      	lsls	r3, r3, #3
   19d5c:	188a      	adds	r2, r1, r2
   19d5e:	18d3      	adds	r3, r2, r3
   19d60:	781a      	ldrb	r2, [r3, #0]
   19d62:	230f      	movs	r3, #15
   19d64:	18fb      	adds	r3, r7, r3
   19d66:	3268      	adds	r2, #104	; 0x68
   19d68:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   19d6a:	230f      	movs	r3, #15
   19d6c:	18fb      	adds	r3, r7, r3
   19d6e:	781a      	ldrb	r2, [r3, #0]
   19d70:	693b      	ldr	r3, [r7, #16]
   19d72:	18d2      	adds	r2, r2, r3
   19d74:	4b31      	ldr	r3, [pc, #196]	; (19e3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19d76:	681b      	ldr	r3, [r3, #0]
   19d78:	699b      	ldr	r3, [r3, #24]
   19d7a:	429a      	cmp	r2, r3
   19d7c:	d24d      	bcs.n	19e1a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   19d7e:	4b2f      	ldr	r3, [pc, #188]	; (19e3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19d80:	681a      	ldr	r2, [r3, #0]
   19d82:	693b      	ldr	r3, [r7, #16]
   19d84:	009b      	lsls	r3, r3, #2
   19d86:	21e2      	movs	r1, #226	; 0xe2
   19d88:	00c9      	lsls	r1, r1, #3
   19d8a:	468c      	mov	ip, r1
   19d8c:	4463      	add	r3, ip
   19d8e:	18d0      	adds	r0, r2, r3
   19d90:	230f      	movs	r3, #15
   19d92:	18fb      	adds	r3, r7, r3
   19d94:	781b      	ldrb	r3, [r3, #0]
   19d96:	3301      	adds	r3, #1
   19d98:	009b      	lsls	r3, r3, #2
   19d9a:	001a      	movs	r2, r3
   19d9c:	2100      	movs	r1, #0
   19d9e:	4b28      	ldr	r3, [pc, #160]	; (19e40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19da0:	4798      	blx	r3
		{
   19da2:	e03a      	b.n	19e1a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   19da4:	4b25      	ldr	r3, [pc, #148]	; (19e3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19da6:	6819      	ldr	r1, [r3, #0]
   19da8:	693b      	ldr	r3, [r7, #16]
   19daa:	009a      	lsls	r2, r3, #2
   19dac:	23e2      	movs	r3, #226	; 0xe2
   19dae:	00db      	lsls	r3, r3, #3
   19db0:	188a      	adds	r2, r1, r2
   19db2:	18d3      	adds	r3, r2, r3
   19db4:	781b      	ldrb	r3, [r3, #0]
   19db6:	2b01      	cmp	r3, #1
   19db8:	d130      	bne.n	19e1c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   19dba:	693b      	ldr	r3, [r7, #16]
   19dbc:	1c5a      	adds	r2, r3, #1
   19dbe:	4b1f      	ldr	r3, [pc, #124]	; (19e3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19dc0:	681b      	ldr	r3, [r3, #0]
   19dc2:	699b      	ldr	r3, [r3, #24]
   19dc4:	429a      	cmp	r2, r3
   19dc6:	d20e      	bcs.n	19de6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   19dc8:	4b1c      	ldr	r3, [pc, #112]	; (19e3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19dca:	681a      	ldr	r2, [r3, #0]
   19dcc:	693b      	ldr	r3, [r7, #16]
   19dce:	009b      	lsls	r3, r3, #2
   19dd0:	21e2      	movs	r1, #226	; 0xe2
   19dd2:	00c9      	lsls	r1, r1, #3
   19dd4:	468c      	mov	ip, r1
   19dd6:	4463      	add	r3, ip
   19dd8:	18d3      	adds	r3, r2, r3
   19dda:	2208      	movs	r2, #8
   19ddc:	2100      	movs	r1, #0
   19dde:	0018      	movs	r0, r3
   19de0:	4b17      	ldr	r3, [pc, #92]	; (19e40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19de2:	4798      	blx	r3
   19de4:	e01a      	b.n	19e1c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   19de6:	4b15      	ldr	r3, [pc, #84]	; (19e3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19de8:	681b      	ldr	r3, [r3, #0]
   19dea:	22e2      	movs	r2, #226	; 0xe2
   19dec:	00d2      	lsls	r2, r2, #3
   19dee:	4694      	mov	ip, r2
   19df0:	4463      	add	r3, ip
   19df2:	2204      	movs	r2, #4
   19df4:	2100      	movs	r1, #0
   19df6:	0018      	movs	r0, r3
   19df8:	4b11      	ldr	r3, [pc, #68]	; (19e40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19dfa:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   19dfc:	4b0f      	ldr	r3, [pc, #60]	; (19e3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19dfe:	681a      	ldr	r2, [r3, #0]
   19e00:	693b      	ldr	r3, [r7, #16]
   19e02:	009b      	lsls	r3, r3, #2
   19e04:	21e2      	movs	r1, #226	; 0xe2
   19e06:	00c9      	lsls	r1, r1, #3
   19e08:	468c      	mov	ip, r1
   19e0a:	4463      	add	r3, ip
   19e0c:	18d3      	adds	r3, r2, r3
   19e0e:	2204      	movs	r2, #4
   19e10:	2100      	movs	r1, #0
   19e12:	0018      	movs	r0, r3
   19e14:	4b0a      	ldr	r3, [pc, #40]	; (19e40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19e16:	4798      	blx	r3
   19e18:	e000      	b.n	19e1c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   19e1a:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   19e1c:	697b      	ldr	r3, [r7, #20]
   19e1e:	3301      	adds	r3, #1
   19e20:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   19e22:	1dfb      	adds	r3, r7, #7
   19e24:	781a      	ldrb	r2, [r3, #0]
   19e26:	697b      	ldr	r3, [r7, #20]
   19e28:	429a      	cmp	r2, r3
   19e2a:	d900      	bls.n	19e2e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   19e2c:	e774      	b.n	19d18 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   19e2e:	46bd      	mov	sp, r7
   19e30:	b006      	add	sp, #24
   19e32:	bd80      	pop	{r7, pc}
   19e34:	00037d4c 	.word	0x00037d4c
   19e38:	00019c89 	.word	0x00019c89
   19e3c:	200009e4 	.word	0x200009e4
   19e40:	0003489f 	.word	0x0003489f

00019e44 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   19e44:	b580      	push	{r7, lr}
   19e46:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   19e48:	4b12      	ldr	r3, [pc, #72]	; (19e94 <prvTraceUpdateCounters+0x50>)
   19e4a:	681b      	ldr	r3, [r3, #0]
   19e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19e4e:	2b00      	cmp	r3, #0
   19e50:	d01c      	beq.n	19e8c <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   19e52:	4b10      	ldr	r3, [pc, #64]	; (19e94 <prvTraceUpdateCounters+0x50>)
   19e54:	681b      	ldr	r3, [r3, #0]
   19e56:	695a      	ldr	r2, [r3, #20]
   19e58:	3201      	adds	r2, #1
   19e5a:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   19e5c:	4b0d      	ldr	r3, [pc, #52]	; (19e94 <prvTraceUpdateCounters+0x50>)
   19e5e:	681b      	ldr	r3, [r3, #0]
   19e60:	69da      	ldr	r2, [r3, #28]
   19e62:	3201      	adds	r2, #1
   19e64:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   19e66:	4b0b      	ldr	r3, [pc, #44]	; (19e94 <prvTraceUpdateCounters+0x50>)
   19e68:	681b      	ldr	r3, [r3, #0]
   19e6a:	69da      	ldr	r2, [r3, #28]
   19e6c:	232c      	movs	r3, #44	; 0x2c
   19e6e:	33ff      	adds	r3, #255	; 0xff
   19e70:	429a      	cmp	r2, r3
   19e72:	d907      	bls.n	19e84 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   19e74:	4b07      	ldr	r3, [pc, #28]	; (19e94 <prvTraceUpdateCounters+0x50>)
   19e76:	681b      	ldr	r3, [r3, #0]
   19e78:	2201      	movs	r2, #1
   19e7a:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   19e7c:	4b05      	ldr	r3, [pc, #20]	; (19e94 <prvTraceUpdateCounters+0x50>)
   19e7e:	681b      	ldr	r3, [r3, #0]
   19e80:	2200      	movs	r2, #0
   19e82:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   19e84:	2001      	movs	r0, #1
   19e86:	4b04      	ldr	r3, [pc, #16]	; (19e98 <prvTraceUpdateCounters+0x54>)
   19e88:	4798      	blx	r3
   19e8a:	e000      	b.n	19e8e <prvTraceUpdateCounters+0x4a>
		return;
   19e8c:	46c0      	nop			; (mov r8, r8)
#endif
}
   19e8e:	46bd      	mov	sp, r7
   19e90:	bd80      	pop	{r7, pc}
   19e92:	46c0      	nop			; (mov r8, r8)
   19e94:	200009e4 	.word	0x200009e4
   19e98:	00019cf1 	.word	0x00019cf1

00019e9c <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   19e9c:	b5b0      	push	{r4, r5, r7, lr}
   19e9e:	b086      	sub	sp, #24
   19ea0:	af00      	add	r7, sp, #0
   19ea2:	0002      	movs	r2, r0
   19ea4:	1dbb      	adds	r3, r7, #6
   19ea6:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   19ea8:	2300      	movs	r3, #0
   19eaa:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   19eac:	2300      	movs	r3, #0
   19eae:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   19eb0:	2300      	movs	r3, #0
   19eb2:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   19eb4:	1dbb      	adds	r3, r7, #6
   19eb6:	881b      	ldrh	r3, [r3, #0]
   19eb8:	2bff      	cmp	r3, #255	; 0xff
   19eba:	d00a      	beq.n	19ed2 <prvTraceGetDTS+0x36>
   19ebc:	1dbb      	adds	r3, r7, #6
   19ebe:	881b      	ldrh	r3, [r3, #0]
   19ec0:	4a60      	ldr	r2, [pc, #384]	; (1a044 <prvTraceGetDTS+0x1a8>)
   19ec2:	4293      	cmp	r3, r2
   19ec4:	d005      	beq.n	19ed2 <prvTraceGetDTS+0x36>
   19ec6:	4b60      	ldr	r3, [pc, #384]	; (1a048 <prvTraceGetDTS+0x1ac>)
   19ec8:	0018      	movs	r0, r3
   19eca:	4b60      	ldr	r3, [pc, #384]	; (1a04c <prvTraceGetDTS+0x1b0>)
   19ecc:	4798      	blx	r3
   19ece:	2300      	movs	r3, #0
   19ed0:	e0b3      	b.n	1a03a <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   19ed2:	4b5f      	ldr	r3, [pc, #380]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19ed4:	681b      	ldr	r3, [r3, #0]
   19ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19ed8:	2b00      	cmp	r3, #0
   19eda:	d118      	bne.n	19f0e <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   19edc:	4b5d      	ldr	r3, [pc, #372]	; (1a054 <prvTraceGetDTS+0x1b8>)
   19ede:	681b      	ldr	r3, [r3, #0]
   19ee0:	2b00      	cmp	r3, #0
   19ee2:	d006      	beq.n	19ef2 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   19ee4:	4b5a      	ldr	r3, [pc, #360]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19ee6:	681b      	ldr	r3, [r3, #0]
   19ee8:	4a5a      	ldr	r2, [pc, #360]	; (1a054 <prvTraceGetDTS+0x1b8>)
   19eea:	6812      	ldr	r2, [r2, #0]
   19eec:	0892      	lsrs	r2, r2, #2
   19eee:	625a      	str	r2, [r3, #36]	; 0x24
   19ef0:	e00d      	b.n	19f0e <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   19ef2:	4b59      	ldr	r3, [pc, #356]	; (1a058 <prvTraceGetDTS+0x1bc>)
   19ef4:	681a      	ldr	r2, [r3, #0]
   19ef6:	4b59      	ldr	r3, [pc, #356]	; (1a05c <prvTraceGetDTS+0x1c0>)
   19ef8:	681b      	ldr	r3, [r3, #0]
   19efa:	429a      	cmp	r2, r3
   19efc:	d007      	beq.n	19f0e <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   19efe:	4b54      	ldr	r3, [pc, #336]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19f00:	681c      	ldr	r4, [r3, #0]
   19f02:	2000      	movs	r0, #0
   19f04:	4b56      	ldr	r3, [pc, #344]	; (1a060 <prvTraceGetDTS+0x1c4>)
   19f06:	4798      	blx	r3
   19f08:	0003      	movs	r3, r0
   19f0a:	089b      	lsrs	r3, r3, #2
   19f0c:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   19f0e:	230c      	movs	r3, #12
   19f10:	18fb      	adds	r3, r7, r3
   19f12:	0018      	movs	r0, r3
   19f14:	4b53      	ldr	r3, [pc, #332]	; (1a064 <prvTraceGetDTS+0x1c8>)
   19f16:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   19f18:	68fa      	ldr	r2, [r7, #12]
   19f1a:	4b53      	ldr	r3, [pc, #332]	; (1a068 <prvTraceGetDTS+0x1cc>)
   19f1c:	681b      	ldr	r3, [r3, #0]
   19f1e:	1ad3      	subs	r3, r2, r3
   19f20:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   19f22:	68fa      	ldr	r2, [r7, #12]
   19f24:	4b50      	ldr	r3, [pc, #320]	; (1a068 <prvTraceGetDTS+0x1cc>)
   19f26:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   19f28:	4b49      	ldr	r3, [pc, #292]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19f2a:	681b      	ldr	r3, [r3, #0]
   19f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19f2e:	2b00      	cmp	r3, #0
   19f30:	d044      	beq.n	19fbc <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   19f32:	4b47      	ldr	r3, [pc, #284]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19f34:	681b      	ldr	r3, [r3, #0]
   19f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19f38:	693b      	ldr	r3, [r7, #16]
   19f3a:	429a      	cmp	r2, r3
   19f3c:	d21e      	bcs.n	19f7c <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   19f3e:	4b44      	ldr	r3, [pc, #272]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19f40:	681c      	ldr	r4, [r3, #0]
   19f42:	4b43      	ldr	r3, [pc, #268]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19f44:	681b      	ldr	r3, [r3, #0]
   19f46:	6add      	ldr	r5, [r3, #44]	; 0x2c
   19f48:	4b41      	ldr	r3, [pc, #260]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19f4a:	681b      	ldr	r3, [r3, #0]
   19f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19f4e:	4b47      	ldr	r3, [pc, #284]	; (1a06c <prvTraceGetDTS+0x1d0>)
   19f50:	0011      	movs	r1, r2
   19f52:	6938      	ldr	r0, [r7, #16]
   19f54:	4798      	blx	r3
   19f56:	0003      	movs	r3, r0
   19f58:	18eb      	adds	r3, r5, r3
   19f5a:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   19f5c:	4b3c      	ldr	r3, [pc, #240]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19f5e:	681c      	ldr	r4, [r3, #0]
   19f60:	4b3b      	ldr	r3, [pc, #236]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19f62:	681b      	ldr	r3, [r3, #0]
   19f64:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   19f66:	4b3a      	ldr	r3, [pc, #232]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19f68:	681b      	ldr	r3, [r3, #0]
   19f6a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19f6c:	693a      	ldr	r2, [r7, #16]
   19f6e:	4b40      	ldr	r3, [pc, #256]	; (1a070 <prvTraceGetDTS+0x1d4>)
   19f70:	0010      	movs	r0, r2
   19f72:	4798      	blx	r3
   19f74:	000b      	movs	r3, r1
   19f76:	18eb      	adds	r3, r5, r3
   19f78:	62a3      	str	r3, [r4, #40]	; 0x28
   19f7a:	e007      	b.n	19f8c <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   19f7c:	4b34      	ldr	r3, [pc, #208]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19f7e:	681b      	ldr	r3, [r3, #0]
   19f80:	4a33      	ldr	r2, [pc, #204]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19f82:	6812      	ldr	r2, [r2, #0]
   19f84:	6a91      	ldr	r1, [r2, #40]	; 0x28
   19f86:	693a      	ldr	r2, [r7, #16]
   19f88:	188a      	adds	r2, r1, r2
   19f8a:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   19f8c:	4b30      	ldr	r3, [pc, #192]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19f8e:	681b      	ldr	r3, [r3, #0]
   19f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   19f92:	4b2f      	ldr	r3, [pc, #188]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19f94:	681b      	ldr	r3, [r3, #0]
   19f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19f98:	429a      	cmp	r2, r3
   19f9a:	d313      	bcc.n	19fc4 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   19f9c:	4b2c      	ldr	r3, [pc, #176]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19f9e:	681b      	ldr	r3, [r3, #0]
   19fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19fa2:	3201      	adds	r2, #1
   19fa4:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   19fa6:	4b2a      	ldr	r3, [pc, #168]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19fa8:	681b      	ldr	r3, [r3, #0]
   19faa:	4a29      	ldr	r2, [pc, #164]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19fac:	6812      	ldr	r2, [r2, #0]
   19fae:	6a91      	ldr	r1, [r2, #40]	; 0x28
   19fb0:	4a27      	ldr	r2, [pc, #156]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19fb2:	6812      	ldr	r2, [r2, #0]
   19fb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
   19fb6:	1a8a      	subs	r2, r1, r2
   19fb8:	629a      	str	r2, [r3, #40]	; 0x28
   19fba:	e003      	b.n	19fc4 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   19fbc:	4b24      	ldr	r3, [pc, #144]	; (1a050 <prvTraceGetDTS+0x1b4>)
   19fbe:	681b      	ldr	r3, [r3, #0]
   19fc0:	68fa      	ldr	r2, [r7, #12]
   19fc2:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   19fc4:	1dbb      	adds	r3, r7, #6
   19fc6:	881a      	ldrh	r2, [r3, #0]
   19fc8:	693b      	ldr	r3, [r7, #16]
   19fca:	429a      	cmp	r2, r3
   19fcc:	d22f      	bcs.n	1a02e <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   19fce:	4b29      	ldr	r3, [pc, #164]	; (1a074 <prvTraceGetDTS+0x1d8>)
   19fd0:	4798      	blx	r3
   19fd2:	0003      	movs	r3, r0
   19fd4:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   19fd6:	697b      	ldr	r3, [r7, #20]
   19fd8:	2b00      	cmp	r3, #0
   19fda:	d028      	beq.n	1a02e <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   19fdc:	1dbb      	adds	r3, r7, #6
   19fde:	881b      	ldrh	r3, [r3, #0]
   19fe0:	4a18      	ldr	r2, [pc, #96]	; (1a044 <prvTraceGetDTS+0x1a8>)
   19fe2:	4293      	cmp	r3, r2
   19fe4:	d10b      	bne.n	19ffe <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   19fe6:	697b      	ldr	r3, [r7, #20]
   19fe8:	22a9      	movs	r2, #169	; 0xa9
   19fea:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   19fec:	693b      	ldr	r3, [r7, #16]
   19fee:	0c1b      	lsrs	r3, r3, #16
   19ff0:	b29a      	uxth	r2, r3
   19ff2:	697b      	ldr	r3, [r7, #20]
   19ff4:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   19ff6:	697b      	ldr	r3, [r7, #20]
   19ff8:	2200      	movs	r2, #0
   19ffa:	705a      	strb	r2, [r3, #1]
   19ffc:	e015      	b.n	1a02a <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   19ffe:	1dbb      	adds	r3, r7, #6
   1a000:	881b      	ldrh	r3, [r3, #0]
   1a002:	2bff      	cmp	r3, #255	; 0xff
   1a004:	d10d      	bne.n	1a022 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1a006:	697b      	ldr	r3, [r7, #20]
   1a008:	22a8      	movs	r2, #168	; 0xa8
   1a00a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1a00c:	693b      	ldr	r3, [r7, #16]
   1a00e:	0a1b      	lsrs	r3, r3, #8
   1a010:	b29a      	uxth	r2, r3
   1a012:	697b      	ldr	r3, [r7, #20]
   1a014:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1a016:	693b      	ldr	r3, [r7, #16]
   1a018:	0e1b      	lsrs	r3, r3, #24
   1a01a:	b2da      	uxtb	r2, r3
   1a01c:	697b      	ldr	r3, [r7, #20]
   1a01e:	705a      	strb	r2, [r3, #1]
   1a020:	e003      	b.n	1a02a <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1a022:	4b15      	ldr	r3, [pc, #84]	; (1a078 <prvTraceGetDTS+0x1dc>)
   1a024:	0018      	movs	r0, r3
   1a026:	4b09      	ldr	r3, [pc, #36]	; (1a04c <prvTraceGetDTS+0x1b0>)
   1a028:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1a02a:	4b14      	ldr	r3, [pc, #80]	; (1a07c <prvTraceGetDTS+0x1e0>)
   1a02c:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1a02e:	693b      	ldr	r3, [r7, #16]
   1a030:	b29b      	uxth	r3, r3
   1a032:	1dba      	adds	r2, r7, #6
   1a034:	8812      	ldrh	r2, [r2, #0]
   1a036:	4013      	ands	r3, r2
   1a038:	b29b      	uxth	r3, r3
}
   1a03a:	0018      	movs	r0, r3
   1a03c:	46bd      	mov	sp, r7
   1a03e:	b006      	add	sp, #24
   1a040:	bdb0      	pop	{r4, r5, r7, pc}
   1a042:	46c0      	nop			; (mov r8, r8)
   1a044:	0000ffff 	.word	0x0000ffff
   1a048:	00037da4 	.word	0x00037da4
   1a04c:	00019c89 	.word	0x00019c89
   1a050:	200009e4 	.word	0x200009e4
   1a054:	20000940 	.word	0x20000940
   1a058:	e000e018 	.word	0xe000e018
   1a05c:	20005158 	.word	0x20005158
   1a060:	00029c85 	.word	0x00029c85
   1a064:	0001a081 	.word	0x0001a081
   1a068:	200009f0 	.word	0x200009f0
   1a06c:	000328c5 	.word	0x000328c5
   1a070:	000329d1 	.word	0x000329d1
   1a074:	00019841 	.word	0x00019841
   1a078:	00037de4 	.word	0x00037de4
   1a07c:	00019e45 	.word	0x00019e45

0001a080 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1a080:	b580      	push	{r7, lr}
   1a082:	b084      	sub	sp, #16
   1a084:	af00      	add	r7, sp, #0
   1a086:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1a088:	2300      	movs	r3, #0
   1a08a:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1a08c:	2300      	movs	r3, #0
   1a08e:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1a090:	4b2d      	ldr	r3, [pc, #180]	; (1a148 <prvTracePortGetTimeStamp+0xc8>)
   1a092:	681b      	ldr	r3, [r3, #0]
   1a094:	2b01      	cmp	r3, #1
   1a096:	d107      	bne.n	1a0a8 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1a098:	687b      	ldr	r3, [r7, #4]
   1a09a:	2b00      	cmp	r3, #0
   1a09c:	d04f      	beq.n	1a13e <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1a09e:	4b2b      	ldr	r3, [pc, #172]	; (1a14c <prvTracePortGetTimeStamp+0xcc>)
   1a0a0:	681a      	ldr	r2, [r3, #0]
   1a0a2:	687b      	ldr	r3, [r7, #4]
   1a0a4:	601a      	str	r2, [r3, #0]
		return;
   1a0a6:	e04a      	b.n	1a13e <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1a0a8:	4b29      	ldr	r3, [pc, #164]	; (1a150 <prvTracePortGetTimeStamp+0xd0>)
   1a0aa:	681a      	ldr	r2, [r3, #0]
   1a0ac:	4b29      	ldr	r3, [pc, #164]	; (1a154 <prvTracePortGetTimeStamp+0xd4>)
   1a0ae:	681b      	ldr	r3, [r3, #0]
   1a0b0:	1ad3      	subs	r3, r2, r3
   1a0b2:	3301      	adds	r3, #1
   1a0b4:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1a0b6:	4b28      	ldr	r3, [pc, #160]	; (1a158 <prvTracePortGetTimeStamp+0xd8>)
   1a0b8:	681a      	ldr	r2, [r3, #0]
   1a0ba:	4b28      	ldr	r3, [pc, #160]	; (1a15c <prvTracePortGetTimeStamp+0xdc>)
   1a0bc:	681b      	ldr	r3, [r3, #0]
   1a0be:	1ad3      	subs	r3, r2, r3
   1a0c0:	3b01      	subs	r3, #1
   1a0c2:	2b00      	cmp	r3, #0
   1a0c4:	db03      	blt.n	1a0ce <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1a0c6:	4b24      	ldr	r3, [pc, #144]	; (1a158 <prvTracePortGetTimeStamp+0xd8>)
   1a0c8:	681b      	ldr	r3, [r3, #0]
   1a0ca:	60fb      	str	r3, [r7, #12]
   1a0cc:	e002      	b.n	1a0d4 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1a0ce:	4b23      	ldr	r3, [pc, #140]	; (1a15c <prvTracePortGetTimeStamp+0xdc>)
   1a0d0:	681b      	ldr	r3, [r3, #0]
   1a0d2:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1a0d4:	4b20      	ldr	r3, [pc, #128]	; (1a158 <prvTracePortGetTimeStamp+0xd8>)
   1a0d6:	681b      	ldr	r3, [r3, #0]
   1a0d8:	68fa      	ldr	r2, [r7, #12]
   1a0da:	429a      	cmp	r2, r3
   1a0dc:	d107      	bne.n	1a0ee <prvTracePortGetTimeStamp+0x6e>
   1a0de:	4b20      	ldr	r3, [pc, #128]	; (1a160 <prvTracePortGetTimeStamp+0xe0>)
   1a0e0:	681b      	ldr	r3, [r3, #0]
   1a0e2:	68ba      	ldr	r2, [r7, #8]
   1a0e4:	429a      	cmp	r2, r3
   1a0e6:	d202      	bcs.n	1a0ee <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1a0e8:	68fb      	ldr	r3, [r7, #12]
   1a0ea:	3301      	adds	r3, #1
   1a0ec:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1a0ee:	687b      	ldr	r3, [r7, #4]
   1a0f0:	2b00      	cmp	r3, #0
   1a0f2:	d016      	beq.n	1a122 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1a0f4:	4b16      	ldr	r3, [pc, #88]	; (1a150 <prvTracePortGetTimeStamp+0xd0>)
   1a0f6:	681b      	ldr	r3, [r3, #0]
   1a0f8:	3301      	adds	r3, #1
   1a0fa:	089b      	lsrs	r3, r3, #2
   1a0fc:	68fa      	ldr	r2, [r7, #12]
   1a0fe:	435a      	muls	r2, r3
   1a100:	4b12      	ldr	r3, [pc, #72]	; (1a14c <prvTracePortGetTimeStamp+0xcc>)
   1a102:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1a104:	4b12      	ldr	r3, [pc, #72]	; (1a150 <prvTracePortGetTimeStamp+0xd0>)
   1a106:	681b      	ldr	r3, [r3, #0]
   1a108:	3301      	adds	r3, #1
   1a10a:	2203      	movs	r2, #3
   1a10c:	4013      	ands	r3, r2
   1a10e:	68fa      	ldr	r2, [r7, #12]
   1a110:	435a      	muls	r2, r3
   1a112:	68bb      	ldr	r3, [r7, #8]
   1a114:	18d3      	adds	r3, r2, r3
   1a116:	089a      	lsrs	r2, r3, #2
   1a118:	4b0c      	ldr	r3, [pc, #48]	; (1a14c <prvTracePortGetTimeStamp+0xcc>)
   1a11a:	681b      	ldr	r3, [r3, #0]
   1a11c:	18d2      	adds	r2, r2, r3
   1a11e:	4b0b      	ldr	r3, [pc, #44]	; (1a14c <prvTracePortGetTimeStamp+0xcc>)
   1a120:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1a122:	4b0d      	ldr	r3, [pc, #52]	; (1a158 <prvTracePortGetTimeStamp+0xd8>)
   1a124:	68fa      	ldr	r2, [r7, #12]
   1a126:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1a128:	687b      	ldr	r3, [r7, #4]
   1a12a:	2b00      	cmp	r3, #0
   1a12c:	d003      	beq.n	1a136 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1a12e:	4b07      	ldr	r3, [pc, #28]	; (1a14c <prvTracePortGetTimeStamp+0xcc>)
   1a130:	681a      	ldr	r2, [r3, #0]
   1a132:	687b      	ldr	r3, [r7, #4]
   1a134:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1a136:	4b0a      	ldr	r3, [pc, #40]	; (1a160 <prvTracePortGetTimeStamp+0xe0>)
   1a138:	68ba      	ldr	r2, [r7, #8]
   1a13a:	601a      	str	r2, [r3, #0]
   1a13c:	e000      	b.n	1a140 <prvTracePortGetTimeStamp+0xc0>
		return;
   1a13e:	46c0      	nop			; (mov r8, r8)
}
   1a140:	46bd      	mov	sp, r7
   1a142:	b004      	add	sp, #16
   1a144:	bd80      	pop	{r7, pc}
   1a146:	46c0      	nop			; (mov r8, r8)
   1a148:	20000930 	.word	0x20000930
   1a14c:	20000934 	.word	0x20000934
   1a150:	e000e014 	.word	0xe000e014
   1a154:	e000e018 	.word	0xe000e018
   1a158:	200009f4 	.word	0x200009f4
   1a15c:	2000092c 	.word	0x2000092c
   1a160:	200009f8 	.word	0x200009f8

0001a164 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1a164:	b580      	push	{r7, lr}
   1a166:	b082      	sub	sp, #8
   1a168:	af00      	add	r7, sp, #0
   1a16a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a16c:	687b      	ldr	r3, [r7, #4]
   1a16e:	3308      	adds	r3, #8
   1a170:	001a      	movs	r2, r3
   1a172:	687b      	ldr	r3, [r7, #4]
   1a174:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1a176:	687b      	ldr	r3, [r7, #4]
   1a178:	2201      	movs	r2, #1
   1a17a:	4252      	negs	r2, r2
   1a17c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a17e:	687b      	ldr	r3, [r7, #4]
   1a180:	3308      	adds	r3, #8
   1a182:	001a      	movs	r2, r3
   1a184:	687b      	ldr	r3, [r7, #4]
   1a186:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a188:	687b      	ldr	r3, [r7, #4]
   1a18a:	3308      	adds	r3, #8
   1a18c:	001a      	movs	r2, r3
   1a18e:	687b      	ldr	r3, [r7, #4]
   1a190:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1a192:	687b      	ldr	r3, [r7, #4]
   1a194:	2200      	movs	r2, #0
   1a196:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1a198:	46c0      	nop			; (mov r8, r8)
   1a19a:	46bd      	mov	sp, r7
   1a19c:	b002      	add	sp, #8
   1a19e:	bd80      	pop	{r7, pc}

0001a1a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1a1a0:	b580      	push	{r7, lr}
   1a1a2:	b082      	sub	sp, #8
   1a1a4:	af00      	add	r7, sp, #0
   1a1a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1a1a8:	687b      	ldr	r3, [r7, #4]
   1a1aa:	2200      	movs	r2, #0
   1a1ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1a1ae:	46c0      	nop			; (mov r8, r8)
   1a1b0:	46bd      	mov	sp, r7
   1a1b2:	b002      	add	sp, #8
   1a1b4:	bd80      	pop	{r7, pc}

0001a1b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1a1b6:	b580      	push	{r7, lr}
   1a1b8:	b084      	sub	sp, #16
   1a1ba:	af00      	add	r7, sp, #0
   1a1bc:	6078      	str	r0, [r7, #4]
   1a1be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1a1c0:	687b      	ldr	r3, [r7, #4]
   1a1c2:	685b      	ldr	r3, [r3, #4]
   1a1c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1a1c6:	683b      	ldr	r3, [r7, #0]
   1a1c8:	68fa      	ldr	r2, [r7, #12]
   1a1ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1a1cc:	68fb      	ldr	r3, [r7, #12]
   1a1ce:	689a      	ldr	r2, [r3, #8]
   1a1d0:	683b      	ldr	r3, [r7, #0]
   1a1d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1a1d4:	68fb      	ldr	r3, [r7, #12]
   1a1d6:	689b      	ldr	r3, [r3, #8]
   1a1d8:	683a      	ldr	r2, [r7, #0]
   1a1da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1a1dc:	68fb      	ldr	r3, [r7, #12]
   1a1de:	683a      	ldr	r2, [r7, #0]
   1a1e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1a1e2:	683b      	ldr	r3, [r7, #0]
   1a1e4:	687a      	ldr	r2, [r7, #4]
   1a1e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1a1e8:	687b      	ldr	r3, [r7, #4]
   1a1ea:	681b      	ldr	r3, [r3, #0]
   1a1ec:	1c5a      	adds	r2, r3, #1
   1a1ee:	687b      	ldr	r3, [r7, #4]
   1a1f0:	601a      	str	r2, [r3, #0]
}
   1a1f2:	46c0      	nop			; (mov r8, r8)
   1a1f4:	46bd      	mov	sp, r7
   1a1f6:	b004      	add	sp, #16
   1a1f8:	bd80      	pop	{r7, pc}

0001a1fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1a1fa:	b580      	push	{r7, lr}
   1a1fc:	b084      	sub	sp, #16
   1a1fe:	af00      	add	r7, sp, #0
   1a200:	6078      	str	r0, [r7, #4]
   1a202:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1a204:	683b      	ldr	r3, [r7, #0]
   1a206:	681b      	ldr	r3, [r3, #0]
   1a208:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1a20a:	68bb      	ldr	r3, [r7, #8]
   1a20c:	3301      	adds	r3, #1
   1a20e:	d103      	bne.n	1a218 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1a210:	687b      	ldr	r3, [r7, #4]
   1a212:	691b      	ldr	r3, [r3, #16]
   1a214:	60fb      	str	r3, [r7, #12]
   1a216:	e00c      	b.n	1a232 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a218:	687b      	ldr	r3, [r7, #4]
   1a21a:	3308      	adds	r3, #8
   1a21c:	60fb      	str	r3, [r7, #12]
   1a21e:	e002      	b.n	1a226 <vListInsert+0x2c>
   1a220:	68fb      	ldr	r3, [r7, #12]
   1a222:	685b      	ldr	r3, [r3, #4]
   1a224:	60fb      	str	r3, [r7, #12]
   1a226:	68fb      	ldr	r3, [r7, #12]
   1a228:	685b      	ldr	r3, [r3, #4]
   1a22a:	681a      	ldr	r2, [r3, #0]
   1a22c:	68bb      	ldr	r3, [r7, #8]
   1a22e:	429a      	cmp	r2, r3
   1a230:	d9f6      	bls.n	1a220 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1a232:	68fb      	ldr	r3, [r7, #12]
   1a234:	685a      	ldr	r2, [r3, #4]
   1a236:	683b      	ldr	r3, [r7, #0]
   1a238:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1a23a:	683b      	ldr	r3, [r7, #0]
   1a23c:	685b      	ldr	r3, [r3, #4]
   1a23e:	683a      	ldr	r2, [r7, #0]
   1a240:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1a242:	683b      	ldr	r3, [r7, #0]
   1a244:	68fa      	ldr	r2, [r7, #12]
   1a246:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1a248:	68fb      	ldr	r3, [r7, #12]
   1a24a:	683a      	ldr	r2, [r7, #0]
   1a24c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1a24e:	683b      	ldr	r3, [r7, #0]
   1a250:	687a      	ldr	r2, [r7, #4]
   1a252:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1a254:	687b      	ldr	r3, [r7, #4]
   1a256:	681b      	ldr	r3, [r3, #0]
   1a258:	1c5a      	adds	r2, r3, #1
   1a25a:	687b      	ldr	r3, [r7, #4]
   1a25c:	601a      	str	r2, [r3, #0]
}
   1a25e:	46c0      	nop			; (mov r8, r8)
   1a260:	46bd      	mov	sp, r7
   1a262:	b004      	add	sp, #16
   1a264:	bd80      	pop	{r7, pc}

0001a266 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1a266:	b580      	push	{r7, lr}
   1a268:	b084      	sub	sp, #16
   1a26a:	af00      	add	r7, sp, #0
   1a26c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1a26e:	687b      	ldr	r3, [r7, #4]
   1a270:	691b      	ldr	r3, [r3, #16]
   1a272:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1a274:	687b      	ldr	r3, [r7, #4]
   1a276:	685b      	ldr	r3, [r3, #4]
   1a278:	687a      	ldr	r2, [r7, #4]
   1a27a:	6892      	ldr	r2, [r2, #8]
   1a27c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1a27e:	687b      	ldr	r3, [r7, #4]
   1a280:	689b      	ldr	r3, [r3, #8]
   1a282:	687a      	ldr	r2, [r7, #4]
   1a284:	6852      	ldr	r2, [r2, #4]
   1a286:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1a288:	68fb      	ldr	r3, [r7, #12]
   1a28a:	685a      	ldr	r2, [r3, #4]
   1a28c:	687b      	ldr	r3, [r7, #4]
   1a28e:	429a      	cmp	r2, r3
   1a290:	d103      	bne.n	1a29a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1a292:	687b      	ldr	r3, [r7, #4]
   1a294:	689a      	ldr	r2, [r3, #8]
   1a296:	68fb      	ldr	r3, [r7, #12]
   1a298:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1a29a:	687b      	ldr	r3, [r7, #4]
   1a29c:	2200      	movs	r2, #0
   1a29e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1a2a0:	68fb      	ldr	r3, [r7, #12]
   1a2a2:	681b      	ldr	r3, [r3, #0]
   1a2a4:	1e5a      	subs	r2, r3, #1
   1a2a6:	68fb      	ldr	r3, [r7, #12]
   1a2a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1a2aa:	68fb      	ldr	r3, [r7, #12]
   1a2ac:	681b      	ldr	r3, [r3, #0]
}
   1a2ae:	0018      	movs	r0, r3
   1a2b0:	46bd      	mov	sp, r7
   1a2b2:	b004      	add	sp, #16
   1a2b4:	bd80      	pop	{r7, pc}
	...

0001a2b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1a2b8:	b580      	push	{r7, lr}
   1a2ba:	b084      	sub	sp, #16
   1a2bc:	af00      	add	r7, sp, #0
   1a2be:	60f8      	str	r0, [r7, #12]
   1a2c0:	60b9      	str	r1, [r7, #8]
   1a2c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1a2c4:	68fb      	ldr	r3, [r7, #12]
   1a2c6:	3b04      	subs	r3, #4
   1a2c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1a2ca:	68fb      	ldr	r3, [r7, #12]
   1a2cc:	2280      	movs	r2, #128	; 0x80
   1a2ce:	0452      	lsls	r2, r2, #17
   1a2d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1a2d2:	68fb      	ldr	r3, [r7, #12]
   1a2d4:	3b04      	subs	r3, #4
   1a2d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1a2d8:	68ba      	ldr	r2, [r7, #8]
   1a2da:	68fb      	ldr	r3, [r7, #12]
   1a2dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1a2de:	68fb      	ldr	r3, [r7, #12]
   1a2e0:	3b04      	subs	r3, #4
   1a2e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1a2e4:	4a08      	ldr	r2, [pc, #32]	; (1a308 <pxPortInitialiseStack+0x50>)
   1a2e6:	68fb      	ldr	r3, [r7, #12]
   1a2e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1a2ea:	68fb      	ldr	r3, [r7, #12]
   1a2ec:	3b14      	subs	r3, #20
   1a2ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1a2f0:	687a      	ldr	r2, [r7, #4]
   1a2f2:	68fb      	ldr	r3, [r7, #12]
   1a2f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1a2f6:	68fb      	ldr	r3, [r7, #12]
   1a2f8:	3b20      	subs	r3, #32
   1a2fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1a2fc:	68fb      	ldr	r3, [r7, #12]
}
   1a2fe:	0018      	movs	r0, r3
   1a300:	46bd      	mov	sp, r7
   1a302:	b004      	add	sp, #16
   1a304:	bd80      	pop	{r7, pc}
   1a306:	46c0      	nop			; (mov r8, r8)
   1a308:	0001a30d 	.word	0x0001a30d

0001a30c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1a30c:	b580      	push	{r7, lr}
   1a30e:	b082      	sub	sp, #8
   1a310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1a312:	2300      	movs	r3, #0
   1a314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1a316:	4b07      	ldr	r3, [pc, #28]	; (1a334 <prvTaskExitError+0x28>)
   1a318:	681b      	ldr	r3, [r3, #0]
   1a31a:	3301      	adds	r3, #1
   1a31c:	d001      	beq.n	1a322 <prvTaskExitError+0x16>
   1a31e:	b672      	cpsid	i
   1a320:	e7fe      	b.n	1a320 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1a322:	b672      	cpsid	i
	while( ulDummy == 0 )
   1a324:	46c0      	nop			; (mov r8, r8)
   1a326:	687b      	ldr	r3, [r7, #4]
   1a328:	2b00      	cmp	r3, #0
   1a32a:	d0fc      	beq.n	1a326 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1a32c:	46c0      	nop			; (mov r8, r8)
   1a32e:	46bd      	mov	sp, r7
   1a330:	b002      	add	sp, #8
   1a332:	bd80      	pop	{r7, pc}
   1a334:	200000bc 	.word	0x200000bc

0001a338 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1a338:	b580      	push	{r7, lr}
   1a33a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1a33c:	46c0      	nop			; (mov r8, r8)
   1a33e:	46bd      	mov	sp, r7
   1a340:	bd80      	pop	{r7, pc}
	...

0001a350 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1a350:	4a0b      	ldr	r2, [pc, #44]	; (1a380 <pxCurrentTCBConst2>)
   1a352:	6813      	ldr	r3, [r2, #0]
   1a354:	6818      	ldr	r0, [r3, #0]
   1a356:	3020      	adds	r0, #32
   1a358:	f380 8809 	msr	PSP, r0
   1a35c:	2002      	movs	r0, #2
   1a35e:	f380 8814 	msr	CONTROL, r0
   1a362:	f3bf 8f6f 	isb	sy
   1a366:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1a368:	46ae      	mov	lr, r5
   1a36a:	bc08      	pop	{r3}
   1a36c:	bc04      	pop	{r2}
   1a36e:	b662      	cpsie	i
   1a370:	4718      	bx	r3
   1a372:	46c0      	nop			; (mov r8, r8)
   1a374:	46c0      	nop			; (mov r8, r8)
   1a376:	46c0      	nop			; (mov r8, r8)
   1a378:	46c0      	nop			; (mov r8, r8)
   1a37a:	46c0      	nop			; (mov r8, r8)
   1a37c:	46c0      	nop			; (mov r8, r8)
   1a37e:	46c0      	nop			; (mov r8, r8)

0001a380 <pxCurrentTCBConst2>:
   1a380:	20003ccc 	.word	0x20003ccc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1a384:	46c0      	nop			; (mov r8, r8)
   1a386:	46c0      	nop			; (mov r8, r8)

0001a388 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1a388:	b580      	push	{r7, lr}
   1a38a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1a38c:	4b0e      	ldr	r3, [pc, #56]	; (1a3c8 <xPortStartScheduler+0x40>)
   1a38e:	4a0e      	ldr	r2, [pc, #56]	; (1a3c8 <xPortStartScheduler+0x40>)
   1a390:	6812      	ldr	r2, [r2, #0]
   1a392:	21ff      	movs	r1, #255	; 0xff
   1a394:	0409      	lsls	r1, r1, #16
   1a396:	430a      	orrs	r2, r1
   1a398:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1a39a:	4b0b      	ldr	r3, [pc, #44]	; (1a3c8 <xPortStartScheduler+0x40>)
   1a39c:	4a0a      	ldr	r2, [pc, #40]	; (1a3c8 <xPortStartScheduler+0x40>)
   1a39e:	6812      	ldr	r2, [r2, #0]
   1a3a0:	21ff      	movs	r1, #255	; 0xff
   1a3a2:	0609      	lsls	r1, r1, #24
   1a3a4:	430a      	orrs	r2, r1
   1a3a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1a3a8:	4b08      	ldr	r3, [pc, #32]	; (1a3cc <xPortStartScheduler+0x44>)
   1a3aa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1a3ac:	4b08      	ldr	r3, [pc, #32]	; (1a3d0 <xPortStartScheduler+0x48>)
   1a3ae:	2200      	movs	r2, #0
   1a3b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1a3b2:	4b08      	ldr	r3, [pc, #32]	; (1a3d4 <xPortStartScheduler+0x4c>)
   1a3b4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1a3b6:	4b08      	ldr	r3, [pc, #32]	; (1a3d8 <xPortStartScheduler+0x50>)
   1a3b8:	4798      	blx	r3
	prvTaskExitError();
   1a3ba:	4b08      	ldr	r3, [pc, #32]	; (1a3dc <xPortStartScheduler+0x54>)
   1a3bc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1a3be:	2300      	movs	r3, #0
}
   1a3c0:	0018      	movs	r0, r3
   1a3c2:	46bd      	mov	sp, r7
   1a3c4:	bd80      	pop	{r7, pc}
   1a3c6:	46c0      	nop			; (mov r8, r8)
   1a3c8:	e000ed20 	.word	0xe000ed20
   1a3cc:	0001a4e9 	.word	0x0001a4e9
   1a3d0:	200000bc 	.word	0x200000bc
   1a3d4:	0001a351 	.word	0x0001a351
   1a3d8:	0001ca45 	.word	0x0001ca45
   1a3dc:	0001a30d 	.word	0x0001a30d

0001a3e0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1a3e0:	b580      	push	{r7, lr}
   1a3e2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1a3e4:	4b03      	ldr	r3, [pc, #12]	; (1a3f4 <vPortYield+0x14>)
   1a3e6:	2280      	movs	r2, #128	; 0x80
   1a3e8:	0552      	lsls	r2, r2, #21
   1a3ea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1a3ec:	46c0      	nop			; (mov r8, r8)
   1a3ee:	46bd      	mov	sp, r7
   1a3f0:	bd80      	pop	{r7, pc}
   1a3f2:	46c0      	nop			; (mov r8, r8)
   1a3f4:	e000ed04 	.word	0xe000ed04

0001a3f8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1a3f8:	b580      	push	{r7, lr}
   1a3fa:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1a3fc:	b672      	cpsid	i
    uxCriticalNesting++;
   1a3fe:	4b06      	ldr	r3, [pc, #24]	; (1a418 <vPortEnterCritical+0x20>)
   1a400:	681b      	ldr	r3, [r3, #0]
   1a402:	1c5a      	adds	r2, r3, #1
   1a404:	4b04      	ldr	r3, [pc, #16]	; (1a418 <vPortEnterCritical+0x20>)
   1a406:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1a408:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1a40c:	f3bf 8f6f 	isb	sy
}
   1a410:	46c0      	nop			; (mov r8, r8)
   1a412:	46bd      	mov	sp, r7
   1a414:	bd80      	pop	{r7, pc}
   1a416:	46c0      	nop			; (mov r8, r8)
   1a418:	200000bc 	.word	0x200000bc

0001a41c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1a41c:	b580      	push	{r7, lr}
   1a41e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1a420:	4b09      	ldr	r3, [pc, #36]	; (1a448 <vPortExitCritical+0x2c>)
   1a422:	681b      	ldr	r3, [r3, #0]
   1a424:	2b00      	cmp	r3, #0
   1a426:	d101      	bne.n	1a42c <vPortExitCritical+0x10>
   1a428:	b672      	cpsid	i
   1a42a:	e7fe      	b.n	1a42a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1a42c:	4b06      	ldr	r3, [pc, #24]	; (1a448 <vPortExitCritical+0x2c>)
   1a42e:	681b      	ldr	r3, [r3, #0]
   1a430:	1e5a      	subs	r2, r3, #1
   1a432:	4b05      	ldr	r3, [pc, #20]	; (1a448 <vPortExitCritical+0x2c>)
   1a434:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1a436:	4b04      	ldr	r3, [pc, #16]	; (1a448 <vPortExitCritical+0x2c>)
   1a438:	681b      	ldr	r3, [r3, #0]
   1a43a:	2b00      	cmp	r3, #0
   1a43c:	d100      	bne.n	1a440 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1a43e:	b662      	cpsie	i
    }
}
   1a440:	46c0      	nop			; (mov r8, r8)
   1a442:	46bd      	mov	sp, r7
   1a444:	bd80      	pop	{r7, pc}
   1a446:	46c0      	nop			; (mov r8, r8)
   1a448:	200000bc 	.word	0x200000bc

0001a44c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1a44c:	f3ef 8010 	mrs	r0, PRIMASK
   1a450:	b672      	cpsid	i
   1a452:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1a454:	46c0      	nop			; (mov r8, r8)
   1a456:	0018      	movs	r0, r3

0001a458 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1a458:	f380 8810 	msr	PRIMASK, r0
   1a45c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1a45e:	46c0      	nop			; (mov r8, r8)

0001a460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1a460:	f3ef 8009 	mrs	r0, PSP
   1a464:	4b0e      	ldr	r3, [pc, #56]	; (1a4a0 <pxCurrentTCBConst>)
   1a466:	681a      	ldr	r2, [r3, #0]
   1a468:	3820      	subs	r0, #32
   1a46a:	6010      	str	r0, [r2, #0]
   1a46c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1a46e:	4644      	mov	r4, r8
   1a470:	464d      	mov	r5, r9
   1a472:	4656      	mov	r6, sl
   1a474:	465f      	mov	r7, fp
   1a476:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1a478:	b508      	push	{r3, lr}
   1a47a:	b672      	cpsid	i
   1a47c:	f002 fae2 	bl	1ca44 <vTaskSwitchContext>
   1a480:	b662      	cpsie	i
   1a482:	bc0c      	pop	{r2, r3}
   1a484:	6811      	ldr	r1, [r2, #0]
   1a486:	6808      	ldr	r0, [r1, #0]
   1a488:	3010      	adds	r0, #16
   1a48a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1a48c:	46a0      	mov	r8, r4
   1a48e:	46a9      	mov	r9, r5
   1a490:	46b2      	mov	sl, r6
   1a492:	46bb      	mov	fp, r7
   1a494:	f380 8809 	msr	PSP, r0
   1a498:	3820      	subs	r0, #32
   1a49a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1a49c:	4718      	bx	r3
   1a49e:	46c0      	nop			; (mov r8, r8)

0001a4a0 <pxCurrentTCBConst>:
   1a4a0:	20003ccc 	.word	0x20003ccc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1a4a4:	46c0      	nop			; (mov r8, r8)
   1a4a6:	46c0      	nop			; (mov r8, r8)

0001a4a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1a4a8:	b580      	push	{r7, lr}
   1a4aa:	b082      	sub	sp, #8
   1a4ac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1a4ae:	4b0a      	ldr	r3, [pc, #40]	; (1a4d8 <SysTick_Handler+0x30>)
   1a4b0:	4798      	blx	r3
   1a4b2:	0003      	movs	r3, r0
   1a4b4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1a4b6:	4b09      	ldr	r3, [pc, #36]	; (1a4dc <SysTick_Handler+0x34>)
   1a4b8:	4798      	blx	r3
   1a4ba:	1e03      	subs	r3, r0, #0
   1a4bc:	d003      	beq.n	1a4c6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1a4be:	4b08      	ldr	r3, [pc, #32]	; (1a4e0 <SysTick_Handler+0x38>)
   1a4c0:	2280      	movs	r2, #128	; 0x80
   1a4c2:	0552      	lsls	r2, r2, #21
   1a4c4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1a4c6:	687b      	ldr	r3, [r7, #4]
   1a4c8:	0018      	movs	r0, r3
   1a4ca:	4b06      	ldr	r3, [pc, #24]	; (1a4e4 <SysTick_Handler+0x3c>)
   1a4cc:	4798      	blx	r3
}
   1a4ce:	46c0      	nop			; (mov r8, r8)
   1a4d0:	46bd      	mov	sp, r7
   1a4d2:	b002      	add	sp, #8
   1a4d4:	bd80      	pop	{r7, pc}
   1a4d6:	46c0      	nop			; (mov r8, r8)
   1a4d8:	0001a44d 	.word	0x0001a44d
   1a4dc:	0001c855 	.word	0x0001c855
   1a4e0:	e000ed04 	.word	0xe000ed04
   1a4e4:	0001a459 	.word	0x0001a459

0001a4e8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1a4e8:	b5b0      	push	{r4, r5, r7, lr}
   1a4ea:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1a4ec:	4b0b      	ldr	r3, [pc, #44]	; (1a51c <prvSetupTimerInterrupt+0x34>)
   1a4ee:	2200      	movs	r2, #0
   1a4f0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1a4f2:	4b0b      	ldr	r3, [pc, #44]	; (1a520 <prvSetupTimerInterrupt+0x38>)
   1a4f4:	2200      	movs	r2, #0
   1a4f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1a4f8:	4c0a      	ldr	r4, [pc, #40]	; (1a524 <prvSetupTimerInterrupt+0x3c>)
   1a4fa:	2000      	movs	r0, #0
   1a4fc:	4b0a      	ldr	r3, [pc, #40]	; (1a528 <prvSetupTimerInterrupt+0x40>)
   1a4fe:	4798      	blx	r3
   1a500:	4b0a      	ldr	r3, [pc, #40]	; (1a52c <prvSetupTimerInterrupt+0x44>)
   1a502:	22fa      	movs	r2, #250	; 0xfa
   1a504:	0091      	lsls	r1, r2, #2
   1a506:	4798      	blx	r3
   1a508:	0003      	movs	r3, r0
   1a50a:	3b01      	subs	r3, #1
   1a50c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1a50e:	4b03      	ldr	r3, [pc, #12]	; (1a51c <prvSetupTimerInterrupt+0x34>)
   1a510:	2207      	movs	r2, #7
   1a512:	601a      	str	r2, [r3, #0]
}
   1a514:	46c0      	nop			; (mov r8, r8)
   1a516:	46bd      	mov	sp, r7
   1a518:	bdb0      	pop	{r4, r5, r7, pc}
   1a51a:	46c0      	nop			; (mov r8, r8)
   1a51c:	e000e010 	.word	0xe000e010
   1a520:	e000e018 	.word	0xe000e018
   1a524:	e000e014 	.word	0xe000e014
   1a528:	00029c85 	.word	0x00029c85
   1a52c:	000328c5 	.word	0x000328c5

0001a530 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1a530:	b580      	push	{r7, lr}
   1a532:	b084      	sub	sp, #16
   1a534:	af00      	add	r7, sp, #0
   1a536:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1a538:	2300      	movs	r3, #0
   1a53a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1a53c:	687b      	ldr	r3, [r7, #4]
   1a53e:	2207      	movs	r2, #7
   1a540:	4013      	ands	r3, r2
   1a542:	d004      	beq.n	1a54e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1a544:	687b      	ldr	r3, [r7, #4]
   1a546:	2207      	movs	r2, #7
   1a548:	4393      	bics	r3, r2
   1a54a:	3308      	adds	r3, #8
   1a54c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1a54e:	4b21      	ldr	r3, [pc, #132]	; (1a5d4 <pvPortMalloc+0xa4>)
   1a550:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1a552:	4b21      	ldr	r3, [pc, #132]	; (1a5d8 <pvPortMalloc+0xa8>)
   1a554:	681b      	ldr	r3, [r3, #0]
   1a556:	2b00      	cmp	r3, #0
   1a558:	d105      	bne.n	1a566 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1a55a:	4b20      	ldr	r3, [pc, #128]	; (1a5dc <pvPortMalloc+0xac>)
   1a55c:	2207      	movs	r2, #7
   1a55e:	4393      	bics	r3, r2
   1a560:	001a      	movs	r2, r3
   1a562:	4b1d      	ldr	r3, [pc, #116]	; (1a5d8 <pvPortMalloc+0xa8>)
   1a564:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a566:	4b1e      	ldr	r3, [pc, #120]	; (1a5e0 <pvPortMalloc+0xb0>)
   1a568:	681a      	ldr	r2, [r3, #0]
   1a56a:	687b      	ldr	r3, [r7, #4]
   1a56c:	18d3      	adds	r3, r2, r3
   1a56e:	4a1d      	ldr	r2, [pc, #116]	; (1a5e4 <pvPortMalloc+0xb4>)
   1a570:	4293      	cmp	r3, r2
   1a572:	d813      	bhi.n	1a59c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1a574:	4b1a      	ldr	r3, [pc, #104]	; (1a5e0 <pvPortMalloc+0xb0>)
   1a576:	681a      	ldr	r2, [r3, #0]
   1a578:	687b      	ldr	r3, [r7, #4]
   1a57a:	18d2      	adds	r2, r2, r3
   1a57c:	4b18      	ldr	r3, [pc, #96]	; (1a5e0 <pvPortMalloc+0xb0>)
   1a57e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a580:	429a      	cmp	r2, r3
   1a582:	d90b      	bls.n	1a59c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1a584:	4b14      	ldr	r3, [pc, #80]	; (1a5d8 <pvPortMalloc+0xa8>)
   1a586:	681a      	ldr	r2, [r3, #0]
   1a588:	4b15      	ldr	r3, [pc, #84]	; (1a5e0 <pvPortMalloc+0xb0>)
   1a58a:	681b      	ldr	r3, [r3, #0]
   1a58c:	18d3      	adds	r3, r2, r3
   1a58e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1a590:	4b13      	ldr	r3, [pc, #76]	; (1a5e0 <pvPortMalloc+0xb0>)
   1a592:	681a      	ldr	r2, [r3, #0]
   1a594:	687b      	ldr	r3, [r7, #4]
   1a596:	18d2      	adds	r2, r2, r3
   1a598:	4b11      	ldr	r3, [pc, #68]	; (1a5e0 <pvPortMalloc+0xb0>)
   1a59a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1a59c:	68fb      	ldr	r3, [r7, #12]
   1a59e:	2b00      	cmp	r3, #0
   1a5a0:	d006      	beq.n	1a5b0 <pvPortMalloc+0x80>
   1a5a2:	68fb      	ldr	r3, [r7, #12]
   1a5a4:	687a      	ldr	r2, [r7, #4]
   1a5a6:	0019      	movs	r1, r3
   1a5a8:	2094      	movs	r0, #148	; 0x94
   1a5aa:	4b0f      	ldr	r3, [pc, #60]	; (1a5e8 <pvPortMalloc+0xb8>)
   1a5ac:	4798      	blx	r3
   1a5ae:	e005      	b.n	1a5bc <pvPortMalloc+0x8c>
   1a5b0:	68fb      	ldr	r3, [r7, #12]
   1a5b2:	687a      	ldr	r2, [r7, #4]
   1a5b4:	0019      	movs	r1, r3
   1a5b6:	20e8      	movs	r0, #232	; 0xe8
   1a5b8:	4b0b      	ldr	r3, [pc, #44]	; (1a5e8 <pvPortMalloc+0xb8>)
   1a5ba:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1a5bc:	4b0b      	ldr	r3, [pc, #44]	; (1a5ec <pvPortMalloc+0xbc>)
   1a5be:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1a5c0:	68fb      	ldr	r3, [r7, #12]
   1a5c2:	2b00      	cmp	r3, #0
   1a5c4:	d101      	bne.n	1a5ca <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1a5c6:	4b0a      	ldr	r3, [pc, #40]	; (1a5f0 <pvPortMalloc+0xc0>)
   1a5c8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1a5ca:	68fb      	ldr	r3, [r7, #12]
}
   1a5cc:	0018      	movs	r0, r3
   1a5ce:	46bd      	mov	sp, r7
   1a5d0:	b004      	add	sp, #16
   1a5d2:	bd80      	pop	{r7, pc}
   1a5d4:	0001c6b1 	.word	0x0001c6b1
   1a5d8:	20003cc8 	.word	0x20003cc8
   1a5dc:	20000a04 	.word	0x20000a04
   1a5e0:	20003cc4 	.word	0x20003cc4
   1a5e4:	000032bf 	.word	0x000032bf
   1a5e8:	00018c95 	.word	0x00018c95
   1a5ec:	0001c6c9 	.word	0x0001c6c9
   1a5f0:	00032895 	.word	0x00032895

0001a5f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1a5f4:	b580      	push	{r7, lr}
   1a5f6:	b082      	sub	sp, #8
   1a5f8:	af00      	add	r7, sp, #0
   1a5fa:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1a5fc:	687b      	ldr	r3, [r7, #4]
   1a5fe:	2b00      	cmp	r3, #0
   1a600:	d001      	beq.n	1a606 <vPortFree+0x12>
   1a602:	b672      	cpsid	i
   1a604:	e7fe      	b.n	1a604 <vPortFree+0x10>
}
   1a606:	46c0      	nop			; (mov r8, r8)
   1a608:	46bd      	mov	sp, r7
   1a60a:	b002      	add	sp, #8
   1a60c:	bd80      	pop	{r7, pc}
	...

0001a610 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1a610:	b580      	push	{r7, lr}
   1a612:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1a614:	4b03      	ldr	r3, [pc, #12]	; (1a624 <xPortGetFreeHeapSize+0x14>)
   1a616:	681b      	ldr	r3, [r3, #0]
   1a618:	22cb      	movs	r2, #203	; 0xcb
   1a61a:	0192      	lsls	r2, r2, #6
   1a61c:	1ad3      	subs	r3, r2, r3
}
   1a61e:	0018      	movs	r0, r3
   1a620:	46bd      	mov	sp, r7
   1a622:	bd80      	pop	{r7, pc}
   1a624:	20003cc4 	.word	0x20003cc4

0001a628 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1a628:	b580      	push	{r7, lr}
   1a62a:	b084      	sub	sp, #16
   1a62c:	af00      	add	r7, sp, #0
   1a62e:	6078      	str	r0, [r7, #4]
   1a630:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a632:	687b      	ldr	r3, [r7, #4]
   1a634:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1a636:	68fb      	ldr	r3, [r7, #12]
   1a638:	2b00      	cmp	r3, #0
   1a63a:	d101      	bne.n	1a640 <xQueueGenericReset+0x18>
   1a63c:	b672      	cpsid	i
   1a63e:	e7fe      	b.n	1a63e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1a640:	4b23      	ldr	r3, [pc, #140]	; (1a6d0 <xQueueGenericReset+0xa8>)
   1a642:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1a644:	68fb      	ldr	r3, [r7, #12]
   1a646:	681a      	ldr	r2, [r3, #0]
   1a648:	68fb      	ldr	r3, [r7, #12]
   1a64a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1a64c:	68fb      	ldr	r3, [r7, #12]
   1a64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a650:	434b      	muls	r3, r1
   1a652:	18d2      	adds	r2, r2, r3
   1a654:	68fb      	ldr	r3, [r7, #12]
   1a656:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1a658:	68fb      	ldr	r3, [r7, #12]
   1a65a:	2200      	movs	r2, #0
   1a65c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1a65e:	68fb      	ldr	r3, [r7, #12]
   1a660:	681a      	ldr	r2, [r3, #0]
   1a662:	68fb      	ldr	r3, [r7, #12]
   1a664:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1a666:	68fb      	ldr	r3, [r7, #12]
   1a668:	681a      	ldr	r2, [r3, #0]
   1a66a:	68fb      	ldr	r3, [r7, #12]
   1a66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a66e:	1e59      	subs	r1, r3, #1
   1a670:	68fb      	ldr	r3, [r7, #12]
   1a672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a674:	434b      	muls	r3, r1
   1a676:	18d2      	adds	r2, r2, r3
   1a678:	68fb      	ldr	r3, [r7, #12]
   1a67a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1a67c:	68fb      	ldr	r3, [r7, #12]
   1a67e:	2244      	movs	r2, #68	; 0x44
   1a680:	21ff      	movs	r1, #255	; 0xff
   1a682:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1a684:	68fb      	ldr	r3, [r7, #12]
   1a686:	2245      	movs	r2, #69	; 0x45
   1a688:	21ff      	movs	r1, #255	; 0xff
   1a68a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1a68c:	683b      	ldr	r3, [r7, #0]
   1a68e:	2b00      	cmp	r3, #0
   1a690:	d10d      	bne.n	1a6ae <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a692:	68fb      	ldr	r3, [r7, #12]
   1a694:	691b      	ldr	r3, [r3, #16]
   1a696:	2b00      	cmp	r3, #0
   1a698:	d013      	beq.n	1a6c2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a69a:	68fb      	ldr	r3, [r7, #12]
   1a69c:	3310      	adds	r3, #16
   1a69e:	0018      	movs	r0, r3
   1a6a0:	4b0c      	ldr	r3, [pc, #48]	; (1a6d4 <xQueueGenericReset+0xac>)
   1a6a2:	4798      	blx	r3
   1a6a4:	1e03      	subs	r3, r0, #0
   1a6a6:	d00c      	beq.n	1a6c2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1a6a8:	4b0b      	ldr	r3, [pc, #44]	; (1a6d8 <xQueueGenericReset+0xb0>)
   1a6aa:	4798      	blx	r3
   1a6ac:	e009      	b.n	1a6c2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1a6ae:	68fb      	ldr	r3, [r7, #12]
   1a6b0:	3310      	adds	r3, #16
   1a6b2:	0018      	movs	r0, r3
   1a6b4:	4b09      	ldr	r3, [pc, #36]	; (1a6dc <xQueueGenericReset+0xb4>)
   1a6b6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1a6b8:	68fb      	ldr	r3, [r7, #12]
   1a6ba:	3324      	adds	r3, #36	; 0x24
   1a6bc:	0018      	movs	r0, r3
   1a6be:	4b07      	ldr	r3, [pc, #28]	; (1a6dc <xQueueGenericReset+0xb4>)
   1a6c0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1a6c2:	4b07      	ldr	r3, [pc, #28]	; (1a6e0 <xQueueGenericReset+0xb8>)
   1a6c4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1a6c6:	2301      	movs	r3, #1
}
   1a6c8:	0018      	movs	r0, r3
   1a6ca:	46bd      	mov	sp, r7
   1a6cc:	b004      	add	sp, #16
   1a6ce:	bd80      	pop	{r7, pc}
   1a6d0:	0001a3f9 	.word	0x0001a3f9
   1a6d4:	0001cc89 	.word	0x0001cc89
   1a6d8:	0001a3e1 	.word	0x0001a3e1
   1a6dc:	0001a165 	.word	0x0001a165
   1a6e0:	0001a41d 	.word	0x0001a41d

0001a6e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1a6e4:	b590      	push	{r4, r7, lr}
   1a6e6:	b08b      	sub	sp, #44	; 0x2c
   1a6e8:	af02      	add	r7, sp, #8
   1a6ea:	60f8      	str	r0, [r7, #12]
   1a6ec:	60b9      	str	r1, [r7, #8]
   1a6ee:	1dfb      	adds	r3, r7, #7
   1a6f0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1a6f2:	68fb      	ldr	r3, [r7, #12]
   1a6f4:	2b00      	cmp	r3, #0
   1a6f6:	d101      	bne.n	1a6fc <xQueueGenericCreate+0x18>
   1a6f8:	b672      	cpsid	i
   1a6fa:	e7fe      	b.n	1a6fa <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1a6fc:	68bb      	ldr	r3, [r7, #8]
   1a6fe:	2b00      	cmp	r3, #0
   1a700:	d102      	bne.n	1a708 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1a702:	2300      	movs	r3, #0
   1a704:	61fb      	str	r3, [r7, #28]
   1a706:	e003      	b.n	1a710 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a708:	68fb      	ldr	r3, [r7, #12]
   1a70a:	68ba      	ldr	r2, [r7, #8]
   1a70c:	4353      	muls	r3, r2
   1a70e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1a710:	69fb      	ldr	r3, [r7, #28]
   1a712:	3354      	adds	r3, #84	; 0x54
   1a714:	0018      	movs	r0, r3
   1a716:	4b19      	ldr	r3, [pc, #100]	; (1a77c <xQueueGenericCreate+0x98>)
   1a718:	4798      	blx	r3
   1a71a:	0003      	movs	r3, r0
   1a71c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1a71e:	69bb      	ldr	r3, [r7, #24]
   1a720:	2b00      	cmp	r3, #0
   1a722:	d00d      	beq.n	1a740 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1a724:	69bb      	ldr	r3, [r7, #24]
   1a726:	3354      	adds	r3, #84	; 0x54
   1a728:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1a72a:	1dfb      	adds	r3, r7, #7
   1a72c:	781c      	ldrb	r4, [r3, #0]
   1a72e:	697a      	ldr	r2, [r7, #20]
   1a730:	68b9      	ldr	r1, [r7, #8]
   1a732:	68f8      	ldr	r0, [r7, #12]
   1a734:	69bb      	ldr	r3, [r7, #24]
   1a736:	9300      	str	r3, [sp, #0]
   1a738:	0023      	movs	r3, r4
   1a73a:	4c11      	ldr	r4, [pc, #68]	; (1a780 <xQueueGenericCreate+0x9c>)
   1a73c:	47a0      	blx	r4
   1a73e:	e017      	b.n	1a770 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1a740:	4b10      	ldr	r3, [pc, #64]	; (1a784 <xQueueGenericCreate+0xa0>)
   1a742:	4798      	blx	r3
   1a744:	0003      	movs	r3, r0
   1a746:	0018      	movs	r0, r3
   1a748:	4b0f      	ldr	r3, [pc, #60]	; (1a788 <xQueueGenericCreate+0xa4>)
   1a74a:	4798      	blx	r3
   1a74c:	0003      	movs	r3, r0
   1a74e:	001a      	movs	r2, r3
   1a750:	4b0e      	ldr	r3, [pc, #56]	; (1a78c <xQueueGenericCreate+0xa8>)
   1a752:	881b      	ldrh	r3, [r3, #0]
   1a754:	4013      	ands	r3, r2
   1a756:	b29b      	uxth	r3, r3
   1a758:	2b00      	cmp	r3, #0
   1a75a:	d009      	beq.n	1a770 <xQueueGenericCreate+0x8c>
   1a75c:	1dfb      	adds	r3, r7, #7
   1a75e:	781b      	ldrb	r3, [r3, #0]
   1a760:	4a0b      	ldr	r2, [pc, #44]	; (1a790 <xQueueGenericCreate+0xac>)
   1a762:	5cd3      	ldrb	r3, [r2, r3]
   1a764:	3340      	adds	r3, #64	; 0x40
   1a766:	b2db      	uxtb	r3, r3
   1a768:	2100      	movs	r1, #0
   1a76a:	0018      	movs	r0, r3
   1a76c:	4b09      	ldr	r3, [pc, #36]	; (1a794 <xQueueGenericCreate+0xb0>)
   1a76e:	4798      	blx	r3
		}

		return pxNewQueue;
   1a770:	69bb      	ldr	r3, [r7, #24]
	}
   1a772:	0018      	movs	r0, r3
   1a774:	46bd      	mov	sp, r7
   1a776:	b009      	add	sp, #36	; 0x24
   1a778:	bd90      	pop	{r4, r7, pc}
   1a77a:	46c0      	nop			; (mov r8, r8)
   1a77c:	0001a531 	.word	0x0001a531
   1a780:	0001a799 	.word	0x0001a799
   1a784:	00018689 	.word	0x00018689
   1a788:	000183ed 	.word	0x000183ed
   1a78c:	200000b8 	.word	0x200000b8
   1a790:	200000ac 	.word	0x200000ac
   1a794:	000190ed 	.word	0x000190ed

0001a798 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1a798:	b5b0      	push	{r4, r5, r7, lr}
   1a79a:	b084      	sub	sp, #16
   1a79c:	af00      	add	r7, sp, #0
   1a79e:	60f8      	str	r0, [r7, #12]
   1a7a0:	60b9      	str	r1, [r7, #8]
   1a7a2:	607a      	str	r2, [r7, #4]
   1a7a4:	001a      	movs	r2, r3
   1a7a6:	1cfb      	adds	r3, r7, #3
   1a7a8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1a7aa:	68bb      	ldr	r3, [r7, #8]
   1a7ac:	2b00      	cmp	r3, #0
   1a7ae:	d103      	bne.n	1a7b8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1a7b0:	6a3b      	ldr	r3, [r7, #32]
   1a7b2:	6a3a      	ldr	r2, [r7, #32]
   1a7b4:	601a      	str	r2, [r3, #0]
   1a7b6:	e002      	b.n	1a7be <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1a7b8:	6a3b      	ldr	r3, [r7, #32]
   1a7ba:	687a      	ldr	r2, [r7, #4]
   1a7bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1a7be:	6a3b      	ldr	r3, [r7, #32]
   1a7c0:	68fa      	ldr	r2, [r7, #12]
   1a7c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1a7c4:	6a3b      	ldr	r3, [r7, #32]
   1a7c6:	68ba      	ldr	r2, [r7, #8]
   1a7c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1a7ca:	6a3b      	ldr	r3, [r7, #32]
   1a7cc:	2101      	movs	r1, #1
   1a7ce:	0018      	movs	r0, r3
   1a7d0:	4b41      	ldr	r3, [pc, #260]	; (1a8d8 <prvInitialiseNewQueue+0x140>)
   1a7d2:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1a7d4:	6a3b      	ldr	r3, [r7, #32]
   1a7d6:	1cfa      	adds	r2, r7, #3
   1a7d8:	2150      	movs	r1, #80	; 0x50
   1a7da:	7812      	ldrb	r2, [r2, #0]
   1a7dc:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1a7de:	6a3b      	ldr	r3, [r7, #32]
   1a7e0:	2200      	movs	r2, #0
   1a7e2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1a7e4:	6a3b      	ldr	r3, [r7, #32]
   1a7e6:	0018      	movs	r0, r3
   1a7e8:	4b3c      	ldr	r3, [pc, #240]	; (1a8dc <prvInitialiseNewQueue+0x144>)
   1a7ea:	4798      	blx	r3
   1a7ec:	0003      	movs	r3, r0
   1a7ee:	001a      	movs	r2, r3
   1a7f0:	4b3b      	ldr	r3, [pc, #236]	; (1a8e0 <prvInitialiseNewQueue+0x148>)
   1a7f2:	5c9b      	ldrb	r3, [r3, r2]
   1a7f4:	0018      	movs	r0, r3
   1a7f6:	4b3b      	ldr	r3, [pc, #236]	; (1a8e4 <prvInitialiseNewQueue+0x14c>)
   1a7f8:	4798      	blx	r3
   1a7fa:	0003      	movs	r3, r0
   1a7fc:	b29a      	uxth	r2, r3
   1a7fe:	6a3b      	ldr	r3, [r7, #32]
   1a800:	0011      	movs	r1, r2
   1a802:	0018      	movs	r0, r3
   1a804:	4b38      	ldr	r3, [pc, #224]	; (1a8e8 <prvInitialiseNewQueue+0x150>)
   1a806:	4798      	blx	r3
   1a808:	4b38      	ldr	r3, [pc, #224]	; (1a8ec <prvInitialiseNewQueue+0x154>)
   1a80a:	881a      	ldrh	r2, [r3, #0]
   1a80c:	6a3b      	ldr	r3, [r7, #32]
   1a80e:	0011      	movs	r1, r2
   1a810:	0018      	movs	r0, r3
   1a812:	4b37      	ldr	r3, [pc, #220]	; (1a8f0 <prvInitialiseNewQueue+0x158>)
   1a814:	4798      	blx	r3
   1a816:	6a3b      	ldr	r3, [r7, #32]
   1a818:	0018      	movs	r0, r3
   1a81a:	4b30      	ldr	r3, [pc, #192]	; (1a8dc <prvInitialiseNewQueue+0x144>)
   1a81c:	4798      	blx	r3
   1a81e:	0003      	movs	r3, r0
   1a820:	001a      	movs	r2, r3
   1a822:	4b2f      	ldr	r3, [pc, #188]	; (1a8e0 <prvInitialiseNewQueue+0x148>)
   1a824:	5c9c      	ldrb	r4, [r3, r2]
   1a826:	6a3b      	ldr	r3, [r7, #32]
   1a828:	0018      	movs	r0, r3
   1a82a:	4b32      	ldr	r3, [pc, #200]	; (1a8f4 <prvInitialiseNewQueue+0x15c>)
   1a82c:	4798      	blx	r3
   1a82e:	0003      	movs	r3, r0
   1a830:	b2db      	uxtb	r3, r3
   1a832:	0019      	movs	r1, r3
   1a834:	0020      	movs	r0, r4
   1a836:	4b30      	ldr	r3, [pc, #192]	; (1a8f8 <prvInitialiseNewQueue+0x160>)
   1a838:	4798      	blx	r3
   1a83a:	4b30      	ldr	r3, [pc, #192]	; (1a8fc <prvInitialiseNewQueue+0x164>)
   1a83c:	4798      	blx	r3
   1a83e:	0003      	movs	r3, r0
   1a840:	0018      	movs	r0, r3
   1a842:	4b2f      	ldr	r3, [pc, #188]	; (1a900 <prvInitialiseNewQueue+0x168>)
   1a844:	4798      	blx	r3
   1a846:	0003      	movs	r3, r0
   1a848:	001a      	movs	r2, r3
   1a84a:	4b2e      	ldr	r3, [pc, #184]	; (1a904 <prvInitialiseNewQueue+0x16c>)
   1a84c:	881b      	ldrh	r3, [r3, #0]
   1a84e:	4013      	ands	r3, r2
   1a850:	b29b      	uxth	r3, r3
   1a852:	2b00      	cmp	r3, #0
   1a854:	d029      	beq.n	1a8aa <prvInitialiseNewQueue+0x112>
   1a856:	6a3b      	ldr	r3, [r7, #32]
   1a858:	0018      	movs	r0, r3
   1a85a:	4b2b      	ldr	r3, [pc, #172]	; (1a908 <prvInitialiseNewQueue+0x170>)
   1a85c:	4798      	blx	r3
   1a85e:	0003      	movs	r3, r0
   1a860:	001a      	movs	r2, r3
   1a862:	4b28      	ldr	r3, [pc, #160]	; (1a904 <prvInitialiseNewQueue+0x16c>)
   1a864:	881b      	ldrh	r3, [r3, #0]
   1a866:	4013      	ands	r3, r2
   1a868:	b29b      	uxth	r3, r3
   1a86a:	2b00      	cmp	r3, #0
   1a86c:	d01d      	beq.n	1a8aa <prvInitialiseNewQueue+0x112>
   1a86e:	6a3b      	ldr	r3, [r7, #32]
   1a870:	0018      	movs	r0, r3
   1a872:	4b1a      	ldr	r3, [pc, #104]	; (1a8dc <prvInitialiseNewQueue+0x144>)
   1a874:	4798      	blx	r3
   1a876:	0003      	movs	r3, r0
   1a878:	001a      	movs	r2, r3
   1a87a:	4b19      	ldr	r3, [pc, #100]	; (1a8e0 <prvInitialiseNewQueue+0x148>)
   1a87c:	5c9b      	ldrb	r3, [r3, r2]
   1a87e:	3318      	adds	r3, #24
   1a880:	b2db      	uxtb	r3, r3
   1a882:	001d      	movs	r5, r3
   1a884:	6a3b      	ldr	r3, [r7, #32]
   1a886:	0018      	movs	r0, r3
   1a888:	4b14      	ldr	r3, [pc, #80]	; (1a8dc <prvInitialiseNewQueue+0x144>)
   1a88a:	4798      	blx	r3
   1a88c:	0003      	movs	r3, r0
   1a88e:	001a      	movs	r2, r3
   1a890:	4b13      	ldr	r3, [pc, #76]	; (1a8e0 <prvInitialiseNewQueue+0x148>)
   1a892:	5c9c      	ldrb	r4, [r3, r2]
   1a894:	6a3b      	ldr	r3, [r7, #32]
   1a896:	0018      	movs	r0, r3
   1a898:	4b16      	ldr	r3, [pc, #88]	; (1a8f4 <prvInitialiseNewQueue+0x15c>)
   1a89a:	4798      	blx	r3
   1a89c:	0003      	movs	r3, r0
   1a89e:	b2db      	uxtb	r3, r3
   1a8a0:	001a      	movs	r2, r3
   1a8a2:	0021      	movs	r1, r4
   1a8a4:	0028      	movs	r0, r5
   1a8a6:	4b19      	ldr	r3, [pc, #100]	; (1a90c <prvInitialiseNewQueue+0x174>)
   1a8a8:	4798      	blx	r3
   1a8aa:	6a3b      	ldr	r3, [r7, #32]
   1a8ac:	0018      	movs	r0, r3
   1a8ae:	4b0b      	ldr	r3, [pc, #44]	; (1a8dc <prvInitialiseNewQueue+0x144>)
   1a8b0:	4798      	blx	r3
   1a8b2:	0003      	movs	r3, r0
   1a8b4:	001a      	movs	r2, r3
   1a8b6:	4b0a      	ldr	r3, [pc, #40]	; (1a8e0 <prvInitialiseNewQueue+0x148>)
   1a8b8:	5c9c      	ldrb	r4, [r3, r2]
   1a8ba:	6a3b      	ldr	r3, [r7, #32]
   1a8bc:	0018      	movs	r0, r3
   1a8be:	4b0d      	ldr	r3, [pc, #52]	; (1a8f4 <prvInitialiseNewQueue+0x15c>)
   1a8c0:	4798      	blx	r3
   1a8c2:	0003      	movs	r3, r0
   1a8c4:	b2db      	uxtb	r3, r3
   1a8c6:	2200      	movs	r2, #0
   1a8c8:	0019      	movs	r1, r3
   1a8ca:	0020      	movs	r0, r4
   1a8cc:	4b10      	ldr	r3, [pc, #64]	; (1a910 <prvInitialiseNewQueue+0x178>)
   1a8ce:	4798      	blx	r3
}
   1a8d0:	46c0      	nop			; (mov r8, r8)
   1a8d2:	46bd      	mov	sp, r7
   1a8d4:	b004      	add	sp, #16
   1a8d6:	bdb0      	pop	{r4, r5, r7, pc}
   1a8d8:	0001a629 	.word	0x0001a629
   1a8dc:	000183ad 	.word	0x000183ad
   1a8e0:	200000ac 	.word	0x200000ac
   1a8e4:	0001996d 	.word	0x0001996d
   1a8e8:	000184d1 	.word	0x000184d1
   1a8ec:	200000ba 	.word	0x200000ba
   1a8f0:	0001850d 	.word	0x0001850d
   1a8f4:	0001848d 	.word	0x0001848d
   1a8f8:	00019b05 	.word	0x00019b05
   1a8fc:	00018689 	.word	0x00018689
   1a900:	000183ed 	.word	0x000183ed
   1a904:	200000b8 	.word	0x200000b8
   1a908:	000184ad 	.word	0x000184ad
   1a90c:	00018de5 	.word	0x00018de5
   1a910:	00019441 	.word	0x00019441

0001a914 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1a914:	b590      	push	{r4, r7, lr}
   1a916:	b083      	sub	sp, #12
   1a918:	af00      	add	r7, sp, #0
   1a91a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1a91c:	687b      	ldr	r3, [r7, #4]
   1a91e:	2b00      	cmp	r3, #0
   1a920:	d00e      	beq.n	1a940 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1a922:	687b      	ldr	r3, [r7, #4]
   1a924:	2200      	movs	r2, #0
   1a926:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1a928:	687b      	ldr	r3, [r7, #4]
   1a92a:	2200      	movs	r2, #0
   1a92c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1a92e:	687b      	ldr	r3, [r7, #4]
   1a930:	2200      	movs	r2, #0
   1a932:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1a934:	6878      	ldr	r0, [r7, #4]
   1a936:	2300      	movs	r3, #0
   1a938:	2200      	movs	r2, #0
   1a93a:	2100      	movs	r1, #0
   1a93c:	4c02      	ldr	r4, [pc, #8]	; (1a948 <prvInitialiseMutex+0x34>)
   1a93e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1a940:	46c0      	nop			; (mov r8, r8)
   1a942:	46bd      	mov	sp, r7
   1a944:	b003      	add	sp, #12
   1a946:	bd90      	pop	{r4, r7, pc}
   1a948:	0001a98d 	.word	0x0001a98d

0001a94c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1a94c:	b580      	push	{r7, lr}
   1a94e:	b086      	sub	sp, #24
   1a950:	af00      	add	r7, sp, #0
   1a952:	0002      	movs	r2, r0
   1a954:	1dfb      	adds	r3, r7, #7
   1a956:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1a958:	2301      	movs	r3, #1
   1a95a:	617b      	str	r3, [r7, #20]
   1a95c:	2300      	movs	r3, #0
   1a95e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1a960:	1dfb      	adds	r3, r7, #7
   1a962:	781a      	ldrb	r2, [r3, #0]
   1a964:	6939      	ldr	r1, [r7, #16]
   1a966:	697b      	ldr	r3, [r7, #20]
   1a968:	0018      	movs	r0, r3
   1a96a:	4b06      	ldr	r3, [pc, #24]	; (1a984 <xQueueCreateMutex+0x38>)
   1a96c:	4798      	blx	r3
   1a96e:	0003      	movs	r3, r0
   1a970:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1a972:	68fb      	ldr	r3, [r7, #12]
   1a974:	0018      	movs	r0, r3
   1a976:	4b04      	ldr	r3, [pc, #16]	; (1a988 <xQueueCreateMutex+0x3c>)
   1a978:	4798      	blx	r3

		return pxNewQueue;
   1a97a:	68fb      	ldr	r3, [r7, #12]
	}
   1a97c:	0018      	movs	r0, r3
   1a97e:	46bd      	mov	sp, r7
   1a980:	b006      	add	sp, #24
   1a982:	bd80      	pop	{r7, pc}
   1a984:	0001a6e5 	.word	0x0001a6e5
   1a988:	0001a915 	.word	0x0001a915

0001a98c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1a98c:	b5b0      	push	{r4, r5, r7, lr}
   1a98e:	b08a      	sub	sp, #40	; 0x28
   1a990:	af00      	add	r7, sp, #0
   1a992:	60f8      	str	r0, [r7, #12]
   1a994:	60b9      	str	r1, [r7, #8]
   1a996:	607a      	str	r2, [r7, #4]
   1a998:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1a99a:	2300      	movs	r3, #0
   1a99c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a99e:	68fb      	ldr	r3, [r7, #12]
   1a9a0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1a9a2:	6a3b      	ldr	r3, [r7, #32]
   1a9a4:	2b00      	cmp	r3, #0
   1a9a6:	d101      	bne.n	1a9ac <xQueueGenericSend+0x20>
   1a9a8:	b672      	cpsid	i
   1a9aa:	e7fe      	b.n	1a9aa <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a9ac:	68bb      	ldr	r3, [r7, #8]
   1a9ae:	2b00      	cmp	r3, #0
   1a9b0:	d103      	bne.n	1a9ba <xQueueGenericSend+0x2e>
   1a9b2:	6a3b      	ldr	r3, [r7, #32]
   1a9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a9b6:	2b00      	cmp	r3, #0
   1a9b8:	d101      	bne.n	1a9be <xQueueGenericSend+0x32>
   1a9ba:	2301      	movs	r3, #1
   1a9bc:	e000      	b.n	1a9c0 <xQueueGenericSend+0x34>
   1a9be:	2300      	movs	r3, #0
   1a9c0:	2b00      	cmp	r3, #0
   1a9c2:	d101      	bne.n	1a9c8 <xQueueGenericSend+0x3c>
   1a9c4:	b672      	cpsid	i
   1a9c6:	e7fe      	b.n	1a9c6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a9c8:	683b      	ldr	r3, [r7, #0]
   1a9ca:	2b02      	cmp	r3, #2
   1a9cc:	d103      	bne.n	1a9d6 <xQueueGenericSend+0x4a>
   1a9ce:	6a3b      	ldr	r3, [r7, #32]
   1a9d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a9d2:	2b01      	cmp	r3, #1
   1a9d4:	d101      	bne.n	1a9da <xQueueGenericSend+0x4e>
   1a9d6:	2301      	movs	r3, #1
   1a9d8:	e000      	b.n	1a9dc <xQueueGenericSend+0x50>
   1a9da:	2300      	movs	r3, #0
   1a9dc:	2b00      	cmp	r3, #0
   1a9de:	d101      	bne.n	1a9e4 <xQueueGenericSend+0x58>
   1a9e0:	b672      	cpsid	i
   1a9e2:	e7fe      	b.n	1a9e2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a9e4:	4bbc      	ldr	r3, [pc, #752]	; (1acd8 <xQueueGenericSend+0x34c>)
   1a9e6:	4798      	blx	r3
   1a9e8:	1e03      	subs	r3, r0, #0
   1a9ea:	d102      	bne.n	1a9f2 <xQueueGenericSend+0x66>
   1a9ec:	687b      	ldr	r3, [r7, #4]
   1a9ee:	2b00      	cmp	r3, #0
   1a9f0:	d101      	bne.n	1a9f6 <xQueueGenericSend+0x6a>
   1a9f2:	2301      	movs	r3, #1
   1a9f4:	e000      	b.n	1a9f8 <xQueueGenericSend+0x6c>
   1a9f6:	2300      	movs	r3, #0
   1a9f8:	2b00      	cmp	r3, #0
   1a9fa:	d101      	bne.n	1aa00 <xQueueGenericSend+0x74>
   1a9fc:	b672      	cpsid	i
   1a9fe:	e7fe      	b.n	1a9fe <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1aa00:	4bb6      	ldr	r3, [pc, #728]	; (1acdc <xQueueGenericSend+0x350>)
   1aa02:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1aa04:	6a3b      	ldr	r3, [r7, #32]
   1aa06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1aa08:	6a3b      	ldr	r3, [r7, #32]
   1aa0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1aa0c:	429a      	cmp	r2, r3
   1aa0e:	d303      	bcc.n	1aa18 <xQueueGenericSend+0x8c>
   1aa10:	683b      	ldr	r3, [r7, #0]
   1aa12:	2b02      	cmp	r3, #2
   1aa14:	d000      	beq.n	1aa18 <xQueueGenericSend+0x8c>
   1aa16:	e08e      	b.n	1ab36 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1aa18:	4bb1      	ldr	r3, [pc, #708]	; (1ace0 <xQueueGenericSend+0x354>)
   1aa1a:	4798      	blx	r3
   1aa1c:	0003      	movs	r3, r0
   1aa1e:	0018      	movs	r0, r3
   1aa20:	4bb0      	ldr	r3, [pc, #704]	; (1ace4 <xQueueGenericSend+0x358>)
   1aa22:	4798      	blx	r3
   1aa24:	0003      	movs	r3, r0
   1aa26:	001a      	movs	r2, r3
   1aa28:	4baf      	ldr	r3, [pc, #700]	; (1ace8 <xQueueGenericSend+0x35c>)
   1aa2a:	881b      	ldrh	r3, [r3, #0]
   1aa2c:	4013      	ands	r3, r2
   1aa2e:	b29b      	uxth	r3, r3
   1aa30:	2b00      	cmp	r3, #0
   1aa32:	d02e      	beq.n	1aa92 <xQueueGenericSend+0x106>
   1aa34:	6a3b      	ldr	r3, [r7, #32]
   1aa36:	0018      	movs	r0, r3
   1aa38:	4bac      	ldr	r3, [pc, #688]	; (1acec <xQueueGenericSend+0x360>)
   1aa3a:	4798      	blx	r3
   1aa3c:	0003      	movs	r3, r0
   1aa3e:	001a      	movs	r2, r3
   1aa40:	4ba9      	ldr	r3, [pc, #676]	; (1ace8 <xQueueGenericSend+0x35c>)
   1aa42:	881b      	ldrh	r3, [r3, #0]
   1aa44:	4013      	ands	r3, r2
   1aa46:	b29b      	uxth	r3, r3
   1aa48:	2b00      	cmp	r3, #0
   1aa4a:	d022      	beq.n	1aa92 <xQueueGenericSend+0x106>
   1aa4c:	683b      	ldr	r3, [r7, #0]
   1aa4e:	2b00      	cmp	r3, #0
   1aa50:	d10b      	bne.n	1aa6a <xQueueGenericSend+0xde>
   1aa52:	6a3b      	ldr	r3, [r7, #32]
   1aa54:	0018      	movs	r0, r3
   1aa56:	4ba6      	ldr	r3, [pc, #664]	; (1acf0 <xQueueGenericSend+0x364>)
   1aa58:	4798      	blx	r3
   1aa5a:	0003      	movs	r3, r0
   1aa5c:	001a      	movs	r2, r3
   1aa5e:	4ba5      	ldr	r3, [pc, #660]	; (1acf4 <xQueueGenericSend+0x368>)
   1aa60:	5c9b      	ldrb	r3, [r3, r2]
   1aa62:	3320      	adds	r3, #32
   1aa64:	b2db      	uxtb	r3, r3
   1aa66:	001d      	movs	r5, r3
   1aa68:	e000      	b.n	1aa6c <xQueueGenericSend+0xe0>
   1aa6a:	2525      	movs	r5, #37	; 0x25
   1aa6c:	6a3b      	ldr	r3, [r7, #32]
   1aa6e:	0018      	movs	r0, r3
   1aa70:	4b9f      	ldr	r3, [pc, #636]	; (1acf0 <xQueueGenericSend+0x364>)
   1aa72:	4798      	blx	r3
   1aa74:	0003      	movs	r3, r0
   1aa76:	001a      	movs	r2, r3
   1aa78:	4b9e      	ldr	r3, [pc, #632]	; (1acf4 <xQueueGenericSend+0x368>)
   1aa7a:	5c9c      	ldrb	r4, [r3, r2]
   1aa7c:	6a3b      	ldr	r3, [r7, #32]
   1aa7e:	0018      	movs	r0, r3
   1aa80:	4b9d      	ldr	r3, [pc, #628]	; (1acf8 <xQueueGenericSend+0x36c>)
   1aa82:	4798      	blx	r3
   1aa84:	0003      	movs	r3, r0
   1aa86:	b2db      	uxtb	r3, r3
   1aa88:	001a      	movs	r2, r3
   1aa8a:	0021      	movs	r1, r4
   1aa8c:	0028      	movs	r0, r5
   1aa8e:	4b9b      	ldr	r3, [pc, #620]	; (1acfc <xQueueGenericSend+0x370>)
   1aa90:	4798      	blx	r3
   1aa92:	6a3b      	ldr	r3, [r7, #32]
   1aa94:	0018      	movs	r0, r3
   1aa96:	4b96      	ldr	r3, [pc, #600]	; (1acf0 <xQueueGenericSend+0x364>)
   1aa98:	4798      	blx	r3
   1aa9a:	0003      	movs	r3, r0
   1aa9c:	001a      	movs	r2, r3
   1aa9e:	4b95      	ldr	r3, [pc, #596]	; (1acf4 <xQueueGenericSend+0x368>)
   1aaa0:	5c9c      	ldrb	r4, [r3, r2]
   1aaa2:	6a3b      	ldr	r3, [r7, #32]
   1aaa4:	0018      	movs	r0, r3
   1aaa6:	4b94      	ldr	r3, [pc, #592]	; (1acf8 <xQueueGenericSend+0x36c>)
   1aaa8:	4798      	blx	r3
   1aaaa:	0003      	movs	r3, r0
   1aaac:	b2dd      	uxtb	r5, r3
   1aaae:	6a3b      	ldr	r3, [r7, #32]
   1aab0:	0018      	movs	r0, r3
   1aab2:	4b8f      	ldr	r3, [pc, #572]	; (1acf0 <xQueueGenericSend+0x364>)
   1aab4:	4798      	blx	r3
   1aab6:	0003      	movs	r3, r0
   1aab8:	001a      	movs	r2, r3
   1aaba:	4b8e      	ldr	r3, [pc, #568]	; (1acf4 <xQueueGenericSend+0x368>)
   1aabc:	5c9b      	ldrb	r3, [r3, r2]
   1aabe:	2b02      	cmp	r3, #2
   1aac0:	d005      	beq.n	1aace <xQueueGenericSend+0x142>
   1aac2:	6a3b      	ldr	r3, [r7, #32]
   1aac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1aac6:	b2db      	uxtb	r3, r3
   1aac8:	3301      	adds	r3, #1
   1aaca:	b2db      	uxtb	r3, r3
   1aacc:	e000      	b.n	1aad0 <xQueueGenericSend+0x144>
   1aace:	2300      	movs	r3, #0
   1aad0:	001a      	movs	r2, r3
   1aad2:	0029      	movs	r1, r5
   1aad4:	0020      	movs	r0, r4
   1aad6:	4b8a      	ldr	r3, [pc, #552]	; (1ad00 <xQueueGenericSend+0x374>)
   1aad8:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1aada:	683a      	ldr	r2, [r7, #0]
   1aadc:	68b9      	ldr	r1, [r7, #8]
   1aade:	6a3b      	ldr	r3, [r7, #32]
   1aae0:	0018      	movs	r0, r3
   1aae2:	4b88      	ldr	r3, [pc, #544]	; (1ad04 <xQueueGenericSend+0x378>)
   1aae4:	4798      	blx	r3
   1aae6:	0003      	movs	r3, r0
   1aae8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1aaea:	6a3b      	ldr	r3, [r7, #32]
   1aaec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1aaee:	2b00      	cmp	r3, #0
   1aaf0:	d00a      	beq.n	1ab08 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1aaf2:	683a      	ldr	r2, [r7, #0]
   1aaf4:	6a3b      	ldr	r3, [r7, #32]
   1aaf6:	0011      	movs	r1, r2
   1aaf8:	0018      	movs	r0, r3
   1aafa:	4b83      	ldr	r3, [pc, #524]	; (1ad08 <xQueueGenericSend+0x37c>)
   1aafc:	4798      	blx	r3
   1aafe:	1e03      	subs	r3, r0, #0
   1ab00:	d015      	beq.n	1ab2e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1ab02:	4b82      	ldr	r3, [pc, #520]	; (1ad0c <xQueueGenericSend+0x380>)
   1ab04:	4798      	blx	r3
   1ab06:	e012      	b.n	1ab2e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ab08:	6a3b      	ldr	r3, [r7, #32]
   1ab0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ab0c:	2b00      	cmp	r3, #0
   1ab0e:	d009      	beq.n	1ab24 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ab10:	6a3b      	ldr	r3, [r7, #32]
   1ab12:	3324      	adds	r3, #36	; 0x24
   1ab14:	0018      	movs	r0, r3
   1ab16:	4b7e      	ldr	r3, [pc, #504]	; (1ad10 <xQueueGenericSend+0x384>)
   1ab18:	4798      	blx	r3
   1ab1a:	1e03      	subs	r3, r0, #0
   1ab1c:	d007      	beq.n	1ab2e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1ab1e:	4b7b      	ldr	r3, [pc, #492]	; (1ad0c <xQueueGenericSend+0x380>)
   1ab20:	4798      	blx	r3
   1ab22:	e004      	b.n	1ab2e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1ab24:	69fb      	ldr	r3, [r7, #28]
   1ab26:	2b00      	cmp	r3, #0
   1ab28:	d001      	beq.n	1ab2e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1ab2a:	4b78      	ldr	r3, [pc, #480]	; (1ad0c <xQueueGenericSend+0x380>)
   1ab2c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1ab2e:	4b79      	ldr	r3, [pc, #484]	; (1ad14 <xQueueGenericSend+0x388>)
   1ab30:	4798      	blx	r3
				return pdPASS;
   1ab32:	2301      	movs	r3, #1
   1ab34:	e142      	b.n	1adbc <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1ab36:	687b      	ldr	r3, [r7, #4]
   1ab38:	2b00      	cmp	r3, #0
   1ab3a:	d140      	bne.n	1abbe <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1ab3c:	4b75      	ldr	r3, [pc, #468]	; (1ad14 <xQueueGenericSend+0x388>)
   1ab3e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1ab40:	4b67      	ldr	r3, [pc, #412]	; (1ace0 <xQueueGenericSend+0x354>)
   1ab42:	4798      	blx	r3
   1ab44:	0003      	movs	r3, r0
   1ab46:	0018      	movs	r0, r3
   1ab48:	4b66      	ldr	r3, [pc, #408]	; (1ace4 <xQueueGenericSend+0x358>)
   1ab4a:	4798      	blx	r3
   1ab4c:	0003      	movs	r3, r0
   1ab4e:	001a      	movs	r2, r3
   1ab50:	4b65      	ldr	r3, [pc, #404]	; (1ace8 <xQueueGenericSend+0x35c>)
   1ab52:	881b      	ldrh	r3, [r3, #0]
   1ab54:	4013      	ands	r3, r2
   1ab56:	b29b      	uxth	r3, r3
   1ab58:	2b00      	cmp	r3, #0
   1ab5a:	d02e      	beq.n	1abba <xQueueGenericSend+0x22e>
   1ab5c:	6a3b      	ldr	r3, [r7, #32]
   1ab5e:	0018      	movs	r0, r3
   1ab60:	4b62      	ldr	r3, [pc, #392]	; (1acec <xQueueGenericSend+0x360>)
   1ab62:	4798      	blx	r3
   1ab64:	0003      	movs	r3, r0
   1ab66:	001a      	movs	r2, r3
   1ab68:	4b5f      	ldr	r3, [pc, #380]	; (1ace8 <xQueueGenericSend+0x35c>)
   1ab6a:	881b      	ldrh	r3, [r3, #0]
   1ab6c:	4013      	ands	r3, r2
   1ab6e:	b29b      	uxth	r3, r3
   1ab70:	2b00      	cmp	r3, #0
   1ab72:	d022      	beq.n	1abba <xQueueGenericSend+0x22e>
   1ab74:	683b      	ldr	r3, [r7, #0]
   1ab76:	2b00      	cmp	r3, #0
   1ab78:	d10b      	bne.n	1ab92 <xQueueGenericSend+0x206>
   1ab7a:	6a3b      	ldr	r3, [r7, #32]
   1ab7c:	0018      	movs	r0, r3
   1ab7e:	4b5c      	ldr	r3, [pc, #368]	; (1acf0 <xQueueGenericSend+0x364>)
   1ab80:	4798      	blx	r3
   1ab82:	0003      	movs	r3, r0
   1ab84:	001a      	movs	r2, r3
   1ab86:	4b5b      	ldr	r3, [pc, #364]	; (1acf4 <xQueueGenericSend+0x368>)
   1ab88:	5c9b      	ldrb	r3, [r3, r2]
   1ab8a:	3348      	adds	r3, #72	; 0x48
   1ab8c:	b2db      	uxtb	r3, r3
   1ab8e:	001d      	movs	r5, r3
   1ab90:	e000      	b.n	1ab94 <xQueueGenericSend+0x208>
   1ab92:	254d      	movs	r5, #77	; 0x4d
   1ab94:	6a3b      	ldr	r3, [r7, #32]
   1ab96:	0018      	movs	r0, r3
   1ab98:	4b55      	ldr	r3, [pc, #340]	; (1acf0 <xQueueGenericSend+0x364>)
   1ab9a:	4798      	blx	r3
   1ab9c:	0003      	movs	r3, r0
   1ab9e:	001a      	movs	r2, r3
   1aba0:	4b54      	ldr	r3, [pc, #336]	; (1acf4 <xQueueGenericSend+0x368>)
   1aba2:	5c9c      	ldrb	r4, [r3, r2]
   1aba4:	6a3b      	ldr	r3, [r7, #32]
   1aba6:	0018      	movs	r0, r3
   1aba8:	4b53      	ldr	r3, [pc, #332]	; (1acf8 <xQueueGenericSend+0x36c>)
   1abaa:	4798      	blx	r3
   1abac:	0003      	movs	r3, r0
   1abae:	b2db      	uxtb	r3, r3
   1abb0:	001a      	movs	r2, r3
   1abb2:	0021      	movs	r1, r4
   1abb4:	0028      	movs	r0, r5
   1abb6:	4b51      	ldr	r3, [pc, #324]	; (1acfc <xQueueGenericSend+0x370>)
   1abb8:	4798      	blx	r3
					return errQUEUE_FULL;
   1abba:	2300      	movs	r3, #0
   1abbc:	e0fe      	b.n	1adbc <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1abbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1abc0:	2b00      	cmp	r3, #0
   1abc2:	d106      	bne.n	1abd2 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1abc4:	2314      	movs	r3, #20
   1abc6:	18fb      	adds	r3, r7, r3
   1abc8:	0018      	movs	r0, r3
   1abca:	4b53      	ldr	r3, [pc, #332]	; (1ad18 <xQueueGenericSend+0x38c>)
   1abcc:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1abce:	2301      	movs	r3, #1
   1abd0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1abd2:	4b50      	ldr	r3, [pc, #320]	; (1ad14 <xQueueGenericSend+0x388>)
   1abd4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1abd6:	4b51      	ldr	r3, [pc, #324]	; (1ad1c <xQueueGenericSend+0x390>)
   1abd8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1abda:	4b40      	ldr	r3, [pc, #256]	; (1acdc <xQueueGenericSend+0x350>)
   1abdc:	4798      	blx	r3
   1abde:	6a3b      	ldr	r3, [r7, #32]
   1abe0:	2244      	movs	r2, #68	; 0x44
   1abe2:	5c9b      	ldrb	r3, [r3, r2]
   1abe4:	b25b      	sxtb	r3, r3
   1abe6:	3301      	adds	r3, #1
   1abe8:	d103      	bne.n	1abf2 <xQueueGenericSend+0x266>
   1abea:	6a3b      	ldr	r3, [r7, #32]
   1abec:	2244      	movs	r2, #68	; 0x44
   1abee:	2100      	movs	r1, #0
   1abf0:	5499      	strb	r1, [r3, r2]
   1abf2:	6a3b      	ldr	r3, [r7, #32]
   1abf4:	2245      	movs	r2, #69	; 0x45
   1abf6:	5c9b      	ldrb	r3, [r3, r2]
   1abf8:	b25b      	sxtb	r3, r3
   1abfa:	3301      	adds	r3, #1
   1abfc:	d103      	bne.n	1ac06 <xQueueGenericSend+0x27a>
   1abfe:	6a3b      	ldr	r3, [r7, #32]
   1ac00:	2245      	movs	r2, #69	; 0x45
   1ac02:	2100      	movs	r1, #0
   1ac04:	5499      	strb	r1, [r3, r2]
   1ac06:	4b43      	ldr	r3, [pc, #268]	; (1ad14 <xQueueGenericSend+0x388>)
   1ac08:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1ac0a:	1d3a      	adds	r2, r7, #4
   1ac0c:	2314      	movs	r3, #20
   1ac0e:	18fb      	adds	r3, r7, r3
   1ac10:	0011      	movs	r1, r2
   1ac12:	0018      	movs	r0, r3
   1ac14:	4b42      	ldr	r3, [pc, #264]	; (1ad20 <xQueueGenericSend+0x394>)
   1ac16:	4798      	blx	r3
   1ac18:	1e03      	subs	r3, r0, #0
   1ac1a:	d000      	beq.n	1ac1e <xQueueGenericSend+0x292>
   1ac1c:	e08a      	b.n	1ad34 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1ac1e:	6a3b      	ldr	r3, [r7, #32]
   1ac20:	0018      	movs	r0, r3
   1ac22:	4b40      	ldr	r3, [pc, #256]	; (1ad24 <xQueueGenericSend+0x398>)
   1ac24:	4798      	blx	r3
   1ac26:	1e03      	subs	r3, r0, #0
   1ac28:	d04f      	beq.n	1acca <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1ac2a:	4b2d      	ldr	r3, [pc, #180]	; (1ace0 <xQueueGenericSend+0x354>)
   1ac2c:	4798      	blx	r3
   1ac2e:	0003      	movs	r3, r0
   1ac30:	0018      	movs	r0, r3
   1ac32:	4b2c      	ldr	r3, [pc, #176]	; (1ace4 <xQueueGenericSend+0x358>)
   1ac34:	4798      	blx	r3
   1ac36:	0003      	movs	r3, r0
   1ac38:	001a      	movs	r2, r3
   1ac3a:	4b2b      	ldr	r3, [pc, #172]	; (1ace8 <xQueueGenericSend+0x35c>)
   1ac3c:	881b      	ldrh	r3, [r3, #0]
   1ac3e:	4013      	ands	r3, r2
   1ac40:	b29b      	uxth	r3, r3
   1ac42:	2b00      	cmp	r3, #0
   1ac44:	d02e      	beq.n	1aca4 <xQueueGenericSend+0x318>
   1ac46:	6a3b      	ldr	r3, [r7, #32]
   1ac48:	0018      	movs	r0, r3
   1ac4a:	4b28      	ldr	r3, [pc, #160]	; (1acec <xQueueGenericSend+0x360>)
   1ac4c:	4798      	blx	r3
   1ac4e:	0003      	movs	r3, r0
   1ac50:	001a      	movs	r2, r3
   1ac52:	4b25      	ldr	r3, [pc, #148]	; (1ace8 <xQueueGenericSend+0x35c>)
   1ac54:	881b      	ldrh	r3, [r3, #0]
   1ac56:	4013      	ands	r3, r2
   1ac58:	b29b      	uxth	r3, r3
   1ac5a:	2b00      	cmp	r3, #0
   1ac5c:	d022      	beq.n	1aca4 <xQueueGenericSend+0x318>
   1ac5e:	683b      	ldr	r3, [r7, #0]
   1ac60:	2b00      	cmp	r3, #0
   1ac62:	d10b      	bne.n	1ac7c <xQueueGenericSend+0x2f0>
   1ac64:	6a3b      	ldr	r3, [r7, #32]
   1ac66:	0018      	movs	r0, r3
   1ac68:	4b21      	ldr	r3, [pc, #132]	; (1acf0 <xQueueGenericSend+0x364>)
   1ac6a:	4798      	blx	r3
   1ac6c:	0003      	movs	r3, r0
   1ac6e:	001a      	movs	r2, r3
   1ac70:	4b20      	ldr	r3, [pc, #128]	; (1acf4 <xQueueGenericSend+0x368>)
   1ac72:	5c9b      	ldrb	r3, [r3, r2]
   1ac74:	3370      	adds	r3, #112	; 0x70
   1ac76:	b2db      	uxtb	r3, r3
   1ac78:	001d      	movs	r5, r3
   1ac7a:	e000      	b.n	1ac7e <xQueueGenericSend+0x2f2>
   1ac7c:	2575      	movs	r5, #117	; 0x75
   1ac7e:	6a3b      	ldr	r3, [r7, #32]
   1ac80:	0018      	movs	r0, r3
   1ac82:	4b1b      	ldr	r3, [pc, #108]	; (1acf0 <xQueueGenericSend+0x364>)
   1ac84:	4798      	blx	r3
   1ac86:	0003      	movs	r3, r0
   1ac88:	001a      	movs	r2, r3
   1ac8a:	4b1a      	ldr	r3, [pc, #104]	; (1acf4 <xQueueGenericSend+0x368>)
   1ac8c:	5c9c      	ldrb	r4, [r3, r2]
   1ac8e:	6a3b      	ldr	r3, [r7, #32]
   1ac90:	0018      	movs	r0, r3
   1ac92:	4b19      	ldr	r3, [pc, #100]	; (1acf8 <xQueueGenericSend+0x36c>)
   1ac94:	4798      	blx	r3
   1ac96:	0003      	movs	r3, r0
   1ac98:	b2db      	uxtb	r3, r3
   1ac9a:	001a      	movs	r2, r3
   1ac9c:	0021      	movs	r1, r4
   1ac9e:	0028      	movs	r0, r5
   1aca0:	4b16      	ldr	r3, [pc, #88]	; (1acfc <xQueueGenericSend+0x370>)
   1aca2:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1aca4:	6a3b      	ldr	r3, [r7, #32]
   1aca6:	3310      	adds	r3, #16
   1aca8:	687a      	ldr	r2, [r7, #4]
   1acaa:	0011      	movs	r1, r2
   1acac:	0018      	movs	r0, r3
   1acae:	4b1e      	ldr	r3, [pc, #120]	; (1ad28 <xQueueGenericSend+0x39c>)
   1acb0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1acb2:	6a3b      	ldr	r3, [r7, #32]
   1acb4:	0018      	movs	r0, r3
   1acb6:	4b1d      	ldr	r3, [pc, #116]	; (1ad2c <xQueueGenericSend+0x3a0>)
   1acb8:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1acba:	4b1d      	ldr	r3, [pc, #116]	; (1ad30 <xQueueGenericSend+0x3a4>)
   1acbc:	4798      	blx	r3
   1acbe:	1e03      	subs	r3, r0, #0
   1acc0:	d000      	beq.n	1acc4 <xQueueGenericSend+0x338>
   1acc2:	e69d      	b.n	1aa00 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1acc4:	4b11      	ldr	r3, [pc, #68]	; (1ad0c <xQueueGenericSend+0x380>)
   1acc6:	4798      	blx	r3
   1acc8:	e69a      	b.n	1aa00 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1acca:	6a3b      	ldr	r3, [r7, #32]
   1accc:	0018      	movs	r0, r3
   1acce:	4b17      	ldr	r3, [pc, #92]	; (1ad2c <xQueueGenericSend+0x3a0>)
   1acd0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1acd2:	4b17      	ldr	r3, [pc, #92]	; (1ad30 <xQueueGenericSend+0x3a4>)
   1acd4:	4798      	blx	r3
   1acd6:	e693      	b.n	1aa00 <xQueueGenericSend+0x74>
   1acd8:	0001d119 	.word	0x0001d119
   1acdc:	0001a3f9 	.word	0x0001a3f9
   1ace0:	00018689 	.word	0x00018689
   1ace4:	000183ed 	.word	0x000183ed
   1ace8:	200000b8 	.word	0x200000b8
   1acec:	000184ad 	.word	0x000184ad
   1acf0:	000183ad 	.word	0x000183ad
   1acf4:	200000ac 	.word	0x200000ac
   1acf8:	0001848d 	.word	0x0001848d
   1acfc:	00018de5 	.word	0x00018de5
   1ad00:	00019441 	.word	0x00019441
   1ad04:	0001bbc5 	.word	0x0001bbc5
   1ad08:	0001bec9 	.word	0x0001bec9
   1ad0c:	0001a3e1 	.word	0x0001a3e1
   1ad10:	0001cc89 	.word	0x0001cc89
   1ad14:	0001a41d 	.word	0x0001a41d
   1ad18:	0001cdc9 	.word	0x0001cdc9
   1ad1c:	0001c6b1 	.word	0x0001c6b1
   1ad20:	0001cdf1 	.word	0x0001cdf1
   1ad24:	0001be19 	.word	0x0001be19
   1ad28:	0001cb65 	.word	0x0001cb65
   1ad2c:	0001bcf5 	.word	0x0001bcf5
   1ad30:	0001c6c9 	.word	0x0001c6c9
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1ad34:	6a3b      	ldr	r3, [r7, #32]
   1ad36:	0018      	movs	r0, r3
   1ad38:	4b22      	ldr	r3, [pc, #136]	; (1adc4 <xQueueGenericSend+0x438>)
   1ad3a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1ad3c:	4b22      	ldr	r3, [pc, #136]	; (1adc8 <xQueueGenericSend+0x43c>)
   1ad3e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1ad40:	4b22      	ldr	r3, [pc, #136]	; (1adcc <xQueueGenericSend+0x440>)
   1ad42:	4798      	blx	r3
   1ad44:	0003      	movs	r3, r0
   1ad46:	0018      	movs	r0, r3
   1ad48:	4b21      	ldr	r3, [pc, #132]	; (1add0 <xQueueGenericSend+0x444>)
   1ad4a:	4798      	blx	r3
   1ad4c:	0003      	movs	r3, r0
   1ad4e:	001a      	movs	r2, r3
   1ad50:	4b20      	ldr	r3, [pc, #128]	; (1add4 <xQueueGenericSend+0x448>)
   1ad52:	881b      	ldrh	r3, [r3, #0]
   1ad54:	4013      	ands	r3, r2
   1ad56:	b29b      	uxth	r3, r3
   1ad58:	2b00      	cmp	r3, #0
   1ad5a:	d02e      	beq.n	1adba <xQueueGenericSend+0x42e>
   1ad5c:	6a3b      	ldr	r3, [r7, #32]
   1ad5e:	0018      	movs	r0, r3
   1ad60:	4b1d      	ldr	r3, [pc, #116]	; (1add8 <xQueueGenericSend+0x44c>)
   1ad62:	4798      	blx	r3
   1ad64:	0003      	movs	r3, r0
   1ad66:	001a      	movs	r2, r3
   1ad68:	4b1a      	ldr	r3, [pc, #104]	; (1add4 <xQueueGenericSend+0x448>)
   1ad6a:	881b      	ldrh	r3, [r3, #0]
   1ad6c:	4013      	ands	r3, r2
   1ad6e:	b29b      	uxth	r3, r3
   1ad70:	2b00      	cmp	r3, #0
   1ad72:	d022      	beq.n	1adba <xQueueGenericSend+0x42e>
   1ad74:	683b      	ldr	r3, [r7, #0]
   1ad76:	2b00      	cmp	r3, #0
   1ad78:	d10b      	bne.n	1ad92 <xQueueGenericSend+0x406>
   1ad7a:	6a3b      	ldr	r3, [r7, #32]
   1ad7c:	0018      	movs	r0, r3
   1ad7e:	4b17      	ldr	r3, [pc, #92]	; (1addc <xQueueGenericSend+0x450>)
   1ad80:	4798      	blx	r3
   1ad82:	0003      	movs	r3, r0
   1ad84:	001a      	movs	r2, r3
   1ad86:	4b16      	ldr	r3, [pc, #88]	; (1ade0 <xQueueGenericSend+0x454>)
   1ad88:	5c9b      	ldrb	r3, [r3, r2]
   1ad8a:	3348      	adds	r3, #72	; 0x48
   1ad8c:	b2db      	uxtb	r3, r3
   1ad8e:	001d      	movs	r5, r3
   1ad90:	e000      	b.n	1ad94 <xQueueGenericSend+0x408>
   1ad92:	254d      	movs	r5, #77	; 0x4d
   1ad94:	6a3b      	ldr	r3, [r7, #32]
   1ad96:	0018      	movs	r0, r3
   1ad98:	4b10      	ldr	r3, [pc, #64]	; (1addc <xQueueGenericSend+0x450>)
   1ad9a:	4798      	blx	r3
   1ad9c:	0003      	movs	r3, r0
   1ad9e:	001a      	movs	r2, r3
   1ada0:	4b0f      	ldr	r3, [pc, #60]	; (1ade0 <xQueueGenericSend+0x454>)
   1ada2:	5c9c      	ldrb	r4, [r3, r2]
   1ada4:	6a3b      	ldr	r3, [r7, #32]
   1ada6:	0018      	movs	r0, r3
   1ada8:	4b0e      	ldr	r3, [pc, #56]	; (1ade4 <xQueueGenericSend+0x458>)
   1adaa:	4798      	blx	r3
   1adac:	0003      	movs	r3, r0
   1adae:	b2db      	uxtb	r3, r3
   1adb0:	001a      	movs	r2, r3
   1adb2:	0021      	movs	r1, r4
   1adb4:	0028      	movs	r0, r5
   1adb6:	4b0c      	ldr	r3, [pc, #48]	; (1ade8 <xQueueGenericSend+0x45c>)
   1adb8:	4798      	blx	r3
			return errQUEUE_FULL;
   1adba:	2300      	movs	r3, #0
		}
	}
}
   1adbc:	0018      	movs	r0, r3
   1adbe:	46bd      	mov	sp, r7
   1adc0:	b00a      	add	sp, #40	; 0x28
   1adc2:	bdb0      	pop	{r4, r5, r7, pc}
   1adc4:	0001bcf5 	.word	0x0001bcf5
   1adc8:	0001c6c9 	.word	0x0001c6c9
   1adcc:	00018689 	.word	0x00018689
   1add0:	000183ed 	.word	0x000183ed
   1add4:	200000b8 	.word	0x200000b8
   1add8:	000184ad 	.word	0x000184ad
   1addc:	000183ad 	.word	0x000183ad
   1ade0:	200000ac 	.word	0x200000ac
   1ade4:	0001848d 	.word	0x0001848d
   1ade8:	00018de5 	.word	0x00018de5

0001adec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1adec:	b5b0      	push	{r4, r5, r7, lr}
   1adee:	b088      	sub	sp, #32
   1adf0:	af00      	add	r7, sp, #0
   1adf2:	60f8      	str	r0, [r7, #12]
   1adf4:	60b9      	str	r1, [r7, #8]
   1adf6:	607a      	str	r2, [r7, #4]
   1adf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1adfa:	68fb      	ldr	r3, [r7, #12]
   1adfc:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1adfe:	69bb      	ldr	r3, [r7, #24]
   1ae00:	2b00      	cmp	r3, #0
   1ae02:	d101      	bne.n	1ae08 <xQueueGenericSendFromISR+0x1c>
   1ae04:	b672      	cpsid	i
   1ae06:	e7fe      	b.n	1ae06 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1ae08:	68bb      	ldr	r3, [r7, #8]
   1ae0a:	2b00      	cmp	r3, #0
   1ae0c:	d103      	bne.n	1ae16 <xQueueGenericSendFromISR+0x2a>
   1ae0e:	69bb      	ldr	r3, [r7, #24]
   1ae10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ae12:	2b00      	cmp	r3, #0
   1ae14:	d101      	bne.n	1ae1a <xQueueGenericSendFromISR+0x2e>
   1ae16:	2301      	movs	r3, #1
   1ae18:	e000      	b.n	1ae1c <xQueueGenericSendFromISR+0x30>
   1ae1a:	2300      	movs	r3, #0
   1ae1c:	2b00      	cmp	r3, #0
   1ae1e:	d101      	bne.n	1ae24 <xQueueGenericSendFromISR+0x38>
   1ae20:	b672      	cpsid	i
   1ae22:	e7fe      	b.n	1ae22 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1ae24:	683b      	ldr	r3, [r7, #0]
   1ae26:	2b02      	cmp	r3, #2
   1ae28:	d103      	bne.n	1ae32 <xQueueGenericSendFromISR+0x46>
   1ae2a:	69bb      	ldr	r3, [r7, #24]
   1ae2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ae2e:	2b01      	cmp	r3, #1
   1ae30:	d101      	bne.n	1ae36 <xQueueGenericSendFromISR+0x4a>
   1ae32:	2301      	movs	r3, #1
   1ae34:	e000      	b.n	1ae38 <xQueueGenericSendFromISR+0x4c>
   1ae36:	2300      	movs	r3, #0
   1ae38:	2b00      	cmp	r3, #0
   1ae3a:	d101      	bne.n	1ae40 <xQueueGenericSendFromISR+0x54>
   1ae3c:	b672      	cpsid	i
   1ae3e:	e7fe      	b.n	1ae3e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1ae40:	4b68      	ldr	r3, [pc, #416]	; (1afe4 <xQueueGenericSendFromISR+0x1f8>)
   1ae42:	4798      	blx	r3
   1ae44:	0003      	movs	r3, r0
   1ae46:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1ae48:	69bb      	ldr	r3, [r7, #24]
   1ae4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ae4c:	69bb      	ldr	r3, [r7, #24]
   1ae4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ae50:	429a      	cmp	r2, r3
   1ae52:	d303      	bcc.n	1ae5c <xQueueGenericSendFromISR+0x70>
   1ae54:	683b      	ldr	r3, [r7, #0]
   1ae56:	2b02      	cmp	r3, #2
   1ae58:	d000      	beq.n	1ae5c <xQueueGenericSendFromISR+0x70>
   1ae5a:	e088      	b.n	1af6e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1ae5c:	2313      	movs	r3, #19
   1ae5e:	18fb      	adds	r3, r7, r3
   1ae60:	69ba      	ldr	r2, [r7, #24]
   1ae62:	2145      	movs	r1, #69	; 0x45
   1ae64:	5c52      	ldrb	r2, [r2, r1]
   1ae66:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1ae68:	69bb      	ldr	r3, [r7, #24]
   1ae6a:	0018      	movs	r0, r3
   1ae6c:	4b5e      	ldr	r3, [pc, #376]	; (1afe8 <xQueueGenericSendFromISR+0x1fc>)
   1ae6e:	4798      	blx	r3
   1ae70:	0003      	movs	r3, r0
   1ae72:	001a      	movs	r2, r3
   1ae74:	4b5d      	ldr	r3, [pc, #372]	; (1afec <xQueueGenericSendFromISR+0x200>)
   1ae76:	881b      	ldrh	r3, [r3, #0]
   1ae78:	4013      	ands	r3, r2
   1ae7a:	b29b      	uxth	r3, r3
   1ae7c:	2b00      	cmp	r3, #0
   1ae7e:	d022      	beq.n	1aec6 <xQueueGenericSendFromISR+0xda>
   1ae80:	683b      	ldr	r3, [r7, #0]
   1ae82:	2b00      	cmp	r3, #0
   1ae84:	d10b      	bne.n	1ae9e <xQueueGenericSendFromISR+0xb2>
   1ae86:	69bb      	ldr	r3, [r7, #24]
   1ae88:	0018      	movs	r0, r3
   1ae8a:	4b59      	ldr	r3, [pc, #356]	; (1aff0 <xQueueGenericSendFromISR+0x204>)
   1ae8c:	4798      	blx	r3
   1ae8e:	0003      	movs	r3, r0
   1ae90:	001a      	movs	r2, r3
   1ae92:	4b58      	ldr	r3, [pc, #352]	; (1aff4 <xQueueGenericSendFromISR+0x208>)
   1ae94:	5c9b      	ldrb	r3, [r3, r2]
   1ae96:	3330      	adds	r3, #48	; 0x30
   1ae98:	b2db      	uxtb	r3, r3
   1ae9a:	001d      	movs	r5, r3
   1ae9c:	e000      	b.n	1aea0 <xQueueGenericSendFromISR+0xb4>
   1ae9e:	2535      	movs	r5, #53	; 0x35
   1aea0:	69bb      	ldr	r3, [r7, #24]
   1aea2:	0018      	movs	r0, r3
   1aea4:	4b52      	ldr	r3, [pc, #328]	; (1aff0 <xQueueGenericSendFromISR+0x204>)
   1aea6:	4798      	blx	r3
   1aea8:	0003      	movs	r3, r0
   1aeaa:	001a      	movs	r2, r3
   1aeac:	4b51      	ldr	r3, [pc, #324]	; (1aff4 <xQueueGenericSendFromISR+0x208>)
   1aeae:	5c9c      	ldrb	r4, [r3, r2]
   1aeb0:	69bb      	ldr	r3, [r7, #24]
   1aeb2:	0018      	movs	r0, r3
   1aeb4:	4b50      	ldr	r3, [pc, #320]	; (1aff8 <xQueueGenericSendFromISR+0x20c>)
   1aeb6:	4798      	blx	r3
   1aeb8:	0003      	movs	r3, r0
   1aeba:	b2db      	uxtb	r3, r3
   1aebc:	001a      	movs	r2, r3
   1aebe:	0021      	movs	r1, r4
   1aec0:	0028      	movs	r0, r5
   1aec2:	4b4e      	ldr	r3, [pc, #312]	; (1affc <xQueueGenericSendFromISR+0x210>)
   1aec4:	4798      	blx	r3
   1aec6:	69bb      	ldr	r3, [r7, #24]
   1aec8:	0018      	movs	r0, r3
   1aeca:	4b49      	ldr	r3, [pc, #292]	; (1aff0 <xQueueGenericSendFromISR+0x204>)
   1aecc:	4798      	blx	r3
   1aece:	0003      	movs	r3, r0
   1aed0:	001a      	movs	r2, r3
   1aed2:	4b48      	ldr	r3, [pc, #288]	; (1aff4 <xQueueGenericSendFromISR+0x208>)
   1aed4:	5c9c      	ldrb	r4, [r3, r2]
   1aed6:	69bb      	ldr	r3, [r7, #24]
   1aed8:	0018      	movs	r0, r3
   1aeda:	4b47      	ldr	r3, [pc, #284]	; (1aff8 <xQueueGenericSendFromISR+0x20c>)
   1aedc:	4798      	blx	r3
   1aede:	0003      	movs	r3, r0
   1aee0:	b2d9      	uxtb	r1, r3
   1aee2:	69bb      	ldr	r3, [r7, #24]
   1aee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1aee6:	b2db      	uxtb	r3, r3
   1aee8:	3301      	adds	r3, #1
   1aeea:	b2db      	uxtb	r3, r3
   1aeec:	001a      	movs	r2, r3
   1aeee:	0020      	movs	r0, r4
   1aef0:	4b43      	ldr	r3, [pc, #268]	; (1b000 <xQueueGenericSendFromISR+0x214>)
   1aef2:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1aef4:	683a      	ldr	r2, [r7, #0]
   1aef6:	68b9      	ldr	r1, [r7, #8]
   1aef8:	69bb      	ldr	r3, [r7, #24]
   1aefa:	0018      	movs	r0, r3
   1aefc:	4b41      	ldr	r3, [pc, #260]	; (1b004 <xQueueGenericSendFromISR+0x218>)
   1aefe:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1af00:	2313      	movs	r3, #19
   1af02:	18fb      	adds	r3, r7, r3
   1af04:	781b      	ldrb	r3, [r3, #0]
   1af06:	b25b      	sxtb	r3, r3
   1af08:	3301      	adds	r3, #1
   1af0a:	d124      	bne.n	1af56 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1af0c:	69bb      	ldr	r3, [r7, #24]
   1af0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1af10:	2b00      	cmp	r3, #0
   1af12:	d00e      	beq.n	1af32 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1af14:	683a      	ldr	r2, [r7, #0]
   1af16:	69bb      	ldr	r3, [r7, #24]
   1af18:	0011      	movs	r1, r2
   1af1a:	0018      	movs	r0, r3
   1af1c:	4b3a      	ldr	r3, [pc, #232]	; (1b008 <xQueueGenericSendFromISR+0x21c>)
   1af1e:	4798      	blx	r3
   1af20:	1e03      	subs	r3, r0, #0
   1af22:	d021      	beq.n	1af68 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1af24:	687b      	ldr	r3, [r7, #4]
   1af26:	2b00      	cmp	r3, #0
   1af28:	d01e      	beq.n	1af68 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1af2a:	687b      	ldr	r3, [r7, #4]
   1af2c:	2201      	movs	r2, #1
   1af2e:	601a      	str	r2, [r3, #0]
   1af30:	e01a      	b.n	1af68 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1af32:	69bb      	ldr	r3, [r7, #24]
   1af34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1af36:	2b00      	cmp	r3, #0
   1af38:	d016      	beq.n	1af68 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1af3a:	69bb      	ldr	r3, [r7, #24]
   1af3c:	3324      	adds	r3, #36	; 0x24
   1af3e:	0018      	movs	r0, r3
   1af40:	4b32      	ldr	r3, [pc, #200]	; (1b00c <xQueueGenericSendFromISR+0x220>)
   1af42:	4798      	blx	r3
   1af44:	1e03      	subs	r3, r0, #0
   1af46:	d00f      	beq.n	1af68 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1af48:	687b      	ldr	r3, [r7, #4]
   1af4a:	2b00      	cmp	r3, #0
   1af4c:	d00c      	beq.n	1af68 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1af4e:	687b      	ldr	r3, [r7, #4]
   1af50:	2201      	movs	r2, #1
   1af52:	601a      	str	r2, [r3, #0]
   1af54:	e008      	b.n	1af68 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1af56:	2313      	movs	r3, #19
   1af58:	18fb      	adds	r3, r7, r3
   1af5a:	781b      	ldrb	r3, [r3, #0]
   1af5c:	3301      	adds	r3, #1
   1af5e:	b2db      	uxtb	r3, r3
   1af60:	b259      	sxtb	r1, r3
   1af62:	69bb      	ldr	r3, [r7, #24]
   1af64:	2245      	movs	r2, #69	; 0x45
   1af66:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1af68:	2301      	movs	r3, #1
   1af6a:	61fb      	str	r3, [r7, #28]
		{
   1af6c:	e030      	b.n	1afd0 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1af6e:	69bb      	ldr	r3, [r7, #24]
   1af70:	0018      	movs	r0, r3
   1af72:	4b1d      	ldr	r3, [pc, #116]	; (1afe8 <xQueueGenericSendFromISR+0x1fc>)
   1af74:	4798      	blx	r3
   1af76:	0003      	movs	r3, r0
   1af78:	001a      	movs	r2, r3
   1af7a:	4b1c      	ldr	r3, [pc, #112]	; (1afec <xQueueGenericSendFromISR+0x200>)
   1af7c:	881b      	ldrh	r3, [r3, #0]
   1af7e:	4013      	ands	r3, r2
   1af80:	b29b      	uxth	r3, r3
   1af82:	2b00      	cmp	r3, #0
   1af84:	d022      	beq.n	1afcc <xQueueGenericSendFromISR+0x1e0>
   1af86:	683b      	ldr	r3, [r7, #0]
   1af88:	2b00      	cmp	r3, #0
   1af8a:	d10b      	bne.n	1afa4 <xQueueGenericSendFromISR+0x1b8>
   1af8c:	69bb      	ldr	r3, [r7, #24]
   1af8e:	0018      	movs	r0, r3
   1af90:	4b17      	ldr	r3, [pc, #92]	; (1aff0 <xQueueGenericSendFromISR+0x204>)
   1af92:	4798      	blx	r3
   1af94:	0003      	movs	r3, r0
   1af96:	001a      	movs	r2, r3
   1af98:	4b16      	ldr	r3, [pc, #88]	; (1aff4 <xQueueGenericSendFromISR+0x208>)
   1af9a:	5c9b      	ldrb	r3, [r3, r2]
   1af9c:	3358      	adds	r3, #88	; 0x58
   1af9e:	b2db      	uxtb	r3, r3
   1afa0:	001d      	movs	r5, r3
   1afa2:	e000      	b.n	1afa6 <xQueueGenericSendFromISR+0x1ba>
   1afa4:	255d      	movs	r5, #93	; 0x5d
   1afa6:	69bb      	ldr	r3, [r7, #24]
   1afa8:	0018      	movs	r0, r3
   1afaa:	4b11      	ldr	r3, [pc, #68]	; (1aff0 <xQueueGenericSendFromISR+0x204>)
   1afac:	4798      	blx	r3
   1afae:	0003      	movs	r3, r0
   1afb0:	001a      	movs	r2, r3
   1afb2:	4b10      	ldr	r3, [pc, #64]	; (1aff4 <xQueueGenericSendFromISR+0x208>)
   1afb4:	5c9c      	ldrb	r4, [r3, r2]
   1afb6:	69bb      	ldr	r3, [r7, #24]
   1afb8:	0018      	movs	r0, r3
   1afba:	4b0f      	ldr	r3, [pc, #60]	; (1aff8 <xQueueGenericSendFromISR+0x20c>)
   1afbc:	4798      	blx	r3
   1afbe:	0003      	movs	r3, r0
   1afc0:	b2db      	uxtb	r3, r3
   1afc2:	001a      	movs	r2, r3
   1afc4:	0021      	movs	r1, r4
   1afc6:	0028      	movs	r0, r5
   1afc8:	4b0c      	ldr	r3, [pc, #48]	; (1affc <xQueueGenericSendFromISR+0x210>)
   1afca:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1afcc:	2300      	movs	r3, #0
   1afce:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1afd0:	697b      	ldr	r3, [r7, #20]
   1afd2:	0018      	movs	r0, r3
   1afd4:	4b0e      	ldr	r3, [pc, #56]	; (1b010 <xQueueGenericSendFromISR+0x224>)
   1afd6:	4798      	blx	r3

	return xReturn;
   1afd8:	69fb      	ldr	r3, [r7, #28]
}
   1afda:	0018      	movs	r0, r3
   1afdc:	46bd      	mov	sp, r7
   1afde:	b008      	add	sp, #32
   1afe0:	bdb0      	pop	{r4, r5, r7, pc}
   1afe2:	46c0      	nop			; (mov r8, r8)
   1afe4:	0001a44d 	.word	0x0001a44d
   1afe8:	000184ad 	.word	0x000184ad
   1afec:	200000b8 	.word	0x200000b8
   1aff0:	000183ad 	.word	0x000183ad
   1aff4:	200000ac 	.word	0x200000ac
   1aff8:	0001848d 	.word	0x0001848d
   1affc:	00018de5 	.word	0x00018de5
   1b000:	00019441 	.word	0x00019441
   1b004:	0001bbc5 	.word	0x0001bbc5
   1b008:	0001bec9 	.word	0x0001bec9
   1b00c:	0001cc89 	.word	0x0001cc89
   1b010:	0001a459 	.word	0x0001a459

0001b014 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1b014:	b580      	push	{r7, lr}
   1b016:	b082      	sub	sp, #8
   1b018:	af00      	add	r7, sp, #0
   1b01a:	6078      	str	r0, [r7, #4]
   1b01c:	6039      	str	r1, [r7, #0]
   1b01e:	6839      	ldr	r1, [r7, #0]
   1b020:	687b      	ldr	r3, [r7, #4]
   1b022:	2200      	movs	r2, #0
   1b024:	0018      	movs	r0, r3
   1b026:	4b03      	ldr	r3, [pc, #12]	; (1b034 <xQueueGiveFromISR+0x20>)
   1b028:	4798      	blx	r3
   1b02a:	0003      	movs	r3, r0
   1b02c:	0018      	movs	r0, r3
   1b02e:	46bd      	mov	sp, r7
   1b030:	b002      	add	sp, #8
   1b032:	bd80      	pop	{r7, pc}
   1b034:	0001b039 	.word	0x0001b039

0001b038 <MyWrapper>:
{
   1b038:	b5b0      	push	{r4, r5, r7, lr}
   1b03a:	b08a      	sub	sp, #40	; 0x28
   1b03c:	af00      	add	r7, sp, #0
   1b03e:	60f8      	str	r0, [r7, #12]
   1b040:	60b9      	str	r1, [r7, #8]
   1b042:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b044:	68fb      	ldr	r3, [r7, #12]
   1b046:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1b048:	6a3b      	ldr	r3, [r7, #32]
   1b04a:	2b00      	cmp	r3, #0
   1b04c:	d101      	bne.n	1b052 <MyWrapper+0x1a>
   1b04e:	b672      	cpsid	i
   1b050:	e7fe      	b.n	1b050 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b052:	6a3b      	ldr	r3, [r7, #32]
   1b054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b056:	2b00      	cmp	r3, #0
   1b058:	d001      	beq.n	1b05e <MyWrapper+0x26>
   1b05a:	b672      	cpsid	i
   1b05c:	e7fe      	b.n	1b05c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1b05e:	6a3b      	ldr	r3, [r7, #32]
   1b060:	681b      	ldr	r3, [r3, #0]
   1b062:	2b00      	cmp	r3, #0
   1b064:	d103      	bne.n	1b06e <MyWrapper+0x36>
   1b066:	6a3b      	ldr	r3, [r7, #32]
   1b068:	685b      	ldr	r3, [r3, #4]
   1b06a:	2b00      	cmp	r3, #0
   1b06c:	d101      	bne.n	1b072 <MyWrapper+0x3a>
   1b06e:	2301      	movs	r3, #1
   1b070:	e000      	b.n	1b074 <MyWrapper+0x3c>
   1b072:	2300      	movs	r3, #0
   1b074:	2b00      	cmp	r3, #0
   1b076:	d101      	bne.n	1b07c <MyWrapper+0x44>
   1b078:	b672      	cpsid	i
   1b07a:	e7fe      	b.n	1b07a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b07c:	4b66      	ldr	r3, [pc, #408]	; (1b218 <MyWrapper+0x1e0>)
   1b07e:	4798      	blx	r3
   1b080:	0003      	movs	r3, r0
   1b082:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b084:	6a3b      	ldr	r3, [r7, #32]
   1b086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b088:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1b08a:	6a3b      	ldr	r3, [r7, #32]
   1b08c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1b08e:	69bb      	ldr	r3, [r7, #24]
   1b090:	429a      	cmp	r2, r3
   1b092:	d800      	bhi.n	1b096 <MyWrapper+0x5e>
   1b094:	e085      	b.n	1b1a2 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b096:	2317      	movs	r3, #23
   1b098:	18fb      	adds	r3, r7, r3
   1b09a:	6a3a      	ldr	r2, [r7, #32]
   1b09c:	2145      	movs	r1, #69	; 0x45
   1b09e:	5c52      	ldrb	r2, [r2, r1]
   1b0a0:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b0a2:	6a3b      	ldr	r3, [r7, #32]
   1b0a4:	0018      	movs	r0, r3
   1b0a6:	4b5d      	ldr	r3, [pc, #372]	; (1b21c <MyWrapper+0x1e4>)
   1b0a8:	4798      	blx	r3
   1b0aa:	0003      	movs	r3, r0
   1b0ac:	001a      	movs	r2, r3
   1b0ae:	4b5c      	ldr	r3, [pc, #368]	; (1b220 <MyWrapper+0x1e8>)
   1b0b0:	881b      	ldrh	r3, [r3, #0]
   1b0b2:	4013      	ands	r3, r2
   1b0b4:	b29b      	uxth	r3, r3
   1b0b6:	2b00      	cmp	r3, #0
   1b0b8:	d022      	beq.n	1b100 <MyWrapper+0xc8>
   1b0ba:	687b      	ldr	r3, [r7, #4]
   1b0bc:	2b00      	cmp	r3, #0
   1b0be:	d10b      	bne.n	1b0d8 <MyWrapper+0xa0>
   1b0c0:	6a3b      	ldr	r3, [r7, #32]
   1b0c2:	0018      	movs	r0, r3
   1b0c4:	4b57      	ldr	r3, [pc, #348]	; (1b224 <MyWrapper+0x1ec>)
   1b0c6:	4798      	blx	r3
   1b0c8:	0003      	movs	r3, r0
   1b0ca:	001a      	movs	r2, r3
   1b0cc:	4b56      	ldr	r3, [pc, #344]	; (1b228 <MyWrapper+0x1f0>)
   1b0ce:	5c9b      	ldrb	r3, [r3, r2]
   1b0d0:	3330      	adds	r3, #48	; 0x30
   1b0d2:	b2db      	uxtb	r3, r3
   1b0d4:	001d      	movs	r5, r3
   1b0d6:	e000      	b.n	1b0da <MyWrapper+0xa2>
   1b0d8:	2535      	movs	r5, #53	; 0x35
   1b0da:	6a3b      	ldr	r3, [r7, #32]
   1b0dc:	0018      	movs	r0, r3
   1b0de:	4b51      	ldr	r3, [pc, #324]	; (1b224 <MyWrapper+0x1ec>)
   1b0e0:	4798      	blx	r3
   1b0e2:	0003      	movs	r3, r0
   1b0e4:	001a      	movs	r2, r3
   1b0e6:	4b50      	ldr	r3, [pc, #320]	; (1b228 <MyWrapper+0x1f0>)
   1b0e8:	5c9c      	ldrb	r4, [r3, r2]
   1b0ea:	6a3b      	ldr	r3, [r7, #32]
   1b0ec:	0018      	movs	r0, r3
   1b0ee:	4b4f      	ldr	r3, [pc, #316]	; (1b22c <MyWrapper+0x1f4>)
   1b0f0:	4798      	blx	r3
   1b0f2:	0003      	movs	r3, r0
   1b0f4:	b2db      	uxtb	r3, r3
   1b0f6:	001a      	movs	r2, r3
   1b0f8:	0021      	movs	r1, r4
   1b0fa:	0028      	movs	r0, r5
   1b0fc:	4b4c      	ldr	r3, [pc, #304]	; (1b230 <MyWrapper+0x1f8>)
   1b0fe:	4798      	blx	r3
   1b100:	6a3b      	ldr	r3, [r7, #32]
   1b102:	0018      	movs	r0, r3
   1b104:	4b47      	ldr	r3, [pc, #284]	; (1b224 <MyWrapper+0x1ec>)
   1b106:	4798      	blx	r3
   1b108:	0003      	movs	r3, r0
   1b10a:	001a      	movs	r2, r3
   1b10c:	4b46      	ldr	r3, [pc, #280]	; (1b228 <MyWrapper+0x1f0>)
   1b10e:	5c9c      	ldrb	r4, [r3, r2]
   1b110:	6a3b      	ldr	r3, [r7, #32]
   1b112:	0018      	movs	r0, r3
   1b114:	4b45      	ldr	r3, [pc, #276]	; (1b22c <MyWrapper+0x1f4>)
   1b116:	4798      	blx	r3
   1b118:	0003      	movs	r3, r0
   1b11a:	b2d9      	uxtb	r1, r3
   1b11c:	6a3b      	ldr	r3, [r7, #32]
   1b11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b120:	b2db      	uxtb	r3, r3
   1b122:	3301      	adds	r3, #1
   1b124:	b2db      	uxtb	r3, r3
   1b126:	001a      	movs	r2, r3
   1b128:	0020      	movs	r0, r4
   1b12a:	4b42      	ldr	r3, [pc, #264]	; (1b234 <MyWrapper+0x1fc>)
   1b12c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b12e:	69bb      	ldr	r3, [r7, #24]
   1b130:	1c5a      	adds	r2, r3, #1
   1b132:	6a3b      	ldr	r3, [r7, #32]
   1b134:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b136:	2317      	movs	r3, #23
   1b138:	18fb      	adds	r3, r7, r3
   1b13a:	781b      	ldrb	r3, [r3, #0]
   1b13c:	b25b      	sxtb	r3, r3
   1b13e:	3301      	adds	r3, #1
   1b140:	d123      	bne.n	1b18a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b142:	6a3b      	ldr	r3, [r7, #32]
   1b144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b146:	2b00      	cmp	r3, #0
   1b148:	d00d      	beq.n	1b166 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1b14a:	6a3b      	ldr	r3, [r7, #32]
   1b14c:	2100      	movs	r1, #0
   1b14e:	0018      	movs	r0, r3
   1b150:	4b39      	ldr	r3, [pc, #228]	; (1b238 <MyWrapper+0x200>)
   1b152:	4798      	blx	r3
   1b154:	1e03      	subs	r3, r0, #0
   1b156:	d021      	beq.n	1b19c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b158:	68bb      	ldr	r3, [r7, #8]
   1b15a:	2b00      	cmp	r3, #0
   1b15c:	d01e      	beq.n	1b19c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b15e:	68bb      	ldr	r3, [r7, #8]
   1b160:	2201      	movs	r2, #1
   1b162:	601a      	str	r2, [r3, #0]
   1b164:	e01a      	b.n	1b19c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b166:	6a3b      	ldr	r3, [r7, #32]
   1b168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b16a:	2b00      	cmp	r3, #0
   1b16c:	d016      	beq.n	1b19c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b16e:	6a3b      	ldr	r3, [r7, #32]
   1b170:	3324      	adds	r3, #36	; 0x24
   1b172:	0018      	movs	r0, r3
   1b174:	4b31      	ldr	r3, [pc, #196]	; (1b23c <MyWrapper+0x204>)
   1b176:	4798      	blx	r3
   1b178:	1e03      	subs	r3, r0, #0
   1b17a:	d00f      	beq.n	1b19c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b17c:	68bb      	ldr	r3, [r7, #8]
   1b17e:	2b00      	cmp	r3, #0
   1b180:	d00c      	beq.n	1b19c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b182:	68bb      	ldr	r3, [r7, #8]
   1b184:	2201      	movs	r2, #1
   1b186:	601a      	str	r2, [r3, #0]
   1b188:	e008      	b.n	1b19c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b18a:	2317      	movs	r3, #23
   1b18c:	18fb      	adds	r3, r7, r3
   1b18e:	781b      	ldrb	r3, [r3, #0]
   1b190:	3301      	adds	r3, #1
   1b192:	b2db      	uxtb	r3, r3
   1b194:	b259      	sxtb	r1, r3
   1b196:	6a3b      	ldr	r3, [r7, #32]
   1b198:	2245      	movs	r2, #69	; 0x45
   1b19a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b19c:	2301      	movs	r3, #1
   1b19e:	627b      	str	r3, [r7, #36]	; 0x24
   1b1a0:	e030      	b.n	1b204 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1b1a2:	6a3b      	ldr	r3, [r7, #32]
   1b1a4:	0018      	movs	r0, r3
   1b1a6:	4b1d      	ldr	r3, [pc, #116]	; (1b21c <MyWrapper+0x1e4>)
   1b1a8:	4798      	blx	r3
   1b1aa:	0003      	movs	r3, r0
   1b1ac:	001a      	movs	r2, r3
   1b1ae:	4b1c      	ldr	r3, [pc, #112]	; (1b220 <MyWrapper+0x1e8>)
   1b1b0:	881b      	ldrh	r3, [r3, #0]
   1b1b2:	4013      	ands	r3, r2
   1b1b4:	b29b      	uxth	r3, r3
   1b1b6:	2b00      	cmp	r3, #0
   1b1b8:	d022      	beq.n	1b200 <MyWrapper+0x1c8>
   1b1ba:	687b      	ldr	r3, [r7, #4]
   1b1bc:	2b00      	cmp	r3, #0
   1b1be:	d10b      	bne.n	1b1d8 <MyWrapper+0x1a0>
   1b1c0:	6a3b      	ldr	r3, [r7, #32]
   1b1c2:	0018      	movs	r0, r3
   1b1c4:	4b17      	ldr	r3, [pc, #92]	; (1b224 <MyWrapper+0x1ec>)
   1b1c6:	4798      	blx	r3
   1b1c8:	0003      	movs	r3, r0
   1b1ca:	001a      	movs	r2, r3
   1b1cc:	4b16      	ldr	r3, [pc, #88]	; (1b228 <MyWrapper+0x1f0>)
   1b1ce:	5c9b      	ldrb	r3, [r3, r2]
   1b1d0:	3358      	adds	r3, #88	; 0x58
   1b1d2:	b2db      	uxtb	r3, r3
   1b1d4:	001d      	movs	r5, r3
   1b1d6:	e000      	b.n	1b1da <MyWrapper+0x1a2>
   1b1d8:	255d      	movs	r5, #93	; 0x5d
   1b1da:	6a3b      	ldr	r3, [r7, #32]
   1b1dc:	0018      	movs	r0, r3
   1b1de:	4b11      	ldr	r3, [pc, #68]	; (1b224 <MyWrapper+0x1ec>)
   1b1e0:	4798      	blx	r3
   1b1e2:	0003      	movs	r3, r0
   1b1e4:	001a      	movs	r2, r3
   1b1e6:	4b10      	ldr	r3, [pc, #64]	; (1b228 <MyWrapper+0x1f0>)
   1b1e8:	5c9c      	ldrb	r4, [r3, r2]
   1b1ea:	6a3b      	ldr	r3, [r7, #32]
   1b1ec:	0018      	movs	r0, r3
   1b1ee:	4b0f      	ldr	r3, [pc, #60]	; (1b22c <MyWrapper+0x1f4>)
   1b1f0:	4798      	blx	r3
   1b1f2:	0003      	movs	r3, r0
   1b1f4:	b2db      	uxtb	r3, r3
   1b1f6:	001a      	movs	r2, r3
   1b1f8:	0021      	movs	r1, r4
   1b1fa:	0028      	movs	r0, r5
   1b1fc:	4b0c      	ldr	r3, [pc, #48]	; (1b230 <MyWrapper+0x1f8>)
   1b1fe:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1b200:	2300      	movs	r3, #0
   1b202:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1b204:	69fb      	ldr	r3, [r7, #28]
   1b206:	0018      	movs	r0, r3
   1b208:	4b0d      	ldr	r3, [pc, #52]	; (1b240 <MyWrapper+0x208>)
   1b20a:	4798      	blx	r3

	return xReturn;
   1b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b20e:	0018      	movs	r0, r3
   1b210:	46bd      	mov	sp, r7
   1b212:	b00a      	add	sp, #40	; 0x28
   1b214:	bdb0      	pop	{r4, r5, r7, pc}
   1b216:	46c0      	nop			; (mov r8, r8)
   1b218:	0001a44d 	.word	0x0001a44d
   1b21c:	000184ad 	.word	0x000184ad
   1b220:	200000b8 	.word	0x200000b8
   1b224:	000183ad 	.word	0x000183ad
   1b228:	200000ac 	.word	0x200000ac
   1b22c:	0001848d 	.word	0x0001848d
   1b230:	00018de5 	.word	0x00018de5
   1b234:	00019441 	.word	0x00019441
   1b238:	0001bec9 	.word	0x0001bec9
   1b23c:	0001cc89 	.word	0x0001cc89
   1b240:	0001a459 	.word	0x0001a459

0001b244 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1b244:	b5b0      	push	{r4, r5, r7, lr}
   1b246:	b08a      	sub	sp, #40	; 0x28
   1b248:	af00      	add	r7, sp, #0
   1b24a:	60f8      	str	r0, [r7, #12]
   1b24c:	60b9      	str	r1, [r7, #8]
   1b24e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1b250:	2300      	movs	r3, #0
   1b252:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b254:	68fb      	ldr	r3, [r7, #12]
   1b256:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b258:	6a3b      	ldr	r3, [r7, #32]
   1b25a:	2b00      	cmp	r3, #0
   1b25c:	d101      	bne.n	1b262 <xQueueReceive+0x1e>
   1b25e:	b672      	cpsid	i
   1b260:	e7fe      	b.n	1b260 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b262:	68bb      	ldr	r3, [r7, #8]
   1b264:	2b00      	cmp	r3, #0
   1b266:	d103      	bne.n	1b270 <xQueueReceive+0x2c>
   1b268:	6a3b      	ldr	r3, [r7, #32]
   1b26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b26c:	2b00      	cmp	r3, #0
   1b26e:	d101      	bne.n	1b274 <xQueueReceive+0x30>
   1b270:	2301      	movs	r3, #1
   1b272:	e000      	b.n	1b276 <xQueueReceive+0x32>
   1b274:	2300      	movs	r3, #0
   1b276:	2b00      	cmp	r3, #0
   1b278:	d101      	bne.n	1b27e <xQueueReceive+0x3a>
   1b27a:	b672      	cpsid	i
   1b27c:	e7fe      	b.n	1b27c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b27e:	4bbf      	ldr	r3, [pc, #764]	; (1b57c <xQueueReceive+0x338>)
   1b280:	4798      	blx	r3
   1b282:	1e03      	subs	r3, r0, #0
   1b284:	d102      	bne.n	1b28c <xQueueReceive+0x48>
   1b286:	687b      	ldr	r3, [r7, #4]
   1b288:	2b00      	cmp	r3, #0
   1b28a:	d101      	bne.n	1b290 <xQueueReceive+0x4c>
   1b28c:	2301      	movs	r3, #1
   1b28e:	e000      	b.n	1b292 <xQueueReceive+0x4e>
   1b290:	2300      	movs	r3, #0
   1b292:	2b00      	cmp	r3, #0
   1b294:	d101      	bne.n	1b29a <xQueueReceive+0x56>
   1b296:	b672      	cpsid	i
   1b298:	e7fe      	b.n	1b298 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1b29a:	4bb9      	ldr	r3, [pc, #740]	; (1b580 <xQueueReceive+0x33c>)
   1b29c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b29e:	6a3b      	ldr	r3, [r7, #32]
   1b2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b2a2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1b2a4:	69fb      	ldr	r3, [r7, #28]
   1b2a6:	2b00      	cmp	r3, #0
   1b2a8:	d100      	bne.n	1b2ac <xQueueReceive+0x68>
   1b2aa:	e07d      	b.n	1b3a8 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1b2ac:	68ba      	ldr	r2, [r7, #8]
   1b2ae:	6a3b      	ldr	r3, [r7, #32]
   1b2b0:	0011      	movs	r1, r2
   1b2b2:	0018      	movs	r0, r3
   1b2b4:	4bb3      	ldr	r3, [pc, #716]	; (1b584 <xQueueReceive+0x340>)
   1b2b6:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1b2b8:	4bb3      	ldr	r3, [pc, #716]	; (1b588 <xQueueReceive+0x344>)
   1b2ba:	4798      	blx	r3
   1b2bc:	0003      	movs	r3, r0
   1b2be:	0018      	movs	r0, r3
   1b2c0:	4bb2      	ldr	r3, [pc, #712]	; (1b58c <xQueueReceive+0x348>)
   1b2c2:	4798      	blx	r3
   1b2c4:	0003      	movs	r3, r0
   1b2c6:	001a      	movs	r2, r3
   1b2c8:	4bb1      	ldr	r3, [pc, #708]	; (1b590 <xQueueReceive+0x34c>)
   1b2ca:	881b      	ldrh	r3, [r3, #0]
   1b2cc:	4013      	ands	r3, r2
   1b2ce:	b29b      	uxth	r3, r3
   1b2d0:	2b00      	cmp	r3, #0
   1b2d2:	d029      	beq.n	1b328 <xQueueReceive+0xe4>
   1b2d4:	6a3b      	ldr	r3, [r7, #32]
   1b2d6:	0018      	movs	r0, r3
   1b2d8:	4bae      	ldr	r3, [pc, #696]	; (1b594 <xQueueReceive+0x350>)
   1b2da:	4798      	blx	r3
   1b2dc:	0003      	movs	r3, r0
   1b2de:	001a      	movs	r2, r3
   1b2e0:	4bab      	ldr	r3, [pc, #684]	; (1b590 <xQueueReceive+0x34c>)
   1b2e2:	881b      	ldrh	r3, [r3, #0]
   1b2e4:	4013      	ands	r3, r2
   1b2e6:	b29b      	uxth	r3, r3
   1b2e8:	2b00      	cmp	r3, #0
   1b2ea:	d01d      	beq.n	1b328 <xQueueReceive+0xe4>
   1b2ec:	6a3b      	ldr	r3, [r7, #32]
   1b2ee:	0018      	movs	r0, r3
   1b2f0:	4ba9      	ldr	r3, [pc, #676]	; (1b598 <xQueueReceive+0x354>)
   1b2f2:	4798      	blx	r3
   1b2f4:	0003      	movs	r3, r0
   1b2f6:	001a      	movs	r2, r3
   1b2f8:	4ba8      	ldr	r3, [pc, #672]	; (1b59c <xQueueReceive+0x358>)
   1b2fa:	5c9b      	ldrb	r3, [r3, r2]
   1b2fc:	3328      	adds	r3, #40	; 0x28
   1b2fe:	b2db      	uxtb	r3, r3
   1b300:	001d      	movs	r5, r3
   1b302:	6a3b      	ldr	r3, [r7, #32]
   1b304:	0018      	movs	r0, r3
   1b306:	4ba4      	ldr	r3, [pc, #656]	; (1b598 <xQueueReceive+0x354>)
   1b308:	4798      	blx	r3
   1b30a:	0003      	movs	r3, r0
   1b30c:	001a      	movs	r2, r3
   1b30e:	4ba3      	ldr	r3, [pc, #652]	; (1b59c <xQueueReceive+0x358>)
   1b310:	5c9c      	ldrb	r4, [r3, r2]
   1b312:	6a3b      	ldr	r3, [r7, #32]
   1b314:	0018      	movs	r0, r3
   1b316:	4ba2      	ldr	r3, [pc, #648]	; (1b5a0 <xQueueReceive+0x35c>)
   1b318:	4798      	blx	r3
   1b31a:	0003      	movs	r3, r0
   1b31c:	b2db      	uxtb	r3, r3
   1b31e:	001a      	movs	r2, r3
   1b320:	0021      	movs	r1, r4
   1b322:	0028      	movs	r0, r5
   1b324:	4b9f      	ldr	r3, [pc, #636]	; (1b5a4 <xQueueReceive+0x360>)
   1b326:	4798      	blx	r3
   1b328:	6a3b      	ldr	r3, [r7, #32]
   1b32a:	0018      	movs	r0, r3
   1b32c:	4b9a      	ldr	r3, [pc, #616]	; (1b598 <xQueueReceive+0x354>)
   1b32e:	4798      	blx	r3
   1b330:	0003      	movs	r3, r0
   1b332:	001a      	movs	r2, r3
   1b334:	4b99      	ldr	r3, [pc, #612]	; (1b59c <xQueueReceive+0x358>)
   1b336:	5c9c      	ldrb	r4, [r3, r2]
   1b338:	6a3b      	ldr	r3, [r7, #32]
   1b33a:	0018      	movs	r0, r3
   1b33c:	4b98      	ldr	r3, [pc, #608]	; (1b5a0 <xQueueReceive+0x35c>)
   1b33e:	4798      	blx	r3
   1b340:	0003      	movs	r3, r0
   1b342:	b2dd      	uxtb	r5, r3
   1b344:	6a3b      	ldr	r3, [r7, #32]
   1b346:	0018      	movs	r0, r3
   1b348:	4b93      	ldr	r3, [pc, #588]	; (1b598 <xQueueReceive+0x354>)
   1b34a:	4798      	blx	r3
   1b34c:	0003      	movs	r3, r0
   1b34e:	001a      	movs	r2, r3
   1b350:	4b92      	ldr	r3, [pc, #584]	; (1b59c <xQueueReceive+0x358>)
   1b352:	5c9b      	ldrb	r3, [r3, r2]
   1b354:	2b02      	cmp	r3, #2
   1b356:	d108      	bne.n	1b36a <xQueueReceive+0x126>
   1b358:	4b8b      	ldr	r3, [pc, #556]	; (1b588 <xQueueReceive+0x344>)
   1b35a:	4798      	blx	r3
   1b35c:	0003      	movs	r3, r0
   1b35e:	0018      	movs	r0, r3
   1b360:	4b91      	ldr	r3, [pc, #580]	; (1b5a8 <xQueueReceive+0x364>)
   1b362:	4798      	blx	r3
   1b364:	0003      	movs	r3, r0
   1b366:	b2db      	uxtb	r3, r3
   1b368:	e004      	b.n	1b374 <xQueueReceive+0x130>
   1b36a:	6a3b      	ldr	r3, [r7, #32]
   1b36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b36e:	b2db      	uxtb	r3, r3
   1b370:	3b01      	subs	r3, #1
   1b372:	b2db      	uxtb	r3, r3
   1b374:	001a      	movs	r2, r3
   1b376:	0029      	movs	r1, r5
   1b378:	0020      	movs	r0, r4
   1b37a:	4b8c      	ldr	r3, [pc, #560]	; (1b5ac <xQueueReceive+0x368>)
   1b37c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1b37e:	69fb      	ldr	r3, [r7, #28]
   1b380:	1e5a      	subs	r2, r3, #1
   1b382:	6a3b      	ldr	r3, [r7, #32]
   1b384:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b386:	6a3b      	ldr	r3, [r7, #32]
   1b388:	691b      	ldr	r3, [r3, #16]
   1b38a:	2b00      	cmp	r3, #0
   1b38c:	d008      	beq.n	1b3a0 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b38e:	6a3b      	ldr	r3, [r7, #32]
   1b390:	3310      	adds	r3, #16
   1b392:	0018      	movs	r0, r3
   1b394:	4b86      	ldr	r3, [pc, #536]	; (1b5b0 <xQueueReceive+0x36c>)
   1b396:	4798      	blx	r3
   1b398:	1e03      	subs	r3, r0, #0
   1b39a:	d001      	beq.n	1b3a0 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b39c:	4b85      	ldr	r3, [pc, #532]	; (1b5b4 <xQueueReceive+0x370>)
   1b39e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1b3a0:	4b85      	ldr	r3, [pc, #532]	; (1b5b8 <xQueueReceive+0x374>)
   1b3a2:	4798      	blx	r3
				return pdPASS;
   1b3a4:	2301      	movs	r3, #1
   1b3a6:	e15f      	b.n	1b668 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b3a8:	687b      	ldr	r3, [r7, #4]
   1b3aa:	2b00      	cmp	r3, #0
   1b3ac:	d13b      	bne.n	1b426 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b3ae:	4b82      	ldr	r3, [pc, #520]	; (1b5b8 <xQueueReceive+0x374>)
   1b3b0:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b3b2:	4b75      	ldr	r3, [pc, #468]	; (1b588 <xQueueReceive+0x344>)
   1b3b4:	4798      	blx	r3
   1b3b6:	0003      	movs	r3, r0
   1b3b8:	0018      	movs	r0, r3
   1b3ba:	4b74      	ldr	r3, [pc, #464]	; (1b58c <xQueueReceive+0x348>)
   1b3bc:	4798      	blx	r3
   1b3be:	0003      	movs	r3, r0
   1b3c0:	001a      	movs	r2, r3
   1b3c2:	4b73      	ldr	r3, [pc, #460]	; (1b590 <xQueueReceive+0x34c>)
   1b3c4:	881b      	ldrh	r3, [r3, #0]
   1b3c6:	4013      	ands	r3, r2
   1b3c8:	b29b      	uxth	r3, r3
   1b3ca:	2b00      	cmp	r3, #0
   1b3cc:	d029      	beq.n	1b422 <xQueueReceive+0x1de>
   1b3ce:	6a3b      	ldr	r3, [r7, #32]
   1b3d0:	0018      	movs	r0, r3
   1b3d2:	4b70      	ldr	r3, [pc, #448]	; (1b594 <xQueueReceive+0x350>)
   1b3d4:	4798      	blx	r3
   1b3d6:	0003      	movs	r3, r0
   1b3d8:	001a      	movs	r2, r3
   1b3da:	4b6d      	ldr	r3, [pc, #436]	; (1b590 <xQueueReceive+0x34c>)
   1b3dc:	881b      	ldrh	r3, [r3, #0]
   1b3de:	4013      	ands	r3, r2
   1b3e0:	b29b      	uxth	r3, r3
   1b3e2:	2b00      	cmp	r3, #0
   1b3e4:	d01d      	beq.n	1b422 <xQueueReceive+0x1de>
   1b3e6:	6a3b      	ldr	r3, [r7, #32]
   1b3e8:	0018      	movs	r0, r3
   1b3ea:	4b6b      	ldr	r3, [pc, #428]	; (1b598 <xQueueReceive+0x354>)
   1b3ec:	4798      	blx	r3
   1b3ee:	0003      	movs	r3, r0
   1b3f0:	001a      	movs	r2, r3
   1b3f2:	4b6a      	ldr	r3, [pc, #424]	; (1b59c <xQueueReceive+0x358>)
   1b3f4:	5c9b      	ldrb	r3, [r3, r2]
   1b3f6:	3350      	adds	r3, #80	; 0x50
   1b3f8:	b2db      	uxtb	r3, r3
   1b3fa:	001d      	movs	r5, r3
   1b3fc:	6a3b      	ldr	r3, [r7, #32]
   1b3fe:	0018      	movs	r0, r3
   1b400:	4b65      	ldr	r3, [pc, #404]	; (1b598 <xQueueReceive+0x354>)
   1b402:	4798      	blx	r3
   1b404:	0003      	movs	r3, r0
   1b406:	001a      	movs	r2, r3
   1b408:	4b64      	ldr	r3, [pc, #400]	; (1b59c <xQueueReceive+0x358>)
   1b40a:	5c9c      	ldrb	r4, [r3, r2]
   1b40c:	6a3b      	ldr	r3, [r7, #32]
   1b40e:	0018      	movs	r0, r3
   1b410:	4b63      	ldr	r3, [pc, #396]	; (1b5a0 <xQueueReceive+0x35c>)
   1b412:	4798      	blx	r3
   1b414:	0003      	movs	r3, r0
   1b416:	b2db      	uxtb	r3, r3
   1b418:	001a      	movs	r2, r3
   1b41a:	0021      	movs	r1, r4
   1b41c:	0028      	movs	r0, r5
   1b41e:	4b61      	ldr	r3, [pc, #388]	; (1b5a4 <xQueueReceive+0x360>)
   1b420:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1b422:	2300      	movs	r3, #0
   1b424:	e120      	b.n	1b668 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b428:	2b00      	cmp	r3, #0
   1b42a:	d106      	bne.n	1b43a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b42c:	2314      	movs	r3, #20
   1b42e:	18fb      	adds	r3, r7, r3
   1b430:	0018      	movs	r0, r3
   1b432:	4b62      	ldr	r3, [pc, #392]	; (1b5bc <xQueueReceive+0x378>)
   1b434:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b436:	2301      	movs	r3, #1
   1b438:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b43a:	4b5f      	ldr	r3, [pc, #380]	; (1b5b8 <xQueueReceive+0x374>)
   1b43c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b43e:	4b60      	ldr	r3, [pc, #384]	; (1b5c0 <xQueueReceive+0x37c>)
   1b440:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b442:	4b4f      	ldr	r3, [pc, #316]	; (1b580 <xQueueReceive+0x33c>)
   1b444:	4798      	blx	r3
   1b446:	6a3b      	ldr	r3, [r7, #32]
   1b448:	2244      	movs	r2, #68	; 0x44
   1b44a:	5c9b      	ldrb	r3, [r3, r2]
   1b44c:	b25b      	sxtb	r3, r3
   1b44e:	3301      	adds	r3, #1
   1b450:	d103      	bne.n	1b45a <xQueueReceive+0x216>
   1b452:	6a3b      	ldr	r3, [r7, #32]
   1b454:	2244      	movs	r2, #68	; 0x44
   1b456:	2100      	movs	r1, #0
   1b458:	5499      	strb	r1, [r3, r2]
   1b45a:	6a3b      	ldr	r3, [r7, #32]
   1b45c:	2245      	movs	r2, #69	; 0x45
   1b45e:	5c9b      	ldrb	r3, [r3, r2]
   1b460:	b25b      	sxtb	r3, r3
   1b462:	3301      	adds	r3, #1
   1b464:	d103      	bne.n	1b46e <xQueueReceive+0x22a>
   1b466:	6a3b      	ldr	r3, [r7, #32]
   1b468:	2245      	movs	r2, #69	; 0x45
   1b46a:	2100      	movs	r1, #0
   1b46c:	5499      	strb	r1, [r3, r2]
   1b46e:	4b52      	ldr	r3, [pc, #328]	; (1b5b8 <xQueueReceive+0x374>)
   1b470:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b472:	1d3a      	adds	r2, r7, #4
   1b474:	2314      	movs	r3, #20
   1b476:	18fb      	adds	r3, r7, r3
   1b478:	0011      	movs	r1, r2
   1b47a:	0018      	movs	r0, r3
   1b47c:	4b51      	ldr	r3, [pc, #324]	; (1b5c4 <xQueueReceive+0x380>)
   1b47e:	4798      	blx	r3
   1b480:	1e03      	subs	r3, r0, #0
   1b482:	d000      	beq.n	1b486 <xQueueReceive+0x242>
   1b484:	e0aa      	b.n	1b5dc <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b486:	6a3b      	ldr	r3, [r7, #32]
   1b488:	0018      	movs	r0, r3
   1b48a:	4b4f      	ldr	r3, [pc, #316]	; (1b5c8 <xQueueReceive+0x384>)
   1b48c:	4798      	blx	r3
   1b48e:	1e03      	subs	r3, r0, #0
   1b490:	d06d      	beq.n	1b56e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1b492:	4b3d      	ldr	r3, [pc, #244]	; (1b588 <xQueueReceive+0x344>)
   1b494:	4798      	blx	r3
   1b496:	0003      	movs	r3, r0
   1b498:	0018      	movs	r0, r3
   1b49a:	4b3c      	ldr	r3, [pc, #240]	; (1b58c <xQueueReceive+0x348>)
   1b49c:	4798      	blx	r3
   1b49e:	0003      	movs	r3, r0
   1b4a0:	001a      	movs	r2, r3
   1b4a2:	4b3b      	ldr	r3, [pc, #236]	; (1b590 <xQueueReceive+0x34c>)
   1b4a4:	881b      	ldrh	r3, [r3, #0]
   1b4a6:	4013      	ands	r3, r2
   1b4a8:	b29b      	uxth	r3, r3
   1b4aa:	2b00      	cmp	r3, #0
   1b4ac:	d029      	beq.n	1b502 <xQueueReceive+0x2be>
   1b4ae:	6a3b      	ldr	r3, [r7, #32]
   1b4b0:	0018      	movs	r0, r3
   1b4b2:	4b38      	ldr	r3, [pc, #224]	; (1b594 <xQueueReceive+0x350>)
   1b4b4:	4798      	blx	r3
   1b4b6:	0003      	movs	r3, r0
   1b4b8:	001a      	movs	r2, r3
   1b4ba:	4b35      	ldr	r3, [pc, #212]	; (1b590 <xQueueReceive+0x34c>)
   1b4bc:	881b      	ldrh	r3, [r3, #0]
   1b4be:	4013      	ands	r3, r2
   1b4c0:	b29b      	uxth	r3, r3
   1b4c2:	2b00      	cmp	r3, #0
   1b4c4:	d01d      	beq.n	1b502 <xQueueReceive+0x2be>
   1b4c6:	6a3b      	ldr	r3, [r7, #32]
   1b4c8:	0018      	movs	r0, r3
   1b4ca:	4b33      	ldr	r3, [pc, #204]	; (1b598 <xQueueReceive+0x354>)
   1b4cc:	4798      	blx	r3
   1b4ce:	0003      	movs	r3, r0
   1b4d0:	001a      	movs	r2, r3
   1b4d2:	4b32      	ldr	r3, [pc, #200]	; (1b59c <xQueueReceive+0x358>)
   1b4d4:	5c9b      	ldrb	r3, [r3, r2]
   1b4d6:	3368      	adds	r3, #104	; 0x68
   1b4d8:	b2db      	uxtb	r3, r3
   1b4da:	001d      	movs	r5, r3
   1b4dc:	6a3b      	ldr	r3, [r7, #32]
   1b4de:	0018      	movs	r0, r3
   1b4e0:	4b2d      	ldr	r3, [pc, #180]	; (1b598 <xQueueReceive+0x354>)
   1b4e2:	4798      	blx	r3
   1b4e4:	0003      	movs	r3, r0
   1b4e6:	001a      	movs	r2, r3
   1b4e8:	4b2c      	ldr	r3, [pc, #176]	; (1b59c <xQueueReceive+0x358>)
   1b4ea:	5c9c      	ldrb	r4, [r3, r2]
   1b4ec:	6a3b      	ldr	r3, [r7, #32]
   1b4ee:	0018      	movs	r0, r3
   1b4f0:	4b2b      	ldr	r3, [pc, #172]	; (1b5a0 <xQueueReceive+0x35c>)
   1b4f2:	4798      	blx	r3
   1b4f4:	0003      	movs	r3, r0
   1b4f6:	b2db      	uxtb	r3, r3
   1b4f8:	001a      	movs	r2, r3
   1b4fa:	0021      	movs	r1, r4
   1b4fc:	0028      	movs	r0, r5
   1b4fe:	4b29      	ldr	r3, [pc, #164]	; (1b5a4 <xQueueReceive+0x360>)
   1b500:	4798      	blx	r3
   1b502:	6a3b      	ldr	r3, [r7, #32]
   1b504:	0018      	movs	r0, r3
   1b506:	4b24      	ldr	r3, [pc, #144]	; (1b598 <xQueueReceive+0x354>)
   1b508:	4798      	blx	r3
   1b50a:	0003      	movs	r3, r0
   1b50c:	001a      	movs	r2, r3
   1b50e:	4b23      	ldr	r3, [pc, #140]	; (1b59c <xQueueReceive+0x358>)
   1b510:	5c9b      	ldrb	r3, [r3, r2]
   1b512:	2b02      	cmp	r3, #2
   1b514:	d018      	beq.n	1b548 <xQueueReceive+0x304>
   1b516:	4b1c      	ldr	r3, [pc, #112]	; (1b588 <xQueueReceive+0x344>)
   1b518:	4798      	blx	r3
   1b51a:	0003      	movs	r3, r0
   1b51c:	0018      	movs	r0, r3
   1b51e:	4b1b      	ldr	r3, [pc, #108]	; (1b58c <xQueueReceive+0x348>)
   1b520:	4798      	blx	r3
   1b522:	0003      	movs	r3, r0
   1b524:	001a      	movs	r2, r3
   1b526:	4b1a      	ldr	r3, [pc, #104]	; (1b590 <xQueueReceive+0x34c>)
   1b528:	881b      	ldrh	r3, [r3, #0]
   1b52a:	4013      	ands	r3, r2
   1b52c:	b29b      	uxth	r3, r3
   1b52e:	2b00      	cmp	r3, #0
   1b530:	d00a      	beq.n	1b548 <xQueueReceive+0x304>
   1b532:	4b15      	ldr	r3, [pc, #84]	; (1b588 <xQueueReceive+0x344>)
   1b534:	4798      	blx	r3
   1b536:	0003      	movs	r3, r0
   1b538:	0018      	movs	r0, r3
   1b53a:	4b1b      	ldr	r3, [pc, #108]	; (1b5a8 <xQueueReceive+0x364>)
   1b53c:	4798      	blx	r3
   1b53e:	0003      	movs	r3, r0
   1b540:	b2db      	uxtb	r3, r3
   1b542:	0018      	movs	r0, r3
   1b544:	4b21      	ldr	r3, [pc, #132]	; (1b5cc <xQueueReceive+0x388>)
   1b546:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b548:	6a3b      	ldr	r3, [r7, #32]
   1b54a:	3324      	adds	r3, #36	; 0x24
   1b54c:	687a      	ldr	r2, [r7, #4]
   1b54e:	0011      	movs	r1, r2
   1b550:	0018      	movs	r0, r3
   1b552:	4b1f      	ldr	r3, [pc, #124]	; (1b5d0 <xQueueReceive+0x38c>)
   1b554:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b556:	6a3b      	ldr	r3, [r7, #32]
   1b558:	0018      	movs	r0, r3
   1b55a:	4b1e      	ldr	r3, [pc, #120]	; (1b5d4 <xQueueReceive+0x390>)
   1b55c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b55e:	4b1e      	ldr	r3, [pc, #120]	; (1b5d8 <xQueueReceive+0x394>)
   1b560:	4798      	blx	r3
   1b562:	1e03      	subs	r3, r0, #0
   1b564:	d000      	beq.n	1b568 <xQueueReceive+0x324>
   1b566:	e698      	b.n	1b29a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1b568:	4b12      	ldr	r3, [pc, #72]	; (1b5b4 <xQueueReceive+0x370>)
   1b56a:	4798      	blx	r3
   1b56c:	e695      	b.n	1b29a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1b56e:	6a3b      	ldr	r3, [r7, #32]
   1b570:	0018      	movs	r0, r3
   1b572:	4b18      	ldr	r3, [pc, #96]	; (1b5d4 <xQueueReceive+0x390>)
   1b574:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b576:	4b18      	ldr	r3, [pc, #96]	; (1b5d8 <xQueueReceive+0x394>)
   1b578:	4798      	blx	r3
   1b57a:	e68e      	b.n	1b29a <xQueueReceive+0x56>
   1b57c:	0001d119 	.word	0x0001d119
   1b580:	0001a3f9 	.word	0x0001a3f9
   1b584:	0001bca5 	.word	0x0001bca5
   1b588:	00018689 	.word	0x00018689
   1b58c:	000183ed 	.word	0x000183ed
   1b590:	200000b8 	.word	0x200000b8
   1b594:	000184ad 	.word	0x000184ad
   1b598:	000183ad 	.word	0x000183ad
   1b59c:	200000ac 	.word	0x200000ac
   1b5a0:	0001848d 	.word	0x0001848d
   1b5a4:	00018de5 	.word	0x00018de5
   1b5a8:	000183cd 	.word	0x000183cd
   1b5ac:	00019441 	.word	0x00019441
   1b5b0:	0001cc89 	.word	0x0001cc89
   1b5b4:	0001a3e1 	.word	0x0001a3e1
   1b5b8:	0001a41d 	.word	0x0001a41d
   1b5bc:	0001cdc9 	.word	0x0001cdc9
   1b5c0:	0001c6b1 	.word	0x0001c6b1
   1b5c4:	0001cdf1 	.word	0x0001cdf1
   1b5c8:	0001bde5 	.word	0x0001bde5
   1b5cc:	0001957d 	.word	0x0001957d
   1b5d0:	0001cb65 	.word	0x0001cb65
   1b5d4:	0001bcf5 	.word	0x0001bcf5
   1b5d8:	0001c6c9 	.word	0x0001c6c9
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1b5dc:	6a3b      	ldr	r3, [r7, #32]
   1b5de:	0018      	movs	r0, r3
   1b5e0:	4b23      	ldr	r3, [pc, #140]	; (1b670 <xQueueReceive+0x42c>)
   1b5e2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b5e4:	4b23      	ldr	r3, [pc, #140]	; (1b674 <xQueueReceive+0x430>)
   1b5e6:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b5e8:	6a3b      	ldr	r3, [r7, #32]
   1b5ea:	0018      	movs	r0, r3
   1b5ec:	4b22      	ldr	r3, [pc, #136]	; (1b678 <xQueueReceive+0x434>)
   1b5ee:	4798      	blx	r3
   1b5f0:	1e03      	subs	r3, r0, #0
   1b5f2:	d100      	bne.n	1b5f6 <xQueueReceive+0x3b2>
   1b5f4:	e651      	b.n	1b29a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b5f6:	4b21      	ldr	r3, [pc, #132]	; (1b67c <xQueueReceive+0x438>)
   1b5f8:	4798      	blx	r3
   1b5fa:	0003      	movs	r3, r0
   1b5fc:	0018      	movs	r0, r3
   1b5fe:	4b20      	ldr	r3, [pc, #128]	; (1b680 <xQueueReceive+0x43c>)
   1b600:	4798      	blx	r3
   1b602:	0003      	movs	r3, r0
   1b604:	001a      	movs	r2, r3
   1b606:	4b1f      	ldr	r3, [pc, #124]	; (1b684 <xQueueReceive+0x440>)
   1b608:	881b      	ldrh	r3, [r3, #0]
   1b60a:	4013      	ands	r3, r2
   1b60c:	b29b      	uxth	r3, r3
   1b60e:	2b00      	cmp	r3, #0
   1b610:	d029      	beq.n	1b666 <xQueueReceive+0x422>
   1b612:	6a3b      	ldr	r3, [r7, #32]
   1b614:	0018      	movs	r0, r3
   1b616:	4b1c      	ldr	r3, [pc, #112]	; (1b688 <xQueueReceive+0x444>)
   1b618:	4798      	blx	r3
   1b61a:	0003      	movs	r3, r0
   1b61c:	001a      	movs	r2, r3
   1b61e:	4b19      	ldr	r3, [pc, #100]	; (1b684 <xQueueReceive+0x440>)
   1b620:	881b      	ldrh	r3, [r3, #0]
   1b622:	4013      	ands	r3, r2
   1b624:	b29b      	uxth	r3, r3
   1b626:	2b00      	cmp	r3, #0
   1b628:	d01d      	beq.n	1b666 <xQueueReceive+0x422>
   1b62a:	6a3b      	ldr	r3, [r7, #32]
   1b62c:	0018      	movs	r0, r3
   1b62e:	4b17      	ldr	r3, [pc, #92]	; (1b68c <xQueueReceive+0x448>)
   1b630:	4798      	blx	r3
   1b632:	0003      	movs	r3, r0
   1b634:	001a      	movs	r2, r3
   1b636:	4b16      	ldr	r3, [pc, #88]	; (1b690 <xQueueReceive+0x44c>)
   1b638:	5c9b      	ldrb	r3, [r3, r2]
   1b63a:	3350      	adds	r3, #80	; 0x50
   1b63c:	b2db      	uxtb	r3, r3
   1b63e:	001d      	movs	r5, r3
   1b640:	6a3b      	ldr	r3, [r7, #32]
   1b642:	0018      	movs	r0, r3
   1b644:	4b11      	ldr	r3, [pc, #68]	; (1b68c <xQueueReceive+0x448>)
   1b646:	4798      	blx	r3
   1b648:	0003      	movs	r3, r0
   1b64a:	001a      	movs	r2, r3
   1b64c:	4b10      	ldr	r3, [pc, #64]	; (1b690 <xQueueReceive+0x44c>)
   1b64e:	5c9c      	ldrb	r4, [r3, r2]
   1b650:	6a3b      	ldr	r3, [r7, #32]
   1b652:	0018      	movs	r0, r3
   1b654:	4b0f      	ldr	r3, [pc, #60]	; (1b694 <xQueueReceive+0x450>)
   1b656:	4798      	blx	r3
   1b658:	0003      	movs	r3, r0
   1b65a:	b2db      	uxtb	r3, r3
   1b65c:	001a      	movs	r2, r3
   1b65e:	0021      	movs	r1, r4
   1b660:	0028      	movs	r0, r5
   1b662:	4b0d      	ldr	r3, [pc, #52]	; (1b698 <xQueueReceive+0x454>)
   1b664:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b666:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b668:	0018      	movs	r0, r3
   1b66a:	46bd      	mov	sp, r7
   1b66c:	b00a      	add	sp, #40	; 0x28
   1b66e:	bdb0      	pop	{r4, r5, r7, pc}
   1b670:	0001bcf5 	.word	0x0001bcf5
   1b674:	0001c6c9 	.word	0x0001c6c9
   1b678:	0001bde5 	.word	0x0001bde5
   1b67c:	00018689 	.word	0x00018689
   1b680:	000183ed 	.word	0x000183ed
   1b684:	200000b8 	.word	0x200000b8
   1b688:	000184ad 	.word	0x000184ad
   1b68c:	000183ad 	.word	0x000183ad
   1b690:	200000ac 	.word	0x200000ac
   1b694:	0001848d 	.word	0x0001848d
   1b698:	00018de5 	.word	0x00018de5

0001b69c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1b69c:	b5b0      	push	{r4, r5, r7, lr}
   1b69e:	b08a      	sub	sp, #40	; 0x28
   1b6a0:	af00      	add	r7, sp, #0
   1b6a2:	6078      	str	r0, [r7, #4]
   1b6a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1b6a6:	2300      	movs	r3, #0
   1b6a8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b6aa:	687b      	ldr	r3, [r7, #4]
   1b6ac:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1b6ae:	2300      	movs	r3, #0
   1b6b0:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b6b2:	69fb      	ldr	r3, [r7, #28]
   1b6b4:	2b00      	cmp	r3, #0
   1b6b6:	d101      	bne.n	1b6bc <xQueueSemaphoreTake+0x20>
   1b6b8:	b672      	cpsid	i
   1b6ba:	e7fe      	b.n	1b6ba <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b6bc:	69fb      	ldr	r3, [r7, #28]
   1b6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b6c0:	2b00      	cmp	r3, #0
   1b6c2:	d001      	beq.n	1b6c8 <xQueueSemaphoreTake+0x2c>
   1b6c4:	b672      	cpsid	i
   1b6c6:	e7fe      	b.n	1b6c6 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b6c8:	4bcb      	ldr	r3, [pc, #812]	; (1b9f8 <xQueueSemaphoreTake+0x35c>)
   1b6ca:	4798      	blx	r3
   1b6cc:	1e03      	subs	r3, r0, #0
   1b6ce:	d102      	bne.n	1b6d6 <xQueueSemaphoreTake+0x3a>
   1b6d0:	683b      	ldr	r3, [r7, #0]
   1b6d2:	2b00      	cmp	r3, #0
   1b6d4:	d101      	bne.n	1b6da <xQueueSemaphoreTake+0x3e>
   1b6d6:	2301      	movs	r3, #1
   1b6d8:	e000      	b.n	1b6dc <xQueueSemaphoreTake+0x40>
   1b6da:	2300      	movs	r3, #0
   1b6dc:	2b00      	cmp	r3, #0
   1b6de:	d101      	bne.n	1b6e4 <xQueueSemaphoreTake+0x48>
   1b6e0:	b672      	cpsid	i
   1b6e2:	e7fe      	b.n	1b6e2 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1b6e4:	4bc5      	ldr	r3, [pc, #788]	; (1b9fc <xQueueSemaphoreTake+0x360>)
   1b6e6:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1b6e8:	69fb      	ldr	r3, [r7, #28]
   1b6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b6ec:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1b6ee:	69bb      	ldr	r3, [r7, #24]
   1b6f0:	2b00      	cmp	r3, #0
   1b6f2:	d100      	bne.n	1b6f6 <xQueueSemaphoreTake+0x5a>
   1b6f4:	e080      	b.n	1b7f8 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1b6f6:	4bc2      	ldr	r3, [pc, #776]	; (1ba00 <xQueueSemaphoreTake+0x364>)
   1b6f8:	4798      	blx	r3
   1b6fa:	0003      	movs	r3, r0
   1b6fc:	0018      	movs	r0, r3
   1b6fe:	4bc1      	ldr	r3, [pc, #772]	; (1ba04 <xQueueSemaphoreTake+0x368>)
   1b700:	4798      	blx	r3
   1b702:	0003      	movs	r3, r0
   1b704:	001a      	movs	r2, r3
   1b706:	4bc0      	ldr	r3, [pc, #768]	; (1ba08 <xQueueSemaphoreTake+0x36c>)
   1b708:	881b      	ldrh	r3, [r3, #0]
   1b70a:	4013      	ands	r3, r2
   1b70c:	b29b      	uxth	r3, r3
   1b70e:	2b00      	cmp	r3, #0
   1b710:	d029      	beq.n	1b766 <xQueueSemaphoreTake+0xca>
   1b712:	69fb      	ldr	r3, [r7, #28]
   1b714:	0018      	movs	r0, r3
   1b716:	4bbd      	ldr	r3, [pc, #756]	; (1ba0c <xQueueSemaphoreTake+0x370>)
   1b718:	4798      	blx	r3
   1b71a:	0003      	movs	r3, r0
   1b71c:	001a      	movs	r2, r3
   1b71e:	4bba      	ldr	r3, [pc, #744]	; (1ba08 <xQueueSemaphoreTake+0x36c>)
   1b720:	881b      	ldrh	r3, [r3, #0]
   1b722:	4013      	ands	r3, r2
   1b724:	b29b      	uxth	r3, r3
   1b726:	2b00      	cmp	r3, #0
   1b728:	d01d      	beq.n	1b766 <xQueueSemaphoreTake+0xca>
   1b72a:	69fb      	ldr	r3, [r7, #28]
   1b72c:	0018      	movs	r0, r3
   1b72e:	4bb8      	ldr	r3, [pc, #736]	; (1ba10 <xQueueSemaphoreTake+0x374>)
   1b730:	4798      	blx	r3
   1b732:	0003      	movs	r3, r0
   1b734:	001a      	movs	r2, r3
   1b736:	4bb7      	ldr	r3, [pc, #732]	; (1ba14 <xQueueSemaphoreTake+0x378>)
   1b738:	5c9b      	ldrb	r3, [r3, r2]
   1b73a:	3328      	adds	r3, #40	; 0x28
   1b73c:	b2db      	uxtb	r3, r3
   1b73e:	001d      	movs	r5, r3
   1b740:	69fb      	ldr	r3, [r7, #28]
   1b742:	0018      	movs	r0, r3
   1b744:	4bb2      	ldr	r3, [pc, #712]	; (1ba10 <xQueueSemaphoreTake+0x374>)
   1b746:	4798      	blx	r3
   1b748:	0003      	movs	r3, r0
   1b74a:	001a      	movs	r2, r3
   1b74c:	4bb1      	ldr	r3, [pc, #708]	; (1ba14 <xQueueSemaphoreTake+0x378>)
   1b74e:	5c9c      	ldrb	r4, [r3, r2]
   1b750:	69fb      	ldr	r3, [r7, #28]
   1b752:	0018      	movs	r0, r3
   1b754:	4bb0      	ldr	r3, [pc, #704]	; (1ba18 <xQueueSemaphoreTake+0x37c>)
   1b756:	4798      	blx	r3
   1b758:	0003      	movs	r3, r0
   1b75a:	b2db      	uxtb	r3, r3
   1b75c:	001a      	movs	r2, r3
   1b75e:	0021      	movs	r1, r4
   1b760:	0028      	movs	r0, r5
   1b762:	4bae      	ldr	r3, [pc, #696]	; (1ba1c <xQueueSemaphoreTake+0x380>)
   1b764:	4798      	blx	r3
   1b766:	69fb      	ldr	r3, [r7, #28]
   1b768:	0018      	movs	r0, r3
   1b76a:	4ba9      	ldr	r3, [pc, #676]	; (1ba10 <xQueueSemaphoreTake+0x374>)
   1b76c:	4798      	blx	r3
   1b76e:	0003      	movs	r3, r0
   1b770:	001a      	movs	r2, r3
   1b772:	4ba8      	ldr	r3, [pc, #672]	; (1ba14 <xQueueSemaphoreTake+0x378>)
   1b774:	5c9c      	ldrb	r4, [r3, r2]
   1b776:	69fb      	ldr	r3, [r7, #28]
   1b778:	0018      	movs	r0, r3
   1b77a:	4ba7      	ldr	r3, [pc, #668]	; (1ba18 <xQueueSemaphoreTake+0x37c>)
   1b77c:	4798      	blx	r3
   1b77e:	0003      	movs	r3, r0
   1b780:	b2dd      	uxtb	r5, r3
   1b782:	69fb      	ldr	r3, [r7, #28]
   1b784:	0018      	movs	r0, r3
   1b786:	4ba2      	ldr	r3, [pc, #648]	; (1ba10 <xQueueSemaphoreTake+0x374>)
   1b788:	4798      	blx	r3
   1b78a:	0003      	movs	r3, r0
   1b78c:	001a      	movs	r2, r3
   1b78e:	4ba1      	ldr	r3, [pc, #644]	; (1ba14 <xQueueSemaphoreTake+0x378>)
   1b790:	5c9b      	ldrb	r3, [r3, r2]
   1b792:	2b02      	cmp	r3, #2
   1b794:	d108      	bne.n	1b7a8 <xQueueSemaphoreTake+0x10c>
   1b796:	4b9a      	ldr	r3, [pc, #616]	; (1ba00 <xQueueSemaphoreTake+0x364>)
   1b798:	4798      	blx	r3
   1b79a:	0003      	movs	r3, r0
   1b79c:	0018      	movs	r0, r3
   1b79e:	4ba0      	ldr	r3, [pc, #640]	; (1ba20 <xQueueSemaphoreTake+0x384>)
   1b7a0:	4798      	blx	r3
   1b7a2:	0003      	movs	r3, r0
   1b7a4:	b2db      	uxtb	r3, r3
   1b7a6:	e004      	b.n	1b7b2 <xQueueSemaphoreTake+0x116>
   1b7a8:	69fb      	ldr	r3, [r7, #28]
   1b7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b7ac:	b2db      	uxtb	r3, r3
   1b7ae:	3b01      	subs	r3, #1
   1b7b0:	b2db      	uxtb	r3, r3
   1b7b2:	001a      	movs	r2, r3
   1b7b4:	0029      	movs	r1, r5
   1b7b6:	0020      	movs	r0, r4
   1b7b8:	4b9a      	ldr	r3, [pc, #616]	; (1ba24 <xQueueSemaphoreTake+0x388>)
   1b7ba:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1b7bc:	69bb      	ldr	r3, [r7, #24]
   1b7be:	1e5a      	subs	r2, r3, #1
   1b7c0:	69fb      	ldr	r3, [r7, #28]
   1b7c2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b7c4:	69fb      	ldr	r3, [r7, #28]
   1b7c6:	681b      	ldr	r3, [r3, #0]
   1b7c8:	2b00      	cmp	r3, #0
   1b7ca:	d104      	bne.n	1b7d6 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1b7cc:	4b96      	ldr	r3, [pc, #600]	; (1ba28 <xQueueSemaphoreTake+0x38c>)
   1b7ce:	4798      	blx	r3
   1b7d0:	0002      	movs	r2, r0
   1b7d2:	69fb      	ldr	r3, [r7, #28]
   1b7d4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b7d6:	69fb      	ldr	r3, [r7, #28]
   1b7d8:	691b      	ldr	r3, [r3, #16]
   1b7da:	2b00      	cmp	r3, #0
   1b7dc:	d008      	beq.n	1b7f0 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b7de:	69fb      	ldr	r3, [r7, #28]
   1b7e0:	3310      	adds	r3, #16
   1b7e2:	0018      	movs	r0, r3
   1b7e4:	4b91      	ldr	r3, [pc, #580]	; (1ba2c <xQueueSemaphoreTake+0x390>)
   1b7e6:	4798      	blx	r3
   1b7e8:	1e03      	subs	r3, r0, #0
   1b7ea:	d001      	beq.n	1b7f0 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b7ec:	4b90      	ldr	r3, [pc, #576]	; (1ba30 <xQueueSemaphoreTake+0x394>)
   1b7ee:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1b7f0:	4b90      	ldr	r3, [pc, #576]	; (1ba34 <xQueueSemaphoreTake+0x398>)
   1b7f2:	4798      	blx	r3
				return pdPASS;
   1b7f4:	2301      	movs	r3, #1
   1b7f6:	e18b      	b.n	1bb10 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b7f8:	683b      	ldr	r3, [r7, #0]
   1b7fa:	2b00      	cmp	r3, #0
   1b7fc:	d140      	bne.n	1b880 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1b7fe:	6a3b      	ldr	r3, [r7, #32]
   1b800:	2b00      	cmp	r3, #0
   1b802:	d001      	beq.n	1b808 <xQueueSemaphoreTake+0x16c>
   1b804:	b672      	cpsid	i
   1b806:	e7fe      	b.n	1b806 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1b808:	4b8a      	ldr	r3, [pc, #552]	; (1ba34 <xQueueSemaphoreTake+0x398>)
   1b80a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b80c:	4b7c      	ldr	r3, [pc, #496]	; (1ba00 <xQueueSemaphoreTake+0x364>)
   1b80e:	4798      	blx	r3
   1b810:	0003      	movs	r3, r0
   1b812:	0018      	movs	r0, r3
   1b814:	4b7b      	ldr	r3, [pc, #492]	; (1ba04 <xQueueSemaphoreTake+0x368>)
   1b816:	4798      	blx	r3
   1b818:	0003      	movs	r3, r0
   1b81a:	001a      	movs	r2, r3
   1b81c:	4b7a      	ldr	r3, [pc, #488]	; (1ba08 <xQueueSemaphoreTake+0x36c>)
   1b81e:	881b      	ldrh	r3, [r3, #0]
   1b820:	4013      	ands	r3, r2
   1b822:	b29b      	uxth	r3, r3
   1b824:	2b00      	cmp	r3, #0
   1b826:	d029      	beq.n	1b87c <xQueueSemaphoreTake+0x1e0>
   1b828:	69fb      	ldr	r3, [r7, #28]
   1b82a:	0018      	movs	r0, r3
   1b82c:	4b77      	ldr	r3, [pc, #476]	; (1ba0c <xQueueSemaphoreTake+0x370>)
   1b82e:	4798      	blx	r3
   1b830:	0003      	movs	r3, r0
   1b832:	001a      	movs	r2, r3
   1b834:	4b74      	ldr	r3, [pc, #464]	; (1ba08 <xQueueSemaphoreTake+0x36c>)
   1b836:	881b      	ldrh	r3, [r3, #0]
   1b838:	4013      	ands	r3, r2
   1b83a:	b29b      	uxth	r3, r3
   1b83c:	2b00      	cmp	r3, #0
   1b83e:	d01d      	beq.n	1b87c <xQueueSemaphoreTake+0x1e0>
   1b840:	69fb      	ldr	r3, [r7, #28]
   1b842:	0018      	movs	r0, r3
   1b844:	4b72      	ldr	r3, [pc, #456]	; (1ba10 <xQueueSemaphoreTake+0x374>)
   1b846:	4798      	blx	r3
   1b848:	0003      	movs	r3, r0
   1b84a:	001a      	movs	r2, r3
   1b84c:	4b71      	ldr	r3, [pc, #452]	; (1ba14 <xQueueSemaphoreTake+0x378>)
   1b84e:	5c9b      	ldrb	r3, [r3, r2]
   1b850:	3350      	adds	r3, #80	; 0x50
   1b852:	b2db      	uxtb	r3, r3
   1b854:	001d      	movs	r5, r3
   1b856:	69fb      	ldr	r3, [r7, #28]
   1b858:	0018      	movs	r0, r3
   1b85a:	4b6d      	ldr	r3, [pc, #436]	; (1ba10 <xQueueSemaphoreTake+0x374>)
   1b85c:	4798      	blx	r3
   1b85e:	0003      	movs	r3, r0
   1b860:	001a      	movs	r2, r3
   1b862:	4b6c      	ldr	r3, [pc, #432]	; (1ba14 <xQueueSemaphoreTake+0x378>)
   1b864:	5c9c      	ldrb	r4, [r3, r2]
   1b866:	69fb      	ldr	r3, [r7, #28]
   1b868:	0018      	movs	r0, r3
   1b86a:	4b6b      	ldr	r3, [pc, #428]	; (1ba18 <xQueueSemaphoreTake+0x37c>)
   1b86c:	4798      	blx	r3
   1b86e:	0003      	movs	r3, r0
   1b870:	b2db      	uxtb	r3, r3
   1b872:	001a      	movs	r2, r3
   1b874:	0021      	movs	r1, r4
   1b876:	0028      	movs	r0, r5
   1b878:	4b68      	ldr	r3, [pc, #416]	; (1ba1c <xQueueSemaphoreTake+0x380>)
   1b87a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1b87c:	2300      	movs	r3, #0
   1b87e:	e147      	b.n	1bb10 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b882:	2b00      	cmp	r3, #0
   1b884:	d106      	bne.n	1b894 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b886:	230c      	movs	r3, #12
   1b888:	18fb      	adds	r3, r7, r3
   1b88a:	0018      	movs	r0, r3
   1b88c:	4b6a      	ldr	r3, [pc, #424]	; (1ba38 <xQueueSemaphoreTake+0x39c>)
   1b88e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b890:	2301      	movs	r3, #1
   1b892:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b894:	4b67      	ldr	r3, [pc, #412]	; (1ba34 <xQueueSemaphoreTake+0x398>)
   1b896:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b898:	4b68      	ldr	r3, [pc, #416]	; (1ba3c <xQueueSemaphoreTake+0x3a0>)
   1b89a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b89c:	4b57      	ldr	r3, [pc, #348]	; (1b9fc <xQueueSemaphoreTake+0x360>)
   1b89e:	4798      	blx	r3
   1b8a0:	69fb      	ldr	r3, [r7, #28]
   1b8a2:	2244      	movs	r2, #68	; 0x44
   1b8a4:	5c9b      	ldrb	r3, [r3, r2]
   1b8a6:	b25b      	sxtb	r3, r3
   1b8a8:	3301      	adds	r3, #1
   1b8aa:	d103      	bne.n	1b8b4 <xQueueSemaphoreTake+0x218>
   1b8ac:	69fb      	ldr	r3, [r7, #28]
   1b8ae:	2244      	movs	r2, #68	; 0x44
   1b8b0:	2100      	movs	r1, #0
   1b8b2:	5499      	strb	r1, [r3, r2]
   1b8b4:	69fb      	ldr	r3, [r7, #28]
   1b8b6:	2245      	movs	r2, #69	; 0x45
   1b8b8:	5c9b      	ldrb	r3, [r3, r2]
   1b8ba:	b25b      	sxtb	r3, r3
   1b8bc:	3301      	adds	r3, #1
   1b8be:	d103      	bne.n	1b8c8 <xQueueSemaphoreTake+0x22c>
   1b8c0:	69fb      	ldr	r3, [r7, #28]
   1b8c2:	2245      	movs	r2, #69	; 0x45
   1b8c4:	2100      	movs	r1, #0
   1b8c6:	5499      	strb	r1, [r3, r2]
   1b8c8:	4b5a      	ldr	r3, [pc, #360]	; (1ba34 <xQueueSemaphoreTake+0x398>)
   1b8ca:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b8cc:	003a      	movs	r2, r7
   1b8ce:	230c      	movs	r3, #12
   1b8d0:	18fb      	adds	r3, r7, r3
   1b8d2:	0011      	movs	r1, r2
   1b8d4:	0018      	movs	r0, r3
   1b8d6:	4b5a      	ldr	r3, [pc, #360]	; (1ba40 <xQueueSemaphoreTake+0x3a4>)
   1b8d8:	4798      	blx	r3
   1b8da:	1e03      	subs	r3, r0, #0
   1b8dc:	d000      	beq.n	1b8e0 <xQueueSemaphoreTake+0x244>
   1b8de:	e0bd      	b.n	1ba5c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b8e0:	69fb      	ldr	r3, [r7, #28]
   1b8e2:	0018      	movs	r0, r3
   1b8e4:	4b57      	ldr	r3, [pc, #348]	; (1ba44 <xQueueSemaphoreTake+0x3a8>)
   1b8e6:	4798      	blx	r3
   1b8e8:	1e03      	subs	r3, r0, #0
   1b8ea:	d100      	bne.n	1b8ee <xQueueSemaphoreTake+0x252>
   1b8ec:	e07c      	b.n	1b9e8 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1b8ee:	4b44      	ldr	r3, [pc, #272]	; (1ba00 <xQueueSemaphoreTake+0x364>)
   1b8f0:	4798      	blx	r3
   1b8f2:	0003      	movs	r3, r0
   1b8f4:	0018      	movs	r0, r3
   1b8f6:	4b43      	ldr	r3, [pc, #268]	; (1ba04 <xQueueSemaphoreTake+0x368>)
   1b8f8:	4798      	blx	r3
   1b8fa:	0003      	movs	r3, r0
   1b8fc:	001a      	movs	r2, r3
   1b8fe:	4b42      	ldr	r3, [pc, #264]	; (1ba08 <xQueueSemaphoreTake+0x36c>)
   1b900:	881b      	ldrh	r3, [r3, #0]
   1b902:	4013      	ands	r3, r2
   1b904:	b29b      	uxth	r3, r3
   1b906:	2b00      	cmp	r3, #0
   1b908:	d029      	beq.n	1b95e <xQueueSemaphoreTake+0x2c2>
   1b90a:	69fb      	ldr	r3, [r7, #28]
   1b90c:	0018      	movs	r0, r3
   1b90e:	4b3f      	ldr	r3, [pc, #252]	; (1ba0c <xQueueSemaphoreTake+0x370>)
   1b910:	4798      	blx	r3
   1b912:	0003      	movs	r3, r0
   1b914:	001a      	movs	r2, r3
   1b916:	4b3c      	ldr	r3, [pc, #240]	; (1ba08 <xQueueSemaphoreTake+0x36c>)
   1b918:	881b      	ldrh	r3, [r3, #0]
   1b91a:	4013      	ands	r3, r2
   1b91c:	b29b      	uxth	r3, r3
   1b91e:	2b00      	cmp	r3, #0
   1b920:	d01d      	beq.n	1b95e <xQueueSemaphoreTake+0x2c2>
   1b922:	69fb      	ldr	r3, [r7, #28]
   1b924:	0018      	movs	r0, r3
   1b926:	4b3a      	ldr	r3, [pc, #232]	; (1ba10 <xQueueSemaphoreTake+0x374>)
   1b928:	4798      	blx	r3
   1b92a:	0003      	movs	r3, r0
   1b92c:	001a      	movs	r2, r3
   1b92e:	4b39      	ldr	r3, [pc, #228]	; (1ba14 <xQueueSemaphoreTake+0x378>)
   1b930:	5c9b      	ldrb	r3, [r3, r2]
   1b932:	3368      	adds	r3, #104	; 0x68
   1b934:	b2db      	uxtb	r3, r3
   1b936:	001d      	movs	r5, r3
   1b938:	69fb      	ldr	r3, [r7, #28]
   1b93a:	0018      	movs	r0, r3
   1b93c:	4b34      	ldr	r3, [pc, #208]	; (1ba10 <xQueueSemaphoreTake+0x374>)
   1b93e:	4798      	blx	r3
   1b940:	0003      	movs	r3, r0
   1b942:	001a      	movs	r2, r3
   1b944:	4b33      	ldr	r3, [pc, #204]	; (1ba14 <xQueueSemaphoreTake+0x378>)
   1b946:	5c9c      	ldrb	r4, [r3, r2]
   1b948:	69fb      	ldr	r3, [r7, #28]
   1b94a:	0018      	movs	r0, r3
   1b94c:	4b32      	ldr	r3, [pc, #200]	; (1ba18 <xQueueSemaphoreTake+0x37c>)
   1b94e:	4798      	blx	r3
   1b950:	0003      	movs	r3, r0
   1b952:	b2db      	uxtb	r3, r3
   1b954:	001a      	movs	r2, r3
   1b956:	0021      	movs	r1, r4
   1b958:	0028      	movs	r0, r5
   1b95a:	4b30      	ldr	r3, [pc, #192]	; (1ba1c <xQueueSemaphoreTake+0x380>)
   1b95c:	4798      	blx	r3
   1b95e:	69fb      	ldr	r3, [r7, #28]
   1b960:	0018      	movs	r0, r3
   1b962:	4b2b      	ldr	r3, [pc, #172]	; (1ba10 <xQueueSemaphoreTake+0x374>)
   1b964:	4798      	blx	r3
   1b966:	0003      	movs	r3, r0
   1b968:	001a      	movs	r2, r3
   1b96a:	4b2a      	ldr	r3, [pc, #168]	; (1ba14 <xQueueSemaphoreTake+0x378>)
   1b96c:	5c9b      	ldrb	r3, [r3, r2]
   1b96e:	2b02      	cmp	r3, #2
   1b970:	d018      	beq.n	1b9a4 <xQueueSemaphoreTake+0x308>
   1b972:	4b23      	ldr	r3, [pc, #140]	; (1ba00 <xQueueSemaphoreTake+0x364>)
   1b974:	4798      	blx	r3
   1b976:	0003      	movs	r3, r0
   1b978:	0018      	movs	r0, r3
   1b97a:	4b22      	ldr	r3, [pc, #136]	; (1ba04 <xQueueSemaphoreTake+0x368>)
   1b97c:	4798      	blx	r3
   1b97e:	0003      	movs	r3, r0
   1b980:	001a      	movs	r2, r3
   1b982:	4b21      	ldr	r3, [pc, #132]	; (1ba08 <xQueueSemaphoreTake+0x36c>)
   1b984:	881b      	ldrh	r3, [r3, #0]
   1b986:	4013      	ands	r3, r2
   1b988:	b29b      	uxth	r3, r3
   1b98a:	2b00      	cmp	r3, #0
   1b98c:	d00a      	beq.n	1b9a4 <xQueueSemaphoreTake+0x308>
   1b98e:	4b1c      	ldr	r3, [pc, #112]	; (1ba00 <xQueueSemaphoreTake+0x364>)
   1b990:	4798      	blx	r3
   1b992:	0003      	movs	r3, r0
   1b994:	0018      	movs	r0, r3
   1b996:	4b22      	ldr	r3, [pc, #136]	; (1ba20 <xQueueSemaphoreTake+0x384>)
   1b998:	4798      	blx	r3
   1b99a:	0003      	movs	r3, r0
   1b99c:	b2db      	uxtb	r3, r3
   1b99e:	0018      	movs	r0, r3
   1b9a0:	4b29      	ldr	r3, [pc, #164]	; (1ba48 <xQueueSemaphoreTake+0x3ac>)
   1b9a2:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b9a4:	69fb      	ldr	r3, [r7, #28]
   1b9a6:	681b      	ldr	r3, [r3, #0]
   1b9a8:	2b00      	cmp	r3, #0
   1b9aa:	d10a      	bne.n	1b9c2 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1b9ac:	4b13      	ldr	r3, [pc, #76]	; (1b9fc <xQueueSemaphoreTake+0x360>)
   1b9ae:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1b9b0:	69fb      	ldr	r3, [r7, #28]
   1b9b2:	685b      	ldr	r3, [r3, #4]
   1b9b4:	0018      	movs	r0, r3
   1b9b6:	4b25      	ldr	r3, [pc, #148]	; (1ba4c <xQueueSemaphoreTake+0x3b0>)
   1b9b8:	4798      	blx	r3
   1b9ba:	0003      	movs	r3, r0
   1b9bc:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1b9be:	4b1d      	ldr	r3, [pc, #116]	; (1ba34 <xQueueSemaphoreTake+0x398>)
   1b9c0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b9c2:	69fb      	ldr	r3, [r7, #28]
   1b9c4:	3324      	adds	r3, #36	; 0x24
   1b9c6:	683a      	ldr	r2, [r7, #0]
   1b9c8:	0011      	movs	r1, r2
   1b9ca:	0018      	movs	r0, r3
   1b9cc:	4b20      	ldr	r3, [pc, #128]	; (1ba50 <xQueueSemaphoreTake+0x3b4>)
   1b9ce:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b9d0:	69fb      	ldr	r3, [r7, #28]
   1b9d2:	0018      	movs	r0, r3
   1b9d4:	4b1f      	ldr	r3, [pc, #124]	; (1ba54 <xQueueSemaphoreTake+0x3b8>)
   1b9d6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b9d8:	4b1f      	ldr	r3, [pc, #124]	; (1ba58 <xQueueSemaphoreTake+0x3bc>)
   1b9da:	4798      	blx	r3
   1b9dc:	1e03      	subs	r3, r0, #0
   1b9de:	d000      	beq.n	1b9e2 <xQueueSemaphoreTake+0x346>
   1b9e0:	e680      	b.n	1b6e4 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1b9e2:	4b13      	ldr	r3, [pc, #76]	; (1ba30 <xQueueSemaphoreTake+0x394>)
   1b9e4:	4798      	blx	r3
   1b9e6:	e67d      	b.n	1b6e4 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1b9e8:	69fb      	ldr	r3, [r7, #28]
   1b9ea:	0018      	movs	r0, r3
   1b9ec:	4b19      	ldr	r3, [pc, #100]	; (1ba54 <xQueueSemaphoreTake+0x3b8>)
   1b9ee:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b9f0:	4b19      	ldr	r3, [pc, #100]	; (1ba58 <xQueueSemaphoreTake+0x3bc>)
   1b9f2:	4798      	blx	r3
   1b9f4:	e676      	b.n	1b6e4 <xQueueSemaphoreTake+0x48>
   1b9f6:	46c0      	nop			; (mov r8, r8)
   1b9f8:	0001d119 	.word	0x0001d119
   1b9fc:	0001a3f9 	.word	0x0001a3f9
   1ba00:	00018689 	.word	0x00018689
   1ba04:	000183ed 	.word	0x000183ed
   1ba08:	200000b8 	.word	0x200000b8
   1ba0c:	000184ad 	.word	0x000184ad
   1ba10:	000183ad 	.word	0x000183ad
   1ba14:	200000ac 	.word	0x200000ac
   1ba18:	0001848d 	.word	0x0001848d
   1ba1c:	00018de5 	.word	0x00018de5
   1ba20:	000183cd 	.word	0x000183cd
   1ba24:	00019441 	.word	0x00019441
   1ba28:	0001d5e5 	.word	0x0001d5e5
   1ba2c:	0001cc89 	.word	0x0001cc89
   1ba30:	0001a3e1 	.word	0x0001a3e1
   1ba34:	0001a41d 	.word	0x0001a41d
   1ba38:	0001cdc9 	.word	0x0001cdc9
   1ba3c:	0001c6b1 	.word	0x0001c6b1
   1ba40:	0001cdf1 	.word	0x0001cdf1
   1ba44:	0001bde5 	.word	0x0001bde5
   1ba48:	0001957d 	.word	0x0001957d
   1ba4c:	0001d151 	.word	0x0001d151
   1ba50:	0001cb65 	.word	0x0001cb65
   1ba54:	0001bcf5 	.word	0x0001bcf5
   1ba58:	0001c6c9 	.word	0x0001c6c9
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1ba5c:	69fb      	ldr	r3, [r7, #28]
   1ba5e:	0018      	movs	r0, r3
   1ba60:	4b2d      	ldr	r3, [pc, #180]	; (1bb18 <xQueueSemaphoreTake+0x47c>)
   1ba62:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1ba64:	4b2d      	ldr	r3, [pc, #180]	; (1bb1c <xQueueSemaphoreTake+0x480>)
   1ba66:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1ba68:	69fb      	ldr	r3, [r7, #28]
   1ba6a:	0018      	movs	r0, r3
   1ba6c:	4b2c      	ldr	r3, [pc, #176]	; (1bb20 <xQueueSemaphoreTake+0x484>)
   1ba6e:	4798      	blx	r3
   1ba70:	1e03      	subs	r3, r0, #0
   1ba72:	d100      	bne.n	1ba76 <xQueueSemaphoreTake+0x3da>
   1ba74:	e636      	b.n	1b6e4 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1ba76:	6a3b      	ldr	r3, [r7, #32]
   1ba78:	2b00      	cmp	r3, #0
   1ba7a:	d010      	beq.n	1ba9e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1ba7c:	4b29      	ldr	r3, [pc, #164]	; (1bb24 <xQueueSemaphoreTake+0x488>)
   1ba7e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1ba80:	69fb      	ldr	r3, [r7, #28]
   1ba82:	0018      	movs	r0, r3
   1ba84:	4b28      	ldr	r3, [pc, #160]	; (1bb28 <xQueueSemaphoreTake+0x48c>)
   1ba86:	4798      	blx	r3
   1ba88:	0003      	movs	r3, r0
   1ba8a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1ba8c:	69fb      	ldr	r3, [r7, #28]
   1ba8e:	685b      	ldr	r3, [r3, #4]
   1ba90:	697a      	ldr	r2, [r7, #20]
   1ba92:	0011      	movs	r1, r2
   1ba94:	0018      	movs	r0, r3
   1ba96:	4b25      	ldr	r3, [pc, #148]	; (1bb2c <xQueueSemaphoreTake+0x490>)
   1ba98:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1ba9a:	4b25      	ldr	r3, [pc, #148]	; (1bb30 <xQueueSemaphoreTake+0x494>)
   1ba9c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1ba9e:	4b25      	ldr	r3, [pc, #148]	; (1bb34 <xQueueSemaphoreTake+0x498>)
   1baa0:	4798      	blx	r3
   1baa2:	0003      	movs	r3, r0
   1baa4:	0018      	movs	r0, r3
   1baa6:	4b24      	ldr	r3, [pc, #144]	; (1bb38 <xQueueSemaphoreTake+0x49c>)
   1baa8:	4798      	blx	r3
   1baaa:	0003      	movs	r3, r0
   1baac:	001a      	movs	r2, r3
   1baae:	4b23      	ldr	r3, [pc, #140]	; (1bb3c <xQueueSemaphoreTake+0x4a0>)
   1bab0:	881b      	ldrh	r3, [r3, #0]
   1bab2:	4013      	ands	r3, r2
   1bab4:	b29b      	uxth	r3, r3
   1bab6:	2b00      	cmp	r3, #0
   1bab8:	d029      	beq.n	1bb0e <xQueueSemaphoreTake+0x472>
   1baba:	69fb      	ldr	r3, [r7, #28]
   1babc:	0018      	movs	r0, r3
   1babe:	4b20      	ldr	r3, [pc, #128]	; (1bb40 <xQueueSemaphoreTake+0x4a4>)
   1bac0:	4798      	blx	r3
   1bac2:	0003      	movs	r3, r0
   1bac4:	001a      	movs	r2, r3
   1bac6:	4b1d      	ldr	r3, [pc, #116]	; (1bb3c <xQueueSemaphoreTake+0x4a0>)
   1bac8:	881b      	ldrh	r3, [r3, #0]
   1baca:	4013      	ands	r3, r2
   1bacc:	b29b      	uxth	r3, r3
   1bace:	2b00      	cmp	r3, #0
   1bad0:	d01d      	beq.n	1bb0e <xQueueSemaphoreTake+0x472>
   1bad2:	69fb      	ldr	r3, [r7, #28]
   1bad4:	0018      	movs	r0, r3
   1bad6:	4b1b      	ldr	r3, [pc, #108]	; (1bb44 <xQueueSemaphoreTake+0x4a8>)
   1bad8:	4798      	blx	r3
   1bada:	0003      	movs	r3, r0
   1badc:	001a      	movs	r2, r3
   1bade:	4b1a      	ldr	r3, [pc, #104]	; (1bb48 <xQueueSemaphoreTake+0x4ac>)
   1bae0:	5c9b      	ldrb	r3, [r3, r2]
   1bae2:	3350      	adds	r3, #80	; 0x50
   1bae4:	b2db      	uxtb	r3, r3
   1bae6:	001d      	movs	r5, r3
   1bae8:	69fb      	ldr	r3, [r7, #28]
   1baea:	0018      	movs	r0, r3
   1baec:	4b15      	ldr	r3, [pc, #84]	; (1bb44 <xQueueSemaphoreTake+0x4a8>)
   1baee:	4798      	blx	r3
   1baf0:	0003      	movs	r3, r0
   1baf2:	001a      	movs	r2, r3
   1baf4:	4b14      	ldr	r3, [pc, #80]	; (1bb48 <xQueueSemaphoreTake+0x4ac>)
   1baf6:	5c9c      	ldrb	r4, [r3, r2]
   1baf8:	69fb      	ldr	r3, [r7, #28]
   1bafa:	0018      	movs	r0, r3
   1bafc:	4b13      	ldr	r3, [pc, #76]	; (1bb4c <xQueueSemaphoreTake+0x4b0>)
   1bafe:	4798      	blx	r3
   1bb00:	0003      	movs	r3, r0
   1bb02:	b2db      	uxtb	r3, r3
   1bb04:	001a      	movs	r2, r3
   1bb06:	0021      	movs	r1, r4
   1bb08:	0028      	movs	r0, r5
   1bb0a:	4b11      	ldr	r3, [pc, #68]	; (1bb50 <xQueueSemaphoreTake+0x4b4>)
   1bb0c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1bb0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1bb10:	0018      	movs	r0, r3
   1bb12:	46bd      	mov	sp, r7
   1bb14:	b00a      	add	sp, #40	; 0x28
   1bb16:	bdb0      	pop	{r4, r5, r7, pc}
   1bb18:	0001bcf5 	.word	0x0001bcf5
   1bb1c:	0001c6c9 	.word	0x0001c6c9
   1bb20:	0001bde5 	.word	0x0001bde5
   1bb24:	0001a3f9 	.word	0x0001a3f9
   1bb28:	0001bb97 	.word	0x0001bb97
   1bb2c:	0001d449 	.word	0x0001d449
   1bb30:	0001a41d 	.word	0x0001a41d
   1bb34:	00018689 	.word	0x00018689
   1bb38:	000183ed 	.word	0x000183ed
   1bb3c:	200000b8 	.word	0x200000b8
   1bb40:	000184ad 	.word	0x000184ad
   1bb44:	000183ad 	.word	0x000183ad
   1bb48:	200000ac 	.word	0x200000ac
   1bb4c:	0001848d 	.word	0x0001848d
   1bb50:	00018de5 	.word	0x00018de5

0001bb54 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1bb54:	b580      	push	{r7, lr}
   1bb56:	b082      	sub	sp, #8
   1bb58:	af00      	add	r7, sp, #0
   1bb5a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1bb5c:	687b      	ldr	r3, [r7, #4]
   1bb5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1bb60:	0018      	movs	r0, r3
   1bb62:	46bd      	mov	sp, r7
   1bb64:	b002      	add	sp, #8
   1bb66:	bd80      	pop	{r7, pc}

0001bb68 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1bb68:	b580      	push	{r7, lr}
   1bb6a:	b082      	sub	sp, #8
   1bb6c:	af00      	add	r7, sp, #0
   1bb6e:	6078      	str	r0, [r7, #4]
   1bb70:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1bb72:	687b      	ldr	r3, [r7, #4]
   1bb74:	683a      	ldr	r2, [r7, #0]
   1bb76:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1bb78:	46c0      	nop			; (mov r8, r8)
   1bb7a:	46bd      	mov	sp, r7
   1bb7c:	b002      	add	sp, #8
   1bb7e:	bd80      	pop	{r7, pc}

0001bb80 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1bb80:	b580      	push	{r7, lr}
   1bb82:	b082      	sub	sp, #8
   1bb84:	af00      	add	r7, sp, #0
   1bb86:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1bb88:	687b      	ldr	r3, [r7, #4]
   1bb8a:	2250      	movs	r2, #80	; 0x50
   1bb8c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1bb8e:	0018      	movs	r0, r3
   1bb90:	46bd      	mov	sp, r7
   1bb92:	b002      	add	sp, #8
   1bb94:	bd80      	pop	{r7, pc}

0001bb96 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1bb96:	b580      	push	{r7, lr}
   1bb98:	b084      	sub	sp, #16
   1bb9a:	af00      	add	r7, sp, #0
   1bb9c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1bb9e:	687b      	ldr	r3, [r7, #4]
   1bba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bba2:	2b00      	cmp	r3, #0
   1bba4:	d006      	beq.n	1bbb4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1bba6:	687b      	ldr	r3, [r7, #4]
   1bba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bbaa:	681b      	ldr	r3, [r3, #0]
   1bbac:	2205      	movs	r2, #5
   1bbae:	1ad3      	subs	r3, r2, r3
   1bbb0:	60fb      	str	r3, [r7, #12]
   1bbb2:	e001      	b.n	1bbb8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1bbb4:	2300      	movs	r3, #0
   1bbb6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1bbb8:	68fb      	ldr	r3, [r7, #12]
	}
   1bbba:	0018      	movs	r0, r3
   1bbbc:	46bd      	mov	sp, r7
   1bbbe:	b004      	add	sp, #16
   1bbc0:	bd80      	pop	{r7, pc}
	...

0001bbc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1bbc4:	b580      	push	{r7, lr}
   1bbc6:	b086      	sub	sp, #24
   1bbc8:	af00      	add	r7, sp, #0
   1bbca:	60f8      	str	r0, [r7, #12]
   1bbcc:	60b9      	str	r1, [r7, #8]
   1bbce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1bbd0:	2300      	movs	r3, #0
   1bbd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1bbd4:	68fb      	ldr	r3, [r7, #12]
   1bbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bbd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1bbda:	68fb      	ldr	r3, [r7, #12]
   1bbdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bbde:	2b00      	cmp	r3, #0
   1bbe0:	d10e      	bne.n	1bc00 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1bbe2:	68fb      	ldr	r3, [r7, #12]
   1bbe4:	681b      	ldr	r3, [r3, #0]
   1bbe6:	2b00      	cmp	r3, #0
   1bbe8:	d14e      	bne.n	1bc88 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1bbea:	68fb      	ldr	r3, [r7, #12]
   1bbec:	685b      	ldr	r3, [r3, #4]
   1bbee:	0018      	movs	r0, r3
   1bbf0:	4b2a      	ldr	r3, [pc, #168]	; (1bc9c <prvCopyDataToQueue+0xd8>)
   1bbf2:	4798      	blx	r3
   1bbf4:	0003      	movs	r3, r0
   1bbf6:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1bbf8:	68fb      	ldr	r3, [r7, #12]
   1bbfa:	2200      	movs	r2, #0
   1bbfc:	605a      	str	r2, [r3, #4]
   1bbfe:	e043      	b.n	1bc88 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1bc00:	687b      	ldr	r3, [r7, #4]
   1bc02:	2b00      	cmp	r3, #0
   1bc04:	d119      	bne.n	1bc3a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1bc06:	68fb      	ldr	r3, [r7, #12]
   1bc08:	6898      	ldr	r0, [r3, #8]
   1bc0a:	68fb      	ldr	r3, [r7, #12]
   1bc0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1bc0e:	68bb      	ldr	r3, [r7, #8]
   1bc10:	0019      	movs	r1, r3
   1bc12:	4b23      	ldr	r3, [pc, #140]	; (1bca0 <prvCopyDataToQueue+0xdc>)
   1bc14:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1bc16:	68fb      	ldr	r3, [r7, #12]
   1bc18:	689a      	ldr	r2, [r3, #8]
   1bc1a:	68fb      	ldr	r3, [r7, #12]
   1bc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bc1e:	18d2      	adds	r2, r2, r3
   1bc20:	68fb      	ldr	r3, [r7, #12]
   1bc22:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1bc24:	68fb      	ldr	r3, [r7, #12]
   1bc26:	689a      	ldr	r2, [r3, #8]
   1bc28:	68fb      	ldr	r3, [r7, #12]
   1bc2a:	685b      	ldr	r3, [r3, #4]
   1bc2c:	429a      	cmp	r2, r3
   1bc2e:	d32b      	bcc.n	1bc88 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1bc30:	68fb      	ldr	r3, [r7, #12]
   1bc32:	681a      	ldr	r2, [r3, #0]
   1bc34:	68fb      	ldr	r3, [r7, #12]
   1bc36:	609a      	str	r2, [r3, #8]
   1bc38:	e026      	b.n	1bc88 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bc3a:	68fb      	ldr	r3, [r7, #12]
   1bc3c:	68d8      	ldr	r0, [r3, #12]
   1bc3e:	68fb      	ldr	r3, [r7, #12]
   1bc40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1bc42:	68bb      	ldr	r3, [r7, #8]
   1bc44:	0019      	movs	r1, r3
   1bc46:	4b16      	ldr	r3, [pc, #88]	; (1bca0 <prvCopyDataToQueue+0xdc>)
   1bc48:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1bc4a:	68fb      	ldr	r3, [r7, #12]
   1bc4c:	68da      	ldr	r2, [r3, #12]
   1bc4e:	68fb      	ldr	r3, [r7, #12]
   1bc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bc52:	425b      	negs	r3, r3
   1bc54:	18d2      	adds	r2, r2, r3
   1bc56:	68fb      	ldr	r3, [r7, #12]
   1bc58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1bc5a:	68fb      	ldr	r3, [r7, #12]
   1bc5c:	68da      	ldr	r2, [r3, #12]
   1bc5e:	68fb      	ldr	r3, [r7, #12]
   1bc60:	681b      	ldr	r3, [r3, #0]
   1bc62:	429a      	cmp	r2, r3
   1bc64:	d207      	bcs.n	1bc76 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1bc66:	68fb      	ldr	r3, [r7, #12]
   1bc68:	685a      	ldr	r2, [r3, #4]
   1bc6a:	68fb      	ldr	r3, [r7, #12]
   1bc6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bc6e:	425b      	negs	r3, r3
   1bc70:	18d2      	adds	r2, r2, r3
   1bc72:	68fb      	ldr	r3, [r7, #12]
   1bc74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1bc76:	687b      	ldr	r3, [r7, #4]
   1bc78:	2b02      	cmp	r3, #2
   1bc7a:	d105      	bne.n	1bc88 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1bc7c:	693b      	ldr	r3, [r7, #16]
   1bc7e:	2b00      	cmp	r3, #0
   1bc80:	d002      	beq.n	1bc88 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1bc82:	693b      	ldr	r3, [r7, #16]
   1bc84:	3b01      	subs	r3, #1
   1bc86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1bc88:	693b      	ldr	r3, [r7, #16]
   1bc8a:	1c5a      	adds	r2, r3, #1
   1bc8c:	68fb      	ldr	r3, [r7, #12]
   1bc8e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1bc90:	697b      	ldr	r3, [r7, #20]
}
   1bc92:	0018      	movs	r0, r3
   1bc94:	46bd      	mov	sp, r7
   1bc96:	b006      	add	sp, #24
   1bc98:	bd80      	pop	{r7, pc}
   1bc9a:	46c0      	nop			; (mov r8, r8)
   1bc9c:	0001d2e1 	.word	0x0001d2e1
   1bca0:	00034869 	.word	0x00034869

0001bca4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1bca4:	b580      	push	{r7, lr}
   1bca6:	b082      	sub	sp, #8
   1bca8:	af00      	add	r7, sp, #0
   1bcaa:	6078      	str	r0, [r7, #4]
   1bcac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1bcae:	687b      	ldr	r3, [r7, #4]
   1bcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bcb2:	2b00      	cmp	r3, #0
   1bcb4:	d018      	beq.n	1bce8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1bcb6:	687b      	ldr	r3, [r7, #4]
   1bcb8:	68da      	ldr	r2, [r3, #12]
   1bcba:	687b      	ldr	r3, [r7, #4]
   1bcbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bcbe:	18d2      	adds	r2, r2, r3
   1bcc0:	687b      	ldr	r3, [r7, #4]
   1bcc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1bcc4:	687b      	ldr	r3, [r7, #4]
   1bcc6:	68da      	ldr	r2, [r3, #12]
   1bcc8:	687b      	ldr	r3, [r7, #4]
   1bcca:	685b      	ldr	r3, [r3, #4]
   1bccc:	429a      	cmp	r2, r3
   1bcce:	d303      	bcc.n	1bcd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1bcd0:	687b      	ldr	r3, [r7, #4]
   1bcd2:	681a      	ldr	r2, [r3, #0]
   1bcd4:	687b      	ldr	r3, [r7, #4]
   1bcd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1bcd8:	687b      	ldr	r3, [r7, #4]
   1bcda:	68d9      	ldr	r1, [r3, #12]
   1bcdc:	687b      	ldr	r3, [r7, #4]
   1bcde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1bce0:	683b      	ldr	r3, [r7, #0]
   1bce2:	0018      	movs	r0, r3
   1bce4:	4b02      	ldr	r3, [pc, #8]	; (1bcf0 <prvCopyDataFromQueue+0x4c>)
   1bce6:	4798      	blx	r3
	}
}
   1bce8:	46c0      	nop			; (mov r8, r8)
   1bcea:	46bd      	mov	sp, r7
   1bcec:	b002      	add	sp, #8
   1bcee:	bd80      	pop	{r7, pc}
   1bcf0:	00034869 	.word	0x00034869

0001bcf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1bcf4:	b580      	push	{r7, lr}
   1bcf6:	b084      	sub	sp, #16
   1bcf8:	af00      	add	r7, sp, #0
   1bcfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1bcfc:	4b34      	ldr	r3, [pc, #208]	; (1bdd0 <prvUnlockQueue+0xdc>)
   1bcfe:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1bd00:	230f      	movs	r3, #15
   1bd02:	18fb      	adds	r3, r7, r3
   1bd04:	687a      	ldr	r2, [r7, #4]
   1bd06:	2145      	movs	r1, #69	; 0x45
   1bd08:	5c52      	ldrb	r2, [r2, r1]
   1bd0a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1bd0c:	e022      	b.n	1bd54 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1bd0e:	687b      	ldr	r3, [r7, #4]
   1bd10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bd12:	2b00      	cmp	r3, #0
   1bd14:	d009      	beq.n	1bd2a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1bd16:	687b      	ldr	r3, [r7, #4]
   1bd18:	2100      	movs	r1, #0
   1bd1a:	0018      	movs	r0, r3
   1bd1c:	4b2d      	ldr	r3, [pc, #180]	; (1bdd4 <prvUnlockQueue+0xe0>)
   1bd1e:	4798      	blx	r3
   1bd20:	1e03      	subs	r3, r0, #0
   1bd22:	d00f      	beq.n	1bd44 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1bd24:	4b2c      	ldr	r3, [pc, #176]	; (1bdd8 <prvUnlockQueue+0xe4>)
   1bd26:	4798      	blx	r3
   1bd28:	e00c      	b.n	1bd44 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1bd2a:	687b      	ldr	r3, [r7, #4]
   1bd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bd2e:	2b00      	cmp	r3, #0
   1bd30:	d017      	beq.n	1bd62 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1bd32:	687b      	ldr	r3, [r7, #4]
   1bd34:	3324      	adds	r3, #36	; 0x24
   1bd36:	0018      	movs	r0, r3
   1bd38:	4b28      	ldr	r3, [pc, #160]	; (1bddc <prvUnlockQueue+0xe8>)
   1bd3a:	4798      	blx	r3
   1bd3c:	1e03      	subs	r3, r0, #0
   1bd3e:	d001      	beq.n	1bd44 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1bd40:	4b25      	ldr	r3, [pc, #148]	; (1bdd8 <prvUnlockQueue+0xe4>)
   1bd42:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1bd44:	230f      	movs	r3, #15
   1bd46:	18fb      	adds	r3, r7, r3
   1bd48:	781b      	ldrb	r3, [r3, #0]
   1bd4a:	3b01      	subs	r3, #1
   1bd4c:	b2da      	uxtb	r2, r3
   1bd4e:	230f      	movs	r3, #15
   1bd50:	18fb      	adds	r3, r7, r3
   1bd52:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1bd54:	230f      	movs	r3, #15
   1bd56:	18fb      	adds	r3, r7, r3
   1bd58:	781b      	ldrb	r3, [r3, #0]
   1bd5a:	b25b      	sxtb	r3, r3
   1bd5c:	2b00      	cmp	r3, #0
   1bd5e:	dcd6      	bgt.n	1bd0e <prvUnlockQueue+0x1a>
   1bd60:	e000      	b.n	1bd64 <prvUnlockQueue+0x70>
						break;
   1bd62:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1bd64:	687b      	ldr	r3, [r7, #4]
   1bd66:	2245      	movs	r2, #69	; 0x45
   1bd68:	21ff      	movs	r1, #255	; 0xff
   1bd6a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1bd6c:	4b1c      	ldr	r3, [pc, #112]	; (1bde0 <prvUnlockQueue+0xec>)
   1bd6e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1bd70:	4b17      	ldr	r3, [pc, #92]	; (1bdd0 <prvUnlockQueue+0xdc>)
   1bd72:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1bd74:	230e      	movs	r3, #14
   1bd76:	18fb      	adds	r3, r7, r3
   1bd78:	687a      	ldr	r2, [r7, #4]
   1bd7a:	2144      	movs	r1, #68	; 0x44
   1bd7c:	5c52      	ldrb	r2, [r2, r1]
   1bd7e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1bd80:	e014      	b.n	1bdac <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bd82:	687b      	ldr	r3, [r7, #4]
   1bd84:	691b      	ldr	r3, [r3, #16]
   1bd86:	2b00      	cmp	r3, #0
   1bd88:	d017      	beq.n	1bdba <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bd8a:	687b      	ldr	r3, [r7, #4]
   1bd8c:	3310      	adds	r3, #16
   1bd8e:	0018      	movs	r0, r3
   1bd90:	4b12      	ldr	r3, [pc, #72]	; (1bddc <prvUnlockQueue+0xe8>)
   1bd92:	4798      	blx	r3
   1bd94:	1e03      	subs	r3, r0, #0
   1bd96:	d001      	beq.n	1bd9c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1bd98:	4b0f      	ldr	r3, [pc, #60]	; (1bdd8 <prvUnlockQueue+0xe4>)
   1bd9a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1bd9c:	230e      	movs	r3, #14
   1bd9e:	18fb      	adds	r3, r7, r3
   1bda0:	781b      	ldrb	r3, [r3, #0]
   1bda2:	3b01      	subs	r3, #1
   1bda4:	b2da      	uxtb	r2, r3
   1bda6:	230e      	movs	r3, #14
   1bda8:	18fb      	adds	r3, r7, r3
   1bdaa:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1bdac:	230e      	movs	r3, #14
   1bdae:	18fb      	adds	r3, r7, r3
   1bdb0:	781b      	ldrb	r3, [r3, #0]
   1bdb2:	b25b      	sxtb	r3, r3
   1bdb4:	2b00      	cmp	r3, #0
   1bdb6:	dce4      	bgt.n	1bd82 <prvUnlockQueue+0x8e>
   1bdb8:	e000      	b.n	1bdbc <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1bdba:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1bdbc:	687b      	ldr	r3, [r7, #4]
   1bdbe:	2244      	movs	r2, #68	; 0x44
   1bdc0:	21ff      	movs	r1, #255	; 0xff
   1bdc2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1bdc4:	4b06      	ldr	r3, [pc, #24]	; (1bde0 <prvUnlockQueue+0xec>)
   1bdc6:	4798      	blx	r3
}
   1bdc8:	46c0      	nop			; (mov r8, r8)
   1bdca:	46bd      	mov	sp, r7
   1bdcc:	b004      	add	sp, #16
   1bdce:	bd80      	pop	{r7, pc}
   1bdd0:	0001a3f9 	.word	0x0001a3f9
   1bdd4:	0001bec9 	.word	0x0001bec9
   1bdd8:	0001ce9d 	.word	0x0001ce9d
   1bddc:	0001cc89 	.word	0x0001cc89
   1bde0:	0001a41d 	.word	0x0001a41d

0001bde4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1bde4:	b580      	push	{r7, lr}
   1bde6:	b084      	sub	sp, #16
   1bde8:	af00      	add	r7, sp, #0
   1bdea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1bdec:	4b08      	ldr	r3, [pc, #32]	; (1be10 <prvIsQueueEmpty+0x2c>)
   1bdee:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1bdf0:	687b      	ldr	r3, [r7, #4]
   1bdf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bdf4:	2b00      	cmp	r3, #0
   1bdf6:	d102      	bne.n	1bdfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1bdf8:	2301      	movs	r3, #1
   1bdfa:	60fb      	str	r3, [r7, #12]
   1bdfc:	e001      	b.n	1be02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1bdfe:	2300      	movs	r3, #0
   1be00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1be02:	4b04      	ldr	r3, [pc, #16]	; (1be14 <prvIsQueueEmpty+0x30>)
   1be04:	4798      	blx	r3

	return xReturn;
   1be06:	68fb      	ldr	r3, [r7, #12]
}
   1be08:	0018      	movs	r0, r3
   1be0a:	46bd      	mov	sp, r7
   1be0c:	b004      	add	sp, #16
   1be0e:	bd80      	pop	{r7, pc}
   1be10:	0001a3f9 	.word	0x0001a3f9
   1be14:	0001a41d 	.word	0x0001a41d

0001be18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1be18:	b580      	push	{r7, lr}
   1be1a:	b084      	sub	sp, #16
   1be1c:	af00      	add	r7, sp, #0
   1be1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1be20:	4b09      	ldr	r3, [pc, #36]	; (1be48 <prvIsQueueFull+0x30>)
   1be22:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1be24:	687b      	ldr	r3, [r7, #4]
   1be26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1be28:	687b      	ldr	r3, [r7, #4]
   1be2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1be2c:	429a      	cmp	r2, r3
   1be2e:	d102      	bne.n	1be36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1be30:	2301      	movs	r3, #1
   1be32:	60fb      	str	r3, [r7, #12]
   1be34:	e001      	b.n	1be3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1be36:	2300      	movs	r3, #0
   1be38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1be3a:	4b04      	ldr	r3, [pc, #16]	; (1be4c <prvIsQueueFull+0x34>)
   1be3c:	4798      	blx	r3

	return xReturn;
   1be3e:	68fb      	ldr	r3, [r7, #12]
}
   1be40:	0018      	movs	r0, r3
   1be42:	46bd      	mov	sp, r7
   1be44:	b004      	add	sp, #16
   1be46:	bd80      	pop	{r7, pc}
   1be48:	0001a3f9 	.word	0x0001a3f9
   1be4c:	0001a41d 	.word	0x0001a41d

0001be50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1be50:	b580      	push	{r7, lr}
   1be52:	b086      	sub	sp, #24
   1be54:	af00      	add	r7, sp, #0
   1be56:	60f8      	str	r0, [r7, #12]
   1be58:	60b9      	str	r1, [r7, #8]
   1be5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1be5c:	68fb      	ldr	r3, [r7, #12]
   1be5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1be60:	4b15      	ldr	r3, [pc, #84]	; (1beb8 <vQueueWaitForMessageRestricted+0x68>)
   1be62:	4798      	blx	r3
   1be64:	697b      	ldr	r3, [r7, #20]
   1be66:	2244      	movs	r2, #68	; 0x44
   1be68:	5c9b      	ldrb	r3, [r3, r2]
   1be6a:	b25b      	sxtb	r3, r3
   1be6c:	3301      	adds	r3, #1
   1be6e:	d103      	bne.n	1be78 <vQueueWaitForMessageRestricted+0x28>
   1be70:	697b      	ldr	r3, [r7, #20]
   1be72:	2244      	movs	r2, #68	; 0x44
   1be74:	2100      	movs	r1, #0
   1be76:	5499      	strb	r1, [r3, r2]
   1be78:	697b      	ldr	r3, [r7, #20]
   1be7a:	2245      	movs	r2, #69	; 0x45
   1be7c:	5c9b      	ldrb	r3, [r3, r2]
   1be7e:	b25b      	sxtb	r3, r3
   1be80:	3301      	adds	r3, #1
   1be82:	d103      	bne.n	1be8c <vQueueWaitForMessageRestricted+0x3c>
   1be84:	697b      	ldr	r3, [r7, #20]
   1be86:	2245      	movs	r2, #69	; 0x45
   1be88:	2100      	movs	r1, #0
   1be8a:	5499      	strb	r1, [r3, r2]
   1be8c:	4b0b      	ldr	r3, [pc, #44]	; (1bebc <vQueueWaitForMessageRestricted+0x6c>)
   1be8e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1be90:	697b      	ldr	r3, [r7, #20]
   1be92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1be94:	2b00      	cmp	r3, #0
   1be96:	d106      	bne.n	1bea6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1be98:	697b      	ldr	r3, [r7, #20]
   1be9a:	3324      	adds	r3, #36	; 0x24
   1be9c:	687a      	ldr	r2, [r7, #4]
   1be9e:	68b9      	ldr	r1, [r7, #8]
   1bea0:	0018      	movs	r0, r3
   1bea2:	4b07      	ldr	r3, [pc, #28]	; (1bec0 <vQueueWaitForMessageRestricted+0x70>)
   1bea4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1bea6:	697b      	ldr	r3, [r7, #20]
   1bea8:	0018      	movs	r0, r3
   1beaa:	4b06      	ldr	r3, [pc, #24]	; (1bec4 <vQueueWaitForMessageRestricted+0x74>)
   1beac:	4798      	blx	r3
	}
   1beae:	46c0      	nop			; (mov r8, r8)
   1beb0:	46bd      	mov	sp, r7
   1beb2:	b006      	add	sp, #24
   1beb4:	bd80      	pop	{r7, pc}
   1beb6:	46c0      	nop			; (mov r8, r8)
   1beb8:	0001a3f9 	.word	0x0001a3f9
   1bebc:	0001a41d 	.word	0x0001a41d
   1bec0:	0001cba9 	.word	0x0001cba9
   1bec4:	0001bcf5 	.word	0x0001bcf5

0001bec8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1bec8:	b5b0      	push	{r4, r5, r7, lr}
   1beca:	b086      	sub	sp, #24
   1becc:	af00      	add	r7, sp, #0
   1bece:	6078      	str	r0, [r7, #4]
   1bed0:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1bed2:	687b      	ldr	r3, [r7, #4]
   1bed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bed6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1bed8:	2300      	movs	r3, #0
   1beda:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1bedc:	693b      	ldr	r3, [r7, #16]
   1bede:	2b00      	cmp	r3, #0
   1bee0:	d101      	bne.n	1bee6 <prvNotifyQueueSetContainer+0x1e>
   1bee2:	b672      	cpsid	i
   1bee4:	e7fe      	b.n	1bee4 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1bee6:	693b      	ldr	r3, [r7, #16]
   1bee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1beea:	693b      	ldr	r3, [r7, #16]
   1beec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1beee:	429a      	cmp	r2, r3
   1bef0:	d301      	bcc.n	1bef6 <prvNotifyQueueSetContainer+0x2e>
   1bef2:	b672      	cpsid	i
   1bef4:	e7fe      	b.n	1bef4 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1bef6:	693b      	ldr	r3, [r7, #16]
   1bef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1befa:	693b      	ldr	r3, [r7, #16]
   1befc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1befe:	429a      	cmp	r2, r3
   1bf00:	d300      	bcc.n	1bf04 <prvNotifyQueueSetContainer+0x3c>
   1bf02:	e08b      	b.n	1c01c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1bf04:	230f      	movs	r3, #15
   1bf06:	18fb      	adds	r3, r7, r3
   1bf08:	693a      	ldr	r2, [r7, #16]
   1bf0a:	2145      	movs	r1, #69	; 0x45
   1bf0c:	5c52      	ldrb	r2, [r2, r1]
   1bf0e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1bf10:	4b45      	ldr	r3, [pc, #276]	; (1c028 <prvNotifyQueueSetContainer+0x160>)
   1bf12:	4798      	blx	r3
   1bf14:	0003      	movs	r3, r0
   1bf16:	0018      	movs	r0, r3
   1bf18:	4b44      	ldr	r3, [pc, #272]	; (1c02c <prvNotifyQueueSetContainer+0x164>)
   1bf1a:	4798      	blx	r3
   1bf1c:	0003      	movs	r3, r0
   1bf1e:	001a      	movs	r2, r3
   1bf20:	4b43      	ldr	r3, [pc, #268]	; (1c030 <prvNotifyQueueSetContainer+0x168>)
   1bf22:	881b      	ldrh	r3, [r3, #0]
   1bf24:	4013      	ands	r3, r2
   1bf26:	b29b      	uxth	r3, r3
   1bf28:	2b00      	cmp	r3, #0
   1bf2a:	d02e      	beq.n	1bf8a <prvNotifyQueueSetContainer+0xc2>
   1bf2c:	693b      	ldr	r3, [r7, #16]
   1bf2e:	0018      	movs	r0, r3
   1bf30:	4b40      	ldr	r3, [pc, #256]	; (1c034 <prvNotifyQueueSetContainer+0x16c>)
   1bf32:	4798      	blx	r3
   1bf34:	0003      	movs	r3, r0
   1bf36:	001a      	movs	r2, r3
   1bf38:	4b3d      	ldr	r3, [pc, #244]	; (1c030 <prvNotifyQueueSetContainer+0x168>)
   1bf3a:	881b      	ldrh	r3, [r3, #0]
   1bf3c:	4013      	ands	r3, r2
   1bf3e:	b29b      	uxth	r3, r3
   1bf40:	2b00      	cmp	r3, #0
   1bf42:	d022      	beq.n	1bf8a <prvNotifyQueueSetContainer+0xc2>
   1bf44:	683b      	ldr	r3, [r7, #0]
   1bf46:	2b00      	cmp	r3, #0
   1bf48:	d10b      	bne.n	1bf62 <prvNotifyQueueSetContainer+0x9a>
   1bf4a:	693b      	ldr	r3, [r7, #16]
   1bf4c:	0018      	movs	r0, r3
   1bf4e:	4b3a      	ldr	r3, [pc, #232]	; (1c038 <prvNotifyQueueSetContainer+0x170>)
   1bf50:	4798      	blx	r3
   1bf52:	0003      	movs	r3, r0
   1bf54:	001a      	movs	r2, r3
   1bf56:	4b39      	ldr	r3, [pc, #228]	; (1c03c <prvNotifyQueueSetContainer+0x174>)
   1bf58:	5c9b      	ldrb	r3, [r3, r2]
   1bf5a:	3320      	adds	r3, #32
   1bf5c:	b2db      	uxtb	r3, r3
   1bf5e:	001d      	movs	r5, r3
   1bf60:	e000      	b.n	1bf64 <prvNotifyQueueSetContainer+0x9c>
   1bf62:	2525      	movs	r5, #37	; 0x25
   1bf64:	693b      	ldr	r3, [r7, #16]
   1bf66:	0018      	movs	r0, r3
   1bf68:	4b33      	ldr	r3, [pc, #204]	; (1c038 <prvNotifyQueueSetContainer+0x170>)
   1bf6a:	4798      	blx	r3
   1bf6c:	0003      	movs	r3, r0
   1bf6e:	001a      	movs	r2, r3
   1bf70:	4b32      	ldr	r3, [pc, #200]	; (1c03c <prvNotifyQueueSetContainer+0x174>)
   1bf72:	5c9c      	ldrb	r4, [r3, r2]
   1bf74:	693b      	ldr	r3, [r7, #16]
   1bf76:	0018      	movs	r0, r3
   1bf78:	4b31      	ldr	r3, [pc, #196]	; (1c040 <prvNotifyQueueSetContainer+0x178>)
   1bf7a:	4798      	blx	r3
   1bf7c:	0003      	movs	r3, r0
   1bf7e:	b2db      	uxtb	r3, r3
   1bf80:	001a      	movs	r2, r3
   1bf82:	0021      	movs	r1, r4
   1bf84:	0028      	movs	r0, r5
   1bf86:	4b2f      	ldr	r3, [pc, #188]	; (1c044 <prvNotifyQueueSetContainer+0x17c>)
   1bf88:	4798      	blx	r3
   1bf8a:	693b      	ldr	r3, [r7, #16]
   1bf8c:	0018      	movs	r0, r3
   1bf8e:	4b2a      	ldr	r3, [pc, #168]	; (1c038 <prvNotifyQueueSetContainer+0x170>)
   1bf90:	4798      	blx	r3
   1bf92:	0003      	movs	r3, r0
   1bf94:	001a      	movs	r2, r3
   1bf96:	4b29      	ldr	r3, [pc, #164]	; (1c03c <prvNotifyQueueSetContainer+0x174>)
   1bf98:	5c9c      	ldrb	r4, [r3, r2]
   1bf9a:	693b      	ldr	r3, [r7, #16]
   1bf9c:	0018      	movs	r0, r3
   1bf9e:	4b28      	ldr	r3, [pc, #160]	; (1c040 <prvNotifyQueueSetContainer+0x178>)
   1bfa0:	4798      	blx	r3
   1bfa2:	0003      	movs	r3, r0
   1bfa4:	b2dd      	uxtb	r5, r3
   1bfa6:	693b      	ldr	r3, [r7, #16]
   1bfa8:	0018      	movs	r0, r3
   1bfaa:	4b23      	ldr	r3, [pc, #140]	; (1c038 <prvNotifyQueueSetContainer+0x170>)
   1bfac:	4798      	blx	r3
   1bfae:	0003      	movs	r3, r0
   1bfb0:	001a      	movs	r2, r3
   1bfb2:	4b22      	ldr	r3, [pc, #136]	; (1c03c <prvNotifyQueueSetContainer+0x174>)
   1bfb4:	5c9b      	ldrb	r3, [r3, r2]
   1bfb6:	2b02      	cmp	r3, #2
   1bfb8:	d005      	beq.n	1bfc6 <prvNotifyQueueSetContainer+0xfe>
   1bfba:	693b      	ldr	r3, [r7, #16]
   1bfbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bfbe:	b2db      	uxtb	r3, r3
   1bfc0:	3301      	adds	r3, #1
   1bfc2:	b2db      	uxtb	r3, r3
   1bfc4:	e000      	b.n	1bfc8 <prvNotifyQueueSetContainer+0x100>
   1bfc6:	2300      	movs	r3, #0
   1bfc8:	001a      	movs	r2, r3
   1bfca:	0029      	movs	r1, r5
   1bfcc:	0020      	movs	r0, r4
   1bfce:	4b1e      	ldr	r3, [pc, #120]	; (1c048 <prvNotifyQueueSetContainer+0x180>)
   1bfd0:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1bfd2:	683a      	ldr	r2, [r7, #0]
   1bfd4:	1d39      	adds	r1, r7, #4
   1bfd6:	693b      	ldr	r3, [r7, #16]
   1bfd8:	0018      	movs	r0, r3
   1bfda:	4b1c      	ldr	r3, [pc, #112]	; (1c04c <prvNotifyQueueSetContainer+0x184>)
   1bfdc:	4798      	blx	r3
   1bfde:	0003      	movs	r3, r0
   1bfe0:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1bfe2:	230f      	movs	r3, #15
   1bfe4:	18fb      	adds	r3, r7, r3
   1bfe6:	781b      	ldrb	r3, [r3, #0]
   1bfe8:	b25b      	sxtb	r3, r3
   1bfea:	3301      	adds	r3, #1
   1bfec:	d10d      	bne.n	1c00a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1bfee:	693b      	ldr	r3, [r7, #16]
   1bff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bff2:	2b00      	cmp	r3, #0
   1bff4:	d012      	beq.n	1c01c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1bff6:	693b      	ldr	r3, [r7, #16]
   1bff8:	3324      	adds	r3, #36	; 0x24
   1bffa:	0018      	movs	r0, r3
   1bffc:	4b14      	ldr	r3, [pc, #80]	; (1c050 <prvNotifyQueueSetContainer+0x188>)
   1bffe:	4798      	blx	r3
   1c000:	1e03      	subs	r3, r0, #0
   1c002:	d00b      	beq.n	1c01c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1c004:	2301      	movs	r3, #1
   1c006:	617b      	str	r3, [r7, #20]
   1c008:	e008      	b.n	1c01c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1c00a:	230f      	movs	r3, #15
   1c00c:	18fb      	adds	r3, r7, r3
   1c00e:	781b      	ldrb	r3, [r3, #0]
   1c010:	3301      	adds	r3, #1
   1c012:	b2db      	uxtb	r3, r3
   1c014:	b259      	sxtb	r1, r3
   1c016:	693b      	ldr	r3, [r7, #16]
   1c018:	2245      	movs	r2, #69	; 0x45
   1c01a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c01c:	697b      	ldr	r3, [r7, #20]
	}
   1c01e:	0018      	movs	r0, r3
   1c020:	46bd      	mov	sp, r7
   1c022:	b006      	add	sp, #24
   1c024:	bdb0      	pop	{r4, r5, r7, pc}
   1c026:	46c0      	nop			; (mov r8, r8)
   1c028:	00018689 	.word	0x00018689
   1c02c:	000183ed 	.word	0x000183ed
   1c030:	200000b8 	.word	0x200000b8
   1c034:	000184ad 	.word	0x000184ad
   1c038:	000183ad 	.word	0x000183ad
   1c03c:	200000ac 	.word	0x200000ac
   1c040:	0001848d 	.word	0x0001848d
   1c044:	00018de5 	.word	0x00018de5
   1c048:	00019441 	.word	0x00019441
   1c04c:	0001bbc5 	.word	0x0001bbc5
   1c050:	0001cc89 	.word	0x0001cc89

0001c054 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1c054:	b590      	push	{r4, r7, lr}
   1c056:	b08d      	sub	sp, #52	; 0x34
   1c058:	af04      	add	r7, sp, #16
   1c05a:	60f8      	str	r0, [r7, #12]
   1c05c:	60b9      	str	r1, [r7, #8]
   1c05e:	603b      	str	r3, [r7, #0]
   1c060:	1dbb      	adds	r3, r7, #6
   1c062:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c064:	1dbb      	adds	r3, r7, #6
   1c066:	881b      	ldrh	r3, [r3, #0]
   1c068:	009b      	lsls	r3, r3, #2
   1c06a:	0018      	movs	r0, r3
   1c06c:	4b1d      	ldr	r3, [pc, #116]	; (1c0e4 <xTaskCreate+0x90>)
   1c06e:	4798      	blx	r3
   1c070:	0003      	movs	r3, r0
   1c072:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1c074:	697b      	ldr	r3, [r7, #20]
   1c076:	2b00      	cmp	r3, #0
   1c078:	d010      	beq.n	1c09c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1c07a:	2054      	movs	r0, #84	; 0x54
   1c07c:	4b19      	ldr	r3, [pc, #100]	; (1c0e4 <xTaskCreate+0x90>)
   1c07e:	4798      	blx	r3
   1c080:	0003      	movs	r3, r0
   1c082:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1c084:	69fb      	ldr	r3, [r7, #28]
   1c086:	2b00      	cmp	r3, #0
   1c088:	d003      	beq.n	1c092 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1c08a:	69fb      	ldr	r3, [r7, #28]
   1c08c:	697a      	ldr	r2, [r7, #20]
   1c08e:	631a      	str	r2, [r3, #48]	; 0x30
   1c090:	e006      	b.n	1c0a0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1c092:	697b      	ldr	r3, [r7, #20]
   1c094:	0018      	movs	r0, r3
   1c096:	4b14      	ldr	r3, [pc, #80]	; (1c0e8 <xTaskCreate+0x94>)
   1c098:	4798      	blx	r3
   1c09a:	e001      	b.n	1c0a0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1c09c:	2300      	movs	r3, #0
   1c09e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1c0a0:	69fb      	ldr	r3, [r7, #28]
   1c0a2:	2b00      	cmp	r3, #0
   1c0a4:	d016      	beq.n	1c0d4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1c0a6:	1dbb      	adds	r3, r7, #6
   1c0a8:	881a      	ldrh	r2, [r3, #0]
   1c0aa:	683c      	ldr	r4, [r7, #0]
   1c0ac:	68b9      	ldr	r1, [r7, #8]
   1c0ae:	68f8      	ldr	r0, [r7, #12]
   1c0b0:	2300      	movs	r3, #0
   1c0b2:	9303      	str	r3, [sp, #12]
   1c0b4:	69fb      	ldr	r3, [r7, #28]
   1c0b6:	9302      	str	r3, [sp, #8]
   1c0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c0ba:	9301      	str	r3, [sp, #4]
   1c0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c0be:	9300      	str	r3, [sp, #0]
   1c0c0:	0023      	movs	r3, r4
   1c0c2:	4c0a      	ldr	r4, [pc, #40]	; (1c0ec <xTaskCreate+0x98>)
   1c0c4:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1c0c6:	69fb      	ldr	r3, [r7, #28]
   1c0c8:	0018      	movs	r0, r3
   1c0ca:	4b09      	ldr	r3, [pc, #36]	; (1c0f0 <xTaskCreate+0x9c>)
   1c0cc:	4798      	blx	r3
			xReturn = pdPASS;
   1c0ce:	2301      	movs	r3, #1
   1c0d0:	61bb      	str	r3, [r7, #24]
   1c0d2:	e002      	b.n	1c0da <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1c0d4:	2301      	movs	r3, #1
   1c0d6:	425b      	negs	r3, r3
   1c0d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1c0da:	69bb      	ldr	r3, [r7, #24]
	}
   1c0dc:	0018      	movs	r0, r3
   1c0de:	46bd      	mov	sp, r7
   1c0e0:	b009      	add	sp, #36	; 0x24
   1c0e2:	bd90      	pop	{r4, r7, pc}
   1c0e4:	0001a531 	.word	0x0001a531
   1c0e8:	0001a5f5 	.word	0x0001a5f5
   1c0ec:	0001c0f5 	.word	0x0001c0f5
   1c0f0:	0001c205 	.word	0x0001c205

0001c0f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1c0f4:	b580      	push	{r7, lr}
   1c0f6:	b086      	sub	sp, #24
   1c0f8:	af00      	add	r7, sp, #0
   1c0fa:	60f8      	str	r0, [r7, #12]
   1c0fc:	60b9      	str	r1, [r7, #8]
   1c0fe:	607a      	str	r2, [r7, #4]
   1c100:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c104:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1c106:	687b      	ldr	r3, [r7, #4]
   1c108:	009b      	lsls	r3, r3, #2
   1c10a:	001a      	movs	r2, r3
   1c10c:	21a5      	movs	r1, #165	; 0xa5
   1c10e:	4b39      	ldr	r3, [pc, #228]	; (1c1f4 <prvInitialiseNewTask+0x100>)
   1c110:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c116:	687b      	ldr	r3, [r7, #4]
   1c118:	4937      	ldr	r1, [pc, #220]	; (1c1f8 <prvInitialiseNewTask+0x104>)
   1c11a:	468c      	mov	ip, r1
   1c11c:	4463      	add	r3, ip
   1c11e:	009b      	lsls	r3, r3, #2
   1c120:	18d3      	adds	r3, r2, r3
   1c122:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1c124:	693b      	ldr	r3, [r7, #16]
   1c126:	2207      	movs	r2, #7
   1c128:	4393      	bics	r3, r2
   1c12a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1c12c:	693b      	ldr	r3, [r7, #16]
   1c12e:	2207      	movs	r2, #7
   1c130:	4013      	ands	r3, r2
   1c132:	d001      	beq.n	1c138 <prvInitialiseNewTask+0x44>
   1c134:	b672      	cpsid	i
   1c136:	e7fe      	b.n	1c136 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c138:	2300      	movs	r3, #0
   1c13a:	617b      	str	r3, [r7, #20]
   1c13c:	e013      	b.n	1c166 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1c13e:	68ba      	ldr	r2, [r7, #8]
   1c140:	697b      	ldr	r3, [r7, #20]
   1c142:	18d3      	adds	r3, r2, r3
   1c144:	7818      	ldrb	r0, [r3, #0]
   1c146:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c148:	2134      	movs	r1, #52	; 0x34
   1c14a:	697b      	ldr	r3, [r7, #20]
   1c14c:	18d3      	adds	r3, r2, r3
   1c14e:	185b      	adds	r3, r3, r1
   1c150:	1c02      	adds	r2, r0, #0
   1c152:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1c154:	68ba      	ldr	r2, [r7, #8]
   1c156:	697b      	ldr	r3, [r7, #20]
   1c158:	18d3      	adds	r3, r2, r3
   1c15a:	781b      	ldrb	r3, [r3, #0]
   1c15c:	2b00      	cmp	r3, #0
   1c15e:	d006      	beq.n	1c16e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c160:	697b      	ldr	r3, [r7, #20]
   1c162:	3301      	adds	r3, #1
   1c164:	617b      	str	r3, [r7, #20]
   1c166:	697b      	ldr	r3, [r7, #20]
   1c168:	2b07      	cmp	r3, #7
   1c16a:	d9e8      	bls.n	1c13e <prvInitialiseNewTask+0x4a>
   1c16c:	e000      	b.n	1c170 <prvInitialiseNewTask+0x7c>
		{
			break;
   1c16e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1c170:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c172:	223b      	movs	r2, #59	; 0x3b
   1c174:	2100      	movs	r1, #0
   1c176:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1c178:	6a3b      	ldr	r3, [r7, #32]
   1c17a:	2b04      	cmp	r3, #4
   1c17c:	d901      	bls.n	1c182 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1c17e:	2304      	movs	r3, #4
   1c180:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1c182:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c184:	6a3a      	ldr	r2, [r7, #32]
   1c186:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c18a:	6a3a      	ldr	r2, [r7, #32]
   1c18c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1c18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c190:	2200      	movs	r2, #0
   1c192:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1c194:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c196:	3304      	adds	r3, #4
   1c198:	0018      	movs	r0, r3
   1c19a:	4b18      	ldr	r3, [pc, #96]	; (1c1fc <prvInitialiseNewTask+0x108>)
   1c19c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1c19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c1a0:	3318      	adds	r3, #24
   1c1a2:	0018      	movs	r0, r3
   1c1a4:	4b15      	ldr	r3, [pc, #84]	; (1c1fc <prvInitialiseNewTask+0x108>)
   1c1a6:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1c1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c1aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c1ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c1ae:	6a3b      	ldr	r3, [r7, #32]
   1c1b0:	2205      	movs	r2, #5
   1c1b2:	1ad2      	subs	r2, r2, r3
   1c1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c1b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1c1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c1ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c1bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1c1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c1c0:	2200      	movs	r2, #0
   1c1c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c1c6:	2250      	movs	r2, #80	; 0x50
   1c1c8:	2100      	movs	r1, #0
   1c1ca:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1c1cc:	683a      	ldr	r2, [r7, #0]
   1c1ce:	68f9      	ldr	r1, [r7, #12]
   1c1d0:	693b      	ldr	r3, [r7, #16]
   1c1d2:	0018      	movs	r0, r3
   1c1d4:	4b0a      	ldr	r3, [pc, #40]	; (1c200 <prvInitialiseNewTask+0x10c>)
   1c1d6:	4798      	blx	r3
   1c1d8:	0002      	movs	r2, r0
   1c1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c1dc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1c1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c1e0:	2b00      	cmp	r3, #0
   1c1e2:	d002      	beq.n	1c1ea <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1c1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c1e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c1e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c1ea:	46c0      	nop			; (mov r8, r8)
   1c1ec:	46bd      	mov	sp, r7
   1c1ee:	b006      	add	sp, #24
   1c1f0:	bd80      	pop	{r7, pc}
   1c1f2:	46c0      	nop			; (mov r8, r8)
   1c1f4:	0003489f 	.word	0x0003489f
   1c1f8:	3fffffff 	.word	0x3fffffff
   1c1fc:	0001a1a1 	.word	0x0001a1a1
   1c200:	0001a2b9 	.word	0x0001a2b9

0001c204 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1c204:	b580      	push	{r7, lr}
   1c206:	b082      	sub	sp, #8
   1c208:	af00      	add	r7, sp, #0
   1c20a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1c20c:	4b60      	ldr	r3, [pc, #384]	; (1c390 <prvAddNewTaskToReadyList+0x18c>)
   1c20e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1c210:	4b60      	ldr	r3, [pc, #384]	; (1c394 <prvAddNewTaskToReadyList+0x190>)
   1c212:	681b      	ldr	r3, [r3, #0]
   1c214:	1c5a      	adds	r2, r3, #1
   1c216:	4b5f      	ldr	r3, [pc, #380]	; (1c394 <prvAddNewTaskToReadyList+0x190>)
   1c218:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1c21a:	4b5f      	ldr	r3, [pc, #380]	; (1c398 <prvAddNewTaskToReadyList+0x194>)
   1c21c:	681b      	ldr	r3, [r3, #0]
   1c21e:	2b00      	cmp	r3, #0
   1c220:	d109      	bne.n	1c236 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1c222:	4b5d      	ldr	r3, [pc, #372]	; (1c398 <prvAddNewTaskToReadyList+0x194>)
   1c224:	687a      	ldr	r2, [r7, #4]
   1c226:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1c228:	4b5a      	ldr	r3, [pc, #360]	; (1c394 <prvAddNewTaskToReadyList+0x190>)
   1c22a:	681b      	ldr	r3, [r3, #0]
   1c22c:	2b01      	cmp	r3, #1
   1c22e:	d110      	bne.n	1c252 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1c230:	4b5a      	ldr	r3, [pc, #360]	; (1c39c <prvAddNewTaskToReadyList+0x198>)
   1c232:	4798      	blx	r3
   1c234:	e00d      	b.n	1c252 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1c236:	4b5a      	ldr	r3, [pc, #360]	; (1c3a0 <prvAddNewTaskToReadyList+0x19c>)
   1c238:	681b      	ldr	r3, [r3, #0]
   1c23a:	2b00      	cmp	r3, #0
   1c23c:	d109      	bne.n	1c252 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1c23e:	4b56      	ldr	r3, [pc, #344]	; (1c398 <prvAddNewTaskToReadyList+0x194>)
   1c240:	681b      	ldr	r3, [r3, #0]
   1c242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c244:	687b      	ldr	r3, [r7, #4]
   1c246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c248:	429a      	cmp	r2, r3
   1c24a:	d802      	bhi.n	1c252 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1c24c:	4b52      	ldr	r3, [pc, #328]	; (1c398 <prvAddNewTaskToReadyList+0x194>)
   1c24e:	687a      	ldr	r2, [r7, #4]
   1c250:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1c252:	4b54      	ldr	r3, [pc, #336]	; (1c3a4 <prvAddNewTaskToReadyList+0x1a0>)
   1c254:	681b      	ldr	r3, [r3, #0]
   1c256:	1c5a      	adds	r2, r3, #1
   1c258:	4b52      	ldr	r3, [pc, #328]	; (1c3a4 <prvAddNewTaskToReadyList+0x1a0>)
   1c25a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1c25c:	4b51      	ldr	r3, [pc, #324]	; (1c3a4 <prvAddNewTaskToReadyList+0x1a0>)
   1c25e:	681a      	ldr	r2, [r3, #0]
   1c260:	687b      	ldr	r3, [r7, #4]
   1c262:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1c264:	687b      	ldr	r3, [r7, #4]
   1c266:	2b00      	cmp	r3, #0
   1c268:	d052      	beq.n	1c310 <prvAddNewTaskToReadyList+0x10c>
   1c26a:	2003      	movs	r0, #3
   1c26c:	4b4e      	ldr	r3, [pc, #312]	; (1c3a8 <prvAddNewTaskToReadyList+0x1a4>)
   1c26e:	4798      	blx	r3
   1c270:	0003      	movs	r3, r0
   1c272:	b29a      	uxth	r2, r3
   1c274:	687b      	ldr	r3, [r7, #4]
   1c276:	0011      	movs	r1, r2
   1c278:	0018      	movs	r0, r3
   1c27a:	4b4c      	ldr	r3, [pc, #304]	; (1c3ac <prvAddNewTaskToReadyList+0x1a8>)
   1c27c:	4798      	blx	r3
   1c27e:	4b4c      	ldr	r3, [pc, #304]	; (1c3b0 <prvAddNewTaskToReadyList+0x1ac>)
   1c280:	881a      	ldrh	r2, [r3, #0]
   1c282:	687b      	ldr	r3, [r7, #4]
   1c284:	0011      	movs	r1, r2
   1c286:	0018      	movs	r0, r3
   1c288:	4b4a      	ldr	r3, [pc, #296]	; (1c3b4 <prvAddNewTaskToReadyList+0x1b0>)
   1c28a:	4798      	blx	r3
   1c28c:	687b      	ldr	r3, [r7, #4]
   1c28e:	0018      	movs	r0, r3
   1c290:	4b49      	ldr	r3, [pc, #292]	; (1c3b8 <prvAddNewTaskToReadyList+0x1b4>)
   1c292:	4798      	blx	r3
   1c294:	0003      	movs	r3, r0
   1c296:	b2d9      	uxtb	r1, r3
   1c298:	687b      	ldr	r3, [r7, #4]
   1c29a:	3334      	adds	r3, #52	; 0x34
   1c29c:	001a      	movs	r2, r3
   1c29e:	2003      	movs	r0, #3
   1c2a0:	4b46      	ldr	r3, [pc, #280]	; (1c3bc <prvAddNewTaskToReadyList+0x1b8>)
   1c2a2:	4798      	blx	r3
   1c2a4:	687b      	ldr	r3, [r7, #4]
   1c2a6:	0018      	movs	r0, r3
   1c2a8:	4b43      	ldr	r3, [pc, #268]	; (1c3b8 <prvAddNewTaskToReadyList+0x1b4>)
   1c2aa:	4798      	blx	r3
   1c2ac:	0003      	movs	r3, r0
   1c2ae:	b2d9      	uxtb	r1, r3
   1c2b0:	687b      	ldr	r3, [r7, #4]
   1c2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c2b4:	b2db      	uxtb	r3, r3
   1c2b6:	001a      	movs	r2, r3
   1c2b8:	2003      	movs	r0, #3
   1c2ba:	4b41      	ldr	r3, [pc, #260]	; (1c3c0 <prvAddNewTaskToReadyList+0x1bc>)
   1c2bc:	4798      	blx	r3
   1c2be:	4b41      	ldr	r3, [pc, #260]	; (1c3c4 <prvAddNewTaskToReadyList+0x1c0>)
   1c2c0:	4798      	blx	r3
   1c2c2:	0003      	movs	r3, r0
   1c2c4:	0018      	movs	r0, r3
   1c2c6:	4b40      	ldr	r3, [pc, #256]	; (1c3c8 <prvAddNewTaskToReadyList+0x1c4>)
   1c2c8:	4798      	blx	r3
   1c2ca:	0003      	movs	r3, r0
   1c2cc:	001a      	movs	r2, r3
   1c2ce:	4b3f      	ldr	r3, [pc, #252]	; (1c3cc <prvAddNewTaskToReadyList+0x1c8>)
   1c2d0:	881b      	ldrh	r3, [r3, #0]
   1c2d2:	4013      	ands	r3, r2
   1c2d4:	b29b      	uxth	r3, r3
   1c2d6:	2b00      	cmp	r3, #0
   1c2d8:	d016      	beq.n	1c308 <prvAddNewTaskToReadyList+0x104>
   1c2da:	687b      	ldr	r3, [r7, #4]
   1c2dc:	0018      	movs	r0, r3
   1c2de:	4b3a      	ldr	r3, [pc, #232]	; (1c3c8 <prvAddNewTaskToReadyList+0x1c4>)
   1c2e0:	4798      	blx	r3
   1c2e2:	0003      	movs	r3, r0
   1c2e4:	001a      	movs	r2, r3
   1c2e6:	4b39      	ldr	r3, [pc, #228]	; (1c3cc <prvAddNewTaskToReadyList+0x1c8>)
   1c2e8:	881b      	ldrh	r3, [r3, #0]
   1c2ea:	4013      	ands	r3, r2
   1c2ec:	b29b      	uxth	r3, r3
   1c2ee:	2b00      	cmp	r3, #0
   1c2f0:	d00a      	beq.n	1c308 <prvAddNewTaskToReadyList+0x104>
   1c2f2:	687b      	ldr	r3, [r7, #4]
   1c2f4:	0018      	movs	r0, r3
   1c2f6:	4b30      	ldr	r3, [pc, #192]	; (1c3b8 <prvAddNewTaskToReadyList+0x1b4>)
   1c2f8:	4798      	blx	r3
   1c2fa:	0003      	movs	r3, r0
   1c2fc:	b2db      	uxtb	r3, r3
   1c2fe:	001a      	movs	r2, r3
   1c300:	2103      	movs	r1, #3
   1c302:	201b      	movs	r0, #27
   1c304:	4b32      	ldr	r3, [pc, #200]	; (1c3d0 <prvAddNewTaskToReadyList+0x1cc>)
   1c306:	4798      	blx	r3
   1c308:	687b      	ldr	r3, [r7, #4]
   1c30a:	0018      	movs	r0, r3
   1c30c:	4b31      	ldr	r3, [pc, #196]	; (1c3d4 <prvAddNewTaskToReadyList+0x1d0>)
   1c30e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1c310:	687b      	ldr	r3, [r7, #4]
   1c312:	0018      	movs	r0, r3
   1c314:	4b2c      	ldr	r3, [pc, #176]	; (1c3c8 <prvAddNewTaskToReadyList+0x1c4>)
   1c316:	4798      	blx	r3
   1c318:	0003      	movs	r3, r0
   1c31a:	001a      	movs	r2, r3
   1c31c:	4b2b      	ldr	r3, [pc, #172]	; (1c3cc <prvAddNewTaskToReadyList+0x1c8>)
   1c31e:	881b      	ldrh	r3, [r3, #0]
   1c320:	4013      	ands	r3, r2
   1c322:	b29b      	uxth	r3, r3
   1c324:	2b00      	cmp	r3, #0
   1c326:	d008      	beq.n	1c33a <prvAddNewTaskToReadyList+0x136>
   1c328:	687b      	ldr	r3, [r7, #4]
   1c32a:	0018      	movs	r0, r3
   1c32c:	4b22      	ldr	r3, [pc, #136]	; (1c3b8 <prvAddNewTaskToReadyList+0x1b4>)
   1c32e:	4798      	blx	r3
   1c330:	0003      	movs	r3, r0
   1c332:	b2db      	uxtb	r3, r3
   1c334:	0018      	movs	r0, r3
   1c336:	4b28      	ldr	r3, [pc, #160]	; (1c3d8 <prvAddNewTaskToReadyList+0x1d4>)
   1c338:	4798      	blx	r3
   1c33a:	687b      	ldr	r3, [r7, #4]
   1c33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c33e:	4b27      	ldr	r3, [pc, #156]	; (1c3dc <prvAddNewTaskToReadyList+0x1d8>)
   1c340:	681b      	ldr	r3, [r3, #0]
   1c342:	429a      	cmp	r2, r3
   1c344:	d903      	bls.n	1c34e <prvAddNewTaskToReadyList+0x14a>
   1c346:	687b      	ldr	r3, [r7, #4]
   1c348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c34a:	4b24      	ldr	r3, [pc, #144]	; (1c3dc <prvAddNewTaskToReadyList+0x1d8>)
   1c34c:	601a      	str	r2, [r3, #0]
   1c34e:	687b      	ldr	r3, [r7, #4]
   1c350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c352:	0013      	movs	r3, r2
   1c354:	009b      	lsls	r3, r3, #2
   1c356:	189b      	adds	r3, r3, r2
   1c358:	009b      	lsls	r3, r3, #2
   1c35a:	4a21      	ldr	r2, [pc, #132]	; (1c3e0 <prvAddNewTaskToReadyList+0x1dc>)
   1c35c:	189a      	adds	r2, r3, r2
   1c35e:	687b      	ldr	r3, [r7, #4]
   1c360:	3304      	adds	r3, #4
   1c362:	0019      	movs	r1, r3
   1c364:	0010      	movs	r0, r2
   1c366:	4b1f      	ldr	r3, [pc, #124]	; (1c3e4 <prvAddNewTaskToReadyList+0x1e0>)
   1c368:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1c36a:	4b1f      	ldr	r3, [pc, #124]	; (1c3e8 <prvAddNewTaskToReadyList+0x1e4>)
   1c36c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1c36e:	4b0c      	ldr	r3, [pc, #48]	; (1c3a0 <prvAddNewTaskToReadyList+0x19c>)
   1c370:	681b      	ldr	r3, [r3, #0]
   1c372:	2b00      	cmp	r3, #0
   1c374:	d008      	beq.n	1c388 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1c376:	4b08      	ldr	r3, [pc, #32]	; (1c398 <prvAddNewTaskToReadyList+0x194>)
   1c378:	681b      	ldr	r3, [r3, #0]
   1c37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c37c:	687b      	ldr	r3, [r7, #4]
   1c37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c380:	429a      	cmp	r2, r3
   1c382:	d201      	bcs.n	1c388 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1c384:	4b19      	ldr	r3, [pc, #100]	; (1c3ec <prvAddNewTaskToReadyList+0x1e8>)
   1c386:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c388:	46c0      	nop			; (mov r8, r8)
   1c38a:	46bd      	mov	sp, r7
   1c38c:	b002      	add	sp, #8
   1c38e:	bd80      	pop	{r7, pc}
   1c390:	0001a3f9 	.word	0x0001a3f9
   1c394:	20003da4 	.word	0x20003da4
   1c398:	20003ccc 	.word	0x20003ccc
   1c39c:	0001cf25 	.word	0x0001cf25
   1c3a0:	20003db0 	.word	0x20003db0
   1c3a4:	20003dc0 	.word	0x20003dc0
   1c3a8:	0001996d 	.word	0x0001996d
   1c3ac:	00018411 	.word	0x00018411
   1c3b0:	200000ba 	.word	0x200000ba
   1c3b4:	0001844d 	.word	0x0001844d
   1c3b8:	000183cd 	.word	0x000183cd
   1c3bc:	00019b9d 	.word	0x00019b9d
   1c3c0:	00019301 	.word	0x00019301
   1c3c4:	00018689 	.word	0x00018689
   1c3c8:	000183ed 	.word	0x000183ed
   1c3cc:	200000b8 	.word	0x200000b8
   1c3d0:	00018de5 	.word	0x00018de5
   1c3d4:	0001854d 	.word	0x0001854d
   1c3d8:	00018b9d 	.word	0x00018b9d
   1c3dc:	20003dac 	.word	0x20003dac
   1c3e0:	20003cd0 	.word	0x20003cd0
   1c3e4:	0001a1b7 	.word	0x0001a1b7
   1c3e8:	0001a41d 	.word	0x0001a41d
   1c3ec:	0001a3e1 	.word	0x0001a3e1

0001c3f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1c3f0:	b580      	push	{r7, lr}
   1c3f2:	b084      	sub	sp, #16
   1c3f4:	af00      	add	r7, sp, #0
   1c3f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1c3f8:	2300      	movs	r3, #0
   1c3fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1c3fc:	687b      	ldr	r3, [r7, #4]
   1c3fe:	2b00      	cmp	r3, #0
   1c400:	d045      	beq.n	1c48e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1c402:	4b27      	ldr	r3, [pc, #156]	; (1c4a0 <vTaskDelay+0xb0>)
   1c404:	681b      	ldr	r3, [r3, #0]
   1c406:	2b00      	cmp	r3, #0
   1c408:	d001      	beq.n	1c40e <vTaskDelay+0x1e>
   1c40a:	b672      	cpsid	i
   1c40c:	e7fe      	b.n	1c40c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1c40e:	4b25      	ldr	r3, [pc, #148]	; (1c4a4 <vTaskDelay+0xb4>)
   1c410:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1c412:	4b25      	ldr	r3, [pc, #148]	; (1c4a8 <vTaskDelay+0xb8>)
   1c414:	681b      	ldr	r3, [r3, #0]
   1c416:	0018      	movs	r0, r3
   1c418:	4b24      	ldr	r3, [pc, #144]	; (1c4ac <vTaskDelay+0xbc>)
   1c41a:	4798      	blx	r3
   1c41c:	0003      	movs	r3, r0
   1c41e:	001a      	movs	r2, r3
   1c420:	4b23      	ldr	r3, [pc, #140]	; (1c4b0 <vTaskDelay+0xc0>)
   1c422:	881b      	ldrh	r3, [r3, #0]
   1c424:	4013      	ands	r3, r2
   1c426:	b29b      	uxth	r3, r3
   1c428:	2b00      	cmp	r3, #0
   1c42a:	d00e      	beq.n	1c44a <vTaskDelay+0x5a>
   1c42c:	687b      	ldr	r3, [r7, #4]
   1c42e:	0019      	movs	r1, r3
   1c430:	2089      	movs	r0, #137	; 0x89
   1c432:	4b20      	ldr	r3, [pc, #128]	; (1c4b4 <vTaskDelay+0xc4>)
   1c434:	4798      	blx	r3
   1c436:	4b1c      	ldr	r3, [pc, #112]	; (1c4a8 <vTaskDelay+0xb8>)
   1c438:	681b      	ldr	r3, [r3, #0]
   1c43a:	0018      	movs	r0, r3
   1c43c:	4b1e      	ldr	r3, [pc, #120]	; (1c4b8 <vTaskDelay+0xc8>)
   1c43e:	4798      	blx	r3
   1c440:	0003      	movs	r3, r0
   1c442:	b2db      	uxtb	r3, r3
   1c444:	0018      	movs	r0, r3
   1c446:	4b1d      	ldr	r3, [pc, #116]	; (1c4bc <vTaskDelay+0xcc>)
   1c448:	4798      	blx	r3
   1c44a:	4b1d      	ldr	r3, [pc, #116]	; (1c4c0 <vTaskDelay+0xd0>)
   1c44c:	4798      	blx	r3
   1c44e:	0003      	movs	r3, r0
   1c450:	0018      	movs	r0, r3
   1c452:	4b16      	ldr	r3, [pc, #88]	; (1c4ac <vTaskDelay+0xbc>)
   1c454:	4798      	blx	r3
   1c456:	0003      	movs	r3, r0
   1c458:	001a      	movs	r2, r3
   1c45a:	4b15      	ldr	r3, [pc, #84]	; (1c4b0 <vTaskDelay+0xc0>)
   1c45c:	881b      	ldrh	r3, [r3, #0]
   1c45e:	4013      	ands	r3, r2
   1c460:	b29b      	uxth	r3, r3
   1c462:	2b00      	cmp	r3, #0
   1c464:	d00a      	beq.n	1c47c <vTaskDelay+0x8c>
   1c466:	4b16      	ldr	r3, [pc, #88]	; (1c4c0 <vTaskDelay+0xd0>)
   1c468:	4798      	blx	r3
   1c46a:	0003      	movs	r3, r0
   1c46c:	0018      	movs	r0, r3
   1c46e:	4b12      	ldr	r3, [pc, #72]	; (1c4b8 <vTaskDelay+0xc8>)
   1c470:	4798      	blx	r3
   1c472:	0003      	movs	r3, r0
   1c474:	b2db      	uxtb	r3, r3
   1c476:	0018      	movs	r0, r3
   1c478:	4b10      	ldr	r3, [pc, #64]	; (1c4bc <vTaskDelay+0xcc>)
   1c47a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1c47c:	687b      	ldr	r3, [r7, #4]
   1c47e:	2100      	movs	r1, #0
   1c480:	0018      	movs	r0, r3
   1c482:	4b10      	ldr	r3, [pc, #64]	; (1c4c4 <vTaskDelay+0xd4>)
   1c484:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1c486:	4b10      	ldr	r3, [pc, #64]	; (1c4c8 <vTaskDelay+0xd8>)
   1c488:	4798      	blx	r3
   1c48a:	0003      	movs	r3, r0
   1c48c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1c48e:	68fb      	ldr	r3, [r7, #12]
   1c490:	2b00      	cmp	r3, #0
   1c492:	d101      	bne.n	1c498 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1c494:	4b0d      	ldr	r3, [pc, #52]	; (1c4cc <vTaskDelay+0xdc>)
   1c496:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c498:	46c0      	nop			; (mov r8, r8)
   1c49a:	46bd      	mov	sp, r7
   1c49c:	b004      	add	sp, #16
   1c49e:	bd80      	pop	{r7, pc}
   1c4a0:	20003dcc 	.word	0x20003dcc
   1c4a4:	0001c6b1 	.word	0x0001c6b1
   1c4a8:	20003ccc 	.word	0x20003ccc
   1c4ac:	000183ed 	.word	0x000183ed
   1c4b0:	200000b8 	.word	0x200000b8
   1c4b4:	000190ed 	.word	0x000190ed
   1c4b8:	000183cd 	.word	0x000183cd
   1c4bc:	0001957d 	.word	0x0001957d
   1c4c0:	00018689 	.word	0x00018689
   1c4c4:	0001d609 	.word	0x0001d609
   1c4c8:	0001c6c9 	.word	0x0001c6c9
   1c4cc:	0001a3e1 	.word	0x0001a3e1

0001c4d0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1c4d0:	b580      	push	{r7, lr}
   1c4d2:	b084      	sub	sp, #16
   1c4d4:	af00      	add	r7, sp, #0
   1c4d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1c4d8:	4b42      	ldr	r3, [pc, #264]	; (1c5e4 <vTaskSuspend+0x114>)
   1c4da:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1c4dc:	687b      	ldr	r3, [r7, #4]
   1c4de:	2b00      	cmp	r3, #0
   1c4e0:	d102      	bne.n	1c4e8 <vTaskSuspend+0x18>
   1c4e2:	4b41      	ldr	r3, [pc, #260]	; (1c5e8 <vTaskSuspend+0x118>)
   1c4e4:	681b      	ldr	r3, [r3, #0]
   1c4e6:	e000      	b.n	1c4ea <vTaskSuspend+0x1a>
   1c4e8:	687b      	ldr	r3, [r7, #4]
   1c4ea:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1c4ec:	4b3f      	ldr	r3, [pc, #252]	; (1c5ec <vTaskSuspend+0x11c>)
   1c4ee:	4798      	blx	r3
   1c4f0:	0003      	movs	r3, r0
   1c4f2:	0018      	movs	r0, r3
   1c4f4:	4b3e      	ldr	r3, [pc, #248]	; (1c5f0 <vTaskSuspend+0x120>)
   1c4f6:	4798      	blx	r3
   1c4f8:	0003      	movs	r3, r0
   1c4fa:	001a      	movs	r2, r3
   1c4fc:	4b3d      	ldr	r3, [pc, #244]	; (1c5f4 <vTaskSuspend+0x124>)
   1c4fe:	881b      	ldrh	r3, [r3, #0]
   1c500:	4013      	ands	r3, r2
   1c502:	b29b      	uxth	r3, r3
   1c504:	2b00      	cmp	r3, #0
   1c506:	d016      	beq.n	1c536 <vTaskSuspend+0x66>
   1c508:	68fb      	ldr	r3, [r7, #12]
   1c50a:	0018      	movs	r0, r3
   1c50c:	4b38      	ldr	r3, [pc, #224]	; (1c5f0 <vTaskSuspend+0x120>)
   1c50e:	4798      	blx	r3
   1c510:	0003      	movs	r3, r0
   1c512:	001a      	movs	r2, r3
   1c514:	4b37      	ldr	r3, [pc, #220]	; (1c5f4 <vTaskSuspend+0x124>)
   1c516:	881b      	ldrh	r3, [r3, #0]
   1c518:	4013      	ands	r3, r2
   1c51a:	b29b      	uxth	r3, r3
   1c51c:	2b00      	cmp	r3, #0
   1c51e:	d00a      	beq.n	1c536 <vTaskSuspend+0x66>
   1c520:	68fb      	ldr	r3, [r7, #12]
   1c522:	0018      	movs	r0, r3
   1c524:	4b34      	ldr	r3, [pc, #208]	; (1c5f8 <vTaskSuspend+0x128>)
   1c526:	4798      	blx	r3
   1c528:	0003      	movs	r3, r0
   1c52a:	b2db      	uxtb	r3, r3
   1c52c:	001a      	movs	r2, r3
   1c52e:	2103      	movs	r1, #3
   1c530:	208a      	movs	r0, #138	; 0x8a
   1c532:	4b32      	ldr	r3, [pc, #200]	; (1c5fc <vTaskSuspend+0x12c>)
   1c534:	4798      	blx	r3
   1c536:	68fb      	ldr	r3, [r7, #12]
   1c538:	0018      	movs	r0, r3
   1c53a:	4b2f      	ldr	r3, [pc, #188]	; (1c5f8 <vTaskSuspend+0x128>)
   1c53c:	4798      	blx	r3
   1c53e:	0003      	movs	r3, r0
   1c540:	b2db      	uxtb	r3, r3
   1c542:	0018      	movs	r0, r3
   1c544:	4b2e      	ldr	r3, [pc, #184]	; (1c600 <vTaskSuspend+0x130>)
   1c546:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c548:	68fb      	ldr	r3, [r7, #12]
   1c54a:	3304      	adds	r3, #4
   1c54c:	0018      	movs	r0, r3
   1c54e:	4b2d      	ldr	r3, [pc, #180]	; (1c604 <vTaskSuspend+0x134>)
   1c550:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c552:	68fb      	ldr	r3, [r7, #12]
   1c554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c556:	2b00      	cmp	r3, #0
   1c558:	d004      	beq.n	1c564 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c55a:	68fb      	ldr	r3, [r7, #12]
   1c55c:	3318      	adds	r3, #24
   1c55e:	0018      	movs	r0, r3
   1c560:	4b28      	ldr	r3, [pc, #160]	; (1c604 <vTaskSuspend+0x134>)
   1c562:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1c564:	68fb      	ldr	r3, [r7, #12]
   1c566:	1d1a      	adds	r2, r3, #4
   1c568:	4b27      	ldr	r3, [pc, #156]	; (1c608 <vTaskSuspend+0x138>)
   1c56a:	0011      	movs	r1, r2
   1c56c:	0018      	movs	r0, r3
   1c56e:	4b27      	ldr	r3, [pc, #156]	; (1c60c <vTaskSuspend+0x13c>)
   1c570:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1c572:	68fb      	ldr	r3, [r7, #12]
   1c574:	2250      	movs	r2, #80	; 0x50
   1c576:	5c9b      	ldrb	r3, [r3, r2]
   1c578:	b2db      	uxtb	r3, r3
   1c57a:	2b01      	cmp	r3, #1
   1c57c:	d103      	bne.n	1c586 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c57e:	68fb      	ldr	r3, [r7, #12]
   1c580:	2250      	movs	r2, #80	; 0x50
   1c582:	2100      	movs	r1, #0
   1c584:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1c586:	4b22      	ldr	r3, [pc, #136]	; (1c610 <vTaskSuspend+0x140>)
   1c588:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1c58a:	4b22      	ldr	r3, [pc, #136]	; (1c614 <vTaskSuspend+0x144>)
   1c58c:	681b      	ldr	r3, [r3, #0]
   1c58e:	2b00      	cmp	r3, #0
   1c590:	d005      	beq.n	1c59e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1c592:	4b14      	ldr	r3, [pc, #80]	; (1c5e4 <vTaskSuspend+0x114>)
   1c594:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1c596:	4b20      	ldr	r3, [pc, #128]	; (1c618 <vTaskSuspend+0x148>)
   1c598:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1c59a:	4b1d      	ldr	r3, [pc, #116]	; (1c610 <vTaskSuspend+0x140>)
   1c59c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1c59e:	4b12      	ldr	r3, [pc, #72]	; (1c5e8 <vTaskSuspend+0x118>)
   1c5a0:	681b      	ldr	r3, [r3, #0]
   1c5a2:	68fa      	ldr	r2, [r7, #12]
   1c5a4:	429a      	cmp	r2, r3
   1c5a6:	d118      	bne.n	1c5da <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1c5a8:	4b1a      	ldr	r3, [pc, #104]	; (1c614 <vTaskSuspend+0x144>)
   1c5aa:	681b      	ldr	r3, [r3, #0]
   1c5ac:	2b00      	cmp	r3, #0
   1c5ae:	d008      	beq.n	1c5c2 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1c5b0:	4b1a      	ldr	r3, [pc, #104]	; (1c61c <vTaskSuspend+0x14c>)
   1c5b2:	681b      	ldr	r3, [r3, #0]
   1c5b4:	2b00      	cmp	r3, #0
   1c5b6:	d001      	beq.n	1c5bc <vTaskSuspend+0xec>
   1c5b8:	b672      	cpsid	i
   1c5ba:	e7fe      	b.n	1c5ba <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1c5bc:	4b18      	ldr	r3, [pc, #96]	; (1c620 <vTaskSuspend+0x150>)
   1c5be:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c5c0:	e00b      	b.n	1c5da <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1c5c2:	4b11      	ldr	r3, [pc, #68]	; (1c608 <vTaskSuspend+0x138>)
   1c5c4:	681a      	ldr	r2, [r3, #0]
   1c5c6:	4b17      	ldr	r3, [pc, #92]	; (1c624 <vTaskSuspend+0x154>)
   1c5c8:	681b      	ldr	r3, [r3, #0]
   1c5ca:	429a      	cmp	r2, r3
   1c5cc:	d103      	bne.n	1c5d6 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1c5ce:	4b06      	ldr	r3, [pc, #24]	; (1c5e8 <vTaskSuspend+0x118>)
   1c5d0:	2200      	movs	r2, #0
   1c5d2:	601a      	str	r2, [r3, #0]
	}
   1c5d4:	e001      	b.n	1c5da <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1c5d6:	4b14      	ldr	r3, [pc, #80]	; (1c628 <vTaskSuspend+0x158>)
   1c5d8:	4798      	blx	r3
	}
   1c5da:	46c0      	nop			; (mov r8, r8)
   1c5dc:	46bd      	mov	sp, r7
   1c5de:	b004      	add	sp, #16
   1c5e0:	bd80      	pop	{r7, pc}
   1c5e2:	46c0      	nop			; (mov r8, r8)
   1c5e4:	0001a3f9 	.word	0x0001a3f9
   1c5e8:	20003ccc 	.word	0x20003ccc
   1c5ec:	00018689 	.word	0x00018689
   1c5f0:	000183ed 	.word	0x000183ed
   1c5f4:	200000b8 	.word	0x200000b8
   1c5f8:	000183cd 	.word	0x000183cd
   1c5fc:	00018de5 	.word	0x00018de5
   1c600:	0001957d 	.word	0x0001957d
   1c604:	0001a267 	.word	0x0001a267
   1c608:	20003d90 	.word	0x20003d90
   1c60c:	0001a1b7 	.word	0x0001a1b7
   1c610:	0001a41d 	.word	0x0001a41d
   1c614:	20003db0 	.word	0x20003db0
   1c618:	0001d0b5 	.word	0x0001d0b5
   1c61c:	20003dcc 	.word	0x20003dcc
   1c620:	0001a3e1 	.word	0x0001a3e1
   1c624:	20003da4 	.word	0x20003da4
   1c628:	0001ca45 	.word	0x0001ca45

0001c62c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1c62c:	b590      	push	{r4, r7, lr}
   1c62e:	b085      	sub	sp, #20
   1c630:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1c632:	4916      	ldr	r1, [pc, #88]	; (1c68c <vTaskStartScheduler+0x60>)
   1c634:	4816      	ldr	r0, [pc, #88]	; (1c690 <vTaskStartScheduler+0x64>)
   1c636:	4b17      	ldr	r3, [pc, #92]	; (1c694 <vTaskStartScheduler+0x68>)
   1c638:	9301      	str	r3, [sp, #4]
   1c63a:	2300      	movs	r3, #0
   1c63c:	9300      	str	r3, [sp, #0]
   1c63e:	2300      	movs	r3, #0
   1c640:	2296      	movs	r2, #150	; 0x96
   1c642:	4c15      	ldr	r4, [pc, #84]	; (1c698 <vTaskStartScheduler+0x6c>)
   1c644:	47a0      	blx	r4
   1c646:	0003      	movs	r3, r0
   1c648:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1c64a:	687b      	ldr	r3, [r7, #4]
   1c64c:	2b01      	cmp	r3, #1
   1c64e:	d103      	bne.n	1c658 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1c650:	4b12      	ldr	r3, [pc, #72]	; (1c69c <vTaskStartScheduler+0x70>)
   1c652:	4798      	blx	r3
   1c654:	0003      	movs	r3, r0
   1c656:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1c658:	687b      	ldr	r3, [r7, #4]
   1c65a:	2b01      	cmp	r3, #1
   1c65c:	d10d      	bne.n	1c67a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1c65e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1c660:	4b0f      	ldr	r3, [pc, #60]	; (1c6a0 <vTaskStartScheduler+0x74>)
   1c662:	2201      	movs	r2, #1
   1c664:	4252      	negs	r2, r2
   1c666:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1c668:	4b0e      	ldr	r3, [pc, #56]	; (1c6a4 <vTaskStartScheduler+0x78>)
   1c66a:	2201      	movs	r2, #1
   1c66c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1c66e:	4b0e      	ldr	r3, [pc, #56]	; (1c6a8 <vTaskStartScheduler+0x7c>)
   1c670:	2200      	movs	r2, #0
   1c672:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1c674:	4b0d      	ldr	r3, [pc, #52]	; (1c6ac <vTaskStartScheduler+0x80>)
   1c676:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1c678:	e004      	b.n	1c684 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1c67a:	687b      	ldr	r3, [r7, #4]
   1c67c:	3301      	adds	r3, #1
   1c67e:	d101      	bne.n	1c684 <vTaskStartScheduler+0x58>
   1c680:	b672      	cpsid	i
   1c682:	e7fe      	b.n	1c682 <vTaskStartScheduler+0x56>
}
   1c684:	46c0      	nop			; (mov r8, r8)
   1c686:	46bd      	mov	sp, r7
   1c688:	b003      	add	sp, #12
   1c68a:	bd90      	pop	{r4, r7, pc}
   1c68c:	00037fd0 	.word	0x00037fd0
   1c690:	0001cefd 	.word	0x0001cefd
   1c694:	20003dc8 	.word	0x20003dc8
   1c698:	0001c055 	.word	0x0001c055
   1c69c:	0001d6bd 	.word	0x0001d6bd
   1c6a0:	20003dc4 	.word	0x20003dc4
   1c6a4:	20003db0 	.word	0x20003db0
   1c6a8:	20003da8 	.word	0x20003da8
   1c6ac:	0001a389 	.word	0x0001a389

0001c6b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1c6b0:	b580      	push	{r7, lr}
   1c6b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1c6b4:	4b03      	ldr	r3, [pc, #12]	; (1c6c4 <vTaskSuspendAll+0x14>)
   1c6b6:	681b      	ldr	r3, [r3, #0]
   1c6b8:	1c5a      	adds	r2, r3, #1
   1c6ba:	4b02      	ldr	r3, [pc, #8]	; (1c6c4 <vTaskSuspendAll+0x14>)
   1c6bc:	601a      	str	r2, [r3, #0]
}
   1c6be:	46c0      	nop			; (mov r8, r8)
   1c6c0:	46bd      	mov	sp, r7
   1c6c2:	bd80      	pop	{r7, pc}
   1c6c4:	20003dcc 	.word	0x20003dcc

0001c6c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1c6c8:	b580      	push	{r7, lr}
   1c6ca:	b084      	sub	sp, #16
   1c6cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1c6ce:	2300      	movs	r3, #0
   1c6d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1c6d2:	2300      	movs	r3, #0
   1c6d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1c6d6:	4b45      	ldr	r3, [pc, #276]	; (1c7ec <xTaskResumeAll+0x124>)
   1c6d8:	681b      	ldr	r3, [r3, #0]
   1c6da:	2b00      	cmp	r3, #0
   1c6dc:	d101      	bne.n	1c6e2 <xTaskResumeAll+0x1a>
   1c6de:	b672      	cpsid	i
   1c6e0:	e7fe      	b.n	1c6e0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1c6e2:	4b43      	ldr	r3, [pc, #268]	; (1c7f0 <xTaskResumeAll+0x128>)
   1c6e4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1c6e6:	4b41      	ldr	r3, [pc, #260]	; (1c7ec <xTaskResumeAll+0x124>)
   1c6e8:	681b      	ldr	r3, [r3, #0]
   1c6ea:	1e5a      	subs	r2, r3, #1
   1c6ec:	4b3f      	ldr	r3, [pc, #252]	; (1c7ec <xTaskResumeAll+0x124>)
   1c6ee:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c6f0:	4b3e      	ldr	r3, [pc, #248]	; (1c7ec <xTaskResumeAll+0x124>)
   1c6f2:	681b      	ldr	r3, [r3, #0]
   1c6f4:	2b00      	cmp	r3, #0
   1c6f6:	d000      	beq.n	1c6fa <xTaskResumeAll+0x32>
   1c6f8:	e071      	b.n	1c7de <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1c6fa:	4b3e      	ldr	r3, [pc, #248]	; (1c7f4 <xTaskResumeAll+0x12c>)
   1c6fc:	681b      	ldr	r3, [r3, #0]
   1c6fe:	2b00      	cmp	r3, #0
   1c700:	d100      	bne.n	1c704 <xTaskResumeAll+0x3c>
   1c702:	e06c      	b.n	1c7de <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c704:	e044      	b.n	1c790 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1c706:	4b3c      	ldr	r3, [pc, #240]	; (1c7f8 <xTaskResumeAll+0x130>)
   1c708:	68db      	ldr	r3, [r3, #12]
   1c70a:	68db      	ldr	r3, [r3, #12]
   1c70c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c70e:	68fb      	ldr	r3, [r7, #12]
   1c710:	3318      	adds	r3, #24
   1c712:	0018      	movs	r0, r3
   1c714:	4b39      	ldr	r3, [pc, #228]	; (1c7fc <xTaskResumeAll+0x134>)
   1c716:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c718:	68fb      	ldr	r3, [r7, #12]
   1c71a:	3304      	adds	r3, #4
   1c71c:	0018      	movs	r0, r3
   1c71e:	4b37      	ldr	r3, [pc, #220]	; (1c7fc <xTaskResumeAll+0x134>)
   1c720:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1c722:	68fb      	ldr	r3, [r7, #12]
   1c724:	0018      	movs	r0, r3
   1c726:	4b36      	ldr	r3, [pc, #216]	; (1c800 <xTaskResumeAll+0x138>)
   1c728:	4798      	blx	r3
   1c72a:	0003      	movs	r3, r0
   1c72c:	001a      	movs	r2, r3
   1c72e:	4b35      	ldr	r3, [pc, #212]	; (1c804 <xTaskResumeAll+0x13c>)
   1c730:	881b      	ldrh	r3, [r3, #0]
   1c732:	4013      	ands	r3, r2
   1c734:	b29b      	uxth	r3, r3
   1c736:	2b00      	cmp	r3, #0
   1c738:	d008      	beq.n	1c74c <xTaskResumeAll+0x84>
   1c73a:	68fb      	ldr	r3, [r7, #12]
   1c73c:	0018      	movs	r0, r3
   1c73e:	4b32      	ldr	r3, [pc, #200]	; (1c808 <xTaskResumeAll+0x140>)
   1c740:	4798      	blx	r3
   1c742:	0003      	movs	r3, r0
   1c744:	b2db      	uxtb	r3, r3
   1c746:	0018      	movs	r0, r3
   1c748:	4b30      	ldr	r3, [pc, #192]	; (1c80c <xTaskResumeAll+0x144>)
   1c74a:	4798      	blx	r3
   1c74c:	68fb      	ldr	r3, [r7, #12]
   1c74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c750:	4b2f      	ldr	r3, [pc, #188]	; (1c810 <xTaskResumeAll+0x148>)
   1c752:	681b      	ldr	r3, [r3, #0]
   1c754:	429a      	cmp	r2, r3
   1c756:	d903      	bls.n	1c760 <xTaskResumeAll+0x98>
   1c758:	68fb      	ldr	r3, [r7, #12]
   1c75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c75c:	4b2c      	ldr	r3, [pc, #176]	; (1c810 <xTaskResumeAll+0x148>)
   1c75e:	601a      	str	r2, [r3, #0]
   1c760:	68fb      	ldr	r3, [r7, #12]
   1c762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c764:	0013      	movs	r3, r2
   1c766:	009b      	lsls	r3, r3, #2
   1c768:	189b      	adds	r3, r3, r2
   1c76a:	009b      	lsls	r3, r3, #2
   1c76c:	4a29      	ldr	r2, [pc, #164]	; (1c814 <xTaskResumeAll+0x14c>)
   1c76e:	189a      	adds	r2, r3, r2
   1c770:	68fb      	ldr	r3, [r7, #12]
   1c772:	3304      	adds	r3, #4
   1c774:	0019      	movs	r1, r3
   1c776:	0010      	movs	r0, r2
   1c778:	4b27      	ldr	r3, [pc, #156]	; (1c818 <xTaskResumeAll+0x150>)
   1c77a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c77c:	68fb      	ldr	r3, [r7, #12]
   1c77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c780:	4b26      	ldr	r3, [pc, #152]	; (1c81c <xTaskResumeAll+0x154>)
   1c782:	681b      	ldr	r3, [r3, #0]
   1c784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c786:	429a      	cmp	r2, r3
   1c788:	d302      	bcc.n	1c790 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1c78a:	4b25      	ldr	r3, [pc, #148]	; (1c820 <xTaskResumeAll+0x158>)
   1c78c:	2201      	movs	r2, #1
   1c78e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c790:	4b19      	ldr	r3, [pc, #100]	; (1c7f8 <xTaskResumeAll+0x130>)
   1c792:	681b      	ldr	r3, [r3, #0]
   1c794:	2b00      	cmp	r3, #0
   1c796:	d1b6      	bne.n	1c706 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1c798:	68fb      	ldr	r3, [r7, #12]
   1c79a:	2b00      	cmp	r3, #0
   1c79c:	d001      	beq.n	1c7a2 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1c79e:	4b21      	ldr	r3, [pc, #132]	; (1c824 <xTaskResumeAll+0x15c>)
   1c7a0:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1c7a2:	4b21      	ldr	r3, [pc, #132]	; (1c828 <xTaskResumeAll+0x160>)
   1c7a4:	681b      	ldr	r3, [r3, #0]
   1c7a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1c7a8:	687b      	ldr	r3, [r7, #4]
   1c7aa:	2b00      	cmp	r3, #0
   1c7ac:	d00f      	beq.n	1c7ce <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1c7ae:	4b1f      	ldr	r3, [pc, #124]	; (1c82c <xTaskResumeAll+0x164>)
   1c7b0:	4798      	blx	r3
   1c7b2:	1e03      	subs	r3, r0, #0
   1c7b4:	d002      	beq.n	1c7bc <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1c7b6:	4b1a      	ldr	r3, [pc, #104]	; (1c820 <xTaskResumeAll+0x158>)
   1c7b8:	2201      	movs	r2, #1
   1c7ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1c7bc:	687b      	ldr	r3, [r7, #4]
   1c7be:	3b01      	subs	r3, #1
   1c7c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1c7c2:	687b      	ldr	r3, [r7, #4]
   1c7c4:	2b00      	cmp	r3, #0
   1c7c6:	d1f2      	bne.n	1c7ae <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1c7c8:	4b17      	ldr	r3, [pc, #92]	; (1c828 <xTaskResumeAll+0x160>)
   1c7ca:	2200      	movs	r2, #0
   1c7cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1c7ce:	4b14      	ldr	r3, [pc, #80]	; (1c820 <xTaskResumeAll+0x158>)
   1c7d0:	681b      	ldr	r3, [r3, #0]
   1c7d2:	2b00      	cmp	r3, #0
   1c7d4:	d003      	beq.n	1c7de <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1c7d6:	2301      	movs	r3, #1
   1c7d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1c7da:	4b15      	ldr	r3, [pc, #84]	; (1c830 <xTaskResumeAll+0x168>)
   1c7dc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1c7de:	4b15      	ldr	r3, [pc, #84]	; (1c834 <xTaskResumeAll+0x16c>)
   1c7e0:	4798      	blx	r3

	return xAlreadyYielded;
   1c7e2:	68bb      	ldr	r3, [r7, #8]
}
   1c7e4:	0018      	movs	r0, r3
   1c7e6:	46bd      	mov	sp, r7
   1c7e8:	b004      	add	sp, #16
   1c7ea:	bd80      	pop	{r7, pc}
   1c7ec:	20003dcc 	.word	0x20003dcc
   1c7f0:	0001a3f9 	.word	0x0001a3f9
   1c7f4:	20003da4 	.word	0x20003da4
   1c7f8:	20003d64 	.word	0x20003d64
   1c7fc:	0001a267 	.word	0x0001a267
   1c800:	000183ed 	.word	0x000183ed
   1c804:	200000b8 	.word	0x200000b8
   1c808:	000183cd 	.word	0x000183cd
   1c80c:	00018b9d 	.word	0x00018b9d
   1c810:	20003dac 	.word	0x20003dac
   1c814:	20003cd0 	.word	0x20003cd0
   1c818:	0001a1b7 	.word	0x0001a1b7
   1c81c:	20003ccc 	.word	0x20003ccc
   1c820:	20003db8 	.word	0x20003db8
   1c824:	0001d0b5 	.word	0x0001d0b5
   1c828:	20003db4 	.word	0x20003db4
   1c82c:	0001c855 	.word	0x0001c855
   1c830:	0001a3e1 	.word	0x0001a3e1
   1c834:	0001a41d 	.word	0x0001a41d

0001c838 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1c838:	b580      	push	{r7, lr}
   1c83a:	b082      	sub	sp, #8
   1c83c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1c83e:	4b04      	ldr	r3, [pc, #16]	; (1c850 <xTaskGetTickCount+0x18>)
   1c840:	681b      	ldr	r3, [r3, #0]
   1c842:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1c844:	687b      	ldr	r3, [r7, #4]
}
   1c846:	0018      	movs	r0, r3
   1c848:	46bd      	mov	sp, r7
   1c84a:	b002      	add	sp, #8
   1c84c:	bd80      	pop	{r7, pc}
   1c84e:	46c0      	nop			; (mov r8, r8)
   1c850:	20003da8 	.word	0x20003da8

0001c854 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1c854:	b580      	push	{r7, lr}
   1c856:	b086      	sub	sp, #24
   1c858:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1c85a:	2300      	movs	r3, #0
   1c85c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1c85e:	4b64      	ldr	r3, [pc, #400]	; (1c9f0 <xTaskIncrementTick+0x19c>)
   1c860:	681b      	ldr	r3, [r3, #0]
   1c862:	2b01      	cmp	r3, #1
   1c864:	d003      	beq.n	1c86e <xTaskIncrementTick+0x1a>
   1c866:	4b63      	ldr	r3, [pc, #396]	; (1c9f4 <xTaskIncrementTick+0x1a0>)
   1c868:	681b      	ldr	r3, [r3, #0]
   1c86a:	2b00      	cmp	r3, #0
   1c86c:	d107      	bne.n	1c87e <xTaskIncrementTick+0x2a>
   1c86e:	4b62      	ldr	r3, [pc, #392]	; (1c9f8 <xTaskIncrementTick+0x1a4>)
   1c870:	681b      	ldr	r3, [r3, #0]
   1c872:	1c5a      	adds	r2, r3, #1
   1c874:	4b60      	ldr	r3, [pc, #384]	; (1c9f8 <xTaskIncrementTick+0x1a4>)
   1c876:	601a      	str	r2, [r3, #0]
   1c878:	2000      	movs	r0, #0
   1c87a:	4b60      	ldr	r3, [pc, #384]	; (1c9fc <xTaskIncrementTick+0x1a8>)
   1c87c:	4798      	blx	r3
   1c87e:	4b5c      	ldr	r3, [pc, #368]	; (1c9f0 <xTaskIncrementTick+0x19c>)
   1c880:	681b      	ldr	r3, [r3, #0]
   1c882:	2b00      	cmp	r3, #0
   1c884:	d106      	bne.n	1c894 <xTaskIncrementTick+0x40>
   1c886:	4b5e      	ldr	r3, [pc, #376]	; (1ca00 <xTaskIncrementTick+0x1ac>)
   1c888:	681b      	ldr	r3, [r3, #0]
   1c88a:	3301      	adds	r3, #1
   1c88c:	0019      	movs	r1, r3
   1c88e:	2003      	movs	r0, #3
   1c890:	4b5c      	ldr	r3, [pc, #368]	; (1ca04 <xTaskIncrementTick+0x1b0>)
   1c892:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c894:	4b56      	ldr	r3, [pc, #344]	; (1c9f0 <xTaskIncrementTick+0x19c>)
   1c896:	681b      	ldr	r3, [r3, #0]
   1c898:	2b00      	cmp	r3, #0
   1c89a:	d000      	beq.n	1c89e <xTaskIncrementTick+0x4a>
   1c89c:	e098      	b.n	1c9d0 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1c89e:	4b58      	ldr	r3, [pc, #352]	; (1ca00 <xTaskIncrementTick+0x1ac>)
   1c8a0:	681b      	ldr	r3, [r3, #0]
   1c8a2:	3301      	adds	r3, #1
   1c8a4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1c8a6:	4b56      	ldr	r3, [pc, #344]	; (1ca00 <xTaskIncrementTick+0x1ac>)
   1c8a8:	693a      	ldr	r2, [r7, #16]
   1c8aa:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1c8ac:	693b      	ldr	r3, [r7, #16]
   1c8ae:	2b00      	cmp	r3, #0
   1c8b0:	d117      	bne.n	1c8e2 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1c8b2:	4b55      	ldr	r3, [pc, #340]	; (1ca08 <xTaskIncrementTick+0x1b4>)
   1c8b4:	681b      	ldr	r3, [r3, #0]
   1c8b6:	681b      	ldr	r3, [r3, #0]
   1c8b8:	2b00      	cmp	r3, #0
   1c8ba:	d001      	beq.n	1c8c0 <xTaskIncrementTick+0x6c>
   1c8bc:	b672      	cpsid	i
   1c8be:	e7fe      	b.n	1c8be <xTaskIncrementTick+0x6a>
   1c8c0:	4b51      	ldr	r3, [pc, #324]	; (1ca08 <xTaskIncrementTick+0x1b4>)
   1c8c2:	681b      	ldr	r3, [r3, #0]
   1c8c4:	60fb      	str	r3, [r7, #12]
   1c8c6:	4b51      	ldr	r3, [pc, #324]	; (1ca0c <xTaskIncrementTick+0x1b8>)
   1c8c8:	681a      	ldr	r2, [r3, #0]
   1c8ca:	4b4f      	ldr	r3, [pc, #316]	; (1ca08 <xTaskIncrementTick+0x1b4>)
   1c8cc:	601a      	str	r2, [r3, #0]
   1c8ce:	4b4f      	ldr	r3, [pc, #316]	; (1ca0c <xTaskIncrementTick+0x1b8>)
   1c8d0:	68fa      	ldr	r2, [r7, #12]
   1c8d2:	601a      	str	r2, [r3, #0]
   1c8d4:	4b4e      	ldr	r3, [pc, #312]	; (1ca10 <xTaskIncrementTick+0x1bc>)
   1c8d6:	681b      	ldr	r3, [r3, #0]
   1c8d8:	1c5a      	adds	r2, r3, #1
   1c8da:	4b4d      	ldr	r3, [pc, #308]	; (1ca10 <xTaskIncrementTick+0x1bc>)
   1c8dc:	601a      	str	r2, [r3, #0]
   1c8de:	4b4d      	ldr	r3, [pc, #308]	; (1ca14 <xTaskIncrementTick+0x1c0>)
   1c8e0:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1c8e2:	4b4d      	ldr	r3, [pc, #308]	; (1ca18 <xTaskIncrementTick+0x1c4>)
   1c8e4:	681b      	ldr	r3, [r3, #0]
   1c8e6:	693a      	ldr	r2, [r7, #16]
   1c8e8:	429a      	cmp	r2, r3
   1c8ea:	d363      	bcc.n	1c9b4 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c8ec:	4b46      	ldr	r3, [pc, #280]	; (1ca08 <xTaskIncrementTick+0x1b4>)
   1c8ee:	681b      	ldr	r3, [r3, #0]
   1c8f0:	681b      	ldr	r3, [r3, #0]
   1c8f2:	2b00      	cmp	r3, #0
   1c8f4:	d101      	bne.n	1c8fa <xTaskIncrementTick+0xa6>
   1c8f6:	2301      	movs	r3, #1
   1c8f8:	e000      	b.n	1c8fc <xTaskIncrementTick+0xa8>
   1c8fa:	2300      	movs	r3, #0
   1c8fc:	2b00      	cmp	r3, #0
   1c8fe:	d004      	beq.n	1c90a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c900:	4b45      	ldr	r3, [pc, #276]	; (1ca18 <xTaskIncrementTick+0x1c4>)
   1c902:	2201      	movs	r2, #1
   1c904:	4252      	negs	r2, r2
   1c906:	601a      	str	r2, [r3, #0]
					break;
   1c908:	e054      	b.n	1c9b4 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1c90a:	4b3f      	ldr	r3, [pc, #252]	; (1ca08 <xTaskIncrementTick+0x1b4>)
   1c90c:	681b      	ldr	r3, [r3, #0]
   1c90e:	68db      	ldr	r3, [r3, #12]
   1c910:	68db      	ldr	r3, [r3, #12]
   1c912:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1c914:	68bb      	ldr	r3, [r7, #8]
   1c916:	685b      	ldr	r3, [r3, #4]
   1c918:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1c91a:	693a      	ldr	r2, [r7, #16]
   1c91c:	687b      	ldr	r3, [r7, #4]
   1c91e:	429a      	cmp	r2, r3
   1c920:	d203      	bcs.n	1c92a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1c922:	4b3d      	ldr	r3, [pc, #244]	; (1ca18 <xTaskIncrementTick+0x1c4>)
   1c924:	687a      	ldr	r2, [r7, #4]
   1c926:	601a      	str	r2, [r3, #0]
						break;
   1c928:	e044      	b.n	1c9b4 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c92a:	68bb      	ldr	r3, [r7, #8]
   1c92c:	3304      	adds	r3, #4
   1c92e:	0018      	movs	r0, r3
   1c930:	4b3a      	ldr	r3, [pc, #232]	; (1ca1c <xTaskIncrementTick+0x1c8>)
   1c932:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c934:	68bb      	ldr	r3, [r7, #8]
   1c936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c938:	2b00      	cmp	r3, #0
   1c93a:	d004      	beq.n	1c946 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c93c:	68bb      	ldr	r3, [r7, #8]
   1c93e:	3318      	adds	r3, #24
   1c940:	0018      	movs	r0, r3
   1c942:	4b36      	ldr	r3, [pc, #216]	; (1ca1c <xTaskIncrementTick+0x1c8>)
   1c944:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1c946:	68bb      	ldr	r3, [r7, #8]
   1c948:	0018      	movs	r0, r3
   1c94a:	4b35      	ldr	r3, [pc, #212]	; (1ca20 <xTaskIncrementTick+0x1cc>)
   1c94c:	4798      	blx	r3
   1c94e:	0003      	movs	r3, r0
   1c950:	001a      	movs	r2, r3
   1c952:	4b34      	ldr	r3, [pc, #208]	; (1ca24 <xTaskIncrementTick+0x1d0>)
   1c954:	881b      	ldrh	r3, [r3, #0]
   1c956:	4013      	ands	r3, r2
   1c958:	b29b      	uxth	r3, r3
   1c95a:	2b00      	cmp	r3, #0
   1c95c:	d008      	beq.n	1c970 <xTaskIncrementTick+0x11c>
   1c95e:	68bb      	ldr	r3, [r7, #8]
   1c960:	0018      	movs	r0, r3
   1c962:	4b31      	ldr	r3, [pc, #196]	; (1ca28 <xTaskIncrementTick+0x1d4>)
   1c964:	4798      	blx	r3
   1c966:	0003      	movs	r3, r0
   1c968:	b2db      	uxtb	r3, r3
   1c96a:	0018      	movs	r0, r3
   1c96c:	4b2f      	ldr	r3, [pc, #188]	; (1ca2c <xTaskIncrementTick+0x1d8>)
   1c96e:	4798      	blx	r3
   1c970:	68bb      	ldr	r3, [r7, #8]
   1c972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c974:	4b2e      	ldr	r3, [pc, #184]	; (1ca30 <xTaskIncrementTick+0x1dc>)
   1c976:	681b      	ldr	r3, [r3, #0]
   1c978:	429a      	cmp	r2, r3
   1c97a:	d903      	bls.n	1c984 <xTaskIncrementTick+0x130>
   1c97c:	68bb      	ldr	r3, [r7, #8]
   1c97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c980:	4b2b      	ldr	r3, [pc, #172]	; (1ca30 <xTaskIncrementTick+0x1dc>)
   1c982:	601a      	str	r2, [r3, #0]
   1c984:	68bb      	ldr	r3, [r7, #8]
   1c986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c988:	0013      	movs	r3, r2
   1c98a:	009b      	lsls	r3, r3, #2
   1c98c:	189b      	adds	r3, r3, r2
   1c98e:	009b      	lsls	r3, r3, #2
   1c990:	4a28      	ldr	r2, [pc, #160]	; (1ca34 <xTaskIncrementTick+0x1e0>)
   1c992:	189a      	adds	r2, r3, r2
   1c994:	68bb      	ldr	r3, [r7, #8]
   1c996:	3304      	adds	r3, #4
   1c998:	0019      	movs	r1, r3
   1c99a:	0010      	movs	r0, r2
   1c99c:	4b26      	ldr	r3, [pc, #152]	; (1ca38 <xTaskIncrementTick+0x1e4>)
   1c99e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c9a0:	68bb      	ldr	r3, [r7, #8]
   1c9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c9a4:	4b25      	ldr	r3, [pc, #148]	; (1ca3c <xTaskIncrementTick+0x1e8>)
   1c9a6:	681b      	ldr	r3, [r3, #0]
   1c9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c9aa:	429a      	cmp	r2, r3
   1c9ac:	d39e      	bcc.n	1c8ec <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1c9ae:	2301      	movs	r3, #1
   1c9b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c9b2:	e79b      	b.n	1c8ec <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1c9b4:	4b21      	ldr	r3, [pc, #132]	; (1ca3c <xTaskIncrementTick+0x1e8>)
   1c9b6:	681b      	ldr	r3, [r3, #0]
   1c9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c9ba:	491e      	ldr	r1, [pc, #120]	; (1ca34 <xTaskIncrementTick+0x1e0>)
   1c9bc:	0013      	movs	r3, r2
   1c9be:	009b      	lsls	r3, r3, #2
   1c9c0:	189b      	adds	r3, r3, r2
   1c9c2:	009b      	lsls	r3, r3, #2
   1c9c4:	585b      	ldr	r3, [r3, r1]
   1c9c6:	2b01      	cmp	r3, #1
   1c9c8:	d907      	bls.n	1c9da <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1c9ca:	2301      	movs	r3, #1
   1c9cc:	617b      	str	r3, [r7, #20]
   1c9ce:	e004      	b.n	1c9da <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1c9d0:	4b08      	ldr	r3, [pc, #32]	; (1c9f4 <xTaskIncrementTick+0x1a0>)
   1c9d2:	681b      	ldr	r3, [r3, #0]
   1c9d4:	1c5a      	adds	r2, r3, #1
   1c9d6:	4b07      	ldr	r3, [pc, #28]	; (1c9f4 <xTaskIncrementTick+0x1a0>)
   1c9d8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1c9da:	4b19      	ldr	r3, [pc, #100]	; (1ca40 <xTaskIncrementTick+0x1ec>)
   1c9dc:	681b      	ldr	r3, [r3, #0]
   1c9de:	2b00      	cmp	r3, #0
   1c9e0:	d001      	beq.n	1c9e6 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1c9e2:	2301      	movs	r3, #1
   1c9e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1c9e6:	697b      	ldr	r3, [r7, #20]
}
   1c9e8:	0018      	movs	r0, r3
   1c9ea:	46bd      	mov	sp, r7
   1c9ec:	b006      	add	sp, #24
   1c9ee:	bd80      	pop	{r7, pc}
   1c9f0:	20003dcc 	.word	0x20003dcc
   1c9f4:	20003db4 	.word	0x20003db4
   1c9f8:	2000092c 	.word	0x2000092c
   1c9fc:	0001a081 	.word	0x0001a081
   1ca00:	20003da8 	.word	0x20003da8
   1ca04:	000190ed 	.word	0x000190ed
   1ca08:	20003d5c 	.word	0x20003d5c
   1ca0c:	20003d60 	.word	0x20003d60
   1ca10:	20003dbc 	.word	0x20003dbc
   1ca14:	0001d0b5 	.word	0x0001d0b5
   1ca18:	20003dc4 	.word	0x20003dc4
   1ca1c:	0001a267 	.word	0x0001a267
   1ca20:	000183ed 	.word	0x000183ed
   1ca24:	200000b8 	.word	0x200000b8
   1ca28:	000183cd 	.word	0x000183cd
   1ca2c:	00018b9d 	.word	0x00018b9d
   1ca30:	20003dac 	.word	0x20003dac
   1ca34:	20003cd0 	.word	0x20003cd0
   1ca38:	0001a1b7 	.word	0x0001a1b7
   1ca3c:	20003ccc 	.word	0x20003ccc
   1ca40:	20003db8 	.word	0x20003db8

0001ca44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1ca44:	b580      	push	{r7, lr}
   1ca46:	b082      	sub	sp, #8
   1ca48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1ca4a:	4b3a      	ldr	r3, [pc, #232]	; (1cb34 <vTaskSwitchContext+0xf0>)
   1ca4c:	681b      	ldr	r3, [r3, #0]
   1ca4e:	2b00      	cmp	r3, #0
   1ca50:	d003      	beq.n	1ca5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1ca52:	4b39      	ldr	r3, [pc, #228]	; (1cb38 <vTaskSwitchContext+0xf4>)
   1ca54:	2201      	movs	r2, #1
   1ca56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1ca58:	e067      	b.n	1cb2a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1ca5a:	4b37      	ldr	r3, [pc, #220]	; (1cb38 <vTaskSwitchContext+0xf4>)
   1ca5c:	2200      	movs	r2, #0
   1ca5e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1ca60:	4b36      	ldr	r3, [pc, #216]	; (1cb3c <vTaskSwitchContext+0xf8>)
   1ca62:	681b      	ldr	r3, [r3, #0]
   1ca64:	681a      	ldr	r2, [r3, #0]
   1ca66:	4b35      	ldr	r3, [pc, #212]	; (1cb3c <vTaskSwitchContext+0xf8>)
   1ca68:	681b      	ldr	r3, [r3, #0]
   1ca6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ca6c:	429a      	cmp	r2, r3
   1ca6e:	d808      	bhi.n	1ca82 <vTaskSwitchContext+0x3e>
   1ca70:	4b32      	ldr	r3, [pc, #200]	; (1cb3c <vTaskSwitchContext+0xf8>)
   1ca72:	681a      	ldr	r2, [r3, #0]
   1ca74:	4b31      	ldr	r3, [pc, #196]	; (1cb3c <vTaskSwitchContext+0xf8>)
   1ca76:	681b      	ldr	r3, [r3, #0]
   1ca78:	3334      	adds	r3, #52	; 0x34
   1ca7a:	0019      	movs	r1, r3
   1ca7c:	0010      	movs	r0, r2
   1ca7e:	4b30      	ldr	r3, [pc, #192]	; (1cb40 <vTaskSwitchContext+0xfc>)
   1ca80:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1ca82:	4b30      	ldr	r3, [pc, #192]	; (1cb44 <vTaskSwitchContext+0x100>)
   1ca84:	681b      	ldr	r3, [r3, #0]
   1ca86:	607b      	str	r3, [r7, #4]
   1ca88:	e007      	b.n	1ca9a <vTaskSwitchContext+0x56>
   1ca8a:	687b      	ldr	r3, [r7, #4]
   1ca8c:	2b00      	cmp	r3, #0
   1ca8e:	d101      	bne.n	1ca94 <vTaskSwitchContext+0x50>
   1ca90:	b672      	cpsid	i
   1ca92:	e7fe      	b.n	1ca92 <vTaskSwitchContext+0x4e>
   1ca94:	687b      	ldr	r3, [r7, #4]
   1ca96:	3b01      	subs	r3, #1
   1ca98:	607b      	str	r3, [r7, #4]
   1ca9a:	492b      	ldr	r1, [pc, #172]	; (1cb48 <vTaskSwitchContext+0x104>)
   1ca9c:	687a      	ldr	r2, [r7, #4]
   1ca9e:	0013      	movs	r3, r2
   1caa0:	009b      	lsls	r3, r3, #2
   1caa2:	189b      	adds	r3, r3, r2
   1caa4:	009b      	lsls	r3, r3, #2
   1caa6:	585b      	ldr	r3, [r3, r1]
   1caa8:	2b00      	cmp	r3, #0
   1caaa:	d0ee      	beq.n	1ca8a <vTaskSwitchContext+0x46>
   1caac:	687a      	ldr	r2, [r7, #4]
   1caae:	0013      	movs	r3, r2
   1cab0:	009b      	lsls	r3, r3, #2
   1cab2:	189b      	adds	r3, r3, r2
   1cab4:	009b      	lsls	r3, r3, #2
   1cab6:	4a24      	ldr	r2, [pc, #144]	; (1cb48 <vTaskSwitchContext+0x104>)
   1cab8:	189b      	adds	r3, r3, r2
   1caba:	603b      	str	r3, [r7, #0]
   1cabc:	683b      	ldr	r3, [r7, #0]
   1cabe:	685b      	ldr	r3, [r3, #4]
   1cac0:	685a      	ldr	r2, [r3, #4]
   1cac2:	683b      	ldr	r3, [r7, #0]
   1cac4:	605a      	str	r2, [r3, #4]
   1cac6:	683b      	ldr	r3, [r7, #0]
   1cac8:	685a      	ldr	r2, [r3, #4]
   1caca:	683b      	ldr	r3, [r7, #0]
   1cacc:	3308      	adds	r3, #8
   1cace:	429a      	cmp	r2, r3
   1cad0:	d104      	bne.n	1cadc <vTaskSwitchContext+0x98>
   1cad2:	683b      	ldr	r3, [r7, #0]
   1cad4:	685b      	ldr	r3, [r3, #4]
   1cad6:	685a      	ldr	r2, [r3, #4]
   1cad8:	683b      	ldr	r3, [r7, #0]
   1cada:	605a      	str	r2, [r3, #4]
   1cadc:	683b      	ldr	r3, [r7, #0]
   1cade:	685b      	ldr	r3, [r3, #4]
   1cae0:	68da      	ldr	r2, [r3, #12]
   1cae2:	4b16      	ldr	r3, [pc, #88]	; (1cb3c <vTaskSwitchContext+0xf8>)
   1cae4:	601a      	str	r2, [r3, #0]
   1cae6:	4b17      	ldr	r3, [pc, #92]	; (1cb44 <vTaskSwitchContext+0x100>)
   1cae8:	687a      	ldr	r2, [r7, #4]
   1caea:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1caec:	4b17      	ldr	r3, [pc, #92]	; (1cb4c <vTaskSwitchContext+0x108>)
   1caee:	2201      	movs	r2, #1
   1caf0:	601a      	str	r2, [r3, #0]
   1caf2:	4b17      	ldr	r3, [pc, #92]	; (1cb50 <vTaskSwitchContext+0x10c>)
   1caf4:	4798      	blx	r3
   1caf6:	0003      	movs	r3, r0
   1caf8:	0018      	movs	r0, r3
   1cafa:	4b16      	ldr	r3, [pc, #88]	; (1cb54 <vTaskSwitchContext+0x110>)
   1cafc:	4798      	blx	r3
   1cafe:	0003      	movs	r3, r0
   1cb00:	001a      	movs	r2, r3
   1cb02:	4b15      	ldr	r3, [pc, #84]	; (1cb58 <vTaskSwitchContext+0x114>)
   1cb04:	881b      	ldrh	r3, [r3, #0]
   1cb06:	4013      	ands	r3, r2
   1cb08:	b29b      	uxth	r3, r3
   1cb0a:	2b00      	cmp	r3, #0
   1cb0c:	d00a      	beq.n	1cb24 <vTaskSwitchContext+0xe0>
   1cb0e:	4b10      	ldr	r3, [pc, #64]	; (1cb50 <vTaskSwitchContext+0x10c>)
   1cb10:	4798      	blx	r3
   1cb12:	0003      	movs	r3, r0
   1cb14:	0018      	movs	r0, r3
   1cb16:	4b11      	ldr	r3, [pc, #68]	; (1cb5c <vTaskSwitchContext+0x118>)
   1cb18:	4798      	blx	r3
   1cb1a:	0003      	movs	r3, r0
   1cb1c:	b2db      	uxtb	r3, r3
   1cb1e:	0018      	movs	r0, r3
   1cb20:	4b0f      	ldr	r3, [pc, #60]	; (1cb60 <vTaskSwitchContext+0x11c>)
   1cb22:	4798      	blx	r3
   1cb24:	4b09      	ldr	r3, [pc, #36]	; (1cb4c <vTaskSwitchContext+0x108>)
   1cb26:	2202      	movs	r2, #2
   1cb28:	601a      	str	r2, [r3, #0]
}
   1cb2a:	46c0      	nop			; (mov r8, r8)
   1cb2c:	46bd      	mov	sp, r7
   1cb2e:	b002      	add	sp, #8
   1cb30:	bd80      	pop	{r7, pc}
   1cb32:	46c0      	nop			; (mov r8, r8)
   1cb34:	20003dcc 	.word	0x20003dcc
   1cb38:	20003db8 	.word	0x20003db8
   1cb3c:	20003ccc 	.word	0x20003ccc
   1cb40:	000328ad 	.word	0x000328ad
   1cb44:	20003dac 	.word	0x20003dac
   1cb48:	20003cd0 	.word	0x20003cd0
   1cb4c:	20000938 	.word	0x20000938
   1cb50:	00018689 	.word	0x00018689
   1cb54:	000183ed 	.word	0x000183ed
   1cb58:	200000b8 	.word	0x200000b8
   1cb5c:	000183cd 	.word	0x000183cd
   1cb60:	000191e9 	.word	0x000191e9

0001cb64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1cb64:	b580      	push	{r7, lr}
   1cb66:	b082      	sub	sp, #8
   1cb68:	af00      	add	r7, sp, #0
   1cb6a:	6078      	str	r0, [r7, #4]
   1cb6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1cb6e:	687b      	ldr	r3, [r7, #4]
   1cb70:	2b00      	cmp	r3, #0
   1cb72:	d101      	bne.n	1cb78 <vTaskPlaceOnEventList+0x14>
   1cb74:	b672      	cpsid	i
   1cb76:	e7fe      	b.n	1cb76 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1cb78:	4b08      	ldr	r3, [pc, #32]	; (1cb9c <vTaskPlaceOnEventList+0x38>)
   1cb7a:	681b      	ldr	r3, [r3, #0]
   1cb7c:	3318      	adds	r3, #24
   1cb7e:	001a      	movs	r2, r3
   1cb80:	687b      	ldr	r3, [r7, #4]
   1cb82:	0011      	movs	r1, r2
   1cb84:	0018      	movs	r0, r3
   1cb86:	4b06      	ldr	r3, [pc, #24]	; (1cba0 <vTaskPlaceOnEventList+0x3c>)
   1cb88:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1cb8a:	683b      	ldr	r3, [r7, #0]
   1cb8c:	2101      	movs	r1, #1
   1cb8e:	0018      	movs	r0, r3
   1cb90:	4b04      	ldr	r3, [pc, #16]	; (1cba4 <vTaskPlaceOnEventList+0x40>)
   1cb92:	4798      	blx	r3
}
   1cb94:	46c0      	nop			; (mov r8, r8)
   1cb96:	46bd      	mov	sp, r7
   1cb98:	b002      	add	sp, #8
   1cb9a:	bd80      	pop	{r7, pc}
   1cb9c:	20003ccc 	.word	0x20003ccc
   1cba0:	0001a1fb 	.word	0x0001a1fb
   1cba4:	0001d609 	.word	0x0001d609

0001cba8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1cba8:	b580      	push	{r7, lr}
   1cbaa:	b084      	sub	sp, #16
   1cbac:	af00      	add	r7, sp, #0
   1cbae:	60f8      	str	r0, [r7, #12]
   1cbb0:	60b9      	str	r1, [r7, #8]
   1cbb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1cbb4:	68fb      	ldr	r3, [r7, #12]
   1cbb6:	2b00      	cmp	r3, #0
   1cbb8:	d101      	bne.n	1cbbe <vTaskPlaceOnEventListRestricted+0x16>
   1cbba:	b672      	cpsid	i
   1cbbc:	e7fe      	b.n	1cbbc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1cbbe:	4b28      	ldr	r3, [pc, #160]	; (1cc60 <vTaskPlaceOnEventListRestricted+0xb8>)
   1cbc0:	681b      	ldr	r3, [r3, #0]
   1cbc2:	3318      	adds	r3, #24
   1cbc4:	001a      	movs	r2, r3
   1cbc6:	68fb      	ldr	r3, [r7, #12]
   1cbc8:	0011      	movs	r1, r2
   1cbca:	0018      	movs	r0, r3
   1cbcc:	4b25      	ldr	r3, [pc, #148]	; (1cc64 <vTaskPlaceOnEventListRestricted+0xbc>)
   1cbce:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1cbd0:	687b      	ldr	r3, [r7, #4]
   1cbd2:	2b00      	cmp	r3, #0
   1cbd4:	d002      	beq.n	1cbdc <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1cbd6:	2301      	movs	r3, #1
   1cbd8:	425b      	negs	r3, r3
   1cbda:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1cbdc:	4b20      	ldr	r3, [pc, #128]	; (1cc60 <vTaskPlaceOnEventListRestricted+0xb8>)
   1cbde:	681b      	ldr	r3, [r3, #0]
   1cbe0:	0018      	movs	r0, r3
   1cbe2:	4b21      	ldr	r3, [pc, #132]	; (1cc68 <vTaskPlaceOnEventListRestricted+0xc0>)
   1cbe4:	4798      	blx	r3
   1cbe6:	0003      	movs	r3, r0
   1cbe8:	001a      	movs	r2, r3
   1cbea:	4b20      	ldr	r3, [pc, #128]	; (1cc6c <vTaskPlaceOnEventListRestricted+0xc4>)
   1cbec:	881b      	ldrh	r3, [r3, #0]
   1cbee:	4013      	ands	r3, r2
   1cbf0:	b29b      	uxth	r3, r3
   1cbf2:	2b00      	cmp	r3, #0
   1cbf4:	d011      	beq.n	1cc1a <vTaskPlaceOnEventListRestricted+0x72>
   1cbf6:	4b1e      	ldr	r3, [pc, #120]	; (1cc70 <vTaskPlaceOnEventListRestricted+0xc8>)
   1cbf8:	681a      	ldr	r2, [r3, #0]
   1cbfa:	68bb      	ldr	r3, [r7, #8]
   1cbfc:	18d3      	adds	r3, r2, r3
   1cbfe:	0019      	movs	r1, r3
   1cc00:	2088      	movs	r0, #136	; 0x88
   1cc02:	4b1c      	ldr	r3, [pc, #112]	; (1cc74 <vTaskPlaceOnEventListRestricted+0xcc>)
   1cc04:	4798      	blx	r3
   1cc06:	4b16      	ldr	r3, [pc, #88]	; (1cc60 <vTaskPlaceOnEventListRestricted+0xb8>)
   1cc08:	681b      	ldr	r3, [r3, #0]
   1cc0a:	0018      	movs	r0, r3
   1cc0c:	4b1a      	ldr	r3, [pc, #104]	; (1cc78 <vTaskPlaceOnEventListRestricted+0xd0>)
   1cc0e:	4798      	blx	r3
   1cc10:	0003      	movs	r3, r0
   1cc12:	b2db      	uxtb	r3, r3
   1cc14:	0018      	movs	r0, r3
   1cc16:	4b19      	ldr	r3, [pc, #100]	; (1cc7c <vTaskPlaceOnEventListRestricted+0xd4>)
   1cc18:	4798      	blx	r3
   1cc1a:	4b19      	ldr	r3, [pc, #100]	; (1cc80 <vTaskPlaceOnEventListRestricted+0xd8>)
   1cc1c:	4798      	blx	r3
   1cc1e:	0003      	movs	r3, r0
   1cc20:	0018      	movs	r0, r3
   1cc22:	4b11      	ldr	r3, [pc, #68]	; (1cc68 <vTaskPlaceOnEventListRestricted+0xc0>)
   1cc24:	4798      	blx	r3
   1cc26:	0003      	movs	r3, r0
   1cc28:	001a      	movs	r2, r3
   1cc2a:	4b10      	ldr	r3, [pc, #64]	; (1cc6c <vTaskPlaceOnEventListRestricted+0xc4>)
   1cc2c:	881b      	ldrh	r3, [r3, #0]
   1cc2e:	4013      	ands	r3, r2
   1cc30:	b29b      	uxth	r3, r3
   1cc32:	2b00      	cmp	r3, #0
   1cc34:	d00a      	beq.n	1cc4c <vTaskPlaceOnEventListRestricted+0xa4>
   1cc36:	4b12      	ldr	r3, [pc, #72]	; (1cc80 <vTaskPlaceOnEventListRestricted+0xd8>)
   1cc38:	4798      	blx	r3
   1cc3a:	0003      	movs	r3, r0
   1cc3c:	0018      	movs	r0, r3
   1cc3e:	4b0e      	ldr	r3, [pc, #56]	; (1cc78 <vTaskPlaceOnEventListRestricted+0xd0>)
   1cc40:	4798      	blx	r3
   1cc42:	0003      	movs	r3, r0
   1cc44:	b2db      	uxtb	r3, r3
   1cc46:	0018      	movs	r0, r3
   1cc48:	4b0c      	ldr	r3, [pc, #48]	; (1cc7c <vTaskPlaceOnEventListRestricted+0xd4>)
   1cc4a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1cc4c:	687a      	ldr	r2, [r7, #4]
   1cc4e:	68bb      	ldr	r3, [r7, #8]
   1cc50:	0011      	movs	r1, r2
   1cc52:	0018      	movs	r0, r3
   1cc54:	4b0b      	ldr	r3, [pc, #44]	; (1cc84 <vTaskPlaceOnEventListRestricted+0xdc>)
   1cc56:	4798      	blx	r3
	}
   1cc58:	46c0      	nop			; (mov r8, r8)
   1cc5a:	46bd      	mov	sp, r7
   1cc5c:	b004      	add	sp, #16
   1cc5e:	bd80      	pop	{r7, pc}
   1cc60:	20003ccc 	.word	0x20003ccc
   1cc64:	0001a1b7 	.word	0x0001a1b7
   1cc68:	000183ed 	.word	0x000183ed
   1cc6c:	200000b8 	.word	0x200000b8
   1cc70:	20003da8 	.word	0x20003da8
   1cc74:	000190ed 	.word	0x000190ed
   1cc78:	000183cd 	.word	0x000183cd
   1cc7c:	0001957d 	.word	0x0001957d
   1cc80:	00018689 	.word	0x00018689
   1cc84:	0001d609 	.word	0x0001d609

0001cc88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1cc88:	b580      	push	{r7, lr}
   1cc8a:	b084      	sub	sp, #16
   1cc8c:	af00      	add	r7, sp, #0
   1cc8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1cc90:	687b      	ldr	r3, [r7, #4]
   1cc92:	68db      	ldr	r3, [r3, #12]
   1cc94:	68db      	ldr	r3, [r3, #12]
   1cc96:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1cc98:	68bb      	ldr	r3, [r7, #8]
   1cc9a:	2b00      	cmp	r3, #0
   1cc9c:	d101      	bne.n	1cca2 <xTaskRemoveFromEventList+0x1a>
   1cc9e:	b672      	cpsid	i
   1cca0:	e7fe      	b.n	1cca0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1cca2:	68bb      	ldr	r3, [r7, #8]
   1cca4:	3318      	adds	r3, #24
   1cca6:	0018      	movs	r0, r3
   1cca8:	4b2a      	ldr	r3, [pc, #168]	; (1cd54 <xTaskRemoveFromEventList+0xcc>)
   1ccaa:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ccac:	4b2a      	ldr	r3, [pc, #168]	; (1cd58 <xTaskRemoveFromEventList+0xd0>)
   1ccae:	681b      	ldr	r3, [r3, #0]
   1ccb0:	2b00      	cmp	r3, #0
   1ccb2:	d132      	bne.n	1cd1a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1ccb4:	68bb      	ldr	r3, [r7, #8]
   1ccb6:	3304      	adds	r3, #4
   1ccb8:	0018      	movs	r0, r3
   1ccba:	4b26      	ldr	r3, [pc, #152]	; (1cd54 <xTaskRemoveFromEventList+0xcc>)
   1ccbc:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1ccbe:	68bb      	ldr	r3, [r7, #8]
   1ccc0:	0018      	movs	r0, r3
   1ccc2:	4b26      	ldr	r3, [pc, #152]	; (1cd5c <xTaskRemoveFromEventList+0xd4>)
   1ccc4:	4798      	blx	r3
   1ccc6:	0003      	movs	r3, r0
   1ccc8:	001a      	movs	r2, r3
   1ccca:	4b25      	ldr	r3, [pc, #148]	; (1cd60 <xTaskRemoveFromEventList+0xd8>)
   1cccc:	881b      	ldrh	r3, [r3, #0]
   1ccce:	4013      	ands	r3, r2
   1ccd0:	b29b      	uxth	r3, r3
   1ccd2:	2b00      	cmp	r3, #0
   1ccd4:	d008      	beq.n	1cce8 <xTaskRemoveFromEventList+0x60>
   1ccd6:	68bb      	ldr	r3, [r7, #8]
   1ccd8:	0018      	movs	r0, r3
   1ccda:	4b22      	ldr	r3, [pc, #136]	; (1cd64 <xTaskRemoveFromEventList+0xdc>)
   1ccdc:	4798      	blx	r3
   1ccde:	0003      	movs	r3, r0
   1cce0:	b2db      	uxtb	r3, r3
   1cce2:	0018      	movs	r0, r3
   1cce4:	4b20      	ldr	r3, [pc, #128]	; (1cd68 <xTaskRemoveFromEventList+0xe0>)
   1cce6:	4798      	blx	r3
   1cce8:	68bb      	ldr	r3, [r7, #8]
   1ccea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ccec:	4b1f      	ldr	r3, [pc, #124]	; (1cd6c <xTaskRemoveFromEventList+0xe4>)
   1ccee:	681b      	ldr	r3, [r3, #0]
   1ccf0:	429a      	cmp	r2, r3
   1ccf2:	d903      	bls.n	1ccfc <xTaskRemoveFromEventList+0x74>
   1ccf4:	68bb      	ldr	r3, [r7, #8]
   1ccf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ccf8:	4b1c      	ldr	r3, [pc, #112]	; (1cd6c <xTaskRemoveFromEventList+0xe4>)
   1ccfa:	601a      	str	r2, [r3, #0]
   1ccfc:	68bb      	ldr	r3, [r7, #8]
   1ccfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd00:	0013      	movs	r3, r2
   1cd02:	009b      	lsls	r3, r3, #2
   1cd04:	189b      	adds	r3, r3, r2
   1cd06:	009b      	lsls	r3, r3, #2
   1cd08:	4a19      	ldr	r2, [pc, #100]	; (1cd70 <xTaskRemoveFromEventList+0xe8>)
   1cd0a:	189a      	adds	r2, r3, r2
   1cd0c:	68bb      	ldr	r3, [r7, #8]
   1cd0e:	3304      	adds	r3, #4
   1cd10:	0019      	movs	r1, r3
   1cd12:	0010      	movs	r0, r2
   1cd14:	4b17      	ldr	r3, [pc, #92]	; (1cd74 <xTaskRemoveFromEventList+0xec>)
   1cd16:	4798      	blx	r3
   1cd18:	e007      	b.n	1cd2a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1cd1a:	68bb      	ldr	r3, [r7, #8]
   1cd1c:	3318      	adds	r3, #24
   1cd1e:	001a      	movs	r2, r3
   1cd20:	4b15      	ldr	r3, [pc, #84]	; (1cd78 <xTaskRemoveFromEventList+0xf0>)
   1cd22:	0011      	movs	r1, r2
   1cd24:	0018      	movs	r0, r3
   1cd26:	4b13      	ldr	r3, [pc, #76]	; (1cd74 <xTaskRemoveFromEventList+0xec>)
   1cd28:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1cd2a:	68bb      	ldr	r3, [r7, #8]
   1cd2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd2e:	4b13      	ldr	r3, [pc, #76]	; (1cd7c <xTaskRemoveFromEventList+0xf4>)
   1cd30:	681b      	ldr	r3, [r3, #0]
   1cd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cd34:	429a      	cmp	r2, r3
   1cd36:	d905      	bls.n	1cd44 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1cd38:	2301      	movs	r3, #1
   1cd3a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1cd3c:	4b10      	ldr	r3, [pc, #64]	; (1cd80 <xTaskRemoveFromEventList+0xf8>)
   1cd3e:	2201      	movs	r2, #1
   1cd40:	601a      	str	r2, [r3, #0]
   1cd42:	e001      	b.n	1cd48 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1cd44:	2300      	movs	r3, #0
   1cd46:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1cd48:	68fb      	ldr	r3, [r7, #12]
}
   1cd4a:	0018      	movs	r0, r3
   1cd4c:	46bd      	mov	sp, r7
   1cd4e:	b004      	add	sp, #16
   1cd50:	bd80      	pop	{r7, pc}
   1cd52:	46c0      	nop			; (mov r8, r8)
   1cd54:	0001a267 	.word	0x0001a267
   1cd58:	20003dcc 	.word	0x20003dcc
   1cd5c:	000183ed 	.word	0x000183ed
   1cd60:	200000b8 	.word	0x200000b8
   1cd64:	000183cd 	.word	0x000183cd
   1cd68:	00018b9d 	.word	0x00018b9d
   1cd6c:	20003dac 	.word	0x20003dac
   1cd70:	20003cd0 	.word	0x20003cd0
   1cd74:	0001a1b7 	.word	0x0001a1b7
   1cd78:	20003d64 	.word	0x20003d64
   1cd7c:	20003ccc 	.word	0x20003ccc
   1cd80:	20003db8 	.word	0x20003db8

0001cd84 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1cd84:	b580      	push	{r7, lr}
   1cd86:	b082      	sub	sp, #8
   1cd88:	af00      	add	r7, sp, #0
   1cd8a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1cd8c:	687b      	ldr	r3, [r7, #4]
   1cd8e:	2b00      	cmp	r3, #0
   1cd90:	d101      	bne.n	1cd96 <vTaskSetTimeOutState+0x12>
   1cd92:	b672      	cpsid	i
   1cd94:	e7fe      	b.n	1cd94 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1cd96:	4b08      	ldr	r3, [pc, #32]	; (1cdb8 <vTaskSetTimeOutState+0x34>)
   1cd98:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1cd9a:	4b08      	ldr	r3, [pc, #32]	; (1cdbc <vTaskSetTimeOutState+0x38>)
   1cd9c:	681a      	ldr	r2, [r3, #0]
   1cd9e:	687b      	ldr	r3, [r7, #4]
   1cda0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1cda2:	4b07      	ldr	r3, [pc, #28]	; (1cdc0 <vTaskSetTimeOutState+0x3c>)
   1cda4:	681a      	ldr	r2, [r3, #0]
   1cda6:	687b      	ldr	r3, [r7, #4]
   1cda8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1cdaa:	4b06      	ldr	r3, [pc, #24]	; (1cdc4 <vTaskSetTimeOutState+0x40>)
   1cdac:	4798      	blx	r3
}
   1cdae:	46c0      	nop			; (mov r8, r8)
   1cdb0:	46bd      	mov	sp, r7
   1cdb2:	b002      	add	sp, #8
   1cdb4:	bd80      	pop	{r7, pc}
   1cdb6:	46c0      	nop			; (mov r8, r8)
   1cdb8:	0001a3f9 	.word	0x0001a3f9
   1cdbc:	20003dbc 	.word	0x20003dbc
   1cdc0:	20003da8 	.word	0x20003da8
   1cdc4:	0001a41d 	.word	0x0001a41d

0001cdc8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1cdc8:	b580      	push	{r7, lr}
   1cdca:	b082      	sub	sp, #8
   1cdcc:	af00      	add	r7, sp, #0
   1cdce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1cdd0:	4b05      	ldr	r3, [pc, #20]	; (1cde8 <vTaskInternalSetTimeOutState+0x20>)
   1cdd2:	681a      	ldr	r2, [r3, #0]
   1cdd4:	687b      	ldr	r3, [r7, #4]
   1cdd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1cdd8:	4b04      	ldr	r3, [pc, #16]	; (1cdec <vTaskInternalSetTimeOutState+0x24>)
   1cdda:	681a      	ldr	r2, [r3, #0]
   1cddc:	687b      	ldr	r3, [r7, #4]
   1cdde:	605a      	str	r2, [r3, #4]
}
   1cde0:	46c0      	nop			; (mov r8, r8)
   1cde2:	46bd      	mov	sp, r7
   1cde4:	b002      	add	sp, #8
   1cde6:	bd80      	pop	{r7, pc}
   1cde8:	20003dbc 	.word	0x20003dbc
   1cdec:	20003da8 	.word	0x20003da8

0001cdf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1cdf0:	b580      	push	{r7, lr}
   1cdf2:	b086      	sub	sp, #24
   1cdf4:	af00      	add	r7, sp, #0
   1cdf6:	6078      	str	r0, [r7, #4]
   1cdf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1cdfa:	687b      	ldr	r3, [r7, #4]
   1cdfc:	2b00      	cmp	r3, #0
   1cdfe:	d101      	bne.n	1ce04 <xTaskCheckForTimeOut+0x14>
   1ce00:	b672      	cpsid	i
   1ce02:	e7fe      	b.n	1ce02 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1ce04:	683b      	ldr	r3, [r7, #0]
   1ce06:	2b00      	cmp	r3, #0
   1ce08:	d101      	bne.n	1ce0e <xTaskCheckForTimeOut+0x1e>
   1ce0a:	b672      	cpsid	i
   1ce0c:	e7fe      	b.n	1ce0c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1ce0e:	4b1e      	ldr	r3, [pc, #120]	; (1ce88 <xTaskCheckForTimeOut+0x98>)
   1ce10:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1ce12:	4b1e      	ldr	r3, [pc, #120]	; (1ce8c <xTaskCheckForTimeOut+0x9c>)
   1ce14:	681b      	ldr	r3, [r3, #0]
   1ce16:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1ce18:	687b      	ldr	r3, [r7, #4]
   1ce1a:	685b      	ldr	r3, [r3, #4]
   1ce1c:	693a      	ldr	r2, [r7, #16]
   1ce1e:	1ad3      	subs	r3, r2, r3
   1ce20:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1ce22:	683b      	ldr	r3, [r7, #0]
   1ce24:	681b      	ldr	r3, [r3, #0]
   1ce26:	3301      	adds	r3, #1
   1ce28:	d102      	bne.n	1ce30 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1ce2a:	2300      	movs	r3, #0
   1ce2c:	617b      	str	r3, [r7, #20]
   1ce2e:	e024      	b.n	1ce7a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1ce30:	687b      	ldr	r3, [r7, #4]
   1ce32:	681a      	ldr	r2, [r3, #0]
   1ce34:	4b16      	ldr	r3, [pc, #88]	; (1ce90 <xTaskCheckForTimeOut+0xa0>)
   1ce36:	681b      	ldr	r3, [r3, #0]
   1ce38:	429a      	cmp	r2, r3
   1ce3a:	d007      	beq.n	1ce4c <xTaskCheckForTimeOut+0x5c>
   1ce3c:	687b      	ldr	r3, [r7, #4]
   1ce3e:	685a      	ldr	r2, [r3, #4]
   1ce40:	693b      	ldr	r3, [r7, #16]
   1ce42:	429a      	cmp	r2, r3
   1ce44:	d802      	bhi.n	1ce4c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1ce46:	2301      	movs	r3, #1
   1ce48:	617b      	str	r3, [r7, #20]
   1ce4a:	e016      	b.n	1ce7a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1ce4c:	683b      	ldr	r3, [r7, #0]
   1ce4e:	681a      	ldr	r2, [r3, #0]
   1ce50:	68fb      	ldr	r3, [r7, #12]
   1ce52:	429a      	cmp	r2, r3
   1ce54:	d90c      	bls.n	1ce70 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1ce56:	683b      	ldr	r3, [r7, #0]
   1ce58:	681a      	ldr	r2, [r3, #0]
   1ce5a:	68fb      	ldr	r3, [r7, #12]
   1ce5c:	1ad2      	subs	r2, r2, r3
   1ce5e:	683b      	ldr	r3, [r7, #0]
   1ce60:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1ce62:	687b      	ldr	r3, [r7, #4]
   1ce64:	0018      	movs	r0, r3
   1ce66:	4b0b      	ldr	r3, [pc, #44]	; (1ce94 <xTaskCheckForTimeOut+0xa4>)
   1ce68:	4798      	blx	r3
			xReturn = pdFALSE;
   1ce6a:	2300      	movs	r3, #0
   1ce6c:	617b      	str	r3, [r7, #20]
   1ce6e:	e004      	b.n	1ce7a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1ce70:	683b      	ldr	r3, [r7, #0]
   1ce72:	2200      	movs	r2, #0
   1ce74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1ce76:	2301      	movs	r3, #1
   1ce78:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1ce7a:	4b07      	ldr	r3, [pc, #28]	; (1ce98 <xTaskCheckForTimeOut+0xa8>)
   1ce7c:	4798      	blx	r3

	return xReturn;
   1ce7e:	697b      	ldr	r3, [r7, #20]
}
   1ce80:	0018      	movs	r0, r3
   1ce82:	46bd      	mov	sp, r7
   1ce84:	b006      	add	sp, #24
   1ce86:	bd80      	pop	{r7, pc}
   1ce88:	0001a3f9 	.word	0x0001a3f9
   1ce8c:	20003da8 	.word	0x20003da8
   1ce90:	20003dbc 	.word	0x20003dbc
   1ce94:	0001cdc9 	.word	0x0001cdc9
   1ce98:	0001a41d 	.word	0x0001a41d

0001ce9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1ce9c:	b580      	push	{r7, lr}
   1ce9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1cea0:	4b02      	ldr	r3, [pc, #8]	; (1ceac <vTaskMissedYield+0x10>)
   1cea2:	2201      	movs	r2, #1
   1cea4:	601a      	str	r2, [r3, #0]
}
   1cea6:	46c0      	nop			; (mov r8, r8)
   1cea8:	46bd      	mov	sp, r7
   1ceaa:	bd80      	pop	{r7, pc}
   1ceac:	20003db8 	.word	0x20003db8

0001ceb0 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1ceb0:	b580      	push	{r7, lr}
   1ceb2:	b084      	sub	sp, #16
   1ceb4:	af00      	add	r7, sp, #0
   1ceb6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1ceb8:	687b      	ldr	r3, [r7, #4]
   1ceba:	2b00      	cmp	r3, #0
   1cebc:	d005      	beq.n	1ceca <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1cebe:	687b      	ldr	r3, [r7, #4]
   1cec0:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1cec2:	68bb      	ldr	r3, [r7, #8]
   1cec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cec6:	60fb      	str	r3, [r7, #12]
   1cec8:	e001      	b.n	1cece <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1ceca:	2300      	movs	r3, #0
   1cecc:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1cece:	68fb      	ldr	r3, [r7, #12]
	}
   1ced0:	0018      	movs	r0, r3
   1ced2:	46bd      	mov	sp, r7
   1ced4:	b004      	add	sp, #16
   1ced6:	bd80      	pop	{r7, pc}

0001ced8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1ced8:	b580      	push	{r7, lr}
   1ceda:	b084      	sub	sp, #16
   1cedc:	af00      	add	r7, sp, #0
   1cede:	6078      	str	r0, [r7, #4]
   1cee0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1cee2:	687b      	ldr	r3, [r7, #4]
   1cee4:	2b00      	cmp	r3, #0
   1cee6:	d004      	beq.n	1cef2 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1cee8:	687b      	ldr	r3, [r7, #4]
   1ceea:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1ceec:	68fb      	ldr	r3, [r7, #12]
   1ceee:	683a      	ldr	r2, [r7, #0]
   1cef0:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1cef2:	46c0      	nop			; (mov r8, r8)
   1cef4:	46bd      	mov	sp, r7
   1cef6:	b004      	add	sp, #16
   1cef8:	bd80      	pop	{r7, pc}
	...

0001cefc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1cefc:	b580      	push	{r7, lr}
   1cefe:	b082      	sub	sp, #8
   1cf00:	af00      	add	r7, sp, #0
   1cf02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1cf04:	4b04      	ldr	r3, [pc, #16]	; (1cf18 <prvIdleTask+0x1c>)
   1cf06:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1cf08:	4b04      	ldr	r3, [pc, #16]	; (1cf1c <prvIdleTask+0x20>)
   1cf0a:	681b      	ldr	r3, [r3, #0]
   1cf0c:	2b01      	cmp	r3, #1
   1cf0e:	d9f9      	bls.n	1cf04 <prvIdleTask+0x8>
			{
				taskYIELD();
   1cf10:	4b03      	ldr	r3, [pc, #12]	; (1cf20 <prvIdleTask+0x24>)
   1cf12:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1cf14:	e7f6      	b.n	1cf04 <prvIdleTask+0x8>
   1cf16:	46c0      	nop			; (mov r8, r8)
   1cf18:	0001cfb1 	.word	0x0001cfb1
   1cf1c:	20003cd0 	.word	0x20003cd0
   1cf20:	0001a3e1 	.word	0x0001a3e1

0001cf24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1cf24:	b580      	push	{r7, lr}
   1cf26:	b082      	sub	sp, #8
   1cf28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1cf2a:	2300      	movs	r3, #0
   1cf2c:	607b      	str	r3, [r7, #4]
   1cf2e:	e00c      	b.n	1cf4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1cf30:	687a      	ldr	r2, [r7, #4]
   1cf32:	0013      	movs	r3, r2
   1cf34:	009b      	lsls	r3, r3, #2
   1cf36:	189b      	adds	r3, r3, r2
   1cf38:	009b      	lsls	r3, r3, #2
   1cf3a:	4a14      	ldr	r2, [pc, #80]	; (1cf8c <prvInitialiseTaskLists+0x68>)
   1cf3c:	189b      	adds	r3, r3, r2
   1cf3e:	0018      	movs	r0, r3
   1cf40:	4b13      	ldr	r3, [pc, #76]	; (1cf90 <prvInitialiseTaskLists+0x6c>)
   1cf42:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1cf44:	687b      	ldr	r3, [r7, #4]
   1cf46:	3301      	adds	r3, #1
   1cf48:	607b      	str	r3, [r7, #4]
   1cf4a:	687b      	ldr	r3, [r7, #4]
   1cf4c:	2b04      	cmp	r3, #4
   1cf4e:	d9ef      	bls.n	1cf30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1cf50:	4b10      	ldr	r3, [pc, #64]	; (1cf94 <prvInitialiseTaskLists+0x70>)
   1cf52:	0018      	movs	r0, r3
   1cf54:	4b0e      	ldr	r3, [pc, #56]	; (1cf90 <prvInitialiseTaskLists+0x6c>)
   1cf56:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1cf58:	4b0f      	ldr	r3, [pc, #60]	; (1cf98 <prvInitialiseTaskLists+0x74>)
   1cf5a:	0018      	movs	r0, r3
   1cf5c:	4b0c      	ldr	r3, [pc, #48]	; (1cf90 <prvInitialiseTaskLists+0x6c>)
   1cf5e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1cf60:	4b0e      	ldr	r3, [pc, #56]	; (1cf9c <prvInitialiseTaskLists+0x78>)
   1cf62:	0018      	movs	r0, r3
   1cf64:	4b0a      	ldr	r3, [pc, #40]	; (1cf90 <prvInitialiseTaskLists+0x6c>)
   1cf66:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1cf68:	4b0d      	ldr	r3, [pc, #52]	; (1cfa0 <prvInitialiseTaskLists+0x7c>)
   1cf6a:	0018      	movs	r0, r3
   1cf6c:	4b08      	ldr	r3, [pc, #32]	; (1cf90 <prvInitialiseTaskLists+0x6c>)
   1cf6e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1cf70:	4b0c      	ldr	r3, [pc, #48]	; (1cfa4 <prvInitialiseTaskLists+0x80>)
   1cf72:	0018      	movs	r0, r3
   1cf74:	4b06      	ldr	r3, [pc, #24]	; (1cf90 <prvInitialiseTaskLists+0x6c>)
   1cf76:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1cf78:	4b0b      	ldr	r3, [pc, #44]	; (1cfa8 <prvInitialiseTaskLists+0x84>)
   1cf7a:	4a06      	ldr	r2, [pc, #24]	; (1cf94 <prvInitialiseTaskLists+0x70>)
   1cf7c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1cf7e:	4b0b      	ldr	r3, [pc, #44]	; (1cfac <prvInitialiseTaskLists+0x88>)
   1cf80:	4a05      	ldr	r2, [pc, #20]	; (1cf98 <prvInitialiseTaskLists+0x74>)
   1cf82:	601a      	str	r2, [r3, #0]
}
   1cf84:	46c0      	nop			; (mov r8, r8)
   1cf86:	46bd      	mov	sp, r7
   1cf88:	b002      	add	sp, #8
   1cf8a:	bd80      	pop	{r7, pc}
   1cf8c:	20003cd0 	.word	0x20003cd0
   1cf90:	0001a165 	.word	0x0001a165
   1cf94:	20003d34 	.word	0x20003d34
   1cf98:	20003d48 	.word	0x20003d48
   1cf9c:	20003d64 	.word	0x20003d64
   1cfa0:	20003d78 	.word	0x20003d78
   1cfa4:	20003d90 	.word	0x20003d90
   1cfa8:	20003d5c 	.word	0x20003d5c
   1cfac:	20003d60 	.word	0x20003d60

0001cfb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1cfb0:	b580      	push	{r7, lr}
   1cfb2:	b082      	sub	sp, #8
   1cfb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1cfb6:	e01a      	b.n	1cfee <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1cfb8:	4b11      	ldr	r3, [pc, #68]	; (1d000 <prvCheckTasksWaitingTermination+0x50>)
   1cfba:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1cfbc:	4b11      	ldr	r3, [pc, #68]	; (1d004 <prvCheckTasksWaitingTermination+0x54>)
   1cfbe:	68db      	ldr	r3, [r3, #12]
   1cfc0:	68db      	ldr	r3, [r3, #12]
   1cfc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1cfc4:	687b      	ldr	r3, [r7, #4]
   1cfc6:	3304      	adds	r3, #4
   1cfc8:	0018      	movs	r0, r3
   1cfca:	4b0f      	ldr	r3, [pc, #60]	; (1d008 <prvCheckTasksWaitingTermination+0x58>)
   1cfcc:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1cfce:	4b0f      	ldr	r3, [pc, #60]	; (1d00c <prvCheckTasksWaitingTermination+0x5c>)
   1cfd0:	681b      	ldr	r3, [r3, #0]
   1cfd2:	1e5a      	subs	r2, r3, #1
   1cfd4:	4b0d      	ldr	r3, [pc, #52]	; (1d00c <prvCheckTasksWaitingTermination+0x5c>)
   1cfd6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1cfd8:	4b0d      	ldr	r3, [pc, #52]	; (1d010 <prvCheckTasksWaitingTermination+0x60>)
   1cfda:	681b      	ldr	r3, [r3, #0]
   1cfdc:	1e5a      	subs	r2, r3, #1
   1cfde:	4b0c      	ldr	r3, [pc, #48]	; (1d010 <prvCheckTasksWaitingTermination+0x60>)
   1cfe0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1cfe2:	4b0c      	ldr	r3, [pc, #48]	; (1d014 <prvCheckTasksWaitingTermination+0x64>)
   1cfe4:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1cfe6:	687b      	ldr	r3, [r7, #4]
   1cfe8:	0018      	movs	r0, r3
   1cfea:	4b0b      	ldr	r3, [pc, #44]	; (1d018 <prvCheckTasksWaitingTermination+0x68>)
   1cfec:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1cfee:	4b08      	ldr	r3, [pc, #32]	; (1d010 <prvCheckTasksWaitingTermination+0x60>)
   1cff0:	681b      	ldr	r3, [r3, #0]
   1cff2:	2b00      	cmp	r3, #0
   1cff4:	d1e0      	bne.n	1cfb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1cff6:	46c0      	nop			; (mov r8, r8)
   1cff8:	46bd      	mov	sp, r7
   1cffa:	b002      	add	sp, #8
   1cffc:	bd80      	pop	{r7, pc}
   1cffe:	46c0      	nop			; (mov r8, r8)
   1d000:	0001a3f9 	.word	0x0001a3f9
   1d004:	20003d78 	.word	0x20003d78
   1d008:	0001a267 	.word	0x0001a267
   1d00c:	20003da4 	.word	0x20003da4
   1d010:	20003d8c 	.word	0x20003d8c
   1d014:	0001a41d 	.word	0x0001a41d
   1d018:	0001d08d 	.word	0x0001d08d

0001d01c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1d01c:	b580      	push	{r7, lr}
   1d01e:	b084      	sub	sp, #16
   1d020:	af00      	add	r7, sp, #0
   1d022:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1d024:	2300      	movs	r3, #0
   1d026:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d028:	e005      	b.n	1d036 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1d02a:	687b      	ldr	r3, [r7, #4]
   1d02c:	3301      	adds	r3, #1
   1d02e:	607b      	str	r3, [r7, #4]
			ulCount++;
   1d030:	68fb      	ldr	r3, [r7, #12]
   1d032:	3301      	adds	r3, #1
   1d034:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d036:	687b      	ldr	r3, [r7, #4]
   1d038:	781b      	ldrb	r3, [r3, #0]
   1d03a:	2ba5      	cmp	r3, #165	; 0xa5
   1d03c:	d0f5      	beq.n	1d02a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1d03e:	68fb      	ldr	r3, [r7, #12]
   1d040:	089b      	lsrs	r3, r3, #2
   1d042:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1d044:	68fb      	ldr	r3, [r7, #12]
   1d046:	b29b      	uxth	r3, r3
	}
   1d048:	0018      	movs	r0, r3
   1d04a:	46bd      	mov	sp, r7
   1d04c:	b004      	add	sp, #16
   1d04e:	bd80      	pop	{r7, pc}

0001d050 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1d050:	b580      	push	{r7, lr}
   1d052:	b086      	sub	sp, #24
   1d054:	af00      	add	r7, sp, #0
   1d056:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1d058:	687b      	ldr	r3, [r7, #4]
   1d05a:	2b00      	cmp	r3, #0
   1d05c:	d102      	bne.n	1d064 <uxTaskGetStackHighWaterMark+0x14>
   1d05e:	4b09      	ldr	r3, [pc, #36]	; (1d084 <uxTaskGetStackHighWaterMark+0x34>)
   1d060:	681b      	ldr	r3, [r3, #0]
   1d062:	e000      	b.n	1d066 <uxTaskGetStackHighWaterMark+0x16>
   1d064:	687b      	ldr	r3, [r7, #4]
   1d066:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1d068:	697b      	ldr	r3, [r7, #20]
   1d06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d06c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1d06e:	693b      	ldr	r3, [r7, #16]
   1d070:	0018      	movs	r0, r3
   1d072:	4b05      	ldr	r3, [pc, #20]	; (1d088 <uxTaskGetStackHighWaterMark+0x38>)
   1d074:	4798      	blx	r3
   1d076:	0003      	movs	r3, r0
   1d078:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1d07a:	68fb      	ldr	r3, [r7, #12]
	}
   1d07c:	0018      	movs	r0, r3
   1d07e:	46bd      	mov	sp, r7
   1d080:	b006      	add	sp, #24
   1d082:	bd80      	pop	{r7, pc}
   1d084:	20003ccc 	.word	0x20003ccc
   1d088:	0001d01d 	.word	0x0001d01d

0001d08c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1d08c:	b580      	push	{r7, lr}
   1d08e:	b082      	sub	sp, #8
   1d090:	af00      	add	r7, sp, #0
   1d092:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1d094:	687b      	ldr	r3, [r7, #4]
   1d096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d098:	0018      	movs	r0, r3
   1d09a:	4b05      	ldr	r3, [pc, #20]	; (1d0b0 <prvDeleteTCB+0x24>)
   1d09c:	4798      	blx	r3
			vPortFree( pxTCB );
   1d09e:	687b      	ldr	r3, [r7, #4]
   1d0a0:	0018      	movs	r0, r3
   1d0a2:	4b03      	ldr	r3, [pc, #12]	; (1d0b0 <prvDeleteTCB+0x24>)
   1d0a4:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1d0a6:	46c0      	nop			; (mov r8, r8)
   1d0a8:	46bd      	mov	sp, r7
   1d0aa:	b002      	add	sp, #8
   1d0ac:	bd80      	pop	{r7, pc}
   1d0ae:	46c0      	nop			; (mov r8, r8)
   1d0b0:	0001a5f5 	.word	0x0001a5f5

0001d0b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1d0b4:	b580      	push	{r7, lr}
   1d0b6:	b082      	sub	sp, #8
   1d0b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d0ba:	4b0e      	ldr	r3, [pc, #56]	; (1d0f4 <prvResetNextTaskUnblockTime+0x40>)
   1d0bc:	681b      	ldr	r3, [r3, #0]
   1d0be:	681b      	ldr	r3, [r3, #0]
   1d0c0:	2b00      	cmp	r3, #0
   1d0c2:	d101      	bne.n	1d0c8 <prvResetNextTaskUnblockTime+0x14>
   1d0c4:	2301      	movs	r3, #1
   1d0c6:	e000      	b.n	1d0ca <prvResetNextTaskUnblockTime+0x16>
   1d0c8:	2300      	movs	r3, #0
   1d0ca:	2b00      	cmp	r3, #0
   1d0cc:	d004      	beq.n	1d0d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1d0ce:	4b0a      	ldr	r3, [pc, #40]	; (1d0f8 <prvResetNextTaskUnblockTime+0x44>)
   1d0d0:	2201      	movs	r2, #1
   1d0d2:	4252      	negs	r2, r2
   1d0d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1d0d6:	e008      	b.n	1d0ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d0d8:	4b06      	ldr	r3, [pc, #24]	; (1d0f4 <prvResetNextTaskUnblockTime+0x40>)
   1d0da:	681b      	ldr	r3, [r3, #0]
   1d0dc:	68db      	ldr	r3, [r3, #12]
   1d0de:	68db      	ldr	r3, [r3, #12]
   1d0e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1d0e2:	687b      	ldr	r3, [r7, #4]
   1d0e4:	685a      	ldr	r2, [r3, #4]
   1d0e6:	4b04      	ldr	r3, [pc, #16]	; (1d0f8 <prvResetNextTaskUnblockTime+0x44>)
   1d0e8:	601a      	str	r2, [r3, #0]
}
   1d0ea:	46c0      	nop			; (mov r8, r8)
   1d0ec:	46bd      	mov	sp, r7
   1d0ee:	b002      	add	sp, #8
   1d0f0:	bd80      	pop	{r7, pc}
   1d0f2:	46c0      	nop			; (mov r8, r8)
   1d0f4:	20003d5c 	.word	0x20003d5c
   1d0f8:	20003dc4 	.word	0x20003dc4

0001d0fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1d0fc:	b580      	push	{r7, lr}
   1d0fe:	b082      	sub	sp, #8
   1d100:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1d102:	4b04      	ldr	r3, [pc, #16]	; (1d114 <xTaskGetCurrentTaskHandle+0x18>)
   1d104:	681b      	ldr	r3, [r3, #0]
   1d106:	607b      	str	r3, [r7, #4]

		return xReturn;
   1d108:	687b      	ldr	r3, [r7, #4]
	}
   1d10a:	0018      	movs	r0, r3
   1d10c:	46bd      	mov	sp, r7
   1d10e:	b002      	add	sp, #8
   1d110:	bd80      	pop	{r7, pc}
   1d112:	46c0      	nop			; (mov r8, r8)
   1d114:	20003ccc 	.word	0x20003ccc

0001d118 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1d118:	b580      	push	{r7, lr}
   1d11a:	b082      	sub	sp, #8
   1d11c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1d11e:	4b0a      	ldr	r3, [pc, #40]	; (1d148 <xTaskGetSchedulerState+0x30>)
   1d120:	681b      	ldr	r3, [r3, #0]
   1d122:	2b00      	cmp	r3, #0
   1d124:	d102      	bne.n	1d12c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1d126:	2301      	movs	r3, #1
   1d128:	607b      	str	r3, [r7, #4]
   1d12a:	e008      	b.n	1d13e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d12c:	4b07      	ldr	r3, [pc, #28]	; (1d14c <xTaskGetSchedulerState+0x34>)
   1d12e:	681b      	ldr	r3, [r3, #0]
   1d130:	2b00      	cmp	r3, #0
   1d132:	d102      	bne.n	1d13a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1d134:	2302      	movs	r3, #2
   1d136:	607b      	str	r3, [r7, #4]
   1d138:	e001      	b.n	1d13e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1d13a:	2300      	movs	r3, #0
   1d13c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1d13e:	687b      	ldr	r3, [r7, #4]
	}
   1d140:	0018      	movs	r0, r3
   1d142:	46bd      	mov	sp, r7
   1d144:	b002      	add	sp, #8
   1d146:	bd80      	pop	{r7, pc}
   1d148:	20003db0 	.word	0x20003db0
   1d14c:	20003dcc 	.word	0x20003dcc

0001d150 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1d150:	b590      	push	{r4, r7, lr}
   1d152:	b085      	sub	sp, #20
   1d154:	af00      	add	r7, sp, #0
   1d156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1d158:	687b      	ldr	r3, [r7, #4]
   1d15a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1d15c:	2300      	movs	r3, #0
   1d15e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1d160:	687b      	ldr	r3, [r7, #4]
   1d162:	2b00      	cmp	r3, #0
   1d164:	d100      	bne.n	1d168 <xTaskPriorityInherit+0x18>
   1d166:	e09d      	b.n	1d2a4 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1d168:	68bb      	ldr	r3, [r7, #8]
   1d16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d16c:	4b50      	ldr	r3, [pc, #320]	; (1d2b0 <xTaskPriorityInherit+0x160>)
   1d16e:	681b      	ldr	r3, [r3, #0]
   1d170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d172:	429a      	cmp	r2, r3
   1d174:	d300      	bcc.n	1d178 <xTaskPriorityInherit+0x28>
   1d176:	e08c      	b.n	1d292 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1d178:	68bb      	ldr	r3, [r7, #8]
   1d17a:	699b      	ldr	r3, [r3, #24]
   1d17c:	2b00      	cmp	r3, #0
   1d17e:	db06      	blt.n	1d18e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d180:	4b4b      	ldr	r3, [pc, #300]	; (1d2b0 <xTaskPriorityInherit+0x160>)
   1d182:	681b      	ldr	r3, [r3, #0]
   1d184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d186:	2205      	movs	r2, #5
   1d188:	1ad2      	subs	r2, r2, r3
   1d18a:	68bb      	ldr	r3, [r7, #8]
   1d18c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1d18e:	68bb      	ldr	r3, [r7, #8]
   1d190:	6959      	ldr	r1, [r3, #20]
   1d192:	68bb      	ldr	r3, [r7, #8]
   1d194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d196:	0013      	movs	r3, r2
   1d198:	009b      	lsls	r3, r3, #2
   1d19a:	189b      	adds	r3, r3, r2
   1d19c:	009b      	lsls	r3, r3, #2
   1d19e:	4a45      	ldr	r2, [pc, #276]	; (1d2b4 <xTaskPriorityInherit+0x164>)
   1d1a0:	189b      	adds	r3, r3, r2
   1d1a2:	4299      	cmp	r1, r3
   1d1a4:	d101      	bne.n	1d1aa <xTaskPriorityInherit+0x5a>
   1d1a6:	2301      	movs	r3, #1
   1d1a8:	e000      	b.n	1d1ac <xTaskPriorityInherit+0x5c>
   1d1aa:	2300      	movs	r3, #0
   1d1ac:	2b00      	cmp	r3, #0
   1d1ae:	d037      	beq.n	1d220 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d1b0:	68bb      	ldr	r3, [r7, #8]
   1d1b2:	3304      	adds	r3, #4
   1d1b4:	0018      	movs	r0, r3
   1d1b6:	4b40      	ldr	r3, [pc, #256]	; (1d2b8 <xTaskPriorityInherit+0x168>)
   1d1b8:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1d1ba:	4b3d      	ldr	r3, [pc, #244]	; (1d2b0 <xTaskPriorityInherit+0x160>)
   1d1bc:	681b      	ldr	r3, [r3, #0]
   1d1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d1c0:	68bb      	ldr	r3, [r7, #8]
   1d1c2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1d1c4:	68bb      	ldr	r3, [r7, #8]
   1d1c6:	0018      	movs	r0, r3
   1d1c8:	4b3c      	ldr	r3, [pc, #240]	; (1d2bc <xTaskPriorityInherit+0x16c>)
   1d1ca:	4798      	blx	r3
   1d1cc:	0003      	movs	r3, r0
   1d1ce:	001a      	movs	r2, r3
   1d1d0:	4b3b      	ldr	r3, [pc, #236]	; (1d2c0 <xTaskPriorityInherit+0x170>)
   1d1d2:	881b      	ldrh	r3, [r3, #0]
   1d1d4:	4013      	ands	r3, r2
   1d1d6:	b29b      	uxth	r3, r3
   1d1d8:	2b00      	cmp	r3, #0
   1d1da:	d008      	beq.n	1d1ee <xTaskPriorityInherit+0x9e>
   1d1dc:	68bb      	ldr	r3, [r7, #8]
   1d1de:	0018      	movs	r0, r3
   1d1e0:	4b38      	ldr	r3, [pc, #224]	; (1d2c4 <xTaskPriorityInherit+0x174>)
   1d1e2:	4798      	blx	r3
   1d1e4:	0003      	movs	r3, r0
   1d1e6:	b2db      	uxtb	r3, r3
   1d1e8:	0018      	movs	r0, r3
   1d1ea:	4b37      	ldr	r3, [pc, #220]	; (1d2c8 <xTaskPriorityInherit+0x178>)
   1d1ec:	4798      	blx	r3
   1d1ee:	68bb      	ldr	r3, [r7, #8]
   1d1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d1f2:	4b36      	ldr	r3, [pc, #216]	; (1d2cc <xTaskPriorityInherit+0x17c>)
   1d1f4:	681b      	ldr	r3, [r3, #0]
   1d1f6:	429a      	cmp	r2, r3
   1d1f8:	d903      	bls.n	1d202 <xTaskPriorityInherit+0xb2>
   1d1fa:	68bb      	ldr	r3, [r7, #8]
   1d1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d1fe:	4b33      	ldr	r3, [pc, #204]	; (1d2cc <xTaskPriorityInherit+0x17c>)
   1d200:	601a      	str	r2, [r3, #0]
   1d202:	68bb      	ldr	r3, [r7, #8]
   1d204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d206:	0013      	movs	r3, r2
   1d208:	009b      	lsls	r3, r3, #2
   1d20a:	189b      	adds	r3, r3, r2
   1d20c:	009b      	lsls	r3, r3, #2
   1d20e:	4a29      	ldr	r2, [pc, #164]	; (1d2b4 <xTaskPriorityInherit+0x164>)
   1d210:	189a      	adds	r2, r3, r2
   1d212:	68bb      	ldr	r3, [r7, #8]
   1d214:	3304      	adds	r3, #4
   1d216:	0019      	movs	r1, r3
   1d218:	0010      	movs	r0, r2
   1d21a:	4b2d      	ldr	r3, [pc, #180]	; (1d2d0 <xTaskPriorityInherit+0x180>)
   1d21c:	4798      	blx	r3
   1d21e:	e004      	b.n	1d22a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1d220:	4b23      	ldr	r3, [pc, #140]	; (1d2b0 <xTaskPriorityInherit+0x160>)
   1d222:	681b      	ldr	r3, [r3, #0]
   1d224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d226:	68bb      	ldr	r3, [r7, #8]
   1d228:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1d22a:	68bb      	ldr	r3, [r7, #8]
   1d22c:	0018      	movs	r0, r3
   1d22e:	4b23      	ldr	r3, [pc, #140]	; (1d2bc <xTaskPriorityInherit+0x16c>)
   1d230:	4798      	blx	r3
   1d232:	0003      	movs	r3, r0
   1d234:	001a      	movs	r2, r3
   1d236:	4b22      	ldr	r3, [pc, #136]	; (1d2c0 <xTaskPriorityInherit+0x170>)
   1d238:	881b      	ldrh	r3, [r3, #0]
   1d23a:	4013      	ands	r3, r2
   1d23c:	b29b      	uxth	r3, r3
   1d23e:	2b00      	cmp	r3, #0
   1d240:	d024      	beq.n	1d28c <xTaskPriorityInherit+0x13c>
   1d242:	68bb      	ldr	r3, [r7, #8]
   1d244:	0018      	movs	r0, r3
   1d246:	4b1f      	ldr	r3, [pc, #124]	; (1d2c4 <xTaskPriorityInherit+0x174>)
   1d248:	4798      	blx	r3
   1d24a:	0003      	movs	r3, r0
   1d24c:	b2db      	uxtb	r3, r3
   1d24e:	001c      	movs	r4, r3
   1d250:	68bb      	ldr	r3, [r7, #8]
   1d252:	0018      	movs	r0, r3
   1d254:	4b1b      	ldr	r3, [pc, #108]	; (1d2c4 <xTaskPriorityInherit+0x174>)
   1d256:	4798      	blx	r3
   1d258:	0003      	movs	r3, r0
   1d25a:	b2db      	uxtb	r3, r3
   1d25c:	0019      	movs	r1, r3
   1d25e:	2003      	movs	r0, #3
   1d260:	4b1c      	ldr	r3, [pc, #112]	; (1d2d4 <xTaskPriorityInherit+0x184>)
   1d262:	4798      	blx	r3
   1d264:	0003      	movs	r3, r0
   1d266:	0022      	movs	r2, r4
   1d268:	2103      	movs	r1, #3
   1d26a:	208e      	movs	r0, #142	; 0x8e
   1d26c:	4c1a      	ldr	r4, [pc, #104]	; (1d2d8 <xTaskPriorityInherit+0x188>)
   1d26e:	47a0      	blx	r4
   1d270:	68bb      	ldr	r3, [r7, #8]
   1d272:	0018      	movs	r0, r3
   1d274:	4b13      	ldr	r3, [pc, #76]	; (1d2c4 <xTaskPriorityInherit+0x174>)
   1d276:	4798      	blx	r3
   1d278:	0003      	movs	r3, r0
   1d27a:	b2d9      	uxtb	r1, r3
   1d27c:	4b0c      	ldr	r3, [pc, #48]	; (1d2b0 <xTaskPriorityInherit+0x160>)
   1d27e:	681b      	ldr	r3, [r3, #0]
   1d280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d282:	b2db      	uxtb	r3, r3
   1d284:	001a      	movs	r2, r3
   1d286:	2003      	movs	r0, #3
   1d288:	4b14      	ldr	r3, [pc, #80]	; (1d2dc <xTaskPriorityInherit+0x18c>)
   1d28a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1d28c:	2301      	movs	r3, #1
   1d28e:	60fb      	str	r3, [r7, #12]
   1d290:	e008      	b.n	1d2a4 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1d292:	68bb      	ldr	r3, [r7, #8]
   1d294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d296:	4b06      	ldr	r3, [pc, #24]	; (1d2b0 <xTaskPriorityInherit+0x160>)
   1d298:	681b      	ldr	r3, [r3, #0]
   1d29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d29c:	429a      	cmp	r2, r3
   1d29e:	d201      	bcs.n	1d2a4 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1d2a0:	2301      	movs	r3, #1
   1d2a2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1d2a4:	68fb      	ldr	r3, [r7, #12]
	}
   1d2a6:	0018      	movs	r0, r3
   1d2a8:	46bd      	mov	sp, r7
   1d2aa:	b005      	add	sp, #20
   1d2ac:	bd90      	pop	{r4, r7, pc}
   1d2ae:	46c0      	nop			; (mov r8, r8)
   1d2b0:	20003ccc 	.word	0x20003ccc
   1d2b4:	20003cd0 	.word	0x20003cd0
   1d2b8:	0001a267 	.word	0x0001a267
   1d2bc:	000183ed 	.word	0x000183ed
   1d2c0:	200000b8 	.word	0x200000b8
   1d2c4:	000183cd 	.word	0x000183cd
   1d2c8:	00018b9d 	.word	0x00018b9d
   1d2cc:	20003dac 	.word	0x20003dac
   1d2d0:	0001a1b7 	.word	0x0001a1b7
   1d2d4:	000193a5 	.word	0x000193a5
   1d2d8:	00018f15 	.word	0x00018f15
   1d2dc:	00019301 	.word	0x00019301

0001d2e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1d2e0:	b590      	push	{r4, r7, lr}
   1d2e2:	b085      	sub	sp, #20
   1d2e4:	af00      	add	r7, sp, #0
   1d2e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1d2e8:	687b      	ldr	r3, [r7, #4]
   1d2ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1d2ec:	2300      	movs	r3, #0
   1d2ee:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1d2f0:	687b      	ldr	r3, [r7, #4]
   1d2f2:	2b00      	cmp	r3, #0
   1d2f4:	d100      	bne.n	1d2f8 <xTaskPriorityDisinherit+0x18>
   1d2f6:	e089      	b.n	1d40c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1d2f8:	4b47      	ldr	r3, [pc, #284]	; (1d418 <xTaskPriorityDisinherit+0x138>)
   1d2fa:	681b      	ldr	r3, [r3, #0]
   1d2fc:	68ba      	ldr	r2, [r7, #8]
   1d2fe:	429a      	cmp	r2, r3
   1d300:	d001      	beq.n	1d306 <xTaskPriorityDisinherit+0x26>
   1d302:	b672      	cpsid	i
   1d304:	e7fe      	b.n	1d304 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1d306:	68bb      	ldr	r3, [r7, #8]
   1d308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d30a:	2b00      	cmp	r3, #0
   1d30c:	d101      	bne.n	1d312 <xTaskPriorityDisinherit+0x32>
   1d30e:	b672      	cpsid	i
   1d310:	e7fe      	b.n	1d310 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1d312:	68bb      	ldr	r3, [r7, #8]
   1d314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d316:	1e5a      	subs	r2, r3, #1
   1d318:	68bb      	ldr	r3, [r7, #8]
   1d31a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1d31c:	68bb      	ldr	r3, [r7, #8]
   1d31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d320:	68bb      	ldr	r3, [r7, #8]
   1d322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d324:	429a      	cmp	r2, r3
   1d326:	d071      	beq.n	1d40c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1d328:	68bb      	ldr	r3, [r7, #8]
   1d32a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d32c:	2b00      	cmp	r3, #0
   1d32e:	d16d      	bne.n	1d40c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d330:	68bb      	ldr	r3, [r7, #8]
   1d332:	3304      	adds	r3, #4
   1d334:	0018      	movs	r0, r3
   1d336:	4b39      	ldr	r3, [pc, #228]	; (1d41c <xTaskPriorityDisinherit+0x13c>)
   1d338:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1d33a:	68bb      	ldr	r3, [r7, #8]
   1d33c:	0018      	movs	r0, r3
   1d33e:	4b38      	ldr	r3, [pc, #224]	; (1d420 <xTaskPriorityDisinherit+0x140>)
   1d340:	4798      	blx	r3
   1d342:	0003      	movs	r3, r0
   1d344:	001a      	movs	r2, r3
   1d346:	4b37      	ldr	r3, [pc, #220]	; (1d424 <xTaskPriorityDisinherit+0x144>)
   1d348:	881b      	ldrh	r3, [r3, #0]
   1d34a:	4013      	ands	r3, r2
   1d34c:	b29b      	uxth	r3, r3
   1d34e:	2b00      	cmp	r3, #0
   1d350:	d023      	beq.n	1d39a <xTaskPriorityDisinherit+0xba>
   1d352:	68bb      	ldr	r3, [r7, #8]
   1d354:	0018      	movs	r0, r3
   1d356:	4b34      	ldr	r3, [pc, #208]	; (1d428 <xTaskPriorityDisinherit+0x148>)
   1d358:	4798      	blx	r3
   1d35a:	0003      	movs	r3, r0
   1d35c:	b2db      	uxtb	r3, r3
   1d35e:	001c      	movs	r4, r3
   1d360:	68bb      	ldr	r3, [r7, #8]
   1d362:	0018      	movs	r0, r3
   1d364:	4b30      	ldr	r3, [pc, #192]	; (1d428 <xTaskPriorityDisinherit+0x148>)
   1d366:	4798      	blx	r3
   1d368:	0003      	movs	r3, r0
   1d36a:	b2db      	uxtb	r3, r3
   1d36c:	0019      	movs	r1, r3
   1d36e:	2003      	movs	r0, #3
   1d370:	4b2e      	ldr	r3, [pc, #184]	; (1d42c <xTaskPriorityDisinherit+0x14c>)
   1d372:	4798      	blx	r3
   1d374:	0003      	movs	r3, r0
   1d376:	0022      	movs	r2, r4
   1d378:	2103      	movs	r1, #3
   1d37a:	208f      	movs	r0, #143	; 0x8f
   1d37c:	4c2c      	ldr	r4, [pc, #176]	; (1d430 <xTaskPriorityDisinherit+0x150>)
   1d37e:	47a0      	blx	r4
   1d380:	68bb      	ldr	r3, [r7, #8]
   1d382:	0018      	movs	r0, r3
   1d384:	4b28      	ldr	r3, [pc, #160]	; (1d428 <xTaskPriorityDisinherit+0x148>)
   1d386:	4798      	blx	r3
   1d388:	0003      	movs	r3, r0
   1d38a:	b2d9      	uxtb	r1, r3
   1d38c:	68bb      	ldr	r3, [r7, #8]
   1d38e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d390:	b2db      	uxtb	r3, r3
   1d392:	001a      	movs	r2, r3
   1d394:	2003      	movs	r0, #3
   1d396:	4b27      	ldr	r3, [pc, #156]	; (1d434 <xTaskPriorityDisinherit+0x154>)
   1d398:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1d39a:	68bb      	ldr	r3, [r7, #8]
   1d39c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d39e:	68bb      	ldr	r3, [r7, #8]
   1d3a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d3a2:	68bb      	ldr	r3, [r7, #8]
   1d3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d3a6:	2205      	movs	r2, #5
   1d3a8:	1ad2      	subs	r2, r2, r3
   1d3aa:	68bb      	ldr	r3, [r7, #8]
   1d3ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1d3ae:	68bb      	ldr	r3, [r7, #8]
   1d3b0:	0018      	movs	r0, r3
   1d3b2:	4b1b      	ldr	r3, [pc, #108]	; (1d420 <xTaskPriorityDisinherit+0x140>)
   1d3b4:	4798      	blx	r3
   1d3b6:	0003      	movs	r3, r0
   1d3b8:	001a      	movs	r2, r3
   1d3ba:	4b1a      	ldr	r3, [pc, #104]	; (1d424 <xTaskPriorityDisinherit+0x144>)
   1d3bc:	881b      	ldrh	r3, [r3, #0]
   1d3be:	4013      	ands	r3, r2
   1d3c0:	b29b      	uxth	r3, r3
   1d3c2:	2b00      	cmp	r3, #0
   1d3c4:	d008      	beq.n	1d3d8 <xTaskPriorityDisinherit+0xf8>
   1d3c6:	68bb      	ldr	r3, [r7, #8]
   1d3c8:	0018      	movs	r0, r3
   1d3ca:	4b17      	ldr	r3, [pc, #92]	; (1d428 <xTaskPriorityDisinherit+0x148>)
   1d3cc:	4798      	blx	r3
   1d3ce:	0003      	movs	r3, r0
   1d3d0:	b2db      	uxtb	r3, r3
   1d3d2:	0018      	movs	r0, r3
   1d3d4:	4b18      	ldr	r3, [pc, #96]	; (1d438 <xTaskPriorityDisinherit+0x158>)
   1d3d6:	4798      	blx	r3
   1d3d8:	68bb      	ldr	r3, [r7, #8]
   1d3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d3dc:	4b17      	ldr	r3, [pc, #92]	; (1d43c <xTaskPriorityDisinherit+0x15c>)
   1d3de:	681b      	ldr	r3, [r3, #0]
   1d3e0:	429a      	cmp	r2, r3
   1d3e2:	d903      	bls.n	1d3ec <xTaskPriorityDisinherit+0x10c>
   1d3e4:	68bb      	ldr	r3, [r7, #8]
   1d3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d3e8:	4b14      	ldr	r3, [pc, #80]	; (1d43c <xTaskPriorityDisinherit+0x15c>)
   1d3ea:	601a      	str	r2, [r3, #0]
   1d3ec:	68bb      	ldr	r3, [r7, #8]
   1d3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d3f0:	0013      	movs	r3, r2
   1d3f2:	009b      	lsls	r3, r3, #2
   1d3f4:	189b      	adds	r3, r3, r2
   1d3f6:	009b      	lsls	r3, r3, #2
   1d3f8:	4a11      	ldr	r2, [pc, #68]	; (1d440 <xTaskPriorityDisinherit+0x160>)
   1d3fa:	189a      	adds	r2, r3, r2
   1d3fc:	68bb      	ldr	r3, [r7, #8]
   1d3fe:	3304      	adds	r3, #4
   1d400:	0019      	movs	r1, r3
   1d402:	0010      	movs	r0, r2
   1d404:	4b0f      	ldr	r3, [pc, #60]	; (1d444 <xTaskPriorityDisinherit+0x164>)
   1d406:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1d408:	2301      	movs	r3, #1
   1d40a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1d40c:	68fb      	ldr	r3, [r7, #12]
	}
   1d40e:	0018      	movs	r0, r3
   1d410:	46bd      	mov	sp, r7
   1d412:	b005      	add	sp, #20
   1d414:	bd90      	pop	{r4, r7, pc}
   1d416:	46c0      	nop			; (mov r8, r8)
   1d418:	20003ccc 	.word	0x20003ccc
   1d41c:	0001a267 	.word	0x0001a267
   1d420:	000183ed 	.word	0x000183ed
   1d424:	200000b8 	.word	0x200000b8
   1d428:	000183cd 	.word	0x000183cd
   1d42c:	000193a5 	.word	0x000193a5
   1d430:	00018f15 	.word	0x00018f15
   1d434:	00019301 	.word	0x00019301
   1d438:	00018b9d 	.word	0x00018b9d
   1d43c:	20003dac 	.word	0x20003dac
   1d440:	20003cd0 	.word	0x20003cd0
   1d444:	0001a1b7 	.word	0x0001a1b7

0001d448 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1d448:	b590      	push	{r4, r7, lr}
   1d44a:	b087      	sub	sp, #28
   1d44c:	af00      	add	r7, sp, #0
   1d44e:	6078      	str	r0, [r7, #4]
   1d450:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1d452:	687b      	ldr	r3, [r7, #4]
   1d454:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1d456:	2301      	movs	r3, #1
   1d458:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1d45a:	687b      	ldr	r3, [r7, #4]
   1d45c:	2b00      	cmp	r3, #0
   1d45e:	d100      	bne.n	1d462 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1d460:	e0a4      	b.n	1d5ac <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1d462:	693b      	ldr	r3, [r7, #16]
   1d464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d466:	2b00      	cmp	r3, #0
   1d468:	d101      	bne.n	1d46e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1d46a:	b672      	cpsid	i
   1d46c:	e7fe      	b.n	1d46c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1d46e:	693b      	ldr	r3, [r7, #16]
   1d470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d472:	683b      	ldr	r3, [r7, #0]
   1d474:	429a      	cmp	r2, r3
   1d476:	d202      	bcs.n	1d47e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1d478:	683b      	ldr	r3, [r7, #0]
   1d47a:	617b      	str	r3, [r7, #20]
   1d47c:	e002      	b.n	1d484 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1d47e:	693b      	ldr	r3, [r7, #16]
   1d480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d482:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1d484:	693b      	ldr	r3, [r7, #16]
   1d486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d488:	697b      	ldr	r3, [r7, #20]
   1d48a:	429a      	cmp	r2, r3
   1d48c:	d100      	bne.n	1d490 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1d48e:	e08d      	b.n	1d5ac <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1d490:	693b      	ldr	r3, [r7, #16]
   1d492:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d494:	68fb      	ldr	r3, [r7, #12]
   1d496:	429a      	cmp	r2, r3
   1d498:	d000      	beq.n	1d49c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1d49a:	e087      	b.n	1d5ac <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1d49c:	4b45      	ldr	r3, [pc, #276]	; (1d5b4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1d49e:	681b      	ldr	r3, [r3, #0]
   1d4a0:	693a      	ldr	r2, [r7, #16]
   1d4a2:	429a      	cmp	r2, r3
   1d4a4:	d101      	bne.n	1d4aa <vTaskPriorityDisinheritAfterTimeout+0x62>
   1d4a6:	b672      	cpsid	i
   1d4a8:	e7fe      	b.n	1d4a8 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1d4aa:	693b      	ldr	r3, [r7, #16]
   1d4ac:	0018      	movs	r0, r3
   1d4ae:	4b42      	ldr	r3, [pc, #264]	; (1d5b8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1d4b0:	4798      	blx	r3
   1d4b2:	0003      	movs	r3, r0
   1d4b4:	001a      	movs	r2, r3
   1d4b6:	4b41      	ldr	r3, [pc, #260]	; (1d5bc <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1d4b8:	881b      	ldrh	r3, [r3, #0]
   1d4ba:	4013      	ands	r3, r2
   1d4bc:	b29b      	uxth	r3, r3
   1d4be:	2b00      	cmp	r3, #0
   1d4c0:	d023      	beq.n	1d50a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1d4c2:	693b      	ldr	r3, [r7, #16]
   1d4c4:	0018      	movs	r0, r3
   1d4c6:	4b3e      	ldr	r3, [pc, #248]	; (1d5c0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d4c8:	4798      	blx	r3
   1d4ca:	0003      	movs	r3, r0
   1d4cc:	b2db      	uxtb	r3, r3
   1d4ce:	001c      	movs	r4, r3
   1d4d0:	693b      	ldr	r3, [r7, #16]
   1d4d2:	0018      	movs	r0, r3
   1d4d4:	4b3a      	ldr	r3, [pc, #232]	; (1d5c0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d4d6:	4798      	blx	r3
   1d4d8:	0003      	movs	r3, r0
   1d4da:	b2db      	uxtb	r3, r3
   1d4dc:	0019      	movs	r1, r3
   1d4de:	2003      	movs	r0, #3
   1d4e0:	4b38      	ldr	r3, [pc, #224]	; (1d5c4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1d4e2:	4798      	blx	r3
   1d4e4:	0003      	movs	r3, r0
   1d4e6:	0022      	movs	r2, r4
   1d4e8:	2103      	movs	r1, #3
   1d4ea:	208f      	movs	r0, #143	; 0x8f
   1d4ec:	4c36      	ldr	r4, [pc, #216]	; (1d5c8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1d4ee:	47a0      	blx	r4
   1d4f0:	693b      	ldr	r3, [r7, #16]
   1d4f2:	0018      	movs	r0, r3
   1d4f4:	4b32      	ldr	r3, [pc, #200]	; (1d5c0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d4f6:	4798      	blx	r3
   1d4f8:	0003      	movs	r3, r0
   1d4fa:	b2d9      	uxtb	r1, r3
   1d4fc:	693b      	ldr	r3, [r7, #16]
   1d4fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d500:	b2db      	uxtb	r3, r3
   1d502:	001a      	movs	r2, r3
   1d504:	2003      	movs	r0, #3
   1d506:	4b31      	ldr	r3, [pc, #196]	; (1d5cc <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1d508:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1d50a:	693b      	ldr	r3, [r7, #16]
   1d50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d50e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1d510:	693b      	ldr	r3, [r7, #16]
   1d512:	697a      	ldr	r2, [r7, #20]
   1d514:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1d516:	693b      	ldr	r3, [r7, #16]
   1d518:	699b      	ldr	r3, [r3, #24]
   1d51a:	2b00      	cmp	r3, #0
   1d51c:	db04      	blt.n	1d528 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d51e:	697b      	ldr	r3, [r7, #20]
   1d520:	2205      	movs	r2, #5
   1d522:	1ad2      	subs	r2, r2, r3
   1d524:	693b      	ldr	r3, [r7, #16]
   1d526:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1d528:	693b      	ldr	r3, [r7, #16]
   1d52a:	6959      	ldr	r1, [r3, #20]
   1d52c:	68ba      	ldr	r2, [r7, #8]
   1d52e:	0013      	movs	r3, r2
   1d530:	009b      	lsls	r3, r3, #2
   1d532:	189b      	adds	r3, r3, r2
   1d534:	009b      	lsls	r3, r3, #2
   1d536:	4a26      	ldr	r2, [pc, #152]	; (1d5d0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d538:	189b      	adds	r3, r3, r2
   1d53a:	4299      	cmp	r1, r3
   1d53c:	d101      	bne.n	1d542 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1d53e:	2301      	movs	r3, #1
   1d540:	e000      	b.n	1d544 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1d542:	2300      	movs	r3, #0
   1d544:	2b00      	cmp	r3, #0
   1d546:	d031      	beq.n	1d5ac <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d548:	693b      	ldr	r3, [r7, #16]
   1d54a:	3304      	adds	r3, #4
   1d54c:	0018      	movs	r0, r3
   1d54e:	4b21      	ldr	r3, [pc, #132]	; (1d5d4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1d550:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1d552:	693b      	ldr	r3, [r7, #16]
   1d554:	0018      	movs	r0, r3
   1d556:	4b18      	ldr	r3, [pc, #96]	; (1d5b8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1d558:	4798      	blx	r3
   1d55a:	0003      	movs	r3, r0
   1d55c:	001a      	movs	r2, r3
   1d55e:	4b17      	ldr	r3, [pc, #92]	; (1d5bc <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1d560:	881b      	ldrh	r3, [r3, #0]
   1d562:	4013      	ands	r3, r2
   1d564:	b29b      	uxth	r3, r3
   1d566:	2b00      	cmp	r3, #0
   1d568:	d008      	beq.n	1d57c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1d56a:	693b      	ldr	r3, [r7, #16]
   1d56c:	0018      	movs	r0, r3
   1d56e:	4b14      	ldr	r3, [pc, #80]	; (1d5c0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d570:	4798      	blx	r3
   1d572:	0003      	movs	r3, r0
   1d574:	b2db      	uxtb	r3, r3
   1d576:	0018      	movs	r0, r3
   1d578:	4b17      	ldr	r3, [pc, #92]	; (1d5d8 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1d57a:	4798      	blx	r3
   1d57c:	693b      	ldr	r3, [r7, #16]
   1d57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d580:	4b16      	ldr	r3, [pc, #88]	; (1d5dc <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d582:	681b      	ldr	r3, [r3, #0]
   1d584:	429a      	cmp	r2, r3
   1d586:	d903      	bls.n	1d590 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1d588:	693b      	ldr	r3, [r7, #16]
   1d58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d58c:	4b13      	ldr	r3, [pc, #76]	; (1d5dc <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d58e:	601a      	str	r2, [r3, #0]
   1d590:	693b      	ldr	r3, [r7, #16]
   1d592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d594:	0013      	movs	r3, r2
   1d596:	009b      	lsls	r3, r3, #2
   1d598:	189b      	adds	r3, r3, r2
   1d59a:	009b      	lsls	r3, r3, #2
   1d59c:	4a0c      	ldr	r2, [pc, #48]	; (1d5d0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d59e:	189a      	adds	r2, r3, r2
   1d5a0:	693b      	ldr	r3, [r7, #16]
   1d5a2:	3304      	adds	r3, #4
   1d5a4:	0019      	movs	r1, r3
   1d5a6:	0010      	movs	r0, r2
   1d5a8:	4b0d      	ldr	r3, [pc, #52]	; (1d5e0 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1d5aa:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1d5ac:	46c0      	nop			; (mov r8, r8)
   1d5ae:	46bd      	mov	sp, r7
   1d5b0:	b007      	add	sp, #28
   1d5b2:	bd90      	pop	{r4, r7, pc}
   1d5b4:	20003ccc 	.word	0x20003ccc
   1d5b8:	000183ed 	.word	0x000183ed
   1d5bc:	200000b8 	.word	0x200000b8
   1d5c0:	000183cd 	.word	0x000183cd
   1d5c4:	000193a5 	.word	0x000193a5
   1d5c8:	00018f15 	.word	0x00018f15
   1d5cc:	00019301 	.word	0x00019301
   1d5d0:	20003cd0 	.word	0x20003cd0
   1d5d4:	0001a267 	.word	0x0001a267
   1d5d8:	00018b9d 	.word	0x00018b9d
   1d5dc:	20003dac 	.word	0x20003dac
   1d5e0:	0001a1b7 	.word	0x0001a1b7

0001d5e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1d5e4:	b580      	push	{r7, lr}
   1d5e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1d5e8:	4b06      	ldr	r3, [pc, #24]	; (1d604 <pvTaskIncrementMutexHeldCount+0x20>)
   1d5ea:	681b      	ldr	r3, [r3, #0]
   1d5ec:	2b00      	cmp	r3, #0
   1d5ee:	d004      	beq.n	1d5fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1d5f0:	4b04      	ldr	r3, [pc, #16]	; (1d604 <pvTaskIncrementMutexHeldCount+0x20>)
   1d5f2:	681b      	ldr	r3, [r3, #0]
   1d5f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d5f6:	3201      	adds	r2, #1
   1d5f8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1d5fa:	4b02      	ldr	r3, [pc, #8]	; (1d604 <pvTaskIncrementMutexHeldCount+0x20>)
   1d5fc:	681b      	ldr	r3, [r3, #0]
	}
   1d5fe:	0018      	movs	r0, r3
   1d600:	46bd      	mov	sp, r7
   1d602:	bd80      	pop	{r7, pc}
   1d604:	20003ccc 	.word	0x20003ccc

0001d608 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1d608:	b580      	push	{r7, lr}
   1d60a:	b084      	sub	sp, #16
   1d60c:	af00      	add	r7, sp, #0
   1d60e:	6078      	str	r0, [r7, #4]
   1d610:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1d612:	4b21      	ldr	r3, [pc, #132]	; (1d698 <prvAddCurrentTaskToDelayedList+0x90>)
   1d614:	681b      	ldr	r3, [r3, #0]
   1d616:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d618:	4b20      	ldr	r3, [pc, #128]	; (1d69c <prvAddCurrentTaskToDelayedList+0x94>)
   1d61a:	681b      	ldr	r3, [r3, #0]
   1d61c:	3304      	adds	r3, #4
   1d61e:	0018      	movs	r0, r3
   1d620:	4b1f      	ldr	r3, [pc, #124]	; (1d6a0 <prvAddCurrentTaskToDelayedList+0x98>)
   1d622:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1d624:	687b      	ldr	r3, [r7, #4]
   1d626:	3301      	adds	r3, #1
   1d628:	d10b      	bne.n	1d642 <prvAddCurrentTaskToDelayedList+0x3a>
   1d62a:	683b      	ldr	r3, [r7, #0]
   1d62c:	2b00      	cmp	r3, #0
   1d62e:	d008      	beq.n	1d642 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d630:	4b1a      	ldr	r3, [pc, #104]	; (1d69c <prvAddCurrentTaskToDelayedList+0x94>)
   1d632:	681b      	ldr	r3, [r3, #0]
   1d634:	1d1a      	adds	r2, r3, #4
   1d636:	4b1b      	ldr	r3, [pc, #108]	; (1d6a4 <prvAddCurrentTaskToDelayedList+0x9c>)
   1d638:	0011      	movs	r1, r2
   1d63a:	0018      	movs	r0, r3
   1d63c:	4b1a      	ldr	r3, [pc, #104]	; (1d6a8 <prvAddCurrentTaskToDelayedList+0xa0>)
   1d63e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1d640:	e026      	b.n	1d690 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1d642:	68fa      	ldr	r2, [r7, #12]
   1d644:	687b      	ldr	r3, [r7, #4]
   1d646:	18d3      	adds	r3, r2, r3
   1d648:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1d64a:	4b14      	ldr	r3, [pc, #80]	; (1d69c <prvAddCurrentTaskToDelayedList+0x94>)
   1d64c:	681b      	ldr	r3, [r3, #0]
   1d64e:	68ba      	ldr	r2, [r7, #8]
   1d650:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1d652:	68ba      	ldr	r2, [r7, #8]
   1d654:	68fb      	ldr	r3, [r7, #12]
   1d656:	429a      	cmp	r2, r3
   1d658:	d209      	bcs.n	1d66e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d65a:	4b14      	ldr	r3, [pc, #80]	; (1d6ac <prvAddCurrentTaskToDelayedList+0xa4>)
   1d65c:	681a      	ldr	r2, [r3, #0]
   1d65e:	4b0f      	ldr	r3, [pc, #60]	; (1d69c <prvAddCurrentTaskToDelayedList+0x94>)
   1d660:	681b      	ldr	r3, [r3, #0]
   1d662:	3304      	adds	r3, #4
   1d664:	0019      	movs	r1, r3
   1d666:	0010      	movs	r0, r2
   1d668:	4b11      	ldr	r3, [pc, #68]	; (1d6b0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d66a:	4798      	blx	r3
}
   1d66c:	e010      	b.n	1d690 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d66e:	4b11      	ldr	r3, [pc, #68]	; (1d6b4 <prvAddCurrentTaskToDelayedList+0xac>)
   1d670:	681a      	ldr	r2, [r3, #0]
   1d672:	4b0a      	ldr	r3, [pc, #40]	; (1d69c <prvAddCurrentTaskToDelayedList+0x94>)
   1d674:	681b      	ldr	r3, [r3, #0]
   1d676:	3304      	adds	r3, #4
   1d678:	0019      	movs	r1, r3
   1d67a:	0010      	movs	r0, r2
   1d67c:	4b0c      	ldr	r3, [pc, #48]	; (1d6b0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d67e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1d680:	4b0d      	ldr	r3, [pc, #52]	; (1d6b8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d682:	681b      	ldr	r3, [r3, #0]
   1d684:	68ba      	ldr	r2, [r7, #8]
   1d686:	429a      	cmp	r2, r3
   1d688:	d202      	bcs.n	1d690 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1d68a:	4b0b      	ldr	r3, [pc, #44]	; (1d6b8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d68c:	68ba      	ldr	r2, [r7, #8]
   1d68e:	601a      	str	r2, [r3, #0]
}
   1d690:	46c0      	nop			; (mov r8, r8)
   1d692:	46bd      	mov	sp, r7
   1d694:	b004      	add	sp, #16
   1d696:	bd80      	pop	{r7, pc}
   1d698:	20003da8 	.word	0x20003da8
   1d69c:	20003ccc 	.word	0x20003ccc
   1d6a0:	0001a267 	.word	0x0001a267
   1d6a4:	20003d90 	.word	0x20003d90
   1d6a8:	0001a1b7 	.word	0x0001a1b7
   1d6ac:	20003d60 	.word	0x20003d60
   1d6b0:	0001a1fb 	.word	0x0001a1fb
   1d6b4:	20003d5c 	.word	0x20003d5c
   1d6b8:	20003dc4 	.word	0x20003dc4

0001d6bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1d6bc:	b590      	push	{r4, r7, lr}
   1d6be:	b085      	sub	sp, #20
   1d6c0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1d6c2:	2300      	movs	r3, #0
   1d6c4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1d6c6:	4b0e      	ldr	r3, [pc, #56]	; (1d700 <xTimerCreateTimerTask+0x44>)
   1d6c8:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1d6ca:	4b0e      	ldr	r3, [pc, #56]	; (1d704 <xTimerCreateTimerTask+0x48>)
   1d6cc:	681b      	ldr	r3, [r3, #0]
   1d6ce:	2b00      	cmp	r3, #0
   1d6d0:	d00b      	beq.n	1d6ea <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1d6d2:	490d      	ldr	r1, [pc, #52]	; (1d708 <xTimerCreateTimerTask+0x4c>)
   1d6d4:	480d      	ldr	r0, [pc, #52]	; (1d70c <xTimerCreateTimerTask+0x50>)
   1d6d6:	4b0e      	ldr	r3, [pc, #56]	; (1d710 <xTimerCreateTimerTask+0x54>)
   1d6d8:	9301      	str	r3, [sp, #4]
   1d6da:	2302      	movs	r3, #2
   1d6dc:	9300      	str	r3, [sp, #0]
   1d6de:	2300      	movs	r3, #0
   1d6e0:	2280      	movs	r2, #128	; 0x80
   1d6e2:	4c0c      	ldr	r4, [pc, #48]	; (1d714 <xTimerCreateTimerTask+0x58>)
   1d6e4:	47a0      	blx	r4
   1d6e6:	0003      	movs	r3, r0
   1d6e8:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1d6ea:	687b      	ldr	r3, [r7, #4]
   1d6ec:	2b00      	cmp	r3, #0
   1d6ee:	d101      	bne.n	1d6f4 <xTimerCreateTimerTask+0x38>
   1d6f0:	b672      	cpsid	i
   1d6f2:	e7fe      	b.n	1d6f2 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1d6f4:	687b      	ldr	r3, [r7, #4]
}
   1d6f6:	0018      	movs	r0, r3
   1d6f8:	46bd      	mov	sp, r7
   1d6fa:	b003      	add	sp, #12
   1d6fc:	bd90      	pop	{r4, r7, pc}
   1d6fe:	46c0      	nop			; (mov r8, r8)
   1d700:	0001dc05 	.word	0x0001dc05
   1d704:	20003e00 	.word	0x20003e00
   1d708:	00037fd8 	.word	0x00037fd8
   1d70c:	0001d83d 	.word	0x0001d83d
   1d710:	20003e04 	.word	0x20003e04
   1d714:	0001c055 	.word	0x0001c055

0001d718 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1d718:	b590      	push	{r4, r7, lr}
   1d71a:	b089      	sub	sp, #36	; 0x24
   1d71c:	af00      	add	r7, sp, #0
   1d71e:	60f8      	str	r0, [r7, #12]
   1d720:	60b9      	str	r1, [r7, #8]
   1d722:	607a      	str	r2, [r7, #4]
   1d724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1d726:	2300      	movs	r3, #0
   1d728:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1d72a:	68fb      	ldr	r3, [r7, #12]
   1d72c:	2b00      	cmp	r3, #0
   1d72e:	d101      	bne.n	1d734 <xTimerGenericCommand+0x1c>
   1d730:	b672      	cpsid	i
   1d732:	e7fe      	b.n	1d732 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1d734:	4b1e      	ldr	r3, [pc, #120]	; (1d7b0 <xTimerGenericCommand+0x98>)
   1d736:	681b      	ldr	r3, [r3, #0]
   1d738:	2b00      	cmp	r3, #0
   1d73a:	d033      	beq.n	1d7a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1d73c:	2310      	movs	r3, #16
   1d73e:	18fb      	adds	r3, r7, r3
   1d740:	68ba      	ldr	r2, [r7, #8]
   1d742:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1d744:	2310      	movs	r3, #16
   1d746:	18fb      	adds	r3, r7, r3
   1d748:	687a      	ldr	r2, [r7, #4]
   1d74a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1d74c:	2310      	movs	r3, #16
   1d74e:	18fb      	adds	r3, r7, r3
   1d750:	68fa      	ldr	r2, [r7, #12]
   1d752:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1d754:	68bb      	ldr	r3, [r7, #8]
   1d756:	2b05      	cmp	r3, #5
   1d758:	dc1a      	bgt.n	1d790 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1d75a:	4b16      	ldr	r3, [pc, #88]	; (1d7b4 <xTimerGenericCommand+0x9c>)
   1d75c:	4798      	blx	r3
   1d75e:	0003      	movs	r3, r0
   1d760:	2b02      	cmp	r3, #2
   1d762:	d10a      	bne.n	1d77a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1d764:	4b12      	ldr	r3, [pc, #72]	; (1d7b0 <xTimerGenericCommand+0x98>)
   1d766:	6818      	ldr	r0, [r3, #0]
   1d768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d76a:	2310      	movs	r3, #16
   1d76c:	18f9      	adds	r1, r7, r3
   1d76e:	2300      	movs	r3, #0
   1d770:	4c11      	ldr	r4, [pc, #68]	; (1d7b8 <xTimerGenericCommand+0xa0>)
   1d772:	47a0      	blx	r4
   1d774:	0003      	movs	r3, r0
   1d776:	61fb      	str	r3, [r7, #28]
   1d778:	e014      	b.n	1d7a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1d77a:	4b0d      	ldr	r3, [pc, #52]	; (1d7b0 <xTimerGenericCommand+0x98>)
   1d77c:	6818      	ldr	r0, [r3, #0]
   1d77e:	2310      	movs	r3, #16
   1d780:	18f9      	adds	r1, r7, r3
   1d782:	2300      	movs	r3, #0
   1d784:	2200      	movs	r2, #0
   1d786:	4c0c      	ldr	r4, [pc, #48]	; (1d7b8 <xTimerGenericCommand+0xa0>)
   1d788:	47a0      	blx	r4
   1d78a:	0003      	movs	r3, r0
   1d78c:	61fb      	str	r3, [r7, #28]
   1d78e:	e009      	b.n	1d7a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1d790:	4b07      	ldr	r3, [pc, #28]	; (1d7b0 <xTimerGenericCommand+0x98>)
   1d792:	6818      	ldr	r0, [r3, #0]
   1d794:	683a      	ldr	r2, [r7, #0]
   1d796:	2310      	movs	r3, #16
   1d798:	18f9      	adds	r1, r7, r3
   1d79a:	2300      	movs	r3, #0
   1d79c:	4c07      	ldr	r4, [pc, #28]	; (1d7bc <xTimerGenericCommand+0xa4>)
   1d79e:	47a0      	blx	r4
   1d7a0:	0003      	movs	r3, r0
   1d7a2:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1d7a4:	69fb      	ldr	r3, [r7, #28]
}
   1d7a6:	0018      	movs	r0, r3
   1d7a8:	46bd      	mov	sp, r7
   1d7aa:	b009      	add	sp, #36	; 0x24
   1d7ac:	bd90      	pop	{r4, r7, pc}
   1d7ae:	46c0      	nop			; (mov r8, r8)
   1d7b0:	20003e00 	.word	0x20003e00
   1d7b4:	0001d119 	.word	0x0001d119
   1d7b8:	0001a98d 	.word	0x0001a98d
   1d7bc:	0001aded 	.word	0x0001aded

0001d7c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1d7c0:	b590      	push	{r4, r7, lr}
   1d7c2:	b087      	sub	sp, #28
   1d7c4:	af02      	add	r7, sp, #8
   1d7c6:	6078      	str	r0, [r7, #4]
   1d7c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d7ca:	4b18      	ldr	r3, [pc, #96]	; (1d82c <prvProcessExpiredTimer+0x6c>)
   1d7cc:	681b      	ldr	r3, [r3, #0]
   1d7ce:	68db      	ldr	r3, [r3, #12]
   1d7d0:	68db      	ldr	r3, [r3, #12]
   1d7d2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d7d4:	68fb      	ldr	r3, [r7, #12]
   1d7d6:	3304      	adds	r3, #4
   1d7d8:	0018      	movs	r0, r3
   1d7da:	4b15      	ldr	r3, [pc, #84]	; (1d830 <prvProcessExpiredTimer+0x70>)
   1d7dc:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d7de:	68fb      	ldr	r3, [r7, #12]
   1d7e0:	69db      	ldr	r3, [r3, #28]
   1d7e2:	2b01      	cmp	r3, #1
   1d7e4:	d119      	bne.n	1d81a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1d7e6:	68fb      	ldr	r3, [r7, #12]
   1d7e8:	699a      	ldr	r2, [r3, #24]
   1d7ea:	687b      	ldr	r3, [r7, #4]
   1d7ec:	18d1      	adds	r1, r2, r3
   1d7ee:	687b      	ldr	r3, [r7, #4]
   1d7f0:	683a      	ldr	r2, [r7, #0]
   1d7f2:	68f8      	ldr	r0, [r7, #12]
   1d7f4:	4c0f      	ldr	r4, [pc, #60]	; (1d834 <prvProcessExpiredTimer+0x74>)
   1d7f6:	47a0      	blx	r4
   1d7f8:	1e03      	subs	r3, r0, #0
   1d7fa:	d00e      	beq.n	1d81a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d7fc:	687a      	ldr	r2, [r7, #4]
   1d7fe:	68f8      	ldr	r0, [r7, #12]
   1d800:	2300      	movs	r3, #0
   1d802:	9300      	str	r3, [sp, #0]
   1d804:	2300      	movs	r3, #0
   1d806:	2100      	movs	r1, #0
   1d808:	4c0b      	ldr	r4, [pc, #44]	; (1d838 <prvProcessExpiredTimer+0x78>)
   1d80a:	47a0      	blx	r4
   1d80c:	0003      	movs	r3, r0
   1d80e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1d810:	68bb      	ldr	r3, [r7, #8]
   1d812:	2b00      	cmp	r3, #0
   1d814:	d101      	bne.n	1d81a <prvProcessExpiredTimer+0x5a>
   1d816:	b672      	cpsid	i
   1d818:	e7fe      	b.n	1d818 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d81a:	68fb      	ldr	r3, [r7, #12]
   1d81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d81e:	68fa      	ldr	r2, [r7, #12]
   1d820:	0010      	movs	r0, r2
   1d822:	4798      	blx	r3
}
   1d824:	46c0      	nop			; (mov r8, r8)
   1d826:	46bd      	mov	sp, r7
   1d828:	b005      	add	sp, #20
   1d82a:	bd90      	pop	{r4, r7, pc}
   1d82c:	20003df8 	.word	0x20003df8
   1d830:	0001a267 	.word	0x0001a267
   1d834:	0001d9a5 	.word	0x0001d9a5
   1d838:	0001d719 	.word	0x0001d719

0001d83c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1d83c:	b580      	push	{r7, lr}
   1d83e:	b084      	sub	sp, #16
   1d840:	af00      	add	r7, sp, #0
   1d842:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1d844:	4b08      	ldr	r3, [pc, #32]	; (1d868 <prvTimerTask+0x2c>)
   1d846:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d848:	2308      	movs	r3, #8
   1d84a:	18fb      	adds	r3, r7, r3
   1d84c:	0018      	movs	r0, r3
   1d84e:	4b07      	ldr	r3, [pc, #28]	; (1d86c <prvTimerTask+0x30>)
   1d850:	4798      	blx	r3
   1d852:	0003      	movs	r3, r0
   1d854:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1d856:	68ba      	ldr	r2, [r7, #8]
   1d858:	68fb      	ldr	r3, [r7, #12]
   1d85a:	0011      	movs	r1, r2
   1d85c:	0018      	movs	r0, r3
   1d85e:	4b04      	ldr	r3, [pc, #16]	; (1d870 <prvTimerTask+0x34>)
   1d860:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1d862:	4b04      	ldr	r3, [pc, #16]	; (1d874 <prvTimerTask+0x38>)
   1d864:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d866:	e7ef      	b.n	1d848 <prvTimerTask+0xc>
   1d868:	000325f9 	.word	0x000325f9
   1d86c:	0001d91d 	.word	0x0001d91d
   1d870:	0001d879 	.word	0x0001d879
   1d874:	0001da2d 	.word	0x0001da2d

0001d878 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1d878:	b580      	push	{r7, lr}
   1d87a:	b084      	sub	sp, #16
   1d87c:	af00      	add	r7, sp, #0
   1d87e:	6078      	str	r0, [r7, #4]
   1d880:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1d882:	4b1e      	ldr	r3, [pc, #120]	; (1d8fc <prvProcessTimerOrBlockTask+0x84>)
   1d884:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d886:	2308      	movs	r3, #8
   1d888:	18fb      	adds	r3, r7, r3
   1d88a:	0018      	movs	r0, r3
   1d88c:	4b1c      	ldr	r3, [pc, #112]	; (1d900 <prvProcessTimerOrBlockTask+0x88>)
   1d88e:	4798      	blx	r3
   1d890:	0003      	movs	r3, r0
   1d892:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1d894:	68bb      	ldr	r3, [r7, #8]
   1d896:	2b00      	cmp	r3, #0
   1d898:	d129      	bne.n	1d8ee <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1d89a:	683b      	ldr	r3, [r7, #0]
   1d89c:	2b00      	cmp	r3, #0
   1d89e:	d10c      	bne.n	1d8ba <prvProcessTimerOrBlockTask+0x42>
   1d8a0:	687a      	ldr	r2, [r7, #4]
   1d8a2:	68fb      	ldr	r3, [r7, #12]
   1d8a4:	429a      	cmp	r2, r3
   1d8a6:	d808      	bhi.n	1d8ba <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1d8a8:	4b16      	ldr	r3, [pc, #88]	; (1d904 <prvProcessTimerOrBlockTask+0x8c>)
   1d8aa:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1d8ac:	68fa      	ldr	r2, [r7, #12]
   1d8ae:	687b      	ldr	r3, [r7, #4]
   1d8b0:	0011      	movs	r1, r2
   1d8b2:	0018      	movs	r0, r3
   1d8b4:	4b14      	ldr	r3, [pc, #80]	; (1d908 <prvProcessTimerOrBlockTask+0x90>)
   1d8b6:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1d8b8:	e01b      	b.n	1d8f2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1d8ba:	683b      	ldr	r3, [r7, #0]
   1d8bc:	2b00      	cmp	r3, #0
   1d8be:	d006      	beq.n	1d8ce <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1d8c0:	4b12      	ldr	r3, [pc, #72]	; (1d90c <prvProcessTimerOrBlockTask+0x94>)
   1d8c2:	681b      	ldr	r3, [r3, #0]
   1d8c4:	681b      	ldr	r3, [r3, #0]
   1d8c6:	425a      	negs	r2, r3
   1d8c8:	4153      	adcs	r3, r2
   1d8ca:	b2db      	uxtb	r3, r3
   1d8cc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1d8ce:	4b10      	ldr	r3, [pc, #64]	; (1d910 <prvProcessTimerOrBlockTask+0x98>)
   1d8d0:	6818      	ldr	r0, [r3, #0]
   1d8d2:	687a      	ldr	r2, [r7, #4]
   1d8d4:	68fb      	ldr	r3, [r7, #12]
   1d8d6:	1ad3      	subs	r3, r2, r3
   1d8d8:	683a      	ldr	r2, [r7, #0]
   1d8da:	0019      	movs	r1, r3
   1d8dc:	4b0d      	ldr	r3, [pc, #52]	; (1d914 <prvProcessTimerOrBlockTask+0x9c>)
   1d8de:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1d8e0:	4b08      	ldr	r3, [pc, #32]	; (1d904 <prvProcessTimerOrBlockTask+0x8c>)
   1d8e2:	4798      	blx	r3
   1d8e4:	1e03      	subs	r3, r0, #0
   1d8e6:	d104      	bne.n	1d8f2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1d8e8:	4b0b      	ldr	r3, [pc, #44]	; (1d918 <prvProcessTimerOrBlockTask+0xa0>)
   1d8ea:	4798      	blx	r3
}
   1d8ec:	e001      	b.n	1d8f2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1d8ee:	4b05      	ldr	r3, [pc, #20]	; (1d904 <prvProcessTimerOrBlockTask+0x8c>)
   1d8f0:	4798      	blx	r3
}
   1d8f2:	46c0      	nop			; (mov r8, r8)
   1d8f4:	46bd      	mov	sp, r7
   1d8f6:	b004      	add	sp, #16
   1d8f8:	bd80      	pop	{r7, pc}
   1d8fa:	46c0      	nop			; (mov r8, r8)
   1d8fc:	0001c6b1 	.word	0x0001c6b1
   1d900:	0001d95d 	.word	0x0001d95d
   1d904:	0001c6c9 	.word	0x0001c6c9
   1d908:	0001d7c1 	.word	0x0001d7c1
   1d90c:	20003dfc 	.word	0x20003dfc
   1d910:	20003e00 	.word	0x20003e00
   1d914:	0001be51 	.word	0x0001be51
   1d918:	0001a3e1 	.word	0x0001a3e1

0001d91c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1d91c:	b580      	push	{r7, lr}
   1d91e:	b084      	sub	sp, #16
   1d920:	af00      	add	r7, sp, #0
   1d922:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1d924:	4b0c      	ldr	r3, [pc, #48]	; (1d958 <prvGetNextExpireTime+0x3c>)
   1d926:	681b      	ldr	r3, [r3, #0]
   1d928:	681b      	ldr	r3, [r3, #0]
   1d92a:	425a      	negs	r2, r3
   1d92c:	4153      	adcs	r3, r2
   1d92e:	b2db      	uxtb	r3, r3
   1d930:	001a      	movs	r2, r3
   1d932:	687b      	ldr	r3, [r7, #4]
   1d934:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1d936:	687b      	ldr	r3, [r7, #4]
   1d938:	681b      	ldr	r3, [r3, #0]
   1d93a:	2b00      	cmp	r3, #0
   1d93c:	d105      	bne.n	1d94a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d93e:	4b06      	ldr	r3, [pc, #24]	; (1d958 <prvGetNextExpireTime+0x3c>)
   1d940:	681b      	ldr	r3, [r3, #0]
   1d942:	68db      	ldr	r3, [r3, #12]
   1d944:	681b      	ldr	r3, [r3, #0]
   1d946:	60fb      	str	r3, [r7, #12]
   1d948:	e001      	b.n	1d94e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1d94a:	2300      	movs	r3, #0
   1d94c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1d94e:	68fb      	ldr	r3, [r7, #12]
}
   1d950:	0018      	movs	r0, r3
   1d952:	46bd      	mov	sp, r7
   1d954:	b004      	add	sp, #16
   1d956:	bd80      	pop	{r7, pc}
   1d958:	20003df8 	.word	0x20003df8

0001d95c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1d95c:	b580      	push	{r7, lr}
   1d95e:	b084      	sub	sp, #16
   1d960:	af00      	add	r7, sp, #0
   1d962:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1d964:	4b0c      	ldr	r3, [pc, #48]	; (1d998 <prvSampleTimeNow+0x3c>)
   1d966:	4798      	blx	r3
   1d968:	0003      	movs	r3, r0
   1d96a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1d96c:	4b0b      	ldr	r3, [pc, #44]	; (1d99c <prvSampleTimeNow+0x40>)
   1d96e:	681b      	ldr	r3, [r3, #0]
   1d970:	68fa      	ldr	r2, [r7, #12]
   1d972:	429a      	cmp	r2, r3
   1d974:	d205      	bcs.n	1d982 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1d976:	4b0a      	ldr	r3, [pc, #40]	; (1d9a0 <prvSampleTimeNow+0x44>)
   1d978:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1d97a:	687b      	ldr	r3, [r7, #4]
   1d97c:	2201      	movs	r2, #1
   1d97e:	601a      	str	r2, [r3, #0]
   1d980:	e002      	b.n	1d988 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1d982:	687b      	ldr	r3, [r7, #4]
   1d984:	2200      	movs	r2, #0
   1d986:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1d988:	4b04      	ldr	r3, [pc, #16]	; (1d99c <prvSampleTimeNow+0x40>)
   1d98a:	68fa      	ldr	r2, [r7, #12]
   1d98c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1d98e:	68fb      	ldr	r3, [r7, #12]
}
   1d990:	0018      	movs	r0, r3
   1d992:	46bd      	mov	sp, r7
   1d994:	b004      	add	sp, #16
   1d996:	bd80      	pop	{r7, pc}
   1d998:	0001c839 	.word	0x0001c839
   1d99c:	20003e08 	.word	0x20003e08
   1d9a0:	0001db45 	.word	0x0001db45

0001d9a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1d9a4:	b580      	push	{r7, lr}
   1d9a6:	b086      	sub	sp, #24
   1d9a8:	af00      	add	r7, sp, #0
   1d9aa:	60f8      	str	r0, [r7, #12]
   1d9ac:	60b9      	str	r1, [r7, #8]
   1d9ae:	607a      	str	r2, [r7, #4]
   1d9b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1d9b2:	2300      	movs	r3, #0
   1d9b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1d9b6:	68fb      	ldr	r3, [r7, #12]
   1d9b8:	68ba      	ldr	r2, [r7, #8]
   1d9ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d9bc:	68fb      	ldr	r3, [r7, #12]
   1d9be:	68fa      	ldr	r2, [r7, #12]
   1d9c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1d9c2:	68ba      	ldr	r2, [r7, #8]
   1d9c4:	687b      	ldr	r3, [r7, #4]
   1d9c6:	429a      	cmp	r2, r3
   1d9c8:	d812      	bhi.n	1d9f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d9ca:	687a      	ldr	r2, [r7, #4]
   1d9cc:	683b      	ldr	r3, [r7, #0]
   1d9ce:	1ad2      	subs	r2, r2, r3
   1d9d0:	68fb      	ldr	r3, [r7, #12]
   1d9d2:	699b      	ldr	r3, [r3, #24]
   1d9d4:	429a      	cmp	r2, r3
   1d9d6:	d302      	bcc.n	1d9de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1d9d8:	2301      	movs	r3, #1
   1d9da:	617b      	str	r3, [r7, #20]
   1d9dc:	e01b      	b.n	1da16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1d9de:	4b10      	ldr	r3, [pc, #64]	; (1da20 <prvInsertTimerInActiveList+0x7c>)
   1d9e0:	681a      	ldr	r2, [r3, #0]
   1d9e2:	68fb      	ldr	r3, [r7, #12]
   1d9e4:	3304      	adds	r3, #4
   1d9e6:	0019      	movs	r1, r3
   1d9e8:	0010      	movs	r0, r2
   1d9ea:	4b0e      	ldr	r3, [pc, #56]	; (1da24 <prvInsertTimerInActiveList+0x80>)
   1d9ec:	4798      	blx	r3
   1d9ee:	e012      	b.n	1da16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1d9f0:	687a      	ldr	r2, [r7, #4]
   1d9f2:	683b      	ldr	r3, [r7, #0]
   1d9f4:	429a      	cmp	r2, r3
   1d9f6:	d206      	bcs.n	1da06 <prvInsertTimerInActiveList+0x62>
   1d9f8:	68ba      	ldr	r2, [r7, #8]
   1d9fa:	683b      	ldr	r3, [r7, #0]
   1d9fc:	429a      	cmp	r2, r3
   1d9fe:	d302      	bcc.n	1da06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1da00:	2301      	movs	r3, #1
   1da02:	617b      	str	r3, [r7, #20]
   1da04:	e007      	b.n	1da16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1da06:	4b08      	ldr	r3, [pc, #32]	; (1da28 <prvInsertTimerInActiveList+0x84>)
   1da08:	681a      	ldr	r2, [r3, #0]
   1da0a:	68fb      	ldr	r3, [r7, #12]
   1da0c:	3304      	adds	r3, #4
   1da0e:	0019      	movs	r1, r3
   1da10:	0010      	movs	r0, r2
   1da12:	4b04      	ldr	r3, [pc, #16]	; (1da24 <prvInsertTimerInActiveList+0x80>)
   1da14:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1da16:	697b      	ldr	r3, [r7, #20]
}
   1da18:	0018      	movs	r0, r3
   1da1a:	46bd      	mov	sp, r7
   1da1c:	b006      	add	sp, #24
   1da1e:	bd80      	pop	{r7, pc}
   1da20:	20003dfc 	.word	0x20003dfc
   1da24:	0001a1fb 	.word	0x0001a1fb
   1da28:	20003df8 	.word	0x20003df8

0001da2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1da2c:	b590      	push	{r4, r7, lr}
   1da2e:	b08b      	sub	sp, #44	; 0x2c
   1da30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1da32:	e068      	b.n	1db06 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1da34:	2308      	movs	r3, #8
   1da36:	18fb      	adds	r3, r7, r3
   1da38:	681b      	ldr	r3, [r3, #0]
   1da3a:	2b00      	cmp	r3, #0
   1da3c:	db63      	blt.n	1db06 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1da3e:	2308      	movs	r3, #8
   1da40:	18fb      	adds	r3, r7, r3
   1da42:	689b      	ldr	r3, [r3, #8]
   1da44:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1da46:	69fb      	ldr	r3, [r7, #28]
   1da48:	695b      	ldr	r3, [r3, #20]
   1da4a:	2b00      	cmp	r3, #0
   1da4c:	d004      	beq.n	1da58 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1da4e:	69fb      	ldr	r3, [r7, #28]
   1da50:	3304      	adds	r3, #4
   1da52:	0018      	movs	r0, r3
   1da54:	4b33      	ldr	r3, [pc, #204]	; (1db24 <prvProcessReceivedCommands+0xf8>)
   1da56:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1da58:	1d3b      	adds	r3, r7, #4
   1da5a:	0018      	movs	r0, r3
   1da5c:	4b32      	ldr	r3, [pc, #200]	; (1db28 <prvProcessReceivedCommands+0xfc>)
   1da5e:	4798      	blx	r3
   1da60:	0003      	movs	r3, r0
   1da62:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1da64:	2308      	movs	r3, #8
   1da66:	18fb      	adds	r3, r7, r3
   1da68:	681b      	ldr	r3, [r3, #0]
   1da6a:	2b09      	cmp	r3, #9
   1da6c:	d84a      	bhi.n	1db04 <prvProcessReceivedCommands+0xd8>
   1da6e:	009a      	lsls	r2, r3, #2
   1da70:	4b2e      	ldr	r3, [pc, #184]	; (1db2c <prvProcessReceivedCommands+0x100>)
   1da72:	18d3      	adds	r3, r2, r3
   1da74:	681b      	ldr	r3, [r3, #0]
   1da76:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1da78:	2308      	movs	r3, #8
   1da7a:	18fb      	adds	r3, r7, r3
   1da7c:	685a      	ldr	r2, [r3, #4]
   1da7e:	69fb      	ldr	r3, [r7, #28]
   1da80:	699b      	ldr	r3, [r3, #24]
   1da82:	18d1      	adds	r1, r2, r3
   1da84:	2308      	movs	r3, #8
   1da86:	18fb      	adds	r3, r7, r3
   1da88:	685b      	ldr	r3, [r3, #4]
   1da8a:	69ba      	ldr	r2, [r7, #24]
   1da8c:	69f8      	ldr	r0, [r7, #28]
   1da8e:	4c28      	ldr	r4, [pc, #160]	; (1db30 <prvProcessReceivedCommands+0x104>)
   1da90:	47a0      	blx	r4
   1da92:	1e03      	subs	r3, r0, #0
   1da94:	d037      	beq.n	1db06 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1da96:	69fb      	ldr	r3, [r7, #28]
   1da98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1da9a:	69fa      	ldr	r2, [r7, #28]
   1da9c:	0010      	movs	r0, r2
   1da9e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1daa0:	69fb      	ldr	r3, [r7, #28]
   1daa2:	69db      	ldr	r3, [r3, #28]
   1daa4:	2b01      	cmp	r3, #1
   1daa6:	d12e      	bne.n	1db06 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1daa8:	2308      	movs	r3, #8
   1daaa:	18fb      	adds	r3, r7, r3
   1daac:	685a      	ldr	r2, [r3, #4]
   1daae:	69fb      	ldr	r3, [r7, #28]
   1dab0:	699b      	ldr	r3, [r3, #24]
   1dab2:	18d2      	adds	r2, r2, r3
   1dab4:	69f8      	ldr	r0, [r7, #28]
   1dab6:	2300      	movs	r3, #0
   1dab8:	9300      	str	r3, [sp, #0]
   1daba:	2300      	movs	r3, #0
   1dabc:	2100      	movs	r1, #0
   1dabe:	4c1d      	ldr	r4, [pc, #116]	; (1db34 <prvProcessReceivedCommands+0x108>)
   1dac0:	47a0      	blx	r4
   1dac2:	0003      	movs	r3, r0
   1dac4:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1dac6:	697b      	ldr	r3, [r7, #20]
   1dac8:	2b00      	cmp	r3, #0
   1daca:	d11c      	bne.n	1db06 <prvProcessReceivedCommands+0xda>
   1dacc:	b672      	cpsid	i
   1dace:	e7fe      	b.n	1dace <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1dad0:	2308      	movs	r3, #8
   1dad2:	18fb      	adds	r3, r7, r3
   1dad4:	685a      	ldr	r2, [r3, #4]
   1dad6:	69fb      	ldr	r3, [r7, #28]
   1dad8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1dada:	69fb      	ldr	r3, [r7, #28]
   1dadc:	699b      	ldr	r3, [r3, #24]
   1dade:	2b00      	cmp	r3, #0
   1dae0:	d101      	bne.n	1dae6 <prvProcessReceivedCommands+0xba>
   1dae2:	b672      	cpsid	i
   1dae4:	e7fe      	b.n	1dae4 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1dae6:	69fb      	ldr	r3, [r7, #28]
   1dae8:	699a      	ldr	r2, [r3, #24]
   1daea:	69bb      	ldr	r3, [r7, #24]
   1daec:	18d1      	adds	r1, r2, r3
   1daee:	69bb      	ldr	r3, [r7, #24]
   1daf0:	69ba      	ldr	r2, [r7, #24]
   1daf2:	69f8      	ldr	r0, [r7, #28]
   1daf4:	4c0e      	ldr	r4, [pc, #56]	; (1db30 <prvProcessReceivedCommands+0x104>)
   1daf6:	47a0      	blx	r4
					break;
   1daf8:	e005      	b.n	1db06 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1dafa:	69fb      	ldr	r3, [r7, #28]
   1dafc:	0018      	movs	r0, r3
   1dafe:	4b0e      	ldr	r3, [pc, #56]	; (1db38 <prvProcessReceivedCommands+0x10c>)
   1db00:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1db02:	e000      	b.n	1db06 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1db04:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1db06:	4b0d      	ldr	r3, [pc, #52]	; (1db3c <prvProcessReceivedCommands+0x110>)
   1db08:	681b      	ldr	r3, [r3, #0]
   1db0a:	2208      	movs	r2, #8
   1db0c:	18b9      	adds	r1, r7, r2
   1db0e:	2200      	movs	r2, #0
   1db10:	0018      	movs	r0, r3
   1db12:	4b0b      	ldr	r3, [pc, #44]	; (1db40 <prvProcessReceivedCommands+0x114>)
   1db14:	4798      	blx	r3
   1db16:	1e03      	subs	r3, r0, #0
   1db18:	d18c      	bne.n	1da34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1db1a:	46c0      	nop			; (mov r8, r8)
   1db1c:	46bd      	mov	sp, r7
   1db1e:	b009      	add	sp, #36	; 0x24
   1db20:	bd90      	pop	{r4, r7, pc}
   1db22:	46c0      	nop			; (mov r8, r8)
   1db24:	0001a267 	.word	0x0001a267
   1db28:	0001d95d 	.word	0x0001d95d
   1db2c:	00037fe0 	.word	0x00037fe0
   1db30:	0001d9a5 	.word	0x0001d9a5
   1db34:	0001d719 	.word	0x0001d719
   1db38:	0001a5f5 	.word	0x0001a5f5
   1db3c:	20003e00 	.word	0x20003e00
   1db40:	0001b245 	.word	0x0001b245

0001db44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1db44:	b590      	push	{r4, r7, lr}
   1db46:	b089      	sub	sp, #36	; 0x24
   1db48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1db4a:	e03e      	b.n	1dbca <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1db4c:	4b28      	ldr	r3, [pc, #160]	; (1dbf0 <prvSwitchTimerLists+0xac>)
   1db4e:	681b      	ldr	r3, [r3, #0]
   1db50:	68db      	ldr	r3, [r3, #12]
   1db52:	681b      	ldr	r3, [r3, #0]
   1db54:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1db56:	4b26      	ldr	r3, [pc, #152]	; (1dbf0 <prvSwitchTimerLists+0xac>)
   1db58:	681b      	ldr	r3, [r3, #0]
   1db5a:	68db      	ldr	r3, [r3, #12]
   1db5c:	68db      	ldr	r3, [r3, #12]
   1db5e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1db60:	693b      	ldr	r3, [r7, #16]
   1db62:	3304      	adds	r3, #4
   1db64:	0018      	movs	r0, r3
   1db66:	4b23      	ldr	r3, [pc, #140]	; (1dbf4 <prvSwitchTimerLists+0xb0>)
   1db68:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1db6a:	693b      	ldr	r3, [r7, #16]
   1db6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1db6e:	693a      	ldr	r2, [r7, #16]
   1db70:	0010      	movs	r0, r2
   1db72:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1db74:	693b      	ldr	r3, [r7, #16]
   1db76:	69db      	ldr	r3, [r3, #28]
   1db78:	2b01      	cmp	r3, #1
   1db7a:	d126      	bne.n	1dbca <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1db7c:	693b      	ldr	r3, [r7, #16]
   1db7e:	699a      	ldr	r2, [r3, #24]
   1db80:	697b      	ldr	r3, [r7, #20]
   1db82:	18d3      	adds	r3, r2, r3
   1db84:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1db86:	68fa      	ldr	r2, [r7, #12]
   1db88:	697b      	ldr	r3, [r7, #20]
   1db8a:	429a      	cmp	r2, r3
   1db8c:	d90e      	bls.n	1dbac <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1db8e:	693b      	ldr	r3, [r7, #16]
   1db90:	68fa      	ldr	r2, [r7, #12]
   1db92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1db94:	693b      	ldr	r3, [r7, #16]
   1db96:	693a      	ldr	r2, [r7, #16]
   1db98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1db9a:	4b15      	ldr	r3, [pc, #84]	; (1dbf0 <prvSwitchTimerLists+0xac>)
   1db9c:	681a      	ldr	r2, [r3, #0]
   1db9e:	693b      	ldr	r3, [r7, #16]
   1dba0:	3304      	adds	r3, #4
   1dba2:	0019      	movs	r1, r3
   1dba4:	0010      	movs	r0, r2
   1dba6:	4b14      	ldr	r3, [pc, #80]	; (1dbf8 <prvSwitchTimerLists+0xb4>)
   1dba8:	4798      	blx	r3
   1dbaa:	e00e      	b.n	1dbca <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1dbac:	697a      	ldr	r2, [r7, #20]
   1dbae:	6938      	ldr	r0, [r7, #16]
   1dbb0:	2300      	movs	r3, #0
   1dbb2:	9300      	str	r3, [sp, #0]
   1dbb4:	2300      	movs	r3, #0
   1dbb6:	2100      	movs	r1, #0
   1dbb8:	4c10      	ldr	r4, [pc, #64]	; (1dbfc <prvSwitchTimerLists+0xb8>)
   1dbba:	47a0      	blx	r4
   1dbbc:	0003      	movs	r3, r0
   1dbbe:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1dbc0:	68bb      	ldr	r3, [r7, #8]
   1dbc2:	2b00      	cmp	r3, #0
   1dbc4:	d101      	bne.n	1dbca <prvSwitchTimerLists+0x86>
   1dbc6:	b672      	cpsid	i
   1dbc8:	e7fe      	b.n	1dbc8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1dbca:	4b09      	ldr	r3, [pc, #36]	; (1dbf0 <prvSwitchTimerLists+0xac>)
   1dbcc:	681b      	ldr	r3, [r3, #0]
   1dbce:	681b      	ldr	r3, [r3, #0]
   1dbd0:	2b00      	cmp	r3, #0
   1dbd2:	d1bb      	bne.n	1db4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1dbd4:	4b06      	ldr	r3, [pc, #24]	; (1dbf0 <prvSwitchTimerLists+0xac>)
   1dbd6:	681b      	ldr	r3, [r3, #0]
   1dbd8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1dbda:	4b09      	ldr	r3, [pc, #36]	; (1dc00 <prvSwitchTimerLists+0xbc>)
   1dbdc:	681a      	ldr	r2, [r3, #0]
   1dbde:	4b04      	ldr	r3, [pc, #16]	; (1dbf0 <prvSwitchTimerLists+0xac>)
   1dbe0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1dbe2:	4b07      	ldr	r3, [pc, #28]	; (1dc00 <prvSwitchTimerLists+0xbc>)
   1dbe4:	687a      	ldr	r2, [r7, #4]
   1dbe6:	601a      	str	r2, [r3, #0]
}
   1dbe8:	46c0      	nop			; (mov r8, r8)
   1dbea:	46bd      	mov	sp, r7
   1dbec:	b007      	add	sp, #28
   1dbee:	bd90      	pop	{r4, r7, pc}
   1dbf0:	20003df8 	.word	0x20003df8
   1dbf4:	0001a267 	.word	0x0001a267
   1dbf8:	0001a1fb 	.word	0x0001a1fb
   1dbfc:	0001d719 	.word	0x0001d719
   1dc00:	20003dfc 	.word	0x20003dfc

0001dc04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1dc04:	b580      	push	{r7, lr}
   1dc06:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1dc08:	4b10      	ldr	r3, [pc, #64]	; (1dc4c <prvCheckForValidListAndQueue+0x48>)
   1dc0a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1dc0c:	4b10      	ldr	r3, [pc, #64]	; (1dc50 <prvCheckForValidListAndQueue+0x4c>)
   1dc0e:	681b      	ldr	r3, [r3, #0]
   1dc10:	2b00      	cmp	r3, #0
   1dc12:	d115      	bne.n	1dc40 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1dc14:	4b0f      	ldr	r3, [pc, #60]	; (1dc54 <prvCheckForValidListAndQueue+0x50>)
   1dc16:	0018      	movs	r0, r3
   1dc18:	4b0f      	ldr	r3, [pc, #60]	; (1dc58 <prvCheckForValidListAndQueue+0x54>)
   1dc1a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1dc1c:	4b0f      	ldr	r3, [pc, #60]	; (1dc5c <prvCheckForValidListAndQueue+0x58>)
   1dc1e:	0018      	movs	r0, r3
   1dc20:	4b0d      	ldr	r3, [pc, #52]	; (1dc58 <prvCheckForValidListAndQueue+0x54>)
   1dc22:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1dc24:	4b0e      	ldr	r3, [pc, #56]	; (1dc60 <prvCheckForValidListAndQueue+0x5c>)
   1dc26:	4a0b      	ldr	r2, [pc, #44]	; (1dc54 <prvCheckForValidListAndQueue+0x50>)
   1dc28:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1dc2a:	4b0e      	ldr	r3, [pc, #56]	; (1dc64 <prvCheckForValidListAndQueue+0x60>)
   1dc2c:	4a0b      	ldr	r2, [pc, #44]	; (1dc5c <prvCheckForValidListAndQueue+0x58>)
   1dc2e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1dc30:	2200      	movs	r2, #0
   1dc32:	210c      	movs	r1, #12
   1dc34:	2005      	movs	r0, #5
   1dc36:	4b0c      	ldr	r3, [pc, #48]	; (1dc68 <prvCheckForValidListAndQueue+0x64>)
   1dc38:	4798      	blx	r3
   1dc3a:	0002      	movs	r2, r0
   1dc3c:	4b04      	ldr	r3, [pc, #16]	; (1dc50 <prvCheckForValidListAndQueue+0x4c>)
   1dc3e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1dc40:	4b0a      	ldr	r3, [pc, #40]	; (1dc6c <prvCheckForValidListAndQueue+0x68>)
   1dc42:	4798      	blx	r3
}
   1dc44:	46c0      	nop			; (mov r8, r8)
   1dc46:	46bd      	mov	sp, r7
   1dc48:	bd80      	pop	{r7, pc}
   1dc4a:	46c0      	nop			; (mov r8, r8)
   1dc4c:	0001a3f9 	.word	0x0001a3f9
   1dc50:	20003e00 	.word	0x20003e00
   1dc54:	20003dd0 	.word	0x20003dd0
   1dc58:	0001a165 	.word	0x0001a165
   1dc5c:	20003de4 	.word	0x20003de4
   1dc60:	20003df8 	.word	0x20003df8
   1dc64:	20003dfc 	.word	0x20003dfc
   1dc68:	0001a6e5 	.word	0x0001a6e5
   1dc6c:	0001a41d 	.word	0x0001a41d

0001dc70 <advance_pointer>:
   1dc70:	b580      	push	{r7, lr}
   1dc72:	b082      	sub	sp, #8
   1dc74:	af00      	add	r7, sp, #0
   1dc76:	6078      	str	r0, [r7, #4]
   1dc78:	687b      	ldr	r3, [r7, #4]
   1dc7a:	7c1b      	ldrb	r3, [r3, #16]
   1dc7c:	2b00      	cmp	r3, #0
   1dc7e:	d00b      	beq.n	1dc98 <advance_pointer+0x28>
   1dc80:	687b      	ldr	r3, [r7, #4]
   1dc82:	689b      	ldr	r3, [r3, #8]
   1dc84:	1c5a      	adds	r2, r3, #1
   1dc86:	687b      	ldr	r3, [r7, #4]
   1dc88:	68d9      	ldr	r1, [r3, #12]
   1dc8a:	4b10      	ldr	r3, [pc, #64]	; (1dccc <advance_pointer+0x5c>)
   1dc8c:	0010      	movs	r0, r2
   1dc8e:	4798      	blx	r3
   1dc90:	000b      	movs	r3, r1
   1dc92:	001a      	movs	r2, r3
   1dc94:	687b      	ldr	r3, [r7, #4]
   1dc96:	609a      	str	r2, [r3, #8]
   1dc98:	687b      	ldr	r3, [r7, #4]
   1dc9a:	685b      	ldr	r3, [r3, #4]
   1dc9c:	1c5a      	adds	r2, r3, #1
   1dc9e:	687b      	ldr	r3, [r7, #4]
   1dca0:	68d9      	ldr	r1, [r3, #12]
   1dca2:	4b0a      	ldr	r3, [pc, #40]	; (1dccc <advance_pointer+0x5c>)
   1dca4:	0010      	movs	r0, r2
   1dca6:	4798      	blx	r3
   1dca8:	000b      	movs	r3, r1
   1dcaa:	001a      	movs	r2, r3
   1dcac:	687b      	ldr	r3, [r7, #4]
   1dcae:	605a      	str	r2, [r3, #4]
   1dcb0:	687b      	ldr	r3, [r7, #4]
   1dcb2:	685a      	ldr	r2, [r3, #4]
   1dcb4:	687b      	ldr	r3, [r7, #4]
   1dcb6:	689b      	ldr	r3, [r3, #8]
   1dcb8:	1ad3      	subs	r3, r2, r3
   1dcba:	425a      	negs	r2, r3
   1dcbc:	4153      	adcs	r3, r2
   1dcbe:	b2da      	uxtb	r2, r3
   1dcc0:	687b      	ldr	r3, [r7, #4]
   1dcc2:	741a      	strb	r2, [r3, #16]
   1dcc4:	46c0      	nop			; (mov r8, r8)
   1dcc6:	46bd      	mov	sp, r7
   1dcc8:	b002      	add	sp, #8
   1dcca:	bd80      	pop	{r7, pc}
   1dccc:	000329d1 	.word	0x000329d1

0001dcd0 <retreat_pointer>:
   1dcd0:	b580      	push	{r7, lr}
   1dcd2:	b082      	sub	sp, #8
   1dcd4:	af00      	add	r7, sp, #0
   1dcd6:	6078      	str	r0, [r7, #4]
   1dcd8:	687b      	ldr	r3, [r7, #4]
   1dcda:	2200      	movs	r2, #0
   1dcdc:	741a      	strb	r2, [r3, #16]
   1dcde:	687b      	ldr	r3, [r7, #4]
   1dce0:	689b      	ldr	r3, [r3, #8]
   1dce2:	1c5a      	adds	r2, r3, #1
   1dce4:	687b      	ldr	r3, [r7, #4]
   1dce6:	68d9      	ldr	r1, [r3, #12]
   1dce8:	4b05      	ldr	r3, [pc, #20]	; (1dd00 <retreat_pointer+0x30>)
   1dcea:	0010      	movs	r0, r2
   1dcec:	4798      	blx	r3
   1dcee:	000b      	movs	r3, r1
   1dcf0:	001a      	movs	r2, r3
   1dcf2:	687b      	ldr	r3, [r7, #4]
   1dcf4:	609a      	str	r2, [r3, #8]
   1dcf6:	46c0      	nop			; (mov r8, r8)
   1dcf8:	46bd      	mov	sp, r7
   1dcfa:	b002      	add	sp, #8
   1dcfc:	bd80      	pop	{r7, pc}
   1dcfe:	46c0      	nop			; (mov r8, r8)
   1dd00:	000329d1 	.word	0x000329d1

0001dd04 <circular_buf_init>:
   1dd04:	b580      	push	{r7, lr}
   1dd06:	b084      	sub	sp, #16
   1dd08:	af00      	add	r7, sp, #0
   1dd0a:	6078      	str	r0, [r7, #4]
   1dd0c:	6039      	str	r1, [r7, #0]
   1dd0e:	2014      	movs	r0, #20
   1dd10:	4b09      	ldr	r3, [pc, #36]	; (1dd38 <circular_buf_init+0x34>)
   1dd12:	4798      	blx	r3
   1dd14:	0003      	movs	r3, r0
   1dd16:	60fb      	str	r3, [r7, #12]
   1dd18:	68fb      	ldr	r3, [r7, #12]
   1dd1a:	687a      	ldr	r2, [r7, #4]
   1dd1c:	601a      	str	r2, [r3, #0]
   1dd1e:	68fb      	ldr	r3, [r7, #12]
   1dd20:	683a      	ldr	r2, [r7, #0]
   1dd22:	60da      	str	r2, [r3, #12]
   1dd24:	68fb      	ldr	r3, [r7, #12]
   1dd26:	0018      	movs	r0, r3
   1dd28:	4b04      	ldr	r3, [pc, #16]	; (1dd3c <circular_buf_init+0x38>)
   1dd2a:	4798      	blx	r3
   1dd2c:	68fb      	ldr	r3, [r7, #12]
   1dd2e:	0018      	movs	r0, r3
   1dd30:	46bd      	mov	sp, r7
   1dd32:	b004      	add	sp, #16
   1dd34:	bd80      	pop	{r7, pc}
   1dd36:	46c0      	nop			; (mov r8, r8)
   1dd38:	00034841 	.word	0x00034841
   1dd3c:	0001dd41 	.word	0x0001dd41

0001dd40 <circular_buf_reset>:
   1dd40:	b580      	push	{r7, lr}
   1dd42:	b082      	sub	sp, #8
   1dd44:	af00      	add	r7, sp, #0
   1dd46:	6078      	str	r0, [r7, #4]
   1dd48:	687b      	ldr	r3, [r7, #4]
   1dd4a:	2200      	movs	r2, #0
   1dd4c:	605a      	str	r2, [r3, #4]
   1dd4e:	687b      	ldr	r3, [r7, #4]
   1dd50:	2200      	movs	r2, #0
   1dd52:	609a      	str	r2, [r3, #8]
   1dd54:	687b      	ldr	r3, [r7, #4]
   1dd56:	2200      	movs	r2, #0
   1dd58:	741a      	strb	r2, [r3, #16]
   1dd5a:	46c0      	nop			; (mov r8, r8)
   1dd5c:	46bd      	mov	sp, r7
   1dd5e:	b002      	add	sp, #8
   1dd60:	bd80      	pop	{r7, pc}
	...

0001dd64 <circular_buf_put>:
   1dd64:	b580      	push	{r7, lr}
   1dd66:	b082      	sub	sp, #8
   1dd68:	af00      	add	r7, sp, #0
   1dd6a:	6078      	str	r0, [r7, #4]
   1dd6c:	000a      	movs	r2, r1
   1dd6e:	1cfb      	adds	r3, r7, #3
   1dd70:	701a      	strb	r2, [r3, #0]
   1dd72:	687b      	ldr	r3, [r7, #4]
   1dd74:	681a      	ldr	r2, [r3, #0]
   1dd76:	687b      	ldr	r3, [r7, #4]
   1dd78:	685b      	ldr	r3, [r3, #4]
   1dd7a:	18d3      	adds	r3, r2, r3
   1dd7c:	1cfa      	adds	r2, r7, #3
   1dd7e:	7812      	ldrb	r2, [r2, #0]
   1dd80:	701a      	strb	r2, [r3, #0]
   1dd82:	687b      	ldr	r3, [r7, #4]
   1dd84:	0018      	movs	r0, r3
   1dd86:	4b03      	ldr	r3, [pc, #12]	; (1dd94 <circular_buf_put+0x30>)
   1dd88:	4798      	blx	r3
   1dd8a:	46c0      	nop			; (mov r8, r8)
   1dd8c:	46bd      	mov	sp, r7
   1dd8e:	b002      	add	sp, #8
   1dd90:	bd80      	pop	{r7, pc}
   1dd92:	46c0      	nop			; (mov r8, r8)
   1dd94:	0001dc71 	.word	0x0001dc71

0001dd98 <circular_buf_get>:
   1dd98:	b580      	push	{r7, lr}
   1dd9a:	b084      	sub	sp, #16
   1dd9c:	af00      	add	r7, sp, #0
   1dd9e:	6078      	str	r0, [r7, #4]
   1dda0:	6039      	str	r1, [r7, #0]
   1dda2:	2301      	movs	r3, #1
   1dda4:	425b      	negs	r3, r3
   1dda6:	60fb      	str	r3, [r7, #12]
   1dda8:	687b      	ldr	r3, [r7, #4]
   1ddaa:	0018      	movs	r0, r3
   1ddac:	4b0d      	ldr	r3, [pc, #52]	; (1dde4 <circular_buf_get+0x4c>)
   1ddae:	4798      	blx	r3
   1ddb0:	0003      	movs	r3, r0
   1ddb2:	001a      	movs	r2, r3
   1ddb4:	2301      	movs	r3, #1
   1ddb6:	4053      	eors	r3, r2
   1ddb8:	b2db      	uxtb	r3, r3
   1ddba:	2b00      	cmp	r3, #0
   1ddbc:	d00d      	beq.n	1ddda <circular_buf_get+0x42>
   1ddbe:	687b      	ldr	r3, [r7, #4]
   1ddc0:	681a      	ldr	r2, [r3, #0]
   1ddc2:	687b      	ldr	r3, [r7, #4]
   1ddc4:	689b      	ldr	r3, [r3, #8]
   1ddc6:	18d3      	adds	r3, r2, r3
   1ddc8:	781a      	ldrb	r2, [r3, #0]
   1ddca:	683b      	ldr	r3, [r7, #0]
   1ddcc:	701a      	strb	r2, [r3, #0]
   1ddce:	687b      	ldr	r3, [r7, #4]
   1ddd0:	0018      	movs	r0, r3
   1ddd2:	4b05      	ldr	r3, [pc, #20]	; (1dde8 <circular_buf_get+0x50>)
   1ddd4:	4798      	blx	r3
   1ddd6:	2300      	movs	r3, #0
   1ddd8:	60fb      	str	r3, [r7, #12]
   1ddda:	68fb      	ldr	r3, [r7, #12]
   1dddc:	0018      	movs	r0, r3
   1ddde:	46bd      	mov	sp, r7
   1dde0:	b004      	add	sp, #16
   1dde2:	bd80      	pop	{r7, pc}
   1dde4:	0001dded 	.word	0x0001dded
   1dde8:	0001dcd1 	.word	0x0001dcd1

0001ddec <circular_buf_empty>:
   1ddec:	b580      	push	{r7, lr}
   1ddee:	b082      	sub	sp, #8
   1ddf0:	af00      	add	r7, sp, #0
   1ddf2:	6078      	str	r0, [r7, #4]
   1ddf4:	687b      	ldr	r3, [r7, #4]
   1ddf6:	7c1b      	ldrb	r3, [r3, #16]
   1ddf8:	2201      	movs	r2, #1
   1ddfa:	4053      	eors	r3, r2
   1ddfc:	b2db      	uxtb	r3, r3
   1ddfe:	2b00      	cmp	r3, #0
   1de00:	d007      	beq.n	1de12 <circular_buf_empty+0x26>
   1de02:	687b      	ldr	r3, [r7, #4]
   1de04:	685a      	ldr	r2, [r3, #4]
   1de06:	687b      	ldr	r3, [r7, #4]
   1de08:	689b      	ldr	r3, [r3, #8]
   1de0a:	429a      	cmp	r2, r3
   1de0c:	d101      	bne.n	1de12 <circular_buf_empty+0x26>
   1de0e:	2301      	movs	r3, #1
   1de10:	e000      	b.n	1de14 <circular_buf_empty+0x28>
   1de12:	2300      	movs	r3, #0
   1de14:	1c1a      	adds	r2, r3, #0
   1de16:	2301      	movs	r3, #1
   1de18:	4013      	ands	r3, r2
   1de1a:	b2db      	uxtb	r3, r3
   1de1c:	0018      	movs	r0, r3
   1de1e:	46bd      	mov	sp, r7
   1de20:	b002      	add	sp, #8
   1de22:	bd80      	pop	{r7, pc}

0001de24 <system_interrupt_enable>:
{
   1de24:	b580      	push	{r7, lr}
   1de26:	b082      	sub	sp, #8
   1de28:	af00      	add	r7, sp, #0
   1de2a:	0002      	movs	r2, r0
   1de2c:	1dfb      	adds	r3, r7, #7
   1de2e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1de30:	4b06      	ldr	r3, [pc, #24]	; (1de4c <system_interrupt_enable+0x28>)
   1de32:	1dfa      	adds	r2, r7, #7
   1de34:	7812      	ldrb	r2, [r2, #0]
   1de36:	0011      	movs	r1, r2
   1de38:	221f      	movs	r2, #31
   1de3a:	400a      	ands	r2, r1
   1de3c:	2101      	movs	r1, #1
   1de3e:	4091      	lsls	r1, r2
   1de40:	000a      	movs	r2, r1
   1de42:	601a      	str	r2, [r3, #0]
}
   1de44:	46c0      	nop			; (mov r8, r8)
   1de46:	46bd      	mov	sp, r7
   1de48:	b002      	add	sp, #8
   1de4a:	bd80      	pop	{r7, pc}
   1de4c:	e000e100 	.word	0xe000e100

0001de50 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1de50:	b580      	push	{r7, lr}
   1de52:	b084      	sub	sp, #16
   1de54:	af00      	add	r7, sp, #0
   1de56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1de58:	687b      	ldr	r3, [r7, #4]
   1de5a:	681b      	ldr	r3, [r3, #0]
   1de5c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1de5e:	68fb      	ldr	r3, [r7, #12]
   1de60:	69db      	ldr	r3, [r3, #28]
   1de62:	1e5a      	subs	r2, r3, #1
   1de64:	4193      	sbcs	r3, r2
   1de66:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1de68:	0018      	movs	r0, r3
   1de6a:	46bd      	mov	sp, r7
   1de6c:	b004      	add	sp, #16
   1de6e:	bd80      	pop	{r7, pc}

0001de70 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1de70:	b580      	push	{r7, lr}
   1de72:	b082      	sub	sp, #8
   1de74:	af00      	add	r7, sp, #0
   1de76:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1de78:	46c0      	nop			; (mov r8, r8)
   1de7a:	687b      	ldr	r3, [r7, #4]
   1de7c:	0018      	movs	r0, r3
   1de7e:	4b04      	ldr	r3, [pc, #16]	; (1de90 <_usart_wait_for_sync+0x20>)
   1de80:	4798      	blx	r3
   1de82:	1e03      	subs	r3, r0, #0
   1de84:	d1f9      	bne.n	1de7a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1de86:	46c0      	nop			; (mov r8, r8)
   1de88:	46bd      	mov	sp, r7
   1de8a:	b002      	add	sp, #8
   1de8c:	bd80      	pop	{r7, pc}
   1de8e:	46c0      	nop			; (mov r8, r8)
   1de90:	0001de51 	.word	0x0001de51

0001de94 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1de94:	b580      	push	{r7, lr}
   1de96:	b082      	sub	sp, #8
   1de98:	af00      	add	r7, sp, #0
   1de9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1de9c:	687b      	ldr	r3, [r7, #4]
   1de9e:	2280      	movs	r2, #128	; 0x80
   1dea0:	05d2      	lsls	r2, r2, #23
   1dea2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1dea4:	687b      	ldr	r3, [r7, #4]
   1dea6:	2200      	movs	r2, #0
   1dea8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1deaa:	687b      	ldr	r3, [r7, #4]
   1deac:	22ff      	movs	r2, #255	; 0xff
   1deae:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1deb0:	687b      	ldr	r3, [r7, #4]
   1deb2:	2200      	movs	r2, #0
   1deb4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1deb6:	687b      	ldr	r3, [r7, #4]
   1deb8:	2200      	movs	r2, #0
   1deba:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1debc:	687b      	ldr	r3, [r7, #4]
   1debe:	2296      	movs	r2, #150	; 0x96
   1dec0:	0192      	lsls	r2, r2, #6
   1dec2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1dec4:	687b      	ldr	r3, [r7, #4]
   1dec6:	2224      	movs	r2, #36	; 0x24
   1dec8:	2101      	movs	r1, #1
   1deca:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1decc:	687b      	ldr	r3, [r7, #4]
   1dece:	2225      	movs	r2, #37	; 0x25
   1ded0:	2101      	movs	r1, #1
   1ded2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1ded4:	687b      	ldr	r3, [r7, #4]
   1ded6:	2226      	movs	r2, #38	; 0x26
   1ded8:	2100      	movs	r1, #0
   1deda:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1dedc:	687b      	ldr	r3, [r7, #4]
   1dede:	2227      	movs	r2, #39	; 0x27
   1dee0:	2100      	movs	r1, #0
   1dee2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1dee4:	687b      	ldr	r3, [r7, #4]
   1dee6:	2200      	movs	r2, #0
   1dee8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1deea:	687b      	ldr	r3, [r7, #4]
   1deec:	2288      	movs	r2, #136	; 0x88
   1deee:	0352      	lsls	r2, r2, #13
   1def0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1def2:	687b      	ldr	r3, [r7, #4]
   1def4:	222c      	movs	r2, #44	; 0x2c
   1def6:	2100      	movs	r1, #0
   1def8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1defa:	687b      	ldr	r3, [r7, #4]
   1defc:	222d      	movs	r2, #45	; 0x2d
   1defe:	2100      	movs	r1, #0
   1df00:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1df02:	687b      	ldr	r3, [r7, #4]
   1df04:	2200      	movs	r2, #0
   1df06:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1df08:	687b      	ldr	r3, [r7, #4]
   1df0a:	2200      	movs	r2, #0
   1df0c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1df0e:	687b      	ldr	r3, [r7, #4]
   1df10:	2200      	movs	r2, #0
   1df12:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1df14:	687b      	ldr	r3, [r7, #4]
   1df16:	2200      	movs	r2, #0
   1df18:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1df1a:	687b      	ldr	r3, [r7, #4]
   1df1c:	2200      	movs	r2, #0
   1df1e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1df20:	687b      	ldr	r3, [r7, #4]
   1df22:	2200      	movs	r2, #0
   1df24:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1df26:	687b      	ldr	r3, [r7, #4]
   1df28:	2200      	movs	r2, #0
   1df2a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1df2c:	687b      	ldr	r3, [r7, #4]
   1df2e:	2200      	movs	r2, #0
   1df30:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1df32:	687b      	ldr	r3, [r7, #4]
   1df34:	2200      	movs	r2, #0
   1df36:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1df38:	687b      	ldr	r3, [r7, #4]
   1df3a:	2200      	movs	r2, #0
   1df3c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1df3e:	687b      	ldr	r3, [r7, #4]
   1df40:	2213      	movs	r2, #19
   1df42:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1df44:	687b      	ldr	r3, [r7, #4]
   1df46:	2200      	movs	r2, #0
   1df48:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1df4a:	46c0      	nop			; (mov r8, r8)
   1df4c:	46bd      	mov	sp, r7
   1df4e:	b002      	add	sp, #8
   1df50:	bd80      	pop	{r7, pc}
	...

0001df54 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1df54:	b580      	push	{r7, lr}
   1df56:	b084      	sub	sp, #16
   1df58:	af00      	add	r7, sp, #0
   1df5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1df5c:	687b      	ldr	r3, [r7, #4]
   1df5e:	681b      	ldr	r3, [r3, #0]
   1df60:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1df62:	687b      	ldr	r3, [r7, #4]
   1df64:	681b      	ldr	r3, [r3, #0]
   1df66:	0018      	movs	r0, r3
   1df68:	4b09      	ldr	r3, [pc, #36]	; (1df90 <usart_enable+0x3c>)
   1df6a:	4798      	blx	r3
   1df6c:	0003      	movs	r3, r0
   1df6e:	0018      	movs	r0, r3
   1df70:	4b08      	ldr	r3, [pc, #32]	; (1df94 <usart_enable+0x40>)
   1df72:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1df74:	687b      	ldr	r3, [r7, #4]
   1df76:	0018      	movs	r0, r3
   1df78:	4b07      	ldr	r3, [pc, #28]	; (1df98 <usart_enable+0x44>)
   1df7a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1df7c:	68fb      	ldr	r3, [r7, #12]
   1df7e:	681b      	ldr	r3, [r3, #0]
   1df80:	2202      	movs	r2, #2
   1df82:	431a      	orrs	r2, r3
   1df84:	68fb      	ldr	r3, [r7, #12]
   1df86:	601a      	str	r2, [r3, #0]
}
   1df88:	46c0      	nop			; (mov r8, r8)
   1df8a:	46bd      	mov	sp, r7
   1df8c:	b004      	add	sp, #16
   1df8e:	bd80      	pop	{r7, pc}
   1df90:	0002759d 	.word	0x0002759d
   1df94:	0001de25 	.word	0x0001de25
   1df98:	0001de71 	.word	0x0001de71

0001df9c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1df9c:	b580      	push	{r7, lr}
   1df9e:	b082      	sub	sp, #8
   1dfa0:	af00      	add	r7, sp, #0
   1dfa2:	6078      	str	r0, [r7, #4]
   1dfa4:	000a      	movs	r2, r1
   1dfa6:	1cfb      	adds	r3, r7, #3
   1dfa8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1dfaa:	687b      	ldr	r3, [r7, #4]
   1dfac:	2231      	movs	r2, #49	; 0x31
   1dfae:	5c9b      	ldrb	r3, [r3, r2]
   1dfb0:	b25a      	sxtb	r2, r3
   1dfb2:	1cfb      	adds	r3, r7, #3
   1dfb4:	781b      	ldrb	r3, [r3, #0]
   1dfb6:	2101      	movs	r1, #1
   1dfb8:	4099      	lsls	r1, r3
   1dfba:	000b      	movs	r3, r1
   1dfbc:	b25b      	sxtb	r3, r3
   1dfbe:	4313      	orrs	r3, r2
   1dfc0:	b25b      	sxtb	r3, r3
   1dfc2:	b2d9      	uxtb	r1, r3
   1dfc4:	687b      	ldr	r3, [r7, #4]
   1dfc6:	2231      	movs	r2, #49	; 0x31
   1dfc8:	5499      	strb	r1, [r3, r2]

}
   1dfca:	46c0      	nop			; (mov r8, r8)
   1dfcc:	46bd      	mov	sp, r7
   1dfce:	b002      	add	sp, #8
   1dfd0:	bd80      	pop	{r7, pc}
	...

0001dfd4 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1dfd4:	b580      	push	{r7, lr}
   1dfd6:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1dfd8:	2380      	movs	r3, #128	; 0x80
   1dfda:	009a      	lsls	r2, r3, #2
   1dfdc:	4b0f      	ldr	r3, [pc, #60]	; (1e01c <InitializeSerialConsole+0x48>)
   1dfde:	0011      	movs	r1, r2
   1dfe0:	0018      	movs	r0, r3
   1dfe2:	4b0f      	ldr	r3, [pc, #60]	; (1e020 <InitializeSerialConsole+0x4c>)
   1dfe4:	4798      	blx	r3
   1dfe6:	0002      	movs	r2, r0
   1dfe8:	4b0e      	ldr	r3, [pc, #56]	; (1e024 <InitializeSerialConsole+0x50>)
   1dfea:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1dfec:	2380      	movs	r3, #128	; 0x80
   1dfee:	009a      	lsls	r2, r3, #2
   1dff0:	4b0d      	ldr	r3, [pc, #52]	; (1e028 <InitializeSerialConsole+0x54>)
   1dff2:	0011      	movs	r1, r2
   1dff4:	0018      	movs	r0, r3
   1dff6:	4b0a      	ldr	r3, [pc, #40]	; (1e020 <InitializeSerialConsole+0x4c>)
   1dff8:	4798      	blx	r3
   1dffa:	0002      	movs	r2, r0
   1dffc:	4b0b      	ldr	r3, [pc, #44]	; (1e02c <InitializeSerialConsole+0x58>)
   1dffe:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1e000:	4b0b      	ldr	r3, [pc, #44]	; (1e030 <InitializeSerialConsole+0x5c>)
   1e002:	4798      	blx	r3
    configure_usart_callbacks();
   1e004:	4b0b      	ldr	r3, [pc, #44]	; (1e034 <InitializeSerialConsole+0x60>)
   1e006:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1e008:	490b      	ldr	r1, [pc, #44]	; (1e038 <InitializeSerialConsole+0x64>)
   1e00a:	4b0c      	ldr	r3, [pc, #48]	; (1e03c <InitializeSerialConsole+0x68>)
   1e00c:	2201      	movs	r2, #1
   1e00e:	0018      	movs	r0, r3
   1e010:	4b0b      	ldr	r3, [pc, #44]	; (1e040 <InitializeSerialConsole+0x6c>)
   1e012:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1e014:	46c0      	nop			; (mov r8, r8)
   1e016:	46bd      	mov	sp, r7
   1e018:	bd80      	pop	{r7, pc}
   1e01a:	46c0      	nop			; (mov r8, r8)
   1e01c:	20005418 	.word	0x20005418
   1e020:	0001dd05 	.word	0x0001dd05
   1e024:	20005210 	.word	0x20005210
   1e028:	20005218 	.word	0x20005218
   1e02c:	2000561c 	.word	0x2000561c
   1e030:	0001e1a9 	.word	0x0001e1a9
   1e034:	0001e221 	.word	0x0001e221
   1e038:	20005214 	.word	0x20005214
   1e03c:	200051dc 	.word	0x200051dc
   1e040:	00028e45 	.word	0x00028e45

0001e044 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1e044:	b580      	push	{r7, lr}
   1e046:	b084      	sub	sp, #16
   1e048:	af00      	add	r7, sp, #0
   1e04a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e04c:	4b1a      	ldr	r3, [pc, #104]	; (1e0b8 <SerialConsoleWriteString+0x74>)
   1e04e:	4798      	blx	r3
    if (string != NULL) {
   1e050:	687b      	ldr	r3, [r7, #4]
   1e052:	2b00      	cmp	r3, #0
   1e054:	d02a      	beq.n	1e0ac <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e056:	2300      	movs	r3, #0
   1e058:	60fb      	str	r3, [r7, #12]
   1e05a:	e00b      	b.n	1e074 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1e05c:	4b17      	ldr	r3, [pc, #92]	; (1e0bc <SerialConsoleWriteString+0x78>)
   1e05e:	6818      	ldr	r0, [r3, #0]
   1e060:	687a      	ldr	r2, [r7, #4]
   1e062:	68fb      	ldr	r3, [r7, #12]
   1e064:	18d3      	adds	r3, r2, r3
   1e066:	781b      	ldrb	r3, [r3, #0]
   1e068:	0019      	movs	r1, r3
   1e06a:	4b15      	ldr	r3, [pc, #84]	; (1e0c0 <SerialConsoleWriteString+0x7c>)
   1e06c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e06e:	68fb      	ldr	r3, [r7, #12]
   1e070:	3301      	adds	r3, #1
   1e072:	60fb      	str	r3, [r7, #12]
   1e074:	687b      	ldr	r3, [r7, #4]
   1e076:	0018      	movs	r0, r3
   1e078:	4b12      	ldr	r3, [pc, #72]	; (1e0c4 <SerialConsoleWriteString+0x80>)
   1e07a:	4798      	blx	r3
   1e07c:	0002      	movs	r2, r0
   1e07e:	68fb      	ldr	r3, [r7, #12]
   1e080:	429a      	cmp	r2, r3
   1e082:	d8eb      	bhi.n	1e05c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1e084:	4b10      	ldr	r3, [pc, #64]	; (1e0c8 <SerialConsoleWriteString+0x84>)
   1e086:	2101      	movs	r1, #1
   1e088:	0018      	movs	r0, r3
   1e08a:	4b10      	ldr	r3, [pc, #64]	; (1e0cc <SerialConsoleWriteString+0x88>)
   1e08c:	4798      	blx	r3
   1e08e:	1e03      	subs	r3, r0, #0
   1e090:	d10c      	bne.n	1e0ac <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1e092:	4b0a      	ldr	r3, [pc, #40]	; (1e0bc <SerialConsoleWriteString+0x78>)
   1e094:	681b      	ldr	r3, [r3, #0]
   1e096:	4a0e      	ldr	r2, [pc, #56]	; (1e0d0 <SerialConsoleWriteString+0x8c>)
   1e098:	0011      	movs	r1, r2
   1e09a:	0018      	movs	r0, r3
   1e09c:	4b0d      	ldr	r3, [pc, #52]	; (1e0d4 <SerialConsoleWriteString+0x90>)
   1e09e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1e0a0:	490b      	ldr	r1, [pc, #44]	; (1e0d0 <SerialConsoleWriteString+0x8c>)
   1e0a2:	4b09      	ldr	r3, [pc, #36]	; (1e0c8 <SerialConsoleWriteString+0x84>)
   1e0a4:	2201      	movs	r2, #1
   1e0a6:	0018      	movs	r0, r3
   1e0a8:	4b0b      	ldr	r3, [pc, #44]	; (1e0d8 <SerialConsoleWriteString+0x94>)
   1e0aa:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1e0ac:	4b0b      	ldr	r3, [pc, #44]	; (1e0dc <SerialConsoleWriteString+0x98>)
   1e0ae:	4798      	blx	r3
}
   1e0b0:	46c0      	nop			; (mov r8, r8)
   1e0b2:	46bd      	mov	sp, r7
   1e0b4:	b004      	add	sp, #16
   1e0b6:	bd80      	pop	{r7, pc}
   1e0b8:	0001c6b1 	.word	0x0001c6b1
   1e0bc:	2000561c 	.word	0x2000561c
   1e0c0:	0001dd65 	.word	0x0001dd65
   1e0c4:	00034c57 	.word	0x00034c57
   1e0c8:	200051dc 	.word	0x200051dc
   1e0cc:	00028e8d 	.word	0x00028e8d
   1e0d0:	20005618 	.word	0x20005618
   1e0d4:	0001dd99 	.word	0x0001dd99
   1e0d8:	00028dfd 	.word	0x00028dfd
   1e0dc:	0001c6c9 	.word	0x0001c6c9

0001e0e0 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1e0e0:	b580      	push	{r7, lr}
   1e0e2:	b084      	sub	sp, #16
   1e0e4:	af00      	add	r7, sp, #0
   1e0e6:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e0e8:	4b08      	ldr	r3, [pc, #32]	; (1e10c <SerialConsoleReadCharacter+0x2c>)
   1e0ea:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1e0ec:	4b08      	ldr	r3, [pc, #32]	; (1e110 <SerialConsoleReadCharacter+0x30>)
   1e0ee:	681b      	ldr	r3, [r3, #0]
   1e0f0:	687a      	ldr	r2, [r7, #4]
   1e0f2:	0011      	movs	r1, r2
   1e0f4:	0018      	movs	r0, r3
   1e0f6:	4b07      	ldr	r3, [pc, #28]	; (1e114 <SerialConsoleReadCharacter+0x34>)
   1e0f8:	4798      	blx	r3
   1e0fa:	0003      	movs	r3, r0
   1e0fc:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1e0fe:	4b06      	ldr	r3, [pc, #24]	; (1e118 <SerialConsoleReadCharacter+0x38>)
   1e100:	4798      	blx	r3
    return a;
   1e102:	68fb      	ldr	r3, [r7, #12]
}
   1e104:	0018      	movs	r0, r3
   1e106:	46bd      	mov	sp, r7
   1e108:	b004      	add	sp, #16
   1e10a:	bd80      	pop	{r7, pc}
   1e10c:	0001c6b1 	.word	0x0001c6b1
   1e110:	20005210 	.word	0x20005210
   1e114:	0001dd99 	.word	0x0001dd99
   1e118:	0001c6c9 	.word	0x0001c6c9

0001e11c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1e11c:	b580      	push	{r7, lr}
   1e11e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1e120:	4b02      	ldr	r3, [pc, #8]	; (1e12c <getLogLevel+0x10>)
   1e122:	781b      	ldrb	r3, [r3, #0]
}
   1e124:	0018      	movs	r0, r3
   1e126:	46bd      	mov	sp, r7
   1e128:	bd80      	pop	{r7, pc}
   1e12a:	46c0      	nop			; (mov r8, r8)
   1e12c:	20003e0c 	.word	0x20003e0c

0001e130 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1e130:	b40e      	push	{r1, r2, r3}
   1e132:	b590      	push	{r4, r7, lr}
   1e134:	b084      	sub	sp, #16
   1e136:	af00      	add	r7, sp, #0
   1e138:	0002      	movs	r2, r0
   1e13a:	1dfb      	adds	r3, r7, #7
   1e13c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1e13e:	4b0e      	ldr	r3, [pc, #56]	; (1e178 <LogMessage+0x48>)
   1e140:	4798      	blx	r3
   1e142:	0003      	movs	r3, r0
   1e144:	001a      	movs	r2, r3
   1e146:	1dfb      	adds	r3, r7, #7
   1e148:	781b      	ldrb	r3, [r3, #0]
   1e14a:	4293      	cmp	r3, r2
   1e14c:	d30c      	bcc.n	1e168 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1e14e:	2320      	movs	r3, #32
   1e150:	18fb      	adds	r3, r7, r3
   1e152:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1e154:	68fb      	ldr	r3, [r7, #12]
   1e156:	69fa      	ldr	r2, [r7, #28]
   1e158:	4808      	ldr	r0, [pc, #32]	; (1e17c <LogMessage+0x4c>)
   1e15a:	217f      	movs	r1, #127	; 0x7f
   1e15c:	4c08      	ldr	r4, [pc, #32]	; (1e180 <LogMessage+0x50>)
   1e15e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1e160:	4b06      	ldr	r3, [pc, #24]	; (1e17c <LogMessage+0x4c>)
   1e162:	0018      	movs	r0, r3
   1e164:	4b07      	ldr	r3, [pc, #28]	; (1e184 <LogMessage+0x54>)
   1e166:	4798      	blx	r3
        va_end(ap);
    }
};
   1e168:	46c0      	nop			; (mov r8, r8)
   1e16a:	46bd      	mov	sp, r7
   1e16c:	b004      	add	sp, #16
   1e16e:	bc90      	pop	{r4, r7}
   1e170:	bc08      	pop	{r3}
   1e172:	b003      	add	sp, #12
   1e174:	4718      	bx	r3
   1e176:	46c0      	nop			; (mov r8, r8)
   1e178:	0001e11d 	.word	0x0001e11d
   1e17c:	2000515c 	.word	0x2000515c
   1e180:	00034e91 	.word	0x00034e91
   1e184:	0001e045 	.word	0x0001e045

0001e188 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1e188:	b40f      	push	{r0, r1, r2, r3}
   1e18a:	b580      	push	{r7, lr}
   1e18c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1e18e:	68bb      	ldr	r3, [r7, #8]
   1e190:	0019      	movs	r1, r3
   1e192:	2001      	movs	r0, #1
   1e194:	4b03      	ldr	r3, [pc, #12]	; (1e1a4 <LogMessageDebug+0x1c>)
   1e196:	4798      	blx	r3
};
   1e198:	46c0      	nop			; (mov r8, r8)
   1e19a:	46bd      	mov	sp, r7
   1e19c:	bc80      	pop	{r7}
   1e19e:	bc08      	pop	{r3}
   1e1a0:	b004      	add	sp, #16
   1e1a2:	4718      	bx	r3
   1e1a4:	0001e131 	.word	0x0001e131

0001e1a8 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1e1a8:	b580      	push	{r7, lr}
   1e1aa:	b090      	sub	sp, #64	; 0x40
   1e1ac:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1e1ae:	003b      	movs	r3, r7
   1e1b0:	0018      	movs	r0, r3
   1e1b2:	4b14      	ldr	r3, [pc, #80]	; (1e204 <configure_usart+0x5c>)
   1e1b4:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1e1b6:	003b      	movs	r3, r7
   1e1b8:	22e1      	movs	r2, #225	; 0xe1
   1e1ba:	0252      	lsls	r2, r2, #9
   1e1bc:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1e1be:	003b      	movs	r3, r7
   1e1c0:	22c4      	movs	r2, #196	; 0xc4
   1e1c2:	0392      	lsls	r2, r2, #14
   1e1c4:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1e1c6:	003b      	movs	r3, r7
   1e1c8:	2201      	movs	r2, #1
   1e1ca:	4252      	negs	r2, r2
   1e1cc:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1e1ce:	003b      	movs	r3, r7
   1e1d0:	2201      	movs	r2, #1
   1e1d2:	4252      	negs	r2, r2
   1e1d4:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1e1d6:	003b      	movs	r3, r7
   1e1d8:	4a0b      	ldr	r2, [pc, #44]	; (1e208 <configure_usart+0x60>)
   1e1da:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1e1dc:	003b      	movs	r3, r7
   1e1de:	4a0b      	ldr	r2, [pc, #44]	; (1e20c <configure_usart+0x64>)
   1e1e0:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1e1e2:	46c0      	nop			; (mov r8, r8)
   1e1e4:	003a      	movs	r2, r7
   1e1e6:	490a      	ldr	r1, [pc, #40]	; (1e210 <configure_usart+0x68>)
   1e1e8:	4b0a      	ldr	r3, [pc, #40]	; (1e214 <configure_usart+0x6c>)
   1e1ea:	0018      	movs	r0, r3
   1e1ec:	4b0a      	ldr	r3, [pc, #40]	; (1e218 <configure_usart+0x70>)
   1e1ee:	4798      	blx	r3
   1e1f0:	1e03      	subs	r3, r0, #0
   1e1f2:	d1f7      	bne.n	1e1e4 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1e1f4:	4b07      	ldr	r3, [pc, #28]	; (1e214 <configure_usart+0x6c>)
   1e1f6:	0018      	movs	r0, r3
   1e1f8:	4b08      	ldr	r3, [pc, #32]	; (1e21c <configure_usart+0x74>)
   1e1fa:	4798      	blx	r3
}
   1e1fc:	46c0      	nop			; (mov r8, r8)
   1e1fe:	46bd      	mov	sp, r7
   1e200:	b010      	add	sp, #64	; 0x40
   1e202:	bd80      	pop	{r7, pc}
   1e204:	0001de95 	.word	0x0001de95
   1e208:	002a0003 	.word	0x002a0003
   1e20c:	002b0003 	.word	0x002b0003
   1e210:	42001800 	.word	0x42001800
   1e214:	200051dc 	.word	0x200051dc
   1e218:	00028a01 	.word	0x00028a01
   1e21c:	0001df55 	.word	0x0001df55

0001e220 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1e220:	b580      	push	{r7, lr}
   1e222:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1e224:	490c      	ldr	r1, [pc, #48]	; (1e258 <configure_usart_callbacks+0x38>)
   1e226:	4b0d      	ldr	r3, [pc, #52]	; (1e25c <configure_usart_callbacks+0x3c>)
   1e228:	2200      	movs	r2, #0
   1e22a:	0018      	movs	r0, r3
   1e22c:	4b0c      	ldr	r3, [pc, #48]	; (1e260 <configure_usart_callbacks+0x40>)
   1e22e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1e230:	490c      	ldr	r1, [pc, #48]	; (1e264 <configure_usart_callbacks+0x44>)
   1e232:	4b0a      	ldr	r3, [pc, #40]	; (1e25c <configure_usart_callbacks+0x3c>)
   1e234:	2201      	movs	r2, #1
   1e236:	0018      	movs	r0, r3
   1e238:	4b09      	ldr	r3, [pc, #36]	; (1e260 <configure_usart_callbacks+0x40>)
   1e23a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1e23c:	4b07      	ldr	r3, [pc, #28]	; (1e25c <configure_usart_callbacks+0x3c>)
   1e23e:	2100      	movs	r1, #0
   1e240:	0018      	movs	r0, r3
   1e242:	4b09      	ldr	r3, [pc, #36]	; (1e268 <configure_usart_callbacks+0x48>)
   1e244:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1e246:	4b05      	ldr	r3, [pc, #20]	; (1e25c <configure_usart_callbacks+0x3c>)
   1e248:	2101      	movs	r1, #1
   1e24a:	0018      	movs	r0, r3
   1e24c:	4b06      	ldr	r3, [pc, #24]	; (1e268 <configure_usart_callbacks+0x48>)
   1e24e:	4798      	blx	r3
}
   1e250:	46c0      	nop			; (mov r8, r8)
   1e252:	46bd      	mov	sp, r7
   1e254:	bd80      	pop	{r7, pc}
   1e256:	46c0      	nop			; (mov r8, r8)
   1e258:	0001e2b5 	.word	0x0001e2b5
   1e25c:	200051dc 	.word	0x200051dc
   1e260:	00028db5 	.word	0x00028db5
   1e264:	0001e26d 	.word	0x0001e26d
   1e268:	0001df9d 	.word	0x0001df9d

0001e26c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1e26c:	b580      	push	{r7, lr}
   1e26e:	b082      	sub	sp, #8
   1e270:	af00      	add	r7, sp, #0
   1e272:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1e274:	4b09      	ldr	r3, [pc, #36]	; (1e29c <usart_read_callback+0x30>)
   1e276:	681a      	ldr	r2, [r3, #0]
   1e278:	4b09      	ldr	r3, [pc, #36]	; (1e2a0 <usart_read_callback+0x34>)
   1e27a:	781b      	ldrb	r3, [r3, #0]
   1e27c:	0019      	movs	r1, r3
   1e27e:	0010      	movs	r0, r2
   1e280:	4b08      	ldr	r3, [pc, #32]	; (1e2a4 <usart_read_callback+0x38>)
   1e282:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1e284:	4906      	ldr	r1, [pc, #24]	; (1e2a0 <usart_read_callback+0x34>)
   1e286:	4b08      	ldr	r3, [pc, #32]	; (1e2a8 <usart_read_callback+0x3c>)
   1e288:	2201      	movs	r2, #1
   1e28a:	0018      	movs	r0, r3
   1e28c:	4b07      	ldr	r3, [pc, #28]	; (1e2ac <usart_read_callback+0x40>)
   1e28e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1e290:	4b07      	ldr	r3, [pc, #28]	; (1e2b0 <usart_read_callback+0x44>)
   1e292:	4798      	blx	r3
}
   1e294:	46c0      	nop			; (mov r8, r8)
   1e296:	46bd      	mov	sp, r7
   1e298:	b002      	add	sp, #8
   1e29a:	bd80      	pop	{r7, pc}
   1e29c:	20005210 	.word	0x20005210
   1e2a0:	20005214 	.word	0x20005214
   1e2a4:	0001dd65 	.word	0x0001dd65
   1e2a8:	200051dc 	.word	0x200051dc
   1e2ac:	00028e45 	.word	0x00028e45
   1e2b0:	000131b1 	.word	0x000131b1

0001e2b4 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1e2b4:	b580      	push	{r7, lr}
   1e2b6:	b082      	sub	sp, #8
   1e2b8:	af00      	add	r7, sp, #0
   1e2ba:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1e2bc:	4b09      	ldr	r3, [pc, #36]	; (1e2e4 <usart_write_callback+0x30>)
   1e2be:	681b      	ldr	r3, [r3, #0]
   1e2c0:	4a09      	ldr	r2, [pc, #36]	; (1e2e8 <usart_write_callback+0x34>)
   1e2c2:	0011      	movs	r1, r2
   1e2c4:	0018      	movs	r0, r3
   1e2c6:	4b09      	ldr	r3, [pc, #36]	; (1e2ec <usart_write_callback+0x38>)
   1e2c8:	4798      	blx	r3
   1e2ca:	0003      	movs	r3, r0
   1e2cc:	3301      	adds	r3, #1
   1e2ce:	d005      	beq.n	1e2dc <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1e2d0:	4905      	ldr	r1, [pc, #20]	; (1e2e8 <usart_write_callback+0x34>)
   1e2d2:	4b07      	ldr	r3, [pc, #28]	; (1e2f0 <usart_write_callback+0x3c>)
   1e2d4:	2201      	movs	r2, #1
   1e2d6:	0018      	movs	r0, r3
   1e2d8:	4b06      	ldr	r3, [pc, #24]	; (1e2f4 <usart_write_callback+0x40>)
   1e2da:	4798      	blx	r3
    }
}
   1e2dc:	46c0      	nop			; (mov r8, r8)
   1e2de:	46bd      	mov	sp, r7
   1e2e0:	b002      	add	sp, #8
   1e2e2:	bd80      	pop	{r7, pc}
   1e2e4:	2000561c 	.word	0x2000561c
   1e2e8:	20005618 	.word	0x20005618
   1e2ec:	0001dd99 	.word	0x0001dd99
   1e2f0:	200051dc 	.word	0x200051dc
   1e2f4:	00028dfd 	.word	0x00028dfd

0001e2f8 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1e2f8:	b590      	push	{r4, r7, lr}
   1e2fa:	b087      	sub	sp, #28
   1e2fc:	af00      	add	r7, sp, #0
   1e2fe:	60f8      	str	r0, [r7, #12]
   1e300:	000c      	movs	r4, r1
   1e302:	0010      	movs	r0, r2
   1e304:	0019      	movs	r1, r3
   1e306:	230a      	movs	r3, #10
   1e308:	18fb      	adds	r3, r7, r3
   1e30a:	1c22      	adds	r2, r4, #0
   1e30c:	801a      	strh	r2, [r3, #0]
   1e30e:	2308      	movs	r3, #8
   1e310:	18fb      	adds	r3, r7, r3
   1e312:	1c02      	adds	r2, r0, #0
   1e314:	801a      	strh	r2, [r3, #0]
   1e316:	1dfb      	adds	r3, r7, #7
   1e318:	1c0a      	adds	r2, r1, #0
   1e31a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1e31c:	230a      	movs	r3, #10
   1e31e:	18fb      	adds	r3, r7, r3
   1e320:	881a      	ldrh	r2, [r3, #0]
   1e322:	2308      	movs	r3, #8
   1e324:	18fb      	adds	r3, r7, r3
   1e326:	881b      	ldrh	r3, [r3, #0]
   1e328:	1ad3      	subs	r3, r2, r3
   1e32a:	3307      	adds	r3, #7
   1e32c:	2b00      	cmp	r3, #0
   1e32e:	da00      	bge.n	1e332 <SDMMC_UNSTUFF_BITS+0x3a>
   1e330:	3307      	adds	r3, #7
   1e332:	10db      	asrs	r3, r3, #3
   1e334:	3b01      	subs	r3, #1
   1e336:	68fa      	ldr	r2, [r7, #12]
   1e338:	18d3      	adds	r3, r2, r3
   1e33a:	781b      	ldrb	r3, [r3, #0]
   1e33c:	0019      	movs	r1, r3
   1e33e:	2308      	movs	r3, #8
   1e340:	18fb      	adds	r3, r7, r3
   1e342:	881b      	ldrh	r3, [r3, #0]
   1e344:	2207      	movs	r2, #7
   1e346:	4013      	ands	r3, r2
   1e348:	4119      	asrs	r1, r3
   1e34a:	000b      	movs	r3, r1
   1e34c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1e34e:	2308      	movs	r3, #8
   1e350:	18fb      	adds	r3, r7, r3
   1e352:	881b      	ldrh	r3, [r3, #0]
   1e354:	2207      	movs	r2, #7
   1e356:	401a      	ands	r2, r3
   1e358:	1dfb      	adds	r3, r7, #7
   1e35a:	781b      	ldrb	r3, [r3, #0]
   1e35c:	18d3      	adds	r3, r2, r3
   1e35e:	2b08      	cmp	r3, #8
   1e360:	dd1c      	ble.n	1e39c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1e362:	230a      	movs	r3, #10
   1e364:	18fb      	adds	r3, r7, r3
   1e366:	881a      	ldrh	r2, [r3, #0]
   1e368:	2308      	movs	r3, #8
   1e36a:	18fb      	adds	r3, r7, r3
   1e36c:	881b      	ldrh	r3, [r3, #0]
   1e36e:	1ad3      	subs	r3, r2, r3
   1e370:	3307      	adds	r3, #7
   1e372:	2b00      	cmp	r3, #0
   1e374:	da00      	bge.n	1e378 <SDMMC_UNSTUFF_BITS+0x80>
   1e376:	3307      	adds	r3, #7
   1e378:	10db      	asrs	r3, r3, #3
   1e37a:	3b02      	subs	r3, #2
   1e37c:	68fa      	ldr	r2, [r7, #12]
   1e37e:	18d3      	adds	r3, r2, r3
   1e380:	781b      	ldrb	r3, [r3, #0]
   1e382:	0019      	movs	r1, r3
   1e384:	2308      	movs	r3, #8
   1e386:	18fb      	adds	r3, r7, r3
   1e388:	881b      	ldrh	r3, [r3, #0]
   1e38a:	2207      	movs	r2, #7
   1e38c:	4013      	ands	r3, r2
   1e38e:	2208      	movs	r2, #8
   1e390:	1ad3      	subs	r3, r2, r3
   1e392:	4099      	lsls	r1, r3
   1e394:	000b      	movs	r3, r1
   1e396:	697a      	ldr	r2, [r7, #20]
   1e398:	4313      	orrs	r3, r2
   1e39a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1e39c:	2308      	movs	r3, #8
   1e39e:	18fb      	adds	r3, r7, r3
   1e3a0:	881b      	ldrh	r3, [r3, #0]
   1e3a2:	2207      	movs	r2, #7
   1e3a4:	401a      	ands	r2, r3
   1e3a6:	1dfb      	adds	r3, r7, #7
   1e3a8:	781b      	ldrb	r3, [r3, #0]
   1e3aa:	18d3      	adds	r3, r2, r3
   1e3ac:	2b10      	cmp	r3, #16
   1e3ae:	dd1c      	ble.n	1e3ea <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1e3b0:	230a      	movs	r3, #10
   1e3b2:	18fb      	adds	r3, r7, r3
   1e3b4:	881a      	ldrh	r2, [r3, #0]
   1e3b6:	2308      	movs	r3, #8
   1e3b8:	18fb      	adds	r3, r7, r3
   1e3ba:	881b      	ldrh	r3, [r3, #0]
   1e3bc:	1ad3      	subs	r3, r2, r3
   1e3be:	3307      	adds	r3, #7
   1e3c0:	2b00      	cmp	r3, #0
   1e3c2:	da00      	bge.n	1e3c6 <SDMMC_UNSTUFF_BITS+0xce>
   1e3c4:	3307      	adds	r3, #7
   1e3c6:	10db      	asrs	r3, r3, #3
   1e3c8:	3b03      	subs	r3, #3
   1e3ca:	68fa      	ldr	r2, [r7, #12]
   1e3cc:	18d3      	adds	r3, r2, r3
   1e3ce:	781b      	ldrb	r3, [r3, #0]
   1e3d0:	0019      	movs	r1, r3
   1e3d2:	2308      	movs	r3, #8
   1e3d4:	18fb      	adds	r3, r7, r3
   1e3d6:	881b      	ldrh	r3, [r3, #0]
   1e3d8:	2207      	movs	r2, #7
   1e3da:	4013      	ands	r3, r2
   1e3dc:	2210      	movs	r2, #16
   1e3de:	1ad3      	subs	r3, r2, r3
   1e3e0:	4099      	lsls	r1, r3
   1e3e2:	000b      	movs	r3, r1
   1e3e4:	697a      	ldr	r2, [r7, #20]
   1e3e6:	4313      	orrs	r3, r2
   1e3e8:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1e3ea:	2308      	movs	r3, #8
   1e3ec:	18fb      	adds	r3, r7, r3
   1e3ee:	881b      	ldrh	r3, [r3, #0]
   1e3f0:	2207      	movs	r2, #7
   1e3f2:	401a      	ands	r2, r3
   1e3f4:	1dfb      	adds	r3, r7, #7
   1e3f6:	781b      	ldrb	r3, [r3, #0]
   1e3f8:	18d3      	adds	r3, r2, r3
   1e3fa:	2b10      	cmp	r3, #16
   1e3fc:	dd1c      	ble.n	1e438 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1e3fe:	230a      	movs	r3, #10
   1e400:	18fb      	adds	r3, r7, r3
   1e402:	881a      	ldrh	r2, [r3, #0]
   1e404:	2308      	movs	r3, #8
   1e406:	18fb      	adds	r3, r7, r3
   1e408:	881b      	ldrh	r3, [r3, #0]
   1e40a:	1ad3      	subs	r3, r2, r3
   1e40c:	3307      	adds	r3, #7
   1e40e:	2b00      	cmp	r3, #0
   1e410:	da00      	bge.n	1e414 <SDMMC_UNSTUFF_BITS+0x11c>
   1e412:	3307      	adds	r3, #7
   1e414:	10db      	asrs	r3, r3, #3
   1e416:	3b03      	subs	r3, #3
   1e418:	68fa      	ldr	r2, [r7, #12]
   1e41a:	18d3      	adds	r3, r2, r3
   1e41c:	781b      	ldrb	r3, [r3, #0]
   1e41e:	0019      	movs	r1, r3
   1e420:	2308      	movs	r3, #8
   1e422:	18fb      	adds	r3, r7, r3
   1e424:	881b      	ldrh	r3, [r3, #0]
   1e426:	2207      	movs	r2, #7
   1e428:	4013      	ands	r3, r2
   1e42a:	2210      	movs	r2, #16
   1e42c:	1ad3      	subs	r3, r2, r3
   1e42e:	4099      	lsls	r1, r3
   1e430:	000b      	movs	r3, r1
   1e432:	697a      	ldr	r2, [r7, #20]
   1e434:	4313      	orrs	r3, r2
   1e436:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1e438:	1dfb      	adds	r3, r7, #7
   1e43a:	781b      	ldrb	r3, [r3, #0]
   1e43c:	2201      	movs	r2, #1
   1e43e:	409a      	lsls	r2, r3
   1e440:	0013      	movs	r3, r2
   1e442:	1e5a      	subs	r2, r3, #1
   1e444:	697b      	ldr	r3, [r7, #20]
   1e446:	4013      	ands	r3, r2
   1e448:	617b      	str	r3, [r7, #20]
	return value;
   1e44a:	697b      	ldr	r3, [r7, #20]
}
   1e44c:	0018      	movs	r0, r3
   1e44e:	46bd      	mov	sp, r7
   1e450:	b007      	add	sp, #28
   1e452:	bd90      	pop	{r4, r7, pc}

0001e454 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1e454:	b580      	push	{r7, lr}
   1e456:	b082      	sub	sp, #8
   1e458:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1e45a:	4b23      	ldr	r3, [pc, #140]	; (1e4e8 <mmc_spi_op_cond+0x94>)
   1e45c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1e45e:	4b23      	ldr	r3, [pc, #140]	; (1e4ec <mmc_spi_op_cond+0x98>)
   1e460:	2100      	movs	r1, #0
   1e462:	0018      	movs	r0, r3
   1e464:	4b22      	ldr	r3, [pc, #136]	; (1e4f0 <mmc_spi_op_cond+0x9c>)
   1e466:	4798      	blx	r3
   1e468:	0003      	movs	r3, r0
   1e46a:	001a      	movs	r2, r3
   1e46c:	2301      	movs	r3, #1
   1e46e:	4053      	eors	r3, r2
   1e470:	b2db      	uxtb	r3, r3
   1e472:	2b00      	cmp	r3, #0
   1e474:	d001      	beq.n	1e47a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1e476:	2300      	movs	r3, #0
   1e478:	e031      	b.n	1e4de <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1e47a:	4b1e      	ldr	r3, [pc, #120]	; (1e4f4 <mmc_spi_op_cond+0xa0>)
   1e47c:	4798      	blx	r3
   1e47e:	0003      	movs	r3, r0
   1e480:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1e482:	683b      	ldr	r3, [r7, #0]
   1e484:	2201      	movs	r2, #1
   1e486:	4013      	ands	r3, r2
   1e488:	d006      	beq.n	1e498 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1e48a:	687b      	ldr	r3, [r7, #4]
   1e48c:	1e5a      	subs	r2, r3, #1
   1e48e:	607a      	str	r2, [r7, #4]
   1e490:	2b00      	cmp	r3, #0
   1e492:	d1e4      	bne.n	1e45e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1e494:	2300      	movs	r3, #0
   1e496:	e022      	b.n	1e4de <mmc_spi_op_cond+0x8a>
			break;
   1e498:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1e49a:	4b17      	ldr	r3, [pc, #92]	; (1e4f8 <mmc_spi_op_cond+0xa4>)
   1e49c:	2100      	movs	r1, #0
   1e49e:	0018      	movs	r0, r3
   1e4a0:	4b13      	ldr	r3, [pc, #76]	; (1e4f0 <mmc_spi_op_cond+0x9c>)
   1e4a2:	4798      	blx	r3
   1e4a4:	0003      	movs	r3, r0
   1e4a6:	001a      	movs	r2, r3
   1e4a8:	2301      	movs	r3, #1
   1e4aa:	4053      	eors	r3, r2
   1e4ac:	b2db      	uxtb	r3, r3
   1e4ae:	2b00      	cmp	r3, #0
   1e4b0:	d001      	beq.n	1e4b6 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1e4b2:	2300      	movs	r3, #0
   1e4b4:	e013      	b.n	1e4de <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1e4b6:	4b0f      	ldr	r3, [pc, #60]	; (1e4f4 <mmc_spi_op_cond+0xa0>)
   1e4b8:	4798      	blx	r3
   1e4ba:	0002      	movs	r2, r0
   1e4bc:	23c0      	movs	r3, #192	; 0xc0
   1e4be:	05db      	lsls	r3, r3, #23
   1e4c0:	401a      	ands	r2, r3
   1e4c2:	2380      	movs	r3, #128	; 0x80
   1e4c4:	05db      	lsls	r3, r3, #23
   1e4c6:	429a      	cmp	r2, r3
   1e4c8:	d108      	bne.n	1e4dc <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1e4ca:	4b0c      	ldr	r3, [pc, #48]	; (1e4fc <mmc_spi_op_cond+0xa8>)
   1e4cc:	681a      	ldr	r2, [r3, #0]
   1e4ce:	4b0b      	ldr	r3, [pc, #44]	; (1e4fc <mmc_spi_op_cond+0xa8>)
   1e4d0:	681b      	ldr	r3, [r3, #0]
   1e4d2:	7adb      	ldrb	r3, [r3, #11]
   1e4d4:	2108      	movs	r1, #8
   1e4d6:	430b      	orrs	r3, r1
   1e4d8:	b2db      	uxtb	r3, r3
   1e4da:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e4dc:	2301      	movs	r3, #1
}
   1e4de:	0018      	movs	r0, r3
   1e4e0:	46bd      	mov	sp, r7
   1e4e2:	b002      	add	sp, #8
   1e4e4:	bd80      	pop	{r7, pc}
   1e4e6:	46c0      	nop			; (mov r8, r8)
   1e4e8:	00001bee 	.word	0x00001bee
   1e4ec:	00001101 	.word	0x00001101
   1e4f0:	0001fb15 	.word	0x0001fb15
   1e4f4:	0001fd55 	.word	0x0001fd55
   1e4f8:	0000053a 	.word	0x0000053a
   1e4fc:	20003e34 	.word	0x20003e34

0001e500 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1e500:	b580      	push	{r7, lr}
   1e502:	b086      	sub	sp, #24
   1e504:	af00      	add	r7, sp, #0
   1e506:	0002      	movs	r2, r0
   1e508:	1dfb      	adds	r3, r7, #7
   1e50a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1e50c:	4b2e      	ldr	r3, [pc, #184]	; (1e5c8 <sd_spi_op_cond+0xc8>)
   1e50e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1e510:	4b2e      	ldr	r3, [pc, #184]	; (1e5cc <sd_spi_op_cond+0xcc>)
   1e512:	2100      	movs	r1, #0
   1e514:	0018      	movs	r0, r3
   1e516:	4b2e      	ldr	r3, [pc, #184]	; (1e5d0 <sd_spi_op_cond+0xd0>)
   1e518:	4798      	blx	r3
   1e51a:	0003      	movs	r3, r0
   1e51c:	001a      	movs	r2, r3
   1e51e:	2301      	movs	r3, #1
   1e520:	4053      	eors	r3, r2
   1e522:	b2db      	uxtb	r3, r3
   1e524:	2b00      	cmp	r3, #0
   1e526:	d001      	beq.n	1e52c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1e528:	2300      	movs	r3, #0
   1e52a:	e048      	b.n	1e5be <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1e52c:	2300      	movs	r3, #0
   1e52e:	617b      	str	r3, [r7, #20]
		if (v2) {
   1e530:	1dfb      	adds	r3, r7, #7
   1e532:	781b      	ldrb	r3, [r3, #0]
   1e534:	2b00      	cmp	r3, #0
   1e536:	d004      	beq.n	1e542 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1e538:	697b      	ldr	r3, [r7, #20]
   1e53a:	2280      	movs	r2, #128	; 0x80
   1e53c:	05d2      	lsls	r2, r2, #23
   1e53e:	4313      	orrs	r3, r2
   1e540:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1e542:	697b      	ldr	r3, [r7, #20]
   1e544:	4a23      	ldr	r2, [pc, #140]	; (1e5d4 <sd_spi_op_cond+0xd4>)
   1e546:	0019      	movs	r1, r3
   1e548:	0010      	movs	r0, r2
   1e54a:	4b21      	ldr	r3, [pc, #132]	; (1e5d0 <sd_spi_op_cond+0xd0>)
   1e54c:	4798      	blx	r3
   1e54e:	0003      	movs	r3, r0
   1e550:	001a      	movs	r2, r3
   1e552:	2301      	movs	r3, #1
   1e554:	4053      	eors	r3, r2
   1e556:	b2db      	uxtb	r3, r3
   1e558:	2b00      	cmp	r3, #0
   1e55a:	d001      	beq.n	1e560 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1e55c:	2300      	movs	r3, #0
   1e55e:	e02e      	b.n	1e5be <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1e560:	4b1d      	ldr	r3, [pc, #116]	; (1e5d8 <sd_spi_op_cond+0xd8>)
   1e562:	4798      	blx	r3
   1e564:	0003      	movs	r3, r0
   1e566:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1e568:	68fb      	ldr	r3, [r7, #12]
   1e56a:	2201      	movs	r2, #1
   1e56c:	4013      	ands	r3, r2
   1e56e:	d006      	beq.n	1e57e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1e570:	693b      	ldr	r3, [r7, #16]
   1e572:	1e5a      	subs	r2, r3, #1
   1e574:	613a      	str	r2, [r7, #16]
   1e576:	2b00      	cmp	r3, #0
   1e578:	d1ca      	bne.n	1e510 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1e57a:	2300      	movs	r3, #0
   1e57c:	e01f      	b.n	1e5be <sd_spi_op_cond+0xbe>
			break;
   1e57e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1e580:	4b16      	ldr	r3, [pc, #88]	; (1e5dc <sd_spi_op_cond+0xdc>)
   1e582:	2100      	movs	r1, #0
   1e584:	0018      	movs	r0, r3
   1e586:	4b12      	ldr	r3, [pc, #72]	; (1e5d0 <sd_spi_op_cond+0xd0>)
   1e588:	4798      	blx	r3
   1e58a:	0003      	movs	r3, r0
   1e58c:	001a      	movs	r2, r3
   1e58e:	2301      	movs	r3, #1
   1e590:	4053      	eors	r3, r2
   1e592:	b2db      	uxtb	r3, r3
   1e594:	2b00      	cmp	r3, #0
   1e596:	d001      	beq.n	1e59c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1e598:	2300      	movs	r3, #0
   1e59a:	e010      	b.n	1e5be <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1e59c:	4b0e      	ldr	r3, [pc, #56]	; (1e5d8 <sd_spi_op_cond+0xd8>)
   1e59e:	4798      	blx	r3
   1e5a0:	0002      	movs	r2, r0
   1e5a2:	2380      	movs	r3, #128	; 0x80
   1e5a4:	05db      	lsls	r3, r3, #23
   1e5a6:	4013      	ands	r3, r2
   1e5a8:	d008      	beq.n	1e5bc <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1e5aa:	4b0d      	ldr	r3, [pc, #52]	; (1e5e0 <sd_spi_op_cond+0xe0>)
   1e5ac:	681a      	ldr	r2, [r3, #0]
   1e5ae:	4b0c      	ldr	r3, [pc, #48]	; (1e5e0 <sd_spi_op_cond+0xe0>)
   1e5b0:	681b      	ldr	r3, [r3, #0]
   1e5b2:	7adb      	ldrb	r3, [r3, #11]
   1e5b4:	2108      	movs	r1, #8
   1e5b6:	430b      	orrs	r3, r1
   1e5b8:	b2db      	uxtb	r3, r3
   1e5ba:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e5bc:	2301      	movs	r3, #1
}
   1e5be:	0018      	movs	r0, r3
   1e5c0:	46bd      	mov	sp, r7
   1e5c2:	b006      	add	sp, #24
   1e5c4:	bd80      	pop	{r7, pc}
   1e5c6:	46c0      	nop			; (mov r8, r8)
   1e5c8:	00001bee 	.word	0x00001bee
   1e5cc:	00001137 	.word	0x00001137
   1e5d0:	0001fb15 	.word	0x0001fb15
   1e5d4:	00001129 	.word	0x00001129
   1e5d8:	0001fd55 	.word	0x0001fd55
   1e5dc:	0000053a 	.word	0x0000053a
   1e5e0:	20003e34 	.word	0x20003e34

0001e5e4 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1e5e4:	b580      	push	{r7, lr}
   1e5e6:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1e5e8:	2301      	movs	r3, #1
}
   1e5ea:	0018      	movs	r0, r3
   1e5ec:	46bd      	mov	sp, r7
   1e5ee:	bd80      	pop	{r7, pc}

0001e5f0 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1e5f0:	b580      	push	{r7, lr}
   1e5f2:	b084      	sub	sp, #16
   1e5f4:	af00      	add	r7, sp, #0
   1e5f6:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1e5f8:	687b      	ldr	r3, [r7, #4]
   1e5fa:	2200      	movs	r2, #0
   1e5fc:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1e5fe:	23d5      	movs	r3, #213	; 0xd5
   1e600:	005b      	lsls	r3, r3, #1
   1e602:	4a14      	ldr	r2, [pc, #80]	; (1e654 <sd_cmd8+0x64>)
   1e604:	0019      	movs	r1, r3
   1e606:	0010      	movs	r0, r2
   1e608:	4b13      	ldr	r3, [pc, #76]	; (1e658 <sd_cmd8+0x68>)
   1e60a:	4798      	blx	r3
   1e60c:	0003      	movs	r3, r0
   1e60e:	001a      	movs	r2, r3
   1e610:	2301      	movs	r3, #1
   1e612:	4053      	eors	r3, r2
   1e614:	b2db      	uxtb	r3, r3
   1e616:	2b00      	cmp	r3, #0
   1e618:	d001      	beq.n	1e61e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1e61a:	2301      	movs	r3, #1
   1e61c:	e015      	b.n	1e64a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1e61e:	4b0f      	ldr	r3, [pc, #60]	; (1e65c <sd_cmd8+0x6c>)
   1e620:	4798      	blx	r3
   1e622:	0003      	movs	r3, r0
   1e624:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1e626:	68fb      	ldr	r3, [r7, #12]
   1e628:	3301      	adds	r3, #1
   1e62a:	d101      	bne.n	1e630 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1e62c:	2301      	movs	r3, #1
   1e62e:	e00c      	b.n	1e64a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1e630:	68fb      	ldr	r3, [r7, #12]
   1e632:	051b      	lsls	r3, r3, #20
   1e634:	0d1a      	lsrs	r2, r3, #20
   1e636:	23d5      	movs	r3, #213	; 0xd5
   1e638:	005b      	lsls	r3, r3, #1
   1e63a:	429a      	cmp	r2, r3
   1e63c:	d001      	beq.n	1e642 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1e63e:	2300      	movs	r3, #0
   1e640:	e003      	b.n	1e64a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1e642:	687b      	ldr	r3, [r7, #4]
   1e644:	2201      	movs	r2, #1
   1e646:	701a      	strb	r2, [r3, #0]
	return true;
   1e648:	2301      	movs	r3, #1
}
   1e64a:	0018      	movs	r0, r3
   1e64c:	46bd      	mov	sp, r7
   1e64e:	b004      	add	sp, #16
   1e650:	bd80      	pop	{r7, pc}
   1e652:	46c0      	nop			; (mov r8, r8)
   1e654:	00005508 	.word	0x00005508
   1e658:	0001fb15 	.word	0x0001fb15
   1e65c:	0001fd55 	.word	0x0001fd55

0001e660 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1e660:	b590      	push	{r4, r7, lr}
   1e662:	b089      	sub	sp, #36	; 0x24
   1e664:	af02      	add	r7, sp, #8
   1e666:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1e668:	2380      	movs	r3, #128	; 0x80
   1e66a:	009a      	lsls	r2, r3, #2
   1e66c:	4841      	ldr	r0, [pc, #260]	; (1e774 <mmc_cmd8+0x114>)
   1e66e:	2300      	movs	r3, #0
   1e670:	9300      	str	r3, [sp, #0]
   1e672:	2301      	movs	r3, #1
   1e674:	2100      	movs	r1, #0
   1e676:	4c40      	ldr	r4, [pc, #256]	; (1e778 <mmc_cmd8+0x118>)
   1e678:	47a0      	blx	r4
   1e67a:	0003      	movs	r3, r0
   1e67c:	001a      	movs	r2, r3
   1e67e:	2301      	movs	r3, #1
   1e680:	4053      	eors	r3, r2
   1e682:	b2db      	uxtb	r3, r3
   1e684:	2b00      	cmp	r3, #0
   1e686:	d001      	beq.n	1e68c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1e688:	2300      	movs	r3, #0
   1e68a:	e06e      	b.n	1e76a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e68c:	2316      	movs	r3, #22
   1e68e:	18fb      	adds	r3, r7, r3
   1e690:	2200      	movs	r2, #0
   1e692:	801a      	strh	r2, [r3, #0]
   1e694:	e014      	b.n	1e6c0 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1e696:	2310      	movs	r3, #16
   1e698:	18fb      	adds	r3, r7, r3
   1e69a:	0018      	movs	r0, r3
   1e69c:	4b37      	ldr	r3, [pc, #220]	; (1e77c <mmc_cmd8+0x11c>)
   1e69e:	4798      	blx	r3
   1e6a0:	0003      	movs	r3, r0
   1e6a2:	001a      	movs	r2, r3
   1e6a4:	2301      	movs	r3, #1
   1e6a6:	4053      	eors	r3, r2
   1e6a8:	b2db      	uxtb	r3, r3
   1e6aa:	2b00      	cmp	r3, #0
   1e6ac:	d001      	beq.n	1e6b2 <mmc_cmd8+0x52>
			return false;
   1e6ae:	2300      	movs	r3, #0
   1e6b0:	e05b      	b.n	1e76a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e6b2:	2316      	movs	r3, #22
   1e6b4:	18fb      	adds	r3, r7, r3
   1e6b6:	881a      	ldrh	r2, [r3, #0]
   1e6b8:	2316      	movs	r3, #22
   1e6ba:	18fb      	adds	r3, r7, r3
   1e6bc:	3201      	adds	r2, #1
   1e6be:	801a      	strh	r2, [r3, #0]
   1e6c0:	2316      	movs	r3, #22
   1e6c2:	18fb      	adds	r3, r7, r3
   1e6c4:	881b      	ldrh	r3, [r3, #0]
   1e6c6:	2b31      	cmp	r3, #49	; 0x31
   1e6c8:	d9e5      	bls.n	1e696 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1e6ca:	693b      	ldr	r3, [r7, #16]
   1e6cc:	b2db      	uxtb	r3, r3
   1e6ce:	2202      	movs	r2, #2
   1e6d0:	4013      	ands	r3, r2
   1e6d2:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1e6d4:	687b      	ldr	r3, [r7, #4]
   1e6d6:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1e6d8:	4b29      	ldr	r3, [pc, #164]	; (1e780 <mmc_cmd8+0x120>)
   1e6da:	681b      	ldr	r3, [r3, #0]
   1e6dc:	330e      	adds	r3, #14
   1e6de:	0018      	movs	r0, r3
   1e6e0:	230c      	movs	r3, #12
   1e6e2:	223e      	movs	r2, #62	; 0x3e
   1e6e4:	2180      	movs	r1, #128	; 0x80
   1e6e6:	4c27      	ldr	r4, [pc, #156]	; (1e784 <mmc_cmd8+0x124>)
   1e6e8:	47a0      	blx	r4
   1e6ea:	0002      	movs	r2, r0
   1e6ec:	4b26      	ldr	r3, [pc, #152]	; (1e788 <mmc_cmd8+0x128>)
   1e6ee:	429a      	cmp	r2, r3
   1e6f0:	d135      	bne.n	1e75e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e6f2:	e014      	b.n	1e71e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1e6f4:	230c      	movs	r3, #12
   1e6f6:	18fb      	adds	r3, r7, r3
   1e6f8:	0018      	movs	r0, r3
   1e6fa:	4b20      	ldr	r3, [pc, #128]	; (1e77c <mmc_cmd8+0x11c>)
   1e6fc:	4798      	blx	r3
   1e6fe:	0003      	movs	r3, r0
   1e700:	001a      	movs	r2, r3
   1e702:	2301      	movs	r3, #1
   1e704:	4053      	eors	r3, r2
   1e706:	b2db      	uxtb	r3, r3
   1e708:	2b00      	cmp	r3, #0
   1e70a:	d001      	beq.n	1e710 <mmc_cmd8+0xb0>
				return false;
   1e70c:	2300      	movs	r3, #0
   1e70e:	e02c      	b.n	1e76a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e710:	2316      	movs	r3, #22
   1e712:	18fb      	adds	r3, r7, r3
   1e714:	881a      	ldrh	r2, [r3, #0]
   1e716:	2316      	movs	r3, #22
   1e718:	18fb      	adds	r3, r7, r3
   1e71a:	3201      	adds	r2, #1
   1e71c:	801a      	strh	r2, [r3, #0]
   1e71e:	2316      	movs	r3, #22
   1e720:	18fb      	adds	r3, r7, r3
   1e722:	881b      	ldrh	r3, [r3, #0]
   1e724:	2b35      	cmp	r3, #53	; 0x35
   1e726:	d9e5      	bls.n	1e6f4 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1e728:	4b15      	ldr	r3, [pc, #84]	; (1e780 <mmc_cmd8+0x120>)
   1e72a:	681b      	ldr	r3, [r3, #0]
   1e72c:	68fa      	ldr	r2, [r7, #12]
   1e72e:	0852      	lsrs	r2, r2, #1
   1e730:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e732:	e014      	b.n	1e75e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1e734:	230c      	movs	r3, #12
   1e736:	18fb      	adds	r3, r7, r3
   1e738:	0018      	movs	r0, r3
   1e73a:	4b10      	ldr	r3, [pc, #64]	; (1e77c <mmc_cmd8+0x11c>)
   1e73c:	4798      	blx	r3
   1e73e:	0003      	movs	r3, r0
   1e740:	001a      	movs	r2, r3
   1e742:	2301      	movs	r3, #1
   1e744:	4053      	eors	r3, r2
   1e746:	b2db      	uxtb	r3, r3
   1e748:	2b00      	cmp	r3, #0
   1e74a:	d001      	beq.n	1e750 <mmc_cmd8+0xf0>
			return false;
   1e74c:	2300      	movs	r3, #0
   1e74e:	e00c      	b.n	1e76a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e750:	2316      	movs	r3, #22
   1e752:	18fb      	adds	r3, r7, r3
   1e754:	881a      	ldrh	r2, [r3, #0]
   1e756:	2316      	movs	r3, #22
   1e758:	18fb      	adds	r3, r7, r3
   1e75a:	3201      	adds	r2, #1
   1e75c:	801a      	strh	r2, [r3, #0]
   1e75e:	2316      	movs	r3, #22
   1e760:	18fb      	adds	r3, r7, r3
   1e762:	881b      	ldrh	r3, [r3, #0]
   1e764:	2b7f      	cmp	r3, #127	; 0x7f
   1e766:	d9e5      	bls.n	1e734 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1e768:	2301      	movs	r3, #1
}
   1e76a:	0018      	movs	r0, r3
   1e76c:	46bd      	mov	sp, r7
   1e76e:	b007      	add	sp, #28
   1e770:	bd90      	pop	{r4, r7, pc}
   1e772:	46c0      	nop			; (mov r8, r8)
   1e774:	00081108 	.word	0x00081108
   1e778:	0001fb3d 	.word	0x0001fb3d
   1e77c:	0001fd69 	.word	0x0001fd69
   1e780:	20003e34 	.word	0x20003e34
   1e784:	0001e2f9 	.word	0x0001e2f9
   1e788:	00000fff 	.word	0x00000fff

0001e78c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1e78c:	b590      	push	{r4, r7, lr}
   1e78e:	b083      	sub	sp, #12
   1e790:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1e792:	4b15      	ldr	r3, [pc, #84]	; (1e7e8 <sd_mmc_cmd9_spi+0x5c>)
   1e794:	681b      	ldr	r3, [r3, #0]
   1e796:	891b      	ldrh	r3, [r3, #8]
   1e798:	0419      	lsls	r1, r3, #16
   1e79a:	4814      	ldr	r0, [pc, #80]	; (1e7ec <sd_mmc_cmd9_spi+0x60>)
   1e79c:	2301      	movs	r3, #1
   1e79e:	9300      	str	r3, [sp, #0]
   1e7a0:	2301      	movs	r3, #1
   1e7a2:	2210      	movs	r2, #16
   1e7a4:	4c12      	ldr	r4, [pc, #72]	; (1e7f0 <sd_mmc_cmd9_spi+0x64>)
   1e7a6:	47a0      	blx	r4
   1e7a8:	0003      	movs	r3, r0
   1e7aa:	001a      	movs	r2, r3
   1e7ac:	2301      	movs	r3, #1
   1e7ae:	4053      	eors	r3, r2
   1e7b0:	b2db      	uxtb	r3, r3
   1e7b2:	2b00      	cmp	r3, #0
   1e7b4:	d001      	beq.n	1e7ba <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1e7b6:	2300      	movs	r3, #0
   1e7b8:	e012      	b.n	1e7e0 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1e7ba:	4b0b      	ldr	r3, [pc, #44]	; (1e7e8 <sd_mmc_cmd9_spi+0x5c>)
   1e7bc:	681b      	ldr	r3, [r3, #0]
   1e7be:	330e      	adds	r3, #14
   1e7c0:	2101      	movs	r1, #1
   1e7c2:	0018      	movs	r0, r3
   1e7c4:	4b0b      	ldr	r3, [pc, #44]	; (1e7f4 <sd_mmc_cmd9_spi+0x68>)
   1e7c6:	4798      	blx	r3
   1e7c8:	0003      	movs	r3, r0
   1e7ca:	001a      	movs	r2, r3
   1e7cc:	2301      	movs	r3, #1
   1e7ce:	4053      	eors	r3, r2
   1e7d0:	b2db      	uxtb	r3, r3
   1e7d2:	2b00      	cmp	r3, #0
   1e7d4:	d001      	beq.n	1e7da <sd_mmc_cmd9_spi+0x4e>
		return false;
   1e7d6:	2300      	movs	r3, #0
   1e7d8:	e002      	b.n	1e7e0 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1e7da:	4b07      	ldr	r3, [pc, #28]	; (1e7f8 <sd_mmc_cmd9_spi+0x6c>)
   1e7dc:	4798      	blx	r3
   1e7de:	0003      	movs	r3, r0
}
   1e7e0:	0018      	movs	r0, r3
   1e7e2:	46bd      	mov	sp, r7
   1e7e4:	b001      	add	sp, #4
   1e7e6:	bd90      	pop	{r4, r7, pc}
   1e7e8:	20003e34 	.word	0x20003e34
   1e7ec:	00081109 	.word	0x00081109
   1e7f0:	0001fb3d 	.word	0x0001fb3d
   1e7f4:	0001fe0d 	.word	0x0001fe0d
   1e7f8:	0001feb1 	.word	0x0001feb1

0001e7fc <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1e7fc:	b5b0      	push	{r4, r5, r7, lr}
   1e7fe:	b084      	sub	sp, #16
   1e800:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1e802:	4b45      	ldr	r3, [pc, #276]	; (1e918 <mmc_decode_csd+0x11c>)
   1e804:	681b      	ldr	r3, [r3, #0]
   1e806:	330e      	adds	r3, #14
   1e808:	0018      	movs	r0, r3
   1e80a:	2304      	movs	r3, #4
   1e80c:	227a      	movs	r2, #122	; 0x7a
   1e80e:	2180      	movs	r1, #128	; 0x80
   1e810:	4c42      	ldr	r4, [pc, #264]	; (1e91c <mmc_decode_csd+0x120>)
   1e812:	47a0      	blx	r4
   1e814:	0003      	movs	r3, r0
   1e816:	2b02      	cmp	r3, #2
   1e818:	d011      	beq.n	1e83e <mmc_decode_csd+0x42>
   1e81a:	d802      	bhi.n	1e822 <mmc_decode_csd+0x26>
   1e81c:	2b01      	cmp	r3, #1
   1e81e:	d009      	beq.n	1e834 <mmc_decode_csd+0x38>
   1e820:	e003      	b.n	1e82a <mmc_decode_csd+0x2e>
   1e822:	2b03      	cmp	r3, #3
   1e824:	d010      	beq.n	1e848 <mmc_decode_csd+0x4c>
   1e826:	2b04      	cmp	r3, #4
   1e828:	d013      	beq.n	1e852 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1e82a:	4b3b      	ldr	r3, [pc, #236]	; (1e918 <mmc_decode_csd+0x11c>)
   1e82c:	681b      	ldr	r3, [r3, #0]
   1e82e:	2212      	movs	r2, #18
   1e830:	731a      	strb	r2, [r3, #12]
		break;
   1e832:	e013      	b.n	1e85c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1e834:	4b38      	ldr	r3, [pc, #224]	; (1e918 <mmc_decode_csd+0x11c>)
   1e836:	681b      	ldr	r3, [r3, #0]
   1e838:	2214      	movs	r2, #20
   1e83a:	731a      	strb	r2, [r3, #12]
		break;
   1e83c:	e00e      	b.n	1e85c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1e83e:	4b36      	ldr	r3, [pc, #216]	; (1e918 <mmc_decode_csd+0x11c>)
   1e840:	681b      	ldr	r3, [r3, #0]
   1e842:	2222      	movs	r2, #34	; 0x22
   1e844:	731a      	strb	r2, [r3, #12]
		break;
   1e846:	e009      	b.n	1e85c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1e848:	4b33      	ldr	r3, [pc, #204]	; (1e918 <mmc_decode_csd+0x11c>)
   1e84a:	681b      	ldr	r3, [r3, #0]
   1e84c:	2230      	movs	r2, #48	; 0x30
   1e84e:	731a      	strb	r2, [r3, #12]
		break;
   1e850:	e004      	b.n	1e85c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1e852:	4b31      	ldr	r3, [pc, #196]	; (1e918 <mmc_decode_csd+0x11c>)
   1e854:	681b      	ldr	r3, [r3, #0]
   1e856:	2240      	movs	r2, #64	; 0x40
   1e858:	731a      	strb	r2, [r3, #12]
		break;
   1e85a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1e85c:	4b2e      	ldr	r3, [pc, #184]	; (1e918 <mmc_decode_csd+0x11c>)
   1e85e:	681b      	ldr	r3, [r3, #0]
   1e860:	330e      	adds	r3, #14
   1e862:	0018      	movs	r0, r3
   1e864:	2308      	movs	r3, #8
   1e866:	2260      	movs	r2, #96	; 0x60
   1e868:	2180      	movs	r1, #128	; 0x80
   1e86a:	4c2c      	ldr	r4, [pc, #176]	; (1e91c <mmc_decode_csd+0x120>)
   1e86c:	47a0      	blx	r4
   1e86e:	0003      	movs	r3, r0
   1e870:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1e872:	68fb      	ldr	r3, [r7, #12]
   1e874:	2207      	movs	r2, #7
   1e876:	401a      	ands	r2, r3
   1e878:	4b29      	ldr	r3, [pc, #164]	; (1e920 <mmc_decode_csd+0x124>)
   1e87a:	0092      	lsls	r2, r2, #2
   1e87c:	58d3      	ldr	r3, [r2, r3]
   1e87e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1e880:	68fb      	ldr	r3, [r7, #12]
   1e882:	08db      	lsrs	r3, r3, #3
   1e884:	220f      	movs	r2, #15
   1e886:	401a      	ands	r2, r3
   1e888:	4b26      	ldr	r3, [pc, #152]	; (1e924 <mmc_decode_csd+0x128>)
   1e88a:	0092      	lsls	r2, r2, #2
   1e88c:	58d3      	ldr	r3, [r2, r3]
   1e88e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1e890:	4b21      	ldr	r3, [pc, #132]	; (1e918 <mmc_decode_csd+0x11c>)
   1e892:	681b      	ldr	r3, [r3, #0]
   1e894:	68ba      	ldr	r2, [r7, #8]
   1e896:	6879      	ldr	r1, [r7, #4]
   1e898:	434a      	muls	r2, r1
   1e89a:	21fa      	movs	r1, #250	; 0xfa
   1e89c:	0089      	lsls	r1, r1, #2
   1e89e:	434a      	muls	r2, r1
   1e8a0:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1e8a2:	4b1d      	ldr	r3, [pc, #116]	; (1e918 <mmc_decode_csd+0x11c>)
   1e8a4:	681b      	ldr	r3, [r3, #0]
   1e8a6:	330e      	adds	r3, #14
   1e8a8:	0018      	movs	r0, r3
   1e8aa:	230c      	movs	r3, #12
   1e8ac:	223e      	movs	r2, #62	; 0x3e
   1e8ae:	2180      	movs	r1, #128	; 0x80
   1e8b0:	4c1a      	ldr	r4, [pc, #104]	; (1e91c <mmc_decode_csd+0x120>)
   1e8b2:	47a0      	blx	r4
   1e8b4:	0002      	movs	r2, r0
   1e8b6:	4b1c      	ldr	r3, [pc, #112]	; (1e928 <mmc_decode_csd+0x12c>)
   1e8b8:	429a      	cmp	r2, r3
   1e8ba:	d028      	beq.n	1e90e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1e8bc:	4b16      	ldr	r3, [pc, #88]	; (1e918 <mmc_decode_csd+0x11c>)
   1e8be:	681b      	ldr	r3, [r3, #0]
   1e8c0:	330e      	adds	r3, #14
   1e8c2:	0018      	movs	r0, r3
   1e8c4:	230c      	movs	r3, #12
   1e8c6:	223e      	movs	r2, #62	; 0x3e
   1e8c8:	2180      	movs	r1, #128	; 0x80
   1e8ca:	4c14      	ldr	r4, [pc, #80]	; (1e91c <mmc_decode_csd+0x120>)
   1e8cc:	47a0      	blx	r4
   1e8ce:	0003      	movs	r3, r0
   1e8d0:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1e8d2:	4b11      	ldr	r3, [pc, #68]	; (1e918 <mmc_decode_csd+0x11c>)
   1e8d4:	681b      	ldr	r3, [r3, #0]
   1e8d6:	330e      	adds	r3, #14
   1e8d8:	0018      	movs	r0, r3
   1e8da:	2303      	movs	r3, #3
   1e8dc:	222f      	movs	r2, #47	; 0x2f
   1e8de:	2180      	movs	r1, #128	; 0x80
   1e8e0:	4d0e      	ldr	r5, [pc, #56]	; (1e91c <mmc_decode_csd+0x120>)
   1e8e2:	47a8      	blx	r5
   1e8e4:	0003      	movs	r3, r0
   1e8e6:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1e8e8:	409c      	lsls	r4, r3
   1e8ea:	0023      	movs	r3, r4
   1e8ec:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e8ee:	4b0a      	ldr	r3, [pc, #40]	; (1e918 <mmc_decode_csd+0x11c>)
   1e8f0:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e8f2:	4b09      	ldr	r3, [pc, #36]	; (1e918 <mmc_decode_csd+0x11c>)
   1e8f4:	681b      	ldr	r3, [r3, #0]
   1e8f6:	330e      	adds	r3, #14
   1e8f8:	0018      	movs	r0, r3
   1e8fa:	2304      	movs	r3, #4
   1e8fc:	2250      	movs	r2, #80	; 0x50
   1e8fe:	2180      	movs	r1, #128	; 0x80
   1e900:	4d06      	ldr	r5, [pc, #24]	; (1e91c <mmc_decode_csd+0x120>)
   1e902:	47a8      	blx	r5
   1e904:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e906:	683b      	ldr	r3, [r7, #0]
   1e908:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e90a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e90c:	6063      	str	r3, [r4, #4]
	}
}
   1e90e:	46c0      	nop			; (mov r8, r8)
   1e910:	46bd      	mov	sp, r7
   1e912:	b004      	add	sp, #16
   1e914:	bdb0      	pop	{r4, r5, r7, pc}
   1e916:	46c0      	nop			; (mov r8, r8)
   1e918:	20003e34 	.word	0x20003e34
   1e91c:	0001e2f9 	.word	0x0001e2f9
   1e920:	00038008 	.word	0x00038008
   1e924:	00038064 	.word	0x00038064
   1e928:	00000fff 	.word	0x00000fff

0001e92c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1e92c:	b5b0      	push	{r4, r5, r7, lr}
   1e92e:	b084      	sub	sp, #16
   1e930:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1e932:	4b35      	ldr	r3, [pc, #212]	; (1ea08 <sd_decode_csd+0xdc>)
   1e934:	681b      	ldr	r3, [r3, #0]
   1e936:	330e      	adds	r3, #14
   1e938:	0018      	movs	r0, r3
   1e93a:	2308      	movs	r3, #8
   1e93c:	2260      	movs	r2, #96	; 0x60
   1e93e:	2180      	movs	r1, #128	; 0x80
   1e940:	4c32      	ldr	r4, [pc, #200]	; (1ea0c <sd_decode_csd+0xe0>)
   1e942:	47a0      	blx	r4
   1e944:	0003      	movs	r3, r0
   1e946:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1e948:	68fb      	ldr	r3, [r7, #12]
   1e94a:	2207      	movs	r2, #7
   1e94c:	401a      	ands	r2, r3
   1e94e:	4b30      	ldr	r3, [pc, #192]	; (1ea10 <sd_decode_csd+0xe4>)
   1e950:	0092      	lsls	r2, r2, #2
   1e952:	58d3      	ldr	r3, [r2, r3]
   1e954:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1e956:	68fb      	ldr	r3, [r7, #12]
   1e958:	08db      	lsrs	r3, r3, #3
   1e95a:	220f      	movs	r2, #15
   1e95c:	401a      	ands	r2, r3
   1e95e:	4b2d      	ldr	r3, [pc, #180]	; (1ea14 <sd_decode_csd+0xe8>)
   1e960:	0092      	lsls	r2, r2, #2
   1e962:	58d3      	ldr	r3, [r2, r3]
   1e964:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1e966:	4b28      	ldr	r3, [pc, #160]	; (1ea08 <sd_decode_csd+0xdc>)
   1e968:	681b      	ldr	r3, [r3, #0]
   1e96a:	68ba      	ldr	r2, [r7, #8]
   1e96c:	6879      	ldr	r1, [r7, #4]
   1e96e:	434a      	muls	r2, r1
   1e970:	21fa      	movs	r1, #250	; 0xfa
   1e972:	0089      	lsls	r1, r1, #2
   1e974:	434a      	muls	r2, r1
   1e976:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1e978:	4b23      	ldr	r3, [pc, #140]	; (1ea08 <sd_decode_csd+0xdc>)
   1e97a:	681b      	ldr	r3, [r3, #0]
   1e97c:	330e      	adds	r3, #14
   1e97e:	0018      	movs	r0, r3
   1e980:	2302      	movs	r3, #2
   1e982:	227e      	movs	r2, #126	; 0x7e
   1e984:	2180      	movs	r1, #128	; 0x80
   1e986:	4c21      	ldr	r4, [pc, #132]	; (1ea0c <sd_decode_csd+0xe0>)
   1e988:	47a0      	blx	r4
   1e98a:	1e03      	subs	r3, r0, #0
   1e98c:	d00f      	beq.n	1e9ae <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1e98e:	4b1e      	ldr	r3, [pc, #120]	; (1ea08 <sd_decode_csd+0xdc>)
   1e990:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1e992:	4b1d      	ldr	r3, [pc, #116]	; (1ea08 <sd_decode_csd+0xdc>)
   1e994:	681b      	ldr	r3, [r3, #0]
   1e996:	330e      	adds	r3, #14
   1e998:	0018      	movs	r0, r3
   1e99a:	2316      	movs	r3, #22
   1e99c:	2230      	movs	r2, #48	; 0x30
   1e99e:	2180      	movs	r1, #128	; 0x80
   1e9a0:	4d1a      	ldr	r5, [pc, #104]	; (1ea0c <sd_decode_csd+0xe0>)
   1e9a2:	47a8      	blx	r5
   1e9a4:	0003      	movs	r3, r0
				* 512;
   1e9a6:	3301      	adds	r3, #1
   1e9a8:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1e9aa:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1e9ac:	e028      	b.n	1ea00 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e9ae:	4b16      	ldr	r3, [pc, #88]	; (1ea08 <sd_decode_csd+0xdc>)
   1e9b0:	681b      	ldr	r3, [r3, #0]
   1e9b2:	330e      	adds	r3, #14
   1e9b4:	0018      	movs	r0, r3
   1e9b6:	230c      	movs	r3, #12
   1e9b8:	223e      	movs	r2, #62	; 0x3e
   1e9ba:	2180      	movs	r1, #128	; 0x80
   1e9bc:	4c13      	ldr	r4, [pc, #76]	; (1ea0c <sd_decode_csd+0xe0>)
   1e9be:	47a0      	blx	r4
   1e9c0:	0003      	movs	r3, r0
   1e9c2:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1e9c4:	4b10      	ldr	r3, [pc, #64]	; (1ea08 <sd_decode_csd+0xdc>)
   1e9c6:	681b      	ldr	r3, [r3, #0]
   1e9c8:	330e      	adds	r3, #14
   1e9ca:	0018      	movs	r0, r3
   1e9cc:	2303      	movs	r3, #3
   1e9ce:	222f      	movs	r2, #47	; 0x2f
   1e9d0:	2180      	movs	r1, #128	; 0x80
   1e9d2:	4d0e      	ldr	r5, [pc, #56]	; (1ea0c <sd_decode_csd+0xe0>)
   1e9d4:	47a8      	blx	r5
   1e9d6:	0003      	movs	r3, r0
   1e9d8:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e9da:	409c      	lsls	r4, r3
   1e9dc:	0023      	movs	r3, r4
   1e9de:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e9e0:	4b09      	ldr	r3, [pc, #36]	; (1ea08 <sd_decode_csd+0xdc>)
   1e9e2:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1e9e4:	4b08      	ldr	r3, [pc, #32]	; (1ea08 <sd_decode_csd+0xdc>)
   1e9e6:	681b      	ldr	r3, [r3, #0]
   1e9e8:	330e      	adds	r3, #14
   1e9ea:	0018      	movs	r0, r3
   1e9ec:	2304      	movs	r3, #4
   1e9ee:	2250      	movs	r2, #80	; 0x50
   1e9f0:	2180      	movs	r1, #128	; 0x80
   1e9f2:	4d06      	ldr	r5, [pc, #24]	; (1ea0c <sd_decode_csd+0xe0>)
   1e9f4:	47a8      	blx	r5
   1e9f6:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e9f8:	683b      	ldr	r3, [r7, #0]
   1e9fa:	4093      	lsls	r3, r2
				/ 1024;
   1e9fc:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e9fe:	6063      	str	r3, [r4, #4]
}
   1ea00:	46c0      	nop			; (mov r8, r8)
   1ea02:	46bd      	mov	sp, r7
   1ea04:	b004      	add	sp, #16
   1ea06:	bdb0      	pop	{r4, r5, r7, pc}
   1ea08:	20003e34 	.word	0x20003e34
   1ea0c:	0001e2f9 	.word	0x0001e2f9
   1ea10:	00038008 	.word	0x00038008
   1ea14:	00038024 	.word	0x00038024

0001ea18 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1ea18:	b580      	push	{r7, lr}
   1ea1a:	b082      	sub	sp, #8
   1ea1c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1ea1e:	4b11      	ldr	r3, [pc, #68]	; (1ea64 <sd_mmc_cmd13+0x4c>)
   1ea20:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1ea22:	4b11      	ldr	r3, [pc, #68]	; (1ea68 <sd_mmc_cmd13+0x50>)
   1ea24:	2100      	movs	r1, #0
   1ea26:	0018      	movs	r0, r3
   1ea28:	4b10      	ldr	r3, [pc, #64]	; (1ea6c <sd_mmc_cmd13+0x54>)
   1ea2a:	4798      	blx	r3
   1ea2c:	0003      	movs	r3, r0
   1ea2e:	001a      	movs	r2, r3
   1ea30:	2301      	movs	r3, #1
   1ea32:	4053      	eors	r3, r2
   1ea34:	b2db      	uxtb	r3, r3
   1ea36:	2b00      	cmp	r3, #0
   1ea38:	d001      	beq.n	1ea3e <sd_mmc_cmd13+0x26>
				return false;
   1ea3a:	2300      	movs	r3, #0
   1ea3c:	e00e      	b.n	1ea5c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1ea3e:	4b0c      	ldr	r3, [pc, #48]	; (1ea70 <sd_mmc_cmd13+0x58>)
   1ea40:	4798      	blx	r3
   1ea42:	0002      	movs	r2, r0
   1ea44:	23ff      	movs	r3, #255	; 0xff
   1ea46:	4013      	ands	r3, r2
   1ea48:	d006      	beq.n	1ea58 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1ea4a:	687b      	ldr	r3, [r7, #4]
   1ea4c:	1e5a      	subs	r2, r3, #1
   1ea4e:	607a      	str	r2, [r7, #4]
   1ea50:	2b00      	cmp	r3, #0
   1ea52:	d1e6      	bne.n	1ea22 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1ea54:	2300      	movs	r3, #0
   1ea56:	e001      	b.n	1ea5c <sd_mmc_cmd13+0x44>
				break;
   1ea58:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1ea5a:	2301      	movs	r3, #1
}
   1ea5c:	0018      	movs	r0, r3
   1ea5e:	46bd      	mov	sp, r7
   1ea60:	b002      	add	sp, #8
   1ea62:	bd80      	pop	{r7, pc}
   1ea64:	00030d40 	.word	0x00030d40
   1ea68:	00001b0d 	.word	0x00001b0d
   1ea6c:	0001fb15 	.word	0x0001fb15
   1ea70:	0001fd55 	.word	0x0001fd55

0001ea74 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1ea74:	b590      	push	{r4, r7, lr}
   1ea76:	b085      	sub	sp, #20
   1ea78:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1ea7a:	4b38      	ldr	r3, [pc, #224]	; (1eb5c <sd_acmd51+0xe8>)
   1ea7c:	681b      	ldr	r3, [r3, #0]
   1ea7e:	891b      	ldrh	r3, [r3, #8]
   1ea80:	041b      	lsls	r3, r3, #16
   1ea82:	4a37      	ldr	r2, [pc, #220]	; (1eb60 <sd_acmd51+0xec>)
   1ea84:	0019      	movs	r1, r3
   1ea86:	0010      	movs	r0, r2
   1ea88:	4b36      	ldr	r3, [pc, #216]	; (1eb64 <sd_acmd51+0xf0>)
   1ea8a:	4798      	blx	r3
   1ea8c:	0003      	movs	r3, r0
   1ea8e:	001a      	movs	r2, r3
   1ea90:	2301      	movs	r3, #1
   1ea92:	4053      	eors	r3, r2
   1ea94:	b2db      	uxtb	r3, r3
   1ea96:	2b00      	cmp	r3, #0
   1ea98:	d001      	beq.n	1ea9e <sd_acmd51+0x2a>
		return false;
   1ea9a:	2300      	movs	r3, #0
   1ea9c:	e059      	b.n	1eb52 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1ea9e:	4832      	ldr	r0, [pc, #200]	; (1eb68 <sd_acmd51+0xf4>)
   1eaa0:	2301      	movs	r3, #1
   1eaa2:	9300      	str	r3, [sp, #0]
   1eaa4:	2301      	movs	r3, #1
   1eaa6:	2208      	movs	r2, #8
   1eaa8:	2100      	movs	r1, #0
   1eaaa:	4c30      	ldr	r4, [pc, #192]	; (1eb6c <sd_acmd51+0xf8>)
   1eaac:	47a0      	blx	r4
   1eaae:	0003      	movs	r3, r0
   1eab0:	001a      	movs	r2, r3
   1eab2:	2301      	movs	r3, #1
   1eab4:	4053      	eors	r3, r2
   1eab6:	b2db      	uxtb	r3, r3
   1eab8:	2b00      	cmp	r3, #0
   1eaba:	d001      	beq.n	1eac0 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1eabc:	2300      	movs	r3, #0
   1eabe:	e048      	b.n	1eb52 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1eac0:	003b      	movs	r3, r7
   1eac2:	2101      	movs	r1, #1
   1eac4:	0018      	movs	r0, r3
   1eac6:	4b2a      	ldr	r3, [pc, #168]	; (1eb70 <sd_acmd51+0xfc>)
   1eac8:	4798      	blx	r3
   1eaca:	0003      	movs	r3, r0
   1eacc:	001a      	movs	r2, r3
   1eace:	2301      	movs	r3, #1
   1ead0:	4053      	eors	r3, r2
   1ead2:	b2db      	uxtb	r3, r3
   1ead4:	2b00      	cmp	r3, #0
   1ead6:	d001      	beq.n	1eadc <sd_acmd51+0x68>
		return false;
   1ead8:	2300      	movs	r3, #0
   1eada:	e03a      	b.n	1eb52 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1eadc:	4b25      	ldr	r3, [pc, #148]	; (1eb74 <sd_acmd51+0x100>)
   1eade:	4798      	blx	r3
   1eae0:	0003      	movs	r3, r0
   1eae2:	001a      	movs	r2, r3
   1eae4:	2301      	movs	r3, #1
   1eae6:	4053      	eors	r3, r2
   1eae8:	b2db      	uxtb	r3, r3
   1eaea:	2b00      	cmp	r3, #0
   1eaec:	d001      	beq.n	1eaf2 <sd_acmd51+0x7e>
		return false;
   1eaee:	2300      	movs	r3, #0
   1eaf0:	e02f      	b.n	1eb52 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1eaf2:	0038      	movs	r0, r7
   1eaf4:	2304      	movs	r3, #4
   1eaf6:	2238      	movs	r2, #56	; 0x38
   1eaf8:	2140      	movs	r1, #64	; 0x40
   1eafa:	4c1f      	ldr	r4, [pc, #124]	; (1eb78 <sd_acmd51+0x104>)
   1eafc:	47a0      	blx	r4
   1eafe:	0003      	movs	r3, r0
   1eb00:	2b01      	cmp	r3, #1
   1eb02:	d008      	beq.n	1eb16 <sd_acmd51+0xa2>
   1eb04:	d302      	bcc.n	1eb0c <sd_acmd51+0x98>
   1eb06:	2b02      	cmp	r3, #2
   1eb08:	d00a      	beq.n	1eb20 <sd_acmd51+0xac>
   1eb0a:	e01c      	b.n	1eb46 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1eb0c:	4b13      	ldr	r3, [pc, #76]	; (1eb5c <sd_acmd51+0xe8>)
   1eb0e:	681b      	ldr	r3, [r3, #0]
   1eb10:	2210      	movs	r2, #16
   1eb12:	731a      	strb	r2, [r3, #12]
		break;
   1eb14:	e01c      	b.n	1eb50 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1eb16:	4b11      	ldr	r3, [pc, #68]	; (1eb5c <sd_acmd51+0xe8>)
   1eb18:	681b      	ldr	r3, [r3, #0]
   1eb1a:	221a      	movs	r2, #26
   1eb1c:	731a      	strb	r2, [r3, #12]
		break;
   1eb1e:	e017      	b.n	1eb50 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1eb20:	0038      	movs	r0, r7
   1eb22:	2301      	movs	r3, #1
   1eb24:	222f      	movs	r2, #47	; 0x2f
   1eb26:	2140      	movs	r1, #64	; 0x40
   1eb28:	4c13      	ldr	r4, [pc, #76]	; (1eb78 <sd_acmd51+0x104>)
   1eb2a:	47a0      	blx	r4
   1eb2c:	0003      	movs	r3, r0
   1eb2e:	2b01      	cmp	r3, #1
   1eb30:	d104      	bne.n	1eb3c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1eb32:	4b0a      	ldr	r3, [pc, #40]	; (1eb5c <sd_acmd51+0xe8>)
   1eb34:	681b      	ldr	r3, [r3, #0]
   1eb36:	2230      	movs	r2, #48	; 0x30
   1eb38:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1eb3a:	e009      	b.n	1eb50 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1eb3c:	4b07      	ldr	r3, [pc, #28]	; (1eb5c <sd_acmd51+0xe8>)
   1eb3e:	681b      	ldr	r3, [r3, #0]
   1eb40:	2220      	movs	r2, #32
   1eb42:	731a      	strb	r2, [r3, #12]
		break;
   1eb44:	e004      	b.n	1eb50 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1eb46:	4b05      	ldr	r3, [pc, #20]	; (1eb5c <sd_acmd51+0xe8>)
   1eb48:	681b      	ldr	r3, [r3, #0]
   1eb4a:	2210      	movs	r2, #16
   1eb4c:	731a      	strb	r2, [r3, #12]
		break;
   1eb4e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1eb50:	2301      	movs	r3, #1
}
   1eb52:	0018      	movs	r0, r3
   1eb54:	46bd      	mov	sp, r7
   1eb56:	b003      	add	sp, #12
   1eb58:	bd90      	pop	{r4, r7, pc}
   1eb5a:	46c0      	nop			; (mov r8, r8)
   1eb5c:	20003e34 	.word	0x20003e34
   1eb60:	00001137 	.word	0x00001137
   1eb64:	0001fb15 	.word	0x0001fb15
   1eb68:	00081133 	.word	0x00081133
   1eb6c:	0001fb3d 	.word	0x0001fb3d
   1eb70:	0001fe0d 	.word	0x0001fe0d
   1eb74:	0001feb1 	.word	0x0001feb1
   1eb78:	0001e2f9 	.word	0x0001e2f9

0001eb7c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1eb7c:	b580      	push	{r7, lr}
   1eb7e:	b082      	sub	sp, #8
   1eb80:	af00      	add	r7, sp, #0
   1eb82:	0002      	movs	r2, r0
   1eb84:	1dfb      	adds	r3, r7, #7
   1eb86:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1eb88:	1dfb      	adds	r3, r7, #7
   1eb8a:	781b      	ldrb	r3, [r3, #0]
   1eb8c:	2b00      	cmp	r3, #0
   1eb8e:	d001      	beq.n	1eb94 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1eb90:	2304      	movs	r3, #4
   1eb92:	e047      	b.n	1ec24 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1eb94:	1dfb      	adds	r3, r7, #7
   1eb96:	781b      	ldrb	r3, [r3, #0]
   1eb98:	4a24      	ldr	r2, [pc, #144]	; (1ec2c <sd_mmc_select_slot+0xb0>)
   1eb9a:	015b      	lsls	r3, r3, #5
   1eb9c:	18d3      	adds	r3, r2, r3
   1eb9e:	330a      	adds	r3, #10
   1eba0:	781b      	ldrb	r3, [r3, #0]
   1eba2:	2b04      	cmp	r3, #4
   1eba4:	d008      	beq.n	1ebb8 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1eba6:	1dfb      	adds	r3, r7, #7
   1eba8:	781b      	ldrb	r3, [r3, #0]
   1ebaa:	4a20      	ldr	r2, [pc, #128]	; (1ec2c <sd_mmc_select_slot+0xb0>)
   1ebac:	015b      	lsls	r3, r3, #5
   1ebae:	18d3      	adds	r3, r2, r3
   1ebb0:	330a      	adds	r3, #10
   1ebb2:	781b      	ldrb	r3, [r3, #0]
   1ebb4:	2b03      	cmp	r3, #3
   1ebb6:	d11d      	bne.n	1ebf4 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1ebb8:	1dfb      	adds	r3, r7, #7
   1ebba:	781b      	ldrb	r3, [r3, #0]
   1ebbc:	4a1b      	ldr	r2, [pc, #108]	; (1ec2c <sd_mmc_select_slot+0xb0>)
   1ebbe:	015b      	lsls	r3, r3, #5
   1ebc0:	18d3      	adds	r3, r2, r3
   1ebc2:	330a      	adds	r3, #10
   1ebc4:	2202      	movs	r2, #2
   1ebc6:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1ebc8:	1dfb      	adds	r3, r7, #7
   1ebca:	781a      	ldrb	r2, [r3, #0]
   1ebcc:	4b17      	ldr	r3, [pc, #92]	; (1ec2c <sd_mmc_select_slot+0xb0>)
   1ebce:	0152      	lsls	r2, r2, #5
   1ebd0:	4917      	ldr	r1, [pc, #92]	; (1ec30 <sd_mmc_select_slot+0xb4>)
   1ebd2:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1ebd4:	1dfb      	adds	r3, r7, #7
   1ebd6:	781b      	ldrb	r3, [r3, #0]
   1ebd8:	4a14      	ldr	r2, [pc, #80]	; (1ec2c <sd_mmc_select_slot+0xb0>)
   1ebda:	015b      	lsls	r3, r3, #5
   1ebdc:	18d3      	adds	r3, r2, r3
   1ebde:	330d      	adds	r3, #13
   1ebe0:	2201      	movs	r2, #1
   1ebe2:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1ebe4:	1dfb      	adds	r3, r7, #7
   1ebe6:	781b      	ldrb	r3, [r3, #0]
   1ebe8:	4a10      	ldr	r2, [pc, #64]	; (1ec2c <sd_mmc_select_slot+0xb0>)
   1ebea:	015b      	lsls	r3, r3, #5
   1ebec:	18d3      	adds	r3, r2, r3
   1ebee:	331e      	adds	r3, #30
   1ebf0:	2200      	movs	r2, #0
   1ebf2:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1ebf4:	4b0f      	ldr	r3, [pc, #60]	; (1ec34 <sd_mmc_select_slot+0xb8>)
   1ebf6:	1dfa      	adds	r2, r7, #7
   1ebf8:	7812      	ldrb	r2, [r2, #0]
   1ebfa:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1ebfc:	1dfb      	adds	r3, r7, #7
   1ebfe:	781b      	ldrb	r3, [r3, #0]
   1ec00:	015a      	lsls	r2, r3, #5
   1ec02:	4b0a      	ldr	r3, [pc, #40]	; (1ec2c <sd_mmc_select_slot+0xb0>)
   1ec04:	18d2      	adds	r2, r2, r3
   1ec06:	4b0c      	ldr	r3, [pc, #48]	; (1ec38 <sd_mmc_select_slot+0xbc>)
   1ec08:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1ec0a:	4b0c      	ldr	r3, [pc, #48]	; (1ec3c <sd_mmc_select_slot+0xc0>)
   1ec0c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1ec0e:	1dfb      	adds	r3, r7, #7
   1ec10:	781b      	ldrb	r3, [r3, #0]
   1ec12:	4a06      	ldr	r2, [pc, #24]	; (1ec2c <sd_mmc_select_slot+0xb0>)
   1ec14:	015b      	lsls	r3, r3, #5
   1ec16:	18d3      	adds	r3, r2, r3
   1ec18:	330a      	adds	r3, #10
   1ec1a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1ec1c:	3b02      	subs	r3, #2
   1ec1e:	425a      	negs	r2, r3
   1ec20:	4153      	adcs	r3, r2
   1ec22:	b2db      	uxtb	r3, r3
}
   1ec24:	0018      	movs	r0, r3
   1ec26:	46bd      	mov	sp, r7
   1ec28:	b002      	add	sp, #8
   1ec2a:	bd80      	pop	{r7, pc}
   1ec2c:	20003e10 	.word	0x20003e10
   1ec30:	00061a80 	.word	0x00061a80
   1ec34:	20003e30 	.word	0x20003e30
   1ec38:	20003e34 	.word	0x20003e34
   1ec3c:	0001ec41 	.word	0x0001ec41

0001ec40 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1ec40:	b5b0      	push	{r4, r5, r7, lr}
   1ec42:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1ec44:	4b09      	ldr	r3, [pc, #36]	; (1ec6c <sd_mmc_configure_slot+0x2c>)
   1ec46:	7818      	ldrb	r0, [r3, #0]
   1ec48:	4b09      	ldr	r3, [pc, #36]	; (1ec70 <sd_mmc_configure_slot+0x30>)
   1ec4a:	681b      	ldr	r3, [r3, #0]
   1ec4c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1ec4e:	4b08      	ldr	r3, [pc, #32]	; (1ec70 <sd_mmc_configure_slot+0x30>)
   1ec50:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1ec52:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1ec54:	4b06      	ldr	r3, [pc, #24]	; (1ec70 <sd_mmc_configure_slot+0x30>)
   1ec56:	681b      	ldr	r3, [r3, #0]
   1ec58:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1ec5a:	1e5c      	subs	r4, r3, #1
   1ec5c:	41a3      	sbcs	r3, r4
   1ec5e:	b2db      	uxtb	r3, r3
   1ec60:	4c04      	ldr	r4, [pc, #16]	; (1ec74 <sd_mmc_configure_slot+0x34>)
   1ec62:	47a0      	blx	r4
}
   1ec64:	46c0      	nop			; (mov r8, r8)
   1ec66:	46bd      	mov	sp, r7
   1ec68:	bdb0      	pop	{r4, r5, r7, pc}
   1ec6a:	46c0      	nop			; (mov r8, r8)
   1ec6c:	20003e30 	.word	0x20003e30
   1ec70:	20003e34 	.word	0x20003e34
   1ec74:	0001f9fd 	.word	0x0001f9fd

0001ec78 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1ec78:	b580      	push	{r7, lr}
   1ec7a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1ec7c:	4b05      	ldr	r3, [pc, #20]	; (1ec94 <sd_mmc_deselect_slot+0x1c>)
   1ec7e:	781b      	ldrb	r3, [r3, #0]
   1ec80:	2b00      	cmp	r3, #0
   1ec82:	d104      	bne.n	1ec8e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1ec84:	4b03      	ldr	r3, [pc, #12]	; (1ec94 <sd_mmc_deselect_slot+0x1c>)
   1ec86:	781b      	ldrb	r3, [r3, #0]
   1ec88:	0018      	movs	r0, r3
   1ec8a:	4b03      	ldr	r3, [pc, #12]	; (1ec98 <sd_mmc_deselect_slot+0x20>)
   1ec8c:	4798      	blx	r3
	}
}
   1ec8e:	46c0      	nop			; (mov r8, r8)
   1ec90:	46bd      	mov	sp, r7
   1ec92:	bd80      	pop	{r7, pc}
   1ec94:	20003e30 	.word	0x20003e30
   1ec98:	0001fa85 	.word	0x0001fa85

0001ec9c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1ec9c:	b580      	push	{r7, lr}
   1ec9e:	b082      	sub	sp, #8
   1eca0:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1eca2:	1dfb      	adds	r3, r7, #7
   1eca4:	2200      	movs	r2, #0
   1eca6:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1eca8:	4b59      	ldr	r3, [pc, #356]	; (1ee10 <sd_mmc_spi_card_init+0x174>)
   1ecaa:	681b      	ldr	r3, [r3, #0]
   1ecac:	2201      	movs	r2, #1
   1ecae:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1ecb0:	4b57      	ldr	r3, [pc, #348]	; (1ee10 <sd_mmc_spi_card_init+0x174>)
   1ecb2:	681b      	ldr	r3, [r3, #0]
   1ecb4:	2200      	movs	r2, #0
   1ecb6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1ecb8:	4b55      	ldr	r3, [pc, #340]	; (1ee10 <sd_mmc_spi_card_init+0x174>)
   1ecba:	681b      	ldr	r3, [r3, #0]
   1ecbc:	2200      	movs	r2, #0
   1ecbe:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1ecc0:	4b54      	ldr	r3, [pc, #336]	; (1ee14 <sd_mmc_spi_card_init+0x178>)
   1ecc2:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1ecc4:	2388      	movs	r3, #136	; 0x88
   1ecc6:	015b      	lsls	r3, r3, #5
   1ecc8:	2100      	movs	r1, #0
   1ecca:	0018      	movs	r0, r3
   1eccc:	4b52      	ldr	r3, [pc, #328]	; (1ee18 <sd_mmc_spi_card_init+0x17c>)
   1ecce:	4798      	blx	r3
   1ecd0:	0003      	movs	r3, r0
   1ecd2:	001a      	movs	r2, r3
   1ecd4:	2301      	movs	r3, #1
   1ecd6:	4053      	eors	r3, r2
   1ecd8:	b2db      	uxtb	r3, r3
   1ecda:	2b00      	cmp	r3, #0
   1ecdc:	d001      	beq.n	1ece2 <sd_mmc_spi_card_init+0x46>
		return false;
   1ecde:	2300      	movs	r3, #0
   1ece0:	e092      	b.n	1ee08 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1ece2:	1dfb      	adds	r3, r7, #7
   1ece4:	0018      	movs	r0, r3
   1ece6:	4b4d      	ldr	r3, [pc, #308]	; (1ee1c <sd_mmc_spi_card_init+0x180>)
   1ece8:	4798      	blx	r3
   1ecea:	0003      	movs	r3, r0
   1ecec:	001a      	movs	r2, r3
   1ecee:	2301      	movs	r3, #1
   1ecf0:	4053      	eors	r3, r2
   1ecf2:	b2db      	uxtb	r3, r3
   1ecf4:	2b00      	cmp	r3, #0
   1ecf6:	d001      	beq.n	1ecfc <sd_mmc_spi_card_init+0x60>
		return false;
   1ecf8:	2300      	movs	r3, #0
   1ecfa:	e085      	b.n	1ee08 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1ecfc:	4b48      	ldr	r3, [pc, #288]	; (1ee20 <sd_mmc_spi_card_init+0x184>)
   1ecfe:	4798      	blx	r3
   1ed00:	0003      	movs	r3, r0
   1ed02:	001a      	movs	r2, r3
   1ed04:	2301      	movs	r3, #1
   1ed06:	4053      	eors	r3, r2
   1ed08:	b2db      	uxtb	r3, r3
   1ed0a:	2b00      	cmp	r3, #0
   1ed0c:	d001      	beq.n	1ed12 <sd_mmc_spi_card_init+0x76>
		return false;
   1ed0e:	2300      	movs	r3, #0
   1ed10:	e07a      	b.n	1ee08 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1ed12:	4b3f      	ldr	r3, [pc, #252]	; (1ee10 <sd_mmc_spi_card_init+0x174>)
   1ed14:	681b      	ldr	r3, [r3, #0]
   1ed16:	7adb      	ldrb	r3, [r3, #11]
   1ed18:	001a      	movs	r2, r3
   1ed1a:	2301      	movs	r3, #1
   1ed1c:	4013      	ands	r3, r2
   1ed1e:	d021      	beq.n	1ed64 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1ed20:	1dfb      	adds	r3, r7, #7
   1ed22:	781b      	ldrb	r3, [r3, #0]
   1ed24:	0018      	movs	r0, r3
   1ed26:	4b3f      	ldr	r3, [pc, #252]	; (1ee24 <sd_mmc_spi_card_init+0x188>)
   1ed28:	4798      	blx	r3
   1ed2a:	0003      	movs	r3, r0
   1ed2c:	001a      	movs	r2, r3
   1ed2e:	2301      	movs	r3, #1
   1ed30:	4053      	eors	r3, r2
   1ed32:	b2db      	uxtb	r3, r3
   1ed34:	2b00      	cmp	r3, #0
   1ed36:	d007      	beq.n	1ed48 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1ed38:	4b35      	ldr	r3, [pc, #212]	; (1ee10 <sd_mmc_spi_card_init+0x174>)
   1ed3a:	681b      	ldr	r3, [r3, #0]
   1ed3c:	2202      	movs	r2, #2
   1ed3e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1ed40:	4b39      	ldr	r3, [pc, #228]	; (1ee28 <sd_mmc_spi_card_init+0x18c>)
   1ed42:	4798      	blx	r3
   1ed44:	0003      	movs	r3, r0
   1ed46:	e05f      	b.n	1ee08 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1ed48:	4b38      	ldr	r3, [pc, #224]	; (1ee2c <sd_mmc_spi_card_init+0x190>)
   1ed4a:	2100      	movs	r1, #0
   1ed4c:	0018      	movs	r0, r3
   1ed4e:	4b32      	ldr	r3, [pc, #200]	; (1ee18 <sd_mmc_spi_card_init+0x17c>)
   1ed50:	4798      	blx	r3
   1ed52:	0003      	movs	r3, r0
   1ed54:	001a      	movs	r2, r3
   1ed56:	2301      	movs	r3, #1
   1ed58:	4053      	eors	r3, r2
   1ed5a:	b2db      	uxtb	r3, r3
   1ed5c:	2b00      	cmp	r3, #0
   1ed5e:	d001      	beq.n	1ed64 <sd_mmc_spi_card_init+0xc8>
			return false;
   1ed60:	2300      	movs	r3, #0
   1ed62:	e051      	b.n	1ee08 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1ed64:	4b2a      	ldr	r3, [pc, #168]	; (1ee10 <sd_mmc_spi_card_init+0x174>)
   1ed66:	681b      	ldr	r3, [r3, #0]
   1ed68:	7adb      	ldrb	r3, [r3, #11]
   1ed6a:	001a      	movs	r2, r3
   1ed6c:	2301      	movs	r3, #1
   1ed6e:	4013      	ands	r3, r2
   1ed70:	d017      	beq.n	1eda2 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1ed72:	4b2f      	ldr	r3, [pc, #188]	; (1ee30 <sd_mmc_spi_card_init+0x194>)
   1ed74:	4798      	blx	r3
   1ed76:	0003      	movs	r3, r0
   1ed78:	001a      	movs	r2, r3
   1ed7a:	2301      	movs	r3, #1
   1ed7c:	4053      	eors	r3, r2
   1ed7e:	b2db      	uxtb	r3, r3
   1ed80:	2b00      	cmp	r3, #0
   1ed82:	d001      	beq.n	1ed88 <sd_mmc_spi_card_init+0xec>
			return false;
   1ed84:	2300      	movs	r3, #0
   1ed86:	e03f      	b.n	1ee08 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1ed88:	4b2a      	ldr	r3, [pc, #168]	; (1ee34 <sd_mmc_spi_card_init+0x198>)
   1ed8a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1ed8c:	4b2a      	ldr	r3, [pc, #168]	; (1ee38 <sd_mmc_spi_card_init+0x19c>)
   1ed8e:	4798      	blx	r3
   1ed90:	0003      	movs	r3, r0
   1ed92:	001a      	movs	r2, r3
   1ed94:	2301      	movs	r3, #1
   1ed96:	4053      	eors	r3, r2
   1ed98:	b2db      	uxtb	r3, r3
   1ed9a:	2b00      	cmp	r3, #0
   1ed9c:	d001      	beq.n	1eda2 <sd_mmc_spi_card_init+0x106>
			return false;
   1ed9e:	2300      	movs	r3, #0
   1eda0:	e032      	b.n	1ee08 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1eda2:	4b1b      	ldr	r3, [pc, #108]	; (1ee10 <sd_mmc_spi_card_init+0x174>)
   1eda4:	681b      	ldr	r3, [r3, #0]
   1eda6:	7adb      	ldrb	r3, [r3, #11]
   1eda8:	001a      	movs	r2, r3
   1edaa:	2301      	movs	r3, #1
   1edac:	4013      	ands	r3, r2
   1edae:	d016      	beq.n	1edde <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1edb0:	4b17      	ldr	r3, [pc, #92]	; (1ee10 <sd_mmc_spi_card_init+0x174>)
   1edb2:	681b      	ldr	r3, [r3, #0]
   1edb4:	7adb      	ldrb	r3, [r3, #11]
   1edb6:	001a      	movs	r2, r3
   1edb8:	2308      	movs	r3, #8
   1edba:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1edbc:	d10f      	bne.n	1edde <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1edbe:	2380      	movs	r3, #128	; 0x80
   1edc0:	009b      	lsls	r3, r3, #2
   1edc2:	4a1e      	ldr	r2, [pc, #120]	; (1ee3c <sd_mmc_spi_card_init+0x1a0>)
   1edc4:	0019      	movs	r1, r3
   1edc6:	0010      	movs	r0, r2
   1edc8:	4b13      	ldr	r3, [pc, #76]	; (1ee18 <sd_mmc_spi_card_init+0x17c>)
   1edca:	4798      	blx	r3
   1edcc:	0003      	movs	r3, r0
   1edce:	001a      	movs	r2, r3
   1edd0:	2301      	movs	r3, #1
   1edd2:	4053      	eors	r3, r2
   1edd4:	b2db      	uxtb	r3, r3
   1edd6:	2b00      	cmp	r3, #0
   1edd8:	d001      	beq.n	1edde <sd_mmc_spi_card_init+0x142>
			return false;
   1edda:	2300      	movs	r3, #0
   1eddc:	e014      	b.n	1ee08 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1edde:	4b0c      	ldr	r3, [pc, #48]	; (1ee10 <sd_mmc_spi_card_init+0x174>)
   1ede0:	681b      	ldr	r3, [r3, #0]
   1ede2:	7adb      	ldrb	r3, [r3, #11]
   1ede4:	001a      	movs	r2, r3
   1ede6:	2301      	movs	r3, #1
   1ede8:	4013      	ands	r3, r2
   1edea:	d00a      	beq.n	1ee02 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1edec:	4b14      	ldr	r3, [pc, #80]	; (1ee40 <sd_mmc_spi_card_init+0x1a4>)
   1edee:	4798      	blx	r3
   1edf0:	0003      	movs	r3, r0
   1edf2:	001a      	movs	r2, r3
   1edf4:	2301      	movs	r3, #1
   1edf6:	4053      	eors	r3, r2
   1edf8:	b2db      	uxtb	r3, r3
   1edfa:	2b00      	cmp	r3, #0
   1edfc:	d001      	beq.n	1ee02 <sd_mmc_spi_card_init+0x166>
			return false;
   1edfe:	2300      	movs	r3, #0
   1ee00:	e002      	b.n	1ee08 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1ee02:	4b10      	ldr	r3, [pc, #64]	; (1ee44 <sd_mmc_spi_card_init+0x1a8>)
   1ee04:	4798      	blx	r3
	return true;
   1ee06:	2301      	movs	r3, #1
}
   1ee08:	0018      	movs	r0, r3
   1ee0a:	46bd      	mov	sp, r7
   1ee0c:	b002      	add	sp, #8
   1ee0e:	bd80      	pop	{r7, pc}
   1ee10:	20003e34 	.word	0x20003e34
   1ee14:	0001fac9 	.word	0x0001fac9
   1ee18:	0001fb15 	.word	0x0001fb15
   1ee1c:	0001e5f1 	.word	0x0001e5f1
   1ee20:	0001e5e5 	.word	0x0001e5e5
   1ee24:	0001e501 	.word	0x0001e501
   1ee28:	0001ee49 	.word	0x0001ee49
   1ee2c:	0000113b 	.word	0x0000113b
   1ee30:	0001e78d 	.word	0x0001e78d
   1ee34:	0001e92d 	.word	0x0001e92d
   1ee38:	0001ea75 	.word	0x0001ea75
   1ee3c:	00001110 	.word	0x00001110
   1ee40:	0001ea19 	.word	0x0001ea19
   1ee44:	0001ec41 	.word	0x0001ec41

0001ee48 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1ee48:	b580      	push	{r7, lr}
   1ee4a:	b082      	sub	sp, #8
   1ee4c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1ee4e:	2388      	movs	r3, #136	; 0x88
   1ee50:	015b      	lsls	r3, r3, #5
   1ee52:	2100      	movs	r1, #0
   1ee54:	0018      	movs	r0, r3
   1ee56:	4b32      	ldr	r3, [pc, #200]	; (1ef20 <sd_mmc_spi_install_mmc+0xd8>)
   1ee58:	4798      	blx	r3
   1ee5a:	0003      	movs	r3, r0
   1ee5c:	001a      	movs	r2, r3
   1ee5e:	2301      	movs	r3, #1
   1ee60:	4053      	eors	r3, r2
   1ee62:	b2db      	uxtb	r3, r3
   1ee64:	2b00      	cmp	r3, #0
   1ee66:	d001      	beq.n	1ee6c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1ee68:	2300      	movs	r3, #0
   1ee6a:	e055      	b.n	1ef18 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1ee6c:	4b2d      	ldr	r3, [pc, #180]	; (1ef24 <sd_mmc_spi_install_mmc+0xdc>)
   1ee6e:	4798      	blx	r3
   1ee70:	0003      	movs	r3, r0
   1ee72:	001a      	movs	r2, r3
   1ee74:	2301      	movs	r3, #1
   1ee76:	4053      	eors	r3, r2
   1ee78:	b2db      	uxtb	r3, r3
   1ee7a:	2b00      	cmp	r3, #0
   1ee7c:	d001      	beq.n	1ee82 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1ee7e:	2300      	movs	r3, #0
   1ee80:	e04a      	b.n	1ef18 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1ee82:	4b29      	ldr	r3, [pc, #164]	; (1ef28 <sd_mmc_spi_install_mmc+0xe0>)
   1ee84:	2100      	movs	r1, #0
   1ee86:	0018      	movs	r0, r3
   1ee88:	4b25      	ldr	r3, [pc, #148]	; (1ef20 <sd_mmc_spi_install_mmc+0xd8>)
   1ee8a:	4798      	blx	r3
   1ee8c:	0003      	movs	r3, r0
   1ee8e:	001a      	movs	r2, r3
   1ee90:	2301      	movs	r3, #1
   1ee92:	4053      	eors	r3, r2
   1ee94:	b2db      	uxtb	r3, r3
   1ee96:	2b00      	cmp	r3, #0
   1ee98:	d001      	beq.n	1ee9e <sd_mmc_spi_install_mmc+0x56>
		return false;
   1ee9a:	2300      	movs	r3, #0
   1ee9c:	e03c      	b.n	1ef18 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1ee9e:	4b23      	ldr	r3, [pc, #140]	; (1ef2c <sd_mmc_spi_install_mmc+0xe4>)
   1eea0:	4798      	blx	r3
   1eea2:	0003      	movs	r3, r0
   1eea4:	001a      	movs	r2, r3
   1eea6:	2301      	movs	r3, #1
   1eea8:	4053      	eors	r3, r2
   1eeaa:	b2db      	uxtb	r3, r3
   1eeac:	2b00      	cmp	r3, #0
   1eeae:	d001      	beq.n	1eeb4 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1eeb0:	2300      	movs	r3, #0
   1eeb2:	e031      	b.n	1ef18 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1eeb4:	4b1e      	ldr	r3, [pc, #120]	; (1ef30 <sd_mmc_spi_install_mmc+0xe8>)
   1eeb6:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1eeb8:	4b1e      	ldr	r3, [pc, #120]	; (1ef34 <sd_mmc_spi_install_mmc+0xec>)
   1eeba:	681b      	ldr	r3, [r3, #0]
   1eebc:	7b1b      	ldrb	r3, [r3, #12]
   1eebe:	2b3f      	cmp	r3, #63	; 0x3f
   1eec0:	d90c      	bls.n	1eedc <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1eec2:	1dfb      	adds	r3, r7, #7
   1eec4:	0018      	movs	r0, r3
   1eec6:	4b1c      	ldr	r3, [pc, #112]	; (1ef38 <sd_mmc_spi_install_mmc+0xf0>)
   1eec8:	4798      	blx	r3
   1eeca:	0003      	movs	r3, r0
   1eecc:	001a      	movs	r2, r3
   1eece:	2301      	movs	r3, #1
   1eed0:	4053      	eors	r3, r2
   1eed2:	b2db      	uxtb	r3, r3
   1eed4:	2b00      	cmp	r3, #0
   1eed6:	d001      	beq.n	1eedc <sd_mmc_spi_install_mmc+0x94>
			return false;
   1eed8:	2300      	movs	r3, #0
   1eeda:	e01d      	b.n	1ef18 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1eedc:	2380      	movs	r3, #128	; 0x80
   1eede:	009b      	lsls	r3, r3, #2
   1eee0:	4a16      	ldr	r2, [pc, #88]	; (1ef3c <sd_mmc_spi_install_mmc+0xf4>)
   1eee2:	0019      	movs	r1, r3
   1eee4:	0010      	movs	r0, r2
   1eee6:	4b0e      	ldr	r3, [pc, #56]	; (1ef20 <sd_mmc_spi_install_mmc+0xd8>)
   1eee8:	4798      	blx	r3
   1eeea:	0003      	movs	r3, r0
   1eeec:	001a      	movs	r2, r3
   1eeee:	2301      	movs	r3, #1
   1eef0:	4053      	eors	r3, r2
   1eef2:	b2db      	uxtb	r3, r3
   1eef4:	2b00      	cmp	r3, #0
   1eef6:	d001      	beq.n	1eefc <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1eef8:	2300      	movs	r3, #0
   1eefa:	e00d      	b.n	1ef18 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1eefc:	4b10      	ldr	r3, [pc, #64]	; (1ef40 <sd_mmc_spi_install_mmc+0xf8>)
   1eefe:	4798      	blx	r3
   1ef00:	0003      	movs	r3, r0
   1ef02:	001a      	movs	r2, r3
   1ef04:	2301      	movs	r3, #1
   1ef06:	4053      	eors	r3, r2
   1ef08:	b2db      	uxtb	r3, r3
   1ef0a:	2b00      	cmp	r3, #0
   1ef0c:	d001      	beq.n	1ef12 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1ef0e:	2300      	movs	r3, #0
   1ef10:	e002      	b.n	1ef18 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1ef12:	4b0c      	ldr	r3, [pc, #48]	; (1ef44 <sd_mmc_spi_install_mmc+0xfc>)
   1ef14:	4798      	blx	r3
	return true;
   1ef16:	2301      	movs	r3, #1
}
   1ef18:	0018      	movs	r0, r3
   1ef1a:	46bd      	mov	sp, r7
   1ef1c:	b002      	add	sp, #8
   1ef1e:	bd80      	pop	{r7, pc}
   1ef20:	0001fb15 	.word	0x0001fb15
   1ef24:	0001e455 	.word	0x0001e455
   1ef28:	0000113b 	.word	0x0000113b
   1ef2c:	0001e78d 	.word	0x0001e78d
   1ef30:	0001e7fd 	.word	0x0001e7fd
   1ef34:	20003e34 	.word	0x20003e34
   1ef38:	0001e661 	.word	0x0001e661
   1ef3c:	00001110 	.word	0x00001110
   1ef40:	0001ea19 	.word	0x0001ea19
   1ef44:	0001ec41 	.word	0x0001ec41

0001ef48 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1ef48:	b590      	push	{r4, r7, lr}
   1ef4a:	b085      	sub	sp, #20
   1ef4c:	af00      	add	r7, sp, #0
   1ef4e:	0002      	movs	r2, r0
   1ef50:	1dfb      	adds	r3, r7, #7
   1ef52:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ef54:	230f      	movs	r3, #15
   1ef56:	18fc      	adds	r4, r7, r3
   1ef58:	1dfb      	adds	r3, r7, #7
   1ef5a:	781b      	ldrb	r3, [r3, #0]
   1ef5c:	0018      	movs	r0, r3
   1ef5e:	4b13      	ldr	r3, [pc, #76]	; (1efac <sd_mmc_check+0x64>)
   1ef60:	4798      	blx	r3
   1ef62:	0003      	movs	r3, r0
   1ef64:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1ef66:	230f      	movs	r3, #15
   1ef68:	18fb      	adds	r3, r7, r3
   1ef6a:	781b      	ldrb	r3, [r3, #0]
   1ef6c:	2b01      	cmp	r3, #1
   1ef6e:	d005      	beq.n	1ef7c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1ef70:	4b0f      	ldr	r3, [pc, #60]	; (1efb0 <sd_mmc_check+0x68>)
   1ef72:	4798      	blx	r3
		return sd_mmc_err;
   1ef74:	230f      	movs	r3, #15
   1ef76:	18fb      	adds	r3, r7, r3
   1ef78:	781b      	ldrb	r3, [r3, #0]
   1ef7a:	e012      	b.n	1efa2 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1ef7c:	4b0d      	ldr	r3, [pc, #52]	; (1efb4 <sd_mmc_check+0x6c>)
   1ef7e:	4798      	blx	r3
   1ef80:	1e03      	subs	r3, r0, #0
   1ef82:	d007      	beq.n	1ef94 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1ef84:	4b0c      	ldr	r3, [pc, #48]	; (1efb8 <sd_mmc_check+0x70>)
   1ef86:	681b      	ldr	r3, [r3, #0]
   1ef88:	2200      	movs	r2, #0
   1ef8a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1ef8c:	4b08      	ldr	r3, [pc, #32]	; (1efb0 <sd_mmc_check+0x68>)
   1ef8e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1ef90:	2301      	movs	r3, #1
   1ef92:	e006      	b.n	1efa2 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1ef94:	4b08      	ldr	r3, [pc, #32]	; (1efb8 <sd_mmc_check+0x70>)
   1ef96:	681b      	ldr	r3, [r3, #0]
   1ef98:	2203      	movs	r2, #3
   1ef9a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1ef9c:	4b04      	ldr	r3, [pc, #16]	; (1efb0 <sd_mmc_check+0x68>)
   1ef9e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1efa0:	2303      	movs	r3, #3
}
   1efa2:	0018      	movs	r0, r3
   1efa4:	46bd      	mov	sp, r7
   1efa6:	b005      	add	sp, #20
   1efa8:	bd90      	pop	{r4, r7, pc}
   1efaa:	46c0      	nop			; (mov r8, r8)
   1efac:	0001eb7d 	.word	0x0001eb7d
   1efb0:	0001ec79 	.word	0x0001ec79
   1efb4:	0001ec9d 	.word	0x0001ec9d
   1efb8:	20003e34 	.word	0x20003e34

0001efbc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1efbc:	b580      	push	{r7, lr}
   1efbe:	b082      	sub	sp, #8
   1efc0:	af00      	add	r7, sp, #0
   1efc2:	0002      	movs	r2, r0
   1efc4:	1dfb      	adds	r3, r7, #7
   1efc6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1efc8:	1dfb      	adds	r3, r7, #7
   1efca:	781b      	ldrb	r3, [r3, #0]
   1efcc:	0018      	movs	r0, r3
   1efce:	4b07      	ldr	r3, [pc, #28]	; (1efec <sd_mmc_get_type+0x30>)
   1efd0:	4798      	blx	r3
   1efd2:	1e03      	subs	r3, r0, #0
   1efd4:	d001      	beq.n	1efda <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1efd6:	2300      	movs	r3, #0
   1efd8:	e004      	b.n	1efe4 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1efda:	4b05      	ldr	r3, [pc, #20]	; (1eff0 <sd_mmc_get_type+0x34>)
   1efdc:	4798      	blx	r3
	return sd_mmc_card->type;
   1efde:	4b05      	ldr	r3, [pc, #20]	; (1eff4 <sd_mmc_get_type+0x38>)
   1efe0:	681b      	ldr	r3, [r3, #0]
   1efe2:	7adb      	ldrb	r3, [r3, #11]
}
   1efe4:	0018      	movs	r0, r3
   1efe6:	46bd      	mov	sp, r7
   1efe8:	b002      	add	sp, #8
   1efea:	bd80      	pop	{r7, pc}
   1efec:	0001eb7d 	.word	0x0001eb7d
   1eff0:	0001ec79 	.word	0x0001ec79
   1eff4:	20003e34 	.word	0x20003e34

0001eff8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1eff8:	b580      	push	{r7, lr}
   1effa:	b082      	sub	sp, #8
   1effc:	af00      	add	r7, sp, #0
   1effe:	0002      	movs	r2, r0
   1f000:	1dfb      	adds	r3, r7, #7
   1f002:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f004:	1dfb      	adds	r3, r7, #7
   1f006:	781b      	ldrb	r3, [r3, #0]
   1f008:	0018      	movs	r0, r3
   1f00a:	4b07      	ldr	r3, [pc, #28]	; (1f028 <sd_mmc_get_capacity+0x30>)
   1f00c:	4798      	blx	r3
   1f00e:	1e03      	subs	r3, r0, #0
   1f010:	d001      	beq.n	1f016 <sd_mmc_get_capacity+0x1e>
		return 0;
   1f012:	2300      	movs	r3, #0
   1f014:	e004      	b.n	1f020 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1f016:	4b05      	ldr	r3, [pc, #20]	; (1f02c <sd_mmc_get_capacity+0x34>)
   1f018:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1f01a:	4b05      	ldr	r3, [pc, #20]	; (1f030 <sd_mmc_get_capacity+0x38>)
   1f01c:	681b      	ldr	r3, [r3, #0]
   1f01e:	685b      	ldr	r3, [r3, #4]
}
   1f020:	0018      	movs	r0, r3
   1f022:	46bd      	mov	sp, r7
   1f024:	b002      	add	sp, #8
   1f026:	bd80      	pop	{r7, pc}
   1f028:	0001eb7d 	.word	0x0001eb7d
   1f02c:	0001ec79 	.word	0x0001ec79
   1f030:	20003e34 	.word	0x20003e34

0001f034 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1f034:	b580      	push	{r7, lr}
   1f036:	b082      	sub	sp, #8
   1f038:	af00      	add	r7, sp, #0
   1f03a:	0002      	movs	r2, r0
   1f03c:	1dfb      	adds	r3, r7, #7
   1f03e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1f040:	2300      	movs	r3, #0
}
   1f042:	0018      	movs	r0, r3
   1f044:	46bd      	mov	sp, r7
   1f046:	b002      	add	sp, #8
   1f048:	bd80      	pop	{r7, pc}
	...

0001f04c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1f04c:	b590      	push	{r4, r7, lr}
   1f04e:	b089      	sub	sp, #36	; 0x24
   1f050:	af02      	add	r7, sp, #8
   1f052:	6039      	str	r1, [r7, #0]
   1f054:	0011      	movs	r1, r2
   1f056:	1dfb      	adds	r3, r7, #7
   1f058:	1c02      	adds	r2, r0, #0
   1f05a:	701a      	strb	r2, [r3, #0]
   1f05c:	1d3b      	adds	r3, r7, #4
   1f05e:	1c0a      	adds	r2, r1, #0
   1f060:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f062:	230f      	movs	r3, #15
   1f064:	18fc      	adds	r4, r7, r3
   1f066:	1dfb      	adds	r3, r7, #7
   1f068:	781b      	ldrb	r3, [r3, #0]
   1f06a:	0018      	movs	r0, r3
   1f06c:	4b29      	ldr	r3, [pc, #164]	; (1f114 <sd_mmc_init_read_blocks+0xc8>)
   1f06e:	4798      	blx	r3
   1f070:	0003      	movs	r3, r0
   1f072:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1f074:	230f      	movs	r3, #15
   1f076:	18fb      	adds	r3, r7, r3
   1f078:	781b      	ldrb	r3, [r3, #0]
   1f07a:	2b00      	cmp	r3, #0
   1f07c:	d003      	beq.n	1f086 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1f07e:	230f      	movs	r3, #15
   1f080:	18fb      	adds	r3, r7, r3
   1f082:	781b      	ldrb	r3, [r3, #0]
   1f084:	e041      	b.n	1f10a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1f086:	4b24      	ldr	r3, [pc, #144]	; (1f118 <sd_mmc_init_read_blocks+0xcc>)
   1f088:	4798      	blx	r3
   1f08a:	0003      	movs	r3, r0
   1f08c:	001a      	movs	r2, r3
   1f08e:	2301      	movs	r3, #1
   1f090:	4053      	eors	r3, r2
   1f092:	b2db      	uxtb	r3, r3
   1f094:	2b00      	cmp	r3, #0
   1f096:	d003      	beq.n	1f0a0 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1f098:	4b20      	ldr	r3, [pc, #128]	; (1f11c <sd_mmc_init_read_blocks+0xd0>)
   1f09a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f09c:	2305      	movs	r3, #5
   1f09e:	e034      	b.n	1f10a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1f0a0:	1d3b      	adds	r3, r7, #4
   1f0a2:	881b      	ldrh	r3, [r3, #0]
   1f0a4:	2b01      	cmp	r3, #1
   1f0a6:	d902      	bls.n	1f0ae <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1f0a8:	4b1d      	ldr	r3, [pc, #116]	; (1f120 <sd_mmc_init_read_blocks+0xd4>)
   1f0aa:	617b      	str	r3, [r7, #20]
   1f0ac:	e001      	b.n	1f0b2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1f0ae:	4b1d      	ldr	r3, [pc, #116]	; (1f124 <sd_mmc_init_read_blocks+0xd8>)
   1f0b0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1f0b2:	4b1d      	ldr	r3, [pc, #116]	; (1f128 <sd_mmc_init_read_blocks+0xdc>)
   1f0b4:	681b      	ldr	r3, [r3, #0]
   1f0b6:	7adb      	ldrb	r3, [r3, #11]
   1f0b8:	001a      	movs	r2, r3
   1f0ba:	2308      	movs	r3, #8
   1f0bc:	4013      	ands	r3, r2
   1f0be:	d002      	beq.n	1f0c6 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1f0c0:	683b      	ldr	r3, [r7, #0]
   1f0c2:	613b      	str	r3, [r7, #16]
   1f0c4:	e002      	b.n	1f0cc <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1f0c6:	683b      	ldr	r3, [r7, #0]
   1f0c8:	025b      	lsls	r3, r3, #9
   1f0ca:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1f0cc:	1d3b      	adds	r3, r7, #4
   1f0ce:	881c      	ldrh	r4, [r3, #0]
   1f0d0:	2380      	movs	r3, #128	; 0x80
   1f0d2:	009a      	lsls	r2, r3, #2
   1f0d4:	6939      	ldr	r1, [r7, #16]
   1f0d6:	6978      	ldr	r0, [r7, #20]
   1f0d8:	2301      	movs	r3, #1
   1f0da:	9300      	str	r3, [sp, #0]
   1f0dc:	0023      	movs	r3, r4
   1f0de:	4c13      	ldr	r4, [pc, #76]	; (1f12c <sd_mmc_init_read_blocks+0xe0>)
   1f0e0:	47a0      	blx	r4
   1f0e2:	0003      	movs	r3, r0
   1f0e4:	001a      	movs	r2, r3
   1f0e6:	2301      	movs	r3, #1
   1f0e8:	4053      	eors	r3, r2
   1f0ea:	b2db      	uxtb	r3, r3
   1f0ec:	2b00      	cmp	r3, #0
   1f0ee:	d003      	beq.n	1f0f8 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1f0f0:	4b0a      	ldr	r3, [pc, #40]	; (1f11c <sd_mmc_init_read_blocks+0xd0>)
   1f0f2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f0f4:	2305      	movs	r3, #5
   1f0f6:	e008      	b.n	1f10a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1f0f8:	4b0d      	ldr	r3, [pc, #52]	; (1f130 <sd_mmc_init_read_blocks+0xe4>)
   1f0fa:	1d3a      	adds	r2, r7, #4
   1f0fc:	8812      	ldrh	r2, [r2, #0]
   1f0fe:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1f100:	4b0c      	ldr	r3, [pc, #48]	; (1f134 <sd_mmc_init_read_blocks+0xe8>)
   1f102:	1d3a      	adds	r2, r7, #4
   1f104:	8812      	ldrh	r2, [r2, #0]
   1f106:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f108:	2300      	movs	r3, #0
}
   1f10a:	0018      	movs	r0, r3
   1f10c:	46bd      	mov	sp, r7
   1f10e:	b007      	add	sp, #28
   1f110:	bd90      	pop	{r4, r7, pc}
   1f112:	46c0      	nop			; (mov r8, r8)
   1f114:	0001eb7d 	.word	0x0001eb7d
   1f118:	0001ea19 	.word	0x0001ea19
   1f11c:	0001ec79 	.word	0x0001ec79
   1f120:	00101112 	.word	0x00101112
   1f124:	00081111 	.word	0x00081111
   1f128:	20003e34 	.word	0x20003e34
   1f12c:	0001fb3d 	.word	0x0001fb3d
   1f130:	20003e3a 	.word	0x20003e3a
   1f134:	20003e38 	.word	0x20003e38

0001f138 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1f138:	b580      	push	{r7, lr}
   1f13a:	b082      	sub	sp, #8
   1f13c:	af00      	add	r7, sp, #0
   1f13e:	6078      	str	r0, [r7, #4]
   1f140:	000a      	movs	r2, r1
   1f142:	1cbb      	adds	r3, r7, #2
   1f144:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1f146:	1cbb      	adds	r3, r7, #2
   1f148:	881a      	ldrh	r2, [r3, #0]
   1f14a:	687b      	ldr	r3, [r7, #4]
   1f14c:	0011      	movs	r1, r2
   1f14e:	0018      	movs	r0, r3
   1f150:	4b0d      	ldr	r3, [pc, #52]	; (1f188 <sd_mmc_start_read_blocks+0x50>)
   1f152:	4798      	blx	r3
   1f154:	0003      	movs	r3, r0
   1f156:	001a      	movs	r2, r3
   1f158:	2301      	movs	r3, #1
   1f15a:	4053      	eors	r3, r2
   1f15c:	b2db      	uxtb	r3, r3
   1f15e:	2b00      	cmp	r3, #0
   1f160:	d004      	beq.n	1f16c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1f162:	4b0a      	ldr	r3, [pc, #40]	; (1f18c <sd_mmc_start_read_blocks+0x54>)
   1f164:	2200      	movs	r2, #0
   1f166:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1f168:	2305      	movs	r3, #5
   1f16a:	e008      	b.n	1f17e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1f16c:	4b07      	ldr	r3, [pc, #28]	; (1f18c <sd_mmc_start_read_blocks+0x54>)
   1f16e:	881a      	ldrh	r2, [r3, #0]
   1f170:	1cbb      	adds	r3, r7, #2
   1f172:	881b      	ldrh	r3, [r3, #0]
   1f174:	1ad3      	subs	r3, r2, r3
   1f176:	b29a      	uxth	r2, r3
   1f178:	4b04      	ldr	r3, [pc, #16]	; (1f18c <sd_mmc_start_read_blocks+0x54>)
   1f17a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f17c:	2300      	movs	r3, #0
}
   1f17e:	0018      	movs	r0, r3
   1f180:	46bd      	mov	sp, r7
   1f182:	b002      	add	sp, #8
   1f184:	bd80      	pop	{r7, pc}
   1f186:	46c0      	nop			; (mov r8, r8)
   1f188:	0001fe0d 	.word	0x0001fe0d
   1f18c:	20003e3a 	.word	0x20003e3a

0001f190 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1f190:	b580      	push	{r7, lr}
   1f192:	b082      	sub	sp, #8
   1f194:	af00      	add	r7, sp, #0
   1f196:	0002      	movs	r2, r0
   1f198:	1dfb      	adds	r3, r7, #7
   1f19a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1f19c:	4b1c      	ldr	r3, [pc, #112]	; (1f210 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1f19e:	4798      	blx	r3
   1f1a0:	0003      	movs	r3, r0
   1f1a2:	001a      	movs	r2, r3
   1f1a4:	2301      	movs	r3, #1
   1f1a6:	4053      	eors	r3, r2
   1f1a8:	b2db      	uxtb	r3, r3
   1f1aa:	2b00      	cmp	r3, #0
   1f1ac:	d001      	beq.n	1f1b2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1f1ae:	2305      	movs	r3, #5
   1f1b0:	e029      	b.n	1f206 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1f1b2:	1dfb      	adds	r3, r7, #7
   1f1b4:	781b      	ldrb	r3, [r3, #0]
   1f1b6:	2b00      	cmp	r3, #0
   1f1b8:	d003      	beq.n	1f1c2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1f1ba:	4b16      	ldr	r3, [pc, #88]	; (1f214 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1f1bc:	2200      	movs	r2, #0
   1f1be:	801a      	strh	r2, [r3, #0]
   1f1c0:	e005      	b.n	1f1ce <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1f1c2:	4b14      	ldr	r3, [pc, #80]	; (1f214 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1f1c4:	881b      	ldrh	r3, [r3, #0]
   1f1c6:	2b00      	cmp	r3, #0
   1f1c8:	d001      	beq.n	1f1ce <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1f1ca:	2300      	movs	r3, #0
   1f1cc:	e01b      	b.n	1f206 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1f1ce:	4b12      	ldr	r3, [pc, #72]	; (1f218 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1f1d0:	881b      	ldrh	r3, [r3, #0]
   1f1d2:	2b01      	cmp	r3, #1
   1f1d4:	d103      	bne.n	1f1de <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1f1d6:	4b11      	ldr	r3, [pc, #68]	; (1f21c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1f1d8:	4798      	blx	r3
		return SD_MMC_OK;
   1f1da:	2300      	movs	r3, #0
   1f1dc:	e013      	b.n	1f206 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1f1de:	4b10      	ldr	r3, [pc, #64]	; (1f220 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1f1e0:	2100      	movs	r1, #0
   1f1e2:	0018      	movs	r0, r3
   1f1e4:	4b0f      	ldr	r3, [pc, #60]	; (1f224 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1f1e6:	4798      	blx	r3
   1f1e8:	0003      	movs	r3, r0
   1f1ea:	001a      	movs	r2, r3
   1f1ec:	2301      	movs	r3, #1
   1f1ee:	4053      	eors	r3, r2
   1f1f0:	b2db      	uxtb	r3, r3
   1f1f2:	2b00      	cmp	r3, #0
   1f1f4:	d004      	beq.n	1f200 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1f1f6:	4b0a      	ldr	r3, [pc, #40]	; (1f220 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1f1f8:	2100      	movs	r1, #0
   1f1fa:	0018      	movs	r0, r3
   1f1fc:	4b09      	ldr	r3, [pc, #36]	; (1f224 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1f1fe:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1f200:	4b06      	ldr	r3, [pc, #24]	; (1f21c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1f202:	4798      	blx	r3
	return SD_MMC_OK;
   1f204:	2300      	movs	r3, #0
}
   1f206:	0018      	movs	r0, r3
   1f208:	46bd      	mov	sp, r7
   1f20a:	b002      	add	sp, #8
   1f20c:	bd80      	pop	{r7, pc}
   1f20e:	46c0      	nop			; (mov r8, r8)
   1f210:	0001feb1 	.word	0x0001feb1
   1f214:	20003e3a 	.word	0x20003e3a
   1f218:	20003e38 	.word	0x20003e38
   1f21c:	0001ec79 	.word	0x0001ec79
   1f220:	0000310c 	.word	0x0000310c
   1f224:	0001fb15 	.word	0x0001fb15

0001f228 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1f228:	b590      	push	{r4, r7, lr}
   1f22a:	b089      	sub	sp, #36	; 0x24
   1f22c:	af02      	add	r7, sp, #8
   1f22e:	6039      	str	r1, [r7, #0]
   1f230:	0011      	movs	r1, r2
   1f232:	1dfb      	adds	r3, r7, #7
   1f234:	1c02      	adds	r2, r0, #0
   1f236:	701a      	strb	r2, [r3, #0]
   1f238:	1d3b      	adds	r3, r7, #4
   1f23a:	1c0a      	adds	r2, r1, #0
   1f23c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f23e:	230f      	movs	r3, #15
   1f240:	18fc      	adds	r4, r7, r3
   1f242:	1dfb      	adds	r3, r7, #7
   1f244:	781b      	ldrb	r3, [r3, #0]
   1f246:	0018      	movs	r0, r3
   1f248:	4b28      	ldr	r3, [pc, #160]	; (1f2ec <sd_mmc_init_write_blocks+0xc4>)
   1f24a:	4798      	blx	r3
   1f24c:	0003      	movs	r3, r0
   1f24e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1f250:	230f      	movs	r3, #15
   1f252:	18fb      	adds	r3, r7, r3
   1f254:	781b      	ldrb	r3, [r3, #0]
   1f256:	2b00      	cmp	r3, #0
   1f258:	d003      	beq.n	1f262 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1f25a:	230f      	movs	r3, #15
   1f25c:	18fb      	adds	r3, r7, r3
   1f25e:	781b      	ldrb	r3, [r3, #0]
   1f260:	e03f      	b.n	1f2e2 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1f262:	1dfb      	adds	r3, r7, #7
   1f264:	781b      	ldrb	r3, [r3, #0]
   1f266:	0018      	movs	r0, r3
   1f268:	4b21      	ldr	r3, [pc, #132]	; (1f2f0 <sd_mmc_init_write_blocks+0xc8>)
   1f26a:	4798      	blx	r3
   1f26c:	1e03      	subs	r3, r0, #0
   1f26e:	d003      	beq.n	1f278 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1f270:	4b20      	ldr	r3, [pc, #128]	; (1f2f4 <sd_mmc_init_write_blocks+0xcc>)
   1f272:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1f274:	2307      	movs	r3, #7
   1f276:	e034      	b.n	1f2e2 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1f278:	1d3b      	adds	r3, r7, #4
   1f27a:	881b      	ldrh	r3, [r3, #0]
   1f27c:	2b01      	cmp	r3, #1
   1f27e:	d902      	bls.n	1f286 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1f280:	4b1d      	ldr	r3, [pc, #116]	; (1f2f8 <sd_mmc_init_write_blocks+0xd0>)
   1f282:	617b      	str	r3, [r7, #20]
   1f284:	e001      	b.n	1f28a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1f286:	4b1d      	ldr	r3, [pc, #116]	; (1f2fc <sd_mmc_init_write_blocks+0xd4>)
   1f288:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1f28a:	4b1d      	ldr	r3, [pc, #116]	; (1f300 <sd_mmc_init_write_blocks+0xd8>)
   1f28c:	681b      	ldr	r3, [r3, #0]
   1f28e:	7adb      	ldrb	r3, [r3, #11]
   1f290:	001a      	movs	r2, r3
   1f292:	2308      	movs	r3, #8
   1f294:	4013      	ands	r3, r2
   1f296:	d002      	beq.n	1f29e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1f298:	683b      	ldr	r3, [r7, #0]
   1f29a:	613b      	str	r3, [r7, #16]
   1f29c:	e002      	b.n	1f2a4 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1f29e:	683b      	ldr	r3, [r7, #0]
   1f2a0:	025b      	lsls	r3, r3, #9
   1f2a2:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1f2a4:	1d3b      	adds	r3, r7, #4
   1f2a6:	881c      	ldrh	r4, [r3, #0]
   1f2a8:	2380      	movs	r3, #128	; 0x80
   1f2aa:	009a      	lsls	r2, r3, #2
   1f2ac:	6939      	ldr	r1, [r7, #16]
   1f2ae:	6978      	ldr	r0, [r7, #20]
   1f2b0:	2301      	movs	r3, #1
   1f2b2:	9300      	str	r3, [sp, #0]
   1f2b4:	0023      	movs	r3, r4
   1f2b6:	4c13      	ldr	r4, [pc, #76]	; (1f304 <sd_mmc_init_write_blocks+0xdc>)
   1f2b8:	47a0      	blx	r4
   1f2ba:	0003      	movs	r3, r0
   1f2bc:	001a      	movs	r2, r3
   1f2be:	2301      	movs	r3, #1
   1f2c0:	4053      	eors	r3, r2
   1f2c2:	b2db      	uxtb	r3, r3
   1f2c4:	2b00      	cmp	r3, #0
   1f2c6:	d003      	beq.n	1f2d0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1f2c8:	4b0a      	ldr	r3, [pc, #40]	; (1f2f4 <sd_mmc_init_write_blocks+0xcc>)
   1f2ca:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f2cc:	2305      	movs	r3, #5
   1f2ce:	e008      	b.n	1f2e2 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1f2d0:	4b0d      	ldr	r3, [pc, #52]	; (1f308 <sd_mmc_init_write_blocks+0xe0>)
   1f2d2:	1d3a      	adds	r2, r7, #4
   1f2d4:	8812      	ldrh	r2, [r2, #0]
   1f2d6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1f2d8:	4b0c      	ldr	r3, [pc, #48]	; (1f30c <sd_mmc_init_write_blocks+0xe4>)
   1f2da:	1d3a      	adds	r2, r7, #4
   1f2dc:	8812      	ldrh	r2, [r2, #0]
   1f2de:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f2e0:	2300      	movs	r3, #0
}
   1f2e2:	0018      	movs	r0, r3
   1f2e4:	46bd      	mov	sp, r7
   1f2e6:	b007      	add	sp, #28
   1f2e8:	bd90      	pop	{r4, r7, pc}
   1f2ea:	46c0      	nop			; (mov r8, r8)
   1f2ec:	0001eb7d 	.word	0x0001eb7d
   1f2f0:	0001f035 	.word	0x0001f035
   1f2f4:	0001ec79 	.word	0x0001ec79
   1f2f8:	00109119 	.word	0x00109119
   1f2fc:	00089118 	.word	0x00089118
   1f300:	20003e34 	.word	0x20003e34
   1f304:	0001fb3d 	.word	0x0001fb3d
   1f308:	20003e3a 	.word	0x20003e3a
   1f30c:	20003e38 	.word	0x20003e38

0001f310 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1f310:	b580      	push	{r7, lr}
   1f312:	b082      	sub	sp, #8
   1f314:	af00      	add	r7, sp, #0
   1f316:	6078      	str	r0, [r7, #4]
   1f318:	000a      	movs	r2, r1
   1f31a:	1cbb      	adds	r3, r7, #2
   1f31c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1f31e:	1cbb      	adds	r3, r7, #2
   1f320:	881a      	ldrh	r2, [r3, #0]
   1f322:	687b      	ldr	r3, [r7, #4]
   1f324:	0011      	movs	r1, r2
   1f326:	0018      	movs	r0, r3
   1f328:	4b0d      	ldr	r3, [pc, #52]	; (1f360 <sd_mmc_start_write_blocks+0x50>)
   1f32a:	4798      	blx	r3
   1f32c:	0003      	movs	r3, r0
   1f32e:	001a      	movs	r2, r3
   1f330:	2301      	movs	r3, #1
   1f332:	4053      	eors	r3, r2
   1f334:	b2db      	uxtb	r3, r3
   1f336:	2b00      	cmp	r3, #0
   1f338:	d004      	beq.n	1f344 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1f33a:	4b0a      	ldr	r3, [pc, #40]	; (1f364 <sd_mmc_start_write_blocks+0x54>)
   1f33c:	2200      	movs	r2, #0
   1f33e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1f340:	2305      	movs	r3, #5
   1f342:	e008      	b.n	1f356 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1f344:	4b07      	ldr	r3, [pc, #28]	; (1f364 <sd_mmc_start_write_blocks+0x54>)
   1f346:	881a      	ldrh	r2, [r3, #0]
   1f348:	1cbb      	adds	r3, r7, #2
   1f34a:	881b      	ldrh	r3, [r3, #0]
   1f34c:	1ad3      	subs	r3, r2, r3
   1f34e:	b29a      	uxth	r2, r3
   1f350:	4b04      	ldr	r3, [pc, #16]	; (1f364 <sd_mmc_start_write_blocks+0x54>)
   1f352:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f354:	2300      	movs	r3, #0
}
   1f356:	0018      	movs	r0, r3
   1f358:	46bd      	mov	sp, r7
   1f35a:	b002      	add	sp, #8
   1f35c:	bd80      	pop	{r7, pc}
   1f35e:	46c0      	nop			; (mov r8, r8)
   1f360:	0001febd 	.word	0x0001febd
   1f364:	20003e3a 	.word	0x20003e3a

0001f368 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1f368:	b580      	push	{r7, lr}
   1f36a:	b082      	sub	sp, #8
   1f36c:	af00      	add	r7, sp, #0
   1f36e:	0002      	movs	r2, r0
   1f370:	1dfb      	adds	r3, r7, #7
   1f372:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1f374:	4b13      	ldr	r3, [pc, #76]	; (1f3c4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1f376:	4798      	blx	r3
   1f378:	0003      	movs	r3, r0
   1f37a:	001a      	movs	r2, r3
   1f37c:	2301      	movs	r3, #1
   1f37e:	4053      	eors	r3, r2
   1f380:	b2db      	uxtb	r3, r3
   1f382:	2b00      	cmp	r3, #0
   1f384:	d001      	beq.n	1f38a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1f386:	2305      	movs	r3, #5
   1f388:	e018      	b.n	1f3bc <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1f38a:	1dfb      	adds	r3, r7, #7
   1f38c:	781b      	ldrb	r3, [r3, #0]
   1f38e:	2b00      	cmp	r3, #0
   1f390:	d003      	beq.n	1f39a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1f392:	4b0d      	ldr	r3, [pc, #52]	; (1f3c8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1f394:	2200      	movs	r2, #0
   1f396:	801a      	strh	r2, [r3, #0]
   1f398:	e005      	b.n	1f3a6 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1f39a:	4b0b      	ldr	r3, [pc, #44]	; (1f3c8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1f39c:	881b      	ldrh	r3, [r3, #0]
   1f39e:	2b00      	cmp	r3, #0
   1f3a0:	d001      	beq.n	1f3a6 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1f3a2:	2300      	movs	r3, #0
   1f3a4:	e00a      	b.n	1f3bc <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1f3a6:	4b09      	ldr	r3, [pc, #36]	; (1f3cc <sd_mmc_wait_end_of_write_blocks+0x64>)
   1f3a8:	881b      	ldrh	r3, [r3, #0]
   1f3aa:	2b01      	cmp	r3, #1
   1f3ac:	d103      	bne.n	1f3b6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1f3ae:	4b08      	ldr	r3, [pc, #32]	; (1f3d0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1f3b0:	4798      	blx	r3
		return SD_MMC_OK;
   1f3b2:	2300      	movs	r3, #0
   1f3b4:	e002      	b.n	1f3bc <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1f3b6:	4b06      	ldr	r3, [pc, #24]	; (1f3d0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1f3b8:	4798      	blx	r3
	return SD_MMC_OK;
   1f3ba:	2300      	movs	r3, #0
}
   1f3bc:	0018      	movs	r0, r3
   1f3be:	46bd      	mov	sp, r7
   1f3c0:	b002      	add	sp, #8
   1f3c2:	bd80      	pop	{r7, pc}
   1f3c4:	0001ff7d 	.word	0x0001ff7d
   1f3c8:	20003e3a 	.word	0x20003e3a
   1f3cc:	20003e38 	.word	0x20003e38
   1f3d0:	0001ec79 	.word	0x0001ec79

0001f3d4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1f3d4:	b580      	push	{r7, lr}
   1f3d6:	b082      	sub	sp, #8
   1f3d8:	af00      	add	r7, sp, #0
   1f3da:	0002      	movs	r2, r0
   1f3dc:	1dfb      	adds	r3, r7, #7
   1f3de:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1f3e0:	1dfb      	adds	r3, r7, #7
   1f3e2:	781b      	ldrb	r3, [r3, #0]
   1f3e4:	0018      	movs	r0, r3
   1f3e6:	4b16      	ldr	r3, [pc, #88]	; (1f440 <sd_mmc_test_unit_ready+0x6c>)
   1f3e8:	4798      	blx	r3
   1f3ea:	0003      	movs	r3, r0
   1f3ec:	2b01      	cmp	r3, #1
   1f3ee:	d019      	beq.n	1f424 <sd_mmc_test_unit_ready+0x50>
   1f3f0:	2b02      	cmp	r3, #2
   1f3f2:	d019      	beq.n	1f428 <sd_mmc_test_unit_ready+0x54>
   1f3f4:	2b00      	cmp	r3, #0
   1f3f6:	d11e      	bne.n	1f436 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1f3f8:	1dfb      	adds	r3, r7, #7
   1f3fa:	781b      	ldrb	r3, [r3, #0]
   1f3fc:	4a11      	ldr	r2, [pc, #68]	; (1f444 <sd_mmc_test_unit_ready+0x70>)
   1f3fe:	5cd3      	ldrb	r3, [r2, r3]
   1f400:	2b00      	cmp	r3, #0
   1f402:	d001      	beq.n	1f408 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1f404:	2302      	movs	r3, #2
   1f406:	e017      	b.n	1f438 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1f408:	1dfb      	adds	r3, r7, #7
   1f40a:	781b      	ldrb	r3, [r3, #0]
   1f40c:	0018      	movs	r0, r3
   1f40e:	4b0e      	ldr	r3, [pc, #56]	; (1f448 <sd_mmc_test_unit_ready+0x74>)
   1f410:	4798      	blx	r3
   1f412:	0003      	movs	r3, r0
   1f414:	001a      	movs	r2, r3
   1f416:	2303      	movs	r3, #3
   1f418:	4013      	ands	r3, r2
   1f41a:	d001      	beq.n	1f420 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1f41c:	2300      	movs	r3, #0
   1f41e:	e00b      	b.n	1f438 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1f420:	2302      	movs	r3, #2
   1f422:	e009      	b.n	1f438 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1f424:	2303      	movs	r3, #3
   1f426:	e007      	b.n	1f438 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1f428:	1dfb      	adds	r3, r7, #7
   1f42a:	781b      	ldrb	r3, [r3, #0]
   1f42c:	4a05      	ldr	r2, [pc, #20]	; (1f444 <sd_mmc_test_unit_ready+0x70>)
   1f42e:	2100      	movs	r1, #0
   1f430:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1f432:	2302      	movs	r3, #2
   1f434:	e000      	b.n	1f438 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1f436:	2301      	movs	r3, #1
	}
}
   1f438:	0018      	movs	r0, r3
   1f43a:	46bd      	mov	sp, r7
   1f43c:	b002      	add	sp, #8
   1f43e:	bd80      	pop	{r7, pc}
   1f440:	0001ef49 	.word	0x0001ef49
   1f444:	20003e3c 	.word	0x20003e3c
   1f448:	0001efbd 	.word	0x0001efbd

0001f44c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1f44c:	b580      	push	{r7, lr}
   1f44e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1f450:	2000      	movs	r0, #0
   1f452:	4b03      	ldr	r3, [pc, #12]	; (1f460 <sd_mmc_test_unit_ready_0+0x14>)
   1f454:	4798      	blx	r3
   1f456:	0003      	movs	r3, r0
}
   1f458:	0018      	movs	r0, r3
   1f45a:	46bd      	mov	sp, r7
   1f45c:	bd80      	pop	{r7, pc}
   1f45e:	46c0      	nop			; (mov r8, r8)
   1f460:	0001f3d5 	.word	0x0001f3d5

0001f464 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1f464:	b580      	push	{r7, lr}
   1f466:	b082      	sub	sp, #8
   1f468:	af00      	add	r7, sp, #0
   1f46a:	0002      	movs	r2, r0
   1f46c:	6039      	str	r1, [r7, #0]
   1f46e:	1dfb      	adds	r3, r7, #7
   1f470:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1f472:	1dfb      	adds	r3, r7, #7
   1f474:	781b      	ldrb	r3, [r3, #0]
   1f476:	0018      	movs	r0, r3
   1f478:	4b08      	ldr	r3, [pc, #32]	; (1f49c <sd_mmc_read_capacity+0x38>)
   1f47a:	4798      	blx	r3
   1f47c:	0003      	movs	r3, r0
   1f47e:	005b      	lsls	r3, r3, #1
   1f480:	1e5a      	subs	r2, r3, #1
   1f482:	683b      	ldr	r3, [r7, #0]
   1f484:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1f486:	1dfb      	adds	r3, r7, #7
   1f488:	781b      	ldrb	r3, [r3, #0]
   1f48a:	0018      	movs	r0, r3
   1f48c:	4b04      	ldr	r3, [pc, #16]	; (1f4a0 <sd_mmc_read_capacity+0x3c>)
   1f48e:	4798      	blx	r3
   1f490:	0003      	movs	r3, r0
}
   1f492:	0018      	movs	r0, r3
   1f494:	46bd      	mov	sp, r7
   1f496:	b002      	add	sp, #8
   1f498:	bd80      	pop	{r7, pc}
   1f49a:	46c0      	nop			; (mov r8, r8)
   1f49c:	0001eff9 	.word	0x0001eff9
   1f4a0:	0001f3d5 	.word	0x0001f3d5

0001f4a4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1f4a4:	b580      	push	{r7, lr}
   1f4a6:	b082      	sub	sp, #8
   1f4a8:	af00      	add	r7, sp, #0
   1f4aa:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1f4ac:	687b      	ldr	r3, [r7, #4]
   1f4ae:	0019      	movs	r1, r3
   1f4b0:	2000      	movs	r0, #0
   1f4b2:	4b03      	ldr	r3, [pc, #12]	; (1f4c0 <sd_mmc_read_capacity_0+0x1c>)
   1f4b4:	4798      	blx	r3
   1f4b6:	0003      	movs	r3, r0
}
   1f4b8:	0018      	movs	r0, r3
   1f4ba:	46bd      	mov	sp, r7
   1f4bc:	b002      	add	sp, #8
   1f4be:	bd80      	pop	{r7, pc}
   1f4c0:	0001f465 	.word	0x0001f465

0001f4c4 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1f4c4:	b580      	push	{r7, lr}
   1f4c6:	b082      	sub	sp, #8
   1f4c8:	af00      	add	r7, sp, #0
   1f4ca:	0002      	movs	r2, r0
   1f4cc:	1dfb      	adds	r3, r7, #7
   1f4ce:	701a      	strb	r2, [r3, #0]
   1f4d0:	1dbb      	adds	r3, r7, #6
   1f4d2:	1c0a      	adds	r2, r1, #0
   1f4d4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1f4d6:	1dfb      	adds	r3, r7, #7
   1f4d8:	781b      	ldrb	r3, [r3, #0]
   1f4da:	4a04      	ldr	r2, [pc, #16]	; (1f4ec <sd_mmc_unload+0x28>)
   1f4dc:	1db9      	adds	r1, r7, #6
   1f4de:	7809      	ldrb	r1, [r1, #0]
   1f4e0:	54d1      	strb	r1, [r2, r3]
	return true;
   1f4e2:	2301      	movs	r3, #1
}
   1f4e4:	0018      	movs	r0, r3
   1f4e6:	46bd      	mov	sp, r7
   1f4e8:	b002      	add	sp, #8
   1f4ea:	bd80      	pop	{r7, pc}
   1f4ec:	20003e3c 	.word	0x20003e3c

0001f4f0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1f4f0:	b580      	push	{r7, lr}
   1f4f2:	b082      	sub	sp, #8
   1f4f4:	af00      	add	r7, sp, #0
   1f4f6:	0002      	movs	r2, r0
   1f4f8:	1dfb      	adds	r3, r7, #7
   1f4fa:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1f4fc:	1dfb      	adds	r3, r7, #7
   1f4fe:	781b      	ldrb	r3, [r3, #0]
   1f500:	0019      	movs	r1, r3
   1f502:	2000      	movs	r0, #0
   1f504:	4b03      	ldr	r3, [pc, #12]	; (1f514 <sd_mmc_unload_0+0x24>)
   1f506:	4798      	blx	r3
   1f508:	0003      	movs	r3, r0
}
   1f50a:	0018      	movs	r0, r3
   1f50c:	46bd      	mov	sp, r7
   1f50e:	b002      	add	sp, #8
   1f510:	bd80      	pop	{r7, pc}
   1f512:	46c0      	nop			; (mov r8, r8)
   1f514:	0001f4c5 	.word	0x0001f4c5

0001f518 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1f518:	b580      	push	{r7, lr}
   1f51a:	b082      	sub	sp, #8
   1f51c:	af00      	add	r7, sp, #0
   1f51e:	0002      	movs	r2, r0
   1f520:	1dfb      	adds	r3, r7, #7
   1f522:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1f524:	1dfb      	adds	r3, r7, #7
   1f526:	781b      	ldrb	r3, [r3, #0]
   1f528:	0018      	movs	r0, r3
   1f52a:	4b03      	ldr	r3, [pc, #12]	; (1f538 <sd_mmc_wr_protect+0x20>)
   1f52c:	4798      	blx	r3
   1f52e:	0003      	movs	r3, r0
}
   1f530:	0018      	movs	r0, r3
   1f532:	46bd      	mov	sp, r7
   1f534:	b002      	add	sp, #8
   1f536:	bd80      	pop	{r7, pc}
   1f538:	0001f035 	.word	0x0001f035

0001f53c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1f53c:	b580      	push	{r7, lr}
   1f53e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1f540:	2000      	movs	r0, #0
   1f542:	4b03      	ldr	r3, [pc, #12]	; (1f550 <sd_mmc_wr_protect_0+0x14>)
   1f544:	4798      	blx	r3
   1f546:	0003      	movs	r3, r0
}
   1f548:	0018      	movs	r0, r3
   1f54a:	46bd      	mov	sp, r7
   1f54c:	bd80      	pop	{r7, pc}
   1f54e:	46c0      	nop			; (mov r8, r8)
   1f550:	0001f519 	.word	0x0001f519

0001f554 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1f554:	b580      	push	{r7, lr}
   1f556:	b082      	sub	sp, #8
   1f558:	af00      	add	r7, sp, #0
   1f55a:	0002      	movs	r2, r0
   1f55c:	1dfb      	adds	r3, r7, #7
   1f55e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1f560:	2301      	movs	r3, #1
}
   1f562:	0018      	movs	r0, r3
   1f564:	46bd      	mov	sp, r7
   1f566:	b002      	add	sp, #8
   1f568:	bd80      	pop	{r7, pc}
	...

0001f56c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1f56c:	b580      	push	{r7, lr}
   1f56e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1f570:	2000      	movs	r0, #0
   1f572:	4b03      	ldr	r3, [pc, #12]	; (1f580 <sd_mmc_removal_0+0x14>)
   1f574:	4798      	blx	r3
   1f576:	0003      	movs	r3, r0
}
   1f578:	0018      	movs	r0, r3
   1f57a:	46bd      	mov	sp, r7
   1f57c:	bd80      	pop	{r7, pc}
   1f57e:	46c0      	nop			; (mov r8, r8)
   1f580:	0001f555 	.word	0x0001f555

0001f584 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1f584:	b580      	push	{r7, lr}
   1f586:	b084      	sub	sp, #16
   1f588:	af00      	add	r7, sp, #0
   1f58a:	60b9      	str	r1, [r7, #8]
   1f58c:	607a      	str	r2, [r7, #4]
   1f58e:	230f      	movs	r3, #15
   1f590:	18fb      	adds	r3, r7, r3
   1f592:	1c02      	adds	r2, r0, #0
   1f594:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1f596:	68b9      	ldr	r1, [r7, #8]
   1f598:	230f      	movs	r3, #15
   1f59a:	18fb      	adds	r3, r7, r3
   1f59c:	781b      	ldrb	r3, [r3, #0]
   1f59e:	2201      	movs	r2, #1
   1f5a0:	0018      	movs	r0, r3
   1f5a2:	4b10      	ldr	r3, [pc, #64]	; (1f5e4 <sd_mmc_mem_2_ram+0x60>)
   1f5a4:	4798      	blx	r3
   1f5a6:	1e03      	subs	r3, r0, #0
   1f5a8:	d005      	beq.n	1f5b6 <sd_mmc_mem_2_ram+0x32>
   1f5aa:	2b02      	cmp	r3, #2
   1f5ac:	d101      	bne.n	1f5b2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f5ae:	2302      	movs	r3, #2
   1f5b0:	e013      	b.n	1f5da <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1f5b2:	2301      	movs	r3, #1
   1f5b4:	e011      	b.n	1f5da <sd_mmc_mem_2_ram+0x56>
		break;
   1f5b6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1f5b8:	687b      	ldr	r3, [r7, #4]
   1f5ba:	2101      	movs	r1, #1
   1f5bc:	0018      	movs	r0, r3
   1f5be:	4b0a      	ldr	r3, [pc, #40]	; (1f5e8 <sd_mmc_mem_2_ram+0x64>)
   1f5c0:	4798      	blx	r3
   1f5c2:	1e03      	subs	r3, r0, #0
   1f5c4:	d001      	beq.n	1f5ca <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1f5c6:	2301      	movs	r3, #1
   1f5c8:	e007      	b.n	1f5da <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1f5ca:	2000      	movs	r0, #0
   1f5cc:	4b07      	ldr	r3, [pc, #28]	; (1f5ec <sd_mmc_mem_2_ram+0x68>)
   1f5ce:	4798      	blx	r3
   1f5d0:	1e03      	subs	r3, r0, #0
   1f5d2:	d001      	beq.n	1f5d8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1f5d4:	2301      	movs	r3, #1
   1f5d6:	e000      	b.n	1f5da <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1f5d8:	2300      	movs	r3, #0
}
   1f5da:	0018      	movs	r0, r3
   1f5dc:	46bd      	mov	sp, r7
   1f5de:	b004      	add	sp, #16
   1f5e0:	bd80      	pop	{r7, pc}
   1f5e2:	46c0      	nop			; (mov r8, r8)
   1f5e4:	0001f04d 	.word	0x0001f04d
   1f5e8:	0001f139 	.word	0x0001f139
   1f5ec:	0001f191 	.word	0x0001f191

0001f5f0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1f5f0:	b580      	push	{r7, lr}
   1f5f2:	b082      	sub	sp, #8
   1f5f4:	af00      	add	r7, sp, #0
   1f5f6:	6078      	str	r0, [r7, #4]
   1f5f8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1f5fa:	683a      	ldr	r2, [r7, #0]
   1f5fc:	687b      	ldr	r3, [r7, #4]
   1f5fe:	0019      	movs	r1, r3
   1f600:	2000      	movs	r0, #0
   1f602:	4b03      	ldr	r3, [pc, #12]	; (1f610 <sd_mmc_mem_2_ram_0+0x20>)
   1f604:	4798      	blx	r3
   1f606:	0003      	movs	r3, r0
}
   1f608:	0018      	movs	r0, r3
   1f60a:	46bd      	mov	sp, r7
   1f60c:	b002      	add	sp, #8
   1f60e:	bd80      	pop	{r7, pc}
   1f610:	0001f585 	.word	0x0001f585

0001f614 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1f614:	b580      	push	{r7, lr}
   1f616:	b084      	sub	sp, #16
   1f618:	af00      	add	r7, sp, #0
   1f61a:	60b9      	str	r1, [r7, #8]
   1f61c:	607a      	str	r2, [r7, #4]
   1f61e:	230f      	movs	r3, #15
   1f620:	18fb      	adds	r3, r7, r3
   1f622:	1c02      	adds	r2, r0, #0
   1f624:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1f626:	68b9      	ldr	r1, [r7, #8]
   1f628:	230f      	movs	r3, #15
   1f62a:	18fb      	adds	r3, r7, r3
   1f62c:	781b      	ldrb	r3, [r3, #0]
   1f62e:	2201      	movs	r2, #1
   1f630:	0018      	movs	r0, r3
   1f632:	4b10      	ldr	r3, [pc, #64]	; (1f674 <sd_mmc_ram_2_mem+0x60>)
   1f634:	4798      	blx	r3
   1f636:	1e03      	subs	r3, r0, #0
   1f638:	d005      	beq.n	1f646 <sd_mmc_ram_2_mem+0x32>
   1f63a:	2b02      	cmp	r3, #2
   1f63c:	d101      	bne.n	1f642 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f63e:	2302      	movs	r3, #2
   1f640:	e013      	b.n	1f66a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1f642:	2301      	movs	r3, #1
   1f644:	e011      	b.n	1f66a <sd_mmc_ram_2_mem+0x56>
		break;
   1f646:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1f648:	687b      	ldr	r3, [r7, #4]
   1f64a:	2101      	movs	r1, #1
   1f64c:	0018      	movs	r0, r3
   1f64e:	4b0a      	ldr	r3, [pc, #40]	; (1f678 <sd_mmc_ram_2_mem+0x64>)
   1f650:	4798      	blx	r3
   1f652:	1e03      	subs	r3, r0, #0
   1f654:	d001      	beq.n	1f65a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1f656:	2301      	movs	r3, #1
   1f658:	e007      	b.n	1f66a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1f65a:	2000      	movs	r0, #0
   1f65c:	4b07      	ldr	r3, [pc, #28]	; (1f67c <sd_mmc_ram_2_mem+0x68>)
   1f65e:	4798      	blx	r3
   1f660:	1e03      	subs	r3, r0, #0
   1f662:	d001      	beq.n	1f668 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1f664:	2301      	movs	r3, #1
   1f666:	e000      	b.n	1f66a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1f668:	2300      	movs	r3, #0
}
   1f66a:	0018      	movs	r0, r3
   1f66c:	46bd      	mov	sp, r7
   1f66e:	b004      	add	sp, #16
   1f670:	bd80      	pop	{r7, pc}
   1f672:	46c0      	nop			; (mov r8, r8)
   1f674:	0001f229 	.word	0x0001f229
   1f678:	0001f311 	.word	0x0001f311
   1f67c:	0001f369 	.word	0x0001f369

0001f680 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1f680:	b580      	push	{r7, lr}
   1f682:	b082      	sub	sp, #8
   1f684:	af00      	add	r7, sp, #0
   1f686:	6078      	str	r0, [r7, #4]
   1f688:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1f68a:	683a      	ldr	r2, [r7, #0]
   1f68c:	687b      	ldr	r3, [r7, #4]
   1f68e:	0019      	movs	r1, r3
   1f690:	2000      	movs	r0, #0
   1f692:	4b03      	ldr	r3, [pc, #12]	; (1f6a0 <sd_mmc_ram_2_mem_0+0x20>)
   1f694:	4798      	blx	r3
   1f696:	0003      	movs	r3, r0
}
   1f698:	0018      	movs	r0, r3
   1f69a:	46bd      	mov	sp, r7
   1f69c:	b002      	add	sp, #8
   1f69e:	bd80      	pop	{r7, pc}
   1f6a0:	0001f615 	.word	0x0001f615

0001f6a4 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1f6a4:	b580      	push	{r7, lr}
   1f6a6:	b084      	sub	sp, #16
   1f6a8:	af00      	add	r7, sp, #0
   1f6aa:	6078      	str	r0, [r7, #4]
   1f6ac:	000a      	movs	r2, r1
   1f6ae:	1cfb      	adds	r3, r7, #3
   1f6b0:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1f6b2:	230f      	movs	r3, #15
   1f6b4:	18fb      	adds	r3, r7, r3
   1f6b6:	2200      	movs	r2, #0
   1f6b8:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1f6ba:	e038      	b.n	1f72e <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1f6bc:	687b      	ldr	r3, [r7, #4]
   1f6be:	1c5a      	adds	r2, r3, #1
   1f6c0:	607a      	str	r2, [r7, #4]
   1f6c2:	220e      	movs	r2, #14
   1f6c4:	18ba      	adds	r2, r7, r2
   1f6c6:	781b      	ldrb	r3, [r3, #0]
   1f6c8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f6ca:	230d      	movs	r3, #13
   1f6cc:	18fb      	adds	r3, r7, r3
   1f6ce:	2200      	movs	r2, #0
   1f6d0:	701a      	strb	r2, [r3, #0]
   1f6d2:	e027      	b.n	1f724 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1f6d4:	230f      	movs	r3, #15
   1f6d6:	18fa      	adds	r2, r7, r3
   1f6d8:	230f      	movs	r3, #15
   1f6da:	18fb      	adds	r3, r7, r3
   1f6dc:	781b      	ldrb	r3, [r3, #0]
   1f6de:	18db      	adds	r3, r3, r3
   1f6e0:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1f6e2:	230e      	movs	r3, #14
   1f6e4:	18fa      	adds	r2, r7, r3
   1f6e6:	230f      	movs	r3, #15
   1f6e8:	18fb      	adds	r3, r7, r3
   1f6ea:	7812      	ldrb	r2, [r2, #0]
   1f6ec:	781b      	ldrb	r3, [r3, #0]
   1f6ee:	4053      	eors	r3, r2
   1f6f0:	b2db      	uxtb	r3, r3
   1f6f2:	b25b      	sxtb	r3, r3
   1f6f4:	2b00      	cmp	r3, #0
   1f6f6:	da07      	bge.n	1f708 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1f6f8:	230f      	movs	r3, #15
   1f6fa:	18fb      	adds	r3, r7, r3
   1f6fc:	220f      	movs	r2, #15
   1f6fe:	18ba      	adds	r2, r7, r2
   1f700:	7812      	ldrb	r2, [r2, #0]
   1f702:	2109      	movs	r1, #9
   1f704:	404a      	eors	r2, r1
   1f706:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1f708:	230e      	movs	r3, #14
   1f70a:	18fa      	adds	r2, r7, r3
   1f70c:	230e      	movs	r3, #14
   1f70e:	18fb      	adds	r3, r7, r3
   1f710:	781b      	ldrb	r3, [r3, #0]
   1f712:	18db      	adds	r3, r3, r3
   1f714:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f716:	230d      	movs	r3, #13
   1f718:	18fb      	adds	r3, r7, r3
   1f71a:	781a      	ldrb	r2, [r3, #0]
   1f71c:	230d      	movs	r3, #13
   1f71e:	18fb      	adds	r3, r7, r3
   1f720:	3201      	adds	r2, #1
   1f722:	701a      	strb	r2, [r3, #0]
   1f724:	230d      	movs	r3, #13
   1f726:	18fb      	adds	r3, r7, r3
   1f728:	781b      	ldrb	r3, [r3, #0]
   1f72a:	2b07      	cmp	r3, #7
   1f72c:	d9d2      	bls.n	1f6d4 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1f72e:	1cfb      	adds	r3, r7, #3
   1f730:	781b      	ldrb	r3, [r3, #0]
   1f732:	1cfa      	adds	r2, r7, #3
   1f734:	1e59      	subs	r1, r3, #1
   1f736:	7011      	strb	r1, [r2, #0]
   1f738:	2b00      	cmp	r3, #0
   1f73a:	d1bf      	bne.n	1f6bc <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1f73c:	230f      	movs	r3, #15
   1f73e:	18fb      	adds	r3, r7, r3
   1f740:	781b      	ldrb	r3, [r3, #0]
   1f742:	005b      	lsls	r3, r3, #1
   1f744:	b25b      	sxtb	r3, r3
   1f746:	2201      	movs	r2, #1
   1f748:	4313      	orrs	r3, r2
   1f74a:	b25a      	sxtb	r2, r3
   1f74c:	230f      	movs	r3, #15
   1f74e:	18fb      	adds	r3, r7, r3
   1f750:	701a      	strb	r2, [r3, #0]
	return crc;
   1f752:	230f      	movs	r3, #15
   1f754:	18fb      	adds	r3, r7, r3
   1f756:	781b      	ldrb	r3, [r3, #0]
}
   1f758:	0018      	movs	r0, r3
   1f75a:	46bd      	mov	sp, r7
   1f75c:	b004      	add	sp, #16
   1f75e:	bd80      	pop	{r7, pc}

0001f760 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1f760:	b590      	push	{r4, r7, lr}
   1f762:	b083      	sub	sp, #12
   1f764:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1f766:	1c7b      	adds	r3, r7, #1
   1f768:	22ff      	movs	r2, #255	; 0xff
   1f76a:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1f76c:	1cbb      	adds	r3, r7, #2
   1f76e:	22ff      	movs	r2, #255	; 0xff
   1f770:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f772:	1cbb      	adds	r3, r7, #2
   1f774:	881b      	ldrh	r3, [r3, #0]
   1f776:	1c79      	adds	r1, r7, #1
   1f778:	4811      	ldr	r0, [pc, #68]	; (1f7c0 <sd_mmc_spi_wait_busy+0x60>)
   1f77a:	2201      	movs	r2, #1
   1f77c:	4c11      	ldr	r4, [pc, #68]	; (1f7c4 <sd_mmc_spi_wait_busy+0x64>)
   1f77e:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1f780:	4b11      	ldr	r3, [pc, #68]	; (1f7c8 <sd_mmc_spi_wait_busy+0x68>)
   1f782:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f784:	1cbb      	adds	r3, r7, #2
   1f786:	881b      	ldrh	r3, [r3, #0]
   1f788:	1c79      	adds	r1, r7, #1
   1f78a:	480d      	ldr	r0, [pc, #52]	; (1f7c0 <sd_mmc_spi_wait_busy+0x60>)
   1f78c:	2201      	movs	r2, #1
   1f78e:	4c0d      	ldr	r4, [pc, #52]	; (1f7c4 <sd_mmc_spi_wait_busy+0x64>)
   1f790:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f792:	1cbb      	adds	r3, r7, #2
   1f794:	881b      	ldrh	r3, [r3, #0]
   1f796:	1c79      	adds	r1, r7, #1
   1f798:	4809      	ldr	r0, [pc, #36]	; (1f7c0 <sd_mmc_spi_wait_busy+0x60>)
   1f79a:	2201      	movs	r2, #1
   1f79c:	4c09      	ldr	r4, [pc, #36]	; (1f7c4 <sd_mmc_spi_wait_busy+0x64>)
   1f79e:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1f7a0:	687b      	ldr	r3, [r7, #4]
   1f7a2:	1e5a      	subs	r2, r3, #1
   1f7a4:	607a      	str	r2, [r7, #4]
   1f7a6:	2b00      	cmp	r3, #0
   1f7a8:	d101      	bne.n	1f7ae <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1f7aa:	2300      	movs	r3, #0
   1f7ac:	e004      	b.n	1f7b8 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1f7ae:	1c7b      	adds	r3, r7, #1
   1f7b0:	781b      	ldrb	r3, [r3, #0]
   1f7b2:	2bff      	cmp	r3, #255	; 0xff
   1f7b4:	d1ed      	bne.n	1f792 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1f7b6:	2301      	movs	r3, #1
}
   1f7b8:	0018      	movs	r0, r3
   1f7ba:	46bd      	mov	sp, r7
   1f7bc:	b003      	add	sp, #12
   1f7be:	bd90      	pop	{r4, r7, pc}
   1f7c0:	20003e40 	.word	0x20003e40
   1f7c4:	00027edd 	.word	0x00027edd
   1f7c8:	00030d40 	.word	0x00030d40

0001f7cc <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1f7cc:	b590      	push	{r4, r7, lr}
   1f7ce:	b083      	sub	sp, #12
   1f7d0:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1f7d2:	1cbb      	adds	r3, r7, #2
   1f7d4:	22ff      	movs	r2, #255	; 0xff
   1f7d6:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1f7d8:	1c7b      	adds	r3, r7, #1
   1f7da:	2200      	movs	r2, #0
   1f7dc:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1f7de:	4b18      	ldr	r3, [pc, #96]	; (1f840 <sd_mmc_spi_start_read_block+0x74>)
   1f7e0:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1f7e2:	687b      	ldr	r3, [r7, #4]
   1f7e4:	1e5a      	subs	r2, r3, #1
   1f7e6:	607a      	str	r2, [r7, #4]
   1f7e8:	2b00      	cmp	r3, #0
   1f7ea:	d104      	bne.n	1f7f6 <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1f7ec:	4b15      	ldr	r3, [pc, #84]	; (1f844 <sd_mmc_spi_start_read_block+0x78>)
   1f7ee:	2204      	movs	r2, #4
   1f7f0:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1f7f2:	2300      	movs	r3, #0
   1f7f4:	e020      	b.n	1f838 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1f7f6:	1cbb      	adds	r3, r7, #2
   1f7f8:	881b      	ldrh	r3, [r3, #0]
   1f7fa:	1c79      	adds	r1, r7, #1
   1f7fc:	4812      	ldr	r0, [pc, #72]	; (1f848 <sd_mmc_spi_start_read_block+0x7c>)
   1f7fe:	2201      	movs	r2, #1
   1f800:	4c12      	ldr	r4, [pc, #72]	; (1f84c <sd_mmc_spi_start_read_block+0x80>)
   1f802:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1f804:	1c7b      	adds	r3, r7, #1
   1f806:	781b      	ldrb	r3, [r3, #0]
   1f808:	001a      	movs	r2, r3
   1f80a:	23f0      	movs	r3, #240	; 0xf0
   1f80c:	4013      	ands	r3, r2
   1f80e:	d10e      	bne.n	1f82e <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1f810:	1c7b      	adds	r3, r7, #1
   1f812:	781b      	ldrb	r3, [r3, #0]
   1f814:	001a      	movs	r2, r3
   1f816:	2307      	movs	r3, #7
   1f818:	4013      	ands	r3, r2
   1f81a:	d003      	beq.n	1f824 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1f81c:	4b09      	ldr	r3, [pc, #36]	; (1f844 <sd_mmc_spi_start_read_block+0x78>)
   1f81e:	2207      	movs	r2, #7
   1f820:	701a      	strb	r2, [r3, #0]
   1f822:	e002      	b.n	1f82a <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1f824:	4b07      	ldr	r3, [pc, #28]	; (1f844 <sd_mmc_spi_start_read_block+0x78>)
   1f826:	220b      	movs	r2, #11
   1f828:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1f82a:	2300      	movs	r3, #0
   1f82c:	e004      	b.n	1f838 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1f82e:	1c7b      	adds	r3, r7, #1
   1f830:	781b      	ldrb	r3, [r3, #0]
   1f832:	2bfe      	cmp	r3, #254	; 0xfe
   1f834:	d1d5      	bne.n	1f7e2 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1f836:	2301      	movs	r3, #1
}
   1f838:	0018      	movs	r0, r3
   1f83a:	46bd      	mov	sp, r7
   1f83c:	b003      	add	sp, #12
   1f83e:	bd90      	pop	{r4, r7, pc}
   1f840:	0007a120 	.word	0x0007a120
   1f844:	20003e7f 	.word	0x20003e7f
   1f848:	20003e40 	.word	0x20003e40
   1f84c:	00027edd 	.word	0x00027edd

0001f850 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1f850:	b590      	push	{r4, r7, lr}
   1f852:	b083      	sub	sp, #12
   1f854:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1f856:	1dbb      	adds	r3, r7, #6
   1f858:	22ff      	movs	r2, #255	; 0xff
   1f85a:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1f85c:	1dbb      	adds	r3, r7, #6
   1f85e:	881b      	ldrh	r3, [r3, #0]
   1f860:	1d39      	adds	r1, r7, #4
   1f862:	4804      	ldr	r0, [pc, #16]	; (1f874 <sd_mmc_spi_stop_read_block+0x24>)
   1f864:	2202      	movs	r2, #2
   1f866:	4c04      	ldr	r4, [pc, #16]	; (1f878 <sd_mmc_spi_stop_read_block+0x28>)
   1f868:	47a0      	blx	r4
			dummy);
}
   1f86a:	46c0      	nop			; (mov r8, r8)
   1f86c:	46bd      	mov	sp, r7
   1f86e:	b003      	add	sp, #12
   1f870:	bd90      	pop	{r4, r7, pc}
   1f872:	46c0      	nop			; (mov r8, r8)
   1f874:	20003e40 	.word	0x20003e40
   1f878:	00027edd 	.word	0x00027edd

0001f87c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1f87c:	b580      	push	{r7, lr}
   1f87e:	b082      	sub	sp, #8
   1f880:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1f882:	1dfb      	adds	r3, r7, #7
   1f884:	22ff      	movs	r2, #255	; 0xff
   1f886:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1f888:	1df9      	adds	r1, r7, #7
   1f88a:	4b0d      	ldr	r3, [pc, #52]	; (1f8c0 <sd_mmc_spi_start_write_block+0x44>)
   1f88c:	2201      	movs	r2, #1
   1f88e:	0018      	movs	r0, r3
   1f890:	4b0c      	ldr	r3, [pc, #48]	; (1f8c4 <sd_mmc_spi_start_write_block+0x48>)
   1f892:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1f894:	4b0c      	ldr	r3, [pc, #48]	; (1f8c8 <sd_mmc_spi_start_write_block+0x4c>)
   1f896:	881b      	ldrh	r3, [r3, #0]
   1f898:	2b01      	cmp	r3, #1
   1f89a:	d103      	bne.n	1f8a4 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1f89c:	1dbb      	adds	r3, r7, #6
   1f89e:	22fe      	movs	r2, #254	; 0xfe
   1f8a0:	701a      	strb	r2, [r3, #0]
   1f8a2:	e002      	b.n	1f8aa <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1f8a4:	1dbb      	adds	r3, r7, #6
   1f8a6:	22fc      	movs	r2, #252	; 0xfc
   1f8a8:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1f8aa:	1db9      	adds	r1, r7, #6
   1f8ac:	4b04      	ldr	r3, [pc, #16]	; (1f8c0 <sd_mmc_spi_start_write_block+0x44>)
   1f8ae:	2201      	movs	r2, #1
   1f8b0:	0018      	movs	r0, r3
   1f8b2:	4b04      	ldr	r3, [pc, #16]	; (1f8c4 <sd_mmc_spi_start_write_block+0x48>)
   1f8b4:	4798      	blx	r3
}
   1f8b6:	46c0      	nop			; (mov r8, r8)
   1f8b8:	46bd      	mov	sp, r7
   1f8ba:	b002      	add	sp, #8
   1f8bc:	bd80      	pop	{r7, pc}
   1f8be:	46c0      	nop			; (mov r8, r8)
   1f8c0:	20003e40 	.word	0x20003e40
   1f8c4:	00028101 	.word	0x00028101
   1f8c8:	20003e8a 	.word	0x20003e8a

0001f8cc <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1f8cc:	b590      	push	{r4, r7, lr}
   1f8ce:	b083      	sub	sp, #12
   1f8d0:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1f8d2:	1dbb      	adds	r3, r7, #6
   1f8d4:	22ff      	movs	r2, #255	; 0xff
   1f8d6:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1f8d8:	1cbb      	adds	r3, r7, #2
   1f8da:	2201      	movs	r2, #1
   1f8dc:	4252      	negs	r2, r2
   1f8de:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1f8e0:	1cb9      	adds	r1, r7, #2
   1f8e2:	4b1b      	ldr	r3, [pc, #108]	; (1f950 <sd_mmc_spi_stop_write_block+0x84>)
   1f8e4:	2202      	movs	r2, #2
   1f8e6:	0018      	movs	r0, r3
   1f8e8:	4b1a      	ldr	r3, [pc, #104]	; (1f954 <sd_mmc_spi_stop_write_block+0x88>)
   1f8ea:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1f8ec:	1dbb      	adds	r3, r7, #6
   1f8ee:	881b      	ldrh	r3, [r3, #0]
   1f8f0:	1d79      	adds	r1, r7, #5
   1f8f2:	4817      	ldr	r0, [pc, #92]	; (1f950 <sd_mmc_spi_stop_write_block+0x84>)
   1f8f4:	2201      	movs	r2, #1
   1f8f6:	4c18      	ldr	r4, [pc, #96]	; (1f958 <sd_mmc_spi_stop_write_block+0x8c>)
   1f8f8:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1f8fa:	1d7b      	adds	r3, r7, #5
   1f8fc:	781b      	ldrb	r3, [r3, #0]
   1f8fe:	001a      	movs	r2, r3
   1f900:	2310      	movs	r3, #16
   1f902:	4013      	ands	r3, r2
   1f904:	d105      	bne.n	1f912 <sd_mmc_spi_stop_write_block+0x46>
   1f906:	1d7b      	adds	r3, r7, #5
   1f908:	781b      	ldrb	r3, [r3, #0]
   1f90a:	001a      	movs	r2, r3
   1f90c:	2301      	movs	r3, #1
   1f90e:	4013      	ands	r3, r2
   1f910:	d104      	bne.n	1f91c <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f912:	4b12      	ldr	r3, [pc, #72]	; (1f95c <sd_mmc_spi_stop_write_block+0x90>)
   1f914:	2201      	movs	r2, #1
   1f916:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1f918:	2300      	movs	r3, #0
   1f91a:	e014      	b.n	1f946 <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1f91c:	1d7b      	adds	r3, r7, #5
   1f91e:	781b      	ldrb	r3, [r3, #0]
   1f920:	001a      	movs	r2, r3
   1f922:	231e      	movs	r3, #30
   1f924:	4013      	ands	r3, r2
   1f926:	2b04      	cmp	r3, #4
   1f928:	d00b      	beq.n	1f942 <sd_mmc_spi_stop_write_block+0x76>
   1f92a:	2b0a      	cmp	r3, #10
   1f92c:	d104      	bne.n	1f938 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1f92e:	4b0b      	ldr	r3, [pc, #44]	; (1f95c <sd_mmc_spi_stop_write_block+0x90>)
   1f930:	2208      	movs	r2, #8
   1f932:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f934:	2300      	movs	r3, #0
   1f936:	e006      	b.n	1f946 <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1f938:	4b08      	ldr	r3, [pc, #32]	; (1f95c <sd_mmc_spi_stop_write_block+0x90>)
   1f93a:	220a      	movs	r2, #10
   1f93c:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f93e:	2300      	movs	r3, #0
   1f940:	e001      	b.n	1f946 <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1f942:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f944:	2301      	movs	r3, #1
}
   1f946:	0018      	movs	r0, r3
   1f948:	46bd      	mov	sp, r7
   1f94a:	b003      	add	sp, #12
   1f94c:	bd90      	pop	{r4, r7, pc}
   1f94e:	46c0      	nop			; (mov r8, r8)
   1f950:	20003e40 	.word	0x20003e40
   1f954:	00028101 	.word	0x00028101
   1f958:	00027edd 	.word	0x00027edd
   1f95c:	20003e7f 	.word	0x20003e7f

0001f960 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1f960:	b590      	push	{r4, r7, lr}
   1f962:	b083      	sub	sp, #12
   1f964:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1f966:	4b1d      	ldr	r3, [pc, #116]	; (1f9dc <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f968:	881b      	ldrh	r3, [r3, #0]
   1f96a:	2b01      	cmp	r3, #1
   1f96c:	d101      	bne.n	1f972 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1f96e:	2301      	movs	r3, #1
   1f970:	e030      	b.n	1f9d4 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1f972:	4b1a      	ldr	r3, [pc, #104]	; (1f9dc <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f974:	881b      	ldrh	r3, [r3, #0]
   1f976:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1f978:	4b19      	ldr	r3, [pc, #100]	; (1f9e0 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1f97a:	681a      	ldr	r2, [r3, #0]
   1f97c:	4b19      	ldr	r3, [pc, #100]	; (1f9e4 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1f97e:	881b      	ldrh	r3, [r3, #0]
   1f980:	0019      	movs	r1, r3
   1f982:	4b19      	ldr	r3, [pc, #100]	; (1f9e8 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1f984:	0010      	movs	r0, r2
   1f986:	4798      	blx	r3
   1f988:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1f98a:	429c      	cmp	r4, r3
   1f98c:	d901      	bls.n	1f992 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1f98e:	2301      	movs	r3, #1
   1f990:	e020      	b.n	1f9d4 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1f992:	1dfb      	adds	r3, r7, #7
   1f994:	22ff      	movs	r2, #255	; 0xff
   1f996:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f998:	1df9      	adds	r1, r7, #7
   1f99a:	4b14      	ldr	r3, [pc, #80]	; (1f9ec <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f99c:	2201      	movs	r2, #1
   1f99e:	0018      	movs	r0, r3
   1f9a0:	4b13      	ldr	r3, [pc, #76]	; (1f9f0 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f9a2:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1f9a4:	1dfb      	adds	r3, r7, #7
   1f9a6:	22fd      	movs	r2, #253	; 0xfd
   1f9a8:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f9aa:	1df9      	adds	r1, r7, #7
   1f9ac:	4b0f      	ldr	r3, [pc, #60]	; (1f9ec <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f9ae:	2201      	movs	r2, #1
   1f9b0:	0018      	movs	r0, r3
   1f9b2:	4b0f      	ldr	r3, [pc, #60]	; (1f9f0 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f9b4:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1f9b6:	4b0f      	ldr	r3, [pc, #60]	; (1f9f4 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1f9b8:	4798      	blx	r3
   1f9ba:	0003      	movs	r3, r0
   1f9bc:	001a      	movs	r2, r3
   1f9be:	2301      	movs	r3, #1
   1f9c0:	4053      	eors	r3, r2
   1f9c2:	b2db      	uxtb	r3, r3
   1f9c4:	2b00      	cmp	r3, #0
   1f9c6:	d004      	beq.n	1f9d2 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f9c8:	4b0b      	ldr	r3, [pc, #44]	; (1f9f8 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1f9ca:	2205      	movs	r2, #5
   1f9cc:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1f9ce:	2300      	movs	r3, #0
   1f9d0:	e000      	b.n	1f9d4 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1f9d2:	2301      	movs	r3, #1
}
   1f9d4:	0018      	movs	r0, r3
   1f9d6:	46bd      	mov	sp, r7
   1f9d8:	b003      	add	sp, #12
   1f9da:	bd90      	pop	{r4, r7, pc}
   1f9dc:	20003e8a 	.word	0x20003e8a
   1f9e0:	20003e84 	.word	0x20003e84
   1f9e4:	20003e88 	.word	0x20003e88
   1f9e8:	000328c5 	.word	0x000328c5
   1f9ec:	20003e40 	.word	0x20003e40
   1f9f0:	00028101 	.word	0x00028101
   1f9f4:	0001f761 	.word	0x0001f761
   1f9f8:	20003e7f 	.word	0x20003e7f

0001f9fc <sd_mmc_spi_select_device>:
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1f9fc:	b590      	push	{r4, r7, lr}
   1f9fe:	b083      	sub	sp, #12
   1fa00:	af00      	add	r7, sp, #0
   1fa02:	0004      	movs	r4, r0
   1fa04:	6039      	str	r1, [r7, #0]
   1fa06:	0010      	movs	r0, r2
   1fa08:	0019      	movs	r1, r3
   1fa0a:	1dfb      	adds	r3, r7, #7
   1fa0c:	1c22      	adds	r2, r4, #0
   1fa0e:	701a      	strb	r2, [r3, #0]
   1fa10:	1dbb      	adds	r3, r7, #6
   1fa12:	1c02      	adds	r2, r0, #0
   1fa14:	701a      	strb	r2, [r3, #0]
   1fa16:	1d7b      	adds	r3, r7, #5
   1fa18:	1c0a      	adds	r2, r1, #0
   1fa1a:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fa1c:	4b13      	ldr	r3, [pc, #76]	; (1fa6c <sd_mmc_spi_select_device+0x70>)
   1fa1e:	2200      	movs	r2, #0
   1fa20:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1fa22:	683b      	ldr	r3, [r7, #0]
   1fa24:	4a12      	ldr	r2, [pc, #72]	; (1fa70 <sd_mmc_spi_select_device+0x74>)
   1fa26:	4293      	cmp	r3, r2
   1fa28:	d907      	bls.n	1fa3a <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1fa2a:	4b11      	ldr	r3, [pc, #68]	; (1fa70 <sd_mmc_spi_select_device+0x74>)
   1fa2c:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1fa2e:	e004      	b.n	1fa3a <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1fa30:	683b      	ldr	r3, [r7, #0]
   1fa32:	08db      	lsrs	r3, r3, #3
   1fa34:	683a      	ldr	r2, [r7, #0]
   1fa36:	1ad3      	subs	r3, r2, r3
   1fa38:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1fa3a:	683a      	ldr	r2, [r7, #0]
   1fa3c:	4b0d      	ldr	r3, [pc, #52]	; (1fa74 <sd_mmc_spi_select_device+0x78>)
   1fa3e:	0011      	movs	r1, r2
   1fa40:	0018      	movs	r0, r3
   1fa42:	4b0d      	ldr	r3, [pc, #52]	; (1fa78 <sd_mmc_spi_select_device+0x7c>)
   1fa44:	4798      	blx	r3
   1fa46:	0003      	movs	r3, r0
   1fa48:	2b17      	cmp	r3, #23
   1fa4a:	d0f1      	beq.n	1fa30 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1fa4c:	1dfb      	adds	r3, r7, #7
   1fa4e:	781a      	ldrb	r2, [r3, #0]
   1fa50:	0013      	movs	r3, r2
   1fa52:	005b      	lsls	r3, r3, #1
   1fa54:	189b      	adds	r3, r3, r2
   1fa56:	4a09      	ldr	r2, [pc, #36]	; (1fa7c <sd_mmc_spi_select_device+0x80>)
   1fa58:	1899      	adds	r1, r3, r2
   1fa5a:	4b06      	ldr	r3, [pc, #24]	; (1fa74 <sd_mmc_spi_select_device+0x78>)
   1fa5c:	2201      	movs	r2, #1
   1fa5e:	0018      	movs	r0, r3
   1fa60:	4b07      	ldr	r3, [pc, #28]	; (1fa80 <sd_mmc_spi_select_device+0x84>)
   1fa62:	4798      	blx	r3
}
   1fa64:	46c0      	nop			; (mov r8, r8)
   1fa66:	46bd      	mov	sp, r7
   1fa68:	b003      	add	sp, #12
   1fa6a:	bd90      	pop	{r4, r7, pc}
   1fa6c:	20003e7f 	.word	0x20003e7f
   1fa70:	00989680 	.word	0x00989680
   1fa74:	20003e40 	.word	0x20003e40
   1fa78:	00027a75 	.word	0x00027a75
   1fa7c:	20003e7c 	.word	0x20003e7c
   1fa80:	00028011 	.word	0x00028011

0001fa84 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1fa84:	b580      	push	{r7, lr}
   1fa86:	b082      	sub	sp, #8
   1fa88:	af00      	add	r7, sp, #0
   1fa8a:	0002      	movs	r2, r0
   1fa8c:	1dfb      	adds	r3, r7, #7
   1fa8e:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fa90:	4b09      	ldr	r3, [pc, #36]	; (1fab8 <sd_mmc_spi_deselect_device+0x34>)
   1fa92:	2200      	movs	r2, #0
   1fa94:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1fa96:	1dfb      	adds	r3, r7, #7
   1fa98:	781a      	ldrb	r2, [r3, #0]
   1fa9a:	0013      	movs	r3, r2
   1fa9c:	005b      	lsls	r3, r3, #1
   1fa9e:	189b      	adds	r3, r3, r2
   1faa0:	4a06      	ldr	r2, [pc, #24]	; (1fabc <sd_mmc_spi_deselect_device+0x38>)
   1faa2:	1899      	adds	r1, r3, r2
   1faa4:	4b06      	ldr	r3, [pc, #24]	; (1fac0 <sd_mmc_spi_deselect_device+0x3c>)
   1faa6:	2200      	movs	r2, #0
   1faa8:	0018      	movs	r0, r3
   1faaa:	4b06      	ldr	r3, [pc, #24]	; (1fac4 <sd_mmc_spi_deselect_device+0x40>)
   1faac:	4798      	blx	r3
}
   1faae:	46c0      	nop			; (mov r8, r8)
   1fab0:	46bd      	mov	sp, r7
   1fab2:	b002      	add	sp, #8
   1fab4:	bd80      	pop	{r7, pc}
   1fab6:	46c0      	nop			; (mov r8, r8)
   1fab8:	20003e7f 	.word	0x20003e7f
   1fabc:	20003e7c 	.word	0x20003e7c
   1fac0:	20003e40 	.word	0x20003e40
   1fac4:	00028011 	.word	0x00028011

0001fac8 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1fac8:	b580      	push	{r7, lr}
   1faca:	b082      	sub	sp, #8
   1facc:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1face:	1dbb      	adds	r3, r7, #6
   1fad0:	22ff      	movs	r2, #255	; 0xff
   1fad2:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fad4:	4b0c      	ldr	r3, [pc, #48]	; (1fb08 <sd_mmc_spi_send_clock+0x40>)
   1fad6:	2200      	movs	r2, #0
   1fad8:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1fada:	1dfb      	adds	r3, r7, #7
   1fadc:	2200      	movs	r2, #0
   1fade:	701a      	strb	r2, [r3, #0]
   1fae0:	e00a      	b.n	1faf8 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1fae2:	1db9      	adds	r1, r7, #6
   1fae4:	4b09      	ldr	r3, [pc, #36]	; (1fb0c <sd_mmc_spi_send_clock+0x44>)
   1fae6:	2201      	movs	r2, #1
   1fae8:	0018      	movs	r0, r3
   1faea:	4b09      	ldr	r3, [pc, #36]	; (1fb10 <sd_mmc_spi_send_clock+0x48>)
   1faec:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1faee:	1dfb      	adds	r3, r7, #7
   1faf0:	781a      	ldrb	r2, [r3, #0]
   1faf2:	1dfb      	adds	r3, r7, #7
   1faf4:	3201      	adds	r2, #1
   1faf6:	701a      	strb	r2, [r3, #0]
   1faf8:	1dfb      	adds	r3, r7, #7
   1fafa:	781b      	ldrb	r3, [r3, #0]
   1fafc:	2b09      	cmp	r3, #9
   1fafe:	d9f0      	bls.n	1fae2 <sd_mmc_spi_send_clock+0x1a>
	}
}
   1fb00:	46c0      	nop			; (mov r8, r8)
   1fb02:	46bd      	mov	sp, r7
   1fb04:	b002      	add	sp, #8
   1fb06:	bd80      	pop	{r7, pc}
   1fb08:	20003e7f 	.word	0x20003e7f
   1fb0c:	20003e40 	.word	0x20003e40
   1fb10:	00028101 	.word	0x00028101

0001fb14 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1fb14:	b590      	push	{r4, r7, lr}
   1fb16:	b085      	sub	sp, #20
   1fb18:	af02      	add	r7, sp, #8
   1fb1a:	6078      	str	r0, [r7, #4]
   1fb1c:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1fb1e:	6839      	ldr	r1, [r7, #0]
   1fb20:	6878      	ldr	r0, [r7, #4]
   1fb22:	2300      	movs	r3, #0
   1fb24:	9300      	str	r3, [sp, #0]
   1fb26:	2300      	movs	r3, #0
   1fb28:	2200      	movs	r2, #0
   1fb2a:	4c03      	ldr	r4, [pc, #12]	; (1fb38 <sd_mmc_spi_send_cmd+0x24>)
   1fb2c:	47a0      	blx	r4
   1fb2e:	0003      	movs	r3, r0
}
   1fb30:	0018      	movs	r0, r3
   1fb32:	46bd      	mov	sp, r7
   1fb34:	b003      	add	sp, #12
   1fb36:	bd90      	pop	{r4, r7, pc}
   1fb38:	0001fb3d 	.word	0x0001fb3d

0001fb3c <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1fb3c:	b590      	push	{r4, r7, lr}
   1fb3e:	b089      	sub	sp, #36	; 0x24
   1fb40:	af00      	add	r7, sp, #0
   1fb42:	60f8      	str	r0, [r7, #12]
   1fb44:	60b9      	str	r1, [r7, #8]
   1fb46:	0019      	movs	r1, r3
   1fb48:	1dbb      	adds	r3, r7, #6
   1fb4a:	801a      	strh	r2, [r3, #0]
   1fb4c:	1d3b      	adds	r3, r7, #4
   1fb4e:	1c0a      	adds	r2, r1, #0
   1fb50:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1fb52:	231b      	movs	r3, #27
   1fb54:	18fb      	adds	r3, r7, r3
   1fb56:	22ff      	movs	r2, #255	; 0xff
   1fb58:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1fb5a:	231c      	movs	r3, #28
   1fb5c:	18fb      	adds	r3, r7, r3
   1fb5e:	22ff      	movs	r2, #255	; 0xff
   1fb60:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fb62:	4b72      	ldr	r3, [pc, #456]	; (1fd2c <sd_mmc_spi_adtc_start+0x1f0>)
   1fb64:	2200      	movs	r2, #0
   1fb66:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1fb68:	68fb      	ldr	r3, [r7, #12]
   1fb6a:	b2db      	uxtb	r3, r3
   1fb6c:	223f      	movs	r2, #63	; 0x3f
   1fb6e:	4013      	ands	r3, r2
   1fb70:	b2db      	uxtb	r3, r3
   1fb72:	2240      	movs	r2, #64	; 0x40
   1fb74:	4313      	orrs	r3, r2
   1fb76:	b2da      	uxtb	r2, r3
   1fb78:	2314      	movs	r3, #20
   1fb7a:	18fb      	adds	r3, r7, r3
   1fb7c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1fb7e:	68bb      	ldr	r3, [r7, #8]
   1fb80:	0e1b      	lsrs	r3, r3, #24
   1fb82:	b2da      	uxtb	r2, r3
   1fb84:	2314      	movs	r3, #20
   1fb86:	18fb      	adds	r3, r7, r3
   1fb88:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1fb8a:	68bb      	ldr	r3, [r7, #8]
   1fb8c:	0c1b      	lsrs	r3, r3, #16
   1fb8e:	b2da      	uxtb	r2, r3
   1fb90:	2314      	movs	r3, #20
   1fb92:	18fb      	adds	r3, r7, r3
   1fb94:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1fb96:	68bb      	ldr	r3, [r7, #8]
   1fb98:	0a1b      	lsrs	r3, r3, #8
   1fb9a:	b2da      	uxtb	r2, r3
   1fb9c:	2314      	movs	r3, #20
   1fb9e:	18fb      	adds	r3, r7, r3
   1fba0:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1fba2:	68bb      	ldr	r3, [r7, #8]
   1fba4:	b2da      	uxtb	r2, r3
   1fba6:	2314      	movs	r3, #20
   1fba8:	18fb      	adds	r3, r7, r3
   1fbaa:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1fbac:	2314      	movs	r3, #20
   1fbae:	18fb      	adds	r3, r7, r3
   1fbb0:	2105      	movs	r1, #5
   1fbb2:	0018      	movs	r0, r3
   1fbb4:	4b5e      	ldr	r3, [pc, #376]	; (1fd30 <sd_mmc_spi_adtc_start+0x1f4>)
   1fbb6:	4798      	blx	r3
   1fbb8:	0003      	movs	r3, r0
   1fbba:	001a      	movs	r2, r3
   1fbbc:	2314      	movs	r3, #20
   1fbbe:	18fb      	adds	r3, r7, r3
   1fbc0:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1fbc2:	231b      	movs	r3, #27
   1fbc4:	18f9      	adds	r1, r7, r3
   1fbc6:	4b5b      	ldr	r3, [pc, #364]	; (1fd34 <sd_mmc_spi_adtc_start+0x1f8>)
   1fbc8:	2201      	movs	r2, #1
   1fbca:	0018      	movs	r0, r3
   1fbcc:	4b5a      	ldr	r3, [pc, #360]	; (1fd38 <sd_mmc_spi_adtc_start+0x1fc>)
   1fbce:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1fbd0:	2314      	movs	r3, #20
   1fbd2:	18f9      	adds	r1, r7, r3
   1fbd4:	4b57      	ldr	r3, [pc, #348]	; (1fd34 <sd_mmc_spi_adtc_start+0x1f8>)
   1fbd6:	2206      	movs	r2, #6
   1fbd8:	0018      	movs	r0, r3
   1fbda:	4b57      	ldr	r3, [pc, #348]	; (1fd38 <sd_mmc_spi_adtc_start+0x1fc>)
   1fbdc:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1fbde:	2313      	movs	r3, #19
   1fbe0:	18fb      	adds	r3, r7, r3
   1fbe2:	22ff      	movs	r2, #255	; 0xff
   1fbe4:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1fbe6:	231c      	movs	r3, #28
   1fbe8:	18fb      	adds	r3, r7, r3
   1fbea:	881b      	ldrh	r3, [r3, #0]
   1fbec:	2213      	movs	r2, #19
   1fbee:	18b9      	adds	r1, r7, r2
   1fbf0:	4850      	ldr	r0, [pc, #320]	; (1fd34 <sd_mmc_spi_adtc_start+0x1f8>)
   1fbf2:	2201      	movs	r2, #1
   1fbf4:	4c51      	ldr	r4, [pc, #324]	; (1fd3c <sd_mmc_spi_adtc_start+0x200>)
   1fbf6:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1fbf8:	231f      	movs	r3, #31
   1fbfa:	18fb      	adds	r3, r7, r3
   1fbfc:	2207      	movs	r2, #7
   1fbfe:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1fc00:	231c      	movs	r3, #28
   1fc02:	18fb      	adds	r3, r7, r3
   1fc04:	881b      	ldrh	r3, [r3, #0]
   1fc06:	2213      	movs	r2, #19
   1fc08:	18b9      	adds	r1, r7, r2
   1fc0a:	484a      	ldr	r0, [pc, #296]	; (1fd34 <sd_mmc_spi_adtc_start+0x1f8>)
   1fc0c:	2201      	movs	r2, #1
   1fc0e:	4c4b      	ldr	r4, [pc, #300]	; (1fd3c <sd_mmc_spi_adtc_start+0x200>)
   1fc10:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1fc12:	2313      	movs	r3, #19
   1fc14:	18fb      	adds	r3, r7, r3
   1fc16:	781b      	ldrb	r3, [r3, #0]
   1fc18:	b25b      	sxtb	r3, r3
   1fc1a:	2b00      	cmp	r3, #0
   1fc1c:	da10      	bge.n	1fc40 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1fc1e:	231f      	movs	r3, #31
   1fc20:	18fb      	adds	r3, r7, r3
   1fc22:	221f      	movs	r2, #31
   1fc24:	18ba      	adds	r2, r7, r2
   1fc26:	7812      	ldrb	r2, [r2, #0]
   1fc28:	3a01      	subs	r2, #1
   1fc2a:	701a      	strb	r2, [r3, #0]
   1fc2c:	231f      	movs	r3, #31
   1fc2e:	18fb      	adds	r3, r7, r3
   1fc30:	781b      	ldrb	r3, [r3, #0]
   1fc32:	2b00      	cmp	r3, #0
   1fc34:	d1e4      	bne.n	1fc00 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1fc36:	4b3d      	ldr	r3, [pc, #244]	; (1fd2c <sd_mmc_spi_adtc_start+0x1f0>)
   1fc38:	2202      	movs	r2, #2
   1fc3a:	701a      	strb	r2, [r3, #0]
			return false;
   1fc3c:	2300      	movs	r3, #0
   1fc3e:	e070      	b.n	1fd22 <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1fc40:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1fc42:	2313      	movs	r3, #19
   1fc44:	18fb      	adds	r3, r7, r3
   1fc46:	781b      	ldrb	r3, [r3, #0]
   1fc48:	001a      	movs	r2, r3
   1fc4a:	4b3d      	ldr	r3, [pc, #244]	; (1fd40 <sd_mmc_spi_adtc_start+0x204>)
   1fc4c:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1fc4e:	2313      	movs	r3, #19
   1fc50:	18fb      	adds	r3, r7, r3
   1fc52:	781b      	ldrb	r3, [r3, #0]
   1fc54:	001a      	movs	r2, r3
   1fc56:	2308      	movs	r3, #8
   1fc58:	4013      	ands	r3, r2
   1fc5a:	d004      	beq.n	1fc66 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1fc5c:	4b33      	ldr	r3, [pc, #204]	; (1fd2c <sd_mmc_spi_adtc_start+0x1f0>)
   1fc5e:	2206      	movs	r2, #6
   1fc60:	701a      	strb	r2, [r3, #0]
		return false;
   1fc62:	2300      	movs	r3, #0
   1fc64:	e05d      	b.n	1fd22 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1fc66:	2313      	movs	r3, #19
   1fc68:	18fb      	adds	r3, r7, r3
   1fc6a:	781b      	ldrb	r3, [r3, #0]
   1fc6c:	001a      	movs	r2, r3
   1fc6e:	2304      	movs	r3, #4
   1fc70:	4013      	ands	r3, r2
   1fc72:	d004      	beq.n	1fc7e <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1fc74:	4b2d      	ldr	r3, [pc, #180]	; (1fd2c <sd_mmc_spi_adtc_start+0x1f0>)
   1fc76:	2209      	movs	r2, #9
   1fc78:	701a      	strb	r2, [r3, #0]
		return false;
   1fc7a:	2300      	movs	r3, #0
   1fc7c:	e051      	b.n	1fd22 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1fc7e:	2313      	movs	r3, #19
   1fc80:	18fb      	adds	r3, r7, r3
   1fc82:	781b      	ldrb	r3, [r3, #0]
   1fc84:	001a      	movs	r2, r3
   1fc86:	2301      	movs	r3, #1
   1fc88:	439a      	bics	r2, r3
   1fc8a:	1e13      	subs	r3, r2, #0
   1fc8c:	d004      	beq.n	1fc98 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1fc8e:	4b27      	ldr	r3, [pc, #156]	; (1fd2c <sd_mmc_spi_adtc_start+0x1f0>)
   1fc90:	2201      	movs	r2, #1
   1fc92:	701a      	strb	r2, [r3, #0]
		return false;
   1fc94:	2300      	movs	r3, #0
   1fc96:	e044      	b.n	1fd22 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1fc98:	68fa      	ldr	r2, [r7, #12]
   1fc9a:	2380      	movs	r3, #128	; 0x80
   1fc9c:	019b      	lsls	r3, r3, #6
   1fc9e:	4013      	ands	r3, r2
   1fca0:	d00d      	beq.n	1fcbe <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1fca2:	4b28      	ldr	r3, [pc, #160]	; (1fd44 <sd_mmc_spi_adtc_start+0x208>)
   1fca4:	4798      	blx	r3
   1fca6:	0003      	movs	r3, r0
   1fca8:	001a      	movs	r2, r3
   1fcaa:	2301      	movs	r3, #1
   1fcac:	4053      	eors	r3, r2
   1fcae:	b2db      	uxtb	r3, r3
   1fcb0:	2b00      	cmp	r3, #0
   1fcb2:	d004      	beq.n	1fcbe <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1fcb4:	4b1d      	ldr	r3, [pc, #116]	; (1fd2c <sd_mmc_spi_adtc_start+0x1f0>)
   1fcb6:	2203      	movs	r2, #3
   1fcb8:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1fcba:	2300      	movs	r3, #0
   1fcbc:	e031      	b.n	1fd22 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1fcbe:	68fa      	ldr	r2, [r7, #12]
   1fcc0:	2380      	movs	r3, #128	; 0x80
   1fcc2:	009b      	lsls	r3, r3, #2
   1fcc4:	4013      	ands	r3, r2
   1fcc6:	d00e      	beq.n	1fce6 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1fcc8:	4b1d      	ldr	r3, [pc, #116]	; (1fd40 <sd_mmc_spi_adtc_start+0x204>)
   1fcca:	2200      	movs	r2, #0
   1fccc:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1fcce:	231c      	movs	r3, #28
   1fcd0:	18fb      	adds	r3, r7, r3
   1fcd2:	881b      	ldrh	r3, [r3, #0]
   1fcd4:	491a      	ldr	r1, [pc, #104]	; (1fd40 <sd_mmc_spi_adtc_start+0x204>)
   1fcd6:	4817      	ldr	r0, [pc, #92]	; (1fd34 <sd_mmc_spi_adtc_start+0x1f8>)
   1fcd8:	2201      	movs	r2, #1
   1fcda:	4c18      	ldr	r4, [pc, #96]	; (1fd3c <sd_mmc_spi_adtc_start+0x200>)
   1fcdc:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1fcde:	4b18      	ldr	r3, [pc, #96]	; (1fd40 <sd_mmc_spi_adtc_start+0x204>)
   1fce0:	681a      	ldr	r2, [r3, #0]
   1fce2:	4b17      	ldr	r3, [pc, #92]	; (1fd40 <sd_mmc_spi_adtc_start+0x204>)
   1fce4:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1fce6:	68fa      	ldr	r2, [r7, #12]
   1fce8:	2380      	movs	r3, #128	; 0x80
   1fcea:	00db      	lsls	r3, r3, #3
   1fcec:	4013      	ands	r3, r2
   1fcee:	d00c      	beq.n	1fd0a <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1fcf0:	231c      	movs	r3, #28
   1fcf2:	18fb      	adds	r3, r7, r3
   1fcf4:	881b      	ldrh	r3, [r3, #0]
   1fcf6:	4912      	ldr	r1, [pc, #72]	; (1fd40 <sd_mmc_spi_adtc_start+0x204>)
   1fcf8:	480e      	ldr	r0, [pc, #56]	; (1fd34 <sd_mmc_spi_adtc_start+0x1f8>)
   1fcfa:	2204      	movs	r2, #4
   1fcfc:	4c0f      	ldr	r4, [pc, #60]	; (1fd3c <sd_mmc_spi_adtc_start+0x200>)
   1fcfe:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1fd00:	4b0f      	ldr	r3, [pc, #60]	; (1fd40 <sd_mmc_spi_adtc_start+0x204>)
   1fd02:	681b      	ldr	r3, [r3, #0]
   1fd04:	ba1a      	rev	r2, r3
   1fd06:	4b0e      	ldr	r3, [pc, #56]	; (1fd40 <sd_mmc_spi_adtc_start+0x204>)
   1fd08:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1fd0a:	4b0f      	ldr	r3, [pc, #60]	; (1fd48 <sd_mmc_spi_adtc_start+0x20c>)
   1fd0c:	1dba      	adds	r2, r7, #6
   1fd0e:	8812      	ldrh	r2, [r2, #0]
   1fd10:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1fd12:	4b0e      	ldr	r3, [pc, #56]	; (1fd4c <sd_mmc_spi_adtc_start+0x210>)
   1fd14:	1d3a      	adds	r2, r7, #4
   1fd16:	8812      	ldrh	r2, [r2, #0]
   1fd18:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1fd1a:	4b0d      	ldr	r3, [pc, #52]	; (1fd50 <sd_mmc_spi_adtc_start+0x214>)
   1fd1c:	2200      	movs	r2, #0
   1fd1e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1fd20:	2301      	movs	r3, #1
}
   1fd22:	0018      	movs	r0, r3
   1fd24:	46bd      	mov	sp, r7
   1fd26:	b009      	add	sp, #36	; 0x24
   1fd28:	bd90      	pop	{r4, r7, pc}
   1fd2a:	46c0      	nop			; (mov r8, r8)
   1fd2c:	20003e7f 	.word	0x20003e7f
   1fd30:	0001f6a5 	.word	0x0001f6a5
   1fd34:	20003e40 	.word	0x20003e40
   1fd38:	00028101 	.word	0x00028101
   1fd3c:	00027edd 	.word	0x00027edd
   1fd40:	20003e80 	.word	0x20003e80
   1fd44:	0001f761 	.word	0x0001f761
   1fd48:	20003e88 	.word	0x20003e88
   1fd4c:	20003e8a 	.word	0x20003e8a
   1fd50:	20003e84 	.word	0x20003e84

0001fd54 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1fd54:	b580      	push	{r7, lr}
   1fd56:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1fd58:	4b02      	ldr	r3, [pc, #8]	; (1fd64 <sd_mmc_spi_get_response+0x10>)
   1fd5a:	681b      	ldr	r3, [r3, #0]
}
   1fd5c:	0018      	movs	r0, r3
   1fd5e:	46bd      	mov	sp, r7
   1fd60:	bd80      	pop	{r7, pc}
   1fd62:	46c0      	nop			; (mov r8, r8)
   1fd64:	20003e80 	.word	0x20003e80

0001fd68 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1fd68:	b590      	push	{r4, r7, lr}
   1fd6a:	b085      	sub	sp, #20
   1fd6c:	af00      	add	r7, sp, #0
   1fd6e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1fd70:	230e      	movs	r3, #14
   1fd72:	18fb      	adds	r3, r7, r3
   1fd74:	22ff      	movs	r2, #255	; 0xff
   1fd76:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fd78:	4b1c      	ldr	r3, [pc, #112]	; (1fdec <sd_mmc_spi_read_word+0x84>)
   1fd7a:	2200      	movs	r2, #0
   1fd7c:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1fd7e:	4b1c      	ldr	r3, [pc, #112]	; (1fdf0 <sd_mmc_spi_read_word+0x88>)
   1fd80:	681a      	ldr	r2, [r3, #0]
   1fd82:	4b1c      	ldr	r3, [pc, #112]	; (1fdf4 <sd_mmc_spi_read_word+0x8c>)
   1fd84:	881b      	ldrh	r3, [r3, #0]
   1fd86:	0019      	movs	r1, r3
   1fd88:	4b1b      	ldr	r3, [pc, #108]	; (1fdf8 <sd_mmc_spi_read_word+0x90>)
   1fd8a:	0010      	movs	r0, r2
   1fd8c:	4798      	blx	r3
   1fd8e:	1e0b      	subs	r3, r1, #0
   1fd90:	d10a      	bne.n	1fda8 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1fd92:	4b1a      	ldr	r3, [pc, #104]	; (1fdfc <sd_mmc_spi_read_word+0x94>)
   1fd94:	4798      	blx	r3
   1fd96:	0003      	movs	r3, r0
   1fd98:	001a      	movs	r2, r3
   1fd9a:	2301      	movs	r3, #1
   1fd9c:	4053      	eors	r3, r2
   1fd9e:	b2db      	uxtb	r3, r3
   1fda0:	2b00      	cmp	r3, #0
   1fda2:	d001      	beq.n	1fda8 <sd_mmc_spi_read_word+0x40>
			return false;
   1fda4:	2300      	movs	r3, #0
   1fda6:	e01d      	b.n	1fde4 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1fda8:	230e      	movs	r3, #14
   1fdaa:	18fb      	adds	r3, r7, r3
   1fdac:	881b      	ldrh	r3, [r3, #0]
   1fdae:	1d39      	adds	r1, r7, #4
   1fdb0:	4813      	ldr	r0, [pc, #76]	; (1fe00 <sd_mmc_spi_read_word+0x98>)
   1fdb2:	2204      	movs	r2, #4
   1fdb4:	4c13      	ldr	r4, [pc, #76]	; (1fe04 <sd_mmc_spi_read_word+0x9c>)
   1fdb6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1fdb8:	687b      	ldr	r3, [r7, #4]
   1fdba:	687a      	ldr	r2, [r7, #4]
   1fdbc:	6812      	ldr	r2, [r2, #0]
   1fdbe:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1fdc0:	4b0b      	ldr	r3, [pc, #44]	; (1fdf0 <sd_mmc_spi_read_word+0x88>)
   1fdc2:	681b      	ldr	r3, [r3, #0]
   1fdc4:	1d1a      	adds	r2, r3, #4
   1fdc6:	4b0a      	ldr	r3, [pc, #40]	; (1fdf0 <sd_mmc_spi_read_word+0x88>)
   1fdc8:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1fdca:	4b09      	ldr	r3, [pc, #36]	; (1fdf0 <sd_mmc_spi_read_word+0x88>)
   1fdcc:	681a      	ldr	r2, [r3, #0]
   1fdce:	4b09      	ldr	r3, [pc, #36]	; (1fdf4 <sd_mmc_spi_read_word+0x8c>)
   1fdd0:	881b      	ldrh	r3, [r3, #0]
   1fdd2:	0019      	movs	r1, r3
   1fdd4:	4b08      	ldr	r3, [pc, #32]	; (1fdf8 <sd_mmc_spi_read_word+0x90>)
   1fdd6:	0010      	movs	r0, r2
   1fdd8:	4798      	blx	r3
   1fdda:	1e0b      	subs	r3, r1, #0
   1fddc:	d101      	bne.n	1fde2 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1fdde:	4b0a      	ldr	r3, [pc, #40]	; (1fe08 <sd_mmc_spi_read_word+0xa0>)
   1fde0:	4798      	blx	r3
	}
	return true;
   1fde2:	2301      	movs	r3, #1
}
   1fde4:	0018      	movs	r0, r3
   1fde6:	46bd      	mov	sp, r7
   1fde8:	b005      	add	sp, #20
   1fdea:	bd90      	pop	{r4, r7, pc}
   1fdec:	20003e7f 	.word	0x20003e7f
   1fdf0:	20003e84 	.word	0x20003e84
   1fdf4:	20003e88 	.word	0x20003e88
   1fdf8:	000329d1 	.word	0x000329d1
   1fdfc:	0001f7cd 	.word	0x0001f7cd
   1fe00:	20003e40 	.word	0x20003e40
   1fe04:	00027edd 	.word	0x00027edd
   1fe08:	0001f851 	.word	0x0001f851

0001fe0c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1fe0c:	b590      	push	{r4, r7, lr}
   1fe0e:	b085      	sub	sp, #20
   1fe10:	af00      	add	r7, sp, #0
   1fe12:	6078      	str	r0, [r7, #4]
   1fe14:	000a      	movs	r2, r1
   1fe16:	1cbb      	adds	r3, r7, #2
   1fe18:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1fe1a:	230a      	movs	r3, #10
   1fe1c:	18fb      	adds	r3, r7, r3
   1fe1e:	22ff      	movs	r2, #255	; 0xff
   1fe20:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fe22:	4b1c      	ldr	r3, [pc, #112]	; (1fe94 <sd_mmc_spi_start_read_blocks+0x88>)
   1fe24:	2200      	movs	r2, #0
   1fe26:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1fe28:	2300      	movs	r3, #0
   1fe2a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1fe2c:	e025      	b.n	1fe7a <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1fe2e:	4b1a      	ldr	r3, [pc, #104]	; (1fe98 <sd_mmc_spi_start_read_blocks+0x8c>)
   1fe30:	4798      	blx	r3
   1fe32:	0003      	movs	r3, r0
   1fe34:	001a      	movs	r2, r3
   1fe36:	2301      	movs	r3, #1
   1fe38:	4053      	eors	r3, r2
   1fe3a:	b2db      	uxtb	r3, r3
   1fe3c:	2b00      	cmp	r3, #0
   1fe3e:	d001      	beq.n	1fe44 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1fe40:	2300      	movs	r3, #0
   1fe42:	e022      	b.n	1fe8a <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1fe44:	687a      	ldr	r2, [r7, #4]
   1fe46:	68fb      	ldr	r3, [r7, #12]
   1fe48:	18d1      	adds	r1, r2, r3
   1fe4a:	4b14      	ldr	r3, [pc, #80]	; (1fe9c <sd_mmc_spi_start_read_blocks+0x90>)
   1fe4c:	881a      	ldrh	r2, [r3, #0]
   1fe4e:	230a      	movs	r3, #10
   1fe50:	18fb      	adds	r3, r7, r3
   1fe52:	881b      	ldrh	r3, [r3, #0]
   1fe54:	4812      	ldr	r0, [pc, #72]	; (1fea0 <sd_mmc_spi_start_read_blocks+0x94>)
   1fe56:	4c13      	ldr	r4, [pc, #76]	; (1fea4 <sd_mmc_spi_start_read_blocks+0x98>)
   1fe58:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1fe5a:	4b10      	ldr	r3, [pc, #64]	; (1fe9c <sd_mmc_spi_start_read_blocks+0x90>)
   1fe5c:	881b      	ldrh	r3, [r3, #0]
   1fe5e:	001a      	movs	r2, r3
   1fe60:	68fb      	ldr	r3, [r7, #12]
   1fe62:	189b      	adds	r3, r3, r2
   1fe64:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1fe66:	4b0d      	ldr	r3, [pc, #52]	; (1fe9c <sd_mmc_spi_start_read_blocks+0x90>)
   1fe68:	881b      	ldrh	r3, [r3, #0]
   1fe6a:	001a      	movs	r2, r3
   1fe6c:	4b0e      	ldr	r3, [pc, #56]	; (1fea8 <sd_mmc_spi_start_read_blocks+0x9c>)
   1fe6e:	681b      	ldr	r3, [r3, #0]
   1fe70:	18d2      	adds	r2, r2, r3
   1fe72:	4b0d      	ldr	r3, [pc, #52]	; (1fea8 <sd_mmc_spi_start_read_blocks+0x9c>)
   1fe74:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1fe76:	4b0d      	ldr	r3, [pc, #52]	; (1feac <sd_mmc_spi_start_read_blocks+0xa0>)
   1fe78:	4798      	blx	r3
	while (nb_block--) {
   1fe7a:	1cbb      	adds	r3, r7, #2
   1fe7c:	881b      	ldrh	r3, [r3, #0]
   1fe7e:	1cba      	adds	r2, r7, #2
   1fe80:	1e59      	subs	r1, r3, #1
   1fe82:	8011      	strh	r1, [r2, #0]
   1fe84:	2b00      	cmp	r3, #0
   1fe86:	d1d2      	bne.n	1fe2e <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1fe88:	2301      	movs	r3, #1
}
   1fe8a:	0018      	movs	r0, r3
   1fe8c:	46bd      	mov	sp, r7
   1fe8e:	b005      	add	sp, #20
   1fe90:	bd90      	pop	{r4, r7, pc}
   1fe92:	46c0      	nop			; (mov r8, r8)
   1fe94:	20003e7f 	.word	0x20003e7f
   1fe98:	0001f7cd 	.word	0x0001f7cd
   1fe9c:	20003e88 	.word	0x20003e88
   1fea0:	20003e40 	.word	0x20003e40
   1fea4:	00027edd 	.word	0x00027edd
   1fea8:	20003e84 	.word	0x20003e84
   1feac:	0001f851 	.word	0x0001f851

0001feb0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1feb0:	b580      	push	{r7, lr}
   1feb2:	af00      	add	r7, sp, #0
	return true;
   1feb4:	2301      	movs	r3, #1
}
   1feb6:	0018      	movs	r0, r3
   1feb8:	46bd      	mov	sp, r7
   1feba:	bd80      	pop	{r7, pc}

0001febc <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1febc:	b580      	push	{r7, lr}
   1febe:	b084      	sub	sp, #16
   1fec0:	af00      	add	r7, sp, #0
   1fec2:	6078      	str	r0, [r7, #4]
   1fec4:	000a      	movs	r2, r1
   1fec6:	1cbb      	adds	r3, r7, #2
   1fec8:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1feca:	4b24      	ldr	r3, [pc, #144]	; (1ff5c <sd_mmc_spi_start_write_blocks+0xa0>)
   1fecc:	2200      	movs	r2, #0
   1fece:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1fed0:	2300      	movs	r3, #0
   1fed2:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1fed4:	e035      	b.n	1ff42 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1fed6:	4b22      	ldr	r3, [pc, #136]	; (1ff60 <sd_mmc_spi_start_write_blocks+0xa4>)
   1fed8:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1feda:	687a      	ldr	r2, [r7, #4]
   1fedc:	68fb      	ldr	r3, [r7, #12]
   1fede:	18d1      	adds	r1, r2, r3
   1fee0:	4b20      	ldr	r3, [pc, #128]	; (1ff64 <sd_mmc_spi_start_write_blocks+0xa8>)
   1fee2:	881a      	ldrh	r2, [r3, #0]
   1fee4:	4b20      	ldr	r3, [pc, #128]	; (1ff68 <sd_mmc_spi_start_write_blocks+0xac>)
   1fee6:	0018      	movs	r0, r3
   1fee8:	4b20      	ldr	r3, [pc, #128]	; (1ff6c <sd_mmc_spi_start_write_blocks+0xb0>)
   1feea:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1feec:	4b1d      	ldr	r3, [pc, #116]	; (1ff64 <sd_mmc_spi_start_write_blocks+0xa8>)
   1feee:	881b      	ldrh	r3, [r3, #0]
   1fef0:	001a      	movs	r2, r3
   1fef2:	68fb      	ldr	r3, [r7, #12]
   1fef4:	189b      	adds	r3, r3, r2
   1fef6:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1fef8:	4b1a      	ldr	r3, [pc, #104]	; (1ff64 <sd_mmc_spi_start_write_blocks+0xa8>)
   1fefa:	881b      	ldrh	r3, [r3, #0]
   1fefc:	001a      	movs	r2, r3
   1fefe:	4b1c      	ldr	r3, [pc, #112]	; (1ff70 <sd_mmc_spi_start_write_blocks+0xb4>)
   1ff00:	681b      	ldr	r3, [r3, #0]
   1ff02:	18d2      	adds	r2, r2, r3
   1ff04:	4b1a      	ldr	r3, [pc, #104]	; (1ff70 <sd_mmc_spi_start_write_blocks+0xb4>)
   1ff06:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1ff08:	4b1a      	ldr	r3, [pc, #104]	; (1ff74 <sd_mmc_spi_start_write_blocks+0xb8>)
   1ff0a:	4798      	blx	r3
   1ff0c:	0003      	movs	r3, r0
   1ff0e:	001a      	movs	r2, r3
   1ff10:	2301      	movs	r3, #1
   1ff12:	4053      	eors	r3, r2
   1ff14:	b2db      	uxtb	r3, r3
   1ff16:	2b00      	cmp	r3, #0
   1ff18:	d001      	beq.n	1ff1e <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1ff1a:	2300      	movs	r3, #0
   1ff1c:	e019      	b.n	1ff52 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1ff1e:	1cbb      	adds	r3, r7, #2
   1ff20:	881b      	ldrh	r3, [r3, #0]
   1ff22:	2b00      	cmp	r3, #0
   1ff24:	d00d      	beq.n	1ff42 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1ff26:	4b14      	ldr	r3, [pc, #80]	; (1ff78 <sd_mmc_spi_start_write_blocks+0xbc>)
   1ff28:	4798      	blx	r3
   1ff2a:	0003      	movs	r3, r0
   1ff2c:	001a      	movs	r2, r3
   1ff2e:	2301      	movs	r3, #1
   1ff30:	4053      	eors	r3, r2
   1ff32:	b2db      	uxtb	r3, r3
   1ff34:	2b00      	cmp	r3, #0
   1ff36:	d004      	beq.n	1ff42 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1ff38:	4b08      	ldr	r3, [pc, #32]	; (1ff5c <sd_mmc_spi_start_write_blocks+0xa0>)
   1ff3a:	2205      	movs	r2, #5
   1ff3c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1ff3e:	2300      	movs	r3, #0
   1ff40:	e007      	b.n	1ff52 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1ff42:	1cbb      	adds	r3, r7, #2
   1ff44:	881b      	ldrh	r3, [r3, #0]
   1ff46:	1cba      	adds	r2, r7, #2
   1ff48:	1e59      	subs	r1, r3, #1
   1ff4a:	8011      	strh	r1, [r2, #0]
   1ff4c:	2b00      	cmp	r3, #0
   1ff4e:	d1c2      	bne.n	1fed6 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1ff50:	2301      	movs	r3, #1
}
   1ff52:	0018      	movs	r0, r3
   1ff54:	46bd      	mov	sp, r7
   1ff56:	b004      	add	sp, #16
   1ff58:	bd80      	pop	{r7, pc}
   1ff5a:	46c0      	nop			; (mov r8, r8)
   1ff5c:	20003e7f 	.word	0x20003e7f
   1ff60:	0001f87d 	.word	0x0001f87d
   1ff64:	20003e88 	.word	0x20003e88
   1ff68:	20003e40 	.word	0x20003e40
   1ff6c:	00028101 	.word	0x00028101
   1ff70:	20003e84 	.word	0x20003e84
   1ff74:	0001f8cd 	.word	0x0001f8cd
   1ff78:	0001f761 	.word	0x0001f761

0001ff7c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1ff7c:	b580      	push	{r7, lr}
   1ff7e:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1ff80:	4b09      	ldr	r3, [pc, #36]	; (1ffa8 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1ff82:	4798      	blx	r3
   1ff84:	0003      	movs	r3, r0
   1ff86:	001a      	movs	r2, r3
   1ff88:	2301      	movs	r3, #1
   1ff8a:	4053      	eors	r3, r2
   1ff8c:	b2db      	uxtb	r3, r3
   1ff8e:	2b00      	cmp	r3, #0
   1ff90:	d004      	beq.n	1ff9c <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1ff92:	4b06      	ldr	r3, [pc, #24]	; (1ffac <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1ff94:	2205      	movs	r2, #5
   1ff96:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1ff98:	2300      	movs	r3, #0
   1ff9a:	e002      	b.n	1ffa2 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1ff9c:	4b04      	ldr	r3, [pc, #16]	; (1ffb0 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1ff9e:	4798      	blx	r3
   1ffa0:	0003      	movs	r3, r0
}
   1ffa2:	0018      	movs	r0, r3
   1ffa4:	46bd      	mov	sp, r7
   1ffa6:	bd80      	pop	{r7, pc}
   1ffa8:	0001f761 	.word	0x0001f761
   1ffac:	20003e7f 	.word	0x20003e7f
   1ffb0:	0001f961 	.word	0x0001f961

0001ffb4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1ffb4:	b580      	push	{r7, lr}
   1ffb6:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1ffb8:	2000      	movs	r0, #0
   1ffba:	4b0f      	ldr	r3, [pc, #60]	; (1fff8 <delay_init+0x44>)
   1ffbc:	4798      	blx	r3
   1ffbe:	0002      	movs	r2, r0
   1ffc0:	4b0e      	ldr	r3, [pc, #56]	; (1fffc <delay_init+0x48>)
   1ffc2:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1ffc4:	4b0d      	ldr	r3, [pc, #52]	; (1fffc <delay_init+0x48>)
   1ffc6:	6818      	ldr	r0, [r3, #0]
   1ffc8:	4b0d      	ldr	r3, [pc, #52]	; (20000 <delay_init+0x4c>)
   1ffca:	22fa      	movs	r2, #250	; 0xfa
   1ffcc:	0091      	lsls	r1, r2, #2
   1ffce:	4798      	blx	r3
   1ffd0:	0003      	movs	r3, r0
   1ffd2:	001a      	movs	r2, r3
   1ffd4:	4b09      	ldr	r3, [pc, #36]	; (1fffc <delay_init+0x48>)
   1ffd6:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1ffd8:	4b08      	ldr	r3, [pc, #32]	; (1fffc <delay_init+0x48>)
   1ffda:	6818      	ldr	r0, [r3, #0]
   1ffdc:	4b08      	ldr	r3, [pc, #32]	; (20000 <delay_init+0x4c>)
   1ffde:	22fa      	movs	r2, #250	; 0xfa
   1ffe0:	0091      	lsls	r1, r2, #2
   1ffe2:	4798      	blx	r3
   1ffe4:	0003      	movs	r3, r0
   1ffe6:	001a      	movs	r2, r3
   1ffe8:	4b06      	ldr	r3, [pc, #24]	; (20004 <delay_init+0x50>)
   1ffea:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1ffec:	4b06      	ldr	r3, [pc, #24]	; (20008 <delay_init+0x54>)
   1ffee:	2205      	movs	r2, #5
   1fff0:	601a      	str	r2, [r3, #0]
}
   1fff2:	46c0      	nop			; (mov r8, r8)
   1fff4:	46bd      	mov	sp, r7
   1fff6:	bd80      	pop	{r7, pc}
   1fff8:	00029c85 	.word	0x00029c85
   1fffc:	200000c0 	.word	0x200000c0
   20000:	000328c5 	.word	0x000328c5
   20004:	200000c4 	.word	0x200000c4
   20008:	e000e010 	.word	0xe000e010

0002000c <system_pinmux_get_group_from_gpio_pin>:
{
   2000c:	b580      	push	{r7, lr}
   2000e:	b084      	sub	sp, #16
   20010:	af00      	add	r7, sp, #0
   20012:	0002      	movs	r2, r0
   20014:	1dfb      	adds	r3, r7, #7
   20016:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20018:	230f      	movs	r3, #15
   2001a:	18fb      	adds	r3, r7, r3
   2001c:	1dfa      	adds	r2, r7, #7
   2001e:	7812      	ldrb	r2, [r2, #0]
   20020:	09d2      	lsrs	r2, r2, #7
   20022:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20024:	230e      	movs	r3, #14
   20026:	18fb      	adds	r3, r7, r3
   20028:	1dfa      	adds	r2, r7, #7
   2002a:	7812      	ldrb	r2, [r2, #0]
   2002c:	0952      	lsrs	r2, r2, #5
   2002e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   20030:	4b0d      	ldr	r3, [pc, #52]	; (20068 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   20032:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20034:	230f      	movs	r3, #15
   20036:	18fb      	adds	r3, r7, r3
   20038:	781b      	ldrb	r3, [r3, #0]
   2003a:	2b00      	cmp	r3, #0
   2003c:	d10f      	bne.n	2005e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2003e:	230f      	movs	r3, #15
   20040:	18fb      	adds	r3, r7, r3
   20042:	781b      	ldrb	r3, [r3, #0]
   20044:	009b      	lsls	r3, r3, #2
   20046:	2210      	movs	r2, #16
   20048:	4694      	mov	ip, r2
   2004a:	44bc      	add	ip, r7
   2004c:	4463      	add	r3, ip
   2004e:	3b08      	subs	r3, #8
   20050:	681a      	ldr	r2, [r3, #0]
   20052:	230e      	movs	r3, #14
   20054:	18fb      	adds	r3, r7, r3
   20056:	781b      	ldrb	r3, [r3, #0]
   20058:	01db      	lsls	r3, r3, #7
   2005a:	18d3      	adds	r3, r2, r3
   2005c:	e000      	b.n	20060 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2005e:	2300      	movs	r3, #0
}
   20060:	0018      	movs	r0, r3
   20062:	46bd      	mov	sp, r7
   20064:	b004      	add	sp, #16
   20066:	bd80      	pop	{r7, pc}
   20068:	41004400 	.word	0x41004400

0002006c <system_interrupt_enable_global>:
{
   2006c:	b580      	push	{r7, lr}
   2006e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   20070:	4b04      	ldr	r3, [pc, #16]	; (20084 <system_interrupt_enable_global+0x18>)
   20072:	2201      	movs	r2, #1
   20074:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   20076:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   2007a:	b662      	cpsie	i
}
   2007c:	46c0      	nop			; (mov r8, r8)
   2007e:	46bd      	mov	sp, r7
   20080:	bd80      	pop	{r7, pc}
   20082:	46c0      	nop			; (mov r8, r8)
   20084:	200000ca 	.word	0x200000ca

00020088 <port_get_group_from_gpio_pin>:
{
   20088:	b580      	push	{r7, lr}
   2008a:	b082      	sub	sp, #8
   2008c:	af00      	add	r7, sp, #0
   2008e:	0002      	movs	r2, r0
   20090:	1dfb      	adds	r3, r7, #7
   20092:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20094:	1dfb      	adds	r3, r7, #7
   20096:	781b      	ldrb	r3, [r3, #0]
   20098:	0018      	movs	r0, r3
   2009a:	4b03      	ldr	r3, [pc, #12]	; (200a8 <port_get_group_from_gpio_pin+0x20>)
   2009c:	4798      	blx	r3
   2009e:	0003      	movs	r3, r0
}
   200a0:	0018      	movs	r0, r3
   200a2:	46bd      	mov	sp, r7
   200a4:	b002      	add	sp, #8
   200a6:	bd80      	pop	{r7, pc}
   200a8:	0002000d 	.word	0x0002000d

000200ac <port_get_config_defaults>:
{
   200ac:	b580      	push	{r7, lr}
   200ae:	b082      	sub	sp, #8
   200b0:	af00      	add	r7, sp, #0
   200b2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   200b4:	687b      	ldr	r3, [r7, #4]
   200b6:	2200      	movs	r2, #0
   200b8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   200ba:	687b      	ldr	r3, [r7, #4]
   200bc:	2201      	movs	r2, #1
   200be:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   200c0:	687b      	ldr	r3, [r7, #4]
   200c2:	2200      	movs	r2, #0
   200c4:	709a      	strb	r2, [r3, #2]
}
   200c6:	46c0      	nop			; (mov r8, r8)
   200c8:	46bd      	mov	sp, r7
   200ca:	b002      	add	sp, #8
   200cc:	bd80      	pop	{r7, pc}
	...

000200d0 <port_pin_set_output_level>:
{
   200d0:	b580      	push	{r7, lr}
   200d2:	b084      	sub	sp, #16
   200d4:	af00      	add	r7, sp, #0
   200d6:	0002      	movs	r2, r0
   200d8:	1dfb      	adds	r3, r7, #7
   200da:	701a      	strb	r2, [r3, #0]
   200dc:	1dbb      	adds	r3, r7, #6
   200de:	1c0a      	adds	r2, r1, #0
   200e0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   200e2:	1dfb      	adds	r3, r7, #7
   200e4:	781b      	ldrb	r3, [r3, #0]
   200e6:	0018      	movs	r0, r3
   200e8:	4b0d      	ldr	r3, [pc, #52]	; (20120 <port_pin_set_output_level+0x50>)
   200ea:	4798      	blx	r3
   200ec:	0003      	movs	r3, r0
   200ee:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   200f0:	1dfb      	adds	r3, r7, #7
   200f2:	781b      	ldrb	r3, [r3, #0]
   200f4:	221f      	movs	r2, #31
   200f6:	4013      	ands	r3, r2
   200f8:	2201      	movs	r2, #1
   200fa:	409a      	lsls	r2, r3
   200fc:	0013      	movs	r3, r2
   200fe:	60bb      	str	r3, [r7, #8]
	if (level) {
   20100:	1dbb      	adds	r3, r7, #6
   20102:	781b      	ldrb	r3, [r3, #0]
   20104:	2b00      	cmp	r3, #0
   20106:	d003      	beq.n	20110 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20108:	68fb      	ldr	r3, [r7, #12]
   2010a:	68ba      	ldr	r2, [r7, #8]
   2010c:	619a      	str	r2, [r3, #24]
}
   2010e:	e002      	b.n	20116 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   20110:	68fb      	ldr	r3, [r7, #12]
   20112:	68ba      	ldr	r2, [r7, #8]
   20114:	615a      	str	r2, [r3, #20]
}
   20116:	46c0      	nop			; (mov r8, r8)
   20118:	46bd      	mov	sp, r7
   2011a:	b004      	add	sp, #16
   2011c:	bd80      	pop	{r7, pc}
   2011e:	46c0      	nop			; (mov r8, r8)
   20120:	00020089 	.word	0x00020089

00020124 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   20124:	b580      	push	{r7, lr}
   20126:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   20128:	4b04      	ldr	r3, [pc, #16]	; (2013c <chip_isr+0x18>)
   2012a:	681b      	ldr	r3, [r3, #0]
   2012c:	2b00      	cmp	r3, #0
   2012e:	d002      	beq.n	20136 <chip_isr+0x12>
		gpfIsr();
   20130:	4b02      	ldr	r3, [pc, #8]	; (2013c <chip_isr+0x18>)
   20132:	681b      	ldr	r3, [r3, #0]
   20134:	4798      	blx	r3
	}
}
   20136:	46c0      	nop			; (mov r8, r8)
   20138:	46bd      	mov	sp, r7
   2013a:	bd80      	pop	{r7, pc}
   2013c:	20003e8c 	.word	0x20003e8c

00020140 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   20140:	b580      	push	{r7, lr}
   20142:	b082      	sub	sp, #8
   20144:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   20146:	1d3b      	adds	r3, r7, #4
   20148:	0018      	movs	r0, r3
   2014a:	4b10      	ldr	r3, [pc, #64]	; (2018c <init_chip_pins+0x4c>)
   2014c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   2014e:	1d3b      	adds	r3, r7, #4
   20150:	2201      	movs	r2, #1
   20152:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   20154:	1d3b      	adds	r3, r7, #4
   20156:	0019      	movs	r1, r3
   20158:	201b      	movs	r0, #27
   2015a:	4b0d      	ldr	r3, [pc, #52]	; (20190 <init_chip_pins+0x50>)
   2015c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   2015e:	1d3b      	adds	r3, r7, #4
   20160:	0019      	movs	r1, r3
   20162:	201c      	movs	r0, #28
   20164:	4b0a      	ldr	r3, [pc, #40]	; (20190 <init_chip_pins+0x50>)
   20166:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   20168:	1d3b      	adds	r3, r7, #4
   2016a:	0019      	movs	r1, r3
   2016c:	2028      	movs	r0, #40	; 0x28
   2016e:	4b08      	ldr	r3, [pc, #32]	; (20190 <init_chip_pins+0x50>)
   20170:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20172:	2100      	movs	r1, #0
   20174:	201c      	movs	r0, #28
   20176:	4b07      	ldr	r3, [pc, #28]	; (20194 <init_chip_pins+0x54>)
   20178:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   2017a:	2100      	movs	r1, #0
   2017c:	201b      	movs	r0, #27
   2017e:	4b05      	ldr	r3, [pc, #20]	; (20194 <init_chip_pins+0x54>)
   20180:	4798      	blx	r3
}
   20182:	46c0      	nop			; (mov r8, r8)
   20184:	46bd      	mov	sp, r7
   20186:	b002      	add	sp, #8
   20188:	bd80      	pop	{r7, pc}
   2018a:	46c0      	nop			; (mov r8, r8)
   2018c:	000200ad 	.word	0x000200ad
   20190:	000268cd 	.word	0x000268cd
   20194:	000200d1 	.word	0x000200d1

00020198 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   20198:	b580      	push	{r7, lr}
   2019a:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   2019c:	4b0b      	ldr	r3, [pc, #44]	; (201cc <nm_bsp_init+0x34>)
   2019e:	2200      	movs	r2, #0
   201a0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   201a2:	4b0b      	ldr	r3, [pc, #44]	; (201d0 <nm_bsp_init+0x38>)
   201a4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   201a6:	4b0b      	ldr	r3, [pc, #44]	; (201d4 <nm_bsp_init+0x3c>)
   201a8:	681b      	ldr	r3, [r3, #0]
   201aa:	2201      	movs	r2, #1
   201ac:	4013      	ands	r3, r2
   201ae:	d004      	beq.n	201ba <nm_bsp_init+0x22>
   201b0:	4b08      	ldr	r3, [pc, #32]	; (201d4 <nm_bsp_init+0x3c>)
   201b2:	681b      	ldr	r3, [r3, #0]
   201b4:	2202      	movs	r2, #2
   201b6:	4013      	ands	r3, r2
   201b8:	d101      	bne.n	201be <nm_bsp_init+0x26>
	    delay_init();
   201ba:	4b07      	ldr	r3, [pc, #28]	; (201d8 <nm_bsp_init+0x40>)
   201bc:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   201be:	4b07      	ldr	r3, [pc, #28]	; (201dc <nm_bsp_init+0x44>)
   201c0:	4798      	blx	r3

	return M2M_SUCCESS;
   201c2:	2300      	movs	r3, #0
}
   201c4:	0018      	movs	r0, r3
   201c6:	46bd      	mov	sp, r7
   201c8:	bd80      	pop	{r7, pc}
   201ca:	46c0      	nop			; (mov r8, r8)
   201cc:	20003e8c 	.word	0x20003e8c
   201d0:	00020141 	.word	0x00020141
   201d4:	e000e010 	.word	0xe000e010
   201d8:	0001ffb5 	.word	0x0001ffb5
   201dc:	0002006d 	.word	0x0002006d

000201e0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   201e0:	b580      	push	{r7, lr}
   201e2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   201e4:	2100      	movs	r1, #0
   201e6:	201c      	movs	r0, #28
   201e8:	4b0b      	ldr	r3, [pc, #44]	; (20218 <nm_bsp_reset+0x38>)
   201ea:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   201ec:	2100      	movs	r1, #0
   201ee:	201b      	movs	r0, #27
   201f0:	4b09      	ldr	r3, [pc, #36]	; (20218 <nm_bsp_reset+0x38>)
   201f2:	4798      	blx	r3
	nm_bsp_sleep(1);
   201f4:	2001      	movs	r0, #1
   201f6:	4b09      	ldr	r3, [pc, #36]	; (2021c <nm_bsp_reset+0x3c>)
   201f8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   201fa:	2101      	movs	r1, #1
   201fc:	201c      	movs	r0, #28
   201fe:	4b06      	ldr	r3, [pc, #24]	; (20218 <nm_bsp_reset+0x38>)
   20200:	4798      	blx	r3
	nm_bsp_sleep(10);
   20202:	200a      	movs	r0, #10
   20204:	4b05      	ldr	r3, [pc, #20]	; (2021c <nm_bsp_reset+0x3c>)
   20206:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   20208:	2101      	movs	r1, #1
   2020a:	201b      	movs	r0, #27
   2020c:	4b02      	ldr	r3, [pc, #8]	; (20218 <nm_bsp_reset+0x38>)
   2020e:	4798      	blx	r3
}
   20210:	46c0      	nop			; (mov r8, r8)
   20212:	46bd      	mov	sp, r7
   20214:	bd80      	pop	{r7, pc}
   20216:	46c0      	nop			; (mov r8, r8)
   20218:	000200d1 	.word	0x000200d1
   2021c:	00020221 	.word	0x00020221

00020220 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   20220:	b580      	push	{r7, lr}
   20222:	b082      	sub	sp, #8
   20224:	af00      	add	r7, sp, #0
   20226:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   20228:	687b      	ldr	r3, [r7, #4]
   2022a:	0018      	movs	r0, r3
   2022c:	4b02      	ldr	r3, [pc, #8]	; (20238 <nm_bsp_sleep+0x18>)
   2022e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   20230:	46c0      	nop			; (mov r8, r8)
   20232:	46bd      	mov	sp, r7
   20234:	b002      	add	sp, #8
   20236:	bd80      	pop	{r7, pc}
   20238:	0001c3f1 	.word	0x0001c3f1

0002023c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   2023c:	b580      	push	{r7, lr}
   2023e:	b086      	sub	sp, #24
   20240:	af00      	add	r7, sp, #0
   20242:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   20244:	4b15      	ldr	r3, [pc, #84]	; (2029c <nm_bsp_register_isr+0x60>)
   20246:	687a      	ldr	r2, [r7, #4]
   20248:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   2024a:	230c      	movs	r3, #12
   2024c:	18fb      	adds	r3, r7, r3
   2024e:	0018      	movs	r0, r3
   20250:	4b13      	ldr	r3, [pc, #76]	; (202a0 <nm_bsp_register_isr+0x64>)
   20252:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   20254:	230c      	movs	r3, #12
   20256:	18fb      	adds	r3, r7, r3
   20258:	2229      	movs	r2, #41	; 0x29
   2025a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   2025c:	230c      	movs	r3, #12
   2025e:	18fb      	adds	r3, r7, r3
   20260:	2200      	movs	r2, #0
   20262:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   20264:	230c      	movs	r3, #12
   20266:	18fb      	adds	r3, r7, r3
   20268:	2201      	movs	r2, #1
   2026a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   2026c:	230c      	movs	r3, #12
   2026e:	18fb      	adds	r3, r7, r3
   20270:	2202      	movs	r2, #2
   20272:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   20274:	230c      	movs	r3, #12
   20276:	18fb      	adds	r3, r7, r3
   20278:	0019      	movs	r1, r3
   2027a:	2009      	movs	r0, #9
   2027c:	4b09      	ldr	r3, [pc, #36]	; (202a4 <nm_bsp_register_isr+0x68>)
   2027e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   20280:	4b09      	ldr	r3, [pc, #36]	; (202a8 <nm_bsp_register_isr+0x6c>)
   20282:	2200      	movs	r2, #0
   20284:	2109      	movs	r1, #9
   20286:	0018      	movs	r0, r3
   20288:	4b08      	ldr	r3, [pc, #32]	; (202ac <nm_bsp_register_isr+0x70>)
   2028a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   2028c:	2100      	movs	r1, #0
   2028e:	2009      	movs	r0, #9
   20290:	4b07      	ldr	r3, [pc, #28]	; (202b0 <nm_bsp_register_isr+0x74>)
   20292:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   20294:	46c0      	nop			; (mov r8, r8)
   20296:	46bd      	mov	sp, r7
   20298:	b006      	add	sp, #24
   2029a:	bd80      	pop	{r7, pc}
   2029c:	20003e8c 	.word	0x20003e8c
   202a0:	00026775 	.word	0x00026775
   202a4:	000267a9 	.word	0x000267a9
   202a8:	00020125 	.word	0x00020125
   202ac:	00026375 	.word	0x00026375
   202b0:	000263d9 	.word	0x000263d9

000202b4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   202b4:	b580      	push	{r7, lr}
   202b6:	b082      	sub	sp, #8
   202b8:	af00      	add	r7, sp, #0
   202ba:	0002      	movs	r2, r0
   202bc:	1dfb      	adds	r3, r7, #7
   202be:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   202c0:	1dfb      	adds	r3, r7, #7
   202c2:	781b      	ldrb	r3, [r3, #0]
   202c4:	2b00      	cmp	r3, #0
   202c6:	d004      	beq.n	202d2 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   202c8:	2100      	movs	r1, #0
   202ca:	2009      	movs	r0, #9
   202cc:	4b05      	ldr	r3, [pc, #20]	; (202e4 <nm_bsp_interrupt_ctrl+0x30>)
   202ce:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   202d0:	e003      	b.n	202da <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   202d2:	2100      	movs	r1, #0
   202d4:	2009      	movs	r0, #9
   202d6:	4b04      	ldr	r3, [pc, #16]	; (202e8 <nm_bsp_interrupt_ctrl+0x34>)
   202d8:	4798      	blx	r3
}
   202da:	46c0      	nop			; (mov r8, r8)
   202dc:	46bd      	mov	sp, r7
   202de:	b002      	add	sp, #8
   202e0:	bd80      	pop	{r7, pc}
   202e2:	46c0      	nop			; (mov r8, r8)
   202e4:	000263d9 	.word	0x000263d9
   202e8:	00026421 	.word	0x00026421

000202ec <system_pinmux_get_group_from_gpio_pin>:
{
   202ec:	b580      	push	{r7, lr}
   202ee:	b084      	sub	sp, #16
   202f0:	af00      	add	r7, sp, #0
   202f2:	0002      	movs	r2, r0
   202f4:	1dfb      	adds	r3, r7, #7
   202f6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   202f8:	230f      	movs	r3, #15
   202fa:	18fb      	adds	r3, r7, r3
   202fc:	1dfa      	adds	r2, r7, #7
   202fe:	7812      	ldrb	r2, [r2, #0]
   20300:	09d2      	lsrs	r2, r2, #7
   20302:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20304:	230e      	movs	r3, #14
   20306:	18fb      	adds	r3, r7, r3
   20308:	1dfa      	adds	r2, r7, #7
   2030a:	7812      	ldrb	r2, [r2, #0]
   2030c:	0952      	lsrs	r2, r2, #5
   2030e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   20310:	4b0d      	ldr	r3, [pc, #52]	; (20348 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   20312:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20314:	230f      	movs	r3, #15
   20316:	18fb      	adds	r3, r7, r3
   20318:	781b      	ldrb	r3, [r3, #0]
   2031a:	2b00      	cmp	r3, #0
   2031c:	d10f      	bne.n	2033e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2031e:	230f      	movs	r3, #15
   20320:	18fb      	adds	r3, r7, r3
   20322:	781b      	ldrb	r3, [r3, #0]
   20324:	009b      	lsls	r3, r3, #2
   20326:	2210      	movs	r2, #16
   20328:	4694      	mov	ip, r2
   2032a:	44bc      	add	ip, r7
   2032c:	4463      	add	r3, ip
   2032e:	3b08      	subs	r3, #8
   20330:	681a      	ldr	r2, [r3, #0]
   20332:	230e      	movs	r3, #14
   20334:	18fb      	adds	r3, r7, r3
   20336:	781b      	ldrb	r3, [r3, #0]
   20338:	01db      	lsls	r3, r3, #7
   2033a:	18d3      	adds	r3, r2, r3
   2033c:	e000      	b.n	20340 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2033e:	2300      	movs	r3, #0
}
   20340:	0018      	movs	r0, r3
   20342:	46bd      	mov	sp, r7
   20344:	b004      	add	sp, #16
   20346:	bd80      	pop	{r7, pc}
   20348:	41004400 	.word	0x41004400

0002034c <system_interrupt_enable>:
{
   2034c:	b580      	push	{r7, lr}
   2034e:	b082      	sub	sp, #8
   20350:	af00      	add	r7, sp, #0
   20352:	0002      	movs	r2, r0
   20354:	1dfb      	adds	r3, r7, #7
   20356:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20358:	4b06      	ldr	r3, [pc, #24]	; (20374 <system_interrupt_enable+0x28>)
   2035a:	1dfa      	adds	r2, r7, #7
   2035c:	7812      	ldrb	r2, [r2, #0]
   2035e:	0011      	movs	r1, r2
   20360:	221f      	movs	r2, #31
   20362:	400a      	ands	r2, r1
   20364:	2101      	movs	r1, #1
   20366:	4091      	lsls	r1, r2
   20368:	000a      	movs	r2, r1
   2036a:	601a      	str	r2, [r3, #0]
}
   2036c:	46c0      	nop			; (mov r8, r8)
   2036e:	46bd      	mov	sp, r7
   20370:	b002      	add	sp, #8
   20372:	bd80      	pop	{r7, pc}
   20374:	e000e100 	.word	0xe000e100

00020378 <system_interrupt_disable>:
{
   20378:	b580      	push	{r7, lr}
   2037a:	b082      	sub	sp, #8
   2037c:	af00      	add	r7, sp, #0
   2037e:	0002      	movs	r2, r0
   20380:	1dfb      	adds	r3, r7, #7
   20382:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20384:	4a07      	ldr	r2, [pc, #28]	; (203a4 <system_interrupt_disable+0x2c>)
   20386:	1dfb      	adds	r3, r7, #7
   20388:	781b      	ldrb	r3, [r3, #0]
   2038a:	0019      	movs	r1, r3
   2038c:	231f      	movs	r3, #31
   2038e:	400b      	ands	r3, r1
   20390:	2101      	movs	r1, #1
   20392:	4099      	lsls	r1, r3
   20394:	000b      	movs	r3, r1
   20396:	0019      	movs	r1, r3
   20398:	2380      	movs	r3, #128	; 0x80
   2039a:	50d1      	str	r1, [r2, r3]
}
   2039c:	46c0      	nop			; (mov r8, r8)
   2039e:	46bd      	mov	sp, r7
   203a0:	b002      	add	sp, #8
   203a2:	bd80      	pop	{r7, pc}
   203a4:	e000e100 	.word	0xe000e100

000203a8 <port_get_group_from_gpio_pin>:
{
   203a8:	b580      	push	{r7, lr}
   203aa:	b082      	sub	sp, #8
   203ac:	af00      	add	r7, sp, #0
   203ae:	0002      	movs	r2, r0
   203b0:	1dfb      	adds	r3, r7, #7
   203b2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   203b4:	1dfb      	adds	r3, r7, #7
   203b6:	781b      	ldrb	r3, [r3, #0]
   203b8:	0018      	movs	r0, r3
   203ba:	4b03      	ldr	r3, [pc, #12]	; (203c8 <port_get_group_from_gpio_pin+0x20>)
   203bc:	4798      	blx	r3
   203be:	0003      	movs	r3, r0
}
   203c0:	0018      	movs	r0, r3
   203c2:	46bd      	mov	sp, r7
   203c4:	b002      	add	sp, #8
   203c6:	bd80      	pop	{r7, pc}
   203c8:	000202ed 	.word	0x000202ed

000203cc <port_get_config_defaults>:
{
   203cc:	b580      	push	{r7, lr}
   203ce:	b082      	sub	sp, #8
   203d0:	af00      	add	r7, sp, #0
   203d2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   203d4:	687b      	ldr	r3, [r7, #4]
   203d6:	2200      	movs	r2, #0
   203d8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   203da:	687b      	ldr	r3, [r7, #4]
   203dc:	2201      	movs	r2, #1
   203de:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   203e0:	687b      	ldr	r3, [r7, #4]
   203e2:	2200      	movs	r2, #0
   203e4:	709a      	strb	r2, [r3, #2]
}
   203e6:	46c0      	nop			; (mov r8, r8)
   203e8:	46bd      	mov	sp, r7
   203ea:	b002      	add	sp, #8
   203ec:	bd80      	pop	{r7, pc}
	...

000203f0 <port_pin_set_output_level>:
{
   203f0:	b580      	push	{r7, lr}
   203f2:	b084      	sub	sp, #16
   203f4:	af00      	add	r7, sp, #0
   203f6:	0002      	movs	r2, r0
   203f8:	1dfb      	adds	r3, r7, #7
   203fa:	701a      	strb	r2, [r3, #0]
   203fc:	1dbb      	adds	r3, r7, #6
   203fe:	1c0a      	adds	r2, r1, #0
   20400:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   20402:	1dfb      	adds	r3, r7, #7
   20404:	781b      	ldrb	r3, [r3, #0]
   20406:	0018      	movs	r0, r3
   20408:	4b0d      	ldr	r3, [pc, #52]	; (20440 <port_pin_set_output_level+0x50>)
   2040a:	4798      	blx	r3
   2040c:	0003      	movs	r3, r0
   2040e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   20410:	1dfb      	adds	r3, r7, #7
   20412:	781b      	ldrb	r3, [r3, #0]
   20414:	221f      	movs	r2, #31
   20416:	4013      	ands	r3, r2
   20418:	2201      	movs	r2, #1
   2041a:	409a      	lsls	r2, r3
   2041c:	0013      	movs	r3, r2
   2041e:	60bb      	str	r3, [r7, #8]
	if (level) {
   20420:	1dbb      	adds	r3, r7, #6
   20422:	781b      	ldrb	r3, [r3, #0]
   20424:	2b00      	cmp	r3, #0
   20426:	d003      	beq.n	20430 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20428:	68fb      	ldr	r3, [r7, #12]
   2042a:	68ba      	ldr	r2, [r7, #8]
   2042c:	619a      	str	r2, [r3, #24]
}
   2042e:	e002      	b.n	20436 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   20430:	68fb      	ldr	r3, [r7, #12]
   20432:	68ba      	ldr	r2, [r7, #8]
   20434:	615a      	str	r2, [r3, #20]
}
   20436:	46c0      	nop			; (mov r8, r8)
   20438:	46bd      	mov	sp, r7
   2043a:	b004      	add	sp, #16
   2043c:	bd80      	pop	{r7, pc}
   2043e:	46c0      	nop			; (mov r8, r8)
   20440:	000203a9 	.word	0x000203a9

00020444 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   20444:	b580      	push	{r7, lr}
   20446:	b084      	sub	sp, #16
   20448:	af00      	add	r7, sp, #0
   2044a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2044c:	687b      	ldr	r3, [r7, #4]
   2044e:	681b      	ldr	r3, [r3, #0]
   20450:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   20452:	68fb      	ldr	r3, [r7, #12]
   20454:	69db      	ldr	r3, [r3, #28]
   20456:	1e5a      	subs	r2, r3, #1
   20458:	4193      	sbcs	r3, r2
   2045a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   2045c:	0018      	movs	r0, r3
   2045e:	46bd      	mov	sp, r7
   20460:	b004      	add	sp, #16
   20462:	bd80      	pop	{r7, pc}

00020464 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   20464:	b580      	push	{r7, lr}
   20466:	b082      	sub	sp, #8
   20468:	af00      	add	r7, sp, #0
   2046a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   2046c:	687b      	ldr	r3, [r7, #4]
   2046e:	2201      	movs	r2, #1
   20470:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   20472:	687b      	ldr	r3, [r7, #4]
   20474:	2200      	movs	r2, #0
   20476:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   20478:	687b      	ldr	r3, [r7, #4]
   2047a:	2200      	movs	r2, #0
   2047c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   2047e:	687b      	ldr	r3, [r7, #4]
   20480:	22c0      	movs	r2, #192	; 0xc0
   20482:	0392      	lsls	r2, r2, #14
   20484:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   20486:	687b      	ldr	r3, [r7, #4]
   20488:	2200      	movs	r2, #0
   2048a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   2048c:	687b      	ldr	r3, [r7, #4]
   2048e:	2200      	movs	r2, #0
   20490:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   20492:	687b      	ldr	r3, [r7, #4]
   20494:	2201      	movs	r2, #1
   20496:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   20498:	687b      	ldr	r3, [r7, #4]
   2049a:	2201      	movs	r2, #1
   2049c:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   2049e:	687b      	ldr	r3, [r7, #4]
   204a0:	2200      	movs	r2, #0
   204a2:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   204a4:	687b      	ldr	r3, [r7, #4]
   204a6:	2224      	movs	r2, #36	; 0x24
   204a8:	2100      	movs	r1, #0
   204aa:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   204ac:	687b      	ldr	r3, [r7, #4]
   204ae:	3318      	adds	r3, #24
   204b0:	220c      	movs	r2, #12
   204b2:	2100      	movs	r1, #0
   204b4:	0018      	movs	r0, r3
   204b6:	4b0a      	ldr	r3, [pc, #40]	; (204e0 <spi_get_config_defaults+0x7c>)
   204b8:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   204ba:	687b      	ldr	r3, [r7, #4]
   204bc:	4a09      	ldr	r2, [pc, #36]	; (204e4 <spi_get_config_defaults+0x80>)
   204be:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   204c0:	687b      	ldr	r3, [r7, #4]
   204c2:	2200      	movs	r2, #0
   204c4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   204c6:	687b      	ldr	r3, [r7, #4]
   204c8:	2200      	movs	r2, #0
   204ca:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   204cc:	687b      	ldr	r3, [r7, #4]
   204ce:	2200      	movs	r2, #0
   204d0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   204d2:	687b      	ldr	r3, [r7, #4]
   204d4:	2200      	movs	r2, #0
   204d6:	635a      	str	r2, [r3, #52]	; 0x34

};
   204d8:	46c0      	nop			; (mov r8, r8)
   204da:	46bd      	mov	sp, r7
   204dc:	b002      	add	sp, #8
   204de:	bd80      	pop	{r7, pc}
   204e0:	0003489f 	.word	0x0003489f
   204e4:	000186a0 	.word	0x000186a0

000204e8 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   204e8:	b580      	push	{r7, lr}
   204ea:	b082      	sub	sp, #8
   204ec:	af00      	add	r7, sp, #0
   204ee:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   204f0:	687b      	ldr	r3, [r7, #4]
   204f2:	220a      	movs	r2, #10
   204f4:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   204f6:	687b      	ldr	r3, [r7, #4]
   204f8:	2200      	movs	r2, #0
   204fa:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   204fc:	687b      	ldr	r3, [r7, #4]
   204fe:	2200      	movs	r2, #0
   20500:	709a      	strb	r2, [r3, #2]
}
   20502:	46c0      	nop			; (mov r8, r8)
   20504:	46bd      	mov	sp, r7
   20506:	b002      	add	sp, #8
   20508:	bd80      	pop	{r7, pc}
	...

0002050c <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   2050c:	b580      	push	{r7, lr}
   2050e:	b084      	sub	sp, #16
   20510:	af00      	add	r7, sp, #0
   20512:	6078      	str	r0, [r7, #4]
   20514:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   20516:	683b      	ldr	r3, [r7, #0]
   20518:	781a      	ldrb	r2, [r3, #0]
   2051a:	687b      	ldr	r3, [r7, #4]
   2051c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2051e:	683b      	ldr	r3, [r7, #0]
   20520:	785a      	ldrb	r2, [r3, #1]
   20522:	687b      	ldr	r3, [r7, #4]
   20524:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   20526:	683b      	ldr	r3, [r7, #0]
   20528:	789a      	ldrb	r2, [r3, #2]
   2052a:	687b      	ldr	r3, [r7, #4]
   2052c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   2052e:	230c      	movs	r3, #12
   20530:	18fb      	adds	r3, r7, r3
   20532:	0018      	movs	r0, r3
   20534:	4b0b      	ldr	r3, [pc, #44]	; (20564 <spi_attach_slave+0x58>)
   20536:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   20538:	230c      	movs	r3, #12
   2053a:	18fb      	adds	r3, r7, r3
   2053c:	2201      	movs	r2, #1
   2053e:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   20540:	687b      	ldr	r3, [r7, #4]
   20542:	781b      	ldrb	r3, [r3, #0]
   20544:	220c      	movs	r2, #12
   20546:	18ba      	adds	r2, r7, r2
   20548:	0011      	movs	r1, r2
   2054a:	0018      	movs	r0, r3
   2054c:	4b06      	ldr	r3, [pc, #24]	; (20568 <spi_attach_slave+0x5c>)
   2054e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   20550:	687b      	ldr	r3, [r7, #4]
   20552:	781b      	ldrb	r3, [r3, #0]
   20554:	2101      	movs	r1, #1
   20556:	0018      	movs	r0, r3
   20558:	4b04      	ldr	r3, [pc, #16]	; (2056c <spi_attach_slave+0x60>)
   2055a:	4798      	blx	r3
}
   2055c:	46c0      	nop			; (mov r8, r8)
   2055e:	46bd      	mov	sp, r7
   20560:	b004      	add	sp, #16
   20562:	bd80      	pop	{r7, pc}
   20564:	000203cd 	.word	0x000203cd
   20568:	000268cd 	.word	0x000268cd
   2056c:	000203f1 	.word	0x000203f1

00020570 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   20570:	b580      	push	{r7, lr}
   20572:	b084      	sub	sp, #16
   20574:	af00      	add	r7, sp, #0
   20576:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20578:	687b      	ldr	r3, [r7, #4]
   2057a:	681b      	ldr	r3, [r3, #0]
   2057c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2057e:	687b      	ldr	r3, [r7, #4]
   20580:	681b      	ldr	r3, [r3, #0]
   20582:	0018      	movs	r0, r3
   20584:	4b0b      	ldr	r3, [pc, #44]	; (205b4 <spi_enable+0x44>)
   20586:	4798      	blx	r3
   20588:	0003      	movs	r3, r0
   2058a:	0018      	movs	r0, r3
   2058c:	4b0a      	ldr	r3, [pc, #40]	; (205b8 <spi_enable+0x48>)
   2058e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   20590:	46c0      	nop			; (mov r8, r8)
   20592:	687b      	ldr	r3, [r7, #4]
   20594:	0018      	movs	r0, r3
   20596:	4b09      	ldr	r3, [pc, #36]	; (205bc <spi_enable+0x4c>)
   20598:	4798      	blx	r3
   2059a:	1e03      	subs	r3, r0, #0
   2059c:	d1f9      	bne.n	20592 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2059e:	68fb      	ldr	r3, [r7, #12]
   205a0:	681b      	ldr	r3, [r3, #0]
   205a2:	2202      	movs	r2, #2
   205a4:	431a      	orrs	r2, r3
   205a6:	68fb      	ldr	r3, [r7, #12]
   205a8:	601a      	str	r2, [r3, #0]
}
   205aa:	46c0      	nop			; (mov r8, r8)
   205ac:	46bd      	mov	sp, r7
   205ae:	b004      	add	sp, #16
   205b0:	bd80      	pop	{r7, pc}
   205b2:	46c0      	nop			; (mov r8, r8)
   205b4:	0002759d 	.word	0x0002759d
   205b8:	0002034d 	.word	0x0002034d
   205bc:	00020445 	.word	0x00020445

000205c0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   205c0:	b580      	push	{r7, lr}
   205c2:	b084      	sub	sp, #16
   205c4:	af00      	add	r7, sp, #0
   205c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   205c8:	687b      	ldr	r3, [r7, #4]
   205ca:	681b      	ldr	r3, [r3, #0]
   205cc:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   205ce:	687b      	ldr	r3, [r7, #4]
   205d0:	681b      	ldr	r3, [r3, #0]
   205d2:	0018      	movs	r0, r3
   205d4:	4b0e      	ldr	r3, [pc, #56]	; (20610 <spi_disable+0x50>)
   205d6:	4798      	blx	r3
   205d8:	0003      	movs	r3, r0
   205da:	0018      	movs	r0, r3
   205dc:	4b0d      	ldr	r3, [pc, #52]	; (20614 <spi_disable+0x54>)
   205de:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   205e0:	46c0      	nop			; (mov r8, r8)
   205e2:	687b      	ldr	r3, [r7, #4]
   205e4:	0018      	movs	r0, r3
   205e6:	4b0c      	ldr	r3, [pc, #48]	; (20618 <spi_disable+0x58>)
   205e8:	4798      	blx	r3
   205ea:	1e03      	subs	r3, r0, #0
   205ec:	d1f9      	bne.n	205e2 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   205ee:	68fb      	ldr	r3, [r7, #12]
   205f0:	228f      	movs	r2, #143	; 0x8f
   205f2:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   205f4:	68fb      	ldr	r3, [r7, #12]
   205f6:	228f      	movs	r2, #143	; 0x8f
   205f8:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   205fa:	68fb      	ldr	r3, [r7, #12]
   205fc:	681b      	ldr	r3, [r3, #0]
   205fe:	2202      	movs	r2, #2
   20600:	4393      	bics	r3, r2
   20602:	001a      	movs	r2, r3
   20604:	68fb      	ldr	r3, [r7, #12]
   20606:	601a      	str	r2, [r3, #0]
}
   20608:	46c0      	nop			; (mov r8, r8)
   2060a:	46bd      	mov	sp, r7
   2060c:	b004      	add	sp, #16
   2060e:	bd80      	pop	{r7, pc}
   20610:	0002759d 	.word	0x0002759d
   20614:	00020379 	.word	0x00020379
   20618:	00020445 	.word	0x00020445

0002061c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   2061c:	b580      	push	{r7, lr}
   2061e:	b084      	sub	sp, #16
   20620:	af00      	add	r7, sp, #0
   20622:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20624:	687b      	ldr	r3, [r7, #4]
   20626:	681b      	ldr	r3, [r3, #0]
   20628:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2062a:	68fb      	ldr	r3, [r7, #12]
   2062c:	7e1b      	ldrb	r3, [r3, #24]
   2062e:	b2db      	uxtb	r3, r3
   20630:	001a      	movs	r2, r3
   20632:	2302      	movs	r3, #2
   20634:	4013      	ands	r3, r2
   20636:	1e5a      	subs	r2, r3, #1
   20638:	4193      	sbcs	r3, r2
   2063a:	b2db      	uxtb	r3, r3
}
   2063c:	0018      	movs	r0, r3
   2063e:	46bd      	mov	sp, r7
   20640:	b004      	add	sp, #16
   20642:	bd80      	pop	{r7, pc}

00020644 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   20644:	b580      	push	{r7, lr}
   20646:	b084      	sub	sp, #16
   20648:	af00      	add	r7, sp, #0
   2064a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2064c:	687b      	ldr	r3, [r7, #4]
   2064e:	681b      	ldr	r3, [r3, #0]
   20650:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   20652:	68fb      	ldr	r3, [r7, #12]
   20654:	7e1b      	ldrb	r3, [r3, #24]
   20656:	b2db      	uxtb	r3, r3
   20658:	001a      	movs	r2, r3
   2065a:	2301      	movs	r3, #1
   2065c:	4013      	ands	r3, r2
   2065e:	1e5a      	subs	r2, r3, #1
   20660:	4193      	sbcs	r3, r2
   20662:	b2db      	uxtb	r3, r3
}
   20664:	0018      	movs	r0, r3
   20666:	46bd      	mov	sp, r7
   20668:	b004      	add	sp, #16
   2066a:	bd80      	pop	{r7, pc}

0002066c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   2066c:	b580      	push	{r7, lr}
   2066e:	b084      	sub	sp, #16
   20670:	af00      	add	r7, sp, #0
   20672:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20674:	687b      	ldr	r3, [r7, #4]
   20676:	681b      	ldr	r3, [r3, #0]
   20678:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2067a:	68fb      	ldr	r3, [r7, #12]
   2067c:	7e1b      	ldrb	r3, [r3, #24]
   2067e:	b2db      	uxtb	r3, r3
   20680:	001a      	movs	r2, r3
   20682:	2304      	movs	r3, #4
   20684:	4013      	ands	r3, r2
   20686:	1e5a      	subs	r2, r3, #1
   20688:	4193      	sbcs	r3, r2
   2068a:	b2db      	uxtb	r3, r3
}
   2068c:	0018      	movs	r0, r3
   2068e:	46bd      	mov	sp, r7
   20690:	b004      	add	sp, #16
   20692:	bd80      	pop	{r7, pc}

00020694 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   20694:	b580      	push	{r7, lr}
   20696:	b084      	sub	sp, #16
   20698:	af00      	add	r7, sp, #0
   2069a:	6078      	str	r0, [r7, #4]
   2069c:	000a      	movs	r2, r1
   2069e:	1cbb      	adds	r3, r7, #2
   206a0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   206a2:	687b      	ldr	r3, [r7, #4]
   206a4:	681b      	ldr	r3, [r3, #0]
   206a6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   206a8:	687b      	ldr	r3, [r7, #4]
   206aa:	0018      	movs	r0, r3
   206ac:	4b0a      	ldr	r3, [pc, #40]	; (206d8 <spi_write+0x44>)
   206ae:	4798      	blx	r3
   206b0:	0003      	movs	r3, r0
   206b2:	001a      	movs	r2, r3
   206b4:	2301      	movs	r3, #1
   206b6:	4053      	eors	r3, r2
   206b8:	b2db      	uxtb	r3, r3
   206ba:	2b00      	cmp	r3, #0
   206bc:	d001      	beq.n	206c2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   206be:	2305      	movs	r3, #5
   206c0:	e006      	b.n	206d0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   206c2:	1cbb      	adds	r3, r7, #2
   206c4:	881b      	ldrh	r3, [r3, #0]
   206c6:	05db      	lsls	r3, r3, #23
   206c8:	0dda      	lsrs	r2, r3, #23
   206ca:	68fb      	ldr	r3, [r7, #12]
   206cc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   206ce:	2300      	movs	r3, #0
}
   206d0:	0018      	movs	r0, r3
   206d2:	46bd      	mov	sp, r7
   206d4:	b004      	add	sp, #16
   206d6:	bd80      	pop	{r7, pc}
   206d8:	00020645 	.word	0x00020645

000206dc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   206dc:	b580      	push	{r7, lr}
   206de:	b084      	sub	sp, #16
   206e0:	af00      	add	r7, sp, #0
   206e2:	6078      	str	r0, [r7, #4]
   206e4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   206e6:	687b      	ldr	r3, [r7, #4]
   206e8:	681b      	ldr	r3, [r3, #0]
   206ea:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   206ec:	687b      	ldr	r3, [r7, #4]
   206ee:	0018      	movs	r0, r3
   206f0:	4b1b      	ldr	r3, [pc, #108]	; (20760 <spi_read+0x84>)
   206f2:	4798      	blx	r3
   206f4:	0003      	movs	r3, r0
   206f6:	001a      	movs	r2, r3
   206f8:	2301      	movs	r3, #1
   206fa:	4053      	eors	r3, r2
   206fc:	b2db      	uxtb	r3, r3
   206fe:	2b00      	cmp	r3, #0
   20700:	d001      	beq.n	20706 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   20702:	2310      	movs	r3, #16
   20704:	e027      	b.n	20756 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   20706:	230f      	movs	r3, #15
   20708:	18fb      	adds	r3, r7, r3
   2070a:	2200      	movs	r2, #0
   2070c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2070e:	68bb      	ldr	r3, [r7, #8]
   20710:	8b5b      	ldrh	r3, [r3, #26]
   20712:	b29b      	uxth	r3, r3
   20714:	001a      	movs	r2, r3
   20716:	2304      	movs	r3, #4
   20718:	4013      	ands	r3, r2
   2071a:	d006      	beq.n	2072a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2071c:	230f      	movs	r3, #15
   2071e:	18fb      	adds	r3, r7, r3
   20720:	221e      	movs	r2, #30
   20722:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   20724:	68bb      	ldr	r3, [r7, #8]
   20726:	2204      	movs	r2, #4
   20728:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2072a:	687b      	ldr	r3, [r7, #4]
   2072c:	799b      	ldrb	r3, [r3, #6]
   2072e:	2b01      	cmp	r3, #1
   20730:	d108      	bne.n	20744 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   20732:	68bb      	ldr	r3, [r7, #8]
   20734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20736:	b29b      	uxth	r3, r3
   20738:	05db      	lsls	r3, r3, #23
   2073a:	0ddb      	lsrs	r3, r3, #23
   2073c:	b29a      	uxth	r2, r3
   2073e:	683b      	ldr	r3, [r7, #0]
   20740:	801a      	strh	r2, [r3, #0]
   20742:	e005      	b.n	20750 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   20744:	68bb      	ldr	r3, [r7, #8]
   20746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20748:	b2db      	uxtb	r3, r3
   2074a:	b29a      	uxth	r2, r3
   2074c:	683b      	ldr	r3, [r7, #0]
   2074e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   20750:	230f      	movs	r3, #15
   20752:	18fb      	adds	r3, r7, r3
   20754:	781b      	ldrb	r3, [r3, #0]
}
   20756:	0018      	movs	r0, r3
   20758:	46bd      	mov	sp, r7
   2075a:	b004      	add	sp, #16
   2075c:	bd80      	pop	{r7, pc}
   2075e:	46c0      	nop			; (mov r8, r8)
   20760:	0002066d 	.word	0x0002066d

00020764 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   20764:	b580      	push	{r7, lr}
   20766:	b086      	sub	sp, #24
   20768:	af00      	add	r7, sp, #0
   2076a:	60f8      	str	r0, [r7, #12]
   2076c:	60b9      	str	r1, [r7, #8]
   2076e:	1dbb      	adds	r3, r7, #6
   20770:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   20772:	2313      	movs	r3, #19
   20774:	18fb      	adds	r3, r7, r3
   20776:	22ff      	movs	r2, #255	; 0xff
   20778:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   2077a:	2317      	movs	r3, #23
   2077c:	18fb      	adds	r3, r7, r3
   2077e:	2200      	movs	r2, #0
   20780:	701a      	strb	r2, [r3, #0]
   20782:	2316      	movs	r3, #22
   20784:	18fb      	adds	r3, r7, r3
   20786:	2200      	movs	r2, #0
   20788:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   2078a:	2314      	movs	r3, #20
   2078c:	18fb      	adds	r3, r7, r3
   2078e:	2200      	movs	r2, #0
   20790:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   20792:	2310      	movs	r3, #16
   20794:	18fb      	adds	r3, r7, r3
   20796:	2200      	movs	r2, #0
   20798:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   2079a:	68bb      	ldr	r3, [r7, #8]
   2079c:	2b00      	cmp	r3, #0
   2079e:	d102      	bne.n	207a6 <spi_rw+0x42>
   207a0:	68fb      	ldr	r3, [r7, #12]
   207a2:	2b00      	cmp	r3, #0
   207a4:	d003      	beq.n	207ae <spi_rw+0x4a>
   207a6:	1dbb      	adds	r3, r7, #6
   207a8:	881b      	ldrh	r3, [r3, #0]
   207aa:	2b00      	cmp	r3, #0
   207ac:	d102      	bne.n	207b4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   207ae:	230f      	movs	r3, #15
   207b0:	425b      	negs	r3, r3
   207b2:	e07e      	b.n	208b2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   207b4:	68fb      	ldr	r3, [r7, #12]
   207b6:	2b00      	cmp	r3, #0
   207b8:	d106      	bne.n	207c8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   207ba:	2313      	movs	r3, #19
   207bc:	18fb      	adds	r3, r7, r3
   207be:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   207c0:	2317      	movs	r3, #23
   207c2:	18fb      	adds	r3, r7, r3
   207c4:	2201      	movs	r2, #1
   207c6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   207c8:	68bb      	ldr	r3, [r7, #8]
   207ca:	2b00      	cmp	r3, #0
   207cc:	d106      	bne.n	207dc <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   207ce:	2313      	movs	r3, #19
   207d0:	18fb      	adds	r3, r7, r3
   207d2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   207d4:	2316      	movs	r3, #22
   207d6:	18fb      	adds	r3, r7, r3
   207d8:	2201      	movs	r2, #1
   207da:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   207dc:	4937      	ldr	r1, [pc, #220]	; (208bc <spi_rw+0x158>)
   207de:	4b38      	ldr	r3, [pc, #224]	; (208c0 <spi_rw+0x15c>)
   207e0:	2201      	movs	r2, #1
   207e2:	0018      	movs	r0, r3
   207e4:	4b37      	ldr	r3, [pc, #220]	; (208c4 <spi_rw+0x160>)
   207e6:	4798      	blx	r3

	while (u16Sz) {
   207e8:	e04c      	b.n	20884 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   207ea:	68fb      	ldr	r3, [r7, #12]
   207ec:	781a      	ldrb	r2, [r3, #0]
   207ee:	2314      	movs	r3, #20
   207f0:	18fb      	adds	r3, r7, r3
   207f2:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   207f4:	46c0      	nop			; (mov r8, r8)
   207f6:	4b32      	ldr	r3, [pc, #200]	; (208c0 <spi_rw+0x15c>)
   207f8:	0018      	movs	r0, r3
   207fa:	4b33      	ldr	r3, [pc, #204]	; (208c8 <spi_rw+0x164>)
   207fc:	4798      	blx	r3
   207fe:	0003      	movs	r3, r0
   20800:	001a      	movs	r2, r3
   20802:	2301      	movs	r3, #1
   20804:	4053      	eors	r3, r2
   20806:	b2db      	uxtb	r3, r3
   20808:	2b00      	cmp	r3, #0
   2080a:	d1f4      	bne.n	207f6 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   2080c:	46c0      	nop			; (mov r8, r8)
   2080e:	2314      	movs	r3, #20
   20810:	18fb      	adds	r3, r7, r3
   20812:	881a      	ldrh	r2, [r3, #0]
   20814:	4b2a      	ldr	r3, [pc, #168]	; (208c0 <spi_rw+0x15c>)
   20816:	0011      	movs	r1, r2
   20818:	0018      	movs	r0, r3
   2081a:	4b2c      	ldr	r3, [pc, #176]	; (208cc <spi_rw+0x168>)
   2081c:	4798      	blx	r3
   2081e:	1e03      	subs	r3, r0, #0
   20820:	d1f5      	bne.n	2080e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   20822:	46c0      	nop			; (mov r8, r8)
   20824:	4b26      	ldr	r3, [pc, #152]	; (208c0 <spi_rw+0x15c>)
   20826:	0018      	movs	r0, r3
   20828:	4b29      	ldr	r3, [pc, #164]	; (208d0 <spi_rw+0x16c>)
   2082a:	4798      	blx	r3
   2082c:	0003      	movs	r3, r0
   2082e:	001a      	movs	r2, r3
   20830:	2301      	movs	r3, #1
   20832:	4053      	eors	r3, r2
   20834:	b2db      	uxtb	r3, r3
   20836:	2b00      	cmp	r3, #0
   20838:	d1f4      	bne.n	20824 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   2083a:	46c0      	nop			; (mov r8, r8)
   2083c:	2310      	movs	r3, #16
   2083e:	18fa      	adds	r2, r7, r3
   20840:	4b1f      	ldr	r3, [pc, #124]	; (208c0 <spi_rw+0x15c>)
   20842:	0011      	movs	r1, r2
   20844:	0018      	movs	r0, r3
   20846:	4b23      	ldr	r3, [pc, #140]	; (208d4 <spi_rw+0x170>)
   20848:	4798      	blx	r3
   2084a:	1e03      	subs	r3, r0, #0
   2084c:	d1f6      	bne.n	2083c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   2084e:	2310      	movs	r3, #16
   20850:	18fb      	adds	r3, r7, r3
   20852:	881b      	ldrh	r3, [r3, #0]
   20854:	b2da      	uxtb	r2, r3
   20856:	68bb      	ldr	r3, [r7, #8]
   20858:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   2085a:	1dbb      	adds	r3, r7, #6
   2085c:	881a      	ldrh	r2, [r3, #0]
   2085e:	1dbb      	adds	r3, r7, #6
   20860:	3a01      	subs	r2, #1
   20862:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   20864:	2316      	movs	r3, #22
   20866:	18fb      	adds	r3, r7, r3
   20868:	781b      	ldrb	r3, [r3, #0]
   2086a:	2b00      	cmp	r3, #0
   2086c:	d102      	bne.n	20874 <spi_rw+0x110>
			pu8Miso++;
   2086e:	68bb      	ldr	r3, [r7, #8]
   20870:	3301      	adds	r3, #1
   20872:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   20874:	2317      	movs	r3, #23
   20876:	18fb      	adds	r3, r7, r3
   20878:	781b      	ldrb	r3, [r3, #0]
   2087a:	2b00      	cmp	r3, #0
   2087c:	d102      	bne.n	20884 <spi_rw+0x120>
			pu8Mosi++;
   2087e:	68fb      	ldr	r3, [r7, #12]
   20880:	3301      	adds	r3, #1
   20882:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   20884:	1dbb      	adds	r3, r7, #6
   20886:	881b      	ldrh	r3, [r3, #0]
   20888:	2b00      	cmp	r3, #0
   2088a:	d1ae      	bne.n	207ea <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   2088c:	46c0      	nop			; (mov r8, r8)
   2088e:	4b0c      	ldr	r3, [pc, #48]	; (208c0 <spi_rw+0x15c>)
   20890:	0018      	movs	r0, r3
   20892:	4b11      	ldr	r3, [pc, #68]	; (208d8 <spi_rw+0x174>)
   20894:	4798      	blx	r3
   20896:	0003      	movs	r3, r0
   20898:	001a      	movs	r2, r3
   2089a:	2301      	movs	r3, #1
   2089c:	4053      	eors	r3, r2
   2089e:	b2db      	uxtb	r3, r3
   208a0:	2b00      	cmp	r3, #0
   208a2:	d1f4      	bne.n	2088e <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   208a4:	4905      	ldr	r1, [pc, #20]	; (208bc <spi_rw+0x158>)
   208a6:	4b06      	ldr	r3, [pc, #24]	; (208c0 <spi_rw+0x15c>)
   208a8:	2200      	movs	r2, #0
   208aa:	0018      	movs	r0, r3
   208ac:	4b05      	ldr	r3, [pc, #20]	; (208c4 <spi_rw+0x160>)
   208ae:	4798      	blx	r3

	return M2M_SUCCESS;
   208b0:	2300      	movs	r3, #0
}
   208b2:	0018      	movs	r0, r3
   208b4:	46bd      	mov	sp, r7
   208b6:	b006      	add	sp, #24
   208b8:	bd80      	pop	{r7, pc}
   208ba:	46c0      	nop			; (mov r8, r8)
   208bc:	20005620 	.word	0x20005620
   208c0:	20005624 	.word	0x20005624
   208c4:	00028011 	.word	0x00028011
   208c8:	00020645 	.word	0x00020645
   208cc:	00020695 	.word	0x00020695
   208d0:	0002066d 	.word	0x0002066d
   208d4:	000206dd 	.word	0x000206dd
   208d8:	0002061d 	.word	0x0002061d

000208dc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   208dc:	b580      	push	{r7, lr}
   208de:	b092      	sub	sp, #72	; 0x48
   208e0:	af00      	add	r7, sp, #0
   208e2:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   208e4:	2347      	movs	r3, #71	; 0x47
   208e6:	18fb      	adds	r3, r7, r3
   208e8:	2200      	movs	r2, #0
   208ea:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   208ec:	2308      	movs	r3, #8
   208ee:	18fb      	adds	r3, r7, r3
   208f0:	0018      	movs	r0, r3
   208f2:	4b26      	ldr	r3, [pc, #152]	; (2098c <nm_bus_init+0xb0>)
   208f4:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   208f6:	2308      	movs	r3, #8
   208f8:	18fb      	adds	r3, r7, r3
   208fa:	220e      	movs	r2, #14
   208fc:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   208fe:	2308      	movs	r3, #8
   20900:	18fa      	adds	r2, r7, r3
   20902:	4b23      	ldr	r3, [pc, #140]	; (20990 <nm_bus_init+0xb4>)
   20904:	0011      	movs	r1, r2
   20906:	0018      	movs	r0, r3
   20908:	4b22      	ldr	r3, [pc, #136]	; (20994 <nm_bus_init+0xb8>)
   2090a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   2090c:	230c      	movs	r3, #12
   2090e:	18fb      	adds	r3, r7, r3
   20910:	0018      	movs	r0, r3
   20912:	4b21      	ldr	r3, [pc, #132]	; (20998 <nm_bus_init+0xbc>)
   20914:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   20916:	230c      	movs	r3, #12
   20918:	18fb      	adds	r3, r7, r3
   2091a:	22c0      	movs	r2, #192	; 0xc0
   2091c:	0392      	lsls	r2, r2, #14
   2091e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   20920:	230c      	movs	r3, #12
   20922:	18fb      	adds	r3, r7, r3
   20924:	4a1d      	ldr	r2, [pc, #116]	; (2099c <nm_bus_init+0xc0>)
   20926:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   20928:	230c      	movs	r3, #12
   2092a:	18fb      	adds	r3, r7, r3
   2092c:	4a1c      	ldr	r2, [pc, #112]	; (209a0 <nm_bus_init+0xc4>)
   2092e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   20930:	230c      	movs	r3, #12
   20932:	18fb      	adds	r3, r7, r3
   20934:	2201      	movs	r2, #1
   20936:	4252      	negs	r2, r2
   20938:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   2093a:	230c      	movs	r3, #12
   2093c:	18fb      	adds	r3, r7, r3
   2093e:	4a19      	ldr	r2, [pc, #100]	; (209a4 <nm_bus_init+0xc8>)
   20940:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   20942:	230c      	movs	r3, #12
   20944:	18fb      	adds	r3, r7, r3
   20946:	2200      	movs	r2, #0
   20948:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   2094a:	230c      	movs	r3, #12
   2094c:	18fb      	adds	r3, r7, r3
   2094e:	4a16      	ldr	r2, [pc, #88]	; (209a8 <nm_bus_init+0xcc>)
   20950:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   20952:	230c      	movs	r3, #12
   20954:	18fa      	adds	r2, r7, r3
   20956:	4915      	ldr	r1, [pc, #84]	; (209ac <nm_bus_init+0xd0>)
   20958:	4b15      	ldr	r3, [pc, #84]	; (209b0 <nm_bus_init+0xd4>)
   2095a:	0018      	movs	r0, r3
   2095c:	4b15      	ldr	r3, [pc, #84]	; (209b4 <nm_bus_init+0xd8>)
   2095e:	4798      	blx	r3
   20960:	1e03      	subs	r3, r0, #0
   20962:	d002      	beq.n	2096a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   20964:	2306      	movs	r3, #6
   20966:	425b      	negs	r3, r3
   20968:	e00c      	b.n	20984 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   2096a:	4b11      	ldr	r3, [pc, #68]	; (209b0 <nm_bus_init+0xd4>)
   2096c:	0018      	movs	r0, r3
   2096e:	4b12      	ldr	r3, [pc, #72]	; (209b8 <nm_bus_init+0xdc>)
   20970:	4798      	blx	r3

	nm_bsp_reset();
   20972:	4b12      	ldr	r3, [pc, #72]	; (209bc <nm_bus_init+0xe0>)
   20974:	4798      	blx	r3
	nm_bsp_sleep(1);
   20976:	2001      	movs	r0, #1
   20978:	4b11      	ldr	r3, [pc, #68]	; (209c0 <nm_bus_init+0xe4>)
   2097a:	4798      	blx	r3
#endif
	return result;
   2097c:	2347      	movs	r3, #71	; 0x47
   2097e:	18fb      	adds	r3, r7, r3
   20980:	781b      	ldrb	r3, [r3, #0]
   20982:	b25b      	sxtb	r3, r3
}
   20984:	0018      	movs	r0, r3
   20986:	46bd      	mov	sp, r7
   20988:	b012      	add	sp, #72	; 0x48
   2098a:	bd80      	pop	{r7, pc}
   2098c:	000204e9 	.word	0x000204e9
   20990:	20005620 	.word	0x20005620
   20994:	0002050d 	.word	0x0002050d
   20998:	00020465 	.word	0x00020465
   2099c:	000c0002 	.word	0x000c0002
   209a0:	000d0002 	.word	0x000d0002
   209a4:	000f0002 	.word	0x000f0002
   209a8:	00124f80 	.word	0x00124f80
   209ac:	42001000 	.word	0x42001000
   209b0:	20005624 	.word	0x20005624
   209b4:	00027d4d 	.word	0x00027d4d
   209b8:	00020571 	.word	0x00020571
   209bc:	000201e1 	.word	0x000201e1
   209c0:	00020221 	.word	0x00020221

000209c4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   209c4:	b590      	push	{r4, r7, lr}
   209c6:	b085      	sub	sp, #20
   209c8:	af00      	add	r7, sp, #0
   209ca:	0002      	movs	r2, r0
   209cc:	6039      	str	r1, [r7, #0]
   209ce:	1dfb      	adds	r3, r7, #7
   209d0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   209d2:	230f      	movs	r3, #15
   209d4:	18fb      	adds	r3, r7, r3
   209d6:	2200      	movs	r2, #0
   209d8:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   209da:	1dfb      	adds	r3, r7, #7
   209dc:	781b      	ldrb	r3, [r3, #0]
   209de:	2b03      	cmp	r3, #3
   209e0:	d10f      	bne.n	20a02 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   209e2:	683b      	ldr	r3, [r7, #0]
   209e4:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   209e6:	68bb      	ldr	r3, [r7, #8]
   209e8:	6818      	ldr	r0, [r3, #0]
   209ea:	68bb      	ldr	r3, [r7, #8]
   209ec:	6859      	ldr	r1, [r3, #4]
   209ee:	68bb      	ldr	r3, [r7, #8]
   209f0:	891b      	ldrh	r3, [r3, #8]
   209f2:	220f      	movs	r2, #15
   209f4:	18bc      	adds	r4, r7, r2
   209f6:	001a      	movs	r2, r3
   209f8:	4b10      	ldr	r3, [pc, #64]	; (20a3c <nm_bus_ioctl+0x78>)
   209fa:	4798      	blx	r3
   209fc:	0003      	movs	r3, r0
   209fe:	7023      	strb	r3, [r4, #0]
		}
		break;
   20a00:	e013      	b.n	20a2a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   20a02:	230f      	movs	r3, #15
   20a04:	18fb      	adds	r3, r7, r3
   20a06:	22ff      	movs	r2, #255	; 0xff
   20a08:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   20a0a:	2383      	movs	r3, #131	; 0x83
   20a0c:	005a      	lsls	r2, r3, #1
   20a0e:	490c      	ldr	r1, [pc, #48]	; (20a40 <nm_bus_ioctl+0x7c>)
   20a10:	4b0c      	ldr	r3, [pc, #48]	; (20a44 <nm_bus_ioctl+0x80>)
   20a12:	0018      	movs	r0, r3
   20a14:	4b0c      	ldr	r3, [pc, #48]	; (20a48 <nm_bus_ioctl+0x84>)
   20a16:	4798      	blx	r3
   20a18:	4b0c      	ldr	r3, [pc, #48]	; (20a4c <nm_bus_ioctl+0x88>)
   20a1a:	0018      	movs	r0, r3
   20a1c:	4b0a      	ldr	r3, [pc, #40]	; (20a48 <nm_bus_ioctl+0x84>)
   20a1e:	4798      	blx	r3
   20a20:	4b0b      	ldr	r3, [pc, #44]	; (20a50 <nm_bus_ioctl+0x8c>)
   20a22:	0018      	movs	r0, r3
   20a24:	4b08      	ldr	r3, [pc, #32]	; (20a48 <nm_bus_ioctl+0x84>)
   20a26:	4798      	blx	r3
			break;
   20a28:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   20a2a:	230f      	movs	r3, #15
   20a2c:	18fb      	adds	r3, r7, r3
   20a2e:	781b      	ldrb	r3, [r3, #0]
   20a30:	b25b      	sxtb	r3, r3
}
   20a32:	0018      	movs	r0, r3
   20a34:	46bd      	mov	sp, r7
   20a36:	b005      	add	sp, #20
   20a38:	bd90      	pop	{r4, r7, pc}
   20a3a:	46c0      	nop			; (mov r8, r8)
   20a3c:	00020765 	.word	0x00020765
   20a40:	000380d0 	.word	0x000380d0
   20a44:	000380a4 	.word	0x000380a4
   20a48:	0001e189 	.word	0x0001e189
   20a4c:	000380b8 	.word	0x000380b8
   20a50:	000380cc 	.word	0x000380cc

00020a54 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   20a54:	b580      	push	{r7, lr}
   20a56:	b082      	sub	sp, #8
   20a58:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   20a5a:	1dfb      	adds	r3, r7, #7
   20a5c:	2200      	movs	r2, #0
   20a5e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   20a60:	1d3b      	adds	r3, r7, #4
   20a62:	0018      	movs	r0, r3
   20a64:	4b13      	ldr	r3, [pc, #76]	; (20ab4 <nm_bus_deinit+0x60>)
   20a66:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   20a68:	1d3b      	adds	r3, r7, #4
   20a6a:	2200      	movs	r2, #0
   20a6c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   20a6e:	1d3b      	adds	r3, r7, #4
   20a70:	2200      	movs	r2, #0
   20a72:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   20a74:	4b10      	ldr	r3, [pc, #64]	; (20ab8 <nm_bus_deinit+0x64>)
   20a76:	0018      	movs	r0, r3
   20a78:	4b10      	ldr	r3, [pc, #64]	; (20abc <nm_bus_deinit+0x68>)
   20a7a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   20a7c:	1d3b      	adds	r3, r7, #4
   20a7e:	0019      	movs	r1, r3
   20a80:	200c      	movs	r0, #12
   20a82:	4b0f      	ldr	r3, [pc, #60]	; (20ac0 <nm_bus_deinit+0x6c>)
   20a84:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   20a86:	1d3b      	adds	r3, r7, #4
   20a88:	0019      	movs	r1, r3
   20a8a:	200f      	movs	r0, #15
   20a8c:	4b0c      	ldr	r3, [pc, #48]	; (20ac0 <nm_bus_deinit+0x6c>)
   20a8e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   20a90:	1d3b      	adds	r3, r7, #4
   20a92:	0019      	movs	r1, r3
   20a94:	200d      	movs	r0, #13
   20a96:	4b0a      	ldr	r3, [pc, #40]	; (20ac0 <nm_bus_deinit+0x6c>)
   20a98:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   20a9a:	1d3b      	adds	r3, r7, #4
   20a9c:	0019      	movs	r1, r3
   20a9e:	200e      	movs	r0, #14
   20aa0:	4b07      	ldr	r3, [pc, #28]	; (20ac0 <nm_bus_deinit+0x6c>)
   20aa2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   20aa4:	1dfb      	adds	r3, r7, #7
   20aa6:	781b      	ldrb	r3, [r3, #0]
   20aa8:	b25b      	sxtb	r3, r3
}
   20aaa:	0018      	movs	r0, r3
   20aac:	46bd      	mov	sp, r7
   20aae:	b002      	add	sp, #8
   20ab0:	bd80      	pop	{r7, pc}
   20ab2:	46c0      	nop			; (mov r8, r8)
   20ab4:	000203cd 	.word	0x000203cd
   20ab8:	20005624 	.word	0x20005624
   20abc:	000205c1 	.word	0x000205c1
   20ac0:	000268cd 	.word	0x000268cd

00020ac4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   20ac4:	b580      	push	{r7, lr}
   20ac6:	b084      	sub	sp, #16
   20ac8:	af00      	add	r7, sp, #0
   20aca:	60f8      	str	r0, [r7, #12]
   20acc:	60b9      	str	r1, [r7, #8]
   20ace:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   20ad0:	687b      	ldr	r3, [r7, #4]
   20ad2:	2b00      	cmp	r3, #0
   20ad4:	d010      	beq.n	20af8 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   20ad6:	68bb      	ldr	r3, [r7, #8]
   20ad8:	781a      	ldrb	r2, [r3, #0]
   20ada:	68fb      	ldr	r3, [r7, #12]
   20adc:	701a      	strb	r2, [r3, #0]
		pDst++;
   20ade:	68fb      	ldr	r3, [r7, #12]
   20ae0:	3301      	adds	r3, #1
   20ae2:	60fb      	str	r3, [r7, #12]
		pSrc++;
   20ae4:	68bb      	ldr	r3, [r7, #8]
   20ae6:	3301      	adds	r3, #1
   20ae8:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   20aea:	687b      	ldr	r3, [r7, #4]
   20aec:	3b01      	subs	r3, #1
   20aee:	607b      	str	r3, [r7, #4]
   20af0:	687b      	ldr	r3, [r7, #4]
   20af2:	2b00      	cmp	r3, #0
   20af4:	d1ef      	bne.n	20ad6 <m2m_memcpy+0x12>
   20af6:	e000      	b.n	20afa <m2m_memcpy+0x36>
	if(sz == 0) return;
   20af8:	46c0      	nop			; (mov r8, r8)
}
   20afa:	46bd      	mov	sp, r7
   20afc:	b004      	add	sp, #16
   20afe:	bd80      	pop	{r7, pc}

00020b00 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   20b00:	b580      	push	{r7, lr}
   20b02:	b084      	sub	sp, #16
   20b04:	af00      	add	r7, sp, #0
   20b06:	60f8      	str	r0, [r7, #12]
   20b08:	607a      	str	r2, [r7, #4]
   20b0a:	230b      	movs	r3, #11
   20b0c:	18fb      	adds	r3, r7, r3
   20b0e:	1c0a      	adds	r2, r1, #0
   20b10:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   20b12:	687b      	ldr	r3, [r7, #4]
   20b14:	2b00      	cmp	r3, #0
   20b16:	d00e      	beq.n	20b36 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   20b18:	68fb      	ldr	r3, [r7, #12]
   20b1a:	220b      	movs	r2, #11
   20b1c:	18ba      	adds	r2, r7, r2
   20b1e:	7812      	ldrb	r2, [r2, #0]
   20b20:	701a      	strb	r2, [r3, #0]
		pBuf++;
   20b22:	68fb      	ldr	r3, [r7, #12]
   20b24:	3301      	adds	r3, #1
   20b26:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   20b28:	687b      	ldr	r3, [r7, #4]
   20b2a:	3b01      	subs	r3, #1
   20b2c:	607b      	str	r3, [r7, #4]
   20b2e:	687b      	ldr	r3, [r7, #4]
   20b30:	2b00      	cmp	r3, #0
   20b32:	d1f1      	bne.n	20b18 <m2m_memset+0x18>
   20b34:	e000      	b.n	20b38 <m2m_memset+0x38>
	if(sz == 0) return;
   20b36:	46c0      	nop			; (mov r8, r8)
}
   20b38:	46bd      	mov	sp, r7
   20b3a:	b004      	add	sp, #16
   20b3c:	bd80      	pop	{r7, pc}

00020b3e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   20b3e:	b580      	push	{r7, lr}
   20b40:	b084      	sub	sp, #16
   20b42:	af00      	add	r7, sp, #0
   20b44:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   20b46:	230e      	movs	r3, #14
   20b48:	18fb      	adds	r3, r7, r3
   20b4a:	2200      	movs	r2, #0
   20b4c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   20b4e:	e009      	b.n	20b64 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   20b50:	230e      	movs	r3, #14
   20b52:	18fb      	adds	r3, r7, r3
   20b54:	881a      	ldrh	r2, [r3, #0]
   20b56:	230e      	movs	r3, #14
   20b58:	18fb      	adds	r3, r7, r3
   20b5a:	3201      	adds	r2, #1
   20b5c:	801a      	strh	r2, [r3, #0]
		pcStr++;
   20b5e:	687b      	ldr	r3, [r7, #4]
   20b60:	3301      	adds	r3, #1
   20b62:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   20b64:	687b      	ldr	r3, [r7, #4]
   20b66:	781b      	ldrb	r3, [r3, #0]
   20b68:	2b00      	cmp	r3, #0
   20b6a:	d1f1      	bne.n	20b50 <m2m_strlen+0x12>
	}
	return u16StrLen;
   20b6c:	230e      	movs	r3, #14
   20b6e:	18fb      	adds	r3, r7, r3
   20b70:	881b      	ldrh	r3, [r3, #0]
}
   20b72:	0018      	movs	r0, r3
   20b74:	46bd      	mov	sp, r7
   20b76:	b004      	add	sp, #16
   20b78:	bd80      	pop	{r7, pc}
	...

00020b7c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   20b7c:	b580      	push	{r7, lr}
   20b7e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   20b80:	4b04      	ldr	r3, [pc, #16]	; (20b94 <isr+0x18>)
   20b82:	78db      	ldrb	r3, [r3, #3]
   20b84:	b2db      	uxtb	r3, r3
   20b86:	3301      	adds	r3, #1
   20b88:	b2da      	uxtb	r2, r3
   20b8a:	4b02      	ldr	r3, [pc, #8]	; (20b94 <isr+0x18>)
   20b8c:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   20b8e:	46c0      	nop			; (mov r8, r8)
   20b90:	46bd      	mov	sp, r7
   20b92:	bd80      	pop	{r7, pc}
   20b94:	20005660 	.word	0x20005660

00020b98 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   20b98:	b590      	push	{r4, r7, lr}
   20b9a:	b083      	sub	sp, #12
   20b9c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   20b9e:	1dfb      	adds	r3, r7, #7
   20ba0:	2200      	movs	r2, #0
   20ba2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   20ba4:	4b14      	ldr	r3, [pc, #80]	; (20bf8 <hif_set_rx_done+0x60>)
   20ba6:	2200      	movs	r2, #0
   20ba8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   20baa:	2001      	movs	r0, #1
   20bac:	4b13      	ldr	r3, [pc, #76]	; (20bfc <hif_set_rx_done+0x64>)
   20bae:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   20bb0:	1dfc      	adds	r4, r7, #7
   20bb2:	003b      	movs	r3, r7
   20bb4:	4a12      	ldr	r2, [pc, #72]	; (20c00 <hif_set_rx_done+0x68>)
   20bb6:	0019      	movs	r1, r3
   20bb8:	0010      	movs	r0, r2
   20bba:	4b12      	ldr	r3, [pc, #72]	; (20c04 <hif_set_rx_done+0x6c>)
   20bbc:	4798      	blx	r3
   20bbe:	0003      	movs	r3, r0
   20bc0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   20bc2:	1dfb      	adds	r3, r7, #7
   20bc4:	781b      	ldrb	r3, [r3, #0]
   20bc6:	b25b      	sxtb	r3, r3
   20bc8:	2b00      	cmp	r3, #0
   20bca:	d10d      	bne.n	20be8 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   20bcc:	683b      	ldr	r3, [r7, #0]
   20bce:	2202      	movs	r2, #2
   20bd0:	4313      	orrs	r3, r2
   20bd2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   20bd4:	683b      	ldr	r3, [r7, #0]
   20bd6:	1dfc      	adds	r4, r7, #7
   20bd8:	4a09      	ldr	r2, [pc, #36]	; (20c00 <hif_set_rx_done+0x68>)
   20bda:	0019      	movs	r1, r3
   20bdc:	0010      	movs	r0, r2
   20bde:	4b0a      	ldr	r3, [pc, #40]	; (20c08 <hif_set_rx_done+0x70>)
   20be0:	4798      	blx	r3
   20be2:	0003      	movs	r3, r0
   20be4:	7023      	strb	r3, [r4, #0]
   20be6:	e000      	b.n	20bea <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   20be8:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   20bea:	1dfb      	adds	r3, r7, #7
   20bec:	781b      	ldrb	r3, [r3, #0]
   20bee:	b25b      	sxtb	r3, r3

}
   20bf0:	0018      	movs	r0, r3
   20bf2:	46bd      	mov	sp, r7
   20bf4:	b003      	add	sp, #12
   20bf6:	bd90      	pop	{r4, r7, pc}
   20bf8:	20005660 	.word	0x20005660
   20bfc:	000202b5 	.word	0x000202b5
   20c00:	00001070 	.word	0x00001070
   20c04:	00022b91 	.word	0x00022b91
   20c08:	00022bb5 	.word	0x00022bb5

00020c0c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   20c0c:	b580      	push	{r7, lr}
   20c0e:	b082      	sub	sp, #8
   20c10:	af00      	add	r7, sp, #0
   20c12:	603a      	str	r2, [r7, #0]
   20c14:	1dfb      	adds	r3, r7, #7
   20c16:	1c02      	adds	r2, r0, #0
   20c18:	701a      	strb	r2, [r3, #0]
   20c1a:	1d3b      	adds	r3, r7, #4
   20c1c:	1c0a      	adds	r2, r1, #0
   20c1e:	801a      	strh	r2, [r3, #0]


}
   20c20:	46c0      	nop			; (mov r8, r8)
   20c22:	46bd      	mov	sp, r7
   20c24:	b002      	add	sp, #8
   20c26:	bd80      	pop	{r7, pc}

00020c28 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   20c28:	b590      	push	{r4, r7, lr}
   20c2a:	b083      	sub	sp, #12
   20c2c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   20c2e:	1dfb      	adds	r3, r7, #7
   20c30:	2200      	movs	r2, #0
   20c32:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   20c34:	4b16      	ldr	r3, [pc, #88]	; (20c90 <hif_chip_wake+0x68>)
   20c36:	789b      	ldrb	r3, [r3, #2]
   20c38:	b2db      	uxtb	r3, r3
   20c3a:	2b00      	cmp	r3, #0
   20c3c:	d003      	beq.n	20c46 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   20c3e:	1dfb      	adds	r3, r7, #7
   20c40:	781b      	ldrb	r3, [r3, #0]
   20c42:	b25b      	sxtb	r3, r3
   20c44:	e01f      	b.n	20c86 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   20c46:	4b12      	ldr	r3, [pc, #72]	; (20c90 <hif_chip_wake+0x68>)
   20c48:	785b      	ldrb	r3, [r3, #1]
   20c4a:	b2db      	uxtb	r3, r3
   20c4c:	2b00      	cmp	r3, #0
   20c4e:	d10e      	bne.n	20c6e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   20c50:	4b0f      	ldr	r3, [pc, #60]	; (20c90 <hif_chip_wake+0x68>)
   20c52:	781b      	ldrb	r3, [r3, #0]
   20c54:	b2db      	uxtb	r3, r3
   20c56:	2b00      	cmp	r3, #0
   20c58:	d009      	beq.n	20c6e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   20c5a:	1dfc      	adds	r4, r7, #7
   20c5c:	4b0d      	ldr	r3, [pc, #52]	; (20c94 <hif_chip_wake+0x6c>)
   20c5e:	4798      	blx	r3
   20c60:	0003      	movs	r3, r0
   20c62:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20c64:	1dfb      	adds	r3, r7, #7
   20c66:	781b      	ldrb	r3, [r3, #0]
   20c68:	b25b      	sxtb	r3, r3
   20c6a:	2b00      	cmp	r3, #0
   20c6c:	d107      	bne.n	20c7e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   20c6e:	4b08      	ldr	r3, [pc, #32]	; (20c90 <hif_chip_wake+0x68>)
   20c70:	785b      	ldrb	r3, [r3, #1]
   20c72:	b2db      	uxtb	r3, r3
   20c74:	3301      	adds	r3, #1
   20c76:	b2da      	uxtb	r2, r3
   20c78:	4b05      	ldr	r3, [pc, #20]	; (20c90 <hif_chip_wake+0x68>)
   20c7a:	705a      	strb	r2, [r3, #1]
   20c7c:	e000      	b.n	20c80 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   20c7e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   20c80:	1dfb      	adds	r3, r7, #7
   20c82:	781b      	ldrb	r3, [r3, #0]
   20c84:	b25b      	sxtb	r3, r3
}
   20c86:	0018      	movs	r0, r3
   20c88:	46bd      	mov	sp, r7
   20c8a:	b003      	add	sp, #12
   20c8c:	bd90      	pop	{r4, r7, pc}
   20c8e:	46c0      	nop			; (mov r8, r8)
   20c90:	20005660 	.word	0x20005660
   20c94:	00022661 	.word	0x00022661

00020c98 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   20c98:	b580      	push	{r7, lr}
   20c9a:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   20c9c:	4b07      	ldr	r3, [pc, #28]	; (20cbc <hif_chip_sleep_sc+0x24>)
   20c9e:	785b      	ldrb	r3, [r3, #1]
   20ca0:	b2db      	uxtb	r3, r3
   20ca2:	2b00      	cmp	r3, #0
   20ca4:	d006      	beq.n	20cb4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   20ca6:	4b05      	ldr	r3, [pc, #20]	; (20cbc <hif_chip_sleep_sc+0x24>)
   20ca8:	785b      	ldrb	r3, [r3, #1]
   20caa:	b2db      	uxtb	r3, r3
   20cac:	3b01      	subs	r3, #1
   20cae:	b2da      	uxtb	r2, r3
   20cb0:	4b02      	ldr	r3, [pc, #8]	; (20cbc <hif_chip_sleep_sc+0x24>)
   20cb2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   20cb4:	2300      	movs	r3, #0
}
   20cb6:	0018      	movs	r0, r3
   20cb8:	46bd      	mov	sp, r7
   20cba:	bd80      	pop	{r7, pc}
   20cbc:	20005660 	.word	0x20005660

00020cc0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   20cc0:	b590      	push	{r4, r7, lr}
   20cc2:	b083      	sub	sp, #12
   20cc4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   20cc6:	1dfb      	adds	r3, r7, #7
   20cc8:	2200      	movs	r2, #0
   20cca:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   20ccc:	4b10      	ldr	r3, [pc, #64]	; (20d10 <hif_chip_sleep+0x50>)
   20cce:	785b      	ldrb	r3, [r3, #1]
   20cd0:	b2db      	uxtb	r3, r3
   20cd2:	2b00      	cmp	r3, #0
   20cd4:	d006      	beq.n	20ce4 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   20cd6:	4b0e      	ldr	r3, [pc, #56]	; (20d10 <hif_chip_sleep+0x50>)
   20cd8:	785b      	ldrb	r3, [r3, #1]
   20cda:	b2db      	uxtb	r3, r3
   20cdc:	3b01      	subs	r3, #1
   20cde:	b2da      	uxtb	r2, r3
   20ce0:	4b0b      	ldr	r3, [pc, #44]	; (20d10 <hif_chip_sleep+0x50>)
   20ce2:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   20ce4:	4b0a      	ldr	r3, [pc, #40]	; (20d10 <hif_chip_sleep+0x50>)
   20ce6:	785b      	ldrb	r3, [r3, #1]
   20ce8:	b2db      	uxtb	r3, r3
   20cea:	2b00      	cmp	r3, #0
   20cec:	d109      	bne.n	20d02 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   20cee:	4b08      	ldr	r3, [pc, #32]	; (20d10 <hif_chip_sleep+0x50>)
   20cf0:	781b      	ldrb	r3, [r3, #0]
   20cf2:	b2db      	uxtb	r3, r3
   20cf4:	2b00      	cmp	r3, #0
   20cf6:	d004      	beq.n	20d02 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   20cf8:	1dfc      	adds	r4, r7, #7
   20cfa:	4b06      	ldr	r3, [pc, #24]	; (20d14 <hif_chip_sleep+0x54>)
   20cfc:	4798      	blx	r3
   20cfe:	0003      	movs	r3, r0
   20d00:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   20d02:	1dfb      	adds	r3, r7, #7
   20d04:	781b      	ldrb	r3, [r3, #0]
   20d06:	b25b      	sxtb	r3, r3
}
   20d08:	0018      	movs	r0, r3
   20d0a:	46bd      	mov	sp, r7
   20d0c:	b003      	add	sp, #12
   20d0e:	bd90      	pop	{r4, r7, pc}
   20d10:	20005660 	.word	0x20005660
   20d14:	00022589 	.word	0x00022589

00020d18 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   20d18:	b580      	push	{r7, lr}
   20d1a:	b082      	sub	sp, #8
   20d1c:	af00      	add	r7, sp, #0
   20d1e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   20d20:	4b09      	ldr	r3, [pc, #36]	; (20d48 <hif_init+0x30>)
   20d22:	222c      	movs	r2, #44	; 0x2c
   20d24:	2100      	movs	r1, #0
   20d26:	0018      	movs	r0, r3
   20d28:	4b08      	ldr	r3, [pc, #32]	; (20d4c <hif_init+0x34>)
   20d2a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   20d2c:	4b08      	ldr	r3, [pc, #32]	; (20d50 <hif_init+0x38>)
   20d2e:	0018      	movs	r0, r3
   20d30:	4b08      	ldr	r3, [pc, #32]	; (20d54 <hif_init+0x3c>)
   20d32:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   20d34:	4b08      	ldr	r3, [pc, #32]	; (20d58 <hif_init+0x40>)
   20d36:	0019      	movs	r1, r3
   20d38:	2003      	movs	r0, #3
   20d3a:	4b08      	ldr	r3, [pc, #32]	; (20d5c <hif_init+0x44>)
   20d3c:	4798      	blx	r3
	return M2M_SUCCESS;
   20d3e:	2300      	movs	r3, #0
}
   20d40:	0018      	movs	r0, r3
   20d42:	46bd      	mov	sp, r7
   20d44:	b002      	add	sp, #8
   20d46:	bd80      	pop	{r7, pc}
   20d48:	20005660 	.word	0x20005660
   20d4c:	00020b01 	.word	0x00020b01
   20d50:	00020b7d 	.word	0x00020b7d
   20d54:	0002023d 	.word	0x0002023d
   20d58:	00020c0d 	.word	0x00020c0d
   20d5c:	000217fd 	.word	0x000217fd

00020d60 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   20d60:	b590      	push	{r4, r7, lr}
   20d62:	b089      	sub	sp, #36	; 0x24
   20d64:	af00      	add	r7, sp, #0
   20d66:	0004      	movs	r4, r0
   20d68:	0008      	movs	r0, r1
   20d6a:	603a      	str	r2, [r7, #0]
   20d6c:	0019      	movs	r1, r3
   20d6e:	1dfb      	adds	r3, r7, #7
   20d70:	1c22      	adds	r2, r4, #0
   20d72:	701a      	strb	r2, [r3, #0]
   20d74:	1dbb      	adds	r3, r7, #6
   20d76:	1c02      	adds	r2, r0, #0
   20d78:	701a      	strb	r2, [r3, #0]
   20d7a:	1d3b      	adds	r3, r7, #4
   20d7c:	1c0a      	adds	r2, r1, #0
   20d7e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   20d80:	231f      	movs	r3, #31
   20d82:	18fb      	adds	r3, r7, r3
   20d84:	22ff      	movs	r2, #255	; 0xff
   20d86:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   20d88:	1dbb      	adds	r3, r7, #6
   20d8a:	781b      	ldrb	r3, [r3, #0]
   20d8c:	227f      	movs	r2, #127	; 0x7f
   20d8e:	4013      	ands	r3, r2
   20d90:	b2da      	uxtb	r2, r3
   20d92:	2318      	movs	r3, #24
   20d94:	18fb      	adds	r3, r7, r3
   20d96:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   20d98:	2318      	movs	r3, #24
   20d9a:	18fb      	adds	r3, r7, r3
   20d9c:	1dfa      	adds	r2, r7, #7
   20d9e:	7812      	ldrb	r2, [r2, #0]
   20da0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   20da2:	2318      	movs	r3, #24
   20da4:	18fb      	adds	r3, r7, r3
   20da6:	2208      	movs	r2, #8
   20da8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   20daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20dac:	2b00      	cmp	r3, #0
   20dae:	d011      	beq.n	20dd4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   20db0:	2318      	movs	r3, #24
   20db2:	18fb      	adds	r3, r7, r3
   20db4:	885b      	ldrh	r3, [r3, #2]
   20db6:	b29a      	uxth	r2, r3
   20db8:	2338      	movs	r3, #56	; 0x38
   20dba:	18f9      	adds	r1, r7, r3
   20dbc:	2334      	movs	r3, #52	; 0x34
   20dbe:	18fb      	adds	r3, r7, r3
   20dc0:	8809      	ldrh	r1, [r1, #0]
   20dc2:	881b      	ldrh	r3, [r3, #0]
   20dc4:	18cb      	adds	r3, r1, r3
   20dc6:	b29b      	uxth	r3, r3
   20dc8:	18d3      	adds	r3, r2, r3
   20dca:	b29a      	uxth	r2, r3
   20dcc:	2318      	movs	r3, #24
   20dce:	18fb      	adds	r3, r7, r3
   20dd0:	805a      	strh	r2, [r3, #2]
   20dd2:	e00a      	b.n	20dea <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   20dd4:	2318      	movs	r3, #24
   20dd6:	18fb      	adds	r3, r7, r3
   20dd8:	885b      	ldrh	r3, [r3, #2]
   20dda:	b29a      	uxth	r2, r3
   20ddc:	1d3b      	adds	r3, r7, #4
   20dde:	881b      	ldrh	r3, [r3, #0]
   20de0:	18d3      	adds	r3, r2, r3
   20de2:	b29a      	uxth	r2, r3
   20de4:	2318      	movs	r3, #24
   20de6:	18fb      	adds	r3, r7, r3
   20de8:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   20dea:	231f      	movs	r3, #31
   20dec:	18fc      	adds	r4, r7, r3
   20dee:	4bb2      	ldr	r3, [pc, #712]	; (210b8 <hif_send+0x358>)
   20df0:	4798      	blx	r3
   20df2:	0003      	movs	r3, r0
   20df4:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   20df6:	231f      	movs	r3, #31
   20df8:	18fb      	adds	r3, r7, r3
   20dfa:	781b      	ldrb	r3, [r3, #0]
   20dfc:	b25b      	sxtb	r3, r3
   20dfe:	2b00      	cmp	r3, #0
   20e00:	d000      	beq.n	20e04 <hif_send+0xa4>
   20e02:	e129      	b.n	21058 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   20e04:	2300      	movs	r3, #0
   20e06:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   20e08:	230e      	movs	r3, #14
   20e0a:	18fb      	adds	r3, r7, r3
   20e0c:	2200      	movs	r2, #0
   20e0e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   20e10:	2300      	movs	r3, #0
   20e12:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   20e14:	1dfb      	adds	r3, r7, #7
   20e16:	781a      	ldrb	r2, [r3, #0]
   20e18:	697b      	ldr	r3, [r7, #20]
   20e1a:	4313      	orrs	r3, r2
   20e1c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   20e1e:	1dbb      	adds	r3, r7, #6
   20e20:	781b      	ldrb	r3, [r3, #0]
   20e22:	021a      	lsls	r2, r3, #8
   20e24:	697b      	ldr	r3, [r7, #20]
   20e26:	4313      	orrs	r3, r2
   20e28:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   20e2a:	2318      	movs	r3, #24
   20e2c:	18fb      	adds	r3, r7, r3
   20e2e:	885b      	ldrh	r3, [r3, #2]
   20e30:	b29b      	uxth	r3, r3
   20e32:	041a      	lsls	r2, r3, #16
   20e34:	697b      	ldr	r3, [r7, #20]
   20e36:	4313      	orrs	r3, r2
   20e38:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   20e3a:	697b      	ldr	r3, [r7, #20]
   20e3c:	221f      	movs	r2, #31
   20e3e:	18bc      	adds	r4, r7, r2
   20e40:	4a9e      	ldr	r2, [pc, #632]	; (210bc <hif_send+0x35c>)
   20e42:	0019      	movs	r1, r3
   20e44:	0010      	movs	r0, r2
   20e46:	4b9e      	ldr	r3, [pc, #632]	; (210c0 <hif_send+0x360>)
   20e48:	4798      	blx	r3
   20e4a:	0003      	movs	r3, r0
   20e4c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   20e4e:	231f      	movs	r3, #31
   20e50:	18fb      	adds	r3, r7, r3
   20e52:	781b      	ldrb	r3, [r3, #0]
   20e54:	b25b      	sxtb	r3, r3
   20e56:	2b00      	cmp	r3, #0
   20e58:	d000      	beq.n	20e5c <hif_send+0xfc>
   20e5a:	e119      	b.n	21090 <hif_send+0x330>

		reg = 0UL;
   20e5c:	2300      	movs	r3, #0
   20e5e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   20e60:	697b      	ldr	r3, [r7, #20]
   20e62:	2202      	movs	r2, #2
   20e64:	4313      	orrs	r3, r2
   20e66:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   20e68:	697b      	ldr	r3, [r7, #20]
   20e6a:	221f      	movs	r2, #31
   20e6c:	18bc      	adds	r4, r7, r2
   20e6e:	4a95      	ldr	r2, [pc, #596]	; (210c4 <hif_send+0x364>)
   20e70:	0019      	movs	r1, r3
   20e72:	0010      	movs	r0, r2
   20e74:	4b92      	ldr	r3, [pc, #584]	; (210c0 <hif_send+0x360>)
   20e76:	4798      	blx	r3
   20e78:	0003      	movs	r3, r0
   20e7a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   20e7c:	231f      	movs	r3, #31
   20e7e:	18fb      	adds	r3, r7, r3
   20e80:	781b      	ldrb	r3, [r3, #0]
   20e82:	b25b      	sxtb	r3, r3
   20e84:	2b00      	cmp	r3, #0
   20e86:	d000      	beq.n	20e8a <hif_send+0x12a>
   20e88:	e104      	b.n	21094 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   20e8a:	2300      	movs	r3, #0
   20e8c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   20e8e:	230e      	movs	r3, #14
   20e90:	18fb      	adds	r3, r7, r3
   20e92:	2200      	movs	r2, #0
   20e94:	801a      	strh	r2, [r3, #0]
   20e96:	e050      	b.n	20f3a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   20e98:	231f      	movs	r3, #31
   20e9a:	18fc      	adds	r4, r7, r3
   20e9c:	2314      	movs	r3, #20
   20e9e:	18fb      	adds	r3, r7, r3
   20ea0:	4a88      	ldr	r2, [pc, #544]	; (210c4 <hif_send+0x364>)
   20ea2:	0019      	movs	r1, r3
   20ea4:	0010      	movs	r0, r2
   20ea6:	4b88      	ldr	r3, [pc, #544]	; (210c8 <hif_send+0x368>)
   20ea8:	4798      	blx	r3
   20eaa:	0003      	movs	r3, r0
   20eac:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   20eae:	231f      	movs	r3, #31
   20eb0:	18fb      	adds	r3, r7, r3
   20eb2:	781b      	ldrb	r3, [r3, #0]
   20eb4:	b25b      	sxtb	r3, r3
   20eb6:	2b00      	cmp	r3, #0
   20eb8:	d147      	bne.n	20f4a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   20eba:	230e      	movs	r3, #14
   20ebc:	18fb      	adds	r3, r7, r3
   20ebe:	881b      	ldrh	r3, [r3, #0]
   20ec0:	b29a      	uxth	r2, r3
   20ec2:	23f4      	movs	r3, #244	; 0xf4
   20ec4:	33ff      	adds	r3, #255	; 0xff
   20ec6:	429a      	cmp	r2, r3
   20ec8:	d916      	bls.n	20ef8 <hif_send+0x198>
				if(cnt < 501) {
   20eca:	230e      	movs	r3, #14
   20ecc:	18fb      	adds	r3, r7, r3
   20ece:	881b      	ldrh	r3, [r3, #0]
   20ed0:	b29a      	uxth	r2, r3
   20ed2:	23fa      	movs	r3, #250	; 0xfa
   20ed4:	005b      	lsls	r3, r3, #1
   20ed6:	429a      	cmp	r2, r3
   20ed8:	d80b      	bhi.n	20ef2 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   20eda:	4b7c      	ldr	r3, [pc, #496]	; (210cc <hif_send+0x36c>)
   20edc:	0018      	movs	r0, r3
   20ede:	4b7c      	ldr	r3, [pc, #496]	; (210d0 <hif_send+0x370>)
   20ee0:	4798      	blx	r3
   20ee2:	4b7c      	ldr	r3, [pc, #496]	; (210d4 <hif_send+0x374>)
   20ee4:	0018      	movs	r0, r3
   20ee6:	4b7a      	ldr	r3, [pc, #488]	; (210d0 <hif_send+0x370>)
   20ee8:	4798      	blx	r3
   20eea:	4b7b      	ldr	r3, [pc, #492]	; (210d8 <hif_send+0x378>)
   20eec:	0018      	movs	r0, r3
   20eee:	4b78      	ldr	r3, [pc, #480]	; (210d0 <hif_send+0x370>)
   20ef0:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   20ef2:	2001      	movs	r0, #1
   20ef4:	4b79      	ldr	r3, [pc, #484]	; (210dc <hif_send+0x37c>)
   20ef6:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   20ef8:	697b      	ldr	r3, [r7, #20]
   20efa:	2202      	movs	r2, #2
   20efc:	4013      	ands	r3, r2
   20efe:	d113      	bne.n	20f28 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   20f00:	231f      	movs	r3, #31
   20f02:	18fc      	adds	r4, r7, r3
   20f04:	2310      	movs	r3, #16
   20f06:	18fb      	adds	r3, r7, r3
   20f08:	4a75      	ldr	r2, [pc, #468]	; (210e0 <hif_send+0x380>)
   20f0a:	0019      	movs	r1, r3
   20f0c:	0010      	movs	r0, r2
   20f0e:	4b6e      	ldr	r3, [pc, #440]	; (210c8 <hif_send+0x368>)
   20f10:	4798      	blx	r3
   20f12:	0003      	movs	r3, r0
   20f14:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   20f16:	231f      	movs	r3, #31
   20f18:	18fb      	adds	r3, r7, r3
   20f1a:	781b      	ldrb	r3, [r3, #0]
   20f1c:	b25b      	sxtb	r3, r3
   20f1e:	2b00      	cmp	r3, #0
   20f20:	d015      	beq.n	20f4e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   20f22:	2300      	movs	r3, #0
   20f24:	613b      	str	r3, [r7, #16]
					goto ERR1;
   20f26:	e0bc      	b.n	210a2 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   20f28:	230e      	movs	r3, #14
   20f2a:	18fb      	adds	r3, r7, r3
   20f2c:	881b      	ldrh	r3, [r3, #0]
   20f2e:	b29b      	uxth	r3, r3
   20f30:	3301      	adds	r3, #1
   20f32:	b29a      	uxth	r2, r3
   20f34:	230e      	movs	r3, #14
   20f36:	18fb      	adds	r3, r7, r3
   20f38:	801a      	strh	r2, [r3, #0]
   20f3a:	230e      	movs	r3, #14
   20f3c:	18fb      	adds	r3, r7, r3
   20f3e:	881b      	ldrh	r3, [r3, #0]
   20f40:	b29b      	uxth	r3, r3
   20f42:	4a68      	ldr	r2, [pc, #416]	; (210e4 <hif_send+0x384>)
   20f44:	4293      	cmp	r3, r2
   20f46:	d9a7      	bls.n	20e98 <hif_send+0x138>
   20f48:	e002      	b.n	20f50 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   20f4a:	46c0      	nop			; (mov r8, r8)
   20f4c:	e000      	b.n	20f50 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   20f4e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   20f50:	693b      	ldr	r3, [r7, #16]
   20f52:	2b00      	cmp	r3, #0
   20f54:	d100      	bne.n	20f58 <hif_send+0x1f8>
   20f56:	e074      	b.n	21042 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   20f58:	693b      	ldr	r3, [r7, #16]
   20f5a:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   20f5c:	2318      	movs	r3, #24
   20f5e:	18fb      	adds	r3, r7, r3
   20f60:	885b      	ldrh	r3, [r3, #2]
   20f62:	b29a      	uxth	r2, r3
   20f64:	2318      	movs	r3, #24
   20f66:	18fb      	adds	r3, r7, r3
   20f68:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   20f6a:	68bb      	ldr	r3, [r7, #8]
   20f6c:	221f      	movs	r2, #31
   20f6e:	18bc      	adds	r4, r7, r2
   20f70:	2218      	movs	r2, #24
   20f72:	18b9      	adds	r1, r7, r2
   20f74:	2208      	movs	r2, #8
   20f76:	0018      	movs	r0, r3
   20f78:	4b5b      	ldr	r3, [pc, #364]	; (210e8 <hif_send+0x388>)
   20f7a:	4798      	blx	r3
   20f7c:	0003      	movs	r3, r0
   20f7e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20f80:	231f      	movs	r3, #31
   20f82:	18fb      	adds	r3, r7, r3
   20f84:	781b      	ldrb	r3, [r3, #0]
   20f86:	b25b      	sxtb	r3, r3
   20f88:	2b00      	cmp	r3, #0
   20f8a:	d000      	beq.n	20f8e <hif_send+0x22e>
   20f8c:	e084      	b.n	21098 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   20f8e:	68bb      	ldr	r3, [r7, #8]
   20f90:	3308      	adds	r3, #8
   20f92:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   20f94:	683b      	ldr	r3, [r7, #0]
   20f96:	2b00      	cmp	r3, #0
   20f98:	d016      	beq.n	20fc8 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   20f9a:	68b8      	ldr	r0, [r7, #8]
   20f9c:	1d3b      	adds	r3, r7, #4
   20f9e:	881a      	ldrh	r2, [r3, #0]
   20fa0:	231f      	movs	r3, #31
   20fa2:	18fc      	adds	r4, r7, r3
   20fa4:	683b      	ldr	r3, [r7, #0]
   20fa6:	0019      	movs	r1, r3
   20fa8:	4b4f      	ldr	r3, [pc, #316]	; (210e8 <hif_send+0x388>)
   20faa:	4798      	blx	r3
   20fac:	0003      	movs	r3, r0
   20fae:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20fb0:	231f      	movs	r3, #31
   20fb2:	18fb      	adds	r3, r7, r3
   20fb4:	781b      	ldrb	r3, [r3, #0]
   20fb6:	b25b      	sxtb	r3, r3
   20fb8:	2b00      	cmp	r3, #0
   20fba:	d000      	beq.n	20fbe <hif_send+0x25e>
   20fbc:	e06e      	b.n	2109c <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   20fbe:	1d3b      	adds	r3, r7, #4
   20fc0:	881a      	ldrh	r2, [r3, #0]
   20fc2:	68bb      	ldr	r3, [r7, #8]
   20fc4:	18d3      	adds	r3, r2, r3
   20fc6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   20fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20fca:	2b00      	cmp	r3, #0
   20fcc:	d021      	beq.n	21012 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   20fce:	2338      	movs	r3, #56	; 0x38
   20fd0:	18fb      	adds	r3, r7, r3
   20fd2:	881a      	ldrh	r2, [r3, #0]
   20fd4:	1d3b      	adds	r3, r7, #4
   20fd6:	881b      	ldrh	r3, [r3, #0]
   20fd8:	1ad3      	subs	r3, r2, r3
   20fda:	001a      	movs	r2, r3
   20fdc:	68bb      	ldr	r3, [r7, #8]
   20fde:	18d3      	adds	r3, r2, r3
   20fe0:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   20fe2:	68b8      	ldr	r0, [r7, #8]
   20fe4:	2334      	movs	r3, #52	; 0x34
   20fe6:	18fb      	adds	r3, r7, r3
   20fe8:	881a      	ldrh	r2, [r3, #0]
   20fea:	231f      	movs	r3, #31
   20fec:	18fc      	adds	r4, r7, r3
   20fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20ff0:	0019      	movs	r1, r3
   20ff2:	4b3d      	ldr	r3, [pc, #244]	; (210e8 <hif_send+0x388>)
   20ff4:	4798      	blx	r3
   20ff6:	0003      	movs	r3, r0
   20ff8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20ffa:	231f      	movs	r3, #31
   20ffc:	18fb      	adds	r3, r7, r3
   20ffe:	781b      	ldrb	r3, [r3, #0]
   21000:	b25b      	sxtb	r3, r3
   21002:	2b00      	cmp	r3, #0
   21004:	d14c      	bne.n	210a0 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   21006:	2334      	movs	r3, #52	; 0x34
   21008:	18fb      	adds	r3, r7, r3
   2100a:	881a      	ldrh	r2, [r3, #0]
   2100c:	68bb      	ldr	r3, [r7, #8]
   2100e:	18d3      	adds	r3, r2, r3
   21010:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   21012:	693b      	ldr	r3, [r7, #16]
   21014:	009b      	lsls	r3, r3, #2
   21016:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   21018:	697b      	ldr	r3, [r7, #20]
   2101a:	2202      	movs	r2, #2
   2101c:	4313      	orrs	r3, r2
   2101e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   21020:	697b      	ldr	r3, [r7, #20]
   21022:	221f      	movs	r2, #31
   21024:	18bc      	adds	r4, r7, r2
   21026:	4a31      	ldr	r2, [pc, #196]	; (210ec <hif_send+0x38c>)
   21028:	0019      	movs	r1, r3
   2102a:	0010      	movs	r0, r2
   2102c:	4b24      	ldr	r3, [pc, #144]	; (210c0 <hif_send+0x360>)
   2102e:	4798      	blx	r3
   21030:	0003      	movs	r3, r0
   21032:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21034:	231f      	movs	r3, #31
   21036:	18fb      	adds	r3, r7, r3
   21038:	781b      	ldrb	r3, [r3, #0]
   2103a:	b25b      	sxtb	r3, r3
   2103c:	2b00      	cmp	r3, #0
   2103e:	d01c      	beq.n	2107a <hif_send+0x31a>
   21040:	e02f      	b.n	210a2 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   21042:	231f      	movs	r3, #31
   21044:	18fc      	adds	r4, r7, r3
   21046:	4b2a      	ldr	r3, [pc, #168]	; (210f0 <hif_send+0x390>)
   21048:	4798      	blx	r3
   2104a:	0003      	movs	r3, r0
   2104c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   2104e:	231f      	movs	r3, #31
   21050:	18fb      	adds	r3, r7, r3
   21052:	22fd      	movs	r2, #253	; 0xfd
   21054:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   21056:	e026      	b.n	210a6 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   21058:	2398      	movs	r3, #152	; 0x98
   2105a:	33ff      	adds	r3, #255	; 0xff
   2105c:	001a      	movs	r2, r3
   2105e:	4925      	ldr	r1, [pc, #148]	; (210f4 <hif_send+0x394>)
   21060:	4b25      	ldr	r3, [pc, #148]	; (210f8 <hif_send+0x398>)
   21062:	0018      	movs	r0, r3
   21064:	4b1a      	ldr	r3, [pc, #104]	; (210d0 <hif_send+0x370>)
   21066:	4798      	blx	r3
   21068:	4b24      	ldr	r3, [pc, #144]	; (210fc <hif_send+0x39c>)
   2106a:	0018      	movs	r0, r3
   2106c:	4b18      	ldr	r3, [pc, #96]	; (210d0 <hif_send+0x370>)
   2106e:	4798      	blx	r3
   21070:	4b19      	ldr	r3, [pc, #100]	; (210d8 <hif_send+0x378>)
   21072:	0018      	movs	r0, r3
   21074:	4b16      	ldr	r3, [pc, #88]	; (210d0 <hif_send+0x370>)
   21076:	4798      	blx	r3
		goto ERR2;
   21078:	e015      	b.n	210a6 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   2107a:	231f      	movs	r3, #31
   2107c:	18fc      	adds	r4, r7, r3
   2107e:	4b1c      	ldr	r3, [pc, #112]	; (210f0 <hif_send+0x390>)
   21080:	4798      	blx	r3
   21082:	0003      	movs	r3, r0
   21084:	7023      	strb	r3, [r4, #0]
	return ret;
   21086:	231f      	movs	r3, #31
   21088:	18fb      	adds	r3, r7, r3
   2108a:	781b      	ldrb	r3, [r3, #0]
   2108c:	b25b      	sxtb	r3, r3
   2108e:	e00e      	b.n	210ae <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   21090:	46c0      	nop			; (mov r8, r8)
   21092:	e006      	b.n	210a2 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   21094:	46c0      	nop			; (mov r8, r8)
   21096:	e004      	b.n	210a2 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   21098:	46c0      	nop			; (mov r8, r8)
   2109a:	e002      	b.n	210a2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   2109c:	46c0      	nop			; (mov r8, r8)
   2109e:	e000      	b.n	210a2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   210a0:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   210a2:	4b17      	ldr	r3, [pc, #92]	; (21100 <hif_send+0x3a0>)
   210a4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   210a6:	231f      	movs	r3, #31
   210a8:	18fb      	adds	r3, r7, r3
   210aa:	781b      	ldrb	r3, [r3, #0]
   210ac:	b25b      	sxtb	r3, r3
}
   210ae:	0018      	movs	r0, r3
   210b0:	46bd      	mov	sp, r7
   210b2:	b009      	add	sp, #36	; 0x24
   210b4:	bd90      	pop	{r4, r7, pc}
   210b6:	46c0      	nop			; (mov r8, r8)
   210b8:	00020c29 	.word	0x00020c29
   210bc:	0000108c 	.word	0x0000108c
   210c0:	00022bb5 	.word	0x00022bb5
   210c4:	00001078 	.word	0x00001078
   210c8:	00022b91 	.word	0x00022b91
   210cc:	000380e0 	.word	0x000380e0
   210d0:	0001e189 	.word	0x0001e189
   210d4:	000380ec 	.word	0x000380ec
   210d8:	00038100 	.word	0x00038100
   210dc:	00020221 	.word	0x00020221
   210e0:	00150400 	.word	0x00150400
   210e4:	000003e7 	.word	0x000003e7
   210e8:	00022cfd 	.word	0x00022cfd
   210ec:	0000106c 	.word	0x0000106c
   210f0:	00020cc1 	.word	0x00020cc1
   210f4:	00038408 	.word	0x00038408
   210f8:	00038104 	.word	0x00038104
   210fc:	00038118 	.word	0x00038118
   21100:	00020c99 	.word	0x00020c99

00021104 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   21104:	b590      	push	{r4, r7, lr}
   21106:	b087      	sub	sp, #28
   21108:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   2110a:	230f      	movs	r3, #15
   2110c:	18fb      	adds	r3, r7, r3
   2110e:	2200      	movs	r2, #0
   21110:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   21112:	230f      	movs	r3, #15
   21114:	18fc      	adds	r4, r7, r3
   21116:	2308      	movs	r3, #8
   21118:	18fb      	adds	r3, r7, r3
   2111a:	4adc      	ldr	r2, [pc, #880]	; (2148c <hif_isr+0x388>)
   2111c:	0019      	movs	r1, r3
   2111e:	0010      	movs	r0, r2
   21120:	4bdb      	ldr	r3, [pc, #876]	; (21490 <hif_isr+0x38c>)
   21122:	4798      	blx	r3
   21124:	0003      	movs	r3, r0
   21126:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   21128:	230f      	movs	r3, #15
   2112a:	18fb      	adds	r3, r7, r3
   2112c:	781b      	ldrb	r3, [r3, #0]
   2112e:	b25b      	sxtb	r3, r3
   21130:	2b00      	cmp	r3, #0
   21132:	d000      	beq.n	21136 <hif_isr+0x32>
   21134:	e21e      	b.n	21574 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   21136:	68bb      	ldr	r3, [r7, #8]
   21138:	2201      	movs	r2, #1
   2113a:	4013      	ands	r3, r2
   2113c:	d100      	bne.n	21140 <hif_isr+0x3c>
   2113e:	e204      	b.n	2154a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   21140:	2000      	movs	r0, #0
   21142:	4bd4      	ldr	r3, [pc, #848]	; (21494 <hif_isr+0x390>)
   21144:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   21146:	68bb      	ldr	r3, [r7, #8]
   21148:	2201      	movs	r2, #1
   2114a:	4393      	bics	r3, r2
   2114c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   2114e:	68bb      	ldr	r3, [r7, #8]
   21150:	220f      	movs	r2, #15
   21152:	18bc      	adds	r4, r7, r2
   21154:	4acd      	ldr	r2, [pc, #820]	; (2148c <hif_isr+0x388>)
   21156:	0019      	movs	r1, r3
   21158:	0010      	movs	r0, r2
   2115a:	4bcf      	ldr	r3, [pc, #828]	; (21498 <hif_isr+0x394>)
   2115c:	4798      	blx	r3
   2115e:	0003      	movs	r3, r0
   21160:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21162:	230f      	movs	r3, #15
   21164:	18fb      	adds	r3, r7, r3
   21166:	781b      	ldrb	r3, [r3, #0]
   21168:	b25b      	sxtb	r3, r3
   2116a:	2b00      	cmp	r3, #0
   2116c:	d000      	beq.n	21170 <hif_isr+0x6c>
   2116e:	e210      	b.n	21592 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   21170:	4bca      	ldr	r3, [pc, #808]	; (2149c <hif_isr+0x398>)
   21172:	2201      	movs	r2, #1
   21174:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   21176:	68bb      	ldr	r3, [r7, #8]
   21178:	089b      	lsrs	r3, r3, #2
   2117a:	b29a      	uxth	r2, r3
   2117c:	230c      	movs	r3, #12
   2117e:	18fb      	adds	r3, r7, r3
   21180:	0512      	lsls	r2, r2, #20
   21182:	0d12      	lsrs	r2, r2, #20
   21184:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   21186:	230c      	movs	r3, #12
   21188:	18fb      	adds	r3, r7, r3
   2118a:	881b      	ldrh	r3, [r3, #0]
   2118c:	2b00      	cmp	r3, #0
   2118e:	d100      	bne.n	21192 <hif_isr+0x8e>
   21190:	e1c8      	b.n	21524 <hif_isr+0x420>
				uint32 address = 0;
   21192:	2300      	movs	r3, #0
   21194:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   21196:	230f      	movs	r3, #15
   21198:	18fc      	adds	r4, r7, r3
   2119a:	003b      	movs	r3, r7
   2119c:	4ac0      	ldr	r2, [pc, #768]	; (214a0 <hif_isr+0x39c>)
   2119e:	0019      	movs	r1, r3
   211a0:	0010      	movs	r0, r2
   211a2:	4bbb      	ldr	r3, [pc, #748]	; (21490 <hif_isr+0x38c>)
   211a4:	4798      	blx	r3
   211a6:	0003      	movs	r3, r0
   211a8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   211aa:	230f      	movs	r3, #15
   211ac:	18fb      	adds	r3, r7, r3
   211ae:	781b      	ldrb	r3, [r3, #0]
   211b0:	b25b      	sxtb	r3, r3
   211b2:	2b00      	cmp	r3, #0
   211b4:	d012      	beq.n	211dc <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   211b6:	23e4      	movs	r3, #228	; 0xe4
   211b8:	005a      	lsls	r2, r3, #1
   211ba:	49ba      	ldr	r1, [pc, #744]	; (214a4 <hif_isr+0x3a0>)
   211bc:	4bba      	ldr	r3, [pc, #744]	; (214a8 <hif_isr+0x3a4>)
   211be:	0018      	movs	r0, r3
   211c0:	4bba      	ldr	r3, [pc, #744]	; (214ac <hif_isr+0x3a8>)
   211c2:	4798      	blx	r3
   211c4:	4bba      	ldr	r3, [pc, #744]	; (214b0 <hif_isr+0x3ac>)
   211c6:	0018      	movs	r0, r3
   211c8:	4bb8      	ldr	r3, [pc, #736]	; (214ac <hif_isr+0x3a8>)
   211ca:	4798      	blx	r3
   211cc:	4bb9      	ldr	r3, [pc, #740]	; (214b4 <hif_isr+0x3b0>)
   211ce:	0018      	movs	r0, r3
   211d0:	4bb6      	ldr	r3, [pc, #728]	; (214ac <hif_isr+0x3a8>)
   211d2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   211d4:	2001      	movs	r0, #1
   211d6:	4baf      	ldr	r3, [pc, #700]	; (21494 <hif_isr+0x390>)
   211d8:	4798      	blx	r3
					goto ERR1;
   211da:	e1db      	b.n	21594 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   211dc:	683a      	ldr	r2, [r7, #0]
   211de:	4baf      	ldr	r3, [pc, #700]	; (2149c <hif_isr+0x398>)
   211e0:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   211e2:	230c      	movs	r3, #12
   211e4:	18fb      	adds	r3, r7, r3
   211e6:	881a      	ldrh	r2, [r3, #0]
   211e8:	4bac      	ldr	r3, [pc, #688]	; (2149c <hif_isr+0x398>)
   211ea:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   211ec:	683b      	ldr	r3, [r7, #0]
   211ee:	220f      	movs	r2, #15
   211f0:	18bc      	adds	r4, r7, r2
   211f2:	1d39      	adds	r1, r7, #4
   211f4:	2204      	movs	r2, #4
   211f6:	0018      	movs	r0, r3
   211f8:	4baf      	ldr	r3, [pc, #700]	; (214b8 <hif_isr+0x3b4>)
   211fa:	4798      	blx	r3
   211fc:	0003      	movs	r3, r0
   211fe:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   21200:	1d3b      	adds	r3, r7, #4
   21202:	885b      	ldrh	r3, [r3, #2]
   21204:	b29a      	uxth	r2, r3
   21206:	1d3b      	adds	r3, r7, #4
   21208:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   2120a:	230f      	movs	r3, #15
   2120c:	18fb      	adds	r3, r7, r3
   2120e:	781b      	ldrb	r3, [r3, #0]
   21210:	b25b      	sxtb	r3, r3
   21212:	2b00      	cmp	r3, #0
   21214:	d012      	beq.n	2123c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   21216:	23e9      	movs	r3, #233	; 0xe9
   21218:	005a      	lsls	r2, r3, #1
   2121a:	49a2      	ldr	r1, [pc, #648]	; (214a4 <hif_isr+0x3a0>)
   2121c:	4ba2      	ldr	r3, [pc, #648]	; (214a8 <hif_isr+0x3a4>)
   2121e:	0018      	movs	r0, r3
   21220:	4ba2      	ldr	r3, [pc, #648]	; (214ac <hif_isr+0x3a8>)
   21222:	4798      	blx	r3
   21224:	4ba5      	ldr	r3, [pc, #660]	; (214bc <hif_isr+0x3b8>)
   21226:	0018      	movs	r0, r3
   21228:	4ba0      	ldr	r3, [pc, #640]	; (214ac <hif_isr+0x3a8>)
   2122a:	4798      	blx	r3
   2122c:	4ba1      	ldr	r3, [pc, #644]	; (214b4 <hif_isr+0x3b0>)
   2122e:	0018      	movs	r0, r3
   21230:	4b9e      	ldr	r3, [pc, #632]	; (214ac <hif_isr+0x3a8>)
   21232:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21234:	2001      	movs	r0, #1
   21236:	4b97      	ldr	r3, [pc, #604]	; (21494 <hif_isr+0x390>)
   21238:	4798      	blx	r3
					goto ERR1;
   2123a:	e1ab      	b.n	21594 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   2123c:	1d3b      	adds	r3, r7, #4
   2123e:	885b      	ldrh	r3, [r3, #2]
   21240:	b29b      	uxth	r3, r3
   21242:	220c      	movs	r2, #12
   21244:	18ba      	adds	r2, r7, r2
   21246:	8812      	ldrh	r2, [r2, #0]
   21248:	429a      	cmp	r2, r3
   2124a:	d02f      	beq.n	212ac <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   2124c:	230c      	movs	r3, #12
   2124e:	18fb      	adds	r3, r7, r3
   21250:	881b      	ldrh	r3, [r3, #0]
   21252:	1d3a      	adds	r2, r7, #4
   21254:	8852      	ldrh	r2, [r2, #2]
   21256:	b292      	uxth	r2, r2
   21258:	1a9b      	subs	r3, r3, r2
   2125a:	2b04      	cmp	r3, #4
   2125c:	dd26      	ble.n	212ac <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   2125e:	23dc      	movs	r3, #220	; 0xdc
   21260:	33ff      	adds	r3, #255	; 0xff
   21262:	001a      	movs	r2, r3
   21264:	498f      	ldr	r1, [pc, #572]	; (214a4 <hif_isr+0x3a0>)
   21266:	4b90      	ldr	r3, [pc, #576]	; (214a8 <hif_isr+0x3a4>)
   21268:	0018      	movs	r0, r3
   2126a:	4b90      	ldr	r3, [pc, #576]	; (214ac <hif_isr+0x3a8>)
   2126c:	4798      	blx	r3
   2126e:	230c      	movs	r3, #12
   21270:	18fb      	adds	r3, r7, r3
   21272:	8819      	ldrh	r1, [r3, #0]
   21274:	1d3b      	adds	r3, r7, #4
   21276:	885b      	ldrh	r3, [r3, #2]
   21278:	b29b      	uxth	r3, r3
   2127a:	001a      	movs	r2, r3
   2127c:	1d3b      	adds	r3, r7, #4
   2127e:	781b      	ldrb	r3, [r3, #0]
   21280:	b2db      	uxtb	r3, r3
   21282:	001c      	movs	r4, r3
   21284:	1d3b      	adds	r3, r7, #4
   21286:	785b      	ldrb	r3, [r3, #1]
   21288:	b2db      	uxtb	r3, r3
   2128a:	488d      	ldr	r0, [pc, #564]	; (214c0 <hif_isr+0x3bc>)
   2128c:	9300      	str	r3, [sp, #0]
   2128e:	0023      	movs	r3, r4
   21290:	4c86      	ldr	r4, [pc, #536]	; (214ac <hif_isr+0x3a8>)
   21292:	47a0      	blx	r4
   21294:	4b87      	ldr	r3, [pc, #540]	; (214b4 <hif_isr+0x3b0>)
   21296:	0018      	movs	r0, r3
   21298:	4b84      	ldr	r3, [pc, #528]	; (214ac <hif_isr+0x3a8>)
   2129a:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   2129c:	2001      	movs	r0, #1
   2129e:	4b7d      	ldr	r3, [pc, #500]	; (21494 <hif_isr+0x390>)
   212a0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   212a2:	230f      	movs	r3, #15
   212a4:	18fb      	adds	r3, r7, r3
   212a6:	22fa      	movs	r2, #250	; 0xfa
   212a8:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   212aa:	e173      	b.n	21594 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   212ac:	1d3b      	adds	r3, r7, #4
   212ae:	781b      	ldrb	r3, [r3, #0]
   212b0:	b2db      	uxtb	r3, r3
   212b2:	2b01      	cmp	r3, #1
   212b4:	d122      	bne.n	212fc <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   212b6:	4b79      	ldr	r3, [pc, #484]	; (2149c <hif_isr+0x398>)
   212b8:	691b      	ldr	r3, [r3, #16]
   212ba:	2b00      	cmp	r3, #0
   212bc:	d00d      	beq.n	212da <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   212be:	4b77      	ldr	r3, [pc, #476]	; (2149c <hif_isr+0x398>)
   212c0:	691b      	ldr	r3, [r3, #16]
   212c2:	1d3a      	adds	r2, r7, #4
   212c4:	7852      	ldrb	r2, [r2, #1]
   212c6:	b2d0      	uxtb	r0, r2
   212c8:	1d3a      	adds	r2, r7, #4
   212ca:	8852      	ldrh	r2, [r2, #2]
   212cc:	b292      	uxth	r2, r2
   212ce:	3a08      	subs	r2, #8
   212d0:	b291      	uxth	r1, r2
   212d2:	683a      	ldr	r2, [r7, #0]
   212d4:	3208      	adds	r2, #8
   212d6:	4798      	blx	r3
   212d8:	e102      	b.n	214e0 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   212da:	23e8      	movs	r3, #232	; 0xe8
   212dc:	33ff      	adds	r3, #255	; 0xff
   212de:	001a      	movs	r2, r3
   212e0:	4970      	ldr	r1, [pc, #448]	; (214a4 <hif_isr+0x3a0>)
   212e2:	4b71      	ldr	r3, [pc, #452]	; (214a8 <hif_isr+0x3a4>)
   212e4:	0018      	movs	r0, r3
   212e6:	4b71      	ldr	r3, [pc, #452]	; (214ac <hif_isr+0x3a8>)
   212e8:	4798      	blx	r3
   212ea:	4b76      	ldr	r3, [pc, #472]	; (214c4 <hif_isr+0x3c0>)
   212ec:	0018      	movs	r0, r3
   212ee:	4b6f      	ldr	r3, [pc, #444]	; (214ac <hif_isr+0x3a8>)
   212f0:	4798      	blx	r3
   212f2:	4b70      	ldr	r3, [pc, #448]	; (214b4 <hif_isr+0x3b0>)
   212f4:	0018      	movs	r0, r3
   212f6:	4b6d      	ldr	r3, [pc, #436]	; (214ac <hif_isr+0x3a8>)
   212f8:	4798      	blx	r3
   212fa:	e0f1      	b.n	214e0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   212fc:	1d3b      	adds	r3, r7, #4
   212fe:	781b      	ldrb	r3, [r3, #0]
   21300:	b2db      	uxtb	r3, r3
   21302:	2b02      	cmp	r3, #2
   21304:	d122      	bne.n	2134c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   21306:	4b65      	ldr	r3, [pc, #404]	; (2149c <hif_isr+0x398>)
   21308:	695b      	ldr	r3, [r3, #20]
   2130a:	2b00      	cmp	r3, #0
   2130c:	d00d      	beq.n	2132a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2130e:	4b63      	ldr	r3, [pc, #396]	; (2149c <hif_isr+0x398>)
   21310:	695b      	ldr	r3, [r3, #20]
   21312:	1d3a      	adds	r2, r7, #4
   21314:	7852      	ldrb	r2, [r2, #1]
   21316:	b2d0      	uxtb	r0, r2
   21318:	1d3a      	adds	r2, r7, #4
   2131a:	8852      	ldrh	r2, [r2, #2]
   2131c:	b292      	uxth	r2, r2
   2131e:	3a08      	subs	r2, #8
   21320:	b291      	uxth	r1, r2
   21322:	683a      	ldr	r2, [r7, #0]
   21324:	3208      	adds	r2, #8
   21326:	4798      	blx	r3
   21328:	e0da      	b.n	214e0 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   2132a:	23f0      	movs	r3, #240	; 0xf0
   2132c:	33ff      	adds	r3, #255	; 0xff
   2132e:	001a      	movs	r2, r3
   21330:	495c      	ldr	r1, [pc, #368]	; (214a4 <hif_isr+0x3a0>)
   21332:	4b5d      	ldr	r3, [pc, #372]	; (214a8 <hif_isr+0x3a4>)
   21334:	0018      	movs	r0, r3
   21336:	4b5d      	ldr	r3, [pc, #372]	; (214ac <hif_isr+0x3a8>)
   21338:	4798      	blx	r3
   2133a:	4b63      	ldr	r3, [pc, #396]	; (214c8 <hif_isr+0x3c4>)
   2133c:	0018      	movs	r0, r3
   2133e:	4b5b      	ldr	r3, [pc, #364]	; (214ac <hif_isr+0x3a8>)
   21340:	4798      	blx	r3
   21342:	4b5c      	ldr	r3, [pc, #368]	; (214b4 <hif_isr+0x3b0>)
   21344:	0018      	movs	r0, r3
   21346:	4b59      	ldr	r3, [pc, #356]	; (214ac <hif_isr+0x3a8>)
   21348:	4798      	blx	r3
   2134a:	e0c9      	b.n	214e0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   2134c:	1d3b      	adds	r3, r7, #4
   2134e:	781b      	ldrb	r3, [r3, #0]
   21350:	b2db      	uxtb	r3, r3
   21352:	2b04      	cmp	r3, #4
   21354:	d122      	bne.n	2139c <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   21356:	4b51      	ldr	r3, [pc, #324]	; (2149c <hif_isr+0x398>)
   21358:	699b      	ldr	r3, [r3, #24]
   2135a:	2b00      	cmp	r3, #0
   2135c:	d00d      	beq.n	2137a <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2135e:	4b4f      	ldr	r3, [pc, #316]	; (2149c <hif_isr+0x398>)
   21360:	699b      	ldr	r3, [r3, #24]
   21362:	1d3a      	adds	r2, r7, #4
   21364:	7852      	ldrb	r2, [r2, #1]
   21366:	b2d0      	uxtb	r0, r2
   21368:	1d3a      	adds	r2, r7, #4
   2136a:	8852      	ldrh	r2, [r2, #2]
   2136c:	b292      	uxth	r2, r2
   2136e:	3a08      	subs	r2, #8
   21370:	b291      	uxth	r1, r2
   21372:	683a      	ldr	r2, [r7, #0]
   21374:	3208      	adds	r2, #8
   21376:	4798      	blx	r3
   21378:	e0b2      	b.n	214e0 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   2137a:	23f8      	movs	r3, #248	; 0xf8
   2137c:	33ff      	adds	r3, #255	; 0xff
   2137e:	001a      	movs	r2, r3
   21380:	4948      	ldr	r1, [pc, #288]	; (214a4 <hif_isr+0x3a0>)
   21382:	4b49      	ldr	r3, [pc, #292]	; (214a8 <hif_isr+0x3a4>)
   21384:	0018      	movs	r0, r3
   21386:	4b49      	ldr	r3, [pc, #292]	; (214ac <hif_isr+0x3a8>)
   21388:	4798      	blx	r3
   2138a:	4b50      	ldr	r3, [pc, #320]	; (214cc <hif_isr+0x3c8>)
   2138c:	0018      	movs	r0, r3
   2138e:	4b47      	ldr	r3, [pc, #284]	; (214ac <hif_isr+0x3a8>)
   21390:	4798      	blx	r3
   21392:	4b48      	ldr	r3, [pc, #288]	; (214b4 <hif_isr+0x3b0>)
   21394:	0018      	movs	r0, r3
   21396:	4b45      	ldr	r3, [pc, #276]	; (214ac <hif_isr+0x3a8>)
   21398:	4798      	blx	r3
   2139a:	e0a1      	b.n	214e0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   2139c:	1d3b      	adds	r3, r7, #4
   2139e:	781b      	ldrb	r3, [r3, #0]
   213a0:	b2db      	uxtb	r3, r3
   213a2:	2b06      	cmp	r3, #6
   213a4:	d121      	bne.n	213ea <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   213a6:	4b3d      	ldr	r3, [pc, #244]	; (2149c <hif_isr+0x398>)
   213a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   213aa:	2b00      	cmp	r3, #0
   213ac:	d00d      	beq.n	213ca <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   213ae:	4b3b      	ldr	r3, [pc, #236]	; (2149c <hif_isr+0x398>)
   213b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   213b2:	1d3a      	adds	r2, r7, #4
   213b4:	7852      	ldrb	r2, [r2, #1]
   213b6:	b2d0      	uxtb	r0, r2
   213b8:	1d3a      	adds	r2, r7, #4
   213ba:	8852      	ldrh	r2, [r2, #2]
   213bc:	b292      	uxth	r2, r2
   213be:	3a08      	subs	r2, #8
   213c0:	b291      	uxth	r1, r2
   213c2:	683a      	ldr	r2, [r7, #0]
   213c4:	3208      	adds	r2, #8
   213c6:	4798      	blx	r3
   213c8:	e08a      	b.n	214e0 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   213ca:	2380      	movs	r3, #128	; 0x80
   213cc:	009a      	lsls	r2, r3, #2
   213ce:	4935      	ldr	r1, [pc, #212]	; (214a4 <hif_isr+0x3a0>)
   213d0:	4b35      	ldr	r3, [pc, #212]	; (214a8 <hif_isr+0x3a4>)
   213d2:	0018      	movs	r0, r3
   213d4:	4b35      	ldr	r3, [pc, #212]	; (214ac <hif_isr+0x3a8>)
   213d6:	4798      	blx	r3
   213d8:	4b3d      	ldr	r3, [pc, #244]	; (214d0 <hif_isr+0x3cc>)
   213da:	0018      	movs	r0, r3
   213dc:	4b33      	ldr	r3, [pc, #204]	; (214ac <hif_isr+0x3a8>)
   213de:	4798      	blx	r3
   213e0:	4b34      	ldr	r3, [pc, #208]	; (214b4 <hif_isr+0x3b0>)
   213e2:	0018      	movs	r0, r3
   213e4:	4b31      	ldr	r3, [pc, #196]	; (214ac <hif_isr+0x3a8>)
   213e6:	4798      	blx	r3
   213e8:	e07a      	b.n	214e0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   213ea:	1d3b      	adds	r3, r7, #4
   213ec:	781b      	ldrb	r3, [r3, #0]
   213ee:	b2db      	uxtb	r3, r3
   213f0:	2b07      	cmp	r3, #7
   213f2:	d120      	bne.n	21436 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   213f4:	4b29      	ldr	r3, [pc, #164]	; (2149c <hif_isr+0x398>)
   213f6:	69db      	ldr	r3, [r3, #28]
   213f8:	2b00      	cmp	r3, #0
   213fa:	d00d      	beq.n	21418 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   213fc:	4b27      	ldr	r3, [pc, #156]	; (2149c <hif_isr+0x398>)
   213fe:	69db      	ldr	r3, [r3, #28]
   21400:	1d3a      	adds	r2, r7, #4
   21402:	7852      	ldrb	r2, [r2, #1]
   21404:	b2d0      	uxtb	r0, r2
   21406:	1d3a      	adds	r2, r7, #4
   21408:	8852      	ldrh	r2, [r2, #2]
   2140a:	b292      	uxth	r2, r2
   2140c:	3a08      	subs	r2, #8
   2140e:	b291      	uxth	r1, r2
   21410:	683a      	ldr	r2, [r7, #0]
   21412:	3208      	adds	r2, #8
   21414:	4798      	blx	r3
   21416:	e063      	b.n	214e0 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   21418:	4a2e      	ldr	r2, [pc, #184]	; (214d4 <hif_isr+0x3d0>)
   2141a:	4922      	ldr	r1, [pc, #136]	; (214a4 <hif_isr+0x3a0>)
   2141c:	4b22      	ldr	r3, [pc, #136]	; (214a8 <hif_isr+0x3a4>)
   2141e:	0018      	movs	r0, r3
   21420:	4b22      	ldr	r3, [pc, #136]	; (214ac <hif_isr+0x3a8>)
   21422:	4798      	blx	r3
   21424:	4b2c      	ldr	r3, [pc, #176]	; (214d8 <hif_isr+0x3d4>)
   21426:	0018      	movs	r0, r3
   21428:	4b20      	ldr	r3, [pc, #128]	; (214ac <hif_isr+0x3a8>)
   2142a:	4798      	blx	r3
   2142c:	4b21      	ldr	r3, [pc, #132]	; (214b4 <hif_isr+0x3b0>)
   2142e:	0018      	movs	r0, r3
   21430:	4b1e      	ldr	r3, [pc, #120]	; (214ac <hif_isr+0x3a8>)
   21432:	4798      	blx	r3
   21434:	e054      	b.n	214e0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   21436:	1d3b      	adds	r3, r7, #4
   21438:	781b      	ldrb	r3, [r3, #0]
   2143a:	b2db      	uxtb	r3, r3
   2143c:	2b05      	cmp	r3, #5
   2143e:	d111      	bne.n	21464 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   21440:	4b16      	ldr	r3, [pc, #88]	; (2149c <hif_isr+0x398>)
   21442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21444:	2b00      	cmp	r3, #0
   21446:	d04b      	beq.n	214e0 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21448:	4b14      	ldr	r3, [pc, #80]	; (2149c <hif_isr+0x398>)
   2144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2144c:	1d3a      	adds	r2, r7, #4
   2144e:	7852      	ldrb	r2, [r2, #1]
   21450:	b2d0      	uxtb	r0, r2
   21452:	1d3a      	adds	r2, r7, #4
   21454:	8852      	ldrh	r2, [r2, #2]
   21456:	b292      	uxth	r2, r2
   21458:	3a08      	subs	r2, #8
   2145a:	b291      	uxth	r1, r2
   2145c:	683a      	ldr	r2, [r7, #0]
   2145e:	3208      	adds	r2, #8
   21460:	4798      	blx	r3
   21462:	e03d      	b.n	214e0 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   21464:	2384      	movs	r3, #132	; 0x84
   21466:	009a      	lsls	r2, r3, #2
   21468:	490e      	ldr	r1, [pc, #56]	; (214a4 <hif_isr+0x3a0>)
   2146a:	4b0f      	ldr	r3, [pc, #60]	; (214a8 <hif_isr+0x3a4>)
   2146c:	0018      	movs	r0, r3
   2146e:	4b0f      	ldr	r3, [pc, #60]	; (214ac <hif_isr+0x3a8>)
   21470:	4798      	blx	r3
   21472:	4b1a      	ldr	r3, [pc, #104]	; (214dc <hif_isr+0x3d8>)
   21474:	0018      	movs	r0, r3
   21476:	4b0d      	ldr	r3, [pc, #52]	; (214ac <hif_isr+0x3a8>)
   21478:	4798      	blx	r3
   2147a:	4b0e      	ldr	r3, [pc, #56]	; (214b4 <hif_isr+0x3b0>)
   2147c:	0018      	movs	r0, r3
   2147e:	4b0b      	ldr	r3, [pc, #44]	; (214ac <hif_isr+0x3a8>)
   21480:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   21482:	230f      	movs	r3, #15
   21484:	18fb      	adds	r3, r7, r3
   21486:	22fa      	movs	r2, #250	; 0xfa
   21488:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   2148a:	e083      	b.n	21594 <hif_isr+0x490>
   2148c:	00001070 	.word	0x00001070
   21490:	00022b91 	.word	0x00022b91
   21494:	000202b5 	.word	0x000202b5
   21498:	00022bb5 	.word	0x00022bb5
   2149c:	20005660 	.word	0x20005660
   214a0:	00001084 	.word	0x00001084
   214a4:	00038414 	.word	0x00038414
   214a8:	00038104 	.word	0x00038104
   214ac:	0001e189 	.word	0x0001e189
   214b0:	00038138 	.word	0x00038138
   214b4:	00038100 	.word	0x00038100
   214b8:	00022c05 	.word	0x00022c05
   214bc:	00038160 	.word	0x00038160
   214c0:	00038178 	.word	0x00038178
   214c4:	000381b8 	.word	0x000381b8
   214c8:	000381dc 	.word	0x000381dc
   214cc:	00038200 	.word	0x00038200
   214d0:	00038220 	.word	0x00038220
   214d4:	00000207 	.word	0x00000207
   214d8:	00038244 	.word	0x00038244
   214dc:	00038268 	.word	0x00038268
				}
				if(gstrHifCxt.u8HifRXDone)
   214e0:	4b30      	ldr	r3, [pc, #192]	; (215a4 <hif_isr+0x4a0>)
   214e2:	789b      	ldrb	r3, [r3, #2]
   214e4:	b2db      	uxtb	r3, r3
   214e6:	2b00      	cmp	r3, #0
   214e8:	d054      	beq.n	21594 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   214ea:	4a2f      	ldr	r2, [pc, #188]	; (215a8 <hif_isr+0x4a4>)
   214ec:	492f      	ldr	r1, [pc, #188]	; (215ac <hif_isr+0x4a8>)
   214ee:	4b30      	ldr	r3, [pc, #192]	; (215b0 <hif_isr+0x4ac>)
   214f0:	0018      	movs	r0, r3
   214f2:	4b30      	ldr	r3, [pc, #192]	; (215b4 <hif_isr+0x4b0>)
   214f4:	4798      	blx	r3
   214f6:	1d3b      	adds	r3, r7, #4
   214f8:	781b      	ldrb	r3, [r3, #0]
   214fa:	b2db      	uxtb	r3, r3
   214fc:	0019      	movs	r1, r3
   214fe:	1d3b      	adds	r3, r7, #4
   21500:	785b      	ldrb	r3, [r3, #1]
   21502:	b2db      	uxtb	r3, r3
   21504:	001a      	movs	r2, r3
   21506:	4b2c      	ldr	r3, [pc, #176]	; (215b8 <hif_isr+0x4b4>)
   21508:	0018      	movs	r0, r3
   2150a:	4b2a      	ldr	r3, [pc, #168]	; (215b4 <hif_isr+0x4b0>)
   2150c:	4798      	blx	r3
   2150e:	4b2b      	ldr	r3, [pc, #172]	; (215bc <hif_isr+0x4b8>)
   21510:	0018      	movs	r0, r3
   21512:	4b28      	ldr	r3, [pc, #160]	; (215b4 <hif_isr+0x4b0>)
   21514:	4798      	blx	r3
					ret = hif_set_rx_done();
   21516:	230f      	movs	r3, #15
   21518:	18fc      	adds	r4, r7, r3
   2151a:	4b29      	ldr	r3, [pc, #164]	; (215c0 <hif_isr+0x4bc>)
   2151c:	4798      	blx	r3
   2151e:	0003      	movs	r3, r0
   21520:	7023      	strb	r3, [r4, #0]
   21522:	e037      	b.n	21594 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   21524:	4a27      	ldr	r2, [pc, #156]	; (215c4 <hif_isr+0x4c0>)
   21526:	4921      	ldr	r1, [pc, #132]	; (215ac <hif_isr+0x4a8>)
   21528:	4b21      	ldr	r3, [pc, #132]	; (215b0 <hif_isr+0x4ac>)
   2152a:	0018      	movs	r0, r3
   2152c:	4b21      	ldr	r3, [pc, #132]	; (215b4 <hif_isr+0x4b0>)
   2152e:	4798      	blx	r3
   21530:	4b25      	ldr	r3, [pc, #148]	; (215c8 <hif_isr+0x4c4>)
   21532:	0018      	movs	r0, r3
   21534:	4b1f      	ldr	r3, [pc, #124]	; (215b4 <hif_isr+0x4b0>)
   21536:	4798      	blx	r3
   21538:	4b20      	ldr	r3, [pc, #128]	; (215bc <hif_isr+0x4b8>)
   2153a:	0018      	movs	r0, r3
   2153c:	4b1d      	ldr	r3, [pc, #116]	; (215b4 <hif_isr+0x4b0>)
   2153e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   21540:	230f      	movs	r3, #15
   21542:	18fb      	adds	r3, r7, r3
   21544:	22fe      	movs	r2, #254	; 0xfe
   21546:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   21548:	e024      	b.n	21594 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   2154a:	4a20      	ldr	r2, [pc, #128]	; (215cc <hif_isr+0x4c8>)
   2154c:	4917      	ldr	r1, [pc, #92]	; (215ac <hif_isr+0x4a8>)
   2154e:	4b18      	ldr	r3, [pc, #96]	; (215b0 <hif_isr+0x4ac>)
   21550:	0018      	movs	r0, r3
   21552:	4b18      	ldr	r3, [pc, #96]	; (215b4 <hif_isr+0x4b0>)
   21554:	4798      	blx	r3
   21556:	68ba      	ldr	r2, [r7, #8]
   21558:	4b1d      	ldr	r3, [pc, #116]	; (215d0 <hif_isr+0x4cc>)
   2155a:	0011      	movs	r1, r2
   2155c:	0018      	movs	r0, r3
   2155e:	4b15      	ldr	r3, [pc, #84]	; (215b4 <hif_isr+0x4b0>)
   21560:	4798      	blx	r3
   21562:	4b16      	ldr	r3, [pc, #88]	; (215bc <hif_isr+0x4b8>)
   21564:	0018      	movs	r0, r3
   21566:	4b13      	ldr	r3, [pc, #76]	; (215b4 <hif_isr+0x4b0>)
   21568:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2156a:	230f      	movs	r3, #15
   2156c:	18fb      	adds	r3, r7, r3
   2156e:	22f4      	movs	r2, #244	; 0xf4
   21570:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21572:	e00f      	b.n	21594 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   21574:	4a17      	ldr	r2, [pc, #92]	; (215d4 <hif_isr+0x4d0>)
   21576:	490d      	ldr	r1, [pc, #52]	; (215ac <hif_isr+0x4a8>)
   21578:	4b0d      	ldr	r3, [pc, #52]	; (215b0 <hif_isr+0x4ac>)
   2157a:	0018      	movs	r0, r3
   2157c:	4b0d      	ldr	r3, [pc, #52]	; (215b4 <hif_isr+0x4b0>)
   2157e:	4798      	blx	r3
   21580:	4b15      	ldr	r3, [pc, #84]	; (215d8 <hif_isr+0x4d4>)
   21582:	0018      	movs	r0, r3
   21584:	4b0b      	ldr	r3, [pc, #44]	; (215b4 <hif_isr+0x4b0>)
   21586:	4798      	blx	r3
   21588:	4b0c      	ldr	r3, [pc, #48]	; (215bc <hif_isr+0x4b8>)
   2158a:	0018      	movs	r0, r3
   2158c:	4b09      	ldr	r3, [pc, #36]	; (215b4 <hif_isr+0x4b0>)
   2158e:	4798      	blx	r3
		goto ERR1;
   21590:	e000      	b.n	21594 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   21592:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   21594:	230f      	movs	r3, #15
   21596:	18fb      	adds	r3, r7, r3
   21598:	781b      	ldrb	r3, [r3, #0]
   2159a:	b25b      	sxtb	r3, r3
}
   2159c:	0018      	movs	r0, r3
   2159e:	46bd      	mov	sp, r7
   215a0:	b005      	add	sp, #20
   215a2:	bd90      	pop	{r4, r7, pc}
   215a4:	20005660 	.word	0x20005660
   215a8:	00000216 	.word	0x00000216
   215ac:	00038414 	.word	0x00038414
   215b0:	00038104 	.word	0x00038104
   215b4:	0001e189 	.word	0x0001e189
   215b8:	00038280 	.word	0x00038280
   215bc:	00038100 	.word	0x00038100
   215c0:	00020b99 	.word	0x00020b99
   215c4:	0000021d 	.word	0x0000021d
   215c8:	000382ac 	.word	0x000382ac
   215cc:	00000225 	.word	0x00000225
   215d0:	000382c0 	.word	0x000382c0
   215d4:	0000022e 	.word	0x0000022e
   215d8:	000382dc 	.word	0x000382dc

000215dc <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   215dc:	b590      	push	{r4, r7, lr}
   215de:	b083      	sub	sp, #12
   215e0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   215e2:	1dfb      	adds	r3, r7, #7
   215e4:	2200      	movs	r2, #0
   215e6:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   215e8:	4b1c      	ldr	r3, [pc, #112]	; (2165c <hif_handle_isr+0x80>)
   215ea:	2200      	movs	r2, #0
   215ec:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   215ee:	e024      	b.n	2163a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   215f0:	4b1a      	ldr	r3, [pc, #104]	; (2165c <hif_handle_isr+0x80>)
   215f2:	78db      	ldrb	r3, [r3, #3]
   215f4:	b2db      	uxtb	r3, r3
   215f6:	3b01      	subs	r3, #1
   215f8:	b2da      	uxtb	r2, r3
   215fa:	4b18      	ldr	r3, [pc, #96]	; (2165c <hif_handle_isr+0x80>)
   215fc:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   215fe:	1dfc      	adds	r4, r7, #7
   21600:	4b17      	ldr	r3, [pc, #92]	; (21660 <hif_handle_isr+0x84>)
   21602:	4798      	blx	r3
   21604:	0003      	movs	r3, r0
   21606:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   21608:	1dfb      	adds	r3, r7, #7
   2160a:	781b      	ldrb	r3, [r3, #0]
   2160c:	b25b      	sxtb	r3, r3
   2160e:	2b00      	cmp	r3, #0
   21610:	d100      	bne.n	21614 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   21612:	e012      	b.n	2163a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   21614:	4a13      	ldr	r2, [pc, #76]	; (21664 <hif_handle_isr+0x88>)
   21616:	4914      	ldr	r1, [pc, #80]	; (21668 <hif_handle_isr+0x8c>)
   21618:	4b14      	ldr	r3, [pc, #80]	; (2166c <hif_handle_isr+0x90>)
   2161a:	0018      	movs	r0, r3
   2161c:	4b14      	ldr	r3, [pc, #80]	; (21670 <hif_handle_isr+0x94>)
   2161e:	4798      	blx	r3
   21620:	1dfb      	adds	r3, r7, #7
   21622:	2200      	movs	r2, #0
   21624:	569a      	ldrsb	r2, [r3, r2]
   21626:	4b13      	ldr	r3, [pc, #76]	; (21674 <hif_handle_isr+0x98>)
   21628:	0011      	movs	r1, r2
   2162a:	0018      	movs	r0, r3
   2162c:	4b10      	ldr	r3, [pc, #64]	; (21670 <hif_handle_isr+0x94>)
   2162e:	4798      	blx	r3
   21630:	4b11      	ldr	r3, [pc, #68]	; (21678 <hif_handle_isr+0x9c>)
   21632:	0018      	movs	r0, r3
   21634:	4b0e      	ldr	r3, [pc, #56]	; (21670 <hif_handle_isr+0x94>)
   21636:	4798      	blx	r3
			ret = hif_isr();
   21638:	e7e1      	b.n	215fe <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2163a:	4b08      	ldr	r3, [pc, #32]	; (2165c <hif_handle_isr+0x80>)
   2163c:	78db      	ldrb	r3, [r3, #3]
   2163e:	b2db      	uxtb	r3, r3
   21640:	2b00      	cmp	r3, #0
   21642:	d004      	beq.n	2164e <hif_handle_isr+0x72>
   21644:	4b05      	ldr	r3, [pc, #20]	; (2165c <hif_handle_isr+0x80>)
   21646:	791b      	ldrb	r3, [r3, #4]
   21648:	b2db      	uxtb	r3, r3
   2164a:	2b00      	cmp	r3, #0
   2164c:	d0d0      	beq.n	215f0 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   2164e:	1dfb      	adds	r3, r7, #7
   21650:	781b      	ldrb	r3, [r3, #0]
   21652:	b25b      	sxtb	r3, r3
}
   21654:	0018      	movs	r0, r3
   21656:	46bd      	mov	sp, r7
   21658:	b003      	add	sp, #12
   2165a:	bd90      	pop	{r4, r7, pc}
   2165c:	20005660 	.word	0x20005660
   21660:	00021105 	.word	0x00021105
   21664:	00000257 	.word	0x00000257
   21668:	0003841c 	.word	0x0003841c
   2166c:	00038104 	.word	0x00038104
   21670:	0001e189 	.word	0x0001e189
   21674:	00038300 	.word	0x00038300
   21678:	00038100 	.word	0x00038100

0002167c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   2167c:	b590      	push	{r4, r7, lr}
   2167e:	b087      	sub	sp, #28
   21680:	af00      	add	r7, sp, #0
   21682:	60f8      	str	r0, [r7, #12]
   21684:	60b9      	str	r1, [r7, #8]
   21686:	0019      	movs	r1, r3
   21688:	1dbb      	adds	r3, r7, #6
   2168a:	801a      	strh	r2, [r3, #0]
   2168c:	1d7b      	adds	r3, r7, #5
   2168e:	1c0a      	adds	r2, r1, #0
   21690:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21692:	2317      	movs	r3, #23
   21694:	18fb      	adds	r3, r7, r3
   21696:	2200      	movs	r2, #0
   21698:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   2169a:	68fb      	ldr	r3, [r7, #12]
   2169c:	2b00      	cmp	r3, #0
   2169e:	d006      	beq.n	216ae <hif_receive+0x32>
   216a0:	68bb      	ldr	r3, [r7, #8]
   216a2:	2b00      	cmp	r3, #0
   216a4:	d003      	beq.n	216ae <hif_receive+0x32>
   216a6:	1dbb      	adds	r3, r7, #6
   216a8:	881b      	ldrh	r3, [r3, #0]
   216aa:	2b00      	cmp	r3, #0
   216ac:	d11e      	bne.n	216ec <hif_receive+0x70>
	{
		if(isDone)
   216ae:	1d7b      	adds	r3, r7, #5
   216b0:	781b      	ldrb	r3, [r3, #0]
   216b2:	2b00      	cmp	r3, #0
   216b4:	d006      	beq.n	216c4 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   216b6:	2317      	movs	r3, #23
   216b8:	18fc      	adds	r4, r7, r3
   216ba:	4b45      	ldr	r3, [pc, #276]	; (217d0 <hif_receive+0x154>)
   216bc:	4798      	blx	r3
   216be:	0003      	movs	r3, r0
   216c0:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   216c2:	e07c      	b.n	217be <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   216c4:	2317      	movs	r3, #23
   216c6:	18fb      	adds	r3, r7, r3
   216c8:	22f4      	movs	r2, #244	; 0xf4
   216ca:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   216cc:	239e      	movs	r3, #158	; 0x9e
   216ce:	009a      	lsls	r2, r3, #2
   216d0:	4940      	ldr	r1, [pc, #256]	; (217d4 <hif_receive+0x158>)
   216d2:	4b41      	ldr	r3, [pc, #260]	; (217d8 <hif_receive+0x15c>)
   216d4:	0018      	movs	r0, r3
   216d6:	4b41      	ldr	r3, [pc, #260]	; (217dc <hif_receive+0x160>)
   216d8:	4798      	blx	r3
   216da:	4b41      	ldr	r3, [pc, #260]	; (217e0 <hif_receive+0x164>)
   216dc:	0018      	movs	r0, r3
   216de:	4b3f      	ldr	r3, [pc, #252]	; (217dc <hif_receive+0x160>)
   216e0:	4798      	blx	r3
   216e2:	4b40      	ldr	r3, [pc, #256]	; (217e4 <hif_receive+0x168>)
   216e4:	0018      	movs	r0, r3
   216e6:	4b3d      	ldr	r3, [pc, #244]	; (217dc <hif_receive+0x160>)
   216e8:	4798      	blx	r3
		goto ERR1;
   216ea:	e068      	b.n	217be <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   216ec:	1dbb      	adds	r3, r7, #6
   216ee:	881a      	ldrh	r2, [r3, #0]
   216f0:	4b3d      	ldr	r3, [pc, #244]	; (217e8 <hif_receive+0x16c>)
   216f2:	68db      	ldr	r3, [r3, #12]
   216f4:	429a      	cmp	r2, r3
   216f6:	d917      	bls.n	21728 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   216f8:	2317      	movs	r3, #23
   216fa:	18fb      	adds	r3, r7, r3
   216fc:	22f4      	movs	r2, #244	; 0xf4
   216fe:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   21700:	23a0      	movs	r3, #160	; 0xa0
   21702:	009a      	lsls	r2, r3, #2
   21704:	4933      	ldr	r1, [pc, #204]	; (217d4 <hif_receive+0x158>)
   21706:	4b34      	ldr	r3, [pc, #208]	; (217d8 <hif_receive+0x15c>)
   21708:	0018      	movs	r0, r3
   2170a:	4b34      	ldr	r3, [pc, #208]	; (217dc <hif_receive+0x160>)
   2170c:	4798      	blx	r3
   2170e:	1dbb      	adds	r3, r7, #6
   21710:	8819      	ldrh	r1, [r3, #0]
   21712:	4b35      	ldr	r3, [pc, #212]	; (217e8 <hif_receive+0x16c>)
   21714:	68da      	ldr	r2, [r3, #12]
   21716:	4b35      	ldr	r3, [pc, #212]	; (217ec <hif_receive+0x170>)
   21718:	0018      	movs	r0, r3
   2171a:	4b30      	ldr	r3, [pc, #192]	; (217dc <hif_receive+0x160>)
   2171c:	4798      	blx	r3
   2171e:	4b31      	ldr	r3, [pc, #196]	; (217e4 <hif_receive+0x168>)
   21720:	0018      	movs	r0, r3
   21722:	4b2e      	ldr	r3, [pc, #184]	; (217dc <hif_receive+0x160>)
   21724:	4798      	blx	r3
		goto ERR1;
   21726:	e04a      	b.n	217be <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   21728:	4b2f      	ldr	r3, [pc, #188]	; (217e8 <hif_receive+0x16c>)
   2172a:	689a      	ldr	r2, [r3, #8]
   2172c:	68fb      	ldr	r3, [r7, #12]
   2172e:	429a      	cmp	r2, r3
   21730:	d80a      	bhi.n	21748 <hif_receive+0xcc>
   21732:	1dbb      	adds	r3, r7, #6
   21734:	881a      	ldrh	r2, [r3, #0]
   21736:	68fb      	ldr	r3, [r7, #12]
   21738:	18d2      	adds	r2, r2, r3
   2173a:	4b2b      	ldr	r3, [pc, #172]	; (217e8 <hif_receive+0x16c>)
   2173c:	6899      	ldr	r1, [r3, #8]
   2173e:	4b2a      	ldr	r3, [pc, #168]	; (217e8 <hif_receive+0x16c>)
   21740:	68db      	ldr	r3, [r3, #12]
   21742:	18cb      	adds	r3, r1, r3
   21744:	429a      	cmp	r2, r3
   21746:	d912      	bls.n	2176e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   21748:	2317      	movs	r3, #23
   2174a:	18fb      	adds	r3, r7, r3
   2174c:	22f4      	movs	r2, #244	; 0xf4
   2174e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   21750:	4a27      	ldr	r2, [pc, #156]	; (217f0 <hif_receive+0x174>)
   21752:	4920      	ldr	r1, [pc, #128]	; (217d4 <hif_receive+0x158>)
   21754:	4b20      	ldr	r3, [pc, #128]	; (217d8 <hif_receive+0x15c>)
   21756:	0018      	movs	r0, r3
   21758:	4b20      	ldr	r3, [pc, #128]	; (217dc <hif_receive+0x160>)
   2175a:	4798      	blx	r3
   2175c:	4b25      	ldr	r3, [pc, #148]	; (217f4 <hif_receive+0x178>)
   2175e:	0018      	movs	r0, r3
   21760:	4b1e      	ldr	r3, [pc, #120]	; (217dc <hif_receive+0x160>)
   21762:	4798      	blx	r3
   21764:	4b1f      	ldr	r3, [pc, #124]	; (217e4 <hif_receive+0x168>)
   21766:	0018      	movs	r0, r3
   21768:	4b1c      	ldr	r3, [pc, #112]	; (217dc <hif_receive+0x160>)
   2176a:	4798      	blx	r3
		goto ERR1;
   2176c:	e027      	b.n	217be <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   2176e:	1dbb      	adds	r3, r7, #6
   21770:	881a      	ldrh	r2, [r3, #0]
   21772:	2317      	movs	r3, #23
   21774:	18fc      	adds	r4, r7, r3
   21776:	68b9      	ldr	r1, [r7, #8]
   21778:	68fb      	ldr	r3, [r7, #12]
   2177a:	0018      	movs	r0, r3
   2177c:	4b1e      	ldr	r3, [pc, #120]	; (217f8 <hif_receive+0x17c>)
   2177e:	4798      	blx	r3
   21780:	0003      	movs	r3, r0
   21782:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21784:	2317      	movs	r3, #23
   21786:	18fb      	adds	r3, r7, r3
   21788:	781b      	ldrb	r3, [r3, #0]
   2178a:	b25b      	sxtb	r3, r3
   2178c:	2b00      	cmp	r3, #0
   2178e:	d115      	bne.n	217bc <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   21790:	4b15      	ldr	r3, [pc, #84]	; (217e8 <hif_receive+0x16c>)
   21792:	689a      	ldr	r2, [r3, #8]
   21794:	4b14      	ldr	r3, [pc, #80]	; (217e8 <hif_receive+0x16c>)
   21796:	68db      	ldr	r3, [r3, #12]
   21798:	18d2      	adds	r2, r2, r3
   2179a:	1dbb      	adds	r3, r7, #6
   2179c:	8819      	ldrh	r1, [r3, #0]
   2179e:	68fb      	ldr	r3, [r7, #12]
   217a0:	18cb      	adds	r3, r1, r3
   217a2:	429a      	cmp	r2, r3
   217a4:	d003      	beq.n	217ae <hif_receive+0x132>
   217a6:	1d7b      	adds	r3, r7, #5
   217a8:	781b      	ldrb	r3, [r3, #0]
   217aa:	2b00      	cmp	r3, #0
   217ac:	d007      	beq.n	217be <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   217ae:	2317      	movs	r3, #23
   217b0:	18fc      	adds	r4, r7, r3
   217b2:	4b07      	ldr	r3, [pc, #28]	; (217d0 <hif_receive+0x154>)
   217b4:	4798      	blx	r3
   217b6:	0003      	movs	r3, r0
   217b8:	7023      	strb	r3, [r4, #0]
   217ba:	e000      	b.n	217be <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   217bc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   217be:	2317      	movs	r3, #23
   217c0:	18fb      	adds	r3, r7, r3
   217c2:	781b      	ldrb	r3, [r3, #0]
   217c4:	b25b      	sxtb	r3, r3
}
   217c6:	0018      	movs	r0, r3
   217c8:	46bd      	mov	sp, r7
   217ca:	b007      	add	sp, #28
   217cc:	bd90      	pop	{r4, r7, pc}
   217ce:	46c0      	nop			; (mov r8, r8)
   217d0:	00020b99 	.word	0x00020b99
   217d4:	0003842c 	.word	0x0003842c
   217d8:	00038104 	.word	0x00038104
   217dc:	0001e189 	.word	0x0001e189
   217e0:	00038330 	.word	0x00038330
   217e4:	00038100 	.word	0x00038100
   217e8:	20005660 	.word	0x20005660
   217ec:	00038350 	.word	0x00038350
   217f0:	00000286 	.word	0x00000286
   217f4:	00038398 	.word	0x00038398
   217f8:	00022c05 	.word	0x00022c05

000217fc <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   217fc:	b580      	push	{r7, lr}
   217fe:	b084      	sub	sp, #16
   21800:	af00      	add	r7, sp, #0
   21802:	0002      	movs	r2, r0
   21804:	6039      	str	r1, [r7, #0]
   21806:	1dfb      	adds	r3, r7, #7
   21808:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2180a:	230f      	movs	r3, #15
   2180c:	18fb      	adds	r3, r7, r3
   2180e:	2200      	movs	r2, #0
   21810:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   21812:	1dfb      	adds	r3, r7, #7
   21814:	781b      	ldrb	r3, [r3, #0]
   21816:	2b07      	cmp	r3, #7
   21818:	d820      	bhi.n	2185c <hif_register_cb+0x60>
   2181a:	009a      	lsls	r2, r3, #2
   2181c:	4b1e      	ldr	r3, [pc, #120]	; (21898 <hif_register_cb+0x9c>)
   2181e:	18d3      	adds	r3, r2, r3
   21820:	681b      	ldr	r3, [r3, #0]
   21822:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   21824:	4b1d      	ldr	r3, [pc, #116]	; (2189c <hif_register_cb+0xa0>)
   21826:	683a      	ldr	r2, [r7, #0]
   21828:	615a      	str	r2, [r3, #20]
			break;
   2182a:	e02d      	b.n	21888 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   2182c:	4b1b      	ldr	r3, [pc, #108]	; (2189c <hif_register_cb+0xa0>)
   2182e:	683a      	ldr	r2, [r7, #0]
   21830:	611a      	str	r2, [r3, #16]
			break;
   21832:	e029      	b.n	21888 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   21834:	4b19      	ldr	r3, [pc, #100]	; (2189c <hif_register_cb+0xa0>)
   21836:	683a      	ldr	r2, [r7, #0]
   21838:	619a      	str	r2, [r3, #24]
			break;
   2183a:	e025      	b.n	21888 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   2183c:	4b17      	ldr	r3, [pc, #92]	; (2189c <hif_register_cb+0xa0>)
   2183e:	683a      	ldr	r2, [r7, #0]
   21840:	621a      	str	r2, [r3, #32]
			break;
   21842:	e021      	b.n	21888 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   21844:	4b15      	ldr	r3, [pc, #84]	; (2189c <hif_register_cb+0xa0>)
   21846:	683a      	ldr	r2, [r7, #0]
   21848:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   2184a:	e01d      	b.n	21888 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   2184c:	4b13      	ldr	r3, [pc, #76]	; (2189c <hif_register_cb+0xa0>)
   2184e:	683a      	ldr	r2, [r7, #0]
   21850:	61da      	str	r2, [r3, #28]
			break;
   21852:	e019      	b.n	21888 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   21854:	4b11      	ldr	r3, [pc, #68]	; (2189c <hif_register_cb+0xa0>)
   21856:	683a      	ldr	r2, [r7, #0]
   21858:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   2185a:	e015      	b.n	21888 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   2185c:	4a10      	ldr	r2, [pc, #64]	; (218a0 <hif_register_cb+0xa4>)
   2185e:	4911      	ldr	r1, [pc, #68]	; (218a4 <hif_register_cb+0xa8>)
   21860:	4b11      	ldr	r3, [pc, #68]	; (218a8 <hif_register_cb+0xac>)
   21862:	0018      	movs	r0, r3
   21864:	4b11      	ldr	r3, [pc, #68]	; (218ac <hif_register_cb+0xb0>)
   21866:	4798      	blx	r3
   21868:	1dfb      	adds	r3, r7, #7
   2186a:	781a      	ldrb	r2, [r3, #0]
   2186c:	4b10      	ldr	r3, [pc, #64]	; (218b0 <hif_register_cb+0xb4>)
   2186e:	0011      	movs	r1, r2
   21870:	0018      	movs	r0, r3
   21872:	4b0e      	ldr	r3, [pc, #56]	; (218ac <hif_register_cb+0xb0>)
   21874:	4798      	blx	r3
   21876:	4b0f      	ldr	r3, [pc, #60]	; (218b4 <hif_register_cb+0xb8>)
   21878:	0018      	movs	r0, r3
   2187a:	4b0c      	ldr	r3, [pc, #48]	; (218ac <hif_register_cb+0xb0>)
   2187c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2187e:	230f      	movs	r3, #15
   21880:	18fb      	adds	r3, r7, r3
   21882:	22f4      	movs	r2, #244	; 0xf4
   21884:	701a      	strb	r2, [r3, #0]
			break;
   21886:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   21888:	230f      	movs	r3, #15
   2188a:	18fb      	adds	r3, r7, r3
   2188c:	781b      	ldrb	r3, [r3, #0]
   2188e:	b25b      	sxtb	r3, r3
}
   21890:	0018      	movs	r0, r3
   21892:	46bd      	mov	sp, r7
   21894:	b004      	add	sp, #16
   21896:	bd80      	pop	{r7, pc}
   21898:	000383e8 	.word	0x000383e8
   2189c:	20005660 	.word	0x20005660
   218a0:	000002be 	.word	0x000002be
   218a4:	00038438 	.word	0x00038438
   218a8:	00038104 	.word	0x00038104
   218ac:	0001e189 	.word	0x0001e189
   218b0:	000383dc 	.word	0x000383dc
   218b4:	00038100 	.word	0x00038100

000218b8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   218b8:	b590      	push	{r4, r7, lr}
   218ba:	b0af      	sub	sp, #188	; 0xbc
   218bc:	af02      	add	r7, sp, #8
   218be:	603a      	str	r2, [r7, #0]
   218c0:	1dfb      	adds	r3, r7, #7
   218c2:	1c02      	adds	r2, r0, #0
   218c4:	701a      	strb	r2, [r3, #0]
   218c6:	1d3b      	adds	r3, r7, #4
   218c8:	1c0a      	adds	r2, r1, #0
   218ca:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   218cc:	1dfb      	adds	r3, r7, #7
   218ce:	781b      	ldrb	r3, [r3, #0]
   218d0:	2b2c      	cmp	r3, #44	; 0x2c
   218d2:	d116      	bne.n	21902 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   218d4:	23a4      	movs	r3, #164	; 0xa4
   218d6:	18f9      	adds	r1, r7, r3
   218d8:	6838      	ldr	r0, [r7, #0]
   218da:	2300      	movs	r3, #0
   218dc:	2204      	movs	r2, #4
   218de:	4cca      	ldr	r4, [pc, #808]	; (21c08 <m2m_wifi_cb+0x350>)
   218e0:	47a0      	blx	r4
   218e2:	1e03      	subs	r3, r0, #0
   218e4:	d000      	beq.n	218e8 <m2m_wifi_cb+0x30>
   218e6:	e1b4      	b.n	21c52 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   218e8:	4bc8      	ldr	r3, [pc, #800]	; (21c0c <m2m_wifi_cb+0x354>)
   218ea:	681b      	ldr	r3, [r3, #0]
   218ec:	2b00      	cmp	r3, #0
   218ee:	d100      	bne.n	218f2 <m2m_wifi_cb+0x3a>
   218f0:	e1af      	b.n	21c52 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   218f2:	4bc6      	ldr	r3, [pc, #792]	; (21c0c <m2m_wifi_cb+0x354>)
   218f4:	681b      	ldr	r3, [r3, #0]
   218f6:	22a4      	movs	r2, #164	; 0xa4
   218f8:	18ba      	adds	r2, r7, r2
   218fa:	0011      	movs	r1, r2
   218fc:	202c      	movs	r0, #44	; 0x2c
   218fe:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   21900:	e1a7      	b.n	21c52 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   21902:	1dfb      	adds	r3, r7, #7
   21904:	781b      	ldrb	r3, [r3, #0]
   21906:	2b1b      	cmp	r3, #27
   21908:	d116      	bne.n	21938 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   2190a:	239c      	movs	r3, #156	; 0x9c
   2190c:	18f9      	adds	r1, r7, r3
   2190e:	6838      	ldr	r0, [r7, #0]
   21910:	2300      	movs	r3, #0
   21912:	2208      	movs	r2, #8
   21914:	4cbc      	ldr	r4, [pc, #752]	; (21c08 <m2m_wifi_cb+0x350>)
   21916:	47a0      	blx	r4
   21918:	1e03      	subs	r3, r0, #0
   2191a:	d000      	beq.n	2191e <m2m_wifi_cb+0x66>
   2191c:	e199      	b.n	21c52 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2191e:	4bbb      	ldr	r3, [pc, #748]	; (21c0c <m2m_wifi_cb+0x354>)
   21920:	681b      	ldr	r3, [r3, #0]
   21922:	2b00      	cmp	r3, #0
   21924:	d100      	bne.n	21928 <m2m_wifi_cb+0x70>
   21926:	e194      	b.n	21c52 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   21928:	4bb8      	ldr	r3, [pc, #736]	; (21c0c <m2m_wifi_cb+0x354>)
   2192a:	681b      	ldr	r3, [r3, #0]
   2192c:	229c      	movs	r2, #156	; 0x9c
   2192e:	18ba      	adds	r2, r7, r2
   21930:	0011      	movs	r1, r2
   21932:	201b      	movs	r0, #27
   21934:	4798      	blx	r3
}
   21936:	e18c      	b.n	21c52 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   21938:	1dfb      	adds	r3, r7, #7
   2193a:	781b      	ldrb	r3, [r3, #0]
   2193c:	2b06      	cmp	r3, #6
   2193e:	d116      	bne.n	2196e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   21940:	230c      	movs	r3, #12
   21942:	18f9      	adds	r1, r7, r3
   21944:	6838      	ldr	r0, [r7, #0]
   21946:	2301      	movs	r3, #1
   21948:	2230      	movs	r2, #48	; 0x30
   2194a:	4caf      	ldr	r4, [pc, #700]	; (21c08 <m2m_wifi_cb+0x350>)
   2194c:	47a0      	blx	r4
   2194e:	1e03      	subs	r3, r0, #0
   21950:	d000      	beq.n	21954 <m2m_wifi_cb+0x9c>
   21952:	e17e      	b.n	21c52 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21954:	4bad      	ldr	r3, [pc, #692]	; (21c0c <m2m_wifi_cb+0x354>)
   21956:	681b      	ldr	r3, [r3, #0]
   21958:	2b00      	cmp	r3, #0
   2195a:	d100      	bne.n	2195e <m2m_wifi_cb+0xa6>
   2195c:	e179      	b.n	21c52 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   2195e:	4bab      	ldr	r3, [pc, #684]	; (21c0c <m2m_wifi_cb+0x354>)
   21960:	681b      	ldr	r3, [r3, #0]
   21962:	220c      	movs	r2, #12
   21964:	18ba      	adds	r2, r7, r2
   21966:	0011      	movs	r1, r2
   21968:	2006      	movs	r0, #6
   2196a:	4798      	blx	r3
}
   2196c:	e171      	b.n	21c52 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   2196e:	1dfb      	adds	r3, r7, #7
   21970:	781b      	ldrb	r3, [r3, #0]
   21972:	2b0e      	cmp	r3, #14
   21974:	d100      	bne.n	21978 <m2m_wifi_cb+0xc0>
   21976:	e16c      	b.n	21c52 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   21978:	1dfb      	adds	r3, r7, #7
   2197a:	781b      	ldrb	r3, [r3, #0]
   2197c:	2b32      	cmp	r3, #50	; 0x32
   2197e:	d116      	bne.n	219ae <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   21980:	2384      	movs	r3, #132	; 0x84
   21982:	18f9      	adds	r1, r7, r3
   21984:	6838      	ldr	r0, [r7, #0]
   21986:	2300      	movs	r3, #0
   21988:	2218      	movs	r2, #24
   2198a:	4c9f      	ldr	r4, [pc, #636]	; (21c08 <m2m_wifi_cb+0x350>)
   2198c:	47a0      	blx	r4
   2198e:	1e03      	subs	r3, r0, #0
   21990:	d000      	beq.n	21994 <m2m_wifi_cb+0xdc>
   21992:	e15e      	b.n	21c52 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21994:	4b9d      	ldr	r3, [pc, #628]	; (21c0c <m2m_wifi_cb+0x354>)
   21996:	681b      	ldr	r3, [r3, #0]
   21998:	2b00      	cmp	r3, #0
   2199a:	d100      	bne.n	2199e <m2m_wifi_cb+0xe6>
   2199c:	e159      	b.n	21c52 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   2199e:	4b9b      	ldr	r3, [pc, #620]	; (21c0c <m2m_wifi_cb+0x354>)
   219a0:	681b      	ldr	r3, [r3, #0]
   219a2:	2284      	movs	r2, #132	; 0x84
   219a4:	18ba      	adds	r2, r7, r2
   219a6:	0011      	movs	r1, r2
   219a8:	2032      	movs	r0, #50	; 0x32
   219aa:	4798      	blx	r3
}
   219ac:	e151      	b.n	21c52 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   219ae:	1dfb      	adds	r3, r7, #7
   219b0:	781b      	ldrb	r3, [r3, #0]
   219b2:	2b2f      	cmp	r3, #47	; 0x2f
   219b4:	d11d      	bne.n	219f2 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   219b6:	230c      	movs	r3, #12
   219b8:	18fb      	adds	r3, r7, r3
   219ba:	2264      	movs	r2, #100	; 0x64
   219bc:	2100      	movs	r1, #0
   219be:	0018      	movs	r0, r3
   219c0:	4b93      	ldr	r3, [pc, #588]	; (21c10 <m2m_wifi_cb+0x358>)
   219c2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   219c4:	230c      	movs	r3, #12
   219c6:	18f9      	adds	r1, r7, r3
   219c8:	6838      	ldr	r0, [r7, #0]
   219ca:	2300      	movs	r3, #0
   219cc:	2264      	movs	r2, #100	; 0x64
   219ce:	4c8e      	ldr	r4, [pc, #568]	; (21c08 <m2m_wifi_cb+0x350>)
   219d0:	47a0      	blx	r4
   219d2:	1e03      	subs	r3, r0, #0
   219d4:	d000      	beq.n	219d8 <m2m_wifi_cb+0x120>
   219d6:	e13c      	b.n	21c52 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   219d8:	4b8c      	ldr	r3, [pc, #560]	; (21c0c <m2m_wifi_cb+0x354>)
   219da:	681b      	ldr	r3, [r3, #0]
   219dc:	2b00      	cmp	r3, #0
   219de:	d100      	bne.n	219e2 <m2m_wifi_cb+0x12a>
   219e0:	e137      	b.n	21c52 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   219e2:	4b8a      	ldr	r3, [pc, #552]	; (21c0c <m2m_wifi_cb+0x354>)
   219e4:	681b      	ldr	r3, [r3, #0]
   219e6:	220c      	movs	r2, #12
   219e8:	18ba      	adds	r2, r7, r2
   219ea:	0011      	movs	r1, r2
   219ec:	202f      	movs	r0, #47	; 0x2f
   219ee:	4798      	blx	r3
}
   219f0:	e12f      	b.n	21c52 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   219f2:	1dfb      	adds	r3, r7, #7
   219f4:	781b      	ldrb	r3, [r3, #0]
   219f6:	2b34      	cmp	r3, #52	; 0x34
   219f8:	d137      	bne.n	21a6a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   219fa:	2380      	movs	r3, #128	; 0x80
   219fc:	18f9      	adds	r1, r7, r3
   219fe:	6838      	ldr	r0, [r7, #0]
   21a00:	2300      	movs	r3, #0
   21a02:	2204      	movs	r2, #4
   21a04:	4c80      	ldr	r4, [pc, #512]	; (21c08 <m2m_wifi_cb+0x350>)
   21a06:	47a0      	blx	r4
   21a08:	1e03      	subs	r3, r0, #0
   21a0a:	d000      	beq.n	21a0e <m2m_wifi_cb+0x156>
   21a0c:	e121      	b.n	21c52 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   21a0e:	4b81      	ldr	r3, [pc, #516]	; (21c14 <m2m_wifi_cb+0x35c>)
   21a10:	0018      	movs	r0, r3
   21a12:	4b81      	ldr	r3, [pc, #516]	; (21c18 <m2m_wifi_cb+0x360>)
   21a14:	4798      	blx	r3
   21a16:	2380      	movs	r3, #128	; 0x80
   21a18:	18fb      	adds	r3, r7, r3
   21a1a:	681b      	ldr	r3, [r3, #0]
   21a1c:	0e1b      	lsrs	r3, r3, #24
   21a1e:	b2db      	uxtb	r3, r3
   21a20:	0019      	movs	r1, r3
   21a22:	2380      	movs	r3, #128	; 0x80
   21a24:	18fb      	adds	r3, r7, r3
   21a26:	681b      	ldr	r3, [r3, #0]
   21a28:	0c1b      	lsrs	r3, r3, #16
   21a2a:	b2db      	uxtb	r3, r3
   21a2c:	001a      	movs	r2, r3
   21a2e:	2380      	movs	r3, #128	; 0x80
   21a30:	18fb      	adds	r3, r7, r3
   21a32:	681b      	ldr	r3, [r3, #0]
   21a34:	0a1b      	lsrs	r3, r3, #8
   21a36:	b2db      	uxtb	r3, r3
   21a38:	001c      	movs	r4, r3
   21a3a:	2380      	movs	r3, #128	; 0x80
   21a3c:	18fb      	adds	r3, r7, r3
   21a3e:	681b      	ldr	r3, [r3, #0]
   21a40:	b2db      	uxtb	r3, r3
   21a42:	4876      	ldr	r0, [pc, #472]	; (21c1c <m2m_wifi_cb+0x364>)
   21a44:	9300      	str	r3, [sp, #0]
   21a46:	0023      	movs	r3, r4
   21a48:	4c73      	ldr	r4, [pc, #460]	; (21c18 <m2m_wifi_cb+0x360>)
   21a4a:	47a0      	blx	r4
   21a4c:	4b74      	ldr	r3, [pc, #464]	; (21c20 <m2m_wifi_cb+0x368>)
   21a4e:	0018      	movs	r0, r3
   21a50:	4b71      	ldr	r3, [pc, #452]	; (21c18 <m2m_wifi_cb+0x360>)
   21a52:	4798      	blx	r3
			if (gpfAppWifiCb)
   21a54:	4b6d      	ldr	r3, [pc, #436]	; (21c0c <m2m_wifi_cb+0x354>)
   21a56:	681b      	ldr	r3, [r3, #0]
   21a58:	2b00      	cmp	r3, #0
   21a5a:	d100      	bne.n	21a5e <m2m_wifi_cb+0x1a6>
   21a5c:	e0f9      	b.n	21c52 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   21a5e:	4b6b      	ldr	r3, [pc, #428]	; (21c0c <m2m_wifi_cb+0x354>)
   21a60:	681b      	ldr	r3, [r3, #0]
   21a62:	2100      	movs	r1, #0
   21a64:	2034      	movs	r0, #52	; 0x34
   21a66:	4798      	blx	r3
}
   21a68:	e0f3      	b.n	21c52 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   21a6a:	1dfb      	adds	r3, r7, #7
   21a6c:	781b      	ldrb	r3, [r3, #0]
   21a6e:	2b11      	cmp	r3, #17
   21a70:	d11e      	bne.n	21ab0 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   21a72:	4b6c      	ldr	r3, [pc, #432]	; (21c24 <m2m_wifi_cb+0x36c>)
   21a74:	2200      	movs	r2, #0
   21a76:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   21a78:	237c      	movs	r3, #124	; 0x7c
   21a7a:	18f9      	adds	r1, r7, r3
   21a7c:	6838      	ldr	r0, [r7, #0]
   21a7e:	2300      	movs	r3, #0
   21a80:	2204      	movs	r2, #4
   21a82:	4c61      	ldr	r4, [pc, #388]	; (21c08 <m2m_wifi_cb+0x350>)
   21a84:	47a0      	blx	r4
   21a86:	1e03      	subs	r3, r0, #0
   21a88:	d000      	beq.n	21a8c <m2m_wifi_cb+0x1d4>
   21a8a:	e0e2      	b.n	21c52 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   21a8c:	237c      	movs	r3, #124	; 0x7c
   21a8e:	18fb      	adds	r3, r7, r3
   21a90:	781a      	ldrb	r2, [r3, #0]
   21a92:	4b65      	ldr	r3, [pc, #404]	; (21c28 <m2m_wifi_cb+0x370>)
   21a94:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   21a96:	4b5d      	ldr	r3, [pc, #372]	; (21c0c <m2m_wifi_cb+0x354>)
   21a98:	681b      	ldr	r3, [r3, #0]
   21a9a:	2b00      	cmp	r3, #0
   21a9c:	d100      	bne.n	21aa0 <m2m_wifi_cb+0x1e8>
   21a9e:	e0d8      	b.n	21c52 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   21aa0:	4b5a      	ldr	r3, [pc, #360]	; (21c0c <m2m_wifi_cb+0x354>)
   21aa2:	681b      	ldr	r3, [r3, #0]
   21aa4:	227c      	movs	r2, #124	; 0x7c
   21aa6:	18ba      	adds	r2, r7, r2
   21aa8:	0011      	movs	r1, r2
   21aaa:	2011      	movs	r0, #17
   21aac:	4798      	blx	r3
}
   21aae:	e0d0      	b.n	21c52 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   21ab0:	1dfb      	adds	r3, r7, #7
   21ab2:	781b      	ldrb	r3, [r3, #0]
   21ab4:	2b13      	cmp	r3, #19
   21ab6:	d116      	bne.n	21ae6 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   21ab8:	230c      	movs	r3, #12
   21aba:	18f9      	adds	r1, r7, r3
   21abc:	6838      	ldr	r0, [r7, #0]
   21abe:	2300      	movs	r3, #0
   21ac0:	222c      	movs	r2, #44	; 0x2c
   21ac2:	4c51      	ldr	r4, [pc, #324]	; (21c08 <m2m_wifi_cb+0x350>)
   21ac4:	47a0      	blx	r4
   21ac6:	1e03      	subs	r3, r0, #0
   21ac8:	d000      	beq.n	21acc <m2m_wifi_cb+0x214>
   21aca:	e0c2      	b.n	21c52 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21acc:	4b4f      	ldr	r3, [pc, #316]	; (21c0c <m2m_wifi_cb+0x354>)
   21ace:	681b      	ldr	r3, [r3, #0]
   21ad0:	2b00      	cmp	r3, #0
   21ad2:	d100      	bne.n	21ad6 <m2m_wifi_cb+0x21e>
   21ad4:	e0bd      	b.n	21c52 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   21ad6:	4b4d      	ldr	r3, [pc, #308]	; (21c0c <m2m_wifi_cb+0x354>)
   21ad8:	681b      	ldr	r3, [r3, #0]
   21ada:	220c      	movs	r2, #12
   21adc:	18ba      	adds	r2, r7, r2
   21ade:	0011      	movs	r1, r2
   21ae0:	2013      	movs	r0, #19
   21ae2:	4798      	blx	r3
}
   21ae4:	e0b5      	b.n	21c52 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   21ae6:	1dfb      	adds	r3, r7, #7
   21ae8:	781b      	ldrb	r3, [r3, #0]
   21aea:	2b04      	cmp	r3, #4
   21aec:	d116      	bne.n	21b1c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   21aee:	23a8      	movs	r3, #168	; 0xa8
   21af0:	18f9      	adds	r1, r7, r3
   21af2:	6838      	ldr	r0, [r7, #0]
   21af4:	2300      	movs	r3, #0
   21af6:	2204      	movs	r2, #4
   21af8:	4c43      	ldr	r4, [pc, #268]	; (21c08 <m2m_wifi_cb+0x350>)
   21afa:	47a0      	blx	r4
   21afc:	1e03      	subs	r3, r0, #0
   21afe:	d000      	beq.n	21b02 <m2m_wifi_cb+0x24a>
   21b00:	e0a7      	b.n	21c52 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21b02:	4b42      	ldr	r3, [pc, #264]	; (21c0c <m2m_wifi_cb+0x354>)
   21b04:	681b      	ldr	r3, [r3, #0]
   21b06:	2b00      	cmp	r3, #0
   21b08:	d100      	bne.n	21b0c <m2m_wifi_cb+0x254>
   21b0a:	e0a2      	b.n	21c52 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   21b0c:	4b3f      	ldr	r3, [pc, #252]	; (21c0c <m2m_wifi_cb+0x354>)
   21b0e:	681b      	ldr	r3, [r3, #0]
   21b10:	22a8      	movs	r2, #168	; 0xa8
   21b12:	18ba      	adds	r2, r7, r2
   21b14:	0011      	movs	r1, r2
   21b16:	2004      	movs	r0, #4
   21b18:	4798      	blx	r3
}
   21b1a:	e09a      	b.n	21c52 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   21b1c:	1dfb      	adds	r3, r7, #7
   21b1e:	781b      	ldrb	r3, [r3, #0]
   21b20:	2b65      	cmp	r3, #101	; 0x65
   21b22:	d116      	bne.n	21b52 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   21b24:	23a8      	movs	r3, #168	; 0xa8
   21b26:	18f9      	adds	r1, r7, r3
   21b28:	6838      	ldr	r0, [r7, #0]
   21b2a:	2300      	movs	r3, #0
   21b2c:	2204      	movs	r2, #4
   21b2e:	4c36      	ldr	r4, [pc, #216]	; (21c08 <m2m_wifi_cb+0x350>)
   21b30:	47a0      	blx	r4
   21b32:	1e03      	subs	r3, r0, #0
   21b34:	d000      	beq.n	21b38 <m2m_wifi_cb+0x280>
   21b36:	e08c      	b.n	21c52 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21b38:	4b34      	ldr	r3, [pc, #208]	; (21c0c <m2m_wifi_cb+0x354>)
   21b3a:	681b      	ldr	r3, [r3, #0]
   21b3c:	2b00      	cmp	r3, #0
   21b3e:	d100      	bne.n	21b42 <m2m_wifi_cb+0x28a>
   21b40:	e087      	b.n	21c52 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   21b42:	4b32      	ldr	r3, [pc, #200]	; (21c0c <m2m_wifi_cb+0x354>)
   21b44:	681b      	ldr	r3, [r3, #0]
   21b46:	22a8      	movs	r2, #168	; 0xa8
   21b48:	18ba      	adds	r2, r7, r2
   21b4a:	0011      	movs	r1, r2
   21b4c:	2065      	movs	r0, #101	; 0x65
   21b4e:	4798      	blx	r3
}
   21b50:	e07f      	b.n	21c52 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   21b52:	1dfb      	adds	r3, r7, #7
   21b54:	781b      	ldrb	r3, [r3, #0]
   21b56:	2b09      	cmp	r3, #9
   21b58:	d116      	bne.n	21b88 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   21b5a:	230c      	movs	r3, #12
   21b5c:	18f9      	adds	r1, r7, r3
   21b5e:	6838      	ldr	r0, [r7, #0]
   21b60:	2301      	movs	r3, #1
   21b62:	2264      	movs	r2, #100	; 0x64
   21b64:	4c28      	ldr	r4, [pc, #160]	; (21c08 <m2m_wifi_cb+0x350>)
   21b66:	47a0      	blx	r4
   21b68:	1e03      	subs	r3, r0, #0
   21b6a:	d000      	beq.n	21b6e <m2m_wifi_cb+0x2b6>
   21b6c:	e071      	b.n	21c52 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21b6e:	4b27      	ldr	r3, [pc, #156]	; (21c0c <m2m_wifi_cb+0x354>)
   21b70:	681b      	ldr	r3, [r3, #0]
   21b72:	2b00      	cmp	r3, #0
   21b74:	d100      	bne.n	21b78 <m2m_wifi_cb+0x2c0>
   21b76:	e06c      	b.n	21c52 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   21b78:	4b24      	ldr	r3, [pc, #144]	; (21c0c <m2m_wifi_cb+0x354>)
   21b7a:	681b      	ldr	r3, [r3, #0]
   21b7c:	220c      	movs	r2, #12
   21b7e:	18ba      	adds	r2, r7, r2
   21b80:	0011      	movs	r1, r2
   21b82:	2009      	movs	r0, #9
   21b84:	4798      	blx	r3
}
   21b86:	e064      	b.n	21c52 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   21b88:	1dfb      	adds	r3, r7, #7
   21b8a:	781b      	ldrb	r3, [r3, #0]
   21b8c:	2b2a      	cmp	r3, #42	; 0x2a
   21b8e:	d114      	bne.n	21bba <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   21b90:	2378      	movs	r3, #120	; 0x78
   21b92:	18f9      	adds	r1, r7, r3
   21b94:	6838      	ldr	r0, [r7, #0]
   21b96:	2301      	movs	r3, #1
   21b98:	2204      	movs	r2, #4
   21b9a:	4c1b      	ldr	r4, [pc, #108]	; (21c08 <m2m_wifi_cb+0x350>)
   21b9c:	47a0      	blx	r4
   21b9e:	1e03      	subs	r3, r0, #0
   21ba0:	d157      	bne.n	21c52 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21ba2:	4b1a      	ldr	r3, [pc, #104]	; (21c0c <m2m_wifi_cb+0x354>)
   21ba4:	681b      	ldr	r3, [r3, #0]
   21ba6:	2b00      	cmp	r3, #0
   21ba8:	d053      	beq.n	21c52 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   21baa:	4b18      	ldr	r3, [pc, #96]	; (21c0c <m2m_wifi_cb+0x354>)
   21bac:	681b      	ldr	r3, [r3, #0]
   21bae:	2278      	movs	r2, #120	; 0x78
   21bb0:	18ba      	adds	r2, r7, r2
   21bb2:	0011      	movs	r1, r2
   21bb4:	202a      	movs	r0, #42	; 0x2a
   21bb6:	4798      	blx	r3
}
   21bb8:	e04b      	b.n	21c52 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   21bba:	1dfb      	adds	r3, r7, #7
   21bbc:	781b      	ldrb	r3, [r3, #0]
   21bbe:	2b20      	cmp	r3, #32
   21bc0:	d134      	bne.n	21c2c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   21bc2:	2370      	movs	r3, #112	; 0x70
   21bc4:	18f9      	adds	r1, r7, r3
   21bc6:	6838      	ldr	r0, [r7, #0]
   21bc8:	2300      	movs	r3, #0
   21bca:	2208      	movs	r2, #8
   21bcc:	4c0e      	ldr	r4, [pc, #56]	; (21c08 <m2m_wifi_cb+0x350>)
   21bce:	47a0      	blx	r4
   21bd0:	1e03      	subs	r3, r0, #0
   21bd2:	d13e      	bne.n	21c52 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   21bd4:	683b      	ldr	r3, [r7, #0]
   21bd6:	3308      	adds	r3, #8
   21bd8:	0018      	movs	r0, r3
   21bda:	2370      	movs	r3, #112	; 0x70
   21bdc:	18fb      	adds	r3, r7, r3
   21bde:	6819      	ldr	r1, [r3, #0]
   21be0:	2370      	movs	r3, #112	; 0x70
   21be2:	18fb      	adds	r3, r7, r3
   21be4:	889a      	ldrh	r2, [r3, #4]
   21be6:	2301      	movs	r3, #1
   21be8:	4c07      	ldr	r4, [pc, #28]	; (21c08 <m2m_wifi_cb+0x350>)
   21bea:	47a0      	blx	r4
   21bec:	1e03      	subs	r3, r0, #0
   21bee:	d130      	bne.n	21c52 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   21bf0:	4b06      	ldr	r3, [pc, #24]	; (21c0c <m2m_wifi_cb+0x354>)
   21bf2:	681b      	ldr	r3, [r3, #0]
   21bf4:	2b00      	cmp	r3, #0
   21bf6:	d02c      	beq.n	21c52 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   21bf8:	4b04      	ldr	r3, [pc, #16]	; (21c0c <m2m_wifi_cb+0x354>)
   21bfa:	681b      	ldr	r3, [r3, #0]
   21bfc:	2270      	movs	r2, #112	; 0x70
   21bfe:	18ba      	adds	r2, r7, r2
   21c00:	0011      	movs	r1, r2
   21c02:	2020      	movs	r0, #32
   21c04:	4798      	blx	r3
}
   21c06:	e024      	b.n	21c52 <m2m_wifi_cb+0x39a>
   21c08:	0002167d 	.word	0x0002167d
   21c0c:	20003e94 	.word	0x20003e94
   21c10:	00020b01 	.word	0x00020b01
   21c14:	00038448 	.word	0x00038448
   21c18:	0001e189 	.word	0x0001e189
   21c1c:	00038454 	.word	0x00038454
   21c20:	00038474 	.word	0x00038474
   21c24:	20003e91 	.word	0x20003e91
   21c28:	20003e90 	.word	0x20003e90
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   21c2c:	2324      	movs	r3, #36	; 0x24
   21c2e:	33ff      	adds	r3, #255	; 0xff
   21c30:	001a      	movs	r2, r3
   21c32:	490a      	ldr	r1, [pc, #40]	; (21c5c <m2m_wifi_cb+0x3a4>)
   21c34:	4b0a      	ldr	r3, [pc, #40]	; (21c60 <m2m_wifi_cb+0x3a8>)
   21c36:	0018      	movs	r0, r3
   21c38:	4b0a      	ldr	r3, [pc, #40]	; (21c64 <m2m_wifi_cb+0x3ac>)
   21c3a:	4798      	blx	r3
   21c3c:	1dfb      	adds	r3, r7, #7
   21c3e:	781a      	ldrb	r2, [r3, #0]
   21c40:	4b09      	ldr	r3, [pc, #36]	; (21c68 <m2m_wifi_cb+0x3b0>)
   21c42:	0011      	movs	r1, r2
   21c44:	0018      	movs	r0, r3
   21c46:	4b07      	ldr	r3, [pc, #28]	; (21c64 <m2m_wifi_cb+0x3ac>)
   21c48:	4798      	blx	r3
   21c4a:	4b08      	ldr	r3, [pc, #32]	; (21c6c <m2m_wifi_cb+0x3b4>)
   21c4c:	0018      	movs	r0, r3
   21c4e:	4b05      	ldr	r3, [pc, #20]	; (21c64 <m2m_wifi_cb+0x3ac>)
   21c50:	4798      	blx	r3
}
   21c52:	46c0      	nop			; (mov r8, r8)
   21c54:	46bd      	mov	sp, r7
   21c56:	b02d      	add	sp, #180	; 0xb4
   21c58:	bd90      	pop	{r4, r7, pc}
   21c5a:	46c0      	nop			; (mov r8, r8)
   21c5c:	00038814 	.word	0x00038814
   21c60:	00038478 	.word	0x00038478
   21c64:	0001e189 	.word	0x0001e189
   21c68:	0003848c 	.word	0x0003848c
   21c6c:	00038474 	.word	0x00038474

00021c70 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   21c70:	b590      	push	{r4, r7, lr}
   21c72:	b091      	sub	sp, #68	; 0x44
   21c74:	af02      	add	r7, sp, #8
   21c76:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   21c78:	2337      	movs	r3, #55	; 0x37
   21c7a:	18fb      	adds	r3, r7, r3
   21c7c:	2200      	movs	r2, #0
   21c7e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   21c80:	230b      	movs	r3, #11
   21c82:	18fb      	adds	r3, r7, r3
   21c84:	2201      	movs	r2, #1
   21c86:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   21c88:	687b      	ldr	r3, [r7, #4]
   21c8a:	2b00      	cmp	r3, #0
   21c8c:	d104      	bne.n	21c98 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   21c8e:	2337      	movs	r3, #55	; 0x37
   21c90:	18fb      	adds	r3, r7, r3
   21c92:	22f4      	movs	r2, #244	; 0xf4
   21c94:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   21c96:	e0b3      	b.n	21e00 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   21c98:	687b      	ldr	r3, [r7, #4]
   21c9a:	681a      	ldr	r2, [r3, #0]
   21c9c:	4b5c      	ldr	r3, [pc, #368]	; (21e10 <m2m_wifi_init+0x1a0>)
   21c9e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   21ca0:	4b5c      	ldr	r3, [pc, #368]	; (21e14 <m2m_wifi_init+0x1a4>)
   21ca2:	2200      	movs	r2, #0
   21ca4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   21ca6:	2337      	movs	r3, #55	; 0x37
   21ca8:	18fc      	adds	r4, r7, r3
   21caa:	230b      	movs	r3, #11
   21cac:	18fb      	adds	r3, r7, r3
   21cae:	0018      	movs	r0, r3
   21cb0:	4b59      	ldr	r3, [pc, #356]	; (21e18 <m2m_wifi_init+0x1a8>)
   21cb2:	4798      	blx	r3
   21cb4:	0003      	movs	r3, r0
   21cb6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   21cb8:	2337      	movs	r3, #55	; 0x37
   21cba:	18fb      	adds	r3, r7, r3
   21cbc:	781b      	ldrb	r3, [r3, #0]
   21cbe:	b25b      	sxtb	r3, r3
   21cc0:	2b00      	cmp	r3, #0
   21cc2:	d000      	beq.n	21cc6 <m2m_wifi_init+0x56>
   21cc4:	e099      	b.n	21dfa <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   21cc6:	2337      	movs	r3, #55	; 0x37
   21cc8:	18fc      	adds	r4, r7, r3
   21cca:	2000      	movs	r0, #0
   21ccc:	4b53      	ldr	r3, [pc, #332]	; (21e1c <m2m_wifi_init+0x1ac>)
   21cce:	4798      	blx	r3
   21cd0:	0003      	movs	r3, r0
   21cd2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   21cd4:	2337      	movs	r3, #55	; 0x37
   21cd6:	18fb      	adds	r3, r7, r3
   21cd8:	781b      	ldrb	r3, [r3, #0]
   21cda:	b25b      	sxtb	r3, r3
   21cdc:	2b00      	cmp	r3, #0
   21cde:	d000      	beq.n	21ce2 <m2m_wifi_init+0x72>
   21ce0:	e086      	b.n	21df0 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   21ce2:	4b4f      	ldr	r3, [pc, #316]	; (21e20 <m2m_wifi_init+0x1b0>)
   21ce4:	0019      	movs	r1, r3
   21ce6:	2001      	movs	r0, #1
   21ce8:	4b4e      	ldr	r3, [pc, #312]	; (21e24 <m2m_wifi_init+0x1b4>)
   21cea:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   21cec:	2337      	movs	r3, #55	; 0x37
   21cee:	18fc      	adds	r4, r7, r3
   21cf0:	230c      	movs	r3, #12
   21cf2:	18fb      	adds	r3, r7, r3
   21cf4:	0018      	movs	r0, r3
   21cf6:	4b4c      	ldr	r3, [pc, #304]	; (21e28 <m2m_wifi_init+0x1b8>)
   21cf8:	4798      	blx	r3
   21cfa:	0003      	movs	r3, r0
   21cfc:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   21cfe:	4b4b      	ldr	r3, [pc, #300]	; (21e2c <m2m_wifi_init+0x1bc>)
   21d00:	0018      	movs	r0, r3
   21d02:	4b4b      	ldr	r3, [pc, #300]	; (21e30 <m2m_wifi_init+0x1c0>)
   21d04:	4798      	blx	r3
   21d06:	230c      	movs	r3, #12
   21d08:	18fb      	adds	r3, r7, r3
   21d0a:	791b      	ldrb	r3, [r3, #4]
   21d0c:	0019      	movs	r1, r3
   21d0e:	230c      	movs	r3, #12
   21d10:	18fb      	adds	r3, r7, r3
   21d12:	795b      	ldrb	r3, [r3, #5]
   21d14:	001a      	movs	r2, r3
   21d16:	230c      	movs	r3, #12
   21d18:	18fb      	adds	r3, r7, r3
   21d1a:	799b      	ldrb	r3, [r3, #6]
   21d1c:	001c      	movs	r4, r3
   21d1e:	230c      	movs	r3, #12
   21d20:	18fb      	adds	r3, r7, r3
   21d22:	8c1b      	ldrh	r3, [r3, #32]
   21d24:	4843      	ldr	r0, [pc, #268]	; (21e34 <m2m_wifi_init+0x1c4>)
   21d26:	9300      	str	r3, [sp, #0]
   21d28:	0023      	movs	r3, r4
   21d2a:	4c41      	ldr	r4, [pc, #260]	; (21e30 <m2m_wifi_init+0x1c0>)
   21d2c:	47a0      	blx	r4
   21d2e:	4b42      	ldr	r3, [pc, #264]	; (21e38 <m2m_wifi_init+0x1c8>)
   21d30:	0018      	movs	r0, r3
   21d32:	4b3f      	ldr	r3, [pc, #252]	; (21e30 <m2m_wifi_init+0x1c0>)
   21d34:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   21d36:	4b3d      	ldr	r3, [pc, #244]	; (21e2c <m2m_wifi_init+0x1bc>)
   21d38:	0018      	movs	r0, r3
   21d3a:	4b3d      	ldr	r3, [pc, #244]	; (21e30 <m2m_wifi_init+0x1c0>)
   21d3c:	4798      	blx	r3
   21d3e:	230c      	movs	r3, #12
   21d40:	18fb      	adds	r3, r7, r3
   21d42:	3316      	adds	r3, #22
   21d44:	001a      	movs	r2, r3
   21d46:	230c      	movs	r3, #12
   21d48:	18fb      	adds	r3, r7, r3
   21d4a:	330a      	adds	r3, #10
   21d4c:	0019      	movs	r1, r3
   21d4e:	4b3b      	ldr	r3, [pc, #236]	; (21e3c <m2m_wifi_init+0x1cc>)
   21d50:	0018      	movs	r0, r3
   21d52:	4b37      	ldr	r3, [pc, #220]	; (21e30 <m2m_wifi_init+0x1c0>)
   21d54:	4798      	blx	r3
   21d56:	4b38      	ldr	r3, [pc, #224]	; (21e38 <m2m_wifi_init+0x1c8>)
   21d58:	0018      	movs	r0, r3
   21d5a:	4b35      	ldr	r3, [pc, #212]	; (21e30 <m2m_wifi_init+0x1c0>)
   21d5c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   21d5e:	4b33      	ldr	r3, [pc, #204]	; (21e2c <m2m_wifi_init+0x1bc>)
   21d60:	0018      	movs	r0, r3
   21d62:	4b33      	ldr	r3, [pc, #204]	; (21e30 <m2m_wifi_init+0x1c0>)
   21d64:	4798      	blx	r3
   21d66:	230c      	movs	r3, #12
   21d68:	18fb      	adds	r3, r7, r3
   21d6a:	79db      	ldrb	r3, [r3, #7]
   21d6c:	0019      	movs	r1, r3
   21d6e:	230c      	movs	r3, #12
   21d70:	18fb      	adds	r3, r7, r3
   21d72:	7a1b      	ldrb	r3, [r3, #8]
   21d74:	001a      	movs	r2, r3
   21d76:	230c      	movs	r3, #12
   21d78:	18fb      	adds	r3, r7, r3
   21d7a:	7a5b      	ldrb	r3, [r3, #9]
   21d7c:	4830      	ldr	r0, [pc, #192]	; (21e40 <m2m_wifi_init+0x1d0>)
   21d7e:	4c2c      	ldr	r4, [pc, #176]	; (21e30 <m2m_wifi_init+0x1c0>)
   21d80:	47a0      	blx	r4
   21d82:	4b2d      	ldr	r3, [pc, #180]	; (21e38 <m2m_wifi_init+0x1c8>)
   21d84:	0018      	movs	r0, r3
   21d86:	4b2a      	ldr	r3, [pc, #168]	; (21e30 <m2m_wifi_init+0x1c0>)
   21d88:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   21d8a:	4b28      	ldr	r3, [pc, #160]	; (21e2c <m2m_wifi_init+0x1bc>)
   21d8c:	0018      	movs	r0, r3
   21d8e:	4b28      	ldr	r3, [pc, #160]	; (21e30 <m2m_wifi_init+0x1c0>)
   21d90:	4798      	blx	r3
   21d92:	482c      	ldr	r0, [pc, #176]	; (21e44 <m2m_wifi_init+0x1d4>)
   21d94:	2304      	movs	r3, #4
   21d96:	2205      	movs	r2, #5
   21d98:	2113      	movs	r1, #19
   21d9a:	4c25      	ldr	r4, [pc, #148]	; (21e30 <m2m_wifi_init+0x1c0>)
   21d9c:	47a0      	blx	r4
   21d9e:	4b26      	ldr	r3, [pc, #152]	; (21e38 <m2m_wifi_init+0x1c8>)
   21da0:	0018      	movs	r0, r3
   21da2:	4b23      	ldr	r3, [pc, #140]	; (21e30 <m2m_wifi_init+0x1c0>)
   21da4:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   21da6:	4b21      	ldr	r3, [pc, #132]	; (21e2c <m2m_wifi_init+0x1bc>)
   21da8:	0018      	movs	r0, r3
   21daa:	4b21      	ldr	r3, [pc, #132]	; (21e30 <m2m_wifi_init+0x1c0>)
   21dac:	4798      	blx	r3
   21dae:	4a26      	ldr	r2, [pc, #152]	; (21e48 <m2m_wifi_init+0x1d8>)
   21db0:	4926      	ldr	r1, [pc, #152]	; (21e4c <m2m_wifi_init+0x1dc>)
   21db2:	4b27      	ldr	r3, [pc, #156]	; (21e50 <m2m_wifi_init+0x1e0>)
   21db4:	0018      	movs	r0, r3
   21db6:	4b1e      	ldr	r3, [pc, #120]	; (21e30 <m2m_wifi_init+0x1c0>)
   21db8:	4798      	blx	r3
   21dba:	4b1f      	ldr	r3, [pc, #124]	; (21e38 <m2m_wifi_init+0x1c8>)
   21dbc:	0018      	movs	r0, r3
   21dbe:	4b1c      	ldr	r3, [pc, #112]	; (21e30 <m2m_wifi_init+0x1c0>)
   21dc0:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   21dc2:	2337      	movs	r3, #55	; 0x37
   21dc4:	18fb      	adds	r3, r7, r3
   21dc6:	781b      	ldrb	r3, [r3, #0]
   21dc8:	b25b      	sxtb	r3, r3
   21dca:	330d      	adds	r3, #13
   21dcc:	d117      	bne.n	21dfe <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   21dce:	23e8      	movs	r3, #232	; 0xe8
   21dd0:	33ff      	adds	r3, #255	; 0xff
   21dd2:	001a      	movs	r2, r3
   21dd4:	491f      	ldr	r1, [pc, #124]	; (21e54 <m2m_wifi_init+0x1e4>)
   21dd6:	4b20      	ldr	r3, [pc, #128]	; (21e58 <m2m_wifi_init+0x1e8>)
   21dd8:	0018      	movs	r0, r3
   21dda:	4b15      	ldr	r3, [pc, #84]	; (21e30 <m2m_wifi_init+0x1c0>)
   21ddc:	4798      	blx	r3
   21dde:	4b1f      	ldr	r3, [pc, #124]	; (21e5c <m2m_wifi_init+0x1ec>)
   21de0:	0018      	movs	r0, r3
   21de2:	4b13      	ldr	r3, [pc, #76]	; (21e30 <m2m_wifi_init+0x1c0>)
   21de4:	4798      	blx	r3
   21de6:	4b14      	ldr	r3, [pc, #80]	; (21e38 <m2m_wifi_init+0x1c8>)
   21de8:	0018      	movs	r0, r3
   21dea:	4b11      	ldr	r3, [pc, #68]	; (21e30 <m2m_wifi_init+0x1c0>)
   21dec:	4798      	blx	r3
	}

	goto _EXIT0;
   21dee:	e006      	b.n	21dfe <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   21df0:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   21df2:	2000      	movs	r0, #0
   21df4:	4b1a      	ldr	r3, [pc, #104]	; (21e60 <m2m_wifi_init+0x1f0>)
   21df6:	4798      	blx	r3
   21df8:	e002      	b.n	21e00 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   21dfa:	46c0      	nop			; (mov r8, r8)
   21dfc:	e000      	b.n	21e00 <m2m_wifi_init+0x190>
	goto _EXIT0;
   21dfe:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   21e00:	2337      	movs	r3, #55	; 0x37
   21e02:	18fb      	adds	r3, r7, r3
   21e04:	781b      	ldrb	r3, [r3, #0]
   21e06:	b25b      	sxtb	r3, r3
}
   21e08:	0018      	movs	r0, r3
   21e0a:	46bd      	mov	sp, r7
   21e0c:	b00f      	add	sp, #60	; 0x3c
   21e0e:	bd90      	pop	{r4, r7, pc}
   21e10:	20003e94 	.word	0x20003e94
   21e14:	20003e91 	.word	0x20003e91
   21e18:	00022f95 	.word	0x00022f95
   21e1c:	00020d19 	.word	0x00020d19
   21e20:	000218b9 	.word	0x000218b9
   21e24:	000217fd 	.word	0x000217fd
   21e28:	00022dc9 	.word	0x00022dc9
   21e2c:	00038448 	.word	0x00038448
   21e30:	0001e189 	.word	0x0001e189
   21e34:	000385ec 	.word	0x000385ec
   21e38:	00038474 	.word	0x00038474
   21e3c:	00038614 	.word	0x00038614
   21e40:	00038630 	.word	0x00038630
   21e44:	00038654 	.word	0x00038654
   21e48:	0003866c 	.word	0x0003866c
   21e4c:	00038678 	.word	0x00038678
   21e50:	00038684 	.word	0x00038684
   21e54:	00038820 	.word	0x00038820
   21e58:	00038478 	.word	0x00038478
   21e5c:	0003869c 	.word	0x0003869c
   21e60:	00023125 	.word	0x00023125

00021e64 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   21e64:	b580      	push	{r7, lr}
   21e66:	b082      	sub	sp, #8
   21e68:	af00      	add	r7, sp, #0
   21e6a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   21e6c:	4b03      	ldr	r3, [pc, #12]	; (21e7c <m2m_wifi_handle_events+0x18>)
   21e6e:	4798      	blx	r3
   21e70:	0003      	movs	r3, r0
}
   21e72:	0018      	movs	r0, r3
   21e74:	46bd      	mov	sp, r7
   21e76:	b002      	add	sp, #8
   21e78:	bd80      	pop	{r7, pc}
   21e7a:	46c0      	nop			; (mov r8, r8)
   21e7c:	000215dd 	.word	0x000215dd

00021e80 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   21e80:	b590      	push	{r4, r7, lr}
   21e82:	b087      	sub	sp, #28
   21e84:	af02      	add	r7, sp, #8
   21e86:	60f8      	str	r0, [r7, #12]
   21e88:	0008      	movs	r0, r1
   21e8a:	0011      	movs	r1, r2
   21e8c:	607b      	str	r3, [r7, #4]
   21e8e:	230b      	movs	r3, #11
   21e90:	18fb      	adds	r3, r7, r3
   21e92:	1c02      	adds	r2, r0, #0
   21e94:	701a      	strb	r2, [r3, #0]
   21e96:	230a      	movs	r3, #10
   21e98:	18fb      	adds	r3, r7, r3
   21e9a:	1c0a      	adds	r2, r1, #0
   21e9c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   21e9e:	687c      	ldr	r4, [r7, #4]
   21ea0:	230a      	movs	r3, #10
   21ea2:	18fb      	adds	r3, r7, r3
   21ea4:	781a      	ldrb	r2, [r3, #0]
   21ea6:	230b      	movs	r3, #11
   21ea8:	18fb      	adds	r3, r7, r3
   21eaa:	7819      	ldrb	r1, [r3, #0]
   21eac:	68f8      	ldr	r0, [r7, #12]
   21eae:	2300      	movs	r3, #0
   21eb0:	9301      	str	r3, [sp, #4]
   21eb2:	2320      	movs	r3, #32
   21eb4:	18fb      	adds	r3, r7, r3
   21eb6:	881b      	ldrh	r3, [r3, #0]
   21eb8:	9300      	str	r3, [sp, #0]
   21eba:	0023      	movs	r3, r4
   21ebc:	4c03      	ldr	r4, [pc, #12]	; (21ecc <m2m_wifi_connect+0x4c>)
   21ebe:	47a0      	blx	r4
   21ec0:	0003      	movs	r3, r0
}
   21ec2:	0018      	movs	r0, r3
   21ec4:	46bd      	mov	sp, r7
   21ec6:	b005      	add	sp, #20
   21ec8:	bd90      	pop	{r4, r7, pc}
   21eca:	46c0      	nop			; (mov r8, r8)
   21ecc:	00021ed1 	.word	0x00021ed1

00021ed0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   21ed0:	b5b0      	push	{r4, r5, r7, lr}
   21ed2:	b0aa      	sub	sp, #168	; 0xa8
   21ed4:	af04      	add	r7, sp, #16
   21ed6:	60f8      	str	r0, [r7, #12]
   21ed8:	0008      	movs	r0, r1
   21eda:	0011      	movs	r1, r2
   21edc:	607b      	str	r3, [r7, #4]
   21ede:	230b      	movs	r3, #11
   21ee0:	18fb      	adds	r3, r7, r3
   21ee2:	1c02      	adds	r2, r0, #0
   21ee4:	701a      	strb	r2, [r3, #0]
   21ee6:	230a      	movs	r3, #10
   21ee8:	18fb      	adds	r3, r7, r3
   21eea:	1c0a      	adds	r2, r1, #0
   21eec:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   21eee:	2397      	movs	r3, #151	; 0x97
   21ef0:	18fb      	adds	r3, r7, r3
   21ef2:	2200      	movs	r2, #0
   21ef4:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   21ef6:	230a      	movs	r3, #10
   21ef8:	18fb      	adds	r3, r7, r3
   21efa:	781b      	ldrb	r3, [r3, #0]
   21efc:	2b01      	cmp	r3, #1
   21efe:	d100      	bne.n	21f02 <m2m_wifi_connect_sc+0x32>
   21f00:	e085      	b.n	2200e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   21f02:	687b      	ldr	r3, [r7, #4]
   21f04:	2b00      	cmp	r3, #0
   21f06:	d112      	bne.n	21f2e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   21f08:	4ad8      	ldr	r2, [pc, #864]	; (2226c <m2m_wifi_connect_sc+0x39c>)
   21f0a:	49d9      	ldr	r1, [pc, #868]	; (22270 <m2m_wifi_connect_sc+0x3a0>)
   21f0c:	4bd9      	ldr	r3, [pc, #868]	; (22274 <m2m_wifi_connect_sc+0x3a4>)
   21f0e:	0018      	movs	r0, r3
   21f10:	4bd9      	ldr	r3, [pc, #868]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   21f12:	4798      	blx	r3
   21f14:	4bd9      	ldr	r3, [pc, #868]	; (2227c <m2m_wifi_connect_sc+0x3ac>)
   21f16:	0018      	movs	r0, r3
   21f18:	4bd7      	ldr	r3, [pc, #860]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   21f1a:	4798      	blx	r3
   21f1c:	4bd8      	ldr	r3, [pc, #864]	; (22280 <m2m_wifi_connect_sc+0x3b0>)
   21f1e:	0018      	movs	r0, r3
   21f20:	4bd5      	ldr	r3, [pc, #852]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   21f22:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21f24:	2397      	movs	r3, #151	; 0x97
   21f26:	18fb      	adds	r3, r7, r3
   21f28:	22f4      	movs	r2, #244	; 0xf4
   21f2a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21f2c:	e1f9      	b.n	22322 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   21f2e:	230a      	movs	r3, #10
   21f30:	18fb      	adds	r3, r7, r3
   21f32:	781b      	ldrb	r3, [r3, #0]
   21f34:	2b02      	cmp	r3, #2
   21f36:	d16a      	bne.n	2200e <m2m_wifi_connect_sc+0x13e>
   21f38:	687b      	ldr	r3, [r7, #4]
   21f3a:	0018      	movs	r0, r3
   21f3c:	4bd1      	ldr	r3, [pc, #836]	; (22284 <m2m_wifi_connect_sc+0x3b4>)
   21f3e:	4798      	blx	r3
   21f40:	0003      	movs	r3, r0
   21f42:	2b40      	cmp	r3, #64	; 0x40
   21f44:	d163      	bne.n	2200e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   21f46:	2396      	movs	r3, #150	; 0x96
   21f48:	18fb      	adds	r3, r7, r3
   21f4a:	2200      	movs	r2, #0
   21f4c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   21f4e:	687b      	ldr	r3, [r7, #4]
   21f50:	2290      	movs	r2, #144	; 0x90
   21f52:	18ba      	adds	r2, r7, r2
   21f54:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21f56:	e055      	b.n	22004 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   21f58:	2396      	movs	r3, #150	; 0x96
   21f5a:	18fb      	adds	r3, r7, r3
   21f5c:	781b      	ldrb	r3, [r3, #0]
   21f5e:	2290      	movs	r2, #144	; 0x90
   21f60:	18ba      	adds	r2, r7, r2
   21f62:	6812      	ldr	r2, [r2, #0]
   21f64:	18d3      	adds	r3, r2, r3
   21f66:	781b      	ldrb	r3, [r3, #0]
   21f68:	2b2f      	cmp	r3, #47	; 0x2f
   21f6a:	d931      	bls.n	21fd0 <m2m_wifi_connect_sc+0x100>
   21f6c:	2396      	movs	r3, #150	; 0x96
   21f6e:	18fb      	adds	r3, r7, r3
   21f70:	781b      	ldrb	r3, [r3, #0]
   21f72:	2290      	movs	r2, #144	; 0x90
   21f74:	18ba      	adds	r2, r7, r2
   21f76:	6812      	ldr	r2, [r2, #0]
   21f78:	18d3      	adds	r3, r2, r3
   21f7a:	781b      	ldrb	r3, [r3, #0]
   21f7c:	2b39      	cmp	r3, #57	; 0x39
   21f7e:	d909      	bls.n	21f94 <m2m_wifi_connect_sc+0xc4>
   21f80:	2396      	movs	r3, #150	; 0x96
   21f82:	18fb      	adds	r3, r7, r3
   21f84:	781b      	ldrb	r3, [r3, #0]
   21f86:	2290      	movs	r2, #144	; 0x90
   21f88:	18ba      	adds	r2, r7, r2
   21f8a:	6812      	ldr	r2, [r2, #0]
   21f8c:	18d3      	adds	r3, r2, r3
   21f8e:	781b      	ldrb	r3, [r3, #0]
   21f90:	2b40      	cmp	r3, #64	; 0x40
   21f92:	d91d      	bls.n	21fd0 <m2m_wifi_connect_sc+0x100>
   21f94:	2396      	movs	r3, #150	; 0x96
   21f96:	18fb      	adds	r3, r7, r3
   21f98:	781b      	ldrb	r3, [r3, #0]
   21f9a:	2290      	movs	r2, #144	; 0x90
   21f9c:	18ba      	adds	r2, r7, r2
   21f9e:	6812      	ldr	r2, [r2, #0]
   21fa0:	18d3      	adds	r3, r2, r3
   21fa2:	781b      	ldrb	r3, [r3, #0]
   21fa4:	2b46      	cmp	r3, #70	; 0x46
   21fa6:	d909      	bls.n	21fbc <m2m_wifi_connect_sc+0xec>
   21fa8:	2396      	movs	r3, #150	; 0x96
   21faa:	18fb      	adds	r3, r7, r3
   21fac:	781b      	ldrb	r3, [r3, #0]
   21fae:	2290      	movs	r2, #144	; 0x90
   21fb0:	18ba      	adds	r2, r7, r2
   21fb2:	6812      	ldr	r2, [r2, #0]
   21fb4:	18d3      	adds	r3, r2, r3
   21fb6:	781b      	ldrb	r3, [r3, #0]
   21fb8:	2b60      	cmp	r3, #96	; 0x60
   21fba:	d909      	bls.n	21fd0 <m2m_wifi_connect_sc+0x100>
   21fbc:	2396      	movs	r3, #150	; 0x96
   21fbe:	18fb      	adds	r3, r7, r3
   21fc0:	781b      	ldrb	r3, [r3, #0]
   21fc2:	2290      	movs	r2, #144	; 0x90
   21fc4:	18ba      	adds	r2, r7, r2
   21fc6:	6812      	ldr	r2, [r2, #0]
   21fc8:	18d3      	adds	r3, r2, r3
   21fca:	781b      	ldrb	r3, [r3, #0]
   21fcc:	2b66      	cmp	r3, #102	; 0x66
   21fce:	d912      	bls.n	21ff6 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   21fd0:	4aad      	ldr	r2, [pc, #692]	; (22288 <m2m_wifi_connect_sc+0x3b8>)
   21fd2:	49a7      	ldr	r1, [pc, #668]	; (22270 <m2m_wifi_connect_sc+0x3a0>)
   21fd4:	4ba7      	ldr	r3, [pc, #668]	; (22274 <m2m_wifi_connect_sc+0x3a4>)
   21fd6:	0018      	movs	r0, r3
   21fd8:	4ba7      	ldr	r3, [pc, #668]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   21fda:	4798      	blx	r3
   21fdc:	4bab      	ldr	r3, [pc, #684]	; (2228c <m2m_wifi_connect_sc+0x3bc>)
   21fde:	0018      	movs	r0, r3
   21fe0:	4ba5      	ldr	r3, [pc, #660]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   21fe2:	4798      	blx	r3
   21fe4:	4ba6      	ldr	r3, [pc, #664]	; (22280 <m2m_wifi_connect_sc+0x3b0>)
   21fe6:	0018      	movs	r0, r3
   21fe8:	4ba3      	ldr	r3, [pc, #652]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   21fea:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   21fec:	2397      	movs	r3, #151	; 0x97
   21fee:	18fb      	adds	r3, r7, r3
   21ff0:	22f4      	movs	r2, #244	; 0xf4
   21ff2:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   21ff4:	e195      	b.n	22322 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   21ff6:	2396      	movs	r3, #150	; 0x96
   21ff8:	18fb      	adds	r3, r7, r3
   21ffa:	781a      	ldrb	r2, [r3, #0]
   21ffc:	2396      	movs	r3, #150	; 0x96
   21ffe:	18fb      	adds	r3, r7, r3
   22000:	3201      	adds	r2, #1
   22002:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22004:	2396      	movs	r3, #150	; 0x96
   22006:	18fb      	adds	r3, r7, r3
   22008:	781b      	ldrb	r3, [r3, #0]
   2200a:	2b3f      	cmp	r3, #63	; 0x3f
   2200c:	d9a4      	bls.n	21f58 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   2200e:	230b      	movs	r3, #11
   22010:	18fb      	adds	r3, r7, r3
   22012:	781b      	ldrb	r3, [r3, #0]
   22014:	2b00      	cmp	r3, #0
   22016:	d004      	beq.n	22022 <m2m_wifi_connect_sc+0x152>
   22018:	230b      	movs	r3, #11
   2201a:	18fb      	adds	r3, r7, r3
   2201c:	781b      	ldrb	r3, [r3, #0]
   2201e:	2b20      	cmp	r3, #32
   22020:	d913      	bls.n	2204a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   22022:	238c      	movs	r3, #140	; 0x8c
   22024:	009a      	lsls	r2, r3, #2
   22026:	4992      	ldr	r1, [pc, #584]	; (22270 <m2m_wifi_connect_sc+0x3a0>)
   22028:	4b92      	ldr	r3, [pc, #584]	; (22274 <m2m_wifi_connect_sc+0x3a4>)
   2202a:	0018      	movs	r0, r3
   2202c:	4b92      	ldr	r3, [pc, #584]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   2202e:	4798      	blx	r3
   22030:	4b97      	ldr	r3, [pc, #604]	; (22290 <m2m_wifi_connect_sc+0x3c0>)
   22032:	0018      	movs	r0, r3
   22034:	4b90      	ldr	r3, [pc, #576]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   22036:	4798      	blx	r3
   22038:	4b91      	ldr	r3, [pc, #580]	; (22280 <m2m_wifi_connect_sc+0x3b0>)
   2203a:	0018      	movs	r0, r3
   2203c:	4b8e      	ldr	r3, [pc, #568]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   2203e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22040:	2397      	movs	r3, #151	; 0x97
   22042:	18fb      	adds	r3, r7, r3
   22044:	22f4      	movs	r2, #244	; 0xf4
   22046:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   22048:	e16b      	b.n	22322 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   2204a:	23a8      	movs	r3, #168	; 0xa8
   2204c:	18fb      	adds	r3, r7, r3
   2204e:	881b      	ldrh	r3, [r3, #0]
   22050:	2b00      	cmp	r3, #0
   22052:	d004      	beq.n	2205e <m2m_wifi_connect_sc+0x18e>
   22054:	23a8      	movs	r3, #168	; 0xa8
   22056:	18fb      	adds	r3, r7, r3
   22058:	881b      	ldrh	r3, [r3, #0]
   2205a:	2b0e      	cmp	r3, #14
   2205c:	d917      	bls.n	2208e <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   2205e:	23a8      	movs	r3, #168	; 0xa8
   22060:	18fb      	adds	r3, r7, r3
   22062:	881b      	ldrh	r3, [r3, #0]
   22064:	2bff      	cmp	r3, #255	; 0xff
   22066:	d012      	beq.n	2208e <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   22068:	4a8a      	ldr	r2, [pc, #552]	; (22294 <m2m_wifi_connect_sc+0x3c4>)
   2206a:	4981      	ldr	r1, [pc, #516]	; (22270 <m2m_wifi_connect_sc+0x3a0>)
   2206c:	4b81      	ldr	r3, [pc, #516]	; (22274 <m2m_wifi_connect_sc+0x3a4>)
   2206e:	0018      	movs	r0, r3
   22070:	4b81      	ldr	r3, [pc, #516]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   22072:	4798      	blx	r3
   22074:	4b88      	ldr	r3, [pc, #544]	; (22298 <m2m_wifi_connect_sc+0x3c8>)
   22076:	0018      	movs	r0, r3
   22078:	4b7f      	ldr	r3, [pc, #508]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   2207a:	4798      	blx	r3
   2207c:	4b80      	ldr	r3, [pc, #512]	; (22280 <m2m_wifi_connect_sc+0x3b0>)
   2207e:	0018      	movs	r0, r3
   22080:	4b7d      	ldr	r3, [pc, #500]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   22082:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22084:	2397      	movs	r3, #151	; 0x97
   22086:	18fb      	adds	r3, r7, r3
   22088:	22f4      	movs	r2, #244	; 0xf4
   2208a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2208c:	e149      	b.n	22322 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   2208e:	230b      	movs	r3, #11
   22090:	18fb      	adds	r3, r7, r3
   22092:	781a      	ldrb	r2, [r3, #0]
   22094:	68f9      	ldr	r1, [r7, #12]
   22096:	2314      	movs	r3, #20
   22098:	18fb      	adds	r3, r7, r3
   2209a:	3346      	adds	r3, #70	; 0x46
   2209c:	0018      	movs	r0, r3
   2209e:	4b7f      	ldr	r3, [pc, #508]	; (2229c <m2m_wifi_connect_sc+0x3cc>)
   220a0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   220a2:	230b      	movs	r3, #11
   220a4:	18fb      	adds	r3, r7, r3
   220a6:	781b      	ldrb	r3, [r3, #0]
   220a8:	2214      	movs	r2, #20
   220aa:	18ba      	adds	r2, r7, r2
   220ac:	2146      	movs	r1, #70	; 0x46
   220ae:	18d3      	adds	r3, r2, r3
   220b0:	185b      	adds	r3, r3, r1
   220b2:	2200      	movs	r2, #0
   220b4:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   220b6:	2314      	movs	r3, #20
   220b8:	18fb      	adds	r3, r7, r3
   220ba:	22a8      	movs	r2, #168	; 0xa8
   220bc:	18ba      	adds	r2, r7, r2
   220be:	2144      	movs	r1, #68	; 0x44
   220c0:	8812      	ldrh	r2, [r2, #0]
   220c2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   220c4:	23ac      	movs	r3, #172	; 0xac
   220c6:	18fb      	adds	r3, r7, r3
   220c8:	781b      	ldrb	r3, [r3, #0]
   220ca:	1e5a      	subs	r2, r3, #1
   220cc:	4193      	sbcs	r3, r2
   220ce:	b2db      	uxtb	r3, r3
   220d0:	0019      	movs	r1, r3
   220d2:	2314      	movs	r3, #20
   220d4:	18fb      	adds	r3, r7, r3
   220d6:	2267      	movs	r2, #103	; 0x67
   220d8:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   220da:	2314      	movs	r3, #20
   220dc:	18fb      	adds	r3, r7, r3
   220de:	228c      	movs	r2, #140	; 0x8c
   220e0:	18ba      	adds	r2, r7, r2
   220e2:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   220e4:	238c      	movs	r3, #140	; 0x8c
   220e6:	18fb      	adds	r3, r7, r3
   220e8:	681b      	ldr	r3, [r3, #0]
   220ea:	220a      	movs	r2, #10
   220ec:	18ba      	adds	r2, r7, r2
   220ee:	2141      	movs	r1, #65	; 0x41
   220f0:	7812      	ldrb	r2, [r2, #0]
   220f2:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   220f4:	230a      	movs	r3, #10
   220f6:	18fb      	adds	r3, r7, r3
   220f8:	781b      	ldrb	r3, [r3, #0]
   220fa:	2b03      	cmp	r3, #3
   220fc:	d000      	beq.n	22100 <m2m_wifi_connect_sc+0x230>
   220fe:	e07d      	b.n	221fc <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   22100:	687b      	ldr	r3, [r7, #4]
   22102:	2288      	movs	r2, #136	; 0x88
   22104:	18ba      	adds	r2, r7, r2
   22106:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   22108:	238c      	movs	r3, #140	; 0x8c
   2210a:	18fb      	adds	r3, r7, r3
   2210c:	681b      	ldr	r3, [r3, #0]
   2210e:	2284      	movs	r2, #132	; 0x84
   22110:	18ba      	adds	r2, r7, r2
   22112:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   22114:	2388      	movs	r3, #136	; 0x88
   22116:	18fb      	adds	r3, r7, r3
   22118:	681b      	ldr	r3, [r3, #0]
   2211a:	781b      	ldrb	r3, [r3, #0]
   2211c:	3b01      	subs	r3, #1
   2211e:	b2da      	uxtb	r2, r3
   22120:	2384      	movs	r3, #132	; 0x84
   22122:	18fb      	adds	r3, r7, r3
   22124:	681b      	ldr	r3, [r3, #0]
   22126:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   22128:	2384      	movs	r3, #132	; 0x84
   2212a:	18fb      	adds	r3, r7, r3
   2212c:	681b      	ldr	r3, [r3, #0]
   2212e:	781b      	ldrb	r3, [r3, #0]
   22130:	2b03      	cmp	r3, #3
   22132:	d919      	bls.n	22168 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   22134:	2394      	movs	r3, #148	; 0x94
   22136:	009a      	lsls	r2, r3, #2
   22138:	494d      	ldr	r1, [pc, #308]	; (22270 <m2m_wifi_connect_sc+0x3a0>)
   2213a:	4b4e      	ldr	r3, [pc, #312]	; (22274 <m2m_wifi_connect_sc+0x3a4>)
   2213c:	0018      	movs	r0, r3
   2213e:	4b4e      	ldr	r3, [pc, #312]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   22140:	4798      	blx	r3
   22142:	2384      	movs	r3, #132	; 0x84
   22144:	18fb      	adds	r3, r7, r3
   22146:	681b      	ldr	r3, [r3, #0]
   22148:	781b      	ldrb	r3, [r3, #0]
   2214a:	001a      	movs	r2, r3
   2214c:	4b54      	ldr	r3, [pc, #336]	; (222a0 <m2m_wifi_connect_sc+0x3d0>)
   2214e:	0011      	movs	r1, r2
   22150:	0018      	movs	r0, r3
   22152:	4b49      	ldr	r3, [pc, #292]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   22154:	4798      	blx	r3
   22156:	4b4a      	ldr	r3, [pc, #296]	; (22280 <m2m_wifi_connect_sc+0x3b0>)
   22158:	0018      	movs	r0, r3
   2215a:	4b47      	ldr	r3, [pc, #284]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   2215c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2215e:	2397      	movs	r3, #151	; 0x97
   22160:	18fb      	adds	r3, r7, r3
   22162:	22f4      	movs	r2, #244	; 0xf4
   22164:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22166:	e0dc      	b.n	22322 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   22168:	2388      	movs	r3, #136	; 0x88
   2216a:	18fb      	adds	r3, r7, r3
   2216c:	681b      	ldr	r3, [r3, #0]
   2216e:	785b      	ldrb	r3, [r3, #1]
   22170:	3b01      	subs	r3, #1
   22172:	b2da      	uxtb	r2, r3
   22174:	2384      	movs	r3, #132	; 0x84
   22176:	18fb      	adds	r3, r7, r3
   22178:	681b      	ldr	r3, [r3, #0]
   2217a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   2217c:	2384      	movs	r3, #132	; 0x84
   2217e:	18fb      	adds	r3, r7, r3
   22180:	681b      	ldr	r3, [r3, #0]
   22182:	785b      	ldrb	r3, [r3, #1]
   22184:	2b0a      	cmp	r3, #10
   22186:	d01e      	beq.n	221c6 <m2m_wifi_connect_sc+0x2f6>
   22188:	2384      	movs	r3, #132	; 0x84
   2218a:	18fb      	adds	r3, r7, r3
   2218c:	681b      	ldr	r3, [r3, #0]
   2218e:	785b      	ldrb	r3, [r3, #1]
   22190:	2b1a      	cmp	r3, #26
   22192:	d018      	beq.n	221c6 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   22194:	4a43      	ldr	r2, [pc, #268]	; (222a4 <m2m_wifi_connect_sc+0x3d4>)
   22196:	4936      	ldr	r1, [pc, #216]	; (22270 <m2m_wifi_connect_sc+0x3a0>)
   22198:	4b36      	ldr	r3, [pc, #216]	; (22274 <m2m_wifi_connect_sc+0x3a4>)
   2219a:	0018      	movs	r0, r3
   2219c:	4b36      	ldr	r3, [pc, #216]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   2219e:	4798      	blx	r3
   221a0:	2384      	movs	r3, #132	; 0x84
   221a2:	18fb      	adds	r3, r7, r3
   221a4:	681b      	ldr	r3, [r3, #0]
   221a6:	785b      	ldrb	r3, [r3, #1]
   221a8:	001a      	movs	r2, r3
   221aa:	4b3f      	ldr	r3, [pc, #252]	; (222a8 <m2m_wifi_connect_sc+0x3d8>)
   221ac:	0011      	movs	r1, r2
   221ae:	0018      	movs	r0, r3
   221b0:	4b31      	ldr	r3, [pc, #196]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   221b2:	4798      	blx	r3
   221b4:	4b32      	ldr	r3, [pc, #200]	; (22280 <m2m_wifi_connect_sc+0x3b0>)
   221b6:	0018      	movs	r0, r3
   221b8:	4b2f      	ldr	r3, [pc, #188]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   221ba:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   221bc:	2397      	movs	r3, #151	; 0x97
   221be:	18fb      	adds	r3, r7, r3
   221c0:	22f4      	movs	r2, #244	; 0xf4
   221c2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   221c4:	e0ad      	b.n	22322 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   221c6:	2384      	movs	r3, #132	; 0x84
   221c8:	18fb      	adds	r3, r7, r3
   221ca:	681b      	ldr	r3, [r3, #0]
   221cc:	1c98      	adds	r0, r3, #2
   221ce:	2388      	movs	r3, #136	; 0x88
   221d0:	18fb      	adds	r3, r7, r3
   221d2:	681b      	ldr	r3, [r3, #0]
   221d4:	1c99      	adds	r1, r3, #2
   221d6:	2388      	movs	r3, #136	; 0x88
   221d8:	18fb      	adds	r3, r7, r3
   221da:	681b      	ldr	r3, [r3, #0]
   221dc:	785b      	ldrb	r3, [r3, #1]
   221de:	001a      	movs	r2, r3
   221e0:	4b2e      	ldr	r3, [pc, #184]	; (2229c <m2m_wifi_connect_sc+0x3cc>)
   221e2:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   221e4:	2388      	movs	r3, #136	; 0x88
   221e6:	18fb      	adds	r3, r7, r3
   221e8:	681b      	ldr	r3, [r3, #0]
   221ea:	785b      	ldrb	r3, [r3, #1]
   221ec:	001a      	movs	r2, r3
   221ee:	2384      	movs	r3, #132	; 0x84
   221f0:	18fb      	adds	r3, r7, r3
   221f2:	681b      	ldr	r3, [r3, #0]
   221f4:	189b      	adds	r3, r3, r2
   221f6:	2200      	movs	r2, #0
   221f8:	709a      	strb	r2, [r3, #2]
   221fa:	e081      	b.n	22300 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   221fc:	230a      	movs	r3, #10
   221fe:	18fb      	adds	r3, r7, r3
   22200:	781b      	ldrb	r3, [r3, #0]
   22202:	2b02      	cmp	r3, #2
   22204:	d156      	bne.n	222b4 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   22206:	2382      	movs	r3, #130	; 0x82
   22208:	18fc      	adds	r4, r7, r3
   2220a:	687b      	ldr	r3, [r7, #4]
   2220c:	0018      	movs	r0, r3
   2220e:	4b1d      	ldr	r3, [pc, #116]	; (22284 <m2m_wifi_connect_sc+0x3b4>)
   22210:	4798      	blx	r3
   22212:	0003      	movs	r3, r0
   22214:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   22216:	2382      	movs	r3, #130	; 0x82
   22218:	18fb      	adds	r3, r7, r3
   2221a:	881b      	ldrh	r3, [r3, #0]
   2221c:	2b00      	cmp	r3, #0
   2221e:	d004      	beq.n	2222a <m2m_wifi_connect_sc+0x35a>
   22220:	2382      	movs	r3, #130	; 0x82
   22222:	18fb      	adds	r3, r7, r3
   22224:	881b      	ldrh	r3, [r3, #0]
   22226:	2b40      	cmp	r3, #64	; 0x40
   22228:	d912      	bls.n	22250 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   2222a:	4a20      	ldr	r2, [pc, #128]	; (222ac <m2m_wifi_connect_sc+0x3dc>)
   2222c:	4910      	ldr	r1, [pc, #64]	; (22270 <m2m_wifi_connect_sc+0x3a0>)
   2222e:	4b11      	ldr	r3, [pc, #68]	; (22274 <m2m_wifi_connect_sc+0x3a4>)
   22230:	0018      	movs	r0, r3
   22232:	4b11      	ldr	r3, [pc, #68]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   22234:	4798      	blx	r3
   22236:	4b1e      	ldr	r3, [pc, #120]	; (222b0 <m2m_wifi_connect_sc+0x3e0>)
   22238:	0018      	movs	r0, r3
   2223a:	4b0f      	ldr	r3, [pc, #60]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   2223c:	4798      	blx	r3
   2223e:	4b10      	ldr	r3, [pc, #64]	; (22280 <m2m_wifi_connect_sc+0x3b0>)
   22240:	0018      	movs	r0, r3
   22242:	4b0d      	ldr	r3, [pc, #52]	; (22278 <m2m_wifi_connect_sc+0x3a8>)
   22244:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22246:	2397      	movs	r3, #151	; 0x97
   22248:	18fb      	adds	r3, r7, r3
   2224a:	22f4      	movs	r2, #244	; 0xf4
   2224c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2224e:	e068      	b.n	22322 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   22250:	238c      	movs	r3, #140	; 0x8c
   22252:	18fb      	adds	r3, r7, r3
   22254:	6818      	ldr	r0, [r3, #0]
   22256:	2382      	movs	r3, #130	; 0x82
   22258:	18fb      	adds	r3, r7, r3
   2225a:	881b      	ldrh	r3, [r3, #0]
   2225c:	3301      	adds	r3, #1
   2225e:	001a      	movs	r2, r3
   22260:	687b      	ldr	r3, [r7, #4]
   22262:	0019      	movs	r1, r3
   22264:	4b0d      	ldr	r3, [pc, #52]	; (2229c <m2m_wifi_connect_sc+0x3cc>)
   22266:	4798      	blx	r3
   22268:	e04a      	b.n	22300 <m2m_wifi_connect_sc+0x430>
   2226a:	46c0      	nop			; (mov r8, r8)
   2226c:	0000021a 	.word	0x0000021a
   22270:	00038830 	.word	0x00038830
   22274:	00038478 	.word	0x00038478
   22278:	0001e189 	.word	0x0001e189
   2227c:	000386b8 	.word	0x000386b8
   22280:	00038474 	.word	0x00038474
   22284:	00020b3f 	.word	0x00020b3f
   22288:	00000226 	.word	0x00000226
   2228c:	000386cc 	.word	0x000386cc
   22290:	000386dc 	.word	0x000386dc
   22294:	00000239 	.word	0x00000239
   22298:	000386f0 	.word	0x000386f0
   2229c:	00020ac5 	.word	0x00020ac5
   222a0:	000386fc 	.word	0x000386fc
   222a4:	00000257 	.word	0x00000257
   222a8:	00038718 	.word	0x00038718
   222ac:	00000266 	.word	0x00000266
   222b0:	00038734 	.word	0x00038734
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   222b4:	230a      	movs	r3, #10
   222b6:	18fb      	adds	r3, r7, r3
   222b8:	781b      	ldrb	r3, [r3, #0]
   222ba:	2b04      	cmp	r3, #4
   222bc:	d108      	bne.n	222d0 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   222be:	238c      	movs	r3, #140	; 0x8c
   222c0:	18fb      	adds	r3, r7, r3
   222c2:	681b      	ldr	r3, [r3, #0]
   222c4:	6879      	ldr	r1, [r7, #4]
   222c6:	223e      	movs	r2, #62	; 0x3e
   222c8:	0018      	movs	r0, r3
   222ca:	4b1a      	ldr	r3, [pc, #104]	; (22334 <m2m_wifi_connect_sc+0x464>)
   222cc:	4798      	blx	r3
   222ce:	e017      	b.n	22300 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   222d0:	230a      	movs	r3, #10
   222d2:	18fb      	adds	r3, r7, r3
   222d4:	781b      	ldrb	r3, [r3, #0]
   222d6:	2b01      	cmp	r3, #1
   222d8:	d012      	beq.n	22300 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   222da:	4a17      	ldr	r2, [pc, #92]	; (22338 <m2m_wifi_connect_sc+0x468>)
   222dc:	4917      	ldr	r1, [pc, #92]	; (2233c <m2m_wifi_connect_sc+0x46c>)
   222de:	4b18      	ldr	r3, [pc, #96]	; (22340 <m2m_wifi_connect_sc+0x470>)
   222e0:	0018      	movs	r0, r3
   222e2:	4b18      	ldr	r3, [pc, #96]	; (22344 <m2m_wifi_connect_sc+0x474>)
   222e4:	4798      	blx	r3
   222e6:	4b18      	ldr	r3, [pc, #96]	; (22348 <m2m_wifi_connect_sc+0x478>)
   222e8:	0018      	movs	r0, r3
   222ea:	4b16      	ldr	r3, [pc, #88]	; (22344 <m2m_wifi_connect_sc+0x474>)
   222ec:	4798      	blx	r3
   222ee:	4b17      	ldr	r3, [pc, #92]	; (2234c <m2m_wifi_connect_sc+0x47c>)
   222f0:	0018      	movs	r0, r3
   222f2:	4b14      	ldr	r3, [pc, #80]	; (22344 <m2m_wifi_connect_sc+0x474>)
   222f4:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   222f6:	2397      	movs	r3, #151	; 0x97
   222f8:	18fb      	adds	r3, r7, r3
   222fa:	22f4      	movs	r2, #244	; 0xf4
   222fc:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   222fe:	e010      	b.n	22322 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   22300:	2397      	movs	r3, #151	; 0x97
   22302:	18fc      	adds	r4, r7, r3
   22304:	2314      	movs	r3, #20
   22306:	18fa      	adds	r2, r7, r3
   22308:	2300      	movs	r3, #0
   2230a:	9302      	str	r3, [sp, #8]
   2230c:	2300      	movs	r3, #0
   2230e:	9301      	str	r3, [sp, #4]
   22310:	2300      	movs	r3, #0
   22312:	9300      	str	r3, [sp, #0]
   22314:	236c      	movs	r3, #108	; 0x6c
   22316:	2128      	movs	r1, #40	; 0x28
   22318:	2001      	movs	r0, #1
   2231a:	4d0d      	ldr	r5, [pc, #52]	; (22350 <m2m_wifi_connect_sc+0x480>)
   2231c:	47a8      	blx	r5
   2231e:	0003      	movs	r3, r0
   22320:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   22322:	2397      	movs	r3, #151	; 0x97
   22324:	18fb      	adds	r3, r7, r3
   22326:	781b      	ldrb	r3, [r3, #0]
   22328:	b25b      	sxtb	r3, r3
}
   2232a:	0018      	movs	r0, r3
   2232c:	46bd      	mov	sp, r7
   2232e:	b026      	add	sp, #152	; 0x98
   22330:	bdb0      	pop	{r4, r5, r7, pc}
   22332:	46c0      	nop			; (mov r8, r8)
   22334:	00020ac5 	.word	0x00020ac5
   22338:	00000276 	.word	0x00000276
   2233c:	00038830 	.word	0x00038830
   22340:	00038478 	.word	0x00038478
   22344:	0001e189 	.word	0x0001e189
   22348:	00038750 	.word	0x00038750
   2234c:	00038474 	.word	0x00038474
   22350:	00020d61 	.word	0x00020d61

00022354 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   22354:	b580      	push	{r7, lr}
   22356:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   22358:	2300      	movs	r3, #0
}
   2235a:	0018      	movs	r0, r3
   2235c:	46bd      	mov	sp, r7
   2235e:	bd80      	pop	{r7, pc}

00022360 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   22360:	b590      	push	{r4, r7, lr}
   22362:	b087      	sub	sp, #28
   22364:	af00      	add	r7, sp, #0
   22366:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22368:	2317      	movs	r3, #23
   2236a:	18fb      	adds	r3, r7, r3
   2236c:	2200      	movs	r2, #0
   2236e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   22370:	687b      	ldr	r3, [r7, #4]
   22372:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   22374:	693b      	ldr	r3, [r7, #16]
   22376:	2280      	movs	r2, #128	; 0x80
   22378:	0052      	lsls	r2, r2, #1
   2237a:	4313      	orrs	r3, r2
   2237c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   2237e:	693a      	ldr	r2, [r7, #16]
   22380:	23a5      	movs	r3, #165	; 0xa5
   22382:	015b      	lsls	r3, r3, #5
   22384:	0011      	movs	r1, r2
   22386:	0018      	movs	r0, r3
   22388:	4b12      	ldr	r3, [pc, #72]	; (223d4 <chip_apply_conf+0x74>)
   2238a:	4798      	blx	r3
		if(val32 != 0) {		
   2238c:	693b      	ldr	r3, [r7, #16]
   2238e:	2b00      	cmp	r3, #0
   22390:	d018      	beq.n	223c4 <chip_apply_conf+0x64>
			uint32 reg = 0;
   22392:	2300      	movs	r3, #0
   22394:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   22396:	2317      	movs	r3, #23
   22398:	18fc      	adds	r4, r7, r3
   2239a:	230c      	movs	r3, #12
   2239c:	18fa      	adds	r2, r7, r3
   2239e:	23a5      	movs	r3, #165	; 0xa5
   223a0:	015b      	lsls	r3, r3, #5
   223a2:	0011      	movs	r1, r2
   223a4:	0018      	movs	r0, r3
   223a6:	4b0c      	ldr	r3, [pc, #48]	; (223d8 <chip_apply_conf+0x78>)
   223a8:	4798      	blx	r3
   223aa:	0003      	movs	r3, r0
   223ac:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   223ae:	2317      	movs	r3, #23
   223b0:	18fb      	adds	r3, r7, r3
   223b2:	781b      	ldrb	r3, [r3, #0]
   223b4:	b25b      	sxtb	r3, r3
   223b6:	2b00      	cmp	r3, #0
   223b8:	d1e1      	bne.n	2237e <chip_apply_conf+0x1e>
				if(reg == val32)
   223ba:	68fa      	ldr	r2, [r7, #12]
   223bc:	693b      	ldr	r3, [r7, #16]
   223be:	429a      	cmp	r2, r3
   223c0:	d002      	beq.n	223c8 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   223c2:	e7dc      	b.n	2237e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   223c4:	46c0      	nop			; (mov r8, r8)
   223c6:	e000      	b.n	223ca <chip_apply_conf+0x6a>
					break;
   223c8:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   223ca:	2300      	movs	r3, #0
}
   223cc:	0018      	movs	r0, r3
   223ce:	46bd      	mov	sp, r7
   223d0:	b007      	add	sp, #28
   223d2:	bd90      	pop	{r4, r7, pc}
   223d4:	00022bb5 	.word	0x00022bb5
   223d8:	00022b91 	.word	0x00022b91

000223dc <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   223dc:	b590      	push	{r4, r7, lr}
   223de:	b083      	sub	sp, #12
   223e0:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   223e2:	2300      	movs	r3, #0
   223e4:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   223e6:	1dfb      	adds	r3, r7, #7
   223e8:	2200      	movs	r2, #0
   223ea:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   223ec:	1dfc      	adds	r4, r7, #7
   223ee:	003b      	movs	r3, r7
   223f0:	4a24      	ldr	r2, [pc, #144]	; (22484 <enable_interrupts+0xa8>)
   223f2:	0019      	movs	r1, r3
   223f4:	0010      	movs	r0, r2
   223f6:	4b24      	ldr	r3, [pc, #144]	; (22488 <enable_interrupts+0xac>)
   223f8:	4798      	blx	r3
   223fa:	0003      	movs	r3, r0
   223fc:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   223fe:	1dfb      	adds	r3, r7, #7
   22400:	781b      	ldrb	r3, [r3, #0]
   22402:	b25b      	sxtb	r3, r3
   22404:	2b00      	cmp	r3, #0
   22406:	d131      	bne.n	2246c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   22408:	683b      	ldr	r3, [r7, #0]
   2240a:	2280      	movs	r2, #128	; 0x80
   2240c:	0052      	lsls	r2, r2, #1
   2240e:	4313      	orrs	r3, r2
   22410:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   22412:	683b      	ldr	r3, [r7, #0]
   22414:	1dfc      	adds	r4, r7, #7
   22416:	4a1b      	ldr	r2, [pc, #108]	; (22484 <enable_interrupts+0xa8>)
   22418:	0019      	movs	r1, r3
   2241a:	0010      	movs	r0, r2
   2241c:	4b1b      	ldr	r3, [pc, #108]	; (2248c <enable_interrupts+0xb0>)
   2241e:	4798      	blx	r3
   22420:	0003      	movs	r3, r0
   22422:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   22424:	1dfb      	adds	r3, r7, #7
   22426:	781b      	ldrb	r3, [r3, #0]
   22428:	b25b      	sxtb	r3, r3
   2242a:	2b00      	cmp	r3, #0
   2242c:	d120      	bne.n	22470 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   2242e:	1dfc      	adds	r4, r7, #7
   22430:	003a      	movs	r2, r7
   22432:	23d0      	movs	r3, #208	; 0xd0
   22434:	015b      	lsls	r3, r3, #5
   22436:	0011      	movs	r1, r2
   22438:	0018      	movs	r0, r3
   2243a:	4b13      	ldr	r3, [pc, #76]	; (22488 <enable_interrupts+0xac>)
   2243c:	4798      	blx	r3
   2243e:	0003      	movs	r3, r0
   22440:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   22442:	1dfb      	adds	r3, r7, #7
   22444:	781b      	ldrb	r3, [r3, #0]
   22446:	b25b      	sxtb	r3, r3
   22448:	2b00      	cmp	r3, #0
   2244a:	d113      	bne.n	22474 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   2244c:	683b      	ldr	r3, [r7, #0]
   2244e:	2280      	movs	r2, #128	; 0x80
   22450:	0252      	lsls	r2, r2, #9
   22452:	4313      	orrs	r3, r2
   22454:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   22456:	683a      	ldr	r2, [r7, #0]
   22458:	1dfc      	adds	r4, r7, #7
   2245a:	23d0      	movs	r3, #208	; 0xd0
   2245c:	015b      	lsls	r3, r3, #5
   2245e:	0011      	movs	r1, r2
   22460:	0018      	movs	r0, r3
   22462:	4b0a      	ldr	r3, [pc, #40]	; (2248c <enable_interrupts+0xb0>)
   22464:	4798      	blx	r3
   22466:	0003      	movs	r3, r0
   22468:	7023      	strb	r3, [r4, #0]
   2246a:	e004      	b.n	22476 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   2246c:	46c0      	nop			; (mov r8, r8)
   2246e:	e002      	b.n	22476 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22470:	46c0      	nop			; (mov r8, r8)
   22472:	e000      	b.n	22476 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22474:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   22476:	1dfb      	adds	r3, r7, #7
   22478:	781b      	ldrb	r3, [r3, #0]
   2247a:	b25b      	sxtb	r3, r3
}
   2247c:	0018      	movs	r0, r3
   2247e:	46bd      	mov	sp, r7
   22480:	b003      	add	sp, #12
   22482:	bd90      	pop	{r4, r7, pc}
   22484:	00001408 	.word	0x00001408
   22488:	00022b91 	.word	0x00022b91
   2248c:	00022bb5 	.word	0x00022bb5

00022490 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   22490:	b580      	push	{r7, lr}
   22492:	b082      	sub	sp, #8
   22494:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   22496:	4b32      	ldr	r3, [pc, #200]	; (22560 <nmi_get_chipid+0xd0>)
   22498:	681b      	ldr	r3, [r3, #0]
   2249a:	2b00      	cmp	r3, #0
   2249c:	d159      	bne.n	22552 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   2249e:	4a30      	ldr	r2, [pc, #192]	; (22560 <nmi_get_chipid+0xd0>)
   224a0:	2380      	movs	r3, #128	; 0x80
   224a2:	015b      	lsls	r3, r3, #5
   224a4:	0011      	movs	r1, r2
   224a6:	0018      	movs	r0, r3
   224a8:	4b2e      	ldr	r3, [pc, #184]	; (22564 <nmi_get_chipid+0xd4>)
   224aa:	4798      	blx	r3
   224ac:	1e03      	subs	r3, r0, #0
   224ae:	d004      	beq.n	224ba <nmi_get_chipid+0x2a>
			chipid = 0;
   224b0:	4b2b      	ldr	r3, [pc, #172]	; (22560 <nmi_get_chipid+0xd0>)
   224b2:	2200      	movs	r2, #0
   224b4:	601a      	str	r2, [r3, #0]
			return 0;
   224b6:	2300      	movs	r3, #0
   224b8:	e04d      	b.n	22556 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   224ba:	1d3b      	adds	r3, r7, #4
   224bc:	4a2a      	ldr	r2, [pc, #168]	; (22568 <nmi_get_chipid+0xd8>)
   224be:	0019      	movs	r1, r3
   224c0:	0010      	movs	r0, r2
   224c2:	4b28      	ldr	r3, [pc, #160]	; (22564 <nmi_get_chipid+0xd4>)
   224c4:	4798      	blx	r3
   224c6:	1e03      	subs	r3, r0, #0
   224c8:	d004      	beq.n	224d4 <nmi_get_chipid+0x44>
			chipid = 0;
   224ca:	4b25      	ldr	r3, [pc, #148]	; (22560 <nmi_get_chipid+0xd0>)
   224cc:	2200      	movs	r2, #0
   224ce:	601a      	str	r2, [r3, #0]
			return 0;
   224d0:	2300      	movs	r3, #0
   224d2:	e040      	b.n	22556 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   224d4:	4b22      	ldr	r3, [pc, #136]	; (22560 <nmi_get_chipid+0xd0>)
   224d6:	681b      	ldr	r3, [r3, #0]
   224d8:	4a24      	ldr	r2, [pc, #144]	; (2256c <nmi_get_chipid+0xdc>)
   224da:	4293      	cmp	r3, r2
   224dc:	d106      	bne.n	224ec <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   224de:	687b      	ldr	r3, [r7, #4]
   224e0:	2b01      	cmp	r3, #1
   224e2:	d029      	beq.n	22538 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   224e4:	4b1e      	ldr	r3, [pc, #120]	; (22560 <nmi_get_chipid+0xd0>)
   224e6:	4a22      	ldr	r2, [pc, #136]	; (22570 <nmi_get_chipid+0xe0>)
   224e8:	601a      	str	r2, [r3, #0]
   224ea:	e025      	b.n	22538 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   224ec:	4b1c      	ldr	r3, [pc, #112]	; (22560 <nmi_get_chipid+0xd0>)
   224ee:	681b      	ldr	r3, [r3, #0]
   224f0:	4a20      	ldr	r2, [pc, #128]	; (22574 <nmi_get_chipid+0xe4>)
   224f2:	4293      	cmp	r3, r2
   224f4:	d10d      	bne.n	22512 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   224f6:	687b      	ldr	r3, [r7, #4]
   224f8:	2b03      	cmp	r3, #3
   224fa:	d01d      	beq.n	22538 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   224fc:	687b      	ldr	r3, [r7, #4]
   224fe:	2b04      	cmp	r3, #4
   22500:	d103      	bne.n	2250a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   22502:	4b17      	ldr	r3, [pc, #92]	; (22560 <nmi_get_chipid+0xd0>)
   22504:	4a1c      	ldr	r2, [pc, #112]	; (22578 <nmi_get_chipid+0xe8>)
   22506:	601a      	str	r2, [r3, #0]
   22508:	e016      	b.n	22538 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   2250a:	4b15      	ldr	r3, [pc, #84]	; (22560 <nmi_get_chipid+0xd0>)
   2250c:	4a1b      	ldr	r2, [pc, #108]	; (2257c <nmi_get_chipid+0xec>)
   2250e:	601a      	str	r2, [r3, #0]
   22510:	e012      	b.n	22538 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   22512:	4b13      	ldr	r3, [pc, #76]	; (22560 <nmi_get_chipid+0xd0>)
   22514:	681b      	ldr	r3, [r3, #0]
   22516:	4a1a      	ldr	r2, [pc, #104]	; (22580 <nmi_get_chipid+0xf0>)
   22518:	4293      	cmp	r3, r2
   2251a:	d10d      	bne.n	22538 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   2251c:	4a10      	ldr	r2, [pc, #64]	; (22560 <nmi_get_chipid+0xd0>)
   2251e:	23ec      	movs	r3, #236	; 0xec
   22520:	039b      	lsls	r3, r3, #14
   22522:	0011      	movs	r1, r2
   22524:	0018      	movs	r0, r3
   22526:	4b0f      	ldr	r3, [pc, #60]	; (22564 <nmi_get_chipid+0xd4>)
   22528:	4798      	blx	r3
   2252a:	1e03      	subs	r3, r0, #0
   2252c:	d004      	beq.n	22538 <nmi_get_chipid+0xa8>
			chipid = 0;
   2252e:	4b0c      	ldr	r3, [pc, #48]	; (22560 <nmi_get_chipid+0xd0>)
   22530:	2200      	movs	r2, #0
   22532:	601a      	str	r2, [r3, #0]
			return 0;
   22534:	2300      	movs	r3, #0
   22536:	e00e      	b.n	22556 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   22538:	4b09      	ldr	r3, [pc, #36]	; (22560 <nmi_get_chipid+0xd0>)
   2253a:	681b      	ldr	r3, [r3, #0]
   2253c:	4a11      	ldr	r2, [pc, #68]	; (22584 <nmi_get_chipid+0xf4>)
   2253e:	401a      	ands	r2, r3
   22540:	4b07      	ldr	r3, [pc, #28]	; (22560 <nmi_get_chipid+0xd0>)
   22542:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   22544:	4b06      	ldr	r3, [pc, #24]	; (22560 <nmi_get_chipid+0xd0>)
   22546:	681b      	ldr	r3, [r3, #0]
   22548:	22a0      	movs	r2, #160	; 0xa0
   2254a:	02d2      	lsls	r2, r2, #11
   2254c:	431a      	orrs	r2, r3
   2254e:	4b04      	ldr	r3, [pc, #16]	; (22560 <nmi_get_chipid+0xd0>)
   22550:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   22552:	4b03      	ldr	r3, [pc, #12]	; (22560 <nmi_get_chipid+0xd0>)
   22554:	681b      	ldr	r3, [r3, #0]
}
   22556:	0018      	movs	r0, r3
   22558:	46bd      	mov	sp, r7
   2255a:	b002      	add	sp, #8
   2255c:	bd80      	pop	{r7, pc}
   2255e:	46c0      	nop			; (mov r8, r8)
   22560:	20003e98 	.word	0x20003e98
   22564:	00022b91 	.word	0x00022b91
   22568:	000013f4 	.word	0x000013f4
   2256c:	001002a0 	.word	0x001002a0
   22570:	001002a1 	.word	0x001002a1
   22574:	001002b0 	.word	0x001002b0
   22578:	001002b1 	.word	0x001002b1
   2257c:	001002b2 	.word	0x001002b2
   22580:	001000f0 	.word	0x001000f0
   22584:	fff0ffff 	.word	0xfff0ffff

00022588 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   22588:	b590      	push	{r4, r7, lr}
   2258a:	b083      	sub	sp, #12
   2258c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2258e:	1dfb      	adds	r3, r7, #7
   22590:	2200      	movs	r2, #0
   22592:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   22594:	1dfc      	adds	r4, r7, #7
   22596:	003b      	movs	r3, r7
   22598:	0019      	movs	r1, r3
   2259a:	2010      	movs	r0, #16
   2259c:	4b2e      	ldr	r3, [pc, #184]	; (22658 <chip_sleep+0xd0>)
   2259e:	4798      	blx	r3
   225a0:	0003      	movs	r3, r0
   225a2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   225a4:	1dfb      	adds	r3, r7, #7
   225a6:	781b      	ldrb	r3, [r3, #0]
   225a8:	b25b      	sxtb	r3, r3
   225aa:	2b00      	cmp	r3, #0
   225ac:	d145      	bne.n	2263a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   225ae:	683b      	ldr	r3, [r7, #0]
   225b0:	2201      	movs	r2, #1
   225b2:	4013      	ands	r3, r2
   225b4:	d000      	beq.n	225b8 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   225b6:	e7ed      	b.n	22594 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   225b8:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   225ba:	1dfc      	adds	r4, r7, #7
   225bc:	003b      	movs	r3, r7
   225be:	0019      	movs	r1, r3
   225c0:	2001      	movs	r0, #1
   225c2:	4b25      	ldr	r3, [pc, #148]	; (22658 <chip_sleep+0xd0>)
   225c4:	4798      	blx	r3
   225c6:	0003      	movs	r3, r0
   225c8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   225ca:	1dfb      	adds	r3, r7, #7
   225cc:	781b      	ldrb	r3, [r3, #0]
   225ce:	b25b      	sxtb	r3, r3
   225d0:	2b00      	cmp	r3, #0
   225d2:	d134      	bne.n	2263e <chip_sleep+0xb6>
	if(reg & NBIT1)
   225d4:	683b      	ldr	r3, [r7, #0]
   225d6:	2202      	movs	r2, #2
   225d8:	4013      	ands	r3, r2
   225da:	d010      	beq.n	225fe <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   225dc:	683b      	ldr	r3, [r7, #0]
   225de:	2202      	movs	r2, #2
   225e0:	4393      	bics	r3, r2
   225e2:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   225e4:	683b      	ldr	r3, [r7, #0]
   225e6:	1dfc      	adds	r4, r7, #7
   225e8:	0019      	movs	r1, r3
   225ea:	2001      	movs	r0, #1
   225ec:	4b1b      	ldr	r3, [pc, #108]	; (2265c <chip_sleep+0xd4>)
   225ee:	4798      	blx	r3
   225f0:	0003      	movs	r3, r0
   225f2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   225f4:	1dfb      	adds	r3, r7, #7
   225f6:	781b      	ldrb	r3, [r3, #0]
   225f8:	b25b      	sxtb	r3, r3
   225fa:	2b00      	cmp	r3, #0
   225fc:	d121      	bne.n	22642 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   225fe:	1dfc      	adds	r4, r7, #7
   22600:	003b      	movs	r3, r7
   22602:	0019      	movs	r1, r3
   22604:	200b      	movs	r0, #11
   22606:	4b14      	ldr	r3, [pc, #80]	; (22658 <chip_sleep+0xd0>)
   22608:	4798      	blx	r3
   2260a:	0003      	movs	r3, r0
   2260c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2260e:	1dfb      	adds	r3, r7, #7
   22610:	781b      	ldrb	r3, [r3, #0]
   22612:	b25b      	sxtb	r3, r3
   22614:	2b00      	cmp	r3, #0
   22616:	d116      	bne.n	22646 <chip_sleep+0xbe>
	if(reg & NBIT0)
   22618:	683b      	ldr	r3, [r7, #0]
   2261a:	2201      	movs	r2, #1
   2261c:	4013      	ands	r3, r2
   2261e:	d013      	beq.n	22648 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   22620:	683b      	ldr	r3, [r7, #0]
   22622:	2201      	movs	r2, #1
   22624:	4393      	bics	r3, r2
   22626:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   22628:	683b      	ldr	r3, [r7, #0]
   2262a:	1dfc      	adds	r4, r7, #7
   2262c:	0019      	movs	r1, r3
   2262e:	200b      	movs	r0, #11
   22630:	4b0a      	ldr	r3, [pc, #40]	; (2265c <chip_sleep+0xd4>)
   22632:	4798      	blx	r3
   22634:	0003      	movs	r3, r0
   22636:	7023      	strb	r3, [r4, #0]
   22638:	e006      	b.n	22648 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   2263a:	46c0      	nop			; (mov r8, r8)
   2263c:	e004      	b.n	22648 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2263e:	46c0      	nop			; (mov r8, r8)
   22640:	e002      	b.n	22648 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   22642:	46c0      	nop			; (mov r8, r8)
   22644:	e000      	b.n	22648 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   22646:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   22648:	1dfb      	adds	r3, r7, #7
   2264a:	781b      	ldrb	r3, [r3, #0]
   2264c:	b25b      	sxtb	r3, r3
}
   2264e:	0018      	movs	r0, r3
   22650:	46bd      	mov	sp, r7
   22652:	b003      	add	sp, #12
   22654:	bd90      	pop	{r4, r7, pc}
   22656:	46c0      	nop			; (mov r8, r8)
   22658:	00022b91 	.word	0x00022b91
   2265c:	00022bb5 	.word	0x00022bb5

00022660 <chip_wake>:
sint8 chip_wake(void)
{
   22660:	b590      	push	{r4, r7, lr}
   22662:	b085      	sub	sp, #20
   22664:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22666:	230f      	movs	r3, #15
   22668:	18fb      	adds	r3, r7, r3
   2266a:	2200      	movs	r2, #0
   2266c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   2266e:	2300      	movs	r3, #0
   22670:	607b      	str	r3, [r7, #4]
   22672:	2300      	movs	r3, #0
   22674:	603b      	str	r3, [r7, #0]
   22676:	2300      	movs	r3, #0
   22678:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2267a:	230f      	movs	r3, #15
   2267c:	18fc      	adds	r4, r7, r3
   2267e:	1d3b      	adds	r3, r7, #4
   22680:	0019      	movs	r1, r3
   22682:	200b      	movs	r0, #11
   22684:	4b4e      	ldr	r3, [pc, #312]	; (227c0 <chip_wake+0x160>)
   22686:	4798      	blx	r3
   22688:	0003      	movs	r3, r0
   2268a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2268c:	230f      	movs	r3, #15
   2268e:	18fb      	adds	r3, r7, r3
   22690:	781b      	ldrb	r3, [r3, #0]
   22692:	b25b      	sxtb	r3, r3
   22694:	2b00      	cmp	r3, #0
   22696:	d000      	beq.n	2269a <chip_wake+0x3a>
   22698:	e082      	b.n	227a0 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   2269a:	687b      	ldr	r3, [r7, #4]
   2269c:	2201      	movs	r2, #1
   2269e:	4013      	ands	r3, r2
   226a0:	d111      	bne.n	226c6 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   226a2:	687b      	ldr	r3, [r7, #4]
   226a4:	2201      	movs	r2, #1
   226a6:	4313      	orrs	r3, r2
   226a8:	220f      	movs	r2, #15
   226aa:	18bc      	adds	r4, r7, r2
   226ac:	0019      	movs	r1, r3
   226ae:	200b      	movs	r0, #11
   226b0:	4b44      	ldr	r3, [pc, #272]	; (227c4 <chip_wake+0x164>)
   226b2:	4798      	blx	r3
   226b4:	0003      	movs	r3, r0
   226b6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   226b8:	230f      	movs	r3, #15
   226ba:	18fb      	adds	r3, r7, r3
   226bc:	781b      	ldrb	r3, [r3, #0]
   226be:	b25b      	sxtb	r3, r3
   226c0:	2b00      	cmp	r3, #0
   226c2:	d000      	beq.n	226c6 <chip_wake+0x66>
   226c4:	e06e      	b.n	227a4 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   226c6:	230f      	movs	r3, #15
   226c8:	18fc      	adds	r4, r7, r3
   226ca:	1d3b      	adds	r3, r7, #4
   226cc:	0019      	movs	r1, r3
   226ce:	2001      	movs	r0, #1
   226d0:	4b3b      	ldr	r3, [pc, #236]	; (227c0 <chip_wake+0x160>)
   226d2:	4798      	blx	r3
   226d4:	0003      	movs	r3, r0
   226d6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   226d8:	230f      	movs	r3, #15
   226da:	18fb      	adds	r3, r7, r3
   226dc:	781b      	ldrb	r3, [r3, #0]
   226de:	b25b      	sxtb	r3, r3
   226e0:	2b00      	cmp	r3, #0
   226e2:	d161      	bne.n	227a8 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   226e4:	687b      	ldr	r3, [r7, #4]
   226e6:	2202      	movs	r2, #2
   226e8:	4013      	ands	r3, r2
   226ea:	d110      	bne.n	2270e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   226ec:	687b      	ldr	r3, [r7, #4]
   226ee:	2202      	movs	r2, #2
   226f0:	4313      	orrs	r3, r2
   226f2:	220f      	movs	r2, #15
   226f4:	18bc      	adds	r4, r7, r2
   226f6:	0019      	movs	r1, r3
   226f8:	2001      	movs	r0, #1
   226fa:	4b32      	ldr	r3, [pc, #200]	; (227c4 <chip_wake+0x164>)
   226fc:	4798      	blx	r3
   226fe:	0003      	movs	r3, r0
   22700:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22702:	230f      	movs	r3, #15
   22704:	18fb      	adds	r3, r7, r3
   22706:	781b      	ldrb	r3, [r3, #0]
   22708:	b25b      	sxtb	r3, r3
   2270a:	2b00      	cmp	r3, #0
   2270c:	d14e      	bne.n	227ac <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2270e:	230f      	movs	r3, #15
   22710:	18fc      	adds	r4, r7, r3
   22712:	003b      	movs	r3, r7
   22714:	0019      	movs	r1, r3
   22716:	200f      	movs	r0, #15
   22718:	4b29      	ldr	r3, [pc, #164]	; (227c0 <chip_wake+0x160>)
   2271a:	4798      	blx	r3
   2271c:	0003      	movs	r3, r0
   2271e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   22720:	230f      	movs	r3, #15
   22722:	18fb      	adds	r3, r7, r3
   22724:	781b      	ldrb	r3, [r3, #0]
   22726:	b25b      	sxtb	r3, r3
   22728:	2b00      	cmp	r3, #0
   2272a:	d014      	beq.n	22756 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   2272c:	23a8      	movs	r3, #168	; 0xa8
   2272e:	005a      	lsls	r2, r3, #1
   22730:	4925      	ldr	r1, [pc, #148]	; (227c8 <chip_wake+0x168>)
   22732:	4b26      	ldr	r3, [pc, #152]	; (227cc <chip_wake+0x16c>)
   22734:	0018      	movs	r0, r3
   22736:	4b26      	ldr	r3, [pc, #152]	; (227d0 <chip_wake+0x170>)
   22738:	4798      	blx	r3
   2273a:	230f      	movs	r3, #15
   2273c:	18fb      	adds	r3, r7, r3
   2273e:	2100      	movs	r1, #0
   22740:	5659      	ldrsb	r1, [r3, r1]
   22742:	683a      	ldr	r2, [r7, #0]
   22744:	4b23      	ldr	r3, [pc, #140]	; (227d4 <chip_wake+0x174>)
   22746:	0018      	movs	r0, r3
   22748:	4b21      	ldr	r3, [pc, #132]	; (227d0 <chip_wake+0x170>)
   2274a:	4798      	blx	r3
   2274c:	4b22      	ldr	r3, [pc, #136]	; (227d8 <chip_wake+0x178>)
   2274e:	0018      	movs	r0, r3
   22750:	4b1f      	ldr	r3, [pc, #124]	; (227d0 <chip_wake+0x170>)
   22752:	4798      	blx	r3
			goto _WAKE_EXIT;
   22754:	e02b      	b.n	227ae <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   22756:	683b      	ldr	r3, [r7, #0]
   22758:	2204      	movs	r2, #4
   2275a:	4013      	ands	r3, r2
   2275c:	d11c      	bne.n	22798 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   2275e:	2002      	movs	r0, #2
   22760:	4b1e      	ldr	r3, [pc, #120]	; (227dc <chip_wake+0x17c>)
   22762:	4798      	blx	r3
		trials++;
   22764:	68bb      	ldr	r3, [r7, #8]
   22766:	3301      	adds	r3, #1
   22768:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   2276a:	68bb      	ldr	r3, [r7, #8]
   2276c:	2b04      	cmp	r3, #4
   2276e:	d9ce      	bls.n	2270e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   22770:	23ad      	movs	r3, #173	; 0xad
   22772:	005a      	lsls	r2, r3, #1
   22774:	4914      	ldr	r1, [pc, #80]	; (227c8 <chip_wake+0x168>)
   22776:	4b15      	ldr	r3, [pc, #84]	; (227cc <chip_wake+0x16c>)
   22778:	0018      	movs	r0, r3
   2277a:	4b15      	ldr	r3, [pc, #84]	; (227d0 <chip_wake+0x170>)
   2277c:	4798      	blx	r3
   2277e:	4b18      	ldr	r3, [pc, #96]	; (227e0 <chip_wake+0x180>)
   22780:	0018      	movs	r0, r3
   22782:	4b13      	ldr	r3, [pc, #76]	; (227d0 <chip_wake+0x170>)
   22784:	4798      	blx	r3
   22786:	4b14      	ldr	r3, [pc, #80]	; (227d8 <chip_wake+0x178>)
   22788:	0018      	movs	r0, r3
   2278a:	4b11      	ldr	r3, [pc, #68]	; (227d0 <chip_wake+0x170>)
   2278c:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   2278e:	230f      	movs	r3, #15
   22790:	18fb      	adds	r3, r7, r3
   22792:	22fc      	movs	r2, #252	; 0xfc
   22794:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   22796:	e00a      	b.n	227ae <chip_wake+0x14e>
			break;
   22798:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   2279a:	4b12      	ldr	r3, [pc, #72]	; (227e4 <chip_wake+0x184>)
   2279c:	4798      	blx	r3
   2279e:	e006      	b.n	227ae <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   227a0:	46c0      	nop			; (mov r8, r8)
   227a2:	e004      	b.n	227ae <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   227a4:	46c0      	nop			; (mov r8, r8)
   227a6:	e002      	b.n	227ae <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   227a8:	46c0      	nop			; (mov r8, r8)
   227aa:	e000      	b.n	227ae <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   227ac:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   227ae:	230f      	movs	r3, #15
   227b0:	18fb      	adds	r3, r7, r3
   227b2:	781b      	ldrb	r3, [r3, #0]
   227b4:	b25b      	sxtb	r3, r3
}
   227b6:	0018      	movs	r0, r3
   227b8:	46bd      	mov	sp, r7
   227ba:	b005      	add	sp, #20
   227bc:	bd90      	pop	{r4, r7, pc}
   227be:	46c0      	nop			; (mov r8, r8)
   227c0:	00022b91 	.word	0x00022b91
   227c4:	00022bb5 	.word	0x00022bb5
   227c8:	000388d0 	.word	0x000388d0
   227cc:	00038844 	.word	0x00038844
   227d0:	0001e189 	.word	0x0001e189
   227d4:	00038858 	.word	0x00038858
   227d8:	00038870 	.word	0x00038870
   227dc:	00020221 	.word	0x00020221
   227e0:	00038874 	.word	0x00038874
   227e4:	00022b51 	.word	0x00022b51

000227e8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   227e8:	b580      	push	{r7, lr}
   227ea:	b088      	sub	sp, #32
   227ec:	af00      	add	r7, sp, #0
   227ee:	0002      	movs	r2, r0
   227f0:	1dfb      	adds	r3, r7, #7
   227f2:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   227f4:	2313      	movs	r3, #19
   227f6:	18fb      	adds	r3, r7, r3
   227f8:	2200      	movs	r2, #0
   227fa:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   227fc:	2300      	movs	r3, #0
   227fe:	61fb      	str	r3, [r7, #28]
   22800:	2300      	movs	r3, #0
   22802:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   22804:	2300      	movs	r3, #0
   22806:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   22808:	4b4a      	ldr	r3, [pc, #296]	; (22934 <wait_for_bootrom+0x14c>)
   2280a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   2280c:	2300      	movs	r3, #0
   2280e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22810:	4b49      	ldr	r3, [pc, #292]	; (22938 <wait_for_bootrom+0x150>)
   22812:	0018      	movs	r0, r3
   22814:	4b49      	ldr	r3, [pc, #292]	; (2293c <wait_for_bootrom+0x154>)
   22816:	4798      	blx	r3
   22818:	0003      	movs	r3, r0
   2281a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   2281c:	69fb      	ldr	r3, [r7, #28]
   2281e:	2b00      	cmp	r3, #0
   22820:	db03      	blt.n	2282a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   22822:	2001      	movs	r0, #1
   22824:	4b46      	ldr	r3, [pc, #280]	; (22940 <wait_for_bootrom+0x158>)
   22826:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22828:	e7f2      	b.n	22810 <wait_for_bootrom+0x28>
			break;
   2282a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   2282c:	4b45      	ldr	r3, [pc, #276]	; (22944 <wait_for_bootrom+0x15c>)
   2282e:	0018      	movs	r0, r3
   22830:	4b42      	ldr	r3, [pc, #264]	; (2293c <wait_for_bootrom+0x154>)
   22832:	4798      	blx	r3
   22834:	0003      	movs	r3, r0
   22836:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   22838:	69fb      	ldr	r3, [r7, #28]
   2283a:	2201      	movs	r2, #1
   2283c:	4013      	ands	r3, r2
   2283e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   22840:	69fb      	ldr	r3, [r7, #28]
   22842:	2b00      	cmp	r3, #0
   22844:	d112      	bne.n	2286c <wait_for_bootrom+0x84>
	{
		reg = 0;
   22846:	2300      	movs	r3, #0
   22848:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   2284a:	e00b      	b.n	22864 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   2284c:	2001      	movs	r0, #1
   2284e:	4b3c      	ldr	r3, [pc, #240]	; (22940 <wait_for_bootrom+0x158>)
   22850:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   22852:	4b3d      	ldr	r3, [pc, #244]	; (22948 <wait_for_bootrom+0x160>)
   22854:	0018      	movs	r0, r3
   22856:	4b39      	ldr	r3, [pc, #228]	; (2293c <wait_for_bootrom+0x154>)
   22858:	4798      	blx	r3
   2285a:	0003      	movs	r3, r0
   2285c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   2285e:	69bb      	ldr	r3, [r7, #24]
   22860:	3301      	adds	r3, #1
   22862:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   22864:	69fb      	ldr	r3, [r7, #28]
   22866:	4a39      	ldr	r2, [pc, #228]	; (2294c <wait_for_bootrom+0x164>)
   22868:	4293      	cmp	r3, r2
   2286a:	d1ef      	bne.n	2284c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   2286c:	1dfb      	adds	r3, r7, #7
   2286e:	781b      	ldrb	r3, [r3, #0]
   22870:	2b02      	cmp	r3, #2
   22872:	d10d      	bne.n	22890 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22874:	4a36      	ldr	r2, [pc, #216]	; (22950 <wait_for_bootrom+0x168>)
   22876:	4b37      	ldr	r3, [pc, #220]	; (22954 <wait_for_bootrom+0x16c>)
   22878:	0011      	movs	r1, r2
   2287a:	0018      	movs	r0, r3
   2287c:	4b36      	ldr	r3, [pc, #216]	; (22958 <wait_for_bootrom+0x170>)
   2287e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   22880:	2380      	movs	r3, #128	; 0x80
   22882:	035b      	lsls	r3, r3, #13
   22884:	4a35      	ldr	r2, [pc, #212]	; (2295c <wait_for_bootrom+0x174>)
   22886:	0019      	movs	r1, r3
   22888:	0010      	movs	r0, r2
   2288a:	4b33      	ldr	r3, [pc, #204]	; (22958 <wait_for_bootrom+0x170>)
   2288c:	4798      	blx	r3
   2288e:	e022      	b.n	228d6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   22890:	1dfb      	adds	r3, r7, #7
   22892:	781b      	ldrb	r3, [r3, #0]
   22894:	2b03      	cmp	r3, #3
   22896:	d10b      	bne.n	228b0 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22898:	4a2d      	ldr	r2, [pc, #180]	; (22950 <wait_for_bootrom+0x168>)
   2289a:	4b2e      	ldr	r3, [pc, #184]	; (22954 <wait_for_bootrom+0x16c>)
   2289c:	0011      	movs	r1, r2
   2289e:	0018      	movs	r0, r3
   228a0:	4b2d      	ldr	r3, [pc, #180]	; (22958 <wait_for_bootrom+0x170>)
   228a2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   228a4:	4b2d      	ldr	r3, [pc, #180]	; (2295c <wait_for_bootrom+0x174>)
   228a6:	2100      	movs	r1, #0
   228a8:	0018      	movs	r0, r3
   228aa:	4b2b      	ldr	r3, [pc, #172]	; (22958 <wait_for_bootrom+0x170>)
   228ac:	4798      	blx	r3
   228ae:	e012      	b.n	228d6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   228b0:	1dfb      	adds	r3, r7, #7
   228b2:	781b      	ldrb	r3, [r3, #0]
   228b4:	2b04      	cmp	r3, #4
   228b6:	d108      	bne.n	228ca <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   228b8:	2380      	movs	r3, #128	; 0x80
   228ba:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   228bc:	68fb      	ldr	r3, [r7, #12]
   228be:	4a27      	ldr	r2, [pc, #156]	; (2295c <wait_for_bootrom+0x174>)
   228c0:	0019      	movs	r1, r3
   228c2:	0010      	movs	r0, r2
   228c4:	4b24      	ldr	r3, [pc, #144]	; (22958 <wait_for_bootrom+0x170>)
   228c6:	4798      	blx	r3
   228c8:	e005      	b.n	228d6 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   228ca:	68fb      	ldr	r3, [r7, #12]
   228cc:	4a23      	ldr	r2, [pc, #140]	; (2295c <wait_for_bootrom+0x174>)
   228ce:	0019      	movs	r1, r3
   228d0:	0010      	movs	r0, r2
   228d2:	4b21      	ldr	r3, [pc, #132]	; (22958 <wait_for_bootrom+0x170>)
   228d4:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   228d6:	4b22      	ldr	r3, [pc, #136]	; (22960 <wait_for_bootrom+0x178>)
   228d8:	4798      	blx	r3
   228da:	0003      	movs	r3, r0
   228dc:	051b      	lsls	r3, r3, #20
   228de:	0d1b      	lsrs	r3, r3, #20
   228e0:	4a20      	ldr	r2, [pc, #128]	; (22964 <wait_for_bootrom+0x17c>)
   228e2:	4293      	cmp	r3, r2
   228e4:	d906      	bls.n	228f4 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   228e6:	697b      	ldr	r3, [r7, #20]
   228e8:	2202      	movs	r2, #2
   228ea:	4313      	orrs	r3, r2
   228ec:	0018      	movs	r0, r3
   228ee:	4b1e      	ldr	r3, [pc, #120]	; (22968 <wait_for_bootrom+0x180>)
   228f0:	4798      	blx	r3
   228f2:	e003      	b.n	228fc <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   228f4:	697b      	ldr	r3, [r7, #20]
   228f6:	0018      	movs	r0, r3
   228f8:	4b1b      	ldr	r3, [pc, #108]	; (22968 <wait_for_bootrom+0x180>)
   228fa:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   228fc:	4b1b      	ldr	r3, [pc, #108]	; (2296c <wait_for_bootrom+0x184>)
   228fe:	0018      	movs	r0, r3
   22900:	4b1b      	ldr	r3, [pc, #108]	; (22970 <wait_for_bootrom+0x188>)
   22902:	4798      	blx	r3
   22904:	68fa      	ldr	r2, [r7, #12]
   22906:	4b1b      	ldr	r3, [pc, #108]	; (22974 <wait_for_bootrom+0x18c>)
   22908:	0011      	movs	r1, r2
   2290a:	0018      	movs	r0, r3
   2290c:	4b18      	ldr	r3, [pc, #96]	; (22970 <wait_for_bootrom+0x188>)
   2290e:	4798      	blx	r3
   22910:	4b19      	ldr	r3, [pc, #100]	; (22978 <wait_for_bootrom+0x190>)
   22912:	0018      	movs	r0, r3
   22914:	4b16      	ldr	r3, [pc, #88]	; (22970 <wait_for_bootrom+0x188>)
   22916:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   22918:	4a18      	ldr	r2, [pc, #96]	; (2297c <wait_for_bootrom+0x194>)
   2291a:	4b0b      	ldr	r3, [pc, #44]	; (22948 <wait_for_bootrom+0x160>)
   2291c:	0011      	movs	r1, r2
   2291e:	0018      	movs	r0, r3
   22920:	4b0d      	ldr	r3, [pc, #52]	; (22958 <wait_for_bootrom+0x170>)
   22922:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   22924:	2313      	movs	r3, #19
   22926:	18fb      	adds	r3, r7, r3
   22928:	781b      	ldrb	r3, [r3, #0]
   2292a:	b25b      	sxtb	r3, r3
}
   2292c:	0018      	movs	r0, r3
   2292e:	46bd      	mov	sp, r7
   22930:	b008      	add	sp, #32
   22932:	bd80      	pop	{r7, pc}
   22934:	13301354 	.word	0x13301354
   22938:	00001014 	.word	0x00001014
   2293c:	00022b71 	.word	0x00022b71
   22940:	00020221 	.word	0x00020221
   22944:	000207bc 	.word	0x000207bc
   22948:	000c000c 	.word	0x000c000c
   2294c:	10add09e 	.word	0x10add09e
   22950:	3c1cd57d 	.word	0x3c1cd57d
   22954:	000207ac 	.word	0x000207ac
   22958:	00022bb5 	.word	0x00022bb5
   2295c:	0000108c 	.word	0x0000108c
   22960:	00022491 	.word	0x00022491
   22964:	0000039f 	.word	0x0000039f
   22968:	00022361 	.word	0x00022361
   2296c:	00038890 	.word	0x00038890
   22970:	0001e189 	.word	0x0001e189
   22974:	0003889c 	.word	0x0003889c
   22978:	00038870 	.word	0x00038870
   2297c:	ef522f61 	.word	0xef522f61

00022980 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   22980:	b580      	push	{r7, lr}
   22982:	b088      	sub	sp, #32
   22984:	af00      	add	r7, sp, #0
   22986:	0002      	movs	r2, r0
   22988:	1dfb      	adds	r3, r7, #7
   2298a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2298c:	231f      	movs	r3, #31
   2298e:	18fb      	adds	r3, r7, r3
   22990:	2200      	movs	r2, #0
   22992:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   22994:	2300      	movs	r3, #0
   22996:	61bb      	str	r3, [r7, #24]
   22998:	2300      	movs	r3, #0
   2299a:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   2299c:	2301      	movs	r3, #1
   2299e:	425b      	negs	r3, r3
   229a0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   229a2:	4b1d      	ldr	r3, [pc, #116]	; (22a18 <wait_for_firmware_start+0x98>)
   229a4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   229a6:	4b1d      	ldr	r3, [pc, #116]	; (22a1c <wait_for_firmware_start+0x9c>)
   229a8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   229aa:	1dfb      	adds	r3, r7, #7
   229ac:	781b      	ldrb	r3, [r3, #0]
   229ae:	2b02      	cmp	r3, #2
   229b0:	d003      	beq.n	229ba <wait_for_firmware_start+0x3a>
   229b2:	1dfb      	adds	r3, r7, #7
   229b4:	781b      	ldrb	r3, [r3, #0]
   229b6:	2b03      	cmp	r3, #3
   229b8:	d119      	bne.n	229ee <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   229ba:	4b19      	ldr	r3, [pc, #100]	; (22a20 <wait_for_firmware_start+0xa0>)
   229bc:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   229be:	4b19      	ldr	r3, [pc, #100]	; (22a24 <wait_for_firmware_start+0xa4>)
   229c0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   229c2:	e014      	b.n	229ee <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   229c4:	2002      	movs	r0, #2
   229c6:	4b18      	ldr	r3, [pc, #96]	; (22a28 <wait_for_firmware_start+0xa8>)
   229c8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   229ca:	68fb      	ldr	r3, [r7, #12]
   229cc:	0018      	movs	r0, r3
   229ce:	4b17      	ldr	r3, [pc, #92]	; (22a2c <wait_for_firmware_start+0xac>)
   229d0:	4798      	blx	r3
   229d2:	0003      	movs	r3, r0
   229d4:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   229d6:	697b      	ldr	r3, [r7, #20]
   229d8:	3301      	adds	r3, #1
   229da:	617b      	str	r3, [r7, #20]
   229dc:	697a      	ldr	r2, [r7, #20]
   229de:	693b      	ldr	r3, [r7, #16]
   229e0:	429a      	cmp	r2, r3
   229e2:	d304      	bcc.n	229ee <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   229e4:	231f      	movs	r3, #31
   229e6:	18fb      	adds	r3, r7, r3
   229e8:	22fb      	movs	r2, #251	; 0xfb
   229ea:	701a      	strb	r2, [r3, #0]
			goto ERR;
   229ec:	e00c      	b.n	22a08 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   229ee:	68ba      	ldr	r2, [r7, #8]
   229f0:	69bb      	ldr	r3, [r7, #24]
   229f2:	429a      	cmp	r2, r3
   229f4:	d1e6      	bne.n	229c4 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   229f6:	68bb      	ldr	r3, [r7, #8]
   229f8:	4a08      	ldr	r2, [pc, #32]	; (22a1c <wait_for_firmware_start+0x9c>)
   229fa:	4293      	cmp	r3, r2
   229fc:	d104      	bne.n	22a08 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   229fe:	4b06      	ldr	r3, [pc, #24]	; (22a18 <wait_for_firmware_start+0x98>)
   22a00:	2100      	movs	r1, #0
   22a02:	0018      	movs	r0, r3
   22a04:	4b0a      	ldr	r3, [pc, #40]	; (22a30 <wait_for_firmware_start+0xb0>)
   22a06:	4798      	blx	r3
	}
ERR:
	return ret;
   22a08:	231f      	movs	r3, #31
   22a0a:	18fb      	adds	r3, r7, r3
   22a0c:	781b      	ldrb	r3, [r3, #0]
   22a0e:	b25b      	sxtb	r3, r3
}
   22a10:	0018      	movs	r0, r3
   22a12:	46bd      	mov	sp, r7
   22a14:	b008      	add	sp, #32
   22a16:	bd80      	pop	{r7, pc}
   22a18:	0000108c 	.word	0x0000108c
   22a1c:	02532636 	.word	0x02532636
   22a20:	000207ac 	.word	0x000207ac
   22a24:	d75dc1c3 	.word	0xd75dc1c3
   22a28:	00020221 	.word	0x00020221
   22a2c:	00022b71 	.word	0x00022b71
   22a30:	00022bb5 	.word	0x00022bb5

00022a34 <chip_deinit>:

sint8 chip_deinit(void)
{
   22a34:	b590      	push	{r4, r7, lr}
   22a36:	b083      	sub	sp, #12
   22a38:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   22a3a:	2300      	movs	r3, #0
   22a3c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   22a3e:	1dfc      	adds	r4, r7, #7
   22a40:	003a      	movs	r2, r7
   22a42:	23a0      	movs	r3, #160	; 0xa0
   22a44:	015b      	lsls	r3, r3, #5
   22a46:	0011      	movs	r1, r2
   22a48:	0018      	movs	r0, r3
   22a4a:	4b20      	ldr	r3, [pc, #128]	; (22acc <chip_deinit+0x98>)
   22a4c:	4798      	blx	r3
   22a4e:	0003      	movs	r3, r0
   22a50:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   22a52:	1dfb      	adds	r3, r7, #7
   22a54:	781b      	ldrb	r3, [r3, #0]
   22a56:	b25b      	sxtb	r3, r3
   22a58:	2b00      	cmp	r3, #0
   22a5a:	d00e      	beq.n	22a7a <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   22a5c:	4a1c      	ldr	r2, [pc, #112]	; (22ad0 <chip_deinit+0x9c>)
   22a5e:	491d      	ldr	r1, [pc, #116]	; (22ad4 <chip_deinit+0xa0>)
   22a60:	4b1d      	ldr	r3, [pc, #116]	; (22ad8 <chip_deinit+0xa4>)
   22a62:	0018      	movs	r0, r3
   22a64:	4b1d      	ldr	r3, [pc, #116]	; (22adc <chip_deinit+0xa8>)
   22a66:	4798      	blx	r3
   22a68:	4b1d      	ldr	r3, [pc, #116]	; (22ae0 <chip_deinit+0xac>)
   22a6a:	0018      	movs	r0, r3
   22a6c:	4b1b      	ldr	r3, [pc, #108]	; (22adc <chip_deinit+0xa8>)
   22a6e:	4798      	blx	r3
   22a70:	4b1c      	ldr	r3, [pc, #112]	; (22ae4 <chip_deinit+0xb0>)
   22a72:	0018      	movs	r0, r3
   22a74:	4b19      	ldr	r3, [pc, #100]	; (22adc <chip_deinit+0xa8>)
   22a76:	4798      	blx	r3
		goto ERR1;
   22a78:	e021      	b.n	22abe <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   22a7a:	683b      	ldr	r3, [r7, #0]
   22a7c:	4a1a      	ldr	r2, [pc, #104]	; (22ae8 <chip_deinit+0xb4>)
   22a7e:	4013      	ands	r3, r2
   22a80:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   22a82:	683a      	ldr	r2, [r7, #0]
   22a84:	1dfc      	adds	r4, r7, #7
   22a86:	23a0      	movs	r3, #160	; 0xa0
   22a88:	015b      	lsls	r3, r3, #5
   22a8a:	0011      	movs	r1, r2
   22a8c:	0018      	movs	r0, r3
   22a8e:	4b17      	ldr	r3, [pc, #92]	; (22aec <chip_deinit+0xb8>)
   22a90:	4798      	blx	r3
   22a92:	0003      	movs	r3, r0
   22a94:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   22a96:	1dfb      	adds	r3, r7, #7
   22a98:	781b      	ldrb	r3, [r3, #0]
   22a9a:	b25b      	sxtb	r3, r3
   22a9c:	2b00      	cmp	r3, #0
   22a9e:	d00e      	beq.n	22abe <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   22aa0:	4a13      	ldr	r2, [pc, #76]	; (22af0 <chip_deinit+0xbc>)
   22aa2:	490c      	ldr	r1, [pc, #48]	; (22ad4 <chip_deinit+0xa0>)
   22aa4:	4b0c      	ldr	r3, [pc, #48]	; (22ad8 <chip_deinit+0xa4>)
   22aa6:	0018      	movs	r0, r3
   22aa8:	4b0c      	ldr	r3, [pc, #48]	; (22adc <chip_deinit+0xa8>)
   22aaa:	4798      	blx	r3
   22aac:	4b0c      	ldr	r3, [pc, #48]	; (22ae0 <chip_deinit+0xac>)
   22aae:	0018      	movs	r0, r3
   22ab0:	4b0a      	ldr	r3, [pc, #40]	; (22adc <chip_deinit+0xa8>)
   22ab2:	4798      	blx	r3
   22ab4:	4b0b      	ldr	r3, [pc, #44]	; (22ae4 <chip_deinit+0xb0>)
   22ab6:	0018      	movs	r0, r3
   22ab8:	4b08      	ldr	r3, [pc, #32]	; (22adc <chip_deinit+0xa8>)
   22aba:	4798      	blx	r3
		goto ERR1;
   22abc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   22abe:	1dfb      	adds	r3, r7, #7
   22ac0:	781b      	ldrb	r3, [r3, #0]
   22ac2:	b25b      	sxtb	r3, r3
}
   22ac4:	0018      	movs	r0, r3
   22ac6:	46bd      	mov	sp, r7
   22ac8:	b003      	add	sp, #12
   22aca:	bd90      	pop	{r4, r7, pc}
   22acc:	00022b91 	.word	0x00022b91
   22ad0:	00000201 	.word	0x00000201
   22ad4:	000388dc 	.word	0x000388dc
   22ad8:	00038844 	.word	0x00038844
   22adc:	0001e189 	.word	0x0001e189
   22ae0:	000388b4 	.word	0x000388b4
   22ae4:	00038870 	.word	0x00038870
   22ae8:	fffffbff 	.word	0xfffffbff
   22aec:	00022bb5 	.word	0x00022bb5
   22af0:	00000207 	.word	0x00000207

00022af4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   22af4:	b590      	push	{r4, r7, lr}
   22af6:	b085      	sub	sp, #20
   22af8:	af00      	add	r7, sp, #0
   22afa:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22afc:	230f      	movs	r3, #15
   22afe:	18fb      	adds	r3, r7, r3
   22b00:	2200      	movs	r2, #0
   22b02:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   22b04:	230f      	movs	r3, #15
   22b06:	18fc      	adds	r4, r7, r3
   22b08:	687b      	ldr	r3, [r7, #4]
   22b0a:	0018      	movs	r0, r3
   22b0c:	4b05      	ldr	r3, [pc, #20]	; (22b24 <nm_bus_iface_init+0x30>)
   22b0e:	4798      	blx	r3
   22b10:	0003      	movs	r3, r0
   22b12:	7023      	strb	r3, [r4, #0]
	return ret;
   22b14:	230f      	movs	r3, #15
   22b16:	18fb      	adds	r3, r7, r3
   22b18:	781b      	ldrb	r3, [r3, #0]
   22b1a:	b25b      	sxtb	r3, r3
}
   22b1c:	0018      	movs	r0, r3
   22b1e:	46bd      	mov	sp, r7
   22b20:	b005      	add	sp, #20
   22b22:	bd90      	pop	{r4, r7, pc}
   22b24:	000208dd 	.word	0x000208dd

00022b28 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   22b28:	b590      	push	{r4, r7, lr}
   22b2a:	b083      	sub	sp, #12
   22b2c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22b2e:	1dfb      	adds	r3, r7, #7
   22b30:	2200      	movs	r2, #0
   22b32:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   22b34:	1dfc      	adds	r4, r7, #7
   22b36:	4b05      	ldr	r3, [pc, #20]	; (22b4c <nm_bus_iface_deinit+0x24>)
   22b38:	4798      	blx	r3
   22b3a:	0003      	movs	r3, r0
   22b3c:	7023      	strb	r3, [r4, #0]

	return ret;
   22b3e:	1dfb      	adds	r3, r7, #7
   22b40:	781b      	ldrb	r3, [r3, #0]
   22b42:	b25b      	sxtb	r3, r3
}
   22b44:	0018      	movs	r0, r3
   22b46:	46bd      	mov	sp, r7
   22b48:	b003      	add	sp, #12
   22b4a:	bd90      	pop	{r4, r7, pc}
   22b4c:	00020a55 	.word	0x00020a55

00022b50 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   22b50:	b580      	push	{r7, lr}
   22b52:	b082      	sub	sp, #8
   22b54:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22b56:	1dfb      	adds	r3, r7, #7
   22b58:	2200      	movs	r2, #0
   22b5a:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   22b5c:	4b03      	ldr	r3, [pc, #12]	; (22b6c <nm_bus_reset+0x1c>)
   22b5e:	4798      	blx	r3
   22b60:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   22b62:	0018      	movs	r0, r3
   22b64:	46bd      	mov	sp, r7
   22b66:	b002      	add	sp, #8
   22b68:	bd80      	pop	{r7, pc}
   22b6a:	46c0      	nop			; (mov r8, r8)
   22b6c:	0002497d 	.word	0x0002497d

00022b70 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   22b70:	b580      	push	{r7, lr}
   22b72:	b082      	sub	sp, #8
   22b74:	af00      	add	r7, sp, #0
   22b76:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   22b78:	687b      	ldr	r3, [r7, #4]
   22b7a:	0018      	movs	r0, r3
   22b7c:	4b03      	ldr	r3, [pc, #12]	; (22b8c <nm_read_reg+0x1c>)
   22b7e:	4798      	blx	r3
   22b80:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   22b82:	0018      	movs	r0, r3
   22b84:	46bd      	mov	sp, r7
   22b86:	b002      	add	sp, #8
   22b88:	bd80      	pop	{r7, pc}
   22b8a:	46c0      	nop			; (mov r8, r8)
   22b8c:	00024b11 	.word	0x00024b11

00022b90 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   22b90:	b580      	push	{r7, lr}
   22b92:	b082      	sub	sp, #8
   22b94:	af00      	add	r7, sp, #0
   22b96:	6078      	str	r0, [r7, #4]
   22b98:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   22b9a:	683a      	ldr	r2, [r7, #0]
   22b9c:	687b      	ldr	r3, [r7, #4]
   22b9e:	0011      	movs	r1, r2
   22ba0:	0018      	movs	r0, r3
   22ba2:	4b03      	ldr	r3, [pc, #12]	; (22bb0 <nm_read_reg_with_ret+0x20>)
   22ba4:	4798      	blx	r3
   22ba6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   22ba8:	0018      	movs	r0, r3
   22baa:	46bd      	mov	sp, r7
   22bac:	b002      	add	sp, #8
   22bae:	bd80      	pop	{r7, pc}
   22bb0:	00024b35 	.word	0x00024b35

00022bb4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   22bb4:	b580      	push	{r7, lr}
   22bb6:	b082      	sub	sp, #8
   22bb8:	af00      	add	r7, sp, #0
   22bba:	6078      	str	r0, [r7, #4]
   22bbc:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   22bbe:	683a      	ldr	r2, [r7, #0]
   22bc0:	687b      	ldr	r3, [r7, #4]
   22bc2:	0011      	movs	r1, r2
   22bc4:	0018      	movs	r0, r3
   22bc6:	4b03      	ldr	r3, [pc, #12]	; (22bd4 <nm_write_reg+0x20>)
   22bc8:	4798      	blx	r3
   22bca:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   22bcc:	0018      	movs	r0, r3
   22bce:	46bd      	mov	sp, r7
   22bd0:	b002      	add	sp, #8
   22bd2:	bd80      	pop	{r7, pc}
   22bd4:	00024b85 	.word	0x00024b85

00022bd8 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   22bd8:	b580      	push	{r7, lr}
   22bda:	b084      	sub	sp, #16
   22bdc:	af00      	add	r7, sp, #0
   22bde:	60f8      	str	r0, [r7, #12]
   22be0:	60b9      	str	r1, [r7, #8]
   22be2:	1dbb      	adds	r3, r7, #6
   22be4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   22be6:	1dbb      	adds	r3, r7, #6
   22be8:	881a      	ldrh	r2, [r3, #0]
   22bea:	68b9      	ldr	r1, [r7, #8]
   22bec:	68fb      	ldr	r3, [r7, #12]
   22bee:	0018      	movs	r0, r3
   22bf0:	4b03      	ldr	r3, [pc, #12]	; (22c00 <p_nm_read_block+0x28>)
   22bf2:	4798      	blx	r3
   22bf4:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   22bf6:	0018      	movs	r0, r3
   22bf8:	46bd      	mov	sp, r7
   22bfa:	b004      	add	sp, #16
   22bfc:	bd80      	pop	{r7, pc}
   22bfe:	46c0      	nop			; (mov r8, r8)
   22c00:	00024bd5 	.word	0x00024bd5

00022c04 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   22c04:	b580      	push	{r7, lr}
   22c06:	b086      	sub	sp, #24
   22c08:	af00      	add	r7, sp, #0
   22c0a:	60f8      	str	r0, [r7, #12]
   22c0c:	60b9      	str	r1, [r7, #8]
   22c0e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   22c10:	4b2d      	ldr	r3, [pc, #180]	; (22cc8 <nm_read_block+0xc4>)
   22c12:	881a      	ldrh	r2, [r3, #0]
   22c14:	2310      	movs	r3, #16
   22c16:	18fb      	adds	r3, r7, r3
   22c18:	3a08      	subs	r2, #8
   22c1a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   22c1c:	2300      	movs	r3, #0
   22c1e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   22c20:	2313      	movs	r3, #19
   22c22:	18fb      	adds	r3, r7, r3
   22c24:	2200      	movs	r2, #0
   22c26:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22c28:	2310      	movs	r3, #16
   22c2a:	18fb      	adds	r3, r7, r3
   22c2c:	881a      	ldrh	r2, [r3, #0]
   22c2e:	687b      	ldr	r3, [r7, #4]
   22c30:	429a      	cmp	r2, r3
   22c32:	d313      	bcc.n	22c5c <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22c34:	68ba      	ldr	r2, [r7, #8]
   22c36:	697b      	ldr	r3, [r7, #20]
   22c38:	18d1      	adds	r1, r2, r3
   22c3a:	687b      	ldr	r3, [r7, #4]
   22c3c:	b29a      	uxth	r2, r3
   22c3e:	68fb      	ldr	r3, [r7, #12]
   22c40:	0018      	movs	r0, r3
   22c42:	4b22      	ldr	r3, [pc, #136]	; (22ccc <nm_read_block+0xc8>)
   22c44:	4798      	blx	r3
   22c46:	0003      	movs	r3, r0
   22c48:	b2da      	uxtb	r2, r3
   22c4a:	2313      	movs	r3, #19
   22c4c:	18fb      	adds	r3, r7, r3
   22c4e:	781b      	ldrb	r3, [r3, #0]
   22c50:	18d3      	adds	r3, r2, r3
   22c52:	b2da      	uxtb	r2, r3
   22c54:	2313      	movs	r3, #19
   22c56:	18fb      	adds	r3, r7, r3
   22c58:	701a      	strb	r2, [r3, #0]
			break;
   22c5a:	e02d      	b.n	22cb8 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22c5c:	68ba      	ldr	r2, [r7, #8]
   22c5e:	697b      	ldr	r3, [r7, #20]
   22c60:	18d1      	adds	r1, r2, r3
   22c62:	2310      	movs	r3, #16
   22c64:	18fb      	adds	r3, r7, r3
   22c66:	881a      	ldrh	r2, [r3, #0]
   22c68:	68fb      	ldr	r3, [r7, #12]
   22c6a:	0018      	movs	r0, r3
   22c6c:	4b17      	ldr	r3, [pc, #92]	; (22ccc <nm_read_block+0xc8>)
   22c6e:	4798      	blx	r3
   22c70:	0003      	movs	r3, r0
   22c72:	b2da      	uxtb	r2, r3
   22c74:	2313      	movs	r3, #19
   22c76:	18fb      	adds	r3, r7, r3
   22c78:	781b      	ldrb	r3, [r3, #0]
   22c7a:	18d3      	adds	r3, r2, r3
   22c7c:	b2da      	uxtb	r2, r3
   22c7e:	2313      	movs	r3, #19
   22c80:	18fb      	adds	r3, r7, r3
   22c82:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22c84:	2313      	movs	r3, #19
   22c86:	18fb      	adds	r3, r7, r3
   22c88:	781b      	ldrb	r3, [r3, #0]
   22c8a:	b25b      	sxtb	r3, r3
   22c8c:	2b00      	cmp	r3, #0
   22c8e:	d112      	bne.n	22cb6 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   22c90:	2310      	movs	r3, #16
   22c92:	18fb      	adds	r3, r7, r3
   22c94:	881b      	ldrh	r3, [r3, #0]
   22c96:	687a      	ldr	r2, [r7, #4]
   22c98:	1ad3      	subs	r3, r2, r3
   22c9a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   22c9c:	2310      	movs	r3, #16
   22c9e:	18fb      	adds	r3, r7, r3
   22ca0:	881b      	ldrh	r3, [r3, #0]
   22ca2:	697a      	ldr	r2, [r7, #20]
   22ca4:	18d3      	adds	r3, r2, r3
   22ca6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   22ca8:	2310      	movs	r3, #16
   22caa:	18fb      	adds	r3, r7, r3
   22cac:	881b      	ldrh	r3, [r3, #0]
   22cae:	68fa      	ldr	r2, [r7, #12]
   22cb0:	18d3      	adds	r3, r2, r3
   22cb2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   22cb4:	e7b8      	b.n	22c28 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   22cb6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   22cb8:	2313      	movs	r3, #19
   22cba:	18fb      	adds	r3, r7, r3
   22cbc:	781b      	ldrb	r3, [r3, #0]
   22cbe:	b25b      	sxtb	r3, r3
}
   22cc0:	0018      	movs	r0, r3
   22cc2:	46bd      	mov	sp, r7
   22cc4:	b006      	add	sp, #24
   22cc6:	bd80      	pop	{r7, pc}
   22cc8:	200000c8 	.word	0x200000c8
   22ccc:	00022bd9 	.word	0x00022bd9

00022cd0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   22cd0:	b580      	push	{r7, lr}
   22cd2:	b084      	sub	sp, #16
   22cd4:	af00      	add	r7, sp, #0
   22cd6:	60f8      	str	r0, [r7, #12]
   22cd8:	60b9      	str	r1, [r7, #8]
   22cda:	1dbb      	adds	r3, r7, #6
   22cdc:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   22cde:	1dbb      	adds	r3, r7, #6
   22ce0:	881a      	ldrh	r2, [r3, #0]
   22ce2:	68b9      	ldr	r1, [r7, #8]
   22ce4:	68fb      	ldr	r3, [r7, #12]
   22ce6:	0018      	movs	r0, r3
   22ce8:	4b03      	ldr	r3, [pc, #12]	; (22cf8 <p_nm_write_block+0x28>)
   22cea:	4798      	blx	r3
   22cec:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   22cee:	0018      	movs	r0, r3
   22cf0:	46bd      	mov	sp, r7
   22cf2:	b004      	add	sp, #16
   22cf4:	bd80      	pop	{r7, pc}
   22cf6:	46c0      	nop			; (mov r8, r8)
   22cf8:	00024c2d 	.word	0x00024c2d

00022cfc <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   22cfc:	b580      	push	{r7, lr}
   22cfe:	b086      	sub	sp, #24
   22d00:	af00      	add	r7, sp, #0
   22d02:	60f8      	str	r0, [r7, #12]
   22d04:	60b9      	str	r1, [r7, #8]
   22d06:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   22d08:	4b2d      	ldr	r3, [pc, #180]	; (22dc0 <nm_write_block+0xc4>)
   22d0a:	881a      	ldrh	r2, [r3, #0]
   22d0c:	2310      	movs	r3, #16
   22d0e:	18fb      	adds	r3, r7, r3
   22d10:	3a08      	subs	r2, #8
   22d12:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   22d14:	2300      	movs	r3, #0
   22d16:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   22d18:	2313      	movs	r3, #19
   22d1a:	18fb      	adds	r3, r7, r3
   22d1c:	2200      	movs	r2, #0
   22d1e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22d20:	2310      	movs	r3, #16
   22d22:	18fb      	adds	r3, r7, r3
   22d24:	881a      	ldrh	r2, [r3, #0]
   22d26:	687b      	ldr	r3, [r7, #4]
   22d28:	429a      	cmp	r2, r3
   22d2a:	d313      	bcc.n	22d54 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22d2c:	68ba      	ldr	r2, [r7, #8]
   22d2e:	697b      	ldr	r3, [r7, #20]
   22d30:	18d1      	adds	r1, r2, r3
   22d32:	687b      	ldr	r3, [r7, #4]
   22d34:	b29a      	uxth	r2, r3
   22d36:	68fb      	ldr	r3, [r7, #12]
   22d38:	0018      	movs	r0, r3
   22d3a:	4b22      	ldr	r3, [pc, #136]	; (22dc4 <nm_write_block+0xc8>)
   22d3c:	4798      	blx	r3
   22d3e:	0003      	movs	r3, r0
   22d40:	b2da      	uxtb	r2, r3
   22d42:	2313      	movs	r3, #19
   22d44:	18fb      	adds	r3, r7, r3
   22d46:	781b      	ldrb	r3, [r3, #0]
   22d48:	18d3      	adds	r3, r2, r3
   22d4a:	b2da      	uxtb	r2, r3
   22d4c:	2313      	movs	r3, #19
   22d4e:	18fb      	adds	r3, r7, r3
   22d50:	701a      	strb	r2, [r3, #0]
			break;
   22d52:	e02d      	b.n	22db0 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22d54:	68ba      	ldr	r2, [r7, #8]
   22d56:	697b      	ldr	r3, [r7, #20]
   22d58:	18d1      	adds	r1, r2, r3
   22d5a:	2310      	movs	r3, #16
   22d5c:	18fb      	adds	r3, r7, r3
   22d5e:	881a      	ldrh	r2, [r3, #0]
   22d60:	68fb      	ldr	r3, [r7, #12]
   22d62:	0018      	movs	r0, r3
   22d64:	4b17      	ldr	r3, [pc, #92]	; (22dc4 <nm_write_block+0xc8>)
   22d66:	4798      	blx	r3
   22d68:	0003      	movs	r3, r0
   22d6a:	b2da      	uxtb	r2, r3
   22d6c:	2313      	movs	r3, #19
   22d6e:	18fb      	adds	r3, r7, r3
   22d70:	781b      	ldrb	r3, [r3, #0]
   22d72:	18d3      	adds	r3, r2, r3
   22d74:	b2da      	uxtb	r2, r3
   22d76:	2313      	movs	r3, #19
   22d78:	18fb      	adds	r3, r7, r3
   22d7a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22d7c:	2313      	movs	r3, #19
   22d7e:	18fb      	adds	r3, r7, r3
   22d80:	781b      	ldrb	r3, [r3, #0]
   22d82:	b25b      	sxtb	r3, r3
   22d84:	2b00      	cmp	r3, #0
   22d86:	d112      	bne.n	22dae <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   22d88:	2310      	movs	r3, #16
   22d8a:	18fb      	adds	r3, r7, r3
   22d8c:	881b      	ldrh	r3, [r3, #0]
   22d8e:	687a      	ldr	r2, [r7, #4]
   22d90:	1ad3      	subs	r3, r2, r3
   22d92:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   22d94:	2310      	movs	r3, #16
   22d96:	18fb      	adds	r3, r7, r3
   22d98:	881b      	ldrh	r3, [r3, #0]
   22d9a:	697a      	ldr	r2, [r7, #20]
   22d9c:	18d3      	adds	r3, r2, r3
   22d9e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   22da0:	2310      	movs	r3, #16
   22da2:	18fb      	adds	r3, r7, r3
   22da4:	881b      	ldrh	r3, [r3, #0]
   22da6:	68fa      	ldr	r2, [r7, #12]
   22da8:	18d3      	adds	r3, r2, r3
   22daa:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   22dac:	e7b8      	b.n	22d20 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   22dae:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   22db0:	2313      	movs	r3, #19
   22db2:	18fb      	adds	r3, r7, r3
   22db4:	781b      	ldrb	r3, [r3, #0]
   22db6:	b25b      	sxtb	r3, r3
}
   22db8:	0018      	movs	r0, r3
   22dba:	46bd      	mov	sp, r7
   22dbc:	b006      	add	sp, #24
   22dbe:	bd80      	pop	{r7, pc}
   22dc0:	200000c8 	.word	0x200000c8
   22dc4:	00022cd1 	.word	0x00022cd1

00022dc8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   22dc8:	b590      	push	{r4, r7, lr}
   22dca:	b089      	sub	sp, #36	; 0x24
   22dcc:	af00      	add	r7, sp, #0
   22dce:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   22dd0:	2300      	movs	r3, #0
   22dd2:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   22dd4:	231f      	movs	r3, #31
   22dd6:	18fb      	adds	r3, r7, r3
   22dd8:	2200      	movs	r2, #0
   22dda:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   22ddc:	230c      	movs	r3, #12
   22dde:	18fb      	adds	r3, r7, r3
   22de0:	0018      	movs	r0, r3
   22de2:	2308      	movs	r3, #8
   22de4:	001a      	movs	r2, r3
   22de6:	2100      	movs	r1, #0
   22de8:	4b64      	ldr	r3, [pc, #400]	; (22f7c <nm_get_firmware_full_info+0x1b4>)
   22dea:	4798      	blx	r3
	if (pstrRev != NULL)
   22dec:	687b      	ldr	r3, [r7, #4]
   22dee:	2b00      	cmp	r3, #0
   22df0:	d100      	bne.n	22df4 <nm_get_firmware_full_info+0x2c>
   22df2:	e0ba      	b.n	22f6a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   22df4:	687b      	ldr	r3, [r7, #4]
   22df6:	2228      	movs	r2, #40	; 0x28
   22df8:	2100      	movs	r1, #0
   22dfa:	0018      	movs	r0, r3
   22dfc:	4b60      	ldr	r3, [pc, #384]	; (22f80 <nm_get_firmware_full_info+0x1b8>)
   22dfe:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   22e00:	231f      	movs	r3, #31
   22e02:	18fc      	adds	r4, r7, r3
   22e04:	2314      	movs	r3, #20
   22e06:	18fb      	adds	r3, r7, r3
   22e08:	4a5e      	ldr	r2, [pc, #376]	; (22f84 <nm_get_firmware_full_info+0x1bc>)
   22e0a:	0019      	movs	r1, r3
   22e0c:	0010      	movs	r0, r2
   22e0e:	4b5e      	ldr	r3, [pc, #376]	; (22f88 <nm_get_firmware_full_info+0x1c0>)
   22e10:	4798      	blx	r3
   22e12:	0003      	movs	r3, r0
   22e14:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   22e16:	231f      	movs	r3, #31
   22e18:	18fb      	adds	r3, r7, r3
   22e1a:	781b      	ldrb	r3, [r3, #0]
   22e1c:	b25b      	sxtb	r3, r3
   22e1e:	2b00      	cmp	r3, #0
   22e20:	d000      	beq.n	22e24 <nm_get_firmware_full_info+0x5c>
   22e22:	e0a2      	b.n	22f6a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   22e24:	697b      	ldr	r3, [r7, #20]
   22e26:	2b00      	cmp	r3, #0
   22e28:	d100      	bne.n	22e2c <nm_get_firmware_full_info+0x64>
   22e2a:	e09a      	b.n	22f62 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   22e2c:	697b      	ldr	r3, [r7, #20]
   22e2e:	22c0      	movs	r2, #192	; 0xc0
   22e30:	0292      	lsls	r2, r2, #10
   22e32:	4313      	orrs	r3, r2
   22e34:	221f      	movs	r2, #31
   22e36:	18bc      	adds	r4, r7, r2
   22e38:	220c      	movs	r2, #12
   22e3a:	18b9      	adds	r1, r7, r2
   22e3c:	2208      	movs	r2, #8
   22e3e:	0018      	movs	r0, r3
   22e40:	4b52      	ldr	r3, [pc, #328]	; (22f8c <nm_get_firmware_full_info+0x1c4>)
   22e42:	4798      	blx	r3
   22e44:	0003      	movs	r3, r0
   22e46:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   22e48:	231f      	movs	r3, #31
   22e4a:	18fb      	adds	r3, r7, r3
   22e4c:	781b      	ldrb	r3, [r3, #0]
   22e4e:	b25b      	sxtb	r3, r3
   22e50:	2b00      	cmp	r3, #0
   22e52:	d000      	beq.n	22e56 <nm_get_firmware_full_info+0x8e>
   22e54:	e089      	b.n	22f6a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   22e56:	230c      	movs	r3, #12
   22e58:	18fb      	adds	r3, r7, r3
   22e5a:	685b      	ldr	r3, [r3, #4]
   22e5c:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   22e5e:	697b      	ldr	r3, [r7, #20]
   22e60:	041b      	lsls	r3, r3, #16
   22e62:	0c1b      	lsrs	r3, r3, #16
   22e64:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   22e66:	697b      	ldr	r3, [r7, #20]
   22e68:	2b00      	cmp	r3, #0
   22e6a:	d100      	bne.n	22e6e <nm_get_firmware_full_info+0xa6>
   22e6c:	e074      	b.n	22f58 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   22e6e:	697b      	ldr	r3, [r7, #20]
   22e70:	22c0      	movs	r2, #192	; 0xc0
   22e72:	0292      	lsls	r2, r2, #10
   22e74:	4313      	orrs	r3, r2
   22e76:	221f      	movs	r2, #31
   22e78:	18bc      	adds	r4, r7, r2
   22e7a:	6879      	ldr	r1, [r7, #4]
   22e7c:	2228      	movs	r2, #40	; 0x28
   22e7e:	0018      	movs	r0, r3
   22e80:	4b42      	ldr	r3, [pc, #264]	; (22f8c <nm_get_firmware_full_info+0x1c4>)
   22e82:	4798      	blx	r3
   22e84:	0003      	movs	r3, r0
   22e86:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   22e88:	231f      	movs	r3, #31
   22e8a:	18fb      	adds	r3, r7, r3
   22e8c:	781b      	ldrb	r3, [r3, #0]
   22e8e:	b25b      	sxtb	r3, r3
   22e90:	2b00      	cmp	r3, #0
   22e92:	d16a      	bne.n	22f6a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   22e94:	687b      	ldr	r3, [r7, #4]
   22e96:	791b      	ldrb	r3, [r3, #4]
   22e98:	021b      	lsls	r3, r3, #8
   22e9a:	b21a      	sxth	r2, r3
   22e9c:	687b      	ldr	r3, [r7, #4]
   22e9e:	795b      	ldrb	r3, [r3, #5]
   22ea0:	011b      	lsls	r3, r3, #4
   22ea2:	b21b      	sxth	r3, r3
   22ea4:	21ff      	movs	r1, #255	; 0xff
   22ea6:	400b      	ands	r3, r1
   22ea8:	b21b      	sxth	r3, r3
   22eaa:	4313      	orrs	r3, r2
   22eac:	b21a      	sxth	r2, r3
   22eae:	687b      	ldr	r3, [r7, #4]
   22eb0:	799b      	ldrb	r3, [r3, #6]
   22eb2:	b21b      	sxth	r3, r3
   22eb4:	210f      	movs	r1, #15
   22eb6:	400b      	ands	r3, r1
   22eb8:	b21b      	sxth	r3, r3
   22eba:	4313      	orrs	r3, r2
   22ebc:	b21a      	sxth	r2, r3
   22ebe:	231c      	movs	r3, #28
   22ec0:	18fb      	adds	r3, r7, r3
   22ec2:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   22ec4:	231a      	movs	r3, #26
   22ec6:	18fb      	adds	r3, r7, r3
   22ec8:	4a31      	ldr	r2, [pc, #196]	; (22f90 <nm_get_firmware_full_info+0x1c8>)
   22eca:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   22ecc:	687b      	ldr	r3, [r7, #4]
   22ece:	79db      	ldrb	r3, [r3, #7]
   22ed0:	021b      	lsls	r3, r3, #8
   22ed2:	b21a      	sxth	r2, r3
   22ed4:	687b      	ldr	r3, [r7, #4]
   22ed6:	7a1b      	ldrb	r3, [r3, #8]
   22ed8:	011b      	lsls	r3, r3, #4
   22eda:	b21b      	sxth	r3, r3
   22edc:	21ff      	movs	r1, #255	; 0xff
   22ede:	400b      	ands	r3, r1
   22ee0:	b21b      	sxth	r3, r3
   22ee2:	4313      	orrs	r3, r2
   22ee4:	b21a      	sxth	r2, r3
   22ee6:	687b      	ldr	r3, [r7, #4]
   22ee8:	7a5b      	ldrb	r3, [r3, #9]
   22eea:	b21b      	sxth	r3, r3
   22eec:	210f      	movs	r1, #15
   22eee:	400b      	ands	r3, r1
   22ef0:	b21b      	sxth	r3, r3
   22ef2:	4313      	orrs	r3, r2
   22ef4:	b21a      	sxth	r2, r3
   22ef6:	2318      	movs	r3, #24
   22ef8:	18fb      	adds	r3, r7, r3
   22efa:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   22efc:	231c      	movs	r3, #28
   22efe:	18fb      	adds	r3, r7, r3
   22f00:	881b      	ldrh	r3, [r3, #0]
   22f02:	2b00      	cmp	r3, #0
   22f04:	d009      	beq.n	22f1a <nm_get_firmware_full_info+0x152>
   22f06:	2318      	movs	r3, #24
   22f08:	18fb      	adds	r3, r7, r3
   22f0a:	881b      	ldrh	r3, [r3, #0]
   22f0c:	2b00      	cmp	r3, #0
   22f0e:	d004      	beq.n	22f1a <nm_get_firmware_full_info+0x152>
   22f10:	2318      	movs	r3, #24
   22f12:	18fb      	adds	r3, r7, r3
   22f14:	881b      	ldrh	r3, [r3, #0]
   22f16:	2b00      	cmp	r3, #0
   22f18:	d104      	bne.n	22f24 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   22f1a:	231f      	movs	r3, #31
   22f1c:	18fb      	adds	r3, r7, r3
   22f1e:	22f4      	movs	r2, #244	; 0xf4
   22f20:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22f22:	e022      	b.n	22f6a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   22f24:	231a      	movs	r3, #26
   22f26:	18fa      	adds	r2, r7, r3
   22f28:	2318      	movs	r3, #24
   22f2a:	18fb      	adds	r3, r7, r3
   22f2c:	8812      	ldrh	r2, [r2, #0]
   22f2e:	881b      	ldrh	r3, [r3, #0]
   22f30:	429a      	cmp	r2, r3
   22f32:	d204      	bcs.n	22f3e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   22f34:	231f      	movs	r3, #31
   22f36:	18fb      	adds	r3, r7, r3
   22f38:	22f3      	movs	r2, #243	; 0xf3
   22f3a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22f3c:	e015      	b.n	22f6a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   22f3e:	231a      	movs	r3, #26
   22f40:	18fa      	adds	r2, r7, r3
   22f42:	231c      	movs	r3, #28
   22f44:	18fb      	adds	r3, r7, r3
   22f46:	8812      	ldrh	r2, [r2, #0]
   22f48:	881b      	ldrh	r3, [r3, #0]
   22f4a:	429a      	cmp	r2, r3
   22f4c:	d90d      	bls.n	22f6a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   22f4e:	231f      	movs	r3, #31
   22f50:	18fb      	adds	r3, r7, r3
   22f52:	22f3      	movs	r2, #243	; 0xf3
   22f54:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22f56:	e008      	b.n	22f6a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   22f58:	231f      	movs	r3, #31
   22f5a:	18fb      	adds	r3, r7, r3
   22f5c:	22f4      	movs	r2, #244	; 0xf4
   22f5e:	701a      	strb	r2, [r3, #0]
   22f60:	e003      	b.n	22f6a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   22f62:	231f      	movs	r3, #31
   22f64:	18fb      	adds	r3, r7, r3
   22f66:	22f4      	movs	r2, #244	; 0xf4
   22f68:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   22f6a:	231f      	movs	r3, #31
   22f6c:	18fb      	adds	r3, r7, r3
   22f6e:	781b      	ldrb	r3, [r3, #0]
   22f70:	b25b      	sxtb	r3, r3
}
   22f72:	0018      	movs	r0, r3
   22f74:	46bd      	mov	sp, r7
   22f76:	b009      	add	sp, #36	; 0x24
   22f78:	bd90      	pop	{r4, r7, pc}
   22f7a:	46c0      	nop			; (mov r8, r8)
   22f7c:	0003489f 	.word	0x0003489f
   22f80:	00020b01 	.word	0x00020b01
   22f84:	000c0008 	.word	0x000c0008
   22f88:	00022b91 	.word	0x00022b91
   22f8c:	00022c05 	.word	0x00022c05
   22f90:	00001354 	.word	0x00001354

00022f94 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   22f94:	b590      	push	{r4, r7, lr}
   22f96:	b085      	sub	sp, #20
   22f98:	af00      	add	r7, sp, #0
   22f9a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22f9c:	230f      	movs	r3, #15
   22f9e:	18fb      	adds	r3, r7, r3
   22fa0:	2200      	movs	r2, #0
   22fa2:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   22fa4:	687b      	ldr	r3, [r7, #4]
   22fa6:	2b00      	cmp	r3, #0
   22fa8:	d013      	beq.n	22fd2 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   22faa:	230e      	movs	r3, #14
   22fac:	18fb      	adds	r3, r7, r3
   22fae:	687a      	ldr	r2, [r7, #4]
   22fb0:	7812      	ldrb	r2, [r2, #0]
   22fb2:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   22fb4:	230e      	movs	r3, #14
   22fb6:	18fb      	adds	r3, r7, r3
   22fb8:	781b      	ldrb	r3, [r3, #0]
   22fba:	2b00      	cmp	r3, #0
   22fbc:	d004      	beq.n	22fc8 <nm_drv_init+0x34>
   22fbe:	230e      	movs	r3, #14
   22fc0:	18fb      	adds	r3, r7, r3
   22fc2:	781b      	ldrb	r3, [r3, #0]
   22fc4:	2b04      	cmp	r3, #4
   22fc6:	d908      	bls.n	22fda <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   22fc8:	230e      	movs	r3, #14
   22fca:	18fb      	adds	r3, r7, r3
   22fcc:	2201      	movs	r2, #1
   22fce:	701a      	strb	r2, [r3, #0]
   22fd0:	e003      	b.n	22fda <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   22fd2:	230e      	movs	r3, #14
   22fd4:	18fb      	adds	r3, r7, r3
   22fd6:	2201      	movs	r2, #1
   22fd8:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   22fda:	230f      	movs	r3, #15
   22fdc:	18fc      	adds	r4, r7, r3
   22fde:	2000      	movs	r0, #0
   22fe0:	4b41      	ldr	r3, [pc, #260]	; (230e8 <nm_drv_init+0x154>)
   22fe2:	4798      	blx	r3
   22fe4:	0003      	movs	r3, r0
   22fe6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22fe8:	230f      	movs	r3, #15
   22fea:	18fb      	adds	r3, r7, r3
   22fec:	781b      	ldrb	r3, [r3, #0]
   22fee:	b25b      	sxtb	r3, r3
   22ff0:	2b00      	cmp	r3, #0
   22ff2:	d00f      	beq.n	23014 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   22ff4:	2390      	movs	r3, #144	; 0x90
   22ff6:	005a      	lsls	r2, r3, #1
   22ff8:	493c      	ldr	r1, [pc, #240]	; (230ec <nm_drv_init+0x158>)
   22ffa:	4b3d      	ldr	r3, [pc, #244]	; (230f0 <nm_drv_init+0x15c>)
   22ffc:	0018      	movs	r0, r3
   22ffe:	4b3d      	ldr	r3, [pc, #244]	; (230f4 <nm_drv_init+0x160>)
   23000:	4798      	blx	r3
   23002:	4b3d      	ldr	r3, [pc, #244]	; (230f8 <nm_drv_init+0x164>)
   23004:	0018      	movs	r0, r3
   23006:	4b3b      	ldr	r3, [pc, #236]	; (230f4 <nm_drv_init+0x160>)
   23008:	4798      	blx	r3
   2300a:	4b3c      	ldr	r3, [pc, #240]	; (230fc <nm_drv_init+0x168>)
   2300c:	0018      	movs	r0, r3
   2300e:	4b39      	ldr	r3, [pc, #228]	; (230f4 <nm_drv_init+0x160>)
   23010:	4798      	blx	r3
		goto ERR1;
   23012:	e061      	b.n	230d8 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   23014:	4b3a      	ldr	r3, [pc, #232]	; (23100 <nm_drv_init+0x16c>)
   23016:	0018      	movs	r0, r3
   23018:	4b36      	ldr	r3, [pc, #216]	; (230f4 <nm_drv_init+0x160>)
   2301a:	4798      	blx	r3
   2301c:	4b39      	ldr	r3, [pc, #228]	; (23104 <nm_drv_init+0x170>)
   2301e:	4798      	blx	r3
   23020:	0002      	movs	r2, r0
   23022:	4b39      	ldr	r3, [pc, #228]	; (23108 <nm_drv_init+0x174>)
   23024:	0011      	movs	r1, r2
   23026:	0018      	movs	r0, r3
   23028:	4b32      	ldr	r3, [pc, #200]	; (230f4 <nm_drv_init+0x160>)
   2302a:	4798      	blx	r3
   2302c:	4b33      	ldr	r3, [pc, #204]	; (230fc <nm_drv_init+0x168>)
   2302e:	0018      	movs	r0, r3
   23030:	4b30      	ldr	r3, [pc, #192]	; (230f4 <nm_drv_init+0x160>)
   23032:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   23034:	4b35      	ldr	r3, [pc, #212]	; (2310c <nm_drv_init+0x178>)
   23036:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   23038:	230f      	movs	r3, #15
   2303a:	18fc      	adds	r4, r7, r3
   2303c:	230e      	movs	r3, #14
   2303e:	18fb      	adds	r3, r7, r3
   23040:	781b      	ldrb	r3, [r3, #0]
   23042:	0018      	movs	r0, r3
   23044:	4b32      	ldr	r3, [pc, #200]	; (23110 <nm_drv_init+0x17c>)
   23046:	4798      	blx	r3
   23048:	0003      	movs	r3, r0
   2304a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2304c:	230f      	movs	r3, #15
   2304e:	18fb      	adds	r3, r7, r3
   23050:	781b      	ldrb	r3, [r3, #0]
   23052:	b25b      	sxtb	r3, r3
   23054:	2b00      	cmp	r3, #0
   23056:	d13a      	bne.n	230ce <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   23058:	230f      	movs	r3, #15
   2305a:	18fc      	adds	r4, r7, r3
   2305c:	230e      	movs	r3, #14
   2305e:	18fb      	adds	r3, r7, r3
   23060:	781b      	ldrb	r3, [r3, #0]
   23062:	0018      	movs	r0, r3
   23064:	4b2b      	ldr	r3, [pc, #172]	; (23114 <nm_drv_init+0x180>)
   23066:	4798      	blx	r3
   23068:	0003      	movs	r3, r0
   2306a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2306c:	230f      	movs	r3, #15
   2306e:	18fb      	adds	r3, r7, r3
   23070:	781b      	ldrb	r3, [r3, #0]
   23072:	b25b      	sxtb	r3, r3
   23074:	2b00      	cmp	r3, #0
   23076:	d12c      	bne.n	230d2 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   23078:	230e      	movs	r3, #14
   2307a:	18fb      	adds	r3, r7, r3
   2307c:	781b      	ldrb	r3, [r3, #0]
   2307e:	2b02      	cmp	r3, #2
   23080:	d02a      	beq.n	230d8 <nm_drv_init+0x144>
   23082:	230e      	movs	r3, #14
   23084:	18fb      	adds	r3, r7, r3
   23086:	781b      	ldrb	r3, [r3, #0]
   23088:	2b03      	cmp	r3, #3
   2308a:	d025      	beq.n	230d8 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   2308c:	230f      	movs	r3, #15
   2308e:	18fc      	adds	r4, r7, r3
   23090:	4b21      	ldr	r3, [pc, #132]	; (23118 <nm_drv_init+0x184>)
   23092:	4798      	blx	r3
   23094:	0003      	movs	r3, r0
   23096:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23098:	230f      	movs	r3, #15
   2309a:	18fb      	adds	r3, r7, r3
   2309c:	781b      	ldrb	r3, [r3, #0]
   2309e:	b25b      	sxtb	r3, r3
   230a0:	2b00      	cmp	r3, #0
   230a2:	d00f      	beq.n	230c4 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   230a4:	23a7      	movs	r3, #167	; 0xa7
   230a6:	005a      	lsls	r2, r3, #1
   230a8:	4910      	ldr	r1, [pc, #64]	; (230ec <nm_drv_init+0x158>)
   230aa:	4b11      	ldr	r3, [pc, #68]	; (230f0 <nm_drv_init+0x15c>)
   230ac:	0018      	movs	r0, r3
   230ae:	4b11      	ldr	r3, [pc, #68]	; (230f4 <nm_drv_init+0x160>)
   230b0:	4798      	blx	r3
   230b2:	4b1a      	ldr	r3, [pc, #104]	; (2311c <nm_drv_init+0x188>)
   230b4:	0018      	movs	r0, r3
   230b6:	4b0f      	ldr	r3, [pc, #60]	; (230f4 <nm_drv_init+0x160>)
   230b8:	4798      	blx	r3
   230ba:	4b10      	ldr	r3, [pc, #64]	; (230fc <nm_drv_init+0x168>)
   230bc:	0018      	movs	r0, r3
   230be:	4b0d      	ldr	r3, [pc, #52]	; (230f4 <nm_drv_init+0x160>)
   230c0:	4798      	blx	r3
		goto ERR2;
   230c2:	e007      	b.n	230d4 <nm_drv_init+0x140>
	}
	return ret;
   230c4:	230f      	movs	r3, #15
   230c6:	18fb      	adds	r3, r7, r3
   230c8:	781b      	ldrb	r3, [r3, #0]
   230ca:	b25b      	sxtb	r3, r3
   230cc:	e008      	b.n	230e0 <nm_drv_init+0x14c>
		goto ERR2;
   230ce:	46c0      	nop			; (mov r8, r8)
   230d0:	e000      	b.n	230d4 <nm_drv_init+0x140>
		goto ERR2;
   230d2:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   230d4:	4b12      	ldr	r3, [pc, #72]	; (23120 <nm_drv_init+0x18c>)
   230d6:	4798      	blx	r3
ERR1:
	return ret;
   230d8:	230f      	movs	r3, #15
   230da:	18fb      	adds	r3, r7, r3
   230dc:	781b      	ldrb	r3, [r3, #0]
   230de:	b25b      	sxtb	r3, r3
}
   230e0:	0018      	movs	r0, r3
   230e2:	46bd      	mov	sp, r7
   230e4:	b005      	add	sp, #20
   230e6:	bd90      	pop	{r4, r7, pc}
   230e8:	00022af5 	.word	0x00022af5
   230ec:	000389b8 	.word	0x000389b8
   230f0:	000388e8 	.word	0x000388e8
   230f4:	0001e189 	.word	0x0001e189
   230f8:	000388fc 	.word	0x000388fc
   230fc:	00038918 	.word	0x00038918
   23100:	0003891c 	.word	0x0003891c
   23104:	00022491 	.word	0x00022491
   23108:	00038928 	.word	0x00038928
   2310c:	000249ad 	.word	0x000249ad
   23110:	000227e9 	.word	0x000227e9
   23114:	00022981 	.word	0x00022981
   23118:	000223dd 	.word	0x000223dd
   2311c:	00038938 	.word	0x00038938
   23120:	00022b29 	.word	0x00022b29

00023124 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   23124:	b590      	push	{r4, r7, lr}
   23126:	b085      	sub	sp, #20
   23128:	af00      	add	r7, sp, #0
   2312a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   2312c:	230f      	movs	r3, #15
   2312e:	18fc      	adds	r4, r7, r3
   23130:	4b2e      	ldr	r3, [pc, #184]	; (231ec <nm_drv_deinit+0xc8>)
   23132:	4798      	blx	r3
   23134:	0003      	movs	r3, r0
   23136:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23138:	230f      	movs	r3, #15
   2313a:	18fb      	adds	r3, r7, r3
   2313c:	781b      	ldrb	r3, [r3, #0]
   2313e:	b25b      	sxtb	r3, r3
   23140:	2b00      	cmp	r3, #0
   23142:	d010      	beq.n	23166 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   23144:	2366      	movs	r3, #102	; 0x66
   23146:	33ff      	adds	r3, #255	; 0xff
   23148:	001a      	movs	r2, r3
   2314a:	4929      	ldr	r1, [pc, #164]	; (231f0 <nm_drv_deinit+0xcc>)
   2314c:	4b29      	ldr	r3, [pc, #164]	; (231f4 <nm_drv_deinit+0xd0>)
   2314e:	0018      	movs	r0, r3
   23150:	4b29      	ldr	r3, [pc, #164]	; (231f8 <nm_drv_deinit+0xd4>)
   23152:	4798      	blx	r3
   23154:	4b29      	ldr	r3, [pc, #164]	; (231fc <nm_drv_deinit+0xd8>)
   23156:	0018      	movs	r0, r3
   23158:	4b27      	ldr	r3, [pc, #156]	; (231f8 <nm_drv_deinit+0xd4>)
   2315a:	4798      	blx	r3
   2315c:	4b28      	ldr	r3, [pc, #160]	; (23200 <nm_drv_deinit+0xdc>)
   2315e:	0018      	movs	r0, r3
   23160:	4b25      	ldr	r3, [pc, #148]	; (231f8 <nm_drv_deinit+0xd4>)
   23162:	4798      	blx	r3
		goto ERR1;
   23164:	e03a      	b.n	231dc <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   23166:	230f      	movs	r3, #15
   23168:	18fc      	adds	r4, r7, r3
   2316a:	2000      	movs	r0, #0
   2316c:	4b25      	ldr	r3, [pc, #148]	; (23204 <nm_drv_deinit+0xe0>)
   2316e:	4798      	blx	r3
   23170:	0003      	movs	r3, r0
   23172:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23174:	230f      	movs	r3, #15
   23176:	18fb      	adds	r3, r7, r3
   23178:	781b      	ldrb	r3, [r3, #0]
   2317a:	b25b      	sxtb	r3, r3
   2317c:	2b00      	cmp	r3, #0
   2317e:	d00f      	beq.n	231a0 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   23180:	23b6      	movs	r3, #182	; 0xb6
   23182:	005a      	lsls	r2, r3, #1
   23184:	491a      	ldr	r1, [pc, #104]	; (231f0 <nm_drv_deinit+0xcc>)
   23186:	4b1b      	ldr	r3, [pc, #108]	; (231f4 <nm_drv_deinit+0xd0>)
   23188:	0018      	movs	r0, r3
   2318a:	4b1b      	ldr	r3, [pc, #108]	; (231f8 <nm_drv_deinit+0xd4>)
   2318c:	4798      	blx	r3
   2318e:	4b1e      	ldr	r3, [pc, #120]	; (23208 <nm_drv_deinit+0xe4>)
   23190:	0018      	movs	r0, r3
   23192:	4b19      	ldr	r3, [pc, #100]	; (231f8 <nm_drv_deinit+0xd4>)
   23194:	4798      	blx	r3
   23196:	4b1a      	ldr	r3, [pc, #104]	; (23200 <nm_drv_deinit+0xdc>)
   23198:	0018      	movs	r0, r3
   2319a:	4b17      	ldr	r3, [pc, #92]	; (231f8 <nm_drv_deinit+0xd4>)
   2319c:	4798      	blx	r3
		goto ERR1;
   2319e:	e01d      	b.n	231dc <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   231a0:	230f      	movs	r3, #15
   231a2:	18fc      	adds	r4, r7, r3
   231a4:	4b19      	ldr	r3, [pc, #100]	; (2320c <nm_drv_deinit+0xe8>)
   231a6:	4798      	blx	r3
   231a8:	0003      	movs	r3, r0
   231aa:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   231ac:	230f      	movs	r3, #15
   231ae:	18fb      	adds	r3, r7, r3
   231b0:	781b      	ldrb	r3, [r3, #0]
   231b2:	b25b      	sxtb	r3, r3
   231b4:	2b00      	cmp	r3, #0
   231b6:	d00f      	beq.n	231d8 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   231b8:	23b9      	movs	r3, #185	; 0xb9
   231ba:	005a      	lsls	r2, r3, #1
   231bc:	490c      	ldr	r1, [pc, #48]	; (231f0 <nm_drv_deinit+0xcc>)
   231be:	4b0d      	ldr	r3, [pc, #52]	; (231f4 <nm_drv_deinit+0xd0>)
   231c0:	0018      	movs	r0, r3
   231c2:	4b0d      	ldr	r3, [pc, #52]	; (231f8 <nm_drv_deinit+0xd4>)
   231c4:	4798      	blx	r3
   231c6:	4b12      	ldr	r3, [pc, #72]	; (23210 <nm_drv_deinit+0xec>)
   231c8:	0018      	movs	r0, r3
   231ca:	4b0b      	ldr	r3, [pc, #44]	; (231f8 <nm_drv_deinit+0xd4>)
   231cc:	4798      	blx	r3
   231ce:	4b0c      	ldr	r3, [pc, #48]	; (23200 <nm_drv_deinit+0xdc>)
   231d0:	0018      	movs	r0, r3
   231d2:	4b09      	ldr	r3, [pc, #36]	; (231f8 <nm_drv_deinit+0xd4>)
   231d4:	4798      	blx	r3
		goto ERR1;
   231d6:	e001      	b.n	231dc <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   231d8:	4b0e      	ldr	r3, [pc, #56]	; (23214 <nm_drv_deinit+0xf0>)
   231da:	4798      	blx	r3
#endif

ERR1:
	return ret;
   231dc:	230f      	movs	r3, #15
   231de:	18fb      	adds	r3, r7, r3
   231e0:	781b      	ldrb	r3, [r3, #0]
   231e2:	b25b      	sxtb	r3, r3
}
   231e4:	0018      	movs	r0, r3
   231e6:	46bd      	mov	sp, r7
   231e8:	b005      	add	sp, #20
   231ea:	bd90      	pop	{r4, r7, pc}
   231ec:	00022a35 	.word	0x00022a35
   231f0:	000389c4 	.word	0x000389c4
   231f4:	000388e8 	.word	0x000388e8
   231f8:	0001e189 	.word	0x0001e189
   231fc:	00038958 	.word	0x00038958
   23200:	00038918 	.word	0x00038918
   23204:	00025e55 	.word	0x00025e55
   23208:	00038978 	.word	0x00038978
   2320c:	00022b29 	.word	0x00022b29
   23210:	0003899c 	.word	0x0003899c
   23214:	00024af9 	.word	0x00024af9

00023218 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   23218:	b580      	push	{r7, lr}
   2321a:	b086      	sub	sp, #24
   2321c:	af00      	add	r7, sp, #0
   2321e:	6078      	str	r0, [r7, #4]
   23220:	000a      	movs	r2, r1
   23222:	1cbb      	adds	r3, r7, #2
   23224:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   23226:	230c      	movs	r3, #12
   23228:	18fb      	adds	r3, r7, r3
   2322a:	2200      	movs	r2, #0
   2322c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   2322e:	230c      	movs	r3, #12
   23230:	18fb      	adds	r3, r7, r3
   23232:	687a      	ldr	r2, [r7, #4]
   23234:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23236:	230c      	movs	r3, #12
   23238:	18fb      	adds	r3, r7, r3
   2323a:	1cba      	adds	r2, r7, #2
   2323c:	8812      	ldrh	r2, [r2, #0]
   2323e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23240:	230c      	movs	r3, #12
   23242:	18fb      	adds	r3, r7, r3
   23244:	0019      	movs	r1, r3
   23246:	2003      	movs	r0, #3
   23248:	4b03      	ldr	r3, [pc, #12]	; (23258 <nmi_spi_read+0x40>)
   2324a:	4798      	blx	r3
   2324c:	0003      	movs	r3, r0
}
   2324e:	0018      	movs	r0, r3
   23250:	46bd      	mov	sp, r7
   23252:	b006      	add	sp, #24
   23254:	bd80      	pop	{r7, pc}
   23256:	46c0      	nop			; (mov r8, r8)
   23258:	000209c5 	.word	0x000209c5

0002325c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   2325c:	b580      	push	{r7, lr}
   2325e:	b086      	sub	sp, #24
   23260:	af00      	add	r7, sp, #0
   23262:	6078      	str	r0, [r7, #4]
   23264:	000a      	movs	r2, r1
   23266:	1cbb      	adds	r3, r7, #2
   23268:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   2326a:	230c      	movs	r3, #12
   2326c:	18fb      	adds	r3, r7, r3
   2326e:	687a      	ldr	r2, [r7, #4]
   23270:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   23272:	230c      	movs	r3, #12
   23274:	18fb      	adds	r3, r7, r3
   23276:	2200      	movs	r2, #0
   23278:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2327a:	230c      	movs	r3, #12
   2327c:	18fb      	adds	r3, r7, r3
   2327e:	1cba      	adds	r2, r7, #2
   23280:	8812      	ldrh	r2, [r2, #0]
   23282:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23284:	230c      	movs	r3, #12
   23286:	18fb      	adds	r3, r7, r3
   23288:	0019      	movs	r1, r3
   2328a:	2003      	movs	r0, #3
   2328c:	4b03      	ldr	r3, [pc, #12]	; (2329c <nmi_spi_write+0x40>)
   2328e:	4798      	blx	r3
   23290:	0003      	movs	r3, r0
}
   23292:	0018      	movs	r0, r3
   23294:	46bd      	mov	sp, r7
   23296:	b006      	add	sp, #24
   23298:	bd80      	pop	{r7, pc}
   2329a:	46c0      	nop			; (mov r8, r8)
   2329c:	000209c5 	.word	0x000209c5

000232a0 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   232a0:	b580      	push	{r7, lr}
   232a2:	b088      	sub	sp, #32
   232a4:	af00      	add	r7, sp, #0
   232a6:	60f8      	str	r0, [r7, #12]
   232a8:	60b9      	str	r1, [r7, #8]
   232aa:	1dbb      	adds	r3, r7, #6
   232ac:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   232ae:	2314      	movs	r3, #20
   232b0:	18fb      	adds	r3, r7, r3
   232b2:	68fa      	ldr	r2, [r7, #12]
   232b4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   232b6:	2314      	movs	r3, #20
   232b8:	18fb      	adds	r3, r7, r3
   232ba:	68ba      	ldr	r2, [r7, #8]
   232bc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   232be:	2314      	movs	r3, #20
   232c0:	18fb      	adds	r3, r7, r3
   232c2:	1dba      	adds	r2, r7, #6
   232c4:	8812      	ldrh	r2, [r2, #0]
   232c6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   232c8:	2314      	movs	r3, #20
   232ca:	18fb      	adds	r3, r7, r3
   232cc:	0019      	movs	r1, r3
   232ce:	2003      	movs	r0, #3
   232d0:	4b03      	ldr	r3, [pc, #12]	; (232e0 <nmi_spi_rw+0x40>)
   232d2:	4798      	blx	r3
   232d4:	0003      	movs	r3, r0
}
   232d6:	0018      	movs	r0, r3
   232d8:	46bd      	mov	sp, r7
   232da:	b008      	add	sp, #32
   232dc:	bd80      	pop	{r7, pc}
   232de:	46c0      	nop			; (mov r8, r8)
   232e0:	000209c5 	.word	0x000209c5

000232e4 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   232e4:	b580      	push	{r7, lr}
   232e6:	b082      	sub	sp, #8
   232e8:	af00      	add	r7, sp, #0
   232ea:	0002      	movs	r2, r0
   232ec:	1dfb      	adds	r3, r7, #7
   232ee:	701a      	strb	r2, [r3, #0]
   232f0:	1dbb      	adds	r3, r7, #6
   232f2:	1c0a      	adds	r2, r1, #0
   232f4:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   232f6:	1dfb      	adds	r3, r7, #7
   232f8:	781b      	ldrb	r3, [r3, #0]
   232fa:	005a      	lsls	r2, r3, #1
   232fc:	1dbb      	adds	r3, r7, #6
   232fe:	781b      	ldrb	r3, [r3, #0]
   23300:	4053      	eors	r3, r2
   23302:	4a03      	ldr	r2, [pc, #12]	; (23310 <crc7_byte+0x2c>)
   23304:	5cd3      	ldrb	r3, [r2, r3]
}
   23306:	0018      	movs	r0, r3
   23308:	46bd      	mov	sp, r7
   2330a:	b002      	add	sp, #8
   2330c:	bd80      	pop	{r7, pc}
   2330e:	46c0      	nop			; (mov r8, r8)
   23310:	000389d4 	.word	0x000389d4

00023314 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   23314:	b590      	push	{r4, r7, lr}
   23316:	b085      	sub	sp, #20
   23318:	af00      	add	r7, sp, #0
   2331a:	60b9      	str	r1, [r7, #8]
   2331c:	607a      	str	r2, [r7, #4]
   2331e:	230f      	movs	r3, #15
   23320:	18fb      	adds	r3, r7, r3
   23322:	1c02      	adds	r2, r0, #0
   23324:	701a      	strb	r2, [r3, #0]
	while (len--)
   23326:	e00e      	b.n	23346 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   23328:	68bb      	ldr	r3, [r7, #8]
   2332a:	1c5a      	adds	r2, r3, #1
   2332c:	60ba      	str	r2, [r7, #8]
   2332e:	781a      	ldrb	r2, [r3, #0]
   23330:	230f      	movs	r3, #15
   23332:	18fc      	adds	r4, r7, r3
   23334:	230f      	movs	r3, #15
   23336:	18fb      	adds	r3, r7, r3
   23338:	781b      	ldrb	r3, [r3, #0]
   2333a:	0011      	movs	r1, r2
   2333c:	0018      	movs	r0, r3
   2333e:	4b08      	ldr	r3, [pc, #32]	; (23360 <crc7+0x4c>)
   23340:	4798      	blx	r3
   23342:	0003      	movs	r3, r0
   23344:	7023      	strb	r3, [r4, #0]
	while (len--)
   23346:	687b      	ldr	r3, [r7, #4]
   23348:	1e5a      	subs	r2, r3, #1
   2334a:	607a      	str	r2, [r7, #4]
   2334c:	2b00      	cmp	r3, #0
   2334e:	d1eb      	bne.n	23328 <crc7+0x14>
	return crc;
   23350:	230f      	movs	r3, #15
   23352:	18fb      	adds	r3, r7, r3
   23354:	781b      	ldrb	r3, [r3, #0]
}
   23356:	0018      	movs	r0, r3
   23358:	46bd      	mov	sp, r7
   2335a:	b005      	add	sp, #20
   2335c:	bd90      	pop	{r4, r7, pc}
   2335e:	46c0      	nop			; (mov r8, r8)
   23360:	000232e5 	.word	0x000232e5

00023364 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   23364:	b590      	push	{r4, r7, lr}
   23366:	b089      	sub	sp, #36	; 0x24
   23368:	af00      	add	r7, sp, #0
   2336a:	60b9      	str	r1, [r7, #8]
   2336c:	607a      	str	r2, [r7, #4]
   2336e:	603b      	str	r3, [r7, #0]
   23370:	230f      	movs	r3, #15
   23372:	18fb      	adds	r3, r7, r3
   23374:	1c02      	adds	r2, r0, #0
   23376:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   23378:	231f      	movs	r3, #31
   2337a:	18fb      	adds	r3, r7, r3
   2337c:	2205      	movs	r2, #5
   2337e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23380:	231e      	movs	r3, #30
   23382:	18fb      	adds	r3, r7, r3
   23384:	2201      	movs	r2, #1
   23386:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   23388:	2314      	movs	r3, #20
   2338a:	18fb      	adds	r3, r7, r3
   2338c:	220f      	movs	r2, #15
   2338e:	18ba      	adds	r2, r7, r2
   23390:	7812      	ldrb	r2, [r2, #0]
   23392:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23394:	230f      	movs	r3, #15
   23396:	18fb      	adds	r3, r7, r3
   23398:	781b      	ldrb	r3, [r3, #0]
   2339a:	3bc1      	subs	r3, #193	; 0xc1
   2339c:	2b0e      	cmp	r3, #14
   2339e:	d900      	bls.n	233a2 <spi_cmd+0x3e>
   233a0:	e11b      	b.n	235da <spi_cmd+0x276>
   233a2:	009a      	lsls	r2, r3, #2
   233a4:	4bb6      	ldr	r3, [pc, #728]	; (23680 <spi_cmd+0x31c>)
   233a6:	18d3      	adds	r3, r2, r3
   233a8:	681b      	ldr	r3, [r3, #0]
   233aa:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   233ac:	68bb      	ldr	r3, [r7, #8]
   233ae:	0c1b      	lsrs	r3, r3, #16
   233b0:	b2da      	uxtb	r2, r3
   233b2:	2314      	movs	r3, #20
   233b4:	18fb      	adds	r3, r7, r3
   233b6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   233b8:	68bb      	ldr	r3, [r7, #8]
   233ba:	0a1b      	lsrs	r3, r3, #8
   233bc:	b2da      	uxtb	r2, r3
   233be:	2314      	movs	r3, #20
   233c0:	18fb      	adds	r3, r7, r3
   233c2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   233c4:	68bb      	ldr	r3, [r7, #8]
   233c6:	b2da      	uxtb	r2, r3
   233c8:	2314      	movs	r3, #20
   233ca:	18fb      	adds	r3, r7, r3
   233cc:	70da      	strb	r2, [r3, #3]
		len = 5;
   233ce:	231f      	movs	r3, #31
   233d0:	18fb      	adds	r3, r7, r3
   233d2:	2205      	movs	r2, #5
   233d4:	701a      	strb	r2, [r3, #0]
		break;
   233d6:	e105      	b.n	235e4 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   233d8:	68bb      	ldr	r3, [r7, #8]
   233da:	0a1b      	lsrs	r3, r3, #8
   233dc:	b2da      	uxtb	r2, r3
   233de:	2314      	movs	r3, #20
   233e0:	18fb      	adds	r3, r7, r3
   233e2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   233e4:	2330      	movs	r3, #48	; 0x30
   233e6:	18fb      	adds	r3, r7, r3
   233e8:	781b      	ldrb	r3, [r3, #0]
   233ea:	2b00      	cmp	r3, #0
   233ec:	d009      	beq.n	23402 <spi_cmd+0x9e>
   233ee:	2314      	movs	r3, #20
   233f0:	18fb      	adds	r3, r7, r3
   233f2:	785b      	ldrb	r3, [r3, #1]
   233f4:	2280      	movs	r2, #128	; 0x80
   233f6:	4252      	negs	r2, r2
   233f8:	4313      	orrs	r3, r2
   233fa:	b2da      	uxtb	r2, r3
   233fc:	2314      	movs	r3, #20
   233fe:	18fb      	adds	r3, r7, r3
   23400:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   23402:	68bb      	ldr	r3, [r7, #8]
   23404:	b2da      	uxtb	r2, r3
   23406:	2314      	movs	r3, #20
   23408:	18fb      	adds	r3, r7, r3
   2340a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2340c:	2314      	movs	r3, #20
   2340e:	18fb      	adds	r3, r7, r3
   23410:	2200      	movs	r2, #0
   23412:	70da      	strb	r2, [r3, #3]
		len = 5;
   23414:	231f      	movs	r3, #31
   23416:	18fb      	adds	r3, r7, r3
   23418:	2205      	movs	r2, #5
   2341a:	701a      	strb	r2, [r3, #0]
		break;
   2341c:	e0e2      	b.n	235e4 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   2341e:	2314      	movs	r3, #20
   23420:	18fb      	adds	r3, r7, r3
   23422:	2200      	movs	r2, #0
   23424:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   23426:	2314      	movs	r3, #20
   23428:	18fb      	adds	r3, r7, r3
   2342a:	2200      	movs	r2, #0
   2342c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2342e:	2314      	movs	r3, #20
   23430:	18fb      	adds	r3, r7, r3
   23432:	2200      	movs	r2, #0
   23434:	70da      	strb	r2, [r3, #3]
		len = 5;
   23436:	231f      	movs	r3, #31
   23438:	18fb      	adds	r3, r7, r3
   2343a:	2205      	movs	r2, #5
   2343c:	701a      	strb	r2, [r3, #0]
		break;
   2343e:	e0d1      	b.n	235e4 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   23440:	2314      	movs	r3, #20
   23442:	18fb      	adds	r3, r7, r3
   23444:	2200      	movs	r2, #0
   23446:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   23448:	2314      	movs	r3, #20
   2344a:	18fb      	adds	r3, r7, r3
   2344c:	2200      	movs	r2, #0
   2344e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   23450:	2314      	movs	r3, #20
   23452:	18fb      	adds	r3, r7, r3
   23454:	2200      	movs	r2, #0
   23456:	70da      	strb	r2, [r3, #3]
		len = 5;
   23458:	231f      	movs	r3, #31
   2345a:	18fb      	adds	r3, r7, r3
   2345c:	2205      	movs	r2, #5
   2345e:	701a      	strb	r2, [r3, #0]
		break;
   23460:	e0c0      	b.n	235e4 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   23462:	2314      	movs	r3, #20
   23464:	18fb      	adds	r3, r7, r3
   23466:	22ff      	movs	r2, #255	; 0xff
   23468:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   2346a:	2314      	movs	r3, #20
   2346c:	18fb      	adds	r3, r7, r3
   2346e:	22ff      	movs	r2, #255	; 0xff
   23470:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   23472:	2314      	movs	r3, #20
   23474:	18fb      	adds	r3, r7, r3
   23476:	22ff      	movs	r2, #255	; 0xff
   23478:	70da      	strb	r2, [r3, #3]
		len = 5;
   2347a:	231f      	movs	r3, #31
   2347c:	18fb      	adds	r3, r7, r3
   2347e:	2205      	movs	r2, #5
   23480:	701a      	strb	r2, [r3, #0]
		break;
   23482:	e0af      	b.n	235e4 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   23484:	68bb      	ldr	r3, [r7, #8]
   23486:	0c1b      	lsrs	r3, r3, #16
   23488:	b2da      	uxtb	r2, r3
   2348a:	2314      	movs	r3, #20
   2348c:	18fb      	adds	r3, r7, r3
   2348e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23490:	68bb      	ldr	r3, [r7, #8]
   23492:	0a1b      	lsrs	r3, r3, #8
   23494:	b2da      	uxtb	r2, r3
   23496:	2314      	movs	r3, #20
   23498:	18fb      	adds	r3, r7, r3
   2349a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2349c:	68bb      	ldr	r3, [r7, #8]
   2349e:	b2da      	uxtb	r2, r3
   234a0:	2314      	movs	r3, #20
   234a2:	18fb      	adds	r3, r7, r3
   234a4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   234a6:	683b      	ldr	r3, [r7, #0]
   234a8:	0a1b      	lsrs	r3, r3, #8
   234aa:	b2da      	uxtb	r2, r3
   234ac:	2314      	movs	r3, #20
   234ae:	18fb      	adds	r3, r7, r3
   234b0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   234b2:	683b      	ldr	r3, [r7, #0]
   234b4:	b2da      	uxtb	r2, r3
   234b6:	2314      	movs	r3, #20
   234b8:	18fb      	adds	r3, r7, r3
   234ba:	715a      	strb	r2, [r3, #5]
		len = 7;
   234bc:	231f      	movs	r3, #31
   234be:	18fb      	adds	r3, r7, r3
   234c0:	2207      	movs	r2, #7
   234c2:	701a      	strb	r2, [r3, #0]
		break;
   234c4:	e08e      	b.n	235e4 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   234c6:	68bb      	ldr	r3, [r7, #8]
   234c8:	0c1b      	lsrs	r3, r3, #16
   234ca:	b2da      	uxtb	r2, r3
   234cc:	2314      	movs	r3, #20
   234ce:	18fb      	adds	r3, r7, r3
   234d0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   234d2:	68bb      	ldr	r3, [r7, #8]
   234d4:	0a1b      	lsrs	r3, r3, #8
   234d6:	b2da      	uxtb	r2, r3
   234d8:	2314      	movs	r3, #20
   234da:	18fb      	adds	r3, r7, r3
   234dc:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   234de:	68bb      	ldr	r3, [r7, #8]
   234e0:	b2da      	uxtb	r2, r3
   234e2:	2314      	movs	r3, #20
   234e4:	18fb      	adds	r3, r7, r3
   234e6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   234e8:	683b      	ldr	r3, [r7, #0]
   234ea:	0c1b      	lsrs	r3, r3, #16
   234ec:	b2da      	uxtb	r2, r3
   234ee:	2314      	movs	r3, #20
   234f0:	18fb      	adds	r3, r7, r3
   234f2:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   234f4:	683b      	ldr	r3, [r7, #0]
   234f6:	0a1b      	lsrs	r3, r3, #8
   234f8:	b2da      	uxtb	r2, r3
   234fa:	2314      	movs	r3, #20
   234fc:	18fb      	adds	r3, r7, r3
   234fe:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   23500:	683b      	ldr	r3, [r7, #0]
   23502:	b2da      	uxtb	r2, r3
   23504:	2314      	movs	r3, #20
   23506:	18fb      	adds	r3, r7, r3
   23508:	719a      	strb	r2, [r3, #6]
		len = 8;
   2350a:	231f      	movs	r3, #31
   2350c:	18fb      	adds	r3, r7, r3
   2350e:	2208      	movs	r2, #8
   23510:	701a      	strb	r2, [r3, #0]
		break;
   23512:	e067      	b.n	235e4 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   23514:	68bb      	ldr	r3, [r7, #8]
   23516:	0a1b      	lsrs	r3, r3, #8
   23518:	b2da      	uxtb	r2, r3
   2351a:	2314      	movs	r3, #20
   2351c:	18fb      	adds	r3, r7, r3
   2351e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   23520:	2330      	movs	r3, #48	; 0x30
   23522:	18fb      	adds	r3, r7, r3
   23524:	781b      	ldrb	r3, [r3, #0]
   23526:	2b00      	cmp	r3, #0
   23528:	d009      	beq.n	2353e <spi_cmd+0x1da>
   2352a:	2314      	movs	r3, #20
   2352c:	18fb      	adds	r3, r7, r3
   2352e:	785b      	ldrb	r3, [r3, #1]
   23530:	2280      	movs	r2, #128	; 0x80
   23532:	4252      	negs	r2, r2
   23534:	4313      	orrs	r3, r2
   23536:	b2da      	uxtb	r2, r3
   23538:	2314      	movs	r3, #20
   2353a:	18fb      	adds	r3, r7, r3
   2353c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   2353e:	68bb      	ldr	r3, [r7, #8]
   23540:	b2da      	uxtb	r2, r3
   23542:	2314      	movs	r3, #20
   23544:	18fb      	adds	r3, r7, r3
   23546:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   23548:	687b      	ldr	r3, [r7, #4]
   2354a:	0e1b      	lsrs	r3, r3, #24
   2354c:	b2da      	uxtb	r2, r3
   2354e:	2314      	movs	r3, #20
   23550:	18fb      	adds	r3, r7, r3
   23552:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   23554:	687b      	ldr	r3, [r7, #4]
   23556:	0c1b      	lsrs	r3, r3, #16
   23558:	b2da      	uxtb	r2, r3
   2355a:	2314      	movs	r3, #20
   2355c:	18fb      	adds	r3, r7, r3
   2355e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   23560:	687b      	ldr	r3, [r7, #4]
   23562:	0a1b      	lsrs	r3, r3, #8
   23564:	b2da      	uxtb	r2, r3
   23566:	2314      	movs	r3, #20
   23568:	18fb      	adds	r3, r7, r3
   2356a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   2356c:	687b      	ldr	r3, [r7, #4]
   2356e:	b2da      	uxtb	r2, r3
   23570:	2314      	movs	r3, #20
   23572:	18fb      	adds	r3, r7, r3
   23574:	719a      	strb	r2, [r3, #6]
		len = 8;
   23576:	231f      	movs	r3, #31
   23578:	18fb      	adds	r3, r7, r3
   2357a:	2208      	movs	r2, #8
   2357c:	701a      	strb	r2, [r3, #0]
		break;
   2357e:	e031      	b.n	235e4 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   23580:	68bb      	ldr	r3, [r7, #8]
   23582:	0c1b      	lsrs	r3, r3, #16
   23584:	b2da      	uxtb	r2, r3
   23586:	2314      	movs	r3, #20
   23588:	18fb      	adds	r3, r7, r3
   2358a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2358c:	68bb      	ldr	r3, [r7, #8]
   2358e:	0a1b      	lsrs	r3, r3, #8
   23590:	b2da      	uxtb	r2, r3
   23592:	2314      	movs	r3, #20
   23594:	18fb      	adds	r3, r7, r3
   23596:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   23598:	68bb      	ldr	r3, [r7, #8]
   2359a:	b2da      	uxtb	r2, r3
   2359c:	2314      	movs	r3, #20
   2359e:	18fb      	adds	r3, r7, r3
   235a0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   235a2:	687b      	ldr	r3, [r7, #4]
   235a4:	0e1b      	lsrs	r3, r3, #24
   235a6:	b2da      	uxtb	r2, r3
   235a8:	2314      	movs	r3, #20
   235aa:	18fb      	adds	r3, r7, r3
   235ac:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   235ae:	687b      	ldr	r3, [r7, #4]
   235b0:	0c1b      	lsrs	r3, r3, #16
   235b2:	b2da      	uxtb	r2, r3
   235b4:	2314      	movs	r3, #20
   235b6:	18fb      	adds	r3, r7, r3
   235b8:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   235ba:	687b      	ldr	r3, [r7, #4]
   235bc:	0a1b      	lsrs	r3, r3, #8
   235be:	b2da      	uxtb	r2, r3
   235c0:	2314      	movs	r3, #20
   235c2:	18fb      	adds	r3, r7, r3
   235c4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   235c6:	687b      	ldr	r3, [r7, #4]
   235c8:	b2da      	uxtb	r2, r3
   235ca:	2314      	movs	r3, #20
   235cc:	18fb      	adds	r3, r7, r3
   235ce:	71da      	strb	r2, [r3, #7]
		len = 9;
   235d0:	231f      	movs	r3, #31
   235d2:	18fb      	adds	r3, r7, r3
   235d4:	2209      	movs	r2, #9
   235d6:	701a      	strb	r2, [r3, #0]
		break;
   235d8:	e004      	b.n	235e4 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   235da:	231e      	movs	r3, #30
   235dc:	18fb      	adds	r3, r7, r3
   235de:	2200      	movs	r2, #0
   235e0:	701a      	strb	r2, [r3, #0]
		break;
   235e2:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   235e4:	231e      	movs	r3, #30
   235e6:	18fb      	adds	r3, r7, r3
   235e8:	781b      	ldrb	r3, [r3, #0]
   235ea:	b25b      	sxtb	r3, r3
   235ec:	2b00      	cmp	r3, #0
   235ee:	d03f      	beq.n	23670 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   235f0:	4b24      	ldr	r3, [pc, #144]	; (23684 <spi_cmd+0x320>)
   235f2:	781b      	ldrb	r3, [r3, #0]
   235f4:	2b00      	cmp	r3, #0
   235f6:	d115      	bne.n	23624 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   235f8:	231f      	movs	r3, #31
   235fa:	18fb      	adds	r3, r7, r3
   235fc:	781b      	ldrb	r3, [r3, #0]
   235fe:	1e5c      	subs	r4, r3, #1
   23600:	231f      	movs	r3, #31
   23602:	18fb      	adds	r3, r7, r3
   23604:	781b      	ldrb	r3, [r3, #0]
   23606:	3b01      	subs	r3, #1
   23608:	001a      	movs	r2, r3
   2360a:	2314      	movs	r3, #20
   2360c:	18fb      	adds	r3, r7, r3
   2360e:	0019      	movs	r1, r3
   23610:	207f      	movs	r0, #127	; 0x7f
   23612:	4b1d      	ldr	r3, [pc, #116]	; (23688 <spi_cmd+0x324>)
   23614:	4798      	blx	r3
   23616:	0003      	movs	r3, r0
   23618:	18db      	adds	r3, r3, r3
   2361a:	b2da      	uxtb	r2, r3
   2361c:	2314      	movs	r3, #20
   2361e:	18fb      	adds	r3, r7, r3
   23620:	551a      	strb	r2, [r3, r4]
   23622:	e006      	b.n	23632 <spi_cmd+0x2ce>
		else
			len-=1;
   23624:	231f      	movs	r3, #31
   23626:	18fb      	adds	r3, r7, r3
   23628:	221f      	movs	r2, #31
   2362a:	18ba      	adds	r2, r7, r2
   2362c:	7812      	ldrb	r2, [r2, #0]
   2362e:	3a01      	subs	r2, #1
   23630:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   23632:	231f      	movs	r3, #31
   23634:	18fb      	adds	r3, r7, r3
   23636:	781b      	ldrb	r3, [r3, #0]
   23638:	b29a      	uxth	r2, r3
   2363a:	2314      	movs	r3, #20
   2363c:	18fb      	adds	r3, r7, r3
   2363e:	0011      	movs	r1, r2
   23640:	0018      	movs	r0, r3
   23642:	4b12      	ldr	r3, [pc, #72]	; (2368c <spi_cmd+0x328>)
   23644:	4798      	blx	r3
   23646:	1e03      	subs	r3, r0, #0
   23648:	d012      	beq.n	23670 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2364a:	2390      	movs	r3, #144	; 0x90
   2364c:	005a      	lsls	r2, r3, #1
   2364e:	4910      	ldr	r1, [pc, #64]	; (23690 <spi_cmd+0x32c>)
   23650:	4b10      	ldr	r3, [pc, #64]	; (23694 <spi_cmd+0x330>)
   23652:	0018      	movs	r0, r3
   23654:	4b10      	ldr	r3, [pc, #64]	; (23698 <spi_cmd+0x334>)
   23656:	4798      	blx	r3
   23658:	4b10      	ldr	r3, [pc, #64]	; (2369c <spi_cmd+0x338>)
   2365a:	0018      	movs	r0, r3
   2365c:	4b0e      	ldr	r3, [pc, #56]	; (23698 <spi_cmd+0x334>)
   2365e:	4798      	blx	r3
   23660:	4b0f      	ldr	r3, [pc, #60]	; (236a0 <spi_cmd+0x33c>)
   23662:	0018      	movs	r0, r3
   23664:	4b0c      	ldr	r3, [pc, #48]	; (23698 <spi_cmd+0x334>)
   23666:	4798      	blx	r3
			result = N_FAIL;
   23668:	231e      	movs	r3, #30
   2366a:	18fb      	adds	r3, r7, r3
   2366c:	2200      	movs	r2, #0
   2366e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   23670:	231e      	movs	r3, #30
   23672:	18fb      	adds	r3, r7, r3
   23674:	781b      	ldrb	r3, [r3, #0]
   23676:	b25b      	sxtb	r3, r3
}
   23678:	0018      	movs	r0, r3
   2367a:	46bd      	mov	sp, r7
   2367c:	b009      	add	sp, #36	; 0x24
   2367e:	bd90      	pop	{r4, r7, pc}
   23680:	0003904c 	.word	0x0003904c
   23684:	20003e9c 	.word	0x20003e9c
   23688:	00023315 	.word	0x00023315
   2368c:	0002325d 	.word	0x0002325d
   23690:	000390c4 	.word	0x000390c4
   23694:	00038ad4 	.word	0x00038ad4
   23698:	0001e189 	.word	0x0001e189
   2369c:	00038ae8 	.word	0x00038ae8
   236a0:	00038b14 	.word	0x00038b14

000236a4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   236a4:	b590      	push	{r4, r7, lr}
   236a6:	b085      	sub	sp, #20
   236a8:	af00      	add	r7, sp, #0
   236aa:	0002      	movs	r2, r0
   236ac:	1dfb      	adds	r3, r7, #7
   236ae:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   236b0:	230e      	movs	r3, #14
   236b2:	18fb      	adds	r3, r7, r3
   236b4:	2201      	movs	r2, #1
   236b6:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   236b8:	4b32      	ldr	r3, [pc, #200]	; (23784 <spi_data_rsp+0xe0>)
   236ba:	781b      	ldrb	r3, [r3, #0]
   236bc:	2b00      	cmp	r3, #0
   236be:	d104      	bne.n	236ca <spi_data_rsp+0x26>
		len = 2;
   236c0:	230f      	movs	r3, #15
   236c2:	18fb      	adds	r3, r7, r3
   236c4:	2202      	movs	r2, #2
   236c6:	701a      	strb	r2, [r3, #0]
   236c8:	e003      	b.n	236d2 <spi_data_rsp+0x2e>
	else
		len = 3;
   236ca:	230f      	movs	r3, #15
   236cc:	18fb      	adds	r3, r7, r3
   236ce:	2203      	movs	r2, #3
   236d0:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   236d2:	230f      	movs	r3, #15
   236d4:	18fb      	adds	r3, r7, r3
   236d6:	781b      	ldrb	r3, [r3, #0]
   236d8:	b29a      	uxth	r2, r3
   236da:	2308      	movs	r3, #8
   236dc:	18fb      	adds	r3, r7, r3
   236de:	0011      	movs	r1, r2
   236e0:	0018      	movs	r0, r3
   236e2:	4b29      	ldr	r3, [pc, #164]	; (23788 <spi_data_rsp+0xe4>)
   236e4:	4798      	blx	r3
   236e6:	1e03      	subs	r3, r0, #0
   236e8:	d013      	beq.n	23712 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   236ea:	239a      	movs	r3, #154	; 0x9a
   236ec:	005a      	lsls	r2, r3, #1
   236ee:	4927      	ldr	r1, [pc, #156]	; (2378c <spi_data_rsp+0xe8>)
   236f0:	4b27      	ldr	r3, [pc, #156]	; (23790 <spi_data_rsp+0xec>)
   236f2:	0018      	movs	r0, r3
   236f4:	4b27      	ldr	r3, [pc, #156]	; (23794 <spi_data_rsp+0xf0>)
   236f6:	4798      	blx	r3
   236f8:	4b27      	ldr	r3, [pc, #156]	; (23798 <spi_data_rsp+0xf4>)
   236fa:	0018      	movs	r0, r3
   236fc:	4b25      	ldr	r3, [pc, #148]	; (23794 <spi_data_rsp+0xf0>)
   236fe:	4798      	blx	r3
   23700:	4b26      	ldr	r3, [pc, #152]	; (2379c <spi_data_rsp+0xf8>)
   23702:	0018      	movs	r0, r3
   23704:	4b23      	ldr	r3, [pc, #140]	; (23794 <spi_data_rsp+0xf0>)
   23706:	4798      	blx	r3
		result = N_FAIL;
   23708:	230e      	movs	r3, #14
   2370a:	18fb      	adds	r3, r7, r3
   2370c:	2200      	movs	r2, #0
   2370e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   23710:	e030      	b.n	23774 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   23712:	230f      	movs	r3, #15
   23714:	18fb      	adds	r3, r7, r3
   23716:	781b      	ldrb	r3, [r3, #0]
   23718:	3b01      	subs	r3, #1
   2371a:	2208      	movs	r2, #8
   2371c:	18ba      	adds	r2, r7, r2
   2371e:	5cd3      	ldrb	r3, [r2, r3]
   23720:	2b00      	cmp	r3, #0
   23722:	d108      	bne.n	23736 <spi_data_rsp+0x92>
   23724:	230f      	movs	r3, #15
   23726:	18fb      	adds	r3, r7, r3
   23728:	781b      	ldrb	r3, [r3, #0]
   2372a:	3b02      	subs	r3, #2
   2372c:	2208      	movs	r2, #8
   2372e:	18ba      	adds	r2, r7, r2
   23730:	5cd3      	ldrb	r3, [r2, r3]
   23732:	2bc3      	cmp	r3, #195	; 0xc3
   23734:	d01e      	beq.n	23774 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   23736:	233c      	movs	r3, #60	; 0x3c
   23738:	33ff      	adds	r3, #255	; 0xff
   2373a:	001a      	movs	r2, r3
   2373c:	4913      	ldr	r1, [pc, #76]	; (2378c <spi_data_rsp+0xe8>)
   2373e:	4b14      	ldr	r3, [pc, #80]	; (23790 <spi_data_rsp+0xec>)
   23740:	0018      	movs	r0, r3
   23742:	4b14      	ldr	r3, [pc, #80]	; (23794 <spi_data_rsp+0xf0>)
   23744:	4798      	blx	r3
   23746:	2308      	movs	r3, #8
   23748:	18fb      	adds	r3, r7, r3
   2374a:	781b      	ldrb	r3, [r3, #0]
   2374c:	0019      	movs	r1, r3
   2374e:	2308      	movs	r3, #8
   23750:	18fb      	adds	r3, r7, r3
   23752:	785b      	ldrb	r3, [r3, #1]
   23754:	001a      	movs	r2, r3
   23756:	2308      	movs	r3, #8
   23758:	18fb      	adds	r3, r7, r3
   2375a:	789b      	ldrb	r3, [r3, #2]
   2375c:	4810      	ldr	r0, [pc, #64]	; (237a0 <spi_data_rsp+0xfc>)
   2375e:	4c0d      	ldr	r4, [pc, #52]	; (23794 <spi_data_rsp+0xf0>)
   23760:	47a0      	blx	r4
   23762:	4b0e      	ldr	r3, [pc, #56]	; (2379c <spi_data_rsp+0xf8>)
   23764:	0018      	movs	r0, r3
   23766:	4b0b      	ldr	r3, [pc, #44]	; (23794 <spi_data_rsp+0xf0>)
   23768:	4798      	blx	r3
		result = N_FAIL;
   2376a:	230e      	movs	r3, #14
   2376c:	18fb      	adds	r3, r7, r3
   2376e:	2200      	movs	r2, #0
   23770:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   23772:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   23774:	230e      	movs	r3, #14
   23776:	18fb      	adds	r3, r7, r3
   23778:	781b      	ldrb	r3, [r3, #0]
   2377a:	b25b      	sxtb	r3, r3
}
   2377c:	0018      	movs	r0, r3
   2377e:	46bd      	mov	sp, r7
   23780:	b005      	add	sp, #20
   23782:	bd90      	pop	{r4, r7, pc}
   23784:	20003e9c 	.word	0x20003e9c
   23788:	00023219 	.word	0x00023219
   2378c:	000390cc 	.word	0x000390cc
   23790:	00038ad4 	.word	0x00038ad4
   23794:	0001e189 	.word	0x0001e189
   23798:	00038b18 	.word	0x00038b18
   2379c:	00038b14 	.word	0x00038b14
   237a0:	00038b38 	.word	0x00038b38

000237a4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   237a4:	b580      	push	{r7, lr}
   237a6:	b084      	sub	sp, #16
   237a8:	af00      	add	r7, sp, #0
   237aa:	0002      	movs	r2, r0
   237ac:	1dfb      	adds	r3, r7, #7
   237ae:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   237b0:	230f      	movs	r3, #15
   237b2:	18fb      	adds	r3, r7, r3
   237b4:	2201      	movs	r2, #1
   237b6:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   237b8:	1dfb      	adds	r3, r7, #7
   237ba:	781b      	ldrb	r3, [r3, #0]
   237bc:	2bcf      	cmp	r3, #207	; 0xcf
   237be:	d007      	beq.n	237d0 <spi_cmd_rsp+0x2c>
   237c0:	1dfb      	adds	r3, r7, #7
   237c2:	781b      	ldrb	r3, [r3, #0]
   237c4:	2bc5      	cmp	r3, #197	; 0xc5
   237c6:	d003      	beq.n	237d0 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   237c8:	1dfb      	adds	r3, r7, #7
   237ca:	781b      	ldrb	r3, [r3, #0]
   237cc:	2bc6      	cmp	r3, #198	; 0xc6
   237ce:	d10c      	bne.n	237ea <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   237d0:	230d      	movs	r3, #13
   237d2:	18fb      	adds	r3, r7, r3
   237d4:	2101      	movs	r1, #1
   237d6:	0018      	movs	r0, r3
   237d8:	4b3b      	ldr	r3, [pc, #236]	; (238c8 <spi_cmd_rsp+0x124>)
   237da:	4798      	blx	r3
   237dc:	1e03      	subs	r3, r0, #0
   237de:	d004      	beq.n	237ea <spi_cmd_rsp+0x46>
			result = N_FAIL;
   237e0:	230f      	movs	r3, #15
   237e2:	18fb      	adds	r3, r7, r3
   237e4:	2200      	movs	r2, #0
   237e6:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   237e8:	e065      	b.n	238b6 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   237ea:	230e      	movs	r3, #14
   237ec:	18fb      	adds	r3, r7, r3
   237ee:	220a      	movs	r2, #10
   237f0:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   237f2:	230d      	movs	r3, #13
   237f4:	18fb      	adds	r3, r7, r3
   237f6:	2101      	movs	r1, #1
   237f8:	0018      	movs	r0, r3
   237fa:	4b33      	ldr	r3, [pc, #204]	; (238c8 <spi_cmd_rsp+0x124>)
   237fc:	4798      	blx	r3
   237fe:	1e03      	subs	r3, r0, #0
   23800:	d014      	beq.n	2382c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   23802:	235c      	movs	r3, #92	; 0x5c
   23804:	33ff      	adds	r3, #255	; 0xff
   23806:	001a      	movs	r2, r3
   23808:	4930      	ldr	r1, [pc, #192]	; (238cc <spi_cmd_rsp+0x128>)
   2380a:	4b31      	ldr	r3, [pc, #196]	; (238d0 <spi_cmd_rsp+0x12c>)
   2380c:	0018      	movs	r0, r3
   2380e:	4b31      	ldr	r3, [pc, #196]	; (238d4 <spi_cmd_rsp+0x130>)
   23810:	4798      	blx	r3
   23812:	4b31      	ldr	r3, [pc, #196]	; (238d8 <spi_cmd_rsp+0x134>)
   23814:	0018      	movs	r0, r3
   23816:	4b2f      	ldr	r3, [pc, #188]	; (238d4 <spi_cmd_rsp+0x130>)
   23818:	4798      	blx	r3
   2381a:	4b30      	ldr	r3, [pc, #192]	; (238dc <spi_cmd_rsp+0x138>)
   2381c:	0018      	movs	r0, r3
   2381e:	4b2d      	ldr	r3, [pc, #180]	; (238d4 <spi_cmd_rsp+0x130>)
   23820:	4798      	blx	r3
			result = N_FAIL;
   23822:	230f      	movs	r3, #15
   23824:	18fb      	adds	r3, r7, r3
   23826:	2200      	movs	r2, #0
   23828:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2382a:	e044      	b.n	238b6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   2382c:	230d      	movs	r3, #13
   2382e:	18fb      	adds	r3, r7, r3
   23830:	781b      	ldrb	r3, [r3, #0]
   23832:	1dfa      	adds	r2, r7, #7
   23834:	7812      	ldrb	r2, [r2, #0]
   23836:	429a      	cmp	r2, r3
   23838:	d00b      	beq.n	23852 <spi_cmd_rsp+0xae>
   2383a:	230e      	movs	r3, #14
   2383c:	18fb      	adds	r3, r7, r3
   2383e:	781b      	ldrb	r3, [r3, #0]
   23840:	b25b      	sxtb	r3, r3
   23842:	b2da      	uxtb	r2, r3
   23844:	3a01      	subs	r2, #1
   23846:	b2d1      	uxtb	r1, r2
   23848:	220e      	movs	r2, #14
   2384a:	18ba      	adds	r2, r7, r2
   2384c:	7011      	strb	r1, [r2, #0]
   2384e:	2b00      	cmp	r3, #0
   23850:	dccf      	bgt.n	237f2 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   23852:	230e      	movs	r3, #14
   23854:	18fb      	adds	r3, r7, r3
   23856:	220a      	movs	r2, #10
   23858:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2385a:	230d      	movs	r3, #13
   2385c:	18fb      	adds	r3, r7, r3
   2385e:	2101      	movs	r1, #1
   23860:	0018      	movs	r0, r3
   23862:	4b19      	ldr	r3, [pc, #100]	; (238c8 <spi_cmd_rsp+0x124>)
   23864:	4798      	blx	r3
   23866:	1e03      	subs	r3, r0, #0
   23868:	d014      	beq.n	23894 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2386a:	236a      	movs	r3, #106	; 0x6a
   2386c:	33ff      	adds	r3, #255	; 0xff
   2386e:	001a      	movs	r2, r3
   23870:	4916      	ldr	r1, [pc, #88]	; (238cc <spi_cmd_rsp+0x128>)
   23872:	4b17      	ldr	r3, [pc, #92]	; (238d0 <spi_cmd_rsp+0x12c>)
   23874:	0018      	movs	r0, r3
   23876:	4b17      	ldr	r3, [pc, #92]	; (238d4 <spi_cmd_rsp+0x130>)
   23878:	4798      	blx	r3
   2387a:	4b17      	ldr	r3, [pc, #92]	; (238d8 <spi_cmd_rsp+0x134>)
   2387c:	0018      	movs	r0, r3
   2387e:	4b15      	ldr	r3, [pc, #84]	; (238d4 <spi_cmd_rsp+0x130>)
   23880:	4798      	blx	r3
   23882:	4b16      	ldr	r3, [pc, #88]	; (238dc <spi_cmd_rsp+0x138>)
   23884:	0018      	movs	r0, r3
   23886:	4b13      	ldr	r3, [pc, #76]	; (238d4 <spi_cmd_rsp+0x130>)
   23888:	4798      	blx	r3
			result = N_FAIL;
   2388a:	230f      	movs	r3, #15
   2388c:	18fb      	adds	r3, r7, r3
   2388e:	2200      	movs	r2, #0
   23890:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23892:	e010      	b.n	238b6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   23894:	230d      	movs	r3, #13
   23896:	18fb      	adds	r3, r7, r3
   23898:	781b      	ldrb	r3, [r3, #0]
   2389a:	2b00      	cmp	r3, #0
   2389c:	d00b      	beq.n	238b6 <spi_cmd_rsp+0x112>
   2389e:	230e      	movs	r3, #14
   238a0:	18fb      	adds	r3, r7, r3
   238a2:	781b      	ldrb	r3, [r3, #0]
   238a4:	b25b      	sxtb	r3, r3
   238a6:	b2da      	uxtb	r2, r3
   238a8:	3a01      	subs	r2, #1
   238aa:	b2d1      	uxtb	r1, r2
   238ac:	220e      	movs	r2, #14
   238ae:	18ba      	adds	r2, r7, r2
   238b0:	7011      	strb	r1, [r2, #0]
   238b2:	2b00      	cmp	r3, #0
   238b4:	dcd1      	bgt.n	2385a <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   238b6:	230f      	movs	r3, #15
   238b8:	18fb      	adds	r3, r7, r3
   238ba:	781b      	ldrb	r3, [r3, #0]
   238bc:	b25b      	sxtb	r3, r3
}
   238be:	0018      	movs	r0, r3
   238c0:	46bd      	mov	sp, r7
   238c2:	b004      	add	sp, #16
   238c4:	bd80      	pop	{r7, pc}
   238c6:	46c0      	nop			; (mov r8, r8)
   238c8:	00023219 	.word	0x00023219
   238cc:	000390dc 	.word	0x000390dc
   238d0:	00038ad4 	.word	0x00038ad4
   238d4:	0001e189 	.word	0x0001e189
   238d8:	00038b68 	.word	0x00038b68
   238dc:	00038b14 	.word	0x00038b14

000238e0 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   238e0:	b590      	push	{r4, r7, lr}
   238e2:	b09f      	sub	sp, #124	; 0x7c
   238e4:	af00      	add	r7, sp, #0
   238e6:	60b9      	str	r1, [r7, #8]
   238e8:	607a      	str	r2, [r7, #4]
   238ea:	603b      	str	r3, [r7, #0]
   238ec:	230f      	movs	r3, #15
   238ee:	18fb      	adds	r3, r7, r3
   238f0:	1c02      	adds	r2, r0, #0
   238f2:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   238f4:	2300      	movs	r3, #0
   238f6:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   238f8:	2301      	movs	r3, #1
   238fa:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   238fc:	2338      	movs	r3, #56	; 0x38
   238fe:	18fb      	adds	r3, r7, r3
   23900:	220f      	movs	r2, #15
   23902:	18ba      	adds	r2, r7, r2
   23904:	7812      	ldrb	r2, [r2, #0]
   23906:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23908:	230f      	movs	r3, #15
   2390a:	18fb      	adds	r3, r7, r3
   2390c:	781b      	ldrb	r3, [r3, #0]
   2390e:	3bc1      	subs	r3, #193	; 0xc1
   23910:	2b0e      	cmp	r3, #14
   23912:	d900      	bls.n	23916 <spi_cmd_complete+0x36>
   23914:	e103      	b.n	23b1e <spi_cmd_complete+0x23e>
   23916:	009a      	lsls	r2, r3, #2
   23918:	4bd1      	ldr	r3, [pc, #836]	; (23c60 <spi_cmd_complete+0x380>)
   2391a:	18d3      	adds	r3, r2, r3
   2391c:	681b      	ldr	r3, [r3, #0]
   2391e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   23920:	68bb      	ldr	r3, [r7, #8]
   23922:	0c1b      	lsrs	r3, r3, #16
   23924:	b2da      	uxtb	r2, r3
   23926:	2338      	movs	r3, #56	; 0x38
   23928:	18fb      	adds	r3, r7, r3
   2392a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2392c:	68bb      	ldr	r3, [r7, #8]
   2392e:	0a1b      	lsrs	r3, r3, #8
   23930:	b2da      	uxtb	r2, r3
   23932:	2338      	movs	r3, #56	; 0x38
   23934:	18fb      	adds	r3, r7, r3
   23936:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23938:	68bb      	ldr	r3, [r7, #8]
   2393a:	b2da      	uxtb	r2, r3
   2393c:	2338      	movs	r3, #56	; 0x38
   2393e:	18fb      	adds	r3, r7, r3
   23940:	70da      	strb	r2, [r3, #3]
		len = 5;
   23942:	2305      	movs	r3, #5
   23944:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   23946:	e0ed      	b.n	23b24 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   23948:	68bb      	ldr	r3, [r7, #8]
   2394a:	0a1b      	lsrs	r3, r3, #8
   2394c:	b2da      	uxtb	r2, r3
   2394e:	2338      	movs	r3, #56	; 0x38
   23950:	18fb      	adds	r3, r7, r3
   23952:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23954:	2388      	movs	r3, #136	; 0x88
   23956:	18fb      	adds	r3, r7, r3
   23958:	781b      	ldrb	r3, [r3, #0]
   2395a:	2b01      	cmp	r3, #1
   2395c:	d109      	bne.n	23972 <spi_cmd_complete+0x92>
   2395e:	2338      	movs	r3, #56	; 0x38
   23960:	18fb      	adds	r3, r7, r3
   23962:	785b      	ldrb	r3, [r3, #1]
   23964:	2280      	movs	r2, #128	; 0x80
   23966:	4252      	negs	r2, r2
   23968:	4313      	orrs	r3, r2
   2396a:	b2da      	uxtb	r2, r3
   2396c:	2338      	movs	r3, #56	; 0x38
   2396e:	18fb      	adds	r3, r7, r3
   23970:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   23972:	68bb      	ldr	r3, [r7, #8]
   23974:	b2da      	uxtb	r2, r3
   23976:	2338      	movs	r3, #56	; 0x38
   23978:	18fb      	adds	r3, r7, r3
   2397a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2397c:	2338      	movs	r3, #56	; 0x38
   2397e:	18fb      	adds	r3, r7, r3
   23980:	2200      	movs	r2, #0
   23982:	70da      	strb	r2, [r3, #3]
		len = 5;
   23984:	2305      	movs	r3, #5
   23986:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23988:	e0cc      	b.n	23b24 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   2398a:	2338      	movs	r3, #56	; 0x38
   2398c:	18fb      	adds	r3, r7, r3
   2398e:	2200      	movs	r2, #0
   23990:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   23992:	2338      	movs	r3, #56	; 0x38
   23994:	18fb      	adds	r3, r7, r3
   23996:	2200      	movs	r2, #0
   23998:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2399a:	2338      	movs	r3, #56	; 0x38
   2399c:	18fb      	adds	r3, r7, r3
   2399e:	2200      	movs	r2, #0
   239a0:	70da      	strb	r2, [r3, #3]
		len = 5;
   239a2:	2305      	movs	r3, #5
   239a4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   239a6:	e0bd      	b.n	23b24 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   239a8:	2338      	movs	r3, #56	; 0x38
   239aa:	18fb      	adds	r3, r7, r3
   239ac:	2200      	movs	r2, #0
   239ae:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   239b0:	2338      	movs	r3, #56	; 0x38
   239b2:	18fb      	adds	r3, r7, r3
   239b4:	2200      	movs	r2, #0
   239b6:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   239b8:	2338      	movs	r3, #56	; 0x38
   239ba:	18fb      	adds	r3, r7, r3
   239bc:	2200      	movs	r2, #0
   239be:	70da      	strb	r2, [r3, #3]
		len = 5;
   239c0:	2305      	movs	r3, #5
   239c2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   239c4:	e0ae      	b.n	23b24 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   239c6:	2338      	movs	r3, #56	; 0x38
   239c8:	18fb      	adds	r3, r7, r3
   239ca:	22ff      	movs	r2, #255	; 0xff
   239cc:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   239ce:	2338      	movs	r3, #56	; 0x38
   239d0:	18fb      	adds	r3, r7, r3
   239d2:	22ff      	movs	r2, #255	; 0xff
   239d4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   239d6:	2338      	movs	r3, #56	; 0x38
   239d8:	18fb      	adds	r3, r7, r3
   239da:	22ff      	movs	r2, #255	; 0xff
   239dc:	70da      	strb	r2, [r3, #3]
		len = 5;
   239de:	2305      	movs	r3, #5
   239e0:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   239e2:	e09f      	b.n	23b24 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   239e4:	68bb      	ldr	r3, [r7, #8]
   239e6:	0c1b      	lsrs	r3, r3, #16
   239e8:	b2da      	uxtb	r2, r3
   239ea:	2338      	movs	r3, #56	; 0x38
   239ec:	18fb      	adds	r3, r7, r3
   239ee:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   239f0:	68bb      	ldr	r3, [r7, #8]
   239f2:	0a1b      	lsrs	r3, r3, #8
   239f4:	b2da      	uxtb	r2, r3
   239f6:	2338      	movs	r3, #56	; 0x38
   239f8:	18fb      	adds	r3, r7, r3
   239fa:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   239fc:	68bb      	ldr	r3, [r7, #8]
   239fe:	b2da      	uxtb	r2, r3
   23a00:	2338      	movs	r3, #56	; 0x38
   23a02:	18fb      	adds	r3, r7, r3
   23a04:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   23a06:	683b      	ldr	r3, [r7, #0]
   23a08:	0a1b      	lsrs	r3, r3, #8
   23a0a:	b2da      	uxtb	r2, r3
   23a0c:	2338      	movs	r3, #56	; 0x38
   23a0e:	18fb      	adds	r3, r7, r3
   23a10:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   23a12:	683b      	ldr	r3, [r7, #0]
   23a14:	b2da      	uxtb	r2, r3
   23a16:	2338      	movs	r3, #56	; 0x38
   23a18:	18fb      	adds	r3, r7, r3
   23a1a:	715a      	strb	r2, [r3, #5]
		len = 7;
   23a1c:	2307      	movs	r3, #7
   23a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23a20:	e080      	b.n	23b24 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   23a22:	68bb      	ldr	r3, [r7, #8]
   23a24:	0c1b      	lsrs	r3, r3, #16
   23a26:	b2da      	uxtb	r2, r3
   23a28:	2338      	movs	r3, #56	; 0x38
   23a2a:	18fb      	adds	r3, r7, r3
   23a2c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23a2e:	68bb      	ldr	r3, [r7, #8]
   23a30:	0a1b      	lsrs	r3, r3, #8
   23a32:	b2da      	uxtb	r2, r3
   23a34:	2338      	movs	r3, #56	; 0x38
   23a36:	18fb      	adds	r3, r7, r3
   23a38:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23a3a:	68bb      	ldr	r3, [r7, #8]
   23a3c:	b2da      	uxtb	r2, r3
   23a3e:	2338      	movs	r3, #56	; 0x38
   23a40:	18fb      	adds	r3, r7, r3
   23a42:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   23a44:	683b      	ldr	r3, [r7, #0]
   23a46:	0c1b      	lsrs	r3, r3, #16
   23a48:	b2da      	uxtb	r2, r3
   23a4a:	2338      	movs	r3, #56	; 0x38
   23a4c:	18fb      	adds	r3, r7, r3
   23a4e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   23a50:	683b      	ldr	r3, [r7, #0]
   23a52:	0a1b      	lsrs	r3, r3, #8
   23a54:	b2da      	uxtb	r2, r3
   23a56:	2338      	movs	r3, #56	; 0x38
   23a58:	18fb      	adds	r3, r7, r3
   23a5a:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   23a5c:	683b      	ldr	r3, [r7, #0]
   23a5e:	b2da      	uxtb	r2, r3
   23a60:	2338      	movs	r3, #56	; 0x38
   23a62:	18fb      	adds	r3, r7, r3
   23a64:	719a      	strb	r2, [r3, #6]
		len = 8;
   23a66:	2308      	movs	r3, #8
   23a68:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23a6a:	e05b      	b.n	23b24 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   23a6c:	68bb      	ldr	r3, [r7, #8]
   23a6e:	0a1b      	lsrs	r3, r3, #8
   23a70:	b2da      	uxtb	r2, r3
   23a72:	2338      	movs	r3, #56	; 0x38
   23a74:	18fb      	adds	r3, r7, r3
   23a76:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23a78:	2388      	movs	r3, #136	; 0x88
   23a7a:	18fb      	adds	r3, r7, r3
   23a7c:	781b      	ldrb	r3, [r3, #0]
   23a7e:	2b01      	cmp	r3, #1
   23a80:	d109      	bne.n	23a96 <spi_cmd_complete+0x1b6>
   23a82:	2338      	movs	r3, #56	; 0x38
   23a84:	18fb      	adds	r3, r7, r3
   23a86:	785b      	ldrb	r3, [r3, #1]
   23a88:	2280      	movs	r2, #128	; 0x80
   23a8a:	4252      	negs	r2, r2
   23a8c:	4313      	orrs	r3, r2
   23a8e:	b2da      	uxtb	r2, r3
   23a90:	2338      	movs	r3, #56	; 0x38
   23a92:	18fb      	adds	r3, r7, r3
   23a94:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   23a96:	68bb      	ldr	r3, [r7, #8]
   23a98:	b2da      	uxtb	r2, r3
   23a9a:	2338      	movs	r3, #56	; 0x38
   23a9c:	18fb      	adds	r3, r7, r3
   23a9e:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   23aa0:	687b      	ldr	r3, [r7, #4]
   23aa2:	78da      	ldrb	r2, [r3, #3]
   23aa4:	2338      	movs	r3, #56	; 0x38
   23aa6:	18fb      	adds	r3, r7, r3
   23aa8:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   23aaa:	687b      	ldr	r3, [r7, #4]
   23aac:	789a      	ldrb	r2, [r3, #2]
   23aae:	2338      	movs	r3, #56	; 0x38
   23ab0:	18fb      	adds	r3, r7, r3
   23ab2:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   23ab4:	687b      	ldr	r3, [r7, #4]
   23ab6:	785a      	ldrb	r2, [r3, #1]
   23ab8:	2338      	movs	r3, #56	; 0x38
   23aba:	18fb      	adds	r3, r7, r3
   23abc:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   23abe:	687b      	ldr	r3, [r7, #4]
   23ac0:	781a      	ldrb	r2, [r3, #0]
   23ac2:	2338      	movs	r3, #56	; 0x38
   23ac4:	18fb      	adds	r3, r7, r3
   23ac6:	719a      	strb	r2, [r3, #6]
		len = 8;
   23ac8:	2308      	movs	r3, #8
   23aca:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23acc:	e02a      	b.n	23b24 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   23ace:	68bb      	ldr	r3, [r7, #8]
   23ad0:	0c1b      	lsrs	r3, r3, #16
   23ad2:	b2da      	uxtb	r2, r3
   23ad4:	2338      	movs	r3, #56	; 0x38
   23ad6:	18fb      	adds	r3, r7, r3
   23ad8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23ada:	68bb      	ldr	r3, [r7, #8]
   23adc:	0a1b      	lsrs	r3, r3, #8
   23ade:	b2da      	uxtb	r2, r3
   23ae0:	2338      	movs	r3, #56	; 0x38
   23ae2:	18fb      	adds	r3, r7, r3
   23ae4:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   23ae6:	68bb      	ldr	r3, [r7, #8]
   23ae8:	b2da      	uxtb	r2, r3
   23aea:	2338      	movs	r3, #56	; 0x38
   23aec:	18fb      	adds	r3, r7, r3
   23aee:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   23af0:	687b      	ldr	r3, [r7, #4]
   23af2:	78da      	ldrb	r2, [r3, #3]
   23af4:	2338      	movs	r3, #56	; 0x38
   23af6:	18fb      	adds	r3, r7, r3
   23af8:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   23afa:	687b      	ldr	r3, [r7, #4]
   23afc:	789a      	ldrb	r2, [r3, #2]
   23afe:	2338      	movs	r3, #56	; 0x38
   23b00:	18fb      	adds	r3, r7, r3
   23b02:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   23b04:	687b      	ldr	r3, [r7, #4]
   23b06:	785a      	ldrb	r2, [r3, #1]
   23b08:	2338      	movs	r3, #56	; 0x38
   23b0a:	18fb      	adds	r3, r7, r3
   23b0c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   23b0e:	687b      	ldr	r3, [r7, #4]
   23b10:	781a      	ldrb	r2, [r3, #0]
   23b12:	2338      	movs	r3, #56	; 0x38
   23b14:	18fb      	adds	r3, r7, r3
   23b16:	71da      	strb	r2, [r3, #7]
		len = 9;
   23b18:	2309      	movs	r3, #9
   23b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23b1c:	e002      	b.n	23b24 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   23b1e:	2300      	movs	r3, #0
   23b20:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   23b22:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   23b24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23b26:	2b01      	cmp	r3, #1
   23b28:	d001      	beq.n	23b2e <spi_cmd_complete+0x24e>
		return result;
   23b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23b2c:	e33a      	b.n	241a4 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   23b2e:	4b4d      	ldr	r3, [pc, #308]	; (23c64 <spi_cmd_complete+0x384>)
   23b30:	781b      	ldrb	r3, [r3, #0]
   23b32:	2b00      	cmp	r3, #0
   23b34:	d111      	bne.n	23b5a <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   23b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23b38:	1e5c      	subs	r4, r3, #1
   23b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23b3c:	3b01      	subs	r3, #1
   23b3e:	001a      	movs	r2, r3
   23b40:	2338      	movs	r3, #56	; 0x38
   23b42:	18fb      	adds	r3, r7, r3
   23b44:	0019      	movs	r1, r3
   23b46:	207f      	movs	r0, #127	; 0x7f
   23b48:	4b47      	ldr	r3, [pc, #284]	; (23c68 <spi_cmd_complete+0x388>)
   23b4a:	4798      	blx	r3
   23b4c:	0003      	movs	r3, r0
   23b4e:	18db      	adds	r3, r3, r3
   23b50:	b2da      	uxtb	r2, r3
   23b52:	2338      	movs	r3, #56	; 0x38
   23b54:	18fb      	adds	r3, r7, r3
   23b56:	551a      	strb	r2, [r3, r4]
   23b58:	e002      	b.n	23b60 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   23b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23b5c:	3b01      	subs	r3, #1
   23b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   23b60:	230f      	movs	r3, #15
   23b62:	18fb      	adds	r3, r7, r3
   23b64:	781b      	ldrb	r3, [r3, #0]
   23b66:	2bcf      	cmp	r3, #207	; 0xcf
   23b68:	d009      	beq.n	23b7e <spi_cmd_complete+0x29e>
   23b6a:	230f      	movs	r3, #15
   23b6c:	18fb      	adds	r3, r7, r3
   23b6e:	781b      	ldrb	r3, [r3, #0]
   23b70:	2bc5      	cmp	r3, #197	; 0xc5
   23b72:	d004      	beq.n	23b7e <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   23b74:	230f      	movs	r3, #15
   23b76:	18fb      	adds	r3, r7, r3
   23b78:	781b      	ldrb	r3, [r3, #0]
   23b7a:	2bc6      	cmp	r3, #198	; 0xc6
   23b7c:	d103      	bne.n	23b86 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   23b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23b80:	3306      	adds	r3, #6
   23b82:	673b      	str	r3, [r7, #112]	; 0x70
   23b84:	e018      	b.n	23bb8 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   23b86:	230f      	movs	r3, #15
   23b88:	18fb      	adds	r3, r7, r3
   23b8a:	781b      	ldrb	r3, [r3, #0]
   23b8c:	2bc4      	cmp	r3, #196	; 0xc4
   23b8e:	d004      	beq.n	23b9a <spi_cmd_complete+0x2ba>
   23b90:	230f      	movs	r3, #15
   23b92:	18fb      	adds	r3, r7, r3
   23b94:	781b      	ldrb	r3, [r3, #0]
   23b96:	2bca      	cmp	r3, #202	; 0xca
   23b98:	d10b      	bne.n	23bb2 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   23b9a:	4b32      	ldr	r3, [pc, #200]	; (23c64 <spi_cmd_complete+0x384>)
   23b9c:	781b      	ldrb	r3, [r3, #0]
   23b9e:	2b00      	cmp	r3, #0
   23ba0:	d103      	bne.n	23baa <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   23ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23ba4:	330c      	adds	r3, #12
   23ba6:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   23ba8:	e006      	b.n	23bb8 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   23baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23bac:	330a      	adds	r3, #10
   23bae:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   23bb0:	e002      	b.n	23bb8 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   23bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23bb4:	3305      	adds	r3, #5
   23bb6:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   23bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23bba:	2b20      	cmp	r3, #32
   23bbc:	d914      	bls.n	23be8 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   23bbe:	23f7      	movs	r3, #247	; 0xf7
   23bc0:	005a      	lsls	r2, r3, #1
   23bc2:	492a      	ldr	r1, [pc, #168]	; (23c6c <spi_cmd_complete+0x38c>)
   23bc4:	4b2a      	ldr	r3, [pc, #168]	; (23c70 <spi_cmd_complete+0x390>)
   23bc6:	0018      	movs	r0, r3
   23bc8:	4b2a      	ldr	r3, [pc, #168]	; (23c74 <spi_cmd_complete+0x394>)
   23bca:	4798      	blx	r3
   23bcc:	6f39      	ldr	r1, [r7, #112]	; 0x70
   23bce:	4b2a      	ldr	r3, [pc, #168]	; (23c78 <spi_cmd_complete+0x398>)
   23bd0:	2220      	movs	r2, #32
   23bd2:	0018      	movs	r0, r3
   23bd4:	4b27      	ldr	r3, [pc, #156]	; (23c74 <spi_cmd_complete+0x394>)
   23bd6:	4798      	blx	r3
   23bd8:	4b28      	ldr	r3, [pc, #160]	; (23c7c <spi_cmd_complete+0x39c>)
   23bda:	0018      	movs	r0, r3
   23bdc:	4b25      	ldr	r3, [pc, #148]	; (23c74 <spi_cmd_complete+0x394>)
   23bde:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   23be0:	2300      	movs	r3, #0
   23be2:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23be6:	e2dd      	b.n	241a4 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   23be8:	2377      	movs	r3, #119	; 0x77
   23bea:	18fb      	adds	r3, r7, r3
   23bec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   23bee:	701a      	strb	r2, [r3, #0]
   23bf0:	e00d      	b.n	23c0e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   23bf2:	2377      	movs	r3, #119	; 0x77
   23bf4:	18fb      	adds	r3, r7, r3
   23bf6:	781b      	ldrb	r3, [r3, #0]
   23bf8:	2238      	movs	r2, #56	; 0x38
   23bfa:	18ba      	adds	r2, r7, r2
   23bfc:	2100      	movs	r1, #0
   23bfe:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   23c00:	2377      	movs	r3, #119	; 0x77
   23c02:	18fb      	adds	r3, r7, r3
   23c04:	781a      	ldrb	r2, [r3, #0]
   23c06:	2377      	movs	r3, #119	; 0x77
   23c08:	18fb      	adds	r3, r7, r3
   23c0a:	3201      	adds	r2, #1
   23c0c:	701a      	strb	r2, [r3, #0]
   23c0e:	2377      	movs	r3, #119	; 0x77
   23c10:	18fb      	adds	r3, r7, r3
   23c12:	781a      	ldrb	r2, [r3, #0]
   23c14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23c16:	429a      	cmp	r2, r3
   23c18:	d3eb      	bcc.n	23bf2 <spi_cmd_complete+0x312>
	}
	rix = len;
   23c1a:	2376      	movs	r3, #118	; 0x76
   23c1c:	18fb      	adds	r3, r7, r3
   23c1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   23c20:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   23c22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23c24:	b29a      	uxth	r2, r3
   23c26:	2318      	movs	r3, #24
   23c28:	18f9      	adds	r1, r7, r3
   23c2a:	2338      	movs	r3, #56	; 0x38
   23c2c:	18fb      	adds	r3, r7, r3
   23c2e:	0018      	movs	r0, r3
   23c30:	4b13      	ldr	r3, [pc, #76]	; (23c80 <spi_cmd_complete+0x3a0>)
   23c32:	4798      	blx	r3
   23c34:	1e03      	subs	r3, r0, #0
   23c36:	d027      	beq.n	23c88 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23c38:	23fa      	movs	r3, #250	; 0xfa
   23c3a:	33ff      	adds	r3, #255	; 0xff
   23c3c:	001a      	movs	r2, r3
   23c3e:	490b      	ldr	r1, [pc, #44]	; (23c6c <spi_cmd_complete+0x38c>)
   23c40:	4b0b      	ldr	r3, [pc, #44]	; (23c70 <spi_cmd_complete+0x390>)
   23c42:	0018      	movs	r0, r3
   23c44:	4b0b      	ldr	r3, [pc, #44]	; (23c74 <spi_cmd_complete+0x394>)
   23c46:	4798      	blx	r3
   23c48:	4b0e      	ldr	r3, [pc, #56]	; (23c84 <spi_cmd_complete+0x3a4>)
   23c4a:	0018      	movs	r0, r3
   23c4c:	4b09      	ldr	r3, [pc, #36]	; (23c74 <spi_cmd_complete+0x394>)
   23c4e:	4798      	blx	r3
   23c50:	4b0a      	ldr	r3, [pc, #40]	; (23c7c <spi_cmd_complete+0x39c>)
   23c52:	0018      	movs	r0, r3
   23c54:	4b07      	ldr	r3, [pc, #28]	; (23c74 <spi_cmd_complete+0x394>)
   23c56:	4798      	blx	r3
		result = N_FAIL;
   23c58:	2300      	movs	r3, #0
   23c5a:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23c5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23c5e:	e2a1      	b.n	241a4 <spi_cmd_complete+0x8c4>
   23c60:	00039088 	.word	0x00039088
   23c64:	20003e9c 	.word	0x20003e9c
   23c68:	00023315 	.word	0x00023315
   23c6c:	000390e8 	.word	0x000390e8
   23c70:	00038ad4 	.word	0x00038ad4
   23c74:	0001e189 	.word	0x0001e189
   23c78:	00038b9c 	.word	0x00038b9c
   23c7c:	00038b14 	.word	0x00038b14
   23c80:	000232a1 	.word	0x000232a1
   23c84:	00038ae8 	.word	0x00038ae8
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23c88:	230f      	movs	r3, #15
   23c8a:	18fb      	adds	r3, r7, r3
   23c8c:	781b      	ldrb	r3, [r3, #0]
   23c8e:	2bcf      	cmp	r3, #207	; 0xcf
   23c90:	d009      	beq.n	23ca6 <spi_cmd_complete+0x3c6>
   23c92:	230f      	movs	r3, #15
   23c94:	18fb      	adds	r3, r7, r3
   23c96:	781b      	ldrb	r3, [r3, #0]
   23c98:	2bc5      	cmp	r3, #197	; 0xc5
   23c9a:	d004      	beq.n	23ca6 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   23c9c:	230f      	movs	r3, #15
   23c9e:	18fb      	adds	r3, r7, r3
   23ca0:	781b      	ldrb	r3, [r3, #0]
   23ca2:	2bc6      	cmp	r3, #198	; 0xc6
   23ca4:	d106      	bne.n	23cb4 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   23ca6:	2376      	movs	r3, #118	; 0x76
   23ca8:	18fb      	adds	r3, r7, r3
   23caa:	781a      	ldrb	r2, [r3, #0]
   23cac:	2376      	movs	r3, #118	; 0x76
   23cae:	18fb      	adds	r3, r7, r3
   23cb0:	3201      	adds	r2, #1
   23cb2:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   23cb4:	2376      	movs	r3, #118	; 0x76
   23cb6:	18fb      	adds	r3, r7, r3
   23cb8:	781b      	ldrb	r3, [r3, #0]
   23cba:	2276      	movs	r2, #118	; 0x76
   23cbc:	18ba      	adds	r2, r7, r2
   23cbe:	1c59      	adds	r1, r3, #1
   23cc0:	7011      	strb	r1, [r2, #0]
   23cc2:	001a      	movs	r2, r3
   23cc4:	2318      	movs	r3, #24
   23cc6:	18fb      	adds	r3, r7, r3
   23cc8:	5c9a      	ldrb	r2, [r3, r2]
   23cca:	2317      	movs	r3, #23
   23ccc:	18fb      	adds	r3, r7, r3
   23cce:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   23cd0:	2317      	movs	r3, #23
   23cd2:	18fb      	adds	r3, r7, r3
   23cd4:	781b      	ldrb	r3, [r3, #0]
   23cd6:	220f      	movs	r2, #15
   23cd8:	18ba      	adds	r2, r7, r2
   23cda:	7812      	ldrb	r2, [r2, #0]
   23cdc:	429a      	cmp	r2, r3
   23cde:	d018      	beq.n	23d12 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   23ce0:	4add      	ldr	r2, [pc, #884]	; (24058 <spi_cmd_complete+0x778>)
   23ce2:	49de      	ldr	r1, [pc, #888]	; (2405c <spi_cmd_complete+0x77c>)
   23ce4:	4bde      	ldr	r3, [pc, #888]	; (24060 <spi_cmd_complete+0x780>)
   23ce6:	0018      	movs	r0, r3
   23ce8:	4bde      	ldr	r3, [pc, #888]	; (24064 <spi_cmd_complete+0x784>)
   23cea:	4798      	blx	r3
   23cec:	230f      	movs	r3, #15
   23cee:	18fb      	adds	r3, r7, r3
   23cf0:	7819      	ldrb	r1, [r3, #0]
   23cf2:	2317      	movs	r3, #23
   23cf4:	18fb      	adds	r3, r7, r3
   23cf6:	781b      	ldrb	r3, [r3, #0]
   23cf8:	001a      	movs	r2, r3
   23cfa:	4bdb      	ldr	r3, [pc, #876]	; (24068 <spi_cmd_complete+0x788>)
   23cfc:	0018      	movs	r0, r3
   23cfe:	4bd9      	ldr	r3, [pc, #868]	; (24064 <spi_cmd_complete+0x784>)
   23d00:	4798      	blx	r3
   23d02:	4bda      	ldr	r3, [pc, #872]	; (2406c <spi_cmd_complete+0x78c>)
   23d04:	0018      	movs	r0, r3
   23d06:	4bd7      	ldr	r3, [pc, #860]	; (24064 <spi_cmd_complete+0x784>)
   23d08:	4798      	blx	r3
		result = N_FAIL;
   23d0a:	2300      	movs	r3, #0
   23d0c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23d0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23d10:	e248      	b.n	241a4 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   23d12:	2376      	movs	r3, #118	; 0x76
   23d14:	18fb      	adds	r3, r7, r3
   23d16:	781b      	ldrb	r3, [r3, #0]
   23d18:	2276      	movs	r2, #118	; 0x76
   23d1a:	18ba      	adds	r2, r7, r2
   23d1c:	1c59      	adds	r1, r3, #1
   23d1e:	7011      	strb	r1, [r2, #0]
   23d20:	001a      	movs	r2, r3
   23d22:	2318      	movs	r3, #24
   23d24:	18fb      	adds	r3, r7, r3
   23d26:	5c9a      	ldrb	r2, [r3, r2]
   23d28:	2317      	movs	r3, #23
   23d2a:	18fb      	adds	r3, r7, r3
   23d2c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   23d2e:	2317      	movs	r3, #23
   23d30:	18fb      	adds	r3, r7, r3
   23d32:	781b      	ldrb	r3, [r3, #0]
   23d34:	2b00      	cmp	r3, #0
   23d36:	d016      	beq.n	23d66 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   23d38:	4acd      	ldr	r2, [pc, #820]	; (24070 <spi_cmd_complete+0x790>)
   23d3a:	49c8      	ldr	r1, [pc, #800]	; (2405c <spi_cmd_complete+0x77c>)
   23d3c:	4bc8      	ldr	r3, [pc, #800]	; (24060 <spi_cmd_complete+0x780>)
   23d3e:	0018      	movs	r0, r3
   23d40:	4bc8      	ldr	r3, [pc, #800]	; (24064 <spi_cmd_complete+0x784>)
   23d42:	4798      	blx	r3
   23d44:	2317      	movs	r3, #23
   23d46:	18fb      	adds	r3, r7, r3
   23d48:	781b      	ldrb	r3, [r3, #0]
   23d4a:	001a      	movs	r2, r3
   23d4c:	4bc9      	ldr	r3, [pc, #804]	; (24074 <spi_cmd_complete+0x794>)
   23d4e:	0011      	movs	r1, r2
   23d50:	0018      	movs	r0, r3
   23d52:	4bc4      	ldr	r3, [pc, #784]	; (24064 <spi_cmd_complete+0x784>)
   23d54:	4798      	blx	r3
   23d56:	4bc5      	ldr	r3, [pc, #788]	; (2406c <spi_cmd_complete+0x78c>)
   23d58:	0018      	movs	r0, r3
   23d5a:	4bc2      	ldr	r3, [pc, #776]	; (24064 <spi_cmd_complete+0x784>)
   23d5c:	4798      	blx	r3
		result = N_FAIL;
   23d5e:	2300      	movs	r3, #0
   23d60:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23d64:	e21e      	b.n	241a4 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   23d66:	230f      	movs	r3, #15
   23d68:	18fb      	adds	r3, r7, r3
   23d6a:	781b      	ldrb	r3, [r3, #0]
   23d6c:	2bc4      	cmp	r3, #196	; 0xc4
   23d6e:	d00f      	beq.n	23d90 <spi_cmd_complete+0x4b0>
   23d70:	230f      	movs	r3, #15
   23d72:	18fb      	adds	r3, r7, r3
   23d74:	781b      	ldrb	r3, [r3, #0]
   23d76:	2bca      	cmp	r3, #202	; 0xca
   23d78:	d00a      	beq.n	23d90 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23d7a:	230f      	movs	r3, #15
   23d7c:	18fb      	adds	r3, r7, r3
   23d7e:	781b      	ldrb	r3, [r3, #0]
   23d80:	2bc2      	cmp	r3, #194	; 0xc2
   23d82:	d005      	beq.n	23d90 <spi_cmd_complete+0x4b0>
   23d84:	230f      	movs	r3, #15
   23d86:	18fb      	adds	r3, r7, r3
   23d88:	781b      	ldrb	r3, [r3, #0]
   23d8a:	2bc8      	cmp	r3, #200	; 0xc8
   23d8c:	d000      	beq.n	23d90 <spi_cmd_complete+0x4b0>
   23d8e:	e208      	b.n	241a2 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   23d90:	230a      	movs	r3, #10
   23d92:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   23d94:	2376      	movs	r3, #118	; 0x76
   23d96:	18fb      	adds	r3, r7, r3
   23d98:	781a      	ldrb	r2, [r3, #0]
   23d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23d9c:	429a      	cmp	r2, r3
   23d9e:	d218      	bcs.n	23dd2 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   23da0:	2376      	movs	r3, #118	; 0x76
   23da2:	18fb      	adds	r3, r7, r3
   23da4:	781b      	ldrb	r3, [r3, #0]
   23da6:	2276      	movs	r2, #118	; 0x76
   23da8:	18ba      	adds	r2, r7, r2
   23daa:	1c59      	adds	r1, r3, #1
   23dac:	7011      	strb	r1, [r2, #0]
   23dae:	001a      	movs	r2, r3
   23db0:	2318      	movs	r3, #24
   23db2:	18fb      	adds	r3, r7, r3
   23db4:	5c9a      	ldrb	r2, [r3, r2]
   23db6:	2317      	movs	r3, #23
   23db8:	18fb      	adds	r3, r7, r3
   23dba:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   23dbc:	2317      	movs	r3, #23
   23dbe:	18fb      	adds	r3, r7, r3
   23dc0:	781b      	ldrb	r3, [r3, #0]
   23dc2:	091b      	lsrs	r3, r3, #4
   23dc4:	b2db      	uxtb	r3, r3
   23dc6:	001a      	movs	r2, r3
   23dc8:	230f      	movs	r3, #15
   23dca:	4013      	ands	r3, r2
   23dcc:	2b0f      	cmp	r3, #15
   23dce:	d103      	bne.n	23dd8 <spi_cmd_complete+0x4f8>
					break;
   23dd0:	e007      	b.n	23de2 <spi_cmd_complete+0x502>
					retry = 0;
   23dd2:	2300      	movs	r3, #0
   23dd4:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   23dd6:	e004      	b.n	23de2 <spi_cmd_complete+0x502>
			} while (retry--);
   23dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23dda:	1e5a      	subs	r2, r3, #1
   23ddc:	667a      	str	r2, [r7, #100]	; 0x64
   23dde:	2b00      	cmp	r3, #0
   23de0:	d1d8      	bne.n	23d94 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   23de2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23de4:	2b00      	cmp	r3, #0
   23de6:	dc18      	bgt.n	23e1a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   23de8:	2395      	movs	r3, #149	; 0x95
   23dea:	009a      	lsls	r2, r3, #2
   23dec:	499b      	ldr	r1, [pc, #620]	; (2405c <spi_cmd_complete+0x77c>)
   23dee:	4b9c      	ldr	r3, [pc, #624]	; (24060 <spi_cmd_complete+0x780>)
   23df0:	0018      	movs	r0, r3
   23df2:	4b9c      	ldr	r3, [pc, #624]	; (24064 <spi_cmd_complete+0x784>)
   23df4:	4798      	blx	r3
   23df6:	2317      	movs	r3, #23
   23df8:	18fb      	adds	r3, r7, r3
   23dfa:	781b      	ldrb	r3, [r3, #0]
   23dfc:	001a      	movs	r2, r3
   23dfe:	4b9e      	ldr	r3, [pc, #632]	; (24078 <spi_cmd_complete+0x798>)
   23e00:	0011      	movs	r1, r2
   23e02:	0018      	movs	r0, r3
   23e04:	4b97      	ldr	r3, [pc, #604]	; (24064 <spi_cmd_complete+0x784>)
   23e06:	4798      	blx	r3
   23e08:	4b98      	ldr	r3, [pc, #608]	; (2406c <spi_cmd_complete+0x78c>)
   23e0a:	0018      	movs	r0, r3
   23e0c:	4b95      	ldr	r3, [pc, #596]	; (24064 <spi_cmd_complete+0x784>)
   23e0e:	4798      	blx	r3
				result = N_RESET;
   23e10:	2301      	movs	r3, #1
   23e12:	425b      	negs	r3, r3
   23e14:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   23e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23e18:	e1c4      	b.n	241a4 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   23e1a:	230f      	movs	r3, #15
   23e1c:	18fb      	adds	r3, r7, r3
   23e1e:	781b      	ldrb	r3, [r3, #0]
   23e20:	2bc4      	cmp	r3, #196	; 0xc4
   23e22:	d005      	beq.n	23e30 <spi_cmd_complete+0x550>
   23e24:	230f      	movs	r3, #15
   23e26:	18fb      	adds	r3, r7, r3
   23e28:	781b      	ldrb	r3, [r3, #0]
   23e2a:	2bca      	cmp	r3, #202	; 0xca
   23e2c:	d000      	beq.n	23e30 <spi_cmd_complete+0x550>
   23e2e:	e08e      	b.n	23f4e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   23e30:	2376      	movs	r3, #118	; 0x76
   23e32:	18fb      	adds	r3, r7, r3
   23e34:	781b      	ldrb	r3, [r3, #0]
   23e36:	3303      	adds	r3, #3
   23e38:	001a      	movs	r2, r3
   23e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23e3c:	429a      	cmp	r2, r3
   23e3e:	d23c      	bcs.n	23eba <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   23e40:	2376      	movs	r3, #118	; 0x76
   23e42:	18fb      	adds	r3, r7, r3
   23e44:	781b      	ldrb	r3, [r3, #0]
   23e46:	2276      	movs	r2, #118	; 0x76
   23e48:	18ba      	adds	r2, r7, r2
   23e4a:	1c59      	adds	r1, r3, #1
   23e4c:	7011      	strb	r1, [r2, #0]
   23e4e:	001a      	movs	r2, r3
   23e50:	2318      	movs	r3, #24
   23e52:	18fb      	adds	r3, r7, r3
   23e54:	5c9a      	ldrb	r2, [r3, r2]
   23e56:	687b      	ldr	r3, [r7, #4]
   23e58:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   23e5a:	687b      	ldr	r3, [r7, #4]
   23e5c:	1c5a      	adds	r2, r3, #1
   23e5e:	2376      	movs	r3, #118	; 0x76
   23e60:	18fb      	adds	r3, r7, r3
   23e62:	781b      	ldrb	r3, [r3, #0]
   23e64:	2176      	movs	r1, #118	; 0x76
   23e66:	1879      	adds	r1, r7, r1
   23e68:	1c58      	adds	r0, r3, #1
   23e6a:	7008      	strb	r0, [r1, #0]
   23e6c:	0019      	movs	r1, r3
   23e6e:	2318      	movs	r3, #24
   23e70:	18fb      	adds	r3, r7, r3
   23e72:	5c5b      	ldrb	r3, [r3, r1]
   23e74:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   23e76:	687b      	ldr	r3, [r7, #4]
   23e78:	1c9a      	adds	r2, r3, #2
   23e7a:	2376      	movs	r3, #118	; 0x76
   23e7c:	18fb      	adds	r3, r7, r3
   23e7e:	781b      	ldrb	r3, [r3, #0]
   23e80:	2176      	movs	r1, #118	; 0x76
   23e82:	1879      	adds	r1, r7, r1
   23e84:	1c58      	adds	r0, r3, #1
   23e86:	7008      	strb	r0, [r1, #0]
   23e88:	0019      	movs	r1, r3
   23e8a:	2318      	movs	r3, #24
   23e8c:	18fb      	adds	r3, r7, r3
   23e8e:	5c5b      	ldrb	r3, [r3, r1]
   23e90:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   23e92:	687b      	ldr	r3, [r7, #4]
   23e94:	1cda      	adds	r2, r3, #3
   23e96:	2376      	movs	r3, #118	; 0x76
   23e98:	18fb      	adds	r3, r7, r3
   23e9a:	781b      	ldrb	r3, [r3, #0]
   23e9c:	2176      	movs	r1, #118	; 0x76
   23e9e:	1879      	adds	r1, r7, r1
   23ea0:	1c58      	adds	r0, r3, #1
   23ea2:	7008      	strb	r0, [r1, #0]
   23ea4:	0019      	movs	r1, r3
   23ea6:	2318      	movs	r3, #24
   23ea8:	18fb      	adds	r3, r7, r3
   23eaa:	5c5b      	ldrb	r3, [r3, r1]
   23eac:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   23eae:	4b73      	ldr	r3, [pc, #460]	; (2407c <spi_cmd_complete+0x79c>)
   23eb0:	781b      	ldrb	r3, [r3, #0]
   23eb2:	2b00      	cmp	r3, #0
   23eb4:	d000      	beq.n	23eb8 <spi_cmd_complete+0x5d8>
   23eb6:	e174      	b.n	241a2 <spi_cmd_complete+0x8c2>
   23eb8:	e011      	b.n	23ede <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   23eba:	4a71      	ldr	r2, [pc, #452]	; (24080 <spi_cmd_complete+0x7a0>)
   23ebc:	4967      	ldr	r1, [pc, #412]	; (2405c <spi_cmd_complete+0x77c>)
   23ebe:	4b68      	ldr	r3, [pc, #416]	; (24060 <spi_cmd_complete+0x780>)
   23ec0:	0018      	movs	r0, r3
   23ec2:	4b68      	ldr	r3, [pc, #416]	; (24064 <spi_cmd_complete+0x784>)
   23ec4:	4798      	blx	r3
   23ec6:	4b6f      	ldr	r3, [pc, #444]	; (24084 <spi_cmd_complete+0x7a4>)
   23ec8:	0018      	movs	r0, r3
   23eca:	4b66      	ldr	r3, [pc, #408]	; (24064 <spi_cmd_complete+0x784>)
   23ecc:	4798      	blx	r3
   23ece:	4b67      	ldr	r3, [pc, #412]	; (2406c <spi_cmd_complete+0x78c>)
   23ed0:	0018      	movs	r0, r3
   23ed2:	4b64      	ldr	r3, [pc, #400]	; (24064 <spi_cmd_complete+0x784>)
   23ed4:	4798      	blx	r3
					result = N_FAIL;
   23ed6:	2300      	movs	r3, #0
   23ed8:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   23eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23edc:	e162      	b.n	241a4 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   23ede:	2376      	movs	r3, #118	; 0x76
   23ee0:	18fb      	adds	r3, r7, r3
   23ee2:	781b      	ldrb	r3, [r3, #0]
   23ee4:	3301      	adds	r3, #1
   23ee6:	001a      	movs	r2, r3
   23ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23eea:	429a      	cmp	r2, r3
   23eec:	d21c      	bcs.n	23f28 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   23eee:	2376      	movs	r3, #118	; 0x76
   23ef0:	18fb      	adds	r3, r7, r3
   23ef2:	781b      	ldrb	r3, [r3, #0]
   23ef4:	2276      	movs	r2, #118	; 0x76
   23ef6:	18ba      	adds	r2, r7, r2
   23ef8:	1c59      	adds	r1, r3, #1
   23efa:	7011      	strb	r1, [r2, #0]
   23efc:	001a      	movs	r2, r3
   23efe:	2318      	movs	r3, #24
   23f00:	18fb      	adds	r3, r7, r3
   23f02:	5c9a      	ldrb	r2, [r3, r2]
   23f04:	2314      	movs	r3, #20
   23f06:	18fb      	adds	r3, r7, r3
   23f08:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   23f0a:	2376      	movs	r3, #118	; 0x76
   23f0c:	18fb      	adds	r3, r7, r3
   23f0e:	781b      	ldrb	r3, [r3, #0]
   23f10:	2276      	movs	r2, #118	; 0x76
   23f12:	18ba      	adds	r2, r7, r2
   23f14:	1c59      	adds	r1, r3, #1
   23f16:	7011      	strb	r1, [r2, #0]
   23f18:	001a      	movs	r2, r3
   23f1a:	2318      	movs	r3, #24
   23f1c:	18fb      	adds	r3, r7, r3
   23f1e:	5c9a      	ldrb	r2, [r3, r2]
   23f20:	2314      	movs	r3, #20
   23f22:	18fb      	adds	r3, r7, r3
   23f24:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   23f26:	e13c      	b.n	241a2 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   23f28:	239c      	movs	r3, #156	; 0x9c
   23f2a:	009a      	lsls	r2, r3, #2
   23f2c:	494b      	ldr	r1, [pc, #300]	; (2405c <spi_cmd_complete+0x77c>)
   23f2e:	4b4c      	ldr	r3, [pc, #304]	; (24060 <spi_cmd_complete+0x780>)
   23f30:	0018      	movs	r0, r3
   23f32:	4b4c      	ldr	r3, [pc, #304]	; (24064 <spi_cmd_complete+0x784>)
   23f34:	4798      	blx	r3
   23f36:	4b54      	ldr	r3, [pc, #336]	; (24088 <spi_cmd_complete+0x7a8>)
   23f38:	0018      	movs	r0, r3
   23f3a:	4b4a      	ldr	r3, [pc, #296]	; (24064 <spi_cmd_complete+0x784>)
   23f3c:	4798      	blx	r3
   23f3e:	4b4b      	ldr	r3, [pc, #300]	; (2406c <spi_cmd_complete+0x78c>)
   23f40:	0018      	movs	r0, r3
   23f42:	4b48      	ldr	r3, [pc, #288]	; (24064 <spi_cmd_complete+0x784>)
   23f44:	4798      	blx	r3
						result = N_FAIL;
   23f46:	2300      	movs	r3, #0
   23f48:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   23f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23f4c:	e12a      	b.n	241a4 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23f4e:	230f      	movs	r3, #15
   23f50:	18fb      	adds	r3, r7, r3
   23f52:	781b      	ldrb	r3, [r3, #0]
   23f54:	2bc2      	cmp	r3, #194	; 0xc2
   23f56:	d005      	beq.n	23f64 <spi_cmd_complete+0x684>
   23f58:	230f      	movs	r3, #15
   23f5a:	18fb      	adds	r3, r7, r3
   23f5c:	781b      	ldrb	r3, [r3, #0]
   23f5e:	2bc8      	cmp	r3, #200	; 0xc8
   23f60:	d000      	beq.n	23f64 <spi_cmd_complete+0x684>
   23f62:	e11e      	b.n	241a2 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   23f64:	2300      	movs	r3, #0
   23f66:	663b      	str	r3, [r7, #96]	; 0x60
   23f68:	e011      	b.n	23f8e <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   23f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23f6c:	1c5a      	adds	r2, r3, #1
   23f6e:	663a      	str	r2, [r7, #96]	; 0x60
   23f70:	001a      	movs	r2, r3
   23f72:	687b      	ldr	r3, [r7, #4]
   23f74:	189a      	adds	r2, r3, r2
   23f76:	2376      	movs	r3, #118	; 0x76
   23f78:	18fb      	adds	r3, r7, r3
   23f7a:	781b      	ldrb	r3, [r3, #0]
   23f7c:	2176      	movs	r1, #118	; 0x76
   23f7e:	1879      	adds	r1, r7, r1
   23f80:	1c58      	adds	r0, r3, #1
   23f82:	7008      	strb	r0, [r1, #0]
   23f84:	0019      	movs	r1, r3
   23f86:	2318      	movs	r3, #24
   23f88:	18fb      	adds	r3, r7, r3
   23f8a:	5c5b      	ldrb	r3, [r3, r1]
   23f8c:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   23f8e:	2376      	movs	r3, #118	; 0x76
   23f90:	18fb      	adds	r3, r7, r3
   23f92:	781a      	ldrb	r2, [r3, #0]
   23f94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23f96:	429a      	cmp	r2, r3
   23f98:	d203      	bcs.n	23fa2 <spi_cmd_complete+0x6c2>
   23f9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23f9c:	683b      	ldr	r3, [r7, #0]
   23f9e:	429a      	cmp	r2, r3
   23fa0:	d3e3      	bcc.n	23f6a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   23fa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23fa4:	683a      	ldr	r2, [r7, #0]
   23fa6:	1ad3      	subs	r3, r2, r3
   23fa8:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   23faa:	683b      	ldr	r3, [r7, #0]
   23fac:	2b00      	cmp	r3, #0
   23fae:	d100      	bne.n	23fb2 <spi_cmd_complete+0x6d2>
   23fb0:	e0f1      	b.n	24196 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   23fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23fb4:	2280      	movs	r2, #128	; 0x80
   23fb6:	0192      	lsls	r2, r2, #6
   23fb8:	1ad3      	subs	r3, r2, r3
   23fba:	001a      	movs	r2, r3
   23fbc:	683b      	ldr	r3, [r7, #0]
   23fbe:	429a      	cmp	r2, r3
   23fc0:	d302      	bcc.n	23fc8 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   23fc2:	683b      	ldr	r3, [r7, #0]
   23fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   23fc6:	e004      	b.n	23fd2 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   23fc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23fca:	2280      	movs	r2, #128	; 0x80
   23fcc:	0192      	lsls	r2, r2, #6
   23fce:	1ad3      	subs	r3, r2, r3
   23fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23fd4:	687a      	ldr	r2, [r7, #4]
   23fd6:	18d3      	adds	r3, r2, r3
   23fd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   23fda:	b292      	uxth	r2, r2
   23fdc:	0011      	movs	r1, r2
   23fde:	0018      	movs	r0, r3
   23fe0:	4b2a      	ldr	r3, [pc, #168]	; (2408c <spi_cmd_complete+0x7ac>)
   23fe2:	4798      	blx	r3
   23fe4:	1e03      	subs	r3, r0, #0
   23fe6:	d010      	beq.n	2400a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23fe8:	4a29      	ldr	r2, [pc, #164]	; (24090 <spi_cmd_complete+0x7b0>)
   23fea:	491c      	ldr	r1, [pc, #112]	; (2405c <spi_cmd_complete+0x77c>)
   23fec:	4b1c      	ldr	r3, [pc, #112]	; (24060 <spi_cmd_complete+0x780>)
   23fee:	0018      	movs	r0, r3
   23ff0:	4b1c      	ldr	r3, [pc, #112]	; (24064 <spi_cmd_complete+0x784>)
   23ff2:	4798      	blx	r3
   23ff4:	4b27      	ldr	r3, [pc, #156]	; (24094 <spi_cmd_complete+0x7b4>)
   23ff6:	0018      	movs	r0, r3
   23ff8:	4b1a      	ldr	r3, [pc, #104]	; (24064 <spi_cmd_complete+0x784>)
   23ffa:	4798      	blx	r3
   23ffc:	4b1b      	ldr	r3, [pc, #108]	; (2406c <spi_cmd_complete+0x78c>)
   23ffe:	0018      	movs	r0, r3
   24000:	4b18      	ldr	r3, [pc, #96]	; (24064 <spi_cmd_complete+0x784>)
   24002:	4798      	blx	r3
						result = N_FAIL;
   24004:	2300      	movs	r3, #0
   24006:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   24008:	e0cb      	b.n	241a2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   2400a:	4b1c      	ldr	r3, [pc, #112]	; (2407c <spi_cmd_complete+0x79c>)
   2400c:	781b      	ldrb	r3, [r3, #0]
   2400e:	2b00      	cmp	r3, #0
   24010:	d119      	bne.n	24046 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24012:	2314      	movs	r3, #20
   24014:	18fb      	adds	r3, r7, r3
   24016:	2102      	movs	r1, #2
   24018:	0018      	movs	r0, r3
   2401a:	4b1c      	ldr	r3, [pc, #112]	; (2408c <spi_cmd_complete+0x7ac>)
   2401c:	4798      	blx	r3
   2401e:	1e03      	subs	r3, r0, #0
   24020:	d011      	beq.n	24046 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24022:	23a6      	movs	r3, #166	; 0xa6
   24024:	009a      	lsls	r2, r3, #2
   24026:	490d      	ldr	r1, [pc, #52]	; (2405c <spi_cmd_complete+0x77c>)
   24028:	4b0d      	ldr	r3, [pc, #52]	; (24060 <spi_cmd_complete+0x780>)
   2402a:	0018      	movs	r0, r3
   2402c:	4b0d      	ldr	r3, [pc, #52]	; (24064 <spi_cmd_complete+0x784>)
   2402e:	4798      	blx	r3
   24030:	4b19      	ldr	r3, [pc, #100]	; (24098 <spi_cmd_complete+0x7b8>)
   24032:	0018      	movs	r0, r3
   24034:	4b0b      	ldr	r3, [pc, #44]	; (24064 <spi_cmd_complete+0x784>)
   24036:	4798      	blx	r3
   24038:	4b0c      	ldr	r3, [pc, #48]	; (2406c <spi_cmd_complete+0x78c>)
   2403a:	0018      	movs	r0, r3
   2403c:	4b09      	ldr	r3, [pc, #36]	; (24064 <spi_cmd_complete+0x784>)
   2403e:	4798      	blx	r3
							result = N_FAIL;
   24040:	2300      	movs	r3, #0
   24042:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   24044:	e0ad      	b.n	241a2 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   24046:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2404a:	18d3      	adds	r3, r2, r3
   2404c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   2404e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24050:	683a      	ldr	r2, [r7, #0]
   24052:	1ad3      	subs	r3, r2, r3
   24054:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   24056:	e09e      	b.n	24196 <spi_cmd_complete+0x8b6>
   24058:	0000022f 	.word	0x0000022f
   2405c:	000390e8 	.word	0x000390e8
   24060:	00038ad4 	.word	0x00038ad4
   24064:	0001e189 	.word	0x0001e189
   24068:	00038bcc 	.word	0x00038bcc
   2406c:	00038b14 	.word	0x00038b14
   24070:	00000239 	.word	0x00000239
   24074:	00038c08 	.word	0x00038c08
   24078:	00038c3c 	.word	0x00038c3c
   2407c:	20003e9c 	.word	0x20003e9c
   24080:	00000263 	.word	0x00000263
   24084:	00038c6c 	.word	0x00038c6c
   24088:	00038c9c 	.word	0x00038c9c
   2408c:	00023219 	.word	0x00023219
   24090:	0000028e 	.word	0x0000028e
   24094:	00038ccc 	.word	0x00038ccc
   24098:	00038d00 	.word	0x00038d00
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   2409c:	683a      	ldr	r2, [r7, #0]
   2409e:	2380      	movs	r3, #128	; 0x80
   240a0:	019b      	lsls	r3, r3, #6
   240a2:	429a      	cmp	r2, r3
   240a4:	d802      	bhi.n	240ac <spi_cmd_complete+0x7cc>
						nbytes = sz;
   240a6:	683b      	ldr	r3, [r7, #0]
   240a8:	65bb      	str	r3, [r7, #88]	; 0x58
   240aa:	e002      	b.n	240b2 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   240ac:	2380      	movs	r3, #128	; 0x80
   240ae:	019b      	lsls	r3, r3, #6
   240b0:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   240b2:	230a      	movs	r3, #10
   240b4:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   240b6:	2317      	movs	r3, #23
   240b8:	18fb      	adds	r3, r7, r3
   240ba:	2101      	movs	r1, #1
   240bc:	0018      	movs	r0, r3
   240be:	4b3b      	ldr	r3, [pc, #236]	; (241ac <spi_cmd_complete+0x8cc>)
   240c0:	4798      	blx	r3
   240c2:	1e03      	subs	r3, r0, #0
   240c4:	d011      	beq.n	240ea <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   240c6:	23ae      	movs	r3, #174	; 0xae
   240c8:	009a      	lsls	r2, r3, #2
   240ca:	4939      	ldr	r1, [pc, #228]	; (241b0 <spi_cmd_complete+0x8d0>)
   240cc:	4b39      	ldr	r3, [pc, #228]	; (241b4 <spi_cmd_complete+0x8d4>)
   240ce:	0018      	movs	r0, r3
   240d0:	4b39      	ldr	r3, [pc, #228]	; (241b8 <spi_cmd_complete+0x8d8>)
   240d2:	4798      	blx	r3
   240d4:	4b39      	ldr	r3, [pc, #228]	; (241bc <spi_cmd_complete+0x8dc>)
   240d6:	0018      	movs	r0, r3
   240d8:	4b37      	ldr	r3, [pc, #220]	; (241b8 <spi_cmd_complete+0x8d8>)
   240da:	4798      	blx	r3
   240dc:	4b38      	ldr	r3, [pc, #224]	; (241c0 <spi_cmd_complete+0x8e0>)
   240de:	0018      	movs	r0, r3
   240e0:	4b35      	ldr	r3, [pc, #212]	; (241b8 <spi_cmd_complete+0x8d8>)
   240e2:	4798      	blx	r3
							result = N_FAIL;
   240e4:	2300      	movs	r3, #0
   240e6:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   240e8:	e010      	b.n	2410c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   240ea:	2317      	movs	r3, #23
   240ec:	18fb      	adds	r3, r7, r3
   240ee:	781b      	ldrb	r3, [r3, #0]
   240f0:	091b      	lsrs	r3, r3, #4
   240f2:	b2db      	uxtb	r3, r3
   240f4:	001a      	movs	r2, r3
   240f6:	230f      	movs	r3, #15
   240f8:	4013      	ands	r3, r2
   240fa:	2b0f      	cmp	r3, #15
   240fc:	d005      	beq.n	2410a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   240fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24100:	1e5a      	subs	r2, r3, #1
   24102:	667a      	str	r2, [r7, #100]	; 0x64
   24104:	2b00      	cmp	r3, #0
   24106:	d1d6      	bne.n	240b6 <spi_cmd_complete+0x7d6>
   24108:	e000      	b.n	2410c <spi_cmd_complete+0x82c>
							break;
   2410a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   2410c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2410e:	2b00      	cmp	r3, #0
   24110:	d046      	beq.n	241a0 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24114:	687a      	ldr	r2, [r7, #4]
   24116:	18d3      	adds	r3, r2, r3
   24118:	6dba      	ldr	r2, [r7, #88]	; 0x58
   2411a:	b292      	uxth	r2, r2
   2411c:	0011      	movs	r1, r2
   2411e:	0018      	movs	r0, r3
   24120:	4b22      	ldr	r3, [pc, #136]	; (241ac <spi_cmd_complete+0x8cc>)
   24122:	4798      	blx	r3
   24124:	1e03      	subs	r3, r0, #0
   24126:	d011      	beq.n	2414c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24128:	23b2      	movs	r3, #178	; 0xb2
   2412a:	009a      	lsls	r2, r3, #2
   2412c:	4920      	ldr	r1, [pc, #128]	; (241b0 <spi_cmd_complete+0x8d0>)
   2412e:	4b21      	ldr	r3, [pc, #132]	; (241b4 <spi_cmd_complete+0x8d4>)
   24130:	0018      	movs	r0, r3
   24132:	4b21      	ldr	r3, [pc, #132]	; (241b8 <spi_cmd_complete+0x8d8>)
   24134:	4798      	blx	r3
   24136:	4b23      	ldr	r3, [pc, #140]	; (241c4 <spi_cmd_complete+0x8e4>)
   24138:	0018      	movs	r0, r3
   2413a:	4b1f      	ldr	r3, [pc, #124]	; (241b8 <spi_cmd_complete+0x8d8>)
   2413c:	4798      	blx	r3
   2413e:	4b20      	ldr	r3, [pc, #128]	; (241c0 <spi_cmd_complete+0x8e0>)
   24140:	0018      	movs	r0, r3
   24142:	4b1d      	ldr	r3, [pc, #116]	; (241b8 <spi_cmd_complete+0x8d8>)
   24144:	4798      	blx	r3
						result = N_FAIL;
   24146:	2300      	movs	r3, #0
   24148:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   2414a:	e02a      	b.n	241a2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   2414c:	4b1e      	ldr	r3, [pc, #120]	; (241c8 <spi_cmd_complete+0x8e8>)
   2414e:	781b      	ldrb	r3, [r3, #0]
   24150:	2b00      	cmp	r3, #0
   24152:	d118      	bne.n	24186 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24154:	2314      	movs	r3, #20
   24156:	18fb      	adds	r3, r7, r3
   24158:	2102      	movs	r1, #2
   2415a:	0018      	movs	r0, r3
   2415c:	4b13      	ldr	r3, [pc, #76]	; (241ac <spi_cmd_complete+0x8cc>)
   2415e:	4798      	blx	r3
   24160:	1e03      	subs	r3, r0, #0
   24162:	d010      	beq.n	24186 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24164:	4a19      	ldr	r2, [pc, #100]	; (241cc <spi_cmd_complete+0x8ec>)
   24166:	4912      	ldr	r1, [pc, #72]	; (241b0 <spi_cmd_complete+0x8d0>)
   24168:	4b12      	ldr	r3, [pc, #72]	; (241b4 <spi_cmd_complete+0x8d4>)
   2416a:	0018      	movs	r0, r3
   2416c:	4b12      	ldr	r3, [pc, #72]	; (241b8 <spi_cmd_complete+0x8d8>)
   2416e:	4798      	blx	r3
   24170:	4b17      	ldr	r3, [pc, #92]	; (241d0 <spi_cmd_complete+0x8f0>)
   24172:	0018      	movs	r0, r3
   24174:	4b10      	ldr	r3, [pc, #64]	; (241b8 <spi_cmd_complete+0x8d8>)
   24176:	4798      	blx	r3
   24178:	4b11      	ldr	r3, [pc, #68]	; (241c0 <spi_cmd_complete+0x8e0>)
   2417a:	0018      	movs	r0, r3
   2417c:	4b0e      	ldr	r3, [pc, #56]	; (241b8 <spi_cmd_complete+0x8d8>)
   2417e:	4798      	blx	r3
							result = N_FAIL;
   24180:	2300      	movs	r3, #0
   24182:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24184:	e00d      	b.n	241a2 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   24186:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2418a:	18d3      	adds	r3, r2, r3
   2418c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   2418e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24190:	683a      	ldr	r2, [r7, #0]
   24192:	1ad3      	subs	r3, r2, r3
   24194:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   24196:	683b      	ldr	r3, [r7, #0]
   24198:	2b00      	cmp	r3, #0
   2419a:	d000      	beq.n	2419e <spi_cmd_complete+0x8be>
   2419c:	e77e      	b.n	2409c <spi_cmd_complete+0x7bc>
   2419e:	e000      	b.n	241a2 <spi_cmd_complete+0x8c2>
						break;
   241a0:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   241a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   241a4:	0018      	movs	r0, r3
   241a6:	46bd      	mov	sp, r7
   241a8:	b01f      	add	sp, #124	; 0x7c
   241aa:	bd90      	pop	{r4, r7, pc}
   241ac:	00023219 	.word	0x00023219
   241b0:	000390e8 	.word	0x000390e8
   241b4:	00038ad4 	.word	0x00038ad4
   241b8:	0001e189 	.word	0x0001e189
   241bc:	00038d38 	.word	0x00038d38
   241c0:	00038b14 	.word	0x00038b14
   241c4:	00038ccc 	.word	0x00038ccc
   241c8:	20003e9c 	.word	0x20003e9c
   241cc:	000002d2 	.word	0x000002d2
   241d0:	00038d00 	.word	0x00038d00

000241d4 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   241d4:	b580      	push	{r7, lr}
   241d6:	b086      	sub	sp, #24
   241d8:	af00      	add	r7, sp, #0
   241da:	6078      	str	r0, [r7, #4]
   241dc:	000a      	movs	r2, r1
   241de:	1cbb      	adds	r3, r7, #2
   241e0:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   241e2:	2313      	movs	r3, #19
   241e4:	18fb      	adds	r3, r7, r3
   241e6:	2201      	movs	r2, #1
   241e8:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   241ea:	230c      	movs	r3, #12
   241ec:	18fb      	adds	r3, r7, r3
   241ee:	2200      	movs	r2, #0
   241f0:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   241f2:	2316      	movs	r3, #22
   241f4:	18fb      	adds	r3, r7, r3
   241f6:	2200      	movs	r2, #0
   241f8:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   241fa:	1cbb      	adds	r3, r7, #2
   241fc:	881a      	ldrh	r2, [r3, #0]
   241fe:	2380      	movs	r3, #128	; 0x80
   24200:	019b      	lsls	r3, r3, #6
   24202:	429a      	cmp	r2, r3
   24204:	d805      	bhi.n	24212 <spi_data_write+0x3e>
			nbytes = sz;
   24206:	2314      	movs	r3, #20
   24208:	18fb      	adds	r3, r7, r3
   2420a:	1cba      	adds	r2, r7, #2
   2420c:	8812      	ldrh	r2, [r2, #0]
   2420e:	801a      	strh	r2, [r3, #0]
   24210:	e004      	b.n	2421c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   24212:	2314      	movs	r3, #20
   24214:	18fb      	adds	r3, r7, r3
   24216:	2280      	movs	r2, #128	; 0x80
   24218:	0192      	lsls	r2, r2, #6
   2421a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   2421c:	2311      	movs	r3, #17
   2421e:	18fb      	adds	r3, r7, r3
   24220:	22f0      	movs	r2, #240	; 0xf0
   24222:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   24224:	2316      	movs	r3, #22
   24226:	18fb      	adds	r3, r7, r3
   24228:	2200      	movs	r2, #0
   2422a:	5e9b      	ldrsh	r3, [r3, r2]
   2422c:	2b00      	cmp	r3, #0
   2422e:	d10f      	bne.n	24250 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   24230:	1cbb      	adds	r3, r7, #2
   24232:	881a      	ldrh	r2, [r3, #0]
   24234:	2380      	movs	r3, #128	; 0x80
   24236:	019b      	lsls	r3, r3, #6
   24238:	429a      	cmp	r2, r3
   2423a:	d804      	bhi.n	24246 <spi_data_write+0x72>
				order = 0x3;
   2423c:	2312      	movs	r3, #18
   2423e:	18fb      	adds	r3, r7, r3
   24240:	2203      	movs	r2, #3
   24242:	701a      	strb	r2, [r3, #0]
   24244:	e013      	b.n	2426e <spi_data_write+0x9a>
			else
				order = 0x1;
   24246:	2312      	movs	r3, #18
   24248:	18fb      	adds	r3, r7, r3
   2424a:	2201      	movs	r2, #1
   2424c:	701a      	strb	r2, [r3, #0]
   2424e:	e00e      	b.n	2426e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   24250:	1cbb      	adds	r3, r7, #2
   24252:	881a      	ldrh	r2, [r3, #0]
   24254:	2380      	movs	r3, #128	; 0x80
   24256:	019b      	lsls	r3, r3, #6
   24258:	429a      	cmp	r2, r3
   2425a:	d804      	bhi.n	24266 <spi_data_write+0x92>
				order = 0x3;
   2425c:	2312      	movs	r3, #18
   2425e:	18fb      	adds	r3, r7, r3
   24260:	2203      	movs	r2, #3
   24262:	701a      	strb	r2, [r3, #0]
   24264:	e003      	b.n	2426e <spi_data_write+0x9a>
			else
				order = 0x2;
   24266:	2312      	movs	r3, #18
   24268:	18fb      	adds	r3, r7, r3
   2426a:	2202      	movs	r2, #2
   2426c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   2426e:	2311      	movs	r3, #17
   24270:	18fb      	adds	r3, r7, r3
   24272:	781a      	ldrb	r2, [r3, #0]
   24274:	2312      	movs	r3, #18
   24276:	18fb      	adds	r3, r7, r3
   24278:	781b      	ldrb	r3, [r3, #0]
   2427a:	4313      	orrs	r3, r2
   2427c:	b2da      	uxtb	r2, r3
   2427e:	2311      	movs	r3, #17
   24280:	18fb      	adds	r3, r7, r3
   24282:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   24284:	2311      	movs	r3, #17
   24286:	18fb      	adds	r3, r7, r3
   24288:	2101      	movs	r1, #1
   2428a:	0018      	movs	r0, r3
   2428c:	4b3c      	ldr	r3, [pc, #240]	; (24380 <spi_data_write+0x1ac>)
   2428e:	4798      	blx	r3
   24290:	1e03      	subs	r3, r0, #0
   24292:	d012      	beq.n	242ba <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   24294:	4a3b      	ldr	r2, [pc, #236]	; (24384 <spi_data_write+0x1b0>)
   24296:	493c      	ldr	r1, [pc, #240]	; (24388 <spi_data_write+0x1b4>)
   24298:	4b3c      	ldr	r3, [pc, #240]	; (2438c <spi_data_write+0x1b8>)
   2429a:	0018      	movs	r0, r3
   2429c:	4b3c      	ldr	r3, [pc, #240]	; (24390 <spi_data_write+0x1bc>)
   2429e:	4798      	blx	r3
   242a0:	4b3c      	ldr	r3, [pc, #240]	; (24394 <spi_data_write+0x1c0>)
   242a2:	0018      	movs	r0, r3
   242a4:	4b3a      	ldr	r3, [pc, #232]	; (24390 <spi_data_write+0x1bc>)
   242a6:	4798      	blx	r3
   242a8:	4b3b      	ldr	r3, [pc, #236]	; (24398 <spi_data_write+0x1c4>)
   242aa:	0018      	movs	r0, r3
   242ac:	4b38      	ldr	r3, [pc, #224]	; (24390 <spi_data_write+0x1bc>)
   242ae:	4798      	blx	r3
			result = N_FAIL;
   242b0:	2313      	movs	r3, #19
   242b2:	18fb      	adds	r3, r7, r3
   242b4:	2200      	movs	r2, #0
   242b6:	701a      	strb	r2, [r3, #0]
			break;
   242b8:	e059      	b.n	2436e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   242ba:	2316      	movs	r3, #22
   242bc:	18fb      	adds	r3, r7, r3
   242be:	2200      	movs	r2, #0
   242c0:	5e9b      	ldrsh	r3, [r3, r2]
   242c2:	687a      	ldr	r2, [r7, #4]
   242c4:	18d2      	adds	r2, r2, r3
   242c6:	2314      	movs	r3, #20
   242c8:	18fb      	adds	r3, r7, r3
   242ca:	881b      	ldrh	r3, [r3, #0]
   242cc:	0019      	movs	r1, r3
   242ce:	0010      	movs	r0, r2
   242d0:	4b2b      	ldr	r3, [pc, #172]	; (24380 <spi_data_write+0x1ac>)
   242d2:	4798      	blx	r3
   242d4:	1e03      	subs	r3, r0, #0
   242d6:	d012      	beq.n	242fe <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   242d8:	4a30      	ldr	r2, [pc, #192]	; (2439c <spi_data_write+0x1c8>)
   242da:	492b      	ldr	r1, [pc, #172]	; (24388 <spi_data_write+0x1b4>)
   242dc:	4b2b      	ldr	r3, [pc, #172]	; (2438c <spi_data_write+0x1b8>)
   242de:	0018      	movs	r0, r3
   242e0:	4b2b      	ldr	r3, [pc, #172]	; (24390 <spi_data_write+0x1bc>)
   242e2:	4798      	blx	r3
   242e4:	4b2e      	ldr	r3, [pc, #184]	; (243a0 <spi_data_write+0x1cc>)
   242e6:	0018      	movs	r0, r3
   242e8:	4b29      	ldr	r3, [pc, #164]	; (24390 <spi_data_write+0x1bc>)
   242ea:	4798      	blx	r3
   242ec:	4b2a      	ldr	r3, [pc, #168]	; (24398 <spi_data_write+0x1c4>)
   242ee:	0018      	movs	r0, r3
   242f0:	4b27      	ldr	r3, [pc, #156]	; (24390 <spi_data_write+0x1bc>)
   242f2:	4798      	blx	r3
			result = N_FAIL;
   242f4:	2313      	movs	r3, #19
   242f6:	18fb      	adds	r3, r7, r3
   242f8:	2200      	movs	r2, #0
   242fa:	701a      	strb	r2, [r3, #0]
			break;
   242fc:	e037      	b.n	2436e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   242fe:	4b29      	ldr	r3, [pc, #164]	; (243a4 <spi_data_write+0x1d0>)
   24300:	781b      	ldrb	r3, [r3, #0]
   24302:	2b00      	cmp	r3, #0
   24304:	d11b      	bne.n	2433e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   24306:	230c      	movs	r3, #12
   24308:	18fb      	adds	r3, r7, r3
   2430a:	2102      	movs	r1, #2
   2430c:	0018      	movs	r0, r3
   2430e:	4b1c      	ldr	r3, [pc, #112]	; (24380 <spi_data_write+0x1ac>)
   24310:	4798      	blx	r3
   24312:	1e03      	subs	r3, r0, #0
   24314:	d013      	beq.n	2433e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   24316:	23d7      	movs	r3, #215	; 0xd7
   24318:	009a      	lsls	r2, r3, #2
   2431a:	491b      	ldr	r1, [pc, #108]	; (24388 <spi_data_write+0x1b4>)
   2431c:	4b1b      	ldr	r3, [pc, #108]	; (2438c <spi_data_write+0x1b8>)
   2431e:	0018      	movs	r0, r3
   24320:	4b1b      	ldr	r3, [pc, #108]	; (24390 <spi_data_write+0x1bc>)
   24322:	4798      	blx	r3
   24324:	4b20      	ldr	r3, [pc, #128]	; (243a8 <spi_data_write+0x1d4>)
   24326:	0018      	movs	r0, r3
   24328:	4b19      	ldr	r3, [pc, #100]	; (24390 <spi_data_write+0x1bc>)
   2432a:	4798      	blx	r3
   2432c:	4b1a      	ldr	r3, [pc, #104]	; (24398 <spi_data_write+0x1c4>)
   2432e:	0018      	movs	r0, r3
   24330:	4b17      	ldr	r3, [pc, #92]	; (24390 <spi_data_write+0x1bc>)
   24332:	4798      	blx	r3
				result = N_FAIL;
   24334:	2313      	movs	r3, #19
   24336:	18fb      	adds	r3, r7, r3
   24338:	2200      	movs	r2, #0
   2433a:	701a      	strb	r2, [r3, #0]
				break;
   2433c:	e017      	b.n	2436e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   2433e:	2316      	movs	r3, #22
   24340:	18fb      	adds	r3, r7, r3
   24342:	881a      	ldrh	r2, [r3, #0]
   24344:	2314      	movs	r3, #20
   24346:	18fb      	adds	r3, r7, r3
   24348:	881b      	ldrh	r3, [r3, #0]
   2434a:	18d3      	adds	r3, r2, r3
   2434c:	b29a      	uxth	r2, r3
   2434e:	2316      	movs	r3, #22
   24350:	18fb      	adds	r3, r7, r3
   24352:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   24354:	1cbb      	adds	r3, r7, #2
   24356:	1cb9      	adds	r1, r7, #2
   24358:	2214      	movs	r2, #20
   2435a:	18ba      	adds	r2, r7, r2
   2435c:	8809      	ldrh	r1, [r1, #0]
   2435e:	8812      	ldrh	r2, [r2, #0]
   24360:	1a8a      	subs	r2, r1, r2
   24362:	801a      	strh	r2, [r3, #0]
	} while (sz);
   24364:	1cbb      	adds	r3, r7, #2
   24366:	881b      	ldrh	r3, [r3, #0]
   24368:	2b00      	cmp	r3, #0
   2436a:	d000      	beq.n	2436e <spi_data_write+0x19a>
   2436c:	e745      	b.n	241fa <spi_data_write+0x26>


	return result;
   2436e:	2313      	movs	r3, #19
   24370:	18fb      	adds	r3, r7, r3
   24372:	781b      	ldrb	r3, [r3, #0]
   24374:	b25b      	sxtb	r3, r3
}
   24376:	0018      	movs	r0, r3
   24378:	46bd      	mov	sp, r7
   2437a:	b006      	add	sp, #24
   2437c:	bd80      	pop	{r7, pc}
   2437e:	46c0      	nop			; (mov r8, r8)
   24380:	0002325d 	.word	0x0002325d
   24384:	00000349 	.word	0x00000349
   24388:	000390fc 	.word	0x000390fc
   2438c:	00038ad4 	.word	0x00038ad4
   24390:	0001e189 	.word	0x0001e189
   24394:	00038d9c 	.word	0x00038d9c
   24398:	00038b14 	.word	0x00038b14
   2439c:	00000352 	.word	0x00000352
   243a0:	00038dd4 	.word	0x00038dd4
   243a4:	20003e9c 	.word	0x20003e9c
   243a8:	00038e08 	.word	0x00038e08

000243ac <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   243ac:	b590      	push	{r4, r7, lr}
   243ae:	b087      	sub	sp, #28
   243b0:	af02      	add	r7, sp, #8
   243b2:	6078      	str	r0, [r7, #4]
   243b4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   243b6:	230f      	movs	r3, #15
   243b8:	18fb      	adds	r3, r7, r3
   243ba:	220a      	movs	r2, #10
   243bc:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   243be:	230c      	movs	r3, #12
   243c0:	18fb      	adds	r3, r7, r3
   243c2:	2201      	movs	r2, #1
   243c4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   243c6:	230e      	movs	r3, #14
   243c8:	18fb      	adds	r3, r7, r3
   243ca:	22c9      	movs	r2, #201	; 0xc9
   243cc:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   243ce:	230d      	movs	r3, #13
   243d0:	18fb      	adds	r3, r7, r3
   243d2:	2200      	movs	r2, #0
   243d4:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   243d6:	687b      	ldr	r3, [r7, #4]
   243d8:	2b30      	cmp	r3, #48	; 0x30
   243da:	d808      	bhi.n	243ee <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   243dc:	230e      	movs	r3, #14
   243de:	18fb      	adds	r3, r7, r3
   243e0:	22c3      	movs	r2, #195	; 0xc3
   243e2:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   243e4:	230d      	movs	r3, #13
   243e6:	18fb      	adds	r3, r7, r3
   243e8:	2201      	movs	r2, #1
   243ea:	701a      	strb	r2, [r3, #0]
   243ec:	e007      	b.n	243fe <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   243ee:	230e      	movs	r3, #14
   243f0:	18fb      	adds	r3, r7, r3
   243f2:	22c9      	movs	r2, #201	; 0xc9
   243f4:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   243f6:	230d      	movs	r3, #13
   243f8:	18fb      	adds	r3, r7, r3
   243fa:	2200      	movs	r2, #0
   243fc:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   243fe:	003a      	movs	r2, r7
   24400:	6879      	ldr	r1, [r7, #4]
   24402:	230e      	movs	r3, #14
   24404:	18fb      	adds	r3, r7, r3
   24406:	7818      	ldrb	r0, [r3, #0]
   24408:	230d      	movs	r3, #13
   2440a:	18fb      	adds	r3, r7, r3
   2440c:	781b      	ldrb	r3, [r3, #0]
   2440e:	9300      	str	r3, [sp, #0]
   24410:	2304      	movs	r3, #4
   24412:	4c2e      	ldr	r4, [pc, #184]	; (244cc <spi_write_reg+0x120>)
   24414:	47a0      	blx	r4
   24416:	0002      	movs	r2, r0
   24418:	230c      	movs	r3, #12
   2441a:	18fb      	adds	r3, r7, r3
   2441c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2441e:	230c      	movs	r3, #12
   24420:	18fb      	adds	r3, r7, r3
   24422:	781b      	ldrb	r3, [r3, #0]
   24424:	b25b      	sxtb	r3, r3
   24426:	2b01      	cmp	r3, #1
   24428:	d010      	beq.n	2444c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   2442a:	4a29      	ldr	r2, [pc, #164]	; (244d0 <spi_write_reg+0x124>)
   2442c:	4929      	ldr	r1, [pc, #164]	; (244d4 <spi_write_reg+0x128>)
   2442e:	4b2a      	ldr	r3, [pc, #168]	; (244d8 <spi_write_reg+0x12c>)
   24430:	0018      	movs	r0, r3
   24432:	4b2a      	ldr	r3, [pc, #168]	; (244dc <spi_write_reg+0x130>)
   24434:	4798      	blx	r3
   24436:	687a      	ldr	r2, [r7, #4]
   24438:	4b29      	ldr	r3, [pc, #164]	; (244e0 <spi_write_reg+0x134>)
   2443a:	0011      	movs	r1, r2
   2443c:	0018      	movs	r0, r3
   2443e:	4b27      	ldr	r3, [pc, #156]	; (244dc <spi_write_reg+0x130>)
   24440:	4798      	blx	r3
   24442:	4b28      	ldr	r3, [pc, #160]	; (244e4 <spi_write_reg+0x138>)
   24444:	0018      	movs	r0, r3
   24446:	4b25      	ldr	r3, [pc, #148]	; (244dc <spi_write_reg+0x130>)
   24448:	4798      	blx	r3
		goto _FAIL_;
   2444a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   2444c:	230c      	movs	r3, #12
   2444e:	18fb      	adds	r3, r7, r3
   24450:	781b      	ldrb	r3, [r3, #0]
   24452:	b25b      	sxtb	r3, r3
   24454:	2b01      	cmp	r3, #1
   24456:	d030      	beq.n	244ba <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   24458:	2001      	movs	r0, #1
   2445a:	4b23      	ldr	r3, [pc, #140]	; (244e8 <spi_write_reg+0x13c>)
   2445c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2445e:	2300      	movs	r3, #0
   24460:	9300      	str	r3, [sp, #0]
   24462:	2300      	movs	r3, #0
   24464:	2200      	movs	r2, #0
   24466:	2100      	movs	r1, #0
   24468:	20cf      	movs	r0, #207	; 0xcf
   2446a:	4c20      	ldr	r4, [pc, #128]	; (244ec <spi_write_reg+0x140>)
   2446c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2446e:	20cf      	movs	r0, #207	; 0xcf
   24470:	4b1f      	ldr	r3, [pc, #124]	; (244f0 <spi_write_reg+0x144>)
   24472:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   24474:	23ea      	movs	r3, #234	; 0xea
   24476:	009a      	lsls	r2, r3, #2
   24478:	4916      	ldr	r1, [pc, #88]	; (244d4 <spi_write_reg+0x128>)
   2447a:	4b17      	ldr	r3, [pc, #92]	; (244d8 <spi_write_reg+0x12c>)
   2447c:	0018      	movs	r0, r3
   2447e:	4b17      	ldr	r3, [pc, #92]	; (244dc <spi_write_reg+0x130>)
   24480:	4798      	blx	r3
   24482:	230f      	movs	r3, #15
   24484:	18fb      	adds	r3, r7, r3
   24486:	7819      	ldrb	r1, [r3, #0]
   24488:	683b      	ldr	r3, [r7, #0]
   2448a:	687a      	ldr	r2, [r7, #4]
   2448c:	4819      	ldr	r0, [pc, #100]	; (244f4 <spi_write_reg+0x148>)
   2448e:	4c13      	ldr	r4, [pc, #76]	; (244dc <spi_write_reg+0x130>)
   24490:	47a0      	blx	r4
   24492:	4b14      	ldr	r3, [pc, #80]	; (244e4 <spi_write_reg+0x138>)
   24494:	0018      	movs	r0, r3
   24496:	4b11      	ldr	r3, [pc, #68]	; (244dc <spi_write_reg+0x130>)
   24498:	4798      	blx	r3
		nm_bsp_sleep(1);
   2449a:	2001      	movs	r0, #1
   2449c:	4b12      	ldr	r3, [pc, #72]	; (244e8 <spi_write_reg+0x13c>)
   2449e:	4798      	blx	r3
		retry--;
   244a0:	230f      	movs	r3, #15
   244a2:	18fb      	adds	r3, r7, r3
   244a4:	781a      	ldrb	r2, [r3, #0]
   244a6:	230f      	movs	r3, #15
   244a8:	18fb      	adds	r3, r7, r3
   244aa:	3a01      	subs	r2, #1
   244ac:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   244ae:	230f      	movs	r3, #15
   244b0:	18fb      	adds	r3, r7, r3
   244b2:	781b      	ldrb	r3, [r3, #0]
   244b4:	2b00      	cmp	r3, #0
   244b6:	d000      	beq.n	244ba <spi_write_reg+0x10e>
   244b8:	e78d      	b.n	243d6 <spi_write_reg+0x2a>
	}

	return result;
   244ba:	230c      	movs	r3, #12
   244bc:	18fb      	adds	r3, r7, r3
   244be:	781b      	ldrb	r3, [r3, #0]
   244c0:	b25b      	sxtb	r3, r3
}
   244c2:	0018      	movs	r0, r3
   244c4:	46bd      	mov	sp, r7
   244c6:	b005      	add	sp, #20
   244c8:	bd90      	pop	{r4, r7, pc}
   244ca:	46c0      	nop			; (mov r8, r8)
   244cc:	000238e1 	.word	0x000238e1
   244d0:	0000039d 	.word	0x0000039d
   244d4:	0003910c 	.word	0x0003910c
   244d8:	00038ad4 	.word	0x00038ad4
   244dc:	0001e189 	.word	0x0001e189
   244e0:	00038e40 	.word	0x00038e40
   244e4:	00038b14 	.word	0x00038b14
   244e8:	00020221 	.word	0x00020221
   244ec:	00023365 	.word	0x00023365
   244f0:	000237a5 	.word	0x000237a5
   244f4:	00038e6c 	.word	0x00038e6c

000244f8 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   244f8:	b590      	push	{r4, r7, lr}
   244fa:	b089      	sub	sp, #36	; 0x24
   244fc:	af02      	add	r7, sp, #8
   244fe:	60f8      	str	r0, [r7, #12]
   24500:	60b9      	str	r1, [r7, #8]
   24502:	1dbb      	adds	r3, r7, #6
   24504:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   24506:	2316      	movs	r3, #22
   24508:	18fb      	adds	r3, r7, r3
   2450a:	220a      	movs	r2, #10
   2450c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   2450e:	2315      	movs	r3, #21
   24510:	18fb      	adds	r3, r7, r3
   24512:	22c7      	movs	r2, #199	; 0xc7
   24514:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   24516:	1dbb      	adds	r3, r7, #6
   24518:	881a      	ldrh	r2, [r3, #0]
   2451a:	68f9      	ldr	r1, [r7, #12]
   2451c:	2315      	movs	r3, #21
   2451e:	18fb      	adds	r3, r7, r3
   24520:	7818      	ldrb	r0, [r3, #0]
   24522:	2300      	movs	r3, #0
   24524:	9300      	str	r3, [sp, #0]
   24526:	0013      	movs	r3, r2
   24528:	2200      	movs	r2, #0
   2452a:	4c4d      	ldr	r4, [pc, #308]	; (24660 <nm_spi_write+0x168>)
   2452c:	47a0      	blx	r4
   2452e:	0002      	movs	r2, r0
   24530:	2317      	movs	r3, #23
   24532:	18fb      	adds	r3, r7, r3
   24534:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24536:	2317      	movs	r3, #23
   24538:	18fb      	adds	r3, r7, r3
   2453a:	781b      	ldrb	r3, [r3, #0]
   2453c:	b25b      	sxtb	r3, r3
   2453e:	2b01      	cmp	r3, #1
   24540:	d010      	beq.n	24564 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   24542:	4a48      	ldr	r2, [pc, #288]	; (24664 <nm_spi_write+0x16c>)
   24544:	4948      	ldr	r1, [pc, #288]	; (24668 <nm_spi_write+0x170>)
   24546:	4b49      	ldr	r3, [pc, #292]	; (2466c <nm_spi_write+0x174>)
   24548:	0018      	movs	r0, r3
   2454a:	4b49      	ldr	r3, [pc, #292]	; (24670 <nm_spi_write+0x178>)
   2454c:	4798      	blx	r3
   2454e:	68fa      	ldr	r2, [r7, #12]
   24550:	4b48      	ldr	r3, [pc, #288]	; (24674 <nm_spi_write+0x17c>)
   24552:	0011      	movs	r1, r2
   24554:	0018      	movs	r0, r3
   24556:	4b46      	ldr	r3, [pc, #280]	; (24670 <nm_spi_write+0x178>)
   24558:	4798      	blx	r3
   2455a:	4b47      	ldr	r3, [pc, #284]	; (24678 <nm_spi_write+0x180>)
   2455c:	0018      	movs	r0, r3
   2455e:	4b44      	ldr	r3, [pc, #272]	; (24670 <nm_spi_write+0x178>)
   24560:	4798      	blx	r3
		goto _FAIL_;
   24562:	e03e      	b.n	245e2 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   24564:	2317      	movs	r3, #23
   24566:	18fc      	adds	r4, r7, r3
   24568:	1dbb      	adds	r3, r7, #6
   2456a:	881a      	ldrh	r2, [r3, #0]
   2456c:	68bb      	ldr	r3, [r7, #8]
   2456e:	0011      	movs	r1, r2
   24570:	0018      	movs	r0, r3
   24572:	4b42      	ldr	r3, [pc, #264]	; (2467c <nm_spi_write+0x184>)
   24574:	4798      	blx	r3
   24576:	0003      	movs	r3, r0
   24578:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2457a:	2317      	movs	r3, #23
   2457c:	18fb      	adds	r3, r7, r3
   2457e:	781b      	ldrb	r3, [r3, #0]
   24580:	b25b      	sxtb	r3, r3
   24582:	2b01      	cmp	r3, #1
   24584:	d00e      	beq.n	245a4 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24586:	4a3e      	ldr	r2, [pc, #248]	; (24680 <nm_spi_write+0x188>)
   24588:	4937      	ldr	r1, [pc, #220]	; (24668 <nm_spi_write+0x170>)
   2458a:	4b38      	ldr	r3, [pc, #224]	; (2466c <nm_spi_write+0x174>)
   2458c:	0018      	movs	r0, r3
   2458e:	4b38      	ldr	r3, [pc, #224]	; (24670 <nm_spi_write+0x178>)
   24590:	4798      	blx	r3
   24592:	4b3c      	ldr	r3, [pc, #240]	; (24684 <nm_spi_write+0x18c>)
   24594:	0018      	movs	r0, r3
   24596:	4b36      	ldr	r3, [pc, #216]	; (24670 <nm_spi_write+0x178>)
   24598:	4798      	blx	r3
   2459a:	4b37      	ldr	r3, [pc, #220]	; (24678 <nm_spi_write+0x180>)
   2459c:	0018      	movs	r0, r3
   2459e:	4b34      	ldr	r3, [pc, #208]	; (24670 <nm_spi_write+0x178>)
   245a0:	4798      	blx	r3
		goto _FAIL_;
   245a2:	e01e      	b.n	245e2 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   245a4:	2317      	movs	r3, #23
   245a6:	18fc      	adds	r4, r7, r3
   245a8:	2315      	movs	r3, #21
   245aa:	18fb      	adds	r3, r7, r3
   245ac:	781b      	ldrb	r3, [r3, #0]
   245ae:	0018      	movs	r0, r3
   245b0:	4b35      	ldr	r3, [pc, #212]	; (24688 <nm_spi_write+0x190>)
   245b2:	4798      	blx	r3
   245b4:	0003      	movs	r3, r0
   245b6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   245b8:	2317      	movs	r3, #23
   245ba:	18fb      	adds	r3, r7, r3
   245bc:	781b      	ldrb	r3, [r3, #0]
   245be:	b25b      	sxtb	r3, r3
   245c0:	2b01      	cmp	r3, #1
   245c2:	d00e      	beq.n	245e2 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   245c4:	4a31      	ldr	r2, [pc, #196]	; (2468c <nm_spi_write+0x194>)
   245c6:	4928      	ldr	r1, [pc, #160]	; (24668 <nm_spi_write+0x170>)
   245c8:	4b28      	ldr	r3, [pc, #160]	; (2466c <nm_spi_write+0x174>)
   245ca:	0018      	movs	r0, r3
   245cc:	4b28      	ldr	r3, [pc, #160]	; (24670 <nm_spi_write+0x178>)
   245ce:	4798      	blx	r3
   245d0:	4b2c      	ldr	r3, [pc, #176]	; (24684 <nm_spi_write+0x18c>)
   245d2:	0018      	movs	r0, r3
   245d4:	4b26      	ldr	r3, [pc, #152]	; (24670 <nm_spi_write+0x178>)
   245d6:	4798      	blx	r3
   245d8:	4b27      	ldr	r3, [pc, #156]	; (24678 <nm_spi_write+0x180>)
   245da:	0018      	movs	r0, r3
   245dc:	4b24      	ldr	r3, [pc, #144]	; (24670 <nm_spi_write+0x178>)
   245de:	4798      	blx	r3
		goto _FAIL_;
   245e0:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   245e2:	2317      	movs	r3, #23
   245e4:	18fb      	adds	r3, r7, r3
   245e6:	781b      	ldrb	r3, [r3, #0]
   245e8:	b25b      	sxtb	r3, r3
   245ea:	2b01      	cmp	r3, #1
   245ec:	d030      	beq.n	24650 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   245ee:	2001      	movs	r0, #1
   245f0:	4b27      	ldr	r3, [pc, #156]	; (24690 <nm_spi_write+0x198>)
   245f2:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   245f4:	2300      	movs	r3, #0
   245f6:	9300      	str	r3, [sp, #0]
   245f8:	2300      	movs	r3, #0
   245fa:	2200      	movs	r2, #0
   245fc:	2100      	movs	r1, #0
   245fe:	20cf      	movs	r0, #207	; 0xcf
   24600:	4c24      	ldr	r4, [pc, #144]	; (24694 <nm_spi_write+0x19c>)
   24602:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24604:	20cf      	movs	r0, #207	; 0xcf
   24606:	4b24      	ldr	r3, [pc, #144]	; (24698 <nm_spi_write+0x1a0>)
   24608:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2460a:	4a24      	ldr	r2, [pc, #144]	; (2469c <nm_spi_write+0x1a4>)
   2460c:	4916      	ldr	r1, [pc, #88]	; (24668 <nm_spi_write+0x170>)
   2460e:	4b17      	ldr	r3, [pc, #92]	; (2466c <nm_spi_write+0x174>)
   24610:	0018      	movs	r0, r3
   24612:	4b17      	ldr	r3, [pc, #92]	; (24670 <nm_spi_write+0x178>)
   24614:	4798      	blx	r3
   24616:	2316      	movs	r3, #22
   24618:	18fb      	adds	r3, r7, r3
   2461a:	7819      	ldrb	r1, [r3, #0]
   2461c:	1dbb      	adds	r3, r7, #6
   2461e:	881b      	ldrh	r3, [r3, #0]
   24620:	68fa      	ldr	r2, [r7, #12]
   24622:	481f      	ldr	r0, [pc, #124]	; (246a0 <nm_spi_write+0x1a8>)
   24624:	4c12      	ldr	r4, [pc, #72]	; (24670 <nm_spi_write+0x178>)
   24626:	47a0      	blx	r4
   24628:	4b13      	ldr	r3, [pc, #76]	; (24678 <nm_spi_write+0x180>)
   2462a:	0018      	movs	r0, r3
   2462c:	4b10      	ldr	r3, [pc, #64]	; (24670 <nm_spi_write+0x178>)
   2462e:	4798      	blx	r3
		nm_bsp_sleep(1);
   24630:	2001      	movs	r0, #1
   24632:	4b17      	ldr	r3, [pc, #92]	; (24690 <nm_spi_write+0x198>)
   24634:	4798      	blx	r3
		retry--;
   24636:	2316      	movs	r3, #22
   24638:	18fb      	adds	r3, r7, r3
   2463a:	781a      	ldrb	r2, [r3, #0]
   2463c:	2316      	movs	r3, #22
   2463e:	18fb      	adds	r3, r7, r3
   24640:	3a01      	subs	r2, #1
   24642:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24644:	2316      	movs	r3, #22
   24646:	18fb      	adds	r3, r7, r3
   24648:	781b      	ldrb	r3, [r3, #0]
   2464a:	2b00      	cmp	r3, #0
   2464c:	d000      	beq.n	24650 <nm_spi_write+0x158>
   2464e:	e762      	b.n	24516 <nm_spi_write+0x1e>
	}


	return result;
   24650:	2317      	movs	r3, #23
   24652:	18fb      	adds	r3, r7, r3
   24654:	781b      	ldrb	r3, [r3, #0]
   24656:	b25b      	sxtb	r3, r3
}
   24658:	0018      	movs	r0, r3
   2465a:	46bd      	mov	sp, r7
   2465c:	b007      	add	sp, #28
   2465e:	bd90      	pop	{r4, r7, pc}
   24660:	000238e1 	.word	0x000238e1
   24664:	000003cf 	.word	0x000003cf
   24668:	0003911c 	.word	0x0003911c
   2466c:	00038ad4 	.word	0x00038ad4
   24670:	0001e189 	.word	0x0001e189
   24674:	00038e88 	.word	0x00038e88
   24678:	00038b14 	.word	0x00038b14
   2467c:	000241d5 	.word	0x000241d5
   24680:	000003d9 	.word	0x000003d9
   24684:	00038eb8 	.word	0x00038eb8
   24688:	000236a5 	.word	0x000236a5
   2468c:	000003e1 	.word	0x000003e1
   24690:	00020221 	.word	0x00020221
   24694:	00023365 	.word	0x00023365
   24698:	000237a5 	.word	0x000237a5
   2469c:	000003eb 	.word	0x000003eb
   246a0:	00038ee0 	.word	0x00038ee0

000246a4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   246a4:	b590      	push	{r4, r7, lr}
   246a6:	b087      	sub	sp, #28
   246a8:	af02      	add	r7, sp, #8
   246aa:	6078      	str	r0, [r7, #4]
   246ac:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   246ae:	230f      	movs	r3, #15
   246b0:	18fb      	adds	r3, r7, r3
   246b2:	220a      	movs	r2, #10
   246b4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   246b6:	230c      	movs	r3, #12
   246b8:	18fb      	adds	r3, r7, r3
   246ba:	2201      	movs	r2, #1
   246bc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   246be:	230e      	movs	r3, #14
   246c0:	18fb      	adds	r3, r7, r3
   246c2:	22ca      	movs	r2, #202	; 0xca
   246c4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   246c6:	230d      	movs	r3, #13
   246c8:	18fb      	adds	r3, r7, r3
   246ca:	2200      	movs	r2, #0
   246cc:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   246ce:	687b      	ldr	r3, [r7, #4]
   246d0:	2bff      	cmp	r3, #255	; 0xff
   246d2:	d808      	bhi.n	246e6 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   246d4:	230e      	movs	r3, #14
   246d6:	18fb      	adds	r3, r7, r3
   246d8:	22c4      	movs	r2, #196	; 0xc4
   246da:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   246dc:	230d      	movs	r3, #13
   246de:	18fb      	adds	r3, r7, r3
   246e0:	2201      	movs	r2, #1
   246e2:	701a      	strb	r2, [r3, #0]
   246e4:	e007      	b.n	246f6 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   246e6:	230e      	movs	r3, #14
   246e8:	18fb      	adds	r3, r7, r3
   246ea:	22ca      	movs	r2, #202	; 0xca
   246ec:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   246ee:	230d      	movs	r3, #13
   246f0:	18fb      	adds	r3, r7, r3
   246f2:	2200      	movs	r2, #0
   246f4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   246f6:	2308      	movs	r3, #8
   246f8:	18fa      	adds	r2, r7, r3
   246fa:	6879      	ldr	r1, [r7, #4]
   246fc:	230e      	movs	r3, #14
   246fe:	18fb      	adds	r3, r7, r3
   24700:	7818      	ldrb	r0, [r3, #0]
   24702:	230d      	movs	r3, #13
   24704:	18fb      	adds	r3, r7, r3
   24706:	781b      	ldrb	r3, [r3, #0]
   24708:	9300      	str	r3, [sp, #0]
   2470a:	2304      	movs	r3, #4
   2470c:	4c37      	ldr	r4, [pc, #220]	; (247ec <spi_read_reg+0x148>)
   2470e:	47a0      	blx	r4
   24710:	0002      	movs	r2, r0
   24712:	230c      	movs	r3, #12
   24714:	18fb      	adds	r3, r7, r3
   24716:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24718:	230c      	movs	r3, #12
   2471a:	18fb      	adds	r3, r7, r3
   2471c:	781b      	ldrb	r3, [r3, #0]
   2471e:	b25b      	sxtb	r3, r3
   24720:	2b01      	cmp	r3, #1
   24722:	d010      	beq.n	24746 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   24724:	4a32      	ldr	r2, [pc, #200]	; (247f0 <spi_read_reg+0x14c>)
   24726:	4933      	ldr	r1, [pc, #204]	; (247f4 <spi_read_reg+0x150>)
   24728:	4b33      	ldr	r3, [pc, #204]	; (247f8 <spi_read_reg+0x154>)
   2472a:	0018      	movs	r0, r3
   2472c:	4b33      	ldr	r3, [pc, #204]	; (247fc <spi_read_reg+0x158>)
   2472e:	4798      	blx	r3
   24730:	687a      	ldr	r2, [r7, #4]
   24732:	4b33      	ldr	r3, [pc, #204]	; (24800 <spi_read_reg+0x15c>)
   24734:	0011      	movs	r1, r2
   24736:	0018      	movs	r0, r3
   24738:	4b30      	ldr	r3, [pc, #192]	; (247fc <spi_read_reg+0x158>)
   2473a:	4798      	blx	r3
   2473c:	4b31      	ldr	r3, [pc, #196]	; (24804 <spi_read_reg+0x160>)
   2473e:	0018      	movs	r0, r3
   24740:	4b2e      	ldr	r3, [pc, #184]	; (247fc <spi_read_reg+0x158>)
   24742:	4798      	blx	r3
		goto _FAIL_;
   24744:	e014      	b.n	24770 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   24746:	2308      	movs	r3, #8
   24748:	18fb      	adds	r3, r7, r3
   2474a:	781b      	ldrb	r3, [r3, #0]
   2474c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   2474e:	2308      	movs	r3, #8
   24750:	18fb      	adds	r3, r7, r3
   24752:	785b      	ldrb	r3, [r3, #1]
   24754:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   24756:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   24758:	2308      	movs	r3, #8
   2475a:	18fb      	adds	r3, r7, r3
   2475c:	789b      	ldrb	r3, [r3, #2]
   2475e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   24760:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   24762:	2308      	movs	r3, #8
   24764:	18fb      	adds	r3, r7, r3
   24766:	78db      	ldrb	r3, [r3, #3]
   24768:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2476a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   2476c:	683b      	ldr	r3, [r7, #0]
   2476e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   24770:	230c      	movs	r3, #12
   24772:	18fb      	adds	r3, r7, r3
   24774:	781b      	ldrb	r3, [r3, #0]
   24776:	b25b      	sxtb	r3, r3
   24778:	2b01      	cmp	r3, #1
   2477a:	d02f      	beq.n	247dc <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   2477c:	2001      	movs	r0, #1
   2477e:	4b22      	ldr	r3, [pc, #136]	; (24808 <spi_read_reg+0x164>)
   24780:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24782:	2300      	movs	r3, #0
   24784:	9300      	str	r3, [sp, #0]
   24786:	2300      	movs	r3, #0
   24788:	2200      	movs	r2, #0
   2478a:	2100      	movs	r1, #0
   2478c:	20cf      	movs	r0, #207	; 0xcf
   2478e:	4c1f      	ldr	r4, [pc, #124]	; (2480c <spi_read_reg+0x168>)
   24790:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24792:	20cf      	movs	r0, #207	; 0xcf
   24794:	4b1e      	ldr	r3, [pc, #120]	; (24810 <spi_read_reg+0x16c>)
   24796:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   24798:	4a1e      	ldr	r2, [pc, #120]	; (24814 <spi_read_reg+0x170>)
   2479a:	4916      	ldr	r1, [pc, #88]	; (247f4 <spi_read_reg+0x150>)
   2479c:	4b16      	ldr	r3, [pc, #88]	; (247f8 <spi_read_reg+0x154>)
   2479e:	0018      	movs	r0, r3
   247a0:	4b16      	ldr	r3, [pc, #88]	; (247fc <spi_read_reg+0x158>)
   247a2:	4798      	blx	r3
   247a4:	230f      	movs	r3, #15
   247a6:	18fb      	adds	r3, r7, r3
   247a8:	7819      	ldrb	r1, [r3, #0]
   247aa:	687a      	ldr	r2, [r7, #4]
   247ac:	4b1a      	ldr	r3, [pc, #104]	; (24818 <spi_read_reg+0x174>)
   247ae:	0018      	movs	r0, r3
   247b0:	4b12      	ldr	r3, [pc, #72]	; (247fc <spi_read_reg+0x158>)
   247b2:	4798      	blx	r3
   247b4:	4b13      	ldr	r3, [pc, #76]	; (24804 <spi_read_reg+0x160>)
   247b6:	0018      	movs	r0, r3
   247b8:	4b10      	ldr	r3, [pc, #64]	; (247fc <spi_read_reg+0x158>)
   247ba:	4798      	blx	r3
		nm_bsp_sleep(1);
   247bc:	2001      	movs	r0, #1
   247be:	4b12      	ldr	r3, [pc, #72]	; (24808 <spi_read_reg+0x164>)
   247c0:	4798      	blx	r3
		retry--;
   247c2:	230f      	movs	r3, #15
   247c4:	18fb      	adds	r3, r7, r3
   247c6:	781a      	ldrb	r2, [r3, #0]
   247c8:	230f      	movs	r3, #15
   247ca:	18fb      	adds	r3, r7, r3
   247cc:	3a01      	subs	r2, #1
   247ce:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   247d0:	230f      	movs	r3, #15
   247d2:	18fb      	adds	r3, r7, r3
   247d4:	781b      	ldrb	r3, [r3, #0]
   247d6:	2b00      	cmp	r3, #0
   247d8:	d000      	beq.n	247dc <spi_read_reg+0x138>
   247da:	e778      	b.n	246ce <spi_read_reg+0x2a>
	}
		
	return result;
   247dc:	230c      	movs	r3, #12
   247de:	18fb      	adds	r3, r7, r3
   247e0:	781b      	ldrb	r3, [r3, #0]
   247e2:	b25b      	sxtb	r3, r3
}
   247e4:	0018      	movs	r0, r3
   247e6:	46bd      	mov	sp, r7
   247e8:	b005      	add	sp, #20
   247ea:	bd90      	pop	{r4, r7, pc}
   247ec:	000238e1 	.word	0x000238e1
   247f0:	00000423 	.word	0x00000423
   247f4:	0003912c 	.word	0x0003912c
   247f8:	00038ad4 	.word	0x00038ad4
   247fc:	0001e189 	.word	0x0001e189
   24800:	00038efc 	.word	0x00038efc
   24804:	00038b14 	.word	0x00038b14
   24808:	00020221 	.word	0x00020221
   2480c:	00023365 	.word	0x00023365
   24810:	000237a5 	.word	0x000237a5
   24814:	00000435 	.word	0x00000435
   24818:	00038f28 	.word	0x00038f28

0002481c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   2481c:	b590      	push	{r4, r7, lr}
   2481e:	b089      	sub	sp, #36	; 0x24
   24820:	af02      	add	r7, sp, #8
   24822:	60f8      	str	r0, [r7, #12]
   24824:	60b9      	str	r1, [r7, #8]
   24826:	1dbb      	adds	r3, r7, #6
   24828:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   2482a:	2316      	movs	r3, #22
   2482c:	18fb      	adds	r3, r7, r3
   2482e:	22c8      	movs	r2, #200	; 0xc8
   24830:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   24832:	2317      	movs	r3, #23
   24834:	18fb      	adds	r3, r7, r3
   24836:	220a      	movs	r2, #10
   24838:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   2483a:	1dbb      	adds	r3, r7, #6
   2483c:	881c      	ldrh	r4, [r3, #0]
   2483e:	68ba      	ldr	r2, [r7, #8]
   24840:	68f9      	ldr	r1, [r7, #12]
   24842:	2316      	movs	r3, #22
   24844:	18fb      	adds	r3, r7, r3
   24846:	7818      	ldrb	r0, [r3, #0]
   24848:	2300      	movs	r3, #0
   2484a:	9300      	str	r3, [sp, #0]
   2484c:	0023      	movs	r3, r4
   2484e:	4c2e      	ldr	r4, [pc, #184]	; (24908 <nm_spi_read+0xec>)
   24850:	47a0      	blx	r4
   24852:	0002      	movs	r2, r0
   24854:	2315      	movs	r3, #21
   24856:	18fb      	adds	r3, r7, r3
   24858:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2485a:	2315      	movs	r3, #21
   2485c:	18fb      	adds	r3, r7, r3
   2485e:	781b      	ldrb	r3, [r3, #0]
   24860:	b25b      	sxtb	r3, r3
   24862:	2b01      	cmp	r3, #1
   24864:	d010      	beq.n	24888 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   24866:	4a29      	ldr	r2, [pc, #164]	; (2490c <nm_spi_read+0xf0>)
   24868:	4929      	ldr	r1, [pc, #164]	; (24910 <nm_spi_read+0xf4>)
   2486a:	4b2a      	ldr	r3, [pc, #168]	; (24914 <nm_spi_read+0xf8>)
   2486c:	0018      	movs	r0, r3
   2486e:	4b2a      	ldr	r3, [pc, #168]	; (24918 <nm_spi_read+0xfc>)
   24870:	4798      	blx	r3
   24872:	68fa      	ldr	r2, [r7, #12]
   24874:	4b29      	ldr	r3, [pc, #164]	; (2491c <nm_spi_read+0x100>)
   24876:	0011      	movs	r1, r2
   24878:	0018      	movs	r0, r3
   2487a:	4b27      	ldr	r3, [pc, #156]	; (24918 <nm_spi_read+0xfc>)
   2487c:	4798      	blx	r3
   2487e:	4b28      	ldr	r3, [pc, #160]	; (24920 <nm_spi_read+0x104>)
   24880:	0018      	movs	r0, r3
   24882:	4b25      	ldr	r3, [pc, #148]	; (24918 <nm_spi_read+0xfc>)
   24884:	4798      	blx	r3
		goto _FAIL_;
   24886:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   24888:	2315      	movs	r3, #21
   2488a:	18fb      	adds	r3, r7, r3
   2488c:	781b      	ldrb	r3, [r3, #0]
   2488e:	b25b      	sxtb	r3, r3
   24890:	2b01      	cmp	r3, #1
   24892:	d030      	beq.n	248f6 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   24894:	2001      	movs	r0, #1
   24896:	4b23      	ldr	r3, [pc, #140]	; (24924 <nm_spi_read+0x108>)
   24898:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2489a:	2300      	movs	r3, #0
   2489c:	9300      	str	r3, [sp, #0]
   2489e:	2300      	movs	r3, #0
   248a0:	2200      	movs	r2, #0
   248a2:	2100      	movs	r1, #0
   248a4:	20cf      	movs	r0, #207	; 0xcf
   248a6:	4c20      	ldr	r4, [pc, #128]	; (24928 <nm_spi_read+0x10c>)
   248a8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   248aa:	20cf      	movs	r0, #207	; 0xcf
   248ac:	4b1f      	ldr	r3, [pc, #124]	; (2492c <nm_spi_read+0x110>)
   248ae:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   248b0:	4a1f      	ldr	r2, [pc, #124]	; (24930 <nm_spi_read+0x114>)
   248b2:	4917      	ldr	r1, [pc, #92]	; (24910 <nm_spi_read+0xf4>)
   248b4:	4b17      	ldr	r3, [pc, #92]	; (24914 <nm_spi_read+0xf8>)
   248b6:	0018      	movs	r0, r3
   248b8:	4b17      	ldr	r3, [pc, #92]	; (24918 <nm_spi_read+0xfc>)
   248ba:	4798      	blx	r3
   248bc:	2317      	movs	r3, #23
   248be:	18fb      	adds	r3, r7, r3
   248c0:	7819      	ldrb	r1, [r3, #0]
   248c2:	1dbb      	adds	r3, r7, #6
   248c4:	881b      	ldrh	r3, [r3, #0]
   248c6:	68fa      	ldr	r2, [r7, #12]
   248c8:	481a      	ldr	r0, [pc, #104]	; (24934 <nm_spi_read+0x118>)
   248ca:	4c13      	ldr	r4, [pc, #76]	; (24918 <nm_spi_read+0xfc>)
   248cc:	47a0      	blx	r4
   248ce:	4b14      	ldr	r3, [pc, #80]	; (24920 <nm_spi_read+0x104>)
   248d0:	0018      	movs	r0, r3
   248d2:	4b11      	ldr	r3, [pc, #68]	; (24918 <nm_spi_read+0xfc>)
   248d4:	4798      	blx	r3
		nm_bsp_sleep(1);
   248d6:	2001      	movs	r0, #1
   248d8:	4b12      	ldr	r3, [pc, #72]	; (24924 <nm_spi_read+0x108>)
   248da:	4798      	blx	r3
		retry--;
   248dc:	2317      	movs	r3, #23
   248de:	18fb      	adds	r3, r7, r3
   248e0:	781a      	ldrb	r2, [r3, #0]
   248e2:	2317      	movs	r3, #23
   248e4:	18fb      	adds	r3, r7, r3
   248e6:	3a01      	subs	r2, #1
   248e8:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   248ea:	2317      	movs	r3, #23
   248ec:	18fb      	adds	r3, r7, r3
   248ee:	781b      	ldrb	r3, [r3, #0]
   248f0:	2b00      	cmp	r3, #0
   248f2:	d000      	beq.n	248f6 <nm_spi_read+0xda>
   248f4:	e7a1      	b.n	2483a <nm_spi_read+0x1e>
	}

	return result;
   248f6:	2315      	movs	r3, #21
   248f8:	18fb      	adds	r3, r7, r3
   248fa:	781b      	ldrb	r3, [r3, #0]
   248fc:	b25b      	sxtb	r3, r3
}
   248fe:	0018      	movs	r0, r3
   24900:	46bd      	mov	sp, r7
   24902:	b007      	add	sp, #28
   24904:	bd90      	pop	{r4, r7, pc}
   24906:	46c0      	nop			; (mov r8, r8)
   24908:	000238e1 	.word	0x000238e1
   2490c:	00000472 	.word	0x00000472
   24910:	0003913c 	.word	0x0003913c
   24914:	00038ad4 	.word	0x00038ad4
   24918:	0001e189 	.word	0x0001e189
   2491c:	00038f40 	.word	0x00038f40
   24920:	00038b14 	.word	0x00038b14
   24924:	00020221 	.word	0x00020221
   24928:	00023365 	.word	0x00023365
   2492c:	000237a5 	.word	0x000237a5
   24930:	0000047d 	.word	0x0000047d
   24934:	00038ee0 	.word	0x00038ee0

00024938 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   24938:	b580      	push	{r7, lr}
   2493a:	b082      	sub	sp, #8
   2493c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   2493e:	4b0c      	ldr	r3, [pc, #48]	; (24970 <spi_init_pkt_sz+0x38>)
   24940:	0018      	movs	r0, r3
   24942:	4b0c      	ldr	r3, [pc, #48]	; (24974 <spi_init_pkt_sz+0x3c>)
   24944:	4798      	blx	r3
   24946:	0003      	movs	r3, r0
   24948:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   2494a:	687b      	ldr	r3, [r7, #4]
   2494c:	2270      	movs	r2, #112	; 0x70
   2494e:	4393      	bics	r3, r2
   24950:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   24952:	687b      	ldr	r3, [r7, #4]
   24954:	2250      	movs	r2, #80	; 0x50
   24956:	4313      	orrs	r3, r2
   24958:	607b      	str	r3, [r7, #4]
   2495a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   2495c:	687b      	ldr	r3, [r7, #4]
   2495e:	4a04      	ldr	r2, [pc, #16]	; (24970 <spi_init_pkt_sz+0x38>)
   24960:	0019      	movs	r1, r3
   24962:	0010      	movs	r0, r2
   24964:	4b04      	ldr	r3, [pc, #16]	; (24978 <spi_init_pkt_sz+0x40>)
   24966:	4798      	blx	r3
}
   24968:	46c0      	nop			; (mov r8, r8)
   2496a:	46bd      	mov	sp, r7
   2496c:	b002      	add	sp, #8
   2496e:	bd80      	pop	{r7, pc}
   24970:	0000e824 	.word	0x0000e824
   24974:	00024b11 	.word	0x00024b11
   24978:	00024b85 	.word	0x00024b85

0002497c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   2497c:	b590      	push	{r4, r7, lr}
   2497e:	b083      	sub	sp, #12
   24980:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24982:	2300      	movs	r3, #0
   24984:	9300      	str	r3, [sp, #0]
   24986:	2300      	movs	r3, #0
   24988:	2200      	movs	r2, #0
   2498a:	2100      	movs	r1, #0
   2498c:	20cf      	movs	r0, #207	; 0xcf
   2498e:	4c05      	ldr	r4, [pc, #20]	; (249a4 <nm_spi_reset+0x28>)
   24990:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   24992:	20cf      	movs	r0, #207	; 0xcf
   24994:	4b04      	ldr	r3, [pc, #16]	; (249a8 <nm_spi_reset+0x2c>)
   24996:	4798      	blx	r3
	return M2M_SUCCESS;
   24998:	2300      	movs	r3, #0
}
   2499a:	0018      	movs	r0, r3
   2499c:	46bd      	mov	sp, r7
   2499e:	b001      	add	sp, #4
   249a0:	bd90      	pop	{r4, r7, pc}
   249a2:	46c0      	nop			; (mov r8, r8)
   249a4:	00023365 	.word	0x00023365
   249a8:	000237a5 	.word	0x000237a5

000249ac <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   249ac:	b580      	push	{r7, lr}
   249ae:	b082      	sub	sp, #8
   249b0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   249b2:	2300      	movs	r3, #0
   249b4:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   249b6:	4b40      	ldr	r3, [pc, #256]	; (24ab8 <nm_spi_init+0x10c>)
   249b8:	2200      	movs	r2, #0
   249ba:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   249bc:	003b      	movs	r3, r7
   249be:	4a3f      	ldr	r2, [pc, #252]	; (24abc <nm_spi_init+0x110>)
   249c0:	0019      	movs	r1, r3
   249c2:	0010      	movs	r0, r2
   249c4:	4b3e      	ldr	r3, [pc, #248]	; (24ac0 <nm_spi_init+0x114>)
   249c6:	4798      	blx	r3
   249c8:	1e03      	subs	r3, r0, #0
   249ca:	d129      	bne.n	24a20 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   249cc:	4b3a      	ldr	r3, [pc, #232]	; (24ab8 <nm_spi_init+0x10c>)
   249ce:	2201      	movs	r2, #1
   249d0:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   249d2:	2398      	movs	r3, #152	; 0x98
   249d4:	00da      	lsls	r2, r3, #3
   249d6:	493b      	ldr	r1, [pc, #236]	; (24ac4 <nm_spi_init+0x118>)
   249d8:	4b3b      	ldr	r3, [pc, #236]	; (24ac8 <nm_spi_init+0x11c>)
   249da:	0018      	movs	r0, r3
   249dc:	4b3b      	ldr	r3, [pc, #236]	; (24acc <nm_spi_init+0x120>)
   249de:	4798      	blx	r3
   249e0:	4b3b      	ldr	r3, [pc, #236]	; (24ad0 <nm_spi_init+0x124>)
   249e2:	0018      	movs	r0, r3
   249e4:	4b39      	ldr	r3, [pc, #228]	; (24acc <nm_spi_init+0x120>)
   249e6:	4798      	blx	r3
   249e8:	4b3a      	ldr	r3, [pc, #232]	; (24ad4 <nm_spi_init+0x128>)
   249ea:	0018      	movs	r0, r3
   249ec:	4b37      	ldr	r3, [pc, #220]	; (24acc <nm_spi_init+0x120>)
   249ee:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   249f0:	003b      	movs	r3, r7
   249f2:	4a32      	ldr	r2, [pc, #200]	; (24abc <nm_spi_init+0x110>)
   249f4:	0019      	movs	r1, r3
   249f6:	0010      	movs	r0, r2
   249f8:	4b31      	ldr	r3, [pc, #196]	; (24ac0 <nm_spi_init+0x114>)
   249fa:	4798      	blx	r3
   249fc:	1e03      	subs	r3, r0, #0
   249fe:	d10f      	bne.n	24a20 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   24a00:	4a35      	ldr	r2, [pc, #212]	; (24ad8 <nm_spi_init+0x12c>)
   24a02:	4930      	ldr	r1, [pc, #192]	; (24ac4 <nm_spi_init+0x118>)
   24a04:	4b30      	ldr	r3, [pc, #192]	; (24ac8 <nm_spi_init+0x11c>)
   24a06:	0018      	movs	r0, r3
   24a08:	4b30      	ldr	r3, [pc, #192]	; (24acc <nm_spi_init+0x120>)
   24a0a:	4798      	blx	r3
   24a0c:	4b33      	ldr	r3, [pc, #204]	; (24adc <nm_spi_init+0x130>)
   24a0e:	0018      	movs	r0, r3
   24a10:	4b2e      	ldr	r3, [pc, #184]	; (24acc <nm_spi_init+0x120>)
   24a12:	4798      	blx	r3
   24a14:	4b2f      	ldr	r3, [pc, #188]	; (24ad4 <nm_spi_init+0x128>)
   24a16:	0018      	movs	r0, r3
   24a18:	4b2c      	ldr	r3, [pc, #176]	; (24acc <nm_spi_init+0x120>)
   24a1a:	4798      	blx	r3
			return 0;
   24a1c:	2300      	movs	r3, #0
   24a1e:	e047      	b.n	24ab0 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   24a20:	4b25      	ldr	r3, [pc, #148]	; (24ab8 <nm_spi_init+0x10c>)
   24a22:	781b      	ldrb	r3, [r3, #0]
   24a24:	2b00      	cmp	r3, #0
   24a26:	d126      	bne.n	24a76 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   24a28:	683b      	ldr	r3, [r7, #0]
   24a2a:	220c      	movs	r2, #12
   24a2c:	4393      	bics	r3, r2
   24a2e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   24a30:	683b      	ldr	r3, [r7, #0]
   24a32:	2270      	movs	r2, #112	; 0x70
   24a34:	4393      	bics	r3, r2
   24a36:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   24a38:	683b      	ldr	r3, [r7, #0]
   24a3a:	2250      	movs	r2, #80	; 0x50
   24a3c:	4313      	orrs	r3, r2
   24a3e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   24a40:	683b      	ldr	r3, [r7, #0]
   24a42:	4a1e      	ldr	r2, [pc, #120]	; (24abc <nm_spi_init+0x110>)
   24a44:	0019      	movs	r1, r3
   24a46:	0010      	movs	r0, r2
   24a48:	4b25      	ldr	r3, [pc, #148]	; (24ae0 <nm_spi_init+0x134>)
   24a4a:	4798      	blx	r3
   24a4c:	1e03      	subs	r3, r0, #0
   24a4e:	d10f      	bne.n	24a70 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   24a50:	4a24      	ldr	r2, [pc, #144]	; (24ae4 <nm_spi_init+0x138>)
   24a52:	491c      	ldr	r1, [pc, #112]	; (24ac4 <nm_spi_init+0x118>)
   24a54:	4b1c      	ldr	r3, [pc, #112]	; (24ac8 <nm_spi_init+0x11c>)
   24a56:	0018      	movs	r0, r3
   24a58:	4b1c      	ldr	r3, [pc, #112]	; (24acc <nm_spi_init+0x120>)
   24a5a:	4798      	blx	r3
   24a5c:	4b22      	ldr	r3, [pc, #136]	; (24ae8 <nm_spi_init+0x13c>)
   24a5e:	0018      	movs	r0, r3
   24a60:	4b1a      	ldr	r3, [pc, #104]	; (24acc <nm_spi_init+0x120>)
   24a62:	4798      	blx	r3
   24a64:	4b1b      	ldr	r3, [pc, #108]	; (24ad4 <nm_spi_init+0x128>)
   24a66:	0018      	movs	r0, r3
   24a68:	4b18      	ldr	r3, [pc, #96]	; (24acc <nm_spi_init+0x120>)
   24a6a:	4798      	blx	r3
			return 0;
   24a6c:	2300      	movs	r3, #0
   24a6e:	e01f      	b.n	24ab0 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   24a70:	4b11      	ldr	r3, [pc, #68]	; (24ab8 <nm_spi_init+0x10c>)
   24a72:	2201      	movs	r2, #1
   24a74:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   24a76:	1d3a      	adds	r2, r7, #4
   24a78:	2380      	movs	r3, #128	; 0x80
   24a7a:	015b      	lsls	r3, r3, #5
   24a7c:	0011      	movs	r1, r2
   24a7e:	0018      	movs	r0, r3
   24a80:	4b0f      	ldr	r3, [pc, #60]	; (24ac0 <nm_spi_init+0x114>)
   24a82:	4798      	blx	r3
   24a84:	1e03      	subs	r3, r0, #0
   24a86:	d110      	bne.n	24aaa <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   24a88:	4a18      	ldr	r2, [pc, #96]	; (24aec <nm_spi_init+0x140>)
   24a8a:	490e      	ldr	r1, [pc, #56]	; (24ac4 <nm_spi_init+0x118>)
   24a8c:	4b0e      	ldr	r3, [pc, #56]	; (24ac8 <nm_spi_init+0x11c>)
   24a8e:	0018      	movs	r0, r3
   24a90:	4b0e      	ldr	r3, [pc, #56]	; (24acc <nm_spi_init+0x120>)
   24a92:	4798      	blx	r3
   24a94:	4b16      	ldr	r3, [pc, #88]	; (24af0 <nm_spi_init+0x144>)
   24a96:	0018      	movs	r0, r3
   24a98:	4b0c      	ldr	r3, [pc, #48]	; (24acc <nm_spi_init+0x120>)
   24a9a:	4798      	blx	r3
   24a9c:	4b0d      	ldr	r3, [pc, #52]	; (24ad4 <nm_spi_init+0x128>)
   24a9e:	0018      	movs	r0, r3
   24aa0:	4b0a      	ldr	r3, [pc, #40]	; (24acc <nm_spi_init+0x120>)
   24aa2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   24aa4:	2306      	movs	r3, #6
   24aa6:	425b      	negs	r3, r3
   24aa8:	e002      	b.n	24ab0 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   24aaa:	4b12      	ldr	r3, [pc, #72]	; (24af4 <nm_spi_init+0x148>)
   24aac:	4798      	blx	r3


	return M2M_SUCCESS;
   24aae:	2300      	movs	r3, #0
}
   24ab0:	0018      	movs	r0, r3
   24ab2:	46bd      	mov	sp, r7
   24ab4:	b002      	add	sp, #8
   24ab6:	bd80      	pop	{r7, pc}
   24ab8:	20003e9c 	.word	0x20003e9c
   24abc:	0000e824 	.word	0x0000e824
   24ac0:	000246a5 	.word	0x000246a5
   24ac4:	00039148 	.word	0x00039148
   24ac8:	00038ad4 	.word	0x00038ad4
   24acc:	0001e189 	.word	0x0001e189
   24ad0:	00038f70 	.word	0x00038f70
   24ad4:	00038b14 	.word	0x00038b14
   24ad8:	000004c3 	.word	0x000004c3
   24adc:	00038fc0 	.word	0x00038fc0
   24ae0:	000243ad 	.word	0x000243ad
   24ae4:	000004cd 	.word	0x000004cd
   24ae8:	00038ff0 	.word	0x00038ff0
   24aec:	000004d7 	.word	0x000004d7
   24af0:	00039024 	.word	0x00039024
   24af4:	00024939 	.word	0x00024939

00024af8 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   24af8:	b580      	push	{r7, lr}
   24afa:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   24afc:	4b03      	ldr	r3, [pc, #12]	; (24b0c <nm_spi_deinit+0x14>)
   24afe:	2200      	movs	r2, #0
   24b00:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   24b02:	2300      	movs	r3, #0
}
   24b04:	0018      	movs	r0, r3
   24b06:	46bd      	mov	sp, r7
   24b08:	bd80      	pop	{r7, pc}
   24b0a:	46c0      	nop			; (mov r8, r8)
   24b0c:	20003e9c 	.word	0x20003e9c

00024b10 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   24b10:	b580      	push	{r7, lr}
   24b12:	b084      	sub	sp, #16
   24b14:	af00      	add	r7, sp, #0
   24b16:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   24b18:	230c      	movs	r3, #12
   24b1a:	18fa      	adds	r2, r7, r3
   24b1c:	687b      	ldr	r3, [r7, #4]
   24b1e:	0011      	movs	r1, r2
   24b20:	0018      	movs	r0, r3
   24b22:	4b03      	ldr	r3, [pc, #12]	; (24b30 <nm_spi_read_reg+0x20>)
   24b24:	4798      	blx	r3

	return u32Val;
   24b26:	68fb      	ldr	r3, [r7, #12]
}
   24b28:	0018      	movs	r0, r3
   24b2a:	46bd      	mov	sp, r7
   24b2c:	b004      	add	sp, #16
   24b2e:	bd80      	pop	{r7, pc}
   24b30:	000246a5 	.word	0x000246a5

00024b34 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   24b34:	b590      	push	{r4, r7, lr}
   24b36:	b085      	sub	sp, #20
   24b38:	af00      	add	r7, sp, #0
   24b3a:	6078      	str	r0, [r7, #4]
   24b3c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   24b3e:	230f      	movs	r3, #15
   24b40:	18fc      	adds	r4, r7, r3
   24b42:	683a      	ldr	r2, [r7, #0]
   24b44:	687b      	ldr	r3, [r7, #4]
   24b46:	0011      	movs	r1, r2
   24b48:	0018      	movs	r0, r3
   24b4a:	4b0d      	ldr	r3, [pc, #52]	; (24b80 <nm_spi_read_reg_with_ret+0x4c>)
   24b4c:	4798      	blx	r3
   24b4e:	0003      	movs	r3, r0
   24b50:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24b52:	230f      	movs	r3, #15
   24b54:	18fb      	adds	r3, r7, r3
   24b56:	781b      	ldrb	r3, [r3, #0]
   24b58:	b25b      	sxtb	r3, r3
   24b5a:	2b01      	cmp	r3, #1
   24b5c:	d104      	bne.n	24b68 <nm_spi_read_reg_with_ret+0x34>
   24b5e:	230f      	movs	r3, #15
   24b60:	18fb      	adds	r3, r7, r3
   24b62:	2200      	movs	r2, #0
   24b64:	701a      	strb	r2, [r3, #0]
   24b66:	e003      	b.n	24b70 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24b68:	230f      	movs	r3, #15
   24b6a:	18fb      	adds	r3, r7, r3
   24b6c:	22fa      	movs	r2, #250	; 0xfa
   24b6e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24b70:	230f      	movs	r3, #15
   24b72:	18fb      	adds	r3, r7, r3
   24b74:	781b      	ldrb	r3, [r3, #0]
   24b76:	b25b      	sxtb	r3, r3
}
   24b78:	0018      	movs	r0, r3
   24b7a:	46bd      	mov	sp, r7
   24b7c:	b005      	add	sp, #20
   24b7e:	bd90      	pop	{r4, r7, pc}
   24b80:	000246a5 	.word	0x000246a5

00024b84 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   24b84:	b590      	push	{r4, r7, lr}
   24b86:	b085      	sub	sp, #20
   24b88:	af00      	add	r7, sp, #0
   24b8a:	6078      	str	r0, [r7, #4]
   24b8c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   24b8e:	230f      	movs	r3, #15
   24b90:	18fc      	adds	r4, r7, r3
   24b92:	683a      	ldr	r2, [r7, #0]
   24b94:	687b      	ldr	r3, [r7, #4]
   24b96:	0011      	movs	r1, r2
   24b98:	0018      	movs	r0, r3
   24b9a:	4b0d      	ldr	r3, [pc, #52]	; (24bd0 <nm_spi_write_reg+0x4c>)
   24b9c:	4798      	blx	r3
   24b9e:	0003      	movs	r3, r0
   24ba0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24ba2:	230f      	movs	r3, #15
   24ba4:	18fb      	adds	r3, r7, r3
   24ba6:	781b      	ldrb	r3, [r3, #0]
   24ba8:	b25b      	sxtb	r3, r3
   24baa:	2b01      	cmp	r3, #1
   24bac:	d104      	bne.n	24bb8 <nm_spi_write_reg+0x34>
   24bae:	230f      	movs	r3, #15
   24bb0:	18fb      	adds	r3, r7, r3
   24bb2:	2200      	movs	r2, #0
   24bb4:	701a      	strb	r2, [r3, #0]
   24bb6:	e003      	b.n	24bc0 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24bb8:	230f      	movs	r3, #15
   24bba:	18fb      	adds	r3, r7, r3
   24bbc:	22fa      	movs	r2, #250	; 0xfa
   24bbe:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24bc0:	230f      	movs	r3, #15
   24bc2:	18fb      	adds	r3, r7, r3
   24bc4:	781b      	ldrb	r3, [r3, #0]
   24bc6:	b25b      	sxtb	r3, r3
}
   24bc8:	0018      	movs	r0, r3
   24bca:	46bd      	mov	sp, r7
   24bcc:	b005      	add	sp, #20
   24bce:	bd90      	pop	{r4, r7, pc}
   24bd0:	000243ad 	.word	0x000243ad

00024bd4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24bd4:	b590      	push	{r4, r7, lr}
   24bd6:	b087      	sub	sp, #28
   24bd8:	af00      	add	r7, sp, #0
   24bda:	60f8      	str	r0, [r7, #12]
   24bdc:	60b9      	str	r1, [r7, #8]
   24bde:	1dbb      	adds	r3, r7, #6
   24be0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   24be2:	2317      	movs	r3, #23
   24be4:	18fc      	adds	r4, r7, r3
   24be6:	1dbb      	adds	r3, r7, #6
   24be8:	881a      	ldrh	r2, [r3, #0]
   24bea:	68b9      	ldr	r1, [r7, #8]
   24bec:	68fb      	ldr	r3, [r7, #12]
   24bee:	0018      	movs	r0, r3
   24bf0:	4b0d      	ldr	r3, [pc, #52]	; (24c28 <nm_spi_read_block+0x54>)
   24bf2:	4798      	blx	r3
   24bf4:	0003      	movs	r3, r0
   24bf6:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24bf8:	2317      	movs	r3, #23
   24bfa:	18fb      	adds	r3, r7, r3
   24bfc:	781b      	ldrb	r3, [r3, #0]
   24bfe:	b25b      	sxtb	r3, r3
   24c00:	2b01      	cmp	r3, #1
   24c02:	d104      	bne.n	24c0e <nm_spi_read_block+0x3a>
   24c04:	2317      	movs	r3, #23
   24c06:	18fb      	adds	r3, r7, r3
   24c08:	2200      	movs	r2, #0
   24c0a:	701a      	strb	r2, [r3, #0]
   24c0c:	e003      	b.n	24c16 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24c0e:	2317      	movs	r3, #23
   24c10:	18fb      	adds	r3, r7, r3
   24c12:	22fa      	movs	r2, #250	; 0xfa
   24c14:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24c16:	2317      	movs	r3, #23
   24c18:	18fb      	adds	r3, r7, r3
   24c1a:	781b      	ldrb	r3, [r3, #0]
   24c1c:	b25b      	sxtb	r3, r3
}
   24c1e:	0018      	movs	r0, r3
   24c20:	46bd      	mov	sp, r7
   24c22:	b007      	add	sp, #28
   24c24:	bd90      	pop	{r4, r7, pc}
   24c26:	46c0      	nop			; (mov r8, r8)
   24c28:	0002481d 	.word	0x0002481d

00024c2c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24c2c:	b590      	push	{r4, r7, lr}
   24c2e:	b087      	sub	sp, #28
   24c30:	af00      	add	r7, sp, #0
   24c32:	60f8      	str	r0, [r7, #12]
   24c34:	60b9      	str	r1, [r7, #8]
   24c36:	1dbb      	adds	r3, r7, #6
   24c38:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   24c3a:	2317      	movs	r3, #23
   24c3c:	18fc      	adds	r4, r7, r3
   24c3e:	1dbb      	adds	r3, r7, #6
   24c40:	881a      	ldrh	r2, [r3, #0]
   24c42:	68b9      	ldr	r1, [r7, #8]
   24c44:	68fb      	ldr	r3, [r7, #12]
   24c46:	0018      	movs	r0, r3
   24c48:	4b0d      	ldr	r3, [pc, #52]	; (24c80 <nm_spi_write_block+0x54>)
   24c4a:	4798      	blx	r3
   24c4c:	0003      	movs	r3, r0
   24c4e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24c50:	2317      	movs	r3, #23
   24c52:	18fb      	adds	r3, r7, r3
   24c54:	781b      	ldrb	r3, [r3, #0]
   24c56:	b25b      	sxtb	r3, r3
   24c58:	2b01      	cmp	r3, #1
   24c5a:	d104      	bne.n	24c66 <nm_spi_write_block+0x3a>
   24c5c:	2317      	movs	r3, #23
   24c5e:	18fb      	adds	r3, r7, r3
   24c60:	2200      	movs	r2, #0
   24c62:	701a      	strb	r2, [r3, #0]
   24c64:	e003      	b.n	24c6e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24c66:	2317      	movs	r3, #23
   24c68:	18fb      	adds	r3, r7, r3
   24c6a:	22fa      	movs	r2, #250	; 0xfa
   24c6c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24c6e:	2317      	movs	r3, #23
   24c70:	18fb      	adds	r3, r7, r3
   24c72:	781b      	ldrb	r3, [r3, #0]
   24c74:	b25b      	sxtb	r3, r3
}
   24c76:	0018      	movs	r0, r3
   24c78:	46bd      	mov	sp, r7
   24c7a:	b007      	add	sp, #28
   24c7c:	bd90      	pop	{r4, r7, pc}
   24c7e:	46c0      	nop			; (mov r8, r8)
   24c80:	000244f9 	.word	0x000244f9

00024c84 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   24c84:	b590      	push	{r4, r7, lr}
   24c86:	b089      	sub	sp, #36	; 0x24
   24c88:	af00      	add	r7, sp, #0
   24c8a:	60b9      	str	r1, [r7, #8]
   24c8c:	0011      	movs	r1, r2
   24c8e:	607b      	str	r3, [r7, #4]
   24c90:	230f      	movs	r3, #15
   24c92:	18fb      	adds	r3, r7, r3
   24c94:	1c02      	adds	r2, r0, #0
   24c96:	701a      	strb	r2, [r3, #0]
   24c98:	230e      	movs	r3, #14
   24c9a:	18fb      	adds	r3, r7, r3
   24c9c:	1c0a      	adds	r2, r1, #0
   24c9e:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   24ca0:	2330      	movs	r3, #48	; 0x30
   24ca2:	18fb      	adds	r3, r7, r3
   24ca4:	881b      	ldrh	r3, [r3, #0]
   24ca6:	2b00      	cmp	r3, #0
   24ca8:	d100      	bne.n	24cac <Socket_ReadSocketData+0x28>
   24caa:	e0d7      	b.n	24e5c <Socket_ReadSocketData+0x1d8>
   24cac:	230f      	movs	r3, #15
   24cae:	18fb      	adds	r3, r7, r3
   24cb0:	2200      	movs	r2, #0
   24cb2:	569a      	ldrsb	r2, [r3, r2]
   24cb4:	4b6b      	ldr	r3, [pc, #428]	; (24e64 <Socket_ReadSocketData+0x1e0>)
   24cb6:	0112      	lsls	r2, r2, #4
   24cb8:	58d3      	ldr	r3, [r2, r3]
   24cba:	2b00      	cmp	r3, #0
   24cbc:	d100      	bne.n	24cc0 <Socket_ReadSocketData+0x3c>
   24cbe:	e0cd      	b.n	24e5c <Socket_ReadSocketData+0x1d8>
   24cc0:	230f      	movs	r3, #15
   24cc2:	18fb      	adds	r3, r7, r3
   24cc4:	781b      	ldrb	r3, [r3, #0]
   24cc6:	b25b      	sxtb	r3, r3
   24cc8:	4a66      	ldr	r2, [pc, #408]	; (24e64 <Socket_ReadSocketData+0x1e0>)
   24cca:	011b      	lsls	r3, r3, #4
   24ccc:	18d3      	adds	r3, r2, r3
   24cce:	3304      	adds	r3, #4
   24cd0:	881b      	ldrh	r3, [r3, #0]
   24cd2:	b29b      	uxth	r3, r3
   24cd4:	2b00      	cmp	r3, #0
   24cd6:	d100      	bne.n	24cda <Socket_ReadSocketData+0x56>
   24cd8:	e0c0      	b.n	24e5c <Socket_ReadSocketData+0x1d8>
   24cda:	230f      	movs	r3, #15
   24cdc:	18fb      	adds	r3, r7, r3
   24cde:	781b      	ldrb	r3, [r3, #0]
   24ce0:	b25b      	sxtb	r3, r3
   24ce2:	4a60      	ldr	r2, [pc, #384]	; (24e64 <Socket_ReadSocketData+0x1e0>)
   24ce4:	011b      	lsls	r3, r3, #4
   24ce6:	18d3      	adds	r3, r2, r3
   24ce8:	330a      	adds	r3, #10
   24cea:	781b      	ldrb	r3, [r3, #0]
   24cec:	b2db      	uxtb	r3, r3
   24cee:	2b01      	cmp	r3, #1
   24cf0:	d000      	beq.n	24cf4 <Socket_ReadSocketData+0x70>
   24cf2:	e0b3      	b.n	24e5c <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   24cf4:	687b      	ldr	r3, [r7, #4]
   24cf6:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   24cf8:	68bb      	ldr	r3, [r7, #8]
   24cfa:	2230      	movs	r2, #48	; 0x30
   24cfc:	18ba      	adds	r2, r7, r2
   24cfe:	8812      	ldrh	r2, [r2, #0]
   24d00:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   24d02:	2319      	movs	r3, #25
   24d04:	18fb      	adds	r3, r7, r3
   24d06:	2201      	movs	r2, #1
   24d08:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   24d0a:	231a      	movs	r3, #26
   24d0c:	18fb      	adds	r3, r7, r3
   24d0e:	2230      	movs	r2, #48	; 0x30
   24d10:	18ba      	adds	r2, r7, r2
   24d12:	8812      	ldrh	r2, [r2, #0]
   24d14:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   24d16:	230f      	movs	r3, #15
   24d18:	18fb      	adds	r3, r7, r3
   24d1a:	781b      	ldrb	r3, [r3, #0]
   24d1c:	b25b      	sxtb	r3, r3
   24d1e:	4a51      	ldr	r2, [pc, #324]	; (24e64 <Socket_ReadSocketData+0x1e0>)
   24d20:	011b      	lsls	r3, r3, #4
   24d22:	18d3      	adds	r3, r2, r3
   24d24:	3304      	adds	r3, #4
   24d26:	881b      	ldrh	r3, [r3, #0]
   24d28:	b29b      	uxth	r3, r3
   24d2a:	221a      	movs	r2, #26
   24d2c:	18ba      	adds	r2, r7, r2
   24d2e:	8812      	ldrh	r2, [r2, #0]
   24d30:	1ad3      	subs	r3, r2, r3
   24d32:	b29a      	uxth	r2, r3
   24d34:	2316      	movs	r3, #22
   24d36:	18fb      	adds	r3, r7, r3
   24d38:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   24d3a:	2316      	movs	r3, #22
   24d3c:	18fb      	adds	r3, r7, r3
   24d3e:	2200      	movs	r2, #0
   24d40:	5e9b      	ldrsh	r3, [r3, r2]
   24d42:	2b00      	cmp	r3, #0
   24d44:	dd0f      	ble.n	24d66 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   24d46:	2319      	movs	r3, #25
   24d48:	18fb      	adds	r3, r7, r3
   24d4a:	2200      	movs	r2, #0
   24d4c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   24d4e:	230f      	movs	r3, #15
   24d50:	18fb      	adds	r3, r7, r3
   24d52:	2200      	movs	r2, #0
   24d54:	569a      	ldrsb	r2, [r3, r2]
   24d56:	231a      	movs	r3, #26
   24d58:	18fb      	adds	r3, r7, r3
   24d5a:	4942      	ldr	r1, [pc, #264]	; (24e64 <Socket_ReadSocketData+0x1e0>)
   24d5c:	0112      	lsls	r2, r2, #4
   24d5e:	188a      	adds	r2, r1, r2
   24d60:	3204      	adds	r2, #4
   24d62:	8812      	ldrh	r2, [r2, #0]
   24d64:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   24d66:	230f      	movs	r3, #15
   24d68:	18fb      	adds	r3, r7, r3
   24d6a:	2200      	movs	r2, #0
   24d6c:	569a      	ldrsb	r2, [r3, r2]
   24d6e:	4b3d      	ldr	r3, [pc, #244]	; (24e64 <Socket_ReadSocketData+0x1e0>)
   24d70:	0112      	lsls	r2, r2, #4
   24d72:	58d1      	ldr	r1, [r2, r3]
   24d74:	2319      	movs	r3, #25
   24d76:	18fb      	adds	r3, r7, r3
   24d78:	781c      	ldrb	r4, [r3, #0]
   24d7a:	231a      	movs	r3, #26
   24d7c:	18fb      	adds	r3, r7, r3
   24d7e:	881a      	ldrh	r2, [r3, #0]
   24d80:	69f8      	ldr	r0, [r7, #28]
   24d82:	0023      	movs	r3, r4
   24d84:	4c38      	ldr	r4, [pc, #224]	; (24e68 <Socket_ReadSocketData+0x1e4>)
   24d86:	47a0      	blx	r4
   24d88:	1e03      	subs	r3, r0, #0
   24d8a:	d14f      	bne.n	24e2c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   24d8c:	230f      	movs	r3, #15
   24d8e:	18fb      	adds	r3, r7, r3
   24d90:	2200      	movs	r2, #0
   24d92:	569a      	ldrsb	r2, [r3, r2]
   24d94:	4b33      	ldr	r3, [pc, #204]	; (24e64 <Socket_ReadSocketData+0x1e0>)
   24d96:	0112      	lsls	r2, r2, #4
   24d98:	58d2      	ldr	r2, [r2, r3]
   24d9a:	68bb      	ldr	r3, [r7, #8]
   24d9c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   24d9e:	231a      	movs	r3, #26
   24da0:	18fb      	adds	r3, r7, r3
   24da2:	2200      	movs	r2, #0
   24da4:	5e9a      	ldrsh	r2, [r3, r2]
   24da6:	68bb      	ldr	r3, [r7, #8]
   24da8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   24daa:	68bb      	ldr	r3, [r7, #8]
   24dac:	88da      	ldrh	r2, [r3, #6]
   24dae:	231a      	movs	r3, #26
   24db0:	18fb      	adds	r3, r7, r3
   24db2:	881b      	ldrh	r3, [r3, #0]
   24db4:	1ad3      	subs	r3, r2, r3
   24db6:	b29a      	uxth	r2, r3
   24db8:	68bb      	ldr	r3, [r7, #8]
   24dba:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   24dbc:	4b2b      	ldr	r3, [pc, #172]	; (24e6c <Socket_ReadSocketData+0x1e8>)
   24dbe:	681b      	ldr	r3, [r3, #0]
   24dc0:	2b00      	cmp	r3, #0
   24dc2:	d00b      	beq.n	24ddc <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   24dc4:	4b29      	ldr	r3, [pc, #164]	; (24e6c <Socket_ReadSocketData+0x1e8>)
   24dc6:	681b      	ldr	r3, [r3, #0]
   24dc8:	68bc      	ldr	r4, [r7, #8]
   24dca:	220e      	movs	r2, #14
   24dcc:	18ba      	adds	r2, r7, r2
   24dce:	7811      	ldrb	r1, [r2, #0]
   24dd0:	220f      	movs	r2, #15
   24dd2:	18ba      	adds	r2, r7, r2
   24dd4:	2000      	movs	r0, #0
   24dd6:	5610      	ldrsb	r0, [r2, r0]
   24dd8:	0022      	movs	r2, r4
   24dda:	4798      	blx	r3

				u16ReadCount -= u16Read;
   24ddc:	2330      	movs	r3, #48	; 0x30
   24dde:	18f9      	adds	r1, r7, r3
   24de0:	2330      	movs	r3, #48	; 0x30
   24de2:	18fa      	adds	r2, r7, r3
   24de4:	231a      	movs	r3, #26
   24de6:	18fb      	adds	r3, r7, r3
   24de8:	8812      	ldrh	r2, [r2, #0]
   24dea:	881b      	ldrh	r3, [r3, #0]
   24dec:	1ad3      	subs	r3, r2, r3
   24dee:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   24df0:	231a      	movs	r3, #26
   24df2:	18fb      	adds	r3, r7, r3
   24df4:	881b      	ldrh	r3, [r3, #0]
   24df6:	69fa      	ldr	r2, [r7, #28]
   24df8:	18d3      	adds	r3, r2, r3
   24dfa:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   24dfc:	230f      	movs	r3, #15
   24dfe:	18fb      	adds	r3, r7, r3
   24e00:	781b      	ldrb	r3, [r3, #0]
   24e02:	b25b      	sxtb	r3, r3
   24e04:	4a17      	ldr	r2, [pc, #92]	; (24e64 <Socket_ReadSocketData+0x1e0>)
   24e06:	011b      	lsls	r3, r3, #4
   24e08:	18d3      	adds	r3, r2, r3
   24e0a:	330a      	adds	r3, #10
   24e0c:	781b      	ldrb	r3, [r3, #0]
   24e0e:	b2db      	uxtb	r3, r3
   24e10:	2b00      	cmp	r3, #0
   24e12:	d11c      	bne.n	24e4e <Socket_ReadSocketData+0x1ca>
   24e14:	2330      	movs	r3, #48	; 0x30
   24e16:	18fb      	adds	r3, r7, r3
   24e18:	881b      	ldrh	r3, [r3, #0]
   24e1a:	2b00      	cmp	r3, #0
   24e1c:	d017      	beq.n	24e4e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   24e1e:	2301      	movs	r3, #1
   24e20:	2200      	movs	r2, #0
   24e22:	2100      	movs	r1, #0
   24e24:	2000      	movs	r0, #0
   24e26:	4c10      	ldr	r4, [pc, #64]	; (24e68 <Socket_ReadSocketData+0x1e4>)
   24e28:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   24e2a:	e017      	b.n	24e5c <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   24e2c:	4b10      	ldr	r3, [pc, #64]	; (24e70 <Socket_ReadSocketData+0x1ec>)
   24e2e:	0018      	movs	r0, r3
   24e30:	4b10      	ldr	r3, [pc, #64]	; (24e74 <Socket_ReadSocketData+0x1f0>)
   24e32:	4798      	blx	r3
   24e34:	2330      	movs	r3, #48	; 0x30
   24e36:	18fb      	adds	r3, r7, r3
   24e38:	881a      	ldrh	r2, [r3, #0]
   24e3a:	4b0f      	ldr	r3, [pc, #60]	; (24e78 <Socket_ReadSocketData+0x1f4>)
   24e3c:	0011      	movs	r1, r2
   24e3e:	0018      	movs	r0, r3
   24e40:	4b0c      	ldr	r3, [pc, #48]	; (24e74 <Socket_ReadSocketData+0x1f0>)
   24e42:	4798      	blx	r3
   24e44:	4b0d      	ldr	r3, [pc, #52]	; (24e7c <Socket_ReadSocketData+0x1f8>)
   24e46:	0018      	movs	r0, r3
   24e48:	4b0a      	ldr	r3, [pc, #40]	; (24e74 <Socket_ReadSocketData+0x1f0>)
   24e4a:	4798      	blx	r3
				break;
   24e4c:	e006      	b.n	24e5c <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   24e4e:	2330      	movs	r3, #48	; 0x30
   24e50:	18fb      	adds	r3, r7, r3
   24e52:	881b      	ldrh	r3, [r3, #0]
   24e54:	2b00      	cmp	r3, #0
   24e56:	d000      	beq.n	24e5a <Socket_ReadSocketData+0x1d6>
   24e58:	e753      	b.n	24d02 <Socket_ReadSocketData+0x7e>
	}
}
   24e5a:	e7ff      	b.n	24e5c <Socket_ReadSocketData+0x1d8>
   24e5c:	46c0      	nop			; (mov r8, r8)
   24e5e:	46bd      	mov	sp, r7
   24e60:	b009      	add	sp, #36	; 0x24
   24e62:	bd90      	pop	{r4, r7, pc}
   24e64:	20005690 	.word	0x20005690
   24e68:	0002167d 	.word	0x0002167d
   24e6c:	20005740 	.word	0x20005740
   24e70:	00039154 	.word	0x00039154
   24e74:	0001e189 	.word	0x0001e189
   24e78:	00039160 	.word	0x00039160
   24e7c:	00039174 	.word	0x00039174

00024e80 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   24e80:	b590      	push	{r4, r7, lr}
   24e82:	b0bb      	sub	sp, #236	; 0xec
   24e84:	af02      	add	r7, sp, #8
   24e86:	603a      	str	r2, [r7, #0]
   24e88:	1dfb      	adds	r3, r7, #7
   24e8a:	1c02      	adds	r2, r0, #0
   24e8c:	701a      	strb	r2, [r3, #0]
   24e8e:	1d3b      	adds	r3, r7, #4
   24e90:	1c0a      	adds	r2, r1, #0
   24e92:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   24e94:	1dfb      	adds	r3, r7, #7
   24e96:	781b      	ldrb	r3, [r3, #0]
   24e98:	2b41      	cmp	r3, #65	; 0x41
   24e9a:	d003      	beq.n	24ea4 <m2m_ip_cb+0x24>
   24e9c:	1dfb      	adds	r3, r7, #7
   24e9e:	781b      	ldrb	r3, [r3, #0]
   24ea0:	2b54      	cmp	r3, #84	; 0x54
   24ea2:	d120      	bne.n	24ee6 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   24ea4:	23cc      	movs	r3, #204	; 0xcc
   24ea6:	18f9      	adds	r1, r7, r3
   24ea8:	6838      	ldr	r0, [r7, #0]
   24eaa:	2300      	movs	r3, #0
   24eac:	2204      	movs	r2, #4
   24eae:	4c98      	ldr	r4, [pc, #608]	; (25110 <m2m_ip_cb+0x290>)
   24eb0:	47a0      	blx	r4
   24eb2:	1e03      	subs	r3, r0, #0
   24eb4:	d000      	beq.n	24eb8 <m2m_ip_cb+0x38>
   24eb6:	e275      	b.n	253a4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   24eb8:	23cc      	movs	r3, #204	; 0xcc
   24eba:	18fb      	adds	r3, r7, r3
   24ebc:	2201      	movs	r2, #1
   24ebe:	569a      	ldrsb	r2, [r3, r2]
   24ec0:	23c8      	movs	r3, #200	; 0xc8
   24ec2:	18fb      	adds	r3, r7, r3
   24ec4:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   24ec6:	4b93      	ldr	r3, [pc, #588]	; (25114 <m2m_ip_cb+0x294>)
   24ec8:	681b      	ldr	r3, [r3, #0]
   24eca:	2b00      	cmp	r3, #0
   24ecc:	d100      	bne.n	24ed0 <m2m_ip_cb+0x50>
   24ece:	e269      	b.n	253a4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   24ed0:	4b90      	ldr	r3, [pc, #576]	; (25114 <m2m_ip_cb+0x294>)
   24ed2:	681b      	ldr	r3, [r3, #0]
   24ed4:	22cc      	movs	r2, #204	; 0xcc
   24ed6:	18ba      	adds	r2, r7, r2
   24ed8:	2000      	movs	r0, #0
   24eda:	5610      	ldrsb	r0, [r2, r0]
   24edc:	22c8      	movs	r2, #200	; 0xc8
   24ede:	18ba      	adds	r2, r7, r2
   24ee0:	2101      	movs	r1, #1
   24ee2:	4798      	blx	r3
	{
   24ee4:	e25e      	b.n	253a4 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   24ee6:	1dfb      	adds	r3, r7, #7
   24ee8:	781b      	ldrb	r3, [r3, #0]
   24eea:	2b42      	cmp	r3, #66	; 0x42
   24eec:	d120      	bne.n	24f30 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   24eee:	23c4      	movs	r3, #196	; 0xc4
   24ef0:	18f9      	adds	r1, r7, r3
   24ef2:	6838      	ldr	r0, [r7, #0]
   24ef4:	2300      	movs	r3, #0
   24ef6:	2204      	movs	r2, #4
   24ef8:	4c85      	ldr	r4, [pc, #532]	; (25110 <m2m_ip_cb+0x290>)
   24efa:	47a0      	blx	r4
   24efc:	1e03      	subs	r3, r0, #0
   24efe:	d000      	beq.n	24f02 <m2m_ip_cb+0x82>
   24f00:	e257      	b.n	253b2 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   24f02:	23c4      	movs	r3, #196	; 0xc4
   24f04:	18fb      	adds	r3, r7, r3
   24f06:	2201      	movs	r2, #1
   24f08:	569a      	ldrsb	r2, [r3, r2]
   24f0a:	23c0      	movs	r3, #192	; 0xc0
   24f0c:	18fb      	adds	r3, r7, r3
   24f0e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   24f10:	4b80      	ldr	r3, [pc, #512]	; (25114 <m2m_ip_cb+0x294>)
   24f12:	681b      	ldr	r3, [r3, #0]
   24f14:	2b00      	cmp	r3, #0
   24f16:	d100      	bne.n	24f1a <m2m_ip_cb+0x9a>
   24f18:	e24b      	b.n	253b2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   24f1a:	4b7e      	ldr	r3, [pc, #504]	; (25114 <m2m_ip_cb+0x294>)
   24f1c:	681b      	ldr	r3, [r3, #0]
   24f1e:	22c4      	movs	r2, #196	; 0xc4
   24f20:	18ba      	adds	r2, r7, r2
   24f22:	2000      	movs	r0, #0
   24f24:	5610      	ldrsb	r0, [r2, r0]
   24f26:	22c0      	movs	r2, #192	; 0xc0
   24f28:	18ba      	adds	r2, r7, r2
   24f2a:	2102      	movs	r1, #2
   24f2c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   24f2e:	e240      	b.n	253b2 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   24f30:	1dfb      	adds	r3, r7, #7
   24f32:	781b      	ldrb	r3, [r3, #0]
   24f34:	2b43      	cmp	r3, #67	; 0x43
   24f36:	d000      	beq.n	24f3a <m2m_ip_cb+0xba>
   24f38:	e086      	b.n	25048 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   24f3a:	23b4      	movs	r3, #180	; 0xb4
   24f3c:	18f9      	adds	r1, r7, r3
   24f3e:	6838      	ldr	r0, [r7, #0]
   24f40:	2300      	movs	r3, #0
   24f42:	220c      	movs	r2, #12
   24f44:	4c72      	ldr	r4, [pc, #456]	; (25110 <m2m_ip_cb+0x290>)
   24f46:	47a0      	blx	r4
   24f48:	1e03      	subs	r3, r0, #0
   24f4a:	d000      	beq.n	24f4e <m2m_ip_cb+0xce>
   24f4c:	e231      	b.n	253b2 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   24f4e:	23b4      	movs	r3, #180	; 0xb4
   24f50:	18fb      	adds	r3, r7, r3
   24f52:	7a5b      	ldrb	r3, [r3, #9]
   24f54:	b25b      	sxtb	r3, r3
   24f56:	2b00      	cmp	r3, #0
   24f58:	db4f      	blt.n	24ffa <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   24f5a:	23b4      	movs	r3, #180	; 0xb4
   24f5c:	18fb      	adds	r3, r7, r3
   24f5e:	7a5b      	ldrb	r3, [r3, #9]
   24f60:	b25b      	sxtb	r3, r3
   24f62:	0018      	movs	r0, r3
   24f64:	23b4      	movs	r3, #180	; 0xb4
   24f66:	18fb      	adds	r3, r7, r3
   24f68:	7a1b      	ldrb	r3, [r3, #8]
   24f6a:	b25b      	sxtb	r3, r3
   24f6c:	4a6a      	ldr	r2, [pc, #424]	; (25118 <m2m_ip_cb+0x298>)
   24f6e:	011b      	lsls	r3, r3, #4
   24f70:	18d3      	adds	r3, r2, r3
   24f72:	330b      	adds	r3, #11
   24f74:	781b      	ldrb	r3, [r3, #0]
   24f76:	b2d9      	uxtb	r1, r3
   24f78:	4a67      	ldr	r2, [pc, #412]	; (25118 <m2m_ip_cb+0x298>)
   24f7a:	0103      	lsls	r3, r0, #4
   24f7c:	18d3      	adds	r3, r2, r3
   24f7e:	330b      	adds	r3, #11
   24f80:	1c0a      	adds	r2, r1, #0
   24f82:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   24f84:	23b4      	movs	r3, #180	; 0xb4
   24f86:	18fb      	adds	r3, r7, r3
   24f88:	7a5b      	ldrb	r3, [r3, #9]
   24f8a:	b25b      	sxtb	r3, r3
   24f8c:	4a62      	ldr	r2, [pc, #392]	; (25118 <m2m_ip_cb+0x298>)
   24f8e:	011b      	lsls	r3, r3, #4
   24f90:	18d3      	adds	r3, r2, r3
   24f92:	330a      	adds	r3, #10
   24f94:	2201      	movs	r2, #1
   24f96:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24f98:	23b4      	movs	r3, #180	; 0xb4
   24f9a:	18fb      	adds	r3, r7, r3
   24f9c:	7a5b      	ldrb	r3, [r3, #9]
   24f9e:	b25b      	sxtb	r3, r3
   24fa0:	0018      	movs	r0, r3
   24fa2:	23b4      	movs	r3, #180	; 0xb4
   24fa4:	18fb      	adds	r3, r7, r3
   24fa6:	895b      	ldrh	r3, [r3, #10]
   24fa8:	3b08      	subs	r3, #8
   24faa:	b299      	uxth	r1, r3
   24fac:	4a5a      	ldr	r2, [pc, #360]	; (25118 <m2m_ip_cb+0x298>)
   24fae:	0103      	lsls	r3, r0, #4
   24fb0:	18d3      	adds	r3, r2, r3
   24fb2:	3308      	adds	r3, #8
   24fb4:	1c0a      	adds	r2, r1, #0
   24fb6:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   24fb8:	4b58      	ldr	r3, [pc, #352]	; (2511c <m2m_ip_cb+0x29c>)
   24fba:	881b      	ldrh	r3, [r3, #0]
   24fbc:	b29b      	uxth	r3, r3
   24fbe:	3301      	adds	r3, #1
   24fc0:	b29a      	uxth	r2, r3
   24fc2:	4b56      	ldr	r3, [pc, #344]	; (2511c <m2m_ip_cb+0x29c>)
   24fc4:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   24fc6:	4b55      	ldr	r3, [pc, #340]	; (2511c <m2m_ip_cb+0x29c>)
   24fc8:	881b      	ldrh	r3, [r3, #0]
   24fca:	b29b      	uxth	r3, r3
   24fcc:	2b00      	cmp	r3, #0
   24fce:	d106      	bne.n	24fde <m2m_ip_cb+0x15e>
					++gu16SessionID;
   24fd0:	4b52      	ldr	r3, [pc, #328]	; (2511c <m2m_ip_cb+0x29c>)
   24fd2:	881b      	ldrh	r3, [r3, #0]
   24fd4:	b29b      	uxth	r3, r3
   24fd6:	3301      	adds	r3, #1
   24fd8:	b29a      	uxth	r2, r3
   24fda:	4b50      	ldr	r3, [pc, #320]	; (2511c <m2m_ip_cb+0x29c>)
   24fdc:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   24fde:	23b4      	movs	r3, #180	; 0xb4
   24fe0:	18fb      	adds	r3, r7, r3
   24fe2:	7a5b      	ldrb	r3, [r3, #9]
   24fe4:	b25b      	sxtb	r3, r3
   24fe6:	0018      	movs	r0, r3
   24fe8:	4b4c      	ldr	r3, [pc, #304]	; (2511c <m2m_ip_cb+0x29c>)
   24fea:	881b      	ldrh	r3, [r3, #0]
   24fec:	b299      	uxth	r1, r3
   24fee:	4a4a      	ldr	r2, [pc, #296]	; (25118 <m2m_ip_cb+0x298>)
   24ff0:	0103      	lsls	r3, r0, #4
   24ff2:	18d3      	adds	r3, r2, r3
   24ff4:	3306      	adds	r3, #6
   24ff6:	1c0a      	adds	r2, r1, #0
   24ff8:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   24ffa:	23b4      	movs	r3, #180	; 0xb4
   24ffc:	18fb      	adds	r3, r7, r3
   24ffe:	2209      	movs	r2, #9
   25000:	569a      	ldrsb	r2, [r3, r2]
   25002:	23a0      	movs	r3, #160	; 0xa0
   25004:	18fb      	adds	r3, r7, r3
   25006:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   25008:	23a0      	movs	r3, #160	; 0xa0
   2500a:	18fb      	adds	r3, r7, r3
   2500c:	2202      	movs	r2, #2
   2500e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   25010:	23b4      	movs	r3, #180	; 0xb4
   25012:	18fb      	adds	r3, r7, r3
   25014:	885a      	ldrh	r2, [r3, #2]
   25016:	23a0      	movs	r3, #160	; 0xa0
   25018:	18fb      	adds	r3, r7, r3
   2501a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   2501c:	23b4      	movs	r3, #180	; 0xb4
   2501e:	18fb      	adds	r3, r7, r3
   25020:	685a      	ldr	r2, [r3, #4]
   25022:	23a0      	movs	r3, #160	; 0xa0
   25024:	18fb      	adds	r3, r7, r3
   25026:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   25028:	4b3a      	ldr	r3, [pc, #232]	; (25114 <m2m_ip_cb+0x294>)
   2502a:	681b      	ldr	r3, [r3, #0]
   2502c:	2b00      	cmp	r3, #0
   2502e:	d100      	bne.n	25032 <m2m_ip_cb+0x1b2>
   25030:	e1bf      	b.n	253b2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   25032:	4b38      	ldr	r3, [pc, #224]	; (25114 <m2m_ip_cb+0x294>)
   25034:	681b      	ldr	r3, [r3, #0]
   25036:	22b4      	movs	r2, #180	; 0xb4
   25038:	18ba      	adds	r2, r7, r2
   2503a:	2008      	movs	r0, #8
   2503c:	5610      	ldrsb	r0, [r2, r0]
   2503e:	22a0      	movs	r2, #160	; 0xa0
   25040:	18ba      	adds	r2, r7, r2
   25042:	2104      	movs	r1, #4
   25044:	4798      	blx	r3
}
   25046:	e1b4      	b.n	253b2 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   25048:	1dfb      	adds	r3, r7, #7
   2504a:	781b      	ldrb	r3, [r3, #0]
   2504c:	2b44      	cmp	r3, #68	; 0x44
   2504e:	d003      	beq.n	25058 <m2m_ip_cb+0x1d8>
   25050:	1dfb      	adds	r3, r7, #7
   25052:	781b      	ldrb	r3, [r3, #0]
   25054:	2b4b      	cmp	r3, #75	; 0x4b
   25056:	d13d      	bne.n	250d4 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   25058:	239c      	movs	r3, #156	; 0x9c
   2505a:	18f9      	adds	r1, r7, r3
   2505c:	6838      	ldr	r0, [r7, #0]
   2505e:	2300      	movs	r3, #0
   25060:	2204      	movs	r2, #4
   25062:	4c2b      	ldr	r4, [pc, #172]	; (25110 <m2m_ip_cb+0x290>)
   25064:	47a0      	blx	r4
   25066:	1e03      	subs	r3, r0, #0
   25068:	d000      	beq.n	2506c <m2m_ip_cb+0x1ec>
   2506a:	e19d      	b.n	253a8 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   2506c:	239c      	movs	r3, #156	; 0x9c
   2506e:	18fb      	adds	r3, r7, r3
   25070:	2200      	movs	r2, #0
   25072:	569a      	ldrsb	r2, [r3, r2]
   25074:	2398      	movs	r3, #152	; 0x98
   25076:	18fb      	adds	r3, r7, r3
   25078:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   2507a:	239c      	movs	r3, #156	; 0x9c
   2507c:	18fb      	adds	r3, r7, r3
   2507e:	2201      	movs	r2, #1
   25080:	569a      	ldrsb	r2, [r3, r2]
   25082:	2398      	movs	r3, #152	; 0x98
   25084:	18fb      	adds	r3, r7, r3
   25086:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   25088:	239c      	movs	r3, #156	; 0x9c
   2508a:	18fb      	adds	r3, r7, r3
   2508c:	785b      	ldrb	r3, [r3, #1]
   2508e:	b25b      	sxtb	r3, r3
   25090:	2b00      	cmp	r3, #0
   25092:	d10f      	bne.n	250b4 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25094:	239c      	movs	r3, #156	; 0x9c
   25096:	18fb      	adds	r3, r7, r3
   25098:	781b      	ldrb	r3, [r3, #0]
   2509a:	b25b      	sxtb	r3, r3
   2509c:	0018      	movs	r0, r3
   2509e:	239c      	movs	r3, #156	; 0x9c
   250a0:	18fb      	adds	r3, r7, r3
   250a2:	885b      	ldrh	r3, [r3, #2]
   250a4:	3b08      	subs	r3, #8
   250a6:	b299      	uxth	r1, r3
   250a8:	4a1b      	ldr	r2, [pc, #108]	; (25118 <m2m_ip_cb+0x298>)
   250aa:	0103      	lsls	r3, r0, #4
   250ac:	18d3      	adds	r3, r2, r3
   250ae:	3308      	adds	r3, #8
   250b0:	1c0a      	adds	r2, r1, #0
   250b2:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   250b4:	4b17      	ldr	r3, [pc, #92]	; (25114 <m2m_ip_cb+0x294>)
   250b6:	681b      	ldr	r3, [r3, #0]
   250b8:	2b00      	cmp	r3, #0
   250ba:	d100      	bne.n	250be <m2m_ip_cb+0x23e>
   250bc:	e174      	b.n	253a8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   250be:	4b15      	ldr	r3, [pc, #84]	; (25114 <m2m_ip_cb+0x294>)
   250c0:	681b      	ldr	r3, [r3, #0]
   250c2:	229c      	movs	r2, #156	; 0x9c
   250c4:	18ba      	adds	r2, r7, r2
   250c6:	2000      	movs	r0, #0
   250c8:	5610      	ldrsb	r0, [r2, r0]
   250ca:	2298      	movs	r2, #152	; 0x98
   250cc:	18ba      	adds	r2, r7, r2
   250ce:	2105      	movs	r1, #5
   250d0:	4798      	blx	r3
	{
   250d2:	e169      	b.n	253a8 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   250d4:	1dfb      	adds	r3, r7, #7
   250d6:	781b      	ldrb	r3, [r3, #0]
   250d8:	2b4a      	cmp	r3, #74	; 0x4a
   250da:	d123      	bne.n	25124 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   250dc:	230c      	movs	r3, #12
   250de:	18f9      	adds	r1, r7, r3
   250e0:	6838      	ldr	r0, [r7, #0]
   250e2:	2300      	movs	r3, #0
   250e4:	2244      	movs	r2, #68	; 0x44
   250e6:	4c0a      	ldr	r4, [pc, #40]	; (25110 <m2m_ip_cb+0x290>)
   250e8:	47a0      	blx	r4
   250ea:	1e03      	subs	r3, r0, #0
   250ec:	d000      	beq.n	250f0 <m2m_ip_cb+0x270>
   250ee:	e160      	b.n	253b2 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   250f0:	4b0b      	ldr	r3, [pc, #44]	; (25120 <m2m_ip_cb+0x2a0>)
   250f2:	681b      	ldr	r3, [r3, #0]
   250f4:	2b00      	cmp	r3, #0
   250f6:	d100      	bne.n	250fa <m2m_ip_cb+0x27a>
   250f8:	e15b      	b.n	253b2 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   250fa:	4b09      	ldr	r3, [pc, #36]	; (25120 <m2m_ip_cb+0x2a0>)
   250fc:	681a      	ldr	r2, [r3, #0]
   250fe:	230c      	movs	r3, #12
   25100:	18fb      	adds	r3, r7, r3
   25102:	6c19      	ldr	r1, [r3, #64]	; 0x40
   25104:	230c      	movs	r3, #12
   25106:	18fb      	adds	r3, r7, r3
   25108:	0018      	movs	r0, r3
   2510a:	4790      	blx	r2
}
   2510c:	e151      	b.n	253b2 <m2m_ip_cb+0x532>
   2510e:	46c0      	nop			; (mov r8, r8)
   25110:	0002167d 	.word	0x0002167d
   25114:	20005740 	.word	0x20005740
   25118:	20005690 	.word	0x20005690
   2511c:	20003e9e 	.word	0x20003e9e
   25120:	20005748 	.word	0x20005748
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   25124:	1dfb      	adds	r3, r7, #7
   25126:	781b      	ldrb	r3, [r3, #0]
   25128:	2b46      	cmp	r3, #70	; 0x46
   2512a:	d008      	beq.n	2513e <m2m_ip_cb+0x2be>
   2512c:	1dfb      	adds	r3, r7, #7
   2512e:	781b      	ldrb	r3, [r3, #0]
   25130:	2b48      	cmp	r3, #72	; 0x48
   25132:	d004      	beq.n	2513e <m2m_ip_cb+0x2be>
   25134:	1dfb      	adds	r3, r7, #7
   25136:	781b      	ldrb	r3, [r3, #0]
   25138:	2b4d      	cmp	r3, #77	; 0x4d
   2513a:	d000      	beq.n	2513e <m2m_ip_cb+0x2be>
   2513c:	e0b4      	b.n	252a8 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   2513e:	23df      	movs	r3, #223	; 0xdf
   25140:	18fb      	adds	r3, r7, r3
   25142:	2206      	movs	r2, #6
   25144:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   25146:	1dfb      	adds	r3, r7, #7
   25148:	781b      	ldrb	r3, [r3, #0]
   2514a:	2b48      	cmp	r3, #72	; 0x48
   2514c:	d103      	bne.n	25156 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   2514e:	23df      	movs	r3, #223	; 0xdf
   25150:	18fb      	adds	r3, r7, r3
   25152:	2209      	movs	r2, #9
   25154:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   25156:	23d8      	movs	r3, #216	; 0xd8
   25158:	18fb      	adds	r3, r7, r3
   2515a:	2210      	movs	r2, #16
   2515c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   2515e:	23d8      	movs	r3, #216	; 0xd8
   25160:	18fb      	adds	r3, r7, r3
   25162:	881a      	ldrh	r2, [r3, #0]
   25164:	2388      	movs	r3, #136	; 0x88
   25166:	18f9      	adds	r1, r7, r3
   25168:	6838      	ldr	r0, [r7, #0]
   2516a:	2300      	movs	r3, #0
   2516c:	4c93      	ldr	r4, [pc, #588]	; (253bc <m2m_ip_cb+0x53c>)
   2516e:	47a0      	blx	r4
   25170:	1e03      	subs	r3, r0, #0
   25172:	d000      	beq.n	25176 <m2m_ip_cb+0x2f6>
   25174:	e11a      	b.n	253ac <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   25176:	23d6      	movs	r3, #214	; 0xd6
   25178:	18fb      	adds	r3, r7, r3
   2517a:	2200      	movs	r2, #0
   2517c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   2517e:	23d5      	movs	r3, #213	; 0xd5
   25180:	18fb      	adds	r3, r7, r3
   25182:	2288      	movs	r2, #136	; 0x88
   25184:	18ba      	adds	r2, r7, r2
   25186:	7b12      	ldrb	r2, [r2, #12]
   25188:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   2518a:	23d6      	movs	r3, #214	; 0xd6
   2518c:	18fb      	adds	r3, r7, r3
   2518e:	2288      	movs	r2, #136	; 0x88
   25190:	18ba      	adds	r2, r7, r2
   25192:	89d2      	ldrh	r2, [r2, #14]
   25194:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   25196:	23d5      	movs	r3, #213	; 0xd5
   25198:	18fb      	adds	r3, r7, r3
   2519a:	781b      	ldrb	r3, [r3, #0]
   2519c:	b25b      	sxtb	r3, r3
   2519e:	4a88      	ldr	r2, [pc, #544]	; (253c0 <m2m_ip_cb+0x540>)
   251a0:	011b      	lsls	r3, r3, #4
   251a2:	18d3      	adds	r3, r2, r3
   251a4:	330c      	adds	r3, #12
   251a6:	2200      	movs	r2, #0
   251a8:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   251aa:	23d2      	movs	r3, #210	; 0xd2
   251ac:	18fb      	adds	r3, r7, r3
   251ae:	2288      	movs	r2, #136	; 0x88
   251b0:	18ba      	adds	r2, r7, r2
   251b2:	8912      	ldrh	r2, [r2, #8]
   251b4:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   251b6:	23d0      	movs	r3, #208	; 0xd0
   251b8:	18fb      	adds	r3, r7, r3
   251ba:	2288      	movs	r2, #136	; 0x88
   251bc:	18ba      	adds	r2, r7, r2
   251be:	8952      	ldrh	r2, [r2, #10]
   251c0:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   251c2:	2388      	movs	r3, #136	; 0x88
   251c4:	18fb      	adds	r3, r7, r3
   251c6:	885a      	ldrh	r2, [r3, #2]
   251c8:	2370      	movs	r3, #112	; 0x70
   251ca:	18fb      	adds	r3, r7, r3
   251cc:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   251ce:	2388      	movs	r3, #136	; 0x88
   251d0:	18fb      	adds	r3, r7, r3
   251d2:	685a      	ldr	r2, [r3, #4]
   251d4:	2370      	movs	r3, #112	; 0x70
   251d6:	18fb      	adds	r3, r7, r3
   251d8:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   251da:	23d5      	movs	r3, #213	; 0xd5
   251dc:	18fb      	adds	r3, r7, r3
   251de:	781b      	ldrb	r3, [r3, #0]
   251e0:	b25b      	sxtb	r3, r3
   251e2:	4a77      	ldr	r2, [pc, #476]	; (253c0 <m2m_ip_cb+0x540>)
   251e4:	011b      	lsls	r3, r3, #4
   251e6:	18d3      	adds	r3, r2, r3
   251e8:	3306      	adds	r3, #6
   251ea:	881b      	ldrh	r3, [r3, #0]
   251ec:	b29b      	uxth	r3, r3
   251ee:	22d6      	movs	r2, #214	; 0xd6
   251f0:	18ba      	adds	r2, r7, r2
   251f2:	8812      	ldrh	r2, [r2, #0]
   251f4:	429a      	cmp	r2, r3
   251f6:	d148      	bne.n	2528a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   251f8:	23d2      	movs	r3, #210	; 0xd2
   251fa:	18fb      	adds	r3, r7, r3
   251fc:	2200      	movs	r2, #0
   251fe:	5e9b      	ldrsh	r3, [r3, r2]
   25200:	2b00      	cmp	r3, #0
   25202:	dd25      	ble.n	25250 <m2m_ip_cb+0x3d0>
   25204:	23d2      	movs	r3, #210	; 0xd2
   25206:	18fb      	adds	r3, r7, r3
   25208:	2200      	movs	r2, #0
   2520a:	5e9a      	ldrsh	r2, [r3, r2]
   2520c:	1d3b      	adds	r3, r7, #4
   2520e:	881b      	ldrh	r3, [r3, #0]
   25210:	429a      	cmp	r2, r3
   25212:	da1d      	bge.n	25250 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   25214:	23d0      	movs	r3, #208	; 0xd0
   25216:	18fb      	adds	r3, r7, r3
   25218:	881b      	ldrh	r3, [r3, #0]
   2521a:	683a      	ldr	r2, [r7, #0]
   2521c:	18d3      	adds	r3, r2, r3
   2521e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   25220:	23d8      	movs	r3, #216	; 0xd8
   25222:	18fb      	adds	r3, r7, r3
   25224:	22d2      	movs	r2, #210	; 0xd2
   25226:	18ba      	adds	r2, r7, r2
   25228:	8812      	ldrh	r2, [r2, #0]
   2522a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   2522c:	683c      	ldr	r4, [r7, #0]
   2522e:	23df      	movs	r3, #223	; 0xdf
   25230:	18fb      	adds	r3, r7, r3
   25232:	781a      	ldrb	r2, [r3, #0]
   25234:	2370      	movs	r3, #112	; 0x70
   25236:	18f9      	adds	r1, r7, r3
   25238:	23d5      	movs	r3, #213	; 0xd5
   2523a:	18fb      	adds	r3, r7, r3
   2523c:	2000      	movs	r0, #0
   2523e:	5618      	ldrsb	r0, [r3, r0]
   25240:	23d8      	movs	r3, #216	; 0xd8
   25242:	18fb      	adds	r3, r7, r3
   25244:	881b      	ldrh	r3, [r3, #0]
   25246:	9300      	str	r3, [sp, #0]
   25248:	0023      	movs	r3, r4
   2524a:	4c5e      	ldr	r4, [pc, #376]	; (253c4 <m2m_ip_cb+0x544>)
   2524c:	47a0      	blx	r4
	{
   2524e:	e0ad      	b.n	253ac <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   25250:	2370      	movs	r3, #112	; 0x70
   25252:	18fb      	adds	r3, r7, r3
   25254:	22d2      	movs	r2, #210	; 0xd2
   25256:	18ba      	adds	r2, r7, r2
   25258:	8812      	ldrh	r2, [r2, #0]
   2525a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   2525c:	2370      	movs	r3, #112	; 0x70
   2525e:	18fb      	adds	r3, r7, r3
   25260:	2200      	movs	r2, #0
   25262:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   25264:	4b58      	ldr	r3, [pc, #352]	; (253c8 <m2m_ip_cb+0x548>)
   25266:	681b      	ldr	r3, [r3, #0]
   25268:	2b00      	cmp	r3, #0
   2526a:	d100      	bne.n	2526e <m2m_ip_cb+0x3ee>
   2526c:	e09e      	b.n	253ac <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   2526e:	4b56      	ldr	r3, [pc, #344]	; (253c8 <m2m_ip_cb+0x548>)
   25270:	681b      	ldr	r3, [r3, #0]
   25272:	2270      	movs	r2, #112	; 0x70
   25274:	18bc      	adds	r4, r7, r2
   25276:	22df      	movs	r2, #223	; 0xdf
   25278:	18ba      	adds	r2, r7, r2
   2527a:	7811      	ldrb	r1, [r2, #0]
   2527c:	22d5      	movs	r2, #213	; 0xd5
   2527e:	18ba      	adds	r2, r7, r2
   25280:	2000      	movs	r0, #0
   25282:	5610      	ldrsb	r0, [r2, r0]
   25284:	0022      	movs	r2, r4
   25286:	4798      	blx	r3
	{
   25288:	e090      	b.n	253ac <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   2528a:	23d8      	movs	r3, #216	; 0xd8
   2528c:	18fa      	adds	r2, r7, r3
   2528e:	1d3b      	adds	r3, r7, #4
   25290:	8812      	ldrh	r2, [r2, #0]
   25292:	881b      	ldrh	r3, [r3, #0]
   25294:	429a      	cmp	r2, r3
   25296:	d300      	bcc.n	2529a <m2m_ip_cb+0x41a>
   25298:	e088      	b.n	253ac <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2529a:	2301      	movs	r3, #1
   2529c:	2200      	movs	r2, #0
   2529e:	2100      	movs	r1, #0
   252a0:	2000      	movs	r0, #0
   252a2:	4c46      	ldr	r4, [pc, #280]	; (253bc <m2m_ip_cb+0x53c>)
   252a4:	47a0      	blx	r4
	{
   252a6:	e081      	b.n	253ac <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   252a8:	1dfb      	adds	r3, r7, #7
   252aa:	781b      	ldrb	r3, [r3, #0]
   252ac:	2b45      	cmp	r3, #69	; 0x45
   252ae:	d007      	beq.n	252c0 <m2m_ip_cb+0x440>
   252b0:	1dfb      	adds	r3, r7, #7
   252b2:	781b      	ldrb	r3, [r3, #0]
   252b4:	2b47      	cmp	r3, #71	; 0x47
   252b6:	d003      	beq.n	252c0 <m2m_ip_cb+0x440>
   252b8:	1dfb      	adds	r3, r7, #7
   252ba:	781b      	ldrb	r3, [r3, #0]
   252bc:	2b4c      	cmp	r3, #76	; 0x4c
   252be:	d14c      	bne.n	2535a <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   252c0:	23de      	movs	r3, #222	; 0xde
   252c2:	18fb      	adds	r3, r7, r3
   252c4:	2207      	movs	r2, #7
   252c6:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   252c8:	1dfb      	adds	r3, r7, #7
   252ca:	781b      	ldrb	r3, [r3, #0]
   252cc:	2b47      	cmp	r3, #71	; 0x47
   252ce:	d103      	bne.n	252d8 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   252d0:	23de      	movs	r3, #222	; 0xde
   252d2:	18fb      	adds	r3, r7, r3
   252d4:	2208      	movs	r2, #8
   252d6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   252d8:	2364      	movs	r3, #100	; 0x64
   252da:	18f9      	adds	r1, r7, r3
   252dc:	6838      	ldr	r0, [r7, #0]
   252de:	2300      	movs	r3, #0
   252e0:	2208      	movs	r2, #8
   252e2:	4c36      	ldr	r4, [pc, #216]	; (253bc <m2m_ip_cb+0x53c>)
   252e4:	47a0      	blx	r4
   252e6:	1e03      	subs	r3, r0, #0
   252e8:	d162      	bne.n	253b0 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   252ea:	23dc      	movs	r3, #220	; 0xdc
   252ec:	18fb      	adds	r3, r7, r3
   252ee:	2200      	movs	r2, #0
   252f0:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   252f2:	23db      	movs	r3, #219	; 0xdb
   252f4:	18fb      	adds	r3, r7, r3
   252f6:	2264      	movs	r2, #100	; 0x64
   252f8:	18ba      	adds	r2, r7, r2
   252fa:	7812      	ldrb	r2, [r2, #0]
   252fc:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   252fe:	23dc      	movs	r3, #220	; 0xdc
   25300:	18fb      	adds	r3, r7, r3
   25302:	2264      	movs	r2, #100	; 0x64
   25304:	18ba      	adds	r2, r7, r2
   25306:	8892      	ldrh	r2, [r2, #4]
   25308:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   2530a:	2364      	movs	r3, #100	; 0x64
   2530c:	18fb      	adds	r3, r7, r3
   2530e:	2202      	movs	r2, #2
   25310:	5e9a      	ldrsh	r2, [r3, r2]
   25312:	236e      	movs	r3, #110	; 0x6e
   25314:	18fb      	adds	r3, r7, r3
   25316:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   25318:	23db      	movs	r3, #219	; 0xdb
   2531a:	18fb      	adds	r3, r7, r3
   2531c:	781b      	ldrb	r3, [r3, #0]
   2531e:	b25b      	sxtb	r3, r3
   25320:	4a27      	ldr	r2, [pc, #156]	; (253c0 <m2m_ip_cb+0x540>)
   25322:	011b      	lsls	r3, r3, #4
   25324:	18d3      	adds	r3, r2, r3
   25326:	3306      	adds	r3, #6
   25328:	881b      	ldrh	r3, [r3, #0]
   2532a:	b29b      	uxth	r3, r3
   2532c:	22dc      	movs	r2, #220	; 0xdc
   2532e:	18ba      	adds	r2, r7, r2
   25330:	8812      	ldrh	r2, [r2, #0]
   25332:	429a      	cmp	r2, r3
   25334:	d13c      	bne.n	253b0 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   25336:	4b24      	ldr	r3, [pc, #144]	; (253c8 <m2m_ip_cb+0x548>)
   25338:	681b      	ldr	r3, [r3, #0]
   2533a:	2b00      	cmp	r3, #0
   2533c:	d038      	beq.n	253b0 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   2533e:	4b22      	ldr	r3, [pc, #136]	; (253c8 <m2m_ip_cb+0x548>)
   25340:	681b      	ldr	r3, [r3, #0]
   25342:	226e      	movs	r2, #110	; 0x6e
   25344:	18bc      	adds	r4, r7, r2
   25346:	22de      	movs	r2, #222	; 0xde
   25348:	18ba      	adds	r2, r7, r2
   2534a:	7811      	ldrb	r1, [r2, #0]
   2534c:	22db      	movs	r2, #219	; 0xdb
   2534e:	18ba      	adds	r2, r7, r2
   25350:	2000      	movs	r0, #0
   25352:	5610      	ldrsb	r0, [r2, r0]
   25354:	0022      	movs	r2, r4
   25356:	4798      	blx	r3
	{
   25358:	e02a      	b.n	253b0 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   2535a:	1dfb      	adds	r3, r7, #7
   2535c:	781b      	ldrb	r3, [r3, #0]
   2535e:	2b52      	cmp	r3, #82	; 0x52
   25360:	d127      	bne.n	253b2 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   25362:	2350      	movs	r3, #80	; 0x50
   25364:	18f9      	adds	r1, r7, r3
   25366:	6838      	ldr	r0, [r7, #0]
   25368:	2301      	movs	r3, #1
   2536a:	2214      	movs	r2, #20
   2536c:	4c13      	ldr	r4, [pc, #76]	; (253bc <m2m_ip_cb+0x53c>)
   2536e:	47a0      	blx	r4
   25370:	1e03      	subs	r3, r0, #0
   25372:	d11e      	bne.n	253b2 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   25374:	2350      	movs	r3, #80	; 0x50
   25376:	18fb      	adds	r3, r7, r3
   25378:	685b      	ldr	r3, [r3, #4]
   2537a:	001a      	movs	r2, r3
   2537c:	4b13      	ldr	r3, [pc, #76]	; (253cc <m2m_ip_cb+0x54c>)
   2537e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   25380:	4b12      	ldr	r3, [pc, #72]	; (253cc <m2m_ip_cb+0x54c>)
   25382:	681b      	ldr	r3, [r3, #0]
   25384:	2b00      	cmp	r3, #0
   25386:	d014      	beq.n	253b2 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   25388:	4b10      	ldr	r3, [pc, #64]	; (253cc <m2m_ip_cb+0x54c>)
   2538a:	681c      	ldr	r4, [r3, #0]
   2538c:	2350      	movs	r3, #80	; 0x50
   2538e:	18fb      	adds	r3, r7, r3
   25390:	6818      	ldr	r0, [r3, #0]
   25392:	2350      	movs	r3, #80	; 0x50
   25394:	18fb      	adds	r3, r7, r3
   25396:	6899      	ldr	r1, [r3, #8]
   25398:	2350      	movs	r3, #80	; 0x50
   2539a:	18fb      	adds	r3, r7, r3
   2539c:	7c1b      	ldrb	r3, [r3, #16]
   2539e:	001a      	movs	r2, r3
   253a0:	47a0      	blx	r4
}
   253a2:	e006      	b.n	253b2 <m2m_ip_cb+0x532>
	{
   253a4:	46c0      	nop			; (mov r8, r8)
   253a6:	e004      	b.n	253b2 <m2m_ip_cb+0x532>
	{
   253a8:	46c0      	nop			; (mov r8, r8)
   253aa:	e002      	b.n	253b2 <m2m_ip_cb+0x532>
	{
   253ac:	46c0      	nop			; (mov r8, r8)
   253ae:	e000      	b.n	253b2 <m2m_ip_cb+0x532>
	{
   253b0:	46c0      	nop			; (mov r8, r8)
}
   253b2:	46c0      	nop			; (mov r8, r8)
   253b4:	46bd      	mov	sp, r7
   253b6:	b039      	add	sp, #228	; 0xe4
   253b8:	bd90      	pop	{r4, r7, pc}
   253ba:	46c0      	nop			; (mov r8, r8)
   253bc:	0002167d 	.word	0x0002167d
   253c0:	20005690 	.word	0x20005690
   253c4:	00024c85 	.word	0x00024c85
   253c8:	20005740 	.word	0x20005740
   253cc:	20005744 	.word	0x20005744

000253d0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   253d0:	b580      	push	{r7, lr}
   253d2:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   253d4:	4b0c      	ldr	r3, [pc, #48]	; (25408 <socketInit+0x38>)
   253d6:	781b      	ldrb	r3, [r3, #0]
   253d8:	b2db      	uxtb	r3, r3
   253da:	2b00      	cmp	r3, #0
   253dc:	d110      	bne.n	25400 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   253de:	4b0b      	ldr	r3, [pc, #44]	; (2540c <socketInit+0x3c>)
   253e0:	22b0      	movs	r2, #176	; 0xb0
   253e2:	2100      	movs	r1, #0
   253e4:	0018      	movs	r0, r3
   253e6:	4b0a      	ldr	r3, [pc, #40]	; (25410 <socketInit+0x40>)
   253e8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   253ea:	4b0a      	ldr	r3, [pc, #40]	; (25414 <socketInit+0x44>)
   253ec:	0019      	movs	r1, r3
   253ee:	2002      	movs	r0, #2
   253f0:	4b09      	ldr	r3, [pc, #36]	; (25418 <socketInit+0x48>)
   253f2:	4798      	blx	r3
		gbSocketInit	= 1;
   253f4:	4b04      	ldr	r3, [pc, #16]	; (25408 <socketInit+0x38>)
   253f6:	2201      	movs	r2, #1
   253f8:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   253fa:	4b08      	ldr	r3, [pc, #32]	; (2541c <socketInit+0x4c>)
   253fc:	2200      	movs	r2, #0
   253fe:	801a      	strh	r2, [r3, #0]
	}
}
   25400:	46c0      	nop			; (mov r8, r8)
   25402:	46bd      	mov	sp, r7
   25404:	bd80      	pop	{r7, pc}
   25406:	46c0      	nop			; (mov r8, r8)
   25408:	20003ea0 	.word	0x20003ea0
   2540c:	20005690 	.word	0x20005690
   25410:	00020b01 	.word	0x00020b01
   25414:	00024e81 	.word	0x00024e81
   25418:	000217fd 	.word	0x000217fd
   2541c:	20003e9e 	.word	0x20003e9e

00025420 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   25420:	b580      	push	{r7, lr}
   25422:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   25424:	4b0a      	ldr	r3, [pc, #40]	; (25450 <socketDeinit+0x30>)
   25426:	22b0      	movs	r2, #176	; 0xb0
   25428:	2100      	movs	r1, #0
   2542a:	0018      	movs	r0, r3
   2542c:	4b09      	ldr	r3, [pc, #36]	; (25454 <socketDeinit+0x34>)
   2542e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   25430:	2100      	movs	r1, #0
   25432:	2002      	movs	r0, #2
   25434:	4b08      	ldr	r3, [pc, #32]	; (25458 <socketDeinit+0x38>)
   25436:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   25438:	4b08      	ldr	r3, [pc, #32]	; (2545c <socketDeinit+0x3c>)
   2543a:	2200      	movs	r2, #0
   2543c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   2543e:	4b08      	ldr	r3, [pc, #32]	; (25460 <socketDeinit+0x40>)
   25440:	2200      	movs	r2, #0
   25442:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   25444:	4b07      	ldr	r3, [pc, #28]	; (25464 <socketDeinit+0x44>)
   25446:	2200      	movs	r2, #0
   25448:	701a      	strb	r2, [r3, #0]
}
   2544a:	46c0      	nop			; (mov r8, r8)
   2544c:	46bd      	mov	sp, r7
   2544e:	bd80      	pop	{r7, pc}
   25450:	20005690 	.word	0x20005690
   25454:	00020b01 	.word	0x00020b01
   25458:	000217fd 	.word	0x000217fd
   2545c:	20005740 	.word	0x20005740
   25460:	20005748 	.word	0x20005748
   25464:	20003ea0 	.word	0x20003ea0

00025468 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   25468:	b580      	push	{r7, lr}
   2546a:	b082      	sub	sp, #8
   2546c:	af00      	add	r7, sp, #0
   2546e:	6078      	str	r0, [r7, #4]
   25470:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   25472:	4b05      	ldr	r3, [pc, #20]	; (25488 <registerSocketCallback+0x20>)
   25474:	687a      	ldr	r2, [r7, #4]
   25476:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   25478:	4b04      	ldr	r3, [pc, #16]	; (2548c <registerSocketCallback+0x24>)
   2547a:	683a      	ldr	r2, [r7, #0]
   2547c:	601a      	str	r2, [r3, #0]
}
   2547e:	46c0      	nop			; (mov r8, r8)
   25480:	46bd      	mov	sp, r7
   25482:	b002      	add	sp, #8
   25484:	bd80      	pop	{r7, pc}
   25486:	46c0      	nop			; (mov r8, r8)
   25488:	20005740 	.word	0x20005740
   2548c:	20005748 	.word	0x20005748

00025490 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   25490:	b590      	push	{r4, r7, lr}
   25492:	b08d      	sub	sp, #52	; 0x34
   25494:	af04      	add	r7, sp, #16
   25496:	0004      	movs	r4, r0
   25498:	0008      	movs	r0, r1
   2549a:	0011      	movs	r1, r2
   2549c:	1dbb      	adds	r3, r7, #6
   2549e:	1c22      	adds	r2, r4, #0
   254a0:	801a      	strh	r2, [r3, #0]
   254a2:	1d7b      	adds	r3, r7, #5
   254a4:	1c02      	adds	r2, r0, #0
   254a6:	701a      	strb	r2, [r3, #0]
   254a8:	1d3b      	adds	r3, r7, #4
   254aa:	1c0a      	adds	r2, r1, #0
   254ac:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   254ae:	231f      	movs	r3, #31
   254b0:	18fb      	adds	r3, r7, r3
   254b2:	22ff      	movs	r2, #255	; 0xff
   254b4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   254b6:	1dbb      	adds	r3, r7, #6
   254b8:	881b      	ldrh	r3, [r3, #0]
   254ba:	2b02      	cmp	r3, #2
   254bc:	d000      	beq.n	254c0 <socket+0x30>
   254be:	e0ce      	b.n	2565e <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   254c0:	1d7b      	adds	r3, r7, #5
   254c2:	781b      	ldrb	r3, [r3, #0]
   254c4:	2b01      	cmp	r3, #1
   254c6:	d135      	bne.n	25534 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   254c8:	231e      	movs	r3, #30
   254ca:	18fb      	adds	r3, r7, r3
   254cc:	2200      	movs	r2, #0
   254ce:	701a      	strb	r2, [r3, #0]
   254d0:	e02a      	b.n	25528 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   254d2:	2317      	movs	r3, #23
   254d4:	18fb      	adds	r3, r7, r3
   254d6:	4a66      	ldr	r2, [pc, #408]	; (25670 <socket+0x1e0>)
   254d8:	7812      	ldrb	r2, [r2, #0]
   254da:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   254dc:	4b64      	ldr	r3, [pc, #400]	; (25670 <socket+0x1e0>)
   254de:	781b      	ldrb	r3, [r3, #0]
   254e0:	b2db      	uxtb	r3, r3
   254e2:	011a      	lsls	r2, r3, #4
   254e4:	4b63      	ldr	r3, [pc, #396]	; (25674 <socket+0x1e4>)
   254e6:	18d3      	adds	r3, r2, r3
   254e8:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   254ea:	4b61      	ldr	r3, [pc, #388]	; (25670 <socket+0x1e0>)
   254ec:	781b      	ldrb	r3, [r3, #0]
   254ee:	b2db      	uxtb	r3, r3
   254f0:	1c5a      	adds	r2, r3, #1
   254f2:	4b61      	ldr	r3, [pc, #388]	; (25678 <socket+0x1e8>)
   254f4:	2107      	movs	r1, #7
   254f6:	0010      	movs	r0, r2
   254f8:	4798      	blx	r3
   254fa:	000b      	movs	r3, r1
   254fc:	b2da      	uxtb	r2, r3
   254fe:	4b5c      	ldr	r3, [pc, #368]	; (25670 <socket+0x1e0>)
   25500:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   25502:	69bb      	ldr	r3, [r7, #24]
   25504:	7a9b      	ldrb	r3, [r3, #10]
   25506:	b2db      	uxtb	r3, r3
   25508:	2b00      	cmp	r3, #0
   2550a:	d106      	bne.n	2551a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   2550c:	231f      	movs	r3, #31
   2550e:	18fb      	adds	r3, r7, r3
   25510:	2217      	movs	r2, #23
   25512:	18ba      	adds	r2, r7, r2
   25514:	7812      	ldrb	r2, [r2, #0]
   25516:	701a      	strb	r2, [r3, #0]
					break;
   25518:	e04c      	b.n	255b4 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2551a:	231e      	movs	r3, #30
   2551c:	18fb      	adds	r3, r7, r3
   2551e:	781a      	ldrb	r2, [r3, #0]
   25520:	231e      	movs	r3, #30
   25522:	18fb      	adds	r3, r7, r3
   25524:	3201      	adds	r2, #1
   25526:	701a      	strb	r2, [r3, #0]
   25528:	231e      	movs	r3, #30
   2552a:	18fb      	adds	r3, r7, r3
   2552c:	781b      	ldrb	r3, [r3, #0]
   2552e:	2b06      	cmp	r3, #6
   25530:	d9cf      	bls.n	254d2 <socket+0x42>
   25532:	e03f      	b.n	255b4 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   25534:	1d7b      	adds	r3, r7, #5
   25536:	781b      	ldrb	r3, [r3, #0]
   25538:	2b02      	cmp	r3, #2
   2553a:	d13b      	bne.n	255b4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   2553c:	4b4f      	ldr	r3, [pc, #316]	; (2567c <socket+0x1ec>)
   2553e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   25540:	231e      	movs	r3, #30
   25542:	18fb      	adds	r3, r7, r3
   25544:	2200      	movs	r2, #0
   25546:	701a      	strb	r2, [r3, #0]
   25548:	e02f      	b.n	255aa <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   2554a:	2317      	movs	r3, #23
   2554c:	18fb      	adds	r3, r7, r3
   2554e:	4a4c      	ldr	r2, [pc, #304]	; (25680 <socket+0x1f0>)
   25550:	7812      	ldrb	r2, [r2, #0]
   25552:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   25554:	4b4a      	ldr	r3, [pc, #296]	; (25680 <socket+0x1f0>)
   25556:	781b      	ldrb	r3, [r3, #0]
   25558:	b2db      	uxtb	r3, r3
   2555a:	011b      	lsls	r3, r3, #4
   2555c:	693a      	ldr	r2, [r7, #16]
   2555e:	18d3      	adds	r3, r2, r3
   25560:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   25562:	4b47      	ldr	r3, [pc, #284]	; (25680 <socket+0x1f0>)
   25564:	781b      	ldrb	r3, [r3, #0]
   25566:	b2db      	uxtb	r3, r3
   25568:	3301      	adds	r3, #1
   2556a:	4a46      	ldr	r2, [pc, #280]	; (25684 <socket+0x1f4>)
   2556c:	4013      	ands	r3, r2
   2556e:	d504      	bpl.n	2557a <socket+0xea>
   25570:	3b01      	subs	r3, #1
   25572:	2204      	movs	r2, #4
   25574:	4252      	negs	r2, r2
   25576:	4313      	orrs	r3, r2
   25578:	3301      	adds	r3, #1
   2557a:	b2da      	uxtb	r2, r3
   2557c:	4b40      	ldr	r3, [pc, #256]	; (25680 <socket+0x1f0>)
   2557e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   25580:	69bb      	ldr	r3, [r7, #24]
   25582:	7a9b      	ldrb	r3, [r3, #10]
   25584:	b2db      	uxtb	r3, r3
   25586:	2b00      	cmp	r3, #0
   25588:	d108      	bne.n	2559c <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   2558a:	2317      	movs	r3, #23
   2558c:	18fb      	adds	r3, r7, r3
   2558e:	781b      	ldrb	r3, [r3, #0]
   25590:	3307      	adds	r3, #7
   25592:	b2da      	uxtb	r2, r3
   25594:	231f      	movs	r3, #31
   25596:	18fb      	adds	r3, r7, r3
   25598:	701a      	strb	r2, [r3, #0]
					break;
   2559a:	e00b      	b.n	255b4 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   2559c:	231e      	movs	r3, #30
   2559e:	18fb      	adds	r3, r7, r3
   255a0:	781a      	ldrb	r2, [r3, #0]
   255a2:	231e      	movs	r3, #30
   255a4:	18fb      	adds	r3, r7, r3
   255a6:	3201      	adds	r2, #1
   255a8:	701a      	strb	r2, [r3, #0]
   255aa:	231e      	movs	r3, #30
   255ac:	18fb      	adds	r3, r7, r3
   255ae:	781b      	ldrb	r3, [r3, #0]
   255b0:	2b03      	cmp	r3, #3
   255b2:	d9ca      	bls.n	2554a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   255b4:	231f      	movs	r3, #31
   255b6:	18fb      	adds	r3, r7, r3
   255b8:	781b      	ldrb	r3, [r3, #0]
   255ba:	2b7f      	cmp	r3, #127	; 0x7f
   255bc:	d84f      	bhi.n	2565e <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   255be:	69bb      	ldr	r3, [r7, #24]
   255c0:	2210      	movs	r2, #16
   255c2:	2100      	movs	r1, #0
   255c4:	0018      	movs	r0, r3
   255c6:	4b30      	ldr	r3, [pc, #192]	; (25688 <socket+0x1f8>)
   255c8:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   255ca:	69bb      	ldr	r3, [r7, #24]
   255cc:	2201      	movs	r2, #1
   255ce:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   255d0:	4b2e      	ldr	r3, [pc, #184]	; (2568c <socket+0x1fc>)
   255d2:	881b      	ldrh	r3, [r3, #0]
   255d4:	b29b      	uxth	r3, r3
   255d6:	3301      	adds	r3, #1
   255d8:	b29a      	uxth	r2, r3
   255da:	4b2c      	ldr	r3, [pc, #176]	; (2568c <socket+0x1fc>)
   255dc:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   255de:	4b2b      	ldr	r3, [pc, #172]	; (2568c <socket+0x1fc>)
   255e0:	881b      	ldrh	r3, [r3, #0]
   255e2:	b29b      	uxth	r3, r3
   255e4:	2b00      	cmp	r3, #0
   255e6:	d106      	bne.n	255f6 <socket+0x166>
				++gu16SessionID;
   255e8:	4b28      	ldr	r3, [pc, #160]	; (2568c <socket+0x1fc>)
   255ea:	881b      	ldrh	r3, [r3, #0]
   255ec:	b29b      	uxth	r3, r3
   255ee:	3301      	adds	r3, #1
   255f0:	b29a      	uxth	r2, r3
   255f2:	4b26      	ldr	r3, [pc, #152]	; (2568c <socket+0x1fc>)
   255f4:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   255f6:	4b25      	ldr	r3, [pc, #148]	; (2568c <socket+0x1fc>)
   255f8:	881b      	ldrh	r3, [r3, #0]
   255fa:	b29a      	uxth	r2, r3
   255fc:	69bb      	ldr	r3, [r7, #24]
   255fe:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   25600:	4b23      	ldr	r3, [pc, #140]	; (25690 <socket+0x200>)
   25602:	0018      	movs	r0, r3
   25604:	4b23      	ldr	r3, [pc, #140]	; (25694 <socket+0x204>)
   25606:	4798      	blx	r3
   25608:	231f      	movs	r3, #31
   2560a:	18fb      	adds	r3, r7, r3
   2560c:	2100      	movs	r1, #0
   2560e:	5659      	ldrsb	r1, [r3, r1]
   25610:	4b1e      	ldr	r3, [pc, #120]	; (2568c <socket+0x1fc>)
   25612:	881b      	ldrh	r3, [r3, #0]
   25614:	b29b      	uxth	r3, r3
   25616:	001a      	movs	r2, r3
   25618:	4b1f      	ldr	r3, [pc, #124]	; (25698 <socket+0x208>)
   2561a:	0018      	movs	r0, r3
   2561c:	4b1d      	ldr	r3, [pc, #116]	; (25694 <socket+0x204>)
   2561e:	4798      	blx	r3
   25620:	4b1e      	ldr	r3, [pc, #120]	; (2569c <socket+0x20c>)
   25622:	0018      	movs	r0, r3
   25624:	4b1b      	ldr	r3, [pc, #108]	; (25694 <socket+0x204>)
   25626:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   25628:	1d3b      	adds	r3, r7, #4
   2562a:	781b      	ldrb	r3, [r3, #0]
   2562c:	2201      	movs	r2, #1
   2562e:	4013      	ands	r3, r2
   25630:	d015      	beq.n	2565e <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   25632:	230c      	movs	r3, #12
   25634:	18fb      	adds	r3, r7, r3
   25636:	221f      	movs	r2, #31
   25638:	18ba      	adds	r2, r7, r2
   2563a:	7812      	ldrb	r2, [r2, #0]
   2563c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2563e:	69bb      	ldr	r3, [r7, #24]
   25640:	2221      	movs	r2, #33	; 0x21
   25642:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   25644:	230c      	movs	r3, #12
   25646:	18fa      	adds	r2, r7, r3
   25648:	2300      	movs	r3, #0
   2564a:	9302      	str	r3, [sp, #8]
   2564c:	2300      	movs	r3, #0
   2564e:	9301      	str	r3, [sp, #4]
   25650:	2300      	movs	r3, #0
   25652:	9300      	str	r3, [sp, #0]
   25654:	2304      	movs	r3, #4
   25656:	2150      	movs	r1, #80	; 0x50
   25658:	2002      	movs	r0, #2
   2565a:	4c11      	ldr	r4, [pc, #68]	; (256a0 <socket+0x210>)
   2565c:	47a0      	blx	r4
			}
		}
	}
	return sock;
   2565e:	231f      	movs	r3, #31
   25660:	18fb      	adds	r3, r7, r3
   25662:	781b      	ldrb	r3, [r3, #0]
   25664:	b25b      	sxtb	r3, r3
}
   25666:	0018      	movs	r0, r3
   25668:	46bd      	mov	sp, r7
   2566a:	b009      	add	sp, #36	; 0x24
   2566c:	bd90      	pop	{r4, r7, pc}
   2566e:	46c0      	nop			; (mov r8, r8)
   25670:	20003ea1 	.word	0x20003ea1
   25674:	20005690 	.word	0x20005690
   25678:	00032ba5 	.word	0x00032ba5
   2567c:	20005700 	.word	0x20005700
   25680:	20003ea2 	.word	0x20003ea2
   25684:	80000003 	.word	0x80000003
   25688:	00020b01 	.word	0x00020b01
   2568c:	20003e9e 	.word	0x20003e9e
   25690:	00039154 	.word	0x00039154
   25694:	0001e189 	.word	0x0001e189
   25698:	00039178 	.word	0x00039178
   2569c:	00039174 	.word	0x00039174
   256a0:	00020d61 	.word	0x00020d61

000256a4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   256a4:	b5b0      	push	{r4, r5, r7, lr}
   256a6:	b08a      	sub	sp, #40	; 0x28
   256a8:	af04      	add	r7, sp, #16
   256aa:	6039      	str	r1, [r7, #0]
   256ac:	0011      	movs	r1, r2
   256ae:	1dfb      	adds	r3, r7, #7
   256b0:	1c02      	adds	r2, r0, #0
   256b2:	701a      	strb	r2, [r3, #0]
   256b4:	1dbb      	adds	r3, r7, #6
   256b6:	1c0a      	adds	r2, r1, #0
   256b8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   256ba:	2317      	movs	r3, #23
   256bc:	18fb      	adds	r3, r7, r3
   256be:	22fa      	movs	r2, #250	; 0xfa
   256c0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   256c2:	1dfb      	adds	r3, r7, #7
   256c4:	781b      	ldrb	r3, [r3, #0]
   256c6:	2b7f      	cmp	r3, #127	; 0x7f
   256c8:	d867      	bhi.n	2579a <connect+0xf6>
   256ca:	683b      	ldr	r3, [r7, #0]
   256cc:	2b00      	cmp	r3, #0
   256ce:	d064      	beq.n	2579a <connect+0xf6>
   256d0:	1dfb      	adds	r3, r7, #7
   256d2:	781b      	ldrb	r3, [r3, #0]
   256d4:	b25b      	sxtb	r3, r3
   256d6:	4a35      	ldr	r2, [pc, #212]	; (257ac <connect+0x108>)
   256d8:	011b      	lsls	r3, r3, #4
   256da:	18d3      	adds	r3, r2, r3
   256dc:	330a      	adds	r3, #10
   256de:	781b      	ldrb	r3, [r3, #0]
   256e0:	b2db      	uxtb	r3, r3
   256e2:	2b01      	cmp	r3, #1
   256e4:	d159      	bne.n	2579a <connect+0xf6>
   256e6:	1dbb      	adds	r3, r7, #6
   256e8:	781b      	ldrb	r3, [r3, #0]
   256ea:	2b00      	cmp	r3, #0
   256ec:	d055      	beq.n	2579a <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   256ee:	2316      	movs	r3, #22
   256f0:	18fb      	adds	r3, r7, r3
   256f2:	2244      	movs	r2, #68	; 0x44
   256f4:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   256f6:	1dfb      	adds	r3, r7, #7
   256f8:	781b      	ldrb	r3, [r3, #0]
   256fa:	b25b      	sxtb	r3, r3
   256fc:	4a2b      	ldr	r2, [pc, #172]	; (257ac <connect+0x108>)
   256fe:	011b      	lsls	r3, r3, #4
   25700:	18d3      	adds	r3, r2, r3
   25702:	330b      	adds	r3, #11
   25704:	781b      	ldrb	r3, [r3, #0]
   25706:	b2db      	uxtb	r3, r3
   25708:	001a      	movs	r2, r3
   2570a:	2301      	movs	r3, #1
   2570c:	4013      	ands	r3, r2
   2570e:	d00f      	beq.n	25730 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   25710:	2316      	movs	r3, #22
   25712:	18fb      	adds	r3, r7, r3
   25714:	224b      	movs	r2, #75	; 0x4b
   25716:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   25718:	1dfb      	adds	r3, r7, #7
   2571a:	781b      	ldrb	r3, [r3, #0]
   2571c:	b25b      	sxtb	r3, r3
   2571e:	4a23      	ldr	r2, [pc, #140]	; (257ac <connect+0x108>)
   25720:	011b      	lsls	r3, r3, #4
   25722:	18d3      	adds	r3, r2, r3
   25724:	330b      	adds	r3, #11
   25726:	781b      	ldrb	r3, [r3, #0]
   25728:	b2da      	uxtb	r2, r3
   2572a:	2308      	movs	r3, #8
   2572c:	18fb      	adds	r3, r7, r3
   2572e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   25730:	2308      	movs	r3, #8
   25732:	18fb      	adds	r3, r7, r3
   25734:	1dfa      	adds	r2, r7, #7
   25736:	7812      	ldrb	r2, [r2, #0]
   25738:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2573a:	6839      	ldr	r1, [r7, #0]
   2573c:	2308      	movs	r3, #8
   2573e:	18fb      	adds	r3, r7, r3
   25740:	2208      	movs	r2, #8
   25742:	0018      	movs	r0, r3
   25744:	4b1a      	ldr	r3, [pc, #104]	; (257b0 <connect+0x10c>)
   25746:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   25748:	1dfb      	adds	r3, r7, #7
   2574a:	781b      	ldrb	r3, [r3, #0]
   2574c:	b25b      	sxtb	r3, r3
   2574e:	4a17      	ldr	r2, [pc, #92]	; (257ac <connect+0x108>)
   25750:	011b      	lsls	r3, r3, #4
   25752:	18d3      	adds	r3, r2, r3
   25754:	3306      	adds	r3, #6
   25756:	881b      	ldrh	r3, [r3, #0]
   25758:	b29a      	uxth	r2, r3
   2575a:	2308      	movs	r3, #8
   2575c:	18fb      	adds	r3, r7, r3
   2575e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   25760:	2317      	movs	r3, #23
   25762:	18fc      	adds	r4, r7, r3
   25764:	2308      	movs	r3, #8
   25766:	18fa      	adds	r2, r7, r3
   25768:	2316      	movs	r3, #22
   2576a:	18fb      	adds	r3, r7, r3
   2576c:	7819      	ldrb	r1, [r3, #0]
   2576e:	2300      	movs	r3, #0
   25770:	9302      	str	r3, [sp, #8]
   25772:	2300      	movs	r3, #0
   25774:	9301      	str	r3, [sp, #4]
   25776:	2300      	movs	r3, #0
   25778:	9300      	str	r3, [sp, #0]
   2577a:	230c      	movs	r3, #12
   2577c:	2002      	movs	r0, #2
   2577e:	4d0d      	ldr	r5, [pc, #52]	; (257b4 <connect+0x110>)
   25780:	47a8      	blx	r5
   25782:	0003      	movs	r3, r0
   25784:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25786:	2317      	movs	r3, #23
   25788:	18fb      	adds	r3, r7, r3
   2578a:	781b      	ldrb	r3, [r3, #0]
   2578c:	b25b      	sxtb	r3, r3
   2578e:	2b00      	cmp	r3, #0
   25790:	d003      	beq.n	2579a <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   25792:	2317      	movs	r3, #23
   25794:	18fb      	adds	r3, r7, r3
   25796:	22f7      	movs	r2, #247	; 0xf7
   25798:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   2579a:	2317      	movs	r3, #23
   2579c:	18fb      	adds	r3, r7, r3
   2579e:	781b      	ldrb	r3, [r3, #0]
   257a0:	b25b      	sxtb	r3, r3
}
   257a2:	0018      	movs	r0, r3
   257a4:	46bd      	mov	sp, r7
   257a6:	b006      	add	sp, #24
   257a8:	bdb0      	pop	{r4, r5, r7, pc}
   257aa:	46c0      	nop			; (mov r8, r8)
   257ac:	20005690 	.word	0x20005690
   257b0:	00020ac5 	.word	0x00020ac5
   257b4:	00020d61 	.word	0x00020d61

000257b8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   257b8:	b590      	push	{r4, r7, lr}
   257ba:	b08f      	sub	sp, #60	; 0x3c
   257bc:	af04      	add	r7, sp, #16
   257be:	0004      	movs	r4, r0
   257c0:	60b9      	str	r1, [r7, #8]
   257c2:	0010      	movs	r0, r2
   257c4:	0019      	movs	r1, r3
   257c6:	230f      	movs	r3, #15
   257c8:	18fb      	adds	r3, r7, r3
   257ca:	1c22      	adds	r2, r4, #0
   257cc:	701a      	strb	r2, [r3, #0]
   257ce:	230c      	movs	r3, #12
   257d0:	18fb      	adds	r3, r7, r3
   257d2:	1c02      	adds	r2, r0, #0
   257d4:	801a      	strh	r2, [r3, #0]
   257d6:	1dbb      	adds	r3, r7, #6
   257d8:	1c0a      	adds	r2, r1, #0
   257da:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   257dc:	2326      	movs	r3, #38	; 0x26
   257de:	18fb      	adds	r3, r7, r3
   257e0:	2206      	movs	r2, #6
   257e2:	4252      	negs	r2, r2
   257e4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   257e6:	230f      	movs	r3, #15
   257e8:	18fb      	adds	r3, r7, r3
   257ea:	781b      	ldrb	r3, [r3, #0]
   257ec:	2b7f      	cmp	r3, #127	; 0x7f
   257ee:	d900      	bls.n	257f2 <send+0x3a>
   257f0:	e087      	b.n	25902 <send+0x14a>
   257f2:	68bb      	ldr	r3, [r7, #8]
   257f4:	2b00      	cmp	r3, #0
   257f6:	d100      	bne.n	257fa <send+0x42>
   257f8:	e083      	b.n	25902 <send+0x14a>
   257fa:	230c      	movs	r3, #12
   257fc:	18fb      	adds	r3, r7, r3
   257fe:	881a      	ldrh	r2, [r3, #0]
   25800:	23af      	movs	r3, #175	; 0xaf
   25802:	00db      	lsls	r3, r3, #3
   25804:	429a      	cmp	r2, r3
   25806:	d900      	bls.n	2580a <send+0x52>
   25808:	e07b      	b.n	25902 <send+0x14a>
   2580a:	230f      	movs	r3, #15
   2580c:	18fb      	adds	r3, r7, r3
   2580e:	781b      	ldrb	r3, [r3, #0]
   25810:	b25b      	sxtb	r3, r3
   25812:	4a40      	ldr	r2, [pc, #256]	; (25914 <send+0x15c>)
   25814:	011b      	lsls	r3, r3, #4
   25816:	18d3      	adds	r3, r2, r3
   25818:	330a      	adds	r3, #10
   2581a:	781b      	ldrb	r3, [r3, #0]
   2581c:	b2db      	uxtb	r3, r3
   2581e:	2b01      	cmp	r3, #1
   25820:	d16f      	bne.n	25902 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   25822:	2323      	movs	r3, #35	; 0x23
   25824:	18fb      	adds	r3, r7, r3
   25826:	2245      	movs	r2, #69	; 0x45
   25828:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   2582a:	2324      	movs	r3, #36	; 0x24
   2582c:	18fb      	adds	r3, r7, r3
   2582e:	2250      	movs	r2, #80	; 0x50
   25830:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   25832:	2310      	movs	r3, #16
   25834:	18fb      	adds	r3, r7, r3
   25836:	220f      	movs	r2, #15
   25838:	18ba      	adds	r2, r7, r2
   2583a:	7812      	ldrb	r2, [r2, #0]
   2583c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   2583e:	2310      	movs	r3, #16
   25840:	18fb      	adds	r3, r7, r3
   25842:	220c      	movs	r2, #12
   25844:	18ba      	adds	r2, r7, r2
   25846:	8812      	ldrh	r2, [r2, #0]
   25848:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   2584a:	230f      	movs	r3, #15
   2584c:	18fb      	adds	r3, r7, r3
   2584e:	781b      	ldrb	r3, [r3, #0]
   25850:	b25b      	sxtb	r3, r3
   25852:	4a30      	ldr	r2, [pc, #192]	; (25914 <send+0x15c>)
   25854:	011b      	lsls	r3, r3, #4
   25856:	18d3      	adds	r3, r2, r3
   25858:	3306      	adds	r3, #6
   2585a:	881b      	ldrh	r3, [r3, #0]
   2585c:	b29a      	uxth	r2, r3
   2585e:	2310      	movs	r3, #16
   25860:	18fb      	adds	r3, r7, r3
   25862:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   25864:	230f      	movs	r3, #15
   25866:	18fb      	adds	r3, r7, r3
   25868:	781b      	ldrb	r3, [r3, #0]
   2586a:	b25b      	sxtb	r3, r3
   2586c:	2b06      	cmp	r3, #6
   2586e:	dd03      	ble.n	25878 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   25870:	2324      	movs	r3, #36	; 0x24
   25872:	18fb      	adds	r3, r7, r3
   25874:	2244      	movs	r2, #68	; 0x44
   25876:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25878:	230f      	movs	r3, #15
   2587a:	18fb      	adds	r3, r7, r3
   2587c:	781b      	ldrb	r3, [r3, #0]
   2587e:	b25b      	sxtb	r3, r3
   25880:	4a24      	ldr	r2, [pc, #144]	; (25914 <send+0x15c>)
   25882:	011b      	lsls	r3, r3, #4
   25884:	18d3      	adds	r3, r2, r3
   25886:	330b      	adds	r3, #11
   25888:	781b      	ldrb	r3, [r3, #0]
   2588a:	b2db      	uxtb	r3, r3
   2588c:	001a      	movs	r2, r3
   2588e:	2301      	movs	r3, #1
   25890:	4013      	ands	r3, r2
   25892:	d00f      	beq.n	258b4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   25894:	2323      	movs	r3, #35	; 0x23
   25896:	18fb      	adds	r3, r7, r3
   25898:	224c      	movs	r2, #76	; 0x4c
   2589a:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   2589c:	230f      	movs	r3, #15
   2589e:	18fb      	adds	r3, r7, r3
   258a0:	2200      	movs	r2, #0
   258a2:	569a      	ldrsb	r2, [r3, r2]
   258a4:	2324      	movs	r3, #36	; 0x24
   258a6:	18fb      	adds	r3, r7, r3
   258a8:	491a      	ldr	r1, [pc, #104]	; (25914 <send+0x15c>)
   258aa:	0112      	lsls	r2, r2, #4
   258ac:	188a      	adds	r2, r1, r2
   258ae:	3208      	adds	r2, #8
   258b0:	8812      	ldrh	r2, [r2, #0]
   258b2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   258b4:	2323      	movs	r3, #35	; 0x23
   258b6:	18fb      	adds	r3, r7, r3
   258b8:	781b      	ldrb	r3, [r3, #0]
   258ba:	2280      	movs	r2, #128	; 0x80
   258bc:	4252      	negs	r2, r2
   258be:	4313      	orrs	r3, r2
   258c0:	b2d9      	uxtb	r1, r3
   258c2:	2310      	movs	r3, #16
   258c4:	18fa      	adds	r2, r7, r3
   258c6:	2324      	movs	r3, #36	; 0x24
   258c8:	18fb      	adds	r3, r7, r3
   258ca:	881b      	ldrh	r3, [r3, #0]
   258cc:	9302      	str	r3, [sp, #8]
   258ce:	230c      	movs	r3, #12
   258d0:	18fb      	adds	r3, r7, r3
   258d2:	881b      	ldrh	r3, [r3, #0]
   258d4:	9301      	str	r3, [sp, #4]
   258d6:	68bb      	ldr	r3, [r7, #8]
   258d8:	9300      	str	r3, [sp, #0]
   258da:	2310      	movs	r3, #16
   258dc:	2002      	movs	r0, #2
   258de:	4c0e      	ldr	r4, [pc, #56]	; (25918 <send+0x160>)
   258e0:	47a0      	blx	r4
   258e2:	0003      	movs	r3, r0
   258e4:	001a      	movs	r2, r3
   258e6:	2326      	movs	r3, #38	; 0x26
   258e8:	18fb      	adds	r3, r7, r3
   258ea:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   258ec:	2326      	movs	r3, #38	; 0x26
   258ee:	18fb      	adds	r3, r7, r3
   258f0:	2200      	movs	r2, #0
   258f2:	5e9b      	ldrsh	r3, [r3, r2]
   258f4:	2b00      	cmp	r3, #0
   258f6:	d004      	beq.n	25902 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   258f8:	2326      	movs	r3, #38	; 0x26
   258fa:	18fb      	adds	r3, r7, r3
   258fc:	220e      	movs	r2, #14
   258fe:	4252      	negs	r2, r2
   25900:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   25902:	2326      	movs	r3, #38	; 0x26
   25904:	18fb      	adds	r3, r7, r3
   25906:	2200      	movs	r2, #0
   25908:	5e9b      	ldrsh	r3, [r3, r2]
}
   2590a:	0018      	movs	r0, r3
   2590c:	46bd      	mov	sp, r7
   2590e:	b00b      	add	sp, #44	; 0x2c
   25910:	bd90      	pop	{r4, r7, pc}
   25912:	46c0      	nop			; (mov r8, r8)
   25914:	20005690 	.word	0x20005690
   25918:	00020d61 	.word	0x00020d61

0002591c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   2591c:	b590      	push	{r4, r7, lr}
   2591e:	b08d      	sub	sp, #52	; 0x34
   25920:	af04      	add	r7, sp, #16
   25922:	60b9      	str	r1, [r7, #8]
   25924:	0011      	movs	r1, r2
   25926:	607b      	str	r3, [r7, #4]
   25928:	230f      	movs	r3, #15
   2592a:	18fb      	adds	r3, r7, r3
   2592c:	1c02      	adds	r2, r0, #0
   2592e:	701a      	strb	r2, [r3, #0]
   25930:	230c      	movs	r3, #12
   25932:	18fb      	adds	r3, r7, r3
   25934:	1c0a      	adds	r2, r1, #0
   25936:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25938:	231e      	movs	r3, #30
   2593a:	18fb      	adds	r3, r7, r3
   2593c:	2206      	movs	r2, #6
   2593e:	4252      	negs	r2, r2
   25940:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   25942:	230f      	movs	r3, #15
   25944:	18fb      	adds	r3, r7, r3
   25946:	781b      	ldrb	r3, [r3, #0]
   25948:	2b7f      	cmp	r3, #127	; 0x7f
   2594a:	d900      	bls.n	2594e <recv+0x32>
   2594c:	e099      	b.n	25a82 <recv+0x166>
   2594e:	68bb      	ldr	r3, [r7, #8]
   25950:	2b00      	cmp	r3, #0
   25952:	d100      	bne.n	25956 <recv+0x3a>
   25954:	e095      	b.n	25a82 <recv+0x166>
   25956:	230c      	movs	r3, #12
   25958:	18fb      	adds	r3, r7, r3
   2595a:	881b      	ldrh	r3, [r3, #0]
   2595c:	2b00      	cmp	r3, #0
   2595e:	d100      	bne.n	25962 <recv+0x46>
   25960:	e08f      	b.n	25a82 <recv+0x166>
   25962:	230f      	movs	r3, #15
   25964:	18fb      	adds	r3, r7, r3
   25966:	781b      	ldrb	r3, [r3, #0]
   25968:	b25b      	sxtb	r3, r3
   2596a:	4a4a      	ldr	r2, [pc, #296]	; (25a94 <recv+0x178>)
   2596c:	011b      	lsls	r3, r3, #4
   2596e:	18d3      	adds	r3, r2, r3
   25970:	330a      	adds	r3, #10
   25972:	781b      	ldrb	r3, [r3, #0]
   25974:	b2db      	uxtb	r3, r3
   25976:	2b01      	cmp	r3, #1
   25978:	d000      	beq.n	2597c <recv+0x60>
   2597a:	e082      	b.n	25a82 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   2597c:	231e      	movs	r3, #30
   2597e:	18fb      	adds	r3, r7, r3
   25980:	2200      	movs	r2, #0
   25982:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   25984:	230f      	movs	r3, #15
   25986:	18fb      	adds	r3, r7, r3
   25988:	2200      	movs	r2, #0
   2598a:	569a      	ldrsb	r2, [r3, r2]
   2598c:	4b41      	ldr	r3, [pc, #260]	; (25a94 <recv+0x178>)
   2598e:	0112      	lsls	r2, r2, #4
   25990:	68b9      	ldr	r1, [r7, #8]
   25992:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   25994:	230f      	movs	r3, #15
   25996:	18fb      	adds	r3, r7, r3
   25998:	781b      	ldrb	r3, [r3, #0]
   2599a:	b25b      	sxtb	r3, r3
   2599c:	4a3d      	ldr	r2, [pc, #244]	; (25a94 <recv+0x178>)
   2599e:	011b      	lsls	r3, r3, #4
   259a0:	18d3      	adds	r3, r2, r3
   259a2:	3304      	adds	r3, #4
   259a4:	220c      	movs	r2, #12
   259a6:	18ba      	adds	r2, r7, r2
   259a8:	8812      	ldrh	r2, [r2, #0]
   259aa:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   259ac:	230f      	movs	r3, #15
   259ae:	18fb      	adds	r3, r7, r3
   259b0:	781b      	ldrb	r3, [r3, #0]
   259b2:	b25b      	sxtb	r3, r3
   259b4:	4a37      	ldr	r2, [pc, #220]	; (25a94 <recv+0x178>)
   259b6:	011b      	lsls	r3, r3, #4
   259b8:	18d3      	adds	r3, r2, r3
   259ba:	330c      	adds	r3, #12
   259bc:	781b      	ldrb	r3, [r3, #0]
   259be:	b2db      	uxtb	r3, r3
   259c0:	2b00      	cmp	r3, #0
   259c2:	d15e      	bne.n	25a82 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   259c4:	231d      	movs	r3, #29
   259c6:	18fb      	adds	r3, r7, r3
   259c8:	2246      	movs	r2, #70	; 0x46
   259ca:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   259cc:	230f      	movs	r3, #15
   259ce:	18fb      	adds	r3, r7, r3
   259d0:	781b      	ldrb	r3, [r3, #0]
   259d2:	b25b      	sxtb	r3, r3
   259d4:	4a2f      	ldr	r2, [pc, #188]	; (25a94 <recv+0x178>)
   259d6:	011b      	lsls	r3, r3, #4
   259d8:	18d3      	adds	r3, r2, r3
   259da:	330c      	adds	r3, #12
   259dc:	2201      	movs	r2, #1
   259de:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   259e0:	230f      	movs	r3, #15
   259e2:	18fb      	adds	r3, r7, r3
   259e4:	781b      	ldrb	r3, [r3, #0]
   259e6:	b25b      	sxtb	r3, r3
   259e8:	4a2a      	ldr	r2, [pc, #168]	; (25a94 <recv+0x178>)
   259ea:	011b      	lsls	r3, r3, #4
   259ec:	18d3      	adds	r3, r2, r3
   259ee:	330b      	adds	r3, #11
   259f0:	781b      	ldrb	r3, [r3, #0]
   259f2:	b2db      	uxtb	r3, r3
   259f4:	001a      	movs	r2, r3
   259f6:	2301      	movs	r3, #1
   259f8:	4013      	ands	r3, r2
   259fa:	d003      	beq.n	25a04 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   259fc:	231d      	movs	r3, #29
   259fe:	18fb      	adds	r3, r7, r3
   25a00:	224d      	movs	r2, #77	; 0x4d
   25a02:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   25a04:	687b      	ldr	r3, [r7, #4]
   25a06:	2b00      	cmp	r3, #0
   25a08:	d105      	bne.n	25a16 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   25a0a:	2314      	movs	r3, #20
   25a0c:	18fb      	adds	r3, r7, r3
   25a0e:	2201      	movs	r2, #1
   25a10:	4252      	negs	r2, r2
   25a12:	601a      	str	r2, [r3, #0]
   25a14:	e003      	b.n	25a1e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   25a16:	2314      	movs	r3, #20
   25a18:	18fb      	adds	r3, r7, r3
   25a1a:	687a      	ldr	r2, [r7, #4]
   25a1c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   25a1e:	2314      	movs	r3, #20
   25a20:	18fb      	adds	r3, r7, r3
   25a22:	220f      	movs	r2, #15
   25a24:	18ba      	adds	r2, r7, r2
   25a26:	7812      	ldrb	r2, [r2, #0]
   25a28:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   25a2a:	230f      	movs	r3, #15
   25a2c:	18fb      	adds	r3, r7, r3
   25a2e:	781b      	ldrb	r3, [r3, #0]
   25a30:	b25b      	sxtb	r3, r3
   25a32:	4a18      	ldr	r2, [pc, #96]	; (25a94 <recv+0x178>)
   25a34:	011b      	lsls	r3, r3, #4
   25a36:	18d3      	adds	r3, r2, r3
   25a38:	3306      	adds	r3, #6
   25a3a:	881b      	ldrh	r3, [r3, #0]
   25a3c:	b29a      	uxth	r2, r3
   25a3e:	2314      	movs	r3, #20
   25a40:	18fb      	adds	r3, r7, r3
   25a42:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   25a44:	2314      	movs	r3, #20
   25a46:	18fa      	adds	r2, r7, r3
   25a48:	231d      	movs	r3, #29
   25a4a:	18fb      	adds	r3, r7, r3
   25a4c:	7819      	ldrb	r1, [r3, #0]
   25a4e:	2300      	movs	r3, #0
   25a50:	9302      	str	r3, [sp, #8]
   25a52:	2300      	movs	r3, #0
   25a54:	9301      	str	r3, [sp, #4]
   25a56:	2300      	movs	r3, #0
   25a58:	9300      	str	r3, [sp, #0]
   25a5a:	2308      	movs	r3, #8
   25a5c:	2002      	movs	r0, #2
   25a5e:	4c0e      	ldr	r4, [pc, #56]	; (25a98 <recv+0x17c>)
   25a60:	47a0      	blx	r4
   25a62:	0003      	movs	r3, r0
   25a64:	001a      	movs	r2, r3
   25a66:	231e      	movs	r3, #30
   25a68:	18fb      	adds	r3, r7, r3
   25a6a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   25a6c:	231e      	movs	r3, #30
   25a6e:	18fb      	adds	r3, r7, r3
   25a70:	2200      	movs	r2, #0
   25a72:	5e9b      	ldrsh	r3, [r3, r2]
   25a74:	2b00      	cmp	r3, #0
   25a76:	d004      	beq.n	25a82 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   25a78:	231e      	movs	r3, #30
   25a7a:	18fb      	adds	r3, r7, r3
   25a7c:	220e      	movs	r2, #14
   25a7e:	4252      	negs	r2, r2
   25a80:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   25a82:	231e      	movs	r3, #30
   25a84:	18fb      	adds	r3, r7, r3
   25a86:	2200      	movs	r2, #0
   25a88:	5e9b      	ldrsh	r3, [r3, r2]
}
   25a8a:	0018      	movs	r0, r3
   25a8c:	46bd      	mov	sp, r7
   25a8e:	b009      	add	sp, #36	; 0x24
   25a90:	bd90      	pop	{r4, r7, pc}
   25a92:	46c0      	nop			; (mov r8, r8)
   25a94:	20005690 	.word	0x20005690
   25a98:	00020d61 	.word	0x00020d61

00025a9c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   25a9c:	b5b0      	push	{r4, r5, r7, lr}
   25a9e:	b088      	sub	sp, #32
   25aa0:	af04      	add	r7, sp, #16
   25aa2:	0002      	movs	r2, r0
   25aa4:	1dfb      	adds	r3, r7, #7
   25aa6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25aa8:	230f      	movs	r3, #15
   25aaa:	18fb      	adds	r3, r7, r3
   25aac:	22fa      	movs	r2, #250	; 0xfa
   25aae:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   25ab0:	4b43      	ldr	r3, [pc, #268]	; (25bc0 <close+0x124>)
   25ab2:	0018      	movs	r0, r3
   25ab4:	4b43      	ldr	r3, [pc, #268]	; (25bc4 <close+0x128>)
   25ab6:	4798      	blx	r3
   25ab8:	1dfb      	adds	r3, r7, #7
   25aba:	2200      	movs	r2, #0
   25abc:	569a      	ldrsb	r2, [r3, r2]
   25abe:	4b42      	ldr	r3, [pc, #264]	; (25bc8 <close+0x12c>)
   25ac0:	0011      	movs	r1, r2
   25ac2:	0018      	movs	r0, r3
   25ac4:	4b3f      	ldr	r3, [pc, #252]	; (25bc4 <close+0x128>)
   25ac6:	4798      	blx	r3
   25ac8:	4b40      	ldr	r3, [pc, #256]	; (25bcc <close+0x130>)
   25aca:	0018      	movs	r0, r3
   25acc:	4b3d      	ldr	r3, [pc, #244]	; (25bc4 <close+0x128>)
   25ace:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   25ad0:	1dfb      	adds	r3, r7, #7
   25ad2:	781b      	ldrb	r3, [r3, #0]
   25ad4:	2b7f      	cmp	r3, #127	; 0x7f
   25ad6:	d86a      	bhi.n	25bae <close+0x112>
   25ad8:	1dfb      	adds	r3, r7, #7
   25ada:	781b      	ldrb	r3, [r3, #0]
   25adc:	b25b      	sxtb	r3, r3
   25ade:	4a3c      	ldr	r2, [pc, #240]	; (25bd0 <close+0x134>)
   25ae0:	011b      	lsls	r3, r3, #4
   25ae2:	18d3      	adds	r3, r2, r3
   25ae4:	330a      	adds	r3, #10
   25ae6:	781b      	ldrb	r3, [r3, #0]
   25ae8:	b2db      	uxtb	r3, r3
   25aea:	2b01      	cmp	r3, #1
   25aec:	d15f      	bne.n	25bae <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   25aee:	230e      	movs	r3, #14
   25af0:	18fb      	adds	r3, r7, r3
   25af2:	2249      	movs	r2, #73	; 0x49
   25af4:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   25af6:	2308      	movs	r3, #8
   25af8:	18fb      	adds	r3, r7, r3
   25afa:	1dfa      	adds	r2, r7, #7
   25afc:	7812      	ldrb	r2, [r2, #0]
   25afe:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   25b00:	1dfb      	adds	r3, r7, #7
   25b02:	781b      	ldrb	r3, [r3, #0]
   25b04:	b25b      	sxtb	r3, r3
   25b06:	4a32      	ldr	r2, [pc, #200]	; (25bd0 <close+0x134>)
   25b08:	011b      	lsls	r3, r3, #4
   25b0a:	18d3      	adds	r3, r2, r3
   25b0c:	3306      	adds	r3, #6
   25b0e:	881b      	ldrh	r3, [r3, #0]
   25b10:	b29a      	uxth	r2, r3
   25b12:	2308      	movs	r3, #8
   25b14:	18fb      	adds	r3, r7, r3
   25b16:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   25b18:	1dfb      	adds	r3, r7, #7
   25b1a:	781b      	ldrb	r3, [r3, #0]
   25b1c:	b25b      	sxtb	r3, r3
   25b1e:	4a2c      	ldr	r2, [pc, #176]	; (25bd0 <close+0x134>)
   25b20:	011b      	lsls	r3, r3, #4
   25b22:	18d3      	adds	r3, r2, r3
   25b24:	330a      	adds	r3, #10
   25b26:	2200      	movs	r2, #0
   25b28:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   25b2a:	1dfb      	adds	r3, r7, #7
   25b2c:	781b      	ldrb	r3, [r3, #0]
   25b2e:	b25b      	sxtb	r3, r3
   25b30:	4a27      	ldr	r2, [pc, #156]	; (25bd0 <close+0x134>)
   25b32:	011b      	lsls	r3, r3, #4
   25b34:	18d3      	adds	r3, r2, r3
   25b36:	3306      	adds	r3, #6
   25b38:	2200      	movs	r2, #0
   25b3a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25b3c:	1dfb      	adds	r3, r7, #7
   25b3e:	781b      	ldrb	r3, [r3, #0]
   25b40:	b25b      	sxtb	r3, r3
   25b42:	4a23      	ldr	r2, [pc, #140]	; (25bd0 <close+0x134>)
   25b44:	011b      	lsls	r3, r3, #4
   25b46:	18d3      	adds	r3, r2, r3
   25b48:	330b      	adds	r3, #11
   25b4a:	781b      	ldrb	r3, [r3, #0]
   25b4c:	b2db      	uxtb	r3, r3
   25b4e:	001a      	movs	r2, r3
   25b50:	2301      	movs	r3, #1
   25b52:	4013      	ands	r3, r2
   25b54:	d003      	beq.n	25b5e <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   25b56:	230e      	movs	r3, #14
   25b58:	18fb      	adds	r3, r7, r3
   25b5a:	224e      	movs	r2, #78	; 0x4e
   25b5c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   25b5e:	230f      	movs	r3, #15
   25b60:	18fc      	adds	r4, r7, r3
   25b62:	2308      	movs	r3, #8
   25b64:	18fa      	adds	r2, r7, r3
   25b66:	230e      	movs	r3, #14
   25b68:	18fb      	adds	r3, r7, r3
   25b6a:	7819      	ldrb	r1, [r3, #0]
   25b6c:	2300      	movs	r3, #0
   25b6e:	9302      	str	r3, [sp, #8]
   25b70:	2300      	movs	r3, #0
   25b72:	9301      	str	r3, [sp, #4]
   25b74:	2300      	movs	r3, #0
   25b76:	9300      	str	r3, [sp, #0]
   25b78:	2304      	movs	r3, #4
   25b7a:	2002      	movs	r0, #2
   25b7c:	4d15      	ldr	r5, [pc, #84]	; (25bd4 <close+0x138>)
   25b7e:	47a8      	blx	r5
   25b80:	0003      	movs	r3, r0
   25b82:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25b84:	230f      	movs	r3, #15
   25b86:	18fb      	adds	r3, r7, r3
   25b88:	781b      	ldrb	r3, [r3, #0]
   25b8a:	b25b      	sxtb	r3, r3
   25b8c:	2b00      	cmp	r3, #0
   25b8e:	d003      	beq.n	25b98 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   25b90:	230f      	movs	r3, #15
   25b92:	18fb      	adds	r3, r7, r3
   25b94:	22f7      	movs	r2, #247	; 0xf7
   25b96:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   25b98:	1dfb      	adds	r3, r7, #7
   25b9a:	781b      	ldrb	r3, [r3, #0]
   25b9c:	b25b      	sxtb	r3, r3
   25b9e:	011a      	lsls	r2, r3, #4
   25ba0:	4b0b      	ldr	r3, [pc, #44]	; (25bd0 <close+0x134>)
   25ba2:	18d3      	adds	r3, r2, r3
   25ba4:	2210      	movs	r2, #16
   25ba6:	2100      	movs	r1, #0
   25ba8:	0018      	movs	r0, r3
   25baa:	4b0b      	ldr	r3, [pc, #44]	; (25bd8 <close+0x13c>)
   25bac:	4798      	blx	r3
	}
	return s8Ret;
   25bae:	230f      	movs	r3, #15
   25bb0:	18fb      	adds	r3, r7, r3
   25bb2:	781b      	ldrb	r3, [r3, #0]
   25bb4:	b25b      	sxtb	r3, r3
}
   25bb6:	0018      	movs	r0, r3
   25bb8:	46bd      	mov	sp, r7
   25bba:	b004      	add	sp, #16
   25bbc:	bdb0      	pop	{r4, r5, r7, pc}
   25bbe:	46c0      	nop			; (mov r8, r8)
   25bc0:	00039154 	.word	0x00039154
   25bc4:	0001e189 	.word	0x0001e189
   25bc8:	00039194 	.word	0x00039194
   25bcc:	00039174 	.word	0x00039174
   25bd0:	20005690 	.word	0x20005690
   25bd4:	00020d61 	.word	0x00020d61
   25bd8:	00020b01 	.word	0x00020b01

00025bdc <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   25bdc:	b580      	push	{r7, lr}
   25bde:	b086      	sub	sp, #24
   25be0:	af00      	add	r7, sp, #0
   25be2:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   25be4:	2300      	movs	r3, #0
   25be6:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   25be8:	2317      	movs	r3, #23
   25bea:	18fb      	adds	r3, r7, r3
   25bec:	2200      	movs	r2, #0
   25bee:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   25bf0:	2316      	movs	r3, #22
   25bf2:	18fb      	adds	r3, r7, r3
   25bf4:	2200      	movs	r2, #0
   25bf6:	701a      	strb	r2, [r3, #0]
   25bf8:	e060      	b.n	25cbc <nmi_inet_addr+0xe0>
	{
		j = 0;
   25bfa:	2315      	movs	r3, #21
   25bfc:	18fb      	adds	r3, r7, r3
   25bfe:	2200      	movs	r2, #0
   25c00:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   25c02:	2314      	movs	r3, #20
   25c04:	18fb      	adds	r3, r7, r3
   25c06:	687a      	ldr	r2, [r7, #4]
   25c08:	7812      	ldrb	r2, [r2, #0]
   25c0a:	701a      	strb	r2, [r3, #0]
			++j;
   25c0c:	2315      	movs	r3, #21
   25c0e:	18fb      	adds	r3, r7, r3
   25c10:	2215      	movs	r2, #21
   25c12:	18ba      	adds	r2, r7, r2
   25c14:	7812      	ldrb	r2, [r2, #0]
   25c16:	3201      	adds	r2, #1
   25c18:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   25c1a:	2315      	movs	r3, #21
   25c1c:	18fb      	adds	r3, r7, r3
   25c1e:	781b      	ldrb	r3, [r3, #0]
   25c20:	2b04      	cmp	r3, #4
   25c22:	d901      	bls.n	25c28 <nmi_inet_addr+0x4c>
			{
				return 0;
   25c24:	2300      	movs	r3, #0
   25c26:	e057      	b.n	25cd8 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   25c28:	2314      	movs	r3, #20
   25c2a:	18fb      	adds	r3, r7, r3
   25c2c:	781b      	ldrb	r3, [r3, #0]
   25c2e:	2b2e      	cmp	r3, #46	; 0x2e
   25c30:	d004      	beq.n	25c3c <nmi_inet_addr+0x60>
   25c32:	2314      	movs	r3, #20
   25c34:	18fb      	adds	r3, r7, r3
   25c36:	781b      	ldrb	r3, [r3, #0]
   25c38:	2b00      	cmp	r3, #0
   25c3a:	d10d      	bne.n	25c58 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   25c3c:	2316      	movs	r3, #22
   25c3e:	18fb      	adds	r3, r7, r3
   25c40:	781b      	ldrb	r3, [r3, #0]
   25c42:	220c      	movs	r2, #12
   25c44:	18ba      	adds	r2, r7, r2
   25c46:	2117      	movs	r1, #23
   25c48:	1879      	adds	r1, r7, r1
   25c4a:	7809      	ldrb	r1, [r1, #0]
   25c4c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   25c4e:	2317      	movs	r3, #23
   25c50:	18fb      	adds	r3, r7, r3
   25c52:	2200      	movs	r2, #0
   25c54:	701a      	strb	r2, [r3, #0]
   25c56:	e01d      	b.n	25c94 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   25c58:	2314      	movs	r3, #20
   25c5a:	18fb      	adds	r3, r7, r3
   25c5c:	781b      	ldrb	r3, [r3, #0]
   25c5e:	2b2f      	cmp	r3, #47	; 0x2f
   25c60:	d916      	bls.n	25c90 <nmi_inet_addr+0xb4>
   25c62:	2314      	movs	r3, #20
   25c64:	18fb      	adds	r3, r7, r3
   25c66:	781b      	ldrb	r3, [r3, #0]
   25c68:	2b39      	cmp	r3, #57	; 0x39
   25c6a:	d811      	bhi.n	25c90 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   25c6c:	2317      	movs	r3, #23
   25c6e:	18fb      	adds	r3, r7, r3
   25c70:	781b      	ldrb	r3, [r3, #0]
   25c72:	1c1a      	adds	r2, r3, #0
   25c74:	0092      	lsls	r2, r2, #2
   25c76:	18d3      	adds	r3, r2, r3
   25c78:	18db      	adds	r3, r3, r3
   25c7a:	b2da      	uxtb	r2, r3
   25c7c:	2314      	movs	r3, #20
   25c7e:	18fb      	adds	r3, r7, r3
   25c80:	781b      	ldrb	r3, [r3, #0]
   25c82:	18d3      	adds	r3, r2, r3
   25c84:	b2da      	uxtb	r2, r3
   25c86:	2317      	movs	r3, #23
   25c88:	18fb      	adds	r3, r7, r3
   25c8a:	3a30      	subs	r2, #48	; 0x30
   25c8c:	701a      	strb	r2, [r3, #0]
   25c8e:	e001      	b.n	25c94 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   25c90:	2300      	movs	r3, #0
   25c92:	e021      	b.n	25cd8 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   25c94:	687b      	ldr	r3, [r7, #4]
   25c96:	3301      	adds	r3, #1
   25c98:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   25c9a:	2314      	movs	r3, #20
   25c9c:	18fb      	adds	r3, r7, r3
   25c9e:	781b      	ldrb	r3, [r3, #0]
   25ca0:	2b2e      	cmp	r3, #46	; 0x2e
   25ca2:	d004      	beq.n	25cae <nmi_inet_addr+0xd2>
   25ca4:	2314      	movs	r3, #20
   25ca6:	18fb      	adds	r3, r7, r3
   25ca8:	781b      	ldrb	r3, [r3, #0]
   25caa:	2b00      	cmp	r3, #0
   25cac:	d1a9      	bne.n	25c02 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   25cae:	2316      	movs	r3, #22
   25cb0:	18fb      	adds	r3, r7, r3
   25cb2:	2216      	movs	r2, #22
   25cb4:	18ba      	adds	r2, r7, r2
   25cb6:	7812      	ldrb	r2, [r2, #0]
   25cb8:	3201      	adds	r2, #1
   25cba:	701a      	strb	r2, [r3, #0]
   25cbc:	2316      	movs	r3, #22
   25cbe:	18fb      	adds	r3, r7, r3
   25cc0:	781b      	ldrb	r3, [r3, #0]
   25cc2:	2b03      	cmp	r3, #3
   25cc4:	d999      	bls.n	25bfa <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   25cc6:	230c      	movs	r3, #12
   25cc8:	18f9      	adds	r1, r7, r3
   25cca:	2310      	movs	r3, #16
   25ccc:	18fb      	adds	r3, r7, r3
   25cce:	2204      	movs	r2, #4
   25cd0:	0018      	movs	r0, r3
   25cd2:	4b03      	ldr	r3, [pc, #12]	; (25ce0 <nmi_inet_addr+0x104>)
   25cd4:	4798      	blx	r3
	return u32IP;
   25cd6:	693b      	ldr	r3, [r7, #16]
}
   25cd8:	0018      	movs	r0, r3
   25cda:	46bd      	mov	sp, r7
   25cdc:	b006      	add	sp, #24
   25cde:	bd80      	pop	{r7, pc}
   25ce0:	00020ac5 	.word	0x00020ac5

00025ce4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   25ce4:	b5b0      	push	{r4, r5, r7, lr}
   25ce6:	b088      	sub	sp, #32
   25ce8:	af04      	add	r7, sp, #16
   25cea:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   25cec:	230f      	movs	r3, #15
   25cee:	18fb      	adds	r3, r7, r3
   25cf0:	22fa      	movs	r2, #250	; 0xfa
   25cf2:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   25cf4:	687b      	ldr	r3, [r7, #4]
   25cf6:	0018      	movs	r0, r3
   25cf8:	4b14      	ldr	r3, [pc, #80]	; (25d4c <gethostbyname+0x68>)
   25cfa:	4798      	blx	r3
   25cfc:	0003      	movs	r3, r0
   25cfe:	001a      	movs	r2, r3
   25d00:	230e      	movs	r3, #14
   25d02:	18fb      	adds	r3, r7, r3
   25d04:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   25d06:	230e      	movs	r3, #14
   25d08:	18fb      	adds	r3, r7, r3
   25d0a:	781b      	ldrb	r3, [r3, #0]
   25d0c:	2b40      	cmp	r3, #64	; 0x40
   25d0e:	d815      	bhi.n	25d3c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   25d10:	230e      	movs	r3, #14
   25d12:	18fb      	adds	r3, r7, r3
   25d14:	781b      	ldrb	r3, [r3, #0]
   25d16:	b29b      	uxth	r3, r3
   25d18:	3301      	adds	r3, #1
   25d1a:	b299      	uxth	r1, r3
   25d1c:	230f      	movs	r3, #15
   25d1e:	18fc      	adds	r4, r7, r3
   25d20:	687a      	ldr	r2, [r7, #4]
   25d22:	2300      	movs	r3, #0
   25d24:	9302      	str	r3, [sp, #8]
   25d26:	2300      	movs	r3, #0
   25d28:	9301      	str	r3, [sp, #4]
   25d2a:	2300      	movs	r3, #0
   25d2c:	9300      	str	r3, [sp, #0]
   25d2e:	000b      	movs	r3, r1
   25d30:	214a      	movs	r1, #74	; 0x4a
   25d32:	2002      	movs	r0, #2
   25d34:	4d06      	ldr	r5, [pc, #24]	; (25d50 <gethostbyname+0x6c>)
   25d36:	47a8      	blx	r5
   25d38:	0003      	movs	r3, r0
   25d3a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   25d3c:	230f      	movs	r3, #15
   25d3e:	18fb      	adds	r3, r7, r3
   25d40:	781b      	ldrb	r3, [r3, #0]
   25d42:	b25b      	sxtb	r3, r3
}
   25d44:	0018      	movs	r0, r3
   25d46:	46bd      	mov	sp, r7
   25d48:	b004      	add	sp, #16
   25d4a:	bdb0      	pop	{r4, r5, r7, pc}
   25d4c:	00020b3f 	.word	0x00020b3f
   25d50:	00020d61 	.word	0x00020d61

00025d54 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   25d54:	b580      	push	{r7, lr}
   25d56:	b082      	sub	sp, #8
   25d58:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   25d5a:	003b      	movs	r3, r7
   25d5c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   25d5e:	687b      	ldr	r3, [r7, #4]
   25d60:	22b9      	movs	r2, #185	; 0xb9
   25d62:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25d64:	4b13      	ldr	r3, [pc, #76]	; (25db4 <spi_flash_enter_low_power_mode+0x60>)
   25d66:	2100      	movs	r1, #0
   25d68:	0018      	movs	r0, r3
   25d6a:	4b13      	ldr	r3, [pc, #76]	; (25db8 <spi_flash_enter_low_power_mode+0x64>)
   25d6c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   25d6e:	687b      	ldr	r3, [r7, #4]
   25d70:	781b      	ldrb	r3, [r3, #0]
   25d72:	001a      	movs	r2, r3
   25d74:	4b11      	ldr	r3, [pc, #68]	; (25dbc <spi_flash_enter_low_power_mode+0x68>)
   25d76:	0011      	movs	r1, r2
   25d78:	0018      	movs	r0, r3
   25d7a:	4b0f      	ldr	r3, [pc, #60]	; (25db8 <spi_flash_enter_low_power_mode+0x64>)
   25d7c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   25d7e:	4b10      	ldr	r3, [pc, #64]	; (25dc0 <spi_flash_enter_low_power_mode+0x6c>)
   25d80:	2101      	movs	r1, #1
   25d82:	0018      	movs	r0, r3
   25d84:	4b0c      	ldr	r3, [pc, #48]	; (25db8 <spi_flash_enter_low_power_mode+0x64>)
   25d86:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25d88:	4b0e      	ldr	r3, [pc, #56]	; (25dc4 <spi_flash_enter_low_power_mode+0x70>)
   25d8a:	2100      	movs	r1, #0
   25d8c:	0018      	movs	r0, r3
   25d8e:	4b0a      	ldr	r3, [pc, #40]	; (25db8 <spi_flash_enter_low_power_mode+0x64>)
   25d90:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   25d92:	4b0d      	ldr	r3, [pc, #52]	; (25dc8 <spi_flash_enter_low_power_mode+0x74>)
   25d94:	2181      	movs	r1, #129	; 0x81
   25d96:	0018      	movs	r0, r3
   25d98:	4b07      	ldr	r3, [pc, #28]	; (25db8 <spi_flash_enter_low_power_mode+0x64>)
   25d9a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   25d9c:	46c0      	nop			; (mov r8, r8)
   25d9e:	4b0b      	ldr	r3, [pc, #44]	; (25dcc <spi_flash_enter_low_power_mode+0x78>)
   25da0:	0018      	movs	r0, r3
   25da2:	4b0b      	ldr	r3, [pc, #44]	; (25dd0 <spi_flash_enter_low_power_mode+0x7c>)
   25da4:	4798      	blx	r3
   25da6:	0003      	movs	r3, r0
   25da8:	2b01      	cmp	r3, #1
   25daa:	d1f8      	bne.n	25d9e <spi_flash_enter_low_power_mode+0x4a>
}
   25dac:	46c0      	nop			; (mov r8, r8)
   25dae:	46bd      	mov	sp, r7
   25db0:	b002      	add	sp, #8
   25db2:	bd80      	pop	{r7, pc}
   25db4:	00010208 	.word	0x00010208
   25db8:	00022bb5 	.word	0x00022bb5
   25dbc:	0001020c 	.word	0x0001020c
   25dc0:	00010214 	.word	0x00010214
   25dc4:	0001021c 	.word	0x0001021c
   25dc8:	00010204 	.word	0x00010204
   25dcc:	00010218 	.word	0x00010218
   25dd0:	00022b71 	.word	0x00022b71

00025dd4 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   25dd4:	b580      	push	{r7, lr}
   25dd6:	b082      	sub	sp, #8
   25dd8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   25dda:	003b      	movs	r3, r7
   25ddc:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   25dde:	687b      	ldr	r3, [r7, #4]
   25de0:	22ab      	movs	r2, #171	; 0xab
   25de2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25de4:	4b13      	ldr	r3, [pc, #76]	; (25e34 <spi_flash_leave_low_power_mode+0x60>)
   25de6:	2100      	movs	r1, #0
   25de8:	0018      	movs	r0, r3
   25dea:	4b13      	ldr	r3, [pc, #76]	; (25e38 <spi_flash_leave_low_power_mode+0x64>)
   25dec:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   25dee:	687b      	ldr	r3, [r7, #4]
   25df0:	781b      	ldrb	r3, [r3, #0]
   25df2:	001a      	movs	r2, r3
   25df4:	4b11      	ldr	r3, [pc, #68]	; (25e3c <spi_flash_leave_low_power_mode+0x68>)
   25df6:	0011      	movs	r1, r2
   25df8:	0018      	movs	r0, r3
   25dfa:	4b0f      	ldr	r3, [pc, #60]	; (25e38 <spi_flash_leave_low_power_mode+0x64>)
   25dfc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   25dfe:	4b10      	ldr	r3, [pc, #64]	; (25e40 <spi_flash_leave_low_power_mode+0x6c>)
   25e00:	2101      	movs	r1, #1
   25e02:	0018      	movs	r0, r3
   25e04:	4b0c      	ldr	r3, [pc, #48]	; (25e38 <spi_flash_leave_low_power_mode+0x64>)
   25e06:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25e08:	4b0e      	ldr	r3, [pc, #56]	; (25e44 <spi_flash_leave_low_power_mode+0x70>)
   25e0a:	2100      	movs	r1, #0
   25e0c:	0018      	movs	r0, r3
   25e0e:	4b0a      	ldr	r3, [pc, #40]	; (25e38 <spi_flash_leave_low_power_mode+0x64>)
   25e10:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   25e12:	4b0d      	ldr	r3, [pc, #52]	; (25e48 <spi_flash_leave_low_power_mode+0x74>)
   25e14:	2181      	movs	r1, #129	; 0x81
   25e16:	0018      	movs	r0, r3
   25e18:	4b07      	ldr	r3, [pc, #28]	; (25e38 <spi_flash_leave_low_power_mode+0x64>)
   25e1a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   25e1c:	46c0      	nop			; (mov r8, r8)
   25e1e:	4b0b      	ldr	r3, [pc, #44]	; (25e4c <spi_flash_leave_low_power_mode+0x78>)
   25e20:	0018      	movs	r0, r3
   25e22:	4b0b      	ldr	r3, [pc, #44]	; (25e50 <spi_flash_leave_low_power_mode+0x7c>)
   25e24:	4798      	blx	r3
   25e26:	0003      	movs	r3, r0
   25e28:	2b01      	cmp	r3, #1
   25e2a:	d1f8      	bne.n	25e1e <spi_flash_leave_low_power_mode+0x4a>
}
   25e2c:	46c0      	nop			; (mov r8, r8)
   25e2e:	46bd      	mov	sp, r7
   25e30:	b002      	add	sp, #8
   25e32:	bd80      	pop	{r7, pc}
   25e34:	00010208 	.word	0x00010208
   25e38:	00022bb5 	.word	0x00022bb5
   25e3c:	0001020c 	.word	0x0001020c
   25e40:	00010214 	.word	0x00010214
   25e44:	0001021c 	.word	0x0001021c
   25e48:	00010204 	.word	0x00010204
   25e4c:	00010218 	.word	0x00010218
   25e50:	00022b71 	.word	0x00022b71

00025e54 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   25e54:	b590      	push	{r4, r7, lr}
   25e56:	b085      	sub	sp, #20
   25e58:	af00      	add	r7, sp, #0
   25e5a:	0002      	movs	r2, r0
   25e5c:	1dfb      	adds	r3, r7, #7
   25e5e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   25e60:	230f      	movs	r3, #15
   25e62:	18fb      	adds	r3, r7, r3
   25e64:	2200      	movs	r2, #0
   25e66:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   25e68:	4b24      	ldr	r3, [pc, #144]	; (25efc <spi_flash_enable+0xa8>)
   25e6a:	4798      	blx	r3
   25e6c:	0003      	movs	r3, r0
   25e6e:	051b      	lsls	r3, r3, #20
   25e70:	0d1b      	lsrs	r3, r3, #20
   25e72:	4a23      	ldr	r2, [pc, #140]	; (25f00 <spi_flash_enable+0xac>)
   25e74:	4293      	cmp	r3, r2
   25e76:	d938      	bls.n	25eea <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   25e78:	230f      	movs	r3, #15
   25e7a:	18fc      	adds	r4, r7, r3
   25e7c:	2308      	movs	r3, #8
   25e7e:	18fb      	adds	r3, r7, r3
   25e80:	4a20      	ldr	r2, [pc, #128]	; (25f04 <spi_flash_enable+0xb0>)
   25e82:	0019      	movs	r1, r3
   25e84:	0010      	movs	r0, r2
   25e86:	4b20      	ldr	r3, [pc, #128]	; (25f08 <spi_flash_enable+0xb4>)
   25e88:	4798      	blx	r3
   25e8a:	0003      	movs	r3, r0
   25e8c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   25e8e:	230f      	movs	r3, #15
   25e90:	18fb      	adds	r3, r7, r3
   25e92:	781b      	ldrb	r3, [r3, #0]
   25e94:	b25b      	sxtb	r3, r3
   25e96:	2b00      	cmp	r3, #0
   25e98:	d126      	bne.n	25ee8 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   25e9a:	68bb      	ldr	r3, [r7, #8]
   25e9c:	4a1b      	ldr	r2, [pc, #108]	; (25f0c <spi_flash_enable+0xb8>)
   25e9e:	4013      	ands	r3, r2
   25ea0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   25ea2:	68bb      	ldr	r3, [r7, #8]
   25ea4:	4a1a      	ldr	r2, [pc, #104]	; (25f10 <spi_flash_enable+0xbc>)
   25ea6:	4313      	orrs	r3, r2
   25ea8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   25eaa:	68bb      	ldr	r3, [r7, #8]
   25eac:	4a15      	ldr	r2, [pc, #84]	; (25f04 <spi_flash_enable+0xb0>)
   25eae:	0019      	movs	r1, r3
   25eb0:	0010      	movs	r0, r2
   25eb2:	4b18      	ldr	r3, [pc, #96]	; (25f14 <spi_flash_enable+0xc0>)
   25eb4:	4798      	blx	r3
		if(enable) {
   25eb6:	1dfb      	adds	r3, r7, #7
   25eb8:	781b      	ldrb	r3, [r3, #0]
   25eba:	2b00      	cmp	r3, #0
   25ebc:	d002      	beq.n	25ec4 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   25ebe:	4b16      	ldr	r3, [pc, #88]	; (25f18 <spi_flash_enable+0xc4>)
   25ec0:	4798      	blx	r3
   25ec2:	e001      	b.n	25ec8 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   25ec4:	4b15      	ldr	r3, [pc, #84]	; (25f1c <spi_flash_enable+0xc8>)
   25ec6:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   25ec8:	68bb      	ldr	r3, [r7, #8]
   25eca:	4a10      	ldr	r2, [pc, #64]	; (25f0c <spi_flash_enable+0xb8>)
   25ecc:	4013      	ands	r3, r2
   25ece:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   25ed0:	68bb      	ldr	r3, [r7, #8]
   25ed2:	2280      	movs	r2, #128	; 0x80
   25ed4:	0252      	lsls	r2, r2, #9
   25ed6:	4313      	orrs	r3, r2
   25ed8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   25eda:	68bb      	ldr	r3, [r7, #8]
   25edc:	4a09      	ldr	r2, [pc, #36]	; (25f04 <spi_flash_enable+0xb0>)
   25ede:	0019      	movs	r1, r3
   25ee0:	0010      	movs	r0, r2
   25ee2:	4b0c      	ldr	r3, [pc, #48]	; (25f14 <spi_flash_enable+0xc0>)
   25ee4:	4798      	blx	r3
   25ee6:	e000      	b.n	25eea <spi_flash_enable+0x96>
			goto ERR1;
   25ee8:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   25eea:	230f      	movs	r3, #15
   25eec:	18fb      	adds	r3, r7, r3
   25eee:	781b      	ldrb	r3, [r3, #0]
   25ef0:	b25b      	sxtb	r3, r3
}
   25ef2:	0018      	movs	r0, r3
   25ef4:	46bd      	mov	sp, r7
   25ef6:	b005      	add	sp, #20
   25ef8:	bd90      	pop	{r4, r7, pc}
   25efa:	46c0      	nop			; (mov r8, r8)
   25efc:	00022491 	.word	0x00022491
   25f00:	0000039f 	.word	0x0000039f
   25f04:	00001410 	.word	0x00001410
   25f08:	00022b91 	.word	0x00022b91
   25f0c:	f8888fff 	.word	0xf8888fff
   25f10:	01111000 	.word	0x01111000
   25f14:	00022bb5 	.word	0x00022bb5
   25f18:	00025dd5 	.word	0x00025dd5
   25f1c:	00025d55 	.word	0x00025d55

00025f20 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   25f20:	b580      	push	{r7, lr}
   25f22:	b084      	sub	sp, #16
   25f24:	af00      	add	r7, sp, #0
   25f26:	0002      	movs	r2, r0
   25f28:	1dfb      	adds	r3, r7, #7
   25f2a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   25f2c:	1dfb      	adds	r3, r7, #7
   25f2e:	781b      	ldrb	r3, [r3, #0]
   25f30:	2b00      	cmp	r3, #0
   25f32:	d108      	bne.n	25f46 <mem_test_unit_ready+0x26>
   25f34:	1dfb      	adds	r3, r7, #7
   25f36:	781a      	ldrb	r2, [r3, #0]
   25f38:	4b08      	ldr	r3, [pc, #32]	; (25f5c <mem_test_unit_ready+0x3c>)
   25f3a:	0152      	lsls	r2, r2, #5
   25f3c:	58d3      	ldr	r3, [r2, r3]
   25f3e:	4798      	blx	r3
   25f40:	0003      	movs	r3, r0
   25f42:	001a      	movs	r2, r3
   25f44:	e000      	b.n	25f48 <mem_test_unit_ready+0x28>
   25f46:	2201      	movs	r2, #1
  status =
   25f48:	230f      	movs	r3, #15
   25f4a:	18fb      	adds	r3, r7, r3
   25f4c:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25f4e:	230f      	movs	r3, #15
   25f50:	18fb      	adds	r3, r7, r3
   25f52:	781b      	ldrb	r3, [r3, #0]
}
   25f54:	0018      	movs	r0, r3
   25f56:	46bd      	mov	sp, r7
   25f58:	b004      	add	sp, #16
   25f5a:	bd80      	pop	{r7, pc}
   25f5c:	00039220 	.word	0x00039220

00025f60 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   25f60:	b580      	push	{r7, lr}
   25f62:	b084      	sub	sp, #16
   25f64:	af00      	add	r7, sp, #0
   25f66:	0002      	movs	r2, r0
   25f68:	6039      	str	r1, [r7, #0]
   25f6a:	1dfb      	adds	r3, r7, #7
   25f6c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   25f6e:	1dfb      	adds	r3, r7, #7
   25f70:	781b      	ldrb	r3, [r3, #0]
   25f72:	2b00      	cmp	r3, #0
   25f74:	d10c      	bne.n	25f90 <mem_read_capacity+0x30>
   25f76:	1dfb      	adds	r3, r7, #7
   25f78:	781b      	ldrb	r3, [r3, #0]
   25f7a:	4a0b      	ldr	r2, [pc, #44]	; (25fa8 <mem_read_capacity+0x48>)
   25f7c:	015b      	lsls	r3, r3, #5
   25f7e:	18d3      	adds	r3, r2, r3
   25f80:	3304      	adds	r3, #4
   25f82:	681b      	ldr	r3, [r3, #0]
   25f84:	683a      	ldr	r2, [r7, #0]
   25f86:	0010      	movs	r0, r2
   25f88:	4798      	blx	r3
   25f8a:	0003      	movs	r3, r0
   25f8c:	001a      	movs	r2, r3
   25f8e:	e000      	b.n	25f92 <mem_read_capacity+0x32>
   25f90:	2201      	movs	r2, #1
  status =
   25f92:	230f      	movs	r3, #15
   25f94:	18fb      	adds	r3, r7, r3
   25f96:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25f98:	230f      	movs	r3, #15
   25f9a:	18fb      	adds	r3, r7, r3
   25f9c:	781b      	ldrb	r3, [r3, #0]
}
   25f9e:	0018      	movs	r0, r3
   25fa0:	46bd      	mov	sp, r7
   25fa2:	b004      	add	sp, #16
   25fa4:	bd80      	pop	{r7, pc}
   25fa6:	46c0      	nop			; (mov r8, r8)
   25fa8:	00039220 	.word	0x00039220

00025fac <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   25fac:	b580      	push	{r7, lr}
   25fae:	b084      	sub	sp, #16
   25fb0:	af00      	add	r7, sp, #0
   25fb2:	0002      	movs	r2, r0
   25fb4:	1dfb      	adds	r3, r7, #7
   25fb6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   25fb8:	1dfb      	adds	r3, r7, #7
   25fba:	781b      	ldrb	r3, [r3, #0]
   25fbc:	425a      	negs	r2, r3
   25fbe:	4153      	adcs	r3, r2
   25fc0:	b2da      	uxtb	r2, r3
  sector_size =
   25fc2:	230f      	movs	r3, #15
   25fc4:	18fb      	adds	r3, r7, r3
   25fc6:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   25fc8:	230f      	movs	r3, #15
   25fca:	18fb      	adds	r3, r7, r3
   25fcc:	781b      	ldrb	r3, [r3, #0]
}
   25fce:	0018      	movs	r0, r3
   25fd0:	46bd      	mov	sp, r7
   25fd2:	b004      	add	sp, #16
   25fd4:	bd80      	pop	{r7, pc}
	...

00025fd8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   25fd8:	b580      	push	{r7, lr}
   25fda:	b084      	sub	sp, #16
   25fdc:	af00      	add	r7, sp, #0
   25fde:	0002      	movs	r2, r0
   25fe0:	1dfb      	adds	r3, r7, #7
   25fe2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   25fe4:	1dfb      	adds	r3, r7, #7
   25fe6:	781b      	ldrb	r3, [r3, #0]
   25fe8:	2b00      	cmp	r3, #0
   25fea:	d109      	bne.n	26000 <mem_wr_protect+0x28>
   25fec:	1dfb      	adds	r3, r7, #7
   25fee:	781b      	ldrb	r3, [r3, #0]
   25ff0:	4a0a      	ldr	r2, [pc, #40]	; (2601c <mem_wr_protect+0x44>)
   25ff2:	015b      	lsls	r3, r3, #5
   25ff4:	18d3      	adds	r3, r2, r3
   25ff6:	330c      	adds	r3, #12
   25ff8:	681b      	ldr	r3, [r3, #0]
   25ffa:	4798      	blx	r3
   25ffc:	1e03      	subs	r3, r0, #0
   25ffe:	d001      	beq.n	26004 <mem_wr_protect+0x2c>
   26000:	2201      	movs	r2, #1
   26002:	e000      	b.n	26006 <mem_wr_protect+0x2e>
   26004:	2200      	movs	r2, #0
  wr_protect =
   26006:	230f      	movs	r3, #15
   26008:	18fb      	adds	r3, r7, r3
   2600a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   2600c:	230f      	movs	r3, #15
   2600e:	18fb      	adds	r3, r7, r3
   26010:	781b      	ldrb	r3, [r3, #0]
}
   26012:	0018      	movs	r0, r3
   26014:	46bd      	mov	sp, r7
   26016:	b004      	add	sp, #16
   26018:	bd80      	pop	{r7, pc}
   2601a:	46c0      	nop			; (mov r8, r8)
   2601c:	00039220 	.word	0x00039220

00026020 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   26020:	b580      	push	{r7, lr}
   26022:	b086      	sub	sp, #24
   26024:	af00      	add	r7, sp, #0
   26026:	60b9      	str	r1, [r7, #8]
   26028:	607a      	str	r2, [r7, #4]
   2602a:	230f      	movs	r3, #15
   2602c:	18fb      	adds	r3, r7, r3
   2602e:	1c02      	adds	r2, r0, #0
   26030:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   26032:	230f      	movs	r3, #15
   26034:	18fb      	adds	r3, r7, r3
   26036:	781b      	ldrb	r3, [r3, #0]
   26038:	2b00      	cmp	r3, #0
   2603a:	d10e      	bne.n	2605a <memory_2_ram+0x3a>
   2603c:	230f      	movs	r3, #15
   2603e:	18fb      	adds	r3, r7, r3
   26040:	781b      	ldrb	r3, [r3, #0]
   26042:	4a0b      	ldr	r2, [pc, #44]	; (26070 <memory_2_ram+0x50>)
   26044:	015b      	lsls	r3, r3, #5
   26046:	18d3      	adds	r3, r2, r3
   26048:	3314      	adds	r3, #20
   2604a:	681b      	ldr	r3, [r3, #0]
   2604c:	6879      	ldr	r1, [r7, #4]
   2604e:	68ba      	ldr	r2, [r7, #8]
   26050:	0010      	movs	r0, r2
   26052:	4798      	blx	r3
   26054:	0003      	movs	r3, r0
   26056:	001a      	movs	r2, r3
   26058:	e000      	b.n	2605c <memory_2_ram+0x3c>
   2605a:	2201      	movs	r2, #1
  status =
   2605c:	2317      	movs	r3, #23
   2605e:	18fb      	adds	r3, r7, r3
   26060:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   26062:	2317      	movs	r3, #23
   26064:	18fb      	adds	r3, r7, r3
   26066:	781b      	ldrb	r3, [r3, #0]
}
   26068:	0018      	movs	r0, r3
   2606a:	46bd      	mov	sp, r7
   2606c:	b006      	add	sp, #24
   2606e:	bd80      	pop	{r7, pc}
   26070:	00039220 	.word	0x00039220

00026074 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   26074:	b580      	push	{r7, lr}
   26076:	b086      	sub	sp, #24
   26078:	af00      	add	r7, sp, #0
   2607a:	60b9      	str	r1, [r7, #8]
   2607c:	607a      	str	r2, [r7, #4]
   2607e:	230f      	movs	r3, #15
   26080:	18fb      	adds	r3, r7, r3
   26082:	1c02      	adds	r2, r0, #0
   26084:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   26086:	230f      	movs	r3, #15
   26088:	18fb      	adds	r3, r7, r3
   2608a:	781b      	ldrb	r3, [r3, #0]
   2608c:	2b00      	cmp	r3, #0
   2608e:	d10e      	bne.n	260ae <ram_2_memory+0x3a>
   26090:	230f      	movs	r3, #15
   26092:	18fb      	adds	r3, r7, r3
   26094:	781b      	ldrb	r3, [r3, #0]
   26096:	4a0b      	ldr	r2, [pc, #44]	; (260c4 <ram_2_memory+0x50>)
   26098:	015b      	lsls	r3, r3, #5
   2609a:	18d3      	adds	r3, r2, r3
   2609c:	3318      	adds	r3, #24
   2609e:	681b      	ldr	r3, [r3, #0]
   260a0:	6879      	ldr	r1, [r7, #4]
   260a2:	68ba      	ldr	r2, [r7, #8]
   260a4:	0010      	movs	r0, r2
   260a6:	4798      	blx	r3
   260a8:	0003      	movs	r3, r0
   260aa:	001a      	movs	r2, r3
   260ac:	e000      	b.n	260b0 <ram_2_memory+0x3c>
   260ae:	2201      	movs	r2, #1
  status =
   260b0:	2317      	movs	r3, #23
   260b2:	18fb      	adds	r3, r7, r3
   260b4:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   260b6:	2317      	movs	r3, #23
   260b8:	18fb      	adds	r3, r7, r3
   260ba:	781b      	ldrb	r3, [r3, #0]
}
   260bc:	0018      	movs	r0, r3
   260be:	46bd      	mov	sp, r7
   260c0:	b006      	add	sp, #24
   260c2:	bd80      	pop	{r7, pc}
   260c4:	00039220 	.word	0x00039220

000260c8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   260c8:	b580      	push	{r7, lr}
   260ca:	b082      	sub	sp, #8
   260cc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   260ce:	4b10      	ldr	r3, [pc, #64]	; (26110 <cpu_irq_enter_critical+0x48>)
   260d0:	681b      	ldr	r3, [r3, #0]
   260d2:	2b00      	cmp	r3, #0
   260d4:	d112      	bne.n	260fc <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   260d6:	f3ef 8310 	mrs	r3, PRIMASK
   260da:	607b      	str	r3, [r7, #4]
  return(result);
   260dc:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   260de:	2b00      	cmp	r3, #0
   260e0:	d109      	bne.n	260f6 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   260e2:	b672      	cpsid	i
   260e4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   260e8:	4b0a      	ldr	r3, [pc, #40]	; (26114 <cpu_irq_enter_critical+0x4c>)
   260ea:	2200      	movs	r2, #0
   260ec:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   260ee:	4b0a      	ldr	r3, [pc, #40]	; (26118 <cpu_irq_enter_critical+0x50>)
   260f0:	2201      	movs	r2, #1
   260f2:	701a      	strb	r2, [r3, #0]
   260f4:	e002      	b.n	260fc <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   260f6:	4b08      	ldr	r3, [pc, #32]	; (26118 <cpu_irq_enter_critical+0x50>)
   260f8:	2200      	movs	r2, #0
   260fa:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   260fc:	4b04      	ldr	r3, [pc, #16]	; (26110 <cpu_irq_enter_critical+0x48>)
   260fe:	681b      	ldr	r3, [r3, #0]
   26100:	1c5a      	adds	r2, r3, #1
   26102:	4b03      	ldr	r3, [pc, #12]	; (26110 <cpu_irq_enter_critical+0x48>)
   26104:	601a      	str	r2, [r3, #0]
}
   26106:	46c0      	nop			; (mov r8, r8)
   26108:	46bd      	mov	sp, r7
   2610a:	b002      	add	sp, #8
   2610c:	bd80      	pop	{r7, pc}
   2610e:	46c0      	nop			; (mov r8, r8)
   26110:	20003ea4 	.word	0x20003ea4
   26114:	200000ca 	.word	0x200000ca
   26118:	20003ea8 	.word	0x20003ea8

0002611c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   2611c:	b580      	push	{r7, lr}
   2611e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   26120:	4b0b      	ldr	r3, [pc, #44]	; (26150 <cpu_irq_leave_critical+0x34>)
   26122:	681b      	ldr	r3, [r3, #0]
   26124:	1e5a      	subs	r2, r3, #1
   26126:	4b0a      	ldr	r3, [pc, #40]	; (26150 <cpu_irq_leave_critical+0x34>)
   26128:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   2612a:	4b09      	ldr	r3, [pc, #36]	; (26150 <cpu_irq_leave_critical+0x34>)
   2612c:	681b      	ldr	r3, [r3, #0]
   2612e:	2b00      	cmp	r3, #0
   26130:	d10a      	bne.n	26148 <cpu_irq_leave_critical+0x2c>
   26132:	4b08      	ldr	r3, [pc, #32]	; (26154 <cpu_irq_leave_critical+0x38>)
   26134:	781b      	ldrb	r3, [r3, #0]
   26136:	b2db      	uxtb	r3, r3
   26138:	2b00      	cmp	r3, #0
   2613a:	d005      	beq.n	26148 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   2613c:	4b06      	ldr	r3, [pc, #24]	; (26158 <cpu_irq_leave_critical+0x3c>)
   2613e:	2201      	movs	r2, #1
   26140:	701a      	strb	r2, [r3, #0]
   26142:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   26146:	b662      	cpsie	i
	}
}
   26148:	46c0      	nop			; (mov r8, r8)
   2614a:	46bd      	mov	sp, r7
   2614c:	bd80      	pop	{r7, pc}
   2614e:	46c0      	nop			; (mov r8, r8)
   26150:	20003ea4 	.word	0x20003ea4
   26154:	20003ea8 	.word	0x20003ea8
   26158:	200000ca 	.word	0x200000ca

0002615c <system_pinmux_get_group_from_gpio_pin>:
{
   2615c:	b580      	push	{r7, lr}
   2615e:	b084      	sub	sp, #16
   26160:	af00      	add	r7, sp, #0
   26162:	0002      	movs	r2, r0
   26164:	1dfb      	adds	r3, r7, #7
   26166:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   26168:	230f      	movs	r3, #15
   2616a:	18fb      	adds	r3, r7, r3
   2616c:	1dfa      	adds	r2, r7, #7
   2616e:	7812      	ldrb	r2, [r2, #0]
   26170:	09d2      	lsrs	r2, r2, #7
   26172:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26174:	230e      	movs	r3, #14
   26176:	18fb      	adds	r3, r7, r3
   26178:	1dfa      	adds	r2, r7, #7
   2617a:	7812      	ldrb	r2, [r2, #0]
   2617c:	0952      	lsrs	r2, r2, #5
   2617e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   26180:	4b0d      	ldr	r3, [pc, #52]	; (261b8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   26182:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26184:	230f      	movs	r3, #15
   26186:	18fb      	adds	r3, r7, r3
   26188:	781b      	ldrb	r3, [r3, #0]
   2618a:	2b00      	cmp	r3, #0
   2618c:	d10f      	bne.n	261ae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2618e:	230f      	movs	r3, #15
   26190:	18fb      	adds	r3, r7, r3
   26192:	781b      	ldrb	r3, [r3, #0]
   26194:	009b      	lsls	r3, r3, #2
   26196:	2210      	movs	r2, #16
   26198:	4694      	mov	ip, r2
   2619a:	44bc      	add	ip, r7
   2619c:	4463      	add	r3, ip
   2619e:	3b08      	subs	r3, #8
   261a0:	681a      	ldr	r2, [r3, #0]
   261a2:	230e      	movs	r3, #14
   261a4:	18fb      	adds	r3, r7, r3
   261a6:	781b      	ldrb	r3, [r3, #0]
   261a8:	01db      	lsls	r3, r3, #7
   261aa:	18d3      	adds	r3, r2, r3
   261ac:	e000      	b.n	261b0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   261ae:	2300      	movs	r3, #0
}
   261b0:	0018      	movs	r0, r3
   261b2:	46bd      	mov	sp, r7
   261b4:	b004      	add	sp, #16
   261b6:	bd80      	pop	{r7, pc}
   261b8:	41004400 	.word	0x41004400

000261bc <port_get_group_from_gpio_pin>:
{
   261bc:	b580      	push	{r7, lr}
   261be:	b082      	sub	sp, #8
   261c0:	af00      	add	r7, sp, #0
   261c2:	0002      	movs	r2, r0
   261c4:	1dfb      	adds	r3, r7, #7
   261c6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   261c8:	1dfb      	adds	r3, r7, #7
   261ca:	781b      	ldrb	r3, [r3, #0]
   261cc:	0018      	movs	r0, r3
   261ce:	4b03      	ldr	r3, [pc, #12]	; (261dc <port_get_group_from_gpio_pin+0x20>)
   261d0:	4798      	blx	r3
   261d2:	0003      	movs	r3, r0
}
   261d4:	0018      	movs	r0, r3
   261d6:	46bd      	mov	sp, r7
   261d8:	b002      	add	sp, #8
   261da:	bd80      	pop	{r7, pc}
   261dc:	0002615d 	.word	0x0002615d

000261e0 <port_get_config_defaults>:
{
   261e0:	b580      	push	{r7, lr}
   261e2:	b082      	sub	sp, #8
   261e4:	af00      	add	r7, sp, #0
   261e6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   261e8:	687b      	ldr	r3, [r7, #4]
   261ea:	2200      	movs	r2, #0
   261ec:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   261ee:	687b      	ldr	r3, [r7, #4]
   261f0:	2201      	movs	r2, #1
   261f2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   261f4:	687b      	ldr	r3, [r7, #4]
   261f6:	2200      	movs	r2, #0
   261f8:	709a      	strb	r2, [r3, #2]
}
   261fa:	46c0      	nop			; (mov r8, r8)
   261fc:	46bd      	mov	sp, r7
   261fe:	b002      	add	sp, #8
   26200:	bd80      	pop	{r7, pc}
	...

00026204 <port_pin_set_output_level>:
{
   26204:	b580      	push	{r7, lr}
   26206:	b084      	sub	sp, #16
   26208:	af00      	add	r7, sp, #0
   2620a:	0002      	movs	r2, r0
   2620c:	1dfb      	adds	r3, r7, #7
   2620e:	701a      	strb	r2, [r3, #0]
   26210:	1dbb      	adds	r3, r7, #6
   26212:	1c0a      	adds	r2, r1, #0
   26214:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   26216:	1dfb      	adds	r3, r7, #7
   26218:	781b      	ldrb	r3, [r3, #0]
   2621a:	0018      	movs	r0, r3
   2621c:	4b0d      	ldr	r3, [pc, #52]	; (26254 <port_pin_set_output_level+0x50>)
   2621e:	4798      	blx	r3
   26220:	0003      	movs	r3, r0
   26222:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   26224:	1dfb      	adds	r3, r7, #7
   26226:	781b      	ldrb	r3, [r3, #0]
   26228:	221f      	movs	r2, #31
   2622a:	4013      	ands	r3, r2
   2622c:	2201      	movs	r2, #1
   2622e:	409a      	lsls	r2, r3
   26230:	0013      	movs	r3, r2
   26232:	60bb      	str	r3, [r7, #8]
	if (level) {
   26234:	1dbb      	adds	r3, r7, #6
   26236:	781b      	ldrb	r3, [r3, #0]
   26238:	2b00      	cmp	r3, #0
   2623a:	d003      	beq.n	26244 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   2623c:	68fb      	ldr	r3, [r7, #12]
   2623e:	68ba      	ldr	r2, [r7, #8]
   26240:	619a      	str	r2, [r3, #24]
}
   26242:	e002      	b.n	2624a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   26244:	68fb      	ldr	r3, [r7, #12]
   26246:	68ba      	ldr	r2, [r7, #8]
   26248:	615a      	str	r2, [r3, #20]
}
   2624a:	46c0      	nop			; (mov r8, r8)
   2624c:	46bd      	mov	sp, r7
   2624e:	b004      	add	sp, #16
   26250:	bd80      	pop	{r7, pc}
   26252:	46c0      	nop			; (mov r8, r8)
   26254:	000261bd 	.word	0x000261bd

00026258 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   26258:	b580      	push	{r7, lr}
   2625a:	b082      	sub	sp, #8
   2625c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   2625e:	1d3b      	adds	r3, r7, #4
   26260:	0018      	movs	r0, r3
   26262:	4b0e      	ldr	r3, [pc, #56]	; (2629c <system_board_init+0x44>)
   26264:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   26266:	1d3b      	adds	r3, r7, #4
   26268:	2201      	movs	r2, #1
   2626a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   2626c:	1d3b      	adds	r3, r7, #4
   2626e:	0019      	movs	r1, r3
   26270:	2017      	movs	r0, #23
   26272:	4b0b      	ldr	r3, [pc, #44]	; (262a0 <system_board_init+0x48>)
   26274:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   26276:	2101      	movs	r1, #1
   26278:	2017      	movs	r0, #23
   2627a:	4b0a      	ldr	r3, [pc, #40]	; (262a4 <system_board_init+0x4c>)
   2627c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   2627e:	1d3b      	adds	r3, r7, #4
   26280:	2200      	movs	r2, #0
   26282:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   26284:	1d3b      	adds	r3, r7, #4
   26286:	2201      	movs	r2, #1
   26288:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   2628a:	1d3b      	adds	r3, r7, #4
   2628c:	0019      	movs	r1, r3
   2628e:	2037      	movs	r0, #55	; 0x37
   26290:	4b03      	ldr	r3, [pc, #12]	; (262a0 <system_board_init+0x48>)
   26292:	4798      	blx	r3
}
   26294:	46c0      	nop			; (mov r8, r8)
   26296:	46bd      	mov	sp, r7
   26298:	b002      	add	sp, #8
   2629a:	bd80      	pop	{r7, pc}
   2629c:	000261e1 	.word	0x000261e1
   262a0:	000268cd 	.word	0x000268cd
   262a4:	00026205 	.word	0x00026205

000262a8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   262a8:	b580      	push	{r7, lr}
   262aa:	b084      	sub	sp, #16
   262ac:	af00      	add	r7, sp, #0
   262ae:	0002      	movs	r2, r0
   262b0:	1dfb      	adds	r3, r7, #7
   262b2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   262b4:	230f      	movs	r3, #15
   262b6:	18fb      	adds	r3, r7, r3
   262b8:	1dfa      	adds	r2, r7, #7
   262ba:	7812      	ldrb	r2, [r2, #0]
   262bc:	0952      	lsrs	r2, r2, #5
   262be:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   262c0:	230f      	movs	r3, #15
   262c2:	18fb      	adds	r3, r7, r3
   262c4:	781b      	ldrb	r3, [r3, #0]
   262c6:	2b00      	cmp	r3, #0
   262c8:	d10c      	bne.n	262e4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   262ca:	4b09      	ldr	r3, [pc, #36]	; (262f0 <_extint_get_eic_from_channel+0x48>)
   262cc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   262ce:	230f      	movs	r3, #15
   262d0:	18fb      	adds	r3, r7, r3
   262d2:	781b      	ldrb	r3, [r3, #0]
   262d4:	009b      	lsls	r3, r3, #2
   262d6:	2210      	movs	r2, #16
   262d8:	4694      	mov	ip, r2
   262da:	44bc      	add	ip, r7
   262dc:	4463      	add	r3, ip
   262de:	3b08      	subs	r3, #8
   262e0:	681b      	ldr	r3, [r3, #0]
   262e2:	e000      	b.n	262e6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   262e4:	2300      	movs	r3, #0
	}
}
   262e6:	0018      	movs	r0, r3
   262e8:	46bd      	mov	sp, r7
   262ea:	b004      	add	sp, #16
   262ec:	bd80      	pop	{r7, pc}
   262ee:	46c0      	nop			; (mov r8, r8)
   262f0:	40001800 	.word	0x40001800

000262f4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   262f4:	b580      	push	{r7, lr}
   262f6:	b084      	sub	sp, #16
   262f8:	af00      	add	r7, sp, #0
   262fa:	0002      	movs	r2, r0
   262fc:	1dfb      	adds	r3, r7, #7
   262fe:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   26300:	1dfb      	adds	r3, r7, #7
   26302:	781b      	ldrb	r3, [r3, #0]
   26304:	0018      	movs	r0, r3
   26306:	4b0b      	ldr	r3, [pc, #44]	; (26334 <extint_chan_is_detected+0x40>)
   26308:	4798      	blx	r3
   2630a:	0003      	movs	r3, r0
   2630c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2630e:	1dfb      	adds	r3, r7, #7
   26310:	781b      	ldrb	r3, [r3, #0]
   26312:	221f      	movs	r2, #31
   26314:	4013      	ands	r3, r2
   26316:	2201      	movs	r2, #1
   26318:	409a      	lsls	r2, r3
   2631a:	0013      	movs	r3, r2
   2631c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   2631e:	68fb      	ldr	r3, [r7, #12]
   26320:	691b      	ldr	r3, [r3, #16]
   26322:	68ba      	ldr	r2, [r7, #8]
   26324:	4013      	ands	r3, r2
   26326:	1e5a      	subs	r2, r3, #1
   26328:	4193      	sbcs	r3, r2
   2632a:	b2db      	uxtb	r3, r3
}
   2632c:	0018      	movs	r0, r3
   2632e:	46bd      	mov	sp, r7
   26330:	b004      	add	sp, #16
   26332:	bd80      	pop	{r7, pc}
   26334:	000262a9 	.word	0x000262a9

00026338 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   26338:	b580      	push	{r7, lr}
   2633a:	b084      	sub	sp, #16
   2633c:	af00      	add	r7, sp, #0
   2633e:	0002      	movs	r2, r0
   26340:	1dfb      	adds	r3, r7, #7
   26342:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   26344:	1dfb      	adds	r3, r7, #7
   26346:	781b      	ldrb	r3, [r3, #0]
   26348:	0018      	movs	r0, r3
   2634a:	4b09      	ldr	r3, [pc, #36]	; (26370 <extint_chan_clear_detected+0x38>)
   2634c:	4798      	blx	r3
   2634e:	0003      	movs	r3, r0
   26350:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   26352:	1dfb      	adds	r3, r7, #7
   26354:	781b      	ldrb	r3, [r3, #0]
   26356:	221f      	movs	r2, #31
   26358:	4013      	ands	r3, r2
   2635a:	2201      	movs	r2, #1
   2635c:	409a      	lsls	r2, r3
   2635e:	0013      	movs	r3, r2
   26360:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   26362:	68fb      	ldr	r3, [r7, #12]
   26364:	68ba      	ldr	r2, [r7, #8]
   26366:	611a      	str	r2, [r3, #16]
}
   26368:	46c0      	nop			; (mov r8, r8)
   2636a:	46bd      	mov	sp, r7
   2636c:	b004      	add	sp, #16
   2636e:	bd80      	pop	{r7, pc}
   26370:	000262a9 	.word	0x000262a9

00026374 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26374:	b580      	push	{r7, lr}
   26376:	b082      	sub	sp, #8
   26378:	af00      	add	r7, sp, #0
   2637a:	6078      	str	r0, [r7, #4]
   2637c:	0008      	movs	r0, r1
   2637e:	0011      	movs	r1, r2
   26380:	1cfb      	adds	r3, r7, #3
   26382:	1c02      	adds	r2, r0, #0
   26384:	701a      	strb	r2, [r3, #0]
   26386:	1cbb      	adds	r3, r7, #2
   26388:	1c0a      	adds	r2, r1, #0
   2638a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   2638c:	1cbb      	adds	r3, r7, #2
   2638e:	781b      	ldrb	r3, [r3, #0]
   26390:	2b00      	cmp	r3, #0
   26392:	d001      	beq.n	26398 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   26394:	2317      	movs	r3, #23
   26396:	e019      	b.n	263cc <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   26398:	1cfb      	adds	r3, r7, #3
   2639a:	781a      	ldrb	r2, [r3, #0]
   2639c:	4b0d      	ldr	r3, [pc, #52]	; (263d4 <extint_register_callback+0x60>)
   2639e:	0092      	lsls	r2, r2, #2
   263a0:	58d3      	ldr	r3, [r2, r3]
   263a2:	2b00      	cmp	r3, #0
   263a4:	d107      	bne.n	263b6 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   263a6:	1cfb      	adds	r3, r7, #3
   263a8:	781a      	ldrb	r2, [r3, #0]
   263aa:	4b0a      	ldr	r3, [pc, #40]	; (263d4 <extint_register_callback+0x60>)
   263ac:	0092      	lsls	r2, r2, #2
   263ae:	6879      	ldr	r1, [r7, #4]
   263b0:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   263b2:	2300      	movs	r3, #0
   263b4:	e00a      	b.n	263cc <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   263b6:	1cfb      	adds	r3, r7, #3
   263b8:	781a      	ldrb	r2, [r3, #0]
   263ba:	4b06      	ldr	r3, [pc, #24]	; (263d4 <extint_register_callback+0x60>)
   263bc:	0092      	lsls	r2, r2, #2
   263be:	58d2      	ldr	r2, [r2, r3]
   263c0:	687b      	ldr	r3, [r7, #4]
   263c2:	429a      	cmp	r2, r3
   263c4:	d101      	bne.n	263ca <extint_register_callback+0x56>
		return STATUS_OK;
   263c6:	2300      	movs	r3, #0
   263c8:	e000      	b.n	263cc <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   263ca:	231d      	movs	r3, #29
}
   263cc:	0018      	movs	r0, r3
   263ce:	46bd      	mov	sp, r7
   263d0:	b002      	add	sp, #8
   263d2:	bd80      	pop	{r7, pc}
   263d4:	20005750 	.word	0x20005750

000263d8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   263d8:	b580      	push	{r7, lr}
   263da:	b084      	sub	sp, #16
   263dc:	af00      	add	r7, sp, #0
   263de:	0002      	movs	r2, r0
   263e0:	1dfb      	adds	r3, r7, #7
   263e2:	701a      	strb	r2, [r3, #0]
   263e4:	1dbb      	adds	r3, r7, #6
   263e6:	1c0a      	adds	r2, r1, #0
   263e8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   263ea:	1dbb      	adds	r3, r7, #6
   263ec:	781b      	ldrb	r3, [r3, #0]
   263ee:	2b00      	cmp	r3, #0
   263f0:	d10e      	bne.n	26410 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   263f2:	1dfb      	adds	r3, r7, #7
   263f4:	781b      	ldrb	r3, [r3, #0]
   263f6:	0018      	movs	r0, r3
   263f8:	4b08      	ldr	r3, [pc, #32]	; (2641c <extint_chan_enable_callback+0x44>)
   263fa:	4798      	blx	r3
   263fc:	0003      	movs	r3, r0
   263fe:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   26400:	1dfb      	adds	r3, r7, #7
   26402:	781b      	ldrb	r3, [r3, #0]
   26404:	2201      	movs	r2, #1
   26406:	409a      	lsls	r2, r3
   26408:	68fb      	ldr	r3, [r7, #12]
   2640a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   2640c:	2300      	movs	r3, #0
   2640e:	e000      	b.n	26412 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   26410:	2317      	movs	r3, #23
}
   26412:	0018      	movs	r0, r3
   26414:	46bd      	mov	sp, r7
   26416:	b004      	add	sp, #16
   26418:	bd80      	pop	{r7, pc}
   2641a:	46c0      	nop			; (mov r8, r8)
   2641c:	000262a9 	.word	0x000262a9

00026420 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26420:	b580      	push	{r7, lr}
   26422:	b084      	sub	sp, #16
   26424:	af00      	add	r7, sp, #0
   26426:	0002      	movs	r2, r0
   26428:	1dfb      	adds	r3, r7, #7
   2642a:	701a      	strb	r2, [r3, #0]
   2642c:	1dbb      	adds	r3, r7, #6
   2642e:	1c0a      	adds	r2, r1, #0
   26430:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   26432:	1dbb      	adds	r3, r7, #6
   26434:	781b      	ldrb	r3, [r3, #0]
   26436:	2b00      	cmp	r3, #0
   26438:	d10e      	bne.n	26458 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2643a:	1dfb      	adds	r3, r7, #7
   2643c:	781b      	ldrb	r3, [r3, #0]
   2643e:	0018      	movs	r0, r3
   26440:	4b08      	ldr	r3, [pc, #32]	; (26464 <extint_chan_disable_callback+0x44>)
   26442:	4798      	blx	r3
   26444:	0003      	movs	r3, r0
   26446:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   26448:	1dfb      	adds	r3, r7, #7
   2644a:	781b      	ldrb	r3, [r3, #0]
   2644c:	2201      	movs	r2, #1
   2644e:	409a      	lsls	r2, r3
   26450:	68fb      	ldr	r3, [r7, #12]
   26452:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   26454:	2300      	movs	r3, #0
   26456:	e000      	b.n	2645a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   26458:	2317      	movs	r3, #23
}
   2645a:	0018      	movs	r0, r3
   2645c:	46bd      	mov	sp, r7
   2645e:	b004      	add	sp, #16
   26460:	bd80      	pop	{r7, pc}
   26462:	46c0      	nop			; (mov r8, r8)
   26464:	000262a9 	.word	0x000262a9

00026468 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   26468:	b580      	push	{r7, lr}
   2646a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2646c:	4b15      	ldr	r3, [pc, #84]	; (264c4 <EIC_Handler+0x5c>)
   2646e:	2200      	movs	r2, #0
   26470:	701a      	strb	r2, [r3, #0]
   26472:	e020      	b.n	264b6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   26474:	4b13      	ldr	r3, [pc, #76]	; (264c4 <EIC_Handler+0x5c>)
   26476:	781b      	ldrb	r3, [r3, #0]
   26478:	0018      	movs	r0, r3
   2647a:	4b13      	ldr	r3, [pc, #76]	; (264c8 <EIC_Handler+0x60>)
   2647c:	4798      	blx	r3
   2647e:	1e03      	subs	r3, r0, #0
   26480:	d013      	beq.n	264aa <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   26482:	4b10      	ldr	r3, [pc, #64]	; (264c4 <EIC_Handler+0x5c>)
   26484:	781b      	ldrb	r3, [r3, #0]
   26486:	0018      	movs	r0, r3
   26488:	4b10      	ldr	r3, [pc, #64]	; (264cc <EIC_Handler+0x64>)
   2648a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   2648c:	4b0d      	ldr	r3, [pc, #52]	; (264c4 <EIC_Handler+0x5c>)
   2648e:	781b      	ldrb	r3, [r3, #0]
   26490:	001a      	movs	r2, r3
   26492:	4b0f      	ldr	r3, [pc, #60]	; (264d0 <EIC_Handler+0x68>)
   26494:	0092      	lsls	r2, r2, #2
   26496:	58d3      	ldr	r3, [r2, r3]
   26498:	2b00      	cmp	r3, #0
   2649a:	d006      	beq.n	264aa <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   2649c:	4b09      	ldr	r3, [pc, #36]	; (264c4 <EIC_Handler+0x5c>)
   2649e:	781b      	ldrb	r3, [r3, #0]
   264a0:	001a      	movs	r2, r3
   264a2:	4b0b      	ldr	r3, [pc, #44]	; (264d0 <EIC_Handler+0x68>)
   264a4:	0092      	lsls	r2, r2, #2
   264a6:	58d3      	ldr	r3, [r2, r3]
   264a8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   264aa:	4b06      	ldr	r3, [pc, #24]	; (264c4 <EIC_Handler+0x5c>)
   264ac:	781b      	ldrb	r3, [r3, #0]
   264ae:	3301      	adds	r3, #1
   264b0:	b2da      	uxtb	r2, r3
   264b2:	4b04      	ldr	r3, [pc, #16]	; (264c4 <EIC_Handler+0x5c>)
   264b4:	701a      	strb	r2, [r3, #0]
   264b6:	4b03      	ldr	r3, [pc, #12]	; (264c4 <EIC_Handler+0x5c>)
   264b8:	781b      	ldrb	r3, [r3, #0]
   264ba:	2b0f      	cmp	r3, #15
   264bc:	d9da      	bls.n	26474 <EIC_Handler+0xc>
			}
		}
	}
}
   264be:	46c0      	nop			; (mov r8, r8)
   264c0:	46bd      	mov	sp, r7
   264c2:	bd80      	pop	{r7, pc}
   264c4:	2000574c 	.word	0x2000574c
   264c8:	000262f5 	.word	0x000262f5
   264cc:	00026339 	.word	0x00026339
   264d0:	20005750 	.word	0x20005750

000264d4 <system_gclk_chan_get_config_defaults>:
{
   264d4:	b580      	push	{r7, lr}
   264d6:	b082      	sub	sp, #8
   264d8:	af00      	add	r7, sp, #0
   264da:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   264dc:	687b      	ldr	r3, [r7, #4]
   264de:	2200      	movs	r2, #0
   264e0:	701a      	strb	r2, [r3, #0]
}
   264e2:	46c0      	nop			; (mov r8, r8)
   264e4:	46bd      	mov	sp, r7
   264e6:	b002      	add	sp, #8
   264e8:	bd80      	pop	{r7, pc}
	...

000264ec <system_apb_clock_set_mask>:
{
   264ec:	b580      	push	{r7, lr}
   264ee:	b082      	sub	sp, #8
   264f0:	af00      	add	r7, sp, #0
   264f2:	0002      	movs	r2, r0
   264f4:	6039      	str	r1, [r7, #0]
   264f6:	1dfb      	adds	r3, r7, #7
   264f8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   264fa:	1dfb      	adds	r3, r7, #7
   264fc:	781b      	ldrb	r3, [r3, #0]
   264fe:	2b01      	cmp	r3, #1
   26500:	d00a      	beq.n	26518 <system_apb_clock_set_mask+0x2c>
   26502:	2b02      	cmp	r3, #2
   26504:	d00f      	beq.n	26526 <system_apb_clock_set_mask+0x3a>
   26506:	2b00      	cmp	r3, #0
   26508:	d114      	bne.n	26534 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2650a:	4b0e      	ldr	r3, [pc, #56]	; (26544 <system_apb_clock_set_mask+0x58>)
   2650c:	4a0d      	ldr	r2, [pc, #52]	; (26544 <system_apb_clock_set_mask+0x58>)
   2650e:	6991      	ldr	r1, [r2, #24]
   26510:	683a      	ldr	r2, [r7, #0]
   26512:	430a      	orrs	r2, r1
   26514:	619a      	str	r2, [r3, #24]
			break;
   26516:	e00f      	b.n	26538 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26518:	4b0a      	ldr	r3, [pc, #40]	; (26544 <system_apb_clock_set_mask+0x58>)
   2651a:	4a0a      	ldr	r2, [pc, #40]	; (26544 <system_apb_clock_set_mask+0x58>)
   2651c:	69d1      	ldr	r1, [r2, #28]
   2651e:	683a      	ldr	r2, [r7, #0]
   26520:	430a      	orrs	r2, r1
   26522:	61da      	str	r2, [r3, #28]
			break;
   26524:	e008      	b.n	26538 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26526:	4b07      	ldr	r3, [pc, #28]	; (26544 <system_apb_clock_set_mask+0x58>)
   26528:	4a06      	ldr	r2, [pc, #24]	; (26544 <system_apb_clock_set_mask+0x58>)
   2652a:	6a11      	ldr	r1, [r2, #32]
   2652c:	683a      	ldr	r2, [r7, #0]
   2652e:	430a      	orrs	r2, r1
   26530:	621a      	str	r2, [r3, #32]
			break;
   26532:	e001      	b.n	26538 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26534:	2317      	movs	r3, #23
   26536:	e000      	b.n	2653a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26538:	2300      	movs	r3, #0
}
   2653a:	0018      	movs	r0, r3
   2653c:	46bd      	mov	sp, r7
   2653e:	b002      	add	sp, #8
   26540:	bd80      	pop	{r7, pc}
   26542:	46c0      	nop			; (mov r8, r8)
   26544:	40000400 	.word	0x40000400

00026548 <system_pinmux_get_config_defaults>:
{
   26548:	b580      	push	{r7, lr}
   2654a:	b082      	sub	sp, #8
   2654c:	af00      	add	r7, sp, #0
   2654e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26550:	687b      	ldr	r3, [r7, #4]
   26552:	2280      	movs	r2, #128	; 0x80
   26554:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26556:	687b      	ldr	r3, [r7, #4]
   26558:	2200      	movs	r2, #0
   2655a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2655c:	687b      	ldr	r3, [r7, #4]
   2655e:	2201      	movs	r2, #1
   26560:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26562:	687b      	ldr	r3, [r7, #4]
   26564:	2200      	movs	r2, #0
   26566:	70da      	strb	r2, [r3, #3]
}
   26568:	46c0      	nop			; (mov r8, r8)
   2656a:	46bd      	mov	sp, r7
   2656c:	b002      	add	sp, #8
   2656e:	bd80      	pop	{r7, pc}

00026570 <system_interrupt_enable>:
{
   26570:	b580      	push	{r7, lr}
   26572:	b082      	sub	sp, #8
   26574:	af00      	add	r7, sp, #0
   26576:	0002      	movs	r2, r0
   26578:	1dfb      	adds	r3, r7, #7
   2657a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2657c:	4b06      	ldr	r3, [pc, #24]	; (26598 <system_interrupt_enable+0x28>)
   2657e:	1dfa      	adds	r2, r7, #7
   26580:	7812      	ldrb	r2, [r2, #0]
   26582:	0011      	movs	r1, r2
   26584:	221f      	movs	r2, #31
   26586:	400a      	ands	r2, r1
   26588:	2101      	movs	r1, #1
   2658a:	4091      	lsls	r1, r2
   2658c:	000a      	movs	r2, r1
   2658e:	601a      	str	r2, [r3, #0]
}
   26590:	46c0      	nop			; (mov r8, r8)
   26592:	46bd      	mov	sp, r7
   26594:	b002      	add	sp, #8
   26596:	bd80      	pop	{r7, pc}
   26598:	e000e100 	.word	0xe000e100

0002659c <_extint_get_eic_from_channel>:
{
   2659c:	b580      	push	{r7, lr}
   2659e:	b084      	sub	sp, #16
   265a0:	af00      	add	r7, sp, #0
   265a2:	0002      	movs	r2, r0
   265a4:	1dfb      	adds	r3, r7, #7
   265a6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   265a8:	230f      	movs	r3, #15
   265aa:	18fb      	adds	r3, r7, r3
   265ac:	1dfa      	adds	r2, r7, #7
   265ae:	7812      	ldrb	r2, [r2, #0]
   265b0:	0952      	lsrs	r2, r2, #5
   265b2:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   265b4:	230f      	movs	r3, #15
   265b6:	18fb      	adds	r3, r7, r3
   265b8:	781b      	ldrb	r3, [r3, #0]
   265ba:	2b00      	cmp	r3, #0
   265bc:	d10c      	bne.n	265d8 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   265be:	4b09      	ldr	r3, [pc, #36]	; (265e4 <_extint_get_eic_from_channel+0x48>)
   265c0:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   265c2:	230f      	movs	r3, #15
   265c4:	18fb      	adds	r3, r7, r3
   265c6:	781b      	ldrb	r3, [r3, #0]
   265c8:	009b      	lsls	r3, r3, #2
   265ca:	2210      	movs	r2, #16
   265cc:	4694      	mov	ip, r2
   265ce:	44bc      	add	ip, r7
   265d0:	4463      	add	r3, ip
   265d2:	3b08      	subs	r3, #8
   265d4:	681b      	ldr	r3, [r3, #0]
   265d6:	e000      	b.n	265da <_extint_get_eic_from_channel+0x3e>
		return NULL;
   265d8:	2300      	movs	r3, #0
}
   265da:	0018      	movs	r0, r3
   265dc:	46bd      	mov	sp, r7
   265de:	b004      	add	sp, #16
   265e0:	bd80      	pop	{r7, pc}
   265e2:	46c0      	nop			; (mov r8, r8)
   265e4:	40001800 	.word	0x40001800

000265e8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   265e8:	b580      	push	{r7, lr}
   265ea:	b082      	sub	sp, #8
   265ec:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   265ee:	4b0f      	ldr	r3, [pc, #60]	; (2662c <extint_is_syncing+0x44>)
   265f0:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   265f2:	2300      	movs	r3, #0
   265f4:	607b      	str	r3, [r7, #4]
   265f6:	e011      	b.n	2661c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   265f8:	687b      	ldr	r3, [r7, #4]
   265fa:	009b      	lsls	r3, r3, #2
   265fc:	2208      	movs	r2, #8
   265fe:	4694      	mov	ip, r2
   26600:	44bc      	add	ip, r7
   26602:	4463      	add	r3, ip
   26604:	3b08      	subs	r3, #8
   26606:	681b      	ldr	r3, [r3, #0]
   26608:	785b      	ldrb	r3, [r3, #1]
   2660a:	b2db      	uxtb	r3, r3
   2660c:	b25b      	sxtb	r3, r3
   2660e:	2b00      	cmp	r3, #0
   26610:	da01      	bge.n	26616 <extint_is_syncing+0x2e>
			return true;
   26612:	2301      	movs	r3, #1
   26614:	e006      	b.n	26624 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26616:	687b      	ldr	r3, [r7, #4]
   26618:	3301      	adds	r3, #1
   2661a:	607b      	str	r3, [r7, #4]
   2661c:	687b      	ldr	r3, [r7, #4]
   2661e:	2b00      	cmp	r3, #0
   26620:	d0ea      	beq.n	265f8 <extint_is_syncing+0x10>
		}
	}
	return false;
   26622:	2300      	movs	r3, #0
}
   26624:	0018      	movs	r0, r3
   26626:	46bd      	mov	sp, r7
   26628:	b002      	add	sp, #8
   2662a:	bd80      	pop	{r7, pc}
   2662c:	40001800 	.word	0x40001800

00026630 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   26630:	b580      	push	{r7, lr}
   26632:	b084      	sub	sp, #16
   26634:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26636:	4b2d      	ldr	r3, [pc, #180]	; (266ec <_system_extint_init+0xbc>)
   26638:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   2663a:	2140      	movs	r1, #64	; 0x40
   2663c:	2000      	movs	r0, #0
   2663e:	4b2c      	ldr	r3, [pc, #176]	; (266f0 <_system_extint_init+0xc0>)
   26640:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26642:	003b      	movs	r3, r7
   26644:	0018      	movs	r0, r3
   26646:	4b2b      	ldr	r3, [pc, #172]	; (266f4 <_system_extint_init+0xc4>)
   26648:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   2664a:	003b      	movs	r3, r7
   2664c:	2200      	movs	r2, #0
   2664e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   26650:	003b      	movs	r3, r7
   26652:	0019      	movs	r1, r3
   26654:	2005      	movs	r0, #5
   26656:	4b28      	ldr	r3, [pc, #160]	; (266f8 <_system_extint_init+0xc8>)
   26658:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   2665a:	2005      	movs	r0, #5
   2665c:	4b27      	ldr	r3, [pc, #156]	; (266fc <_system_extint_init+0xcc>)
   2665e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26660:	2300      	movs	r3, #0
   26662:	60fb      	str	r3, [r7, #12]
   26664:	e018      	b.n	26698 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   26666:	68fb      	ldr	r3, [r7, #12]
   26668:	009b      	lsls	r3, r3, #2
   2666a:	2210      	movs	r2, #16
   2666c:	4694      	mov	ip, r2
   2666e:	44bc      	add	ip, r7
   26670:	4463      	add	r3, ip
   26672:	3b0c      	subs	r3, #12
   26674:	681a      	ldr	r2, [r3, #0]
   26676:	68fb      	ldr	r3, [r7, #12]
   26678:	009b      	lsls	r3, r3, #2
   2667a:	2110      	movs	r1, #16
   2667c:	468c      	mov	ip, r1
   2667e:	44bc      	add	ip, r7
   26680:	4463      	add	r3, ip
   26682:	3b0c      	subs	r3, #12
   26684:	681b      	ldr	r3, [r3, #0]
   26686:	781b      	ldrb	r3, [r3, #0]
   26688:	b2db      	uxtb	r3, r3
   2668a:	2101      	movs	r1, #1
   2668c:	430b      	orrs	r3, r1
   2668e:	b2db      	uxtb	r3, r3
   26690:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26692:	68fb      	ldr	r3, [r7, #12]
   26694:	3301      	adds	r3, #1
   26696:	60fb      	str	r3, [r7, #12]
   26698:	68fb      	ldr	r3, [r7, #12]
   2669a:	2b00      	cmp	r3, #0
   2669c:	d0e3      	beq.n	26666 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   2669e:	46c0      	nop			; (mov r8, r8)
   266a0:	4b17      	ldr	r3, [pc, #92]	; (26700 <_system_extint_init+0xd0>)
   266a2:	4798      	blx	r3
   266a4:	1e03      	subs	r3, r0, #0
   266a6:	d1fb      	bne.n	266a0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   266a8:	230b      	movs	r3, #11
   266aa:	18fb      	adds	r3, r7, r3
   266ac:	2200      	movs	r2, #0
   266ae:	701a      	strb	r2, [r3, #0]
   266b0:	e00d      	b.n	266ce <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   266b2:	230b      	movs	r3, #11
   266b4:	18fb      	adds	r3, r7, r3
   266b6:	781a      	ldrb	r2, [r3, #0]
   266b8:	4b12      	ldr	r3, [pc, #72]	; (26704 <_system_extint_init+0xd4>)
   266ba:	0092      	lsls	r2, r2, #2
   266bc:	2100      	movs	r1, #0
   266be:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   266c0:	230b      	movs	r3, #11
   266c2:	18fb      	adds	r3, r7, r3
   266c4:	781a      	ldrb	r2, [r3, #0]
   266c6:	230b      	movs	r3, #11
   266c8:	18fb      	adds	r3, r7, r3
   266ca:	3201      	adds	r2, #1
   266cc:	701a      	strb	r2, [r3, #0]
   266ce:	230b      	movs	r3, #11
   266d0:	18fb      	adds	r3, r7, r3
   266d2:	781b      	ldrb	r3, [r3, #0]
   266d4:	2b0f      	cmp	r3, #15
   266d6:	d9ec      	bls.n	266b2 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   266d8:	2004      	movs	r0, #4
   266da:	4b0b      	ldr	r3, [pc, #44]	; (26708 <_system_extint_init+0xd8>)
   266dc:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   266de:	4b0b      	ldr	r3, [pc, #44]	; (2670c <_system_extint_init+0xdc>)
   266e0:	4798      	blx	r3
}
   266e2:	46c0      	nop			; (mov r8, r8)
   266e4:	46bd      	mov	sp, r7
   266e6:	b004      	add	sp, #16
   266e8:	bd80      	pop	{r7, pc}
   266ea:	46c0      	nop			; (mov r8, r8)
   266ec:	40001800 	.word	0x40001800
   266f0:	000264ed 	.word	0x000264ed
   266f4:	000264d5 	.word	0x000264d5
   266f8:	00029d5d 	.word	0x00029d5d
   266fc:	00029da1 	.word	0x00029da1
   26700:	000265e9 	.word	0x000265e9
   26704:	20005750 	.word	0x20005750
   26708:	00026571 	.word	0x00026571
   2670c:	00026711 	.word	0x00026711

00026710 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   26710:	b580      	push	{r7, lr}
   26712:	b082      	sub	sp, #8
   26714:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26716:	4b15      	ldr	r3, [pc, #84]	; (2676c <_extint_enable+0x5c>)
   26718:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2671a:	2300      	movs	r3, #0
   2671c:	607b      	str	r3, [r7, #4]
   2671e:	e018      	b.n	26752 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   26720:	687b      	ldr	r3, [r7, #4]
   26722:	009b      	lsls	r3, r3, #2
   26724:	2208      	movs	r2, #8
   26726:	4694      	mov	ip, r2
   26728:	44bc      	add	ip, r7
   2672a:	4463      	add	r3, ip
   2672c:	3b08      	subs	r3, #8
   2672e:	681a      	ldr	r2, [r3, #0]
   26730:	687b      	ldr	r3, [r7, #4]
   26732:	009b      	lsls	r3, r3, #2
   26734:	2108      	movs	r1, #8
   26736:	468c      	mov	ip, r1
   26738:	44bc      	add	ip, r7
   2673a:	4463      	add	r3, ip
   2673c:	3b08      	subs	r3, #8
   2673e:	681b      	ldr	r3, [r3, #0]
   26740:	781b      	ldrb	r3, [r3, #0]
   26742:	b2db      	uxtb	r3, r3
   26744:	2102      	movs	r1, #2
   26746:	430b      	orrs	r3, r1
   26748:	b2db      	uxtb	r3, r3
   2674a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2674c:	687b      	ldr	r3, [r7, #4]
   2674e:	3301      	adds	r3, #1
   26750:	607b      	str	r3, [r7, #4]
   26752:	687b      	ldr	r3, [r7, #4]
   26754:	2b00      	cmp	r3, #0
   26756:	d0e3      	beq.n	26720 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   26758:	46c0      	nop			; (mov r8, r8)
   2675a:	4b05      	ldr	r3, [pc, #20]	; (26770 <_extint_enable+0x60>)
   2675c:	4798      	blx	r3
   2675e:	1e03      	subs	r3, r0, #0
   26760:	d1fb      	bne.n	2675a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   26762:	46c0      	nop			; (mov r8, r8)
   26764:	46bd      	mov	sp, r7
   26766:	b002      	add	sp, #8
   26768:	bd80      	pop	{r7, pc}
   2676a:	46c0      	nop			; (mov r8, r8)
   2676c:	40001800 	.word	0x40001800
   26770:	000265e9 	.word	0x000265e9

00026774 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   26774:	b580      	push	{r7, lr}
   26776:	b082      	sub	sp, #8
   26778:	af00      	add	r7, sp, #0
   2677a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   2677c:	687b      	ldr	r3, [r7, #4]
   2677e:	2200      	movs	r2, #0
   26780:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   26782:	687b      	ldr	r3, [r7, #4]
   26784:	2200      	movs	r2, #0
   26786:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   26788:	687b      	ldr	r3, [r7, #4]
   2678a:	2201      	movs	r2, #1
   2678c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   2678e:	687b      	ldr	r3, [r7, #4]
   26790:	2201      	movs	r2, #1
   26792:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   26794:	687b      	ldr	r3, [r7, #4]
   26796:	2200      	movs	r2, #0
   26798:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   2679a:	687b      	ldr	r3, [r7, #4]
   2679c:	2202      	movs	r2, #2
   2679e:	72da      	strb	r2, [r3, #11]
}
   267a0:	46c0      	nop			; (mov r8, r8)
   267a2:	46bd      	mov	sp, r7
   267a4:	b002      	add	sp, #8
   267a6:	bd80      	pop	{r7, pc}

000267a8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   267a8:	b580      	push	{r7, lr}
   267aa:	b086      	sub	sp, #24
   267ac:	af00      	add	r7, sp, #0
   267ae:	0002      	movs	r2, r0
   267b0:	6039      	str	r1, [r7, #0]
   267b2:	1dfb      	adds	r3, r7, #7
   267b4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   267b6:	2308      	movs	r3, #8
   267b8:	18fb      	adds	r3, r7, r3
   267ba:	0018      	movs	r0, r3
   267bc:	4b36      	ldr	r3, [pc, #216]	; (26898 <extint_chan_set_config+0xf0>)
   267be:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   267c0:	683b      	ldr	r3, [r7, #0]
   267c2:	685b      	ldr	r3, [r3, #4]
   267c4:	b2da      	uxtb	r2, r3
   267c6:	2308      	movs	r3, #8
   267c8:	18fb      	adds	r3, r7, r3
   267ca:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   267cc:	2308      	movs	r3, #8
   267ce:	18fb      	adds	r3, r7, r3
   267d0:	2200      	movs	r2, #0
   267d2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   267d4:	683b      	ldr	r3, [r7, #0]
   267d6:	7a1a      	ldrb	r2, [r3, #8]
   267d8:	2308      	movs	r3, #8
   267da:	18fb      	adds	r3, r7, r3
   267dc:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   267de:	683b      	ldr	r3, [r7, #0]
   267e0:	681b      	ldr	r3, [r3, #0]
   267e2:	b2db      	uxtb	r3, r3
   267e4:	2208      	movs	r2, #8
   267e6:	18ba      	adds	r2, r7, r2
   267e8:	0011      	movs	r1, r2
   267ea:	0018      	movs	r0, r3
   267ec:	4b2b      	ldr	r3, [pc, #172]	; (2689c <extint_chan_set_config+0xf4>)
   267ee:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   267f0:	1dfb      	adds	r3, r7, #7
   267f2:	781b      	ldrb	r3, [r3, #0]
   267f4:	0018      	movs	r0, r3
   267f6:	4b2a      	ldr	r3, [pc, #168]	; (268a0 <extint_chan_set_config+0xf8>)
   267f8:	4798      	blx	r3
   267fa:	0003      	movs	r3, r0
   267fc:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   267fe:	1dfb      	adds	r3, r7, #7
   26800:	781b      	ldrb	r3, [r3, #0]
   26802:	2207      	movs	r2, #7
   26804:	4013      	ands	r3, r2
   26806:	009b      	lsls	r3, r3, #2
   26808:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   2680a:	683b      	ldr	r3, [r7, #0]
   2680c:	7adb      	ldrb	r3, [r3, #11]
   2680e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   26810:	683b      	ldr	r3, [r7, #0]
   26812:	7a9b      	ldrb	r3, [r3, #10]
   26814:	2b00      	cmp	r3, #0
   26816:	d003      	beq.n	26820 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   26818:	697b      	ldr	r3, [r7, #20]
   2681a:	2208      	movs	r2, #8
   2681c:	4313      	orrs	r3, r2
   2681e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   26820:	1dfb      	adds	r3, r7, #7
   26822:	781b      	ldrb	r3, [r3, #0]
   26824:	08db      	lsrs	r3, r3, #3
   26826:	b2db      	uxtb	r3, r3
   26828:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   2682a:	1dfb      	adds	r3, r7, #7
   2682c:	781b      	ldrb	r3, [r3, #0]
   2682e:	08db      	lsrs	r3, r3, #3
   26830:	b2db      	uxtb	r3, r3
   26832:	001a      	movs	r2, r3
   26834:	693b      	ldr	r3, [r7, #16]
   26836:	3206      	adds	r2, #6
   26838:	0092      	lsls	r2, r2, #2
   2683a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   2683c:	210f      	movs	r1, #15
   2683e:	68fa      	ldr	r2, [r7, #12]
   26840:	4091      	lsls	r1, r2
   26842:	000a      	movs	r2, r1
   26844:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26846:	401a      	ands	r2, r3
			(new_config << config_pos);
   26848:	6979      	ldr	r1, [r7, #20]
   2684a:	68fb      	ldr	r3, [r7, #12]
   2684c:	4099      	lsls	r1, r3
   2684e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   26850:	431a      	orrs	r2, r3
   26852:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26854:	693b      	ldr	r3, [r7, #16]
   26856:	1d82      	adds	r2, r0, #6
   26858:	0092      	lsls	r2, r2, #2
   2685a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   2685c:	683b      	ldr	r3, [r7, #0]
   2685e:	7a5b      	ldrb	r3, [r3, #9]
   26860:	2b00      	cmp	r3, #0
   26862:	d00a      	beq.n	2687a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   26864:	693b      	ldr	r3, [r7, #16]
   26866:	695a      	ldr	r2, [r3, #20]
   26868:	1dfb      	adds	r3, r7, #7
   2686a:	781b      	ldrb	r3, [r3, #0]
   2686c:	2101      	movs	r1, #1
   2686e:	4099      	lsls	r1, r3
   26870:	000b      	movs	r3, r1
   26872:	431a      	orrs	r2, r3
   26874:	693b      	ldr	r3, [r7, #16]
   26876:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   26878:	e00a      	b.n	26890 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   2687a:	693b      	ldr	r3, [r7, #16]
   2687c:	695b      	ldr	r3, [r3, #20]
   2687e:	1dfa      	adds	r2, r7, #7
   26880:	7812      	ldrb	r2, [r2, #0]
   26882:	2101      	movs	r1, #1
   26884:	4091      	lsls	r1, r2
   26886:	000a      	movs	r2, r1
   26888:	43d2      	mvns	r2, r2
   2688a:	401a      	ands	r2, r3
   2688c:	693b      	ldr	r3, [r7, #16]
   2688e:	615a      	str	r2, [r3, #20]
}
   26890:	46c0      	nop			; (mov r8, r8)
   26892:	46bd      	mov	sp, r7
   26894:	b006      	add	sp, #24
   26896:	bd80      	pop	{r7, pc}
   26898:	00026549 	.word	0x00026549
   2689c:	0002a0bd 	.word	0x0002a0bd
   268a0:	0002659d 	.word	0x0002659d

000268a4 <system_pinmux_get_config_defaults>:
{
   268a4:	b580      	push	{r7, lr}
   268a6:	b082      	sub	sp, #8
   268a8:	af00      	add	r7, sp, #0
   268aa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   268ac:	687b      	ldr	r3, [r7, #4]
   268ae:	2280      	movs	r2, #128	; 0x80
   268b0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   268b2:	687b      	ldr	r3, [r7, #4]
   268b4:	2200      	movs	r2, #0
   268b6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   268b8:	687b      	ldr	r3, [r7, #4]
   268ba:	2201      	movs	r2, #1
   268bc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   268be:	687b      	ldr	r3, [r7, #4]
   268c0:	2200      	movs	r2, #0
   268c2:	70da      	strb	r2, [r3, #3]
}
   268c4:	46c0      	nop			; (mov r8, r8)
   268c6:	46bd      	mov	sp, r7
   268c8:	b002      	add	sp, #8
   268ca:	bd80      	pop	{r7, pc}

000268cc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   268cc:	b580      	push	{r7, lr}
   268ce:	b084      	sub	sp, #16
   268d0:	af00      	add	r7, sp, #0
   268d2:	0002      	movs	r2, r0
   268d4:	6039      	str	r1, [r7, #0]
   268d6:	1dfb      	adds	r3, r7, #7
   268d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   268da:	230c      	movs	r3, #12
   268dc:	18fb      	adds	r3, r7, r3
   268de:	0018      	movs	r0, r3
   268e0:	4b10      	ldr	r3, [pc, #64]	; (26924 <port_pin_set_config+0x58>)
   268e2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   268e4:	230c      	movs	r3, #12
   268e6:	18fb      	adds	r3, r7, r3
   268e8:	2280      	movs	r2, #128	; 0x80
   268ea:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   268ec:	683b      	ldr	r3, [r7, #0]
   268ee:	781a      	ldrb	r2, [r3, #0]
   268f0:	230c      	movs	r3, #12
   268f2:	18fb      	adds	r3, r7, r3
   268f4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   268f6:	683b      	ldr	r3, [r7, #0]
   268f8:	785a      	ldrb	r2, [r3, #1]
   268fa:	230c      	movs	r3, #12
   268fc:	18fb      	adds	r3, r7, r3
   268fe:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   26900:	683b      	ldr	r3, [r7, #0]
   26902:	789a      	ldrb	r2, [r3, #2]
   26904:	230c      	movs	r3, #12
   26906:	18fb      	adds	r3, r7, r3
   26908:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2690a:	230c      	movs	r3, #12
   2690c:	18fa      	adds	r2, r7, r3
   2690e:	1dfb      	adds	r3, r7, #7
   26910:	781b      	ldrb	r3, [r3, #0]
   26912:	0011      	movs	r1, r2
   26914:	0018      	movs	r0, r3
   26916:	4b04      	ldr	r3, [pc, #16]	; (26928 <port_pin_set_config+0x5c>)
   26918:	4798      	blx	r3
}
   2691a:	46c0      	nop			; (mov r8, r8)
   2691c:	46bd      	mov	sp, r7
   2691e:	b004      	add	sp, #16
   26920:	bd80      	pop	{r7, pc}
   26922:	46c0      	nop			; (mov r8, r8)
   26924:	000268a5 	.word	0x000268a5
   26928:	0002a0bd 	.word	0x0002a0bd

0002692c <system_gclk_chan_get_config_defaults>:
{
   2692c:	b580      	push	{r7, lr}
   2692e:	b082      	sub	sp, #8
   26930:	af00      	add	r7, sp, #0
   26932:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26934:	687b      	ldr	r3, [r7, #4]
   26936:	2200      	movs	r2, #0
   26938:	701a      	strb	r2, [r3, #0]
}
   2693a:	46c0      	nop			; (mov r8, r8)
   2693c:	46bd      	mov	sp, r7
   2693e:	b002      	add	sp, #8
   26940:	bd80      	pop	{r7, pc}
	...

00026944 <system_apb_clock_set_mask>:
{
   26944:	b580      	push	{r7, lr}
   26946:	b082      	sub	sp, #8
   26948:	af00      	add	r7, sp, #0
   2694a:	0002      	movs	r2, r0
   2694c:	6039      	str	r1, [r7, #0]
   2694e:	1dfb      	adds	r3, r7, #7
   26950:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26952:	1dfb      	adds	r3, r7, #7
   26954:	781b      	ldrb	r3, [r3, #0]
   26956:	2b01      	cmp	r3, #1
   26958:	d00a      	beq.n	26970 <system_apb_clock_set_mask+0x2c>
   2695a:	2b02      	cmp	r3, #2
   2695c:	d00f      	beq.n	2697e <system_apb_clock_set_mask+0x3a>
   2695e:	2b00      	cmp	r3, #0
   26960:	d114      	bne.n	2698c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26962:	4b0e      	ldr	r3, [pc, #56]	; (2699c <system_apb_clock_set_mask+0x58>)
   26964:	4a0d      	ldr	r2, [pc, #52]	; (2699c <system_apb_clock_set_mask+0x58>)
   26966:	6991      	ldr	r1, [r2, #24]
   26968:	683a      	ldr	r2, [r7, #0]
   2696a:	430a      	orrs	r2, r1
   2696c:	619a      	str	r2, [r3, #24]
			break;
   2696e:	e00f      	b.n	26990 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26970:	4b0a      	ldr	r3, [pc, #40]	; (2699c <system_apb_clock_set_mask+0x58>)
   26972:	4a0a      	ldr	r2, [pc, #40]	; (2699c <system_apb_clock_set_mask+0x58>)
   26974:	69d1      	ldr	r1, [r2, #28]
   26976:	683a      	ldr	r2, [r7, #0]
   26978:	430a      	orrs	r2, r1
   2697a:	61da      	str	r2, [r3, #28]
			break;
   2697c:	e008      	b.n	26990 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2697e:	4b07      	ldr	r3, [pc, #28]	; (2699c <system_apb_clock_set_mask+0x58>)
   26980:	4a06      	ldr	r2, [pc, #24]	; (2699c <system_apb_clock_set_mask+0x58>)
   26982:	6a11      	ldr	r1, [r2, #32]
   26984:	683a      	ldr	r2, [r7, #0]
   26986:	430a      	orrs	r2, r1
   26988:	621a      	str	r2, [r3, #32]
			break;
   2698a:	e001      	b.n	26990 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2698c:	2317      	movs	r3, #23
   2698e:	e000      	b.n	26992 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26990:	2300      	movs	r3, #0
}
   26992:	0018      	movs	r0, r3
   26994:	46bd      	mov	sp, r7
   26996:	b002      	add	sp, #8
   26998:	bd80      	pop	{r7, pc}
   2699a:	46c0      	nop			; (mov r8, r8)
   2699c:	40000400 	.word	0x40000400

000269a0 <system_interrupt_enable>:
{
   269a0:	b580      	push	{r7, lr}
   269a2:	b082      	sub	sp, #8
   269a4:	af00      	add	r7, sp, #0
   269a6:	0002      	movs	r2, r0
   269a8:	1dfb      	adds	r3, r7, #7
   269aa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   269ac:	4b06      	ldr	r3, [pc, #24]	; (269c8 <system_interrupt_enable+0x28>)
   269ae:	1dfa      	adds	r2, r7, #7
   269b0:	7812      	ldrb	r2, [r2, #0]
   269b2:	0011      	movs	r1, r2
   269b4:	221f      	movs	r2, #31
   269b6:	400a      	ands	r2, r1
   269b8:	2101      	movs	r1, #1
   269ba:	4091      	lsls	r1, r2
   269bc:	000a      	movs	r2, r1
   269be:	601a      	str	r2, [r3, #0]
}
   269c0:	46c0      	nop			; (mov r8, r8)
   269c2:	46bd      	mov	sp, r7
   269c4:	b002      	add	sp, #8
   269c6:	bd80      	pop	{r7, pc}
   269c8:	e000e100 	.word	0xe000e100

000269cc <system_interrupt_disable>:
{
   269cc:	b580      	push	{r7, lr}
   269ce:	b082      	sub	sp, #8
   269d0:	af00      	add	r7, sp, #0
   269d2:	0002      	movs	r2, r0
   269d4:	1dfb      	adds	r3, r7, #7
   269d6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   269d8:	4a07      	ldr	r2, [pc, #28]	; (269f8 <system_interrupt_disable+0x2c>)
   269da:	1dfb      	adds	r3, r7, #7
   269dc:	781b      	ldrb	r3, [r3, #0]
   269de:	0019      	movs	r1, r3
   269e0:	231f      	movs	r3, #31
   269e2:	400b      	ands	r3, r1
   269e4:	2101      	movs	r1, #1
   269e6:	4099      	lsls	r1, r3
   269e8:	000b      	movs	r3, r1
   269ea:	0019      	movs	r1, r3
   269ec:	2380      	movs	r3, #128	; 0x80
   269ee:	50d1      	str	r1, [r2, r3]
}
   269f0:	46c0      	nop			; (mov r8, r8)
   269f2:	46bd      	mov	sp, r7
   269f4:	b002      	add	sp, #8
   269f6:	bd80      	pop	{r7, pc}
   269f8:	e000e100 	.word	0xe000e100

000269fc <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   269fc:	b580      	push	{r7, lr}
   269fe:	b084      	sub	sp, #16
   26a00:	af00      	add	r7, sp, #0
   26a02:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26a04:	687b      	ldr	r3, [r7, #4]
   26a06:	681b      	ldr	r3, [r3, #0]
   26a08:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   26a0a:	68fb      	ldr	r3, [r7, #12]
   26a0c:	7a9b      	ldrb	r3, [r3, #10]
   26a0e:	b2db      	uxtb	r3, r3
   26a10:	b25b      	sxtb	r3, r3
   26a12:	2b00      	cmp	r3, #0
   26a14:	da01      	bge.n	26a1a <rtc_calendar_is_syncing+0x1e>
                return true;
   26a16:	2301      	movs	r3, #1
   26a18:	e000      	b.n	26a1c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   26a1a:	2300      	movs	r3, #0
}
   26a1c:	0018      	movs	r0, r3
   26a1e:	46bd      	mov	sp, r7
   26a20:	b004      	add	sp, #16
   26a22:	bd80      	pop	{r7, pc}

00026a24 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   26a24:	b580      	push	{r7, lr}
   26a26:	b084      	sub	sp, #16
   26a28:	af00      	add	r7, sp, #0
   26a2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26a2c:	687b      	ldr	r3, [r7, #4]
   26a2e:	681b      	ldr	r3, [r3, #0]
   26a30:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   26a32:	2003      	movs	r0, #3
   26a34:	4b0a      	ldr	r3, [pc, #40]	; (26a60 <rtc_calendar_enable+0x3c>)
   26a36:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26a38:	46c0      	nop			; (mov r8, r8)
   26a3a:	687b      	ldr	r3, [r7, #4]
   26a3c:	0018      	movs	r0, r3
   26a3e:	4b09      	ldr	r3, [pc, #36]	; (26a64 <rtc_calendar_enable+0x40>)
   26a40:	4798      	blx	r3
   26a42:	1e03      	subs	r3, r0, #0
   26a44:	d1f9      	bne.n	26a3a <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   26a46:	68fb      	ldr	r3, [r7, #12]
   26a48:	881b      	ldrh	r3, [r3, #0]
   26a4a:	b29b      	uxth	r3, r3
   26a4c:	2202      	movs	r2, #2
   26a4e:	4313      	orrs	r3, r2
   26a50:	b29a      	uxth	r2, r3
   26a52:	68fb      	ldr	r3, [r7, #12]
   26a54:	801a      	strh	r2, [r3, #0]
}
   26a56:	46c0      	nop			; (mov r8, r8)
   26a58:	46bd      	mov	sp, r7
   26a5a:	b004      	add	sp, #16
   26a5c:	bd80      	pop	{r7, pc}
   26a5e:	46c0      	nop			; (mov r8, r8)
   26a60:	000269a1 	.word	0x000269a1
   26a64:	000269fd 	.word	0x000269fd

00026a68 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   26a68:	b580      	push	{r7, lr}
   26a6a:	b084      	sub	sp, #16
   26a6c:	af00      	add	r7, sp, #0
   26a6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26a70:	687b      	ldr	r3, [r7, #4]
   26a72:	681b      	ldr	r3, [r3, #0]
   26a74:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   26a76:	2003      	movs	r0, #3
   26a78:	4b0d      	ldr	r3, [pc, #52]	; (26ab0 <rtc_calendar_disable+0x48>)
   26a7a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26a7c:	46c0      	nop			; (mov r8, r8)
   26a7e:	687b      	ldr	r3, [r7, #4]
   26a80:	0018      	movs	r0, r3
   26a82:	4b0c      	ldr	r3, [pc, #48]	; (26ab4 <rtc_calendar_disable+0x4c>)
   26a84:	4798      	blx	r3
   26a86:	1e03      	subs	r3, r0, #0
   26a88:	d1f9      	bne.n	26a7e <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   26a8a:	68fb      	ldr	r3, [r7, #12]
   26a8c:	22c1      	movs	r2, #193	; 0xc1
   26a8e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   26a90:	68fb      	ldr	r3, [r7, #12]
   26a92:	22c1      	movs	r2, #193	; 0xc1
   26a94:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   26a96:	68fb      	ldr	r3, [r7, #12]
   26a98:	881b      	ldrh	r3, [r3, #0]
   26a9a:	b29b      	uxth	r3, r3
   26a9c:	2202      	movs	r2, #2
   26a9e:	4393      	bics	r3, r2
   26aa0:	b29a      	uxth	r2, r3
   26aa2:	68fb      	ldr	r3, [r7, #12]
   26aa4:	801a      	strh	r2, [r3, #0]
}
   26aa6:	46c0      	nop			; (mov r8, r8)
   26aa8:	46bd      	mov	sp, r7
   26aaa:	b004      	add	sp, #16
   26aac:	bd80      	pop	{r7, pc}
   26aae:	46c0      	nop			; (mov r8, r8)
   26ab0:	000269cd 	.word	0x000269cd
   26ab4:	000269fd 	.word	0x000269fd

00026ab8 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   26ab8:	b580      	push	{r7, lr}
   26aba:	b084      	sub	sp, #16
   26abc:	af00      	add	r7, sp, #0
   26abe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26ac0:	687b      	ldr	r3, [r7, #4]
   26ac2:	681b      	ldr	r3, [r3, #0]
   26ac4:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   26ac6:	687b      	ldr	r3, [r7, #4]
   26ac8:	0018      	movs	r0, r3
   26aca:	4b0d      	ldr	r3, [pc, #52]	; (26b00 <rtc_calendar_reset+0x48>)
   26acc:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   26ace:	687b      	ldr	r3, [r7, #4]
   26ad0:	2200      	movs	r2, #0
   26ad2:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   26ad4:	687b      	ldr	r3, [r7, #4]
   26ad6:	2200      	movs	r2, #0
   26ad8:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   26ada:	46c0      	nop			; (mov r8, r8)
   26adc:	687b      	ldr	r3, [r7, #4]
   26ade:	0018      	movs	r0, r3
   26ae0:	4b08      	ldr	r3, [pc, #32]	; (26b04 <rtc_calendar_reset+0x4c>)
   26ae2:	4798      	blx	r3
   26ae4:	1e03      	subs	r3, r0, #0
   26ae6:	d1f9      	bne.n	26adc <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   26ae8:	68fb      	ldr	r3, [r7, #12]
   26aea:	881b      	ldrh	r3, [r3, #0]
   26aec:	b29b      	uxth	r3, r3
   26aee:	2201      	movs	r2, #1
   26af0:	4313      	orrs	r3, r2
   26af2:	b29a      	uxth	r2, r3
   26af4:	68fb      	ldr	r3, [r7, #12]
   26af6:	801a      	strh	r2, [r3, #0]
}
   26af8:	46c0      	nop			; (mov r8, r8)
   26afa:	46bd      	mov	sp, r7
   26afc:	b004      	add	sp, #16
   26afe:	bd80      	pop	{r7, pc}
   26b00:	00026a69 	.word	0x00026a69
   26b04:	000269fd 	.word	0x000269fd

00026b08 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   26b08:	b580      	push	{r7, lr}
   26b0a:	b084      	sub	sp, #16
   26b0c:	af00      	add	r7, sp, #0
   26b0e:	6078      	str	r0, [r7, #4]
   26b10:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   26b12:	683b      	ldr	r3, [r7, #0]
   26b14:	88db      	ldrh	r3, [r3, #6]
   26b16:	001a      	movs	r2, r3
   26b18:	687b      	ldr	r3, [r7, #4]
   26b1a:	88db      	ldrh	r3, [r3, #6]
   26b1c:	1ad3      	subs	r3, r2, r3
   26b1e:	069b      	lsls	r3, r3, #26
   26b20:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   26b22:	683b      	ldr	r3, [r7, #0]
   26b24:	795b      	ldrb	r3, [r3, #5]
   26b26:	059b      	lsls	r3, r3, #22
   26b28:	001a      	movs	r2, r3
   26b2a:	68fb      	ldr	r3, [r7, #12]
   26b2c:	4313      	orrs	r3, r2
   26b2e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   26b30:	683b      	ldr	r3, [r7, #0]
   26b32:	791b      	ldrb	r3, [r3, #4]
   26b34:	045b      	lsls	r3, r3, #17
   26b36:	001a      	movs	r2, r3
   26b38:	68fb      	ldr	r3, [r7, #12]
   26b3a:	4313      	orrs	r3, r2
   26b3c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   26b3e:	683b      	ldr	r3, [r7, #0]
   26b40:	789b      	ldrb	r3, [r3, #2]
   26b42:	031b      	lsls	r3, r3, #12
   26b44:	001a      	movs	r2, r3
   26b46:	68fb      	ldr	r3, [r7, #12]
   26b48:	4313      	orrs	r3, r2
   26b4a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   26b4c:	687b      	ldr	r3, [r7, #4]
   26b4e:	791b      	ldrb	r3, [r3, #4]
   26b50:	2201      	movs	r2, #1
   26b52:	4053      	eors	r3, r2
   26b54:	b2db      	uxtb	r3, r3
   26b56:	2b00      	cmp	r3, #0
   26b58:	d008      	beq.n	26b6c <rtc_calendar_time_to_register_value+0x64>
   26b5a:	683b      	ldr	r3, [r7, #0]
   26b5c:	78db      	ldrb	r3, [r3, #3]
   26b5e:	2b00      	cmp	r3, #0
   26b60:	d004      	beq.n	26b6c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   26b62:	68fb      	ldr	r3, [r7, #12]
   26b64:	2280      	movs	r2, #128	; 0x80
   26b66:	0252      	lsls	r2, r2, #9
   26b68:	4313      	orrs	r3, r2
   26b6a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   26b6c:	683b      	ldr	r3, [r7, #0]
   26b6e:	785b      	ldrb	r3, [r3, #1]
   26b70:	019b      	lsls	r3, r3, #6
   26b72:	001a      	movs	r2, r3
   26b74:	68fb      	ldr	r3, [r7, #12]
   26b76:	4313      	orrs	r3, r2
   26b78:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   26b7a:	683b      	ldr	r3, [r7, #0]
   26b7c:	781b      	ldrb	r3, [r3, #0]
   26b7e:	001a      	movs	r2, r3
   26b80:	68fb      	ldr	r3, [r7, #12]
   26b82:	4313      	orrs	r3, r2
   26b84:	60fb      	str	r3, [r7, #12]

	return register_value;
   26b86:	68fb      	ldr	r3, [r7, #12]
}
   26b88:	0018      	movs	r0, r3
   26b8a:	46bd      	mov	sp, r7
   26b8c:	b004      	add	sp, #16
   26b8e:	bd80      	pop	{r7, pc}

00026b90 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   26b90:	b580      	push	{r7, lr}
   26b92:	b084      	sub	sp, #16
   26b94:	af00      	add	r7, sp, #0
   26b96:	60f8      	str	r0, [r7, #12]
   26b98:	60b9      	str	r1, [r7, #8]
   26b9a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   26b9c:	68bb      	ldr	r3, [r7, #8]
   26b9e:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   26ba0:	b29a      	uxth	r2, r3
   26ba2:	68fb      	ldr	r3, [r7, #12]
   26ba4:	88db      	ldrh	r3, [r3, #6]
   26ba6:	18d3      	adds	r3, r2, r3
   26ba8:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   26baa:	687b      	ldr	r3, [r7, #4]
   26bac:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   26bae:	68bb      	ldr	r3, [r7, #8]
   26bb0:	0d9b      	lsrs	r3, r3, #22
   26bb2:	b2db      	uxtb	r3, r3
   26bb4:	220f      	movs	r2, #15
   26bb6:	4013      	ands	r3, r2
   26bb8:	b2da      	uxtb	r2, r3
   26bba:	687b      	ldr	r3, [r7, #4]
   26bbc:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   26bbe:	68bb      	ldr	r3, [r7, #8]
   26bc0:	0c5b      	lsrs	r3, r3, #17
   26bc2:	b2db      	uxtb	r3, r3
   26bc4:	221f      	movs	r2, #31
   26bc6:	4013      	ands	r3, r2
   26bc8:	b2da      	uxtb	r2, r3
   26bca:	687b      	ldr	r3, [r7, #4]
   26bcc:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   26bce:	68fb      	ldr	r3, [r7, #12]
   26bd0:	791b      	ldrb	r3, [r3, #4]
   26bd2:	2b00      	cmp	r3, #0
   26bd4:	d008      	beq.n	26be8 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   26bd6:	68bb      	ldr	r3, [r7, #8]
   26bd8:	0b1b      	lsrs	r3, r3, #12
   26bda:	b2db      	uxtb	r3, r3
   26bdc:	221f      	movs	r2, #31
   26bde:	4013      	ands	r3, r2
   26be0:	b2da      	uxtb	r2, r3
   26be2:	687b      	ldr	r3, [r7, #4]
   26be4:	709a      	strb	r2, [r3, #2]
   26be6:	e010      	b.n	26c0a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   26be8:	68bb      	ldr	r3, [r7, #8]
   26bea:	0b1b      	lsrs	r3, r3, #12
   26bec:	b2db      	uxtb	r3, r3
   26bee:	220f      	movs	r2, #15
   26bf0:	4013      	ands	r3, r2
   26bf2:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   26bf4:	687b      	ldr	r3, [r7, #4]
   26bf6:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   26bf8:	68ba      	ldr	r2, [r7, #8]
   26bfa:	2380      	movs	r3, #128	; 0x80
   26bfc:	025b      	lsls	r3, r3, #9
   26bfe:	4013      	ands	r3, r2
   26c00:	1e5a      	subs	r2, r3, #1
   26c02:	4193      	sbcs	r3, r2
   26c04:	b2da      	uxtb	r2, r3
   26c06:	687b      	ldr	r3, [r7, #4]
   26c08:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   26c0a:	68bb      	ldr	r3, [r7, #8]
   26c0c:	099b      	lsrs	r3, r3, #6
   26c0e:	b2db      	uxtb	r3, r3
   26c10:	223f      	movs	r2, #63	; 0x3f
   26c12:	4013      	ands	r3, r2
   26c14:	b2da      	uxtb	r2, r3
   26c16:	687b      	ldr	r3, [r7, #4]
   26c18:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   26c1a:	68bb      	ldr	r3, [r7, #8]
   26c1c:	b2db      	uxtb	r3, r3
   26c1e:	223f      	movs	r2, #63	; 0x3f
   26c20:	4013      	ands	r3, r2
   26c22:	b2da      	uxtb	r2, r3
   26c24:	687b      	ldr	r3, [r7, #4]
   26c26:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   26c28:	46c0      	nop			; (mov r8, r8)
   26c2a:	46bd      	mov	sp, r7
   26c2c:	b004      	add	sp, #16
   26c2e:	bd80      	pop	{r7, pc}

00026c30 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   26c30:	b580      	push	{r7, lr}
   26c32:	b084      	sub	sp, #16
   26c34:	af00      	add	r7, sp, #0
   26c36:	6078      	str	r0, [r7, #4]
   26c38:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26c3a:	687b      	ldr	r3, [r7, #4]
   26c3c:	681b      	ldr	r3, [r3, #0]
   26c3e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   26c40:	683b      	ldr	r3, [r7, #0]
   26c42:	881a      	ldrh	r2, [r3, #0]
   26c44:	230e      	movs	r3, #14
   26c46:	18fb      	adds	r3, r7, r3
   26c48:	2108      	movs	r1, #8
   26c4a:	430a      	orrs	r2, r1
   26c4c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   26c4e:	683b      	ldr	r3, [r7, #0]
   26c50:	791b      	ldrb	r3, [r3, #4]
   26c52:	2201      	movs	r2, #1
   26c54:	4053      	eors	r3, r2
   26c56:	b2db      	uxtb	r3, r3
   26c58:	2b00      	cmp	r3, #0
   26c5a:	d007      	beq.n	26c6c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   26c5c:	230e      	movs	r3, #14
   26c5e:	18fb      	adds	r3, r7, r3
   26c60:	220e      	movs	r2, #14
   26c62:	18ba      	adds	r2, r7, r2
   26c64:	8812      	ldrh	r2, [r2, #0]
   26c66:	2140      	movs	r1, #64	; 0x40
   26c68:	430a      	orrs	r2, r1
   26c6a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   26c6c:	683b      	ldr	r3, [r7, #0]
   26c6e:	789b      	ldrb	r3, [r3, #2]
   26c70:	2b00      	cmp	r3, #0
   26c72:	d007      	beq.n	26c84 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   26c74:	230e      	movs	r3, #14
   26c76:	18fb      	adds	r3, r7, r3
   26c78:	220e      	movs	r2, #14
   26c7a:	18ba      	adds	r2, r7, r2
   26c7c:	8812      	ldrh	r2, [r2, #0]
   26c7e:	2180      	movs	r1, #128	; 0x80
   26c80:	430a      	orrs	r2, r1
   26c82:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   26c84:	68bb      	ldr	r3, [r7, #8]
   26c86:	220e      	movs	r2, #14
   26c88:	18ba      	adds	r2, r7, r2
   26c8a:	8812      	ldrh	r2, [r2, #0]
   26c8c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   26c8e:	683b      	ldr	r3, [r7, #0]
   26c90:	78db      	ldrb	r3, [r3, #3]
   26c92:	2b00      	cmp	r3, #0
   26c94:	d008      	beq.n	26ca8 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   26c96:	68bb      	ldr	r3, [r7, #8]
   26c98:	885b      	ldrh	r3, [r3, #2]
   26c9a:	b29b      	uxth	r3, r3
   26c9c:	2280      	movs	r2, #128	; 0x80
   26c9e:	01d2      	lsls	r2, r2, #7
   26ca0:	4313      	orrs	r3, r2
   26ca2:	b29a      	uxth	r2, r3
   26ca4:	68bb      	ldr	r3, [r7, #8]
   26ca6:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   26ca8:	230d      	movs	r3, #13
   26caa:	18fb      	adds	r3, r7, r3
   26cac:	2200      	movs	r2, #0
   26cae:	701a      	strb	r2, [r3, #0]
   26cb0:	e017      	b.n	26ce2 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   26cb2:	230d      	movs	r3, #13
   26cb4:	18fb      	adds	r3, r7, r3
   26cb6:	781a      	ldrb	r2, [r3, #0]
   26cb8:	0013      	movs	r3, r2
   26cba:	009b      	lsls	r3, r3, #2
   26cbc:	189b      	adds	r3, r3, r2
   26cbe:	005b      	lsls	r3, r3, #1
   26cc0:	3308      	adds	r3, #8
   26cc2:	683a      	ldr	r2, [r7, #0]
   26cc4:	18d1      	adds	r1, r2, r3
   26cc6:	230d      	movs	r3, #13
   26cc8:	18fb      	adds	r3, r7, r3
   26cca:	781a      	ldrb	r2, [r3, #0]
   26ccc:	687b      	ldr	r3, [r7, #4]
   26cce:	0018      	movs	r0, r3
   26cd0:	4b08      	ldr	r3, [pc, #32]	; (26cf4 <_rtc_calendar_set_config+0xc4>)
   26cd2:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   26cd4:	230d      	movs	r3, #13
   26cd6:	18fb      	adds	r3, r7, r3
   26cd8:	781a      	ldrb	r2, [r3, #0]
   26cda:	230d      	movs	r3, #13
   26cdc:	18fb      	adds	r3, r7, r3
   26cde:	3201      	adds	r2, #1
   26ce0:	701a      	strb	r2, [r3, #0]
   26ce2:	230d      	movs	r3, #13
   26ce4:	18fb      	adds	r3, r7, r3
   26ce6:	781b      	ldrb	r3, [r3, #0]
   26ce8:	2b00      	cmp	r3, #0
   26cea:	d0e2      	beq.n	26cb2 <_rtc_calendar_set_config+0x82>
	}
}
   26cec:	46c0      	nop			; (mov r8, r8)
   26cee:	46bd      	mov	sp, r7
   26cf0:	b004      	add	sp, #16
   26cf2:	bd80      	pop	{r7, pc}
   26cf4:	00026e19 	.word	0x00026e19

00026cf8 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   26cf8:	b580      	push	{r7, lr}
   26cfa:	b086      	sub	sp, #24
   26cfc:	af00      	add	r7, sp, #0
   26cfe:	60f8      	str	r0, [r7, #12]
   26d00:	60b9      	str	r1, [r7, #8]
   26d02:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   26d04:	68fb      	ldr	r3, [r7, #12]
   26d06:	68ba      	ldr	r2, [r7, #8]
   26d08:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   26d0a:	2120      	movs	r1, #32
   26d0c:	2000      	movs	r0, #0
   26d0e:	4b18      	ldr	r3, [pc, #96]	; (26d70 <rtc_calendar_init+0x78>)
   26d10:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26d12:	2314      	movs	r3, #20
   26d14:	18fb      	adds	r3, r7, r3
   26d16:	0018      	movs	r0, r3
   26d18:	4b16      	ldr	r3, [pc, #88]	; (26d74 <rtc_calendar_init+0x7c>)
   26d1a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   26d1c:	2314      	movs	r3, #20
   26d1e:	18fb      	adds	r3, r7, r3
   26d20:	2202      	movs	r2, #2
   26d22:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   26d24:	2314      	movs	r3, #20
   26d26:	18fb      	adds	r3, r7, r3
   26d28:	0019      	movs	r1, r3
   26d2a:	2004      	movs	r0, #4
   26d2c:	4b12      	ldr	r3, [pc, #72]	; (26d78 <rtc_calendar_init+0x80>)
   26d2e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   26d30:	2004      	movs	r0, #4
   26d32:	4b12      	ldr	r3, [pc, #72]	; (26d7c <rtc_calendar_init+0x84>)
   26d34:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   26d36:	68fb      	ldr	r3, [r7, #12]
   26d38:	0018      	movs	r0, r3
   26d3a:	4b11      	ldr	r3, [pc, #68]	; (26d80 <rtc_calendar_init+0x88>)
   26d3c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   26d3e:	687b      	ldr	r3, [r7, #4]
   26d40:	791a      	ldrb	r2, [r3, #4]
   26d42:	68fb      	ldr	r3, [r7, #12]
   26d44:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   26d46:	687b      	ldr	r3, [r7, #4]
   26d48:	78da      	ldrb	r2, [r3, #3]
   26d4a:	68fb      	ldr	r3, [r7, #12]
   26d4c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   26d4e:	687b      	ldr	r3, [r7, #4]
   26d50:	88da      	ldrh	r2, [r3, #6]
   26d52:	68fb      	ldr	r3, [r7, #12]
   26d54:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   26d56:	4b0b      	ldr	r3, [pc, #44]	; (26d84 <rtc_calendar_init+0x8c>)
   26d58:	68fa      	ldr	r2, [r7, #12]
   26d5a:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   26d5c:	687a      	ldr	r2, [r7, #4]
   26d5e:	68fb      	ldr	r3, [r7, #12]
   26d60:	0011      	movs	r1, r2
   26d62:	0018      	movs	r0, r3
   26d64:	4b08      	ldr	r3, [pc, #32]	; (26d88 <rtc_calendar_init+0x90>)
   26d66:	4798      	blx	r3
}
   26d68:	46c0      	nop			; (mov r8, r8)
   26d6a:	46bd      	mov	sp, r7
   26d6c:	b006      	add	sp, #24
   26d6e:	bd80      	pop	{r7, pc}
   26d70:	00026945 	.word	0x00026945
   26d74:	0002692d 	.word	0x0002692d
   26d78:	00029d5d 	.word	0x00029d5d
   26d7c:	00029da1 	.word	0x00029da1
   26d80:	00026ab9 	.word	0x00026ab9
   26d84:	20005790 	.word	0x20005790
   26d88:	00026c31 	.word	0x00026c31

00026d8c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   26d8c:	b580      	push	{r7, lr}
   26d8e:	b084      	sub	sp, #16
   26d90:	af00      	add	r7, sp, #0
   26d92:	6078      	str	r0, [r7, #4]
   26d94:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26d96:	687b      	ldr	r3, [r7, #4]
   26d98:	681b      	ldr	r3, [r3, #0]
   26d9a:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   26d9c:	687b      	ldr	r3, [r7, #4]
   26d9e:	795b      	ldrb	r3, [r3, #5]
   26da0:	2201      	movs	r2, #1
   26da2:	4053      	eors	r3, r2
   26da4:	b2db      	uxtb	r3, r3
   26da6:	2b00      	cmp	r3, #0
   26da8:	d00a      	beq.n	26dc0 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   26daa:	68fb      	ldr	r3, [r7, #12]
   26dac:	4a16      	ldr	r2, [pc, #88]	; (26e08 <rtc_calendar_get_time+0x7c>)
   26dae:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   26db0:	46c0      	nop			; (mov r8, r8)
   26db2:	687b      	ldr	r3, [r7, #4]
   26db4:	0018      	movs	r0, r3
   26db6:	4b15      	ldr	r3, [pc, #84]	; (26e0c <rtc_calendar_get_time+0x80>)
   26db8:	4798      	blx	r3
   26dba:	1e03      	subs	r3, r0, #0
   26dbc:	d1f9      	bne.n	26db2 <rtc_calendar_get_time+0x26>
   26dbe:	e016      	b.n	26dee <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   26dc0:	68fb      	ldr	r3, [r7, #12]
   26dc2:	885b      	ldrh	r3, [r3, #2]
   26dc4:	b29b      	uxth	r3, r3
   26dc6:	001a      	movs	r2, r3
   26dc8:	2380      	movs	r3, #128	; 0x80
   26dca:	01db      	lsls	r3, r3, #7
   26dcc:	4013      	ands	r3, r2
   26dce:	d10e      	bne.n	26dee <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   26dd0:	68fb      	ldr	r3, [r7, #12]
   26dd2:	885b      	ldrh	r3, [r3, #2]
   26dd4:	b29b      	uxth	r3, r3
   26dd6:	4a0e      	ldr	r2, [pc, #56]	; (26e10 <rtc_calendar_get_time+0x84>)
   26dd8:	4313      	orrs	r3, r2
   26dda:	b29a      	uxth	r2, r3
   26ddc:	68fb      	ldr	r3, [r7, #12]
   26dde:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   26de0:	46c0      	nop			; (mov r8, r8)
   26de2:	687b      	ldr	r3, [r7, #4]
   26de4:	0018      	movs	r0, r3
   26de6:	4b09      	ldr	r3, [pc, #36]	; (26e0c <rtc_calendar_get_time+0x80>)
   26de8:	4798      	blx	r3
   26dea:	1e03      	subs	r3, r0, #0
   26dec:	d1f9      	bne.n	26de2 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   26dee:	68fb      	ldr	r3, [r7, #12]
   26df0:	691b      	ldr	r3, [r3, #16]
   26df2:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   26df4:	683a      	ldr	r2, [r7, #0]
   26df6:	68b9      	ldr	r1, [r7, #8]
   26df8:	687b      	ldr	r3, [r7, #4]
   26dfa:	0018      	movs	r0, r3
   26dfc:	4b05      	ldr	r3, [pc, #20]	; (26e14 <rtc_calendar_get_time+0x88>)
   26dfe:	4798      	blx	r3
}
   26e00:	46c0      	nop			; (mov r8, r8)
   26e02:	46bd      	mov	sp, r7
   26e04:	b004      	add	sp, #16
   26e06:	bd80      	pop	{r7, pc}
   26e08:	ffff8000 	.word	0xffff8000
   26e0c:	000269fd 	.word	0x000269fd
   26e10:	ffffc000 	.word	0xffffc000
   26e14:	00026b91 	.word	0x00026b91

00026e18 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   26e18:	b580      	push	{r7, lr}
   26e1a:	b086      	sub	sp, #24
   26e1c:	af00      	add	r7, sp, #0
   26e1e:	60f8      	str	r0, [r7, #12]
   26e20:	60b9      	str	r1, [r7, #8]
   26e22:	1dfb      	adds	r3, r7, #7
   26e24:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26e26:	68fb      	ldr	r3, [r7, #12]
   26e28:	681b      	ldr	r3, [r3, #0]
   26e2a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   26e2c:	1dfb      	adds	r3, r7, #7
   26e2e:	781b      	ldrb	r3, [r3, #0]
   26e30:	2b01      	cmp	r3, #1
   26e32:	d901      	bls.n	26e38 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   26e34:	2317      	movs	r3, #23
   26e36:	e021      	b.n	26e7c <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   26e38:	68ba      	ldr	r2, [r7, #8]
   26e3a:	68fb      	ldr	r3, [r7, #12]
   26e3c:	0011      	movs	r1, r2
   26e3e:	0018      	movs	r0, r3
   26e40:	4b10      	ldr	r3, [pc, #64]	; (26e84 <rtc_calendar_set_alarm+0x6c>)
   26e42:	4798      	blx	r3
   26e44:	0003      	movs	r3, r0
   26e46:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   26e48:	46c0      	nop			; (mov r8, r8)
   26e4a:	68fb      	ldr	r3, [r7, #12]
   26e4c:	0018      	movs	r0, r3
   26e4e:	4b0e      	ldr	r3, [pc, #56]	; (26e88 <rtc_calendar_set_alarm+0x70>)
   26e50:	4798      	blx	r3
   26e52:	1e03      	subs	r3, r0, #0
   26e54:	d1f9      	bne.n	26e4a <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   26e56:	1dfb      	adds	r3, r7, #7
   26e58:	781a      	ldrb	r2, [r3, #0]
   26e5a:	697b      	ldr	r3, [r7, #20]
   26e5c:	3203      	adds	r2, #3
   26e5e:	00d2      	lsls	r2, r2, #3
   26e60:	6939      	ldr	r1, [r7, #16]
   26e62:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   26e64:	1dfb      	adds	r3, r7, #7
   26e66:	781b      	ldrb	r3, [r3, #0]
   26e68:	68ba      	ldr	r2, [r7, #8]
   26e6a:	7a11      	ldrb	r1, [r2, #8]
   26e6c:	697a      	ldr	r2, [r7, #20]
   26e6e:	3303      	adds	r3, #3
   26e70:	00db      	lsls	r3, r3, #3
   26e72:	18d3      	adds	r3, r2, r3
   26e74:	3304      	adds	r3, #4
   26e76:	1c0a      	adds	r2, r1, #0
   26e78:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   26e7a:	2300      	movs	r3, #0
}
   26e7c:	0018      	movs	r0, r3
   26e7e:	46bd      	mov	sp, r7
   26e80:	b006      	add	sp, #24
   26e82:	bd80      	pop	{r7, pc}
   26e84:	00026b09 	.word	0x00026b09
   26e88:	000269fd 	.word	0x000269fd

00026e8c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   26e8c:	b580      	push	{r7, lr}
   26e8e:	b086      	sub	sp, #24
   26e90:	af00      	add	r7, sp, #0
   26e92:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   26e94:	4b28      	ldr	r3, [pc, #160]	; (26f38 <_rtc_interrupt_handler+0xac>)
   26e96:	687a      	ldr	r2, [r7, #4]
   26e98:	0092      	lsls	r2, r2, #2
   26e9a:	58d3      	ldr	r3, [r2, r3]
   26e9c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   26e9e:	697b      	ldr	r3, [r7, #20]
   26ea0:	681b      	ldr	r3, [r3, #0]
   26ea2:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   26ea4:	230e      	movs	r3, #14
   26ea6:	18fb      	adds	r3, r7, r3
   26ea8:	697a      	ldr	r2, [r7, #20]
   26eaa:	8a52      	ldrh	r2, [r2, #18]
   26eac:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   26eae:	697b      	ldr	r3, [r7, #20]
   26eb0:	8a1b      	ldrh	r3, [r3, #16]
   26eb2:	b29a      	uxth	r2, r3
   26eb4:	230e      	movs	r3, #14
   26eb6:	18fb      	adds	r3, r7, r3
   26eb8:	210e      	movs	r1, #14
   26eba:	1879      	adds	r1, r7, r1
   26ebc:	8809      	ldrh	r1, [r1, #0]
   26ebe:	400a      	ands	r2, r1
   26ec0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   26ec2:	693b      	ldr	r3, [r7, #16]
   26ec4:	7a1b      	ldrb	r3, [r3, #8]
   26ec6:	b2da      	uxtb	r2, r3
   26ec8:	230c      	movs	r3, #12
   26eca:	18fb      	adds	r3, r7, r3
   26ecc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   26ece:	693b      	ldr	r3, [r7, #16]
   26ed0:	79db      	ldrb	r3, [r3, #7]
   26ed2:	b2db      	uxtb	r3, r3
   26ed4:	b29a      	uxth	r2, r3
   26ed6:	230c      	movs	r3, #12
   26ed8:	18fb      	adds	r3, r7, r3
   26eda:	210c      	movs	r1, #12
   26edc:	1879      	adds	r1, r7, r1
   26ede:	8809      	ldrh	r1, [r1, #0]
   26ee0:	400a      	ands	r2, r1
   26ee2:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   26ee4:	230c      	movs	r3, #12
   26ee6:	18fb      	adds	r3, r7, r3
   26ee8:	881b      	ldrh	r3, [r3, #0]
   26eea:	2280      	movs	r2, #128	; 0x80
   26eec:	4013      	ands	r3, r2
   26eee:	d00c      	beq.n	26f0a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   26ef0:	230e      	movs	r3, #14
   26ef2:	18fb      	adds	r3, r7, r3
   26ef4:	881b      	ldrh	r3, [r3, #0]
   26ef6:	2202      	movs	r2, #2
   26ef8:	4013      	ands	r3, r2
   26efa:	d002      	beq.n	26f02 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   26efc:	697b      	ldr	r3, [r7, #20]
   26efe:	68db      	ldr	r3, [r3, #12]
   26f00:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   26f02:	693b      	ldr	r3, [r7, #16]
   26f04:	2280      	movs	r2, #128	; 0x80
   26f06:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   26f08:	e011      	b.n	26f2e <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   26f0a:	230c      	movs	r3, #12
   26f0c:	18fb      	adds	r3, r7, r3
   26f0e:	881b      	ldrh	r3, [r3, #0]
   26f10:	2201      	movs	r2, #1
   26f12:	4013      	ands	r3, r2
   26f14:	d00b      	beq.n	26f2e <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   26f16:	230e      	movs	r3, #14
   26f18:	18fb      	adds	r3, r7, r3
   26f1a:	881b      	ldrh	r3, [r3, #0]
   26f1c:	2201      	movs	r2, #1
   26f1e:	4013      	ands	r3, r2
   26f20:	d002      	beq.n	26f28 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   26f22:	697b      	ldr	r3, [r7, #20]
   26f24:	689b      	ldr	r3, [r3, #8]
   26f26:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   26f28:	693b      	ldr	r3, [r7, #16]
   26f2a:	2201      	movs	r2, #1
   26f2c:	721a      	strb	r2, [r3, #8]
}
   26f2e:	46c0      	nop			; (mov r8, r8)
   26f30:	46bd      	mov	sp, r7
   26f32:	b006      	add	sp, #24
   26f34:	bd80      	pop	{r7, pc}
   26f36:	46c0      	nop			; (mov r8, r8)
   26f38:	20005790 	.word	0x20005790

00026f3c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   26f3c:	b580      	push	{r7, lr}
   26f3e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   26f40:	2000      	movs	r0, #0
   26f42:	4b02      	ldr	r3, [pc, #8]	; (26f4c <RTC_Handler+0x10>)
   26f44:	4798      	blx	r3
}
   26f46:	46c0      	nop			; (mov r8, r8)
   26f48:	46bd      	mov	sp, r7
   26f4a:	bd80      	pop	{r7, pc}
   26f4c:	00026e8d 	.word	0x00026e8d

00026f50 <system_gclk_chan_get_config_defaults>:
{
   26f50:	b580      	push	{r7, lr}
   26f52:	b082      	sub	sp, #8
   26f54:	af00      	add	r7, sp, #0
   26f56:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26f58:	687b      	ldr	r3, [r7, #4]
   26f5a:	2200      	movs	r2, #0
   26f5c:	701a      	strb	r2, [r3, #0]
}
   26f5e:	46c0      	nop			; (mov r8, r8)
   26f60:	46bd      	mov	sp, r7
   26f62:	b002      	add	sp, #8
   26f64:	bd80      	pop	{r7, pc}

00026f66 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   26f66:	b5f0      	push	{r4, r5, r6, r7, lr}
   26f68:	b08d      	sub	sp, #52	; 0x34
   26f6a:	af00      	add	r7, sp, #0
   26f6c:	60b8      	str	r0, [r7, #8]
   26f6e:	60f9      	str	r1, [r7, #12]
   26f70:	603a      	str	r2, [r7, #0]
   26f72:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   26f74:	2300      	movs	r3, #0
   26f76:	2400      	movs	r4, #0
   26f78:	623b      	str	r3, [r7, #32]
   26f7a:	627c      	str	r4, [r7, #36]	; 0x24
   26f7c:	2300      	movs	r3, #0
   26f7e:	2400      	movs	r4, #0
   26f80:	61bb      	str	r3, [r7, #24]
   26f82:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   26f84:	233f      	movs	r3, #63	; 0x3f
   26f86:	62fb      	str	r3, [r7, #44]	; 0x2c
   26f88:	e053      	b.n	27032 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   26f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26f8c:	3b20      	subs	r3, #32
   26f8e:	2b00      	cmp	r3, #0
   26f90:	db04      	blt.n	26f9c <long_division+0x36>
   26f92:	2201      	movs	r2, #1
   26f94:	409a      	lsls	r2, r3
   26f96:	0013      	movs	r3, r2
   26f98:	617b      	str	r3, [r7, #20]
   26f9a:	e00b      	b.n	26fb4 <long_division+0x4e>
   26f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26f9e:	2220      	movs	r2, #32
   26fa0:	1ad3      	subs	r3, r2, r3
   26fa2:	2201      	movs	r2, #1
   26fa4:	40da      	lsrs	r2, r3
   26fa6:	0013      	movs	r3, r2
   26fa8:	2100      	movs	r1, #0
   26faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   26fac:	4091      	lsls	r1, r2
   26fae:	000a      	movs	r2, r1
   26fb0:	4313      	orrs	r3, r2
   26fb2:	617b      	str	r3, [r7, #20]
   26fb4:	2201      	movs	r2, #1
   26fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26fb8:	409a      	lsls	r2, r3
   26fba:	0013      	movs	r3, r2
   26fbc:	613b      	str	r3, [r7, #16]

		r = r << 1;
   26fbe:	69bb      	ldr	r3, [r7, #24]
   26fc0:	69fc      	ldr	r4, [r7, #28]
   26fc2:	18db      	adds	r3, r3, r3
   26fc4:	4164      	adcs	r4, r4
   26fc6:	61bb      	str	r3, [r7, #24]
   26fc8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   26fca:	68bb      	ldr	r3, [r7, #8]
   26fcc:	693a      	ldr	r2, [r7, #16]
   26fce:	401a      	ands	r2, r3
   26fd0:	0015      	movs	r5, r2
   26fd2:	68fb      	ldr	r3, [r7, #12]
   26fd4:	697a      	ldr	r2, [r7, #20]
   26fd6:	401a      	ands	r2, r3
   26fd8:	0016      	movs	r6, r2
   26fda:	002b      	movs	r3, r5
   26fdc:	4333      	orrs	r3, r6
   26fde:	d007      	beq.n	26ff0 <long_division+0x8a>
			r |= 0x01;
   26fe0:	69bb      	ldr	r3, [r7, #24]
   26fe2:	2201      	movs	r2, #1
   26fe4:	4313      	orrs	r3, r2
   26fe6:	61bb      	str	r3, [r7, #24]
   26fe8:	69fb      	ldr	r3, [r7, #28]
   26fea:	2200      	movs	r2, #0
   26fec:	4313      	orrs	r3, r2
   26fee:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   26ff0:	687a      	ldr	r2, [r7, #4]
   26ff2:	69fb      	ldr	r3, [r7, #28]
   26ff4:	429a      	cmp	r2, r3
   26ff6:	d819      	bhi.n	2702c <long_division+0xc6>
   26ff8:	687a      	ldr	r2, [r7, #4]
   26ffa:	69fb      	ldr	r3, [r7, #28]
   26ffc:	429a      	cmp	r2, r3
   26ffe:	d103      	bne.n	27008 <long_division+0xa2>
   27000:	683a      	ldr	r2, [r7, #0]
   27002:	69bb      	ldr	r3, [r7, #24]
   27004:	429a      	cmp	r2, r3
   27006:	d811      	bhi.n	2702c <long_division+0xc6>
			r = r - d;
   27008:	69b9      	ldr	r1, [r7, #24]
   2700a:	69fa      	ldr	r2, [r7, #28]
   2700c:	683b      	ldr	r3, [r7, #0]
   2700e:	687c      	ldr	r4, [r7, #4]
   27010:	1ac9      	subs	r1, r1, r3
   27012:	41a2      	sbcs	r2, r4
   27014:	000b      	movs	r3, r1
   27016:	0014      	movs	r4, r2
   27018:	61bb      	str	r3, [r7, #24]
   2701a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   2701c:	6a3a      	ldr	r2, [r7, #32]
   2701e:	693b      	ldr	r3, [r7, #16]
   27020:	4313      	orrs	r3, r2
   27022:	623b      	str	r3, [r7, #32]
   27024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27026:	697b      	ldr	r3, [r7, #20]
   27028:	4313      	orrs	r3, r2
   2702a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   2702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2702e:	3b01      	subs	r3, #1
   27030:	62fb      	str	r3, [r7, #44]	; 0x2c
   27032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27034:	2b00      	cmp	r3, #0
   27036:	daa8      	bge.n	26f8a <long_division+0x24>
		}
	}

	return q;
   27038:	6a3b      	ldr	r3, [r7, #32]
   2703a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   2703c:	0018      	movs	r0, r3
   2703e:	0021      	movs	r1, r4
   27040:	46bd      	mov	sp, r7
   27042:	b00d      	add	sp, #52	; 0x34
   27044:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027046 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   27046:	b580      	push	{r7, lr}
   27048:	b086      	sub	sp, #24
   2704a:	af00      	add	r7, sp, #0
   2704c:	60f8      	str	r0, [r7, #12]
   2704e:	60b9      	str	r1, [r7, #8]
   27050:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   27052:	2316      	movs	r3, #22
   27054:	18fb      	adds	r3, r7, r3
   27056:	2200      	movs	r2, #0
   27058:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   2705a:	68bb      	ldr	r3, [r7, #8]
   2705c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   2705e:	68bb      	ldr	r3, [r7, #8]
   27060:	085a      	lsrs	r2, r3, #1
   27062:	68fb      	ldr	r3, [r7, #12]
   27064:	429a      	cmp	r2, r3
   27066:	d201      	bcs.n	2706c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27068:	2340      	movs	r3, #64	; 0x40
   2706a:	e026      	b.n	270ba <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   2706c:	68bb      	ldr	r3, [r7, #8]
   2706e:	085b      	lsrs	r3, r3, #1
   27070:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   27072:	e00a      	b.n	2708a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   27074:	693a      	ldr	r2, [r7, #16]
   27076:	68fb      	ldr	r3, [r7, #12]
   27078:	1ad3      	subs	r3, r2, r3
   2707a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   2707c:	2316      	movs	r3, #22
   2707e:	18fb      	adds	r3, r7, r3
   27080:	881a      	ldrh	r2, [r3, #0]
   27082:	2316      	movs	r3, #22
   27084:	18fb      	adds	r3, r7, r3
   27086:	3201      	adds	r2, #1
   27088:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   2708a:	693a      	ldr	r2, [r7, #16]
   2708c:	68fb      	ldr	r3, [r7, #12]
   2708e:	429a      	cmp	r2, r3
   27090:	d2f0      	bcs.n	27074 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   27092:	2316      	movs	r3, #22
   27094:	18fb      	adds	r3, r7, r3
   27096:	2216      	movs	r2, #22
   27098:	18ba      	adds	r2, r7, r2
   2709a:	8812      	ldrh	r2, [r2, #0]
   2709c:	3a01      	subs	r2, #1
   2709e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   270a0:	2316      	movs	r3, #22
   270a2:	18fb      	adds	r3, r7, r3
   270a4:	881b      	ldrh	r3, [r3, #0]
   270a6:	2bff      	cmp	r3, #255	; 0xff
   270a8:	d901      	bls.n	270ae <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   270aa:	2340      	movs	r3, #64	; 0x40
   270ac:	e005      	b.n	270ba <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   270ae:	687b      	ldr	r3, [r7, #4]
   270b0:	2216      	movs	r2, #22
   270b2:	18ba      	adds	r2, r7, r2
   270b4:	8812      	ldrh	r2, [r2, #0]
   270b6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   270b8:	2300      	movs	r3, #0
	}
}
   270ba:	0018      	movs	r0, r3
   270bc:	46bd      	mov	sp, r7
   270be:	b006      	add	sp, #24
   270c0:	bd80      	pop	{r7, pc}
	...

000270c4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   270c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   270c6:	b0a1      	sub	sp, #132	; 0x84
   270c8:	af00      	add	r7, sp, #0
   270ca:	64f8      	str	r0, [r7, #76]	; 0x4c
   270cc:	64b9      	str	r1, [r7, #72]	; 0x48
   270ce:	647a      	str	r2, [r7, #68]	; 0x44
   270d0:	2243      	movs	r2, #67	; 0x43
   270d2:	18ba      	adds	r2, r7, r2
   270d4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   270d6:	2300      	movs	r3, #0
   270d8:	2400      	movs	r4, #0
   270da:	673b      	str	r3, [r7, #112]	; 0x70
   270dc:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   270de:	2300      	movs	r3, #0
   270e0:	2400      	movs	r4, #0
   270e2:	66bb      	str	r3, [r7, #104]	; 0x68
   270e4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   270e6:	2300      	movs	r3, #0
   270e8:	2400      	movs	r4, #0
   270ea:	67bb      	str	r3, [r7, #120]	; 0x78
   270ec:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   270ee:	2300      	movs	r3, #0
   270f0:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   270f2:	2358      	movs	r3, #88	; 0x58
   270f4:	2240      	movs	r2, #64	; 0x40
   270f6:	4694      	mov	ip, r2
   270f8:	44bc      	add	ip, r7
   270fa:	4463      	add	r3, ip
   270fc:	781a      	ldrb	r2, [r3, #0]
   270fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27100:	435a      	muls	r2, r3
   27102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27104:	429a      	cmp	r2, r3
   27106:	d901      	bls.n	2710c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27108:	2340      	movs	r3, #64	; 0x40
   2710a:	e0b3      	b.n	27274 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   2710c:	2343      	movs	r3, #67	; 0x43
   2710e:	18fb      	adds	r3, r7, r3
   27110:	781b      	ldrb	r3, [r3, #0]
   27112:	2b00      	cmp	r3, #0
   27114:	d13d      	bne.n	27192 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   27116:	2358      	movs	r3, #88	; 0x58
   27118:	2240      	movs	r2, #64	; 0x40
   2711a:	4694      	mov	ip, r2
   2711c:	44bc      	add	ip, r7
   2711e:	4463      	add	r3, ip
   27120:	781b      	ldrb	r3, [r3, #0]
   27122:	b2db      	uxtb	r3, r3
   27124:	613b      	str	r3, [r7, #16]
   27126:	2300      	movs	r3, #0
   27128:	617b      	str	r3, [r7, #20]
   2712a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2712c:	60bb      	str	r3, [r7, #8]
   2712e:	2300      	movs	r3, #0
   27130:	60fb      	str	r3, [r7, #12]
   27132:	4c52      	ldr	r4, [pc, #328]	; (2727c <_sercom_get_async_baud_val+0x1b8>)
   27134:	68ba      	ldr	r2, [r7, #8]
   27136:	68fb      	ldr	r3, [r7, #12]
   27138:	6938      	ldr	r0, [r7, #16]
   2713a:	6979      	ldr	r1, [r7, #20]
   2713c:	47a0      	blx	r4
   2713e:	0003      	movs	r3, r0
   27140:	000c      	movs	r4, r1
   27142:	001b      	movs	r3, r3
   27144:	65fb      	str	r3, [r7, #92]	; 0x5c
   27146:	2300      	movs	r3, #0
   27148:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   2714a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2714c:	603b      	str	r3, [r7, #0]
   2714e:	2300      	movs	r3, #0
   27150:	607b      	str	r3, [r7, #4]
   27152:	6db8      	ldr	r0, [r7, #88]	; 0x58
   27154:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   27156:	683a      	ldr	r2, [r7, #0]
   27158:	687b      	ldr	r3, [r7, #4]
   2715a:	4c49      	ldr	r4, [pc, #292]	; (27280 <_sercom_get_async_baud_val+0x1bc>)
   2715c:	47a0      	blx	r4
   2715e:	0003      	movs	r3, r0
   27160:	000c      	movs	r4, r1
   27162:	673b      	str	r3, [r7, #112]	; 0x70
   27164:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   27166:	2100      	movs	r1, #0
   27168:	2201      	movs	r2, #1
   2716a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2716c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   2716e:	1ac9      	subs	r1, r1, r3
   27170:	41a2      	sbcs	r2, r4
   27172:	000b      	movs	r3, r1
   27174:	0014      	movs	r4, r2
   27176:	66bb      	str	r3, [r7, #104]	; 0x68
   27178:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   2717a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2717c:	0c1b      	lsrs	r3, r3, #16
   2717e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   27180:	0416      	lsls	r6, r2, #16
   27182:	431e      	orrs	r6, r3
   27184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27186:	041d      	lsls	r5, r3, #16
   27188:	0033      	movs	r3, r6
   2718a:	67bb      	str	r3, [r7, #120]	; 0x78
   2718c:	2300      	movs	r3, #0
   2718e:	67fb      	str	r3, [r7, #124]	; 0x7c
   27190:	e06a      	b.n	27268 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   27192:	2343      	movs	r3, #67	; 0x43
   27194:	18fb      	adds	r3, r7, r3
   27196:	781b      	ldrb	r3, [r3, #0]
   27198:	2b01      	cmp	r3, #1
   2719a:	d165      	bne.n	27268 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   2719c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2719e:	633b      	str	r3, [r7, #48]	; 0x30
   271a0:	2300      	movs	r3, #0
   271a2:	637b      	str	r3, [r7, #52]	; 0x34
   271a4:	2358      	movs	r3, #88	; 0x58
   271a6:	2240      	movs	r2, #64	; 0x40
   271a8:	4694      	mov	ip, r2
   271aa:	44bc      	add	ip, r7
   271ac:	4463      	add	r3, ip
   271ae:	781b      	ldrb	r3, [r3, #0]
   271b0:	b2db      	uxtb	r3, r3
   271b2:	62bb      	str	r3, [r7, #40]	; 0x28
   271b4:	2300      	movs	r3, #0
   271b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   271b8:	4c30      	ldr	r4, [pc, #192]	; (2727c <_sercom_get_async_baud_val+0x1b8>)
   271ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   271bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   271be:	6b38      	ldr	r0, [r7, #48]	; 0x30
   271c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   271c2:	47a0      	blx	r4
   271c4:	0003      	movs	r3, r0
   271c6:	000c      	movs	r4, r1
   271c8:	65bb      	str	r3, [r7, #88]	; 0x58
   271ca:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   271cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   271ce:	623b      	str	r3, [r7, #32]
   271d0:	2300      	movs	r3, #0
   271d2:	627b      	str	r3, [r7, #36]	; 0x24
   271d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   271d6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   271d8:	001a      	movs	r2, r3
   271da:	0023      	movs	r3, r4
   271dc:	6a38      	ldr	r0, [r7, #32]
   271de:	6a79      	ldr	r1, [r7, #36]	; 0x24
   271e0:	4c27      	ldr	r4, [pc, #156]	; (27280 <_sercom_get_async_baud_val+0x1bc>)
   271e2:	47a0      	blx	r4
   271e4:	0003      	movs	r3, r0
   271e6:	000c      	movs	r4, r1
   271e8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   271ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   271ec:	2380      	movs	r3, #128	; 0x80
   271ee:	019b      	lsls	r3, r3, #6
   271f0:	429a      	cmp	r2, r3
   271f2:	d901      	bls.n	271f8 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   271f4:	2340      	movs	r3, #64	; 0x40
   271f6:	e03d      	b.n	27274 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   271f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   271fa:	61bb      	str	r3, [r7, #24]
   271fc:	2300      	movs	r3, #0
   271fe:	61fb      	str	r3, [r7, #28]
   27200:	69b9      	ldr	r1, [r7, #24]
   27202:	69fa      	ldr	r2, [r7, #28]
   27204:	000b      	movs	r3, r1
   27206:	0f5b      	lsrs	r3, r3, #29
   27208:	0010      	movs	r0, r2
   2720a:	00c0      	lsls	r0, r0, #3
   2720c:	63f8      	str	r0, [r7, #60]	; 0x3c
   2720e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   27210:	4318      	orrs	r0, r3
   27212:	63f8      	str	r0, [r7, #60]	; 0x3c
   27214:	000b      	movs	r3, r1
   27216:	00db      	lsls	r3, r3, #3
   27218:	63bb      	str	r3, [r7, #56]	; 0x38
   2721a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2721c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2721e:	001a      	movs	r2, r3
   27220:	0023      	movs	r3, r4
   27222:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   27224:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   27226:	4c16      	ldr	r4, [pc, #88]	; (27280 <_sercom_get_async_baud_val+0x1bc>)
   27228:	47a0      	blx	r4
   2722a:	0003      	movs	r3, r0
   2722c:	000c      	movs	r4, r1
   2722e:	65bb      	str	r3, [r7, #88]	; 0x58
   27230:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   27232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27234:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27236:	b2d9      	uxtb	r1, r3
   27238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2723a:	b2db      	uxtb	r3, r3
   2723c:	00db      	lsls	r3, r3, #3
   2723e:	b2da      	uxtb	r2, r3
   27240:	2317      	movs	r3, #23
   27242:	2040      	movs	r0, #64	; 0x40
   27244:	4684      	mov	ip, r0
   27246:	44bc      	add	ip, r7
   27248:	4463      	add	r3, ip
   2724a:	1a8a      	subs	r2, r1, r2
   2724c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   2724e:	2317      	movs	r3, #23
   27250:	2240      	movs	r2, #64	; 0x40
   27252:	4694      	mov	ip, r2
   27254:	44bc      	add	ip, r7
   27256:	4463      	add	r3, ip
   27258:	781b      	ldrb	r3, [r3, #0]
   2725a:	035b      	lsls	r3, r3, #13
   2725c:	001a      	movs	r2, r3
   2725e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   27260:	4313      	orrs	r3, r2
   27262:	67bb      	str	r3, [r7, #120]	; 0x78
   27264:	2300      	movs	r3, #0
   27266:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   27268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   2726a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   2726c:	b29a      	uxth	r2, r3
   2726e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   27270:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   27272:	2300      	movs	r3, #0
}
   27274:	0018      	movs	r0, r3
   27276:	46bd      	mov	sp, r7
   27278:	b021      	add	sp, #132	; 0x84
   2727a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2727c:	00032bb1 	.word	0x00032bb1
   27280:	00026f67 	.word	0x00026f67

00027284 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   27284:	b580      	push	{r7, lr}
   27286:	b084      	sub	sp, #16
   27288:	af00      	add	r7, sp, #0
   2728a:	0002      	movs	r2, r0
   2728c:	1dfb      	adds	r3, r7, #7
   2728e:	701a      	strb	r2, [r3, #0]
   27290:	1dbb      	adds	r3, r7, #6
   27292:	1c0a      	adds	r2, r1, #0
   27294:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   27296:	4b1a      	ldr	r3, [pc, #104]	; (27300 <sercom_set_gclk_generator+0x7c>)
   27298:	781b      	ldrb	r3, [r3, #0]
   2729a:	2201      	movs	r2, #1
   2729c:	4053      	eors	r3, r2
   2729e:	b2db      	uxtb	r3, r3
   272a0:	2b00      	cmp	r3, #0
   272a2:	d103      	bne.n	272ac <sercom_set_gclk_generator+0x28>
   272a4:	1dbb      	adds	r3, r7, #6
   272a6:	781b      	ldrb	r3, [r3, #0]
   272a8:	2b00      	cmp	r3, #0
   272aa:	d01b      	beq.n	272e4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   272ac:	230c      	movs	r3, #12
   272ae:	18fb      	adds	r3, r7, r3
   272b0:	0018      	movs	r0, r3
   272b2:	4b14      	ldr	r3, [pc, #80]	; (27304 <sercom_set_gclk_generator+0x80>)
   272b4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   272b6:	230c      	movs	r3, #12
   272b8:	18fb      	adds	r3, r7, r3
   272ba:	1dfa      	adds	r2, r7, #7
   272bc:	7812      	ldrb	r2, [r2, #0]
   272be:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   272c0:	230c      	movs	r3, #12
   272c2:	18fb      	adds	r3, r7, r3
   272c4:	0019      	movs	r1, r3
   272c6:	2013      	movs	r0, #19
   272c8:	4b0f      	ldr	r3, [pc, #60]	; (27308 <sercom_set_gclk_generator+0x84>)
   272ca:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   272cc:	2013      	movs	r0, #19
   272ce:	4b0f      	ldr	r3, [pc, #60]	; (2730c <sercom_set_gclk_generator+0x88>)
   272d0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   272d2:	4b0b      	ldr	r3, [pc, #44]	; (27300 <sercom_set_gclk_generator+0x7c>)
   272d4:	1dfa      	adds	r2, r7, #7
   272d6:	7812      	ldrb	r2, [r2, #0]
   272d8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   272da:	4b09      	ldr	r3, [pc, #36]	; (27300 <sercom_set_gclk_generator+0x7c>)
   272dc:	2201      	movs	r2, #1
   272de:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   272e0:	2300      	movs	r3, #0
   272e2:	e008      	b.n	272f6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   272e4:	4b06      	ldr	r3, [pc, #24]	; (27300 <sercom_set_gclk_generator+0x7c>)
   272e6:	785b      	ldrb	r3, [r3, #1]
   272e8:	1dfa      	adds	r2, r7, #7
   272ea:	7812      	ldrb	r2, [r2, #0]
   272ec:	429a      	cmp	r2, r3
   272ee:	d101      	bne.n	272f4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   272f0:	2300      	movs	r3, #0
   272f2:	e000      	b.n	272f6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   272f4:	231d      	movs	r3, #29
}
   272f6:	0018      	movs	r0, r3
   272f8:	46bd      	mov	sp, r7
   272fa:	b004      	add	sp, #16
   272fc:	bd80      	pop	{r7, pc}
   272fe:	46c0      	nop			; (mov r8, r8)
   27300:	20003eac 	.word	0x20003eac
   27304:	00026f51 	.word	0x00026f51
   27308:	00029d5d 	.word	0x00029d5d
   2730c:	00029da1 	.word	0x00029da1

00027310 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   27310:	b580      	push	{r7, lr}
   27312:	b082      	sub	sp, #8
   27314:	af00      	add	r7, sp, #0
   27316:	6078      	str	r0, [r7, #4]
   27318:	000a      	movs	r2, r1
   2731a:	1cfb      	adds	r3, r7, #3
   2731c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   2731e:	687b      	ldr	r3, [r7, #4]
   27320:	4a4d      	ldr	r2, [pc, #308]	; (27458 <_sercom_get_default_pad+0x148>)
   27322:	4293      	cmp	r3, r2
   27324:	d03f      	beq.n	273a6 <_sercom_get_default_pad+0x96>
   27326:	4a4c      	ldr	r2, [pc, #304]	; (27458 <_sercom_get_default_pad+0x148>)
   27328:	4293      	cmp	r3, r2
   2732a:	d806      	bhi.n	2733a <_sercom_get_default_pad+0x2a>
   2732c:	4a4b      	ldr	r2, [pc, #300]	; (2745c <_sercom_get_default_pad+0x14c>)
   2732e:	4293      	cmp	r3, r2
   27330:	d00f      	beq.n	27352 <_sercom_get_default_pad+0x42>
   27332:	4a4b      	ldr	r2, [pc, #300]	; (27460 <_sercom_get_default_pad+0x150>)
   27334:	4293      	cmp	r3, r2
   27336:	d021      	beq.n	2737c <_sercom_get_default_pad+0x6c>
   27338:	e089      	b.n	2744e <_sercom_get_default_pad+0x13e>
   2733a:	4a4a      	ldr	r2, [pc, #296]	; (27464 <_sercom_get_default_pad+0x154>)
   2733c:	4293      	cmp	r3, r2
   2733e:	d100      	bne.n	27342 <_sercom_get_default_pad+0x32>
   27340:	e05b      	b.n	273fa <_sercom_get_default_pad+0xea>
   27342:	4a49      	ldr	r2, [pc, #292]	; (27468 <_sercom_get_default_pad+0x158>)
   27344:	4293      	cmp	r3, r2
   27346:	d100      	bne.n	2734a <_sercom_get_default_pad+0x3a>
   27348:	e06c      	b.n	27424 <_sercom_get_default_pad+0x114>
   2734a:	4a48      	ldr	r2, [pc, #288]	; (2746c <_sercom_get_default_pad+0x15c>)
   2734c:	4293      	cmp	r3, r2
   2734e:	d03f      	beq.n	273d0 <_sercom_get_default_pad+0xc0>
   27350:	e07d      	b.n	2744e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   27352:	1cfb      	adds	r3, r7, #3
   27354:	781b      	ldrb	r3, [r3, #0]
   27356:	2b01      	cmp	r3, #1
   27358:	d00a      	beq.n	27370 <_sercom_get_default_pad+0x60>
   2735a:	dc02      	bgt.n	27362 <_sercom_get_default_pad+0x52>
   2735c:	2b00      	cmp	r3, #0
   2735e:	d005      	beq.n	2736c <_sercom_get_default_pad+0x5c>
   27360:	e075      	b.n	2744e <_sercom_get_default_pad+0x13e>
   27362:	2b02      	cmp	r3, #2
   27364:	d006      	beq.n	27374 <_sercom_get_default_pad+0x64>
   27366:	2b03      	cmp	r3, #3
   27368:	d006      	beq.n	27378 <_sercom_get_default_pad+0x68>
   2736a:	e070      	b.n	2744e <_sercom_get_default_pad+0x13e>
   2736c:	4b40      	ldr	r3, [pc, #256]	; (27470 <_sercom_get_default_pad+0x160>)
   2736e:	e06f      	b.n	27450 <_sercom_get_default_pad+0x140>
   27370:	4b40      	ldr	r3, [pc, #256]	; (27474 <_sercom_get_default_pad+0x164>)
   27372:	e06d      	b.n	27450 <_sercom_get_default_pad+0x140>
   27374:	4b40      	ldr	r3, [pc, #256]	; (27478 <_sercom_get_default_pad+0x168>)
   27376:	e06b      	b.n	27450 <_sercom_get_default_pad+0x140>
   27378:	4b40      	ldr	r3, [pc, #256]	; (2747c <_sercom_get_default_pad+0x16c>)
   2737a:	e069      	b.n	27450 <_sercom_get_default_pad+0x140>
   2737c:	1cfb      	adds	r3, r7, #3
   2737e:	781b      	ldrb	r3, [r3, #0]
   27380:	2b01      	cmp	r3, #1
   27382:	d00a      	beq.n	2739a <_sercom_get_default_pad+0x8a>
   27384:	dc02      	bgt.n	2738c <_sercom_get_default_pad+0x7c>
   27386:	2b00      	cmp	r3, #0
   27388:	d005      	beq.n	27396 <_sercom_get_default_pad+0x86>
   2738a:	e060      	b.n	2744e <_sercom_get_default_pad+0x13e>
   2738c:	2b02      	cmp	r3, #2
   2738e:	d006      	beq.n	2739e <_sercom_get_default_pad+0x8e>
   27390:	2b03      	cmp	r3, #3
   27392:	d006      	beq.n	273a2 <_sercom_get_default_pad+0x92>
   27394:	e05b      	b.n	2744e <_sercom_get_default_pad+0x13e>
   27396:	2303      	movs	r3, #3
   27398:	e05a      	b.n	27450 <_sercom_get_default_pad+0x140>
   2739a:	4b39      	ldr	r3, [pc, #228]	; (27480 <_sercom_get_default_pad+0x170>)
   2739c:	e058      	b.n	27450 <_sercom_get_default_pad+0x140>
   2739e:	4b39      	ldr	r3, [pc, #228]	; (27484 <_sercom_get_default_pad+0x174>)
   273a0:	e056      	b.n	27450 <_sercom_get_default_pad+0x140>
   273a2:	4b39      	ldr	r3, [pc, #228]	; (27488 <_sercom_get_default_pad+0x178>)
   273a4:	e054      	b.n	27450 <_sercom_get_default_pad+0x140>
   273a6:	1cfb      	adds	r3, r7, #3
   273a8:	781b      	ldrb	r3, [r3, #0]
   273aa:	2b01      	cmp	r3, #1
   273ac:	d00a      	beq.n	273c4 <_sercom_get_default_pad+0xb4>
   273ae:	dc02      	bgt.n	273b6 <_sercom_get_default_pad+0xa6>
   273b0:	2b00      	cmp	r3, #0
   273b2:	d005      	beq.n	273c0 <_sercom_get_default_pad+0xb0>
   273b4:	e04b      	b.n	2744e <_sercom_get_default_pad+0x13e>
   273b6:	2b02      	cmp	r3, #2
   273b8:	d006      	beq.n	273c8 <_sercom_get_default_pad+0xb8>
   273ba:	2b03      	cmp	r3, #3
   273bc:	d006      	beq.n	273cc <_sercom_get_default_pad+0xbc>
   273be:	e046      	b.n	2744e <_sercom_get_default_pad+0x13e>
   273c0:	4b32      	ldr	r3, [pc, #200]	; (2748c <_sercom_get_default_pad+0x17c>)
   273c2:	e045      	b.n	27450 <_sercom_get_default_pad+0x140>
   273c4:	4b32      	ldr	r3, [pc, #200]	; (27490 <_sercom_get_default_pad+0x180>)
   273c6:	e043      	b.n	27450 <_sercom_get_default_pad+0x140>
   273c8:	4b32      	ldr	r3, [pc, #200]	; (27494 <_sercom_get_default_pad+0x184>)
   273ca:	e041      	b.n	27450 <_sercom_get_default_pad+0x140>
   273cc:	4b32      	ldr	r3, [pc, #200]	; (27498 <_sercom_get_default_pad+0x188>)
   273ce:	e03f      	b.n	27450 <_sercom_get_default_pad+0x140>
   273d0:	1cfb      	adds	r3, r7, #3
   273d2:	781b      	ldrb	r3, [r3, #0]
   273d4:	2b01      	cmp	r3, #1
   273d6:	d00a      	beq.n	273ee <_sercom_get_default_pad+0xde>
   273d8:	dc02      	bgt.n	273e0 <_sercom_get_default_pad+0xd0>
   273da:	2b00      	cmp	r3, #0
   273dc:	d005      	beq.n	273ea <_sercom_get_default_pad+0xda>
   273de:	e036      	b.n	2744e <_sercom_get_default_pad+0x13e>
   273e0:	2b02      	cmp	r3, #2
   273e2:	d006      	beq.n	273f2 <_sercom_get_default_pad+0xe2>
   273e4:	2b03      	cmp	r3, #3
   273e6:	d006      	beq.n	273f6 <_sercom_get_default_pad+0xe6>
   273e8:	e031      	b.n	2744e <_sercom_get_default_pad+0x13e>
   273ea:	4b2c      	ldr	r3, [pc, #176]	; (2749c <_sercom_get_default_pad+0x18c>)
   273ec:	e030      	b.n	27450 <_sercom_get_default_pad+0x140>
   273ee:	4b2c      	ldr	r3, [pc, #176]	; (274a0 <_sercom_get_default_pad+0x190>)
   273f0:	e02e      	b.n	27450 <_sercom_get_default_pad+0x140>
   273f2:	4b2c      	ldr	r3, [pc, #176]	; (274a4 <_sercom_get_default_pad+0x194>)
   273f4:	e02c      	b.n	27450 <_sercom_get_default_pad+0x140>
   273f6:	4b2c      	ldr	r3, [pc, #176]	; (274a8 <_sercom_get_default_pad+0x198>)
   273f8:	e02a      	b.n	27450 <_sercom_get_default_pad+0x140>
   273fa:	1cfb      	adds	r3, r7, #3
   273fc:	781b      	ldrb	r3, [r3, #0]
   273fe:	2b01      	cmp	r3, #1
   27400:	d00a      	beq.n	27418 <_sercom_get_default_pad+0x108>
   27402:	dc02      	bgt.n	2740a <_sercom_get_default_pad+0xfa>
   27404:	2b00      	cmp	r3, #0
   27406:	d005      	beq.n	27414 <_sercom_get_default_pad+0x104>
   27408:	e021      	b.n	2744e <_sercom_get_default_pad+0x13e>
   2740a:	2b02      	cmp	r3, #2
   2740c:	d006      	beq.n	2741c <_sercom_get_default_pad+0x10c>
   2740e:	2b03      	cmp	r3, #3
   27410:	d006      	beq.n	27420 <_sercom_get_default_pad+0x110>
   27412:	e01c      	b.n	2744e <_sercom_get_default_pad+0x13e>
   27414:	4b25      	ldr	r3, [pc, #148]	; (274ac <_sercom_get_default_pad+0x19c>)
   27416:	e01b      	b.n	27450 <_sercom_get_default_pad+0x140>
   27418:	4b25      	ldr	r3, [pc, #148]	; (274b0 <_sercom_get_default_pad+0x1a0>)
   2741a:	e019      	b.n	27450 <_sercom_get_default_pad+0x140>
   2741c:	4b25      	ldr	r3, [pc, #148]	; (274b4 <_sercom_get_default_pad+0x1a4>)
   2741e:	e017      	b.n	27450 <_sercom_get_default_pad+0x140>
   27420:	4b25      	ldr	r3, [pc, #148]	; (274b8 <_sercom_get_default_pad+0x1a8>)
   27422:	e015      	b.n	27450 <_sercom_get_default_pad+0x140>
   27424:	1cfb      	adds	r3, r7, #3
   27426:	781b      	ldrb	r3, [r3, #0]
   27428:	2b01      	cmp	r3, #1
   2742a:	d00a      	beq.n	27442 <_sercom_get_default_pad+0x132>
   2742c:	dc02      	bgt.n	27434 <_sercom_get_default_pad+0x124>
   2742e:	2b00      	cmp	r3, #0
   27430:	d005      	beq.n	2743e <_sercom_get_default_pad+0x12e>
   27432:	e00c      	b.n	2744e <_sercom_get_default_pad+0x13e>
   27434:	2b02      	cmp	r3, #2
   27436:	d006      	beq.n	27446 <_sercom_get_default_pad+0x136>
   27438:	2b03      	cmp	r3, #3
   2743a:	d006      	beq.n	2744a <_sercom_get_default_pad+0x13a>
   2743c:	e007      	b.n	2744e <_sercom_get_default_pad+0x13e>
   2743e:	4b1f      	ldr	r3, [pc, #124]	; (274bc <_sercom_get_default_pad+0x1ac>)
   27440:	e006      	b.n	27450 <_sercom_get_default_pad+0x140>
   27442:	4b1f      	ldr	r3, [pc, #124]	; (274c0 <_sercom_get_default_pad+0x1b0>)
   27444:	e004      	b.n	27450 <_sercom_get_default_pad+0x140>
   27446:	4b1f      	ldr	r3, [pc, #124]	; (274c4 <_sercom_get_default_pad+0x1b4>)
   27448:	e002      	b.n	27450 <_sercom_get_default_pad+0x140>
   2744a:	4b1f      	ldr	r3, [pc, #124]	; (274c8 <_sercom_get_default_pad+0x1b8>)
   2744c:	e000      	b.n	27450 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   2744e:	2300      	movs	r3, #0
}
   27450:	0018      	movs	r0, r3
   27452:	46bd      	mov	sp, r7
   27454:	b002      	add	sp, #8
   27456:	bd80      	pop	{r7, pc}
   27458:	42001000 	.word	0x42001000
   2745c:	42000800 	.word	0x42000800
   27460:	42000c00 	.word	0x42000c00
   27464:	42001800 	.word	0x42001800
   27468:	42001c00 	.word	0x42001c00
   2746c:	42001400 	.word	0x42001400
   27470:	00040003 	.word	0x00040003
   27474:	00050003 	.word	0x00050003
   27478:	00060003 	.word	0x00060003
   2747c:	00070003 	.word	0x00070003
   27480:	00010003 	.word	0x00010003
   27484:	001e0003 	.word	0x001e0003
   27488:	001f0003 	.word	0x001f0003
   2748c:	00080003 	.word	0x00080003
   27490:	00090003 	.word	0x00090003
   27494:	000a0003 	.word	0x000a0003
   27498:	000b0003 	.word	0x000b0003
   2749c:	00100003 	.word	0x00100003
   274a0:	00110003 	.word	0x00110003
   274a4:	00120003 	.word	0x00120003
   274a8:	00130003 	.word	0x00130003
   274ac:	000c0003 	.word	0x000c0003
   274b0:	000d0003 	.word	0x000d0003
   274b4:	000e0003 	.word	0x000e0003
   274b8:	000f0003 	.word	0x000f0003
   274bc:	00160003 	.word	0x00160003
   274c0:	00170003 	.word	0x00170003
   274c4:	00180003 	.word	0x00180003
   274c8:	00190003 	.word	0x00190003

000274cc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   274cc:	b590      	push	{r4, r7, lr}
   274ce:	b08b      	sub	sp, #44	; 0x2c
   274d0:	af00      	add	r7, sp, #0
   274d2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   274d4:	230c      	movs	r3, #12
   274d6:	18fb      	adds	r3, r7, r3
   274d8:	4a0f      	ldr	r2, [pc, #60]	; (27518 <_sercom_get_sercom_inst_index+0x4c>)
   274da:	ca13      	ldmia	r2!, {r0, r1, r4}
   274dc:	c313      	stmia	r3!, {r0, r1, r4}
   274de:	ca13      	ldmia	r2!, {r0, r1, r4}
   274e0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   274e2:	2300      	movs	r3, #0
   274e4:	627b      	str	r3, [r7, #36]	; 0x24
   274e6:	e00e      	b.n	27506 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   274e8:	230c      	movs	r3, #12
   274ea:	18fb      	adds	r3, r7, r3
   274ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   274ee:	0092      	lsls	r2, r2, #2
   274f0:	58d3      	ldr	r3, [r2, r3]
   274f2:	001a      	movs	r2, r3
   274f4:	687b      	ldr	r3, [r7, #4]
   274f6:	429a      	cmp	r2, r3
   274f8:	d102      	bne.n	27500 <_sercom_get_sercom_inst_index+0x34>
			return i;
   274fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   274fc:	b2db      	uxtb	r3, r3
   274fe:	e006      	b.n	2750e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27502:	3301      	adds	r3, #1
   27504:	627b      	str	r3, [r7, #36]	; 0x24
   27506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27508:	2b05      	cmp	r3, #5
   2750a:	d9ed      	bls.n	274e8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   2750c:	2300      	movs	r3, #0
}
   2750e:	0018      	movs	r0, r3
   27510:	46bd      	mov	sp, r7
   27512:	b00b      	add	sp, #44	; 0x2c
   27514:	bd90      	pop	{r4, r7, pc}
   27516:	46c0      	nop			; (mov r8, r8)
   27518:	00039240 	.word	0x00039240

0002751c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   2751c:	b580      	push	{r7, lr}
   2751e:	b082      	sub	sp, #8
   27520:	af00      	add	r7, sp, #0
   27522:	0002      	movs	r2, r0
   27524:	1dfb      	adds	r3, r7, #7
   27526:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   27528:	46c0      	nop			; (mov r8, r8)
   2752a:	46bd      	mov	sp, r7
   2752c:	b002      	add	sp, #8
   2752e:	bd80      	pop	{r7, pc}

00027530 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   27530:	b580      	push	{r7, lr}
   27532:	b084      	sub	sp, #16
   27534:	af00      	add	r7, sp, #0
   27536:	0002      	movs	r2, r0
   27538:	6039      	str	r1, [r7, #0]
   2753a:	1dfb      	adds	r3, r7, #7
   2753c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2753e:	4b13      	ldr	r3, [pc, #76]	; (2758c <_sercom_set_handler+0x5c>)
   27540:	781b      	ldrb	r3, [r3, #0]
   27542:	2201      	movs	r2, #1
   27544:	4053      	eors	r3, r2
   27546:	b2db      	uxtb	r3, r3
   27548:	2b00      	cmp	r3, #0
   2754a:	d015      	beq.n	27578 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2754c:	2300      	movs	r3, #0
   2754e:	60fb      	str	r3, [r7, #12]
   27550:	e00c      	b.n	2756c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   27552:	4b0f      	ldr	r3, [pc, #60]	; (27590 <_sercom_set_handler+0x60>)
   27554:	68fa      	ldr	r2, [r7, #12]
   27556:	0092      	lsls	r2, r2, #2
   27558:	490e      	ldr	r1, [pc, #56]	; (27594 <_sercom_set_handler+0x64>)
   2755a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   2755c:	4b0e      	ldr	r3, [pc, #56]	; (27598 <_sercom_set_handler+0x68>)
   2755e:	68fa      	ldr	r2, [r7, #12]
   27560:	0092      	lsls	r2, r2, #2
   27562:	2100      	movs	r1, #0
   27564:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27566:	68fb      	ldr	r3, [r7, #12]
   27568:	3301      	adds	r3, #1
   2756a:	60fb      	str	r3, [r7, #12]
   2756c:	68fb      	ldr	r3, [r7, #12]
   2756e:	2b05      	cmp	r3, #5
   27570:	d9ef      	bls.n	27552 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   27572:	4b06      	ldr	r3, [pc, #24]	; (2758c <_sercom_set_handler+0x5c>)
   27574:	2201      	movs	r2, #1
   27576:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   27578:	1dfb      	adds	r3, r7, #7
   2757a:	781a      	ldrb	r2, [r3, #0]
   2757c:	4b04      	ldr	r3, [pc, #16]	; (27590 <_sercom_set_handler+0x60>)
   2757e:	0092      	lsls	r2, r2, #2
   27580:	6839      	ldr	r1, [r7, #0]
   27582:	50d1      	str	r1, [r2, r3]
}
   27584:	46c0      	nop			; (mov r8, r8)
   27586:	46bd      	mov	sp, r7
   27588:	b004      	add	sp, #16
   2758a:	bd80      	pop	{r7, pc}
   2758c:	20003eae 	.word	0x20003eae
   27590:	20003eb0 	.word	0x20003eb0
   27594:	0002751d 	.word	0x0002751d
   27598:	20005794 	.word	0x20005794

0002759c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   2759c:	b590      	push	{r4, r7, lr}
   2759e:	b085      	sub	sp, #20
   275a0:	af00      	add	r7, sp, #0
   275a2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   275a4:	2308      	movs	r3, #8
   275a6:	18fb      	adds	r3, r7, r3
   275a8:	4a0b      	ldr	r2, [pc, #44]	; (275d8 <_sercom_get_interrupt_vector+0x3c>)
   275aa:	6811      	ldr	r1, [r2, #0]
   275ac:	6019      	str	r1, [r3, #0]
   275ae:	8892      	ldrh	r2, [r2, #4]
   275b0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   275b2:	230f      	movs	r3, #15
   275b4:	18fc      	adds	r4, r7, r3
   275b6:	687b      	ldr	r3, [r7, #4]
   275b8:	0018      	movs	r0, r3
   275ba:	4b08      	ldr	r3, [pc, #32]	; (275dc <_sercom_get_interrupt_vector+0x40>)
   275bc:	4798      	blx	r3
   275be:	0003      	movs	r3, r0
   275c0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   275c2:	230f      	movs	r3, #15
   275c4:	18fb      	adds	r3, r7, r3
   275c6:	781b      	ldrb	r3, [r3, #0]
   275c8:	2208      	movs	r2, #8
   275ca:	18ba      	adds	r2, r7, r2
   275cc:	5cd3      	ldrb	r3, [r2, r3]
   275ce:	b25b      	sxtb	r3, r3
}
   275d0:	0018      	movs	r0, r3
   275d2:	46bd      	mov	sp, r7
   275d4:	b005      	add	sp, #20
   275d6:	bd90      	pop	{r4, r7, pc}
   275d8:	00039258 	.word	0x00039258
   275dc:	000274cd 	.word	0x000274cd

000275e0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   275e0:	b580      	push	{r7, lr}
   275e2:	af00      	add	r7, sp, #0
   275e4:	4b03      	ldr	r3, [pc, #12]	; (275f4 <SERCOM0_Handler+0x14>)
   275e6:	681b      	ldr	r3, [r3, #0]
   275e8:	2000      	movs	r0, #0
   275ea:	4798      	blx	r3
   275ec:	46c0      	nop			; (mov r8, r8)
   275ee:	46bd      	mov	sp, r7
   275f0:	bd80      	pop	{r7, pc}
   275f2:	46c0      	nop			; (mov r8, r8)
   275f4:	20003eb0 	.word	0x20003eb0

000275f8 <SERCOM1_Handler>:
   275f8:	b580      	push	{r7, lr}
   275fa:	af00      	add	r7, sp, #0
   275fc:	4b03      	ldr	r3, [pc, #12]	; (2760c <SERCOM1_Handler+0x14>)
   275fe:	685b      	ldr	r3, [r3, #4]
   27600:	2001      	movs	r0, #1
   27602:	4798      	blx	r3
   27604:	46c0      	nop			; (mov r8, r8)
   27606:	46bd      	mov	sp, r7
   27608:	bd80      	pop	{r7, pc}
   2760a:	46c0      	nop			; (mov r8, r8)
   2760c:	20003eb0 	.word	0x20003eb0

00027610 <SERCOM2_Handler>:
   27610:	b580      	push	{r7, lr}
   27612:	af00      	add	r7, sp, #0
   27614:	4b03      	ldr	r3, [pc, #12]	; (27624 <SERCOM2_Handler+0x14>)
   27616:	689b      	ldr	r3, [r3, #8]
   27618:	2002      	movs	r0, #2
   2761a:	4798      	blx	r3
   2761c:	46c0      	nop			; (mov r8, r8)
   2761e:	46bd      	mov	sp, r7
   27620:	bd80      	pop	{r7, pc}
   27622:	46c0      	nop			; (mov r8, r8)
   27624:	20003eb0 	.word	0x20003eb0

00027628 <SERCOM3_Handler>:
   27628:	b580      	push	{r7, lr}
   2762a:	af00      	add	r7, sp, #0
   2762c:	4b03      	ldr	r3, [pc, #12]	; (2763c <SERCOM3_Handler+0x14>)
   2762e:	68db      	ldr	r3, [r3, #12]
   27630:	2003      	movs	r0, #3
   27632:	4798      	blx	r3
   27634:	46c0      	nop			; (mov r8, r8)
   27636:	46bd      	mov	sp, r7
   27638:	bd80      	pop	{r7, pc}
   2763a:	46c0      	nop			; (mov r8, r8)
   2763c:	20003eb0 	.word	0x20003eb0

00027640 <SERCOM4_Handler>:
   27640:	b580      	push	{r7, lr}
   27642:	af00      	add	r7, sp, #0
   27644:	4b03      	ldr	r3, [pc, #12]	; (27654 <SERCOM4_Handler+0x14>)
   27646:	691b      	ldr	r3, [r3, #16]
   27648:	2004      	movs	r0, #4
   2764a:	4798      	blx	r3
   2764c:	46c0      	nop			; (mov r8, r8)
   2764e:	46bd      	mov	sp, r7
   27650:	bd80      	pop	{r7, pc}
   27652:	46c0      	nop			; (mov r8, r8)
   27654:	20003eb0 	.word	0x20003eb0

00027658 <SERCOM5_Handler>:
   27658:	b580      	push	{r7, lr}
   2765a:	af00      	add	r7, sp, #0
   2765c:	4b03      	ldr	r3, [pc, #12]	; (2766c <SERCOM5_Handler+0x14>)
   2765e:	695b      	ldr	r3, [r3, #20]
   27660:	2005      	movs	r0, #5
   27662:	4798      	blx	r3
   27664:	46c0      	nop			; (mov r8, r8)
   27666:	46bd      	mov	sp, r7
   27668:	bd80      	pop	{r7, pc}
   2766a:	46c0      	nop			; (mov r8, r8)
   2766c:	20003eb0 	.word	0x20003eb0

00027670 <system_pinmux_get_config_defaults>:
{
   27670:	b580      	push	{r7, lr}
   27672:	b082      	sub	sp, #8
   27674:	af00      	add	r7, sp, #0
   27676:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27678:	687b      	ldr	r3, [r7, #4]
   2767a:	2280      	movs	r2, #128	; 0x80
   2767c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2767e:	687b      	ldr	r3, [r7, #4]
   27680:	2200      	movs	r2, #0
   27682:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27684:	687b      	ldr	r3, [r7, #4]
   27686:	2201      	movs	r2, #1
   27688:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2768a:	687b      	ldr	r3, [r7, #4]
   2768c:	2200      	movs	r2, #0
   2768e:	70da      	strb	r2, [r3, #3]
}
   27690:	46c0      	nop			; (mov r8, r8)
   27692:	46bd      	mov	sp, r7
   27694:	b002      	add	sp, #8
   27696:	bd80      	pop	{r7, pc}

00027698 <system_pinmux_get_group_from_gpio_pin>:
{
   27698:	b580      	push	{r7, lr}
   2769a:	b084      	sub	sp, #16
   2769c:	af00      	add	r7, sp, #0
   2769e:	0002      	movs	r2, r0
   276a0:	1dfb      	adds	r3, r7, #7
   276a2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   276a4:	230f      	movs	r3, #15
   276a6:	18fb      	adds	r3, r7, r3
   276a8:	1dfa      	adds	r2, r7, #7
   276aa:	7812      	ldrb	r2, [r2, #0]
   276ac:	09d2      	lsrs	r2, r2, #7
   276ae:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   276b0:	230e      	movs	r3, #14
   276b2:	18fb      	adds	r3, r7, r3
   276b4:	1dfa      	adds	r2, r7, #7
   276b6:	7812      	ldrb	r2, [r2, #0]
   276b8:	0952      	lsrs	r2, r2, #5
   276ba:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   276bc:	4b0d      	ldr	r3, [pc, #52]	; (276f4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   276be:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   276c0:	230f      	movs	r3, #15
   276c2:	18fb      	adds	r3, r7, r3
   276c4:	781b      	ldrb	r3, [r3, #0]
   276c6:	2b00      	cmp	r3, #0
   276c8:	d10f      	bne.n	276ea <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   276ca:	230f      	movs	r3, #15
   276cc:	18fb      	adds	r3, r7, r3
   276ce:	781b      	ldrb	r3, [r3, #0]
   276d0:	009b      	lsls	r3, r3, #2
   276d2:	2210      	movs	r2, #16
   276d4:	4694      	mov	ip, r2
   276d6:	44bc      	add	ip, r7
   276d8:	4463      	add	r3, ip
   276da:	3b08      	subs	r3, #8
   276dc:	681a      	ldr	r2, [r3, #0]
   276de:	230e      	movs	r3, #14
   276e0:	18fb      	adds	r3, r7, r3
   276e2:	781b      	ldrb	r3, [r3, #0]
   276e4:	01db      	lsls	r3, r3, #7
   276e6:	18d3      	adds	r3, r2, r3
   276e8:	e000      	b.n	276ec <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   276ea:	2300      	movs	r3, #0
}
   276ec:	0018      	movs	r0, r3
   276ee:	46bd      	mov	sp, r7
   276f0:	b004      	add	sp, #16
   276f2:	bd80      	pop	{r7, pc}
   276f4:	41004400 	.word	0x41004400

000276f8 <port_get_group_from_gpio_pin>:
{
   276f8:	b580      	push	{r7, lr}
   276fa:	b082      	sub	sp, #8
   276fc:	af00      	add	r7, sp, #0
   276fe:	0002      	movs	r2, r0
   27700:	1dfb      	adds	r3, r7, #7
   27702:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   27704:	1dfb      	adds	r3, r7, #7
   27706:	781b      	ldrb	r3, [r3, #0]
   27708:	0018      	movs	r0, r3
   2770a:	4b03      	ldr	r3, [pc, #12]	; (27718 <port_get_group_from_gpio_pin+0x20>)
   2770c:	4798      	blx	r3
   2770e:	0003      	movs	r3, r0
}
   27710:	0018      	movs	r0, r3
   27712:	46bd      	mov	sp, r7
   27714:	b002      	add	sp, #8
   27716:	bd80      	pop	{r7, pc}
   27718:	00027699 	.word	0x00027699

0002771c <port_pin_set_output_level>:
{
   2771c:	b580      	push	{r7, lr}
   2771e:	b084      	sub	sp, #16
   27720:	af00      	add	r7, sp, #0
   27722:	0002      	movs	r2, r0
   27724:	1dfb      	adds	r3, r7, #7
   27726:	701a      	strb	r2, [r3, #0]
   27728:	1dbb      	adds	r3, r7, #6
   2772a:	1c0a      	adds	r2, r1, #0
   2772c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2772e:	1dfb      	adds	r3, r7, #7
   27730:	781b      	ldrb	r3, [r3, #0]
   27732:	0018      	movs	r0, r3
   27734:	4b0d      	ldr	r3, [pc, #52]	; (2776c <port_pin_set_output_level+0x50>)
   27736:	4798      	blx	r3
   27738:	0003      	movs	r3, r0
   2773a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2773c:	1dfb      	adds	r3, r7, #7
   2773e:	781b      	ldrb	r3, [r3, #0]
   27740:	221f      	movs	r2, #31
   27742:	4013      	ands	r3, r2
   27744:	2201      	movs	r2, #1
   27746:	409a      	lsls	r2, r3
   27748:	0013      	movs	r3, r2
   2774a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2774c:	1dbb      	adds	r3, r7, #6
   2774e:	781b      	ldrb	r3, [r3, #0]
   27750:	2b00      	cmp	r3, #0
   27752:	d003      	beq.n	2775c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   27754:	68fb      	ldr	r3, [r7, #12]
   27756:	68ba      	ldr	r2, [r7, #8]
   27758:	619a      	str	r2, [r3, #24]
}
   2775a:	e002      	b.n	27762 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2775c:	68fb      	ldr	r3, [r7, #12]
   2775e:	68ba      	ldr	r2, [r7, #8]
   27760:	615a      	str	r2, [r3, #20]
}
   27762:	46c0      	nop			; (mov r8, r8)
   27764:	46bd      	mov	sp, r7
   27766:	b004      	add	sp, #16
   27768:	bd80      	pop	{r7, pc}
   2776a:	46c0      	nop			; (mov r8, r8)
   2776c:	000276f9 	.word	0x000276f9

00027770 <system_gclk_chan_get_config_defaults>:
{
   27770:	b580      	push	{r7, lr}
   27772:	b082      	sub	sp, #8
   27774:	af00      	add	r7, sp, #0
   27776:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27778:	687b      	ldr	r3, [r7, #4]
   2777a:	2200      	movs	r2, #0
   2777c:	701a      	strb	r2, [r3, #0]
}
   2777e:	46c0      	nop			; (mov r8, r8)
   27780:	46bd      	mov	sp, r7
   27782:	b002      	add	sp, #8
   27784:	bd80      	pop	{r7, pc}
	...

00027788 <system_apb_clock_set_mask>:
{
   27788:	b580      	push	{r7, lr}
   2778a:	b082      	sub	sp, #8
   2778c:	af00      	add	r7, sp, #0
   2778e:	0002      	movs	r2, r0
   27790:	6039      	str	r1, [r7, #0]
   27792:	1dfb      	adds	r3, r7, #7
   27794:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27796:	1dfb      	adds	r3, r7, #7
   27798:	781b      	ldrb	r3, [r3, #0]
   2779a:	2b01      	cmp	r3, #1
   2779c:	d00a      	beq.n	277b4 <system_apb_clock_set_mask+0x2c>
   2779e:	2b02      	cmp	r3, #2
   277a0:	d00f      	beq.n	277c2 <system_apb_clock_set_mask+0x3a>
   277a2:	2b00      	cmp	r3, #0
   277a4:	d114      	bne.n	277d0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   277a6:	4b0e      	ldr	r3, [pc, #56]	; (277e0 <system_apb_clock_set_mask+0x58>)
   277a8:	4a0d      	ldr	r2, [pc, #52]	; (277e0 <system_apb_clock_set_mask+0x58>)
   277aa:	6991      	ldr	r1, [r2, #24]
   277ac:	683a      	ldr	r2, [r7, #0]
   277ae:	430a      	orrs	r2, r1
   277b0:	619a      	str	r2, [r3, #24]
			break;
   277b2:	e00f      	b.n	277d4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   277b4:	4b0a      	ldr	r3, [pc, #40]	; (277e0 <system_apb_clock_set_mask+0x58>)
   277b6:	4a0a      	ldr	r2, [pc, #40]	; (277e0 <system_apb_clock_set_mask+0x58>)
   277b8:	69d1      	ldr	r1, [r2, #28]
   277ba:	683a      	ldr	r2, [r7, #0]
   277bc:	430a      	orrs	r2, r1
   277be:	61da      	str	r2, [r3, #28]
			break;
   277c0:	e008      	b.n	277d4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   277c2:	4b07      	ldr	r3, [pc, #28]	; (277e0 <system_apb_clock_set_mask+0x58>)
   277c4:	4a06      	ldr	r2, [pc, #24]	; (277e0 <system_apb_clock_set_mask+0x58>)
   277c6:	6a11      	ldr	r1, [r2, #32]
   277c8:	683a      	ldr	r2, [r7, #0]
   277ca:	430a      	orrs	r2, r1
   277cc:	621a      	str	r2, [r3, #32]
			break;
   277ce:	e001      	b.n	277d4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   277d0:	2317      	movs	r3, #23
   277d2:	e000      	b.n	277d6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   277d4:	2300      	movs	r3, #0
}
   277d6:	0018      	movs	r0, r3
   277d8:	46bd      	mov	sp, r7
   277da:	b002      	add	sp, #8
   277dc:	bd80      	pop	{r7, pc}
   277de:	46c0      	nop			; (mov r8, r8)
   277e0:	40000400 	.word	0x40000400

000277e4 <system_is_debugger_present>:
{
   277e4:	b580      	push	{r7, lr}
   277e6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   277e8:	4b05      	ldr	r3, [pc, #20]	; (27800 <system_is_debugger_present+0x1c>)
   277ea:	789b      	ldrb	r3, [r3, #2]
   277ec:	b2db      	uxtb	r3, r3
   277ee:	001a      	movs	r2, r3
   277f0:	2302      	movs	r3, #2
   277f2:	4013      	ands	r3, r2
   277f4:	1e5a      	subs	r2, r3, #1
   277f6:	4193      	sbcs	r3, r2
   277f8:	b2db      	uxtb	r3, r3
}
   277fa:	0018      	movs	r0, r3
   277fc:	46bd      	mov	sp, r7
   277fe:	bd80      	pop	{r7, pc}
   27800:	41002000 	.word	0x41002000

00027804 <system_interrupt_enable>:
{
   27804:	b580      	push	{r7, lr}
   27806:	b082      	sub	sp, #8
   27808:	af00      	add	r7, sp, #0
   2780a:	0002      	movs	r2, r0
   2780c:	1dfb      	adds	r3, r7, #7
   2780e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27810:	4b06      	ldr	r3, [pc, #24]	; (2782c <system_interrupt_enable+0x28>)
   27812:	1dfa      	adds	r2, r7, #7
   27814:	7812      	ldrb	r2, [r2, #0]
   27816:	0011      	movs	r1, r2
   27818:	221f      	movs	r2, #31
   2781a:	400a      	ands	r2, r1
   2781c:	2101      	movs	r1, #1
   2781e:	4091      	lsls	r1, r2
   27820:	000a      	movs	r2, r1
   27822:	601a      	str	r2, [r3, #0]
}
   27824:	46c0      	nop			; (mov r8, r8)
   27826:	46bd      	mov	sp, r7
   27828:	b002      	add	sp, #8
   2782a:	bd80      	pop	{r7, pc}
   2782c:	e000e100 	.word	0xe000e100

00027830 <system_interrupt_disable>:
{
   27830:	b580      	push	{r7, lr}
   27832:	b082      	sub	sp, #8
   27834:	af00      	add	r7, sp, #0
   27836:	0002      	movs	r2, r0
   27838:	1dfb      	adds	r3, r7, #7
   2783a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2783c:	4a07      	ldr	r2, [pc, #28]	; (2785c <system_interrupt_disable+0x2c>)
   2783e:	1dfb      	adds	r3, r7, #7
   27840:	781b      	ldrb	r3, [r3, #0]
   27842:	0019      	movs	r1, r3
   27844:	231f      	movs	r3, #31
   27846:	400b      	ands	r3, r1
   27848:	2101      	movs	r1, #1
   2784a:	4099      	lsls	r1, r3
   2784c:	000b      	movs	r3, r1
   2784e:	0019      	movs	r1, r3
   27850:	2380      	movs	r3, #128	; 0x80
   27852:	50d1      	str	r1, [r2, r3]
}
   27854:	46c0      	nop			; (mov r8, r8)
   27856:	46bd      	mov	sp, r7
   27858:	b002      	add	sp, #8
   2785a:	bd80      	pop	{r7, pc}
   2785c:	e000e100 	.word	0xe000e100

00027860 <spi_is_syncing>:
{
   27860:	b580      	push	{r7, lr}
   27862:	b084      	sub	sp, #16
   27864:	af00      	add	r7, sp, #0
   27866:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27868:	687b      	ldr	r3, [r7, #4]
   2786a:	681b      	ldr	r3, [r3, #0]
   2786c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2786e:	68fb      	ldr	r3, [r7, #12]
   27870:	69db      	ldr	r3, [r3, #28]
   27872:	1e5a      	subs	r2, r3, #1
   27874:	4193      	sbcs	r3, r2
   27876:	b2db      	uxtb	r3, r3
}
   27878:	0018      	movs	r0, r3
   2787a:	46bd      	mov	sp, r7
   2787c:	b004      	add	sp, #16
   2787e:	bd80      	pop	{r7, pc}

00027880 <spi_enable>:
{
   27880:	b580      	push	{r7, lr}
   27882:	b084      	sub	sp, #16
   27884:	af00      	add	r7, sp, #0
   27886:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27888:	687b      	ldr	r3, [r7, #4]
   2788a:	681b      	ldr	r3, [r3, #0]
   2788c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2788e:	687b      	ldr	r3, [r7, #4]
   27890:	681b      	ldr	r3, [r3, #0]
   27892:	0018      	movs	r0, r3
   27894:	4b0b      	ldr	r3, [pc, #44]	; (278c4 <spi_enable+0x44>)
   27896:	4798      	blx	r3
   27898:	0003      	movs	r3, r0
   2789a:	0018      	movs	r0, r3
   2789c:	4b0a      	ldr	r3, [pc, #40]	; (278c8 <spi_enable+0x48>)
   2789e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   278a0:	46c0      	nop			; (mov r8, r8)
   278a2:	687b      	ldr	r3, [r7, #4]
   278a4:	0018      	movs	r0, r3
   278a6:	4b09      	ldr	r3, [pc, #36]	; (278cc <spi_enable+0x4c>)
   278a8:	4798      	blx	r3
   278aa:	1e03      	subs	r3, r0, #0
   278ac:	d1f9      	bne.n	278a2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   278ae:	68fb      	ldr	r3, [r7, #12]
   278b0:	681b      	ldr	r3, [r3, #0]
   278b2:	2202      	movs	r2, #2
   278b4:	431a      	orrs	r2, r3
   278b6:	68fb      	ldr	r3, [r7, #12]
   278b8:	601a      	str	r2, [r3, #0]
}
   278ba:	46c0      	nop			; (mov r8, r8)
   278bc:	46bd      	mov	sp, r7
   278be:	b004      	add	sp, #16
   278c0:	bd80      	pop	{r7, pc}
   278c2:	46c0      	nop			; (mov r8, r8)
   278c4:	0002759d 	.word	0x0002759d
   278c8:	00027805 	.word	0x00027805
   278cc:	00027861 	.word	0x00027861

000278d0 <spi_disable>:
{
   278d0:	b580      	push	{r7, lr}
   278d2:	b084      	sub	sp, #16
   278d4:	af00      	add	r7, sp, #0
   278d6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   278d8:	687b      	ldr	r3, [r7, #4]
   278da:	681b      	ldr	r3, [r3, #0]
   278dc:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   278de:	687b      	ldr	r3, [r7, #4]
   278e0:	681b      	ldr	r3, [r3, #0]
   278e2:	0018      	movs	r0, r3
   278e4:	4b0e      	ldr	r3, [pc, #56]	; (27920 <spi_disable+0x50>)
   278e6:	4798      	blx	r3
   278e8:	0003      	movs	r3, r0
   278ea:	0018      	movs	r0, r3
   278ec:	4b0d      	ldr	r3, [pc, #52]	; (27924 <spi_disable+0x54>)
   278ee:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   278f0:	46c0      	nop			; (mov r8, r8)
   278f2:	687b      	ldr	r3, [r7, #4]
   278f4:	0018      	movs	r0, r3
   278f6:	4b0c      	ldr	r3, [pc, #48]	; (27928 <spi_disable+0x58>)
   278f8:	4798      	blx	r3
   278fa:	1e03      	subs	r3, r0, #0
   278fc:	d1f9      	bne.n	278f2 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   278fe:	68fb      	ldr	r3, [r7, #12]
   27900:	228f      	movs	r2, #143	; 0x8f
   27902:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   27904:	68fb      	ldr	r3, [r7, #12]
   27906:	228f      	movs	r2, #143	; 0x8f
   27908:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2790a:	68fb      	ldr	r3, [r7, #12]
   2790c:	681b      	ldr	r3, [r3, #0]
   2790e:	2202      	movs	r2, #2
   27910:	4393      	bics	r3, r2
   27912:	001a      	movs	r2, r3
   27914:	68fb      	ldr	r3, [r7, #12]
   27916:	601a      	str	r2, [r3, #0]
}
   27918:	46c0      	nop			; (mov r8, r8)
   2791a:	46bd      	mov	sp, r7
   2791c:	b004      	add	sp, #16
   2791e:	bd80      	pop	{r7, pc}
   27920:	0002759d 	.word	0x0002759d
   27924:	00027831 	.word	0x00027831
   27928:	00027861 	.word	0x00027861

0002792c <spi_is_write_complete>:
{
   2792c:	b580      	push	{r7, lr}
   2792e:	b084      	sub	sp, #16
   27930:	af00      	add	r7, sp, #0
   27932:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27934:	687b      	ldr	r3, [r7, #4]
   27936:	681b      	ldr	r3, [r3, #0]
   27938:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2793a:	68fb      	ldr	r3, [r7, #12]
   2793c:	7e1b      	ldrb	r3, [r3, #24]
   2793e:	b2db      	uxtb	r3, r3
   27940:	001a      	movs	r2, r3
   27942:	2302      	movs	r3, #2
   27944:	4013      	ands	r3, r2
   27946:	1e5a      	subs	r2, r3, #1
   27948:	4193      	sbcs	r3, r2
   2794a:	b2db      	uxtb	r3, r3
}
   2794c:	0018      	movs	r0, r3
   2794e:	46bd      	mov	sp, r7
   27950:	b004      	add	sp, #16
   27952:	bd80      	pop	{r7, pc}

00027954 <spi_is_ready_to_write>:
{
   27954:	b580      	push	{r7, lr}
   27956:	b084      	sub	sp, #16
   27958:	af00      	add	r7, sp, #0
   2795a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2795c:	687b      	ldr	r3, [r7, #4]
   2795e:	681b      	ldr	r3, [r3, #0]
   27960:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   27962:	68fb      	ldr	r3, [r7, #12]
   27964:	7e1b      	ldrb	r3, [r3, #24]
   27966:	b2db      	uxtb	r3, r3
   27968:	001a      	movs	r2, r3
   2796a:	2301      	movs	r3, #1
   2796c:	4013      	ands	r3, r2
   2796e:	1e5a      	subs	r2, r3, #1
   27970:	4193      	sbcs	r3, r2
   27972:	b2db      	uxtb	r3, r3
}
   27974:	0018      	movs	r0, r3
   27976:	46bd      	mov	sp, r7
   27978:	b004      	add	sp, #16
   2797a:	bd80      	pop	{r7, pc}

0002797c <spi_is_ready_to_read>:
{
   2797c:	b580      	push	{r7, lr}
   2797e:	b084      	sub	sp, #16
   27980:	af00      	add	r7, sp, #0
   27982:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27984:	687b      	ldr	r3, [r7, #4]
   27986:	681b      	ldr	r3, [r3, #0]
   27988:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2798a:	68fb      	ldr	r3, [r7, #12]
   2798c:	7e1b      	ldrb	r3, [r3, #24]
   2798e:	b2db      	uxtb	r3, r3
   27990:	001a      	movs	r2, r3
   27992:	2304      	movs	r3, #4
   27994:	4013      	ands	r3, r2
   27996:	1e5a      	subs	r2, r3, #1
   27998:	4193      	sbcs	r3, r2
   2799a:	b2db      	uxtb	r3, r3
}
   2799c:	0018      	movs	r0, r3
   2799e:	46bd      	mov	sp, r7
   279a0:	b004      	add	sp, #16
   279a2:	bd80      	pop	{r7, pc}

000279a4 <spi_write>:
{
   279a4:	b580      	push	{r7, lr}
   279a6:	b084      	sub	sp, #16
   279a8:	af00      	add	r7, sp, #0
   279aa:	6078      	str	r0, [r7, #4]
   279ac:	000a      	movs	r2, r1
   279ae:	1cbb      	adds	r3, r7, #2
   279b0:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   279b2:	687b      	ldr	r3, [r7, #4]
   279b4:	681b      	ldr	r3, [r3, #0]
   279b6:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   279b8:	687b      	ldr	r3, [r7, #4]
   279ba:	0018      	movs	r0, r3
   279bc:	4b0a      	ldr	r3, [pc, #40]	; (279e8 <spi_write+0x44>)
   279be:	4798      	blx	r3
   279c0:	0003      	movs	r3, r0
   279c2:	001a      	movs	r2, r3
   279c4:	2301      	movs	r3, #1
   279c6:	4053      	eors	r3, r2
   279c8:	b2db      	uxtb	r3, r3
   279ca:	2b00      	cmp	r3, #0
   279cc:	d001      	beq.n	279d2 <spi_write+0x2e>
		return STATUS_BUSY;
   279ce:	2305      	movs	r3, #5
   279d0:	e006      	b.n	279e0 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   279d2:	1cbb      	adds	r3, r7, #2
   279d4:	881b      	ldrh	r3, [r3, #0]
   279d6:	05db      	lsls	r3, r3, #23
   279d8:	0dda      	lsrs	r2, r3, #23
   279da:	68fb      	ldr	r3, [r7, #12]
   279dc:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   279de:	2300      	movs	r3, #0
}
   279e0:	0018      	movs	r0, r3
   279e2:	46bd      	mov	sp, r7
   279e4:	b004      	add	sp, #16
   279e6:	bd80      	pop	{r7, pc}
   279e8:	00027955 	.word	0x00027955

000279ec <spi_read>:
{
   279ec:	b580      	push	{r7, lr}
   279ee:	b084      	sub	sp, #16
   279f0:	af00      	add	r7, sp, #0
   279f2:	6078      	str	r0, [r7, #4]
   279f4:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   279f6:	687b      	ldr	r3, [r7, #4]
   279f8:	681b      	ldr	r3, [r3, #0]
   279fa:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   279fc:	687b      	ldr	r3, [r7, #4]
   279fe:	0018      	movs	r0, r3
   27a00:	4b1b      	ldr	r3, [pc, #108]	; (27a70 <spi_read+0x84>)
   27a02:	4798      	blx	r3
   27a04:	0003      	movs	r3, r0
   27a06:	001a      	movs	r2, r3
   27a08:	2301      	movs	r3, #1
   27a0a:	4053      	eors	r3, r2
   27a0c:	b2db      	uxtb	r3, r3
   27a0e:	2b00      	cmp	r3, #0
   27a10:	d001      	beq.n	27a16 <spi_read+0x2a>
		return STATUS_ERR_IO;
   27a12:	2310      	movs	r3, #16
   27a14:	e027      	b.n	27a66 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   27a16:	230f      	movs	r3, #15
   27a18:	18fb      	adds	r3, r7, r3
   27a1a:	2200      	movs	r2, #0
   27a1c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   27a1e:	68bb      	ldr	r3, [r7, #8]
   27a20:	8b5b      	ldrh	r3, [r3, #26]
   27a22:	b29b      	uxth	r3, r3
   27a24:	001a      	movs	r2, r3
   27a26:	2304      	movs	r3, #4
   27a28:	4013      	ands	r3, r2
   27a2a:	d006      	beq.n	27a3a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   27a2c:	230f      	movs	r3, #15
   27a2e:	18fb      	adds	r3, r7, r3
   27a30:	221e      	movs	r2, #30
   27a32:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27a34:	68bb      	ldr	r3, [r7, #8]
   27a36:	2204      	movs	r2, #4
   27a38:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27a3a:	687b      	ldr	r3, [r7, #4]
   27a3c:	799b      	ldrb	r3, [r3, #6]
   27a3e:	2b01      	cmp	r3, #1
   27a40:	d108      	bne.n	27a54 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   27a42:	68bb      	ldr	r3, [r7, #8]
   27a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27a46:	b29b      	uxth	r3, r3
   27a48:	05db      	lsls	r3, r3, #23
   27a4a:	0ddb      	lsrs	r3, r3, #23
   27a4c:	b29a      	uxth	r2, r3
   27a4e:	683b      	ldr	r3, [r7, #0]
   27a50:	801a      	strh	r2, [r3, #0]
   27a52:	e005      	b.n	27a60 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   27a54:	68bb      	ldr	r3, [r7, #8]
   27a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27a58:	b2db      	uxtb	r3, r3
   27a5a:	b29a      	uxth	r2, r3
   27a5c:	683b      	ldr	r3, [r7, #0]
   27a5e:	801a      	strh	r2, [r3, #0]
	return retval;
   27a60:	230f      	movs	r3, #15
   27a62:	18fb      	adds	r3, r7, r3
   27a64:	781b      	ldrb	r3, [r3, #0]
}
   27a66:	0018      	movs	r0, r3
   27a68:	46bd      	mov	sp, r7
   27a6a:	b004      	add	sp, #16
   27a6c:	bd80      	pop	{r7, pc}
   27a6e:	46c0      	nop			; (mov r8, r8)
   27a70:	0002797d 	.word	0x0002797d

00027a74 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   27a74:	b590      	push	{r4, r7, lr}
   27a76:	b089      	sub	sp, #36	; 0x24
   27a78:	af00      	add	r7, sp, #0
   27a7a:	6078      	str	r0, [r7, #4]
   27a7c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   27a7e:	230c      	movs	r3, #12
   27a80:	18fb      	adds	r3, r7, r3
   27a82:	2200      	movs	r2, #0
   27a84:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   27a86:	687b      	ldr	r3, [r7, #4]
   27a88:	681b      	ldr	r3, [r3, #0]
   27a8a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   27a8c:	687b      	ldr	r3, [r7, #4]
   27a8e:	0018      	movs	r0, r3
   27a90:	4b24      	ldr	r3, [pc, #144]	; (27b24 <spi_set_baudrate+0xb0>)
   27a92:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   27a94:	46c0      	nop			; (mov r8, r8)
   27a96:	687b      	ldr	r3, [r7, #4]
   27a98:	0018      	movs	r0, r3
   27a9a:	4b23      	ldr	r3, [pc, #140]	; (27b28 <spi_set_baudrate+0xb4>)
   27a9c:	4798      	blx	r3
   27a9e:	1e03      	subs	r3, r0, #0
   27aa0:	d1f9      	bne.n	27a96 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27aa2:	687b      	ldr	r3, [r7, #4]
   27aa4:	681b      	ldr	r3, [r3, #0]
   27aa6:	0018      	movs	r0, r3
   27aa8:	4b20      	ldr	r3, [pc, #128]	; (27b2c <spi_set_baudrate+0xb8>)
   27aaa:	4798      	blx	r3
   27aac:	0003      	movs	r3, r0
   27aae:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27ab0:	69bb      	ldr	r3, [r7, #24]
   27ab2:	3314      	adds	r3, #20
   27ab4:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27ab6:	697b      	ldr	r3, [r7, #20]
   27ab8:	b2db      	uxtb	r3, r3
   27aba:	0018      	movs	r0, r3
   27abc:	4b1c      	ldr	r3, [pc, #112]	; (27b30 <spi_set_baudrate+0xbc>)
   27abe:	4798      	blx	r3
   27ac0:	0003      	movs	r3, r0
   27ac2:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   27ac4:	230f      	movs	r3, #15
   27ac6:	18fc      	adds	r4, r7, r3
   27ac8:	230c      	movs	r3, #12
   27aca:	18fa      	adds	r2, r7, r3
   27acc:	6939      	ldr	r1, [r7, #16]
   27ace:	683b      	ldr	r3, [r7, #0]
   27ad0:	0018      	movs	r0, r3
   27ad2:	4b18      	ldr	r3, [pc, #96]	; (27b34 <spi_set_baudrate+0xc0>)
   27ad4:	4798      	blx	r3
   27ad6:	0003      	movs	r3, r0
   27ad8:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   27ada:	230f      	movs	r3, #15
   27adc:	18fb      	adds	r3, r7, r3
   27ade:	781b      	ldrb	r3, [r3, #0]
   27ae0:	2b00      	cmp	r3, #0
   27ae2:	d001      	beq.n	27ae8 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   27ae4:	2317      	movs	r3, #23
   27ae6:	e018      	b.n	27b1a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   27ae8:	230c      	movs	r3, #12
   27aea:	18fb      	adds	r3, r7, r3
   27aec:	881b      	ldrh	r3, [r3, #0]
   27aee:	b2da      	uxtb	r2, r3
   27af0:	69fb      	ldr	r3, [r7, #28]
   27af2:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   27af4:	46c0      	nop			; (mov r8, r8)
   27af6:	687b      	ldr	r3, [r7, #4]
   27af8:	0018      	movs	r0, r3
   27afa:	4b0b      	ldr	r3, [pc, #44]	; (27b28 <spi_set_baudrate+0xb4>)
   27afc:	4798      	blx	r3
   27afe:	1e03      	subs	r3, r0, #0
   27b00:	d1f9      	bne.n	27af6 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   27b02:	687b      	ldr	r3, [r7, #4]
   27b04:	0018      	movs	r0, r3
   27b06:	4b0c      	ldr	r3, [pc, #48]	; (27b38 <spi_set_baudrate+0xc4>)
   27b08:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   27b0a:	46c0      	nop			; (mov r8, r8)
   27b0c:	687b      	ldr	r3, [r7, #4]
   27b0e:	0018      	movs	r0, r3
   27b10:	4b05      	ldr	r3, [pc, #20]	; (27b28 <spi_set_baudrate+0xb4>)
   27b12:	4798      	blx	r3
   27b14:	1e03      	subs	r3, r0, #0
   27b16:	d1f9      	bne.n	27b0c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   27b18:	2300      	movs	r3, #0
}
   27b1a:	0018      	movs	r0, r3
   27b1c:	46bd      	mov	sp, r7
   27b1e:	b009      	add	sp, #36	; 0x24
   27b20:	bd90      	pop	{r4, r7, pc}
   27b22:	46c0      	nop			; (mov r8, r8)
   27b24:	000278d1 	.word	0x000278d1
   27b28:	00027861 	.word	0x00027861
   27b2c:	000274cd 	.word	0x000274cd
   27b30:	00029e81 	.word	0x00029e81
   27b34:	00027047 	.word	0x00027047
   27b38:	00027881 	.word	0x00027881

00027b3c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   27b3c:	b590      	push	{r4, r7, lr}
   27b3e:	b093      	sub	sp, #76	; 0x4c
   27b40:	af00      	add	r7, sp, #0
   27b42:	6078      	str	r0, [r7, #4]
   27b44:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   27b46:	687b      	ldr	r3, [r7, #4]
   27b48:	681b      	ldr	r3, [r3, #0]
   27b4a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   27b4c:	687b      	ldr	r3, [r7, #4]
   27b4e:	681b      	ldr	r3, [r3, #0]
   27b50:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   27b52:	231c      	movs	r3, #28
   27b54:	18fb      	adds	r3, r7, r3
   27b56:	0018      	movs	r0, r3
   27b58:	4b75      	ldr	r3, [pc, #468]	; (27d30 <_spi_set_config+0x1f4>)
   27b5a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27b5c:	231c      	movs	r3, #28
   27b5e:	18fb      	adds	r3, r7, r3
   27b60:	2200      	movs	r2, #0
   27b62:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   27b64:	683b      	ldr	r3, [r7, #0]
   27b66:	781b      	ldrb	r3, [r3, #0]
   27b68:	2b00      	cmp	r3, #0
   27b6a:	d103      	bne.n	27b74 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   27b6c:	231c      	movs	r3, #28
   27b6e:	18fb      	adds	r3, r7, r3
   27b70:	2200      	movs	r2, #0
   27b72:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27b74:	683b      	ldr	r3, [r7, #0]
   27b76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   27b78:	230c      	movs	r3, #12
   27b7a:	18fb      	adds	r3, r7, r3
   27b7c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   27b7e:	683b      	ldr	r3, [r7, #0]
   27b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   27b82:	230c      	movs	r3, #12
   27b84:	18fb      	adds	r3, r7, r3
   27b86:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   27b88:	683b      	ldr	r3, [r7, #0]
   27b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   27b8c:	230c      	movs	r3, #12
   27b8e:	18fb      	adds	r3, r7, r3
   27b90:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   27b92:	683b      	ldr	r3, [r7, #0]
   27b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   27b96:	230c      	movs	r3, #12
   27b98:	18fb      	adds	r3, r7, r3
   27b9a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   27b9c:	2347      	movs	r3, #71	; 0x47
   27b9e:	18fb      	adds	r3, r7, r3
   27ba0:	2200      	movs	r2, #0
   27ba2:	701a      	strb	r2, [r3, #0]
   27ba4:	e02c      	b.n	27c00 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   27ba6:	2347      	movs	r3, #71	; 0x47
   27ba8:	18fb      	adds	r3, r7, r3
   27baa:	781a      	ldrb	r2, [r3, #0]
   27bac:	230c      	movs	r3, #12
   27bae:	18fb      	adds	r3, r7, r3
   27bb0:	0092      	lsls	r2, r2, #2
   27bb2:	58d3      	ldr	r3, [r2, r3]
   27bb4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   27bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27bb8:	2b00      	cmp	r3, #0
   27bba:	d109      	bne.n	27bd0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   27bbc:	2347      	movs	r3, #71	; 0x47
   27bbe:	18fb      	adds	r3, r7, r3
   27bc0:	781a      	ldrb	r2, [r3, #0]
   27bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27bc4:	0011      	movs	r1, r2
   27bc6:	0018      	movs	r0, r3
   27bc8:	4b5a      	ldr	r3, [pc, #360]	; (27d34 <_spi_set_config+0x1f8>)
   27bca:	4798      	blx	r3
   27bcc:	0003      	movs	r3, r0
   27bce:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   27bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27bd2:	3301      	adds	r3, #1
   27bd4:	d00d      	beq.n	27bf2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   27bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27bd8:	b2da      	uxtb	r2, r3
   27bda:	231c      	movs	r3, #28
   27bdc:	18fb      	adds	r3, r7, r3
   27bde:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   27be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27be2:	0c1b      	lsrs	r3, r3, #16
   27be4:	b2db      	uxtb	r3, r3
   27be6:	221c      	movs	r2, #28
   27be8:	18ba      	adds	r2, r7, r2
   27bea:	0011      	movs	r1, r2
   27bec:	0018      	movs	r0, r3
   27bee:	4b52      	ldr	r3, [pc, #328]	; (27d38 <_spi_set_config+0x1fc>)
   27bf0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   27bf2:	2347      	movs	r3, #71	; 0x47
   27bf4:	18fb      	adds	r3, r7, r3
   27bf6:	781a      	ldrb	r2, [r3, #0]
   27bf8:	2347      	movs	r3, #71	; 0x47
   27bfa:	18fb      	adds	r3, r7, r3
   27bfc:	3201      	adds	r2, #1
   27bfe:	701a      	strb	r2, [r3, #0]
   27c00:	2347      	movs	r3, #71	; 0x47
   27c02:	18fb      	adds	r3, r7, r3
   27c04:	781b      	ldrb	r3, [r3, #0]
   27c06:	2b03      	cmp	r3, #3
   27c08:	d9cd      	bls.n	27ba6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   27c0a:	683b      	ldr	r3, [r7, #0]
   27c0c:	781a      	ldrb	r2, [r3, #0]
   27c0e:	687b      	ldr	r3, [r7, #4]
   27c10:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   27c12:	683b      	ldr	r3, [r7, #0]
   27c14:	7c1a      	ldrb	r2, [r3, #16]
   27c16:	687b      	ldr	r3, [r7, #4]
   27c18:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   27c1a:	683b      	ldr	r3, [r7, #0]
   27c1c:	7c9a      	ldrb	r2, [r3, #18]
   27c1e:	687b      	ldr	r3, [r7, #4]
   27c20:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   27c22:	683b      	ldr	r3, [r7, #0]
   27c24:	7d1a      	ldrb	r2, [r3, #20]
   27c26:	687b      	ldr	r3, [r7, #4]
   27c28:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   27c2a:	230a      	movs	r3, #10
   27c2c:	18fb      	adds	r3, r7, r3
   27c2e:	2200      	movs	r2, #0
   27c30:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   27c32:	2300      	movs	r3, #0
   27c34:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   27c36:	2300      	movs	r3, #0
   27c38:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   27c3a:	683b      	ldr	r3, [r7, #0]
   27c3c:	781b      	ldrb	r3, [r3, #0]
   27c3e:	2b01      	cmp	r3, #1
   27c40:	d129      	bne.n	27c96 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27c42:	687b      	ldr	r3, [r7, #4]
   27c44:	681b      	ldr	r3, [r3, #0]
   27c46:	0018      	movs	r0, r3
   27c48:	4b3c      	ldr	r3, [pc, #240]	; (27d3c <_spi_set_config+0x200>)
   27c4a:	4798      	blx	r3
   27c4c:	0003      	movs	r3, r0
   27c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27c52:	3314      	adds	r3, #20
   27c54:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27c58:	b2db      	uxtb	r3, r3
   27c5a:	0018      	movs	r0, r3
   27c5c:	4b38      	ldr	r3, [pc, #224]	; (27d40 <_spi_set_config+0x204>)
   27c5e:	4798      	blx	r3
   27c60:	0003      	movs	r3, r0
   27c62:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   27c64:	683b      	ldr	r3, [r7, #0]
   27c66:	699b      	ldr	r3, [r3, #24]
   27c68:	2223      	movs	r2, #35	; 0x23
   27c6a:	18bc      	adds	r4, r7, r2
   27c6c:	220a      	movs	r2, #10
   27c6e:	18ba      	adds	r2, r7, r2
   27c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27c72:	0018      	movs	r0, r3
   27c74:	4b33      	ldr	r3, [pc, #204]	; (27d44 <_spi_set_config+0x208>)
   27c76:	4798      	blx	r3
   27c78:	0003      	movs	r3, r0
   27c7a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   27c7c:	2323      	movs	r3, #35	; 0x23
   27c7e:	18fb      	adds	r3, r7, r3
   27c80:	781b      	ldrb	r3, [r3, #0]
   27c82:	2b00      	cmp	r3, #0
   27c84:	d001      	beq.n	27c8a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   27c86:	2317      	movs	r3, #23
   27c88:	e04e      	b.n	27d28 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   27c8a:	230a      	movs	r3, #10
   27c8c:	18fb      	adds	r3, r7, r3
   27c8e:	881b      	ldrh	r3, [r3, #0]
   27c90:	b2da      	uxtb	r2, r3
   27c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27c94:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   27c96:	683b      	ldr	r3, [r7, #0]
   27c98:	685b      	ldr	r3, [r3, #4]
   27c9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27c9c:	4313      	orrs	r3, r2
   27c9e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   27ca0:	683b      	ldr	r3, [r7, #0]
   27ca2:	689b      	ldr	r3, [r3, #8]
   27ca4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27ca6:	4313      	orrs	r3, r2
   27ca8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   27caa:	683b      	ldr	r3, [r7, #0]
   27cac:	68db      	ldr	r3, [r3, #12]
   27cae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27cb0:	4313      	orrs	r3, r2
   27cb2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   27cb4:	683b      	ldr	r3, [r7, #0]
   27cb6:	7c1b      	ldrb	r3, [r3, #16]
   27cb8:	001a      	movs	r2, r3
   27cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27cbc:	4313      	orrs	r3, r2
   27cbe:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   27cc0:	683b      	ldr	r3, [r7, #0]
   27cc2:	7c5b      	ldrb	r3, [r3, #17]
   27cc4:	2b00      	cmp	r3, #0
   27cc6:	d103      	bne.n	27cd0 <_spi_set_config+0x194>
   27cc8:	4b1f      	ldr	r3, [pc, #124]	; (27d48 <_spi_set_config+0x20c>)
   27cca:	4798      	blx	r3
   27ccc:	1e03      	subs	r3, r0, #0
   27cce:	d003      	beq.n	27cd8 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   27cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27cd2:	2280      	movs	r2, #128	; 0x80
   27cd4:	4313      	orrs	r3, r2
   27cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   27cd8:	683b      	ldr	r3, [r7, #0]
   27cda:	7c9b      	ldrb	r3, [r3, #18]
   27cdc:	2b00      	cmp	r3, #0
   27cde:	d004      	beq.n	27cea <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   27ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27ce2:	2280      	movs	r2, #128	; 0x80
   27ce4:	0292      	lsls	r2, r2, #10
   27ce6:	4313      	orrs	r3, r2
   27ce8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   27cea:	683b      	ldr	r3, [r7, #0]
   27cec:	7cdb      	ldrb	r3, [r3, #19]
   27cee:	2b00      	cmp	r3, #0
   27cf0:	d004      	beq.n	27cfc <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   27cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27cf4:	2280      	movs	r2, #128	; 0x80
   27cf6:	0092      	lsls	r2, r2, #2
   27cf8:	4313      	orrs	r3, r2
   27cfa:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   27cfc:	683b      	ldr	r3, [r7, #0]
   27cfe:	7d1b      	ldrb	r3, [r3, #20]
   27d00:	2b00      	cmp	r3, #0
   27d02:	d004      	beq.n	27d0e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   27d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27d06:	2280      	movs	r2, #128	; 0x80
   27d08:	0192      	lsls	r2, r2, #6
   27d0a:	4313      	orrs	r3, r2
   27d0c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   27d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27d10:	681a      	ldr	r2, [r3, #0]
   27d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27d14:	431a      	orrs	r2, r3
   27d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27d18:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   27d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27d1c:	685a      	ldr	r2, [r3, #4]
   27d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27d20:	431a      	orrs	r2, r3
   27d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27d24:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   27d26:	2300      	movs	r3, #0
}
   27d28:	0018      	movs	r0, r3
   27d2a:	46bd      	mov	sp, r7
   27d2c:	b013      	add	sp, #76	; 0x4c
   27d2e:	bd90      	pop	{r4, r7, pc}
   27d30:	00027671 	.word	0x00027671
   27d34:	00027311 	.word	0x00027311
   27d38:	0002a0bd 	.word	0x0002a0bd
   27d3c:	000274cd 	.word	0x000274cd
   27d40:	00029e81 	.word	0x00029e81
   27d44:	00027047 	.word	0x00027047
   27d48:	000277e5 	.word	0x000277e5

00027d4c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   27d4c:	b590      	push	{r4, r7, lr}
   27d4e:	b08b      	sub	sp, #44	; 0x2c
   27d50:	af00      	add	r7, sp, #0
   27d52:	60f8      	str	r0, [r7, #12]
   27d54:	60b9      	str	r1, [r7, #8]
   27d56:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27d58:	68fb      	ldr	r3, [r7, #12]
   27d5a:	68ba      	ldr	r2, [r7, #8]
   27d5c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   27d5e:	68fb      	ldr	r3, [r7, #12]
   27d60:	681b      	ldr	r3, [r3, #0]
   27d62:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   27d64:	6a3b      	ldr	r3, [r7, #32]
   27d66:	681b      	ldr	r3, [r3, #0]
   27d68:	2202      	movs	r2, #2
   27d6a:	4013      	ands	r3, r2
   27d6c:	d001      	beq.n	27d72 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   27d6e:	231c      	movs	r3, #28
   27d70:	e09c      	b.n	27eac <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   27d72:	6a3b      	ldr	r3, [r7, #32]
   27d74:	681b      	ldr	r3, [r3, #0]
   27d76:	2201      	movs	r2, #1
   27d78:	4013      	ands	r3, r2
   27d7a:	d001      	beq.n	27d80 <spi_init+0x34>
		return STATUS_BUSY;
   27d7c:	2305      	movs	r3, #5
   27d7e:	e095      	b.n	27eac <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27d80:	68fb      	ldr	r3, [r7, #12]
   27d82:	681b      	ldr	r3, [r3, #0]
   27d84:	0018      	movs	r0, r3
   27d86:	4b4b      	ldr	r3, [pc, #300]	; (27eb4 <spi_init+0x168>)
   27d88:	4798      	blx	r3
   27d8a:	0003      	movs	r3, r0
   27d8c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   27d8e:	69fb      	ldr	r3, [r7, #28]
   27d90:	3302      	adds	r3, #2
   27d92:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27d94:	69fb      	ldr	r3, [r7, #28]
   27d96:	3314      	adds	r3, #20
   27d98:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   27d9a:	2201      	movs	r2, #1
   27d9c:	69bb      	ldr	r3, [r7, #24]
   27d9e:	409a      	lsls	r2, r3
   27da0:	0013      	movs	r3, r2
   27da2:	0019      	movs	r1, r3
   27da4:	2002      	movs	r0, #2
   27da6:	4b44      	ldr	r3, [pc, #272]	; (27eb8 <spi_init+0x16c>)
   27da8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27daa:	2310      	movs	r3, #16
   27dac:	18fb      	adds	r3, r7, r3
   27dae:	0018      	movs	r0, r3
   27db0:	4b42      	ldr	r3, [pc, #264]	; (27ebc <spi_init+0x170>)
   27db2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   27db4:	687b      	ldr	r3, [r7, #4]
   27db6:	2224      	movs	r2, #36	; 0x24
   27db8:	5c9a      	ldrb	r2, [r3, r2]
   27dba:	2310      	movs	r3, #16
   27dbc:	18fb      	adds	r3, r7, r3
   27dbe:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   27dc0:	697b      	ldr	r3, [r7, #20]
   27dc2:	b2db      	uxtb	r3, r3
   27dc4:	2210      	movs	r2, #16
   27dc6:	18ba      	adds	r2, r7, r2
   27dc8:	0011      	movs	r1, r2
   27dca:	0018      	movs	r0, r3
   27dcc:	4b3c      	ldr	r3, [pc, #240]	; (27ec0 <spi_init+0x174>)
   27dce:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   27dd0:	697b      	ldr	r3, [r7, #20]
   27dd2:	b2db      	uxtb	r3, r3
   27dd4:	0018      	movs	r0, r3
   27dd6:	4b3b      	ldr	r3, [pc, #236]	; (27ec4 <spi_init+0x178>)
   27dd8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   27dda:	687b      	ldr	r3, [r7, #4]
   27ddc:	2224      	movs	r2, #36	; 0x24
   27dde:	5c9b      	ldrb	r3, [r3, r2]
   27de0:	2100      	movs	r1, #0
   27de2:	0018      	movs	r0, r3
   27de4:	4b38      	ldr	r3, [pc, #224]	; (27ec8 <spi_init+0x17c>)
   27de6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   27de8:	687b      	ldr	r3, [r7, #4]
   27dea:	781b      	ldrb	r3, [r3, #0]
   27dec:	2b01      	cmp	r3, #1
   27dee:	d105      	bne.n	27dfc <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   27df0:	6a3b      	ldr	r3, [r7, #32]
   27df2:	681b      	ldr	r3, [r3, #0]
   27df4:	220c      	movs	r2, #12
   27df6:	431a      	orrs	r2, r3
   27df8:	6a3b      	ldr	r3, [r7, #32]
   27dfa:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   27dfc:	2327      	movs	r3, #39	; 0x27
   27dfe:	18fb      	adds	r3, r7, r3
   27e00:	2200      	movs	r2, #0
   27e02:	701a      	strb	r2, [r3, #0]
   27e04:	e010      	b.n	27e28 <spi_init+0xdc>
		module->callback[i]        = NULL;
   27e06:	2327      	movs	r3, #39	; 0x27
   27e08:	18fb      	adds	r3, r7, r3
   27e0a:	781b      	ldrb	r3, [r3, #0]
   27e0c:	68fa      	ldr	r2, [r7, #12]
   27e0e:	3302      	adds	r3, #2
   27e10:	009b      	lsls	r3, r3, #2
   27e12:	18d3      	adds	r3, r2, r3
   27e14:	3304      	adds	r3, #4
   27e16:	2200      	movs	r2, #0
   27e18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   27e1a:	2327      	movs	r3, #39	; 0x27
   27e1c:	18fb      	adds	r3, r7, r3
   27e1e:	781a      	ldrb	r2, [r3, #0]
   27e20:	2327      	movs	r3, #39	; 0x27
   27e22:	18fb      	adds	r3, r7, r3
   27e24:	3201      	adds	r2, #1
   27e26:	701a      	strb	r2, [r3, #0]
   27e28:	2327      	movs	r3, #39	; 0x27
   27e2a:	18fb      	adds	r3, r7, r3
   27e2c:	781b      	ldrb	r3, [r3, #0]
   27e2e:	2b06      	cmp	r3, #6
   27e30:	d9e9      	bls.n	27e06 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   27e32:	68fb      	ldr	r3, [r7, #12]
   27e34:	2200      	movs	r2, #0
   27e36:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   27e38:	68fb      	ldr	r3, [r7, #12]
   27e3a:	2200      	movs	r2, #0
   27e3c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   27e3e:	68fb      	ldr	r3, [r7, #12]
   27e40:	2200      	movs	r2, #0
   27e42:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   27e44:	68fb      	ldr	r3, [r7, #12]
   27e46:	2200      	movs	r2, #0
   27e48:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   27e4a:	68fb      	ldr	r3, [r7, #12]
   27e4c:	2236      	movs	r2, #54	; 0x36
   27e4e:	2100      	movs	r1, #0
   27e50:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   27e52:	68fb      	ldr	r3, [r7, #12]
   27e54:	2237      	movs	r2, #55	; 0x37
   27e56:	2100      	movs	r1, #0
   27e58:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   27e5a:	68fb      	ldr	r3, [r7, #12]
   27e5c:	2238      	movs	r2, #56	; 0x38
   27e5e:	2100      	movs	r1, #0
   27e60:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   27e62:	68fb      	ldr	r3, [r7, #12]
   27e64:	2203      	movs	r2, #3
   27e66:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   27e68:	68fb      	ldr	r3, [r7, #12]
   27e6a:	2200      	movs	r2, #0
   27e6c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   27e6e:	68fb      	ldr	r3, [r7, #12]
   27e70:	681b      	ldr	r3, [r3, #0]
   27e72:	2213      	movs	r2, #19
   27e74:	18bc      	adds	r4, r7, r2
   27e76:	0018      	movs	r0, r3
   27e78:	4b0e      	ldr	r3, [pc, #56]	; (27eb4 <spi_init+0x168>)
   27e7a:	4798      	blx	r3
   27e7c:	0003      	movs	r3, r0
   27e7e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   27e80:	4a12      	ldr	r2, [pc, #72]	; (27ecc <spi_init+0x180>)
   27e82:	2313      	movs	r3, #19
   27e84:	18fb      	adds	r3, r7, r3
   27e86:	781b      	ldrb	r3, [r3, #0]
   27e88:	0011      	movs	r1, r2
   27e8a:	0018      	movs	r0, r3
   27e8c:	4b10      	ldr	r3, [pc, #64]	; (27ed0 <spi_init+0x184>)
   27e8e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   27e90:	2313      	movs	r3, #19
   27e92:	18fb      	adds	r3, r7, r3
   27e94:	781a      	ldrb	r2, [r3, #0]
   27e96:	4b0f      	ldr	r3, [pc, #60]	; (27ed4 <spi_init+0x188>)
   27e98:	0092      	lsls	r2, r2, #2
   27e9a:	68f9      	ldr	r1, [r7, #12]
   27e9c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   27e9e:	687a      	ldr	r2, [r7, #4]
   27ea0:	68fb      	ldr	r3, [r7, #12]
   27ea2:	0011      	movs	r1, r2
   27ea4:	0018      	movs	r0, r3
   27ea6:	4b0c      	ldr	r3, [pc, #48]	; (27ed8 <spi_init+0x18c>)
   27ea8:	4798      	blx	r3
   27eaa:	0003      	movs	r3, r0
}
   27eac:	0018      	movs	r0, r3
   27eae:	46bd      	mov	sp, r7
   27eb0:	b00b      	add	sp, #44	; 0x2c
   27eb2:	bd90      	pop	{r4, r7, pc}
   27eb4:	000274cd 	.word	0x000274cd
   27eb8:	00027789 	.word	0x00027789
   27ebc:	00027771 	.word	0x00027771
   27ec0:	00029d5d 	.word	0x00029d5d
   27ec4:	00029da1 	.word	0x00029da1
   27ec8:	00027285 	.word	0x00027285
   27ecc:	000283a5 	.word	0x000283a5
   27ed0:	00027531 	.word	0x00027531
   27ed4:	20005794 	.word	0x20005794
   27ed8:	00027b3d 	.word	0x00027b3d

00027edc <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   27edc:	b590      	push	{r4, r7, lr}
   27ede:	b087      	sub	sp, #28
   27ee0:	af00      	add	r7, sp, #0
   27ee2:	60f8      	str	r0, [r7, #12]
   27ee4:	60b9      	str	r1, [r7, #8]
   27ee6:	0019      	movs	r1, r3
   27ee8:	1dbb      	adds	r3, r7, #6
   27eea:	801a      	strh	r2, [r3, #0]
   27eec:	1d3b      	adds	r3, r7, #4
   27eee:	1c0a      	adds	r2, r1, #0
   27ef0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   27ef2:	68fb      	ldr	r3, [r7, #12]
   27ef4:	2238      	movs	r2, #56	; 0x38
   27ef6:	5c9b      	ldrb	r3, [r3, r2]
   27ef8:	b2db      	uxtb	r3, r3
   27efa:	2b05      	cmp	r3, #5
   27efc:	d101      	bne.n	27f02 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   27efe:	2305      	movs	r3, #5
   27f00:	e07a      	b.n	27ff8 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   27f02:	1dbb      	adds	r3, r7, #6
   27f04:	881b      	ldrh	r3, [r3, #0]
   27f06:	2b00      	cmp	r3, #0
   27f08:	d101      	bne.n	27f0e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   27f0a:	2317      	movs	r3, #23
   27f0c:	e074      	b.n	27ff8 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   27f0e:	68fb      	ldr	r3, [r7, #12]
   27f10:	79db      	ldrb	r3, [r3, #7]
   27f12:	2201      	movs	r2, #1
   27f14:	4053      	eors	r3, r2
   27f16:	b2db      	uxtb	r3, r3
   27f18:	2b00      	cmp	r3, #0
   27f1a:	d001      	beq.n	27f20 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   27f1c:	231c      	movs	r3, #28
   27f1e:	e06b      	b.n	27ff8 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   27f20:	2316      	movs	r3, #22
   27f22:	18fb      	adds	r3, r7, r3
   27f24:	2200      	movs	r2, #0
   27f26:	801a      	strh	r2, [r3, #0]

	while (length--) {
   27f28:	e05e      	b.n	27fe8 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   27f2a:	68fb      	ldr	r3, [r7, #12]
   27f2c:	795b      	ldrb	r3, [r3, #5]
   27f2e:	2b01      	cmp	r3, #1
   27f30:	d112      	bne.n	27f58 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   27f32:	46c0      	nop			; (mov r8, r8)
   27f34:	68fb      	ldr	r3, [r7, #12]
   27f36:	0018      	movs	r0, r3
   27f38:	4b31      	ldr	r3, [pc, #196]	; (28000 <spi_read_buffer_wait+0x124>)
   27f3a:	4798      	blx	r3
   27f3c:	0003      	movs	r3, r0
   27f3e:	001a      	movs	r2, r3
   27f40:	2301      	movs	r3, #1
   27f42:	4053      	eors	r3, r2
   27f44:	b2db      	uxtb	r3, r3
   27f46:	2b00      	cmp	r3, #0
   27f48:	d1f4      	bne.n	27f34 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   27f4a:	1d3b      	adds	r3, r7, #4
   27f4c:	881a      	ldrh	r2, [r3, #0]
   27f4e:	68fb      	ldr	r3, [r7, #12]
   27f50:	0011      	movs	r1, r2
   27f52:	0018      	movs	r0, r3
   27f54:	4b2b      	ldr	r3, [pc, #172]	; (28004 <spi_read_buffer_wait+0x128>)
   27f56:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   27f58:	46c0      	nop			; (mov r8, r8)
   27f5a:	68fb      	ldr	r3, [r7, #12]
   27f5c:	0018      	movs	r0, r3
   27f5e:	4b2a      	ldr	r3, [pc, #168]	; (28008 <spi_read_buffer_wait+0x12c>)
   27f60:	4798      	blx	r3
   27f62:	0003      	movs	r3, r0
   27f64:	001a      	movs	r2, r3
   27f66:	2301      	movs	r3, #1
   27f68:	4053      	eors	r3, r2
   27f6a:	b2db      	uxtb	r3, r3
   27f6c:	2b00      	cmp	r3, #0
   27f6e:	d1f4      	bne.n	27f5a <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   27f70:	2312      	movs	r3, #18
   27f72:	18fb      	adds	r3, r7, r3
   27f74:	2200      	movs	r2, #0
   27f76:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   27f78:	2315      	movs	r3, #21
   27f7a:	18fc      	adds	r4, r7, r3
   27f7c:	2312      	movs	r3, #18
   27f7e:	18fa      	adds	r2, r7, r3
   27f80:	68fb      	ldr	r3, [r7, #12]
   27f82:	0011      	movs	r1, r2
   27f84:	0018      	movs	r0, r3
   27f86:	4b21      	ldr	r3, [pc, #132]	; (2800c <spi_read_buffer_wait+0x130>)
   27f88:	4798      	blx	r3
   27f8a:	0003      	movs	r3, r0
   27f8c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   27f8e:	2315      	movs	r3, #21
   27f90:	18fb      	adds	r3, r7, r3
   27f92:	781b      	ldrb	r3, [r3, #0]
   27f94:	2b00      	cmp	r3, #0
   27f96:	d003      	beq.n	27fa0 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   27f98:	2315      	movs	r3, #21
   27f9a:	18fb      	adds	r3, r7, r3
   27f9c:	781b      	ldrb	r3, [r3, #0]
   27f9e:	e02b      	b.n	27ff8 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   27fa0:	2316      	movs	r3, #22
   27fa2:	18fb      	adds	r3, r7, r3
   27fa4:	881b      	ldrh	r3, [r3, #0]
   27fa6:	2216      	movs	r2, #22
   27fa8:	18ba      	adds	r2, r7, r2
   27faa:	1c59      	adds	r1, r3, #1
   27fac:	8011      	strh	r1, [r2, #0]
   27fae:	001a      	movs	r2, r3
   27fb0:	68bb      	ldr	r3, [r7, #8]
   27fb2:	189b      	adds	r3, r3, r2
   27fb4:	2212      	movs	r2, #18
   27fb6:	18ba      	adds	r2, r7, r2
   27fb8:	8812      	ldrh	r2, [r2, #0]
   27fba:	b2d2      	uxtb	r2, r2
   27fbc:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27fbe:	68fb      	ldr	r3, [r7, #12]
   27fc0:	799b      	ldrb	r3, [r3, #6]
   27fc2:	2b01      	cmp	r3, #1
   27fc4:	d110      	bne.n	27fe8 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   27fc6:	2316      	movs	r3, #22
   27fc8:	18fb      	adds	r3, r7, r3
   27fca:	881b      	ldrh	r3, [r3, #0]
   27fcc:	2216      	movs	r2, #22
   27fce:	18ba      	adds	r2, r7, r2
   27fd0:	1c59      	adds	r1, r3, #1
   27fd2:	8011      	strh	r1, [r2, #0]
   27fd4:	001a      	movs	r2, r3
   27fd6:	68bb      	ldr	r3, [r7, #8]
   27fd8:	189b      	adds	r3, r3, r2
   27fda:	2212      	movs	r2, #18
   27fdc:	18ba      	adds	r2, r7, r2
   27fde:	8812      	ldrh	r2, [r2, #0]
   27fe0:	0a12      	lsrs	r2, r2, #8
   27fe2:	b292      	uxth	r2, r2
   27fe4:	b2d2      	uxtb	r2, r2
   27fe6:	701a      	strb	r2, [r3, #0]
	while (length--) {
   27fe8:	1dbb      	adds	r3, r7, #6
   27fea:	881b      	ldrh	r3, [r3, #0]
   27fec:	1dba      	adds	r2, r7, #6
   27fee:	1e59      	subs	r1, r3, #1
   27ff0:	8011      	strh	r1, [r2, #0]
   27ff2:	2b00      	cmp	r3, #0
   27ff4:	d199      	bne.n	27f2a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   27ff6:	2300      	movs	r3, #0
}
   27ff8:	0018      	movs	r0, r3
   27ffa:	46bd      	mov	sp, r7
   27ffc:	b007      	add	sp, #28
   27ffe:	bd90      	pop	{r4, r7, pc}
   28000:	00027955 	.word	0x00027955
   28004:	000279a5 	.word	0x000279a5
   28008:	0002797d 	.word	0x0002797d
   2800c:	000279ed 	.word	0x000279ed

00028010 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   28010:	b580      	push	{r7, lr}
   28012:	b086      	sub	sp, #24
   28014:	af00      	add	r7, sp, #0
   28016:	60f8      	str	r0, [r7, #12]
   28018:	60b9      	str	r1, [r7, #8]
   2801a:	1dfb      	adds	r3, r7, #7
   2801c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   2801e:	68fb      	ldr	r3, [r7, #12]
   28020:	795b      	ldrb	r3, [r3, #5]
   28022:	2b01      	cmp	r3, #1
   28024:	d001      	beq.n	2802a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   28026:	2315      	movs	r3, #21
   28028:	e05c      	b.n	280e4 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   2802a:	68fb      	ldr	r3, [r7, #12]
   2802c:	7a1b      	ldrb	r3, [r3, #8]
   2802e:	2201      	movs	r2, #1
   28030:	4053      	eors	r3, r2
   28032:	b2db      	uxtb	r3, r3
   28034:	2b00      	cmp	r3, #0
   28036:	d054      	beq.n	280e2 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   28038:	1dfb      	adds	r3, r7, #7
   2803a:	781b      	ldrb	r3, [r3, #0]
   2803c:	2b00      	cmp	r3, #0
   2803e:	d04a      	beq.n	280d6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   28040:	68bb      	ldr	r3, [r7, #8]
   28042:	785b      	ldrb	r3, [r3, #1]
   28044:	2b00      	cmp	r3, #0
   28046:	d03f      	beq.n	280c8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   28048:	68fb      	ldr	r3, [r7, #12]
   2804a:	0018      	movs	r0, r3
   2804c:	4b27      	ldr	r3, [pc, #156]	; (280ec <spi_select_slave+0xdc>)
   2804e:	4798      	blx	r3
   28050:	0003      	movs	r3, r0
   28052:	001a      	movs	r2, r3
   28054:	2301      	movs	r3, #1
   28056:	4053      	eors	r3, r2
   28058:	b2db      	uxtb	r3, r3
   2805a:	2b00      	cmp	r3, #0
   2805c:	d007      	beq.n	2806e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   2805e:	68bb      	ldr	r3, [r7, #8]
   28060:	781b      	ldrb	r3, [r3, #0]
   28062:	2101      	movs	r1, #1
   28064:	0018      	movs	r0, r3
   28066:	4b22      	ldr	r3, [pc, #136]	; (280f0 <spi_select_slave+0xe0>)
   28068:	4798      	blx	r3
					return STATUS_BUSY;
   2806a:	2305      	movs	r3, #5
   2806c:	e03a      	b.n	280e4 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2806e:	68bb      	ldr	r3, [r7, #8]
   28070:	781b      	ldrb	r3, [r3, #0]
   28072:	2100      	movs	r1, #0
   28074:	0018      	movs	r0, r3
   28076:	4b1e      	ldr	r3, [pc, #120]	; (280f0 <spi_select_slave+0xe0>)
   28078:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   2807a:	68bb      	ldr	r3, [r7, #8]
   2807c:	789b      	ldrb	r3, [r3, #2]
   2807e:	b29a      	uxth	r2, r3
   28080:	68fb      	ldr	r3, [r7, #12]
   28082:	0011      	movs	r1, r2
   28084:	0018      	movs	r0, r3
   28086:	4b1b      	ldr	r3, [pc, #108]	; (280f4 <spi_select_slave+0xe4>)
   28088:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2808a:	68fb      	ldr	r3, [r7, #12]
   2808c:	79db      	ldrb	r3, [r3, #7]
   2808e:	2201      	movs	r2, #1
   28090:	4053      	eors	r3, r2
   28092:	b2db      	uxtb	r3, r3
   28094:	2b00      	cmp	r3, #0
   28096:	d024      	beq.n	280e2 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   28098:	46c0      	nop			; (mov r8, r8)
   2809a:	68fb      	ldr	r3, [r7, #12]
   2809c:	0018      	movs	r0, r3
   2809e:	4b16      	ldr	r3, [pc, #88]	; (280f8 <spi_select_slave+0xe8>)
   280a0:	4798      	blx	r3
   280a2:	0003      	movs	r3, r0
   280a4:	001a      	movs	r2, r3
   280a6:	2301      	movs	r3, #1
   280a8:	4053      	eors	r3, r2
   280aa:	b2db      	uxtb	r3, r3
   280ac:	2b00      	cmp	r3, #0
   280ae:	d1f4      	bne.n	2809a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   280b0:	2316      	movs	r3, #22
   280b2:	18fb      	adds	r3, r7, r3
   280b4:	2200      	movs	r2, #0
   280b6:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   280b8:	2316      	movs	r3, #22
   280ba:	18fa      	adds	r2, r7, r3
   280bc:	68fb      	ldr	r3, [r7, #12]
   280be:	0011      	movs	r1, r2
   280c0:	0018      	movs	r0, r3
   280c2:	4b0e      	ldr	r3, [pc, #56]	; (280fc <spi_select_slave+0xec>)
   280c4:	4798      	blx	r3
   280c6:	e00c      	b.n	280e2 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   280c8:	68bb      	ldr	r3, [r7, #8]
   280ca:	781b      	ldrb	r3, [r3, #0]
   280cc:	2100      	movs	r1, #0
   280ce:	0018      	movs	r0, r3
   280d0:	4b07      	ldr	r3, [pc, #28]	; (280f0 <spi_select_slave+0xe0>)
   280d2:	4798      	blx	r3
   280d4:	e005      	b.n	280e2 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   280d6:	68bb      	ldr	r3, [r7, #8]
   280d8:	781b      	ldrb	r3, [r3, #0]
   280da:	2101      	movs	r1, #1
   280dc:	0018      	movs	r0, r3
   280de:	4b04      	ldr	r3, [pc, #16]	; (280f0 <spi_select_slave+0xe0>)
   280e0:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   280e2:	2300      	movs	r3, #0
}
   280e4:	0018      	movs	r0, r3
   280e6:	46bd      	mov	sp, r7
   280e8:	b006      	add	sp, #24
   280ea:	bd80      	pop	{r7, pc}
   280ec:	00027955 	.word	0x00027955
   280f0:	0002771d 	.word	0x0002771d
   280f4:	000279a5 	.word	0x000279a5
   280f8:	0002797d 	.word	0x0002797d
   280fc:	000279ed 	.word	0x000279ed

00028100 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   28100:	b580      	push	{r7, lr}
   28102:	b086      	sub	sp, #24
   28104:	af00      	add	r7, sp, #0
   28106:	60f8      	str	r0, [r7, #12]
   28108:	60b9      	str	r1, [r7, #8]
   2810a:	1dbb      	adds	r3, r7, #6
   2810c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   2810e:	68fb      	ldr	r3, [r7, #12]
   28110:	2238      	movs	r2, #56	; 0x38
   28112:	5c9b      	ldrb	r3, [r3, r2]
   28114:	b2db      	uxtb	r3, r3
   28116:	2b05      	cmp	r3, #5
   28118:	d101      	bne.n	2811e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2811a:	2305      	movs	r3, #5
   2811c:	e087      	b.n	2822e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   2811e:	1dbb      	adds	r3, r7, #6
   28120:	881b      	ldrh	r3, [r3, #0]
   28122:	2b00      	cmp	r3, #0
   28124:	d101      	bne.n	2812a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   28126:	2317      	movs	r3, #23
   28128:	e081      	b.n	2822e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   2812a:	2316      	movs	r3, #22
   2812c:	18fb      	adds	r3, r7, r3
   2812e:	2200      	movs	r2, #0
   28130:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   28132:	2314      	movs	r3, #20
   28134:	18fb      	adds	r3, r7, r3
   28136:	1dba      	adds	r2, r7, #6
   28138:	8812      	ldrh	r2, [r2, #0]
   2813a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   2813c:	e05f      	b.n	281fe <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   2813e:	46c0      	nop			; (mov r8, r8)
   28140:	68fb      	ldr	r3, [r7, #12]
   28142:	0018      	movs	r0, r3
   28144:	4b3c      	ldr	r3, [pc, #240]	; (28238 <spi_write_buffer_wait+0x138>)
   28146:	4798      	blx	r3
   28148:	0003      	movs	r3, r0
   2814a:	001a      	movs	r2, r3
   2814c:	2301      	movs	r3, #1
   2814e:	4053      	eors	r3, r2
   28150:	b2db      	uxtb	r3, r3
   28152:	2b00      	cmp	r3, #0
   28154:	d1f4      	bne.n	28140 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   28156:	2316      	movs	r3, #22
   28158:	18fb      	adds	r3, r7, r3
   2815a:	881b      	ldrh	r3, [r3, #0]
   2815c:	2216      	movs	r2, #22
   2815e:	18ba      	adds	r2, r7, r2
   28160:	1c59      	adds	r1, r3, #1
   28162:	8011      	strh	r1, [r2, #0]
   28164:	001a      	movs	r2, r3
   28166:	68bb      	ldr	r3, [r7, #8]
   28168:	189b      	adds	r3, r3, r2
   2816a:	781a      	ldrb	r2, [r3, #0]
   2816c:	2312      	movs	r3, #18
   2816e:	18fb      	adds	r3, r7, r3
   28170:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28172:	68fb      	ldr	r3, [r7, #12]
   28174:	799b      	ldrb	r3, [r3, #6]
   28176:	2b01      	cmp	r3, #1
   28178:	d115      	bne.n	281a6 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   2817a:	2316      	movs	r3, #22
   2817c:	18fb      	adds	r3, r7, r3
   2817e:	881b      	ldrh	r3, [r3, #0]
   28180:	2216      	movs	r2, #22
   28182:	18ba      	adds	r2, r7, r2
   28184:	1c59      	adds	r1, r3, #1
   28186:	8011      	strh	r1, [r2, #0]
   28188:	001a      	movs	r2, r3
   2818a:	68bb      	ldr	r3, [r7, #8]
   2818c:	189b      	adds	r3, r3, r2
   2818e:	781b      	ldrb	r3, [r3, #0]
   28190:	021b      	lsls	r3, r3, #8
   28192:	b21a      	sxth	r2, r3
   28194:	2312      	movs	r3, #18
   28196:	18fb      	adds	r3, r7, r3
   28198:	2100      	movs	r1, #0
   2819a:	5e5b      	ldrsh	r3, [r3, r1]
   2819c:	4313      	orrs	r3, r2
   2819e:	b21a      	sxth	r2, r3
   281a0:	2312      	movs	r3, #18
   281a2:	18fb      	adds	r3, r7, r3
   281a4:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   281a6:	2312      	movs	r3, #18
   281a8:	18fb      	adds	r3, r7, r3
   281aa:	881a      	ldrh	r2, [r3, #0]
   281ac:	68fb      	ldr	r3, [r7, #12]
   281ae:	0011      	movs	r1, r2
   281b0:	0018      	movs	r0, r3
   281b2:	4b22      	ldr	r3, [pc, #136]	; (2823c <spi_write_buffer_wait+0x13c>)
   281b4:	4798      	blx	r3

		if (module->receiver_enabled) {
   281b6:	68fb      	ldr	r3, [r7, #12]
   281b8:	79db      	ldrb	r3, [r3, #7]
   281ba:	2214      	movs	r2, #20
   281bc:	18ba      	adds	r2, r7, r2
   281be:	2114      	movs	r1, #20
   281c0:	1879      	adds	r1, r7, r1
   281c2:	8809      	ldrh	r1, [r1, #0]
   281c4:	8011      	strh	r1, [r2, #0]
   281c6:	2b00      	cmp	r3, #0
   281c8:	d019      	beq.n	281fe <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   281ca:	46c0      	nop			; (mov r8, r8)
   281cc:	68fb      	ldr	r3, [r7, #12]
   281ce:	0018      	movs	r0, r3
   281d0:	4b1b      	ldr	r3, [pc, #108]	; (28240 <spi_write_buffer_wait+0x140>)
   281d2:	4798      	blx	r3
   281d4:	0003      	movs	r3, r0
   281d6:	001a      	movs	r2, r3
   281d8:	2301      	movs	r3, #1
   281da:	4053      	eors	r3, r2
   281dc:	b2db      	uxtb	r3, r3
   281de:	2b00      	cmp	r3, #0
   281e0:	d1f4      	bne.n	281cc <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   281e2:	2310      	movs	r3, #16
   281e4:	18fa      	adds	r2, r7, r3
   281e6:	68fb      	ldr	r3, [r7, #12]
   281e8:	0011      	movs	r1, r2
   281ea:	0018      	movs	r0, r3
   281ec:	4b15      	ldr	r3, [pc, #84]	; (28244 <spi_write_buffer_wait+0x144>)
   281ee:	4798      	blx	r3
			flush_length--;
   281f0:	2314      	movs	r3, #20
   281f2:	18fb      	adds	r3, r7, r3
   281f4:	881a      	ldrh	r2, [r3, #0]
   281f6:	2314      	movs	r3, #20
   281f8:	18fb      	adds	r3, r7, r3
   281fa:	3a01      	subs	r2, #1
   281fc:	801a      	strh	r2, [r3, #0]
	while (length--) {
   281fe:	1dbb      	adds	r3, r7, #6
   28200:	881b      	ldrh	r3, [r3, #0]
   28202:	1dba      	adds	r2, r7, #6
   28204:	1e59      	subs	r1, r3, #1
   28206:	8011      	strh	r1, [r2, #0]
   28208:	2b00      	cmp	r3, #0
   2820a:	d198      	bne.n	2813e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   2820c:	68fb      	ldr	r3, [r7, #12]
   2820e:	795b      	ldrb	r3, [r3, #5]
   28210:	2b01      	cmp	r3, #1
   28212:	d10b      	bne.n	2822c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   28214:	46c0      	nop			; (mov r8, r8)
   28216:	68fb      	ldr	r3, [r7, #12]
   28218:	0018      	movs	r0, r3
   2821a:	4b0b      	ldr	r3, [pc, #44]	; (28248 <spi_write_buffer_wait+0x148>)
   2821c:	4798      	blx	r3
   2821e:	0003      	movs	r3, r0
   28220:	001a      	movs	r2, r3
   28222:	2301      	movs	r3, #1
   28224:	4053      	eors	r3, r2
   28226:	b2db      	uxtb	r3, r3
   28228:	2b00      	cmp	r3, #0
   2822a:	d1f4      	bne.n	28216 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   2822c:	2300      	movs	r3, #0
}
   2822e:	0018      	movs	r0, r3
   28230:	46bd      	mov	sp, r7
   28232:	b006      	add	sp, #24
   28234:	bd80      	pop	{r7, pc}
   28236:	46c0      	nop			; (mov r8, r8)
   28238:	00027955 	.word	0x00027955
   2823c:	000279a5 	.word	0x000279a5
   28240:	0002797d 	.word	0x0002797d
   28244:	000279ed 	.word	0x000279ed
   28248:	0002792d 	.word	0x0002792d

0002824c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   2824c:	b580      	push	{r7, lr}
   2824e:	b084      	sub	sp, #16
   28250:	af00      	add	r7, sp, #0
   28252:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28254:	687b      	ldr	r3, [r7, #4]
   28256:	681b      	ldr	r3, [r3, #0]
   28258:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   2825a:	687b      	ldr	r3, [r7, #4]
   2825c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2825e:	781b      	ldrb	r3, [r3, #0]
   28260:	b2da      	uxtb	r2, r3
   28262:	230e      	movs	r3, #14
   28264:	18fb      	adds	r3, r7, r3
   28266:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   28268:	687b      	ldr	r3, [r7, #4]
   2826a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2826c:	1c5a      	adds	r2, r3, #1
   2826e:	687b      	ldr	r3, [r7, #4]
   28270:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28272:	687b      	ldr	r3, [r7, #4]
   28274:	799b      	ldrb	r3, [r3, #6]
   28276:	2b01      	cmp	r3, #1
   28278:	d113      	bne.n	282a2 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   2827a:	687b      	ldr	r3, [r7, #4]
   2827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2827e:	781b      	ldrb	r3, [r3, #0]
   28280:	b2db      	uxtb	r3, r3
   28282:	021b      	lsls	r3, r3, #8
   28284:	b21a      	sxth	r2, r3
   28286:	230e      	movs	r3, #14
   28288:	18fb      	adds	r3, r7, r3
   2828a:	2100      	movs	r1, #0
   2828c:	5e5b      	ldrsh	r3, [r3, r1]
   2828e:	4313      	orrs	r3, r2
   28290:	b21a      	sxth	r2, r3
   28292:	230e      	movs	r3, #14
   28294:	18fb      	adds	r3, r7, r3
   28296:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   28298:	687b      	ldr	r3, [r7, #4]
   2829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2829c:	1c5a      	adds	r2, r3, #1
   2829e:	687b      	ldr	r3, [r7, #4]
   282a0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   282a2:	230e      	movs	r3, #14
   282a4:	18fb      	adds	r3, r7, r3
   282a6:	881b      	ldrh	r3, [r3, #0]
   282a8:	05db      	lsls	r3, r3, #23
   282aa:	0dda      	lsrs	r2, r3, #23
   282ac:	68bb      	ldr	r3, [r7, #8]
   282ae:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   282b0:	687b      	ldr	r3, [r7, #4]
   282b2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   282b4:	b29b      	uxth	r3, r3
   282b6:	3b01      	subs	r3, #1
   282b8:	b29a      	uxth	r2, r3
   282ba:	687b      	ldr	r3, [r7, #4]
   282bc:	869a      	strh	r2, [r3, #52]	; 0x34
}
   282be:	46c0      	nop			; (mov r8, r8)
   282c0:	46bd      	mov	sp, r7
   282c2:	b004      	add	sp, #16
   282c4:	bd80      	pop	{r7, pc}
	...

000282c8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   282c8:	b580      	push	{r7, lr}
   282ca:	b084      	sub	sp, #16
   282cc:	af00      	add	r7, sp, #0
   282ce:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   282d0:	687b      	ldr	r3, [r7, #4]
   282d2:	681b      	ldr	r3, [r3, #0]
   282d4:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   282d6:	4b08      	ldr	r3, [pc, #32]	; (282f8 <_spi_write_dummy+0x30>)
   282d8:	881b      	ldrh	r3, [r3, #0]
   282da:	001a      	movs	r2, r3
   282dc:	68fb      	ldr	r3, [r7, #12]
   282de:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   282e0:	687b      	ldr	r3, [r7, #4]
   282e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   282e4:	b29b      	uxth	r3, r3
   282e6:	3b01      	subs	r3, #1
   282e8:	b29a      	uxth	r2, r3
   282ea:	687b      	ldr	r3, [r7, #4]
   282ec:	865a      	strh	r2, [r3, #50]	; 0x32
}
   282ee:	46c0      	nop			; (mov r8, r8)
   282f0:	46bd      	mov	sp, r7
   282f2:	b004      	add	sp, #16
   282f4:	bd80      	pop	{r7, pc}
   282f6:	46c0      	nop			; (mov r8, r8)
   282f8:	200057ac 	.word	0x200057ac

000282fc <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   282fc:	b580      	push	{r7, lr}
   282fe:	b084      	sub	sp, #16
   28300:	af00      	add	r7, sp, #0
   28302:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28304:	687b      	ldr	r3, [r7, #4]
   28306:	681b      	ldr	r3, [r3, #0]
   28308:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   2830a:	230a      	movs	r3, #10
   2830c:	18fb      	adds	r3, r7, r3
   2830e:	2200      	movs	r2, #0
   28310:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   28312:	68fb      	ldr	r3, [r7, #12]
   28314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   28316:	230a      	movs	r3, #10
   28318:	18fb      	adds	r3, r7, r3
   2831a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   2831c:	687b      	ldr	r3, [r7, #4]
   2831e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28320:	b29b      	uxth	r3, r3
   28322:	3b01      	subs	r3, #1
   28324:	b29a      	uxth	r2, r3
   28326:	687b      	ldr	r3, [r7, #4]
   28328:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2832a:	46c0      	nop			; (mov r8, r8)
   2832c:	46bd      	mov	sp, r7
   2832e:	b004      	add	sp, #16
   28330:	bd80      	pop	{r7, pc}

00028332 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   28332:	b580      	push	{r7, lr}
   28334:	b084      	sub	sp, #16
   28336:	af00      	add	r7, sp, #0
   28338:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2833a:	687b      	ldr	r3, [r7, #4]
   2833c:	681b      	ldr	r3, [r3, #0]
   2833e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   28340:	68fb      	ldr	r3, [r7, #12]
   28342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28344:	b29a      	uxth	r2, r3
   28346:	230a      	movs	r3, #10
   28348:	18fb      	adds	r3, r7, r3
   2834a:	05d2      	lsls	r2, r2, #23
   2834c:	0dd2      	lsrs	r2, r2, #23
   2834e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   28350:	687b      	ldr	r3, [r7, #4]
   28352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28354:	220a      	movs	r2, #10
   28356:	18ba      	adds	r2, r7, r2
   28358:	8812      	ldrh	r2, [r2, #0]
   2835a:	b2d2      	uxtb	r2, r2
   2835c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   2835e:	687b      	ldr	r3, [r7, #4]
   28360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28362:	1c5a      	adds	r2, r3, #1
   28364:	687b      	ldr	r3, [r7, #4]
   28366:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28368:	687b      	ldr	r3, [r7, #4]
   2836a:	799b      	ldrb	r3, [r3, #6]
   2836c:	2b01      	cmp	r3, #1
   2836e:	d10d      	bne.n	2838c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   28370:	687b      	ldr	r3, [r7, #4]
   28372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28374:	220a      	movs	r2, #10
   28376:	18ba      	adds	r2, r7, r2
   28378:	8812      	ldrh	r2, [r2, #0]
   2837a:	0a12      	lsrs	r2, r2, #8
   2837c:	b292      	uxth	r2, r2
   2837e:	b2d2      	uxtb	r2, r2
   28380:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   28382:	687b      	ldr	r3, [r7, #4]
   28384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28386:	1c5a      	adds	r2, r3, #1
   28388:	687b      	ldr	r3, [r7, #4]
   2838a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   2838c:	687b      	ldr	r3, [r7, #4]
   2838e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   28390:	b29b      	uxth	r3, r3
   28392:	3b01      	subs	r3, #1
   28394:	b29a      	uxth	r2, r3
   28396:	687b      	ldr	r3, [r7, #4]
   28398:	861a      	strh	r2, [r3, #48]	; 0x30
}
   2839a:	46c0      	nop			; (mov r8, r8)
   2839c:	46bd      	mov	sp, r7
   2839e:	b004      	add	sp, #16
   283a0:	bd80      	pop	{r7, pc}
	...

000283a4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   283a4:	b580      	push	{r7, lr}
   283a6:	b086      	sub	sp, #24
   283a8:	af00      	add	r7, sp, #0
   283aa:	0002      	movs	r2, r0
   283ac:	1dfb      	adds	r3, r7, #7
   283ae:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   283b0:	1dfb      	adds	r3, r7, #7
   283b2:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   283b4:	4b96      	ldr	r3, [pc, #600]	; (28610 <_spi_interrupt_handler+0x26c>)
   283b6:	0092      	lsls	r2, r2, #2
   283b8:	58d3      	ldr	r3, [r2, r3]
   283ba:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   283bc:	697b      	ldr	r3, [r7, #20]
   283be:	681b      	ldr	r3, [r3, #0]
   283c0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   283c2:	697b      	ldr	r3, [r7, #20]
   283c4:	2237      	movs	r2, #55	; 0x37
   283c6:	5c9a      	ldrb	r2, [r3, r2]
   283c8:	697b      	ldr	r3, [r7, #20]
   283ca:	2136      	movs	r1, #54	; 0x36
   283cc:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   283ce:	230f      	movs	r3, #15
   283d0:	18fb      	adds	r3, r7, r3
   283d2:	400a      	ands	r2, r1
   283d4:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   283d6:	693b      	ldr	r3, [r7, #16]
   283d8:	7e1b      	ldrb	r3, [r3, #24]
   283da:	b2da      	uxtb	r2, r3
   283dc:	230c      	movs	r3, #12
   283de:	18fb      	adds	r3, r7, r3
   283e0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   283e2:	693b      	ldr	r3, [r7, #16]
   283e4:	7d9b      	ldrb	r3, [r3, #22]
   283e6:	b2db      	uxtb	r3, r3
   283e8:	b29a      	uxth	r2, r3
   283ea:	230c      	movs	r3, #12
   283ec:	18fb      	adds	r3, r7, r3
   283ee:	210c      	movs	r1, #12
   283f0:	1879      	adds	r1, r7, r1
   283f2:	8809      	ldrh	r1, [r1, #0]
   283f4:	400a      	ands	r2, r1
   283f6:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   283f8:	230c      	movs	r3, #12
   283fa:	18fb      	adds	r3, r7, r3
   283fc:	881b      	ldrh	r3, [r3, #0]
   283fe:	2201      	movs	r2, #1
   28400:	4013      	ands	r3, r2
   28402:	d038      	beq.n	28476 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   28404:	697b      	ldr	r3, [r7, #20]
   28406:	795b      	ldrb	r3, [r3, #5]
   28408:	2b01      	cmp	r3, #1
   2840a:	d110      	bne.n	2842e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   2840c:	697b      	ldr	r3, [r7, #20]
   2840e:	7a5b      	ldrb	r3, [r3, #9]
   28410:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   28412:	2b00      	cmp	r3, #0
   28414:	d10b      	bne.n	2842e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   28416:	697b      	ldr	r3, [r7, #20]
   28418:	0018      	movs	r0, r3
   2841a:	4b7e      	ldr	r3, [pc, #504]	; (28614 <_spi_interrupt_handler+0x270>)
   2841c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   2841e:	697b      	ldr	r3, [r7, #20]
   28420:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28422:	b29b      	uxth	r3, r3
   28424:	2b00      	cmp	r3, #0
   28426:	d102      	bne.n	2842e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   28428:	693b      	ldr	r3, [r7, #16]
   2842a:	2201      	movs	r2, #1
   2842c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   2842e:	697b      	ldr	r3, [r7, #20]
   28430:	795b      	ldrb	r3, [r3, #5]
		if (0
   28432:	2b01      	cmp	r3, #1
   28434:	d11f      	bne.n	28476 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   28436:	697b      	ldr	r3, [r7, #20]
   28438:	7a5b      	ldrb	r3, [r3, #9]
   2843a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   2843c:	2b00      	cmp	r3, #0
   2843e:	d01a      	beq.n	28476 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   28440:	697b      	ldr	r3, [r7, #20]
   28442:	0018      	movs	r0, r3
   28444:	4b74      	ldr	r3, [pc, #464]	; (28618 <_spi_interrupt_handler+0x274>)
   28446:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   28448:	697b      	ldr	r3, [r7, #20]
   2844a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   2844c:	b29b      	uxth	r3, r3
   2844e:	2b00      	cmp	r3, #0
   28450:	d111      	bne.n	28476 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   28452:	693b      	ldr	r3, [r7, #16]
   28454:	2201      	movs	r2, #1
   28456:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   28458:	697b      	ldr	r3, [r7, #20]
   2845a:	7a5b      	ldrb	r3, [r3, #9]
   2845c:	b2db      	uxtb	r3, r3
   2845e:	2b01      	cmp	r3, #1
   28460:	d109      	bne.n	28476 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   28462:	697b      	ldr	r3, [r7, #20]
   28464:	79db      	ldrb	r3, [r3, #7]
   28466:	2201      	movs	r2, #1
   28468:	4053      	eors	r3, r2
   2846a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   2846c:	2b00      	cmp	r3, #0
   2846e:	d002      	beq.n	28476 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   28470:	693b      	ldr	r3, [r7, #16]
   28472:	2202      	movs	r2, #2
   28474:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   28476:	230c      	movs	r3, #12
   28478:	18fb      	adds	r3, r7, r3
   2847a:	881b      	ldrh	r3, [r3, #0]
   2847c:	2204      	movs	r2, #4
   2847e:	4013      	ands	r3, r2
   28480:	d100      	bne.n	28484 <_spi_interrupt_handler+0xe0>
   28482:	e07e      	b.n	28582 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   28484:	693b      	ldr	r3, [r7, #16]
   28486:	8b5b      	ldrh	r3, [r3, #26]
   28488:	b29b      	uxth	r3, r3
   2848a:	001a      	movs	r2, r3
   2848c:	2304      	movs	r3, #4
   2848e:	4013      	ands	r3, r2
   28490:	d022      	beq.n	284d8 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   28492:	697b      	ldr	r3, [r7, #20]
   28494:	7a5b      	ldrb	r3, [r3, #9]
   28496:	b2db      	uxtb	r3, r3
   28498:	2b01      	cmp	r3, #1
   2849a:	d014      	beq.n	284c6 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   2849c:	697b      	ldr	r3, [r7, #20]
   2849e:	2238      	movs	r2, #56	; 0x38
   284a0:	211e      	movs	r1, #30
   284a2:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   284a4:	697b      	ldr	r3, [r7, #20]
   284a6:	2203      	movs	r2, #3
   284a8:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   284aa:	693b      	ldr	r3, [r7, #16]
   284ac:	2205      	movs	r2, #5
   284ae:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   284b0:	230f      	movs	r3, #15
   284b2:	18fb      	adds	r3, r7, r3
   284b4:	781b      	ldrb	r3, [r3, #0]
   284b6:	2208      	movs	r2, #8
   284b8:	4013      	ands	r3, r2
   284ba:	d004      	beq.n	284c6 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   284bc:	697b      	ldr	r3, [r7, #20]
   284be:	699b      	ldr	r3, [r3, #24]
   284c0:	697a      	ldr	r2, [r7, #20]
   284c2:	0010      	movs	r0, r2
   284c4:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   284c6:	693b      	ldr	r3, [r7, #16]
   284c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   284ca:	230a      	movs	r3, #10
   284cc:	18fb      	adds	r3, r7, r3
   284ce:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   284d0:	693b      	ldr	r3, [r7, #16]
   284d2:	2204      	movs	r2, #4
   284d4:	835a      	strh	r2, [r3, #26]
   284d6:	e054      	b.n	28582 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   284d8:	697b      	ldr	r3, [r7, #20]
   284da:	7a5b      	ldrb	r3, [r3, #9]
   284dc:	b2db      	uxtb	r3, r3
   284de:	2b01      	cmp	r3, #1
   284e0:	d11e      	bne.n	28520 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   284e2:	697b      	ldr	r3, [r7, #20]
   284e4:	0018      	movs	r0, r3
   284e6:	4b4d      	ldr	r3, [pc, #308]	; (2861c <_spi_interrupt_handler+0x278>)
   284e8:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   284ea:	697b      	ldr	r3, [r7, #20]
   284ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   284ee:	b29b      	uxth	r3, r3
   284f0:	2b00      	cmp	r3, #0
   284f2:	d146      	bne.n	28582 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   284f4:	693b      	ldr	r3, [r7, #16]
   284f6:	2204      	movs	r2, #4
   284f8:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   284fa:	697b      	ldr	r3, [r7, #20]
   284fc:	2238      	movs	r2, #56	; 0x38
   284fe:	2100      	movs	r1, #0
   28500:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   28502:	697b      	ldr	r3, [r7, #20]
   28504:	2203      	movs	r2, #3
   28506:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   28508:	230f      	movs	r3, #15
   2850a:	18fb      	adds	r3, r7, r3
   2850c:	781b      	ldrb	r3, [r3, #0]
   2850e:	2201      	movs	r2, #1
   28510:	4013      	ands	r3, r2
   28512:	d036      	beq.n	28582 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   28514:	697b      	ldr	r3, [r7, #20]
   28516:	68db      	ldr	r3, [r3, #12]
   28518:	697a      	ldr	r2, [r7, #20]
   2851a:	0010      	movs	r0, r2
   2851c:	4798      	blx	r3
   2851e:	e030      	b.n	28582 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   28520:	697b      	ldr	r3, [r7, #20]
   28522:	0018      	movs	r0, r3
   28524:	4b3e      	ldr	r3, [pc, #248]	; (28620 <_spi_interrupt_handler+0x27c>)
   28526:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   28528:	697b      	ldr	r3, [r7, #20]
   2852a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2852c:	b29b      	uxth	r3, r3
   2852e:	2b00      	cmp	r3, #0
   28530:	d127      	bne.n	28582 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   28532:	697b      	ldr	r3, [r7, #20]
   28534:	2238      	movs	r2, #56	; 0x38
   28536:	2100      	movs	r1, #0
   28538:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   2853a:	693b      	ldr	r3, [r7, #16]
   2853c:	2204      	movs	r2, #4
   2853e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   28540:	697b      	ldr	r3, [r7, #20]
   28542:	7a5b      	ldrb	r3, [r3, #9]
   28544:	b2db      	uxtb	r3, r3
   28546:	2b02      	cmp	r3, #2
   28548:	d10b      	bne.n	28562 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   2854a:	230f      	movs	r3, #15
   2854c:	18fb      	adds	r3, r7, r3
   2854e:	781b      	ldrb	r3, [r3, #0]
   28550:	2204      	movs	r2, #4
   28552:	4013      	ands	r3, r2
   28554:	d015      	beq.n	28582 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   28556:	697b      	ldr	r3, [r7, #20]
   28558:	695b      	ldr	r3, [r3, #20]
   2855a:	697a      	ldr	r2, [r7, #20]
   2855c:	0010      	movs	r0, r2
   2855e:	4798      	blx	r3
   28560:	e00f      	b.n	28582 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   28562:	697b      	ldr	r3, [r7, #20]
   28564:	7a5b      	ldrb	r3, [r3, #9]
   28566:	b2db      	uxtb	r3, r3
   28568:	2b00      	cmp	r3, #0
   2856a:	d10a      	bne.n	28582 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   2856c:	230f      	movs	r3, #15
   2856e:	18fb      	adds	r3, r7, r3
   28570:	781b      	ldrb	r3, [r3, #0]
   28572:	2202      	movs	r2, #2
   28574:	4013      	ands	r3, r2
   28576:	d004      	beq.n	28582 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   28578:	697b      	ldr	r3, [r7, #20]
   2857a:	691b      	ldr	r3, [r3, #16]
   2857c:	697a      	ldr	r2, [r7, #20]
   2857e:	0010      	movs	r0, r2
   28580:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   28582:	230c      	movs	r3, #12
   28584:	18fb      	adds	r3, r7, r3
   28586:	881b      	ldrh	r3, [r3, #0]
   28588:	2202      	movs	r2, #2
   2858a:	4013      	ands	r3, r2
   2858c:	d024      	beq.n	285d8 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2858e:	697b      	ldr	r3, [r7, #20]
   28590:	795b      	ldrb	r3, [r3, #5]
   28592:	2b01      	cmp	r3, #1
   28594:	d120      	bne.n	285d8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   28596:	697b      	ldr	r3, [r7, #20]
   28598:	7a5b      	ldrb	r3, [r3, #9]
   2859a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2859c:	2b01      	cmp	r3, #1
   2859e:	d11b      	bne.n	285d8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   285a0:	697b      	ldr	r3, [r7, #20]
   285a2:	79db      	ldrb	r3, [r3, #7]
   285a4:	2201      	movs	r2, #1
   285a6:	4053      	eors	r3, r2
   285a8:	b2db      	uxtb	r3, r3
   285aa:	2b00      	cmp	r3, #0
   285ac:	d014      	beq.n	285d8 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   285ae:	693b      	ldr	r3, [r7, #16]
   285b0:	2202      	movs	r2, #2
   285b2:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   285b4:	697b      	ldr	r3, [r7, #20]
   285b6:	2203      	movs	r2, #3
   285b8:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   285ba:	697b      	ldr	r3, [r7, #20]
   285bc:	2238      	movs	r2, #56	; 0x38
   285be:	2100      	movs	r1, #0
   285c0:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   285c2:	230f      	movs	r3, #15
   285c4:	18fb      	adds	r3, r7, r3
   285c6:	781b      	ldrb	r3, [r3, #0]
   285c8:	2201      	movs	r2, #1
   285ca:	4013      	ands	r3, r2
   285cc:	d004      	beq.n	285d8 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   285ce:	697b      	ldr	r3, [r7, #20]
   285d0:	68db      	ldr	r3, [r3, #12]
   285d2:	697a      	ldr	r2, [r7, #20]
   285d4:	0010      	movs	r0, r2
   285d6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   285d8:	230c      	movs	r3, #12
   285da:	18fb      	adds	r3, r7, r3
   285dc:	881b      	ldrh	r3, [r3, #0]
   285de:	2280      	movs	r2, #128	; 0x80
   285e0:	4013      	ands	r3, r2
   285e2:	d010      	beq.n	28606 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   285e4:	693b      	ldr	r3, [r7, #16]
   285e6:	2280      	movs	r2, #128	; 0x80
   285e8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   285ea:	693b      	ldr	r3, [r7, #16]
   285ec:	2280      	movs	r2, #128	; 0x80
   285ee:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   285f0:	230f      	movs	r3, #15
   285f2:	18fb      	adds	r3, r7, r3
   285f4:	781b      	ldrb	r3, [r3, #0]
   285f6:	2240      	movs	r2, #64	; 0x40
   285f8:	4013      	ands	r3, r2
   285fa:	d004      	beq.n	28606 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   285fc:	697b      	ldr	r3, [r7, #20]
   285fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28600:	697a      	ldr	r2, [r7, #20]
   28602:	0010      	movs	r0, r2
   28604:	4798      	blx	r3
		}
	}
#  endif
}
   28606:	46c0      	nop			; (mov r8, r8)
   28608:	46bd      	mov	sp, r7
   2860a:	b006      	add	sp, #24
   2860c:	bd80      	pop	{r7, pc}
   2860e:	46c0      	nop			; (mov r8, r8)
   28610:	20005794 	.word	0x20005794
   28614:	000282c9 	.word	0x000282c9
   28618:	0002824d 	.word	0x0002824d
   2861c:	000282fd 	.word	0x000282fd
   28620:	00028333 	.word	0x00028333

00028624 <system_gclk_chan_get_config_defaults>:
{
   28624:	b580      	push	{r7, lr}
   28626:	b082      	sub	sp, #8
   28628:	af00      	add	r7, sp, #0
   2862a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2862c:	687b      	ldr	r3, [r7, #4]
   2862e:	2200      	movs	r2, #0
   28630:	701a      	strb	r2, [r3, #0]
}
   28632:	46c0      	nop			; (mov r8, r8)
   28634:	46bd      	mov	sp, r7
   28636:	b002      	add	sp, #8
   28638:	bd80      	pop	{r7, pc}
	...

0002863c <system_apb_clock_set_mask>:
{
   2863c:	b580      	push	{r7, lr}
   2863e:	b082      	sub	sp, #8
   28640:	af00      	add	r7, sp, #0
   28642:	0002      	movs	r2, r0
   28644:	6039      	str	r1, [r7, #0]
   28646:	1dfb      	adds	r3, r7, #7
   28648:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2864a:	1dfb      	adds	r3, r7, #7
   2864c:	781b      	ldrb	r3, [r3, #0]
   2864e:	2b01      	cmp	r3, #1
   28650:	d00a      	beq.n	28668 <system_apb_clock_set_mask+0x2c>
   28652:	2b02      	cmp	r3, #2
   28654:	d00f      	beq.n	28676 <system_apb_clock_set_mask+0x3a>
   28656:	2b00      	cmp	r3, #0
   28658:	d114      	bne.n	28684 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2865a:	4b0e      	ldr	r3, [pc, #56]	; (28694 <system_apb_clock_set_mask+0x58>)
   2865c:	4a0d      	ldr	r2, [pc, #52]	; (28694 <system_apb_clock_set_mask+0x58>)
   2865e:	6991      	ldr	r1, [r2, #24]
   28660:	683a      	ldr	r2, [r7, #0]
   28662:	430a      	orrs	r2, r1
   28664:	619a      	str	r2, [r3, #24]
			break;
   28666:	e00f      	b.n	28688 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28668:	4b0a      	ldr	r3, [pc, #40]	; (28694 <system_apb_clock_set_mask+0x58>)
   2866a:	4a0a      	ldr	r2, [pc, #40]	; (28694 <system_apb_clock_set_mask+0x58>)
   2866c:	69d1      	ldr	r1, [r2, #28]
   2866e:	683a      	ldr	r2, [r7, #0]
   28670:	430a      	orrs	r2, r1
   28672:	61da      	str	r2, [r3, #28]
			break;
   28674:	e008      	b.n	28688 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28676:	4b07      	ldr	r3, [pc, #28]	; (28694 <system_apb_clock_set_mask+0x58>)
   28678:	4a06      	ldr	r2, [pc, #24]	; (28694 <system_apb_clock_set_mask+0x58>)
   2867a:	6a11      	ldr	r1, [r2, #32]
   2867c:	683a      	ldr	r2, [r7, #0]
   2867e:	430a      	orrs	r2, r1
   28680:	621a      	str	r2, [r3, #32]
			break;
   28682:	e001      	b.n	28688 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28684:	2317      	movs	r3, #23
   28686:	e000      	b.n	2868a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28688:	2300      	movs	r3, #0
}
   2868a:	0018      	movs	r0, r3
   2868c:	46bd      	mov	sp, r7
   2868e:	b002      	add	sp, #8
   28690:	bd80      	pop	{r7, pc}
   28692:	46c0      	nop			; (mov r8, r8)
   28694:	40000400 	.word	0x40000400

00028698 <system_pinmux_get_config_defaults>:
{
   28698:	b580      	push	{r7, lr}
   2869a:	b082      	sub	sp, #8
   2869c:	af00      	add	r7, sp, #0
   2869e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   286a0:	687b      	ldr	r3, [r7, #4]
   286a2:	2280      	movs	r2, #128	; 0x80
   286a4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   286a6:	687b      	ldr	r3, [r7, #4]
   286a8:	2200      	movs	r2, #0
   286aa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   286ac:	687b      	ldr	r3, [r7, #4]
   286ae:	2201      	movs	r2, #1
   286b0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   286b2:	687b      	ldr	r3, [r7, #4]
   286b4:	2200      	movs	r2, #0
   286b6:	70da      	strb	r2, [r3, #3]
}
   286b8:	46c0      	nop			; (mov r8, r8)
   286ba:	46bd      	mov	sp, r7
   286bc:	b002      	add	sp, #8
   286be:	bd80      	pop	{r7, pc}

000286c0 <system_is_debugger_present>:
{
   286c0:	b580      	push	{r7, lr}
   286c2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   286c4:	4b05      	ldr	r3, [pc, #20]	; (286dc <system_is_debugger_present+0x1c>)
   286c6:	789b      	ldrb	r3, [r3, #2]
   286c8:	b2db      	uxtb	r3, r3
   286ca:	001a      	movs	r2, r3
   286cc:	2302      	movs	r3, #2
   286ce:	4013      	ands	r3, r2
   286d0:	1e5a      	subs	r2, r3, #1
   286d2:	4193      	sbcs	r3, r2
   286d4:	b2db      	uxtb	r3, r3
}
   286d6:	0018      	movs	r0, r3
   286d8:	46bd      	mov	sp, r7
   286da:	bd80      	pop	{r7, pc}
   286dc:	41002000 	.word	0x41002000

000286e0 <usart_is_syncing>:
{
   286e0:	b580      	push	{r7, lr}
   286e2:	b084      	sub	sp, #16
   286e4:	af00      	add	r7, sp, #0
   286e6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   286e8:	687b      	ldr	r3, [r7, #4]
   286ea:	681b      	ldr	r3, [r3, #0]
   286ec:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   286ee:	68fb      	ldr	r3, [r7, #12]
   286f0:	69db      	ldr	r3, [r3, #28]
   286f2:	1e5a      	subs	r2, r3, #1
   286f4:	4193      	sbcs	r3, r2
   286f6:	b2db      	uxtb	r3, r3
}
   286f8:	0018      	movs	r0, r3
   286fa:	46bd      	mov	sp, r7
   286fc:	b004      	add	sp, #16
   286fe:	bd80      	pop	{r7, pc}

00028700 <_usart_wait_for_sync>:
{
   28700:	b580      	push	{r7, lr}
   28702:	b082      	sub	sp, #8
   28704:	af00      	add	r7, sp, #0
   28706:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   28708:	46c0      	nop			; (mov r8, r8)
   2870a:	687b      	ldr	r3, [r7, #4]
   2870c:	0018      	movs	r0, r3
   2870e:	4b04      	ldr	r3, [pc, #16]	; (28720 <_usart_wait_for_sync+0x20>)
   28710:	4798      	blx	r3
   28712:	1e03      	subs	r3, r0, #0
   28714:	d1f9      	bne.n	2870a <_usart_wait_for_sync+0xa>
}
   28716:	46c0      	nop			; (mov r8, r8)
   28718:	46bd      	mov	sp, r7
   2871a:	b002      	add	sp, #8
   2871c:	bd80      	pop	{r7, pc}
   2871e:	46c0      	nop			; (mov r8, r8)
   28720:	000286e1 	.word	0x000286e1

00028724 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   28724:	b5b0      	push	{r4, r5, r7, lr}
   28726:	b08c      	sub	sp, #48	; 0x30
   28728:	af02      	add	r7, sp, #8
   2872a:	6078      	str	r0, [r7, #4]
   2872c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2872e:	687b      	ldr	r3, [r7, #4]
   28730:	681b      	ldr	r3, [r3, #0]
   28732:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28734:	687b      	ldr	r3, [r7, #4]
   28736:	681b      	ldr	r3, [r3, #0]
   28738:	0018      	movs	r0, r3
   2873a:	4bab      	ldr	r3, [pc, #684]	; (289e8 <_usart_set_config+0x2c4>)
   2873c:	4798      	blx	r3
   2873e:	0003      	movs	r3, r0
   28740:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28742:	697b      	ldr	r3, [r7, #20]
   28744:	3314      	adds	r3, #20
   28746:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   28748:	2300      	movs	r3, #0
   2874a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   2874c:	2300      	movs	r3, #0
   2874e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   28750:	230a      	movs	r3, #10
   28752:	18fb      	adds	r3, r7, r3
   28754:	2200      	movs	r2, #0
   28756:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28758:	231f      	movs	r3, #31
   2875a:	18fb      	adds	r3, r7, r3
   2875c:	2200      	movs	r2, #0
   2875e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28760:	231e      	movs	r3, #30
   28762:	18fb      	adds	r3, r7, r3
   28764:	2210      	movs	r2, #16
   28766:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   28768:	683b      	ldr	r3, [r7, #0]
   2876a:	8a1b      	ldrh	r3, [r3, #16]
   2876c:	2280      	movs	r2, #128	; 0x80
   2876e:	01d2      	lsls	r2, r2, #7
   28770:	4293      	cmp	r3, r2
   28772:	d01c      	beq.n	287ae <_usart_set_config+0x8a>
   28774:	2280      	movs	r2, #128	; 0x80
   28776:	01d2      	lsls	r2, r2, #7
   28778:	4293      	cmp	r3, r2
   2877a:	dc06      	bgt.n	2878a <_usart_set_config+0x66>
   2877c:	2b00      	cmp	r3, #0
   2877e:	d00d      	beq.n	2879c <_usart_set_config+0x78>
   28780:	2280      	movs	r2, #128	; 0x80
   28782:	0192      	lsls	r2, r2, #6
   28784:	4293      	cmp	r3, r2
   28786:	d024      	beq.n	287d2 <_usart_set_config+0xae>
   28788:	e035      	b.n	287f6 <_usart_set_config+0xd2>
   2878a:	22c0      	movs	r2, #192	; 0xc0
   2878c:	01d2      	lsls	r2, r2, #7
   2878e:	4293      	cmp	r3, r2
   28790:	d028      	beq.n	287e4 <_usart_set_config+0xc0>
   28792:	2280      	movs	r2, #128	; 0x80
   28794:	0212      	lsls	r2, r2, #8
   28796:	4293      	cmp	r3, r2
   28798:	d012      	beq.n	287c0 <_usart_set_config+0x9c>
   2879a:	e02c      	b.n	287f6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2879c:	231f      	movs	r3, #31
   2879e:	18fb      	adds	r3, r7, r3
   287a0:	2200      	movs	r2, #0
   287a2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   287a4:	231e      	movs	r3, #30
   287a6:	18fb      	adds	r3, r7, r3
   287a8:	2210      	movs	r2, #16
   287aa:	701a      	strb	r2, [r3, #0]
			break;
   287ac:	e023      	b.n	287f6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   287ae:	231f      	movs	r3, #31
   287b0:	18fb      	adds	r3, r7, r3
   287b2:	2200      	movs	r2, #0
   287b4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   287b6:	231e      	movs	r3, #30
   287b8:	18fb      	adds	r3, r7, r3
   287ba:	2208      	movs	r2, #8
   287bc:	701a      	strb	r2, [r3, #0]
			break;
   287be:	e01a      	b.n	287f6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   287c0:	231f      	movs	r3, #31
   287c2:	18fb      	adds	r3, r7, r3
   287c4:	2200      	movs	r2, #0
   287c6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   287c8:	231e      	movs	r3, #30
   287ca:	18fb      	adds	r3, r7, r3
   287cc:	2203      	movs	r2, #3
   287ce:	701a      	strb	r2, [r3, #0]
			break;
   287d0:	e011      	b.n	287f6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   287d2:	231f      	movs	r3, #31
   287d4:	18fb      	adds	r3, r7, r3
   287d6:	2201      	movs	r2, #1
   287d8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   287da:	231e      	movs	r3, #30
   287dc:	18fb      	adds	r3, r7, r3
   287de:	2210      	movs	r2, #16
   287e0:	701a      	strb	r2, [r3, #0]
			break;
   287e2:	e008      	b.n	287f6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   287e4:	231f      	movs	r3, #31
   287e6:	18fb      	adds	r3, r7, r3
   287e8:	2201      	movs	r2, #1
   287ea:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   287ec:	231e      	movs	r3, #30
   287ee:	18fb      	adds	r3, r7, r3
   287f0:	2208      	movs	r2, #8
   287f2:	701a      	strb	r2, [r3, #0]
			break;
   287f4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   287f6:	683b      	ldr	r3, [r7, #0]
   287f8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   287fa:	683b      	ldr	r3, [r7, #0]
   287fc:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   287fe:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   28800:	683b      	ldr	r3, [r7, #0]
   28802:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   28804:	4313      	orrs	r3, r2
		config->sample_rate |
   28806:	683a      	ldr	r2, [r7, #0]
   28808:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2880a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   2880c:	683a      	ldr	r2, [r7, #0]
   2880e:	7e12      	ldrb	r2, [r2, #24]
   28810:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   28812:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   28814:	683a      	ldr	r2, [r7, #0]
   28816:	2126      	movs	r1, #38	; 0x26
   28818:	5c52      	ldrb	r2, [r2, r1]
   2881a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2881c:	4313      	orrs	r3, r2
   2881e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   28820:	231d      	movs	r3, #29
   28822:	18fb      	adds	r3, r7, r3
   28824:	2200      	movs	r2, #0
   28826:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   28828:	683b      	ldr	r3, [r7, #0]
   2882a:	685b      	ldr	r3, [r3, #4]
   2882c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2882e:	68fb      	ldr	r3, [r7, #12]
   28830:	2b00      	cmp	r3, #0
   28832:	d01e      	beq.n	28872 <_usart_set_config+0x14e>
   28834:	2280      	movs	r2, #128	; 0x80
   28836:	0552      	lsls	r2, r2, #21
   28838:	4293      	cmp	r3, r2
   2883a:	d14f      	bne.n	288dc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   2883c:	683b      	ldr	r3, [r7, #0]
   2883e:	2227      	movs	r2, #39	; 0x27
   28840:	5c9b      	ldrb	r3, [r3, r2]
   28842:	2201      	movs	r2, #1
   28844:	4053      	eors	r3, r2
   28846:	b2db      	uxtb	r3, r3
   28848:	2b00      	cmp	r3, #0
   2884a:	d046      	beq.n	288da <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   2884c:	683b      	ldr	r3, [r7, #0]
   2884e:	6a1d      	ldr	r5, [r3, #32]
   28850:	693b      	ldr	r3, [r7, #16]
   28852:	b2db      	uxtb	r3, r3
   28854:	0018      	movs	r0, r3
   28856:	4b65      	ldr	r3, [pc, #404]	; (289ec <_usart_set_config+0x2c8>)
   28858:	4798      	blx	r3
   2885a:	0001      	movs	r1, r0
   2885c:	231d      	movs	r3, #29
   2885e:	18fc      	adds	r4, r7, r3
   28860:	230a      	movs	r3, #10
   28862:	18fb      	adds	r3, r7, r3
   28864:	001a      	movs	r2, r3
   28866:	0028      	movs	r0, r5
   28868:	4b61      	ldr	r3, [pc, #388]	; (289f0 <_usart_set_config+0x2cc>)
   2886a:	4798      	blx	r3
   2886c:	0003      	movs	r3, r0
   2886e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   28870:	e033      	b.n	288da <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   28872:	683b      	ldr	r3, [r7, #0]
   28874:	2227      	movs	r2, #39	; 0x27
   28876:	5c9b      	ldrb	r3, [r3, r2]
   28878:	2b00      	cmp	r3, #0
   2887a:	d014      	beq.n	288a6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   2887c:	683b      	ldr	r3, [r7, #0]
   2887e:	6a18      	ldr	r0, [r3, #32]
   28880:	683b      	ldr	r3, [r7, #0]
   28882:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   28884:	231d      	movs	r3, #29
   28886:	18fc      	adds	r4, r7, r3
   28888:	231f      	movs	r3, #31
   2888a:	18fb      	adds	r3, r7, r3
   2888c:	781d      	ldrb	r5, [r3, #0]
   2888e:	230a      	movs	r3, #10
   28890:	18fa      	adds	r2, r7, r3
   28892:	231e      	movs	r3, #30
   28894:	18fb      	adds	r3, r7, r3
   28896:	781b      	ldrb	r3, [r3, #0]
   28898:	9300      	str	r3, [sp, #0]
   2889a:	002b      	movs	r3, r5
   2889c:	4d55      	ldr	r5, [pc, #340]	; (289f4 <_usart_set_config+0x2d0>)
   2889e:	47a8      	blx	r5
   288a0:	0003      	movs	r3, r0
   288a2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   288a4:	e01a      	b.n	288dc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   288a6:	683b      	ldr	r3, [r7, #0]
   288a8:	6a1d      	ldr	r5, [r3, #32]
   288aa:	693b      	ldr	r3, [r7, #16]
   288ac:	b2db      	uxtb	r3, r3
   288ae:	0018      	movs	r0, r3
   288b0:	4b4e      	ldr	r3, [pc, #312]	; (289ec <_usart_set_config+0x2c8>)
   288b2:	4798      	blx	r3
				status_code =
   288b4:	231d      	movs	r3, #29
   288b6:	18fc      	adds	r4, r7, r3
   288b8:	231f      	movs	r3, #31
   288ba:	18fb      	adds	r3, r7, r3
   288bc:	7819      	ldrb	r1, [r3, #0]
   288be:	230a      	movs	r3, #10
   288c0:	18fa      	adds	r2, r7, r3
   288c2:	231e      	movs	r3, #30
   288c4:	18fb      	adds	r3, r7, r3
   288c6:	781b      	ldrb	r3, [r3, #0]
   288c8:	9300      	str	r3, [sp, #0]
   288ca:	000b      	movs	r3, r1
   288cc:	0001      	movs	r1, r0
   288ce:	0028      	movs	r0, r5
   288d0:	4d48      	ldr	r5, [pc, #288]	; (289f4 <_usart_set_config+0x2d0>)
   288d2:	47a8      	blx	r5
   288d4:	0003      	movs	r3, r0
   288d6:	7023      	strb	r3, [r4, #0]
			break;
   288d8:	e000      	b.n	288dc <_usart_set_config+0x1b8>
			break;
   288da:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   288dc:	231d      	movs	r3, #29
   288de:	18fb      	adds	r3, r7, r3
   288e0:	781b      	ldrb	r3, [r3, #0]
   288e2:	2b00      	cmp	r3, #0
   288e4:	d003      	beq.n	288ee <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   288e6:	231d      	movs	r3, #29
   288e8:	18fb      	adds	r3, r7, r3
   288ea:	781b      	ldrb	r3, [r3, #0]
   288ec:	e077      	b.n	289de <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   288ee:	683b      	ldr	r3, [r7, #0]
   288f0:	7e5b      	ldrb	r3, [r3, #25]
   288f2:	2b00      	cmp	r3, #0
   288f4:	d003      	beq.n	288fe <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   288f6:	683b      	ldr	r3, [r7, #0]
   288f8:	7e9a      	ldrb	r2, [r3, #26]
   288fa:	69bb      	ldr	r3, [r7, #24]
   288fc:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   288fe:	687b      	ldr	r3, [r7, #4]
   28900:	0018      	movs	r0, r3
   28902:	4b3d      	ldr	r3, [pc, #244]	; (289f8 <_usart_set_config+0x2d4>)
   28904:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   28906:	230a      	movs	r3, #10
   28908:	18fb      	adds	r3, r7, r3
   2890a:	881a      	ldrh	r2, [r3, #0]
   2890c:	69bb      	ldr	r3, [r7, #24]
   2890e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   28910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28912:	68fb      	ldr	r3, [r7, #12]
   28914:	4313      	orrs	r3, r2
   28916:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   28918:	683b      	ldr	r3, [r7, #0]
   2891a:	2227      	movs	r2, #39	; 0x27
   2891c:	5c9b      	ldrb	r3, [r3, r2]
   2891e:	2201      	movs	r2, #1
   28920:	4053      	eors	r3, r2
   28922:	b2db      	uxtb	r3, r3
   28924:	2b00      	cmp	r3, #0
   28926:	d003      	beq.n	28930 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   28928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2892a:	2204      	movs	r2, #4
   2892c:	4313      	orrs	r3, r2
   2892e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   28930:	683b      	ldr	r3, [r7, #0]
   28932:	7e5b      	ldrb	r3, [r3, #25]
   28934:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28936:	683b      	ldr	r3, [r7, #0]
   28938:	7f1b      	ldrb	r3, [r3, #28]
   2893a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2893c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2893e:	683b      	ldr	r3, [r7, #0]
   28940:	7f5b      	ldrb	r3, [r3, #29]
   28942:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28944:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28946:	683b      	ldr	r3, [r7, #0]
   28948:	2124      	movs	r1, #36	; 0x24
   2894a:	5c5b      	ldrb	r3, [r3, r1]
   2894c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2894e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   28950:	683b      	ldr	r3, [r7, #0]
   28952:	2125      	movs	r1, #37	; 0x25
   28954:	5c5b      	ldrb	r3, [r3, r1]
   28956:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28958:	4313      	orrs	r3, r2
	ctrlb =  
   2895a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   2895c:	683b      	ldr	r3, [r7, #0]
   2895e:	7a9b      	ldrb	r3, [r3, #10]
   28960:	001a      	movs	r2, r3
   28962:	6a3b      	ldr	r3, [r7, #32]
   28964:	4313      	orrs	r3, r2
   28966:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   28968:	683b      	ldr	r3, [r7, #0]
   2896a:	7adb      	ldrb	r3, [r3, #11]
   2896c:	001a      	movs	r2, r3
   2896e:	6a3b      	ldr	r3, [r7, #32]
   28970:	4313      	orrs	r3, r2
   28972:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   28974:	683b      	ldr	r3, [r7, #0]
   28976:	891b      	ldrh	r3, [r3, #8]
   28978:	2bff      	cmp	r3, #255	; 0xff
   2897a:	d00b      	beq.n	28994 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   2897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2897e:	2280      	movs	r2, #128	; 0x80
   28980:	0452      	lsls	r2, r2, #17
   28982:	4313      	orrs	r3, r2
   28984:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   28986:	683b      	ldr	r3, [r7, #0]
   28988:	891b      	ldrh	r3, [r3, #8]
   2898a:	001a      	movs	r2, r3
   2898c:	6a3b      	ldr	r3, [r7, #32]
   2898e:	4313      	orrs	r3, r2
   28990:	623b      	str	r3, [r7, #32]
   28992:	e008      	b.n	289a6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   28994:	683b      	ldr	r3, [r7, #0]
   28996:	7edb      	ldrb	r3, [r3, #27]
   28998:	2b00      	cmp	r3, #0
   2899a:	d004      	beq.n	289a6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   2899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2899e:	2280      	movs	r2, #128	; 0x80
   289a0:	04d2      	lsls	r2, r2, #19
   289a2:	4313      	orrs	r3, r2
   289a4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   289a6:	683b      	ldr	r3, [r7, #0]
   289a8:	222c      	movs	r2, #44	; 0x2c
   289aa:	5c9b      	ldrb	r3, [r3, r2]
   289ac:	2b00      	cmp	r3, #0
   289ae:	d103      	bne.n	289b8 <_usart_set_config+0x294>
   289b0:	4b12      	ldr	r3, [pc, #72]	; (289fc <_usart_set_config+0x2d8>)
   289b2:	4798      	blx	r3
   289b4:	1e03      	subs	r3, r0, #0
   289b6:	d003      	beq.n	289c0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   289b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   289ba:	2280      	movs	r2, #128	; 0x80
   289bc:	4313      	orrs	r3, r2
   289be:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   289c0:	687b      	ldr	r3, [r7, #4]
   289c2:	0018      	movs	r0, r3
   289c4:	4b0c      	ldr	r3, [pc, #48]	; (289f8 <_usart_set_config+0x2d4>)
   289c6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   289c8:	69bb      	ldr	r3, [r7, #24]
   289ca:	6a3a      	ldr	r2, [r7, #32]
   289cc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   289ce:	687b      	ldr	r3, [r7, #4]
   289d0:	0018      	movs	r0, r3
   289d2:	4b09      	ldr	r3, [pc, #36]	; (289f8 <_usart_set_config+0x2d4>)
   289d4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   289d6:	69bb      	ldr	r3, [r7, #24]
   289d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   289da:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   289dc:	2300      	movs	r3, #0
}
   289de:	0018      	movs	r0, r3
   289e0:	46bd      	mov	sp, r7
   289e2:	b00a      	add	sp, #40	; 0x28
   289e4:	bdb0      	pop	{r4, r5, r7, pc}
   289e6:	46c0      	nop			; (mov r8, r8)
   289e8:	000274cd 	.word	0x000274cd
   289ec:	00029e81 	.word	0x00029e81
   289f0:	00027047 	.word	0x00027047
   289f4:	000270c5 	.word	0x000270c5
   289f8:	00028701 	.word	0x00028701
   289fc:	000286c1 	.word	0x000286c1

00028a00 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   28a00:	b590      	push	{r4, r7, lr}
   28a02:	b093      	sub	sp, #76	; 0x4c
   28a04:	af00      	add	r7, sp, #0
   28a06:	60f8      	str	r0, [r7, #12]
   28a08:	60b9      	str	r1, [r7, #8]
   28a0a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   28a0c:	233b      	movs	r3, #59	; 0x3b
   28a0e:	18fb      	adds	r3, r7, r3
   28a10:	2200      	movs	r2, #0
   28a12:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   28a14:	68fb      	ldr	r3, [r7, #12]
   28a16:	68ba      	ldr	r2, [r7, #8]
   28a18:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28a1a:	68fb      	ldr	r3, [r7, #12]
   28a1c:	681b      	ldr	r3, [r3, #0]
   28a1e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28a20:	68fb      	ldr	r3, [r7, #12]
   28a22:	681b      	ldr	r3, [r3, #0]
   28a24:	0018      	movs	r0, r3
   28a26:	4b86      	ldr	r3, [pc, #536]	; (28c40 <usart_init+0x240>)
   28a28:	4798      	blx	r3
   28a2a:	0003      	movs	r3, r0
   28a2c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   28a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28a30:	3302      	adds	r3, #2
   28a32:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28a36:	3314      	adds	r3, #20
   28a38:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   28a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28a3c:	681b      	ldr	r3, [r3, #0]
   28a3e:	2201      	movs	r2, #1
   28a40:	4013      	ands	r3, r2
   28a42:	d001      	beq.n	28a48 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   28a44:	2305      	movs	r3, #5
   28a46:	e0f6      	b.n	28c36 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   28a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28a4a:	681b      	ldr	r3, [r3, #0]
   28a4c:	2202      	movs	r2, #2
   28a4e:	4013      	ands	r3, r2
   28a50:	d001      	beq.n	28a56 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   28a52:	231c      	movs	r3, #28
   28a54:	e0ef      	b.n	28c36 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   28a56:	2201      	movs	r2, #1
   28a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28a5a:	409a      	lsls	r2, r3
   28a5c:	0013      	movs	r3, r2
   28a5e:	0019      	movs	r1, r3
   28a60:	2002      	movs	r0, #2
   28a62:	4b78      	ldr	r3, [pc, #480]	; (28c44 <usart_init+0x244>)
   28a64:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28a66:	2324      	movs	r3, #36	; 0x24
   28a68:	18fb      	adds	r3, r7, r3
   28a6a:	0018      	movs	r0, r3
   28a6c:	4b76      	ldr	r3, [pc, #472]	; (28c48 <usart_init+0x248>)
   28a6e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28a70:	687b      	ldr	r3, [r7, #4]
   28a72:	222d      	movs	r2, #45	; 0x2d
   28a74:	5c9a      	ldrb	r2, [r3, r2]
   28a76:	2324      	movs	r3, #36	; 0x24
   28a78:	18fb      	adds	r3, r7, r3
   28a7a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28a7e:	b2db      	uxtb	r3, r3
   28a80:	2224      	movs	r2, #36	; 0x24
   28a82:	18ba      	adds	r2, r7, r2
   28a84:	0011      	movs	r1, r2
   28a86:	0018      	movs	r0, r3
   28a88:	4b70      	ldr	r3, [pc, #448]	; (28c4c <usart_init+0x24c>)
   28a8a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28a8e:	b2db      	uxtb	r3, r3
   28a90:	0018      	movs	r0, r3
   28a92:	4b6f      	ldr	r3, [pc, #444]	; (28c50 <usart_init+0x250>)
   28a94:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   28a96:	687b      	ldr	r3, [r7, #4]
   28a98:	222d      	movs	r2, #45	; 0x2d
   28a9a:	5c9b      	ldrb	r3, [r3, r2]
   28a9c:	2100      	movs	r1, #0
   28a9e:	0018      	movs	r0, r3
   28aa0:	4b6c      	ldr	r3, [pc, #432]	; (28c54 <usart_init+0x254>)
   28aa2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   28aa4:	687b      	ldr	r3, [r7, #4]
   28aa6:	7ada      	ldrb	r2, [r3, #11]
   28aa8:	68fb      	ldr	r3, [r7, #12]
   28aaa:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   28aac:	687b      	ldr	r3, [r7, #4]
   28aae:	2224      	movs	r2, #36	; 0x24
   28ab0:	5c9a      	ldrb	r2, [r3, r2]
   28ab2:	68fb      	ldr	r3, [r7, #12]
   28ab4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   28ab6:	687b      	ldr	r3, [r7, #4]
   28ab8:	2225      	movs	r2, #37	; 0x25
   28aba:	5c9a      	ldrb	r2, [r3, r2]
   28abc:	68fb      	ldr	r3, [r7, #12]
   28abe:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   28ac0:	687b      	ldr	r3, [r7, #4]
   28ac2:	7eda      	ldrb	r2, [r3, #27]
   28ac4:	68fb      	ldr	r3, [r7, #12]
   28ac6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   28ac8:	687b      	ldr	r3, [r7, #4]
   28aca:	7f1a      	ldrb	r2, [r3, #28]
   28acc:	68fb      	ldr	r3, [r7, #12]
   28ace:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   28ad0:	233b      	movs	r3, #59	; 0x3b
   28ad2:	18fc      	adds	r4, r7, r3
   28ad4:	687a      	ldr	r2, [r7, #4]
   28ad6:	68fb      	ldr	r3, [r7, #12]
   28ad8:	0011      	movs	r1, r2
   28ada:	0018      	movs	r0, r3
   28adc:	4b5e      	ldr	r3, [pc, #376]	; (28c58 <usart_init+0x258>)
   28ade:	4798      	blx	r3
   28ae0:	0003      	movs	r3, r0
   28ae2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   28ae4:	233b      	movs	r3, #59	; 0x3b
   28ae6:	18fb      	adds	r3, r7, r3
   28ae8:	781b      	ldrb	r3, [r3, #0]
   28aea:	2b00      	cmp	r3, #0
   28aec:	d003      	beq.n	28af6 <usart_init+0xf6>
		return status_code;
   28aee:	233b      	movs	r3, #59	; 0x3b
   28af0:	18fb      	adds	r3, r7, r3
   28af2:	781b      	ldrb	r3, [r3, #0]
   28af4:	e09f      	b.n	28c36 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28af6:	2320      	movs	r3, #32
   28af8:	18fb      	adds	r3, r7, r3
   28afa:	0018      	movs	r0, r3
   28afc:	4b57      	ldr	r3, [pc, #348]	; (28c5c <usart_init+0x25c>)
   28afe:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28b00:	2320      	movs	r3, #32
   28b02:	18fb      	adds	r3, r7, r3
   28b04:	2200      	movs	r2, #0
   28b06:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28b08:	2320      	movs	r3, #32
   28b0a:	18fb      	adds	r3, r7, r3
   28b0c:	2200      	movs	r2, #0
   28b0e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   28b10:	687b      	ldr	r3, [r7, #4]
   28b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   28b14:	2310      	movs	r3, #16
   28b16:	18fb      	adds	r3, r7, r3
   28b18:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   28b1a:	687b      	ldr	r3, [r7, #4]
   28b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   28b1e:	2310      	movs	r3, #16
   28b20:	18fb      	adds	r3, r7, r3
   28b22:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28b24:	687b      	ldr	r3, [r7, #4]
   28b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   28b28:	2310      	movs	r3, #16
   28b2a:	18fb      	adds	r3, r7, r3
   28b2c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   28b2e:	687b      	ldr	r3, [r7, #4]
   28b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   28b32:	2310      	movs	r3, #16
   28b34:	18fb      	adds	r3, r7, r3
   28b36:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28b38:	2347      	movs	r3, #71	; 0x47
   28b3a:	18fb      	adds	r3, r7, r3
   28b3c:	2200      	movs	r2, #0
   28b3e:	701a      	strb	r2, [r3, #0]
   28b40:	e02c      	b.n	28b9c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   28b42:	2347      	movs	r3, #71	; 0x47
   28b44:	18fb      	adds	r3, r7, r3
   28b46:	781a      	ldrb	r2, [r3, #0]
   28b48:	2310      	movs	r3, #16
   28b4a:	18fb      	adds	r3, r7, r3
   28b4c:	0092      	lsls	r2, r2, #2
   28b4e:	58d3      	ldr	r3, [r2, r3]
   28b50:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   28b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28b54:	2b00      	cmp	r3, #0
   28b56:	d109      	bne.n	28b6c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   28b58:	2347      	movs	r3, #71	; 0x47
   28b5a:	18fb      	adds	r3, r7, r3
   28b5c:	781a      	ldrb	r2, [r3, #0]
   28b5e:	68bb      	ldr	r3, [r7, #8]
   28b60:	0011      	movs	r1, r2
   28b62:	0018      	movs	r0, r3
   28b64:	4b3e      	ldr	r3, [pc, #248]	; (28c60 <usart_init+0x260>)
   28b66:	4798      	blx	r3
   28b68:	0003      	movs	r3, r0
   28b6a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28b6e:	3301      	adds	r3, #1
   28b70:	d00d      	beq.n	28b8e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   28b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28b74:	b2da      	uxtb	r2, r3
   28b76:	2320      	movs	r3, #32
   28b78:	18fb      	adds	r3, r7, r3
   28b7a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28b7e:	0c1b      	lsrs	r3, r3, #16
   28b80:	b2db      	uxtb	r3, r3
   28b82:	2220      	movs	r2, #32
   28b84:	18ba      	adds	r2, r7, r2
   28b86:	0011      	movs	r1, r2
   28b88:	0018      	movs	r0, r3
   28b8a:	4b36      	ldr	r3, [pc, #216]	; (28c64 <usart_init+0x264>)
   28b8c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   28b8e:	2347      	movs	r3, #71	; 0x47
   28b90:	18fb      	adds	r3, r7, r3
   28b92:	781a      	ldrb	r2, [r3, #0]
   28b94:	2347      	movs	r3, #71	; 0x47
   28b96:	18fb      	adds	r3, r7, r3
   28b98:	3201      	adds	r2, #1
   28b9a:	701a      	strb	r2, [r3, #0]
   28b9c:	2347      	movs	r3, #71	; 0x47
   28b9e:	18fb      	adds	r3, r7, r3
   28ba0:	781b      	ldrb	r3, [r3, #0]
   28ba2:	2b03      	cmp	r3, #3
   28ba4:	d9cd      	bls.n	28b42 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   28ba6:	2300      	movs	r3, #0
   28ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   28baa:	e00a      	b.n	28bc2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   28bac:	68fa      	ldr	r2, [r7, #12]
   28bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28bb0:	3302      	adds	r3, #2
   28bb2:	009b      	lsls	r3, r3, #2
   28bb4:	18d3      	adds	r3, r2, r3
   28bb6:	3304      	adds	r3, #4
   28bb8:	2200      	movs	r2, #0
   28bba:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   28bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28bbe:	3301      	adds	r3, #1
   28bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   28bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28bc4:	2b05      	cmp	r3, #5
   28bc6:	d9f1      	bls.n	28bac <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   28bc8:	68fb      	ldr	r3, [r7, #12]
   28bca:	2200      	movs	r2, #0
   28bcc:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   28bce:	68fb      	ldr	r3, [r7, #12]
   28bd0:	2200      	movs	r2, #0
   28bd2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   28bd4:	68fb      	ldr	r3, [r7, #12]
   28bd6:	2200      	movs	r2, #0
   28bd8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   28bda:	68fb      	ldr	r3, [r7, #12]
   28bdc:	2200      	movs	r2, #0
   28bde:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   28be0:	68fb      	ldr	r3, [r7, #12]
   28be2:	2230      	movs	r2, #48	; 0x30
   28be4:	2100      	movs	r1, #0
   28be6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   28be8:	68fb      	ldr	r3, [r7, #12]
   28bea:	2231      	movs	r2, #49	; 0x31
   28bec:	2100      	movs	r1, #0
   28bee:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   28bf0:	68fb      	ldr	r3, [r7, #12]
   28bf2:	2232      	movs	r2, #50	; 0x32
   28bf4:	2100      	movs	r1, #0
   28bf6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   28bf8:	68fb      	ldr	r3, [r7, #12]
   28bfa:	2233      	movs	r2, #51	; 0x33
   28bfc:	2100      	movs	r1, #0
   28bfe:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   28c00:	68fb      	ldr	r3, [r7, #12]
   28c02:	681b      	ldr	r3, [r3, #0]
   28c04:	2227      	movs	r2, #39	; 0x27
   28c06:	18bc      	adds	r4, r7, r2
   28c08:	0018      	movs	r0, r3
   28c0a:	4b0d      	ldr	r3, [pc, #52]	; (28c40 <usart_init+0x240>)
   28c0c:	4798      	blx	r3
   28c0e:	0003      	movs	r3, r0
   28c10:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   28c12:	4a15      	ldr	r2, [pc, #84]	; (28c68 <usart_init+0x268>)
   28c14:	2327      	movs	r3, #39	; 0x27
   28c16:	18fb      	adds	r3, r7, r3
   28c18:	781b      	ldrb	r3, [r3, #0]
   28c1a:	0011      	movs	r1, r2
   28c1c:	0018      	movs	r0, r3
   28c1e:	4b13      	ldr	r3, [pc, #76]	; (28c6c <usart_init+0x26c>)
   28c20:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28c22:	2327      	movs	r3, #39	; 0x27
   28c24:	18fb      	adds	r3, r7, r3
   28c26:	781a      	ldrb	r2, [r3, #0]
   28c28:	4b11      	ldr	r3, [pc, #68]	; (28c70 <usart_init+0x270>)
   28c2a:	0092      	lsls	r2, r2, #2
   28c2c:	68f9      	ldr	r1, [r7, #12]
   28c2e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   28c30:	233b      	movs	r3, #59	; 0x3b
   28c32:	18fb      	adds	r3, r7, r3
   28c34:	781b      	ldrb	r3, [r3, #0]
}
   28c36:	0018      	movs	r0, r3
   28c38:	46bd      	mov	sp, r7
   28c3a:	b013      	add	sp, #76	; 0x4c
   28c3c:	bd90      	pop	{r4, r7, pc}
   28c3e:	46c0      	nop			; (mov r8, r8)
   28c40:	000274cd 	.word	0x000274cd
   28c44:	0002863d 	.word	0x0002863d
   28c48:	00028625 	.word	0x00028625
   28c4c:	00029d5d 	.word	0x00029d5d
   28c50:	00029da1 	.word	0x00029da1
   28c54:	00027285 	.word	0x00027285
   28c58:	00028725 	.word	0x00028725
   28c5c:	00028699 	.word	0x00028699
   28c60:	00027311 	.word	0x00027311
   28c64:	0002a0bd 	.word	0x0002a0bd
   28c68:	00028edd 	.word	0x00028edd
   28c6c:	00027531 	.word	0x00027531
   28c70:	20005794 	.word	0x20005794

00028c74 <system_interrupt_enter_critical_section>:
{
   28c74:	b580      	push	{r7, lr}
   28c76:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28c78:	4b02      	ldr	r3, [pc, #8]	; (28c84 <system_interrupt_enter_critical_section+0x10>)
   28c7a:	4798      	blx	r3
}
   28c7c:	46c0      	nop			; (mov r8, r8)
   28c7e:	46bd      	mov	sp, r7
   28c80:	bd80      	pop	{r7, pc}
   28c82:	46c0      	nop			; (mov r8, r8)
   28c84:	000260c9 	.word	0x000260c9

00028c88 <system_interrupt_leave_critical_section>:
{
   28c88:	b580      	push	{r7, lr}
   28c8a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   28c8c:	4b02      	ldr	r3, [pc, #8]	; (28c98 <system_interrupt_leave_critical_section+0x10>)
   28c8e:	4798      	blx	r3
}
   28c90:	46c0      	nop			; (mov r8, r8)
   28c92:	46bd      	mov	sp, r7
   28c94:	bd80      	pop	{r7, pc}
   28c96:	46c0      	nop			; (mov r8, r8)
   28c98:	0002611d 	.word	0x0002611d

00028c9c <usart_is_syncing>:
{
   28c9c:	b580      	push	{r7, lr}
   28c9e:	b084      	sub	sp, #16
   28ca0:	af00      	add	r7, sp, #0
   28ca2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   28ca4:	687b      	ldr	r3, [r7, #4]
   28ca6:	681b      	ldr	r3, [r3, #0]
   28ca8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   28caa:	68fb      	ldr	r3, [r7, #12]
   28cac:	69db      	ldr	r3, [r3, #28]
   28cae:	1e5a      	subs	r2, r3, #1
   28cb0:	4193      	sbcs	r3, r2
   28cb2:	b2db      	uxtb	r3, r3
}
   28cb4:	0018      	movs	r0, r3
   28cb6:	46bd      	mov	sp, r7
   28cb8:	b004      	add	sp, #16
   28cba:	bd80      	pop	{r7, pc}

00028cbc <_usart_wait_for_sync>:
{
   28cbc:	b580      	push	{r7, lr}
   28cbe:	b082      	sub	sp, #8
   28cc0:	af00      	add	r7, sp, #0
   28cc2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   28cc4:	46c0      	nop			; (mov r8, r8)
   28cc6:	687b      	ldr	r3, [r7, #4]
   28cc8:	0018      	movs	r0, r3
   28cca:	4b04      	ldr	r3, [pc, #16]	; (28cdc <_usart_wait_for_sync+0x20>)
   28ccc:	4798      	blx	r3
   28cce:	1e03      	subs	r3, r0, #0
   28cd0:	d1f9      	bne.n	28cc6 <_usart_wait_for_sync+0xa>
}
   28cd2:	46c0      	nop			; (mov r8, r8)
   28cd4:	46bd      	mov	sp, r7
   28cd6:	b002      	add	sp, #8
   28cd8:	bd80      	pop	{r7, pc}
   28cda:	46c0      	nop			; (mov r8, r8)
   28cdc:	00028c9d 	.word	0x00028c9d

00028ce0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   28ce0:	b580      	push	{r7, lr}
   28ce2:	b086      	sub	sp, #24
   28ce4:	af00      	add	r7, sp, #0
   28ce6:	60f8      	str	r0, [r7, #12]
   28ce8:	60b9      	str	r1, [r7, #8]
   28cea:	1dbb      	adds	r3, r7, #6
   28cec:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28cee:	68fb      	ldr	r3, [r7, #12]
   28cf0:	681b      	ldr	r3, [r3, #0]
   28cf2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28cf4:	4b0f      	ldr	r3, [pc, #60]	; (28d34 <_usart_write_buffer+0x54>)
   28cf6:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   28cf8:	68fb      	ldr	r3, [r7, #12]
   28cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28cfc:	b29b      	uxth	r3, r3
   28cfe:	2b00      	cmp	r3, #0
   28d00:	d003      	beq.n	28d0a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   28d02:	4b0d      	ldr	r3, [pc, #52]	; (28d38 <_usart_write_buffer+0x58>)
   28d04:	4798      	blx	r3
		return STATUS_BUSY;
   28d06:	2305      	movs	r3, #5
   28d08:	e010      	b.n	28d2c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   28d0a:	68fb      	ldr	r3, [r7, #12]
   28d0c:	1dba      	adds	r2, r7, #6
   28d0e:	8812      	ldrh	r2, [r2, #0]
   28d10:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   28d12:	4b09      	ldr	r3, [pc, #36]	; (28d38 <_usart_write_buffer+0x58>)
   28d14:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   28d16:	68fb      	ldr	r3, [r7, #12]
   28d18:	68ba      	ldr	r2, [r7, #8]
   28d1a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   28d1c:	68fb      	ldr	r3, [r7, #12]
   28d1e:	2233      	movs	r2, #51	; 0x33
   28d20:	2105      	movs	r1, #5
   28d22:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   28d24:	697b      	ldr	r3, [r7, #20]
   28d26:	2201      	movs	r2, #1
   28d28:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   28d2a:	2300      	movs	r3, #0
}
   28d2c:	0018      	movs	r0, r3
   28d2e:	46bd      	mov	sp, r7
   28d30:	b006      	add	sp, #24
   28d32:	bd80      	pop	{r7, pc}
   28d34:	00028c75 	.word	0x00028c75
   28d38:	00028c89 	.word	0x00028c89

00028d3c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28d3c:	b580      	push	{r7, lr}
   28d3e:	b086      	sub	sp, #24
   28d40:	af00      	add	r7, sp, #0
   28d42:	60f8      	str	r0, [r7, #12]
   28d44:	60b9      	str	r1, [r7, #8]
   28d46:	1dbb      	adds	r3, r7, #6
   28d48:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28d4a:	68fb      	ldr	r3, [r7, #12]
   28d4c:	681b      	ldr	r3, [r3, #0]
   28d4e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28d50:	4b16      	ldr	r3, [pc, #88]	; (28dac <_usart_read_buffer+0x70>)
   28d52:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   28d54:	68fb      	ldr	r3, [r7, #12]
   28d56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28d58:	b29b      	uxth	r3, r3
   28d5a:	2b00      	cmp	r3, #0
   28d5c:	d003      	beq.n	28d66 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   28d5e:	4b14      	ldr	r3, [pc, #80]	; (28db0 <_usart_read_buffer+0x74>)
   28d60:	4798      	blx	r3
		return STATUS_BUSY;
   28d62:	2305      	movs	r3, #5
   28d64:	e01e      	b.n	28da4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   28d66:	68fb      	ldr	r3, [r7, #12]
   28d68:	1dba      	adds	r2, r7, #6
   28d6a:	8812      	ldrh	r2, [r2, #0]
   28d6c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   28d6e:	4b10      	ldr	r3, [pc, #64]	; (28db0 <_usart_read_buffer+0x74>)
   28d70:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   28d72:	68fb      	ldr	r3, [r7, #12]
   28d74:	68ba      	ldr	r2, [r7, #8]
   28d76:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   28d78:	68fb      	ldr	r3, [r7, #12]
   28d7a:	2232      	movs	r2, #50	; 0x32
   28d7c:	2105      	movs	r1, #5
   28d7e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   28d80:	697b      	ldr	r3, [r7, #20]
   28d82:	2204      	movs	r2, #4
   28d84:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   28d86:	68fb      	ldr	r3, [r7, #12]
   28d88:	7a1b      	ldrb	r3, [r3, #8]
   28d8a:	2b00      	cmp	r3, #0
   28d8c:	d002      	beq.n	28d94 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   28d8e:	697b      	ldr	r3, [r7, #20]
   28d90:	2220      	movs	r2, #32
   28d92:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   28d94:	68fb      	ldr	r3, [r7, #12]
   28d96:	7a5b      	ldrb	r3, [r3, #9]
   28d98:	2b00      	cmp	r3, #0
   28d9a:	d002      	beq.n	28da2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   28d9c:	697b      	ldr	r3, [r7, #20]
   28d9e:	2208      	movs	r2, #8
   28da0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   28da2:	2300      	movs	r3, #0
}
   28da4:	0018      	movs	r0, r3
   28da6:	46bd      	mov	sp, r7
   28da8:	b006      	add	sp, #24
   28daa:	bd80      	pop	{r7, pc}
   28dac:	00028c75 	.word	0x00028c75
   28db0:	00028c89 	.word	0x00028c89

00028db4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   28db4:	b580      	push	{r7, lr}
   28db6:	b084      	sub	sp, #16
   28db8:	af00      	add	r7, sp, #0
   28dba:	60f8      	str	r0, [r7, #12]
   28dbc:	60b9      	str	r1, [r7, #8]
   28dbe:	1dfb      	adds	r3, r7, #7
   28dc0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   28dc2:	1dfb      	adds	r3, r7, #7
   28dc4:	781b      	ldrb	r3, [r3, #0]
   28dc6:	68fa      	ldr	r2, [r7, #12]
   28dc8:	3302      	adds	r3, #2
   28dca:	009b      	lsls	r3, r3, #2
   28dcc:	18d3      	adds	r3, r2, r3
   28dce:	3304      	adds	r3, #4
   28dd0:	68ba      	ldr	r2, [r7, #8]
   28dd2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   28dd4:	68fb      	ldr	r3, [r7, #12]
   28dd6:	2230      	movs	r2, #48	; 0x30
   28dd8:	5c9b      	ldrb	r3, [r3, r2]
   28dda:	b25a      	sxtb	r2, r3
   28ddc:	1dfb      	adds	r3, r7, #7
   28dde:	781b      	ldrb	r3, [r3, #0]
   28de0:	2101      	movs	r1, #1
   28de2:	4099      	lsls	r1, r3
   28de4:	000b      	movs	r3, r1
   28de6:	b25b      	sxtb	r3, r3
   28de8:	4313      	orrs	r3, r2
   28dea:	b25b      	sxtb	r3, r3
   28dec:	b2d9      	uxtb	r1, r3
   28dee:	68fb      	ldr	r3, [r7, #12]
   28df0:	2230      	movs	r2, #48	; 0x30
   28df2:	5499      	strb	r1, [r3, r2]
}
   28df4:	46c0      	nop			; (mov r8, r8)
   28df6:	46bd      	mov	sp, r7
   28df8:	b004      	add	sp, #16
   28dfa:	bd80      	pop	{r7, pc}

00028dfc <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   28dfc:	b580      	push	{r7, lr}
   28dfe:	b084      	sub	sp, #16
   28e00:	af00      	add	r7, sp, #0
   28e02:	60f8      	str	r0, [r7, #12]
   28e04:	60b9      	str	r1, [r7, #8]
   28e06:	1dbb      	adds	r3, r7, #6
   28e08:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   28e0a:	1dbb      	adds	r3, r7, #6
   28e0c:	881b      	ldrh	r3, [r3, #0]
   28e0e:	2b00      	cmp	r3, #0
   28e10:	d101      	bne.n	28e16 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28e12:	2317      	movs	r3, #23
   28e14:	e010      	b.n	28e38 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   28e16:	68fb      	ldr	r3, [r7, #12]
   28e18:	79db      	ldrb	r3, [r3, #7]
   28e1a:	2201      	movs	r2, #1
   28e1c:	4053      	eors	r3, r2
   28e1e:	b2db      	uxtb	r3, r3
   28e20:	2b00      	cmp	r3, #0
   28e22:	d001      	beq.n	28e28 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28e24:	231c      	movs	r3, #28
   28e26:	e007      	b.n	28e38 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   28e28:	1dbb      	adds	r3, r7, #6
   28e2a:	881a      	ldrh	r2, [r3, #0]
   28e2c:	68b9      	ldr	r1, [r7, #8]
   28e2e:	68fb      	ldr	r3, [r7, #12]
   28e30:	0018      	movs	r0, r3
   28e32:	4b03      	ldr	r3, [pc, #12]	; (28e40 <usart_write_buffer_job+0x44>)
   28e34:	4798      	blx	r3
   28e36:	0003      	movs	r3, r0
}
   28e38:	0018      	movs	r0, r3
   28e3a:	46bd      	mov	sp, r7
   28e3c:	b004      	add	sp, #16
   28e3e:	bd80      	pop	{r7, pc}
   28e40:	00028ce1 	.word	0x00028ce1

00028e44 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28e44:	b580      	push	{r7, lr}
   28e46:	b084      	sub	sp, #16
   28e48:	af00      	add	r7, sp, #0
   28e4a:	60f8      	str	r0, [r7, #12]
   28e4c:	60b9      	str	r1, [r7, #8]
   28e4e:	1dbb      	adds	r3, r7, #6
   28e50:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   28e52:	1dbb      	adds	r3, r7, #6
   28e54:	881b      	ldrh	r3, [r3, #0]
   28e56:	2b00      	cmp	r3, #0
   28e58:	d101      	bne.n	28e5e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28e5a:	2317      	movs	r3, #23
   28e5c:	e010      	b.n	28e80 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   28e5e:	68fb      	ldr	r3, [r7, #12]
   28e60:	799b      	ldrb	r3, [r3, #6]
   28e62:	2201      	movs	r2, #1
   28e64:	4053      	eors	r3, r2
   28e66:	b2db      	uxtb	r3, r3
   28e68:	2b00      	cmp	r3, #0
   28e6a:	d001      	beq.n	28e70 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28e6c:	231c      	movs	r3, #28
   28e6e:	e007      	b.n	28e80 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   28e70:	1dbb      	adds	r3, r7, #6
   28e72:	881a      	ldrh	r2, [r3, #0]
   28e74:	68b9      	ldr	r1, [r7, #8]
   28e76:	68fb      	ldr	r3, [r7, #12]
   28e78:	0018      	movs	r0, r3
   28e7a:	4b03      	ldr	r3, [pc, #12]	; (28e88 <usart_read_buffer_job+0x44>)
   28e7c:	4798      	blx	r3
   28e7e:	0003      	movs	r3, r0
}
   28e80:	0018      	movs	r0, r3
   28e82:	46bd      	mov	sp, r7
   28e84:	b004      	add	sp, #16
   28e86:	bd80      	pop	{r7, pc}
   28e88:	00028d3d 	.word	0x00028d3d

00028e8c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   28e8c:	b580      	push	{r7, lr}
   28e8e:	b084      	sub	sp, #16
   28e90:	af00      	add	r7, sp, #0
   28e92:	6078      	str	r0, [r7, #4]
   28e94:	000a      	movs	r2, r1
   28e96:	1cfb      	adds	r3, r7, #3
   28e98:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   28e9a:	1cfb      	adds	r3, r7, #3
   28e9c:	781b      	ldrb	r3, [r3, #0]
   28e9e:	2b00      	cmp	r3, #0
   28ea0:	d002      	beq.n	28ea8 <usart_get_job_status+0x1c>
   28ea2:	2b01      	cmp	r3, #1
   28ea4:	d007      	beq.n	28eb6 <usart_get_job_status+0x2a>
   28ea6:	e00d      	b.n	28ec4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   28ea8:	230f      	movs	r3, #15
   28eaa:	18fb      	adds	r3, r7, r3
   28eac:	687a      	ldr	r2, [r7, #4]
   28eae:	2132      	movs	r1, #50	; 0x32
   28eb0:	5c52      	ldrb	r2, [r2, r1]
   28eb2:	701a      	strb	r2, [r3, #0]
			break;
   28eb4:	e00b      	b.n	28ece <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   28eb6:	230f      	movs	r3, #15
   28eb8:	18fb      	adds	r3, r7, r3
   28eba:	687a      	ldr	r2, [r7, #4]
   28ebc:	2133      	movs	r1, #51	; 0x33
   28ebe:	5c52      	ldrb	r2, [r2, r1]
   28ec0:	701a      	strb	r2, [r3, #0]
			break;
   28ec2:	e004      	b.n	28ece <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   28ec4:	230f      	movs	r3, #15
   28ec6:	18fb      	adds	r3, r7, r3
   28ec8:	2217      	movs	r2, #23
   28eca:	701a      	strb	r2, [r3, #0]
			break;
   28ecc:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   28ece:	230f      	movs	r3, #15
   28ed0:	18fb      	adds	r3, r7, r3
   28ed2:	781b      	ldrb	r3, [r3, #0]
}
   28ed4:	0018      	movs	r0, r3
   28ed6:	46bd      	mov	sp, r7
   28ed8:	b004      	add	sp, #16
   28eda:	bd80      	pop	{r7, pc}

00028edc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   28edc:	b580      	push	{r7, lr}
   28ede:	b088      	sub	sp, #32
   28ee0:	af00      	add	r7, sp, #0
   28ee2:	0002      	movs	r2, r0
   28ee4:	1dfb      	adds	r3, r7, #7
   28ee6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   28ee8:	1dfb      	adds	r3, r7, #7
   28eea:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   28eec:	4ba3      	ldr	r3, [pc, #652]	; (2917c <_usart_interrupt_handler+0x2a0>)
   28eee:	0092      	lsls	r2, r2, #2
   28ef0:	58d3      	ldr	r3, [r2, r3]
   28ef2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   28ef4:	69bb      	ldr	r3, [r7, #24]
   28ef6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   28ef8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   28efa:	69bb      	ldr	r3, [r7, #24]
   28efc:	0018      	movs	r0, r3
   28efe:	4ba0      	ldr	r3, [pc, #640]	; (29180 <_usart_interrupt_handler+0x2a4>)
   28f00:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   28f02:	697b      	ldr	r3, [r7, #20]
   28f04:	7e1b      	ldrb	r3, [r3, #24]
   28f06:	b2da      	uxtb	r2, r3
   28f08:	2312      	movs	r3, #18
   28f0a:	18fb      	adds	r3, r7, r3
   28f0c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   28f0e:	697b      	ldr	r3, [r7, #20]
   28f10:	7d9b      	ldrb	r3, [r3, #22]
   28f12:	b2db      	uxtb	r3, r3
   28f14:	b29a      	uxth	r2, r3
   28f16:	2312      	movs	r3, #18
   28f18:	18fb      	adds	r3, r7, r3
   28f1a:	2112      	movs	r1, #18
   28f1c:	1879      	adds	r1, r7, r1
   28f1e:	8809      	ldrh	r1, [r1, #0]
   28f20:	400a      	ands	r2, r1
   28f22:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   28f24:	69bb      	ldr	r3, [r7, #24]
   28f26:	2230      	movs	r2, #48	; 0x30
   28f28:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   28f2a:	69ba      	ldr	r2, [r7, #24]
   28f2c:	2131      	movs	r1, #49	; 0x31
   28f2e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   28f30:	4013      	ands	r3, r2
   28f32:	b2da      	uxtb	r2, r3
   28f34:	2310      	movs	r3, #16
   28f36:	18fb      	adds	r3, r7, r3
   28f38:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   28f3a:	2312      	movs	r3, #18
   28f3c:	18fb      	adds	r3, r7, r3
   28f3e:	881b      	ldrh	r3, [r3, #0]
   28f40:	2201      	movs	r2, #1
   28f42:	4013      	ands	r3, r2
   28f44:	d044      	beq.n	28fd0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   28f46:	69bb      	ldr	r3, [r7, #24]
   28f48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28f4a:	b29b      	uxth	r3, r3
   28f4c:	2b00      	cmp	r3, #0
   28f4e:	d03c      	beq.n	28fca <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   28f50:	69bb      	ldr	r3, [r7, #24]
   28f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f54:	781b      	ldrb	r3, [r3, #0]
   28f56:	b2da      	uxtb	r2, r3
   28f58:	231c      	movs	r3, #28
   28f5a:	18fb      	adds	r3, r7, r3
   28f5c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   28f5e:	69bb      	ldr	r3, [r7, #24]
   28f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f62:	1c5a      	adds	r2, r3, #1
   28f64:	69bb      	ldr	r3, [r7, #24]
   28f66:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28f68:	69bb      	ldr	r3, [r7, #24]
   28f6a:	795b      	ldrb	r3, [r3, #5]
   28f6c:	2b01      	cmp	r3, #1
   28f6e:	d113      	bne.n	28f98 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   28f70:	69bb      	ldr	r3, [r7, #24]
   28f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f74:	781b      	ldrb	r3, [r3, #0]
   28f76:	b2db      	uxtb	r3, r3
   28f78:	021b      	lsls	r3, r3, #8
   28f7a:	b21a      	sxth	r2, r3
   28f7c:	231c      	movs	r3, #28
   28f7e:	18fb      	adds	r3, r7, r3
   28f80:	2100      	movs	r1, #0
   28f82:	5e5b      	ldrsh	r3, [r3, r1]
   28f84:	4313      	orrs	r3, r2
   28f86:	b21a      	sxth	r2, r3
   28f88:	231c      	movs	r3, #28
   28f8a:	18fb      	adds	r3, r7, r3
   28f8c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   28f8e:	69bb      	ldr	r3, [r7, #24]
   28f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f92:	1c5a      	adds	r2, r3, #1
   28f94:	69bb      	ldr	r3, [r7, #24]
   28f96:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   28f98:	231c      	movs	r3, #28
   28f9a:	18fb      	adds	r3, r7, r3
   28f9c:	881b      	ldrh	r3, [r3, #0]
   28f9e:	05db      	lsls	r3, r3, #23
   28fa0:	0ddb      	lsrs	r3, r3, #23
   28fa2:	b29a      	uxth	r2, r3
   28fa4:	697b      	ldr	r3, [r7, #20]
   28fa6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   28fa8:	69bb      	ldr	r3, [r7, #24]
   28faa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28fac:	b29b      	uxth	r3, r3
   28fae:	3b01      	subs	r3, #1
   28fb0:	b29b      	uxth	r3, r3
   28fb2:	69ba      	ldr	r2, [r7, #24]
   28fb4:	1c19      	adds	r1, r3, #0
   28fb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   28fb8:	2b00      	cmp	r3, #0
   28fba:	d109      	bne.n	28fd0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28fbc:	697b      	ldr	r3, [r7, #20]
   28fbe:	2201      	movs	r2, #1
   28fc0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   28fc2:	697b      	ldr	r3, [r7, #20]
   28fc4:	2202      	movs	r2, #2
   28fc6:	759a      	strb	r2, [r3, #22]
   28fc8:	e002      	b.n	28fd0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28fca:	697b      	ldr	r3, [r7, #20]
   28fcc:	2201      	movs	r2, #1
   28fce:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   28fd0:	2312      	movs	r3, #18
   28fd2:	18fb      	adds	r3, r7, r3
   28fd4:	881b      	ldrh	r3, [r3, #0]
   28fd6:	2202      	movs	r2, #2
   28fd8:	4013      	ands	r3, r2
   28fda:	d011      	beq.n	29000 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   28fdc:	697b      	ldr	r3, [r7, #20]
   28fde:	2202      	movs	r2, #2
   28fe0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   28fe2:	69bb      	ldr	r3, [r7, #24]
   28fe4:	2233      	movs	r2, #51	; 0x33
   28fe6:	2100      	movs	r1, #0
   28fe8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   28fea:	2310      	movs	r3, #16
   28fec:	18fb      	adds	r3, r7, r3
   28fee:	881b      	ldrh	r3, [r3, #0]
   28ff0:	2201      	movs	r2, #1
   28ff2:	4013      	ands	r3, r2
   28ff4:	d004      	beq.n	29000 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   28ff6:	69bb      	ldr	r3, [r7, #24]
   28ff8:	68db      	ldr	r3, [r3, #12]
   28ffa:	69ba      	ldr	r2, [r7, #24]
   28ffc:	0010      	movs	r0, r2
   28ffe:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   29000:	2312      	movs	r3, #18
   29002:	18fb      	adds	r3, r7, r3
   29004:	881b      	ldrh	r3, [r3, #0]
   29006:	2204      	movs	r2, #4
   29008:	4013      	ands	r3, r2
   2900a:	d100      	bne.n	2900e <_usart_interrupt_handler+0x132>
   2900c:	e0bd      	b.n	2918a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   2900e:	69bb      	ldr	r3, [r7, #24]
   29010:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29012:	b29b      	uxth	r3, r3
   29014:	2b00      	cmp	r3, #0
   29016:	d100      	bne.n	2901a <_usart_interrupt_handler+0x13e>
   29018:	e0b4      	b.n	29184 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   2901a:	697b      	ldr	r3, [r7, #20]
   2901c:	8b5b      	ldrh	r3, [r3, #26]
   2901e:	b29b      	uxth	r3, r3
   29020:	b2da      	uxtb	r2, r3
   29022:	231f      	movs	r3, #31
   29024:	18fb      	adds	r3, r7, r3
   29026:	213f      	movs	r1, #63	; 0x3f
   29028:	400a      	ands	r2, r1
   2902a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   2902c:	231f      	movs	r3, #31
   2902e:	18fb      	adds	r3, r7, r3
   29030:	781b      	ldrb	r3, [r3, #0]
   29032:	2208      	movs	r2, #8
   29034:	4013      	ands	r3, r2
   29036:	d007      	beq.n	29048 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   29038:	231f      	movs	r3, #31
   2903a:	18fb      	adds	r3, r7, r3
   2903c:	221f      	movs	r2, #31
   2903e:	18ba      	adds	r2, r7, r2
   29040:	7812      	ldrb	r2, [r2, #0]
   29042:	2108      	movs	r1, #8
   29044:	438a      	bics	r2, r1
   29046:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   29048:	231f      	movs	r3, #31
   2904a:	18fb      	adds	r3, r7, r3
   2904c:	781b      	ldrb	r3, [r3, #0]
   2904e:	2b00      	cmp	r3, #0
   29050:	d050      	beq.n	290f4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   29052:	231f      	movs	r3, #31
   29054:	18fb      	adds	r3, r7, r3
   29056:	781b      	ldrb	r3, [r3, #0]
   29058:	2202      	movs	r2, #2
   2905a:	4013      	ands	r3, r2
   2905c:	d007      	beq.n	2906e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   2905e:	69bb      	ldr	r3, [r7, #24]
   29060:	2232      	movs	r2, #50	; 0x32
   29062:	211a      	movs	r1, #26
   29064:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   29066:	697b      	ldr	r3, [r7, #20]
   29068:	2202      	movs	r2, #2
   2906a:	835a      	strh	r2, [r3, #26]
   2906c:	e036      	b.n	290dc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   2906e:	231f      	movs	r3, #31
   29070:	18fb      	adds	r3, r7, r3
   29072:	781b      	ldrb	r3, [r3, #0]
   29074:	2204      	movs	r2, #4
   29076:	4013      	ands	r3, r2
   29078:	d007      	beq.n	2908a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2907a:	69bb      	ldr	r3, [r7, #24]
   2907c:	2232      	movs	r2, #50	; 0x32
   2907e:	211e      	movs	r1, #30
   29080:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   29082:	697b      	ldr	r3, [r7, #20]
   29084:	2204      	movs	r2, #4
   29086:	835a      	strh	r2, [r3, #26]
   29088:	e028      	b.n	290dc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2908a:	231f      	movs	r3, #31
   2908c:	18fb      	adds	r3, r7, r3
   2908e:	781b      	ldrb	r3, [r3, #0]
   29090:	2201      	movs	r2, #1
   29092:	4013      	ands	r3, r2
   29094:	d007      	beq.n	290a6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   29096:	69bb      	ldr	r3, [r7, #24]
   29098:	2232      	movs	r2, #50	; 0x32
   2909a:	2113      	movs	r1, #19
   2909c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   2909e:	697b      	ldr	r3, [r7, #20]
   290a0:	2201      	movs	r2, #1
   290a2:	835a      	strh	r2, [r3, #26]
   290a4:	e01a      	b.n	290dc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   290a6:	231f      	movs	r3, #31
   290a8:	18fb      	adds	r3, r7, r3
   290aa:	781b      	ldrb	r3, [r3, #0]
   290ac:	2210      	movs	r2, #16
   290ae:	4013      	ands	r3, r2
   290b0:	d007      	beq.n	290c2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   290b2:	69bb      	ldr	r3, [r7, #24]
   290b4:	2232      	movs	r2, #50	; 0x32
   290b6:	2142      	movs	r1, #66	; 0x42
   290b8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   290ba:	697b      	ldr	r3, [r7, #20]
   290bc:	2210      	movs	r2, #16
   290be:	835a      	strh	r2, [r3, #26]
   290c0:	e00c      	b.n	290dc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   290c2:	231f      	movs	r3, #31
   290c4:	18fb      	adds	r3, r7, r3
   290c6:	781b      	ldrb	r3, [r3, #0]
   290c8:	2220      	movs	r2, #32
   290ca:	4013      	ands	r3, r2
   290cc:	d006      	beq.n	290dc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   290ce:	69bb      	ldr	r3, [r7, #24]
   290d0:	2232      	movs	r2, #50	; 0x32
   290d2:	2141      	movs	r1, #65	; 0x41
   290d4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   290d6:	697b      	ldr	r3, [r7, #20]
   290d8:	2220      	movs	r2, #32
   290da:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   290dc:	2310      	movs	r3, #16
   290de:	18fb      	adds	r3, r7, r3
   290e0:	881b      	ldrh	r3, [r3, #0]
   290e2:	2204      	movs	r2, #4
   290e4:	4013      	ands	r3, r2
				if (callback_status
   290e6:	d050      	beq.n	2918a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   290e8:	69bb      	ldr	r3, [r7, #24]
   290ea:	695b      	ldr	r3, [r3, #20]
   290ec:	69ba      	ldr	r2, [r7, #24]
   290ee:	0010      	movs	r0, r2
   290f0:	4798      	blx	r3
   290f2:	e04a      	b.n	2918a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   290f4:	697b      	ldr	r3, [r7, #20]
   290f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   290f8:	b29a      	uxth	r2, r3
   290fa:	230e      	movs	r3, #14
   290fc:	18fb      	adds	r3, r7, r3
   290fe:	05d2      	lsls	r2, r2, #23
   29100:	0dd2      	lsrs	r2, r2, #23
   29102:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   29104:	69bb      	ldr	r3, [r7, #24]
   29106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29108:	220e      	movs	r2, #14
   2910a:	18ba      	adds	r2, r7, r2
   2910c:	8812      	ldrh	r2, [r2, #0]
   2910e:	b2d2      	uxtb	r2, r2
   29110:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   29112:	69bb      	ldr	r3, [r7, #24]
   29114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29116:	1c5a      	adds	r2, r3, #1
   29118:	69bb      	ldr	r3, [r7, #24]
   2911a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2911c:	69bb      	ldr	r3, [r7, #24]
   2911e:	795b      	ldrb	r3, [r3, #5]
   29120:	2b01      	cmp	r3, #1
   29122:	d10d      	bne.n	29140 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   29124:	69bb      	ldr	r3, [r7, #24]
   29126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29128:	220e      	movs	r2, #14
   2912a:	18ba      	adds	r2, r7, r2
   2912c:	8812      	ldrh	r2, [r2, #0]
   2912e:	0a12      	lsrs	r2, r2, #8
   29130:	b292      	uxth	r2, r2
   29132:	b2d2      	uxtb	r2, r2
   29134:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   29136:	69bb      	ldr	r3, [r7, #24]
   29138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2913a:	1c5a      	adds	r2, r3, #1
   2913c:	69bb      	ldr	r3, [r7, #24]
   2913e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   29140:	69bb      	ldr	r3, [r7, #24]
   29142:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29144:	b29b      	uxth	r3, r3
   29146:	3b01      	subs	r3, #1
   29148:	b29b      	uxth	r3, r3
   2914a:	69ba      	ldr	r2, [r7, #24]
   2914c:	1c19      	adds	r1, r3, #0
   2914e:	8591      	strh	r1, [r2, #44]	; 0x2c
   29150:	2b00      	cmp	r3, #0
   29152:	d11a      	bne.n	2918a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29154:	697b      	ldr	r3, [r7, #20]
   29156:	2204      	movs	r2, #4
   29158:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2915a:	69bb      	ldr	r3, [r7, #24]
   2915c:	2232      	movs	r2, #50	; 0x32
   2915e:	2100      	movs	r1, #0
   29160:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   29162:	2310      	movs	r3, #16
   29164:	18fb      	adds	r3, r7, r3
   29166:	881b      	ldrh	r3, [r3, #0]
   29168:	2202      	movs	r2, #2
   2916a:	4013      	ands	r3, r2
					if (callback_status
   2916c:	d00d      	beq.n	2918a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2916e:	69bb      	ldr	r3, [r7, #24]
   29170:	691b      	ldr	r3, [r3, #16]
   29172:	69ba      	ldr	r2, [r7, #24]
   29174:	0010      	movs	r0, r2
   29176:	4798      	blx	r3
   29178:	e007      	b.n	2918a <_usart_interrupt_handler+0x2ae>
   2917a:	46c0      	nop			; (mov r8, r8)
   2917c:	20005794 	.word	0x20005794
   29180:	00028cbd 	.word	0x00028cbd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29184:	697b      	ldr	r3, [r7, #20]
   29186:	2204      	movs	r2, #4
   29188:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2918a:	2312      	movs	r3, #18
   2918c:	18fb      	adds	r3, r7, r3
   2918e:	881b      	ldrh	r3, [r3, #0]
   29190:	2210      	movs	r2, #16
   29192:	4013      	ands	r3, r2
   29194:	d010      	beq.n	291b8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   29196:	697b      	ldr	r3, [r7, #20]
   29198:	2210      	movs	r2, #16
   2919a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2919c:	697b      	ldr	r3, [r7, #20]
   2919e:	2210      	movs	r2, #16
   291a0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   291a2:	2310      	movs	r3, #16
   291a4:	18fb      	adds	r3, r7, r3
   291a6:	881b      	ldrh	r3, [r3, #0]
   291a8:	2210      	movs	r2, #16
   291aa:	4013      	ands	r3, r2
   291ac:	d004      	beq.n	291b8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   291ae:	69bb      	ldr	r3, [r7, #24]
   291b0:	69db      	ldr	r3, [r3, #28]
   291b2:	69ba      	ldr	r2, [r7, #24]
   291b4:	0010      	movs	r0, r2
   291b6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   291b8:	2312      	movs	r3, #18
   291ba:	18fb      	adds	r3, r7, r3
   291bc:	881b      	ldrh	r3, [r3, #0]
   291be:	2220      	movs	r2, #32
   291c0:	4013      	ands	r3, r2
   291c2:	d010      	beq.n	291e6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   291c4:	697b      	ldr	r3, [r7, #20]
   291c6:	2220      	movs	r2, #32
   291c8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   291ca:	697b      	ldr	r3, [r7, #20]
   291cc:	2220      	movs	r2, #32
   291ce:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   291d0:	2310      	movs	r3, #16
   291d2:	18fb      	adds	r3, r7, r3
   291d4:	881b      	ldrh	r3, [r3, #0]
   291d6:	2208      	movs	r2, #8
   291d8:	4013      	ands	r3, r2
   291da:	d004      	beq.n	291e6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   291dc:	69bb      	ldr	r3, [r7, #24]
   291de:	699b      	ldr	r3, [r3, #24]
   291e0:	69ba      	ldr	r2, [r7, #24]
   291e2:	0010      	movs	r0, r2
   291e4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   291e6:	2312      	movs	r3, #18
   291e8:	18fb      	adds	r3, r7, r3
   291ea:	881b      	ldrh	r3, [r3, #0]
   291ec:	2208      	movs	r2, #8
   291ee:	4013      	ands	r3, r2
   291f0:	d010      	beq.n	29214 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   291f2:	697b      	ldr	r3, [r7, #20]
   291f4:	2208      	movs	r2, #8
   291f6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   291f8:	697b      	ldr	r3, [r7, #20]
   291fa:	2208      	movs	r2, #8
   291fc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   291fe:	2310      	movs	r3, #16
   29200:	18fb      	adds	r3, r7, r3
   29202:	881b      	ldrh	r3, [r3, #0]
   29204:	2220      	movs	r2, #32
   29206:	4013      	ands	r3, r2
   29208:	d004      	beq.n	29214 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2920a:	69bb      	ldr	r3, [r7, #24]
   2920c:	6a1b      	ldr	r3, [r3, #32]
   2920e:	69ba      	ldr	r2, [r7, #24]
   29210:	0010      	movs	r0, r2
   29212:	4798      	blx	r3
		}
	}
#endif
}
   29214:	46c0      	nop			; (mov r8, r8)
   29216:	46bd      	mov	sp, r7
   29218:	b008      	add	sp, #32
   2921a:	bd80      	pop	{r7, pc}

0002921c <system_gclk_gen_get_config_defaults>:
{
   2921c:	b580      	push	{r7, lr}
   2921e:	b082      	sub	sp, #8
   29220:	af00      	add	r7, sp, #0
   29222:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   29224:	687b      	ldr	r3, [r7, #4]
   29226:	2201      	movs	r2, #1
   29228:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2922a:	687b      	ldr	r3, [r7, #4]
   2922c:	2200      	movs	r2, #0
   2922e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   29230:	687b      	ldr	r3, [r7, #4]
   29232:	2206      	movs	r2, #6
   29234:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   29236:	687b      	ldr	r3, [r7, #4]
   29238:	2200      	movs	r2, #0
   2923a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   2923c:	687b      	ldr	r3, [r7, #4]
   2923e:	2200      	movs	r2, #0
   29240:	725a      	strb	r2, [r3, #9]
}
   29242:	46c0      	nop			; (mov r8, r8)
   29244:	46bd      	mov	sp, r7
   29246:	b002      	add	sp, #8
   29248:	bd80      	pop	{r7, pc}

0002924a <system_gclk_chan_get_config_defaults>:
{
   2924a:	b580      	push	{r7, lr}
   2924c:	b082      	sub	sp, #8
   2924e:	af00      	add	r7, sp, #0
   29250:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29252:	687b      	ldr	r3, [r7, #4]
   29254:	2200      	movs	r2, #0
   29256:	701a      	strb	r2, [r3, #0]
}
   29258:	46c0      	nop			; (mov r8, r8)
   2925a:	46bd      	mov	sp, r7
   2925c:	b002      	add	sp, #8
   2925e:	bd80      	pop	{r7, pc}

00029260 <system_clock_source_osc8m_get_config_defaults>:
{
   29260:	b580      	push	{r7, lr}
   29262:	b082      	sub	sp, #8
   29264:	af00      	add	r7, sp, #0
   29266:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   29268:	687b      	ldr	r3, [r7, #4]
   2926a:	2203      	movs	r2, #3
   2926c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2926e:	687b      	ldr	r3, [r7, #4]
   29270:	2200      	movs	r2, #0
   29272:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   29274:	687b      	ldr	r3, [r7, #4]
   29276:	2201      	movs	r2, #1
   29278:	709a      	strb	r2, [r3, #2]
}
   2927a:	46c0      	nop			; (mov r8, r8)
   2927c:	46bd      	mov	sp, r7
   2927e:	b002      	add	sp, #8
   29280:	bd80      	pop	{r7, pc}
	...

00029284 <system_cpu_clock_set_divider>:
{
   29284:	b580      	push	{r7, lr}
   29286:	b082      	sub	sp, #8
   29288:	af00      	add	r7, sp, #0
   2928a:	0002      	movs	r2, r0
   2928c:	1dfb      	adds	r3, r7, #7
   2928e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   29290:	4a03      	ldr	r2, [pc, #12]	; (292a0 <system_cpu_clock_set_divider+0x1c>)
   29292:	1dfb      	adds	r3, r7, #7
   29294:	781b      	ldrb	r3, [r3, #0]
   29296:	7213      	strb	r3, [r2, #8]
}
   29298:	46c0      	nop			; (mov r8, r8)
   2929a:	46bd      	mov	sp, r7
   2929c:	b002      	add	sp, #8
   2929e:	bd80      	pop	{r7, pc}
   292a0:	40000400 	.word	0x40000400

000292a4 <system_apb_clock_set_divider>:
{
   292a4:	b580      	push	{r7, lr}
   292a6:	b082      	sub	sp, #8
   292a8:	af00      	add	r7, sp, #0
   292aa:	0002      	movs	r2, r0
   292ac:	1dfb      	adds	r3, r7, #7
   292ae:	701a      	strb	r2, [r3, #0]
   292b0:	1dbb      	adds	r3, r7, #6
   292b2:	1c0a      	adds	r2, r1, #0
   292b4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   292b6:	1dfb      	adds	r3, r7, #7
   292b8:	781b      	ldrb	r3, [r3, #0]
   292ba:	2b01      	cmp	r3, #1
   292bc:	d008      	beq.n	292d0 <system_apb_clock_set_divider+0x2c>
   292be:	2b02      	cmp	r3, #2
   292c0:	d00b      	beq.n	292da <system_apb_clock_set_divider+0x36>
   292c2:	2b00      	cmp	r3, #0
   292c4:	d10e      	bne.n	292e4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   292c6:	4a0b      	ldr	r2, [pc, #44]	; (292f4 <system_apb_clock_set_divider+0x50>)
   292c8:	1dbb      	adds	r3, r7, #6
   292ca:	781b      	ldrb	r3, [r3, #0]
   292cc:	7253      	strb	r3, [r2, #9]
			break;
   292ce:	e00b      	b.n	292e8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   292d0:	4a08      	ldr	r2, [pc, #32]	; (292f4 <system_apb_clock_set_divider+0x50>)
   292d2:	1dbb      	adds	r3, r7, #6
   292d4:	781b      	ldrb	r3, [r3, #0]
   292d6:	7293      	strb	r3, [r2, #10]
			break;
   292d8:	e006      	b.n	292e8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   292da:	4a06      	ldr	r2, [pc, #24]	; (292f4 <system_apb_clock_set_divider+0x50>)
   292dc:	1dbb      	adds	r3, r7, #6
   292de:	781b      	ldrb	r3, [r3, #0]
   292e0:	72d3      	strb	r3, [r2, #11]
			break;
   292e2:	e001      	b.n	292e8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   292e4:	2317      	movs	r3, #23
   292e6:	e000      	b.n	292ea <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   292e8:	2300      	movs	r3, #0
}
   292ea:	0018      	movs	r0, r3
   292ec:	46bd      	mov	sp, r7
   292ee:	b002      	add	sp, #8
   292f0:	bd80      	pop	{r7, pc}
   292f2:	46c0      	nop			; (mov r8, r8)
   292f4:	40000400 	.word	0x40000400

000292f8 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   292f8:	b580      	push	{r7, lr}
   292fa:	b082      	sub	sp, #8
   292fc:	af00      	add	r7, sp, #0
   292fe:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   29300:	687b      	ldr	r3, [r7, #4]
   29302:	2201      	movs	r2, #1
   29304:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   29306:	687b      	ldr	r3, [r7, #4]
   29308:	2200      	movs	r2, #0
   2930a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   2930c:	687b      	ldr	r3, [r7, #4]
   2930e:	2200      	movs	r2, #0
   29310:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   29312:	687b      	ldr	r3, [r7, #4]
   29314:	2200      	movs	r2, #0
   29316:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   29318:	687b      	ldr	r3, [r7, #4]
   2931a:	2200      	movs	r2, #0
   2931c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2931e:	687b      	ldr	r3, [r7, #4]
   29320:	4a0a      	ldr	r2, [pc, #40]	; (2934c <system_clock_source_dpll_get_config_defaults+0x54>)
   29322:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   29324:	687b      	ldr	r3, [r7, #4]
   29326:	2280      	movs	r2, #128	; 0x80
   29328:	0212      	lsls	r2, r2, #8
   2932a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   2932c:	687b      	ldr	r3, [r7, #4]
   2932e:	2201      	movs	r2, #1
   29330:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   29332:	687b      	ldr	r3, [r7, #4]
   29334:	2200      	movs	r2, #0
   29336:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   29338:	687b      	ldr	r3, [r7, #4]
   2933a:	2200      	movs	r2, #0
   2933c:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2933e:	687b      	ldr	r3, [r7, #4]
   29340:	2200      	movs	r2, #0
   29342:	749a      	strb	r2, [r3, #18]
};
   29344:	46c0      	nop			; (mov r8, r8)
   29346:	46bd      	mov	sp, r7
   29348:	b002      	add	sp, #8
   2934a:	bd80      	pop	{r7, pc}
   2934c:	02dc6c00 	.word	0x02dc6c00

00029350 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   29350:	b580      	push	{r7, lr}
   29352:	b082      	sub	sp, #8
   29354:	af00      	add	r7, sp, #0
   29356:	0002      	movs	r2, r0
   29358:	1dfb      	adds	r3, r7, #7
   2935a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   2935c:	4a08      	ldr	r2, [pc, #32]	; (29380 <system_flash_set_waitstates+0x30>)
   2935e:	1dfb      	adds	r3, r7, #7
   29360:	781b      	ldrb	r3, [r3, #0]
   29362:	210f      	movs	r1, #15
   29364:	400b      	ands	r3, r1
   29366:	b2d9      	uxtb	r1, r3
   29368:	6853      	ldr	r3, [r2, #4]
   2936a:	200f      	movs	r0, #15
   2936c:	4001      	ands	r1, r0
   2936e:	0049      	lsls	r1, r1, #1
   29370:	201e      	movs	r0, #30
   29372:	4383      	bics	r3, r0
   29374:	430b      	orrs	r3, r1
   29376:	6053      	str	r3, [r2, #4]
}
   29378:	46c0      	nop			; (mov r8, r8)
   2937a:	46bd      	mov	sp, r7
   2937c:	b002      	add	sp, #8
   2937e:	bd80      	pop	{r7, pc}
   29380:	41004000 	.word	0x41004000

00029384 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   29384:	b580      	push	{r7, lr}
   29386:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   29388:	46c0      	nop			; (mov r8, r8)
   2938a:	4b04      	ldr	r3, [pc, #16]	; (2939c <_system_dfll_wait_for_sync+0x18>)
   2938c:	68db      	ldr	r3, [r3, #12]
   2938e:	2210      	movs	r2, #16
   29390:	4013      	ands	r3, r2
   29392:	d0fa      	beq.n	2938a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   29394:	46c0      	nop			; (mov r8, r8)
   29396:	46bd      	mov	sp, r7
   29398:	bd80      	pop	{r7, pc}
   2939a:	46c0      	nop			; (mov r8, r8)
   2939c:	40000800 	.word	0x40000800

000293a0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   293a0:	b580      	push	{r7, lr}
   293a2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   293a4:	4b0c      	ldr	r3, [pc, #48]	; (293d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   293a6:	2202      	movs	r2, #2
   293a8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   293aa:	4b0c      	ldr	r3, [pc, #48]	; (293dc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   293ac:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   293ae:	4a0a      	ldr	r2, [pc, #40]	; (293d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   293b0:	4b0b      	ldr	r3, [pc, #44]	; (293e0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   293b2:	689b      	ldr	r3, [r3, #8]
   293b4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   293b6:	4a08      	ldr	r2, [pc, #32]	; (293d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   293b8:	4b09      	ldr	r3, [pc, #36]	; (293e0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   293ba:	685b      	ldr	r3, [r3, #4]
   293bc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   293be:	4b06      	ldr	r3, [pc, #24]	; (293d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   293c0:	2200      	movs	r2, #0
   293c2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   293c4:	4b05      	ldr	r3, [pc, #20]	; (293dc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   293c6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   293c8:	4a03      	ldr	r2, [pc, #12]	; (293d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   293ca:	4b05      	ldr	r3, [pc, #20]	; (293e0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   293cc:	681b      	ldr	r3, [r3, #0]
   293ce:	b29b      	uxth	r3, r3
   293d0:	8493      	strh	r3, [r2, #36]	; 0x24
}
   293d2:	46c0      	nop			; (mov r8, r8)
   293d4:	46bd      	mov	sp, r7
   293d6:	bd80      	pop	{r7, pc}
   293d8:	40000800 	.word	0x40000800
   293dc:	00029385 	.word	0x00029385
   293e0:	20003ec8 	.word	0x20003ec8

000293e4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   293e4:	b580      	push	{r7, lr}
   293e6:	b082      	sub	sp, #8
   293e8:	af00      	add	r7, sp, #0
   293ea:	0002      	movs	r2, r0
   293ec:	1dfb      	adds	r3, r7, #7
   293ee:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   293f0:	1dfb      	adds	r3, r7, #7
   293f2:	781b      	ldrb	r3, [r3, #0]
   293f4:	2b08      	cmp	r3, #8
   293f6:	d841      	bhi.n	2947c <system_clock_source_get_hz+0x98>
   293f8:	009a      	lsls	r2, r3, #2
   293fa:	4b23      	ldr	r3, [pc, #140]	; (29488 <system_clock_source_get_hz+0xa4>)
   293fc:	18d3      	adds	r3, r2, r3
   293fe:	681b      	ldr	r3, [r3, #0]
   29400:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   29402:	4b22      	ldr	r3, [pc, #136]	; (2948c <system_clock_source_get_hz+0xa8>)
   29404:	691b      	ldr	r3, [r3, #16]
   29406:	e03a      	b.n	2947e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   29408:	4b21      	ldr	r3, [pc, #132]	; (29490 <system_clock_source_get_hz+0xac>)
   2940a:	6a1b      	ldr	r3, [r3, #32]
   2940c:	059b      	lsls	r3, r3, #22
   2940e:	0f9b      	lsrs	r3, r3, #30
   29410:	b2db      	uxtb	r3, r3
   29412:	001a      	movs	r2, r3
   29414:	4b1f      	ldr	r3, [pc, #124]	; (29494 <system_clock_source_get_hz+0xb0>)
   29416:	40d3      	lsrs	r3, r2
   29418:	e031      	b.n	2947e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2941a:	2380      	movs	r3, #128	; 0x80
   2941c:	021b      	lsls	r3, r3, #8
   2941e:	e02e      	b.n	2947e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   29420:	2380      	movs	r3, #128	; 0x80
   29422:	021b      	lsls	r3, r3, #8
   29424:	e02b      	b.n	2947e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   29426:	4b19      	ldr	r3, [pc, #100]	; (2948c <system_clock_source_get_hz+0xa8>)
   29428:	695b      	ldr	r3, [r3, #20]
   2942a:	e028      	b.n	2947e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2942c:	4b17      	ldr	r3, [pc, #92]	; (2948c <system_clock_source_get_hz+0xa8>)
   2942e:	681b      	ldr	r3, [r3, #0]
   29430:	2202      	movs	r2, #2
   29432:	4013      	ands	r3, r2
   29434:	d101      	bne.n	2943a <system_clock_source_get_hz+0x56>
			return 0;
   29436:	2300      	movs	r3, #0
   29438:	e021      	b.n	2947e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2943a:	4b17      	ldr	r3, [pc, #92]	; (29498 <system_clock_source_get_hz+0xb4>)
   2943c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2943e:	4b13      	ldr	r3, [pc, #76]	; (2948c <system_clock_source_get_hz+0xa8>)
   29440:	681b      	ldr	r3, [r3, #0]
   29442:	2224      	movs	r2, #36	; 0x24
   29444:	4013      	ands	r3, r2
   29446:	2b04      	cmp	r3, #4
   29448:	d109      	bne.n	2945e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2944a:	2000      	movs	r0, #0
   2944c:	4b13      	ldr	r3, [pc, #76]	; (2949c <system_clock_source_get_hz+0xb8>)
   2944e:	4798      	blx	r3
   29450:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   29452:	4b0e      	ldr	r3, [pc, #56]	; (2948c <system_clock_source_get_hz+0xa8>)
   29454:	689b      	ldr	r3, [r3, #8]
   29456:	041b      	lsls	r3, r3, #16
   29458:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2945a:	4353      	muls	r3, r2
   2945c:	e00f      	b.n	2947e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2945e:	4b10      	ldr	r3, [pc, #64]	; (294a0 <system_clock_source_get_hz+0xbc>)
   29460:	e00d      	b.n	2947e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   29462:	4a0b      	ldr	r2, [pc, #44]	; (29490 <system_clock_source_get_hz+0xac>)
   29464:	2350      	movs	r3, #80	; 0x50
   29466:	5cd3      	ldrb	r3, [r2, r3]
   29468:	b2db      	uxtb	r3, r3
   2946a:	001a      	movs	r2, r3
   2946c:	2304      	movs	r3, #4
   2946e:	4013      	ands	r3, r2
   29470:	d101      	bne.n	29476 <system_clock_source_get_hz+0x92>
			return 0;
   29472:	2300      	movs	r3, #0
   29474:	e003      	b.n	2947e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   29476:	4b05      	ldr	r3, [pc, #20]	; (2948c <system_clock_source_get_hz+0xa8>)
   29478:	68db      	ldr	r3, [r3, #12]
   2947a:	e000      	b.n	2947e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2947c:	2300      	movs	r3, #0
	}
}
   2947e:	0018      	movs	r0, r3
   29480:	46bd      	mov	sp, r7
   29482:	b002      	add	sp, #8
   29484:	bd80      	pop	{r7, pc}
   29486:	46c0      	nop			; (mov r8, r8)
   29488:	00039260 	.word	0x00039260
   2948c:	20003ec8 	.word	0x20003ec8
   29490:	40000800 	.word	0x40000800
   29494:	007a1200 	.word	0x007a1200
   29498:	00029385 	.word	0x00029385
   2949c:	00029e81 	.word	0x00029e81
   294a0:	02dc6c00 	.word	0x02dc6c00

000294a4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   294a4:	b580      	push	{r7, lr}
   294a6:	b084      	sub	sp, #16
   294a8:	af00      	add	r7, sp, #0
   294aa:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   294ac:	4b1a      	ldr	r3, [pc, #104]	; (29518 <system_clock_source_osc8m_set_config+0x74>)
   294ae:	6a1b      	ldr	r3, [r3, #32]
   294b0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   294b2:	687b      	ldr	r3, [r7, #4]
   294b4:	781b      	ldrb	r3, [r3, #0]
   294b6:	1c1a      	adds	r2, r3, #0
   294b8:	2303      	movs	r3, #3
   294ba:	4013      	ands	r3, r2
   294bc:	b2da      	uxtb	r2, r3
   294be:	230d      	movs	r3, #13
   294c0:	18fb      	adds	r3, r7, r3
   294c2:	2103      	movs	r1, #3
   294c4:	400a      	ands	r2, r1
   294c6:	0010      	movs	r0, r2
   294c8:	781a      	ldrb	r2, [r3, #0]
   294ca:	2103      	movs	r1, #3
   294cc:	438a      	bics	r2, r1
   294ce:	1c11      	adds	r1, r2, #0
   294d0:	1c02      	adds	r2, r0, #0
   294d2:	430a      	orrs	r2, r1
   294d4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   294d6:	687b      	ldr	r3, [r7, #4]
   294d8:	789a      	ldrb	r2, [r3, #2]
   294da:	230c      	movs	r3, #12
   294dc:	18fb      	adds	r3, r7, r3
   294de:	01d0      	lsls	r0, r2, #7
   294e0:	781a      	ldrb	r2, [r3, #0]
   294e2:	217f      	movs	r1, #127	; 0x7f
   294e4:	400a      	ands	r2, r1
   294e6:	1c11      	adds	r1, r2, #0
   294e8:	1c02      	adds	r2, r0, #0
   294ea:	430a      	orrs	r2, r1
   294ec:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   294ee:	687b      	ldr	r3, [r7, #4]
   294f0:	785a      	ldrb	r2, [r3, #1]
   294f2:	230c      	movs	r3, #12
   294f4:	18fb      	adds	r3, r7, r3
   294f6:	2101      	movs	r1, #1
   294f8:	400a      	ands	r2, r1
   294fa:	0190      	lsls	r0, r2, #6
   294fc:	781a      	ldrb	r2, [r3, #0]
   294fe:	2140      	movs	r1, #64	; 0x40
   29500:	438a      	bics	r2, r1
   29502:	1c11      	adds	r1, r2, #0
   29504:	1c02      	adds	r2, r0, #0
   29506:	430a      	orrs	r2, r1
   29508:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2950a:	4b03      	ldr	r3, [pc, #12]	; (29518 <system_clock_source_osc8m_set_config+0x74>)
   2950c:	68fa      	ldr	r2, [r7, #12]
   2950e:	621a      	str	r2, [r3, #32]
}
   29510:	46c0      	nop			; (mov r8, r8)
   29512:	46bd      	mov	sp, r7
   29514:	b004      	add	sp, #16
   29516:	bd80      	pop	{r7, pc}
   29518:	40000800 	.word	0x40000800

0002951c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2951c:	b580      	push	{r7, lr}
   2951e:	b086      	sub	sp, #24
   29520:	af00      	add	r7, sp, #0
   29522:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   29524:	687b      	ldr	r3, [r7, #4]
   29526:	68db      	ldr	r3, [r3, #12]
   29528:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2952a:	687b      	ldr	r3, [r7, #4]
   2952c:	7d1b      	ldrb	r3, [r3, #20]
   2952e:	2b01      	cmp	r3, #1
   29530:	d10a      	bne.n	29548 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   29532:	687b      	ldr	r3, [r7, #4]
   29534:	8a1b      	ldrh	r3, [r3, #16]
   29536:	3301      	adds	r3, #1
   29538:	005b      	lsls	r3, r3, #1
   2953a:	001a      	movs	r2, r3
   2953c:	4b36      	ldr	r3, [pc, #216]	; (29618 <system_clock_source_dpll_set_config+0xfc>)
   2953e:	0011      	movs	r1, r2
   29540:	6978      	ldr	r0, [r7, #20]
   29542:	4798      	blx	r3
   29544:	0003      	movs	r3, r0
   29546:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   29548:	687b      	ldr	r3, [r7, #4]
   2954a:	689b      	ldr	r3, [r3, #8]
   2954c:	011a      	lsls	r2, r3, #4
   2954e:	4b32      	ldr	r3, [pc, #200]	; (29618 <system_clock_source_dpll_set_config+0xfc>)
   29550:	6979      	ldr	r1, [r7, #20]
   29552:	0010      	movs	r0, r2
   29554:	4798      	blx	r3
   29556:	0003      	movs	r3, r0
   29558:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2955a:	693b      	ldr	r3, [r7, #16]
   2955c:	b2da      	uxtb	r2, r3
   2955e:	230f      	movs	r3, #15
   29560:	18fb      	adds	r3, r7, r3
   29562:	210f      	movs	r1, #15
   29564:	400a      	ands	r2, r1
   29566:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   29568:	693b      	ldr	r3, [r7, #16]
   2956a:	091b      	lsrs	r3, r3, #4
   2956c:	3b01      	subs	r3, #1
   2956e:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   29570:	492a      	ldr	r1, [pc, #168]	; (2961c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   29572:	687b      	ldr	r3, [r7, #4]
   29574:	781b      	ldrb	r3, [r3, #0]
   29576:	01db      	lsls	r3, r3, #7
   29578:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2957a:	687b      	ldr	r3, [r7, #4]
   2957c:	785b      	ldrb	r3, [r3, #1]
   2957e:	019b      	lsls	r3, r3, #6
   29580:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   29582:	4313      	orrs	r3, r2
   29584:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   29586:	2344      	movs	r3, #68	; 0x44
   29588:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2958a:	4b24      	ldr	r3, [pc, #144]	; (2961c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2958c:	220f      	movs	r2, #15
   2958e:	18ba      	adds	r2, r7, r2
   29590:	7812      	ldrb	r2, [r2, #0]
   29592:	0412      	lsls	r2, r2, #16
   29594:	0011      	movs	r1, r2
   29596:	22f0      	movs	r2, #240	; 0xf0
   29598:	0312      	lsls	r2, r2, #12
   2959a:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2959c:	693a      	ldr	r2, [r7, #16]
   2959e:	0512      	lsls	r2, r2, #20
   295a0:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   295a2:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   295a4:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   295a6:	4b1d      	ldr	r3, [pc, #116]	; (2961c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   295a8:	687a      	ldr	r2, [r7, #4]
   295aa:	8a12      	ldrh	r2, [r2, #16]
   295ac:	0412      	lsls	r2, r2, #16
   295ae:	0011      	movs	r1, r2
   295b0:	4a1b      	ldr	r2, [pc, #108]	; (29620 <system_clock_source_dpll_set_config+0x104>)
   295b2:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   295b4:	687a      	ldr	r2, [r7, #4]
   295b6:	7892      	ldrb	r2, [r2, #2]
   295b8:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   295ba:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   295bc:	687a      	ldr	r2, [r7, #4]
   295be:	7cd2      	ldrb	r2, [r2, #19]
   295c0:	0212      	lsls	r2, r2, #8
   295c2:	0010      	movs	r0, r2
   295c4:	22e0      	movs	r2, #224	; 0xe0
   295c6:	00d2      	lsls	r2, r2, #3
   295c8:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   295ca:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   295cc:	687a      	ldr	r2, [r7, #4]
   295ce:	7d12      	ldrb	r2, [r2, #20]
   295d0:	0112      	lsls	r2, r2, #4
   295d2:	0010      	movs	r0, r2
   295d4:	2230      	movs	r2, #48	; 0x30
   295d6:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   295d8:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   295da:	687a      	ldr	r2, [r7, #4]
   295dc:	78d2      	ldrb	r2, [r2, #3]
   295de:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   295e0:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   295e2:	687a      	ldr	r2, [r7, #4]
   295e4:	7912      	ldrb	r2, [r2, #4]
   295e6:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   295e8:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   295ea:	687a      	ldr	r2, [r7, #4]
   295ec:	7c92      	ldrb	r2, [r2, #18]
   295ee:	0010      	movs	r0, r2
   295f0:	2203      	movs	r2, #3
   295f2:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   295f4:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   295f6:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   295f8:	693b      	ldr	r3, [r7, #16]
   295fa:	3301      	adds	r3, #1
   295fc:	011a      	lsls	r2, r3, #4
   295fe:	230f      	movs	r3, #15
   29600:	18fb      	adds	r3, r7, r3
   29602:	781b      	ldrb	r3, [r3, #0]
   29604:	18d3      	adds	r3, r2, r3
   29606:	697a      	ldr	r2, [r7, #20]
   29608:	4353      	muls	r3, r2
   2960a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2960c:	4b05      	ldr	r3, [pc, #20]	; (29624 <system_clock_source_dpll_set_config+0x108>)
   2960e:	60da      	str	r2, [r3, #12]
}
   29610:	46c0      	nop			; (mov r8, r8)
   29612:	46bd      	mov	sp, r7
   29614:	b006      	add	sp, #24
   29616:	bd80      	pop	{r7, pc}
   29618:	000328c5 	.word	0x000328c5
   2961c:	40000800 	.word	0x40000800
   29620:	07ff0000 	.word	0x07ff0000
   29624:	20003ec8 	.word	0x20003ec8

00029628 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   29628:	b580      	push	{r7, lr}
   2962a:	b082      	sub	sp, #8
   2962c:	af00      	add	r7, sp, #0
   2962e:	0002      	movs	r2, r0
   29630:	1dfb      	adds	r3, r7, #7
   29632:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   29634:	1dfb      	adds	r3, r7, #7
   29636:	781b      	ldrb	r3, [r3, #0]
   29638:	2b08      	cmp	r3, #8
   2963a:	d83b      	bhi.n	296b4 <system_clock_source_enable+0x8c>
   2963c:	009a      	lsls	r2, r3, #2
   2963e:	4b21      	ldr	r3, [pc, #132]	; (296c4 <system_clock_source_enable+0x9c>)
   29640:	18d3      	adds	r3, r2, r3
   29642:	681b      	ldr	r3, [r3, #0]
   29644:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   29646:	4b20      	ldr	r3, [pc, #128]	; (296c8 <system_clock_source_enable+0xa0>)
   29648:	4a1f      	ldr	r2, [pc, #124]	; (296c8 <system_clock_source_enable+0xa0>)
   2964a:	6a12      	ldr	r2, [r2, #32]
   2964c:	2102      	movs	r1, #2
   2964e:	430a      	orrs	r2, r1
   29650:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   29652:	2300      	movs	r3, #0
   29654:	e031      	b.n	296ba <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   29656:	4b1c      	ldr	r3, [pc, #112]	; (296c8 <system_clock_source_enable+0xa0>)
   29658:	4a1b      	ldr	r2, [pc, #108]	; (296c8 <system_clock_source_enable+0xa0>)
   2965a:	6992      	ldr	r2, [r2, #24]
   2965c:	2102      	movs	r1, #2
   2965e:	430a      	orrs	r2, r1
   29660:	619a      	str	r2, [r3, #24]
		break;
   29662:	e029      	b.n	296b8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   29664:	4a18      	ldr	r2, [pc, #96]	; (296c8 <system_clock_source_enable+0xa0>)
   29666:	4b18      	ldr	r3, [pc, #96]	; (296c8 <system_clock_source_enable+0xa0>)
   29668:	8a1b      	ldrh	r3, [r3, #16]
   2966a:	b29b      	uxth	r3, r3
   2966c:	2102      	movs	r1, #2
   2966e:	430b      	orrs	r3, r1
   29670:	b29b      	uxth	r3, r3
   29672:	8213      	strh	r3, [r2, #16]
		break;
   29674:	e020      	b.n	296b8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   29676:	4a14      	ldr	r2, [pc, #80]	; (296c8 <system_clock_source_enable+0xa0>)
   29678:	4b13      	ldr	r3, [pc, #76]	; (296c8 <system_clock_source_enable+0xa0>)
   2967a:	8a9b      	ldrh	r3, [r3, #20]
   2967c:	b29b      	uxth	r3, r3
   2967e:	2102      	movs	r1, #2
   29680:	430b      	orrs	r3, r1
   29682:	b29b      	uxth	r3, r3
   29684:	8293      	strh	r3, [r2, #20]
		break;
   29686:	e017      	b.n	296b8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   29688:	4b10      	ldr	r3, [pc, #64]	; (296cc <system_clock_source_enable+0xa4>)
   2968a:	681b      	ldr	r3, [r3, #0]
   2968c:	2202      	movs	r2, #2
   2968e:	431a      	orrs	r2, r3
   29690:	4b0e      	ldr	r3, [pc, #56]	; (296cc <system_clock_source_enable+0xa4>)
   29692:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   29694:	4b0e      	ldr	r3, [pc, #56]	; (296d0 <system_clock_source_enable+0xa8>)
   29696:	4798      	blx	r3
		break;
   29698:	e00e      	b.n	296b8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2969a:	4a0b      	ldr	r2, [pc, #44]	; (296c8 <system_clock_source_enable+0xa0>)
   2969c:	490a      	ldr	r1, [pc, #40]	; (296c8 <system_clock_source_enable+0xa0>)
   2969e:	2344      	movs	r3, #68	; 0x44
   296a0:	5ccb      	ldrb	r3, [r1, r3]
   296a2:	b2db      	uxtb	r3, r3
   296a4:	2102      	movs	r1, #2
   296a6:	430b      	orrs	r3, r1
   296a8:	b2d9      	uxtb	r1, r3
   296aa:	2344      	movs	r3, #68	; 0x44
   296ac:	54d1      	strb	r1, [r2, r3]
		break;
   296ae:	e003      	b.n	296b8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   296b0:	2300      	movs	r3, #0
   296b2:	e002      	b.n	296ba <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   296b4:	2317      	movs	r3, #23
   296b6:	e000      	b.n	296ba <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   296b8:	2300      	movs	r3, #0
}
   296ba:	0018      	movs	r0, r3
   296bc:	46bd      	mov	sp, r7
   296be:	b002      	add	sp, #8
   296c0:	bd80      	pop	{r7, pc}
   296c2:	46c0      	nop			; (mov r8, r8)
   296c4:	00039284 	.word	0x00039284
   296c8:	40000800 	.word	0x40000800
   296cc:	20003ec8 	.word	0x20003ec8
   296d0:	000293a1 	.word	0x000293a1

000296d4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   296d4:	b580      	push	{r7, lr}
   296d6:	b084      	sub	sp, #16
   296d8:	af00      	add	r7, sp, #0
   296da:	0002      	movs	r2, r0
   296dc:	1dfb      	adds	r3, r7, #7
   296de:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   296e0:	2300      	movs	r3, #0
   296e2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   296e4:	1dfb      	adds	r3, r7, #7
   296e6:	781b      	ldrb	r3, [r3, #0]
   296e8:	2b08      	cmp	r3, #8
   296ea:	d821      	bhi.n	29730 <system_clock_source_is_ready+0x5c>
   296ec:	009a      	lsls	r2, r3, #2
   296ee:	4b18      	ldr	r3, [pc, #96]	; (29750 <system_clock_source_is_ready+0x7c>)
   296f0:	18d3      	adds	r3, r2, r3
   296f2:	681b      	ldr	r3, [r3, #0]
   296f4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   296f6:	2308      	movs	r3, #8
   296f8:	60fb      	str	r3, [r7, #12]
		break;
   296fa:	e01b      	b.n	29734 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   296fc:	2304      	movs	r3, #4
   296fe:	60fb      	str	r3, [r7, #12]
		break;
   29700:	e018      	b.n	29734 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   29702:	2301      	movs	r3, #1
   29704:	60fb      	str	r3, [r7, #12]
		break;
   29706:	e015      	b.n	29734 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   29708:	2302      	movs	r3, #2
   2970a:	60fb      	str	r3, [r7, #12]
		break;
   2970c:	e012      	b.n	29734 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2970e:	2310      	movs	r3, #16
   29710:	60fb      	str	r3, [r7, #12]
		}
		break;
   29712:	e00f      	b.n	29734 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   29714:	4a0f      	ldr	r2, [pc, #60]	; (29754 <system_clock_source_is_ready+0x80>)
   29716:	2350      	movs	r3, #80	; 0x50
   29718:	5cd3      	ldrb	r3, [r2, r3]
   2971a:	b2db      	uxtb	r3, r3
   2971c:	001a      	movs	r2, r3
   2971e:	2303      	movs	r3, #3
   29720:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   29722:	3b03      	subs	r3, #3
   29724:	425a      	negs	r2, r3
   29726:	4153      	adcs	r3, r2
   29728:	b2db      	uxtb	r3, r3
   2972a:	e00c      	b.n	29746 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2972c:	2301      	movs	r3, #1
   2972e:	e00a      	b.n	29746 <system_clock_source_is_ready+0x72>

	default:
		return false;
   29730:	2300      	movs	r3, #0
   29732:	e008      	b.n	29746 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   29734:	4b07      	ldr	r3, [pc, #28]	; (29754 <system_clock_source_is_ready+0x80>)
   29736:	68db      	ldr	r3, [r3, #12]
   29738:	68fa      	ldr	r2, [r7, #12]
   2973a:	401a      	ands	r2, r3
   2973c:	68fb      	ldr	r3, [r7, #12]
   2973e:	1ad3      	subs	r3, r2, r3
   29740:	425a      	negs	r2, r3
   29742:	4153      	adcs	r3, r2
   29744:	b2db      	uxtb	r3, r3
}
   29746:	0018      	movs	r0, r3
   29748:	46bd      	mov	sp, r7
   2974a:	b004      	add	sp, #16
   2974c:	bd80      	pop	{r7, pc}
   2974e:	46c0      	nop			; (mov r8, r8)
   29750:	000392a8 	.word	0x000392a8
   29754:	40000800 	.word	0x40000800

00029758 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   29758:	b580      	push	{r7, lr}
   2975a:	b082      	sub	sp, #8
   2975c:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2975e:	003b      	movs	r3, r7
   29760:	2203      	movs	r2, #3
   29762:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29764:	2300      	movs	r3, #0
   29766:	607b      	str	r3, [r7, #4]
   29768:	e009      	b.n	2977e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2976a:	687b      	ldr	r3, [r7, #4]
   2976c:	b2db      	uxtb	r3, r3
   2976e:	003a      	movs	r2, r7
   29770:	0011      	movs	r1, r2
   29772:	0018      	movs	r0, r3
   29774:	4b05      	ldr	r3, [pc, #20]	; (2978c <_switch_peripheral_gclk+0x34>)
   29776:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29778:	687b      	ldr	r3, [r7, #4]
   2977a:	3301      	adds	r3, #1
   2977c:	607b      	str	r3, [r7, #4]
   2977e:	687b      	ldr	r3, [r7, #4]
   29780:	2b24      	cmp	r3, #36	; 0x24
   29782:	d9f2      	bls.n	2976a <_switch_peripheral_gclk+0x12>
	}
}
   29784:	46c0      	nop			; (mov r8, r8)
   29786:	46bd      	mov	sp, r7
   29788:	b002      	add	sp, #8
   2978a:	bd80      	pop	{r7, pc}
   2978c:	00029d5d 	.word	0x00029d5d

00029790 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   29790:	b580      	push	{r7, lr}
   29792:	b0a6      	sub	sp, #152	; 0x98
   29794:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   29796:	4b92      	ldr	r3, [pc, #584]	; (299e0 <system_clock_init+0x250>)
   29798:	22c2      	movs	r2, #194	; 0xc2
   2979a:	00d2      	lsls	r2, r2, #3
   2979c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2979e:	2003      	movs	r0, #3
   297a0:	4b90      	ldr	r3, [pc, #576]	; (299e4 <system_clock_init+0x254>)
   297a2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   297a4:	4b90      	ldr	r3, [pc, #576]	; (299e8 <system_clock_init+0x258>)
   297a6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   297a8:	2394      	movs	r3, #148	; 0x94
   297aa:	18fb      	adds	r3, r7, r3
   297ac:	0018      	movs	r0, r3
   297ae:	4b8f      	ldr	r3, [pc, #572]	; (299ec <system_clock_init+0x25c>)
   297b0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   297b2:	2394      	movs	r3, #148	; 0x94
   297b4:	18fb      	adds	r3, r7, r3
   297b6:	2200      	movs	r2, #0
   297b8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   297ba:	2394      	movs	r3, #148	; 0x94
   297bc:	18fb      	adds	r3, r7, r3
   297be:	2201      	movs	r2, #1
   297c0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   297c2:	2394      	movs	r3, #148	; 0x94
   297c4:	18fb      	adds	r3, r7, r3
   297c6:	2200      	movs	r2, #0
   297c8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   297ca:	2394      	movs	r3, #148	; 0x94
   297cc:	18fb      	adds	r3, r7, r3
   297ce:	0018      	movs	r0, r3
   297d0:	4b87      	ldr	r3, [pc, #540]	; (299f0 <system_clock_init+0x260>)
   297d2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   297d4:	2006      	movs	r0, #6
   297d6:	4b87      	ldr	r3, [pc, #540]	; (299f4 <system_clock_init+0x264>)
   297d8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   297da:	4b87      	ldr	r3, [pc, #540]	; (299f8 <system_clock_init+0x268>)
   297dc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   297de:	2360      	movs	r3, #96	; 0x60
   297e0:	18fb      	adds	r3, r7, r3
   297e2:	0018      	movs	r0, r3
   297e4:	4b85      	ldr	r3, [pc, #532]	; (299fc <system_clock_init+0x26c>)
   297e6:	4798      	blx	r3
   297e8:	2360      	movs	r3, #96	; 0x60
   297ea:	18fb      	adds	r3, r7, r3
   297ec:	2206      	movs	r2, #6
   297ee:	701a      	strb	r2, [r3, #0]
   297f0:	2360      	movs	r3, #96	; 0x60
   297f2:	18fb      	adds	r3, r7, r3
   297f4:	2208      	movs	r2, #8
   297f6:	605a      	str	r2, [r3, #4]
   297f8:	2360      	movs	r3, #96	; 0x60
   297fa:	18fb      	adds	r3, r7, r3
   297fc:	2200      	movs	r2, #0
   297fe:	721a      	strb	r2, [r3, #8]
   29800:	2360      	movs	r3, #96	; 0x60
   29802:	18fb      	adds	r3, r7, r3
   29804:	2200      	movs	r2, #0
   29806:	725a      	strb	r2, [r3, #9]
   29808:	2360      	movs	r3, #96	; 0x60
   2980a:	18fb      	adds	r3, r7, r3
   2980c:	0019      	movs	r1, r3
   2980e:	2001      	movs	r0, #1
   29810:	4b7b      	ldr	r3, [pc, #492]	; (29a00 <system_clock_init+0x270>)
   29812:	4798      	blx	r3
   29814:	2001      	movs	r0, #1
   29816:	4b7b      	ldr	r3, [pc, #492]	; (29a04 <system_clock_init+0x274>)
   29818:	4798      	blx	r3
   2981a:	2354      	movs	r3, #84	; 0x54
   2981c:	18fb      	adds	r3, r7, r3
   2981e:	0018      	movs	r0, r3
   29820:	4b76      	ldr	r3, [pc, #472]	; (299fc <system_clock_init+0x26c>)
   29822:	4798      	blx	r3
   29824:	2354      	movs	r3, #84	; 0x54
   29826:	18fb      	adds	r3, r7, r3
   29828:	2203      	movs	r2, #3
   2982a:	701a      	strb	r2, [r3, #0]
   2982c:	2354      	movs	r3, #84	; 0x54
   2982e:	18fb      	adds	r3, r7, r3
   29830:	2201      	movs	r2, #1
   29832:	605a      	str	r2, [r3, #4]
   29834:	2354      	movs	r3, #84	; 0x54
   29836:	18fb      	adds	r3, r7, r3
   29838:	2201      	movs	r2, #1
   2983a:	721a      	strb	r2, [r3, #8]
   2983c:	2354      	movs	r3, #84	; 0x54
   2983e:	18fb      	adds	r3, r7, r3
   29840:	2200      	movs	r2, #0
   29842:	725a      	strb	r2, [r3, #9]
   29844:	2354      	movs	r3, #84	; 0x54
   29846:	18fb      	adds	r3, r7, r3
   29848:	0019      	movs	r1, r3
   2984a:	2002      	movs	r0, #2
   2984c:	4b6c      	ldr	r3, [pc, #432]	; (29a00 <system_clock_init+0x270>)
   2984e:	4798      	blx	r3
   29850:	2002      	movs	r0, #2
   29852:	4b6c      	ldr	r3, [pc, #432]	; (29a04 <system_clock_init+0x274>)
   29854:	4798      	blx	r3
   29856:	233c      	movs	r3, #60	; 0x3c
   29858:	18fb      	adds	r3, r7, r3
   2985a:	0018      	movs	r0, r3
   2985c:	4b67      	ldr	r3, [pc, #412]	; (299fc <system_clock_init+0x26c>)
   2985e:	4798      	blx	r3
   29860:	233c      	movs	r3, #60	; 0x3c
   29862:	18fb      	adds	r3, r7, r3
   29864:	2203      	movs	r2, #3
   29866:	701a      	strb	r2, [r3, #0]
   29868:	233c      	movs	r3, #60	; 0x3c
   2986a:	18fb      	adds	r3, r7, r3
   2986c:	2220      	movs	r2, #32
   2986e:	605a      	str	r2, [r3, #4]
   29870:	233c      	movs	r3, #60	; 0x3c
   29872:	18fb      	adds	r3, r7, r3
   29874:	2200      	movs	r2, #0
   29876:	721a      	strb	r2, [r3, #8]
   29878:	233c      	movs	r3, #60	; 0x3c
   2987a:	18fb      	adds	r3, r7, r3
   2987c:	2200      	movs	r2, #0
   2987e:	725a      	strb	r2, [r3, #9]
   29880:	233c      	movs	r3, #60	; 0x3c
   29882:	18fb      	adds	r3, r7, r3
   29884:	0019      	movs	r1, r3
   29886:	2004      	movs	r0, #4
   29888:	4b5d      	ldr	r3, [pc, #372]	; (29a00 <system_clock_init+0x270>)
   2988a:	4798      	blx	r3
   2988c:	2004      	movs	r0, #4
   2988e:	4b5d      	ldr	r3, [pc, #372]	; (29a04 <system_clock_init+0x274>)
   29890:	4798      	blx	r3
   29892:	2330      	movs	r3, #48	; 0x30
   29894:	18fb      	adds	r3, r7, r3
   29896:	0018      	movs	r0, r3
   29898:	4b58      	ldr	r3, [pc, #352]	; (299fc <system_clock_init+0x26c>)
   2989a:	4798      	blx	r3
   2989c:	2330      	movs	r3, #48	; 0x30
   2989e:	18fb      	adds	r3, r7, r3
   298a0:	2206      	movs	r2, #6
   298a2:	701a      	strb	r2, [r3, #0]
   298a4:	2330      	movs	r3, #48	; 0x30
   298a6:	18fb      	adds	r3, r7, r3
   298a8:	2201      	movs	r2, #1
   298aa:	605a      	str	r2, [r3, #4]
   298ac:	2330      	movs	r3, #48	; 0x30
   298ae:	18fb      	adds	r3, r7, r3
   298b0:	2200      	movs	r2, #0
   298b2:	721a      	strb	r2, [r3, #8]
   298b4:	2330      	movs	r3, #48	; 0x30
   298b6:	18fb      	adds	r3, r7, r3
   298b8:	2200      	movs	r2, #0
   298ba:	725a      	strb	r2, [r3, #9]
   298bc:	2330      	movs	r3, #48	; 0x30
   298be:	18fb      	adds	r3, r7, r3
   298c0:	0019      	movs	r1, r3
   298c2:	2005      	movs	r0, #5
   298c4:	4b4e      	ldr	r3, [pc, #312]	; (29a00 <system_clock_init+0x270>)
   298c6:	4798      	blx	r3
   298c8:	2005      	movs	r0, #5
   298ca:	4b4e      	ldr	r3, [pc, #312]	; (29a04 <system_clock_init+0x274>)
   298cc:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   298ce:	2390      	movs	r3, #144	; 0x90
   298d0:	18fb      	adds	r3, r7, r3
   298d2:	0018      	movs	r0, r3
   298d4:	4b4c      	ldr	r3, [pc, #304]	; (29a08 <system_clock_init+0x278>)
   298d6:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   298d8:	2390      	movs	r3, #144	; 0x90
   298da:	18fb      	adds	r3, r7, r3
   298dc:	2201      	movs	r2, #1
   298de:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   298e0:	2390      	movs	r3, #144	; 0x90
   298e2:	18fb      	adds	r3, r7, r3
   298e4:	0019      	movs	r1, r3
   298e6:	2001      	movs	r0, #1
   298e8:	4b48      	ldr	r3, [pc, #288]	; (29a0c <system_clock_init+0x27c>)
   298ea:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   298ec:	2001      	movs	r0, #1
   298ee:	4b48      	ldr	r3, [pc, #288]	; (29a10 <system_clock_init+0x280>)
   298f0:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   298f2:	2378      	movs	r3, #120	; 0x78
   298f4:	18fb      	adds	r3, r7, r3
   298f6:	0018      	movs	r0, r3
   298f8:	4b46      	ldr	r3, [pc, #280]	; (29a14 <system_clock_init+0x284>)
   298fa:	4798      	blx	r3

	dpll_config.on_demand        = false;
   298fc:	2378      	movs	r3, #120	; 0x78
   298fe:	18fb      	adds	r3, r7, r3
   29900:	2200      	movs	r2, #0
   29902:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   29904:	2378      	movs	r3, #120	; 0x78
   29906:	18fb      	adds	r3, r7, r3
   29908:	2200      	movs	r2, #0
   2990a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2990c:	2378      	movs	r3, #120	; 0x78
   2990e:	18fb      	adds	r3, r7, r3
   29910:	2200      	movs	r2, #0
   29912:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   29914:	2378      	movs	r3, #120	; 0x78
   29916:	18fb      	adds	r3, r7, r3
   29918:	2200      	movs	r2, #0
   2991a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2991c:	2378      	movs	r3, #120	; 0x78
   2991e:	18fb      	adds	r3, r7, r3
   29920:	2200      	movs	r2, #0
   29922:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   29924:	2378      	movs	r3, #120	; 0x78
   29926:	18fb      	adds	r3, r7, r3
   29928:	2200      	movs	r2, #0
   2992a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2992c:	2378      	movs	r3, #120	; 0x78
   2992e:	18fb      	adds	r3, r7, r3
   29930:	2200      	movs	r2, #0
   29932:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   29934:	2378      	movs	r3, #120	; 0x78
   29936:	18fb      	adds	r3, r7, r3
   29938:	2202      	movs	r2, #2
   2993a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2993c:	2378      	movs	r3, #120	; 0x78
   2993e:	18fb      	adds	r3, r7, r3
   29940:	4a35      	ldr	r2, [pc, #212]	; (29a18 <system_clock_init+0x288>)
   29942:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   29944:	2378      	movs	r3, #120	; 0x78
   29946:	18fb      	adds	r3, r7, r3
   29948:	2201      	movs	r2, #1
   2994a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2994c:	2378      	movs	r3, #120	; 0x78
   2994e:	18fb      	adds	r3, r7, r3
   29950:	4a32      	ldr	r2, [pc, #200]	; (29a1c <system_clock_init+0x28c>)
   29952:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   29954:	2378      	movs	r3, #120	; 0x78
   29956:	18fb      	adds	r3, r7, r3
   29958:	0018      	movs	r0, r3
   2995a:	4b31      	ldr	r3, [pc, #196]	; (29a20 <system_clock_init+0x290>)
   2995c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2995e:	2008      	movs	r0, #8
   29960:	4b24      	ldr	r3, [pc, #144]	; (299f4 <system_clock_init+0x264>)
   29962:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   29964:	46c0      	nop			; (mov r8, r8)
   29966:	2008      	movs	r0, #8
   29968:	4b2e      	ldr	r3, [pc, #184]	; (29a24 <system_clock_init+0x294>)
   2996a:	4798      	blx	r3
   2996c:	0003      	movs	r3, r0
   2996e:	001a      	movs	r2, r3
   29970:	2301      	movs	r3, #1
   29972:	4053      	eors	r3, r2
   29974:	b2db      	uxtb	r3, r3
   29976:	2b00      	cmp	r3, #0
   29978:	d1f5      	bne.n	29966 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2997a:	4919      	ldr	r1, [pc, #100]	; (299e0 <system_clock_init+0x250>)
   2997c:	2244      	movs	r2, #68	; 0x44
   2997e:	5c8b      	ldrb	r3, [r1, r2]
   29980:	2080      	movs	r0, #128	; 0x80
   29982:	4240      	negs	r0, r0
   29984:	4303      	orrs	r3, r0
   29986:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   29988:	2000      	movs	r0, #0
   2998a:	4b27      	ldr	r3, [pc, #156]	; (29a28 <system_clock_init+0x298>)
   2998c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2998e:	2100      	movs	r1, #0
   29990:	2000      	movs	r0, #0
   29992:	4b26      	ldr	r3, [pc, #152]	; (29a2c <system_clock_init+0x29c>)
   29994:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   29996:	2100      	movs	r1, #0
   29998:	2001      	movs	r0, #1
   2999a:	4b24      	ldr	r3, [pc, #144]	; (29a2c <system_clock_init+0x29c>)
   2999c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2999e:	2100      	movs	r1, #0
   299a0:	2002      	movs	r0, #2
   299a2:	4b22      	ldr	r3, [pc, #136]	; (29a2c <system_clock_init+0x29c>)
   299a4:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   299a6:	003b      	movs	r3, r7
   299a8:	0018      	movs	r0, r3
   299aa:	4b14      	ldr	r3, [pc, #80]	; (299fc <system_clock_init+0x26c>)
   299ac:	4798      	blx	r3
   299ae:	003b      	movs	r3, r7
   299b0:	2208      	movs	r2, #8
   299b2:	701a      	strb	r2, [r3, #0]
   299b4:	003b      	movs	r3, r7
   299b6:	2201      	movs	r2, #1
   299b8:	605a      	str	r2, [r3, #4]
   299ba:	003b      	movs	r3, r7
   299bc:	2200      	movs	r2, #0
   299be:	721a      	strb	r2, [r3, #8]
   299c0:	003b      	movs	r3, r7
   299c2:	2201      	movs	r2, #1
   299c4:	725a      	strb	r2, [r3, #9]
   299c6:	003b      	movs	r3, r7
   299c8:	0019      	movs	r1, r3
   299ca:	2000      	movs	r0, #0
   299cc:	4b0c      	ldr	r3, [pc, #48]	; (29a00 <system_clock_init+0x270>)
   299ce:	4798      	blx	r3
   299d0:	2000      	movs	r0, #0
   299d2:	4b0c      	ldr	r3, [pc, #48]	; (29a04 <system_clock_init+0x274>)
   299d4:	4798      	blx	r3
#endif
}
   299d6:	46c0      	nop			; (mov r8, r8)
   299d8:	46bd      	mov	sp, r7
   299da:	b026      	add	sp, #152	; 0x98
   299dc:	bd80      	pop	{r7, pc}
   299de:	46c0      	nop			; (mov r8, r8)
   299e0:	40000800 	.word	0x40000800
   299e4:	00029351 	.word	0x00029351
   299e8:	00029759 	.word	0x00029759
   299ec:	00029261 	.word	0x00029261
   299f0:	000294a5 	.word	0x000294a5
   299f4:	00029629 	.word	0x00029629
   299f8:	00029ad5 	.word	0x00029ad5
   299fc:	0002921d 	.word	0x0002921d
   29a00:	00029b05 	.word	0x00029b05
   29a04:	00029c29 	.word	0x00029c29
   29a08:	0002924b 	.word	0x0002924b
   29a0c:	00029d5d 	.word	0x00029d5d
   29a10:	00029da1 	.word	0x00029da1
   29a14:	000292f9 	.word	0x000292f9
   29a18:	000f4240 	.word	0x000f4240
   29a1c:	02dc6c00 	.word	0x02dc6c00
   29a20:	0002951d 	.word	0x0002951d
   29a24:	000296d5 	.word	0x000296d5
   29a28:	00029285 	.word	0x00029285
   29a2c:	000292a5 	.word	0x000292a5

00029a30 <system_apb_clock_set_mask>:
{
   29a30:	b580      	push	{r7, lr}
   29a32:	b082      	sub	sp, #8
   29a34:	af00      	add	r7, sp, #0
   29a36:	0002      	movs	r2, r0
   29a38:	6039      	str	r1, [r7, #0]
   29a3a:	1dfb      	adds	r3, r7, #7
   29a3c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29a3e:	1dfb      	adds	r3, r7, #7
   29a40:	781b      	ldrb	r3, [r3, #0]
   29a42:	2b01      	cmp	r3, #1
   29a44:	d00a      	beq.n	29a5c <system_apb_clock_set_mask+0x2c>
   29a46:	2b02      	cmp	r3, #2
   29a48:	d00f      	beq.n	29a6a <system_apb_clock_set_mask+0x3a>
   29a4a:	2b00      	cmp	r3, #0
   29a4c:	d114      	bne.n	29a78 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29a4e:	4b0e      	ldr	r3, [pc, #56]	; (29a88 <system_apb_clock_set_mask+0x58>)
   29a50:	4a0d      	ldr	r2, [pc, #52]	; (29a88 <system_apb_clock_set_mask+0x58>)
   29a52:	6991      	ldr	r1, [r2, #24]
   29a54:	683a      	ldr	r2, [r7, #0]
   29a56:	430a      	orrs	r2, r1
   29a58:	619a      	str	r2, [r3, #24]
			break;
   29a5a:	e00f      	b.n	29a7c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29a5c:	4b0a      	ldr	r3, [pc, #40]	; (29a88 <system_apb_clock_set_mask+0x58>)
   29a5e:	4a0a      	ldr	r2, [pc, #40]	; (29a88 <system_apb_clock_set_mask+0x58>)
   29a60:	69d1      	ldr	r1, [r2, #28]
   29a62:	683a      	ldr	r2, [r7, #0]
   29a64:	430a      	orrs	r2, r1
   29a66:	61da      	str	r2, [r3, #28]
			break;
   29a68:	e008      	b.n	29a7c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29a6a:	4b07      	ldr	r3, [pc, #28]	; (29a88 <system_apb_clock_set_mask+0x58>)
   29a6c:	4a06      	ldr	r2, [pc, #24]	; (29a88 <system_apb_clock_set_mask+0x58>)
   29a6e:	6a11      	ldr	r1, [r2, #32]
   29a70:	683a      	ldr	r2, [r7, #0]
   29a72:	430a      	orrs	r2, r1
   29a74:	621a      	str	r2, [r3, #32]
			break;
   29a76:	e001      	b.n	29a7c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29a78:	2317      	movs	r3, #23
   29a7a:	e000      	b.n	29a7e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29a7c:	2300      	movs	r3, #0
}
   29a7e:	0018      	movs	r0, r3
   29a80:	46bd      	mov	sp, r7
   29a82:	b002      	add	sp, #8
   29a84:	bd80      	pop	{r7, pc}
   29a86:	46c0      	nop			; (mov r8, r8)
   29a88:	40000400 	.word	0x40000400

00029a8c <system_interrupt_enter_critical_section>:
{
   29a8c:	b580      	push	{r7, lr}
   29a8e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   29a90:	4b02      	ldr	r3, [pc, #8]	; (29a9c <system_interrupt_enter_critical_section+0x10>)
   29a92:	4798      	blx	r3
}
   29a94:	46c0      	nop			; (mov r8, r8)
   29a96:	46bd      	mov	sp, r7
   29a98:	bd80      	pop	{r7, pc}
   29a9a:	46c0      	nop			; (mov r8, r8)
   29a9c:	000260c9 	.word	0x000260c9

00029aa0 <system_interrupt_leave_critical_section>:
{
   29aa0:	b580      	push	{r7, lr}
   29aa2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   29aa4:	4b02      	ldr	r3, [pc, #8]	; (29ab0 <system_interrupt_leave_critical_section+0x10>)
   29aa6:	4798      	blx	r3
}
   29aa8:	46c0      	nop			; (mov r8, r8)
   29aaa:	46bd      	mov	sp, r7
   29aac:	bd80      	pop	{r7, pc}
   29aae:	46c0      	nop			; (mov r8, r8)
   29ab0:	0002611d 	.word	0x0002611d

00029ab4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   29ab4:	b580      	push	{r7, lr}
   29ab6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   29ab8:	4b05      	ldr	r3, [pc, #20]	; (29ad0 <system_gclk_is_syncing+0x1c>)
   29aba:	785b      	ldrb	r3, [r3, #1]
   29abc:	b2db      	uxtb	r3, r3
   29abe:	b25b      	sxtb	r3, r3
   29ac0:	2b00      	cmp	r3, #0
   29ac2:	da01      	bge.n	29ac8 <system_gclk_is_syncing+0x14>
		return true;
   29ac4:	2301      	movs	r3, #1
   29ac6:	e000      	b.n	29aca <system_gclk_is_syncing+0x16>
	}

	return false;
   29ac8:	2300      	movs	r3, #0
}
   29aca:	0018      	movs	r0, r3
   29acc:	46bd      	mov	sp, r7
   29ace:	bd80      	pop	{r7, pc}
   29ad0:	40000c00 	.word	0x40000c00

00029ad4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   29ad4:	b580      	push	{r7, lr}
   29ad6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   29ad8:	2108      	movs	r1, #8
   29ada:	2000      	movs	r0, #0
   29adc:	4b07      	ldr	r3, [pc, #28]	; (29afc <system_gclk_init+0x28>)
   29ade:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   29ae0:	4b07      	ldr	r3, [pc, #28]	; (29b00 <system_gclk_init+0x2c>)
   29ae2:	2201      	movs	r2, #1
   29ae4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   29ae6:	46c0      	nop			; (mov r8, r8)
   29ae8:	4b05      	ldr	r3, [pc, #20]	; (29b00 <system_gclk_init+0x2c>)
   29aea:	781b      	ldrb	r3, [r3, #0]
   29aec:	b2db      	uxtb	r3, r3
   29aee:	001a      	movs	r2, r3
   29af0:	2301      	movs	r3, #1
   29af2:	4013      	ands	r3, r2
   29af4:	d1f8      	bne.n	29ae8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   29af6:	46c0      	nop			; (mov r8, r8)
   29af8:	46bd      	mov	sp, r7
   29afa:	bd80      	pop	{r7, pc}
   29afc:	00029a31 	.word	0x00029a31
   29b00:	40000c00 	.word	0x40000c00

00029b04 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   29b04:	b580      	push	{r7, lr}
   29b06:	b086      	sub	sp, #24
   29b08:	af00      	add	r7, sp, #0
   29b0a:	0002      	movs	r2, r0
   29b0c:	6039      	str	r1, [r7, #0]
   29b0e:	1dfb      	adds	r3, r7, #7
   29b10:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   29b12:	1dfb      	adds	r3, r7, #7
   29b14:	781b      	ldrb	r3, [r3, #0]
   29b16:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   29b18:	1dfb      	adds	r3, r7, #7
   29b1a:	781b      	ldrb	r3, [r3, #0]
   29b1c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   29b1e:	683b      	ldr	r3, [r7, #0]
   29b20:	781b      	ldrb	r3, [r3, #0]
   29b22:	021b      	lsls	r3, r3, #8
   29b24:	001a      	movs	r2, r3
   29b26:	697b      	ldr	r3, [r7, #20]
   29b28:	4313      	orrs	r3, r2
   29b2a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   29b2c:	683b      	ldr	r3, [r7, #0]
   29b2e:	785b      	ldrb	r3, [r3, #1]
   29b30:	2b00      	cmp	r3, #0
   29b32:	d004      	beq.n	29b3e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   29b34:	697b      	ldr	r3, [r7, #20]
   29b36:	2280      	movs	r2, #128	; 0x80
   29b38:	02d2      	lsls	r2, r2, #11
   29b3a:	4313      	orrs	r3, r2
   29b3c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   29b3e:	683b      	ldr	r3, [r7, #0]
   29b40:	7a5b      	ldrb	r3, [r3, #9]
   29b42:	2b00      	cmp	r3, #0
   29b44:	d004      	beq.n	29b50 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   29b46:	697b      	ldr	r3, [r7, #20]
   29b48:	2280      	movs	r2, #128	; 0x80
   29b4a:	0312      	lsls	r2, r2, #12
   29b4c:	4313      	orrs	r3, r2
   29b4e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   29b50:	683b      	ldr	r3, [r7, #0]
   29b52:	685b      	ldr	r3, [r3, #4]
   29b54:	2b01      	cmp	r3, #1
   29b56:	d92c      	bls.n	29bb2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   29b58:	683b      	ldr	r3, [r7, #0]
   29b5a:	685a      	ldr	r2, [r3, #4]
   29b5c:	683b      	ldr	r3, [r7, #0]
   29b5e:	685b      	ldr	r3, [r3, #4]
   29b60:	3b01      	subs	r3, #1
   29b62:	4013      	ands	r3, r2
   29b64:	d11a      	bne.n	29b9c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   29b66:	2300      	movs	r3, #0
   29b68:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   29b6a:	2302      	movs	r3, #2
   29b6c:	60bb      	str	r3, [r7, #8]
   29b6e:	e005      	b.n	29b7c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   29b70:	68fb      	ldr	r3, [r7, #12]
   29b72:	3301      	adds	r3, #1
   29b74:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   29b76:	68bb      	ldr	r3, [r7, #8]
   29b78:	005b      	lsls	r3, r3, #1
   29b7a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   29b7c:	683b      	ldr	r3, [r7, #0]
   29b7e:	685a      	ldr	r2, [r3, #4]
   29b80:	68bb      	ldr	r3, [r7, #8]
   29b82:	429a      	cmp	r2, r3
   29b84:	d8f4      	bhi.n	29b70 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   29b86:	68fb      	ldr	r3, [r7, #12]
   29b88:	021b      	lsls	r3, r3, #8
   29b8a:	693a      	ldr	r2, [r7, #16]
   29b8c:	4313      	orrs	r3, r2
   29b8e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   29b90:	697b      	ldr	r3, [r7, #20]
   29b92:	2280      	movs	r2, #128	; 0x80
   29b94:	0352      	lsls	r2, r2, #13
   29b96:	4313      	orrs	r3, r2
   29b98:	617b      	str	r3, [r7, #20]
   29b9a:	e00a      	b.n	29bb2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   29b9c:	683b      	ldr	r3, [r7, #0]
   29b9e:	685b      	ldr	r3, [r3, #4]
   29ba0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   29ba2:	693a      	ldr	r2, [r7, #16]
   29ba4:	4313      	orrs	r3, r2
   29ba6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   29ba8:	697b      	ldr	r3, [r7, #20]
   29baa:	2280      	movs	r2, #128	; 0x80
   29bac:	0292      	lsls	r2, r2, #10
   29bae:	4313      	orrs	r3, r2
   29bb0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   29bb2:	683b      	ldr	r3, [r7, #0]
   29bb4:	7a1b      	ldrb	r3, [r3, #8]
   29bb6:	2b00      	cmp	r3, #0
   29bb8:	d004      	beq.n	29bc4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   29bba:	697b      	ldr	r3, [r7, #20]
   29bbc:	2280      	movs	r2, #128	; 0x80
   29bbe:	0392      	lsls	r2, r2, #14
   29bc0:	4313      	orrs	r3, r2
   29bc2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   29bc4:	46c0      	nop			; (mov r8, r8)
   29bc6:	4b13      	ldr	r3, [pc, #76]	; (29c14 <system_gclk_gen_set_config+0x110>)
   29bc8:	4798      	blx	r3
   29bca:	1e03      	subs	r3, r0, #0
   29bcc:	d1fb      	bne.n	29bc6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29bce:	4b12      	ldr	r3, [pc, #72]	; (29c18 <system_gclk_gen_set_config+0x114>)
   29bd0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   29bd2:	4a12      	ldr	r2, [pc, #72]	; (29c1c <system_gclk_gen_set_config+0x118>)
   29bd4:	1dfb      	adds	r3, r7, #7
   29bd6:	781b      	ldrb	r3, [r3, #0]
   29bd8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   29bda:	46c0      	nop			; (mov r8, r8)
   29bdc:	4b0d      	ldr	r3, [pc, #52]	; (29c14 <system_gclk_gen_set_config+0x110>)
   29bde:	4798      	blx	r3
   29be0:	1e03      	subs	r3, r0, #0
   29be2:	d1fb      	bne.n	29bdc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   29be4:	4b0e      	ldr	r3, [pc, #56]	; (29c20 <system_gclk_gen_set_config+0x11c>)
   29be6:	693a      	ldr	r2, [r7, #16]
   29be8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   29bea:	46c0      	nop			; (mov r8, r8)
   29bec:	4b09      	ldr	r3, [pc, #36]	; (29c14 <system_gclk_gen_set_config+0x110>)
   29bee:	4798      	blx	r3
   29bf0:	1e03      	subs	r3, r0, #0
   29bf2:	d1fb      	bne.n	29bec <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   29bf4:	4b0a      	ldr	r3, [pc, #40]	; (29c20 <system_gclk_gen_set_config+0x11c>)
   29bf6:	4a0a      	ldr	r2, [pc, #40]	; (29c20 <system_gclk_gen_set_config+0x11c>)
   29bf8:	6851      	ldr	r1, [r2, #4]
   29bfa:	2280      	movs	r2, #128	; 0x80
   29bfc:	0252      	lsls	r2, r2, #9
   29bfe:	4011      	ands	r1, r2
   29c00:	697a      	ldr	r2, [r7, #20]
   29c02:	430a      	orrs	r2, r1
   29c04:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   29c06:	4b07      	ldr	r3, [pc, #28]	; (29c24 <system_gclk_gen_set_config+0x120>)
   29c08:	4798      	blx	r3
}
   29c0a:	46c0      	nop			; (mov r8, r8)
   29c0c:	46bd      	mov	sp, r7
   29c0e:	b006      	add	sp, #24
   29c10:	bd80      	pop	{r7, pc}
   29c12:	46c0      	nop			; (mov r8, r8)
   29c14:	00029ab5 	.word	0x00029ab5
   29c18:	00029a8d 	.word	0x00029a8d
   29c1c:	40000c08 	.word	0x40000c08
   29c20:	40000c00 	.word	0x40000c00
   29c24:	00029aa1 	.word	0x00029aa1

00029c28 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   29c28:	b580      	push	{r7, lr}
   29c2a:	b082      	sub	sp, #8
   29c2c:	af00      	add	r7, sp, #0
   29c2e:	0002      	movs	r2, r0
   29c30:	1dfb      	adds	r3, r7, #7
   29c32:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29c34:	46c0      	nop			; (mov r8, r8)
   29c36:	4b0e      	ldr	r3, [pc, #56]	; (29c70 <system_gclk_gen_enable+0x48>)
   29c38:	4798      	blx	r3
   29c3a:	1e03      	subs	r3, r0, #0
   29c3c:	d1fb      	bne.n	29c36 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29c3e:	4b0d      	ldr	r3, [pc, #52]	; (29c74 <system_gclk_gen_enable+0x4c>)
   29c40:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29c42:	4a0d      	ldr	r2, [pc, #52]	; (29c78 <system_gclk_gen_enable+0x50>)
   29c44:	1dfb      	adds	r3, r7, #7
   29c46:	781b      	ldrb	r3, [r3, #0]
   29c48:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29c4a:	46c0      	nop			; (mov r8, r8)
   29c4c:	4b08      	ldr	r3, [pc, #32]	; (29c70 <system_gclk_gen_enable+0x48>)
   29c4e:	4798      	blx	r3
   29c50:	1e03      	subs	r3, r0, #0
   29c52:	d1fb      	bne.n	29c4c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   29c54:	4b09      	ldr	r3, [pc, #36]	; (29c7c <system_gclk_gen_enable+0x54>)
   29c56:	4a09      	ldr	r2, [pc, #36]	; (29c7c <system_gclk_gen_enable+0x54>)
   29c58:	6852      	ldr	r2, [r2, #4]
   29c5a:	2180      	movs	r1, #128	; 0x80
   29c5c:	0249      	lsls	r1, r1, #9
   29c5e:	430a      	orrs	r2, r1
   29c60:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   29c62:	4b07      	ldr	r3, [pc, #28]	; (29c80 <system_gclk_gen_enable+0x58>)
   29c64:	4798      	blx	r3
}
   29c66:	46c0      	nop			; (mov r8, r8)
   29c68:	46bd      	mov	sp, r7
   29c6a:	b002      	add	sp, #8
   29c6c:	bd80      	pop	{r7, pc}
   29c6e:	46c0      	nop			; (mov r8, r8)
   29c70:	00029ab5 	.word	0x00029ab5
   29c74:	00029a8d 	.word	0x00029a8d
   29c78:	40000c04 	.word	0x40000c04
   29c7c:	40000c00 	.word	0x40000c00
   29c80:	00029aa1 	.word	0x00029aa1

00029c84 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   29c84:	b580      	push	{r7, lr}
   29c86:	b086      	sub	sp, #24
   29c88:	af00      	add	r7, sp, #0
   29c8a:	0002      	movs	r2, r0
   29c8c:	1dfb      	adds	r3, r7, #7
   29c8e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29c90:	46c0      	nop			; (mov r8, r8)
   29c92:	4b2a      	ldr	r3, [pc, #168]	; (29d3c <system_gclk_gen_get_hz+0xb8>)
   29c94:	4798      	blx	r3
   29c96:	1e03      	subs	r3, r0, #0
   29c98:	d1fb      	bne.n	29c92 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29c9a:	4b29      	ldr	r3, [pc, #164]	; (29d40 <system_gclk_gen_get_hz+0xbc>)
   29c9c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29c9e:	4a29      	ldr	r2, [pc, #164]	; (29d44 <system_gclk_gen_get_hz+0xc0>)
   29ca0:	1dfb      	adds	r3, r7, #7
   29ca2:	781b      	ldrb	r3, [r3, #0]
   29ca4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29ca6:	46c0      	nop			; (mov r8, r8)
   29ca8:	4b24      	ldr	r3, [pc, #144]	; (29d3c <system_gclk_gen_get_hz+0xb8>)
   29caa:	4798      	blx	r3
   29cac:	1e03      	subs	r3, r0, #0
   29cae:	d1fb      	bne.n	29ca8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   29cb0:	4b25      	ldr	r3, [pc, #148]	; (29d48 <system_gclk_gen_get_hz+0xc4>)
   29cb2:	685b      	ldr	r3, [r3, #4]
   29cb4:	04db      	lsls	r3, r3, #19
   29cb6:	0edb      	lsrs	r3, r3, #27
   29cb8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   29cba:	0018      	movs	r0, r3
   29cbc:	4b23      	ldr	r3, [pc, #140]	; (29d4c <system_gclk_gen_get_hz+0xc8>)
   29cbe:	4798      	blx	r3
   29cc0:	0003      	movs	r3, r0
   29cc2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29cc4:	4a1f      	ldr	r2, [pc, #124]	; (29d44 <system_gclk_gen_get_hz+0xc0>)
   29cc6:	1dfb      	adds	r3, r7, #7
   29cc8:	781b      	ldrb	r3, [r3, #0]
   29cca:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   29ccc:	4b1e      	ldr	r3, [pc, #120]	; (29d48 <system_gclk_gen_get_hz+0xc4>)
   29cce:	685b      	ldr	r3, [r3, #4]
   29cd0:	02db      	lsls	r3, r3, #11
   29cd2:	0fdb      	lsrs	r3, r3, #31
   29cd4:	b2da      	uxtb	r2, r3
   29cd6:	2313      	movs	r3, #19
   29cd8:	18fb      	adds	r3, r7, r3
   29cda:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   29cdc:	4a1c      	ldr	r2, [pc, #112]	; (29d50 <system_gclk_gen_get_hz+0xcc>)
   29cde:	1dfb      	adds	r3, r7, #7
   29ce0:	781b      	ldrb	r3, [r3, #0]
   29ce2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29ce4:	46c0      	nop			; (mov r8, r8)
   29ce6:	4b15      	ldr	r3, [pc, #84]	; (29d3c <system_gclk_gen_get_hz+0xb8>)
   29ce8:	4798      	blx	r3
   29cea:	1e03      	subs	r3, r0, #0
   29cec:	d1fb      	bne.n	29ce6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   29cee:	4b16      	ldr	r3, [pc, #88]	; (29d48 <system_gclk_gen_get_hz+0xc4>)
   29cf0:	689b      	ldr	r3, [r3, #8]
   29cf2:	021b      	lsls	r3, r3, #8
   29cf4:	0c1b      	lsrs	r3, r3, #16
   29cf6:	b29b      	uxth	r3, r3
   29cf8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   29cfa:	4b16      	ldr	r3, [pc, #88]	; (29d54 <system_gclk_gen_get_hz+0xd0>)
   29cfc:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   29cfe:	2313      	movs	r3, #19
   29d00:	18fb      	adds	r3, r7, r3
   29d02:	781b      	ldrb	r3, [r3, #0]
   29d04:	2b00      	cmp	r3, #0
   29d06:	d109      	bne.n	29d1c <system_gclk_gen_get_hz+0x98>
   29d08:	68fb      	ldr	r3, [r7, #12]
   29d0a:	2b01      	cmp	r3, #1
   29d0c:	d906      	bls.n	29d1c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   29d0e:	4b12      	ldr	r3, [pc, #72]	; (29d58 <system_gclk_gen_get_hz+0xd4>)
   29d10:	68f9      	ldr	r1, [r7, #12]
   29d12:	6978      	ldr	r0, [r7, #20]
   29d14:	4798      	blx	r3
   29d16:	0003      	movs	r3, r0
   29d18:	617b      	str	r3, [r7, #20]
   29d1a:	e00a      	b.n	29d32 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   29d1c:	2313      	movs	r3, #19
   29d1e:	18fb      	adds	r3, r7, r3
   29d20:	781b      	ldrb	r3, [r3, #0]
   29d22:	2b00      	cmp	r3, #0
   29d24:	d005      	beq.n	29d32 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   29d26:	68fb      	ldr	r3, [r7, #12]
   29d28:	3301      	adds	r3, #1
   29d2a:	697a      	ldr	r2, [r7, #20]
   29d2c:	40da      	lsrs	r2, r3
   29d2e:	0013      	movs	r3, r2
   29d30:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   29d32:	697b      	ldr	r3, [r7, #20]
}
   29d34:	0018      	movs	r0, r3
   29d36:	46bd      	mov	sp, r7
   29d38:	b006      	add	sp, #24
   29d3a:	bd80      	pop	{r7, pc}
   29d3c:	00029ab5 	.word	0x00029ab5
   29d40:	00029a8d 	.word	0x00029a8d
   29d44:	40000c04 	.word	0x40000c04
   29d48:	40000c00 	.word	0x40000c00
   29d4c:	000293e5 	.word	0x000293e5
   29d50:	40000c08 	.word	0x40000c08
   29d54:	00029aa1 	.word	0x00029aa1
   29d58:	000328c5 	.word	0x000328c5

00029d5c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   29d5c:	b580      	push	{r7, lr}
   29d5e:	b084      	sub	sp, #16
   29d60:	af00      	add	r7, sp, #0
   29d62:	0002      	movs	r2, r0
   29d64:	6039      	str	r1, [r7, #0]
   29d66:	1dfb      	adds	r3, r7, #7
   29d68:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   29d6a:	1dfb      	adds	r3, r7, #7
   29d6c:	781b      	ldrb	r3, [r3, #0]
   29d6e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   29d70:	683b      	ldr	r3, [r7, #0]
   29d72:	781b      	ldrb	r3, [r3, #0]
   29d74:	021b      	lsls	r3, r3, #8
   29d76:	001a      	movs	r2, r3
   29d78:	68fb      	ldr	r3, [r7, #12]
   29d7a:	4313      	orrs	r3, r2
   29d7c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   29d7e:	1dfb      	adds	r3, r7, #7
   29d80:	781b      	ldrb	r3, [r3, #0]
   29d82:	0018      	movs	r0, r3
   29d84:	4b04      	ldr	r3, [pc, #16]	; (29d98 <system_gclk_chan_set_config+0x3c>)
   29d86:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   29d88:	4b04      	ldr	r3, [pc, #16]	; (29d9c <system_gclk_chan_set_config+0x40>)
   29d8a:	68fa      	ldr	r2, [r7, #12]
   29d8c:	b292      	uxth	r2, r2
   29d8e:	805a      	strh	r2, [r3, #2]
}
   29d90:	46c0      	nop			; (mov r8, r8)
   29d92:	46bd      	mov	sp, r7
   29d94:	b004      	add	sp, #16
   29d96:	bd80      	pop	{r7, pc}
   29d98:	00029de9 	.word	0x00029de9
   29d9c:	40000c00 	.word	0x40000c00

00029da0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   29da0:	b580      	push	{r7, lr}
   29da2:	b082      	sub	sp, #8
   29da4:	af00      	add	r7, sp, #0
   29da6:	0002      	movs	r2, r0
   29da8:	1dfb      	adds	r3, r7, #7
   29daa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29dac:	4b0a      	ldr	r3, [pc, #40]	; (29dd8 <system_gclk_chan_enable+0x38>)
   29dae:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29db0:	4a0a      	ldr	r2, [pc, #40]	; (29ddc <system_gclk_chan_enable+0x3c>)
   29db2:	1dfb      	adds	r3, r7, #7
   29db4:	781b      	ldrb	r3, [r3, #0]
   29db6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   29db8:	4909      	ldr	r1, [pc, #36]	; (29de0 <system_gclk_chan_enable+0x40>)
   29dba:	4b09      	ldr	r3, [pc, #36]	; (29de0 <system_gclk_chan_enable+0x40>)
   29dbc:	885b      	ldrh	r3, [r3, #2]
   29dbe:	b29b      	uxth	r3, r3
   29dc0:	2280      	movs	r2, #128	; 0x80
   29dc2:	01d2      	lsls	r2, r2, #7
   29dc4:	4313      	orrs	r3, r2
   29dc6:	b29b      	uxth	r3, r3
   29dc8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   29dca:	4b06      	ldr	r3, [pc, #24]	; (29de4 <system_gclk_chan_enable+0x44>)
   29dcc:	4798      	blx	r3
}
   29dce:	46c0      	nop			; (mov r8, r8)
   29dd0:	46bd      	mov	sp, r7
   29dd2:	b002      	add	sp, #8
   29dd4:	bd80      	pop	{r7, pc}
   29dd6:	46c0      	nop			; (mov r8, r8)
   29dd8:	00029a8d 	.word	0x00029a8d
   29ddc:	40000c02 	.word	0x40000c02
   29de0:	40000c00 	.word	0x40000c00
   29de4:	00029aa1 	.word	0x00029aa1

00029de8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   29de8:	b580      	push	{r7, lr}
   29dea:	b084      	sub	sp, #16
   29dec:	af00      	add	r7, sp, #0
   29dee:	0002      	movs	r2, r0
   29df0:	1dfb      	adds	r3, r7, #7
   29df2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29df4:	4b1c      	ldr	r3, [pc, #112]	; (29e68 <system_gclk_chan_disable+0x80>)
   29df6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29df8:	4a1c      	ldr	r2, [pc, #112]	; (29e6c <system_gclk_chan_disable+0x84>)
   29dfa:	1dfb      	adds	r3, r7, #7
   29dfc:	781b      	ldrb	r3, [r3, #0]
   29dfe:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   29e00:	4b1b      	ldr	r3, [pc, #108]	; (29e70 <system_gclk_chan_disable+0x88>)
   29e02:	885b      	ldrh	r3, [r3, #2]
   29e04:	051b      	lsls	r3, r3, #20
   29e06:	0f1b      	lsrs	r3, r3, #28
   29e08:	b2db      	uxtb	r3, r3
   29e0a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   29e0c:	4a18      	ldr	r2, [pc, #96]	; (29e70 <system_gclk_chan_disable+0x88>)
   29e0e:	8853      	ldrh	r3, [r2, #2]
   29e10:	4918      	ldr	r1, [pc, #96]	; (29e74 <system_gclk_chan_disable+0x8c>)
   29e12:	400b      	ands	r3, r1
   29e14:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   29e16:	4a16      	ldr	r2, [pc, #88]	; (29e70 <system_gclk_chan_disable+0x88>)
   29e18:	4b15      	ldr	r3, [pc, #84]	; (29e70 <system_gclk_chan_disable+0x88>)
   29e1a:	885b      	ldrh	r3, [r3, #2]
   29e1c:	b29b      	uxth	r3, r3
   29e1e:	4916      	ldr	r1, [pc, #88]	; (29e78 <system_gclk_chan_disable+0x90>)
   29e20:	400b      	ands	r3, r1
   29e22:	b29b      	uxth	r3, r3
   29e24:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   29e26:	46c0      	nop			; (mov r8, r8)
   29e28:	4b11      	ldr	r3, [pc, #68]	; (29e70 <system_gclk_chan_disable+0x88>)
   29e2a:	885b      	ldrh	r3, [r3, #2]
   29e2c:	b29b      	uxth	r3, r3
   29e2e:	001a      	movs	r2, r3
   29e30:	2380      	movs	r3, #128	; 0x80
   29e32:	01db      	lsls	r3, r3, #7
   29e34:	4013      	ands	r3, r2
   29e36:	d1f7      	bne.n	29e28 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   29e38:	4a0d      	ldr	r2, [pc, #52]	; (29e70 <system_gclk_chan_disable+0x88>)
   29e3a:	68fb      	ldr	r3, [r7, #12]
   29e3c:	b2db      	uxtb	r3, r3
   29e3e:	1c19      	adds	r1, r3, #0
   29e40:	230f      	movs	r3, #15
   29e42:	400b      	ands	r3, r1
   29e44:	b2d9      	uxtb	r1, r3
   29e46:	8853      	ldrh	r3, [r2, #2]
   29e48:	1c08      	adds	r0, r1, #0
   29e4a:	210f      	movs	r1, #15
   29e4c:	4001      	ands	r1, r0
   29e4e:	0208      	lsls	r0, r1, #8
   29e50:	4908      	ldr	r1, [pc, #32]	; (29e74 <system_gclk_chan_disable+0x8c>)
   29e52:	400b      	ands	r3, r1
   29e54:	1c19      	adds	r1, r3, #0
   29e56:	1c03      	adds	r3, r0, #0
   29e58:	430b      	orrs	r3, r1
   29e5a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   29e5c:	4b07      	ldr	r3, [pc, #28]	; (29e7c <system_gclk_chan_disable+0x94>)
   29e5e:	4798      	blx	r3
}
   29e60:	46c0      	nop			; (mov r8, r8)
   29e62:	46bd      	mov	sp, r7
   29e64:	b004      	add	sp, #16
   29e66:	bd80      	pop	{r7, pc}
   29e68:	00029a8d 	.word	0x00029a8d
   29e6c:	40000c02 	.word	0x40000c02
   29e70:	40000c00 	.word	0x40000c00
   29e74:	fffff0ff 	.word	0xfffff0ff
   29e78:	ffffbfff 	.word	0xffffbfff
   29e7c:	00029aa1 	.word	0x00029aa1

00029e80 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   29e80:	b580      	push	{r7, lr}
   29e82:	b084      	sub	sp, #16
   29e84:	af00      	add	r7, sp, #0
   29e86:	0002      	movs	r2, r0
   29e88:	1dfb      	adds	r3, r7, #7
   29e8a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   29e8c:	4b0d      	ldr	r3, [pc, #52]	; (29ec4 <system_gclk_chan_get_hz+0x44>)
   29e8e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29e90:	4a0d      	ldr	r2, [pc, #52]	; (29ec8 <system_gclk_chan_get_hz+0x48>)
   29e92:	1dfb      	adds	r3, r7, #7
   29e94:	781b      	ldrb	r3, [r3, #0]
   29e96:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   29e98:	4b0c      	ldr	r3, [pc, #48]	; (29ecc <system_gclk_chan_get_hz+0x4c>)
   29e9a:	885b      	ldrh	r3, [r3, #2]
   29e9c:	051b      	lsls	r3, r3, #20
   29e9e:	0f1b      	lsrs	r3, r3, #28
   29ea0:	b2da      	uxtb	r2, r3
   29ea2:	230f      	movs	r3, #15
   29ea4:	18fb      	adds	r3, r7, r3
   29ea6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   29ea8:	4b09      	ldr	r3, [pc, #36]	; (29ed0 <system_gclk_chan_get_hz+0x50>)
   29eaa:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   29eac:	230f      	movs	r3, #15
   29eae:	18fb      	adds	r3, r7, r3
   29eb0:	781b      	ldrb	r3, [r3, #0]
   29eb2:	0018      	movs	r0, r3
   29eb4:	4b07      	ldr	r3, [pc, #28]	; (29ed4 <system_gclk_chan_get_hz+0x54>)
   29eb6:	4798      	blx	r3
   29eb8:	0003      	movs	r3, r0
}
   29eba:	0018      	movs	r0, r3
   29ebc:	46bd      	mov	sp, r7
   29ebe:	b004      	add	sp, #16
   29ec0:	bd80      	pop	{r7, pc}
   29ec2:	46c0      	nop			; (mov r8, r8)
   29ec4:	00029a8d 	.word	0x00029a8d
   29ec8:	40000c02 	.word	0x40000c02
   29ecc:	40000c00 	.word	0x40000c00
   29ed0:	00029aa1 	.word	0x00029aa1
   29ed4:	00029c85 	.word	0x00029c85

00029ed8 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   29ed8:	b580      	push	{r7, lr}
   29eda:	b084      	sub	sp, #16
   29edc:	af00      	add	r7, sp, #0
   29ede:	0002      	movs	r2, r0
   29ee0:	1dfb      	adds	r3, r7, #7
   29ee2:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   29ee4:	230f      	movs	r3, #15
   29ee6:	18fb      	adds	r3, r7, r3
   29ee8:	2200      	movs	r2, #0
   29eea:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   29eec:	1dfb      	adds	r3, r7, #7
   29eee:	781b      	ldrb	r3, [r3, #0]
   29ef0:	2b7f      	cmp	r3, #127	; 0x7f
   29ef2:	d80b      	bhi.n	29f0c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   29ef4:	4a13      	ldr	r2, [pc, #76]	; (29f44 <system_interrupt_clear_pending+0x6c>)
   29ef6:	1dfb      	adds	r3, r7, #7
   29ef8:	781b      	ldrb	r3, [r3, #0]
   29efa:	b25b      	sxtb	r3, r3
   29efc:	2101      	movs	r1, #1
   29efe:	4099      	lsls	r1, r3
   29f00:	000b      	movs	r3, r1
   29f02:	0019      	movs	r1, r3
   29f04:	23c0      	movs	r3, #192	; 0xc0
   29f06:	005b      	lsls	r3, r3, #1
   29f08:	50d1      	str	r1, [r2, r3]
   29f0a:	e014      	b.n	29f36 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   29f0c:	1dfb      	adds	r3, r7, #7
   29f0e:	781b      	ldrb	r3, [r3, #0]
   29f10:	b25b      	sxtb	r3, r3
   29f12:	330e      	adds	r3, #14
   29f14:	d101      	bne.n	29f1a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   29f16:	2317      	movs	r3, #23
   29f18:	e010      	b.n	29f3c <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   29f1a:	1dfb      	adds	r3, r7, #7
   29f1c:	781b      	ldrb	r3, [r3, #0]
   29f1e:	b25b      	sxtb	r3, r3
   29f20:	3301      	adds	r3, #1
   29f22:	d104      	bne.n	29f2e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   29f24:	4b08      	ldr	r3, [pc, #32]	; (29f48 <system_interrupt_clear_pending+0x70>)
   29f26:	2280      	movs	r2, #128	; 0x80
   29f28:	0492      	lsls	r2, r2, #18
   29f2a:	605a      	str	r2, [r3, #4]
   29f2c:	e003      	b.n	29f36 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   29f2e:	230f      	movs	r3, #15
   29f30:	18fb      	adds	r3, r7, r3
   29f32:	2217      	movs	r2, #23
   29f34:	701a      	strb	r2, [r3, #0]
	}

	return status;
   29f36:	230f      	movs	r3, #15
   29f38:	18fb      	adds	r3, r7, r3
   29f3a:	781b      	ldrb	r3, [r3, #0]
}
   29f3c:	0018      	movs	r0, r3
   29f3e:	46bd      	mov	sp, r7
   29f40:	b004      	add	sp, #16
   29f42:	bd80      	pop	{r7, pc}
   29f44:	e000e100 	.word	0xe000e100
   29f48:	e000ed00 	.word	0xe000ed00

00029f4c <system_pinmux_get_group_from_gpio_pin>:
{
   29f4c:	b580      	push	{r7, lr}
   29f4e:	b084      	sub	sp, #16
   29f50:	af00      	add	r7, sp, #0
   29f52:	0002      	movs	r2, r0
   29f54:	1dfb      	adds	r3, r7, #7
   29f56:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   29f58:	230f      	movs	r3, #15
   29f5a:	18fb      	adds	r3, r7, r3
   29f5c:	1dfa      	adds	r2, r7, #7
   29f5e:	7812      	ldrb	r2, [r2, #0]
   29f60:	09d2      	lsrs	r2, r2, #7
   29f62:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29f64:	230e      	movs	r3, #14
   29f66:	18fb      	adds	r3, r7, r3
   29f68:	1dfa      	adds	r2, r7, #7
   29f6a:	7812      	ldrb	r2, [r2, #0]
   29f6c:	0952      	lsrs	r2, r2, #5
   29f6e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   29f70:	4b0d      	ldr	r3, [pc, #52]	; (29fa8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   29f72:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29f74:	230f      	movs	r3, #15
   29f76:	18fb      	adds	r3, r7, r3
   29f78:	781b      	ldrb	r3, [r3, #0]
   29f7a:	2b00      	cmp	r3, #0
   29f7c:	d10f      	bne.n	29f9e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   29f7e:	230f      	movs	r3, #15
   29f80:	18fb      	adds	r3, r7, r3
   29f82:	781b      	ldrb	r3, [r3, #0]
   29f84:	009b      	lsls	r3, r3, #2
   29f86:	2210      	movs	r2, #16
   29f88:	4694      	mov	ip, r2
   29f8a:	44bc      	add	ip, r7
   29f8c:	4463      	add	r3, ip
   29f8e:	3b08      	subs	r3, #8
   29f90:	681a      	ldr	r2, [r3, #0]
   29f92:	230e      	movs	r3, #14
   29f94:	18fb      	adds	r3, r7, r3
   29f96:	781b      	ldrb	r3, [r3, #0]
   29f98:	01db      	lsls	r3, r3, #7
   29f9a:	18d3      	adds	r3, r2, r3
   29f9c:	e000      	b.n	29fa0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   29f9e:	2300      	movs	r3, #0
}
   29fa0:	0018      	movs	r0, r3
   29fa2:	46bd      	mov	sp, r7
   29fa4:	b004      	add	sp, #16
   29fa6:	bd80      	pop	{r7, pc}
   29fa8:	41004400 	.word	0x41004400

00029fac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   29fac:	b580      	push	{r7, lr}
   29fae:	b088      	sub	sp, #32
   29fb0:	af00      	add	r7, sp, #0
   29fb2:	60f8      	str	r0, [r7, #12]
   29fb4:	60b9      	str	r1, [r7, #8]
   29fb6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   29fb8:	2300      	movs	r3, #0
   29fba:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   29fbc:	687b      	ldr	r3, [r7, #4]
   29fbe:	78db      	ldrb	r3, [r3, #3]
   29fc0:	2201      	movs	r2, #1
   29fc2:	4053      	eors	r3, r2
   29fc4:	b2db      	uxtb	r3, r3
   29fc6:	2b00      	cmp	r3, #0
   29fc8:	d035      	beq.n	2a036 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   29fca:	687b      	ldr	r3, [r7, #4]
   29fcc:	781b      	ldrb	r3, [r3, #0]
   29fce:	2b80      	cmp	r3, #128	; 0x80
   29fd0:	d00b      	beq.n	29fea <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   29fd2:	69fb      	ldr	r3, [r7, #28]
   29fd4:	2280      	movs	r2, #128	; 0x80
   29fd6:	0252      	lsls	r2, r2, #9
   29fd8:	4313      	orrs	r3, r2
   29fda:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   29fdc:	687b      	ldr	r3, [r7, #4]
   29fde:	781b      	ldrb	r3, [r3, #0]
   29fe0:	061b      	lsls	r3, r3, #24
   29fe2:	001a      	movs	r2, r3
   29fe4:	69fb      	ldr	r3, [r7, #28]
   29fe6:	4313      	orrs	r3, r2
   29fe8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29fea:	687b      	ldr	r3, [r7, #4]
   29fec:	785b      	ldrb	r3, [r3, #1]
   29fee:	2b00      	cmp	r3, #0
   29ff0:	d003      	beq.n	29ffa <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29ff2:	687b      	ldr	r3, [r7, #4]
   29ff4:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29ff6:	2b02      	cmp	r3, #2
   29ff8:	d110      	bne.n	2a01c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   29ffa:	69fb      	ldr	r3, [r7, #28]
   29ffc:	2280      	movs	r2, #128	; 0x80
   29ffe:	0292      	lsls	r2, r2, #10
   2a000:	4313      	orrs	r3, r2
   2a002:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2a004:	687b      	ldr	r3, [r7, #4]
   2a006:	789b      	ldrb	r3, [r3, #2]
   2a008:	2b00      	cmp	r3, #0
   2a00a:	d004      	beq.n	2a016 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2a00c:	69fb      	ldr	r3, [r7, #28]
   2a00e:	2280      	movs	r2, #128	; 0x80
   2a010:	02d2      	lsls	r2, r2, #11
   2a012:	4313      	orrs	r3, r2
   2a014:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2a016:	68fb      	ldr	r3, [r7, #12]
   2a018:	68ba      	ldr	r2, [r7, #8]
   2a01a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a01c:	687b      	ldr	r3, [r7, #4]
   2a01e:	785b      	ldrb	r3, [r3, #1]
   2a020:	2b01      	cmp	r3, #1
   2a022:	d003      	beq.n	2a02c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a024:	687b      	ldr	r3, [r7, #4]
   2a026:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a028:	2b02      	cmp	r3, #2
   2a02a:	d107      	bne.n	2a03c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2a02c:	69fb      	ldr	r3, [r7, #28]
   2a02e:	4a22      	ldr	r2, [pc, #136]	; (2a0b8 <_system_pinmux_config+0x10c>)
   2a030:	4013      	ands	r3, r2
   2a032:	61fb      	str	r3, [r7, #28]
   2a034:	e002      	b.n	2a03c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2a036:	68fb      	ldr	r3, [r7, #12]
   2a038:	68ba      	ldr	r2, [r7, #8]
   2a03a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2a03c:	68bb      	ldr	r3, [r7, #8]
   2a03e:	041b      	lsls	r3, r3, #16
   2a040:	0c1b      	lsrs	r3, r3, #16
   2a042:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2a044:	68bb      	ldr	r3, [r7, #8]
   2a046:	0c1b      	lsrs	r3, r3, #16
   2a048:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a04a:	69ba      	ldr	r2, [r7, #24]
   2a04c:	69fb      	ldr	r3, [r7, #28]
   2a04e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2a050:	22a0      	movs	r2, #160	; 0xa0
   2a052:	05d2      	lsls	r2, r2, #23
   2a054:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a056:	68fb      	ldr	r3, [r7, #12]
   2a058:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a05a:	697a      	ldr	r2, [r7, #20]
   2a05c:	69fb      	ldr	r3, [r7, #28]
   2a05e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2a060:	22d0      	movs	r2, #208	; 0xd0
   2a062:	0612      	lsls	r2, r2, #24
   2a064:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a066:	68fb      	ldr	r3, [r7, #12]
   2a068:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2a06a:	687b      	ldr	r3, [r7, #4]
   2a06c:	78db      	ldrb	r3, [r3, #3]
   2a06e:	2201      	movs	r2, #1
   2a070:	4053      	eors	r3, r2
   2a072:	b2db      	uxtb	r3, r3
   2a074:	2b00      	cmp	r3, #0
   2a076:	d01a      	beq.n	2a0ae <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2a078:	69fa      	ldr	r2, [r7, #28]
   2a07a:	2380      	movs	r3, #128	; 0x80
   2a07c:	02db      	lsls	r3, r3, #11
   2a07e:	4013      	ands	r3, r2
   2a080:	d00a      	beq.n	2a098 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2a082:	687b      	ldr	r3, [r7, #4]
   2a084:	789b      	ldrb	r3, [r3, #2]
   2a086:	2b01      	cmp	r3, #1
   2a088:	d103      	bne.n	2a092 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2a08a:	68fb      	ldr	r3, [r7, #12]
   2a08c:	68ba      	ldr	r2, [r7, #8]
   2a08e:	619a      	str	r2, [r3, #24]
   2a090:	e002      	b.n	2a098 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2a092:	68fb      	ldr	r3, [r7, #12]
   2a094:	68ba      	ldr	r2, [r7, #8]
   2a096:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a098:	687b      	ldr	r3, [r7, #4]
   2a09a:	785b      	ldrb	r3, [r3, #1]
   2a09c:	2b01      	cmp	r3, #1
   2a09e:	d003      	beq.n	2a0a8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a0a0:	687b      	ldr	r3, [r7, #4]
   2a0a2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a0a4:	2b02      	cmp	r3, #2
   2a0a6:	d102      	bne.n	2a0ae <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2a0a8:	68fb      	ldr	r3, [r7, #12]
   2a0aa:	68ba      	ldr	r2, [r7, #8]
   2a0ac:	609a      	str	r2, [r3, #8]
		}
	}
}
   2a0ae:	46c0      	nop			; (mov r8, r8)
   2a0b0:	46bd      	mov	sp, r7
   2a0b2:	b008      	add	sp, #32
   2a0b4:	bd80      	pop	{r7, pc}
   2a0b6:	46c0      	nop			; (mov r8, r8)
   2a0b8:	fffbffff 	.word	0xfffbffff

0002a0bc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2a0bc:	b580      	push	{r7, lr}
   2a0be:	b084      	sub	sp, #16
   2a0c0:	af00      	add	r7, sp, #0
   2a0c2:	0002      	movs	r2, r0
   2a0c4:	6039      	str	r1, [r7, #0]
   2a0c6:	1dfb      	adds	r3, r7, #7
   2a0c8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2a0ca:	1dfb      	adds	r3, r7, #7
   2a0cc:	781b      	ldrb	r3, [r3, #0]
   2a0ce:	0018      	movs	r0, r3
   2a0d0:	4b0a      	ldr	r3, [pc, #40]	; (2a0fc <system_pinmux_pin_set_config+0x40>)
   2a0d2:	4798      	blx	r3
   2a0d4:	0003      	movs	r3, r0
   2a0d6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2a0d8:	1dfb      	adds	r3, r7, #7
   2a0da:	781b      	ldrb	r3, [r3, #0]
   2a0dc:	221f      	movs	r2, #31
   2a0de:	4013      	ands	r3, r2
   2a0e0:	2201      	movs	r2, #1
   2a0e2:	409a      	lsls	r2, r3
   2a0e4:	0013      	movs	r3, r2
   2a0e6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2a0e8:	683a      	ldr	r2, [r7, #0]
   2a0ea:	68b9      	ldr	r1, [r7, #8]
   2a0ec:	68fb      	ldr	r3, [r7, #12]
   2a0ee:	0018      	movs	r0, r3
   2a0f0:	4b03      	ldr	r3, [pc, #12]	; (2a100 <system_pinmux_pin_set_config+0x44>)
   2a0f2:	4798      	blx	r3
}
   2a0f4:	46c0      	nop			; (mov r8, r8)
   2a0f6:	46bd      	mov	sp, r7
   2a0f8:	b004      	add	sp, #16
   2a0fa:	bd80      	pop	{r7, pc}
   2a0fc:	00029f4d 	.word	0x00029f4d
   2a100:	00029fad 	.word	0x00029fad

0002a104 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2a104:	b580      	push	{r7, lr}
   2a106:	af00      	add	r7, sp, #0
	return;
   2a108:	46c0      	nop			; (mov r8, r8)
}
   2a10a:	46bd      	mov	sp, r7
   2a10c:	bd80      	pop	{r7, pc}
	...

0002a110 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2a110:	b580      	push	{r7, lr}
   2a112:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2a114:	4b06      	ldr	r3, [pc, #24]	; (2a130 <system_init+0x20>)
   2a116:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2a118:	4b06      	ldr	r3, [pc, #24]	; (2a134 <system_init+0x24>)
   2a11a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2a11c:	4b06      	ldr	r3, [pc, #24]	; (2a138 <system_init+0x28>)
   2a11e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2a120:	4b06      	ldr	r3, [pc, #24]	; (2a13c <system_init+0x2c>)
   2a122:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2a124:	4b06      	ldr	r3, [pc, #24]	; (2a140 <system_init+0x30>)
   2a126:	4798      	blx	r3
}
   2a128:	46c0      	nop			; (mov r8, r8)
   2a12a:	46bd      	mov	sp, r7
   2a12c:	bd80      	pop	{r7, pc}
   2a12e:	46c0      	nop			; (mov r8, r8)
   2a130:	00029791 	.word	0x00029791
   2a134:	00026259 	.word	0x00026259
   2a138:	00012669 	.word	0x00012669
   2a13c:	00026631 	.word	0x00026631
   2a140:	0002a105 	.word	0x0002a105

0002a144 <system_gclk_chan_get_config_defaults>:
{
   2a144:	b580      	push	{r7, lr}
   2a146:	b082      	sub	sp, #8
   2a148:	af00      	add	r7, sp, #0
   2a14a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2a14c:	687b      	ldr	r3, [r7, #4]
   2a14e:	2200      	movs	r2, #0
   2a150:	701a      	strb	r2, [r3, #0]
}
   2a152:	46c0      	nop			; (mov r8, r8)
   2a154:	46bd      	mov	sp, r7
   2a156:	b002      	add	sp, #8
   2a158:	bd80      	pop	{r7, pc}
	...

0002a15c <system_apb_clock_set_mask>:
{
   2a15c:	b580      	push	{r7, lr}
   2a15e:	b082      	sub	sp, #8
   2a160:	af00      	add	r7, sp, #0
   2a162:	0002      	movs	r2, r0
   2a164:	6039      	str	r1, [r7, #0]
   2a166:	1dfb      	adds	r3, r7, #7
   2a168:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a16a:	1dfb      	adds	r3, r7, #7
   2a16c:	781b      	ldrb	r3, [r3, #0]
   2a16e:	2b01      	cmp	r3, #1
   2a170:	d00a      	beq.n	2a188 <system_apb_clock_set_mask+0x2c>
   2a172:	2b02      	cmp	r3, #2
   2a174:	d00f      	beq.n	2a196 <system_apb_clock_set_mask+0x3a>
   2a176:	2b00      	cmp	r3, #0
   2a178:	d114      	bne.n	2a1a4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a17a:	4b0e      	ldr	r3, [pc, #56]	; (2a1b4 <system_apb_clock_set_mask+0x58>)
   2a17c:	4a0d      	ldr	r2, [pc, #52]	; (2a1b4 <system_apb_clock_set_mask+0x58>)
   2a17e:	6991      	ldr	r1, [r2, #24]
   2a180:	683a      	ldr	r2, [r7, #0]
   2a182:	430a      	orrs	r2, r1
   2a184:	619a      	str	r2, [r3, #24]
			break;
   2a186:	e00f      	b.n	2a1a8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a188:	4b0a      	ldr	r3, [pc, #40]	; (2a1b4 <system_apb_clock_set_mask+0x58>)
   2a18a:	4a0a      	ldr	r2, [pc, #40]	; (2a1b4 <system_apb_clock_set_mask+0x58>)
   2a18c:	69d1      	ldr	r1, [r2, #28]
   2a18e:	683a      	ldr	r2, [r7, #0]
   2a190:	430a      	orrs	r2, r1
   2a192:	61da      	str	r2, [r3, #28]
			break;
   2a194:	e008      	b.n	2a1a8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a196:	4b07      	ldr	r3, [pc, #28]	; (2a1b4 <system_apb_clock_set_mask+0x58>)
   2a198:	4a06      	ldr	r2, [pc, #24]	; (2a1b4 <system_apb_clock_set_mask+0x58>)
   2a19a:	6a11      	ldr	r1, [r2, #32]
   2a19c:	683a      	ldr	r2, [r7, #0]
   2a19e:	430a      	orrs	r2, r1
   2a1a0:	621a      	str	r2, [r3, #32]
			break;
   2a1a2:	e001      	b.n	2a1a8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a1a4:	2317      	movs	r3, #23
   2a1a6:	e000      	b.n	2a1aa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a1a8:	2300      	movs	r3, #0
}
   2a1aa:	0018      	movs	r0, r3
   2a1ac:	46bd      	mov	sp, r7
   2a1ae:	b002      	add	sp, #8
   2a1b0:	bd80      	pop	{r7, pc}
   2a1b2:	46c0      	nop			; (mov r8, r8)
   2a1b4:	40000400 	.word	0x40000400

0002a1b8 <system_pinmux_get_config_defaults>:
{
   2a1b8:	b580      	push	{r7, lr}
   2a1ba:	b082      	sub	sp, #8
   2a1bc:	af00      	add	r7, sp, #0
   2a1be:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2a1c0:	687b      	ldr	r3, [r7, #4]
   2a1c2:	2280      	movs	r2, #128	; 0x80
   2a1c4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2a1c6:	687b      	ldr	r3, [r7, #4]
   2a1c8:	2200      	movs	r2, #0
   2a1ca:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2a1cc:	687b      	ldr	r3, [r7, #4]
   2a1ce:	2201      	movs	r2, #1
   2a1d0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2a1d2:	687b      	ldr	r3, [r7, #4]
   2a1d4:	2200      	movs	r2, #0
   2a1d6:	70da      	strb	r2, [r3, #3]
}
   2a1d8:	46c0      	nop			; (mov r8, r8)
   2a1da:	46bd      	mov	sp, r7
   2a1dc:	b002      	add	sp, #8
   2a1de:	bd80      	pop	{r7, pc}

0002a1e0 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2a1e0:	b580      	push	{r7, lr}
   2a1e2:	b084      	sub	sp, #16
   2a1e4:	af00      	add	r7, sp, #0
   2a1e6:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2a1e8:	2300      	movs	r3, #0
   2a1ea:	60fb      	str	r3, [r7, #12]
   2a1ec:	e00c      	b.n	2a208 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2a1ee:	4b0a      	ldr	r3, [pc, #40]	; (2a218 <_tcc_get_inst_index+0x38>)
   2a1f0:	68fa      	ldr	r2, [r7, #12]
   2a1f2:	0092      	lsls	r2, r2, #2
   2a1f4:	58d2      	ldr	r2, [r2, r3]
   2a1f6:	687b      	ldr	r3, [r7, #4]
   2a1f8:	429a      	cmp	r2, r3
   2a1fa:	d102      	bne.n	2a202 <_tcc_get_inst_index+0x22>
			return i;
   2a1fc:	68fb      	ldr	r3, [r7, #12]
   2a1fe:	b2db      	uxtb	r3, r3
   2a200:	e006      	b.n	2a210 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2a202:	68fb      	ldr	r3, [r7, #12]
   2a204:	3301      	adds	r3, #1
   2a206:	60fb      	str	r3, [r7, #12]
   2a208:	68fb      	ldr	r3, [r7, #12]
   2a20a:	2b02      	cmp	r3, #2
   2a20c:	d9ef      	bls.n	2a1ee <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2a20e:	2300      	movs	r3, #0
}
   2a210:	0018      	movs	r0, r3
   2a212:	46bd      	mov	sp, r7
   2a214:	b004      	add	sp, #16
   2a216:	bd80      	pop	{r7, pc}
   2a218:	000392cc 	.word	0x000392cc

0002a21c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2a21c:	b590      	push	{r4, r7, lr}
   2a21e:	b085      	sub	sp, #20
   2a220:	af00      	add	r7, sp, #0
   2a222:	6078      	str	r0, [r7, #4]
   2a224:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a226:	230f      	movs	r3, #15
   2a228:	18fc      	adds	r4, r7, r3
   2a22a:	683b      	ldr	r3, [r7, #0]
   2a22c:	0018      	movs	r0, r3
   2a22e:	4bad      	ldr	r3, [pc, #692]	; (2a4e4 <tcc_get_config_defaults+0x2c8>)
   2a230:	4798      	blx	r3
   2a232:	0003      	movs	r3, r0
   2a234:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2a236:	687b      	ldr	r3, [r7, #4]
   2a238:	2200      	movs	r2, #0
   2a23a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2a23c:	230f      	movs	r3, #15
   2a23e:	18fb      	adds	r3, r7, r3
   2a240:	781a      	ldrb	r2, [r3, #0]
   2a242:	4ba9      	ldr	r3, [pc, #676]	; (2a4e8 <tcc_get_config_defaults+0x2cc>)
   2a244:	0092      	lsls	r2, r2, #2
   2a246:	58d2      	ldr	r2, [r2, r3]
   2a248:	687b      	ldr	r3, [r7, #4]
   2a24a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2a24c:	687b      	ldr	r3, [r7, #4]
   2a24e:	2200      	movs	r2, #0
   2a250:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2a252:	687b      	ldr	r3, [r7, #4]
   2a254:	2200      	movs	r2, #0
   2a256:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2a258:	687b      	ldr	r3, [r7, #4]
   2a25a:	2200      	movs	r2, #0
   2a25c:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2a25e:	687b      	ldr	r3, [r7, #4]
   2a260:	2200      	movs	r2, #0
   2a262:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2a264:	687b      	ldr	r3, [r7, #4]
   2a266:	2200      	movs	r2, #0
   2a268:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a26a:	687b      	ldr	r3, [r7, #4]
   2a26c:	2200      	movs	r2, #0
   2a26e:	61da      	str	r2, [r3, #28]
   2a270:	687b      	ldr	r3, [r7, #4]
   2a272:	2200      	movs	r2, #0
   2a274:	621a      	str	r2, [r3, #32]
   2a276:	687b      	ldr	r3, [r7, #4]
   2a278:	2200      	movs	r2, #0
   2a27a:	625a      	str	r2, [r3, #36]	; 0x24
   2a27c:	687b      	ldr	r3, [r7, #4]
   2a27e:	2200      	movs	r2, #0
   2a280:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a282:	687b      	ldr	r3, [r7, #4]
   2a284:	2200      	movs	r2, #0
   2a286:	751a      	strb	r2, [r3, #20]
   2a288:	687b      	ldr	r3, [r7, #4]
   2a28a:	2200      	movs	r2, #0
   2a28c:	755a      	strb	r2, [r3, #21]
   2a28e:	687b      	ldr	r3, [r7, #4]
   2a290:	2200      	movs	r2, #0
   2a292:	759a      	strb	r2, [r3, #22]
   2a294:	687b      	ldr	r3, [r7, #4]
   2a296:	2200      	movs	r2, #0
   2a298:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2a29a:	687b      	ldr	r3, [r7, #4]
   2a29c:	2200      	movs	r2, #0
   2a29e:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2a2a0:	687b      	ldr	r3, [r7, #4]
   2a2a2:	2200      	movs	r2, #0
   2a2a4:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a2a6:	687b      	ldr	r3, [r7, #4]
   2a2a8:	2200      	movs	r2, #0
   2a2aa:	741a      	strb	r2, [r3, #16]
   2a2ac:	687b      	ldr	r3, [r7, #4]
   2a2ae:	2200      	movs	r2, #0
   2a2b0:	745a      	strb	r2, [r3, #17]
   2a2b2:	687b      	ldr	r3, [r7, #4]
   2a2b4:	2200      	movs	r2, #0
   2a2b6:	749a      	strb	r2, [r3, #18]
   2a2b8:	687b      	ldr	r3, [r7, #4]
   2a2ba:	2200      	movs	r2, #0
   2a2bc:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2a2be:	687b      	ldr	r3, [r7, #4]
   2a2c0:	222c      	movs	r2, #44	; 0x2c
   2a2c2:	2100      	movs	r1, #0
   2a2c4:	5499      	strb	r1, [r3, r2]
   2a2c6:	687b      	ldr	r3, [r7, #4]
   2a2c8:	222d      	movs	r2, #45	; 0x2d
   2a2ca:	2100      	movs	r1, #0
   2a2cc:	5499      	strb	r1, [r3, r2]
   2a2ce:	687b      	ldr	r3, [r7, #4]
   2a2d0:	222e      	movs	r2, #46	; 0x2e
   2a2d2:	2100      	movs	r1, #0
   2a2d4:	5499      	strb	r1, [r3, r2]
   2a2d6:	687b      	ldr	r3, [r7, #4]
   2a2d8:	222f      	movs	r2, #47	; 0x2f
   2a2da:	2100      	movs	r1, #0
   2a2dc:	5499      	strb	r1, [r3, r2]
   2a2de:	687b      	ldr	r3, [r7, #4]
   2a2e0:	2230      	movs	r2, #48	; 0x30
   2a2e2:	2100      	movs	r1, #0
   2a2e4:	5499      	strb	r1, [r3, r2]
   2a2e6:	687b      	ldr	r3, [r7, #4]
   2a2e8:	2231      	movs	r2, #49	; 0x31
   2a2ea:	2100      	movs	r1, #0
   2a2ec:	5499      	strb	r1, [r3, r2]
   2a2ee:	687b      	ldr	r3, [r7, #4]
   2a2f0:	2232      	movs	r2, #50	; 0x32
   2a2f2:	2100      	movs	r1, #0
   2a2f4:	5499      	strb	r1, [r3, r2]
   2a2f6:	687b      	ldr	r3, [r7, #4]
   2a2f8:	2233      	movs	r2, #51	; 0x33
   2a2fa:	2100      	movs	r1, #0
   2a2fc:	5499      	strb	r1, [r3, r2]
   2a2fe:	687b      	ldr	r3, [r7, #4]
   2a300:	2234      	movs	r2, #52	; 0x34
   2a302:	2100      	movs	r1, #0
   2a304:	5499      	strb	r1, [r3, r2]
   2a306:	687b      	ldr	r3, [r7, #4]
   2a308:	2235      	movs	r2, #53	; 0x35
   2a30a:	2100      	movs	r1, #0
   2a30c:	5499      	strb	r1, [r3, r2]
   2a30e:	687b      	ldr	r3, [r7, #4]
   2a310:	2236      	movs	r2, #54	; 0x36
   2a312:	2100      	movs	r1, #0
   2a314:	5499      	strb	r1, [r3, r2]
   2a316:	687b      	ldr	r3, [r7, #4]
   2a318:	2237      	movs	r2, #55	; 0x37
   2a31a:	2100      	movs	r1, #0
   2a31c:	5499      	strb	r1, [r3, r2]
   2a31e:	687b      	ldr	r3, [r7, #4]
   2a320:	2238      	movs	r2, #56	; 0x38
   2a322:	2100      	movs	r1, #0
   2a324:	5499      	strb	r1, [r3, r2]
   2a326:	687b      	ldr	r3, [r7, #4]
   2a328:	2239      	movs	r2, #57	; 0x39
   2a32a:	2100      	movs	r1, #0
   2a32c:	5499      	strb	r1, [r3, r2]
   2a32e:	687b      	ldr	r3, [r7, #4]
   2a330:	223a      	movs	r2, #58	; 0x3a
   2a332:	2100      	movs	r1, #0
   2a334:	5499      	strb	r1, [r3, r2]
   2a336:	687b      	ldr	r3, [r7, #4]
   2a338:	223b      	movs	r2, #59	; 0x3b
   2a33a:	2100      	movs	r1, #0
   2a33c:	5499      	strb	r1, [r3, r2]
   2a33e:	687b      	ldr	r3, [r7, #4]
   2a340:	223c      	movs	r2, #60	; 0x3c
   2a342:	2100      	movs	r1, #0
   2a344:	5499      	strb	r1, [r3, r2]
   2a346:	687b      	ldr	r3, [r7, #4]
   2a348:	223d      	movs	r2, #61	; 0x3d
   2a34a:	2100      	movs	r1, #0
   2a34c:	5499      	strb	r1, [r3, r2]
   2a34e:	687b      	ldr	r3, [r7, #4]
   2a350:	223e      	movs	r2, #62	; 0x3e
   2a352:	2100      	movs	r1, #0
   2a354:	5499      	strb	r1, [r3, r2]
   2a356:	687b      	ldr	r3, [r7, #4]
   2a358:	223f      	movs	r2, #63	; 0x3f
   2a35a:	2100      	movs	r1, #0
   2a35c:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2a35e:	687b      	ldr	r3, [r7, #4]
   2a360:	2240      	movs	r2, #64	; 0x40
   2a362:	2100      	movs	r1, #0
   2a364:	5499      	strb	r1, [r3, r2]
   2a366:	687b      	ldr	r3, [r7, #4]
   2a368:	2241      	movs	r2, #65	; 0x41
   2a36a:	2100      	movs	r1, #0
   2a36c:	5499      	strb	r1, [r3, r2]
   2a36e:	687b      	ldr	r3, [r7, #4]
   2a370:	2242      	movs	r2, #66	; 0x42
   2a372:	2100      	movs	r1, #0
   2a374:	5499      	strb	r1, [r3, r2]
   2a376:	687b      	ldr	r3, [r7, #4]
   2a378:	2243      	movs	r2, #67	; 0x43
   2a37a:	2100      	movs	r1, #0
   2a37c:	5499      	strb	r1, [r3, r2]
   2a37e:	687b      	ldr	r3, [r7, #4]
   2a380:	2244      	movs	r2, #68	; 0x44
   2a382:	2100      	movs	r1, #0
   2a384:	5499      	strb	r1, [r3, r2]
   2a386:	687b      	ldr	r3, [r7, #4]
   2a388:	2245      	movs	r2, #69	; 0x45
   2a38a:	2100      	movs	r1, #0
   2a38c:	5499      	strb	r1, [r3, r2]
   2a38e:	687b      	ldr	r3, [r7, #4]
   2a390:	2246      	movs	r2, #70	; 0x46
   2a392:	2100      	movs	r1, #0
   2a394:	5499      	strb	r1, [r3, r2]
   2a396:	687b      	ldr	r3, [r7, #4]
   2a398:	2247      	movs	r2, #71	; 0x47
   2a39a:	2100      	movs	r1, #0
   2a39c:	5499      	strb	r1, [r3, r2]
   2a39e:	687b      	ldr	r3, [r7, #4]
   2a3a0:	2248      	movs	r2, #72	; 0x48
   2a3a2:	2100      	movs	r1, #0
   2a3a4:	5499      	strb	r1, [r3, r2]
   2a3a6:	687b      	ldr	r3, [r7, #4]
   2a3a8:	2249      	movs	r2, #73	; 0x49
   2a3aa:	2100      	movs	r1, #0
   2a3ac:	5499      	strb	r1, [r3, r2]
   2a3ae:	687b      	ldr	r3, [r7, #4]
   2a3b0:	224a      	movs	r2, #74	; 0x4a
   2a3b2:	2100      	movs	r1, #0
   2a3b4:	5499      	strb	r1, [r3, r2]
   2a3b6:	687b      	ldr	r3, [r7, #4]
   2a3b8:	224b      	movs	r2, #75	; 0x4b
   2a3ba:	2100      	movs	r1, #0
   2a3bc:	5499      	strb	r1, [r3, r2]
   2a3be:	687b      	ldr	r3, [r7, #4]
   2a3c0:	224c      	movs	r2, #76	; 0x4c
   2a3c2:	2100      	movs	r1, #0
   2a3c4:	5499      	strb	r1, [r3, r2]
   2a3c6:	687b      	ldr	r3, [r7, #4]
   2a3c8:	224d      	movs	r2, #77	; 0x4d
   2a3ca:	2100      	movs	r1, #0
   2a3cc:	5499      	strb	r1, [r3, r2]
   2a3ce:	687b      	ldr	r3, [r7, #4]
   2a3d0:	224e      	movs	r2, #78	; 0x4e
   2a3d2:	2100      	movs	r1, #0
   2a3d4:	5499      	strb	r1, [r3, r2]
   2a3d6:	687b      	ldr	r3, [r7, #4]
   2a3d8:	224f      	movs	r2, #79	; 0x4f
   2a3da:	2100      	movs	r1, #0
   2a3dc:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2a3de:	687b      	ldr	r3, [r7, #4]
   2a3e0:	2250      	movs	r2, #80	; 0x50
   2a3e2:	2100      	movs	r1, #0
   2a3e4:	5499      	strb	r1, [r3, r2]
   2a3e6:	687b      	ldr	r3, [r7, #4]
   2a3e8:	2251      	movs	r2, #81	; 0x51
   2a3ea:	2100      	movs	r1, #0
   2a3ec:	5499      	strb	r1, [r3, r2]
   2a3ee:	687b      	ldr	r3, [r7, #4]
   2a3f0:	2252      	movs	r2, #82	; 0x52
   2a3f2:	2100      	movs	r1, #0
   2a3f4:	5499      	strb	r1, [r3, r2]
   2a3f6:	687b      	ldr	r3, [r7, #4]
   2a3f8:	2253      	movs	r2, #83	; 0x53
   2a3fa:	2100      	movs	r1, #0
   2a3fc:	5499      	strb	r1, [r3, r2]
   2a3fe:	687b      	ldr	r3, [r7, #4]
   2a400:	2254      	movs	r2, #84	; 0x54
   2a402:	2100      	movs	r1, #0
   2a404:	5499      	strb	r1, [r3, r2]
   2a406:	687b      	ldr	r3, [r7, #4]
   2a408:	2255      	movs	r2, #85	; 0x55
   2a40a:	2100      	movs	r1, #0
   2a40c:	5499      	strb	r1, [r3, r2]
   2a40e:	687b      	ldr	r3, [r7, #4]
   2a410:	2256      	movs	r2, #86	; 0x56
   2a412:	2100      	movs	r1, #0
   2a414:	5499      	strb	r1, [r3, r2]
   2a416:	687b      	ldr	r3, [r7, #4]
   2a418:	2257      	movs	r2, #87	; 0x57
   2a41a:	2100      	movs	r1, #0
   2a41c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2a41e:	687b      	ldr	r3, [r7, #4]
   2a420:	2298      	movs	r2, #152	; 0x98
   2a422:	2100      	movs	r1, #0
   2a424:	5499      	strb	r1, [r3, r2]
   2a426:	687b      	ldr	r3, [r7, #4]
   2a428:	2200      	movs	r2, #0
   2a42a:	659a      	str	r2, [r3, #88]	; 0x58
   2a42c:	687b      	ldr	r3, [r7, #4]
   2a42e:	2200      	movs	r2, #0
   2a430:	679a      	str	r2, [r3, #120]	; 0x78
   2a432:	687b      	ldr	r3, [r7, #4]
   2a434:	2299      	movs	r2, #153	; 0x99
   2a436:	2100      	movs	r1, #0
   2a438:	5499      	strb	r1, [r3, r2]
   2a43a:	687b      	ldr	r3, [r7, #4]
   2a43c:	2200      	movs	r2, #0
   2a43e:	65da      	str	r2, [r3, #92]	; 0x5c
   2a440:	687b      	ldr	r3, [r7, #4]
   2a442:	2200      	movs	r2, #0
   2a444:	67da      	str	r2, [r3, #124]	; 0x7c
   2a446:	687b      	ldr	r3, [r7, #4]
   2a448:	229a      	movs	r2, #154	; 0x9a
   2a44a:	2100      	movs	r1, #0
   2a44c:	5499      	strb	r1, [r3, r2]
   2a44e:	687b      	ldr	r3, [r7, #4]
   2a450:	2200      	movs	r2, #0
   2a452:	661a      	str	r2, [r3, #96]	; 0x60
   2a454:	687b      	ldr	r3, [r7, #4]
   2a456:	2280      	movs	r2, #128	; 0x80
   2a458:	2100      	movs	r1, #0
   2a45a:	5099      	str	r1, [r3, r2]
   2a45c:	687b      	ldr	r3, [r7, #4]
   2a45e:	229b      	movs	r2, #155	; 0x9b
   2a460:	2100      	movs	r1, #0
   2a462:	5499      	strb	r1, [r3, r2]
   2a464:	687b      	ldr	r3, [r7, #4]
   2a466:	2200      	movs	r2, #0
   2a468:	665a      	str	r2, [r3, #100]	; 0x64
   2a46a:	687b      	ldr	r3, [r7, #4]
   2a46c:	2284      	movs	r2, #132	; 0x84
   2a46e:	2100      	movs	r1, #0
   2a470:	5099      	str	r1, [r3, r2]
   2a472:	687b      	ldr	r3, [r7, #4]
   2a474:	229c      	movs	r2, #156	; 0x9c
   2a476:	2100      	movs	r1, #0
   2a478:	5499      	strb	r1, [r3, r2]
   2a47a:	687b      	ldr	r3, [r7, #4]
   2a47c:	2200      	movs	r2, #0
   2a47e:	669a      	str	r2, [r3, #104]	; 0x68
   2a480:	687b      	ldr	r3, [r7, #4]
   2a482:	2288      	movs	r2, #136	; 0x88
   2a484:	2100      	movs	r1, #0
   2a486:	5099      	str	r1, [r3, r2]
   2a488:	687b      	ldr	r3, [r7, #4]
   2a48a:	229d      	movs	r2, #157	; 0x9d
   2a48c:	2100      	movs	r1, #0
   2a48e:	5499      	strb	r1, [r3, r2]
   2a490:	687b      	ldr	r3, [r7, #4]
   2a492:	2200      	movs	r2, #0
   2a494:	66da      	str	r2, [r3, #108]	; 0x6c
   2a496:	687b      	ldr	r3, [r7, #4]
   2a498:	228c      	movs	r2, #140	; 0x8c
   2a49a:	2100      	movs	r1, #0
   2a49c:	5099      	str	r1, [r3, r2]
   2a49e:	687b      	ldr	r3, [r7, #4]
   2a4a0:	229e      	movs	r2, #158	; 0x9e
   2a4a2:	2100      	movs	r1, #0
   2a4a4:	5499      	strb	r1, [r3, r2]
   2a4a6:	687b      	ldr	r3, [r7, #4]
   2a4a8:	2200      	movs	r2, #0
   2a4aa:	671a      	str	r2, [r3, #112]	; 0x70
   2a4ac:	687b      	ldr	r3, [r7, #4]
   2a4ae:	2290      	movs	r2, #144	; 0x90
   2a4b0:	2100      	movs	r1, #0
   2a4b2:	5099      	str	r1, [r3, r2]
   2a4b4:	687b      	ldr	r3, [r7, #4]
   2a4b6:	229f      	movs	r2, #159	; 0x9f
   2a4b8:	2100      	movs	r1, #0
   2a4ba:	5499      	strb	r1, [r3, r2]
   2a4bc:	687b      	ldr	r3, [r7, #4]
   2a4be:	2200      	movs	r2, #0
   2a4c0:	675a      	str	r2, [r3, #116]	; 0x74
   2a4c2:	687b      	ldr	r3, [r7, #4]
   2a4c4:	2294      	movs	r2, #148	; 0x94
   2a4c6:	2100      	movs	r1, #0
   2a4c8:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2a4ca:	687b      	ldr	r3, [r7, #4]
   2a4cc:	22a0      	movs	r2, #160	; 0xa0
   2a4ce:	2101      	movs	r1, #1
   2a4d0:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2a4d2:	687b      	ldr	r3, [r7, #4]
   2a4d4:	22a1      	movs	r2, #161	; 0xa1
   2a4d6:	2100      	movs	r1, #0
   2a4d8:	5499      	strb	r1, [r3, r2]
}
   2a4da:	46c0      	nop			; (mov r8, r8)
   2a4dc:	46bd      	mov	sp, r7
   2a4de:	b005      	add	sp, #20
   2a4e0:	bd90      	pop	{r4, r7, pc}
   2a4e2:	46c0      	nop			; (mov r8, r8)
   2a4e4:	0002a1e1 	.word	0x0002a1e1
   2a4e8:	000392e8 	.word	0x000392e8

0002a4ec <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a4ec:	b580      	push	{r7, lr}
   2a4ee:	b086      	sub	sp, #24
   2a4f0:	af00      	add	r7, sp, #0
   2a4f2:	60b9      	str	r1, [r7, #8]
   2a4f4:	607a      	str	r2, [r7, #4]
   2a4f6:	230f      	movs	r3, #15
   2a4f8:	18fb      	adds	r3, r7, r3
   2a4fa:	1c02      	adds	r2, r0, #0
   2a4fc:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2a4fe:	2300      	movs	r3, #0
   2a500:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a502:	2300      	movs	r3, #0
   2a504:	613b      	str	r3, [r7, #16]
   2a506:	e01d      	b.n	2a544 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2a508:	68ba      	ldr	r2, [r7, #8]
   2a50a:	693b      	ldr	r3, [r7, #16]
   2a50c:	18d3      	adds	r3, r2, r3
   2a50e:	3310      	adds	r3, #16
   2a510:	781b      	ldrb	r3, [r3, #0]
   2a512:	2b01      	cmp	r3, #1
   2a514:	d113      	bne.n	2a53e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2a516:	230f      	movs	r3, #15
   2a518:	18fb      	adds	r3, r7, r3
   2a51a:	781b      	ldrb	r3, [r3, #0]
   2a51c:	4a1b      	ldr	r2, [pc, #108]	; (2a58c <_tcc_build_ctrla+0xa0>)
   2a51e:	5cd3      	ldrb	r3, [r2, r3]
   2a520:	001a      	movs	r2, r3
   2a522:	693b      	ldr	r3, [r7, #16]
   2a524:	429a      	cmp	r2, r3
   2a526:	da01      	bge.n	2a52c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2a528:	2317      	movs	r3, #23
   2a52a:	e02a      	b.n	2a582 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2a52c:	2380      	movs	r3, #128	; 0x80
   2a52e:	045a      	lsls	r2, r3, #17
   2a530:	693b      	ldr	r3, [r7, #16]
   2a532:	409a      	lsls	r2, r3
   2a534:	0013      	movs	r3, r2
   2a536:	001a      	movs	r2, r3
   2a538:	697b      	ldr	r3, [r7, #20]
   2a53a:	4313      	orrs	r3, r2
   2a53c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a53e:	693b      	ldr	r3, [r7, #16]
   2a540:	3301      	adds	r3, #1
   2a542:	613b      	str	r3, [r7, #16]
   2a544:	693b      	ldr	r3, [r7, #16]
   2a546:	2b03      	cmp	r3, #3
   2a548:	ddde      	ble.n	2a508 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2a54a:	68bb      	ldr	r3, [r7, #8]
   2a54c:	22a1      	movs	r2, #161	; 0xa1
   2a54e:	5c9b      	ldrb	r3, [r3, r2]
   2a550:	2b00      	cmp	r3, #0
   2a552:	d004      	beq.n	2a55e <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2a554:	697b      	ldr	r3, [r7, #20]
   2a556:	2280      	movs	r2, #128	; 0x80
   2a558:	0112      	lsls	r2, r2, #4
   2a55a:	4313      	orrs	r3, r2
   2a55c:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2a55e:	68bb      	ldr	r3, [r7, #8]
   2a560:	7b1b      	ldrb	r3, [r3, #12]
   2a562:	031b      	lsls	r3, r3, #12
   2a564:	001a      	movs	r2, r3
   2a566:	697b      	ldr	r3, [r7, #20]
   2a568:	4313      	orrs	r3, r2
   2a56a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2a56c:	68bb      	ldr	r3, [r7, #8]
   2a56e:	7adb      	ldrb	r3, [r3, #11]
   2a570:	021b      	lsls	r3, r3, #8
   2a572:	001a      	movs	r2, r3
   2a574:	697b      	ldr	r3, [r7, #20]
   2a576:	4313      	orrs	r3, r2
   2a578:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2a57a:	687b      	ldr	r3, [r7, #4]
   2a57c:	697a      	ldr	r2, [r7, #20]
   2a57e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a580:	2300      	movs	r3, #0
}
   2a582:	0018      	movs	r0, r3
   2a584:	46bd      	mov	sp, r7
   2a586:	b006      	add	sp, #24
   2a588:	bd80      	pop	{r7, pc}
   2a58a:	46c0      	nop			; (mov r8, r8)
   2a58c:	000392f4 	.word	0x000392f4

0002a590 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2a590:	b580      	push	{r7, lr}
   2a592:	b086      	sub	sp, #24
   2a594:	af00      	add	r7, sp, #0
   2a596:	60b9      	str	r1, [r7, #8]
   2a598:	607a      	str	r2, [r7, #4]
   2a59a:	230f      	movs	r3, #15
   2a59c:	18fb      	adds	r3, r7, r3
   2a59e:	1c02      	adds	r2, r0, #0
   2a5a0:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2a5a2:	2317      	movs	r3, #23
   2a5a4:	18fb      	adds	r3, r7, r3
   2a5a6:	2200      	movs	r2, #0
   2a5a8:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2a5aa:	68bb      	ldr	r3, [r7, #8]
   2a5ac:	7a1b      	ldrb	r3, [r3, #8]
   2a5ae:	2b00      	cmp	r3, #0
   2a5b0:	d007      	beq.n	2a5c2 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2a5b2:	2317      	movs	r3, #23
   2a5b4:	18fb      	adds	r3, r7, r3
   2a5b6:	2217      	movs	r2, #23
   2a5b8:	18ba      	adds	r2, r7, r2
   2a5ba:	7812      	ldrb	r2, [r2, #0]
   2a5bc:	2104      	movs	r1, #4
   2a5be:	430a      	orrs	r2, r1
   2a5c0:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2a5c2:	68bb      	ldr	r3, [r7, #8]
   2a5c4:	7a5b      	ldrb	r3, [r3, #9]
   2a5c6:	2b01      	cmp	r3, #1
   2a5c8:	d107      	bne.n	2a5da <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2a5ca:	2317      	movs	r3, #23
   2a5cc:	18fb      	adds	r3, r7, r3
   2a5ce:	2217      	movs	r2, #23
   2a5d0:	18ba      	adds	r2, r7, r2
   2a5d2:	7812      	ldrb	r2, [r2, #0]
   2a5d4:	2101      	movs	r1, #1
   2a5d6:	430a      	orrs	r2, r1
   2a5d8:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2a5da:	687b      	ldr	r3, [r7, #4]
   2a5dc:	2217      	movs	r2, #23
   2a5de:	18ba      	adds	r2, r7, r2
   2a5e0:	7812      	ldrb	r2, [r2, #0]
   2a5e2:	701a      	strb	r2, [r3, #0]
}
   2a5e4:	46c0      	nop			; (mov r8, r8)
   2a5e6:	46bd      	mov	sp, r7
   2a5e8:	b006      	add	sp, #24
   2a5ea:	bd80      	pop	{r7, pc}

0002a5ec <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a5ec:	b580      	push	{r7, lr}
   2a5ee:	b088      	sub	sp, #32
   2a5f0:	af00      	add	r7, sp, #0
   2a5f2:	60b9      	str	r1, [r7, #8]
   2a5f4:	607a      	str	r2, [r7, #4]
   2a5f6:	230f      	movs	r3, #15
   2a5f8:	18fb      	adds	r3, r7, r3
   2a5fa:	1c02      	adds	r2, r0, #0
   2a5fc:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a5fe:	230f      	movs	r3, #15
   2a600:	18fb      	adds	r3, r7, r3
   2a602:	781a      	ldrb	r2, [r3, #0]
   2a604:	231b      	movs	r3, #27
   2a606:	18fb      	adds	r3, r7, r3
   2a608:	493e      	ldr	r1, [pc, #248]	; (2a704 <_tcc_build_faults+0x118>)
   2a60a:	5c8a      	ldrb	r2, [r1, r2]
   2a60c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a60e:	2300      	movs	r3, #0
   2a610:	61fb      	str	r3, [r7, #28]
   2a612:	e06e      	b.n	2a6f2 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2a614:	69fa      	ldr	r2, [r7, #28]
   2a616:	0013      	movs	r3, r2
   2a618:	009b      	lsls	r3, r3, #2
   2a61a:	189b      	adds	r3, r3, r2
   2a61c:	005b      	lsls	r3, r3, #1
   2a61e:	3328      	adds	r3, #40	; 0x28
   2a620:	68ba      	ldr	r2, [r7, #8]
   2a622:	18d3      	adds	r3, r2, r3
   2a624:	3304      	adds	r3, #4
   2a626:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2a628:	697b      	ldr	r3, [r7, #20]
   2a62a:	7a5b      	ldrb	r3, [r3, #9]
   2a62c:	221b      	movs	r2, #27
   2a62e:	18ba      	adds	r2, r7, r2
   2a630:	7812      	ldrb	r2, [r2, #0]
   2a632:	429a      	cmp	r2, r3
   2a634:	d801      	bhi.n	2a63a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2a636:	2317      	movs	r3, #23
   2a638:	e05f      	b.n	2a6fa <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2a63a:	697b      	ldr	r3, [r7, #20]
   2a63c:	781b      	ldrb	r3, [r3, #0]
   2a63e:	2b0f      	cmp	r3, #15
   2a640:	d901      	bls.n	2a646 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2a642:	2317      	movs	r3, #23
   2a644:	e059      	b.n	2a6fa <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a646:	697b      	ldr	r3, [r7, #20]
   2a648:	781b      	ldrb	r3, [r3, #0]
   2a64a:	061b      	lsls	r3, r3, #24
   2a64c:	001a      	movs	r2, r3
   2a64e:	23f0      	movs	r3, #240	; 0xf0
   2a650:	051b      	lsls	r3, r3, #20
   2a652:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2a654:	697b      	ldr	r3, [r7, #20]
   2a656:	785b      	ldrb	r3, [r3, #1]
   2a658:	041b      	lsls	r3, r3, #16
   2a65a:	0019      	movs	r1, r3
   2a65c:	23ff      	movs	r3, #255	; 0xff
   2a65e:	041b      	lsls	r3, r3, #16
   2a660:	400b      	ands	r3, r1
   2a662:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2a664:	697b      	ldr	r3, [r7, #20]
   2a666:	789b      	ldrb	r3, [r3, #2]
   2a668:	2b00      	cmp	r3, #0
   2a66a:	d001      	beq.n	2a670 <_tcc_build_faults+0x84>
   2a66c:	2380      	movs	r3, #128	; 0x80
   2a66e:	e000      	b.n	2a672 <_tcc_build_faults+0x86>
   2a670:	2300      	movs	r3, #0
   2a672:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2a674:	697b      	ldr	r3, [r7, #20]
   2a676:	78db      	ldrb	r3, [r3, #3]
   2a678:	2b00      	cmp	r3, #0
   2a67a:	d001      	beq.n	2a680 <_tcc_build_faults+0x94>
   2a67c:	2308      	movs	r3, #8
   2a67e:	e000      	b.n	2a682 <_tcc_build_faults+0x96>
   2a680:	2300      	movs	r3, #0
   2a682:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2a684:	697b      	ldr	r3, [r7, #20]
   2a686:	791b      	ldrb	r3, [r3, #4]
   2a688:	2b00      	cmp	r3, #0
   2a68a:	d001      	beq.n	2a690 <_tcc_build_faults+0xa4>
   2a68c:	2310      	movs	r3, #16
   2a68e:	e000      	b.n	2a692 <_tcc_build_faults+0xa6>
   2a690:	2300      	movs	r3, #0
   2a692:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2a694:	697b      	ldr	r3, [r7, #20]
   2a696:	795b      	ldrb	r3, [r3, #5]
   2a698:	0019      	movs	r1, r3
   2a69a:	2303      	movs	r3, #3
   2a69c:	400b      	ands	r3, r1
   2a69e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2a6a0:	697b      	ldr	r3, [r7, #20]
   2a6a2:	799b      	ldrb	r3, [r3, #6]
   2a6a4:	015b      	lsls	r3, r3, #5
   2a6a6:	0019      	movs	r1, r3
   2a6a8:	2360      	movs	r3, #96	; 0x60
   2a6aa:	400b      	ands	r3, r1
   2a6ac:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2a6ae:	697b      	ldr	r3, [r7, #20]
   2a6b0:	79db      	ldrb	r3, [r3, #7]
   2a6b2:	021b      	lsls	r3, r3, #8
   2a6b4:	0019      	movs	r1, r3
   2a6b6:	23c0      	movs	r3, #192	; 0xc0
   2a6b8:	009b      	lsls	r3, r3, #2
   2a6ba:	400b      	ands	r3, r1
   2a6bc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2a6be:	697b      	ldr	r3, [r7, #20]
   2a6c0:	7a1b      	ldrb	r3, [r3, #8]
   2a6c2:	031b      	lsls	r3, r3, #12
   2a6c4:	0019      	movs	r1, r3
   2a6c6:	23e0      	movs	r3, #224	; 0xe0
   2a6c8:	01db      	lsls	r3, r3, #7
   2a6ca:	400b      	ands	r3, r1
   2a6cc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2a6ce:	697b      	ldr	r3, [r7, #20]
   2a6d0:	7a5b      	ldrb	r3, [r3, #9]
   2a6d2:	029b      	lsls	r3, r3, #10
   2a6d4:	0019      	movs	r1, r3
   2a6d6:	23c0      	movs	r3, #192	; 0xc0
   2a6d8:	011b      	lsls	r3, r3, #4
   2a6da:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a6dc:	4313      	orrs	r3, r2
   2a6de:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2a6e0:	69fb      	ldr	r3, [r7, #28]
   2a6e2:	009b      	lsls	r3, r3, #2
   2a6e4:	687a      	ldr	r2, [r7, #4]
   2a6e6:	18d3      	adds	r3, r2, r3
   2a6e8:	693a      	ldr	r2, [r7, #16]
   2a6ea:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a6ec:	69fb      	ldr	r3, [r7, #28]
   2a6ee:	3301      	adds	r3, #1
   2a6f0:	61fb      	str	r3, [r7, #28]
   2a6f2:	69fb      	ldr	r3, [r7, #28]
   2a6f4:	2b01      	cmp	r3, #1
   2a6f6:	dd8d      	ble.n	2a614 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2a6f8:	2300      	movs	r3, #0
}
   2a6fa:	0018      	movs	r0, r3
   2a6fc:	46bd      	mov	sp, r7
   2a6fe:	b008      	add	sp, #32
   2a700:	bd80      	pop	{r7, pc}
   2a702:	46c0      	nop			; (mov r8, r8)
   2a704:	000392f4 	.word	0x000392f4

0002a708 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a708:	b580      	push	{r7, lr}
   2a70a:	b088      	sub	sp, #32
   2a70c:	af00      	add	r7, sp, #0
   2a70e:	60b9      	str	r1, [r7, #8]
   2a710:	607a      	str	r2, [r7, #4]
   2a712:	230f      	movs	r3, #15
   2a714:	18fb      	adds	r3, r7, r3
   2a716:	1c02      	adds	r2, r0, #0
   2a718:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2a71a:	230f      	movs	r3, #15
   2a71c:	18fb      	adds	r3, r7, r3
   2a71e:	781a      	ldrb	r2, [r3, #0]
   2a720:	2317      	movs	r3, #23
   2a722:	18fb      	adds	r3, r7, r3
   2a724:	492d      	ldr	r1, [pc, #180]	; (2a7dc <_tcc_build_drvctrl+0xd4>)
   2a726:	5c8a      	ldrb	r2, [r1, r2]
   2a728:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2a72a:	2300      	movs	r3, #0
   2a72c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a72e:	2300      	movs	r3, #0
   2a730:	61fb      	str	r3, [r7, #28]
   2a732:	e048      	b.n	2a7c6 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2a734:	68ba      	ldr	r2, [r7, #8]
   2a736:	2150      	movs	r1, #80	; 0x50
   2a738:	69fb      	ldr	r3, [r7, #28]
   2a73a:	18d3      	adds	r3, r2, r3
   2a73c:	185b      	adds	r3, r3, r1
   2a73e:	781b      	ldrb	r3, [r3, #0]
   2a740:	2b00      	cmp	r3, #0
   2a742:	d010      	beq.n	2a766 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2a744:	2317      	movs	r3, #23
   2a746:	18fb      	adds	r3, r7, r3
   2a748:	781a      	ldrb	r2, [r3, #0]
   2a74a:	69fb      	ldr	r3, [r7, #28]
   2a74c:	429a      	cmp	r2, r3
   2a74e:	d801      	bhi.n	2a754 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2a750:	2317      	movs	r3, #23
   2a752:	e03f      	b.n	2a7d4 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2a754:	2380      	movs	r3, #128	; 0x80
   2a756:	025a      	lsls	r2, r3, #9
   2a758:	69fb      	ldr	r3, [r7, #28]
   2a75a:	409a      	lsls	r2, r3
   2a75c:	0013      	movs	r3, r2
   2a75e:	001a      	movs	r2, r3
   2a760:	69bb      	ldr	r3, [r7, #24]
   2a762:	4313      	orrs	r3, r2
   2a764:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2a766:	68ba      	ldr	r2, [r7, #8]
   2a768:	69fb      	ldr	r3, [r7, #28]
   2a76a:	331c      	adds	r3, #28
   2a76c:	005b      	lsls	r3, r3, #1
   2a76e:	18d3      	adds	r3, r2, r3
   2a770:	3309      	adds	r3, #9
   2a772:	781b      	ldrb	r3, [r3, #0]
   2a774:	2b00      	cmp	r3, #0
   2a776:	d023      	beq.n	2a7c0 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2a778:	2317      	movs	r3, #23
   2a77a:	18fb      	adds	r3, r7, r3
   2a77c:	781a      	ldrb	r2, [r3, #0]
   2a77e:	69fb      	ldr	r3, [r7, #28]
   2a780:	429a      	cmp	r2, r3
   2a782:	d801      	bhi.n	2a788 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2a784:	2317      	movs	r3, #23
   2a786:	e025      	b.n	2a7d4 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2a788:	68ba      	ldr	r2, [r7, #8]
   2a78a:	69fb      	ldr	r3, [r7, #28]
   2a78c:	331c      	adds	r3, #28
   2a78e:	005b      	lsls	r3, r3, #1
   2a790:	18d3      	adds	r3, r2, r3
   2a792:	3309      	adds	r3, #9
   2a794:	781b      	ldrb	r3, [r3, #0]
   2a796:	2b02      	cmp	r3, #2
   2a798:	d10a      	bne.n	2a7b0 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2a79a:	2302      	movs	r3, #2
   2a79c:	33ff      	adds	r3, #255	; 0xff
   2a79e:	001a      	movs	r2, r3
   2a7a0:	69fb      	ldr	r3, [r7, #28]
   2a7a2:	409a      	lsls	r2, r3
   2a7a4:	0013      	movs	r3, r2
   2a7a6:	001a      	movs	r2, r3
   2a7a8:	69bb      	ldr	r3, [r7, #24]
   2a7aa:	4313      	orrs	r3, r2
   2a7ac:	61bb      	str	r3, [r7, #24]
   2a7ae:	e007      	b.n	2a7c0 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2a7b0:	2201      	movs	r2, #1
   2a7b2:	69fb      	ldr	r3, [r7, #28]
   2a7b4:	409a      	lsls	r2, r3
   2a7b6:	0013      	movs	r3, r2
   2a7b8:	001a      	movs	r2, r3
   2a7ba:	69bb      	ldr	r3, [r7, #24]
   2a7bc:	4313      	orrs	r3, r2
   2a7be:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a7c0:	69fb      	ldr	r3, [r7, #28]
   2a7c2:	3301      	adds	r3, #1
   2a7c4:	61fb      	str	r3, [r7, #28]
   2a7c6:	69fb      	ldr	r3, [r7, #28]
   2a7c8:	2b07      	cmp	r3, #7
   2a7ca:	d9b3      	bls.n	2a734 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2a7cc:	687b      	ldr	r3, [r7, #4]
   2a7ce:	69ba      	ldr	r2, [r7, #24]
   2a7d0:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a7d2:	2300      	movs	r3, #0
}
   2a7d4:	0018      	movs	r0, r3
   2a7d6:	46bd      	mov	sp, r7
   2a7d8:	b008      	add	sp, #32
   2a7da:	bd80      	pop	{r7, pc}
   2a7dc:	000392f8 	.word	0x000392f8

0002a7e0 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a7e0:	b580      	push	{r7, lr}
   2a7e2:	b088      	sub	sp, #32
   2a7e4:	af00      	add	r7, sp, #0
   2a7e6:	60b9      	str	r1, [r7, #8]
   2a7e8:	607a      	str	r2, [r7, #4]
   2a7ea:	230f      	movs	r3, #15
   2a7ec:	18fb      	adds	r3, r7, r3
   2a7ee:	1c02      	adds	r2, r0, #0
   2a7f0:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a7f2:	230f      	movs	r3, #15
   2a7f4:	18fb      	adds	r3, r7, r3
   2a7f6:	781a      	ldrb	r2, [r3, #0]
   2a7f8:	2317      	movs	r3, #23
   2a7fa:	18fb      	adds	r3, r7, r3
   2a7fc:	491d      	ldr	r1, [pc, #116]	; (2a874 <_tcc_build_waves+0x94>)
   2a7fe:	5c8a      	ldrb	r2, [r1, r2]
   2a800:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2a802:	68bb      	ldr	r3, [r7, #8]
   2a804:	3310      	adds	r3, #16
   2a806:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a808:	693b      	ldr	r3, [r7, #16]
   2a80a:	7a5b      	ldrb	r3, [r3, #9]
   2a80c:	011b      	lsls	r3, r3, #4
   2a80e:	001a      	movs	r2, r3
   2a810:	2330      	movs	r3, #48	; 0x30
   2a812:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2a814:	693b      	ldr	r3, [r7, #16]
   2a816:	7a1b      	ldrb	r3, [r3, #8]
   2a818:	0019      	movs	r1, r3
   2a81a:	2307      	movs	r3, #7
   2a81c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a81e:	4313      	orrs	r3, r2
   2a820:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a822:	2300      	movs	r3, #0
   2a824:	61fb      	str	r3, [r7, #28]
   2a826:	e01a      	b.n	2a85e <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2a828:	693a      	ldr	r2, [r7, #16]
   2a82a:	69fb      	ldr	r3, [r7, #28]
   2a82c:	18d3      	adds	r3, r2, r3
   2a82e:	3304      	adds	r3, #4
   2a830:	781b      	ldrb	r3, [r3, #0]
   2a832:	2b00      	cmp	r3, #0
   2a834:	d010      	beq.n	2a858 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2a836:	2317      	movs	r3, #23
   2a838:	18fb      	adds	r3, r7, r3
   2a83a:	781a      	ldrb	r2, [r3, #0]
   2a83c:	69fb      	ldr	r3, [r7, #28]
   2a83e:	429a      	cmp	r2, r3
   2a840:	dc01      	bgt.n	2a846 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2a842:	2317      	movs	r3, #23
   2a844:	e012      	b.n	2a86c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2a846:	2380      	movs	r3, #128	; 0x80
   2a848:	025a      	lsls	r2, r3, #9
   2a84a:	69fb      	ldr	r3, [r7, #28]
   2a84c:	409a      	lsls	r2, r3
   2a84e:	0013      	movs	r3, r2
   2a850:	001a      	movs	r2, r3
   2a852:	69bb      	ldr	r3, [r7, #24]
   2a854:	4313      	orrs	r3, r2
   2a856:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a858:	69fb      	ldr	r3, [r7, #28]
   2a85a:	3301      	adds	r3, #1
   2a85c:	61fb      	str	r3, [r7, #28]
   2a85e:	69fb      	ldr	r3, [r7, #28]
   2a860:	2b03      	cmp	r3, #3
   2a862:	dde1      	ble.n	2a828 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2a864:	687b      	ldr	r3, [r7, #4]
   2a866:	69ba      	ldr	r2, [r7, #24]
   2a868:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2a86a:	2300      	movs	r3, #0
}
   2a86c:	0018      	movs	r0, r3
   2a86e:	46bd      	mov	sp, r7
   2a870:	b008      	add	sp, #32
   2a872:	bd80      	pop	{r7, pc}
   2a874:	000392f4 	.word	0x000392f4

0002a878 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2a878:	b590      	push	{r4, r7, lr}
   2a87a:	b091      	sub	sp, #68	; 0x44
   2a87c:	af00      	add	r7, sp, #0
   2a87e:	60f8      	str	r0, [r7, #12]
   2a880:	60b9      	str	r1, [r7, #8]
   2a882:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a884:	233b      	movs	r3, #59	; 0x3b
   2a886:	18fc      	adds	r4, r7, r3
   2a888:	68bb      	ldr	r3, [r7, #8]
   2a88a:	0018      	movs	r0, r3
   2a88c:	4bc4      	ldr	r3, [pc, #784]	; (2aba0 <tcc_init+0x328>)
   2a88e:	4798      	blx	r3
   2a890:	0003      	movs	r3, r0
   2a892:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2a894:	233b      	movs	r3, #59	; 0x3b
   2a896:	18fb      	adds	r3, r7, r3
   2a898:	781a      	ldrb	r2, [r3, #0]
   2a89a:	4bc2      	ldr	r3, [pc, #776]	; (2aba4 <tcc_init+0x32c>)
   2a89c:	0092      	lsls	r2, r2, #2
   2a89e:	58d3      	ldr	r3, [r2, r3]
   2a8a0:	0019      	movs	r1, r3
   2a8a2:	2002      	movs	r0, #2
   2a8a4:	4bc0      	ldr	r3, [pc, #768]	; (2aba8 <tcc_init+0x330>)
   2a8a6:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2a8a8:	68bb      	ldr	r3, [r7, #8]
   2a8aa:	681b      	ldr	r3, [r3, #0]
   2a8ac:	2202      	movs	r2, #2
   2a8ae:	4013      	ands	r3, r2
   2a8b0:	d001      	beq.n	2a8b6 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2a8b2:	231c      	movs	r3, #28
   2a8b4:	e1be      	b.n	2ac34 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2a8b6:	68bb      	ldr	r3, [r7, #8]
   2a8b8:	681b      	ldr	r3, [r3, #0]
   2a8ba:	2201      	movs	r2, #1
   2a8bc:	4013      	ands	r3, r2
   2a8be:	d001      	beq.n	2a8c4 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2a8c0:	231c      	movs	r3, #28
   2a8c2:	e1b7      	b.n	2ac34 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2a8c4:	233b      	movs	r3, #59	; 0x3b
   2a8c6:	18fb      	adds	r3, r7, r3
   2a8c8:	781a      	ldrb	r2, [r3, #0]
   2a8ca:	4bb8      	ldr	r3, [pc, #736]	; (2abac <tcc_init+0x334>)
   2a8cc:	0092      	lsls	r2, r2, #2
   2a8ce:	58d3      	ldr	r3, [r2, r3]
   2a8d0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2a8d2:	687b      	ldr	r3, [r7, #4]
   2a8d4:	681a      	ldr	r2, [r3, #0]
   2a8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a8d8:	429a      	cmp	r2, r3
   2a8da:	d804      	bhi.n	2a8e6 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2a8dc:	687b      	ldr	r3, [r7, #4]
   2a8de:	685a      	ldr	r2, [r3, #4]
   2a8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a8e2:	429a      	cmp	r2, r3
   2a8e4:	d901      	bls.n	2a8ea <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2a8e6:	2317      	movs	r3, #23
   2a8e8:	e1a4      	b.n	2ac34 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a8ea:	2300      	movs	r3, #0
   2a8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a8ee:	e00e      	b.n	2a90e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2a8f0:	687a      	ldr	r2, [r7, #4]
   2a8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a8f4:	3306      	adds	r3, #6
   2a8f6:	009b      	lsls	r3, r3, #2
   2a8f8:	18d3      	adds	r3, r2, r3
   2a8fa:	3304      	adds	r3, #4
   2a8fc:	681a      	ldr	r2, [r3, #0]
   2a8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a900:	429a      	cmp	r2, r3
   2a902:	d901      	bls.n	2a908 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2a904:	2317      	movs	r3, #23
   2a906:	e195      	b.n	2ac34 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a90a:	3301      	adds	r3, #1
   2a90c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a910:	2b03      	cmp	r3, #3
   2a912:	dded      	ble.n	2a8f0 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a914:	2300      	movs	r3, #0
   2a916:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a918:	e019      	b.n	2a94e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2a91a:	687a      	ldr	r2, [r7, #4]
   2a91c:	2198      	movs	r1, #152	; 0x98
   2a91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a920:	18d3      	adds	r3, r2, r3
   2a922:	185b      	adds	r3, r3, r1
   2a924:	781b      	ldrb	r3, [r3, #0]
   2a926:	2201      	movs	r2, #1
   2a928:	4053      	eors	r3, r2
   2a92a:	b2db      	uxtb	r3, r3
   2a92c:	2b00      	cmp	r3, #0
   2a92e:	d10a      	bne.n	2a946 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2a930:	233b      	movs	r3, #59	; 0x3b
   2a932:	18fb      	adds	r3, r7, r3
   2a934:	781b      	ldrb	r3, [r3, #0]
   2a936:	4a9e      	ldr	r2, [pc, #632]	; (2abb0 <tcc_init+0x338>)
   2a938:	5cd3      	ldrb	r3, [r2, r3]
   2a93a:	001a      	movs	r2, r3
   2a93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a93e:	429a      	cmp	r2, r3
   2a940:	dc02      	bgt.n	2a948 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2a942:	2317      	movs	r3, #23
   2a944:	e176      	b.n	2ac34 <tcc_init+0x3bc>
			continue;
   2a946:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a94a:	3301      	adds	r3, #1
   2a94c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a950:	2b07      	cmp	r3, #7
   2a952:	dde2      	ble.n	2a91a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2a954:	2300      	movs	r3, #0
   2a956:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2a958:	2333      	movs	r3, #51	; 0x33
   2a95a:	18fc      	adds	r4, r7, r3
   2a95c:	232c      	movs	r3, #44	; 0x2c
   2a95e:	18fa      	adds	r2, r7, r3
   2a960:	6879      	ldr	r1, [r7, #4]
   2a962:	233b      	movs	r3, #59	; 0x3b
   2a964:	18fb      	adds	r3, r7, r3
   2a966:	781b      	ldrb	r3, [r3, #0]
   2a968:	0018      	movs	r0, r3
   2a96a:	4b92      	ldr	r3, [pc, #584]	; (2abb4 <tcc_init+0x33c>)
   2a96c:	4798      	blx	r3
   2a96e:	0003      	movs	r3, r0
   2a970:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a972:	2333      	movs	r3, #51	; 0x33
   2a974:	18fb      	adds	r3, r7, r3
   2a976:	781b      	ldrb	r3, [r3, #0]
   2a978:	2b00      	cmp	r3, #0
   2a97a:	d003      	beq.n	2a984 <tcc_init+0x10c>
		return status;
   2a97c:	2333      	movs	r3, #51	; 0x33
   2a97e:	18fb      	adds	r3, r7, r3
   2a980:	781b      	ldrb	r3, [r3, #0]
   2a982:	e157      	b.n	2ac34 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2a984:	232b      	movs	r3, #43	; 0x2b
   2a986:	18fa      	adds	r2, r7, r3
   2a988:	6879      	ldr	r1, [r7, #4]
   2a98a:	233b      	movs	r3, #59	; 0x3b
   2a98c:	18fb      	adds	r3, r7, r3
   2a98e:	781b      	ldrb	r3, [r3, #0]
   2a990:	0018      	movs	r0, r3
   2a992:	4b89      	ldr	r3, [pc, #548]	; (2abb8 <tcc_init+0x340>)
   2a994:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2a996:	2333      	movs	r3, #51	; 0x33
   2a998:	18fc      	adds	r4, r7, r3
   2a99a:	2320      	movs	r3, #32
   2a99c:	18fa      	adds	r2, r7, r3
   2a99e:	6879      	ldr	r1, [r7, #4]
   2a9a0:	233b      	movs	r3, #59	; 0x3b
   2a9a2:	18fb      	adds	r3, r7, r3
   2a9a4:	781b      	ldrb	r3, [r3, #0]
   2a9a6:	0018      	movs	r0, r3
   2a9a8:	4b84      	ldr	r3, [pc, #528]	; (2abbc <tcc_init+0x344>)
   2a9aa:	4798      	blx	r3
   2a9ac:	0003      	movs	r3, r0
   2a9ae:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a9b0:	2333      	movs	r3, #51	; 0x33
   2a9b2:	18fb      	adds	r3, r7, r3
   2a9b4:	781b      	ldrb	r3, [r3, #0]
   2a9b6:	2b00      	cmp	r3, #0
   2a9b8:	d003      	beq.n	2a9c2 <tcc_init+0x14a>
		return status;
   2a9ba:	2333      	movs	r3, #51	; 0x33
   2a9bc:	18fb      	adds	r3, r7, r3
   2a9be:	781b      	ldrb	r3, [r3, #0]
   2a9c0:	e138      	b.n	2ac34 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2a9c2:	2300      	movs	r3, #0
   2a9c4:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2a9c6:	2333      	movs	r3, #51	; 0x33
   2a9c8:	18fc      	adds	r4, r7, r3
   2a9ca:	231c      	movs	r3, #28
   2a9cc:	18fa      	adds	r2, r7, r3
   2a9ce:	6879      	ldr	r1, [r7, #4]
   2a9d0:	233b      	movs	r3, #59	; 0x3b
   2a9d2:	18fb      	adds	r3, r7, r3
   2a9d4:	781b      	ldrb	r3, [r3, #0]
   2a9d6:	0018      	movs	r0, r3
   2a9d8:	4b79      	ldr	r3, [pc, #484]	; (2abc0 <tcc_init+0x348>)
   2a9da:	4798      	blx	r3
   2a9dc:	0003      	movs	r3, r0
   2a9de:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a9e0:	2333      	movs	r3, #51	; 0x33
   2a9e2:	18fb      	adds	r3, r7, r3
   2a9e4:	781b      	ldrb	r3, [r3, #0]
   2a9e6:	2b00      	cmp	r3, #0
   2a9e8:	d003      	beq.n	2a9f2 <tcc_init+0x17a>
		return status;
   2a9ea:	2333      	movs	r3, #51	; 0x33
   2a9ec:	18fb      	adds	r3, r7, r3
   2a9ee:	781b      	ldrb	r3, [r3, #0]
   2a9f0:	e120      	b.n	2ac34 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2a9f2:	2333      	movs	r3, #51	; 0x33
   2a9f4:	18fc      	adds	r4, r7, r3
   2a9f6:	2318      	movs	r3, #24
   2a9f8:	18fa      	adds	r2, r7, r3
   2a9fa:	6879      	ldr	r1, [r7, #4]
   2a9fc:	233b      	movs	r3, #59	; 0x3b
   2a9fe:	18fb      	adds	r3, r7, r3
   2aa00:	781b      	ldrb	r3, [r3, #0]
   2aa02:	0018      	movs	r0, r3
   2aa04:	4b6f      	ldr	r3, [pc, #444]	; (2abc4 <tcc_init+0x34c>)
   2aa06:	4798      	blx	r3
   2aa08:	0003      	movs	r3, r0
   2aa0a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2aa0c:	2333      	movs	r3, #51	; 0x33
   2aa0e:	18fb      	adds	r3, r7, r3
   2aa10:	781b      	ldrb	r3, [r3, #0]
   2aa12:	2b00      	cmp	r3, #0
   2aa14:	d003      	beq.n	2aa1e <tcc_init+0x1a6>
		return status;
   2aa16:	2333      	movs	r3, #51	; 0x33
   2aa18:	18fb      	adds	r3, r7, r3
   2aa1a:	781b      	ldrb	r3, [r3, #0]
   2aa1c:	e10a      	b.n	2ac34 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2aa1e:	2300      	movs	r3, #0
   2aa20:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aa22:	e009      	b.n	2aa38 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2aa24:	68fa      	ldr	r2, [r7, #12]
   2aa26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aa28:	009b      	lsls	r3, r3, #2
   2aa2a:	18d3      	adds	r3, r2, r3
   2aa2c:	3304      	adds	r3, #4
   2aa2e:	2200      	movs	r2, #0
   2aa30:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2aa32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aa34:	3301      	adds	r3, #1
   2aa36:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aa38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aa3a:	2b0b      	cmp	r3, #11
   2aa3c:	ddf2      	ble.n	2aa24 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2aa3e:	68fb      	ldr	r3, [r7, #12]
   2aa40:	2200      	movs	r2, #0
   2aa42:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2aa44:	68fb      	ldr	r3, [r7, #12]
   2aa46:	2200      	movs	r2, #0
   2aa48:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2aa4a:	233b      	movs	r3, #59	; 0x3b
   2aa4c:	18fb      	adds	r3, r7, r3
   2aa4e:	781a      	ldrb	r2, [r3, #0]
   2aa50:	4b5d      	ldr	r3, [pc, #372]	; (2abc8 <tcc_init+0x350>)
   2aa52:	0092      	lsls	r2, r2, #2
   2aa54:	68f9      	ldr	r1, [r7, #12]
   2aa56:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2aa58:	68fb      	ldr	r3, [r7, #12]
   2aa5a:	68ba      	ldr	r2, [r7, #8]
   2aa5c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2aa5e:	687b      	ldr	r3, [r7, #4]
   2aa60:	22a0      	movs	r2, #160	; 0xa0
   2aa62:	5c99      	ldrb	r1, [r3, r2]
   2aa64:	68fb      	ldr	r3, [r7, #12]
   2aa66:	223c      	movs	r2, #60	; 0x3c
   2aa68:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2aa6a:	2314      	movs	r3, #20
   2aa6c:	18fb      	adds	r3, r7, r3
   2aa6e:	0018      	movs	r0, r3
   2aa70:	4b56      	ldr	r3, [pc, #344]	; (2abcc <tcc_init+0x354>)
   2aa72:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2aa74:	687b      	ldr	r3, [r7, #4]
   2aa76:	7a9a      	ldrb	r2, [r3, #10]
   2aa78:	2314      	movs	r3, #20
   2aa7a:	18fb      	adds	r3, r7, r3
   2aa7c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2aa7e:	233b      	movs	r3, #59	; 0x3b
   2aa80:	18fb      	adds	r3, r7, r3
   2aa82:	781b      	ldrb	r3, [r3, #0]
   2aa84:	4a52      	ldr	r2, [pc, #328]	; (2abd0 <tcc_init+0x358>)
   2aa86:	5cd3      	ldrb	r3, [r2, r3]
   2aa88:	2214      	movs	r2, #20
   2aa8a:	18ba      	adds	r2, r7, r2
   2aa8c:	0011      	movs	r1, r2
   2aa8e:	0018      	movs	r0, r3
   2aa90:	4b50      	ldr	r3, [pc, #320]	; (2abd4 <tcc_init+0x35c>)
   2aa92:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2aa94:	233b      	movs	r3, #59	; 0x3b
   2aa96:	18fb      	adds	r3, r7, r3
   2aa98:	781b      	ldrb	r3, [r3, #0]
   2aa9a:	4a4d      	ldr	r2, [pc, #308]	; (2abd0 <tcc_init+0x358>)
   2aa9c:	5cd3      	ldrb	r3, [r2, r3]
   2aa9e:	0018      	movs	r0, r3
   2aaa0:	4b4d      	ldr	r3, [pc, #308]	; (2abd8 <tcc_init+0x360>)
   2aaa2:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2aaa4:	2300      	movs	r3, #0
   2aaa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aaa8:	e02d      	b.n	2ab06 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2aaaa:	687a      	ldr	r2, [r7, #4]
   2aaac:	2198      	movs	r1, #152	; 0x98
   2aaae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aab0:	18d3      	adds	r3, r2, r3
   2aab2:	185b      	adds	r3, r3, r1
   2aab4:	781b      	ldrb	r3, [r3, #0]
   2aab6:	2201      	movs	r2, #1
   2aab8:	4053      	eors	r3, r2
   2aaba:	b2db      	uxtb	r3, r3
   2aabc:	2b00      	cmp	r3, #0
   2aabe:	d11e      	bne.n	2aafe <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2aac0:	2310      	movs	r3, #16
   2aac2:	18fb      	adds	r3, r7, r3
   2aac4:	0018      	movs	r0, r3
   2aac6:	4b45      	ldr	r3, [pc, #276]	; (2abdc <tcc_init+0x364>)
   2aac8:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2aaca:	687b      	ldr	r3, [r7, #4]
   2aacc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2aace:	321e      	adds	r2, #30
   2aad0:	0092      	lsls	r2, r2, #2
   2aad2:	58d3      	ldr	r3, [r2, r3]
   2aad4:	b2da      	uxtb	r2, r3
   2aad6:	2310      	movs	r3, #16
   2aad8:	18fb      	adds	r3, r7, r3
   2aada:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2aadc:	2310      	movs	r3, #16
   2aade:	18fb      	adds	r3, r7, r3
   2aae0:	2201      	movs	r2, #1
   2aae2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2aae4:	687b      	ldr	r3, [r7, #4]
   2aae6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2aae8:	3216      	adds	r2, #22
   2aaea:	0092      	lsls	r2, r2, #2
   2aaec:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2aaee:	b2db      	uxtb	r3, r3
   2aaf0:	2210      	movs	r2, #16
   2aaf2:	18ba      	adds	r2, r7, r2
   2aaf4:	0011      	movs	r1, r2
   2aaf6:	0018      	movs	r0, r3
   2aaf8:	4b39      	ldr	r3, [pc, #228]	; (2abe0 <tcc_init+0x368>)
   2aafa:	4798      	blx	r3
   2aafc:	e000      	b.n	2ab00 <tcc_init+0x288>
			continue;
   2aafe:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2ab00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ab02:	3301      	adds	r3, #1
   2ab04:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ab06:	233b      	movs	r3, #59	; 0x3b
   2ab08:	18fb      	adds	r3, r7, r3
   2ab0a:	781b      	ldrb	r3, [r3, #0]
   2ab0c:	4a28      	ldr	r2, [pc, #160]	; (2abb0 <tcc_init+0x338>)
   2ab0e:	5cd3      	ldrb	r3, [r2, r3]
   2ab10:	001a      	movs	r2, r3
   2ab12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ab14:	429a      	cmp	r2, r3
   2ab16:	dcc8      	bgt.n	2aaaa <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2ab18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2ab1a:	68bb      	ldr	r3, [r7, #8]
   2ab1c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2ab1e:	46c0      	nop			; (mov r8, r8)
   2ab20:	68bb      	ldr	r3, [r7, #8]
   2ab22:	689b      	ldr	r3, [r3, #8]
   2ab24:	2204      	movs	r2, #4
   2ab26:	4013      	ands	r3, r2
   2ab28:	d1fa      	bne.n	2ab20 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2ab2a:	68bb      	ldr	r3, [r7, #8]
   2ab2c:	22ff      	movs	r2, #255	; 0xff
   2ab2e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2ab30:	46c0      	nop			; (mov r8, r8)
   2ab32:	68bb      	ldr	r3, [r7, #8]
   2ab34:	689b      	ldr	r3, [r3, #8]
   2ab36:	2204      	movs	r2, #4
   2ab38:	4013      	ands	r3, r2
   2ab3a:	d1fa      	bne.n	2ab32 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2ab3c:	232b      	movs	r3, #43	; 0x2b
   2ab3e:	18fb      	adds	r3, r7, r3
   2ab40:	781a      	ldrb	r2, [r3, #0]
   2ab42:	68bb      	ldr	r3, [r7, #8]
   2ab44:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2ab46:	2320      	movs	r3, #32
   2ab48:	18fb      	adds	r3, r7, r3
   2ab4a:	681a      	ldr	r2, [r3, #0]
   2ab4c:	68bb      	ldr	r3, [r7, #8]
   2ab4e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2ab50:	2320      	movs	r3, #32
   2ab52:	18fb      	adds	r3, r7, r3
   2ab54:	685a      	ldr	r2, [r3, #4]
   2ab56:	68bb      	ldr	r3, [r7, #8]
   2ab58:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2ab5a:	69fa      	ldr	r2, [r7, #28]
   2ab5c:	68bb      	ldr	r3, [r7, #8]
   2ab5e:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2ab60:	46c0      	nop			; (mov r8, r8)
   2ab62:	68bb      	ldr	r3, [r7, #8]
   2ab64:	689b      	ldr	r3, [r3, #8]
   2ab66:	4a1f      	ldr	r2, [pc, #124]	; (2abe4 <tcc_init+0x36c>)
   2ab68:	4013      	ands	r3, r2
   2ab6a:	d1fa      	bne.n	2ab62 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2ab6c:	69ba      	ldr	r2, [r7, #24]
   2ab6e:	68bb      	ldr	r3, [r7, #8]
   2ab70:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2ab72:	46c0      	nop			; (mov r8, r8)
   2ab74:	68bb      	ldr	r3, [r7, #8]
   2ab76:	689b      	ldr	r3, [r3, #8]
   2ab78:	2210      	movs	r2, #16
   2ab7a:	4013      	ands	r3, r2
   2ab7c:	d1fa      	bne.n	2ab74 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2ab7e:	687b      	ldr	r3, [r7, #4]
   2ab80:	681a      	ldr	r2, [r3, #0]
   2ab82:	68bb      	ldr	r3, [r7, #8]
   2ab84:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2ab86:	46c0      	nop			; (mov r8, r8)
   2ab88:	68bb      	ldr	r3, [r7, #8]
   2ab8a:	689b      	ldr	r3, [r3, #8]
   2ab8c:	4a16      	ldr	r2, [pc, #88]	; (2abe8 <tcc_init+0x370>)
   2ab8e:	4013      	ands	r3, r2
   2ab90:	d1fa      	bne.n	2ab88 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2ab92:	687b      	ldr	r3, [r7, #4]
   2ab94:	685a      	ldr	r2, [r3, #4]
   2ab96:	68bb      	ldr	r3, [r7, #8]
   2ab98:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2ab9a:	2300      	movs	r3, #0
   2ab9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ab9e:	e03f      	b.n	2ac20 <tcc_init+0x3a8>
   2aba0:	0002a1e1 	.word	0x0002a1e1
   2aba4:	000392dc 	.word	0x000392dc
   2aba8:	0002a15d 	.word	0x0002a15d
   2abac:	000392e8 	.word	0x000392e8
   2abb0:	000392f8 	.word	0x000392f8
   2abb4:	0002a4ed 	.word	0x0002a4ed
   2abb8:	0002a591 	.word	0x0002a591
   2abbc:	0002a5ed 	.word	0x0002a5ed
   2abc0:	0002a709 	.word	0x0002a709
   2abc4:	0002a7e1 	.word	0x0002a7e1
   2abc8:	200057b0 	.word	0x200057b0
   2abcc:	0002a145 	.word	0x0002a145
   2abd0:	000392d8 	.word	0x000392d8
   2abd4:	00029d5d 	.word	0x00029d5d
   2abd8:	00029da1 	.word	0x00029da1
   2abdc:	0002a1b9 	.word	0x0002a1b9
   2abe0:	0002a0bd 	.word	0x0002a0bd
   2abe4:	00020040 	.word	0x00020040
   2abe8:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2abec:	46c0      	nop			; (mov r8, r8)
   2abee:	68bb      	ldr	r3, [r7, #8]
   2abf0:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2abf2:	4912      	ldr	r1, [pc, #72]	; (2ac3c <tcc_init+0x3c4>)
   2abf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2abf6:	4091      	lsls	r1, r2
   2abf8:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2abfa:	4013      	ands	r3, r2
   2abfc:	d1f7      	bne.n	2abee <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2abfe:	687a      	ldr	r2, [r7, #4]
   2ac00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ac02:	3306      	adds	r3, #6
   2ac04:	009b      	lsls	r3, r3, #2
   2ac06:	18d3      	adds	r3, r2, r3
   2ac08:	3304      	adds	r3, #4
   2ac0a:	681a      	ldr	r2, [r3, #0]
   2ac0c:	68b9      	ldr	r1, [r7, #8]
   2ac0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ac10:	3310      	adds	r3, #16
   2ac12:	009b      	lsls	r3, r3, #2
   2ac14:	18cb      	adds	r3, r1, r3
   2ac16:	3304      	adds	r3, #4
   2ac18:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2ac1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ac1c:	3301      	adds	r3, #1
   2ac1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ac20:	233b      	movs	r3, #59	; 0x3b
   2ac22:	18fb      	adds	r3, r7, r3
   2ac24:	781b      	ldrb	r3, [r3, #0]
   2ac26:	4a06      	ldr	r2, [pc, #24]	; (2ac40 <tcc_init+0x3c8>)
   2ac28:	5cd3      	ldrb	r3, [r2, r3]
   2ac2a:	001a      	movs	r2, r3
   2ac2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ac2e:	429a      	cmp	r2, r3
   2ac30:	dcdc      	bgt.n	2abec <tcc_init+0x374>
	}

	return STATUS_OK;
   2ac32:	2300      	movs	r3, #0
}
   2ac34:	0018      	movs	r0, r3
   2ac36:	46bd      	mov	sp, r7
   2ac38:	b011      	add	sp, #68	; 0x44
   2ac3a:	bd90      	pop	{r4, r7, pc}
   2ac3c:	00080100 	.word	0x00080100
   2ac40:	000392f4 	.word	0x000392f4

0002ac44 <system_interrupt_enable>:
{
   2ac44:	b580      	push	{r7, lr}
   2ac46:	b082      	sub	sp, #8
   2ac48:	af00      	add	r7, sp, #0
   2ac4a:	0002      	movs	r2, r0
   2ac4c:	1dfb      	adds	r3, r7, #7
   2ac4e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2ac50:	4b06      	ldr	r3, [pc, #24]	; (2ac6c <system_interrupt_enable+0x28>)
   2ac52:	1dfa      	adds	r2, r7, #7
   2ac54:	7812      	ldrb	r2, [r2, #0]
   2ac56:	0011      	movs	r1, r2
   2ac58:	221f      	movs	r2, #31
   2ac5a:	400a      	ands	r2, r1
   2ac5c:	2101      	movs	r1, #1
   2ac5e:	4091      	lsls	r1, r2
   2ac60:	000a      	movs	r2, r1
   2ac62:	601a      	str	r2, [r3, #0]
}
   2ac64:	46c0      	nop			; (mov r8, r8)
   2ac66:	46bd      	mov	sp, r7
   2ac68:	b002      	add	sp, #8
   2ac6a:	bd80      	pop	{r7, pc}
   2ac6c:	e000e100 	.word	0xe000e100

0002ac70 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2ac70:	b580      	push	{r7, lr}
   2ac72:	b082      	sub	sp, #8
   2ac74:	af00      	add	r7, sp, #0
   2ac76:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2ac78:	4a04      	ldr	r2, [pc, #16]	; (2ac8c <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2ac7a:	687b      	ldr	r3, [r7, #4]
   2ac7c:	18d3      	adds	r3, r2, r3
   2ac7e:	781b      	ldrb	r3, [r3, #0]
   2ac80:	b25b      	sxtb	r3, r3
}
   2ac82:	0018      	movs	r0, r3
   2ac84:	46bd      	mov	sp, r7
   2ac86:	b002      	add	sp, #8
   2ac88:	bd80      	pop	{r7, pc}
   2ac8a:	46c0      	nop			; (mov r8, r8)
   2ac8c:	200000cc 	.word	0x200000cc

0002ac90 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2ac90:	b580      	push	{r7, lr}
   2ac92:	b084      	sub	sp, #16
   2ac94:	af00      	add	r7, sp, #0
   2ac96:	60f8      	str	r0, [r7, #12]
   2ac98:	60b9      	str	r1, [r7, #8]
   2ac9a:	1dfb      	adds	r3, r7, #7
   2ac9c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2ac9e:	1dfb      	adds	r3, r7, #7
   2aca0:	781b      	ldrb	r3, [r3, #0]
   2aca2:	68fa      	ldr	r2, [r7, #12]
   2aca4:	009b      	lsls	r3, r3, #2
   2aca6:	18d3      	adds	r3, r2, r3
   2aca8:	3304      	adds	r3, #4
   2acaa:	68ba      	ldr	r2, [r7, #8]
   2acac:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2acae:	68fb      	ldr	r3, [r7, #12]
   2acb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2acb2:	1dfb      	adds	r3, r7, #7
   2acb4:	7819      	ldrb	r1, [r3, #0]
   2acb6:	4b05      	ldr	r3, [pc, #20]	; (2accc <tcc_register_callback+0x3c>)
   2acb8:	0089      	lsls	r1, r1, #2
   2acba:	58cb      	ldr	r3, [r1, r3]
   2acbc:	431a      	orrs	r2, r3
   2acbe:	68fb      	ldr	r3, [r7, #12]
   2acc0:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2acc2:	2300      	movs	r3, #0
}
   2acc4:	0018      	movs	r0, r3
   2acc6:	46bd      	mov	sp, r7
   2acc8:	b004      	add	sp, #16
   2acca:	bd80      	pop	{r7, pc}
   2accc:	000392fc 	.word	0x000392fc

0002acd0 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2acd0:	b580      	push	{r7, lr}
   2acd2:	b082      	sub	sp, #8
   2acd4:	af00      	add	r7, sp, #0
   2acd6:	6078      	str	r0, [r7, #4]
   2acd8:	000a      	movs	r2, r1
   2acda:	1cfb      	adds	r3, r7, #3
   2acdc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2acde:	687b      	ldr	r3, [r7, #4]
   2ace0:	681b      	ldr	r3, [r3, #0]
   2ace2:	0018      	movs	r0, r3
   2ace4:	4b0f      	ldr	r3, [pc, #60]	; (2ad24 <tcc_enable_callback+0x54>)
   2ace6:	4798      	blx	r3
   2ace8:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2acea:	0018      	movs	r0, r3
   2acec:	4b0e      	ldr	r3, [pc, #56]	; (2ad28 <tcc_enable_callback+0x58>)
   2acee:	4798      	blx	r3
   2acf0:	0003      	movs	r3, r0
   2acf2:	0018      	movs	r0, r3
   2acf4:	4b0d      	ldr	r3, [pc, #52]	; (2ad2c <tcc_enable_callback+0x5c>)
   2acf6:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2acf8:	687b      	ldr	r3, [r7, #4]
   2acfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2acfc:	1cfb      	adds	r3, r7, #3
   2acfe:	7819      	ldrb	r1, [r3, #0]
   2ad00:	4b0b      	ldr	r3, [pc, #44]	; (2ad30 <tcc_enable_callback+0x60>)
   2ad02:	0089      	lsls	r1, r1, #2
   2ad04:	58cb      	ldr	r3, [r1, r3]
   2ad06:	431a      	orrs	r2, r3
   2ad08:	687b      	ldr	r3, [r7, #4]
   2ad0a:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2ad0c:	687b      	ldr	r3, [r7, #4]
   2ad0e:	681b      	ldr	r3, [r3, #0]
   2ad10:	1cfa      	adds	r2, r7, #3
   2ad12:	7811      	ldrb	r1, [r2, #0]
   2ad14:	4a06      	ldr	r2, [pc, #24]	; (2ad30 <tcc_enable_callback+0x60>)
   2ad16:	0089      	lsls	r1, r1, #2
   2ad18:	588a      	ldr	r2, [r1, r2]
   2ad1a:	629a      	str	r2, [r3, #40]	; 0x28
}
   2ad1c:	46c0      	nop			; (mov r8, r8)
   2ad1e:	46bd      	mov	sp, r7
   2ad20:	b002      	add	sp, #8
   2ad22:	bd80      	pop	{r7, pc}
   2ad24:	0002a1e1 	.word	0x0002a1e1
   2ad28:	0002ac71 	.word	0x0002ac71
   2ad2c:	0002ac45 	.word	0x0002ac45
   2ad30:	000392fc 	.word	0x000392fc

0002ad34 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2ad34:	b580      	push	{r7, lr}
   2ad36:	af00      	add	r7, sp, #0
   2ad38:	2000      	movs	r0, #0
   2ad3a:	4b02      	ldr	r3, [pc, #8]	; (2ad44 <TCC0_Handler+0x10>)
   2ad3c:	4798      	blx	r3
   2ad3e:	46c0      	nop			; (mov r8, r8)
   2ad40:	46bd      	mov	sp, r7
   2ad42:	bd80      	pop	{r7, pc}
   2ad44:	0002ad71 	.word	0x0002ad71

0002ad48 <TCC1_Handler>:
   2ad48:	b580      	push	{r7, lr}
   2ad4a:	af00      	add	r7, sp, #0
   2ad4c:	2001      	movs	r0, #1
   2ad4e:	4b02      	ldr	r3, [pc, #8]	; (2ad58 <TCC1_Handler+0x10>)
   2ad50:	4798      	blx	r3
   2ad52:	46c0      	nop			; (mov r8, r8)
   2ad54:	46bd      	mov	sp, r7
   2ad56:	bd80      	pop	{r7, pc}
   2ad58:	0002ad71 	.word	0x0002ad71

0002ad5c <TCC2_Handler>:
   2ad5c:	b580      	push	{r7, lr}
   2ad5e:	af00      	add	r7, sp, #0
   2ad60:	2002      	movs	r0, #2
   2ad62:	4b02      	ldr	r3, [pc, #8]	; (2ad6c <TCC2_Handler+0x10>)
   2ad64:	4798      	blx	r3
   2ad66:	46c0      	nop			; (mov r8, r8)
   2ad68:	46bd      	mov	sp, r7
   2ad6a:	bd80      	pop	{r7, pc}
   2ad6c:	0002ad71 	.word	0x0002ad71

0002ad70 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2ad70:	b580      	push	{r7, lr}
   2ad72:	b086      	sub	sp, #24
   2ad74:	af00      	add	r7, sp, #0
   2ad76:	0002      	movs	r2, r0
   2ad78:	1dfb      	adds	r3, r7, #7
   2ad7a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2ad7c:	1dfb      	adds	r3, r7, #7
   2ad7e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2ad80:	4b18      	ldr	r3, [pc, #96]	; (2ade4 <_tcc_interrupt_handler+0x74>)
   2ad82:	0092      	lsls	r2, r2, #2
   2ad84:	58d3      	ldr	r3, [r2, r3]
   2ad86:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2ad88:	693b      	ldr	r3, [r7, #16]
   2ad8a:	681b      	ldr	r3, [r3, #0]
   2ad8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2ad8e:	693b      	ldr	r3, [r7, #16]
   2ad90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2ad92:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2ad94:	693b      	ldr	r3, [r7, #16]
   2ad96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2ad98:	4013      	ands	r3, r2
   2ad9a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2ad9c:	2300      	movs	r3, #0
   2ad9e:	617b      	str	r3, [r7, #20]
   2ada0:	e019      	b.n	2add6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2ada2:	4b11      	ldr	r3, [pc, #68]	; (2ade8 <_tcc_interrupt_handler+0x78>)
   2ada4:	697a      	ldr	r2, [r7, #20]
   2ada6:	0092      	lsls	r2, r2, #2
   2ada8:	58d3      	ldr	r3, [r2, r3]
   2adaa:	68fa      	ldr	r2, [r7, #12]
   2adac:	4013      	ands	r3, r2
   2adae:	d00f      	beq.n	2add0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2adb0:	693a      	ldr	r2, [r7, #16]
   2adb2:	697b      	ldr	r3, [r7, #20]
   2adb4:	009b      	lsls	r3, r3, #2
   2adb6:	18d3      	adds	r3, r2, r3
   2adb8:	3304      	adds	r3, #4
   2adba:	681b      	ldr	r3, [r3, #0]
   2adbc:	693a      	ldr	r2, [r7, #16]
   2adbe:	0010      	movs	r0, r2
   2adc0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2adc2:	693b      	ldr	r3, [r7, #16]
   2adc4:	681b      	ldr	r3, [r3, #0]
   2adc6:	4a08      	ldr	r2, [pc, #32]	; (2ade8 <_tcc_interrupt_handler+0x78>)
   2adc8:	6979      	ldr	r1, [r7, #20]
   2adca:	0089      	lsls	r1, r1, #2
   2adcc:	588a      	ldr	r2, [r1, r2]
   2adce:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2add0:	697b      	ldr	r3, [r7, #20]
   2add2:	3301      	adds	r3, #1
   2add4:	617b      	str	r3, [r7, #20]
   2add6:	697b      	ldr	r3, [r7, #20]
   2add8:	2b0b      	cmp	r3, #11
   2adda:	dde2      	ble.n	2ada2 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2addc:	46c0      	nop			; (mov r8, r8)
   2adde:	46bd      	mov	sp, r7
   2ade0:	b006      	add	sp, #24
   2ade2:	bd80      	pop	{r7, pc}
   2ade4:	200057b0 	.word	0x200057b0
   2ade8:	000392fc 	.word	0x000392fc

0002adec <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2adec:	b580      	push	{r7, lr}
   2adee:	b082      	sub	sp, #8
   2adf0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2adf2:	4b2f      	ldr	r3, [pc, #188]	; (2aeb0 <Reset_Handler+0xc4>)
   2adf4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2adf6:	4b2f      	ldr	r3, [pc, #188]	; (2aeb4 <Reset_Handler+0xc8>)
   2adf8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2adfa:	687a      	ldr	r2, [r7, #4]
   2adfc:	683b      	ldr	r3, [r7, #0]
   2adfe:	429a      	cmp	r2, r3
   2ae00:	d00c      	beq.n	2ae1c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2ae02:	e007      	b.n	2ae14 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2ae04:	683b      	ldr	r3, [r7, #0]
   2ae06:	1d1a      	adds	r2, r3, #4
   2ae08:	603a      	str	r2, [r7, #0]
   2ae0a:	687a      	ldr	r2, [r7, #4]
   2ae0c:	1d11      	adds	r1, r2, #4
   2ae0e:	6079      	str	r1, [r7, #4]
   2ae10:	6812      	ldr	r2, [r2, #0]
   2ae12:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2ae14:	683a      	ldr	r2, [r7, #0]
   2ae16:	4b28      	ldr	r3, [pc, #160]	; (2aeb8 <Reset_Handler+0xcc>)
   2ae18:	429a      	cmp	r2, r3
   2ae1a:	d3f3      	bcc.n	2ae04 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2ae1c:	4b27      	ldr	r3, [pc, #156]	; (2aebc <Reset_Handler+0xd0>)
   2ae1e:	603b      	str	r3, [r7, #0]
   2ae20:	e004      	b.n	2ae2c <Reset_Handler+0x40>
                *pDest++ = 0;
   2ae22:	683b      	ldr	r3, [r7, #0]
   2ae24:	1d1a      	adds	r2, r3, #4
   2ae26:	603a      	str	r2, [r7, #0]
   2ae28:	2200      	movs	r2, #0
   2ae2a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2ae2c:	683a      	ldr	r2, [r7, #0]
   2ae2e:	4b24      	ldr	r3, [pc, #144]	; (2aec0 <Reset_Handler+0xd4>)
   2ae30:	429a      	cmp	r2, r3
   2ae32:	d3f6      	bcc.n	2ae22 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2ae34:	4b23      	ldr	r3, [pc, #140]	; (2aec4 <Reset_Handler+0xd8>)
   2ae36:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2ae38:	4b23      	ldr	r3, [pc, #140]	; (2aec8 <Reset_Handler+0xdc>)
   2ae3a:	687a      	ldr	r2, [r7, #4]
   2ae3c:	21ff      	movs	r1, #255	; 0xff
   2ae3e:	438a      	bics	r2, r1
   2ae40:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2ae42:	4a22      	ldr	r2, [pc, #136]	; (2aecc <Reset_Handler+0xe0>)
   2ae44:	2390      	movs	r3, #144	; 0x90
   2ae46:	005b      	lsls	r3, r3, #1
   2ae48:	2102      	movs	r1, #2
   2ae4a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2ae4c:	4a20      	ldr	r2, [pc, #128]	; (2aed0 <Reset_Handler+0xe4>)
   2ae4e:	78d3      	ldrb	r3, [r2, #3]
   2ae50:	2103      	movs	r1, #3
   2ae52:	438b      	bics	r3, r1
   2ae54:	1c19      	adds	r1, r3, #0
   2ae56:	2302      	movs	r3, #2
   2ae58:	430b      	orrs	r3, r1
   2ae5a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2ae5c:	4a1c      	ldr	r2, [pc, #112]	; (2aed0 <Reset_Handler+0xe4>)
   2ae5e:	78d3      	ldrb	r3, [r2, #3]
   2ae60:	210c      	movs	r1, #12
   2ae62:	438b      	bics	r3, r1
   2ae64:	1c19      	adds	r1, r3, #0
   2ae66:	2308      	movs	r3, #8
   2ae68:	430b      	orrs	r3, r1
   2ae6a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2ae6c:	4a19      	ldr	r2, [pc, #100]	; (2aed4 <Reset_Handler+0xe8>)
   2ae6e:	7b93      	ldrb	r3, [r2, #14]
   2ae70:	2130      	movs	r1, #48	; 0x30
   2ae72:	438b      	bics	r3, r1
   2ae74:	1c19      	adds	r1, r3, #0
   2ae76:	2320      	movs	r3, #32
   2ae78:	430b      	orrs	r3, r1
   2ae7a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2ae7c:	4a15      	ldr	r2, [pc, #84]	; (2aed4 <Reset_Handler+0xe8>)
   2ae7e:	7b93      	ldrb	r3, [r2, #14]
   2ae80:	210c      	movs	r1, #12
   2ae82:	438b      	bics	r3, r1
   2ae84:	1c19      	adds	r1, r3, #0
   2ae86:	2308      	movs	r3, #8
   2ae88:	430b      	orrs	r3, r1
   2ae8a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2ae8c:	4a11      	ldr	r2, [pc, #68]	; (2aed4 <Reset_Handler+0xe8>)
   2ae8e:	7b93      	ldrb	r3, [r2, #14]
   2ae90:	2103      	movs	r1, #3
   2ae92:	438b      	bics	r3, r1
   2ae94:	1c19      	adds	r1, r3, #0
   2ae96:	2302      	movs	r3, #2
   2ae98:	430b      	orrs	r3, r1
   2ae9a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2ae9c:	4a0e      	ldr	r2, [pc, #56]	; (2aed8 <Reset_Handler+0xec>)
   2ae9e:	6853      	ldr	r3, [r2, #4]
   2aea0:	2180      	movs	r1, #128	; 0x80
   2aea2:	430b      	orrs	r3, r1
   2aea4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2aea6:	4b0d      	ldr	r3, [pc, #52]	; (2aedc <Reset_Handler+0xf0>)
   2aea8:	4798      	blx	r3

        /* Branch to main function */
        main();
   2aeaa:	4b0d      	ldr	r3, [pc, #52]	; (2aee0 <Reset_Handler+0xf4>)
   2aeac:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2aeae:	e7fe      	b.n	2aeae <Reset_Handler+0xc2>
   2aeb0:	0003a0fc 	.word	0x0003a0fc
   2aeb4:	20000000 	.word	0x20000000
   2aeb8:	200002a4 	.word	0x200002a4
   2aebc:	200002b0 	.word	0x200002b0
   2aec0:	20005820 	.word	0x20005820
   2aec4:	00012000 	.word	0x00012000
   2aec8:	e000ed00 	.word	0xe000ed00
   2aecc:	41007000 	.word	0x41007000
   2aed0:	41005000 	.word	0x41005000
   2aed4:	41004800 	.word	0x41004800
   2aed8:	41004000 	.word	0x41004000
   2aedc:	000347f9 	.word	0x000347f9
   2aee0:	000325c9 	.word	0x000325c9

0002aee4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2aee4:	b580      	push	{r7, lr}
   2aee6:	af00      	add	r7, sp, #0
  __asm volatile (
   2aee8:	2004      	movs	r0, #4
   2aeea:	4671      	mov	r1, lr
   2aeec:	4208      	tst	r0, r1
   2aeee:	d002      	beq.n	2aef6 <_MSP>
   2aef0:	f3ef 8009 	mrs	r0, PSP
   2aef4:	e001      	b.n	2aefa <_HALT>

0002aef6 <_MSP>:
   2aef6:	f3ef 8008 	mrs	r0, MSP

0002aefa <_HALT>:
   2aefa:	6941      	ldr	r1, [r0, #20]
   2aefc:	e004      	b.n	2af08 <HardFault_HandlerC>
   2aefe:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2af00:	46c0      	nop			; (mov r8, r8)
   2af02:	46bd      	mov	sp, r7
   2af04:	bd80      	pop	{r7, pc}
	...

0002af08 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2af08:	b580      	push	{r7, lr}
   2af0a:	b090      	sub	sp, #64	; 0x40
   2af0c:	af00      	add	r7, sp, #0
   2af0e:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2af10:	687b      	ldr	r3, [r7, #4]
   2af12:	681b      	ldr	r3, [r3, #0]
   2af14:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2af16:	687b      	ldr	r3, [r7, #4]
   2af18:	685b      	ldr	r3, [r3, #4]
   2af1a:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2af1c:	687b      	ldr	r3, [r7, #4]
   2af1e:	689b      	ldr	r3, [r3, #8]
   2af20:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2af22:	687b      	ldr	r3, [r7, #4]
   2af24:	68db      	ldr	r3, [r3, #12]
   2af26:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2af28:	687b      	ldr	r3, [r7, #4]
   2af2a:	691b      	ldr	r3, [r3, #16]
   2af2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2af2e:	687b      	ldr	r3, [r7, #4]
   2af30:	695b      	ldr	r3, [r3, #20]
   2af32:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2af34:	687b      	ldr	r3, [r7, #4]
   2af36:	699b      	ldr	r3, [r3, #24]
   2af38:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2af3a:	687b      	ldr	r3, [r7, #4]
   2af3c:	69db      	ldr	r3, [r3, #28]
   2af3e:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2af40:	4b0b      	ldr	r3, [pc, #44]	; (2af70 <HardFault_HandlerC+0x68>)
   2af42:	681b      	ldr	r3, [r3, #0]
   2af44:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2af46:	4b0b      	ldr	r3, [pc, #44]	; (2af74 <HardFault_HandlerC+0x6c>)
   2af48:	681b      	ldr	r3, [r3, #0]
   2af4a:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2af4c:	4b0a      	ldr	r3, [pc, #40]	; (2af78 <HardFault_HandlerC+0x70>)
   2af4e:	681b      	ldr	r3, [r3, #0]
   2af50:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2af52:	4b0a      	ldr	r3, [pc, #40]	; (2af7c <HardFault_HandlerC+0x74>)
   2af54:	681b      	ldr	r3, [r3, #0]
   2af56:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2af58:	4b09      	ldr	r3, [pc, #36]	; (2af80 <HardFault_HandlerC+0x78>)
   2af5a:	681b      	ldr	r3, [r3, #0]
   2af5c:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2af5e:	4b09      	ldr	r3, [pc, #36]	; (2af84 <HardFault_HandlerC+0x7c>)
   2af60:	681b      	ldr	r3, [r3, #0]
   2af62:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2af64:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2af66:	46c0      	nop			; (mov r8, r8)
   2af68:	46bd      	mov	sp, r7
   2af6a:	b010      	add	sp, #64	; 0x40
   2af6c:	bd80      	pop	{r7, pc}
   2af6e:	46c0      	nop			; (mov r8, r8)
   2af70:	e000ed28 	.word	0xe000ed28
   2af74:	e000ed2c 	.word	0xe000ed2c
   2af78:	e000ed30 	.word	0xe000ed30
   2af7c:	e000ed3c 	.word	0xe000ed3c
   2af80:	e000ed34 	.word	0xe000ed34
   2af84:	e000ed38 	.word	0xe000ed38

0002af88 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2af88:	b580      	push	{r7, lr}
   2af8a:	b086      	sub	sp, #24
   2af8c:	af00      	add	r7, sp, #0
   2af8e:	60f8      	str	r0, [r7, #12]
   2af90:	60b9      	str	r1, [r7, #8]
   2af92:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2af94:	2300      	movs	r3, #0
   2af96:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2af98:	68fb      	ldr	r3, [r7, #12]
   2af9a:	2b00      	cmp	r3, #0
   2af9c:	d012      	beq.n	2afc4 <_read+0x3c>
		return -1;
   2af9e:	2301      	movs	r3, #1
   2afa0:	425b      	negs	r3, r3
   2afa2:	e013      	b.n	2afcc <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2afa4:	4b0b      	ldr	r3, [pc, #44]	; (2afd4 <_read+0x4c>)
   2afa6:	681a      	ldr	r2, [r3, #0]
   2afa8:	4b0b      	ldr	r3, [pc, #44]	; (2afd8 <_read+0x50>)
   2afaa:	681b      	ldr	r3, [r3, #0]
   2afac:	68b9      	ldr	r1, [r7, #8]
   2afae:	0018      	movs	r0, r3
   2afb0:	4790      	blx	r2
		ptr++;
   2afb2:	68bb      	ldr	r3, [r7, #8]
   2afb4:	3301      	adds	r3, #1
   2afb6:	60bb      	str	r3, [r7, #8]
		nChars++;
   2afb8:	697b      	ldr	r3, [r7, #20]
   2afba:	3301      	adds	r3, #1
   2afbc:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2afbe:	687b      	ldr	r3, [r7, #4]
   2afc0:	3b01      	subs	r3, #1
   2afc2:	607b      	str	r3, [r7, #4]
   2afc4:	687b      	ldr	r3, [r7, #4]
   2afc6:	2b00      	cmp	r3, #0
   2afc8:	dcec      	bgt.n	2afa4 <_read+0x1c>
	}
	return nChars;
   2afca:	697b      	ldr	r3, [r7, #20]
}
   2afcc:	0018      	movs	r0, r3
   2afce:	46bd      	mov	sp, r7
   2afd0:	b006      	add	sp, #24
   2afd2:	bd80      	pop	{r7, pc}
   2afd4:	200057bc 	.word	0x200057bc
   2afd8:	200057c4 	.word	0x200057c4

0002afdc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2afdc:	b580      	push	{r7, lr}
   2afde:	b086      	sub	sp, #24
   2afe0:	af00      	add	r7, sp, #0
   2afe2:	60f8      	str	r0, [r7, #12]
   2afe4:	60b9      	str	r1, [r7, #8]
   2afe6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2afe8:	2300      	movs	r3, #0
   2afea:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2afec:	68fb      	ldr	r3, [r7, #12]
   2afee:	2b01      	cmp	r3, #1
   2aff0:	d01d      	beq.n	2b02e <_write+0x52>
   2aff2:	68fb      	ldr	r3, [r7, #12]
   2aff4:	2b02      	cmp	r3, #2
   2aff6:	d01a      	beq.n	2b02e <_write+0x52>
   2aff8:	68fb      	ldr	r3, [r7, #12]
   2affa:	2b03      	cmp	r3, #3
   2affc:	d017      	beq.n	2b02e <_write+0x52>
		return -1;
   2affe:	2301      	movs	r3, #1
   2b000:	425b      	negs	r3, r3
   2b002:	e018      	b.n	2b036 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2b004:	4b0e      	ldr	r3, [pc, #56]	; (2b040 <_write+0x64>)
   2b006:	681a      	ldr	r2, [r3, #0]
   2b008:	4b0e      	ldr	r3, [pc, #56]	; (2b044 <_write+0x68>)
   2b00a:	6818      	ldr	r0, [r3, #0]
   2b00c:	68bb      	ldr	r3, [r7, #8]
   2b00e:	1c59      	adds	r1, r3, #1
   2b010:	60b9      	str	r1, [r7, #8]
   2b012:	781b      	ldrb	r3, [r3, #0]
   2b014:	0019      	movs	r1, r3
   2b016:	4790      	blx	r2
   2b018:	1e03      	subs	r3, r0, #0
   2b01a:	da02      	bge.n	2b022 <_write+0x46>
			return -1;
   2b01c:	2301      	movs	r3, #1
   2b01e:	425b      	negs	r3, r3
   2b020:	e009      	b.n	2b036 <_write+0x5a>
		}
		++nChars;
   2b022:	697b      	ldr	r3, [r7, #20]
   2b024:	3301      	adds	r3, #1
   2b026:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2b028:	687b      	ldr	r3, [r7, #4]
   2b02a:	3b01      	subs	r3, #1
   2b02c:	607b      	str	r3, [r7, #4]
   2b02e:	687b      	ldr	r3, [r7, #4]
   2b030:	2b00      	cmp	r3, #0
   2b032:	d1e7      	bne.n	2b004 <_write+0x28>
	}
	return nChars;
   2b034:	697b      	ldr	r3, [r7, #20]
}
   2b036:	0018      	movs	r0, r3
   2b038:	46bd      	mov	sp, r7
   2b03a:	b006      	add	sp, #24
   2b03c:	bd80      	pop	{r7, pc}
   2b03e:	46c0      	nop			; (mov r8, r8)
   2b040:	200057c0 	.word	0x200057c0
   2b044:	200057c4 	.word	0x200057c4

0002b048 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2b048:	b580      	push	{r7, lr}
   2b04a:	b084      	sub	sp, #16
   2b04c:	af00      	add	r7, sp, #0
   2b04e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2b050:	4b0a      	ldr	r3, [pc, #40]	; (2b07c <_sbrk+0x34>)
   2b052:	681b      	ldr	r3, [r3, #0]
   2b054:	2b00      	cmp	r3, #0
   2b056:	d102      	bne.n	2b05e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2b058:	4b08      	ldr	r3, [pc, #32]	; (2b07c <_sbrk+0x34>)
   2b05a:	4a09      	ldr	r2, [pc, #36]	; (2b080 <_sbrk+0x38>)
   2b05c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2b05e:	4b07      	ldr	r3, [pc, #28]	; (2b07c <_sbrk+0x34>)
   2b060:	681b      	ldr	r3, [r3, #0]
   2b062:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2b064:	4b05      	ldr	r3, [pc, #20]	; (2b07c <_sbrk+0x34>)
   2b066:	681a      	ldr	r2, [r3, #0]
   2b068:	687b      	ldr	r3, [r7, #4]
   2b06a:	18d2      	adds	r2, r2, r3
   2b06c:	4b03      	ldr	r3, [pc, #12]	; (2b07c <_sbrk+0x34>)
   2b06e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2b070:	68fb      	ldr	r3, [r7, #12]
}
   2b072:	0018      	movs	r0, r3
   2b074:	46bd      	mov	sp, r7
   2b076:	b004      	add	sp, #16
   2b078:	bd80      	pop	{r7, pc}
   2b07a:	46c0      	nop			; (mov r8, r8)
   2b07c:	20003ee0 	.word	0x20003ee0
   2b080:	20007820 	.word	0x20007820

0002b084 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2b084:	b580      	push	{r7, lr}
   2b086:	b082      	sub	sp, #8
   2b088:	af00      	add	r7, sp, #0
   2b08a:	6078      	str	r0, [r7, #4]
	return -1;
   2b08c:	2301      	movs	r3, #1
   2b08e:	425b      	negs	r3, r3
}
   2b090:	0018      	movs	r0, r3
   2b092:	46bd      	mov	sp, r7
   2b094:	b002      	add	sp, #8
   2b096:	bd80      	pop	{r7, pc}

0002b098 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2b098:	b580      	push	{r7, lr}
   2b09a:	b082      	sub	sp, #8
   2b09c:	af00      	add	r7, sp, #0
   2b09e:	6078      	str	r0, [r7, #4]
   2b0a0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2b0a2:	683b      	ldr	r3, [r7, #0]
   2b0a4:	2280      	movs	r2, #128	; 0x80
   2b0a6:	0192      	lsls	r2, r2, #6
   2b0a8:	605a      	str	r2, [r3, #4]

	return 0;
   2b0aa:	2300      	movs	r3, #0
}
   2b0ac:	0018      	movs	r0, r3
   2b0ae:	46bd      	mov	sp, r7
   2b0b0:	b002      	add	sp, #8
   2b0b2:	bd80      	pop	{r7, pc}

0002b0b4 <_isatty>:

extern int _isatty(int file)
{
   2b0b4:	b580      	push	{r7, lr}
   2b0b6:	b082      	sub	sp, #8
   2b0b8:	af00      	add	r7, sp, #0
   2b0ba:	6078      	str	r0, [r7, #4]
	return 1;
   2b0bc:	2301      	movs	r3, #1
}
   2b0be:	0018      	movs	r0, r3
   2b0c0:	46bd      	mov	sp, r7
   2b0c2:	b002      	add	sp, #8
   2b0c4:	bd80      	pop	{r7, pc}

0002b0c6 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2b0c6:	b580      	push	{r7, lr}
   2b0c8:	b084      	sub	sp, #16
   2b0ca:	af00      	add	r7, sp, #0
   2b0cc:	60f8      	str	r0, [r7, #12]
   2b0ce:	60b9      	str	r1, [r7, #8]
   2b0d0:	607a      	str	r2, [r7, #4]
	return 0;
   2b0d2:	2300      	movs	r3, #0
}
   2b0d4:	0018      	movs	r0, r3
   2b0d6:	46bd      	mov	sp, r7
   2b0d8:	b004      	add	sp, #16
   2b0da:	bd80      	pop	{r7, pc}

0002b0dc <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2b0dc:	b580      	push	{r7, lr}
   2b0de:	b082      	sub	sp, #8
   2b0e0:	af00      	add	r7, sp, #0
   2b0e2:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2b0e4:	687b      	ldr	r3, [r7, #4]
   2b0e6:	2200      	movs	r2, #0
   2b0e8:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2b0ea:	687b      	ldr	r3, [r7, #4]
   2b0ec:	2200      	movs	r2, #0
   2b0ee:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2b0f0:	687b      	ldr	r3, [r7, #4]
   2b0f2:	2200      	movs	r2, #0
   2b0f4:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2b0f6:	687b      	ldr	r3, [r7, #4]
   2b0f8:	2200      	movs	r2, #0
   2b0fa:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2b0fc:	687b      	ldr	r3, [r7, #4]
   2b0fe:	2201      	movs	r2, #1
   2b100:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2b102:	687b      	ldr	r3, [r7, #4]
   2b104:	2201      	movs	r2, #1
   2b106:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2b108:	687b      	ldr	r3, [r7, #4]
   2b10a:	22fa      	movs	r2, #250	; 0xfa
   2b10c:	00d2      	lsls	r2, r2, #3
   2b10e:	80da      	strh	r2, [r3, #6]
}
   2b110:	46c0      	nop			; (mov r8, r8)
   2b112:	46bd      	mov	sp, r7
   2b114:	b002      	add	sp, #8
   2b116:	bd80      	pop	{r7, pc}

0002b118 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2b118:	b580      	push	{r7, lr}
   2b11a:	b086      	sub	sp, #24
   2b11c:	af00      	add	r7, sp, #0
   2b11e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2b120:	230c      	movs	r3, #12
   2b122:	18fb      	adds	r3, r7, r3
   2b124:	0018      	movs	r0, r3
   2b126:	4b23      	ldr	r3, [pc, #140]	; (2b1b4 <rtc_calendar_get_config_defaults+0x9c>)
   2b128:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2b12a:	687b      	ldr	r3, [r7, #4]
   2b12c:	22a0      	movs	r2, #160	; 0xa0
   2b12e:	0112      	lsls	r2, r2, #4
   2b130:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2b132:	687b      	ldr	r3, [r7, #4]
   2b134:	2200      	movs	r2, #0
   2b136:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2b138:	687b      	ldr	r3, [r7, #4]
   2b13a:	2200      	movs	r2, #0
   2b13c:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2b13e:	687b      	ldr	r3, [r7, #4]
   2b140:	2200      	movs	r2, #0
   2b142:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2b144:	687b      	ldr	r3, [r7, #4]
   2b146:	22fa      	movs	r2, #250	; 0xfa
   2b148:	00d2      	lsls	r2, r2, #3
   2b14a:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2b14c:	2317      	movs	r3, #23
   2b14e:	18fb      	adds	r3, r7, r3
   2b150:	2200      	movs	r2, #0
   2b152:	701a      	strb	r2, [r3, #0]
   2b154:	e025      	b.n	2b1a2 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2b156:	2317      	movs	r3, #23
   2b158:	18fb      	adds	r3, r7, r3
   2b15a:	781a      	ldrb	r2, [r3, #0]
   2b15c:	6879      	ldr	r1, [r7, #4]
   2b15e:	2008      	movs	r0, #8
   2b160:	0013      	movs	r3, r2
   2b162:	009b      	lsls	r3, r3, #2
   2b164:	189b      	adds	r3, r3, r2
   2b166:	005b      	lsls	r3, r3, #1
   2b168:	18cb      	adds	r3, r1, r3
   2b16a:	181a      	adds	r2, r3, r0
   2b16c:	230c      	movs	r3, #12
   2b16e:	18fb      	adds	r3, r7, r3
   2b170:	0010      	movs	r0, r2
   2b172:	0019      	movs	r1, r3
   2b174:	2308      	movs	r3, #8
   2b176:	001a      	movs	r2, r3
   2b178:	4b0f      	ldr	r3, [pc, #60]	; (2b1b8 <rtc_calendar_get_config_defaults+0xa0>)
   2b17a:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2b17c:	2317      	movs	r3, #23
   2b17e:	18fb      	adds	r3, r7, r3
   2b180:	781a      	ldrb	r2, [r3, #0]
   2b182:	6879      	ldr	r1, [r7, #4]
   2b184:	0013      	movs	r3, r2
   2b186:	009b      	lsls	r3, r3, #2
   2b188:	189b      	adds	r3, r3, r2
   2b18a:	005b      	lsls	r3, r3, #1
   2b18c:	18cb      	adds	r3, r1, r3
   2b18e:	3310      	adds	r3, #16
   2b190:	2206      	movs	r2, #6
   2b192:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2b194:	2317      	movs	r3, #23
   2b196:	18fb      	adds	r3, r7, r3
   2b198:	781a      	ldrb	r2, [r3, #0]
   2b19a:	2317      	movs	r3, #23
   2b19c:	18fb      	adds	r3, r7, r3
   2b19e:	3201      	adds	r2, #1
   2b1a0:	701a      	strb	r2, [r3, #0]
   2b1a2:	2317      	movs	r3, #23
   2b1a4:	18fb      	adds	r3, r7, r3
   2b1a6:	781b      	ldrb	r3, [r3, #0]
   2b1a8:	2b00      	cmp	r3, #0
   2b1aa:	d0d4      	beq.n	2b156 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2b1ac:	46c0      	nop			; (mov r8, r8)
   2b1ae:	46bd      	mov	sp, r7
   2b1b0:	b006      	add	sp, #24
   2b1b2:	bd80      	pop	{r7, pc}
   2b1b4:	0002b0dd 	.word	0x0002b0dd
   2b1b8:	00034869 	.word	0x00034869

0002b1bc <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2b1bc:	b580      	push	{r7, lr}
   2b1be:	b088      	sub	sp, #32
   2b1c0:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2b1c2:	230c      	movs	r3, #12
   2b1c4:	18fb      	adds	r3, r7, r3
   2b1c6:	0018      	movs	r0, r3
   2b1c8:	4b1a      	ldr	r3, [pc, #104]	; (2b234 <configure_rtc_calendar+0x78>)
   2b1ca:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2b1cc:	1d3b      	adds	r3, r7, #4
   2b1ce:	0018      	movs	r0, r3
   2b1d0:	4b19      	ldr	r3, [pc, #100]	; (2b238 <configure_rtc_calendar+0x7c>)
   2b1d2:	4798      	blx	r3
	init_time.year   = 2014;
   2b1d4:	1d3b      	adds	r3, r7, #4
   2b1d6:	4a19      	ldr	r2, [pc, #100]	; (2b23c <configure_rtc_calendar+0x80>)
   2b1d8:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2b1da:	1d3b      	adds	r3, r7, #4
   2b1dc:	2201      	movs	r2, #1
   2b1de:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2b1e0:	1d3b      	adds	r3, r7, #4
   2b1e2:	2201      	movs	r2, #1
   2b1e4:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2b1e6:	1d3b      	adds	r3, r7, #4
   2b1e8:	2200      	movs	r2, #0
   2b1ea:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2b1ec:	1d3b      	adds	r3, r7, #4
   2b1ee:	2200      	movs	r2, #0
   2b1f0:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2b1f2:	1d3b      	adds	r3, r7, #4
   2b1f4:	2204      	movs	r2, #4
   2b1f6:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2b1f8:	230c      	movs	r3, #12
   2b1fa:	18fb      	adds	r3, r7, r3
   2b1fc:	2201      	movs	r2, #1
   2b1fe:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2b200:	230c      	movs	r3, #12
   2b202:	18fb      	adds	r3, r7, r3
   2b204:	1d3a      	adds	r2, r7, #4
   2b206:	3308      	adds	r3, #8
   2b208:	ca03      	ldmia	r2!, {r0, r1}
   2b20a:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2b20c:	230c      	movs	r3, #12
   2b20e:	18fb      	adds	r3, r7, r3
   2b210:	2206      	movs	r2, #6
   2b212:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2b214:	230c      	movs	r3, #12
   2b216:	18fa      	adds	r2, r7, r3
   2b218:	4909      	ldr	r1, [pc, #36]	; (2b240 <configure_rtc_calendar+0x84>)
   2b21a:	4b0a      	ldr	r3, [pc, #40]	; (2b244 <configure_rtc_calendar+0x88>)
   2b21c:	0018      	movs	r0, r3
   2b21e:	4b0a      	ldr	r3, [pc, #40]	; (2b248 <configure_rtc_calendar+0x8c>)
   2b220:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2b222:	4b08      	ldr	r3, [pc, #32]	; (2b244 <configure_rtc_calendar+0x88>)
   2b224:	0018      	movs	r0, r3
   2b226:	4b09      	ldr	r3, [pc, #36]	; (2b24c <configure_rtc_calendar+0x90>)
   2b228:	4798      	blx	r3
}
   2b22a:	46c0      	nop			; (mov r8, r8)
   2b22c:	46bd      	mov	sp, r7
   2b22e:	b008      	add	sp, #32
   2b230:	bd80      	pop	{r7, pc}
   2b232:	46c0      	nop			; (mov r8, r8)
   2b234:	0002b119 	.word	0x0002b119
   2b238:	0002b0dd 	.word	0x0002b0dd
   2b23c:	000007de 	.word	0x000007de
   2b240:	40001400 	.word	0x40001400
   2b244:	200057c8 	.word	0x200057c8
   2b248:	00026cf9 	.word	0x00026cf9
   2b24c:	00026a25 	.word	0x00026a25

0002b250 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2b250:	b590      	push	{r4, r7, lr}
   2b252:	b085      	sub	sp, #20
   2b254:	af00      	add	r7, sp, #0
   2b256:	0002      	movs	r2, r0
   2b258:	1dfb      	adds	r3, r7, #7
   2b25a:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2b25c:	4b1a      	ldr	r3, [pc, #104]	; (2b2c8 <disk_initialize+0x78>)
   2b25e:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2b260:	1dfb      	adds	r3, r7, #7
   2b262:	781b      	ldrb	r3, [r3, #0]
   2b264:	2b01      	cmp	r3, #1
   2b266:	d901      	bls.n	2b26c <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2b268:	2301      	movs	r3, #1
   2b26a:	e029      	b.n	2b2c0 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2b26c:	2300      	movs	r3, #0
   2b26e:	60fb      	str	r3, [r7, #12]
   2b270:	e010      	b.n	2b294 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2b272:	230b      	movs	r3, #11
   2b274:	18fc      	adds	r4, r7, r3
   2b276:	1dfb      	adds	r3, r7, #7
   2b278:	781b      	ldrb	r3, [r3, #0]
   2b27a:	0018      	movs	r0, r3
   2b27c:	4b13      	ldr	r3, [pc, #76]	; (2b2cc <disk_initialize+0x7c>)
   2b27e:	4798      	blx	r3
   2b280:	0003      	movs	r3, r0
   2b282:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2b284:	230b      	movs	r3, #11
   2b286:	18fb      	adds	r3, r7, r3
   2b288:	781b      	ldrb	r3, [r3, #0]
   2b28a:	2b03      	cmp	r3, #3
   2b28c:	d106      	bne.n	2b29c <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2b28e:	68fb      	ldr	r3, [r7, #12]
   2b290:	3301      	adds	r3, #1
   2b292:	60fb      	str	r3, [r7, #12]
   2b294:	68fb      	ldr	r3, [r7, #12]
   2b296:	2b01      	cmp	r3, #1
   2b298:	ddeb      	ble.n	2b272 <disk_initialize+0x22>
   2b29a:	e000      	b.n	2b29e <disk_initialize+0x4e>
			break;
   2b29c:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2b29e:	230b      	movs	r3, #11
   2b2a0:	18fb      	adds	r3, r7, r3
   2b2a2:	781b      	ldrb	r3, [r3, #0]
   2b2a4:	2b00      	cmp	r3, #0
   2b2a6:	d001      	beq.n	2b2ac <disk_initialize+0x5c>
		return STA_NOINIT;
   2b2a8:	2301      	movs	r3, #1
   2b2aa:	e009      	b.n	2b2c0 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2b2ac:	1dfb      	adds	r3, r7, #7
   2b2ae:	781b      	ldrb	r3, [r3, #0]
   2b2b0:	0018      	movs	r0, r3
   2b2b2:	4b07      	ldr	r3, [pc, #28]	; (2b2d0 <disk_initialize+0x80>)
   2b2b4:	4798      	blx	r3
   2b2b6:	1e03      	subs	r3, r0, #0
   2b2b8:	d001      	beq.n	2b2be <disk_initialize+0x6e>
		return STA_PROTECT;
   2b2ba:	2304      	movs	r3, #4
   2b2bc:	e000      	b.n	2b2c0 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2b2be:	2300      	movs	r3, #0
}
   2b2c0:	0018      	movs	r0, r3
   2b2c2:	46bd      	mov	sp, r7
   2b2c4:	b005      	add	sp, #20
   2b2c6:	bd90      	pop	{r4, r7, pc}
   2b2c8:	0002b1bd 	.word	0x0002b1bd
   2b2cc:	00025f21 	.word	0x00025f21
   2b2d0:	00025fd9 	.word	0x00025fd9

0002b2d4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2b2d4:	b580      	push	{r7, lr}
   2b2d6:	b082      	sub	sp, #8
   2b2d8:	af00      	add	r7, sp, #0
   2b2da:	0002      	movs	r2, r0
   2b2dc:	1dfb      	adds	r3, r7, #7
   2b2de:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2b2e0:	1dfb      	adds	r3, r7, #7
   2b2e2:	781b      	ldrb	r3, [r3, #0]
   2b2e4:	0018      	movs	r0, r3
   2b2e6:	4b08      	ldr	r3, [pc, #32]	; (2b308 <disk_status+0x34>)
   2b2e8:	4798      	blx	r3
   2b2ea:	1e03      	subs	r3, r0, #0
   2b2ec:	d002      	beq.n	2b2f4 <disk_status+0x20>
   2b2ee:	2b02      	cmp	r3, #2
   2b2f0:	d002      	beq.n	2b2f8 <disk_status+0x24>
   2b2f2:	e003      	b.n	2b2fc <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2b2f4:	2300      	movs	r3, #0
   2b2f6:	e002      	b.n	2b2fe <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2b2f8:	2303      	movs	r3, #3
   2b2fa:	e000      	b.n	2b2fe <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2b2fc:	2301      	movs	r3, #1
	}
}
   2b2fe:	0018      	movs	r0, r3
   2b300:	46bd      	mov	sp, r7
   2b302:	b002      	add	sp, #8
   2b304:	bd80      	pop	{r7, pc}
   2b306:	46c0      	nop			; (mov r8, r8)
   2b308:	00025f21 	.word	0x00025f21

0002b30c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2b30c:	b590      	push	{r4, r7, lr}
   2b30e:	b089      	sub	sp, #36	; 0x24
   2b310:	af00      	add	r7, sp, #0
   2b312:	60b9      	str	r1, [r7, #8]
   2b314:	607a      	str	r2, [r7, #4]
   2b316:	0019      	movs	r1, r3
   2b318:	230f      	movs	r3, #15
   2b31a:	18fb      	adds	r3, r7, r3
   2b31c:	1c02      	adds	r2, r0, #0
   2b31e:	701a      	strb	r2, [r3, #0]
   2b320:	230e      	movs	r3, #14
   2b322:	18fb      	adds	r3, r7, r3
   2b324:	1c0a      	adds	r2, r1, #0
   2b326:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2b328:	231b      	movs	r3, #27
   2b32a:	18fc      	adds	r4, r7, r3
   2b32c:	230f      	movs	r3, #15
   2b32e:	18fb      	adds	r3, r7, r3
   2b330:	781b      	ldrb	r3, [r3, #0]
   2b332:	0018      	movs	r0, r3
   2b334:	4b28      	ldr	r3, [pc, #160]	; (2b3d8 <disk_read+0xcc>)
   2b336:	4798      	blx	r3
   2b338:	0003      	movs	r3, r0
   2b33a:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2b33c:	231b      	movs	r3, #27
   2b33e:	18fb      	adds	r3, r7, r3
   2b340:	781b      	ldrb	r3, [r3, #0]
   2b342:	2b00      	cmp	r3, #0
   2b344:	d101      	bne.n	2b34a <disk_read+0x3e>
		return RES_ERROR;
   2b346:	2301      	movs	r3, #1
   2b348:	e042      	b.n	2b3d0 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2b34a:	2314      	movs	r3, #20
   2b34c:	18fa      	adds	r2, r7, r3
   2b34e:	230f      	movs	r3, #15
   2b350:	18fb      	adds	r3, r7, r3
   2b352:	781b      	ldrb	r3, [r3, #0]
   2b354:	0011      	movs	r1, r2
   2b356:	0018      	movs	r0, r3
   2b358:	4b20      	ldr	r3, [pc, #128]	; (2b3dc <disk_read+0xd0>)
   2b35a:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2b35c:	230e      	movs	r3, #14
   2b35e:	18fb      	adds	r3, r7, r3
   2b360:	781b      	ldrb	r3, [r3, #0]
   2b362:	221b      	movs	r2, #27
   2b364:	18ba      	adds	r2, r7, r2
   2b366:	7812      	ldrb	r2, [r2, #0]
   2b368:	4353      	muls	r3, r2
   2b36a:	001a      	movs	r2, r3
   2b36c:	687b      	ldr	r3, [r7, #4]
   2b36e:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2b370:	697b      	ldr	r3, [r7, #20]
   2b372:	3301      	adds	r3, #1
   2b374:	211b      	movs	r1, #27
   2b376:	1879      	adds	r1, r7, r1
   2b378:	7809      	ldrb	r1, [r1, #0]
   2b37a:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2b37c:	429a      	cmp	r2, r3
   2b37e:	d901      	bls.n	2b384 <disk_read+0x78>
		return RES_PARERR;
   2b380:	2304      	movs	r3, #4
   2b382:	e025      	b.n	2b3d0 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2b384:	2300      	movs	r3, #0
   2b386:	61fb      	str	r3, [r7, #28]
   2b388:	e01b      	b.n	2b3c2 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2b38a:	231b      	movs	r3, #27
   2b38c:	18fb      	adds	r3, r7, r3
   2b38e:	781b      	ldrb	r3, [r3, #0]
   2b390:	69fa      	ldr	r2, [r7, #28]
   2b392:	435a      	muls	r2, r3
   2b394:	687b      	ldr	r3, [r7, #4]
   2b396:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2b398:	231b      	movs	r3, #27
   2b39a:	18fb      	adds	r3, r7, r3
   2b39c:	781b      	ldrb	r3, [r3, #0]
   2b39e:	69fa      	ldr	r2, [r7, #28]
   2b3a0:	4353      	muls	r3, r2
   2b3a2:	025b      	lsls	r3, r3, #9
   2b3a4:	68ba      	ldr	r2, [r7, #8]
   2b3a6:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2b3a8:	230f      	movs	r3, #15
   2b3aa:	18fb      	adds	r3, r7, r3
   2b3ac:	781b      	ldrb	r3, [r3, #0]
   2b3ae:	0018      	movs	r0, r3
   2b3b0:	4b0b      	ldr	r3, [pc, #44]	; (2b3e0 <disk_read+0xd4>)
   2b3b2:	4798      	blx	r3
   2b3b4:	1e03      	subs	r3, r0, #0
   2b3b6:	d001      	beq.n	2b3bc <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2b3b8:	2301      	movs	r3, #1
   2b3ba:	e009      	b.n	2b3d0 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2b3bc:	69fb      	ldr	r3, [r7, #28]
   2b3be:	3301      	adds	r3, #1
   2b3c0:	61fb      	str	r3, [r7, #28]
   2b3c2:	230e      	movs	r3, #14
   2b3c4:	18fb      	adds	r3, r7, r3
   2b3c6:	781a      	ldrb	r2, [r3, #0]
   2b3c8:	69fb      	ldr	r3, [r7, #28]
   2b3ca:	429a      	cmp	r2, r3
   2b3cc:	d8dd      	bhi.n	2b38a <disk_read+0x7e>
		}
	}

	return RES_OK;
   2b3ce:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2b3d0:	0018      	movs	r0, r3
   2b3d2:	46bd      	mov	sp, r7
   2b3d4:	b009      	add	sp, #36	; 0x24
   2b3d6:	bd90      	pop	{r4, r7, pc}
   2b3d8:	00025fad 	.word	0x00025fad
   2b3dc:	00025f61 	.word	0x00025f61
   2b3e0:	00026021 	.word	0x00026021

0002b3e4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2b3e4:	b590      	push	{r4, r7, lr}
   2b3e6:	b089      	sub	sp, #36	; 0x24
   2b3e8:	af00      	add	r7, sp, #0
   2b3ea:	60b9      	str	r1, [r7, #8]
   2b3ec:	607a      	str	r2, [r7, #4]
   2b3ee:	0019      	movs	r1, r3
   2b3f0:	230f      	movs	r3, #15
   2b3f2:	18fb      	adds	r3, r7, r3
   2b3f4:	1c02      	adds	r2, r0, #0
   2b3f6:	701a      	strb	r2, [r3, #0]
   2b3f8:	230e      	movs	r3, #14
   2b3fa:	18fb      	adds	r3, r7, r3
   2b3fc:	1c0a      	adds	r2, r1, #0
   2b3fe:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2b400:	231b      	movs	r3, #27
   2b402:	18fc      	adds	r4, r7, r3
   2b404:	230f      	movs	r3, #15
   2b406:	18fb      	adds	r3, r7, r3
   2b408:	781b      	ldrb	r3, [r3, #0]
   2b40a:	0018      	movs	r0, r3
   2b40c:	4b28      	ldr	r3, [pc, #160]	; (2b4b0 <disk_write+0xcc>)
   2b40e:	4798      	blx	r3
   2b410:	0003      	movs	r3, r0
   2b412:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2b414:	231b      	movs	r3, #27
   2b416:	18fb      	adds	r3, r7, r3
   2b418:	781b      	ldrb	r3, [r3, #0]
   2b41a:	2b00      	cmp	r3, #0
   2b41c:	d101      	bne.n	2b422 <disk_write+0x3e>
		return RES_ERROR;
   2b41e:	2301      	movs	r3, #1
   2b420:	e042      	b.n	2b4a8 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2b422:	2314      	movs	r3, #20
   2b424:	18fa      	adds	r2, r7, r3
   2b426:	230f      	movs	r3, #15
   2b428:	18fb      	adds	r3, r7, r3
   2b42a:	781b      	ldrb	r3, [r3, #0]
   2b42c:	0011      	movs	r1, r2
   2b42e:	0018      	movs	r0, r3
   2b430:	4b20      	ldr	r3, [pc, #128]	; (2b4b4 <disk_write+0xd0>)
   2b432:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2b434:	230e      	movs	r3, #14
   2b436:	18fb      	adds	r3, r7, r3
   2b438:	781b      	ldrb	r3, [r3, #0]
   2b43a:	221b      	movs	r2, #27
   2b43c:	18ba      	adds	r2, r7, r2
   2b43e:	7812      	ldrb	r2, [r2, #0]
   2b440:	4353      	muls	r3, r2
   2b442:	001a      	movs	r2, r3
   2b444:	687b      	ldr	r3, [r7, #4]
   2b446:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2b448:	697b      	ldr	r3, [r7, #20]
   2b44a:	3301      	adds	r3, #1
   2b44c:	211b      	movs	r1, #27
   2b44e:	1879      	adds	r1, r7, r1
   2b450:	7809      	ldrb	r1, [r1, #0]
   2b452:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2b454:	429a      	cmp	r2, r3
   2b456:	d901      	bls.n	2b45c <disk_write+0x78>
		return RES_PARERR;
   2b458:	2304      	movs	r3, #4
   2b45a:	e025      	b.n	2b4a8 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2b45c:	2300      	movs	r3, #0
   2b45e:	61fb      	str	r3, [r7, #28]
   2b460:	e01b      	b.n	2b49a <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2b462:	231b      	movs	r3, #27
   2b464:	18fb      	adds	r3, r7, r3
   2b466:	781b      	ldrb	r3, [r3, #0]
   2b468:	69fa      	ldr	r2, [r7, #28]
   2b46a:	435a      	muls	r2, r3
   2b46c:	687b      	ldr	r3, [r7, #4]
   2b46e:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2b470:	231b      	movs	r3, #27
   2b472:	18fb      	adds	r3, r7, r3
   2b474:	781b      	ldrb	r3, [r3, #0]
   2b476:	69fa      	ldr	r2, [r7, #28]
   2b478:	4353      	muls	r3, r2
   2b47a:	025b      	lsls	r3, r3, #9
   2b47c:	68ba      	ldr	r2, [r7, #8]
   2b47e:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2b480:	230f      	movs	r3, #15
   2b482:	18fb      	adds	r3, r7, r3
   2b484:	781b      	ldrb	r3, [r3, #0]
   2b486:	0018      	movs	r0, r3
   2b488:	4b0b      	ldr	r3, [pc, #44]	; (2b4b8 <disk_write+0xd4>)
   2b48a:	4798      	blx	r3
   2b48c:	1e03      	subs	r3, r0, #0
   2b48e:	d001      	beq.n	2b494 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2b490:	2301      	movs	r3, #1
   2b492:	e009      	b.n	2b4a8 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2b494:	69fb      	ldr	r3, [r7, #28]
   2b496:	3301      	adds	r3, #1
   2b498:	61fb      	str	r3, [r7, #28]
   2b49a:	230e      	movs	r3, #14
   2b49c:	18fb      	adds	r3, r7, r3
   2b49e:	781a      	ldrb	r2, [r3, #0]
   2b4a0:	69fb      	ldr	r3, [r7, #28]
   2b4a2:	429a      	cmp	r2, r3
   2b4a4:	d8dd      	bhi.n	2b462 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2b4a6:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2b4a8:	0018      	movs	r0, r3
   2b4aa:	46bd      	mov	sp, r7
   2b4ac:	b009      	add	sp, #36	; 0x24
   2b4ae:	bd90      	pop	{r4, r7, pc}
   2b4b0:	00025fad 	.word	0x00025fad
   2b4b4:	00025f61 	.word	0x00025f61
   2b4b8:	00026075 	.word	0x00026075

0002b4bc <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2b4bc:	b590      	push	{r4, r7, lr}
   2b4be:	b085      	sub	sp, #20
   2b4c0:	af00      	add	r7, sp, #0
   2b4c2:	603a      	str	r2, [r7, #0]
   2b4c4:	1dfb      	adds	r3, r7, #7
   2b4c6:	1c02      	adds	r2, r0, #0
   2b4c8:	701a      	strb	r2, [r3, #0]
   2b4ca:	1dbb      	adds	r3, r7, #6
   2b4cc:	1c0a      	adds	r2, r1, #0
   2b4ce:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2b4d0:	230f      	movs	r3, #15
   2b4d2:	18fb      	adds	r3, r7, r3
   2b4d4:	2204      	movs	r2, #4
   2b4d6:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2b4d8:	1dbb      	adds	r3, r7, #6
   2b4da:	781b      	ldrb	r3, [r3, #0]
   2b4dc:	2b01      	cmp	r3, #1
   2b4de:	d00f      	beq.n	2b500 <disk_ioctl+0x44>
   2b4e0:	dc02      	bgt.n	2b4e8 <disk_ioctl+0x2c>
   2b4e2:	2b00      	cmp	r3, #0
   2b4e4:	d044      	beq.n	2b570 <disk_ioctl+0xb4>
   2b4e6:	e054      	b.n	2b592 <disk_ioctl+0xd6>
   2b4e8:	2b02      	cmp	r3, #2
   2b4ea:	d01a      	beq.n	2b522 <disk_ioctl+0x66>
   2b4ec:	2b03      	cmp	r3, #3
   2b4ee:	d150      	bne.n	2b592 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2b4f0:	683b      	ldr	r3, [r7, #0]
   2b4f2:	2201      	movs	r2, #1
   2b4f4:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2b4f6:	230f      	movs	r3, #15
   2b4f8:	18fb      	adds	r3, r7, r3
   2b4fa:	2200      	movs	r2, #0
   2b4fc:	701a      	strb	r2, [r3, #0]
		break;
   2b4fe:	e04c      	b.n	2b59a <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2b500:	2308      	movs	r3, #8
   2b502:	18fa      	adds	r2, r7, r3
   2b504:	1dfb      	adds	r3, r7, #7
   2b506:	781b      	ldrb	r3, [r3, #0]
   2b508:	0011      	movs	r1, r2
   2b50a:	0018      	movs	r0, r3
   2b50c:	4b26      	ldr	r3, [pc, #152]	; (2b5a8 <disk_ioctl+0xec>)
   2b50e:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2b510:	68bb      	ldr	r3, [r7, #8]
   2b512:	1c5a      	adds	r2, r3, #1
   2b514:	683b      	ldr	r3, [r7, #0]
   2b516:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2b518:	230f      	movs	r3, #15
   2b51a:	18fb      	adds	r3, r7, r3
   2b51c:	2200      	movs	r2, #0
   2b51e:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b520:	e03b      	b.n	2b59a <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2b522:	230e      	movs	r3, #14
   2b524:	18fc      	adds	r4, r7, r3
   2b526:	1dfb      	adds	r3, r7, #7
   2b528:	781b      	ldrb	r3, [r3, #0]
   2b52a:	0018      	movs	r0, r3
   2b52c:	4b1f      	ldr	r3, [pc, #124]	; (2b5ac <disk_ioctl+0xf0>)
   2b52e:	4798      	blx	r3
   2b530:	0003      	movs	r3, r0
   2b532:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2b534:	230e      	movs	r3, #14
   2b536:	18fb      	adds	r3, r7, r3
   2b538:	781b      	ldrb	r3, [r3, #0]
   2b53a:	2b01      	cmp	r3, #1
   2b53c:	d010      	beq.n	2b560 <disk_ioctl+0xa4>
   2b53e:	230e      	movs	r3, #14
   2b540:	18fb      	adds	r3, r7, r3
   2b542:	781b      	ldrb	r3, [r3, #0]
   2b544:	2b02      	cmp	r3, #2
   2b546:	d00b      	beq.n	2b560 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2b548:	230e      	movs	r3, #14
   2b54a:	18fb      	adds	r3, r7, r3
   2b54c:	781b      	ldrb	r3, [r3, #0]
   2b54e:	2b04      	cmp	r3, #4
   2b550:	d006      	beq.n	2b560 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2b552:	230e      	movs	r3, #14
   2b554:	18fb      	adds	r3, r7, r3
   2b556:	781b      	ldrb	r3, [r3, #0]
   2b558:	2b08      	cmp	r3, #8
   2b55a:	d001      	beq.n	2b560 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2b55c:	2301      	movs	r3, #1
   2b55e:	e01f      	b.n	2b5a0 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2b560:	683b      	ldr	r3, [r7, #0]
   2b562:	2200      	movs	r2, #0
   2b564:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2b566:	230f      	movs	r3, #15
   2b568:	18fb      	adds	r3, r7, r3
   2b56a:	2200      	movs	r2, #0
   2b56c:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b56e:	e014      	b.n	2b59a <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2b570:	1dfb      	adds	r3, r7, #7
   2b572:	781b      	ldrb	r3, [r3, #0]
   2b574:	0018      	movs	r0, r3
   2b576:	4b0e      	ldr	r3, [pc, #56]	; (2b5b0 <disk_ioctl+0xf4>)
   2b578:	4798      	blx	r3
   2b57a:	1e03      	subs	r3, r0, #0
   2b57c:	d104      	bne.n	2b588 <disk_ioctl+0xcc>
			res = RES_OK;
   2b57e:	230f      	movs	r3, #15
   2b580:	18fb      	adds	r3, r7, r3
   2b582:	2200      	movs	r2, #0
   2b584:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2b586:	e008      	b.n	2b59a <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2b588:	230f      	movs	r3, #15
   2b58a:	18fb      	adds	r3, r7, r3
   2b58c:	2203      	movs	r2, #3
   2b58e:	701a      	strb	r2, [r3, #0]
		break;
   2b590:	e003      	b.n	2b59a <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2b592:	230f      	movs	r3, #15
   2b594:	18fb      	adds	r3, r7, r3
   2b596:	2204      	movs	r2, #4
   2b598:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b59a:	230f      	movs	r3, #15
   2b59c:	18fb      	adds	r3, r7, r3
   2b59e:	781b      	ldrb	r3, [r3, #0]
}
   2b5a0:	0018      	movs	r0, r3
   2b5a2:	46bd      	mov	sp, r7
   2b5a4:	b005      	add	sp, #20
   2b5a6:	bd90      	pop	{r4, r7, pc}
   2b5a8:	00025f61 	.word	0x00025f61
   2b5ac:	00025fad 	.word	0x00025fad
   2b5b0:	00025f21 	.word	0x00025f21

0002b5b4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2b5b4:	b580      	push	{r7, lr}
   2b5b6:	b084      	sub	sp, #16
   2b5b8:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2b5ba:	1d3a      	adds	r2, r7, #4
   2b5bc:	4b12      	ldr	r3, [pc, #72]	; (2b608 <get_fattime+0x54>)
   2b5be:	0011      	movs	r1, r2
   2b5c0:	0018      	movs	r0, r3
   2b5c2:	4b12      	ldr	r3, [pc, #72]	; (2b60c <get_fattime+0x58>)
   2b5c4:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2b5c6:	1d3b      	adds	r3, r7, #4
   2b5c8:	88db      	ldrh	r3, [r3, #6]
   2b5ca:	4a11      	ldr	r2, [pc, #68]	; (2b610 <get_fattime+0x5c>)
   2b5cc:	4694      	mov	ip, r2
   2b5ce:	4463      	add	r3, ip
   2b5d0:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2b5d2:	1d3b      	adds	r3, r7, #4
   2b5d4:	795b      	ldrb	r3, [r3, #5]
   2b5d6:	055b      	lsls	r3, r3, #21
   2b5d8:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2b5da:	1d3b      	adds	r3, r7, #4
   2b5dc:	791b      	ldrb	r3, [r3, #4]
   2b5de:	041b      	lsls	r3, r3, #16
   2b5e0:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2b5e2:	1d3b      	adds	r3, r7, #4
   2b5e4:	789b      	ldrb	r3, [r3, #2]
   2b5e6:	02db      	lsls	r3, r3, #11
   2b5e8:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2b5ea:	1d3b      	adds	r3, r7, #4
   2b5ec:	785b      	ldrb	r3, [r3, #1]
   2b5ee:	015b      	lsls	r3, r3, #5
   2b5f0:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2b5f2:	1d3a      	adds	r2, r7, #4
   2b5f4:	7812      	ldrb	r2, [r2, #0]
   2b5f6:	0852      	lsrs	r2, r2, #1
   2b5f8:	b2d2      	uxtb	r2, r2
   2b5fa:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2b5fc:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2b5fe:	68fb      	ldr	r3, [r7, #12]
}
   2b600:	0018      	movs	r0, r3
   2b602:	46bd      	mov	sp, r7
   2b604:	b004      	add	sp, #16
   2b606:	bd80      	pop	{r7, pc}
   2b608:	200057c8 	.word	0x200057c8
   2b60c:	00026d8d 	.word	0x00026d8d
   2b610:	fffff844 	.word	0xfffff844

0002b614 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2b614:	b580      	push	{r7, lr}
   2b616:	b086      	sub	sp, #24
   2b618:	af00      	add	r7, sp, #0
   2b61a:	60f8      	str	r0, [r7, #12]
   2b61c:	60b9      	str	r1, [r7, #8]
   2b61e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b620:	68fb      	ldr	r3, [r7, #12]
   2b622:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2b624:	68bb      	ldr	r3, [r7, #8]
   2b626:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2b628:	e007      	b.n	2b63a <mem_cpy+0x26>
		*d++ = *s++;
   2b62a:	697b      	ldr	r3, [r7, #20]
   2b62c:	1c5a      	adds	r2, r3, #1
   2b62e:	617a      	str	r2, [r7, #20]
   2b630:	693a      	ldr	r2, [r7, #16]
   2b632:	1c51      	adds	r1, r2, #1
   2b634:	6139      	str	r1, [r7, #16]
   2b636:	7812      	ldrb	r2, [r2, #0]
   2b638:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b63a:	687b      	ldr	r3, [r7, #4]
   2b63c:	1e5a      	subs	r2, r3, #1
   2b63e:	607a      	str	r2, [r7, #4]
   2b640:	2b00      	cmp	r3, #0
   2b642:	d1f2      	bne.n	2b62a <mem_cpy+0x16>
}
   2b644:	46c0      	nop			; (mov r8, r8)
   2b646:	46bd      	mov	sp, r7
   2b648:	b006      	add	sp, #24
   2b64a:	bd80      	pop	{r7, pc}

0002b64c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2b64c:	b580      	push	{r7, lr}
   2b64e:	b086      	sub	sp, #24
   2b650:	af00      	add	r7, sp, #0
   2b652:	60f8      	str	r0, [r7, #12]
   2b654:	60b9      	str	r1, [r7, #8]
   2b656:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b658:	68fb      	ldr	r3, [r7, #12]
   2b65a:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2b65c:	e005      	b.n	2b66a <mem_set+0x1e>
		*d++ = (BYTE)val;
   2b65e:	697b      	ldr	r3, [r7, #20]
   2b660:	1c5a      	adds	r2, r3, #1
   2b662:	617a      	str	r2, [r7, #20]
   2b664:	68ba      	ldr	r2, [r7, #8]
   2b666:	b2d2      	uxtb	r2, r2
   2b668:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b66a:	687b      	ldr	r3, [r7, #4]
   2b66c:	1e5a      	subs	r2, r3, #1
   2b66e:	607a      	str	r2, [r7, #4]
   2b670:	2b00      	cmp	r3, #0
   2b672:	d1f4      	bne.n	2b65e <mem_set+0x12>
}
   2b674:	46c0      	nop			; (mov r8, r8)
   2b676:	46bd      	mov	sp, r7
   2b678:	b006      	add	sp, #24
   2b67a:	bd80      	pop	{r7, pc}

0002b67c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2b67c:	b580      	push	{r7, lr}
   2b67e:	b088      	sub	sp, #32
   2b680:	af00      	add	r7, sp, #0
   2b682:	60f8      	str	r0, [r7, #12]
   2b684:	60b9      	str	r1, [r7, #8]
   2b686:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2b688:	68fb      	ldr	r3, [r7, #12]
   2b68a:	61fb      	str	r3, [r7, #28]
   2b68c:	68bb      	ldr	r3, [r7, #8]
   2b68e:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2b690:	2300      	movs	r3, #0
   2b692:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2b694:	46c0      	nop			; (mov r8, r8)
   2b696:	687b      	ldr	r3, [r7, #4]
   2b698:	1e5a      	subs	r2, r3, #1
   2b69a:	607a      	str	r2, [r7, #4]
   2b69c:	2b00      	cmp	r3, #0
   2b69e:	d00d      	beq.n	2b6bc <mem_cmp+0x40>
   2b6a0:	69fb      	ldr	r3, [r7, #28]
   2b6a2:	1c5a      	adds	r2, r3, #1
   2b6a4:	61fa      	str	r2, [r7, #28]
   2b6a6:	781b      	ldrb	r3, [r3, #0]
   2b6a8:	0019      	movs	r1, r3
   2b6aa:	69bb      	ldr	r3, [r7, #24]
   2b6ac:	1c5a      	adds	r2, r3, #1
   2b6ae:	61ba      	str	r2, [r7, #24]
   2b6b0:	781b      	ldrb	r3, [r3, #0]
   2b6b2:	1acb      	subs	r3, r1, r3
   2b6b4:	617b      	str	r3, [r7, #20]
   2b6b6:	697b      	ldr	r3, [r7, #20]
   2b6b8:	2b00      	cmp	r3, #0
   2b6ba:	d0ec      	beq.n	2b696 <mem_cmp+0x1a>
	return r;
   2b6bc:	697b      	ldr	r3, [r7, #20]
}
   2b6be:	0018      	movs	r0, r3
   2b6c0:	46bd      	mov	sp, r7
   2b6c2:	b008      	add	sp, #32
   2b6c4:	bd80      	pop	{r7, pc}

0002b6c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2b6c6:	b580      	push	{r7, lr}
   2b6c8:	b082      	sub	sp, #8
   2b6ca:	af00      	add	r7, sp, #0
   2b6cc:	6078      	str	r0, [r7, #4]
   2b6ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2b6d0:	e002      	b.n	2b6d8 <chk_chr+0x12>
   2b6d2:	687b      	ldr	r3, [r7, #4]
   2b6d4:	3301      	adds	r3, #1
   2b6d6:	607b      	str	r3, [r7, #4]
   2b6d8:	687b      	ldr	r3, [r7, #4]
   2b6da:	781b      	ldrb	r3, [r3, #0]
   2b6dc:	2b00      	cmp	r3, #0
   2b6de:	d005      	beq.n	2b6ec <chk_chr+0x26>
   2b6e0:	687b      	ldr	r3, [r7, #4]
   2b6e2:	781b      	ldrb	r3, [r3, #0]
   2b6e4:	001a      	movs	r2, r3
   2b6e6:	683b      	ldr	r3, [r7, #0]
   2b6e8:	429a      	cmp	r2, r3
   2b6ea:	d1f2      	bne.n	2b6d2 <chk_chr+0xc>
	return *str;
   2b6ec:	687b      	ldr	r3, [r7, #4]
   2b6ee:	781b      	ldrb	r3, [r3, #0]
}
   2b6f0:	0018      	movs	r0, r3
   2b6f2:	46bd      	mov	sp, r7
   2b6f4:	b002      	add	sp, #8
   2b6f6:	bd80      	pop	{r7, pc}

0002b6f8 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2b6f8:	b590      	push	{r4, r7, lr}
   2b6fa:	b085      	sub	sp, #20
   2b6fc:	af00      	add	r7, sp, #0
   2b6fe:	6078      	str	r0, [r7, #4]
   2b700:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2b702:	687b      	ldr	r3, [r7, #4]
   2b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b706:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2b708:	68fa      	ldr	r2, [r7, #12]
   2b70a:	683b      	ldr	r3, [r7, #0]
   2b70c:	429a      	cmp	r2, r3
   2b70e:	d04e      	beq.n	2b7ae <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2b710:	687b      	ldr	r3, [r7, #4]
   2b712:	791b      	ldrb	r3, [r3, #4]
   2b714:	2b00      	cmp	r3, #0
   2b716:	d037      	beq.n	2b788 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2b718:	687b      	ldr	r3, [r7, #4]
   2b71a:	7858      	ldrb	r0, [r3, #1]
   2b71c:	687b      	ldr	r3, [r7, #4]
   2b71e:	3330      	adds	r3, #48	; 0x30
   2b720:	0019      	movs	r1, r3
   2b722:	68fa      	ldr	r2, [r7, #12]
   2b724:	2301      	movs	r3, #1
   2b726:	4c24      	ldr	r4, [pc, #144]	; (2b7b8 <move_window+0xc0>)
   2b728:	47a0      	blx	r4
   2b72a:	1e03      	subs	r3, r0, #0
   2b72c:	d001      	beq.n	2b732 <move_window+0x3a>
				return FR_DISK_ERR;
   2b72e:	2301      	movs	r3, #1
   2b730:	e03e      	b.n	2b7b0 <move_window+0xb8>
			fs->wflag = 0;
   2b732:	687b      	ldr	r3, [r7, #4]
   2b734:	2200      	movs	r2, #0
   2b736:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2b738:	687b      	ldr	r3, [r7, #4]
   2b73a:	6a1a      	ldr	r2, [r3, #32]
   2b73c:	687b      	ldr	r3, [r7, #4]
   2b73e:	69db      	ldr	r3, [r3, #28]
   2b740:	18d2      	adds	r2, r2, r3
   2b742:	68fb      	ldr	r3, [r7, #12]
   2b744:	429a      	cmp	r2, r3
   2b746:	d91f      	bls.n	2b788 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b748:	230b      	movs	r3, #11
   2b74a:	18fb      	adds	r3, r7, r3
   2b74c:	687a      	ldr	r2, [r7, #4]
   2b74e:	78d2      	ldrb	r2, [r2, #3]
   2b750:	701a      	strb	r2, [r3, #0]
   2b752:	e014      	b.n	2b77e <move_window+0x86>
					wsect += fs->fsize;
   2b754:	687b      	ldr	r3, [r7, #4]
   2b756:	69db      	ldr	r3, [r3, #28]
   2b758:	68fa      	ldr	r2, [r7, #12]
   2b75a:	18d3      	adds	r3, r2, r3
   2b75c:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2b75e:	687b      	ldr	r3, [r7, #4]
   2b760:	7858      	ldrb	r0, [r3, #1]
   2b762:	687b      	ldr	r3, [r7, #4]
   2b764:	3330      	adds	r3, #48	; 0x30
   2b766:	0019      	movs	r1, r3
   2b768:	68fa      	ldr	r2, [r7, #12]
   2b76a:	2301      	movs	r3, #1
   2b76c:	4c12      	ldr	r4, [pc, #72]	; (2b7b8 <move_window+0xc0>)
   2b76e:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b770:	230b      	movs	r3, #11
   2b772:	18fb      	adds	r3, r7, r3
   2b774:	781a      	ldrb	r2, [r3, #0]
   2b776:	230b      	movs	r3, #11
   2b778:	18fb      	adds	r3, r7, r3
   2b77a:	3a01      	subs	r2, #1
   2b77c:	701a      	strb	r2, [r3, #0]
   2b77e:	230b      	movs	r3, #11
   2b780:	18fb      	adds	r3, r7, r3
   2b782:	781b      	ldrb	r3, [r3, #0]
   2b784:	2b01      	cmp	r3, #1
   2b786:	d8e5      	bhi.n	2b754 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2b788:	683b      	ldr	r3, [r7, #0]
   2b78a:	2b00      	cmp	r3, #0
   2b78c:	d00f      	beq.n	2b7ae <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2b78e:	687b      	ldr	r3, [r7, #4]
   2b790:	7858      	ldrb	r0, [r3, #1]
   2b792:	687b      	ldr	r3, [r7, #4]
   2b794:	3330      	adds	r3, #48	; 0x30
   2b796:	0019      	movs	r1, r3
   2b798:	683a      	ldr	r2, [r7, #0]
   2b79a:	2301      	movs	r3, #1
   2b79c:	4c07      	ldr	r4, [pc, #28]	; (2b7bc <move_window+0xc4>)
   2b79e:	47a0      	blx	r4
   2b7a0:	1e03      	subs	r3, r0, #0
   2b7a2:	d001      	beq.n	2b7a8 <move_window+0xb0>
				return FR_DISK_ERR;
   2b7a4:	2301      	movs	r3, #1
   2b7a6:	e003      	b.n	2b7b0 <move_window+0xb8>
			fs->winsect = sector;
   2b7a8:	687b      	ldr	r3, [r7, #4]
   2b7aa:	683a      	ldr	r2, [r7, #0]
   2b7ac:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2b7ae:	2300      	movs	r3, #0
}
   2b7b0:	0018      	movs	r0, r3
   2b7b2:	46bd      	mov	sp, r7
   2b7b4:	b005      	add	sp, #20
   2b7b6:	bd90      	pop	{r4, r7, pc}
   2b7b8:	0002b3e5 	.word	0x0002b3e5
   2b7bc:	0002b30d 	.word	0x0002b30d

0002b7c0 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2b7c0:	b590      	push	{r4, r7, lr}
   2b7c2:	b085      	sub	sp, #20
   2b7c4:	af00      	add	r7, sp, #0
   2b7c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2b7c8:	230f      	movs	r3, #15
   2b7ca:	18fc      	adds	r4, r7, r3
   2b7cc:	687b      	ldr	r3, [r7, #4]
   2b7ce:	2100      	movs	r1, #0
   2b7d0:	0018      	movs	r0, r3
   2b7d2:	4b52      	ldr	r3, [pc, #328]	; (2b91c <sync+0x15c>)
   2b7d4:	4798      	blx	r3
   2b7d6:	0003      	movs	r3, r0
   2b7d8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2b7da:	230f      	movs	r3, #15
   2b7dc:	18fb      	adds	r3, r7, r3
   2b7de:	781b      	ldrb	r3, [r3, #0]
   2b7e0:	2b00      	cmp	r3, #0
   2b7e2:	d000      	beq.n	2b7e6 <sync+0x26>
   2b7e4:	e093      	b.n	2b90e <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2b7e6:	687b      	ldr	r3, [r7, #4]
   2b7e8:	781b      	ldrb	r3, [r3, #0]
   2b7ea:	2b03      	cmp	r3, #3
   2b7ec:	d000      	beq.n	2b7f0 <sync+0x30>
   2b7ee:	e081      	b.n	2b8f4 <sync+0x134>
   2b7f0:	687b      	ldr	r3, [r7, #4]
   2b7f2:	795b      	ldrb	r3, [r3, #5]
   2b7f4:	2b00      	cmp	r3, #0
   2b7f6:	d07d      	beq.n	2b8f4 <sync+0x134>
			fs->winsect = 0;
   2b7f8:	687b      	ldr	r3, [r7, #4]
   2b7fa:	2200      	movs	r2, #0
   2b7fc:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2b7fe:	687b      	ldr	r3, [r7, #4]
   2b800:	3330      	adds	r3, #48	; 0x30
   2b802:	0018      	movs	r0, r3
   2b804:	2380      	movs	r3, #128	; 0x80
   2b806:	009b      	lsls	r3, r3, #2
   2b808:	001a      	movs	r2, r3
   2b80a:	2100      	movs	r1, #0
   2b80c:	4b44      	ldr	r3, [pc, #272]	; (2b920 <sync+0x160>)
   2b80e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2b810:	687b      	ldr	r3, [r7, #4]
   2b812:	4a44      	ldr	r2, [pc, #272]	; (2b924 <sync+0x164>)
   2b814:	2155      	movs	r1, #85	; 0x55
   2b816:	5499      	strb	r1, [r3, r2]
   2b818:	687b      	ldr	r3, [r7, #4]
   2b81a:	4a43      	ldr	r2, [pc, #268]	; (2b928 <sync+0x168>)
   2b81c:	21aa      	movs	r1, #170	; 0xaa
   2b81e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2b820:	687b      	ldr	r3, [r7, #4]
   2b822:	2230      	movs	r2, #48	; 0x30
   2b824:	2152      	movs	r1, #82	; 0x52
   2b826:	5499      	strb	r1, [r3, r2]
   2b828:	687b      	ldr	r3, [r7, #4]
   2b82a:	2231      	movs	r2, #49	; 0x31
   2b82c:	2152      	movs	r1, #82	; 0x52
   2b82e:	5499      	strb	r1, [r3, r2]
   2b830:	687b      	ldr	r3, [r7, #4]
   2b832:	2232      	movs	r2, #50	; 0x32
   2b834:	2161      	movs	r1, #97	; 0x61
   2b836:	5499      	strb	r1, [r3, r2]
   2b838:	687b      	ldr	r3, [r7, #4]
   2b83a:	2233      	movs	r2, #51	; 0x33
   2b83c:	2141      	movs	r1, #65	; 0x41
   2b83e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2b840:	687a      	ldr	r2, [r7, #4]
   2b842:	2385      	movs	r3, #133	; 0x85
   2b844:	009b      	lsls	r3, r3, #2
   2b846:	2172      	movs	r1, #114	; 0x72
   2b848:	54d1      	strb	r1, [r2, r3]
   2b84a:	687b      	ldr	r3, [r7, #4]
   2b84c:	4a37      	ldr	r2, [pc, #220]	; (2b92c <sync+0x16c>)
   2b84e:	2172      	movs	r1, #114	; 0x72
   2b850:	5499      	strb	r1, [r3, r2]
   2b852:	687b      	ldr	r3, [r7, #4]
   2b854:	4a36      	ldr	r2, [pc, #216]	; (2b930 <sync+0x170>)
   2b856:	2141      	movs	r1, #65	; 0x41
   2b858:	5499      	strb	r1, [r3, r2]
   2b85a:	687b      	ldr	r3, [r7, #4]
   2b85c:	4a35      	ldr	r2, [pc, #212]	; (2b934 <sync+0x174>)
   2b85e:	2161      	movs	r1, #97	; 0x61
   2b860:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2b862:	687b      	ldr	r3, [r7, #4]
   2b864:	691b      	ldr	r3, [r3, #16]
   2b866:	b2d9      	uxtb	r1, r3
   2b868:	687a      	ldr	r2, [r7, #4]
   2b86a:	2386      	movs	r3, #134	; 0x86
   2b86c:	009b      	lsls	r3, r3, #2
   2b86e:	54d1      	strb	r1, [r2, r3]
   2b870:	687b      	ldr	r3, [r7, #4]
   2b872:	691b      	ldr	r3, [r3, #16]
   2b874:	b29b      	uxth	r3, r3
   2b876:	0a1b      	lsrs	r3, r3, #8
   2b878:	b29b      	uxth	r3, r3
   2b87a:	b2d9      	uxtb	r1, r3
   2b87c:	687b      	ldr	r3, [r7, #4]
   2b87e:	4a2e      	ldr	r2, [pc, #184]	; (2b938 <sync+0x178>)
   2b880:	5499      	strb	r1, [r3, r2]
   2b882:	687b      	ldr	r3, [r7, #4]
   2b884:	691b      	ldr	r3, [r3, #16]
   2b886:	0c1b      	lsrs	r3, r3, #16
   2b888:	b2d9      	uxtb	r1, r3
   2b88a:	687b      	ldr	r3, [r7, #4]
   2b88c:	4a2b      	ldr	r2, [pc, #172]	; (2b93c <sync+0x17c>)
   2b88e:	5499      	strb	r1, [r3, r2]
   2b890:	687b      	ldr	r3, [r7, #4]
   2b892:	691b      	ldr	r3, [r3, #16]
   2b894:	0e1b      	lsrs	r3, r3, #24
   2b896:	b2d9      	uxtb	r1, r3
   2b898:	687b      	ldr	r3, [r7, #4]
   2b89a:	4a29      	ldr	r2, [pc, #164]	; (2b940 <sync+0x180>)
   2b89c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2b89e:	687b      	ldr	r3, [r7, #4]
   2b8a0:	68db      	ldr	r3, [r3, #12]
   2b8a2:	b2d9      	uxtb	r1, r3
   2b8a4:	687a      	ldr	r2, [r7, #4]
   2b8a6:	2387      	movs	r3, #135	; 0x87
   2b8a8:	009b      	lsls	r3, r3, #2
   2b8aa:	54d1      	strb	r1, [r2, r3]
   2b8ac:	687b      	ldr	r3, [r7, #4]
   2b8ae:	68db      	ldr	r3, [r3, #12]
   2b8b0:	b29b      	uxth	r3, r3
   2b8b2:	0a1b      	lsrs	r3, r3, #8
   2b8b4:	b29b      	uxth	r3, r3
   2b8b6:	b2d9      	uxtb	r1, r3
   2b8b8:	687b      	ldr	r3, [r7, #4]
   2b8ba:	4a22      	ldr	r2, [pc, #136]	; (2b944 <sync+0x184>)
   2b8bc:	5499      	strb	r1, [r3, r2]
   2b8be:	687b      	ldr	r3, [r7, #4]
   2b8c0:	68db      	ldr	r3, [r3, #12]
   2b8c2:	0c1b      	lsrs	r3, r3, #16
   2b8c4:	b2d9      	uxtb	r1, r3
   2b8c6:	687b      	ldr	r3, [r7, #4]
   2b8c8:	4a1f      	ldr	r2, [pc, #124]	; (2b948 <sync+0x188>)
   2b8ca:	5499      	strb	r1, [r3, r2]
   2b8cc:	687b      	ldr	r3, [r7, #4]
   2b8ce:	68db      	ldr	r3, [r3, #12]
   2b8d0:	0e1b      	lsrs	r3, r3, #24
   2b8d2:	b2d9      	uxtb	r1, r3
   2b8d4:	687b      	ldr	r3, [r7, #4]
   2b8d6:	4a1d      	ldr	r2, [pc, #116]	; (2b94c <sync+0x18c>)
   2b8d8:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2b8da:	687b      	ldr	r3, [r7, #4]
   2b8dc:	7858      	ldrb	r0, [r3, #1]
   2b8de:	687b      	ldr	r3, [r7, #4]
   2b8e0:	3330      	adds	r3, #48	; 0x30
   2b8e2:	0019      	movs	r1, r3
   2b8e4:	687b      	ldr	r3, [r7, #4]
   2b8e6:	695a      	ldr	r2, [r3, #20]
   2b8e8:	2301      	movs	r3, #1
   2b8ea:	4c19      	ldr	r4, [pc, #100]	; (2b950 <sync+0x190>)
   2b8ec:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2b8ee:	687b      	ldr	r3, [r7, #4]
   2b8f0:	2200      	movs	r2, #0
   2b8f2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2b8f4:	687b      	ldr	r3, [r7, #4]
   2b8f6:	785b      	ldrb	r3, [r3, #1]
   2b8f8:	2200      	movs	r2, #0
   2b8fa:	2100      	movs	r1, #0
   2b8fc:	0018      	movs	r0, r3
   2b8fe:	4b15      	ldr	r3, [pc, #84]	; (2b954 <sync+0x194>)
   2b900:	4798      	blx	r3
   2b902:	1e03      	subs	r3, r0, #0
   2b904:	d003      	beq.n	2b90e <sync+0x14e>
			res = FR_DISK_ERR;
   2b906:	230f      	movs	r3, #15
   2b908:	18fb      	adds	r3, r7, r3
   2b90a:	2201      	movs	r2, #1
   2b90c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b90e:	230f      	movs	r3, #15
   2b910:	18fb      	adds	r3, r7, r3
   2b912:	781b      	ldrb	r3, [r3, #0]
}
   2b914:	0018      	movs	r0, r3
   2b916:	46bd      	mov	sp, r7
   2b918:	b005      	add	sp, #20
   2b91a:	bd90      	pop	{r4, r7, pc}
   2b91c:	0002b6f9 	.word	0x0002b6f9
   2b920:	0002b64d 	.word	0x0002b64d
   2b924:	0000022e 	.word	0x0000022e
   2b928:	0000022f 	.word	0x0000022f
   2b92c:	00000215 	.word	0x00000215
   2b930:	00000216 	.word	0x00000216
   2b934:	00000217 	.word	0x00000217
   2b938:	00000219 	.word	0x00000219
   2b93c:	0000021a 	.word	0x0000021a
   2b940:	0000021b 	.word	0x0000021b
   2b944:	0000021d 	.word	0x0000021d
   2b948:	0000021e 	.word	0x0000021e
   2b94c:	0000021f 	.word	0x0000021f
   2b950:	0002b3e5 	.word	0x0002b3e5
   2b954:	0002b4bd 	.word	0x0002b4bd

0002b958 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2b958:	b580      	push	{r7, lr}
   2b95a:	b082      	sub	sp, #8
   2b95c:	af00      	add	r7, sp, #0
   2b95e:	6078      	str	r0, [r7, #4]
   2b960:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2b962:	683b      	ldr	r3, [r7, #0]
   2b964:	3b02      	subs	r3, #2
   2b966:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2b968:	687b      	ldr	r3, [r7, #4]
   2b96a:	699b      	ldr	r3, [r3, #24]
   2b96c:	1e9a      	subs	r2, r3, #2
   2b96e:	683b      	ldr	r3, [r7, #0]
   2b970:	429a      	cmp	r2, r3
   2b972:	d801      	bhi.n	2b978 <clust2sect+0x20>
   2b974:	2300      	movs	r3, #0
   2b976:	e007      	b.n	2b988 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2b978:	687b      	ldr	r3, [r7, #4]
   2b97a:	789b      	ldrb	r3, [r3, #2]
   2b97c:	001a      	movs	r2, r3
   2b97e:	683b      	ldr	r3, [r7, #0]
   2b980:	435a      	muls	r2, r3
   2b982:	687b      	ldr	r3, [r7, #4]
   2b984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b986:	18d3      	adds	r3, r2, r3
}
   2b988:	0018      	movs	r0, r3
   2b98a:	46bd      	mov	sp, r7
   2b98c:	b002      	add	sp, #8
   2b98e:	bd80      	pop	{r7, pc}

0002b990 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2b990:	b580      	push	{r7, lr}
   2b992:	b086      	sub	sp, #24
   2b994:	af00      	add	r7, sp, #0
   2b996:	6078      	str	r0, [r7, #4]
   2b998:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2b99a:	683b      	ldr	r3, [r7, #0]
   2b99c:	2b01      	cmp	r3, #1
   2b99e:	d904      	bls.n	2b9aa <get_fat+0x1a>
   2b9a0:	687b      	ldr	r3, [r7, #4]
   2b9a2:	699a      	ldr	r2, [r3, #24]
   2b9a4:	683b      	ldr	r3, [r7, #0]
   2b9a6:	429a      	cmp	r2, r3
   2b9a8:	d801      	bhi.n	2b9ae <get_fat+0x1e>
		return 1;
   2b9aa:	2301      	movs	r3, #1
   2b9ac:	e09f      	b.n	2baee <get_fat+0x15e>

	switch (fs->fs_type) {
   2b9ae:	687b      	ldr	r3, [r7, #4]
   2b9b0:	781b      	ldrb	r3, [r3, #0]
   2b9b2:	2b02      	cmp	r3, #2
   2b9b4:	d048      	beq.n	2ba48 <get_fat+0xb8>
   2b9b6:	2b03      	cmp	r3, #3
   2b9b8:	d067      	beq.n	2ba8a <get_fat+0xfa>
   2b9ba:	2b01      	cmp	r3, #1
   2b9bc:	d000      	beq.n	2b9c0 <get_fat+0x30>
   2b9be:	e094      	b.n	2baea <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2b9c0:	683b      	ldr	r3, [r7, #0]
   2b9c2:	617b      	str	r3, [r7, #20]
   2b9c4:	697b      	ldr	r3, [r7, #20]
   2b9c6:	085b      	lsrs	r3, r3, #1
   2b9c8:	697a      	ldr	r2, [r7, #20]
   2b9ca:	18d3      	adds	r3, r2, r3
   2b9cc:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b9ce:	687b      	ldr	r3, [r7, #4]
   2b9d0:	6a1a      	ldr	r2, [r3, #32]
   2b9d2:	697b      	ldr	r3, [r7, #20]
   2b9d4:	0a5b      	lsrs	r3, r3, #9
   2b9d6:	18d2      	adds	r2, r2, r3
   2b9d8:	687b      	ldr	r3, [r7, #4]
   2b9da:	0011      	movs	r1, r2
   2b9dc:	0018      	movs	r0, r3
   2b9de:	4b46      	ldr	r3, [pc, #280]	; (2baf8 <get_fat+0x168>)
   2b9e0:	4798      	blx	r3
   2b9e2:	1e03      	subs	r3, r0, #0
   2b9e4:	d000      	beq.n	2b9e8 <get_fat+0x58>
   2b9e6:	e079      	b.n	2badc <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2b9e8:	697b      	ldr	r3, [r7, #20]
   2b9ea:	05db      	lsls	r3, r3, #23
   2b9ec:	0ddb      	lsrs	r3, r3, #23
   2b9ee:	687a      	ldr	r2, [r7, #4]
   2b9f0:	2130      	movs	r1, #48	; 0x30
   2b9f2:	18d3      	adds	r3, r2, r3
   2b9f4:	185b      	adds	r3, r3, r1
   2b9f6:	781b      	ldrb	r3, [r3, #0]
   2b9f8:	613b      	str	r3, [r7, #16]
   2b9fa:	697b      	ldr	r3, [r7, #20]
   2b9fc:	3301      	adds	r3, #1
   2b9fe:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ba00:	687b      	ldr	r3, [r7, #4]
   2ba02:	6a1a      	ldr	r2, [r3, #32]
   2ba04:	697b      	ldr	r3, [r7, #20]
   2ba06:	0a5b      	lsrs	r3, r3, #9
   2ba08:	18d2      	adds	r2, r2, r3
   2ba0a:	687b      	ldr	r3, [r7, #4]
   2ba0c:	0011      	movs	r1, r2
   2ba0e:	0018      	movs	r0, r3
   2ba10:	4b39      	ldr	r3, [pc, #228]	; (2baf8 <get_fat+0x168>)
   2ba12:	4798      	blx	r3
   2ba14:	1e03      	subs	r3, r0, #0
   2ba16:	d163      	bne.n	2bae0 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2ba18:	697b      	ldr	r3, [r7, #20]
   2ba1a:	05db      	lsls	r3, r3, #23
   2ba1c:	0ddb      	lsrs	r3, r3, #23
   2ba1e:	687a      	ldr	r2, [r7, #4]
   2ba20:	2130      	movs	r1, #48	; 0x30
   2ba22:	18d3      	adds	r3, r2, r3
   2ba24:	185b      	adds	r3, r3, r1
   2ba26:	781b      	ldrb	r3, [r3, #0]
   2ba28:	021b      	lsls	r3, r3, #8
   2ba2a:	001a      	movs	r2, r3
   2ba2c:	693b      	ldr	r3, [r7, #16]
   2ba2e:	4313      	orrs	r3, r2
   2ba30:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2ba32:	683b      	ldr	r3, [r7, #0]
   2ba34:	2201      	movs	r2, #1
   2ba36:	4013      	ands	r3, r2
   2ba38:	d002      	beq.n	2ba40 <get_fat+0xb0>
   2ba3a:	693b      	ldr	r3, [r7, #16]
   2ba3c:	091b      	lsrs	r3, r3, #4
   2ba3e:	e056      	b.n	2baee <get_fat+0x15e>
   2ba40:	693b      	ldr	r3, [r7, #16]
   2ba42:	051b      	lsls	r3, r3, #20
   2ba44:	0d1b      	lsrs	r3, r3, #20
   2ba46:	e052      	b.n	2baee <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2ba48:	687b      	ldr	r3, [r7, #4]
   2ba4a:	6a1a      	ldr	r2, [r3, #32]
   2ba4c:	683b      	ldr	r3, [r7, #0]
   2ba4e:	0a1b      	lsrs	r3, r3, #8
   2ba50:	18d2      	adds	r2, r2, r3
   2ba52:	687b      	ldr	r3, [r7, #4]
   2ba54:	0011      	movs	r1, r2
   2ba56:	0018      	movs	r0, r3
   2ba58:	4b27      	ldr	r3, [pc, #156]	; (2baf8 <get_fat+0x168>)
   2ba5a:	4798      	blx	r3
   2ba5c:	1e03      	subs	r3, r0, #0
   2ba5e:	d141      	bne.n	2bae4 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2ba60:	683b      	ldr	r3, [r7, #0]
   2ba62:	005a      	lsls	r2, r3, #1
   2ba64:	23ff      	movs	r3, #255	; 0xff
   2ba66:	005b      	lsls	r3, r3, #1
   2ba68:	4013      	ands	r3, r2
   2ba6a:	3330      	adds	r3, #48	; 0x30
   2ba6c:	687a      	ldr	r2, [r7, #4]
   2ba6e:	18d3      	adds	r3, r2, r3
   2ba70:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2ba72:	68fb      	ldr	r3, [r7, #12]
   2ba74:	3301      	adds	r3, #1
   2ba76:	781b      	ldrb	r3, [r3, #0]
   2ba78:	021b      	lsls	r3, r3, #8
   2ba7a:	b21a      	sxth	r2, r3
   2ba7c:	68fb      	ldr	r3, [r7, #12]
   2ba7e:	781b      	ldrb	r3, [r3, #0]
   2ba80:	b21b      	sxth	r3, r3
   2ba82:	4313      	orrs	r3, r2
   2ba84:	b21b      	sxth	r3, r3
   2ba86:	b29b      	uxth	r3, r3
   2ba88:	e031      	b.n	2baee <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2ba8a:	687b      	ldr	r3, [r7, #4]
   2ba8c:	6a1a      	ldr	r2, [r3, #32]
   2ba8e:	683b      	ldr	r3, [r7, #0]
   2ba90:	09db      	lsrs	r3, r3, #7
   2ba92:	18d2      	adds	r2, r2, r3
   2ba94:	687b      	ldr	r3, [r7, #4]
   2ba96:	0011      	movs	r1, r2
   2ba98:	0018      	movs	r0, r3
   2ba9a:	4b17      	ldr	r3, [pc, #92]	; (2baf8 <get_fat+0x168>)
   2ba9c:	4798      	blx	r3
   2ba9e:	1e03      	subs	r3, r0, #0
   2baa0:	d122      	bne.n	2bae8 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2baa2:	683b      	ldr	r3, [r7, #0]
   2baa4:	009a      	lsls	r2, r3, #2
   2baa6:	23fe      	movs	r3, #254	; 0xfe
   2baa8:	005b      	lsls	r3, r3, #1
   2baaa:	4013      	ands	r3, r2
   2baac:	3330      	adds	r3, #48	; 0x30
   2baae:	687a      	ldr	r2, [r7, #4]
   2bab0:	18d3      	adds	r3, r2, r3
   2bab2:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2bab4:	68fb      	ldr	r3, [r7, #12]
   2bab6:	3303      	adds	r3, #3
   2bab8:	781b      	ldrb	r3, [r3, #0]
   2baba:	061a      	lsls	r2, r3, #24
   2babc:	68fb      	ldr	r3, [r7, #12]
   2babe:	3302      	adds	r3, #2
   2bac0:	781b      	ldrb	r3, [r3, #0]
   2bac2:	041b      	lsls	r3, r3, #16
   2bac4:	4313      	orrs	r3, r2
   2bac6:	68fa      	ldr	r2, [r7, #12]
   2bac8:	3201      	adds	r2, #1
   2baca:	7812      	ldrb	r2, [r2, #0]
   2bacc:	0212      	lsls	r2, r2, #8
   2bace:	4313      	orrs	r3, r2
   2bad0:	68fa      	ldr	r2, [r7, #12]
   2bad2:	7812      	ldrb	r2, [r2, #0]
   2bad4:	4313      	orrs	r3, r2
   2bad6:	011b      	lsls	r3, r3, #4
   2bad8:	091b      	lsrs	r3, r3, #4
   2bada:	e008      	b.n	2baee <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2badc:	46c0      	nop			; (mov r8, r8)
   2bade:	e004      	b.n	2baea <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2bae0:	46c0      	nop			; (mov r8, r8)
   2bae2:	e002      	b.n	2baea <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2bae4:	46c0      	nop			; (mov r8, r8)
   2bae6:	e000      	b.n	2baea <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2bae8:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2baea:	2301      	movs	r3, #1
   2baec:	425b      	negs	r3, r3
}
   2baee:	0018      	movs	r0, r3
   2baf0:	46bd      	mov	sp, r7
   2baf2:	b006      	add	sp, #24
   2baf4:	bd80      	pop	{r7, pc}
   2baf6:	46c0      	nop			; (mov r8, r8)
   2baf8:	0002b6f9 	.word	0x0002b6f9

0002bafc <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2bafc:	b590      	push	{r4, r7, lr}
   2bafe:	b089      	sub	sp, #36	; 0x24
   2bb00:	af00      	add	r7, sp, #0
   2bb02:	60f8      	str	r0, [r7, #12]
   2bb04:	60b9      	str	r1, [r7, #8]
   2bb06:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2bb08:	68bb      	ldr	r3, [r7, #8]
   2bb0a:	2b01      	cmp	r3, #1
   2bb0c:	d904      	bls.n	2bb18 <put_fat+0x1c>
   2bb0e:	68fb      	ldr	r3, [r7, #12]
   2bb10:	699a      	ldr	r2, [r3, #24]
   2bb12:	68bb      	ldr	r3, [r7, #8]
   2bb14:	429a      	cmp	r2, r3
   2bb16:	d804      	bhi.n	2bb22 <put_fat+0x26>
		res = FR_INT_ERR;
   2bb18:	231f      	movs	r3, #31
   2bb1a:	18fb      	adds	r3, r7, r3
   2bb1c:	2202      	movs	r2, #2
   2bb1e:	701a      	strb	r2, [r3, #0]
   2bb20:	e100      	b.n	2bd24 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2bb22:	68fb      	ldr	r3, [r7, #12]
   2bb24:	781b      	ldrb	r3, [r3, #0]
   2bb26:	2b02      	cmp	r3, #2
   2bb28:	d100      	bne.n	2bb2c <put_fat+0x30>
   2bb2a:	e078      	b.n	2bc1e <put_fat+0x122>
   2bb2c:	2b03      	cmp	r3, #3
   2bb2e:	d100      	bne.n	2bb32 <put_fat+0x36>
   2bb30:	e09e      	b.n	2bc70 <put_fat+0x174>
   2bb32:	2b01      	cmp	r3, #1
   2bb34:	d000      	beq.n	2bb38 <put_fat+0x3c>
   2bb36:	e0e6      	b.n	2bd06 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2bb38:	68bb      	ldr	r3, [r7, #8]
   2bb3a:	61bb      	str	r3, [r7, #24]
   2bb3c:	69bb      	ldr	r3, [r7, #24]
   2bb3e:	085b      	lsrs	r3, r3, #1
   2bb40:	69ba      	ldr	r2, [r7, #24]
   2bb42:	18d3      	adds	r3, r2, r3
   2bb44:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2bb46:	68fb      	ldr	r3, [r7, #12]
   2bb48:	6a1a      	ldr	r2, [r3, #32]
   2bb4a:	69bb      	ldr	r3, [r7, #24]
   2bb4c:	0a5b      	lsrs	r3, r3, #9
   2bb4e:	18d2      	adds	r2, r2, r3
   2bb50:	231f      	movs	r3, #31
   2bb52:	18fc      	adds	r4, r7, r3
   2bb54:	68fb      	ldr	r3, [r7, #12]
   2bb56:	0011      	movs	r1, r2
   2bb58:	0018      	movs	r0, r3
   2bb5a:	4b76      	ldr	r3, [pc, #472]	; (2bd34 <put_fat+0x238>)
   2bb5c:	4798      	blx	r3
   2bb5e:	0003      	movs	r3, r0
   2bb60:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bb62:	231f      	movs	r3, #31
   2bb64:	18fb      	adds	r3, r7, r3
   2bb66:	781b      	ldrb	r3, [r3, #0]
   2bb68:	2b00      	cmp	r3, #0
   2bb6a:	d000      	beq.n	2bb6e <put_fat+0x72>
   2bb6c:	e0d0      	b.n	2bd10 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2bb6e:	69bb      	ldr	r3, [r7, #24]
   2bb70:	05db      	lsls	r3, r3, #23
   2bb72:	0ddb      	lsrs	r3, r3, #23
   2bb74:	3330      	adds	r3, #48	; 0x30
   2bb76:	68fa      	ldr	r2, [r7, #12]
   2bb78:	18d3      	adds	r3, r2, r3
   2bb7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2bb7c:	68bb      	ldr	r3, [r7, #8]
   2bb7e:	2201      	movs	r2, #1
   2bb80:	4013      	ands	r3, r2
   2bb82:	d00d      	beq.n	2bba0 <put_fat+0xa4>
   2bb84:	697b      	ldr	r3, [r7, #20]
   2bb86:	781b      	ldrb	r3, [r3, #0]
   2bb88:	b25b      	sxtb	r3, r3
   2bb8a:	220f      	movs	r2, #15
   2bb8c:	4013      	ands	r3, r2
   2bb8e:	b25a      	sxtb	r2, r3
   2bb90:	687b      	ldr	r3, [r7, #4]
   2bb92:	b2db      	uxtb	r3, r3
   2bb94:	011b      	lsls	r3, r3, #4
   2bb96:	b25b      	sxtb	r3, r3
   2bb98:	4313      	orrs	r3, r2
   2bb9a:	b25b      	sxtb	r3, r3
   2bb9c:	b2db      	uxtb	r3, r3
   2bb9e:	e001      	b.n	2bba4 <put_fat+0xa8>
   2bba0:	687b      	ldr	r3, [r7, #4]
   2bba2:	b2db      	uxtb	r3, r3
   2bba4:	697a      	ldr	r2, [r7, #20]
   2bba6:	7013      	strb	r3, [r2, #0]
			bc++;
   2bba8:	69bb      	ldr	r3, [r7, #24]
   2bbaa:	3301      	adds	r3, #1
   2bbac:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2bbae:	68fb      	ldr	r3, [r7, #12]
   2bbb0:	2201      	movs	r2, #1
   2bbb2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2bbb4:	68fb      	ldr	r3, [r7, #12]
   2bbb6:	6a1a      	ldr	r2, [r3, #32]
   2bbb8:	69bb      	ldr	r3, [r7, #24]
   2bbba:	0a5b      	lsrs	r3, r3, #9
   2bbbc:	18d2      	adds	r2, r2, r3
   2bbbe:	231f      	movs	r3, #31
   2bbc0:	18fc      	adds	r4, r7, r3
   2bbc2:	68fb      	ldr	r3, [r7, #12]
   2bbc4:	0011      	movs	r1, r2
   2bbc6:	0018      	movs	r0, r3
   2bbc8:	4b5a      	ldr	r3, [pc, #360]	; (2bd34 <put_fat+0x238>)
   2bbca:	4798      	blx	r3
   2bbcc:	0003      	movs	r3, r0
   2bbce:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bbd0:	231f      	movs	r3, #31
   2bbd2:	18fb      	adds	r3, r7, r3
   2bbd4:	781b      	ldrb	r3, [r3, #0]
   2bbd6:	2b00      	cmp	r3, #0
   2bbd8:	d000      	beq.n	2bbdc <put_fat+0xe0>
   2bbda:	e09b      	b.n	2bd14 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2bbdc:	69bb      	ldr	r3, [r7, #24]
   2bbde:	05db      	lsls	r3, r3, #23
   2bbe0:	0ddb      	lsrs	r3, r3, #23
   2bbe2:	3330      	adds	r3, #48	; 0x30
   2bbe4:	68fa      	ldr	r2, [r7, #12]
   2bbe6:	18d3      	adds	r3, r2, r3
   2bbe8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2bbea:	68bb      	ldr	r3, [r7, #8]
   2bbec:	2201      	movs	r2, #1
   2bbee:	4013      	ands	r3, r2
   2bbf0:	d003      	beq.n	2bbfa <put_fat+0xfe>
   2bbf2:	687b      	ldr	r3, [r7, #4]
   2bbf4:	091b      	lsrs	r3, r3, #4
   2bbf6:	b2db      	uxtb	r3, r3
   2bbf8:	e00e      	b.n	2bc18 <put_fat+0x11c>
   2bbfa:	697b      	ldr	r3, [r7, #20]
   2bbfc:	781b      	ldrb	r3, [r3, #0]
   2bbfe:	b25b      	sxtb	r3, r3
   2bc00:	220f      	movs	r2, #15
   2bc02:	4393      	bics	r3, r2
   2bc04:	b25a      	sxtb	r2, r3
   2bc06:	687b      	ldr	r3, [r7, #4]
   2bc08:	0a1b      	lsrs	r3, r3, #8
   2bc0a:	b25b      	sxtb	r3, r3
   2bc0c:	210f      	movs	r1, #15
   2bc0e:	400b      	ands	r3, r1
   2bc10:	b25b      	sxtb	r3, r3
   2bc12:	4313      	orrs	r3, r2
   2bc14:	b25b      	sxtb	r3, r3
   2bc16:	b2db      	uxtb	r3, r3
   2bc18:	697a      	ldr	r2, [r7, #20]
   2bc1a:	7013      	strb	r3, [r2, #0]
			break;
   2bc1c:	e07f      	b.n	2bd1e <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2bc1e:	68fb      	ldr	r3, [r7, #12]
   2bc20:	6a1a      	ldr	r2, [r3, #32]
   2bc22:	68bb      	ldr	r3, [r7, #8]
   2bc24:	0a1b      	lsrs	r3, r3, #8
   2bc26:	18d2      	adds	r2, r2, r3
   2bc28:	231f      	movs	r3, #31
   2bc2a:	18fc      	adds	r4, r7, r3
   2bc2c:	68fb      	ldr	r3, [r7, #12]
   2bc2e:	0011      	movs	r1, r2
   2bc30:	0018      	movs	r0, r3
   2bc32:	4b40      	ldr	r3, [pc, #256]	; (2bd34 <put_fat+0x238>)
   2bc34:	4798      	blx	r3
   2bc36:	0003      	movs	r3, r0
   2bc38:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bc3a:	231f      	movs	r3, #31
   2bc3c:	18fb      	adds	r3, r7, r3
   2bc3e:	781b      	ldrb	r3, [r3, #0]
   2bc40:	2b00      	cmp	r3, #0
   2bc42:	d169      	bne.n	2bd18 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2bc44:	68bb      	ldr	r3, [r7, #8]
   2bc46:	005a      	lsls	r2, r3, #1
   2bc48:	23ff      	movs	r3, #255	; 0xff
   2bc4a:	005b      	lsls	r3, r3, #1
   2bc4c:	4013      	ands	r3, r2
   2bc4e:	3330      	adds	r3, #48	; 0x30
   2bc50:	68fa      	ldr	r2, [r7, #12]
   2bc52:	18d3      	adds	r3, r2, r3
   2bc54:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2bc56:	687b      	ldr	r3, [r7, #4]
   2bc58:	b2da      	uxtb	r2, r3
   2bc5a:	697b      	ldr	r3, [r7, #20]
   2bc5c:	701a      	strb	r2, [r3, #0]
   2bc5e:	697b      	ldr	r3, [r7, #20]
   2bc60:	3301      	adds	r3, #1
   2bc62:	687a      	ldr	r2, [r7, #4]
   2bc64:	b292      	uxth	r2, r2
   2bc66:	0a12      	lsrs	r2, r2, #8
   2bc68:	b292      	uxth	r2, r2
   2bc6a:	b2d2      	uxtb	r2, r2
   2bc6c:	701a      	strb	r2, [r3, #0]
			break;
   2bc6e:	e056      	b.n	2bd1e <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2bc70:	68fb      	ldr	r3, [r7, #12]
   2bc72:	6a1a      	ldr	r2, [r3, #32]
   2bc74:	68bb      	ldr	r3, [r7, #8]
   2bc76:	09db      	lsrs	r3, r3, #7
   2bc78:	18d2      	adds	r2, r2, r3
   2bc7a:	231f      	movs	r3, #31
   2bc7c:	18fc      	adds	r4, r7, r3
   2bc7e:	68fb      	ldr	r3, [r7, #12]
   2bc80:	0011      	movs	r1, r2
   2bc82:	0018      	movs	r0, r3
   2bc84:	4b2b      	ldr	r3, [pc, #172]	; (2bd34 <put_fat+0x238>)
   2bc86:	4798      	blx	r3
   2bc88:	0003      	movs	r3, r0
   2bc8a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bc8c:	231f      	movs	r3, #31
   2bc8e:	18fb      	adds	r3, r7, r3
   2bc90:	781b      	ldrb	r3, [r3, #0]
   2bc92:	2b00      	cmp	r3, #0
   2bc94:	d142      	bne.n	2bd1c <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2bc96:	68bb      	ldr	r3, [r7, #8]
   2bc98:	009a      	lsls	r2, r3, #2
   2bc9a:	23fe      	movs	r3, #254	; 0xfe
   2bc9c:	005b      	lsls	r3, r3, #1
   2bc9e:	4013      	ands	r3, r2
   2bca0:	3330      	adds	r3, #48	; 0x30
   2bca2:	68fa      	ldr	r2, [r7, #12]
   2bca4:	18d3      	adds	r3, r2, r3
   2bca6:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2bca8:	697b      	ldr	r3, [r7, #20]
   2bcaa:	3303      	adds	r3, #3
   2bcac:	781b      	ldrb	r3, [r3, #0]
   2bcae:	061a      	lsls	r2, r3, #24
   2bcb0:	697b      	ldr	r3, [r7, #20]
   2bcb2:	3302      	adds	r3, #2
   2bcb4:	781b      	ldrb	r3, [r3, #0]
   2bcb6:	041b      	lsls	r3, r3, #16
   2bcb8:	4313      	orrs	r3, r2
   2bcba:	697a      	ldr	r2, [r7, #20]
   2bcbc:	3201      	adds	r2, #1
   2bcbe:	7812      	ldrb	r2, [r2, #0]
   2bcc0:	0212      	lsls	r2, r2, #8
   2bcc2:	4313      	orrs	r3, r2
   2bcc4:	697a      	ldr	r2, [r7, #20]
   2bcc6:	7812      	ldrb	r2, [r2, #0]
   2bcc8:	4313      	orrs	r3, r2
   2bcca:	0f1b      	lsrs	r3, r3, #28
   2bccc:	071b      	lsls	r3, r3, #28
   2bcce:	687a      	ldr	r2, [r7, #4]
   2bcd0:	4313      	orrs	r3, r2
   2bcd2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2bcd4:	687b      	ldr	r3, [r7, #4]
   2bcd6:	b2da      	uxtb	r2, r3
   2bcd8:	697b      	ldr	r3, [r7, #20]
   2bcda:	701a      	strb	r2, [r3, #0]
   2bcdc:	697b      	ldr	r3, [r7, #20]
   2bcde:	3301      	adds	r3, #1
   2bce0:	687a      	ldr	r2, [r7, #4]
   2bce2:	b292      	uxth	r2, r2
   2bce4:	0a12      	lsrs	r2, r2, #8
   2bce6:	b292      	uxth	r2, r2
   2bce8:	b2d2      	uxtb	r2, r2
   2bcea:	701a      	strb	r2, [r3, #0]
   2bcec:	697b      	ldr	r3, [r7, #20]
   2bcee:	3302      	adds	r3, #2
   2bcf0:	687a      	ldr	r2, [r7, #4]
   2bcf2:	0c12      	lsrs	r2, r2, #16
   2bcf4:	b2d2      	uxtb	r2, r2
   2bcf6:	701a      	strb	r2, [r3, #0]
   2bcf8:	697b      	ldr	r3, [r7, #20]
   2bcfa:	3303      	adds	r3, #3
   2bcfc:	687a      	ldr	r2, [r7, #4]
   2bcfe:	0e12      	lsrs	r2, r2, #24
   2bd00:	b2d2      	uxtb	r2, r2
   2bd02:	701a      	strb	r2, [r3, #0]
			break;
   2bd04:	e00b      	b.n	2bd1e <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2bd06:	231f      	movs	r3, #31
   2bd08:	18fb      	adds	r3, r7, r3
   2bd0a:	2202      	movs	r2, #2
   2bd0c:	701a      	strb	r2, [r3, #0]
   2bd0e:	e006      	b.n	2bd1e <put_fat+0x222>
			if (res != FR_OK) break;
   2bd10:	46c0      	nop			; (mov r8, r8)
   2bd12:	e004      	b.n	2bd1e <put_fat+0x222>
			if (res != FR_OK) break;
   2bd14:	46c0      	nop			; (mov r8, r8)
   2bd16:	e002      	b.n	2bd1e <put_fat+0x222>
			if (res != FR_OK) break;
   2bd18:	46c0      	nop			; (mov r8, r8)
   2bd1a:	e000      	b.n	2bd1e <put_fat+0x222>
			if (res != FR_OK) break;
   2bd1c:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2bd1e:	68fb      	ldr	r3, [r7, #12]
   2bd20:	2201      	movs	r2, #1
   2bd22:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2bd24:	231f      	movs	r3, #31
   2bd26:	18fb      	adds	r3, r7, r3
   2bd28:	781b      	ldrb	r3, [r3, #0]
}
   2bd2a:	0018      	movs	r0, r3
   2bd2c:	46bd      	mov	sp, r7
   2bd2e:	b009      	add	sp, #36	; 0x24
   2bd30:	bd90      	pop	{r4, r7, pc}
   2bd32:	46c0      	nop			; (mov r8, r8)
   2bd34:	0002b6f9 	.word	0x0002b6f9

0002bd38 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2bd38:	b590      	push	{r4, r7, lr}
   2bd3a:	b085      	sub	sp, #20
   2bd3c:	af00      	add	r7, sp, #0
   2bd3e:	6078      	str	r0, [r7, #4]
   2bd40:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2bd42:	683b      	ldr	r3, [r7, #0]
   2bd44:	2b01      	cmp	r3, #1
   2bd46:	d904      	bls.n	2bd52 <remove_chain+0x1a>
   2bd48:	687b      	ldr	r3, [r7, #4]
   2bd4a:	699a      	ldr	r2, [r3, #24]
   2bd4c:	683b      	ldr	r3, [r7, #0]
   2bd4e:	429a      	cmp	r2, r3
   2bd50:	d804      	bhi.n	2bd5c <remove_chain+0x24>
		res = FR_INT_ERR;
   2bd52:	230f      	movs	r3, #15
   2bd54:	18fb      	adds	r3, r7, r3
   2bd56:	2202      	movs	r2, #2
   2bd58:	701a      	strb	r2, [r3, #0]
   2bd5a:	e045      	b.n	2bde8 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2bd5c:	230f      	movs	r3, #15
   2bd5e:	18fb      	adds	r3, r7, r3
   2bd60:	2200      	movs	r2, #0
   2bd62:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2bd64:	e037      	b.n	2bdd6 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2bd66:	683a      	ldr	r2, [r7, #0]
   2bd68:	687b      	ldr	r3, [r7, #4]
   2bd6a:	0011      	movs	r1, r2
   2bd6c:	0018      	movs	r0, r3
   2bd6e:	4b22      	ldr	r3, [pc, #136]	; (2bdf8 <remove_chain+0xc0>)
   2bd70:	4798      	blx	r3
   2bd72:	0003      	movs	r3, r0
   2bd74:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2bd76:	68bb      	ldr	r3, [r7, #8]
   2bd78:	2b00      	cmp	r3, #0
   2bd7a:	d032      	beq.n	2bde2 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2bd7c:	68bb      	ldr	r3, [r7, #8]
   2bd7e:	2b01      	cmp	r3, #1
   2bd80:	d104      	bne.n	2bd8c <remove_chain+0x54>
   2bd82:	230f      	movs	r3, #15
   2bd84:	18fb      	adds	r3, r7, r3
   2bd86:	2202      	movs	r2, #2
   2bd88:	701a      	strb	r2, [r3, #0]
   2bd8a:	e02d      	b.n	2bde8 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2bd8c:	68bb      	ldr	r3, [r7, #8]
   2bd8e:	3301      	adds	r3, #1
   2bd90:	d104      	bne.n	2bd9c <remove_chain+0x64>
   2bd92:	230f      	movs	r3, #15
   2bd94:	18fb      	adds	r3, r7, r3
   2bd96:	2201      	movs	r2, #1
   2bd98:	701a      	strb	r2, [r3, #0]
   2bd9a:	e025      	b.n	2bde8 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2bd9c:	230f      	movs	r3, #15
   2bd9e:	18fc      	adds	r4, r7, r3
   2bda0:	6839      	ldr	r1, [r7, #0]
   2bda2:	687b      	ldr	r3, [r7, #4]
   2bda4:	2200      	movs	r2, #0
   2bda6:	0018      	movs	r0, r3
   2bda8:	4b14      	ldr	r3, [pc, #80]	; (2bdfc <remove_chain+0xc4>)
   2bdaa:	4798      	blx	r3
   2bdac:	0003      	movs	r3, r0
   2bdae:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bdb0:	230f      	movs	r3, #15
   2bdb2:	18fb      	adds	r3, r7, r3
   2bdb4:	781b      	ldrb	r3, [r3, #0]
   2bdb6:	2b00      	cmp	r3, #0
   2bdb8:	d115      	bne.n	2bde6 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2bdba:	687b      	ldr	r3, [r7, #4]
   2bdbc:	691b      	ldr	r3, [r3, #16]
   2bdbe:	3301      	adds	r3, #1
   2bdc0:	d007      	beq.n	2bdd2 <remove_chain+0x9a>
				fs->free_clust++;
   2bdc2:	687b      	ldr	r3, [r7, #4]
   2bdc4:	691b      	ldr	r3, [r3, #16]
   2bdc6:	1c5a      	adds	r2, r3, #1
   2bdc8:	687b      	ldr	r3, [r7, #4]
   2bdca:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2bdcc:	687b      	ldr	r3, [r7, #4]
   2bdce:	2201      	movs	r2, #1
   2bdd0:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2bdd2:	68bb      	ldr	r3, [r7, #8]
   2bdd4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2bdd6:	687b      	ldr	r3, [r7, #4]
   2bdd8:	699a      	ldr	r2, [r3, #24]
   2bdda:	683b      	ldr	r3, [r7, #0]
   2bddc:	429a      	cmp	r2, r3
   2bdde:	d8c2      	bhi.n	2bd66 <remove_chain+0x2e>
   2bde0:	e002      	b.n	2bde8 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2bde2:	46c0      	nop			; (mov r8, r8)
   2bde4:	e000      	b.n	2bde8 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2bde6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2bde8:	230f      	movs	r3, #15
   2bdea:	18fb      	adds	r3, r7, r3
   2bdec:	781b      	ldrb	r3, [r3, #0]
}
   2bdee:	0018      	movs	r0, r3
   2bdf0:	46bd      	mov	sp, r7
   2bdf2:	b005      	add	sp, #20
   2bdf4:	bd90      	pop	{r4, r7, pc}
   2bdf6:	46c0      	nop			; (mov r8, r8)
   2bdf8:	0002b991 	.word	0x0002b991
   2bdfc:	0002bafd 	.word	0x0002bafd

0002be00 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2be00:	b590      	push	{r4, r7, lr}
   2be02:	b087      	sub	sp, #28
   2be04:	af00      	add	r7, sp, #0
   2be06:	6078      	str	r0, [r7, #4]
   2be08:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2be0a:	683b      	ldr	r3, [r7, #0]
   2be0c:	2b00      	cmp	r3, #0
   2be0e:	d10d      	bne.n	2be2c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2be10:	687b      	ldr	r3, [r7, #4]
   2be12:	68db      	ldr	r3, [r3, #12]
   2be14:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2be16:	693b      	ldr	r3, [r7, #16]
   2be18:	2b00      	cmp	r3, #0
   2be1a:	d004      	beq.n	2be26 <create_chain+0x26>
   2be1c:	687b      	ldr	r3, [r7, #4]
   2be1e:	699a      	ldr	r2, [r3, #24]
   2be20:	693b      	ldr	r3, [r7, #16]
   2be22:	429a      	cmp	r2, r3
   2be24:	d818      	bhi.n	2be58 <create_chain+0x58>
   2be26:	2301      	movs	r3, #1
   2be28:	613b      	str	r3, [r7, #16]
   2be2a:	e015      	b.n	2be58 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2be2c:	683a      	ldr	r2, [r7, #0]
   2be2e:	687b      	ldr	r3, [r7, #4]
   2be30:	0011      	movs	r1, r2
   2be32:	0018      	movs	r0, r3
   2be34:	4b3e      	ldr	r3, [pc, #248]	; (2bf30 <create_chain+0x130>)
   2be36:	4798      	blx	r3
   2be38:	0003      	movs	r3, r0
   2be3a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2be3c:	68bb      	ldr	r3, [r7, #8]
   2be3e:	2b01      	cmp	r3, #1
   2be40:	d801      	bhi.n	2be46 <create_chain+0x46>
   2be42:	2301      	movs	r3, #1
   2be44:	e070      	b.n	2bf28 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2be46:	687b      	ldr	r3, [r7, #4]
   2be48:	699a      	ldr	r2, [r3, #24]
   2be4a:	68bb      	ldr	r3, [r7, #8]
   2be4c:	429a      	cmp	r2, r3
   2be4e:	d901      	bls.n	2be54 <create_chain+0x54>
   2be50:	68bb      	ldr	r3, [r7, #8]
   2be52:	e069      	b.n	2bf28 <create_chain+0x128>
		scl = clst;
   2be54:	683b      	ldr	r3, [r7, #0]
   2be56:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2be58:	693b      	ldr	r3, [r7, #16]
   2be5a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2be5c:	697b      	ldr	r3, [r7, #20]
   2be5e:	3301      	adds	r3, #1
   2be60:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2be62:	687b      	ldr	r3, [r7, #4]
   2be64:	699a      	ldr	r2, [r3, #24]
   2be66:	697b      	ldr	r3, [r7, #20]
   2be68:	429a      	cmp	r2, r3
   2be6a:	d807      	bhi.n	2be7c <create_chain+0x7c>
			ncl = 2;
   2be6c:	2302      	movs	r3, #2
   2be6e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2be70:	697a      	ldr	r2, [r7, #20]
   2be72:	693b      	ldr	r3, [r7, #16]
   2be74:	429a      	cmp	r2, r3
   2be76:	d901      	bls.n	2be7c <create_chain+0x7c>
   2be78:	2300      	movs	r3, #0
   2be7a:	e055      	b.n	2bf28 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2be7c:	697a      	ldr	r2, [r7, #20]
   2be7e:	687b      	ldr	r3, [r7, #4]
   2be80:	0011      	movs	r1, r2
   2be82:	0018      	movs	r0, r3
   2be84:	4b2a      	ldr	r3, [pc, #168]	; (2bf30 <create_chain+0x130>)
   2be86:	4798      	blx	r3
   2be88:	0003      	movs	r3, r0
   2be8a:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2be8c:	68bb      	ldr	r3, [r7, #8]
   2be8e:	2b00      	cmp	r3, #0
   2be90:	d00d      	beq.n	2beae <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2be92:	68bb      	ldr	r3, [r7, #8]
   2be94:	3301      	adds	r3, #1
   2be96:	d002      	beq.n	2be9e <create_chain+0x9e>
   2be98:	68bb      	ldr	r3, [r7, #8]
   2be9a:	2b01      	cmp	r3, #1
   2be9c:	d101      	bne.n	2bea2 <create_chain+0xa2>
			return cs;
   2be9e:	68bb      	ldr	r3, [r7, #8]
   2bea0:	e042      	b.n	2bf28 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2bea2:	697a      	ldr	r2, [r7, #20]
   2bea4:	693b      	ldr	r3, [r7, #16]
   2bea6:	429a      	cmp	r2, r3
   2bea8:	d1d8      	bne.n	2be5c <create_chain+0x5c>
   2beaa:	2300      	movs	r3, #0
   2beac:	e03c      	b.n	2bf28 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2beae:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2beb0:	230f      	movs	r3, #15
   2beb2:	18fc      	adds	r4, r7, r3
   2beb4:	4a1f      	ldr	r2, [pc, #124]	; (2bf34 <create_chain+0x134>)
   2beb6:	6979      	ldr	r1, [r7, #20]
   2beb8:	687b      	ldr	r3, [r7, #4]
   2beba:	0018      	movs	r0, r3
   2bebc:	4b1e      	ldr	r3, [pc, #120]	; (2bf38 <create_chain+0x138>)
   2bebe:	4798      	blx	r3
   2bec0:	0003      	movs	r3, r0
   2bec2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2bec4:	230f      	movs	r3, #15
   2bec6:	18fb      	adds	r3, r7, r3
   2bec8:	781b      	ldrb	r3, [r3, #0]
   2beca:	2b00      	cmp	r3, #0
   2becc:	d10c      	bne.n	2bee8 <create_chain+0xe8>
   2bece:	683b      	ldr	r3, [r7, #0]
   2bed0:	2b00      	cmp	r3, #0
   2bed2:	d009      	beq.n	2bee8 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2bed4:	230f      	movs	r3, #15
   2bed6:	18fc      	adds	r4, r7, r3
   2bed8:	697a      	ldr	r2, [r7, #20]
   2beda:	6839      	ldr	r1, [r7, #0]
   2bedc:	687b      	ldr	r3, [r7, #4]
   2bede:	0018      	movs	r0, r3
   2bee0:	4b15      	ldr	r3, [pc, #84]	; (2bf38 <create_chain+0x138>)
   2bee2:	4798      	blx	r3
   2bee4:	0003      	movs	r3, r0
   2bee6:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2bee8:	230f      	movs	r3, #15
   2beea:	18fb      	adds	r3, r7, r3
   2beec:	781b      	ldrb	r3, [r3, #0]
   2beee:	2b00      	cmp	r3, #0
   2bef0:	d10f      	bne.n	2bf12 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2bef2:	687b      	ldr	r3, [r7, #4]
   2bef4:	697a      	ldr	r2, [r7, #20]
   2bef6:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2bef8:	687b      	ldr	r3, [r7, #4]
   2befa:	691b      	ldr	r3, [r3, #16]
   2befc:	3301      	adds	r3, #1
   2befe:	d012      	beq.n	2bf26 <create_chain+0x126>
			fs->free_clust--;
   2bf00:	687b      	ldr	r3, [r7, #4]
   2bf02:	691b      	ldr	r3, [r3, #16]
   2bf04:	1e5a      	subs	r2, r3, #1
   2bf06:	687b      	ldr	r3, [r7, #4]
   2bf08:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2bf0a:	687b      	ldr	r3, [r7, #4]
   2bf0c:	2201      	movs	r2, #1
   2bf0e:	715a      	strb	r2, [r3, #5]
   2bf10:	e009      	b.n	2bf26 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2bf12:	230f      	movs	r3, #15
   2bf14:	18fb      	adds	r3, r7, r3
   2bf16:	781b      	ldrb	r3, [r3, #0]
   2bf18:	2b01      	cmp	r3, #1
   2bf1a:	d102      	bne.n	2bf22 <create_chain+0x122>
   2bf1c:	2301      	movs	r3, #1
   2bf1e:	425b      	negs	r3, r3
   2bf20:	e000      	b.n	2bf24 <create_chain+0x124>
   2bf22:	2301      	movs	r3, #1
   2bf24:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2bf26:	697b      	ldr	r3, [r7, #20]
}
   2bf28:	0018      	movs	r0, r3
   2bf2a:	46bd      	mov	sp, r7
   2bf2c:	b007      	add	sp, #28
   2bf2e:	bd90      	pop	{r4, r7, pc}
   2bf30:	0002b991 	.word	0x0002b991
   2bf34:	0fffffff 	.word	0x0fffffff
   2bf38:	0002bafd 	.word	0x0002bafd

0002bf3c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2bf3c:	b580      	push	{r7, lr}
   2bf3e:	b084      	sub	sp, #16
   2bf40:	af00      	add	r7, sp, #0
   2bf42:	6078      	str	r0, [r7, #4]
   2bf44:	000a      	movs	r2, r1
   2bf46:	1cbb      	adds	r3, r7, #2
   2bf48:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2bf4a:	687b      	ldr	r3, [r7, #4]
   2bf4c:	1cba      	adds	r2, r7, #2
   2bf4e:	8812      	ldrh	r2, [r2, #0]
   2bf50:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2bf52:	687b      	ldr	r3, [r7, #4]
   2bf54:	689b      	ldr	r3, [r3, #8]
   2bf56:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2bf58:	68fb      	ldr	r3, [r7, #12]
   2bf5a:	2b01      	cmp	r3, #1
   2bf5c:	d005      	beq.n	2bf6a <dir_sdi+0x2e>
   2bf5e:	687b      	ldr	r3, [r7, #4]
   2bf60:	681b      	ldr	r3, [r3, #0]
   2bf62:	699a      	ldr	r2, [r3, #24]
   2bf64:	68fb      	ldr	r3, [r7, #12]
   2bf66:	429a      	cmp	r2, r3
   2bf68:	d801      	bhi.n	2bf6e <dir_sdi+0x32>
		return FR_INT_ERR;
   2bf6a:	2302      	movs	r3, #2
   2bf6c:	e075      	b.n	2c05a <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2bf6e:	68fb      	ldr	r3, [r7, #12]
   2bf70:	2b00      	cmp	r3, #0
   2bf72:	d108      	bne.n	2bf86 <dir_sdi+0x4a>
   2bf74:	687b      	ldr	r3, [r7, #4]
   2bf76:	681b      	ldr	r3, [r3, #0]
   2bf78:	781b      	ldrb	r3, [r3, #0]
   2bf7a:	2b03      	cmp	r3, #3
   2bf7c:	d103      	bne.n	2bf86 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2bf7e:	687b      	ldr	r3, [r7, #4]
   2bf80:	681b      	ldr	r3, [r3, #0]
   2bf82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2bf84:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2bf86:	68fb      	ldr	r3, [r7, #12]
   2bf88:	2b00      	cmp	r3, #0
   2bf8a:	d116      	bne.n	2bfba <dir_sdi+0x7e>
		dj->clust = clst;
   2bf8c:	687b      	ldr	r3, [r7, #4]
   2bf8e:	68fa      	ldr	r2, [r7, #12]
   2bf90:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2bf92:	687b      	ldr	r3, [r7, #4]
   2bf94:	681b      	ldr	r3, [r3, #0]
   2bf96:	891b      	ldrh	r3, [r3, #8]
   2bf98:	1cba      	adds	r2, r7, #2
   2bf9a:	8812      	ldrh	r2, [r2, #0]
   2bf9c:	429a      	cmp	r2, r3
   2bf9e:	d301      	bcc.n	2bfa4 <dir_sdi+0x68>
			return FR_INT_ERR;
   2bfa0:	2302      	movs	r3, #2
   2bfa2:	e05a      	b.n	2c05a <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2bfa4:	687b      	ldr	r3, [r7, #4]
   2bfa6:	681b      	ldr	r3, [r3, #0]
   2bfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2bfaa:	1cba      	adds	r2, r7, #2
   2bfac:	8812      	ldrh	r2, [r2, #0]
   2bfae:	0912      	lsrs	r2, r2, #4
   2bfb0:	b292      	uxth	r2, r2
   2bfb2:	189a      	adds	r2, r3, r2
   2bfb4:	687b      	ldr	r3, [r7, #4]
   2bfb6:	611a      	str	r2, [r3, #16]
   2bfb8:	e042      	b.n	2c040 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2bfba:	687b      	ldr	r3, [r7, #4]
   2bfbc:	681b      	ldr	r3, [r3, #0]
   2bfbe:	789b      	ldrb	r3, [r3, #2]
   2bfc0:	b29a      	uxth	r2, r3
   2bfc2:	230a      	movs	r3, #10
   2bfc4:	18fb      	adds	r3, r7, r3
   2bfc6:	0112      	lsls	r2, r2, #4
   2bfc8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2bfca:	e020      	b.n	2c00e <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2bfcc:	687b      	ldr	r3, [r7, #4]
   2bfce:	681b      	ldr	r3, [r3, #0]
   2bfd0:	68fa      	ldr	r2, [r7, #12]
   2bfd2:	0011      	movs	r1, r2
   2bfd4:	0018      	movs	r0, r3
   2bfd6:	4b23      	ldr	r3, [pc, #140]	; (2c064 <dir_sdi+0x128>)
   2bfd8:	4798      	blx	r3
   2bfda:	0003      	movs	r3, r0
   2bfdc:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2bfde:	68fb      	ldr	r3, [r7, #12]
   2bfe0:	3301      	adds	r3, #1
   2bfe2:	d101      	bne.n	2bfe8 <dir_sdi+0xac>
   2bfe4:	2301      	movs	r3, #1
   2bfe6:	e038      	b.n	2c05a <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2bfe8:	68fb      	ldr	r3, [r7, #12]
   2bfea:	2b01      	cmp	r3, #1
   2bfec:	d905      	bls.n	2bffa <dir_sdi+0xbe>
   2bfee:	687b      	ldr	r3, [r7, #4]
   2bff0:	681b      	ldr	r3, [r3, #0]
   2bff2:	699a      	ldr	r2, [r3, #24]
   2bff4:	68fb      	ldr	r3, [r7, #12]
   2bff6:	429a      	cmp	r2, r3
   2bff8:	d801      	bhi.n	2bffe <dir_sdi+0xc2>
				return FR_INT_ERR;
   2bffa:	2302      	movs	r3, #2
   2bffc:	e02d      	b.n	2c05a <dir_sdi+0x11e>
			idx -= ic;
   2bffe:	1cbb      	adds	r3, r7, #2
   2c000:	1cb9      	adds	r1, r7, #2
   2c002:	220a      	movs	r2, #10
   2c004:	18ba      	adds	r2, r7, r2
   2c006:	8809      	ldrh	r1, [r1, #0]
   2c008:	8812      	ldrh	r2, [r2, #0]
   2c00a:	1a8a      	subs	r2, r1, r2
   2c00c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2c00e:	1cba      	adds	r2, r7, #2
   2c010:	230a      	movs	r3, #10
   2c012:	18fb      	adds	r3, r7, r3
   2c014:	8812      	ldrh	r2, [r2, #0]
   2c016:	881b      	ldrh	r3, [r3, #0]
   2c018:	429a      	cmp	r2, r3
   2c01a:	d2d7      	bcs.n	2bfcc <dir_sdi+0x90>
		}
		dj->clust = clst;
   2c01c:	687b      	ldr	r3, [r7, #4]
   2c01e:	68fa      	ldr	r2, [r7, #12]
   2c020:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2c022:	687b      	ldr	r3, [r7, #4]
   2c024:	681b      	ldr	r3, [r3, #0]
   2c026:	68fa      	ldr	r2, [r7, #12]
   2c028:	0011      	movs	r1, r2
   2c02a:	0018      	movs	r0, r3
   2c02c:	4b0e      	ldr	r3, [pc, #56]	; (2c068 <dir_sdi+0x12c>)
   2c02e:	4798      	blx	r3
   2c030:	0002      	movs	r2, r0
   2c032:	1cbb      	adds	r3, r7, #2
   2c034:	881b      	ldrh	r3, [r3, #0]
   2c036:	091b      	lsrs	r3, r3, #4
   2c038:	b29b      	uxth	r3, r3
   2c03a:	18d2      	adds	r2, r2, r3
   2c03c:	687b      	ldr	r3, [r7, #4]
   2c03e:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2c040:	687b      	ldr	r3, [r7, #4]
   2c042:	681b      	ldr	r3, [r3, #0]
   2c044:	3330      	adds	r3, #48	; 0x30
   2c046:	001a      	movs	r2, r3
   2c048:	1cbb      	adds	r3, r7, #2
   2c04a:	881b      	ldrh	r3, [r3, #0]
   2c04c:	210f      	movs	r1, #15
   2c04e:	400b      	ands	r3, r1
   2c050:	015b      	lsls	r3, r3, #5
   2c052:	18d2      	adds	r2, r2, r3
   2c054:	687b      	ldr	r3, [r7, #4]
   2c056:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2c058:	2300      	movs	r3, #0
}
   2c05a:	0018      	movs	r0, r3
   2c05c:	46bd      	mov	sp, r7
   2c05e:	b004      	add	sp, #16
   2c060:	bd80      	pop	{r7, pc}
   2c062:	46c0      	nop			; (mov r8, r8)
   2c064:	0002b991 	.word	0x0002b991
   2c068:	0002b959 	.word	0x0002b959

0002c06c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2c06c:	b590      	push	{r4, r7, lr}
   2c06e:	b085      	sub	sp, #20
   2c070:	af00      	add	r7, sp, #0
   2c072:	6078      	str	r0, [r7, #4]
   2c074:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2c076:	687b      	ldr	r3, [r7, #4]
   2c078:	88da      	ldrh	r2, [r3, #6]
   2c07a:	2308      	movs	r3, #8
   2c07c:	18fb      	adds	r3, r7, r3
   2c07e:	3201      	adds	r2, #1
   2c080:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2c082:	2308      	movs	r3, #8
   2c084:	18fb      	adds	r3, r7, r3
   2c086:	881b      	ldrh	r3, [r3, #0]
   2c088:	2b00      	cmp	r3, #0
   2c08a:	d003      	beq.n	2c094 <dir_next+0x28>
   2c08c:	687b      	ldr	r3, [r7, #4]
   2c08e:	691b      	ldr	r3, [r3, #16]
   2c090:	2b00      	cmp	r3, #0
   2c092:	d101      	bne.n	2c098 <dir_next+0x2c>
		return FR_NO_FILE;
   2c094:	2304      	movs	r3, #4
   2c096:	e0d2      	b.n	2c23e <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2c098:	2308      	movs	r3, #8
   2c09a:	18fb      	adds	r3, r7, r3
   2c09c:	881b      	ldrh	r3, [r3, #0]
   2c09e:	220f      	movs	r2, #15
   2c0a0:	4013      	ands	r3, r2
   2c0a2:	b29b      	uxth	r3, r3
   2c0a4:	2b00      	cmp	r3, #0
   2c0a6:	d000      	beq.n	2c0aa <dir_next+0x3e>
   2c0a8:	e0b6      	b.n	2c218 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2c0aa:	687b      	ldr	r3, [r7, #4]
   2c0ac:	691b      	ldr	r3, [r3, #16]
   2c0ae:	1c5a      	adds	r2, r3, #1
   2c0b0:	687b      	ldr	r3, [r7, #4]
   2c0b2:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2c0b4:	687b      	ldr	r3, [r7, #4]
   2c0b6:	68db      	ldr	r3, [r3, #12]
   2c0b8:	2b00      	cmp	r3, #0
   2c0ba:	d10a      	bne.n	2c0d2 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2c0bc:	687b      	ldr	r3, [r7, #4]
   2c0be:	681b      	ldr	r3, [r3, #0]
   2c0c0:	891b      	ldrh	r3, [r3, #8]
   2c0c2:	2208      	movs	r2, #8
   2c0c4:	18ba      	adds	r2, r7, r2
   2c0c6:	8812      	ldrh	r2, [r2, #0]
   2c0c8:	429a      	cmp	r2, r3
   2c0ca:	d200      	bcs.n	2c0ce <dir_next+0x62>
   2c0cc:	e0a4      	b.n	2c218 <dir_next+0x1ac>
				return FR_NO_FILE;
   2c0ce:	2304      	movs	r3, #4
   2c0d0:	e0b5      	b.n	2c23e <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2c0d2:	2308      	movs	r3, #8
   2c0d4:	18fb      	adds	r3, r7, r3
   2c0d6:	881b      	ldrh	r3, [r3, #0]
   2c0d8:	091b      	lsrs	r3, r3, #4
   2c0da:	b29b      	uxth	r3, r3
   2c0dc:	001a      	movs	r2, r3
   2c0de:	687b      	ldr	r3, [r7, #4]
   2c0e0:	681b      	ldr	r3, [r3, #0]
   2c0e2:	789b      	ldrb	r3, [r3, #2]
   2c0e4:	3b01      	subs	r3, #1
   2c0e6:	4013      	ands	r3, r2
   2c0e8:	d000      	beq.n	2c0ec <dir_next+0x80>
   2c0ea:	e095      	b.n	2c218 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2c0ec:	687b      	ldr	r3, [r7, #4]
   2c0ee:	681a      	ldr	r2, [r3, #0]
   2c0f0:	687b      	ldr	r3, [r7, #4]
   2c0f2:	68db      	ldr	r3, [r3, #12]
   2c0f4:	0019      	movs	r1, r3
   2c0f6:	0010      	movs	r0, r2
   2c0f8:	4b53      	ldr	r3, [pc, #332]	; (2c248 <dir_next+0x1dc>)
   2c0fa:	4798      	blx	r3
   2c0fc:	0003      	movs	r3, r0
   2c0fe:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2c100:	68fb      	ldr	r3, [r7, #12]
   2c102:	2b01      	cmp	r3, #1
   2c104:	d801      	bhi.n	2c10a <dir_next+0x9e>
   2c106:	2302      	movs	r3, #2
   2c108:	e099      	b.n	2c23e <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2c10a:	68fb      	ldr	r3, [r7, #12]
   2c10c:	3301      	adds	r3, #1
   2c10e:	d101      	bne.n	2c114 <dir_next+0xa8>
   2c110:	2301      	movs	r3, #1
   2c112:	e094      	b.n	2c23e <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2c114:	687b      	ldr	r3, [r7, #4]
   2c116:	681b      	ldr	r3, [r3, #0]
   2c118:	699a      	ldr	r2, [r3, #24]
   2c11a:	68fb      	ldr	r3, [r7, #12]
   2c11c:	429a      	cmp	r2, r3
   2c11e:	d900      	bls.n	2c122 <dir_next+0xb6>
   2c120:	e06d      	b.n	2c1fe <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2c122:	683b      	ldr	r3, [r7, #0]
   2c124:	2b00      	cmp	r3, #0
   2c126:	d101      	bne.n	2c12c <dir_next+0xc0>
   2c128:	2304      	movs	r3, #4
   2c12a:	e088      	b.n	2c23e <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2c12c:	687b      	ldr	r3, [r7, #4]
   2c12e:	681a      	ldr	r2, [r3, #0]
   2c130:	687b      	ldr	r3, [r7, #4]
   2c132:	68db      	ldr	r3, [r3, #12]
   2c134:	0019      	movs	r1, r3
   2c136:	0010      	movs	r0, r2
   2c138:	4b44      	ldr	r3, [pc, #272]	; (2c24c <dir_next+0x1e0>)
   2c13a:	4798      	blx	r3
   2c13c:	0003      	movs	r3, r0
   2c13e:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2c140:	68fb      	ldr	r3, [r7, #12]
   2c142:	2b00      	cmp	r3, #0
   2c144:	d101      	bne.n	2c14a <dir_next+0xde>
   2c146:	2307      	movs	r3, #7
   2c148:	e079      	b.n	2c23e <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2c14a:	68fb      	ldr	r3, [r7, #12]
   2c14c:	2b01      	cmp	r3, #1
   2c14e:	d101      	bne.n	2c154 <dir_next+0xe8>
   2c150:	2302      	movs	r3, #2
   2c152:	e074      	b.n	2c23e <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2c154:	68fb      	ldr	r3, [r7, #12]
   2c156:	3301      	adds	r3, #1
   2c158:	d101      	bne.n	2c15e <dir_next+0xf2>
   2c15a:	2301      	movs	r3, #1
   2c15c:	e06f      	b.n	2c23e <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2c15e:	687b      	ldr	r3, [r7, #4]
   2c160:	681b      	ldr	r3, [r3, #0]
   2c162:	2100      	movs	r1, #0
   2c164:	0018      	movs	r0, r3
   2c166:	4b3a      	ldr	r3, [pc, #232]	; (2c250 <dir_next+0x1e4>)
   2c168:	4798      	blx	r3
   2c16a:	1e03      	subs	r3, r0, #0
   2c16c:	d001      	beq.n	2c172 <dir_next+0x106>
   2c16e:	2301      	movs	r3, #1
   2c170:	e065      	b.n	2c23e <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2c172:	687b      	ldr	r3, [r7, #4]
   2c174:	681b      	ldr	r3, [r3, #0]
   2c176:	3330      	adds	r3, #48	; 0x30
   2c178:	0018      	movs	r0, r3
   2c17a:	2380      	movs	r3, #128	; 0x80
   2c17c:	009b      	lsls	r3, r3, #2
   2c17e:	001a      	movs	r2, r3
   2c180:	2100      	movs	r1, #0
   2c182:	4b34      	ldr	r3, [pc, #208]	; (2c254 <dir_next+0x1e8>)
   2c184:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2c186:	687b      	ldr	r3, [r7, #4]
   2c188:	681c      	ldr	r4, [r3, #0]
   2c18a:	687b      	ldr	r3, [r7, #4]
   2c18c:	681b      	ldr	r3, [r3, #0]
   2c18e:	68fa      	ldr	r2, [r7, #12]
   2c190:	0011      	movs	r1, r2
   2c192:	0018      	movs	r0, r3
   2c194:	4b30      	ldr	r3, [pc, #192]	; (2c258 <dir_next+0x1ec>)
   2c196:	4798      	blx	r3
   2c198:	0003      	movs	r3, r0
   2c19a:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2c19c:	230b      	movs	r3, #11
   2c19e:	18fb      	adds	r3, r7, r3
   2c1a0:	2200      	movs	r2, #0
   2c1a2:	701a      	strb	r2, [r3, #0]
   2c1a4:	e019      	b.n	2c1da <dir_next+0x16e>
						dj->fs->wflag = 1;
   2c1a6:	687b      	ldr	r3, [r7, #4]
   2c1a8:	681b      	ldr	r3, [r3, #0]
   2c1aa:	2201      	movs	r2, #1
   2c1ac:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2c1ae:	687b      	ldr	r3, [r7, #4]
   2c1b0:	681b      	ldr	r3, [r3, #0]
   2c1b2:	2100      	movs	r1, #0
   2c1b4:	0018      	movs	r0, r3
   2c1b6:	4b26      	ldr	r3, [pc, #152]	; (2c250 <dir_next+0x1e4>)
   2c1b8:	4798      	blx	r3
   2c1ba:	1e03      	subs	r3, r0, #0
   2c1bc:	d001      	beq.n	2c1c2 <dir_next+0x156>
   2c1be:	2301      	movs	r3, #1
   2c1c0:	e03d      	b.n	2c23e <dir_next+0x1d2>
						dj->fs->winsect++;
   2c1c2:	687b      	ldr	r3, [r7, #4]
   2c1c4:	681b      	ldr	r3, [r3, #0]
   2c1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c1c8:	3201      	adds	r2, #1
   2c1ca:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2c1cc:	230b      	movs	r3, #11
   2c1ce:	18fb      	adds	r3, r7, r3
   2c1d0:	781a      	ldrb	r2, [r3, #0]
   2c1d2:	230b      	movs	r3, #11
   2c1d4:	18fb      	adds	r3, r7, r3
   2c1d6:	3201      	adds	r2, #1
   2c1d8:	701a      	strb	r2, [r3, #0]
   2c1da:	687b      	ldr	r3, [r7, #4]
   2c1dc:	681b      	ldr	r3, [r3, #0]
   2c1de:	789b      	ldrb	r3, [r3, #2]
   2c1e0:	220b      	movs	r2, #11
   2c1e2:	18ba      	adds	r2, r7, r2
   2c1e4:	7812      	ldrb	r2, [r2, #0]
   2c1e6:	429a      	cmp	r2, r3
   2c1e8:	d3dd      	bcc.n	2c1a6 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2c1ea:	687b      	ldr	r3, [r7, #4]
   2c1ec:	681b      	ldr	r3, [r3, #0]
   2c1ee:	687a      	ldr	r2, [r7, #4]
   2c1f0:	6812      	ldr	r2, [r2, #0]
   2c1f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2c1f4:	220b      	movs	r2, #11
   2c1f6:	18ba      	adds	r2, r7, r2
   2c1f8:	7812      	ldrb	r2, [r2, #0]
   2c1fa:	1a8a      	subs	r2, r1, r2
   2c1fc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2c1fe:	687b      	ldr	r3, [r7, #4]
   2c200:	68fa      	ldr	r2, [r7, #12]
   2c202:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2c204:	687b      	ldr	r3, [r7, #4]
   2c206:	681b      	ldr	r3, [r3, #0]
   2c208:	68fa      	ldr	r2, [r7, #12]
   2c20a:	0011      	movs	r1, r2
   2c20c:	0018      	movs	r0, r3
   2c20e:	4b12      	ldr	r3, [pc, #72]	; (2c258 <dir_next+0x1ec>)
   2c210:	4798      	blx	r3
   2c212:	0002      	movs	r2, r0
   2c214:	687b      	ldr	r3, [r7, #4]
   2c216:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2c218:	687b      	ldr	r3, [r7, #4]
   2c21a:	2208      	movs	r2, #8
   2c21c:	18ba      	adds	r2, r7, r2
   2c21e:	8812      	ldrh	r2, [r2, #0]
   2c220:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2c222:	687b      	ldr	r3, [r7, #4]
   2c224:	681b      	ldr	r3, [r3, #0]
   2c226:	3330      	adds	r3, #48	; 0x30
   2c228:	001a      	movs	r2, r3
   2c22a:	2308      	movs	r3, #8
   2c22c:	18fb      	adds	r3, r7, r3
   2c22e:	881b      	ldrh	r3, [r3, #0]
   2c230:	210f      	movs	r1, #15
   2c232:	400b      	ands	r3, r1
   2c234:	015b      	lsls	r3, r3, #5
   2c236:	18d2      	adds	r2, r2, r3
   2c238:	687b      	ldr	r3, [r7, #4]
   2c23a:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2c23c:	2300      	movs	r3, #0
}
   2c23e:	0018      	movs	r0, r3
   2c240:	46bd      	mov	sp, r7
   2c242:	b005      	add	sp, #20
   2c244:	bd90      	pop	{r4, r7, pc}
   2c246:	46c0      	nop			; (mov r8, r8)
   2c248:	0002b991 	.word	0x0002b991
   2c24c:	0002be01 	.word	0x0002be01
   2c250:	0002b6f9 	.word	0x0002b6f9
   2c254:	0002b64d 	.word	0x0002b64d
   2c258:	0002b959 	.word	0x0002b959

0002c25c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2c25c:	b590      	push	{r4, r7, lr}
   2c25e:	b087      	sub	sp, #28
   2c260:	af00      	add	r7, sp, #0
   2c262:	6078      	str	r0, [r7, #4]
   2c264:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2c266:	683b      	ldr	r3, [r7, #0]
   2c268:	781b      	ldrb	r3, [r3, #0]
   2c26a:	001a      	movs	r2, r3
   2c26c:	2340      	movs	r3, #64	; 0x40
   2c26e:	439a      	bics	r2, r3
   2c270:	0013      	movs	r3, r2
   2c272:	1e5a      	subs	r2, r3, #1
   2c274:	0013      	movs	r3, r2
   2c276:	005b      	lsls	r3, r3, #1
   2c278:	189b      	adds	r3, r3, r2
   2c27a:	009b      	lsls	r3, r3, #2
   2c27c:	189b      	adds	r3, r3, r2
   2c27e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2c280:	2300      	movs	r3, #0
   2c282:	613b      	str	r3, [r7, #16]
   2c284:	230e      	movs	r3, #14
   2c286:	18fb      	adds	r3, r7, r3
   2c288:	2201      	movs	r2, #1
   2c28a:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2c28c:	4a31      	ldr	r2, [pc, #196]	; (2c354 <cmp_lfn+0xf8>)
   2c28e:	693b      	ldr	r3, [r7, #16]
   2c290:	18d3      	adds	r3, r2, r3
   2c292:	781b      	ldrb	r3, [r3, #0]
   2c294:	3301      	adds	r3, #1
   2c296:	683a      	ldr	r2, [r7, #0]
   2c298:	18d3      	adds	r3, r2, r3
   2c29a:	781b      	ldrb	r3, [r3, #0]
   2c29c:	021b      	lsls	r3, r3, #8
   2c29e:	b21a      	sxth	r2, r3
   2c2a0:	492c      	ldr	r1, [pc, #176]	; (2c354 <cmp_lfn+0xf8>)
   2c2a2:	693b      	ldr	r3, [r7, #16]
   2c2a4:	18cb      	adds	r3, r1, r3
   2c2a6:	781b      	ldrb	r3, [r3, #0]
   2c2a8:	0019      	movs	r1, r3
   2c2aa:	683b      	ldr	r3, [r7, #0]
   2c2ac:	185b      	adds	r3, r3, r1
   2c2ae:	781b      	ldrb	r3, [r3, #0]
   2c2b0:	b21b      	sxth	r3, r3
   2c2b2:	4313      	orrs	r3, r2
   2c2b4:	b21a      	sxth	r2, r3
   2c2b6:	230c      	movs	r3, #12
   2c2b8:	18fb      	adds	r3, r7, r3
   2c2ba:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2c2bc:	230e      	movs	r3, #14
   2c2be:	18fb      	adds	r3, r7, r3
   2c2c0:	881b      	ldrh	r3, [r3, #0]
   2c2c2:	2b00      	cmp	r3, #0
   2c2c4:	d01f      	beq.n	2c306 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2c2c6:	230e      	movs	r3, #14
   2c2c8:	18fc      	adds	r4, r7, r3
   2c2ca:	230c      	movs	r3, #12
   2c2cc:	18fb      	adds	r3, r7, r3
   2c2ce:	881b      	ldrh	r3, [r3, #0]
   2c2d0:	0018      	movs	r0, r3
   2c2d2:	4b21      	ldr	r3, [pc, #132]	; (2c358 <cmp_lfn+0xfc>)
   2c2d4:	4798      	blx	r3
   2c2d6:	0003      	movs	r3, r0
   2c2d8:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2c2da:	697b      	ldr	r3, [r7, #20]
   2c2dc:	2bfe      	cmp	r3, #254	; 0xfe
   2c2de:	d810      	bhi.n	2c302 <cmp_lfn+0xa6>
   2c2e0:	697b      	ldr	r3, [r7, #20]
   2c2e2:	1c5a      	adds	r2, r3, #1
   2c2e4:	617a      	str	r2, [r7, #20]
   2c2e6:	005b      	lsls	r3, r3, #1
   2c2e8:	687a      	ldr	r2, [r7, #4]
   2c2ea:	18d3      	adds	r3, r2, r3
   2c2ec:	881b      	ldrh	r3, [r3, #0]
   2c2ee:	0018      	movs	r0, r3
   2c2f0:	4b19      	ldr	r3, [pc, #100]	; (2c358 <cmp_lfn+0xfc>)
   2c2f2:	4798      	blx	r3
   2c2f4:	0003      	movs	r3, r0
   2c2f6:	001a      	movs	r2, r3
   2c2f8:	230e      	movs	r3, #14
   2c2fa:	18fb      	adds	r3, r7, r3
   2c2fc:	881b      	ldrh	r3, [r3, #0]
   2c2fe:	4293      	cmp	r3, r2
   2c300:	d009      	beq.n	2c316 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2c302:	2300      	movs	r3, #0
   2c304:	e022      	b.n	2c34c <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2c306:	230c      	movs	r3, #12
   2c308:	18fb      	adds	r3, r7, r3
   2c30a:	881b      	ldrh	r3, [r3, #0]
   2c30c:	4a13      	ldr	r2, [pc, #76]	; (2c35c <cmp_lfn+0x100>)
   2c30e:	4293      	cmp	r3, r2
   2c310:	d001      	beq.n	2c316 <cmp_lfn+0xba>
   2c312:	2300      	movs	r3, #0
   2c314:	e01a      	b.n	2c34c <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2c316:	693b      	ldr	r3, [r7, #16]
   2c318:	3301      	adds	r3, #1
   2c31a:	613b      	str	r3, [r7, #16]
   2c31c:	693b      	ldr	r3, [r7, #16]
   2c31e:	2b0c      	cmp	r3, #12
   2c320:	d9b4      	bls.n	2c28c <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2c322:	683b      	ldr	r3, [r7, #0]
   2c324:	781b      	ldrb	r3, [r3, #0]
   2c326:	001a      	movs	r2, r3
   2c328:	2340      	movs	r3, #64	; 0x40
   2c32a:	4013      	ands	r3, r2
   2c32c:	d00d      	beq.n	2c34a <cmp_lfn+0xee>
   2c32e:	230e      	movs	r3, #14
   2c330:	18fb      	adds	r3, r7, r3
   2c332:	881b      	ldrh	r3, [r3, #0]
   2c334:	2b00      	cmp	r3, #0
   2c336:	d008      	beq.n	2c34a <cmp_lfn+0xee>
   2c338:	697b      	ldr	r3, [r7, #20]
   2c33a:	005b      	lsls	r3, r3, #1
   2c33c:	687a      	ldr	r2, [r7, #4]
   2c33e:	18d3      	adds	r3, r2, r3
   2c340:	881b      	ldrh	r3, [r3, #0]
   2c342:	2b00      	cmp	r3, #0
   2c344:	d001      	beq.n	2c34a <cmp_lfn+0xee>
		return 0;
   2c346:	2300      	movs	r3, #0
   2c348:	e000      	b.n	2c34c <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2c34a:	2301      	movs	r3, #1
}
   2c34c:	0018      	movs	r0, r3
   2c34e:	46bd      	mov	sp, r7
   2c350:	b007      	add	sp, #28
   2c352:	bd90      	pop	{r4, r7, pc}
   2c354:	0003932c 	.word	0x0003932c
   2c358:	0002e2b1 	.word	0x0002e2b1
   2c35c:	0000ffff 	.word	0x0000ffff

0002c360 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2c360:	b580      	push	{r7, lr}
   2c362:	b088      	sub	sp, #32
   2c364:	af00      	add	r7, sp, #0
   2c366:	60f8      	str	r0, [r7, #12]
   2c368:	60b9      	str	r1, [r7, #8]
   2c36a:	0019      	movs	r1, r3
   2c36c:	1dfb      	adds	r3, r7, #7
   2c36e:	701a      	strb	r2, [r3, #0]
   2c370:	1dbb      	adds	r3, r7, #6
   2c372:	1c0a      	adds	r2, r1, #0
   2c374:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2c376:	68bb      	ldr	r3, [r7, #8]
   2c378:	330d      	adds	r3, #13
   2c37a:	1dba      	adds	r2, r7, #6
   2c37c:	7812      	ldrb	r2, [r2, #0]
   2c37e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2c380:	68bb      	ldr	r3, [r7, #8]
   2c382:	330b      	adds	r3, #11
   2c384:	220f      	movs	r2, #15
   2c386:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2c388:	68bb      	ldr	r3, [r7, #8]
   2c38a:	330c      	adds	r3, #12
   2c38c:	2200      	movs	r2, #0
   2c38e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2c390:	68bb      	ldr	r3, [r7, #8]
   2c392:	331a      	adds	r3, #26
   2c394:	2200      	movs	r2, #0
   2c396:	701a      	strb	r2, [r3, #0]
   2c398:	68bb      	ldr	r3, [r7, #8]
   2c39a:	331b      	adds	r3, #27
   2c39c:	2200      	movs	r2, #0
   2c39e:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2c3a0:	1dfb      	adds	r3, r7, #7
   2c3a2:	781b      	ldrb	r3, [r3, #0]
   2c3a4:	1e5a      	subs	r2, r3, #1
   2c3a6:	0013      	movs	r3, r2
   2c3a8:	005b      	lsls	r3, r3, #1
   2c3aa:	189b      	adds	r3, r3, r2
   2c3ac:	009b      	lsls	r3, r3, #2
   2c3ae:	189b      	adds	r3, r3, r2
   2c3b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2c3b2:	2316      	movs	r3, #22
   2c3b4:	18fb      	adds	r3, r7, r3
   2c3b6:	2200      	movs	r2, #0
   2c3b8:	801a      	strh	r2, [r3, #0]
   2c3ba:	2300      	movs	r3, #0
   2c3bc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2c3be:	2316      	movs	r3, #22
   2c3c0:	18fb      	adds	r3, r7, r3
   2c3c2:	881b      	ldrh	r3, [r3, #0]
   2c3c4:	4a28      	ldr	r2, [pc, #160]	; (2c468 <fit_lfn+0x108>)
   2c3c6:	4293      	cmp	r3, r2
   2c3c8:	d009      	beq.n	2c3de <fit_lfn+0x7e>
   2c3ca:	69fb      	ldr	r3, [r7, #28]
   2c3cc:	1c5a      	adds	r2, r3, #1
   2c3ce:	61fa      	str	r2, [r7, #28]
   2c3d0:	005b      	lsls	r3, r3, #1
   2c3d2:	68fa      	ldr	r2, [r7, #12]
   2c3d4:	18d2      	adds	r2, r2, r3
   2c3d6:	2316      	movs	r3, #22
   2c3d8:	18fb      	adds	r3, r7, r3
   2c3da:	8812      	ldrh	r2, [r2, #0]
   2c3dc:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2c3de:	4a23      	ldr	r2, [pc, #140]	; (2c46c <fit_lfn+0x10c>)
   2c3e0:	69bb      	ldr	r3, [r7, #24]
   2c3e2:	18d3      	adds	r3, r2, r3
   2c3e4:	781b      	ldrb	r3, [r3, #0]
   2c3e6:	001a      	movs	r2, r3
   2c3e8:	68bb      	ldr	r3, [r7, #8]
   2c3ea:	189b      	adds	r3, r3, r2
   2c3ec:	2216      	movs	r2, #22
   2c3ee:	18ba      	adds	r2, r7, r2
   2c3f0:	8812      	ldrh	r2, [r2, #0]
   2c3f2:	b2d2      	uxtb	r2, r2
   2c3f4:	701a      	strb	r2, [r3, #0]
   2c3f6:	4a1d      	ldr	r2, [pc, #116]	; (2c46c <fit_lfn+0x10c>)
   2c3f8:	69bb      	ldr	r3, [r7, #24]
   2c3fa:	18d3      	adds	r3, r2, r3
   2c3fc:	781b      	ldrb	r3, [r3, #0]
   2c3fe:	3301      	adds	r3, #1
   2c400:	68ba      	ldr	r2, [r7, #8]
   2c402:	18d3      	adds	r3, r2, r3
   2c404:	2216      	movs	r2, #22
   2c406:	18ba      	adds	r2, r7, r2
   2c408:	8812      	ldrh	r2, [r2, #0]
   2c40a:	0a12      	lsrs	r2, r2, #8
   2c40c:	b292      	uxth	r2, r2
   2c40e:	b2d2      	uxtb	r2, r2
   2c410:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2c412:	2316      	movs	r3, #22
   2c414:	18fb      	adds	r3, r7, r3
   2c416:	881b      	ldrh	r3, [r3, #0]
   2c418:	2b00      	cmp	r3, #0
   2c41a:	d104      	bne.n	2c426 <fit_lfn+0xc6>
   2c41c:	2316      	movs	r3, #22
   2c41e:	18fb      	adds	r3, r7, r3
   2c420:	2201      	movs	r2, #1
   2c422:	4252      	negs	r2, r2
   2c424:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2c426:	69bb      	ldr	r3, [r7, #24]
   2c428:	3301      	adds	r3, #1
   2c42a:	61bb      	str	r3, [r7, #24]
   2c42c:	69bb      	ldr	r3, [r7, #24]
   2c42e:	2b0c      	cmp	r3, #12
   2c430:	d9c5      	bls.n	2c3be <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2c432:	2316      	movs	r3, #22
   2c434:	18fb      	adds	r3, r7, r3
   2c436:	881b      	ldrh	r3, [r3, #0]
   2c438:	4a0b      	ldr	r2, [pc, #44]	; (2c468 <fit_lfn+0x108>)
   2c43a:	4293      	cmp	r3, r2
   2c43c:	d006      	beq.n	2c44c <fit_lfn+0xec>
   2c43e:	69fb      	ldr	r3, [r7, #28]
   2c440:	005b      	lsls	r3, r3, #1
   2c442:	68fa      	ldr	r2, [r7, #12]
   2c444:	18d3      	adds	r3, r2, r3
   2c446:	881b      	ldrh	r3, [r3, #0]
   2c448:	2b00      	cmp	r3, #0
   2c44a:	d105      	bne.n	2c458 <fit_lfn+0xf8>
   2c44c:	1dfb      	adds	r3, r7, #7
   2c44e:	1dfa      	adds	r2, r7, #7
   2c450:	7812      	ldrb	r2, [r2, #0]
   2c452:	2140      	movs	r1, #64	; 0x40
   2c454:	430a      	orrs	r2, r1
   2c456:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2c458:	68bb      	ldr	r3, [r7, #8]
   2c45a:	1dfa      	adds	r2, r7, #7
   2c45c:	7812      	ldrb	r2, [r2, #0]
   2c45e:	701a      	strb	r2, [r3, #0]
}
   2c460:	46c0      	nop			; (mov r8, r8)
   2c462:	46bd      	mov	sp, r7
   2c464:	b008      	add	sp, #32
   2c466:	bd80      	pop	{r7, pc}
   2c468:	0000ffff 	.word	0x0000ffff
   2c46c:	0003932c 	.word	0x0003932c

0002c470 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2c470:	b580      	push	{r7, lr}
   2c472:	b08a      	sub	sp, #40	; 0x28
   2c474:	af00      	add	r7, sp, #0
   2c476:	60f8      	str	r0, [r7, #12]
   2c478:	60b9      	str	r1, [r7, #8]
   2c47a:	607a      	str	r2, [r7, #4]
   2c47c:	001a      	movs	r2, r3
   2c47e:	1cbb      	adds	r3, r7, #2
   2c480:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2c482:	68b9      	ldr	r1, [r7, #8]
   2c484:	68fb      	ldr	r3, [r7, #12]
   2c486:	220b      	movs	r2, #11
   2c488:	0018      	movs	r0, r3
   2c48a:	4b38      	ldr	r3, [pc, #224]	; (2c56c <gen_numname+0xfc>)
   2c48c:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2c48e:	1cbb      	adds	r3, r7, #2
   2c490:	881b      	ldrh	r3, [r3, #0]
   2c492:	2b05      	cmp	r3, #5
   2c494:	d911      	bls.n	2c4ba <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2c496:	1cbb      	adds	r3, r7, #2
   2c498:	881b      	ldrh	r3, [r3, #0]
   2c49a:	b29a      	uxth	r2, r3
   2c49c:	0852      	lsrs	r2, r2, #1
   2c49e:	03db      	lsls	r3, r3, #15
   2c4a0:	4313      	orrs	r3, r2
   2c4a2:	b299      	uxth	r1, r3
   2c4a4:	687b      	ldr	r3, [r7, #4]
   2c4a6:	1c9a      	adds	r2, r3, #2
   2c4a8:	607a      	str	r2, [r7, #4]
   2c4aa:	881a      	ldrh	r2, [r3, #0]
   2c4ac:	1cbb      	adds	r3, r7, #2
   2c4ae:	188a      	adds	r2, r1, r2
   2c4b0:	801a      	strh	r2, [r3, #0]
   2c4b2:	687b      	ldr	r3, [r7, #4]
   2c4b4:	881b      	ldrh	r3, [r3, #0]
   2c4b6:	2b00      	cmp	r3, #0
   2c4b8:	d1ed      	bne.n	2c496 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2c4ba:	2307      	movs	r3, #7
   2c4bc:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2c4be:	1cbb      	adds	r3, r7, #2
   2c4c0:	881b      	ldrh	r3, [r3, #0]
   2c4c2:	b2db      	uxtb	r3, r3
   2c4c4:	220f      	movs	r2, #15
   2c4c6:	4013      	ands	r3, r2
   2c4c8:	b2da      	uxtb	r2, r3
   2c4ca:	2327      	movs	r3, #39	; 0x27
   2c4cc:	18fb      	adds	r3, r7, r3
   2c4ce:	3230      	adds	r2, #48	; 0x30
   2c4d0:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2c4d2:	2327      	movs	r3, #39	; 0x27
   2c4d4:	18fb      	adds	r3, r7, r3
   2c4d6:	781b      	ldrb	r3, [r3, #0]
   2c4d8:	2b39      	cmp	r3, #57	; 0x39
   2c4da:	d906      	bls.n	2c4ea <gen_numname+0x7a>
   2c4dc:	2327      	movs	r3, #39	; 0x27
   2c4de:	18fb      	adds	r3, r7, r3
   2c4e0:	2227      	movs	r2, #39	; 0x27
   2c4e2:	18ba      	adds	r2, r7, r2
   2c4e4:	7812      	ldrb	r2, [r2, #0]
   2c4e6:	3207      	adds	r2, #7
   2c4e8:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2c4ea:	6a3b      	ldr	r3, [r7, #32]
   2c4ec:	1e5a      	subs	r2, r3, #1
   2c4ee:	623a      	str	r2, [r7, #32]
   2c4f0:	2214      	movs	r2, #20
   2c4f2:	18ba      	adds	r2, r7, r2
   2c4f4:	2127      	movs	r1, #39	; 0x27
   2c4f6:	1879      	adds	r1, r7, r1
   2c4f8:	7809      	ldrb	r1, [r1, #0]
   2c4fa:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2c4fc:	1cbb      	adds	r3, r7, #2
   2c4fe:	1cba      	adds	r2, r7, #2
   2c500:	8812      	ldrh	r2, [r2, #0]
   2c502:	0912      	lsrs	r2, r2, #4
   2c504:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2c506:	1cbb      	adds	r3, r7, #2
   2c508:	881b      	ldrh	r3, [r3, #0]
   2c50a:	2b00      	cmp	r3, #0
   2c50c:	d1d7      	bne.n	2c4be <gen_numname+0x4e>
	ns[i] = '~';
   2c50e:	2314      	movs	r3, #20
   2c510:	18fa      	adds	r2, r7, r3
   2c512:	6a3b      	ldr	r3, [r7, #32]
   2c514:	18d3      	adds	r3, r2, r3
   2c516:	227e      	movs	r2, #126	; 0x7e
   2c518:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2c51a:	2300      	movs	r3, #0
   2c51c:	61fb      	str	r3, [r7, #28]
   2c51e:	e002      	b.n	2c526 <gen_numname+0xb6>
   2c520:	69fb      	ldr	r3, [r7, #28]
   2c522:	3301      	adds	r3, #1
   2c524:	61fb      	str	r3, [r7, #28]
   2c526:	69fa      	ldr	r2, [r7, #28]
   2c528:	6a3b      	ldr	r3, [r7, #32]
   2c52a:	429a      	cmp	r2, r3
   2c52c:	d205      	bcs.n	2c53a <gen_numname+0xca>
   2c52e:	68fa      	ldr	r2, [r7, #12]
   2c530:	69fb      	ldr	r3, [r7, #28]
   2c532:	18d3      	adds	r3, r2, r3
   2c534:	781b      	ldrb	r3, [r3, #0]
   2c536:	2b20      	cmp	r3, #32
   2c538:	d1f2      	bne.n	2c520 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2c53a:	69fb      	ldr	r3, [r7, #28]
   2c53c:	1c5a      	adds	r2, r3, #1
   2c53e:	61fa      	str	r2, [r7, #28]
   2c540:	68fa      	ldr	r2, [r7, #12]
   2c542:	18d2      	adds	r2, r2, r3
   2c544:	6a3b      	ldr	r3, [r7, #32]
   2c546:	2b07      	cmp	r3, #7
   2c548:	d806      	bhi.n	2c558 <gen_numname+0xe8>
   2c54a:	6a3b      	ldr	r3, [r7, #32]
   2c54c:	1c59      	adds	r1, r3, #1
   2c54e:	6239      	str	r1, [r7, #32]
   2c550:	2114      	movs	r1, #20
   2c552:	1879      	adds	r1, r7, r1
   2c554:	5ccb      	ldrb	r3, [r1, r3]
   2c556:	e000      	b.n	2c55a <gen_numname+0xea>
   2c558:	2320      	movs	r3, #32
   2c55a:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2c55c:	69fb      	ldr	r3, [r7, #28]
   2c55e:	2b07      	cmp	r3, #7
   2c560:	d9eb      	bls.n	2c53a <gen_numname+0xca>
}
   2c562:	46c0      	nop			; (mov r8, r8)
   2c564:	46bd      	mov	sp, r7
   2c566:	b00a      	add	sp, #40	; 0x28
   2c568:	bd80      	pop	{r7, pc}
   2c56a:	46c0      	nop			; (mov r8, r8)
   2c56c:	0002b615 	.word	0x0002b615

0002c570 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2c570:	b580      	push	{r7, lr}
   2c572:	b084      	sub	sp, #16
   2c574:	af00      	add	r7, sp, #0
   2c576:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2c578:	230f      	movs	r3, #15
   2c57a:	18fb      	adds	r3, r7, r3
   2c57c:	2200      	movs	r2, #0
   2c57e:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2c580:	230b      	movs	r3, #11
   2c582:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2c584:	230f      	movs	r3, #15
   2c586:	18fb      	adds	r3, r7, r3
   2c588:	781b      	ldrb	r3, [r3, #0]
   2c58a:	b2da      	uxtb	r2, r3
   2c58c:	0852      	lsrs	r2, r2, #1
   2c58e:	01db      	lsls	r3, r3, #7
   2c590:	4313      	orrs	r3, r2
   2c592:	b2d9      	uxtb	r1, r3
   2c594:	687b      	ldr	r3, [r7, #4]
   2c596:	1c5a      	adds	r2, r3, #1
   2c598:	607a      	str	r2, [r7, #4]
   2c59a:	781a      	ldrb	r2, [r3, #0]
   2c59c:	230f      	movs	r3, #15
   2c59e:	18fb      	adds	r3, r7, r3
   2c5a0:	188a      	adds	r2, r1, r2
   2c5a2:	701a      	strb	r2, [r3, #0]
   2c5a4:	68bb      	ldr	r3, [r7, #8]
   2c5a6:	3b01      	subs	r3, #1
   2c5a8:	60bb      	str	r3, [r7, #8]
   2c5aa:	68bb      	ldr	r3, [r7, #8]
   2c5ac:	2b00      	cmp	r3, #0
   2c5ae:	d1e9      	bne.n	2c584 <sum_sfn+0x14>
	return sum;
   2c5b0:	230f      	movs	r3, #15
   2c5b2:	18fb      	adds	r3, r7, r3
   2c5b4:	781b      	ldrb	r3, [r3, #0]
}
   2c5b6:	0018      	movs	r0, r3
   2c5b8:	46bd      	mov	sp, r7
   2c5ba:	b004      	add	sp, #16
   2c5bc:	bd80      	pop	{r7, pc}
	...

0002c5c0 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2c5c0:	b590      	push	{r4, r7, lr}
   2c5c2:	b087      	sub	sp, #28
   2c5c4:	af00      	add	r7, sp, #0
   2c5c6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2c5c8:	2317      	movs	r3, #23
   2c5ca:	18fc      	adds	r4, r7, r3
   2c5cc:	687b      	ldr	r3, [r7, #4]
   2c5ce:	2100      	movs	r1, #0
   2c5d0:	0018      	movs	r0, r3
   2c5d2:	4b74      	ldr	r3, [pc, #464]	; (2c7a4 <dir_find+0x1e4>)
   2c5d4:	4798      	blx	r3
   2c5d6:	0003      	movs	r3, r0
   2c5d8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c5da:	2317      	movs	r3, #23
   2c5dc:	18fb      	adds	r3, r7, r3
   2c5de:	781b      	ldrb	r3, [r3, #0]
   2c5e0:	2b00      	cmp	r3, #0
   2c5e2:	d003      	beq.n	2c5ec <dir_find+0x2c>
   2c5e4:	2317      	movs	r3, #23
   2c5e6:	18fb      	adds	r3, r7, r3
   2c5e8:	781b      	ldrb	r3, [r3, #0]
   2c5ea:	e0d6      	b.n	2c79a <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2c5ec:	2314      	movs	r3, #20
   2c5ee:	18fb      	adds	r3, r7, r3
   2c5f0:	22ff      	movs	r2, #255	; 0xff
   2c5f2:	701a      	strb	r2, [r3, #0]
   2c5f4:	2315      	movs	r3, #21
   2c5f6:	18fb      	adds	r3, r7, r3
   2c5f8:	2214      	movs	r2, #20
   2c5fa:	18ba      	adds	r2, r7, r2
   2c5fc:	7812      	ldrb	r2, [r2, #0]
   2c5fe:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2c600:	687b      	ldr	r3, [r7, #4]
   2c602:	681a      	ldr	r2, [r3, #0]
   2c604:	687b      	ldr	r3, [r7, #4]
   2c606:	691b      	ldr	r3, [r3, #16]
   2c608:	2117      	movs	r1, #23
   2c60a:	187c      	adds	r4, r7, r1
   2c60c:	0019      	movs	r1, r3
   2c60e:	0010      	movs	r0, r2
   2c610:	4b65      	ldr	r3, [pc, #404]	; (2c7a8 <dir_find+0x1e8>)
   2c612:	4798      	blx	r3
   2c614:	0003      	movs	r3, r0
   2c616:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c618:	2317      	movs	r3, #23
   2c61a:	18fb      	adds	r3, r7, r3
   2c61c:	781b      	ldrb	r3, [r3, #0]
   2c61e:	2b00      	cmp	r3, #0
   2c620:	d000      	beq.n	2c624 <dir_find+0x64>
   2c622:	e0b2      	b.n	2c78a <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2c624:	687b      	ldr	r3, [r7, #4]
   2c626:	695b      	ldr	r3, [r3, #20]
   2c628:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2c62a:	2316      	movs	r3, #22
   2c62c:	18fb      	adds	r3, r7, r3
   2c62e:	693a      	ldr	r2, [r7, #16]
   2c630:	7812      	ldrb	r2, [r2, #0]
   2c632:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2c634:	2316      	movs	r3, #22
   2c636:	18fb      	adds	r3, r7, r3
   2c638:	781b      	ldrb	r3, [r3, #0]
   2c63a:	2b00      	cmp	r3, #0
   2c63c:	d104      	bne.n	2c648 <dir_find+0x88>
   2c63e:	2317      	movs	r3, #23
   2c640:	18fb      	adds	r3, r7, r3
   2c642:	2204      	movs	r2, #4
   2c644:	701a      	strb	r2, [r3, #0]
   2c646:	e0a5      	b.n	2c794 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2c648:	693b      	ldr	r3, [r7, #16]
   2c64a:	330b      	adds	r3, #11
   2c64c:	781a      	ldrb	r2, [r3, #0]
   2c64e:	230f      	movs	r3, #15
   2c650:	18fb      	adds	r3, r7, r3
   2c652:	213f      	movs	r1, #63	; 0x3f
   2c654:	400a      	ands	r2, r1
   2c656:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2c658:	2316      	movs	r3, #22
   2c65a:	18fb      	adds	r3, r7, r3
   2c65c:	781b      	ldrb	r3, [r3, #0]
   2c65e:	2be5      	cmp	r3, #229	; 0xe5
   2c660:	d00a      	beq.n	2c678 <dir_find+0xb8>
   2c662:	230f      	movs	r3, #15
   2c664:	18fb      	adds	r3, r7, r3
   2c666:	781b      	ldrb	r3, [r3, #0]
   2c668:	2208      	movs	r2, #8
   2c66a:	4013      	ands	r3, r2
   2c66c:	d009      	beq.n	2c682 <dir_find+0xc2>
   2c66e:	230f      	movs	r3, #15
   2c670:	18fb      	adds	r3, r7, r3
   2c672:	781b      	ldrb	r3, [r3, #0]
   2c674:	2b0f      	cmp	r3, #15
   2c676:	d004      	beq.n	2c682 <dir_find+0xc2>
			ord = 0xFF;
   2c678:	2315      	movs	r3, #21
   2c67a:	18fb      	adds	r3, r7, r3
   2c67c:	22ff      	movs	r2, #255	; 0xff
   2c67e:	701a      	strb	r2, [r3, #0]
   2c680:	e073      	b.n	2c76a <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2c682:	230f      	movs	r3, #15
   2c684:	18fb      	adds	r3, r7, r3
   2c686:	781b      	ldrb	r3, [r3, #0]
   2c688:	2b0f      	cmp	r3, #15
   2c68a:	d145      	bne.n	2c718 <dir_find+0x158>
				if (dj->lfn) {
   2c68c:	687b      	ldr	r3, [r7, #4]
   2c68e:	69db      	ldr	r3, [r3, #28]
   2c690:	2b00      	cmp	r3, #0
   2c692:	d100      	bne.n	2c696 <dir_find+0xd6>
   2c694:	e069      	b.n	2c76a <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2c696:	2316      	movs	r3, #22
   2c698:	18fb      	adds	r3, r7, r3
   2c69a:	781b      	ldrb	r3, [r3, #0]
   2c69c:	2240      	movs	r2, #64	; 0x40
   2c69e:	4013      	ands	r3, r2
   2c6a0:	d016      	beq.n	2c6d0 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2c6a2:	2314      	movs	r3, #20
   2c6a4:	18fb      	adds	r3, r7, r3
   2c6a6:	693a      	ldr	r2, [r7, #16]
   2c6a8:	7b52      	ldrb	r2, [r2, #13]
   2c6aa:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2c6ac:	2316      	movs	r3, #22
   2c6ae:	18fb      	adds	r3, r7, r3
   2c6b0:	2216      	movs	r2, #22
   2c6b2:	18ba      	adds	r2, r7, r2
   2c6b4:	7812      	ldrb	r2, [r2, #0]
   2c6b6:	2140      	movs	r1, #64	; 0x40
   2c6b8:	438a      	bics	r2, r1
   2c6ba:	701a      	strb	r2, [r3, #0]
   2c6bc:	2315      	movs	r3, #21
   2c6be:	18fb      	adds	r3, r7, r3
   2c6c0:	2216      	movs	r2, #22
   2c6c2:	18ba      	adds	r2, r7, r2
   2c6c4:	7812      	ldrb	r2, [r2, #0]
   2c6c6:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2c6c8:	687b      	ldr	r3, [r7, #4]
   2c6ca:	88da      	ldrh	r2, [r3, #6]
   2c6cc:	687b      	ldr	r3, [r7, #4]
   2c6ce:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2c6d0:	2316      	movs	r3, #22
   2c6d2:	18fa      	adds	r2, r7, r3
   2c6d4:	2315      	movs	r3, #21
   2c6d6:	18fb      	adds	r3, r7, r3
   2c6d8:	7812      	ldrb	r2, [r2, #0]
   2c6da:	781b      	ldrb	r3, [r3, #0]
   2c6dc:	429a      	cmp	r2, r3
   2c6de:	d116      	bne.n	2c70e <dir_find+0x14e>
   2c6e0:	693b      	ldr	r3, [r7, #16]
   2c6e2:	330d      	adds	r3, #13
   2c6e4:	781b      	ldrb	r3, [r3, #0]
   2c6e6:	2214      	movs	r2, #20
   2c6e8:	18ba      	adds	r2, r7, r2
   2c6ea:	7812      	ldrb	r2, [r2, #0]
   2c6ec:	429a      	cmp	r2, r3
   2c6ee:	d10e      	bne.n	2c70e <dir_find+0x14e>
   2c6f0:	687b      	ldr	r3, [r7, #4]
   2c6f2:	69db      	ldr	r3, [r3, #28]
   2c6f4:	693a      	ldr	r2, [r7, #16]
   2c6f6:	0011      	movs	r1, r2
   2c6f8:	0018      	movs	r0, r3
   2c6fa:	4b2c      	ldr	r3, [pc, #176]	; (2c7ac <dir_find+0x1ec>)
   2c6fc:	4798      	blx	r3
   2c6fe:	1e03      	subs	r3, r0, #0
   2c700:	d005      	beq.n	2c70e <dir_find+0x14e>
   2c702:	2315      	movs	r3, #21
   2c704:	18fb      	adds	r3, r7, r3
   2c706:	781b      	ldrb	r3, [r3, #0]
   2c708:	3b01      	subs	r3, #1
   2c70a:	b2da      	uxtb	r2, r3
   2c70c:	e000      	b.n	2c710 <dir_find+0x150>
   2c70e:	22ff      	movs	r2, #255	; 0xff
   2c710:	2315      	movs	r3, #21
   2c712:	18fb      	adds	r3, r7, r3
   2c714:	701a      	strb	r2, [r3, #0]
   2c716:	e028      	b.n	2c76a <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c718:	2315      	movs	r3, #21
   2c71a:	18fb      	adds	r3, r7, r3
   2c71c:	781b      	ldrb	r3, [r3, #0]
   2c71e:	2b00      	cmp	r3, #0
   2c720:	d10a      	bne.n	2c738 <dir_find+0x178>
   2c722:	693b      	ldr	r3, [r7, #16]
   2c724:	0018      	movs	r0, r3
   2c726:	4b22      	ldr	r3, [pc, #136]	; (2c7b0 <dir_find+0x1f0>)
   2c728:	4798      	blx	r3
   2c72a:	0003      	movs	r3, r0
   2c72c:	001a      	movs	r2, r3
   2c72e:	2314      	movs	r3, #20
   2c730:	18fb      	adds	r3, r7, r3
   2c732:	781b      	ldrb	r3, [r3, #0]
   2c734:	4293      	cmp	r3, r2
   2c736:	d02a      	beq.n	2c78e <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2c738:	2315      	movs	r3, #21
   2c73a:	18fb      	adds	r3, r7, r3
   2c73c:	22ff      	movs	r2, #255	; 0xff
   2c73e:	701a      	strb	r2, [r3, #0]
   2c740:	687b      	ldr	r3, [r7, #4]
   2c742:	2201      	movs	r2, #1
   2c744:	4252      	negs	r2, r2
   2c746:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c748:	687b      	ldr	r3, [r7, #4]
   2c74a:	699b      	ldr	r3, [r3, #24]
   2c74c:	330b      	adds	r3, #11
   2c74e:	781b      	ldrb	r3, [r3, #0]
   2c750:	001a      	movs	r2, r3
   2c752:	2301      	movs	r3, #1
   2c754:	4013      	ands	r3, r2
   2c756:	d108      	bne.n	2c76a <dir_find+0x1aa>
   2c758:	687b      	ldr	r3, [r7, #4]
   2c75a:	6999      	ldr	r1, [r3, #24]
   2c75c:	693b      	ldr	r3, [r7, #16]
   2c75e:	220b      	movs	r2, #11
   2c760:	0018      	movs	r0, r3
   2c762:	4b14      	ldr	r3, [pc, #80]	; (2c7b4 <dir_find+0x1f4>)
   2c764:	4798      	blx	r3
   2c766:	1e03      	subs	r3, r0, #0
   2c768:	d013      	beq.n	2c792 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2c76a:	2317      	movs	r3, #23
   2c76c:	18fc      	adds	r4, r7, r3
   2c76e:	687b      	ldr	r3, [r7, #4]
   2c770:	2100      	movs	r1, #0
   2c772:	0018      	movs	r0, r3
   2c774:	4b10      	ldr	r3, [pc, #64]	; (2c7b8 <dir_find+0x1f8>)
   2c776:	4798      	blx	r3
   2c778:	0003      	movs	r3, r0
   2c77a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c77c:	2317      	movs	r3, #23
   2c77e:	18fb      	adds	r3, r7, r3
   2c780:	781b      	ldrb	r3, [r3, #0]
   2c782:	2b00      	cmp	r3, #0
   2c784:	d100      	bne.n	2c788 <dir_find+0x1c8>
   2c786:	e73b      	b.n	2c600 <dir_find+0x40>
   2c788:	e004      	b.n	2c794 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2c78a:	46c0      	nop			; (mov r8, r8)
   2c78c:	e002      	b.n	2c794 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c78e:	46c0      	nop			; (mov r8, r8)
   2c790:	e000      	b.n	2c794 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c792:	46c0      	nop			; (mov r8, r8)

	return res;
   2c794:	2317      	movs	r3, #23
   2c796:	18fb      	adds	r3, r7, r3
   2c798:	781b      	ldrb	r3, [r3, #0]
}
   2c79a:	0018      	movs	r0, r3
   2c79c:	46bd      	mov	sp, r7
   2c79e:	b007      	add	sp, #28
   2c7a0:	bd90      	pop	{r4, r7, pc}
   2c7a2:	46c0      	nop			; (mov r8, r8)
   2c7a4:	0002bf3d 	.word	0x0002bf3d
   2c7a8:	0002b6f9 	.word	0x0002b6f9
   2c7ac:	0002c25d 	.word	0x0002c25d
   2c7b0:	0002c571 	.word	0x0002c571
   2c7b4:	0002b67d 	.word	0x0002b67d
   2c7b8:	0002c06d 	.word	0x0002c06d

0002c7bc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2c7bc:	b590      	push	{r4, r7, lr}
   2c7be:	b08d      	sub	sp, #52	; 0x34
   2c7c0:	af00      	add	r7, sp, #0
   2c7c2:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2c7c4:	687b      	ldr	r3, [r7, #4]
   2c7c6:	699b      	ldr	r3, [r3, #24]
   2c7c8:	627b      	str	r3, [r7, #36]	; 0x24
   2c7ca:	687b      	ldr	r3, [r7, #4]
   2c7cc:	69db      	ldr	r3, [r3, #28]
   2c7ce:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2c7d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2c7d2:	230c      	movs	r3, #12
   2c7d4:	18fb      	adds	r3, r7, r3
   2c7d6:	220c      	movs	r2, #12
   2c7d8:	0018      	movs	r0, r3
   2c7da:	4bc8      	ldr	r3, [pc, #800]	; (2cafc <dir_register+0x340>)
   2c7dc:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2c7de:	230c      	movs	r3, #12
   2c7e0:	18fb      	adds	r3, r7, r3
   2c7e2:	7adb      	ldrb	r3, [r3, #11]
   2c7e4:	001a      	movs	r2, r3
   2c7e6:	2301      	movs	r3, #1
   2c7e8:	4013      	ands	r3, r2
   2c7ea:	d048      	beq.n	2c87e <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2c7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c7ee:	330b      	adds	r3, #11
   2c7f0:	2200      	movs	r2, #0
   2c7f2:	701a      	strb	r2, [r3, #0]
   2c7f4:	687b      	ldr	r3, [r7, #4]
   2c7f6:	2200      	movs	r2, #0
   2c7f8:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2c7fa:	232c      	movs	r3, #44	; 0x2c
   2c7fc:	18fb      	adds	r3, r7, r3
   2c7fe:	2201      	movs	r2, #1
   2c800:	801a      	strh	r2, [r3, #0]
   2c802:	e01c      	b.n	2c83e <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2c804:	232c      	movs	r3, #44	; 0x2c
   2c806:	18fb      	adds	r3, r7, r3
   2c808:	881b      	ldrh	r3, [r3, #0]
   2c80a:	6a3a      	ldr	r2, [r7, #32]
   2c80c:	210c      	movs	r1, #12
   2c80e:	1879      	adds	r1, r7, r1
   2c810:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2c812:	4cbb      	ldr	r4, [pc, #748]	; (2cb00 <dir_register+0x344>)
   2c814:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2c816:	232f      	movs	r3, #47	; 0x2f
   2c818:	18fc      	adds	r4, r7, r3
   2c81a:	687b      	ldr	r3, [r7, #4]
   2c81c:	0018      	movs	r0, r3
   2c81e:	4bb9      	ldr	r3, [pc, #740]	; (2cb04 <dir_register+0x348>)
   2c820:	4798      	blx	r3
   2c822:	0003      	movs	r3, r0
   2c824:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c826:	232f      	movs	r3, #47	; 0x2f
   2c828:	18fb      	adds	r3, r7, r3
   2c82a:	781b      	ldrb	r3, [r3, #0]
   2c82c:	2b00      	cmp	r3, #0
   2c82e:	d10c      	bne.n	2c84a <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2c830:	232c      	movs	r3, #44	; 0x2c
   2c832:	18fb      	adds	r3, r7, r3
   2c834:	881a      	ldrh	r2, [r3, #0]
   2c836:	232c      	movs	r3, #44	; 0x2c
   2c838:	18fb      	adds	r3, r7, r3
   2c83a:	3201      	adds	r2, #1
   2c83c:	801a      	strh	r2, [r3, #0]
   2c83e:	232c      	movs	r3, #44	; 0x2c
   2c840:	18fb      	adds	r3, r7, r3
   2c842:	881b      	ldrh	r3, [r3, #0]
   2c844:	2b63      	cmp	r3, #99	; 0x63
   2c846:	d9dd      	bls.n	2c804 <dir_register+0x48>
   2c848:	e000      	b.n	2c84c <dir_register+0x90>
			if (res != FR_OK) break;
   2c84a:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2c84c:	232c      	movs	r3, #44	; 0x2c
   2c84e:	18fb      	adds	r3, r7, r3
   2c850:	881b      	ldrh	r3, [r3, #0]
   2c852:	2b64      	cmp	r3, #100	; 0x64
   2c854:	d101      	bne.n	2c85a <dir_register+0x9e>
   2c856:	2307      	movs	r3, #7
   2c858:	e14c      	b.n	2caf4 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2c85a:	232f      	movs	r3, #47	; 0x2f
   2c85c:	18fb      	adds	r3, r7, r3
   2c85e:	781b      	ldrb	r3, [r3, #0]
   2c860:	2b04      	cmp	r3, #4
   2c862:	d003      	beq.n	2c86c <dir_register+0xb0>
   2c864:	232f      	movs	r3, #47	; 0x2f
   2c866:	18fb      	adds	r3, r7, r3
   2c868:	781b      	ldrb	r3, [r3, #0]
   2c86a:	e143      	b.n	2caf4 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2c86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c86e:	330b      	adds	r3, #11
   2c870:	220c      	movs	r2, #12
   2c872:	18ba      	adds	r2, r7, r2
   2c874:	7ad2      	ldrb	r2, [r2, #11]
   2c876:	701a      	strb	r2, [r3, #0]
   2c878:	687b      	ldr	r3, [r7, #4]
   2c87a:	6a3a      	ldr	r2, [r7, #32]
   2c87c:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2c87e:	230c      	movs	r3, #12
   2c880:	18fb      	adds	r3, r7, r3
   2c882:	7adb      	ldrb	r3, [r3, #11]
   2c884:	001a      	movs	r2, r3
   2c886:	2302      	movs	r3, #2
   2c888:	4013      	ands	r3, r2
   2c88a:	d023      	beq.n	2c8d4 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2c88c:	232a      	movs	r3, #42	; 0x2a
   2c88e:	18fb      	adds	r3, r7, r3
   2c890:	2200      	movs	r2, #0
   2c892:	801a      	strh	r2, [r3, #0]
   2c894:	e006      	b.n	2c8a4 <dir_register+0xe8>
   2c896:	232a      	movs	r3, #42	; 0x2a
   2c898:	18fb      	adds	r3, r7, r3
   2c89a:	881a      	ldrh	r2, [r3, #0]
   2c89c:	232a      	movs	r3, #42	; 0x2a
   2c89e:	18fb      	adds	r3, r7, r3
   2c8a0:	3201      	adds	r2, #1
   2c8a2:	801a      	strh	r2, [r3, #0]
   2c8a4:	232a      	movs	r3, #42	; 0x2a
   2c8a6:	18fb      	adds	r3, r7, r3
   2c8a8:	881b      	ldrh	r3, [r3, #0]
   2c8aa:	005b      	lsls	r3, r3, #1
   2c8ac:	6a3a      	ldr	r2, [r7, #32]
   2c8ae:	18d3      	adds	r3, r2, r3
   2c8b0:	881b      	ldrh	r3, [r3, #0]
   2c8b2:	2b00      	cmp	r3, #0
   2c8b4:	d1ef      	bne.n	2c896 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2c8b6:	232a      	movs	r3, #42	; 0x2a
   2c8b8:	18fb      	adds	r3, r7, r3
   2c8ba:	881b      	ldrh	r3, [r3, #0]
   2c8bc:	3319      	adds	r3, #25
   2c8be:	001a      	movs	r2, r3
   2c8c0:	4b91      	ldr	r3, [pc, #580]	; (2cb08 <dir_register+0x34c>)
   2c8c2:	210d      	movs	r1, #13
   2c8c4:	0010      	movs	r0, r2
   2c8c6:	4798      	blx	r3
   2c8c8:	0003      	movs	r3, r0
   2c8ca:	001a      	movs	r2, r3
   2c8cc:	232a      	movs	r3, #42	; 0x2a
   2c8ce:	18fb      	adds	r3, r7, r3
   2c8d0:	801a      	strh	r2, [r3, #0]
   2c8d2:	e003      	b.n	2c8dc <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2c8d4:	232a      	movs	r3, #42	; 0x2a
   2c8d6:	18fb      	adds	r3, r7, r3
   2c8d8:	2201      	movs	r2, #1
   2c8da:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2c8dc:	232f      	movs	r3, #47	; 0x2f
   2c8de:	18fc      	adds	r4, r7, r3
   2c8e0:	687b      	ldr	r3, [r7, #4]
   2c8e2:	2100      	movs	r1, #0
   2c8e4:	0018      	movs	r0, r3
   2c8e6:	4b89      	ldr	r3, [pc, #548]	; (2cb0c <dir_register+0x350>)
   2c8e8:	4798      	blx	r3
   2c8ea:	0003      	movs	r3, r0
   2c8ec:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c8ee:	232f      	movs	r3, #47	; 0x2f
   2c8f0:	18fb      	adds	r3, r7, r3
   2c8f2:	781b      	ldrb	r3, [r3, #0]
   2c8f4:	2b00      	cmp	r3, #0
   2c8f6:	d003      	beq.n	2c900 <dir_register+0x144>
   2c8f8:	232f      	movs	r3, #47	; 0x2f
   2c8fa:	18fb      	adds	r3, r7, r3
   2c8fc:	781b      	ldrb	r3, [r3, #0]
   2c8fe:	e0f9      	b.n	2caf4 <dir_register+0x338>
	n = is = 0;
   2c900:	2328      	movs	r3, #40	; 0x28
   2c902:	18fb      	adds	r3, r7, r3
   2c904:	2200      	movs	r2, #0
   2c906:	801a      	strh	r2, [r3, #0]
   2c908:	232c      	movs	r3, #44	; 0x2c
   2c90a:	18fb      	adds	r3, r7, r3
   2c90c:	2228      	movs	r2, #40	; 0x28
   2c90e:	18ba      	adds	r2, r7, r2
   2c910:	8812      	ldrh	r2, [r2, #0]
   2c912:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2c914:	687b      	ldr	r3, [r7, #4]
   2c916:	681a      	ldr	r2, [r3, #0]
   2c918:	687b      	ldr	r3, [r7, #4]
   2c91a:	691b      	ldr	r3, [r3, #16]
   2c91c:	212f      	movs	r1, #47	; 0x2f
   2c91e:	187c      	adds	r4, r7, r1
   2c920:	0019      	movs	r1, r3
   2c922:	0010      	movs	r0, r2
   2c924:	4b7a      	ldr	r3, [pc, #488]	; (2cb10 <dir_register+0x354>)
   2c926:	4798      	blx	r3
   2c928:	0003      	movs	r3, r0
   2c92a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c92c:	232f      	movs	r3, #47	; 0x2f
   2c92e:	18fb      	adds	r3, r7, r3
   2c930:	781b      	ldrb	r3, [r3, #0]
   2c932:	2b00      	cmp	r3, #0
   2c934:	d13c      	bne.n	2c9b0 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2c936:	687b      	ldr	r3, [r7, #4]
   2c938:	695a      	ldr	r2, [r3, #20]
   2c93a:	231f      	movs	r3, #31
   2c93c:	18fb      	adds	r3, r7, r3
   2c93e:	7812      	ldrb	r2, [r2, #0]
   2c940:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2c942:	231f      	movs	r3, #31
   2c944:	18fb      	adds	r3, r7, r3
   2c946:	781b      	ldrb	r3, [r3, #0]
   2c948:	2be5      	cmp	r3, #229	; 0xe5
   2c94a:	d004      	beq.n	2c956 <dir_register+0x19a>
   2c94c:	231f      	movs	r3, #31
   2c94e:	18fb      	adds	r3, r7, r3
   2c950:	781b      	ldrb	r3, [r3, #0]
   2c952:	2b00      	cmp	r3, #0
   2c954:	d119      	bne.n	2c98a <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2c956:	232c      	movs	r3, #44	; 0x2c
   2c958:	18fb      	adds	r3, r7, r3
   2c95a:	881b      	ldrh	r3, [r3, #0]
   2c95c:	2b00      	cmp	r3, #0
   2c95e:	d104      	bne.n	2c96a <dir_register+0x1ae>
   2c960:	2328      	movs	r3, #40	; 0x28
   2c962:	18fb      	adds	r3, r7, r3
   2c964:	687a      	ldr	r2, [r7, #4]
   2c966:	88d2      	ldrh	r2, [r2, #6]
   2c968:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2c96a:	232c      	movs	r3, #44	; 0x2c
   2c96c:	18fb      	adds	r3, r7, r3
   2c96e:	222c      	movs	r2, #44	; 0x2c
   2c970:	18ba      	adds	r2, r7, r2
   2c972:	8812      	ldrh	r2, [r2, #0]
   2c974:	3201      	adds	r2, #1
   2c976:	801a      	strh	r2, [r3, #0]
   2c978:	232c      	movs	r3, #44	; 0x2c
   2c97a:	18fa      	adds	r2, r7, r3
   2c97c:	232a      	movs	r3, #42	; 0x2a
   2c97e:	18fb      	adds	r3, r7, r3
   2c980:	8812      	ldrh	r2, [r2, #0]
   2c982:	881b      	ldrh	r3, [r3, #0]
   2c984:	429a      	cmp	r2, r3
   2c986:	d104      	bne.n	2c992 <dir_register+0x1d6>
   2c988:	e013      	b.n	2c9b2 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2c98a:	232c      	movs	r3, #44	; 0x2c
   2c98c:	18fb      	adds	r3, r7, r3
   2c98e:	2200      	movs	r2, #0
   2c990:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2c992:	232f      	movs	r3, #47	; 0x2f
   2c994:	18fc      	adds	r4, r7, r3
   2c996:	687b      	ldr	r3, [r7, #4]
   2c998:	2101      	movs	r1, #1
   2c99a:	0018      	movs	r0, r3
   2c99c:	4b5d      	ldr	r3, [pc, #372]	; (2cb14 <dir_register+0x358>)
   2c99e:	4798      	blx	r3
   2c9a0:	0003      	movs	r3, r0
   2c9a2:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c9a4:	232f      	movs	r3, #47	; 0x2f
   2c9a6:	18fb      	adds	r3, r7, r3
   2c9a8:	781b      	ldrb	r3, [r3, #0]
   2c9aa:	2b00      	cmp	r3, #0
   2c9ac:	d0b2      	beq.n	2c914 <dir_register+0x158>
   2c9ae:	e000      	b.n	2c9b2 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2c9b0:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2c9b2:	232f      	movs	r3, #47	; 0x2f
   2c9b4:	18fb      	adds	r3, r7, r3
   2c9b6:	781b      	ldrb	r3, [r3, #0]
   2c9b8:	2b00      	cmp	r3, #0
   2c9ba:	d163      	bne.n	2ca84 <dir_register+0x2c8>
   2c9bc:	232a      	movs	r3, #42	; 0x2a
   2c9be:	18fb      	adds	r3, r7, r3
   2c9c0:	881b      	ldrh	r3, [r3, #0]
   2c9c2:	2b01      	cmp	r3, #1
   2c9c4:	d95e      	bls.n	2ca84 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2c9c6:	232f      	movs	r3, #47	; 0x2f
   2c9c8:	18fc      	adds	r4, r7, r3
   2c9ca:	2328      	movs	r3, #40	; 0x28
   2c9cc:	18fb      	adds	r3, r7, r3
   2c9ce:	881a      	ldrh	r2, [r3, #0]
   2c9d0:	687b      	ldr	r3, [r7, #4]
   2c9d2:	0011      	movs	r1, r2
   2c9d4:	0018      	movs	r0, r3
   2c9d6:	4b4d      	ldr	r3, [pc, #308]	; (2cb0c <dir_register+0x350>)
   2c9d8:	4798      	blx	r3
   2c9da:	0003      	movs	r3, r0
   2c9dc:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2c9de:	232f      	movs	r3, #47	; 0x2f
   2c9e0:	18fb      	adds	r3, r7, r3
   2c9e2:	781b      	ldrb	r3, [r3, #0]
   2c9e4:	2b00      	cmp	r3, #0
   2c9e6:	d14d      	bne.n	2ca84 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2c9e8:	687b      	ldr	r3, [r7, #4]
   2c9ea:	699b      	ldr	r3, [r3, #24]
   2c9ec:	221e      	movs	r2, #30
   2c9ee:	18bc      	adds	r4, r7, r2
   2c9f0:	0018      	movs	r0, r3
   2c9f2:	4b49      	ldr	r3, [pc, #292]	; (2cb18 <dir_register+0x35c>)
   2c9f4:	4798      	blx	r3
   2c9f6:	0003      	movs	r3, r0
   2c9f8:	7023      	strb	r3, [r4, #0]
			ne--;
   2c9fa:	232a      	movs	r3, #42	; 0x2a
   2c9fc:	18fb      	adds	r3, r7, r3
   2c9fe:	881a      	ldrh	r2, [r3, #0]
   2ca00:	232a      	movs	r3, #42	; 0x2a
   2ca02:	18fb      	adds	r3, r7, r3
   2ca04:	3a01      	subs	r2, #1
   2ca06:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2ca08:	687b      	ldr	r3, [r7, #4]
   2ca0a:	681a      	ldr	r2, [r3, #0]
   2ca0c:	687b      	ldr	r3, [r7, #4]
   2ca0e:	691b      	ldr	r3, [r3, #16]
   2ca10:	212f      	movs	r1, #47	; 0x2f
   2ca12:	187c      	adds	r4, r7, r1
   2ca14:	0019      	movs	r1, r3
   2ca16:	0010      	movs	r0, r2
   2ca18:	4b3d      	ldr	r3, [pc, #244]	; (2cb10 <dir_register+0x354>)
   2ca1a:	4798      	blx	r3
   2ca1c:	0003      	movs	r3, r0
   2ca1e:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2ca20:	232f      	movs	r3, #47	; 0x2f
   2ca22:	18fb      	adds	r3, r7, r3
   2ca24:	781b      	ldrb	r3, [r3, #0]
   2ca26:	2b00      	cmp	r3, #0
   2ca28:	d12b      	bne.n	2ca82 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2ca2a:	687b      	ldr	r3, [r7, #4]
   2ca2c:	69d8      	ldr	r0, [r3, #28]
   2ca2e:	687b      	ldr	r3, [r7, #4]
   2ca30:	6959      	ldr	r1, [r3, #20]
   2ca32:	232a      	movs	r3, #42	; 0x2a
   2ca34:	18fb      	adds	r3, r7, r3
   2ca36:	881b      	ldrh	r3, [r3, #0]
   2ca38:	b2da      	uxtb	r2, r3
   2ca3a:	231e      	movs	r3, #30
   2ca3c:	18fb      	adds	r3, r7, r3
   2ca3e:	781b      	ldrb	r3, [r3, #0]
   2ca40:	4c36      	ldr	r4, [pc, #216]	; (2cb1c <dir_register+0x360>)
   2ca42:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2ca44:	687b      	ldr	r3, [r7, #4]
   2ca46:	681b      	ldr	r3, [r3, #0]
   2ca48:	2201      	movs	r2, #1
   2ca4a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2ca4c:	232f      	movs	r3, #47	; 0x2f
   2ca4e:	18fc      	adds	r4, r7, r3
   2ca50:	687b      	ldr	r3, [r7, #4]
   2ca52:	2100      	movs	r1, #0
   2ca54:	0018      	movs	r0, r3
   2ca56:	4b2f      	ldr	r3, [pc, #188]	; (2cb14 <dir_register+0x358>)
   2ca58:	4798      	blx	r3
   2ca5a:	0003      	movs	r3, r0
   2ca5c:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2ca5e:	232f      	movs	r3, #47	; 0x2f
   2ca60:	18fb      	adds	r3, r7, r3
   2ca62:	781b      	ldrb	r3, [r3, #0]
   2ca64:	2b00      	cmp	r3, #0
   2ca66:	d10d      	bne.n	2ca84 <dir_register+0x2c8>
   2ca68:	232a      	movs	r3, #42	; 0x2a
   2ca6a:	18fb      	adds	r3, r7, r3
   2ca6c:	222a      	movs	r2, #42	; 0x2a
   2ca6e:	18ba      	adds	r2, r7, r2
   2ca70:	8812      	ldrh	r2, [r2, #0]
   2ca72:	3a01      	subs	r2, #1
   2ca74:	801a      	strh	r2, [r3, #0]
   2ca76:	232a      	movs	r3, #42	; 0x2a
   2ca78:	18fb      	adds	r3, r7, r3
   2ca7a:	881b      	ldrh	r3, [r3, #0]
   2ca7c:	2b00      	cmp	r3, #0
   2ca7e:	d1c3      	bne.n	2ca08 <dir_register+0x24c>
   2ca80:	e000      	b.n	2ca84 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2ca82:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2ca84:	232f      	movs	r3, #47	; 0x2f
   2ca86:	18fb      	adds	r3, r7, r3
   2ca88:	781b      	ldrb	r3, [r3, #0]
   2ca8a:	2b00      	cmp	r3, #0
   2ca8c:	d12f      	bne.n	2caee <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2ca8e:	687b      	ldr	r3, [r7, #4]
   2ca90:	681a      	ldr	r2, [r3, #0]
   2ca92:	687b      	ldr	r3, [r7, #4]
   2ca94:	691b      	ldr	r3, [r3, #16]
   2ca96:	212f      	movs	r1, #47	; 0x2f
   2ca98:	187c      	adds	r4, r7, r1
   2ca9a:	0019      	movs	r1, r3
   2ca9c:	0010      	movs	r0, r2
   2ca9e:	4b1c      	ldr	r3, [pc, #112]	; (2cb10 <dir_register+0x354>)
   2caa0:	4798      	blx	r3
   2caa2:	0003      	movs	r3, r0
   2caa4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2caa6:	232f      	movs	r3, #47	; 0x2f
   2caa8:	18fb      	adds	r3, r7, r3
   2caaa:	781b      	ldrb	r3, [r3, #0]
   2caac:	2b00      	cmp	r3, #0
   2caae:	d11e      	bne.n	2caee <dir_register+0x332>
			dir = dj->dir;
   2cab0:	687b      	ldr	r3, [r7, #4]
   2cab2:	695b      	ldr	r3, [r3, #20]
   2cab4:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2cab6:	69bb      	ldr	r3, [r7, #24]
   2cab8:	2220      	movs	r2, #32
   2caba:	2100      	movs	r1, #0
   2cabc:	0018      	movs	r0, r3
   2cabe:	4b18      	ldr	r3, [pc, #96]	; (2cb20 <dir_register+0x364>)
   2cac0:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2cac2:	687b      	ldr	r3, [r7, #4]
   2cac4:	6999      	ldr	r1, [r3, #24]
   2cac6:	69bb      	ldr	r3, [r7, #24]
   2cac8:	220b      	movs	r2, #11
   2caca:	0018      	movs	r0, r3
   2cacc:	4b0b      	ldr	r3, [pc, #44]	; (2cafc <dir_register+0x340>)
   2cace:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2cad0:	69bb      	ldr	r3, [r7, #24]
   2cad2:	330c      	adds	r3, #12
   2cad4:	001a      	movs	r2, r3
   2cad6:	687b      	ldr	r3, [r7, #4]
   2cad8:	699b      	ldr	r3, [r3, #24]
   2cada:	330b      	adds	r3, #11
   2cadc:	781b      	ldrb	r3, [r3, #0]
   2cade:	2118      	movs	r1, #24
   2cae0:	400b      	ands	r3, r1
   2cae2:	b2db      	uxtb	r3, r3
   2cae4:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2cae6:	687b      	ldr	r3, [r7, #4]
   2cae8:	681b      	ldr	r3, [r3, #0]
   2caea:	2201      	movs	r2, #1
   2caec:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2caee:	232f      	movs	r3, #47	; 0x2f
   2caf0:	18fb      	adds	r3, r7, r3
   2caf2:	781b      	ldrb	r3, [r3, #0]
}
   2caf4:	0018      	movs	r0, r3
   2caf6:	46bd      	mov	sp, r7
   2caf8:	b00d      	add	sp, #52	; 0x34
   2cafa:	bd90      	pop	{r4, r7, pc}
   2cafc:	0002b615 	.word	0x0002b615
   2cb00:	0002c471 	.word	0x0002c471
   2cb04:	0002c5c1 	.word	0x0002c5c1
   2cb08:	000329d9 	.word	0x000329d9
   2cb0c:	0002bf3d 	.word	0x0002bf3d
   2cb10:	0002b6f9 	.word	0x0002b6f9
   2cb14:	0002c06d 	.word	0x0002c06d
   2cb18:	0002c571 	.word	0x0002c571
   2cb1c:	0002c361 	.word	0x0002c361
   2cb20:	0002b64d 	.word	0x0002b64d

0002cb24 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2cb24:	b590      	push	{r4, r7, lr}
   2cb26:	b08b      	sub	sp, #44	; 0x2c
   2cb28:	af00      	add	r7, sp, #0
   2cb2a:	6078      	str	r0, [r7, #4]
   2cb2c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2cb2e:	683b      	ldr	r3, [r7, #0]
   2cb30:	681b      	ldr	r3, [r3, #0]
   2cb32:	613b      	str	r3, [r7, #16]
   2cb34:	e002      	b.n	2cb3c <create_name+0x18>
   2cb36:	693b      	ldr	r3, [r7, #16]
   2cb38:	3301      	adds	r3, #1
   2cb3a:	613b      	str	r3, [r7, #16]
   2cb3c:	693b      	ldr	r3, [r7, #16]
   2cb3e:	781b      	ldrb	r3, [r3, #0]
   2cb40:	2b2f      	cmp	r3, #47	; 0x2f
   2cb42:	d0f8      	beq.n	2cb36 <create_name+0x12>
   2cb44:	693b      	ldr	r3, [r7, #16]
   2cb46:	781b      	ldrb	r3, [r3, #0]
   2cb48:	2b5c      	cmp	r3, #92	; 0x5c
   2cb4a:	d0f4      	beq.n	2cb36 <create_name+0x12>
	lfn = dj->lfn;
   2cb4c:	687b      	ldr	r3, [r7, #4]
   2cb4e:	69db      	ldr	r3, [r3, #28]
   2cb50:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2cb52:	2300      	movs	r3, #0
   2cb54:	617b      	str	r3, [r7, #20]
   2cb56:	697b      	ldr	r3, [r7, #20]
   2cb58:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2cb5a:	69bb      	ldr	r3, [r7, #24]
   2cb5c:	1c5a      	adds	r2, r3, #1
   2cb5e:	61ba      	str	r2, [r7, #24]
   2cb60:	693a      	ldr	r2, [r7, #16]
   2cb62:	18d3      	adds	r3, r2, r3
   2cb64:	781a      	ldrb	r2, [r3, #0]
   2cb66:	2324      	movs	r3, #36	; 0x24
   2cb68:	18fb      	adds	r3, r7, r3
   2cb6a:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2cb6c:	2324      	movs	r3, #36	; 0x24
   2cb6e:	18fb      	adds	r3, r7, r3
   2cb70:	881b      	ldrh	r3, [r3, #0]
   2cb72:	2b1f      	cmp	r3, #31
   2cb74:	d944      	bls.n	2cc00 <create_name+0xdc>
   2cb76:	2324      	movs	r3, #36	; 0x24
   2cb78:	18fb      	adds	r3, r7, r3
   2cb7a:	881b      	ldrh	r3, [r3, #0]
   2cb7c:	2b2f      	cmp	r3, #47	; 0x2f
   2cb7e:	d03f      	beq.n	2cc00 <create_name+0xdc>
   2cb80:	2324      	movs	r3, #36	; 0x24
   2cb82:	18fb      	adds	r3, r7, r3
   2cb84:	881b      	ldrh	r3, [r3, #0]
   2cb86:	2b5c      	cmp	r3, #92	; 0x5c
   2cb88:	d03a      	beq.n	2cc00 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2cb8a:	697b      	ldr	r3, [r7, #20]
   2cb8c:	2bfe      	cmp	r3, #254	; 0xfe
   2cb8e:	d901      	bls.n	2cb94 <create_name+0x70>
			return FR_INVALID_NAME;
   2cb90:	2306      	movs	r3, #6
   2cb92:	e1e7      	b.n	2cf64 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2cb94:	2324      	movs	r3, #36	; 0x24
   2cb96:	18fb      	adds	r3, r7, r3
   2cb98:	2224      	movs	r2, #36	; 0x24
   2cb9a:	18ba      	adds	r2, r7, r2
   2cb9c:	8812      	ldrh	r2, [r2, #0]
   2cb9e:	21ff      	movs	r1, #255	; 0xff
   2cba0:	400a      	ands	r2, r1
   2cba2:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2cba4:	2324      	movs	r3, #36	; 0x24
   2cba6:	18fc      	adds	r4, r7, r3
   2cba8:	2324      	movs	r3, #36	; 0x24
   2cbaa:	18fb      	adds	r3, r7, r3
   2cbac:	881b      	ldrh	r3, [r3, #0]
   2cbae:	2101      	movs	r1, #1
   2cbb0:	0018      	movs	r0, r3
   2cbb2:	4bba      	ldr	r3, [pc, #744]	; (2ce9c <create_name+0x378>)
   2cbb4:	4798      	blx	r3
   2cbb6:	0003      	movs	r3, r0
   2cbb8:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2cbba:	2324      	movs	r3, #36	; 0x24
   2cbbc:	18fb      	adds	r3, r7, r3
   2cbbe:	881b      	ldrh	r3, [r3, #0]
   2cbc0:	2b00      	cmp	r3, #0
   2cbc2:	d101      	bne.n	2cbc8 <create_name+0xa4>
   2cbc4:	2306      	movs	r3, #6
   2cbc6:	e1cd      	b.n	2cf64 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2cbc8:	2324      	movs	r3, #36	; 0x24
   2cbca:	18fb      	adds	r3, r7, r3
   2cbcc:	881b      	ldrh	r3, [r3, #0]
   2cbce:	2b7f      	cmp	r3, #127	; 0x7f
   2cbd0:	d80b      	bhi.n	2cbea <create_name+0xc6>
   2cbd2:	2324      	movs	r3, #36	; 0x24
   2cbd4:	18fb      	adds	r3, r7, r3
   2cbd6:	881a      	ldrh	r2, [r3, #0]
   2cbd8:	4bb1      	ldr	r3, [pc, #708]	; (2cea0 <create_name+0x37c>)
   2cbda:	0011      	movs	r1, r2
   2cbdc:	0018      	movs	r0, r3
   2cbde:	4bb1      	ldr	r3, [pc, #708]	; (2cea4 <create_name+0x380>)
   2cbe0:	4798      	blx	r3
   2cbe2:	1e03      	subs	r3, r0, #0
   2cbe4:	d001      	beq.n	2cbea <create_name+0xc6>
			return FR_INVALID_NAME;
   2cbe6:	2306      	movs	r3, #6
   2cbe8:	e1bc      	b.n	2cf64 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2cbea:	697b      	ldr	r3, [r7, #20]
   2cbec:	1c5a      	adds	r2, r3, #1
   2cbee:	617a      	str	r2, [r7, #20]
   2cbf0:	005b      	lsls	r3, r3, #1
   2cbf2:	68fa      	ldr	r2, [r7, #12]
   2cbf4:	18d3      	adds	r3, r2, r3
   2cbf6:	2224      	movs	r2, #36	; 0x24
   2cbf8:	18ba      	adds	r2, r7, r2
   2cbfa:	8812      	ldrh	r2, [r2, #0]
   2cbfc:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2cbfe:	e7ac      	b.n	2cb5a <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2cc00:	693a      	ldr	r2, [r7, #16]
   2cc02:	69bb      	ldr	r3, [r7, #24]
   2cc04:	18d2      	adds	r2, r2, r3
   2cc06:	683b      	ldr	r3, [r7, #0]
   2cc08:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2cc0a:	2324      	movs	r3, #36	; 0x24
   2cc0c:	18fb      	adds	r3, r7, r3
   2cc0e:	881b      	ldrh	r3, [r3, #0]
   2cc10:	2b1f      	cmp	r3, #31
   2cc12:	d801      	bhi.n	2cc18 <create_name+0xf4>
   2cc14:	2204      	movs	r2, #4
   2cc16:	e000      	b.n	2cc1a <create_name+0xf6>
   2cc18:	2200      	movs	r2, #0
   2cc1a:	2326      	movs	r3, #38	; 0x26
   2cc1c:	18fb      	adds	r3, r7, r3
   2cc1e:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2cc20:	e017      	b.n	2cc52 <create_name+0x12e>
		w = lfn[di-1];
   2cc22:	697b      	ldr	r3, [r7, #20]
   2cc24:	4aa0      	ldr	r2, [pc, #640]	; (2cea8 <create_name+0x384>)
   2cc26:	4694      	mov	ip, r2
   2cc28:	4463      	add	r3, ip
   2cc2a:	005b      	lsls	r3, r3, #1
   2cc2c:	68fa      	ldr	r2, [r7, #12]
   2cc2e:	18d2      	adds	r2, r2, r3
   2cc30:	2324      	movs	r3, #36	; 0x24
   2cc32:	18fb      	adds	r3, r7, r3
   2cc34:	8812      	ldrh	r2, [r2, #0]
   2cc36:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2cc38:	2324      	movs	r3, #36	; 0x24
   2cc3a:	18fb      	adds	r3, r7, r3
   2cc3c:	881b      	ldrh	r3, [r3, #0]
   2cc3e:	2b20      	cmp	r3, #32
   2cc40:	d004      	beq.n	2cc4c <create_name+0x128>
   2cc42:	2324      	movs	r3, #36	; 0x24
   2cc44:	18fb      	adds	r3, r7, r3
   2cc46:	881b      	ldrh	r3, [r3, #0]
   2cc48:	2b2e      	cmp	r3, #46	; 0x2e
   2cc4a:	d106      	bne.n	2cc5a <create_name+0x136>
		di--;
   2cc4c:	697b      	ldr	r3, [r7, #20]
   2cc4e:	3b01      	subs	r3, #1
   2cc50:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2cc52:	697b      	ldr	r3, [r7, #20]
   2cc54:	2b00      	cmp	r3, #0
   2cc56:	d1e4      	bne.n	2cc22 <create_name+0xfe>
   2cc58:	e000      	b.n	2cc5c <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2cc5a:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2cc5c:	697b      	ldr	r3, [r7, #20]
   2cc5e:	2b00      	cmp	r3, #0
   2cc60:	d101      	bne.n	2cc66 <create_name+0x142>
   2cc62:	2306      	movs	r3, #6
   2cc64:	e17e      	b.n	2cf64 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2cc66:	697b      	ldr	r3, [r7, #20]
   2cc68:	005b      	lsls	r3, r3, #1
   2cc6a:	68fa      	ldr	r2, [r7, #12]
   2cc6c:	18d3      	adds	r3, r2, r3
   2cc6e:	2200      	movs	r2, #0
   2cc70:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2cc72:	687b      	ldr	r3, [r7, #4]
   2cc74:	699b      	ldr	r3, [r3, #24]
   2cc76:	220b      	movs	r2, #11
   2cc78:	2120      	movs	r1, #32
   2cc7a:	0018      	movs	r0, r3
   2cc7c:	4b8b      	ldr	r3, [pc, #556]	; (2ceac <create_name+0x388>)
   2cc7e:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2cc80:	2300      	movs	r3, #0
   2cc82:	61bb      	str	r3, [r7, #24]
   2cc84:	e002      	b.n	2cc8c <create_name+0x168>
   2cc86:	69bb      	ldr	r3, [r7, #24]
   2cc88:	3301      	adds	r3, #1
   2cc8a:	61bb      	str	r3, [r7, #24]
   2cc8c:	69bb      	ldr	r3, [r7, #24]
   2cc8e:	005b      	lsls	r3, r3, #1
   2cc90:	68fa      	ldr	r2, [r7, #12]
   2cc92:	18d3      	adds	r3, r2, r3
   2cc94:	881b      	ldrh	r3, [r3, #0]
   2cc96:	2b20      	cmp	r3, #32
   2cc98:	d0f5      	beq.n	2cc86 <create_name+0x162>
   2cc9a:	69bb      	ldr	r3, [r7, #24]
   2cc9c:	005b      	lsls	r3, r3, #1
   2cc9e:	68fa      	ldr	r2, [r7, #12]
   2cca0:	18d3      	adds	r3, r2, r3
   2cca2:	881b      	ldrh	r3, [r3, #0]
   2cca4:	2b2e      	cmp	r3, #46	; 0x2e
   2cca6:	d0ee      	beq.n	2cc86 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2cca8:	69bb      	ldr	r3, [r7, #24]
   2ccaa:	2b00      	cmp	r3, #0
   2ccac:	d00b      	beq.n	2ccc6 <create_name+0x1a2>
   2ccae:	2326      	movs	r3, #38	; 0x26
   2ccb0:	18fb      	adds	r3, r7, r3
   2ccb2:	2226      	movs	r2, #38	; 0x26
   2ccb4:	18ba      	adds	r2, r7, r2
   2ccb6:	7812      	ldrb	r2, [r2, #0]
   2ccb8:	2103      	movs	r1, #3
   2ccba:	430a      	orrs	r2, r1
   2ccbc:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2ccbe:	e002      	b.n	2ccc6 <create_name+0x1a2>
   2ccc0:	697b      	ldr	r3, [r7, #20]
   2ccc2:	3b01      	subs	r3, #1
   2ccc4:	617b      	str	r3, [r7, #20]
   2ccc6:	697b      	ldr	r3, [r7, #20]
   2ccc8:	2b00      	cmp	r3, #0
   2ccca:	d009      	beq.n	2cce0 <create_name+0x1bc>
   2cccc:	697b      	ldr	r3, [r7, #20]
   2ccce:	4a76      	ldr	r2, [pc, #472]	; (2cea8 <create_name+0x384>)
   2ccd0:	4694      	mov	ip, r2
   2ccd2:	4463      	add	r3, ip
   2ccd4:	005b      	lsls	r3, r3, #1
   2ccd6:	68fa      	ldr	r2, [r7, #12]
   2ccd8:	18d3      	adds	r3, r2, r3
   2ccda:	881b      	ldrh	r3, [r3, #0]
   2ccdc:	2b2e      	cmp	r3, #46	; 0x2e
   2ccde:	d1ef      	bne.n	2ccc0 <create_name+0x19c>

	b = i = 0; ni = 8;
   2cce0:	2300      	movs	r3, #0
   2cce2:	623b      	str	r3, [r7, #32]
   2cce4:	2327      	movs	r3, #39	; 0x27
   2cce6:	18fb      	adds	r3, r7, r3
   2cce8:	2200      	movs	r2, #0
   2ccea:	701a      	strb	r2, [r3, #0]
   2ccec:	2308      	movs	r3, #8
   2ccee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2ccf0:	69bb      	ldr	r3, [r7, #24]
   2ccf2:	1c5a      	adds	r2, r3, #1
   2ccf4:	61ba      	str	r2, [r7, #24]
   2ccf6:	005b      	lsls	r3, r3, #1
   2ccf8:	68fa      	ldr	r2, [r7, #12]
   2ccfa:	18d2      	adds	r2, r2, r3
   2ccfc:	2324      	movs	r3, #36	; 0x24
   2ccfe:	18fb      	adds	r3, r7, r3
   2cd00:	8812      	ldrh	r2, [r2, #0]
   2cd02:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2cd04:	2324      	movs	r3, #36	; 0x24
   2cd06:	18fb      	adds	r3, r7, r3
   2cd08:	881b      	ldrh	r3, [r3, #0]
   2cd0a:	2b00      	cmp	r3, #0
   2cd0c:	d100      	bne.n	2cd10 <create_name+0x1ec>
   2cd0e:	e0c3      	b.n	2ce98 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2cd10:	2324      	movs	r3, #36	; 0x24
   2cd12:	18fb      	adds	r3, r7, r3
   2cd14:	881b      	ldrh	r3, [r3, #0]
   2cd16:	2b20      	cmp	r3, #32
   2cd18:	d008      	beq.n	2cd2c <create_name+0x208>
   2cd1a:	2324      	movs	r3, #36	; 0x24
   2cd1c:	18fb      	adds	r3, r7, r3
   2cd1e:	881b      	ldrh	r3, [r3, #0]
   2cd20:	2b2e      	cmp	r3, #46	; 0x2e
   2cd22:	d10c      	bne.n	2cd3e <create_name+0x21a>
   2cd24:	69ba      	ldr	r2, [r7, #24]
   2cd26:	697b      	ldr	r3, [r7, #20]
   2cd28:	429a      	cmp	r2, r3
   2cd2a:	d008      	beq.n	2cd3e <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2cd2c:	2326      	movs	r3, #38	; 0x26
   2cd2e:	18fb      	adds	r3, r7, r3
   2cd30:	2226      	movs	r2, #38	; 0x26
   2cd32:	18ba      	adds	r2, r7, r2
   2cd34:	7812      	ldrb	r2, [r2, #0]
   2cd36:	2103      	movs	r1, #3
   2cd38:	430a      	orrs	r2, r1
   2cd3a:	701a      	strb	r2, [r3, #0]
   2cd3c:	e0ab      	b.n	2ce96 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2cd3e:	6a3a      	ldr	r2, [r7, #32]
   2cd40:	69fb      	ldr	r3, [r7, #28]
   2cd42:	429a      	cmp	r2, r3
   2cd44:	d203      	bcs.n	2cd4e <create_name+0x22a>
   2cd46:	69ba      	ldr	r2, [r7, #24]
   2cd48:	697b      	ldr	r3, [r7, #20]
   2cd4a:	429a      	cmp	r2, r3
   2cd4c:	d12a      	bne.n	2cda4 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2cd4e:	69fb      	ldr	r3, [r7, #28]
   2cd50:	2b0b      	cmp	r3, #11
   2cd52:	d108      	bne.n	2cd66 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2cd54:	2326      	movs	r3, #38	; 0x26
   2cd56:	18fb      	adds	r3, r7, r3
   2cd58:	2226      	movs	r2, #38	; 0x26
   2cd5a:	18ba      	adds	r2, r7, r2
   2cd5c:	7812      	ldrb	r2, [r2, #0]
   2cd5e:	2103      	movs	r1, #3
   2cd60:	430a      	orrs	r2, r1
   2cd62:	701a      	strb	r2, [r3, #0]
   2cd64:	e0a9      	b.n	2ceba <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2cd66:	69ba      	ldr	r2, [r7, #24]
   2cd68:	697b      	ldr	r3, [r7, #20]
   2cd6a:	429a      	cmp	r2, r3
   2cd6c:	d007      	beq.n	2cd7e <create_name+0x25a>
   2cd6e:	2326      	movs	r3, #38	; 0x26
   2cd70:	18fb      	adds	r3, r7, r3
   2cd72:	2226      	movs	r2, #38	; 0x26
   2cd74:	18ba      	adds	r2, r7, r2
   2cd76:	7812      	ldrb	r2, [r2, #0]
   2cd78:	2103      	movs	r1, #3
   2cd7a:	430a      	orrs	r2, r1
   2cd7c:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2cd7e:	69ba      	ldr	r2, [r7, #24]
   2cd80:	697b      	ldr	r3, [r7, #20]
   2cd82:	429a      	cmp	r2, r3
   2cd84:	d900      	bls.n	2cd88 <create_name+0x264>
   2cd86:	e097      	b.n	2ceb8 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2cd88:	697b      	ldr	r3, [r7, #20]
   2cd8a:	61bb      	str	r3, [r7, #24]
   2cd8c:	2308      	movs	r3, #8
   2cd8e:	623b      	str	r3, [r7, #32]
   2cd90:	230b      	movs	r3, #11
   2cd92:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2cd94:	2327      	movs	r3, #39	; 0x27
   2cd96:	18fb      	adds	r3, r7, r3
   2cd98:	2227      	movs	r2, #39	; 0x27
   2cd9a:	18ba      	adds	r2, r7, r2
   2cd9c:	7812      	ldrb	r2, [r2, #0]
   2cd9e:	0092      	lsls	r2, r2, #2
   2cda0:	701a      	strb	r2, [r3, #0]
   2cda2:	e078      	b.n	2ce96 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2cda4:	2324      	movs	r3, #36	; 0x24
   2cda6:	18fb      	adds	r3, r7, r3
   2cda8:	881b      	ldrh	r3, [r3, #0]
   2cdaa:	2b7f      	cmp	r3, #127	; 0x7f
   2cdac:	d920      	bls.n	2cdf0 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2cdae:	2324      	movs	r3, #36	; 0x24
   2cdb0:	18fc      	adds	r4, r7, r3
   2cdb2:	2324      	movs	r3, #36	; 0x24
   2cdb4:	18fb      	adds	r3, r7, r3
   2cdb6:	881b      	ldrh	r3, [r3, #0]
   2cdb8:	2100      	movs	r1, #0
   2cdba:	0018      	movs	r0, r3
   2cdbc:	4b37      	ldr	r3, [pc, #220]	; (2ce9c <create_name+0x378>)
   2cdbe:	4798      	blx	r3
   2cdc0:	0003      	movs	r3, r0
   2cdc2:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2cdc4:	2324      	movs	r3, #36	; 0x24
   2cdc6:	18fb      	adds	r3, r7, r3
   2cdc8:	881b      	ldrh	r3, [r3, #0]
   2cdca:	2b00      	cmp	r3, #0
   2cdcc:	d008      	beq.n	2cde0 <create_name+0x2bc>
   2cdce:	2324      	movs	r3, #36	; 0x24
   2cdd0:	18fb      	adds	r3, r7, r3
   2cdd2:	881b      	ldrh	r3, [r3, #0]
   2cdd4:	3b80      	subs	r3, #128	; 0x80
   2cdd6:	4a36      	ldr	r2, [pc, #216]	; (2ceb0 <create_name+0x38c>)
   2cdd8:	5cd2      	ldrb	r2, [r2, r3]
   2cdda:	2324      	movs	r3, #36	; 0x24
   2cddc:	18fb      	adds	r3, r7, r3
   2cdde:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2cde0:	2326      	movs	r3, #38	; 0x26
   2cde2:	18fb      	adds	r3, r7, r3
   2cde4:	2226      	movs	r2, #38	; 0x26
   2cde6:	18ba      	adds	r2, r7, r2
   2cde8:	7812      	ldrb	r2, [r2, #0]
   2cdea:	2102      	movs	r1, #2
   2cdec:	430a      	orrs	r2, r1
   2cdee:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2cdf0:	2324      	movs	r3, #36	; 0x24
   2cdf2:	18fb      	adds	r3, r7, r3
   2cdf4:	881b      	ldrh	r3, [r3, #0]
   2cdf6:	2b00      	cmp	r3, #0
   2cdf8:	d009      	beq.n	2ce0e <create_name+0x2ea>
   2cdfa:	2324      	movs	r3, #36	; 0x24
   2cdfc:	18fb      	adds	r3, r7, r3
   2cdfe:	881a      	ldrh	r2, [r3, #0]
   2ce00:	4b2c      	ldr	r3, [pc, #176]	; (2ceb4 <create_name+0x390>)
   2ce02:	0011      	movs	r1, r2
   2ce04:	0018      	movs	r0, r3
   2ce06:	4b27      	ldr	r3, [pc, #156]	; (2cea4 <create_name+0x380>)
   2ce08:	4798      	blx	r3
   2ce0a:	1e03      	subs	r3, r0, #0
   2ce0c:	d00c      	beq.n	2ce28 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2ce0e:	2324      	movs	r3, #36	; 0x24
   2ce10:	18fb      	adds	r3, r7, r3
   2ce12:	225f      	movs	r2, #95	; 0x5f
   2ce14:	801a      	strh	r2, [r3, #0]
   2ce16:	2326      	movs	r3, #38	; 0x26
   2ce18:	18fb      	adds	r3, r7, r3
   2ce1a:	2226      	movs	r2, #38	; 0x26
   2ce1c:	18ba      	adds	r2, r7, r2
   2ce1e:	7812      	ldrb	r2, [r2, #0]
   2ce20:	2103      	movs	r1, #3
   2ce22:	430a      	orrs	r2, r1
   2ce24:	701a      	strb	r2, [r3, #0]
   2ce26:	e02b      	b.n	2ce80 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2ce28:	2324      	movs	r3, #36	; 0x24
   2ce2a:	18fb      	adds	r3, r7, r3
   2ce2c:	881b      	ldrh	r3, [r3, #0]
   2ce2e:	2b40      	cmp	r3, #64	; 0x40
   2ce30:	d90d      	bls.n	2ce4e <create_name+0x32a>
   2ce32:	2324      	movs	r3, #36	; 0x24
   2ce34:	18fb      	adds	r3, r7, r3
   2ce36:	881b      	ldrh	r3, [r3, #0]
   2ce38:	2b5a      	cmp	r3, #90	; 0x5a
   2ce3a:	d808      	bhi.n	2ce4e <create_name+0x32a>
					b |= 2;
   2ce3c:	2327      	movs	r3, #39	; 0x27
   2ce3e:	18fb      	adds	r3, r7, r3
   2ce40:	2227      	movs	r2, #39	; 0x27
   2ce42:	18ba      	adds	r2, r7, r2
   2ce44:	7812      	ldrb	r2, [r2, #0]
   2ce46:	2102      	movs	r1, #2
   2ce48:	430a      	orrs	r2, r1
   2ce4a:	701a      	strb	r2, [r3, #0]
   2ce4c:	e018      	b.n	2ce80 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2ce4e:	2324      	movs	r3, #36	; 0x24
   2ce50:	18fb      	adds	r3, r7, r3
   2ce52:	881b      	ldrh	r3, [r3, #0]
   2ce54:	2b60      	cmp	r3, #96	; 0x60
   2ce56:	d913      	bls.n	2ce80 <create_name+0x35c>
   2ce58:	2324      	movs	r3, #36	; 0x24
   2ce5a:	18fb      	adds	r3, r7, r3
   2ce5c:	881b      	ldrh	r3, [r3, #0]
   2ce5e:	2b7a      	cmp	r3, #122	; 0x7a
   2ce60:	d80e      	bhi.n	2ce80 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2ce62:	2327      	movs	r3, #39	; 0x27
   2ce64:	18fb      	adds	r3, r7, r3
   2ce66:	2227      	movs	r2, #39	; 0x27
   2ce68:	18ba      	adds	r2, r7, r2
   2ce6a:	7812      	ldrb	r2, [r2, #0]
   2ce6c:	2101      	movs	r1, #1
   2ce6e:	430a      	orrs	r2, r1
   2ce70:	701a      	strb	r2, [r3, #0]
   2ce72:	2324      	movs	r3, #36	; 0x24
   2ce74:	18fb      	adds	r3, r7, r3
   2ce76:	2224      	movs	r2, #36	; 0x24
   2ce78:	18ba      	adds	r2, r7, r2
   2ce7a:	8812      	ldrh	r2, [r2, #0]
   2ce7c:	3a20      	subs	r2, #32
   2ce7e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2ce80:	687b      	ldr	r3, [r7, #4]
   2ce82:	699a      	ldr	r2, [r3, #24]
   2ce84:	6a3b      	ldr	r3, [r7, #32]
   2ce86:	1c59      	adds	r1, r3, #1
   2ce88:	6239      	str	r1, [r7, #32]
   2ce8a:	18d3      	adds	r3, r2, r3
   2ce8c:	2224      	movs	r2, #36	; 0x24
   2ce8e:	18ba      	adds	r2, r7, r2
   2ce90:	8812      	ldrh	r2, [r2, #0]
   2ce92:	b2d2      	uxtb	r2, r2
   2ce94:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2ce96:	e72b      	b.n	2ccf0 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2ce98:	46c0      	nop			; (mov r8, r8)
   2ce9a:	e00e      	b.n	2ceba <create_name+0x396>
   2ce9c:	0002e205 	.word	0x0002e205
   2cea0:	0003933c 	.word	0x0003933c
   2cea4:	0002b6c7 	.word	0x0002b6c7
   2cea8:	7fffffff 	.word	0x7fffffff
   2ceac:	0002b64d 	.word	0x0002b64d
   2ceb0:	00039384 	.word	0x00039384
   2ceb4:	00039348 	.word	0x00039348
			if (si > di) break;			/* No extension */
   2ceb8:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2ceba:	687b      	ldr	r3, [r7, #4]
   2cebc:	699b      	ldr	r3, [r3, #24]
   2cebe:	781b      	ldrb	r3, [r3, #0]
   2cec0:	2be5      	cmp	r3, #229	; 0xe5
   2cec2:	d103      	bne.n	2cecc <create_name+0x3a8>
   2cec4:	687b      	ldr	r3, [r7, #4]
   2cec6:	699b      	ldr	r3, [r3, #24]
   2cec8:	2205      	movs	r2, #5
   2ceca:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2cecc:	69fb      	ldr	r3, [r7, #28]
   2cece:	2b08      	cmp	r3, #8
   2ced0:	d106      	bne.n	2cee0 <create_name+0x3bc>
   2ced2:	2327      	movs	r3, #39	; 0x27
   2ced4:	18fb      	adds	r3, r7, r3
   2ced6:	2227      	movs	r2, #39	; 0x27
   2ced8:	18ba      	adds	r2, r7, r2
   2ceda:	7812      	ldrb	r2, [r2, #0]
   2cedc:	0092      	lsls	r2, r2, #2
   2cede:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2cee0:	2327      	movs	r3, #39	; 0x27
   2cee2:	18fb      	adds	r3, r7, r3
   2cee4:	781b      	ldrb	r3, [r3, #0]
   2cee6:	220c      	movs	r2, #12
   2cee8:	4013      	ands	r3, r2
   2ceea:	2b0c      	cmp	r3, #12
   2ceec:	d006      	beq.n	2cefc <create_name+0x3d8>
   2ceee:	2327      	movs	r3, #39	; 0x27
   2cef0:	18fb      	adds	r3, r7, r3
   2cef2:	781b      	ldrb	r3, [r3, #0]
   2cef4:	2203      	movs	r2, #3
   2cef6:	4013      	ands	r3, r2
   2cef8:	2b03      	cmp	r3, #3
   2cefa:	d107      	bne.n	2cf0c <create_name+0x3e8>
		cf |= NS_LFN;
   2cefc:	2326      	movs	r3, #38	; 0x26
   2cefe:	18fb      	adds	r3, r7, r3
   2cf00:	2226      	movs	r2, #38	; 0x26
   2cf02:	18ba      	adds	r2, r7, r2
   2cf04:	7812      	ldrb	r2, [r2, #0]
   2cf06:	2102      	movs	r1, #2
   2cf08:	430a      	orrs	r2, r1
   2cf0a:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2cf0c:	2326      	movs	r3, #38	; 0x26
   2cf0e:	18fb      	adds	r3, r7, r3
   2cf10:	781b      	ldrb	r3, [r3, #0]
   2cf12:	2202      	movs	r2, #2
   2cf14:	4013      	ands	r3, r2
   2cf16:	d11d      	bne.n	2cf54 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2cf18:	2327      	movs	r3, #39	; 0x27
   2cf1a:	18fb      	adds	r3, r7, r3
   2cf1c:	781b      	ldrb	r3, [r3, #0]
   2cf1e:	2203      	movs	r2, #3
   2cf20:	4013      	ands	r3, r2
   2cf22:	2b01      	cmp	r3, #1
   2cf24:	d107      	bne.n	2cf36 <create_name+0x412>
   2cf26:	2326      	movs	r3, #38	; 0x26
   2cf28:	18fb      	adds	r3, r7, r3
   2cf2a:	2226      	movs	r2, #38	; 0x26
   2cf2c:	18ba      	adds	r2, r7, r2
   2cf2e:	7812      	ldrb	r2, [r2, #0]
   2cf30:	2110      	movs	r1, #16
   2cf32:	430a      	orrs	r2, r1
   2cf34:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2cf36:	2327      	movs	r3, #39	; 0x27
   2cf38:	18fb      	adds	r3, r7, r3
   2cf3a:	781b      	ldrb	r3, [r3, #0]
   2cf3c:	220c      	movs	r2, #12
   2cf3e:	4013      	ands	r3, r2
   2cf40:	2b04      	cmp	r3, #4
   2cf42:	d107      	bne.n	2cf54 <create_name+0x430>
   2cf44:	2326      	movs	r3, #38	; 0x26
   2cf46:	18fb      	adds	r3, r7, r3
   2cf48:	2226      	movs	r2, #38	; 0x26
   2cf4a:	18ba      	adds	r2, r7, r2
   2cf4c:	7812      	ldrb	r2, [r2, #0]
   2cf4e:	2108      	movs	r1, #8
   2cf50:	430a      	orrs	r2, r1
   2cf52:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2cf54:	687b      	ldr	r3, [r7, #4]
   2cf56:	699b      	ldr	r3, [r3, #24]
   2cf58:	330b      	adds	r3, #11
   2cf5a:	2226      	movs	r2, #38	; 0x26
   2cf5c:	18ba      	adds	r2, r7, r2
   2cf5e:	7812      	ldrb	r2, [r2, #0]
   2cf60:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2cf62:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2cf64:	0018      	movs	r0, r3
   2cf66:	46bd      	mov	sp, r7
   2cf68:	b00b      	add	sp, #44	; 0x2c
   2cf6a:	bd90      	pop	{r4, r7, pc}

0002cf6c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2cf6c:	b590      	push	{r4, r7, lr}
   2cf6e:	b085      	sub	sp, #20
   2cf70:	af00      	add	r7, sp, #0
   2cf72:	6078      	str	r0, [r7, #4]
   2cf74:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2cf76:	683b      	ldr	r3, [r7, #0]
   2cf78:	781b      	ldrb	r3, [r3, #0]
   2cf7a:	2b2f      	cmp	r3, #47	; 0x2f
   2cf7c:	d003      	beq.n	2cf86 <follow_path+0x1a>
   2cf7e:	683b      	ldr	r3, [r7, #0]
   2cf80:	781b      	ldrb	r3, [r3, #0]
   2cf82:	2b5c      	cmp	r3, #92	; 0x5c
   2cf84:	d102      	bne.n	2cf8c <follow_path+0x20>
		path++;
   2cf86:	683b      	ldr	r3, [r7, #0]
   2cf88:	3301      	adds	r3, #1
   2cf8a:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2cf8c:	687b      	ldr	r3, [r7, #4]
   2cf8e:	2200      	movs	r2, #0
   2cf90:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2cf92:	683b      	ldr	r3, [r7, #0]
   2cf94:	781b      	ldrb	r3, [r3, #0]
   2cf96:	2b1f      	cmp	r3, #31
   2cf98:	d80c      	bhi.n	2cfb4 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2cf9a:	230f      	movs	r3, #15
   2cf9c:	18fc      	adds	r4, r7, r3
   2cf9e:	687b      	ldr	r3, [r7, #4]
   2cfa0:	2100      	movs	r1, #0
   2cfa2:	0018      	movs	r0, r3
   2cfa4:	4b3c      	ldr	r3, [pc, #240]	; (2d098 <follow_path+0x12c>)
   2cfa6:	4798      	blx	r3
   2cfa8:	0003      	movs	r3, r0
   2cfaa:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2cfac:	687b      	ldr	r3, [r7, #4]
   2cfae:	2200      	movs	r2, #0
   2cfb0:	615a      	str	r2, [r3, #20]
   2cfb2:	e06a      	b.n	2d08a <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2cfb4:	230f      	movs	r3, #15
   2cfb6:	18fc      	adds	r4, r7, r3
   2cfb8:	003a      	movs	r2, r7
   2cfba:	687b      	ldr	r3, [r7, #4]
   2cfbc:	0011      	movs	r1, r2
   2cfbe:	0018      	movs	r0, r3
   2cfc0:	4b36      	ldr	r3, [pc, #216]	; (2d09c <follow_path+0x130>)
   2cfc2:	4798      	blx	r3
   2cfc4:	0003      	movs	r3, r0
   2cfc6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cfc8:	230f      	movs	r3, #15
   2cfca:	18fb      	adds	r3, r7, r3
   2cfcc:	781b      	ldrb	r3, [r3, #0]
   2cfce:	2b00      	cmp	r3, #0
   2cfd0:	d154      	bne.n	2d07c <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2cfd2:	230f      	movs	r3, #15
   2cfd4:	18fc      	adds	r4, r7, r3
   2cfd6:	687b      	ldr	r3, [r7, #4]
   2cfd8:	0018      	movs	r0, r3
   2cfda:	4b31      	ldr	r3, [pc, #196]	; (2d0a0 <follow_path+0x134>)
   2cfdc:	4798      	blx	r3
   2cfde:	0003      	movs	r3, r0
   2cfe0:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2cfe2:	687b      	ldr	r3, [r7, #4]
   2cfe4:	699a      	ldr	r2, [r3, #24]
   2cfe6:	230e      	movs	r3, #14
   2cfe8:	18fb      	adds	r3, r7, r3
   2cfea:	7ad2      	ldrb	r2, [r2, #11]
   2cfec:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2cfee:	230f      	movs	r3, #15
   2cff0:	18fb      	adds	r3, r7, r3
   2cff2:	781b      	ldrb	r3, [r3, #0]
   2cff4:	2b00      	cmp	r3, #0
   2cff6:	d00f      	beq.n	2d018 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2cff8:	230f      	movs	r3, #15
   2cffa:	18fb      	adds	r3, r7, r3
   2cffc:	781b      	ldrb	r3, [r3, #0]
   2cffe:	2b04      	cmp	r3, #4
   2d000:	d13e      	bne.n	2d080 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2d002:	230e      	movs	r3, #14
   2d004:	18fb      	adds	r3, r7, r3
   2d006:	781b      	ldrb	r3, [r3, #0]
   2d008:	2204      	movs	r2, #4
   2d00a:	4013      	ands	r3, r2
   2d00c:	d13a      	bne.n	2d084 <follow_path+0x118>
   2d00e:	230f      	movs	r3, #15
   2d010:	18fb      	adds	r3, r7, r3
   2d012:	2205      	movs	r2, #5
   2d014:	701a      	strb	r2, [r3, #0]
				}
				break;
   2d016:	e035      	b.n	2d084 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2d018:	230e      	movs	r3, #14
   2d01a:	18fb      	adds	r3, r7, r3
   2d01c:	781b      	ldrb	r3, [r3, #0]
   2d01e:	2204      	movs	r2, #4
   2d020:	4013      	ands	r3, r2
   2d022:	d131      	bne.n	2d088 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2d024:	687b      	ldr	r3, [r7, #4]
   2d026:	695b      	ldr	r3, [r3, #20]
   2d028:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2d02a:	68bb      	ldr	r3, [r7, #8]
   2d02c:	330b      	adds	r3, #11
   2d02e:	781b      	ldrb	r3, [r3, #0]
   2d030:	001a      	movs	r2, r3
   2d032:	2310      	movs	r3, #16
   2d034:	4013      	ands	r3, r2
   2d036:	d104      	bne.n	2d042 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2d038:	230f      	movs	r3, #15
   2d03a:	18fb      	adds	r3, r7, r3
   2d03c:	2205      	movs	r2, #5
   2d03e:	701a      	strb	r2, [r3, #0]
   2d040:	e023      	b.n	2d08a <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2d042:	68bb      	ldr	r3, [r7, #8]
   2d044:	3315      	adds	r3, #21
   2d046:	781b      	ldrb	r3, [r3, #0]
   2d048:	021b      	lsls	r3, r3, #8
   2d04a:	b21a      	sxth	r2, r3
   2d04c:	68bb      	ldr	r3, [r7, #8]
   2d04e:	3314      	adds	r3, #20
   2d050:	781b      	ldrb	r3, [r3, #0]
   2d052:	b21b      	sxth	r3, r3
   2d054:	4313      	orrs	r3, r2
   2d056:	b21b      	sxth	r3, r3
   2d058:	b29b      	uxth	r3, r3
   2d05a:	041b      	lsls	r3, r3, #16
   2d05c:	68ba      	ldr	r2, [r7, #8]
   2d05e:	321b      	adds	r2, #27
   2d060:	7812      	ldrb	r2, [r2, #0]
   2d062:	0212      	lsls	r2, r2, #8
   2d064:	b211      	sxth	r1, r2
   2d066:	68ba      	ldr	r2, [r7, #8]
   2d068:	321a      	adds	r2, #26
   2d06a:	7812      	ldrb	r2, [r2, #0]
   2d06c:	b212      	sxth	r2, r2
   2d06e:	430a      	orrs	r2, r1
   2d070:	b212      	sxth	r2, r2
   2d072:	b292      	uxth	r2, r2
   2d074:	431a      	orrs	r2, r3
   2d076:	687b      	ldr	r3, [r7, #4]
   2d078:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2d07a:	e79b      	b.n	2cfb4 <follow_path+0x48>
			if (res != FR_OK) break;
   2d07c:	46c0      	nop			; (mov r8, r8)
   2d07e:	e004      	b.n	2d08a <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2d080:	46c0      	nop			; (mov r8, r8)
   2d082:	e002      	b.n	2d08a <follow_path+0x11e>
				break;
   2d084:	46c0      	nop			; (mov r8, r8)
   2d086:	e000      	b.n	2d08a <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2d088:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2d08a:	230f      	movs	r3, #15
   2d08c:	18fb      	adds	r3, r7, r3
   2d08e:	781b      	ldrb	r3, [r3, #0]
}
   2d090:	0018      	movs	r0, r3
   2d092:	46bd      	mov	sp, r7
   2d094:	b005      	add	sp, #20
   2d096:	bd90      	pop	{r4, r7, pc}
   2d098:	0002bf3d 	.word	0x0002bf3d
   2d09c:	0002cb25 	.word	0x0002cb25
   2d0a0:	0002c5c1 	.word	0x0002c5c1

0002d0a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2d0a4:	b590      	push	{r4, r7, lr}
   2d0a6:	b083      	sub	sp, #12
   2d0a8:	af00      	add	r7, sp, #0
   2d0aa:	6078      	str	r0, [r7, #4]
   2d0ac:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2d0ae:	687b      	ldr	r3, [r7, #4]
   2d0b0:	7858      	ldrb	r0, [r3, #1]
   2d0b2:	687b      	ldr	r3, [r7, #4]
   2d0b4:	3330      	adds	r3, #48	; 0x30
   2d0b6:	0019      	movs	r1, r3
   2d0b8:	683a      	ldr	r2, [r7, #0]
   2d0ba:	2301      	movs	r3, #1
   2d0bc:	4c2a      	ldr	r4, [pc, #168]	; (2d168 <check_fs+0xc4>)
   2d0be:	47a0      	blx	r4
   2d0c0:	1e03      	subs	r3, r0, #0
   2d0c2:	d001      	beq.n	2d0c8 <check_fs+0x24>
		return 3;
   2d0c4:	2303      	movs	r3, #3
   2d0c6:	e04b      	b.n	2d160 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2d0c8:	687b      	ldr	r3, [r7, #4]
   2d0ca:	4a28      	ldr	r2, [pc, #160]	; (2d16c <check_fs+0xc8>)
   2d0cc:	4694      	mov	ip, r2
   2d0ce:	4463      	add	r3, ip
   2d0d0:	3301      	adds	r3, #1
   2d0d2:	781b      	ldrb	r3, [r3, #0]
   2d0d4:	021b      	lsls	r3, r3, #8
   2d0d6:	b21a      	sxth	r2, r3
   2d0d8:	687b      	ldr	r3, [r7, #4]
   2d0da:	4924      	ldr	r1, [pc, #144]	; (2d16c <check_fs+0xc8>)
   2d0dc:	5c5b      	ldrb	r3, [r3, r1]
   2d0de:	b21b      	sxth	r3, r3
   2d0e0:	4313      	orrs	r3, r2
   2d0e2:	b21b      	sxth	r3, r3
   2d0e4:	4a22      	ldr	r2, [pc, #136]	; (2d170 <check_fs+0xcc>)
   2d0e6:	4293      	cmp	r3, r2
   2d0e8:	d001      	beq.n	2d0ee <check_fs+0x4a>
		return 2;
   2d0ea:	2302      	movs	r3, #2
   2d0ec:	e038      	b.n	2d160 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2d0ee:	687b      	ldr	r3, [r7, #4]
   2d0f0:	3366      	adds	r3, #102	; 0x66
   2d0f2:	3303      	adds	r3, #3
   2d0f4:	781b      	ldrb	r3, [r3, #0]
   2d0f6:	061a      	lsls	r2, r3, #24
   2d0f8:	687b      	ldr	r3, [r7, #4]
   2d0fa:	3366      	adds	r3, #102	; 0x66
   2d0fc:	3302      	adds	r3, #2
   2d0fe:	781b      	ldrb	r3, [r3, #0]
   2d100:	041b      	lsls	r3, r3, #16
   2d102:	4313      	orrs	r3, r2
   2d104:	687a      	ldr	r2, [r7, #4]
   2d106:	3266      	adds	r2, #102	; 0x66
   2d108:	3201      	adds	r2, #1
   2d10a:	7812      	ldrb	r2, [r2, #0]
   2d10c:	0212      	lsls	r2, r2, #8
   2d10e:	4313      	orrs	r3, r2
   2d110:	687a      	ldr	r2, [r7, #4]
   2d112:	2166      	movs	r1, #102	; 0x66
   2d114:	5c52      	ldrb	r2, [r2, r1]
   2d116:	4313      	orrs	r3, r2
   2d118:	021b      	lsls	r3, r3, #8
   2d11a:	0a1b      	lsrs	r3, r3, #8
   2d11c:	4a15      	ldr	r2, [pc, #84]	; (2d174 <check_fs+0xd0>)
   2d11e:	4293      	cmp	r3, r2
   2d120:	d101      	bne.n	2d126 <check_fs+0x82>
		return 0;
   2d122:	2300      	movs	r3, #0
   2d124:	e01c      	b.n	2d160 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2d126:	687b      	ldr	r3, [r7, #4]
   2d128:	3382      	adds	r3, #130	; 0x82
   2d12a:	3303      	adds	r3, #3
   2d12c:	781b      	ldrb	r3, [r3, #0]
   2d12e:	061a      	lsls	r2, r3, #24
   2d130:	687b      	ldr	r3, [r7, #4]
   2d132:	3382      	adds	r3, #130	; 0x82
   2d134:	3302      	adds	r3, #2
   2d136:	781b      	ldrb	r3, [r3, #0]
   2d138:	041b      	lsls	r3, r3, #16
   2d13a:	4313      	orrs	r3, r2
   2d13c:	687a      	ldr	r2, [r7, #4]
   2d13e:	3282      	adds	r2, #130	; 0x82
   2d140:	3201      	adds	r2, #1
   2d142:	7812      	ldrb	r2, [r2, #0]
   2d144:	0212      	lsls	r2, r2, #8
   2d146:	4313      	orrs	r3, r2
   2d148:	687a      	ldr	r2, [r7, #4]
   2d14a:	2182      	movs	r1, #130	; 0x82
   2d14c:	5c52      	ldrb	r2, [r2, r1]
   2d14e:	4313      	orrs	r3, r2
   2d150:	021b      	lsls	r3, r3, #8
   2d152:	0a1b      	lsrs	r3, r3, #8
   2d154:	4a07      	ldr	r2, [pc, #28]	; (2d174 <check_fs+0xd0>)
   2d156:	4293      	cmp	r3, r2
   2d158:	d101      	bne.n	2d15e <check_fs+0xba>
		return 0;
   2d15a:	2300      	movs	r3, #0
   2d15c:	e000      	b.n	2d160 <check_fs+0xbc>

	return 1;
   2d15e:	2301      	movs	r3, #1
}
   2d160:	0018      	movs	r0, r3
   2d162:	46bd      	mov	sp, r7
   2d164:	b003      	add	sp, #12
   2d166:	bd90      	pop	{r4, r7, pc}
   2d168:	0002b30d 	.word	0x0002b30d
   2d16c:	0000022e 	.word	0x0000022e
   2d170:	ffffaa55 	.word	0xffffaa55
   2d174:	00544146 	.word	0x00544146

0002d178 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2d178:	b590      	push	{r4, r7, lr}
   2d17a:	b093      	sub	sp, #76	; 0x4c
   2d17c:	af00      	add	r7, sp, #0
   2d17e:	60f8      	str	r0, [r7, #12]
   2d180:	60b9      	str	r1, [r7, #8]
   2d182:	1dfb      	adds	r3, r7, #7
   2d184:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2d186:	68fb      	ldr	r3, [r7, #12]
   2d188:	681b      	ldr	r3, [r3, #0]
   2d18a:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2d18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d18e:	781b      	ldrb	r3, [r3, #0]
   2d190:	3b30      	subs	r3, #48	; 0x30
   2d192:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2d194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d196:	2b09      	cmp	r3, #9
   2d198:	d80b      	bhi.n	2d1b2 <chk_mounted+0x3a>
   2d19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d19c:	3301      	adds	r3, #1
   2d19e:	781b      	ldrb	r3, [r3, #0]
   2d1a0:	2b3a      	cmp	r3, #58	; 0x3a
   2d1a2:	d106      	bne.n	2d1b2 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2d1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d1a6:	3302      	adds	r3, #2
   2d1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   2d1aa:	68fb      	ldr	r3, [r7, #12]
   2d1ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2d1ae:	601a      	str	r2, [r3, #0]
   2d1b0:	e001      	b.n	2d1b6 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2d1b2:	2300      	movs	r3, #0
   2d1b4:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2d1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d1b8:	2b07      	cmp	r3, #7
   2d1ba:	d901      	bls.n	2d1c0 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2d1bc:	230b      	movs	r3, #11
   2d1be:	e2af      	b.n	2d720 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2d1c0:	4bc5      	ldr	r3, [pc, #788]	; (2d4d8 <chk_mounted+0x360>)
   2d1c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2d1c4:	0092      	lsls	r2, r2, #2
   2d1c6:	58d3      	ldr	r3, [r2, r3]
   2d1c8:	62bb      	str	r3, [r7, #40]	; 0x28
   2d1ca:	68bb      	ldr	r3, [r7, #8]
   2d1cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d1ce:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2d1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1d2:	2b00      	cmp	r3, #0
   2d1d4:	d101      	bne.n	2d1da <chk_mounted+0x62>
   2d1d6:	230c      	movs	r3, #12
   2d1d8:	e2a2      	b.n	2d720 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2d1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1dc:	781b      	ldrb	r3, [r3, #0]
   2d1de:	2b00      	cmp	r3, #0
   2d1e0:	d01c      	beq.n	2d21c <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2d1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1e4:	785b      	ldrb	r3, [r3, #1]
   2d1e6:	2227      	movs	r2, #39	; 0x27
   2d1e8:	18bc      	adds	r4, r7, r2
   2d1ea:	0018      	movs	r0, r3
   2d1ec:	4bbb      	ldr	r3, [pc, #748]	; (2d4dc <chk_mounted+0x364>)
   2d1ee:	4798      	blx	r3
   2d1f0:	0003      	movs	r3, r0
   2d1f2:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2d1f4:	2327      	movs	r3, #39	; 0x27
   2d1f6:	18fb      	adds	r3, r7, r3
   2d1f8:	781b      	ldrb	r3, [r3, #0]
   2d1fa:	2201      	movs	r2, #1
   2d1fc:	4013      	ands	r3, r2
   2d1fe:	d10d      	bne.n	2d21c <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2d200:	1dfb      	adds	r3, r7, #7
   2d202:	781b      	ldrb	r3, [r3, #0]
   2d204:	2b00      	cmp	r3, #0
   2d206:	d007      	beq.n	2d218 <chk_mounted+0xa0>
   2d208:	2327      	movs	r3, #39	; 0x27
   2d20a:	18fb      	adds	r3, r7, r3
   2d20c:	781b      	ldrb	r3, [r3, #0]
   2d20e:	2204      	movs	r2, #4
   2d210:	4013      	ands	r3, r2
   2d212:	d001      	beq.n	2d218 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2d214:	230a      	movs	r3, #10
   2d216:	e283      	b.n	2d720 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2d218:	2300      	movs	r3, #0
   2d21a:	e281      	b.n	2d720 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2d21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d21e:	2200      	movs	r2, #0
   2d220:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2d222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d224:	b2da      	uxtb	r2, r3
   2d226:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d228:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2d22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d22c:	785b      	ldrb	r3, [r3, #1]
   2d22e:	2227      	movs	r2, #39	; 0x27
   2d230:	18bc      	adds	r4, r7, r2
   2d232:	0018      	movs	r0, r3
   2d234:	4baa      	ldr	r3, [pc, #680]	; (2d4e0 <chk_mounted+0x368>)
   2d236:	4798      	blx	r3
   2d238:	0003      	movs	r3, r0
   2d23a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2d23c:	2327      	movs	r3, #39	; 0x27
   2d23e:	18fb      	adds	r3, r7, r3
   2d240:	781b      	ldrb	r3, [r3, #0]
   2d242:	2201      	movs	r2, #1
   2d244:	4013      	ands	r3, r2
   2d246:	d001      	beq.n	2d24c <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2d248:	2303      	movs	r3, #3
   2d24a:	e269      	b.n	2d720 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2d24c:	1dfb      	adds	r3, r7, #7
   2d24e:	781b      	ldrb	r3, [r3, #0]
   2d250:	2b00      	cmp	r3, #0
   2d252:	d007      	beq.n	2d264 <chk_mounted+0xec>
   2d254:	2327      	movs	r3, #39	; 0x27
   2d256:	18fb      	adds	r3, r7, r3
   2d258:	781b      	ldrb	r3, [r3, #0]
   2d25a:	2204      	movs	r2, #4
   2d25c:	4013      	ands	r3, r2
   2d25e:	d001      	beq.n	2d264 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2d260:	230a      	movs	r3, #10
   2d262:	e25d      	b.n	2d720 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2d264:	2300      	movs	r3, #0
   2d266:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d268:	2347      	movs	r3, #71	; 0x47
   2d26a:	18fc      	adds	r4, r7, r3
   2d26c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d270:	0011      	movs	r1, r2
   2d272:	0018      	movs	r0, r3
   2d274:	4b9b      	ldr	r3, [pc, #620]	; (2d4e4 <chk_mounted+0x36c>)
   2d276:	4798      	blx	r3
   2d278:	0003      	movs	r3, r0
   2d27a:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2d27c:	2347      	movs	r3, #71	; 0x47
   2d27e:	18fb      	adds	r3, r7, r3
   2d280:	781b      	ldrb	r3, [r3, #0]
   2d282:	2b01      	cmp	r3, #1
   2d284:	d13b      	bne.n	2d2fe <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2d286:	2346      	movs	r3, #70	; 0x46
   2d288:	18fb      	adds	r3, r7, r3
   2d28a:	2200      	movs	r2, #0
   2d28c:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2d28e:	2346      	movs	r3, #70	; 0x46
   2d290:	18fb      	adds	r3, r7, r3
   2d292:	781b      	ldrb	r3, [r3, #0]
   2d294:	2b00      	cmp	r3, #0
   2d296:	d006      	beq.n	2d2a6 <chk_mounted+0x12e>
   2d298:	2346      	movs	r3, #70	; 0x46
   2d29a:	18fb      	adds	r3, r7, r3
   2d29c:	781a      	ldrb	r2, [r3, #0]
   2d29e:	2346      	movs	r3, #70	; 0x46
   2d2a0:	18fb      	adds	r3, r7, r3
   2d2a2:	3a01      	subs	r2, #1
   2d2a4:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2d2a6:	2346      	movs	r3, #70	; 0x46
   2d2a8:	18fb      	adds	r3, r7, r3
   2d2aa:	781b      	ldrb	r3, [r3, #0]
   2d2ac:	011b      	lsls	r3, r3, #4
   2d2ae:	33bf      	adds	r3, #191	; 0xbf
   2d2b0:	33ff      	adds	r3, #255	; 0xff
   2d2b2:	3330      	adds	r3, #48	; 0x30
   2d2b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d2b6:	18d3      	adds	r3, r2, r3
   2d2b8:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2d2ba:	6a3b      	ldr	r3, [r7, #32]
   2d2bc:	3304      	adds	r3, #4
   2d2be:	781b      	ldrb	r3, [r3, #0]
   2d2c0:	2b00      	cmp	r3, #0
   2d2c2:	d01c      	beq.n	2d2fe <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2d2c4:	6a3b      	ldr	r3, [r7, #32]
   2d2c6:	330b      	adds	r3, #11
   2d2c8:	781b      	ldrb	r3, [r3, #0]
   2d2ca:	061a      	lsls	r2, r3, #24
   2d2cc:	6a3b      	ldr	r3, [r7, #32]
   2d2ce:	330a      	adds	r3, #10
   2d2d0:	781b      	ldrb	r3, [r3, #0]
   2d2d2:	041b      	lsls	r3, r3, #16
   2d2d4:	4313      	orrs	r3, r2
   2d2d6:	6a3a      	ldr	r2, [r7, #32]
   2d2d8:	3209      	adds	r2, #9
   2d2da:	7812      	ldrb	r2, [r2, #0]
   2d2dc:	0212      	lsls	r2, r2, #8
   2d2de:	4313      	orrs	r3, r2
   2d2e0:	6a3a      	ldr	r2, [r7, #32]
   2d2e2:	3208      	adds	r2, #8
   2d2e4:	7812      	ldrb	r2, [r2, #0]
   2d2e6:	4313      	orrs	r3, r2
   2d2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2d2ea:	2347      	movs	r3, #71	; 0x47
   2d2ec:	18fc      	adds	r4, r7, r3
   2d2ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2f2:	0011      	movs	r1, r2
   2d2f4:	0018      	movs	r0, r3
   2d2f6:	4b7b      	ldr	r3, [pc, #492]	; (2d4e4 <chk_mounted+0x36c>)
   2d2f8:	4798      	blx	r3
   2d2fa:	0003      	movs	r3, r0
   2d2fc:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2d2fe:	2347      	movs	r3, #71	; 0x47
   2d300:	18fb      	adds	r3, r7, r3
   2d302:	781b      	ldrb	r3, [r3, #0]
   2d304:	2b03      	cmp	r3, #3
   2d306:	d101      	bne.n	2d30c <chk_mounted+0x194>
   2d308:	2301      	movs	r3, #1
   2d30a:	e209      	b.n	2d720 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2d30c:	2347      	movs	r3, #71	; 0x47
   2d30e:	18fb      	adds	r3, r7, r3
   2d310:	781b      	ldrb	r3, [r3, #0]
   2d312:	2b00      	cmp	r3, #0
   2d314:	d001      	beq.n	2d31a <chk_mounted+0x1a2>
   2d316:	230d      	movs	r3, #13
   2d318:	e202      	b.n	2d720 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2d31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d31c:	223c      	movs	r2, #60	; 0x3c
   2d31e:	5c9b      	ldrb	r3, [r3, r2]
   2d320:	021b      	lsls	r3, r3, #8
   2d322:	b21a      	sxth	r2, r3
   2d324:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d326:	213b      	movs	r1, #59	; 0x3b
   2d328:	5c5b      	ldrb	r3, [r3, r1]
   2d32a:	b21b      	sxth	r3, r3
   2d32c:	4313      	orrs	r3, r2
   2d32e:	b21a      	sxth	r2, r3
   2d330:	2380      	movs	r3, #128	; 0x80
   2d332:	009b      	lsls	r3, r3, #2
   2d334:	429a      	cmp	r2, r3
   2d336:	d001      	beq.n	2d33c <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2d338:	230d      	movs	r3, #13
   2d33a:	e1f1      	b.n	2d720 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d33e:	2247      	movs	r2, #71	; 0x47
   2d340:	5c9b      	ldrb	r3, [r3, r2]
   2d342:	021b      	lsls	r3, r3, #8
   2d344:	b21a      	sxth	r2, r3
   2d346:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d348:	2146      	movs	r1, #70	; 0x46
   2d34a:	5c5b      	ldrb	r3, [r3, r1]
   2d34c:	b21b      	sxth	r3, r3
   2d34e:	4313      	orrs	r3, r2
   2d350:	b21b      	sxth	r3, r3
   2d352:	b29b      	uxth	r3, r3
   2d354:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2d356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d358:	2b00      	cmp	r3, #0
   2d35a:	d112      	bne.n	2d382 <chk_mounted+0x20a>
   2d35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d35e:	2257      	movs	r2, #87	; 0x57
   2d360:	5c9b      	ldrb	r3, [r3, r2]
   2d362:	061a      	lsls	r2, r3, #24
   2d364:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d366:	2156      	movs	r1, #86	; 0x56
   2d368:	5c5b      	ldrb	r3, [r3, r1]
   2d36a:	041b      	lsls	r3, r3, #16
   2d36c:	4313      	orrs	r3, r2
   2d36e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d370:	2155      	movs	r1, #85	; 0x55
   2d372:	5c52      	ldrb	r2, [r2, r1]
   2d374:	0212      	lsls	r2, r2, #8
   2d376:	4313      	orrs	r3, r2
   2d378:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d37a:	2154      	movs	r1, #84	; 0x54
   2d37c:	5c52      	ldrb	r2, [r2, r1]
   2d37e:	4313      	orrs	r3, r2
   2d380:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2d382:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d384:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2d386:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2d388:	231f      	movs	r3, #31
   2d38a:	18fb      	adds	r3, r7, r3
   2d38c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d38e:	2140      	movs	r1, #64	; 0x40
   2d390:	5c52      	ldrb	r2, [r2, r1]
   2d392:	701a      	strb	r2, [r3, #0]
   2d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d396:	221f      	movs	r2, #31
   2d398:	18ba      	adds	r2, r7, r2
   2d39a:	7812      	ldrb	r2, [r2, #0]
   2d39c:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2d39e:	231f      	movs	r3, #31
   2d3a0:	18fb      	adds	r3, r7, r3
   2d3a2:	781b      	ldrb	r3, [r3, #0]
   2d3a4:	2b01      	cmp	r3, #1
   2d3a6:	d006      	beq.n	2d3b6 <chk_mounted+0x23e>
   2d3a8:	231f      	movs	r3, #31
   2d3aa:	18fb      	adds	r3, r7, r3
   2d3ac:	781b      	ldrb	r3, [r3, #0]
   2d3ae:	2b02      	cmp	r3, #2
   2d3b0:	d001      	beq.n	2d3b6 <chk_mounted+0x23e>
   2d3b2:	230d      	movs	r3, #13
   2d3b4:	e1b4      	b.n	2d720 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2d3b6:	231f      	movs	r3, #31
   2d3b8:	18fb      	adds	r3, r7, r3
   2d3ba:	781a      	ldrb	r2, [r3, #0]
   2d3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d3be:	4353      	muls	r3, r2
   2d3c0:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2d3c2:	231f      	movs	r3, #31
   2d3c4:	18fb      	adds	r3, r7, r3
   2d3c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d3c8:	213d      	movs	r1, #61	; 0x3d
   2d3ca:	5c52      	ldrb	r2, [r2, r1]
   2d3cc:	701a      	strb	r2, [r3, #0]
   2d3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3d0:	221f      	movs	r2, #31
   2d3d2:	18ba      	adds	r2, r7, r2
   2d3d4:	7812      	ldrb	r2, [r2, #0]
   2d3d6:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2d3d8:	231f      	movs	r3, #31
   2d3da:	18fb      	adds	r3, r7, r3
   2d3dc:	781b      	ldrb	r3, [r3, #0]
   2d3de:	2b00      	cmp	r3, #0
   2d3e0:	d008      	beq.n	2d3f4 <chk_mounted+0x27c>
   2d3e2:	231f      	movs	r3, #31
   2d3e4:	18fb      	adds	r3, r7, r3
   2d3e6:	781b      	ldrb	r3, [r3, #0]
   2d3e8:	221f      	movs	r2, #31
   2d3ea:	18ba      	adds	r2, r7, r2
   2d3ec:	7812      	ldrb	r2, [r2, #0]
   2d3ee:	3a01      	subs	r2, #1
   2d3f0:	4013      	ands	r3, r2
   2d3f2:	d001      	beq.n	2d3f8 <chk_mounted+0x280>
   2d3f4:	230d      	movs	r3, #13
   2d3f6:	e193      	b.n	2d720 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2d3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3fa:	2242      	movs	r2, #66	; 0x42
   2d3fc:	5c9b      	ldrb	r3, [r3, r2]
   2d3fe:	021b      	lsls	r3, r3, #8
   2d400:	b21a      	sxth	r2, r3
   2d402:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d404:	2141      	movs	r1, #65	; 0x41
   2d406:	5c5b      	ldrb	r3, [r3, r1]
   2d408:	b21b      	sxth	r3, r3
   2d40a:	4313      	orrs	r3, r2
   2d40c:	b21b      	sxth	r3, r3
   2d40e:	b29a      	uxth	r2, r3
   2d410:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d412:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d416:	891b      	ldrh	r3, [r3, #8]
   2d418:	220f      	movs	r2, #15
   2d41a:	4013      	ands	r3, r2
   2d41c:	b29b      	uxth	r3, r3
   2d41e:	2b00      	cmp	r3, #0
   2d420:	d001      	beq.n	2d426 <chk_mounted+0x2ae>
   2d422:	230d      	movs	r3, #13
   2d424:	e17c      	b.n	2d720 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2d426:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d428:	2244      	movs	r2, #68	; 0x44
   2d42a:	5c9b      	ldrb	r3, [r3, r2]
   2d42c:	021b      	lsls	r3, r3, #8
   2d42e:	b21a      	sxth	r2, r3
   2d430:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d432:	2143      	movs	r1, #67	; 0x43
   2d434:	5c5b      	ldrb	r3, [r3, r1]
   2d436:	b21b      	sxth	r3, r3
   2d438:	4313      	orrs	r3, r2
   2d43a:	b21b      	sxth	r3, r3
   2d43c:	b29b      	uxth	r3, r3
   2d43e:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2d440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d442:	2b00      	cmp	r3, #0
   2d444:	d112      	bne.n	2d46c <chk_mounted+0x2f4>
   2d446:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d448:	2253      	movs	r2, #83	; 0x53
   2d44a:	5c9b      	ldrb	r3, [r3, r2]
   2d44c:	061a      	lsls	r2, r3, #24
   2d44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d450:	2152      	movs	r1, #82	; 0x52
   2d452:	5c5b      	ldrb	r3, [r3, r1]
   2d454:	041b      	lsls	r3, r3, #16
   2d456:	4313      	orrs	r3, r2
   2d458:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d45a:	2151      	movs	r1, #81	; 0x51
   2d45c:	5c52      	ldrb	r2, [r2, r1]
   2d45e:	0212      	lsls	r2, r2, #8
   2d460:	4313      	orrs	r3, r2
   2d462:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d464:	2150      	movs	r1, #80	; 0x50
   2d466:	5c52      	ldrb	r2, [r2, r1]
   2d468:	4313      	orrs	r3, r2
   2d46a:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2d46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d46e:	223f      	movs	r2, #63	; 0x3f
   2d470:	5c9b      	ldrb	r3, [r3, r2]
   2d472:	021b      	lsls	r3, r3, #8
   2d474:	b21a      	sxth	r2, r3
   2d476:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d478:	213e      	movs	r1, #62	; 0x3e
   2d47a:	5c5b      	ldrb	r3, [r3, r1]
   2d47c:	b21b      	sxth	r3, r3
   2d47e:	4313      	orrs	r3, r2
   2d480:	b21a      	sxth	r2, r3
   2d482:	231c      	movs	r3, #28
   2d484:	18fb      	adds	r3, r7, r3
   2d486:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2d488:	231c      	movs	r3, #28
   2d48a:	18fb      	adds	r3, r7, r3
   2d48c:	881b      	ldrh	r3, [r3, #0]
   2d48e:	2b00      	cmp	r3, #0
   2d490:	d101      	bne.n	2d496 <chk_mounted+0x31e>
   2d492:	230d      	movs	r3, #13
   2d494:	e144      	b.n	2d720 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2d496:	231c      	movs	r3, #28
   2d498:	18fb      	adds	r3, r7, r3
   2d49a:	881a      	ldrh	r2, [r3, #0]
   2d49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d49e:	18d3      	adds	r3, r2, r3
   2d4a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d4a2:	8912      	ldrh	r2, [r2, #8]
   2d4a4:	0912      	lsrs	r2, r2, #4
   2d4a6:	b292      	uxth	r2, r2
   2d4a8:	189b      	adds	r3, r3, r2
   2d4aa:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2d4ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2d4ae:	69bb      	ldr	r3, [r7, #24]
   2d4b0:	429a      	cmp	r2, r3
   2d4b2:	d201      	bcs.n	2d4b8 <chk_mounted+0x340>
   2d4b4:	230d      	movs	r3, #13
   2d4b6:	e133      	b.n	2d720 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2d4b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2d4ba:	69bb      	ldr	r3, [r7, #24]
   2d4bc:	1ad2      	subs	r2, r2, r3
   2d4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4c0:	789b      	ldrb	r3, [r3, #2]
   2d4c2:	0019      	movs	r1, r3
   2d4c4:	4b08      	ldr	r3, [pc, #32]	; (2d4e8 <chk_mounted+0x370>)
   2d4c6:	0010      	movs	r0, r2
   2d4c8:	4798      	blx	r3
   2d4ca:	0003      	movs	r3, r0
   2d4cc:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2d4ce:	697b      	ldr	r3, [r7, #20]
   2d4d0:	2b00      	cmp	r3, #0
   2d4d2:	d10b      	bne.n	2d4ec <chk_mounted+0x374>
   2d4d4:	230d      	movs	r3, #13
   2d4d6:	e123      	b.n	2d720 <chk_mounted+0x5a8>
   2d4d8:	20003ee4 	.word	0x20003ee4
   2d4dc:	0002b2d5 	.word	0x0002b2d5
   2d4e0:	0002b251 	.word	0x0002b251
   2d4e4:	0002d0a5 	.word	0x0002d0a5
   2d4e8:	000328c5 	.word	0x000328c5
	fmt = FS_FAT12;
   2d4ec:	2347      	movs	r3, #71	; 0x47
   2d4ee:	18fb      	adds	r3, r7, r3
   2d4f0:	2201      	movs	r2, #1
   2d4f2:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2d4f4:	697b      	ldr	r3, [r7, #20]
   2d4f6:	4a8c      	ldr	r2, [pc, #560]	; (2d728 <chk_mounted+0x5b0>)
   2d4f8:	4293      	cmp	r3, r2
   2d4fa:	d903      	bls.n	2d504 <chk_mounted+0x38c>
   2d4fc:	2347      	movs	r3, #71	; 0x47
   2d4fe:	18fb      	adds	r3, r7, r3
   2d500:	2202      	movs	r2, #2
   2d502:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2d504:	697b      	ldr	r3, [r7, #20]
   2d506:	4a89      	ldr	r2, [pc, #548]	; (2d72c <chk_mounted+0x5b4>)
   2d508:	4293      	cmp	r3, r2
   2d50a:	d903      	bls.n	2d514 <chk_mounted+0x39c>
   2d50c:	2347      	movs	r3, #71	; 0x47
   2d50e:	18fb      	adds	r3, r7, r3
   2d510:	2203      	movs	r2, #3
   2d512:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2d514:	697b      	ldr	r3, [r7, #20]
   2d516:	1c9a      	adds	r2, r3, #2
   2d518:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d51a:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2d51c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d51e:	69bb      	ldr	r3, [r7, #24]
   2d520:	18d2      	adds	r2, r2, r3
   2d522:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d524:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2d526:	231c      	movs	r3, #28
   2d528:	18fb      	adds	r3, r7, r3
   2d52a:	881a      	ldrh	r2, [r3, #0]
   2d52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d52e:	18d2      	adds	r2, r2, r3
   2d530:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d532:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2d534:	2347      	movs	r3, #71	; 0x47
   2d536:	18fb      	adds	r3, r7, r3
   2d538:	781b      	ldrb	r3, [r3, #0]
   2d53a:	2b03      	cmp	r3, #3
   2d53c:	d11e      	bne.n	2d57c <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2d53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d540:	891b      	ldrh	r3, [r3, #8]
   2d542:	2b00      	cmp	r3, #0
   2d544:	d001      	beq.n	2d54a <chk_mounted+0x3d2>
   2d546:	230d      	movs	r3, #13
   2d548:	e0ea      	b.n	2d720 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2d54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d54c:	225f      	movs	r2, #95	; 0x5f
   2d54e:	5c9b      	ldrb	r3, [r3, r2]
   2d550:	061a      	lsls	r2, r3, #24
   2d552:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d554:	215e      	movs	r1, #94	; 0x5e
   2d556:	5c5b      	ldrb	r3, [r3, r1]
   2d558:	041b      	lsls	r3, r3, #16
   2d55a:	4313      	orrs	r3, r2
   2d55c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d55e:	215d      	movs	r1, #93	; 0x5d
   2d560:	5c52      	ldrb	r2, [r2, r1]
   2d562:	0212      	lsls	r2, r2, #8
   2d564:	4313      	orrs	r3, r2
   2d566:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d568:	215c      	movs	r1, #92	; 0x5c
   2d56a:	5c52      	ldrb	r2, [r2, r1]
   2d56c:	431a      	orrs	r2, r3
   2d56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d570:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2d572:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d574:	699b      	ldr	r3, [r3, #24]
   2d576:	009b      	lsls	r3, r3, #2
   2d578:	633b      	str	r3, [r7, #48]	; 0x30
   2d57a:	e020      	b.n	2d5be <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2d57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d57e:	891b      	ldrh	r3, [r3, #8]
   2d580:	2b00      	cmp	r3, #0
   2d582:	d101      	bne.n	2d588 <chk_mounted+0x410>
   2d584:	230d      	movs	r3, #13
   2d586:	e0cb      	b.n	2d720 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2d588:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d58a:	6a1a      	ldr	r2, [r3, #32]
   2d58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d58e:	18d2      	adds	r2, r2, r3
   2d590:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d592:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2d594:	2347      	movs	r3, #71	; 0x47
   2d596:	18fb      	adds	r3, r7, r3
   2d598:	781b      	ldrb	r3, [r3, #0]
   2d59a:	2b02      	cmp	r3, #2
   2d59c:	d103      	bne.n	2d5a6 <chk_mounted+0x42e>
   2d59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5a0:	699b      	ldr	r3, [r3, #24]
   2d5a2:	005b      	lsls	r3, r3, #1
   2d5a4:	e00a      	b.n	2d5bc <chk_mounted+0x444>
   2d5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5a8:	699a      	ldr	r2, [r3, #24]
   2d5aa:	0013      	movs	r3, r2
   2d5ac:	005b      	lsls	r3, r3, #1
   2d5ae:	189b      	adds	r3, r3, r2
   2d5b0:	085a      	lsrs	r2, r3, #1
   2d5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5b4:	699b      	ldr	r3, [r3, #24]
   2d5b6:	2101      	movs	r1, #1
   2d5b8:	400b      	ands	r3, r1
   2d5ba:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2d5bc:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2d5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5c0:	69da      	ldr	r2, [r3, #28]
   2d5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d5c4:	495a      	ldr	r1, [pc, #360]	; (2d730 <chk_mounted+0x5b8>)
   2d5c6:	468c      	mov	ip, r1
   2d5c8:	4463      	add	r3, ip
   2d5ca:	0a5b      	lsrs	r3, r3, #9
   2d5cc:	429a      	cmp	r2, r3
   2d5ce:	d201      	bcs.n	2d5d4 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2d5d0:	230d      	movs	r3, #13
   2d5d2:	e0a5      	b.n	2d720 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2d5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5d6:	2201      	movs	r2, #1
   2d5d8:	4252      	negs	r2, r2
   2d5da:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2d5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5de:	2200      	movs	r2, #0
   2d5e0:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2d5e2:	2347      	movs	r3, #71	; 0x47
   2d5e4:	18fb      	adds	r3, r7, r3
   2d5e6:	781b      	ldrb	r3, [r3, #0]
   2d5e8:	2b03      	cmp	r3, #3
   2d5ea:	d000      	beq.n	2d5ee <chk_mounted+0x476>
   2d5ec:	e082      	b.n	2d6f4 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2d5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5f0:	2200      	movs	r2, #0
   2d5f2:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2d5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5f6:	2261      	movs	r2, #97	; 0x61
   2d5f8:	5c9b      	ldrb	r3, [r3, r2]
   2d5fa:	021b      	lsls	r3, r3, #8
   2d5fc:	b21a      	sxth	r2, r3
   2d5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d600:	2160      	movs	r1, #96	; 0x60
   2d602:	5c5b      	ldrb	r3, [r3, r1]
   2d604:	b21b      	sxth	r3, r3
   2d606:	4313      	orrs	r3, r2
   2d608:	b21b      	sxth	r3, r3
   2d60a:	b29b      	uxth	r3, r3
   2d60c:	001a      	movs	r2, r3
   2d60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d610:	18d2      	adds	r2, r2, r3
   2d612:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d614:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d616:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d618:	7858      	ldrb	r0, [r3, #1]
   2d61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d61c:	3330      	adds	r3, #48	; 0x30
   2d61e:	0019      	movs	r1, r3
   2d620:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d622:	695a      	ldr	r2, [r3, #20]
   2d624:	2301      	movs	r3, #1
   2d626:	4c43      	ldr	r4, [pc, #268]	; (2d734 <chk_mounted+0x5bc>)
   2d628:	47a0      	blx	r4
   2d62a:	1e03      	subs	r3, r0, #0
   2d62c:	d162      	bne.n	2d6f4 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d630:	4a41      	ldr	r2, [pc, #260]	; (2d738 <chk_mounted+0x5c0>)
   2d632:	5c9b      	ldrb	r3, [r3, r2]
   2d634:	021b      	lsls	r3, r3, #8
   2d636:	b21a      	sxth	r2, r3
   2d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d63a:	4940      	ldr	r1, [pc, #256]	; (2d73c <chk_mounted+0x5c4>)
   2d63c:	5c5b      	ldrb	r3, [r3, r1]
   2d63e:	b21b      	sxth	r3, r3
   2d640:	4313      	orrs	r3, r2
   2d642:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d644:	4a3e      	ldr	r2, [pc, #248]	; (2d740 <chk_mounted+0x5c8>)
   2d646:	4293      	cmp	r3, r2
   2d648:	d154      	bne.n	2d6f4 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d64c:	2233      	movs	r2, #51	; 0x33
   2d64e:	5c9b      	ldrb	r3, [r3, r2]
   2d650:	061a      	lsls	r2, r3, #24
   2d652:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d654:	2132      	movs	r1, #50	; 0x32
   2d656:	5c5b      	ldrb	r3, [r3, r1]
   2d658:	041b      	lsls	r3, r3, #16
   2d65a:	4313      	orrs	r3, r2
   2d65c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d65e:	2131      	movs	r1, #49	; 0x31
   2d660:	5c52      	ldrb	r2, [r2, r1]
   2d662:	0212      	lsls	r2, r2, #8
   2d664:	4313      	orrs	r3, r2
   2d666:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d668:	2130      	movs	r1, #48	; 0x30
   2d66a:	5c52      	ldrb	r2, [r2, r1]
   2d66c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d66e:	4a35      	ldr	r2, [pc, #212]	; (2d744 <chk_mounted+0x5cc>)
   2d670:	4293      	cmp	r3, r2
   2d672:	d13f      	bne.n	2d6f4 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d676:	4a34      	ldr	r2, [pc, #208]	; (2d748 <chk_mounted+0x5d0>)
   2d678:	5c9b      	ldrb	r3, [r3, r2]
   2d67a:	061a      	lsls	r2, r3, #24
   2d67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d67e:	4933      	ldr	r1, [pc, #204]	; (2d74c <chk_mounted+0x5d4>)
   2d680:	5c5b      	ldrb	r3, [r3, r1]
   2d682:	041b      	lsls	r3, r3, #16
   2d684:	4313      	orrs	r3, r2
   2d686:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d688:	4931      	ldr	r1, [pc, #196]	; (2d750 <chk_mounted+0x5d8>)
   2d68a:	5c52      	ldrb	r2, [r2, r1]
   2d68c:	0212      	lsls	r2, r2, #8
   2d68e:	4313      	orrs	r3, r2
   2d690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d692:	2285      	movs	r2, #133	; 0x85
   2d694:	0092      	lsls	r2, r2, #2
   2d696:	5c8a      	ldrb	r2, [r1, r2]
   2d698:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d69a:	4a2e      	ldr	r2, [pc, #184]	; (2d754 <chk_mounted+0x5dc>)
   2d69c:	4293      	cmp	r3, r2
   2d69e:	d129      	bne.n	2d6f4 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2d6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6a2:	4a2d      	ldr	r2, [pc, #180]	; (2d758 <chk_mounted+0x5e0>)
   2d6a4:	5c9b      	ldrb	r3, [r3, r2]
   2d6a6:	061a      	lsls	r2, r3, #24
   2d6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6aa:	492c      	ldr	r1, [pc, #176]	; (2d75c <chk_mounted+0x5e4>)
   2d6ac:	5c5b      	ldrb	r3, [r3, r1]
   2d6ae:	041b      	lsls	r3, r3, #16
   2d6b0:	4313      	orrs	r3, r2
   2d6b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d6b4:	492a      	ldr	r1, [pc, #168]	; (2d760 <chk_mounted+0x5e8>)
   2d6b6:	5c52      	ldrb	r2, [r2, r1]
   2d6b8:	0212      	lsls	r2, r2, #8
   2d6ba:	4313      	orrs	r3, r2
   2d6bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d6be:	2287      	movs	r2, #135	; 0x87
   2d6c0:	0092      	lsls	r2, r2, #2
   2d6c2:	5c8a      	ldrb	r2, [r1, r2]
   2d6c4:	431a      	orrs	r2, r3
   2d6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6c8:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2d6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6cc:	4a25      	ldr	r2, [pc, #148]	; (2d764 <chk_mounted+0x5ec>)
   2d6ce:	5c9b      	ldrb	r3, [r3, r2]
   2d6d0:	061a      	lsls	r2, r3, #24
   2d6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6d4:	4924      	ldr	r1, [pc, #144]	; (2d768 <chk_mounted+0x5f0>)
   2d6d6:	5c5b      	ldrb	r3, [r3, r1]
   2d6d8:	041b      	lsls	r3, r3, #16
   2d6da:	4313      	orrs	r3, r2
   2d6dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d6de:	4923      	ldr	r1, [pc, #140]	; (2d76c <chk_mounted+0x5f4>)
   2d6e0:	5c52      	ldrb	r2, [r2, r1]
   2d6e2:	0212      	lsls	r2, r2, #8
   2d6e4:	4313      	orrs	r3, r2
   2d6e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d6e8:	2286      	movs	r2, #134	; 0x86
   2d6ea:	0092      	lsls	r2, r2, #2
   2d6ec:	5c8a      	ldrb	r2, [r1, r2]
   2d6ee:	431a      	orrs	r2, r3
   2d6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6f2:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2d6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6f6:	2247      	movs	r2, #71	; 0x47
   2d6f8:	18ba      	adds	r2, r7, r2
   2d6fa:	7812      	ldrb	r2, [r2, #0]
   2d6fc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2d6fe:	4b1c      	ldr	r3, [pc, #112]	; (2d770 <chk_mounted+0x5f8>)
   2d700:	881b      	ldrh	r3, [r3, #0]
   2d702:	3301      	adds	r3, #1
   2d704:	b29a      	uxth	r2, r3
   2d706:	4b1a      	ldr	r3, [pc, #104]	; (2d770 <chk_mounted+0x5f8>)
   2d708:	801a      	strh	r2, [r3, #0]
   2d70a:	4b19      	ldr	r3, [pc, #100]	; (2d770 <chk_mounted+0x5f8>)
   2d70c:	881a      	ldrh	r2, [r3, #0]
   2d70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d710:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2d712:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d714:	2200      	movs	r2, #0
   2d716:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2d718:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d71a:	2200      	movs	r2, #0
   2d71c:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2d71e:	2300      	movs	r3, #0
}
   2d720:	0018      	movs	r0, r3
   2d722:	46bd      	mov	sp, r7
   2d724:	b013      	add	sp, #76	; 0x4c
   2d726:	bd90      	pop	{r4, r7, pc}
   2d728:	00000ff5 	.word	0x00000ff5
   2d72c:	0000fff5 	.word	0x0000fff5
   2d730:	000001ff 	.word	0x000001ff
   2d734:	0002b30d 	.word	0x0002b30d
   2d738:	0000022f 	.word	0x0000022f
   2d73c:	0000022e 	.word	0x0000022e
   2d740:	ffffaa55 	.word	0xffffaa55
   2d744:	41615252 	.word	0x41615252
   2d748:	00000217 	.word	0x00000217
   2d74c:	00000216 	.word	0x00000216
   2d750:	00000215 	.word	0x00000215
   2d754:	61417272 	.word	0x61417272
   2d758:	0000021f 	.word	0x0000021f
   2d75c:	0000021e 	.word	0x0000021e
   2d760:	0000021d 	.word	0x0000021d
   2d764:	0000021b 	.word	0x0000021b
   2d768:	0000021a 	.word	0x0000021a
   2d76c:	00000219 	.word	0x00000219
   2d770:	20003f04 	.word	0x20003f04

0002d774 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2d774:	b580      	push	{r7, lr}
   2d776:	b082      	sub	sp, #8
   2d778:	af00      	add	r7, sp, #0
   2d77a:	6078      	str	r0, [r7, #4]
   2d77c:	000a      	movs	r2, r1
   2d77e:	1cbb      	adds	r3, r7, #2
   2d780:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2d782:	687b      	ldr	r3, [r7, #4]
   2d784:	2b00      	cmp	r3, #0
   2d786:	d009      	beq.n	2d79c <validate+0x28>
   2d788:	687b      	ldr	r3, [r7, #4]
   2d78a:	781b      	ldrb	r3, [r3, #0]
   2d78c:	2b00      	cmp	r3, #0
   2d78e:	d005      	beq.n	2d79c <validate+0x28>
   2d790:	687b      	ldr	r3, [r7, #4]
   2d792:	88db      	ldrh	r3, [r3, #6]
   2d794:	1cba      	adds	r2, r7, #2
   2d796:	8812      	ldrh	r2, [r2, #0]
   2d798:	429a      	cmp	r2, r3
   2d79a:	d001      	beq.n	2d7a0 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2d79c:	2309      	movs	r3, #9
   2d79e:	e00c      	b.n	2d7ba <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2d7a0:	687b      	ldr	r3, [r7, #4]
   2d7a2:	785b      	ldrb	r3, [r3, #1]
   2d7a4:	0018      	movs	r0, r3
   2d7a6:	4b07      	ldr	r3, [pc, #28]	; (2d7c4 <validate+0x50>)
   2d7a8:	4798      	blx	r3
   2d7aa:	0003      	movs	r3, r0
   2d7ac:	001a      	movs	r2, r3
   2d7ae:	2301      	movs	r3, #1
   2d7b0:	4013      	ands	r3, r2
   2d7b2:	d001      	beq.n	2d7b8 <validate+0x44>
		return FR_NOT_READY;
   2d7b4:	2303      	movs	r3, #3
   2d7b6:	e000      	b.n	2d7ba <validate+0x46>

	return FR_OK;
   2d7b8:	2300      	movs	r3, #0
}
   2d7ba:	0018      	movs	r0, r3
   2d7bc:	46bd      	mov	sp, r7
   2d7be:	b002      	add	sp, #8
   2d7c0:	bd80      	pop	{r7, pc}
   2d7c2:	46c0      	nop			; (mov r8, r8)
   2d7c4:	0002b2d5 	.word	0x0002b2d5

0002d7c8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2d7c8:	b590      	push	{r4, r7, lr}
   2d7ca:	4ce5      	ldr	r4, [pc, #916]	; (2db60 <f_open+0x398>)
   2d7cc:	44a5      	add	sp, r4
   2d7ce:	af00      	add	r7, sp, #0
   2d7d0:	60f8      	str	r0, [r7, #12]
   2d7d2:	60b9      	str	r1, [r7, #8]
   2d7d4:	4be3      	ldr	r3, [pc, #908]	; (2db64 <f_open+0x39c>)
   2d7d6:	2194      	movs	r1, #148	; 0x94
   2d7d8:	0089      	lsls	r1, r1, #2
   2d7da:	468c      	mov	ip, r1
   2d7dc:	44bc      	add	ip, r7
   2d7de:	4463      	add	r3, ip
   2d7e0:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2d7e2:	68fb      	ldr	r3, [r7, #12]
   2d7e4:	2200      	movs	r2, #0
   2d7e6:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2d7e8:	4bde      	ldr	r3, [pc, #888]	; (2db64 <f_open+0x39c>)
   2d7ea:	2294      	movs	r2, #148	; 0x94
   2d7ec:	0092      	lsls	r2, r2, #2
   2d7ee:	4694      	mov	ip, r2
   2d7f0:	44bc      	add	ip, r7
   2d7f2:	4463      	add	r3, ip
   2d7f4:	4adb      	ldr	r2, [pc, #876]	; (2db64 <f_open+0x39c>)
   2d7f6:	2194      	movs	r1, #148	; 0x94
   2d7f8:	0089      	lsls	r1, r1, #2
   2d7fa:	468c      	mov	ip, r1
   2d7fc:	44bc      	add	ip, r7
   2d7fe:	4462      	add	r2, ip
   2d800:	7812      	ldrb	r2, [r2, #0]
   2d802:	211f      	movs	r1, #31
   2d804:	400a      	ands	r2, r1
   2d806:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2d808:	4bd6      	ldr	r3, [pc, #856]	; (2db64 <f_open+0x39c>)
   2d80a:	2294      	movs	r2, #148	; 0x94
   2d80c:	0092      	lsls	r2, r2, #2
   2d80e:	4694      	mov	ip, r2
   2d810:	44bc      	add	ip, r7
   2d812:	4463      	add	r3, ip
   2d814:	781b      	ldrb	r3, [r3, #0]
   2d816:	2201      	movs	r2, #1
   2d818:	4393      	bics	r3, r2
   2d81a:	b2da      	uxtb	r2, r3
   2d81c:	4bd2      	ldr	r3, [pc, #840]	; (2db68 <f_open+0x3a0>)
   2d81e:	18fc      	adds	r4, r7, r3
   2d820:	2387      	movs	r3, #135	; 0x87
   2d822:	009b      	lsls	r3, r3, #2
   2d824:	18f9      	adds	r1, r7, r3
   2d826:	2308      	movs	r3, #8
   2d828:	18fb      	adds	r3, r7, r3
   2d82a:	0018      	movs	r0, r3
   2d82c:	4bcf      	ldr	r3, [pc, #828]	; (2db6c <f_open+0x3a4>)
   2d82e:	4798      	blx	r3
   2d830:	0003      	movs	r3, r0
   2d832:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2d834:	2387      	movs	r3, #135	; 0x87
   2d836:	009b      	lsls	r3, r3, #2
   2d838:	18fb      	adds	r3, r7, r3
   2d83a:	2284      	movs	r2, #132	; 0x84
   2d83c:	0092      	lsls	r2, r2, #2
   2d83e:	18ba      	adds	r2, r7, r2
   2d840:	619a      	str	r2, [r3, #24]
   2d842:	2387      	movs	r3, #135	; 0x87
   2d844:	009b      	lsls	r3, r3, #2
   2d846:	18fb      	adds	r3, r7, r3
   2d848:	2210      	movs	r2, #16
   2d84a:	18ba      	adds	r2, r7, r2
   2d84c:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2d84e:	4bc6      	ldr	r3, [pc, #792]	; (2db68 <f_open+0x3a0>)
   2d850:	18fb      	adds	r3, r7, r3
   2d852:	781b      	ldrb	r3, [r3, #0]
   2d854:	2b00      	cmp	r3, #0
   2d856:	d10b      	bne.n	2d870 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2d858:	68ba      	ldr	r2, [r7, #8]
   2d85a:	4bc3      	ldr	r3, [pc, #780]	; (2db68 <f_open+0x3a0>)
   2d85c:	18fc      	adds	r4, r7, r3
   2d85e:	2387      	movs	r3, #135	; 0x87
   2d860:	009b      	lsls	r3, r3, #2
   2d862:	18fb      	adds	r3, r7, r3
   2d864:	0011      	movs	r1, r2
   2d866:	0018      	movs	r0, r3
   2d868:	4bc1      	ldr	r3, [pc, #772]	; (2db70 <f_open+0x3a8>)
   2d86a:	4798      	blx	r3
   2d86c:	0003      	movs	r3, r0
   2d86e:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2d870:	2387      	movs	r3, #135	; 0x87
   2d872:	009b      	lsls	r3, r3, #2
   2d874:	18fb      	adds	r3, r7, r3
   2d876:	695b      	ldr	r3, [r3, #20]
   2d878:	2292      	movs	r2, #146	; 0x92
   2d87a:	0092      	lsls	r2, r2, #2
   2d87c:	18ba      	adds	r2, r7, r2
   2d87e:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2d880:	4bb9      	ldr	r3, [pc, #740]	; (2db68 <f_open+0x3a0>)
   2d882:	18fb      	adds	r3, r7, r3
   2d884:	781b      	ldrb	r3, [r3, #0]
   2d886:	2b00      	cmp	r3, #0
   2d888:	d109      	bne.n	2d89e <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2d88a:	2392      	movs	r3, #146	; 0x92
   2d88c:	009b      	lsls	r3, r3, #2
   2d88e:	18fb      	adds	r3, r7, r3
   2d890:	681b      	ldr	r3, [r3, #0]
   2d892:	2b00      	cmp	r3, #0
   2d894:	d103      	bne.n	2d89e <f_open+0xd6>
			res = FR_INVALID_NAME;
   2d896:	4bb4      	ldr	r3, [pc, #720]	; (2db68 <f_open+0x3a0>)
   2d898:	18fb      	adds	r3, r7, r3
   2d89a:	2206      	movs	r2, #6
   2d89c:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2d89e:	4bb1      	ldr	r3, [pc, #708]	; (2db64 <f_open+0x39c>)
   2d8a0:	2294      	movs	r2, #148	; 0x94
   2d8a2:	0092      	lsls	r2, r2, #2
   2d8a4:	4694      	mov	ip, r2
   2d8a6:	44bc      	add	ip, r7
   2d8a8:	4463      	add	r3, ip
   2d8aa:	781b      	ldrb	r3, [r3, #0]
   2d8ac:	221c      	movs	r2, #28
   2d8ae:	4013      	ands	r3, r2
   2d8b0:	d100      	bne.n	2d8b4 <f_open+0xec>
   2d8b2:	e141      	b.n	2db38 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2d8b4:	4bac      	ldr	r3, [pc, #688]	; (2db68 <f_open+0x3a0>)
   2d8b6:	18fb      	adds	r3, r7, r3
   2d8b8:	781b      	ldrb	r3, [r3, #0]
   2d8ba:	2b00      	cmp	r3, #0
   2d8bc:	d027      	beq.n	2d90e <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2d8be:	4baa      	ldr	r3, [pc, #680]	; (2db68 <f_open+0x3a0>)
   2d8c0:	18fb      	adds	r3, r7, r3
   2d8c2:	781b      	ldrb	r3, [r3, #0]
   2d8c4:	2b04      	cmp	r3, #4
   2d8c6:	d109      	bne.n	2d8dc <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2d8c8:	4ba7      	ldr	r3, [pc, #668]	; (2db68 <f_open+0x3a0>)
   2d8ca:	18fc      	adds	r4, r7, r3
   2d8cc:	2387      	movs	r3, #135	; 0x87
   2d8ce:	009b      	lsls	r3, r3, #2
   2d8d0:	18fb      	adds	r3, r7, r3
   2d8d2:	0018      	movs	r0, r3
   2d8d4:	4ba7      	ldr	r3, [pc, #668]	; (2db74 <f_open+0x3ac>)
   2d8d6:	4798      	blx	r3
   2d8d8:	0003      	movs	r3, r0
   2d8da:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2d8dc:	4ba1      	ldr	r3, [pc, #644]	; (2db64 <f_open+0x39c>)
   2d8de:	2294      	movs	r2, #148	; 0x94
   2d8e0:	0092      	lsls	r2, r2, #2
   2d8e2:	4694      	mov	ip, r2
   2d8e4:	44bc      	add	ip, r7
   2d8e6:	4463      	add	r3, ip
   2d8e8:	4a9e      	ldr	r2, [pc, #632]	; (2db64 <f_open+0x39c>)
   2d8ea:	2194      	movs	r1, #148	; 0x94
   2d8ec:	0089      	lsls	r1, r1, #2
   2d8ee:	468c      	mov	ip, r1
   2d8f0:	44bc      	add	ip, r7
   2d8f2:	4462      	add	r2, ip
   2d8f4:	7812      	ldrb	r2, [r2, #0]
   2d8f6:	2108      	movs	r1, #8
   2d8f8:	430a      	orrs	r2, r1
   2d8fa:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2d8fc:	2387      	movs	r3, #135	; 0x87
   2d8fe:	009b      	lsls	r3, r3, #2
   2d900:	18fb      	adds	r3, r7, r3
   2d902:	695b      	ldr	r3, [r3, #20]
   2d904:	2292      	movs	r2, #146	; 0x92
   2d906:	0092      	lsls	r2, r2, #2
   2d908:	18ba      	adds	r2, r7, r2
   2d90a:	6013      	str	r3, [r2, #0]
   2d90c:	e01c      	b.n	2d948 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2d90e:	2392      	movs	r3, #146	; 0x92
   2d910:	009b      	lsls	r3, r3, #2
   2d912:	18fb      	adds	r3, r7, r3
   2d914:	681b      	ldr	r3, [r3, #0]
   2d916:	330b      	adds	r3, #11
   2d918:	781b      	ldrb	r3, [r3, #0]
   2d91a:	001a      	movs	r2, r3
   2d91c:	2311      	movs	r3, #17
   2d91e:	4013      	ands	r3, r2
   2d920:	d004      	beq.n	2d92c <f_open+0x164>
				res = FR_DENIED;
   2d922:	4b91      	ldr	r3, [pc, #580]	; (2db68 <f_open+0x3a0>)
   2d924:	18fb      	adds	r3, r7, r3
   2d926:	2207      	movs	r2, #7
   2d928:	701a      	strb	r2, [r3, #0]
   2d92a:	e00d      	b.n	2d948 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2d92c:	4b8d      	ldr	r3, [pc, #564]	; (2db64 <f_open+0x39c>)
   2d92e:	2294      	movs	r2, #148	; 0x94
   2d930:	0092      	lsls	r2, r2, #2
   2d932:	4694      	mov	ip, r2
   2d934:	44bc      	add	ip, r7
   2d936:	4463      	add	r3, ip
   2d938:	781b      	ldrb	r3, [r3, #0]
   2d93a:	2204      	movs	r2, #4
   2d93c:	4013      	ands	r3, r2
   2d93e:	d003      	beq.n	2d948 <f_open+0x180>
					res = FR_EXIST;
   2d940:	4b89      	ldr	r3, [pc, #548]	; (2db68 <f_open+0x3a0>)
   2d942:	18fb      	adds	r3, r7, r3
   2d944:	2208      	movs	r2, #8
   2d946:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2d948:	4b87      	ldr	r3, [pc, #540]	; (2db68 <f_open+0x3a0>)
   2d94a:	18fb      	adds	r3, r7, r3
   2d94c:	781b      	ldrb	r3, [r3, #0]
   2d94e:	2b00      	cmp	r3, #0
   2d950:	d000      	beq.n	2d954 <f_open+0x18c>
   2d952:	e12f      	b.n	2dbb4 <f_open+0x3ec>
   2d954:	4b83      	ldr	r3, [pc, #524]	; (2db64 <f_open+0x39c>)
   2d956:	2294      	movs	r2, #148	; 0x94
   2d958:	0092      	lsls	r2, r2, #2
   2d95a:	4694      	mov	ip, r2
   2d95c:	44bc      	add	ip, r7
   2d95e:	4463      	add	r3, ip
   2d960:	781b      	ldrb	r3, [r3, #0]
   2d962:	2208      	movs	r2, #8
   2d964:	4013      	ands	r3, r2
   2d966:	d100      	bne.n	2d96a <f_open+0x1a2>
   2d968:	e124      	b.n	2dbb4 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2d96a:	4b83      	ldr	r3, [pc, #524]	; (2db78 <f_open+0x3b0>)
   2d96c:	4798      	blx	r3
   2d96e:	0003      	movs	r3, r0
   2d970:	2291      	movs	r2, #145	; 0x91
   2d972:	0092      	lsls	r2, r2, #2
   2d974:	18ba      	adds	r2, r7, r2
   2d976:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2d978:	2392      	movs	r3, #146	; 0x92
   2d97a:	009b      	lsls	r3, r3, #2
   2d97c:	18fb      	adds	r3, r7, r3
   2d97e:	681b      	ldr	r3, [r3, #0]
   2d980:	330e      	adds	r3, #14
   2d982:	2291      	movs	r2, #145	; 0x91
   2d984:	0092      	lsls	r2, r2, #2
   2d986:	18ba      	adds	r2, r7, r2
   2d988:	6812      	ldr	r2, [r2, #0]
   2d98a:	b2d2      	uxtb	r2, r2
   2d98c:	701a      	strb	r2, [r3, #0]
   2d98e:	2392      	movs	r3, #146	; 0x92
   2d990:	009b      	lsls	r3, r3, #2
   2d992:	18fb      	adds	r3, r7, r3
   2d994:	681b      	ldr	r3, [r3, #0]
   2d996:	330f      	adds	r3, #15
   2d998:	2291      	movs	r2, #145	; 0x91
   2d99a:	0092      	lsls	r2, r2, #2
   2d99c:	18ba      	adds	r2, r7, r2
   2d99e:	6812      	ldr	r2, [r2, #0]
   2d9a0:	b292      	uxth	r2, r2
   2d9a2:	0a12      	lsrs	r2, r2, #8
   2d9a4:	b292      	uxth	r2, r2
   2d9a6:	b2d2      	uxtb	r2, r2
   2d9a8:	701a      	strb	r2, [r3, #0]
   2d9aa:	2392      	movs	r3, #146	; 0x92
   2d9ac:	009b      	lsls	r3, r3, #2
   2d9ae:	18fb      	adds	r3, r7, r3
   2d9b0:	681b      	ldr	r3, [r3, #0]
   2d9b2:	3310      	adds	r3, #16
   2d9b4:	2291      	movs	r2, #145	; 0x91
   2d9b6:	0092      	lsls	r2, r2, #2
   2d9b8:	18ba      	adds	r2, r7, r2
   2d9ba:	6812      	ldr	r2, [r2, #0]
   2d9bc:	0c12      	lsrs	r2, r2, #16
   2d9be:	b2d2      	uxtb	r2, r2
   2d9c0:	701a      	strb	r2, [r3, #0]
   2d9c2:	2392      	movs	r3, #146	; 0x92
   2d9c4:	009b      	lsls	r3, r3, #2
   2d9c6:	18fb      	adds	r3, r7, r3
   2d9c8:	681b      	ldr	r3, [r3, #0]
   2d9ca:	3311      	adds	r3, #17
   2d9cc:	2291      	movs	r2, #145	; 0x91
   2d9ce:	0092      	lsls	r2, r2, #2
   2d9d0:	18ba      	adds	r2, r7, r2
   2d9d2:	6812      	ldr	r2, [r2, #0]
   2d9d4:	0e12      	lsrs	r2, r2, #24
   2d9d6:	b2d2      	uxtb	r2, r2
   2d9d8:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2d9da:	2392      	movs	r3, #146	; 0x92
   2d9dc:	009b      	lsls	r3, r3, #2
   2d9de:	18fb      	adds	r3, r7, r3
   2d9e0:	681b      	ldr	r3, [r3, #0]
   2d9e2:	330b      	adds	r3, #11
   2d9e4:	2200      	movs	r2, #0
   2d9e6:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2d9e8:	2392      	movs	r3, #146	; 0x92
   2d9ea:	009b      	lsls	r3, r3, #2
   2d9ec:	18fb      	adds	r3, r7, r3
   2d9ee:	681b      	ldr	r3, [r3, #0]
   2d9f0:	331c      	adds	r3, #28
   2d9f2:	2200      	movs	r2, #0
   2d9f4:	701a      	strb	r2, [r3, #0]
   2d9f6:	2392      	movs	r3, #146	; 0x92
   2d9f8:	009b      	lsls	r3, r3, #2
   2d9fa:	18fb      	adds	r3, r7, r3
   2d9fc:	681b      	ldr	r3, [r3, #0]
   2d9fe:	331d      	adds	r3, #29
   2da00:	2200      	movs	r2, #0
   2da02:	701a      	strb	r2, [r3, #0]
   2da04:	2392      	movs	r3, #146	; 0x92
   2da06:	009b      	lsls	r3, r3, #2
   2da08:	18fb      	adds	r3, r7, r3
   2da0a:	681b      	ldr	r3, [r3, #0]
   2da0c:	331e      	adds	r3, #30
   2da0e:	2200      	movs	r2, #0
   2da10:	701a      	strb	r2, [r3, #0]
   2da12:	2392      	movs	r3, #146	; 0x92
   2da14:	009b      	lsls	r3, r3, #2
   2da16:	18fb      	adds	r3, r7, r3
   2da18:	681b      	ldr	r3, [r3, #0]
   2da1a:	331f      	adds	r3, #31
   2da1c:	2200      	movs	r2, #0
   2da1e:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2da20:	2392      	movs	r3, #146	; 0x92
   2da22:	009b      	lsls	r3, r3, #2
   2da24:	18fb      	adds	r3, r7, r3
   2da26:	681b      	ldr	r3, [r3, #0]
   2da28:	3315      	adds	r3, #21
   2da2a:	781b      	ldrb	r3, [r3, #0]
   2da2c:	021b      	lsls	r3, r3, #8
   2da2e:	b21a      	sxth	r2, r3
   2da30:	2392      	movs	r3, #146	; 0x92
   2da32:	009b      	lsls	r3, r3, #2
   2da34:	18fb      	adds	r3, r7, r3
   2da36:	681b      	ldr	r3, [r3, #0]
   2da38:	3314      	adds	r3, #20
   2da3a:	781b      	ldrb	r3, [r3, #0]
   2da3c:	b21b      	sxth	r3, r3
   2da3e:	4313      	orrs	r3, r2
   2da40:	b21b      	sxth	r3, r3
   2da42:	b29b      	uxth	r3, r3
   2da44:	041b      	lsls	r3, r3, #16
   2da46:	2292      	movs	r2, #146	; 0x92
   2da48:	0092      	lsls	r2, r2, #2
   2da4a:	18ba      	adds	r2, r7, r2
   2da4c:	6812      	ldr	r2, [r2, #0]
   2da4e:	321b      	adds	r2, #27
   2da50:	7812      	ldrb	r2, [r2, #0]
   2da52:	0212      	lsls	r2, r2, #8
   2da54:	b211      	sxth	r1, r2
   2da56:	2292      	movs	r2, #146	; 0x92
   2da58:	0092      	lsls	r2, r2, #2
   2da5a:	18ba      	adds	r2, r7, r2
   2da5c:	6812      	ldr	r2, [r2, #0]
   2da5e:	321a      	adds	r2, #26
   2da60:	7812      	ldrb	r2, [r2, #0]
   2da62:	b212      	sxth	r2, r2
   2da64:	430a      	orrs	r2, r1
   2da66:	b212      	sxth	r2, r2
   2da68:	b292      	uxth	r2, r2
   2da6a:	4313      	orrs	r3, r2
   2da6c:	2290      	movs	r2, #144	; 0x90
   2da6e:	0092      	lsls	r2, r2, #2
   2da70:	18ba      	adds	r2, r7, r2
   2da72:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2da74:	2392      	movs	r3, #146	; 0x92
   2da76:	009b      	lsls	r3, r3, #2
   2da78:	18fb      	adds	r3, r7, r3
   2da7a:	681b      	ldr	r3, [r3, #0]
   2da7c:	331a      	adds	r3, #26
   2da7e:	2200      	movs	r2, #0
   2da80:	701a      	strb	r2, [r3, #0]
   2da82:	2392      	movs	r3, #146	; 0x92
   2da84:	009b      	lsls	r3, r3, #2
   2da86:	18fb      	adds	r3, r7, r3
   2da88:	681b      	ldr	r3, [r3, #0]
   2da8a:	331b      	adds	r3, #27
   2da8c:	2200      	movs	r2, #0
   2da8e:	701a      	strb	r2, [r3, #0]
   2da90:	2392      	movs	r3, #146	; 0x92
   2da92:	009b      	lsls	r3, r3, #2
   2da94:	18fb      	adds	r3, r7, r3
   2da96:	681b      	ldr	r3, [r3, #0]
   2da98:	3314      	adds	r3, #20
   2da9a:	2200      	movs	r2, #0
   2da9c:	701a      	strb	r2, [r3, #0]
   2da9e:	2392      	movs	r3, #146	; 0x92
   2daa0:	009b      	lsls	r3, r3, #2
   2daa2:	18fb      	adds	r3, r7, r3
   2daa4:	681b      	ldr	r3, [r3, #0]
   2daa6:	3315      	adds	r3, #21
   2daa8:	2200      	movs	r2, #0
   2daaa:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2daac:	2387      	movs	r3, #135	; 0x87
   2daae:	009b      	lsls	r3, r3, #2
   2dab0:	18fb      	adds	r3, r7, r3
   2dab2:	681b      	ldr	r3, [r3, #0]
   2dab4:	2201      	movs	r2, #1
   2dab6:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2dab8:	2390      	movs	r3, #144	; 0x90
   2daba:	009b      	lsls	r3, r3, #2
   2dabc:	18fb      	adds	r3, r7, r3
   2dabe:	681b      	ldr	r3, [r3, #0]
   2dac0:	2b00      	cmp	r3, #0
   2dac2:	d100      	bne.n	2dac6 <f_open+0x2fe>
   2dac4:	e076      	b.n	2dbb4 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2dac6:	2387      	movs	r3, #135	; 0x87
   2dac8:	009b      	lsls	r3, r3, #2
   2daca:	18fb      	adds	r3, r7, r3
   2dacc:	681b      	ldr	r3, [r3, #0]
   2dace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2dad0:	2291      	movs	r2, #145	; 0x91
   2dad2:	0092      	lsls	r2, r2, #2
   2dad4:	18ba      	adds	r2, r7, r2
   2dad6:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2dad8:	2387      	movs	r3, #135	; 0x87
   2dada:	009b      	lsls	r3, r3, #2
   2dadc:	18fb      	adds	r3, r7, r3
   2dade:	681b      	ldr	r3, [r3, #0]
   2dae0:	4a21      	ldr	r2, [pc, #132]	; (2db68 <f_open+0x3a0>)
   2dae2:	18bc      	adds	r4, r7, r2
   2dae4:	2290      	movs	r2, #144	; 0x90
   2dae6:	0092      	lsls	r2, r2, #2
   2dae8:	18ba      	adds	r2, r7, r2
   2daea:	6812      	ldr	r2, [r2, #0]
   2daec:	0011      	movs	r1, r2
   2daee:	0018      	movs	r0, r3
   2daf0:	4b22      	ldr	r3, [pc, #136]	; (2db7c <f_open+0x3b4>)
   2daf2:	4798      	blx	r3
   2daf4:	0003      	movs	r3, r0
   2daf6:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2daf8:	4b1b      	ldr	r3, [pc, #108]	; (2db68 <f_open+0x3a0>)
   2dafa:	18fb      	adds	r3, r7, r3
   2dafc:	781b      	ldrb	r3, [r3, #0]
   2dafe:	2b00      	cmp	r3, #0
   2db00:	d158      	bne.n	2dbb4 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2db02:	2387      	movs	r3, #135	; 0x87
   2db04:	009b      	lsls	r3, r3, #2
   2db06:	18fb      	adds	r3, r7, r3
   2db08:	681b      	ldr	r3, [r3, #0]
   2db0a:	2290      	movs	r2, #144	; 0x90
   2db0c:	0092      	lsls	r2, r2, #2
   2db0e:	18ba      	adds	r2, r7, r2
   2db10:	6812      	ldr	r2, [r2, #0]
   2db12:	3a01      	subs	r2, #1
   2db14:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2db16:	2387      	movs	r3, #135	; 0x87
   2db18:	009b      	lsls	r3, r3, #2
   2db1a:	18fb      	adds	r3, r7, r3
   2db1c:	681b      	ldr	r3, [r3, #0]
   2db1e:	4a12      	ldr	r2, [pc, #72]	; (2db68 <f_open+0x3a0>)
   2db20:	18bc      	adds	r4, r7, r2
   2db22:	2291      	movs	r2, #145	; 0x91
   2db24:	0092      	lsls	r2, r2, #2
   2db26:	18ba      	adds	r2, r7, r2
   2db28:	6812      	ldr	r2, [r2, #0]
   2db2a:	0011      	movs	r1, r2
   2db2c:	0018      	movs	r0, r3
   2db2e:	4b14      	ldr	r3, [pc, #80]	; (2db80 <f_open+0x3b8>)
   2db30:	4798      	blx	r3
   2db32:	0003      	movs	r3, r0
   2db34:	7023      	strb	r3, [r4, #0]
   2db36:	e03d      	b.n	2dbb4 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2db38:	4b0b      	ldr	r3, [pc, #44]	; (2db68 <f_open+0x3a0>)
   2db3a:	18fb      	adds	r3, r7, r3
   2db3c:	781b      	ldrb	r3, [r3, #0]
   2db3e:	2b00      	cmp	r3, #0
   2db40:	d138      	bne.n	2dbb4 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2db42:	2392      	movs	r3, #146	; 0x92
   2db44:	009b      	lsls	r3, r3, #2
   2db46:	18fb      	adds	r3, r7, r3
   2db48:	681b      	ldr	r3, [r3, #0]
   2db4a:	330b      	adds	r3, #11
   2db4c:	781b      	ldrb	r3, [r3, #0]
   2db4e:	001a      	movs	r2, r3
   2db50:	2310      	movs	r3, #16
   2db52:	4013      	ands	r3, r2
   2db54:	d016      	beq.n	2db84 <f_open+0x3bc>
				res = FR_NO_FILE;
   2db56:	4b04      	ldr	r3, [pc, #16]	; (2db68 <f_open+0x3a0>)
   2db58:	18fb      	adds	r3, r7, r3
   2db5a:	2204      	movs	r2, #4
   2db5c:	701a      	strb	r2, [r3, #0]
   2db5e:	e029      	b.n	2dbb4 <f_open+0x3ec>
   2db60:	fffffdac 	.word	0xfffffdac
   2db64:	fffffdb7 	.word	0xfffffdb7
   2db68:	0000024f 	.word	0x0000024f
   2db6c:	0002d179 	.word	0x0002d179
   2db70:	0002cf6d 	.word	0x0002cf6d
   2db74:	0002c7bd 	.word	0x0002c7bd
   2db78:	0002b5b5 	.word	0x0002b5b5
   2db7c:	0002bd39 	.word	0x0002bd39
   2db80:	0002b6f9 	.word	0x0002b6f9
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2db84:	4b5a      	ldr	r3, [pc, #360]	; (2dcf0 <f_open+0x528>)
   2db86:	2294      	movs	r2, #148	; 0x94
   2db88:	0092      	lsls	r2, r2, #2
   2db8a:	4694      	mov	ip, r2
   2db8c:	44bc      	add	ip, r7
   2db8e:	4463      	add	r3, ip
   2db90:	781b      	ldrb	r3, [r3, #0]
   2db92:	2202      	movs	r2, #2
   2db94:	4013      	ands	r3, r2
   2db96:	d00d      	beq.n	2dbb4 <f_open+0x3ec>
   2db98:	2392      	movs	r3, #146	; 0x92
   2db9a:	009b      	lsls	r3, r3, #2
   2db9c:	18fb      	adds	r3, r7, r3
   2db9e:	681b      	ldr	r3, [r3, #0]
   2dba0:	330b      	adds	r3, #11
   2dba2:	781b      	ldrb	r3, [r3, #0]
   2dba4:	001a      	movs	r2, r3
   2dba6:	2301      	movs	r3, #1
   2dba8:	4013      	ands	r3, r2
   2dbaa:	d003      	beq.n	2dbb4 <f_open+0x3ec>
					res = FR_DENIED;
   2dbac:	4b51      	ldr	r3, [pc, #324]	; (2dcf4 <f_open+0x52c>)
   2dbae:	18fb      	adds	r3, r7, r3
   2dbb0:	2207      	movs	r2, #7
   2dbb2:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2dbb4:	4b4f      	ldr	r3, [pc, #316]	; (2dcf4 <f_open+0x52c>)
   2dbb6:	18fb      	adds	r3, r7, r3
   2dbb8:	781b      	ldrb	r3, [r3, #0]
   2dbba:	2b00      	cmp	r3, #0
   2dbbc:	d126      	bne.n	2dc0c <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2dbbe:	4b4c      	ldr	r3, [pc, #304]	; (2dcf0 <f_open+0x528>)
   2dbc0:	2294      	movs	r2, #148	; 0x94
   2dbc2:	0092      	lsls	r2, r2, #2
   2dbc4:	4694      	mov	ip, r2
   2dbc6:	44bc      	add	ip, r7
   2dbc8:	4463      	add	r3, ip
   2dbca:	781b      	ldrb	r3, [r3, #0]
   2dbcc:	2208      	movs	r2, #8
   2dbce:	4013      	ands	r3, r2
   2dbd0:	d00f      	beq.n	2dbf2 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2dbd2:	4b47      	ldr	r3, [pc, #284]	; (2dcf0 <f_open+0x528>)
   2dbd4:	2294      	movs	r2, #148	; 0x94
   2dbd6:	0092      	lsls	r2, r2, #2
   2dbd8:	4694      	mov	ip, r2
   2dbda:	44bc      	add	ip, r7
   2dbdc:	4463      	add	r3, ip
   2dbde:	4a44      	ldr	r2, [pc, #272]	; (2dcf0 <f_open+0x528>)
   2dbe0:	2194      	movs	r1, #148	; 0x94
   2dbe2:	0089      	lsls	r1, r1, #2
   2dbe4:	468c      	mov	ip, r1
   2dbe6:	44bc      	add	ip, r7
   2dbe8:	4462      	add	r2, ip
   2dbea:	7812      	ldrb	r2, [r2, #0]
   2dbec:	2120      	movs	r1, #32
   2dbee:	430a      	orrs	r2, r1
   2dbf0:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2dbf2:	2387      	movs	r3, #135	; 0x87
   2dbf4:	009b      	lsls	r3, r3, #2
   2dbf6:	18fb      	adds	r3, r7, r3
   2dbf8:	681b      	ldr	r3, [r3, #0]
   2dbfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2dbfc:	68fb      	ldr	r3, [r7, #12]
   2dbfe:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2dc00:	68fb      	ldr	r3, [r7, #12]
   2dc02:	2292      	movs	r2, #146	; 0x92
   2dc04:	0092      	lsls	r2, r2, #2
   2dc06:	18ba      	adds	r2, r7, r2
   2dc08:	6812      	ldr	r2, [r2, #0]
   2dc0a:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2dc0c:	4b39      	ldr	r3, [pc, #228]	; (2dcf4 <f_open+0x52c>)
   2dc0e:	18fb      	adds	r3, r7, r3
   2dc10:	781b      	ldrb	r3, [r3, #0]
   2dc12:	2b00      	cmp	r3, #0
   2dc14:	d163      	bne.n	2dcde <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2dc16:	68fb      	ldr	r3, [r7, #12]
   2dc18:	4a35      	ldr	r2, [pc, #212]	; (2dcf0 <f_open+0x528>)
   2dc1a:	2194      	movs	r1, #148	; 0x94
   2dc1c:	0089      	lsls	r1, r1, #2
   2dc1e:	468c      	mov	ip, r1
   2dc20:	44bc      	add	ip, r7
   2dc22:	4462      	add	r2, ip
   2dc24:	7812      	ldrb	r2, [r2, #0]
   2dc26:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2dc28:	2392      	movs	r3, #146	; 0x92
   2dc2a:	009b      	lsls	r3, r3, #2
   2dc2c:	18fb      	adds	r3, r7, r3
   2dc2e:	681b      	ldr	r3, [r3, #0]
   2dc30:	3315      	adds	r3, #21
   2dc32:	781b      	ldrb	r3, [r3, #0]
   2dc34:	021b      	lsls	r3, r3, #8
   2dc36:	b21a      	sxth	r2, r3
   2dc38:	2392      	movs	r3, #146	; 0x92
   2dc3a:	009b      	lsls	r3, r3, #2
   2dc3c:	18fb      	adds	r3, r7, r3
   2dc3e:	681b      	ldr	r3, [r3, #0]
   2dc40:	3314      	adds	r3, #20
   2dc42:	781b      	ldrb	r3, [r3, #0]
   2dc44:	b21b      	sxth	r3, r3
   2dc46:	4313      	orrs	r3, r2
   2dc48:	b21b      	sxth	r3, r3
   2dc4a:	b29b      	uxth	r3, r3
   2dc4c:	041b      	lsls	r3, r3, #16
   2dc4e:	2292      	movs	r2, #146	; 0x92
   2dc50:	0092      	lsls	r2, r2, #2
   2dc52:	18ba      	adds	r2, r7, r2
   2dc54:	6812      	ldr	r2, [r2, #0]
   2dc56:	321b      	adds	r2, #27
   2dc58:	7812      	ldrb	r2, [r2, #0]
   2dc5a:	0212      	lsls	r2, r2, #8
   2dc5c:	b211      	sxth	r1, r2
   2dc5e:	2292      	movs	r2, #146	; 0x92
   2dc60:	0092      	lsls	r2, r2, #2
   2dc62:	18ba      	adds	r2, r7, r2
   2dc64:	6812      	ldr	r2, [r2, #0]
   2dc66:	321a      	adds	r2, #26
   2dc68:	7812      	ldrb	r2, [r2, #0]
   2dc6a:	b212      	sxth	r2, r2
   2dc6c:	430a      	orrs	r2, r1
   2dc6e:	b212      	sxth	r2, r2
   2dc70:	b292      	uxth	r2, r2
   2dc72:	431a      	orrs	r2, r3
   2dc74:	68fb      	ldr	r3, [r7, #12]
   2dc76:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2dc78:	2392      	movs	r3, #146	; 0x92
   2dc7a:	009b      	lsls	r3, r3, #2
   2dc7c:	18fb      	adds	r3, r7, r3
   2dc7e:	681b      	ldr	r3, [r3, #0]
   2dc80:	331f      	adds	r3, #31
   2dc82:	781b      	ldrb	r3, [r3, #0]
   2dc84:	061a      	lsls	r2, r3, #24
   2dc86:	2392      	movs	r3, #146	; 0x92
   2dc88:	009b      	lsls	r3, r3, #2
   2dc8a:	18fb      	adds	r3, r7, r3
   2dc8c:	681b      	ldr	r3, [r3, #0]
   2dc8e:	331e      	adds	r3, #30
   2dc90:	781b      	ldrb	r3, [r3, #0]
   2dc92:	041b      	lsls	r3, r3, #16
   2dc94:	4313      	orrs	r3, r2
   2dc96:	2292      	movs	r2, #146	; 0x92
   2dc98:	0092      	lsls	r2, r2, #2
   2dc9a:	18ba      	adds	r2, r7, r2
   2dc9c:	6812      	ldr	r2, [r2, #0]
   2dc9e:	321d      	adds	r2, #29
   2dca0:	7812      	ldrb	r2, [r2, #0]
   2dca2:	0212      	lsls	r2, r2, #8
   2dca4:	4313      	orrs	r3, r2
   2dca6:	2292      	movs	r2, #146	; 0x92
   2dca8:	0092      	lsls	r2, r2, #2
   2dcaa:	18ba      	adds	r2, r7, r2
   2dcac:	6812      	ldr	r2, [r2, #0]
   2dcae:	321c      	adds	r2, #28
   2dcb0:	7812      	ldrb	r2, [r2, #0]
   2dcb2:	431a      	orrs	r2, r3
   2dcb4:	68fb      	ldr	r3, [r7, #12]
   2dcb6:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2dcb8:	68fb      	ldr	r3, [r7, #12]
   2dcba:	2200      	movs	r2, #0
   2dcbc:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2dcbe:	68fb      	ldr	r3, [r7, #12]
   2dcc0:	2200      	movs	r2, #0
   2dcc2:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2dcc4:	2387      	movs	r3, #135	; 0x87
   2dcc6:	009b      	lsls	r3, r3, #2
   2dcc8:	18fb      	adds	r3, r7, r3
   2dcca:	681a      	ldr	r2, [r3, #0]
   2dccc:	68fb      	ldr	r3, [r7, #12]
   2dcce:	601a      	str	r2, [r3, #0]
   2dcd0:	2387      	movs	r3, #135	; 0x87
   2dcd2:	009b      	lsls	r3, r3, #2
   2dcd4:	18fb      	adds	r3, r7, r3
   2dcd6:	681b      	ldr	r3, [r3, #0]
   2dcd8:	88da      	ldrh	r2, [r3, #6]
   2dcda:	68fb      	ldr	r3, [r7, #12]
   2dcdc:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2dcde:	4b05      	ldr	r3, [pc, #20]	; (2dcf4 <f_open+0x52c>)
   2dce0:	18fb      	adds	r3, r7, r3
   2dce2:	781b      	ldrb	r3, [r3, #0]
}
   2dce4:	0018      	movs	r0, r3
   2dce6:	46bd      	mov	sp, r7
   2dce8:	2395      	movs	r3, #149	; 0x95
   2dcea:	009b      	lsls	r3, r3, #2
   2dcec:	449d      	add	sp, r3
   2dcee:	bd90      	pop	{r4, r7, pc}
   2dcf0:	fffffdb7 	.word	0xfffffdb7
   2dcf4:	0000024f 	.word	0x0000024f

0002dcf8 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2dcf8:	b590      	push	{r4, r7, lr}
   2dcfa:	b08b      	sub	sp, #44	; 0x2c
   2dcfc:	af00      	add	r7, sp, #0
   2dcfe:	60f8      	str	r0, [r7, #12]
   2dd00:	60b9      	str	r1, [r7, #8]
   2dd02:	607a      	str	r2, [r7, #4]
   2dd04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2dd06:	68bb      	ldr	r3, [r7, #8]
   2dd08:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2dd0a:	683b      	ldr	r3, [r7, #0]
   2dd0c:	2200      	movs	r2, #0
   2dd0e:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2dd10:	68fb      	ldr	r3, [r7, #12]
   2dd12:	681a      	ldr	r2, [r3, #0]
   2dd14:	68fb      	ldr	r3, [r7, #12]
   2dd16:	889b      	ldrh	r3, [r3, #4]
   2dd18:	2117      	movs	r1, #23
   2dd1a:	187c      	adds	r4, r7, r1
   2dd1c:	0019      	movs	r1, r3
   2dd1e:	0010      	movs	r0, r2
   2dd20:	4bc3      	ldr	r3, [pc, #780]	; (2e030 <f_write+0x338>)
   2dd22:	4798      	blx	r3
   2dd24:	0003      	movs	r3, r0
   2dd26:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2dd28:	2317      	movs	r3, #23
   2dd2a:	18fb      	adds	r3, r7, r3
   2dd2c:	781b      	ldrb	r3, [r3, #0]
   2dd2e:	2b00      	cmp	r3, #0
   2dd30:	d003      	beq.n	2dd3a <f_write+0x42>
   2dd32:	2317      	movs	r3, #23
   2dd34:	18fb      	adds	r3, r7, r3
   2dd36:	781b      	ldrb	r3, [r3, #0]
   2dd38:	e176      	b.n	2e028 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2dd3a:	68fb      	ldr	r3, [r7, #12]
   2dd3c:	799b      	ldrb	r3, [r3, #6]
   2dd3e:	b25b      	sxtb	r3, r3
   2dd40:	2b00      	cmp	r3, #0
   2dd42:	da01      	bge.n	2dd48 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2dd44:	2302      	movs	r3, #2
   2dd46:	e16f      	b.n	2e028 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2dd48:	68fb      	ldr	r3, [r7, #12]
   2dd4a:	799b      	ldrb	r3, [r3, #6]
   2dd4c:	001a      	movs	r2, r3
   2dd4e:	2302      	movs	r3, #2
   2dd50:	4013      	ands	r3, r2
   2dd52:	d101      	bne.n	2dd58 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2dd54:	2307      	movs	r3, #7
   2dd56:	e167      	b.n	2e028 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2dd58:	68fb      	ldr	r3, [r7, #12]
   2dd5a:	68da      	ldr	r2, [r3, #12]
   2dd5c:	687b      	ldr	r3, [r7, #4]
   2dd5e:	18d2      	adds	r2, r2, r3
   2dd60:	68fb      	ldr	r3, [r7, #12]
   2dd62:	68db      	ldr	r3, [r3, #12]
   2dd64:	429a      	cmp	r2, r3
   2dd66:	d300      	bcc.n	2dd6a <f_write+0x72>
   2dd68:	e146      	b.n	2dff8 <f_write+0x300>
   2dd6a:	2300      	movs	r3, #0
   2dd6c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2dd6e:	e143      	b.n	2dff8 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2dd70:	68fb      	ldr	r3, [r7, #12]
   2dd72:	689b      	ldr	r3, [r3, #8]
   2dd74:	05db      	lsls	r3, r3, #23
   2dd76:	0ddb      	lsrs	r3, r3, #23
   2dd78:	d000      	beq.n	2dd7c <f_write+0x84>
   2dd7a:	e0f6      	b.n	2df6a <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2dd7c:	68fb      	ldr	r3, [r7, #12]
   2dd7e:	689b      	ldr	r3, [r3, #8]
   2dd80:	0a5b      	lsrs	r3, r3, #9
   2dd82:	b2da      	uxtb	r2, r3
   2dd84:	68fb      	ldr	r3, [r7, #12]
   2dd86:	681b      	ldr	r3, [r3, #0]
   2dd88:	789b      	ldrb	r3, [r3, #2]
   2dd8a:	3b01      	subs	r3, #1
   2dd8c:	b2d9      	uxtb	r1, r3
   2dd8e:	2316      	movs	r3, #22
   2dd90:	18fb      	adds	r3, r7, r3
   2dd92:	400a      	ands	r2, r1
   2dd94:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2dd96:	2316      	movs	r3, #22
   2dd98:	18fb      	adds	r3, r7, r3
   2dd9a:	781b      	ldrb	r3, [r3, #0]
   2dd9c:	2b00      	cmp	r3, #0
   2dd9e:	d140      	bne.n	2de22 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2dda0:	68fb      	ldr	r3, [r7, #12]
   2dda2:	689b      	ldr	r3, [r3, #8]
   2dda4:	2b00      	cmp	r3, #0
   2dda6:	d111      	bne.n	2ddcc <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2dda8:	68fb      	ldr	r3, [r7, #12]
   2ddaa:	691b      	ldr	r3, [r3, #16]
   2ddac:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2ddae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ddb0:	2b00      	cmp	r3, #0
   2ddb2:	d115      	bne.n	2dde0 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2ddb4:	68fb      	ldr	r3, [r7, #12]
   2ddb6:	681b      	ldr	r3, [r3, #0]
   2ddb8:	2100      	movs	r1, #0
   2ddba:	0018      	movs	r0, r3
   2ddbc:	4b9d      	ldr	r3, [pc, #628]	; (2e034 <f_write+0x33c>)
   2ddbe:	4798      	blx	r3
   2ddc0:	0003      	movs	r3, r0
   2ddc2:	627b      	str	r3, [r7, #36]	; 0x24
   2ddc4:	68fb      	ldr	r3, [r7, #12]
   2ddc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ddc8:	611a      	str	r2, [r3, #16]
   2ddca:	e009      	b.n	2dde0 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2ddcc:	68fb      	ldr	r3, [r7, #12]
   2ddce:	681a      	ldr	r2, [r3, #0]
   2ddd0:	68fb      	ldr	r3, [r7, #12]
   2ddd2:	695b      	ldr	r3, [r3, #20]
   2ddd4:	0019      	movs	r1, r3
   2ddd6:	0010      	movs	r0, r2
   2ddd8:	4b96      	ldr	r3, [pc, #600]	; (2e034 <f_write+0x33c>)
   2ddda:	4798      	blx	r3
   2dddc:	0003      	movs	r3, r0
   2ddde:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2dde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dde2:	2b00      	cmp	r3, #0
   2dde4:	d100      	bne.n	2dde8 <f_write+0xf0>
   2dde6:	e10c      	b.n	2e002 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ddea:	2b01      	cmp	r3, #1
   2ddec:	d109      	bne.n	2de02 <f_write+0x10a>
   2ddee:	68fb      	ldr	r3, [r7, #12]
   2ddf0:	799b      	ldrb	r3, [r3, #6]
   2ddf2:	2280      	movs	r2, #128	; 0x80
   2ddf4:	4252      	negs	r2, r2
   2ddf6:	4313      	orrs	r3, r2
   2ddf8:	b2da      	uxtb	r2, r3
   2ddfa:	68fb      	ldr	r3, [r7, #12]
   2ddfc:	719a      	strb	r2, [r3, #6]
   2ddfe:	2302      	movs	r3, #2
   2de00:	e112      	b.n	2e028 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2de02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2de04:	3301      	adds	r3, #1
   2de06:	d109      	bne.n	2de1c <f_write+0x124>
   2de08:	68fb      	ldr	r3, [r7, #12]
   2de0a:	799b      	ldrb	r3, [r3, #6]
   2de0c:	2280      	movs	r2, #128	; 0x80
   2de0e:	4252      	negs	r2, r2
   2de10:	4313      	orrs	r3, r2
   2de12:	b2da      	uxtb	r2, r3
   2de14:	68fb      	ldr	r3, [r7, #12]
   2de16:	719a      	strb	r2, [r3, #6]
   2de18:	2301      	movs	r3, #1
   2de1a:	e105      	b.n	2e028 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2de1c:	68fb      	ldr	r3, [r7, #12]
   2de1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2de20:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2de22:	68fb      	ldr	r3, [r7, #12]
   2de24:	681b      	ldr	r3, [r3, #0]
   2de26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2de28:	68fb      	ldr	r3, [r7, #12]
   2de2a:	699b      	ldr	r3, [r3, #24]
   2de2c:	429a      	cmp	r2, r3
   2de2e:	d111      	bne.n	2de54 <f_write+0x15c>
   2de30:	68fb      	ldr	r3, [r7, #12]
   2de32:	681b      	ldr	r3, [r3, #0]
   2de34:	2100      	movs	r1, #0
   2de36:	0018      	movs	r0, r3
   2de38:	4b7f      	ldr	r3, [pc, #508]	; (2e038 <f_write+0x340>)
   2de3a:	4798      	blx	r3
   2de3c:	1e03      	subs	r3, r0, #0
   2de3e:	d009      	beq.n	2de54 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2de40:	68fb      	ldr	r3, [r7, #12]
   2de42:	799b      	ldrb	r3, [r3, #6]
   2de44:	2280      	movs	r2, #128	; 0x80
   2de46:	4252      	negs	r2, r2
   2de48:	4313      	orrs	r3, r2
   2de4a:	b2da      	uxtb	r2, r3
   2de4c:	68fb      	ldr	r3, [r7, #12]
   2de4e:	719a      	strb	r2, [r3, #6]
   2de50:	2301      	movs	r3, #1
   2de52:	e0e9      	b.n	2e028 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2de54:	68fb      	ldr	r3, [r7, #12]
   2de56:	681a      	ldr	r2, [r3, #0]
   2de58:	68fb      	ldr	r3, [r7, #12]
   2de5a:	695b      	ldr	r3, [r3, #20]
   2de5c:	0019      	movs	r1, r3
   2de5e:	0010      	movs	r0, r2
   2de60:	4b76      	ldr	r3, [pc, #472]	; (2e03c <f_write+0x344>)
   2de62:	4798      	blx	r3
   2de64:	0003      	movs	r3, r0
   2de66:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2de68:	693b      	ldr	r3, [r7, #16]
   2de6a:	2b00      	cmp	r3, #0
   2de6c:	d109      	bne.n	2de82 <f_write+0x18a>
   2de6e:	68fb      	ldr	r3, [r7, #12]
   2de70:	799b      	ldrb	r3, [r3, #6]
   2de72:	2280      	movs	r2, #128	; 0x80
   2de74:	4252      	negs	r2, r2
   2de76:	4313      	orrs	r3, r2
   2de78:	b2da      	uxtb	r2, r3
   2de7a:	68fb      	ldr	r3, [r7, #12]
   2de7c:	719a      	strb	r2, [r3, #6]
   2de7e:	2302      	movs	r3, #2
   2de80:	e0d2      	b.n	2e028 <f_write+0x330>
			sect += csect;
   2de82:	2316      	movs	r3, #22
   2de84:	18fb      	adds	r3, r7, r3
   2de86:	781b      	ldrb	r3, [r3, #0]
   2de88:	693a      	ldr	r2, [r7, #16]
   2de8a:	18d3      	adds	r3, r2, r3
   2de8c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2de8e:	687b      	ldr	r3, [r7, #4]
   2de90:	0a5b      	lsrs	r3, r3, #9
   2de92:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2de94:	69fb      	ldr	r3, [r7, #28]
   2de96:	2b00      	cmp	r3, #0
   2de98:	d048      	beq.n	2df2c <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2de9a:	2316      	movs	r3, #22
   2de9c:	18fb      	adds	r3, r7, r3
   2de9e:	781a      	ldrb	r2, [r3, #0]
   2dea0:	69fb      	ldr	r3, [r7, #28]
   2dea2:	18d2      	adds	r2, r2, r3
   2dea4:	68fb      	ldr	r3, [r7, #12]
   2dea6:	681b      	ldr	r3, [r3, #0]
   2dea8:	789b      	ldrb	r3, [r3, #2]
   2deaa:	429a      	cmp	r2, r3
   2deac:	d908      	bls.n	2dec0 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2deae:	68fb      	ldr	r3, [r7, #12]
   2deb0:	681b      	ldr	r3, [r3, #0]
   2deb2:	789b      	ldrb	r3, [r3, #2]
   2deb4:	001a      	movs	r2, r3
   2deb6:	2316      	movs	r3, #22
   2deb8:	18fb      	adds	r3, r7, r3
   2deba:	781b      	ldrb	r3, [r3, #0]
   2debc:	1ad3      	subs	r3, r2, r3
   2debe:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2dec0:	68fb      	ldr	r3, [r7, #12]
   2dec2:	681b      	ldr	r3, [r3, #0]
   2dec4:	7858      	ldrb	r0, [r3, #1]
   2dec6:	69fb      	ldr	r3, [r7, #28]
   2dec8:	b2db      	uxtb	r3, r3
   2deca:	693a      	ldr	r2, [r7, #16]
   2decc:	69b9      	ldr	r1, [r7, #24]
   2dece:	4c5c      	ldr	r4, [pc, #368]	; (2e040 <f_write+0x348>)
   2ded0:	47a0      	blx	r4
   2ded2:	1e03      	subs	r3, r0, #0
   2ded4:	d009      	beq.n	2deea <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2ded6:	68fb      	ldr	r3, [r7, #12]
   2ded8:	799b      	ldrb	r3, [r3, #6]
   2deda:	2280      	movs	r2, #128	; 0x80
   2dedc:	4252      	negs	r2, r2
   2dede:	4313      	orrs	r3, r2
   2dee0:	b2da      	uxtb	r2, r3
   2dee2:	68fb      	ldr	r3, [r7, #12]
   2dee4:	719a      	strb	r2, [r3, #6]
   2dee6:	2301      	movs	r3, #1
   2dee8:	e09e      	b.n	2e028 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2deea:	68fb      	ldr	r3, [r7, #12]
   2deec:	681b      	ldr	r3, [r3, #0]
   2deee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2def0:	693b      	ldr	r3, [r7, #16]
   2def2:	1ad2      	subs	r2, r2, r3
   2def4:	69fb      	ldr	r3, [r7, #28]
   2def6:	429a      	cmp	r2, r3
   2def8:	d214      	bcs.n	2df24 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2defa:	68fb      	ldr	r3, [r7, #12]
   2defc:	681b      	ldr	r3, [r3, #0]
   2defe:	3330      	adds	r3, #48	; 0x30
   2df00:	0018      	movs	r0, r3
   2df02:	68fb      	ldr	r3, [r7, #12]
   2df04:	681b      	ldr	r3, [r3, #0]
   2df06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2df08:	693b      	ldr	r3, [r7, #16]
   2df0a:	1ad3      	subs	r3, r2, r3
   2df0c:	025b      	lsls	r3, r3, #9
   2df0e:	69ba      	ldr	r2, [r7, #24]
   2df10:	18d1      	adds	r1, r2, r3
   2df12:	2380      	movs	r3, #128	; 0x80
   2df14:	009b      	lsls	r3, r3, #2
   2df16:	001a      	movs	r2, r3
   2df18:	4b4a      	ldr	r3, [pc, #296]	; (2e044 <f_write+0x34c>)
   2df1a:	4798      	blx	r3
					fp->fs->wflag = 0;
   2df1c:	68fb      	ldr	r3, [r7, #12]
   2df1e:	681b      	ldr	r3, [r3, #0]
   2df20:	2200      	movs	r2, #0
   2df22:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2df24:	69fb      	ldr	r3, [r7, #28]
   2df26:	025b      	lsls	r3, r3, #9
   2df28:	623b      	str	r3, [r7, #32]
				continue;
   2df2a:	e051      	b.n	2dfd0 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2df2c:	68fb      	ldr	r3, [r7, #12]
   2df2e:	689a      	ldr	r2, [r3, #8]
   2df30:	68fb      	ldr	r3, [r7, #12]
   2df32:	68db      	ldr	r3, [r3, #12]
   2df34:	429a      	cmp	r2, r3
   2df36:	d315      	bcc.n	2df64 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2df38:	68fb      	ldr	r3, [r7, #12]
   2df3a:	681b      	ldr	r3, [r3, #0]
   2df3c:	2100      	movs	r1, #0
   2df3e:	0018      	movs	r0, r3
   2df40:	4b3d      	ldr	r3, [pc, #244]	; (2e038 <f_write+0x340>)
   2df42:	4798      	blx	r3
   2df44:	1e03      	subs	r3, r0, #0
   2df46:	d009      	beq.n	2df5c <f_write+0x264>
   2df48:	68fb      	ldr	r3, [r7, #12]
   2df4a:	799b      	ldrb	r3, [r3, #6]
   2df4c:	2280      	movs	r2, #128	; 0x80
   2df4e:	4252      	negs	r2, r2
   2df50:	4313      	orrs	r3, r2
   2df52:	b2da      	uxtb	r2, r3
   2df54:	68fb      	ldr	r3, [r7, #12]
   2df56:	719a      	strb	r2, [r3, #6]
   2df58:	2301      	movs	r3, #1
   2df5a:	e065      	b.n	2e028 <f_write+0x330>
				fp->fs->winsect = sect;
   2df5c:	68fb      	ldr	r3, [r7, #12]
   2df5e:	681b      	ldr	r3, [r3, #0]
   2df60:	693a      	ldr	r2, [r7, #16]
   2df62:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2df64:	68fb      	ldr	r3, [r7, #12]
   2df66:	693a      	ldr	r2, [r7, #16]
   2df68:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2df6a:	68fb      	ldr	r3, [r7, #12]
   2df6c:	689b      	ldr	r3, [r3, #8]
   2df6e:	05db      	lsls	r3, r3, #23
   2df70:	0ddb      	lsrs	r3, r3, #23
   2df72:	2280      	movs	r2, #128	; 0x80
   2df74:	0092      	lsls	r2, r2, #2
   2df76:	1ad3      	subs	r3, r2, r3
   2df78:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2df7a:	6a3a      	ldr	r2, [r7, #32]
   2df7c:	687b      	ldr	r3, [r7, #4]
   2df7e:	429a      	cmp	r2, r3
   2df80:	d901      	bls.n	2df86 <f_write+0x28e>
   2df82:	687b      	ldr	r3, [r7, #4]
   2df84:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2df86:	68fb      	ldr	r3, [r7, #12]
   2df88:	681a      	ldr	r2, [r3, #0]
   2df8a:	68fb      	ldr	r3, [r7, #12]
   2df8c:	699b      	ldr	r3, [r3, #24]
   2df8e:	0019      	movs	r1, r3
   2df90:	0010      	movs	r0, r2
   2df92:	4b29      	ldr	r3, [pc, #164]	; (2e038 <f_write+0x340>)
   2df94:	4798      	blx	r3
   2df96:	1e03      	subs	r3, r0, #0
   2df98:	d009      	beq.n	2dfae <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2df9a:	68fb      	ldr	r3, [r7, #12]
   2df9c:	799b      	ldrb	r3, [r3, #6]
   2df9e:	2280      	movs	r2, #128	; 0x80
   2dfa0:	4252      	negs	r2, r2
   2dfa2:	4313      	orrs	r3, r2
   2dfa4:	b2da      	uxtb	r2, r3
   2dfa6:	68fb      	ldr	r3, [r7, #12]
   2dfa8:	719a      	strb	r2, [r3, #6]
   2dfaa:	2301      	movs	r3, #1
   2dfac:	e03c      	b.n	2e028 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2dfae:	68fb      	ldr	r3, [r7, #12]
   2dfb0:	681a      	ldr	r2, [r3, #0]
   2dfb2:	68fb      	ldr	r3, [r7, #12]
   2dfb4:	689b      	ldr	r3, [r3, #8]
   2dfb6:	05db      	lsls	r3, r3, #23
   2dfb8:	0ddb      	lsrs	r3, r3, #23
   2dfba:	3330      	adds	r3, #48	; 0x30
   2dfbc:	18d3      	adds	r3, r2, r3
   2dfbe:	6a3a      	ldr	r2, [r7, #32]
   2dfc0:	69b9      	ldr	r1, [r7, #24]
   2dfc2:	0018      	movs	r0, r3
   2dfc4:	4b1f      	ldr	r3, [pc, #124]	; (2e044 <f_write+0x34c>)
   2dfc6:	4798      	blx	r3
		fp->fs->wflag = 1;
   2dfc8:	68fb      	ldr	r3, [r7, #12]
   2dfca:	681b      	ldr	r3, [r3, #0]
   2dfcc:	2201      	movs	r2, #1
   2dfce:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2dfd0:	69ba      	ldr	r2, [r7, #24]
   2dfd2:	6a3b      	ldr	r3, [r7, #32]
   2dfd4:	18d3      	adds	r3, r2, r3
   2dfd6:	61bb      	str	r3, [r7, #24]
   2dfd8:	68fb      	ldr	r3, [r7, #12]
   2dfda:	689a      	ldr	r2, [r3, #8]
   2dfdc:	6a3b      	ldr	r3, [r7, #32]
   2dfde:	18d2      	adds	r2, r2, r3
   2dfe0:	68fb      	ldr	r3, [r7, #12]
   2dfe2:	609a      	str	r2, [r3, #8]
   2dfe4:	683b      	ldr	r3, [r7, #0]
   2dfe6:	681a      	ldr	r2, [r3, #0]
   2dfe8:	6a3b      	ldr	r3, [r7, #32]
   2dfea:	18d2      	adds	r2, r2, r3
   2dfec:	683b      	ldr	r3, [r7, #0]
   2dfee:	601a      	str	r2, [r3, #0]
   2dff0:	687a      	ldr	r2, [r7, #4]
   2dff2:	6a3b      	ldr	r3, [r7, #32]
   2dff4:	1ad3      	subs	r3, r2, r3
   2dff6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2dff8:	687b      	ldr	r3, [r7, #4]
   2dffa:	2b00      	cmp	r3, #0
   2dffc:	d000      	beq.n	2e000 <f_write+0x308>
   2dffe:	e6b7      	b.n	2dd70 <f_write+0x78>
   2e000:	e000      	b.n	2e004 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2e002:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2e004:	68fb      	ldr	r3, [r7, #12]
   2e006:	689a      	ldr	r2, [r3, #8]
   2e008:	68fb      	ldr	r3, [r7, #12]
   2e00a:	68db      	ldr	r3, [r3, #12]
   2e00c:	429a      	cmp	r2, r3
   2e00e:	d903      	bls.n	2e018 <f_write+0x320>
   2e010:	68fb      	ldr	r3, [r7, #12]
   2e012:	689a      	ldr	r2, [r3, #8]
   2e014:	68fb      	ldr	r3, [r7, #12]
   2e016:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2e018:	68fb      	ldr	r3, [r7, #12]
   2e01a:	799b      	ldrb	r3, [r3, #6]
   2e01c:	2220      	movs	r2, #32
   2e01e:	4313      	orrs	r3, r2
   2e020:	b2da      	uxtb	r2, r3
   2e022:	68fb      	ldr	r3, [r7, #12]
   2e024:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2e026:	2300      	movs	r3, #0
}
   2e028:	0018      	movs	r0, r3
   2e02a:	46bd      	mov	sp, r7
   2e02c:	b00b      	add	sp, #44	; 0x2c
   2e02e:	bd90      	pop	{r4, r7, pc}
   2e030:	0002d775 	.word	0x0002d775
   2e034:	0002be01 	.word	0x0002be01
   2e038:	0002b6f9 	.word	0x0002b6f9
   2e03c:	0002b959 	.word	0x0002b959
   2e040:	0002b3e5 	.word	0x0002b3e5
   2e044:	0002b615 	.word	0x0002b615

0002e048 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2e048:	b590      	push	{r4, r7, lr}
   2e04a:	b087      	sub	sp, #28
   2e04c:	af00      	add	r7, sp, #0
   2e04e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2e050:	687b      	ldr	r3, [r7, #4]
   2e052:	681a      	ldr	r2, [r3, #0]
   2e054:	687b      	ldr	r3, [r7, #4]
   2e056:	889b      	ldrh	r3, [r3, #4]
   2e058:	2117      	movs	r1, #23
   2e05a:	187c      	adds	r4, r7, r1
   2e05c:	0019      	movs	r1, r3
   2e05e:	0010      	movs	r0, r2
   2e060:	4b55      	ldr	r3, [pc, #340]	; (2e1b8 <f_sync+0x170>)
   2e062:	4798      	blx	r3
   2e064:	0003      	movs	r3, r0
   2e066:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2e068:	2317      	movs	r3, #23
   2e06a:	18fb      	adds	r3, r7, r3
   2e06c:	781b      	ldrb	r3, [r3, #0]
   2e06e:	2b00      	cmp	r3, #0
   2e070:	d000      	beq.n	2e074 <f_sync+0x2c>
   2e072:	e09a      	b.n	2e1aa <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2e074:	687b      	ldr	r3, [r7, #4]
   2e076:	799b      	ldrb	r3, [r3, #6]
   2e078:	001a      	movs	r2, r3
   2e07a:	2320      	movs	r3, #32
   2e07c:	4013      	ands	r3, r2
   2e07e:	d100      	bne.n	2e082 <f_sync+0x3a>
   2e080:	e093      	b.n	2e1aa <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2e082:	687b      	ldr	r3, [r7, #4]
   2e084:	681a      	ldr	r2, [r3, #0]
   2e086:	687b      	ldr	r3, [r7, #4]
   2e088:	69db      	ldr	r3, [r3, #28]
   2e08a:	2117      	movs	r1, #23
   2e08c:	187c      	adds	r4, r7, r1
   2e08e:	0019      	movs	r1, r3
   2e090:	0010      	movs	r0, r2
   2e092:	4b4a      	ldr	r3, [pc, #296]	; (2e1bc <f_sync+0x174>)
   2e094:	4798      	blx	r3
   2e096:	0003      	movs	r3, r0
   2e098:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2e09a:	2317      	movs	r3, #23
   2e09c:	18fb      	adds	r3, r7, r3
   2e09e:	781b      	ldrb	r3, [r3, #0]
   2e0a0:	2b00      	cmp	r3, #0
   2e0a2:	d000      	beq.n	2e0a6 <f_sync+0x5e>
   2e0a4:	e081      	b.n	2e1aa <f_sync+0x162>
				dir = fp->dir_ptr;
   2e0a6:	687b      	ldr	r3, [r7, #4]
   2e0a8:	6a1b      	ldr	r3, [r3, #32]
   2e0aa:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2e0ac:	693b      	ldr	r3, [r7, #16]
   2e0ae:	330b      	adds	r3, #11
   2e0b0:	693a      	ldr	r2, [r7, #16]
   2e0b2:	320b      	adds	r2, #11
   2e0b4:	7812      	ldrb	r2, [r2, #0]
   2e0b6:	2120      	movs	r1, #32
   2e0b8:	430a      	orrs	r2, r1
   2e0ba:	b2d2      	uxtb	r2, r2
   2e0bc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2e0be:	693b      	ldr	r3, [r7, #16]
   2e0c0:	331c      	adds	r3, #28
   2e0c2:	001a      	movs	r2, r3
   2e0c4:	687b      	ldr	r3, [r7, #4]
   2e0c6:	68db      	ldr	r3, [r3, #12]
   2e0c8:	b2db      	uxtb	r3, r3
   2e0ca:	7013      	strb	r3, [r2, #0]
   2e0cc:	693b      	ldr	r3, [r7, #16]
   2e0ce:	331d      	adds	r3, #29
   2e0d0:	001a      	movs	r2, r3
   2e0d2:	687b      	ldr	r3, [r7, #4]
   2e0d4:	68db      	ldr	r3, [r3, #12]
   2e0d6:	b29b      	uxth	r3, r3
   2e0d8:	0a1b      	lsrs	r3, r3, #8
   2e0da:	b29b      	uxth	r3, r3
   2e0dc:	b2db      	uxtb	r3, r3
   2e0de:	7013      	strb	r3, [r2, #0]
   2e0e0:	693b      	ldr	r3, [r7, #16]
   2e0e2:	331e      	adds	r3, #30
   2e0e4:	001a      	movs	r2, r3
   2e0e6:	687b      	ldr	r3, [r7, #4]
   2e0e8:	68db      	ldr	r3, [r3, #12]
   2e0ea:	0c1b      	lsrs	r3, r3, #16
   2e0ec:	b2db      	uxtb	r3, r3
   2e0ee:	7013      	strb	r3, [r2, #0]
   2e0f0:	693b      	ldr	r3, [r7, #16]
   2e0f2:	331f      	adds	r3, #31
   2e0f4:	001a      	movs	r2, r3
   2e0f6:	687b      	ldr	r3, [r7, #4]
   2e0f8:	68db      	ldr	r3, [r3, #12]
   2e0fa:	0e1b      	lsrs	r3, r3, #24
   2e0fc:	b2db      	uxtb	r3, r3
   2e0fe:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2e100:	693b      	ldr	r3, [r7, #16]
   2e102:	331a      	adds	r3, #26
   2e104:	001a      	movs	r2, r3
   2e106:	687b      	ldr	r3, [r7, #4]
   2e108:	691b      	ldr	r3, [r3, #16]
   2e10a:	b2db      	uxtb	r3, r3
   2e10c:	7013      	strb	r3, [r2, #0]
   2e10e:	693b      	ldr	r3, [r7, #16]
   2e110:	331b      	adds	r3, #27
   2e112:	001a      	movs	r2, r3
   2e114:	687b      	ldr	r3, [r7, #4]
   2e116:	691b      	ldr	r3, [r3, #16]
   2e118:	b29b      	uxth	r3, r3
   2e11a:	0a1b      	lsrs	r3, r3, #8
   2e11c:	b29b      	uxth	r3, r3
   2e11e:	b2db      	uxtb	r3, r3
   2e120:	7013      	strb	r3, [r2, #0]
   2e122:	693b      	ldr	r3, [r7, #16]
   2e124:	3314      	adds	r3, #20
   2e126:	001a      	movs	r2, r3
   2e128:	687b      	ldr	r3, [r7, #4]
   2e12a:	691b      	ldr	r3, [r3, #16]
   2e12c:	0c1b      	lsrs	r3, r3, #16
   2e12e:	b2db      	uxtb	r3, r3
   2e130:	7013      	strb	r3, [r2, #0]
   2e132:	693b      	ldr	r3, [r7, #16]
   2e134:	3315      	adds	r3, #21
   2e136:	001a      	movs	r2, r3
   2e138:	687b      	ldr	r3, [r7, #4]
   2e13a:	691b      	ldr	r3, [r3, #16]
   2e13c:	0c1b      	lsrs	r3, r3, #16
   2e13e:	b29b      	uxth	r3, r3
   2e140:	0a1b      	lsrs	r3, r3, #8
   2e142:	b29b      	uxth	r3, r3
   2e144:	b2db      	uxtb	r3, r3
   2e146:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2e148:	4b1d      	ldr	r3, [pc, #116]	; (2e1c0 <f_sync+0x178>)
   2e14a:	4798      	blx	r3
   2e14c:	0003      	movs	r3, r0
   2e14e:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2e150:	693b      	ldr	r3, [r7, #16]
   2e152:	3316      	adds	r3, #22
   2e154:	68fa      	ldr	r2, [r7, #12]
   2e156:	b2d2      	uxtb	r2, r2
   2e158:	701a      	strb	r2, [r3, #0]
   2e15a:	693b      	ldr	r3, [r7, #16]
   2e15c:	3317      	adds	r3, #23
   2e15e:	68fa      	ldr	r2, [r7, #12]
   2e160:	b292      	uxth	r2, r2
   2e162:	0a12      	lsrs	r2, r2, #8
   2e164:	b292      	uxth	r2, r2
   2e166:	b2d2      	uxtb	r2, r2
   2e168:	701a      	strb	r2, [r3, #0]
   2e16a:	693b      	ldr	r3, [r7, #16]
   2e16c:	3318      	adds	r3, #24
   2e16e:	68fa      	ldr	r2, [r7, #12]
   2e170:	0c12      	lsrs	r2, r2, #16
   2e172:	b2d2      	uxtb	r2, r2
   2e174:	701a      	strb	r2, [r3, #0]
   2e176:	693b      	ldr	r3, [r7, #16]
   2e178:	3319      	adds	r3, #25
   2e17a:	68fa      	ldr	r2, [r7, #12]
   2e17c:	0e12      	lsrs	r2, r2, #24
   2e17e:	b2d2      	uxtb	r2, r2
   2e180:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2e182:	687b      	ldr	r3, [r7, #4]
   2e184:	799b      	ldrb	r3, [r3, #6]
   2e186:	2220      	movs	r2, #32
   2e188:	4393      	bics	r3, r2
   2e18a:	b2da      	uxtb	r2, r3
   2e18c:	687b      	ldr	r3, [r7, #4]
   2e18e:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2e190:	687b      	ldr	r3, [r7, #4]
   2e192:	681b      	ldr	r3, [r3, #0]
   2e194:	2201      	movs	r2, #1
   2e196:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2e198:	687b      	ldr	r3, [r7, #4]
   2e19a:	681b      	ldr	r3, [r3, #0]
   2e19c:	2217      	movs	r2, #23
   2e19e:	18bc      	adds	r4, r7, r2
   2e1a0:	0018      	movs	r0, r3
   2e1a2:	4b08      	ldr	r3, [pc, #32]	; (2e1c4 <f_sync+0x17c>)
   2e1a4:	4798      	blx	r3
   2e1a6:	0003      	movs	r3, r0
   2e1a8:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2e1aa:	2317      	movs	r3, #23
   2e1ac:	18fb      	adds	r3, r7, r3
   2e1ae:	781b      	ldrb	r3, [r3, #0]
}
   2e1b0:	0018      	movs	r0, r3
   2e1b2:	46bd      	mov	sp, r7
   2e1b4:	b007      	add	sp, #28
   2e1b6:	bd90      	pop	{r4, r7, pc}
   2e1b8:	0002d775 	.word	0x0002d775
   2e1bc:	0002b6f9 	.word	0x0002b6f9
   2e1c0:	0002b5b5 	.word	0x0002b5b5
   2e1c4:	0002b7c1 	.word	0x0002b7c1

0002e1c8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2e1c8:	b590      	push	{r4, r7, lr}
   2e1ca:	b085      	sub	sp, #20
   2e1cc:	af00      	add	r7, sp, #0
   2e1ce:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2e1d0:	230f      	movs	r3, #15
   2e1d2:	18fc      	adds	r4, r7, r3
   2e1d4:	687b      	ldr	r3, [r7, #4]
   2e1d6:	0018      	movs	r0, r3
   2e1d8:	4b09      	ldr	r3, [pc, #36]	; (2e200 <f_close+0x38>)
   2e1da:	4798      	blx	r3
   2e1dc:	0003      	movs	r3, r0
   2e1de:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2e1e0:	230f      	movs	r3, #15
   2e1e2:	18fb      	adds	r3, r7, r3
   2e1e4:	781b      	ldrb	r3, [r3, #0]
   2e1e6:	2b00      	cmp	r3, #0
   2e1e8:	d102      	bne.n	2e1f0 <f_close+0x28>
   2e1ea:	687b      	ldr	r3, [r7, #4]
   2e1ec:	2200      	movs	r2, #0
   2e1ee:	601a      	str	r2, [r3, #0]
	return res;
   2e1f0:	230f      	movs	r3, #15
   2e1f2:	18fb      	adds	r3, r7, r3
   2e1f4:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2e1f6:	0018      	movs	r0, r3
   2e1f8:	46bd      	mov	sp, r7
   2e1fa:	b005      	add	sp, #20
   2e1fc:	bd90      	pop	{r4, r7, pc}
   2e1fe:	46c0      	nop			; (mov r8, r8)
   2e200:	0002e049 	.word	0x0002e049

0002e204 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2e204:	b580      	push	{r7, lr}
   2e206:	b084      	sub	sp, #16
   2e208:	af00      	add	r7, sp, #0
   2e20a:	0002      	movs	r2, r0
   2e20c:	6039      	str	r1, [r7, #0]
   2e20e:	1dbb      	adds	r3, r7, #6
   2e210:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2e212:	1dbb      	adds	r3, r7, #6
   2e214:	881b      	ldrh	r3, [r3, #0]
   2e216:	2b7f      	cmp	r3, #127	; 0x7f
   2e218:	d805      	bhi.n	2e226 <ff_convert+0x22>
		c = src;
   2e21a:	230e      	movs	r3, #14
   2e21c:	18fb      	adds	r3, r7, r3
   2e21e:	1dba      	adds	r2, r7, #6
   2e220:	8812      	ldrh	r2, [r2, #0]
   2e222:	801a      	strh	r2, [r3, #0]
   2e224:	e03a      	b.n	2e29c <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2e226:	683b      	ldr	r3, [r7, #0]
   2e228:	2b00      	cmp	r3, #0
   2e22a:	d010      	beq.n	2e24e <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2e22c:	1dbb      	adds	r3, r7, #6
   2e22e:	881b      	ldrh	r3, [r3, #0]
   2e230:	2bff      	cmp	r3, #255	; 0xff
   2e232:	d807      	bhi.n	2e244 <ff_convert+0x40>
   2e234:	1dbb      	adds	r3, r7, #6
   2e236:	881b      	ldrh	r3, [r3, #0]
   2e238:	3b80      	subs	r3, #128	; 0x80
   2e23a:	001a      	movs	r2, r3
   2e23c:	4b1b      	ldr	r3, [pc, #108]	; (2e2ac <ff_convert+0xa8>)
   2e23e:	0052      	lsls	r2, r2, #1
   2e240:	5ad2      	ldrh	r2, [r2, r3]
   2e242:	e000      	b.n	2e246 <ff_convert+0x42>
   2e244:	2200      	movs	r2, #0
   2e246:	230e      	movs	r3, #14
   2e248:	18fb      	adds	r3, r7, r3
   2e24a:	801a      	strh	r2, [r3, #0]
   2e24c:	e026      	b.n	2e29c <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2e24e:	230e      	movs	r3, #14
   2e250:	18fb      	adds	r3, r7, r3
   2e252:	2200      	movs	r2, #0
   2e254:	801a      	strh	r2, [r3, #0]
   2e256:	e010      	b.n	2e27a <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2e258:	230e      	movs	r3, #14
   2e25a:	18fb      	adds	r3, r7, r3
   2e25c:	881a      	ldrh	r2, [r3, #0]
   2e25e:	4b13      	ldr	r3, [pc, #76]	; (2e2ac <ff_convert+0xa8>)
   2e260:	0052      	lsls	r2, r2, #1
   2e262:	5ad3      	ldrh	r3, [r2, r3]
   2e264:	1dba      	adds	r2, r7, #6
   2e266:	8812      	ldrh	r2, [r2, #0]
   2e268:	429a      	cmp	r2, r3
   2e26a:	d00c      	beq.n	2e286 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2e26c:	230e      	movs	r3, #14
   2e26e:	18fb      	adds	r3, r7, r3
   2e270:	881a      	ldrh	r2, [r3, #0]
   2e272:	230e      	movs	r3, #14
   2e274:	18fb      	adds	r3, r7, r3
   2e276:	3201      	adds	r2, #1
   2e278:	801a      	strh	r2, [r3, #0]
   2e27a:	230e      	movs	r3, #14
   2e27c:	18fb      	adds	r3, r7, r3
   2e27e:	881b      	ldrh	r3, [r3, #0]
   2e280:	2b7f      	cmp	r3, #127	; 0x7f
   2e282:	d9e9      	bls.n	2e258 <ff_convert+0x54>
   2e284:	e000      	b.n	2e288 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2e286:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2e288:	230e      	movs	r3, #14
   2e28a:	18fb      	adds	r3, r7, r3
   2e28c:	881b      	ldrh	r3, [r3, #0]
   2e28e:	3380      	adds	r3, #128	; 0x80
   2e290:	b29a      	uxth	r2, r3
   2e292:	230e      	movs	r3, #14
   2e294:	18fb      	adds	r3, r7, r3
   2e296:	21ff      	movs	r1, #255	; 0xff
   2e298:	400a      	ands	r2, r1
   2e29a:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2e29c:	230e      	movs	r3, #14
   2e29e:	18fb      	adds	r3, r7, r3
   2e2a0:	881b      	ldrh	r3, [r3, #0]
}
   2e2a2:	0018      	movs	r0, r3
   2e2a4:	46bd      	mov	sp, r7
   2e2a6:	b004      	add	sp, #16
   2e2a8:	bd80      	pop	{r7, pc}
   2e2aa:	46c0      	nop			; (mov r8, r8)
   2e2ac:	00039404 	.word	0x00039404

0002e2b0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2e2b0:	b580      	push	{r7, lr}
   2e2b2:	b084      	sub	sp, #16
   2e2b4:	af00      	add	r7, sp, #0
   2e2b6:	0002      	movs	r2, r0
   2e2b8:	1dbb      	adds	r3, r7, #6
   2e2ba:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2e2bc:	2300      	movs	r3, #0
   2e2be:	60fb      	str	r3, [r7, #12]
   2e2c0:	e002      	b.n	2e2c8 <ff_wtoupper+0x18>
   2e2c2:	68fb      	ldr	r3, [r7, #12]
   2e2c4:	3301      	adds	r3, #1
   2e2c6:	60fb      	str	r3, [r7, #12]
   2e2c8:	4b0f      	ldr	r3, [pc, #60]	; (2e308 <ff_wtoupper+0x58>)
   2e2ca:	68fa      	ldr	r2, [r7, #12]
   2e2cc:	0052      	lsls	r2, r2, #1
   2e2ce:	5ad3      	ldrh	r3, [r2, r3]
   2e2d0:	2b00      	cmp	r3, #0
   2e2d2:	d007      	beq.n	2e2e4 <ff_wtoupper+0x34>
   2e2d4:	4b0c      	ldr	r3, [pc, #48]	; (2e308 <ff_wtoupper+0x58>)
   2e2d6:	68fa      	ldr	r2, [r7, #12]
   2e2d8:	0052      	lsls	r2, r2, #1
   2e2da:	5ad3      	ldrh	r3, [r2, r3]
   2e2dc:	1dba      	adds	r2, r7, #6
   2e2de:	8812      	ldrh	r2, [r2, #0]
   2e2e0:	429a      	cmp	r2, r3
   2e2e2:	d1ee      	bne.n	2e2c2 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2e2e4:	4b08      	ldr	r3, [pc, #32]	; (2e308 <ff_wtoupper+0x58>)
   2e2e6:	68fa      	ldr	r2, [r7, #12]
   2e2e8:	0052      	lsls	r2, r2, #1
   2e2ea:	5ad3      	ldrh	r3, [r2, r3]
   2e2ec:	2b00      	cmp	r3, #0
   2e2ee:	d004      	beq.n	2e2fa <ff_wtoupper+0x4a>
   2e2f0:	4b06      	ldr	r3, [pc, #24]	; (2e30c <ff_wtoupper+0x5c>)
   2e2f2:	68fa      	ldr	r2, [r7, #12]
   2e2f4:	0052      	lsls	r2, r2, #1
   2e2f6:	5ad3      	ldrh	r3, [r2, r3]
   2e2f8:	e001      	b.n	2e2fe <ff_wtoupper+0x4e>
   2e2fa:	1dbb      	adds	r3, r7, #6
   2e2fc:	881b      	ldrh	r3, [r3, #0]
}
   2e2fe:	0018      	movs	r0, r3
   2e300:	46bd      	mov	sp, r7
   2e302:	b004      	add	sp, #16
   2e304:	bd80      	pop	{r7, pc}
   2e306:	46c0      	nop			; (mov r8, r8)
   2e308:	00039504 	.word	0x00039504
   2e30c:	000396e4 	.word	0x000396e4

0002e310 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2e310:	b580      	push	{r7, lr}
   2e312:	b084      	sub	sp, #16
   2e314:	af00      	add	r7, sp, #0
   2e316:	60f8      	str	r0, [r7, #12]
   2e318:	60b9      	str	r1, [r7, #8]
   2e31a:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2e31c:	68fb      	ldr	r3, [r7, #12]
   2e31e:	68ba      	ldr	r2, [r7, #8]
   2e320:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2e322:	68fb      	ldr	r3, [r7, #12]
   2e324:	687a      	ldr	r2, [r7, #4]
   2e326:	601a      	str	r2, [r3, #0]
}
   2e328:	46c0      	nop			; (mov r8, r8)
   2e32a:	46bd      	mov	sp, r7
   2e32c:	b004      	add	sp, #16
   2e32e:	bd80      	pop	{r7, pc}

0002e330 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2e330:	b580      	push	{r7, lr}
   2e332:	b082      	sub	sp, #8
   2e334:	af00      	add	r7, sp, #0
   2e336:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2e338:	687b      	ldr	r3, [r7, #4]
   2e33a:	681b      	ldr	r3, [r3, #0]
   2e33c:	4a07      	ldr	r2, [pc, #28]	; (2e35c <getNextPacketId+0x2c>)
   2e33e:	4293      	cmp	r3, r2
   2e340:	d003      	beq.n	2e34a <getNextPacketId+0x1a>
   2e342:	687b      	ldr	r3, [r7, #4]
   2e344:	681b      	ldr	r3, [r3, #0]
   2e346:	1c5a      	adds	r2, r3, #1
   2e348:	e000      	b.n	2e34c <getNextPacketId+0x1c>
   2e34a:	2201      	movs	r2, #1
   2e34c:	687b      	ldr	r3, [r7, #4]
   2e34e:	601a      	str	r2, [r3, #0]
   2e350:	687b      	ldr	r3, [r7, #4]
   2e352:	681b      	ldr	r3, [r3, #0]
}
   2e354:	0018      	movs	r0, r3
   2e356:	46bd      	mov	sp, r7
   2e358:	b002      	add	sp, #8
   2e35a:	bd80      	pop	{r7, pc}
   2e35c:	0000ffff 	.word	0x0000ffff

0002e360 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2e360:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e362:	b087      	sub	sp, #28
   2e364:	af00      	add	r7, sp, #0
   2e366:	60f8      	str	r0, [r7, #12]
   2e368:	60b9      	str	r1, [r7, #8]
   2e36a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2e36c:	2301      	movs	r3, #1
   2e36e:	425b      	negs	r3, r3
   2e370:	617b      	str	r3, [r7, #20]
        sent = 0;
   2e372:	2300      	movs	r3, #0
   2e374:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2e376:	e01a      	b.n	2e3ae <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2e378:	68fb      	ldr	r3, [r7, #12]
   2e37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e37c:	68dc      	ldr	r4, [r3, #12]
   2e37e:	68fb      	ldr	r3, [r7, #12]
   2e380:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e382:	68fb      	ldr	r3, [r7, #12]
   2e384:	691a      	ldr	r2, [r3, #16]
   2e386:	693b      	ldr	r3, [r7, #16]
   2e388:	18d6      	adds	r6, r2, r3
   2e38a:	687b      	ldr	r3, [r7, #4]
   2e38c:	0018      	movs	r0, r3
   2e38e:	4b1a      	ldr	r3, [pc, #104]	; (2e3f8 <sendPacket+0x98>)
   2e390:	4798      	blx	r3
   2e392:	0003      	movs	r3, r0
   2e394:	68ba      	ldr	r2, [r7, #8]
   2e396:	0031      	movs	r1, r6
   2e398:	0028      	movs	r0, r5
   2e39a:	47a0      	blx	r4
   2e39c:	0003      	movs	r3, r0
   2e39e:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2e3a0:	697b      	ldr	r3, [r7, #20]
   2e3a2:	2b00      	cmp	r3, #0
   2e3a4:	db0e      	blt.n	2e3c4 <sendPacket+0x64>
            break;
        sent += rc;
   2e3a6:	693a      	ldr	r2, [r7, #16]
   2e3a8:	697b      	ldr	r3, [r7, #20]
   2e3aa:	18d3      	adds	r3, r2, r3
   2e3ac:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2e3ae:	693a      	ldr	r2, [r7, #16]
   2e3b0:	68bb      	ldr	r3, [r7, #8]
   2e3b2:	429a      	cmp	r2, r3
   2e3b4:	da07      	bge.n	2e3c6 <sendPacket+0x66>
   2e3b6:	687b      	ldr	r3, [r7, #4]
   2e3b8:	0018      	movs	r0, r3
   2e3ba:	4b10      	ldr	r3, [pc, #64]	; (2e3fc <sendPacket+0x9c>)
   2e3bc:	4798      	blx	r3
   2e3be:	1e03      	subs	r3, r0, #0
   2e3c0:	d0da      	beq.n	2e378 <sendPacket+0x18>
   2e3c2:	e000      	b.n	2e3c6 <sendPacket+0x66>
            break;
   2e3c4:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2e3c6:	693a      	ldr	r2, [r7, #16]
   2e3c8:	68bb      	ldr	r3, [r7, #8]
   2e3ca:	429a      	cmp	r2, r3
   2e3cc:	d10b      	bne.n	2e3e6 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2e3ce:	68fb      	ldr	r3, [r7, #12]
   2e3d0:	3354      	adds	r3, #84	; 0x54
   2e3d2:	001a      	movs	r2, r3
   2e3d4:	68fb      	ldr	r3, [r7, #12]
   2e3d6:	699b      	ldr	r3, [r3, #24]
   2e3d8:	0019      	movs	r1, r3
   2e3da:	0010      	movs	r0, r2
   2e3dc:	4b08      	ldr	r3, [pc, #32]	; (2e400 <sendPacket+0xa0>)
   2e3de:	4798      	blx	r3
        rc = SUCCESS;
   2e3e0:	2300      	movs	r3, #0
   2e3e2:	617b      	str	r3, [r7, #20]
   2e3e4:	e002      	b.n	2e3ec <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2e3e6:	2301      	movs	r3, #1
   2e3e8:	425b      	negs	r3, r3
   2e3ea:	617b      	str	r3, [r7, #20]
    return rc;
   2e3ec:	697b      	ldr	r3, [r7, #20]
}
   2e3ee:	0018      	movs	r0, r3
   2e3f0:	46bd      	mov	sp, r7
   2e3f2:	b007      	add	sp, #28
   2e3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e3f6:	46c0      	nop			; (mov r8, r8)
   2e3f8:	0002f1c1 	.word	0x0002f1c1
   2e3fc:	0002f145 	.word	0x0002f145
   2e400:	0002f199 	.word	0x0002f199

0002e404 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2e404:	b580      	push	{r7, lr}
   2e406:	b086      	sub	sp, #24
   2e408:	af00      	add	r7, sp, #0
   2e40a:	60f8      	str	r0, [r7, #12]
   2e40c:	60b9      	str	r1, [r7, #8]
   2e40e:	607a      	str	r2, [r7, #4]
   2e410:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2e412:	68fb      	ldr	r3, [r7, #12]
   2e414:	68ba      	ldr	r2, [r7, #8]
   2e416:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e418:	2300      	movs	r3, #0
   2e41a:	617b      	str	r3, [r7, #20]
   2e41c:	e00a      	b.n	2e434 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2e41e:	68fa      	ldr	r2, [r7, #12]
   2e420:	697b      	ldr	r3, [r7, #20]
   2e422:	3304      	adds	r3, #4
   2e424:	00db      	lsls	r3, r3, #3
   2e426:	18d3      	adds	r3, r2, r3
   2e428:	3304      	adds	r3, #4
   2e42a:	2200      	movs	r2, #0
   2e42c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e42e:	697b      	ldr	r3, [r7, #20]
   2e430:	3301      	adds	r3, #1
   2e432:	617b      	str	r3, [r7, #20]
   2e434:	697b      	ldr	r3, [r7, #20]
   2e436:	2b04      	cmp	r3, #4
   2e438:	ddf1      	ble.n	2e41e <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2e43a:	68fb      	ldr	r3, [r7, #12]
   2e43c:	687a      	ldr	r2, [r7, #4]
   2e43e:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2e440:	68fb      	ldr	r3, [r7, #12]
   2e442:	683a      	ldr	r2, [r7, #0]
   2e444:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2e446:	68fb      	ldr	r3, [r7, #12]
   2e448:	6a3a      	ldr	r2, [r7, #32]
   2e44a:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2e44c:	68fb      	ldr	r3, [r7, #12]
   2e44e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e450:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2e452:	68fb      	ldr	r3, [r7, #12]
   2e454:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e456:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2e458:	68fb      	ldr	r3, [r7, #12]
   2e45a:	2200      	movs	r2, #0
   2e45c:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2e45e:	68fb      	ldr	r3, [r7, #12]
   2e460:	2200      	movs	r2, #0
   2e462:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2e464:	68fb      	ldr	r3, [r7, #12]
   2e466:	2200      	movs	r2, #0
   2e468:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2e46a:	68fb      	ldr	r3, [r7, #12]
   2e46c:	2201      	movs	r2, #1
   2e46e:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2e470:	68fb      	ldr	r3, [r7, #12]
   2e472:	3354      	adds	r3, #84	; 0x54
   2e474:	0018      	movs	r0, r3
   2e476:	4b03      	ldr	r3, [pc, #12]	; (2e484 <MQTTClientInit+0x80>)
   2e478:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2e47a:	46c0      	nop			; (mov r8, r8)
   2e47c:	46bd      	mov	sp, r7
   2e47e:	b006      	add	sp, #24
   2e480:	bd80      	pop	{r7, pc}
   2e482:	46c0      	nop			; (mov r8, r8)
   2e484:	0002f1e9 	.word	0x0002f1e9

0002e488 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2e488:	b590      	push	{r4, r7, lr}
   2e48a:	b08b      	sub	sp, #44	; 0x2c
   2e48c:	af00      	add	r7, sp, #0
   2e48e:	60f8      	str	r0, [r7, #12]
   2e490:	60b9      	str	r1, [r7, #8]
   2e492:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2e494:	2301      	movs	r3, #1
   2e496:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2e498:	2300      	movs	r3, #0
   2e49a:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2e49c:	2304      	movs	r3, #4
   2e49e:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2e4a0:	68bb      	ldr	r3, [r7, #8]
   2e4a2:	2200      	movs	r2, #0
   2e4a4:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2e4a6:	2301      	movs	r3, #1
   2e4a8:	425b      	negs	r3, r3
   2e4aa:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2e4ac:	6a3b      	ldr	r3, [r7, #32]
   2e4ae:	3301      	adds	r3, #1
   2e4b0:	623b      	str	r3, [r7, #32]
   2e4b2:	6a3a      	ldr	r2, [r7, #32]
   2e4b4:	69fb      	ldr	r3, [r7, #28]
   2e4b6:	429a      	cmp	r2, r3
   2e4b8:	dd03      	ble.n	2e4c2 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2e4ba:	2301      	movs	r3, #1
   2e4bc:	425b      	negs	r3, r3
   2e4be:	61bb      	str	r3, [r7, #24]
            goto exit;
   2e4c0:	e026      	b.n	2e510 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2e4c2:	68fb      	ldr	r3, [r7, #12]
   2e4c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e4c6:	689c      	ldr	r4, [r3, #8]
   2e4c8:	68fb      	ldr	r3, [r7, #12]
   2e4ca:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2e4cc:	687b      	ldr	r3, [r7, #4]
   2e4ce:	2217      	movs	r2, #23
   2e4d0:	18b9      	adds	r1, r7, r2
   2e4d2:	2201      	movs	r2, #1
   2e4d4:	47a0      	blx	r4
   2e4d6:	0003      	movs	r3, r0
   2e4d8:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2e4da:	69bb      	ldr	r3, [r7, #24]
   2e4dc:	2b01      	cmp	r3, #1
   2e4de:	d116      	bne.n	2e50e <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2e4e0:	68bb      	ldr	r3, [r7, #8]
   2e4e2:	681a      	ldr	r2, [r3, #0]
   2e4e4:	2317      	movs	r3, #23
   2e4e6:	18fb      	adds	r3, r7, r3
   2e4e8:	781b      	ldrb	r3, [r3, #0]
   2e4ea:	0019      	movs	r1, r3
   2e4ec:	237f      	movs	r3, #127	; 0x7f
   2e4ee:	400b      	ands	r3, r1
   2e4f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2e4f2:	434b      	muls	r3, r1
   2e4f4:	18d2      	adds	r2, r2, r3
   2e4f6:	68bb      	ldr	r3, [r7, #8]
   2e4f8:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e4fc:	01db      	lsls	r3, r3, #7
   2e4fe:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2e500:	2317      	movs	r3, #23
   2e502:	18fb      	adds	r3, r7, r3
   2e504:	781b      	ldrb	r3, [r3, #0]
   2e506:	b25b      	sxtb	r3, r3
   2e508:	2b00      	cmp	r3, #0
   2e50a:	dbcc      	blt.n	2e4a6 <decodePacket+0x1e>
   2e50c:	e000      	b.n	2e510 <decodePacket+0x88>
            goto exit;
   2e50e:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2e510:	6a3b      	ldr	r3, [r7, #32]
}
   2e512:	0018      	movs	r0, r3
   2e514:	46bd      	mov	sp, r7
   2e516:	b00b      	add	sp, #44	; 0x2c
   2e518:	bd90      	pop	{r4, r7, pc}
	...

0002e51c <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2e51c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e51e:	46c6      	mov	lr, r8
   2e520:	b500      	push	{lr}
   2e522:	b086      	sub	sp, #24
   2e524:	af00      	add	r7, sp, #0
   2e526:	6078      	str	r0, [r7, #4]
   2e528:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2e52a:	2301      	movs	r3, #1
   2e52c:	425b      	negs	r3, r3
   2e52e:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2e530:	2300      	movs	r3, #0
   2e532:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2e534:	2300      	movs	r3, #0
   2e536:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2e538:	2300      	movs	r3, #0
   2e53a:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2e53c:	687b      	ldr	r3, [r7, #4]
   2e53e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e540:	689c      	ldr	r4, [r3, #8]
   2e542:	687b      	ldr	r3, [r7, #4]
   2e544:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e546:	687b      	ldr	r3, [r7, #4]
   2e548:	695e      	ldr	r6, [r3, #20]
   2e54a:	683b      	ldr	r3, [r7, #0]
   2e54c:	0018      	movs	r0, r3
   2e54e:	4b2b      	ldr	r3, [pc, #172]	; (2e5fc <readPacket+0xe0>)
   2e550:	4798      	blx	r3
   2e552:	0003      	movs	r3, r0
   2e554:	2201      	movs	r2, #1
   2e556:	0031      	movs	r1, r6
   2e558:	0028      	movs	r0, r5
   2e55a:	47a0      	blx	r4
   2e55c:	0003      	movs	r3, r0
   2e55e:	2b01      	cmp	r3, #1
   2e560:	d141      	bne.n	2e5e6 <readPacket+0xca>
        goto exit;

    len = 1;
   2e562:	2301      	movs	r3, #1
   2e564:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2e566:	683b      	ldr	r3, [r7, #0]
   2e568:	0018      	movs	r0, r3
   2e56a:	4b24      	ldr	r3, [pc, #144]	; (2e5fc <readPacket+0xe0>)
   2e56c:	4798      	blx	r3
   2e56e:	0002      	movs	r2, r0
   2e570:	2308      	movs	r3, #8
   2e572:	18f9      	adds	r1, r7, r3
   2e574:	687b      	ldr	r3, [r7, #4]
   2e576:	0018      	movs	r0, r3
   2e578:	4b21      	ldr	r3, [pc, #132]	; (2e600 <readPacket+0xe4>)
   2e57a:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2e57c:	687b      	ldr	r3, [r7, #4]
   2e57e:	695b      	ldr	r3, [r3, #20]
   2e580:	3301      	adds	r3, #1
   2e582:	68ba      	ldr	r2, [r7, #8]
   2e584:	0011      	movs	r1, r2
   2e586:	0018      	movs	r0, r3
   2e588:	4b1e      	ldr	r3, [pc, #120]	; (2e604 <readPacket+0xe8>)
   2e58a:	4798      	blx	r3
   2e58c:	0002      	movs	r2, r0
   2e58e:	693b      	ldr	r3, [r7, #16]
   2e590:	189b      	adds	r3, r3, r2
   2e592:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2e594:	68bb      	ldr	r3, [r7, #8]
   2e596:	2b00      	cmp	r3, #0
   2e598:	dd17      	ble.n	2e5ca <readPacket+0xae>
   2e59a:	687b      	ldr	r3, [r7, #4]
   2e59c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e59e:	689c      	ldr	r4, [r3, #8]
   2e5a0:	687b      	ldr	r3, [r7, #4]
   2e5a2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e5a4:	687b      	ldr	r3, [r7, #4]
   2e5a6:	695a      	ldr	r2, [r3, #20]
   2e5a8:	693b      	ldr	r3, [r7, #16]
   2e5aa:	18d6      	adds	r6, r2, r3
   2e5ac:	68bb      	ldr	r3, [r7, #8]
   2e5ae:	4698      	mov	r8, r3
   2e5b0:	683b      	ldr	r3, [r7, #0]
   2e5b2:	0018      	movs	r0, r3
   2e5b4:	4b11      	ldr	r3, [pc, #68]	; (2e5fc <readPacket+0xe0>)
   2e5b6:	4798      	blx	r3
   2e5b8:	0003      	movs	r3, r0
   2e5ba:	4642      	mov	r2, r8
   2e5bc:	0031      	movs	r1, r6
   2e5be:	0028      	movs	r0, r5
   2e5c0:	47a0      	blx	r4
   2e5c2:	0002      	movs	r2, r0
   2e5c4:	68bb      	ldr	r3, [r7, #8]
   2e5c6:	429a      	cmp	r2, r3
   2e5c8:	d10f      	bne.n	2e5ea <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2e5ca:	687b      	ldr	r3, [r7, #4]
   2e5cc:	695b      	ldr	r3, [r3, #20]
   2e5ce:	781a      	ldrb	r2, [r3, #0]
   2e5d0:	230c      	movs	r3, #12
   2e5d2:	18fb      	adds	r3, r7, r3
   2e5d4:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2e5d6:	230c      	movs	r3, #12
   2e5d8:	18fb      	adds	r3, r7, r3
   2e5da:	781b      	ldrb	r3, [r3, #0]
   2e5dc:	061b      	lsls	r3, r3, #24
   2e5de:	0f1b      	lsrs	r3, r3, #28
   2e5e0:	b2db      	uxtb	r3, r3
   2e5e2:	617b      	str	r3, [r7, #20]
   2e5e4:	e002      	b.n	2e5ec <readPacket+0xd0>
        goto exit;
   2e5e6:	46c0      	nop			; (mov r8, r8)
   2e5e8:	e000      	b.n	2e5ec <readPacket+0xd0>
        goto exit;
   2e5ea:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2e5ec:	697b      	ldr	r3, [r7, #20]
}
   2e5ee:	0018      	movs	r0, r3
   2e5f0:	46bd      	mov	sp, r7
   2e5f2:	b006      	add	sp, #24
   2e5f4:	bc04      	pop	{r2}
   2e5f6:	4690      	mov	r8, r2
   2e5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e5fa:	46c0      	nop			; (mov r8, r8)
   2e5fc:	0002f1c1 	.word	0x0002f1c1
   2e600:	0002e489 	.word	0x0002e489
   2e604:	0002ff99 	.word	0x0002ff99

0002e608 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2e608:	b580      	push	{r7, lr}
   2e60a:	b086      	sub	sp, #24
   2e60c:	af00      	add	r7, sp, #0
   2e60e:	6078      	str	r0, [r7, #4]
   2e610:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2e612:	687b      	ldr	r3, [r7, #4]
   2e614:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2e616:	683b      	ldr	r3, [r7, #0]
   2e618:	689b      	ldr	r3, [r3, #8]
   2e61a:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2e61c:	683b      	ldr	r3, [r7, #0]
   2e61e:	685b      	ldr	r3, [r3, #4]
   2e620:	001a      	movs	r2, r3
   2e622:	693b      	ldr	r3, [r7, #16]
   2e624:	189b      	adds	r3, r3, r2
   2e626:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2e628:	e039      	b.n	2e69e <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2e62a:	693b      	ldr	r3, [r7, #16]
   2e62c:	781b      	ldrb	r3, [r3, #0]
   2e62e:	2b2f      	cmp	r3, #47	; 0x2f
   2e630:	d103      	bne.n	2e63a <isTopicMatched+0x32>
   2e632:	697b      	ldr	r3, [r7, #20]
   2e634:	781b      	ldrb	r3, [r3, #0]
   2e636:	2b2f      	cmp	r3, #47	; 0x2f
   2e638:	d13a      	bne.n	2e6b0 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2e63a:	697b      	ldr	r3, [r7, #20]
   2e63c:	781b      	ldrb	r3, [r3, #0]
   2e63e:	2b2b      	cmp	r3, #43	; 0x2b
   2e640:	d009      	beq.n	2e656 <isTopicMatched+0x4e>
   2e642:	697b      	ldr	r3, [r7, #20]
   2e644:	781b      	ldrb	r3, [r3, #0]
   2e646:	2b23      	cmp	r3, #35	; 0x23
   2e648:	d005      	beq.n	2e656 <isTopicMatched+0x4e>
   2e64a:	697b      	ldr	r3, [r7, #20]
   2e64c:	781a      	ldrb	r2, [r3, #0]
   2e64e:	693b      	ldr	r3, [r7, #16]
   2e650:	781b      	ldrb	r3, [r3, #0]
   2e652:	429a      	cmp	r2, r3
   2e654:	d12e      	bne.n	2e6b4 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2e656:	697b      	ldr	r3, [r7, #20]
   2e658:	781b      	ldrb	r3, [r3, #0]
   2e65a:	2b2b      	cmp	r3, #43	; 0x2b
   2e65c:	d112      	bne.n	2e684 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2e65e:	693b      	ldr	r3, [r7, #16]
   2e660:	3301      	adds	r3, #1
   2e662:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e664:	e005      	b.n	2e672 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2e666:	693b      	ldr	r3, [r7, #16]
   2e668:	3301      	adds	r3, #1
   2e66a:	613b      	str	r3, [r7, #16]
   2e66c:	693b      	ldr	r3, [r7, #16]
   2e66e:	3301      	adds	r3, #1
   2e670:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e672:	68fa      	ldr	r2, [r7, #12]
   2e674:	68bb      	ldr	r3, [r7, #8]
   2e676:	429a      	cmp	r2, r3
   2e678:	d20b      	bcs.n	2e692 <isTopicMatched+0x8a>
   2e67a:	68fb      	ldr	r3, [r7, #12]
   2e67c:	781b      	ldrb	r3, [r3, #0]
   2e67e:	2b2f      	cmp	r3, #47	; 0x2f
   2e680:	d1f1      	bne.n	2e666 <isTopicMatched+0x5e>
   2e682:	e006      	b.n	2e692 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2e684:	697b      	ldr	r3, [r7, #20]
   2e686:	781b      	ldrb	r3, [r3, #0]
   2e688:	2b23      	cmp	r3, #35	; 0x23
   2e68a:	d102      	bne.n	2e692 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2e68c:	68bb      	ldr	r3, [r7, #8]
   2e68e:	3b01      	subs	r3, #1
   2e690:	613b      	str	r3, [r7, #16]
        curf++;
   2e692:	697b      	ldr	r3, [r7, #20]
   2e694:	3301      	adds	r3, #1
   2e696:	617b      	str	r3, [r7, #20]
        curn++;
   2e698:	693b      	ldr	r3, [r7, #16]
   2e69a:	3301      	adds	r3, #1
   2e69c:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2e69e:	697b      	ldr	r3, [r7, #20]
   2e6a0:	781b      	ldrb	r3, [r3, #0]
   2e6a2:	2b00      	cmp	r3, #0
   2e6a4:	d007      	beq.n	2e6b6 <isTopicMatched+0xae>
   2e6a6:	693a      	ldr	r2, [r7, #16]
   2e6a8:	68bb      	ldr	r3, [r7, #8]
   2e6aa:	429a      	cmp	r2, r3
   2e6ac:	d3bd      	bcc.n	2e62a <isTopicMatched+0x22>
   2e6ae:	e002      	b.n	2e6b6 <isTopicMatched+0xae>
            break;
   2e6b0:	46c0      	nop			; (mov r8, r8)
   2e6b2:	e000      	b.n	2e6b6 <isTopicMatched+0xae>
            break;
   2e6b4:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2e6b6:	693a      	ldr	r2, [r7, #16]
   2e6b8:	68bb      	ldr	r3, [r7, #8]
   2e6ba:	429a      	cmp	r2, r3
   2e6bc:	d105      	bne.n	2e6ca <isTopicMatched+0xc2>
   2e6be:	697b      	ldr	r3, [r7, #20]
   2e6c0:	781b      	ldrb	r3, [r3, #0]
   2e6c2:	2b00      	cmp	r3, #0
   2e6c4:	d101      	bne.n	2e6ca <isTopicMatched+0xc2>
   2e6c6:	2301      	movs	r3, #1
   2e6c8:	e000      	b.n	2e6cc <isTopicMatched+0xc4>
   2e6ca:	2300      	movs	r3, #0
   2e6cc:	b2db      	uxtb	r3, r3
}
   2e6ce:	0018      	movs	r0, r3
   2e6d0:	46bd      	mov	sp, r7
   2e6d2:	b006      	add	sp, #24
   2e6d4:	bd80      	pop	{r7, pc}
	...

0002e6d8 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2e6d8:	b580      	push	{r7, lr}
   2e6da:	b08a      	sub	sp, #40	; 0x28
   2e6dc:	af00      	add	r7, sp, #0
   2e6de:	60f8      	str	r0, [r7, #12]
   2e6e0:	60b9      	str	r1, [r7, #8]
   2e6e2:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2e6e4:	2301      	movs	r3, #1
   2e6e6:	425b      	negs	r3, r3
   2e6e8:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e6ea:	2300      	movs	r3, #0
   2e6ec:	627b      	str	r3, [r7, #36]	; 0x24
   2e6ee:	e044      	b.n	2e77a <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e6f0:	68fa      	ldr	r2, [r7, #12]
   2e6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e6f4:	3304      	adds	r3, #4
   2e6f6:	00db      	lsls	r3, r3, #3
   2e6f8:	18d3      	adds	r3, r2, r3
   2e6fa:	3304      	adds	r3, #4
   2e6fc:	681b      	ldr	r3, [r3, #0]
   2e6fe:	2b00      	cmp	r3, #0
   2e700:	d038      	beq.n	2e774 <deliverMessage+0x9c>
   2e702:	68fa      	ldr	r2, [r7, #12]
   2e704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e706:	3304      	adds	r3, #4
   2e708:	00db      	lsls	r3, r3, #3
   2e70a:	18d3      	adds	r3, r2, r3
   2e70c:	3304      	adds	r3, #4
   2e70e:	681a      	ldr	r2, [r3, #0]
   2e710:	68bb      	ldr	r3, [r7, #8]
   2e712:	0011      	movs	r1, r2
   2e714:	0018      	movs	r0, r3
   2e716:	4b28      	ldr	r3, [pc, #160]	; (2e7b8 <deliverMessage+0xe0>)
   2e718:	4798      	blx	r3
   2e71a:	1e03      	subs	r3, r0, #0
   2e71c:	d10d      	bne.n	2e73a <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2e71e:	68fa      	ldr	r2, [r7, #12]
   2e720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e722:	3304      	adds	r3, #4
   2e724:	00db      	lsls	r3, r3, #3
   2e726:	18d3      	adds	r3, r2, r3
   2e728:	3304      	adds	r3, #4
   2e72a:	681b      	ldr	r3, [r3, #0]
   2e72c:	68ba      	ldr	r2, [r7, #8]
   2e72e:	0011      	movs	r1, r2
   2e730:	0018      	movs	r0, r3
   2e732:	4b22      	ldr	r3, [pc, #136]	; (2e7bc <deliverMessage+0xe4>)
   2e734:	4798      	blx	r3
   2e736:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e738:	d01c      	beq.n	2e774 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2e73a:	68fa      	ldr	r2, [r7, #12]
   2e73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e73e:	3304      	adds	r3, #4
   2e740:	00db      	lsls	r3, r3, #3
   2e742:	18d3      	adds	r3, r2, r3
   2e744:	3308      	adds	r3, #8
   2e746:	681b      	ldr	r3, [r3, #0]
   2e748:	2b00      	cmp	r3, #0
   2e74a:	d013      	beq.n	2e774 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2e74c:	687a      	ldr	r2, [r7, #4]
   2e74e:	68b9      	ldr	r1, [r7, #8]
   2e750:	2318      	movs	r3, #24
   2e752:	18fb      	adds	r3, r7, r3
   2e754:	0018      	movs	r0, r3
   2e756:	4b1a      	ldr	r3, [pc, #104]	; (2e7c0 <deliverMessage+0xe8>)
   2e758:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2e75a:	68fa      	ldr	r2, [r7, #12]
   2e75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e75e:	3304      	adds	r3, #4
   2e760:	00db      	lsls	r3, r3, #3
   2e762:	18d3      	adds	r3, r2, r3
   2e764:	3308      	adds	r3, #8
   2e766:	681b      	ldr	r3, [r3, #0]
   2e768:	2218      	movs	r2, #24
   2e76a:	18ba      	adds	r2, r7, r2
   2e76c:	0010      	movs	r0, r2
   2e76e:	4798      	blx	r3
                rc = SUCCESS;
   2e770:	2300      	movs	r3, #0
   2e772:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e776:	3301      	adds	r3, #1
   2e778:	627b      	str	r3, [r7, #36]	; 0x24
   2e77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e77c:	2b04      	cmp	r3, #4
   2e77e:	ddb7      	ble.n	2e6f0 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2e780:	6a3b      	ldr	r3, [r7, #32]
   2e782:	3301      	adds	r3, #1
   2e784:	d112      	bne.n	2e7ac <deliverMessage+0xd4>
   2e786:	68fb      	ldr	r3, [r7, #12]
   2e788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e78a:	2b00      	cmp	r3, #0
   2e78c:	d00e      	beq.n	2e7ac <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2e78e:	687a      	ldr	r2, [r7, #4]
   2e790:	68b9      	ldr	r1, [r7, #8]
   2e792:	2310      	movs	r3, #16
   2e794:	18fb      	adds	r3, r7, r3
   2e796:	0018      	movs	r0, r3
   2e798:	4b09      	ldr	r3, [pc, #36]	; (2e7c0 <deliverMessage+0xe8>)
   2e79a:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2e79c:	68fb      	ldr	r3, [r7, #12]
   2e79e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e7a0:	2210      	movs	r2, #16
   2e7a2:	18ba      	adds	r2, r7, r2
   2e7a4:	0010      	movs	r0, r2
   2e7a6:	4798      	blx	r3
        rc = SUCCESS;
   2e7a8:	2300      	movs	r3, #0
   2e7aa:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2e7ac:	6a3b      	ldr	r3, [r7, #32]
}
   2e7ae:	0018      	movs	r0, r3
   2e7b0:	46bd      	mov	sp, r7
   2e7b2:	b00a      	add	sp, #40	; 0x28
   2e7b4:	bd80      	pop	{r7, pc}
   2e7b6:	46c0      	nop			; (mov r8, r8)
   2e7b8:	000303ad 	.word	0x000303ad
   2e7bc:	0002e609 	.word	0x0002e609
   2e7c0:	0002e311 	.word	0x0002e311

0002e7c4 <keepalive>:


int keepalive(MQTTClient* c)
{
   2e7c4:	b580      	push	{r7, lr}
   2e7c6:	b088      	sub	sp, #32
   2e7c8:	af00      	add	r7, sp, #0
   2e7ca:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2e7cc:	2301      	movs	r3, #1
   2e7ce:	425b      	negs	r3, r3
   2e7d0:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2e7d2:	687b      	ldr	r3, [r7, #4]
   2e7d4:	699b      	ldr	r3, [r3, #24]
   2e7d6:	2b00      	cmp	r3, #0
   2e7d8:	d102      	bne.n	2e7e0 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2e7da:	2300      	movs	r3, #0
   2e7dc:	61fb      	str	r3, [r7, #28]
        goto exit;
   2e7de:	e033      	b.n	2e848 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2e7e0:	687b      	ldr	r3, [r7, #4]
   2e7e2:	3354      	adds	r3, #84	; 0x54
   2e7e4:	0018      	movs	r0, r3
   2e7e6:	4b1b      	ldr	r3, [pc, #108]	; (2e854 <keepalive+0x90>)
   2e7e8:	4798      	blx	r3
   2e7ea:	1e03      	subs	r3, r0, #0
   2e7ec:	d02c      	beq.n	2e848 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2e7ee:	687b      	ldr	r3, [r7, #4]
   2e7f0:	7f1b      	ldrb	r3, [r3, #28]
   2e7f2:	2b00      	cmp	r3, #0
   2e7f4:	d128      	bne.n	2e848 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2e7f6:	230c      	movs	r3, #12
   2e7f8:	18fb      	adds	r3, r7, r3
   2e7fa:	0018      	movs	r0, r3
   2e7fc:	4b16      	ldr	r3, [pc, #88]	; (2e858 <keepalive+0x94>)
   2e7fe:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2e800:	23fa      	movs	r3, #250	; 0xfa
   2e802:	009a      	lsls	r2, r3, #2
   2e804:	230c      	movs	r3, #12
   2e806:	18fb      	adds	r3, r7, r3
   2e808:	0011      	movs	r1, r2
   2e80a:	0018      	movs	r0, r3
   2e80c:	4b13      	ldr	r3, [pc, #76]	; (2e85c <keepalive+0x98>)
   2e80e:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2e810:	687b      	ldr	r3, [r7, #4]
   2e812:	691a      	ldr	r2, [r3, #16]
   2e814:	687b      	ldr	r3, [r7, #4]
   2e816:	689b      	ldr	r3, [r3, #8]
   2e818:	0019      	movs	r1, r3
   2e81a:	0010      	movs	r0, r2
   2e81c:	4b10      	ldr	r3, [pc, #64]	; (2e860 <keepalive+0x9c>)
   2e81e:	4798      	blx	r3
   2e820:	0003      	movs	r3, r0
   2e822:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2e824:	69bb      	ldr	r3, [r7, #24]
   2e826:	2b00      	cmp	r3, #0
   2e828:	dd0e      	ble.n	2e848 <keepalive+0x84>
   2e82a:	230c      	movs	r3, #12
   2e82c:	18fa      	adds	r2, r7, r3
   2e82e:	69b9      	ldr	r1, [r7, #24]
   2e830:	687b      	ldr	r3, [r7, #4]
   2e832:	0018      	movs	r0, r3
   2e834:	4b0b      	ldr	r3, [pc, #44]	; (2e864 <keepalive+0xa0>)
   2e836:	4798      	blx	r3
   2e838:	0003      	movs	r3, r0
   2e83a:	61fb      	str	r3, [r7, #28]
   2e83c:	69fb      	ldr	r3, [r7, #28]
   2e83e:	2b00      	cmp	r3, #0
   2e840:	d102      	bne.n	2e848 <keepalive+0x84>
                c->ping_outstanding = 1;
   2e842:	687b      	ldr	r3, [r7, #4]
   2e844:	2201      	movs	r2, #1
   2e846:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2e848:	69fb      	ldr	r3, [r7, #28]
}
   2e84a:	0018      	movs	r0, r3
   2e84c:	46bd      	mov	sp, r7
   2e84e:	b008      	add	sp, #32
   2e850:	bd80      	pop	{r7, pc}
   2e852:	46c0      	nop			; (mov r8, r8)
   2e854:	0002f145 	.word	0x0002f145
   2e858:	0002f1e9 	.word	0x0002f1e9
   2e85c:	0002f171 	.word	0x0002f171
   2e860:	0002fdbd 	.word	0x0002fdbd
   2e864:	0002e361 	.word	0x0002e361

0002e868 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2e868:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e86a:	b095      	sub	sp, #84	; 0x54
   2e86c:	af06      	add	r7, sp, #24
   2e86e:	6078      	str	r0, [r7, #4]
   2e870:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2e872:	683a      	ldr	r2, [r7, #0]
   2e874:	687b      	ldr	r3, [r7, #4]
   2e876:	0011      	movs	r1, r2
   2e878:	0018      	movs	r0, r3
   2e87a:	4b70      	ldr	r3, [pc, #448]	; (2ea3c <cycle+0x1d4>)
   2e87c:	4798      	blx	r3
   2e87e:	0002      	movs	r2, r0
   2e880:	232e      	movs	r3, #46	; 0x2e
   2e882:	18fb      	adds	r3, r7, r3
   2e884:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2e886:	2300      	movs	r3, #0
   2e888:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2e88a:	2300      	movs	r3, #0
   2e88c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2e88e:	232e      	movs	r3, #46	; 0x2e
   2e890:	18fb      	adds	r3, r7, r3
   2e892:	881b      	ldrh	r3, [r3, #0]
   2e894:	2b0d      	cmp	r3, #13
   2e896:	d900      	bls.n	2e89a <cycle+0x32>
   2e898:	e0bd      	b.n	2ea16 <cycle+0x1ae>
   2e89a:	009a      	lsls	r2, r3, #2
   2e89c:	4b68      	ldr	r3, [pc, #416]	; (2ea40 <cycle+0x1d8>)
   2e89e:	18d3      	adds	r3, r2, r3
   2e8a0:	681b      	ldr	r3, [r3, #0]
   2e8a2:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e8a4:	687b      	ldr	r3, [r7, #4]
   2e8a6:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2e8a8:	687b      	ldr	r3, [r7, #4]
   2e8aa:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e8ac:	001e      	movs	r6, r3
   2e8ae:	2310      	movs	r3, #16
   2e8b0:	18fb      	adds	r3, r7, r3
   2e8b2:	1d1d      	adds	r5, r3, #4
   2e8b4:	2310      	movs	r3, #16
   2e8b6:	18fb      	adds	r3, r7, r3
   2e8b8:	1c5c      	adds	r4, r3, #1
   2e8ba:	230c      	movs	r3, #12
   2e8bc:	18f9      	adds	r1, r7, r3
   2e8be:	2310      	movs	r3, #16
   2e8c0:	18fb      	adds	r3, r7, r3
   2e8c2:	1c98      	adds	r0, r3, #2
   2e8c4:	9604      	str	r6, [sp, #16]
   2e8c6:	9203      	str	r2, [sp, #12]
   2e8c8:	2310      	movs	r3, #16
   2e8ca:	18fb      	adds	r3, r7, r3
   2e8cc:	330c      	adds	r3, #12
   2e8ce:	9302      	str	r3, [sp, #8]
   2e8d0:	2310      	movs	r3, #16
   2e8d2:	18fb      	adds	r3, r7, r3
   2e8d4:	3308      	adds	r3, #8
   2e8d6:	9301      	str	r3, [sp, #4]
   2e8d8:	2320      	movs	r3, #32
   2e8da:	18fb      	adds	r3, r7, r3
   2e8dc:	9300      	str	r3, [sp, #0]
   2e8de:	002b      	movs	r3, r5
   2e8e0:	0022      	movs	r2, r4
   2e8e2:	4c58      	ldr	r4, [pc, #352]	; (2ea44 <cycle+0x1dc>)
   2e8e4:	47a0      	blx	r4
   2e8e6:	0003      	movs	r3, r0
   2e8e8:	2b01      	cmp	r3, #1
   2e8ea:	d000      	beq.n	2e8ee <cycle+0x86>
   2e8ec:	e098      	b.n	2ea20 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2e8ee:	68fb      	ldr	r3, [r7, #12]
   2e8f0:	b2da      	uxtb	r2, r3
   2e8f2:	2310      	movs	r3, #16
   2e8f4:	18fb      	adds	r3, r7, r3
   2e8f6:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2e8f8:	2310      	movs	r3, #16
   2e8fa:	18fa      	adds	r2, r7, r3
   2e8fc:	2320      	movs	r3, #32
   2e8fe:	18f9      	adds	r1, r7, r3
   2e900:	687b      	ldr	r3, [r7, #4]
   2e902:	0018      	movs	r0, r3
   2e904:	4b50      	ldr	r3, [pc, #320]	; (2ea48 <cycle+0x1e0>)
   2e906:	4798      	blx	r3
            if (msg.qos != QOS0)
   2e908:	2310      	movs	r3, #16
   2e90a:	18fb      	adds	r3, r7, r3
   2e90c:	781b      	ldrb	r3, [r3, #0]
   2e90e:	2b00      	cmp	r3, #0
   2e910:	d100      	bne.n	2e914 <cycle+0xac>
   2e912:	e07d      	b.n	2ea10 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2e914:	2310      	movs	r3, #16
   2e916:	18fb      	adds	r3, r7, r3
   2e918:	781b      	ldrb	r3, [r3, #0]
   2e91a:	2b01      	cmp	r3, #1
   2e91c:	d10f      	bne.n	2e93e <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2e91e:	687b      	ldr	r3, [r7, #4]
   2e920:	6918      	ldr	r0, [r3, #16]
   2e922:	687b      	ldr	r3, [r7, #4]
   2e924:	689b      	ldr	r3, [r3, #8]
   2e926:	0019      	movs	r1, r3
   2e928:	2310      	movs	r3, #16
   2e92a:	18fb      	adds	r3, r7, r3
   2e92c:	889b      	ldrh	r3, [r3, #4]
   2e92e:	9300      	str	r3, [sp, #0]
   2e930:	2300      	movs	r3, #0
   2e932:	2204      	movs	r2, #4
   2e934:	4c45      	ldr	r4, [pc, #276]	; (2ea4c <cycle+0x1e4>)
   2e936:	47a0      	blx	r4
   2e938:	0003      	movs	r3, r0
   2e93a:	637b      	str	r3, [r7, #52]	; 0x34
   2e93c:	e013      	b.n	2e966 <cycle+0xfe>
                else if (msg.qos == QOS2)
   2e93e:	2310      	movs	r3, #16
   2e940:	18fb      	adds	r3, r7, r3
   2e942:	781b      	ldrb	r3, [r3, #0]
   2e944:	2b02      	cmp	r3, #2
   2e946:	d10e      	bne.n	2e966 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2e948:	687b      	ldr	r3, [r7, #4]
   2e94a:	6918      	ldr	r0, [r3, #16]
   2e94c:	687b      	ldr	r3, [r7, #4]
   2e94e:	689b      	ldr	r3, [r3, #8]
   2e950:	0019      	movs	r1, r3
   2e952:	2310      	movs	r3, #16
   2e954:	18fb      	adds	r3, r7, r3
   2e956:	889b      	ldrh	r3, [r3, #4]
   2e958:	9300      	str	r3, [sp, #0]
   2e95a:	2300      	movs	r3, #0
   2e95c:	2205      	movs	r2, #5
   2e95e:	4c3b      	ldr	r4, [pc, #236]	; (2ea4c <cycle+0x1e4>)
   2e960:	47a0      	blx	r4
   2e962:	0003      	movs	r3, r0
   2e964:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2e966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e968:	2b00      	cmp	r3, #0
   2e96a:	dc03      	bgt.n	2e974 <cycle+0x10c>
                    rc = FAILURE;
   2e96c:	2301      	movs	r3, #1
   2e96e:	425b      	negs	r3, r3
   2e970:	633b      	str	r3, [r7, #48]	; 0x30
   2e972:	e007      	b.n	2e984 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2e974:	683a      	ldr	r2, [r7, #0]
   2e976:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e978:	687b      	ldr	r3, [r7, #4]
   2e97a:	0018      	movs	r0, r3
   2e97c:	4b34      	ldr	r3, [pc, #208]	; (2ea50 <cycle+0x1e8>)
   2e97e:	4798      	blx	r3
   2e980:	0003      	movs	r3, r0
   2e982:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2e984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e986:	3301      	adds	r3, #1
   2e988:	d142      	bne.n	2ea10 <cycle+0x1a8>
                    goto exit; // there was a problem
   2e98a:	46c0      	nop			; (mov r8, r8)
   2e98c:	e049      	b.n	2ea22 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e98e:	687b      	ldr	r3, [r7, #4]
   2e990:	695c      	ldr	r4, [r3, #20]
   2e992:	687b      	ldr	r3, [r7, #4]
   2e994:	68db      	ldr	r3, [r3, #12]
   2e996:	220a      	movs	r2, #10
   2e998:	18ba      	adds	r2, r7, r2
   2e99a:	2109      	movs	r1, #9
   2e99c:	1879      	adds	r1, r7, r1
   2e99e:	2008      	movs	r0, #8
   2e9a0:	1838      	adds	r0, r7, r0
   2e9a2:	9300      	str	r3, [sp, #0]
   2e9a4:	0023      	movs	r3, r4
   2e9a6:	4c2b      	ldr	r4, [pc, #172]	; (2ea54 <cycle+0x1ec>)
   2e9a8:	47a0      	blx	r4
   2e9aa:	0003      	movs	r3, r0
   2e9ac:	2b01      	cmp	r3, #1
   2e9ae:	d003      	beq.n	2e9b8 <cycle+0x150>
                rc = FAILURE;
   2e9b0:	2301      	movs	r3, #1
   2e9b2:	425b      	negs	r3, r3
   2e9b4:	633b      	str	r3, [r7, #48]	; 0x30
   2e9b6:	e023      	b.n	2ea00 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2e9b8:	687b      	ldr	r3, [r7, #4]
   2e9ba:	6918      	ldr	r0, [r3, #16]
   2e9bc:	687b      	ldr	r3, [r7, #4]
   2e9be:	689b      	ldr	r3, [r3, #8]
   2e9c0:	0019      	movs	r1, r3
   2e9c2:	230a      	movs	r3, #10
   2e9c4:	18fb      	adds	r3, r7, r3
   2e9c6:	881b      	ldrh	r3, [r3, #0]
   2e9c8:	9300      	str	r3, [sp, #0]
   2e9ca:	2300      	movs	r3, #0
   2e9cc:	2206      	movs	r2, #6
   2e9ce:	4c1f      	ldr	r4, [pc, #124]	; (2ea4c <cycle+0x1e4>)
   2e9d0:	47a0      	blx	r4
   2e9d2:	0003      	movs	r3, r0
   2e9d4:	637b      	str	r3, [r7, #52]	; 0x34
   2e9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e9d8:	2b00      	cmp	r3, #0
   2e9da:	dc03      	bgt.n	2e9e4 <cycle+0x17c>
                rc = FAILURE;
   2e9dc:	2301      	movs	r3, #1
   2e9de:	425b      	negs	r3, r3
   2e9e0:	633b      	str	r3, [r7, #48]	; 0x30
   2e9e2:	e00d      	b.n	2ea00 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2e9e4:	683a      	ldr	r2, [r7, #0]
   2e9e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e9e8:	687b      	ldr	r3, [r7, #4]
   2e9ea:	0018      	movs	r0, r3
   2e9ec:	4b18      	ldr	r3, [pc, #96]	; (2ea50 <cycle+0x1e8>)
   2e9ee:	4798      	blx	r3
   2e9f0:	0003      	movs	r3, r0
   2e9f2:	633b      	str	r3, [r7, #48]	; 0x30
   2e9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e9f6:	2b00      	cmp	r3, #0
   2e9f8:	d002      	beq.n	2ea00 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2e9fa:	2301      	movs	r3, #1
   2e9fc:	425b      	negs	r3, r3
   2e9fe:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2ea00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ea02:	3301      	adds	r3, #1
   2ea04:	d106      	bne.n	2ea14 <cycle+0x1ac>
                goto exit; // there was a problem
   2ea06:	e00c      	b.n	2ea22 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2ea08:	687b      	ldr	r3, [r7, #4]
   2ea0a:	2200      	movs	r2, #0
   2ea0c:	771a      	strb	r2, [r3, #28]
            break;
   2ea0e:	e002      	b.n	2ea16 <cycle+0x1ae>
            break;
   2ea10:	46c0      	nop			; (mov r8, r8)
   2ea12:	e000      	b.n	2ea16 <cycle+0x1ae>
            break;
   2ea14:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2ea16:	687b      	ldr	r3, [r7, #4]
   2ea18:	0018      	movs	r0, r3
   2ea1a:	4b0f      	ldr	r3, [pc, #60]	; (2ea58 <cycle+0x1f0>)
   2ea1c:	4798      	blx	r3
   2ea1e:	e000      	b.n	2ea22 <cycle+0x1ba>
                goto exit;
   2ea20:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2ea22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ea24:	2b00      	cmp	r3, #0
   2ea26:	d103      	bne.n	2ea30 <cycle+0x1c8>
        rc = packet_type;
   2ea28:	232e      	movs	r3, #46	; 0x2e
   2ea2a:	18fb      	adds	r3, r7, r3
   2ea2c:	881b      	ldrh	r3, [r3, #0]
   2ea2e:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2ea30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2ea32:	0018      	movs	r0, r3
   2ea34:	46bd      	mov	sp, r7
   2ea36:	b00f      	add	sp, #60	; 0x3c
   2ea38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ea3a:	46c0      	nop			; (mov r8, r8)
   2ea3c:	0002e51d 	.word	0x0002e51d
   2ea40:	000398c4 	.word	0x000398c4
   2ea44:	0002fde1 	.word	0x0002fde1
   2ea48:	0002e6d9 	.word	0x0002e6d9
   2ea4c:	000305d9 	.word	0x000305d9
   2ea50:	0002e361 	.word	0x0002e361
   2ea54:	0002fee5 	.word	0x0002fee5
   2ea58:	0002e7c5 	.word	0x0002e7c5

0002ea5c <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2ea5c:	b580      	push	{r7, lr}
   2ea5e:	b086      	sub	sp, #24
   2ea60:	af00      	add	r7, sp, #0
   2ea62:	6078      	str	r0, [r7, #4]
   2ea64:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2ea66:	2300      	movs	r3, #0
   2ea68:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2ea6a:	2308      	movs	r3, #8
   2ea6c:	18fb      	adds	r3, r7, r3
   2ea6e:	0018      	movs	r0, r3
   2ea70:	4b11      	ldr	r3, [pc, #68]	; (2eab8 <MQTTYield+0x5c>)
   2ea72:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2ea74:	683a      	ldr	r2, [r7, #0]
   2ea76:	2308      	movs	r3, #8
   2ea78:	18fb      	adds	r3, r7, r3
   2ea7a:	0011      	movs	r1, r2
   2ea7c:	0018      	movs	r0, r3
   2ea7e:	4b0f      	ldr	r3, [pc, #60]	; (2eabc <MQTTYield+0x60>)
   2ea80:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2ea82:	2308      	movs	r3, #8
   2ea84:	18fa      	adds	r2, r7, r3
   2ea86:	687b      	ldr	r3, [r7, #4]
   2ea88:	0011      	movs	r1, r2
   2ea8a:	0018      	movs	r0, r3
   2ea8c:	4b0c      	ldr	r3, [pc, #48]	; (2eac0 <MQTTYield+0x64>)
   2ea8e:	4798      	blx	r3
   2ea90:	0003      	movs	r3, r0
   2ea92:	3301      	adds	r3, #1
   2ea94:	d103      	bne.n	2ea9e <MQTTYield+0x42>
        {
            rc = FAILURE;
   2ea96:	2301      	movs	r3, #1
   2ea98:	425b      	negs	r3, r3
   2ea9a:	617b      	str	r3, [r7, #20]
            break;
   2ea9c:	e006      	b.n	2eaac <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2ea9e:	2308      	movs	r3, #8
   2eaa0:	18fb      	adds	r3, r7, r3
   2eaa2:	0018      	movs	r0, r3
   2eaa4:	4b07      	ldr	r3, [pc, #28]	; (2eac4 <MQTTYield+0x68>)
   2eaa6:	4798      	blx	r3
   2eaa8:	1e03      	subs	r3, r0, #0
   2eaaa:	d0ea      	beq.n	2ea82 <MQTTYield+0x26>
        
    return rc;
   2eaac:	697b      	ldr	r3, [r7, #20]
}
   2eaae:	0018      	movs	r0, r3
   2eab0:	46bd      	mov	sp, r7
   2eab2:	b006      	add	sp, #24
   2eab4:	bd80      	pop	{r7, pc}
   2eab6:	46c0      	nop			; (mov r8, r8)
   2eab8:	0002f1e9 	.word	0x0002f1e9
   2eabc:	0002f171 	.word	0x0002f171
   2eac0:	0002e869 	.word	0x0002e869
   2eac4:	0002f145 	.word	0x0002f145

0002eac8 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2eac8:	b580      	push	{r7, lr}
   2eaca:	b086      	sub	sp, #24
   2eacc:	af00      	add	r7, sp, #0
   2eace:	60f8      	str	r0, [r7, #12]
   2ead0:	60b9      	str	r1, [r7, #8]
   2ead2:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2ead4:	2301      	movs	r3, #1
   2ead6:	425b      	negs	r3, r3
   2ead8:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2eada:	687b      	ldr	r3, [r7, #4]
   2eadc:	0018      	movs	r0, r3
   2eade:	4b0b      	ldr	r3, [pc, #44]	; (2eb0c <waitfor+0x44>)
   2eae0:	4798      	blx	r3
   2eae2:	1e03      	subs	r3, r0, #0
   2eae4:	d10c      	bne.n	2eb00 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2eae6:	687a      	ldr	r2, [r7, #4]
   2eae8:	68fb      	ldr	r3, [r7, #12]
   2eaea:	0011      	movs	r1, r2
   2eaec:	0018      	movs	r0, r3
   2eaee:	4b08      	ldr	r3, [pc, #32]	; (2eb10 <waitfor+0x48>)
   2eaf0:	4798      	blx	r3
   2eaf2:	0003      	movs	r3, r0
   2eaf4:	617b      	str	r3, [r7, #20]
   2eaf6:	697a      	ldr	r2, [r7, #20]
   2eaf8:	68bb      	ldr	r3, [r7, #8]
   2eafa:	429a      	cmp	r2, r3
   2eafc:	d1ed      	bne.n	2eada <waitfor+0x12>
   2eafe:	e000      	b.n	2eb02 <waitfor+0x3a>
            break; // we timed out
   2eb00:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2eb02:	697b      	ldr	r3, [r7, #20]
}
   2eb04:	0018      	movs	r0, r3
   2eb06:	46bd      	mov	sp, r7
   2eb08:	b006      	add	sp, #24
   2eb0a:	bd80      	pop	{r7, pc}
   2eb0c:	0002f145 	.word	0x0002f145
   2eb10:	0002e869 	.word	0x0002e869

0002eb14 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2eb14:	b590      	push	{r4, r7, lr}
   2eb16:	b09f      	sub	sp, #124	; 0x7c
   2eb18:	af00      	add	r7, sp, #0
   2eb1a:	6078      	str	r0, [r7, #4]
   2eb1c:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2eb1e:	2301      	movs	r3, #1
   2eb20:	425b      	negs	r3, r3
   2eb22:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2eb24:	230c      	movs	r3, #12
   2eb26:	18fa      	adds	r2, r7, r3
   2eb28:	4b41      	ldr	r3, [pc, #260]	; (2ec30 <MQTTConnect+0x11c>)
   2eb2a:	0010      	movs	r0, r2
   2eb2c:	0019      	movs	r1, r3
   2eb2e:	2358      	movs	r3, #88	; 0x58
   2eb30:	001a      	movs	r2, r3
   2eb32:	4b40      	ldr	r3, [pc, #256]	; (2ec34 <MQTTConnect+0x120>)
   2eb34:	4798      	blx	r3
    int len = 0;
   2eb36:	2300      	movs	r3, #0
   2eb38:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2eb3a:	687b      	ldr	r3, [r7, #4]
   2eb3c:	6a1b      	ldr	r3, [r3, #32]
   2eb3e:	2b00      	cmp	r3, #0
   2eb40:	d166      	bne.n	2ec10 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2eb42:	2364      	movs	r3, #100	; 0x64
   2eb44:	18fb      	adds	r3, r7, r3
   2eb46:	0018      	movs	r0, r3
   2eb48:	4b3b      	ldr	r3, [pc, #236]	; (2ec38 <MQTTConnect+0x124>)
   2eb4a:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2eb4c:	687b      	ldr	r3, [r7, #4]
   2eb4e:	685a      	ldr	r2, [r3, #4]
   2eb50:	2364      	movs	r3, #100	; 0x64
   2eb52:	18fb      	adds	r3, r7, r3
   2eb54:	0011      	movs	r1, r2
   2eb56:	0018      	movs	r0, r3
   2eb58:	4b38      	ldr	r3, [pc, #224]	; (2ec3c <MQTTConnect+0x128>)
   2eb5a:	4798      	blx	r3

    if (options == 0)
   2eb5c:	683b      	ldr	r3, [r7, #0]
   2eb5e:	2b00      	cmp	r3, #0
   2eb60:	d102      	bne.n	2eb68 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2eb62:	230c      	movs	r3, #12
   2eb64:	18fb      	adds	r3, r7, r3
   2eb66:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2eb68:	683b      	ldr	r3, [r7, #0]
   2eb6a:	8b1b      	ldrh	r3, [r3, #24]
   2eb6c:	001a      	movs	r2, r3
   2eb6e:	687b      	ldr	r3, [r7, #4]
   2eb70:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2eb72:	687b      	ldr	r3, [r7, #4]
   2eb74:	3354      	adds	r3, #84	; 0x54
   2eb76:	001a      	movs	r2, r3
   2eb78:	687b      	ldr	r3, [r7, #4]
   2eb7a:	699b      	ldr	r3, [r3, #24]
   2eb7c:	0019      	movs	r1, r3
   2eb7e:	0010      	movs	r0, r2
   2eb80:	4b2f      	ldr	r3, [pc, #188]	; (2ec40 <MQTTConnect+0x12c>)
   2eb82:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2eb84:	687b      	ldr	r3, [r7, #4]
   2eb86:	6918      	ldr	r0, [r3, #16]
   2eb88:	687b      	ldr	r3, [r7, #4]
   2eb8a:	689b      	ldr	r3, [r3, #8]
   2eb8c:	0019      	movs	r1, r3
   2eb8e:	683b      	ldr	r3, [r7, #0]
   2eb90:	001a      	movs	r2, r3
   2eb92:	4b2c      	ldr	r3, [pc, #176]	; (2ec44 <MQTTConnect+0x130>)
   2eb94:	4798      	blx	r3
   2eb96:	0003      	movs	r3, r0
   2eb98:	673b      	str	r3, [r7, #112]	; 0x70
   2eb9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2eb9c:	2b00      	cmp	r3, #0
   2eb9e:	dd39      	ble.n	2ec14 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2eba0:	2364      	movs	r3, #100	; 0x64
   2eba2:	18fa      	adds	r2, r7, r3
   2eba4:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2eba6:	687b      	ldr	r3, [r7, #4]
   2eba8:	0018      	movs	r0, r3
   2ebaa:	4b27      	ldr	r3, [pc, #156]	; (2ec48 <MQTTConnect+0x134>)
   2ebac:	4798      	blx	r3
   2ebae:	0003      	movs	r3, r0
   2ebb0:	677b      	str	r3, [r7, #116]	; 0x74
   2ebb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ebb4:	2b00      	cmp	r3, #0
   2ebb6:	d12f      	bne.n	2ec18 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2ebb8:	2364      	movs	r3, #100	; 0x64
   2ebba:	18fa      	adds	r2, r7, r3
   2ebbc:	687b      	ldr	r3, [r7, #4]
   2ebbe:	2102      	movs	r1, #2
   2ebc0:	0018      	movs	r0, r3
   2ebc2:	4b22      	ldr	r3, [pc, #136]	; (2ec4c <MQTTConnect+0x138>)
   2ebc4:	4798      	blx	r3
   2ebc6:	0003      	movs	r3, r0
   2ebc8:	2b02      	cmp	r3, #2
   2ebca:	d11d      	bne.n	2ec08 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2ebcc:	230b      	movs	r3, #11
   2ebce:	18fb      	adds	r3, r7, r3
   2ebd0:	22ff      	movs	r2, #255	; 0xff
   2ebd2:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2ebd4:	230a      	movs	r3, #10
   2ebd6:	18fb      	adds	r3, r7, r3
   2ebd8:	2200      	movs	r2, #0
   2ebda:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2ebdc:	687b      	ldr	r3, [r7, #4]
   2ebde:	695a      	ldr	r2, [r3, #20]
   2ebe0:	687b      	ldr	r3, [r7, #4]
   2ebe2:	68db      	ldr	r3, [r3, #12]
   2ebe4:	210b      	movs	r1, #11
   2ebe6:	1879      	adds	r1, r7, r1
   2ebe8:	200a      	movs	r0, #10
   2ebea:	1838      	adds	r0, r7, r0
   2ebec:	4c18      	ldr	r4, [pc, #96]	; (2ec50 <MQTTConnect+0x13c>)
   2ebee:	47a0      	blx	r4
   2ebf0:	0003      	movs	r3, r0
   2ebf2:	2b01      	cmp	r3, #1
   2ebf4:	d104      	bne.n	2ec00 <MQTTConnect+0xec>
            rc = connack_rc;
   2ebf6:	230b      	movs	r3, #11
   2ebf8:	18fb      	adds	r3, r7, r3
   2ebfa:	781b      	ldrb	r3, [r3, #0]
   2ebfc:	677b      	str	r3, [r7, #116]	; 0x74
   2ebfe:	e00c      	b.n	2ec1a <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2ec00:	2301      	movs	r3, #1
   2ec02:	425b      	negs	r3, r3
   2ec04:	677b      	str	r3, [r7, #116]	; 0x74
   2ec06:	e008      	b.n	2ec1a <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2ec08:	2301      	movs	r3, #1
   2ec0a:	425b      	negs	r3, r3
   2ec0c:	677b      	str	r3, [r7, #116]	; 0x74
   2ec0e:	e004      	b.n	2ec1a <MQTTConnect+0x106>
		goto exit;
   2ec10:	46c0      	nop			; (mov r8, r8)
   2ec12:	e002      	b.n	2ec1a <MQTTConnect+0x106>
        goto exit;
   2ec14:	46c0      	nop			; (mov r8, r8)
   2ec16:	e000      	b.n	2ec1a <MQTTConnect+0x106>
        goto exit; // there was a problem
   2ec18:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2ec1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ec1c:	2b00      	cmp	r3, #0
   2ec1e:	d102      	bne.n	2ec26 <MQTTConnect+0x112>
        c->isconnected = 1;
   2ec20:	687b      	ldr	r3, [r7, #4]
   2ec22:	2201      	movs	r2, #1
   2ec24:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2ec26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2ec28:	0018      	movs	r0, r3
   2ec2a:	46bd      	mov	sp, r7
   2ec2c:	b01f      	add	sp, #124	; 0x7c
   2ec2e:	bd90      	pop	{r4, r7, pc}
   2ec30:	000398fc 	.word	0x000398fc
   2ec34:	00034869 	.word	0x00034869
   2ec38:	0002f1e9 	.word	0x0002f1e9
   2ec3c:	0002f171 	.word	0x0002f171
   2ec40:	0002f199 	.word	0x0002f199
   2ec44:	0002f9c5 	.word	0x0002f9c5
   2ec48:	0002e361 	.word	0x0002e361
   2ec4c:	0002eac9 	.word	0x0002eac9
   2ec50:	0002fc41 	.word	0x0002fc41

0002ec54 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2ec54:	b5b0      	push	{r4, r5, r7, lr}
   2ec56:	b096      	sub	sp, #88	; 0x58
   2ec58:	af04      	add	r7, sp, #16
   2ec5a:	60f8      	str	r0, [r7, #12]
   2ec5c:	60b9      	str	r1, [r7, #8]
   2ec5e:	603b      	str	r3, [r7, #0]
   2ec60:	1dfb      	adds	r3, r7, #7
   2ec62:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2ec64:	2301      	movs	r3, #1
   2ec66:	425b      	negs	r3, r3
   2ec68:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2ec6a:	2300      	movs	r3, #0
   2ec6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2ec6e:	2324      	movs	r3, #36	; 0x24
   2ec70:	18fb      	adds	r3, r7, r3
   2ec72:	2200      	movs	r2, #0
   2ec74:	601a      	str	r2, [r3, #0]
   2ec76:	2324      	movs	r3, #36	; 0x24
   2ec78:	18fb      	adds	r3, r7, r3
   2ec7a:	2200      	movs	r2, #0
   2ec7c:	605a      	str	r2, [r3, #4]
   2ec7e:	2324      	movs	r3, #36	; 0x24
   2ec80:	18fb      	adds	r3, r7, r3
   2ec82:	2200      	movs	r2, #0
   2ec84:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2ec86:	1dfb      	adds	r3, r7, #7
   2ec88:	781b      	ldrb	r3, [r3, #0]
   2ec8a:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2ec8c:	2324      	movs	r3, #36	; 0x24
   2ec8e:	18fb      	adds	r3, r7, r3
   2ec90:	68ba      	ldr	r2, [r7, #8]
   2ec92:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2ec94:	68fb      	ldr	r3, [r7, #12]
   2ec96:	6a1b      	ldr	r3, [r3, #32]
   2ec98:	2b00      	cmp	r3, #0
   2ec9a:	d100      	bne.n	2ec9e <MQTTSubscribe+0x4a>
   2ec9c:	e088      	b.n	2edb0 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2ec9e:	2330      	movs	r3, #48	; 0x30
   2eca0:	18fb      	adds	r3, r7, r3
   2eca2:	0018      	movs	r0, r3
   2eca4:	4b47      	ldr	r3, [pc, #284]	; (2edc4 <MQTTSubscribe+0x170>)
   2eca6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2eca8:	68fb      	ldr	r3, [r7, #12]
   2ecaa:	685a      	ldr	r2, [r3, #4]
   2ecac:	2330      	movs	r3, #48	; 0x30
   2ecae:	18fb      	adds	r3, r7, r3
   2ecb0:	0011      	movs	r1, r2
   2ecb2:	0018      	movs	r0, r3
   2ecb4:	4b44      	ldr	r3, [pc, #272]	; (2edc8 <MQTTSubscribe+0x174>)
   2ecb6:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2ecb8:	68fb      	ldr	r3, [r7, #12]
   2ecba:	691c      	ldr	r4, [r3, #16]
   2ecbc:	68fb      	ldr	r3, [r7, #12]
   2ecbe:	689b      	ldr	r3, [r3, #8]
   2ecc0:	001d      	movs	r5, r3
   2ecc2:	68fb      	ldr	r3, [r7, #12]
   2ecc4:	0018      	movs	r0, r3
   2ecc6:	4b41      	ldr	r3, [pc, #260]	; (2edcc <MQTTSubscribe+0x178>)
   2ecc8:	4798      	blx	r3
   2ecca:	0003      	movs	r3, r0
   2eccc:	b29a      	uxth	r2, r3
   2ecce:	2320      	movs	r3, #32
   2ecd0:	18fb      	adds	r3, r7, r3
   2ecd2:	9302      	str	r3, [sp, #8]
   2ecd4:	2324      	movs	r3, #36	; 0x24
   2ecd6:	18fb      	adds	r3, r7, r3
   2ecd8:	9301      	str	r3, [sp, #4]
   2ecda:	2301      	movs	r3, #1
   2ecdc:	9300      	str	r3, [sp, #0]
   2ecde:	0013      	movs	r3, r2
   2ece0:	2200      	movs	r2, #0
   2ece2:	0029      	movs	r1, r5
   2ece4:	0020      	movs	r0, r4
   2ece6:	4c3a      	ldr	r4, [pc, #232]	; (2edd0 <MQTTSubscribe+0x17c>)
   2ece8:	47a0      	blx	r4
   2ecea:	0003      	movs	r3, r0
   2ecec:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2ecee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ecf0:	2b00      	cmp	r3, #0
   2ecf2:	dd5f      	ble.n	2edb4 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2ecf4:	2330      	movs	r3, #48	; 0x30
   2ecf6:	18fa      	adds	r2, r7, r3
   2ecf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2ecfa:	68fb      	ldr	r3, [r7, #12]
   2ecfc:	0018      	movs	r0, r3
   2ecfe:	4b35      	ldr	r3, [pc, #212]	; (2edd4 <MQTTSubscribe+0x180>)
   2ed00:	4798      	blx	r3
   2ed02:	0003      	movs	r3, r0
   2ed04:	647b      	str	r3, [r7, #68]	; 0x44
   2ed06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2ed08:	2b00      	cmp	r3, #0
   2ed0a:	d155      	bne.n	2edb8 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2ed0c:	2330      	movs	r3, #48	; 0x30
   2ed0e:	18fa      	adds	r2, r7, r3
   2ed10:	68fb      	ldr	r3, [r7, #12]
   2ed12:	2109      	movs	r1, #9
   2ed14:	0018      	movs	r0, r3
   2ed16:	4b30      	ldr	r3, [pc, #192]	; (2edd8 <MQTTSubscribe+0x184>)
   2ed18:	4798      	blx	r3
   2ed1a:	0003      	movs	r3, r0
   2ed1c:	2b09      	cmp	r3, #9
   2ed1e:	d143      	bne.n	2eda8 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2ed20:	2300      	movs	r3, #0
   2ed22:	61fb      	str	r3, [r7, #28]
   2ed24:	2301      	movs	r3, #1
   2ed26:	425b      	negs	r3, r3
   2ed28:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2ed2a:	68fb      	ldr	r3, [r7, #12]
   2ed2c:	695a      	ldr	r2, [r3, #20]
   2ed2e:	68fb      	ldr	r3, [r7, #12]
   2ed30:	68db      	ldr	r3, [r3, #12]
   2ed32:	001c      	movs	r4, r3
   2ed34:	2318      	movs	r3, #24
   2ed36:	18fb      	adds	r3, r7, r3
   2ed38:	211c      	movs	r1, #28
   2ed3a:	1879      	adds	r1, r7, r1
   2ed3c:	2016      	movs	r0, #22
   2ed3e:	1838      	adds	r0, r7, r0
   2ed40:	9401      	str	r4, [sp, #4]
   2ed42:	9200      	str	r2, [sp, #0]
   2ed44:	000a      	movs	r2, r1
   2ed46:	2101      	movs	r1, #1
   2ed48:	4c24      	ldr	r4, [pc, #144]	; (2eddc <MQTTSubscribe+0x188>)
   2ed4a:	47a0      	blx	r4
   2ed4c:	0003      	movs	r3, r0
   2ed4e:	2b01      	cmp	r3, #1
   2ed50:	d101      	bne.n	2ed56 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2ed52:	69bb      	ldr	r3, [r7, #24]
   2ed54:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2ed56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2ed58:	2b80      	cmp	r3, #128	; 0x80
   2ed5a:	d02e      	beq.n	2edba <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ed5c:	2300      	movs	r3, #0
   2ed5e:	643b      	str	r3, [r7, #64]	; 0x40
   2ed60:	e01e      	b.n	2eda0 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2ed62:	68fa      	ldr	r2, [r7, #12]
   2ed64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ed66:	3304      	adds	r3, #4
   2ed68:	00db      	lsls	r3, r3, #3
   2ed6a:	18d3      	adds	r3, r2, r3
   2ed6c:	3304      	adds	r3, #4
   2ed6e:	681b      	ldr	r3, [r3, #0]
   2ed70:	2b00      	cmp	r3, #0
   2ed72:	d112      	bne.n	2ed9a <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2ed74:	68fa      	ldr	r2, [r7, #12]
   2ed76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ed78:	3304      	adds	r3, #4
   2ed7a:	00db      	lsls	r3, r3, #3
   2ed7c:	18d3      	adds	r3, r2, r3
   2ed7e:	3304      	adds	r3, #4
   2ed80:	68ba      	ldr	r2, [r7, #8]
   2ed82:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2ed84:	68fa      	ldr	r2, [r7, #12]
   2ed86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ed88:	3304      	adds	r3, #4
   2ed8a:	00db      	lsls	r3, r3, #3
   2ed8c:	18d3      	adds	r3, r2, r3
   2ed8e:	3308      	adds	r3, #8
   2ed90:	683a      	ldr	r2, [r7, #0]
   2ed92:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2ed94:	2300      	movs	r3, #0
   2ed96:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2ed98:	e00f      	b.n	2edba <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ed9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ed9c:	3301      	adds	r3, #1
   2ed9e:	643b      	str	r3, [r7, #64]	; 0x40
   2eda0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2eda2:	2b04      	cmp	r3, #4
   2eda4:	dddd      	ble.n	2ed62 <MQTTSubscribe+0x10e>
   2eda6:	e008      	b.n	2edba <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2eda8:	2301      	movs	r3, #1
   2edaa:	425b      	negs	r3, r3
   2edac:	647b      	str	r3, [r7, #68]	; 0x44
   2edae:	e004      	b.n	2edba <MQTTSubscribe+0x166>
		goto exit;
   2edb0:	46c0      	nop			; (mov r8, r8)
   2edb2:	e002      	b.n	2edba <MQTTSubscribe+0x166>
        goto exit;
   2edb4:	46c0      	nop			; (mov r8, r8)
   2edb6:	e000      	b.n	2edba <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2edb8:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2edba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2edbc:	0018      	movs	r0, r3
   2edbe:	46bd      	mov	sp, r7
   2edc0:	b012      	add	sp, #72	; 0x48
   2edc2:	bdb0      	pop	{r4, r5, r7, pc}
   2edc4:	0002f1e9 	.word	0x0002f1e9
   2edc8:	0002f171 	.word	0x0002f171
   2edcc:	0002e331 	.word	0x0002e331
   2edd0:	00030721 	.word	0x00030721
   2edd4:	0002e361 	.word	0x0002e361
   2edd8:	0002eac9 	.word	0x0002eac9
   2eddc:	00030871 	.word	0x00030871

0002ede0 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2ede0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ede2:	46ce      	mov	lr, r9
   2ede4:	4647      	mov	r7, r8
   2ede6:	b580      	push	{r7, lr}
   2ede8:	b097      	sub	sp, #92	; 0x5c
   2edea:	af08      	add	r7, sp, #32
   2edec:	60f8      	str	r0, [r7, #12]
   2edee:	60b9      	str	r1, [r7, #8]
   2edf0:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2edf2:	2301      	movs	r3, #1
   2edf4:	425b      	negs	r3, r3
   2edf6:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2edf8:	2318      	movs	r3, #24
   2edfa:	18fb      	adds	r3, r7, r3
   2edfc:	2200      	movs	r2, #0
   2edfe:	601a      	str	r2, [r3, #0]
   2ee00:	2318      	movs	r3, #24
   2ee02:	18fb      	adds	r3, r7, r3
   2ee04:	2200      	movs	r2, #0
   2ee06:	605a      	str	r2, [r3, #4]
   2ee08:	2318      	movs	r3, #24
   2ee0a:	18fb      	adds	r3, r7, r3
   2ee0c:	2200      	movs	r2, #0
   2ee0e:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2ee10:	2318      	movs	r3, #24
   2ee12:	18fb      	adds	r3, r7, r3
   2ee14:	68ba      	ldr	r2, [r7, #8]
   2ee16:	601a      	str	r2, [r3, #0]
    int len = 0;
   2ee18:	2300      	movs	r3, #0
   2ee1a:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2ee1c:	68fb      	ldr	r3, [r7, #12]
   2ee1e:	6a1b      	ldr	r3, [r3, #32]
   2ee20:	2b00      	cmp	r3, #0
   2ee22:	d100      	bne.n	2ee26 <MQTTPublish+0x46>
   2ee24:	e0a0      	b.n	2ef68 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2ee26:	2324      	movs	r3, #36	; 0x24
   2ee28:	18fb      	adds	r3, r7, r3
   2ee2a:	0018      	movs	r0, r3
   2ee2c:	4b55      	ldr	r3, [pc, #340]	; (2ef84 <MQTTPublish+0x1a4>)
   2ee2e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2ee30:	68fb      	ldr	r3, [r7, #12]
   2ee32:	685a      	ldr	r2, [r3, #4]
   2ee34:	2324      	movs	r3, #36	; 0x24
   2ee36:	18fb      	adds	r3, r7, r3
   2ee38:	0011      	movs	r1, r2
   2ee3a:	0018      	movs	r0, r3
   2ee3c:	4b52      	ldr	r3, [pc, #328]	; (2ef88 <MQTTPublish+0x1a8>)
   2ee3e:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2ee40:	687b      	ldr	r3, [r7, #4]
   2ee42:	781b      	ldrb	r3, [r3, #0]
   2ee44:	2b01      	cmp	r3, #1
   2ee46:	d003      	beq.n	2ee50 <MQTTPublish+0x70>
   2ee48:	687b      	ldr	r3, [r7, #4]
   2ee4a:	781b      	ldrb	r3, [r3, #0]
   2ee4c:	2b02      	cmp	r3, #2
   2ee4e:	d107      	bne.n	2ee60 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2ee50:	68fb      	ldr	r3, [r7, #12]
   2ee52:	0018      	movs	r0, r3
   2ee54:	4b4d      	ldr	r3, [pc, #308]	; (2ef8c <MQTTPublish+0x1ac>)
   2ee56:	4798      	blx	r3
   2ee58:	0003      	movs	r3, r0
   2ee5a:	b29a      	uxth	r2, r3
   2ee5c:	687b      	ldr	r3, [r7, #4]
   2ee5e:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2ee60:	68fb      	ldr	r3, [r7, #12]
   2ee62:	691b      	ldr	r3, [r3, #16]
   2ee64:	469c      	mov	ip, r3
   2ee66:	68fb      	ldr	r3, [r7, #12]
   2ee68:	689b      	ldr	r3, [r3, #8]
   2ee6a:	001d      	movs	r5, r3
   2ee6c:	687b      	ldr	r3, [r7, #4]
   2ee6e:	781b      	ldrb	r3, [r3, #0]
   2ee70:	001e      	movs	r6, r3
   2ee72:	687b      	ldr	r3, [r7, #4]
   2ee74:	785b      	ldrb	r3, [r3, #1]
   2ee76:	4698      	mov	r8, r3
   2ee78:	687b      	ldr	r3, [r7, #4]
   2ee7a:	889b      	ldrh	r3, [r3, #4]
   2ee7c:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2ee7e:	687b      	ldr	r3, [r7, #4]
   2ee80:	689a      	ldr	r2, [r3, #8]
   2ee82:	687b      	ldr	r3, [r7, #4]
   2ee84:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2ee86:	9306      	str	r3, [sp, #24]
   2ee88:	9205      	str	r2, [sp, #20]
   2ee8a:	2318      	movs	r3, #24
   2ee8c:	18fa      	adds	r2, r7, r3
   2ee8e:	2308      	movs	r3, #8
   2ee90:	446b      	add	r3, sp
   2ee92:	ca13      	ldmia	r2!, {r0, r1, r4}
   2ee94:	c313      	stmia	r3!, {r0, r1, r4}
   2ee96:	464b      	mov	r3, r9
   2ee98:	9301      	str	r3, [sp, #4]
   2ee9a:	4643      	mov	r3, r8
   2ee9c:	9300      	str	r3, [sp, #0]
   2ee9e:	0033      	movs	r3, r6
   2eea0:	2200      	movs	r2, #0
   2eea2:	0029      	movs	r1, r5
   2eea4:	4660      	mov	r0, ip
   2eea6:	4c3a      	ldr	r4, [pc, #232]	; (2ef90 <MQTTPublish+0x1b0>)
   2eea8:	47a0      	blx	r4
   2eeaa:	0003      	movs	r3, r0
   2eeac:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2eeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2eeb0:	2b00      	cmp	r3, #0
   2eeb2:	dd5b      	ble.n	2ef6c <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2eeb4:	2324      	movs	r3, #36	; 0x24
   2eeb6:	18fa      	adds	r2, r7, r3
   2eeb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2eeba:	68fb      	ldr	r3, [r7, #12]
   2eebc:	0018      	movs	r0, r3
   2eebe:	4b35      	ldr	r3, [pc, #212]	; (2ef94 <MQTTPublish+0x1b4>)
   2eec0:	4798      	blx	r3
   2eec2:	0003      	movs	r3, r0
   2eec4:	637b      	str	r3, [r7, #52]	; 0x34
   2eec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2eec8:	2b00      	cmp	r3, #0
   2eeca:	d151      	bne.n	2ef70 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2eecc:	687b      	ldr	r3, [r7, #4]
   2eece:	781b      	ldrb	r3, [r3, #0]
   2eed0:	2b01      	cmp	r3, #1
   2eed2:	d122      	bne.n	2ef1a <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2eed4:	2324      	movs	r3, #36	; 0x24
   2eed6:	18fa      	adds	r2, r7, r3
   2eed8:	68fb      	ldr	r3, [r7, #12]
   2eeda:	2104      	movs	r1, #4
   2eedc:	0018      	movs	r0, r3
   2eede:	4b2e      	ldr	r3, [pc, #184]	; (2ef98 <MQTTPublish+0x1b8>)
   2eee0:	4798      	blx	r3
   2eee2:	0003      	movs	r3, r0
   2eee4:	2b04      	cmp	r3, #4
   2eee6:	d114      	bne.n	2ef12 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2eee8:	68fb      	ldr	r3, [r7, #12]
   2eeea:	695c      	ldr	r4, [r3, #20]
   2eeec:	68fb      	ldr	r3, [r7, #12]
   2eeee:	68db      	ldr	r3, [r3, #12]
   2eef0:	2216      	movs	r2, #22
   2eef2:	18ba      	adds	r2, r7, r2
   2eef4:	2115      	movs	r1, #21
   2eef6:	1879      	adds	r1, r7, r1
   2eef8:	2014      	movs	r0, #20
   2eefa:	1838      	adds	r0, r7, r0
   2eefc:	9300      	str	r3, [sp, #0]
   2eefe:	0023      	movs	r3, r4
   2ef00:	4c26      	ldr	r4, [pc, #152]	; (2ef9c <MQTTPublish+0x1bc>)
   2ef02:	47a0      	blx	r4
   2ef04:	0003      	movs	r3, r0
   2ef06:	2b01      	cmp	r3, #1
   2ef08:	d033      	beq.n	2ef72 <MQTTPublish+0x192>
                rc = FAILURE;
   2ef0a:	2301      	movs	r3, #1
   2ef0c:	425b      	negs	r3, r3
   2ef0e:	637b      	str	r3, [r7, #52]	; 0x34
   2ef10:	e02f      	b.n	2ef72 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2ef12:	2301      	movs	r3, #1
   2ef14:	425b      	negs	r3, r3
   2ef16:	637b      	str	r3, [r7, #52]	; 0x34
   2ef18:	e02b      	b.n	2ef72 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2ef1a:	687b      	ldr	r3, [r7, #4]
   2ef1c:	781b      	ldrb	r3, [r3, #0]
   2ef1e:	2b02      	cmp	r3, #2
   2ef20:	d127      	bne.n	2ef72 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2ef22:	2324      	movs	r3, #36	; 0x24
   2ef24:	18fa      	adds	r2, r7, r3
   2ef26:	68fb      	ldr	r3, [r7, #12]
   2ef28:	2107      	movs	r1, #7
   2ef2a:	0018      	movs	r0, r3
   2ef2c:	4b1a      	ldr	r3, [pc, #104]	; (2ef98 <MQTTPublish+0x1b8>)
   2ef2e:	4798      	blx	r3
   2ef30:	0003      	movs	r3, r0
   2ef32:	2b07      	cmp	r3, #7
   2ef34:	d114      	bne.n	2ef60 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2ef36:	68fb      	ldr	r3, [r7, #12]
   2ef38:	695c      	ldr	r4, [r3, #20]
   2ef3a:	68fb      	ldr	r3, [r7, #12]
   2ef3c:	68db      	ldr	r3, [r3, #12]
   2ef3e:	2212      	movs	r2, #18
   2ef40:	18ba      	adds	r2, r7, r2
   2ef42:	2111      	movs	r1, #17
   2ef44:	1879      	adds	r1, r7, r1
   2ef46:	2010      	movs	r0, #16
   2ef48:	1838      	adds	r0, r7, r0
   2ef4a:	9300      	str	r3, [sp, #0]
   2ef4c:	0023      	movs	r3, r4
   2ef4e:	4c13      	ldr	r4, [pc, #76]	; (2ef9c <MQTTPublish+0x1bc>)
   2ef50:	47a0      	blx	r4
   2ef52:	0003      	movs	r3, r0
   2ef54:	2b01      	cmp	r3, #1
   2ef56:	d00c      	beq.n	2ef72 <MQTTPublish+0x192>
                rc = FAILURE;
   2ef58:	2301      	movs	r3, #1
   2ef5a:	425b      	negs	r3, r3
   2ef5c:	637b      	str	r3, [r7, #52]	; 0x34
   2ef5e:	e008      	b.n	2ef72 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2ef60:	2301      	movs	r3, #1
   2ef62:	425b      	negs	r3, r3
   2ef64:	637b      	str	r3, [r7, #52]	; 0x34
   2ef66:	e004      	b.n	2ef72 <MQTTPublish+0x192>
		goto exit;
   2ef68:	46c0      	nop			; (mov r8, r8)
   2ef6a:	e002      	b.n	2ef72 <MQTTPublish+0x192>
        goto exit;
   2ef6c:	46c0      	nop			; (mov r8, r8)
   2ef6e:	e000      	b.n	2ef72 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2ef70:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ef72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2ef74:	0018      	movs	r0, r3
   2ef76:	46bd      	mov	sp, r7
   2ef78:	b00f      	add	sp, #60	; 0x3c
   2ef7a:	bc0c      	pop	{r2, r3}
   2ef7c:	4690      	mov	r8, r2
   2ef7e:	4699      	mov	r9, r3
   2ef80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ef82:	46c0      	nop			; (mov r8, r8)
   2ef84:	0002f1e9 	.word	0x0002f1e9
   2ef88:	0002f171 	.word	0x0002f171
   2ef8c:	0002e331 	.word	0x0002e331
   2ef90:	0003046d 	.word	0x0003046d
   2ef94:	0002e361 	.word	0x0002e361
   2ef98:	0002eac9 	.word	0x0002eac9
   2ef9c:	0002fee5 	.word	0x0002fee5

0002efa0 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2efa0:	b580      	push	{r7, lr}
   2efa2:	b088      	sub	sp, #32
   2efa4:	af00      	add	r7, sp, #0
   2efa6:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2efa8:	2301      	movs	r3, #1
   2efaa:	425b      	negs	r3, r3
   2efac:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2efae:	2300      	movs	r3, #0
   2efb0:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2efb2:	230c      	movs	r3, #12
   2efb4:	18fb      	adds	r3, r7, r3
   2efb6:	0018      	movs	r0, r3
   2efb8:	4b13      	ldr	r3, [pc, #76]	; (2f008 <MQTTDisconnect+0x68>)
   2efba:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2efbc:	687b      	ldr	r3, [r7, #4]
   2efbe:	685a      	ldr	r2, [r3, #4]
   2efc0:	230c      	movs	r3, #12
   2efc2:	18fb      	adds	r3, r7, r3
   2efc4:	0011      	movs	r1, r2
   2efc6:	0018      	movs	r0, r3
   2efc8:	4b10      	ldr	r3, [pc, #64]	; (2f00c <MQTTDisconnect+0x6c>)
   2efca:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2efcc:	687b      	ldr	r3, [r7, #4]
   2efce:	691a      	ldr	r2, [r3, #16]
   2efd0:	687b      	ldr	r3, [r7, #4]
   2efd2:	689b      	ldr	r3, [r3, #8]
   2efd4:	0019      	movs	r1, r3
   2efd6:	0010      	movs	r0, r2
   2efd8:	4b0d      	ldr	r3, [pc, #52]	; (2f010 <MQTTDisconnect+0x70>)
   2efda:	4798      	blx	r3
   2efdc:	0003      	movs	r3, r0
   2efde:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2efe0:	69bb      	ldr	r3, [r7, #24]
   2efe2:	2b00      	cmp	r3, #0
   2efe4:	dd08      	ble.n	2eff8 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2efe6:	230c      	movs	r3, #12
   2efe8:	18fa      	adds	r2, r7, r3
   2efea:	69b9      	ldr	r1, [r7, #24]
   2efec:	687b      	ldr	r3, [r7, #4]
   2efee:	0018      	movs	r0, r3
   2eff0:	4b08      	ldr	r3, [pc, #32]	; (2f014 <MQTTDisconnect+0x74>)
   2eff2:	4798      	blx	r3
   2eff4:	0003      	movs	r3, r0
   2eff6:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2eff8:	687b      	ldr	r3, [r7, #4]
   2effa:	2200      	movs	r2, #0
   2effc:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2effe:	69fb      	ldr	r3, [r7, #28]
}
   2f000:	0018      	movs	r0, r3
   2f002:	46bd      	mov	sp, r7
   2f004:	b008      	add	sp, #32
   2f006:	bd80      	pop	{r7, pc}
   2f008:	0002f1e9 	.word	0x0002f1e9
   2f00c:	0002f171 	.word	0x0002f171
   2f010:	0002fd99 	.word	0x0002fd99
   2f014:	0002e361 	.word	0x0002e361

0002f018 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2f018:	b580      	push	{r7, lr}
   2f01a:	b084      	sub	sp, #16
   2f01c:	af00      	add	r7, sp, #0
   2f01e:	0002      	movs	r2, r0
   2f020:	1dfb      	adds	r3, r7, #7
   2f022:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f024:	2300      	movs	r3, #0
   2f026:	60fb      	str	r3, [r7, #12]
   2f028:	e01c      	b.n	2f064 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2f02a:	4a12      	ldr	r2, [pc, #72]	; (2f074 <isMQTTSocket+0x5c>)
   2f02c:	68fb      	ldr	r3, [r7, #12]
   2f02e:	2164      	movs	r1, #100	; 0x64
   2f030:	434b      	muls	r3, r1
   2f032:	18d3      	adds	r3, r2, r3
   2f034:	3360      	adds	r3, #96	; 0x60
   2f036:	681b      	ldr	r3, [r3, #0]
   2f038:	2b00      	cmp	r3, #0
   2f03a:	d010      	beq.n	2f05e <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2f03c:	4a0d      	ldr	r2, [pc, #52]	; (2f074 <isMQTTSocket+0x5c>)
   2f03e:	68fb      	ldr	r3, [r7, #12]
   2f040:	2164      	movs	r1, #100	; 0x64
   2f042:	434b      	muls	r3, r1
   2f044:	18d3      	adds	r3, r2, r3
   2f046:	3360      	adds	r3, #96	; 0x60
   2f048:	681b      	ldr	r3, [r3, #0]
   2f04a:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2f04c:	68bb      	ldr	r3, [r7, #8]
   2f04e:	6a1a      	ldr	r2, [r3, #32]
   2f050:	1dfb      	adds	r3, r7, #7
   2f052:	781b      	ldrb	r3, [r3, #0]
   2f054:	b25b      	sxtb	r3, r3
   2f056:	429a      	cmp	r2, r3
   2f058:	d101      	bne.n	2f05e <isMQTTSocket+0x46>
				return true;
   2f05a:	2301      	movs	r3, #1
   2f05c:	e006      	b.n	2f06c <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f05e:	68fb      	ldr	r3, [r7, #12]
   2f060:	3301      	adds	r3, #1
   2f062:	60fb      	str	r3, [r7, #12]
   2f064:	68fb      	ldr	r3, [r7, #12]
   2f066:	2b06      	cmp	r3, #6
   2f068:	d9df      	bls.n	2f02a <isMQTTSocket+0x12>
		}
	}
	return false;
   2f06a:	2300      	movs	r3, #0
}
   2f06c:	0018      	movs	r0, r3
   2f06e:	46bd      	mov	sp, r7
   2f070:	b004      	add	sp, #16
   2f072:	bd80      	pop	{r7, pc}
   2f074:	20004020 	.word	0x20004020

0002f078 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2f078:	b580      	push	{r7, lr}
   2f07a:	b082      	sub	sp, #8
   2f07c:	af00      	add	r7, sp, #0
   2f07e:	6078      	str	r0, [r7, #4]
   2f080:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2f082:	4b0d      	ldr	r3, [pc, #52]	; (2f0b8 <dnsResolveCallback+0x40>)
   2f084:	781b      	ldrb	r3, [r3, #0]
   2f086:	2201      	movs	r2, #1
   2f088:	4053      	eors	r3, r2
   2f08a:	b2db      	uxtb	r3, r3
   2f08c:	2b00      	cmp	r3, #0
   2f08e:	d00e      	beq.n	2f0ae <dnsResolveCallback+0x36>
   2f090:	4b0a      	ldr	r3, [pc, #40]	; (2f0bc <dnsResolveCallback+0x44>)
   2f092:	681b      	ldr	r3, [r3, #0]
   2f094:	687a      	ldr	r2, [r7, #4]
   2f096:	0011      	movs	r1, r2
   2f098:	0018      	movs	r0, r3
   2f09a:	4b09      	ldr	r3, [pc, #36]	; (2f0c0 <dnsResolveCallback+0x48>)
   2f09c:	4798      	blx	r3
   2f09e:	1e03      	subs	r3, r0, #0
   2f0a0:	d105      	bne.n	2f0ae <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2f0a2:	683a      	ldr	r2, [r7, #0]
   2f0a4:	4b07      	ldr	r3, [pc, #28]	; (2f0c4 <dnsResolveCallback+0x4c>)
   2f0a6:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2f0a8:	4b03      	ldr	r3, [pc, #12]	; (2f0b8 <dnsResolveCallback+0x40>)
   2f0aa:	2201      	movs	r2, #1
   2f0ac:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2f0ae:	46c0      	nop			; (mov r8, r8)
   2f0b0:	46bd      	mov	sp, r7
   2f0b2:	b002      	add	sp, #8
   2f0b4:	bd80      	pop	{r7, pc}
   2f0b6:	46c0      	nop			; (mov r8, r8)
   2f0b8:	20003f10 	.word	0x20003f10
   2f0bc:	2000401c 	.word	0x2000401c
   2f0c0:	00034bf7 	.word	0x00034bf7
   2f0c4:	20003f08 	.word	0x20003f08

0002f0c8 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2f0c8:	b580      	push	{r7, lr}
   2f0ca:	b084      	sub	sp, #16
   2f0cc:	af00      	add	r7, sp, #0
   2f0ce:	603a      	str	r2, [r7, #0]
   2f0d0:	1dfb      	adds	r3, r7, #7
   2f0d2:	1c02      	adds	r2, r0, #0
   2f0d4:	701a      	strb	r2, [r3, #0]
   2f0d6:	1dbb      	adds	r3, r7, #6
   2f0d8:	1c0a      	adds	r2, r1, #0
   2f0da:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2f0dc:	1dfb      	adds	r3, r7, #7
   2f0de:	781b      	ldrb	r3, [r3, #0]
   2f0e0:	b25b      	sxtb	r3, r3
   2f0e2:	0018      	movs	r0, r3
   2f0e4:	4b12      	ldr	r3, [pc, #72]	; (2f130 <tcpClientSocketEventHandler+0x68>)
   2f0e6:	4798      	blx	r3
   2f0e8:	1e03      	subs	r3, r0, #0
   2f0ea:	d01c      	beq.n	2f126 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2f0ec:	1dbb      	adds	r3, r7, #6
   2f0ee:	781b      	ldrb	r3, [r3, #0]
   2f0f0:	2b06      	cmp	r3, #6
   2f0f2:	d00c      	beq.n	2f10e <tcpClientSocketEventHandler+0x46>
   2f0f4:	2b07      	cmp	r3, #7
   2f0f6:	d006      	beq.n	2f106 <tcpClientSocketEventHandler+0x3e>
   2f0f8:	2b05      	cmp	r3, #5
   2f0fa:	d000      	beq.n	2f0fe <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2f0fc:	e013      	b.n	2f126 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2f0fe:	4b0d      	ldr	r3, [pc, #52]	; (2f134 <tcpClientSocketEventHandler+0x6c>)
   2f100:	2201      	movs	r2, #1
   2f102:	701a      	strb	r2, [r3, #0]
			break;
   2f104:	e00f      	b.n	2f126 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2f106:	4b0c      	ldr	r3, [pc, #48]	; (2f138 <tcpClientSocketEventHandler+0x70>)
   2f108:	2201      	movs	r2, #1
   2f10a:	701a      	strb	r2, [r3, #0]
			break;
   2f10c:	e00b      	b.n	2f126 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2f10e:	683b      	ldr	r3, [r7, #0]
   2f110:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2f112:	68fb      	ldr	r3, [r7, #12]
   2f114:	2204      	movs	r2, #4
   2f116:	5e9b      	ldrsh	r3, [r3, r2]
   2f118:	001a      	movs	r2, r3
   2f11a:	4b08      	ldr	r3, [pc, #32]	; (2f13c <tcpClientSocketEventHandler+0x74>)
   2f11c:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2f11e:	4b08      	ldr	r3, [pc, #32]	; (2f140 <tcpClientSocketEventHandler+0x78>)
   2f120:	2201      	movs	r2, #1
   2f122:	701a      	strb	r2, [r3, #0]
			break;
   2f124:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2f126:	46c0      	nop			; (mov r8, r8)
   2f128:	46bd      	mov	sp, r7
   2f12a:	b004      	add	sp, #16
   2f12c:	bd80      	pop	{r7, pc}
   2f12e:	46c0      	nop			; (mov r8, r8)
   2f130:	0002f019 	.word	0x0002f019
   2f134:	20003f11 	.word	0x20003f11
   2f138:	20003f12 	.word	0x20003f12
   2f13c:	20003f0c 	.word	0x20003f0c
   2f140:	20003f13 	.word	0x20003f13

0002f144 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2f144:	b580      	push	{r7, lr}
   2f146:	b082      	sub	sp, #8
   2f148:	af00      	add	r7, sp, #0
   2f14a:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2f14c:	687b      	ldr	r3, [r7, #4]
   2f14e:	3304      	adds	r3, #4
   2f150:	687a      	ldr	r2, [r7, #4]
   2f152:	0011      	movs	r1, r2
   2f154:	0018      	movs	r0, r3
   2f156:	4b05      	ldr	r3, [pc, #20]	; (2f16c <TimerIsExpired+0x28>)
   2f158:	4798      	blx	r3
   2f15a:	0003      	movs	r3, r0
   2f15c:	3b01      	subs	r3, #1
   2f15e:	425a      	negs	r2, r3
   2f160:	4153      	adcs	r3, r2
   2f162:	b2db      	uxtb	r3, r3
}
   2f164:	0018      	movs	r0, r3
   2f166:	46bd      	mov	sp, r7
   2f168:	b002      	add	sp, #8
   2f16a:	bd80      	pop	{r7, pc}
   2f16c:	0001cdf1 	.word	0x0001cdf1

0002f170 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2f170:	b580      	push	{r7, lr}
   2f172:	b082      	sub	sp, #8
   2f174:	af00      	add	r7, sp, #0
   2f176:	6078      	str	r0, [r7, #4]
   2f178:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2f17a:	687b      	ldr	r3, [r7, #4]
   2f17c:	683a      	ldr	r2, [r7, #0]
   2f17e:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2f180:	687b      	ldr	r3, [r7, #4]
   2f182:	3304      	adds	r3, #4
   2f184:	0018      	movs	r0, r3
   2f186:	4b03      	ldr	r3, [pc, #12]	; (2f194 <TimerCountdownMS+0x24>)
   2f188:	4798      	blx	r3
}
   2f18a:	46c0      	nop			; (mov r8, r8)
   2f18c:	46bd      	mov	sp, r7
   2f18e:	b002      	add	sp, #8
   2f190:	bd80      	pop	{r7, pc}
   2f192:	46c0      	nop			; (mov r8, r8)
   2f194:	0001cd85 	.word	0x0001cd85

0002f198 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2f198:	b580      	push	{r7, lr}
   2f19a:	b082      	sub	sp, #8
   2f19c:	af00      	add	r7, sp, #0
   2f19e:	6078      	str	r0, [r7, #4]
   2f1a0:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2f1a2:	683b      	ldr	r3, [r7, #0]
   2f1a4:	22fa      	movs	r2, #250	; 0xfa
   2f1a6:	0092      	lsls	r2, r2, #2
   2f1a8:	435a      	muls	r2, r3
   2f1aa:	687b      	ldr	r3, [r7, #4]
   2f1ac:	0011      	movs	r1, r2
   2f1ae:	0018      	movs	r0, r3
   2f1b0:	4b02      	ldr	r3, [pc, #8]	; (2f1bc <TimerCountdown+0x24>)
   2f1b2:	4798      	blx	r3
}
   2f1b4:	46c0      	nop			; (mov r8, r8)
   2f1b6:	46bd      	mov	sp, r7
   2f1b8:	b002      	add	sp, #8
   2f1ba:	bd80      	pop	{r7, pc}
   2f1bc:	0002f171 	.word	0x0002f171

0002f1c0 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2f1c0:	b580      	push	{r7, lr}
   2f1c2:	b082      	sub	sp, #8
   2f1c4:	af00      	add	r7, sp, #0
   2f1c6:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2f1c8:	687b      	ldr	r3, [r7, #4]
   2f1ca:	3304      	adds	r3, #4
   2f1cc:	687a      	ldr	r2, [r7, #4]
   2f1ce:	0011      	movs	r1, r2
   2f1d0:	0018      	movs	r0, r3
   2f1d2:	4b04      	ldr	r3, [pc, #16]	; (2f1e4 <TimerLeftMS+0x24>)
   2f1d4:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2f1d6:	687b      	ldr	r3, [r7, #4]
   2f1d8:	681b      	ldr	r3, [r3, #0]
}
   2f1da:	0018      	movs	r0, r3
   2f1dc:	46bd      	mov	sp, r7
   2f1de:	b002      	add	sp, #8
   2f1e0:	bd80      	pop	{r7, pc}
   2f1e2:	46c0      	nop			; (mov r8, r8)
   2f1e4:	0001cdf1 	.word	0x0001cdf1

0002f1e8 <TimerInit>:


void TimerInit(Timer* timer) {
   2f1e8:	b580      	push	{r7, lr}
   2f1ea:	b082      	sub	sp, #8
   2f1ec:	af00      	add	r7, sp, #0
   2f1ee:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2f1f0:	687b      	ldr	r3, [r7, #4]
   2f1f2:	2200      	movs	r2, #0
   2f1f4:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2f1f6:	687b      	ldr	r3, [r7, #4]
   2f1f8:	3304      	adds	r3, #4
   2f1fa:	2208      	movs	r2, #8
   2f1fc:	2100      	movs	r1, #0
   2f1fe:	0018      	movs	r0, r3
   2f200:	4b02      	ldr	r3, [pc, #8]	; (2f20c <TimerInit+0x24>)
   2f202:	4798      	blx	r3
}
   2f204:	46c0      	nop			; (mov r8, r8)
   2f206:	46bd      	mov	sp, r7
   2f208:	b002      	add	sp, #8
   2f20a:	bd80      	pop	{r7, pc}
   2f20c:	0003489f 	.word	0x0003489f

0002f210 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2f210:	b590      	push	{r4, r7, lr}
   2f212:	b085      	sub	sp, #20
   2f214:	af00      	add	r7, sp, #0
   2f216:	60f8      	str	r0, [r7, #12]
   2f218:	60b9      	str	r1, [r7, #8]
   2f21a:	607a      	str	r2, [r7, #4]
   2f21c:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2f21e:	683b      	ldr	r3, [r7, #0]
   2f220:	2b00      	cmp	r3, #0
   2f222:	d101      	bne.n	2f228 <WINC1500_read+0x18>
   2f224:	230a      	movs	r3, #10
   2f226:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2f228:	4b2c      	ldr	r3, [pc, #176]	; (2f2dc <WINC1500_read+0xcc>)
   2f22a:	681b      	ldr	r3, [r3, #0]
   2f22c:	2b00      	cmp	r3, #0
   2f22e:	d131      	bne.n	2f294 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2f230:	4b2b      	ldr	r3, [pc, #172]	; (2f2e0 <WINC1500_read+0xd0>)
   2f232:	2200      	movs	r2, #0
   2f234:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2f236:	68fb      	ldr	r3, [r7, #12]
   2f238:	681b      	ldr	r3, [r3, #0]
   2f23a:	b258      	sxtb	r0, r3
   2f23c:	683c      	ldr	r4, [r7, #0]
   2f23e:	2380      	movs	r3, #128	; 0x80
   2f240:	005a      	lsls	r2, r3, #1
   2f242:	4928      	ldr	r1, [pc, #160]	; (2f2e4 <WINC1500_read+0xd4>)
   2f244:	0023      	movs	r3, r4
   2f246:	4c28      	ldr	r4, [pc, #160]	; (2f2e8 <WINC1500_read+0xd8>)
   2f248:	47a0      	blx	r4
   2f24a:	1e03      	subs	r3, r0, #0
   2f24c:	d005      	beq.n	2f25a <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2f24e:	2301      	movs	r3, #1
   2f250:	425b      	negs	r3, r3
   2f252:	e03e      	b.n	2f2d2 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2f254:	2000      	movs	r0, #0
   2f256:	4b25      	ldr	r3, [pc, #148]	; (2f2ec <WINC1500_read+0xdc>)
   2f258:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2f25a:	4b21      	ldr	r3, [pc, #132]	; (2f2e0 <WINC1500_read+0xd0>)
   2f25c:	781b      	ldrb	r3, [r3, #0]
   2f25e:	2201      	movs	r2, #1
   2f260:	4053      	eors	r3, r2
   2f262:	b2db      	uxtb	r3, r3
   2f264:	2b00      	cmp	r3, #0
   2f266:	d1f5      	bne.n	2f254 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2f268:	4b21      	ldr	r3, [pc, #132]	; (2f2f0 <WINC1500_read+0xe0>)
   2f26a:	681b      	ldr	r3, [r3, #0]
   2f26c:	2b00      	cmp	r3, #0
   2f26e:	dd08      	ble.n	2f282 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2f270:	4b1f      	ldr	r3, [pc, #124]	; (2f2f0 <WINC1500_read+0xe0>)
   2f272:	681b      	ldr	r3, [r3, #0]
   2f274:	001a      	movs	r2, r3
   2f276:	4b19      	ldr	r3, [pc, #100]	; (2f2dc <WINC1500_read+0xcc>)
   2f278:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2f27a:	4b1e      	ldr	r3, [pc, #120]	; (2f2f4 <WINC1500_read+0xe4>)
   2f27c:	2200      	movs	r2, #0
   2f27e:	601a      	str	r2, [r3, #0]
   2f280:	e008      	b.n	2f294 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2f282:	4b16      	ldr	r3, [pc, #88]	; (2f2dc <WINC1500_read+0xcc>)
   2f284:	2200      	movs	r2, #0
   2f286:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2f288:	4b1a      	ldr	r3, [pc, #104]	; (2f2f4 <WINC1500_read+0xe4>)
   2f28a:	2200      	movs	r2, #0
   2f28c:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2f28e:	4b18      	ldr	r3, [pc, #96]	; (2f2f0 <WINC1500_read+0xe0>)
   2f290:	681b      	ldr	r3, [r3, #0]
   2f292:	e01e      	b.n	2f2d2 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2f294:	4b11      	ldr	r3, [pc, #68]	; (2f2dc <WINC1500_read+0xcc>)
   2f296:	681b      	ldr	r3, [r3, #0]
   2f298:	001a      	movs	r2, r3
   2f29a:	687b      	ldr	r3, [r7, #4]
   2f29c:	4293      	cmp	r3, r2
   2f29e:	dd02      	ble.n	2f2a6 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2f2a0:	2301      	movs	r3, #1
   2f2a2:	425b      	negs	r3, r3
   2f2a4:	e015      	b.n	2f2d2 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2f2a6:	4b13      	ldr	r3, [pc, #76]	; (2f2f4 <WINC1500_read+0xe4>)
   2f2a8:	681a      	ldr	r2, [r3, #0]
   2f2aa:	4b0e      	ldr	r3, [pc, #56]	; (2f2e4 <WINC1500_read+0xd4>)
   2f2ac:	18d1      	adds	r1, r2, r3
   2f2ae:	687a      	ldr	r2, [r7, #4]
   2f2b0:	68bb      	ldr	r3, [r7, #8]
   2f2b2:	0018      	movs	r0, r3
   2f2b4:	4b10      	ldr	r3, [pc, #64]	; (2f2f8 <WINC1500_read+0xe8>)
   2f2b6:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2f2b8:	4b08      	ldr	r3, [pc, #32]	; (2f2dc <WINC1500_read+0xcc>)
   2f2ba:	681a      	ldr	r2, [r3, #0]
   2f2bc:	687b      	ldr	r3, [r7, #4]
   2f2be:	1ad2      	subs	r2, r2, r3
   2f2c0:	4b06      	ldr	r3, [pc, #24]	; (2f2dc <WINC1500_read+0xcc>)
   2f2c2:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2f2c4:	4b0b      	ldr	r3, [pc, #44]	; (2f2f4 <WINC1500_read+0xe4>)
   2f2c6:	681a      	ldr	r2, [r3, #0]
   2f2c8:	687b      	ldr	r3, [r7, #4]
   2f2ca:	18d2      	adds	r2, r2, r3
   2f2cc:	4b09      	ldr	r3, [pc, #36]	; (2f2f4 <WINC1500_read+0xe4>)
   2f2ce:	601a      	str	r2, [r3, #0]
  
  return len;
   2f2d0:	687b      	ldr	r3, [r7, #4]
}
   2f2d2:	0018      	movs	r0, r3
   2f2d4:	46bd      	mov	sp, r7
   2f2d6:	b005      	add	sp, #20
   2f2d8:	bd90      	pop	{r4, r7, pc}
   2f2da:	46c0      	nop			; (mov r8, r8)
   2f2dc:	20004018 	.word	0x20004018
   2f2e0:	20003f13 	.word	0x20003f13
   2f2e4:	20003f14 	.word	0x20003f14
   2f2e8:	0002591d 	.word	0x0002591d
   2f2ec:	00021e65 	.word	0x00021e65
   2f2f0:	20003f0c 	.word	0x20003f0c
   2f2f4:	20004014 	.word	0x20004014
   2f2f8:	00034869 	.word	0x00034869

0002f2fc <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2f2fc:	b590      	push	{r4, r7, lr}
   2f2fe:	b085      	sub	sp, #20
   2f300:	af00      	add	r7, sp, #0
   2f302:	60f8      	str	r0, [r7, #12]
   2f304:	60b9      	str	r1, [r7, #8]
   2f306:	607a      	str	r2, [r7, #4]
   2f308:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2f30a:	4b10      	ldr	r3, [pc, #64]	; (2f34c <WINC1500_write+0x50>)
   2f30c:	2200      	movs	r2, #0
   2f30e:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2f310:	68fb      	ldr	r3, [r7, #12]
   2f312:	681b      	ldr	r3, [r3, #0]
   2f314:	b258      	sxtb	r0, r3
   2f316:	687b      	ldr	r3, [r7, #4]
   2f318:	b29a      	uxth	r2, r3
   2f31a:	68b9      	ldr	r1, [r7, #8]
   2f31c:	2300      	movs	r3, #0
   2f31e:	4c0c      	ldr	r4, [pc, #48]	; (2f350 <WINC1500_write+0x54>)
   2f320:	47a0      	blx	r4
   2f322:	1e03      	subs	r3, r0, #0
   2f324:	d005      	beq.n	2f332 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2f326:	2301      	movs	r3, #1
   2f328:	425b      	negs	r3, r3
   2f32a:	e00a      	b.n	2f342 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2f32c:	2000      	movs	r0, #0
   2f32e:	4b09      	ldr	r3, [pc, #36]	; (2f354 <WINC1500_write+0x58>)
   2f330:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2f332:	4b06      	ldr	r3, [pc, #24]	; (2f34c <WINC1500_write+0x50>)
   2f334:	781b      	ldrb	r3, [r3, #0]
   2f336:	2201      	movs	r2, #1
   2f338:	4053      	eors	r3, r2
   2f33a:	b2db      	uxtb	r3, r3
   2f33c:	2b00      	cmp	r3, #0
   2f33e:	d1f5      	bne.n	2f32c <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2f340:	687b      	ldr	r3, [r7, #4]
}
   2f342:	0018      	movs	r0, r3
   2f344:	46bd      	mov	sp, r7
   2f346:	b005      	add	sp, #20
   2f348:	bd90      	pop	{r4, r7, pc}
   2f34a:	46c0      	nop			; (mov r8, r8)
   2f34c:	20003f12 	.word	0x20003f12
   2f350:	000257b9 	.word	0x000257b9
   2f354:	00021e65 	.word	0x00021e65

0002f358 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2f358:	b580      	push	{r7, lr}
   2f35a:	b082      	sub	sp, #8
   2f35c:	af00      	add	r7, sp, #0
   2f35e:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2f360:	687b      	ldr	r3, [r7, #4]
   2f362:	681b      	ldr	r3, [r3, #0]
   2f364:	b25b      	sxtb	r3, r3
   2f366:	0018      	movs	r0, r3
   2f368:	4b06      	ldr	r3, [pc, #24]	; (2f384 <WINC1500_disconnect+0x2c>)
   2f36a:	4798      	blx	r3
	n->socket=-1;
   2f36c:	687b      	ldr	r3, [r7, #4]
   2f36e:	2201      	movs	r2, #1
   2f370:	4252      	negs	r2, r2
   2f372:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2f374:	4b04      	ldr	r3, [pc, #16]	; (2f388 <WINC1500_disconnect+0x30>)
   2f376:	2200      	movs	r2, #0
   2f378:	701a      	strb	r2, [r3, #0]
}
   2f37a:	46c0      	nop			; (mov r8, r8)
   2f37c:	46bd      	mov	sp, r7
   2f37e:	b002      	add	sp, #8
   2f380:	bd80      	pop	{r7, pc}
   2f382:	46c0      	nop			; (mov r8, r8)
   2f384:	00025a9d 	.word	0x00025a9d
   2f388:	20003f11 	.word	0x20003f11

0002f38c <NetworkInit>:


void NetworkInit(Network* n) {
   2f38c:	b580      	push	{r7, lr}
   2f38e:	b082      	sub	sp, #8
   2f390:	af00      	add	r7, sp, #0
   2f392:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2f394:	687b      	ldr	r3, [r7, #4]
   2f396:	2201      	movs	r2, #1
   2f398:	4252      	negs	r2, r2
   2f39a:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2f39c:	687b      	ldr	r3, [r7, #4]
   2f39e:	4a06      	ldr	r2, [pc, #24]	; (2f3b8 <NetworkInit+0x2c>)
   2f3a0:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2f3a2:	687b      	ldr	r3, [r7, #4]
   2f3a4:	4a05      	ldr	r2, [pc, #20]	; (2f3bc <NetworkInit+0x30>)
   2f3a6:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2f3a8:	687b      	ldr	r3, [r7, #4]
   2f3aa:	4a05      	ldr	r2, [pc, #20]	; (2f3c0 <NetworkInit+0x34>)
   2f3ac:	611a      	str	r2, [r3, #16]
}
   2f3ae:	46c0      	nop			; (mov r8, r8)
   2f3b0:	46bd      	mov	sp, r7
   2f3b2:	b002      	add	sp, #8
   2f3b4:	bd80      	pop	{r7, pc}
   2f3b6:	46c0      	nop			; (mov r8, r8)
   2f3b8:	0002f211 	.word	0x0002f211
   2f3bc:	0002f2fd 	.word	0x0002f2fd
   2f3c0:	0002f359 	.word	0x0002f359

0002f3c4 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2f3c4:	b580      	push	{r7, lr}
   2f3c6:	b088      	sub	sp, #32
   2f3c8:	af00      	add	r7, sp, #0
   2f3ca:	60f8      	str	r0, [r7, #12]
   2f3cc:	60b9      	str	r1, [r7, #8]
   2f3ce:	607a      	str	r2, [r7, #4]
   2f3d0:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2f3d2:	4b37      	ldr	r3, [pc, #220]	; (2f4b0 <ConnectNetwork+0xec>)
   2f3d4:	2200      	movs	r2, #0
   2f3d6:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2f3d8:	4b36      	ldr	r3, [pc, #216]	; (2f4b4 <ConnectNetwork+0xf0>)
   2f3da:	68ba      	ldr	r2, [r7, #8]
   2f3dc:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2f3de:	68bb      	ldr	r3, [r7, #8]
   2f3e0:	0018      	movs	r0, r3
   2f3e2:	4b35      	ldr	r3, [pc, #212]	; (2f4b8 <ConnectNetwork+0xf4>)
   2f3e4:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2f3e6:	e002      	b.n	2f3ee <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2f3e8:	2000      	movs	r0, #0
   2f3ea:	4b34      	ldr	r3, [pc, #208]	; (2f4bc <ConnectNetwork+0xf8>)
   2f3ec:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2f3ee:	4b30      	ldr	r3, [pc, #192]	; (2f4b0 <ConnectNetwork+0xec>)
   2f3f0:	781b      	ldrb	r3, [r3, #0]
   2f3f2:	2201      	movs	r2, #1
   2f3f4:	4053      	eors	r3, r2
   2f3f6:	b2db      	uxtb	r3, r3
   2f3f8:	2b00      	cmp	r3, #0
   2f3fa:	d1f5      	bne.n	2f3e8 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2f3fc:	4b30      	ldr	r3, [pc, #192]	; (2f4c0 <ConnectNetwork+0xfc>)
   2f3fe:	681a      	ldr	r2, [r3, #0]
   2f400:	68fb      	ldr	r3, [r7, #12]
   2f402:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2f404:	2310      	movs	r3, #16
   2f406:	18fb      	adds	r3, r7, r3
   2f408:	2202      	movs	r2, #2
   2f40a:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2f40c:	687b      	ldr	r3, [r7, #4]
   2f40e:	b29b      	uxth	r3, r3
   2f410:	021b      	lsls	r3, r3, #8
   2f412:	b21a      	sxth	r2, r3
   2f414:	687b      	ldr	r3, [r7, #4]
   2f416:	b29b      	uxth	r3, r3
   2f418:	0a1b      	lsrs	r3, r3, #8
   2f41a:	b29b      	uxth	r3, r3
   2f41c:	b21b      	sxth	r3, r3
   2f41e:	4313      	orrs	r3, r2
   2f420:	b21b      	sxth	r3, r3
   2f422:	b29a      	uxth	r2, r3
   2f424:	2310      	movs	r3, #16
   2f426:	18fb      	adds	r3, r7, r3
   2f428:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2f42a:	4b25      	ldr	r3, [pc, #148]	; (2f4c0 <ConnectNetwork+0xfc>)
   2f42c:	681b      	ldr	r3, [r3, #0]
   2f42e:	001a      	movs	r2, r3
   2f430:	2310      	movs	r3, #16
   2f432:	18fb      	adds	r3, r7, r3
   2f434:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2f436:	68fb      	ldr	r3, [r7, #12]
   2f438:	681b      	ldr	r3, [r3, #0]
   2f43a:	2b00      	cmp	r3, #0
   2f43c:	da0a      	bge.n	2f454 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2f43e:	683b      	ldr	r3, [r7, #0]
   2f440:	b2db      	uxtb	r3, r3
   2f442:	001a      	movs	r2, r3
   2f444:	2101      	movs	r1, #1
   2f446:	2002      	movs	r0, #2
   2f448:	4b1e      	ldr	r3, [pc, #120]	; (2f4c4 <ConnectNetwork+0x100>)
   2f44a:	4798      	blx	r3
   2f44c:	0003      	movs	r3, r0
   2f44e:	001a      	movs	r2, r3
   2f450:	68fb      	ldr	r3, [r7, #12]
   2f452:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2f454:	68fb      	ldr	r3, [r7, #12]
   2f456:	681b      	ldr	r3, [r3, #0]
   2f458:	3301      	adds	r3, #1
   2f45a:	d108      	bne.n	2f46e <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2f45c:	68fb      	ldr	r3, [r7, #12]
   2f45e:	681b      	ldr	r3, [r3, #0]
   2f460:	b25b      	sxtb	r3, r3
   2f462:	0018      	movs	r0, r3
   2f464:	4b18      	ldr	r3, [pc, #96]	; (2f4c8 <ConnectNetwork+0x104>)
   2f466:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2f468:	2309      	movs	r3, #9
   2f46a:	425b      	negs	r3, r3
   2f46c:	e01c      	b.n	2f4a8 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2f46e:	68fb      	ldr	r3, [r7, #12]
   2f470:	681b      	ldr	r3, [r3, #0]
   2f472:	b25b      	sxtb	r3, r3
   2f474:	2210      	movs	r2, #16
   2f476:	18b9      	adds	r1, r7, r2
   2f478:	2210      	movs	r2, #16
   2f47a:	0018      	movs	r0, r3
   2f47c:	4b13      	ldr	r3, [pc, #76]	; (2f4cc <ConnectNetwork+0x108>)
   2f47e:	4798      	blx	r3
   2f480:	1e03      	subs	r3, r0, #0
   2f482:	d002      	beq.n	2f48a <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2f484:	2309      	movs	r3, #9
   2f486:	425b      	negs	r3, r3
   2f488:	e00e      	b.n	2f4a8 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2f48a:	4b11      	ldr	r3, [pc, #68]	; (2f4d0 <ConnectNetwork+0x10c>)
   2f48c:	2200      	movs	r2, #0
   2f48e:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2f490:	e002      	b.n	2f498 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2f492:	2000      	movs	r0, #0
   2f494:	4b09      	ldr	r3, [pc, #36]	; (2f4bc <ConnectNetwork+0xf8>)
   2f496:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2f498:	4b0d      	ldr	r3, [pc, #52]	; (2f4d0 <ConnectNetwork+0x10c>)
   2f49a:	781b      	ldrb	r3, [r3, #0]
   2f49c:	2201      	movs	r2, #1
   2f49e:	4053      	eors	r3, r2
   2f4a0:	b2db      	uxtb	r3, r3
   2f4a2:	2b00      	cmp	r3, #0
   2f4a4:	d1f5      	bne.n	2f492 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2f4a6:	2300      	movs	r3, #0
   2f4a8:	0018      	movs	r0, r3
   2f4aa:	46bd      	mov	sp, r7
   2f4ac:	b008      	add	sp, #32
   2f4ae:	bd80      	pop	{r7, pc}
   2f4b0:	20003f10 	.word	0x20003f10
   2f4b4:	2000401c 	.word	0x2000401c
   2f4b8:	00025ce5 	.word	0x00025ce5
   2f4bc:	00021e65 	.word	0x00021e65
   2f4c0:	20003f08 	.word	0x20003f08
   2f4c4:	00025491 	.word	0x00025491
   2f4c8:	00025a9d 	.word	0x00025a9d
   2f4cc:	000256a5 	.word	0x000256a5
   2f4d0:	20003f11 	.word	0x20003f11

0002f4d4 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2f4d4:	b580      	push	{r7, lr}
   2f4d6:	b084      	sub	sp, #16
   2f4d8:	af00      	add	r7, sp, #0
   2f4da:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2f4dc:	687b      	ldr	r3, [r7, #4]
   2f4de:	2b00      	cmp	r3, #0
   2f4e0:	d022      	beq.n	2f528 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f4e2:	2300      	movs	r3, #0
   2f4e4:	60fb      	str	r3, [r7, #12]
   2f4e6:	e01b      	b.n	2f520 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2f4e8:	4a11      	ldr	r2, [pc, #68]	; (2f530 <allocateClient+0x5c>)
   2f4ea:	68fb      	ldr	r3, [r7, #12]
   2f4ec:	2164      	movs	r1, #100	; 0x64
   2f4ee:	434b      	muls	r3, r1
   2f4f0:	18d3      	adds	r3, r2, r3
   2f4f2:	3360      	adds	r3, #96	; 0x60
   2f4f4:	681b      	ldr	r3, [r3, #0]
   2f4f6:	2b00      	cmp	r3, #0
   2f4f8:	d10f      	bne.n	2f51a <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2f4fa:	4a0d      	ldr	r2, [pc, #52]	; (2f530 <allocateClient+0x5c>)
   2f4fc:	68fb      	ldr	r3, [r7, #12]
   2f4fe:	2164      	movs	r1, #100	; 0x64
   2f500:	434b      	muls	r3, r1
   2f502:	18d3      	adds	r3, r2, r3
   2f504:	3360      	adds	r3, #96	; 0x60
   2f506:	687a      	ldr	r2, [r7, #4]
   2f508:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2f50a:	68fb      	ldr	r3, [r7, #12]
   2f50c:	2264      	movs	r2, #100	; 0x64
   2f50e:	435a      	muls	r2, r3
   2f510:	4b07      	ldr	r3, [pc, #28]	; (2f530 <allocateClient+0x5c>)
   2f512:	18d2      	adds	r2, r2, r3
   2f514:	687b      	ldr	r3, [r7, #4]
   2f516:	61da      	str	r2, [r3, #28]
			return;
   2f518:	e007      	b.n	2f52a <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f51a:	68fb      	ldr	r3, [r7, #12]
   2f51c:	3301      	adds	r3, #1
   2f51e:	60fb      	str	r3, [r7, #12]
   2f520:	68fb      	ldr	r3, [r7, #12]
   2f522:	2b06      	cmp	r3, #6
   2f524:	d9e0      	bls.n	2f4e8 <allocateClient+0x14>
   2f526:	e000      	b.n	2f52a <allocateClient+0x56>
		return;
   2f528:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2f52a:	46bd      	mov	sp, r7
   2f52c:	b004      	add	sp, #16
   2f52e:	bd80      	pop	{r7, pc}
   2f530:	20004020 	.word	0x20004020

0002f534 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2f534:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f536:	b089      	sub	sp, #36	; 0x24
   2f538:	af04      	add	r7, sp, #16
   2f53a:	6078      	str	r0, [r7, #4]
   2f53c:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2f53e:	687b      	ldr	r3, [r7, #4]
   2f540:	2b00      	cmp	r3, #0
   2f542:	d00a      	beq.n	2f55a <mqtt_init+0x26>
   2f544:	683b      	ldr	r3, [r7, #0]
   2f546:	2b00      	cmp	r3, #0
   2f548:	d007      	beq.n	2f55a <mqtt_init+0x26>
   2f54a:	683b      	ldr	r3, [r7, #0]
   2f54c:	691b      	ldr	r3, [r3, #16]
   2f54e:	2b00      	cmp	r3, #0
   2f550:	d003      	beq.n	2f55a <mqtt_init+0x26>
   2f552:	683b      	ldr	r3, [r7, #0]
   2f554:	689b      	ldr	r3, [r3, #8]
   2f556:	2b00      	cmp	r3, #0
   2f558:	d102      	bne.n	2f560 <mqtt_init+0x2c>
		return FAILURE;
   2f55a:	2301      	movs	r3, #1
   2f55c:	425b      	negs	r3, r3
   2f55e:	e034      	b.n	2f5ca <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2f560:	683b      	ldr	r3, [r7, #0]
   2f562:	889b      	ldrh	r3, [r3, #4]
   2f564:	001a      	movs	r2, r3
   2f566:	23fa      	movs	r3, #250	; 0xfa
   2f568:	009b      	lsls	r3, r3, #2
   2f56a:	4353      	muls	r3, r2
   2f56c:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2f56e:	687b      	ldr	r3, [r7, #4]
   2f570:	3320      	adds	r3, #32
   2f572:	0018      	movs	r0, r3
   2f574:	4b17      	ldr	r3, [pc, #92]	; (2f5d4 <mqtt_init+0xa0>)
   2f576:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2f578:	687b      	ldr	r3, [r7, #4]
   2f57a:	3304      	adds	r3, #4
   2f57c:	6839      	ldr	r1, [r7, #0]
   2f57e:	2218      	movs	r2, #24
   2f580:	0018      	movs	r0, r3
   2f582:	4b15      	ldr	r3, [pc, #84]	; (2f5d8 <mqtt_init+0xa4>)
   2f584:	4798      	blx	r3
	allocateClient(module);
   2f586:	687b      	ldr	r3, [r7, #4]
   2f588:	0018      	movs	r0, r3
   2f58a:	4b14      	ldr	r3, [pc, #80]	; (2f5dc <mqtt_init+0xa8>)
   2f58c:	4798      	blx	r3
	
	if(module->client)
   2f58e:	687b      	ldr	r3, [r7, #4]
   2f590:	69db      	ldr	r3, [r3, #28]
   2f592:	2b00      	cmp	r3, #0
   2f594:	d017      	beq.n	2f5c6 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2f596:	687b      	ldr	r3, [r7, #4]
   2f598:	69d8      	ldr	r0, [r3, #28]
   2f59a:	687b      	ldr	r3, [r7, #4]
   2f59c:	3320      	adds	r3, #32
   2f59e:	001c      	movs	r4, r3
   2f5a0:	683b      	ldr	r3, [r7, #0]
   2f5a2:	691e      	ldr	r6, [r3, #16]
   2f5a4:	683b      	ldr	r3, [r7, #0]
   2f5a6:	695a      	ldr	r2, [r3, #20]
   2f5a8:	683b      	ldr	r3, [r7, #0]
   2f5aa:	6899      	ldr	r1, [r3, #8]
   2f5ac:	683b      	ldr	r3, [r7, #0]
   2f5ae:	68db      	ldr	r3, [r3, #12]
   2f5b0:	68fd      	ldr	r5, [r7, #12]
   2f5b2:	9302      	str	r3, [sp, #8]
   2f5b4:	9101      	str	r1, [sp, #4]
   2f5b6:	9200      	str	r2, [sp, #0]
   2f5b8:	0033      	movs	r3, r6
   2f5ba:	002a      	movs	r2, r5
   2f5bc:	0021      	movs	r1, r4
   2f5be:	4c08      	ldr	r4, [pc, #32]	; (2f5e0 <mqtt_init+0xac>)
   2f5c0:	47a0      	blx	r4
		return SUCCESS;
   2f5c2:	2300      	movs	r3, #0
   2f5c4:	e001      	b.n	2f5ca <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2f5c6:	2301      	movs	r3, #1
   2f5c8:	425b      	negs	r3, r3
}
   2f5ca:	0018      	movs	r0, r3
   2f5cc:	46bd      	mov	sp, r7
   2f5ce:	b005      	add	sp, #20
   2f5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f5d2:	46c0      	nop			; (mov r8, r8)
   2f5d4:	0002f38d 	.word	0x0002f38d
   2f5d8:	00034869 	.word	0x00034869
   2f5dc:	0002f4d5 	.word	0x0002f4d5
   2f5e0:	0002e405 	.word	0x0002e405

0002f5e4 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2f5e4:	b580      	push	{r7, lr}
   2f5e6:	b082      	sub	sp, #8
   2f5e8:	af00      	add	r7, sp, #0
   2f5ea:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2f5ec:	687b      	ldr	r3, [r7, #4]
   2f5ee:	4a0c      	ldr	r2, [pc, #48]	; (2f620 <mqtt_get_config_defaults+0x3c>)
   2f5f0:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2f5f2:	687b      	ldr	r3, [r7, #4]
   2f5f4:	2200      	movs	r2, #0
   2f5f6:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2f5f8:	687b      	ldr	r3, [r7, #4]
   2f5fa:	223c      	movs	r2, #60	; 0x3c
   2f5fc:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2f5fe:	687b      	ldr	r3, [r7, #4]
   2f600:	2200      	movs	r2, #0
   2f602:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2f604:	687b      	ldr	r3, [r7, #4]
   2f606:	2200      	movs	r2, #0
   2f608:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2f60a:	687b      	ldr	r3, [r7, #4]
   2f60c:	2200      	movs	r2, #0
   2f60e:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2f610:	687b      	ldr	r3, [r7, #4]
   2f612:	2200      	movs	r2, #0
   2f614:	615a      	str	r2, [r3, #20]
}
   2f616:	46c0      	nop			; (mov r8, r8)
   2f618:	46bd      	mov	sp, r7
   2f61a:	b002      	add	sp, #8
   2f61c:	bd80      	pop	{r7, pc}
   2f61e:	46c0      	nop			; (mov r8, r8)
   2f620:	0000075b 	.word	0x0000075b

0002f624 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2f624:	b580      	push	{r7, lr}
   2f626:	b082      	sub	sp, #8
   2f628:	af00      	add	r7, sp, #0
   2f62a:	6078      	str	r0, [r7, #4]
   2f62c:	6039      	str	r1, [r7, #0]
	if(module)
   2f62e:	687b      	ldr	r3, [r7, #4]
   2f630:	2b00      	cmp	r3, #0
   2f632:	d004      	beq.n	2f63e <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2f634:	687b      	ldr	r3, [r7, #4]
   2f636:	683a      	ldr	r2, [r7, #0]
   2f638:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2f63a:	2300      	movs	r3, #0
   2f63c:	e001      	b.n	2f642 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2f63e:	2301      	movs	r3, #1
   2f640:	425b      	negs	r3, r3
}
   2f642:	0018      	movs	r0, r3
   2f644:	46bd      	mov	sp, r7
   2f646:	b002      	add	sp, #8
   2f648:	bd80      	pop	{r7, pc}
	...

0002f64c <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2f64c:	b580      	push	{r7, lr}
   2f64e:	b082      	sub	sp, #8
   2f650:	af00      	add	r7, sp, #0
   2f652:	603a      	str	r2, [r7, #0]
   2f654:	1dfb      	adds	r3, r7, #7
   2f656:	1c02      	adds	r2, r0, #0
   2f658:	701a      	strb	r2, [r3, #0]
   2f65a:	1dbb      	adds	r3, r7, #6
   2f65c:	1c0a      	adds	r2, r1, #0
   2f65e:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2f660:	683a      	ldr	r2, [r7, #0]
   2f662:	1dbb      	adds	r3, r7, #6
   2f664:	7819      	ldrb	r1, [r3, #0]
   2f666:	1dfb      	adds	r3, r7, #7
   2f668:	781b      	ldrb	r3, [r3, #0]
   2f66a:	b25b      	sxtb	r3, r3
   2f66c:	0018      	movs	r0, r3
   2f66e:	4b03      	ldr	r3, [pc, #12]	; (2f67c <mqtt_socket_event_handler+0x30>)
   2f670:	4798      	blx	r3
}
   2f672:	46c0      	nop			; (mov r8, r8)
   2f674:	46bd      	mov	sp, r7
   2f676:	b002      	add	sp, #8
   2f678:	bd80      	pop	{r7, pc}
   2f67a:	46c0      	nop			; (mov r8, r8)
   2f67c:	0002f0c9 	.word	0x0002f0c9

0002f680 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2f680:	b580      	push	{r7, lr}
   2f682:	b082      	sub	sp, #8
   2f684:	af00      	add	r7, sp, #0
   2f686:	6078      	str	r0, [r7, #4]
   2f688:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2f68a:	683a      	ldr	r2, [r7, #0]
   2f68c:	687b      	ldr	r3, [r7, #4]
   2f68e:	0011      	movs	r1, r2
   2f690:	0018      	movs	r0, r3
   2f692:	4b03      	ldr	r3, [pc, #12]	; (2f6a0 <mqtt_socket_resolve_handler+0x20>)
   2f694:	4798      	blx	r3
}
   2f696:	46c0      	nop			; (mov r8, r8)
   2f698:	46bd      	mov	sp, r7
   2f69a:	b002      	add	sp, #8
   2f69c:	bd80      	pop	{r7, pc}
   2f69e:	46c0      	nop			; (mov r8, r8)
   2f6a0:	0002f079 	.word	0x0002f079

0002f6a4 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2f6a4:	b590      	push	{r4, r7, lr}
   2f6a6:	b085      	sub	sp, #20
   2f6a8:	af00      	add	r7, sp, #0
   2f6aa:	6078      	str	r0, [r7, #4]
   2f6ac:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2f6ae:	687b      	ldr	r3, [r7, #4]
   2f6b0:	3320      	adds	r3, #32
   2f6b2:	0018      	movs	r0, r3
   2f6b4:	687b      	ldr	r3, [r7, #4]
   2f6b6:	889b      	ldrh	r3, [r3, #4]
   2f6b8:	001a      	movs	r2, r3
   2f6ba:	687b      	ldr	r3, [r7, #4]
   2f6bc:	799b      	ldrb	r3, [r3, #6]
   2f6be:	6839      	ldr	r1, [r7, #0]
   2f6c0:	4c09      	ldr	r4, [pc, #36]	; (2f6e8 <mqtt_connect+0x44>)
   2f6c2:	47a0      	blx	r4
   2f6c4:	0003      	movs	r3, r0
   2f6c6:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2f6c8:	687b      	ldr	r3, [r7, #4]
   2f6ca:	681b      	ldr	r3, [r3, #0]
   2f6cc:	2b00      	cmp	r3, #0
   2f6ce:	d006      	beq.n	2f6de <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2f6d0:	687b      	ldr	r3, [r7, #4]
   2f6d2:	681b      	ldr	r3, [r3, #0]
   2f6d4:	220c      	movs	r2, #12
   2f6d6:	18ba      	adds	r2, r7, r2
   2f6d8:	6878      	ldr	r0, [r7, #4]
   2f6da:	2100      	movs	r1, #0
   2f6dc:	4798      	blx	r3
	return connResult.sock_connected.result;
   2f6de:	68fb      	ldr	r3, [r7, #12]
}
   2f6e0:	0018      	movs	r0, r3
   2f6e2:	46bd      	mov	sp, r7
   2f6e4:	b005      	add	sp, #20
   2f6e6:	bd90      	pop	{r4, r7, pc}
   2f6e8:	0002f3c5 	.word	0x0002f3c5

0002f6ec <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2f6ec:	b580      	push	{r7, lr}
   2f6ee:	b09c      	sub	sp, #112	; 0x70
   2f6f0:	af00      	add	r7, sp, #0
   2f6f2:	60f8      	str	r0, [r7, #12]
   2f6f4:	607a      	str	r2, [r7, #4]
   2f6f6:	603b      	str	r3, [r7, #0]
   2f6f8:	230b      	movs	r3, #11
   2f6fa:	18fb      	adds	r3, r7, r3
   2f6fc:	1c0a      	adds	r2, r1, #0
   2f6fe:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2f700:	2310      	movs	r3, #16
   2f702:	18fa      	adds	r2, r7, r3
   2f704:	4b31      	ldr	r3, [pc, #196]	; (2f7cc <mqtt_connect_broker+0xe0>)
   2f706:	0010      	movs	r0, r2
   2f708:	0019      	movs	r1, r3
   2f70a:	2358      	movs	r3, #88	; 0x58
   2f70c:	001a      	movs	r2, r3
   2f70e:	4b30      	ldr	r3, [pc, #192]	; (2f7d0 <mqtt_connect_broker+0xe4>)
   2f710:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2f712:	2310      	movs	r3, #16
   2f714:	18fb      	adds	r3, r7, r3
   2f716:	2204      	movs	r2, #4
   2f718:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2f71a:	2310      	movs	r3, #16
   2f71c:	18fb      	adds	r3, r7, r3
   2f71e:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2f720:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2f722:	2310      	movs	r3, #16
   2f724:	18fb      	adds	r3, r7, r3
   2f726:	687a      	ldr	r2, [r7, #4]
   2f728:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2f72a:	2310      	movs	r3, #16
   2f72c:	18fb      	adds	r3, r7, r3
   2f72e:	683a      	ldr	r2, [r7, #0]
   2f730:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2f732:	2310      	movs	r3, #16
   2f734:	18fb      	adds	r3, r7, r3
   2f736:	220b      	movs	r2, #11
   2f738:	18ba      	adds	r2, r7, r2
   2f73a:	7812      	ldrb	r2, [r2, #0]
   2f73c:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2f73e:	2310      	movs	r3, #16
   2f740:	18fb      	adds	r3, r7, r3
   2f742:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2f744:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2f746:	2310      	movs	r3, #16
   2f748:	18fb      	adds	r3, r7, r3
   2f74a:	2280      	movs	r2, #128	; 0x80
   2f74c:	18ba      	adds	r2, r7, r2
   2f74e:	6812      	ldr	r2, [r2, #0]
   2f750:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2f752:	2310      	movs	r3, #16
   2f754:	18fb      	adds	r3, r7, r3
   2f756:	228c      	movs	r2, #140	; 0x8c
   2f758:	18ba      	adds	r2, r7, r2
   2f75a:	213c      	movs	r1, #60	; 0x3c
   2f75c:	7812      	ldrb	r2, [r2, #0]
   2f75e:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2f760:	2310      	movs	r3, #16
   2f762:	18fb      	adds	r3, r7, r3
   2f764:	2288      	movs	r2, #136	; 0x88
   2f766:	18ba      	adds	r2, r7, r2
   2f768:	213d      	movs	r1, #61	; 0x3d
   2f76a:	7812      	ldrb	r2, [r2, #0]
   2f76c:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2f76e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2f770:	2b00      	cmp	r3, #0
   2f772:	d008      	beq.n	2f786 <mqtt_connect_broker+0x9a>
   2f774:	2380      	movs	r3, #128	; 0x80
   2f776:	18fb      	adds	r3, r7, r3
   2f778:	681b      	ldr	r3, [r3, #0]
   2f77a:	2b00      	cmp	r3, #0
   2f77c:	d003      	beq.n	2f786 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2f77e:	2310      	movs	r3, #16
   2f780:	18fb      	adds	r3, r7, r3
   2f782:	2201      	movs	r2, #1
   2f784:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2f786:	68fb      	ldr	r3, [r7, #12]
   2f788:	69db      	ldr	r3, [r3, #28]
   2f78a:	2210      	movs	r2, #16
   2f78c:	18ba      	adds	r2, r7, r2
   2f78e:	0011      	movs	r1, r2
   2f790:	0018      	movs	r0, r3
   2f792:	4b10      	ldr	r3, [pc, #64]	; (2f7d4 <mqtt_connect_broker+0xe8>)
   2f794:	4798      	blx	r3
   2f796:	0003      	movs	r3, r0
   2f798:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2f79a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f79c:	b2da      	uxtb	r2, r3
   2f79e:	2368      	movs	r3, #104	; 0x68
   2f7a0:	18fb      	adds	r3, r7, r3
   2f7a2:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2f7a4:	68fb      	ldr	r3, [r7, #12]
   2f7a6:	681b      	ldr	r3, [r3, #0]
   2f7a8:	2b00      	cmp	r3, #0
   2f7aa:	d006      	beq.n	2f7ba <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2f7ac:	68fb      	ldr	r3, [r7, #12]
   2f7ae:	681b      	ldr	r3, [r3, #0]
   2f7b0:	2268      	movs	r2, #104	; 0x68
   2f7b2:	18ba      	adds	r2, r7, r2
   2f7b4:	68f8      	ldr	r0, [r7, #12]
   2f7b6:	2101      	movs	r1, #1
   2f7b8:	4798      	blx	r3
	
	module->isConnected = true;
   2f7ba:	68fb      	ldr	r3, [r7, #12]
   2f7bc:	2234      	movs	r2, #52	; 0x34
   2f7be:	2101      	movs	r1, #1
   2f7c0:	5499      	strb	r1, [r3, r2]
	return rc;
   2f7c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2f7c4:	0018      	movs	r0, r3
   2f7c6:	46bd      	mov	sp, r7
   2f7c8:	b01c      	add	sp, #112	; 0x70
   2f7ca:	bd80      	pop	{r7, pc}
   2f7cc:	00039954 	.word	0x00039954
   2f7d0:	00034869 	.word	0x00034869
   2f7d4:	0002eb15 	.word	0x0002eb15

0002f7d8 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2f7d8:	b580      	push	{r7, lr}
   2f7da:	b084      	sub	sp, #16
   2f7dc:	af00      	add	r7, sp, #0
   2f7de:	6078      	str	r0, [r7, #4]
   2f7e0:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2f7e2:	687b      	ldr	r3, [r7, #4]
   2f7e4:	69db      	ldr	r3, [r3, #28]
   2f7e6:	0018      	movs	r0, r3
   2f7e8:	4b0c      	ldr	r3, [pc, #48]	; (2f81c <mqtt_disconnect+0x44>)
   2f7ea:	4798      	blx	r3
   2f7ec:	0003      	movs	r3, r0
   2f7ee:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2f7f0:	68fb      	ldr	r3, [r7, #12]
   2f7f2:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2f7f4:	687b      	ldr	r3, [r7, #4]
   2f7f6:	681b      	ldr	r3, [r3, #0]
   2f7f8:	2b00      	cmp	r3, #0
   2f7fa:	d006      	beq.n	2f80a <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2f7fc:	687b      	ldr	r3, [r7, #4]
   2f7fe:	681b      	ldr	r3, [r3, #0]
   2f800:	2208      	movs	r2, #8
   2f802:	18ba      	adds	r2, r7, r2
   2f804:	6878      	ldr	r0, [r7, #4]
   2f806:	2105      	movs	r1, #5
   2f808:	4798      	blx	r3
	
	module->isConnected = false;
   2f80a:	687b      	ldr	r3, [r7, #4]
   2f80c:	2234      	movs	r2, #52	; 0x34
   2f80e:	2100      	movs	r1, #0
   2f810:	5499      	strb	r1, [r3, r2]
	return rc;
   2f812:	68fb      	ldr	r3, [r7, #12]
}
   2f814:	0018      	movs	r0, r3
   2f816:	46bd      	mov	sp, r7
   2f818:	b004      	add	sp, #16
   2f81a:	bd80      	pop	{r7, pc}
   2f81c:	0002efa1 	.word	0x0002efa1

0002f820 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2f820:	b580      	push	{r7, lr}
   2f822:	b08a      	sub	sp, #40	; 0x28
   2f824:	af00      	add	r7, sp, #0
   2f826:	60f8      	str	r0, [r7, #12]
   2f828:	60b9      	str	r1, [r7, #8]
   2f82a:	607a      	str	r2, [r7, #4]
   2f82c:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2f82e:	2314      	movs	r3, #20
   2f830:	18fb      	adds	r3, r7, r3
   2f832:	2230      	movs	r2, #48	; 0x30
   2f834:	18ba      	adds	r2, r7, r2
   2f836:	7812      	ldrb	r2, [r2, #0]
   2f838:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2f83a:	2314      	movs	r3, #20
   2f83c:	18fb      	adds	r3, r7, r3
   2f83e:	687a      	ldr	r2, [r7, #4]
   2f840:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2f842:	2314      	movs	r3, #20
   2f844:	18fb      	adds	r3, r7, r3
   2f846:	683a      	ldr	r2, [r7, #0]
   2f848:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2f84a:	2314      	movs	r3, #20
   2f84c:	18fb      	adds	r3, r7, r3
   2f84e:	2234      	movs	r2, #52	; 0x34
   2f850:	18ba      	adds	r2, r7, r2
   2f852:	7812      	ldrb	r2, [r2, #0]
   2f854:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2f856:	68fb      	ldr	r3, [r7, #12]
   2f858:	69db      	ldr	r3, [r3, #28]
   2f85a:	2214      	movs	r2, #20
   2f85c:	18ba      	adds	r2, r7, r2
   2f85e:	68b9      	ldr	r1, [r7, #8]
   2f860:	0018      	movs	r0, r3
   2f862:	4b09      	ldr	r3, [pc, #36]	; (2f888 <mqtt_publish+0x68>)
   2f864:	4798      	blx	r3
   2f866:	0003      	movs	r3, r0
   2f868:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2f86a:	68fb      	ldr	r3, [r7, #12]
   2f86c:	681b      	ldr	r3, [r3, #0]
   2f86e:	2b00      	cmp	r3, #0
   2f870:	d005      	beq.n	2f87e <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2f872:	68fb      	ldr	r3, [r7, #12]
   2f874:	681b      	ldr	r3, [r3, #0]
   2f876:	68f8      	ldr	r0, [r7, #12]
   2f878:	2200      	movs	r2, #0
   2f87a:	2102      	movs	r1, #2
   2f87c:	4798      	blx	r3
	
	return rc;
   2f87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f880:	0018      	movs	r0, r3
   2f882:	46bd      	mov	sp, r7
   2f884:	b00a      	add	sp, #40	; 0x28
   2f886:	bd80      	pop	{r7, pc}
   2f888:	0002ede1 	.word	0x0002ede1

0002f88c <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2f88c:	b590      	push	{r4, r7, lr}
   2f88e:	b087      	sub	sp, #28
   2f890:	af00      	add	r7, sp, #0
   2f892:	60f8      	str	r0, [r7, #12]
   2f894:	60b9      	str	r1, [r7, #8]
   2f896:	603b      	str	r3, [r7, #0]
   2f898:	1dfb      	adds	r3, r7, #7
   2f89a:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2f89c:	68fb      	ldr	r3, [r7, #12]
   2f89e:	69d8      	ldr	r0, [r3, #28]
   2f8a0:	683c      	ldr	r4, [r7, #0]
   2f8a2:	1dfb      	adds	r3, r7, #7
   2f8a4:	781a      	ldrb	r2, [r3, #0]
   2f8a6:	68b9      	ldr	r1, [r7, #8]
   2f8a8:	0023      	movs	r3, r4
   2f8aa:	4c09      	ldr	r4, [pc, #36]	; (2f8d0 <mqtt_subscribe+0x44>)
   2f8ac:	47a0      	blx	r4
   2f8ae:	0003      	movs	r3, r0
   2f8b0:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2f8b2:	68fb      	ldr	r3, [r7, #12]
   2f8b4:	681b      	ldr	r3, [r3, #0]
   2f8b6:	2b00      	cmp	r3, #0
   2f8b8:	d005      	beq.n	2f8c6 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2f8ba:	68fb      	ldr	r3, [r7, #12]
   2f8bc:	681b      	ldr	r3, [r3, #0]
   2f8be:	68f8      	ldr	r0, [r7, #12]
   2f8c0:	2200      	movs	r2, #0
   2f8c2:	2103      	movs	r1, #3
   2f8c4:	4798      	blx	r3
	
	return rc;
   2f8c6:	697b      	ldr	r3, [r7, #20]
}
   2f8c8:	0018      	movs	r0, r3
   2f8ca:	46bd      	mov	sp, r7
   2f8cc:	b007      	add	sp, #28
   2f8ce:	bd90      	pop	{r4, r7, pc}
   2f8d0:	0002ec55 	.word	0x0002ec55

0002f8d4 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2f8d4:	b580      	push	{r7, lr}
   2f8d6:	b082      	sub	sp, #8
   2f8d8:	af00      	add	r7, sp, #0
   2f8da:	6078      	str	r0, [r7, #4]
   2f8dc:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2f8de:	687b      	ldr	r3, [r7, #4]
   2f8e0:	69db      	ldr	r3, [r3, #28]
   2f8e2:	683a      	ldr	r2, [r7, #0]
   2f8e4:	0011      	movs	r1, r2
   2f8e6:	0018      	movs	r0, r3
   2f8e8:	4b03      	ldr	r3, [pc, #12]	; (2f8f8 <mqtt_yield+0x24>)
   2f8ea:	4798      	blx	r3
   2f8ec:	0003      	movs	r3, r0
   2f8ee:	0018      	movs	r0, r3
   2f8f0:	46bd      	mov	sp, r7
   2f8f2:	b002      	add	sp, #8
   2f8f4:	bd80      	pop	{r7, pc}
   2f8f6:	46c0      	nop			; (mov r8, r8)
   2f8f8:	0002ea5d 	.word	0x0002ea5d

0002f8fc <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2f8fc:	b590      	push	{r4, r7, lr}
   2f8fe:	b085      	sub	sp, #20
   2f900:	af00      	add	r7, sp, #0
   2f902:	6078      	str	r0, [r7, #4]
	int len = 0;
   2f904:	2300      	movs	r3, #0
   2f906:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2f908:	687b      	ldr	r3, [r7, #4]
   2f90a:	7a1b      	ldrb	r3, [r3, #8]
   2f90c:	2b03      	cmp	r3, #3
   2f90e:	d102      	bne.n	2f916 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2f910:	230c      	movs	r3, #12
   2f912:	60fb      	str	r3, [r7, #12]
   2f914:	e005      	b.n	2f922 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2f916:	687b      	ldr	r3, [r7, #4]
   2f918:	7a1b      	ldrb	r3, [r3, #8]
   2f91a:	2b04      	cmp	r3, #4
   2f91c:	d101      	bne.n	2f922 <MQTTSerialize_connectLength+0x26>
		len = 10;
   2f91e:	230a      	movs	r3, #10
   2f920:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2f922:	687b      	ldr	r3, [r7, #4]
   2f924:	68d8      	ldr	r0, [r3, #12]
   2f926:	6919      	ldr	r1, [r3, #16]
   2f928:	695a      	ldr	r2, [r3, #20]
   2f92a:	4b25      	ldr	r3, [pc, #148]	; (2f9c0 <MQTTSerialize_connectLength+0xc4>)
   2f92c:	4798      	blx	r3
   2f92e:	0003      	movs	r3, r0
   2f930:	3302      	adds	r3, #2
   2f932:	68fa      	ldr	r2, [r7, #12]
   2f934:	18d3      	adds	r3, r2, r3
   2f936:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2f938:	687b      	ldr	r3, [r7, #4]
   2f93a:	7edb      	ldrb	r3, [r3, #27]
   2f93c:	2b00      	cmp	r3, #0
   2f93e:	d013      	beq.n	2f968 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2f940:	687b      	ldr	r3, [r7, #4]
   2f942:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2f944:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2f946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2f948:	4b1d      	ldr	r3, [pc, #116]	; (2f9c0 <MQTTSerialize_connectLength+0xc4>)
   2f94a:	4798      	blx	r3
   2f94c:	0003      	movs	r3, r0
   2f94e:	1c9c      	adds	r4, r3, #2
   2f950:	687b      	ldr	r3, [r7, #4]
   2f952:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2f954:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2f956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2f958:	4b19      	ldr	r3, [pc, #100]	; (2f9c0 <MQTTSerialize_connectLength+0xc4>)
   2f95a:	4798      	blx	r3
   2f95c:	0003      	movs	r3, r0
   2f95e:	18e3      	adds	r3, r4, r3
   2f960:	3302      	adds	r3, #2
   2f962:	68fa      	ldr	r2, [r7, #12]
   2f964:	18d3      	adds	r3, r2, r3
   2f966:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2f968:	687b      	ldr	r3, [r7, #4]
   2f96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f96c:	2b00      	cmp	r3, #0
   2f96e:	d103      	bne.n	2f978 <MQTTSerialize_connectLength+0x7c>
   2f970:	687b      	ldr	r3, [r7, #4]
   2f972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f974:	2b00      	cmp	r3, #0
   2f976:	d00a      	beq.n	2f98e <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2f978:	687b      	ldr	r3, [r7, #4]
   2f97a:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2f97c:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2f97e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2f980:	4b0f      	ldr	r3, [pc, #60]	; (2f9c0 <MQTTSerialize_connectLength+0xc4>)
   2f982:	4798      	blx	r3
   2f984:	0003      	movs	r3, r0
   2f986:	3302      	adds	r3, #2
   2f988:	68fa      	ldr	r2, [r7, #12]
   2f98a:	18d3      	adds	r3, r2, r3
   2f98c:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2f98e:	687b      	ldr	r3, [r7, #4]
   2f990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f992:	2b00      	cmp	r3, #0
   2f994:	d103      	bne.n	2f99e <MQTTSerialize_connectLength+0xa2>
   2f996:	687b      	ldr	r3, [r7, #4]
   2f998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f99a:	2b00      	cmp	r3, #0
   2f99c:	d00a      	beq.n	2f9b4 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2f99e:	687b      	ldr	r3, [r7, #4]
   2f9a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2f9a2:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2f9a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2f9a6:	4b06      	ldr	r3, [pc, #24]	; (2f9c0 <MQTTSerialize_connectLength+0xc4>)
   2f9a8:	4798      	blx	r3
   2f9aa:	0003      	movs	r3, r0
   2f9ac:	3302      	adds	r3, #2
   2f9ae:	68fa      	ldr	r2, [r7, #12]
   2f9b0:	18d3      	adds	r3, r2, r3
   2f9b2:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2f9b4:	68fb      	ldr	r3, [r7, #12]
}
   2f9b6:	0018      	movs	r0, r3
   2f9b8:	46bd      	mov	sp, r7
   2f9ba:	b005      	add	sp, #20
   2f9bc:	bd90      	pop	{r4, r7, pc}
   2f9be:	46c0      	nop			; (mov r8, r8)
   2f9c0:	0003036d 	.word	0x0003036d

0002f9c4 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2f9c4:	b590      	push	{r4, r7, lr}
   2f9c6:	b08b      	sub	sp, #44	; 0x2c
   2f9c8:	af00      	add	r7, sp, #0
   2f9ca:	60f8      	str	r0, [r7, #12]
   2f9cc:	60b9      	str	r1, [r7, #8]
   2f9ce:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2f9d0:	68fb      	ldr	r3, [r7, #12]
   2f9d2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2f9d4:	2300      	movs	r3, #0
   2f9d6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2f9d8:	2300      	movs	r3, #0
   2f9da:	617b      	str	r3, [r7, #20]
	int len = 0;
   2f9dc:	2300      	movs	r3, #0
   2f9de:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2f9e0:	2301      	movs	r3, #1
   2f9e2:	425b      	negs	r3, r3
   2f9e4:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2f9e6:	687b      	ldr	r3, [r7, #4]
   2f9e8:	0018      	movs	r0, r3
   2f9ea:	4b8c      	ldr	r3, [pc, #560]	; (2fc1c <MQTTSerialize_connect+0x258>)
   2f9ec:	4798      	blx	r3
   2f9ee:	0003      	movs	r3, r0
   2f9f0:	623b      	str	r3, [r7, #32]
   2f9f2:	6a3b      	ldr	r3, [r7, #32]
   2f9f4:	0018      	movs	r0, r3
   2f9f6:	4b8a      	ldr	r3, [pc, #552]	; (2fc20 <MQTTSerialize_connect+0x25c>)
   2f9f8:	4798      	blx	r3
   2f9fa:	0002      	movs	r2, r0
   2f9fc:	68bb      	ldr	r3, [r7, #8]
   2f9fe:	429a      	cmp	r2, r3
   2fa00:	dd03      	ble.n	2fa0a <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2fa02:	2302      	movs	r3, #2
   2fa04:	425b      	negs	r3, r3
   2fa06:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2fa08:	e103      	b.n	2fc12 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2fa0a:	2318      	movs	r3, #24
   2fa0c:	18fb      	adds	r3, r7, r3
   2fa0e:	2200      	movs	r2, #0
   2fa10:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2fa12:	2318      	movs	r3, #24
   2fa14:	18fb      	adds	r3, r7, r3
   2fa16:	781a      	ldrb	r2, [r3, #0]
   2fa18:	210f      	movs	r1, #15
   2fa1a:	400a      	ands	r2, r1
   2fa1c:	1c11      	adds	r1, r2, #0
   2fa1e:	2210      	movs	r2, #16
   2fa20:	430a      	orrs	r2, r1
   2fa22:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fa24:	2318      	movs	r3, #24
   2fa26:	18fb      	adds	r3, r7, r3
   2fa28:	781a      	ldrb	r2, [r3, #0]
   2fa2a:	231c      	movs	r3, #28
   2fa2c:	18fb      	adds	r3, r7, r3
   2fa2e:	0011      	movs	r1, r2
   2fa30:	0018      	movs	r0, r3
   2fa32:	4b7c      	ldr	r3, [pc, #496]	; (2fc24 <MQTTSerialize_connect+0x260>)
   2fa34:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2fa36:	69fb      	ldr	r3, [r7, #28]
   2fa38:	6a3a      	ldr	r2, [r7, #32]
   2fa3a:	0011      	movs	r1, r2
   2fa3c:	0018      	movs	r0, r3
   2fa3e:	4b7a      	ldr	r3, [pc, #488]	; (2fc28 <MQTTSerialize_connect+0x264>)
   2fa40:	4798      	blx	r3
   2fa42:	0002      	movs	r2, r0
   2fa44:	69fb      	ldr	r3, [r7, #28]
   2fa46:	189b      	adds	r3, r3, r2
   2fa48:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2fa4a:	687b      	ldr	r3, [r7, #4]
   2fa4c:	7a1b      	ldrb	r3, [r3, #8]
   2fa4e:	2b04      	cmp	r3, #4
   2fa50:	d10d      	bne.n	2fa6e <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2fa52:	4a76      	ldr	r2, [pc, #472]	; (2fc2c <MQTTSerialize_connect+0x268>)
   2fa54:	231c      	movs	r3, #28
   2fa56:	18fb      	adds	r3, r7, r3
   2fa58:	0011      	movs	r1, r2
   2fa5a:	0018      	movs	r0, r3
   2fa5c:	4b74      	ldr	r3, [pc, #464]	; (2fc30 <MQTTSerialize_connect+0x26c>)
   2fa5e:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2fa60:	231c      	movs	r3, #28
   2fa62:	18fb      	adds	r3, r7, r3
   2fa64:	2104      	movs	r1, #4
   2fa66:	0018      	movs	r0, r3
   2fa68:	4b6e      	ldr	r3, [pc, #440]	; (2fc24 <MQTTSerialize_connect+0x260>)
   2fa6a:	4798      	blx	r3
   2fa6c:	e00c      	b.n	2fa88 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2fa6e:	4a71      	ldr	r2, [pc, #452]	; (2fc34 <MQTTSerialize_connect+0x270>)
   2fa70:	231c      	movs	r3, #28
   2fa72:	18fb      	adds	r3, r7, r3
   2fa74:	0011      	movs	r1, r2
   2fa76:	0018      	movs	r0, r3
   2fa78:	4b6d      	ldr	r3, [pc, #436]	; (2fc30 <MQTTSerialize_connect+0x26c>)
   2fa7a:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2fa7c:	231c      	movs	r3, #28
   2fa7e:	18fb      	adds	r3, r7, r3
   2fa80:	2103      	movs	r1, #3
   2fa82:	0018      	movs	r0, r3
   2fa84:	4b67      	ldr	r3, [pc, #412]	; (2fc24 <MQTTSerialize_connect+0x260>)
   2fa86:	4798      	blx	r3
	}

	flags.all = 0;
   2fa88:	2314      	movs	r3, #20
   2fa8a:	18fb      	adds	r3, r7, r3
   2fa8c:	2200      	movs	r2, #0
   2fa8e:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2fa90:	687b      	ldr	r3, [r7, #4]
   2fa92:	7e9b      	ldrb	r3, [r3, #26]
   2fa94:	1c1a      	adds	r2, r3, #0
   2fa96:	2301      	movs	r3, #1
   2fa98:	4013      	ands	r3, r2
   2fa9a:	b2da      	uxtb	r2, r3
   2fa9c:	2314      	movs	r3, #20
   2fa9e:	18fb      	adds	r3, r7, r3
   2faa0:	2101      	movs	r1, #1
   2faa2:	400a      	ands	r2, r1
   2faa4:	1890      	adds	r0, r2, r2
   2faa6:	781a      	ldrb	r2, [r3, #0]
   2faa8:	2102      	movs	r1, #2
   2faaa:	438a      	bics	r2, r1
   2faac:	1c11      	adds	r1, r2, #0
   2faae:	1c02      	adds	r2, r0, #0
   2fab0:	430a      	orrs	r2, r1
   2fab2:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2fab4:	687b      	ldr	r3, [r7, #4]
   2fab6:	7edb      	ldrb	r3, [r3, #27]
   2fab8:	1e5a      	subs	r2, r3, #1
   2faba:	4193      	sbcs	r3, r2
   2fabc:	b2da      	uxtb	r2, r3
   2fabe:	2314      	movs	r3, #20
   2fac0:	18fb      	adds	r3, r7, r3
   2fac2:	2101      	movs	r1, #1
   2fac4:	400a      	ands	r2, r1
   2fac6:	0090      	lsls	r0, r2, #2
   2fac8:	781a      	ldrb	r2, [r3, #0]
   2faca:	2104      	movs	r1, #4
   2facc:	438a      	bics	r2, r1
   2face:	1c11      	adds	r1, r2, #0
   2fad0:	1c02      	adds	r2, r0, #0
   2fad2:	430a      	orrs	r2, r1
   2fad4:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2fad6:	2314      	movs	r3, #20
   2fad8:	18fb      	adds	r3, r7, r3
   2fada:	781b      	ldrb	r3, [r3, #0]
   2fadc:	2204      	movs	r2, #4
   2fade:	4013      	ands	r3, r2
   2fae0:	b2db      	uxtb	r3, r3
   2fae2:	2b00      	cmp	r3, #0
   2fae4:	d025      	beq.n	2fb32 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2fae6:	687b      	ldr	r3, [r7, #4]
   2fae8:	223d      	movs	r2, #61	; 0x3d
   2faea:	5c9b      	ldrb	r3, [r3, r2]
   2faec:	1c1a      	adds	r2, r3, #0
   2faee:	2303      	movs	r3, #3
   2faf0:	4013      	ands	r3, r2
   2faf2:	b2da      	uxtb	r2, r3
   2faf4:	2314      	movs	r3, #20
   2faf6:	18fb      	adds	r3, r7, r3
   2faf8:	2103      	movs	r1, #3
   2fafa:	400a      	ands	r2, r1
   2fafc:	00d0      	lsls	r0, r2, #3
   2fafe:	781a      	ldrb	r2, [r3, #0]
   2fb00:	2118      	movs	r1, #24
   2fb02:	438a      	bics	r2, r1
   2fb04:	1c11      	adds	r1, r2, #0
   2fb06:	1c02      	adds	r2, r0, #0
   2fb08:	430a      	orrs	r2, r1
   2fb0a:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2fb0c:	687b      	ldr	r3, [r7, #4]
   2fb0e:	223c      	movs	r2, #60	; 0x3c
   2fb10:	5c9b      	ldrb	r3, [r3, r2]
   2fb12:	1c1a      	adds	r2, r3, #0
   2fb14:	2301      	movs	r3, #1
   2fb16:	4013      	ands	r3, r2
   2fb18:	b2da      	uxtb	r2, r3
   2fb1a:	2314      	movs	r3, #20
   2fb1c:	18fb      	adds	r3, r7, r3
   2fb1e:	2101      	movs	r1, #1
   2fb20:	400a      	ands	r2, r1
   2fb22:	0150      	lsls	r0, r2, #5
   2fb24:	781a      	ldrb	r2, [r3, #0]
   2fb26:	2120      	movs	r1, #32
   2fb28:	438a      	bics	r2, r1
   2fb2a:	1c11      	adds	r1, r2, #0
   2fb2c:	1c02      	adds	r2, r0, #0
   2fb2e:	430a      	orrs	r2, r1
   2fb30:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2fb32:	687b      	ldr	r3, [r7, #4]
   2fb34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2fb36:	2b00      	cmp	r3, #0
   2fb38:	d103      	bne.n	2fb42 <MQTTSerialize_connect+0x17e>
   2fb3a:	687b      	ldr	r3, [r7, #4]
   2fb3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2fb3e:	2b00      	cmp	r3, #0
   2fb40:	d006      	beq.n	2fb50 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2fb42:	2314      	movs	r3, #20
   2fb44:	18fb      	adds	r3, r7, r3
   2fb46:	781a      	ldrb	r2, [r3, #0]
   2fb48:	2180      	movs	r1, #128	; 0x80
   2fb4a:	4249      	negs	r1, r1
   2fb4c:	430a      	orrs	r2, r1
   2fb4e:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2fb50:	687b      	ldr	r3, [r7, #4]
   2fb52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fb54:	2b00      	cmp	r3, #0
   2fb56:	d103      	bne.n	2fb60 <MQTTSerialize_connect+0x19c>
   2fb58:	687b      	ldr	r3, [r7, #4]
   2fb5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2fb5c:	2b00      	cmp	r3, #0
   2fb5e:	d005      	beq.n	2fb6c <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2fb60:	2314      	movs	r3, #20
   2fb62:	18fb      	adds	r3, r7, r3
   2fb64:	781a      	ldrb	r2, [r3, #0]
   2fb66:	2140      	movs	r1, #64	; 0x40
   2fb68:	430a      	orrs	r2, r1
   2fb6a:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2fb6c:	2314      	movs	r3, #20
   2fb6e:	18fb      	adds	r3, r7, r3
   2fb70:	781a      	ldrb	r2, [r3, #0]
   2fb72:	231c      	movs	r3, #28
   2fb74:	18fb      	adds	r3, r7, r3
   2fb76:	0011      	movs	r1, r2
   2fb78:	0018      	movs	r0, r3
   2fb7a:	4b2a      	ldr	r3, [pc, #168]	; (2fc24 <MQTTSerialize_connect+0x260>)
   2fb7c:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2fb7e:	687b      	ldr	r3, [r7, #4]
   2fb80:	8b1b      	ldrh	r3, [r3, #24]
   2fb82:	001a      	movs	r2, r3
   2fb84:	231c      	movs	r3, #28
   2fb86:	18fb      	adds	r3, r7, r3
   2fb88:	0011      	movs	r1, r2
   2fb8a:	0018      	movs	r0, r3
   2fb8c:	4b2a      	ldr	r3, [pc, #168]	; (2fc38 <MQTTSerialize_connect+0x274>)
   2fb8e:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2fb90:	687b      	ldr	r3, [r7, #4]
   2fb92:	221c      	movs	r2, #28
   2fb94:	18b8      	adds	r0, r7, r2
   2fb96:	68d9      	ldr	r1, [r3, #12]
   2fb98:	691a      	ldr	r2, [r3, #16]
   2fb9a:	695b      	ldr	r3, [r3, #20]
   2fb9c:	4c27      	ldr	r4, [pc, #156]	; (2fc3c <MQTTSerialize_connect+0x278>)
   2fb9e:	47a0      	blx	r4
	if (options->willFlag)
   2fba0:	687b      	ldr	r3, [r7, #4]
   2fba2:	7edb      	ldrb	r3, [r3, #27]
   2fba4:	2b00      	cmp	r3, #0
   2fba6:	d00f      	beq.n	2fbc8 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2fba8:	687b      	ldr	r3, [r7, #4]
   2fbaa:	221c      	movs	r2, #28
   2fbac:	18b8      	adds	r0, r7, r2
   2fbae:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2fbb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2fbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2fbb4:	4c21      	ldr	r4, [pc, #132]	; (2fc3c <MQTTSerialize_connect+0x278>)
   2fbb6:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2fbb8:	687b      	ldr	r3, [r7, #4]
   2fbba:	221c      	movs	r2, #28
   2fbbc:	18b8      	adds	r0, r7, r2
   2fbbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2fbc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2fbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2fbc4:	4c1d      	ldr	r4, [pc, #116]	; (2fc3c <MQTTSerialize_connect+0x278>)
   2fbc6:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2fbc8:	2314      	movs	r3, #20
   2fbca:	18fb      	adds	r3, r7, r3
   2fbcc:	781b      	ldrb	r3, [r3, #0]
   2fbce:	227f      	movs	r2, #127	; 0x7f
   2fbd0:	4393      	bics	r3, r2
   2fbd2:	b2db      	uxtb	r3, r3
   2fbd4:	2b00      	cmp	r3, #0
   2fbd6:	d007      	beq.n	2fbe8 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2fbd8:	687b      	ldr	r3, [r7, #4]
   2fbda:	221c      	movs	r2, #28
   2fbdc:	18b8      	adds	r0, r7, r2
   2fbde:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2fbe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2fbe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2fbe4:	4c15      	ldr	r4, [pc, #84]	; (2fc3c <MQTTSerialize_connect+0x278>)
   2fbe6:	47a0      	blx	r4
	if (flags.bits.password)
   2fbe8:	2314      	movs	r3, #20
   2fbea:	18fb      	adds	r3, r7, r3
   2fbec:	781b      	ldrb	r3, [r3, #0]
   2fbee:	2240      	movs	r2, #64	; 0x40
   2fbf0:	4013      	ands	r3, r2
   2fbf2:	b2db      	uxtb	r3, r3
   2fbf4:	2b00      	cmp	r3, #0
   2fbf6:	d007      	beq.n	2fc08 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2fbf8:	687b      	ldr	r3, [r7, #4]
   2fbfa:	221c      	movs	r2, #28
   2fbfc:	18b8      	adds	r0, r7, r2
   2fbfe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2fc00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2fc02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2fc04:	4c0d      	ldr	r4, [pc, #52]	; (2fc3c <MQTTSerialize_connect+0x278>)
   2fc06:	47a0      	blx	r4

	rc = ptr - buf;
   2fc08:	69fb      	ldr	r3, [r7, #28]
   2fc0a:	001a      	movs	r2, r3
   2fc0c:	68fb      	ldr	r3, [r7, #12]
   2fc0e:	1ad3      	subs	r3, r2, r3
   2fc10:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2fc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fc14:	0018      	movs	r0, r3
   2fc16:	46bd      	mov	sp, r7
   2fc18:	b00b      	add	sp, #44	; 0x2c
   2fc1a:	bd90      	pop	{r4, r7, pc}
   2fc1c:	0002f8fd 	.word	0x0002f8fd
   2fc20:	00030091 	.word	0x00030091
   2fc24:	000301b3 	.word	0x000301b3
   2fc28:	0002ff99 	.word	0x0002ff99
   2fc2c:	000399ac 	.word	0x000399ac
   2fc30:	00030235 	.word	0x00030235
   2fc34:	000399b4 	.word	0x000399b4
   2fc38:	000301dd 	.word	0x000301dd
   2fc3c:	00030285 	.word	0x00030285

0002fc40 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2fc40:	b580      	push	{r7, lr}
   2fc42:	b08a      	sub	sp, #40	; 0x28
   2fc44:	af00      	add	r7, sp, #0
   2fc46:	60f8      	str	r0, [r7, #12]
   2fc48:	60b9      	str	r1, [r7, #8]
   2fc4a:	607a      	str	r2, [r7, #4]
   2fc4c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fc4e:	2300      	movs	r3, #0
   2fc50:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fc52:	687b      	ldr	r3, [r7, #4]
   2fc54:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fc56:	2300      	movs	r3, #0
   2fc58:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fc5a:	2300      	movs	r3, #0
   2fc5c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2fc5e:	2300      	movs	r3, #0
   2fc60:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fc62:	2318      	movs	r3, #24
   2fc64:	18fb      	adds	r3, r7, r3
   2fc66:	0018      	movs	r0, r3
   2fc68:	4b25      	ldr	r3, [pc, #148]	; (2fd00 <MQTTDeserialize_connack+0xc0>)
   2fc6a:	4798      	blx	r3
   2fc6c:	0003      	movs	r3, r0
   2fc6e:	001a      	movs	r2, r3
   2fc70:	231c      	movs	r3, #28
   2fc72:	18fb      	adds	r3, r7, r3
   2fc74:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2fc76:	231c      	movs	r3, #28
   2fc78:	18fb      	adds	r3, r7, r3
   2fc7a:	781b      	ldrb	r3, [r3, #0]
   2fc7c:	220f      	movs	r2, #15
   2fc7e:	4393      	bics	r3, r2
   2fc80:	b2db      	uxtb	r3, r3
   2fc82:	2b20      	cmp	r3, #32
   2fc84:	d134      	bne.n	2fcf0 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fc86:	69bb      	ldr	r3, [r7, #24]
   2fc88:	2214      	movs	r2, #20
   2fc8a:	18ba      	adds	r2, r7, r2
   2fc8c:	0011      	movs	r1, r2
   2fc8e:	0018      	movs	r0, r3
   2fc90:	4b1c      	ldr	r3, [pc, #112]	; (2fd04 <MQTTDeserialize_connack+0xc4>)
   2fc92:	4798      	blx	r3
   2fc94:	0003      	movs	r3, r0
   2fc96:	627b      	str	r3, [r7, #36]	; 0x24
   2fc98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fc9a:	69bb      	ldr	r3, [r7, #24]
   2fc9c:	189b      	adds	r3, r3, r2
   2fc9e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fca0:	69bb      	ldr	r3, [r7, #24]
   2fca2:	697a      	ldr	r2, [r7, #20]
   2fca4:	189b      	adds	r3, r3, r2
   2fca6:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2fca8:	6a3b      	ldr	r3, [r7, #32]
   2fcaa:	69ba      	ldr	r2, [r7, #24]
   2fcac:	1a9b      	subs	r3, r3, r2
   2fcae:	2b01      	cmp	r3, #1
   2fcb0:	dd20      	ble.n	2fcf4 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2fcb2:	2318      	movs	r3, #24
   2fcb4:	18fb      	adds	r3, r7, r3
   2fcb6:	0018      	movs	r0, r3
   2fcb8:	4b11      	ldr	r3, [pc, #68]	; (2fd00 <MQTTDeserialize_connack+0xc0>)
   2fcba:	4798      	blx	r3
   2fcbc:	0003      	movs	r3, r0
   2fcbe:	001a      	movs	r2, r3
   2fcc0:	2310      	movs	r3, #16
   2fcc2:	18fb      	adds	r3, r7, r3
   2fcc4:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2fcc6:	2310      	movs	r3, #16
   2fcc8:	18fb      	adds	r3, r7, r3
   2fcca:	781b      	ldrb	r3, [r3, #0]
   2fccc:	061b      	lsls	r3, r3, #24
   2fcce:	0fdb      	lsrs	r3, r3, #31
   2fcd0:	b2db      	uxtb	r3, r3
   2fcd2:	001a      	movs	r2, r3
   2fcd4:	68fb      	ldr	r3, [r7, #12]
   2fcd6:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2fcd8:	2318      	movs	r3, #24
   2fcda:	18fb      	adds	r3, r7, r3
   2fcdc:	0018      	movs	r0, r3
   2fcde:	4b08      	ldr	r3, [pc, #32]	; (2fd00 <MQTTDeserialize_connack+0xc0>)
   2fce0:	4798      	blx	r3
   2fce2:	0003      	movs	r3, r0
   2fce4:	001a      	movs	r2, r3
   2fce6:	68bb      	ldr	r3, [r7, #8]
   2fce8:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2fcea:	2301      	movs	r3, #1
   2fcec:	627b      	str	r3, [r7, #36]	; 0x24
   2fcee:	e002      	b.n	2fcf6 <MQTTDeserialize_connack+0xb6>
		goto exit;
   2fcf0:	46c0      	nop			; (mov r8, r8)
   2fcf2:	e000      	b.n	2fcf6 <MQTTDeserialize_connack+0xb6>
		goto exit;
   2fcf4:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fcf8:	0018      	movs	r0, r3
   2fcfa:	46bd      	mov	sp, r7
   2fcfc:	b00a      	add	sp, #40	; 0x28
   2fcfe:	bd80      	pop	{r7, pc}
   2fd00:	00030187 	.word	0x00030187
   2fd04:	00030121 	.word	0x00030121

0002fd08 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2fd08:	b580      	push	{r7, lr}
   2fd0a:	b088      	sub	sp, #32
   2fd0c:	af00      	add	r7, sp, #0
   2fd0e:	60f8      	str	r0, [r7, #12]
   2fd10:	60b9      	str	r1, [r7, #8]
   2fd12:	1dfb      	adds	r3, r7, #7
   2fd14:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2fd16:	2300      	movs	r3, #0
   2fd18:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2fd1a:	2301      	movs	r3, #1
   2fd1c:	425b      	negs	r3, r3
   2fd1e:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2fd20:	68fb      	ldr	r3, [r7, #12]
   2fd22:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2fd24:	68bb      	ldr	r3, [r7, #8]
   2fd26:	2b01      	cmp	r3, #1
   2fd28:	dc03      	bgt.n	2fd32 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2fd2a:	2302      	movs	r3, #2
   2fd2c:	425b      	negs	r3, r3
   2fd2e:	61fb      	str	r3, [r7, #28]
		goto exit;
   2fd30:	e029      	b.n	2fd86 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2fd32:	2318      	movs	r3, #24
   2fd34:	18fb      	adds	r3, r7, r3
   2fd36:	2200      	movs	r2, #0
   2fd38:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2fd3a:	1dfb      	adds	r3, r7, #7
   2fd3c:	781b      	ldrb	r3, [r3, #0]
   2fd3e:	220f      	movs	r2, #15
   2fd40:	4013      	ands	r3, r2
   2fd42:	b2da      	uxtb	r2, r3
   2fd44:	2318      	movs	r3, #24
   2fd46:	18fb      	adds	r3, r7, r3
   2fd48:	0110      	lsls	r0, r2, #4
   2fd4a:	781a      	ldrb	r2, [r3, #0]
   2fd4c:	210f      	movs	r1, #15
   2fd4e:	400a      	ands	r2, r1
   2fd50:	1c11      	adds	r1, r2, #0
   2fd52:	1c02      	adds	r2, r0, #0
   2fd54:	430a      	orrs	r2, r1
   2fd56:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fd58:	2318      	movs	r3, #24
   2fd5a:	18fb      	adds	r3, r7, r3
   2fd5c:	781a      	ldrb	r2, [r3, #0]
   2fd5e:	2314      	movs	r3, #20
   2fd60:	18fb      	adds	r3, r7, r3
   2fd62:	0011      	movs	r1, r2
   2fd64:	0018      	movs	r0, r3
   2fd66:	4b0a      	ldr	r3, [pc, #40]	; (2fd90 <MQTTSerialize_zero+0x88>)
   2fd68:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2fd6a:	697b      	ldr	r3, [r7, #20]
   2fd6c:	2100      	movs	r1, #0
   2fd6e:	0018      	movs	r0, r3
   2fd70:	4b08      	ldr	r3, [pc, #32]	; (2fd94 <MQTTSerialize_zero+0x8c>)
   2fd72:	4798      	blx	r3
   2fd74:	0002      	movs	r2, r0
   2fd76:	697b      	ldr	r3, [r7, #20]
   2fd78:	189b      	adds	r3, r3, r2
   2fd7a:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2fd7c:	697b      	ldr	r3, [r7, #20]
   2fd7e:	001a      	movs	r2, r3
   2fd80:	68fb      	ldr	r3, [r7, #12]
   2fd82:	1ad3      	subs	r3, r2, r3
   2fd84:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fd86:	69fb      	ldr	r3, [r7, #28]
}
   2fd88:	0018      	movs	r0, r3
   2fd8a:	46bd      	mov	sp, r7
   2fd8c:	b008      	add	sp, #32
   2fd8e:	bd80      	pop	{r7, pc}
   2fd90:	000301b3 	.word	0x000301b3
   2fd94:	0002ff99 	.word	0x0002ff99

0002fd98 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2fd98:	b580      	push	{r7, lr}
   2fd9a:	b082      	sub	sp, #8
   2fd9c:	af00      	add	r7, sp, #0
   2fd9e:	6078      	str	r0, [r7, #4]
   2fda0:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2fda2:	6839      	ldr	r1, [r7, #0]
   2fda4:	687b      	ldr	r3, [r7, #4]
   2fda6:	220e      	movs	r2, #14
   2fda8:	0018      	movs	r0, r3
   2fdaa:	4b03      	ldr	r3, [pc, #12]	; (2fdb8 <MQTTSerialize_disconnect+0x20>)
   2fdac:	4798      	blx	r3
   2fdae:	0003      	movs	r3, r0
}
   2fdb0:	0018      	movs	r0, r3
   2fdb2:	46bd      	mov	sp, r7
   2fdb4:	b002      	add	sp, #8
   2fdb6:	bd80      	pop	{r7, pc}
   2fdb8:	0002fd09 	.word	0x0002fd09

0002fdbc <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2fdbc:	b580      	push	{r7, lr}
   2fdbe:	b082      	sub	sp, #8
   2fdc0:	af00      	add	r7, sp, #0
   2fdc2:	6078      	str	r0, [r7, #4]
   2fdc4:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2fdc6:	6839      	ldr	r1, [r7, #0]
   2fdc8:	687b      	ldr	r3, [r7, #4]
   2fdca:	220c      	movs	r2, #12
   2fdcc:	0018      	movs	r0, r3
   2fdce:	4b03      	ldr	r3, [pc, #12]	; (2fddc <MQTTSerialize_pingreq+0x20>)
   2fdd0:	4798      	blx	r3
   2fdd2:	0003      	movs	r3, r0
}
   2fdd4:	0018      	movs	r0, r3
   2fdd6:	46bd      	mov	sp, r7
   2fdd8:	b002      	add	sp, #8
   2fdda:	bd80      	pop	{r7, pc}
   2fddc:	0002fd09 	.word	0x0002fd09

0002fde0 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2fde0:	b580      	push	{r7, lr}
   2fde2:	b08a      	sub	sp, #40	; 0x28
   2fde4:	af00      	add	r7, sp, #0
   2fde6:	60f8      	str	r0, [r7, #12]
   2fde8:	60b9      	str	r1, [r7, #8]
   2fdea:	607a      	str	r2, [r7, #4]
   2fdec:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fdee:	2300      	movs	r3, #0
   2fdf0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fdf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fdf4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fdf6:	2300      	movs	r3, #0
   2fdf8:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fdfa:	2300      	movs	r3, #0
   2fdfc:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2fdfe:	2300      	movs	r3, #0
   2fe00:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fe02:	2318      	movs	r3, #24
   2fe04:	18fb      	adds	r3, r7, r3
   2fe06:	0018      	movs	r0, r3
   2fe08:	4b32      	ldr	r3, [pc, #200]	; (2fed4 <MQTTDeserialize_publish+0xf4>)
   2fe0a:	4798      	blx	r3
   2fe0c:	0003      	movs	r3, r0
   2fe0e:	001a      	movs	r2, r3
   2fe10:	231c      	movs	r3, #28
   2fe12:	18fb      	adds	r3, r7, r3
   2fe14:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2fe16:	231c      	movs	r3, #28
   2fe18:	18fb      	adds	r3, r7, r3
   2fe1a:	781b      	ldrb	r3, [r3, #0]
   2fe1c:	220f      	movs	r2, #15
   2fe1e:	4393      	bics	r3, r2
   2fe20:	b2db      	uxtb	r3, r3
   2fe22:	2b30      	cmp	r3, #48	; 0x30
   2fe24:	d150      	bne.n	2fec8 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2fe26:	231c      	movs	r3, #28
   2fe28:	18fb      	adds	r3, r7, r3
   2fe2a:	781b      	ldrb	r3, [r3, #0]
   2fe2c:	071b      	lsls	r3, r3, #28
   2fe2e:	0fdb      	lsrs	r3, r3, #31
   2fe30:	b2db      	uxtb	r3, r3
   2fe32:	001a      	movs	r2, r3
   2fe34:	68fb      	ldr	r3, [r7, #12]
   2fe36:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2fe38:	231c      	movs	r3, #28
   2fe3a:	18fb      	adds	r3, r7, r3
   2fe3c:	781b      	ldrb	r3, [r3, #0]
   2fe3e:	075b      	lsls	r3, r3, #29
   2fe40:	0f9b      	lsrs	r3, r3, #30
   2fe42:	b2db      	uxtb	r3, r3
   2fe44:	001a      	movs	r2, r3
   2fe46:	68bb      	ldr	r3, [r7, #8]
   2fe48:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2fe4a:	231c      	movs	r3, #28
   2fe4c:	18fb      	adds	r3, r7, r3
   2fe4e:	781b      	ldrb	r3, [r3, #0]
   2fe50:	07db      	lsls	r3, r3, #31
   2fe52:	0fdb      	lsrs	r3, r3, #31
   2fe54:	b2db      	uxtb	r3, r3
   2fe56:	001a      	movs	r2, r3
   2fe58:	687b      	ldr	r3, [r7, #4]
   2fe5a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fe5c:	69bb      	ldr	r3, [r7, #24]
   2fe5e:	2214      	movs	r2, #20
   2fe60:	18ba      	adds	r2, r7, r2
   2fe62:	0011      	movs	r1, r2
   2fe64:	0018      	movs	r0, r3
   2fe66:	4b1c      	ldr	r3, [pc, #112]	; (2fed8 <MQTTDeserialize_publish+0xf8>)
   2fe68:	4798      	blx	r3
   2fe6a:	0003      	movs	r3, r0
   2fe6c:	627b      	str	r3, [r7, #36]	; 0x24
   2fe6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fe70:	69bb      	ldr	r3, [r7, #24]
   2fe72:	189b      	adds	r3, r3, r2
   2fe74:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fe76:	69bb      	ldr	r3, [r7, #24]
   2fe78:	697a      	ldr	r2, [r7, #20]
   2fe7a:	189b      	adds	r3, r3, r2
   2fe7c:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2fe7e:	6a3a      	ldr	r2, [r7, #32]
   2fe80:	2318      	movs	r3, #24
   2fe82:	18f9      	adds	r1, r7, r3
   2fe84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fe86:	0018      	movs	r0, r3
   2fe88:	4b14      	ldr	r3, [pc, #80]	; (2fedc <MQTTDeserialize_publish+0xfc>)
   2fe8a:	4798      	blx	r3
   2fe8c:	1e03      	subs	r3, r0, #0
   2fe8e:	d01c      	beq.n	2feca <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2fe90:	6a3b      	ldr	r3, [r7, #32]
   2fe92:	69ba      	ldr	r2, [r7, #24]
   2fe94:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2fe96:	d418      	bmi.n	2feca <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2fe98:	68bb      	ldr	r3, [r7, #8]
   2fe9a:	681b      	ldr	r3, [r3, #0]
   2fe9c:	2b00      	cmp	r3, #0
   2fe9e:	dd08      	ble.n	2feb2 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2fea0:	2318      	movs	r3, #24
   2fea2:	18fb      	adds	r3, r7, r3
   2fea4:	0018      	movs	r0, r3
   2fea6:	4b0e      	ldr	r3, [pc, #56]	; (2fee0 <MQTTDeserialize_publish+0x100>)
   2fea8:	4798      	blx	r3
   2feaa:	0003      	movs	r3, r0
   2feac:	b29a      	uxth	r2, r3
   2feae:	683b      	ldr	r3, [r7, #0]
   2feb0:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2feb2:	6a3b      	ldr	r3, [r7, #32]
   2feb4:	69ba      	ldr	r2, [r7, #24]
   2feb6:	1a9a      	subs	r2, r3, r2
   2feb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2feba:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2febc:	69ba      	ldr	r2, [r7, #24]
   2febe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2fec0:	601a      	str	r2, [r3, #0]
	rc = 1;
   2fec2:	2301      	movs	r3, #1
   2fec4:	627b      	str	r3, [r7, #36]	; 0x24
   2fec6:	e000      	b.n	2feca <MQTTDeserialize_publish+0xea>
		goto exit;
   2fec8:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2feca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fecc:	0018      	movs	r0, r3
   2fece:	46bd      	mov	sp, r7
   2fed0:	b00a      	add	sp, #40	; 0x28
   2fed2:	bd80      	pop	{r7, pc}
   2fed4:	00030187 	.word	0x00030187
   2fed8:	00030121 	.word	0x00030121
   2fedc:	00030305 	.word	0x00030305
   2fee0:	00030155 	.word	0x00030155

0002fee4 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2fee4:	b580      	push	{r7, lr}
   2fee6:	b08a      	sub	sp, #40	; 0x28
   2fee8:	af00      	add	r7, sp, #0
   2feea:	60f8      	str	r0, [r7, #12]
   2feec:	60b9      	str	r1, [r7, #8]
   2feee:	607a      	str	r2, [r7, #4]
   2fef0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fef2:	2300      	movs	r3, #0
   2fef4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fef6:	683b      	ldr	r3, [r7, #0]
   2fef8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fefa:	2300      	movs	r3, #0
   2fefc:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fefe:	2300      	movs	r3, #0
   2ff00:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2ff02:	2318      	movs	r3, #24
   2ff04:	18fb      	adds	r3, r7, r3
   2ff06:	0018      	movs	r0, r3
   2ff08:	4b20      	ldr	r3, [pc, #128]	; (2ff8c <MQTTDeserialize_ack+0xa8>)
   2ff0a:	4798      	blx	r3
   2ff0c:	0003      	movs	r3, r0
   2ff0e:	001a      	movs	r2, r3
   2ff10:	231c      	movs	r3, #28
   2ff12:	18fb      	adds	r3, r7, r3
   2ff14:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2ff16:	231c      	movs	r3, #28
   2ff18:	18fb      	adds	r3, r7, r3
   2ff1a:	781b      	ldrb	r3, [r3, #0]
   2ff1c:	071b      	lsls	r3, r3, #28
   2ff1e:	0fdb      	lsrs	r3, r3, #31
   2ff20:	b2db      	uxtb	r3, r3
   2ff22:	001a      	movs	r2, r3
   2ff24:	68bb      	ldr	r3, [r7, #8]
   2ff26:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2ff28:	231c      	movs	r3, #28
   2ff2a:	18fb      	adds	r3, r7, r3
   2ff2c:	781b      	ldrb	r3, [r3, #0]
   2ff2e:	061b      	lsls	r3, r3, #24
   2ff30:	0f1b      	lsrs	r3, r3, #28
   2ff32:	b2db      	uxtb	r3, r3
   2ff34:	001a      	movs	r2, r3
   2ff36:	68fb      	ldr	r3, [r7, #12]
   2ff38:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2ff3a:	69bb      	ldr	r3, [r7, #24]
   2ff3c:	2214      	movs	r2, #20
   2ff3e:	18ba      	adds	r2, r7, r2
   2ff40:	0011      	movs	r1, r2
   2ff42:	0018      	movs	r0, r3
   2ff44:	4b12      	ldr	r3, [pc, #72]	; (2ff90 <MQTTDeserialize_ack+0xac>)
   2ff46:	4798      	blx	r3
   2ff48:	0003      	movs	r3, r0
   2ff4a:	627b      	str	r3, [r7, #36]	; 0x24
   2ff4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ff4e:	69bb      	ldr	r3, [r7, #24]
   2ff50:	189b      	adds	r3, r3, r2
   2ff52:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2ff54:	69bb      	ldr	r3, [r7, #24]
   2ff56:	697a      	ldr	r2, [r7, #20]
   2ff58:	189b      	adds	r3, r3, r2
   2ff5a:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2ff5c:	6a3b      	ldr	r3, [r7, #32]
   2ff5e:	69ba      	ldr	r2, [r7, #24]
   2ff60:	1a9b      	subs	r3, r3, r2
   2ff62:	2b01      	cmp	r3, #1
   2ff64:	dd0b      	ble.n	2ff7e <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2ff66:	2318      	movs	r3, #24
   2ff68:	18fb      	adds	r3, r7, r3
   2ff6a:	0018      	movs	r0, r3
   2ff6c:	4b09      	ldr	r3, [pc, #36]	; (2ff94 <MQTTDeserialize_ack+0xb0>)
   2ff6e:	4798      	blx	r3
   2ff70:	0003      	movs	r3, r0
   2ff72:	b29a      	uxth	r2, r3
   2ff74:	687b      	ldr	r3, [r7, #4]
   2ff76:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2ff78:	2301      	movs	r3, #1
   2ff7a:	627b      	str	r3, [r7, #36]	; 0x24
   2ff7c:	e000      	b.n	2ff80 <MQTTDeserialize_ack+0x9c>
		goto exit;
   2ff7e:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2ff80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2ff82:	0018      	movs	r0, r3
   2ff84:	46bd      	mov	sp, r7
   2ff86:	b00a      	add	sp, #40	; 0x28
   2ff88:	bd80      	pop	{r7, pc}
   2ff8a:	46c0      	nop			; (mov r8, r8)
   2ff8c:	00030187 	.word	0x00030187
   2ff90:	00030121 	.word	0x00030121
   2ff94:	00030155 	.word	0x00030155

0002ff98 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2ff98:	b580      	push	{r7, lr}
   2ff9a:	b084      	sub	sp, #16
   2ff9c:	af00      	add	r7, sp, #0
   2ff9e:	6078      	str	r0, [r7, #4]
   2ffa0:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2ffa2:	2300      	movs	r3, #0
   2ffa4:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2ffa6:	683b      	ldr	r3, [r7, #0]
   2ffa8:	4a17      	ldr	r2, [pc, #92]	; (30008 <MQTTPacket_encode+0x70>)
   2ffaa:	4013      	ands	r3, r2
   2ffac:	d504      	bpl.n	2ffb8 <MQTTPacket_encode+0x20>
   2ffae:	3b01      	subs	r3, #1
   2ffb0:	2280      	movs	r2, #128	; 0x80
   2ffb2:	4252      	negs	r2, r2
   2ffb4:	4313      	orrs	r3, r2
   2ffb6:	3301      	adds	r3, #1
   2ffb8:	001a      	movs	r2, r3
   2ffba:	230b      	movs	r3, #11
   2ffbc:	18fb      	adds	r3, r7, r3
   2ffbe:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2ffc0:	683b      	ldr	r3, [r7, #0]
   2ffc2:	2b00      	cmp	r3, #0
   2ffc4:	da00      	bge.n	2ffc8 <MQTTPacket_encode+0x30>
   2ffc6:	337f      	adds	r3, #127	; 0x7f
   2ffc8:	11db      	asrs	r3, r3, #7
   2ffca:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2ffcc:	683b      	ldr	r3, [r7, #0]
   2ffce:	2b00      	cmp	r3, #0
   2ffd0:	dd08      	ble.n	2ffe4 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2ffd2:	230b      	movs	r3, #11
   2ffd4:	18fb      	adds	r3, r7, r3
   2ffd6:	220b      	movs	r2, #11
   2ffd8:	18ba      	adds	r2, r7, r2
   2ffda:	7812      	ldrb	r2, [r2, #0]
   2ffdc:	2180      	movs	r1, #128	; 0x80
   2ffde:	4249      	negs	r1, r1
   2ffe0:	430a      	orrs	r2, r1
   2ffe2:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2ffe4:	68fb      	ldr	r3, [r7, #12]
   2ffe6:	1c5a      	adds	r2, r3, #1
   2ffe8:	60fa      	str	r2, [r7, #12]
   2ffea:	001a      	movs	r2, r3
   2ffec:	687b      	ldr	r3, [r7, #4]
   2ffee:	189b      	adds	r3, r3, r2
   2fff0:	220b      	movs	r2, #11
   2fff2:	18ba      	adds	r2, r7, r2
   2fff4:	7812      	ldrb	r2, [r2, #0]
   2fff6:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2fff8:	683b      	ldr	r3, [r7, #0]
   2fffa:	2b00      	cmp	r3, #0
   2fffc:	dcd3      	bgt.n	2ffa6 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2fffe:	68fb      	ldr	r3, [r7, #12]
}
   30000:	0018      	movs	r0, r3
   30002:	46bd      	mov	sp, r7
   30004:	b004      	add	sp, #16
   30006:	bd80      	pop	{r7, pc}
   30008:	8000007f 	.word	0x8000007f

0003000c <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   3000c:	b580      	push	{r7, lr}
   3000e:	b086      	sub	sp, #24
   30010:	af00      	add	r7, sp, #0
   30012:	6078      	str	r0, [r7, #4]
   30014:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   30016:	2301      	movs	r3, #1
   30018:	617b      	str	r3, [r7, #20]
	int len = 0;
   3001a:	2300      	movs	r3, #0
   3001c:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   3001e:	683b      	ldr	r3, [r7, #0]
   30020:	2200      	movs	r2, #0
   30022:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   30024:	2301      	movs	r3, #1
   30026:	425b      	negs	r3, r3
   30028:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   3002a:	693b      	ldr	r3, [r7, #16]
   3002c:	3301      	adds	r3, #1
   3002e:	613b      	str	r3, [r7, #16]
   30030:	693b      	ldr	r3, [r7, #16]
   30032:	2b04      	cmp	r3, #4
   30034:	dd03      	ble.n	3003e <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   30036:	2301      	movs	r3, #1
   30038:	425b      	negs	r3, r3
   3003a:	60fb      	str	r3, [r7, #12]
			goto exit;
   3003c:	e022      	b.n	30084 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   3003e:	230b      	movs	r3, #11
   30040:	18fa      	adds	r2, r7, r3
   30042:	687b      	ldr	r3, [r7, #4]
   30044:	2101      	movs	r1, #1
   30046:	0010      	movs	r0, r2
   30048:	4798      	blx	r3
   3004a:	0003      	movs	r3, r0
   3004c:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   3004e:	68fb      	ldr	r3, [r7, #12]
   30050:	2b01      	cmp	r3, #1
   30052:	d116      	bne.n	30082 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   30054:	683b      	ldr	r3, [r7, #0]
   30056:	681a      	ldr	r2, [r3, #0]
   30058:	230b      	movs	r3, #11
   3005a:	18fb      	adds	r3, r7, r3
   3005c:	781b      	ldrb	r3, [r3, #0]
   3005e:	0019      	movs	r1, r3
   30060:	237f      	movs	r3, #127	; 0x7f
   30062:	400b      	ands	r3, r1
   30064:	6979      	ldr	r1, [r7, #20]
   30066:	434b      	muls	r3, r1
   30068:	18d2      	adds	r2, r2, r3
   3006a:	683b      	ldr	r3, [r7, #0]
   3006c:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   3006e:	697b      	ldr	r3, [r7, #20]
   30070:	01db      	lsls	r3, r3, #7
   30072:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   30074:	230b      	movs	r3, #11
   30076:	18fb      	adds	r3, r7, r3
   30078:	781b      	ldrb	r3, [r3, #0]
   3007a:	b25b      	sxtb	r3, r3
   3007c:	2b00      	cmp	r3, #0
   3007e:	dbd1      	blt.n	30024 <MQTTPacket_decode+0x18>
   30080:	e000      	b.n	30084 <MQTTPacket_decode+0x78>
			goto exit;
   30082:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   30084:	693b      	ldr	r3, [r7, #16]
}
   30086:	0018      	movs	r0, r3
   30088:	46bd      	mov	sp, r7
   3008a:	b006      	add	sp, #24
   3008c:	bd80      	pop	{r7, pc}
	...

00030090 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   30090:	b580      	push	{r7, lr}
   30092:	b082      	sub	sp, #8
   30094:	af00      	add	r7, sp, #0
   30096:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   30098:	687b      	ldr	r3, [r7, #4]
   3009a:	3301      	adds	r3, #1
   3009c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   3009e:	687b      	ldr	r3, [r7, #4]
   300a0:	2b7f      	cmp	r3, #127	; 0x7f
   300a2:	dc03      	bgt.n	300ac <MQTTPacket_len+0x1c>
		rem_len += 1;
   300a4:	687b      	ldr	r3, [r7, #4]
   300a6:	3301      	adds	r3, #1
   300a8:	607b      	str	r3, [r7, #4]
   300aa:	e012      	b.n	300d2 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   300ac:	687b      	ldr	r3, [r7, #4]
   300ae:	4a0b      	ldr	r2, [pc, #44]	; (300dc <MQTTPacket_len+0x4c>)
   300b0:	4293      	cmp	r3, r2
   300b2:	dc03      	bgt.n	300bc <MQTTPacket_len+0x2c>
		rem_len += 2;
   300b4:	687b      	ldr	r3, [r7, #4]
   300b6:	3302      	adds	r3, #2
   300b8:	607b      	str	r3, [r7, #4]
   300ba:	e00a      	b.n	300d2 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   300bc:	687b      	ldr	r3, [r7, #4]
   300be:	4a08      	ldr	r2, [pc, #32]	; (300e0 <MQTTPacket_len+0x50>)
   300c0:	4293      	cmp	r3, r2
   300c2:	dc03      	bgt.n	300cc <MQTTPacket_len+0x3c>
		rem_len += 3;
   300c4:	687b      	ldr	r3, [r7, #4]
   300c6:	3303      	adds	r3, #3
   300c8:	607b      	str	r3, [r7, #4]
   300ca:	e002      	b.n	300d2 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   300cc:	687b      	ldr	r3, [r7, #4]
   300ce:	3304      	adds	r3, #4
   300d0:	607b      	str	r3, [r7, #4]
	return rem_len;
   300d2:	687b      	ldr	r3, [r7, #4]
}
   300d4:	0018      	movs	r0, r3
   300d6:	46bd      	mov	sp, r7
   300d8:	b002      	add	sp, #8
   300da:	bd80      	pop	{r7, pc}
   300dc:	00003fff 	.word	0x00003fff
   300e0:	001ffffe 	.word	0x001ffffe

000300e4 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   300e4:	b580      	push	{r7, lr}
   300e6:	b084      	sub	sp, #16
   300e8:	af00      	add	r7, sp, #0
   300ea:	6078      	str	r0, [r7, #4]
   300ec:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   300ee:	2300      	movs	r3, #0
   300f0:	60fb      	str	r3, [r7, #12]
   300f2:	e00a      	b.n	3010a <bufchar+0x26>
		*c = *bufptr++;
   300f4:	4b09      	ldr	r3, [pc, #36]	; (3011c <bufchar+0x38>)
   300f6:	681b      	ldr	r3, [r3, #0]
   300f8:	1c59      	adds	r1, r3, #1
   300fa:	4a08      	ldr	r2, [pc, #32]	; (3011c <bufchar+0x38>)
   300fc:	6011      	str	r1, [r2, #0]
   300fe:	781a      	ldrb	r2, [r3, #0]
   30100:	687b      	ldr	r3, [r7, #4]
   30102:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   30104:	68fb      	ldr	r3, [r7, #12]
   30106:	3301      	adds	r3, #1
   30108:	60fb      	str	r3, [r7, #12]
   3010a:	68fa      	ldr	r2, [r7, #12]
   3010c:	683b      	ldr	r3, [r7, #0]
   3010e:	429a      	cmp	r2, r3
   30110:	dbf0      	blt.n	300f4 <bufchar+0x10>
	return count;
   30112:	683b      	ldr	r3, [r7, #0]
}
   30114:	0018      	movs	r0, r3
   30116:	46bd      	mov	sp, r7
   30118:	b004      	add	sp, #16
   3011a:	bd80      	pop	{r7, pc}
   3011c:	200042dc 	.word	0x200042dc

00030120 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   30120:	b580      	push	{r7, lr}
   30122:	b082      	sub	sp, #8
   30124:	af00      	add	r7, sp, #0
   30126:	6078      	str	r0, [r7, #4]
   30128:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   3012a:	4b07      	ldr	r3, [pc, #28]	; (30148 <MQTTPacket_decodeBuf+0x28>)
   3012c:	687a      	ldr	r2, [r7, #4]
   3012e:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   30130:	683a      	ldr	r2, [r7, #0]
   30132:	4b06      	ldr	r3, [pc, #24]	; (3014c <MQTTPacket_decodeBuf+0x2c>)
   30134:	0011      	movs	r1, r2
   30136:	0018      	movs	r0, r3
   30138:	4b05      	ldr	r3, [pc, #20]	; (30150 <MQTTPacket_decodeBuf+0x30>)
   3013a:	4798      	blx	r3
   3013c:	0003      	movs	r3, r0
}
   3013e:	0018      	movs	r0, r3
   30140:	46bd      	mov	sp, r7
   30142:	b002      	add	sp, #8
   30144:	bd80      	pop	{r7, pc}
   30146:	46c0      	nop			; (mov r8, r8)
   30148:	200042dc 	.word	0x200042dc
   3014c:	000300e5 	.word	0x000300e5
   30150:	0003000d 	.word	0x0003000d

00030154 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   30154:	b580      	push	{r7, lr}
   30156:	b084      	sub	sp, #16
   30158:	af00      	add	r7, sp, #0
   3015a:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   3015c:	687b      	ldr	r3, [r7, #4]
   3015e:	681b      	ldr	r3, [r3, #0]
   30160:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   30162:	68fb      	ldr	r3, [r7, #12]
   30164:	781b      	ldrb	r3, [r3, #0]
   30166:	021b      	lsls	r3, r3, #8
   30168:	68fa      	ldr	r2, [r7, #12]
   3016a:	3201      	adds	r2, #1
   3016c:	7812      	ldrb	r2, [r2, #0]
   3016e:	189b      	adds	r3, r3, r2
   30170:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   30172:	687b      	ldr	r3, [r7, #4]
   30174:	681b      	ldr	r3, [r3, #0]
   30176:	1c9a      	adds	r2, r3, #2
   30178:	687b      	ldr	r3, [r7, #4]
   3017a:	601a      	str	r2, [r3, #0]
	return len;
   3017c:	68bb      	ldr	r3, [r7, #8]
}
   3017e:	0018      	movs	r0, r3
   30180:	46bd      	mov	sp, r7
   30182:	b004      	add	sp, #16
   30184:	bd80      	pop	{r7, pc}

00030186 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   30186:	b580      	push	{r7, lr}
   30188:	b084      	sub	sp, #16
   3018a:	af00      	add	r7, sp, #0
   3018c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   3018e:	687b      	ldr	r3, [r7, #4]
   30190:	681a      	ldr	r2, [r3, #0]
   30192:	230f      	movs	r3, #15
   30194:	18fb      	adds	r3, r7, r3
   30196:	7812      	ldrb	r2, [r2, #0]
   30198:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   3019a:	687b      	ldr	r3, [r7, #4]
   3019c:	681b      	ldr	r3, [r3, #0]
   3019e:	1c5a      	adds	r2, r3, #1
   301a0:	687b      	ldr	r3, [r7, #4]
   301a2:	601a      	str	r2, [r3, #0]
	return c;
   301a4:	230f      	movs	r3, #15
   301a6:	18fb      	adds	r3, r7, r3
   301a8:	781b      	ldrb	r3, [r3, #0]
}
   301aa:	0018      	movs	r0, r3
   301ac:	46bd      	mov	sp, r7
   301ae:	b004      	add	sp, #16
   301b0:	bd80      	pop	{r7, pc}

000301b2 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   301b2:	b580      	push	{r7, lr}
   301b4:	b082      	sub	sp, #8
   301b6:	af00      	add	r7, sp, #0
   301b8:	6078      	str	r0, [r7, #4]
   301ba:	000a      	movs	r2, r1
   301bc:	1cfb      	adds	r3, r7, #3
   301be:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   301c0:	687b      	ldr	r3, [r7, #4]
   301c2:	681b      	ldr	r3, [r3, #0]
   301c4:	1cfa      	adds	r2, r7, #3
   301c6:	7812      	ldrb	r2, [r2, #0]
   301c8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   301ca:	687b      	ldr	r3, [r7, #4]
   301cc:	681b      	ldr	r3, [r3, #0]
   301ce:	1c5a      	adds	r2, r3, #1
   301d0:	687b      	ldr	r3, [r7, #4]
   301d2:	601a      	str	r2, [r3, #0]
}
   301d4:	46c0      	nop			; (mov r8, r8)
   301d6:	46bd      	mov	sp, r7
   301d8:	b002      	add	sp, #8
   301da:	bd80      	pop	{r7, pc}

000301dc <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   301dc:	b580      	push	{r7, lr}
   301de:	b082      	sub	sp, #8
   301e0:	af00      	add	r7, sp, #0
   301e2:	6078      	str	r0, [r7, #4]
   301e4:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   301e6:	687b      	ldr	r3, [r7, #4]
   301e8:	681a      	ldr	r2, [r3, #0]
   301ea:	683b      	ldr	r3, [r7, #0]
   301ec:	2b00      	cmp	r3, #0
   301ee:	da00      	bge.n	301f2 <writeInt+0x16>
   301f0:	33ff      	adds	r3, #255	; 0xff
   301f2:	121b      	asrs	r3, r3, #8
   301f4:	b2db      	uxtb	r3, r3
   301f6:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   301f8:	687b      	ldr	r3, [r7, #4]
   301fa:	681b      	ldr	r3, [r3, #0]
   301fc:	1c5a      	adds	r2, r3, #1
   301fe:	687b      	ldr	r3, [r7, #4]
   30200:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   30202:	687b      	ldr	r3, [r7, #4]
   30204:	681a      	ldr	r2, [r3, #0]
   30206:	683b      	ldr	r3, [r7, #0]
   30208:	4908      	ldr	r1, [pc, #32]	; (3022c <writeInt+0x50>)
   3020a:	400b      	ands	r3, r1
   3020c:	d503      	bpl.n	30216 <writeInt+0x3a>
   3020e:	3b01      	subs	r3, #1
   30210:	4907      	ldr	r1, [pc, #28]	; (30230 <writeInt+0x54>)
   30212:	430b      	orrs	r3, r1
   30214:	3301      	adds	r3, #1
   30216:	b2db      	uxtb	r3, r3
   30218:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   3021a:	687b      	ldr	r3, [r7, #4]
   3021c:	681b      	ldr	r3, [r3, #0]
   3021e:	1c5a      	adds	r2, r3, #1
   30220:	687b      	ldr	r3, [r7, #4]
   30222:	601a      	str	r2, [r3, #0]
}
   30224:	46c0      	nop			; (mov r8, r8)
   30226:	46bd      	mov	sp, r7
   30228:	b002      	add	sp, #8
   3022a:	bd80      	pop	{r7, pc}
   3022c:	800000ff 	.word	0x800000ff
   30230:	ffffff00 	.word	0xffffff00

00030234 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   30234:	b580      	push	{r7, lr}
   30236:	b084      	sub	sp, #16
   30238:	af00      	add	r7, sp, #0
   3023a:	6078      	str	r0, [r7, #4]
   3023c:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   3023e:	683b      	ldr	r3, [r7, #0]
   30240:	0018      	movs	r0, r3
   30242:	4b0d      	ldr	r3, [pc, #52]	; (30278 <writeCString+0x44>)
   30244:	4798      	blx	r3
   30246:	0003      	movs	r3, r0
   30248:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   3024a:	68fa      	ldr	r2, [r7, #12]
   3024c:	687b      	ldr	r3, [r7, #4]
   3024e:	0011      	movs	r1, r2
   30250:	0018      	movs	r0, r3
   30252:	4b0a      	ldr	r3, [pc, #40]	; (3027c <writeCString+0x48>)
   30254:	4798      	blx	r3
	memcpy(*pptr, string, len);
   30256:	687b      	ldr	r3, [r7, #4]
   30258:	681b      	ldr	r3, [r3, #0]
   3025a:	68fa      	ldr	r2, [r7, #12]
   3025c:	6839      	ldr	r1, [r7, #0]
   3025e:	0018      	movs	r0, r3
   30260:	4b07      	ldr	r3, [pc, #28]	; (30280 <writeCString+0x4c>)
   30262:	4798      	blx	r3
	*pptr += len;
   30264:	687b      	ldr	r3, [r7, #4]
   30266:	681a      	ldr	r2, [r3, #0]
   30268:	68fb      	ldr	r3, [r7, #12]
   3026a:	18d2      	adds	r2, r2, r3
   3026c:	687b      	ldr	r3, [r7, #4]
   3026e:	601a      	str	r2, [r3, #0]
}
   30270:	46c0      	nop			; (mov r8, r8)
   30272:	46bd      	mov	sp, r7
   30274:	b004      	add	sp, #16
   30276:	bd80      	pop	{r7, pc}
   30278:	00034c57 	.word	0x00034c57
   3027c:	000301dd 	.word	0x000301dd
   30280:	00034869 	.word	0x00034869

00030284 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   30284:	b580      	push	{r7, lr}
   30286:	b084      	sub	sp, #16
   30288:	af00      	add	r7, sp, #0
   3028a:	60f8      	str	r0, [r7, #12]
   3028c:	0038      	movs	r0, r7
   3028e:	6001      	str	r1, [r0, #0]
   30290:	6042      	str	r2, [r0, #4]
   30292:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   30294:	003b      	movs	r3, r7
   30296:	685b      	ldr	r3, [r3, #4]
   30298:	2b00      	cmp	r3, #0
   3029a:	dd17      	ble.n	302cc <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   3029c:	003b      	movs	r3, r7
   3029e:	685a      	ldr	r2, [r3, #4]
   302a0:	68fb      	ldr	r3, [r7, #12]
   302a2:	0011      	movs	r1, r2
   302a4:	0018      	movs	r0, r3
   302a6:	4b14      	ldr	r3, [pc, #80]	; (302f8 <writeMQTTString+0x74>)
   302a8:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   302aa:	68fb      	ldr	r3, [r7, #12]
   302ac:	6818      	ldr	r0, [r3, #0]
   302ae:	003b      	movs	r3, r7
   302b0:	6899      	ldr	r1, [r3, #8]
   302b2:	003b      	movs	r3, r7
   302b4:	685b      	ldr	r3, [r3, #4]
   302b6:	001a      	movs	r2, r3
   302b8:	4b10      	ldr	r3, [pc, #64]	; (302fc <writeMQTTString+0x78>)
   302ba:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   302bc:	68fb      	ldr	r3, [r7, #12]
   302be:	681a      	ldr	r2, [r3, #0]
   302c0:	003b      	movs	r3, r7
   302c2:	685b      	ldr	r3, [r3, #4]
   302c4:	18d2      	adds	r2, r2, r3
   302c6:	68fb      	ldr	r3, [r7, #12]
   302c8:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   302ca:	e010      	b.n	302ee <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   302cc:	003b      	movs	r3, r7
   302ce:	681b      	ldr	r3, [r3, #0]
   302d0:	2b00      	cmp	r3, #0
   302d2:	d007      	beq.n	302e4 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   302d4:	003b      	movs	r3, r7
   302d6:	681a      	ldr	r2, [r3, #0]
   302d8:	68fb      	ldr	r3, [r7, #12]
   302da:	0011      	movs	r1, r2
   302dc:	0018      	movs	r0, r3
   302de:	4b08      	ldr	r3, [pc, #32]	; (30300 <writeMQTTString+0x7c>)
   302e0:	4798      	blx	r3
}
   302e2:	e004      	b.n	302ee <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   302e4:	68fb      	ldr	r3, [r7, #12]
   302e6:	2100      	movs	r1, #0
   302e8:	0018      	movs	r0, r3
   302ea:	4b03      	ldr	r3, [pc, #12]	; (302f8 <writeMQTTString+0x74>)
   302ec:	4798      	blx	r3
}
   302ee:	46c0      	nop			; (mov r8, r8)
   302f0:	46bd      	mov	sp, r7
   302f2:	b004      	add	sp, #16
   302f4:	bd80      	pop	{r7, pc}
   302f6:	46c0      	nop			; (mov r8, r8)
   302f8:	000301dd 	.word	0x000301dd
   302fc:	00034869 	.word	0x00034869
   30300:	00030235 	.word	0x00030235

00030304 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   30304:	b580      	push	{r7, lr}
   30306:	b086      	sub	sp, #24
   30308:	af00      	add	r7, sp, #0
   3030a:	60f8      	str	r0, [r7, #12]
   3030c:	60b9      	str	r1, [r7, #8]
   3030e:	607a      	str	r2, [r7, #4]
	int rc = 0;
   30310:	2300      	movs	r3, #0
   30312:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   30314:	687a      	ldr	r2, [r7, #4]
   30316:	68bb      	ldr	r3, [r7, #8]
   30318:	681b      	ldr	r3, [r3, #0]
   3031a:	1ad3      	subs	r3, r2, r3
   3031c:	2b01      	cmp	r3, #1
   3031e:	dd1b      	ble.n	30358 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   30320:	68bb      	ldr	r3, [r7, #8]
   30322:	0018      	movs	r0, r3
   30324:	4b10      	ldr	r3, [pc, #64]	; (30368 <readMQTTLenString+0x64>)
   30326:	4798      	blx	r3
   30328:	0002      	movs	r2, r0
   3032a:	68fb      	ldr	r3, [r7, #12]
   3032c:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   3032e:	68bb      	ldr	r3, [r7, #8]
   30330:	681a      	ldr	r2, [r3, #0]
   30332:	68fb      	ldr	r3, [r7, #12]
   30334:	685b      	ldr	r3, [r3, #4]
   30336:	18d2      	adds	r2, r2, r3
   30338:	687b      	ldr	r3, [r7, #4]
   3033a:	429a      	cmp	r2, r3
   3033c:	d80c      	bhi.n	30358 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   3033e:	68bb      	ldr	r3, [r7, #8]
   30340:	681a      	ldr	r2, [r3, #0]
   30342:	68fb      	ldr	r3, [r7, #12]
   30344:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   30346:	68bb      	ldr	r3, [r7, #8]
   30348:	681a      	ldr	r2, [r3, #0]
   3034a:	68fb      	ldr	r3, [r7, #12]
   3034c:	685b      	ldr	r3, [r3, #4]
   3034e:	18d2      	adds	r2, r2, r3
   30350:	68bb      	ldr	r3, [r7, #8]
   30352:	601a      	str	r2, [r3, #0]
			rc = 1;
   30354:	2301      	movs	r3, #1
   30356:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   30358:	68fb      	ldr	r3, [r7, #12]
   3035a:	2200      	movs	r2, #0
   3035c:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   3035e:	697b      	ldr	r3, [r7, #20]
}
   30360:	0018      	movs	r0, r3
   30362:	46bd      	mov	sp, r7
   30364:	b006      	add	sp, #24
   30366:	bd80      	pop	{r7, pc}
   30368:	00030155 	.word	0x00030155

0003036c <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   3036c:	b580      	push	{r7, lr}
   3036e:	b086      	sub	sp, #24
   30370:	af00      	add	r7, sp, #0
   30372:	1d3b      	adds	r3, r7, #4
   30374:	6018      	str	r0, [r3, #0]
   30376:	6059      	str	r1, [r3, #4]
   30378:	609a      	str	r2, [r3, #8]
	int rc = 0;
   3037a:	2300      	movs	r3, #0
   3037c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   3037e:	1d3b      	adds	r3, r7, #4
   30380:	681b      	ldr	r3, [r3, #0]
   30382:	2b00      	cmp	r3, #0
   30384:	d007      	beq.n	30396 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   30386:	1d3b      	adds	r3, r7, #4
   30388:	681b      	ldr	r3, [r3, #0]
   3038a:	0018      	movs	r0, r3
   3038c:	4b06      	ldr	r3, [pc, #24]	; (303a8 <MQTTstrlen+0x3c>)
   3038e:	4798      	blx	r3
   30390:	0003      	movs	r3, r0
   30392:	617b      	str	r3, [r7, #20]
   30394:	e002      	b.n	3039c <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   30396:	1d3b      	adds	r3, r7, #4
   30398:	685b      	ldr	r3, [r3, #4]
   3039a:	617b      	str	r3, [r7, #20]
	return rc;
   3039c:	697b      	ldr	r3, [r7, #20]
}
   3039e:	0018      	movs	r0, r3
   303a0:	46bd      	mov	sp, r7
   303a2:	b006      	add	sp, #24
   303a4:	bd80      	pop	{r7, pc}
   303a6:	46c0      	nop			; (mov r8, r8)
   303a8:	00034c57 	.word	0x00034c57

000303ac <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   303ac:	b580      	push	{r7, lr}
   303ae:	b086      	sub	sp, #24
   303b0:	af00      	add	r7, sp, #0
   303b2:	6078      	str	r0, [r7, #4]
   303b4:	6039      	str	r1, [r7, #0]
	int alen = 0,
   303b6:	2300      	movs	r3, #0
   303b8:	617b      	str	r3, [r7, #20]
		blen = 0;
   303ba:	2300      	movs	r3, #0
   303bc:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   303be:	687b      	ldr	r3, [r7, #4]
   303c0:	681b      	ldr	r3, [r3, #0]
   303c2:	2b00      	cmp	r3, #0
   303c4:	d00a      	beq.n	303dc <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   303c6:	687b      	ldr	r3, [r7, #4]
   303c8:	681b      	ldr	r3, [r3, #0]
   303ca:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   303cc:	687b      	ldr	r3, [r7, #4]
   303ce:	681b      	ldr	r3, [r3, #0]
   303d0:	0018      	movs	r0, r3
   303d2:	4b12      	ldr	r3, [pc, #72]	; (3041c <MQTTPacket_equals+0x70>)
   303d4:	4798      	blx	r3
   303d6:	0003      	movs	r3, r0
   303d8:	617b      	str	r3, [r7, #20]
   303da:	e005      	b.n	303e8 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   303dc:	687b      	ldr	r3, [r7, #4]
   303de:	689b      	ldr	r3, [r3, #8]
   303e0:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   303e2:	687b      	ldr	r3, [r7, #4]
   303e4:	685b      	ldr	r3, [r3, #4]
   303e6:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   303e8:	683b      	ldr	r3, [r7, #0]
   303ea:	0018      	movs	r0, r3
   303ec:	4b0b      	ldr	r3, [pc, #44]	; (3041c <MQTTPacket_equals+0x70>)
   303ee:	4798      	blx	r3
   303f0:	0003      	movs	r3, r0
   303f2:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   303f4:	697a      	ldr	r2, [r7, #20]
   303f6:	68fb      	ldr	r3, [r7, #12]
   303f8:	429a      	cmp	r2, r3
   303fa:	d109      	bne.n	30410 <MQTTPacket_equals+0x64>
   303fc:	697a      	ldr	r2, [r7, #20]
   303fe:	6839      	ldr	r1, [r7, #0]
   30400:	693b      	ldr	r3, [r7, #16]
   30402:	0018      	movs	r0, r3
   30404:	4b06      	ldr	r3, [pc, #24]	; (30420 <MQTTPacket_equals+0x74>)
   30406:	4798      	blx	r3
   30408:	1e03      	subs	r3, r0, #0
   3040a:	d101      	bne.n	30410 <MQTTPacket_equals+0x64>
   3040c:	2301      	movs	r3, #1
   3040e:	e000      	b.n	30412 <MQTTPacket_equals+0x66>
   30410:	2300      	movs	r3, #0
}
   30412:	0018      	movs	r0, r3
   30414:	46bd      	mov	sp, r7
   30416:	b006      	add	sp, #24
   30418:	bd80      	pop	{r7, pc}
   3041a:	46c0      	nop			; (mov r8, r8)
   3041c:	00034c57 	.word	0x00034c57
   30420:	00034c65 	.word	0x00034c65

00030424 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   30424:	b580      	push	{r7, lr}
   30426:	b086      	sub	sp, #24
   30428:	af00      	add	r7, sp, #0
   3042a:	60f8      	str	r0, [r7, #12]
   3042c:	0038      	movs	r0, r7
   3042e:	6001      	str	r1, [r0, #0]
   30430:	6042      	str	r2, [r0, #4]
   30432:	6083      	str	r3, [r0, #8]
	int len = 0;
   30434:	2300      	movs	r3, #0
   30436:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   30438:	003b      	movs	r3, r7
   3043a:	6818      	ldr	r0, [r3, #0]
   3043c:	6859      	ldr	r1, [r3, #4]
   3043e:	689a      	ldr	r2, [r3, #8]
   30440:	4b09      	ldr	r3, [pc, #36]	; (30468 <MQTTSerialize_publishLength+0x44>)
   30442:	4798      	blx	r3
   30444:	0003      	movs	r3, r0
   30446:	1c9a      	adds	r2, r3, #2
   30448:	6a3b      	ldr	r3, [r7, #32]
   3044a:	18d3      	adds	r3, r2, r3
   3044c:	697a      	ldr	r2, [r7, #20]
   3044e:	18d3      	adds	r3, r2, r3
   30450:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   30452:	68fb      	ldr	r3, [r7, #12]
   30454:	2b00      	cmp	r3, #0
   30456:	dd02      	ble.n	3045e <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   30458:	697b      	ldr	r3, [r7, #20]
   3045a:	3302      	adds	r3, #2
   3045c:	617b      	str	r3, [r7, #20]
	return len;
   3045e:	697b      	ldr	r3, [r7, #20]
}
   30460:	0018      	movs	r0, r3
   30462:	46bd      	mov	sp, r7
   30464:	b006      	add	sp, #24
   30466:	bd80      	pop	{r7, pc}
   30468:	0003036d 	.word	0x0003036d

0003046c <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   3046c:	b590      	push	{r4, r7, lr}
   3046e:	b08b      	sub	sp, #44	; 0x2c
   30470:	af02      	add	r7, sp, #8
   30472:	60f8      	str	r0, [r7, #12]
   30474:	60b9      	str	r1, [r7, #8]
   30476:	603b      	str	r3, [r7, #0]
   30478:	1dfb      	adds	r3, r7, #7
   3047a:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   3047c:	68fb      	ldr	r3, [r7, #12]
   3047e:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   30480:	2300      	movs	r3, #0
   30482:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   30484:	2300      	movs	r3, #0
   30486:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   30488:	2300      	movs	r3, #0
   3048a:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   3048c:	2308      	movs	r3, #8
   3048e:	2230      	movs	r2, #48	; 0x30
   30490:	4694      	mov	ip, r2
   30492:	44bc      	add	ip, r7
   30494:	4463      	add	r3, ip
   30496:	6838      	ldr	r0, [r7, #0]
   30498:	6cba      	ldr	r2, [r7, #72]	; 0x48
   3049a:	9200      	str	r2, [sp, #0]
   3049c:	6819      	ldr	r1, [r3, #0]
   3049e:	685a      	ldr	r2, [r3, #4]
   304a0:	689b      	ldr	r3, [r3, #8]
   304a2:	4c46      	ldr	r4, [pc, #280]	; (305bc <MQTTSerialize_publish+0x150>)
   304a4:	47a0      	blx	r4
   304a6:	0003      	movs	r3, r0
   304a8:	61bb      	str	r3, [r7, #24]
   304aa:	69bb      	ldr	r3, [r7, #24]
   304ac:	0018      	movs	r0, r3
   304ae:	4b44      	ldr	r3, [pc, #272]	; (305c0 <MQTTSerialize_publish+0x154>)
   304b0:	4798      	blx	r3
   304b2:	0002      	movs	r2, r0
   304b4:	68bb      	ldr	r3, [r7, #8]
   304b6:	429a      	cmp	r2, r3
   304b8:	dd03      	ble.n	304c2 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   304ba:	2302      	movs	r3, #2
   304bc:	425b      	negs	r3, r3
   304be:	61fb      	str	r3, [r7, #28]
		goto exit;
   304c0:	e077      	b.n	305b2 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   304c2:	2310      	movs	r3, #16
   304c4:	18fb      	adds	r3, r7, r3
   304c6:	781a      	ldrb	r2, [r3, #0]
   304c8:	210f      	movs	r1, #15
   304ca:	400a      	ands	r2, r1
   304cc:	1c11      	adds	r1, r2, #0
   304ce:	2230      	movs	r2, #48	; 0x30
   304d0:	430a      	orrs	r2, r1
   304d2:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   304d4:	1dfb      	adds	r3, r7, #7
   304d6:	781b      	ldrb	r3, [r3, #0]
   304d8:	2201      	movs	r2, #1
   304da:	4013      	ands	r3, r2
   304dc:	b2da      	uxtb	r2, r3
   304de:	2310      	movs	r3, #16
   304e0:	18fb      	adds	r3, r7, r3
   304e2:	2101      	movs	r1, #1
   304e4:	400a      	ands	r2, r1
   304e6:	00d0      	lsls	r0, r2, #3
   304e8:	781a      	ldrb	r2, [r3, #0]
   304ea:	2108      	movs	r1, #8
   304ec:	438a      	bics	r2, r1
   304ee:	1c11      	adds	r1, r2, #0
   304f0:	1c02      	adds	r2, r0, #0
   304f2:	430a      	orrs	r2, r1
   304f4:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   304f6:	683b      	ldr	r3, [r7, #0]
   304f8:	b2db      	uxtb	r3, r3
   304fa:	1c1a      	adds	r2, r3, #0
   304fc:	2303      	movs	r3, #3
   304fe:	4013      	ands	r3, r2
   30500:	b2da      	uxtb	r2, r3
   30502:	2310      	movs	r3, #16
   30504:	18fb      	adds	r3, r7, r3
   30506:	2103      	movs	r1, #3
   30508:	400a      	ands	r2, r1
   3050a:	1890      	adds	r0, r2, r2
   3050c:	781a      	ldrb	r2, [r3, #0]
   3050e:	2106      	movs	r1, #6
   30510:	438a      	bics	r2, r1
   30512:	1c11      	adds	r1, r2, #0
   30514:	1c02      	adds	r2, r0, #0
   30516:	430a      	orrs	r2, r1
   30518:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   3051a:	2330      	movs	r3, #48	; 0x30
   3051c:	18fb      	adds	r3, r7, r3
   3051e:	781b      	ldrb	r3, [r3, #0]
   30520:	2201      	movs	r2, #1
   30522:	4013      	ands	r3, r2
   30524:	b2da      	uxtb	r2, r3
   30526:	2310      	movs	r3, #16
   30528:	18fb      	adds	r3, r7, r3
   3052a:	2101      	movs	r1, #1
   3052c:	400a      	ands	r2, r1
   3052e:	0010      	movs	r0, r2
   30530:	781a      	ldrb	r2, [r3, #0]
   30532:	2101      	movs	r1, #1
   30534:	438a      	bics	r2, r1
   30536:	1c11      	adds	r1, r2, #0
   30538:	1c02      	adds	r2, r0, #0
   3053a:	430a      	orrs	r2, r1
   3053c:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   3053e:	2310      	movs	r3, #16
   30540:	18fb      	adds	r3, r7, r3
   30542:	781a      	ldrb	r2, [r3, #0]
   30544:	2314      	movs	r3, #20
   30546:	18fb      	adds	r3, r7, r3
   30548:	0011      	movs	r1, r2
   3054a:	0018      	movs	r0, r3
   3054c:	4b1d      	ldr	r3, [pc, #116]	; (305c4 <MQTTSerialize_publish+0x158>)
   3054e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30550:	697b      	ldr	r3, [r7, #20]
   30552:	69ba      	ldr	r2, [r7, #24]
   30554:	0011      	movs	r1, r2
   30556:	0018      	movs	r0, r3
   30558:	4b1b      	ldr	r3, [pc, #108]	; (305c8 <MQTTSerialize_publish+0x15c>)
   3055a:	4798      	blx	r3
   3055c:	0002      	movs	r2, r0
   3055e:	697b      	ldr	r3, [r7, #20]
   30560:	189b      	adds	r3, r3, r2
   30562:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   30564:	2308      	movs	r3, #8
   30566:	2230      	movs	r2, #48	; 0x30
   30568:	4694      	mov	ip, r2
   3056a:	44bc      	add	ip, r7
   3056c:	4463      	add	r3, ip
   3056e:	2214      	movs	r2, #20
   30570:	18b8      	adds	r0, r7, r2
   30572:	6819      	ldr	r1, [r3, #0]
   30574:	685a      	ldr	r2, [r3, #4]
   30576:	689b      	ldr	r3, [r3, #8]
   30578:	4c14      	ldr	r4, [pc, #80]	; (305cc <MQTTSerialize_publish+0x160>)
   3057a:	47a0      	blx	r4

	if (qos > 0)
   3057c:	683b      	ldr	r3, [r7, #0]
   3057e:	2b00      	cmp	r3, #0
   30580:	dd08      	ble.n	30594 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   30582:	2334      	movs	r3, #52	; 0x34
   30584:	18fb      	adds	r3, r7, r3
   30586:	881a      	ldrh	r2, [r3, #0]
   30588:	2314      	movs	r3, #20
   3058a:	18fb      	adds	r3, r7, r3
   3058c:	0011      	movs	r1, r2
   3058e:	0018      	movs	r0, r3
   30590:	4b0f      	ldr	r3, [pc, #60]	; (305d0 <MQTTSerialize_publish+0x164>)
   30592:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   30594:	697b      	ldr	r3, [r7, #20]
   30596:	6cba      	ldr	r2, [r7, #72]	; 0x48
   30598:	6c79      	ldr	r1, [r7, #68]	; 0x44
   3059a:	0018      	movs	r0, r3
   3059c:	4b0d      	ldr	r3, [pc, #52]	; (305d4 <MQTTSerialize_publish+0x168>)
   3059e:	4798      	blx	r3
	ptr += payloadlen;
   305a0:	697a      	ldr	r2, [r7, #20]
   305a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   305a4:	18d3      	adds	r3, r2, r3
   305a6:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   305a8:	697b      	ldr	r3, [r7, #20]
   305aa:	001a      	movs	r2, r3
   305ac:	68fb      	ldr	r3, [r7, #12]
   305ae:	1ad3      	subs	r3, r2, r3
   305b0:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   305b2:	69fb      	ldr	r3, [r7, #28]
}
   305b4:	0018      	movs	r0, r3
   305b6:	46bd      	mov	sp, r7
   305b8:	b009      	add	sp, #36	; 0x24
   305ba:	bd90      	pop	{r4, r7, pc}
   305bc:	00030425 	.word	0x00030425
   305c0:	00030091 	.word	0x00030091
   305c4:	000301b3 	.word	0x000301b3
   305c8:	0002ff99 	.word	0x0002ff99
   305cc:	00030285 	.word	0x00030285
   305d0:	000301dd 	.word	0x000301dd
   305d4:	00034869 	.word	0x00034869

000305d8 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   305d8:	b580      	push	{r7, lr}
   305da:	b088      	sub	sp, #32
   305dc:	af00      	add	r7, sp, #0
   305de:	60f8      	str	r0, [r7, #12]
   305e0:	60b9      	str	r1, [r7, #8]
   305e2:	0019      	movs	r1, r3
   305e4:	1dfb      	adds	r3, r7, #7
   305e6:	701a      	strb	r2, [r3, #0]
   305e8:	1dbb      	adds	r3, r7, #6
   305ea:	1c0a      	adds	r2, r1, #0
   305ec:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   305ee:	2300      	movs	r3, #0
   305f0:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   305f2:	2300      	movs	r3, #0
   305f4:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   305f6:	68fb      	ldr	r3, [r7, #12]
   305f8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   305fa:	68bb      	ldr	r3, [r7, #8]
   305fc:	2b03      	cmp	r3, #3
   305fe:	dc03      	bgt.n	30608 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30600:	2302      	movs	r3, #2
   30602:	425b      	negs	r3, r3
   30604:	61fb      	str	r3, [r7, #28]
		goto exit;
   30606:	e055      	b.n	306b4 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   30608:	1dfb      	adds	r3, r7, #7
   3060a:	781b      	ldrb	r3, [r3, #0]
   3060c:	220f      	movs	r2, #15
   3060e:	4013      	ands	r3, r2
   30610:	b2da      	uxtb	r2, r3
   30612:	2318      	movs	r3, #24
   30614:	18fb      	adds	r3, r7, r3
   30616:	0110      	lsls	r0, r2, #4
   30618:	781a      	ldrb	r2, [r3, #0]
   3061a:	210f      	movs	r1, #15
   3061c:	400a      	ands	r2, r1
   3061e:	1c11      	adds	r1, r2, #0
   30620:	1c02      	adds	r2, r0, #0
   30622:	430a      	orrs	r2, r1
   30624:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30626:	1dbb      	adds	r3, r7, #6
   30628:	781b      	ldrb	r3, [r3, #0]
   3062a:	2201      	movs	r2, #1
   3062c:	4013      	ands	r3, r2
   3062e:	b2da      	uxtb	r2, r3
   30630:	2318      	movs	r3, #24
   30632:	18fb      	adds	r3, r7, r3
   30634:	2101      	movs	r1, #1
   30636:	400a      	ands	r2, r1
   30638:	00d0      	lsls	r0, r2, #3
   3063a:	781a      	ldrb	r2, [r3, #0]
   3063c:	2108      	movs	r1, #8
   3063e:	438a      	bics	r2, r1
   30640:	1c11      	adds	r1, r2, #0
   30642:	1c02      	adds	r2, r0, #0
   30644:	430a      	orrs	r2, r1
   30646:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   30648:	1dfb      	adds	r3, r7, #7
   3064a:	781b      	ldrb	r3, [r3, #0]
   3064c:	3b06      	subs	r3, #6
   3064e:	425a      	negs	r2, r3
   30650:	4153      	adcs	r3, r2
   30652:	b2db      	uxtb	r3, r3
   30654:	1c1a      	adds	r2, r3, #0
   30656:	2303      	movs	r3, #3
   30658:	4013      	ands	r3, r2
   3065a:	b2da      	uxtb	r2, r3
   3065c:	2318      	movs	r3, #24
   3065e:	18fb      	adds	r3, r7, r3
   30660:	2103      	movs	r1, #3
   30662:	400a      	ands	r2, r1
   30664:	1890      	adds	r0, r2, r2
   30666:	781a      	ldrb	r2, [r3, #0]
   30668:	2106      	movs	r1, #6
   3066a:	438a      	bics	r2, r1
   3066c:	1c11      	adds	r1, r2, #0
   3066e:	1c02      	adds	r2, r0, #0
   30670:	430a      	orrs	r2, r1
   30672:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30674:	2318      	movs	r3, #24
   30676:	18fb      	adds	r3, r7, r3
   30678:	781a      	ldrb	r2, [r3, #0]
   3067a:	2314      	movs	r3, #20
   3067c:	18fb      	adds	r3, r7, r3
   3067e:	0011      	movs	r1, r2
   30680:	0018      	movs	r0, r3
   30682:	4b0f      	ldr	r3, [pc, #60]	; (306c0 <MQTTSerialize_ack+0xe8>)
   30684:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   30686:	697b      	ldr	r3, [r7, #20]
   30688:	2102      	movs	r1, #2
   3068a:	0018      	movs	r0, r3
   3068c:	4b0d      	ldr	r3, [pc, #52]	; (306c4 <MQTTSerialize_ack+0xec>)
   3068e:	4798      	blx	r3
   30690:	0002      	movs	r2, r0
   30692:	697b      	ldr	r3, [r7, #20]
   30694:	189b      	adds	r3, r3, r2
   30696:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   30698:	2328      	movs	r3, #40	; 0x28
   3069a:	18fb      	adds	r3, r7, r3
   3069c:	881a      	ldrh	r2, [r3, #0]
   3069e:	2314      	movs	r3, #20
   306a0:	18fb      	adds	r3, r7, r3
   306a2:	0011      	movs	r1, r2
   306a4:	0018      	movs	r0, r3
   306a6:	4b08      	ldr	r3, [pc, #32]	; (306c8 <MQTTSerialize_ack+0xf0>)
   306a8:	4798      	blx	r3
	rc = ptr - buf;
   306aa:	697b      	ldr	r3, [r7, #20]
   306ac:	001a      	movs	r2, r3
   306ae:	68fb      	ldr	r3, [r7, #12]
   306b0:	1ad3      	subs	r3, r2, r3
   306b2:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   306b4:	69fb      	ldr	r3, [r7, #28]
}
   306b6:	0018      	movs	r0, r3
   306b8:	46bd      	mov	sp, r7
   306ba:	b008      	add	sp, #32
   306bc:	bd80      	pop	{r7, pc}
   306be:	46c0      	nop			; (mov r8, r8)
   306c0:	000301b3 	.word	0x000301b3
   306c4:	0002ff99 	.word	0x0002ff99
   306c8:	000301dd 	.word	0x000301dd

000306cc <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   306cc:	b580      	push	{r7, lr}
   306ce:	b084      	sub	sp, #16
   306d0:	af00      	add	r7, sp, #0
   306d2:	6078      	str	r0, [r7, #4]
   306d4:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   306d6:	2302      	movs	r3, #2
   306d8:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   306da:	2300      	movs	r3, #0
   306dc:	60fb      	str	r3, [r7, #12]
   306de:	e014      	b.n	3070a <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   306e0:	68fa      	ldr	r2, [r7, #12]
   306e2:	0013      	movs	r3, r2
   306e4:	005b      	lsls	r3, r3, #1
   306e6:	189b      	adds	r3, r3, r2
   306e8:	009b      	lsls	r3, r3, #2
   306ea:	001a      	movs	r2, r3
   306ec:	683b      	ldr	r3, [r7, #0]
   306ee:	189b      	adds	r3, r3, r2
   306f0:	6818      	ldr	r0, [r3, #0]
   306f2:	6859      	ldr	r1, [r3, #4]
   306f4:	689a      	ldr	r2, [r3, #8]
   306f6:	4b09      	ldr	r3, [pc, #36]	; (3071c <MQTTSerialize_subscribeLength+0x50>)
   306f8:	4798      	blx	r3
   306fa:	0003      	movs	r3, r0
   306fc:	3303      	adds	r3, #3
   306fe:	68ba      	ldr	r2, [r7, #8]
   30700:	18d3      	adds	r3, r2, r3
   30702:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   30704:	68fb      	ldr	r3, [r7, #12]
   30706:	3301      	adds	r3, #1
   30708:	60fb      	str	r3, [r7, #12]
   3070a:	68fa      	ldr	r2, [r7, #12]
   3070c:	687b      	ldr	r3, [r7, #4]
   3070e:	429a      	cmp	r2, r3
   30710:	dbe6      	blt.n	306e0 <MQTTSerialize_subscribeLength+0x14>
	return len;
   30712:	68bb      	ldr	r3, [r7, #8]
}
   30714:	0018      	movs	r0, r3
   30716:	46bd      	mov	sp, r7
   30718:	b004      	add	sp, #16
   3071a:	bd80      	pop	{r7, pc}
   3071c:	0003036d 	.word	0x0003036d

00030720 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   30720:	b590      	push	{r4, r7, lr}
   30722:	b08b      	sub	sp, #44	; 0x2c
   30724:	af00      	add	r7, sp, #0
   30726:	60f8      	str	r0, [r7, #12]
   30728:	60b9      	str	r1, [r7, #8]
   3072a:	0019      	movs	r1, r3
   3072c:	1dfb      	adds	r3, r7, #7
   3072e:	701a      	strb	r2, [r3, #0]
   30730:	1d3b      	adds	r3, r7, #4
   30732:	1c0a      	adds	r2, r1, #0
   30734:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   30736:	68fb      	ldr	r3, [r7, #12]
   30738:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   3073a:	2300      	movs	r3, #0
   3073c:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   3073e:	2300      	movs	r3, #0
   30740:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   30742:	2300      	movs	r3, #0
   30744:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   30746:	2300      	movs	r3, #0
   30748:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   3074a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   3074c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3074e:	0011      	movs	r1, r2
   30750:	0018      	movs	r0, r3
   30752:	4b41      	ldr	r3, [pc, #260]	; (30858 <MQTTSerialize_subscribe+0x138>)
   30754:	4798      	blx	r3
   30756:	0003      	movs	r3, r0
   30758:	61fb      	str	r3, [r7, #28]
   3075a:	69fb      	ldr	r3, [r7, #28]
   3075c:	0018      	movs	r0, r3
   3075e:	4b3f      	ldr	r3, [pc, #252]	; (3085c <MQTTSerialize_subscribe+0x13c>)
   30760:	4798      	blx	r3
   30762:	0002      	movs	r2, r0
   30764:	68bb      	ldr	r3, [r7, #8]
   30766:	429a      	cmp	r2, r3
   30768:	dd03      	ble.n	30772 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3076a:	2302      	movs	r3, #2
   3076c:	425b      	negs	r3, r3
   3076e:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   30770:	e06c      	b.n	3084c <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   30772:	2314      	movs	r3, #20
   30774:	18fb      	adds	r3, r7, r3
   30776:	2200      	movs	r2, #0
   30778:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   3077a:	2314      	movs	r3, #20
   3077c:	18fb      	adds	r3, r7, r3
   3077e:	781a      	ldrb	r2, [r3, #0]
   30780:	210f      	movs	r1, #15
   30782:	400a      	ands	r2, r1
   30784:	1c11      	adds	r1, r2, #0
   30786:	2280      	movs	r2, #128	; 0x80
   30788:	4252      	negs	r2, r2
   3078a:	430a      	orrs	r2, r1
   3078c:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   3078e:	1dfb      	adds	r3, r7, #7
   30790:	781b      	ldrb	r3, [r3, #0]
   30792:	2201      	movs	r2, #1
   30794:	4013      	ands	r3, r2
   30796:	b2da      	uxtb	r2, r3
   30798:	2314      	movs	r3, #20
   3079a:	18fb      	adds	r3, r7, r3
   3079c:	2101      	movs	r1, #1
   3079e:	400a      	ands	r2, r1
   307a0:	00d0      	lsls	r0, r2, #3
   307a2:	781a      	ldrb	r2, [r3, #0]
   307a4:	2108      	movs	r1, #8
   307a6:	438a      	bics	r2, r1
   307a8:	1c11      	adds	r1, r2, #0
   307aa:	1c02      	adds	r2, r0, #0
   307ac:	430a      	orrs	r2, r1
   307ae:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   307b0:	2314      	movs	r3, #20
   307b2:	18fb      	adds	r3, r7, r3
   307b4:	781a      	ldrb	r2, [r3, #0]
   307b6:	2106      	movs	r1, #6
   307b8:	438a      	bics	r2, r1
   307ba:	1c11      	adds	r1, r2, #0
   307bc:	2202      	movs	r2, #2
   307be:	430a      	orrs	r2, r1
   307c0:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   307c2:	2314      	movs	r3, #20
   307c4:	18fb      	adds	r3, r7, r3
   307c6:	781a      	ldrb	r2, [r3, #0]
   307c8:	2318      	movs	r3, #24
   307ca:	18fb      	adds	r3, r7, r3
   307cc:	0011      	movs	r1, r2
   307ce:	0018      	movs	r0, r3
   307d0:	4b23      	ldr	r3, [pc, #140]	; (30860 <MQTTSerialize_subscribe+0x140>)
   307d2:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   307d4:	69bb      	ldr	r3, [r7, #24]
   307d6:	69fa      	ldr	r2, [r7, #28]
   307d8:	0011      	movs	r1, r2
   307da:	0018      	movs	r0, r3
   307dc:	4b21      	ldr	r3, [pc, #132]	; (30864 <MQTTSerialize_subscribe+0x144>)
   307de:	4798      	blx	r3
   307e0:	0002      	movs	r2, r0
   307e2:	69bb      	ldr	r3, [r7, #24]
   307e4:	189b      	adds	r3, r3, r2
   307e6:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   307e8:	1d3b      	adds	r3, r7, #4
   307ea:	881a      	ldrh	r2, [r3, #0]
   307ec:	2318      	movs	r3, #24
   307ee:	18fb      	adds	r3, r7, r3
   307f0:	0011      	movs	r1, r2
   307f2:	0018      	movs	r0, r3
   307f4:	4b1c      	ldr	r3, [pc, #112]	; (30868 <MQTTSerialize_subscribe+0x148>)
   307f6:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   307f8:	2300      	movs	r3, #0
   307fa:	623b      	str	r3, [r7, #32]
   307fc:	e01d      	b.n	3083a <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   307fe:	6a3a      	ldr	r2, [r7, #32]
   30800:	0013      	movs	r3, r2
   30802:	005b      	lsls	r3, r3, #1
   30804:	189b      	adds	r3, r3, r2
   30806:	009b      	lsls	r3, r3, #2
   30808:	001a      	movs	r2, r3
   3080a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   3080c:	189b      	adds	r3, r3, r2
   3080e:	2218      	movs	r2, #24
   30810:	18b8      	adds	r0, r7, r2
   30812:	6819      	ldr	r1, [r3, #0]
   30814:	685a      	ldr	r2, [r3, #4]
   30816:	689b      	ldr	r3, [r3, #8]
   30818:	4c14      	ldr	r4, [pc, #80]	; (3086c <MQTTSerialize_subscribe+0x14c>)
   3081a:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   3081c:	6a3b      	ldr	r3, [r7, #32]
   3081e:	009b      	lsls	r3, r3, #2
   30820:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   30822:	18d3      	adds	r3, r2, r3
   30824:	681b      	ldr	r3, [r3, #0]
   30826:	b2da      	uxtb	r2, r3
   30828:	2318      	movs	r3, #24
   3082a:	18fb      	adds	r3, r7, r3
   3082c:	0011      	movs	r1, r2
   3082e:	0018      	movs	r0, r3
   30830:	4b0b      	ldr	r3, [pc, #44]	; (30860 <MQTTSerialize_subscribe+0x140>)
   30832:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   30834:	6a3b      	ldr	r3, [r7, #32]
   30836:	3301      	adds	r3, #1
   30838:	623b      	str	r3, [r7, #32]
   3083a:	6a3a      	ldr	r2, [r7, #32]
   3083c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3083e:	429a      	cmp	r2, r3
   30840:	dbdd      	blt.n	307fe <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   30842:	69bb      	ldr	r3, [r7, #24]
   30844:	001a      	movs	r2, r3
   30846:	68fb      	ldr	r3, [r7, #12]
   30848:	1ad3      	subs	r3, r2, r3
   3084a:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3084e:	0018      	movs	r0, r3
   30850:	46bd      	mov	sp, r7
   30852:	b00b      	add	sp, #44	; 0x2c
   30854:	bd90      	pop	{r4, r7, pc}
   30856:	46c0      	nop			; (mov r8, r8)
   30858:	000306cd 	.word	0x000306cd
   3085c:	00030091 	.word	0x00030091
   30860:	000301b3 	.word	0x000301b3
   30864:	0002ff99 	.word	0x0002ff99
   30868:	000301dd 	.word	0x000301dd
   3086c:	00030285 	.word	0x00030285

00030870 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   30870:	b590      	push	{r4, r7, lr}
   30872:	b08b      	sub	sp, #44	; 0x2c
   30874:	af00      	add	r7, sp, #0
   30876:	60f8      	str	r0, [r7, #12]
   30878:	60b9      	str	r1, [r7, #8]
   3087a:	607a      	str	r2, [r7, #4]
   3087c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3087e:	2300      	movs	r3, #0
   30880:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30884:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30886:	2300      	movs	r3, #0
   30888:	623b      	str	r3, [r7, #32]
	int rc = 0;
   3088a:	2300      	movs	r3, #0
   3088c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3088e:	2318      	movs	r3, #24
   30890:	18fb      	adds	r3, r7, r3
   30892:	0018      	movs	r0, r3
   30894:	4b2c      	ldr	r3, [pc, #176]	; (30948 <MQTTDeserialize_suback+0xd8>)
   30896:	4798      	blx	r3
   30898:	0003      	movs	r3, r0
   3089a:	001a      	movs	r2, r3
   3089c:	231c      	movs	r3, #28
   3089e:	18fb      	adds	r3, r7, r3
   308a0:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   308a2:	231c      	movs	r3, #28
   308a4:	18fb      	adds	r3, r7, r3
   308a6:	781b      	ldrb	r3, [r3, #0]
   308a8:	220f      	movs	r2, #15
   308aa:	4393      	bics	r3, r2
   308ac:	b2db      	uxtb	r3, r3
   308ae:	2b90      	cmp	r3, #144	; 0x90
   308b0:	d142      	bne.n	30938 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   308b2:	69bb      	ldr	r3, [r7, #24]
   308b4:	2214      	movs	r2, #20
   308b6:	18ba      	adds	r2, r7, r2
   308b8:	0011      	movs	r1, r2
   308ba:	0018      	movs	r0, r3
   308bc:	4b23      	ldr	r3, [pc, #140]	; (3094c <MQTTDeserialize_suback+0xdc>)
   308be:	4798      	blx	r3
   308c0:	0003      	movs	r3, r0
   308c2:	627b      	str	r3, [r7, #36]	; 0x24
   308c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   308c6:	69bb      	ldr	r3, [r7, #24]
   308c8:	189b      	adds	r3, r3, r2
   308ca:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   308cc:	69bb      	ldr	r3, [r7, #24]
   308ce:	697a      	ldr	r2, [r7, #20]
   308d0:	189b      	adds	r3, r3, r2
   308d2:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   308d4:	6a3b      	ldr	r3, [r7, #32]
   308d6:	69ba      	ldr	r2, [r7, #24]
   308d8:	1a9b      	subs	r3, r3, r2
   308da:	2b01      	cmp	r3, #1
   308dc:	dd2e      	ble.n	3093c <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   308de:	2318      	movs	r3, #24
   308e0:	18fb      	adds	r3, r7, r3
   308e2:	0018      	movs	r0, r3
   308e4:	4b1a      	ldr	r3, [pc, #104]	; (30950 <MQTTDeserialize_suback+0xe0>)
   308e6:	4798      	blx	r3
   308e8:	0003      	movs	r3, r0
   308ea:	b29a      	uxth	r2, r3
   308ec:	68fb      	ldr	r3, [r7, #12]
   308ee:	801a      	strh	r2, [r3, #0]

	*count = 0;
   308f0:	687b      	ldr	r3, [r7, #4]
   308f2:	2200      	movs	r2, #0
   308f4:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   308f6:	e018      	b.n	3092a <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   308f8:	687b      	ldr	r3, [r7, #4]
   308fa:	681a      	ldr	r2, [r3, #0]
   308fc:	68bb      	ldr	r3, [r7, #8]
   308fe:	429a      	cmp	r2, r3
   30900:	dd03      	ble.n	3090a <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   30902:	2301      	movs	r3, #1
   30904:	425b      	negs	r3, r3
   30906:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   30908:	e019      	b.n	3093e <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   3090a:	687b      	ldr	r3, [r7, #4]
   3090c:	681a      	ldr	r2, [r3, #0]
   3090e:	1c51      	adds	r1, r2, #1
   30910:	687b      	ldr	r3, [r7, #4]
   30912:	6019      	str	r1, [r3, #0]
   30914:	0013      	movs	r3, r2
   30916:	009b      	lsls	r3, r3, #2
   30918:	683a      	ldr	r2, [r7, #0]
   3091a:	18d4      	adds	r4, r2, r3
   3091c:	2318      	movs	r3, #24
   3091e:	18fb      	adds	r3, r7, r3
   30920:	0018      	movs	r0, r3
   30922:	4b09      	ldr	r3, [pc, #36]	; (30948 <MQTTDeserialize_suback+0xd8>)
   30924:	4798      	blx	r3
   30926:	0003      	movs	r3, r0
   30928:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   3092a:	69ba      	ldr	r2, [r7, #24]
   3092c:	6a3b      	ldr	r3, [r7, #32]
   3092e:	429a      	cmp	r2, r3
   30930:	d3e2      	bcc.n	308f8 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   30932:	2301      	movs	r3, #1
   30934:	627b      	str	r3, [r7, #36]	; 0x24
   30936:	e002      	b.n	3093e <MQTTDeserialize_suback+0xce>
		goto exit;
   30938:	46c0      	nop			; (mov r8, r8)
   3093a:	e000      	b.n	3093e <MQTTDeserialize_suback+0xce>
		goto exit;
   3093c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30940:	0018      	movs	r0, r3
   30942:	46bd      	mov	sp, r7
   30944:	b00b      	add	sp, #44	; 0x2c
   30946:	bd90      	pop	{r4, r7, pc}
   30948:	00030187 	.word	0x00030187
   3094c:	00030121 	.word	0x00030121
   30950:	00030155 	.word	0x00030155

00030954 <http_client_get_config_defaults>:
   30954:	b580      	push	{r7, lr}
   30956:	b082      	sub	sp, #8
   30958:	af00      	add	r7, sp, #0
   3095a:	6078      	str	r0, [r7, #4]
   3095c:	687b      	ldr	r3, [r7, #4]
   3095e:	2250      	movs	r2, #80	; 0x50
   30960:	801a      	strh	r2, [r3, #0]
   30962:	687b      	ldr	r3, [r7, #4]
   30964:	2200      	movs	r2, #0
   30966:	709a      	strb	r2, [r3, #2]
   30968:	687b      	ldr	r3, [r7, #4]
   3096a:	4a0b      	ldr	r2, [pc, #44]	; (30998 <http_client_get_config_defaults+0x44>)
   3096c:	811a      	strh	r2, [r3, #8]
   3096e:	687b      	ldr	r3, [r7, #4]
   30970:	2200      	movs	r2, #0
   30972:	605a      	str	r2, [r3, #4]
   30974:	687b      	ldr	r3, [r7, #4]
   30976:	2200      	movs	r2, #0
   30978:	60da      	str	r2, [r3, #12]
   3097a:	687b      	ldr	r3, [r7, #4]
   3097c:	2280      	movs	r2, #128	; 0x80
   3097e:	0052      	lsls	r2, r2, #1
   30980:	611a      	str	r2, [r3, #16]
   30982:	687b      	ldr	r3, [r7, #4]
   30984:	2252      	movs	r2, #82	; 0x52
   30986:	615a      	str	r2, [r3, #20]
   30988:	687b      	ldr	r3, [r7, #4]
   3098a:	4a04      	ldr	r2, [pc, #16]	; (3099c <http_client_get_config_defaults+0x48>)
   3098c:	619a      	str	r2, [r3, #24]
   3098e:	46c0      	nop			; (mov r8, r8)
   30990:	46bd      	mov	sp, r7
   30992:	b002      	add	sp, #8
   30994:	bd80      	pop	{r7, pc}
   30996:	46c0      	nop			; (mov r8, r8)
   30998:	00004e20 	.word	0x00004e20
   3099c:	000399bc 	.word	0x000399bc

000309a0 <http_client_init>:
   309a0:	b590      	push	{r4, r7, lr}
   309a2:	b083      	sub	sp, #12
   309a4:	af00      	add	r7, sp, #0
   309a6:	6078      	str	r0, [r7, #4]
   309a8:	6039      	str	r1, [r7, #0]
   309aa:	687b      	ldr	r3, [r7, #4]
   309ac:	2b00      	cmp	r3, #0
   309ae:	d002      	beq.n	309b6 <http_client_init+0x16>
   309b0:	683b      	ldr	r3, [r7, #0]
   309b2:	2b00      	cmp	r3, #0
   309b4:	d102      	bne.n	309bc <http_client_init+0x1c>
   309b6:	2316      	movs	r3, #22
   309b8:	425b      	negs	r3, r3
   309ba:	e058      	b.n	30a6e <http_client_init+0xce>
   309bc:	683b      	ldr	r3, [r7, #0]
   309be:	691b      	ldr	r3, [r3, #16]
   309c0:	2b00      	cmp	r3, #0
   309c2:	d102      	bne.n	309ca <http_client_init+0x2a>
   309c4:	2316      	movs	r3, #22
   309c6:	425b      	negs	r3, r3
   309c8:	e051      	b.n	30a6e <http_client_init+0xce>
   309ca:	683b      	ldr	r3, [r7, #0]
   309cc:	685b      	ldr	r3, [r3, #4]
   309ce:	2b00      	cmp	r3, #0
   309d0:	d102      	bne.n	309d8 <http_client_init+0x38>
   309d2:	2316      	movs	r3, #22
   309d4:	425b      	negs	r3, r3
   309d6:	e04a      	b.n	30a6e <http_client_init+0xce>
   309d8:	683b      	ldr	r3, [r7, #0]
   309da:	695b      	ldr	r3, [r3, #20]
   309dc:	2b51      	cmp	r3, #81	; 0x51
   309de:	d802      	bhi.n	309e6 <http_client_init+0x46>
   309e0:	2316      	movs	r3, #22
   309e2:	425b      	negs	r3, r3
   309e4:	e043      	b.n	30a6e <http_client_init+0xce>
   309e6:	687b      	ldr	r3, [r7, #4]
   309e8:	22e8      	movs	r2, #232	; 0xe8
   309ea:	2100      	movs	r1, #0
   309ec:	0018      	movs	r0, r3
   309ee:	4b22      	ldr	r3, [pc, #136]	; (30a78 <http_client_init+0xd8>)
   309f0:	4798      	blx	r3
   309f2:	687b      	ldr	r3, [r7, #4]
   309f4:	3350      	adds	r3, #80	; 0x50
   309f6:	6839      	ldr	r1, [r7, #0]
   309f8:	221c      	movs	r2, #28
   309fa:	0018      	movs	r0, r3
   309fc:	4b1f      	ldr	r3, [pc, #124]	; (30a7c <http_client_init+0xdc>)
   309fe:	4798      	blx	r3
   30a00:	687b      	ldr	r3, [r7, #4]
   30a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30a04:	2b00      	cmp	r3, #0
   30a06:	d115      	bne.n	30a34 <http_client_init+0x94>
   30a08:	683b      	ldr	r3, [r7, #0]
   30a0a:	691b      	ldr	r3, [r3, #16]
   30a0c:	0018      	movs	r0, r3
   30a0e:	4b1c      	ldr	r3, [pc, #112]	; (30a80 <http_client_init+0xe0>)
   30a10:	4798      	blx	r3
   30a12:	0003      	movs	r3, r0
   30a14:	001a      	movs	r2, r3
   30a16:	687b      	ldr	r3, [r7, #4]
   30a18:	65da      	str	r2, [r3, #92]	; 0x5c
   30a1a:	687b      	ldr	r3, [r7, #4]
   30a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30a1e:	2b00      	cmp	r3, #0
   30a20:	d102      	bne.n	30a28 <http_client_init+0x88>
   30a22:	230c      	movs	r3, #12
   30a24:	425b      	negs	r3, r3
   30a26:	e022      	b.n	30a6e <http_client_init+0xce>
   30a28:	687b      	ldr	r3, [r7, #4]
   30a2a:	2241      	movs	r2, #65	; 0x41
   30a2c:	5c99      	ldrb	r1, [r3, r2]
   30a2e:	2004      	movs	r0, #4
   30a30:	4301      	orrs	r1, r0
   30a32:	5499      	strb	r1, [r3, r2]
   30a34:	683b      	ldr	r3, [r7, #0]
   30a36:	891b      	ldrh	r3, [r3, #8]
   30a38:	2b00      	cmp	r3, #0
   30a3a:	d010      	beq.n	30a5e <http_client_init+0xbe>
   30a3c:	683b      	ldr	r3, [r7, #0]
   30a3e:	6858      	ldr	r0, [r3, #4]
   30a40:	687a      	ldr	r2, [r7, #4]
   30a42:	4910      	ldr	r1, [pc, #64]	; (30a84 <http_client_init+0xe4>)
   30a44:	2300      	movs	r3, #0
   30a46:	4c10      	ldr	r4, [pc, #64]	; (30a88 <http_client_init+0xe8>)
   30a48:	47a0      	blx	r4
   30a4a:	0002      	movs	r2, r0
   30a4c:	687b      	ldr	r3, [r7, #4]
   30a4e:	649a      	str	r2, [r3, #72]	; 0x48
   30a50:	687b      	ldr	r3, [r7, #4]
   30a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30a54:	2b00      	cmp	r3, #0
   30a56:	da02      	bge.n	30a5e <http_client_init+0xbe>
   30a58:	231c      	movs	r3, #28
   30a5a:	425b      	negs	r3, r3
   30a5c:	e007      	b.n	30a6e <http_client_init+0xce>
   30a5e:	687b      	ldr	r3, [r7, #4]
   30a60:	2200      	movs	r2, #0
   30a62:	66da      	str	r2, [r3, #108]	; 0x6c
   30a64:	687b      	ldr	r3, [r7, #4]
   30a66:	22d8      	movs	r2, #216	; 0xd8
   30a68:	2100      	movs	r1, #0
   30a6a:	5099      	str	r1, [r3, r2]
   30a6c:	2300      	movs	r3, #0
   30a6e:	0018      	movs	r0, r3
   30a70:	46bd      	mov	sp, r7
   30a72:	b003      	add	sp, #12
   30a74:	bd90      	pop	{r4, r7, pc}
   30a76:	46c0      	nop			; (mov r8, r8)
   30a78:	0003489f 	.word	0x0003489f
   30a7c:	00034869 	.word	0x00034869
   30a80:	00034841 	.word	0x00034841
   30a84:	00030d51 	.word	0x00030d51
   30a88:	000323f5 	.word	0x000323f5

00030a8c <http_client_register_callback>:
   30a8c:	b580      	push	{r7, lr}
   30a8e:	b082      	sub	sp, #8
   30a90:	af00      	add	r7, sp, #0
   30a92:	6078      	str	r0, [r7, #4]
   30a94:	6039      	str	r1, [r7, #0]
   30a96:	687b      	ldr	r3, [r7, #4]
   30a98:	2b00      	cmp	r3, #0
   30a9a:	d102      	bne.n	30aa2 <http_client_register_callback+0x16>
   30a9c:	2316      	movs	r3, #22
   30a9e:	425b      	negs	r3, r3
   30aa0:	e003      	b.n	30aaa <http_client_register_callback+0x1e>
   30aa2:	687b      	ldr	r3, [r7, #4]
   30aa4:	683a      	ldr	r2, [r7, #0]
   30aa6:	64da      	str	r2, [r3, #76]	; 0x4c
   30aa8:	2300      	movs	r3, #0
   30aaa:	0018      	movs	r0, r3
   30aac:	46bd      	mov	sp, r7
   30aae:	b002      	add	sp, #8
   30ab0:	bd80      	pop	{r7, pc}
	...

00030ab4 <_hwerr_to_stderr>:
   30ab4:	b580      	push	{r7, lr}
   30ab6:	b082      	sub	sp, #8
   30ab8:	af00      	add	r7, sp, #0
   30aba:	6078      	str	r0, [r7, #4]
   30abc:	687b      	ldr	r3, [r7, #4]
   30abe:	330e      	adds	r3, #14
   30ac0:	2b0e      	cmp	r3, #14
   30ac2:	d825      	bhi.n	30b10 <_hwerr_to_stderr+0x5c>
   30ac4:	009a      	lsls	r2, r3, #2
   30ac6:	4b18      	ldr	r3, [pc, #96]	; (30b28 <_hwerr_to_stderr+0x74>)
   30ac8:	18d3      	adds	r3, r2, r3
   30aca:	681b      	ldr	r3, [r3, #0]
   30acc:	469f      	mov	pc, r3
   30ace:	2305      	movs	r3, #5
   30ad0:	425b      	negs	r3, r3
   30ad2:	e024      	b.n	30b1e <_hwerr_to_stderr+0x6a>
   30ad4:	2302      	movs	r3, #2
   30ad6:	425b      	negs	r3, r3
   30ad8:	e021      	b.n	30b1e <_hwerr_to_stderr+0x6a>
   30ada:	2370      	movs	r3, #112	; 0x70
   30adc:	425b      	negs	r3, r3
   30ade:	e01e      	b.n	30b1e <_hwerr_to_stderr+0x6a>
   30ae0:	230c      	movs	r3, #12
   30ae2:	425b      	negs	r3, r3
   30ae4:	e01b      	b.n	30b1e <_hwerr_to_stderr+0x6a>
   30ae6:	2316      	movs	r3, #22
   30ae8:	425b      	negs	r3, r3
   30aea:	e018      	b.n	30b1e <_hwerr_to_stderr+0x6a>
   30aec:	230c      	movs	r3, #12
   30aee:	425b      	negs	r3, r3
   30af0:	e015      	b.n	30b1e <_hwerr_to_stderr+0x6a>
   30af2:	2305      	movs	r3, #5
   30af4:	425b      	negs	r3, r3
   30af6:	e012      	b.n	30b1e <_hwerr_to_stderr+0x6a>
   30af8:	2379      	movs	r3, #121	; 0x79
   30afa:	425b      	negs	r3, r3
   30afc:	e00f      	b.n	30b1e <_hwerr_to_stderr+0x6a>
   30afe:	2368      	movs	r3, #104	; 0x68
   30b00:	425b      	negs	r3, r3
   30b02:	e00c      	b.n	30b1e <_hwerr_to_stderr+0x6a>
   30b04:	230b      	movs	r3, #11
   30b06:	425b      	negs	r3, r3
   30b08:	e009      	b.n	30b1e <_hwerr_to_stderr+0x6a>
   30b0a:	2310      	movs	r3, #16
   30b0c:	425b      	negs	r3, r3
   30b0e:	e006      	b.n	30b1e <_hwerr_to_stderr+0x6a>
   30b10:	687b      	ldr	r3, [r7, #4]
   30b12:	2b00      	cmp	r3, #0
   30b14:	da02      	bge.n	30b1c <_hwerr_to_stderr+0x68>
   30b16:	2305      	movs	r3, #5
   30b18:	425b      	negs	r3, r3
   30b1a:	e000      	b.n	30b1e <_hwerr_to_stderr+0x6a>
   30b1c:	2300      	movs	r3, #0
   30b1e:	0018      	movs	r0, r3
   30b20:	46bd      	mov	sp, r7
   30b22:	b002      	add	sp, #8
   30b24:	bd80      	pop	{r7, pc}
   30b26:	46c0      	nop			; (mov r8, r8)
   30b28:	00039af8 	.word	0x00039af8

00030b2c <http_client_socket_event_handler>:
   30b2c:	b580      	push	{r7, lr}
   30b2e:	b08a      	sub	sp, #40	; 0x28
   30b30:	af00      	add	r7, sp, #0
   30b32:	603a      	str	r2, [r7, #0]
   30b34:	1dfb      	adds	r3, r7, #7
   30b36:	1c02      	adds	r2, r0, #0
   30b38:	701a      	strb	r2, [r3, #0]
   30b3a:	1dbb      	adds	r3, r7, #6
   30b3c:	1c0a      	adds	r2, r1, #0
   30b3e:	701a      	strb	r2, [r3, #0]
   30b40:	1dfb      	adds	r3, r7, #7
   30b42:	2200      	movs	r2, #0
   30b44:	569a      	ldrsb	r2, [r3, r2]
   30b46:	4b4b      	ldr	r3, [pc, #300]	; (30c74 <http_client_socket_event_handler+0x148>)
   30b48:	0092      	lsls	r2, r2, #2
   30b4a:	58d3      	ldr	r3, [r2, r3]
   30b4c:	627b      	str	r3, [r7, #36]	; 0x24
   30b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30b50:	2b00      	cmp	r3, #0
   30b52:	d100      	bne.n	30b56 <http_client_socket_event_handler+0x2a>
   30b54:	e08a      	b.n	30c6c <http_client_socket_event_handler+0x140>
   30b56:	1dbb      	adds	r3, r7, #6
   30b58:	781b      	ldrb	r3, [r3, #0]
   30b5a:	2b06      	cmp	r3, #6
   30b5c:	d040      	beq.n	30be0 <http_client_socket_event_handler+0xb4>
   30b5e:	2b07      	cmp	r3, #7
   30b60:	d060      	beq.n	30c24 <http_client_socket_event_handler+0xf8>
   30b62:	2b05      	cmp	r3, #5
   30b64:	d000      	beq.n	30b68 <http_client_socket_event_handler+0x3c>
   30b66:	e082      	b.n	30c6e <http_client_socket_event_handler+0x142>
   30b68:	683b      	ldr	r3, [r7, #0]
   30b6a:	623b      	str	r3, [r7, #32]
   30b6c:	6a3b      	ldr	r3, [r7, #32]
   30b6e:	785b      	ldrb	r3, [r3, #1]
   30b70:	b25b      	sxtb	r3, r3
   30b72:	001a      	movs	r2, r3
   30b74:	230c      	movs	r3, #12
   30b76:	18fb      	adds	r3, r7, r3
   30b78:	601a      	str	r2, [r3, #0]
   30b7a:	6a3b      	ldr	r3, [r7, #32]
   30b7c:	785b      	ldrb	r3, [r3, #1]
   30b7e:	b25b      	sxtb	r3, r3
   30b80:	2b00      	cmp	r3, #0
   30b82:	da0c      	bge.n	30b9e <http_client_socket_event_handler+0x72>
   30b84:	6a3b      	ldr	r3, [r7, #32]
   30b86:	785b      	ldrb	r3, [r3, #1]
   30b88:	b25b      	sxtb	r3, r3
   30b8a:	0018      	movs	r0, r3
   30b8c:	4b3a      	ldr	r3, [pc, #232]	; (30c78 <http_client_socket_event_handler+0x14c>)
   30b8e:	4798      	blx	r3
   30b90:	0002      	movs	r2, r0
   30b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30b94:	0011      	movs	r1, r2
   30b96:	0018      	movs	r0, r3
   30b98:	4b38      	ldr	r3, [pc, #224]	; (30c7c <http_client_socket_event_handler+0x150>)
   30b9a:	4798      	blx	r3
   30b9c:	e067      	b.n	30c6e <http_client_socket_event_handler+0x142>
   30b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30ba2:	2b00      	cmp	r3, #0
   30ba4:	d006      	beq.n	30bb4 <http_client_socket_event_handler+0x88>
   30ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30baa:	220c      	movs	r2, #12
   30bac:	18ba      	adds	r2, r7, r2
   30bae:	6a78      	ldr	r0, [r7, #36]	; 0x24
   30bb0:	2100      	movs	r1, #0
   30bb2:	4798      	blx	r3
   30bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30bb6:	2203      	movs	r2, #3
   30bb8:	66da      	str	r2, [r3, #108]	; 0x6c
   30bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30bbc:	6d58      	ldr	r0, [r3, #84]	; 0x54
   30bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30bc0:	6c99      	ldr	r1, [r3, #72]	; 0x48
   30bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30bc4:	2258      	movs	r2, #88	; 0x58
   30bc6:	5a9b      	ldrh	r3, [r3, r2]
   30bc8:	001a      	movs	r2, r3
   30bca:	4b2d      	ldr	r3, [pc, #180]	; (30c80 <http_client_socket_event_handler+0x154>)
   30bcc:	4798      	blx	r3
   30bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30bd0:	0018      	movs	r0, r3
   30bd2:	4b2c      	ldr	r3, [pc, #176]	; (30c84 <http_client_socket_event_handler+0x158>)
   30bd4:	4798      	blx	r3
   30bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30bd8:	0018      	movs	r0, r3
   30bda:	4b2b      	ldr	r3, [pc, #172]	; (30c88 <http_client_socket_event_handler+0x15c>)
   30bdc:	4798      	blx	r3
   30bde:	e046      	b.n	30c6e <http_client_socket_event_handler+0x142>
   30be0:	683b      	ldr	r3, [r7, #0]
   30be2:	61fb      	str	r3, [r7, #28]
   30be4:	69fb      	ldr	r3, [r7, #28]
   30be6:	2204      	movs	r2, #4
   30be8:	5e9b      	ldrsh	r3, [r3, r2]
   30bea:	2b00      	cmp	r3, #0
   30bec:	dd09      	ble.n	30c02 <http_client_socket_event_handler+0xd6>
   30bee:	69fb      	ldr	r3, [r7, #28]
   30bf0:	2204      	movs	r2, #4
   30bf2:	5e9b      	ldrsh	r3, [r3, r2]
   30bf4:	001a      	movs	r2, r3
   30bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30bf8:	0011      	movs	r1, r2
   30bfa:	0018      	movs	r0, r3
   30bfc:	4b23      	ldr	r3, [pc, #140]	; (30c8c <http_client_socket_event_handler+0x160>)
   30bfe:	4798      	blx	r3
   30c00:	e00b      	b.n	30c1a <http_client_socket_event_handler+0xee>
   30c02:	69fb      	ldr	r3, [r7, #28]
   30c04:	2204      	movs	r2, #4
   30c06:	5e9b      	ldrsh	r3, [r3, r2]
   30c08:	0018      	movs	r0, r3
   30c0a:	4b1b      	ldr	r3, [pc, #108]	; (30c78 <http_client_socket_event_handler+0x14c>)
   30c0c:	4798      	blx	r3
   30c0e:	0002      	movs	r2, r0
   30c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30c12:	0011      	movs	r1, r2
   30c14:	0018      	movs	r0, r3
   30c16:	4b19      	ldr	r3, [pc, #100]	; (30c7c <http_client_socket_event_handler+0x150>)
   30c18:	4798      	blx	r3
   30c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30c1c:	0018      	movs	r0, r3
   30c1e:	4b19      	ldr	r3, [pc, #100]	; (30c84 <http_client_socket_event_handler+0x158>)
   30c20:	4798      	blx	r3
   30c22:	e024      	b.n	30c6e <http_client_socket_event_handler+0x142>
   30c24:	231a      	movs	r3, #26
   30c26:	18fb      	adds	r3, r7, r3
   30c28:	683a      	ldr	r2, [r7, #0]
   30c2a:	8812      	ldrh	r2, [r2, #0]
   30c2c:	801a      	strh	r2, [r3, #0]
   30c2e:	231a      	movs	r3, #26
   30c30:	18fb      	adds	r3, r7, r3
   30c32:	2200      	movs	r2, #0
   30c34:	5e9b      	ldrsh	r3, [r3, r2]
   30c36:	2b00      	cmp	r3, #0
   30c38:	da0d      	bge.n	30c56 <http_client_socket_event_handler+0x12a>
   30c3a:	231a      	movs	r3, #26
   30c3c:	18fb      	adds	r3, r7, r3
   30c3e:	2200      	movs	r2, #0
   30c40:	5e9b      	ldrsh	r3, [r3, r2]
   30c42:	0018      	movs	r0, r3
   30c44:	4b0c      	ldr	r3, [pc, #48]	; (30c78 <http_client_socket_event_handler+0x14c>)
   30c46:	4798      	blx	r3
   30c48:	0002      	movs	r2, r0
   30c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30c4c:	0011      	movs	r1, r2
   30c4e:	0018      	movs	r0, r3
   30c50:	4b0a      	ldr	r3, [pc, #40]	; (30c7c <http_client_socket_event_handler+0x150>)
   30c52:	4798      	blx	r3
   30c54:	e003      	b.n	30c5e <http_client_socket_event_handler+0x132>
   30c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30c58:	0018      	movs	r0, r3
   30c5a:	4b0b      	ldr	r3, [pc, #44]	; (30c88 <http_client_socket_event_handler+0x15c>)
   30c5c:	4798      	blx	r3
   30c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30c60:	2241      	movs	r2, #65	; 0x41
   30c62:	5c99      	ldrb	r1, [r3, r2]
   30c64:	2001      	movs	r0, #1
   30c66:	4381      	bics	r1, r0
   30c68:	5499      	strb	r1, [r3, r2]
   30c6a:	e000      	b.n	30c6e <http_client_socket_event_handler+0x142>
   30c6c:	46c0      	nop			; (mov r8, r8)
   30c6e:	46bd      	mov	sp, r7
   30c70:	b00a      	add	sp, #40	; 0x28
   30c72:	bd80      	pop	{r7, pc}
   30c74:	200042e0 	.word	0x200042e0
   30c78:	00030ab5 	.word	0x00030ab5
   30c7c:	00031129 	.word	0x00031129
   30c80:	00032485 	.word	0x00032485
   30c84:	000319b5 	.word	0x000319b5
   30c88:	0003127d 	.word	0x0003127d
   30c8c:	00031a19 	.word	0x00031a19

00030c90 <http_client_socket_resolve_handler>:
   30c90:	b580      	push	{r7, lr}
   30c92:	b088      	sub	sp, #32
   30c94:	af00      	add	r7, sp, #0
   30c96:	6078      	str	r0, [r7, #4]
   30c98:	6039      	str	r1, [r7, #0]
   30c9a:	2300      	movs	r3, #0
   30c9c:	61fb      	str	r3, [r7, #28]
   30c9e:	e048      	b.n	30d32 <http_client_socket_resolve_handler+0xa2>
   30ca0:	4b27      	ldr	r3, [pc, #156]	; (30d40 <http_client_socket_resolve_handler+0xb0>)
   30ca2:	69fa      	ldr	r2, [r7, #28]
   30ca4:	0092      	lsls	r2, r2, #2
   30ca6:	58d3      	ldr	r3, [r2, r3]
   30ca8:	2b00      	cmp	r3, #0
   30caa:	d03f      	beq.n	30d2c <http_client_socket_resolve_handler+0x9c>
   30cac:	4b24      	ldr	r3, [pc, #144]	; (30d40 <http_client_socket_resolve_handler+0xb0>)
   30cae:	69fa      	ldr	r2, [r7, #28]
   30cb0:	0092      	lsls	r2, r2, #2
   30cb2:	58d3      	ldr	r3, [r2, r3]
   30cb4:	61bb      	str	r3, [r7, #24]
   30cb6:	69bb      	ldr	r3, [r7, #24]
   30cb8:	1c5a      	adds	r2, r3, #1
   30cba:	687b      	ldr	r3, [r7, #4]
   30cbc:	0011      	movs	r1, r2
   30cbe:	0018      	movs	r0, r3
   30cc0:	4b20      	ldr	r3, [pc, #128]	; (30d44 <http_client_socket_resolve_handler+0xb4>)
   30cc2:	4798      	blx	r3
   30cc4:	1e03      	subs	r3, r0, #0
   30cc6:	d131      	bne.n	30d2c <http_client_socket_resolve_handler+0x9c>
   30cc8:	69bb      	ldr	r3, [r7, #24]
   30cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30ccc:	2b01      	cmp	r3, #1
   30cce:	d12d      	bne.n	30d2c <http_client_socket_resolve_handler+0x9c>
   30cd0:	683b      	ldr	r3, [r7, #0]
   30cd2:	2b00      	cmp	r3, #0
   30cd4:	d107      	bne.n	30ce6 <http_client_socket_resolve_handler+0x56>
   30cd6:	2376      	movs	r3, #118	; 0x76
   30cd8:	425a      	negs	r2, r3
   30cda:	69bb      	ldr	r3, [r7, #24]
   30cdc:	0011      	movs	r1, r2
   30cde:	0018      	movs	r0, r3
   30ce0:	4b19      	ldr	r3, [pc, #100]	; (30d48 <http_client_socket_resolve_handler+0xb8>)
   30ce2:	4798      	blx	r3
   30ce4:	e028      	b.n	30d38 <http_client_socket_resolve_handler+0xa8>
   30ce6:	2308      	movs	r3, #8
   30ce8:	18fb      	adds	r3, r7, r3
   30cea:	2202      	movs	r2, #2
   30cec:	801a      	strh	r2, [r3, #0]
   30cee:	69bb      	ldr	r3, [r7, #24]
   30cf0:	2250      	movs	r2, #80	; 0x50
   30cf2:	5a9b      	ldrh	r3, [r3, r2]
   30cf4:	021b      	lsls	r3, r3, #8
   30cf6:	b21a      	sxth	r2, r3
   30cf8:	69bb      	ldr	r3, [r7, #24]
   30cfa:	2150      	movs	r1, #80	; 0x50
   30cfc:	5a5b      	ldrh	r3, [r3, r1]
   30cfe:	0a1b      	lsrs	r3, r3, #8
   30d00:	b29b      	uxth	r3, r3
   30d02:	b21b      	sxth	r3, r3
   30d04:	4313      	orrs	r3, r2
   30d06:	b21b      	sxth	r3, r3
   30d08:	b29a      	uxth	r2, r3
   30d0a:	2308      	movs	r3, #8
   30d0c:	18fb      	adds	r3, r7, r3
   30d0e:	805a      	strh	r2, [r3, #2]
   30d10:	2308      	movs	r3, #8
   30d12:	18fb      	adds	r3, r7, r3
   30d14:	683a      	ldr	r2, [r7, #0]
   30d16:	605a      	str	r2, [r3, #4]
   30d18:	69bb      	ldr	r3, [r7, #24]
   30d1a:	781b      	ldrb	r3, [r3, #0]
   30d1c:	b25b      	sxtb	r3, r3
   30d1e:	2208      	movs	r2, #8
   30d20:	18b9      	adds	r1, r7, r2
   30d22:	2210      	movs	r2, #16
   30d24:	0018      	movs	r0, r3
   30d26:	4b09      	ldr	r3, [pc, #36]	; (30d4c <http_client_socket_resolve_handler+0xbc>)
   30d28:	4798      	blx	r3
   30d2a:	e005      	b.n	30d38 <http_client_socket_resolve_handler+0xa8>
   30d2c:	69fb      	ldr	r3, [r7, #28]
   30d2e:	3301      	adds	r3, #1
   30d30:	61fb      	str	r3, [r7, #28]
   30d32:	69fb      	ldr	r3, [r7, #28]
   30d34:	2b06      	cmp	r3, #6
   30d36:	ddb3      	ble.n	30ca0 <http_client_socket_resolve_handler+0x10>
   30d38:	46bd      	mov	sp, r7
   30d3a:	b008      	add	sp, #32
   30d3c:	bd80      	pop	{r7, pc}
   30d3e:	46c0      	nop			; (mov r8, r8)
   30d40:	200042e0 	.word	0x200042e0
   30d44:	00034bf7 	.word	0x00034bf7
   30d48:	00031129 	.word	0x00031129
   30d4c:	000256a5 	.word	0x000256a5

00030d50 <http_client_timer_callback>:
   30d50:	b580      	push	{r7, lr}
   30d52:	b086      	sub	sp, #24
   30d54:	af00      	add	r7, sp, #0
   30d56:	60f8      	str	r0, [r7, #12]
   30d58:	60b9      	str	r1, [r7, #8]
   30d5a:	607a      	str	r2, [r7, #4]
   30d5c:	603b      	str	r3, [r7, #0]
   30d5e:	687b      	ldr	r3, [r7, #4]
   30d60:	617b      	str	r3, [r7, #20]
   30d62:	697b      	ldr	r3, [r7, #20]
   30d64:	2b00      	cmp	r3, #0
   30d66:	d007      	beq.n	30d78 <http_client_timer_callback+0x28>
   30d68:	233e      	movs	r3, #62	; 0x3e
   30d6a:	425a      	negs	r2, r3
   30d6c:	697b      	ldr	r3, [r7, #20]
   30d6e:	0011      	movs	r1, r2
   30d70:	0018      	movs	r0, r3
   30d72:	4b03      	ldr	r3, [pc, #12]	; (30d80 <http_client_timer_callback+0x30>)
   30d74:	4798      	blx	r3
   30d76:	e000      	b.n	30d7a <http_client_timer_callback+0x2a>
   30d78:	46c0      	nop			; (mov r8, r8)
   30d7a:	46bd      	mov	sp, r7
   30d7c:	b006      	add	sp, #24
   30d7e:	bd80      	pop	{r7, pc}
   30d80:	00031129 	.word	0x00031129

00030d84 <_is_ip>:
   30d84:	b580      	push	{r7, lr}
   30d86:	b084      	sub	sp, #16
   30d88:	af00      	add	r7, sp, #0
   30d8a:	6078      	str	r0, [r7, #4]
   30d8c:	2300      	movs	r3, #0
   30d8e:	60fb      	str	r3, [r7, #12]
   30d90:	e03a      	b.n	30e08 <_is_ip+0x84>
   30d92:	687b      	ldr	r3, [r7, #4]
   30d94:	1c5a      	adds	r2, r3, #1
   30d96:	607a      	str	r2, [r7, #4]
   30d98:	220b      	movs	r2, #11
   30d9a:	18ba      	adds	r2, r7, r2
   30d9c:	781b      	ldrb	r3, [r3, #0]
   30d9e:	7013      	strb	r3, [r2, #0]
   30da0:	230b      	movs	r3, #11
   30da2:	18fb      	adds	r3, r7, r3
   30da4:	781b      	ldrb	r3, [r3, #0]
   30da6:	2b60      	cmp	r3, #96	; 0x60
   30da8:	d904      	bls.n	30db4 <_is_ip+0x30>
   30daa:	230b      	movs	r3, #11
   30dac:	18fb      	adds	r3, r7, r3
   30dae:	781b      	ldrb	r3, [r3, #0]
   30db0:	2b66      	cmp	r3, #102	; 0x66
   30db2:	d913      	bls.n	30ddc <_is_ip+0x58>
   30db4:	230b      	movs	r3, #11
   30db6:	18fb      	adds	r3, r7, r3
   30db8:	781b      	ldrb	r3, [r3, #0]
   30dba:	2b40      	cmp	r3, #64	; 0x40
   30dbc:	d904      	bls.n	30dc8 <_is_ip+0x44>
   30dbe:	230b      	movs	r3, #11
   30dc0:	18fb      	adds	r3, r7, r3
   30dc2:	781b      	ldrb	r3, [r3, #0]
   30dc4:	2b46      	cmp	r3, #70	; 0x46
   30dc6:	d909      	bls.n	30ddc <_is_ip+0x58>
   30dc8:	230b      	movs	r3, #11
   30dca:	18fb      	adds	r3, r7, r3
   30dcc:	781b      	ldrb	r3, [r3, #0]
   30dce:	2b3a      	cmp	r3, #58	; 0x3a
   30dd0:	d004      	beq.n	30ddc <_is_ip+0x58>
   30dd2:	230b      	movs	r3, #11
   30dd4:	18fb      	adds	r3, r7, r3
   30dd6:	781b      	ldrb	r3, [r3, #0]
   30dd8:	2b2f      	cmp	r3, #47	; 0x2f
   30dda:	d102      	bne.n	30de2 <_is_ip+0x5e>
   30ddc:	2301      	movs	r3, #1
   30dde:	60fb      	str	r3, [r7, #12]
   30de0:	e012      	b.n	30e08 <_is_ip+0x84>
   30de2:	230b      	movs	r3, #11
   30de4:	18fb      	adds	r3, r7, r3
   30de6:	781b      	ldrb	r3, [r3, #0]
   30de8:	2b2e      	cmp	r3, #46	; 0x2e
   30dea:	d104      	bne.n	30df6 <_is_ip+0x72>
   30dec:	68fb      	ldr	r3, [r7, #12]
   30dee:	2b00      	cmp	r3, #0
   30df0:	d00a      	beq.n	30e08 <_is_ip+0x84>
   30df2:	2300      	movs	r3, #0
   30df4:	e00d      	b.n	30e12 <_is_ip+0x8e>
   30df6:	230b      	movs	r3, #11
   30df8:	18fb      	adds	r3, r7, r3
   30dfa:	781b      	ldrb	r3, [r3, #0]
   30dfc:	2230      	movs	r2, #48	; 0x30
   30dfe:	4013      	ands	r3, r2
   30e00:	2b30      	cmp	r3, #48	; 0x30
   30e02:	d001      	beq.n	30e08 <_is_ip+0x84>
   30e04:	2300      	movs	r3, #0
   30e06:	e004      	b.n	30e12 <_is_ip+0x8e>
   30e08:	687b      	ldr	r3, [r7, #4]
   30e0a:	781b      	ldrb	r3, [r3, #0]
   30e0c:	2b00      	cmp	r3, #0
   30e0e:	d1c0      	bne.n	30d92 <_is_ip+0xe>
   30e10:	2301      	movs	r3, #1
   30e12:	0018      	movs	r0, r3
   30e14:	46bd      	mov	sp, r7
   30e16:	b004      	add	sp, #16
   30e18:	bd80      	pop	{r7, pc}
	...

00030e1c <http_client_send_request>:
   30e1c:	b5b0      	push	{r4, r5, r7, lr}
   30e1e:	b08e      	sub	sp, #56	; 0x38
   30e20:	af00      	add	r7, sp, #0
   30e22:	60f8      	str	r0, [r7, #12]
   30e24:	60b9      	str	r1, [r7, #8]
   30e26:	603b      	str	r3, [r7, #0]
   30e28:	1dfb      	adds	r3, r7, #7
   30e2a:	701a      	strb	r2, [r3, #0]
   30e2c:	2337      	movs	r3, #55	; 0x37
   30e2e:	18fb      	adds	r3, r7, r3
   30e30:	2200      	movs	r2, #0
   30e32:	701a      	strb	r2, [r3, #0]
   30e34:	2300      	movs	r3, #0
   30e36:	62bb      	str	r3, [r7, #40]	; 0x28
   30e38:	2300      	movs	r3, #0
   30e3a:	633b      	str	r3, [r7, #48]	; 0x30
   30e3c:	2300      	movs	r3, #0
   30e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   30e40:	2300      	movs	r3, #0
   30e42:	627b      	str	r3, [r7, #36]	; 0x24
   30e44:	68fb      	ldr	r3, [r7, #12]
   30e46:	2b00      	cmp	r3, #0
   30e48:	d102      	bne.n	30e50 <http_client_send_request+0x34>
   30e4a:	2316      	movs	r3, #22
   30e4c:	425b      	negs	r3, r3
   30e4e:	e145      	b.n	310dc <http_client_send_request+0x2c0>
   30e50:	68fb      	ldr	r3, [r7, #12]
   30e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30e54:	2b02      	cmp	r3, #2
   30e56:	d902      	bls.n	30e5e <http_client_send_request+0x42>
   30e58:	2310      	movs	r3, #16
   30e5a:	425b      	negs	r3, r3
   30e5c:	e13e      	b.n	310dc <http_client_send_request+0x2c0>
   30e5e:	49a1      	ldr	r1, [pc, #644]	; (310e4 <http_client_send_request+0x2c8>)
   30e60:	68bb      	ldr	r3, [r7, #8]
   30e62:	2207      	movs	r2, #7
   30e64:	0018      	movs	r0, r3
   30e66:	4ba0      	ldr	r3, [pc, #640]	; (310e8 <http_client_send_request+0x2cc>)
   30e68:	4798      	blx	r3
   30e6a:	1e03      	subs	r3, r0, #0
   30e6c:	d102      	bne.n	30e74 <http_client_send_request+0x58>
   30e6e:	2307      	movs	r3, #7
   30e70:	633b      	str	r3, [r7, #48]	; 0x30
   30e72:	e009      	b.n	30e88 <http_client_send_request+0x6c>
   30e74:	499d      	ldr	r1, [pc, #628]	; (310ec <http_client_send_request+0x2d0>)
   30e76:	68bb      	ldr	r3, [r7, #8]
   30e78:	2208      	movs	r2, #8
   30e7a:	0018      	movs	r0, r3
   30e7c:	4b9a      	ldr	r3, [pc, #616]	; (310e8 <http_client_send_request+0x2cc>)
   30e7e:	4798      	blx	r3
   30e80:	1e03      	subs	r3, r0, #0
   30e82:	d101      	bne.n	30e88 <http_client_send_request+0x6c>
   30e84:	2308      	movs	r3, #8
   30e86:	633b      	str	r3, [r7, #48]	; 0x30
   30e88:	68fb      	ldr	r3, [r7, #12]
   30e8a:	1c5c      	adds	r4, r3, #1
   30e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30e8e:	68ba      	ldr	r2, [r7, #8]
   30e90:	18d5      	adds	r5, r2, r3
   30e92:	68fb      	ldr	r3, [r7, #12]
   30e94:	3301      	adds	r3, #1
   30e96:	0018      	movs	r0, r3
   30e98:	4b95      	ldr	r3, [pc, #596]	; (310f0 <http_client_send_request+0x2d4>)
   30e9a:	4798      	blx	r3
   30e9c:	0003      	movs	r3, r0
   30e9e:	001a      	movs	r2, r3
   30ea0:	0029      	movs	r1, r5
   30ea2:	0020      	movs	r0, r4
   30ea4:	4b90      	ldr	r3, [pc, #576]	; (310e8 <http_client_send_request+0x2cc>)
   30ea6:	4798      	blx	r3
   30ea8:	0003      	movs	r3, r0
   30eaa:	627b      	str	r3, [r7, #36]	; 0x24
   30eac:	e00d      	b.n	30eca <http_client_send_request+0xae>
   30eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   30eb0:	1c5a      	adds	r2, r3, #1
   30eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
   30eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   30eb6:	68b9      	ldr	r1, [r7, #8]
   30eb8:	188a      	adds	r2, r1, r2
   30eba:	7811      	ldrb	r1, [r2, #0]
   30ebc:	68fa      	ldr	r2, [r7, #12]
   30ebe:	18d3      	adds	r3, r2, r3
   30ec0:	1c0a      	adds	r2, r1, #0
   30ec2:	705a      	strb	r2, [r3, #1]
   30ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30ec6:	3301      	adds	r3, #1
   30ec8:	633b      	str	r3, [r7, #48]	; 0x30
   30eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30ecc:	68ba      	ldr	r2, [r7, #8]
   30ece:	18d3      	adds	r3, r2, r3
   30ed0:	781b      	ldrb	r3, [r3, #0]
   30ed2:	2b00      	cmp	r3, #0
   30ed4:	d005      	beq.n	30ee2 <http_client_send_request+0xc6>
   30ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30ed8:	68ba      	ldr	r2, [r7, #8]
   30eda:	18d3      	adds	r3, r2, r3
   30edc:	781b      	ldrb	r3, [r3, #0]
   30ede:	2b2f      	cmp	r3, #47	; 0x2f
   30ee0:	d1e5      	bne.n	30eae <http_client_send_request+0x92>
   30ee2:	68fa      	ldr	r2, [r7, #12]
   30ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   30ee6:	18d3      	adds	r3, r2, r3
   30ee8:	3301      	adds	r3, #1
   30eea:	2200      	movs	r2, #0
   30eec:	701a      	strb	r2, [r3, #0]
   30eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30ef0:	68ba      	ldr	r2, [r7, #8]
   30ef2:	18d3      	adds	r3, r2, r3
   30ef4:	62bb      	str	r3, [r7, #40]	; 0x28
   30ef6:	68fb      	ldr	r3, [r7, #12]
   30ef8:	3301      	adds	r3, #1
   30efa:	781b      	ldrb	r3, [r3, #0]
   30efc:	2b00      	cmp	r3, #0
   30efe:	d102      	bne.n	30f06 <http_client_send_request+0xea>
   30f00:	2316      	movs	r3, #22
   30f02:	425b      	negs	r3, r3
   30f04:	e0ea      	b.n	310dc <http_client_send_request+0x2c0>
   30f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30f08:	0018      	movs	r0, r3
   30f0a:	4b79      	ldr	r3, [pc, #484]	; (310f0 <http_client_send_request+0x2d4>)
   30f0c:	4798      	blx	r3
   30f0e:	0003      	movs	r3, r0
   30f10:	2b3f      	cmp	r3, #63	; 0x3f
   30f12:	d902      	bls.n	30f1a <http_client_send_request+0xfe>
   30f14:	235b      	movs	r3, #91	; 0x5b
   30f16:	425b      	negs	r3, r3
   30f18:	e0e0      	b.n	310dc <http_client_send_request+0x2c0>
   30f1a:	68fb      	ldr	r3, [r7, #12]
   30f1c:	22d4      	movs	r2, #212	; 0xd4
   30f1e:	589b      	ldr	r3, [r3, r2]
   30f20:	2b00      	cmp	r3, #0
   30f22:	d005      	beq.n	30f30 <http_client_send_request+0x114>
   30f24:	68fb      	ldr	r3, [r7, #12]
   30f26:	22d4      	movs	r2, #212	; 0xd4
   30f28:	589b      	ldr	r3, [r3, r2]
   30f2a:	0018      	movs	r0, r3
   30f2c:	4b71      	ldr	r3, [pc, #452]	; (310f4 <http_client_send_request+0x2d8>)
   30f2e:	4798      	blx	r3
   30f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30f32:	2b00      	cmp	r3, #0
   30f34:	d010      	beq.n	30f58 <http_client_send_request+0x13c>
   30f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30f38:	0018      	movs	r0, r3
   30f3a:	4b6f      	ldr	r3, [pc, #444]	; (310f8 <http_client_send_request+0x2dc>)
   30f3c:	4798      	blx	r3
   30f3e:	0003      	movs	r3, r0
   30f40:	0019      	movs	r1, r3
   30f42:	68fb      	ldr	r3, [r7, #12]
   30f44:	22d4      	movs	r2, #212	; 0xd4
   30f46:	5099      	str	r1, [r3, r2]
   30f48:	68fb      	ldr	r3, [r7, #12]
   30f4a:	22d4      	movs	r2, #212	; 0xd4
   30f4c:	589b      	ldr	r3, [r3, r2]
   30f4e:	2b00      	cmp	r3, #0
   30f50:	d106      	bne.n	30f60 <http_client_send_request+0x144>
   30f52:	230c      	movs	r3, #12
   30f54:	425b      	negs	r3, r3
   30f56:	e0c1      	b.n	310dc <http_client_send_request+0x2c0>
   30f58:	68fb      	ldr	r3, [r7, #12]
   30f5a:	22d4      	movs	r2, #212	; 0xd4
   30f5c:	2100      	movs	r1, #0
   30f5e:	5099      	str	r1, [r3, r2]
   30f60:	68fb      	ldr	r3, [r7, #12]
   30f62:	2241      	movs	r2, #65	; 0x41
   30f64:	5c99      	ldrb	r1, [r3, r2]
   30f66:	2001      	movs	r0, #1
   30f68:	4381      	bics	r1, r0
   30f6a:	5499      	strb	r1, [r3, r2]
   30f6c:	68fb      	ldr	r3, [r7, #12]
   30f6e:	2200      	movs	r2, #0
   30f70:	645a      	str	r2, [r3, #68]	; 0x44
   30f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30f74:	781b      	ldrb	r3, [r3, #0]
   30f76:	2b2f      	cmp	r3, #47	; 0x2f
   30f78:	d107      	bne.n	30f8a <http_client_send_request+0x16e>
   30f7a:	68fb      	ldr	r3, [r7, #12]
   30f7c:	3370      	adds	r3, #112	; 0x70
   30f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30f80:	0011      	movs	r1, r2
   30f82:	0018      	movs	r0, r3
   30f84:	4b5d      	ldr	r3, [pc, #372]	; (310fc <http_client_send_request+0x2e0>)
   30f86:	4798      	blx	r3
   30f88:	e00f      	b.n	30faa <http_client_send_request+0x18e>
   30f8a:	68fb      	ldr	r3, [r7, #12]
   30f8c:	2270      	movs	r2, #112	; 0x70
   30f8e:	212f      	movs	r1, #47	; 0x2f
   30f90:	5499      	strb	r1, [r3, r2]
   30f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30f94:	781b      	ldrb	r3, [r3, #0]
   30f96:	2b00      	cmp	r3, #0
   30f98:	d007      	beq.n	30faa <http_client_send_request+0x18e>
   30f9a:	68fb      	ldr	r3, [r7, #12]
   30f9c:	3370      	adds	r3, #112	; 0x70
   30f9e:	3301      	adds	r3, #1
   30fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30fa2:	0011      	movs	r1, r2
   30fa4:	0018      	movs	r0, r3
   30fa6:	4b55      	ldr	r3, [pc, #340]	; (310fc <http_client_send_request+0x2e0>)
   30fa8:	4798      	blx	r3
   30faa:	683b      	ldr	r3, [r7, #0]
   30fac:	2b00      	cmp	r3, #0
   30fae:	d007      	beq.n	30fc0 <http_client_send_request+0x1a4>
   30fb0:	68fb      	ldr	r3, [r7, #12]
   30fb2:	33b0      	adds	r3, #176	; 0xb0
   30fb4:	6839      	ldr	r1, [r7, #0]
   30fb6:	2218      	movs	r2, #24
   30fb8:	0018      	movs	r0, r3
   30fba:	4b51      	ldr	r3, [pc, #324]	; (31100 <http_client_send_request+0x2e4>)
   30fbc:	4798      	blx	r3
   30fbe:	e006      	b.n	30fce <http_client_send_request+0x1b2>
   30fc0:	68fb      	ldr	r3, [r7, #12]
   30fc2:	33b0      	adds	r3, #176	; 0xb0
   30fc4:	2218      	movs	r2, #24
   30fc6:	2100      	movs	r1, #0
   30fc8:	0018      	movs	r0, r3
   30fca:	4b4e      	ldr	r3, [pc, #312]	; (31104 <http_client_send_request+0x2e8>)
   30fcc:	4798      	blx	r3
   30fce:	68fb      	ldr	r3, [r7, #12]
   30fd0:	1dfa      	adds	r2, r7, #7
   30fd2:	21c8      	movs	r1, #200	; 0xc8
   30fd4:	7812      	ldrb	r2, [r2, #0]
   30fd6:	545a      	strb	r2, [r3, r1]
   30fd8:	68fb      	ldr	r3, [r7, #12]
   30fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30fdc:	2b01      	cmp	r3, #1
   30fde:	d003      	beq.n	30fe8 <http_client_send_request+0x1cc>
   30fe0:	d316      	bcc.n	31010 <http_client_send_request+0x1f4>
   30fe2:	2b02      	cmp	r3, #2
   30fe4:	d004      	beq.n	30ff0 <http_client_send_request+0x1d4>
   30fe6:	e074      	b.n	310d2 <http_client_send_request+0x2b6>
   30fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30fea:	2b00      	cmp	r3, #0
   30fec:	d100      	bne.n	30ff0 <http_client_send_request+0x1d4>
   30fee:	e073      	b.n	310d8 <http_client_send_request+0x2bc>
   30ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ff2:	2b00      	cmp	r3, #0
   30ff4:	d107      	bne.n	31006 <http_client_send_request+0x1ea>
   30ff6:	68fb      	ldr	r3, [r7, #12]
   30ff8:	2203      	movs	r2, #3
   30ffa:	66da      	str	r2, [r3, #108]	; 0x6c
   30ffc:	68fb      	ldr	r3, [r7, #12]
   30ffe:	0018      	movs	r0, r3
   31000:	4b41      	ldr	r3, [pc, #260]	; (31108 <http_client_send_request+0x2ec>)
   31002:	4798      	blx	r3
   31004:	e069      	b.n	310da <http_client_send_request+0x2be>
   31006:	68fb      	ldr	r3, [r7, #12]
   31008:	2100      	movs	r1, #0
   3100a:	0018      	movs	r0, r3
   3100c:	4b3f      	ldr	r3, [pc, #252]	; (3110c <http_client_send_request+0x2f0>)
   3100e:	4798      	blx	r3
   31010:	68fb      	ldr	r3, [r7, #12]
   31012:	2252      	movs	r2, #82	; 0x52
   31014:	5c9b      	ldrb	r3, [r3, r2]
   31016:	2b00      	cmp	r3, #0
   31018:	d007      	beq.n	3102a <http_client_send_request+0x20e>
   3101a:	2337      	movs	r3, #55	; 0x37
   3101c:	18fb      	adds	r3, r7, r3
   3101e:	2237      	movs	r2, #55	; 0x37
   31020:	18ba      	adds	r2, r7, r2
   31022:	7812      	ldrb	r2, [r2, #0]
   31024:	2101      	movs	r1, #1
   31026:	430a      	orrs	r2, r1
   31028:	701a      	strb	r2, [r3, #0]
   3102a:	2337      	movs	r3, #55	; 0x37
   3102c:	18fb      	adds	r3, r7, r3
   3102e:	781b      	ldrb	r3, [r3, #0]
   31030:	001a      	movs	r2, r3
   31032:	2101      	movs	r1, #1
   31034:	2002      	movs	r0, #2
   31036:	4b36      	ldr	r3, [pc, #216]	; (31110 <http_client_send_request+0x2f4>)
   31038:	4798      	blx	r3
   3103a:	0003      	movs	r3, r0
   3103c:	001a      	movs	r2, r3
   3103e:	68fb      	ldr	r3, [r7, #12]
   31040:	701a      	strb	r2, [r3, #0]
   31042:	68fb      	ldr	r3, [r7, #12]
   31044:	781b      	ldrb	r3, [r3, #0]
   31046:	b25b      	sxtb	r3, r3
   31048:	2b00      	cmp	r3, #0
   3104a:	db3f      	blt.n	310cc <http_client_send_request+0x2b0>
   3104c:	68fb      	ldr	r3, [r7, #12]
   3104e:	781b      	ldrb	r3, [r3, #0]
   31050:	b25b      	sxtb	r3, r3
   31052:	001a      	movs	r2, r3
   31054:	4b2f      	ldr	r3, [pc, #188]	; (31114 <http_client_send_request+0x2f8>)
   31056:	0092      	lsls	r2, r2, #2
   31058:	68f9      	ldr	r1, [r7, #12]
   3105a:	50d1      	str	r1, [r2, r3]
   3105c:	68fb      	ldr	r3, [r7, #12]
   3105e:	3301      	adds	r3, #1
   31060:	0018      	movs	r0, r3
   31062:	4b2d      	ldr	r3, [pc, #180]	; (31118 <http_client_send_request+0x2fc>)
   31064:	4798      	blx	r3
   31066:	1e03      	subs	r3, r0, #0
   31068:	d027      	beq.n	310ba <http_client_send_request+0x29e>
   3106a:	2314      	movs	r3, #20
   3106c:	18fb      	adds	r3, r7, r3
   3106e:	2202      	movs	r2, #2
   31070:	801a      	strh	r2, [r3, #0]
   31072:	68fb      	ldr	r3, [r7, #12]
   31074:	2250      	movs	r2, #80	; 0x50
   31076:	5a9b      	ldrh	r3, [r3, r2]
   31078:	021b      	lsls	r3, r3, #8
   3107a:	b21a      	sxth	r2, r3
   3107c:	68fb      	ldr	r3, [r7, #12]
   3107e:	2150      	movs	r1, #80	; 0x50
   31080:	5a5b      	ldrh	r3, [r3, r1]
   31082:	0a1b      	lsrs	r3, r3, #8
   31084:	b29b      	uxth	r3, r3
   31086:	b21b      	sxth	r3, r3
   31088:	4313      	orrs	r3, r2
   3108a:	b21b      	sxth	r3, r3
   3108c:	b29a      	uxth	r2, r3
   3108e:	2314      	movs	r3, #20
   31090:	18fb      	adds	r3, r7, r3
   31092:	805a      	strh	r2, [r3, #2]
   31094:	68fb      	ldr	r3, [r7, #12]
   31096:	3301      	adds	r3, #1
   31098:	0018      	movs	r0, r3
   3109a:	4b20      	ldr	r3, [pc, #128]	; (3111c <http_client_send_request+0x300>)
   3109c:	4798      	blx	r3
   3109e:	0002      	movs	r2, r0
   310a0:	2314      	movs	r3, #20
   310a2:	18fb      	adds	r3, r7, r3
   310a4:	605a      	str	r2, [r3, #4]
   310a6:	68fb      	ldr	r3, [r7, #12]
   310a8:	781b      	ldrb	r3, [r3, #0]
   310aa:	b25b      	sxtb	r3, r3
   310ac:	2214      	movs	r2, #20
   310ae:	18b9      	adds	r1, r7, r2
   310b0:	2210      	movs	r2, #16
   310b2:	0018      	movs	r0, r3
   310b4:	4b1a      	ldr	r3, [pc, #104]	; (31120 <http_client_send_request+0x304>)
   310b6:	4798      	blx	r3
   310b8:	e004      	b.n	310c4 <http_client_send_request+0x2a8>
   310ba:	68fb      	ldr	r3, [r7, #12]
   310bc:	3301      	adds	r3, #1
   310be:	0018      	movs	r0, r3
   310c0:	4b18      	ldr	r3, [pc, #96]	; (31124 <http_client_send_request+0x308>)
   310c2:	4798      	blx	r3
   310c4:	68fb      	ldr	r3, [r7, #12]
   310c6:	2201      	movs	r2, #1
   310c8:	66da      	str	r2, [r3, #108]	; 0x6c
   310ca:	e006      	b.n	310da <http_client_send_request+0x2be>
   310cc:	231c      	movs	r3, #28
   310ce:	425b      	negs	r3, r3
   310d0:	e004      	b.n	310dc <http_client_send_request+0x2c0>
   310d2:	230b      	movs	r3, #11
   310d4:	425b      	negs	r3, r3
   310d6:	e001      	b.n	310dc <http_client_send_request+0x2c0>
   310d8:	46c0      	nop			; (mov r8, r8)
   310da:	2300      	movs	r3, #0
   310dc:	0018      	movs	r0, r3
   310de:	46bd      	mov	sp, r7
   310e0:	b00e      	add	sp, #56	; 0x38
   310e2:	bdb0      	pop	{r4, r5, r7, pc}
   310e4:	000399c8 	.word	0x000399c8
   310e8:	00034c65 	.word	0x00034c65
   310ec:	000399d0 	.word	0x000399d0
   310f0:	00034c57 	.word	0x00034c57
   310f4:	00034855 	.word	0x00034855
   310f8:	00034c1d 	.word	0x00034c1d
   310fc:	00034c0b 	.word	0x00034c0b
   31100:	00034869 	.word	0x00034869
   31104:	0003489f 	.word	0x0003489f
   31108:	0003127d 	.word	0x0003127d
   3110c:	00031129 	.word	0x00031129
   31110:	00025491 	.word	0x00025491
   31114:	200042e0 	.word	0x200042e0
   31118:	00030d85 	.word	0x00030d85
   3111c:	00025bdd 	.word	0x00025bdd
   31120:	000256a5 	.word	0x000256a5
   31124:	00025ce5 	.word	0x00025ce5

00031128 <_http_client_clear_conn>:
   31128:	b580      	push	{r7, lr}
   3112a:	b086      	sub	sp, #24
   3112c:	af00      	add	r7, sp, #0
   3112e:	6078      	str	r0, [r7, #4]
   31130:	6039      	str	r1, [r7, #0]
   31132:	687b      	ldr	r3, [r7, #4]
   31134:	22c0      	movs	r2, #192	; 0xc0
   31136:	589b      	ldr	r3, [r3, r2]
   31138:	2b00      	cmp	r3, #0
   3113a:	d007      	beq.n	3114c <_http_client_clear_conn+0x24>
   3113c:	687b      	ldr	r3, [r7, #4]
   3113e:	22c0      	movs	r2, #192	; 0xc0
   31140:	589b      	ldr	r3, [r3, r2]
   31142:	687a      	ldr	r2, [r7, #4]
   31144:	21c4      	movs	r1, #196	; 0xc4
   31146:	5852      	ldr	r2, [r2, r1]
   31148:	0010      	movs	r0, r2
   3114a:	4798      	blx	r3
   3114c:	687b      	ldr	r3, [r7, #4]
   3114e:	33b0      	adds	r3, #176	; 0xb0
   31150:	2218      	movs	r2, #24
   31152:	2100      	movs	r1, #0
   31154:	0018      	movs	r0, r3
   31156:	4b24      	ldr	r3, [pc, #144]	; (311e8 <_http_client_clear_conn+0xc0>)
   31158:	4798      	blx	r3
   3115a:	687b      	ldr	r3, [r7, #4]
   3115c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3115e:	2b00      	cmp	r3, #0
   31160:	d005      	beq.n	3116e <_http_client_clear_conn+0x46>
   31162:	687b      	ldr	r3, [r7, #4]
   31164:	781b      	ldrb	r3, [r3, #0]
   31166:	b25b      	sxtb	r3, r3
   31168:	0018      	movs	r0, r3
   3116a:	4b20      	ldr	r3, [pc, #128]	; (311ec <_http_client_clear_conn+0xc4>)
   3116c:	4798      	blx	r3
   3116e:	687b      	ldr	r3, [r7, #4]
   31170:	781b      	ldrb	r3, [r3, #0]
   31172:	b25b      	sxtb	r3, r3
   31174:	001a      	movs	r2, r3
   31176:	4b1e      	ldr	r3, [pc, #120]	; (311f0 <_http_client_clear_conn+0xc8>)
   31178:	0092      	lsls	r2, r2, #2
   3117a:	2100      	movs	r1, #0
   3117c:	50d1      	str	r1, [r2, r3]
   3117e:	687b      	ldr	r3, [r7, #4]
   31180:	336c      	adds	r3, #108	; 0x6c
   31182:	226c      	movs	r2, #108	; 0x6c
   31184:	2100      	movs	r1, #0
   31186:	0018      	movs	r0, r3
   31188:	4b17      	ldr	r3, [pc, #92]	; (311e8 <_http_client_clear_conn+0xc0>)
   3118a:	4798      	blx	r3
   3118c:	687b      	ldr	r3, [r7, #4]
   3118e:	33d8      	adds	r3, #216	; 0xd8
   31190:	2210      	movs	r2, #16
   31192:	2100      	movs	r1, #0
   31194:	0018      	movs	r0, r3
   31196:	4b14      	ldr	r3, [pc, #80]	; (311e8 <_http_client_clear_conn+0xc0>)
   31198:	4798      	blx	r3
   3119a:	687b      	ldr	r3, [r7, #4]
   3119c:	2200      	movs	r2, #0
   3119e:	66da      	str	r2, [r3, #108]	; 0x6c
   311a0:	687b      	ldr	r3, [r7, #4]
   311a2:	22d8      	movs	r2, #216	; 0xd8
   311a4:	2100      	movs	r1, #0
   311a6:	5099      	str	r1, [r3, r2]
   311a8:	687b      	ldr	r3, [r7, #4]
   311aa:	2241      	movs	r2, #65	; 0x41
   311ac:	5c99      	ldrb	r1, [r3, r2]
   311ae:	2001      	movs	r0, #1
   311b0:	4381      	bics	r1, r0
   311b2:	5499      	strb	r1, [r3, r2]
   311b4:	687b      	ldr	r3, [r7, #4]
   311b6:	2241      	movs	r2, #65	; 0x41
   311b8:	5c99      	ldrb	r1, [r3, r2]
   311ba:	2002      	movs	r0, #2
   311bc:	4381      	bics	r1, r0
   311be:	5499      	strb	r1, [r3, r2]
   311c0:	230c      	movs	r3, #12
   311c2:	18fb      	adds	r3, r7, r3
   311c4:	683a      	ldr	r2, [r7, #0]
   311c6:	601a      	str	r2, [r3, #0]
   311c8:	687b      	ldr	r3, [r7, #4]
   311ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   311cc:	2b00      	cmp	r3, #0
   311ce:	d006      	beq.n	311de <_http_client_clear_conn+0xb6>
   311d0:	687b      	ldr	r3, [r7, #4]
   311d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   311d4:	220c      	movs	r2, #12
   311d6:	18ba      	adds	r2, r7, r2
   311d8:	6878      	ldr	r0, [r7, #4]
   311da:	2104      	movs	r1, #4
   311dc:	4798      	blx	r3
   311de:	46c0      	nop			; (mov r8, r8)
   311e0:	46bd      	mov	sp, r7
   311e2:	b006      	add	sp, #24
   311e4:	bd80      	pop	{r7, pc}
   311e6:	46c0      	nop			; (mov r8, r8)
   311e8:	0003489f 	.word	0x0003489f
   311ec:	00025a9d 	.word	0x00025a9d
   311f0:	200042e0 	.word	0x200042e0

000311f4 <_http_client_send_wait>:
   311f4:	b590      	push	{r4, r7, lr}
   311f6:	b087      	sub	sp, #28
   311f8:	af00      	add	r7, sp, #0
   311fa:	60f8      	str	r0, [r7, #12]
   311fc:	60b9      	str	r1, [r7, #8]
   311fe:	607a      	str	r2, [r7, #4]
   31200:	68fb      	ldr	r3, [r7, #12]
   31202:	617b      	str	r3, [r7, #20]
   31204:	697b      	ldr	r3, [r7, #20]
   31206:	2241      	movs	r2, #65	; 0x41
   31208:	5c99      	ldrb	r1, [r3, r2]
   3120a:	2001      	movs	r0, #1
   3120c:	4301      	orrs	r1, r0
   3120e:	5499      	strb	r1, [r3, r2]
   31210:	697b      	ldr	r3, [r7, #20]
   31212:	2000      	movs	r0, #0
   31214:	5618      	ldrsb	r0, [r3, r0]
   31216:	687b      	ldr	r3, [r7, #4]
   31218:	b29a      	uxth	r2, r3
   3121a:	68b9      	ldr	r1, [r7, #8]
   3121c:	2300      	movs	r3, #0
   3121e:	4c14      	ldr	r4, [pc, #80]	; (31270 <_http_client_send_wait+0x7c>)
   31220:	47a0      	blx	r4
   31222:	0003      	movs	r3, r0
   31224:	613b      	str	r3, [r7, #16]
   31226:	693b      	ldr	r3, [r7, #16]
   31228:	2b00      	cmp	r3, #0
   3122a:	da0f      	bge.n	3124c <_http_client_send_wait+0x58>
   3122c:	697b      	ldr	r3, [r7, #20]
   3122e:	2241      	movs	r2, #65	; 0x41
   31230:	5c99      	ldrb	r1, [r3, r2]
   31232:	2001      	movs	r0, #1
   31234:	4381      	bics	r1, r0
   31236:	5499      	strb	r1, [r3, r2]
   31238:	693b      	ldr	r3, [r7, #16]
   3123a:	e014      	b.n	31266 <_http_client_send_wait+0x72>
   3123c:	2000      	movs	r0, #0
   3123e:	4b0d      	ldr	r3, [pc, #52]	; (31274 <_http_client_send_wait+0x80>)
   31240:	4798      	blx	r3
   31242:	697b      	ldr	r3, [r7, #20]
   31244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   31246:	0018      	movs	r0, r3
   31248:	4b0b      	ldr	r3, [pc, #44]	; (31278 <_http_client_send_wait+0x84>)
   3124a:	4798      	blx	r3
   3124c:	697b      	ldr	r3, [r7, #20]
   3124e:	2241      	movs	r2, #65	; 0x41
   31250:	5c9b      	ldrb	r3, [r3, r2]
   31252:	2201      	movs	r2, #1
   31254:	4013      	ands	r3, r2
   31256:	b2db      	uxtb	r3, r3
   31258:	2b00      	cmp	r3, #0
   3125a:	d003      	beq.n	31264 <_http_client_send_wait+0x70>
   3125c:	697b      	ldr	r3, [r7, #20]
   3125e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31260:	2b02      	cmp	r3, #2
   31262:	d8eb      	bhi.n	3123c <_http_client_send_wait+0x48>
   31264:	2300      	movs	r3, #0
   31266:	0018      	movs	r0, r3
   31268:	46bd      	mov	sp, r7
   3126a:	b007      	add	sp, #28
   3126c:	bd90      	pop	{r4, r7, pc}
   3126e:	46c0      	nop			; (mov r8, r8)
   31270:	000257b9 	.word	0x000257b9
   31274:	00021e65 	.word	0x00021e65
   31278:	00032501 	.word	0x00032501

0003127c <_http_client_request>:
   3127c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3127e:	46c6      	mov	lr, r8
   31280:	b500      	push	{lr}
   31282:	b0a0      	sub	sp, #128	; 0x80
   31284:	af02      	add	r7, sp, #8
   31286:	61f8      	str	r0, [r7, #28]
   31288:	4668      	mov	r0, sp
   3128a:	61b8      	str	r0, [r7, #24]
   3128c:	2318      	movs	r3, #24
   3128e:	2218      	movs	r2, #24
   31290:	18ba      	adds	r2, r7, r2
   31292:	18d0      	adds	r0, r2, r3
   31294:	4bbd      	ldr	r3, [pc, #756]	; (3158c <_http_client_request+0x310>)
   31296:	469c      	mov	ip, r3
   31298:	4663      	mov	r3, ip
   3129a:	cb16      	ldmia	r3!, {r1, r2, r4}
   3129c:	c016      	stmia	r0!, {r1, r2, r4}
   3129e:	469c      	mov	ip, r3
   312a0:	4663      	mov	r3, ip
   312a2:	681b      	ldr	r3, [r3, #0]
   312a4:	469c      	mov	ip, r3
   312a6:	4663      	mov	r3, ip
   312a8:	6003      	str	r3, [r0, #0]
   312aa:	69f8      	ldr	r0, [r7, #28]
   312ac:	6e40      	ldr	r0, [r0, #100]	; 0x64
   312ae:	4684      	mov	ip, r0
   312b0:	2301      	movs	r3, #1
   312b2:	425b      	negs	r3, r3
   312b4:	4698      	mov	r8, r3
   312b6:	44c4      	add	ip, r8
   312b8:	4663      	mov	r3, ip
   312ba:	66fb      	str	r3, [r7, #108]	; 0x6c
   312bc:	6038      	str	r0, [r7, #0]
   312be:	2300      	movs	r3, #0
   312c0:	607b      	str	r3, [r7, #4]
   312c2:	6839      	ldr	r1, [r7, #0]
   312c4:	687a      	ldr	r2, [r7, #4]
   312c6:	000b      	movs	r3, r1
   312c8:	0f5b      	lsrs	r3, r3, #29
   312ca:	469c      	mov	ip, r3
   312cc:	0013      	movs	r3, r2
   312ce:	00db      	lsls	r3, r3, #3
   312d0:	617b      	str	r3, [r7, #20]
   312d2:	4663      	mov	r3, ip
   312d4:	697c      	ldr	r4, [r7, #20]
   312d6:	431c      	orrs	r4, r3
   312d8:	617c      	str	r4, [r7, #20]
   312da:	000b      	movs	r3, r1
   312dc:	00db      	lsls	r3, r3, #3
   312de:	613b      	str	r3, [r7, #16]
   312e0:	0005      	movs	r5, r0
   312e2:	2200      	movs	r2, #0
   312e4:	0016      	movs	r6, r2
   312e6:	0f6a      	lsrs	r2, r5, #29
   312e8:	00f3      	lsls	r3, r6, #3
   312ea:	60fb      	str	r3, [r7, #12]
   312ec:	68fb      	ldr	r3, [r7, #12]
   312ee:	4313      	orrs	r3, r2
   312f0:	60fb      	str	r3, [r7, #12]
   312f2:	00eb      	lsls	r3, r5, #3
   312f4:	60bb      	str	r3, [r7, #8]
   312f6:	1dc3      	adds	r3, r0, #7
   312f8:	08db      	lsrs	r3, r3, #3
   312fa:	00db      	lsls	r3, r3, #3
   312fc:	466a      	mov	r2, sp
   312fe:	1ad3      	subs	r3, r2, r3
   31300:	469d      	mov	sp, r3
   31302:	ab02      	add	r3, sp, #8
   31304:	3300      	adds	r3, #0
   31306:	66bb      	str	r3, [r7, #104]	; 0x68
   31308:	69fb      	ldr	r3, [r7, #28]
   3130a:	2b00      	cmp	r3, #0
   3130c:	d100      	bne.n	31310 <_http_client_request+0x94>
   3130e:	e346      	b.n	3199e <_http_client_request+0x722>
   31310:	69fb      	ldr	r3, [r7, #28]
   31312:	2241      	movs	r2, #65	; 0x41
   31314:	5c9b      	ldrb	r3, [r3, r2]
   31316:	2201      	movs	r2, #1
   31318:	4013      	ands	r3, r2
   3131a:	b2db      	uxtb	r3, r3
   3131c:	2b00      	cmp	r3, #0
   3131e:	d000      	beq.n	31322 <_http_client_request+0xa6>
   31320:	e33f      	b.n	319a2 <_http_client_request+0x726>
   31322:	69fb      	ldr	r3, [r7, #28]
   31324:	33b0      	adds	r3, #176	; 0xb0
   31326:	667b      	str	r3, [r7, #100]	; 0x64
   31328:	69fb      	ldr	r3, [r7, #28]
   3132a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3132c:	2b03      	cmp	r3, #3
   3132e:	d003      	beq.n	31338 <_http_client_request+0xbc>
   31330:	2b04      	cmp	r3, #4
   31332:	d100      	bne.n	31336 <_http_client_request+0xba>
   31334:	e1b3      	b.n	3169e <_http_client_request+0x422>
   31336:	e32f      	b.n	31998 <_http_client_request+0x71c>
   31338:	69fb      	ldr	r3, [r7, #28]
   3133a:	22cc      	movs	r2, #204	; 0xcc
   3133c:	2100      	movs	r1, #0
   3133e:	5099      	str	r1, [r3, r2]
   31340:	69fb      	ldr	r3, [r7, #28]
   31342:	22d0      	movs	r2, #208	; 0xd0
   31344:	2100      	movs	r1, #0
   31346:	5099      	str	r1, [r3, r2]
   31348:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3134a:	69fb      	ldr	r3, [r7, #28]
   3134c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   3134e:	4c90      	ldr	r4, [pc, #576]	; (31590 <_http_client_request+0x314>)
   31350:	2334      	movs	r3, #52	; 0x34
   31352:	2018      	movs	r0, #24
   31354:	1838      	adds	r0, r7, r0
   31356:	18c0      	adds	r0, r0, r3
   31358:	69fb      	ldr	r3, [r7, #28]
   3135a:	9300      	str	r3, [sp, #0]
   3135c:	0023      	movs	r3, r4
   3135e:	4c8d      	ldr	r4, [pc, #564]	; (31594 <_http_client_request+0x318>)
   31360:	47a0      	blx	r4
   31362:	69fb      	ldr	r3, [r7, #28]
   31364:	22c8      	movs	r2, #200	; 0xc8
   31366:	5c9b      	ldrb	r3, [r3, r2]
   31368:	2b01      	cmp	r3, #1
   3136a:	d10a      	bne.n	31382 <_http_client_request+0x106>
   3136c:	498a      	ldr	r1, [pc, #552]	; (31598 <_http_client_request+0x31c>)
   3136e:	2334      	movs	r3, #52	; 0x34
   31370:	2218      	movs	r2, #24
   31372:	4694      	mov	ip, r2
   31374:	44bc      	add	ip, r7
   31376:	4463      	add	r3, ip
   31378:	2204      	movs	r2, #4
   3137a:	0018      	movs	r0, r3
   3137c:	4b87      	ldr	r3, [pc, #540]	; (3159c <_http_client_request+0x320>)
   3137e:	4798      	blx	r3
   31380:	e04e      	b.n	31420 <_http_client_request+0x1a4>
   31382:	69fb      	ldr	r3, [r7, #28]
   31384:	22c8      	movs	r2, #200	; 0xc8
   31386:	5c9b      	ldrb	r3, [r3, r2]
   31388:	2b02      	cmp	r3, #2
   3138a:	d10a      	bne.n	313a2 <_http_client_request+0x126>
   3138c:	4984      	ldr	r1, [pc, #528]	; (315a0 <_http_client_request+0x324>)
   3138e:	2334      	movs	r3, #52	; 0x34
   31390:	2218      	movs	r2, #24
   31392:	4694      	mov	ip, r2
   31394:	44bc      	add	ip, r7
   31396:	4463      	add	r3, ip
   31398:	2205      	movs	r2, #5
   3139a:	0018      	movs	r0, r3
   3139c:	4b7f      	ldr	r3, [pc, #508]	; (3159c <_http_client_request+0x320>)
   3139e:	4798      	blx	r3
   313a0:	e03e      	b.n	31420 <_http_client_request+0x1a4>
   313a2:	69fb      	ldr	r3, [r7, #28]
   313a4:	22c8      	movs	r2, #200	; 0xc8
   313a6:	5c9b      	ldrb	r3, [r3, r2]
   313a8:	2b03      	cmp	r3, #3
   313aa:	d10a      	bne.n	313c2 <_http_client_request+0x146>
   313ac:	497d      	ldr	r1, [pc, #500]	; (315a4 <_http_client_request+0x328>)
   313ae:	2334      	movs	r3, #52	; 0x34
   313b0:	2218      	movs	r2, #24
   313b2:	4694      	mov	ip, r2
   313b4:	44bc      	add	ip, r7
   313b6:	4463      	add	r3, ip
   313b8:	2207      	movs	r2, #7
   313ba:	0018      	movs	r0, r3
   313bc:	4b77      	ldr	r3, [pc, #476]	; (3159c <_http_client_request+0x320>)
   313be:	4798      	blx	r3
   313c0:	e02e      	b.n	31420 <_http_client_request+0x1a4>
   313c2:	69fb      	ldr	r3, [r7, #28]
   313c4:	22c8      	movs	r2, #200	; 0xc8
   313c6:	5c9b      	ldrb	r3, [r3, r2]
   313c8:	2b04      	cmp	r3, #4
   313ca:	d10a      	bne.n	313e2 <_http_client_request+0x166>
   313cc:	4976      	ldr	r1, [pc, #472]	; (315a8 <_http_client_request+0x32c>)
   313ce:	2334      	movs	r3, #52	; 0x34
   313d0:	2218      	movs	r2, #24
   313d2:	4694      	mov	ip, r2
   313d4:	44bc      	add	ip, r7
   313d6:	4463      	add	r3, ip
   313d8:	2204      	movs	r2, #4
   313da:	0018      	movs	r0, r3
   313dc:	4b6f      	ldr	r3, [pc, #444]	; (3159c <_http_client_request+0x320>)
   313de:	4798      	blx	r3
   313e0:	e01e      	b.n	31420 <_http_client_request+0x1a4>
   313e2:	69fb      	ldr	r3, [r7, #28]
   313e4:	22c8      	movs	r2, #200	; 0xc8
   313e6:	5c9b      	ldrb	r3, [r3, r2]
   313e8:	2b05      	cmp	r3, #5
   313ea:	d10a      	bne.n	31402 <_http_client_request+0x186>
   313ec:	496f      	ldr	r1, [pc, #444]	; (315ac <_http_client_request+0x330>)
   313ee:	2334      	movs	r3, #52	; 0x34
   313f0:	2218      	movs	r2, #24
   313f2:	4694      	mov	ip, r2
   313f4:	44bc      	add	ip, r7
   313f6:	4463      	add	r3, ip
   313f8:	2208      	movs	r2, #8
   313fa:	0018      	movs	r0, r3
   313fc:	4b67      	ldr	r3, [pc, #412]	; (3159c <_http_client_request+0x320>)
   313fe:	4798      	blx	r3
   31400:	e00e      	b.n	31420 <_http_client_request+0x1a4>
   31402:	69fb      	ldr	r3, [r7, #28]
   31404:	22c8      	movs	r2, #200	; 0xc8
   31406:	5c9b      	ldrb	r3, [r3, r2]
   31408:	2b06      	cmp	r3, #6
   3140a:	d109      	bne.n	31420 <_http_client_request+0x1a4>
   3140c:	4968      	ldr	r1, [pc, #416]	; (315b0 <_http_client_request+0x334>)
   3140e:	2334      	movs	r3, #52	; 0x34
   31410:	2218      	movs	r2, #24
   31412:	4694      	mov	ip, r2
   31414:	44bc      	add	ip, r7
   31416:	4463      	add	r3, ip
   31418:	2205      	movs	r2, #5
   3141a:	0018      	movs	r0, r3
   3141c:	4b5f      	ldr	r3, [pc, #380]	; (3159c <_http_client_request+0x320>)
   3141e:	4798      	blx	r3
   31420:	69fb      	ldr	r3, [r7, #28]
   31422:	3370      	adds	r3, #112	; 0x70
   31424:	001c      	movs	r4, r3
   31426:	69fb      	ldr	r3, [r7, #28]
   31428:	3370      	adds	r3, #112	; 0x70
   3142a:	0018      	movs	r0, r3
   3142c:	4b61      	ldr	r3, [pc, #388]	; (315b4 <_http_client_request+0x338>)
   3142e:	4798      	blx	r3
   31430:	0002      	movs	r2, r0
   31432:	2334      	movs	r3, #52	; 0x34
   31434:	2118      	movs	r1, #24
   31436:	468c      	mov	ip, r1
   31438:	44bc      	add	ip, r7
   3143a:	4463      	add	r3, ip
   3143c:	0021      	movs	r1, r4
   3143e:	0018      	movs	r0, r3
   31440:	4b56      	ldr	r3, [pc, #344]	; (3159c <_http_client_request+0x320>)
   31442:	4798      	blx	r3
   31444:	495c      	ldr	r1, [pc, #368]	; (315b8 <_http_client_request+0x33c>)
   31446:	2334      	movs	r3, #52	; 0x34
   31448:	2218      	movs	r2, #24
   3144a:	4694      	mov	ip, r2
   3144c:	44bc      	add	ip, r7
   3144e:	4463      	add	r3, ip
   31450:	220b      	movs	r2, #11
   31452:	0018      	movs	r0, r3
   31454:	4b51      	ldr	r3, [pc, #324]	; (3159c <_http_client_request+0x320>)
   31456:	4798      	blx	r3
   31458:	4958      	ldr	r1, [pc, #352]	; (315bc <_http_client_request+0x340>)
   3145a:	2334      	movs	r3, #52	; 0x34
   3145c:	2218      	movs	r2, #24
   3145e:	4694      	mov	ip, r2
   31460:	44bc      	add	ip, r7
   31462:	4463      	add	r3, ip
   31464:	220c      	movs	r2, #12
   31466:	0018      	movs	r0, r3
   31468:	4b4c      	ldr	r3, [pc, #304]	; (3159c <_http_client_request+0x320>)
   3146a:	4798      	blx	r3
   3146c:	69fb      	ldr	r3, [r7, #28]
   3146e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   31470:	69fb      	ldr	r3, [r7, #28]
   31472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   31474:	0018      	movs	r0, r3
   31476:	4b4f      	ldr	r3, [pc, #316]	; (315b4 <_http_client_request+0x338>)
   31478:	4798      	blx	r3
   3147a:	0002      	movs	r2, r0
   3147c:	2334      	movs	r3, #52	; 0x34
   3147e:	2118      	movs	r1, #24
   31480:	468c      	mov	ip, r1
   31482:	44bc      	add	ip, r7
   31484:	4463      	add	r3, ip
   31486:	0021      	movs	r1, r4
   31488:	0018      	movs	r0, r3
   3148a:	4b44      	ldr	r3, [pc, #272]	; (3159c <_http_client_request+0x320>)
   3148c:	4798      	blx	r3
   3148e:	494c      	ldr	r1, [pc, #304]	; (315c0 <_http_client_request+0x344>)
   31490:	2334      	movs	r3, #52	; 0x34
   31492:	2218      	movs	r2, #24
   31494:	4694      	mov	ip, r2
   31496:	44bc      	add	ip, r7
   31498:	4463      	add	r3, ip
   3149a:	2202      	movs	r2, #2
   3149c:	0018      	movs	r0, r3
   3149e:	4b3f      	ldr	r3, [pc, #252]	; (3159c <_http_client_request+0x320>)
   314a0:	4798      	blx	r3
   314a2:	4948      	ldr	r1, [pc, #288]	; (315c4 <_http_client_request+0x348>)
   314a4:	2334      	movs	r3, #52	; 0x34
   314a6:	2218      	movs	r2, #24
   314a8:	4694      	mov	ip, r2
   314aa:	44bc      	add	ip, r7
   314ac:	4463      	add	r3, ip
   314ae:	2206      	movs	r2, #6
   314b0:	0018      	movs	r0, r3
   314b2:	4b3a      	ldr	r3, [pc, #232]	; (3159c <_http_client_request+0x320>)
   314b4:	4798      	blx	r3
   314b6:	69fb      	ldr	r3, [r7, #28]
   314b8:	1c5c      	adds	r4, r3, #1
   314ba:	69fb      	ldr	r3, [r7, #28]
   314bc:	3301      	adds	r3, #1
   314be:	0018      	movs	r0, r3
   314c0:	4b3c      	ldr	r3, [pc, #240]	; (315b4 <_http_client_request+0x338>)
   314c2:	4798      	blx	r3
   314c4:	0002      	movs	r2, r0
   314c6:	2334      	movs	r3, #52	; 0x34
   314c8:	2118      	movs	r1, #24
   314ca:	468c      	mov	ip, r1
   314cc:	44bc      	add	ip, r7
   314ce:	4463      	add	r3, ip
   314d0:	0021      	movs	r1, r4
   314d2:	0018      	movs	r0, r3
   314d4:	4b31      	ldr	r3, [pc, #196]	; (3159c <_http_client_request+0x320>)
   314d6:	4798      	blx	r3
   314d8:	4939      	ldr	r1, [pc, #228]	; (315c0 <_http_client_request+0x344>)
   314da:	2334      	movs	r3, #52	; 0x34
   314dc:	2218      	movs	r2, #24
   314de:	4694      	mov	ip, r2
   314e0:	44bc      	add	ip, r7
   314e2:	4463      	add	r3, ip
   314e4:	2202      	movs	r2, #2
   314e6:	0018      	movs	r0, r3
   314e8:	4b2c      	ldr	r3, [pc, #176]	; (3159c <_http_client_request+0x320>)
   314ea:	4798      	blx	r3
   314ec:	4936      	ldr	r1, [pc, #216]	; (315c8 <_http_client_request+0x34c>)
   314ee:	2334      	movs	r3, #52	; 0x34
   314f0:	2218      	movs	r2, #24
   314f2:	4694      	mov	ip, r2
   314f4:	44bc      	add	ip, r7
   314f6:	4463      	add	r3, ip
   314f8:	2218      	movs	r2, #24
   314fa:	0018      	movs	r0, r3
   314fc:	4b27      	ldr	r3, [pc, #156]	; (3159c <_http_client_request+0x320>)
   314fe:	4798      	blx	r3
   31500:	4932      	ldr	r1, [pc, #200]	; (315cc <_http_client_request+0x350>)
   31502:	2334      	movs	r3, #52	; 0x34
   31504:	2218      	movs	r2, #24
   31506:	4694      	mov	ip, r2
   31508:	44bc      	add	ip, r7
   3150a:	4463      	add	r3, ip
   3150c:	2213      	movs	r2, #19
   3150e:	0018      	movs	r0, r3
   31510:	4b22      	ldr	r3, [pc, #136]	; (3159c <_http_client_request+0x320>)
   31512:	4798      	blx	r3
   31514:	492e      	ldr	r1, [pc, #184]	; (315d0 <_http_client_request+0x354>)
   31516:	2334      	movs	r3, #52	; 0x34
   31518:	2218      	movs	r2, #24
   3151a:	4694      	mov	ip, r2
   3151c:	44bc      	add	ip, r7
   3151e:	4463      	add	r3, ip
   31520:	2217      	movs	r2, #23
   31522:	0018      	movs	r0, r3
   31524:	4b1d      	ldr	r3, [pc, #116]	; (3159c <_http_client_request+0x320>)
   31526:	4798      	blx	r3
   31528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3152a:	68db      	ldr	r3, [r3, #12]
   3152c:	2b00      	cmp	r3, #0
   3152e:	d100      	bne.n	31532 <_http_client_request+0x2b6>
   31530:	e088      	b.n	31644 <_http_client_request+0x3c8>
   31532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31534:	781b      	ldrb	r3, [r3, #0]
   31536:	2b00      	cmp	r3, #0
   31538:	d00f      	beq.n	3155a <_http_client_request+0x2de>
   3153a:	69fb      	ldr	r3, [r7, #28]
   3153c:	21cc      	movs	r1, #204	; 0xcc
   3153e:	2201      	movs	r2, #1
   31540:	4252      	negs	r2, r2
   31542:	505a      	str	r2, [r3, r1]
   31544:	4923      	ldr	r1, [pc, #140]	; (315d4 <_http_client_request+0x358>)
   31546:	2334      	movs	r3, #52	; 0x34
   31548:	2218      	movs	r2, #24
   3154a:	4694      	mov	ip, r2
   3154c:	44bc      	add	ip, r7
   3154e:	4463      	add	r3, ip
   31550:	221c      	movs	r2, #28
   31552:	0018      	movs	r0, r3
   31554:	4b11      	ldr	r3, [pc, #68]	; (3159c <_http_client_request+0x320>)
   31556:	4798      	blx	r3
   31558:	e074      	b.n	31644 <_http_client_request+0x3c8>
   3155a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3155c:	689b      	ldr	r3, [r3, #8]
   3155e:	2b00      	cmp	r3, #0
   31560:	d070      	beq.n	31644 <_http_client_request+0x3c8>
   31562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31564:	689a      	ldr	r2, [r3, #8]
   31566:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31568:	695b      	ldr	r3, [r3, #20]
   3156a:	0018      	movs	r0, r3
   3156c:	4790      	blx	r2
   3156e:	0001      	movs	r1, r0
   31570:	69fb      	ldr	r3, [r7, #28]
   31572:	22cc      	movs	r2, #204	; 0xcc
   31574:	5099      	str	r1, [r3, r2]
   31576:	69fb      	ldr	r3, [r7, #28]
   31578:	22cc      	movs	r2, #204	; 0xcc
   3157a:	589b      	ldr	r3, [r3, r2]
   3157c:	2b00      	cmp	r3, #0
   3157e:	da2b      	bge.n	315d8 <_http_client_request+0x35c>
   31580:	69fb      	ldr	r3, [r7, #28]
   31582:	22cc      	movs	r2, #204	; 0xcc
   31584:	2100      	movs	r1, #0
   31586:	5099      	str	r1, [r3, r2]
   31588:	e05c      	b.n	31644 <_http_client_request+0x3c8>
   3158a:	46c0      	nop			; (mov r8, r8)
   3158c:	00039ab8 	.word	0x00039ab8
   31590:	000311f5 	.word	0x000311f5
   31594:	0003215d 	.word	0x0003215d
   31598:	000399dc 	.word	0x000399dc
   3159c:	000321dd 	.word	0x000321dd
   315a0:	000399e4 	.word	0x000399e4
   315a4:	000399ec 	.word	0x000399ec
   315a8:	000399f4 	.word	0x000399f4
   315ac:	000399fc 	.word	0x000399fc
   315b0:	00039a08 	.word	0x00039a08
   315b4:	00034c57 	.word	0x00034c57
   315b8:	00039a10 	.word	0x00039a10
   315bc:	00039a1c 	.word	0x00039a1c
   315c0:	00039a2c 	.word	0x00039a2c
   315c4:	00039a30 	.word	0x00039a30
   315c8:	00039a38 	.word	0x00039a38
   315cc:	00039a54 	.word	0x00039a54
   315d0:	00039a68 	.word	0x00039a68
   315d4:	00039a80 	.word	0x00039a80
   315d8:	69fb      	ldr	r3, [r7, #28]
   315da:	22cc      	movs	r2, #204	; 0xcc
   315dc:	589b      	ldr	r3, [r3, r2]
   315de:	001a      	movs	r2, r3
   315e0:	49e0      	ldr	r1, [pc, #896]	; (31964 <_http_client_request+0x6e8>)
   315e2:	2328      	movs	r3, #40	; 0x28
   315e4:	2018      	movs	r0, #24
   315e6:	4684      	mov	ip, r0
   315e8:	44bc      	add	ip, r7
   315ea:	4463      	add	r3, ip
   315ec:	0018      	movs	r0, r3
   315ee:	4bde      	ldr	r3, [pc, #888]	; (31968 <_http_client_request+0x6ec>)
   315f0:	4798      	blx	r3
   315f2:	49de      	ldr	r1, [pc, #888]	; (3196c <_http_client_request+0x6f0>)
   315f4:	2334      	movs	r3, #52	; 0x34
   315f6:	2218      	movs	r2, #24
   315f8:	4694      	mov	ip, r2
   315fa:	44bc      	add	ip, r7
   315fc:	4463      	add	r3, ip
   315fe:	2210      	movs	r2, #16
   31600:	0018      	movs	r0, r3
   31602:	4bdb      	ldr	r3, [pc, #876]	; (31970 <_http_client_request+0x6f4>)
   31604:	4798      	blx	r3
   31606:	2328      	movs	r3, #40	; 0x28
   31608:	2218      	movs	r2, #24
   3160a:	4694      	mov	ip, r2
   3160c:	44bc      	add	ip, r7
   3160e:	4463      	add	r3, ip
   31610:	0018      	movs	r0, r3
   31612:	4bd8      	ldr	r3, [pc, #864]	; (31974 <_http_client_request+0x6f8>)
   31614:	4798      	blx	r3
   31616:	0002      	movs	r2, r0
   31618:	2328      	movs	r3, #40	; 0x28
   3161a:	2118      	movs	r1, #24
   3161c:	1879      	adds	r1, r7, r1
   3161e:	18c9      	adds	r1, r1, r3
   31620:	2334      	movs	r3, #52	; 0x34
   31622:	2018      	movs	r0, #24
   31624:	4684      	mov	ip, r0
   31626:	44bc      	add	ip, r7
   31628:	4463      	add	r3, ip
   3162a:	0018      	movs	r0, r3
   3162c:	4bd0      	ldr	r3, [pc, #832]	; (31970 <_http_client_request+0x6f4>)
   3162e:	4798      	blx	r3
   31630:	49d1      	ldr	r1, [pc, #836]	; (31978 <_http_client_request+0x6fc>)
   31632:	2334      	movs	r3, #52	; 0x34
   31634:	2218      	movs	r2, #24
   31636:	4694      	mov	ip, r2
   31638:	44bc      	add	ip, r7
   3163a:	4463      	add	r3, ip
   3163c:	2202      	movs	r2, #2
   3163e:	0018      	movs	r0, r3
   31640:	4bcb      	ldr	r3, [pc, #812]	; (31970 <_http_client_request+0x6f4>)
   31642:	4798      	blx	r3
   31644:	69fb      	ldr	r3, [r7, #28]
   31646:	22d4      	movs	r2, #212	; 0xd4
   31648:	589b      	ldr	r3, [r3, r2]
   3164a:	2b00      	cmp	r3, #0
   3164c:	d012      	beq.n	31674 <_http_client_request+0x3f8>
   3164e:	69fb      	ldr	r3, [r7, #28]
   31650:	22d4      	movs	r2, #212	; 0xd4
   31652:	589c      	ldr	r4, [r3, r2]
   31654:	69fb      	ldr	r3, [r7, #28]
   31656:	22d4      	movs	r2, #212	; 0xd4
   31658:	589b      	ldr	r3, [r3, r2]
   3165a:	0018      	movs	r0, r3
   3165c:	4bc5      	ldr	r3, [pc, #788]	; (31974 <_http_client_request+0x6f8>)
   3165e:	4798      	blx	r3
   31660:	0002      	movs	r2, r0
   31662:	2334      	movs	r3, #52	; 0x34
   31664:	2118      	movs	r1, #24
   31666:	468c      	mov	ip, r1
   31668:	44bc      	add	ip, r7
   3166a:	4463      	add	r3, ip
   3166c:	0021      	movs	r1, r4
   3166e:	0018      	movs	r0, r3
   31670:	4bbf      	ldr	r3, [pc, #764]	; (31970 <_http_client_request+0x6f4>)
   31672:	4798      	blx	r3
   31674:	49c0      	ldr	r1, [pc, #768]	; (31978 <_http_client_request+0x6fc>)
   31676:	2334      	movs	r3, #52	; 0x34
   31678:	2218      	movs	r2, #24
   3167a:	4694      	mov	ip, r2
   3167c:	44bc      	add	ip, r7
   3167e:	4463      	add	r3, ip
   31680:	2202      	movs	r2, #2
   31682:	0018      	movs	r0, r3
   31684:	4bba      	ldr	r3, [pc, #744]	; (31970 <_http_client_request+0x6f4>)
   31686:	4798      	blx	r3
   31688:	2334      	movs	r3, #52	; 0x34
   3168a:	2218      	movs	r2, #24
   3168c:	4694      	mov	ip, r2
   3168e:	44bc      	add	ip, r7
   31690:	4463      	add	r3, ip
   31692:	0018      	movs	r0, r3
   31694:	4bb9      	ldr	r3, [pc, #740]	; (3197c <_http_client_request+0x700>)
   31696:	4798      	blx	r3
   31698:	69fb      	ldr	r3, [r7, #28]
   3169a:	2204      	movs	r2, #4
   3169c:	66da      	str	r2, [r3, #108]	; 0x6c
   3169e:	69fb      	ldr	r3, [r7, #28]
   316a0:	22cc      	movs	r2, #204	; 0xcc
   316a2:	589b      	ldr	r3, [r3, r2]
   316a4:	2b00      	cmp	r3, #0
   316a6:	db00      	blt.n	316aa <_http_client_request+0x42e>
   316a8:	e0c6      	b.n	31838 <_http_client_request+0x5bc>
   316aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   316ac:	68db      	ldr	r3, [r3, #12]
   316ae:	2b00      	cmp	r3, #0
   316b0:	d100      	bne.n	316b4 <_http_client_request+0x438>
   316b2:	e0c1      	b.n	31838 <_http_client_request+0x5bc>
   316b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   316b6:	68dc      	ldr	r4, [r3, #12]
   316b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   316ba:	6958      	ldr	r0, [r3, #20]
   316bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   316be:	1d59      	adds	r1, r3, #5
   316c0:	69fb      	ldr	r3, [r7, #28]
   316c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   316c4:	1fdd      	subs	r5, r3, #7
   316c6:	69fb      	ldr	r3, [r7, #28]
   316c8:	22d0      	movs	r2, #208	; 0xd0
   316ca:	589b      	ldr	r3, [r3, r2]
   316cc:	002a      	movs	r2, r5
   316ce:	47a0      	blx	r4
   316d0:	0003      	movs	r3, r0
   316d2:	677b      	str	r3, [r7, #116]	; 0x74
   316d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   316d6:	2b00      	cmp	r3, #0
   316d8:	da01      	bge.n	316de <_http_client_request+0x462>
   316da:	2300      	movs	r3, #0
   316dc:	677b      	str	r3, [r7, #116]	; 0x74
   316de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   316e0:	220a      	movs	r2, #10
   316e2:	711a      	strb	r2, [r3, #4]
   316e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   316e6:	220d      	movs	r2, #13
   316e8:	70da      	strb	r2, [r3, #3]
   316ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   316ec:	3305      	adds	r3, #5
   316ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
   316f0:	210d      	movs	r1, #13
   316f2:	54d1      	strb	r1, [r2, r3]
   316f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   316f6:	3306      	adds	r3, #6
   316f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
   316fa:	210a      	movs	r1, #10
   316fc:	54d1      	strb	r1, [r2, r3]
   316fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31700:	2b00      	cmp	r3, #0
   31702:	db14      	blt.n	3172e <_http_client_request+0x4b2>
   31704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31706:	3302      	adds	r3, #2
   31708:	673b      	str	r3, [r7, #112]	; 0x70
   3170a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3170c:	4a9c      	ldr	r2, [pc, #624]	; (31980 <_http_client_request+0x704>)
   3170e:	4013      	ands	r3, r2
   31710:	d504      	bpl.n	3171c <_http_client_request+0x4a0>
   31712:	3b01      	subs	r3, #1
   31714:	2210      	movs	r2, #16
   31716:	4252      	negs	r2, r2
   31718:	4313      	orrs	r3, r2
   3171a:	3301      	adds	r3, #1
   3171c:	001a      	movs	r2, r3
   3171e:	2318      	movs	r3, #24
   31720:	2118      	movs	r1, #24
   31722:	468c      	mov	ip, r1
   31724:	44bc      	add	ip, r7
   31726:	4463      	add	r3, ip
   31728:	5c9a      	ldrb	r2, [r3, r2]
   3172a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3172c:	701a      	strb	r2, [r3, #0]
   3172e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31730:	2b0f      	cmp	r3, #15
   31732:	dd19      	ble.n	31768 <_http_client_request+0x4ec>
   31734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31736:	3301      	adds	r3, #1
   31738:	673b      	str	r3, [r7, #112]	; 0x70
   3173a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3173c:	2b00      	cmp	r3, #0
   3173e:	da00      	bge.n	31742 <_http_client_request+0x4c6>
   31740:	330f      	adds	r3, #15
   31742:	111b      	asrs	r3, r3, #4
   31744:	001a      	movs	r2, r3
   31746:	4b8e      	ldr	r3, [pc, #568]	; (31980 <_http_client_request+0x704>)
   31748:	4013      	ands	r3, r2
   3174a:	d504      	bpl.n	31756 <_http_client_request+0x4da>
   3174c:	3b01      	subs	r3, #1
   3174e:	2210      	movs	r2, #16
   31750:	4252      	negs	r2, r2
   31752:	4313      	orrs	r3, r2
   31754:	3301      	adds	r3, #1
   31756:	001a      	movs	r2, r3
   31758:	2318      	movs	r3, #24
   3175a:	2118      	movs	r1, #24
   3175c:	468c      	mov	ip, r1
   3175e:	44bc      	add	ip, r7
   31760:	4463      	add	r3, ip
   31762:	5c9a      	ldrb	r2, [r3, r2]
   31764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31766:	701a      	strb	r2, [r3, #0]
   31768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3176a:	2bff      	cmp	r3, #255	; 0xff
   3176c:	dd18      	ble.n	317a0 <_http_client_request+0x524>
   3176e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31770:	673b      	str	r3, [r7, #112]	; 0x70
   31772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31774:	2b00      	cmp	r3, #0
   31776:	da00      	bge.n	3177a <_http_client_request+0x4fe>
   31778:	33ff      	adds	r3, #255	; 0xff
   3177a:	121b      	asrs	r3, r3, #8
   3177c:	001a      	movs	r2, r3
   3177e:	4b80      	ldr	r3, [pc, #512]	; (31980 <_http_client_request+0x704>)
   31780:	4013      	ands	r3, r2
   31782:	d504      	bpl.n	3178e <_http_client_request+0x512>
   31784:	3b01      	subs	r3, #1
   31786:	2210      	movs	r2, #16
   31788:	4252      	negs	r2, r2
   3178a:	4313      	orrs	r3, r2
   3178c:	3301      	adds	r3, #1
   3178e:	001a      	movs	r2, r3
   31790:	2318      	movs	r3, #24
   31792:	2118      	movs	r1, #24
   31794:	468c      	mov	ip, r1
   31796:	44bc      	add	ip, r7
   31798:	4463      	add	r3, ip
   3179a:	5c9a      	ldrb	r2, [r3, r2]
   3179c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3179e:	701a      	strb	r2, [r3, #0]
   317a0:	69fb      	ldr	r3, [r7, #28]
   317a2:	2000      	movs	r0, #0
   317a4:	5618      	ldrsb	r0, [r3, r0]
   317a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   317a8:	3303      	adds	r3, #3
   317aa:	001a      	movs	r2, r3
   317ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   317ae:	1ad3      	subs	r3, r2, r3
   317b0:	b29a      	uxth	r2, r3
   317b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   317b4:	b29b      	uxth	r3, r3
   317b6:	18d3      	adds	r3, r2, r3
   317b8:	b29b      	uxth	r3, r3
   317ba:	3304      	adds	r3, #4
   317bc:	b29a      	uxth	r2, r3
   317be:	6f39      	ldr	r1, [r7, #112]	; 0x70
   317c0:	2300      	movs	r3, #0
   317c2:	4c70      	ldr	r4, [pc, #448]	; (31984 <_http_client_request+0x708>)
   317c4:	47a0      	blx	r4
   317c6:	0003      	movs	r3, r0
   317c8:	663b      	str	r3, [r7, #96]	; 0x60
   317ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   317cc:	2b00      	cmp	r3, #0
   317ce:	da07      	bge.n	317e0 <_http_client_request+0x564>
   317d0:	2305      	movs	r3, #5
   317d2:	425a      	negs	r2, r3
   317d4:	69fb      	ldr	r3, [r7, #28]
   317d6:	0011      	movs	r1, r2
   317d8:	0018      	movs	r0, r3
   317da:	4b6b      	ldr	r3, [pc, #428]	; (31988 <_http_client_request+0x70c>)
   317dc:	4798      	blx	r3
   317de:	e0e1      	b.n	319a4 <_http_client_request+0x728>
   317e0:	69fb      	ldr	r3, [r7, #28]
   317e2:	22d0      	movs	r2, #208	; 0xd0
   317e4:	589a      	ldr	r2, [r3, r2]
   317e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   317e8:	18d2      	adds	r2, r2, r3
   317ea:	69fb      	ldr	r3, [r7, #28]
   317ec:	21d0      	movs	r1, #208	; 0xd0
   317ee:	505a      	str	r2, [r3, r1]
   317f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   317f2:	2b00      	cmp	r3, #0
   317f4:	d000      	beq.n	317f8 <_http_client_request+0x57c>
   317f6:	e0c9      	b.n	3198c <_http_client_request+0x710>
   317f8:	69fb      	ldr	r3, [r7, #28]
   317fa:	22c0      	movs	r2, #192	; 0xc0
   317fc:	589b      	ldr	r3, [r3, r2]
   317fe:	2b00      	cmp	r3, #0
   31800:	d007      	beq.n	31812 <_http_client_request+0x596>
   31802:	69fb      	ldr	r3, [r7, #28]
   31804:	22c0      	movs	r2, #192	; 0xc0
   31806:	589b      	ldr	r3, [r3, r2]
   31808:	69fa      	ldr	r2, [r7, #28]
   3180a:	21c4      	movs	r1, #196	; 0xc4
   3180c:	5852      	ldr	r2, [r2, r1]
   3180e:	0010      	movs	r0, r2
   31810:	4798      	blx	r3
   31812:	69fb      	ldr	r3, [r7, #28]
   31814:	2202      	movs	r2, #2
   31816:	66da      	str	r2, [r3, #108]	; 0x6c
   31818:	69fb      	ldr	r3, [r7, #28]
   3181a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3181c:	2b00      	cmp	r3, #0
   3181e:	d100      	bne.n	31822 <_http_client_request+0x5a6>
   31820:	e0b5      	b.n	3198e <_http_client_request+0x712>
   31822:	69fb      	ldr	r3, [r7, #28]
   31824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31826:	220c      	movs	r2, #12
   31828:	2118      	movs	r1, #24
   3182a:	468c      	mov	ip, r1
   3182c:	44bc      	add	ip, r7
   3182e:	4462      	add	r2, ip
   31830:	69f8      	ldr	r0, [r7, #28]
   31832:	2101      	movs	r1, #1
   31834:	4798      	blx	r3
   31836:	e0aa      	b.n	3198e <_http_client_request+0x712>
   31838:	69fb      	ldr	r3, [r7, #28]
   3183a:	22cc      	movs	r2, #204	; 0xcc
   3183c:	589b      	ldr	r3, [r3, r2]
   3183e:	2b00      	cmp	r3, #0
   31840:	dc00      	bgt.n	31844 <_http_client_request+0x5c8>
   31842:	e07c      	b.n	3193e <_http_client_request+0x6c2>
   31844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31846:	68db      	ldr	r3, [r3, #12]
   31848:	2b00      	cmp	r3, #0
   3184a:	d100      	bne.n	3184e <_http_client_request+0x5d2>
   3184c:	e077      	b.n	3193e <_http_client_request+0x6c2>
   3184e:	69fb      	ldr	r3, [r7, #28]
   31850:	22d0      	movs	r2, #208	; 0xd0
   31852:	589a      	ldr	r2, [r3, r2]
   31854:	69fb      	ldr	r3, [r7, #28]
   31856:	21cc      	movs	r1, #204	; 0xcc
   31858:	585b      	ldr	r3, [r3, r1]
   3185a:	429a      	cmp	r2, r3
   3185c:	db1f      	blt.n	3189e <_http_client_request+0x622>
   3185e:	69fb      	ldr	r3, [r7, #28]
   31860:	22c0      	movs	r2, #192	; 0xc0
   31862:	589b      	ldr	r3, [r3, r2]
   31864:	2b00      	cmp	r3, #0
   31866:	d007      	beq.n	31878 <_http_client_request+0x5fc>
   31868:	69fb      	ldr	r3, [r7, #28]
   3186a:	22c0      	movs	r2, #192	; 0xc0
   3186c:	589b      	ldr	r3, [r3, r2]
   3186e:	69fa      	ldr	r2, [r7, #28]
   31870:	21c4      	movs	r1, #196	; 0xc4
   31872:	5852      	ldr	r2, [r2, r1]
   31874:	0010      	movs	r0, r2
   31876:	4798      	blx	r3
   31878:	69fb      	ldr	r3, [r7, #28]
   3187a:	2202      	movs	r2, #2
   3187c:	66da      	str	r2, [r3, #108]	; 0x6c
   3187e:	69fb      	ldr	r3, [r7, #28]
   31880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31882:	2b00      	cmp	r3, #0
   31884:	d100      	bne.n	31888 <_http_client_request+0x60c>
   31886:	e084      	b.n	31992 <_http_client_request+0x716>
   31888:	69fb      	ldr	r3, [r7, #28]
   3188a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3188c:	220c      	movs	r2, #12
   3188e:	2118      	movs	r1, #24
   31890:	468c      	mov	ip, r1
   31892:	44bc      	add	ip, r7
   31894:	4462      	add	r2, ip
   31896:	69f8      	ldr	r0, [r7, #28]
   31898:	2101      	movs	r1, #1
   3189a:	4798      	blx	r3
   3189c:	e079      	b.n	31992 <_http_client_request+0x716>
   3189e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   318a0:	68dc      	ldr	r4, [r3, #12]
   318a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   318a4:	6958      	ldr	r0, [r3, #20]
   318a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   318a8:	69fb      	ldr	r3, [r7, #28]
   318aa:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   318ac:	69fb      	ldr	r3, [r7, #28]
   318ae:	22d0      	movs	r2, #208	; 0xd0
   318b0:	589b      	ldr	r3, [r3, r2]
   318b2:	002a      	movs	r2, r5
   318b4:	47a0      	blx	r4
   318b6:	0003      	movs	r3, r0
   318b8:	677b      	str	r3, [r7, #116]	; 0x74
   318ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   318bc:	2b00      	cmp	r3, #0
   318be:	da0d      	bge.n	318dc <_http_client_request+0x660>
   318c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   318c2:	2b00      	cmp	r3, #0
   318c4:	d102      	bne.n	318cc <_http_client_request+0x650>
   318c6:	234d      	movs	r3, #77	; 0x4d
   318c8:	425b      	negs	r3, r3
   318ca:	e001      	b.n	318d0 <_http_client_request+0x654>
   318cc:	2305      	movs	r3, #5
   318ce:	425b      	negs	r3, r3
   318d0:	69fa      	ldr	r2, [r7, #28]
   318d2:	0019      	movs	r1, r3
   318d4:	0010      	movs	r0, r2
   318d6:	4b2c      	ldr	r3, [pc, #176]	; (31988 <_http_client_request+0x70c>)
   318d8:	4798      	blx	r3
   318da:	e057      	b.n	3198c <_http_client_request+0x710>
   318dc:	69fb      	ldr	r3, [r7, #28]
   318de:	22cc      	movs	r2, #204	; 0xcc
   318e0:	589a      	ldr	r2, [r3, r2]
   318e2:	69fb      	ldr	r3, [r7, #28]
   318e4:	21d0      	movs	r1, #208	; 0xd0
   318e6:	585b      	ldr	r3, [r3, r1]
   318e8:	1ad2      	subs	r2, r2, r3
   318ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   318ec:	429a      	cmp	r2, r3
   318ee:	da07      	bge.n	31900 <_http_client_request+0x684>
   318f0:	69fb      	ldr	r3, [r7, #28]
   318f2:	22cc      	movs	r2, #204	; 0xcc
   318f4:	589a      	ldr	r2, [r3, r2]
   318f6:	69fb      	ldr	r3, [r7, #28]
   318f8:	21d0      	movs	r1, #208	; 0xd0
   318fa:	585b      	ldr	r3, [r3, r1]
   318fc:	1ad3      	subs	r3, r2, r3
   318fe:	677b      	str	r3, [r7, #116]	; 0x74
   31900:	69fb      	ldr	r3, [r7, #28]
   31902:	2000      	movs	r0, #0
   31904:	5618      	ldrsb	r0, [r3, r0]
   31906:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31908:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3190a:	b29a      	uxth	r2, r3
   3190c:	2300      	movs	r3, #0
   3190e:	4c1d      	ldr	r4, [pc, #116]	; (31984 <_http_client_request+0x708>)
   31910:	47a0      	blx	r4
   31912:	0003      	movs	r3, r0
   31914:	663b      	str	r3, [r7, #96]	; 0x60
   31916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   31918:	2b00      	cmp	r3, #0
   3191a:	da07      	bge.n	3192c <_http_client_request+0x6b0>
   3191c:	2305      	movs	r3, #5
   3191e:	425a      	negs	r2, r3
   31920:	69fb      	ldr	r3, [r7, #28]
   31922:	0011      	movs	r1, r2
   31924:	0018      	movs	r0, r3
   31926:	4b18      	ldr	r3, [pc, #96]	; (31988 <_http_client_request+0x70c>)
   31928:	4798      	blx	r3
   3192a:	e03b      	b.n	319a4 <_http_client_request+0x728>
   3192c:	69fb      	ldr	r3, [r7, #28]
   3192e:	22d0      	movs	r2, #208	; 0xd0
   31930:	589a      	ldr	r2, [r3, r2]
   31932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31934:	18d2      	adds	r2, r2, r3
   31936:	69fb      	ldr	r3, [r7, #28]
   31938:	21d0      	movs	r1, #208	; 0xd0
   3193a:	505a      	str	r2, [r3, r1]
   3193c:	e026      	b.n	3198c <_http_client_request+0x710>
   3193e:	69fb      	ldr	r3, [r7, #28]
   31940:	2202      	movs	r2, #2
   31942:	66da      	str	r2, [r3, #108]	; 0x6c
   31944:	69fb      	ldr	r3, [r7, #28]
   31946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31948:	2b00      	cmp	r3, #0
   3194a:	d024      	beq.n	31996 <_http_client_request+0x71a>
   3194c:	69fb      	ldr	r3, [r7, #28]
   3194e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31950:	220c      	movs	r2, #12
   31952:	2118      	movs	r1, #24
   31954:	468c      	mov	ip, r1
   31956:	44bc      	add	ip, r7
   31958:	4462      	add	r2, ip
   3195a:	69f8      	ldr	r0, [r7, #28]
   3195c:	2101      	movs	r1, #1
   3195e:	4798      	blx	r3
   31960:	e019      	b.n	31996 <_http_client_request+0x71a>
   31962:	46c0      	nop			; (mov r8, r8)
   31964:	00039aa0 	.word	0x00039aa0
   31968:	00034b5d 	.word	0x00034b5d
   3196c:	00039aa4 	.word	0x00039aa4
   31970:	000321dd 	.word	0x000321dd
   31974:	00034c57 	.word	0x00034c57
   31978:	00039a2c 	.word	0x00039a2c
   3197c:	00032219 	.word	0x00032219
   31980:	8000000f 	.word	0x8000000f
   31984:	000257b9 	.word	0x000257b9
   31988:	00031129 	.word	0x00031129
   3198c:	e004      	b.n	31998 <_http_client_request+0x71c>
   3198e:	46c0      	nop			; (mov r8, r8)
   31990:	e002      	b.n	31998 <_http_client_request+0x71c>
   31992:	46c0      	nop			; (mov r8, r8)
   31994:	e000      	b.n	31998 <_http_client_request+0x71c>
   31996:	46c0      	nop			; (mov r8, r8)
   31998:	69bb      	ldr	r3, [r7, #24]
   3199a:	469d      	mov	sp, r3
   3199c:	e004      	b.n	319a8 <_http_client_request+0x72c>
   3199e:	46c0      	nop			; (mov r8, r8)
   319a0:	e000      	b.n	319a4 <_http_client_request+0x728>
   319a2:	46c0      	nop			; (mov r8, r8)
   319a4:	69bb      	ldr	r3, [r7, #24]
   319a6:	469d      	mov	sp, r3
   319a8:	46bd      	mov	sp, r7
   319aa:	b01e      	add	sp, #120	; 0x78
   319ac:	bc04      	pop	{r2}
   319ae:	4690      	mov	r8, r2
   319b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   319b2:	46c0      	nop			; (mov r8, r8)

000319b4 <_http_client_recv_packet>:
   319b4:	b590      	push	{r4, r7, lr}
   319b6:	b083      	sub	sp, #12
   319b8:	af00      	add	r7, sp, #0
   319ba:	6078      	str	r0, [r7, #4]
   319bc:	687b      	ldr	r3, [r7, #4]
   319be:	2b00      	cmp	r3, #0
   319c0:	d021      	beq.n	31a06 <_http_client_recv_packet+0x52>
   319c2:	687b      	ldr	r3, [r7, #4]
   319c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   319c6:	687b      	ldr	r3, [r7, #4]
   319c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   319ca:	429a      	cmp	r2, r3
   319cc:	d307      	bcc.n	319de <_http_client_recv_packet+0x2a>
   319ce:	238b      	movs	r3, #139	; 0x8b
   319d0:	425a      	negs	r2, r3
   319d2:	687b      	ldr	r3, [r7, #4]
   319d4:	0011      	movs	r1, r2
   319d6:	0018      	movs	r0, r3
   319d8:	4b0d      	ldr	r3, [pc, #52]	; (31a10 <_http_client_recv_packet+0x5c>)
   319da:	4798      	blx	r3
   319dc:	e014      	b.n	31a08 <_http_client_recv_packet+0x54>
   319de:	687b      	ldr	r3, [r7, #4]
   319e0:	2000      	movs	r0, #0
   319e2:	5618      	ldrsb	r0, [r3, r0]
   319e4:	687b      	ldr	r3, [r7, #4]
   319e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   319e8:	687b      	ldr	r3, [r7, #4]
   319ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   319ec:	18d1      	adds	r1, r2, r3
   319ee:	687b      	ldr	r3, [r7, #4]
   319f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   319f2:	b29a      	uxth	r2, r3
   319f4:	687b      	ldr	r3, [r7, #4]
   319f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   319f8:	b29b      	uxth	r3, r3
   319fa:	1ad3      	subs	r3, r2, r3
   319fc:	b29a      	uxth	r2, r3
   319fe:	2300      	movs	r3, #0
   31a00:	4c04      	ldr	r4, [pc, #16]	; (31a14 <_http_client_recv_packet+0x60>)
   31a02:	47a0      	blx	r4
   31a04:	e000      	b.n	31a08 <_http_client_recv_packet+0x54>
   31a06:	46c0      	nop			; (mov r8, r8)
   31a08:	46bd      	mov	sp, r7
   31a0a:	b003      	add	sp, #12
   31a0c:	bd90      	pop	{r4, r7, pc}
   31a0e:	46c0      	nop			; (mov r8, r8)
   31a10:	00031129 	.word	0x00031129
   31a14:	0002591d 	.word	0x0002591d

00031a18 <_http_client_recved_packet>:
   31a18:	b580      	push	{r7, lr}
   31a1a:	b082      	sub	sp, #8
   31a1c:	af00      	add	r7, sp, #0
   31a1e:	6078      	str	r0, [r7, #4]
   31a20:	6039      	str	r1, [r7, #0]
   31a22:	687b      	ldr	r3, [r7, #4]
   31a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31a26:	683b      	ldr	r3, [r7, #0]
   31a28:	18d2      	adds	r2, r2, r3
   31a2a:	687b      	ldr	r3, [r7, #4]
   31a2c:	645a      	str	r2, [r3, #68]	; 0x44
   31a2e:	687b      	ldr	r3, [r7, #4]
   31a30:	2258      	movs	r2, #88	; 0x58
   31a32:	5a9b      	ldrh	r3, [r3, r2]
   31a34:	2b00      	cmp	r3, #0
   31a36:	d007      	beq.n	31a48 <_http_client_recved_packet+0x30>
   31a38:	687b      	ldr	r3, [r7, #4]
   31a3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31a3c:	687b      	ldr	r3, [r7, #4]
   31a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31a40:	0019      	movs	r1, r3
   31a42:	0010      	movs	r0, r2
   31a44:	4b06      	ldr	r3, [pc, #24]	; (31a60 <_http_client_recved_packet+0x48>)
   31a46:	4798      	blx	r3
   31a48:	46c0      	nop			; (mov r8, r8)
   31a4a:	687b      	ldr	r3, [r7, #4]
   31a4c:	0018      	movs	r0, r3
   31a4e:	4b05      	ldr	r3, [pc, #20]	; (31a64 <_http_client_recved_packet+0x4c>)
   31a50:	4798      	blx	r3
   31a52:	1e03      	subs	r3, r0, #0
   31a54:	d1f9      	bne.n	31a4a <_http_client_recved_packet+0x32>
   31a56:	46c0      	nop			; (mov r8, r8)
   31a58:	46bd      	mov	sp, r7
   31a5a:	b002      	add	sp, #8
   31a5c:	bd80      	pop	{r7, pc}
   31a5e:	46c0      	nop			; (mov r8, r8)
   31a60:	000324d5 	.word	0x000324d5
   31a64:	00031a69 	.word	0x00031a69

00031a68 <_http_client_handle_response>:
   31a68:	b580      	push	{r7, lr}
   31a6a:	b082      	sub	sp, #8
   31a6c:	af00      	add	r7, sp, #0
   31a6e:	6078      	str	r0, [r7, #4]
   31a70:	687b      	ldr	r3, [r7, #4]
   31a72:	22d8      	movs	r2, #216	; 0xd8
   31a74:	589b      	ldr	r3, [r3, r2]
   31a76:	2b00      	cmp	r3, #0
   31a78:	d002      	beq.n	31a80 <_http_client_handle_response+0x18>
   31a7a:	2b01      	cmp	r3, #1
   31a7c:	d006      	beq.n	31a8c <_http_client_handle_response+0x24>
   31a7e:	e00b      	b.n	31a98 <_http_client_handle_response+0x30>
   31a80:	687b      	ldr	r3, [r7, #4]
   31a82:	0018      	movs	r0, r3
   31a84:	4b07      	ldr	r3, [pc, #28]	; (31aa4 <_http_client_handle_response+0x3c>)
   31a86:	4798      	blx	r3
   31a88:	0003      	movs	r3, r0
   31a8a:	e006      	b.n	31a9a <_http_client_handle_response+0x32>
   31a8c:	687b      	ldr	r3, [r7, #4]
   31a8e:	0018      	movs	r0, r3
   31a90:	4b05      	ldr	r3, [pc, #20]	; (31aa8 <_http_client_handle_response+0x40>)
   31a92:	4798      	blx	r3
   31a94:	0003      	movs	r3, r0
   31a96:	e000      	b.n	31a9a <_http_client_handle_response+0x32>
   31a98:	2300      	movs	r3, #0
   31a9a:	0018      	movs	r0, r3
   31a9c:	46bd      	mov	sp, r7
   31a9e:	b002      	add	sp, #8
   31aa0:	bd80      	pop	{r7, pc}
   31aa2:	46c0      	nop			; (mov r8, r8)
   31aa4:	00031aad 	.word	0x00031aad
   31aa8:	00031f65 	.word	0x00031f65

00031aac <_http_client_handle_header>:
   31aac:	b590      	push	{r4, r7, lr}
   31aae:	b08b      	sub	sp, #44	; 0x2c
   31ab0:	af00      	add	r7, sp, #0
   31ab2:	6078      	str	r0, [r7, #4]
   31ab4:	687b      	ldr	r3, [r7, #4]
   31ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31ab8:	627b      	str	r3, [r7, #36]	; 0x24
   31aba:	4b9a      	ldr	r3, [pc, #616]	; (31d24 <_http_client_handle_header+0x278>)
   31abc:	681a      	ldr	r2, [r3, #0]
   31abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ac0:	0011      	movs	r1, r2
   31ac2:	0018      	movs	r0, r3
   31ac4:	4b98      	ldr	r3, [pc, #608]	; (31d28 <_http_client_handle_header+0x27c>)
   31ac6:	4798      	blx	r3
   31ac8:	0003      	movs	r3, r0
   31aca:	61bb      	str	r3, [r7, #24]
   31acc:	69bb      	ldr	r3, [r7, #24]
   31ace:	2b00      	cmp	r3, #0
   31ad0:	d007      	beq.n	31ae2 <_http_client_handle_header+0x36>
   31ad2:	687b      	ldr	r3, [r7, #4]
   31ad4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   31ad6:	687b      	ldr	r3, [r7, #4]
   31ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31ada:	18d2      	adds	r2, r2, r3
   31adc:	69bb      	ldr	r3, [r7, #24]
   31ade:	429a      	cmp	r2, r3
   31ae0:	d807      	bhi.n	31af2 <_http_client_handle_header+0x46>
   31ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31ae4:	687b      	ldr	r3, [r7, #4]
   31ae6:	0011      	movs	r1, r2
   31ae8:	0018      	movs	r0, r3
   31aea:	4b90      	ldr	r3, [pc, #576]	; (31d2c <_http_client_handle_header+0x280>)
   31aec:	4798      	blx	r3
   31aee:	2300      	movs	r3, #0
   31af0:	e114      	b.n	31d1c <_http_client_handle_header+0x270>
   31af2:	4b8c      	ldr	r3, [pc, #560]	; (31d24 <_http_client_handle_header+0x278>)
   31af4:	681c      	ldr	r4, [r3, #0]
   31af6:	4b8b      	ldr	r3, [pc, #556]	; (31d24 <_http_client_handle_header+0x278>)
   31af8:	681b      	ldr	r3, [r3, #0]
   31afa:	0018      	movs	r0, r3
   31afc:	4b8c      	ldr	r3, [pc, #560]	; (31d30 <_http_client_handle_header+0x284>)
   31afe:	4798      	blx	r3
   31b00:	0002      	movs	r2, r0
   31b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b04:	0021      	movs	r1, r4
   31b06:	0018      	movs	r0, r3
   31b08:	4b8a      	ldr	r3, [pc, #552]	; (31d34 <_http_client_handle_header+0x288>)
   31b0a:	4798      	blx	r3
   31b0c:	1e03      	subs	r3, r0, #0
   31b0e:	d15d      	bne.n	31bcc <_http_client_handle_header+0x120>
   31b10:	4b84      	ldr	r3, [pc, #528]	; (31d24 <_http_client_handle_header+0x278>)
   31b12:	681b      	ldr	r3, [r3, #0]
   31b14:	0018      	movs	r0, r3
   31b16:	4b86      	ldr	r3, [pc, #536]	; (31d30 <_http_client_handle_header+0x284>)
   31b18:	4798      	blx	r3
   31b1a:	0002      	movs	r2, r0
   31b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b1e:	189a      	adds	r2, r3, r2
   31b20:	687b      	ldr	r3, [r7, #4]
   31b22:	0011      	movs	r1, r2
   31b24:	0018      	movs	r0, r3
   31b26:	4b81      	ldr	r3, [pc, #516]	; (31d2c <_http_client_handle_header+0x280>)
   31b28:	4798      	blx	r3
   31b2a:	687b      	ldr	r3, [r7, #4]
   31b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31b2e:	2b00      	cmp	r3, #0
   31b30:	d046      	beq.n	31bc0 <_http_client_handle_header+0x114>
   31b32:	687b      	ldr	r3, [r7, #4]
   31b34:	22e4      	movs	r2, #228	; 0xe4
   31b36:	5a9b      	ldrh	r3, [r3, r2]
   31b38:	2b00      	cmp	r3, #0
   31b3a:	d041      	beq.n	31bc0 <_http_client_handle_header+0x114>
   31b3c:	687b      	ldr	r3, [r7, #4]
   31b3e:	22dc      	movs	r2, #220	; 0xdc
   31b40:	589b      	ldr	r3, [r3, r2]
   31b42:	2b00      	cmp	r3, #0
   31b44:	da19      	bge.n	31b7a <_http_client_handle_header+0xce>
   31b46:	687b      	ldr	r3, [r7, #4]
   31b48:	22e4      	movs	r2, #228	; 0xe4
   31b4a:	5a9a      	ldrh	r2, [r3, r2]
   31b4c:	230c      	movs	r3, #12
   31b4e:	18fb      	adds	r3, r7, r3
   31b50:	801a      	strh	r2, [r3, #0]
   31b52:	230c      	movs	r3, #12
   31b54:	18fb      	adds	r3, r7, r3
   31b56:	2201      	movs	r2, #1
   31b58:	709a      	strb	r2, [r3, #2]
   31b5a:	687b      	ldr	r3, [r7, #4]
   31b5c:	22e0      	movs	r2, #224	; 0xe0
   31b5e:	2100      	movs	r1, #0
   31b60:	5099      	str	r1, [r3, r2]
   31b62:	230c      	movs	r3, #12
   31b64:	18fb      	adds	r3, r7, r3
   31b66:	2200      	movs	r2, #0
   31b68:	609a      	str	r2, [r3, #8]
   31b6a:	687b      	ldr	r3, [r7, #4]
   31b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31b6e:	220c      	movs	r2, #12
   31b70:	18ba      	adds	r2, r7, r2
   31b72:	6878      	ldr	r0, [r7, #4]
   31b74:	2102      	movs	r1, #2
   31b76:	4798      	blx	r3
   31b78:	e022      	b.n	31bc0 <_http_client_handle_header+0x114>
   31b7a:	687b      	ldr	r3, [r7, #4]
   31b7c:	22dc      	movs	r2, #220	; 0xdc
   31b7e:	589a      	ldr	r2, [r3, r2]
   31b80:	687b      	ldr	r3, [r7, #4]
   31b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31b84:	429a      	cmp	r2, r3
   31b86:	dd1b      	ble.n	31bc0 <_http_client_handle_header+0x114>
   31b88:	687b      	ldr	r3, [r7, #4]
   31b8a:	22e4      	movs	r2, #228	; 0xe4
   31b8c:	5a9a      	ldrh	r2, [r3, r2]
   31b8e:	230c      	movs	r3, #12
   31b90:	18fb      	adds	r3, r7, r3
   31b92:	801a      	strh	r2, [r3, #0]
   31b94:	687b      	ldr	r3, [r7, #4]
   31b96:	22dc      	movs	r2, #220	; 0xdc
   31b98:	589b      	ldr	r3, [r3, r2]
   31b9a:	001a      	movs	r2, r3
   31b9c:	230c      	movs	r3, #12
   31b9e:	18fb      	adds	r3, r7, r3
   31ba0:	605a      	str	r2, [r3, #4]
   31ba2:	230c      	movs	r3, #12
   31ba4:	18fb      	adds	r3, r7, r3
   31ba6:	2200      	movs	r2, #0
   31ba8:	609a      	str	r2, [r3, #8]
   31baa:	687b      	ldr	r3, [r7, #4]
   31bac:	22e0      	movs	r2, #224	; 0xe0
   31bae:	2100      	movs	r1, #0
   31bb0:	5099      	str	r1, [r3, r2]
   31bb2:	687b      	ldr	r3, [r7, #4]
   31bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31bb6:	220c      	movs	r2, #12
   31bb8:	18ba      	adds	r2, r7, r2
   31bba:	6878      	ldr	r0, [r7, #4]
   31bbc:	2102      	movs	r1, #2
   31bbe:	4798      	blx	r3
   31bc0:	687b      	ldr	r3, [r7, #4]
   31bc2:	22d8      	movs	r2, #216	; 0xd8
   31bc4:	2101      	movs	r1, #1
   31bc6:	5099      	str	r1, [r3, r2]
   31bc8:	2301      	movs	r3, #1
   31bca:	e0a7      	b.n	31d1c <_http_client_handle_header+0x270>
   31bcc:	495a      	ldr	r1, [pc, #360]	; (31d38 <_http_client_handle_header+0x28c>)
   31bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31bd0:	2210      	movs	r2, #16
   31bd2:	0018      	movs	r0, r3
   31bd4:	4b57      	ldr	r3, [pc, #348]	; (31d34 <_http_client_handle_header+0x288>)
   31bd6:	4798      	blx	r3
   31bd8:	1e03      	subs	r3, r0, #0
   31bda:	d109      	bne.n	31bf0 <_http_client_handle_header+0x144>
   31bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31bde:	3310      	adds	r3, #16
   31be0:	0018      	movs	r0, r3
   31be2:	4b56      	ldr	r3, [pc, #344]	; (31d3c <_http_client_handle_header+0x290>)
   31be4:	4798      	blx	r3
   31be6:	0001      	movs	r1, r0
   31be8:	687b      	ldr	r3, [r7, #4]
   31bea:	22dc      	movs	r2, #220	; 0xdc
   31bec:	5099      	str	r1, [r3, r2]
   31bee:	e08b      	b.n	31d08 <_http_client_handle_header+0x25c>
   31bf0:	4953      	ldr	r1, [pc, #332]	; (31d40 <_http_client_handle_header+0x294>)
   31bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31bf4:	2213      	movs	r2, #19
   31bf6:	0018      	movs	r0, r3
   31bf8:	4b4e      	ldr	r3, [pc, #312]	; (31d34 <_http_client_handle_header+0x288>)
   31bfa:	4798      	blx	r3
   31bfc:	1e03      	subs	r3, r0, #0
   31bfe:	d127      	bne.n	31c50 <_http_client_handle_header+0x1a4>
   31c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31c02:	3313      	adds	r3, #19
   31c04:	623b      	str	r3, [r7, #32]
   31c06:	e01e      	b.n	31c46 <_http_client_handle_header+0x19a>
   31c08:	6a3b      	ldr	r3, [r7, #32]
   31c0a:	781b      	ldrb	r3, [r3, #0]
   31c0c:	2b20      	cmp	r3, #32
   31c0e:	d103      	bne.n	31c18 <_http_client_handle_header+0x16c>
   31c10:	6a3b      	ldr	r3, [r7, #32]
   31c12:	3301      	adds	r3, #1
   31c14:	623b      	str	r3, [r7, #32]
   31c16:	e016      	b.n	31c46 <_http_client_handle_header+0x19a>
   31c18:	6a3b      	ldr	r3, [r7, #32]
   31c1a:	781b      	ldrb	r3, [r3, #0]
   31c1c:	2b43      	cmp	r3, #67	; 0x43
   31c1e:	d003      	beq.n	31c28 <_http_client_handle_header+0x17c>
   31c20:	6a3b      	ldr	r3, [r7, #32]
   31c22:	781b      	ldrb	r3, [r3, #0]
   31c24:	2b63      	cmp	r3, #99	; 0x63
   31c26:	d105      	bne.n	31c34 <_http_client_handle_header+0x188>
   31c28:	687b      	ldr	r3, [r7, #4]
   31c2a:	21cc      	movs	r1, #204	; 0xcc
   31c2c:	2201      	movs	r2, #1
   31c2e:	4252      	negs	r2, r2
   31c30:	505a      	str	r2, [r3, r1]
   31c32:	e069      	b.n	31d08 <_http_client_handle_header+0x25c>
   31c34:	2386      	movs	r3, #134	; 0x86
   31c36:	425a      	negs	r2, r3
   31c38:	687b      	ldr	r3, [r7, #4]
   31c3a:	0011      	movs	r1, r2
   31c3c:	0018      	movs	r0, r3
   31c3e:	4b41      	ldr	r3, [pc, #260]	; (31d44 <_http_client_handle_header+0x298>)
   31c40:	4798      	blx	r3
   31c42:	2300      	movs	r3, #0
   31c44:	e06a      	b.n	31d1c <_http_client_handle_header+0x270>
   31c46:	69ba      	ldr	r2, [r7, #24]
   31c48:	6a3b      	ldr	r3, [r7, #32]
   31c4a:	429a      	cmp	r2, r3
   31c4c:	d8dc      	bhi.n	31c08 <_http_client_handle_header+0x15c>
   31c4e:	e05b      	b.n	31d08 <_http_client_handle_header+0x25c>
   31c50:	493d      	ldr	r1, [pc, #244]	; (31d48 <_http_client_handle_header+0x29c>)
   31c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31c54:	220c      	movs	r2, #12
   31c56:	0018      	movs	r0, r3
   31c58:	4b36      	ldr	r3, [pc, #216]	; (31d34 <_http_client_handle_header+0x288>)
   31c5a:	4798      	blx	r3
   31c5c:	1e03      	subs	r3, r0, #0
   31c5e:	d126      	bne.n	31cae <_http_client_handle_header+0x202>
   31c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31c62:	330c      	adds	r3, #12
   31c64:	61fb      	str	r3, [r7, #28]
   31c66:	e01d      	b.n	31ca4 <_http_client_handle_header+0x1f8>
   31c68:	69fb      	ldr	r3, [r7, #28]
   31c6a:	781b      	ldrb	r3, [r3, #0]
   31c6c:	2b20      	cmp	r3, #32
   31c6e:	d103      	bne.n	31c78 <_http_client_handle_header+0x1cc>
   31c70:	69fb      	ldr	r3, [r7, #28]
   31c72:	3301      	adds	r3, #1
   31c74:	61fb      	str	r3, [r7, #28]
   31c76:	e015      	b.n	31ca4 <_http_client_handle_header+0x1f8>
   31c78:	69fb      	ldr	r3, [r7, #28]
   31c7a:	781b      	ldrb	r3, [r3, #0]
   31c7c:	2b4b      	cmp	r3, #75	; 0x4b
   31c7e:	d003      	beq.n	31c88 <_http_client_handle_header+0x1dc>
   31c80:	69fb      	ldr	r3, [r7, #28]
   31c82:	781b      	ldrb	r3, [r3, #0]
   31c84:	2b6b      	cmp	r3, #107	; 0x6b
   31c86:	d106      	bne.n	31c96 <_http_client_handle_header+0x1ea>
   31c88:	687b      	ldr	r3, [r7, #4]
   31c8a:	2241      	movs	r2, #65	; 0x41
   31c8c:	5c99      	ldrb	r1, [r3, r2]
   31c8e:	2002      	movs	r0, #2
   31c90:	4301      	orrs	r1, r0
   31c92:	5499      	strb	r1, [r3, r2]
   31c94:	e038      	b.n	31d08 <_http_client_handle_header+0x25c>
   31c96:	687b      	ldr	r3, [r7, #4]
   31c98:	2241      	movs	r2, #65	; 0x41
   31c9a:	5c99      	ldrb	r1, [r3, r2]
   31c9c:	2002      	movs	r0, #2
   31c9e:	4381      	bics	r1, r0
   31ca0:	5499      	strb	r1, [r3, r2]
   31ca2:	e031      	b.n	31d08 <_http_client_handle_header+0x25c>
   31ca4:	69ba      	ldr	r2, [r7, #24]
   31ca6:	69fb      	ldr	r3, [r7, #28]
   31ca8:	429a      	cmp	r2, r3
   31caa:	d8dd      	bhi.n	31c68 <_http_client_handle_header+0x1bc>
   31cac:	e02c      	b.n	31d08 <_http_client_handle_header+0x25c>
   31cae:	4927      	ldr	r1, [pc, #156]	; (31d4c <_http_client_handle_header+0x2a0>)
   31cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31cb2:	2205      	movs	r2, #5
   31cb4:	0018      	movs	r0, r3
   31cb6:	4b1f      	ldr	r3, [pc, #124]	; (31d34 <_http_client_handle_header+0x288>)
   31cb8:	4798      	blx	r3
   31cba:	1e03      	subs	r3, r0, #0
   31cbc:	d124      	bne.n	31d08 <_http_client_handle_header+0x25c>
   31cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31cc0:	3309      	adds	r3, #9
   31cc2:	0018      	movs	r0, r3
   31cc4:	4b1d      	ldr	r3, [pc, #116]	; (31d3c <_http_client_handle_header+0x290>)
   31cc6:	4798      	blx	r3
   31cc8:	0003      	movs	r3, r0
   31cca:	b299      	uxth	r1, r3
   31ccc:	687b      	ldr	r3, [r7, #4]
   31cce:	22e4      	movs	r2, #228	; 0xe4
   31cd0:	5299      	strh	r1, [r3, r2]
   31cd2:	687b      	ldr	r3, [r7, #4]
   31cd4:	22dc      	movs	r2, #220	; 0xdc
   31cd6:	2100      	movs	r1, #0
   31cd8:	5099      	str	r1, [r3, r2]
   31cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31cdc:	3305      	adds	r3, #5
   31cde:	781b      	ldrb	r3, [r3, #0]
   31ce0:	2b31      	cmp	r3, #49	; 0x31
   31ce2:	d804      	bhi.n	31cee <_http_client_handle_header+0x242>
   31ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ce6:	3307      	adds	r3, #7
   31ce8:	781b      	ldrb	r3, [r3, #0]
   31cea:	2b30      	cmp	r3, #48	; 0x30
   31cec:	d906      	bls.n	31cfc <_http_client_handle_header+0x250>
   31cee:	687b      	ldr	r3, [r7, #4]
   31cf0:	2241      	movs	r2, #65	; 0x41
   31cf2:	5c99      	ldrb	r1, [r3, r2]
   31cf4:	2002      	movs	r0, #2
   31cf6:	4301      	orrs	r1, r0
   31cf8:	5499      	strb	r1, [r3, r2]
   31cfa:	e005      	b.n	31d08 <_http_client_handle_header+0x25c>
   31cfc:	687b      	ldr	r3, [r7, #4]
   31cfe:	2241      	movs	r2, #65	; 0x41
   31d00:	5c99      	ldrb	r1, [r3, r2]
   31d02:	2002      	movs	r0, #2
   31d04:	4381      	bics	r1, r0
   31d06:	5499      	strb	r1, [r3, r2]
   31d08:	4b06      	ldr	r3, [pc, #24]	; (31d24 <_http_client_handle_header+0x278>)
   31d0a:	681b      	ldr	r3, [r3, #0]
   31d0c:	0018      	movs	r0, r3
   31d0e:	4b08      	ldr	r3, [pc, #32]	; (31d30 <_http_client_handle_header+0x284>)
   31d10:	4798      	blx	r3
   31d12:	0002      	movs	r2, r0
   31d14:	69bb      	ldr	r3, [r7, #24]
   31d16:	189b      	adds	r3, r3, r2
   31d18:	627b      	str	r3, [r7, #36]	; 0x24
   31d1a:	e6ce      	b.n	31aba <_http_client_handle_header+0xe>
   31d1c:	0018      	movs	r0, r3
   31d1e:	46bd      	mov	sp, r7
   31d20:	b00b      	add	sp, #44	; 0x2c
   31d22:	bd90      	pop	{r4, r7, pc}
   31d24:	200000d0 	.word	0x200000d0
   31d28:	00034cd5 	.word	0x00034cd5
   31d2c:	00032111 	.word	0x00032111
   31d30:	00034c57 	.word	0x00034c57
   31d34:	00034c65 	.word	0x00034c65
   31d38:	00039aa4 	.word	0x00039aa4
   31d3c:	000347ed 	.word	0x000347ed
   31d40:	00039ac8 	.word	0x00039ac8
   31d44:	00031129 	.word	0x00031129
   31d48:	00039adc 	.word	0x00039adc
   31d4c:	00039aec 	.word	0x00039aec

00031d50 <_http_client_read_chuked_entity>:
   31d50:	b580      	push	{r7, lr}
   31d52:	b088      	sub	sp, #32
   31d54:	af00      	add	r7, sp, #0
   31d56:	6078      	str	r0, [r7, #4]
   31d58:	687b      	ldr	r3, [r7, #4]
   31d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31d5c:	61fb      	str	r3, [r7, #28]
   31d5e:	2300      	movs	r3, #0
   31d60:	61bb      	str	r3, [r7, #24]
   31d62:	687b      	ldr	r3, [r7, #4]
   31d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31d66:	617b      	str	r3, [r7, #20]
   31d68:	687b      	ldr	r3, [r7, #4]
   31d6a:	22e0      	movs	r2, #224	; 0xe0
   31d6c:	589b      	ldr	r3, [r3, r2]
   31d6e:	2b00      	cmp	r3, #0
   31d70:	db71      	blt.n	31e56 <_http_client_read_chuked_entity+0x106>
   31d72:	687b      	ldr	r3, [r7, #4]
   31d74:	22e0      	movs	r2, #224	; 0xe0
   31d76:	589b      	ldr	r3, [r3, r2]
   31d78:	2b00      	cmp	r3, #0
   31d7a:	d134      	bne.n	31de6 <_http_client_read_chuked_entity+0x96>
   31d7c:	687b      	ldr	r3, [r7, #4]
   31d7e:	22d8      	movs	r2, #216	; 0xd8
   31d80:	2100      	movs	r1, #0
   31d82:	5099      	str	r1, [r3, r2]
   31d84:	687b      	ldr	r3, [r7, #4]
   31d86:	22e4      	movs	r2, #228	; 0xe4
   31d88:	2100      	movs	r1, #0
   31d8a:	5299      	strh	r1, [r3, r2]
   31d8c:	2308      	movs	r3, #8
   31d8e:	18fb      	adds	r3, r7, r3
   31d90:	2201      	movs	r2, #1
   31d92:	721a      	strb	r2, [r3, #8]
   31d94:	2308      	movs	r3, #8
   31d96:	18fb      	adds	r3, r7, r3
   31d98:	2200      	movs	r2, #0
   31d9a:	601a      	str	r2, [r3, #0]
   31d9c:	2308      	movs	r3, #8
   31d9e:	18fb      	adds	r3, r7, r3
   31da0:	2200      	movs	r2, #0
   31da2:	605a      	str	r2, [r3, #4]
   31da4:	687b      	ldr	r3, [r7, #4]
   31da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31da8:	2b00      	cmp	r3, #0
   31daa:	d006      	beq.n	31dba <_http_client_read_chuked_entity+0x6a>
   31dac:	687b      	ldr	r3, [r7, #4]
   31dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31db0:	2208      	movs	r2, #8
   31db2:	18ba      	adds	r2, r7, r2
   31db4:	6878      	ldr	r0, [r7, #4]
   31db6:	2103      	movs	r1, #3
   31db8:	4798      	blx	r3
   31dba:	687b      	ldr	r3, [r7, #4]
   31dbc:	2241      	movs	r2, #65	; 0x41
   31dbe:	5c9b      	ldrb	r3, [r3, r2]
   31dc0:	2202      	movs	r2, #2
   31dc2:	4013      	ands	r3, r2
   31dc4:	b2db      	uxtb	r3, r3
   31dc6:	2b00      	cmp	r3, #0
   31dc8:	d105      	bne.n	31dd6 <_http_client_read_chuked_entity+0x86>
   31dca:	687b      	ldr	r3, [r7, #4]
   31dcc:	2100      	movs	r1, #0
   31dce:	0018      	movs	r0, r3
   31dd0:	4b62      	ldr	r3, [pc, #392]	; (31f5c <_http_client_read_chuked_entity+0x20c>)
   31dd2:	4798      	blx	r3
   31dd4:	e0bf      	b.n	31f56 <_http_client_read_chuked_entity+0x206>
   31dd6:	697b      	ldr	r3, [r7, #20]
   31dd8:	1c9a      	adds	r2, r3, #2
   31dda:	687b      	ldr	r3, [r7, #4]
   31ddc:	0011      	movs	r1, r2
   31dde:	0018      	movs	r0, r3
   31de0:	4b5f      	ldr	r3, [pc, #380]	; (31f60 <_http_client_read_chuked_entity+0x210>)
   31de2:	4798      	blx	r3
   31de4:	e0b2      	b.n	31f4c <_http_client_read_chuked_entity+0x1fc>
   31de6:	687b      	ldr	r3, [r7, #4]
   31de8:	22e0      	movs	r2, #224	; 0xe0
   31dea:	589a      	ldr	r2, [r3, r2]
   31dec:	69fb      	ldr	r3, [r7, #28]
   31dee:	429a      	cmp	r2, r3
   31df0:	dd00      	ble.n	31df4 <_http_client_read_chuked_entity+0xa4>
   31df2:	e0ab      	b.n	31f4c <_http_client_read_chuked_entity+0x1fc>
   31df4:	687b      	ldr	r3, [r7, #4]
   31df6:	22e0      	movs	r2, #224	; 0xe0
   31df8:	589b      	ldr	r3, [r3, r2]
   31dfa:	001a      	movs	r2, r3
   31dfc:	2308      	movs	r3, #8
   31dfe:	18fb      	adds	r3, r7, r3
   31e00:	601a      	str	r2, [r3, #0]
   31e02:	2308      	movs	r3, #8
   31e04:	18fb      	adds	r3, r7, r3
   31e06:	697a      	ldr	r2, [r7, #20]
   31e08:	605a      	str	r2, [r3, #4]
   31e0a:	2308      	movs	r3, #8
   31e0c:	18fb      	adds	r3, r7, r3
   31e0e:	2200      	movs	r2, #0
   31e10:	721a      	strb	r2, [r3, #8]
   31e12:	687b      	ldr	r3, [r7, #4]
   31e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31e16:	2b00      	cmp	r3, #0
   31e18:	d006      	beq.n	31e28 <_http_client_read_chuked_entity+0xd8>
   31e1a:	687b      	ldr	r3, [r7, #4]
   31e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31e1e:	2208      	movs	r2, #8
   31e20:	18ba      	adds	r2, r7, r2
   31e22:	6878      	ldr	r0, [r7, #4]
   31e24:	2103      	movs	r1, #3
   31e26:	4798      	blx	r3
   31e28:	687b      	ldr	r3, [r7, #4]
   31e2a:	22e0      	movs	r2, #224	; 0xe0
   31e2c:	589b      	ldr	r3, [r3, r2]
   31e2e:	3302      	adds	r3, #2
   31e30:	697a      	ldr	r2, [r7, #20]
   31e32:	18d2      	adds	r2, r2, r3
   31e34:	687b      	ldr	r3, [r7, #4]
   31e36:	0011      	movs	r1, r2
   31e38:	0018      	movs	r0, r3
   31e3a:	4b49      	ldr	r3, [pc, #292]	; (31f60 <_http_client_read_chuked_entity+0x210>)
   31e3c:	4798      	blx	r3
   31e3e:	687b      	ldr	r3, [r7, #4]
   31e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31e42:	61fb      	str	r3, [r7, #28]
   31e44:	687b      	ldr	r3, [r7, #4]
   31e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31e48:	617b      	str	r3, [r7, #20]
   31e4a:	687b      	ldr	r3, [r7, #4]
   31e4c:	21e0      	movs	r1, #224	; 0xe0
   31e4e:	2201      	movs	r2, #1
   31e50:	4252      	negs	r2, r2
   31e52:	505a      	str	r2, [r3, r1]
   31e54:	e07a      	b.n	31f4c <_http_client_read_chuked_entity+0x1fc>
   31e56:	687b      	ldr	r3, [r7, #4]
   31e58:	22e0      	movs	r2, #224	; 0xe0
   31e5a:	2100      	movs	r1, #0
   31e5c:	5099      	str	r1, [r3, r2]
   31e5e:	e05a      	b.n	31f16 <_http_client_read_chuked_entity+0x1c6>
   31e60:	697b      	ldr	r3, [r7, #20]
   31e62:	781b      	ldrb	r3, [r3, #0]
   31e64:	2b0a      	cmp	r3, #10
   31e66:	d106      	bne.n	31e76 <_http_client_read_chuked_entity+0x126>
   31e68:	697b      	ldr	r3, [r7, #20]
   31e6a:	3301      	adds	r3, #1
   31e6c:	617b      	str	r3, [r7, #20]
   31e6e:	69fb      	ldr	r3, [r7, #28]
   31e70:	3b01      	subs	r3, #1
   31e72:	61fb      	str	r3, [r7, #28]
   31e74:	e052      	b.n	31f1c <_http_client_read_chuked_entity+0x1cc>
   31e76:	69bb      	ldr	r3, [r7, #24]
   31e78:	2b00      	cmp	r3, #0
   31e7a:	d145      	bne.n	31f08 <_http_client_read_chuked_entity+0x1b8>
   31e7c:	697b      	ldr	r3, [r7, #20]
   31e7e:	781b      	ldrb	r3, [r3, #0]
   31e80:	2b2f      	cmp	r3, #47	; 0x2f
   31e82:	d910      	bls.n	31ea6 <_http_client_read_chuked_entity+0x156>
   31e84:	697b      	ldr	r3, [r7, #20]
   31e86:	781b      	ldrb	r3, [r3, #0]
   31e88:	2b39      	cmp	r3, #57	; 0x39
   31e8a:	d80c      	bhi.n	31ea6 <_http_client_read_chuked_entity+0x156>
   31e8c:	687b      	ldr	r3, [r7, #4]
   31e8e:	22e0      	movs	r2, #224	; 0xe0
   31e90:	589b      	ldr	r3, [r3, r2]
   31e92:	011b      	lsls	r3, r3, #4
   31e94:	697a      	ldr	r2, [r7, #20]
   31e96:	7812      	ldrb	r2, [r2, #0]
   31e98:	189b      	adds	r3, r3, r2
   31e9a:	3b30      	subs	r3, #48	; 0x30
   31e9c:	001a      	movs	r2, r3
   31e9e:	687b      	ldr	r3, [r7, #4]
   31ea0:	21e0      	movs	r1, #224	; 0xe0
   31ea2:	505a      	str	r2, [r3, r1]
   31ea4:	e031      	b.n	31f0a <_http_client_read_chuked_entity+0x1ba>
   31ea6:	697b      	ldr	r3, [r7, #20]
   31ea8:	781b      	ldrb	r3, [r3, #0]
   31eaa:	2b60      	cmp	r3, #96	; 0x60
   31eac:	d910      	bls.n	31ed0 <_http_client_read_chuked_entity+0x180>
   31eae:	697b      	ldr	r3, [r7, #20]
   31eb0:	781b      	ldrb	r3, [r3, #0]
   31eb2:	2b66      	cmp	r3, #102	; 0x66
   31eb4:	d80c      	bhi.n	31ed0 <_http_client_read_chuked_entity+0x180>
   31eb6:	687b      	ldr	r3, [r7, #4]
   31eb8:	22e0      	movs	r2, #224	; 0xe0
   31eba:	589b      	ldr	r3, [r3, r2]
   31ebc:	011b      	lsls	r3, r3, #4
   31ebe:	697a      	ldr	r2, [r7, #20]
   31ec0:	7812      	ldrb	r2, [r2, #0]
   31ec2:	189b      	adds	r3, r3, r2
   31ec4:	3b61      	subs	r3, #97	; 0x61
   31ec6:	001a      	movs	r2, r3
   31ec8:	687b      	ldr	r3, [r7, #4]
   31eca:	21e0      	movs	r1, #224	; 0xe0
   31ecc:	505a      	str	r2, [r3, r1]
   31ece:	e01c      	b.n	31f0a <_http_client_read_chuked_entity+0x1ba>
   31ed0:	697b      	ldr	r3, [r7, #20]
   31ed2:	781b      	ldrb	r3, [r3, #0]
   31ed4:	2b40      	cmp	r3, #64	; 0x40
   31ed6:	d910      	bls.n	31efa <_http_client_read_chuked_entity+0x1aa>
   31ed8:	697b      	ldr	r3, [r7, #20]
   31eda:	781b      	ldrb	r3, [r3, #0]
   31edc:	2b46      	cmp	r3, #70	; 0x46
   31ede:	d80c      	bhi.n	31efa <_http_client_read_chuked_entity+0x1aa>
   31ee0:	687b      	ldr	r3, [r7, #4]
   31ee2:	22e0      	movs	r2, #224	; 0xe0
   31ee4:	589b      	ldr	r3, [r3, r2]
   31ee6:	011b      	lsls	r3, r3, #4
   31ee8:	697a      	ldr	r2, [r7, #20]
   31eea:	7812      	ldrb	r2, [r2, #0]
   31eec:	189b      	adds	r3, r3, r2
   31eee:	3b41      	subs	r3, #65	; 0x41
   31ef0:	001a      	movs	r2, r3
   31ef2:	687b      	ldr	r3, [r7, #4]
   31ef4:	21e0      	movs	r1, #224	; 0xe0
   31ef6:	505a      	str	r2, [r3, r1]
   31ef8:	e007      	b.n	31f0a <_http_client_read_chuked_entity+0x1ba>
   31efa:	697b      	ldr	r3, [r7, #20]
   31efc:	781b      	ldrb	r3, [r3, #0]
   31efe:	2b3b      	cmp	r3, #59	; 0x3b
   31f00:	d103      	bne.n	31f0a <_http_client_read_chuked_entity+0x1ba>
   31f02:	2301      	movs	r3, #1
   31f04:	61bb      	str	r3, [r7, #24]
   31f06:	e000      	b.n	31f0a <_http_client_read_chuked_entity+0x1ba>
   31f08:	46c0      	nop			; (mov r8, r8)
   31f0a:	697b      	ldr	r3, [r7, #20]
   31f0c:	3301      	adds	r3, #1
   31f0e:	617b      	str	r3, [r7, #20]
   31f10:	69fb      	ldr	r3, [r7, #28]
   31f12:	3b01      	subs	r3, #1
   31f14:	61fb      	str	r3, [r7, #28]
   31f16:	69fb      	ldr	r3, [r7, #28]
   31f18:	2b00      	cmp	r3, #0
   31f1a:	dca1      	bgt.n	31e60 <_http_client_read_chuked_entity+0x110>
   31f1c:	687b      	ldr	r3, [r7, #4]
   31f1e:	22e0      	movs	r2, #224	; 0xe0
   31f20:	589a      	ldr	r2, [r3, r2]
   31f22:	687b      	ldr	r3, [r7, #4]
   31f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31f26:	429a      	cmp	r2, r3
   31f28:	dd07      	ble.n	31f3a <_http_client_read_chuked_entity+0x1ea>
   31f2a:	238b      	movs	r3, #139	; 0x8b
   31f2c:	425a      	negs	r2, r3
   31f2e:	687b      	ldr	r3, [r7, #4]
   31f30:	0011      	movs	r1, r2
   31f32:	0018      	movs	r0, r3
   31f34:	4b09      	ldr	r3, [pc, #36]	; (31f5c <_http_client_read_chuked_entity+0x20c>)
   31f36:	4798      	blx	r3
   31f38:	e00d      	b.n	31f56 <_http_client_read_chuked_entity+0x206>
   31f3a:	69fb      	ldr	r3, [r7, #28]
   31f3c:	2b00      	cmp	r3, #0
   31f3e:	d105      	bne.n	31f4c <_http_client_read_chuked_entity+0x1fc>
   31f40:	687b      	ldr	r3, [r7, #4]
   31f42:	21e0      	movs	r1, #224	; 0xe0
   31f44:	2201      	movs	r2, #1
   31f46:	4252      	negs	r2, r2
   31f48:	505a      	str	r2, [r3, r1]
   31f4a:	e004      	b.n	31f56 <_http_client_read_chuked_entity+0x206>
   31f4c:	687b      	ldr	r3, [r7, #4]
   31f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31f50:	2b00      	cmp	r3, #0
   31f52:	d000      	beq.n	31f56 <_http_client_read_chuked_entity+0x206>
   31f54:	e708      	b.n	31d68 <_http_client_read_chuked_entity+0x18>
   31f56:	46bd      	mov	sp, r7
   31f58:	b008      	add	sp, #32
   31f5a:	bd80      	pop	{r7, pc}
   31f5c:	00031129 	.word	0x00031129
   31f60:	00032111 	.word	0x00032111

00031f64 <_http_client_handle_entity>:
   31f64:	b580      	push	{r7, lr}
   31f66:	b086      	sub	sp, #24
   31f68:	af00      	add	r7, sp, #0
   31f6a:	6078      	str	r0, [r7, #4]
   31f6c:	687b      	ldr	r3, [r7, #4]
   31f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31f70:	617b      	str	r3, [r7, #20]
   31f72:	687b      	ldr	r3, [r7, #4]
   31f74:	22dc      	movs	r2, #220	; 0xdc
   31f76:	589b      	ldr	r3, [r3, r2]
   31f78:	2b00      	cmp	r3, #0
   31f7a:	db58      	blt.n	3202e <_http_client_handle_entity+0xca>
   31f7c:	687b      	ldr	r3, [r7, #4]
   31f7e:	22dc      	movs	r2, #220	; 0xdc
   31f80:	589a      	ldr	r2, [r3, r2]
   31f82:	687b      	ldr	r3, [r7, #4]
   31f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31f86:	429a      	cmp	r2, r3
   31f88:	dc51      	bgt.n	3202e <_http_client_handle_entity+0xca>
   31f8a:	687b      	ldr	r3, [r7, #4]
   31f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31f8e:	0019      	movs	r1, r3
   31f90:	687b      	ldr	r3, [r7, #4]
   31f92:	22dc      	movs	r2, #220	; 0xdc
   31f94:	589b      	ldr	r3, [r3, r2]
   31f96:	4299      	cmp	r1, r3
   31f98:	da00      	bge.n	31f9c <_http_client_handle_entity+0x38>
   31f9a:	e0a9      	b.n	320f0 <_http_client_handle_entity+0x18c>
   31f9c:	687b      	ldr	r3, [r7, #4]
   31f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31fa0:	2b00      	cmp	r3, #0
   31fa2:	d020      	beq.n	31fe6 <_http_client_handle_entity+0x82>
   31fa4:	687b      	ldr	r3, [r7, #4]
   31fa6:	22e4      	movs	r2, #228	; 0xe4
   31fa8:	5a9b      	ldrh	r3, [r3, r2]
   31faa:	2b00      	cmp	r3, #0
   31fac:	d01b      	beq.n	31fe6 <_http_client_handle_entity+0x82>
   31fae:	687b      	ldr	r3, [r7, #4]
   31fb0:	22e4      	movs	r2, #228	; 0xe4
   31fb2:	5a9a      	ldrh	r2, [r3, r2]
   31fb4:	2308      	movs	r3, #8
   31fb6:	18fb      	adds	r3, r7, r3
   31fb8:	801a      	strh	r2, [r3, #0]
   31fba:	2308      	movs	r3, #8
   31fbc:	18fb      	adds	r3, r7, r3
   31fbe:	2200      	movs	r2, #0
   31fc0:	709a      	strb	r2, [r3, #2]
   31fc2:	687b      	ldr	r3, [r7, #4]
   31fc4:	22dc      	movs	r2, #220	; 0xdc
   31fc6:	589b      	ldr	r3, [r3, r2]
   31fc8:	001a      	movs	r2, r3
   31fca:	2308      	movs	r3, #8
   31fcc:	18fb      	adds	r3, r7, r3
   31fce:	605a      	str	r2, [r3, #4]
   31fd0:	2308      	movs	r3, #8
   31fd2:	18fb      	adds	r3, r7, r3
   31fd4:	697a      	ldr	r2, [r7, #20]
   31fd6:	609a      	str	r2, [r3, #8]
   31fd8:	687b      	ldr	r3, [r7, #4]
   31fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31fdc:	2208      	movs	r2, #8
   31fde:	18ba      	adds	r2, r7, r2
   31fe0:	6878      	ldr	r0, [r7, #4]
   31fe2:	2102      	movs	r1, #2
   31fe4:	4798      	blx	r3
   31fe6:	687b      	ldr	r3, [r7, #4]
   31fe8:	22d8      	movs	r2, #216	; 0xd8
   31fea:	2100      	movs	r1, #0
   31fec:	5099      	str	r1, [r3, r2]
   31fee:	687b      	ldr	r3, [r7, #4]
   31ff0:	22e4      	movs	r2, #228	; 0xe4
   31ff2:	2100      	movs	r1, #0
   31ff4:	5299      	strh	r1, [r3, r2]
   31ff6:	687b      	ldr	r3, [r7, #4]
   31ff8:	2241      	movs	r2, #65	; 0x41
   31ffa:	5c9b      	ldrb	r3, [r3, r2]
   31ffc:	2202      	movs	r2, #2
   31ffe:	4013      	ands	r3, r2
   32000:	b2db      	uxtb	r3, r3
   32002:	2b00      	cmp	r3, #0
   32004:	d105      	bne.n	32012 <_http_client_handle_entity+0xae>
   32006:	687b      	ldr	r3, [r7, #4]
   32008:	2100      	movs	r1, #0
   3200a:	0018      	movs	r0, r3
   3200c:	4b3b      	ldr	r3, [pc, #236]	; (320fc <_http_client_handle_entity+0x198>)
   3200e:	4798      	blx	r3
   32010:	e06e      	b.n	320f0 <_http_client_handle_entity+0x18c>
   32012:	687b      	ldr	r3, [r7, #4]
   32014:	22dc      	movs	r2, #220	; 0xdc
   32016:	589b      	ldr	r3, [r3, r2]
   32018:	001a      	movs	r2, r3
   3201a:	697b      	ldr	r3, [r7, #20]
   3201c:	189a      	adds	r2, r3, r2
   3201e:	687b      	ldr	r3, [r7, #4]
   32020:	0011      	movs	r1, r2
   32022:	0018      	movs	r0, r3
   32024:	4b36      	ldr	r3, [pc, #216]	; (32100 <_http_client_handle_entity+0x19c>)
   32026:	4798      	blx	r3
   32028:	687b      	ldr	r3, [r7, #4]
   3202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3202c:	e061      	b.n	320f2 <_http_client_handle_entity+0x18e>
   3202e:	687b      	ldr	r3, [r7, #4]
   32030:	22dc      	movs	r2, #220	; 0xdc
   32032:	589b      	ldr	r3, [r3, r2]
   32034:	2b00      	cmp	r3, #0
   32036:	db57      	blt.n	320e8 <_http_client_handle_entity+0x184>
   32038:	687b      	ldr	r3, [r7, #4]
   3203a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3203c:	2308      	movs	r3, #8
   3203e:	18fb      	adds	r3, r7, r3
   32040:	601a      	str	r2, [r3, #0]
   32042:	2308      	movs	r3, #8
   32044:	18fb      	adds	r3, r7, r3
   32046:	697a      	ldr	r2, [r7, #20]
   32048:	605a      	str	r2, [r3, #4]
   3204a:	687b      	ldr	r3, [r7, #4]
   3204c:	22e0      	movs	r2, #224	; 0xe0
   3204e:	589a      	ldr	r2, [r3, r2]
   32050:	687b      	ldr	r3, [r7, #4]
   32052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32054:	18d2      	adds	r2, r2, r3
   32056:	687b      	ldr	r3, [r7, #4]
   32058:	21e0      	movs	r1, #224	; 0xe0
   3205a:	505a      	str	r2, [r3, r1]
   3205c:	687b      	ldr	r3, [r7, #4]
   3205e:	22dc      	movs	r2, #220	; 0xdc
   32060:	589a      	ldr	r2, [r3, r2]
   32062:	687b      	ldr	r3, [r7, #4]
   32064:	21e0      	movs	r1, #224	; 0xe0
   32066:	585b      	ldr	r3, [r3, r1]
   32068:	429a      	cmp	r2, r3
   3206a:	dc0c      	bgt.n	32086 <_http_client_handle_entity+0x122>
   3206c:	687b      	ldr	r3, [r7, #4]
   3206e:	22d8      	movs	r2, #216	; 0xd8
   32070:	2100      	movs	r1, #0
   32072:	5099      	str	r1, [r3, r2]
   32074:	687b      	ldr	r3, [r7, #4]
   32076:	22e4      	movs	r2, #228	; 0xe4
   32078:	2100      	movs	r1, #0
   3207a:	5299      	strh	r1, [r3, r2]
   3207c:	2308      	movs	r3, #8
   3207e:	18fb      	adds	r3, r7, r3
   32080:	2201      	movs	r2, #1
   32082:	721a      	strb	r2, [r3, #8]
   32084:	e003      	b.n	3208e <_http_client_handle_entity+0x12a>
   32086:	2308      	movs	r3, #8
   32088:	18fb      	adds	r3, r7, r3
   3208a:	2200      	movs	r2, #0
   3208c:	721a      	strb	r2, [r3, #8]
   3208e:	687b      	ldr	r3, [r7, #4]
   32090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32092:	2b00      	cmp	r3, #0
   32094:	d006      	beq.n	320a4 <_http_client_handle_entity+0x140>
   32096:	687b      	ldr	r3, [r7, #4]
   32098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3209a:	2208      	movs	r2, #8
   3209c:	18ba      	adds	r2, r7, r2
   3209e:	6878      	ldr	r0, [r7, #4]
   320a0:	2103      	movs	r1, #3
   320a2:	4798      	blx	r3
   320a4:	2308      	movs	r3, #8
   320a6:	18fb      	adds	r3, r7, r3
   320a8:	7a1b      	ldrb	r3, [r3, #8]
   320aa:	2b01      	cmp	r3, #1
   320ac:	d112      	bne.n	320d4 <_http_client_handle_entity+0x170>
   320ae:	687b      	ldr	r3, [r7, #4]
   320b0:	2241      	movs	r2, #65	; 0x41
   320b2:	5c9b      	ldrb	r3, [r3, r2]
   320b4:	2202      	movs	r2, #2
   320b6:	4013      	ands	r3, r2
   320b8:	b2db      	uxtb	r3, r3
   320ba:	2b00      	cmp	r3, #0
   320bc:	d10a      	bne.n	320d4 <_http_client_handle_entity+0x170>
   320be:	4b11      	ldr	r3, [pc, #68]	; (32104 <_http_client_handle_entity+0x1a0>)
   320c0:	0018      	movs	r0, r3
   320c2:	4b11      	ldr	r3, [pc, #68]	; (32108 <_http_client_handle_entity+0x1a4>)
   320c4:	4798      	blx	r3
   320c6:	687b      	ldr	r3, [r7, #4]
   320c8:	2100      	movs	r1, #0
   320ca:	0018      	movs	r0, r3
   320cc:	4b0b      	ldr	r3, [pc, #44]	; (320fc <_http_client_handle_entity+0x198>)
   320ce:	4798      	blx	r3
   320d0:	2300      	movs	r3, #0
   320d2:	e00e      	b.n	320f2 <_http_client_handle_entity+0x18e>
   320d4:	687b      	ldr	r3, [r7, #4]
   320d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   320d8:	697a      	ldr	r2, [r7, #20]
   320da:	18d2      	adds	r2, r2, r3
   320dc:	687b      	ldr	r3, [r7, #4]
   320de:	0011      	movs	r1, r2
   320e0:	0018      	movs	r0, r3
   320e2:	4b07      	ldr	r3, [pc, #28]	; (32100 <_http_client_handle_entity+0x19c>)
   320e4:	4798      	blx	r3
   320e6:	e003      	b.n	320f0 <_http_client_handle_entity+0x18c>
   320e8:	687b      	ldr	r3, [r7, #4]
   320ea:	0018      	movs	r0, r3
   320ec:	4b07      	ldr	r3, [pc, #28]	; (3210c <_http_client_handle_entity+0x1a8>)
   320ee:	4798      	blx	r3
   320f0:	2300      	movs	r3, #0
   320f2:	0018      	movs	r0, r3
   320f4:	46bd      	mov	sp, r7
   320f6:	b006      	add	sp, #24
   320f8:	bd80      	pop	{r7, pc}
   320fa:	46c0      	nop			; (mov r8, r8)
   320fc:	00031129 	.word	0x00031129
   32100:	00032111 	.word	0x00032111
   32104:	00039af4 	.word	0x00039af4
   32108:	00034ac1 	.word	0x00034ac1
   3210c:	00031d51 	.word	0x00031d51

00032110 <_http_client_move_buffer>:
   32110:	b580      	push	{r7, lr}
   32112:	b084      	sub	sp, #16
   32114:	af00      	add	r7, sp, #0
   32116:	6078      	str	r0, [r7, #4]
   32118:	6039      	str	r1, [r7, #0]
   3211a:	687b      	ldr	r3, [r7, #4]
   3211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3211e:	60fb      	str	r3, [r7, #12]
   32120:	687b      	ldr	r3, [r7, #4]
   32122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32124:	001a      	movs	r2, r3
   32126:	683b      	ldr	r3, [r7, #0]
   32128:	1ad2      	subs	r2, r2, r3
   3212a:	68fb      	ldr	r3, [r7, #12]
   3212c:	18d3      	adds	r3, r2, r3
   3212e:	60bb      	str	r3, [r7, #8]
   32130:	68bb      	ldr	r3, [r7, #8]
   32132:	2b00      	cmp	r3, #0
   32134:	dd09      	ble.n	3214a <_http_client_move_buffer+0x3a>
   32136:	68ba      	ldr	r2, [r7, #8]
   32138:	6839      	ldr	r1, [r7, #0]
   3213a:	68fb      	ldr	r3, [r7, #12]
   3213c:	0018      	movs	r0, r3
   3213e:	4b06      	ldr	r3, [pc, #24]	; (32158 <_http_client_move_buffer+0x48>)
   32140:	4798      	blx	r3
   32142:	68ba      	ldr	r2, [r7, #8]
   32144:	687b      	ldr	r3, [r7, #4]
   32146:	645a      	str	r2, [r3, #68]	; 0x44
   32148:	e002      	b.n	32150 <_http_client_move_buffer+0x40>
   3214a:	687b      	ldr	r3, [r7, #4]
   3214c:	2200      	movs	r2, #0
   3214e:	645a      	str	r2, [r3, #68]	; 0x44
   32150:	46c0      	nop			; (mov r8, r8)
   32152:	46bd      	mov	sp, r7
   32154:	b004      	add	sp, #16
   32156:	bd80      	pop	{r7, pc}
   32158:	0003487b 	.word	0x0003487b

0003215c <stream_writer_init>:
   3215c:	b580      	push	{r7, lr}
   3215e:	b084      	sub	sp, #16
   32160:	af00      	add	r7, sp, #0
   32162:	60f8      	str	r0, [r7, #12]
   32164:	60b9      	str	r1, [r7, #8]
   32166:	607a      	str	r2, [r7, #4]
   32168:	603b      	str	r3, [r7, #0]
   3216a:	68fb      	ldr	r3, [r7, #12]
   3216c:	687a      	ldr	r2, [r7, #4]
   3216e:	601a      	str	r2, [r3, #0]
   32170:	68fb      	ldr	r3, [r7, #12]
   32172:	68ba      	ldr	r2, [r7, #8]
   32174:	611a      	str	r2, [r3, #16]
   32176:	68fb      	ldr	r3, [r7, #12]
   32178:	2200      	movs	r2, #0
   3217a:	605a      	str	r2, [r3, #4]
   3217c:	68fb      	ldr	r3, [r7, #12]
   3217e:	683a      	ldr	r2, [r7, #0]
   32180:	609a      	str	r2, [r3, #8]
   32182:	68fb      	ldr	r3, [r7, #12]
   32184:	69ba      	ldr	r2, [r7, #24]
   32186:	60da      	str	r2, [r3, #12]
   32188:	46c0      	nop			; (mov r8, r8)
   3218a:	46bd      	mov	sp, r7
   3218c:	b004      	add	sp, #16
   3218e:	bd80      	pop	{r7, pc}

00032190 <stream_writer_send_8>:
   32190:	b580      	push	{r7, lr}
   32192:	b084      	sub	sp, #16
   32194:	af00      	add	r7, sp, #0
   32196:	6078      	str	r0, [r7, #4]
   32198:	000a      	movs	r2, r1
   3219a:	1cfb      	adds	r3, r7, #3
   3219c:	701a      	strb	r2, [r3, #0]
   3219e:	687b      	ldr	r3, [r7, #4]
   321a0:	681a      	ldr	r2, [r3, #0]
   321a2:	687b      	ldr	r3, [r7, #4]
   321a4:	685b      	ldr	r3, [r3, #4]
   321a6:	1ad3      	subs	r3, r2, r3
   321a8:	60fb      	str	r3, [r7, #12]
   321aa:	68fb      	ldr	r3, [r7, #12]
   321ac:	2b00      	cmp	r3, #0
   321ae:	dc03      	bgt.n	321b8 <stream_writer_send_8+0x28>
   321b0:	687b      	ldr	r3, [r7, #4]
   321b2:	0018      	movs	r0, r3
   321b4:	4b08      	ldr	r3, [pc, #32]	; (321d8 <stream_writer_send_8+0x48>)
   321b6:	4798      	blx	r3
   321b8:	687b      	ldr	r3, [r7, #4]
   321ba:	6919      	ldr	r1, [r3, #16]
   321bc:	687b      	ldr	r3, [r7, #4]
   321be:	685b      	ldr	r3, [r3, #4]
   321c0:	1c58      	adds	r0, r3, #1
   321c2:	687a      	ldr	r2, [r7, #4]
   321c4:	6050      	str	r0, [r2, #4]
   321c6:	18cb      	adds	r3, r1, r3
   321c8:	1cfa      	adds	r2, r7, #3
   321ca:	7812      	ldrb	r2, [r2, #0]
   321cc:	701a      	strb	r2, [r3, #0]
   321ce:	46c0      	nop			; (mov r8, r8)
   321d0:	46bd      	mov	sp, r7
   321d2:	b004      	add	sp, #16
   321d4:	bd80      	pop	{r7, pc}
   321d6:	46c0      	nop			; (mov r8, r8)
   321d8:	00032219 	.word	0x00032219

000321dc <stream_writer_send_buffer>:
   321dc:	b580      	push	{r7, lr}
   321de:	b084      	sub	sp, #16
   321e0:	af00      	add	r7, sp, #0
   321e2:	60f8      	str	r0, [r7, #12]
   321e4:	60b9      	str	r1, [r7, #8]
   321e6:	607a      	str	r2, [r7, #4]
   321e8:	e00d      	b.n	32206 <stream_writer_send_buffer+0x2a>
   321ea:	68bb      	ldr	r3, [r7, #8]
   321ec:	781b      	ldrb	r3, [r3, #0]
   321ee:	b25a      	sxtb	r2, r3
   321f0:	68fb      	ldr	r3, [r7, #12]
   321f2:	0011      	movs	r1, r2
   321f4:	0018      	movs	r0, r3
   321f6:	4b07      	ldr	r3, [pc, #28]	; (32214 <stream_writer_send_buffer+0x38>)
   321f8:	4798      	blx	r3
   321fa:	687b      	ldr	r3, [r7, #4]
   321fc:	3b01      	subs	r3, #1
   321fe:	607b      	str	r3, [r7, #4]
   32200:	68bb      	ldr	r3, [r7, #8]
   32202:	3301      	adds	r3, #1
   32204:	60bb      	str	r3, [r7, #8]
   32206:	687b      	ldr	r3, [r7, #4]
   32208:	2b00      	cmp	r3, #0
   3220a:	d1ee      	bne.n	321ea <stream_writer_send_buffer+0xe>
   3220c:	46c0      	nop			; (mov r8, r8)
   3220e:	46bd      	mov	sp, r7
   32210:	b004      	add	sp, #16
   32212:	bd80      	pop	{r7, pc}
   32214:	00032191 	.word	0x00032191

00032218 <stream_writer_send_remain>:
   32218:	b590      	push	{r4, r7, lr}
   3221a:	b083      	sub	sp, #12
   3221c:	af00      	add	r7, sp, #0
   3221e:	6078      	str	r0, [r7, #4]
   32220:	687b      	ldr	r3, [r7, #4]
   32222:	685b      	ldr	r3, [r3, #4]
   32224:	2b00      	cmp	r3, #0
   32226:	d00c      	beq.n	32242 <stream_writer_send_remain+0x2a>
   32228:	687b      	ldr	r3, [r7, #4]
   3222a:	689c      	ldr	r4, [r3, #8]
   3222c:	687b      	ldr	r3, [r7, #4]
   3222e:	68d8      	ldr	r0, [r3, #12]
   32230:	687b      	ldr	r3, [r7, #4]
   32232:	6919      	ldr	r1, [r3, #16]
   32234:	687b      	ldr	r3, [r7, #4]
   32236:	685b      	ldr	r3, [r3, #4]
   32238:	001a      	movs	r2, r3
   3223a:	47a0      	blx	r4
   3223c:	687b      	ldr	r3, [r7, #4]
   3223e:	2200      	movs	r2, #0
   32240:	605a      	str	r2, [r3, #4]
   32242:	46c0      	nop			; (mov r8, r8)
   32244:	46bd      	mov	sp, r7
   32246:	b003      	add	sp, #12
   32248:	bd90      	pop	{r4, r7, pc}
	...

0003224c <system_cpu_clock_get_hz>:
   3224c:	b580      	push	{r7, lr}
   3224e:	af00      	add	r7, sp, #0
   32250:	2000      	movs	r0, #0
   32252:	4b05      	ldr	r3, [pc, #20]	; (32268 <system_cpu_clock_get_hz+0x1c>)
   32254:	4798      	blx	r3
   32256:	0002      	movs	r2, r0
   32258:	4b04      	ldr	r3, [pc, #16]	; (3226c <system_cpu_clock_get_hz+0x20>)
   3225a:	7a1b      	ldrb	r3, [r3, #8]
   3225c:	b2db      	uxtb	r3, r3
   3225e:	40da      	lsrs	r2, r3
   32260:	0013      	movs	r3, r2
   32262:	0018      	movs	r0, r3
   32264:	46bd      	mov	sp, r7
   32266:	bd80      	pop	{r7, pc}
   32268:	00029c85 	.word	0x00029c85
   3226c:	40000400 	.word	0x40000400

00032270 <tcc_enable>:
   32270:	b580      	push	{r7, lr}
   32272:	b084      	sub	sp, #16
   32274:	af00      	add	r7, sp, #0
   32276:	6078      	str	r0, [r7, #4]
   32278:	687b      	ldr	r3, [r7, #4]
   3227a:	681b      	ldr	r3, [r3, #0]
   3227c:	60fb      	str	r3, [r7, #12]
   3227e:	46c0      	nop			; (mov r8, r8)
   32280:	68fb      	ldr	r3, [r7, #12]
   32282:	689b      	ldr	r3, [r3, #8]
   32284:	2202      	movs	r2, #2
   32286:	4013      	ands	r3, r2
   32288:	d1fa      	bne.n	32280 <tcc_enable+0x10>
   3228a:	68fb      	ldr	r3, [r7, #12]
   3228c:	681b      	ldr	r3, [r3, #0]
   3228e:	2202      	movs	r2, #2
   32290:	431a      	orrs	r2, r3
   32292:	68fb      	ldr	r3, [r7, #12]
   32294:	601a      	str	r2, [r3, #0]
   32296:	46c0      	nop			; (mov r8, r8)
   32298:	46bd      	mov	sp, r7
   3229a:	b004      	add	sp, #16
   3229c:	bd80      	pop	{r7, pc}
	...

000322a0 <sw_timer_tcc_callback>:
   322a0:	b580      	push	{r7, lr}
   322a2:	b082      	sub	sp, #8
   322a4:	af00      	add	r7, sp, #0
   322a6:	6078      	str	r0, [r7, #4]
   322a8:	4b04      	ldr	r3, [pc, #16]	; (322bc <sw_timer_tcc_callback+0x1c>)
   322aa:	681b      	ldr	r3, [r3, #0]
   322ac:	1c5a      	adds	r2, r3, #1
   322ae:	4b03      	ldr	r3, [pc, #12]	; (322bc <sw_timer_tcc_callback+0x1c>)
   322b0:	601a      	str	r2, [r3, #0]
   322b2:	46c0      	nop			; (mov r8, r8)
   322b4:	46bd      	mov	sp, r7
   322b6:	b002      	add	sp, #8
   322b8:	bd80      	pop	{r7, pc}
   322ba:	46c0      	nop			; (mov r8, r8)
   322bc:	200042fc 	.word	0x200042fc

000322c0 <sw_timer_get_config_defaults>:
   322c0:	b580      	push	{r7, lr}
   322c2:	b082      	sub	sp, #8
   322c4:	af00      	add	r7, sp, #0
   322c6:	6078      	str	r0, [r7, #4]
   322c8:	687b      	ldr	r3, [r7, #4]
   322ca:	2264      	movs	r2, #100	; 0x64
   322cc:	805a      	strh	r2, [r3, #2]
   322ce:	687b      	ldr	r3, [r7, #4]
   322d0:	2200      	movs	r2, #0
   322d2:	701a      	strb	r2, [r3, #0]
   322d4:	687b      	ldr	r3, [r7, #4]
   322d6:	2200      	movs	r2, #0
   322d8:	705a      	strb	r2, [r3, #1]
   322da:	46c0      	nop			; (mov r8, r8)
   322dc:	46bd      	mov	sp, r7
   322de:	b002      	add	sp, #8
   322e0:	bd80      	pop	{r7, pc}
	...

000322e4 <sw_timer_init>:
   322e4:	b590      	push	{r4, r7, lr}
   322e6:	b0b1      	sub	sp, #196	; 0xc4
   322e8:	af00      	add	r7, sp, #0
   322ea:	6078      	str	r0, [r7, #4]
   322ec:	6039      	str	r1, [r7, #0]
   322ee:	230c      	movs	r3, #12
   322f0:	18fb      	adds	r3, r7, r3
   322f2:	4a2e      	ldr	r2, [pc, #184]	; (323ac <sw_timer_init+0xc8>)
   322f4:	ca13      	ldmia	r2!, {r0, r1, r4}
   322f6:	c313      	stmia	r3!, {r0, r1, r4}
   322f8:	683b      	ldr	r3, [r7, #0]
   322fa:	885b      	ldrh	r3, [r3, #2]
   322fc:	001a      	movs	r2, r3
   322fe:	687b      	ldr	r3, [r7, #4]
   32300:	655a      	str	r2, [r3, #84]	; 0x54
   32302:	687b      	ldr	r3, [r7, #4]
   32304:	3314      	adds	r3, #20
   32306:	22bc      	movs	r2, #188	; 0xbc
   32308:	18ba      	adds	r2, r7, r2
   3230a:	6013      	str	r3, [r2, #0]
   3230c:	683b      	ldr	r3, [r7, #0]
   3230e:	781b      	ldrb	r3, [r3, #0]
   32310:	001a      	movs	r2, r3
   32312:	230c      	movs	r3, #12
   32314:	18fb      	adds	r3, r7, r3
   32316:	0092      	lsls	r2, r2, #2
   32318:	58d2      	ldr	r2, [r2, r3]
   3231a:	2318      	movs	r3, #24
   3231c:	18fb      	adds	r3, r7, r3
   3231e:	0011      	movs	r1, r2
   32320:	0018      	movs	r0, r3
   32322:	4b23      	ldr	r3, [pc, #140]	; (323b0 <sw_timer_init+0xcc>)
   32324:	4798      	blx	r3
   32326:	4b23      	ldr	r3, [pc, #140]	; (323b4 <sw_timer_init+0xd0>)
   32328:	4798      	blx	r3
   3232a:	0004      	movs	r4, r0
   3232c:	683b      	ldr	r3, [r7, #0]
   3232e:	885b      	ldrh	r3, [r3, #2]
   32330:	001a      	movs	r2, r3
   32332:	4b21      	ldr	r3, [pc, #132]	; (323b8 <sw_timer_init+0xd4>)
   32334:	0011      	movs	r1, r2
   32336:	22fa      	movs	r2, #250	; 0xfa
   32338:	0210      	lsls	r0, r2, #8
   3233a:	4798      	blx	r3
   3233c:	0003      	movs	r3, r0
   3233e:	001a      	movs	r2, r3
   32340:	4b1e      	ldr	r3, [pc, #120]	; (323bc <sw_timer_init+0xd8>)
   32342:	0011      	movs	r1, r2
   32344:	0020      	movs	r0, r4
   32346:	4798      	blx	r3
   32348:	0003      	movs	r3, r0
   3234a:	001a      	movs	r2, r3
   3234c:	2318      	movs	r3, #24
   3234e:	18fb      	adds	r3, r7, r3
   32350:	605a      	str	r2, [r3, #4]
   32352:	2318      	movs	r3, #24
   32354:	18fb      	adds	r3, r7, r3
   32356:	2205      	movs	r2, #5
   32358:	72da      	strb	r2, [r3, #11]
   3235a:	683b      	ldr	r3, [r7, #0]
   3235c:	781b      	ldrb	r3, [r3, #0]
   3235e:	001a      	movs	r2, r3
   32360:	230c      	movs	r3, #12
   32362:	18fb      	adds	r3, r7, r3
   32364:	0092      	lsls	r2, r2, #2
   32366:	58d1      	ldr	r1, [r2, r3]
   32368:	2318      	movs	r3, #24
   3236a:	18fa      	adds	r2, r7, r3
   3236c:	23bc      	movs	r3, #188	; 0xbc
   3236e:	18fb      	adds	r3, r7, r3
   32370:	681b      	ldr	r3, [r3, #0]
   32372:	0018      	movs	r0, r3
   32374:	4b12      	ldr	r3, [pc, #72]	; (323c0 <sw_timer_init+0xdc>)
   32376:	4798      	blx	r3
   32378:	683b      	ldr	r3, [r7, #0]
   3237a:	785b      	ldrb	r3, [r3, #1]
   3237c:	3308      	adds	r3, #8
   3237e:	b2da      	uxtb	r2, r3
   32380:	4910      	ldr	r1, [pc, #64]	; (323c4 <sw_timer_init+0xe0>)
   32382:	23bc      	movs	r3, #188	; 0xbc
   32384:	18fb      	adds	r3, r7, r3
   32386:	681b      	ldr	r3, [r3, #0]
   32388:	0018      	movs	r0, r3
   3238a:	4b0f      	ldr	r3, [pc, #60]	; (323c8 <sw_timer_init+0xe4>)
   3238c:	4798      	blx	r3
   3238e:	683b      	ldr	r3, [r7, #0]
   32390:	785b      	ldrb	r3, [r3, #1]
   32392:	3308      	adds	r3, #8
   32394:	b2da      	uxtb	r2, r3
   32396:	23bc      	movs	r3, #188	; 0xbc
   32398:	18fb      	adds	r3, r7, r3
   3239a:	681b      	ldr	r3, [r3, #0]
   3239c:	0011      	movs	r1, r2
   3239e:	0018      	movs	r0, r3
   323a0:	4b0a      	ldr	r3, [pc, #40]	; (323cc <sw_timer_init+0xe8>)
   323a2:	4798      	blx	r3
   323a4:	46c0      	nop			; (mov r8, r8)
   323a6:	46bd      	mov	sp, r7
   323a8:	b031      	add	sp, #196	; 0xc4
   323aa:	bd90      	pop	{r4, r7, pc}
   323ac:	00039b34 	.word	0x00039b34
   323b0:	0002a21d 	.word	0x0002a21d
   323b4:	0003224d 	.word	0x0003224d
   323b8:	000329d9 	.word	0x000329d9
   323bc:	000328c5 	.word	0x000328c5
   323c0:	0002a879 	.word	0x0002a879
   323c4:	000322a1 	.word	0x000322a1
   323c8:	0002ac91 	.word	0x0002ac91
   323cc:	0002acd1 	.word	0x0002acd1

000323d0 <sw_timer_enable>:
   323d0:	b580      	push	{r7, lr}
   323d2:	b084      	sub	sp, #16
   323d4:	af00      	add	r7, sp, #0
   323d6:	6078      	str	r0, [r7, #4]
   323d8:	687b      	ldr	r3, [r7, #4]
   323da:	3314      	adds	r3, #20
   323dc:	60fb      	str	r3, [r7, #12]
   323de:	68fb      	ldr	r3, [r7, #12]
   323e0:	0018      	movs	r0, r3
   323e2:	4b03      	ldr	r3, [pc, #12]	; (323f0 <sw_timer_enable+0x20>)
   323e4:	4798      	blx	r3
   323e6:	46c0      	nop			; (mov r8, r8)
   323e8:	46bd      	mov	sp, r7
   323ea:	b004      	add	sp, #16
   323ec:	bd80      	pop	{r7, pc}
   323ee:	46c0      	nop			; (mov r8, r8)
   323f0:	00032271 	.word	0x00032271

000323f4 <sw_timer_register_callback>:
   323f4:	b580      	push	{r7, lr}
   323f6:	b086      	sub	sp, #24
   323f8:	af00      	add	r7, sp, #0
   323fa:	60f8      	str	r0, [r7, #12]
   323fc:	60b9      	str	r1, [r7, #8]
   323fe:	607a      	str	r2, [r7, #4]
   32400:	603b      	str	r3, [r7, #0]
   32402:	2300      	movs	r3, #0
   32404:	617b      	str	r3, [r7, #20]
   32406:	e032      	b.n	3246e <sw_timer_register_callback+0x7a>
   32408:	68f9      	ldr	r1, [r7, #12]
   3240a:	697a      	ldr	r2, [r7, #20]
   3240c:	0013      	movs	r3, r2
   3240e:	009b      	lsls	r3, r3, #2
   32410:	189b      	adds	r3, r3, r2
   32412:	009b      	lsls	r3, r3, #2
   32414:	5c5b      	ldrb	r3, [r3, r1]
   32416:	07db      	lsls	r3, r3, #31
   32418:	0fdb      	lsrs	r3, r3, #31
   3241a:	b2db      	uxtb	r3, r3
   3241c:	2b00      	cmp	r3, #0
   3241e:	d123      	bne.n	32468 <sw_timer_register_callback+0x74>
   32420:	697a      	ldr	r2, [r7, #20]
   32422:	0013      	movs	r3, r2
   32424:	009b      	lsls	r3, r3, #2
   32426:	189b      	adds	r3, r3, r2
   32428:	009b      	lsls	r3, r3, #2
   3242a:	68fa      	ldr	r2, [r7, #12]
   3242c:	18d3      	adds	r3, r2, r3
   3242e:	613b      	str	r3, [r7, #16]
   32430:	693b      	ldr	r3, [r7, #16]
   32432:	68ba      	ldr	r2, [r7, #8]
   32434:	605a      	str	r2, [r3, #4]
   32436:	693b      	ldr	r3, [r7, #16]
   32438:	781a      	ldrb	r2, [r3, #0]
   3243a:	2102      	movs	r1, #2
   3243c:	438a      	bics	r2, r1
   3243e:	701a      	strb	r2, [r3, #0]
   32440:	693b      	ldr	r3, [r7, #16]
   32442:	687a      	ldr	r2, [r7, #4]
   32444:	609a      	str	r2, [r3, #8]
   32446:	68fb      	ldr	r3, [r7, #12]
   32448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3244a:	4b0d      	ldr	r3, [pc, #52]	; (32480 <sw_timer_register_callback+0x8c>)
   3244c:	0011      	movs	r1, r2
   3244e:	6838      	ldr	r0, [r7, #0]
   32450:	4798      	blx	r3
   32452:	0003      	movs	r3, r0
   32454:	001a      	movs	r2, r3
   32456:	693b      	ldr	r3, [r7, #16]
   32458:	60da      	str	r2, [r3, #12]
   3245a:	693b      	ldr	r3, [r7, #16]
   3245c:	781a      	ldrb	r2, [r3, #0]
   3245e:	2101      	movs	r1, #1
   32460:	430a      	orrs	r2, r1
   32462:	701a      	strb	r2, [r3, #0]
   32464:	697b      	ldr	r3, [r7, #20]
   32466:	e007      	b.n	32478 <sw_timer_register_callback+0x84>
   32468:	697b      	ldr	r3, [r7, #20]
   3246a:	3301      	adds	r3, #1
   3246c:	617b      	str	r3, [r7, #20]
   3246e:	697b      	ldr	r3, [r7, #20]
   32470:	2b00      	cmp	r3, #0
   32472:	ddc9      	ble.n	32408 <sw_timer_register_callback+0x14>
   32474:	2301      	movs	r3, #1
   32476:	425b      	negs	r3, r3
   32478:	0018      	movs	r0, r3
   3247a:	46bd      	mov	sp, r7
   3247c:	b006      	add	sp, #24
   3247e:	bd80      	pop	{r7, pc}
   32480:	000328c5 	.word	0x000328c5

00032484 <sw_timer_enable_callback>:
   32484:	b580      	push	{r7, lr}
   32486:	b086      	sub	sp, #24
   32488:	af00      	add	r7, sp, #0
   3248a:	60f8      	str	r0, [r7, #12]
   3248c:	60b9      	str	r1, [r7, #8]
   3248e:	607a      	str	r2, [r7, #4]
   32490:	68ba      	ldr	r2, [r7, #8]
   32492:	0013      	movs	r3, r2
   32494:	009b      	lsls	r3, r3, #2
   32496:	189b      	adds	r3, r3, r2
   32498:	009b      	lsls	r3, r3, #2
   3249a:	68fa      	ldr	r2, [r7, #12]
   3249c:	18d3      	adds	r3, r2, r3
   3249e:	617b      	str	r3, [r7, #20]
   324a0:	697b      	ldr	r3, [r7, #20]
   324a2:	781a      	ldrb	r2, [r3, #0]
   324a4:	2102      	movs	r1, #2
   324a6:	430a      	orrs	r2, r1
   324a8:	701a      	strb	r2, [r3, #0]
   324aa:	68fb      	ldr	r3, [r7, #12]
   324ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   324ae:	4b07      	ldr	r3, [pc, #28]	; (324cc <sw_timer_enable_callback+0x48>)
   324b0:	0011      	movs	r1, r2
   324b2:	6878      	ldr	r0, [r7, #4]
   324b4:	4798      	blx	r3
   324b6:	0003      	movs	r3, r0
   324b8:	001a      	movs	r2, r3
   324ba:	4b05      	ldr	r3, [pc, #20]	; (324d0 <sw_timer_enable_callback+0x4c>)
   324bc:	681b      	ldr	r3, [r3, #0]
   324be:	18d2      	adds	r2, r2, r3
   324c0:	697b      	ldr	r3, [r7, #20]
   324c2:	611a      	str	r2, [r3, #16]
   324c4:	46c0      	nop			; (mov r8, r8)
   324c6:	46bd      	mov	sp, r7
   324c8:	b006      	add	sp, #24
   324ca:	bd80      	pop	{r7, pc}
   324cc:	000328c5 	.word	0x000328c5
   324d0:	200042fc 	.word	0x200042fc

000324d4 <sw_timer_disable_callback>:
   324d4:	b580      	push	{r7, lr}
   324d6:	b084      	sub	sp, #16
   324d8:	af00      	add	r7, sp, #0
   324da:	6078      	str	r0, [r7, #4]
   324dc:	6039      	str	r1, [r7, #0]
   324de:	683a      	ldr	r2, [r7, #0]
   324e0:	0013      	movs	r3, r2
   324e2:	009b      	lsls	r3, r3, #2
   324e4:	189b      	adds	r3, r3, r2
   324e6:	009b      	lsls	r3, r3, #2
   324e8:	687a      	ldr	r2, [r7, #4]
   324ea:	18d3      	adds	r3, r2, r3
   324ec:	60fb      	str	r3, [r7, #12]
   324ee:	68fb      	ldr	r3, [r7, #12]
   324f0:	781a      	ldrb	r2, [r3, #0]
   324f2:	2102      	movs	r1, #2
   324f4:	438a      	bics	r2, r1
   324f6:	701a      	strb	r2, [r3, #0]
   324f8:	46c0      	nop			; (mov r8, r8)
   324fa:	46bd      	mov	sp, r7
   324fc:	b004      	add	sp, #16
   324fe:	bd80      	pop	{r7, pc}

00032500 <sw_timer_task>:
   32500:	b590      	push	{r4, r7, lr}
   32502:	b085      	sub	sp, #20
   32504:	af00      	add	r7, sp, #0
   32506:	6078      	str	r0, [r7, #4]
   32508:	2300      	movs	r3, #0
   3250a:	60fb      	str	r3, [r7, #12]
   3250c:	e053      	b.n	325b6 <sw_timer_task+0xb6>
   3250e:	6879      	ldr	r1, [r7, #4]
   32510:	68fa      	ldr	r2, [r7, #12]
   32512:	0013      	movs	r3, r2
   32514:	009b      	lsls	r3, r3, #2
   32516:	189b      	adds	r3, r3, r2
   32518:	009b      	lsls	r3, r3, #2
   3251a:	5c5b      	ldrb	r3, [r3, r1]
   3251c:	07db      	lsls	r3, r3, #31
   3251e:	0fdb      	lsrs	r3, r3, #31
   32520:	b2db      	uxtb	r3, r3
   32522:	2b00      	cmp	r3, #0
   32524:	d044      	beq.n	325b0 <sw_timer_task+0xb0>
   32526:	6879      	ldr	r1, [r7, #4]
   32528:	68fa      	ldr	r2, [r7, #12]
   3252a:	0013      	movs	r3, r2
   3252c:	009b      	lsls	r3, r3, #2
   3252e:	189b      	adds	r3, r3, r2
   32530:	009b      	lsls	r3, r3, #2
   32532:	5c5b      	ldrb	r3, [r3, r1]
   32534:	079b      	lsls	r3, r3, #30
   32536:	0fdb      	lsrs	r3, r3, #31
   32538:	b2db      	uxtb	r3, r3
   3253a:	2b00      	cmp	r3, #0
   3253c:	d038      	beq.n	325b0 <sw_timer_task+0xb0>
   3253e:	68fa      	ldr	r2, [r7, #12]
   32540:	0013      	movs	r3, r2
   32542:	009b      	lsls	r3, r3, #2
   32544:	189b      	adds	r3, r3, r2
   32546:	009b      	lsls	r3, r3, #2
   32548:	687a      	ldr	r2, [r7, #4]
   3254a:	18d3      	adds	r3, r2, r3
   3254c:	60bb      	str	r3, [r7, #8]
   3254e:	68bb      	ldr	r3, [r7, #8]
   32550:	691a      	ldr	r2, [r3, #16]
   32552:	4b1c      	ldr	r3, [pc, #112]	; (325c4 <sw_timer_task+0xc4>)
   32554:	681b      	ldr	r3, [r3, #0]
   32556:	1ad3      	subs	r3, r2, r3
   32558:	d52a      	bpl.n	325b0 <sw_timer_task+0xb0>
   3255a:	68bb      	ldr	r3, [r7, #8]
   3255c:	781b      	ldrb	r3, [r3, #0]
   3255e:	2204      	movs	r2, #4
   32560:	4013      	ands	r3, r2
   32562:	b2db      	uxtb	r3, r3
   32564:	2b00      	cmp	r3, #0
   32566:	d123      	bne.n	325b0 <sw_timer_task+0xb0>
   32568:	68bb      	ldr	r3, [r7, #8]
   3256a:	781a      	ldrb	r2, [r3, #0]
   3256c:	2104      	movs	r1, #4
   3256e:	430a      	orrs	r2, r1
   32570:	701a      	strb	r2, [r3, #0]
   32572:	68bb      	ldr	r3, [r7, #8]
   32574:	68db      	ldr	r3, [r3, #12]
   32576:	2b00      	cmp	r3, #0
   32578:	d007      	beq.n	3258a <sw_timer_task+0x8a>
   3257a:	68bb      	ldr	r3, [r7, #8]
   3257c:	68da      	ldr	r2, [r3, #12]
   3257e:	4b11      	ldr	r3, [pc, #68]	; (325c4 <sw_timer_task+0xc4>)
   32580:	681b      	ldr	r3, [r3, #0]
   32582:	18d2      	adds	r2, r2, r3
   32584:	68bb      	ldr	r3, [r7, #8]
   32586:	611a      	str	r2, [r3, #16]
   32588:	e004      	b.n	32594 <sw_timer_task+0x94>
   3258a:	68bb      	ldr	r3, [r7, #8]
   3258c:	781a      	ldrb	r2, [r3, #0]
   3258e:	2102      	movs	r1, #2
   32590:	438a      	bics	r2, r1
   32592:	701a      	strb	r2, [r3, #0]
   32594:	68bb      	ldr	r3, [r7, #8]
   32596:	685c      	ldr	r4, [r3, #4]
   32598:	68bb      	ldr	r3, [r7, #8]
   3259a:	689a      	ldr	r2, [r3, #8]
   3259c:	68bb      	ldr	r3, [r7, #8]
   3259e:	68db      	ldr	r3, [r3, #12]
   325a0:	68f9      	ldr	r1, [r7, #12]
   325a2:	6878      	ldr	r0, [r7, #4]
   325a4:	47a0      	blx	r4
   325a6:	68bb      	ldr	r3, [r7, #8]
   325a8:	781a      	ldrb	r2, [r3, #0]
   325aa:	2104      	movs	r1, #4
   325ac:	438a      	bics	r2, r1
   325ae:	701a      	strb	r2, [r3, #0]
   325b0:	68fb      	ldr	r3, [r7, #12]
   325b2:	3301      	adds	r3, #1
   325b4:	60fb      	str	r3, [r7, #12]
   325b6:	68fb      	ldr	r3, [r7, #12]
   325b8:	2b00      	cmp	r3, #0
   325ba:	dda8      	ble.n	3250e <sw_timer_task+0xe>
   325bc:	46c0      	nop			; (mov r8, r8)
   325be:	46bd      	mov	sp, r7
   325c0:	b005      	add	sp, #20
   325c2:	bd90      	pop	{r4, r7, pc}
   325c4:	200042fc 	.word	0x200042fc

000325c8 <main>:
 * Application entry point.
 * @return int
 */
int main(void)

{
   325c8:	b580      	push	{r7, lr}
   325ca:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   325cc:	4b06      	ldr	r3, [pc, #24]	; (325e8 <main+0x20>)
   325ce:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   325d0:	4b06      	ldr	r3, [pc, #24]	; (325ec <main+0x24>)
   325d2:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   325d4:	2001      	movs	r0, #1
   325d6:	4b06      	ldr	r3, [pc, #24]	; (325f0 <main+0x28>)
   325d8:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   325da:	4b06      	ldr	r3, [pc, #24]	; (325f4 <main+0x2c>)
   325dc:	4798      	blx	r3

    return 0;  // Will not get here
   325de:	2300      	movs	r3, #0
}
   325e0:	0018      	movs	r0, r3
   325e2:	46bd      	mov	sp, r7
   325e4:	bd80      	pop	{r7, pc}
   325e6:	46c0      	nop			; (mov r8, r8)
   325e8:	0002a111 	.word	0x0002a111
   325ec:	0001dfd5 	.word	0x0001dfd5
   325f0:	0001869d 	.word	0x0001869d
   325f4:	0001c62d 	.word	0x0001c62d

000325f8 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   325f8:	b580      	push	{r7, lr}
   325fa:	b082      	sub	sp, #8
   325fc:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   325fe:	4b30      	ldr	r3, [pc, #192]	; (326c0 <vApplicationDaemonTaskStartupHook+0xc8>)
   32600:	0018      	movs	r0, r3
   32602:	4b30      	ldr	r3, [pc, #192]	; (326c4 <vApplicationDaemonTaskStartupHook+0xcc>)
   32604:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   32606:	4b30      	ldr	r3, [pc, #192]	; (326c8 <vApplicationDaemonTaskStartupHook+0xd0>)
   32608:	0018      	movs	r0, r3
   3260a:	4b2e      	ldr	r3, [pc, #184]	; (326c4 <vApplicationDaemonTaskStartupHook+0xcc>)
   3260c:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   3260e:	4b2f      	ldr	r3, [pc, #188]	; (326cc <vApplicationDaemonTaskStartupHook+0xd4>)
   32610:	4798      	blx	r3
   32612:	1e03      	subs	r3, r0, #0
   32614:	d004      	beq.n	32620 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   32616:	4b2e      	ldr	r3, [pc, #184]	; (326d0 <vApplicationDaemonTaskStartupHook+0xd8>)
   32618:	0018      	movs	r0, r3
   3261a:	4b2a      	ldr	r3, [pc, #168]	; (326c4 <vApplicationDaemonTaskStartupHook+0xcc>)
   3261c:	4798      	blx	r3
   3261e:	e003      	b.n	32628 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   32620:	4b2c      	ldr	r3, [pc, #176]	; (326d4 <vApplicationDaemonTaskStartupHook+0xdc>)
   32622:	0018      	movs	r0, r3
   32624:	4b27      	ldr	r3, [pc, #156]	; (326c4 <vApplicationDaemonTaskStartupHook+0xcc>)
   32626:	4798      	blx	r3
    }
	
	
    if (0 != InitializeSeesaw(NEO_TRELLIS_ADDR_1)) {
   32628:	202e      	movs	r0, #46	; 0x2e
   3262a:	4b2b      	ldr	r3, [pc, #172]	; (326d8 <vApplicationDaemonTaskStartupHook+0xe0>)
   3262c:	4798      	blx	r3
   3262e:	1e03      	subs	r3, r0, #0
   32630:	d004      	beq.n	3263c <vApplicationDaemonTaskStartupHook+0x44>
        SerialConsoleWriteString("Error initializing 1st Seesaw!\r\n");
   32632:	4b2a      	ldr	r3, [pc, #168]	; (326dc <vApplicationDaemonTaskStartupHook+0xe4>)
   32634:	0018      	movs	r0, r3
   32636:	4b23      	ldr	r3, [pc, #140]	; (326c4 <vApplicationDaemonTaskStartupHook+0xcc>)
   32638:	4798      	blx	r3
   3263a:	e003      	b.n	32644 <vApplicationDaemonTaskStartupHook+0x4c>
    } else {
        SerialConsoleWriteString("Initialized 1st Seesaw!\r\n");
   3263c:	4b28      	ldr	r3, [pc, #160]	; (326e0 <vApplicationDaemonTaskStartupHook+0xe8>)
   3263e:	0018      	movs	r0, r3
   32640:	4b20      	ldr	r3, [pc, #128]	; (326c4 <vApplicationDaemonTaskStartupHook+0xcc>)
   32642:	4798      	blx	r3
    }
	
	
	if (0 != InitializeSeesaw(NEO_TRELLIS_ADDR_2)) {
   32644:	202f      	movs	r0, #47	; 0x2f
   32646:	4b24      	ldr	r3, [pc, #144]	; (326d8 <vApplicationDaemonTaskStartupHook+0xe0>)
   32648:	4798      	blx	r3
   3264a:	1e03      	subs	r3, r0, #0
   3264c:	d004      	beq.n	32658 <vApplicationDaemonTaskStartupHook+0x60>
		SerialConsoleWriteString("Error initializing 2nd Seesaw!\r\n");
   3264e:	4b25      	ldr	r3, [pc, #148]	; (326e4 <vApplicationDaemonTaskStartupHook+0xec>)
   32650:	0018      	movs	r0, r3
   32652:	4b1c      	ldr	r3, [pc, #112]	; (326c4 <vApplicationDaemonTaskStartupHook+0xcc>)
   32654:	4798      	blx	r3
   32656:	e003      	b.n	32660 <vApplicationDaemonTaskStartupHook+0x68>
		} else {
		SerialConsoleWriteString("Initialized 2nd Seesaw!\r\n");
   32658:	4b23      	ldr	r3, [pc, #140]	; (326e8 <vApplicationDaemonTaskStartupHook+0xf0>)
   3265a:	0018      	movs	r0, r3
   3265c:	4b19      	ldr	r3, [pc, #100]	; (326c4 <vApplicationDaemonTaskStartupHook+0xcc>)
   3265e:	4798      	blx	r3
	}
	

    uint8_t whoamI = 0;
   32660:	1dfb      	adds	r3, r7, #7
   32662:	2200      	movs	r2, #0
   32664:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   32666:	4b21      	ldr	r3, [pc, #132]	; (326ec <vApplicationDaemonTaskStartupHook+0xf4>)
   32668:	4798      	blx	r3
   3266a:	0002      	movs	r2, r0
   3266c:	1dfb      	adds	r3, r7, #7
   3266e:	0019      	movs	r1, r3
   32670:	0010      	movs	r0, r2
   32672:	4b1f      	ldr	r3, [pc, #124]	; (326f0 <vApplicationDaemonTaskStartupHook+0xf8>)
   32674:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   32676:	1dfb      	adds	r3, r7, #7
   32678:	781b      	ldrb	r3, [r3, #0]
   3267a:	2b6c      	cmp	r3, #108	; 0x6c
   3267c:	d004      	beq.n	32688 <vApplicationDaemonTaskStartupHook+0x90>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   3267e:	4b1d      	ldr	r3, [pc, #116]	; (326f4 <vApplicationDaemonTaskStartupHook+0xfc>)
   32680:	0018      	movs	r0, r3
   32682:	4b10      	ldr	r3, [pc, #64]	; (326c4 <vApplicationDaemonTaskStartupHook+0xcc>)
   32684:	4798      	blx	r3
   32686:	e010      	b.n	326aa <vApplicationDaemonTaskStartupHook+0xb2>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   32688:	4b1b      	ldr	r3, [pc, #108]	; (326f8 <vApplicationDaemonTaskStartupHook+0x100>)
   3268a:	0018      	movs	r0, r3
   3268c:	4b0d      	ldr	r3, [pc, #52]	; (326c4 <vApplicationDaemonTaskStartupHook+0xcc>)
   3268e:	4798      	blx	r3
        if (InitImu() == 0) {
   32690:	4b1a      	ldr	r3, [pc, #104]	; (326fc <vApplicationDaemonTaskStartupHook+0x104>)
   32692:	4798      	blx	r3
   32694:	1e03      	subs	r3, r0, #0
   32696:	d104      	bne.n	326a2 <vApplicationDaemonTaskStartupHook+0xaa>
            SerialConsoleWriteString("IMU initialized!\r\n");
   32698:	4b19      	ldr	r3, [pc, #100]	; (32700 <vApplicationDaemonTaskStartupHook+0x108>)
   3269a:	0018      	movs	r0, r3
   3269c:	4b09      	ldr	r3, [pc, #36]	; (326c4 <vApplicationDaemonTaskStartupHook+0xcc>)
   3269e:	4798      	blx	r3
   326a0:	e003      	b.n	326aa <vApplicationDaemonTaskStartupHook+0xb2>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   326a2:	4b18      	ldr	r3, [pc, #96]	; (32704 <vApplicationDaemonTaskStartupHook+0x10c>)
   326a4:	0018      	movs	r0, r3
   326a6:	4b07      	ldr	r3, [pc, #28]	; (326c4 <vApplicationDaemonTaskStartupHook+0xcc>)
   326a8:	4798      	blx	r3
        }
    }

    StartTasks();
   326aa:	4b17      	ldr	r3, [pc, #92]	; (32708 <vApplicationDaemonTaskStartupHook+0x110>)
   326ac:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   326ae:	4b17      	ldr	r3, [pc, #92]	; (3270c <vApplicationDaemonTaskStartupHook+0x114>)
   326b0:	681b      	ldr	r3, [r3, #0]
   326b2:	0018      	movs	r0, r3
   326b4:	4b16      	ldr	r3, [pc, #88]	; (32710 <vApplicationDaemonTaskStartupHook+0x118>)
   326b6:	4798      	blx	r3
}
   326b8:	46c0      	nop			; (mov r8, r8)
   326ba:	46bd      	mov	sp, r7
   326bc:	b002      	add	sp, #8
   326be:	bd80      	pop	{r7, pc}
   326c0:	00039b40 	.word	0x00039b40
   326c4:	0001e045 	.word	0x0001e045
   326c8:	00039b64 	.word	0x00039b64
   326cc:	00013bd5 	.word	0x00013bd5
   326d0:	00039b7c 	.word	0x00039b7c
   326d4:	00039ba0 	.word	0x00039ba0
   326d8:	00014fa1 	.word	0x00014fa1
   326dc:	00039bbc 	.word	0x00039bbc
   326e0:	00039be0 	.word	0x00039be0
   326e4:	00039bfc 	.word	0x00039bfc
   326e8:	00039c20 	.word	0x00039c20
   326ec:	00014ec9 	.word	0x00014ec9
   326f0:	00014a1d 	.word	0x00014a1d
   326f4:	00039c3c 	.word	0x00039c3c
   326f8:	00039c50 	.word	0x00039c50
   326fc:	00014ed9 	.word	0x00014ed9
   32700:	00039c60 	.word	0x00039c60
   32704:	00039c74 	.word	0x00039c74
   32708:	00032715 	.word	0x00032715
   3270c:	20004304 	.word	0x20004304
   32710:	0001c4d1 	.word	0x0001c4d1

00032714 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   32714:	b590      	push	{r4, r7, lr}
   32716:	b083      	sub	sp, #12
   32718:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   3271a:	4b44      	ldr	r3, [pc, #272]	; (3282c <StartTasks+0x118>)
   3271c:	4798      	blx	r3
   3271e:	0003      	movs	r3, r0
   32720:	4a43      	ldr	r2, [pc, #268]	; (32830 <StartTasks+0x11c>)
   32722:	4844      	ldr	r0, [pc, #272]	; (32834 <StartTasks+0x120>)
   32724:	2140      	movs	r1, #64	; 0x40
   32726:	4c44      	ldr	r4, [pc, #272]	; (32838 <StartTasks+0x124>)
   32728:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3272a:	4b42      	ldr	r3, [pc, #264]	; (32834 <StartTasks+0x120>)
   3272c:	0018      	movs	r0, r3
   3272e:	4b43      	ldr	r3, [pc, #268]	; (3283c <StartTasks+0x128>)
   32730:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   32732:	23c8      	movs	r3, #200	; 0xc8
   32734:	005a      	lsls	r2, r3, #1
   32736:	4942      	ldr	r1, [pc, #264]	; (32840 <StartTasks+0x12c>)
   32738:	4842      	ldr	r0, [pc, #264]	; (32844 <StartTasks+0x130>)
   3273a:	4b43      	ldr	r3, [pc, #268]	; (32848 <StartTasks+0x134>)
   3273c:	9301      	str	r3, [sp, #4]
   3273e:	2304      	movs	r3, #4
   32740:	9300      	str	r3, [sp, #0]
   32742:	2300      	movs	r3, #0
   32744:	4c41      	ldr	r4, [pc, #260]	; (3284c <StartTasks+0x138>)
   32746:	47a0      	blx	r4
   32748:	0003      	movs	r3, r0
   3274a:	2b01      	cmp	r3, #1
   3274c:	d003      	beq.n	32756 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   3274e:	4b40      	ldr	r3, [pc, #256]	; (32850 <StartTasks+0x13c>)
   32750:	0018      	movs	r0, r3
   32752:	4b3a      	ldr	r3, [pc, #232]	; (3283c <StartTasks+0x128>)
   32754:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   32756:	4b35      	ldr	r3, [pc, #212]	; (3282c <StartTasks+0x118>)
   32758:	4798      	blx	r3
   3275a:	0003      	movs	r3, r0
   3275c:	4a3d      	ldr	r2, [pc, #244]	; (32854 <StartTasks+0x140>)
   3275e:	4835      	ldr	r0, [pc, #212]	; (32834 <StartTasks+0x120>)
   32760:	2140      	movs	r1, #64	; 0x40
   32762:	4c35      	ldr	r4, [pc, #212]	; (32838 <StartTasks+0x124>)
   32764:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32766:	4b33      	ldr	r3, [pc, #204]	; (32834 <StartTasks+0x120>)
   32768:	0018      	movs	r0, r3
   3276a:	4b34      	ldr	r3, [pc, #208]	; (3283c <StartTasks+0x128>)
   3276c:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   3276e:	23fa      	movs	r3, #250	; 0xfa
   32770:	009a      	lsls	r2, r3, #2
   32772:	4939      	ldr	r1, [pc, #228]	; (32858 <StartTasks+0x144>)
   32774:	4839      	ldr	r0, [pc, #228]	; (3285c <StartTasks+0x148>)
   32776:	4b3a      	ldr	r3, [pc, #232]	; (32860 <StartTasks+0x14c>)
   32778:	9301      	str	r3, [sp, #4]
   3277a:	2303      	movs	r3, #3
   3277c:	9300      	str	r3, [sp, #0]
   3277e:	2300      	movs	r3, #0
   32780:	4c32      	ldr	r4, [pc, #200]	; (3284c <StartTasks+0x138>)
   32782:	47a0      	blx	r4
   32784:	0003      	movs	r3, r0
   32786:	2b01      	cmp	r3, #1
   32788:	d003      	beq.n	32792 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   3278a:	4b36      	ldr	r3, [pc, #216]	; (32864 <StartTasks+0x150>)
   3278c:	0018      	movs	r0, r3
   3278e:	4b2b      	ldr	r3, [pc, #172]	; (3283c <StartTasks+0x128>)
   32790:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   32792:	4b26      	ldr	r3, [pc, #152]	; (3282c <StartTasks+0x118>)
   32794:	4798      	blx	r3
   32796:	0003      	movs	r3, r0
   32798:	4a33      	ldr	r2, [pc, #204]	; (32868 <StartTasks+0x154>)
   3279a:	4826      	ldr	r0, [pc, #152]	; (32834 <StartTasks+0x120>)
   3279c:	2140      	movs	r1, #64	; 0x40
   3279e:	4c26      	ldr	r4, [pc, #152]	; (32838 <StartTasks+0x124>)
   327a0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   327a2:	4b24      	ldr	r3, [pc, #144]	; (32834 <StartTasks+0x120>)
   327a4:	0018      	movs	r0, r3
   327a6:	4b25      	ldr	r3, [pc, #148]	; (3283c <StartTasks+0x128>)
   327a8:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   327aa:	23c8      	movs	r3, #200	; 0xc8
   327ac:	005a      	lsls	r2, r3, #1
   327ae:	492f      	ldr	r1, [pc, #188]	; (3286c <StartTasks+0x158>)
   327b0:	482f      	ldr	r0, [pc, #188]	; (32870 <StartTasks+0x15c>)
   327b2:	4b30      	ldr	r3, [pc, #192]	; (32874 <StartTasks+0x160>)
   327b4:	9301      	str	r3, [sp, #4]
   327b6:	2304      	movs	r3, #4
   327b8:	9300      	str	r3, [sp, #0]
   327ba:	2300      	movs	r3, #0
   327bc:	4c23      	ldr	r4, [pc, #140]	; (3284c <StartTasks+0x138>)
   327be:	47a0      	blx	r4
   327c0:	0003      	movs	r3, r0
   327c2:	2b01      	cmp	r3, #1
   327c4:	d003      	beq.n	327ce <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   327c6:	4b2c      	ldr	r3, [pc, #176]	; (32878 <StartTasks+0x164>)
   327c8:	0018      	movs	r0, r3
   327ca:	4b1c      	ldr	r3, [pc, #112]	; (3283c <StartTasks+0x128>)
   327cc:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   327ce:	4b17      	ldr	r3, [pc, #92]	; (3282c <StartTasks+0x118>)
   327d0:	4798      	blx	r3
   327d2:	0003      	movs	r3, r0
   327d4:	4a29      	ldr	r2, [pc, #164]	; (3287c <StartTasks+0x168>)
   327d6:	4817      	ldr	r0, [pc, #92]	; (32834 <StartTasks+0x120>)
   327d8:	2140      	movs	r1, #64	; 0x40
   327da:	4c17      	ldr	r4, [pc, #92]	; (32838 <StartTasks+0x124>)
   327dc:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   327de:	4b15      	ldr	r3, [pc, #84]	; (32834 <StartTasks+0x120>)
   327e0:	0018      	movs	r0, r3
   327e2:	4b16      	ldr	r3, [pc, #88]	; (3283c <StartTasks+0x128>)
   327e4:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   327e6:	2380      	movs	r3, #128	; 0x80
   327e8:	005a      	lsls	r2, r3, #1
   327ea:	4925      	ldr	r1, [pc, #148]	; (32880 <StartTasks+0x16c>)
   327ec:	4825      	ldr	r0, [pc, #148]	; (32884 <StartTasks+0x170>)
   327ee:	4b26      	ldr	r3, [pc, #152]	; (32888 <StartTasks+0x174>)
   327f0:	9301      	str	r3, [sp, #4]
   327f2:	2304      	movs	r3, #4
   327f4:	9300      	str	r3, [sp, #0]
   327f6:	2300      	movs	r3, #0
   327f8:	4c14      	ldr	r4, [pc, #80]	; (3284c <StartTasks+0x138>)
   327fa:	47a0      	blx	r4
   327fc:	0003      	movs	r3, r0
   327fe:	2b01      	cmp	r3, #1
   32800:	d003      	beq.n	3280a <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   32802:	4b22      	ldr	r3, [pc, #136]	; (3288c <StartTasks+0x178>)
   32804:	0018      	movs	r0, r3
   32806:	4b0d      	ldr	r3, [pc, #52]	; (3283c <StartTasks+0x128>)
   32808:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   3280a:	4b08      	ldr	r3, [pc, #32]	; (3282c <StartTasks+0x118>)
   3280c:	4798      	blx	r3
   3280e:	0003      	movs	r3, r0
   32810:	4a1f      	ldr	r2, [pc, #124]	; (32890 <StartTasks+0x17c>)
   32812:	4808      	ldr	r0, [pc, #32]	; (32834 <StartTasks+0x120>)
   32814:	2140      	movs	r1, #64	; 0x40
   32816:	4c08      	ldr	r4, [pc, #32]	; (32838 <StartTasks+0x124>)
   32818:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3281a:	4b06      	ldr	r3, [pc, #24]	; (32834 <StartTasks+0x120>)
   3281c:	0018      	movs	r0, r3
   3281e:	4b07      	ldr	r3, [pc, #28]	; (3283c <StartTasks+0x128>)
   32820:	4798      	blx	r3
}
   32822:	46c0      	nop			; (mov r8, r8)
   32824:	46bd      	mov	sp, r7
   32826:	b001      	add	sp, #4
   32828:	bd90      	pop	{r4, r7, pc}
   3282a:	46c0      	nop			; (mov r8, r8)
   3282c:	0001a611 	.word	0x0001a611
   32830:	00039c90 	.word	0x00039c90
   32834:	200057dc 	.word	0x200057dc
   32838:	00034af9 	.word	0x00034af9
   3283c:	0001e045 	.word	0x0001e045
   32840:	00039cb4 	.word	0x00039cb4
   32844:	00012e71 	.word	0x00012e71
   32848:	20004300 	.word	0x20004300
   3284c:	0001c055 	.word	0x0001c055
   32850:	00039cc0 	.word	0x00039cc0
   32854:	00039cec 	.word	0x00039cec
   32858:	00039d0c 	.word	0x00039d0c
   3285c:	0001723d 	.word	0x0001723d
   32860:	20004308 	.word	0x20004308
   32864:	00039d18 	.word	0x00039d18
   32868:	00039d44 	.word	0x00039d44
   3286c:	00039d64 	.word	0x00039d64
   32870:	000156b5 	.word	0x000156b5
   32874:	2000430c 	.word	0x2000430c
   32878:	00039d6c 	.word	0x00039d6c
   3287c:	00039d98 	.word	0x00039d98
   32880:	00039dbc 	.word	0x00039dbc
   32884:	00013741 	.word	0x00013741
   32888:	20004310 	.word	0x20004310
   3288c:	00039dcc 	.word	0x00039dcc
   32890:	00039dfc 	.word	0x00039dfc

00032894 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   32894:	b580      	push	{r7, lr}
   32896:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   32898:	4b02      	ldr	r3, [pc, #8]	; (328a4 <vApplicationMallocFailedHook+0x10>)
   3289a:	0018      	movs	r0, r3
   3289c:	4b02      	ldr	r3, [pc, #8]	; (328a8 <vApplicationMallocFailedHook+0x14>)
   3289e:	4798      	blx	r3
    while (1)
   328a0:	e7fe      	b.n	328a0 <vApplicationMallocFailedHook+0xc>
   328a2:	46c0      	nop			; (mov r8, r8)
   328a4:	00039e24 	.word	0x00039e24
   328a8:	0001e045 	.word	0x0001e045

000328ac <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   328ac:	b580      	push	{r7, lr}
   328ae:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   328b0:	4b02      	ldr	r3, [pc, #8]	; (328bc <vApplicationStackOverflowHook+0x10>)
   328b2:	0018      	movs	r0, r3
   328b4:	4b02      	ldr	r3, [pc, #8]	; (328c0 <vApplicationStackOverflowHook+0x14>)
   328b6:	4798      	blx	r3
    while (1)
   328b8:	e7fe      	b.n	328b8 <vApplicationStackOverflowHook+0xc>
   328ba:	46c0      	nop			; (mov r8, r8)
   328bc:	00039e50 	.word	0x00039e50
   328c0:	0001e045 	.word	0x0001e045

000328c4 <__udivsi3>:
   328c4:	2200      	movs	r2, #0
   328c6:	0843      	lsrs	r3, r0, #1
   328c8:	428b      	cmp	r3, r1
   328ca:	d374      	bcc.n	329b6 <__udivsi3+0xf2>
   328cc:	0903      	lsrs	r3, r0, #4
   328ce:	428b      	cmp	r3, r1
   328d0:	d35f      	bcc.n	32992 <__udivsi3+0xce>
   328d2:	0a03      	lsrs	r3, r0, #8
   328d4:	428b      	cmp	r3, r1
   328d6:	d344      	bcc.n	32962 <__udivsi3+0x9e>
   328d8:	0b03      	lsrs	r3, r0, #12
   328da:	428b      	cmp	r3, r1
   328dc:	d328      	bcc.n	32930 <__udivsi3+0x6c>
   328de:	0c03      	lsrs	r3, r0, #16
   328e0:	428b      	cmp	r3, r1
   328e2:	d30d      	bcc.n	32900 <__udivsi3+0x3c>
   328e4:	22ff      	movs	r2, #255	; 0xff
   328e6:	0209      	lsls	r1, r1, #8
   328e8:	ba12      	rev	r2, r2
   328ea:	0c03      	lsrs	r3, r0, #16
   328ec:	428b      	cmp	r3, r1
   328ee:	d302      	bcc.n	328f6 <__udivsi3+0x32>
   328f0:	1212      	asrs	r2, r2, #8
   328f2:	0209      	lsls	r1, r1, #8
   328f4:	d065      	beq.n	329c2 <__udivsi3+0xfe>
   328f6:	0b03      	lsrs	r3, r0, #12
   328f8:	428b      	cmp	r3, r1
   328fa:	d319      	bcc.n	32930 <__udivsi3+0x6c>
   328fc:	e000      	b.n	32900 <__udivsi3+0x3c>
   328fe:	0a09      	lsrs	r1, r1, #8
   32900:	0bc3      	lsrs	r3, r0, #15
   32902:	428b      	cmp	r3, r1
   32904:	d301      	bcc.n	3290a <__udivsi3+0x46>
   32906:	03cb      	lsls	r3, r1, #15
   32908:	1ac0      	subs	r0, r0, r3
   3290a:	4152      	adcs	r2, r2
   3290c:	0b83      	lsrs	r3, r0, #14
   3290e:	428b      	cmp	r3, r1
   32910:	d301      	bcc.n	32916 <__udivsi3+0x52>
   32912:	038b      	lsls	r3, r1, #14
   32914:	1ac0      	subs	r0, r0, r3
   32916:	4152      	adcs	r2, r2
   32918:	0b43      	lsrs	r3, r0, #13
   3291a:	428b      	cmp	r3, r1
   3291c:	d301      	bcc.n	32922 <__udivsi3+0x5e>
   3291e:	034b      	lsls	r3, r1, #13
   32920:	1ac0      	subs	r0, r0, r3
   32922:	4152      	adcs	r2, r2
   32924:	0b03      	lsrs	r3, r0, #12
   32926:	428b      	cmp	r3, r1
   32928:	d301      	bcc.n	3292e <__udivsi3+0x6a>
   3292a:	030b      	lsls	r3, r1, #12
   3292c:	1ac0      	subs	r0, r0, r3
   3292e:	4152      	adcs	r2, r2
   32930:	0ac3      	lsrs	r3, r0, #11
   32932:	428b      	cmp	r3, r1
   32934:	d301      	bcc.n	3293a <__udivsi3+0x76>
   32936:	02cb      	lsls	r3, r1, #11
   32938:	1ac0      	subs	r0, r0, r3
   3293a:	4152      	adcs	r2, r2
   3293c:	0a83      	lsrs	r3, r0, #10
   3293e:	428b      	cmp	r3, r1
   32940:	d301      	bcc.n	32946 <__udivsi3+0x82>
   32942:	028b      	lsls	r3, r1, #10
   32944:	1ac0      	subs	r0, r0, r3
   32946:	4152      	adcs	r2, r2
   32948:	0a43      	lsrs	r3, r0, #9
   3294a:	428b      	cmp	r3, r1
   3294c:	d301      	bcc.n	32952 <__udivsi3+0x8e>
   3294e:	024b      	lsls	r3, r1, #9
   32950:	1ac0      	subs	r0, r0, r3
   32952:	4152      	adcs	r2, r2
   32954:	0a03      	lsrs	r3, r0, #8
   32956:	428b      	cmp	r3, r1
   32958:	d301      	bcc.n	3295e <__udivsi3+0x9a>
   3295a:	020b      	lsls	r3, r1, #8
   3295c:	1ac0      	subs	r0, r0, r3
   3295e:	4152      	adcs	r2, r2
   32960:	d2cd      	bcs.n	328fe <__udivsi3+0x3a>
   32962:	09c3      	lsrs	r3, r0, #7
   32964:	428b      	cmp	r3, r1
   32966:	d301      	bcc.n	3296c <__udivsi3+0xa8>
   32968:	01cb      	lsls	r3, r1, #7
   3296a:	1ac0      	subs	r0, r0, r3
   3296c:	4152      	adcs	r2, r2
   3296e:	0983      	lsrs	r3, r0, #6
   32970:	428b      	cmp	r3, r1
   32972:	d301      	bcc.n	32978 <__udivsi3+0xb4>
   32974:	018b      	lsls	r3, r1, #6
   32976:	1ac0      	subs	r0, r0, r3
   32978:	4152      	adcs	r2, r2
   3297a:	0943      	lsrs	r3, r0, #5
   3297c:	428b      	cmp	r3, r1
   3297e:	d301      	bcc.n	32984 <__udivsi3+0xc0>
   32980:	014b      	lsls	r3, r1, #5
   32982:	1ac0      	subs	r0, r0, r3
   32984:	4152      	adcs	r2, r2
   32986:	0903      	lsrs	r3, r0, #4
   32988:	428b      	cmp	r3, r1
   3298a:	d301      	bcc.n	32990 <__udivsi3+0xcc>
   3298c:	010b      	lsls	r3, r1, #4
   3298e:	1ac0      	subs	r0, r0, r3
   32990:	4152      	adcs	r2, r2
   32992:	08c3      	lsrs	r3, r0, #3
   32994:	428b      	cmp	r3, r1
   32996:	d301      	bcc.n	3299c <__udivsi3+0xd8>
   32998:	00cb      	lsls	r3, r1, #3
   3299a:	1ac0      	subs	r0, r0, r3
   3299c:	4152      	adcs	r2, r2
   3299e:	0883      	lsrs	r3, r0, #2
   329a0:	428b      	cmp	r3, r1
   329a2:	d301      	bcc.n	329a8 <__udivsi3+0xe4>
   329a4:	008b      	lsls	r3, r1, #2
   329a6:	1ac0      	subs	r0, r0, r3
   329a8:	4152      	adcs	r2, r2
   329aa:	0843      	lsrs	r3, r0, #1
   329ac:	428b      	cmp	r3, r1
   329ae:	d301      	bcc.n	329b4 <__udivsi3+0xf0>
   329b0:	004b      	lsls	r3, r1, #1
   329b2:	1ac0      	subs	r0, r0, r3
   329b4:	4152      	adcs	r2, r2
   329b6:	1a41      	subs	r1, r0, r1
   329b8:	d200      	bcs.n	329bc <__udivsi3+0xf8>
   329ba:	4601      	mov	r1, r0
   329bc:	4152      	adcs	r2, r2
   329be:	4610      	mov	r0, r2
   329c0:	4770      	bx	lr
   329c2:	e7ff      	b.n	329c4 <__udivsi3+0x100>
   329c4:	b501      	push	{r0, lr}
   329c6:	2000      	movs	r0, #0
   329c8:	f000 f8f0 	bl	32bac <__aeabi_idiv0>
   329cc:	bd02      	pop	{r1, pc}
   329ce:	46c0      	nop			; (mov r8, r8)

000329d0 <__aeabi_uidivmod>:
   329d0:	2900      	cmp	r1, #0
   329d2:	d0f7      	beq.n	329c4 <__udivsi3+0x100>
   329d4:	e776      	b.n	328c4 <__udivsi3>
   329d6:	4770      	bx	lr

000329d8 <__divsi3>:
   329d8:	4603      	mov	r3, r0
   329da:	430b      	orrs	r3, r1
   329dc:	d47f      	bmi.n	32ade <__divsi3+0x106>
   329de:	2200      	movs	r2, #0
   329e0:	0843      	lsrs	r3, r0, #1
   329e2:	428b      	cmp	r3, r1
   329e4:	d374      	bcc.n	32ad0 <__divsi3+0xf8>
   329e6:	0903      	lsrs	r3, r0, #4
   329e8:	428b      	cmp	r3, r1
   329ea:	d35f      	bcc.n	32aac <__divsi3+0xd4>
   329ec:	0a03      	lsrs	r3, r0, #8
   329ee:	428b      	cmp	r3, r1
   329f0:	d344      	bcc.n	32a7c <__divsi3+0xa4>
   329f2:	0b03      	lsrs	r3, r0, #12
   329f4:	428b      	cmp	r3, r1
   329f6:	d328      	bcc.n	32a4a <__divsi3+0x72>
   329f8:	0c03      	lsrs	r3, r0, #16
   329fa:	428b      	cmp	r3, r1
   329fc:	d30d      	bcc.n	32a1a <__divsi3+0x42>
   329fe:	22ff      	movs	r2, #255	; 0xff
   32a00:	0209      	lsls	r1, r1, #8
   32a02:	ba12      	rev	r2, r2
   32a04:	0c03      	lsrs	r3, r0, #16
   32a06:	428b      	cmp	r3, r1
   32a08:	d302      	bcc.n	32a10 <__divsi3+0x38>
   32a0a:	1212      	asrs	r2, r2, #8
   32a0c:	0209      	lsls	r1, r1, #8
   32a0e:	d065      	beq.n	32adc <__divsi3+0x104>
   32a10:	0b03      	lsrs	r3, r0, #12
   32a12:	428b      	cmp	r3, r1
   32a14:	d319      	bcc.n	32a4a <__divsi3+0x72>
   32a16:	e000      	b.n	32a1a <__divsi3+0x42>
   32a18:	0a09      	lsrs	r1, r1, #8
   32a1a:	0bc3      	lsrs	r3, r0, #15
   32a1c:	428b      	cmp	r3, r1
   32a1e:	d301      	bcc.n	32a24 <__divsi3+0x4c>
   32a20:	03cb      	lsls	r3, r1, #15
   32a22:	1ac0      	subs	r0, r0, r3
   32a24:	4152      	adcs	r2, r2
   32a26:	0b83      	lsrs	r3, r0, #14
   32a28:	428b      	cmp	r3, r1
   32a2a:	d301      	bcc.n	32a30 <__divsi3+0x58>
   32a2c:	038b      	lsls	r3, r1, #14
   32a2e:	1ac0      	subs	r0, r0, r3
   32a30:	4152      	adcs	r2, r2
   32a32:	0b43      	lsrs	r3, r0, #13
   32a34:	428b      	cmp	r3, r1
   32a36:	d301      	bcc.n	32a3c <__divsi3+0x64>
   32a38:	034b      	lsls	r3, r1, #13
   32a3a:	1ac0      	subs	r0, r0, r3
   32a3c:	4152      	adcs	r2, r2
   32a3e:	0b03      	lsrs	r3, r0, #12
   32a40:	428b      	cmp	r3, r1
   32a42:	d301      	bcc.n	32a48 <__divsi3+0x70>
   32a44:	030b      	lsls	r3, r1, #12
   32a46:	1ac0      	subs	r0, r0, r3
   32a48:	4152      	adcs	r2, r2
   32a4a:	0ac3      	lsrs	r3, r0, #11
   32a4c:	428b      	cmp	r3, r1
   32a4e:	d301      	bcc.n	32a54 <__divsi3+0x7c>
   32a50:	02cb      	lsls	r3, r1, #11
   32a52:	1ac0      	subs	r0, r0, r3
   32a54:	4152      	adcs	r2, r2
   32a56:	0a83      	lsrs	r3, r0, #10
   32a58:	428b      	cmp	r3, r1
   32a5a:	d301      	bcc.n	32a60 <__divsi3+0x88>
   32a5c:	028b      	lsls	r3, r1, #10
   32a5e:	1ac0      	subs	r0, r0, r3
   32a60:	4152      	adcs	r2, r2
   32a62:	0a43      	lsrs	r3, r0, #9
   32a64:	428b      	cmp	r3, r1
   32a66:	d301      	bcc.n	32a6c <__divsi3+0x94>
   32a68:	024b      	lsls	r3, r1, #9
   32a6a:	1ac0      	subs	r0, r0, r3
   32a6c:	4152      	adcs	r2, r2
   32a6e:	0a03      	lsrs	r3, r0, #8
   32a70:	428b      	cmp	r3, r1
   32a72:	d301      	bcc.n	32a78 <__divsi3+0xa0>
   32a74:	020b      	lsls	r3, r1, #8
   32a76:	1ac0      	subs	r0, r0, r3
   32a78:	4152      	adcs	r2, r2
   32a7a:	d2cd      	bcs.n	32a18 <__divsi3+0x40>
   32a7c:	09c3      	lsrs	r3, r0, #7
   32a7e:	428b      	cmp	r3, r1
   32a80:	d301      	bcc.n	32a86 <__divsi3+0xae>
   32a82:	01cb      	lsls	r3, r1, #7
   32a84:	1ac0      	subs	r0, r0, r3
   32a86:	4152      	adcs	r2, r2
   32a88:	0983      	lsrs	r3, r0, #6
   32a8a:	428b      	cmp	r3, r1
   32a8c:	d301      	bcc.n	32a92 <__divsi3+0xba>
   32a8e:	018b      	lsls	r3, r1, #6
   32a90:	1ac0      	subs	r0, r0, r3
   32a92:	4152      	adcs	r2, r2
   32a94:	0943      	lsrs	r3, r0, #5
   32a96:	428b      	cmp	r3, r1
   32a98:	d301      	bcc.n	32a9e <__divsi3+0xc6>
   32a9a:	014b      	lsls	r3, r1, #5
   32a9c:	1ac0      	subs	r0, r0, r3
   32a9e:	4152      	adcs	r2, r2
   32aa0:	0903      	lsrs	r3, r0, #4
   32aa2:	428b      	cmp	r3, r1
   32aa4:	d301      	bcc.n	32aaa <__divsi3+0xd2>
   32aa6:	010b      	lsls	r3, r1, #4
   32aa8:	1ac0      	subs	r0, r0, r3
   32aaa:	4152      	adcs	r2, r2
   32aac:	08c3      	lsrs	r3, r0, #3
   32aae:	428b      	cmp	r3, r1
   32ab0:	d301      	bcc.n	32ab6 <__divsi3+0xde>
   32ab2:	00cb      	lsls	r3, r1, #3
   32ab4:	1ac0      	subs	r0, r0, r3
   32ab6:	4152      	adcs	r2, r2
   32ab8:	0883      	lsrs	r3, r0, #2
   32aba:	428b      	cmp	r3, r1
   32abc:	d301      	bcc.n	32ac2 <__divsi3+0xea>
   32abe:	008b      	lsls	r3, r1, #2
   32ac0:	1ac0      	subs	r0, r0, r3
   32ac2:	4152      	adcs	r2, r2
   32ac4:	0843      	lsrs	r3, r0, #1
   32ac6:	428b      	cmp	r3, r1
   32ac8:	d301      	bcc.n	32ace <__divsi3+0xf6>
   32aca:	004b      	lsls	r3, r1, #1
   32acc:	1ac0      	subs	r0, r0, r3
   32ace:	4152      	adcs	r2, r2
   32ad0:	1a41      	subs	r1, r0, r1
   32ad2:	d200      	bcs.n	32ad6 <__divsi3+0xfe>
   32ad4:	4601      	mov	r1, r0
   32ad6:	4152      	adcs	r2, r2
   32ad8:	4610      	mov	r0, r2
   32ada:	4770      	bx	lr
   32adc:	e05d      	b.n	32b9a <__divsi3+0x1c2>
   32ade:	0fca      	lsrs	r2, r1, #31
   32ae0:	d000      	beq.n	32ae4 <__divsi3+0x10c>
   32ae2:	4249      	negs	r1, r1
   32ae4:	1003      	asrs	r3, r0, #32
   32ae6:	d300      	bcc.n	32aea <__divsi3+0x112>
   32ae8:	4240      	negs	r0, r0
   32aea:	4053      	eors	r3, r2
   32aec:	2200      	movs	r2, #0
   32aee:	469c      	mov	ip, r3
   32af0:	0903      	lsrs	r3, r0, #4
   32af2:	428b      	cmp	r3, r1
   32af4:	d32d      	bcc.n	32b52 <__divsi3+0x17a>
   32af6:	0a03      	lsrs	r3, r0, #8
   32af8:	428b      	cmp	r3, r1
   32afa:	d312      	bcc.n	32b22 <__divsi3+0x14a>
   32afc:	22fc      	movs	r2, #252	; 0xfc
   32afe:	0189      	lsls	r1, r1, #6
   32b00:	ba12      	rev	r2, r2
   32b02:	0a03      	lsrs	r3, r0, #8
   32b04:	428b      	cmp	r3, r1
   32b06:	d30c      	bcc.n	32b22 <__divsi3+0x14a>
   32b08:	0189      	lsls	r1, r1, #6
   32b0a:	1192      	asrs	r2, r2, #6
   32b0c:	428b      	cmp	r3, r1
   32b0e:	d308      	bcc.n	32b22 <__divsi3+0x14a>
   32b10:	0189      	lsls	r1, r1, #6
   32b12:	1192      	asrs	r2, r2, #6
   32b14:	428b      	cmp	r3, r1
   32b16:	d304      	bcc.n	32b22 <__divsi3+0x14a>
   32b18:	0189      	lsls	r1, r1, #6
   32b1a:	d03a      	beq.n	32b92 <__divsi3+0x1ba>
   32b1c:	1192      	asrs	r2, r2, #6
   32b1e:	e000      	b.n	32b22 <__divsi3+0x14a>
   32b20:	0989      	lsrs	r1, r1, #6
   32b22:	09c3      	lsrs	r3, r0, #7
   32b24:	428b      	cmp	r3, r1
   32b26:	d301      	bcc.n	32b2c <__divsi3+0x154>
   32b28:	01cb      	lsls	r3, r1, #7
   32b2a:	1ac0      	subs	r0, r0, r3
   32b2c:	4152      	adcs	r2, r2
   32b2e:	0983      	lsrs	r3, r0, #6
   32b30:	428b      	cmp	r3, r1
   32b32:	d301      	bcc.n	32b38 <__divsi3+0x160>
   32b34:	018b      	lsls	r3, r1, #6
   32b36:	1ac0      	subs	r0, r0, r3
   32b38:	4152      	adcs	r2, r2
   32b3a:	0943      	lsrs	r3, r0, #5
   32b3c:	428b      	cmp	r3, r1
   32b3e:	d301      	bcc.n	32b44 <__divsi3+0x16c>
   32b40:	014b      	lsls	r3, r1, #5
   32b42:	1ac0      	subs	r0, r0, r3
   32b44:	4152      	adcs	r2, r2
   32b46:	0903      	lsrs	r3, r0, #4
   32b48:	428b      	cmp	r3, r1
   32b4a:	d301      	bcc.n	32b50 <__divsi3+0x178>
   32b4c:	010b      	lsls	r3, r1, #4
   32b4e:	1ac0      	subs	r0, r0, r3
   32b50:	4152      	adcs	r2, r2
   32b52:	08c3      	lsrs	r3, r0, #3
   32b54:	428b      	cmp	r3, r1
   32b56:	d301      	bcc.n	32b5c <__divsi3+0x184>
   32b58:	00cb      	lsls	r3, r1, #3
   32b5a:	1ac0      	subs	r0, r0, r3
   32b5c:	4152      	adcs	r2, r2
   32b5e:	0883      	lsrs	r3, r0, #2
   32b60:	428b      	cmp	r3, r1
   32b62:	d301      	bcc.n	32b68 <__divsi3+0x190>
   32b64:	008b      	lsls	r3, r1, #2
   32b66:	1ac0      	subs	r0, r0, r3
   32b68:	4152      	adcs	r2, r2
   32b6a:	d2d9      	bcs.n	32b20 <__divsi3+0x148>
   32b6c:	0843      	lsrs	r3, r0, #1
   32b6e:	428b      	cmp	r3, r1
   32b70:	d301      	bcc.n	32b76 <__divsi3+0x19e>
   32b72:	004b      	lsls	r3, r1, #1
   32b74:	1ac0      	subs	r0, r0, r3
   32b76:	4152      	adcs	r2, r2
   32b78:	1a41      	subs	r1, r0, r1
   32b7a:	d200      	bcs.n	32b7e <__divsi3+0x1a6>
   32b7c:	4601      	mov	r1, r0
   32b7e:	4663      	mov	r3, ip
   32b80:	4152      	adcs	r2, r2
   32b82:	105b      	asrs	r3, r3, #1
   32b84:	4610      	mov	r0, r2
   32b86:	d301      	bcc.n	32b8c <__divsi3+0x1b4>
   32b88:	4240      	negs	r0, r0
   32b8a:	2b00      	cmp	r3, #0
   32b8c:	d500      	bpl.n	32b90 <__divsi3+0x1b8>
   32b8e:	4249      	negs	r1, r1
   32b90:	4770      	bx	lr
   32b92:	4663      	mov	r3, ip
   32b94:	105b      	asrs	r3, r3, #1
   32b96:	d300      	bcc.n	32b9a <__divsi3+0x1c2>
   32b98:	4240      	negs	r0, r0
   32b9a:	b501      	push	{r0, lr}
   32b9c:	2000      	movs	r0, #0
   32b9e:	f000 f805 	bl	32bac <__aeabi_idiv0>
   32ba2:	bd02      	pop	{r1, pc}

00032ba4 <__aeabi_idivmod>:
   32ba4:	2900      	cmp	r1, #0
   32ba6:	d0f8      	beq.n	32b9a <__divsi3+0x1c2>
   32ba8:	e716      	b.n	329d8 <__divsi3>
   32baa:	4770      	bx	lr

00032bac <__aeabi_idiv0>:
   32bac:	4770      	bx	lr
   32bae:	46c0      	nop			; (mov r8, r8)

00032bb0 <__aeabi_lmul>:
   32bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   32bb2:	46ce      	mov	lr, r9
   32bb4:	4647      	mov	r7, r8
   32bb6:	0415      	lsls	r5, r2, #16
   32bb8:	0c2d      	lsrs	r5, r5, #16
   32bba:	002e      	movs	r6, r5
   32bbc:	b580      	push	{r7, lr}
   32bbe:	0407      	lsls	r7, r0, #16
   32bc0:	0c14      	lsrs	r4, r2, #16
   32bc2:	0c3f      	lsrs	r7, r7, #16
   32bc4:	4699      	mov	r9, r3
   32bc6:	0c03      	lsrs	r3, r0, #16
   32bc8:	437e      	muls	r6, r7
   32bca:	435d      	muls	r5, r3
   32bcc:	4367      	muls	r7, r4
   32bce:	4363      	muls	r3, r4
   32bd0:	197f      	adds	r7, r7, r5
   32bd2:	0c34      	lsrs	r4, r6, #16
   32bd4:	19e4      	adds	r4, r4, r7
   32bd6:	469c      	mov	ip, r3
   32bd8:	42a5      	cmp	r5, r4
   32bda:	d903      	bls.n	32be4 <__aeabi_lmul+0x34>
   32bdc:	2380      	movs	r3, #128	; 0x80
   32bde:	025b      	lsls	r3, r3, #9
   32be0:	4698      	mov	r8, r3
   32be2:	44c4      	add	ip, r8
   32be4:	464b      	mov	r3, r9
   32be6:	4351      	muls	r1, r2
   32be8:	4343      	muls	r3, r0
   32bea:	0436      	lsls	r6, r6, #16
   32bec:	0c36      	lsrs	r6, r6, #16
   32bee:	0c25      	lsrs	r5, r4, #16
   32bf0:	0424      	lsls	r4, r4, #16
   32bf2:	4465      	add	r5, ip
   32bf4:	19a4      	adds	r4, r4, r6
   32bf6:	1859      	adds	r1, r3, r1
   32bf8:	1949      	adds	r1, r1, r5
   32bfa:	0020      	movs	r0, r4
   32bfc:	bc0c      	pop	{r2, r3}
   32bfe:	4690      	mov	r8, r2
   32c00:	4699      	mov	r9, r3
   32c02:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032c04 <__aeabi_fmul>:
   32c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32c06:	4657      	mov	r7, sl
   32c08:	464e      	mov	r6, r9
   32c0a:	4645      	mov	r5, r8
   32c0c:	46de      	mov	lr, fp
   32c0e:	b5e0      	push	{r5, r6, r7, lr}
   32c10:	0247      	lsls	r7, r0, #9
   32c12:	0046      	lsls	r6, r0, #1
   32c14:	4688      	mov	r8, r1
   32c16:	0a7f      	lsrs	r7, r7, #9
   32c18:	0e36      	lsrs	r6, r6, #24
   32c1a:	0fc4      	lsrs	r4, r0, #31
   32c1c:	2e00      	cmp	r6, #0
   32c1e:	d047      	beq.n	32cb0 <__aeabi_fmul+0xac>
   32c20:	2eff      	cmp	r6, #255	; 0xff
   32c22:	d024      	beq.n	32c6e <__aeabi_fmul+0x6a>
   32c24:	00fb      	lsls	r3, r7, #3
   32c26:	2780      	movs	r7, #128	; 0x80
   32c28:	04ff      	lsls	r7, r7, #19
   32c2a:	431f      	orrs	r7, r3
   32c2c:	2300      	movs	r3, #0
   32c2e:	4699      	mov	r9, r3
   32c30:	469a      	mov	sl, r3
   32c32:	3e7f      	subs	r6, #127	; 0x7f
   32c34:	4643      	mov	r3, r8
   32c36:	025d      	lsls	r5, r3, #9
   32c38:	0058      	lsls	r0, r3, #1
   32c3a:	0fdb      	lsrs	r3, r3, #31
   32c3c:	0a6d      	lsrs	r5, r5, #9
   32c3e:	0e00      	lsrs	r0, r0, #24
   32c40:	4698      	mov	r8, r3
   32c42:	d043      	beq.n	32ccc <__aeabi_fmul+0xc8>
   32c44:	28ff      	cmp	r0, #255	; 0xff
   32c46:	d03b      	beq.n	32cc0 <__aeabi_fmul+0xbc>
   32c48:	00eb      	lsls	r3, r5, #3
   32c4a:	2580      	movs	r5, #128	; 0x80
   32c4c:	2200      	movs	r2, #0
   32c4e:	04ed      	lsls	r5, r5, #19
   32c50:	431d      	orrs	r5, r3
   32c52:	387f      	subs	r0, #127	; 0x7f
   32c54:	1836      	adds	r6, r6, r0
   32c56:	1c73      	adds	r3, r6, #1
   32c58:	4641      	mov	r1, r8
   32c5a:	469b      	mov	fp, r3
   32c5c:	464b      	mov	r3, r9
   32c5e:	4061      	eors	r1, r4
   32c60:	4313      	orrs	r3, r2
   32c62:	2b0f      	cmp	r3, #15
   32c64:	d864      	bhi.n	32d30 <__aeabi_fmul+0x12c>
   32c66:	4875      	ldr	r0, [pc, #468]	; (32e3c <__aeabi_fmul+0x238>)
   32c68:	009b      	lsls	r3, r3, #2
   32c6a:	58c3      	ldr	r3, [r0, r3]
   32c6c:	469f      	mov	pc, r3
   32c6e:	2f00      	cmp	r7, #0
   32c70:	d142      	bne.n	32cf8 <__aeabi_fmul+0xf4>
   32c72:	2308      	movs	r3, #8
   32c74:	4699      	mov	r9, r3
   32c76:	3b06      	subs	r3, #6
   32c78:	26ff      	movs	r6, #255	; 0xff
   32c7a:	469a      	mov	sl, r3
   32c7c:	e7da      	b.n	32c34 <__aeabi_fmul+0x30>
   32c7e:	4641      	mov	r1, r8
   32c80:	2a02      	cmp	r2, #2
   32c82:	d028      	beq.n	32cd6 <__aeabi_fmul+0xd2>
   32c84:	2a03      	cmp	r2, #3
   32c86:	d100      	bne.n	32c8a <__aeabi_fmul+0x86>
   32c88:	e0ce      	b.n	32e28 <__aeabi_fmul+0x224>
   32c8a:	2a01      	cmp	r2, #1
   32c8c:	d000      	beq.n	32c90 <__aeabi_fmul+0x8c>
   32c8e:	e0ac      	b.n	32dea <__aeabi_fmul+0x1e6>
   32c90:	4011      	ands	r1, r2
   32c92:	2000      	movs	r0, #0
   32c94:	2200      	movs	r2, #0
   32c96:	b2cc      	uxtb	r4, r1
   32c98:	0240      	lsls	r0, r0, #9
   32c9a:	05d2      	lsls	r2, r2, #23
   32c9c:	0a40      	lsrs	r0, r0, #9
   32c9e:	07e4      	lsls	r4, r4, #31
   32ca0:	4310      	orrs	r0, r2
   32ca2:	4320      	orrs	r0, r4
   32ca4:	bc3c      	pop	{r2, r3, r4, r5}
   32ca6:	4690      	mov	r8, r2
   32ca8:	4699      	mov	r9, r3
   32caa:	46a2      	mov	sl, r4
   32cac:	46ab      	mov	fp, r5
   32cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32cb0:	2f00      	cmp	r7, #0
   32cb2:	d115      	bne.n	32ce0 <__aeabi_fmul+0xdc>
   32cb4:	2304      	movs	r3, #4
   32cb6:	4699      	mov	r9, r3
   32cb8:	3b03      	subs	r3, #3
   32cba:	2600      	movs	r6, #0
   32cbc:	469a      	mov	sl, r3
   32cbe:	e7b9      	b.n	32c34 <__aeabi_fmul+0x30>
   32cc0:	20ff      	movs	r0, #255	; 0xff
   32cc2:	2202      	movs	r2, #2
   32cc4:	2d00      	cmp	r5, #0
   32cc6:	d0c5      	beq.n	32c54 <__aeabi_fmul+0x50>
   32cc8:	2203      	movs	r2, #3
   32cca:	e7c3      	b.n	32c54 <__aeabi_fmul+0x50>
   32ccc:	2d00      	cmp	r5, #0
   32cce:	d119      	bne.n	32d04 <__aeabi_fmul+0x100>
   32cd0:	2000      	movs	r0, #0
   32cd2:	2201      	movs	r2, #1
   32cd4:	e7be      	b.n	32c54 <__aeabi_fmul+0x50>
   32cd6:	2401      	movs	r4, #1
   32cd8:	22ff      	movs	r2, #255	; 0xff
   32cda:	400c      	ands	r4, r1
   32cdc:	2000      	movs	r0, #0
   32cde:	e7db      	b.n	32c98 <__aeabi_fmul+0x94>
   32ce0:	0038      	movs	r0, r7
   32ce2:	f001 fd65 	bl	347b0 <__clzsi2>
   32ce6:	2676      	movs	r6, #118	; 0x76
   32ce8:	1f43      	subs	r3, r0, #5
   32cea:	409f      	lsls	r7, r3
   32cec:	2300      	movs	r3, #0
   32cee:	4276      	negs	r6, r6
   32cf0:	1a36      	subs	r6, r6, r0
   32cf2:	4699      	mov	r9, r3
   32cf4:	469a      	mov	sl, r3
   32cf6:	e79d      	b.n	32c34 <__aeabi_fmul+0x30>
   32cf8:	230c      	movs	r3, #12
   32cfa:	4699      	mov	r9, r3
   32cfc:	3b09      	subs	r3, #9
   32cfe:	26ff      	movs	r6, #255	; 0xff
   32d00:	469a      	mov	sl, r3
   32d02:	e797      	b.n	32c34 <__aeabi_fmul+0x30>
   32d04:	0028      	movs	r0, r5
   32d06:	f001 fd53 	bl	347b0 <__clzsi2>
   32d0a:	1f43      	subs	r3, r0, #5
   32d0c:	409d      	lsls	r5, r3
   32d0e:	2376      	movs	r3, #118	; 0x76
   32d10:	425b      	negs	r3, r3
   32d12:	1a18      	subs	r0, r3, r0
   32d14:	2200      	movs	r2, #0
   32d16:	e79d      	b.n	32c54 <__aeabi_fmul+0x50>
   32d18:	2080      	movs	r0, #128	; 0x80
   32d1a:	2400      	movs	r4, #0
   32d1c:	03c0      	lsls	r0, r0, #15
   32d1e:	22ff      	movs	r2, #255	; 0xff
   32d20:	e7ba      	b.n	32c98 <__aeabi_fmul+0x94>
   32d22:	003d      	movs	r5, r7
   32d24:	4652      	mov	r2, sl
   32d26:	e7ab      	b.n	32c80 <__aeabi_fmul+0x7c>
   32d28:	003d      	movs	r5, r7
   32d2a:	0021      	movs	r1, r4
   32d2c:	4652      	mov	r2, sl
   32d2e:	e7a7      	b.n	32c80 <__aeabi_fmul+0x7c>
   32d30:	0c3b      	lsrs	r3, r7, #16
   32d32:	469c      	mov	ip, r3
   32d34:	042a      	lsls	r2, r5, #16
   32d36:	0c12      	lsrs	r2, r2, #16
   32d38:	0c2b      	lsrs	r3, r5, #16
   32d3a:	0014      	movs	r4, r2
   32d3c:	4660      	mov	r0, ip
   32d3e:	4665      	mov	r5, ip
   32d40:	043f      	lsls	r7, r7, #16
   32d42:	0c3f      	lsrs	r7, r7, #16
   32d44:	437c      	muls	r4, r7
   32d46:	4342      	muls	r2, r0
   32d48:	435d      	muls	r5, r3
   32d4a:	437b      	muls	r3, r7
   32d4c:	0c27      	lsrs	r7, r4, #16
   32d4e:	189b      	adds	r3, r3, r2
   32d50:	18ff      	adds	r7, r7, r3
   32d52:	42ba      	cmp	r2, r7
   32d54:	d903      	bls.n	32d5e <__aeabi_fmul+0x15a>
   32d56:	2380      	movs	r3, #128	; 0x80
   32d58:	025b      	lsls	r3, r3, #9
   32d5a:	469c      	mov	ip, r3
   32d5c:	4465      	add	r5, ip
   32d5e:	0424      	lsls	r4, r4, #16
   32d60:	043a      	lsls	r2, r7, #16
   32d62:	0c24      	lsrs	r4, r4, #16
   32d64:	1912      	adds	r2, r2, r4
   32d66:	0193      	lsls	r3, r2, #6
   32d68:	1e5c      	subs	r4, r3, #1
   32d6a:	41a3      	sbcs	r3, r4
   32d6c:	0c3f      	lsrs	r7, r7, #16
   32d6e:	0e92      	lsrs	r2, r2, #26
   32d70:	197d      	adds	r5, r7, r5
   32d72:	431a      	orrs	r2, r3
   32d74:	01ad      	lsls	r5, r5, #6
   32d76:	4315      	orrs	r5, r2
   32d78:	012b      	lsls	r3, r5, #4
   32d7a:	d504      	bpl.n	32d86 <__aeabi_fmul+0x182>
   32d7c:	2301      	movs	r3, #1
   32d7e:	465e      	mov	r6, fp
   32d80:	086a      	lsrs	r2, r5, #1
   32d82:	401d      	ands	r5, r3
   32d84:	4315      	orrs	r5, r2
   32d86:	0032      	movs	r2, r6
   32d88:	327f      	adds	r2, #127	; 0x7f
   32d8a:	2a00      	cmp	r2, #0
   32d8c:	dd25      	ble.n	32dda <__aeabi_fmul+0x1d6>
   32d8e:	076b      	lsls	r3, r5, #29
   32d90:	d004      	beq.n	32d9c <__aeabi_fmul+0x198>
   32d92:	230f      	movs	r3, #15
   32d94:	402b      	ands	r3, r5
   32d96:	2b04      	cmp	r3, #4
   32d98:	d000      	beq.n	32d9c <__aeabi_fmul+0x198>
   32d9a:	3504      	adds	r5, #4
   32d9c:	012b      	lsls	r3, r5, #4
   32d9e:	d503      	bpl.n	32da8 <__aeabi_fmul+0x1a4>
   32da0:	0032      	movs	r2, r6
   32da2:	4b27      	ldr	r3, [pc, #156]	; (32e40 <__aeabi_fmul+0x23c>)
   32da4:	3280      	adds	r2, #128	; 0x80
   32da6:	401d      	ands	r5, r3
   32da8:	2afe      	cmp	r2, #254	; 0xfe
   32daa:	dc94      	bgt.n	32cd6 <__aeabi_fmul+0xd2>
   32dac:	2401      	movs	r4, #1
   32dae:	01a8      	lsls	r0, r5, #6
   32db0:	0a40      	lsrs	r0, r0, #9
   32db2:	b2d2      	uxtb	r2, r2
   32db4:	400c      	ands	r4, r1
   32db6:	e76f      	b.n	32c98 <__aeabi_fmul+0x94>
   32db8:	2080      	movs	r0, #128	; 0x80
   32dba:	03c0      	lsls	r0, r0, #15
   32dbc:	4207      	tst	r7, r0
   32dbe:	d007      	beq.n	32dd0 <__aeabi_fmul+0x1cc>
   32dc0:	4205      	tst	r5, r0
   32dc2:	d105      	bne.n	32dd0 <__aeabi_fmul+0x1cc>
   32dc4:	4328      	orrs	r0, r5
   32dc6:	0240      	lsls	r0, r0, #9
   32dc8:	0a40      	lsrs	r0, r0, #9
   32dca:	4644      	mov	r4, r8
   32dcc:	22ff      	movs	r2, #255	; 0xff
   32dce:	e763      	b.n	32c98 <__aeabi_fmul+0x94>
   32dd0:	4338      	orrs	r0, r7
   32dd2:	0240      	lsls	r0, r0, #9
   32dd4:	0a40      	lsrs	r0, r0, #9
   32dd6:	22ff      	movs	r2, #255	; 0xff
   32dd8:	e75e      	b.n	32c98 <__aeabi_fmul+0x94>
   32dda:	2401      	movs	r4, #1
   32ddc:	1aa3      	subs	r3, r4, r2
   32dde:	2b1b      	cmp	r3, #27
   32de0:	dd05      	ble.n	32dee <__aeabi_fmul+0x1ea>
   32de2:	400c      	ands	r4, r1
   32de4:	2200      	movs	r2, #0
   32de6:	2000      	movs	r0, #0
   32de8:	e756      	b.n	32c98 <__aeabi_fmul+0x94>
   32dea:	465e      	mov	r6, fp
   32dec:	e7cb      	b.n	32d86 <__aeabi_fmul+0x182>
   32dee:	002a      	movs	r2, r5
   32df0:	2020      	movs	r0, #32
   32df2:	40da      	lsrs	r2, r3
   32df4:	1ac3      	subs	r3, r0, r3
   32df6:	409d      	lsls	r5, r3
   32df8:	002b      	movs	r3, r5
   32dfa:	1e5d      	subs	r5, r3, #1
   32dfc:	41ab      	sbcs	r3, r5
   32dfe:	4313      	orrs	r3, r2
   32e00:	075a      	lsls	r2, r3, #29
   32e02:	d004      	beq.n	32e0e <__aeabi_fmul+0x20a>
   32e04:	220f      	movs	r2, #15
   32e06:	401a      	ands	r2, r3
   32e08:	2a04      	cmp	r2, #4
   32e0a:	d000      	beq.n	32e0e <__aeabi_fmul+0x20a>
   32e0c:	3304      	adds	r3, #4
   32e0e:	015a      	lsls	r2, r3, #5
   32e10:	d504      	bpl.n	32e1c <__aeabi_fmul+0x218>
   32e12:	2401      	movs	r4, #1
   32e14:	2201      	movs	r2, #1
   32e16:	400c      	ands	r4, r1
   32e18:	2000      	movs	r0, #0
   32e1a:	e73d      	b.n	32c98 <__aeabi_fmul+0x94>
   32e1c:	2401      	movs	r4, #1
   32e1e:	019b      	lsls	r3, r3, #6
   32e20:	0a58      	lsrs	r0, r3, #9
   32e22:	400c      	ands	r4, r1
   32e24:	2200      	movs	r2, #0
   32e26:	e737      	b.n	32c98 <__aeabi_fmul+0x94>
   32e28:	2080      	movs	r0, #128	; 0x80
   32e2a:	2401      	movs	r4, #1
   32e2c:	03c0      	lsls	r0, r0, #15
   32e2e:	4328      	orrs	r0, r5
   32e30:	0240      	lsls	r0, r0, #9
   32e32:	0a40      	lsrs	r0, r0, #9
   32e34:	400c      	ands	r4, r1
   32e36:	22ff      	movs	r2, #255	; 0xff
   32e38:	e72e      	b.n	32c98 <__aeabi_fmul+0x94>
   32e3a:	46c0      	nop			; (mov r8, r8)
   32e3c:	00039e78 	.word	0x00039e78
   32e40:	f7ffffff 	.word	0xf7ffffff

00032e44 <__aeabi_f2iz>:
   32e44:	0241      	lsls	r1, r0, #9
   32e46:	0043      	lsls	r3, r0, #1
   32e48:	0fc2      	lsrs	r2, r0, #31
   32e4a:	0a49      	lsrs	r1, r1, #9
   32e4c:	0e1b      	lsrs	r3, r3, #24
   32e4e:	2000      	movs	r0, #0
   32e50:	2b7e      	cmp	r3, #126	; 0x7e
   32e52:	dd0d      	ble.n	32e70 <__aeabi_f2iz+0x2c>
   32e54:	2b9d      	cmp	r3, #157	; 0x9d
   32e56:	dc0c      	bgt.n	32e72 <__aeabi_f2iz+0x2e>
   32e58:	2080      	movs	r0, #128	; 0x80
   32e5a:	0400      	lsls	r0, r0, #16
   32e5c:	4301      	orrs	r1, r0
   32e5e:	2b95      	cmp	r3, #149	; 0x95
   32e60:	dc0a      	bgt.n	32e78 <__aeabi_f2iz+0x34>
   32e62:	2096      	movs	r0, #150	; 0x96
   32e64:	1ac3      	subs	r3, r0, r3
   32e66:	40d9      	lsrs	r1, r3
   32e68:	4248      	negs	r0, r1
   32e6a:	2a00      	cmp	r2, #0
   32e6c:	d100      	bne.n	32e70 <__aeabi_f2iz+0x2c>
   32e6e:	0008      	movs	r0, r1
   32e70:	4770      	bx	lr
   32e72:	4b03      	ldr	r3, [pc, #12]	; (32e80 <__aeabi_f2iz+0x3c>)
   32e74:	18d0      	adds	r0, r2, r3
   32e76:	e7fb      	b.n	32e70 <__aeabi_f2iz+0x2c>
   32e78:	3b96      	subs	r3, #150	; 0x96
   32e7a:	4099      	lsls	r1, r3
   32e7c:	e7f4      	b.n	32e68 <__aeabi_f2iz+0x24>
   32e7e:	46c0      	nop			; (mov r8, r8)
   32e80:	7fffffff 	.word	0x7fffffff

00032e84 <__aeabi_i2f>:
   32e84:	b570      	push	{r4, r5, r6, lr}
   32e86:	2800      	cmp	r0, #0
   32e88:	d030      	beq.n	32eec <__aeabi_i2f+0x68>
   32e8a:	17c3      	asrs	r3, r0, #31
   32e8c:	18c4      	adds	r4, r0, r3
   32e8e:	405c      	eors	r4, r3
   32e90:	0fc5      	lsrs	r5, r0, #31
   32e92:	0020      	movs	r0, r4
   32e94:	f001 fc8c 	bl	347b0 <__clzsi2>
   32e98:	239e      	movs	r3, #158	; 0x9e
   32e9a:	1a1b      	subs	r3, r3, r0
   32e9c:	2b96      	cmp	r3, #150	; 0x96
   32e9e:	dc0d      	bgt.n	32ebc <__aeabi_i2f+0x38>
   32ea0:	2296      	movs	r2, #150	; 0x96
   32ea2:	1ad2      	subs	r2, r2, r3
   32ea4:	4094      	lsls	r4, r2
   32ea6:	002a      	movs	r2, r5
   32ea8:	0264      	lsls	r4, r4, #9
   32eaa:	0a64      	lsrs	r4, r4, #9
   32eac:	b2db      	uxtb	r3, r3
   32eae:	0264      	lsls	r4, r4, #9
   32eb0:	05db      	lsls	r3, r3, #23
   32eb2:	0a60      	lsrs	r0, r4, #9
   32eb4:	07d2      	lsls	r2, r2, #31
   32eb6:	4318      	orrs	r0, r3
   32eb8:	4310      	orrs	r0, r2
   32eba:	bd70      	pop	{r4, r5, r6, pc}
   32ebc:	2b99      	cmp	r3, #153	; 0x99
   32ebe:	dc19      	bgt.n	32ef4 <__aeabi_i2f+0x70>
   32ec0:	2299      	movs	r2, #153	; 0x99
   32ec2:	1ad2      	subs	r2, r2, r3
   32ec4:	2a00      	cmp	r2, #0
   32ec6:	dd29      	ble.n	32f1c <__aeabi_i2f+0x98>
   32ec8:	4094      	lsls	r4, r2
   32eca:	0022      	movs	r2, r4
   32ecc:	4c14      	ldr	r4, [pc, #80]	; (32f20 <__aeabi_i2f+0x9c>)
   32ece:	4014      	ands	r4, r2
   32ed0:	0751      	lsls	r1, r2, #29
   32ed2:	d004      	beq.n	32ede <__aeabi_i2f+0x5a>
   32ed4:	210f      	movs	r1, #15
   32ed6:	400a      	ands	r2, r1
   32ed8:	2a04      	cmp	r2, #4
   32eda:	d000      	beq.n	32ede <__aeabi_i2f+0x5a>
   32edc:	3404      	adds	r4, #4
   32ede:	0162      	lsls	r2, r4, #5
   32ee0:	d413      	bmi.n	32f0a <__aeabi_i2f+0x86>
   32ee2:	01a4      	lsls	r4, r4, #6
   32ee4:	0a64      	lsrs	r4, r4, #9
   32ee6:	b2db      	uxtb	r3, r3
   32ee8:	002a      	movs	r2, r5
   32eea:	e7e0      	b.n	32eae <__aeabi_i2f+0x2a>
   32eec:	2200      	movs	r2, #0
   32eee:	2300      	movs	r3, #0
   32ef0:	2400      	movs	r4, #0
   32ef2:	e7dc      	b.n	32eae <__aeabi_i2f+0x2a>
   32ef4:	2205      	movs	r2, #5
   32ef6:	0021      	movs	r1, r4
   32ef8:	1a12      	subs	r2, r2, r0
   32efa:	40d1      	lsrs	r1, r2
   32efc:	22b9      	movs	r2, #185	; 0xb9
   32efe:	1ad2      	subs	r2, r2, r3
   32f00:	4094      	lsls	r4, r2
   32f02:	1e62      	subs	r2, r4, #1
   32f04:	4194      	sbcs	r4, r2
   32f06:	430c      	orrs	r4, r1
   32f08:	e7da      	b.n	32ec0 <__aeabi_i2f+0x3c>
   32f0a:	4b05      	ldr	r3, [pc, #20]	; (32f20 <__aeabi_i2f+0x9c>)
   32f0c:	002a      	movs	r2, r5
   32f0e:	401c      	ands	r4, r3
   32f10:	239f      	movs	r3, #159	; 0x9f
   32f12:	01a4      	lsls	r4, r4, #6
   32f14:	1a1b      	subs	r3, r3, r0
   32f16:	0a64      	lsrs	r4, r4, #9
   32f18:	b2db      	uxtb	r3, r3
   32f1a:	e7c8      	b.n	32eae <__aeabi_i2f+0x2a>
   32f1c:	0022      	movs	r2, r4
   32f1e:	e7d5      	b.n	32ecc <__aeabi_i2f+0x48>
   32f20:	fbffffff 	.word	0xfbffffff

00032f24 <__aeabi_dadd>:
   32f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32f26:	4645      	mov	r5, r8
   32f28:	46de      	mov	lr, fp
   32f2a:	4657      	mov	r7, sl
   32f2c:	464e      	mov	r6, r9
   32f2e:	030c      	lsls	r4, r1, #12
   32f30:	b5e0      	push	{r5, r6, r7, lr}
   32f32:	004e      	lsls	r6, r1, #1
   32f34:	0fc9      	lsrs	r1, r1, #31
   32f36:	4688      	mov	r8, r1
   32f38:	000d      	movs	r5, r1
   32f3a:	0a61      	lsrs	r1, r4, #9
   32f3c:	0f44      	lsrs	r4, r0, #29
   32f3e:	430c      	orrs	r4, r1
   32f40:	00c7      	lsls	r7, r0, #3
   32f42:	0319      	lsls	r1, r3, #12
   32f44:	0058      	lsls	r0, r3, #1
   32f46:	0fdb      	lsrs	r3, r3, #31
   32f48:	469b      	mov	fp, r3
   32f4a:	0a4b      	lsrs	r3, r1, #9
   32f4c:	0f51      	lsrs	r1, r2, #29
   32f4e:	430b      	orrs	r3, r1
   32f50:	0d76      	lsrs	r6, r6, #21
   32f52:	0d40      	lsrs	r0, r0, #21
   32f54:	0019      	movs	r1, r3
   32f56:	00d2      	lsls	r2, r2, #3
   32f58:	45d8      	cmp	r8, fp
   32f5a:	d100      	bne.n	32f5e <__aeabi_dadd+0x3a>
   32f5c:	e0ae      	b.n	330bc <__aeabi_dadd+0x198>
   32f5e:	1a35      	subs	r5, r6, r0
   32f60:	2d00      	cmp	r5, #0
   32f62:	dc00      	bgt.n	32f66 <__aeabi_dadd+0x42>
   32f64:	e0f6      	b.n	33154 <__aeabi_dadd+0x230>
   32f66:	2800      	cmp	r0, #0
   32f68:	d10f      	bne.n	32f8a <__aeabi_dadd+0x66>
   32f6a:	4313      	orrs	r3, r2
   32f6c:	d100      	bne.n	32f70 <__aeabi_dadd+0x4c>
   32f6e:	e0db      	b.n	33128 <__aeabi_dadd+0x204>
   32f70:	1e6b      	subs	r3, r5, #1
   32f72:	2b00      	cmp	r3, #0
   32f74:	d000      	beq.n	32f78 <__aeabi_dadd+0x54>
   32f76:	e137      	b.n	331e8 <__aeabi_dadd+0x2c4>
   32f78:	1aba      	subs	r2, r7, r2
   32f7a:	4297      	cmp	r7, r2
   32f7c:	41bf      	sbcs	r7, r7
   32f7e:	1a64      	subs	r4, r4, r1
   32f80:	427f      	negs	r7, r7
   32f82:	1be4      	subs	r4, r4, r7
   32f84:	2601      	movs	r6, #1
   32f86:	0017      	movs	r7, r2
   32f88:	e024      	b.n	32fd4 <__aeabi_dadd+0xb0>
   32f8a:	4bc6      	ldr	r3, [pc, #792]	; (332a4 <__aeabi_dadd+0x380>)
   32f8c:	429e      	cmp	r6, r3
   32f8e:	d04d      	beq.n	3302c <__aeabi_dadd+0x108>
   32f90:	2380      	movs	r3, #128	; 0x80
   32f92:	041b      	lsls	r3, r3, #16
   32f94:	4319      	orrs	r1, r3
   32f96:	2d38      	cmp	r5, #56	; 0x38
   32f98:	dd00      	ble.n	32f9c <__aeabi_dadd+0x78>
   32f9a:	e107      	b.n	331ac <__aeabi_dadd+0x288>
   32f9c:	2d1f      	cmp	r5, #31
   32f9e:	dd00      	ble.n	32fa2 <__aeabi_dadd+0x7e>
   32fa0:	e138      	b.n	33214 <__aeabi_dadd+0x2f0>
   32fa2:	2020      	movs	r0, #32
   32fa4:	1b43      	subs	r3, r0, r5
   32fa6:	469a      	mov	sl, r3
   32fa8:	000b      	movs	r3, r1
   32faa:	4650      	mov	r0, sl
   32fac:	4083      	lsls	r3, r0
   32fae:	4699      	mov	r9, r3
   32fb0:	0013      	movs	r3, r2
   32fb2:	4648      	mov	r0, r9
   32fb4:	40eb      	lsrs	r3, r5
   32fb6:	4318      	orrs	r0, r3
   32fb8:	0003      	movs	r3, r0
   32fba:	4650      	mov	r0, sl
   32fbc:	4082      	lsls	r2, r0
   32fbe:	1e50      	subs	r0, r2, #1
   32fc0:	4182      	sbcs	r2, r0
   32fc2:	40e9      	lsrs	r1, r5
   32fc4:	431a      	orrs	r2, r3
   32fc6:	1aba      	subs	r2, r7, r2
   32fc8:	1a61      	subs	r1, r4, r1
   32fca:	4297      	cmp	r7, r2
   32fcc:	41a4      	sbcs	r4, r4
   32fce:	0017      	movs	r7, r2
   32fd0:	4264      	negs	r4, r4
   32fd2:	1b0c      	subs	r4, r1, r4
   32fd4:	0223      	lsls	r3, r4, #8
   32fd6:	d562      	bpl.n	3309e <__aeabi_dadd+0x17a>
   32fd8:	0264      	lsls	r4, r4, #9
   32fda:	0a65      	lsrs	r5, r4, #9
   32fdc:	2d00      	cmp	r5, #0
   32fde:	d100      	bne.n	32fe2 <__aeabi_dadd+0xbe>
   32fe0:	e0df      	b.n	331a2 <__aeabi_dadd+0x27e>
   32fe2:	0028      	movs	r0, r5
   32fe4:	f001 fbe4 	bl	347b0 <__clzsi2>
   32fe8:	0003      	movs	r3, r0
   32fea:	3b08      	subs	r3, #8
   32fec:	2b1f      	cmp	r3, #31
   32fee:	dd00      	ble.n	32ff2 <__aeabi_dadd+0xce>
   32ff0:	e0d2      	b.n	33198 <__aeabi_dadd+0x274>
   32ff2:	2220      	movs	r2, #32
   32ff4:	003c      	movs	r4, r7
   32ff6:	1ad2      	subs	r2, r2, r3
   32ff8:	409d      	lsls	r5, r3
   32ffa:	40d4      	lsrs	r4, r2
   32ffc:	409f      	lsls	r7, r3
   32ffe:	4325      	orrs	r5, r4
   33000:	429e      	cmp	r6, r3
   33002:	dd00      	ble.n	33006 <__aeabi_dadd+0xe2>
   33004:	e0c4      	b.n	33190 <__aeabi_dadd+0x26c>
   33006:	1b9e      	subs	r6, r3, r6
   33008:	1c73      	adds	r3, r6, #1
   3300a:	2b1f      	cmp	r3, #31
   3300c:	dd00      	ble.n	33010 <__aeabi_dadd+0xec>
   3300e:	e0f1      	b.n	331f4 <__aeabi_dadd+0x2d0>
   33010:	2220      	movs	r2, #32
   33012:	0038      	movs	r0, r7
   33014:	0029      	movs	r1, r5
   33016:	1ad2      	subs	r2, r2, r3
   33018:	40d8      	lsrs	r0, r3
   3301a:	4091      	lsls	r1, r2
   3301c:	4097      	lsls	r7, r2
   3301e:	002c      	movs	r4, r5
   33020:	4301      	orrs	r1, r0
   33022:	1e78      	subs	r0, r7, #1
   33024:	4187      	sbcs	r7, r0
   33026:	40dc      	lsrs	r4, r3
   33028:	2600      	movs	r6, #0
   3302a:	430f      	orrs	r7, r1
   3302c:	077b      	lsls	r3, r7, #29
   3302e:	d009      	beq.n	33044 <__aeabi_dadd+0x120>
   33030:	230f      	movs	r3, #15
   33032:	403b      	ands	r3, r7
   33034:	2b04      	cmp	r3, #4
   33036:	d005      	beq.n	33044 <__aeabi_dadd+0x120>
   33038:	1d3b      	adds	r3, r7, #4
   3303a:	42bb      	cmp	r3, r7
   3303c:	41bf      	sbcs	r7, r7
   3303e:	427f      	negs	r7, r7
   33040:	19e4      	adds	r4, r4, r7
   33042:	001f      	movs	r7, r3
   33044:	0223      	lsls	r3, r4, #8
   33046:	d52c      	bpl.n	330a2 <__aeabi_dadd+0x17e>
   33048:	4b96      	ldr	r3, [pc, #600]	; (332a4 <__aeabi_dadd+0x380>)
   3304a:	3601      	adds	r6, #1
   3304c:	429e      	cmp	r6, r3
   3304e:	d100      	bne.n	33052 <__aeabi_dadd+0x12e>
   33050:	e09a      	b.n	33188 <__aeabi_dadd+0x264>
   33052:	4645      	mov	r5, r8
   33054:	4b94      	ldr	r3, [pc, #592]	; (332a8 <__aeabi_dadd+0x384>)
   33056:	08ff      	lsrs	r7, r7, #3
   33058:	401c      	ands	r4, r3
   3305a:	0760      	lsls	r0, r4, #29
   3305c:	0576      	lsls	r6, r6, #21
   3305e:	0264      	lsls	r4, r4, #9
   33060:	4307      	orrs	r7, r0
   33062:	0b24      	lsrs	r4, r4, #12
   33064:	0d76      	lsrs	r6, r6, #21
   33066:	2100      	movs	r1, #0
   33068:	0324      	lsls	r4, r4, #12
   3306a:	0b23      	lsrs	r3, r4, #12
   3306c:	0d0c      	lsrs	r4, r1, #20
   3306e:	4a8f      	ldr	r2, [pc, #572]	; (332ac <__aeabi_dadd+0x388>)
   33070:	0524      	lsls	r4, r4, #20
   33072:	431c      	orrs	r4, r3
   33074:	4014      	ands	r4, r2
   33076:	0533      	lsls	r3, r6, #20
   33078:	4323      	orrs	r3, r4
   3307a:	005b      	lsls	r3, r3, #1
   3307c:	07ed      	lsls	r5, r5, #31
   3307e:	085b      	lsrs	r3, r3, #1
   33080:	432b      	orrs	r3, r5
   33082:	0038      	movs	r0, r7
   33084:	0019      	movs	r1, r3
   33086:	bc3c      	pop	{r2, r3, r4, r5}
   33088:	4690      	mov	r8, r2
   3308a:	4699      	mov	r9, r3
   3308c:	46a2      	mov	sl, r4
   3308e:	46ab      	mov	fp, r5
   33090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33092:	4664      	mov	r4, ip
   33094:	4304      	orrs	r4, r0
   33096:	d100      	bne.n	3309a <__aeabi_dadd+0x176>
   33098:	e211      	b.n	334be <__aeabi_dadd+0x59a>
   3309a:	0004      	movs	r4, r0
   3309c:	4667      	mov	r7, ip
   3309e:	077b      	lsls	r3, r7, #29
   330a0:	d1c6      	bne.n	33030 <__aeabi_dadd+0x10c>
   330a2:	4645      	mov	r5, r8
   330a4:	0760      	lsls	r0, r4, #29
   330a6:	08ff      	lsrs	r7, r7, #3
   330a8:	4307      	orrs	r7, r0
   330aa:	08e4      	lsrs	r4, r4, #3
   330ac:	4b7d      	ldr	r3, [pc, #500]	; (332a4 <__aeabi_dadd+0x380>)
   330ae:	429e      	cmp	r6, r3
   330b0:	d030      	beq.n	33114 <__aeabi_dadd+0x1f0>
   330b2:	0324      	lsls	r4, r4, #12
   330b4:	0576      	lsls	r6, r6, #21
   330b6:	0b24      	lsrs	r4, r4, #12
   330b8:	0d76      	lsrs	r6, r6, #21
   330ba:	e7d4      	b.n	33066 <__aeabi_dadd+0x142>
   330bc:	1a33      	subs	r3, r6, r0
   330be:	469a      	mov	sl, r3
   330c0:	2b00      	cmp	r3, #0
   330c2:	dd78      	ble.n	331b6 <__aeabi_dadd+0x292>
   330c4:	2800      	cmp	r0, #0
   330c6:	d031      	beq.n	3312c <__aeabi_dadd+0x208>
   330c8:	4876      	ldr	r0, [pc, #472]	; (332a4 <__aeabi_dadd+0x380>)
   330ca:	4286      	cmp	r6, r0
   330cc:	d0ae      	beq.n	3302c <__aeabi_dadd+0x108>
   330ce:	2080      	movs	r0, #128	; 0x80
   330d0:	0400      	lsls	r0, r0, #16
   330d2:	4301      	orrs	r1, r0
   330d4:	4653      	mov	r3, sl
   330d6:	2b38      	cmp	r3, #56	; 0x38
   330d8:	dc00      	bgt.n	330dc <__aeabi_dadd+0x1b8>
   330da:	e0e9      	b.n	332b0 <__aeabi_dadd+0x38c>
   330dc:	430a      	orrs	r2, r1
   330de:	1e51      	subs	r1, r2, #1
   330e0:	418a      	sbcs	r2, r1
   330e2:	2100      	movs	r1, #0
   330e4:	19d2      	adds	r2, r2, r7
   330e6:	42ba      	cmp	r2, r7
   330e8:	41bf      	sbcs	r7, r7
   330ea:	1909      	adds	r1, r1, r4
   330ec:	427c      	negs	r4, r7
   330ee:	0017      	movs	r7, r2
   330f0:	190c      	adds	r4, r1, r4
   330f2:	0223      	lsls	r3, r4, #8
   330f4:	d5d3      	bpl.n	3309e <__aeabi_dadd+0x17a>
   330f6:	4b6b      	ldr	r3, [pc, #428]	; (332a4 <__aeabi_dadd+0x380>)
   330f8:	3601      	adds	r6, #1
   330fa:	429e      	cmp	r6, r3
   330fc:	d100      	bne.n	33100 <__aeabi_dadd+0x1dc>
   330fe:	e13a      	b.n	33376 <__aeabi_dadd+0x452>
   33100:	2001      	movs	r0, #1
   33102:	4b69      	ldr	r3, [pc, #420]	; (332a8 <__aeabi_dadd+0x384>)
   33104:	401c      	ands	r4, r3
   33106:	087b      	lsrs	r3, r7, #1
   33108:	4007      	ands	r7, r0
   3310a:	431f      	orrs	r7, r3
   3310c:	07e0      	lsls	r0, r4, #31
   3310e:	4307      	orrs	r7, r0
   33110:	0864      	lsrs	r4, r4, #1
   33112:	e78b      	b.n	3302c <__aeabi_dadd+0x108>
   33114:	0023      	movs	r3, r4
   33116:	433b      	orrs	r3, r7
   33118:	d100      	bne.n	3311c <__aeabi_dadd+0x1f8>
   3311a:	e1cb      	b.n	334b4 <__aeabi_dadd+0x590>
   3311c:	2280      	movs	r2, #128	; 0x80
   3311e:	0312      	lsls	r2, r2, #12
   33120:	4314      	orrs	r4, r2
   33122:	0324      	lsls	r4, r4, #12
   33124:	0b24      	lsrs	r4, r4, #12
   33126:	e79e      	b.n	33066 <__aeabi_dadd+0x142>
   33128:	002e      	movs	r6, r5
   3312a:	e77f      	b.n	3302c <__aeabi_dadd+0x108>
   3312c:	0008      	movs	r0, r1
   3312e:	4310      	orrs	r0, r2
   33130:	d100      	bne.n	33134 <__aeabi_dadd+0x210>
   33132:	e0b4      	b.n	3329e <__aeabi_dadd+0x37a>
   33134:	1e58      	subs	r0, r3, #1
   33136:	2800      	cmp	r0, #0
   33138:	d000      	beq.n	3313c <__aeabi_dadd+0x218>
   3313a:	e0de      	b.n	332fa <__aeabi_dadd+0x3d6>
   3313c:	18ba      	adds	r2, r7, r2
   3313e:	42ba      	cmp	r2, r7
   33140:	419b      	sbcs	r3, r3
   33142:	1864      	adds	r4, r4, r1
   33144:	425b      	negs	r3, r3
   33146:	18e4      	adds	r4, r4, r3
   33148:	0017      	movs	r7, r2
   3314a:	2601      	movs	r6, #1
   3314c:	0223      	lsls	r3, r4, #8
   3314e:	d5a6      	bpl.n	3309e <__aeabi_dadd+0x17a>
   33150:	2602      	movs	r6, #2
   33152:	e7d5      	b.n	33100 <__aeabi_dadd+0x1dc>
   33154:	2d00      	cmp	r5, #0
   33156:	d16e      	bne.n	33236 <__aeabi_dadd+0x312>
   33158:	1c70      	adds	r0, r6, #1
   3315a:	0540      	lsls	r0, r0, #21
   3315c:	0d40      	lsrs	r0, r0, #21
   3315e:	2801      	cmp	r0, #1
   33160:	dc00      	bgt.n	33164 <__aeabi_dadd+0x240>
   33162:	e0f9      	b.n	33358 <__aeabi_dadd+0x434>
   33164:	1ab8      	subs	r0, r7, r2
   33166:	4684      	mov	ip, r0
   33168:	4287      	cmp	r7, r0
   3316a:	4180      	sbcs	r0, r0
   3316c:	1ae5      	subs	r5, r4, r3
   3316e:	4240      	negs	r0, r0
   33170:	1a2d      	subs	r5, r5, r0
   33172:	0228      	lsls	r0, r5, #8
   33174:	d400      	bmi.n	33178 <__aeabi_dadd+0x254>
   33176:	e089      	b.n	3328c <__aeabi_dadd+0x368>
   33178:	1bd7      	subs	r7, r2, r7
   3317a:	42ba      	cmp	r2, r7
   3317c:	4192      	sbcs	r2, r2
   3317e:	1b1c      	subs	r4, r3, r4
   33180:	4252      	negs	r2, r2
   33182:	1aa5      	subs	r5, r4, r2
   33184:	46d8      	mov	r8, fp
   33186:	e729      	b.n	32fdc <__aeabi_dadd+0xb8>
   33188:	4645      	mov	r5, r8
   3318a:	2400      	movs	r4, #0
   3318c:	2700      	movs	r7, #0
   3318e:	e76a      	b.n	33066 <__aeabi_dadd+0x142>
   33190:	4c45      	ldr	r4, [pc, #276]	; (332a8 <__aeabi_dadd+0x384>)
   33192:	1af6      	subs	r6, r6, r3
   33194:	402c      	ands	r4, r5
   33196:	e749      	b.n	3302c <__aeabi_dadd+0x108>
   33198:	003d      	movs	r5, r7
   3319a:	3828      	subs	r0, #40	; 0x28
   3319c:	4085      	lsls	r5, r0
   3319e:	2700      	movs	r7, #0
   331a0:	e72e      	b.n	33000 <__aeabi_dadd+0xdc>
   331a2:	0038      	movs	r0, r7
   331a4:	f001 fb04 	bl	347b0 <__clzsi2>
   331a8:	3020      	adds	r0, #32
   331aa:	e71d      	b.n	32fe8 <__aeabi_dadd+0xc4>
   331ac:	430a      	orrs	r2, r1
   331ae:	1e51      	subs	r1, r2, #1
   331b0:	418a      	sbcs	r2, r1
   331b2:	2100      	movs	r1, #0
   331b4:	e707      	b.n	32fc6 <__aeabi_dadd+0xa2>
   331b6:	2b00      	cmp	r3, #0
   331b8:	d000      	beq.n	331bc <__aeabi_dadd+0x298>
   331ba:	e0f3      	b.n	333a4 <__aeabi_dadd+0x480>
   331bc:	1c70      	adds	r0, r6, #1
   331be:	0543      	lsls	r3, r0, #21
   331c0:	0d5b      	lsrs	r3, r3, #21
   331c2:	2b01      	cmp	r3, #1
   331c4:	dc00      	bgt.n	331c8 <__aeabi_dadd+0x2a4>
   331c6:	e0ad      	b.n	33324 <__aeabi_dadd+0x400>
   331c8:	4b36      	ldr	r3, [pc, #216]	; (332a4 <__aeabi_dadd+0x380>)
   331ca:	4298      	cmp	r0, r3
   331cc:	d100      	bne.n	331d0 <__aeabi_dadd+0x2ac>
   331ce:	e0d1      	b.n	33374 <__aeabi_dadd+0x450>
   331d0:	18ba      	adds	r2, r7, r2
   331d2:	42ba      	cmp	r2, r7
   331d4:	41bf      	sbcs	r7, r7
   331d6:	1864      	adds	r4, r4, r1
   331d8:	427f      	negs	r7, r7
   331da:	19e4      	adds	r4, r4, r7
   331dc:	07e7      	lsls	r7, r4, #31
   331de:	0852      	lsrs	r2, r2, #1
   331e0:	4317      	orrs	r7, r2
   331e2:	0864      	lsrs	r4, r4, #1
   331e4:	0006      	movs	r6, r0
   331e6:	e721      	b.n	3302c <__aeabi_dadd+0x108>
   331e8:	482e      	ldr	r0, [pc, #184]	; (332a4 <__aeabi_dadd+0x380>)
   331ea:	4285      	cmp	r5, r0
   331ec:	d100      	bne.n	331f0 <__aeabi_dadd+0x2cc>
   331ee:	e093      	b.n	33318 <__aeabi_dadd+0x3f4>
   331f0:	001d      	movs	r5, r3
   331f2:	e6d0      	b.n	32f96 <__aeabi_dadd+0x72>
   331f4:	0029      	movs	r1, r5
   331f6:	3e1f      	subs	r6, #31
   331f8:	40f1      	lsrs	r1, r6
   331fa:	2b20      	cmp	r3, #32
   331fc:	d100      	bne.n	33200 <__aeabi_dadd+0x2dc>
   331fe:	e08d      	b.n	3331c <__aeabi_dadd+0x3f8>
   33200:	2240      	movs	r2, #64	; 0x40
   33202:	1ad3      	subs	r3, r2, r3
   33204:	409d      	lsls	r5, r3
   33206:	432f      	orrs	r7, r5
   33208:	1e7d      	subs	r5, r7, #1
   3320a:	41af      	sbcs	r7, r5
   3320c:	2400      	movs	r4, #0
   3320e:	430f      	orrs	r7, r1
   33210:	2600      	movs	r6, #0
   33212:	e744      	b.n	3309e <__aeabi_dadd+0x17a>
   33214:	002b      	movs	r3, r5
   33216:	0008      	movs	r0, r1
   33218:	3b20      	subs	r3, #32
   3321a:	40d8      	lsrs	r0, r3
   3321c:	0003      	movs	r3, r0
   3321e:	2d20      	cmp	r5, #32
   33220:	d100      	bne.n	33224 <__aeabi_dadd+0x300>
   33222:	e07d      	b.n	33320 <__aeabi_dadd+0x3fc>
   33224:	2040      	movs	r0, #64	; 0x40
   33226:	1b45      	subs	r5, r0, r5
   33228:	40a9      	lsls	r1, r5
   3322a:	430a      	orrs	r2, r1
   3322c:	1e51      	subs	r1, r2, #1
   3322e:	418a      	sbcs	r2, r1
   33230:	2100      	movs	r1, #0
   33232:	431a      	orrs	r2, r3
   33234:	e6c7      	b.n	32fc6 <__aeabi_dadd+0xa2>
   33236:	2e00      	cmp	r6, #0
   33238:	d050      	beq.n	332dc <__aeabi_dadd+0x3b8>
   3323a:	4e1a      	ldr	r6, [pc, #104]	; (332a4 <__aeabi_dadd+0x380>)
   3323c:	42b0      	cmp	r0, r6
   3323e:	d057      	beq.n	332f0 <__aeabi_dadd+0x3cc>
   33240:	2680      	movs	r6, #128	; 0x80
   33242:	426b      	negs	r3, r5
   33244:	4699      	mov	r9, r3
   33246:	0436      	lsls	r6, r6, #16
   33248:	4334      	orrs	r4, r6
   3324a:	464b      	mov	r3, r9
   3324c:	2b38      	cmp	r3, #56	; 0x38
   3324e:	dd00      	ble.n	33252 <__aeabi_dadd+0x32e>
   33250:	e0d6      	b.n	33400 <__aeabi_dadd+0x4dc>
   33252:	2b1f      	cmp	r3, #31
   33254:	dd00      	ble.n	33258 <__aeabi_dadd+0x334>
   33256:	e135      	b.n	334c4 <__aeabi_dadd+0x5a0>
   33258:	2620      	movs	r6, #32
   3325a:	1af5      	subs	r5, r6, r3
   3325c:	0026      	movs	r6, r4
   3325e:	40ae      	lsls	r6, r5
   33260:	46b2      	mov	sl, r6
   33262:	003e      	movs	r6, r7
   33264:	40de      	lsrs	r6, r3
   33266:	46ac      	mov	ip, r5
   33268:	0035      	movs	r5, r6
   3326a:	4656      	mov	r6, sl
   3326c:	432e      	orrs	r6, r5
   3326e:	4665      	mov	r5, ip
   33270:	40af      	lsls	r7, r5
   33272:	1e7d      	subs	r5, r7, #1
   33274:	41af      	sbcs	r7, r5
   33276:	40dc      	lsrs	r4, r3
   33278:	4337      	orrs	r7, r6
   3327a:	1bd7      	subs	r7, r2, r7
   3327c:	42ba      	cmp	r2, r7
   3327e:	4192      	sbcs	r2, r2
   33280:	1b0c      	subs	r4, r1, r4
   33282:	4252      	negs	r2, r2
   33284:	1aa4      	subs	r4, r4, r2
   33286:	0006      	movs	r6, r0
   33288:	46d8      	mov	r8, fp
   3328a:	e6a3      	b.n	32fd4 <__aeabi_dadd+0xb0>
   3328c:	4664      	mov	r4, ip
   3328e:	4667      	mov	r7, ip
   33290:	432c      	orrs	r4, r5
   33292:	d000      	beq.n	33296 <__aeabi_dadd+0x372>
   33294:	e6a2      	b.n	32fdc <__aeabi_dadd+0xb8>
   33296:	2500      	movs	r5, #0
   33298:	2600      	movs	r6, #0
   3329a:	2700      	movs	r7, #0
   3329c:	e706      	b.n	330ac <__aeabi_dadd+0x188>
   3329e:	001e      	movs	r6, r3
   332a0:	e6c4      	b.n	3302c <__aeabi_dadd+0x108>
   332a2:	46c0      	nop			; (mov r8, r8)
   332a4:	000007ff 	.word	0x000007ff
   332a8:	ff7fffff 	.word	0xff7fffff
   332ac:	800fffff 	.word	0x800fffff
   332b0:	2b1f      	cmp	r3, #31
   332b2:	dc63      	bgt.n	3337c <__aeabi_dadd+0x458>
   332b4:	2020      	movs	r0, #32
   332b6:	1ac3      	subs	r3, r0, r3
   332b8:	0008      	movs	r0, r1
   332ba:	4098      	lsls	r0, r3
   332bc:	469c      	mov	ip, r3
   332be:	4683      	mov	fp, r0
   332c0:	4653      	mov	r3, sl
   332c2:	0010      	movs	r0, r2
   332c4:	40d8      	lsrs	r0, r3
   332c6:	0003      	movs	r3, r0
   332c8:	4658      	mov	r0, fp
   332ca:	4318      	orrs	r0, r3
   332cc:	4663      	mov	r3, ip
   332ce:	409a      	lsls	r2, r3
   332d0:	1e53      	subs	r3, r2, #1
   332d2:	419a      	sbcs	r2, r3
   332d4:	4653      	mov	r3, sl
   332d6:	4302      	orrs	r2, r0
   332d8:	40d9      	lsrs	r1, r3
   332da:	e703      	b.n	330e4 <__aeabi_dadd+0x1c0>
   332dc:	0026      	movs	r6, r4
   332de:	433e      	orrs	r6, r7
   332e0:	d006      	beq.n	332f0 <__aeabi_dadd+0x3cc>
   332e2:	43eb      	mvns	r3, r5
   332e4:	4699      	mov	r9, r3
   332e6:	2b00      	cmp	r3, #0
   332e8:	d0c7      	beq.n	3327a <__aeabi_dadd+0x356>
   332ea:	4e94      	ldr	r6, [pc, #592]	; (3353c <__aeabi_dadd+0x618>)
   332ec:	42b0      	cmp	r0, r6
   332ee:	d1ac      	bne.n	3324a <__aeabi_dadd+0x326>
   332f0:	000c      	movs	r4, r1
   332f2:	0017      	movs	r7, r2
   332f4:	0006      	movs	r6, r0
   332f6:	46d8      	mov	r8, fp
   332f8:	e698      	b.n	3302c <__aeabi_dadd+0x108>
   332fa:	4b90      	ldr	r3, [pc, #576]	; (3353c <__aeabi_dadd+0x618>)
   332fc:	459a      	cmp	sl, r3
   332fe:	d00b      	beq.n	33318 <__aeabi_dadd+0x3f4>
   33300:	4682      	mov	sl, r0
   33302:	e6e7      	b.n	330d4 <__aeabi_dadd+0x1b0>
   33304:	2800      	cmp	r0, #0
   33306:	d000      	beq.n	3330a <__aeabi_dadd+0x3e6>
   33308:	e09e      	b.n	33448 <__aeabi_dadd+0x524>
   3330a:	0018      	movs	r0, r3
   3330c:	4310      	orrs	r0, r2
   3330e:	d100      	bne.n	33312 <__aeabi_dadd+0x3ee>
   33310:	e0e9      	b.n	334e6 <__aeabi_dadd+0x5c2>
   33312:	001c      	movs	r4, r3
   33314:	0017      	movs	r7, r2
   33316:	46d8      	mov	r8, fp
   33318:	4e88      	ldr	r6, [pc, #544]	; (3353c <__aeabi_dadd+0x618>)
   3331a:	e687      	b.n	3302c <__aeabi_dadd+0x108>
   3331c:	2500      	movs	r5, #0
   3331e:	e772      	b.n	33206 <__aeabi_dadd+0x2e2>
   33320:	2100      	movs	r1, #0
   33322:	e782      	b.n	3322a <__aeabi_dadd+0x306>
   33324:	0023      	movs	r3, r4
   33326:	433b      	orrs	r3, r7
   33328:	2e00      	cmp	r6, #0
   3332a:	d000      	beq.n	3332e <__aeabi_dadd+0x40a>
   3332c:	e0ab      	b.n	33486 <__aeabi_dadd+0x562>
   3332e:	2b00      	cmp	r3, #0
   33330:	d100      	bne.n	33334 <__aeabi_dadd+0x410>
   33332:	e0e7      	b.n	33504 <__aeabi_dadd+0x5e0>
   33334:	000b      	movs	r3, r1
   33336:	4313      	orrs	r3, r2
   33338:	d100      	bne.n	3333c <__aeabi_dadd+0x418>
   3333a:	e677      	b.n	3302c <__aeabi_dadd+0x108>
   3333c:	18ba      	adds	r2, r7, r2
   3333e:	42ba      	cmp	r2, r7
   33340:	41bf      	sbcs	r7, r7
   33342:	1864      	adds	r4, r4, r1
   33344:	427f      	negs	r7, r7
   33346:	19e4      	adds	r4, r4, r7
   33348:	0223      	lsls	r3, r4, #8
   3334a:	d400      	bmi.n	3334e <__aeabi_dadd+0x42a>
   3334c:	e0f2      	b.n	33534 <__aeabi_dadd+0x610>
   3334e:	4b7c      	ldr	r3, [pc, #496]	; (33540 <__aeabi_dadd+0x61c>)
   33350:	0017      	movs	r7, r2
   33352:	401c      	ands	r4, r3
   33354:	0006      	movs	r6, r0
   33356:	e669      	b.n	3302c <__aeabi_dadd+0x108>
   33358:	0020      	movs	r0, r4
   3335a:	4338      	orrs	r0, r7
   3335c:	2e00      	cmp	r6, #0
   3335e:	d1d1      	bne.n	33304 <__aeabi_dadd+0x3e0>
   33360:	2800      	cmp	r0, #0
   33362:	d15b      	bne.n	3341c <__aeabi_dadd+0x4f8>
   33364:	001c      	movs	r4, r3
   33366:	4314      	orrs	r4, r2
   33368:	d100      	bne.n	3336c <__aeabi_dadd+0x448>
   3336a:	e0a8      	b.n	334be <__aeabi_dadd+0x59a>
   3336c:	001c      	movs	r4, r3
   3336e:	0017      	movs	r7, r2
   33370:	46d8      	mov	r8, fp
   33372:	e65b      	b.n	3302c <__aeabi_dadd+0x108>
   33374:	0006      	movs	r6, r0
   33376:	2400      	movs	r4, #0
   33378:	2700      	movs	r7, #0
   3337a:	e697      	b.n	330ac <__aeabi_dadd+0x188>
   3337c:	4650      	mov	r0, sl
   3337e:	000b      	movs	r3, r1
   33380:	3820      	subs	r0, #32
   33382:	40c3      	lsrs	r3, r0
   33384:	4699      	mov	r9, r3
   33386:	4653      	mov	r3, sl
   33388:	2b20      	cmp	r3, #32
   3338a:	d100      	bne.n	3338e <__aeabi_dadd+0x46a>
   3338c:	e095      	b.n	334ba <__aeabi_dadd+0x596>
   3338e:	2340      	movs	r3, #64	; 0x40
   33390:	4650      	mov	r0, sl
   33392:	1a1b      	subs	r3, r3, r0
   33394:	4099      	lsls	r1, r3
   33396:	430a      	orrs	r2, r1
   33398:	1e51      	subs	r1, r2, #1
   3339a:	418a      	sbcs	r2, r1
   3339c:	464b      	mov	r3, r9
   3339e:	2100      	movs	r1, #0
   333a0:	431a      	orrs	r2, r3
   333a2:	e69f      	b.n	330e4 <__aeabi_dadd+0x1c0>
   333a4:	2e00      	cmp	r6, #0
   333a6:	d130      	bne.n	3340a <__aeabi_dadd+0x4e6>
   333a8:	0026      	movs	r6, r4
   333aa:	433e      	orrs	r6, r7
   333ac:	d067      	beq.n	3347e <__aeabi_dadd+0x55a>
   333ae:	43db      	mvns	r3, r3
   333b0:	469a      	mov	sl, r3
   333b2:	2b00      	cmp	r3, #0
   333b4:	d01c      	beq.n	333f0 <__aeabi_dadd+0x4cc>
   333b6:	4e61      	ldr	r6, [pc, #388]	; (3353c <__aeabi_dadd+0x618>)
   333b8:	42b0      	cmp	r0, r6
   333ba:	d060      	beq.n	3347e <__aeabi_dadd+0x55a>
   333bc:	4653      	mov	r3, sl
   333be:	2b38      	cmp	r3, #56	; 0x38
   333c0:	dd00      	ble.n	333c4 <__aeabi_dadd+0x4a0>
   333c2:	e096      	b.n	334f2 <__aeabi_dadd+0x5ce>
   333c4:	2b1f      	cmp	r3, #31
   333c6:	dd00      	ble.n	333ca <__aeabi_dadd+0x4a6>
   333c8:	e09f      	b.n	3350a <__aeabi_dadd+0x5e6>
   333ca:	2620      	movs	r6, #32
   333cc:	1af3      	subs	r3, r6, r3
   333ce:	0026      	movs	r6, r4
   333d0:	409e      	lsls	r6, r3
   333d2:	469c      	mov	ip, r3
   333d4:	46b3      	mov	fp, r6
   333d6:	4653      	mov	r3, sl
   333d8:	003e      	movs	r6, r7
   333da:	40de      	lsrs	r6, r3
   333dc:	0033      	movs	r3, r6
   333de:	465e      	mov	r6, fp
   333e0:	431e      	orrs	r6, r3
   333e2:	4663      	mov	r3, ip
   333e4:	409f      	lsls	r7, r3
   333e6:	1e7b      	subs	r3, r7, #1
   333e8:	419f      	sbcs	r7, r3
   333ea:	4653      	mov	r3, sl
   333ec:	40dc      	lsrs	r4, r3
   333ee:	4337      	orrs	r7, r6
   333f0:	18bf      	adds	r7, r7, r2
   333f2:	4297      	cmp	r7, r2
   333f4:	4192      	sbcs	r2, r2
   333f6:	1864      	adds	r4, r4, r1
   333f8:	4252      	negs	r2, r2
   333fa:	18a4      	adds	r4, r4, r2
   333fc:	0006      	movs	r6, r0
   333fe:	e678      	b.n	330f2 <__aeabi_dadd+0x1ce>
   33400:	4327      	orrs	r7, r4
   33402:	1e7c      	subs	r4, r7, #1
   33404:	41a7      	sbcs	r7, r4
   33406:	2400      	movs	r4, #0
   33408:	e737      	b.n	3327a <__aeabi_dadd+0x356>
   3340a:	4e4c      	ldr	r6, [pc, #304]	; (3353c <__aeabi_dadd+0x618>)
   3340c:	42b0      	cmp	r0, r6
   3340e:	d036      	beq.n	3347e <__aeabi_dadd+0x55a>
   33410:	2680      	movs	r6, #128	; 0x80
   33412:	425b      	negs	r3, r3
   33414:	0436      	lsls	r6, r6, #16
   33416:	469a      	mov	sl, r3
   33418:	4334      	orrs	r4, r6
   3341a:	e7cf      	b.n	333bc <__aeabi_dadd+0x498>
   3341c:	0018      	movs	r0, r3
   3341e:	4310      	orrs	r0, r2
   33420:	d100      	bne.n	33424 <__aeabi_dadd+0x500>
   33422:	e603      	b.n	3302c <__aeabi_dadd+0x108>
   33424:	1ab8      	subs	r0, r7, r2
   33426:	4684      	mov	ip, r0
   33428:	4567      	cmp	r7, ip
   3342a:	41ad      	sbcs	r5, r5
   3342c:	1ae0      	subs	r0, r4, r3
   3342e:	426d      	negs	r5, r5
   33430:	1b40      	subs	r0, r0, r5
   33432:	0205      	lsls	r5, r0, #8
   33434:	d400      	bmi.n	33438 <__aeabi_dadd+0x514>
   33436:	e62c      	b.n	33092 <__aeabi_dadd+0x16e>
   33438:	1bd7      	subs	r7, r2, r7
   3343a:	42ba      	cmp	r2, r7
   3343c:	4192      	sbcs	r2, r2
   3343e:	1b1c      	subs	r4, r3, r4
   33440:	4252      	negs	r2, r2
   33442:	1aa4      	subs	r4, r4, r2
   33444:	46d8      	mov	r8, fp
   33446:	e5f1      	b.n	3302c <__aeabi_dadd+0x108>
   33448:	0018      	movs	r0, r3
   3344a:	4310      	orrs	r0, r2
   3344c:	d100      	bne.n	33450 <__aeabi_dadd+0x52c>
   3344e:	e763      	b.n	33318 <__aeabi_dadd+0x3f4>
   33450:	08f8      	lsrs	r0, r7, #3
   33452:	0767      	lsls	r7, r4, #29
   33454:	4307      	orrs	r7, r0
   33456:	2080      	movs	r0, #128	; 0x80
   33458:	08e4      	lsrs	r4, r4, #3
   3345a:	0300      	lsls	r0, r0, #12
   3345c:	4204      	tst	r4, r0
   3345e:	d008      	beq.n	33472 <__aeabi_dadd+0x54e>
   33460:	08dd      	lsrs	r5, r3, #3
   33462:	4205      	tst	r5, r0
   33464:	d105      	bne.n	33472 <__aeabi_dadd+0x54e>
   33466:	08d2      	lsrs	r2, r2, #3
   33468:	0759      	lsls	r1, r3, #29
   3346a:	4311      	orrs	r1, r2
   3346c:	000f      	movs	r7, r1
   3346e:	002c      	movs	r4, r5
   33470:	46d8      	mov	r8, fp
   33472:	0f7b      	lsrs	r3, r7, #29
   33474:	00e4      	lsls	r4, r4, #3
   33476:	431c      	orrs	r4, r3
   33478:	00ff      	lsls	r7, r7, #3
   3347a:	4e30      	ldr	r6, [pc, #192]	; (3353c <__aeabi_dadd+0x618>)
   3347c:	e5d6      	b.n	3302c <__aeabi_dadd+0x108>
   3347e:	000c      	movs	r4, r1
   33480:	0017      	movs	r7, r2
   33482:	0006      	movs	r6, r0
   33484:	e5d2      	b.n	3302c <__aeabi_dadd+0x108>
   33486:	2b00      	cmp	r3, #0
   33488:	d038      	beq.n	334fc <__aeabi_dadd+0x5d8>
   3348a:	000b      	movs	r3, r1
   3348c:	4313      	orrs	r3, r2
   3348e:	d100      	bne.n	33492 <__aeabi_dadd+0x56e>
   33490:	e742      	b.n	33318 <__aeabi_dadd+0x3f4>
   33492:	08f8      	lsrs	r0, r7, #3
   33494:	0767      	lsls	r7, r4, #29
   33496:	4307      	orrs	r7, r0
   33498:	2080      	movs	r0, #128	; 0x80
   3349a:	08e4      	lsrs	r4, r4, #3
   3349c:	0300      	lsls	r0, r0, #12
   3349e:	4204      	tst	r4, r0
   334a0:	d0e7      	beq.n	33472 <__aeabi_dadd+0x54e>
   334a2:	08cb      	lsrs	r3, r1, #3
   334a4:	4203      	tst	r3, r0
   334a6:	d1e4      	bne.n	33472 <__aeabi_dadd+0x54e>
   334a8:	08d2      	lsrs	r2, r2, #3
   334aa:	0749      	lsls	r1, r1, #29
   334ac:	4311      	orrs	r1, r2
   334ae:	000f      	movs	r7, r1
   334b0:	001c      	movs	r4, r3
   334b2:	e7de      	b.n	33472 <__aeabi_dadd+0x54e>
   334b4:	2700      	movs	r7, #0
   334b6:	2400      	movs	r4, #0
   334b8:	e5d5      	b.n	33066 <__aeabi_dadd+0x142>
   334ba:	2100      	movs	r1, #0
   334bc:	e76b      	b.n	33396 <__aeabi_dadd+0x472>
   334be:	2500      	movs	r5, #0
   334c0:	2700      	movs	r7, #0
   334c2:	e5f3      	b.n	330ac <__aeabi_dadd+0x188>
   334c4:	464e      	mov	r6, r9
   334c6:	0025      	movs	r5, r4
   334c8:	3e20      	subs	r6, #32
   334ca:	40f5      	lsrs	r5, r6
   334cc:	464b      	mov	r3, r9
   334ce:	002e      	movs	r6, r5
   334d0:	2b20      	cmp	r3, #32
   334d2:	d02d      	beq.n	33530 <__aeabi_dadd+0x60c>
   334d4:	2540      	movs	r5, #64	; 0x40
   334d6:	1aed      	subs	r5, r5, r3
   334d8:	40ac      	lsls	r4, r5
   334da:	4327      	orrs	r7, r4
   334dc:	1e7c      	subs	r4, r7, #1
   334de:	41a7      	sbcs	r7, r4
   334e0:	2400      	movs	r4, #0
   334e2:	4337      	orrs	r7, r6
   334e4:	e6c9      	b.n	3327a <__aeabi_dadd+0x356>
   334e6:	2480      	movs	r4, #128	; 0x80
   334e8:	2500      	movs	r5, #0
   334ea:	0324      	lsls	r4, r4, #12
   334ec:	4e13      	ldr	r6, [pc, #76]	; (3353c <__aeabi_dadd+0x618>)
   334ee:	2700      	movs	r7, #0
   334f0:	e5dc      	b.n	330ac <__aeabi_dadd+0x188>
   334f2:	4327      	orrs	r7, r4
   334f4:	1e7c      	subs	r4, r7, #1
   334f6:	41a7      	sbcs	r7, r4
   334f8:	2400      	movs	r4, #0
   334fa:	e779      	b.n	333f0 <__aeabi_dadd+0x4cc>
   334fc:	000c      	movs	r4, r1
   334fe:	0017      	movs	r7, r2
   33500:	4e0e      	ldr	r6, [pc, #56]	; (3353c <__aeabi_dadd+0x618>)
   33502:	e593      	b.n	3302c <__aeabi_dadd+0x108>
   33504:	000c      	movs	r4, r1
   33506:	0017      	movs	r7, r2
   33508:	e590      	b.n	3302c <__aeabi_dadd+0x108>
   3350a:	4656      	mov	r6, sl
   3350c:	0023      	movs	r3, r4
   3350e:	3e20      	subs	r6, #32
   33510:	40f3      	lsrs	r3, r6
   33512:	4699      	mov	r9, r3
   33514:	4653      	mov	r3, sl
   33516:	2b20      	cmp	r3, #32
   33518:	d00e      	beq.n	33538 <__aeabi_dadd+0x614>
   3351a:	2340      	movs	r3, #64	; 0x40
   3351c:	4656      	mov	r6, sl
   3351e:	1b9b      	subs	r3, r3, r6
   33520:	409c      	lsls	r4, r3
   33522:	4327      	orrs	r7, r4
   33524:	1e7c      	subs	r4, r7, #1
   33526:	41a7      	sbcs	r7, r4
   33528:	464b      	mov	r3, r9
   3352a:	2400      	movs	r4, #0
   3352c:	431f      	orrs	r7, r3
   3352e:	e75f      	b.n	333f0 <__aeabi_dadd+0x4cc>
   33530:	2400      	movs	r4, #0
   33532:	e7d2      	b.n	334da <__aeabi_dadd+0x5b6>
   33534:	0017      	movs	r7, r2
   33536:	e5b2      	b.n	3309e <__aeabi_dadd+0x17a>
   33538:	2400      	movs	r4, #0
   3353a:	e7f2      	b.n	33522 <__aeabi_dadd+0x5fe>
   3353c:	000007ff 	.word	0x000007ff
   33540:	ff7fffff 	.word	0xff7fffff

00033544 <__aeabi_ddiv>:
   33544:	b5f0      	push	{r4, r5, r6, r7, lr}
   33546:	4657      	mov	r7, sl
   33548:	4645      	mov	r5, r8
   3354a:	46de      	mov	lr, fp
   3354c:	464e      	mov	r6, r9
   3354e:	b5e0      	push	{r5, r6, r7, lr}
   33550:	004c      	lsls	r4, r1, #1
   33552:	030e      	lsls	r6, r1, #12
   33554:	b087      	sub	sp, #28
   33556:	4683      	mov	fp, r0
   33558:	4692      	mov	sl, r2
   3355a:	001d      	movs	r5, r3
   3355c:	4680      	mov	r8, r0
   3355e:	0b36      	lsrs	r6, r6, #12
   33560:	0d64      	lsrs	r4, r4, #21
   33562:	0fcf      	lsrs	r7, r1, #31
   33564:	2c00      	cmp	r4, #0
   33566:	d04f      	beq.n	33608 <__aeabi_ddiv+0xc4>
   33568:	4b6f      	ldr	r3, [pc, #444]	; (33728 <__aeabi_ddiv+0x1e4>)
   3356a:	429c      	cmp	r4, r3
   3356c:	d035      	beq.n	335da <__aeabi_ddiv+0x96>
   3356e:	2380      	movs	r3, #128	; 0x80
   33570:	0f42      	lsrs	r2, r0, #29
   33572:	041b      	lsls	r3, r3, #16
   33574:	00f6      	lsls	r6, r6, #3
   33576:	4313      	orrs	r3, r2
   33578:	4333      	orrs	r3, r6
   3357a:	4699      	mov	r9, r3
   3357c:	00c3      	lsls	r3, r0, #3
   3357e:	4698      	mov	r8, r3
   33580:	4b6a      	ldr	r3, [pc, #424]	; (3372c <__aeabi_ddiv+0x1e8>)
   33582:	2600      	movs	r6, #0
   33584:	469c      	mov	ip, r3
   33586:	2300      	movs	r3, #0
   33588:	4464      	add	r4, ip
   3358a:	9303      	str	r3, [sp, #12]
   3358c:	032b      	lsls	r3, r5, #12
   3358e:	0b1b      	lsrs	r3, r3, #12
   33590:	469b      	mov	fp, r3
   33592:	006b      	lsls	r3, r5, #1
   33594:	0fed      	lsrs	r5, r5, #31
   33596:	4650      	mov	r0, sl
   33598:	0d5b      	lsrs	r3, r3, #21
   3359a:	9501      	str	r5, [sp, #4]
   3359c:	d05e      	beq.n	3365c <__aeabi_ddiv+0x118>
   3359e:	4a62      	ldr	r2, [pc, #392]	; (33728 <__aeabi_ddiv+0x1e4>)
   335a0:	4293      	cmp	r3, r2
   335a2:	d053      	beq.n	3364c <__aeabi_ddiv+0x108>
   335a4:	465a      	mov	r2, fp
   335a6:	00d1      	lsls	r1, r2, #3
   335a8:	2280      	movs	r2, #128	; 0x80
   335aa:	0f40      	lsrs	r0, r0, #29
   335ac:	0412      	lsls	r2, r2, #16
   335ae:	4302      	orrs	r2, r0
   335b0:	430a      	orrs	r2, r1
   335b2:	4693      	mov	fp, r2
   335b4:	4652      	mov	r2, sl
   335b6:	00d1      	lsls	r1, r2, #3
   335b8:	4a5c      	ldr	r2, [pc, #368]	; (3372c <__aeabi_ddiv+0x1e8>)
   335ba:	4694      	mov	ip, r2
   335bc:	2200      	movs	r2, #0
   335be:	4463      	add	r3, ip
   335c0:	0038      	movs	r0, r7
   335c2:	4068      	eors	r0, r5
   335c4:	4684      	mov	ip, r0
   335c6:	9002      	str	r0, [sp, #8]
   335c8:	1ae4      	subs	r4, r4, r3
   335ca:	4316      	orrs	r6, r2
   335cc:	2e0f      	cmp	r6, #15
   335ce:	d900      	bls.n	335d2 <__aeabi_ddiv+0x8e>
   335d0:	e0b4      	b.n	3373c <__aeabi_ddiv+0x1f8>
   335d2:	4b57      	ldr	r3, [pc, #348]	; (33730 <__aeabi_ddiv+0x1ec>)
   335d4:	00b6      	lsls	r6, r6, #2
   335d6:	599b      	ldr	r3, [r3, r6]
   335d8:	469f      	mov	pc, r3
   335da:	0003      	movs	r3, r0
   335dc:	4333      	orrs	r3, r6
   335de:	4699      	mov	r9, r3
   335e0:	d16c      	bne.n	336bc <__aeabi_ddiv+0x178>
   335e2:	2300      	movs	r3, #0
   335e4:	4698      	mov	r8, r3
   335e6:	3302      	adds	r3, #2
   335e8:	2608      	movs	r6, #8
   335ea:	9303      	str	r3, [sp, #12]
   335ec:	e7ce      	b.n	3358c <__aeabi_ddiv+0x48>
   335ee:	46cb      	mov	fp, r9
   335f0:	4641      	mov	r1, r8
   335f2:	9a03      	ldr	r2, [sp, #12]
   335f4:	9701      	str	r7, [sp, #4]
   335f6:	2a02      	cmp	r2, #2
   335f8:	d165      	bne.n	336c6 <__aeabi_ddiv+0x182>
   335fa:	9b01      	ldr	r3, [sp, #4]
   335fc:	4c4a      	ldr	r4, [pc, #296]	; (33728 <__aeabi_ddiv+0x1e4>)
   335fe:	469c      	mov	ip, r3
   33600:	2300      	movs	r3, #0
   33602:	2200      	movs	r2, #0
   33604:	4698      	mov	r8, r3
   33606:	e06b      	b.n	336e0 <__aeabi_ddiv+0x19c>
   33608:	0003      	movs	r3, r0
   3360a:	4333      	orrs	r3, r6
   3360c:	4699      	mov	r9, r3
   3360e:	d04e      	beq.n	336ae <__aeabi_ddiv+0x16a>
   33610:	2e00      	cmp	r6, #0
   33612:	d100      	bne.n	33616 <__aeabi_ddiv+0xd2>
   33614:	e1bc      	b.n	33990 <__aeabi_ddiv+0x44c>
   33616:	0030      	movs	r0, r6
   33618:	f001 f8ca 	bl	347b0 <__clzsi2>
   3361c:	0003      	movs	r3, r0
   3361e:	3b0b      	subs	r3, #11
   33620:	2b1c      	cmp	r3, #28
   33622:	dd00      	ble.n	33626 <__aeabi_ddiv+0xe2>
   33624:	e1ac      	b.n	33980 <__aeabi_ddiv+0x43c>
   33626:	221d      	movs	r2, #29
   33628:	1ad3      	subs	r3, r2, r3
   3362a:	465a      	mov	r2, fp
   3362c:	0001      	movs	r1, r0
   3362e:	40da      	lsrs	r2, r3
   33630:	3908      	subs	r1, #8
   33632:	408e      	lsls	r6, r1
   33634:	0013      	movs	r3, r2
   33636:	4333      	orrs	r3, r6
   33638:	4699      	mov	r9, r3
   3363a:	465b      	mov	r3, fp
   3363c:	408b      	lsls	r3, r1
   3363e:	4698      	mov	r8, r3
   33640:	2300      	movs	r3, #0
   33642:	4c3c      	ldr	r4, [pc, #240]	; (33734 <__aeabi_ddiv+0x1f0>)
   33644:	2600      	movs	r6, #0
   33646:	1a24      	subs	r4, r4, r0
   33648:	9303      	str	r3, [sp, #12]
   3364a:	e79f      	b.n	3358c <__aeabi_ddiv+0x48>
   3364c:	4651      	mov	r1, sl
   3364e:	465a      	mov	r2, fp
   33650:	4311      	orrs	r1, r2
   33652:	d129      	bne.n	336a8 <__aeabi_ddiv+0x164>
   33654:	2200      	movs	r2, #0
   33656:	4693      	mov	fp, r2
   33658:	3202      	adds	r2, #2
   3365a:	e7b1      	b.n	335c0 <__aeabi_ddiv+0x7c>
   3365c:	4659      	mov	r1, fp
   3365e:	4301      	orrs	r1, r0
   33660:	d01e      	beq.n	336a0 <__aeabi_ddiv+0x15c>
   33662:	465b      	mov	r3, fp
   33664:	2b00      	cmp	r3, #0
   33666:	d100      	bne.n	3366a <__aeabi_ddiv+0x126>
   33668:	e19e      	b.n	339a8 <__aeabi_ddiv+0x464>
   3366a:	4658      	mov	r0, fp
   3366c:	f001 f8a0 	bl	347b0 <__clzsi2>
   33670:	0003      	movs	r3, r0
   33672:	3b0b      	subs	r3, #11
   33674:	2b1c      	cmp	r3, #28
   33676:	dd00      	ble.n	3367a <__aeabi_ddiv+0x136>
   33678:	e18f      	b.n	3399a <__aeabi_ddiv+0x456>
   3367a:	0002      	movs	r2, r0
   3367c:	4659      	mov	r1, fp
   3367e:	3a08      	subs	r2, #8
   33680:	4091      	lsls	r1, r2
   33682:	468b      	mov	fp, r1
   33684:	211d      	movs	r1, #29
   33686:	1acb      	subs	r3, r1, r3
   33688:	4651      	mov	r1, sl
   3368a:	40d9      	lsrs	r1, r3
   3368c:	000b      	movs	r3, r1
   3368e:	4659      	mov	r1, fp
   33690:	430b      	orrs	r3, r1
   33692:	4651      	mov	r1, sl
   33694:	469b      	mov	fp, r3
   33696:	4091      	lsls	r1, r2
   33698:	4b26      	ldr	r3, [pc, #152]	; (33734 <__aeabi_ddiv+0x1f0>)
   3369a:	2200      	movs	r2, #0
   3369c:	1a1b      	subs	r3, r3, r0
   3369e:	e78f      	b.n	335c0 <__aeabi_ddiv+0x7c>
   336a0:	2300      	movs	r3, #0
   336a2:	2201      	movs	r2, #1
   336a4:	469b      	mov	fp, r3
   336a6:	e78b      	b.n	335c0 <__aeabi_ddiv+0x7c>
   336a8:	4651      	mov	r1, sl
   336aa:	2203      	movs	r2, #3
   336ac:	e788      	b.n	335c0 <__aeabi_ddiv+0x7c>
   336ae:	2300      	movs	r3, #0
   336b0:	4698      	mov	r8, r3
   336b2:	3301      	adds	r3, #1
   336b4:	2604      	movs	r6, #4
   336b6:	2400      	movs	r4, #0
   336b8:	9303      	str	r3, [sp, #12]
   336ba:	e767      	b.n	3358c <__aeabi_ddiv+0x48>
   336bc:	2303      	movs	r3, #3
   336be:	46b1      	mov	r9, r6
   336c0:	9303      	str	r3, [sp, #12]
   336c2:	260c      	movs	r6, #12
   336c4:	e762      	b.n	3358c <__aeabi_ddiv+0x48>
   336c6:	2a03      	cmp	r2, #3
   336c8:	d100      	bne.n	336cc <__aeabi_ddiv+0x188>
   336ca:	e25c      	b.n	33b86 <__aeabi_ddiv+0x642>
   336cc:	9b01      	ldr	r3, [sp, #4]
   336ce:	2a01      	cmp	r2, #1
   336d0:	d000      	beq.n	336d4 <__aeabi_ddiv+0x190>
   336d2:	e1e4      	b.n	33a9e <__aeabi_ddiv+0x55a>
   336d4:	4013      	ands	r3, r2
   336d6:	469c      	mov	ip, r3
   336d8:	2300      	movs	r3, #0
   336da:	2400      	movs	r4, #0
   336dc:	2200      	movs	r2, #0
   336de:	4698      	mov	r8, r3
   336e0:	2100      	movs	r1, #0
   336e2:	0312      	lsls	r2, r2, #12
   336e4:	0b13      	lsrs	r3, r2, #12
   336e6:	0d0a      	lsrs	r2, r1, #20
   336e8:	0512      	lsls	r2, r2, #20
   336ea:	431a      	orrs	r2, r3
   336ec:	0523      	lsls	r3, r4, #20
   336ee:	4c12      	ldr	r4, [pc, #72]	; (33738 <__aeabi_ddiv+0x1f4>)
   336f0:	4640      	mov	r0, r8
   336f2:	4022      	ands	r2, r4
   336f4:	4313      	orrs	r3, r2
   336f6:	4662      	mov	r2, ip
   336f8:	005b      	lsls	r3, r3, #1
   336fa:	07d2      	lsls	r2, r2, #31
   336fc:	085b      	lsrs	r3, r3, #1
   336fe:	4313      	orrs	r3, r2
   33700:	0019      	movs	r1, r3
   33702:	b007      	add	sp, #28
   33704:	bc3c      	pop	{r2, r3, r4, r5}
   33706:	4690      	mov	r8, r2
   33708:	4699      	mov	r9, r3
   3370a:	46a2      	mov	sl, r4
   3370c:	46ab      	mov	fp, r5
   3370e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33710:	2300      	movs	r3, #0
   33712:	2280      	movs	r2, #128	; 0x80
   33714:	469c      	mov	ip, r3
   33716:	0312      	lsls	r2, r2, #12
   33718:	4698      	mov	r8, r3
   3371a:	4c03      	ldr	r4, [pc, #12]	; (33728 <__aeabi_ddiv+0x1e4>)
   3371c:	e7e0      	b.n	336e0 <__aeabi_ddiv+0x19c>
   3371e:	2300      	movs	r3, #0
   33720:	4c01      	ldr	r4, [pc, #4]	; (33728 <__aeabi_ddiv+0x1e4>)
   33722:	2200      	movs	r2, #0
   33724:	4698      	mov	r8, r3
   33726:	e7db      	b.n	336e0 <__aeabi_ddiv+0x19c>
   33728:	000007ff 	.word	0x000007ff
   3372c:	fffffc01 	.word	0xfffffc01
   33730:	00039eb8 	.word	0x00039eb8
   33734:	fffffc0d 	.word	0xfffffc0d
   33738:	800fffff 	.word	0x800fffff
   3373c:	45d9      	cmp	r9, fp
   3373e:	d900      	bls.n	33742 <__aeabi_ddiv+0x1fe>
   33740:	e139      	b.n	339b6 <__aeabi_ddiv+0x472>
   33742:	d100      	bne.n	33746 <__aeabi_ddiv+0x202>
   33744:	e134      	b.n	339b0 <__aeabi_ddiv+0x46c>
   33746:	2300      	movs	r3, #0
   33748:	4646      	mov	r6, r8
   3374a:	464d      	mov	r5, r9
   3374c:	469a      	mov	sl, r3
   3374e:	3c01      	subs	r4, #1
   33750:	465b      	mov	r3, fp
   33752:	0e0a      	lsrs	r2, r1, #24
   33754:	021b      	lsls	r3, r3, #8
   33756:	431a      	orrs	r2, r3
   33758:	020b      	lsls	r3, r1, #8
   3375a:	0c17      	lsrs	r7, r2, #16
   3375c:	9303      	str	r3, [sp, #12]
   3375e:	0413      	lsls	r3, r2, #16
   33760:	0c1b      	lsrs	r3, r3, #16
   33762:	0039      	movs	r1, r7
   33764:	0028      	movs	r0, r5
   33766:	4690      	mov	r8, r2
   33768:	9301      	str	r3, [sp, #4]
   3376a:	f7ff f8ab 	bl	328c4 <__udivsi3>
   3376e:	0002      	movs	r2, r0
   33770:	9b01      	ldr	r3, [sp, #4]
   33772:	4683      	mov	fp, r0
   33774:	435a      	muls	r2, r3
   33776:	0028      	movs	r0, r5
   33778:	0039      	movs	r1, r7
   3377a:	4691      	mov	r9, r2
   3377c:	f7ff f928 	bl	329d0 <__aeabi_uidivmod>
   33780:	0c35      	lsrs	r5, r6, #16
   33782:	0409      	lsls	r1, r1, #16
   33784:	430d      	orrs	r5, r1
   33786:	45a9      	cmp	r9, r5
   33788:	d90d      	bls.n	337a6 <__aeabi_ddiv+0x262>
   3378a:	465b      	mov	r3, fp
   3378c:	4445      	add	r5, r8
   3378e:	3b01      	subs	r3, #1
   33790:	45a8      	cmp	r8, r5
   33792:	d900      	bls.n	33796 <__aeabi_ddiv+0x252>
   33794:	e13a      	b.n	33a0c <__aeabi_ddiv+0x4c8>
   33796:	45a9      	cmp	r9, r5
   33798:	d800      	bhi.n	3379c <__aeabi_ddiv+0x258>
   3379a:	e137      	b.n	33a0c <__aeabi_ddiv+0x4c8>
   3379c:	2302      	movs	r3, #2
   3379e:	425b      	negs	r3, r3
   337a0:	469c      	mov	ip, r3
   337a2:	4445      	add	r5, r8
   337a4:	44e3      	add	fp, ip
   337a6:	464b      	mov	r3, r9
   337a8:	1aeb      	subs	r3, r5, r3
   337aa:	0039      	movs	r1, r7
   337ac:	0018      	movs	r0, r3
   337ae:	9304      	str	r3, [sp, #16]
   337b0:	f7ff f888 	bl	328c4 <__udivsi3>
   337b4:	9b01      	ldr	r3, [sp, #4]
   337b6:	0005      	movs	r5, r0
   337b8:	4343      	muls	r3, r0
   337ba:	0039      	movs	r1, r7
   337bc:	9804      	ldr	r0, [sp, #16]
   337be:	4699      	mov	r9, r3
   337c0:	f7ff f906 	bl	329d0 <__aeabi_uidivmod>
   337c4:	0433      	lsls	r3, r6, #16
   337c6:	0409      	lsls	r1, r1, #16
   337c8:	0c1b      	lsrs	r3, r3, #16
   337ca:	430b      	orrs	r3, r1
   337cc:	4599      	cmp	r9, r3
   337ce:	d909      	bls.n	337e4 <__aeabi_ddiv+0x2a0>
   337d0:	4443      	add	r3, r8
   337d2:	1e6a      	subs	r2, r5, #1
   337d4:	4598      	cmp	r8, r3
   337d6:	d900      	bls.n	337da <__aeabi_ddiv+0x296>
   337d8:	e11a      	b.n	33a10 <__aeabi_ddiv+0x4cc>
   337da:	4599      	cmp	r9, r3
   337dc:	d800      	bhi.n	337e0 <__aeabi_ddiv+0x29c>
   337de:	e117      	b.n	33a10 <__aeabi_ddiv+0x4cc>
   337e0:	3d02      	subs	r5, #2
   337e2:	4443      	add	r3, r8
   337e4:	464a      	mov	r2, r9
   337e6:	1a9b      	subs	r3, r3, r2
   337e8:	465a      	mov	r2, fp
   337ea:	0412      	lsls	r2, r2, #16
   337ec:	432a      	orrs	r2, r5
   337ee:	9903      	ldr	r1, [sp, #12]
   337f0:	4693      	mov	fp, r2
   337f2:	0c10      	lsrs	r0, r2, #16
   337f4:	0c0a      	lsrs	r2, r1, #16
   337f6:	4691      	mov	r9, r2
   337f8:	0409      	lsls	r1, r1, #16
   337fa:	465a      	mov	r2, fp
   337fc:	0c09      	lsrs	r1, r1, #16
   337fe:	464e      	mov	r6, r9
   33800:	000d      	movs	r5, r1
   33802:	0412      	lsls	r2, r2, #16
   33804:	0c12      	lsrs	r2, r2, #16
   33806:	4345      	muls	r5, r0
   33808:	9105      	str	r1, [sp, #20]
   3380a:	4351      	muls	r1, r2
   3380c:	4372      	muls	r2, r6
   3380e:	4370      	muls	r0, r6
   33810:	1952      	adds	r2, r2, r5
   33812:	0c0e      	lsrs	r6, r1, #16
   33814:	18b2      	adds	r2, r6, r2
   33816:	4295      	cmp	r5, r2
   33818:	d903      	bls.n	33822 <__aeabi_ddiv+0x2de>
   3381a:	2580      	movs	r5, #128	; 0x80
   3381c:	026d      	lsls	r5, r5, #9
   3381e:	46ac      	mov	ip, r5
   33820:	4460      	add	r0, ip
   33822:	0c15      	lsrs	r5, r2, #16
   33824:	0409      	lsls	r1, r1, #16
   33826:	0412      	lsls	r2, r2, #16
   33828:	0c09      	lsrs	r1, r1, #16
   3382a:	1828      	adds	r0, r5, r0
   3382c:	1852      	adds	r2, r2, r1
   3382e:	4283      	cmp	r3, r0
   33830:	d200      	bcs.n	33834 <__aeabi_ddiv+0x2f0>
   33832:	e0ce      	b.n	339d2 <__aeabi_ddiv+0x48e>
   33834:	d100      	bne.n	33838 <__aeabi_ddiv+0x2f4>
   33836:	e0c8      	b.n	339ca <__aeabi_ddiv+0x486>
   33838:	1a1d      	subs	r5, r3, r0
   3383a:	4653      	mov	r3, sl
   3383c:	1a9e      	subs	r6, r3, r2
   3383e:	45b2      	cmp	sl, r6
   33840:	4192      	sbcs	r2, r2
   33842:	4252      	negs	r2, r2
   33844:	1aab      	subs	r3, r5, r2
   33846:	469a      	mov	sl, r3
   33848:	4598      	cmp	r8, r3
   3384a:	d100      	bne.n	3384e <__aeabi_ddiv+0x30a>
   3384c:	e117      	b.n	33a7e <__aeabi_ddiv+0x53a>
   3384e:	0039      	movs	r1, r7
   33850:	0018      	movs	r0, r3
   33852:	f7ff f837 	bl	328c4 <__udivsi3>
   33856:	9b01      	ldr	r3, [sp, #4]
   33858:	0005      	movs	r5, r0
   3385a:	4343      	muls	r3, r0
   3385c:	0039      	movs	r1, r7
   3385e:	4650      	mov	r0, sl
   33860:	9304      	str	r3, [sp, #16]
   33862:	f7ff f8b5 	bl	329d0 <__aeabi_uidivmod>
   33866:	9804      	ldr	r0, [sp, #16]
   33868:	040b      	lsls	r3, r1, #16
   3386a:	0c31      	lsrs	r1, r6, #16
   3386c:	4319      	orrs	r1, r3
   3386e:	4288      	cmp	r0, r1
   33870:	d909      	bls.n	33886 <__aeabi_ddiv+0x342>
   33872:	4441      	add	r1, r8
   33874:	1e6b      	subs	r3, r5, #1
   33876:	4588      	cmp	r8, r1
   33878:	d900      	bls.n	3387c <__aeabi_ddiv+0x338>
   3387a:	e107      	b.n	33a8c <__aeabi_ddiv+0x548>
   3387c:	4288      	cmp	r0, r1
   3387e:	d800      	bhi.n	33882 <__aeabi_ddiv+0x33e>
   33880:	e104      	b.n	33a8c <__aeabi_ddiv+0x548>
   33882:	3d02      	subs	r5, #2
   33884:	4441      	add	r1, r8
   33886:	9b04      	ldr	r3, [sp, #16]
   33888:	1acb      	subs	r3, r1, r3
   3388a:	0018      	movs	r0, r3
   3388c:	0039      	movs	r1, r7
   3388e:	9304      	str	r3, [sp, #16]
   33890:	f7ff f818 	bl	328c4 <__udivsi3>
   33894:	9b01      	ldr	r3, [sp, #4]
   33896:	4682      	mov	sl, r0
   33898:	4343      	muls	r3, r0
   3389a:	0039      	movs	r1, r7
   3389c:	9804      	ldr	r0, [sp, #16]
   3389e:	9301      	str	r3, [sp, #4]
   338a0:	f7ff f896 	bl	329d0 <__aeabi_uidivmod>
   338a4:	9801      	ldr	r0, [sp, #4]
   338a6:	040b      	lsls	r3, r1, #16
   338a8:	0431      	lsls	r1, r6, #16
   338aa:	0c09      	lsrs	r1, r1, #16
   338ac:	4319      	orrs	r1, r3
   338ae:	4288      	cmp	r0, r1
   338b0:	d90d      	bls.n	338ce <__aeabi_ddiv+0x38a>
   338b2:	4653      	mov	r3, sl
   338b4:	4441      	add	r1, r8
   338b6:	3b01      	subs	r3, #1
   338b8:	4588      	cmp	r8, r1
   338ba:	d900      	bls.n	338be <__aeabi_ddiv+0x37a>
   338bc:	e0e8      	b.n	33a90 <__aeabi_ddiv+0x54c>
   338be:	4288      	cmp	r0, r1
   338c0:	d800      	bhi.n	338c4 <__aeabi_ddiv+0x380>
   338c2:	e0e5      	b.n	33a90 <__aeabi_ddiv+0x54c>
   338c4:	2302      	movs	r3, #2
   338c6:	425b      	negs	r3, r3
   338c8:	469c      	mov	ip, r3
   338ca:	4441      	add	r1, r8
   338cc:	44e2      	add	sl, ip
   338ce:	9b01      	ldr	r3, [sp, #4]
   338d0:	042d      	lsls	r5, r5, #16
   338d2:	1ace      	subs	r6, r1, r3
   338d4:	4651      	mov	r1, sl
   338d6:	4329      	orrs	r1, r5
   338d8:	9d05      	ldr	r5, [sp, #20]
   338da:	464f      	mov	r7, r9
   338dc:	002a      	movs	r2, r5
   338de:	040b      	lsls	r3, r1, #16
   338e0:	0c08      	lsrs	r0, r1, #16
   338e2:	0c1b      	lsrs	r3, r3, #16
   338e4:	435a      	muls	r2, r3
   338e6:	4345      	muls	r5, r0
   338e8:	437b      	muls	r3, r7
   338ea:	4378      	muls	r0, r7
   338ec:	195b      	adds	r3, r3, r5
   338ee:	0c17      	lsrs	r7, r2, #16
   338f0:	18fb      	adds	r3, r7, r3
   338f2:	429d      	cmp	r5, r3
   338f4:	d903      	bls.n	338fe <__aeabi_ddiv+0x3ba>
   338f6:	2580      	movs	r5, #128	; 0x80
   338f8:	026d      	lsls	r5, r5, #9
   338fa:	46ac      	mov	ip, r5
   338fc:	4460      	add	r0, ip
   338fe:	0c1d      	lsrs	r5, r3, #16
   33900:	0412      	lsls	r2, r2, #16
   33902:	041b      	lsls	r3, r3, #16
   33904:	0c12      	lsrs	r2, r2, #16
   33906:	1828      	adds	r0, r5, r0
   33908:	189b      	adds	r3, r3, r2
   3390a:	4286      	cmp	r6, r0
   3390c:	d200      	bcs.n	33910 <__aeabi_ddiv+0x3cc>
   3390e:	e093      	b.n	33a38 <__aeabi_ddiv+0x4f4>
   33910:	d100      	bne.n	33914 <__aeabi_ddiv+0x3d0>
   33912:	e08e      	b.n	33a32 <__aeabi_ddiv+0x4ee>
   33914:	2301      	movs	r3, #1
   33916:	4319      	orrs	r1, r3
   33918:	4ba0      	ldr	r3, [pc, #640]	; (33b9c <__aeabi_ddiv+0x658>)
   3391a:	18e3      	adds	r3, r4, r3
   3391c:	2b00      	cmp	r3, #0
   3391e:	dc00      	bgt.n	33922 <__aeabi_ddiv+0x3de>
   33920:	e099      	b.n	33a56 <__aeabi_ddiv+0x512>
   33922:	074a      	lsls	r2, r1, #29
   33924:	d000      	beq.n	33928 <__aeabi_ddiv+0x3e4>
   33926:	e09e      	b.n	33a66 <__aeabi_ddiv+0x522>
   33928:	465a      	mov	r2, fp
   3392a:	01d2      	lsls	r2, r2, #7
   3392c:	d506      	bpl.n	3393c <__aeabi_ddiv+0x3f8>
   3392e:	465a      	mov	r2, fp
   33930:	4b9b      	ldr	r3, [pc, #620]	; (33ba0 <__aeabi_ddiv+0x65c>)
   33932:	401a      	ands	r2, r3
   33934:	2380      	movs	r3, #128	; 0x80
   33936:	4693      	mov	fp, r2
   33938:	00db      	lsls	r3, r3, #3
   3393a:	18e3      	adds	r3, r4, r3
   3393c:	4a99      	ldr	r2, [pc, #612]	; (33ba4 <__aeabi_ddiv+0x660>)
   3393e:	4293      	cmp	r3, r2
   33940:	dd68      	ble.n	33a14 <__aeabi_ddiv+0x4d0>
   33942:	2301      	movs	r3, #1
   33944:	9a02      	ldr	r2, [sp, #8]
   33946:	4c98      	ldr	r4, [pc, #608]	; (33ba8 <__aeabi_ddiv+0x664>)
   33948:	401a      	ands	r2, r3
   3394a:	2300      	movs	r3, #0
   3394c:	4694      	mov	ip, r2
   3394e:	4698      	mov	r8, r3
   33950:	2200      	movs	r2, #0
   33952:	e6c5      	b.n	336e0 <__aeabi_ddiv+0x19c>
   33954:	2280      	movs	r2, #128	; 0x80
   33956:	464b      	mov	r3, r9
   33958:	0312      	lsls	r2, r2, #12
   3395a:	4213      	tst	r3, r2
   3395c:	d00a      	beq.n	33974 <__aeabi_ddiv+0x430>
   3395e:	465b      	mov	r3, fp
   33960:	4213      	tst	r3, r2
   33962:	d106      	bne.n	33972 <__aeabi_ddiv+0x42e>
   33964:	431a      	orrs	r2, r3
   33966:	0312      	lsls	r2, r2, #12
   33968:	0b12      	lsrs	r2, r2, #12
   3396a:	46ac      	mov	ip, r5
   3396c:	4688      	mov	r8, r1
   3396e:	4c8e      	ldr	r4, [pc, #568]	; (33ba8 <__aeabi_ddiv+0x664>)
   33970:	e6b6      	b.n	336e0 <__aeabi_ddiv+0x19c>
   33972:	464b      	mov	r3, r9
   33974:	431a      	orrs	r2, r3
   33976:	0312      	lsls	r2, r2, #12
   33978:	0b12      	lsrs	r2, r2, #12
   3397a:	46bc      	mov	ip, r7
   3397c:	4c8a      	ldr	r4, [pc, #552]	; (33ba8 <__aeabi_ddiv+0x664>)
   3397e:	e6af      	b.n	336e0 <__aeabi_ddiv+0x19c>
   33980:	0003      	movs	r3, r0
   33982:	465a      	mov	r2, fp
   33984:	3b28      	subs	r3, #40	; 0x28
   33986:	409a      	lsls	r2, r3
   33988:	2300      	movs	r3, #0
   3398a:	4691      	mov	r9, r2
   3398c:	4698      	mov	r8, r3
   3398e:	e657      	b.n	33640 <__aeabi_ddiv+0xfc>
   33990:	4658      	mov	r0, fp
   33992:	f000 ff0d 	bl	347b0 <__clzsi2>
   33996:	3020      	adds	r0, #32
   33998:	e640      	b.n	3361c <__aeabi_ddiv+0xd8>
   3399a:	0003      	movs	r3, r0
   3399c:	4652      	mov	r2, sl
   3399e:	3b28      	subs	r3, #40	; 0x28
   339a0:	409a      	lsls	r2, r3
   339a2:	2100      	movs	r1, #0
   339a4:	4693      	mov	fp, r2
   339a6:	e677      	b.n	33698 <__aeabi_ddiv+0x154>
   339a8:	f000 ff02 	bl	347b0 <__clzsi2>
   339ac:	3020      	adds	r0, #32
   339ae:	e65f      	b.n	33670 <__aeabi_ddiv+0x12c>
   339b0:	4588      	cmp	r8, r1
   339b2:	d200      	bcs.n	339b6 <__aeabi_ddiv+0x472>
   339b4:	e6c7      	b.n	33746 <__aeabi_ddiv+0x202>
   339b6:	464b      	mov	r3, r9
   339b8:	07de      	lsls	r6, r3, #31
   339ba:	085d      	lsrs	r5, r3, #1
   339bc:	4643      	mov	r3, r8
   339be:	085b      	lsrs	r3, r3, #1
   339c0:	431e      	orrs	r6, r3
   339c2:	4643      	mov	r3, r8
   339c4:	07db      	lsls	r3, r3, #31
   339c6:	469a      	mov	sl, r3
   339c8:	e6c2      	b.n	33750 <__aeabi_ddiv+0x20c>
   339ca:	2500      	movs	r5, #0
   339cc:	4592      	cmp	sl, r2
   339ce:	d300      	bcc.n	339d2 <__aeabi_ddiv+0x48e>
   339d0:	e733      	b.n	3383a <__aeabi_ddiv+0x2f6>
   339d2:	9e03      	ldr	r6, [sp, #12]
   339d4:	4659      	mov	r1, fp
   339d6:	46b4      	mov	ip, r6
   339d8:	44e2      	add	sl, ip
   339da:	45b2      	cmp	sl, r6
   339dc:	41ad      	sbcs	r5, r5
   339de:	426d      	negs	r5, r5
   339e0:	4445      	add	r5, r8
   339e2:	18eb      	adds	r3, r5, r3
   339e4:	3901      	subs	r1, #1
   339e6:	4598      	cmp	r8, r3
   339e8:	d207      	bcs.n	339fa <__aeabi_ddiv+0x4b6>
   339ea:	4298      	cmp	r0, r3
   339ec:	d900      	bls.n	339f0 <__aeabi_ddiv+0x4ac>
   339ee:	e07f      	b.n	33af0 <__aeabi_ddiv+0x5ac>
   339f0:	d100      	bne.n	339f4 <__aeabi_ddiv+0x4b0>
   339f2:	e0bc      	b.n	33b6e <__aeabi_ddiv+0x62a>
   339f4:	1a1d      	subs	r5, r3, r0
   339f6:	468b      	mov	fp, r1
   339f8:	e71f      	b.n	3383a <__aeabi_ddiv+0x2f6>
   339fa:	4598      	cmp	r8, r3
   339fc:	d1fa      	bne.n	339f4 <__aeabi_ddiv+0x4b0>
   339fe:	9d03      	ldr	r5, [sp, #12]
   33a00:	4555      	cmp	r5, sl
   33a02:	d9f2      	bls.n	339ea <__aeabi_ddiv+0x4a6>
   33a04:	4643      	mov	r3, r8
   33a06:	468b      	mov	fp, r1
   33a08:	1a1d      	subs	r5, r3, r0
   33a0a:	e716      	b.n	3383a <__aeabi_ddiv+0x2f6>
   33a0c:	469b      	mov	fp, r3
   33a0e:	e6ca      	b.n	337a6 <__aeabi_ddiv+0x262>
   33a10:	0015      	movs	r5, r2
   33a12:	e6e7      	b.n	337e4 <__aeabi_ddiv+0x2a0>
   33a14:	465a      	mov	r2, fp
   33a16:	08c9      	lsrs	r1, r1, #3
   33a18:	0752      	lsls	r2, r2, #29
   33a1a:	430a      	orrs	r2, r1
   33a1c:	055b      	lsls	r3, r3, #21
   33a1e:	4690      	mov	r8, r2
   33a20:	0d5c      	lsrs	r4, r3, #21
   33a22:	465a      	mov	r2, fp
   33a24:	2301      	movs	r3, #1
   33a26:	9902      	ldr	r1, [sp, #8]
   33a28:	0252      	lsls	r2, r2, #9
   33a2a:	4019      	ands	r1, r3
   33a2c:	0b12      	lsrs	r2, r2, #12
   33a2e:	468c      	mov	ip, r1
   33a30:	e656      	b.n	336e0 <__aeabi_ddiv+0x19c>
   33a32:	2b00      	cmp	r3, #0
   33a34:	d100      	bne.n	33a38 <__aeabi_ddiv+0x4f4>
   33a36:	e76f      	b.n	33918 <__aeabi_ddiv+0x3d4>
   33a38:	4446      	add	r6, r8
   33a3a:	1e4a      	subs	r2, r1, #1
   33a3c:	45b0      	cmp	r8, r6
   33a3e:	d929      	bls.n	33a94 <__aeabi_ddiv+0x550>
   33a40:	0011      	movs	r1, r2
   33a42:	4286      	cmp	r6, r0
   33a44:	d000      	beq.n	33a48 <__aeabi_ddiv+0x504>
   33a46:	e765      	b.n	33914 <__aeabi_ddiv+0x3d0>
   33a48:	9a03      	ldr	r2, [sp, #12]
   33a4a:	4293      	cmp	r3, r2
   33a4c:	d000      	beq.n	33a50 <__aeabi_ddiv+0x50c>
   33a4e:	e761      	b.n	33914 <__aeabi_ddiv+0x3d0>
   33a50:	e762      	b.n	33918 <__aeabi_ddiv+0x3d4>
   33a52:	2101      	movs	r1, #1
   33a54:	4249      	negs	r1, r1
   33a56:	2001      	movs	r0, #1
   33a58:	1ac2      	subs	r2, r0, r3
   33a5a:	2a38      	cmp	r2, #56	; 0x38
   33a5c:	dd21      	ble.n	33aa2 <__aeabi_ddiv+0x55e>
   33a5e:	9b02      	ldr	r3, [sp, #8]
   33a60:	4003      	ands	r3, r0
   33a62:	469c      	mov	ip, r3
   33a64:	e638      	b.n	336d8 <__aeabi_ddiv+0x194>
   33a66:	220f      	movs	r2, #15
   33a68:	400a      	ands	r2, r1
   33a6a:	2a04      	cmp	r2, #4
   33a6c:	d100      	bne.n	33a70 <__aeabi_ddiv+0x52c>
   33a6e:	e75b      	b.n	33928 <__aeabi_ddiv+0x3e4>
   33a70:	000a      	movs	r2, r1
   33a72:	1d11      	adds	r1, r2, #4
   33a74:	4291      	cmp	r1, r2
   33a76:	4192      	sbcs	r2, r2
   33a78:	4252      	negs	r2, r2
   33a7a:	4493      	add	fp, r2
   33a7c:	e754      	b.n	33928 <__aeabi_ddiv+0x3e4>
   33a7e:	4b47      	ldr	r3, [pc, #284]	; (33b9c <__aeabi_ddiv+0x658>)
   33a80:	18e3      	adds	r3, r4, r3
   33a82:	2b00      	cmp	r3, #0
   33a84:	dde5      	ble.n	33a52 <__aeabi_ddiv+0x50e>
   33a86:	2201      	movs	r2, #1
   33a88:	4252      	negs	r2, r2
   33a8a:	e7f2      	b.n	33a72 <__aeabi_ddiv+0x52e>
   33a8c:	001d      	movs	r5, r3
   33a8e:	e6fa      	b.n	33886 <__aeabi_ddiv+0x342>
   33a90:	469a      	mov	sl, r3
   33a92:	e71c      	b.n	338ce <__aeabi_ddiv+0x38a>
   33a94:	42b0      	cmp	r0, r6
   33a96:	d839      	bhi.n	33b0c <__aeabi_ddiv+0x5c8>
   33a98:	d06e      	beq.n	33b78 <__aeabi_ddiv+0x634>
   33a9a:	0011      	movs	r1, r2
   33a9c:	e73a      	b.n	33914 <__aeabi_ddiv+0x3d0>
   33a9e:	9302      	str	r3, [sp, #8]
   33aa0:	e73a      	b.n	33918 <__aeabi_ddiv+0x3d4>
   33aa2:	2a1f      	cmp	r2, #31
   33aa4:	dc3c      	bgt.n	33b20 <__aeabi_ddiv+0x5dc>
   33aa6:	2320      	movs	r3, #32
   33aa8:	1a9b      	subs	r3, r3, r2
   33aaa:	000c      	movs	r4, r1
   33aac:	4658      	mov	r0, fp
   33aae:	4099      	lsls	r1, r3
   33ab0:	4098      	lsls	r0, r3
   33ab2:	1e4b      	subs	r3, r1, #1
   33ab4:	4199      	sbcs	r1, r3
   33ab6:	465b      	mov	r3, fp
   33ab8:	40d4      	lsrs	r4, r2
   33aba:	40d3      	lsrs	r3, r2
   33abc:	4320      	orrs	r0, r4
   33abe:	4308      	orrs	r0, r1
   33ac0:	001a      	movs	r2, r3
   33ac2:	0743      	lsls	r3, r0, #29
   33ac4:	d009      	beq.n	33ada <__aeabi_ddiv+0x596>
   33ac6:	230f      	movs	r3, #15
   33ac8:	4003      	ands	r3, r0
   33aca:	2b04      	cmp	r3, #4
   33acc:	d005      	beq.n	33ada <__aeabi_ddiv+0x596>
   33ace:	0001      	movs	r1, r0
   33ad0:	1d08      	adds	r0, r1, #4
   33ad2:	4288      	cmp	r0, r1
   33ad4:	419b      	sbcs	r3, r3
   33ad6:	425b      	negs	r3, r3
   33ad8:	18d2      	adds	r2, r2, r3
   33ada:	0213      	lsls	r3, r2, #8
   33adc:	d53a      	bpl.n	33b54 <__aeabi_ddiv+0x610>
   33ade:	2301      	movs	r3, #1
   33ae0:	9a02      	ldr	r2, [sp, #8]
   33ae2:	2401      	movs	r4, #1
   33ae4:	401a      	ands	r2, r3
   33ae6:	2300      	movs	r3, #0
   33ae8:	4694      	mov	ip, r2
   33aea:	4698      	mov	r8, r3
   33aec:	2200      	movs	r2, #0
   33aee:	e5f7      	b.n	336e0 <__aeabi_ddiv+0x19c>
   33af0:	2102      	movs	r1, #2
   33af2:	4249      	negs	r1, r1
   33af4:	468c      	mov	ip, r1
   33af6:	9d03      	ldr	r5, [sp, #12]
   33af8:	44e3      	add	fp, ip
   33afa:	46ac      	mov	ip, r5
   33afc:	44e2      	add	sl, ip
   33afe:	45aa      	cmp	sl, r5
   33b00:	41ad      	sbcs	r5, r5
   33b02:	426d      	negs	r5, r5
   33b04:	4445      	add	r5, r8
   33b06:	18ed      	adds	r5, r5, r3
   33b08:	1a2d      	subs	r5, r5, r0
   33b0a:	e696      	b.n	3383a <__aeabi_ddiv+0x2f6>
   33b0c:	1e8a      	subs	r2, r1, #2
   33b0e:	9903      	ldr	r1, [sp, #12]
   33b10:	004d      	lsls	r5, r1, #1
   33b12:	428d      	cmp	r5, r1
   33b14:	4189      	sbcs	r1, r1
   33b16:	4249      	negs	r1, r1
   33b18:	4441      	add	r1, r8
   33b1a:	1876      	adds	r6, r6, r1
   33b1c:	9503      	str	r5, [sp, #12]
   33b1e:	e78f      	b.n	33a40 <__aeabi_ddiv+0x4fc>
   33b20:	201f      	movs	r0, #31
   33b22:	4240      	negs	r0, r0
   33b24:	1ac3      	subs	r3, r0, r3
   33b26:	4658      	mov	r0, fp
   33b28:	40d8      	lsrs	r0, r3
   33b2a:	0003      	movs	r3, r0
   33b2c:	2a20      	cmp	r2, #32
   33b2e:	d028      	beq.n	33b82 <__aeabi_ddiv+0x63e>
   33b30:	2040      	movs	r0, #64	; 0x40
   33b32:	465d      	mov	r5, fp
   33b34:	1a82      	subs	r2, r0, r2
   33b36:	4095      	lsls	r5, r2
   33b38:	4329      	orrs	r1, r5
   33b3a:	1e4a      	subs	r2, r1, #1
   33b3c:	4191      	sbcs	r1, r2
   33b3e:	4319      	orrs	r1, r3
   33b40:	2307      	movs	r3, #7
   33b42:	2200      	movs	r2, #0
   33b44:	400b      	ands	r3, r1
   33b46:	d009      	beq.n	33b5c <__aeabi_ddiv+0x618>
   33b48:	230f      	movs	r3, #15
   33b4a:	2200      	movs	r2, #0
   33b4c:	400b      	ands	r3, r1
   33b4e:	0008      	movs	r0, r1
   33b50:	2b04      	cmp	r3, #4
   33b52:	d1bd      	bne.n	33ad0 <__aeabi_ddiv+0x58c>
   33b54:	0001      	movs	r1, r0
   33b56:	0753      	lsls	r3, r2, #29
   33b58:	0252      	lsls	r2, r2, #9
   33b5a:	0b12      	lsrs	r2, r2, #12
   33b5c:	08c9      	lsrs	r1, r1, #3
   33b5e:	4319      	orrs	r1, r3
   33b60:	2301      	movs	r3, #1
   33b62:	4688      	mov	r8, r1
   33b64:	9902      	ldr	r1, [sp, #8]
   33b66:	2400      	movs	r4, #0
   33b68:	4019      	ands	r1, r3
   33b6a:	468c      	mov	ip, r1
   33b6c:	e5b8      	b.n	336e0 <__aeabi_ddiv+0x19c>
   33b6e:	4552      	cmp	r2, sl
   33b70:	d8be      	bhi.n	33af0 <__aeabi_ddiv+0x5ac>
   33b72:	468b      	mov	fp, r1
   33b74:	2500      	movs	r5, #0
   33b76:	e660      	b.n	3383a <__aeabi_ddiv+0x2f6>
   33b78:	9d03      	ldr	r5, [sp, #12]
   33b7a:	429d      	cmp	r5, r3
   33b7c:	d3c6      	bcc.n	33b0c <__aeabi_ddiv+0x5c8>
   33b7e:	0011      	movs	r1, r2
   33b80:	e762      	b.n	33a48 <__aeabi_ddiv+0x504>
   33b82:	2500      	movs	r5, #0
   33b84:	e7d8      	b.n	33b38 <__aeabi_ddiv+0x5f4>
   33b86:	2280      	movs	r2, #128	; 0x80
   33b88:	465b      	mov	r3, fp
   33b8a:	0312      	lsls	r2, r2, #12
   33b8c:	431a      	orrs	r2, r3
   33b8e:	9b01      	ldr	r3, [sp, #4]
   33b90:	0312      	lsls	r2, r2, #12
   33b92:	0b12      	lsrs	r2, r2, #12
   33b94:	469c      	mov	ip, r3
   33b96:	4688      	mov	r8, r1
   33b98:	4c03      	ldr	r4, [pc, #12]	; (33ba8 <__aeabi_ddiv+0x664>)
   33b9a:	e5a1      	b.n	336e0 <__aeabi_ddiv+0x19c>
   33b9c:	000003ff 	.word	0x000003ff
   33ba0:	feffffff 	.word	0xfeffffff
   33ba4:	000007fe 	.word	0x000007fe
   33ba8:	000007ff 	.word	0x000007ff

00033bac <__aeabi_dmul>:
   33bac:	b5f0      	push	{r4, r5, r6, r7, lr}
   33bae:	4657      	mov	r7, sl
   33bb0:	4645      	mov	r5, r8
   33bb2:	46de      	mov	lr, fp
   33bb4:	464e      	mov	r6, r9
   33bb6:	b5e0      	push	{r5, r6, r7, lr}
   33bb8:	030c      	lsls	r4, r1, #12
   33bba:	4698      	mov	r8, r3
   33bbc:	004e      	lsls	r6, r1, #1
   33bbe:	0b23      	lsrs	r3, r4, #12
   33bc0:	b087      	sub	sp, #28
   33bc2:	0007      	movs	r7, r0
   33bc4:	4692      	mov	sl, r2
   33bc6:	469b      	mov	fp, r3
   33bc8:	0d76      	lsrs	r6, r6, #21
   33bca:	0fcd      	lsrs	r5, r1, #31
   33bcc:	2e00      	cmp	r6, #0
   33bce:	d06b      	beq.n	33ca8 <__aeabi_dmul+0xfc>
   33bd0:	4b6d      	ldr	r3, [pc, #436]	; (33d88 <__aeabi_dmul+0x1dc>)
   33bd2:	429e      	cmp	r6, r3
   33bd4:	d035      	beq.n	33c42 <__aeabi_dmul+0x96>
   33bd6:	2480      	movs	r4, #128	; 0x80
   33bd8:	465b      	mov	r3, fp
   33bda:	0f42      	lsrs	r2, r0, #29
   33bdc:	0424      	lsls	r4, r4, #16
   33bde:	00db      	lsls	r3, r3, #3
   33be0:	4314      	orrs	r4, r2
   33be2:	431c      	orrs	r4, r3
   33be4:	00c3      	lsls	r3, r0, #3
   33be6:	4699      	mov	r9, r3
   33be8:	4b68      	ldr	r3, [pc, #416]	; (33d8c <__aeabi_dmul+0x1e0>)
   33bea:	46a3      	mov	fp, r4
   33bec:	469c      	mov	ip, r3
   33bee:	2300      	movs	r3, #0
   33bf0:	2700      	movs	r7, #0
   33bf2:	4466      	add	r6, ip
   33bf4:	9302      	str	r3, [sp, #8]
   33bf6:	4643      	mov	r3, r8
   33bf8:	031c      	lsls	r4, r3, #12
   33bfa:	005a      	lsls	r2, r3, #1
   33bfc:	0fdb      	lsrs	r3, r3, #31
   33bfe:	4650      	mov	r0, sl
   33c00:	0b24      	lsrs	r4, r4, #12
   33c02:	0d52      	lsrs	r2, r2, #21
   33c04:	4698      	mov	r8, r3
   33c06:	d100      	bne.n	33c0a <__aeabi_dmul+0x5e>
   33c08:	e076      	b.n	33cf8 <__aeabi_dmul+0x14c>
   33c0a:	4b5f      	ldr	r3, [pc, #380]	; (33d88 <__aeabi_dmul+0x1dc>)
   33c0c:	429a      	cmp	r2, r3
   33c0e:	d06d      	beq.n	33cec <__aeabi_dmul+0x140>
   33c10:	2380      	movs	r3, #128	; 0x80
   33c12:	0f41      	lsrs	r1, r0, #29
   33c14:	041b      	lsls	r3, r3, #16
   33c16:	430b      	orrs	r3, r1
   33c18:	495c      	ldr	r1, [pc, #368]	; (33d8c <__aeabi_dmul+0x1e0>)
   33c1a:	00e4      	lsls	r4, r4, #3
   33c1c:	468c      	mov	ip, r1
   33c1e:	431c      	orrs	r4, r3
   33c20:	00c3      	lsls	r3, r0, #3
   33c22:	2000      	movs	r0, #0
   33c24:	4462      	add	r2, ip
   33c26:	4641      	mov	r1, r8
   33c28:	18b6      	adds	r6, r6, r2
   33c2a:	4069      	eors	r1, r5
   33c2c:	1c72      	adds	r2, r6, #1
   33c2e:	9101      	str	r1, [sp, #4]
   33c30:	4694      	mov	ip, r2
   33c32:	4307      	orrs	r7, r0
   33c34:	2f0f      	cmp	r7, #15
   33c36:	d900      	bls.n	33c3a <__aeabi_dmul+0x8e>
   33c38:	e0b0      	b.n	33d9c <__aeabi_dmul+0x1f0>
   33c3a:	4a55      	ldr	r2, [pc, #340]	; (33d90 <__aeabi_dmul+0x1e4>)
   33c3c:	00bf      	lsls	r7, r7, #2
   33c3e:	59d2      	ldr	r2, [r2, r7]
   33c40:	4697      	mov	pc, r2
   33c42:	465b      	mov	r3, fp
   33c44:	4303      	orrs	r3, r0
   33c46:	4699      	mov	r9, r3
   33c48:	d000      	beq.n	33c4c <__aeabi_dmul+0xa0>
   33c4a:	e087      	b.n	33d5c <__aeabi_dmul+0x1b0>
   33c4c:	2300      	movs	r3, #0
   33c4e:	469b      	mov	fp, r3
   33c50:	3302      	adds	r3, #2
   33c52:	2708      	movs	r7, #8
   33c54:	9302      	str	r3, [sp, #8]
   33c56:	e7ce      	b.n	33bf6 <__aeabi_dmul+0x4a>
   33c58:	4642      	mov	r2, r8
   33c5a:	9201      	str	r2, [sp, #4]
   33c5c:	2802      	cmp	r0, #2
   33c5e:	d067      	beq.n	33d30 <__aeabi_dmul+0x184>
   33c60:	2803      	cmp	r0, #3
   33c62:	d100      	bne.n	33c66 <__aeabi_dmul+0xba>
   33c64:	e20e      	b.n	34084 <__aeabi_dmul+0x4d8>
   33c66:	2801      	cmp	r0, #1
   33c68:	d000      	beq.n	33c6c <__aeabi_dmul+0xc0>
   33c6a:	e162      	b.n	33f32 <__aeabi_dmul+0x386>
   33c6c:	2300      	movs	r3, #0
   33c6e:	2400      	movs	r4, #0
   33c70:	2200      	movs	r2, #0
   33c72:	4699      	mov	r9, r3
   33c74:	9901      	ldr	r1, [sp, #4]
   33c76:	4001      	ands	r1, r0
   33c78:	b2cd      	uxtb	r5, r1
   33c7a:	2100      	movs	r1, #0
   33c7c:	0312      	lsls	r2, r2, #12
   33c7e:	0d0b      	lsrs	r3, r1, #20
   33c80:	0b12      	lsrs	r2, r2, #12
   33c82:	051b      	lsls	r3, r3, #20
   33c84:	4313      	orrs	r3, r2
   33c86:	4a43      	ldr	r2, [pc, #268]	; (33d94 <__aeabi_dmul+0x1e8>)
   33c88:	0524      	lsls	r4, r4, #20
   33c8a:	4013      	ands	r3, r2
   33c8c:	431c      	orrs	r4, r3
   33c8e:	0064      	lsls	r4, r4, #1
   33c90:	07ed      	lsls	r5, r5, #31
   33c92:	0864      	lsrs	r4, r4, #1
   33c94:	432c      	orrs	r4, r5
   33c96:	4648      	mov	r0, r9
   33c98:	0021      	movs	r1, r4
   33c9a:	b007      	add	sp, #28
   33c9c:	bc3c      	pop	{r2, r3, r4, r5}
   33c9e:	4690      	mov	r8, r2
   33ca0:	4699      	mov	r9, r3
   33ca2:	46a2      	mov	sl, r4
   33ca4:	46ab      	mov	fp, r5
   33ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33ca8:	4303      	orrs	r3, r0
   33caa:	4699      	mov	r9, r3
   33cac:	d04f      	beq.n	33d4e <__aeabi_dmul+0x1a2>
   33cae:	465b      	mov	r3, fp
   33cb0:	2b00      	cmp	r3, #0
   33cb2:	d100      	bne.n	33cb6 <__aeabi_dmul+0x10a>
   33cb4:	e189      	b.n	33fca <__aeabi_dmul+0x41e>
   33cb6:	4658      	mov	r0, fp
   33cb8:	f000 fd7a 	bl	347b0 <__clzsi2>
   33cbc:	0003      	movs	r3, r0
   33cbe:	3b0b      	subs	r3, #11
   33cc0:	2b1c      	cmp	r3, #28
   33cc2:	dd00      	ble.n	33cc6 <__aeabi_dmul+0x11a>
   33cc4:	e17a      	b.n	33fbc <__aeabi_dmul+0x410>
   33cc6:	221d      	movs	r2, #29
   33cc8:	1ad3      	subs	r3, r2, r3
   33cca:	003a      	movs	r2, r7
   33ccc:	0001      	movs	r1, r0
   33cce:	465c      	mov	r4, fp
   33cd0:	40da      	lsrs	r2, r3
   33cd2:	3908      	subs	r1, #8
   33cd4:	408c      	lsls	r4, r1
   33cd6:	0013      	movs	r3, r2
   33cd8:	408f      	lsls	r7, r1
   33cda:	4323      	orrs	r3, r4
   33cdc:	469b      	mov	fp, r3
   33cde:	46b9      	mov	r9, r7
   33ce0:	2300      	movs	r3, #0
   33ce2:	4e2d      	ldr	r6, [pc, #180]	; (33d98 <__aeabi_dmul+0x1ec>)
   33ce4:	2700      	movs	r7, #0
   33ce6:	1a36      	subs	r6, r6, r0
   33ce8:	9302      	str	r3, [sp, #8]
   33cea:	e784      	b.n	33bf6 <__aeabi_dmul+0x4a>
   33cec:	4653      	mov	r3, sl
   33cee:	4323      	orrs	r3, r4
   33cf0:	d12a      	bne.n	33d48 <__aeabi_dmul+0x19c>
   33cf2:	2400      	movs	r4, #0
   33cf4:	2002      	movs	r0, #2
   33cf6:	e796      	b.n	33c26 <__aeabi_dmul+0x7a>
   33cf8:	4653      	mov	r3, sl
   33cfa:	4323      	orrs	r3, r4
   33cfc:	d020      	beq.n	33d40 <__aeabi_dmul+0x194>
   33cfe:	2c00      	cmp	r4, #0
   33d00:	d100      	bne.n	33d04 <__aeabi_dmul+0x158>
   33d02:	e157      	b.n	33fb4 <__aeabi_dmul+0x408>
   33d04:	0020      	movs	r0, r4
   33d06:	f000 fd53 	bl	347b0 <__clzsi2>
   33d0a:	0003      	movs	r3, r0
   33d0c:	3b0b      	subs	r3, #11
   33d0e:	2b1c      	cmp	r3, #28
   33d10:	dd00      	ble.n	33d14 <__aeabi_dmul+0x168>
   33d12:	e149      	b.n	33fa8 <__aeabi_dmul+0x3fc>
   33d14:	211d      	movs	r1, #29
   33d16:	1acb      	subs	r3, r1, r3
   33d18:	4651      	mov	r1, sl
   33d1a:	0002      	movs	r2, r0
   33d1c:	40d9      	lsrs	r1, r3
   33d1e:	4653      	mov	r3, sl
   33d20:	3a08      	subs	r2, #8
   33d22:	4094      	lsls	r4, r2
   33d24:	4093      	lsls	r3, r2
   33d26:	430c      	orrs	r4, r1
   33d28:	4a1b      	ldr	r2, [pc, #108]	; (33d98 <__aeabi_dmul+0x1ec>)
   33d2a:	1a12      	subs	r2, r2, r0
   33d2c:	2000      	movs	r0, #0
   33d2e:	e77a      	b.n	33c26 <__aeabi_dmul+0x7a>
   33d30:	2501      	movs	r5, #1
   33d32:	9b01      	ldr	r3, [sp, #4]
   33d34:	4c14      	ldr	r4, [pc, #80]	; (33d88 <__aeabi_dmul+0x1dc>)
   33d36:	401d      	ands	r5, r3
   33d38:	2300      	movs	r3, #0
   33d3a:	2200      	movs	r2, #0
   33d3c:	4699      	mov	r9, r3
   33d3e:	e79c      	b.n	33c7a <__aeabi_dmul+0xce>
   33d40:	2400      	movs	r4, #0
   33d42:	2200      	movs	r2, #0
   33d44:	2001      	movs	r0, #1
   33d46:	e76e      	b.n	33c26 <__aeabi_dmul+0x7a>
   33d48:	4653      	mov	r3, sl
   33d4a:	2003      	movs	r0, #3
   33d4c:	e76b      	b.n	33c26 <__aeabi_dmul+0x7a>
   33d4e:	2300      	movs	r3, #0
   33d50:	469b      	mov	fp, r3
   33d52:	3301      	adds	r3, #1
   33d54:	2704      	movs	r7, #4
   33d56:	2600      	movs	r6, #0
   33d58:	9302      	str	r3, [sp, #8]
   33d5a:	e74c      	b.n	33bf6 <__aeabi_dmul+0x4a>
   33d5c:	2303      	movs	r3, #3
   33d5e:	4681      	mov	r9, r0
   33d60:	270c      	movs	r7, #12
   33d62:	9302      	str	r3, [sp, #8]
   33d64:	e747      	b.n	33bf6 <__aeabi_dmul+0x4a>
   33d66:	2280      	movs	r2, #128	; 0x80
   33d68:	2300      	movs	r3, #0
   33d6a:	2500      	movs	r5, #0
   33d6c:	0312      	lsls	r2, r2, #12
   33d6e:	4699      	mov	r9, r3
   33d70:	4c05      	ldr	r4, [pc, #20]	; (33d88 <__aeabi_dmul+0x1dc>)
   33d72:	e782      	b.n	33c7a <__aeabi_dmul+0xce>
   33d74:	465c      	mov	r4, fp
   33d76:	464b      	mov	r3, r9
   33d78:	9802      	ldr	r0, [sp, #8]
   33d7a:	e76f      	b.n	33c5c <__aeabi_dmul+0xb0>
   33d7c:	465c      	mov	r4, fp
   33d7e:	464b      	mov	r3, r9
   33d80:	9501      	str	r5, [sp, #4]
   33d82:	9802      	ldr	r0, [sp, #8]
   33d84:	e76a      	b.n	33c5c <__aeabi_dmul+0xb0>
   33d86:	46c0      	nop			; (mov r8, r8)
   33d88:	000007ff 	.word	0x000007ff
   33d8c:	fffffc01 	.word	0xfffffc01
   33d90:	00039ef8 	.word	0x00039ef8
   33d94:	800fffff 	.word	0x800fffff
   33d98:	fffffc0d 	.word	0xfffffc0d
   33d9c:	464a      	mov	r2, r9
   33d9e:	4649      	mov	r1, r9
   33da0:	0c17      	lsrs	r7, r2, #16
   33da2:	0c1a      	lsrs	r2, r3, #16
   33da4:	041b      	lsls	r3, r3, #16
   33da6:	0c1b      	lsrs	r3, r3, #16
   33da8:	0408      	lsls	r0, r1, #16
   33daa:	0019      	movs	r1, r3
   33dac:	0c00      	lsrs	r0, r0, #16
   33dae:	4341      	muls	r1, r0
   33db0:	0015      	movs	r5, r2
   33db2:	4688      	mov	r8, r1
   33db4:	0019      	movs	r1, r3
   33db6:	437d      	muls	r5, r7
   33db8:	4379      	muls	r1, r7
   33dba:	9503      	str	r5, [sp, #12]
   33dbc:	4689      	mov	r9, r1
   33dbe:	0029      	movs	r1, r5
   33dc0:	0015      	movs	r5, r2
   33dc2:	4345      	muls	r5, r0
   33dc4:	444d      	add	r5, r9
   33dc6:	9502      	str	r5, [sp, #8]
   33dc8:	4645      	mov	r5, r8
   33dca:	0c2d      	lsrs	r5, r5, #16
   33dcc:	46aa      	mov	sl, r5
   33dce:	9d02      	ldr	r5, [sp, #8]
   33dd0:	4455      	add	r5, sl
   33dd2:	45a9      	cmp	r9, r5
   33dd4:	d906      	bls.n	33de4 <__aeabi_dmul+0x238>
   33dd6:	468a      	mov	sl, r1
   33dd8:	2180      	movs	r1, #128	; 0x80
   33dda:	0249      	lsls	r1, r1, #9
   33ddc:	4689      	mov	r9, r1
   33dde:	44ca      	add	sl, r9
   33de0:	4651      	mov	r1, sl
   33de2:	9103      	str	r1, [sp, #12]
   33de4:	0c29      	lsrs	r1, r5, #16
   33de6:	9104      	str	r1, [sp, #16]
   33de8:	4641      	mov	r1, r8
   33dea:	0409      	lsls	r1, r1, #16
   33dec:	042d      	lsls	r5, r5, #16
   33dee:	0c09      	lsrs	r1, r1, #16
   33df0:	4688      	mov	r8, r1
   33df2:	0029      	movs	r1, r5
   33df4:	0c25      	lsrs	r5, r4, #16
   33df6:	0424      	lsls	r4, r4, #16
   33df8:	4441      	add	r1, r8
   33dfa:	0c24      	lsrs	r4, r4, #16
   33dfc:	9105      	str	r1, [sp, #20]
   33dfe:	0021      	movs	r1, r4
   33e00:	4341      	muls	r1, r0
   33e02:	4688      	mov	r8, r1
   33e04:	0021      	movs	r1, r4
   33e06:	4379      	muls	r1, r7
   33e08:	468a      	mov	sl, r1
   33e0a:	4368      	muls	r0, r5
   33e0c:	4641      	mov	r1, r8
   33e0e:	4450      	add	r0, sl
   33e10:	4681      	mov	r9, r0
   33e12:	0c08      	lsrs	r0, r1, #16
   33e14:	4448      	add	r0, r9
   33e16:	436f      	muls	r7, r5
   33e18:	4582      	cmp	sl, r0
   33e1a:	d903      	bls.n	33e24 <__aeabi_dmul+0x278>
   33e1c:	2180      	movs	r1, #128	; 0x80
   33e1e:	0249      	lsls	r1, r1, #9
   33e20:	4689      	mov	r9, r1
   33e22:	444f      	add	r7, r9
   33e24:	0c01      	lsrs	r1, r0, #16
   33e26:	4689      	mov	r9, r1
   33e28:	0039      	movs	r1, r7
   33e2a:	4449      	add	r1, r9
   33e2c:	9102      	str	r1, [sp, #8]
   33e2e:	4641      	mov	r1, r8
   33e30:	040f      	lsls	r7, r1, #16
   33e32:	9904      	ldr	r1, [sp, #16]
   33e34:	0c3f      	lsrs	r7, r7, #16
   33e36:	4688      	mov	r8, r1
   33e38:	0400      	lsls	r0, r0, #16
   33e3a:	19c0      	adds	r0, r0, r7
   33e3c:	4480      	add	r8, r0
   33e3e:	4641      	mov	r1, r8
   33e40:	9104      	str	r1, [sp, #16]
   33e42:	4659      	mov	r1, fp
   33e44:	0c0f      	lsrs	r7, r1, #16
   33e46:	0409      	lsls	r1, r1, #16
   33e48:	0c09      	lsrs	r1, r1, #16
   33e4a:	4688      	mov	r8, r1
   33e4c:	4359      	muls	r1, r3
   33e4e:	468a      	mov	sl, r1
   33e50:	0039      	movs	r1, r7
   33e52:	4351      	muls	r1, r2
   33e54:	4689      	mov	r9, r1
   33e56:	4641      	mov	r1, r8
   33e58:	434a      	muls	r2, r1
   33e5a:	4651      	mov	r1, sl
   33e5c:	0c09      	lsrs	r1, r1, #16
   33e5e:	468b      	mov	fp, r1
   33e60:	437b      	muls	r3, r7
   33e62:	18d2      	adds	r2, r2, r3
   33e64:	445a      	add	r2, fp
   33e66:	4293      	cmp	r3, r2
   33e68:	d903      	bls.n	33e72 <__aeabi_dmul+0x2c6>
   33e6a:	2380      	movs	r3, #128	; 0x80
   33e6c:	025b      	lsls	r3, r3, #9
   33e6e:	469b      	mov	fp, r3
   33e70:	44d9      	add	r9, fp
   33e72:	4651      	mov	r1, sl
   33e74:	0409      	lsls	r1, r1, #16
   33e76:	0c09      	lsrs	r1, r1, #16
   33e78:	468a      	mov	sl, r1
   33e7a:	4641      	mov	r1, r8
   33e7c:	4361      	muls	r1, r4
   33e7e:	437c      	muls	r4, r7
   33e80:	0c13      	lsrs	r3, r2, #16
   33e82:	0412      	lsls	r2, r2, #16
   33e84:	444b      	add	r3, r9
   33e86:	4452      	add	r2, sl
   33e88:	46a1      	mov	r9, r4
   33e8a:	468a      	mov	sl, r1
   33e8c:	003c      	movs	r4, r7
   33e8e:	4641      	mov	r1, r8
   33e90:	436c      	muls	r4, r5
   33e92:	434d      	muls	r5, r1
   33e94:	4651      	mov	r1, sl
   33e96:	444d      	add	r5, r9
   33e98:	0c0f      	lsrs	r7, r1, #16
   33e9a:	197d      	adds	r5, r7, r5
   33e9c:	45a9      	cmp	r9, r5
   33e9e:	d903      	bls.n	33ea8 <__aeabi_dmul+0x2fc>
   33ea0:	2180      	movs	r1, #128	; 0x80
   33ea2:	0249      	lsls	r1, r1, #9
   33ea4:	4688      	mov	r8, r1
   33ea6:	4444      	add	r4, r8
   33ea8:	9f04      	ldr	r7, [sp, #16]
   33eaa:	9903      	ldr	r1, [sp, #12]
   33eac:	46b8      	mov	r8, r7
   33eae:	4441      	add	r1, r8
   33eb0:	468b      	mov	fp, r1
   33eb2:	4583      	cmp	fp, r0
   33eb4:	4180      	sbcs	r0, r0
   33eb6:	4241      	negs	r1, r0
   33eb8:	4688      	mov	r8, r1
   33eba:	4651      	mov	r1, sl
   33ebc:	0408      	lsls	r0, r1, #16
   33ebe:	042f      	lsls	r7, r5, #16
   33ec0:	0c00      	lsrs	r0, r0, #16
   33ec2:	183f      	adds	r7, r7, r0
   33ec4:	4658      	mov	r0, fp
   33ec6:	9902      	ldr	r1, [sp, #8]
   33ec8:	1810      	adds	r0, r2, r0
   33eca:	4689      	mov	r9, r1
   33ecc:	4290      	cmp	r0, r2
   33ece:	4192      	sbcs	r2, r2
   33ed0:	444f      	add	r7, r9
   33ed2:	46ba      	mov	sl, r7
   33ed4:	4252      	negs	r2, r2
   33ed6:	4699      	mov	r9, r3
   33ed8:	4693      	mov	fp, r2
   33eda:	44c2      	add	sl, r8
   33edc:	44d1      	add	r9, sl
   33ede:	44cb      	add	fp, r9
   33ee0:	428f      	cmp	r7, r1
   33ee2:	41bf      	sbcs	r7, r7
   33ee4:	45c2      	cmp	sl, r8
   33ee6:	4189      	sbcs	r1, r1
   33ee8:	4599      	cmp	r9, r3
   33eea:	419b      	sbcs	r3, r3
   33eec:	4593      	cmp	fp, r2
   33eee:	4192      	sbcs	r2, r2
   33ef0:	427f      	negs	r7, r7
   33ef2:	4249      	negs	r1, r1
   33ef4:	0c2d      	lsrs	r5, r5, #16
   33ef6:	4252      	negs	r2, r2
   33ef8:	430f      	orrs	r7, r1
   33efa:	425b      	negs	r3, r3
   33efc:	4313      	orrs	r3, r2
   33efe:	197f      	adds	r7, r7, r5
   33f00:	18ff      	adds	r7, r7, r3
   33f02:	465b      	mov	r3, fp
   33f04:	193c      	adds	r4, r7, r4
   33f06:	0ddb      	lsrs	r3, r3, #23
   33f08:	9a05      	ldr	r2, [sp, #20]
   33f0a:	0264      	lsls	r4, r4, #9
   33f0c:	431c      	orrs	r4, r3
   33f0e:	0243      	lsls	r3, r0, #9
   33f10:	4313      	orrs	r3, r2
   33f12:	1e5d      	subs	r5, r3, #1
   33f14:	41ab      	sbcs	r3, r5
   33f16:	465a      	mov	r2, fp
   33f18:	0dc0      	lsrs	r0, r0, #23
   33f1a:	4303      	orrs	r3, r0
   33f1c:	0252      	lsls	r2, r2, #9
   33f1e:	4313      	orrs	r3, r2
   33f20:	01e2      	lsls	r2, r4, #7
   33f22:	d556      	bpl.n	33fd2 <__aeabi_dmul+0x426>
   33f24:	2001      	movs	r0, #1
   33f26:	085a      	lsrs	r2, r3, #1
   33f28:	4003      	ands	r3, r0
   33f2a:	4313      	orrs	r3, r2
   33f2c:	07e2      	lsls	r2, r4, #31
   33f2e:	4313      	orrs	r3, r2
   33f30:	0864      	lsrs	r4, r4, #1
   33f32:	485a      	ldr	r0, [pc, #360]	; (3409c <__aeabi_dmul+0x4f0>)
   33f34:	4460      	add	r0, ip
   33f36:	2800      	cmp	r0, #0
   33f38:	dd4d      	ble.n	33fd6 <__aeabi_dmul+0x42a>
   33f3a:	075a      	lsls	r2, r3, #29
   33f3c:	d009      	beq.n	33f52 <__aeabi_dmul+0x3a6>
   33f3e:	220f      	movs	r2, #15
   33f40:	401a      	ands	r2, r3
   33f42:	2a04      	cmp	r2, #4
   33f44:	d005      	beq.n	33f52 <__aeabi_dmul+0x3a6>
   33f46:	1d1a      	adds	r2, r3, #4
   33f48:	429a      	cmp	r2, r3
   33f4a:	419b      	sbcs	r3, r3
   33f4c:	425b      	negs	r3, r3
   33f4e:	18e4      	adds	r4, r4, r3
   33f50:	0013      	movs	r3, r2
   33f52:	01e2      	lsls	r2, r4, #7
   33f54:	d504      	bpl.n	33f60 <__aeabi_dmul+0x3b4>
   33f56:	2080      	movs	r0, #128	; 0x80
   33f58:	4a51      	ldr	r2, [pc, #324]	; (340a0 <__aeabi_dmul+0x4f4>)
   33f5a:	00c0      	lsls	r0, r0, #3
   33f5c:	4014      	ands	r4, r2
   33f5e:	4460      	add	r0, ip
   33f60:	4a50      	ldr	r2, [pc, #320]	; (340a4 <__aeabi_dmul+0x4f8>)
   33f62:	4290      	cmp	r0, r2
   33f64:	dd00      	ble.n	33f68 <__aeabi_dmul+0x3bc>
   33f66:	e6e3      	b.n	33d30 <__aeabi_dmul+0x184>
   33f68:	2501      	movs	r5, #1
   33f6a:	08db      	lsrs	r3, r3, #3
   33f6c:	0762      	lsls	r2, r4, #29
   33f6e:	431a      	orrs	r2, r3
   33f70:	0264      	lsls	r4, r4, #9
   33f72:	9b01      	ldr	r3, [sp, #4]
   33f74:	4691      	mov	r9, r2
   33f76:	0b22      	lsrs	r2, r4, #12
   33f78:	0544      	lsls	r4, r0, #21
   33f7a:	0d64      	lsrs	r4, r4, #21
   33f7c:	401d      	ands	r5, r3
   33f7e:	e67c      	b.n	33c7a <__aeabi_dmul+0xce>
   33f80:	2280      	movs	r2, #128	; 0x80
   33f82:	4659      	mov	r1, fp
   33f84:	0312      	lsls	r2, r2, #12
   33f86:	4211      	tst	r1, r2
   33f88:	d008      	beq.n	33f9c <__aeabi_dmul+0x3f0>
   33f8a:	4214      	tst	r4, r2
   33f8c:	d106      	bne.n	33f9c <__aeabi_dmul+0x3f0>
   33f8e:	4322      	orrs	r2, r4
   33f90:	0312      	lsls	r2, r2, #12
   33f92:	0b12      	lsrs	r2, r2, #12
   33f94:	4645      	mov	r5, r8
   33f96:	4699      	mov	r9, r3
   33f98:	4c43      	ldr	r4, [pc, #268]	; (340a8 <__aeabi_dmul+0x4fc>)
   33f9a:	e66e      	b.n	33c7a <__aeabi_dmul+0xce>
   33f9c:	465b      	mov	r3, fp
   33f9e:	431a      	orrs	r2, r3
   33fa0:	0312      	lsls	r2, r2, #12
   33fa2:	0b12      	lsrs	r2, r2, #12
   33fa4:	4c40      	ldr	r4, [pc, #256]	; (340a8 <__aeabi_dmul+0x4fc>)
   33fa6:	e668      	b.n	33c7a <__aeabi_dmul+0xce>
   33fa8:	0003      	movs	r3, r0
   33faa:	4654      	mov	r4, sl
   33fac:	3b28      	subs	r3, #40	; 0x28
   33fae:	409c      	lsls	r4, r3
   33fb0:	2300      	movs	r3, #0
   33fb2:	e6b9      	b.n	33d28 <__aeabi_dmul+0x17c>
   33fb4:	f000 fbfc 	bl	347b0 <__clzsi2>
   33fb8:	3020      	adds	r0, #32
   33fba:	e6a6      	b.n	33d0a <__aeabi_dmul+0x15e>
   33fbc:	0003      	movs	r3, r0
   33fbe:	3b28      	subs	r3, #40	; 0x28
   33fc0:	409f      	lsls	r7, r3
   33fc2:	2300      	movs	r3, #0
   33fc4:	46bb      	mov	fp, r7
   33fc6:	4699      	mov	r9, r3
   33fc8:	e68a      	b.n	33ce0 <__aeabi_dmul+0x134>
   33fca:	f000 fbf1 	bl	347b0 <__clzsi2>
   33fce:	3020      	adds	r0, #32
   33fd0:	e674      	b.n	33cbc <__aeabi_dmul+0x110>
   33fd2:	46b4      	mov	ip, r6
   33fd4:	e7ad      	b.n	33f32 <__aeabi_dmul+0x386>
   33fd6:	2501      	movs	r5, #1
   33fd8:	1a2a      	subs	r2, r5, r0
   33fda:	2a38      	cmp	r2, #56	; 0x38
   33fdc:	dd06      	ble.n	33fec <__aeabi_dmul+0x440>
   33fde:	9b01      	ldr	r3, [sp, #4]
   33fe0:	2400      	movs	r4, #0
   33fe2:	401d      	ands	r5, r3
   33fe4:	2300      	movs	r3, #0
   33fe6:	2200      	movs	r2, #0
   33fe8:	4699      	mov	r9, r3
   33fea:	e646      	b.n	33c7a <__aeabi_dmul+0xce>
   33fec:	2a1f      	cmp	r2, #31
   33fee:	dc21      	bgt.n	34034 <__aeabi_dmul+0x488>
   33ff0:	2520      	movs	r5, #32
   33ff2:	0020      	movs	r0, r4
   33ff4:	1aad      	subs	r5, r5, r2
   33ff6:	001e      	movs	r6, r3
   33ff8:	40ab      	lsls	r3, r5
   33ffa:	40a8      	lsls	r0, r5
   33ffc:	40d6      	lsrs	r6, r2
   33ffe:	1e5d      	subs	r5, r3, #1
   34000:	41ab      	sbcs	r3, r5
   34002:	4330      	orrs	r0, r6
   34004:	4318      	orrs	r0, r3
   34006:	40d4      	lsrs	r4, r2
   34008:	0743      	lsls	r3, r0, #29
   3400a:	d009      	beq.n	34020 <__aeabi_dmul+0x474>
   3400c:	230f      	movs	r3, #15
   3400e:	4003      	ands	r3, r0
   34010:	2b04      	cmp	r3, #4
   34012:	d005      	beq.n	34020 <__aeabi_dmul+0x474>
   34014:	0003      	movs	r3, r0
   34016:	1d18      	adds	r0, r3, #4
   34018:	4298      	cmp	r0, r3
   3401a:	419b      	sbcs	r3, r3
   3401c:	425b      	negs	r3, r3
   3401e:	18e4      	adds	r4, r4, r3
   34020:	0223      	lsls	r3, r4, #8
   34022:	d521      	bpl.n	34068 <__aeabi_dmul+0x4bc>
   34024:	2501      	movs	r5, #1
   34026:	9b01      	ldr	r3, [sp, #4]
   34028:	2401      	movs	r4, #1
   3402a:	401d      	ands	r5, r3
   3402c:	2300      	movs	r3, #0
   3402e:	2200      	movs	r2, #0
   34030:	4699      	mov	r9, r3
   34032:	e622      	b.n	33c7a <__aeabi_dmul+0xce>
   34034:	251f      	movs	r5, #31
   34036:	0021      	movs	r1, r4
   34038:	426d      	negs	r5, r5
   3403a:	1a28      	subs	r0, r5, r0
   3403c:	40c1      	lsrs	r1, r0
   3403e:	0008      	movs	r0, r1
   34040:	2a20      	cmp	r2, #32
   34042:	d01d      	beq.n	34080 <__aeabi_dmul+0x4d4>
   34044:	355f      	adds	r5, #95	; 0x5f
   34046:	1aaa      	subs	r2, r5, r2
   34048:	4094      	lsls	r4, r2
   3404a:	4323      	orrs	r3, r4
   3404c:	1e5c      	subs	r4, r3, #1
   3404e:	41a3      	sbcs	r3, r4
   34050:	2507      	movs	r5, #7
   34052:	4303      	orrs	r3, r0
   34054:	401d      	ands	r5, r3
   34056:	2200      	movs	r2, #0
   34058:	2d00      	cmp	r5, #0
   3405a:	d009      	beq.n	34070 <__aeabi_dmul+0x4c4>
   3405c:	220f      	movs	r2, #15
   3405e:	2400      	movs	r4, #0
   34060:	401a      	ands	r2, r3
   34062:	0018      	movs	r0, r3
   34064:	2a04      	cmp	r2, #4
   34066:	d1d6      	bne.n	34016 <__aeabi_dmul+0x46a>
   34068:	0003      	movs	r3, r0
   3406a:	0765      	lsls	r5, r4, #29
   3406c:	0264      	lsls	r4, r4, #9
   3406e:	0b22      	lsrs	r2, r4, #12
   34070:	08db      	lsrs	r3, r3, #3
   34072:	432b      	orrs	r3, r5
   34074:	2501      	movs	r5, #1
   34076:	4699      	mov	r9, r3
   34078:	9b01      	ldr	r3, [sp, #4]
   3407a:	2400      	movs	r4, #0
   3407c:	401d      	ands	r5, r3
   3407e:	e5fc      	b.n	33c7a <__aeabi_dmul+0xce>
   34080:	2400      	movs	r4, #0
   34082:	e7e2      	b.n	3404a <__aeabi_dmul+0x49e>
   34084:	2280      	movs	r2, #128	; 0x80
   34086:	2501      	movs	r5, #1
   34088:	0312      	lsls	r2, r2, #12
   3408a:	4322      	orrs	r2, r4
   3408c:	9901      	ldr	r1, [sp, #4]
   3408e:	0312      	lsls	r2, r2, #12
   34090:	0b12      	lsrs	r2, r2, #12
   34092:	400d      	ands	r5, r1
   34094:	4699      	mov	r9, r3
   34096:	4c04      	ldr	r4, [pc, #16]	; (340a8 <__aeabi_dmul+0x4fc>)
   34098:	e5ef      	b.n	33c7a <__aeabi_dmul+0xce>
   3409a:	46c0      	nop			; (mov r8, r8)
   3409c:	000003ff 	.word	0x000003ff
   340a0:	feffffff 	.word	0xfeffffff
   340a4:	000007fe 	.word	0x000007fe
   340a8:	000007ff 	.word	0x000007ff

000340ac <__aeabi_dsub>:
   340ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   340ae:	4646      	mov	r6, r8
   340b0:	46d6      	mov	lr, sl
   340b2:	464f      	mov	r7, r9
   340b4:	030c      	lsls	r4, r1, #12
   340b6:	b5c0      	push	{r6, r7, lr}
   340b8:	0fcd      	lsrs	r5, r1, #31
   340ba:	004e      	lsls	r6, r1, #1
   340bc:	0a61      	lsrs	r1, r4, #9
   340be:	0f44      	lsrs	r4, r0, #29
   340c0:	430c      	orrs	r4, r1
   340c2:	00c1      	lsls	r1, r0, #3
   340c4:	0058      	lsls	r0, r3, #1
   340c6:	0d40      	lsrs	r0, r0, #21
   340c8:	4684      	mov	ip, r0
   340ca:	468a      	mov	sl, r1
   340cc:	000f      	movs	r7, r1
   340ce:	0319      	lsls	r1, r3, #12
   340d0:	0f50      	lsrs	r0, r2, #29
   340d2:	0a49      	lsrs	r1, r1, #9
   340d4:	4301      	orrs	r1, r0
   340d6:	48c6      	ldr	r0, [pc, #792]	; (343f0 <__aeabi_dsub+0x344>)
   340d8:	0d76      	lsrs	r6, r6, #21
   340da:	46a8      	mov	r8, r5
   340dc:	0fdb      	lsrs	r3, r3, #31
   340de:	00d2      	lsls	r2, r2, #3
   340e0:	4584      	cmp	ip, r0
   340e2:	d100      	bne.n	340e6 <__aeabi_dsub+0x3a>
   340e4:	e0d8      	b.n	34298 <__aeabi_dsub+0x1ec>
   340e6:	2001      	movs	r0, #1
   340e8:	4043      	eors	r3, r0
   340ea:	42ab      	cmp	r3, r5
   340ec:	d100      	bne.n	340f0 <__aeabi_dsub+0x44>
   340ee:	e0a6      	b.n	3423e <__aeabi_dsub+0x192>
   340f0:	4660      	mov	r0, ip
   340f2:	1a35      	subs	r5, r6, r0
   340f4:	2d00      	cmp	r5, #0
   340f6:	dc00      	bgt.n	340fa <__aeabi_dsub+0x4e>
   340f8:	e105      	b.n	34306 <__aeabi_dsub+0x25a>
   340fa:	2800      	cmp	r0, #0
   340fc:	d110      	bne.n	34120 <__aeabi_dsub+0x74>
   340fe:	000b      	movs	r3, r1
   34100:	4313      	orrs	r3, r2
   34102:	d100      	bne.n	34106 <__aeabi_dsub+0x5a>
   34104:	e0d7      	b.n	342b6 <__aeabi_dsub+0x20a>
   34106:	1e6b      	subs	r3, r5, #1
   34108:	2b00      	cmp	r3, #0
   3410a:	d000      	beq.n	3410e <__aeabi_dsub+0x62>
   3410c:	e14b      	b.n	343a6 <__aeabi_dsub+0x2fa>
   3410e:	4653      	mov	r3, sl
   34110:	1a9f      	subs	r7, r3, r2
   34112:	45ba      	cmp	sl, r7
   34114:	4180      	sbcs	r0, r0
   34116:	1a64      	subs	r4, r4, r1
   34118:	4240      	negs	r0, r0
   3411a:	1a24      	subs	r4, r4, r0
   3411c:	2601      	movs	r6, #1
   3411e:	e01e      	b.n	3415e <__aeabi_dsub+0xb2>
   34120:	4bb3      	ldr	r3, [pc, #716]	; (343f0 <__aeabi_dsub+0x344>)
   34122:	429e      	cmp	r6, r3
   34124:	d048      	beq.n	341b8 <__aeabi_dsub+0x10c>
   34126:	2380      	movs	r3, #128	; 0x80
   34128:	041b      	lsls	r3, r3, #16
   3412a:	4319      	orrs	r1, r3
   3412c:	2d38      	cmp	r5, #56	; 0x38
   3412e:	dd00      	ble.n	34132 <__aeabi_dsub+0x86>
   34130:	e119      	b.n	34366 <__aeabi_dsub+0x2ba>
   34132:	2d1f      	cmp	r5, #31
   34134:	dd00      	ble.n	34138 <__aeabi_dsub+0x8c>
   34136:	e14c      	b.n	343d2 <__aeabi_dsub+0x326>
   34138:	2320      	movs	r3, #32
   3413a:	000f      	movs	r7, r1
   3413c:	1b5b      	subs	r3, r3, r5
   3413e:	0010      	movs	r0, r2
   34140:	409a      	lsls	r2, r3
   34142:	409f      	lsls	r7, r3
   34144:	40e8      	lsrs	r0, r5
   34146:	1e53      	subs	r3, r2, #1
   34148:	419a      	sbcs	r2, r3
   3414a:	40e9      	lsrs	r1, r5
   3414c:	4307      	orrs	r7, r0
   3414e:	4317      	orrs	r7, r2
   34150:	4653      	mov	r3, sl
   34152:	1bdf      	subs	r7, r3, r7
   34154:	1a61      	subs	r1, r4, r1
   34156:	45ba      	cmp	sl, r7
   34158:	41a4      	sbcs	r4, r4
   3415a:	4264      	negs	r4, r4
   3415c:	1b0c      	subs	r4, r1, r4
   3415e:	0223      	lsls	r3, r4, #8
   34160:	d400      	bmi.n	34164 <__aeabi_dsub+0xb8>
   34162:	e0c5      	b.n	342f0 <__aeabi_dsub+0x244>
   34164:	0264      	lsls	r4, r4, #9
   34166:	0a65      	lsrs	r5, r4, #9
   34168:	2d00      	cmp	r5, #0
   3416a:	d100      	bne.n	3416e <__aeabi_dsub+0xc2>
   3416c:	e0f6      	b.n	3435c <__aeabi_dsub+0x2b0>
   3416e:	0028      	movs	r0, r5
   34170:	f000 fb1e 	bl	347b0 <__clzsi2>
   34174:	0003      	movs	r3, r0
   34176:	3b08      	subs	r3, #8
   34178:	2b1f      	cmp	r3, #31
   3417a:	dd00      	ble.n	3417e <__aeabi_dsub+0xd2>
   3417c:	e0e9      	b.n	34352 <__aeabi_dsub+0x2a6>
   3417e:	2220      	movs	r2, #32
   34180:	003c      	movs	r4, r7
   34182:	1ad2      	subs	r2, r2, r3
   34184:	409d      	lsls	r5, r3
   34186:	40d4      	lsrs	r4, r2
   34188:	409f      	lsls	r7, r3
   3418a:	4325      	orrs	r5, r4
   3418c:	429e      	cmp	r6, r3
   3418e:	dd00      	ble.n	34192 <__aeabi_dsub+0xe6>
   34190:	e0db      	b.n	3434a <__aeabi_dsub+0x29e>
   34192:	1b9e      	subs	r6, r3, r6
   34194:	1c73      	adds	r3, r6, #1
   34196:	2b1f      	cmp	r3, #31
   34198:	dd00      	ble.n	3419c <__aeabi_dsub+0xf0>
   3419a:	e10a      	b.n	343b2 <__aeabi_dsub+0x306>
   3419c:	2220      	movs	r2, #32
   3419e:	0038      	movs	r0, r7
   341a0:	1ad2      	subs	r2, r2, r3
   341a2:	0029      	movs	r1, r5
   341a4:	4097      	lsls	r7, r2
   341a6:	002c      	movs	r4, r5
   341a8:	4091      	lsls	r1, r2
   341aa:	40d8      	lsrs	r0, r3
   341ac:	1e7a      	subs	r2, r7, #1
   341ae:	4197      	sbcs	r7, r2
   341b0:	40dc      	lsrs	r4, r3
   341b2:	2600      	movs	r6, #0
   341b4:	4301      	orrs	r1, r0
   341b6:	430f      	orrs	r7, r1
   341b8:	077b      	lsls	r3, r7, #29
   341ba:	d009      	beq.n	341d0 <__aeabi_dsub+0x124>
   341bc:	230f      	movs	r3, #15
   341be:	403b      	ands	r3, r7
   341c0:	2b04      	cmp	r3, #4
   341c2:	d005      	beq.n	341d0 <__aeabi_dsub+0x124>
   341c4:	1d3b      	adds	r3, r7, #4
   341c6:	42bb      	cmp	r3, r7
   341c8:	41bf      	sbcs	r7, r7
   341ca:	427f      	negs	r7, r7
   341cc:	19e4      	adds	r4, r4, r7
   341ce:	001f      	movs	r7, r3
   341d0:	0223      	lsls	r3, r4, #8
   341d2:	d525      	bpl.n	34220 <__aeabi_dsub+0x174>
   341d4:	4b86      	ldr	r3, [pc, #536]	; (343f0 <__aeabi_dsub+0x344>)
   341d6:	3601      	adds	r6, #1
   341d8:	429e      	cmp	r6, r3
   341da:	d100      	bne.n	341de <__aeabi_dsub+0x132>
   341dc:	e0af      	b.n	3433e <__aeabi_dsub+0x292>
   341de:	4b85      	ldr	r3, [pc, #532]	; (343f4 <__aeabi_dsub+0x348>)
   341e0:	2501      	movs	r5, #1
   341e2:	401c      	ands	r4, r3
   341e4:	4643      	mov	r3, r8
   341e6:	0762      	lsls	r2, r4, #29
   341e8:	08ff      	lsrs	r7, r7, #3
   341ea:	0264      	lsls	r4, r4, #9
   341ec:	0576      	lsls	r6, r6, #21
   341ee:	4317      	orrs	r7, r2
   341f0:	0b24      	lsrs	r4, r4, #12
   341f2:	0d76      	lsrs	r6, r6, #21
   341f4:	401d      	ands	r5, r3
   341f6:	2100      	movs	r1, #0
   341f8:	0324      	lsls	r4, r4, #12
   341fa:	0b23      	lsrs	r3, r4, #12
   341fc:	0d0c      	lsrs	r4, r1, #20
   341fe:	4a7e      	ldr	r2, [pc, #504]	; (343f8 <__aeabi_dsub+0x34c>)
   34200:	0524      	lsls	r4, r4, #20
   34202:	431c      	orrs	r4, r3
   34204:	4014      	ands	r4, r2
   34206:	0533      	lsls	r3, r6, #20
   34208:	4323      	orrs	r3, r4
   3420a:	005b      	lsls	r3, r3, #1
   3420c:	07ed      	lsls	r5, r5, #31
   3420e:	085b      	lsrs	r3, r3, #1
   34210:	432b      	orrs	r3, r5
   34212:	0038      	movs	r0, r7
   34214:	0019      	movs	r1, r3
   34216:	bc1c      	pop	{r2, r3, r4}
   34218:	4690      	mov	r8, r2
   3421a:	4699      	mov	r9, r3
   3421c:	46a2      	mov	sl, r4
   3421e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34220:	2501      	movs	r5, #1
   34222:	4643      	mov	r3, r8
   34224:	0762      	lsls	r2, r4, #29
   34226:	08ff      	lsrs	r7, r7, #3
   34228:	4317      	orrs	r7, r2
   3422a:	08e4      	lsrs	r4, r4, #3
   3422c:	401d      	ands	r5, r3
   3422e:	4b70      	ldr	r3, [pc, #448]	; (343f0 <__aeabi_dsub+0x344>)
   34230:	429e      	cmp	r6, r3
   34232:	d036      	beq.n	342a2 <__aeabi_dsub+0x1f6>
   34234:	0324      	lsls	r4, r4, #12
   34236:	0576      	lsls	r6, r6, #21
   34238:	0b24      	lsrs	r4, r4, #12
   3423a:	0d76      	lsrs	r6, r6, #21
   3423c:	e7db      	b.n	341f6 <__aeabi_dsub+0x14a>
   3423e:	4663      	mov	r3, ip
   34240:	1af3      	subs	r3, r6, r3
   34242:	2b00      	cmp	r3, #0
   34244:	dc00      	bgt.n	34248 <__aeabi_dsub+0x19c>
   34246:	e094      	b.n	34372 <__aeabi_dsub+0x2c6>
   34248:	4660      	mov	r0, ip
   3424a:	2800      	cmp	r0, #0
   3424c:	d035      	beq.n	342ba <__aeabi_dsub+0x20e>
   3424e:	4868      	ldr	r0, [pc, #416]	; (343f0 <__aeabi_dsub+0x344>)
   34250:	4286      	cmp	r6, r0
   34252:	d0b1      	beq.n	341b8 <__aeabi_dsub+0x10c>
   34254:	2780      	movs	r7, #128	; 0x80
   34256:	043f      	lsls	r7, r7, #16
   34258:	4339      	orrs	r1, r7
   3425a:	2b38      	cmp	r3, #56	; 0x38
   3425c:	dc00      	bgt.n	34260 <__aeabi_dsub+0x1b4>
   3425e:	e0fd      	b.n	3445c <__aeabi_dsub+0x3b0>
   34260:	430a      	orrs	r2, r1
   34262:	0017      	movs	r7, r2
   34264:	2100      	movs	r1, #0
   34266:	1e7a      	subs	r2, r7, #1
   34268:	4197      	sbcs	r7, r2
   3426a:	4457      	add	r7, sl
   3426c:	4557      	cmp	r7, sl
   3426e:	4180      	sbcs	r0, r0
   34270:	1909      	adds	r1, r1, r4
   34272:	4244      	negs	r4, r0
   34274:	190c      	adds	r4, r1, r4
   34276:	0223      	lsls	r3, r4, #8
   34278:	d53a      	bpl.n	342f0 <__aeabi_dsub+0x244>
   3427a:	4b5d      	ldr	r3, [pc, #372]	; (343f0 <__aeabi_dsub+0x344>)
   3427c:	3601      	adds	r6, #1
   3427e:	429e      	cmp	r6, r3
   34280:	d100      	bne.n	34284 <__aeabi_dsub+0x1d8>
   34282:	e14b      	b.n	3451c <__aeabi_dsub+0x470>
   34284:	2201      	movs	r2, #1
   34286:	4b5b      	ldr	r3, [pc, #364]	; (343f4 <__aeabi_dsub+0x348>)
   34288:	401c      	ands	r4, r3
   3428a:	087b      	lsrs	r3, r7, #1
   3428c:	4017      	ands	r7, r2
   3428e:	431f      	orrs	r7, r3
   34290:	07e2      	lsls	r2, r4, #31
   34292:	4317      	orrs	r7, r2
   34294:	0864      	lsrs	r4, r4, #1
   34296:	e78f      	b.n	341b8 <__aeabi_dsub+0x10c>
   34298:	0008      	movs	r0, r1
   3429a:	4310      	orrs	r0, r2
   3429c:	d000      	beq.n	342a0 <__aeabi_dsub+0x1f4>
   3429e:	e724      	b.n	340ea <__aeabi_dsub+0x3e>
   342a0:	e721      	b.n	340e6 <__aeabi_dsub+0x3a>
   342a2:	0023      	movs	r3, r4
   342a4:	433b      	orrs	r3, r7
   342a6:	d100      	bne.n	342aa <__aeabi_dsub+0x1fe>
   342a8:	e1b9      	b.n	3461e <__aeabi_dsub+0x572>
   342aa:	2280      	movs	r2, #128	; 0x80
   342ac:	0312      	lsls	r2, r2, #12
   342ae:	4314      	orrs	r4, r2
   342b0:	0324      	lsls	r4, r4, #12
   342b2:	0b24      	lsrs	r4, r4, #12
   342b4:	e79f      	b.n	341f6 <__aeabi_dsub+0x14a>
   342b6:	002e      	movs	r6, r5
   342b8:	e77e      	b.n	341b8 <__aeabi_dsub+0x10c>
   342ba:	0008      	movs	r0, r1
   342bc:	4310      	orrs	r0, r2
   342be:	d100      	bne.n	342c2 <__aeabi_dsub+0x216>
   342c0:	e0ca      	b.n	34458 <__aeabi_dsub+0x3ac>
   342c2:	1e58      	subs	r0, r3, #1
   342c4:	4684      	mov	ip, r0
   342c6:	2800      	cmp	r0, #0
   342c8:	d000      	beq.n	342cc <__aeabi_dsub+0x220>
   342ca:	e0e7      	b.n	3449c <__aeabi_dsub+0x3f0>
   342cc:	4452      	add	r2, sl
   342ce:	4552      	cmp	r2, sl
   342d0:	4180      	sbcs	r0, r0
   342d2:	1864      	adds	r4, r4, r1
   342d4:	4240      	negs	r0, r0
   342d6:	1824      	adds	r4, r4, r0
   342d8:	0017      	movs	r7, r2
   342da:	2601      	movs	r6, #1
   342dc:	0223      	lsls	r3, r4, #8
   342de:	d507      	bpl.n	342f0 <__aeabi_dsub+0x244>
   342e0:	2602      	movs	r6, #2
   342e2:	e7cf      	b.n	34284 <__aeabi_dsub+0x1d8>
   342e4:	4664      	mov	r4, ip
   342e6:	432c      	orrs	r4, r5
   342e8:	d100      	bne.n	342ec <__aeabi_dsub+0x240>
   342ea:	e1b3      	b.n	34654 <__aeabi_dsub+0x5a8>
   342ec:	002c      	movs	r4, r5
   342ee:	4667      	mov	r7, ip
   342f0:	077b      	lsls	r3, r7, #29
   342f2:	d000      	beq.n	342f6 <__aeabi_dsub+0x24a>
   342f4:	e762      	b.n	341bc <__aeabi_dsub+0x110>
   342f6:	0763      	lsls	r3, r4, #29
   342f8:	08ff      	lsrs	r7, r7, #3
   342fa:	431f      	orrs	r7, r3
   342fc:	2501      	movs	r5, #1
   342fe:	4643      	mov	r3, r8
   34300:	08e4      	lsrs	r4, r4, #3
   34302:	401d      	ands	r5, r3
   34304:	e793      	b.n	3422e <__aeabi_dsub+0x182>
   34306:	2d00      	cmp	r5, #0
   34308:	d178      	bne.n	343fc <__aeabi_dsub+0x350>
   3430a:	1c75      	adds	r5, r6, #1
   3430c:	056d      	lsls	r5, r5, #21
   3430e:	0d6d      	lsrs	r5, r5, #21
   34310:	2d01      	cmp	r5, #1
   34312:	dc00      	bgt.n	34316 <__aeabi_dsub+0x26a>
   34314:	e0f2      	b.n	344fc <__aeabi_dsub+0x450>
   34316:	4650      	mov	r0, sl
   34318:	1a80      	subs	r0, r0, r2
   3431a:	4582      	cmp	sl, r0
   3431c:	41bf      	sbcs	r7, r7
   3431e:	1a65      	subs	r5, r4, r1
   34320:	427f      	negs	r7, r7
   34322:	1bed      	subs	r5, r5, r7
   34324:	4684      	mov	ip, r0
   34326:	0228      	lsls	r0, r5, #8
   34328:	d400      	bmi.n	3432c <__aeabi_dsub+0x280>
   3432a:	e08c      	b.n	34446 <__aeabi_dsub+0x39a>
   3432c:	4650      	mov	r0, sl
   3432e:	1a17      	subs	r7, r2, r0
   34330:	42ba      	cmp	r2, r7
   34332:	4192      	sbcs	r2, r2
   34334:	1b0c      	subs	r4, r1, r4
   34336:	4255      	negs	r5, r2
   34338:	1b65      	subs	r5, r4, r5
   3433a:	4698      	mov	r8, r3
   3433c:	e714      	b.n	34168 <__aeabi_dsub+0xbc>
   3433e:	2501      	movs	r5, #1
   34340:	4643      	mov	r3, r8
   34342:	2400      	movs	r4, #0
   34344:	401d      	ands	r5, r3
   34346:	2700      	movs	r7, #0
   34348:	e755      	b.n	341f6 <__aeabi_dsub+0x14a>
   3434a:	4c2a      	ldr	r4, [pc, #168]	; (343f4 <__aeabi_dsub+0x348>)
   3434c:	1af6      	subs	r6, r6, r3
   3434e:	402c      	ands	r4, r5
   34350:	e732      	b.n	341b8 <__aeabi_dsub+0x10c>
   34352:	003d      	movs	r5, r7
   34354:	3828      	subs	r0, #40	; 0x28
   34356:	4085      	lsls	r5, r0
   34358:	2700      	movs	r7, #0
   3435a:	e717      	b.n	3418c <__aeabi_dsub+0xe0>
   3435c:	0038      	movs	r0, r7
   3435e:	f000 fa27 	bl	347b0 <__clzsi2>
   34362:	3020      	adds	r0, #32
   34364:	e706      	b.n	34174 <__aeabi_dsub+0xc8>
   34366:	430a      	orrs	r2, r1
   34368:	0017      	movs	r7, r2
   3436a:	2100      	movs	r1, #0
   3436c:	1e7a      	subs	r2, r7, #1
   3436e:	4197      	sbcs	r7, r2
   34370:	e6ee      	b.n	34150 <__aeabi_dsub+0xa4>
   34372:	2b00      	cmp	r3, #0
   34374:	d000      	beq.n	34378 <__aeabi_dsub+0x2cc>
   34376:	e0e5      	b.n	34544 <__aeabi_dsub+0x498>
   34378:	1c73      	adds	r3, r6, #1
   3437a:	469c      	mov	ip, r3
   3437c:	055b      	lsls	r3, r3, #21
   3437e:	0d5b      	lsrs	r3, r3, #21
   34380:	2b01      	cmp	r3, #1
   34382:	dc00      	bgt.n	34386 <__aeabi_dsub+0x2da>
   34384:	e09f      	b.n	344c6 <__aeabi_dsub+0x41a>
   34386:	4b1a      	ldr	r3, [pc, #104]	; (343f0 <__aeabi_dsub+0x344>)
   34388:	459c      	cmp	ip, r3
   3438a:	d100      	bne.n	3438e <__aeabi_dsub+0x2e2>
   3438c:	e0c5      	b.n	3451a <__aeabi_dsub+0x46e>
   3438e:	4452      	add	r2, sl
   34390:	4552      	cmp	r2, sl
   34392:	4180      	sbcs	r0, r0
   34394:	1864      	adds	r4, r4, r1
   34396:	4240      	negs	r0, r0
   34398:	1824      	adds	r4, r4, r0
   3439a:	07e7      	lsls	r7, r4, #31
   3439c:	0852      	lsrs	r2, r2, #1
   3439e:	4317      	orrs	r7, r2
   343a0:	0864      	lsrs	r4, r4, #1
   343a2:	4666      	mov	r6, ip
   343a4:	e708      	b.n	341b8 <__aeabi_dsub+0x10c>
   343a6:	4812      	ldr	r0, [pc, #72]	; (343f0 <__aeabi_dsub+0x344>)
   343a8:	4285      	cmp	r5, r0
   343aa:	d100      	bne.n	343ae <__aeabi_dsub+0x302>
   343ac:	e085      	b.n	344ba <__aeabi_dsub+0x40e>
   343ae:	001d      	movs	r5, r3
   343b0:	e6bc      	b.n	3412c <__aeabi_dsub+0x80>
   343b2:	0029      	movs	r1, r5
   343b4:	3e1f      	subs	r6, #31
   343b6:	40f1      	lsrs	r1, r6
   343b8:	2b20      	cmp	r3, #32
   343ba:	d100      	bne.n	343be <__aeabi_dsub+0x312>
   343bc:	e07f      	b.n	344be <__aeabi_dsub+0x412>
   343be:	2240      	movs	r2, #64	; 0x40
   343c0:	1ad3      	subs	r3, r2, r3
   343c2:	409d      	lsls	r5, r3
   343c4:	432f      	orrs	r7, r5
   343c6:	1e7d      	subs	r5, r7, #1
   343c8:	41af      	sbcs	r7, r5
   343ca:	2400      	movs	r4, #0
   343cc:	430f      	orrs	r7, r1
   343ce:	2600      	movs	r6, #0
   343d0:	e78e      	b.n	342f0 <__aeabi_dsub+0x244>
   343d2:	002b      	movs	r3, r5
   343d4:	000f      	movs	r7, r1
   343d6:	3b20      	subs	r3, #32
   343d8:	40df      	lsrs	r7, r3
   343da:	2d20      	cmp	r5, #32
   343dc:	d071      	beq.n	344c2 <__aeabi_dsub+0x416>
   343de:	2340      	movs	r3, #64	; 0x40
   343e0:	1b5d      	subs	r5, r3, r5
   343e2:	40a9      	lsls	r1, r5
   343e4:	430a      	orrs	r2, r1
   343e6:	1e51      	subs	r1, r2, #1
   343e8:	418a      	sbcs	r2, r1
   343ea:	2100      	movs	r1, #0
   343ec:	4317      	orrs	r7, r2
   343ee:	e6af      	b.n	34150 <__aeabi_dsub+0xa4>
   343f0:	000007ff 	.word	0x000007ff
   343f4:	ff7fffff 	.word	0xff7fffff
   343f8:	800fffff 	.word	0x800fffff
   343fc:	2e00      	cmp	r6, #0
   343fe:	d03e      	beq.n	3447e <__aeabi_dsub+0x3d2>
   34400:	4eb3      	ldr	r6, [pc, #716]	; (346d0 <__aeabi_dsub+0x624>)
   34402:	45b4      	cmp	ip, r6
   34404:	d045      	beq.n	34492 <__aeabi_dsub+0x3e6>
   34406:	2680      	movs	r6, #128	; 0x80
   34408:	0436      	lsls	r6, r6, #16
   3440a:	426d      	negs	r5, r5
   3440c:	4334      	orrs	r4, r6
   3440e:	2d38      	cmp	r5, #56	; 0x38
   34410:	dd00      	ble.n	34414 <__aeabi_dsub+0x368>
   34412:	e0a8      	b.n	34566 <__aeabi_dsub+0x4ba>
   34414:	2d1f      	cmp	r5, #31
   34416:	dd00      	ble.n	3441a <__aeabi_dsub+0x36e>
   34418:	e11f      	b.n	3465a <__aeabi_dsub+0x5ae>
   3441a:	2620      	movs	r6, #32
   3441c:	0027      	movs	r7, r4
   3441e:	4650      	mov	r0, sl
   34420:	1b76      	subs	r6, r6, r5
   34422:	40b7      	lsls	r7, r6
   34424:	40e8      	lsrs	r0, r5
   34426:	4307      	orrs	r7, r0
   34428:	4650      	mov	r0, sl
   3442a:	40b0      	lsls	r0, r6
   3442c:	1e46      	subs	r6, r0, #1
   3442e:	41b0      	sbcs	r0, r6
   34430:	40ec      	lsrs	r4, r5
   34432:	4338      	orrs	r0, r7
   34434:	1a17      	subs	r7, r2, r0
   34436:	42ba      	cmp	r2, r7
   34438:	4192      	sbcs	r2, r2
   3443a:	1b0c      	subs	r4, r1, r4
   3443c:	4252      	negs	r2, r2
   3443e:	1aa4      	subs	r4, r4, r2
   34440:	4666      	mov	r6, ip
   34442:	4698      	mov	r8, r3
   34444:	e68b      	b.n	3415e <__aeabi_dsub+0xb2>
   34446:	4664      	mov	r4, ip
   34448:	4667      	mov	r7, ip
   3444a:	432c      	orrs	r4, r5
   3444c:	d000      	beq.n	34450 <__aeabi_dsub+0x3a4>
   3444e:	e68b      	b.n	34168 <__aeabi_dsub+0xbc>
   34450:	2500      	movs	r5, #0
   34452:	2600      	movs	r6, #0
   34454:	2700      	movs	r7, #0
   34456:	e6ea      	b.n	3422e <__aeabi_dsub+0x182>
   34458:	001e      	movs	r6, r3
   3445a:	e6ad      	b.n	341b8 <__aeabi_dsub+0x10c>
   3445c:	2b1f      	cmp	r3, #31
   3445e:	dc60      	bgt.n	34522 <__aeabi_dsub+0x476>
   34460:	2720      	movs	r7, #32
   34462:	1af8      	subs	r0, r7, r3
   34464:	000f      	movs	r7, r1
   34466:	4684      	mov	ip, r0
   34468:	4087      	lsls	r7, r0
   3446a:	0010      	movs	r0, r2
   3446c:	40d8      	lsrs	r0, r3
   3446e:	4307      	orrs	r7, r0
   34470:	4660      	mov	r0, ip
   34472:	4082      	lsls	r2, r0
   34474:	1e50      	subs	r0, r2, #1
   34476:	4182      	sbcs	r2, r0
   34478:	40d9      	lsrs	r1, r3
   3447a:	4317      	orrs	r7, r2
   3447c:	e6f5      	b.n	3426a <__aeabi_dsub+0x1be>
   3447e:	0026      	movs	r6, r4
   34480:	4650      	mov	r0, sl
   34482:	4306      	orrs	r6, r0
   34484:	d005      	beq.n	34492 <__aeabi_dsub+0x3e6>
   34486:	43ed      	mvns	r5, r5
   34488:	2d00      	cmp	r5, #0
   3448a:	d0d3      	beq.n	34434 <__aeabi_dsub+0x388>
   3448c:	4e90      	ldr	r6, [pc, #576]	; (346d0 <__aeabi_dsub+0x624>)
   3448e:	45b4      	cmp	ip, r6
   34490:	d1bd      	bne.n	3440e <__aeabi_dsub+0x362>
   34492:	000c      	movs	r4, r1
   34494:	0017      	movs	r7, r2
   34496:	4666      	mov	r6, ip
   34498:	4698      	mov	r8, r3
   3449a:	e68d      	b.n	341b8 <__aeabi_dsub+0x10c>
   3449c:	488c      	ldr	r0, [pc, #560]	; (346d0 <__aeabi_dsub+0x624>)
   3449e:	4283      	cmp	r3, r0
   344a0:	d00b      	beq.n	344ba <__aeabi_dsub+0x40e>
   344a2:	4663      	mov	r3, ip
   344a4:	e6d9      	b.n	3425a <__aeabi_dsub+0x1ae>
   344a6:	2d00      	cmp	r5, #0
   344a8:	d000      	beq.n	344ac <__aeabi_dsub+0x400>
   344aa:	e096      	b.n	345da <__aeabi_dsub+0x52e>
   344ac:	0008      	movs	r0, r1
   344ae:	4310      	orrs	r0, r2
   344b0:	d100      	bne.n	344b4 <__aeabi_dsub+0x408>
   344b2:	e0e2      	b.n	3467a <__aeabi_dsub+0x5ce>
   344b4:	000c      	movs	r4, r1
   344b6:	0017      	movs	r7, r2
   344b8:	4698      	mov	r8, r3
   344ba:	4e85      	ldr	r6, [pc, #532]	; (346d0 <__aeabi_dsub+0x624>)
   344bc:	e67c      	b.n	341b8 <__aeabi_dsub+0x10c>
   344be:	2500      	movs	r5, #0
   344c0:	e780      	b.n	343c4 <__aeabi_dsub+0x318>
   344c2:	2100      	movs	r1, #0
   344c4:	e78e      	b.n	343e4 <__aeabi_dsub+0x338>
   344c6:	0023      	movs	r3, r4
   344c8:	4650      	mov	r0, sl
   344ca:	4303      	orrs	r3, r0
   344cc:	2e00      	cmp	r6, #0
   344ce:	d000      	beq.n	344d2 <__aeabi_dsub+0x426>
   344d0:	e0a8      	b.n	34624 <__aeabi_dsub+0x578>
   344d2:	2b00      	cmp	r3, #0
   344d4:	d100      	bne.n	344d8 <__aeabi_dsub+0x42c>
   344d6:	e0de      	b.n	34696 <__aeabi_dsub+0x5ea>
   344d8:	000b      	movs	r3, r1
   344da:	4313      	orrs	r3, r2
   344dc:	d100      	bne.n	344e0 <__aeabi_dsub+0x434>
   344de:	e66b      	b.n	341b8 <__aeabi_dsub+0x10c>
   344e0:	4452      	add	r2, sl
   344e2:	4552      	cmp	r2, sl
   344e4:	4180      	sbcs	r0, r0
   344e6:	1864      	adds	r4, r4, r1
   344e8:	4240      	negs	r0, r0
   344ea:	1824      	adds	r4, r4, r0
   344ec:	0017      	movs	r7, r2
   344ee:	0223      	lsls	r3, r4, #8
   344f0:	d400      	bmi.n	344f4 <__aeabi_dsub+0x448>
   344f2:	e6fd      	b.n	342f0 <__aeabi_dsub+0x244>
   344f4:	4b77      	ldr	r3, [pc, #476]	; (346d4 <__aeabi_dsub+0x628>)
   344f6:	4666      	mov	r6, ip
   344f8:	401c      	ands	r4, r3
   344fa:	e65d      	b.n	341b8 <__aeabi_dsub+0x10c>
   344fc:	0025      	movs	r5, r4
   344fe:	4650      	mov	r0, sl
   34500:	4305      	orrs	r5, r0
   34502:	2e00      	cmp	r6, #0
   34504:	d1cf      	bne.n	344a6 <__aeabi_dsub+0x3fa>
   34506:	2d00      	cmp	r5, #0
   34508:	d14f      	bne.n	345aa <__aeabi_dsub+0x4fe>
   3450a:	000c      	movs	r4, r1
   3450c:	4314      	orrs	r4, r2
   3450e:	d100      	bne.n	34512 <__aeabi_dsub+0x466>
   34510:	e0a0      	b.n	34654 <__aeabi_dsub+0x5a8>
   34512:	000c      	movs	r4, r1
   34514:	0017      	movs	r7, r2
   34516:	4698      	mov	r8, r3
   34518:	e64e      	b.n	341b8 <__aeabi_dsub+0x10c>
   3451a:	4666      	mov	r6, ip
   3451c:	2400      	movs	r4, #0
   3451e:	2700      	movs	r7, #0
   34520:	e685      	b.n	3422e <__aeabi_dsub+0x182>
   34522:	001f      	movs	r7, r3
   34524:	0008      	movs	r0, r1
   34526:	3f20      	subs	r7, #32
   34528:	40f8      	lsrs	r0, r7
   3452a:	0007      	movs	r7, r0
   3452c:	2b20      	cmp	r3, #32
   3452e:	d100      	bne.n	34532 <__aeabi_dsub+0x486>
   34530:	e08e      	b.n	34650 <__aeabi_dsub+0x5a4>
   34532:	2040      	movs	r0, #64	; 0x40
   34534:	1ac3      	subs	r3, r0, r3
   34536:	4099      	lsls	r1, r3
   34538:	430a      	orrs	r2, r1
   3453a:	1e51      	subs	r1, r2, #1
   3453c:	418a      	sbcs	r2, r1
   3453e:	2100      	movs	r1, #0
   34540:	4317      	orrs	r7, r2
   34542:	e692      	b.n	3426a <__aeabi_dsub+0x1be>
   34544:	2e00      	cmp	r6, #0
   34546:	d114      	bne.n	34572 <__aeabi_dsub+0x4c6>
   34548:	0026      	movs	r6, r4
   3454a:	4650      	mov	r0, sl
   3454c:	4306      	orrs	r6, r0
   3454e:	d062      	beq.n	34616 <__aeabi_dsub+0x56a>
   34550:	43db      	mvns	r3, r3
   34552:	2b00      	cmp	r3, #0
   34554:	d15c      	bne.n	34610 <__aeabi_dsub+0x564>
   34556:	1887      	adds	r7, r0, r2
   34558:	4297      	cmp	r7, r2
   3455a:	4192      	sbcs	r2, r2
   3455c:	1864      	adds	r4, r4, r1
   3455e:	4252      	negs	r2, r2
   34560:	18a4      	adds	r4, r4, r2
   34562:	4666      	mov	r6, ip
   34564:	e687      	b.n	34276 <__aeabi_dsub+0x1ca>
   34566:	4650      	mov	r0, sl
   34568:	4320      	orrs	r0, r4
   3456a:	1e44      	subs	r4, r0, #1
   3456c:	41a0      	sbcs	r0, r4
   3456e:	2400      	movs	r4, #0
   34570:	e760      	b.n	34434 <__aeabi_dsub+0x388>
   34572:	4e57      	ldr	r6, [pc, #348]	; (346d0 <__aeabi_dsub+0x624>)
   34574:	45b4      	cmp	ip, r6
   34576:	d04e      	beq.n	34616 <__aeabi_dsub+0x56a>
   34578:	2680      	movs	r6, #128	; 0x80
   3457a:	0436      	lsls	r6, r6, #16
   3457c:	425b      	negs	r3, r3
   3457e:	4334      	orrs	r4, r6
   34580:	2b38      	cmp	r3, #56	; 0x38
   34582:	dd00      	ble.n	34586 <__aeabi_dsub+0x4da>
   34584:	e07f      	b.n	34686 <__aeabi_dsub+0x5da>
   34586:	2b1f      	cmp	r3, #31
   34588:	dd00      	ble.n	3458c <__aeabi_dsub+0x4e0>
   3458a:	e08b      	b.n	346a4 <__aeabi_dsub+0x5f8>
   3458c:	2620      	movs	r6, #32
   3458e:	0027      	movs	r7, r4
   34590:	4650      	mov	r0, sl
   34592:	1af6      	subs	r6, r6, r3
   34594:	40b7      	lsls	r7, r6
   34596:	40d8      	lsrs	r0, r3
   34598:	4307      	orrs	r7, r0
   3459a:	4650      	mov	r0, sl
   3459c:	40b0      	lsls	r0, r6
   3459e:	1e46      	subs	r6, r0, #1
   345a0:	41b0      	sbcs	r0, r6
   345a2:	4307      	orrs	r7, r0
   345a4:	40dc      	lsrs	r4, r3
   345a6:	18bf      	adds	r7, r7, r2
   345a8:	e7d6      	b.n	34558 <__aeabi_dsub+0x4ac>
   345aa:	000d      	movs	r5, r1
   345ac:	4315      	orrs	r5, r2
   345ae:	d100      	bne.n	345b2 <__aeabi_dsub+0x506>
   345b0:	e602      	b.n	341b8 <__aeabi_dsub+0x10c>
   345b2:	4650      	mov	r0, sl
   345b4:	1a80      	subs	r0, r0, r2
   345b6:	4582      	cmp	sl, r0
   345b8:	41bf      	sbcs	r7, r7
   345ba:	1a65      	subs	r5, r4, r1
   345bc:	427f      	negs	r7, r7
   345be:	1bed      	subs	r5, r5, r7
   345c0:	4684      	mov	ip, r0
   345c2:	0228      	lsls	r0, r5, #8
   345c4:	d400      	bmi.n	345c8 <__aeabi_dsub+0x51c>
   345c6:	e68d      	b.n	342e4 <__aeabi_dsub+0x238>
   345c8:	4650      	mov	r0, sl
   345ca:	1a17      	subs	r7, r2, r0
   345cc:	42ba      	cmp	r2, r7
   345ce:	4192      	sbcs	r2, r2
   345d0:	1b0c      	subs	r4, r1, r4
   345d2:	4252      	negs	r2, r2
   345d4:	1aa4      	subs	r4, r4, r2
   345d6:	4698      	mov	r8, r3
   345d8:	e5ee      	b.n	341b8 <__aeabi_dsub+0x10c>
   345da:	000d      	movs	r5, r1
   345dc:	4315      	orrs	r5, r2
   345de:	d100      	bne.n	345e2 <__aeabi_dsub+0x536>
   345e0:	e76b      	b.n	344ba <__aeabi_dsub+0x40e>
   345e2:	4650      	mov	r0, sl
   345e4:	0767      	lsls	r7, r4, #29
   345e6:	08c0      	lsrs	r0, r0, #3
   345e8:	4307      	orrs	r7, r0
   345ea:	2080      	movs	r0, #128	; 0x80
   345ec:	08e4      	lsrs	r4, r4, #3
   345ee:	0300      	lsls	r0, r0, #12
   345f0:	4204      	tst	r4, r0
   345f2:	d007      	beq.n	34604 <__aeabi_dsub+0x558>
   345f4:	08cd      	lsrs	r5, r1, #3
   345f6:	4205      	tst	r5, r0
   345f8:	d104      	bne.n	34604 <__aeabi_dsub+0x558>
   345fa:	002c      	movs	r4, r5
   345fc:	4698      	mov	r8, r3
   345fe:	08d7      	lsrs	r7, r2, #3
   34600:	0749      	lsls	r1, r1, #29
   34602:	430f      	orrs	r7, r1
   34604:	0f7b      	lsrs	r3, r7, #29
   34606:	00e4      	lsls	r4, r4, #3
   34608:	431c      	orrs	r4, r3
   3460a:	00ff      	lsls	r7, r7, #3
   3460c:	4e30      	ldr	r6, [pc, #192]	; (346d0 <__aeabi_dsub+0x624>)
   3460e:	e5d3      	b.n	341b8 <__aeabi_dsub+0x10c>
   34610:	4e2f      	ldr	r6, [pc, #188]	; (346d0 <__aeabi_dsub+0x624>)
   34612:	45b4      	cmp	ip, r6
   34614:	d1b4      	bne.n	34580 <__aeabi_dsub+0x4d4>
   34616:	000c      	movs	r4, r1
   34618:	0017      	movs	r7, r2
   3461a:	4666      	mov	r6, ip
   3461c:	e5cc      	b.n	341b8 <__aeabi_dsub+0x10c>
   3461e:	2700      	movs	r7, #0
   34620:	2400      	movs	r4, #0
   34622:	e5e8      	b.n	341f6 <__aeabi_dsub+0x14a>
   34624:	2b00      	cmp	r3, #0
   34626:	d039      	beq.n	3469c <__aeabi_dsub+0x5f0>
   34628:	000b      	movs	r3, r1
   3462a:	4313      	orrs	r3, r2
   3462c:	d100      	bne.n	34630 <__aeabi_dsub+0x584>
   3462e:	e744      	b.n	344ba <__aeabi_dsub+0x40e>
   34630:	08c0      	lsrs	r0, r0, #3
   34632:	0767      	lsls	r7, r4, #29
   34634:	4307      	orrs	r7, r0
   34636:	2080      	movs	r0, #128	; 0x80
   34638:	08e4      	lsrs	r4, r4, #3
   3463a:	0300      	lsls	r0, r0, #12
   3463c:	4204      	tst	r4, r0
   3463e:	d0e1      	beq.n	34604 <__aeabi_dsub+0x558>
   34640:	08cb      	lsrs	r3, r1, #3
   34642:	4203      	tst	r3, r0
   34644:	d1de      	bne.n	34604 <__aeabi_dsub+0x558>
   34646:	08d7      	lsrs	r7, r2, #3
   34648:	0749      	lsls	r1, r1, #29
   3464a:	430f      	orrs	r7, r1
   3464c:	001c      	movs	r4, r3
   3464e:	e7d9      	b.n	34604 <__aeabi_dsub+0x558>
   34650:	2100      	movs	r1, #0
   34652:	e771      	b.n	34538 <__aeabi_dsub+0x48c>
   34654:	2500      	movs	r5, #0
   34656:	2700      	movs	r7, #0
   34658:	e5e9      	b.n	3422e <__aeabi_dsub+0x182>
   3465a:	002e      	movs	r6, r5
   3465c:	0027      	movs	r7, r4
   3465e:	3e20      	subs	r6, #32
   34660:	40f7      	lsrs	r7, r6
   34662:	2d20      	cmp	r5, #32
   34664:	d02f      	beq.n	346c6 <__aeabi_dsub+0x61a>
   34666:	2640      	movs	r6, #64	; 0x40
   34668:	1b75      	subs	r5, r6, r5
   3466a:	40ac      	lsls	r4, r5
   3466c:	4650      	mov	r0, sl
   3466e:	4320      	orrs	r0, r4
   34670:	1e44      	subs	r4, r0, #1
   34672:	41a0      	sbcs	r0, r4
   34674:	2400      	movs	r4, #0
   34676:	4338      	orrs	r0, r7
   34678:	e6dc      	b.n	34434 <__aeabi_dsub+0x388>
   3467a:	2480      	movs	r4, #128	; 0x80
   3467c:	2500      	movs	r5, #0
   3467e:	0324      	lsls	r4, r4, #12
   34680:	4e13      	ldr	r6, [pc, #76]	; (346d0 <__aeabi_dsub+0x624>)
   34682:	2700      	movs	r7, #0
   34684:	e5d3      	b.n	3422e <__aeabi_dsub+0x182>
   34686:	4650      	mov	r0, sl
   34688:	4320      	orrs	r0, r4
   3468a:	0007      	movs	r7, r0
   3468c:	1e78      	subs	r0, r7, #1
   3468e:	4187      	sbcs	r7, r0
   34690:	2400      	movs	r4, #0
   34692:	18bf      	adds	r7, r7, r2
   34694:	e760      	b.n	34558 <__aeabi_dsub+0x4ac>
   34696:	000c      	movs	r4, r1
   34698:	0017      	movs	r7, r2
   3469a:	e58d      	b.n	341b8 <__aeabi_dsub+0x10c>
   3469c:	000c      	movs	r4, r1
   3469e:	0017      	movs	r7, r2
   346a0:	4e0b      	ldr	r6, [pc, #44]	; (346d0 <__aeabi_dsub+0x624>)
   346a2:	e589      	b.n	341b8 <__aeabi_dsub+0x10c>
   346a4:	001e      	movs	r6, r3
   346a6:	0027      	movs	r7, r4
   346a8:	3e20      	subs	r6, #32
   346aa:	40f7      	lsrs	r7, r6
   346ac:	2b20      	cmp	r3, #32
   346ae:	d00c      	beq.n	346ca <__aeabi_dsub+0x61e>
   346b0:	2640      	movs	r6, #64	; 0x40
   346b2:	1af3      	subs	r3, r6, r3
   346b4:	409c      	lsls	r4, r3
   346b6:	4650      	mov	r0, sl
   346b8:	4320      	orrs	r0, r4
   346ba:	1e44      	subs	r4, r0, #1
   346bc:	41a0      	sbcs	r0, r4
   346be:	4307      	orrs	r7, r0
   346c0:	2400      	movs	r4, #0
   346c2:	18bf      	adds	r7, r7, r2
   346c4:	e748      	b.n	34558 <__aeabi_dsub+0x4ac>
   346c6:	2400      	movs	r4, #0
   346c8:	e7d0      	b.n	3466c <__aeabi_dsub+0x5c0>
   346ca:	2400      	movs	r4, #0
   346cc:	e7f3      	b.n	346b6 <__aeabi_dsub+0x60a>
   346ce:	46c0      	nop			; (mov r8, r8)
   346d0:	000007ff 	.word	0x000007ff
   346d4:	ff7fffff 	.word	0xff7fffff

000346d8 <__aeabi_d2iz>:
   346d8:	b530      	push	{r4, r5, lr}
   346da:	4d13      	ldr	r5, [pc, #76]	; (34728 <__aeabi_d2iz+0x50>)
   346dc:	030a      	lsls	r2, r1, #12
   346de:	004b      	lsls	r3, r1, #1
   346e0:	0b12      	lsrs	r2, r2, #12
   346e2:	0d5b      	lsrs	r3, r3, #21
   346e4:	0fc9      	lsrs	r1, r1, #31
   346e6:	2400      	movs	r4, #0
   346e8:	42ab      	cmp	r3, r5
   346ea:	dd10      	ble.n	3470e <__aeabi_d2iz+0x36>
   346ec:	4c0f      	ldr	r4, [pc, #60]	; (3472c <__aeabi_d2iz+0x54>)
   346ee:	42a3      	cmp	r3, r4
   346f0:	dc0f      	bgt.n	34712 <__aeabi_d2iz+0x3a>
   346f2:	2480      	movs	r4, #128	; 0x80
   346f4:	4d0e      	ldr	r5, [pc, #56]	; (34730 <__aeabi_d2iz+0x58>)
   346f6:	0364      	lsls	r4, r4, #13
   346f8:	4322      	orrs	r2, r4
   346fa:	1aed      	subs	r5, r5, r3
   346fc:	2d1f      	cmp	r5, #31
   346fe:	dd0b      	ble.n	34718 <__aeabi_d2iz+0x40>
   34700:	480c      	ldr	r0, [pc, #48]	; (34734 <__aeabi_d2iz+0x5c>)
   34702:	1ac3      	subs	r3, r0, r3
   34704:	40da      	lsrs	r2, r3
   34706:	4254      	negs	r4, r2
   34708:	2900      	cmp	r1, #0
   3470a:	d100      	bne.n	3470e <__aeabi_d2iz+0x36>
   3470c:	0014      	movs	r4, r2
   3470e:	0020      	movs	r0, r4
   34710:	bd30      	pop	{r4, r5, pc}
   34712:	4b09      	ldr	r3, [pc, #36]	; (34738 <__aeabi_d2iz+0x60>)
   34714:	18cc      	adds	r4, r1, r3
   34716:	e7fa      	b.n	3470e <__aeabi_d2iz+0x36>
   34718:	4c08      	ldr	r4, [pc, #32]	; (3473c <__aeabi_d2iz+0x64>)
   3471a:	40e8      	lsrs	r0, r5
   3471c:	46a4      	mov	ip, r4
   3471e:	4463      	add	r3, ip
   34720:	409a      	lsls	r2, r3
   34722:	4302      	orrs	r2, r0
   34724:	e7ef      	b.n	34706 <__aeabi_d2iz+0x2e>
   34726:	46c0      	nop			; (mov r8, r8)
   34728:	000003fe 	.word	0x000003fe
   3472c:	0000041d 	.word	0x0000041d
   34730:	00000433 	.word	0x00000433
   34734:	00000413 	.word	0x00000413
   34738:	7fffffff 	.word	0x7fffffff
   3473c:	fffffbed 	.word	0xfffffbed

00034740 <__aeabi_ui2d>:
   34740:	b510      	push	{r4, lr}
   34742:	1e04      	subs	r4, r0, #0
   34744:	d028      	beq.n	34798 <__aeabi_ui2d+0x58>
   34746:	f000 f833 	bl	347b0 <__clzsi2>
   3474a:	4b15      	ldr	r3, [pc, #84]	; (347a0 <__aeabi_ui2d+0x60>)
   3474c:	4a15      	ldr	r2, [pc, #84]	; (347a4 <__aeabi_ui2d+0x64>)
   3474e:	1a1b      	subs	r3, r3, r0
   34750:	1ad2      	subs	r2, r2, r3
   34752:	2a1f      	cmp	r2, #31
   34754:	dd15      	ble.n	34782 <__aeabi_ui2d+0x42>
   34756:	4a14      	ldr	r2, [pc, #80]	; (347a8 <__aeabi_ui2d+0x68>)
   34758:	1ad2      	subs	r2, r2, r3
   3475a:	4094      	lsls	r4, r2
   3475c:	2200      	movs	r2, #0
   3475e:	0324      	lsls	r4, r4, #12
   34760:	055b      	lsls	r3, r3, #21
   34762:	0b24      	lsrs	r4, r4, #12
   34764:	0d5b      	lsrs	r3, r3, #21
   34766:	2100      	movs	r1, #0
   34768:	0010      	movs	r0, r2
   3476a:	0324      	lsls	r4, r4, #12
   3476c:	0d0a      	lsrs	r2, r1, #20
   3476e:	0b24      	lsrs	r4, r4, #12
   34770:	0512      	lsls	r2, r2, #20
   34772:	4322      	orrs	r2, r4
   34774:	4c0d      	ldr	r4, [pc, #52]	; (347ac <__aeabi_ui2d+0x6c>)
   34776:	051b      	lsls	r3, r3, #20
   34778:	4022      	ands	r2, r4
   3477a:	4313      	orrs	r3, r2
   3477c:	005b      	lsls	r3, r3, #1
   3477e:	0859      	lsrs	r1, r3, #1
   34780:	bd10      	pop	{r4, pc}
   34782:	0021      	movs	r1, r4
   34784:	4091      	lsls	r1, r2
   34786:	000a      	movs	r2, r1
   34788:	210b      	movs	r1, #11
   3478a:	1a08      	subs	r0, r1, r0
   3478c:	40c4      	lsrs	r4, r0
   3478e:	055b      	lsls	r3, r3, #21
   34790:	0324      	lsls	r4, r4, #12
   34792:	0b24      	lsrs	r4, r4, #12
   34794:	0d5b      	lsrs	r3, r3, #21
   34796:	e7e6      	b.n	34766 <__aeabi_ui2d+0x26>
   34798:	2300      	movs	r3, #0
   3479a:	2400      	movs	r4, #0
   3479c:	2200      	movs	r2, #0
   3479e:	e7e2      	b.n	34766 <__aeabi_ui2d+0x26>
   347a0:	0000041e 	.word	0x0000041e
   347a4:	00000433 	.word	0x00000433
   347a8:	00000413 	.word	0x00000413
   347ac:	800fffff 	.word	0x800fffff

000347b0 <__clzsi2>:
   347b0:	211c      	movs	r1, #28
   347b2:	2301      	movs	r3, #1
   347b4:	041b      	lsls	r3, r3, #16
   347b6:	4298      	cmp	r0, r3
   347b8:	d301      	bcc.n	347be <__clzsi2+0xe>
   347ba:	0c00      	lsrs	r0, r0, #16
   347bc:	3910      	subs	r1, #16
   347be:	0a1b      	lsrs	r3, r3, #8
   347c0:	4298      	cmp	r0, r3
   347c2:	d301      	bcc.n	347c8 <__clzsi2+0x18>
   347c4:	0a00      	lsrs	r0, r0, #8
   347c6:	3908      	subs	r1, #8
   347c8:	091b      	lsrs	r3, r3, #4
   347ca:	4298      	cmp	r0, r3
   347cc:	d301      	bcc.n	347d2 <__clzsi2+0x22>
   347ce:	0900      	lsrs	r0, r0, #4
   347d0:	3904      	subs	r1, #4
   347d2:	a202      	add	r2, pc, #8	; (adr r2, 347dc <__clzsi2+0x2c>)
   347d4:	5c10      	ldrb	r0, [r2, r0]
   347d6:	1840      	adds	r0, r0, r1
   347d8:	4770      	bx	lr
   347da:	46c0      	nop			; (mov r8, r8)
   347dc:	02020304 	.word	0x02020304
   347e0:	01010101 	.word	0x01010101
	...

000347ec <atoi>:
   347ec:	b510      	push	{r4, lr}
   347ee:	220a      	movs	r2, #10
   347f0:	2100      	movs	r1, #0
   347f2:	f000 fb0d 	bl	34e10 <strtol>
   347f6:	bd10      	pop	{r4, pc}

000347f8 <__libc_init_array>:
   347f8:	b570      	push	{r4, r5, r6, lr}
   347fa:	2600      	movs	r6, #0
   347fc:	4d0c      	ldr	r5, [pc, #48]	; (34830 <__libc_init_array+0x38>)
   347fe:	4c0d      	ldr	r4, [pc, #52]	; (34834 <__libc_init_array+0x3c>)
   34800:	1b64      	subs	r4, r4, r5
   34802:	10a4      	asrs	r4, r4, #2
   34804:	42a6      	cmp	r6, r4
   34806:	d109      	bne.n	3481c <__libc_init_array+0x24>
   34808:	2600      	movs	r6, #0
   3480a:	f005 fc67 	bl	3a0dc <_init>
   3480e:	4d0a      	ldr	r5, [pc, #40]	; (34838 <__libc_init_array+0x40>)
   34810:	4c0a      	ldr	r4, [pc, #40]	; (3483c <__libc_init_array+0x44>)
   34812:	1b64      	subs	r4, r4, r5
   34814:	10a4      	asrs	r4, r4, #2
   34816:	42a6      	cmp	r6, r4
   34818:	d105      	bne.n	34826 <__libc_init_array+0x2e>
   3481a:	bd70      	pop	{r4, r5, r6, pc}
   3481c:	00b3      	lsls	r3, r6, #2
   3481e:	58eb      	ldr	r3, [r5, r3]
   34820:	4798      	blx	r3
   34822:	3601      	adds	r6, #1
   34824:	e7ee      	b.n	34804 <__libc_init_array+0xc>
   34826:	00b3      	lsls	r3, r6, #2
   34828:	58eb      	ldr	r3, [r5, r3]
   3482a:	4798      	blx	r3
   3482c:	3601      	adds	r6, #1
   3482e:	e7f2      	b.n	34816 <__libc_init_array+0x1e>
   34830:	0003a0e8 	.word	0x0003a0e8
   34834:	0003a0e8 	.word	0x0003a0e8
   34838:	0003a0e8 	.word	0x0003a0e8
   3483c:	0003a0ec 	.word	0x0003a0ec

00034840 <malloc>:
   34840:	b510      	push	{r4, lr}
   34842:	4b03      	ldr	r3, [pc, #12]	; (34850 <malloc+0x10>)
   34844:	0001      	movs	r1, r0
   34846:	6818      	ldr	r0, [r3, #0]
   34848:	f000 f87c 	bl	34944 <_malloc_r>
   3484c:	bd10      	pop	{r4, pc}
   3484e:	46c0      	nop			; (mov r8, r8)
   34850:	200000d4 	.word	0x200000d4

00034854 <free>:
   34854:	b510      	push	{r4, lr}
   34856:	4b03      	ldr	r3, [pc, #12]	; (34864 <free+0x10>)
   34858:	0001      	movs	r1, r0
   3485a:	6818      	ldr	r0, [r3, #0]
   3485c:	f000 f828 	bl	348b0 <_free_r>
   34860:	bd10      	pop	{r4, pc}
   34862:	46c0      	nop			; (mov r8, r8)
   34864:	200000d4 	.word	0x200000d4

00034868 <memcpy>:
   34868:	2300      	movs	r3, #0
   3486a:	b510      	push	{r4, lr}
   3486c:	429a      	cmp	r2, r3
   3486e:	d100      	bne.n	34872 <memcpy+0xa>
   34870:	bd10      	pop	{r4, pc}
   34872:	5ccc      	ldrb	r4, [r1, r3]
   34874:	54c4      	strb	r4, [r0, r3]
   34876:	3301      	adds	r3, #1
   34878:	e7f8      	b.n	3486c <memcpy+0x4>

0003487a <memmove>:
   3487a:	b510      	push	{r4, lr}
   3487c:	4288      	cmp	r0, r1
   3487e:	d902      	bls.n	34886 <memmove+0xc>
   34880:	188b      	adds	r3, r1, r2
   34882:	4298      	cmp	r0, r3
   34884:	d308      	bcc.n	34898 <memmove+0x1e>
   34886:	2300      	movs	r3, #0
   34888:	429a      	cmp	r2, r3
   3488a:	d007      	beq.n	3489c <memmove+0x22>
   3488c:	5ccc      	ldrb	r4, [r1, r3]
   3488e:	54c4      	strb	r4, [r0, r3]
   34890:	3301      	adds	r3, #1
   34892:	e7f9      	b.n	34888 <memmove+0xe>
   34894:	5c8b      	ldrb	r3, [r1, r2]
   34896:	5483      	strb	r3, [r0, r2]
   34898:	3a01      	subs	r2, #1
   3489a:	d2fb      	bcs.n	34894 <memmove+0x1a>
   3489c:	bd10      	pop	{r4, pc}

0003489e <memset>:
   3489e:	0003      	movs	r3, r0
   348a0:	1882      	adds	r2, r0, r2
   348a2:	4293      	cmp	r3, r2
   348a4:	d100      	bne.n	348a8 <memset+0xa>
   348a6:	4770      	bx	lr
   348a8:	7019      	strb	r1, [r3, #0]
   348aa:	3301      	adds	r3, #1
   348ac:	e7f9      	b.n	348a2 <memset+0x4>
	...

000348b0 <_free_r>:
   348b0:	b570      	push	{r4, r5, r6, lr}
   348b2:	0005      	movs	r5, r0
   348b4:	2900      	cmp	r1, #0
   348b6:	d010      	beq.n	348da <_free_r+0x2a>
   348b8:	1f0c      	subs	r4, r1, #4
   348ba:	6823      	ldr	r3, [r4, #0]
   348bc:	2b00      	cmp	r3, #0
   348be:	da00      	bge.n	348c2 <_free_r+0x12>
   348c0:	18e4      	adds	r4, r4, r3
   348c2:	0028      	movs	r0, r5
   348c4:	f000 fdd8 	bl	35478 <__malloc_lock>
   348c8:	4a1d      	ldr	r2, [pc, #116]	; (34940 <_free_r+0x90>)
   348ca:	6813      	ldr	r3, [r2, #0]
   348cc:	2b00      	cmp	r3, #0
   348ce:	d105      	bne.n	348dc <_free_r+0x2c>
   348d0:	6063      	str	r3, [r4, #4]
   348d2:	6014      	str	r4, [r2, #0]
   348d4:	0028      	movs	r0, r5
   348d6:	f000 fdd0 	bl	3547a <__malloc_unlock>
   348da:	bd70      	pop	{r4, r5, r6, pc}
   348dc:	42a3      	cmp	r3, r4
   348de:	d909      	bls.n	348f4 <_free_r+0x44>
   348e0:	6821      	ldr	r1, [r4, #0]
   348e2:	1860      	adds	r0, r4, r1
   348e4:	4283      	cmp	r3, r0
   348e6:	d1f3      	bne.n	348d0 <_free_r+0x20>
   348e8:	6818      	ldr	r0, [r3, #0]
   348ea:	685b      	ldr	r3, [r3, #4]
   348ec:	1841      	adds	r1, r0, r1
   348ee:	6021      	str	r1, [r4, #0]
   348f0:	e7ee      	b.n	348d0 <_free_r+0x20>
   348f2:	0013      	movs	r3, r2
   348f4:	685a      	ldr	r2, [r3, #4]
   348f6:	2a00      	cmp	r2, #0
   348f8:	d001      	beq.n	348fe <_free_r+0x4e>
   348fa:	42a2      	cmp	r2, r4
   348fc:	d9f9      	bls.n	348f2 <_free_r+0x42>
   348fe:	6819      	ldr	r1, [r3, #0]
   34900:	1858      	adds	r0, r3, r1
   34902:	42a0      	cmp	r0, r4
   34904:	d10b      	bne.n	3491e <_free_r+0x6e>
   34906:	6820      	ldr	r0, [r4, #0]
   34908:	1809      	adds	r1, r1, r0
   3490a:	1858      	adds	r0, r3, r1
   3490c:	6019      	str	r1, [r3, #0]
   3490e:	4282      	cmp	r2, r0
   34910:	d1e0      	bne.n	348d4 <_free_r+0x24>
   34912:	6810      	ldr	r0, [r2, #0]
   34914:	6852      	ldr	r2, [r2, #4]
   34916:	1841      	adds	r1, r0, r1
   34918:	6019      	str	r1, [r3, #0]
   3491a:	605a      	str	r2, [r3, #4]
   3491c:	e7da      	b.n	348d4 <_free_r+0x24>
   3491e:	42a0      	cmp	r0, r4
   34920:	d902      	bls.n	34928 <_free_r+0x78>
   34922:	230c      	movs	r3, #12
   34924:	602b      	str	r3, [r5, #0]
   34926:	e7d5      	b.n	348d4 <_free_r+0x24>
   34928:	6821      	ldr	r1, [r4, #0]
   3492a:	1860      	adds	r0, r4, r1
   3492c:	4282      	cmp	r2, r0
   3492e:	d103      	bne.n	34938 <_free_r+0x88>
   34930:	6810      	ldr	r0, [r2, #0]
   34932:	6852      	ldr	r2, [r2, #4]
   34934:	1841      	adds	r1, r0, r1
   34936:	6021      	str	r1, [r4, #0]
   34938:	6062      	str	r2, [r4, #4]
   3493a:	605c      	str	r4, [r3, #4]
   3493c:	e7ca      	b.n	348d4 <_free_r+0x24>
   3493e:	46c0      	nop			; (mov r8, r8)
   34940:	20004314 	.word	0x20004314

00034944 <_malloc_r>:
   34944:	2303      	movs	r3, #3
   34946:	b570      	push	{r4, r5, r6, lr}
   34948:	1ccd      	adds	r5, r1, #3
   3494a:	439d      	bics	r5, r3
   3494c:	3508      	adds	r5, #8
   3494e:	0006      	movs	r6, r0
   34950:	2d0c      	cmp	r5, #12
   34952:	d21e      	bcs.n	34992 <_malloc_r+0x4e>
   34954:	250c      	movs	r5, #12
   34956:	42a9      	cmp	r1, r5
   34958:	d81d      	bhi.n	34996 <_malloc_r+0x52>
   3495a:	0030      	movs	r0, r6
   3495c:	f000 fd8c 	bl	35478 <__malloc_lock>
   34960:	4a25      	ldr	r2, [pc, #148]	; (349f8 <_malloc_r+0xb4>)
   34962:	6814      	ldr	r4, [r2, #0]
   34964:	0021      	movs	r1, r4
   34966:	2900      	cmp	r1, #0
   34968:	d119      	bne.n	3499e <_malloc_r+0x5a>
   3496a:	4c24      	ldr	r4, [pc, #144]	; (349fc <_malloc_r+0xb8>)
   3496c:	6823      	ldr	r3, [r4, #0]
   3496e:	2b00      	cmp	r3, #0
   34970:	d103      	bne.n	3497a <_malloc_r+0x36>
   34972:	0030      	movs	r0, r6
   34974:	f000 f8ae 	bl	34ad4 <_sbrk_r>
   34978:	6020      	str	r0, [r4, #0]
   3497a:	0029      	movs	r1, r5
   3497c:	0030      	movs	r0, r6
   3497e:	f000 f8a9 	bl	34ad4 <_sbrk_r>
   34982:	1c43      	adds	r3, r0, #1
   34984:	d12c      	bne.n	349e0 <_malloc_r+0x9c>
   34986:	230c      	movs	r3, #12
   34988:	0030      	movs	r0, r6
   3498a:	6033      	str	r3, [r6, #0]
   3498c:	f000 fd75 	bl	3547a <__malloc_unlock>
   34990:	e003      	b.n	3499a <_malloc_r+0x56>
   34992:	2d00      	cmp	r5, #0
   34994:	dadf      	bge.n	34956 <_malloc_r+0x12>
   34996:	230c      	movs	r3, #12
   34998:	6033      	str	r3, [r6, #0]
   3499a:	2000      	movs	r0, #0
   3499c:	bd70      	pop	{r4, r5, r6, pc}
   3499e:	680b      	ldr	r3, [r1, #0]
   349a0:	1b5b      	subs	r3, r3, r5
   349a2:	d41a      	bmi.n	349da <_malloc_r+0x96>
   349a4:	2b0b      	cmp	r3, #11
   349a6:	d903      	bls.n	349b0 <_malloc_r+0x6c>
   349a8:	600b      	str	r3, [r1, #0]
   349aa:	18cc      	adds	r4, r1, r3
   349ac:	6025      	str	r5, [r4, #0]
   349ae:	e003      	b.n	349b8 <_malloc_r+0x74>
   349b0:	428c      	cmp	r4, r1
   349b2:	d10e      	bne.n	349d2 <_malloc_r+0x8e>
   349b4:	6863      	ldr	r3, [r4, #4]
   349b6:	6013      	str	r3, [r2, #0]
   349b8:	0030      	movs	r0, r6
   349ba:	f000 fd5e 	bl	3547a <__malloc_unlock>
   349be:	0020      	movs	r0, r4
   349c0:	2207      	movs	r2, #7
   349c2:	300b      	adds	r0, #11
   349c4:	1d23      	adds	r3, r4, #4
   349c6:	4390      	bics	r0, r2
   349c8:	1ac3      	subs	r3, r0, r3
   349ca:	d0e7      	beq.n	3499c <_malloc_r+0x58>
   349cc:	425a      	negs	r2, r3
   349ce:	50e2      	str	r2, [r4, r3]
   349d0:	e7e4      	b.n	3499c <_malloc_r+0x58>
   349d2:	684b      	ldr	r3, [r1, #4]
   349d4:	6063      	str	r3, [r4, #4]
   349d6:	000c      	movs	r4, r1
   349d8:	e7ee      	b.n	349b8 <_malloc_r+0x74>
   349da:	000c      	movs	r4, r1
   349dc:	6849      	ldr	r1, [r1, #4]
   349de:	e7c2      	b.n	34966 <_malloc_r+0x22>
   349e0:	2303      	movs	r3, #3
   349e2:	1cc4      	adds	r4, r0, #3
   349e4:	439c      	bics	r4, r3
   349e6:	42a0      	cmp	r0, r4
   349e8:	d0e0      	beq.n	349ac <_malloc_r+0x68>
   349ea:	1a21      	subs	r1, r4, r0
   349ec:	0030      	movs	r0, r6
   349ee:	f000 f871 	bl	34ad4 <_sbrk_r>
   349f2:	1c43      	adds	r3, r0, #1
   349f4:	d1da      	bne.n	349ac <_malloc_r+0x68>
   349f6:	e7c6      	b.n	34986 <_malloc_r+0x42>
   349f8:	20004314 	.word	0x20004314
   349fc:	20004318 	.word	0x20004318

00034a00 <_puts_r>:
   34a00:	b570      	push	{r4, r5, r6, lr}
   34a02:	0005      	movs	r5, r0
   34a04:	000e      	movs	r6, r1
   34a06:	2800      	cmp	r0, #0
   34a08:	d004      	beq.n	34a14 <_puts_r+0x14>
   34a0a:	6983      	ldr	r3, [r0, #24]
   34a0c:	2b00      	cmp	r3, #0
   34a0e:	d101      	bne.n	34a14 <_puts_r+0x14>
   34a10:	f000 fc0e 	bl	35230 <__sinit>
   34a14:	69ab      	ldr	r3, [r5, #24]
   34a16:	68ac      	ldr	r4, [r5, #8]
   34a18:	2b00      	cmp	r3, #0
   34a1a:	d102      	bne.n	34a22 <_puts_r+0x22>
   34a1c:	0028      	movs	r0, r5
   34a1e:	f000 fc07 	bl	35230 <__sinit>
   34a22:	4b24      	ldr	r3, [pc, #144]	; (34ab4 <_puts_r+0xb4>)
   34a24:	429c      	cmp	r4, r3
   34a26:	d10f      	bne.n	34a48 <_puts_r+0x48>
   34a28:	686c      	ldr	r4, [r5, #4]
   34a2a:	89a3      	ldrh	r3, [r4, #12]
   34a2c:	071b      	lsls	r3, r3, #28
   34a2e:	d502      	bpl.n	34a36 <_puts_r+0x36>
   34a30:	6923      	ldr	r3, [r4, #16]
   34a32:	2b00      	cmp	r3, #0
   34a34:	d120      	bne.n	34a78 <_puts_r+0x78>
   34a36:	0021      	movs	r1, r4
   34a38:	0028      	movs	r0, r5
   34a3a:	f000 fa8b 	bl	34f54 <__swsetup_r>
   34a3e:	2800      	cmp	r0, #0
   34a40:	d01a      	beq.n	34a78 <_puts_r+0x78>
   34a42:	2001      	movs	r0, #1
   34a44:	4240      	negs	r0, r0
   34a46:	bd70      	pop	{r4, r5, r6, pc}
   34a48:	4b1b      	ldr	r3, [pc, #108]	; (34ab8 <_puts_r+0xb8>)
   34a4a:	429c      	cmp	r4, r3
   34a4c:	d101      	bne.n	34a52 <_puts_r+0x52>
   34a4e:	68ac      	ldr	r4, [r5, #8]
   34a50:	e7eb      	b.n	34a2a <_puts_r+0x2a>
   34a52:	4b1a      	ldr	r3, [pc, #104]	; (34abc <_puts_r+0xbc>)
   34a54:	429c      	cmp	r4, r3
   34a56:	d1e8      	bne.n	34a2a <_puts_r+0x2a>
   34a58:	68ec      	ldr	r4, [r5, #12]
   34a5a:	e7e6      	b.n	34a2a <_puts_r+0x2a>
   34a5c:	3b01      	subs	r3, #1
   34a5e:	3601      	adds	r6, #1
   34a60:	60a3      	str	r3, [r4, #8]
   34a62:	2b00      	cmp	r3, #0
   34a64:	da04      	bge.n	34a70 <_puts_r+0x70>
   34a66:	69a2      	ldr	r2, [r4, #24]
   34a68:	4293      	cmp	r3, r2
   34a6a:	db16      	blt.n	34a9a <_puts_r+0x9a>
   34a6c:	290a      	cmp	r1, #10
   34a6e:	d014      	beq.n	34a9a <_puts_r+0x9a>
   34a70:	6823      	ldr	r3, [r4, #0]
   34a72:	1c5a      	adds	r2, r3, #1
   34a74:	6022      	str	r2, [r4, #0]
   34a76:	7019      	strb	r1, [r3, #0]
   34a78:	7831      	ldrb	r1, [r6, #0]
   34a7a:	68a3      	ldr	r3, [r4, #8]
   34a7c:	2900      	cmp	r1, #0
   34a7e:	d1ed      	bne.n	34a5c <_puts_r+0x5c>
   34a80:	3b01      	subs	r3, #1
   34a82:	60a3      	str	r3, [r4, #8]
   34a84:	2b00      	cmp	r3, #0
   34a86:	da0f      	bge.n	34aa8 <_puts_r+0xa8>
   34a88:	0022      	movs	r2, r4
   34a8a:	310a      	adds	r1, #10
   34a8c:	0028      	movs	r0, r5
   34a8e:	f000 fa0b 	bl	34ea8 <__swbuf_r>
   34a92:	1c43      	adds	r3, r0, #1
   34a94:	d0d5      	beq.n	34a42 <_puts_r+0x42>
   34a96:	200a      	movs	r0, #10
   34a98:	e7d5      	b.n	34a46 <_puts_r+0x46>
   34a9a:	0022      	movs	r2, r4
   34a9c:	0028      	movs	r0, r5
   34a9e:	f000 fa03 	bl	34ea8 <__swbuf_r>
   34aa2:	1c43      	adds	r3, r0, #1
   34aa4:	d1e8      	bne.n	34a78 <_puts_r+0x78>
   34aa6:	e7cc      	b.n	34a42 <_puts_r+0x42>
   34aa8:	200a      	movs	r0, #10
   34aaa:	6823      	ldr	r3, [r4, #0]
   34aac:	1c5a      	adds	r2, r3, #1
   34aae:	6022      	str	r2, [r4, #0]
   34ab0:	7018      	strb	r0, [r3, #0]
   34ab2:	e7c8      	b.n	34a46 <_puts_r+0x46>
   34ab4:	00039f5c 	.word	0x00039f5c
   34ab8:	00039f7c 	.word	0x00039f7c
   34abc:	00039f3c 	.word	0x00039f3c

00034ac0 <puts>:
   34ac0:	b510      	push	{r4, lr}
   34ac2:	4b03      	ldr	r3, [pc, #12]	; (34ad0 <puts+0x10>)
   34ac4:	0001      	movs	r1, r0
   34ac6:	6818      	ldr	r0, [r3, #0]
   34ac8:	f7ff ff9a 	bl	34a00 <_puts_r>
   34acc:	bd10      	pop	{r4, pc}
   34ace:	46c0      	nop			; (mov r8, r8)
   34ad0:	200000d4 	.word	0x200000d4

00034ad4 <_sbrk_r>:
   34ad4:	2300      	movs	r3, #0
   34ad6:	b570      	push	{r4, r5, r6, lr}
   34ad8:	4c06      	ldr	r4, [pc, #24]	; (34af4 <_sbrk_r+0x20>)
   34ada:	0005      	movs	r5, r0
   34adc:	0008      	movs	r0, r1
   34ade:	6023      	str	r3, [r4, #0]
   34ae0:	f7f6 fab2 	bl	2b048 <_sbrk>
   34ae4:	1c43      	adds	r3, r0, #1
   34ae6:	d103      	bne.n	34af0 <_sbrk_r+0x1c>
   34ae8:	6823      	ldr	r3, [r4, #0]
   34aea:	2b00      	cmp	r3, #0
   34aec:	d000      	beq.n	34af0 <_sbrk_r+0x1c>
   34aee:	602b      	str	r3, [r5, #0]
   34af0:	bd70      	pop	{r4, r5, r6, pc}
   34af2:	46c0      	nop			; (mov r8, r8)
   34af4:	2000581c 	.word	0x2000581c

00034af8 <sniprintf>:
   34af8:	b40c      	push	{r2, r3}
   34afa:	b530      	push	{r4, r5, lr}
   34afc:	4b16      	ldr	r3, [pc, #88]	; (34b58 <sniprintf+0x60>)
   34afe:	b09d      	sub	sp, #116	; 0x74
   34b00:	1e0c      	subs	r4, r1, #0
   34b02:	681d      	ldr	r5, [r3, #0]
   34b04:	da08      	bge.n	34b18 <sniprintf+0x20>
   34b06:	238b      	movs	r3, #139	; 0x8b
   34b08:	2001      	movs	r0, #1
   34b0a:	602b      	str	r3, [r5, #0]
   34b0c:	4240      	negs	r0, r0
   34b0e:	b01d      	add	sp, #116	; 0x74
   34b10:	bc30      	pop	{r4, r5}
   34b12:	bc08      	pop	{r3}
   34b14:	b002      	add	sp, #8
   34b16:	4718      	bx	r3
   34b18:	2382      	movs	r3, #130	; 0x82
   34b1a:	a902      	add	r1, sp, #8
   34b1c:	009b      	lsls	r3, r3, #2
   34b1e:	818b      	strh	r3, [r1, #12]
   34b20:	2300      	movs	r3, #0
   34b22:	9002      	str	r0, [sp, #8]
   34b24:	6108      	str	r0, [r1, #16]
   34b26:	429c      	cmp	r4, r3
   34b28:	d000      	beq.n	34b2c <sniprintf+0x34>
   34b2a:	1e63      	subs	r3, r4, #1
   34b2c:	608b      	str	r3, [r1, #8]
   34b2e:	614b      	str	r3, [r1, #20]
   34b30:	2301      	movs	r3, #1
   34b32:	425b      	negs	r3, r3
   34b34:	81cb      	strh	r3, [r1, #14]
   34b36:	9a20      	ldr	r2, [sp, #128]	; 0x80
   34b38:	ab21      	add	r3, sp, #132	; 0x84
   34b3a:	0028      	movs	r0, r5
   34b3c:	9301      	str	r3, [sp, #4]
   34b3e:	f000 fcff 	bl	35540 <_svfiprintf_r>
   34b42:	1c43      	adds	r3, r0, #1
   34b44:	da01      	bge.n	34b4a <sniprintf+0x52>
   34b46:	238b      	movs	r3, #139	; 0x8b
   34b48:	602b      	str	r3, [r5, #0]
   34b4a:	2c00      	cmp	r4, #0
   34b4c:	d0df      	beq.n	34b0e <sniprintf+0x16>
   34b4e:	2300      	movs	r3, #0
   34b50:	9a02      	ldr	r2, [sp, #8]
   34b52:	7013      	strb	r3, [r2, #0]
   34b54:	e7db      	b.n	34b0e <sniprintf+0x16>
   34b56:	46c0      	nop			; (mov r8, r8)
   34b58:	200000d4 	.word	0x200000d4

00034b5c <siprintf>:
   34b5c:	b40e      	push	{r1, r2, r3}
   34b5e:	b510      	push	{r4, lr}
   34b60:	b09d      	sub	sp, #116	; 0x74
   34b62:	a902      	add	r1, sp, #8
   34b64:	9002      	str	r0, [sp, #8]
   34b66:	6108      	str	r0, [r1, #16]
   34b68:	480b      	ldr	r0, [pc, #44]	; (34b98 <siprintf+0x3c>)
   34b6a:	2482      	movs	r4, #130	; 0x82
   34b6c:	6088      	str	r0, [r1, #8]
   34b6e:	6148      	str	r0, [r1, #20]
   34b70:	2001      	movs	r0, #1
   34b72:	4240      	negs	r0, r0
   34b74:	ab1f      	add	r3, sp, #124	; 0x7c
   34b76:	81c8      	strh	r0, [r1, #14]
   34b78:	4808      	ldr	r0, [pc, #32]	; (34b9c <siprintf+0x40>)
   34b7a:	cb04      	ldmia	r3!, {r2}
   34b7c:	00a4      	lsls	r4, r4, #2
   34b7e:	6800      	ldr	r0, [r0, #0]
   34b80:	9301      	str	r3, [sp, #4]
   34b82:	818c      	strh	r4, [r1, #12]
   34b84:	f000 fcdc 	bl	35540 <_svfiprintf_r>
   34b88:	2300      	movs	r3, #0
   34b8a:	9a02      	ldr	r2, [sp, #8]
   34b8c:	7013      	strb	r3, [r2, #0]
   34b8e:	b01d      	add	sp, #116	; 0x74
   34b90:	bc10      	pop	{r4}
   34b92:	bc08      	pop	{r3}
   34b94:	b003      	add	sp, #12
   34b96:	4718      	bx	r3
   34b98:	7fffffff 	.word	0x7fffffff
   34b9c:	200000d4 	.word	0x200000d4

00034ba0 <strcasecmp>:
   34ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34ba2:	0007      	movs	r7, r0
   34ba4:	000e      	movs	r6, r1
   34ba6:	783c      	ldrb	r4, [r7, #0]
   34ba8:	f000 fbda 	bl	35360 <__locale_ctype_ptr>
   34bac:	2203      	movs	r2, #3
   34bae:	1900      	adds	r0, r0, r4
   34bb0:	7843      	ldrb	r3, [r0, #1]
   34bb2:	4013      	ands	r3, r2
   34bb4:	2b01      	cmp	r3, #1
   34bb6:	d100      	bne.n	34bba <strcasecmp+0x1a>
   34bb8:	3420      	adds	r4, #32
   34bba:	7835      	ldrb	r5, [r6, #0]
   34bbc:	f000 fbd0 	bl	35360 <__locale_ctype_ptr>
   34bc0:	2203      	movs	r2, #3
   34bc2:	1940      	adds	r0, r0, r5
   34bc4:	7843      	ldrb	r3, [r0, #1]
   34bc6:	4013      	ands	r3, r2
   34bc8:	2b01      	cmp	r3, #1
   34bca:	d100      	bne.n	34bce <strcasecmp+0x2e>
   34bcc:	3520      	adds	r5, #32
   34bce:	1b60      	subs	r0, r4, r5
   34bd0:	d103      	bne.n	34bda <strcasecmp+0x3a>
   34bd2:	3701      	adds	r7, #1
   34bd4:	3601      	adds	r6, #1
   34bd6:	2d00      	cmp	r5, #0
   34bd8:	d1e5      	bne.n	34ba6 <strcasecmp+0x6>
   34bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00034bdc <strcat>:
   34bdc:	0002      	movs	r2, r0
   34bde:	b510      	push	{r4, lr}
   34be0:	7813      	ldrb	r3, [r2, #0]
   34be2:	2b00      	cmp	r3, #0
   34be4:	d105      	bne.n	34bf2 <strcat+0x16>
   34be6:	5ccc      	ldrb	r4, [r1, r3]
   34be8:	54d4      	strb	r4, [r2, r3]
   34bea:	3301      	adds	r3, #1
   34bec:	2c00      	cmp	r4, #0
   34bee:	d1fa      	bne.n	34be6 <strcat+0xa>
   34bf0:	bd10      	pop	{r4, pc}
   34bf2:	3201      	adds	r2, #1
   34bf4:	e7f4      	b.n	34be0 <strcat+0x4>

00034bf6 <strcmp>:
   34bf6:	7802      	ldrb	r2, [r0, #0]
   34bf8:	780b      	ldrb	r3, [r1, #0]
   34bfa:	2a00      	cmp	r2, #0
   34bfc:	d003      	beq.n	34c06 <strcmp+0x10>
   34bfe:	3001      	adds	r0, #1
   34c00:	3101      	adds	r1, #1
   34c02:	429a      	cmp	r2, r3
   34c04:	d0f7      	beq.n	34bf6 <strcmp>
   34c06:	1ad0      	subs	r0, r2, r3
   34c08:	4770      	bx	lr

00034c0a <strcpy>:
   34c0a:	1c03      	adds	r3, r0, #0
   34c0c:	780a      	ldrb	r2, [r1, #0]
   34c0e:	3101      	adds	r1, #1
   34c10:	701a      	strb	r2, [r3, #0]
   34c12:	3301      	adds	r3, #1
   34c14:	2a00      	cmp	r2, #0
   34c16:	d1f9      	bne.n	34c0c <strcpy+0x2>
   34c18:	4770      	bx	lr
	...

00034c1c <strdup>:
   34c1c:	b510      	push	{r4, lr}
   34c1e:	4b03      	ldr	r3, [pc, #12]	; (34c2c <strdup+0x10>)
   34c20:	0001      	movs	r1, r0
   34c22:	6818      	ldr	r0, [r3, #0]
   34c24:	f000 f804 	bl	34c30 <_strdup_r>
   34c28:	bd10      	pop	{r4, pc}
   34c2a:	46c0      	nop			; (mov r8, r8)
   34c2c:	200000d4 	.word	0x200000d4

00034c30 <_strdup_r>:
   34c30:	b570      	push	{r4, r5, r6, lr}
   34c32:	0005      	movs	r5, r0
   34c34:	0008      	movs	r0, r1
   34c36:	000e      	movs	r6, r1
   34c38:	f000 f80d 	bl	34c56 <strlen>
   34c3c:	1c44      	adds	r4, r0, #1
   34c3e:	0021      	movs	r1, r4
   34c40:	0028      	movs	r0, r5
   34c42:	f7ff fe7f 	bl	34944 <_malloc_r>
   34c46:	1e05      	subs	r5, r0, #0
   34c48:	d003      	beq.n	34c52 <_strdup_r+0x22>
   34c4a:	0022      	movs	r2, r4
   34c4c:	0031      	movs	r1, r6
   34c4e:	f7ff fe0b 	bl	34868 <memcpy>
   34c52:	0028      	movs	r0, r5
   34c54:	bd70      	pop	{r4, r5, r6, pc}

00034c56 <strlen>:
   34c56:	2300      	movs	r3, #0
   34c58:	5cc2      	ldrb	r2, [r0, r3]
   34c5a:	3301      	adds	r3, #1
   34c5c:	2a00      	cmp	r2, #0
   34c5e:	d1fb      	bne.n	34c58 <strlen+0x2>
   34c60:	1e58      	subs	r0, r3, #1
   34c62:	4770      	bx	lr

00034c64 <strncmp>:
   34c64:	2300      	movs	r3, #0
   34c66:	b530      	push	{r4, r5, lr}
   34c68:	429a      	cmp	r2, r3
   34c6a:	d00a      	beq.n	34c82 <strncmp+0x1e>
   34c6c:	3a01      	subs	r2, #1
   34c6e:	5cc4      	ldrb	r4, [r0, r3]
   34c70:	5ccd      	ldrb	r5, [r1, r3]
   34c72:	42ac      	cmp	r4, r5
   34c74:	d104      	bne.n	34c80 <strncmp+0x1c>
   34c76:	429a      	cmp	r2, r3
   34c78:	d002      	beq.n	34c80 <strncmp+0x1c>
   34c7a:	3301      	adds	r3, #1
   34c7c:	2c00      	cmp	r4, #0
   34c7e:	d1f6      	bne.n	34c6e <strncmp+0xa>
   34c80:	1b63      	subs	r3, r4, r5
   34c82:	0018      	movs	r0, r3
   34c84:	bd30      	pop	{r4, r5, pc}

00034c86 <strncpy>:
   34c86:	b570      	push	{r4, r5, r6, lr}
   34c88:	0004      	movs	r4, r0
   34c8a:	2a00      	cmp	r2, #0
   34c8c:	d100      	bne.n	34c90 <strncpy+0xa>
   34c8e:	bd70      	pop	{r4, r5, r6, pc}
   34c90:	780d      	ldrb	r5, [r1, #0]
   34c92:	1e56      	subs	r6, r2, #1
   34c94:	1c63      	adds	r3, r4, #1
   34c96:	7025      	strb	r5, [r4, #0]
   34c98:	3101      	adds	r1, #1
   34c9a:	2d00      	cmp	r5, #0
   34c9c:	d105      	bne.n	34caa <strncpy+0x24>
   34c9e:	18a4      	adds	r4, r4, r2
   34ca0:	429c      	cmp	r4, r3
   34ca2:	d0f4      	beq.n	34c8e <strncpy+0x8>
   34ca4:	701d      	strb	r5, [r3, #0]
   34ca6:	3301      	adds	r3, #1
   34ca8:	e7fa      	b.n	34ca0 <strncpy+0x1a>
   34caa:	001c      	movs	r4, r3
   34cac:	0032      	movs	r2, r6
   34cae:	e7ec      	b.n	34c8a <strncpy+0x4>

00034cb0 <strrchr>:
   34cb0:	b570      	push	{r4, r5, r6, lr}
   34cb2:	000d      	movs	r5, r1
   34cb4:	2400      	movs	r4, #0
   34cb6:	2900      	cmp	r1, #0
   34cb8:	d105      	bne.n	34cc6 <strrchr+0x16>
   34cba:	f000 ff19 	bl	35af0 <strchr>
   34cbe:	0004      	movs	r4, r0
   34cc0:	e006      	b.n	34cd0 <strrchr+0x20>
   34cc2:	001c      	movs	r4, r3
   34cc4:	1c58      	adds	r0, r3, #1
   34cc6:	0029      	movs	r1, r5
   34cc8:	f000 ff12 	bl	35af0 <strchr>
   34ccc:	1e03      	subs	r3, r0, #0
   34cce:	d1f8      	bne.n	34cc2 <strrchr+0x12>
   34cd0:	0020      	movs	r0, r4
   34cd2:	bd70      	pop	{r4, r5, r6, pc}

00034cd4 <strstr>:
   34cd4:	b510      	push	{r4, lr}
   34cd6:	0002      	movs	r2, r0
   34cd8:	7800      	ldrb	r0, [r0, #0]
   34cda:	2800      	cmp	r0, #0
   34cdc:	d104      	bne.n	34ce8 <strstr+0x14>
   34cde:	7809      	ldrb	r1, [r1, #0]
   34ce0:	2900      	cmp	r1, #0
   34ce2:	d00d      	beq.n	34d00 <strstr+0x2c>
   34ce4:	bd10      	pop	{r4, pc}
   34ce6:	3201      	adds	r2, #1
   34ce8:	7810      	ldrb	r0, [r2, #0]
   34cea:	2800      	cmp	r0, #0
   34cec:	d0fa      	beq.n	34ce4 <strstr+0x10>
   34cee:	2300      	movs	r3, #0
   34cf0:	5cc8      	ldrb	r0, [r1, r3]
   34cf2:	2800      	cmp	r0, #0
   34cf4:	d004      	beq.n	34d00 <strstr+0x2c>
   34cf6:	5cd4      	ldrb	r4, [r2, r3]
   34cf8:	4284      	cmp	r4, r0
   34cfa:	d1f4      	bne.n	34ce6 <strstr+0x12>
   34cfc:	3301      	adds	r3, #1
   34cfe:	e7f7      	b.n	34cf0 <strstr+0x1c>
   34d00:	0010      	movs	r0, r2
   34d02:	e7ef      	b.n	34ce4 <strstr+0x10>

00034d04 <_strtol_l.isra.0>:
   34d04:	b5f0      	push	{r4, r5, r6, r7, lr}
   34d06:	001f      	movs	r7, r3
   34d08:	000e      	movs	r6, r1
   34d0a:	b087      	sub	sp, #28
   34d0c:	9005      	str	r0, [sp, #20]
   34d0e:	9103      	str	r1, [sp, #12]
   34d10:	9202      	str	r2, [sp, #8]
   34d12:	980c      	ldr	r0, [sp, #48]	; 0x30
   34d14:	7834      	ldrb	r4, [r6, #0]
   34d16:	f000 fb20 	bl	3535a <__locale_ctype_ptr_l>
   34d1a:	2208      	movs	r2, #8
   34d1c:	1900      	adds	r0, r0, r4
   34d1e:	7843      	ldrb	r3, [r0, #1]
   34d20:	1c75      	adds	r5, r6, #1
   34d22:	4013      	ands	r3, r2
   34d24:	d10c      	bne.n	34d40 <_strtol_l.isra.0+0x3c>
   34d26:	2c2d      	cmp	r4, #45	; 0x2d
   34d28:	d10c      	bne.n	34d44 <_strtol_l.isra.0+0x40>
   34d2a:	3301      	adds	r3, #1
   34d2c:	782c      	ldrb	r4, [r5, #0]
   34d2e:	9301      	str	r3, [sp, #4]
   34d30:	1cb5      	adds	r5, r6, #2
   34d32:	2f00      	cmp	r7, #0
   34d34:	d00c      	beq.n	34d50 <_strtol_l.isra.0+0x4c>
   34d36:	2f10      	cmp	r7, #16
   34d38:	d114      	bne.n	34d64 <_strtol_l.isra.0+0x60>
   34d3a:	2c30      	cmp	r4, #48	; 0x30
   34d3c:	d00a      	beq.n	34d54 <_strtol_l.isra.0+0x50>
   34d3e:	e011      	b.n	34d64 <_strtol_l.isra.0+0x60>
   34d40:	002e      	movs	r6, r5
   34d42:	e7e6      	b.n	34d12 <_strtol_l.isra.0+0xe>
   34d44:	9301      	str	r3, [sp, #4]
   34d46:	2c2b      	cmp	r4, #43	; 0x2b
   34d48:	d1f3      	bne.n	34d32 <_strtol_l.isra.0+0x2e>
   34d4a:	782c      	ldrb	r4, [r5, #0]
   34d4c:	1cb5      	adds	r5, r6, #2
   34d4e:	e7f0      	b.n	34d32 <_strtol_l.isra.0+0x2e>
   34d50:	2c30      	cmp	r4, #48	; 0x30
   34d52:	d12f      	bne.n	34db4 <_strtol_l.isra.0+0xb0>
   34d54:	2220      	movs	r2, #32
   34d56:	782b      	ldrb	r3, [r5, #0]
   34d58:	4393      	bics	r3, r2
   34d5a:	2b58      	cmp	r3, #88	; 0x58
   34d5c:	d151      	bne.n	34e02 <_strtol_l.isra.0+0xfe>
   34d5e:	2710      	movs	r7, #16
   34d60:	786c      	ldrb	r4, [r5, #1]
   34d62:	3502      	adds	r5, #2
   34d64:	9b01      	ldr	r3, [sp, #4]
   34d66:	4a29      	ldr	r2, [pc, #164]	; (34e0c <_strtol_l.isra.0+0x108>)
   34d68:	0039      	movs	r1, r7
   34d6a:	189e      	adds	r6, r3, r2
   34d6c:	0030      	movs	r0, r6
   34d6e:	f7fd fe2f 	bl	329d0 <__aeabi_uidivmod>
   34d72:	0030      	movs	r0, r6
   34d74:	9104      	str	r1, [sp, #16]
   34d76:	0039      	movs	r1, r7
   34d78:	f7fd fda4 	bl	328c4 <__udivsi3>
   34d7c:	2101      	movs	r1, #1
   34d7e:	2300      	movs	r3, #0
   34d80:	4249      	negs	r1, r1
   34d82:	0002      	movs	r2, r0
   34d84:	468c      	mov	ip, r1
   34d86:	0018      	movs	r0, r3
   34d88:	0021      	movs	r1, r4
   34d8a:	3930      	subs	r1, #48	; 0x30
   34d8c:	2909      	cmp	r1, #9
   34d8e:	d813      	bhi.n	34db8 <_strtol_l.isra.0+0xb4>
   34d90:	000c      	movs	r4, r1
   34d92:	42a7      	cmp	r7, r4
   34d94:	dd1c      	ble.n	34dd0 <_strtol_l.isra.0+0xcc>
   34d96:	1c59      	adds	r1, r3, #1
   34d98:	d009      	beq.n	34dae <_strtol_l.isra.0+0xaa>
   34d9a:	4663      	mov	r3, ip
   34d9c:	4282      	cmp	r2, r0
   34d9e:	d306      	bcc.n	34dae <_strtol_l.isra.0+0xaa>
   34da0:	d102      	bne.n	34da8 <_strtol_l.isra.0+0xa4>
   34da2:	9904      	ldr	r1, [sp, #16]
   34da4:	42a1      	cmp	r1, r4
   34da6:	db02      	blt.n	34dae <_strtol_l.isra.0+0xaa>
   34da8:	2301      	movs	r3, #1
   34daa:	4378      	muls	r0, r7
   34dac:	1820      	adds	r0, r4, r0
   34dae:	782c      	ldrb	r4, [r5, #0]
   34db0:	3501      	adds	r5, #1
   34db2:	e7e9      	b.n	34d88 <_strtol_l.isra.0+0x84>
   34db4:	270a      	movs	r7, #10
   34db6:	e7d5      	b.n	34d64 <_strtol_l.isra.0+0x60>
   34db8:	0021      	movs	r1, r4
   34dba:	3941      	subs	r1, #65	; 0x41
   34dbc:	2919      	cmp	r1, #25
   34dbe:	d801      	bhi.n	34dc4 <_strtol_l.isra.0+0xc0>
   34dc0:	3c37      	subs	r4, #55	; 0x37
   34dc2:	e7e6      	b.n	34d92 <_strtol_l.isra.0+0x8e>
   34dc4:	0021      	movs	r1, r4
   34dc6:	3961      	subs	r1, #97	; 0x61
   34dc8:	2919      	cmp	r1, #25
   34dca:	d801      	bhi.n	34dd0 <_strtol_l.isra.0+0xcc>
   34dcc:	3c57      	subs	r4, #87	; 0x57
   34dce:	e7e0      	b.n	34d92 <_strtol_l.isra.0+0x8e>
   34dd0:	1c5a      	adds	r2, r3, #1
   34dd2:	d108      	bne.n	34de6 <_strtol_l.isra.0+0xe2>
   34dd4:	9a05      	ldr	r2, [sp, #20]
   34dd6:	3323      	adds	r3, #35	; 0x23
   34dd8:	6013      	str	r3, [r2, #0]
   34dda:	9b02      	ldr	r3, [sp, #8]
   34ddc:	0030      	movs	r0, r6
   34dde:	2b00      	cmp	r3, #0
   34de0:	d10b      	bne.n	34dfa <_strtol_l.isra.0+0xf6>
   34de2:	b007      	add	sp, #28
   34de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34de6:	9a01      	ldr	r2, [sp, #4]
   34de8:	2a00      	cmp	r2, #0
   34dea:	d000      	beq.n	34dee <_strtol_l.isra.0+0xea>
   34dec:	4240      	negs	r0, r0
   34dee:	9a02      	ldr	r2, [sp, #8]
   34df0:	2a00      	cmp	r2, #0
   34df2:	d0f6      	beq.n	34de2 <_strtol_l.isra.0+0xde>
   34df4:	9a03      	ldr	r2, [sp, #12]
   34df6:	2b00      	cmp	r3, #0
   34df8:	d000      	beq.n	34dfc <_strtol_l.isra.0+0xf8>
   34dfa:	1e6a      	subs	r2, r5, #1
   34dfc:	9b02      	ldr	r3, [sp, #8]
   34dfe:	601a      	str	r2, [r3, #0]
   34e00:	e7ef      	b.n	34de2 <_strtol_l.isra.0+0xde>
   34e02:	2430      	movs	r4, #48	; 0x30
   34e04:	2f00      	cmp	r7, #0
   34e06:	d1ad      	bne.n	34d64 <_strtol_l.isra.0+0x60>
   34e08:	3708      	adds	r7, #8
   34e0a:	e7ab      	b.n	34d64 <_strtol_l.isra.0+0x60>
   34e0c:	7fffffff 	.word	0x7fffffff

00034e10 <strtol>:
   34e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34e12:	0013      	movs	r3, r2
   34e14:	4a06      	ldr	r2, [pc, #24]	; (34e30 <strtol+0x20>)
   34e16:	0005      	movs	r5, r0
   34e18:	6810      	ldr	r0, [r2, #0]
   34e1a:	6a04      	ldr	r4, [r0, #32]
   34e1c:	2c00      	cmp	r4, #0
   34e1e:	d100      	bne.n	34e22 <strtol+0x12>
   34e20:	4c04      	ldr	r4, [pc, #16]	; (34e34 <strtol+0x24>)
   34e22:	000a      	movs	r2, r1
   34e24:	9400      	str	r4, [sp, #0]
   34e26:	0029      	movs	r1, r5
   34e28:	f7ff ff6c 	bl	34d04 <_strtol_l.isra.0>
   34e2c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   34e2e:	46c0      	nop			; (mov r8, r8)
   34e30:	200000d4 	.word	0x200000d4
   34e34:	20000138 	.word	0x20000138

00034e38 <_vsniprintf_r>:
   34e38:	b530      	push	{r4, r5, lr}
   34e3a:	0014      	movs	r4, r2
   34e3c:	b09b      	sub	sp, #108	; 0x6c
   34e3e:	0005      	movs	r5, r0
   34e40:	001a      	movs	r2, r3
   34e42:	2c00      	cmp	r4, #0
   34e44:	da05      	bge.n	34e52 <_vsniprintf_r+0x1a>
   34e46:	238b      	movs	r3, #139	; 0x8b
   34e48:	6003      	str	r3, [r0, #0]
   34e4a:	2001      	movs	r0, #1
   34e4c:	4240      	negs	r0, r0
   34e4e:	b01b      	add	sp, #108	; 0x6c
   34e50:	bd30      	pop	{r4, r5, pc}
   34e52:	2382      	movs	r3, #130	; 0x82
   34e54:	4668      	mov	r0, sp
   34e56:	009b      	lsls	r3, r3, #2
   34e58:	8183      	strh	r3, [r0, #12]
   34e5a:	2300      	movs	r3, #0
   34e5c:	9100      	str	r1, [sp, #0]
   34e5e:	9104      	str	r1, [sp, #16]
   34e60:	429c      	cmp	r4, r3
   34e62:	d000      	beq.n	34e66 <_vsniprintf_r+0x2e>
   34e64:	1e63      	subs	r3, r4, #1
   34e66:	9302      	str	r3, [sp, #8]
   34e68:	9305      	str	r3, [sp, #20]
   34e6a:	2301      	movs	r3, #1
   34e6c:	4669      	mov	r1, sp
   34e6e:	425b      	negs	r3, r3
   34e70:	81cb      	strh	r3, [r1, #14]
   34e72:	0028      	movs	r0, r5
   34e74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   34e76:	f000 fb63 	bl	35540 <_svfiprintf_r>
   34e7a:	1c43      	adds	r3, r0, #1
   34e7c:	da01      	bge.n	34e82 <_vsniprintf_r+0x4a>
   34e7e:	238b      	movs	r3, #139	; 0x8b
   34e80:	602b      	str	r3, [r5, #0]
   34e82:	2c00      	cmp	r4, #0
   34e84:	d0e3      	beq.n	34e4e <_vsniprintf_r+0x16>
   34e86:	2300      	movs	r3, #0
   34e88:	9a00      	ldr	r2, [sp, #0]
   34e8a:	7013      	strb	r3, [r2, #0]
   34e8c:	e7df      	b.n	34e4e <_vsniprintf_r+0x16>
	...

00034e90 <vsniprintf>:
   34e90:	b507      	push	{r0, r1, r2, lr}
   34e92:	9300      	str	r3, [sp, #0]
   34e94:	0013      	movs	r3, r2
   34e96:	000a      	movs	r2, r1
   34e98:	0001      	movs	r1, r0
   34e9a:	4802      	ldr	r0, [pc, #8]	; (34ea4 <vsniprintf+0x14>)
   34e9c:	6800      	ldr	r0, [r0, #0]
   34e9e:	f7ff ffcb 	bl	34e38 <_vsniprintf_r>
   34ea2:	bd0e      	pop	{r1, r2, r3, pc}
   34ea4:	200000d4 	.word	0x200000d4

00034ea8 <__swbuf_r>:
   34ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34eaa:	0005      	movs	r5, r0
   34eac:	000e      	movs	r6, r1
   34eae:	0014      	movs	r4, r2
   34eb0:	2800      	cmp	r0, #0
   34eb2:	d004      	beq.n	34ebe <__swbuf_r+0x16>
   34eb4:	6983      	ldr	r3, [r0, #24]
   34eb6:	2b00      	cmp	r3, #0
   34eb8:	d101      	bne.n	34ebe <__swbuf_r+0x16>
   34eba:	f000 f9b9 	bl	35230 <__sinit>
   34ebe:	4b22      	ldr	r3, [pc, #136]	; (34f48 <__swbuf_r+0xa0>)
   34ec0:	429c      	cmp	r4, r3
   34ec2:	d12d      	bne.n	34f20 <__swbuf_r+0x78>
   34ec4:	686c      	ldr	r4, [r5, #4]
   34ec6:	69a3      	ldr	r3, [r4, #24]
   34ec8:	60a3      	str	r3, [r4, #8]
   34eca:	89a3      	ldrh	r3, [r4, #12]
   34ecc:	071b      	lsls	r3, r3, #28
   34ece:	d531      	bpl.n	34f34 <__swbuf_r+0x8c>
   34ed0:	6923      	ldr	r3, [r4, #16]
   34ed2:	2b00      	cmp	r3, #0
   34ed4:	d02e      	beq.n	34f34 <__swbuf_r+0x8c>
   34ed6:	6823      	ldr	r3, [r4, #0]
   34ed8:	6922      	ldr	r2, [r4, #16]
   34eda:	b2f7      	uxtb	r7, r6
   34edc:	1a98      	subs	r0, r3, r2
   34ede:	6963      	ldr	r3, [r4, #20]
   34ee0:	b2f6      	uxtb	r6, r6
   34ee2:	4298      	cmp	r0, r3
   34ee4:	db05      	blt.n	34ef2 <__swbuf_r+0x4a>
   34ee6:	0021      	movs	r1, r4
   34ee8:	0028      	movs	r0, r5
   34eea:	f000 f933 	bl	35154 <_fflush_r>
   34eee:	2800      	cmp	r0, #0
   34ef0:	d126      	bne.n	34f40 <__swbuf_r+0x98>
   34ef2:	68a3      	ldr	r3, [r4, #8]
   34ef4:	3001      	adds	r0, #1
   34ef6:	3b01      	subs	r3, #1
   34ef8:	60a3      	str	r3, [r4, #8]
   34efa:	6823      	ldr	r3, [r4, #0]
   34efc:	1c5a      	adds	r2, r3, #1
   34efe:	6022      	str	r2, [r4, #0]
   34f00:	701f      	strb	r7, [r3, #0]
   34f02:	6963      	ldr	r3, [r4, #20]
   34f04:	4298      	cmp	r0, r3
   34f06:	d004      	beq.n	34f12 <__swbuf_r+0x6a>
   34f08:	89a3      	ldrh	r3, [r4, #12]
   34f0a:	07db      	lsls	r3, r3, #31
   34f0c:	d51a      	bpl.n	34f44 <__swbuf_r+0x9c>
   34f0e:	2e0a      	cmp	r6, #10
   34f10:	d118      	bne.n	34f44 <__swbuf_r+0x9c>
   34f12:	0021      	movs	r1, r4
   34f14:	0028      	movs	r0, r5
   34f16:	f000 f91d 	bl	35154 <_fflush_r>
   34f1a:	2800      	cmp	r0, #0
   34f1c:	d012      	beq.n	34f44 <__swbuf_r+0x9c>
   34f1e:	e00f      	b.n	34f40 <__swbuf_r+0x98>
   34f20:	4b0a      	ldr	r3, [pc, #40]	; (34f4c <__swbuf_r+0xa4>)
   34f22:	429c      	cmp	r4, r3
   34f24:	d101      	bne.n	34f2a <__swbuf_r+0x82>
   34f26:	68ac      	ldr	r4, [r5, #8]
   34f28:	e7cd      	b.n	34ec6 <__swbuf_r+0x1e>
   34f2a:	4b09      	ldr	r3, [pc, #36]	; (34f50 <__swbuf_r+0xa8>)
   34f2c:	429c      	cmp	r4, r3
   34f2e:	d1ca      	bne.n	34ec6 <__swbuf_r+0x1e>
   34f30:	68ec      	ldr	r4, [r5, #12]
   34f32:	e7c8      	b.n	34ec6 <__swbuf_r+0x1e>
   34f34:	0021      	movs	r1, r4
   34f36:	0028      	movs	r0, r5
   34f38:	f000 f80c 	bl	34f54 <__swsetup_r>
   34f3c:	2800      	cmp	r0, #0
   34f3e:	d0ca      	beq.n	34ed6 <__swbuf_r+0x2e>
   34f40:	2601      	movs	r6, #1
   34f42:	4276      	negs	r6, r6
   34f44:	0030      	movs	r0, r6
   34f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34f48:	00039f5c 	.word	0x00039f5c
   34f4c:	00039f7c 	.word	0x00039f7c
   34f50:	00039f3c 	.word	0x00039f3c

00034f54 <__swsetup_r>:
   34f54:	4b36      	ldr	r3, [pc, #216]	; (35030 <__swsetup_r+0xdc>)
   34f56:	b570      	push	{r4, r5, r6, lr}
   34f58:	681d      	ldr	r5, [r3, #0]
   34f5a:	0006      	movs	r6, r0
   34f5c:	000c      	movs	r4, r1
   34f5e:	2d00      	cmp	r5, #0
   34f60:	d005      	beq.n	34f6e <__swsetup_r+0x1a>
   34f62:	69ab      	ldr	r3, [r5, #24]
   34f64:	2b00      	cmp	r3, #0
   34f66:	d102      	bne.n	34f6e <__swsetup_r+0x1a>
   34f68:	0028      	movs	r0, r5
   34f6a:	f000 f961 	bl	35230 <__sinit>
   34f6e:	4b31      	ldr	r3, [pc, #196]	; (35034 <__swsetup_r+0xe0>)
   34f70:	429c      	cmp	r4, r3
   34f72:	d10f      	bne.n	34f94 <__swsetup_r+0x40>
   34f74:	686c      	ldr	r4, [r5, #4]
   34f76:	230c      	movs	r3, #12
   34f78:	5ee2      	ldrsh	r2, [r4, r3]
   34f7a:	b293      	uxth	r3, r2
   34f7c:	0719      	lsls	r1, r3, #28
   34f7e:	d42d      	bmi.n	34fdc <__swsetup_r+0x88>
   34f80:	06d9      	lsls	r1, r3, #27
   34f82:	d411      	bmi.n	34fa8 <__swsetup_r+0x54>
   34f84:	2309      	movs	r3, #9
   34f86:	2001      	movs	r0, #1
   34f88:	6033      	str	r3, [r6, #0]
   34f8a:	3337      	adds	r3, #55	; 0x37
   34f8c:	4313      	orrs	r3, r2
   34f8e:	81a3      	strh	r3, [r4, #12]
   34f90:	4240      	negs	r0, r0
   34f92:	bd70      	pop	{r4, r5, r6, pc}
   34f94:	4b28      	ldr	r3, [pc, #160]	; (35038 <__swsetup_r+0xe4>)
   34f96:	429c      	cmp	r4, r3
   34f98:	d101      	bne.n	34f9e <__swsetup_r+0x4a>
   34f9a:	68ac      	ldr	r4, [r5, #8]
   34f9c:	e7eb      	b.n	34f76 <__swsetup_r+0x22>
   34f9e:	4b27      	ldr	r3, [pc, #156]	; (3503c <__swsetup_r+0xe8>)
   34fa0:	429c      	cmp	r4, r3
   34fa2:	d1e8      	bne.n	34f76 <__swsetup_r+0x22>
   34fa4:	68ec      	ldr	r4, [r5, #12]
   34fa6:	e7e6      	b.n	34f76 <__swsetup_r+0x22>
   34fa8:	075b      	lsls	r3, r3, #29
   34faa:	d513      	bpl.n	34fd4 <__swsetup_r+0x80>
   34fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34fae:	2900      	cmp	r1, #0
   34fb0:	d008      	beq.n	34fc4 <__swsetup_r+0x70>
   34fb2:	0023      	movs	r3, r4
   34fb4:	3344      	adds	r3, #68	; 0x44
   34fb6:	4299      	cmp	r1, r3
   34fb8:	d002      	beq.n	34fc0 <__swsetup_r+0x6c>
   34fba:	0030      	movs	r0, r6
   34fbc:	f7ff fc78 	bl	348b0 <_free_r>
   34fc0:	2300      	movs	r3, #0
   34fc2:	6363      	str	r3, [r4, #52]	; 0x34
   34fc4:	2224      	movs	r2, #36	; 0x24
   34fc6:	89a3      	ldrh	r3, [r4, #12]
   34fc8:	4393      	bics	r3, r2
   34fca:	81a3      	strh	r3, [r4, #12]
   34fcc:	2300      	movs	r3, #0
   34fce:	6063      	str	r3, [r4, #4]
   34fd0:	6923      	ldr	r3, [r4, #16]
   34fd2:	6023      	str	r3, [r4, #0]
   34fd4:	2308      	movs	r3, #8
   34fd6:	89a2      	ldrh	r2, [r4, #12]
   34fd8:	4313      	orrs	r3, r2
   34fda:	81a3      	strh	r3, [r4, #12]
   34fdc:	6923      	ldr	r3, [r4, #16]
   34fde:	2b00      	cmp	r3, #0
   34fe0:	d10b      	bne.n	34ffa <__swsetup_r+0xa6>
   34fe2:	21a0      	movs	r1, #160	; 0xa0
   34fe4:	2280      	movs	r2, #128	; 0x80
   34fe6:	89a3      	ldrh	r3, [r4, #12]
   34fe8:	0089      	lsls	r1, r1, #2
   34fea:	0092      	lsls	r2, r2, #2
   34fec:	400b      	ands	r3, r1
   34fee:	4293      	cmp	r3, r2
   34ff0:	d003      	beq.n	34ffa <__swsetup_r+0xa6>
   34ff2:	0021      	movs	r1, r4
   34ff4:	0030      	movs	r0, r6
   34ff6:	f000 f9e9 	bl	353cc <__smakebuf_r>
   34ffa:	2301      	movs	r3, #1
   34ffc:	89a2      	ldrh	r2, [r4, #12]
   34ffe:	4013      	ands	r3, r2
   35000:	d011      	beq.n	35026 <__swsetup_r+0xd2>
   35002:	2300      	movs	r3, #0
   35004:	60a3      	str	r3, [r4, #8]
   35006:	6963      	ldr	r3, [r4, #20]
   35008:	425b      	negs	r3, r3
   3500a:	61a3      	str	r3, [r4, #24]
   3500c:	2000      	movs	r0, #0
   3500e:	6923      	ldr	r3, [r4, #16]
   35010:	4283      	cmp	r3, r0
   35012:	d1be      	bne.n	34f92 <__swsetup_r+0x3e>
   35014:	230c      	movs	r3, #12
   35016:	5ee2      	ldrsh	r2, [r4, r3]
   35018:	0613      	lsls	r3, r2, #24
   3501a:	d5ba      	bpl.n	34f92 <__swsetup_r+0x3e>
   3501c:	2340      	movs	r3, #64	; 0x40
   3501e:	4313      	orrs	r3, r2
   35020:	81a3      	strh	r3, [r4, #12]
   35022:	3801      	subs	r0, #1
   35024:	e7b5      	b.n	34f92 <__swsetup_r+0x3e>
   35026:	0792      	lsls	r2, r2, #30
   35028:	d400      	bmi.n	3502c <__swsetup_r+0xd8>
   3502a:	6963      	ldr	r3, [r4, #20]
   3502c:	60a3      	str	r3, [r4, #8]
   3502e:	e7ed      	b.n	3500c <__swsetup_r+0xb8>
   35030:	200000d4 	.word	0x200000d4
   35034:	00039f5c 	.word	0x00039f5c
   35038:	00039f7c 	.word	0x00039f7c
   3503c:	00039f3c 	.word	0x00039f3c

00035040 <__sflush_r>:
   35040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35042:	898a      	ldrh	r2, [r1, #12]
   35044:	0005      	movs	r5, r0
   35046:	000c      	movs	r4, r1
   35048:	0713      	lsls	r3, r2, #28
   3504a:	d460      	bmi.n	3510e <__sflush_r+0xce>
   3504c:	684b      	ldr	r3, [r1, #4]
   3504e:	2b00      	cmp	r3, #0
   35050:	dc04      	bgt.n	3505c <__sflush_r+0x1c>
   35052:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   35054:	2b00      	cmp	r3, #0
   35056:	dc01      	bgt.n	3505c <__sflush_r+0x1c>
   35058:	2000      	movs	r0, #0
   3505a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3505c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   3505e:	2f00      	cmp	r7, #0
   35060:	d0fa      	beq.n	35058 <__sflush_r+0x18>
   35062:	2300      	movs	r3, #0
   35064:	682e      	ldr	r6, [r5, #0]
   35066:	602b      	str	r3, [r5, #0]
   35068:	2380      	movs	r3, #128	; 0x80
   3506a:	015b      	lsls	r3, r3, #5
   3506c:	401a      	ands	r2, r3
   3506e:	d034      	beq.n	350da <__sflush_r+0x9a>
   35070:	6d60      	ldr	r0, [r4, #84]	; 0x54
   35072:	89a3      	ldrh	r3, [r4, #12]
   35074:	075b      	lsls	r3, r3, #29
   35076:	d506      	bpl.n	35086 <__sflush_r+0x46>
   35078:	6863      	ldr	r3, [r4, #4]
   3507a:	1ac0      	subs	r0, r0, r3
   3507c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3507e:	2b00      	cmp	r3, #0
   35080:	d001      	beq.n	35086 <__sflush_r+0x46>
   35082:	6c23      	ldr	r3, [r4, #64]	; 0x40
   35084:	1ac0      	subs	r0, r0, r3
   35086:	0002      	movs	r2, r0
   35088:	6a21      	ldr	r1, [r4, #32]
   3508a:	2300      	movs	r3, #0
   3508c:	0028      	movs	r0, r5
   3508e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35090:	47b8      	blx	r7
   35092:	89a1      	ldrh	r1, [r4, #12]
   35094:	1c43      	adds	r3, r0, #1
   35096:	d106      	bne.n	350a6 <__sflush_r+0x66>
   35098:	682b      	ldr	r3, [r5, #0]
   3509a:	2b1d      	cmp	r3, #29
   3509c:	d831      	bhi.n	35102 <__sflush_r+0xc2>
   3509e:	4a2c      	ldr	r2, [pc, #176]	; (35150 <__sflush_r+0x110>)
   350a0:	40da      	lsrs	r2, r3
   350a2:	07d3      	lsls	r3, r2, #31
   350a4:	d52d      	bpl.n	35102 <__sflush_r+0xc2>
   350a6:	2300      	movs	r3, #0
   350a8:	6063      	str	r3, [r4, #4]
   350aa:	6923      	ldr	r3, [r4, #16]
   350ac:	6023      	str	r3, [r4, #0]
   350ae:	04cb      	lsls	r3, r1, #19
   350b0:	d505      	bpl.n	350be <__sflush_r+0x7e>
   350b2:	1c43      	adds	r3, r0, #1
   350b4:	d102      	bne.n	350bc <__sflush_r+0x7c>
   350b6:	682b      	ldr	r3, [r5, #0]
   350b8:	2b00      	cmp	r3, #0
   350ba:	d100      	bne.n	350be <__sflush_r+0x7e>
   350bc:	6560      	str	r0, [r4, #84]	; 0x54
   350be:	6b61      	ldr	r1, [r4, #52]	; 0x34
   350c0:	602e      	str	r6, [r5, #0]
   350c2:	2900      	cmp	r1, #0
   350c4:	d0c8      	beq.n	35058 <__sflush_r+0x18>
   350c6:	0023      	movs	r3, r4
   350c8:	3344      	adds	r3, #68	; 0x44
   350ca:	4299      	cmp	r1, r3
   350cc:	d002      	beq.n	350d4 <__sflush_r+0x94>
   350ce:	0028      	movs	r0, r5
   350d0:	f7ff fbee 	bl	348b0 <_free_r>
   350d4:	2000      	movs	r0, #0
   350d6:	6360      	str	r0, [r4, #52]	; 0x34
   350d8:	e7bf      	b.n	3505a <__sflush_r+0x1a>
   350da:	2301      	movs	r3, #1
   350dc:	6a21      	ldr	r1, [r4, #32]
   350de:	0028      	movs	r0, r5
   350e0:	47b8      	blx	r7
   350e2:	1c43      	adds	r3, r0, #1
   350e4:	d1c5      	bne.n	35072 <__sflush_r+0x32>
   350e6:	682b      	ldr	r3, [r5, #0]
   350e8:	2b00      	cmp	r3, #0
   350ea:	d0c2      	beq.n	35072 <__sflush_r+0x32>
   350ec:	2b1d      	cmp	r3, #29
   350ee:	d001      	beq.n	350f4 <__sflush_r+0xb4>
   350f0:	2b16      	cmp	r3, #22
   350f2:	d101      	bne.n	350f8 <__sflush_r+0xb8>
   350f4:	602e      	str	r6, [r5, #0]
   350f6:	e7af      	b.n	35058 <__sflush_r+0x18>
   350f8:	2340      	movs	r3, #64	; 0x40
   350fa:	89a2      	ldrh	r2, [r4, #12]
   350fc:	4313      	orrs	r3, r2
   350fe:	81a3      	strh	r3, [r4, #12]
   35100:	e7ab      	b.n	3505a <__sflush_r+0x1a>
   35102:	2340      	movs	r3, #64	; 0x40
   35104:	430b      	orrs	r3, r1
   35106:	2001      	movs	r0, #1
   35108:	81a3      	strh	r3, [r4, #12]
   3510a:	4240      	negs	r0, r0
   3510c:	e7a5      	b.n	3505a <__sflush_r+0x1a>
   3510e:	690f      	ldr	r7, [r1, #16]
   35110:	2f00      	cmp	r7, #0
   35112:	d0a1      	beq.n	35058 <__sflush_r+0x18>
   35114:	680b      	ldr	r3, [r1, #0]
   35116:	600f      	str	r7, [r1, #0]
   35118:	1bdb      	subs	r3, r3, r7
   3511a:	9301      	str	r3, [sp, #4]
   3511c:	2300      	movs	r3, #0
   3511e:	0792      	lsls	r2, r2, #30
   35120:	d100      	bne.n	35124 <__sflush_r+0xe4>
   35122:	694b      	ldr	r3, [r1, #20]
   35124:	60a3      	str	r3, [r4, #8]
   35126:	9b01      	ldr	r3, [sp, #4]
   35128:	2b00      	cmp	r3, #0
   3512a:	dc00      	bgt.n	3512e <__sflush_r+0xee>
   3512c:	e794      	b.n	35058 <__sflush_r+0x18>
   3512e:	9b01      	ldr	r3, [sp, #4]
   35130:	003a      	movs	r2, r7
   35132:	6a21      	ldr	r1, [r4, #32]
   35134:	0028      	movs	r0, r5
   35136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   35138:	47b0      	blx	r6
   3513a:	2800      	cmp	r0, #0
   3513c:	dc03      	bgt.n	35146 <__sflush_r+0x106>
   3513e:	2340      	movs	r3, #64	; 0x40
   35140:	89a2      	ldrh	r2, [r4, #12]
   35142:	4313      	orrs	r3, r2
   35144:	e7df      	b.n	35106 <__sflush_r+0xc6>
   35146:	9b01      	ldr	r3, [sp, #4]
   35148:	183f      	adds	r7, r7, r0
   3514a:	1a1b      	subs	r3, r3, r0
   3514c:	9301      	str	r3, [sp, #4]
   3514e:	e7ea      	b.n	35126 <__sflush_r+0xe6>
   35150:	20400001 	.word	0x20400001

00035154 <_fflush_r>:
   35154:	690b      	ldr	r3, [r1, #16]
   35156:	b570      	push	{r4, r5, r6, lr}
   35158:	0005      	movs	r5, r0
   3515a:	000c      	movs	r4, r1
   3515c:	2b00      	cmp	r3, #0
   3515e:	d101      	bne.n	35164 <_fflush_r+0x10>
   35160:	2000      	movs	r0, #0
   35162:	bd70      	pop	{r4, r5, r6, pc}
   35164:	2800      	cmp	r0, #0
   35166:	d004      	beq.n	35172 <_fflush_r+0x1e>
   35168:	6983      	ldr	r3, [r0, #24]
   3516a:	2b00      	cmp	r3, #0
   3516c:	d101      	bne.n	35172 <_fflush_r+0x1e>
   3516e:	f000 f85f 	bl	35230 <__sinit>
   35172:	4b0b      	ldr	r3, [pc, #44]	; (351a0 <_fflush_r+0x4c>)
   35174:	429c      	cmp	r4, r3
   35176:	d109      	bne.n	3518c <_fflush_r+0x38>
   35178:	686c      	ldr	r4, [r5, #4]
   3517a:	220c      	movs	r2, #12
   3517c:	5ea3      	ldrsh	r3, [r4, r2]
   3517e:	2b00      	cmp	r3, #0
   35180:	d0ee      	beq.n	35160 <_fflush_r+0xc>
   35182:	0021      	movs	r1, r4
   35184:	0028      	movs	r0, r5
   35186:	f7ff ff5b 	bl	35040 <__sflush_r>
   3518a:	e7ea      	b.n	35162 <_fflush_r+0xe>
   3518c:	4b05      	ldr	r3, [pc, #20]	; (351a4 <_fflush_r+0x50>)
   3518e:	429c      	cmp	r4, r3
   35190:	d101      	bne.n	35196 <_fflush_r+0x42>
   35192:	68ac      	ldr	r4, [r5, #8]
   35194:	e7f1      	b.n	3517a <_fflush_r+0x26>
   35196:	4b04      	ldr	r3, [pc, #16]	; (351a8 <_fflush_r+0x54>)
   35198:	429c      	cmp	r4, r3
   3519a:	d1ee      	bne.n	3517a <_fflush_r+0x26>
   3519c:	68ec      	ldr	r4, [r5, #12]
   3519e:	e7ec      	b.n	3517a <_fflush_r+0x26>
   351a0:	00039f5c 	.word	0x00039f5c
   351a4:	00039f7c 	.word	0x00039f7c
   351a8:	00039f3c 	.word	0x00039f3c

000351ac <_cleanup_r>:
   351ac:	b510      	push	{r4, lr}
   351ae:	4902      	ldr	r1, [pc, #8]	; (351b8 <_cleanup_r+0xc>)
   351b0:	f000 f8b2 	bl	35318 <_fwalk_reent>
   351b4:	bd10      	pop	{r4, pc}
   351b6:	46c0      	nop			; (mov r8, r8)
   351b8:	00035155 	.word	0x00035155

000351bc <std.isra.0>:
   351bc:	2300      	movs	r3, #0
   351be:	b510      	push	{r4, lr}
   351c0:	0004      	movs	r4, r0
   351c2:	6003      	str	r3, [r0, #0]
   351c4:	6043      	str	r3, [r0, #4]
   351c6:	6083      	str	r3, [r0, #8]
   351c8:	8181      	strh	r1, [r0, #12]
   351ca:	6643      	str	r3, [r0, #100]	; 0x64
   351cc:	81c2      	strh	r2, [r0, #14]
   351ce:	6103      	str	r3, [r0, #16]
   351d0:	6143      	str	r3, [r0, #20]
   351d2:	6183      	str	r3, [r0, #24]
   351d4:	0019      	movs	r1, r3
   351d6:	2208      	movs	r2, #8
   351d8:	305c      	adds	r0, #92	; 0x5c
   351da:	f7ff fb60 	bl	3489e <memset>
   351de:	4b05      	ldr	r3, [pc, #20]	; (351f4 <std.isra.0+0x38>)
   351e0:	6224      	str	r4, [r4, #32]
   351e2:	6263      	str	r3, [r4, #36]	; 0x24
   351e4:	4b04      	ldr	r3, [pc, #16]	; (351f8 <std.isra.0+0x3c>)
   351e6:	62a3      	str	r3, [r4, #40]	; 0x28
   351e8:	4b04      	ldr	r3, [pc, #16]	; (351fc <std.isra.0+0x40>)
   351ea:	62e3      	str	r3, [r4, #44]	; 0x2c
   351ec:	4b04      	ldr	r3, [pc, #16]	; (35200 <std.isra.0+0x44>)
   351ee:	6323      	str	r3, [r4, #48]	; 0x30
   351f0:	bd10      	pop	{r4, pc}
   351f2:	46c0      	nop			; (mov r8, r8)
   351f4:	00035a59 	.word	0x00035a59
   351f8:	00035a81 	.word	0x00035a81
   351fc:	00035ab9 	.word	0x00035ab9
   35200:	00035ae5 	.word	0x00035ae5

00035204 <__sfmoreglue>:
   35204:	b570      	push	{r4, r5, r6, lr}
   35206:	2568      	movs	r5, #104	; 0x68
   35208:	1e4a      	subs	r2, r1, #1
   3520a:	4355      	muls	r5, r2
   3520c:	000e      	movs	r6, r1
   3520e:	0029      	movs	r1, r5
   35210:	3174      	adds	r1, #116	; 0x74
   35212:	f7ff fb97 	bl	34944 <_malloc_r>
   35216:	1e04      	subs	r4, r0, #0
   35218:	d008      	beq.n	3522c <__sfmoreglue+0x28>
   3521a:	2100      	movs	r1, #0
   3521c:	002a      	movs	r2, r5
   3521e:	6001      	str	r1, [r0, #0]
   35220:	6046      	str	r6, [r0, #4]
   35222:	300c      	adds	r0, #12
   35224:	60a0      	str	r0, [r4, #8]
   35226:	3268      	adds	r2, #104	; 0x68
   35228:	f7ff fb39 	bl	3489e <memset>
   3522c:	0020      	movs	r0, r4
   3522e:	bd70      	pop	{r4, r5, r6, pc}

00035230 <__sinit>:
   35230:	6983      	ldr	r3, [r0, #24]
   35232:	b513      	push	{r0, r1, r4, lr}
   35234:	0004      	movs	r4, r0
   35236:	2b00      	cmp	r3, #0
   35238:	d128      	bne.n	3528c <__sinit+0x5c>
   3523a:	6483      	str	r3, [r0, #72]	; 0x48
   3523c:	64c3      	str	r3, [r0, #76]	; 0x4c
   3523e:	6503      	str	r3, [r0, #80]	; 0x50
   35240:	4b13      	ldr	r3, [pc, #76]	; (35290 <__sinit+0x60>)
   35242:	4a14      	ldr	r2, [pc, #80]	; (35294 <__sinit+0x64>)
   35244:	681b      	ldr	r3, [r3, #0]
   35246:	6282      	str	r2, [r0, #40]	; 0x28
   35248:	9301      	str	r3, [sp, #4]
   3524a:	4298      	cmp	r0, r3
   3524c:	d101      	bne.n	35252 <__sinit+0x22>
   3524e:	2301      	movs	r3, #1
   35250:	6183      	str	r3, [r0, #24]
   35252:	0020      	movs	r0, r4
   35254:	f000 f820 	bl	35298 <__sfp>
   35258:	6060      	str	r0, [r4, #4]
   3525a:	0020      	movs	r0, r4
   3525c:	f000 f81c 	bl	35298 <__sfp>
   35260:	60a0      	str	r0, [r4, #8]
   35262:	0020      	movs	r0, r4
   35264:	f000 f818 	bl	35298 <__sfp>
   35268:	2200      	movs	r2, #0
   3526a:	60e0      	str	r0, [r4, #12]
   3526c:	2104      	movs	r1, #4
   3526e:	6860      	ldr	r0, [r4, #4]
   35270:	f7ff ffa4 	bl	351bc <std.isra.0>
   35274:	2201      	movs	r2, #1
   35276:	2109      	movs	r1, #9
   35278:	68a0      	ldr	r0, [r4, #8]
   3527a:	f7ff ff9f 	bl	351bc <std.isra.0>
   3527e:	2202      	movs	r2, #2
   35280:	2112      	movs	r1, #18
   35282:	68e0      	ldr	r0, [r4, #12]
   35284:	f7ff ff9a 	bl	351bc <std.isra.0>
   35288:	2301      	movs	r3, #1
   3528a:	61a3      	str	r3, [r4, #24]
   3528c:	bd13      	pop	{r0, r1, r4, pc}
   3528e:	46c0      	nop			; (mov r8, r8)
   35290:	00039f38 	.word	0x00039f38
   35294:	000351ad 	.word	0x000351ad

00035298 <__sfp>:
   35298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3529a:	4b1e      	ldr	r3, [pc, #120]	; (35314 <__sfp+0x7c>)
   3529c:	0007      	movs	r7, r0
   3529e:	681e      	ldr	r6, [r3, #0]
   352a0:	69b3      	ldr	r3, [r6, #24]
   352a2:	2b00      	cmp	r3, #0
   352a4:	d102      	bne.n	352ac <__sfp+0x14>
   352a6:	0030      	movs	r0, r6
   352a8:	f7ff ffc2 	bl	35230 <__sinit>
   352ac:	3648      	adds	r6, #72	; 0x48
   352ae:	68b4      	ldr	r4, [r6, #8]
   352b0:	6873      	ldr	r3, [r6, #4]
   352b2:	3b01      	subs	r3, #1
   352b4:	d504      	bpl.n	352c0 <__sfp+0x28>
   352b6:	6833      	ldr	r3, [r6, #0]
   352b8:	2b00      	cmp	r3, #0
   352ba:	d007      	beq.n	352cc <__sfp+0x34>
   352bc:	6836      	ldr	r6, [r6, #0]
   352be:	e7f6      	b.n	352ae <__sfp+0x16>
   352c0:	220c      	movs	r2, #12
   352c2:	5ea5      	ldrsh	r5, [r4, r2]
   352c4:	2d00      	cmp	r5, #0
   352c6:	d00d      	beq.n	352e4 <__sfp+0x4c>
   352c8:	3468      	adds	r4, #104	; 0x68
   352ca:	e7f2      	b.n	352b2 <__sfp+0x1a>
   352cc:	2104      	movs	r1, #4
   352ce:	0038      	movs	r0, r7
   352d0:	f7ff ff98 	bl	35204 <__sfmoreglue>
   352d4:	6030      	str	r0, [r6, #0]
   352d6:	2800      	cmp	r0, #0
   352d8:	d1f0      	bne.n	352bc <__sfp+0x24>
   352da:	230c      	movs	r3, #12
   352dc:	0004      	movs	r4, r0
   352de:	603b      	str	r3, [r7, #0]
   352e0:	0020      	movs	r0, r4
   352e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   352e4:	2301      	movs	r3, #1
   352e6:	0020      	movs	r0, r4
   352e8:	425b      	negs	r3, r3
   352ea:	81e3      	strh	r3, [r4, #14]
   352ec:	3302      	adds	r3, #2
   352ee:	81a3      	strh	r3, [r4, #12]
   352f0:	6665      	str	r5, [r4, #100]	; 0x64
   352f2:	6025      	str	r5, [r4, #0]
   352f4:	60a5      	str	r5, [r4, #8]
   352f6:	6065      	str	r5, [r4, #4]
   352f8:	6125      	str	r5, [r4, #16]
   352fa:	6165      	str	r5, [r4, #20]
   352fc:	61a5      	str	r5, [r4, #24]
   352fe:	2208      	movs	r2, #8
   35300:	0029      	movs	r1, r5
   35302:	305c      	adds	r0, #92	; 0x5c
   35304:	f7ff facb 	bl	3489e <memset>
   35308:	6365      	str	r5, [r4, #52]	; 0x34
   3530a:	63a5      	str	r5, [r4, #56]	; 0x38
   3530c:	64a5      	str	r5, [r4, #72]	; 0x48
   3530e:	64e5      	str	r5, [r4, #76]	; 0x4c
   35310:	e7e6      	b.n	352e0 <__sfp+0x48>
   35312:	46c0      	nop			; (mov r8, r8)
   35314:	00039f38 	.word	0x00039f38

00035318 <_fwalk_reent>:
   35318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3531a:	0004      	movs	r4, r0
   3531c:	0007      	movs	r7, r0
   3531e:	2600      	movs	r6, #0
   35320:	9101      	str	r1, [sp, #4]
   35322:	3448      	adds	r4, #72	; 0x48
   35324:	2c00      	cmp	r4, #0
   35326:	d101      	bne.n	3532c <_fwalk_reent+0x14>
   35328:	0030      	movs	r0, r6
   3532a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3532c:	6863      	ldr	r3, [r4, #4]
   3532e:	68a5      	ldr	r5, [r4, #8]
   35330:	9300      	str	r3, [sp, #0]
   35332:	9b00      	ldr	r3, [sp, #0]
   35334:	3b01      	subs	r3, #1
   35336:	9300      	str	r3, [sp, #0]
   35338:	d501      	bpl.n	3533e <_fwalk_reent+0x26>
   3533a:	6824      	ldr	r4, [r4, #0]
   3533c:	e7f2      	b.n	35324 <_fwalk_reent+0xc>
   3533e:	89ab      	ldrh	r3, [r5, #12]
   35340:	2b01      	cmp	r3, #1
   35342:	d908      	bls.n	35356 <_fwalk_reent+0x3e>
   35344:	220e      	movs	r2, #14
   35346:	5eab      	ldrsh	r3, [r5, r2]
   35348:	3301      	adds	r3, #1
   3534a:	d004      	beq.n	35356 <_fwalk_reent+0x3e>
   3534c:	0029      	movs	r1, r5
   3534e:	0038      	movs	r0, r7
   35350:	9b01      	ldr	r3, [sp, #4]
   35352:	4798      	blx	r3
   35354:	4306      	orrs	r6, r0
   35356:	3568      	adds	r5, #104	; 0x68
   35358:	e7eb      	b.n	35332 <_fwalk_reent+0x1a>

0003535a <__locale_ctype_ptr_l>:
   3535a:	30ec      	adds	r0, #236	; 0xec
   3535c:	6800      	ldr	r0, [r0, #0]
   3535e:	4770      	bx	lr

00035360 <__locale_ctype_ptr>:
   35360:	4b04      	ldr	r3, [pc, #16]	; (35374 <__locale_ctype_ptr+0x14>)
   35362:	681b      	ldr	r3, [r3, #0]
   35364:	6a1b      	ldr	r3, [r3, #32]
   35366:	2b00      	cmp	r3, #0
   35368:	d100      	bne.n	3536c <__locale_ctype_ptr+0xc>
   3536a:	4b03      	ldr	r3, [pc, #12]	; (35378 <__locale_ctype_ptr+0x18>)
   3536c:	33ec      	adds	r3, #236	; 0xec
   3536e:	6818      	ldr	r0, [r3, #0]
   35370:	4770      	bx	lr
   35372:	46c0      	nop			; (mov r8, r8)
   35374:	200000d4 	.word	0x200000d4
   35378:	20000138 	.word	0x20000138

0003537c <__swhatbuf_r>:
   3537c:	b570      	push	{r4, r5, r6, lr}
   3537e:	000e      	movs	r6, r1
   35380:	001d      	movs	r5, r3
   35382:	230e      	movs	r3, #14
   35384:	5ec9      	ldrsh	r1, [r1, r3]
   35386:	b090      	sub	sp, #64	; 0x40
   35388:	0014      	movs	r4, r2
   3538a:	2900      	cmp	r1, #0
   3538c:	da07      	bge.n	3539e <__swhatbuf_r+0x22>
   3538e:	2300      	movs	r3, #0
   35390:	602b      	str	r3, [r5, #0]
   35392:	89b3      	ldrh	r3, [r6, #12]
   35394:	061b      	lsls	r3, r3, #24
   35396:	d411      	bmi.n	353bc <__swhatbuf_r+0x40>
   35398:	2380      	movs	r3, #128	; 0x80
   3539a:	00db      	lsls	r3, r3, #3
   3539c:	e00f      	b.n	353be <__swhatbuf_r+0x42>
   3539e:	aa01      	add	r2, sp, #4
   353a0:	f000 fbe6 	bl	35b70 <_fstat_r>
   353a4:	2800      	cmp	r0, #0
   353a6:	dbf2      	blt.n	3538e <__swhatbuf_r+0x12>
   353a8:	22f0      	movs	r2, #240	; 0xf0
   353aa:	9b02      	ldr	r3, [sp, #8]
   353ac:	0212      	lsls	r2, r2, #8
   353ae:	4013      	ands	r3, r2
   353b0:	4a05      	ldr	r2, [pc, #20]	; (353c8 <__swhatbuf_r+0x4c>)
   353b2:	189b      	adds	r3, r3, r2
   353b4:	425a      	negs	r2, r3
   353b6:	4153      	adcs	r3, r2
   353b8:	602b      	str	r3, [r5, #0]
   353ba:	e7ed      	b.n	35398 <__swhatbuf_r+0x1c>
   353bc:	2340      	movs	r3, #64	; 0x40
   353be:	2000      	movs	r0, #0
   353c0:	6023      	str	r3, [r4, #0]
   353c2:	b010      	add	sp, #64	; 0x40
   353c4:	bd70      	pop	{r4, r5, r6, pc}
   353c6:	46c0      	nop			; (mov r8, r8)
   353c8:	ffffe000 	.word	0xffffe000

000353cc <__smakebuf_r>:
   353cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   353ce:	2602      	movs	r6, #2
   353d0:	898b      	ldrh	r3, [r1, #12]
   353d2:	0005      	movs	r5, r0
   353d4:	000c      	movs	r4, r1
   353d6:	4233      	tst	r3, r6
   353d8:	d006      	beq.n	353e8 <__smakebuf_r+0x1c>
   353da:	0023      	movs	r3, r4
   353dc:	3347      	adds	r3, #71	; 0x47
   353de:	6023      	str	r3, [r4, #0]
   353e0:	6123      	str	r3, [r4, #16]
   353e2:	2301      	movs	r3, #1
   353e4:	6163      	str	r3, [r4, #20]
   353e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   353e8:	ab01      	add	r3, sp, #4
   353ea:	466a      	mov	r2, sp
   353ec:	f7ff ffc6 	bl	3537c <__swhatbuf_r>
   353f0:	9900      	ldr	r1, [sp, #0]
   353f2:	0007      	movs	r7, r0
   353f4:	0028      	movs	r0, r5
   353f6:	f7ff faa5 	bl	34944 <_malloc_r>
   353fa:	2800      	cmp	r0, #0
   353fc:	d108      	bne.n	35410 <__smakebuf_r+0x44>
   353fe:	220c      	movs	r2, #12
   35400:	5ea3      	ldrsh	r3, [r4, r2]
   35402:	059a      	lsls	r2, r3, #22
   35404:	d4ef      	bmi.n	353e6 <__smakebuf_r+0x1a>
   35406:	2203      	movs	r2, #3
   35408:	4393      	bics	r3, r2
   3540a:	431e      	orrs	r6, r3
   3540c:	81a6      	strh	r6, [r4, #12]
   3540e:	e7e4      	b.n	353da <__smakebuf_r+0xe>
   35410:	4b0f      	ldr	r3, [pc, #60]	; (35450 <__smakebuf_r+0x84>)
   35412:	62ab      	str	r3, [r5, #40]	; 0x28
   35414:	2380      	movs	r3, #128	; 0x80
   35416:	89a2      	ldrh	r2, [r4, #12]
   35418:	6020      	str	r0, [r4, #0]
   3541a:	4313      	orrs	r3, r2
   3541c:	81a3      	strh	r3, [r4, #12]
   3541e:	9b00      	ldr	r3, [sp, #0]
   35420:	6120      	str	r0, [r4, #16]
   35422:	6163      	str	r3, [r4, #20]
   35424:	9b01      	ldr	r3, [sp, #4]
   35426:	2b00      	cmp	r3, #0
   35428:	d00d      	beq.n	35446 <__smakebuf_r+0x7a>
   3542a:	230e      	movs	r3, #14
   3542c:	5ee1      	ldrsh	r1, [r4, r3]
   3542e:	0028      	movs	r0, r5
   35430:	f000 fbb0 	bl	35b94 <_isatty_r>
   35434:	2800      	cmp	r0, #0
   35436:	d006      	beq.n	35446 <__smakebuf_r+0x7a>
   35438:	2203      	movs	r2, #3
   3543a:	89a3      	ldrh	r3, [r4, #12]
   3543c:	4393      	bics	r3, r2
   3543e:	001a      	movs	r2, r3
   35440:	2301      	movs	r3, #1
   35442:	4313      	orrs	r3, r2
   35444:	81a3      	strh	r3, [r4, #12]
   35446:	89a0      	ldrh	r0, [r4, #12]
   35448:	4338      	orrs	r0, r7
   3544a:	81a0      	strh	r0, [r4, #12]
   3544c:	e7cb      	b.n	353e6 <__smakebuf_r+0x1a>
   3544e:	46c0      	nop			; (mov r8, r8)
   35450:	000351ad 	.word	0x000351ad

00035454 <__ascii_mbtowc>:
   35454:	b082      	sub	sp, #8
   35456:	2900      	cmp	r1, #0
   35458:	d100      	bne.n	3545c <__ascii_mbtowc+0x8>
   3545a:	a901      	add	r1, sp, #4
   3545c:	1e10      	subs	r0, r2, #0
   3545e:	d006      	beq.n	3546e <__ascii_mbtowc+0x1a>
   35460:	2b00      	cmp	r3, #0
   35462:	d006      	beq.n	35472 <__ascii_mbtowc+0x1e>
   35464:	7813      	ldrb	r3, [r2, #0]
   35466:	600b      	str	r3, [r1, #0]
   35468:	7810      	ldrb	r0, [r2, #0]
   3546a:	1e43      	subs	r3, r0, #1
   3546c:	4198      	sbcs	r0, r3
   3546e:	b002      	add	sp, #8
   35470:	4770      	bx	lr
   35472:	2002      	movs	r0, #2
   35474:	4240      	negs	r0, r0
   35476:	e7fa      	b.n	3546e <__ascii_mbtowc+0x1a>

00035478 <__malloc_lock>:
   35478:	4770      	bx	lr

0003547a <__malloc_unlock>:
   3547a:	4770      	bx	lr

0003547c <__ssputs_r>:
   3547c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3547e:	688e      	ldr	r6, [r1, #8]
   35480:	b085      	sub	sp, #20
   35482:	0007      	movs	r7, r0
   35484:	000c      	movs	r4, r1
   35486:	9203      	str	r2, [sp, #12]
   35488:	9301      	str	r3, [sp, #4]
   3548a:	429e      	cmp	r6, r3
   3548c:	d839      	bhi.n	35502 <__ssputs_r+0x86>
   3548e:	2390      	movs	r3, #144	; 0x90
   35490:	898a      	ldrh	r2, [r1, #12]
   35492:	00db      	lsls	r3, r3, #3
   35494:	421a      	tst	r2, r3
   35496:	d034      	beq.n	35502 <__ssputs_r+0x86>
   35498:	2503      	movs	r5, #3
   3549a:	6909      	ldr	r1, [r1, #16]
   3549c:	6823      	ldr	r3, [r4, #0]
   3549e:	1a5b      	subs	r3, r3, r1
   354a0:	9302      	str	r3, [sp, #8]
   354a2:	6963      	ldr	r3, [r4, #20]
   354a4:	9802      	ldr	r0, [sp, #8]
   354a6:	435d      	muls	r5, r3
   354a8:	0feb      	lsrs	r3, r5, #31
   354aa:	195d      	adds	r5, r3, r5
   354ac:	9b01      	ldr	r3, [sp, #4]
   354ae:	106d      	asrs	r5, r5, #1
   354b0:	3301      	adds	r3, #1
   354b2:	181b      	adds	r3, r3, r0
   354b4:	42ab      	cmp	r3, r5
   354b6:	d900      	bls.n	354ba <__ssputs_r+0x3e>
   354b8:	001d      	movs	r5, r3
   354ba:	0553      	lsls	r3, r2, #21
   354bc:	d532      	bpl.n	35524 <__ssputs_r+0xa8>
   354be:	0029      	movs	r1, r5
   354c0:	0038      	movs	r0, r7
   354c2:	f7ff fa3f 	bl	34944 <_malloc_r>
   354c6:	1e06      	subs	r6, r0, #0
   354c8:	d109      	bne.n	354de <__ssputs_r+0x62>
   354ca:	230c      	movs	r3, #12
   354cc:	603b      	str	r3, [r7, #0]
   354ce:	2340      	movs	r3, #64	; 0x40
   354d0:	2001      	movs	r0, #1
   354d2:	89a2      	ldrh	r2, [r4, #12]
   354d4:	4240      	negs	r0, r0
   354d6:	4313      	orrs	r3, r2
   354d8:	81a3      	strh	r3, [r4, #12]
   354da:	b005      	add	sp, #20
   354dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   354de:	9a02      	ldr	r2, [sp, #8]
   354e0:	6921      	ldr	r1, [r4, #16]
   354e2:	f7ff f9c1 	bl	34868 <memcpy>
   354e6:	89a3      	ldrh	r3, [r4, #12]
   354e8:	4a14      	ldr	r2, [pc, #80]	; (3553c <__ssputs_r+0xc0>)
   354ea:	401a      	ands	r2, r3
   354ec:	2380      	movs	r3, #128	; 0x80
   354ee:	4313      	orrs	r3, r2
   354f0:	81a3      	strh	r3, [r4, #12]
   354f2:	9b02      	ldr	r3, [sp, #8]
   354f4:	6126      	str	r6, [r4, #16]
   354f6:	18f6      	adds	r6, r6, r3
   354f8:	6026      	str	r6, [r4, #0]
   354fa:	6165      	str	r5, [r4, #20]
   354fc:	9e01      	ldr	r6, [sp, #4]
   354fe:	1aed      	subs	r5, r5, r3
   35500:	60a5      	str	r5, [r4, #8]
   35502:	9b01      	ldr	r3, [sp, #4]
   35504:	42b3      	cmp	r3, r6
   35506:	d200      	bcs.n	3550a <__ssputs_r+0x8e>
   35508:	001e      	movs	r6, r3
   3550a:	0032      	movs	r2, r6
   3550c:	9903      	ldr	r1, [sp, #12]
   3550e:	6820      	ldr	r0, [r4, #0]
   35510:	f7ff f9b3 	bl	3487a <memmove>
   35514:	68a3      	ldr	r3, [r4, #8]
   35516:	2000      	movs	r0, #0
   35518:	1b9b      	subs	r3, r3, r6
   3551a:	60a3      	str	r3, [r4, #8]
   3551c:	6823      	ldr	r3, [r4, #0]
   3551e:	199e      	adds	r6, r3, r6
   35520:	6026      	str	r6, [r4, #0]
   35522:	e7da      	b.n	354da <__ssputs_r+0x5e>
   35524:	002a      	movs	r2, r5
   35526:	0038      	movs	r0, r7
   35528:	f000 fb65 	bl	35bf6 <_realloc_r>
   3552c:	1e06      	subs	r6, r0, #0
   3552e:	d1e0      	bne.n	354f2 <__ssputs_r+0x76>
   35530:	6921      	ldr	r1, [r4, #16]
   35532:	0038      	movs	r0, r7
   35534:	f7ff f9bc 	bl	348b0 <_free_r>
   35538:	e7c7      	b.n	354ca <__ssputs_r+0x4e>
   3553a:	46c0      	nop			; (mov r8, r8)
   3553c:	fffffb7f 	.word	0xfffffb7f

00035540 <_svfiprintf_r>:
   35540:	b5f0      	push	{r4, r5, r6, r7, lr}
   35542:	b09f      	sub	sp, #124	; 0x7c
   35544:	9002      	str	r0, [sp, #8]
   35546:	9305      	str	r3, [sp, #20]
   35548:	898b      	ldrh	r3, [r1, #12]
   3554a:	000f      	movs	r7, r1
   3554c:	0016      	movs	r6, r2
   3554e:	061b      	lsls	r3, r3, #24
   35550:	d511      	bpl.n	35576 <_svfiprintf_r+0x36>
   35552:	690b      	ldr	r3, [r1, #16]
   35554:	2b00      	cmp	r3, #0
   35556:	d10e      	bne.n	35576 <_svfiprintf_r+0x36>
   35558:	2140      	movs	r1, #64	; 0x40
   3555a:	f7ff f9f3 	bl	34944 <_malloc_r>
   3555e:	6038      	str	r0, [r7, #0]
   35560:	6138      	str	r0, [r7, #16]
   35562:	2800      	cmp	r0, #0
   35564:	d105      	bne.n	35572 <_svfiprintf_r+0x32>
   35566:	230c      	movs	r3, #12
   35568:	9a02      	ldr	r2, [sp, #8]
   3556a:	3801      	subs	r0, #1
   3556c:	6013      	str	r3, [r2, #0]
   3556e:	b01f      	add	sp, #124	; 0x7c
   35570:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35572:	2340      	movs	r3, #64	; 0x40
   35574:	617b      	str	r3, [r7, #20]
   35576:	2300      	movs	r3, #0
   35578:	ad06      	add	r5, sp, #24
   3557a:	616b      	str	r3, [r5, #20]
   3557c:	3320      	adds	r3, #32
   3557e:	766b      	strb	r3, [r5, #25]
   35580:	3310      	adds	r3, #16
   35582:	76ab      	strb	r3, [r5, #26]
   35584:	0034      	movs	r4, r6
   35586:	7823      	ldrb	r3, [r4, #0]
   35588:	2b00      	cmp	r3, #0
   3558a:	d147      	bne.n	3561c <_svfiprintf_r+0xdc>
   3558c:	1ba3      	subs	r3, r4, r6
   3558e:	9304      	str	r3, [sp, #16]
   35590:	d00d      	beq.n	355ae <_svfiprintf_r+0x6e>
   35592:	1ba3      	subs	r3, r4, r6
   35594:	0032      	movs	r2, r6
   35596:	0039      	movs	r1, r7
   35598:	9802      	ldr	r0, [sp, #8]
   3559a:	f7ff ff6f 	bl	3547c <__ssputs_r>
   3559e:	1c43      	adds	r3, r0, #1
   355a0:	d100      	bne.n	355a4 <_svfiprintf_r+0x64>
   355a2:	e0b5      	b.n	35710 <_svfiprintf_r+0x1d0>
   355a4:	696a      	ldr	r2, [r5, #20]
   355a6:	9b04      	ldr	r3, [sp, #16]
   355a8:	4694      	mov	ip, r2
   355aa:	4463      	add	r3, ip
   355ac:	616b      	str	r3, [r5, #20]
   355ae:	7823      	ldrb	r3, [r4, #0]
   355b0:	2b00      	cmp	r3, #0
   355b2:	d100      	bne.n	355b6 <_svfiprintf_r+0x76>
   355b4:	e0ac      	b.n	35710 <_svfiprintf_r+0x1d0>
   355b6:	2201      	movs	r2, #1
   355b8:	2300      	movs	r3, #0
   355ba:	4252      	negs	r2, r2
   355bc:	606a      	str	r2, [r5, #4]
   355be:	a902      	add	r1, sp, #8
   355c0:	3254      	adds	r2, #84	; 0x54
   355c2:	1852      	adds	r2, r2, r1
   355c4:	3401      	adds	r4, #1
   355c6:	602b      	str	r3, [r5, #0]
   355c8:	60eb      	str	r3, [r5, #12]
   355ca:	60ab      	str	r3, [r5, #8]
   355cc:	7013      	strb	r3, [r2, #0]
   355ce:	65ab      	str	r3, [r5, #88]	; 0x58
   355d0:	4e58      	ldr	r6, [pc, #352]	; (35734 <_svfiprintf_r+0x1f4>)
   355d2:	2205      	movs	r2, #5
   355d4:	7821      	ldrb	r1, [r4, #0]
   355d6:	0030      	movs	r0, r6
   355d8:	f000 fb02 	bl	35be0 <memchr>
   355dc:	1c62      	adds	r2, r4, #1
   355de:	2800      	cmp	r0, #0
   355e0:	d120      	bne.n	35624 <_svfiprintf_r+0xe4>
   355e2:	6829      	ldr	r1, [r5, #0]
   355e4:	06cb      	lsls	r3, r1, #27
   355e6:	d504      	bpl.n	355f2 <_svfiprintf_r+0xb2>
   355e8:	2353      	movs	r3, #83	; 0x53
   355ea:	ae02      	add	r6, sp, #8
   355ec:	3020      	adds	r0, #32
   355ee:	199b      	adds	r3, r3, r6
   355f0:	7018      	strb	r0, [r3, #0]
   355f2:	070b      	lsls	r3, r1, #28
   355f4:	d504      	bpl.n	35600 <_svfiprintf_r+0xc0>
   355f6:	2353      	movs	r3, #83	; 0x53
   355f8:	202b      	movs	r0, #43	; 0x2b
   355fa:	ae02      	add	r6, sp, #8
   355fc:	199b      	adds	r3, r3, r6
   355fe:	7018      	strb	r0, [r3, #0]
   35600:	7823      	ldrb	r3, [r4, #0]
   35602:	2b2a      	cmp	r3, #42	; 0x2a
   35604:	d016      	beq.n	35634 <_svfiprintf_r+0xf4>
   35606:	2000      	movs	r0, #0
   35608:	210a      	movs	r1, #10
   3560a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3560c:	7822      	ldrb	r2, [r4, #0]
   3560e:	3a30      	subs	r2, #48	; 0x30
   35610:	2a09      	cmp	r2, #9
   35612:	d955      	bls.n	356c0 <_svfiprintf_r+0x180>
   35614:	2800      	cmp	r0, #0
   35616:	d015      	beq.n	35644 <_svfiprintf_r+0x104>
   35618:	9309      	str	r3, [sp, #36]	; 0x24
   3561a:	e013      	b.n	35644 <_svfiprintf_r+0x104>
   3561c:	2b25      	cmp	r3, #37	; 0x25
   3561e:	d0b5      	beq.n	3558c <_svfiprintf_r+0x4c>
   35620:	3401      	adds	r4, #1
   35622:	e7b0      	b.n	35586 <_svfiprintf_r+0x46>
   35624:	2301      	movs	r3, #1
   35626:	1b80      	subs	r0, r0, r6
   35628:	4083      	lsls	r3, r0
   3562a:	6829      	ldr	r1, [r5, #0]
   3562c:	0014      	movs	r4, r2
   3562e:	430b      	orrs	r3, r1
   35630:	602b      	str	r3, [r5, #0]
   35632:	e7cd      	b.n	355d0 <_svfiprintf_r+0x90>
   35634:	9b05      	ldr	r3, [sp, #20]
   35636:	1d18      	adds	r0, r3, #4
   35638:	681b      	ldr	r3, [r3, #0]
   3563a:	9005      	str	r0, [sp, #20]
   3563c:	2b00      	cmp	r3, #0
   3563e:	db39      	blt.n	356b4 <_svfiprintf_r+0x174>
   35640:	9309      	str	r3, [sp, #36]	; 0x24
   35642:	0014      	movs	r4, r2
   35644:	7823      	ldrb	r3, [r4, #0]
   35646:	2b2e      	cmp	r3, #46	; 0x2e
   35648:	d10b      	bne.n	35662 <_svfiprintf_r+0x122>
   3564a:	7863      	ldrb	r3, [r4, #1]
   3564c:	1c62      	adds	r2, r4, #1
   3564e:	2b2a      	cmp	r3, #42	; 0x2a
   35650:	d13e      	bne.n	356d0 <_svfiprintf_r+0x190>
   35652:	9b05      	ldr	r3, [sp, #20]
   35654:	3402      	adds	r4, #2
   35656:	1d1a      	adds	r2, r3, #4
   35658:	681b      	ldr	r3, [r3, #0]
   3565a:	9205      	str	r2, [sp, #20]
   3565c:	2b00      	cmp	r3, #0
   3565e:	db34      	blt.n	356ca <_svfiprintf_r+0x18a>
   35660:	9307      	str	r3, [sp, #28]
   35662:	4e35      	ldr	r6, [pc, #212]	; (35738 <_svfiprintf_r+0x1f8>)
   35664:	7821      	ldrb	r1, [r4, #0]
   35666:	2203      	movs	r2, #3
   35668:	0030      	movs	r0, r6
   3566a:	f000 fab9 	bl	35be0 <memchr>
   3566e:	2800      	cmp	r0, #0
   35670:	d006      	beq.n	35680 <_svfiprintf_r+0x140>
   35672:	2340      	movs	r3, #64	; 0x40
   35674:	1b80      	subs	r0, r0, r6
   35676:	4083      	lsls	r3, r0
   35678:	682a      	ldr	r2, [r5, #0]
   3567a:	3401      	adds	r4, #1
   3567c:	4313      	orrs	r3, r2
   3567e:	602b      	str	r3, [r5, #0]
   35680:	7821      	ldrb	r1, [r4, #0]
   35682:	2206      	movs	r2, #6
   35684:	482d      	ldr	r0, [pc, #180]	; (3573c <_svfiprintf_r+0x1fc>)
   35686:	1c66      	adds	r6, r4, #1
   35688:	7629      	strb	r1, [r5, #24]
   3568a:	f000 faa9 	bl	35be0 <memchr>
   3568e:	2800      	cmp	r0, #0
   35690:	d046      	beq.n	35720 <_svfiprintf_r+0x1e0>
   35692:	4b2b      	ldr	r3, [pc, #172]	; (35740 <_svfiprintf_r+0x200>)
   35694:	2b00      	cmp	r3, #0
   35696:	d12f      	bne.n	356f8 <_svfiprintf_r+0x1b8>
   35698:	6829      	ldr	r1, [r5, #0]
   3569a:	9b05      	ldr	r3, [sp, #20]
   3569c:	2207      	movs	r2, #7
   3569e:	05c9      	lsls	r1, r1, #23
   356a0:	d528      	bpl.n	356f4 <_svfiprintf_r+0x1b4>
   356a2:	189b      	adds	r3, r3, r2
   356a4:	4393      	bics	r3, r2
   356a6:	3308      	adds	r3, #8
   356a8:	9305      	str	r3, [sp, #20]
   356aa:	696b      	ldr	r3, [r5, #20]
   356ac:	9a03      	ldr	r2, [sp, #12]
   356ae:	189b      	adds	r3, r3, r2
   356b0:	616b      	str	r3, [r5, #20]
   356b2:	e767      	b.n	35584 <_svfiprintf_r+0x44>
   356b4:	425b      	negs	r3, r3
   356b6:	60eb      	str	r3, [r5, #12]
   356b8:	2302      	movs	r3, #2
   356ba:	430b      	orrs	r3, r1
   356bc:	602b      	str	r3, [r5, #0]
   356be:	e7c0      	b.n	35642 <_svfiprintf_r+0x102>
   356c0:	434b      	muls	r3, r1
   356c2:	3401      	adds	r4, #1
   356c4:	189b      	adds	r3, r3, r2
   356c6:	2001      	movs	r0, #1
   356c8:	e7a0      	b.n	3560c <_svfiprintf_r+0xcc>
   356ca:	2301      	movs	r3, #1
   356cc:	425b      	negs	r3, r3
   356ce:	e7c7      	b.n	35660 <_svfiprintf_r+0x120>
   356d0:	2300      	movs	r3, #0
   356d2:	0014      	movs	r4, r2
   356d4:	200a      	movs	r0, #10
   356d6:	001a      	movs	r2, r3
   356d8:	606b      	str	r3, [r5, #4]
   356da:	7821      	ldrb	r1, [r4, #0]
   356dc:	3930      	subs	r1, #48	; 0x30
   356de:	2909      	cmp	r1, #9
   356e0:	d903      	bls.n	356ea <_svfiprintf_r+0x1aa>
   356e2:	2b00      	cmp	r3, #0
   356e4:	d0bd      	beq.n	35662 <_svfiprintf_r+0x122>
   356e6:	9207      	str	r2, [sp, #28]
   356e8:	e7bb      	b.n	35662 <_svfiprintf_r+0x122>
   356ea:	4342      	muls	r2, r0
   356ec:	3401      	adds	r4, #1
   356ee:	1852      	adds	r2, r2, r1
   356f0:	2301      	movs	r3, #1
   356f2:	e7f2      	b.n	356da <_svfiprintf_r+0x19a>
   356f4:	3307      	adds	r3, #7
   356f6:	e7d5      	b.n	356a4 <_svfiprintf_r+0x164>
   356f8:	ab05      	add	r3, sp, #20
   356fa:	9300      	str	r3, [sp, #0]
   356fc:	003a      	movs	r2, r7
   356fe:	4b11      	ldr	r3, [pc, #68]	; (35744 <_svfiprintf_r+0x204>)
   35700:	0029      	movs	r1, r5
   35702:	9802      	ldr	r0, [sp, #8]
   35704:	e000      	b.n	35708 <_svfiprintf_r+0x1c8>
   35706:	bf00      	nop
   35708:	9003      	str	r0, [sp, #12]
   3570a:	9b03      	ldr	r3, [sp, #12]
   3570c:	3301      	adds	r3, #1
   3570e:	d1cc      	bne.n	356aa <_svfiprintf_r+0x16a>
   35710:	89bb      	ldrh	r3, [r7, #12]
   35712:	980b      	ldr	r0, [sp, #44]	; 0x2c
   35714:	065b      	lsls	r3, r3, #25
   35716:	d400      	bmi.n	3571a <_svfiprintf_r+0x1da>
   35718:	e729      	b.n	3556e <_svfiprintf_r+0x2e>
   3571a:	2001      	movs	r0, #1
   3571c:	4240      	negs	r0, r0
   3571e:	e726      	b.n	3556e <_svfiprintf_r+0x2e>
   35720:	ab05      	add	r3, sp, #20
   35722:	9300      	str	r3, [sp, #0]
   35724:	003a      	movs	r2, r7
   35726:	4b07      	ldr	r3, [pc, #28]	; (35744 <_svfiprintf_r+0x204>)
   35728:	0029      	movs	r1, r5
   3572a:	9802      	ldr	r0, [sp, #8]
   3572c:	f000 f87a 	bl	35824 <_printf_i>
   35730:	e7ea      	b.n	35708 <_svfiprintf_r+0x1c8>
   35732:	46c0      	nop			; (mov r8, r8)
   35734:	00039fa6 	.word	0x00039fa6
   35738:	00039fac 	.word	0x00039fac
   3573c:	00039fb0 	.word	0x00039fb0
   35740:	00000000 	.word	0x00000000
   35744:	0003547d 	.word	0x0003547d

00035748 <_printf_common>:
   35748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3574a:	0015      	movs	r5, r2
   3574c:	9301      	str	r3, [sp, #4]
   3574e:	688a      	ldr	r2, [r1, #8]
   35750:	690b      	ldr	r3, [r1, #16]
   35752:	9000      	str	r0, [sp, #0]
   35754:	000c      	movs	r4, r1
   35756:	4293      	cmp	r3, r2
   35758:	da00      	bge.n	3575c <_printf_common+0x14>
   3575a:	0013      	movs	r3, r2
   3575c:	0022      	movs	r2, r4
   3575e:	602b      	str	r3, [r5, #0]
   35760:	3243      	adds	r2, #67	; 0x43
   35762:	7812      	ldrb	r2, [r2, #0]
   35764:	2a00      	cmp	r2, #0
   35766:	d001      	beq.n	3576c <_printf_common+0x24>
   35768:	3301      	adds	r3, #1
   3576a:	602b      	str	r3, [r5, #0]
   3576c:	6823      	ldr	r3, [r4, #0]
   3576e:	069b      	lsls	r3, r3, #26
   35770:	d502      	bpl.n	35778 <_printf_common+0x30>
   35772:	682b      	ldr	r3, [r5, #0]
   35774:	3302      	adds	r3, #2
   35776:	602b      	str	r3, [r5, #0]
   35778:	2706      	movs	r7, #6
   3577a:	6823      	ldr	r3, [r4, #0]
   3577c:	401f      	ands	r7, r3
   3577e:	d027      	beq.n	357d0 <_printf_common+0x88>
   35780:	0023      	movs	r3, r4
   35782:	3343      	adds	r3, #67	; 0x43
   35784:	781b      	ldrb	r3, [r3, #0]
   35786:	1e5a      	subs	r2, r3, #1
   35788:	4193      	sbcs	r3, r2
   3578a:	6822      	ldr	r2, [r4, #0]
   3578c:	0692      	lsls	r2, r2, #26
   3578e:	d430      	bmi.n	357f2 <_printf_common+0xaa>
   35790:	0022      	movs	r2, r4
   35792:	9901      	ldr	r1, [sp, #4]
   35794:	3243      	adds	r2, #67	; 0x43
   35796:	9800      	ldr	r0, [sp, #0]
   35798:	9e08      	ldr	r6, [sp, #32]
   3579a:	47b0      	blx	r6
   3579c:	1c43      	adds	r3, r0, #1
   3579e:	d025      	beq.n	357ec <_printf_common+0xa4>
   357a0:	2306      	movs	r3, #6
   357a2:	6820      	ldr	r0, [r4, #0]
   357a4:	682a      	ldr	r2, [r5, #0]
   357a6:	68e1      	ldr	r1, [r4, #12]
   357a8:	4003      	ands	r3, r0
   357aa:	2500      	movs	r5, #0
   357ac:	2b04      	cmp	r3, #4
   357ae:	d103      	bne.n	357b8 <_printf_common+0x70>
   357b0:	1a8d      	subs	r5, r1, r2
   357b2:	43eb      	mvns	r3, r5
   357b4:	17db      	asrs	r3, r3, #31
   357b6:	401d      	ands	r5, r3
   357b8:	68a3      	ldr	r3, [r4, #8]
   357ba:	6922      	ldr	r2, [r4, #16]
   357bc:	4293      	cmp	r3, r2
   357be:	dd01      	ble.n	357c4 <_printf_common+0x7c>
   357c0:	1a9b      	subs	r3, r3, r2
   357c2:	18ed      	adds	r5, r5, r3
   357c4:	2700      	movs	r7, #0
   357c6:	42bd      	cmp	r5, r7
   357c8:	d120      	bne.n	3580c <_printf_common+0xc4>
   357ca:	2000      	movs	r0, #0
   357cc:	e010      	b.n	357f0 <_printf_common+0xa8>
   357ce:	3701      	adds	r7, #1
   357d0:	68e3      	ldr	r3, [r4, #12]
   357d2:	682a      	ldr	r2, [r5, #0]
   357d4:	1a9b      	subs	r3, r3, r2
   357d6:	429f      	cmp	r7, r3
   357d8:	dad2      	bge.n	35780 <_printf_common+0x38>
   357da:	0022      	movs	r2, r4
   357dc:	2301      	movs	r3, #1
   357de:	3219      	adds	r2, #25
   357e0:	9901      	ldr	r1, [sp, #4]
   357e2:	9800      	ldr	r0, [sp, #0]
   357e4:	9e08      	ldr	r6, [sp, #32]
   357e6:	47b0      	blx	r6
   357e8:	1c43      	adds	r3, r0, #1
   357ea:	d1f0      	bne.n	357ce <_printf_common+0x86>
   357ec:	2001      	movs	r0, #1
   357ee:	4240      	negs	r0, r0
   357f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   357f2:	2030      	movs	r0, #48	; 0x30
   357f4:	18e1      	adds	r1, r4, r3
   357f6:	3143      	adds	r1, #67	; 0x43
   357f8:	7008      	strb	r0, [r1, #0]
   357fa:	0021      	movs	r1, r4
   357fc:	1c5a      	adds	r2, r3, #1
   357fe:	3145      	adds	r1, #69	; 0x45
   35800:	7809      	ldrb	r1, [r1, #0]
   35802:	18a2      	adds	r2, r4, r2
   35804:	3243      	adds	r2, #67	; 0x43
   35806:	3302      	adds	r3, #2
   35808:	7011      	strb	r1, [r2, #0]
   3580a:	e7c1      	b.n	35790 <_printf_common+0x48>
   3580c:	0022      	movs	r2, r4
   3580e:	2301      	movs	r3, #1
   35810:	321a      	adds	r2, #26
   35812:	9901      	ldr	r1, [sp, #4]
   35814:	9800      	ldr	r0, [sp, #0]
   35816:	9e08      	ldr	r6, [sp, #32]
   35818:	47b0      	blx	r6
   3581a:	1c43      	adds	r3, r0, #1
   3581c:	d0e6      	beq.n	357ec <_printf_common+0xa4>
   3581e:	3701      	adds	r7, #1
   35820:	e7d1      	b.n	357c6 <_printf_common+0x7e>
	...

00035824 <_printf_i>:
   35824:	b5f0      	push	{r4, r5, r6, r7, lr}
   35826:	b08b      	sub	sp, #44	; 0x2c
   35828:	9206      	str	r2, [sp, #24]
   3582a:	000a      	movs	r2, r1
   3582c:	3243      	adds	r2, #67	; 0x43
   3582e:	9307      	str	r3, [sp, #28]
   35830:	9005      	str	r0, [sp, #20]
   35832:	9204      	str	r2, [sp, #16]
   35834:	7e0a      	ldrb	r2, [r1, #24]
   35836:	000c      	movs	r4, r1
   35838:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3583a:	2a6e      	cmp	r2, #110	; 0x6e
   3583c:	d100      	bne.n	35840 <_printf_i+0x1c>
   3583e:	e08f      	b.n	35960 <_printf_i+0x13c>
   35840:	d817      	bhi.n	35872 <_printf_i+0x4e>
   35842:	2a63      	cmp	r2, #99	; 0x63
   35844:	d02c      	beq.n	358a0 <_printf_i+0x7c>
   35846:	d808      	bhi.n	3585a <_printf_i+0x36>
   35848:	2a00      	cmp	r2, #0
   3584a:	d100      	bne.n	3584e <_printf_i+0x2a>
   3584c:	e099      	b.n	35982 <_printf_i+0x15e>
   3584e:	2a58      	cmp	r2, #88	; 0x58
   35850:	d054      	beq.n	358fc <_printf_i+0xd8>
   35852:	0026      	movs	r6, r4
   35854:	3642      	adds	r6, #66	; 0x42
   35856:	7032      	strb	r2, [r6, #0]
   35858:	e029      	b.n	358ae <_printf_i+0x8a>
   3585a:	2a64      	cmp	r2, #100	; 0x64
   3585c:	d001      	beq.n	35862 <_printf_i+0x3e>
   3585e:	2a69      	cmp	r2, #105	; 0x69
   35860:	d1f7      	bne.n	35852 <_printf_i+0x2e>
   35862:	6821      	ldr	r1, [r4, #0]
   35864:	681a      	ldr	r2, [r3, #0]
   35866:	0608      	lsls	r0, r1, #24
   35868:	d523      	bpl.n	358b2 <_printf_i+0x8e>
   3586a:	1d11      	adds	r1, r2, #4
   3586c:	6019      	str	r1, [r3, #0]
   3586e:	6815      	ldr	r5, [r2, #0]
   35870:	e025      	b.n	358be <_printf_i+0x9a>
   35872:	2a73      	cmp	r2, #115	; 0x73
   35874:	d100      	bne.n	35878 <_printf_i+0x54>
   35876:	e088      	b.n	3598a <_printf_i+0x166>
   35878:	d808      	bhi.n	3588c <_printf_i+0x68>
   3587a:	2a6f      	cmp	r2, #111	; 0x6f
   3587c:	d029      	beq.n	358d2 <_printf_i+0xae>
   3587e:	2a70      	cmp	r2, #112	; 0x70
   35880:	d1e7      	bne.n	35852 <_printf_i+0x2e>
   35882:	2220      	movs	r2, #32
   35884:	6809      	ldr	r1, [r1, #0]
   35886:	430a      	orrs	r2, r1
   35888:	6022      	str	r2, [r4, #0]
   3588a:	e003      	b.n	35894 <_printf_i+0x70>
   3588c:	2a75      	cmp	r2, #117	; 0x75
   3588e:	d020      	beq.n	358d2 <_printf_i+0xae>
   35890:	2a78      	cmp	r2, #120	; 0x78
   35892:	d1de      	bne.n	35852 <_printf_i+0x2e>
   35894:	0022      	movs	r2, r4
   35896:	2178      	movs	r1, #120	; 0x78
   35898:	3245      	adds	r2, #69	; 0x45
   3589a:	7011      	strb	r1, [r2, #0]
   3589c:	4a6c      	ldr	r2, [pc, #432]	; (35a50 <_printf_i+0x22c>)
   3589e:	e030      	b.n	35902 <_printf_i+0xde>
   358a0:	000e      	movs	r6, r1
   358a2:	681a      	ldr	r2, [r3, #0]
   358a4:	3642      	adds	r6, #66	; 0x42
   358a6:	1d11      	adds	r1, r2, #4
   358a8:	6019      	str	r1, [r3, #0]
   358aa:	6813      	ldr	r3, [r2, #0]
   358ac:	7033      	strb	r3, [r6, #0]
   358ae:	2301      	movs	r3, #1
   358b0:	e079      	b.n	359a6 <_printf_i+0x182>
   358b2:	0649      	lsls	r1, r1, #25
   358b4:	d5d9      	bpl.n	3586a <_printf_i+0x46>
   358b6:	1d11      	adds	r1, r2, #4
   358b8:	6019      	str	r1, [r3, #0]
   358ba:	2300      	movs	r3, #0
   358bc:	5ed5      	ldrsh	r5, [r2, r3]
   358be:	2d00      	cmp	r5, #0
   358c0:	da03      	bge.n	358ca <_printf_i+0xa6>
   358c2:	232d      	movs	r3, #45	; 0x2d
   358c4:	9a04      	ldr	r2, [sp, #16]
   358c6:	426d      	negs	r5, r5
   358c8:	7013      	strb	r3, [r2, #0]
   358ca:	4b62      	ldr	r3, [pc, #392]	; (35a54 <_printf_i+0x230>)
   358cc:	270a      	movs	r7, #10
   358ce:	9303      	str	r3, [sp, #12]
   358d0:	e02f      	b.n	35932 <_printf_i+0x10e>
   358d2:	6820      	ldr	r0, [r4, #0]
   358d4:	6819      	ldr	r1, [r3, #0]
   358d6:	0605      	lsls	r5, r0, #24
   358d8:	d503      	bpl.n	358e2 <_printf_i+0xbe>
   358da:	1d08      	adds	r0, r1, #4
   358dc:	6018      	str	r0, [r3, #0]
   358de:	680d      	ldr	r5, [r1, #0]
   358e0:	e005      	b.n	358ee <_printf_i+0xca>
   358e2:	0640      	lsls	r0, r0, #25
   358e4:	d5f9      	bpl.n	358da <_printf_i+0xb6>
   358e6:	680d      	ldr	r5, [r1, #0]
   358e8:	1d08      	adds	r0, r1, #4
   358ea:	6018      	str	r0, [r3, #0]
   358ec:	b2ad      	uxth	r5, r5
   358ee:	4b59      	ldr	r3, [pc, #356]	; (35a54 <_printf_i+0x230>)
   358f0:	2708      	movs	r7, #8
   358f2:	9303      	str	r3, [sp, #12]
   358f4:	2a6f      	cmp	r2, #111	; 0x6f
   358f6:	d018      	beq.n	3592a <_printf_i+0x106>
   358f8:	270a      	movs	r7, #10
   358fa:	e016      	b.n	3592a <_printf_i+0x106>
   358fc:	3145      	adds	r1, #69	; 0x45
   358fe:	700a      	strb	r2, [r1, #0]
   35900:	4a54      	ldr	r2, [pc, #336]	; (35a54 <_printf_i+0x230>)
   35902:	9203      	str	r2, [sp, #12]
   35904:	681a      	ldr	r2, [r3, #0]
   35906:	6821      	ldr	r1, [r4, #0]
   35908:	1d10      	adds	r0, r2, #4
   3590a:	6018      	str	r0, [r3, #0]
   3590c:	6815      	ldr	r5, [r2, #0]
   3590e:	0608      	lsls	r0, r1, #24
   35910:	d522      	bpl.n	35958 <_printf_i+0x134>
   35912:	07cb      	lsls	r3, r1, #31
   35914:	d502      	bpl.n	3591c <_printf_i+0xf8>
   35916:	2320      	movs	r3, #32
   35918:	4319      	orrs	r1, r3
   3591a:	6021      	str	r1, [r4, #0]
   3591c:	2710      	movs	r7, #16
   3591e:	2d00      	cmp	r5, #0
   35920:	d103      	bne.n	3592a <_printf_i+0x106>
   35922:	2320      	movs	r3, #32
   35924:	6822      	ldr	r2, [r4, #0]
   35926:	439a      	bics	r2, r3
   35928:	6022      	str	r2, [r4, #0]
   3592a:	0023      	movs	r3, r4
   3592c:	2200      	movs	r2, #0
   3592e:	3343      	adds	r3, #67	; 0x43
   35930:	701a      	strb	r2, [r3, #0]
   35932:	6863      	ldr	r3, [r4, #4]
   35934:	60a3      	str	r3, [r4, #8]
   35936:	2b00      	cmp	r3, #0
   35938:	db5c      	blt.n	359f4 <_printf_i+0x1d0>
   3593a:	2204      	movs	r2, #4
   3593c:	6821      	ldr	r1, [r4, #0]
   3593e:	4391      	bics	r1, r2
   35940:	6021      	str	r1, [r4, #0]
   35942:	2d00      	cmp	r5, #0
   35944:	d158      	bne.n	359f8 <_printf_i+0x1d4>
   35946:	9e04      	ldr	r6, [sp, #16]
   35948:	2b00      	cmp	r3, #0
   3594a:	d064      	beq.n	35a16 <_printf_i+0x1f2>
   3594c:	0026      	movs	r6, r4
   3594e:	9b03      	ldr	r3, [sp, #12]
   35950:	3642      	adds	r6, #66	; 0x42
   35952:	781b      	ldrb	r3, [r3, #0]
   35954:	7033      	strb	r3, [r6, #0]
   35956:	e05e      	b.n	35a16 <_printf_i+0x1f2>
   35958:	0648      	lsls	r0, r1, #25
   3595a:	d5da      	bpl.n	35912 <_printf_i+0xee>
   3595c:	b2ad      	uxth	r5, r5
   3595e:	e7d8      	b.n	35912 <_printf_i+0xee>
   35960:	6809      	ldr	r1, [r1, #0]
   35962:	681a      	ldr	r2, [r3, #0]
   35964:	0608      	lsls	r0, r1, #24
   35966:	d505      	bpl.n	35974 <_printf_i+0x150>
   35968:	1d11      	adds	r1, r2, #4
   3596a:	6019      	str	r1, [r3, #0]
   3596c:	6813      	ldr	r3, [r2, #0]
   3596e:	6962      	ldr	r2, [r4, #20]
   35970:	601a      	str	r2, [r3, #0]
   35972:	e006      	b.n	35982 <_printf_i+0x15e>
   35974:	0649      	lsls	r1, r1, #25
   35976:	d5f7      	bpl.n	35968 <_printf_i+0x144>
   35978:	1d11      	adds	r1, r2, #4
   3597a:	6019      	str	r1, [r3, #0]
   3597c:	6813      	ldr	r3, [r2, #0]
   3597e:	8aa2      	ldrh	r2, [r4, #20]
   35980:	801a      	strh	r2, [r3, #0]
   35982:	2300      	movs	r3, #0
   35984:	9e04      	ldr	r6, [sp, #16]
   35986:	6123      	str	r3, [r4, #16]
   35988:	e054      	b.n	35a34 <_printf_i+0x210>
   3598a:	681a      	ldr	r2, [r3, #0]
   3598c:	1d11      	adds	r1, r2, #4
   3598e:	6019      	str	r1, [r3, #0]
   35990:	6816      	ldr	r6, [r2, #0]
   35992:	2100      	movs	r1, #0
   35994:	6862      	ldr	r2, [r4, #4]
   35996:	0030      	movs	r0, r6
   35998:	f000 f922 	bl	35be0 <memchr>
   3599c:	2800      	cmp	r0, #0
   3599e:	d001      	beq.n	359a4 <_printf_i+0x180>
   359a0:	1b80      	subs	r0, r0, r6
   359a2:	6060      	str	r0, [r4, #4]
   359a4:	6863      	ldr	r3, [r4, #4]
   359a6:	6123      	str	r3, [r4, #16]
   359a8:	2300      	movs	r3, #0
   359aa:	9a04      	ldr	r2, [sp, #16]
   359ac:	7013      	strb	r3, [r2, #0]
   359ae:	e041      	b.n	35a34 <_printf_i+0x210>
   359b0:	6923      	ldr	r3, [r4, #16]
   359b2:	0032      	movs	r2, r6
   359b4:	9906      	ldr	r1, [sp, #24]
   359b6:	9805      	ldr	r0, [sp, #20]
   359b8:	9d07      	ldr	r5, [sp, #28]
   359ba:	47a8      	blx	r5
   359bc:	1c43      	adds	r3, r0, #1
   359be:	d043      	beq.n	35a48 <_printf_i+0x224>
   359c0:	6823      	ldr	r3, [r4, #0]
   359c2:	2500      	movs	r5, #0
   359c4:	079b      	lsls	r3, r3, #30
   359c6:	d40f      	bmi.n	359e8 <_printf_i+0x1c4>
   359c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   359ca:	68e0      	ldr	r0, [r4, #12]
   359cc:	4298      	cmp	r0, r3
   359ce:	da3d      	bge.n	35a4c <_printf_i+0x228>
   359d0:	0018      	movs	r0, r3
   359d2:	e03b      	b.n	35a4c <_printf_i+0x228>
   359d4:	0022      	movs	r2, r4
   359d6:	2301      	movs	r3, #1
   359d8:	3219      	adds	r2, #25
   359da:	9906      	ldr	r1, [sp, #24]
   359dc:	9805      	ldr	r0, [sp, #20]
   359de:	9e07      	ldr	r6, [sp, #28]
   359e0:	47b0      	blx	r6
   359e2:	1c43      	adds	r3, r0, #1
   359e4:	d030      	beq.n	35a48 <_printf_i+0x224>
   359e6:	3501      	adds	r5, #1
   359e8:	68e3      	ldr	r3, [r4, #12]
   359ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
   359ec:	1a9b      	subs	r3, r3, r2
   359ee:	429d      	cmp	r5, r3
   359f0:	dbf0      	blt.n	359d4 <_printf_i+0x1b0>
   359f2:	e7e9      	b.n	359c8 <_printf_i+0x1a4>
   359f4:	2d00      	cmp	r5, #0
   359f6:	d0a9      	beq.n	3594c <_printf_i+0x128>
   359f8:	9e04      	ldr	r6, [sp, #16]
   359fa:	0028      	movs	r0, r5
   359fc:	0039      	movs	r1, r7
   359fe:	f7fc ffe7 	bl	329d0 <__aeabi_uidivmod>
   35a02:	9b03      	ldr	r3, [sp, #12]
   35a04:	3e01      	subs	r6, #1
   35a06:	5c5b      	ldrb	r3, [r3, r1]
   35a08:	0028      	movs	r0, r5
   35a0a:	7033      	strb	r3, [r6, #0]
   35a0c:	0039      	movs	r1, r7
   35a0e:	f7fc ff59 	bl	328c4 <__udivsi3>
   35a12:	1e05      	subs	r5, r0, #0
   35a14:	d1f1      	bne.n	359fa <_printf_i+0x1d6>
   35a16:	2f08      	cmp	r7, #8
   35a18:	d109      	bne.n	35a2e <_printf_i+0x20a>
   35a1a:	6823      	ldr	r3, [r4, #0]
   35a1c:	07db      	lsls	r3, r3, #31
   35a1e:	d506      	bpl.n	35a2e <_printf_i+0x20a>
   35a20:	6863      	ldr	r3, [r4, #4]
   35a22:	6922      	ldr	r2, [r4, #16]
   35a24:	4293      	cmp	r3, r2
   35a26:	dc02      	bgt.n	35a2e <_printf_i+0x20a>
   35a28:	2330      	movs	r3, #48	; 0x30
   35a2a:	3e01      	subs	r6, #1
   35a2c:	7033      	strb	r3, [r6, #0]
   35a2e:	9b04      	ldr	r3, [sp, #16]
   35a30:	1b9b      	subs	r3, r3, r6
   35a32:	6123      	str	r3, [r4, #16]
   35a34:	9b07      	ldr	r3, [sp, #28]
   35a36:	aa09      	add	r2, sp, #36	; 0x24
   35a38:	9300      	str	r3, [sp, #0]
   35a3a:	0021      	movs	r1, r4
   35a3c:	9b06      	ldr	r3, [sp, #24]
   35a3e:	9805      	ldr	r0, [sp, #20]
   35a40:	f7ff fe82 	bl	35748 <_printf_common>
   35a44:	1c43      	adds	r3, r0, #1
   35a46:	d1b3      	bne.n	359b0 <_printf_i+0x18c>
   35a48:	2001      	movs	r0, #1
   35a4a:	4240      	negs	r0, r0
   35a4c:	b00b      	add	sp, #44	; 0x2c
   35a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35a50:	00039fc8 	.word	0x00039fc8
   35a54:	00039fb7 	.word	0x00039fb7

00035a58 <__sread>:
   35a58:	b570      	push	{r4, r5, r6, lr}
   35a5a:	000c      	movs	r4, r1
   35a5c:	250e      	movs	r5, #14
   35a5e:	5f49      	ldrsh	r1, [r1, r5]
   35a60:	f000 f8f0 	bl	35c44 <_read_r>
   35a64:	2800      	cmp	r0, #0
   35a66:	db03      	blt.n	35a70 <__sread+0x18>
   35a68:	6d63      	ldr	r3, [r4, #84]	; 0x54
   35a6a:	181b      	adds	r3, r3, r0
   35a6c:	6563      	str	r3, [r4, #84]	; 0x54
   35a6e:	bd70      	pop	{r4, r5, r6, pc}
   35a70:	89a3      	ldrh	r3, [r4, #12]
   35a72:	4a02      	ldr	r2, [pc, #8]	; (35a7c <__sread+0x24>)
   35a74:	4013      	ands	r3, r2
   35a76:	81a3      	strh	r3, [r4, #12]
   35a78:	e7f9      	b.n	35a6e <__sread+0x16>
   35a7a:	46c0      	nop			; (mov r8, r8)
   35a7c:	ffffefff 	.word	0xffffefff

00035a80 <__swrite>:
   35a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35a82:	001f      	movs	r7, r3
   35a84:	898b      	ldrh	r3, [r1, #12]
   35a86:	0005      	movs	r5, r0
   35a88:	000c      	movs	r4, r1
   35a8a:	0016      	movs	r6, r2
   35a8c:	05db      	lsls	r3, r3, #23
   35a8e:	d505      	bpl.n	35a9c <__swrite+0x1c>
   35a90:	230e      	movs	r3, #14
   35a92:	5ec9      	ldrsh	r1, [r1, r3]
   35a94:	2200      	movs	r2, #0
   35a96:	2302      	movs	r3, #2
   35a98:	f000 f88e 	bl	35bb8 <_lseek_r>
   35a9c:	89a3      	ldrh	r3, [r4, #12]
   35a9e:	4a05      	ldr	r2, [pc, #20]	; (35ab4 <__swrite+0x34>)
   35aa0:	0028      	movs	r0, r5
   35aa2:	4013      	ands	r3, r2
   35aa4:	81a3      	strh	r3, [r4, #12]
   35aa6:	0032      	movs	r2, r6
   35aa8:	230e      	movs	r3, #14
   35aaa:	5ee1      	ldrsh	r1, [r4, r3]
   35aac:	003b      	movs	r3, r7
   35aae:	f000 f839 	bl	35b24 <_write_r>
   35ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35ab4:	ffffefff 	.word	0xffffefff

00035ab8 <__sseek>:
   35ab8:	b570      	push	{r4, r5, r6, lr}
   35aba:	000c      	movs	r4, r1
   35abc:	250e      	movs	r5, #14
   35abe:	5f49      	ldrsh	r1, [r1, r5]
   35ac0:	f000 f87a 	bl	35bb8 <_lseek_r>
   35ac4:	89a3      	ldrh	r3, [r4, #12]
   35ac6:	1c42      	adds	r2, r0, #1
   35ac8:	d103      	bne.n	35ad2 <__sseek+0x1a>
   35aca:	4a05      	ldr	r2, [pc, #20]	; (35ae0 <__sseek+0x28>)
   35acc:	4013      	ands	r3, r2
   35ace:	81a3      	strh	r3, [r4, #12]
   35ad0:	bd70      	pop	{r4, r5, r6, pc}
   35ad2:	2280      	movs	r2, #128	; 0x80
   35ad4:	0152      	lsls	r2, r2, #5
   35ad6:	4313      	orrs	r3, r2
   35ad8:	81a3      	strh	r3, [r4, #12]
   35ada:	6560      	str	r0, [r4, #84]	; 0x54
   35adc:	e7f8      	b.n	35ad0 <__sseek+0x18>
   35ade:	46c0      	nop			; (mov r8, r8)
   35ae0:	ffffefff 	.word	0xffffefff

00035ae4 <__sclose>:
   35ae4:	b510      	push	{r4, lr}
   35ae6:	230e      	movs	r3, #14
   35ae8:	5ec9      	ldrsh	r1, [r1, r3]
   35aea:	f000 f82f 	bl	35b4c <_close_r>
   35aee:	bd10      	pop	{r4, pc}

00035af0 <strchr>:
   35af0:	b2c9      	uxtb	r1, r1
   35af2:	7803      	ldrb	r3, [r0, #0]
   35af4:	2b00      	cmp	r3, #0
   35af6:	d004      	beq.n	35b02 <strchr+0x12>
   35af8:	4299      	cmp	r1, r3
   35afa:	d100      	bne.n	35afe <strchr+0xe>
   35afc:	4770      	bx	lr
   35afe:	3001      	adds	r0, #1
   35b00:	e7f7      	b.n	35af2 <strchr+0x2>
   35b02:	424b      	negs	r3, r1
   35b04:	4159      	adcs	r1, r3
   35b06:	4249      	negs	r1, r1
   35b08:	4008      	ands	r0, r1
   35b0a:	e7f7      	b.n	35afc <strchr+0xc>

00035b0c <__ascii_wctomb>:
   35b0c:	1e0b      	subs	r3, r1, #0
   35b0e:	d004      	beq.n	35b1a <__ascii_wctomb+0xe>
   35b10:	2aff      	cmp	r2, #255	; 0xff
   35b12:	d904      	bls.n	35b1e <__ascii_wctomb+0x12>
   35b14:	238a      	movs	r3, #138	; 0x8a
   35b16:	6003      	str	r3, [r0, #0]
   35b18:	3b8b      	subs	r3, #139	; 0x8b
   35b1a:	0018      	movs	r0, r3
   35b1c:	4770      	bx	lr
   35b1e:	700a      	strb	r2, [r1, #0]
   35b20:	2301      	movs	r3, #1
   35b22:	e7fa      	b.n	35b1a <__ascii_wctomb+0xe>

00035b24 <_write_r>:
   35b24:	b570      	push	{r4, r5, r6, lr}
   35b26:	0005      	movs	r5, r0
   35b28:	0008      	movs	r0, r1
   35b2a:	0011      	movs	r1, r2
   35b2c:	2200      	movs	r2, #0
   35b2e:	4c06      	ldr	r4, [pc, #24]	; (35b48 <_write_r+0x24>)
   35b30:	6022      	str	r2, [r4, #0]
   35b32:	001a      	movs	r2, r3
   35b34:	f7f5 fa52 	bl	2afdc <_write>
   35b38:	1c43      	adds	r3, r0, #1
   35b3a:	d103      	bne.n	35b44 <_write_r+0x20>
   35b3c:	6823      	ldr	r3, [r4, #0]
   35b3e:	2b00      	cmp	r3, #0
   35b40:	d000      	beq.n	35b44 <_write_r+0x20>
   35b42:	602b      	str	r3, [r5, #0]
   35b44:	bd70      	pop	{r4, r5, r6, pc}
   35b46:	46c0      	nop			; (mov r8, r8)
   35b48:	2000581c 	.word	0x2000581c

00035b4c <_close_r>:
   35b4c:	2300      	movs	r3, #0
   35b4e:	b570      	push	{r4, r5, r6, lr}
   35b50:	4c06      	ldr	r4, [pc, #24]	; (35b6c <_close_r+0x20>)
   35b52:	0005      	movs	r5, r0
   35b54:	0008      	movs	r0, r1
   35b56:	6023      	str	r3, [r4, #0]
   35b58:	f7f5 fa94 	bl	2b084 <_close>
   35b5c:	1c43      	adds	r3, r0, #1
   35b5e:	d103      	bne.n	35b68 <_close_r+0x1c>
   35b60:	6823      	ldr	r3, [r4, #0]
   35b62:	2b00      	cmp	r3, #0
   35b64:	d000      	beq.n	35b68 <_close_r+0x1c>
   35b66:	602b      	str	r3, [r5, #0]
   35b68:	bd70      	pop	{r4, r5, r6, pc}
   35b6a:	46c0      	nop			; (mov r8, r8)
   35b6c:	2000581c 	.word	0x2000581c

00035b70 <_fstat_r>:
   35b70:	2300      	movs	r3, #0
   35b72:	b570      	push	{r4, r5, r6, lr}
   35b74:	4c06      	ldr	r4, [pc, #24]	; (35b90 <_fstat_r+0x20>)
   35b76:	0005      	movs	r5, r0
   35b78:	0008      	movs	r0, r1
   35b7a:	0011      	movs	r1, r2
   35b7c:	6023      	str	r3, [r4, #0]
   35b7e:	f7f5 fa8b 	bl	2b098 <_fstat>
   35b82:	1c43      	adds	r3, r0, #1
   35b84:	d103      	bne.n	35b8e <_fstat_r+0x1e>
   35b86:	6823      	ldr	r3, [r4, #0]
   35b88:	2b00      	cmp	r3, #0
   35b8a:	d000      	beq.n	35b8e <_fstat_r+0x1e>
   35b8c:	602b      	str	r3, [r5, #0]
   35b8e:	bd70      	pop	{r4, r5, r6, pc}
   35b90:	2000581c 	.word	0x2000581c

00035b94 <_isatty_r>:
   35b94:	2300      	movs	r3, #0
   35b96:	b570      	push	{r4, r5, r6, lr}
   35b98:	4c06      	ldr	r4, [pc, #24]	; (35bb4 <_isatty_r+0x20>)
   35b9a:	0005      	movs	r5, r0
   35b9c:	0008      	movs	r0, r1
   35b9e:	6023      	str	r3, [r4, #0]
   35ba0:	f7f5 fa88 	bl	2b0b4 <_isatty>
   35ba4:	1c43      	adds	r3, r0, #1
   35ba6:	d103      	bne.n	35bb0 <_isatty_r+0x1c>
   35ba8:	6823      	ldr	r3, [r4, #0]
   35baa:	2b00      	cmp	r3, #0
   35bac:	d000      	beq.n	35bb0 <_isatty_r+0x1c>
   35bae:	602b      	str	r3, [r5, #0]
   35bb0:	bd70      	pop	{r4, r5, r6, pc}
   35bb2:	46c0      	nop			; (mov r8, r8)
   35bb4:	2000581c 	.word	0x2000581c

00035bb8 <_lseek_r>:
   35bb8:	b570      	push	{r4, r5, r6, lr}
   35bba:	0005      	movs	r5, r0
   35bbc:	0008      	movs	r0, r1
   35bbe:	0011      	movs	r1, r2
   35bc0:	2200      	movs	r2, #0
   35bc2:	4c06      	ldr	r4, [pc, #24]	; (35bdc <_lseek_r+0x24>)
   35bc4:	6022      	str	r2, [r4, #0]
   35bc6:	001a      	movs	r2, r3
   35bc8:	f7f5 fa7d 	bl	2b0c6 <_lseek>
   35bcc:	1c43      	adds	r3, r0, #1
   35bce:	d103      	bne.n	35bd8 <_lseek_r+0x20>
   35bd0:	6823      	ldr	r3, [r4, #0]
   35bd2:	2b00      	cmp	r3, #0
   35bd4:	d000      	beq.n	35bd8 <_lseek_r+0x20>
   35bd6:	602b      	str	r3, [r5, #0]
   35bd8:	bd70      	pop	{r4, r5, r6, pc}
   35bda:	46c0      	nop			; (mov r8, r8)
   35bdc:	2000581c 	.word	0x2000581c

00035be0 <memchr>:
   35be0:	b2c9      	uxtb	r1, r1
   35be2:	1882      	adds	r2, r0, r2
   35be4:	4290      	cmp	r0, r2
   35be6:	d101      	bne.n	35bec <memchr+0xc>
   35be8:	2000      	movs	r0, #0
   35bea:	4770      	bx	lr
   35bec:	7803      	ldrb	r3, [r0, #0]
   35bee:	428b      	cmp	r3, r1
   35bf0:	d0fb      	beq.n	35bea <memchr+0xa>
   35bf2:	3001      	adds	r0, #1
   35bf4:	e7f6      	b.n	35be4 <memchr+0x4>

00035bf6 <_realloc_r>:
   35bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35bf8:	0007      	movs	r7, r0
   35bfa:	000d      	movs	r5, r1
   35bfc:	0016      	movs	r6, r2
   35bfe:	2900      	cmp	r1, #0
   35c00:	d105      	bne.n	35c0e <_realloc_r+0x18>
   35c02:	0011      	movs	r1, r2
   35c04:	f7fe fe9e 	bl	34944 <_malloc_r>
   35c08:	0004      	movs	r4, r0
   35c0a:	0020      	movs	r0, r4
   35c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35c0e:	2a00      	cmp	r2, #0
   35c10:	d103      	bne.n	35c1a <_realloc_r+0x24>
   35c12:	f7fe fe4d 	bl	348b0 <_free_r>
   35c16:	0034      	movs	r4, r6
   35c18:	e7f7      	b.n	35c0a <_realloc_r+0x14>
   35c1a:	f000 f827 	bl	35c6c <_malloc_usable_size_r>
   35c1e:	002c      	movs	r4, r5
   35c20:	4286      	cmp	r6, r0
   35c22:	d9f2      	bls.n	35c0a <_realloc_r+0x14>
   35c24:	0031      	movs	r1, r6
   35c26:	0038      	movs	r0, r7
   35c28:	f7fe fe8c 	bl	34944 <_malloc_r>
   35c2c:	1e04      	subs	r4, r0, #0
   35c2e:	d0ec      	beq.n	35c0a <_realloc_r+0x14>
   35c30:	0029      	movs	r1, r5
   35c32:	0032      	movs	r2, r6
   35c34:	f7fe fe18 	bl	34868 <memcpy>
   35c38:	0029      	movs	r1, r5
   35c3a:	0038      	movs	r0, r7
   35c3c:	f7fe fe38 	bl	348b0 <_free_r>
   35c40:	e7e3      	b.n	35c0a <_realloc_r+0x14>
	...

00035c44 <_read_r>:
   35c44:	b570      	push	{r4, r5, r6, lr}
   35c46:	0005      	movs	r5, r0
   35c48:	0008      	movs	r0, r1
   35c4a:	0011      	movs	r1, r2
   35c4c:	2200      	movs	r2, #0
   35c4e:	4c06      	ldr	r4, [pc, #24]	; (35c68 <_read_r+0x24>)
   35c50:	6022      	str	r2, [r4, #0]
   35c52:	001a      	movs	r2, r3
   35c54:	f7f5 f998 	bl	2af88 <_read>
   35c58:	1c43      	adds	r3, r0, #1
   35c5a:	d103      	bne.n	35c64 <_read_r+0x20>
   35c5c:	6823      	ldr	r3, [r4, #0]
   35c5e:	2b00      	cmp	r3, #0
   35c60:	d000      	beq.n	35c64 <_read_r+0x20>
   35c62:	602b      	str	r3, [r5, #0]
   35c64:	bd70      	pop	{r4, r5, r6, pc}
   35c66:	46c0      	nop			; (mov r8, r8)
   35c68:	2000581c 	.word	0x2000581c

00035c6c <_malloc_usable_size_r>:
   35c6c:	1f0b      	subs	r3, r1, #4
   35c6e:	681b      	ldr	r3, [r3, #0]
   35c70:	1f18      	subs	r0, r3, #4
   35c72:	2b00      	cmp	r3, #0
   35c74:	da01      	bge.n	35c7a <_malloc_usable_size_r+0xe>
   35c76:	580b      	ldr	r3, [r1, r0]
   35c78:	18c0      	adds	r0, r0, r3
   35c7a:	4770      	bx	lr

00035c7c <pcWelcomeMessage>:
   35c7c:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   35c8c:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   35c9c:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   35cac:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   35cbc:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   35ccc:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   35cdc:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   35cec:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   35cfc:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   35d0c:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   35d1c:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   35d2c:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   35d3c:	0a0d 0000 656c 0064 656c 2064 4e5b 6f65     ....led.led [Neo
   35d4c:	754e 5d6d 5b20 656b 6e79 6d75 5b5d 5d52     Num] [keynum][R]
   35d5c:	475b 5b5d 5d42 203a 6553 7374 7420 6568     [G][B]: Sets the
   35d6c:	6720 7669 6e65 4c20 4445 7420 206f 6874      given LED to th
   35d7c:	2065 6967 6576 206e 2c52 2c47 2042 6176     e given R,G,B va
   35d8c:	756c 7365 0d2e 000a 6873 6374 0000 0000     lues....shtc....
   35d9c:	6873 6374 203a 6567 2074 6574 706d 6120     shtc: get temp a
   35dac:	646e 6820 6d75 6469 7469 0d79 000a 0000     nd humidity.....
   35dbc:	3269 0063 3269 3a63 5320 6163 736e 4920     i2c.i2c: Scans I
   35dcc:	4332 6220 7375 0a0d 0000 0000 6c63 0073     2C bus......cls.
   35ddc:	6c63 3a73 4320 656c 7261 2073 6874 2065     cls: Clears the 
   35dec:	6574 6d72 6e69 6c61 7320 7263 6565 0d6e     terminal screen.
   35dfc:	000a 0000 6f43 6c75 2064 6f6e 2074 6c61     ....Could not al
   35e0c:	6f6c 6163 6574 7320 6d65 7061 6f68 6572     locate semaphore
   35e1c:	0a0d 0000 0a0d 0000 616f 0000 6325 325b     ........oa..%c[2
   35e2c:	0d4b 003e 2008 0008 6341 6563 656c 6172     K.>.. ..Accelera
   35e3c:	6974 6e6f 5b20 676d 3a5d 2058 6425 5909     tion [mg]:X %d.Y
   35e4c:	2520 0964 205a 6425 0a0d 0000 6f4e 6420      %d.Z %d....No d
   35e5c:	7461 2061 6572 6461 2179 5320 6e65 6964     ata ready! Sendi
   35e6c:	676e 6420 6d75 796d 6420 7461 2061 0a0d     ng dummy data ..
   35e7c:	0000 0000 4853 4354 6520 7272 726f 0d21     ....SHTC error!.
   35e8c:	000a 0000 7568 696d 6964 7974 3d20 2520     ....humidity = %
   35e9c:	2064 202c 6574 706d 3d20 2520 2064 0a0d     d , temp = %d ..
   35eac:	0000 0000 6325 325b 004a 0000 654b 6e79     ....%c[2J...Keyn
   35ebc:	6d75 6d20 7375 2074 6562 6220 7465 6577     um must be betwe
   35ecc:	6e65 3020 7420 206f 3531 0a0d 0000 0000     en 0 to 15......
   35edc:	6552 2064 756d 7473 6220 2065 6562 7774     Red must be betw
   35eec:	6565 206e 2030 6e61 2064 3532 0d35 000a     een 0 and 255...
   35efc:	7247 6565 206e 756d 7473 6220 2065 6562     Green must be be
   35f0c:	7774 6565 206e 2030 6e61 2064 3532 0d35     tween 0 and 255.
   35f1c:	000a 0000 6c42 6575 6d20 7375 2074 6562     ....Blue must be
   35f2c:	6220 7465 6577 6e65 3020 6120 646e 3220      between 0 and 2
   35f3c:	3535 0a0d 0000 0000 6e75 7865 6570 7463     55......unexpect
   35f4c:	6465 4920 4332 6520 7272 726f 0a0d 0000     ed I2C error....
   35f5c:	2030 3120 2020 2032 3320 2020 2034 3520     0  1  2  3  4  5
   35f6c:	2020 2036 3720 2020 2038 3920 2020 2061       6  7  8  9  a 
   35f7c:	6220 2020 2063 6420 2020 2065 6620 0a0d      b  c  d  e  f..
   35f8c:	0000 0000 3025 7832 203a 0000 3025 7832     ....%02x: ..%02x
   35f9c:	0020 0000                                    ...

00035fa0 <xImuGetCommand>:
   35fa0:	5cc0 0003 5cc4 0003 31f1 0001 0000 0000     .\...\...1......

00035fb0 <xOTAUCommand>:
   35fb0:	5ce8 0003 5cec 0003 33f1 0001 0000 0000     .\...\...3......

00035fc0 <xResetCommand>:
   35fc0:	5d1c 0003 5d24 0003 3411 0001 0000 0000     .]..$]...4......

00035fd0 <xNeotrellisTurnLEDCommand>:
   35fd0:	5d40 0003 5d44 0003 3431 0001 0005 0000     @]..D]..14......

00035fe0 <xSHTCGetCommand>:
   35fe0:	5d94 0003 5d9c 0003 333d 0001 0000 0000     .]...]..=3......

00035ff0 <xI2cScan>:
   35ff0:	5dbc 0003 5dc0 0003 3619 0001 0000 0000     .]...]...6......

00036000 <xClearScreen>:
   36000:	5dd8 0003 5ddc 0003 33a9 0001 0000 0000     .]...]...3......
   36010:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   36020:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   36030:	0a0d 6873 7069 615f 7272 2520 2064 6425     ..ship_arr %d %d
   36040:	2520 0d64 000a 0000                          %d.....

00036048 <msgBaseGetHWID>:
   36048:	0100 0000                                   ....

0003604c <msgNeopixelPin>:
   3604c:	010e 0003                                   ....

00036050 <msgNeopixelSpeed>:
   36050:	020e 0001                                   ....

00036054 <msgNeopixelBufLength>:
   36054:	030e 3000                                   ...0

00036058 <msgKeypadEnableInt>:
   36058:	0210 0001                                   ....

0003605c <msgKeypadGetCount>:
   3605c:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   3606c:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   3607c:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   3608c:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   3609c:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   360ac:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   360bc:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   360cc:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   360dc:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   360ec:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   360fc:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   3610c:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   3611c:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   3612c:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   3613c:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   3614c:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   3615c:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   3616c:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   3617c:	6574 2164 0000 0000 6c50 6361 6d65 6e65     ted!....Placemen
   3618c:	2074 6966 696e 6873 6465 2021 0a0d 0000     t finished! ....
   3619c:	6552 6461 2079 6f74 6620 7269 2165 0d20     Ready to fire! .
   361ac:	000a 0000 5345 3545 3631 545f 3331 745f     ....ESE516_T13_t
   361bc:	7275 006e 6946 6572 6420 6e6f 2165 0d20     urn.Fire done! .
   361cc:	000a 0000 6c50 6361 6d65 6e65 2074 7473     ....Placement st
   361dc:	7261 6574 2164 0d20 000a 0000               arted! .....

000361e8 <main_mqtt_broker>:
   361e8:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   361f8:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   36208:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   36218:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   36228:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   36238:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   36248:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   36258:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   36268:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   36278:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   36288:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   36298:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   362a8:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   362b8:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   362c8:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   362d8:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   362e8:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   362f8:	7564 7e2f 6170 7474 6e61 2f61 7766 622e     du/~pattana/fw.b
   36308:	6e69 0000 7473 726f 5f65 6966 656c 705f     in..store_file_p
   36318:	6361 656b 3a74 6520 706d 7974 6420 7461     acket: empty dat
   36328:	2e61 0a0d 0000 0000 7473 726f 5f65 6966     a.......store_fi
   36338:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   36348:	616e 656d 6920 2073 6e69 6176 696c 2e64     name is invalid.
   36358:	4420 776f 6c6e 616f 2064 6163 636e 6c65      Download cancel
   36368:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   36378:	656c 705f 6361 656b 3a74 6320 6572 7461     le_packet: creat
   36388:	6e69 2067 6966 656c 5b20 7325 0d5d 000a     ing file [%s]...
   36398:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   363a8:	3a74 6620 6c69 2065 7263 6165 6974 6e6f     t: file creation
   363b8:	6520 7272 726f 2021 6572 3a74 6425 0a0d      error! ret:%d..
   363c8:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   363d8:	6361 656b 3a74 6620 6c69 2065 7277 7469     acket: file writ
   363e8:	2065 7265 6f72 2c72 6420 776f 6c6e 616f     e error, downloa
   363f8:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   36408:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   36418:	3a74 7220 6365 6965 6576 5b64 6c25 5d75     t: received[%lu]
   36428:	202c 6966 656c 7320 7a69 5b65 6c25 5d75     , file size[%lu]
   36438:	0a0d 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   36448:	6361 656b 3a74 6620 6c69 2065 6f64 6e77     acket: file down
   36458:	6f6c 6461 6465 7320 6375 6563 7373 7566     loaded successfu
   36468:	6c6c 2e79 0a0d 0000 7468 7074 635f 696c     lly.....http_cli
   36478:	6e65 5f74 6163 6c6c 6162 6b63 203a 5448     ent_callback: HT
   36488:	5054 6320 696c 6e65 2074 6f73 6b63 7465     TP client socket
   36498:	6320 6e6f 656e 7463 6465 0d2e 000a 0000      connected......
   364a8:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   364b8:	6162 6b63 203a 6572 7571 7365 2074 6f63     back: request co
   364c8:	706d 656c 6574 2e64 0a0d 0000 7468 7074     mpleted.....http
   364d8:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   364e8:	203a 6572 6563 7669 6465 7220 7365 6f70     : received respo
   364f8:	736e 2065 7525 6420 7461 2061 6973 657a     nse %u data size
   36508:	2520 0d75 000a 0000 7468 7074 635f 696c      %u.....http_cli
   36518:	6e65 5f74 6163 6c6c 6162 6b63 203a 6964     ent_callback: di
   36528:	6373 6e6f 656e 7463 6f69 206e 6572 7361     sconnection reas
   36538:	6e6f 253a 0d64 000a 6572 6f73 766c 5f65     on:%d...resolve_
   36548:	6263 203a 7325 4920 2050 6461 7264 7365     cb: %s IP addres
   36558:	2073 7369 2520 2e64 6425 252e 2e64 6425     s is %d.%d.%d.%d
   36568:	0a0d 0a0d 0000 0000 6977 6966 635f 3a62     ........wifi_cb:
   36578:	4d20 4d32 575f 4649 5f49 4f43 4e4e 4345      M2M_WIFI_CONNEC
   36588:	4554 0d44 000a 0000 6977 6966 635f 3a62     TED.....wifi_cb:
   36598:	4d20 4d32 575f 4649 5f49 4944 4353 4e4f      M2M_WIFI_DISCON
   365a8:	454e 5443 4445 0a0d 0000 0000 3738 3536     NECTED......8765
   365b8:	3334 3132 0000 0000 694d 3120 0031 0000     4321....Mi 11...
   365c8:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
   365d8:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
   365e8:	7525 0a0d 0000 0000 7245 6f72 2072 6f63     %u......Error co
   365f8:	6e6e 6365 6974 676e 7420 206f 514d 5454     nnecting to MQTT
   36608:	4220 6f72 656b 2172 0a0d 0000 6e69 7469      Broker!....init
   36618:	735f 6f74 6172 6567 203a 6c70 6165 6573     _storage: please
   36628:	7020 756c 2067 6e61 5320 2f44 4d4d 2043      plug an SD/MMC 
   36638:	6163 6472 6920 206e 6c73 746f 2e2e 0d2e     card in slot....
   36648:	000a 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36658:	203a 4453 4320 7261 2064 6e69 7473 6c61     : SD Card instal
   36668:	206c 6166 6c69 6465 0d2e 000a 6e69 7469     l failed....init
   36678:	735f 6f74 6172 6567 203a 7274 2079 6e75     _storage: try un
   36688:	6c70 6775 6120 646e 7220 2d65 6c70 6775     plug and re-plug
   36698:	7420 6568 6320 7261 2e64 0a0d 0000 0000      the card.......
   366a8:	6e69 7469 735f 6f74 6172 6567 203a 6f6d     init_storage: mo
   366b8:	6e75 6974 676e 5320 2044 6163 6472 2e2e     unting SD card..
   366c8:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   366d8:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   366e8:	6166 6c69 6465 2021 7228 7365 2520 2964     failed! (res %d)
   366f8:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36708:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   36718:	4b4f 0d2e 000a 0000 6f63 666e 6769 7275     OK......configur
   36728:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
   36738:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
   36748:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
   36758:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
   36768:	005b 0000 0a0d 6873 7069 7320 7a69 2065     [.....ship size 
   36778:	656d 7373 6761 2065 6572 6563 7669 6465     message received
   36788:	0d21 000a 0a0d 2520 2a2e 0073 0a0d 2e25     !..... %.*s...%.
   36798:	732a 0000 0a0d 7420 6f6f 6d20 6e61 2079     *s.... too many 
   367a8:	6873 7069 2121 0a0d 0000 0000 0a0d 7574     ship!!........tu
   367b8:	6e72 6d20 7365 6173 6567 7220 6365 6965     rn message recei
   367c8:	6576 2164 0a0d 0000 0a0d 6f43 6e6e 6365     ved!......Connec
   367d8:	6974 676e 7420 206f 7242 6b6f 7265 2e2e     ting to Broker..
   367e8:	002e 0000 7242 4a73 4e42 6f56 4251 376c     ....BrsJBNVoQBl7
   367f8:	0000 0000 7472 7974 626f 6a65 0000 0000     ....rttyobej....
   36808:	514d 5454 2020 7245 6f72 2072 202d 4f4e     MQTT  Error - NO
   36818:	2054 6f43 6e6e 6365 6574 2064 6f74 6220     T Connected to b
   36828:	6f72 656b 0d72 000a 514d 5454 4320 6e6f     roker...MQTT Con
   36838:	656e 7463 6465 7420 206f 7262 6b6f 7265     nected to broker
   36848:	0a0d 0000 6f43 6e6e 6365 2074 6166 6c69     ....Connect fail
   36858:	7420 206f 6573 7672 7265 2528 2973 2021      to server(%s)! 
   36868:	6572 7274 2079 7469 6120 7475 6d6f 7461     retry it automat
   36878:	6369 6c61 796c 0d2e 000a 0000 5345 3545     ically......ESE5
   36888:	3631 545f 3331 735f 6968 7370 7a69 0065     16_T13_shipsize.
   36898:	5345 3545 3631 545f 3331 745f 7275 006e     ESE516_T13_turn.
   368a8:	514d 5454 4320 6e6f 656e 7463 6465 0a0d     MQTT Connected..
   368b8:	0000 0000 514d 5454 6220 6f72 656b 2072     ....MQTT broker 
   368c8:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
   368d8:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
   368e8:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
   368f8:	6f63 6e6e 6365 6574 0d64 000a 514d 5454     connected...MQTT
   36908:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
   36918:	6166 6c69 6465 202e 7245 6f72 2072 6f63     failed. Error co
   36928:	6564 6920 2073 2528 2964 0a0d 0000 0000     de is (%d)......
   36938:	514d 5454 7220 6765 7369 6574 2072 6163     MQTT register ca
   36948:	6c6c 6162 6b63 6620 6961 656c 2e64 4520     llback failed. E
   36958:	7272 726f 6320 646f 2065 7369 2820 6425     rror code is (%d
   36968:	0d29 000a 6f43 6e6e 6365 6574 2064 6f74     )...Connected to
   36978:	4d20 5451 2054 7242 6b6f 7265 0d21 000a      MQTT Broker!...
   36988:	0a0d 0000 5345 3545 3631 545f 3331 6c5f     ....ESE516_T13_l
   36998:	636f 0000 5245 4f52 2052 6e49 7469 6169     oc..ERROR Initia
   369a8:	696c 697a 676e 5720 6669 2069 6144 6174     lizing Wifi Data
   369b8:	7120 6575 6575 2173 0a0d 0000 5345 3545      queues!....ESE5
   369c8:	3631 2d20 5720 6669 2069 6e49 7469 4320     16 - Wifi Init C
   369d8:	646f 0d65 000a 0000 616d 6e69 203a 326d     ode.....main: m2
   369e8:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
   369f8:	6520 7272 726f 2021 7228 7365 2520 2964      error! (res %d)
   36a08:	0a0d 0000 616d 6e69 203a 6f63 6e6e 6365     ....main: connec
   36a18:	6974 676e 7420 206f 6957 6946 4120 2050     ting to WiFi AP 
   36a28:	7325 2e2e 0d2e 000a 0031 0000 5345 3545     %s......1...ESE5
   36a38:	3631 545f 3331 705f 0031 0000 514d 5454     16_T13_p1...MQTT
   36a48:	7320 6174 7472 7320 6769 616e 206c 6573      start signal se
   36a58:	746e 0000 465b 4941 5d4c 7220 7365 2520     nt..[FAIL] res %
   36a68:	0d64 000a 7075 6164 6574 742e 7478 6120     d...update.txt a
   36a78:	6464 6465 0d21 000a 3a30 7075 6164 6574     dded!...0:update
   36a88:	742e 7478 0000 0000 207b 7022 2022 203a     .txt....{ "p" : 
   36a98:	6425 202c 6c22 636f 3a22 0000 007d 0000     %d, "loc":..}...
   36aa8:	6425 002c 6425 005d 67b4 0001 67c0 0001     %d,.%d]..g...g..
   36ab8:	67d2 0001 6828 0001 6848 0001 6568 706c     .g..(h..Hh..help
   36ac8:	0000 0000 0a0d 6568 706c 0d3a 200a 694c     ......help:.. Li
   36ad8:	7473 2073 6c61 206c 6874 2065 6572 6967     sts all the regi
   36ae8:	7473 7265 6465 6320 6d6f 616d 646e 0d73     stered commands.
   36af8:	0d0a 000a 6e49 6f63 7272 6365 2074 6f63     ....Incorrect co
   36b08:	6d6d 6e61 2064 6170 6172 656d 6574 2872     mmand parameter(
   36b18:	2973 202e 4520 746e 7265 2220 6568 706c     s).  Enter "help
   36b28:	2022 6f74 7620 6569 2077 2061 696c 7473     " to view a list
   36b38:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   36b48:	6d6d 6e61 7364 0d2e 0d0a 000a 6f43 6d6d     mmands......Comm
   36b58:	6e61 2064 6f6e 2074 6572 6f63 6e67 7369     and not recognis
   36b68:	6465 202e 4520 746e 7265 2720 6568 706c     ed.  Enter 'help
   36b78:	2027 6f74 7620 6569 2077 2061 696c 7473     ' to view a list
   36b88:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   36b98:	6d6d 6e61 7364 0d2e 0d0a 000a               mmands......

00036ba4 <xHelpCommand>:
   36ba4:	6ac4 0003 6acc 0003 82b1 0001 0000 0000     .j...j..........
   36bb4:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   36bc4:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   36bd4:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   36be4:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   36bf4:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   36c04:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   36c14:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   36c24:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   36c34:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   36c44:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   36c54:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   36c64:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   36c74:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   36c84:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   36c94:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   36ca4:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   36cb4:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   36cc4:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   36cd4:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   36ce4:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   36cf4:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   36d04:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   36d14:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   36d24:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   36d34:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   36d44:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   36d54:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   36d64:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   36d74:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   36d84:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   36d94:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   36da4:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   36db4:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   36dc4:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   36dd4:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   36de4:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   36df4:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   36e04:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   36e14:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   36e24:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   36e34:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   36e44:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   36e54:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   36e64:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   36e74:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   36e84:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   36e94:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   36ea4:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   36eb4:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   36ec4:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   36ed4:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   36ee4:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   36ef4:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   36f04:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   36f14:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   36f24:	6365 6374 616c 7373 0021 0000 89d6 0001     ectclass!.......
   36f34:	89ce 0001 89d2 0001 89c6 0001 89ca 0001     ................
   36f44:	89da 0001 89de 0001 89e2 0001 89e6 0001     ................
   36f54:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   36f64:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   36f74:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   36f84:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   36f94:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   36fa4:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   36fb4:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   36fc4:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   36fd4:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   36fe4:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   36ff4:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   37004:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   37014:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   37024:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   37034:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   37044:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   37054:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   37064:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   37074:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   37084:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   37094:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   370a4:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   370b4:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   370c4:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   370d4:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   370e4:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   370f4:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   37104:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   37114:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   37124:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   37134:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   37144:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   37154:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   37164:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   37174:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   37184:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   37194:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   371a4:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   371b4:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   371c4:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   371d4:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   371e4:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   371f4:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   37204:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   37214:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   37224:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   37234:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   37244:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   37254:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   37264:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   37274:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   37284:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   37294:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   372a4:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   372b4:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   372c4:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   372d4:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   372e4:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   372f4:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   37304:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37314:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   37324:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   37334:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   37344:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   37354:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37364:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   37374:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37384:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   37394:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   373a4:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   373b4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   373c4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   373d4:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   373e4:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   373f4:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   37404:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   37414:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   37424:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37434:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37444:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37454:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   37464:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   37474:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   37484:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   37494:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   374a4:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   374b4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   374c4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   374d4:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   374e4:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   374f4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37504:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37514:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   37524:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   37534:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   37544:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37554:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37564:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   37574:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   37584:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   37594:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   375a4:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   375b4:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   375c4:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   375d4:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   375e4:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   375f4:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   37604:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37614:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   37624:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   37634:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   37644:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   37654:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   37664:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   37674:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   37684:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   37694:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   376a4:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   376b4:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   376c4:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   376d4:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   376e4:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   376f4:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   37704:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   37714:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   37724:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37734:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37744:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   37754:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   37764:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37774:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   37784:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   37794:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   377a4:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   377b4:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   377c4:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   377d4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   377e4:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   377f4:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   37804:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   37814:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   37824:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   37834:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   37844:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   37854:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   37864:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   37874:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37884:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   37894:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   378a4:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   378b4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   378c4:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   378d4:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   378e4:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   378f4:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37904:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37914:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   37924:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   37934:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   37944:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37954:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   37964:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   37974:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37984:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37994:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   379a4:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   379b4:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   379c4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   379d4:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   379e4:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   379f4:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37a04:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37a14:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   37a24:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   37a34:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   37a44:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37a54:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   37a64:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   37a74:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   37a84:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   37a94:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   37aa4:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   37ab4:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   37ac4:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37ad4:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37ae4:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37af4:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   37b04:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37b14:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37b24:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37b34:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   37b44:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   37b54:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   37b64:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   37b74:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   37b84:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37b94:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   37ba4:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   37bb4:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   37bc4:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   37bd4:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   37be4:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   37bf4:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   37c04:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   37c14:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37c24:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   37c34:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   37c44:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   37c54:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   37c64:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   37c74:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   37c84:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37c94:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   37ca4:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   37cb4:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   37cc4:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   37cd4:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   37ce4:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   37cf4:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   37d04:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   37d14:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   37d24:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   37d34:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   37d44:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   37d54:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   37d64:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   37d74:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   37d84:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   37d94:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   37da4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37db4:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   37dc4:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   37dd4:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   37de4:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   37df4:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   37e04:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   37e14:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   37e24:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   37e34:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   37e44:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37e54:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   37e64:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   37e74:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   37e84:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   37e94:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   37ea4:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   37eb4:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   37ec4:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   37ed4:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   37ee4:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   37ef4:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   37f04:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   37f14:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   37f24:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   37f34:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37f44:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   37f54:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   37f64:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   37f74:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   37f84:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   37f94:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   37fa4:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   37fb4:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   37fc4:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   37fd4:	0000 0000 6d54 2072 7653 0063 da78 0001     ....Tmr Svc.x...
   37fe4:	da78 0001 da78 0001 db06 0001 dad0 0001     x...x...........
   37ff4:	dafa 0001 da78 0001 da78 0001 db06 0001     ....x...x.......
   38004:	dad0 0001                                   ....

00038008 <sd_mmc_trans_units>:
   38008:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00038024 <sd_trans_multipliers>:
   38024:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   38034:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   38044:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   38054:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00038064 <mmc_trans_multipliers>:
   38064:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   38074:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   38084:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   38094:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   380a4:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   380b4:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   380c4:	746c 6320 646d 000a 000d 0000               lt cmd......

000380d0 <__FUNCTION__.17099>:
   380d0:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   380e0:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   380f0:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   38100:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   38110:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   38120:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   38130:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   38140:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   38150:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   38160:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   38170:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   38180:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   38190:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   381a0:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   381b0:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   381c0:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   381d0:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   381e0:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   381f0:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   38200:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   38210:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   38220:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   38230:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   38240:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   38250:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   38260:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   38270:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   38280:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   38290:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   382a0:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   382b0:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   382c0:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   382d0:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   382e0:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   382f0:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   38300:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   38310:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   38320:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   38330:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   38340:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   38350:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   38360:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   38370:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   38380:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   38390:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   383a0:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   383b0:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   383c0:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   383d0:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   383e0:	203f 6425 000a 0000 185c 0002 182c 0002     ? %d....\...,...
   383f0:	1824 0002 183c 0002 1834 0002 1854 0002     $...<...4...T...
   38400:	1844 0002 184c 0002                         D...L...

00038408 <__FUNCTION__.17967>:
   38408:	6968 5f66 6573 646e 0000 0000               hif_send....

00038414 <__FUNCTION__.17977>:
   38414:	6968 5f66 7369 0072                         hif_isr.

0003841c <__FUNCTION__.17986>:
   3841c:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0003842c <__FUNCTION__.17998>:
   3842c:	6968 5f66 6572 6563 7669 0065               hif_receive.

00038438 <__FUNCTION__.18014>:
   38438:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   38448:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   38458:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   38468:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   38478:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38488:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   38498:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   384a8:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   384b8:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   384c8:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   384d8:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   384e8:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   384f8:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   38508:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   38518:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   38528:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   38538:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   38548:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   38558:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   38568:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   38578:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   38588:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   38598:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   385a8:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   385b8:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   385c8:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   385d8:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   385e8:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   385f8:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   38608:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   38618:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   38628:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   38638:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   38648:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   38658:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   38668:	000a 0000 3731 343a 3a31 3734 0000 0000     ....17:41:47....
   38678:	614d 2079 3220 3220 3230 0032 7244 7669     May  2 2022.Driv
   38688:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   38698:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   386a8:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   386b8:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   386c8:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   386d8:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   386e8:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   386f8:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   38708:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   38718:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   38728:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   38738:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   38748:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   38758:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   38768:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   38778:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   38788:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   38798:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   387a8:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   387b8:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   387c8:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   387d8:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   387e8:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   387f8:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   38808:	4220 6675 6566 0a72 0000 0000                Buffer.....

00038814 <__FUNCTION__.17949>:
   38814:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00038820 <__FUNCTION__.17978>:
   38820:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00038830 <__FUNCTION__.18009>:
   38830:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   38840:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   38850:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   38860:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   38870:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   38880:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   38890:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   388a0:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   388b0:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   388c0:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

000388d0 <__FUNCTION__.17806>:
   388d0:	6863 7069 775f 6b61 0065 0000               chip_wake...

000388dc <__FUNCTION__.17855>:
   388dc:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   388ec:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   388fc:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   3890c:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   3891c:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   3892c:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   3893c:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   3894c:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   3895c:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   3896c:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   3897c:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   3898c:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   3899c:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   389ac:	6920 696e 2074 7562 0a73 0000                init bus...

000389b8 <__FUNCTION__.17853>:
   389b8:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

000389c4 <__FUNCTION__.17860>:
   389c4:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

000389d4 <crc7_syndrome_table>:
   389d4:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   389e4:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   389f4:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   38a04:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   38a14:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   38a24:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   38a34:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   38a44:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   38a54:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   38a64:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   38a74:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   38a84:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   38a94:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   38aa4:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   38ab4:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   38ac4:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   38ad4:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38ae4:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   38af4:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   38b04:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   38b14:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38b24:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   38b34:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38b44:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38b54:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   38b64:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   38b74:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   38b84:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   38b94:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   38ba4:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   38bb4:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   38bc4:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   38bd4:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   38be4:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   38bf4:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   38c04:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38c14:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   38c24:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   38c34:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38c44:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   38c54:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   38c64:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   38c74:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   38c84:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   38c94:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   38ca4:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   38cb4:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   38cc4:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   38cd4:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   38ce4:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   38cf4:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   38d04:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   38d14:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   38d24:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   38d34:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38d44:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38d54:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   38d64:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   38d74:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   38d84:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   38d94:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38da4:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   38db4:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   38dc4:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   38dd4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   38de4:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   38df4:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   38e04:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38e14:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   38e24:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   38e34:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   38e44:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   38e54:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   38e64:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   38e74:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   38e84:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   38e94:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   38ea4:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   38eb4:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38ec4:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   38ed4:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   38ee4:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   38ef4:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   38f04:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   38f14:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   38f24:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   38f34:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   38f44:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   38f54:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   38f64:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   38f74:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38f84:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   38f94:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   38fa4:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   38fb4:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   38fc4:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38fd4:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   38fe4:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   38ff4:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   39004:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   39014:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   39024:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   39034:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   39044:	2e2e 0a2e 0000 0000 3484 0002 3484 0002     .........4...4..
   39054:	3514 0002 33d8 0002 341e 0002 3440 0002     .5...3...4..@4..
   39064:	34c6 0002 34c6 0002 3580 0002 33ac 0002     .4...4...5...3..
   39074:	35da 0002 35da 0002 35da 0002 35da 0002     .5...5...5...5..
   39084:	3462 0002 39e4 0002 39e4 0002 3a6c 0002     b4...9...9..l:..
   39094:	3948 0002 398a 0002 39a8 0002 3a22 0002     H9...9...9..":..
   390a4:	3a22 0002 3ace 0002 3920 0002 3b1e 0002     ":...:.. 9...;..
   390b4:	3b1e 0002 3b1e 0002 3b1e 0002 39c6 0002     .;...;...;...9..

000390c4 <__FUNCTION__.17128>:
   390c4:	7073 5f69 6d63 0064                         spi_cmd.

000390cc <__FUNCTION__.17135>:
   390cc:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

000390dc <__FUNCTION__.17144>:
   390dc:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

000390e8 <__FUNCTION__.17177>:
   390e8:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   390f8:	0000 0000                                   ....

000390fc <__FUNCTION__.17223>:
   390fc:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0003910c <__FUNCTION__.17235>:
   3910c:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0003911c <__FUNCTION__.17246>:
   3911c:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0003912c <__FUNCTION__.17258>:
   3912c:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0003913c <__FUNCTION__.17269>:
   3913c:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00039148 <__FUNCTION__.17290>:
   39148:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   39158:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   39168:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   39178:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   39188:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   39198:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   391a8:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   391b8:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   391c8:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   391d8:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   391e8:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   391f8:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   39208:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   39218:	2074 2230 0000 0000                         t 0"....

00039220 <lun_desc>:
   39220:	f44d 0001 f4a5 0001 f4f1 0001 f53d 0001     M...........=...
   39230:	f56d 0001 f5f1 0001 f681 0001 9208 0003     m...............
   39240:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   39250:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   39260:	9402 0002 947c 0002 947c 0002 9420 0002     ....|...|... ...
   39270:	941a 0002 9426 0002 9408 0002 942c 0002     ....&.......,...
   39280:	9462 0002 9664 0002 96b4 0002 96b4 0002     b...d...........
   39290:	96b0 0002 9656 0002 9676 0002 9646 0002     ....V...v...F...
   392a0:	9688 0002 969a 0002 9702 0002 9730 0002     ............0...
   392b0:	9730 0002 972c 0002 96fc 0002 9708 0002     0...,...........
   392c0:	96f6 0002 970e 0002 9714 0002               ............

000392cc <tcc_modules>:
   392cc:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

000392d8 <_tcc_gclk_ids>:
   392d8:	1a1a 001b                                   ....

000392dc <_tcc_apbcmasks>:
   392dc:	0100 0000 0200 0000 0400 0000               ............

000392e8 <_tcc_maxs>:
   392e8:	ffff 00ff ffff 00ff ffff 0000               ............

000392f4 <_tcc_cc_nums>:
   392f4:	0204 0002                                   ....

000392f8 <_tcc_ow_nums>:
   392f8:	0408 0002                                   ....

000392fc <_tcc_intflag>:
   392fc:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   3930c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   3931c:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0003932c <LfnOfs>:
   3932c:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   3933c:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   3934c:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   3935c:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   3936c:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   3937c:	5441 2020 2020 0020                         AT     .

00039384 <excvt.4558>:
   39384:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   39394:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   393a4:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   393b4:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   393c4:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   393d4:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   393e4:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   393f4:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00039404 <Tbl>:
   39404:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   39414:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   39424:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   39434:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   39444:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   39454:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   39464:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   39474:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   39484:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   39494:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   394a4:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   394b4:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   394c4:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   394d4:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   394e4:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   394f4:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00039504 <tbl_lower.4308>:
   39504:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   39514:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   39524:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   39534:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   39544:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   39554:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   39564:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   39574:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   39584:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   39594:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   395a4:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   395b4:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   395c4:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   395d4:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   395e4:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   395f4:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   39604:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   39614:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   39624:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   39634:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   39644:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   39654:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   39664:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   39674:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   39684:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   39694:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   396a4:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   396b4:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   396c4:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   396d4:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

000396e4 <tbl_upper.4309>:
   396e4:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   396f4:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   39704:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   39714:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   39724:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   39734:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   39744:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   39754:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   39764:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   39774:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   39784:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   39794:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   397a4:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   397b4:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   397c4:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   397d4:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   397e4:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   397f4:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   39804:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   39814:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   39824:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   39834:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   39844:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   39854:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   39864:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   39874:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   39884:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   39894:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   398a4:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   398b4:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   398c4:	ea16 0002 ea16 0002 ea16 0002 e8a4 0002     ................
   398d4:	ea16 0002 e98e 0002 ea16 0002 ea16 0002     ................
   398e4:	ea16 0002 ea16 0002 ea16 0002 ea16 0002     ................
   398f4:	ea16 0002 ea08 0002 514d 4354 0000 0000     ........MQTC....
   39904:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   39914:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   39954:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   3996c:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   399ac:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   399bc:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   399cc:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   399dc:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   399ec:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   399fc:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   39a0c:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   39a1c:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   39a2c:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   39a3c:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   39a4c:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   39a5c:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   39a6c:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   39a7c:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   39a8c:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   39a9c:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   39aac:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   39abc:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   39acc:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   39adc:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   39aec:	5448 5054 002f 0000 0d31 0000 0b0a 0003     HTTP/...1.......
   39afc:	0b04 0003 0afe 0003 0af8 0003 0b10 0003     ................
   39b0c:	0af2 0003 0b10 0003 0aec 0003 0ae6 0003     ................
   39b1c:	0b10 0003 0ae0 0003 0ae0 0003 0ada 0003     ................
   39b2c:	0ad4 0003 0ace 0003 2000 4200 2400 4200     ......... .B.$.B
   39b3c:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   39b4c:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   39b5c:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   39b6c:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   39b7c:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   39b8c:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   39b9c:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   39bac:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   39bbc:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   39bcc:	676e 3120 7473 5320 6565 6173 2177 0a0d     ng 1st Seesaw!..
   39bdc:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   39bec:	7331 2074 6553 7365 7761 0d21 000a 0000     1st Seesaw!.....
   39bfc:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   39c0c:	676e 3220 646e 5320 6565 6173 2177 0a0d     ng 2nd Seesaw!..
   39c1c:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   39c2c:	6e32 2064 6553 7365 7761 0d21 000a 0000     2nd Seesaw!.....
   39c3c:	6143 6e6e 746f 6620 6e69 2064 4d49 2155     Cannot find IMU!
   39c4c:	0a0d 0000 4d49 2055 6f66 6e75 2164 0a0d     ....IMU found!..
   39c5c:	0000 0000 4d49 2055 6e69 7469 6169 696c     ....IMU initiali
   39c6c:	657a 2164 0a0d 0000 6f43 6c75 2064 6f6e     zed!....Could no
   39c7c:	2074 6e69 7469 6169 696c 657a 4920 554d     t initialize IMU
   39c8c:	0a0d 0000 6548 7061 6220 6665 726f 2065     ....Heap before 
   39c9c:	7473 7261 6974 676e 7420 7361 736b 203a     starting tasks: 
   39cac:	6425 0a0d 0000 0000 4c43 5f49 4154 4b53     %d......CLI_TASK
   39cbc:	0000 0000 5245 3a52 4320 494c 7420 7361     ....ERR: CLI tas
   39ccc:	206b 6f63 6c75 2064 6f6e 2074 6562 6920     k could not be i
   39cdc:	696e 6974 6c61 7a69 6465 0d21 000a 0000     nitialized!.....
   39cec:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   39cfc:	6e69 2067 4c43 3a49 2520 0d64 000a 0000     ing CLI: %d.....
   39d0c:	4957 4946 545f 5341 004b 0000 5245 3a52     WIFI_TASK...ERR:
   39d1c:	5720 4649 2049 6174 6b73 6320 756f 646c      WIFI task could
   39d2c:	6e20 746f 6220 2065 6e69 7469 6169 696c      not be initiali
   39d3c:	657a 2164 0a0d 0000 6548 7061 6120 7466     zed!....Heap aft
   39d4c:	7265 7320 6174 7472 6e69 2067 4957 4946     er starting WIFI
   39d5c:	203a 6425 0a0d 0000 4955 5420 7361 006b     : %d....UI Task.
   39d6c:	5245 3a52 5520 2049 6174 6b73 6320 756f     ERR: UI task cou
   39d7c:	646c 6e20 746f 6220 2065 6e69 7469 6169     ld not be initia
   39d8c:	696c 657a 2164 0a0d 0000 0000 6548 7061     lized!......Heap
   39d9c:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   39dac:	4955 5420 7361 3a6b 2520 0d64 000a 0000     UI Task: %d.....
   39dbc:	6f43 746e 6f72 206c 6154 6b73 0000 0000     Control Task....
   39dcc:	5245 3a52 4320 6e6f 7274 6c6f 7420 7361     ERR: Control tas
   39ddc:	206b 6f63 6c75 2064 6f6e 2074 6562 6920     k could not be i
   39dec:	696e 6974 6c61 7a69 6465 0d21 000a 0000     nitialized!.....
   39dfc:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   39e0c:	6e69 2067 6f43 746e 6f72 206c 6154 6b73     ing Control Task
   39e1c:	203a 6425 0a0d 0000 7245 6f72 2072 6e6f     : %d....Error on
   39e2c:	6d20 6d65 726f 2079 6c61 6f6c 6163 6974      memory allocati
   39e3c:	6e6f 6f20 206e 5246 4545 5452 534f 0d21     on on FREERTOS!.
   39e4c:	000a 0000 7245 6f72 2072 6e6f 7320 6174     ....Error on sta
   39e5c:	6b63 6f20 6576 6672 6f6c 2077 6e6f 4620     ck overflow on F
   39e6c:	4552 5245 4f54 2153 0a0d 0000 2d30 0003     REERTOS!....0-..
   39e7c:	2c80 0003 2c80 0003 2c7e 0003 2d22 0003     .,...,..~,.."-..
   39e8c:	2d22 0003 2d18 0003 2c7e 0003 2d22 0003     "-...-..~,.."-..
   39e9c:	2d18 0003 2d22 0003 2c7e 0003 2d28 0003     .-.."-..~,..(-..
   39eac:	2d28 0003 2d28 0003 2db8 0003 373c 0003     (-..(-...-..<7..
   39ebc:	371e 0003 36d8 0003 35f6 0003 36d8 0003     .7...6...5...6..
   39ecc:	3710 0003 36d8 0003 35f6 0003 371e 0003     .7...6...5...7..
   39edc:	371e 0003 3710 0003 35f6 0003 35ee 0003     .7...7...5...5..
   39eec:	35ee 0003 35ee 0003 3954 0003 3d9c 0003     .5...5..T9...=..
   39efc:	3c5c 0003 3c5c 0003 3c58 0003 3d74 0003     \<..\<..X<..t=..
   39f0c:	3d74 0003 3d66 0003 3c58 0003 3d74 0003     t=..f=..X<..t=..
   39f1c:	3d66 0003 3d74 0003 3c58 0003 3d7c 0003     f=..t=..X<..|=..
   39f2c:	3d7c 0003 3d7c 0003 3f80 0003               |=..|=...?..

00039f38 <_global_impure_ptr>:
   39f38:	00d8 2000                                   ... 

00039f3c <__sf_fake_stderr>:
	...

00039f5c <__sf_fake_stdin>:
	...

00039f7c <__sf_fake_stdout>:
	...
   39f9c:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   39fac:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   39fbc:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   39fcc:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

00039fd9 <_ctype_>:
   39fd9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   39fe9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   39ff9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3a009:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3a019:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3a029:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3a039:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3a049:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3a059:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003a0dc <_init>:
   3a0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a0de:	46c0      	nop			; (mov r8, r8)
   3a0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3a0e2:	bc08      	pop	{r3}
   3a0e4:	469e      	mov	lr, r3
   3a0e6:	4770      	bx	lr

0003a0e8 <__init_array_start>:
   3a0e8:	000120dd 	.word	0x000120dd

0003a0ec <_fini>:
   3a0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a0ee:	46c0      	nop			; (mov r8, r8)
   3a0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3a0f2:	bc08      	pop	{r3}
   3a0f4:	469e      	mov	lr, r3
   3a0f6:	4770      	bx	lr

0003a0f8 <__fini_array_start>:
   3a0f8:	000120b5 	.word	0x000120b5
